{"sha": "b69195a0f48add25066ee99ef00597715d3c1fe7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY5MTk1YTBmNDhhZGQyNTA2NmVlOTllZjAwNTk3NzE1ZDNjMWZlNw==", "commit": {"author": {"name": "Edgar E. Iglesias", "email": "edgar.iglesias@xilinx.com", "date": "2017-01-06T20:54:34Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2017-01-06T20:54:34Z"}, "message": "Make MicroBlaze support DWARF EH (old Xilinx patch, needed for glibc build).\n\nThis patch, taken from\n<https://git.busybox.net/buildroot/tree/package/gcc/5.4.0/840-microblaze-enable-dwarf-eh-support.patch>\nand with a few formatting cleanups and an update for the removal of\ngen_rtx_raw_REG, enables DWARF EH support for MicroBlaze.\n\nThis is needed for building glibc with a compiler that includes shared\nlibgcc; right now all glibc builds for MicroBlaze are failing with my\nbot for lack of this support.  (It's dubious if we should have glibc\nports at all where required support is missing in FSF GCC.)\n\nTested building glibc with build-many-glibcs.py.  I have *not* done\nany other testing or any execution testing for MicroBlaze.\n\n2017-01-06  Edgar E. Iglesias <edgar.iglesias@xilinx.com>\n\t    David Holsgrove <david.holsgrove@xilinx.com>\n\n\t* common/config/microblaze/microblaze-common.c\n\t(TARGET_EXCEPT_UNWIND_INFO): Remove.\n\t* config/microblaze/microblaze-protos.h (microblaze_eh_return):\n\tNew prototype.\n\t* config/microblaze/microblaze.c (microblaze_must_save_register)\n\t(microblaze_expand_epilogue, microblaze_return_addr): Handle\n\tcalls_eh_return.\n\t(microblaze_eh_return): New function.\n\t* config/microblaze/microblaze.h (RETURN_ADDR_OFFSET)\n\t(EH_RETURN_DATA_REGNO, MB_EH_STACKADJ_REGNUM)\n\t(EH_RETURN_STACKADJ_RTX, ASM_PREFERRED_EH_DATA_FORMAT): New macros.\n\t* config/microblaze/microblaze.md (eh_return): New pattern.\n\nCo-Authored-By: David Holsgrove <david.holsgrove@xilinx.com>\n\nFrom-SVN: r244183", "tree": {"sha": "bf1a938e1e5e9e5426bda271978925b3fea8de59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf1a938e1e5e9e5426bda271978925b3fea8de59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b69195a0f48add25066ee99ef00597715d3c1fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b69195a0f48add25066ee99ef00597715d3c1fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b69195a0f48add25066ee99ef00597715d3c1fe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b69195a0f48add25066ee99ef00597715d3c1fe7/comments", "author": {"login": "edgarigl", "id": 86901, "node_id": "MDQ6VXNlcjg2OTAx", "avatar_url": "https://avatars.githubusercontent.com/u/86901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edgarigl", "html_url": "https://github.com/edgarigl", "followers_url": "https://api.github.com/users/edgarigl/followers", "following_url": "https://api.github.com/users/edgarigl/following{/other_user}", "gists_url": "https://api.github.com/users/edgarigl/gists{/gist_id}", "starred_url": "https://api.github.com/users/edgarigl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edgarigl/subscriptions", "organizations_url": "https://api.github.com/users/edgarigl/orgs", "repos_url": "https://api.github.com/users/edgarigl/repos", "events_url": "https://api.github.com/users/edgarigl/events{/privacy}", "received_events_url": "https://api.github.com/users/edgarigl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75213cc0e4b3afd8e677f25e4fe9201f1b856f33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75213cc0e4b3afd8e677f25e4fe9201f1b856f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75213cc0e4b3afd8e677f25e4fe9201f1b856f33"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "88cc61bf9328c89096aea37b5d1d9729668ace7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b69195a0f48add25066ee99ef00597715d3c1fe7", "patch": "@@ -1,3 +1,19 @@\n+2017-01-06  Edgar E. Iglesias <edgar.iglesias@xilinx.com>\n+\t    David Holsgrove <david.holsgrove@xilinx.com>\n+\n+\t* common/config/microblaze/microblaze-common.c\n+\t(TARGET_EXCEPT_UNWIND_INFO): Remove.\n+\t* config/microblaze/microblaze-protos.h (microblaze_eh_return):\n+\tNew prototype.\n+\t* config/microblaze/microblaze.c (microblaze_must_save_register)\n+\t(microblaze_expand_epilogue, microblaze_return_addr): Handle\n+\tcalls_eh_return.\n+\t(microblaze_eh_return): New function.\n+\t* config/microblaze/microblaze.h (RETURN_ADDR_OFFSET)\n+\t(EH_RETURN_DATA_REGNO, MB_EH_STACKADJ_REGNUM)\n+\t(EH_RETURN_STACKADJ_RTX, ASM_PREFERRED_EH_DATA_FORMAT): New macros.\n+\t* config/microblaze/microblaze.md (eh_return): New pattern.\n+\n 2017-01-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* system.h (GCC_DIAGNOSTIC_PUSH_IGNORED, GCC_DIAGNOSTIC_POP,"}, {"sha": "49756633056f0d6080b32d4621a48426a841b09f", "filename": "gcc/common/config/microblaze/microblaze-common.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2Fcommon%2Fconfig%2Fmicroblaze%2Fmicroblaze-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2Fcommon%2Fconfig%2Fmicroblaze%2Fmicroblaze-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmicroblaze%2Fmicroblaze-common.c?ref=b69195a0f48add25066ee99ef00597715d3c1fe7", "patch": "@@ -37,7 +37,4 @@ static const struct default_options microblaze_option_optimization_table[] =\n #undef  TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE microblaze_option_optimization_table\n \n-#undef TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO  sjlj_except_unwind_info\n-\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "9ba8f2d46f94dc546818ca5d0ec2da76828e877d", "filename": "gcc/config/microblaze/microblaze-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h?ref=b69195a0f48add25066ee99ef00597715d3c1fe7", "patch": "@@ -57,6 +57,7 @@ extern bool microblaze_tls_referenced_p (rtx);\n extern int symbol_mentioned_p (rtx);\n extern int label_mentioned_p (rtx);\n extern bool microblaze_cannot_force_const_mem (machine_mode, rtx);\n+extern void microblaze_eh_return (rtx op0);\n #endif  /* RTX_CODE */\n \n /* Declare functions in microblaze-c.c.  */"}, {"sha": "746bef1faea4367ba4afaefd81cc472eda9dc589", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=b69195a0f48add25066ee99ef00597715d3c1fe7", "patch": "@@ -1926,6 +1926,10 @@ microblaze_must_save_register (int regno)\n   if (frame_pointer_needed && (regno == HARD_FRAME_POINTER_REGNUM))\n     return 1;\n \n+  if (crtl->calls_eh_return\n+      && regno == MB_ABI_SUB_RETURN_ADDR_REGNUM)\n+    return 1;\n+\n   if (!crtl->is_leaf)\n     {\n       if (regno == MB_ABI_SUB_RETURN_ADDR_REGNUM)\n@@ -1953,6 +1957,11 @@ microblaze_must_save_register (int regno)\n \treturn 1;\n     }\n \n+  if (crtl->calls_eh_return\n+      && (regno == EH_RETURN_DATA_REGNO (0)\n+          || regno == EH_RETURN_DATA_REGNO (1)))\n+    return 1;\n+\n   return 0;\n }\n \n@@ -3029,6 +3038,12 @@ microblaze_expand_epilogue (void)\n       emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, fsiz_rtx));\n     }\n \n+  if (crtl->calls_eh_return)\n+    emit_insn (gen_addsi3 (stack_pointer_rtx,\n+                           stack_pointer_rtx,\n+                           gen_raw_REG (SImode,\n+\t\t\t\t\tMB_EH_STACKADJ_REGNUM)));\n+\n   emit_jump_insn (gen_return_internal (gen_rtx_REG (Pmode, GP_REG_FIRST +\n \t\t\t\t\t\t    MB_ABI_SUB_RETURN_ADDR_REGNUM)));\n }\n@@ -3326,10 +3341,14 @@ microblaze_return_addr (int count, rtx frame ATTRIBUTE_UNUSED)\n   if (count != 0)\n     return NULL_RTX;\n \n-  return gen_rtx_PLUS (Pmode,\n-\t\t       get_hard_reg_initial_val (Pmode,\n-\t\t\t\t\t\t MB_ABI_SUB_RETURN_ADDR_REGNUM),\n-\t\t       GEN_INT (8));\n+  return get_hard_reg_initial_val (Pmode,\n+                                   MB_ABI_SUB_RETURN_ADDR_REGNUM);\n+}\n+\n+void\n+microblaze_eh_return (rtx op0)\n+{\n+  emit_insn (gen_movsi (gen_rtx_MEM (Pmode, stack_pointer_rtx), op0));\n }\n \n /* Queue an .ident string in the queue of top-level asm statements."}, {"sha": "8fdadbf27a05ead58c4769f4a9233d42e8891b27", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=b69195a0f48add25066ee99ef00597715d3c1fe7", "patch": "@@ -184,6 +184,22 @@ extern enum pipeline_type microblaze_pipe;\n #define INCOMING_RETURN_ADDR_RTX  \t\t\t\\\n   gen_rtx_REG (Pmode, GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM)\n \n+/* Specifies the offset from INCOMING_RETURN_ADDR_RTX and the actual return PC.  */\n+#define RETURN_ADDR_OFFSET (8)\n+\n+/* Describe how we implement __builtin_eh_return.  */\n+#define EH_RETURN_DATA_REGNO(N)\t\t\t\t\t\\\n+  (((N) < 2) ? MB_ABI_FIRST_ARG_REGNUM + (N) : INVALID_REGNUM)\n+\n+#define MB_EH_STACKADJ_REGNUM  MB_ABI_INT_RETURN_VAL2_REGNUM\n+#define EH_RETURN_STACKADJ_RTX  gen_rtx_REG (Pmode, MB_EH_STACKADJ_REGNUM)\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.  */\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL) \\\n+  ((flag_pic || GLOBAL) ? DW_EH_PE_aligned : DW_EH_PE_absptr)\n+\n /* Use DWARF 2 debugging information by default.  */\n #define DWARF2_DEBUGGING_INFO\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG"}, {"sha": "66ebc1e5949821df936b00bc65dfcb43eea08259", "filename": "gcc/config/microblaze/microblaze.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69195a0f48add25066ee99ef00597715d3c1fe7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md?ref=b69195a0f48add25066ee99ef00597715d3c1fe7", "patch": "@@ -2324,4 +2324,14 @@\n   (set_attr \"mode\"      \"SI\")\n   (set_attr \"length\"    \"4\")])\n \n+; This is used in compiling the unwind routines.\n+(define_expand \"eh_return\"\n+  [(use (match_operand 0 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  microblaze_eh_return (operands[0]);\n+  DONE;\n+}\")\n+\n (include \"sync.md\")"}]}