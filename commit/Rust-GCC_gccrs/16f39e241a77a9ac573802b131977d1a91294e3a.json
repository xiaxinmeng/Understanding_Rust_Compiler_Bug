{"sha": "16f39e241a77a9ac573802b131977d1a91294e3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZmMzllMjQxYTc3YTlhYzU3MzgwMmIxMzE5NzdkMWE5MTI5NGUzYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-11-04T16:45:11Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-11-04T16:45:11Z"}, "message": "quick-threads.h (_Jv_ThreadCancel): Removed.\n\n\t* include/quick-threads.h (_Jv_ThreadCancel): Removed.\n\t(_Jv_ThreadDestroy): Likewise.\n\t* include/no-threads.h (_Jv_ThreadCancel): Removed.\n\t(_Jv_ThreadDestroy): Likewise.\n\t* include/posix-threads.h (struct _Jv_Thread_t): Removed\n\t`exception' field.\n\t(_Jv_ThreadCancel): Removed decl.\n\t(_Jv_ThreadDestroy): Removed.\n\t* posix-threads.cc (_Jv_ThreadCancel): Removed.\n\t(throw_cleanup): Removed.\n\t(really_start): Don't push or pop cleanup.\n\t(_Jv_ThreadInitData): Don't initialize `exception' field.\n\t* java/lang/Thread.java (stop): Officially unimplemented.\n\t* java/lang/natThread.cc (stop): Officially unimplemented.\n\nFrom-SVN: r30392", "tree": {"sha": "a54f7fc855dc962968ba459fc5ba42c878180df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a54f7fc855dc962968ba459fc5ba42c878180df3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16f39e241a77a9ac573802b131977d1a91294e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f39e241a77a9ac573802b131977d1a91294e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f39e241a77a9ac573802b131977d1a91294e3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f39e241a77a9ac573802b131977d1a91294e3a/comments", "author": null, "committer": null, "parents": [{"sha": "063174eeda2581061573010014d3f56eb040acb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/063174eeda2581061573010014d3f56eb040acb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/063174eeda2581061573010014d3f56eb040acb9"}], "stats": {"total": 89, "additions": 21, "deletions": 68}, "files": [{"sha": "b1107ffe40e4dc31f90aee9e54b1dee33d4fd2bf", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=16f39e241a77a9ac573802b131977d1a91294e3a", "patch": "@@ -1,3 +1,20 @@\n+1999-11-04  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* include/quick-threads.h (_Jv_ThreadCancel): Removed.\n+\t(_Jv_ThreadDestroy): Likewise.\n+\t* include/no-threads.h (_Jv_ThreadCancel): Removed.\n+\t(_Jv_ThreadDestroy): Likewise.\n+\t* include/posix-threads.h (struct _Jv_Thread_t): Removed\n+\t`exception' field.\n+\t(_Jv_ThreadCancel): Removed decl.\n+\t(_Jv_ThreadDestroy): Removed.\n+\t* posix-threads.cc (_Jv_ThreadCancel): Removed.\n+\t(throw_cleanup): Removed.\n+\t(really_start): Don't push or pop cleanup.\n+\t(_Jv_ThreadInitData): Don't initialize `exception' field.\n+\t* java/lang/Thread.java (stop): Officially unimplemented.\n+\t* java/lang/natThread.cc (stop): Officially unimplemented.\n+\n 1999-11-02  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* posix-threads.cc: Don't include boehm-config.h. Include gcconfig.h "}, {"sha": "d59d7af1d91dc8f8f44fe0c8ada00540a064729e", "filename": "libjava/include/no-threads.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Finclude%2Fno-threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Finclude%2Fno-threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fno-threads.h?ref=16f39e241a77a9ac573802b131977d1a91294e3a", "patch": "@@ -125,19 +125,6 @@ _Jv_ThreadSetPriority (_Jv_Thread_t *, jint)\n {\n }\n \n-inline void\n-_Jv_ThreadCancel (_Jv_Thread_t *, void *)\n-{\n-  JvFail (\"_Jv_ThreadCancel\");\n-}\n-\n-// Like Cancel, but doesn't run cleanups.\n-inline void\n-_Jv_ThreadDestroy (_Jv_Thread_t *)\n-{\n-  JvFail (\"_Jv_ThreadDestroy\");\n-}\n-\n void _Jv_ThreadStart (java::lang::Thread *, _Jv_Thread_t *,\n \t\t      _Jv_ThreadStartFunc *meth);\n "}, {"sha": "f49528354404d15f2fb003ae2b786efbf872b708", "filename": "libjava/include/posix-threads.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Finclude%2Fposix-threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Finclude%2Fposix-threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix-threads.h?ref=16f39e241a77a9ac573802b131977d1a91294e3a", "patch": "@@ -76,9 +76,6 @@ typedef struct\n \n   // Actual thread id.\n   pthread_t thread;\n-\n-  // Exception we want to throw when cancelled.\n-  void *exception;\n } _Jv_Thread_t;\n typedef void _Jv_ThreadStartFunc (java::lang::Thread *);\n \n@@ -268,15 +265,6 @@ _Jv_ThreadYield (void)\n \n void _Jv_ThreadSetPriority (_Jv_Thread_t *data, jint prio);\n \n-void _Jv_ThreadCancel (_Jv_Thread_t *data, void *error);\n-\n-// Like Cancel, but doesn't run cleanups.\n-inline void\n-_Jv_ThreadDestroy (_Jv_Thread_t *)\n-{\n-  JvFail (\"_Jv_ThreadDestroy\");\n-}\n-\n void _Jv_ThreadStart (java::lang::Thread *thread, _Jv_Thread_t *data,\n \t\t      _Jv_ThreadStartFunc *meth);\n "}, {"sha": "eb5b916e83f6e4a286795a4dd435787620f9533b", "filename": "libjava/include/quick-threads.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Finclude%2Fquick-threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Finclude%2Fquick-threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fquick-threads.h?ref=16f39e241a77a9ac573802b131977d1a91294e3a", "patch": "@@ -113,19 +113,6 @@ _Jv_ThreadSetPriority (_Jv_Thread_t *, jint)\n {\n }\n \n-inline void\n-_Jv_ThreadCancel (_Jv_Thread_t *data, void *error)\n-{\n-  coop_terminate (*data, error);\n-}\n-\n-// Like Cancel, but doesn't run cleanups.\n-inline void\n-_Jv_ThreadDestroy (_Jv_Thread_t *data)\n-{\n-  coop_terminate (*data, 0);\n-}\n-\n void _Jv_ThreadStart (java::lang::Thread *thread, _Jv_Thread_t *data,\n \t\t      _Jv_ThreadStartFunc *meth);\n "}, {"sha": "7d172433d0625c6251d6ff901fdc453292c149cf", "filename": "libjava/java/lang/Thread.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Fjava%2Flang%2FThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Fjava%2Flang%2FThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.java?ref=16f39e241a77a9ac573802b131977d1a91294e3a", "patch": "@@ -181,7 +181,9 @@ public static native void sleep (long timeout, int nanos)\n \n   public final void stop ()\n   {\n-    stop (new ThreadDeath ());\n+    // Argument doesn't matter, because this is no longer\n+    // supported.\n+    stop (null);\n   }\n \n   public final synchronized native void stop (Throwable e);"}, {"sha": "b40e8bff3e7bc883817fdb51cb6d1ba6d343dbeb", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=16f39e241a77a9ac573802b131977d1a91294e3a", "patch": "@@ -304,12 +304,7 @@ java::lang::Thread::start (void)\n void\n java::lang::Thread::stop (java::lang::Throwable *e)\n {\n-  JvSynchronize sync (this);\n-  checkAccess ();\n-  if (! e)\n-    _Jv_Throw (new NullPointerException);\n-  natThread *nt = (natThread *) data;\n-  _Jv_ThreadCancel (nt->thread, e);\n+  JvFail (\"java::lang::Thread::stop unimplemented\");\n }\n \n void"}, {"sha": "19c7241cf885c4b4c97598c41a6713101aaaf257", "filename": "libjava/posix-threads.cc", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Fposix-threads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f39e241a77a9ac573802b131977d1a91294e3a/libjava%2Fposix-threads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix-threads.cc?ref=16f39e241a77a9ac573802b131977d1a91294e3a", "patch": "@@ -284,7 +284,6 @@ _Jv_ThreadInitData (_Jv_Thread_t **data, java::lang::Thread *)\n   _Jv_Thread_t *info = new _Jv_Thread_t;\n \n   info->flags = 0;\n-  info->exception = NULL;\n \n   // FIXME register a finalizer for INFO here.\n   // FIXME also must mark INFO somehow.\n@@ -304,26 +303,6 @@ _Jv_ThreadSetPriority (_Jv_Thread_t *data, jint prio)\n     }\n }\n \n-\n-// This is called as a cleanup handler when a thread is exiting.  We\n-// use it to throw the requested exception.  It's entirely possible\n-// that this approach is doomed to failure, in which case we'll need\n-// to adopt some alternate.  For instance, use a signal to implement\n-// _Jv_ThreadCancel.\n-static void\n-throw_cleanup (void *data)\n-{\n-  _Jv_Thread_t *td = (_Jv_Thread_t *) data;\n-  _Jv_Throw ((java::lang::Throwable *) td->exception);\n-}\n-\n-void\n-_Jv_ThreadCancel (_Jv_Thread_t *data, void *error)\n-{\n-  data->exception = error;\n-  pthread_cancel (data->thread);\n-}\n-\n // This function is called when a thread is started.  We don't arrange\n // to call the `run' method directly, because this function must\n // return a value.\n@@ -332,11 +311,9 @@ really_start (void *x)\n {\n   struct starter *info = (struct starter *) x;\n \n-  pthread_cleanup_push (throw_cleanup, info->data);\n   pthread_setspecific (_Jv_ThreadKey, info->object);\n   pthread_setspecific (_Jv_ThreadDataKey, info->data);\n   info->method (info->object);\n-  pthread_cleanup_pop (0);\n \n   if (! (info->data->flags & FLAG_DAEMON))\n     {"}]}