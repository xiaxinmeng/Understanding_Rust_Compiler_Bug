{"sha": "54d21dd5b5c5c5539505b3e037cdecb3b0ab3918", "node_id": "C_kwDOANBUbNoAKDU0ZDIxZGQ1YjVjNWM1NTM5NTA1YjNlMDM3Y2RlY2IzYjBhYjM5MTg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-03T08:01:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-03T08:01:07Z"}, "message": "openmp, fortran: Improve !$omp atomic checks [PR104328]\n\nThe testcase shows some cases that weren't verified and we ICE on\ninvalid because of that.\nOne problem is that unlike before, we weren't checking if some expression\nis EXPR_VARIABLE with non-NULL symtree in the case where there was\na conversion around it.\nThe other two issues is that we check that in an IF ->block is non-NULL\nand then immediately dereference ->block->next->op, but on invalid\ncode with no statements in the then clause ->block->next might be NULL.\n\n2022-02-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR fortran/104328\n\t* openmp.cc (is_scalar_intrinsic_expr): If must_be_var && conv_ok\n\tand expr is conversion, verify it is a conversion from EXPR_VARIABLE\n\twith non-NULL symtree.  Check ->block->next before dereferencing it.\n\n\t* gfortran.dg/gomp/atomic-27.f90: New test.", "tree": {"sha": "e08ec2f11ac4a43808929b103d773837c5c70d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e08ec2f11ac4a43808929b103d773837c5c70d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54d21dd5b5c5c5539505b3e037cdecb3b0ab3918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d21dd5b5c5c5539505b3e037cdecb3b0ab3918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54d21dd5b5c5c5539505b3e037cdecb3b0ab3918", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d21dd5b5c5c5539505b3e037cdecb3b0ab3918/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "501c4ee9fad68716497db4d96b63b801cc57b4a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501c4ee9fad68716497db4d96b63b801cc57b4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/501c4ee9fad68716497db4d96b63b801cc57b4a1"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "38c67e1f640fa969e7e0cdb74e5564b7b9d9a707", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d21dd5b5c5c5539505b3e037cdecb3b0ab3918/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d21dd5b5c5c5539505b3e037cdecb3b0ab3918/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=54d21dd5b5c5c5539505b3e037cdecb3b0ab3918", "patch": "@@ -7660,9 +7660,16 @@ static bool\n is_scalar_intrinsic_expr (gfc_expr *expr, bool must_be_var, bool conv_ok)\n {\n   if (must_be_var\n-      && (expr->expr_type != EXPR_VARIABLE || !expr->symtree)\n-      && (!conv_ok || !is_conversion (expr, true, true)))\n-    return false;\n+      && (expr->expr_type != EXPR_VARIABLE || !expr->symtree))\n+    {\n+      if (!conv_ok)\n+\treturn false;\n+      gfc_expr *conv = is_conversion (expr, true, true);\n+      if (!conv)\n+\treturn false;\n+      if (conv->expr_type != EXPR_VARIABLE || !conv->symtree)\n+\treturn false;\n+    }\n   return (expr->rank == 0\n \t  && !gfc_is_coindexed (expr)\n \t  && (expr->ts.type == BT_INTEGER\n@@ -7705,6 +7712,7 @@ resolve_omp_atomic (gfc_code *code)\n       if (next->op == EXEC_IF\n \t  && next->block\n \t  && next->block->op == EXEC_IF\n+\t  && next->block->next\n \t  && next->block->next->op == EXEC_ASSIGN)\n \t{\n \t  comp_cond = next->block->expr1;\n@@ -7757,6 +7765,7 @@ resolve_omp_atomic (gfc_code *code)\n       if (code->op == EXEC_IF\n \t  && code->block\n \t  && code->block->op == EXEC_IF\n+\t  && code->block->next\n \t  && code->block->next->op == EXEC_ASSIGN)\n \t{\n \t  comp_cond = code->block->expr1;"}, {"sha": "5f7311a9d7d7011f8eacd71d6939d886acf7b5e5", "filename": "gcc/testsuite/gfortran.dg/gomp/atomic-27.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d21dd5b5c5c5539505b3e037cdecb3b0ab3918/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fatomic-27.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d21dd5b5c5c5539505b3e037cdecb3b0ab3918/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fatomic-27.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fatomic-27.f90?ref=54d21dd5b5c5c5539505b3e037cdecb3b0ab3918", "patch": "@@ -0,0 +1,34 @@\n+! PR fortran/104328\n+! { dg-do compile }\n+\n+subroutine foo\n+  integer :: k = 1\n+  !$omp atomic compare\n+  if ( k == 2 ) then\t! { dg-error \"unexpected !.OMP ATOMIC expression\" }\n+  end if\n+end\n+subroutine bar\n+  real :: x = 1\n+  !$omp atomic compare\n+  if ( x == 2 ) then\t! { dg-error \"unexpected !.OMP ATOMIC expression\" }\n+  end if\n+end\n+subroutine baz\n+  integer :: i\n+  !$omp atomic capture\n+  i = 1\n+  i = i + 1.\t\t! { dg-error \"!.OMP ATOMIC capture-statement requires a scalar variable of intrinsic type\" }\n+end\n+subroutine qux\n+  integer :: i = 0\n+  !$omp atomic capture\n+  i = i + 1.0\n+  i = i + 1.0\t\t! { dg-error \"!.OMP ATOMIC capture-statement requires a scalar variable of intrinsic type\" }\n+end\n+subroutine garply\n+  logical :: k = .true.\n+  !$omp atomic capture compare\n+  if ( k ) then\t\t! { dg-error \"unexpected !.OMP ATOMIC expression\" }\n+  else\n+  end if\n+end"}]}