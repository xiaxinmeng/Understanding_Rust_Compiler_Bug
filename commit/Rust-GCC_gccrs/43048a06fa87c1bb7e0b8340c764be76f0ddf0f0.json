{"sha": "43048a06fa87c1bb7e0b8340c764be76f0ddf0f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMwNDhhMDZmYTg3YzFiYjdlMGI4MzQwYzc2NGJlNzZmMGRkZjBmMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-11-16T22:36:20Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-11-16T22:36:20Z"}, "message": "mangle.c (write_special_name_constructor): Don't generate assembler junk when confronted with an old-style constructor.\n\n\t* mangle.c (write_special_name_constructor): Don't generate\n\tassembler junk when confronted with an old-style constructor.\n\t(write_special_name_destructor): Likewise.\n\t(mangle_decl_string): Do it here instead.\n\nFrom-SVN: r37508", "tree": {"sha": "91a584fec94b4e6aa879640e169518621ffd13e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91a584fec94b4e6aa879640e169518621ffd13e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43048a06fa87c1bb7e0b8340c764be76f0ddf0f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43048a06fa87c1bb7e0b8340c764be76f0ddf0f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43048a06fa87c1bb7e0b8340c764be76f0ddf0f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43048a06fa87c1bb7e0b8340c764be76f0ddf0f0/comments", "author": null, "committer": null, "parents": [{"sha": "35d9f39deafd46d5fcac80fb71691334c6d788f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d9f39deafd46d5fcac80fb71691334c6d788f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d9f39deafd46d5fcac80fb71691334c6d788f9"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "3058f671019f4fd1c40dc513d14891ef5494d69d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43048a06fa87c1bb7e0b8340c764be76f0ddf0f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43048a06fa87c1bb7e0b8340c764be76f0ddf0f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43048a06fa87c1bb7e0b8340c764be76f0ddf0f0", "patch": "@@ -1,3 +1,10 @@\n+2000-11-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* mangle.c (write_special_name_constructor): Don't generate\n+\tassembler junk when confronted with an old-style constructor.\n+\t(write_special_name_destructor): Likewise.\n+\t(mangle_decl_string): Do it here instead.\n+\n 2000-11-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* call.c (op_error): Make error messages clearer."}, {"sha": "5c45a9137f1ce05a9fbefe3ea490772f6f57a172", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43048a06fa87c1bb7e0b8340c764be76f0ddf0f0/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43048a06fa87c1bb7e0b8340c764be76f0ddf0f0/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=43048a06fa87c1bb7e0b8340c764be76f0ddf0f0", "patch": "@@ -1077,12 +1077,16 @@ static void\n write_special_name_constructor (ctor)\n      tree ctor;\n {\n-  if (DECL_COMPLETE_CONSTRUCTOR_P (ctor))\n+  if (DECL_COMPLETE_CONSTRUCTOR_P (ctor)\n+      /* Even though we don't ever emit a definition of the\n+\t old-style destructor, we still have to consider entities\n+\t (like static variables) nested inside it.  */\n+      || DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (ctor))\n     write_string (\"C1\");\n   else if (DECL_BASE_CONSTRUCTOR_P (ctor))\n     write_string (\"C2\");\n   else\n-    write_string (\"C*INTERNAL*\");\n+    my_friendly_abort (20001115);\n }\n \n /* Handle destructor productions of non-terminal <special-name>.\n@@ -1102,13 +1106,16 @@ write_special_name_destructor (dtor)\n {\n   if (DECL_DELETING_DESTRUCTOR_P (dtor))\n     write_string (\"D0\");\n-  else if (DECL_COMPLETE_DESTRUCTOR_P (dtor))\n+  else if (DECL_COMPLETE_DESTRUCTOR_P (dtor)\n+\t   /* Even though we don't ever emit a definition of the\n+\t      old-style destructor, we still have to consider entities\n+\t      (like static variables) nested inside it.  */\n+\t   || DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (dtor))\n     write_string (\"D1\");\n   else if (DECL_BASE_DESTRUCTOR_P (dtor))\n     write_string (\"D2\");\n   else\n-    /* Old-ABI destructor.   */\n-    write_string (\"D*INTERNAL*\");\n+    my_friendly_abort (20001115);\n }\n \n /* Return the discriminator for ENTITY appearing inside\n@@ -2002,7 +2009,16 @@ mangle_decl_string (decl)\n   if (TREE_CODE (decl) == TYPE_DECL)\n     write_type (TREE_TYPE (decl));\n   else\n-    write_mangled_name (decl);\n+    {\n+      write_mangled_name (decl);\n+      if (DECL_LANG_SPECIFIC (decl)\n+\t  && (DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (decl)\n+\t      || DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl)))\n+\t/* We need a distinct mangled name for these entities, but\n+\t   we should never actually output it.  So, we append some\n+\t   characters the assembler won't like.  */\n+\twrite_string (\" *INTERNAL* \");\n+    }\n \n   result = finish_mangling ();\n   if (DEBUG_MANGLE)"}]}