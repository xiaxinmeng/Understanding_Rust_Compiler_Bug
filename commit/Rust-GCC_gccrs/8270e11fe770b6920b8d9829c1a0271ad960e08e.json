{"sha": "8270e11fe770b6920b8d9829c1a0271ad960e08e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3MGUxMWZlNzcwYjY5MjBiOGQ5ODI5YzFhMDI3MWFkOTYwZTA4ZQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2001-11-08T17:19:07Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2001-11-08T17:19:07Z"}, "message": "pa.md (negdf2, negsf2): Use multiplication rather than subtraction to implement floating negation on...\n\n\t* pa.md (negdf2, negsf2): Use multiplication rather than subtraction\n\tto implement floating negation on processors prior to PA 2.0.\n\nFrom-SVN: r46847", "tree": {"sha": "cf31b258879c5143cb442e8ada3a94c12d72e698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf31b258879c5143cb442e8ada3a94c12d72e698"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8270e11fe770b6920b8d9829c1a0271ad960e08e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8270e11fe770b6920b8d9829c1a0271ad960e08e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8270e11fe770b6920b8d9829c1a0271ad960e08e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8270e11fe770b6920b8d9829c1a0271ad960e08e/comments", "author": null, "committer": null, "parents": [{"sha": "1fa73144cba39152fd2142bebcfd0b1faa6fbeaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "5674392b2cae11c12e7e81a490e73a1995d3e739", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270e11fe770b6920b8d9829c1a0271ad960e08e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270e11fe770b6920b8d9829c1a0271ad960e08e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8270e11fe770b6920b8d9829c1a0271ad960e08e", "patch": "@@ -1,3 +1,8 @@\n+2001-11-08  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa.md (negdf2, negsf2): Use multiplication rather than subtraction\n+\tto implement floating negation on processors prior to PA 2.0.\n+\n 2001-11-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2asm.c (mark_indirect_pool_entry, mark_indirect_pool): New."}, {"sha": "626d92acae56792a98c55afb7d68d3a4ffb611b1", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8270e11fe770b6920b8d9829c1a0271ad960e08e/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8270e11fe770b6920b8d9829c1a0271ad960e08e/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=8270e11fe770b6920b8d9829c1a0271ad960e08e", "patch": "@@ -4640,10 +4640,29 @@\n   [(set_attr \"type\" \"fpdivsgl\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"negdf2\"\n+;; Processors prior to PA 2.0 don't have a fneg instruction.  Fast\n+;; negation can be done by subtracting from plus zero.  However, this\n+;; violates the IEEE standard when negating plus and minus zero.\n+(define_expand \"negdf2\"\n+  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (neg:DF (match_operand:DF 1 \"register_operand\" \"\")))\n+\t      (use (match_dup 2))])]\n+  \"! TARGET_SOFT_FLOAT\"\n+{\n+  if (TARGET_PA_20 || flag_unsafe_math_optimizations)\n+    emit_insn (gen_negdf2_fast (operands[0], operands[1]));\n+  else\n+    {\n+      operands[2] = force_reg (DFmode, immed_real_const_1 (dconstm1, DFmode));\n+      emit_insn (gen_muldf3 (operands[0], operands[1], operands[2]));\n+    }\n+  DONE;\n+})\n+\n+(define_insn \"negdf2_fast\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"f\")))]\n-  \"! TARGET_SOFT_FLOAT\"\n+  \"! TARGET_SOFT_FLOAT && (TARGET_PA_20 || flag_unsafe_math_optimizations)\"\n   \"*\n {\n   if (TARGET_PA_20)\n@@ -4654,10 +4673,26 @@\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"negsf2\"\n+(define_expand \"negsf2\"\n+  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (neg:SF (match_operand:SF 1 \"register_operand\" \"\")))\n+\t      (use (match_dup 2))])]\n+  \"! TARGET_SOFT_FLOAT\"\n+{\n+  if (TARGET_PA_20 || flag_unsafe_math_optimizations)\n+    emit_insn (gen_negsf2_fast (operands[0], operands[1]));\n+  else\n+    {\n+      operands[2] = force_reg (SFmode, immed_real_const_1 (dconstm1, SFmode));\n+      emit_insn (gen_mulsf3 (operands[0], operands[1], operands[2]));\n+    }\n+  DONE;\n+})\n+\n+(define_insn \"negsf2_fast\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"! TARGET_SOFT_FLOAT\"\n+  \"! TARGET_SOFT_FLOAT && (TARGET_PA_20 || flag_unsafe_math_optimizations)\"\n   \"*\n {\n   if (TARGET_PA_20)"}]}