{"sha": "de40e4dd33113039dfe75d5a99d75fbfd4797ede", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0MGU0ZGQzMzExMzAzOWRmZTc1ZDVhOTlkNzVmYmZkNDc5N2VkZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2004-12-08T11:15:24Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2004-12-08T11:15:24Z"}, "message": "Add new tests for xstormy16\n\nFrom-SVN: r91870", "tree": {"sha": "74a079d7e1704312ca22f239065ff1bee51adf5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74a079d7e1704312ca22f239065ff1bee51adf5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de40e4dd33113039dfe75d5a99d75fbfd4797ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de40e4dd33113039dfe75d5a99d75fbfd4797ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de40e4dd33113039dfe75d5a99d75fbfd4797ede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de40e4dd33113039dfe75d5a99d75fbfd4797ede/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75d0ac8d5a41d29abc94d460d2c86abb35f6b71a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d0ac8d5a41d29abc94d460d2c86abb35f6b71a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d0ac8d5a41d29abc94d460d2c86abb35f6b71a"}], "stats": {"total": 7222, "additions": 7210, "deletions": 12}, "files": [{"sha": "b832863158c067d0e00ca62ba6bf045a1934f529", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -1,3 +1,104 @@\n+2004-12-08  Nick Clifton  <nickc@redhat.com>\n+\n+\t* gcc.target/xstormy16/bss_below100: New directory containing tests.\n+\t* gcc.target/xstormy16/data_below100: Likewise.\n+\t* gcc.target/xstormy16/sfr: Likewise.\n+\t* gcc.target/xstormy16/below100.S: New test source file.\n+\t* gcc.target/xstormy16/below100.ld: New test linker script.\n+\t* gcc.target/xstormy16/xstormy16.exp: Run the new tests.\n+\t* gcc.target/xstormy16/below_100.c: Fix scan to allow for bn or\n+\tbp instructions.\n+\t* gcc.target/xstormy16/bp.c: Likewise.\n+\n+\t* gcc.target/xstormy16/bss_below100: New files:\n+\t01_const_to_b100b.c, 02_const_to_b100w.c, 03_var_to_b100b.c,\n+\t04_var_to_b100w.c, 05_b100b_to_var.c, 06_b100w_to_var.c,\n+\t10_set_b100b_bit_0.c, 10_set_b100b_bit_7.c, 11_clr_b100b_bit_0.c,\n+\t11_clr_b100b_bit_7.c, 12_if1_b100b_bit_0.c, 12_if1_b100b_bit_3.c,\n+\t12_if1_b100b_bit_7.c, 13_if0_b100b_bit_0.c, 13_if0_b100b_bit_3.c,\n+\t13_if0_b100b_bit_7.c, 14_set_b100w_bit_0.c, 14_set_b100w_bit_7.c,\n+\t14_set_b100w_bit_8.c, 14_set_b100w_bit_f.c, 15_clr_b100w_bit_0.c,\n+\t15_clr_b100w_bit_7.c, 15_clr_b100w_bit_8.c, 15_clr_b100w_bit_f.c,\n+\t16_if1_b100w_bit_0.c, 16_if1_b100w_bit_3.c, 16_if1_b100w_bit_7.c,\n+\t16_if1_b100w_bit_8.c, 16_if1_b100w_bit_b.c, 16_if1_b100w_bit_f.c,\n+\t17_if0_b100w_bit_0.c, 17_if0_b100w_bit_3.c, 17_if0_b100w_bit_7.c,\n+\t17_if0_b100w_bit_8.c, 17_if0_b100w_bit_b.c, 17_if0_b100w_bit_f.c,\n+\t20_set_b100b_bitfield_0.c, 20_set_b100b_bitfield_7.c,\n+\t21_clr_b100b_bitfield_0.c, 21_clr_b100b_bitfield_7.c,\n+\t22_if1_b100b_bitfield_0.c, 22_if1_b100b_bitfield_3.c,\n+\t22_if1_b100b_bitfield_7.c, 23_if0_b100b_bitfield_0.c,\n+\t23_if0_b100b_bitfield_3.c, 23_if0_b100b_bitfield_7.c,\n+\t24_set_b100w_bitfield_0.c, 24_set_b100w_bitfield_7.c,\n+\t24_set_b100w_bitfield_8.c, 24_set_b100w_bitfield_f.c,\n+\t25_clr_b100w_bitfield_0.c, 25_clr_b100w_bitfield_7.c,\n+\t25_clr_b100w_bitfield_8.c, 25_clr_b100w_bitfield_f.c,\n+\t26_if1_b100w_bitfield_0.c, 26_if1_b100w_bitfield_3.c,\n+\t26_if1_b100w_bitfield_7.c, 26_if1_b100w_bitfield_8.c,\n+\t26_if1_b100w_bitfield_b.c, 26_if1_b100w_bitfield_f.c,\n+\t27_if0_b100w_bitfield_0.c, 27_if0_b100w_bitfield_3.c,\n+\t27_if0_b100w_bitfield_7.c, 27_if0_b100w_bitfield_8.c,\n+\t27_if0_b100w_bitfield_b.c, 27_if0_b100w_bitfield_f.c\n+\n+\t* gcc.target/xstormy16/data_below100: New files:\n+\t01_const_to_b100b.c, 02_const_to_b100w.c, 03_var_to_b100b.c,\n+\t04_var_to_b100w.c, 05_b100b_to_var.c, 06_b100w_to_var.c,\n+\t10_set_b100b_bit_0.c, 10_set_b100b_bit_7.c, 11_clr_b100b_bit_0.c,\n+\t11_clr_b100b_bit_7.c, 12_if1_b100b_bit_0.c, 12_if1_b100b_bit_3.c,\n+\t12_if1_b100b_bit_7.c, 13_if0_b100b_bit_0.c, 13_if0_b100b_bit_3.c,\n+\t13_if0_b100b_bit_7.c, 14_set_b100w_bit_0.c, 14_set_b100w_bit_7.c,\n+\t14_set_b100w_bit_8.c, 14_set_b100w_bit_f.c, 15_clr_b100w_bit_0.c,\n+\t15_clr_b100w_bit_7.c, 15_clr_b100w_bit_8.c, 15_clr_b100w_bit_f.c,\n+\t16_if1_b100w_bit_0.c, 16_if1_b100w_bit_3.c, 16_if1_b100w_bit_7.c,\n+\t16_if1_b100w_bit_8.c, 16_if1_b100w_bit_b.c, 16_if1_b100w_bit_f.c,\n+\t17_if0_b100w_bit_0.c, 17_if0_b100w_bit_3.c, 17_if0_b100w_bit_7.c,\n+\t17_if0_b100w_bit_8.c, 17_if0_b100w_bit_b.c, 17_if0_b100w_bit_f.c,\n+\t20_set_b100b_bitfield_0.c, 20_set_b100b_bitfield_7.c,\n+\t21_clr_b100b_bitfield_0.c, 21_clr_b100b_bitfield_7.c,\n+\t22_if1_b100b_bitfield_0.c, 22_if1_b100b_bitfield_3.c,\n+\t22_if1_b100b_bitfield_7.c, 23_if0_b100b_bitfield_0.c,\n+\t23_if0_b100b_bitfield_3.c, 23_if0_b100b_bitfield_7.c,\n+\t24_set_b100w_bitfield_0.c, 24_set_b100w_bitfield_7.c,\n+\t24_set_b100w_bitfield_8.c, 24_set_b100w_bitfield_f.c,\n+\t25_clr_b100w_bitfield_0.c, 25_clr_b100w_bitfield_7.c,\n+\t25_clr_b100w_bitfield_8.c, 25_clr_b100w_bitfield_f.c,\n+\t26_if1_b100w_bitfield_0.c, 26_if1_b100w_bitfield_3.c,\n+\t26_if1_b100w_bitfield_7.c, 26_if1_b100w_bitfield_8.c,\n+\t26_if1_b100w_bitfield_b.c, 26_if1_b100w_bitfield_f.c,\n+\t27_if0_b100w_bitfield_0.c, 27_if0_b100w_bitfield_3.c,\n+\t27_if0_b100w_bitfield_7.c, 27_if0_b100w_bitfield_8.c,\n+\t27_if0_b100w_bitfield_b.c, 27_if0_b100w_bitfield_f.c\n+\n+\t* gcc.target/xstormy16/sfr: New files:\n+\t01_const_to_sfrb.c, 02_const_to_sfrw.c, 03_var_to_sfrb.c,\n+\t04_var_to_sfrw.c, 05_sfrb_to_var.c, 06_sfrw_to_var.c,\n+\t10_set_sfrb_bit_0.c, 10_set_sfrb_bit_7.c, 11_clr_sfrb_bit_0.c,\n+\t11_clr_sfrb_bit_7.c, 12_if1_sfrb_bit_0.c, 12_if1_sfrb_bit_3.c,\n+\t12_if1_sfrb_bit_7.c, 13_if0_sfrb_bit_0.c, 13_if0_sfrb_bit_3.c,\n+\t13_if0_sfrb_bit_7.c, 14_set_sfrw_bit_0.c, 14_set_sfrw_bit_3.c,\n+\t14_set_sfrw_bit_7.c, 14_set_sfrw_bit_8.c, 14_set_sfrw_bit_b.c,\n+\t14_set_sfrw_bit_f.c, 15_clr_sfrw_bit_0.c, 15_clr_sfrw_bit_3.c,\n+\t15_clr_sfrw_bit_7.c, 15_clr_sfrw_bit_8.c, 15_clr_sfrw_bit_b.c,\n+\t15_clr_sfrw_bit_f.c, 16_if1_sfrw_bit_0.c, 16_if1_sfrw_bit_3.c,\n+\t16_if1_sfrw_bit_7.c, 16_if1_sfrw_bit_8.c, 16_if1_sfrw_bit_b.c,\n+\t16_if1_sfrw_bit_f.c, 17_if0_sfrw_bit_0.c, 17_if0_sfrw_bit_3.c,\n+\t17_if0_sfrw_bit_7.c, 17_if0_sfrw_bit_8.c, 17_if0_sfrw_bit_b.c,\n+\t17_if0_sfrw_bit_f.c, 20_set_sfrb_bitfield_0.c,\n+\t20_set_sfrb_bitfield_7.c, 21_clr_sfrb_bitfield_0.c,\n+\t21_clr_sfrb_bitfield_7.c, 22_if1_sfrb_bitfield_0.c,\n+\t22_if1_sfrb_bitfield_3.c, 22_if1_sfrb_bitfield_7.c,\n+\t23_if0_sfrb_bitfield_0.c, 23_if0_sfrb_bitfield_3.c,\n+\t23_if0_sfrb_bitfield_7.c, 24_set_sfrw_bitfield_0.c,\n+\t24_set_sfrw_bitfield_7.c, 24_set_sfrw_bitfield_8.c,\n+\t24_set_sfrw_bitfield_f.c, 25_clr_sfrw_bitfield_0.c,\n+\t25_clr_sfrw_bitfield_7.c, 25_clr_sfrw_bitfield_8.c,\n+\t25_clr_sfrw_bitfield_f.c, 26_if1_sfrw_bitfield_0.c,\n+\t26_if1_sfrw_bitfield_3.c, 26_if1_sfrw_bitfield_7.c,\n+\t26_if1_sfrw_bitfield_8.c, 26_if1_sfrw_bitfield_b.c,\n+\t26_if1_sfrw_bitfield_f.c, 27_if0_sfrw_bitfield_0.c,\n+\t27_if0_sfrw_bitfield_3.c, 27_if0_sfrw_bitfield_7.c,\n+\t27_if0_sfrw_bitfield_8.c, 27_if0_sfrw_bitfield_b.c,\n+\t27_if0_sfrw_bitfield_f.c\n+\n 2004-12-08  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/18100"}, {"sha": "25f9bc8caf9d38d3da56c1848207e814407b6194", "filename": "gcc/testsuite/gcc.target/xstormy16/below100.S", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow100.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow100.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow100.S?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,188 @@\n+/******************************************************************\r\n+***                                                             ***\r\n+***     crt0 for __BELOW100__ attribute test with SID           ***\r\n+***                                                             ***\r\n+******************************************************************/\r\n+\r\n+                                /*************************************/\r\n+                                /** Interrupt vectors at 0x8000     **/\r\n+                                /*************************************/\r\n+        .section .int_vec,\"ax\"\r\n+        .global _start\r\n+        .align 1\r\n+_start:\r\n+        jmpf _int_reset\r\n+        //jmpf _int_basetimer\r\n+        //jmpf _int_timer0\r\n+        //jmpf _int_timer1\r\n+        //jmpf _int_irq_4\r\n+        //jmpf _int_irq_5\r\n+        //jmpf _int_port0\r\n+        //jmpf _int_port1\r\n+        //jmpf _int_irq_8\r\n+        //jmpf _int_irq_9\r\n+        //jmpf _int_irq_a\r\n+        //jmpf _int_irq_b\r\n+        //jmpf _int_irq_c\r\n+        //jmpf _int_irq_d\r\n+        //jmpf _int_irq_e\r\n+        //jmpf _int_irq_f\r\n+                                /*************************************/\r\n+                                /** reset code                      **/\r\n+                                /*************************************/\r\n+        .text\r\n+_int_reset:\r\n+                                /*************************************/\r\n+                                /** setup stack pointer             **/\r\n+                                /*************************************/\r\n+        mov sp,#__stack\r\n+                                /*************************************/\r\n+                                /** zero .bss section               **/\r\n+                                /*************************************/\r\n+        mov r0,#__bss_start\r\n+        mov r1,#__bss_end\r\n+        mov r2,#0\r\n+1:      mov.w (r0++),r2\r\n+        blt r0,r1,1b\r\n+                                /*************************************/\r\n+                                /** copy inital value for .data     **/\r\n+                                /*************************************/\r\n+        mov r1,#__data_start\r\n+        mov r3,#__data_end\r\n+        mov r0,#@lo(__rdata)\r\n+        mov r8,#@hi(__rdata)\r\n+2:      movf.w r2,(r0++)\r\n+        bnz r0,#0,3f\r\n+        add r8,#1\r\n+3:      mov.w (r1++),r2\r\n+        blt r1,r3,2b\r\n+                                /*************************************/\r\n+                                /** call hardware init routine      **/\r\n+                                /*************************************/\r\n+        callf _hwinit\r\n+                                /*************************************/\r\n+                                /** call initializaton routines     **/\r\n+                                /*************************************/\r\n+        callf _init\r\n+                                /*************************************/\r\n+                                /** setup fini routines to be       **/\r\n+                                /**  called from exit               **/\r\n+                                /*************************************/\r\n+        mov r2,#@fptr(_fini)\r\n+        callf atexit\r\n+                                /*************************************/\r\n+                                /** call main() with empty          **/\r\n+                                /**  argc/argv/envp                 **/\r\n+                                /*************************************/\r\n+        mov r2,#0\r\n+        mov r3,#0\r\n+        mov r4,#0\r\n+        callf main\r\n+                                /*************************************/\r\n+                                /** return from main()              **/\r\n+                                /*************************************/\r\n+        callf exit\r\n+                                /*************************************/\r\n+                                /** should never reach this code    **/\r\n+                                /*************************************/\r\n+        jmpf _start\r\n+                                /*************************************/\r\n+                                /** default h/w initialize routine  **/\r\n+                                /** and default _init/_finit for    **/\r\n+                                /**  -nostartfiles option           **/\r\n+                                /*************************************/\r\n+        .globl _hwinit\r\n+        .weak _hwinit\r\n+_hwinit:\r\n+        .globl _init\r\n+        .weak _init\r\n+_init:\r\n+        .globl _fini\r\n+        .weak _fini\r\n+_fini:\r\n+        ret\r\n+\r\n+/******************************************************************\r\n+*******************************************************************\r\n+***                                                             ***\r\n+***       Chip information data for LC59_32K                    ***\r\n+***                 Written by T.Matsukawa                      ***\r\n+***                                                             ***\r\n+*******************************************************************\r\n+******************************************************************/\r\n+\r\n+                                /*************************************/\r\n+                                /** Define convenient macros        **/\r\n+                                /*************************************/\r\n+#define BCD(x)  (((x)/10)%10)*0x10+((x)%10)\r\n+#define BCD4(x) BCD((x)/100),BCD(x)\r\n+#define BCD6(x) BCD((x)/10000),BCD((x)/100),BCD(x)\r\n+                                /*************************************/\r\n+                                /** Define memory sizes             **/\r\n+                                /*************************************/\r\n+#define RAM_SIZE 0x7E00\r\n+#define ROM_SIZE 0x78000\r\n+#define VRAM_SIZE 0x0000\r\n+#define VRAM_ROW 0\r\n+#define VRAM_COLUMN 0\r\n+#define CGROM_SIZE 0x0000\r\n+#define PROTECT_SIZE 0x0000\r\n+\r\n+                                /*************************************/\r\n+                                /** section \".chip_info\"            **/\r\n+                                /*************************************/\r\n+        .section .chip_info,\"a\"\r\n+        .space  0xb8,0x00\r\n+                                /*************************************/\r\n+                                /** B8-BB : User option address     **/\r\n+                                /*************************************/\r\n+        .word   0x00000\r\n+        .global __reset_vector\r\n+#if 0x00000==0\r\n+        .equ    __reset_vector,0x08000\r\n+#else\r\n+        .equ    __reset_vector,0x00000\r\n+#endif\r\n+                                /*************************************/\r\n+                                /** BC-BF : Flash Protect address   **/\r\n+                                /*************************************/\r\n+#if PROTECT_SIZE==0\r\n+        .word   0x00000000\r\n+#else\r\n+        .word   0x08000+ROM_SIZE-PROTECT_SIZE\r\n+#endif\r\n+                                /*************************************/\r\n+                                /** C0-CF : Fixed string            **/\r\n+                                /*************************************/\r\n+        .ascii  \"CHIPINFORMATION\"\r\n+1:      .space  (0xd0-1b),0x00\r\n+                                /*************************************/\r\n+                                /** D0-DF : Chipname                **/\r\n+                                /*************************************/\r\n+        .ascii  \"LC59_32K\"\r\n+2:      .space  (0xe0-2b),0x00\r\n+                                /*************************************/\r\n+                                /** E0-E1 : Format version(BCD4)    **/\r\n+                                /*************************************/\r\n+        .byte   0x10, 0x00\r\n+        .space  6, 0x00\r\n+                                /*************************************/\r\n+                                /** E8-F5 : Memory sizes            **/\r\n+                                /*************************************/\r\n+        .byte   BCD4(ROM_SIZE/1024)\r\n+        .byte   BCD6(RAM_SIZE)\r\n+        .byte   BCD6(VRAM_SIZE)\r\n+        .byte   BCD4(VRAM_ROW)\r\n+        .byte   BCD4(VRAM_COLUMN)\r\n+        .byte   BCD4(CGROM_SIZE/1024)\r\n+        .space  3, 0x00\r\n+                                /*************************************/\r\n+                                /** F9 : Package type               **/\r\n+                                /*************************************/\r\n+        .byte   0xff\r\n+        .space  6, 0x00\r\n+\r\n+                                /*************************************/\r\n+                                /** In order to link BIOS in library**/\r\n+                                /*************************************/\r\n+        .equ    dummy,__bios_entry\r"}, {"sha": "91c3e43f70f8a690bff4fb7331525497f5eefbe9", "filename": "gcc/testsuite/gcc.target/xstormy16/below100.ld", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow100.ld", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow100.ld", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow100.ld?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,192 @@\n+/******************************************************************\n+*******************************************************************\n+***                                                             ***\n+***     Linker script for xstormy16-elf-gcc                     ***\n+***           For SID   RAM=0x7E00                              ***\n+***                     ROM=0x78000                             ***\n+***                                                             ***\n+*******************************************************************\n+******************************************************************/\n+\n+OUTPUT_FORMAT(\"elf32-xstormy16\", \"elf32-xstormy16\", \"elf32-xstormy16\")\n+OUTPUT_ARCH(xstormy16)\n+ENTRY(_start)\n+SEARCH_DIR( . )\n+GROUP(-lc -lsim -lgcc)\n+PROVIDE( __target_package = 0xff);\n+\n+__malloc_start = 0x7E00;\n+\n+MEMORY\n+{\n+\tRAM (w)    : ORIGIN = 0x00000, LENGTH = 0x07E00\n+\tCHIP (r)   : ORIGIN = 0x07f00, LENGTH = 0x00100\n+\tROM (!w)   : ORIGIN = 0x08000, LENGTH = 0x78000\n+}\n+\n+SECTIONS\n+{\n+\t/* Zero initialized data with the below100 attribute.  */\n+\t.bss_below100 : {\n+\t\tSHORT(0)\n+\t\t__bss_start = .;\n+\t\t*(.bss_below100)\n+\t\t*(.bss_below100.*)\n+\t\t. = ALIGN(2);\n+\t} > RAM\n+\t\n+\t/* Non-zero initialized data with the below100 attribute.  */\n+\t.data_below100 : AT ( __rdata ) {\n+\t\t__data_start = . ;\n+\t        *(.data_0)\n+\t\t*(.data_below100)\n+\t\t*(.data_below100.*)\n+\t\t. = ALIGN(2);\n+\t} > RAM = 0\n+\t\n+        /* Normal non-zero initialized data.  */\n+       .data : AT ( __rdata + SIZEOF(.data_below100) ) {\n+\t\t*(.data)\n+\t\t*(.data.*)\n+\t\t*(.gnu.linkonce.d.*)\n+\t\tSORT(CONSTRUCTORS)\n+\t\t. = ALIGN(2);\n+\t\t__data_end = . ;\n+\t} > RAM =0\n+\t\n+        /* Normal zero initialized data.  */\n+\t.bss : AT (LOADADDR(.data) + SIZEOF(.data)) {\n+        \t*(.dynbss)\n+\t\t*(.bss)\n+\t\t*(.bss.*)\n+\t\t*(.gnu.linkonce.b.*)\n+\t\t*(COMMON)\n+\t\t. = ALIGN(2);\n+\t\t__bss_end = .;\n+\t} > RAM\n+\t\n+        /* The top of stack.  */\n+\t__stack = .;\n+\n+        /* Target chip info.  */\n+\t.chip_info : {\n+\t\tKEEP(*(.chip_info))\n+\t} > CHIP =0\n+\t\n+        /* Reset and interrupt vectors at 8000.  */\n+\t.int_vec : {\n+\t        KEEP(*(.int_vec))\n+\t} > ROM =0\n+\t\n+        /* Read only data.  */\n+\t.rodata : {\n+        \t*(.rodata)\n+\t\t*(.rodata.*)\n+\t\t*(.gnu.linkonce.r.*)\n+\t} > ROM =0\n+\t\n+        /* C++ Construcrtors and destructors.  */\n+\t.ctors : {\n+\t\tKEEP (*crtbegin.o(.ctors))\n+\t\tKEEP (*(EXCLUDE_FILE (*crtend.o ) .ctors))\n+\t\tKEEP (*(SORT(.ctors.*)))\n+\t\tKEEP (*(.ctors))\n+\t} > ROM =0\n+\t\n+\t.dtors : {\n+        \tKEEP (*crtbegin.o(.dtors))\n+\t\tKEEP (*(EXCLUDE_FILE (*crtend.o ) .dtors))\n+\t\tKEEP (*(SORT(.dtors.*)))\n+\t\tKEEP (*(.dtors))\n+\t} > ROM =0\n+\n+        /* Pointer lookup table.. */\n+\t.plt : {\n+\t        *(.plt)\n+\t} > ROM =0\n+\n+        /* Other information.  */\n+\t.jcr : {\n+\t        KEEP (*(.jcr))\n+\t} > ROM =0\n+\t\n+\t.eh_frame : {\n+\t        KEEP (*(.eh_frame))\n+\t} > ROM =0\n+\n+\t.gcc_except_table : {\n+\t        KEEP (*(.gcc_except_table))\n+\t} > ROM =0\n+\n+        /* Initialization values for data.  */\n+\t.data_init (NOLOAD) : {\n+\t\t__rdata = .;\n+\t\t. += SIZEOF(.data_below100);\n+\t\t. += SIZEOF(.data);\n+\t\t. += SIZEOF(.bss);\n+\t} > ROM\n+\n+        /* Executable code.  */\n+\t.text : {\n+\t\t*(.text)\n+\t\t*(.text.*)\n+\t\t*(.stub)\n+\t\t*(.gnu.warning)\n+\t\t*(.gnu.linkonce.t.*)\n+\t} > ROM =0\n+\n+        /* Startup/finish code.  */\n+\t.init : {\n+        \tKEEP (*crti.o(.init))\n+\t\tKEEP (*(EXCLUDE_FILE (*crtn.o ) .init))\n+\t\tKEEP (*(SORT(.init.*)))\n+\t\tKEEP (*(.init))\n+\t} > ROM =0\n+\t\n+\t.fini : {\n+        \tKEEP (*crti.o(.fini))\n+\t\tKEEP (*(EXCLUDE_FILE (*crtn.o ) .fini))\n+\t\tKEEP (*(SORT(.fini.*)))\n+\t\tKEEP (*(.fini))\n+\t} > ROM =0\n+\n+        /* Stab debugging sections.  */\n+\t.stab          0 : { *(.stab) }\n+\t.stabstr       0 : { *(.stabstr) }\n+\t.stab.excl     0 : { *(.stab.excl) }\n+\t.stab.exclstr  0 : { *(.stab.exclstr) }\n+\t.stab.index    0 : { *(.stab.index) }\n+\t.stab.indexstr 0 : { *(.stab.indexstr) }\n+\t.comment       0 : { *(.comment) }\n+\n+        /* DWARF debug sections.  */\t\n+\t/* Symbols in the DWARF debugging sections are relative to\n+\t   the beginning of the section so we begin them at 0.  */\n+\n+   \t/* DWARF 1.  */\n+\t.debug 0 : { *(.debug) }\n+\t.line 0 : { *(.line) }\n+\n+\t/* GNU DWARF 1 extensions.  */\n+\t.debug_srcinfo 0 : { *(.debug_srcinfo) }\n+\t.debug_sfnames 0 : { *(.debug_sfnames) }\n+\n+\t/* DWARF 1.1 and DWARF 2.  */\n+\t.debug_aranges  0 : { *(.debug_aranges) }\n+\t.debug_pubnames 0 : { *(.debug_pubnames) }\n+\n+\t/* DWARF 2.  */\n+\t.debug_info     0 : { *(.debug_info) *(.gnu.linkonce.wi.*) }\n+\t.debug_abbrev   0 : { *(.debug_abbrev) }\n+\t.debug_line     0 : { *(.debug_line) }\n+\t.debug_frame    0 : { *(.debug_frame) }\n+\t.debug_str      0 : { *(.debug_str) }\n+\t.debug_loc      0 : { *(.debug_loc) }\n+\t.debug_macinfo  0 : { *(.debug_macinfo) }\n+\n+        /* SGI/MIPS DWARF 2 extensions.  */\n+\t.debug_weaknames 0 : { *(.debug_weaknames) }\n+\t.debug_funcnames 0 : { *(.debug_funcnames) }\n+\t.debug_typenames 0 : { *(.debug_typenames) }\n+\t.debug_varnames  0 : { *(.debug_varnames) }\n+}"}, {"sha": "9433f2ad89759f00f610f0eb821be369d763ac7d", "filename": "gcc/testsuite/gcc.target/xstormy16/below_100.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow_100.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow_100.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow_100.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler \"bn \" } } */\n-/* { dg-final { scan-assembler \"bp \" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n \n unsigned short   a_below __attribute__((__BELOW100__));\n unsigned short   b_below __attribute__((__BELOW100__));"}, {"sha": "26ca6a3b4ad1ddf5e9b864f9ece61d67d79933be", "filename": "gcc/testsuite/gcc.target/xstormy16/bp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbp.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n-/* { dg-final { scan-assembler \"bp \" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n \n #define a_val (*((volatile unsigned char *) 0x7f14))\n #define b_val (*((volatile unsigned char *) 0x7f10))\n@@ -30,5 +30,3 @@ bar (void)\n \n   return foo ();\n }\n-\n-"}, {"sha": "2b4438c4c33a6535e49b9560c26c76b93ad1bb9a", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/01_const_to_b100b.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F01_const_to_b100b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F01_const_to_b100b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F01_const_to_b100b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b B100,#18\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__));\n+unsigned char *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 = 0x12;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0x12) ? 0 : 1;\n+}"}, {"sha": "d011ffd664e5dd056f886ea7014eb70b868e5977", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/02_const_to_b100w.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F02_const_to_b100w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F02_const_to_b100w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F02_const_to_b100w.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w B100,#4660\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 = 0x1234;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x9876;\n+  Do ();\n+  return (*p == 0x1234) ? 0 : 1;\n+}"}, {"sha": "bcc99118966d1be9df8cde6d787817554a83fa3f", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/03_var_to_b100b.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F03_var_to_b100b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F03_var_to_b100b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F03_var_to_b100b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b B100,r\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__));\n+unsigned char *p = &B100;\n+\n+unsigned char yData = 0x12;\n+\n+void\n+Do (void)\n+{\n+  B100 = yData;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0x12) ? 0 : 1;\n+}"}, {"sha": "ab4748871ad05714620dfe124fe38b5920b7c205", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/04_var_to_b100w.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F04_var_to_b100w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F04_var_to_b100w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F04_var_to_b100w.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w B100,r\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = &B100;\n+\n+unsigned short wData = 0x1234;\n+\n+void\n+Do (void)\n+{\n+  B100 = wData;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x9876;\n+  Do ();\n+  return (*p == 0x1234) ? 0 : 1;\n+}"}, {"sha": "e5f57e80325e3c47819b5759df08bec1c199451e", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/05_b100b_to_var.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F05_b100b_to_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F05_b100b_to_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F05_b100b_to_var.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b r., *B100\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__));\n+unsigned char *p = &B100;\n+\n+unsigned char yData = 0x12;\n+\n+void\n+Do (void)\n+{\n+  yData = B100;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (yData == 0x34) ? 0 : 1;\n+}"}, {"sha": "b19d9bcf4182bc0d2bbe6c5a1bc0bce50a98b316", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/06_b100w_to_var.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F06_b100w_to_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F06_b100w_to_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F06_b100w_to_var.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,B100\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = &B100;\n+\n+unsigned short wData = 0x1234;\n+\n+void\n+Do (void)\n+{\n+  wData = B100;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x3456;\n+  Do ();\n+  return (wData == 0x3456) ? 0 : 1;\n+}"}, {"sha": "f0965f1107d45ac2187003d4f7cf295bc75b82ef", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/10_set_b100b_bit_0.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F10_set_b100b_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F10_set_b100b_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F10_set_b100b_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__));\n+unsigned char *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x01;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0x35) ? 0 : 1;\n+}"}, {"sha": "8b14c43083c58431ef6d5421f566c983f74e7721", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/10_set_b100b_bit_7.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F10_set_b100b_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F10_set_b100b_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F10_set_b100b_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__));\n+unsigned char *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x80;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0xb4) ? 0 : 1;\n+}"}, {"sha": "79c265a243476a789ec4d959463f3abf4e31c441", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/11_clr_b100b_bit_0.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F11_clr_b100b_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F11_clr_b100b_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F11_clr_b100b_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__));\n+unsigned char *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x01;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xcb;\n+  Do ();\n+  return (*p == 0xca) ? 0 : 1;\n+}"}, {"sha": "d40e68f55e6d2c0f88bb6c9e04430a3973c91a9c", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/11_clr_b100b_bit_7.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F11_clr_b100b_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F11_clr_b100b_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F11_clr_b100b_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__));\n+unsigned char *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x80;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xcb;\n+  Do ();\n+  return (*p == 0x4b) ? 0 : 1;\n+}"}, {"sha": "26b3711ea055eddf898dad173efe65bb6929b4a8", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/12_if1_b100b_bit_0.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F12_if1_b100b_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F12_if1_b100b_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F12_if1_b100b_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x01)\n+    {\n+      if (B100B & 0x01)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "865ec549bd23dea61389b5098e25dd7973cb84c7", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/12_if1_b100b_bit_3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F12_if1_b100b_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F12_if1_b100b_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F12_if1_b100b_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x08)\n+    {\n+      if (B100B & 0x08)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "efbe1243cc88b4bb9e5d97284462885902e7d7cc", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/12_if1_b100b_bit_7.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F12_if1_b100b_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F12_if1_b100b_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F12_if1_b100b_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x80)\n+    {\n+      if (B100B & 0x80)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "81873954c1fa879fe5a7fec99bd3309014d8f857", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/13_if0_b100b_bit_0.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F13_if0_b100b_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F13_if0_b100b_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F13_if0_b100b_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x01))\n+    {\n+      if (!(B100B & 0x01))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "3fc566aa98f3abbdd6fc04be7a25f6f2d69bde78", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/13_if0_b100b_bit_3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F13_if0_b100b_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F13_if0_b100b_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F13_if0_b100b_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x08))\n+    {\n+      if (!(B100B & 0x08))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "bc90eaf953e1f1d606f170300b16f21e810c3614", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/13_if0_b100b_bit_7.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F13_if0_b100b_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F13_if0_b100b_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F13_if0_b100b_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x80))\n+    {\n+      if (!(B100B & 0x80))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "9164d05df3cef2c904c9378264fe1fbb5c9e1908", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/14_set_b100w_bit_0.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x0001;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x1235) ? 0 : 1;\n+}"}, {"sha": "848c3241f140629680695cb3bb60f657b37b2fd8", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/14_set_b100w_bit_7.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x0080;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x12b4) ? 0 : 1;\n+}"}, {"sha": "f843d12af4dd1c8dc6be7ef6eba1477669556916", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/14_set_b100w_bit_8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100\\\\+1,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x0100;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x1334) ? 0 : 1;\n+}"}, {"sha": "bba6dc9f48f89088798cc53fad973681ce18f7e3", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/14_set_b100w_bit_f.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F14_set_b100w_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100\\\\+1,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x8000;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x9234) ? 0 : 1;\n+}"}, {"sha": "634f2fc651cbeb449cacce4e5d22062fef5df963", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/15_clr_b100w_bit_0.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x0001;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xedca) ? 0 : 1;\n+}"}, {"sha": "4b7d1bd7247d3382de0a134aae0bf4657bcbc5ab", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/15_clr_b100w_bit_7.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x0080;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xed4b) ? 0 : 1;\n+}"}, {"sha": "1c5d4c40244841a55113f0c2b845107739c5ccd2", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/15_clr_b100w_bit_8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100\\\\+1,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x0100;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xeccb) ? 0 : 1;\n+}"}, {"sha": "5140c6caf856d6fffb48da8c6f20ef7bff2f98a5", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/15_clr_b100w_bit_f.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F15_clr_b100w_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100\\\\+1,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x8000;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0x6dcb) ? 0 : 1;\n+}"}, {"sha": "fb6a1ba318b988296cf4eb3334d5401f45cee8c0", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/16_if1_b100w_bit_0.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x0001)\n+    {\n+      if (B100B & 0x0001)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "c62462914539aaa1073138c90754732251b3ce4c", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/16_if1_b100w_bit_3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x0008)\n+    {\n+      if (B100B & 0x0008)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "d1c3fbf569a794cd606344f0e21e48a17f0eb67f", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/16_if1_b100w_bit_7.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x0080)\n+    {\n+      if (B100B & 0x0080)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "b10454203577d27f426ecb9c9f8c85be62b3a391", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/16_if1_b100w_bit_8.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x0100)\n+    {\n+      if (B100B & 0x0100)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "8fbded125c8e6142cd27a4272ff6e38c77ee0ba6", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/16_if1_b100w_bit_b.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x0800)\n+    {\n+      if (B100B & 0x0800)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "ae97d96a809e51bd8a4791a12a4f2dc51ce5cbca", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/16_if1_b100w_bit_f.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F16_if1_b100w_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x8000)\n+    {\n+      if (B100B & 0x8000)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "07c6e94d57d13251cb547ed0183408dd109dcbf8", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/17_if0_b100w_bit_0.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x0001))\n+    {\n+      if (!(B100B & 0x0001))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "f2dd3fba6ac410d5b12ecb04ffa99aacef6d83d7", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/17_if0_b100w_bit_3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x0008))\n+    {\n+      if (!(B100B & 0x0008))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "af6eb6e1783bade9b189bcf8e2d18fc6d49397d5", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/17_if0_b100w_bit_7.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x0080))\n+    {\n+      if (!(B100B & 0x0080))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "d50f8f82b77b181d739ee821b3438dd6ad3b621f", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/17_if0_b100w_bit_8.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x0100))\n+    {\n+      if (!(B100B & 0x0100))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "28d5a39bb6213c3f5002e5ce35f9c5a305200563", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/17_if0_b100w_bit_b.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x0800))\n+    {\n+      if (!(B100B & 0x0800))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "6a3f7025fbc9212eb6a3594689e55290d3437cad", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/17_if0_b100w_bit_f.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F17_if0_b100w_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x8000))\n+    {\n+      if (!(B100B & 0x8000))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "240e472991f39e905a226a1d1a492dbd00e00997", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/20_set_b100b_bitfield_0.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F20_set_b100b_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F20_set_b100b_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F20_set_b100b_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned char *p = (unsigned char *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b0 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0x35) ? 0 : 1;\n+}"}, {"sha": "674e51a6469e1c872a27042e1dbee6dc71570fb2", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/20_set_b100b_bitfield_7.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F20_set_b100b_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F20_set_b100b_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F20_set_b100b_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned char *p = (unsigned char *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b7 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0xb4) ? 0 : 1;\n+}"}, {"sha": "3846a96d218104187cc03e88c9aee3c60a325bbf", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/21_clr_b100b_bitfield_0.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F21_clr_b100b_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F21_clr_b100b_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F21_clr_b100b_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned char *p = (unsigned char *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b0 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xcb;\n+  Do ();\n+  return (*p == 0xca) ? 0 : 1;\n+}"}, {"sha": "10174576f2d1544f3b13f69067b180ca0659ca1c", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/21_clr_b100b_bitfield_7.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F21_clr_b100b_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F21_clr_b100b_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F21_clr_b100b_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned char *p = (unsigned char *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b7 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xcb;\n+  Do ();\n+  return (*p == 0x4b) ? 0 : 1;\n+}"}, {"sha": "9c4135776adb5e8fb916758aebea9c6b41b2289b", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/22_if1_b100b_bitfield_0.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F22_if1_b100b_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F22_if1_b100b_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F22_if1_b100b_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b0)\n+    {\n+      if (B100B.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "86f0f22f1372dadb51a5ead1e3df3eb7f4dd3784", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/22_if1_b100b_bitfield_3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F22_if1_b100b_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F22_if1_b100b_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F22_if1_b100b_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b3)\n+    {\n+      if (B100B.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "0df2f55dde08af0e7d459cd67dbdcd7ac2119ad7", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/22_if1_b100b_bitfield_7.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F22_if1_b100b_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F22_if1_b100b_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F22_if1_b100b_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b7)\n+    {\n+      if (B100B.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "9acd8a6f9e318ad347dc899d121079165f3dd2c4", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/23_if0_b100b_bitfield_0.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F23_if0_b100b_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F23_if0_b100b_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F23_if0_b100b_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b0)\n+    {\n+      if (!B100B.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "3ddbc1a103c87586623c10fb27960c86f39ac83d", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/23_if0_b100b_bitfield_3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F23_if0_b100b_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F23_if0_b100b_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F23_if0_b100b_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b3)\n+    {\n+      if (!B100B.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "3c0802e1e3815f5d83ef14c7ca8f47d893aba7e3", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/23_if0_b100b_bitfield_7.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F23_if0_b100b_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F23_if0_b100b_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F23_if0_b100b_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b7)\n+    {\n+      if (!B100B.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "d2fb580964328049a4f9ec74b9be3ebbf46c0e71", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/24_set_b100w_bitfield_0.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b0 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x1235) ? 0 : 1;\n+}"}, {"sha": "14825344076aeba9b6466b4b3fa77a9f54ca0101", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/24_set_b100w_bitfield_7.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b7 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x12b4) ? 0 : 1;\n+}"}, {"sha": "ce495b3ecdbb6318c8a9416bd8fb0331d7e6d696", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/24_set_b100w_bitfield_8.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100\\\\+1,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b8 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x1334) ? 0 : 1;\n+}"}, {"sha": "057f2d0231f6a998ae083887bbe0a75ec5283485", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/24_set_b100w_bitfield_f.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F24_set_b100w_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100\\\\+1,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b15 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x9234) ? 0 : 1;\n+}"}, {"sha": "f32a16bd9389f8dc217374ed520cbe252717ef30", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/25_clr_b100w_bitfield_0.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b0 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xedca) ? 0 : 1;\n+}"}, {"sha": "b123c5e3ef2a1aa1104ae99536b35bf6d93579ad", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/25_clr_b100w_bitfield_7.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b7 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xed4b) ? 0 : 1;\n+}"}, {"sha": "ed923a1d0ada47541827865ce8c7a1e88d495a2b", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/25_clr_b100w_bitfield_8.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100\\\\+1,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b8 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xeccb) ? 0 : 1;\n+}"}, {"sha": "2e04115198568bef5d8bc49ccb4706261b964da1", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/25_clr_b100w_bitfield_f.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F25_clr_b100w_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100\\\\+1,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__));\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b15 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0x6dcb) ? 0 : 1;\n+}"}, {"sha": "223de1284e8d23fefd43262f43dc72781ab9f290", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/26_if1_b100w_bitfield_0.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b0)\n+    {\n+      if (B100B.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "83b0a8a1525a154f53716e4bfebdd272f0ea634b", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/26_if1_b100w_bitfield_3.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b3)\n+    {\n+      if (B100B.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "89e71b89f76599c7b43c0799e67b44abe1239a26", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/26_if1_b100w_bitfield_7.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b7)\n+    {\n+      if (B100B.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "044541bfe87c7df15e0bbc4201565842a596ccc0", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/26_if1_b100w_bitfield_8.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b8)\n+    {\n+      if (B100B.b8)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "e36934f8d6201595cb7a3a5e5870f5072b6d5b82", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/26_if1_b100w_bitfield_b.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b11)\n+    {\n+      if (B100B.b11)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "90d0bbd9bb15387d46be8bbc1ed7a893eb56b85e", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/26_if1_b100w_bitfield_f.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F26_if1_b100w_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b15)\n+    {\n+      if (B100B.b15)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "a81359ca32c553cf276a7c1e64c18fd80a0ac5f5", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/27_if0_b100w_bitfield_0.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b0)\n+    {\n+      if (!B100B.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "d9eff1abb153d62482a6e38388c4adbb0f8ea120", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/27_if0_b100w_bitfield_3.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b3)\n+    {\n+      if (!B100B.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "1d643ea0217b88b443aee3635a875667acd28f91", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/27_if0_b100w_bitfield_7.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b7)\n+    {\n+      if (!B100B.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "5a2b67863f42227b643517af4c59873fd8882055", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/27_if0_b100w_bitfield_8.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b8)\n+    {\n+      if (!B100B.b8)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "87f760b2220035de3afedb8ef036d8a2304f1a3e", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/27_if0_b100w_bitfield_b.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b11)\n+    {\n+      if (!B100B.b11)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "1950ca27cdfa901705a8ad066d9e518f11aff2e1", "filename": "gcc/testsuite/gcc.target/xstormy16/bss_below100/27_if0_b100w_bitfield_f.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbss_below100%2F27_if0_b100w_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__));\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__));\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b15)\n+    {\n+      if (!B100B.b15)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "0ffc4bad8dca3eb468b6720f1c0856b1399dfd6a", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/01_const_to_b100b.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F01_const_to_b100b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F01_const_to_b100b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F01_const_to_b100b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b B100,#18\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__)) = 0x34;\n+unsigned char *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 = 0x12;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x12) ? 0 : 1;\n+}"}, {"sha": "e2ad793c9e50ab199aacb3ff09a58b228f2f7a62", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/02_const_to_b100w.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F02_const_to_b100w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F02_const_to_b100w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F02_const_to_b100w.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w B100,#4660\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__)) = 0x9876;\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 = 0x1234;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x1234) ? 0 : 1;\n+}"}, {"sha": "f78d18ab93b5e959d8cdaa2c4b4239f7906bb358", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/03_var_to_b100b.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F03_var_to_b100b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F03_var_to_b100b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F03_var_to_b100b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b B100,r\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__)) = 0x34;\n+unsigned char *p = &B100;\n+\n+unsigned char yData = 0x12;\n+\n+void\n+Do (void)\n+{\n+  B100 = yData;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x12) ? 0 : 1;\n+}"}, {"sha": "b9f3c55cda46e04342e6bfe5bfce8fc964251c78", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/04_var_to_b100w.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F04_var_to_b100w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F04_var_to_b100w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F04_var_to_b100w.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w B100,r\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__)) = 0x9876;\n+unsigned short *p = &B100;\n+\n+unsigned short wData = 0x1234;\n+\n+void\n+Do (void)\n+{\n+  B100 = wData;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x1234) ? 0 : 1;\n+}"}, {"sha": "b2a0bd04c31ccd72a767ccf3a72b49c53aa436a0", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/05_b100b_to_var.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F05_b100b_to_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F05_b100b_to_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F05_b100b_to_var.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b r., *B100\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__)) = 0x34;\n+unsigned char *p = &B100;\n+\n+unsigned char yData = 0x12;\n+\n+void\n+Do (void)\n+{\n+  yData = B100;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (yData == 0x34) ? 0 : 1;\n+}"}, {"sha": "50a6dd2a1eab344bd6a709cbf9beadae06302c49", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/06_b100w_to_var.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F06_b100w_to_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F06_b100w_to_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F06_b100w_to_var.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,B100\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__)) = 0x3456;\n+unsigned short *p = &B100;\n+\n+unsigned short wData = 0x1234;\n+\n+void\n+Do (void)\n+{\n+  wData = B100;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (wData == 0x3456) ? 0 : 1;\n+}"}, {"sha": "f81d26a3c2d0760233c7fc344a00ff225fc56df6", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/10_set_b100b_bit_0.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F10_set_b100b_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F10_set_b100b_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F10_set_b100b_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__)) = 0x34;\n+unsigned char *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x01;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x35) ? 0 : 1;\n+}"}, {"sha": "2c519132e31c7282f489008105f5bc4dc6211e11", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/10_set_b100b_bit_7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F10_set_b100b_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F10_set_b100b_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F10_set_b100b_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__)) = 0x34;\n+unsigned char *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x80;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0xb4) ? 0 : 1;\n+}"}, {"sha": "500f9baf41131c043c08e8473a0b46fdac7d0748", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/11_clr_b100b_bit_0.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F11_clr_b100b_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F11_clr_b100b_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F11_clr_b100b_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__)) = 0xcb;\n+unsigned char *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x01;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0xca) ? 0 : 1;\n+}"}, {"sha": "7c71f678974b087b91afe296cb274bbf53ca1bb4", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/11_clr_b100b_bit_7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F11_clr_b100b_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F11_clr_b100b_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F11_clr_b100b_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100 __attribute__ ((__BELOW100__)) = 0xcb;\n+unsigned char *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x80;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x4b) ? 0 : 1;\n+}"}, {"sha": "10dee7151170cad7b2a6bcdd3da8f1b0032e7c04", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/12_if1_b100b_bit_0.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F12_if1_b100b_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F12_if1_b100b_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F12_if1_b100b_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__)) = 0xcb;\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__)) = 0x34;\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x01)\n+    {\n+      if (B100B & 0x01)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "b36612409c81c525ca5c5ee06cf9bce87ecae27f", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/12_if1_b100b_bit_3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F12_if1_b100b_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F12_if1_b100b_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F12_if1_b100b_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__)) = 0xcb;\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__)) = 0x34;\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x08)\n+    {\n+      if (B100B & 0x08)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "9906a663c42069eb9a218a2eacc2aeb6b072f87b", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/12_if1_b100b_bit_7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F12_if1_b100b_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F12_if1_b100b_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F12_if1_b100b_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__)) = 0xcb;\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__)) = 0x34;\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x80)\n+    {\n+      if (B100B & 0x80)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "04cc929138b16bf52a047c64648808a3df1e759a", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/13_if0_b100b_bit_0.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F13_if0_b100b_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F13_if0_b100b_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F13_if0_b100b_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__)) = 0x34;\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__)) = 0xcb;\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x01))\n+    {\n+      if (!(B100B & 0x01))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "cbda60c274e8d918230abc2f89438d7467046017", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/13_if0_b100b_bit_3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F13_if0_b100b_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F13_if0_b100b_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F13_if0_b100b_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__)) = 0x34;\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__)) = 0xcb;\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x08))\n+    {\n+      if (!(B100B & 0x08))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "49143469dee774fdf0e72e7a4a9bbe6dc41854ea", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/13_if0_b100b_bit_7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F13_if0_b100b_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F13_if0_b100b_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F13_if0_b100b_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned char B100A __attribute__ ((__BELOW100__)) = 0x34;\n+unsigned char *pA = &B100A;\n+unsigned char B100B __attribute__ ((__BELOW100__)) = 0xcb;\n+unsigned char *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x80))\n+    {\n+      if (!(B100B & 0x80))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "acce9e1d9fb4baf8892e2535aacf666b3fb00660", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/14_set_b100w_bit_0.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x0001;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x1235) ? 0 : 1;\n+}"}, {"sha": "35fe30f5d9cc20ef66196da3dfa50e4d3e4fff0d", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/14_set_b100w_bit_7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x0080;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x12b4) ? 0 : 1;\n+}"}, {"sha": "cc337fc0426e932e41ceb627ffada6cfabf35645", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/14_set_b100w_bit_8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100\\\\+1,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x0100;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x1334) ? 0 : 1;\n+}"}, {"sha": "1fce8df53b32de5014cebcfad7bffaf74cb9f67b", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/14_set_b100w_bit_f.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F14_set_b100w_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100\\\\+1,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 |= 0x8000;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x9234) ? 0 : 1;\n+}"}, {"sha": "7c1c9b3e74d53ab2dbcd1b56a09b8293b2c33961", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/15_clr_b100w_bit_0.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x0001;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0xedca) ? 0 : 1;\n+}"}, {"sha": "fd707dc789d506b38598fa75910e19e94e422108", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/15_clr_b100w_bit_7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x0080;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0xed4b) ? 0 : 1;\n+}"}, {"sha": "7788de60bd9af1168e657d2b6454081b08b47d1f", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/15_clr_b100w_bit_8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100\\\\+1,#0\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x0100;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0xeccb) ? 0 : 1;\n+}"}, {"sha": "8046ee3708aeadebebbf07705c231fb0f74c81ad", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/15_clr_b100w_bit_f.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F15_clr_b100w_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100\\\\+1,#7\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100 __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *p = &B100;\n+\n+void\n+Do (void)\n+{\n+  B100 &= ~0x8000;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x6dcb) ? 0 : 1;\n+}"}, {"sha": "a5df453aef4b33e26593041c2d977fb0f342f523", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/16_if1_b100w_bit_0.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x0001)\n+    {\n+      if (B100B & 0x0001)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "8ff76e19d1b0421bfa8b2dba80fdc94d56ffe9a3", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/16_if1_b100w_bit_3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x0008)\n+    {\n+      if (B100B & 0x0008)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "8f542f31aa86f90371533dac38aadbb550d2b252", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/16_if1_b100w_bit_7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x0080)\n+    {\n+      if (B100B & 0x0080)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "727104cb251c568fd976535eff4e11d22484d542", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/16_if1_b100w_bit_8.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x0100)\n+    {\n+      if (B100B & 0x0100)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "74fd66961722d09ae5a9cc98c2c149d796ecd1b4", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/16_if1_b100w_bit_b.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x0800)\n+    {\n+      if (B100B & 0x0800)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "79b3839d8986140f5fc8c97645da6eb9cf9d7c23", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/16_if1_b100w_bit_f.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F16_if1_b100w_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A & 0x8000)\n+    {\n+      if (B100B & 0x8000)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "94dc08884c9e171183ee0c92fd5cb6beb44d055d", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/17_if0_b100w_bit_0.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x0001))\n+    {\n+      if (!(B100B & 0x0001))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "7bc005dbad489ae67373513cf860b104c7c8ce09", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/17_if0_b100w_bit_3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x0008))\n+    {\n+      if (!(B100B & 0x0008))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "64fcdc251cba96873651e8bbf6af2b3da8abc115", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/17_if0_b100w_bit_7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x0080))\n+    {\n+      if (!(B100B & 0x0080))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "6a118126e8153c2484ae9e656321fe7152038043", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/17_if0_b100w_bit_8.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#0,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x0100))\n+    {\n+      if (!(B100B & 0x0100))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "59a2f3578ffb006dfe0bce9c54112ba3f1544d81", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/17_if0_b100w_bit_b.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#3,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x0800))\n+    {\n+      if (!(B100B & 0x0800))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "3b271902bf9a3e3f89cade9e8f16881c16c55c7a", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/17_if0_b100w_bit_f.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F17_if0_b100w_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#7,\" } } */\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+unsigned short B100A __attribute__ ((__BELOW100__)) = 0x1234;\n+unsigned short *pA = &B100A;\n+unsigned short B100B __attribute__ ((__BELOW100__)) = 0xedcb;\n+unsigned short *pB = &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!(B100A & 0x8000))\n+    {\n+      if (!(B100B & 0x8000))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "fef1f2ed45d0c40e6edf56c976cb79f6d4d47023", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/20_set_b100b_bitfield_0.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F20_set_b100b_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F20_set_b100b_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F20_set_b100b_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0};\n+unsigned char *p = (unsigned char *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b0 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x35) ? 0 : 1;\n+}"}, {"sha": "b3900ca82ffc297d53cad91022aa6d09e9805091", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/20_set_b100b_bitfield_7.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F20_set_b100b_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F20_set_b100b_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F20_set_b100b_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0};\n+unsigned char *p = (unsigned char *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b7 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0xb4) ? 0 : 1;\n+}"}, {"sha": "6106f3860586ddf7e65523f38abd8fa5f5d0a51b", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/21_clr_b100b_bitfield_0.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F21_clr_b100b_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F21_clr_b100b_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F21_clr_b100b_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1};\n+unsigned char *p = (unsigned char *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b0 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0xca) ? 0 : 1;\n+}"}, {"sha": "414eec653f483fe06a13e4740d763a5d48d90448", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/21_clr_b100b_bitfield_7.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F21_clr_b100b_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F21_clr_b100b_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F21_clr_b100b_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1};\n+unsigned char *p = (unsigned char *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b7 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x4b) ? 0 : 1;\n+}"}, {"sha": "b950c518418ffb8db320b1c94cbddaa9531434db", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/22_if1_b100b_bitfield_0.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F22_if1_b100b_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F22_if1_b100b_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F22_if1_b100b_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1};\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0};\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b0)\n+    {\n+      if (B100B.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "b9da6a5e65287a0bb8b9d1900c7427172519f621", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/22_if1_b100b_bitfield_3.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F22_if1_b100b_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F22_if1_b100b_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F22_if1_b100b_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1};\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0};\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b3)\n+    {\n+      if (B100B.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "667e892ea554fb796bfdf1d4b7fe91cf10bd7da4", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/22_if1_b100b_bitfield_7.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F22_if1_b100b_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F22_if1_b100b_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F22_if1_b100b_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1};\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0};\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b7)\n+    {\n+      if (B100B.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "ebb63f74c9e3341207ac9ad9f6e942ef4e528f58", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/23_if0_b100b_bitfield_0.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F23_if0_b100b_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F23_if0_b100b_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F23_if0_b100b_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0};\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1};\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b0)\n+    {\n+      if (!B100B.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "a16768e40ccd4265e2f38473525350ec261975fe", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/23_if0_b100b_bitfield_3.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F23_if0_b100b_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F23_if0_b100b_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F23_if0_b100b_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0};\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1};\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b3)\n+    {\n+      if (!B100B.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "6f6d181e57175573cc0264c1064141c8c523a7cc", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/23_if0_b100b_bitfield_7.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F23_if0_b100b_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F23_if0_b100b_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F23_if0_b100b_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0};\n+unsigned char *pA = (unsigned char *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1};\n+unsigned char *pB = (unsigned char *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b7)\n+    {\n+      if (!B100B.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "7ac5028af940f87a725478548c444ca50b257862", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/24_set_b100w_bitfield_0.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b0 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x1235) ? 0 : 1;\n+}"}, {"sha": "8ba664bedaf8c1f4ed7b03d04394941cd58540c2", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/24_set_b100w_bitfield_7.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b7 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x12b4) ? 0 : 1;\n+}"}, {"sha": "2a43500c188af6cbc7004676ff754e9e97f46b48", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/24_set_b100w_bitfield_8.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100\\\\+1,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b8 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x1334) ? 0 : 1;\n+}"}, {"sha": "9ae5ce48b254305170e05fad762bf82ca69af90d", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/24_set_b100w_bitfield_f.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F24_set_b100w_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 B100\\\\+1,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b15 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x9234) ? 0 : 1;\n+}"}, {"sha": "94fdf696995ac61509849495333045351e1766bd", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/25_clr_b100w_bitfield_0.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b0 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0xedca) ? 0 : 1;\n+}"}, {"sha": "25f11a603c646b87112e9d4be86e692e4b1fc5b4", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/25_clr_b100w_bitfield_7.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b7 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0xed4b) ? 0 : 1;\n+}"}, {"sha": "d065be1465976cfa9d9e700fc07e260d80c5323b", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/25_clr_b100w_bitfield_8.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100\\\\+1,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b8 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0xeccb) ? 0 : 1;\n+}"}, {"sha": "4fbe7145555fdb7cff412b4582fa234bf2c4e3ac", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/25_clr_b100w_bitfield_f.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F25_clr_b100w_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 B100\\\\+1,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100 __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *p = (unsigned short *) &B100;\n+\n+void\n+Do (void)\n+{\n+  B100.b15 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  Do ();\n+  return (*p == 0x6dcb) ? 0 : 1;\n+}"}, {"sha": "054c0f51e01f821d167b27ae7331540c767d1035", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/26_if1_b100w_bitfield_0.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b0)\n+    {\n+      if (B100B.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "75ef36b3469f71ef135cd46e41a7e007021ef2e5", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/26_if1_b100w_bitfield_3.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b3)\n+    {\n+      if (B100B.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "45df6371c09a10189a73d7627fdbb8334ce180d3", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/26_if1_b100w_bitfield_7.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b7)\n+    {\n+      if (B100B.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "187a47761683921ce227515d9ef56525c4d744b3", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/26_if1_b100w_bitfield_8.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b8)\n+    {\n+      if (B100B.b8)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "8cf4cfd53a480dbb272421b5f0a47f0346276210", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/26_if1_b100w_bitfield_b.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b11)\n+    {\n+      if (B100B.b11)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "235cef7d25027a8a136c32656bd58b65bea80b32", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/26_if1_b100w_bitfield_f.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F26_if1_b100w_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (B100A.b15)\n+    {\n+      if (B100B.b15)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "bb80aca8158a72c5d4f4c8973a212b44ad46f959", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/27_if0_b100w_bitfield_0.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b0)\n+    {\n+      if (!B100B.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "5be55642680bf7690a5d3b907f85c4afbefb0f8a", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/27_if0_b100w_bitfield_3.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b3)\n+    {\n+      if (!B100B.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "0725b554219d465507855e084c26212d29fe28a5", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/27_if0_b100w_bitfield_7.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b7)\n+    {\n+      if (!B100B.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "2ad3642f845dd58061e3e88c0a573e3aca71640f", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/27_if0_b100w_bitfield_8.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#0,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#0,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b8)\n+    {\n+      if (!B100B.b8)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "e9af02f8e4deb5871d15e12f01af4bcc4635a15f", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/27_if0_b100w_bitfield_b.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#3,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#3,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b11)\n+    {\n+      if (!B100B.b11)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "a13ec8c2cd415f14edd5ade68b8e3f35ccf4ffe8", "filename": "gcc/testsuite/gcc.target/xstormy16/data_below100/27_if0_b100w_bitfield_f.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fdata_below100%2F27_if0_b100w_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100A\\\\+1,#7,\" } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] B100B\\\\+1,#7,\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+char acDummy[0xf0] __attribute__ ((__BELOW100__));\n+BitField B100A __attribute__ ((__BELOW100__)) =\n+{\n+0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};\n+unsigned short *pA = (unsigned short *) &B100A;\n+BitField B100B __attribute__ ((__BELOW100__)) =\n+{\n+1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1};\n+unsigned short *pB = (unsigned short *) &B100B;\n+\n+char *\n+Do (void)\n+{\n+  if (!B100A.b15)\n+    {\n+      if (!B100B.b15)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "96e4adcfb63035f8dbb5e3b9556dd2a1ae0653d6", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/01_const_to_sfrb.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F01_const_to_sfrb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F01_const_to_sfrb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F01_const_to_sfrb.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b 32532,#18\" } } */\n+\n+#define SFR (*((volatile unsigned char*)0x7f14))\n+unsigned char *p = (unsigned char *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR = 0x12;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0x12) ? 0 : 1;\n+}"}, {"sha": "930ba4d967c72f6d6d6584c65fc4af93f4c619e8", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/02_const_to_sfrw.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F02_const_to_sfrw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F02_const_to_sfrw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F02_const_to_sfrw.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w 32532,#4660\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR = 0x1234;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x9876;\n+  Do ();\n+  return (*p == 0x1234) ? 0 : 1;\n+}"}, {"sha": "8c4b1f1c73529299f7d5899e6c614acca23e07f4", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/03_var_to_sfrb.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F03_var_to_sfrb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F03_var_to_sfrb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F03_var_to_sfrb.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b 32532,r\" } } */\n+\n+#define SFR (*((volatile unsigned char*)0x7f14))\n+unsigned char *p = (unsigned char *) 0x7f14;\n+\n+unsigned char yData = 0x12;\n+\n+void\n+Do (void)\n+{\n+  SFR = yData;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0x12) ? 0 : 1;\n+}"}, {"sha": "c8d4a0e66606abb8fdf4875e9007a034ca075a92", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/04_var_to_sfrw.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F04_var_to_sfrw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F04_var_to_sfrw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F04_var_to_sfrw.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w 32532,r\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+unsigned short wData = 0x1234;\n+\n+void\n+Do (void)\n+{\n+  SFR = wData;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x9876;\n+  Do ();\n+  return (*p == 0x1234) ? 0 : 1;\n+}"}, {"sha": "9471e295a7f834ad0282be84e15ee645f7886f99", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/05_sfrb_to_var.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F05_sfrb_to_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F05_sfrb_to_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F05_sfrb_to_var.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b r., *32532\" } } */\n+\n+#define SFR (*((volatile unsigned char*)0x7f14))\n+unsigned char *p = (unsigned char *) 0x7f14;\n+\n+unsigned char yData = 0x12;\n+\n+void\n+Do (void)\n+{\n+  yData = SFR;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (yData == 0x34) ? 0 : 1;\n+}"}, {"sha": "39cbab5c3e939466617668efcd283d509205e1db", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/06_sfrw_to_var.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F06_sfrw_to_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F06_sfrw_to_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F06_sfrw_to_var.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r6,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+unsigned short wData = 0x9876;\n+\n+void\n+Do (void)\n+{\n+  wData = SFR;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (wData == 0x1234) ? 0 : 1;\n+}"}, {"sha": "644afb59c0dafa24dd6a33f66c932cc905abc0be", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/10_set_sfrb_bit_0.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F10_set_sfrb_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F10_set_sfrb_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F10_set_sfrb_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 32532,#0\" } } */\n+\n+#define SFR (*((volatile unsigned char*)0x7f14))\n+unsigned char *p = (unsigned char *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR |= 0x01;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0x35) ? 0 : 1;\n+}"}, {"sha": "90cd3c83f8abac0ae0dfa5e70c0855bde04b3dfd", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/10_set_sfrb_bit_7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F10_set_sfrb_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F10_set_sfrb_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F10_set_sfrb_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 32532,#7\" } } */\n+\n+#define SFR (*((volatile unsigned char*)0x7f14))\n+unsigned char *p = (unsigned char *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR |= 0x80;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0xb4) ? 0 : 1;\n+}"}, {"sha": "59d6153edd60308ce24bf43680b652a0bc449c2b", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/11_clr_sfrb_bit_0.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F11_clr_sfrb_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F11_clr_sfrb_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F11_clr_sfrb_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 32532,#0\" } } */\n+\n+#define SFR (*((volatile unsigned char*)0x7f14))\n+unsigned char *p = (unsigned char *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR &= ~0x01;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xcb;\n+  Do ();\n+  return (*p == 0xca) ? 0 : 1;\n+}"}, {"sha": "0cb7e1761c9968afc0991ec95f7391327277efea", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/11_clr_sfrb_bit_7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F11_clr_sfrb_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F11_clr_sfrb_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F11_clr_sfrb_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 32532,#7\" } } */\n+\n+#define SFR (*((volatile unsigned char*)0x7f14))\n+unsigned char *p = (unsigned char *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR &= ~0x80;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xcb;\n+  Do ();\n+  return (*p == 0x4b) ? 0 : 1;\n+}"}, {"sha": "54b0b1f6dc283032cd0d6521ddd3aa2139f6c4d8", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/12_if1_sfrb_bit_0.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F12_if1_sfrb_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F12_if1_sfrb_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F12_if1_sfrb_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+#define SFRA (*((volatile unsigned char*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile unsigned char*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA & 0x01)\n+    {\n+      if (SFRB & 0x01)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "4a575cc9905634fd10c146854c25829b2f4434df", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/12_if1_sfrb_bit_3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F12_if1_sfrb_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F12_if1_sfrb_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F12_if1_sfrb_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+#define SFRA (*((volatile unsigned char*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile unsigned char*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA & 0x08)\n+    {\n+      if (SFRB & 0x08)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "747cbdd948722948f5dc2aeea473c28599be3262", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/12_if1_sfrb_bit_7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F12_if1_sfrb_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F12_if1_sfrb_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F12_if1_sfrb_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+#define SFRA (*((volatile unsigned char*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile unsigned char*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA & 0x80)\n+    {\n+      if (SFRB & 0x80)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "d149692064cded7d25dadc944fb9aa529c770e51", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/13_if0_sfrb_bit_0.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F13_if0_sfrb_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F13_if0_sfrb_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F13_if0_sfrb_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+#define SFRA (*((volatile unsigned char*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile unsigned char*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!(SFRA & 0x01))\n+    {\n+      if (!(SFRB & 0x01))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "be6112cf11934dc5d7f9ae363d9d6c9800ac38be", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/13_if0_sfrb_bit_3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F13_if0_sfrb_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F13_if0_sfrb_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F13_if0_sfrb_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+#define SFRA (*((volatile unsigned char*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile unsigned char*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!(SFRA & 0x08))\n+    {\n+      if (!(SFRB & 0x08))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "12e68cd5b27eaf53414c9b53ffbe394ab3df0477", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/13_if0_sfrb_bit_7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F13_if0_sfrb_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F13_if0_sfrb_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F13_if0_sfrb_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+#define SFRA (*((volatile unsigned char*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile unsigned char*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!(SFRA & 0x80))\n+    {\n+      if (!(SFRB & 0x80))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "00f4f78cc953c367c3042aea8df6ac55174c12b9", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/14_set_sfrw_bit_0.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR |= 0x0001;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x1235) ? 0 : 1;\n+}"}, {"sha": "b5741fc485fd80db91947cc44f973f543eae7d33", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/14_set_sfrw_bit_3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR |= 0x0008;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x123c) ? 0 : 1;\n+}"}, {"sha": "ffcad45b2a7d7a53db742575a3a4d4125c3a79fd", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/14_set_sfrw_bit_7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR |= 0x0080;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x12b4) ? 0 : 1;\n+}"}, {"sha": "3f19329f28541ba3a43b7992bf5a3eafba43e1af", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/14_set_sfrw_bit_8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR |= 0x0100;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x1334) ? 0 : 1;\n+}"}, {"sha": "b5e8bb9e270d90f932025a12fe6f443d09d3f291", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/14_set_sfrw_bit_b.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR |= 0x0800;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x1a34) ? 0 : 1;\n+}"}, {"sha": "767e95ff48125caedcf0bb9b3938b34faf25c7a6", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/14_set_sfrw_bit_f.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F14_set_sfrw_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR |= 0x8000;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x9234) ? 0 : 1;\n+}"}, {"sha": "fcabe09948e6851b7427ad10dd5b80aef243376d", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/15_clr_sfrw_bit_0.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR &= ~0x0001;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xedca) ? 0 : 1;\n+}"}, {"sha": "26281be8761c92ba64a56ecce640bddce30233c0", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/15_clr_sfrw_bit_3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR &= ~0x0008;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xedc3) ? 0 : 1;\n+}"}, {"sha": "15ff063f42aac10ecca1ff4c84efb72a5de70b78", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/15_clr_sfrw_bit_7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR &= ~0x0080;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xed4b) ? 0 : 1;\n+}"}, {"sha": "c44817a7306f05ac0083717638909160db688e98", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/15_clr_sfrw_bit_8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR &= ~0x0100;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xeccb) ? 0 : 1;\n+}"}, {"sha": "9f1c3a5e7bddea83974b3d078cb88f78a5a6a6c1", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/15_clr_sfrw_bit_b.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR &= ~0x0800;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xe5cb) ? 0 : 1;\n+}"}, {"sha": "46eef43c45449eb78f50937ec8333b5e730b00b2", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/15_clr_sfrw_bit_f.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F15_clr_sfrw_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFR (*((volatile unsigned short*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR &= ~0x8000;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0x6dcb) ? 0 : 1;\n+}"}, {"sha": "287dd7a832bd7203f374821770384af8d3b84c37", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/16_if1_sfrw_bit_0.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA & 0x0001)\n+    {\n+      if (SFRB & 0x0001)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "719fa58dfd9b7f667e70dd76248cc5371a82a089", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/16_if1_sfrw_bit_3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA & 0x0008)\n+    {\n+      if (SFRB & 0x0008)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "1b361c5feee93bb8f7c779901eee23f1a375bd8c", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/16_if1_sfrw_bit_7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA & 0x0080)\n+    {\n+      if (SFRB & 0x0080)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "c8a3ba7cb941fbe191ee6df034aa0125f8dddcc6", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/16_if1_sfrw_bit_8.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA & 0x0100)\n+    {\n+      if (SFRB & 0x0100)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "a0f5742c1a2cd4b2568c0cc4dd77cd8a005cfbd0", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/16_if1_sfrw_bit_b.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA & 0x0800)\n+    {\n+      if (SFRB & 0x0800)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "5e91bb23e6b6f40b1ff55f95615a676edbe56d7d", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/16_if1_sfrw_bit_f.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F16_if1_sfrw_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA & 0x8000)\n+    {\n+      if (SFRB & 0x8000)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "ac5d87fe31d0ae72064d558fd00176f5eaaec8e3", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/17_if0_sfrw_bit_0.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!(SFRA & 0x0001))\n+    {\n+      if (!(SFRB & 0x0001))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "fa77f1bd1e65b5a2fc8aafe543a8aeea52ea9d87", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/17_if0_sfrw_bit_3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!(SFRA & 0x0008))\n+    {\n+      if (!(SFRB & 0x0008))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "cb331f0343580b463fa0e2f37d2a69ca3d9f3086", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/17_if0_sfrw_bit_7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!(SFRA & 0x0080))\n+    {\n+      if (!(SFRB & 0x0080))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "105bf4d8d8fe8dc87baaf4f9140d1c7308a41c78", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/17_if0_sfrw_bit_8.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!(SFRA & 0x0100))\n+    {\n+      if (!(SFRB & 0x0100))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "768cfb92b8970bbf1a837ec075fb5b74f653e093", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/17_if0_sfrw_bit_b.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!(SFRA & 0x0800))\n+    {\n+      if (!(SFRB & 0x0800))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "533a3c61ace58960f3261d701d8f4b3442a5d479", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/17_if0_sfrw_bit_f.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F17_if0_sfrw_bit_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.w r.,32532\" } } */\n+\n+#define SFRA (*((volatile unsigned short*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile unsigned short*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!(SFRA & 0x8000))\n+    {\n+      if (!(SFRB & 0x8000))\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "3879ed43889a60d841dc429894afce1bdd659a80", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/20_set_sfrb_bitfield_0.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F20_set_sfrb_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F20_set_sfrb_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F20_set_sfrb_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 32532,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned char *p = (unsigned char *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b0 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0x35) ? 0 : 1;\n+}"}, {"sha": "1b7bb8777692f97e3dc9b032bb1c5af304dabab1", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/20_set_sfrb_bitfield_7.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F20_set_sfrb_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F20_set_sfrb_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F20_set_sfrb_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 32532,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned char *p = (unsigned char *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b7 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x34;\n+  Do ();\n+  return (*p == 0xb4) ? 0 : 1;\n+}"}, {"sha": "6f73231c7bce9020ef67064d14b53746c9f7c6cb", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/21_clr_sfrb_bitfield_0.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F21_clr_sfrb_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F21_clr_sfrb_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F21_clr_sfrb_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 32532,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned char *p = (unsigned char *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b0 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xcb;\n+  Do ();\n+  return (*p == 0xca) ? 0 : 1;\n+}"}, {"sha": "10063e49286d0642bd8d4ef85ed674da48944d7f", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/21_clr_sfrb_bitfield_7.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F21_clr_sfrb_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F21_clr_sfrb_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F21_clr_sfrb_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 32532,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned char *p = (unsigned char *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b7 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xcb;\n+  Do ();\n+  return (*p == 0x4b) ? 0 : 1;\n+}"}, {"sha": "bb8489b6c3b1a6e167e042df5383cf9a787f224e", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/22_if1_sfrb_bitfield_0.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F22_if1_sfrb_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F22_if1_sfrb_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F22_if1_sfrb_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA.b0)\n+    {\n+      if (SFRB.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "96b441c04dbd71171c4743accc0a51edc195c83e", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/22_if1_sfrb_bitfield_3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F22_if1_sfrb_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F22_if1_sfrb_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F22_if1_sfrb_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA.b3)\n+    {\n+      if (SFRB.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "ad7bebdc6a657ae977e0fc2c96949b6717dcf5c5", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/22_if1_sfrb_bitfield_7.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F22_if1_sfrb_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F22_if1_sfrb_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F22_if1_sfrb_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA.b7)\n+    {\n+      if (SFRB.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xcb;\n+  *pB = 0x34;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "dfa59a939d9779e131aea5b19969fea2aba8b7af", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/23_if0_sfrb_bitfield_0.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F23_if0_sfrb_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F23_if0_sfrb_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F23_if0_sfrb_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!SFRA.b0)\n+    {\n+      if (!SFRB.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "c311877c761baa11daddce5b9443af4293b581c3", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/23_if0_sfrb_bitfield_3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F23_if0_sfrb_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F23_if0_sfrb_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F23_if0_sfrb_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!SFRA.b3)\n+    {\n+      if (!SFRB.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "2e4eea99095ca393086f02a1cb8647cd34bb1ddf", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/23_if0_sfrb_bitfield_7.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F23_if0_sfrb_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F23_if0_sfrb_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F23_if0_sfrb_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"b\\[np\\] \" } } */\n+\n+typedef struct\n+{\n+  unsigned char b0:1;\n+  unsigned char b1:1;\n+  unsigned char b2:1;\n+  unsigned char b3:1;\n+  unsigned char b4:1;\n+  unsigned char b5:1;\n+  unsigned char b6:1;\n+  unsigned char b7:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned char *pA = (unsigned char *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned char *pB = (unsigned char *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!SFRA.b7)\n+    {\n+      if (!SFRB.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x34;\n+  *pB = 0xcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "d2351681ce3ca9fa754962ec19046d2a0f0e704f", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/24_set_sfrw_bitfield_0.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 32532,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b0 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x1235) ? 0 : 1;\n+}"}, {"sha": "6f1cf87df6e7b709503e1ea30ffb9ef8ad43997c", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/24_set_sfrw_bitfield_7.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 32532,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b7 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x12b4) ? 0 : 1;\n+}"}, {"sha": "9de4c0def784deacda4f2594498886cef3b938f8", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/24_set_sfrw_bitfield_8.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 32533,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b8 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x1334) ? 0 : 1;\n+}"}, {"sha": "e89757fb6ee16f8e847793a5b308ac2efc8ff987", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/24_set_sfrw_bitfield_f.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F24_set_sfrw_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"set1 32533,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b15 = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0x1234;\n+  Do ();\n+  return (*p == 0x9234) ? 0 : 1;\n+}"}, {"sha": "5acd858fc2dc236980f5e4da34cc734dcccf6206", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/25_clr_sfrw_bitfield_0.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 32532,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b0 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xedca) ? 0 : 1;\n+}"}, {"sha": "112714e99ab3282efcafb531392da05cb9b45e64", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/25_clr_sfrw_bitfield_7.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 32532,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b7 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xed4b) ? 0 : 1;\n+}"}, {"sha": "015f9bc15dbc47c2d70d78dd385e6837178b7fcb", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/25_clr_sfrw_bitfield_8.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 32533,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b8 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0xeccb) ? 0 : 1;\n+}"}, {"sha": "0c85ffaa9b67808f06d24e205c1563208ea030ca", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/25_clr_sfrw_bitfield_f.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F25_clr_sfrw_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"clr1 32533,#7\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFR (*((volatile BitField*)0x7f14))\n+unsigned short *p = (unsigned short *) 0x7f14;\n+\n+void\n+Do (void)\n+{\n+  SFR.b15 = 0;\n+}\n+\n+int\n+main (void)\n+{\n+  *p = 0xedcb;\n+  Do ();\n+  return (*p == 0x6dcb) ? 0 : 1;\n+}"}, {"sha": "d4861b21bdadab843d8bba3c2ff011cf90cdf245", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/26_if1_sfrw_bitfield_0.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"bn 32532,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA.b0)\n+    {\n+      if (SFRB.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "5318305dbdf8d892d40034925390311f73349a31", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/26_if1_sfrw_bitfield_3.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"bn 32532,#3\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA.b3)\n+    {\n+      if (SFRB.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "85b86a0e97bbf04ef672f81b283abd342292cd3e", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/26_if1_sfrw_bitfield_7.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b r., *32532\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA.b7)\n+    {\n+      if (SFRB.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "65412e3f567c118c1b8ba4055f5b0265fefaa46a", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/26_if1_sfrw_bitfield_8.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"bn 32533,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA.b8)\n+    {\n+      if (SFRB.b8)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "951db3f2fbd1aab273037a0b4ba8d9a0d8f7f4ba", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/26_if1_sfrw_bitfield_b.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"bn 32533,#3\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA.b11)\n+    {\n+      if (SFRB.b11)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "b51daa862025b1d5a8099f9373ab3a17ddc60e8a", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/26_if1_sfrw_bitfield_f.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F26_if1_sfrw_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b r., *32533\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (SFRA.b15)\n+    {\n+      if (SFRB.b15)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0xedcb;\n+  *pB = 0x1234;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "0680d4f03b77b51c247deafa14c2ed645d1c8f56", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/27_if0_sfrw_bitfield_0.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_0.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"bp 32532,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!SFRA.b0)\n+    {\n+      if (!SFRB.b0)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "17f07f907b027afb687747656a2c6892af10c7b1", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/27_if0_sfrw_bitfield_3.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_3.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"bp 32532,#3\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!SFRA.b3)\n+    {\n+      if (!SFRB.b3)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "2c1cab89c565b939f742fcb8c73782615747ab05", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/27_if0_sfrw_bitfield_7.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_7.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b r., *32532\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!SFRA.b7)\n+    {\n+      if (!SFRB.b7)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "2353cad4efa3dab1e8f960b134ba7eb9b21bebe1", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/27_if0_sfrw_bitfield_8.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_8.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"bp 32533,#0\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!SFRA.b8)\n+    {\n+      if (!SFRB.b8)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "123cb060590036e99191cf57736bf16d135e919c", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/27_if0_sfrw_bitfield_b.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_b.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"bp 32533,#3\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!SFRA.b11)\n+    {\n+      if (!SFRB.b11)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "daf5090d228caea09f5544d26f257cb6759d6e0c", "filename": "gcc/testsuite/gcc.target/xstormy16/sfr/27_if0_sfrw_bitfield_f.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fsfr%2F27_if0_sfrw_bitfield_f.c?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options { -nostartfiles below100.o -Tbelow100.ld -O2 } } */\n+/* { dg-final { scan-assembler \"mov.b r., *32533\" } } */\n+\n+typedef struct\n+{\n+  unsigned short b0:1;\n+  unsigned short b1:1;\n+  unsigned short b2:1;\n+  unsigned short b3:1;\n+  unsigned short b4:1;\n+  unsigned short b5:1;\n+  unsigned short b6:1;\n+  unsigned short b7:1;\n+  unsigned short b8:1;\n+  unsigned short b9:1;\n+  unsigned short b10:1;\n+  unsigned short b11:1;\n+  unsigned short b12:1;\n+  unsigned short b13:1;\n+  unsigned short b14:1;\n+  unsigned short b15:1;\n+} BitField;\n+\n+#define SFRA (*((volatile BitField*)0x7f14))\n+unsigned short *pA = (unsigned short *) 0x7f14;\n+#define SFRB (*((volatile BitField*)0x7f10))\n+unsigned short *pB = (unsigned short *) 0x7f10;\n+\n+char *\n+Do (void)\n+{\n+  if (!SFRA.b15)\n+    {\n+      if (!SFRB.b15)\n+\treturn \"Fail\";\n+      else\n+\treturn \"Success\";\n+    }\n+  else\n+    return \"Fail\";\n+}\n+\n+int\n+main (void)\n+{\n+  *pA = 0x1234;\n+  *pB = 0xedcb;\n+  return Do ()[0] == 'F';\n+}"}, {"sha": "49d32ec249de7d1bb2cc65ed56dffbc59b3e5b06", "filename": "gcc/testsuite/gcc.target/xstormy16/xstormy16.exp", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fxstormy16.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e4dd33113039dfe75d5a99d75fbfd4797ede/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fxstormy16.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fxstormy16.exp?ref=de40e4dd33113039dfe75d5a99d75fbfd4797ede", "patch": "@@ -6,18 +6,37 @@ if {![istarget xstormy16-*-*]} {\n \n load_lib gcc-dg.exp\n \n-# If a testcase doesn't have special options, use these.\n-global DEFAULT_CFLAGS\n-if ![info exists DEFAULT_CFLAGS] then {\n-    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n-}\n-\n # Initialize `dg'.\n dg-init\n \n+# Assemble the below100.S file which contains\n+# support code for the rest of the tests.\n+set old-dg-do-what-default \"${dg-do-what-default}\"\n+set dg-do-what-default assemble\n+dg-test -keep-output \"$srcdir/$subdir/below100.S\" \"\" \"\"\n+set dg-do-what-default run\n+\n+\n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n-\t\"\" $DEFAULT_CFLAGS\n+foreach testcase [lsort [find $srcdir/$subdir *.c]] {\n+    global test_counts;\n+\n+    set base \"[file rootname [file tail $testcase]]\"\n+\n+    if ![runtest_file_p $runtests $testcase] {\n+        continue\n+    }\n+\n+    set fails_before $test_counts(FAIL,count)\n+    dg-test $testcase \"--save-temps -fno-inline-functions -L$srcdir/$subdir\" \"\"\n+    set fails_after $test_counts(FAIL,count)\n+\n+    if { $fails_before == $fails_after } {\n+        catch \"exec rm -f $base.i $base.s $base.o\"\n+    }\n+}\n+\n+set dg-do-what-default \"${old-dg-do-what-default}\"\n \n # All done.\n dg-finish"}]}