{"sha": "c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3MTMyNmI0ZjNhNTQ1MWEwZjA0YmM3NWM3ZWFhZjY3ZGM4ZTJkMg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-14T22:51:18Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-14T22:51:18Z"}, "message": "c-tree.texi, [...]: Fix spelling and typos.\n\n\t* doc/c-tree.texi, doc/contrib.texi, doc/extend.texi,\n\tdoc/gcc.texi, doc/install.texi, doc/invoke.texi, doc/md.texi,\n\tdoc/objc.texi, doc/rtl.texi, doc/tm.texi: Fix spelling and typos.\n\tConsistently use \"built-in\" and \"bit-field\".  Minor logical markup\n\timprovements.\n\t* doc/gcc.1: Regenerate.\n\nFrom-SVN: r43383", "tree": {"sha": "772b2cba97c73b14b62229c62b3429bd6ff1e4c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/772b2cba97c73b14b62229c62b3429bd6ff1e4c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f4edf0790977a1842dbd2acf8de7febf7aa94a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f4edf0790977a1842dbd2acf8de7febf7aa94a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f4edf0790977a1842dbd2acf8de7febf7aa94a"}], "stats": {"total": 345, "additions": 180, "deletions": 165}, "files": [{"sha": "c1278173ae743cdc62b32c1dfa2587e15bd2caca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -1,3 +1,12 @@\n+2001-06-14  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/c-tree.texi, doc/contrib.texi, doc/extend.texi,\n+\tdoc/gcc.texi, doc/install.texi, doc/invoke.texi, doc/md.texi,\n+\tdoc/objc.texi, doc/rtl.texi, doc/tm.texi: Fix spelling and typos.\n+\tConsistently use \"built-in\" and \"bit-field\".  Minor logical markup\n+\timprovements.\n+\t* doc/gcc.1: Regenerate.\n+\n 2001-06-14  Richard Henderson  <rth@redhat.com>\n \n \t* config/mips/mips.md (exception_receiver): New."}, {"sha": "635bccd87adc2be3b0ce99a4022291da01cdb05e", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -372,7 +372,7 @@ the type.  (Note this macro does @emph{not} return a\n @code{IDENTIFIER_NODE}, as you might expect, given its name!)  You can\n look at the @code{DECL_NAME} of the @code{TYPE_DECL} to obtain the\n actual name of the type.  The @code{TYPE_NAME} will be @code{NULL_TREE}\n-for a type that is not a builtin type, the result of a typedef, or a\n+for a type that is not a built-in type, the result of a typedef, or a\n named class type.\n \n @item CP_INTEGRAL_TYPE\n@@ -387,7 +387,7 @@ or a floating point type.\n This predicate holds for a class-type.\n \n @item TYPE_BUILT_IN\n-This predicate holds for a builtin type.\n+This predicate holds for a built-in type.\n \n @item TYPE_PTRMEM_P\n This predicate holds if the type is a pointer to data member.\n@@ -450,7 +450,7 @@ double} types.  The number of bits in the floating-point representation\n is given by @code{TYPE_PRECISION}, as in the @code{INTEGER_TYPE} case.\n \n @item COMPLEX_TYPE\n-Used to represent GCC builtin @code{__complex__} data types.  The\n+Used to represent GCC built-in @code{__complex__} data types.  The\n @code{TREE_TYPE} is the type of the real and imaginary parts.\n \n @item ENUMERAL_TYPE\n@@ -967,7 +967,7 @@ These nodes represent non-static data members.  The @code{DECL_SIZE} and\n @code{INTEGER_CST}.  These values are indexed from zero, where zero\n indicates the first bit in the object.\n \n-If @code{DECL_C_BIT_FIELD} holds, this field is a bitfield.\n+If @code{DECL_C_BIT_FIELD} holds, this field is a bit-field.\n \n @item NAMESPACE_DECL\n @xref{Namespaces}.\n@@ -976,7 +976,7 @@ If @code{DECL_C_BIT_FIELD} holds, this field is a bitfield.\n \n These nodes are used to represent class, function, and variable (static\n data member) templates.  The @code{DECL_TEMPLATE_SPECIALIZATIONS} are a\n-@code{TREE_LIST}.  The @code{TREE_VALUE} of each node in the lst is a\n+@code{TREE_LIST}.  The @code{TREE_VALUE} of each node in the list is a\n @code{TEMPLATE_DECL}s or @code{FUNCTION_DECL}s representing\n specializations (including instantiations) of this template.  Back-ends\n can safely ignore @code{TEMPLATE_DECL}s, but should examine\n@@ -1547,7 +1547,7 @@ Used to represent an @code{if} statement.  The @code{IF_COND} is the\n expression.\n \n If the condition is a @code{TREE_LIST}, then the @code{TREE_PURPOSE} is\n-a statement (usually a @code{DECL_STMT}).  Each time the coondition is\n+a statement (usually a @code{DECL_STMT}).  Each time the condition is\n evaluated, the statement should be executed.  Then, the\n @code{TREE_VALUE} should be used as the conditional expression itself.\n This representation is used to handle C++ code like this:\n@@ -2047,7 +2047,7 @@ will be a @code{VAR_DECL}, @code{INDIRECT_REF}, @code{COMPONENT_REF}, or\n other lvalue.\n \n These nodes are used to represent not only assignment with @samp{=} but\n-also compount assignments (like @samp{+=}), by reduction to @samp{=}\n+also compound assignments (like @samp{+=}), by reduction to @samp{=}\n assignment.  In other words, the representation for @samp{i += 3} looks\n just like that for @samp{i = i + 3}.\n "}, {"sha": "aa9b8e630ff066e56764b78f3cf620534abe560d", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -346,7 +346,7 @@ Alan Modra for various Linux bits and testing.\n \n @item\n Toon Moene for his direction via the steering committee, Fortran\n-maintainance, and his ongoing work to make us make Fortran run fast.\n+maintenance, and his ongoing work to make us make Fortran run fast.\n \n @item\n Jason Molenda for major help in the care and feeding of all the services\n@@ -374,7 +374,7 @@ Philippe De Muyter for his work on the m68k port.\n \n @item\n Joseph S. Myers for his work on the PDP-11 port, format checking and ISO\n-C99 support, and continous emphasis on (and contributions to) documentation.\n+C99 support, and continuous emphasis on (and contributions to) documentation.\n \n @item\n Nathan Myers for his work on libstdc++-v3.\n@@ -413,7 +413,7 @@ Matthias Pfaller for major improvements to the NS32k port.\n @item\n Gerald Pfeifer for his direction via the steering committee, pointing\n out lots of problems we need to solve, maintenance of the web pages, and\n-taking care of documentation maintainance in general.\n+taking care of documentation maintenance in general.\n \n @item\n Ovidiu Predescu for his work on the ObjC front end and runtime libraries."}, {"sha": "93c6aaca2e05b8e8c8eb59a3dc74748dd2a61ee5", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -185,7 +185,7 @@ the macro safely as follows:\n @end example\n \n Embedded statements are not allowed in constant expressions, such as\n-the value of an enumeration constant, the width of a bit field, or\n+the value of an enumeration constant, the width of a bit-field, or\n the initial value of a static variable.\n \n If you don't know the type of the operand, you can still do this, but you\n@@ -2167,7 +2167,7 @@ the function instead by syntax described below (which, however, is not\n yet implemented in this case).  In some other cases, attribute\n specifiers are permitted by this grammar but not yet supported by the\n compiler.  All attribute specifiers in this place relate to the\n-declaration as a whole.  In the obsolencent usage where a type of\n+declaration as a whole.  In the obsolescent usage where a type of\n @code{int} is implied by the absence of type specifiers, such a list of\n specifiers and qualifiers may be an attribute specifier list with no\n other specifiers or qualifiers.\n@@ -2214,7 +2214,7 @@ ignored.\n \n An attribute specifier list may appear at the start of a nested\n declarator.  At present, there are some limitations in this usage: the\n-attributes apply to the identifer declared, and to all subsequent\n+attributes apply to the identifier declared, and to all subsequent\n identifiers declared in that declaration (if it includes a\n comma-separated list of declarators), rather than to a specific\n declarator.  When attribute specifiers follow the @code{*} of a pointer\n@@ -2976,7 +2976,7 @@ template and does not know what it means or even whether it is valid\n assembler input.  The extended @code{asm} feature is most often used for\n machine instructions the compiler itself does not know exist.  If\n the output expression cannot be directly addressed (for example, it is a\n-bit field), your constraint must allow a register.  In that case, GNU CC\n+bit-field), your constraint must allow a register.  In that case, GNU CC\n will use the register as the output of the @code{asm}, and then store\n that register into the output.\n \n@@ -3247,7 +3247,7 @@ asm (\"foo\" : \"=t\" (a) : \"f\" (b));\n @end example\n \n This asm says that input B is not popped by the asm, and that\n-the asm pushes a result onto the reg-stack, ie, the stack is one\n+the asm pushes a result onto the reg-stack, i.e., the stack is one\n deeper after the asm than it was before.  But, it is possible that\n reload will think that it can use the same reg for both the input and\n the output, if input B dies in this insn.\n@@ -3723,7 +3723,7 @@ function as well.\n \n @node Other Builtins\n @section Other built-in functions provided by GNU CC\n-@cindex builtin functions\n+@cindex built-in functions\n @findex __builtin_isgreater\n @findex __builtin_isgreaterequal\n @findex __builtin_isless\n@@ -4011,8 +4011,8 @@ In most expressions, it is intuitively obvious what is a read and what is\n a write. For instance\n \n @example\n-volatile int *dst = <somevalue>;\n-volatile int *src = <someothervalue>;\n+volatile int *dst = @var{somevalue};\n+volatile int *src = @var{someothervalue};\n *dst = *src;\n @end example\n \n@@ -4026,7 +4026,7 @@ Less obvious expressions are where something which looks like an access\n is used in a void context. An example would be,\n \n @example\n-volatile int *src = <somevalue>;\n+volatile int *src = @var{somevalue};\n *src;\n @end example\n \n@@ -4046,8 +4046,8 @@ warning.\n @example\n struct S;\n struct T @{int m;@};\n-volatile S *ptr1 = <somevalue>;\n-volatile T *ptr2 = <somevalue>;\n+volatile S *ptr1 = @var{somevalue};\n+volatile T *ptr2 = @var{somevalue};\n *ptr1;\n *ptr2;\n @end example"}, {"sha": "728886621fb4e78a3bd4d99c6df91c7bc6ef052e", "filename": "gcc/doc/gcc.1", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fgcc.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fgcc.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.1?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.16\n-.\\\" Thu Jun 14 10:58:24 2001\n+.\\\" Thu Jun 14 22:41:32 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -854,8 +854,8 @@ from declaring certain functions or defining certain macros that the\n \\&\\s-1ISO\\s0 standard doesn't call for; this is to avoid interfering with any\n programs that might use these names for other things.\n .Sp\n-Functions which would normally be builtin but do not have semantics\n-defined by \\s-1ISO\\s0 C (such as \\f(CW\\*(C`alloca\\*(C'\\fR and \\f(CW\\*(C`ffs\\*(C'\\fR) are not builtin\n+Functions which would normally be built in but do not have semantics\n+defined by \\s-1ISO\\s0 C (such as \\f(CW\\*(C`alloca\\*(C'\\fR and \\f(CW\\*(C`ffs\\*(C'\\fR) are not built-in\n functions with \\fB\\-ansi\\fR is used.  \n .Ip \"\\fB\\-std=\\fR\" 4\n .IX Item \"-std=\"\n@@ -936,10 +936,10 @@ switch only affects the \\f(CW\\*(C`asm\\*(C'\\fR and \\f(CW\\*(C`typeof\\*(C'\\fR keywo\n \\&\\f(CW\\*(C`inline\\*(C'\\fR is a standard keyword in \\s-1ISO\\s0 C99.\n .Ip \"\\fB\\-fno-builtin\\fR\" 4\n .IX Item \"-fno-builtin\"\n-Don't recognize builtin functions that do not begin with\n+Don't recognize built-in functions that do not begin with\n \\&\\fB_\\|_builtin_\\fR as prefix.  \n .Sp\n-\\&\\s-1GCC\\s0 normally generates special code to handle certain builtin functions\n+\\&\\s-1GCC\\s0 normally generates special code to handle certain built-in functions\n more efficiently; for instance, calls to \\f(CW\\*(C`alloca\\*(C'\\fR may become single\n instructions that adjust the stack directly, and calls to \\f(CW\\*(C`memcpy\\*(C'\\fR\n may become inline copy loops.  The resulting code is often both smaller\n@@ -949,9 +949,9 @@ of the functions by linking with a different library.\n .Sp\n In \\*(C+, \\fB\\-fno-builtin\\fR is always in effect.  The \\fB\\-fbuiltin\\fR\n option has no effect.  Therefore, in \\*(C+, the only way to get the\n-optimization benefits of builtin functions is to call the function\n+optimization benefits of built-in functions is to call the function\n using the \\fB_\\|_builtin_\\fR prefix.  The \\s-1GNU\\s0 \\*(C+ Standard Library uses\n-builtin functions to implement many functions (like\n+built-in functions to implement many functions (like\n \\&\\f(CW\\*(C`std::strchr\\*(C'\\fR), so that you automatically get efficient code.\n .Ip \"\\fB\\-fhosted\\fR\" 4\n .IX Item \"-fhosted\"\n@@ -1013,7 +1013,7 @@ representation of a character, and \\fB\\ea\\fR produces a bell.\n .RS 4\n .Sp\n You may wish to use \\fB\\-fno-builtin\\fR as well as \\fB\\-traditional\\fR\n-if your program uses names that are normally \\s-1GNU\\s0 C builtin functions for\n+if your program uses names that are normally \\s-1GNU\\s0 C built-in functions for\n other purposes of its own.\n .Sp\n You cannot use \\fB\\-traditional\\fR if you include any header files that\n@@ -1097,12 +1097,12 @@ the negative form of \\fB\\-funsigned-char\\fR.  Likewise, the option\n .Ip \"\\fB\\-fno-unsigned-bitfields\\fR\" 4\n .IX Item \"-fno-unsigned-bitfields\"\n .PD\n-These options control whether a bitfield is signed or unsigned, when the\n+These options control whether a bit-field is signed or unsigned, when the\n declaration does not use either \\f(CW\\*(C`signed\\*(C'\\fR or \\f(CW\\*(C`unsigned\\*(C'\\fR.  By\n-default, such a bitfield is signed, because this is consistent: the\n+default, such a bit-field is signed, because this is consistent: the\n basic integer types such as \\f(CW\\*(C`int\\*(C'\\fR are signed types.\n .Sp\n-However, when \\fB\\-traditional\\fR is used, bitfields are all unsigned\n+However, when \\fB\\-traditional\\fR is used, bit-fields are all unsigned\n no matter what.\n .Ip \"\\fB\\-fwritable-strings\\fR\" 4\n .IX Item \"-fwritable-strings\"\n@@ -1268,7 +1268,7 @@ Disable pedantic warnings about constructs used in \\s-1MFC\\s0, such as implicit\n int and getting a pointer to member function via non-standard syntax.\n .Ip \"\\fB\\-fno-nonansi-builtins\\fR\" 4\n .IX Item \"-fno-nonansi-builtins\"\n-Disable builtin declarations of functions that are not mandated by\n+Disable built-in declarations of functions that are not mandated by\n \\&\\s-1ANSI/ISO\\s0 C.  These include \\f(CW\\*(C`ffs\\*(C'\\fR, \\f(CW\\*(C`alloca\\*(C'\\fR, \\f(CW\\*(C`_exit\\*(C'\\fR,\n \\&\\f(CW\\*(C`index\\*(C'\\fR, \\f(CW\\*(C`bzero\\*(C'\\fR, \\f(CW\\*(C`conjf\\*(C'\\fR, and other related functions.\n .Ip \"\\fB\\-fno-operator-names\\fR\" 4\n@@ -1386,7 +1386,7 @@ Do not warn about usage of deprecated features.\n .IX Item \"-Wno-non-template-friend ( only)\"\n Disable warnings when non-templatized friend functions are declared\n within a template. With the advent of explicit template specification\n-support in g++, if the name of the friend is an unqualified-id (ie,\n+support in g++, if the name of the friend is an unqualified-id (i.e.,\n \\&\\fBfriend foo(int)\\fR), the \\*(C+ language specification demands that the\n friend declare or define an ordinary, nontemplate function. (Section\n 14.5.3). Before g++ implemented explicit specification, unqualified-ids\n@@ -2031,10 +2031,10 @@ A function-like macro that appears without arguments.\n .Ip \"\\(bu\" 4\n The unary plus operator.\n .Ip \"\\(bu\" 4\n-The `U' integer constant suffix, or the `F' or `L' floating point\n-constant suffixes.  (Traditonal C does support the `L' suffix on integer\n+The \\fBU\\fR integer constant suffix, or the \\fBF\\fR or \\fBL\\fR floating point\n+constant suffixes.  (Traditional C does support the \\fBL\\fR suffix on integer\n constants.)  Note, these suffixes appear in macros defined in the system\n-headers of most modern systems, e.g. the _MIN/_MAX macros in limits.h.\n+headers of most modern systems, e.g. the \\fB_MIN\\fR/\\fB_MAX\\fR macros in \\f(CW\\*(C`<limits.h>\\*(C'\\fR.\n Use of these macros in user code might normally lead to spurious\n warnings, however gcc's integrated preprocessor has enough context to\n avoid warning in these cases.\n@@ -2402,7 +2402,7 @@ You can examine different profiling aspects without recompilation.  Your\n executable will read a list of function names from file \\fIbb.in\\fR.\n Profiling starts when a function on the list is entered and stops when\n that invocation is exited.  To exclude a function from profiling, prefix\n-its name with `\\-'.  If a function name is not unique, you can\n+its name with \\fB-\\fR.  If a function name is not unique, you can\n disambiguate it by writing it in the form\n \\&\\fB/path/filename.d:functionname\\fR.  Your executable will write the\n available paths and filenames in file \\fIbb.out\\fR.\n@@ -3342,7 +3342,7 @@ Treat floating point constant as single precision constant instead of\n implicitly converting it to double precision constant.\n .Ip \"\\fB\\-frename-registers\\fR\" 4\n .IX Item \"-frename-registers\"\n-Attempt to avoid false dependancies in scheduled code by making use\n+Attempt to avoid false dependencies in scheduled code by making use\n of registers left over after register allocation.  This optimization\n will most benefit processors with lots of registers.  It can, however,\n make debugging impossible, since variables will no longer stay in\n@@ -5507,11 +5507,11 @@ hardware floating is used.\n .IX Item \"-mbit-align\"\n .PD\n On System V.4 and embedded PowerPC systems do not (do) force structures\n-and unions that contain bit fields to be aligned to the base type of the\n-bit field.\n+and unions that contain bit-fields to be aligned to the base type of the\n+bit-field.\n .Sp\n For example, by default a structure containing nothing but 8\n-\\&\\f(CW\\*(C`unsigned\\*(C'\\fR bitfields of length 1 would be aligned to a 4 byte\n+\\&\\f(CW\\*(C`unsigned\\*(C'\\fR bit-fields of length 1 would be aligned to a 4 byte\n boundary and have a size of 4 bytes.  By using \\fB\\-mno-bit-align\\fR,\n the structure would be aligned to a 1 byte boundary and be one byte in\n size.\n@@ -5741,7 +5741,7 @@ be allocated dynamically.\n .IX Item \"-mfp-arg-in-fpregs\"\n Use a calling sequence incompatible with the \\s-1IBM\\s0 calling convention in\n which floating point arguments are passed in floating point registers.\n-Note that \\f(CW\\*(C`varargs.h\\*(C'\\fR and \\f(CW\\*(C`stdargs.h\\*(C'\\fR will not work with\n+Note that \\f(CW\\*(C`varargs.h\\*(C'\\fR and \\f(CW\\*(C`stdarg.h\\*(C'\\fR will not work with\n floating point operands if this option is specified.\n .Ip \"\\fB\\-mfp-arg-in-gregs\\fR\" 4\n .IX Item \"-mfp-arg-in-gregs\"\n@@ -6157,7 +6157,7 @@ expense of more memory.\n .PD\n Control the size of \\f(CW\\*(C`long double\\*(C'\\fR type. i386 application binary interface\n specify the size to be 12 bytes, while modern architectures (Pentium and newer)\n-preffer \\f(CW\\*(C`long double\\*(C'\\fR aligned to 8 or 16 byte boundary.  This is\n+prefer \\f(CW\\*(C`long double\\*(C'\\fR aligned to 8 or 16 byte boundary.  This is\n impossible to reach with 12 byte long doubles in the array accesses.\n .Sp\n \\&\\fBWarning:\\fR if you use the \\fB\\-m128bit-long-double\\fR switch, the\n@@ -6827,7 +6827,7 @@ Generate code for the \\s-1SH4\\s0 without a floating-point unit.\n .Ip \"\\fB\\-m4\\-single-only\\fR\" 4\n .IX Item \"-m4-single-only\"\n Generate code for the \\s-1SH4\\s0 with a floating-point unit that only\n-supports single-precision arithmentic.\n+supports single-precision arithmetic.\n .Ip \"\\fB\\-m4\\-single\\fR\" 4\n .IX Item \"-m4-single\"\n Generate code for the \\s-1SH4\\s0 assuming the floating-point unit is in\n@@ -7372,7 +7372,7 @@ Allow arbitrary sized immediates in bit operations.\n .Ip \"\\fB\\-mno-wide-bitfields\\fR\" 4\n .IX Item \"-mno-wide-bitfields\"\n .PD\n-Always treat bitfields as int-sized.\n+Always treat bit-fields as int-sized.\n .Ip \"\\fB\\-m4byte-functions\\fR\" 4\n .IX Item \"-m4byte-functions\"\n .PD 0"}, {"sha": "e1bbb512a4c9845437664ac6ef18892ba853cadd", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -34,15 +34,21 @@\n @c -item/itemx, text after all (sub/sub)section titles, etc..\n @c -consider putting the lists of options on pp 17--> etc in columns or\n @c  some such.\n-@c -spellcheck\n-@c -continuity of phrasing; ie, bit-field vs bitfield in rtl.texi\n @c -overfulls.  do a search for \"mew\" in the files, and you will see\n @c   overfulls that i noted but could not deal with.\n @c -have to add text:  beginning of chapter 8\n \n @c\n @c anything else?                       --mew 10feb93\n \n+@c For consistency, use the following:\n+@c - \"bit-field\" not \"bitfield\" or \"bit field\" (following the C and C++\n+@c   standards).\n+@c - \"built-in\" as an adjective (\"built-in function\"), or sometimes\n+@c   \"built in\", not \"builtin\" (which isn't a word).\n+@c - \"front end\" as a noun, \"front-end\" as an adjective (not yet\n+@c   consistently followed).\n+\n @macro gcctabopt{body}\n @code{\\body\\}\n @end macro\n@@ -1422,13 +1428,13 @@ being incompatible with ISO C just to avoid an error for the example\n shown above.\n \n @item\n-Accesses to bitfields even in volatile objects works by accessing larger\n+Accesses to bit-fields even in volatile objects works by accessing larger\n objects, such as a byte or a word.  You cannot rely on what size of\n-object is accessed in order to read or write the bitfield; it may even\n-vary for a given bitfield according to the precise usage.\n+object is accessed in order to read or write the bit-field; it may even\n+vary for a given bit-field according to the precise usage.\n \n If you care about controlling the amount of memory that is accessed, use\n-volatile but do not use bitfields.\n+volatile but do not use bit-fields.\n \n @item\n GCC comes with shell scripts to fix certain known problems in system\n@@ -1777,10 +1783,10 @@ the enumeration-valued object is inside a structure, and in that case\n you can specify a field width explicitly.\n \n @item\n-Making bitfields unsigned by default on particular machines where ``the\n+Making bit-fields unsigned by default on particular machines where ``the\n ABI standard'' says to do so.\n \n-The ISO C standard leaves it up to the implementation whether a bitfield\n+The ISO C standard leaves it up to the implementation whether a bit-field\n declared plain @code{int} is signed or not.  This in effect creates two\n alternative dialects of C.\n \n@@ -1791,19 +1797,19 @@ dialect with @option{-fsigned-bitfields} and the unsigned dialect with\n @option{-funsigned-bitfields}.  However, this leaves open the question of\n which dialect to use by default.\n \n-Currently, the preferred dialect makes plain bitfields signed, because\n+Currently, the preferred dialect makes plain bit-fields signed, because\n this is simplest.  Since @code{int} is the same as @code{signed int} in\n-every other context, it is cleanest for them to be the same in bitfields\n+every other context, it is cleanest for them to be the same in bit-fields\n as well.\n \n Some computer manufacturers have published Application Binary Interface\n-standards which specify that plain bitfields should be unsigned.  It is\n+standards which specify that plain bit-fields should be unsigned.  It is\n a mistake, however, to say anything about this issue in an ABI.  This is\n-because the handling of plain bitfields distinguishes two dialects of C.\n+because the handling of plain bit-fields distinguishes two dialects of C.\n Both dialects are meaningful on every type of machine.  Whether a\n-particular object file was compiled using signed bitfields or unsigned\n+particular object file was compiled using signed bit-fields or unsigned\n is of no concern to other object files, even if they access the same\n-bitfields in the same data structures.\n+bit-fields in the same data structures.\n \n A given program is written in one or the other of these two dialects.\n The program stands a chance to work on most any machine if it is\n@@ -1812,7 +1818,7 @@ compiled with the wrong dialect.\n \n Many users appreciate the GNU C compiler because it provides an\n environment that is uniform across machines.  These users would be\n-inconvenienced if the compiler treated plain bitfields differently on\n+inconvenienced if the compiler treated plain bit-fields differently on\n certain machines.\n \n Occasionally users write programs intended only for a particular machine\n@@ -1822,16 +1828,16 @@ that machine.  But such applications are rare.  And users writing a\n program to run on more than one type of machine cannot possibly benefit\n from this kind of compatibility.\n \n-This is why GCC does and will treat plain bitfields in the same\n+This is why GCC does and will treat plain bit-fields in the same\n fashion on all types of machines (by default).\n \n-There are some arguments for making bitfields unsigned by default on all\n+There are some arguments for making bit-fields unsigned by default on all\n machines.  If, for example, this becomes a universal de facto standard,\n it would make sense for GCC to go along with it.  This is something\n to be considered in the future.\n \n (Of course, users strongly concerned about portability should indicate\n-explicitly in each bitfield whether it is signed or not.  In this way,\n+explicitly in each bit-field whether it is signed or not.  In this way,\n they write programs which have the same meaning in both C dialects.)\n \n @item\n@@ -2942,7 +2948,7 @@ they're no longer needed.  This saves disk space.\n @item bubblestrap\n Once bootstrapped, this incrementally rebuilds each of the three stages,\n one at a time.  It does this by ``bubbling'' the stages up from their\n-stubdirectories, rebuilding them, and copying them back to their\n+subdirectories, rebuilding them, and copying them back to their\n subdirectories.  This will allow you to, for example, quickly rebuild a\n bootstrapped compiler after changing the sources, without having to do a\n full bootstrap.\n@@ -3825,7 +3831,7 @@ machine.\n @findex ONLY_INT_FIELDS\n @item ONLY_INT_FIELDS\n Define this macro to indicate that the host compiler only supports\n-@code{int} bit fields, rather than other integral types, including\n+@code{int} bit-fields, rather than other integral types, including\n @code{enum}, as do most C compilers.\n \n @findex OBSTACK_CHUNK_SIZE"}, {"sha": "3e3465091a3b8f2460adb9af6ca28c7989bc1451", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -33,7 +33,7 @@\n @settitle Installing GCC: Binaries\n @end ifset\n \n-@comment $Id: install.texi,v 1.22 2001/06/13 07:11:59 aoliva Exp $\n+@comment $Id: install.texi,v 1.23 2001/06/13 13:07:28 jsm28 Exp $\n @c Copyright (C) 2001 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n@@ -475,7 +475,7 @@ Generic MACH thread support, known to work on NEXTSTEP.\n @item os2\n IBM OS/2 thread support.\n @item posix\n-Generix POSIX thread support.\n+Generic POSIX thread support.\n @item pthreads\n Same as @samp{posix}.\n @item single\n@@ -605,7 +605,7 @@ English. Native Language Support is enabled by default if not doing a\n canadian cross build. The @option{--disable-nls} option disables NLS.\n \n @item --with-included-gettext\n-If NLS is enbled, the @option{--with-included-gettext} option causes the build\n+If NLS is enabled, the @option{--with-included-gettext} option causes the build\n procedure to prefer its copy of GNU @code{gettext}.\n \n @item --with-catgets\n@@ -2173,7 +2173,7 @@ use NLS to support locale-specific representations of various data\n formats including floating-point numbers (e.g., @samp{.}  vs @samp{,} for\n separating decimal fractions).  There have been problems reported where\n GCC does not produce the same floating-point formats that the assembler\n-expects.  If one encouters this problem, set the @env{LANG}\n+expects.  If one encounters this problem, set the @env{LANG}\n environment variable to @samp{C} or @samp{En_US}.\n \n By default, GCC for AIX 4.1 and above produces code that can be used on"}, {"sha": "72c73dd66ed5075decb275d85b4c79a28e0cc18f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -901,8 +901,8 @@ from declaring certain functions or defining certain macros that the\n ISO standard doesn't call for; this is to avoid interfering with any\n programs that might use these names for other things.\n \n-Functions which would normally be builtin but do not have semantics\n-defined by ISO C (such as @code{alloca} and @code{ffs}) are not builtin\n+Functions which would normally be built in but do not have semantics\n+defined by ISO C (such as @code{alloca} and @code{ffs}) are not built-in\n functions with @option{-ansi} is used.  @xref{Other Builtins,,Other\n built-in functions provided by GNU CC}, for details of the functions\n affected.\n@@ -991,15 +991,15 @@ switch only affects the @code{asm} and @code{typeof} keywords, since\n \n @item -fno-builtin\n @opindex fno-builtin\n-@cindex builtin functions\n-Don't recognize builtin functions that do not begin with\n+@cindex built-in functions\n+Don't recognize built-in functions that do not begin with\n @samp{__builtin_} as prefix.  @xref{Other Builtins,,Other built-in\n functions provided by GNU CC}, for details of the functions affected,\n-including those which are not builtin functions when @option{-ansi} or\n+including those which are not built-in functions when @option{-ansi} or\n @option{-std} options for strict ISO C conformance are used because they\n do not have an ISO standard meaning.\n \n-GCC normally generates special code to handle certain builtin functions\n+GCC normally generates special code to handle certain built-in functions\n more efficiently; for instance, calls to @code{alloca} may become single\n instructions that adjust the stack directly, and calls to @code{memcpy}\n may become inline copy loops.  The resulting code is often both smaller\n@@ -1009,9 +1009,9 @@ of the functions by linking with a different library.\n \n In C++, @option{-fno-builtin} is always in effect.  The @option{-fbuiltin}\n option has no effect.  Therefore, in C++, the only way to get the\n-optimization benefits of builtin functions is to call the function\n+optimization benefits of built-in functions is to call the function\n using the @samp{__builtin_} prefix.  The GNU C++ Standard Library uses\n-builtin functions to implement many functions (like\n+built-in functions to implement many functions (like\n @code{std::strchr}), so that you automatically get efficient code.\n \n @item -fhosted\n@@ -1098,7 +1098,7 @@ representation of a character, and @samp{\\a} produces a bell.\n @end itemize\n \n You may wish to use @option{-fno-builtin} as well as @option{-traditional}\n-if your program uses names that are normally GNU C builtin functions for\n+if your program uses names that are normally GNU C built-in functions for\n other purposes of its own.\n \n You cannot use @option{-traditional} if you include any header files that\n@@ -1192,12 +1192,12 @@ the negative form of @option{-funsigned-char}.  Likewise, the option\n @opindex funsigned-bitfields\n @opindex fno-signed-bitfields\n @opindex fno-unsigned-bitfields\n-These options control whether a bitfield is signed or unsigned, when the\n+These options control whether a bit-field is signed or unsigned, when the\n declaration does not use either @code{signed} or @code{unsigned}.  By\n-default, such a bitfield is signed, because this is consistent: the\n+default, such a bit-field is signed, because this is consistent: the\n basic integer types such as @code{int} are signed types.\n \n-However, when @option{-traditional} is used, bitfields are all unsigned\n+However, when @option{-traditional} is used, bit-fields are all unsigned\n no matter what.\n \n @item -fwritable-strings\n@@ -1393,7 +1393,7 @@ int and getting a pointer to member function via non-standard syntax.\n \n @item -fno-nonansi-builtins\n @opindex fno-nonansi-builtins\n-Disable builtin declarations of functions that are not mandated by\n+Disable built-in declarations of functions that are not mandated by\n ANSI/ISO C.  These include @code{ffs}, @code{alloca}, @code{_exit},\n @code{index}, @code{bzero}, @code{conjf}, and other related functions.\n \n@@ -1537,7 +1537,7 @@ Do not warn about usage of deprecated features. @xref{Deprecated Features}.\n @opindex Wno-non-template-friend\n Disable warnings when non-templatized friend functions are declared\n within a template. With the advent of explicit template specification\n-support in g++, if the name of the friend is an unqualified-id (ie,\n+support in g++, if the name of the friend is an unqualified-id (i.e.,\n @samp{friend foo(int)}), the C++ language specification demands that the\n friend declare or define an ordinary, nontemplate function. (Section\n 14.5.3). Before g++ implemented explicit specification, unqualified-ids\n@@ -2302,10 +2302,10 @@ A function-like macro that appears without arguments.\n The unary plus operator.\n \n @item\n-The `U' integer constant suffix, or the `F' or `L' floating point\n-constant suffixes.  (Traditonal C does support the `L' suffix on integer\n+The @samp{U} integer constant suffix, or the @samp{F} or @samp{L} floating point\n+constant suffixes.  (Traditional C does support the @samp{L} suffix on integer\n constants.)  Note, these suffixes appear in macros defined in the system\n-headers of most modern systems, e.g. the _MIN/_MAX macros in limits.h.\n+headers of most modern systems, e.g. the @samp{_MIN}/@samp{_MAX} macros in @code{<limits.h>}.\n Use of these macros in user code might normally lead to spurious\n warnings, however gcc's integrated preprocessor has enough context to\n avoid warning in these cases.\n@@ -2730,7 +2730,7 @@ You can examine different profiling aspects without recompilation.  Your\n executable will read a list of function names from file @file{bb.in}.\n Profiling starts when a function on the list is entered and stops when\n that invocation is exited.  To exclude a function from profiling, prefix\n-its name with `-'.  If a function name is not unique, you can\n+its name with @samp{-}.  If a function name is not unique, you can\n disambiguate it by writing it in the form\n @samp{/path/filename.d:functionname}.  Your executable will write the\n available paths and filenames in file @file{bb.out}.\n@@ -3742,7 +3742,7 @@ implicitly converting it to double precision constant.\n \n @item -frename-registers\n @opindex frename-registers\n-Attempt to avoid false dependancies in scheduled code by making use\n+Attempt to avoid false dependencies in scheduled code by making use\n of registers left over after register allocation.  This optimization\n will most benefit processors with lots of registers.  It can, however,\n make debugging impossible, since variables will no longer stay in\n@@ -4725,7 +4725,7 @@ contain startup files.  If the target supports multilibs then the\n current multilib directory will be prepended to each of these paths.\n \n @item %M\n-Output the multilib directory with directory seperators replaced with\n+Output the multilib directory with directory separators replaced with\n @samp{_}.  If multilib directories are not set, or the multilib directory is\n @file{.} then this option emits nothing.\n \n@@ -6697,11 +6697,11 @@ hardware floating is used.\n @opindex mno-bit-align\n @opindex mbit-align\n On System V.4 and embedded PowerPC systems do not (do) force structures\n-and unions that contain bit fields to be aligned to the base type of the\n-bit field.\n+and unions that contain bit-fields to be aligned to the base type of the\n+bit-field.\n \n For example, by default a structure containing nothing but 8\n-@code{unsigned} bitfields of length 1 would be aligned to a 4 byte\n+@code{unsigned} bit-fields of length 1 would be aligned to a 4 byte\n boundary and have a size of 4 bytes.  By using @option{-mno-bit-align},\n the structure would be aligned to a 1 byte boundary and be one byte in\n size.\n@@ -6950,7 +6950,7 @@ be allocated dynamically.\n @opindex mfp-arg-in-fpregs\n Use a calling sequence incompatible with the IBM calling convention in\n which floating point arguments are passed in floating point registers.\n-Note that @code{varargs.h} and @code{stdargs.h} will not work with\n+Note that @code{varargs.h} and @code{stdarg.h} will not work with\n floating point operands if this option is specified.\n \n @item -mfp-arg-in-gregs\n@@ -7395,7 +7395,7 @@ expense of more memory.\n @opindex m128bit-long-double\n Control the size of @code{long double} type. i386 application binary interface\n specify the size to be 12 bytes, while modern architectures (Pentium and newer)\n-preffer @code{long double} aligned to 8 or 16 byte boundary.  This is\n+prefer @code{long double} aligned to 8 or 16 byte boundary.  This is\n impossible to reach with 12 byte long doubles in the array accesses.\n \n @strong{Warning:} if you use the @option{-m128bit-long-double} switch, the\n@@ -8113,7 +8113,7 @@ Generate code for the SH4 without a floating-point unit.\n @item -m4-single-only\n @opindex m4-single-only\n Generate code for the SH4 with a floating-point unit that only\n-supports single-precision arithmentic.\n+supports single-precision arithmetic.\n \n @item -m4-single\n @opindex m4-single\n@@ -8719,7 +8719,7 @@ Allow arbitrary sized immediates in bit operations.\n @opindex mwide-bitfields\n @opindex mwide-bitfields\n @opindex mno-wide-bitfields\n-Always treat bitfields as int-sized.\n+Always treat bit-fields as int-sized.\n \n @item -m4byte-functions\n @itemx -m4byte-functions"}, {"sha": "0793722458b986d108c205cacb981d1a02373f63", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -2364,7 +2364,7 @@ point.\n \n @cindex @code{extv} instruction pattern\n @item @samp{extv}\n-Extract a bit field from operand 1 (a register or memory operand), where\n+Extract a bit-field from operand 1 (a register or memory operand), where\n operand 2 specifies the width in bits and operand 3 the starting bit,\n and store it in operand 0.  Operand 0 must have mode @code{word_mode}.\n Operand 1 may have mode @code{byte_mode} or @code{word_mode}; often\n@@ -2383,8 +2383,8 @@ Like @samp{extv} except that the bit-field value is zero-extended.\n \n @cindex @code{insv} instruction pattern\n @item @samp{insv}\n-Store operand 3 (which must be valid for @code{word_mode}) into a bit\n-field in operand 0, where operand 1 specifies the width in bits and\n+Store operand 3 (which must be valid for @code{word_mode}) into a\n+bit-field in operand 0, where operand 1 specifies the width in bits and\n operand 2 the starting bit.  Operand 0 may have mode @code{byte_mode} or\n @code{word_mode}; often @code{word_mode} is allowed only for registers.\n Operands 1 and 2 must be valid for @code{word_mode}.\n@@ -2844,7 +2844,7 @@ the first three are normally used by the generic mechanism.\n @cindex @code{builtin_setjmp_receiver} instruction pattern\n @item @samp{builtin_setjmp_receiver}\n This pattern, if defined, contains code needed at the site of an\n-builtin setjmp that isn't needed at the site of a nonlocal goto.  You\n+built-in setjmp that isn't needed at the site of a nonlocal goto.  You\n will not normally need to define this pattern.  A typical reason why you\n might need this pattern is if some value, such as a pointer to a global\n table, must be restored.  It takes one argument, which is the label\n@@ -2915,7 +2915,7 @@ function.\n @item @samp{trap}\n This pattern, if defined, signals an error, typically by causing some\n kind of signal to be raised.  Among other places, it is used by the Java\n-frontend to signal `invalid array index' exceptions.\n+front end to signal `invalid array index' exceptions.\n \n @cindex @code{conditional_trap} instruction pattern\n @item @samp{conditional_trap}\n@@ -3173,7 +3173,7 @@ provide low-overhead loop support.  For example, the TI TMS320C3x/C4x\n DSPs have a block repeat instruction that loads special registers to\n mark the top and end of a loop and to count the number of loop\n iterations.  This avoids the need for fetching and executing a\n-@samp{dbra}-like instruction and avoids pipeline stalls asociated with\n+@samp{dbra}-like instruction and avoids pipeline stalls associated with\n the jump.\n \n GNU CC has three special named patterns to support low overhead looping,\n@@ -3478,7 +3478,7 @@ that the pattern was not truly available.  The calling routines in the\n compiler will try other strategies for code generation using other patterns.\n \n Failure is currently supported only for binary (addition, multiplication,\n-shifting, etc.) and bitfield (@code{extv}, @code{extzv}, and @code{insv})\n+shifting, etc.) and bit-field (@code{extv}, @code{extzv}, and @code{insv})\n operations.\n @end table\n \n@@ -3590,7 +3590,7 @@ on this machine.  So it must be copied into a register with\n @end smallexample\n \n @strong{Note:} If the @code{define_expand} is used to serve a\n-standard binary or unary arithmetic operation or a bitfield operation,\n+standard binary or unary arithmetic operation or a bit-field operation,\n then the last insn it generates must not be a @code{code_label},\n @code{barrier} or @code{note}.  It must be an @code{insn},\n @code{jump_insn} or @code{call_insn}.  If you don't need a real insn"}, {"sha": "21b1fd0a10590fbc2b45fd1bc3a7269d4e7e95f2", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -216,23 +216,23 @@ The types are encoded in the following way:\n @tab @code{*}\n @item unknown type\n @tab @code{?}\n-@item bitfields\n-@tab @code{b} followed by the starting position of the bitfield, the type of the bitfield and the size of the bitfield (the bitfields encoding was changed from the NeXT's compiler encoding, see below)\n+@item bit-fields\n+@tab @code{b} followed by the starting position of the bit-field, the type of the bit-field and the size of the bit-field (the bit-fields encoding was changed from the NeXT's compiler encoding, see below)\n @end multitable\n \n @c @sp 1\n \n-The encoding of bitfields has changed to allow bitfields to be properly\n+The encoding of bit-fields has changed to allow bit-fields to be properly\n handled by the runtime functions that compute sizes and alignments of\n-types that contain bitfields. The previous encoding contained only the\n-size of the bitfield. Using only this information it is not possible to\n-reliably compute the size occupied by the bitfield. This is very\n+types that contain bit-fields. The previous encoding contained only the\n+size of the bit-field. Using only this information it is not possible to\n+reliably compute the size occupied by the bit-field. This is very\n important in the presence of the Boehm's garbage collector because the\n objects are allocated using the typed memory facility available in this\n collector. The typed memory allocation requires information about where\n the pointers are located inside the object.\n \n-The position in the bitfield is the position, counting in bits, of the\n+The position in the bit-field is the position, counting in bits, of the\n bit closest to the beginning of the structure.\n \n The non-atomic types are encoded as follows:"}, {"sha": "e243582fe3f106ee882e8bff4451d62f3cb73fd1", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -21,15 +21,15 @@ form uses nested parentheses to indicate the pointers in the internal form.\n \n @menu\n * RTL Objects::       Expressions vs vectors vs strings vs integers.\n-* RTL Classes::       Categories of RTL expresion objects, and their structure.\n+* RTL Classes::       Categories of RTL expression objects, and their structure.\n * Accessors::         Macros to access expression operands or vector elts.\n * Flags::             Other flags in an RTL expression.\n * Machine Modes::     Describing the size and format of a datum.\n * Constants::         Expressions with constant values.\n * Regs and Memory::   Expressions representing register contents or memory.\n * Arithmetic::        Expressions representing arithmetic on other expressions.\n * Comparisons::       Expressions representing comparison of expressions.\n-* Bit Fields::        Expressions representing bitfields in memory or reg.\n+* Bit-Fields::        Expressions representing bit-fields in memory or reg.\n * Vector Operations:: Expressions involving vector datatypes.\n * Conversions::       Extending, truncating, floating or fixing.\n * RTL Declarations::  Declaring volatility, constancy, etc.\n@@ -149,10 +149,10 @@ An RTX code for a non-commutative binary operation, such as @code{MINUS},\n @code{DIV}, or @code{ASHIFTRT}.\n \n @item b\n-An RTX code for a bitfield operation.  Currently only\n+An RTX code for a bit-field operation.  Currently only\n @code{ZERO_EXTRACT} and @code{SIGN_EXTRACT}.  These have three inputs\n-and are lvalues (so they can be used for insertion as well).  @xref{Bit\n-Fields}.\n+and are lvalues (so they can be used for insertion as well).\n+@xref{Bit-Fields}.\n \n @item 3\n An RTX code for other three input operations.  Currently only\n@@ -338,7 +338,7 @@ to access them.\n @section Flags in an RTL Expression\n @cindex flags in RTL expression\n \n-RTL expressions contain several flags (one-bit bitfields) and other\n+RTL expressions contain several flags (one-bit bit-fields) and other\n values that are used in certain types of expression.  Most often they\n are accessed with the following macros:\n \n@@ -1732,21 +1732,21 @@ This is currently not valid for instruction patterns and is supported only\n for insn attributes.  @xref{Insn Attributes}.\n @end table\n \n-@node Bit Fields\n-@section Bit Fields\n-@cindex bit fields\n+@node Bit-Fields\n+@section Bit-Fields\n+@cindex bit-fields\n \n-Special expression codes exist to represent bitfield instructions.\n+Special expression codes exist to represent bit-field instructions.\n These types of expressions are lvalues in RTL; they may appear\n on the left side of an assignment, indicating insertion of a value\n-into the specified bit field.\n+into the specified bit-field.\n \n @table @code\n @findex sign_extract\n @cindex @code{BITS_BIG_ENDIAN}, effect on @code{sign_extract}\n @item (sign_extract:@var{m} @var{loc} @var{size} @var{pos})\n-This represents a reference to a sign-extended bit field contained or\n-starting in @var{loc} (a memory or register reference).  The bit field\n+This represents a reference to a sign-extended bit-field contained or\n+starting in @var{loc} (a memory or register reference).  The bit-field\n is @var{size} bits wide and starts at bit @var{pos}.  The compilation\n option @code{BITS_BIG_ENDIAN} says which end of the memory unit\n @var{pos} counts from.\n@@ -1766,7 +1766,7 @@ The mode @var{m} is the same as the mode that would be used for\n @findex zero_extract\n @item (zero_extract:@var{m} @var{loc} @var{size} @var{pos})\n Like @code{sign_extract} but refers to an unsigned or zero-extended\n-bit field.  The same sequence of bits are extracted, but they\n+bit-field.  The same sequence of bits are extracted, but they\n are filled to an entire word with zeros instead of by sign-extension.\n @end table\n \n@@ -1989,7 +1989,7 @@ Use the former expression to save space during the compilation.\n \n If @var{lval} is a @code{parallel}, it is used to represent the case of\n a function returning a structure in multiple registers.  Each element\n-of the @code{paralllel} is an @code{expr_list} whose first operand is a\n+of the @code{parallel} is an @code{expr_list} whose first operand is a\n @code{reg} and whose second operand is a @code{const_int} representing the\n offset (in bytes) into the structure at which the data in that register\n corresponds.  The first element may be null to indicate that the structure\n@@ -2680,7 +2680,7 @@ The second Haifa scheduling pass, for targets that can multiple issue,\n sets the mode of an insn to @code{TImode} when it is believed that the\n instruction begins an issue group.  That is, when the instruction\n cannot issue simultaneously with the previous.  This may be relied on\n-by later passes, in particular machine-dependant reorg.\n+by later passes, in particular machine-dependent reorg.\n \n Here is a table of the extra fields of @code{insn}, @code{jump_insn}\n and @code{call_insn} insns:"}, {"sha": "2e430aec2adf89bb5a157ecace4f5b518b74fa09", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c771326b4f3a5451a0f04bc75c7eaaf67dc8e2d2", "patch": "@@ -117,7 +117,7 @@ than C.  If you do not define this macro, then the value of\n \n @findex NO_BUILTIN_SIZE_TYPE\n @item NO_BUILTIN_SIZE_TYPE\n-If this macro is defined, the preprocessor will not define the builtin macro\n+If this macro is defined, the preprocessor will not define the built-in macro\n @code{__SIZE_TYPE__}.  The macro @code{__SIZE_TYPE__} must then be defined\n by @code{CPP_SPEC} instead.\n \n@@ -127,7 +127,7 @@ be defined.\n \n @findex NO_BUILTIN_PTRDIFF_TYPE\n @item NO_BUILTIN_PTRDIFF_TYPE\n-If this macro is defined, the preprocessor will not define the builtin macro\n+If this macro is defined, the preprocessor will not define the built-in macro\n @code{__PTRDIFF_TYPE__}.  The macro @code{__PTRDIFF_TYPE__} must then be\n defined by @code{CPP_SPEC} instead.\n \n@@ -137,7 +137,7 @@ be defined.\n \n @findex NO_BUILTIN_WCHAR_TYPE\n @item NO_BUILTIN_WCHAR_TYPE\n-If this macro is defined, the preprocessor will not define the builtin macro\n+If this macro is defined, the preprocessor will not define the built-in macro\n @code{__WCHAR_TYPE__}.  The macro @code{__WCHAR_TYPE__} must then be\n defined by @code{CPP_SPEC} instead.\n \n@@ -147,7 +147,7 @@ be defined.\n \n @findex NO_BUILTIN_WINT_TYPE\n @item NO_BUILTIN_WINT_TYPE\n-If this macro is defined, the preprocessor will not define the builtin macro\n+If this macro is defined, the preprocessor will not define the built-in macro\n @code{__WINT_TYPE__}.  The macro @code{__WINT_TYPE__} must then be\n defined by @code{CPP_SPEC} instead.\n \n@@ -792,7 +792,7 @@ pointer is non-NULL it will be called once per function, before function\n compilation starts, in order to allow the target to perform any target\n specific initialisation of the @code{struct function} structure.  It is\n intended that this would be used to initialise the @code{machine} of\n-that struture.\n+that structure.\n \n @findex free_machine_status\n @item   free_machine_status\n@@ -1052,7 +1052,7 @@ make it all fit in fewer cache lines.\n \n @findex EMPTY_FIELD_BOUNDARY\n @item EMPTY_FIELD_BOUNDARY\n-Alignment in bits to be given to a structure bit field that follows an\n+Alignment in bits to be given to a structure bit-field that follows an\n empty field such as @code{int : 0;}.\n \n Note that @code{PCC_BITFIELD_TYPE_MATTERS} also affects the alignment\n@@ -1075,16 +1075,16 @@ go slower in that case, define this macro as 0.\n @findex PCC_BITFIELD_TYPE_MATTERS\n @item PCC_BITFIELD_TYPE_MATTERS\n Define this if you wish to imitate the way many other C compilers handle\n-alignment of bitfields and the structures that contain them.\n+alignment of bit-fields and the structures that contain them.\n \n-The behavior is that the type written for a bitfield (@code{int},\n+The behavior is that the type written for a bit-field (@code{int},\n @code{short}, or other integer type) imposes an alignment for the\n entire structure, as if the structure really did contain an ordinary\n-field of that type.  In addition, the bitfield is placed within the\n+field of that type.  In addition, the bit-field is placed within the\n structure so that it would fit within such a field, not crossing a\n boundary for it.\n \n-Thus, on most machines, a bitfield whose type is written as @code{int}\n+Thus, on most machines, a bit-field whose type is written as @code{int}\n would not cross a four-byte boundary, and would force four-byte\n alignment for the whole structure.  (The alignment used may not be four\n bytes; it is controlled by the other alignment parameters.)\n@@ -1093,20 +1093,20 @@ If the macro is defined, its definition should be a C expression;\n a nonzero value for the expression enables this behavior.\n \n Note that if this macro is not defined, or its value is zero, some\n-bitfields may cross more than one alignment boundary.  The compiler can\n+bit-fields may cross more than one alignment boundary.  The compiler can\n support such references if there are @samp{insv}, @samp{extv}, and\n @samp{extzv} insns that can directly reference memory.\n \n-The other known way of making bitfields work is to define\n+The other known way of making bit-fields work is to define\n @code{STRUCTURE_SIZE_BOUNDARY} as large as @code{BIGGEST_ALIGNMENT}.\n Then every structure can be accessed with fullwords.\n \n-Unless the machine has bitfield instructions or you define\n+Unless the machine has bit-field instructions or you define\n @code{STRUCTURE_SIZE_BOUNDARY} that way, you must define\n @code{PCC_BITFIELD_TYPE_MATTERS} to have a nonzero value.\n \n If your aim is to make GCC use the same conventions for laying out\n-bitfields as are used by another compiler, here is how to investigate\n+bit-fields as are used by another compiler, here is how to investigate\n what the other compiler does.  Compile and run this program:\n \n @example\n@@ -1140,7 +1140,7 @@ get from @code{PCC_BITFIELD_TYPE_MATTERS}.\n @findex BITFIELD_NBYTES_LIMITED\n @item BITFIELD_NBYTES_LIMITED\n Like PCC_BITFIELD_TYPE_MATTERS except that its effect is limited to\n-aligning a bitfield within the structure.\n+aligning a bit-field within the structure.\n \n @findex MEMBER_TYPE_FORCES_BLK\n @item MEMBER_TYPE_FORCES_BLK (@var{field})\n@@ -2646,7 +2646,7 @@ to be emitted.\n @findex SMALL_STACK\n @item SMALL_STACK\n Define this macro if the stack size for the target is very small.  This\n-has the effect of disabling gcc's builtin @samp{alloca}, though\n+has the effect of disabling gcc's built-in @samp{alloca}, though\n @samp{__builtin_alloca} is not affected.\n @end table\n \n@@ -3638,7 +3638,7 @@ arguments.  But usually, on such machines, nothing else has been pushed\n yet, because the function prologue itself does all the pushing.)  This\n region is used on machines where an argument may be passed partly in\n registers and partly in memory, and, in some cases to support the\n-features in @file{varargs.h} and @file{stdargs.h}.\n+features in @file{varargs.h} and @file{stdarg.h}.\n \n @item\n An area of memory used to save certain registers used by the function.\n@@ -3793,7 +3793,7 @@ have already been extracted from it.)  It might possibly be useful on\n some targets, but probably not.\n \n If you do not define this macro, the target-independent code in the C++\n-frontend will generate a less efficient heavyweight thunk that calls\n+front end will generate a less efficient heavyweight thunk that calls\n @var{function} instead of jumping to it.  The generic approach does\n not support varargs.\n @end table\n@@ -4768,7 +4768,7 @@ the address has become legitimate.\n If you want to change only a part of @var{x}, one standard way of doing\n this is to use @code{copy_rtx}.  Note, however, that is unshares only a\n single level of rtl.  Thus, if the part to be changed is not at the\n-top level, you'll need to replace first the top leve\n+top level, you'll need to replace first the top level.\n It is not necessary for this macro to come up with a legitimate\n address;  but often a machine-dependent strategy can generate better code.\n \n@@ -4954,7 +4954,7 @@ like:\n \n @smallexample\n #define REVERSE_CONDITION(CODE, MODE) \\\n-   ((MODE) != CCFPmode ? reverse_condtion (CODE) \\\n+   ((MODE) != CCFPmode ? reverse_condition (CODE) \\\n     : reverse_condition_maybe_unordered (CODE))\n @end smallexample\n \n@@ -5232,7 +5232,7 @@ thing to use for a given mode.  Defaults to the value of\n \n @findex USE_STORE_POST_DECREMENT\n @item USE_STORE_POST_DECREMENT (@var{mode})\n-A C expression used to determine whether a store postdeccrement is a good\n+A C expression used to determine whether a store postdecrement is a good\n thing to use for a given mode.  Defaults to the value of\n @code{HAVE_POST_DECREMENT}.\n \n@@ -5453,7 +5453,7 @@ STRING_CST node, and assign it to @samp{DECL_SECTION_NAME (@var{decl})}.\n @var{reloc} indicates whether the initial value of @var{exp} requires\n link-time relocations.  If you do not define this macro, GCC will use\n the symbol name prefixed by @samp{.} as the section name.  Note - this\n-macro can now be called for unitialised data items as well as\n+macro can now be called for uninitialised data items as well as\n initialised data and functions.\n @end table\n \n@@ -7355,7 +7355,7 @@ Here is another way of finding a particular type:\n @findex NO_DBX_FUNCTION_END\n @item NO_DBX_FUNCTION_END\n Some stabs encapsulation formats (in particular ECOFF), cannot handle the\n-@code{.stabs \"\",N_FUN,,0,0,Lscope-function-1} gdb dbx extention construct.\n+@code{.stabs \"\",N_FUN,,0,0,Lscope-function-1} gdb dbx extension construct.\n On those machines, define this macro to turn this feature off without\n disturbing the rest of the gdb extensions.\n \n@@ -7907,18 +7907,18 @@ of bits needed to represent the size of the object being shifted.  When\n this macro is non-zero, the compiler will assume that it is safe to omit\n a sign-extend, zero-extend, and certain bitwise `and' instructions that\n truncates the count of a shift operation.  On machines that have\n-instructions that act on bitfields at variable positions, which may\n+instructions that act on bit-fields at variable positions, which may\n include `bit test' instructions, a nonzero @code{SHIFT_COUNT_TRUNCATED}\n also enables deletion of truncations of the values that serve as\n-arguments to bitfield instructions.\n+arguments to bit-field instructions.\n \n If both types of instructions truncate the count (for shifts) and\n-position (for bitfield operations), or if no variable-position bitfield\n+position (for bit-field operations), or if no variable-position bit-field\n instructions exist, you should define this macro.\n \n However, on some machines, such as the 80386 and the 680x0, truncation\n only applies to shift operations and not the (real or pretended)\n-bitfield operations.  Define @code{SHIFT_COUNT_TRUNCATED} to be zero on\n+bit-field operations.  Define @code{SHIFT_COUNT_TRUNCATED} to be zero on\n such machines.  Instead, add patterns to the @file{md} file that include\n the implied truncation of the shift instructions.\n \n@@ -8144,7 +8144,7 @@ Note that the use of @code{c_lex} is specific to the C and C++\n compilers.  It will not work in the Java or Fortran compilers, or any\n other language compilers for that matter.  Thus if @code{c_lex} is going\n to be called from target-specific code, it must only be done so when\n-building hte C and C++ compilers.  This can be done by defining the\n+building the C and C++ compilers.  This can be done by defining the\n variables @code{c_target_objs} and @code{cxx_target_objs} in the\n target entry in the @code{config.gcc} file.  These variables should name\n the target-specific, language-specific object file which contains the\n@@ -8236,7 +8236,7 @@ definition.\n @findex INSERT_ATTRIBUTES\n @item INSERT_ATTRIBUTES (@var{node}, @var{attr_ptr}, @var{prefix_ptr})\n Define this macro if you want to be able to add attributes to a decl\n-when it is being created.  This is normally useful for backends which\n+when it is being created.  This is normally useful for back ends which\n wish to implement a pragma by using the attributes which correspond to\n the pragma's effect.  The @var{node} argument is the decl which is being\n created.  The @var{attr_ptr} argument is a pointer to the attribute list\n@@ -8455,7 +8455,7 @@ conditional execution instructions instead of a branch.  A value of\n @findex IFCVT_MODIFY_TESTS\n @item IFCVT_MODIFY_TESTS\n A C expression to modify the tests in @code{TRUE_EXPR}, and\n-@code{FALSE_EXPPR} for use in converting insns in @code{TEST_BB},\n+@code{FALSE_EXPR} for use in converting insns in @code{TEST_BB},\n @code{THEN_BB}, @code{ELSE_BB}, and @code{JOIN_BB} basic blocks to\n conditional execution.  Set either @code{TRUE_EXPR} or @code{FALSE_EXPR}\n to a null pointer if the tests cannot be converted.\n@@ -8479,30 +8479,30 @@ converting code to conditional execution in the basic blocks\n \n @findex MD_INIT_BUILTINS\n @item MD_INIT_BUILTINS\n-Define this macro if you have any machine-specific builtin functions that\n+Define this macro if you have any machine-specific built-in functions that\n need to be defined.  It should be a C expression that performs the\n necessary setup.\n \n-Machine specific builtins can be useful to expand special machine\n+Machine specific built-in functions can be useful to expand special machine\n instructions that would otherwise not normally be generated because\n they have no equivalent in the source language (for example, SIMD vector\n instructions or prefetch instructions).\n \n-To create a builtin function, call the function @code{builtin_function}\n-which is defined by the language frontend.  You can use any type nodes set\n+To create a built-in function, call the function @code{builtin_function}\n+which is defined by the language front end.  You can use any type nodes set\n up by @code{build_common_tree_nodes} and @code{build_common_tree_nodes_2};\n-only language frontends that use these two functions will use\n+only language front ends that use these two functions will use\n @samp{MD_INIT_BUILTINS}.\n \n @findex MD_EXPAND_BUILTIN\n @item MD_EXPAND_BUILTIN(@var{exp}, @var{target}, @var{subtarget}, @var{mode}, @var{ignore})\n \n-Expand a call to a machine specific builtin that was set up by\n+Expand a call to a machine specific built-in function that was set up by\n @samp{MD_INIT_BUILTINS}.  @var{exp} is the expression for the function call;\n the result should go to @var{target} if that is convenient, and have mode\n @var{mode} if that is convenient.  @var{subtarget} may be used as the target\n for computing one of @var{exp}'s operands. @var{ignore} is nonzero if the value\n is to be ignored.\n-This macro should return the result of the call to the builtin.\n+This macro should return the result of the call to the built-in function.\n \n @end table"}]}