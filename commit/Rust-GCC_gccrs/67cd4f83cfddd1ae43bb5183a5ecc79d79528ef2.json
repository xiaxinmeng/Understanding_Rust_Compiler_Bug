{"sha": "67cd4f83cfddd1ae43bb5183a5ecc79d79528ef2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdjZDRmODNjZmRkZDFhZTQzYmI1MTgzYTVlY2M3OWQ3OTUyOGVmMg==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-04-03T22:53:36Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-04-03T22:53:36Z"}, "message": "(const_uint32_operand): New function.\n\n(const_sint32_operand): New function.\n\nFrom-SVN: r9306", "tree": {"sha": "1fa4b8d20ed871a4c883e214ebe610659fc49ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fa4b8d20ed871a4c883e214ebe610659fc49ca0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67cd4f83cfddd1ae43bb5183a5ecc79d79528ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67cd4f83cfddd1ae43bb5183a5ecc79d79528ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67cd4f83cfddd1ae43bb5183a5ecc79d79528ef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67cd4f83cfddd1ae43bb5183a5ecc79d79528ef2/comments", "author": null, "committer": null, "parents": [{"sha": "88f63c77d975085a3f2f1c73f2fe2a187b087f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f63c77d975085a3f2f1c73f2fe2a187b087f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f63c77d975085a3f2f1c73f2fe2a187b087f84"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "b3b69b92bc4c543bb0e76d199477a77dbcaa0f4e", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67cd4f83cfddd1ae43bb5183a5ecc79d79528ef2/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67cd4f83cfddd1ae43bb5183a5ecc79d79528ef2/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=67cd4f83cfddd1ae43bb5183a5ecc79d79528ef2", "patch": "@@ -2426,3 +2426,36 @@ strict_low_part_peephole_ok (mode, first_insn, target)\n \n   return 0;\n }\n+\n+/* Accept integer operands in the range 0..0xffffffff.  We have to check the\n+   range carefully since this predicate is used in DImode contexts.  Also, we\n+   need some extra crud to make it work when hosted on 64-bit machines.  */\n+\n+int\n+const_uint32_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+#if HOST_BITS_PER_WIDE_INT > 32\n+  /* All allowed constants will fit a CONST_INT.  */\n+  return (GET_CODE (op) == CONST_INT\n+\t  && (INTVAL (op) >= 0 && INTVAL (op) <= 0xffffffffL));\n+#else\n+  return (GET_CODE (op) == CONST_INT\n+\t  || (GET_CODE (op) == CONST_DOUBLE && CONST_DOUBLE_HIGH (op) == 0));\n+#endif\n+}\n+\n+/* Accept integer operands in the range -0x80000000..0x7fffffff.  We have\n+   to check the range carefully since this predicate is used in DImode\n+   contexts.  */\n+\n+int\n+const_sint32_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  /* All allowed constants will fit a CONST_INT.  */\n+  return (GET_CODE (op) == CONST_INT\n+\t  && (INTVAL (op) >= (-0x7fffffff - 1) && INTVAL (op) <= 0x7fffffff));\n+}"}]}