{"sha": "41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlMWE3ZmZhZTllMWUwM2RjZmNhZDMwYjhkOTI1NjFiNDRlYjk3Yg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-20T12:06:26Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-20T12:06:26Z"}, "message": "[ARM][GCC][2/8x]: MVE ACLE gather load and scatter store intrinsics with writeback.\n\nThis patch supports following MVE ACLE intrinsics with writeback.\n\nvldrdq_gather_base_wb_s64, vldrdq_gather_base_wb_u64, vldrdq_gather_base_wb_z_s64,\nvldrdq_gather_base_wb_z_u64, vldrwq_gather_base_wb_f32, vldrwq_gather_base_wb_s32,\nvldrwq_gather_base_wb_u32, vldrwq_gather_base_wb_z_f32, vldrwq_gather_base_wb_z_s32,\nvldrwq_gather_base_wb_z_u32, vstrdq_scatter_base_wb_p_s64, vstrdq_scatter_base_wb_p_u64,\nvstrdq_scatter_base_wb_s64, vstrdq_scatter_base_wb_u64, vstrwq_scatter_base_wb_p_s32,\nvstrwq_scatter_base_wb_p_f32, vstrwq_scatter_base_wb_p_u32, vstrwq_scatter_base_wb_s32,\nvstrwq_scatter_base_wb_u32, vstrwq_scatter_base_wb_f32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/arm/arm-builtins.c (LDRGBWBS_QUALIFIERS): Define builtin\n\tqualifier.\n\t(LDRGBWBU_QUALIFIERS): Likewise.\n\t(LDRGBWBS_Z_QUALIFIERS): Likewise.\n\t(LDRGBWBU_Z_QUALIFIERS): Likewise.\n\t(STRSBWBS_QUALIFIERS): Likewise.\n\t(STRSBWBU_QUALIFIERS): Likewise.\n\t(STRSBWBS_P_QUALIFIERS): Likewise.\n\t(STRSBWBU_P_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vldrdq_gather_base_wb_s64): Define macro.\n\t(vldrdq_gather_base_wb_u64): Likewise.\n\t(vldrdq_gather_base_wb_z_s64): Likewise.\n\t(vldrdq_gather_base_wb_z_u64): Likewise.\n\t(vldrwq_gather_base_wb_f32): Likewise.\n\t(vldrwq_gather_base_wb_s32): Likewise.\n\t(vldrwq_gather_base_wb_u32): Likewise.\n\t(vldrwq_gather_base_wb_z_f32): Likewise.\n\t(vldrwq_gather_base_wb_z_s32): Likewise.\n\t(vldrwq_gather_base_wb_z_u32): Likewise.\n\t(vstrdq_scatter_base_wb_p_s64): Likewise.\n\t(vstrdq_scatter_base_wb_p_u64): Likewise.\n\t(vstrdq_scatter_base_wb_s64): Likewise.\n\t(vstrdq_scatter_base_wb_u64): Likewise.\n\t(vstrwq_scatter_base_wb_p_s32): Likewise.\n\t(vstrwq_scatter_base_wb_p_f32): Likewise.\n\t(vstrwq_scatter_base_wb_p_u32): Likewise.\n\t(vstrwq_scatter_base_wb_s32): Likewise.\n\t(vstrwq_scatter_base_wb_u32): Likewise.\n\t(vstrwq_scatter_base_wb_f32): Likewise.\n\t(__arm_vldrdq_gather_base_wb_s64): Define intrinsic.\n\t(__arm_vldrdq_gather_base_wb_u64): Likewise.\n\t(__arm_vldrdq_gather_base_wb_z_s64): Likewise.\n\t(__arm_vldrdq_gather_base_wb_z_u64): Likewise.\n\t(__arm_vldrwq_gather_base_wb_s32): Likewise.\n\t(__arm_vldrwq_gather_base_wb_u32): Likewise.\n\t(__arm_vldrwq_gather_base_wb_z_s32): Likewise.\n\t(__arm_vldrwq_gather_base_wb_z_u32): Likewise.\n\t(__arm_vstrdq_scatter_base_wb_s64): Likewise.\n\t(__arm_vstrdq_scatter_base_wb_u64): Likewise.\n\t(__arm_vstrdq_scatter_base_wb_p_s64): Likewise.\n\t(__arm_vstrdq_scatter_base_wb_p_u64): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_p_s32): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_p_u32): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_s32): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_u32): Likewise.\n\t(__arm_vldrwq_gather_base_wb_f32): Likewise.\n\t(__arm_vldrwq_gather_base_wb_z_f32): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_f32): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_p_f32): Likewise.\n\t(vstrwq_scatter_base_wb): Define polymorphic variant.\n\t(vstrwq_scatter_base_wb_p): Likewise.\n\t(vstrdq_scatter_base_wb_p): Likewise.\n\t(vstrdq_scatter_base_wb): Likewise.\n\t* config/arm/arm_mve_builtins.def (LDRGBWBS_QUALIFIERS): Use builtin\n\tqualifier.\n\t* config/arm/mve.md (mve_vstrwq_scatter_base_wb_<supf>v4si): Define RTL\n\tpattern.\n\t(mve_vstrwq_scatter_base_wb_add_<supf>v4si): Likewise.\n\t(mve_vstrwq_scatter_base_wb_<supf>v4si_insn): Likewise.\n\t(mve_vstrwq_scatter_base_wb_p_<supf>v4si): Likewise.\n\t(mve_vstrwq_scatter_base_wb_p_add_<supf>v4si): Likewise.\n\t(mve_vstrwq_scatter_base_wb_p_<supf>v4si_insn): Likewise.\n\t(mve_vstrwq_scatter_base_wb_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_base_wb_add_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_base_wb_fv4sf_insn): Likewise.\n\t(mve_vstrwq_scatter_base_wb_p_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_base_wb_p_add_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_base_wb_p_fv4sf_insn): Likewise.\n\t(mve_vstrdq_scatter_base_wb_<supf>v2di): Likewise.\n\t(mve_vstrdq_scatter_base_wb_add_<supf>v2di): Likewise.\n\t(mve_vstrdq_scatter_base_wb_<supf>v2di_insn): Likewise.\n\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di): Likewise.\n\t(mve_vstrdq_scatter_base_wb_p_add_<supf>v2di): Likewise.\n\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di_insn): Likewise.\n\t(mve_vldrwq_gather_base_wb_<supf>v4si): Likewise.\n\t(mve_vldrwq_gather_base_wb_<supf>v4si_insn): Likewise.\n\t(mve_vldrwq_gather_base_wb_z_<supf>v4si): Likewise.\n\t(mve_vldrwq_gather_base_wb_z_<supf>v4si_insn): Likewise.\n\t(mve_vldrwq_gather_base_wb_fv4sf): Likewise.\n\t(mve_vldrwq_gather_base_wb_fv4sf_insn): Likewise.\n\t(mve_vldrwq_gather_base_wb_z_fv4sf): Likewise.\n\t(mve_vldrwq_gather_base_wb_z_fv4sf_insn): Likewise.\n\t(mve_vldrdq_gather_base_wb_<supf>v2di): Likewise.\n\t(mve_vldrdq_gather_base_wb_<supf>v2di_insn): Likewise.\n\t(mve_vldrdq_gather_base_wb_z_<supf>v2di): Likewise.\n\t(mve_vldrdq_gather_base_wb_z_<supf>v2di_insn): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_s64.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_s64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_u64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_f32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_u32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_u32.c: Likewise.", "tree": {"sha": "44225af4f468a4837300095b4b1d4710647de3d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44225af4f468a4837300095b4b1d4710647de3d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f80065d10ece75327c30eed924c322f1e4b338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f80065d10ece75327c30eed924c322f1e4b338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f80065d10ece75327c30eed924c322f1e4b338"}], "stats": {"total": 1372, "additions": 1370, "deletions": 2}, "files": [{"sha": "ab8d421c822f95ccb41fcf49c677a8f2de9f242a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -1,3 +1,94 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/arm/arm-builtins.c (LDRGBWBS_QUALIFIERS): Define builtin\n+\tqualifier.\n+\t(LDRGBWBU_QUALIFIERS): Likewise.\n+\t(LDRGBWBS_Z_QUALIFIERS): Likewise.\n+\t(LDRGBWBU_Z_QUALIFIERS): Likewise.\n+\t(STRSBWBS_QUALIFIERS): Likewise.\n+\t(STRSBWBU_QUALIFIERS): Likewise.\n+\t(STRSBWBS_P_QUALIFIERS): Likewise.\n+\t(STRSBWBU_P_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vldrdq_gather_base_wb_s64): Define macro.\n+\t(vldrdq_gather_base_wb_u64): Likewise.\n+\t(vldrdq_gather_base_wb_z_s64): Likewise.\n+\t(vldrdq_gather_base_wb_z_u64): Likewise.\n+\t(vldrwq_gather_base_wb_f32): Likewise.\n+\t(vldrwq_gather_base_wb_s32): Likewise.\n+\t(vldrwq_gather_base_wb_u32): Likewise.\n+\t(vldrwq_gather_base_wb_z_f32): Likewise.\n+\t(vldrwq_gather_base_wb_z_s32): Likewise.\n+\t(vldrwq_gather_base_wb_z_u32): Likewise.\n+\t(vstrdq_scatter_base_wb_p_s64): Likewise.\n+\t(vstrdq_scatter_base_wb_p_u64): Likewise.\n+\t(vstrdq_scatter_base_wb_s64): Likewise.\n+\t(vstrdq_scatter_base_wb_u64): Likewise.\n+\t(vstrwq_scatter_base_wb_p_s32): Likewise.\n+\t(vstrwq_scatter_base_wb_p_f32): Likewise.\n+\t(vstrwq_scatter_base_wb_p_u32): Likewise.\n+\t(vstrwq_scatter_base_wb_s32): Likewise.\n+\t(vstrwq_scatter_base_wb_u32): Likewise.\n+\t(vstrwq_scatter_base_wb_f32): Likewise.\n+\t(__arm_vldrdq_gather_base_wb_s64): Define intrinsic.\n+\t(__arm_vldrdq_gather_base_wb_u64): Likewise.\n+\t(__arm_vldrdq_gather_base_wb_z_s64): Likewise.\n+\t(__arm_vldrdq_gather_base_wb_z_u64): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_s32): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_u32): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_z_s32): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_z_u32): Likewise.\n+\t(__arm_vstrdq_scatter_base_wb_s64): Likewise.\n+\t(__arm_vstrdq_scatter_base_wb_u64): Likewise.\n+\t(__arm_vstrdq_scatter_base_wb_p_s64): Likewise.\n+\t(__arm_vstrdq_scatter_base_wb_p_u64): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_p_s32): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_p_u32): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_s32): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_u32): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_f32): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_z_f32): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_f32): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_p_f32): Likewise.\n+\t(vstrwq_scatter_base_wb): Define polymorphic variant.\n+\t(vstrwq_scatter_base_wb_p): Likewise.\n+\t(vstrdq_scatter_base_wb_p): Likewise.\n+\t(vstrdq_scatter_base_wb): Likewise.\n+\t* config/arm/arm_mve_builtins.def (LDRGBWBS_QUALIFIERS): Use builtin\n+\tqualifier.\n+\t* config/arm/mve.md (mve_vstrwq_scatter_base_wb_<supf>v4si): Define RTL\n+\tpattern.\n+\t(mve_vstrwq_scatter_base_wb_add_<supf>v4si): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_<supf>v4si_insn): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_p_<supf>v4si): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_p_add_<supf>v4si): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_p_<supf>v4si_insn): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_add_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_fv4sf_insn): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_p_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_p_add_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_p_fv4sf_insn): Likewise.\n+\t(mve_vstrdq_scatter_base_wb_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_base_wb_add_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_base_wb_<supf>v2di_insn): Likewise.\n+\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_base_wb_p_add_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di_insn): Likewise.\n+\t(mve_vldrwq_gather_base_wb_<supf>v4si): Likewise.\n+\t(mve_vldrwq_gather_base_wb_<supf>v4si_insn): Likewise.\n+\t(mve_vldrwq_gather_base_wb_z_<supf>v4si): Likewise.\n+\t(mve_vldrwq_gather_base_wb_z_<supf>v4si_insn): Likewise.\n+\t(mve_vldrwq_gather_base_wb_fv4sf): Likewise.\n+\t(mve_vldrwq_gather_base_wb_fv4sf_insn): Likewise.\n+\t(mve_vldrwq_gather_base_wb_z_fv4sf): Likewise.\n+\t(mve_vldrwq_gather_base_wb_z_fv4sf_insn): Likewise.\n+\t(mve_vldrdq_gather_base_wb_<supf>v2di): Likewise.\n+\t(mve_vldrdq_gather_base_wb_<supf>v2di_insn): Likewise.\n+\t(mve_vldrdq_gather_base_wb_z_<supf>v2di): Likewise.\n+\t(mve_vldrdq_gather_base_wb_z_<supf>v2di_insn): Likewise.\n+\n 2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>"}, {"sha": "ecdd95fdb753be0c53f568b036df1396a8d8f485", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -718,6 +718,50 @@ arm_quinop_unone_unone_unone_unone_imm_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS \\\n   (arm_quinop_unone_unone_unone_unone_imm_unone_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_ldrgbwbs_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_unsigned, qualifier_immediate};\n+#define LDRGBWBS_QUALIFIERS (arm_ldrgbwbs_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrgbwbu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_immediate};\n+#define LDRGBWBU_QUALIFIERS (arm_ldrgbwbu_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrgbwbs_z_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_unsigned, qualifier_immediate,\n+      qualifier_unsigned};\n+#define LDRGBWBS_Z_QUALIFIERS (arm_ldrgbwbs_z_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrgbwbu_z_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_immediate,\n+      qualifier_unsigned};\n+#define LDRGBWBU_Z_QUALIFIERS (arm_ldrgbwbu_z_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strsbwbs_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned, qualifier_const, qualifier_none};\n+#define STRSBWBS_QUALIFIERS (arm_strsbwbs_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strsbwbu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned, qualifier_const, qualifier_unsigned};\n+#define STRSBWBU_QUALIFIERS (arm_strsbwbu_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strsbwbs_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned, qualifier_const,\n+      qualifier_none, qualifier_unsigned};\n+#define STRSBWBS_P_QUALIFIERS (arm_strsbwbs_p_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strsbwbu_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned, qualifier_const,\n+      qualifier_unsigned, qualifier_unsigned};\n+#define STRSBWBU_P_QUALIFIERS (arm_strsbwbu_p_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "969908b60f30184b0879d8e47d1fa01e12a7e092", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -2054,6 +2054,26 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define viwdupq_wb_u8( __a, __b,  __imm) __arm_viwdupq_wb_u8( __a, __b,  __imm)\n #define viwdupq_wb_u32( __a, __b,  __imm) __arm_viwdupq_wb_u32( __a, __b,  __imm)\n #define viwdupq_wb_u16( __a, __b,  __imm) __arm_viwdupq_wb_u16( __a, __b,  __imm)\n+#define vldrdq_gather_base_wb_s64(__addr, __offset) __arm_vldrdq_gather_base_wb_s64(__addr, __offset)\n+#define vldrdq_gather_base_wb_u64(__addr, __offset) __arm_vldrdq_gather_base_wb_u64(__addr, __offset)\n+#define vldrdq_gather_base_wb_z_s64(__addr, __offset, __p) __arm_vldrdq_gather_base_wb_z_s64(__addr, __offset, __p)\n+#define vldrdq_gather_base_wb_z_u64(__addr, __offset, __p) __arm_vldrdq_gather_base_wb_z_u64(__addr, __offset, __p)\n+#define vldrwq_gather_base_wb_f32(__addr, __offset) __arm_vldrwq_gather_base_wb_f32(__addr, __offset)\n+#define vldrwq_gather_base_wb_s32(__addr, __offset) __arm_vldrwq_gather_base_wb_s32(__addr, __offset)\n+#define vldrwq_gather_base_wb_u32(__addr, __offset) __arm_vldrwq_gather_base_wb_u32(__addr, __offset)\n+#define vldrwq_gather_base_wb_z_f32(__addr, __offset, __p) __arm_vldrwq_gather_base_wb_z_f32(__addr, __offset, __p)\n+#define vldrwq_gather_base_wb_z_s32(__addr, __offset, __p) __arm_vldrwq_gather_base_wb_z_s32(__addr, __offset, __p)\n+#define vldrwq_gather_base_wb_z_u32(__addr, __offset, __p) __arm_vldrwq_gather_base_wb_z_u32(__addr, __offset, __p)\n+#define vstrdq_scatter_base_wb_p_s64(__addr, __offset, __value, __p) __arm_vstrdq_scatter_base_wb_p_s64(__addr, __offset, __value, __p)\n+#define vstrdq_scatter_base_wb_p_u64(__addr, __offset, __value, __p) __arm_vstrdq_scatter_base_wb_p_u64(__addr, __offset, __value, __p)\n+#define vstrdq_scatter_base_wb_s64(__addr, __offset, __value) __arm_vstrdq_scatter_base_wb_s64(__addr, __offset, __value)\n+#define vstrdq_scatter_base_wb_u64(__addr, __offset, __value) __arm_vstrdq_scatter_base_wb_u64(__addr, __offset, __value)\n+#define vstrwq_scatter_base_wb_p_s32(__addr, __offset, __value, __p) __arm_vstrwq_scatter_base_wb_p_s32(__addr, __offset, __value, __p)\n+#define vstrwq_scatter_base_wb_p_f32(__addr, __offset, __value, __p) __arm_vstrwq_scatter_base_wb_p_f32(__addr, __offset, __value, __p)\n+#define vstrwq_scatter_base_wb_p_u32(__addr, __offset, __value, __p) __arm_vstrwq_scatter_base_wb_p_u32(__addr, __offset, __value, __p)\n+#define vstrwq_scatter_base_wb_s32(__addr, __offset, __value) __arm_vstrwq_scatter_base_wb_s32(__addr, __offset, __value)\n+#define vstrwq_scatter_base_wb_u32(__addr, __offset, __value) __arm_vstrwq_scatter_base_wb_u32(__addr, __offset, __value)\n+#define vstrwq_scatter_base_wb_f32(__addr, __offset, __value) __arm_vstrwq_scatter_base_wb_f32(__addr, __offset, __value)\n #endif\n \n __extension__ extern __inline void\n@@ -13388,6 +13408,150 @@ __arm_viwdupq_wb_u16 (uint32_t * __a, uint32_t __b, const int __imm)\n   return __res;\n }\n \n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_base_wb_s64 (uint64x2_t * __addr, const int __offset)\n+{\n+  int64x2_t\n+  result = __builtin_mve_vldrdq_gather_base_wb_sv2di (*__addr, __offset);\n+  __addr += __offset;\n+  return result;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_base_wb_u64 (uint64x2_t * __addr, const int __offset)\n+{\n+  uint64x2_t\n+  result = __builtin_mve_vldrdq_gather_base_wb_uv2di (*__addr, __offset);\n+  __addr += __offset;\n+  return result;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_base_wb_z_s64 (uint64x2_t * __addr, const int __offset, mve_pred16_t __p)\n+{\n+  int64x2_t\n+  result = __builtin_mve_vldrdq_gather_base_wb_z_sv2di (*__addr, __offset, __p);\n+  __addr += __offset;\n+  return result;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrdq_gather_base_wb_z_u64 (uint64x2_t * __addr, const int __offset, mve_pred16_t __p)\n+{\n+  uint64x2_t\n+  result = __builtin_mve_vldrdq_gather_base_wb_z_uv2di (*__addr, __offset, __p);\n+  __addr += __offset;\n+  return result;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_wb_s32 (uint32x4_t * __addr, const int __offset)\n+{\n+  int32x4_t\n+  result = __builtin_mve_vldrwq_gather_base_wb_sv4si (*__addr, __offset);\n+  __addr += __offset;\n+  return result;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_wb_u32 (uint32x4_t * __addr, const int __offset)\n+{\n+  uint32x4_t\n+  result = __builtin_mve_vldrwq_gather_base_wb_uv4si (*__addr, __offset);\n+  __addr += __offset;\n+  return result;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_wb_z_s32 (uint32x4_t * __addr, const int __offset, mve_pred16_t __p)\n+{\n+  int32x4_t\n+  result = __builtin_mve_vldrwq_gather_base_wb_z_sv4si (*__addr, __offset, __p);\n+  __addr += __offset;\n+  return result;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_wb_z_u32 (uint32x4_t * __addr, const int __offset, mve_pred16_t __p)\n+{\n+  uint32x4_t\n+  result = __builtin_mve_vldrwq_gather_base_wb_z_uv4si (*__addr, __offset, __p);\n+  __addr += __offset;\n+  return result;\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_base_wb_s64 (uint64x2_t * __addr, const int __offset, int64x2_t __value)\n+{\n+  __builtin_mve_vstrdq_scatter_base_wb_sv2di (*__addr, __offset, __value);\n+  __builtin_mve_vstrdq_scatter_base_wb_add_sv2di (*__addr, __offset, *__addr);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_base_wb_u64 (uint64x2_t * __addr, const int __offset, uint64x2_t __value)\n+{\n+  __builtin_mve_vstrdq_scatter_base_wb_uv2di (*__addr, __offset, __value);\n+  __builtin_mve_vstrdq_scatter_base_wb_add_uv2di (*__addr, __offset, *__addr);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_base_wb_p_s64 (uint64x2_t * __addr, const int __offset, int64x2_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrdq_scatter_base_wb_p_sv2di (*__addr, __offset, __value, __p);\n+  __builtin_mve_vstrdq_scatter_base_wb_p_add_sv2di (*__addr, __offset, *__addr, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrdq_scatter_base_wb_p_u64 (uint64x2_t * __addr, const int __offset, uint64x2_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrdq_scatter_base_wb_p_uv2di (*__addr, __offset, __value, __p);\n+  __builtin_mve_vstrdq_scatter_base_wb_p_add_uv2di (*__addr, __offset, *__addr, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_wb_p_s32 (uint32x4_t * __addr, const int __offset, int32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_base_wb_p_sv4si (*__addr, __offset, __value, __p);\n+  __builtin_mve_vstrwq_scatter_base_wb_p_add_sv4si (*__addr, __offset, *__addr, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_wb_p_u32 (uint32x4_t * __addr, const int __offset, uint32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_base_wb_p_uv4si (*__addr, __offset, __value, __p);\n+  __builtin_mve_vstrwq_scatter_base_wb_p_add_uv4si (*__addr, __offset, *__addr, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_wb_s32 (uint32x4_t * __addr, const int __offset, int32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_base_wb_sv4si (*__addr, __offset, __value);\n+  __builtin_mve_vstrwq_scatter_base_wb_add_sv4si (*__addr, __offset, *__addr);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_wb_u32 (uint32x4_t * __addr, const int __offset, uint32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_base_wb_uv4si (*__addr, __offset, __value);\n+  __builtin_mve_vstrwq_scatter_base_wb_add_uv4si (*__addr, __offset, *__addr);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -16024,6 +16188,42 @@ __arm_vreinterpretq_f32_u8 (uint8x16_t __a)\n   return (float32x4_t)  __a;\n }\n \n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_wb_f32 (uint32x4_t * __addr, const int __offset)\n+{\n+  float32x4_t\n+  result = __builtin_mve_vldrwq_gather_base_wb_fv4sf (*__addr, __offset);\n+  __addr += __offset;\n+  return result;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_wb_z_f32 (uint32x4_t * __addr, const int __offset, mve_pred16_t __p)\n+{\n+  float32x4_t\n+  result = __builtin_mve_vldrwq_gather_base_wb_z_fv4sf (*__addr, __offset, __p);\n+  __addr += __offset;\n+  return result;\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_wb_f32 (uint32x4_t * __addr, const int __offset, float32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_base_wb_fv4sf (*__addr, __offset, __value);\n+  __builtin_mve_vstrwq_scatter_base_wb_add_fv4sf (*__addr, __offset, *__addr);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_wb_p_f32 (uint32x4_t * __addr, const int __offset, float32x4_t __value, mve_pred16_t __p)\n+{\n+  __builtin_mve_vstrwq_scatter_base_wb_p_fv4sf (*__addr, __offset, __value, __p);\n+  __builtin_mve_vstrwq_scatter_base_wb_p_add_fv4sf (*__addr, __offset, *__addr, __p);\n+}\n+\n #endif\n \n enum {\n@@ -18940,8 +19140,34 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_u8_u64 (__ARM_mve_coerce(__p0, uint64x2_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t]: __arm_vreinterpretq_u8_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n \n+#define vstrwq_scatter_base_wb(p0,p1,p2) __arm_vstrwq_scatter_base_wb(p0,p1,p2)\n+#define __arm_vstrwq_scatter_base_wb(p0,p1,p2) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_base_wb_s32 (p0, p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_base_wb_u32 (p0, p1, __ARM_mve_coerce(__p2, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_base_wb_f32 (p0, p1, __ARM_mve_coerce(__p2, float32x4_t)));})\n+\n+#define vstrwq_scatter_base_wb_p(p0,p1,p2,p3) __arm_vstrwq_scatter_base_wb_p(p0,p1,p2,p3)\n+#define __arm_vstrwq_scatter_base_wb_p(p0,p1,p2,p3) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_base_wb_p_s32 (p0, p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_base_wb_p_u32 (p0, p1, __ARM_mve_coerce(__p2, uint32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_base_wb_p_f32 (p0, p1, __ARM_mve_coerce(__p2, float32x4_t), p3));})\n+\n #else /* MVE Integer.  */\n \n+#define vstrwq_scatter_base_wb(p0,p1,p2) __arm_vstrwq_scatter_base_wb(p0,p1,p2)\n+#define __arm_vstrwq_scatter_base_wb(p0,p1,p2) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_base_wb_s32 (p0, p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_base_wb_u32 (p0, p1, __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+#define vstrwq_scatter_base_wb_p(p0,p1,p2,p3) __arm_vstrwq_scatter_base_wb_p(p0,p1,p2,p3)\n+#define __arm_vstrwq_scatter_base_wb_p(p0,p1,p2,p3) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_base_wb_p_s32 (p0, p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_base_wb_p_u32 (p0, p1, __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n #define vst4q(p0,p1) __arm_vst4q(p0,p1)\n #define __arm_vst4q(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -21424,6 +21650,18 @@ extern void *__ARM_undef;\n \n #endif /* MVE Integer.  */\n \n+#define vstrdq_scatter_base_wb_p(p0,p1,p2,p3) __arm_vstrdq_scatter_base_wb_p(p0,p1,p2,p3)\n+#define __arm_vstrdq_scatter_base_wb_p(p0,p1,p2,p3) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vstrdq_scatter_base_wb_p_s64 (p0, p1, __ARM_mve_coerce(__p2, int64x2_t), p3), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vstrdq_scatter_base_wb_p_u64 (p0, p1, __ARM_mve_coerce(__p2, uint64x2_t), p3));})\n+\n+#define vstrdq_scatter_base_wb(p0,p1,p2) __arm_vstrdq_scatter_base_wb(p0,p1,p2)\n+#define __arm_vstrdq_scatter_base_wb(p0,p1,p2) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vstrdq_scatter_base_wb_s64 (p0, p1, __ARM_mve_coerce(__p2, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vstrdq_scatter_base_wb_u64 (p0, p1, __ARM_mve_coerce(__p2, uint64x2_t)));})\n+\n #define vldrdq_gather_offset(p0,p1) __arm_vldrdq_gather_offset(p0,p1)\n #define __arm_vldrdq_gather_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\"}, {"sha": "9fc0a8a0c62b22cfd6d37658831cd91704f79885", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -827,3 +827,33 @@ VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vddupq_m_n_u, v16qi, v8hi, v4si)\n VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vidupq_m_n_u, v16qi, v8hi, v4si)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, vdwdupq_n_u, v16qi, v4si, v8hi)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, viwdupq_n_u, v16qi, v4si, v8hi)\n+VAR1 (STRSBWBU, vstrwq_scatter_base_wb_u, v4si)\n+VAR1 (STRSBWBU, vstrwq_scatter_base_wb_add_u, v4si)\n+VAR1 (STRSBWBU, vstrwq_scatter_base_wb_add_s, v4si)\n+VAR1 (STRSBWBU, vstrwq_scatter_base_wb_add_f, v4sf)\n+VAR1 (STRSBWBU, vstrdq_scatter_base_wb_u, v2di)\n+VAR1 (STRSBWBU, vstrdq_scatter_base_wb_add_u, v2di)\n+VAR1 (STRSBWBU, vstrdq_scatter_base_wb_add_s, v2di)\n+VAR1 (STRSBWBU_P, vstrwq_scatter_base_wb_p_u, v4si)\n+VAR1 (STRSBWBU_P, vstrwq_scatter_base_wb_p_add_u, v4si)\n+VAR1 (STRSBWBU_P, vstrwq_scatter_base_wb_p_add_s, v4si)\n+VAR1 (STRSBWBU_P, vstrwq_scatter_base_wb_p_add_f, v4sf)\n+VAR1 (STRSBWBU_P, vstrdq_scatter_base_wb_p_u, v2di)\n+VAR1 (STRSBWBU_P, vstrdq_scatter_base_wb_p_add_u, v2di)\n+VAR1 (STRSBWBU_P, vstrdq_scatter_base_wb_p_add_s, v2di)\n+VAR1 (STRSBWBS, vstrwq_scatter_base_wb_s, v4si)\n+VAR1 (STRSBWBS, vstrwq_scatter_base_wb_f, v4sf)\n+VAR1 (STRSBWBS, vstrdq_scatter_base_wb_s, v2di)\n+VAR1 (STRSBWBS_P, vstrwq_scatter_base_wb_p_s, v4si)\n+VAR1 (STRSBWBS_P, vstrwq_scatter_base_wb_p_f, v4sf)\n+VAR1 (STRSBWBS_P, vstrdq_scatter_base_wb_p_s, v2di)\n+VAR1 (LDRGBWBU_Z, vldrwq_gather_base_wb_z_u, v4si)\n+VAR1 (LDRGBWBU_Z, vldrdq_gather_base_wb_z_u, v2di)\n+VAR1 (LDRGBWBU, vldrwq_gather_base_wb_u, v4si)\n+VAR1 (LDRGBWBU, vldrdq_gather_base_wb_u, v2di)\n+VAR1 (LDRGBWBS_Z, vldrwq_gather_base_wb_z_s, v4si)\n+VAR1 (LDRGBWBS_Z, vldrwq_gather_base_wb_z_f, v4sf)\n+VAR1 (LDRGBWBS_Z, vldrdq_gather_base_wb_z_s, v2di)\n+VAR1 (LDRGBWBS, vldrwq_gather_base_wb_s, v4si)\n+VAR1 (LDRGBWBS, vldrwq_gather_base_wb_f, v4sf)\n+VAR1 (LDRGBWBS, vldrdq_gather_base_wb_s, v2di)"}, {"sha": "a22e752f68a10417555d086e814c0be4e14f8fdb", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 581, "deletions": 2, "changes": 583, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -208,7 +208,10 @@\n \t\t\t VSTRDQSSO_U VSTRWQSO_S VSTRWQSO_U VSTRWQSSO_S\n \t\t\t VSTRWQSSO_U VSTRHQSO_F VSTRHQSSO_F VSTRWQSB_F\n \t\t\t VSTRWQSO_F VSTRWQSSO_F VDDUPQ VDDUPQ_M VDWDUPQ\n-\t\t\t VDWDUPQ_M VIDUPQ VIDUPQ_M VIWDUPQ VIWDUPQ_M])\n+\t\t\t VDWDUPQ_M VIDUPQ VIDUPQ_M VIWDUPQ VIWDUPQ_M\n+\t\t\t VSTRWQSBWB_S VSTRWQSBWB_U VLDRWQGBWB_S VLDRWQGBWB_U\n+\t\t\t VSTRWQSBWB_F VLDRWQGBWB_F VSTRDQSBWB_S VSTRDQSBWB_U\n+\t\t\t VLDRDQGBWB_S VLDRDQGBWB_U])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\") (V8HF \"V8HI\")\n \t\t\t    (V4SF \"V4SI\")])\n@@ -377,7 +380,10 @@\n \t\t       (VSTRDQSB_S \"s\") (VSTRDQSB_U \"u\") (VSTRDQSO_S \"s\")\n \t\t       (VSTRDQSO_U \"u\") (VSTRDQSSO_S \"s\") (VSTRDQSSO_U \"u\")\n \t\t       (VSTRWQSO_U \"u\") (VSTRWQSO_S \"s\") (VSTRWQSSO_U \"u\")\n-\t\t       (VSTRWQSSO_S \"s\")])\n+\t\t       (VSTRWQSSO_S \"s\") (VSTRWQSBWB_S \"s\") (VSTRWQSBWB_U \"u\")\n+\t\t       (VLDRWQGBWB_S \"s\") (VLDRWQGBWB_U \"u\") (VLDRDQGBWB_S \"s\")\n+\t\t       (VLDRDQGBWB_U \"u\") (VSTRDQSBWB_S \"s\")\n+\t\t       (VSTRDQSBWB_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -626,6 +632,10 @@\n (define_int_iterator VSTRDSSOQ [VSTRDQSSO_S VSTRDQSSO_U])\n (define_int_iterator VSTRWSOQ [VSTRWQSO_S VSTRWQSO_U])\n (define_int_iterator VSTRWSSOQ [VSTRWQSSO_S VSTRWQSSO_U])\n+(define_int_iterator VSTRWSBWBQ [VSTRWQSBWB_S VSTRWQSBWB_U])\n+(define_int_iterator VLDRWGBWBQ [VLDRWQGBWB_S VLDRWQGBWB_U])\n+(define_int_iterator VSTRDSBWBQ [VSTRDQSBWB_S VSTRDQSBWB_U])\n+(define_int_iterator VLDRDGBWBQ [VLDRDQGBWB_S VLDRDQGBWB_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -10042,3 +10052,572 @@\n   \"vpst\\;\\tviwdupt.u%#<V_sz_elem>\\t%q2, %3, %4, %5\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n+(define_expand \"mve_vstrwq_scatter_base_wb_<supf>v4si\"\n+  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+   (unspec:V4SI [(const_int 0)] VSTRWSBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vstrwq_scatter_base_wb_<supf>v4si_insn (ignore_wb, operands[0],\n+\t\t\t\t\t\t  operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vstrwq_scatter_base_wb_add_<supf>v4si\"\n+  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V4SI 2 \"s_register_operand\" \"0\")\n+   (unspec:V4SI [(const_int 0)] VSTRWSBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vstrwq_scatter_base_wb_<supf>v4si_insn (operands[0], operands[2],\n+\t\t\t\t\t\t  operands[1], ignore_vec));\n+  DONE;\n+})\n+\n+;;\n+;; [vstrwq_scatter_base_wb_s vstrdq_scatter_base_wb_u]\n+;;\n+(define_insn \"mve_vstrwq_scatter_base_wb_<supf>v4si_insn\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"0\")\n+\t\t (match_operand:SI 2 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t (match_operand:V4SI 3 \"s_register_operand\" \"w\")]\n+\t VSTRWSBWBQ))\n+   (set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_dup 1) (match_dup 2)]\n+\t VSTRWSBWBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[1];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vstrw.u32\\t%q2, [%q0, %1]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_expand \"mve_vstrwq_scatter_base_wb_p_<supf>v4si\"\n+  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V4SI [(const_int 0)] VSTRWSBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vstrwq_scatter_base_wb_p_<supf>v4si_insn (ignore_wb, operands[0],\n+\t\t\t\t\t\t    operands[1], operands[2],\n+\t\t\t\t\t\t    operands[3]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vstrwq_scatter_base_wb_p_add_<supf>v4si\"\n+  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V4SI 2 \"s_register_operand\" \"0\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V4SI [(const_int 0)] VSTRWSBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vstrwq_scatter_base_wb_p_<supf>v4si_insn (operands[0], operands[2],\n+\t\t\t\t\t\t    operands[1], ignore_vec,\n+\t\t\t\t\t\t    operands[3]));\n+  DONE;\n+})\n+\n+;;\n+;; [vstrwq_scatter_base_wb_p_s vstrwq_scatter_base_wb_p_u]\n+;;\n+(define_insn \"mve_vstrwq_scatter_base_wb_p_<supf>v4si_insn\"\n+ [(set (mem:BLK (scratch))\n+       (unspec:BLK\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"0\")\n+\t\t (match_operand:SI 2 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t (match_operand:V4SI 3 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 4 \"vpr_register_operand\")]\n+\tVSTRWSBWBQ))\n+   (set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_dup 1) (match_dup 2)]\n+\t VSTRWSBWBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[1];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vpst\\;\\tvstrwt.u32\\t%q2, [%q0, %1]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_expand \"mve_vstrwq_scatter_base_wb_fv4sf\"\n+  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V4SF 2 \"s_register_operand\" \"w\")\n+   (unspec:V4SI [(const_int 0)] VSTRWQSBWB_F)]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vstrwq_scatter_base_wb_fv4sf_insn (ignore_wb,operands[0],\n+\t\t\t\t\t     operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vstrwq_scatter_base_wb_add_fv4sf\"\n+  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V4SI 2 \"s_register_operand\" \"0\")\n+   (unspec:V4SI [(const_int 0)] VSTRWQSBWB_F)]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (V4SFmode);\n+  emit_insn (\n+  gen_mve_vstrwq_scatter_base_wb_fv4sf_insn (operands[0], operands[2],\n+\t\t\t\t\t     operands[1], ignore_vec));\n+  DONE;\n+})\n+\n+;;\n+;; [vstrwq_scatter_base_wb_f]\n+;;\n+(define_insn \"mve_vstrwq_scatter_base_wb_fv4sf_insn\"\n+ [(set (mem:BLK (scratch))\n+       (unspec:BLK\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"0\")\n+\t\t (match_operand:SI 2 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t (match_operand:V4SF 3 \"s_register_operand\" \"w\")]\n+\t VSTRWQSBWB_F))\n+   (set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_dup 1) (match_dup 2)]\n+\t VSTRWQSBWB_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[1];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vstrw.u32\\t%q2, [%q0, %1]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_expand \"mve_vstrwq_scatter_base_wb_p_fv4sf\"\n+  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V4SF 2 \"s_register_operand\" \"w\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V4SI [(const_int 0)] VSTRWQSBWB_F)]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vstrwq_scatter_base_wb_p_fv4sf_insn (ignore_wb, operands[0],\n+\t\t\t\t\t       operands[1], operands[2],\n+\t\t\t\t\t       operands[3]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vstrwq_scatter_base_wb_p_add_fv4sf\"\n+  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V4SI 2 \"s_register_operand\" \"0\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V4SI [(const_int 0)] VSTRWQSBWB_F)]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (V4SFmode);\n+  emit_insn (\n+  gen_mve_vstrwq_scatter_base_wb_p_fv4sf_insn (operands[0], operands[2],\n+\t\t\t\t\t       operands[1], ignore_vec,\n+\t\t\t\t\t       operands[3]));\n+  DONE;\n+})\n+\n+;;\n+;; [vstrwq_scatter_base_wb_p_f]\n+;;\n+(define_insn \"mve_vstrwq_scatter_base_wb_p_fv4sf_insn\"\n+ [(set (mem:BLK (scratch))\n+       (unspec:BLK\n+\t\t[(match_operand:V4SI 1 \"s_register_operand\" \"0\")\n+\t\t (match_operand:SI 2 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t (match_operand:V4SF 3 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 4 \"vpr_register_operand\")]\n+\tVSTRWQSBWB_F))\n+   (set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_dup 1) (match_dup 2)]\n+\t VSTRWQSBWB_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[1];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vpst\\;\\tvstrwt.u32\\t%q2, [%q0, %1]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_expand \"mve_vstrdq_scatter_base_wb_<supf>v2di\"\n+  [(match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n+   (unspec:V2DI [(const_int 0)] VSTRDSBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V2DImode);\n+  emit_insn (\n+  gen_mve_vstrdq_scatter_base_wb_<supf>v2di_insn (ignore_wb, operands[0],\n+\t\t\t\t\t\t  operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vstrdq_scatter_base_wb_add_<supf>v2di\"\n+  [(match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V2DI 2 \"s_register_operand\" \"0\")\n+   (unspec:V2DI [(const_int 0)] VSTRDSBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (V2DImode);\n+  emit_insn (\n+  gen_mve_vstrdq_scatter_base_wb_<supf>v2di_insn (operands[0], operands[2],\n+\t\t\t\t\t\t  operands[1], ignore_vec));\n+  DONE;\n+})\n+\n+;;\n+;; [vstrdq_scatter_base_wb_s vstrdq_scatter_base_wb_u]\n+;;\n+(define_insn \"mve_vstrdq_scatter_base_wb_<supf>v2di_insn\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t\t[(match_operand:V2DI 1 \"s_register_operand\" \"0\")\n+\t\t (match_operand:SI 2 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t (match_operand:V2DI 3 \"s_register_operand\" \"w\")]\n+\t VSTRDSBWBQ))\n+   (set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V2DI [(match_dup 1) (match_dup 2)]\n+\t VSTRDSBWBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[1];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vstrd.u64\\t%q2, [%q0, %1]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_expand \"mve_vstrdq_scatter_base_wb_p_<supf>v2di\"\n+  [(match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V2DI [(const_int 0)] VSTRDSBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V2DImode);\n+  emit_insn (\n+  gen_mve_vstrdq_scatter_base_wb_p_<supf>v2di_insn (ignore_wb, operands[0],\n+\t\t\t\t\t\t    operands[1], operands[2],\n+\t\t\t\t\t\t    operands[3]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vstrdq_scatter_base_wb_p_add_<supf>v2di\"\n+  [(match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n+   (match_operand:V2DI 2 \"s_register_operand\" \"0\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V2DI [(const_int 0)] VSTRDSBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (V2DImode);\n+  emit_insn (\n+  gen_mve_vstrdq_scatter_base_wb_p_<supf>v2di_insn (operands[0], operands[2],\n+\t\t\t\t\t\t    operands[1], ignore_vec,\n+\t\t\t\t\t\t    operands[3]));\n+  DONE;\n+})\n+\n+;;\n+;; [vstrdq_scatter_base_wb_p_s vstrdq_scatter_base_wb_p_u]\n+;;\n+(define_insn \"mve_vstrdq_scatter_base_wb_p_<supf>v2di_insn\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t\t[(match_operand:V2DI 1 \"s_register_operand\" \"0\")\n+\t\t (match_operand:SI 2 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t (match_operand:V2DI 3 \"s_register_operand\" \"w\")\n+\t\t (match_operand:HI 4 \"vpr_register_operand\")]\n+\t VSTRDSBWBQ))\n+   (set (match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V2DI [(match_dup 1) (match_dup 2)]\n+\t VSTRDSBWBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[1];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vpst\\;\\tvstrdt.u64\\t%q2, [%q0, %1]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_expand \"mve_vldrwq_gather_base_wb_<supf>v4si\"\n+  [(match_operand:V4SI 0 \"s_register_operand\")\n+   (match_operand:V4SI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (unspec:V4SI [(const_int 0)] VLDRWGBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vldrwq_gather_base_wb_<supf>v4si_insn (operands[0], ignore_wb,\n+\t\t\t\t\t\t operands[1], operands[2]));\n+  DONE;\n+})\n+\n+;;\n+;; [vldrwq_gather_base_wb_s vldrwq_gather_base_wb_u]\n+;;\n+(define_insn \"mve_vldrwq_gather_base_wb_<supf>v4si_insn\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_operand:V4SI 2 \"s_register_operand\" \"1\")\n+\t\t      (match_operand:SI 3 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t      (mem:BLK (scratch))]\n+\t VLDRWGBWBQ))\n+   (set (match_operand:V4SI 1 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_dup 2) (match_dup 3)]\n+\t VLDRWGBWBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vldrw.u32\\t%q0, [%q1, %2]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_expand \"mve_vldrwq_gather_base_wb_z_<supf>v4si\"\n+  [(match_operand:V4SI 0 \"s_register_operand\")\n+   (match_operand:V4SI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V4SI [(const_int 0)] VLDRWGBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vldrwq_gather_base_wb_z_<supf>v4si_insn (operands[0], ignore_wb,\n+\t\t\t\t\t\t   operands[1], operands[2],\n+\t\t\t\t\t\t   operands[3]));\n+  DONE;\n+})\n+\n+;;\n+;; [vldrwq_gather_base_wb_z_s vldrwq_gather_base_wb_z_u]\n+;;\n+(define_insn \"mve_vldrwq_gather_base_wb_z_<supf>v4si_insn\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_operand:V4SI 2 \"s_register_operand\" \"1\")\n+\t\t      (match_operand:SI 3 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t      (match_operand:HI 4 \"vpr_register_operand\" \"Up\")\n+\t\t      (mem:BLK (scratch))]\n+\t VLDRWGBWBQ))\n+   (set (match_operand:V4SI 1 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_dup 2) (match_dup 3)]\n+\t VLDRWGBWBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vpst\\;\\tvldrwt.u32\\t%q0, [%q1, %2]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_expand \"mve_vldrwq_gather_base_wb_fv4sf\"\n+  [(match_operand:V4SF 0 \"s_register_operand\")\n+   (match_operand:V4SI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (unspec:V4SI [(const_int 0)] VLDRWQGBWB_F)]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vldrwq_gather_base_wb_fv4sf_insn (operands[0], ignore_wb,\n+\t\t\t\t\t    operands[1], operands[2]));\n+  DONE;\n+})\n+\n+;;\n+;; [vldrwq_gather_base_wb_f]\n+;;\n+(define_insn \"mve_vldrwq_gather_base_wb_fv4sf_insn\"\n+  [(set (match_operand:V4SF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SF [(match_operand:V4SI 2 \"s_register_operand\" \"1\")\n+\t\t      (match_operand:SI 3 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t      (mem:BLK (scratch))]\n+\t VLDRWQGBWB_F))\n+   (set (match_operand:V4SI 1 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_dup 2) (match_dup 3)]\n+\t VLDRWQGBWB_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vldrw.u32\\t%q0, [%q1, %2]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_expand \"mve_vldrwq_gather_base_wb_z_fv4sf\"\n+  [(match_operand:V4SF 0 \"s_register_operand\")\n+   (match_operand:V4SI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V4SI [(const_int 0)] VLDRWQGBWB_F)]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vldrwq_gather_base_wb_z_fv4sf_insn (operands[0], ignore_wb,\n+\t\t\t\t\t      operands[1], operands[2],\n+\t\t\t\t\t      operands[3]));\n+  DONE;\n+})\n+\n+;;\n+;; [vldrwq_gather_base_wb_z_f]\n+;;\n+(define_insn \"mve_vldrwq_gather_base_wb_z_fv4sf_insn\"\n+  [(set (match_operand:V4SF 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SF [(match_operand:V4SI 2 \"s_register_operand\" \"1\")\n+\t\t      (match_operand:SI 3 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t      (match_operand:HI 4 \"vpr_register_operand\" \"Up\")\n+\t\t      (mem:BLK (scratch))]\n+\t VLDRWQGBWB_F))\n+   (set (match_operand:V4SI 1 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_dup 2) (match_dup 3)]\n+\t VLDRWQGBWB_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vpst\\;\\tvldrwt.u32\\t%q0, [%q1, %2]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_expand \"mve_vldrdq_gather_base_wb_<supf>v2di\"\n+  [(match_operand:V2DI 0 \"s_register_operand\")\n+   (match_operand:V2DI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (unspec:V2DI [(const_int 0)] VLDRDGBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V2DImode);\n+  emit_insn (\n+  gen_mve_vldrdq_gather_base_wb_<supf>v2di_insn (operands[0], ignore_wb,\n+\t\t\t\t\t\t operands[1], operands[2]));\n+  DONE;\n+})\n+\n+;;\n+;; [vldrdq_gather_base_wb_s vldrdq_gather_base_wb_u]\n+;;\n+(define_insn \"mve_vldrdq_gather_base_wb_<supf>v2di_insn\"\n+  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V2DI [(match_operand:V2DI 2 \"s_register_operand\" \"1\")\n+\t\t      (match_operand:SI 3 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t      (mem:BLK (scratch))]\n+\t VLDRDGBWBQ))\n+   (set (match_operand:V2DI 1 \"s_register_operand\" \"=&w\")\n+\t(unspec:V2DI [(match_dup 2) (match_dup 3)]\n+\t VLDRDGBWBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vldrd.64\\t%q0, [%q1, %2]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_expand \"mve_vldrdq_gather_base_wb_z_<supf>v2di\"\n+  [(match_operand:V2DI 0 \"s_register_operand\")\n+   (match_operand:V2DI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V2DI [(const_int 0)] VLDRDGBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (V2DImode);\n+  emit_insn (\n+  gen_mve_vldrdq_gather_base_wb_z_<supf>v2di_insn (operands[0], ignore_wb,\n+\t\t\t\t\t\t   operands[1], operands[2],\n+\t\t\t\t\t\t   operands[3]));\n+  DONE;\n+})\n+\n+;;\n+;; [vldrdq_gather_base_wb_z_s vldrdq_gather_base_wb_z_u]\n+;;\n+(define_insn \"mve_vldrdq_gather_base_wb_z_<supf>v2di_insn\"\n+  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V2DI [(match_operand:V2DI 2 \"s_register_operand\" \"1\")\n+\t\t      (match_operand:SI 3 \"mve_vldrd_immediate\" \"Ri\")\n+\t\t      (match_operand:HI 4 \"vpr_register_operand\" \"Up\")\n+\t\t      (mem:BLK (scratch))]\n+\t VLDRDGBWBQ))\n+   (set (match_operand:V2DI 1 \"s_register_operand\" \"=&w\")\n+\t(unspec:V2DI [(match_dup 2) (match_dup 3)]\n+\t VLDRDGBWBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[2];\n+   ops[2] = operands[3];\n+   output_asm_insn (\"vpst\\;\\tvldrdt.u64\\t%q0, [%q1, %2]!\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])"}, {"sha": "11b7afb55c376ffd02f863a2d0018d51a7522593", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -1,3 +1,33 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_s64.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_s64.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_u64.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_f32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_s32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_u32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_u32.c: Likewise.\n+\n 2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>"}, {"sha": "763a72e27ea8a5705b093883670d11f29c8ee5a5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_s64.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (uint64x2_t * addr)\n+{\n+  return vldrdq_gather_base_wb_s64 (addr, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.64\"  }  } */"}, {"sha": "df719f9bb6e40cf2ca989019c673ff30e57c0fa3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_u64.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64x2_t * addr)\n+{\n+  return vldrdq_gather_base_wb_u64 (addr, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrd.64\"  }  } */"}, {"sha": "c22adfc9e702fcb49eb8a0bf408513c3059d628b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_s64.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+#include \"arm_mve.h\"\n+\n+int64x2_t foo (uint64x2_t * addr, mve_pred16_t p)\n+{\n+    return vldrdq_gather_base_wb_z_s64 (addr, 1016, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */"}, {"sha": "385c0d92e4017b1d4ccff475286d0a0b0cac4dfd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_u64.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+#include \"arm_mve.h\"\n+\n+uint64x2_t foo (uint64x2_t * addr, mve_pred16_t p)\n+{\n+    return vldrdq_gather_base_wb_z_u64 (addr, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */"}, {"sha": "12473c3770444158f9583e6fbd24308099445cf5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_f32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (uint32x4_t * addr)\n+{\n+  return vldrwq_gather_base_wb_f32 (addr, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "619e41a3111def6f184ef06f000e51c3bae8f203", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_s32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (uint32x4_t * addr)\n+{\n+  return vldrwq_gather_base_wb_s32 (addr, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "144e7f4b0a733322850054ebde7e4c8511365b5b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_u32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t * addr)\n+{\n+  return vldrwq_gather_base_wb_u32 (addr, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "d69f9bd7f4abb956a96692b7c1f88115d55e7d3a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (uint32x4_t * addr, mve_pred16_t p)\n+{\n+  return vldrwq_gather_base_wb_z_f32 (addr, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}, {"sha": "620dec6480a0ac10e9a89d3d49c2cdb78b0b6b14", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_s32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (uint32x4_t * addr, mve_pred16_t p)\n+{\n+  return vldrwq_gather_base_wb_z_s32 (addr, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}, {"sha": "409ecf46c63a8e6a4a528281b1fdb33f9fb35478", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_u32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t * addr, mve_pred16_t p)\n+{\n+  return vldrwq_gather_base_wb_z_u32 (addr, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}, {"sha": "9fc4e3418b3ce226950d922c754d43ee9932fadf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_s64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_s64.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64x2_t * addr, const int offset, int64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_base_wb_p_s64 (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */\n+\n+void\n+foo1 (uint64x2_t * addr, const int offset, int64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_base_wb_p (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */"}, {"sha": "0434f6ded9c95f95c22ad14d95e41338ade5e2a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_u64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_u64.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64x2_t * addr, const int offset, uint64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_base_wb_p_u64 (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */\n+\n+void\n+foo1 (uint64x2_t * addr, const int offset, uint64x2_t value, mve_pred16_t p)\n+{\n+  vstrdq_scatter_base_wb_p (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */"}, {"sha": "9989564d2432913c068c73716edf03276bd93cdb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_s64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_s64.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64x2_t * addr, const int offset, int64x2_t value)\n+{\n+  vstrdq_scatter_base_wb_s64 (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */\n+\n+void\n+foo1 (uint64x2_t * addr, const int offset, int64x2_t value)\n+{\n+  vstrdq_scatter_base_wb (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */"}, {"sha": "60c71d5cb05cf8533151e2424b5f2c9f835a7290", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_u64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_u64.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint64x2_t * addr, const int offset, uint64x2_t value)\n+{\n+  vstrdq_scatter_base_wb_u64 (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */\n+\n+void\n+foo1 (uint64x2_t * addr, const int offset, uint64x2_t value)\n+{\n+  vstrdq_scatter_base_wb (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */"}, {"sha": "2bae3801eb0ecf26478fb1bfd3639ef10a066207", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_f32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t * addr, const int offset, float32x4_t value)\n+{\n+  vstrwq_scatter_base_wb_f32 (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t * addr, const int offset, float32x4_t value)\n+{\n+  vstrwq_scatter_base_wb (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */"}, {"sha": "dee941349743df37b1dcfa6152da6fac0b38cc2a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_f32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t * addr, const int offset, float32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_wb_p_f32 (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t * addr, const int offset, float32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_wb_p (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */"}, {"sha": "3a0423aa71308634cd40d74a1f7dada19660c0a4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_s32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t * addr, const int offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_wb_p_s32 (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t * addr, const int offset, int32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_wb_p (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */"}, {"sha": "32eb757be5ee523edad96a80a5bb6af4026b9057", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_u32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t * addr, const int offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_wb_p_u32 (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t * addr, const int offset, uint32x4_t value, mve_pred16_t p)\n+{\n+  vstrwq_scatter_base_wb_p (addr, 8, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */"}, {"sha": "4c232e148a8c77f34a380e3a8d3106c5bdc28eb3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_s32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t * addr, const int offset, int32x4_t value)\n+{\n+  vstrwq_scatter_base_wb_s32 (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t * addr, const int offset, int32x4_t value)\n+{\n+  vstrwq_scatter_base_wb (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */"}, {"sha": "7171a9f7c25abcb7ebcc0b250ae29e08424aa4b0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_u32.c?ref=41e1a7ffae9e1e03dcfcad30b8d92561b44eb97b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t * addr, uint32x4_t value)\n+{\n+  vstrwq_scatter_base_wb_u32 (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t * addr, uint32x4_t value)\n+{\n+  vstrwq_scatter_base_wb (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */"}]}