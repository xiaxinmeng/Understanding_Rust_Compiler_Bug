{"sha": "045d7161a0fbbde5c70c2d1aef786c578f423a61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1ZDcxNjFhMGZiYmRlNWM3MGMyZDFhZWY3ODZjNTc4ZjQyM2E2MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@multimania.com", "date": "2002-06-15T01:10:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-15T01:10:49Z"}, "message": "loop.c (check_final_value): Use v->always_executed instead of v->always_computable.\n\n\t* loop.c (check_final_value): Use v->always_executed\n\tinstead of v->always_computable.\n\t* unroll.c (final_giv_value): Don't calculate the final\n\tvalue as a function of the biv if the giv is not computed\n\tfor every loop iteration.\n\nFrom-SVN: r54634", "tree": {"sha": "32973a77f9b92a29a421bc6e7eefe35737b606cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32973a77f9b92a29a421bc6e7eefe35737b606cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/045d7161a0fbbde5c70c2d1aef786c578f423a61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045d7161a0fbbde5c70c2d1aef786c578f423a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/045d7161a0fbbde5c70c2d1aef786c578f423a61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045d7161a0fbbde5c70c2d1aef786c578f423a61/comments", "author": null, "committer": null, "parents": [{"sha": "048c86160456fc8b165ec3a9761166896d17d566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048c86160456fc8b165ec3a9761166896d17d566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048c86160456fc8b165ec3a9761166896d17d566"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "07c1bae0470a5ff254b4c57ac30ba101b218ca1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045d7161a0fbbde5c70c2d1aef786c578f423a61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045d7161a0fbbde5c70c2d1aef786c578f423a61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=045d7161a0fbbde5c70c2d1aef786c578f423a61", "patch": "@@ -1,3 +1,11 @@\n+2002-06-14  Eric Botcazou  <ebotcazou@multimania.com>\n+\n+\t* loop.c (check_final_value): Use v->always_executed\n+\tinstead of v->always_computable.\n+\t* unroll.c (final_giv_value): Don't calculate the final\n+\tvalue as a function of the biv if the giv is not computed\n+\tfor every loop iteration.\n+\n 2002-06-14  Eric Botcazou  <ebotcazou@multimania.com>\n  \n \t* loop.c (for_each_insn_in_loop): Fix formatting and comments."}, {"sha": "dc64b5c889aee274ba2c7d1a8d7b195299161225", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045d7161a0fbbde5c70c2d1aef786c578f423a61/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045d7161a0fbbde5c70c2d1aef786c578f423a61/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=045d7161a0fbbde5c70c2d1aef786c578f423a61", "patch": "@@ -5943,7 +5943,8 @@ check_final_value (loop, v)\n #endif\n \n   if ((final_value = final_giv_value (loop, v))\n-      && (v->always_computable || last_use_this_basic_block (v->dest_reg, v->insn)))\n+      && (v->always_executed\n+\t  || last_use_this_basic_block (v->dest_reg, v->insn)))\n     {\n       int biv_increment_seen = 0, before_giv_insn = 0;\n       rtx p = v->insn;"}, {"sha": "a795dcbc202c313e2f73765276fd42a36412256b", "filename": "gcc/unroll.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045d7161a0fbbde5c70c2d1aef786c578f423a61/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045d7161a0fbbde5c70c2d1aef786c578f423a61/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=045d7161a0fbbde5c70c2d1aef786c578f423a61", "patch": "@@ -3249,15 +3249,17 @@ final_giv_value (loop, v)\n \n   /* Try to calculate the final value as a function of the biv it depends\n      upon.  The only exit from the loop must be the fall through at the bottom\n-     (otherwise it may not have its final value when the loop exits).  */\n+     and the insn that sets the giv must be executed on every iteration\n+     (otherwise the giv may not have its final value when the loop exits).  */\n \n   /* ??? Can calculate the final giv value by subtracting off the\n      extra biv increments times the giv's mult_val.  The loop must have\n      only one exit for this to work, but the loop iterations does not need\n      to be known.  */\n \n   if (n_iterations != 0\n-      && ! loop->exit_count)\n+      && ! loop->exit_count\n+      && v->always_executed)\n     {\n       /* ?? It is tempting to use the biv's value here since these insns will\n \t be put after the loop, and hence the biv will have its final value"}]}