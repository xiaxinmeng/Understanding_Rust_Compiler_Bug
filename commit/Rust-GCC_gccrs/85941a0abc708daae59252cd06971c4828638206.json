{"sha": "85941a0abc708daae59252cd06971c4828638206", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5NDFhMGFiYzcwOGRhYWU1OTI1MmNkMDY5NzFjNDgyODYzODIwNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-10-28T21:41:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-10-28T21:41:24Z"}, "message": "regrename.c (regrename_optimize): Verify that all registers of a multiple register mode are available.\n\n        * regrename.c (regrename_optimize): Verify that all registers of\n        a multiple register mode are available.\n        (scan_rtx_address): Accept the mode of the address; all callers\n        changed.\n\nFrom-SVN: r37109", "tree": {"sha": "e58e6973b6a56630d65cf2dd00dbac2e105f8f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e58e6973b6a56630d65cf2dd00dbac2e105f8f94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85941a0abc708daae59252cd06971c4828638206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85941a0abc708daae59252cd06971c4828638206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85941a0abc708daae59252cd06971c4828638206", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85941a0abc708daae59252cd06971c4828638206/comments", "author": null, "committer": null, "parents": [{"sha": "7b03adc67762620f9ab06e19d4b73fe0e9e09614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b03adc67762620f9ab06e19d4b73fe0e9e09614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b03adc67762620f9ab06e19d4b73fe0e9e09614"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "75f16433f44ed384165bae0862b02c8afeac5250", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85941a0abc708daae59252cd06971c4828638206/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85941a0abc708daae59252cd06971c4828638206/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85941a0abc708daae59252cd06971c4828638206", "patch": "@@ -1,3 +1,15 @@\n+2000-10-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* recog.c (split_all_insns): Run cleanup_subreg_operands\n+\tafter reload.\n+\n+\t* regrename.c (regrename_optimize): Verify that all registers of\n+\ta multiple register mode are available.\n+\t(scan_rtx_address): Accept the mode of the address; all callers\n+\tchanged.\n+\n+\t* cpplib.c (run_directive): Fix prototype.\n+\n 2000-10-28  Bernd Schmidt  <bernds@redhat.co.uk>\n \n \t* reload.c (find_reloads): Distinguish \"wins\" so that we know whether"}, {"sha": "ffe6d422b3907cd2bae55e142929ef9856cef765", "filename": "gcc/regrename.c", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85941a0abc708daae59252cd06971c4828638206/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85941a0abc708daae59252cd06971c4828638206/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=85941a0abc708daae59252cd06971c4828638206", "patch": "@@ -87,7 +87,7 @@ static void do_replace PARAMS ((struct du_chain *, int));\n static void scan_rtx_reg PARAMS ((rtx, rtx *, enum reg_class,\n \t\t\t\t  enum scan_actions, enum op_type));\n static void scan_rtx_address PARAMS ((rtx, rtx *, enum reg_class,\n-\t\t\t\t      enum scan_actions));\n+\t\t\t\t      enum scan_actions, enum machine_mode));\n static void scan_rtx PARAMS ((rtx, rtx *, enum reg_class,\n \t\t\t      enum scan_actions, enum op_type));\n static struct du_chain *build_def_use PARAMS ((basic_block, HARD_REG_SET *));\n@@ -145,6 +145,8 @@ regrename_optimize ()\n \t  struct du_chain *tmp, *last;\n \t  HARD_REG_SET this_unavailable;\n \t  int reg = REGNO (*this->loc), treg;\n+\t  int nregs = HARD_REGNO_NREGS (reg, GET_MODE (*this->loc));\n+\t  int i;\n \n \t  all_chains = this->next_chain;\n \n@@ -183,20 +185,22 @@ regrename_optimize ()\n \t     have a closer look at each register still in there.  */\n \t  for (treg = 0; treg < FIRST_PSEUDO_REGISTER; treg++)\n \t    {\n-\t      if (TEST_HARD_REG_BIT (this_unavailable, treg)\n-\t\t  || fixed_regs[treg]\n-\t\t  || global_regs[treg]\n-\t\t  /* Can't use regs which aren't saved by the prologue.  */\n-\t\t  || (! regs_ever_live[treg]\n-\t\t      && ! call_used_regs[treg])\n+\t      for (i = nregs - 1; i >= 0; --i)\n+\t        if (TEST_HARD_REG_BIT (this_unavailable, treg+i)\n+\t\t    || fixed_regs[treg+i]\n+\t\t    || global_regs[treg+i]\n+\t\t    /* Can't use regs which aren't saved by the prologue.  */\n+\t\t    || (! regs_ever_live[treg+i] && ! call_used_regs[treg+i])\n #ifdef HARD_REGNO_RENAME_OK\n-\t\t  || ! HARD_REGNO_RENAME_OK (reg, treg)\n+\t\t    || ! HARD_REGNO_RENAME_OK (reg+i, treg+i)\n #endif\n-\t\t  )\n+\t\t    )\n+\t\t  break;\n+\t      if (i >= 0)\n \t\tcontinue;\n \n-\t\t/* See whether it accepts all modes that occur in\n-\t\t   definition and uses.  */\n+\t      /* See whether it accepts all modes that occur in\n+\t\t definition and uses.  */\n \t      for (tmp = this; tmp; tmp = tmp->next_use)\n \t\tif (! HARD_REGNO_MODE_OK (treg, GET_MODE (*tmp->loc)))\n \t\t  break;\n@@ -219,7 +223,9 @@ regrename_optimize ()\n \t      continue;\n \t    }\n \n-\t  SET_HARD_REG_BIT (unavailable, treg);\n+\t  \n+\t  for (i = nregs - 1; i >= 0; --i)\n+\t    SET_HARD_REG_BIT (unavailable, treg+i);\n \t  do_replace (this, treg);\n \n \t  if (rtl_dump_file)\n@@ -364,11 +370,12 @@ scan_rtx_reg (insn, loc, class, action, type)\n    BASE_REG_CLASS depending on how the register is being considered.  */\n \n static void\n-scan_rtx_address (insn, loc, class, action)\n+scan_rtx_address (insn, loc, class, action, mode)\n      rtx insn;\n      rtx *loc;\n      enum reg_class class;\n      enum scan_actions action;\n+     enum machine_mode mode;\n {\n   rtx x = *loc;\n   RTX_CODE code = GET_CODE (x);\n@@ -455,9 +462,9 @@ scan_rtx_address (insn, loc, class, action)\n \t  }\n \n \tif (locI)\n-\t  scan_rtx_address (insn, locI, INDEX_REG_CLASS, action);\n+\t  scan_rtx_address (insn, locI, INDEX_REG_CLASS, action, mode);\n \tif (locB)\n-\t  scan_rtx_address (insn, locB, BASE_REG_CLASS, action);\n+\t  scan_rtx_address (insn, locB, BASE_REG_CLASS, action, mode);\n \treturn;\n       }\n \n@@ -473,7 +480,8 @@ scan_rtx_address (insn, loc, class, action)\n       break;\n \n     case MEM:\n-      scan_rtx_address (insn, &XEXP (x, 0), BASE_REG_CLASS, action);\n+      scan_rtx_address (insn, &XEXP (x, 0), BASE_REG_CLASS, action,\n+\t\t\tGET_MODE (x));\n       return;\n \n     case REG:\n@@ -488,10 +496,10 @@ scan_rtx_address (insn, loc, class, action)\n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {\n       if (fmt[i] == 'e')\n-\tscan_rtx_address (insn, &XEXP (x, i), class, action);\n+\tscan_rtx_address (insn, &XEXP (x, i), class, action, mode);\n       else if (fmt[i] == 'E')\n \tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t  scan_rtx_address (insn, &XVECEXP (x, i, j), class, action);\n+\t  scan_rtx_address (insn, &XVECEXP (x, i, j), class, action, mode);\n     }\n }\n \n@@ -525,7 +533,8 @@ scan_rtx (insn, loc, class, action, type)\n       return;\n \n     case MEM:\n-      scan_rtx_address (insn, &XEXP (x, 0), BASE_REG_CLASS, action);\n+      scan_rtx_address (insn, &XEXP (x, 0), BASE_REG_CLASS, action,\n+\t\t\tGET_MODE (x));\n       return;\n \n     case SET:\n@@ -698,7 +707,7 @@ build_def_use (bb, regs_used)\n \t\tcontinue;\n \n \t      if (recog_op_alt[opn][alt].is_address)\n-\t\tscan_rtx_address (insn, loc, class, mark_read);\n+\t\tscan_rtx_address (insn, loc, class, mark_read, VOIDmode);\n \t      else\n \t\tscan_rtx (insn, loc, class, mark_read, type);\n \t    }"}]}