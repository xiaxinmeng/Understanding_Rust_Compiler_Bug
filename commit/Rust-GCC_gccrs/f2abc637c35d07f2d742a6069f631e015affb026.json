{"sha": "f2abc637c35d07f2d742a6069f631e015affb026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhYmM2MzdjMzVkMDdmMmQ3NDJhNjA2OWY2MzFlMDE1YWZmYjAyNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-10T09:21:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-10T09:21:34Z"}, "message": "[multiple changes]\n\n2009-07-10  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_disp.adb (Make_Disp_Asynchronous_Select_Body,\n\tMake_Disp_Conditional_Select_Body,\n\tMake_Disp_Timed_Select_Body): For the case of a type that is neither an\n\tinterface nor a concurrent type, the primitive body is empty. Generate\n\ta null statement so that it remains well formed.\n\n2009-07-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Build_Record_Aggr_Code): If the type has discriminants,\n\treplace references to them in defaulted component expressions with\n\treferences to the values of the discriminants of the target object.\n\nFrom-SVN: r149465", "tree": {"sha": "dd859b65ff845e9fa2059d0a267f705a67cf355c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd859b65ff845e9fa2059d0a267f705a67cf355c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2abc637c35d07f2d742a6069f631e015affb026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2abc637c35d07f2d742a6069f631e015affb026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2abc637c35d07f2d742a6069f631e015affb026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2abc637c35d07f2d742a6069f631e015affb026/comments", "author": null, "committer": null, "parents": [{"sha": "b603e37b4de24c0f1e39eb1e376baddc55f43522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b603e37b4de24c0f1e39eb1e376baddc55f43522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b603e37b4de24c0f1e39eb1e376baddc55f43522"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "39c808011289ee63d32b1311d7a993e55c232c30", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2abc637c35d07f2d742a6069f631e015affb026/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2abc637c35d07f2d742a6069f631e015affb026/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f2abc637c35d07f2d742a6069f631e015affb026", "patch": "@@ -1,3 +1,17 @@\n+2009-07-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_disp.adb (Make_Disp_Asynchronous_Select_Body,\n+\tMake_Disp_Conditional_Select_Body,\n+\tMake_Disp_Timed_Select_Body): For the case of a type that is neither an\n+\tinterface nor a concurrent type, the primitive body is empty. Generate\n+\ta null statement so that it remains well formed.\n+\n+2009-07-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Build_Record_Aggr_Code): If the type has discriminants,\n+\treplace references to them in defaulted component expressions with\n+\treferences to the values of the discriminants of the target object.\n+\n 2009-07-10  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_prag.adb (Analyze pragma, case Task_Name): Analyze argument of"}, {"sha": "3d0c2d14e04f8d04f13186d8764934ac88ec1822", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2abc637c35d07f2d742a6069f631e015affb026/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2abc637c35d07f2d742a6069f631e015affb026/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=f2abc637c35d07f2d742a6069f631e015affb026", "patch": "@@ -2379,11 +2379,35 @@ package body Exp_Aggr is\n          end if;\n       end Gen_Ctrl_Actions_For_Aggr;\n \n+      function Rewrite_Discriminant (Expr : Node_Id) return Traverse_Result;\n+      --  If the default expression of a component mentions a discriminant of\n+      --  the type, it has to be rewritten as the discriminant of the target\n+      --  object.\n+\n       function Replace_Type (Expr : Node_Id) return Traverse_Result;\n       --  If the aggregate contains a self-reference, traverse each expression\n       --  to replace a possible self-reference with a reference to the proper\n       --  component of the target of the assignment.\n \n+      --------------------------\n+      -- Rewrite_Discriminant --\n+      --------------------------\n+\n+      function Rewrite_Discriminant (Expr : Node_Id) return Traverse_Result is\n+      begin\n+         if Nkind (Expr) = N_Identifier\n+           and then Present (Entity (Expr))\n+           and then Ekind (Entity (Expr)) = E_In_Parameter\n+           and then Present (Discriminal_Link (Entity (Expr)))\n+         then\n+            Rewrite (Expr,\n+              Make_Selected_Component (Loc,\n+                Prefix => New_Occurrence_Of (Obj, Loc),\n+                Selector_Name => Make_Identifier (Loc, Chars (Expr))));\n+         end if;\n+         return OK;\n+      end Rewrite_Discriminant;\n+\n       ------------------\n       -- Replace_Type --\n       ------------------\n@@ -2430,6 +2454,9 @@ package body Exp_Aggr is\n       procedure Replace_Self_Reference is\n         new Traverse_Proc (Replace_Type);\n \n+      procedure Replace_Discriminants is\n+        new Traverse_Proc (Rewrite_Discriminant);\n+\n    --  Start of processing for Build_Record_Aggr_Code\n \n    begin\n@@ -3019,10 +3046,14 @@ package body Exp_Aggr is\n             --  Expr_Q is not delayed aggregate\n \n             else\n+               if Has_Discriminants (Typ) then\n+                  Replace_Discriminants (Expr_Q);\n+               end if;\n+\n                Instr :=\n                  Make_OK_Assignment_Statement (Loc,\n                    Name       => Comp_Expr,\n-                   Expression => Expression (Comp));\n+                   Expression =>  Expr_Q);\n \n                Set_No_Ctrl_Actions (Instr);\n                Append_To (L, Instr);"}, {"sha": "54f66919cb874206eca2c9d1d2614fdf7ea5e2ab", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2abc637c35d07f2d742a6069f631e015affb026/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2abc637c35d07f2d742a6069f631e015affb026/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=f2abc637c35d07f2d742a6069f631e015affb026", "patch": "@@ -1831,6 +1831,11 @@ package body Exp_Disp is\n                       RTE (RE_Asynchronous_Call), Loc),\n                     Make_Identifier (Loc, Name_uF))));    --  status flag\n          end if;\n+\n+      else\n+         --  Ensure that the statements list is non-empty\n+\n+         Append_To (Stmts, Make_Null_Statement (Loc));\n       end if;\n \n       return\n@@ -2199,6 +2204,11 @@ package body Exp_Disp is\n                       RTE (RE_Conditional_Call), Loc),\n                     Make_Identifier (Loc, Name_uF))));    --  status flag\n          end if;\n+\n+      else\n+         --  Ensure that the statements list is non-empty\n+\n+         Append_To (Stmts, Make_Null_Statement (Loc));\n       end if;\n \n       return\n@@ -3022,6 +3032,11 @@ package body Exp_Disp is\n                     Make_Identifier (Loc, Name_uM),       --  delay mode\n                     Make_Identifier (Loc, Name_uF))));    --  status flag\n          end if;\n+\n+      else\n+         --  Ensure that the statements list is non-empty\n+\n+         Append_To (Stmts, Make_Null_Statement (Loc));\n       end if;\n \n       return"}]}