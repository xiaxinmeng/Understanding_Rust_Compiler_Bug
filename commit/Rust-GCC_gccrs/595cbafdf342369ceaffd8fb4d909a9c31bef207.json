{"sha": "595cbafdf342369ceaffd8fb4d909a9c31bef207", "node_id": "C_kwDOANBUbNoAKDU5NWNiYWZkZjM0MjM2OWNlYWZmZDhmYjRkOTA5YTljMzFiZWYyMDc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-08-25T15:24:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-25T15:24:50Z"}, "message": "Merge #1507\n\n1507: Desugar double borrows into two HIR:BorrowExpr's r=philberty a=philberty\n\nWe simply hit a gcc_unreachable() on double borrows but it seems reasonable\r\nto just desugar the AST into a borrow of a borrow to foo. Instead of a\r\nborrow expression with a flag to be respected.\r\n\r\nFixes #1506\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "cc0e66719f83235aac3c4aa63addbc5df541404f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc0e66719f83235aac3c4aa63addbc5df541404f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/595cbafdf342369ceaffd8fb4d909a9c31bef207", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjB5RCCRBK7hj4Ov3rIwAAhU0IAIL+yDiCYRDC8izOwCJmkrH7\nKHoallhOf/CpH9u6LgSTUqTKvFktLNBZ6fA3UeXxUDM1PD1/NTBZZdu85gZHrcc4\n3ME7k8Qld6HfCgTVrmI+gRCFWj6Nj1mPyODeBaRyID6NCmQt3e0GY5ehO7QAFJWk\nDIgvUEuUNqNit7EAoLrEuebYr7TGTbuhWqDjo5qCfzpu7CyHoUUbkovyzBjD2um1\noBzsRFTXeuNUQ7VpKrih/3/VTTP02tPAvZgXY6oWLUrvDnFW17xTvJyk0hZZhjex\nHZUKsQm2IfI0pqnLohSx8i4lbWXzgPkKSbwaqb3rh/3mfrwGCN6k1qRn/3jhhrg=\n=QA0F\n-----END PGP SIGNATURE-----\n", "payload": "tree cc0e66719f83235aac3c4aa63addbc5df541404f\nparent 1416b85322cd9cd74c7a79e3270bb334ceb3a44c\nparent 727afe64d6c6ccc6c360da0707de4b2bd74a96d9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1661441090 +0000\ncommitter GitHub <noreply@github.com> 1661441090 +0000\n\nMerge #1507\n\n1507: Desugar double borrows into two HIR:BorrowExpr's r=philberty a=philberty\n\nWe simply hit a gcc_unreachable() on double borrows but it seems reasonable\r\nto just desugar the AST into a borrow of a borrow to foo. Instead of a\r\nborrow expression with a flag to be respected.\r\n\r\nFixes #1506\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595cbafdf342369ceaffd8fb4d909a9c31bef207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595cbafdf342369ceaffd8fb4d909a9c31bef207", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595cbafdf342369ceaffd8fb4d909a9c31bef207/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1416b85322cd9cd74c7a79e3270bb334ceb3a44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1416b85322cd9cd74c7a79e3270bb334ceb3a44c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1416b85322cd9cd74c7a79e3270bb334ceb3a44c"}, {"sha": "727afe64d6c6ccc6c360da0707de4b2bd74a96d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727afe64d6c6ccc6c360da0707de4b2bd74a96d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/727afe64d6c6ccc6c360da0707de4b2bd74a96d9"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "be045e930d15a4d5547322e41eb1910b35462600", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595cbafdf342369ceaffd8fb4d909a9c31bef207/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595cbafdf342369ceaffd8fb4d909a9c31bef207/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=595cbafdf342369ceaffd8fb4d909a9c31bef207", "patch": "@@ -643,10 +643,29 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n \n-    translated = new HIR::BorrowExpr (\n-      mapping, std::unique_ptr<HIR::Expr> (borrow_lvalue),\n-      expr.get_is_mut () ? Mutability::Mut : Mutability::Imm,\n-      expr.get_is_double_borrow (), expr.get_outer_attrs (), expr.get_locus ());\n+    HIR::BorrowExpr *borrow_expr\n+      = new HIR::BorrowExpr (mapping,\n+\t\t\t     std::unique_ptr<HIR::Expr> (borrow_lvalue),\n+\t\t\t     expr.get_is_mut () ? Mutability::Mut\n+\t\t\t\t\t\t: Mutability::Imm,\n+\t\t\t     expr.get_outer_attrs (), expr.get_locus ());\n+\n+    if (expr.get_is_double_borrow ())\n+      {\n+\tNodeId artifical_bouble_borrow_id = mappings->get_next_node_id ();\n+\tAnalysis::NodeMapping mapping (crate_num, artifical_bouble_borrow_id,\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       UNKNOWN_LOCAL_DEFID);\n+\n+\tborrow_expr\n+\t  = new HIR::BorrowExpr (mapping,\n+\t\t\t\t std::unique_ptr<HIR::Expr> (borrow_expr),\n+\t\t\t\t expr.get_is_mut () ? Mutability::Mut\n+\t\t\t\t\t\t    : Mutability::Imm,\n+\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n+      }\n+\n+    translated = borrow_expr;\n   }\n \n   void visit (AST::DereferenceExpr &expr) override"}, {"sha": "e173d3766743783aa484e6ea468758b65ed504d3", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595cbafdf342369ceaffd8fb4d909a9c31bef207/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595cbafdf342369ceaffd8fb4d909a9c31bef207/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=595cbafdf342369ceaffd8fb4d909a9c31bef207", "patch": "@@ -192,18 +192,17 @@ class BorrowExpr : public OperatorExpr\n \n   BorrowExpr (Analysis::NodeMapping mappings,\n \t      std::unique_ptr<Expr> borrow_lvalue, Mutability mut,\n-\t      bool is_double_borrow, AST::AttrVec outer_attribs, Location locus)\n+\t      AST::AttrVec outer_attribs, Location locus)\n     : OperatorExpr (std::move (mappings), std::move (borrow_lvalue),\n \t\t    std::move (outer_attribs), locus),\n-      mut (mut), double_borrow (is_double_borrow)\n+      mut (mut)\n   {}\n \n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRExpressionVisitor &vis) override;\n \n   Mutability get_mut () const { return mut; }\n   bool is_mut () const { return mut == Mutability::Mut; }\n-  bool get_is_double_borrow () const { return double_borrow; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather"}, {"sha": "9dc72a1472b8ac36a89166729b7eef93afd9a942", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595cbafdf342369ceaffd8fb4d909a9c31bef207/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595cbafdf342369ceaffd8fb4d909a9c31bef207/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=595cbafdf342369ceaffd8fb4d909a9c31bef207", "patch": "@@ -1209,12 +1209,6 @@ TypeCheckExpr::visit (HIR::BorrowExpr &expr)\n \t}\n     }\n \n-  if (expr.get_is_double_borrow ())\n-    {\n-      // FIXME double_reference\n-      gcc_unreachable ();\n-    }\n-\n   infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n \t\t\t\t     TyTy::TyVar (resolved_base->get_ref ()),\n \t\t\t\t     expr.get_mut ());"}, {"sha": "a38f23144ed8e5fe8042971f942a8fcef41f92f6", "filename": "gcc/testsuite/rust/compile/torture/issue-1506.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595cbafdf342369ceaffd8fb4d909a9c31bef207/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1506.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595cbafdf342369ceaffd8fb4d909a9c31bef207/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1506.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1506.rs?ref=595cbafdf342369ceaffd8fb4d909a9c31bef207", "patch": "@@ -0,0 +1,3 @@\n+pub fn main() {\n+    let _: &i32 = &&&&1;\n+}"}]}