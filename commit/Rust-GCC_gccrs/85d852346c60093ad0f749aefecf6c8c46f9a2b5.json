{"sha": "85d852346c60093ad0f749aefecf6c8c46f9a2b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkODUyMzQ2YzYwMDkzYWQwZjc0OWFlZmVjZjZjOGM0NmY5YTJiNQ==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-01-15T16:06:48Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-01-15T16:06:48Z"}, "message": "re PR c++/34052 (Trouble with variadic templates as template-template parameter)\n\n2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n\n       PR c++/34052\n       * pt.c (check_default_tmpl_args): Check for parameter packs that\n       aren't at the end of a primary template.\n       (push_template_decl_real): Remove check for parameter packs that\n       aren't at the end of a primary template; that now happens in\n       check_default_tmpl_args.\n       * semantics.c (finish_template_template_parm): Use\n       check_default_tmpl_args to check for errors in the template\n       parameter list.\n\n2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n\n       PR c++/34052\n       * g++.dg/cpp0x/vt-34052.C: New.\n       * g++.dg/template/ttp26.C: New.\n\nFrom-SVN: r131543", "tree": {"sha": "df85c718a14e09008a2a7eb84f1b28af63b29867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df85c718a14e09008a2a7eb84f1b28af63b29867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85d852346c60093ad0f749aefecf6c8c46f9a2b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d852346c60093ad0f749aefecf6c8c46f9a2b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d852346c60093ad0f749aefecf6c8c46f9a2b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d852346c60093ad0f749aefecf6c8c46f9a2b5/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4797b349c0596ce1f89e00c50269964adfaba78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4797b349c0596ce1f89e00c50269964adfaba78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4797b349c0596ce1f89e00c50269964adfaba78"}], "stats": {"total": 92, "additions": 63, "deletions": 29}, "files": [{"sha": "4125ade97577ebf147a86d7ead3c1859dd7a64a9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=85d852346c60093ad0f749aefecf6c8c46f9a2b5", "patch": "@@ -1,3 +1,15 @@\n+2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       PR c++/34052\n+       * pt.c (check_default_tmpl_args): Check for parameter packs that\n+       aren't at the end of a primary template.\n+       (push_template_decl_real): Remove check for parameter packs that\n+       aren't at the end of a primary template; that now happens in\n+       check_default_tmpl_args.\n+       * semantics.c (finish_template_template_parm): Use\n+       check_default_tmpl_args to check for errors in the template\n+       parameter list.\n+\t\n 2008-01-12  Doug Kwan  <dougkwan@google.com>\n \n \t* decl.c: (grokdeclarator): Use OPT_Wignored_qualifiers"}, {"sha": "b9c40b209b10a35bb5d22c01a9778864c5cf3517", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=85d852346c60093ad0f749aefecf6c8c46f9a2b5", "patch": "@@ -3537,10 +3537,11 @@ process_partial_specialization (tree decl)\n   return decl;\n }\n \n-/* Check that a template declaration's use of default arguments is not\n-   invalid.  Here, PARMS are the template parameters.  IS_PRIMARY is\n-   nonzero if DECL is the thing declared by a primary template.\n-   IS_PARTIAL is nonzero if DECL is a partial specialization.\n+/* Check that a template declaration's use of default arguments and\n+   parameter packs is not invalid.  Here, PARMS are the template\n+   parameters.  IS_PRIMARY is nonzero if DECL is the thing declared by\n+   a primary template.  IS_PARTIAL is nonzero if DECL is a partial\n+   specialization.\n    \n \n    IS_FRIEND_DECL is nonzero if DECL is a friend function template\n@@ -3625,6 +3626,29 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary,\n                   TREE_PURPOSE (parm) = error_mark_node;\n                   no_errors = false;\n                 }\n+\t      else if (is_primary\n+\t\t       && !is_partial\n+\t\t       && !is_friend_decl\n+\t\t       && TREE_CODE (decl) == TYPE_DECL\n+\t\t       && i < ntparms - 1\n+\t\t       && template_parameter_pack_p (TREE_VALUE (parm)))\n+\t\t{\n+\t\t  /* A primary class template can only have one\n+\t\t     parameter pack, at the end of the template\n+\t\t     parameter list.  */\n+\n+\t\t  if (TREE_CODE (TREE_VALUE (parm)) == PARM_DECL)\n+\t\t    error (\"parameter pack %qE must be at the end of the\"\n+\t\t\t   \" template parameter list\", TREE_VALUE (parm));\n+\t\t  else\n+\t\t    error (\"parameter pack %qT must be at the end of the\"\n+\t\t\t   \" template parameter list\", \n+\t\t\t   TREE_TYPE (TREE_VALUE (parm)));\n+\n+\t\t  TREE_VALUE (TREE_VEC_ELT (inner_parms, i)) \n+\t\t    = error_mark_node;\n+\t\t  no_errors = false;\n+\t\t}\n             }\n         }\n     }\n@@ -3888,31 +3912,6 @@ push_template_decl_real (tree decl, bool is_friend)\n   if (is_partial)\n     return process_partial_specialization (decl);\n \n-  /* A primary class template can only have one parameter pack, at the\n-     end of the template parameter list.  */\n-  if (primary && TREE_CODE (decl) == TYPE_DECL)\n-    {\n-      tree inner_parms \n-\t= INNERMOST_TEMPLATE_PARMS (current_template_parms);\n-      int i, len = TREE_VEC_LENGTH (inner_parms);\n-      for (i = 0; i < len - 1; i++)\n-        {\n-          tree parm = TREE_VALUE (TREE_VEC_ELT (inner_parms, i));\n-\n-\t  if (template_parameter_pack_p (parm))\n-\t    {\n-\t      if (TREE_CODE (parm) == PARM_DECL)\n-\t\terror (\"parameter pack %qE must be at the end of the\"\n-\t\t       \" template parameter list\", parm);\n-\t      else\n-\t\terror (\"parameter pack %qT must be at the end of the\"\n-\t\t       \" template parameter list\", TREE_TYPE (parm));\n-\n-\t      TREE_VALUE (TREE_VEC_ELT (inner_parms, i)) = error_mark_node;\n-\t    }\n-        }\n-    }\n-\n   args = current_template_args ();\n \n   if (!ctx"}, {"sha": "0e8c435dcc8bea46fec36e7cf39a7f56cdd07ada", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=85d852346c60093ad0f749aefecf6c8c46f9a2b5", "patch": "@@ -2191,6 +2191,10 @@ finish_template_template_parm (tree aggr, tree identifier)\n \n   gcc_assert (DECL_TEMPLATE_PARMS (tmpl));\n \n+  check_default_tmpl_args (decl, DECL_TEMPLATE_PARMS (tmpl), \n+\t\t\t   /*is_primary=*/true, /*is_partial=*/false,\n+\t\t\t   /*is_friend=*/0);\n+\n   return finish_template_type_parm (aggr, tmpl);\n }\n "}, {"sha": "7aef4010b2828a990df6fbf00fa0b46b32778745", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85d852346c60093ad0f749aefecf6c8c46f9a2b5", "patch": "@@ -1,3 +1,9 @@\n+2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       PR c++/34052\n+       * g++.dg/cpp0x/vt-34052.C: New.\n+       * g++.dg/template/ttp26.C: New.\n+\t\n 2008-01-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/rep_clause2.ad[sb]: New test."}, {"sha": "15310cfe74d07e5f80b9766d00cfccf385b0ad95", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34052.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34052.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34052.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34052.C?ref=85d852346c60093ad0f749aefecf6c8c46f9a2b5", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename... T, typename = T> struct A {}; // { dg-error \"must be at the end\" }\n+\n+\n+template<template<typename... T, typename = T> class U> struct B // { dg-error \"must be at the end\" }\n+{\n+  template<int> U<int> foo(); // { dg-error \"mismatch|constant|invalid|invalid\" }\n+};"}, {"sha": "6ba5cb28a0a6504c0a22f20e1e238347ac3af460", "filename": "gcc/testsuite/g++.dg/template/ttp26.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d852346c60093ad0f749aefecf6c8c46f9a2b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp26.C?ref=85d852346c60093ad0f749aefecf6c8c46f9a2b5", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/34052\n+template<typename T = int, typename U> class C; // { dg-error \"no default argument\" }\n+\n+template<template<typename T = int, typename U> class C> struct X; // { dg-error \"no default argument\" }\n+"}]}