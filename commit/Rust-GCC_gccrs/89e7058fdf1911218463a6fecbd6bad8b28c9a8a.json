{"sha": "89e7058fdf1911218463a6fecbd6bad8b28c9a8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODllNzA1OGZkZjE5MTEyMTg0NjNhNmZlY2JkNmJhZDhiMjhjOWE4YQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-07-10T23:12:53Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-07-10T23:12:53Z"}, "message": "rs6000.c (emit_frame_save): New.\n\n2002-07-10  Aldy Hernandez  <aldyh@redhat.com>\n\n        * config/rs6000/rs6000.c (emit_frame_save): New.\n        (rs6000_frame_related): Replace reg2 before reg.\n        (rs6000_emit_prologue): Use emit_frame_save for saving gprs, fprs,\n        and eh_return registers.\n\nFrom-SVN: r55383", "tree": {"sha": "350423308072ff00300c082e2cd0b9f9f66a48d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/350423308072ff00300c082e2cd0b9f9f66a48d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89e7058fdf1911218463a6fecbd6bad8b28c9a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e7058fdf1911218463a6fecbd6bad8b28c9a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e7058fdf1911218463a6fecbd6bad8b28c9a8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e7058fdf1911218463a6fecbd6bad8b28c9a8a/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21026f495be35294c682c6a59a904758260ebba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21026f495be35294c682c6a59a904758260ebba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21026f495be35294c682c6a59a904758260ebba1"}], "stats": {"total": 114, "additions": 71, "deletions": 43}, "files": [{"sha": "06d7826e1c12d0c387e264dad5fcb7f320a180e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e7058fdf1911218463a6fecbd6bad8b28c9a8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e7058fdf1911218463a6fecbd6bad8b28c9a8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89e7058fdf1911218463a6fecbd6bad8b28c9a8a", "patch": "@@ -1,3 +1,10 @@\n+2002-07-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * config/rs6000/rs6000.c (emit_frame_save): New.\n+        (rs6000_frame_related): Replace reg2 before reg.\n+        (rs6000_emit_prologue): Use emit_frame_save for saving gprs, fprs,\n+        and eh_return registers.\n+\n 2002-07-10  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \tRevert all patches for optimization of Complex .op. Real."}, {"sha": "a88b7f05330f0ac3981d1ace5930ddd69f3065e4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 64, "deletions": 43, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e7058fdf1911218463a6fecbd6bad8b28c9a8a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e7058fdf1911218463a6fecbd6bad8b28c9a8a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=89e7058fdf1911218463a6fecbd6bad8b28c9a8a", "patch": "@@ -140,6 +140,8 @@ static rtx rs6000_generate_compare PARAMS ((enum rtx_code));\n static void rs6000_maybe_dead PARAMS ((rtx));\n static void rs6000_emit_stack_tie PARAMS ((void));\n static void rs6000_frame_related PARAMS ((rtx, rtx, HOST_WIDE_INT, rtx, rtx));\n+static void emit_frame_save PARAMS ((rtx, rtx, enum machine_mode,\n+\t\t\t\t     unsigned int, int, int));\n static void rs6000_emit_allocate_stack PARAMS ((HOST_WIDE_INT, int));\n static unsigned rs6000_hash_constant PARAMS ((rtx));\n static unsigned toc_hash_function PARAMS ((const void *));\n@@ -8452,6 +8454,9 @@ rs6000_frame_related (insn, reg, val, reg2, rreg)\n \n   real = copy_rtx (PATTERN (insn));\n \n+  if (reg2 != NULL_RTX)\n+    real = replace_rtx (real, reg2, rreg);\n+  \n   real = replace_rtx (real, reg, \n \t\t      gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode,\n \t\t\t\t\t\t\tSTACK_POINTER_REGNUM),\n@@ -8504,9 +8509,6 @@ rs6000_frame_related (insn, reg, val, reg2, rreg)\n   else\n     abort ();\n   \n-  if (reg2 != NULL_RTX)\n-    real = replace_rtx (real, reg2, rreg);\n-  \n   RTX_FRAME_RELATED_P (insn) = 1;\n   REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n \t\t\t\t\treal,\n@@ -8575,6 +8577,53 @@ generate_set_vrsave (reg, info, epiloguep)\n   return insn;\n }\n \n+/* Save a register into the frame, and emit RTX_FRAME_RELATED_P notes.\n+   Save REGNO into [FRAME_REG + OFFSET] in mode MODE.  */\n+\n+static void\n+emit_frame_save (frame_reg, frame_ptr, mode, regno, offset, total_size)\n+     rtx frame_reg;\n+     rtx frame_ptr;\n+     enum machine_mode mode;\n+     unsigned int regno;\n+     int offset;\n+     int total_size;\n+{\n+  rtx reg, offset_rtx, insn, mem, addr, int_rtx;\n+  rtx replacea, replaceb;\n+\n+  int_rtx = GEN_INT (offset);\n+\n+  /* Some cases that need register indexed addressing.  */\n+  if ((TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n+      /* Add more cases here.  */\n+      )\n+    {\n+      /* Whomever calls us must make sure r11 is available in the\n+         flow path of instructions in the prologue.  */\n+      offset_rtx = gen_rtx_REG (Pmode, 11);\n+      emit_move_insn (offset_rtx, int_rtx);\n+\n+      replacea = offset_rtx;\n+      replaceb = int_rtx;\n+    }\n+  else\n+    {\n+      offset_rtx = int_rtx;\n+      replacea = NULL_RTX;\n+      replaceb = NULL_RTX;\n+    }\n+\n+  reg = gen_rtx_REG (mode, regno);\n+  addr = gen_rtx_PLUS (Pmode, frame_reg, offset_rtx);\n+  mem = gen_rtx_MEM (mode, addr);\n+  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\n+  insn = emit_move_insn (mem, reg);\n+\n+  rs6000_frame_related (insn, frame_ptr, total_size, replacea, replaceb);\n+}\n+\n /* Emit function prologue as insns.  */\n \n void\n@@ -8702,20 +8751,10 @@ rs6000_emit_prologue ()\n       for (i = 0; i < 64 - info->first_fp_reg_save; i++)\n \tif ((regs_ever_live[info->first_fp_reg_save+i] \n \t     && ! call_used_regs[info->first_fp_reg_save+i]))\n-\t  {\n-\t    rtx addr, reg, mem;\n-\t    reg = gen_rtx_REG (DFmode, info->first_fp_reg_save + i);\n-\t    addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-\t\t\t\t GEN_INT (info->fp_save_offset \n-\t\t\t\t\t  + sp_offset \n-\t\t\t\t\t  + 8 * i));\n-\t    mem = gen_rtx_MEM (DFmode, addr);\n-\t    set_mem_alias_set (mem, rs6000_sr_alias_set);\n-\n-\t    insn = emit_move_insn (mem, reg);\n-\t    rs6000_frame_related (insn, frame_ptr_rtx, info->total_size, \n-\t\t\t\t  NULL_RTX, NULL_RTX);\n-\t  }\n+\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx, DFmode,\n+\t\t\t   info->first_fp_reg_save + i,\n+\t\t\t   info->fp_save_offset + sp_offset + 8 * i,\n+\t\t\t   info->total_size);\n     }\n   else if (info->first_fp_reg_save != 64)\n     {\n@@ -8785,20 +8824,10 @@ rs6000_emit_prologue ()\n \t    || (i+info->first_gp_reg_save == RS6000_PIC_OFFSET_TABLE_REGNUM\n \t\t&& ((DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n \t\t    || (DEFAULT_ABI == ABI_DARWIN && flag_pic))))\n-\t  {\n-\t    rtx addr, reg, mem;\n-\t    reg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n-\t    addr = gen_rtx_PLUS (Pmode, frame_reg_rtx, \n-\t\t\t\t GEN_INT (info->gp_save_offset \n-\t\t\t\t\t  + sp_offset \n-\t\t\t\t\t  + reg_size * i));\n-\t    mem = gen_rtx_MEM (reg_mode, addr);\n-\t    set_mem_alias_set (mem, rs6000_sr_alias_set);\n-\n-\t    insn = emit_move_insn (mem, reg);\n-\t    rs6000_frame_related (insn, frame_ptr_rtx, info->total_size, \n-\t\t\t\t  NULL_RTX, NULL_RTX);\n-\t  }\n+\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx, reg_mode,\n+\t\t\t   info->first_gp_reg_save + i,\n+\t\t\t   info->gp_save_offset + sp_offset + reg_size * i,\n+\t\t\t   info->total_size);\n     }\n \n   /* ??? There's no need to emit actual instructions here, but it's the\n@@ -8809,22 +8838,14 @@ rs6000_emit_prologue ()\n \n       for (i = 0; ; ++i)\n \t{\n-\t  rtx addr, reg, mem;\n-\n \t  regno = EH_RETURN_DATA_REGNO (i);\n \t  if (regno == INVALID_REGNUM)\n \t    break;\n \n-\t  reg = gen_rtx_REG (reg_mode, regno);\n-\t  addr = plus_constant (frame_reg_rtx,\n-\t\t\t\tinfo->ehrd_offset + sp_offset\n-\t\t\t\t+ reg_size * (int) i);\n-\t  mem = gen_rtx_MEM (reg_mode, addr);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n-\n-\t  insn = emit_move_insn (mem, reg);\n-\t  rs6000_frame_related (insn, frame_ptr_rtx, info->total_size, \n-\t\t\t\tNULL_RTX, NULL_RTX);\n+\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx, reg_mode, regno,\n+\t\t\t   info->ehrd_offset + sp_offset\n+\t\t\t   + reg_size * (int) i,\n+\t\t\t   info->total_size);\n \t}\n     }\n "}]}