{"sha": "39434bce6c165c21aa4226e860eaee9aa9efdbcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk0MzRiY2U2YzE2NWMyMWFhNDIyNmU4NjBlYWVlOWFhOWVmZGJjZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-02-20T19:40:14Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-02-20T19:40:14Z"}, "message": "lto-partition.c (add_symbol_to_partition_1, [...]): Aliases have no defined size.\n\n\n\t* lto-partition.c (add_symbol_to_partition_1,\n\tundo_partition, lto_balanced_map): Aliases have no\n\tdefined size.\n\t(lto_balanced_map): Do not follow refering variables\n\tif they can be optimized out.\n\nFrom-SVN: r207967", "tree": {"sha": "22fc0608899d441a62331836ae31204af56c2bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22fc0608899d441a62331836ae31204af56c2bd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39434bce6c165c21aa4226e860eaee9aa9efdbcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39434bce6c165c21aa4226e860eaee9aa9efdbcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39434bce6c165c21aa4226e860eaee9aa9efdbcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39434bce6c165c21aa4226e860eaee9aa9efdbcf/comments", "author": null, "committer": null, "parents": [{"sha": "672ce9397b78c077e21d785a2ddf9fffd51a1952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672ce9397b78c077e21d785a2ddf9fffd51a1952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672ce9397b78c077e21d785a2ddf9fffd51a1952"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "b1a40553f5a3458667f455db0dd6b526cf973441", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39434bce6c165c21aa4226e860eaee9aa9efdbcf/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39434bce6c165c21aa4226e860eaee9aa9efdbcf/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=39434bce6c165c21aa4226e860eaee9aa9efdbcf", "patch": "@@ -1,3 +1,11 @@\n+2014-02-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto-partition.c (add_symbol_to_partition_1,\n+\tundo_partition, lto_balanced_map): Aliases have no\n+\tdefined size.\n+\t(lto_balanced_map): Do not follow refering variables\n+\tif they can be optimized out.\n+\n 2014-02-14  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/60179"}, {"sha": "1ee5fbb851e4fcb81f29b3be424254b4c0b72b53", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39434bce6c165c21aa4226e860eaee9aa9efdbcf/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39434bce6c165c21aa4226e860eaee9aa9efdbcf/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=39434bce6c165c21aa4226e860eaee9aa9efdbcf", "patch": "@@ -149,7 +149,8 @@ add_symbol_to_partition_1 (ltrans_partition part, symtab_node *node)\n   if (cgraph_node *cnode = dyn_cast <cgraph_node> (node))\n     {\n       struct cgraph_edge *e;\n-      part->insns += inline_summary (cnode)->self_size;\n+      if (!node->alias)\n+        part->insns += inline_summary (cnode)->self_size;\n \n       /* Add all inline clones and callees that are duplicated.  */\n       for (e = cnode->callees; e; e = e->next_callee)\n@@ -244,13 +245,14 @@ undo_partition (ltrans_partition partition, unsigned int n_nodes)\n     {\n       symtab_node *node = lto_symtab_encoder_deref (partition->encoder,\n \t\t\t\t\t\t   n_nodes);\n+      cgraph_node *cnode;\n \n       /* After UNDO we no longer know what was visited.  */\n       if (partition->initializers_visited)\n \tpointer_set_destroy (partition->initializers_visited);\n       partition->initializers_visited = NULL;\n \n-      if (cgraph_node *cnode = dyn_cast <cgraph_node> (node))\n+      if (!node->alias && (cnode = dyn_cast <cgraph_node> (node)))\n         partition->insns -= inline_summary (cnode)->self_size;\n       lto_symtab_encoder_delete_node (partition->encoder, node);\n       node->aux = (void *)((size_t)node->aux - 1);\n@@ -439,7 +441,8 @@ lto_balanced_map (void)\n     if (symtab_get_symbol_partitioning_class (node) == SYMBOL_PARTITION)\n       {\n \torder[n_nodes++] = node;\n-\ttotal_size += inline_summary (node)->size;\n+\tif (!node->alias)\n+\t  total_size += inline_summary (node)->size;\n       }\n \n   /* Streaming works best when the source units do not cross partition\n@@ -495,7 +498,8 @@ lto_balanced_map (void)\n \t  }\n \n       add_symbol_to_partition (partition, order[i]);\n-      total_size -= inline_summary (order[i])->size;\n+      if (!order[i]->alias)\n+        total_size -= inline_summary (order[i])->size;\n \t  \n \n       /* Once we added a new node to the partition, we also want to add\n@@ -613,7 +617,11 @@ lto_balanced_map (void)\n \n \t\tvnode = ipa_ref_referring_varpool_node (ref);\n \t\tgcc_assert (vnode->definition);\n+\t\t/* It is better to couple variables with their users, because it allows them\n+\t\t   to be removed.  Coupling with objects they refer to only helps to reduce\n+\t\t   number of symbols promoted to hidden.  */\n \t\tif (!symbol_partitioned_p (vnode) && flag_toplevel_reorder\n+\t\t    && !varpool_can_remove_if_no_refs (vnode)\n \t\t    && symtab_get_symbol_partitioning_class (vnode) == SYMBOL_PARTITION)\n \t\t  add_symbol_to_partition (partition, vnode);\n \t\tindex = lto_symtab_encoder_lookup (partition->encoder,"}]}