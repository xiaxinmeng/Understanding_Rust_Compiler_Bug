{"sha": "5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ2M2M3MjZlYmJkNjliZjA4ZmEwZDhkOThlMWYzMTc4MWMxZWFhNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-17T15:38:58Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-17T15:38:58Z"}, "message": "h8300.c (h8300_init_once): Use MASK_H8300S_1 instead of MASK_H8300S.\n\n\t* config/h8300/h8300.c (h8300_init_once): Use MASK_H8300S_1\n\tinstead of MASK_H8300S.\n\t* config/h8300/h8300.h (target_flags, MASK_H8300S, MASK_MAC,\n\tMASK_INT32, MASK_ADDRESSES, MASK_QUICKCALL, MASK_SLOWBYTE,\n\tMASK_NORMAL_MODE, MASK_RELAX, MASK_H8300H, MASK_ALIGN_300,\n\tMASK_H8300SX, TARGET_INT32, TARGET_ADDRESSES,\n\tTARGET_QUICKCALL, TARGET_SLOWBYTE, TARGET_H8300H,\n\tTARGET_H8300XS, TARGET_NORMAL_MODE, TARGET_ALIGN_300,\n\tTARGET_SWITCHES): Remove.\n\t(TARGET_H8300S): Redefine interms of TARGET_H8300S_1 and\n\tTARGET_H8300SX.\n\t* config/h8300/h8300.opt: New.\n\nFrom-SVN: r96616", "tree": {"sha": "136e44ea598067115a537dbe172963ba89b6937e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/136e44ea598067115a537dbe172963ba89b6937e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7/comments", "author": null, "committer": null, "parents": [{"sha": "d8e978472c145fe7052390c671a59f4d008e6f06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e978472c145fe7052390c671a59f4d008e6f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e978472c145fe7052390c671a59f4d008e6f06"}], "stats": {"total": 132, "additions": 59, "deletions": 73}, "files": [{"sha": "182567deda8259483f4ed1679eb7f7aba799f517", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7", "patch": "@@ -1,3 +1,18 @@\n+2005-03-17  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c (h8300_init_once): Use MASK_H8300S_1\n+\tinstead of MASK_H8300S.\n+\t* config/h8300/h8300.h (target_flags, MASK_H8300S, MASK_MAC,\n+\tMASK_INT32, MASK_ADDRESSES, MASK_QUICKCALL, MASK_SLOWBYTE,\n+\tMASK_NORMAL_MODE, MASK_RELAX, MASK_H8300H, MASK_ALIGN_300,\n+\tMASK_H8300SX, TARGET_INT32, TARGET_ADDRESSES,\n+\tTARGET_QUICKCALL, TARGET_SLOWBYTE, TARGET_H8300H,\n+\tTARGET_H8300XS, TARGET_NORMAL_MODE, TARGET_ALIGN_300,\n+\tTARGET_SWITCHES): Remove.\n+\t(TARGET_H8300S): Redefine interms of TARGET_H8300S_1 and\n+\tTARGET_H8300SX.\n+\t* config/h8300/h8300.opt: New.\n+\n 2005-03-17  Ian Lance Taylor  <ian@airs.com>\n \n \t* gmon.c: Remove."}, {"sha": "36734b2bf37ea4fe1d211b77e11c466e0f306343", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7", "patch": "@@ -356,7 +356,7 @@ h8300_init_once (void)\n   if (!TARGET_H8300S && TARGET_MAC)\n     {\n       error (\"-ms2600 is used without -ms\");\n-      target_flags |= MASK_H8300S;\n+      target_flags |= MASK_H8300S_1;\n     }\n \n   if (TARGET_H8300 && TARGET_NORMAL_MODE)"}, {"sha": "7730519aed56922ec35ef4e3926eba0d95778598", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 72, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7", "patch": "@@ -96,86 +96,15 @@ extern const char * const *h8_reg_names;\n \n #define TARGET_VERSION fprintf (stderr, \" (Renesas H8/300)\");\n \n-/* Run-time compilation parameters selecting different hardware subsets.  */\n-\n-extern int target_flags;\n-\n-/* Masks for the -m switches.  */\n-#define MASK_H8300S\t\t0x00000001\n-#define MASK_MAC\t\t0x00000002\n-#define MASK_INT32\t\t0x00000008\n-#define MASK_ADDRESSES\t\t0x00000040\n-#define MASK_QUICKCALL\t\t0x00000080\n-#define MASK_SLOWBYTE\t\t0x00000100\n-#define MASK_NORMAL_MODE \t0x00000200\n-#define MASK_RELAX\t\t0x00000400\n-#define MASK_H8300H\t\t0x00001000\n-#define MASK_ALIGN_300\t\t0x00002000\n-#define MASK_H8300SX\t\t0x00004000\n-\n /* Macros used in the machine description to test the flags.  */\n \n-/* Make int's 32 bits.  */\n-#define TARGET_INT32 (target_flags & MASK_INT32)\n-\n-/* Dump recorded insn lengths into the output file.  This helps debug the\n-   md file.  */\n-#define TARGET_ADDRESSES (target_flags & MASK_ADDRESSES)\n-\n-/* Pass the first few arguments in registers.  */\n-#define TARGET_QUICKCALL (target_flags & MASK_QUICKCALL)\n-\n-/* Pretend byte accesses are slow.  */\n-#define TARGET_SLOWBYTE (target_flags & MASK_SLOWBYTE)\n-\n /* Select between the H8/300 and H8/300H CPUs.  */\n #define TARGET_H8300\t(! TARGET_H8300H && ! TARGET_H8300S)\n-#define TARGET_H8300H\t(target_flags & MASK_H8300H)\n-#define TARGET_H8300S\t(target_flags & (MASK_H8300S | MASK_H8300SX))\n-#define TARGET_H8300SX\t(target_flags & MASK_H8300SX)\n+#define TARGET_H8300S\t(TARGET_H8300S_1 || TARGET_H8300SX)\n /* Some multiply instructions are not available in all H8SX variants.\n    Use this macro instead of TARGET_H8300SX to indicate this, even\n    though we don't actually generate different code for now.  */\n #define TARGET_H8300SXMUL TARGET_H8300SX\n-#define TARGET_NORMAL_MODE (target_flags & MASK_NORMAL_MODE)\n-\n-/* mac register and relevant instructions are available.  */\n-#define TARGET_MAC    (target_flags & MASK_MAC)\n-\n-/* Align all values on the H8/300H the same way as the H8/300.  Specifically,\n-   32 bit and larger values are aligned on 16 bit boundaries.\n-   This is all the hardware requires, but the default is 32 bits for the H8/300H.\n-   ??? Now watch someone add hardware floating point requiring 32 bit\n-   alignment.  */\n-#define TARGET_ALIGN_300 (target_flags & MASK_ALIGN_300)\n-\n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t    \\\n-{ {\"s\",\t\t\t MASK_H8300S, N_(\"Generate H8S code\")},\t\t    \\\n-  {\"no-s\",\t\t-MASK_H8300S, N_(\"Do not generate H8S code\")},\t    \\\n-  {\"sx\",\t\t MASK_H8300SX, N_(\"Generate H8SX code\")},\t    \\\n-  {\"no-sx\",\t\t-MASK_H8300SX, N_(\"Do not generate H8SX code\")},    \\\n-  {\"s2600\",\t\t MASK_MAC, N_(\"Generate H8S/2600 code\")},\t    \\\n-  {\"no-s2600\",\t\t-MASK_MAC, N_(\"Do not generate H8S/2600 code\")},    \\\n-  {\"int32\",\t\t MASK_INT32, N_(\"Make integers 32 bits wide\")},\t    \\\n-  {\"addresses\",\t\t MASK_ADDRESSES, NULL},\t\t\t\t    \\\n-  {\"quickcall\",\t\t MASK_QUICKCALL,\t\t\t\t    \\\n-   N_(\"Use registers for argument passing\")},\t\t\t\t    \\\n-  {\"no-quickcall\",\t-MASK_QUICKCALL,\t\t\t\t    \\\n-   N_(\"Do not use registers for argument passing\")},\t\t\t    \\\n-  {\"slowbyte\",\t\t MASK_SLOWBYTE,\t\t\t\t\t    \\\n-   N_(\"Consider access to byte sized memory slow\")},\t\t\t    \\\n-  {\"relax\",\t\t MASK_RELAX, N_(\"Enable linker relaxing\")},\t    \\\n-  {\"h\",\t\t\t MASK_H8300H, N_(\"Generate H8/300H code\")},\t    \\\n-  {\"n\",\t\t\t MASK_NORMAL_MODE, N_(\"Enable the normal mode\")},   \\\n-  {\"no-h\",\t\t-MASK_H8300H, N_(\"Do not generate H8/300H code\")},  \\\n-  {\"align-300\",\t\t MASK_ALIGN_300, N_(\"Use H8/300 alignment rules\")}, \\\n-  { \"\",\t\t\t TARGET_DEFAULT, NULL}}\n \n #ifdef IN_LIBGCC2\n #undef TARGET_H8300H"}, {"sha": "bab46e3aa15f18b831f72d427f0e93e45d9953af", "filename": "gcc/config/h8300/h8300.opt", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7/gcc%2Fconfig%2Fh8300%2Fh8300.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7/gcc%2Fconfig%2Fh8300%2Fh8300.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.opt?ref=5463c726ebbd69bf08fa0d8d98e1f31781c1eaa7", "patch": "@@ -0,0 +1,42 @@\n+ms\n+Target Mask(H8300S_1)\n+Generate H8S code\n+\n+msx\n+Target Mask(H8300SX)\n+Generate H8SX code\n+\n+ms2600\n+Target Mask(MAC)\n+Generate H8S/2600 code\n+\n+mint32\n+Target RejectNegative Mask(INT32)\n+Make integers 32 bits wide\n+\n+maddresses\n+Target Undocumented RejectNegative Mask(ADDRESSES)\n+\n+mquickcall\n+Target Mask(QUICKCALL)\n+Use registers for argument passing\n+\n+mslowbyte\n+Target RejectNegative Mask(SLOWBYTE)\n+Consider access to byte sized memory slow\n+\n+mrelax\n+Target RejectNegative Mask(RELAX)\n+Enable linker relaxing\n+\n+mh\n+Target Mask(H8300H)\n+Generate H8/300H code\n+\n+mn\n+Target Mask(NORMAL_MODE)\n+Enable the normal mode\n+\n+malign-300\n+Target RejectNegative Mask(ALIGN_300)\n+Use H8/300 alignment rules"}]}