{"sha": "1d776353135272b1fcb7453ae9c8bd4fafd9bd07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ3NzYzNTMxMzUyNzJiMWZjYjc0NTNhZTljOGJkNGZhZmQ5YmQwNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-07-05T09:25:45Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-07-05T09:25:45Z"}, "message": "tree-ssa-alias.c (alias_stats): Add nonoverlapping_component_refs_since_match_p_must_overlap.\n\n\n\t* tree-ssa-alias.c (alias_stats): Add\n\tnonoverlapping_component_refs_since_match_p_must_overlap.\n\t(dump_alias_stats): Print it.\n\t(nonoverlapping_component_refs_since_match_p): Add early exit.\n\t(nonoverlapping_component_refs_p): Do not account early exit.\n\nFrom-SVN: r273133", "tree": {"sha": "0ed23fe3bca457a739d14dfef07d897e5be94ee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ed23fe3bca457a739d14dfef07d897e5be94ee0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d776353135272b1fcb7453ae9c8bd4fafd9bd07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d776353135272b1fcb7453ae9c8bd4fafd9bd07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d776353135272b1fcb7453ae9c8bd4fafd9bd07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d776353135272b1fcb7453ae9c8bd4fafd9bd07/comments", "author": null, "committer": null, "parents": [{"sha": "4500f7510368cdb24b8afcc66e86e09cafe49199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4500f7510368cdb24b8afcc66e86e09cafe49199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4500f7510368cdb24b8afcc66e86e09cafe49199"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "d568b08e3a48a307ed5967da8849a35aecbbc3df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d776353135272b1fcb7453ae9c8bd4fafd9bd07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d776353135272b1fcb7453ae9c8bd4fafd9bd07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d776353135272b1fcb7453ae9c8bd4fafd9bd07", "patch": "@@ -1,3 +1,11 @@\n+2019-07-05  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-alias.c (alias_stats): Add\n+\tnonoverlapping_component_refs_since_match_p_must_overlap.\n+\t(dump_alias_stats): Print it.\n+\t(nonoverlapping_component_refs_since_match_p): Add early exit.\n+\t(nonoverlapping_component_refs_p): Do not account early exit.\n+\n 2019-07-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* except.c (emit_to_new_bb_before): Make sure to put a location on SEQ."}, {"sha": "d52d47cfaa7197200035796ee66dd77d5318b5b1", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d776353135272b1fcb7453ae9c8bd4fafd9bd07/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d776353135272b1fcb7453ae9c8bd4fafd9bd07/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=1d776353135272b1fcb7453ae9c8bd4fafd9bd07", "patch": "@@ -105,6 +105,7 @@ static struct {\n   unsigned HOST_WIDE_INT nonoverlapping_component_refs_p_may_alias;\n   unsigned HOST_WIDE_INT nonoverlapping_component_refs_p_no_alias;\n   unsigned HOST_WIDE_INT nonoverlapping_component_refs_since_match_p_may_alias;\n+  unsigned HOST_WIDE_INT nonoverlapping_component_refs_since_match_p_must_overlap;\n   unsigned HOST_WIDE_INT nonoverlapping_component_refs_since_match_p_no_alias;\n } alias_stats;\n \n@@ -138,10 +139,13 @@ dump_alias_stats (FILE *s)\n \t   + alias_stats.nonoverlapping_component_refs_p_may_alias);\n   fprintf (s, \"  nonoverlapping_component_refs_since_match_p: \"\n \t   HOST_WIDE_INT_PRINT_DEC\" disambiguations, \"\n+\t   HOST_WIDE_INT_PRINT_DEC\" must overlaps, \"\n \t   HOST_WIDE_INT_PRINT_DEC\" queries\\n\",\n \t   alias_stats.nonoverlapping_component_refs_since_match_p_no_alias,\n+\t   alias_stats.nonoverlapping_component_refs_since_match_p_must_overlap,\n \t   alias_stats.nonoverlapping_component_refs_since_match_p_no_alias\n-\t   + alias_stats.nonoverlapping_component_refs_since_match_p_may_alias);\n+\t   + alias_stats.nonoverlapping_component_refs_since_match_p_may_alias\n+\t   + alias_stats.nonoverlapping_component_refs_since_match_p_must_overlap);\n   fprintf (s, \"  aliasing_component_refs_p: \"\n \t   HOST_WIDE_INT_PRINT_DEC\" disambiguations, \"\n \t   HOST_WIDE_INT_PRINT_DEC\" queries\\n\",\n@@ -1149,6 +1153,17 @@ static int\n nonoverlapping_component_refs_since_match_p (tree match1, tree ref1,\n \t\t\t\t\t     tree match2, tree ref2)\n {\n+  /* Early return if there are no references to match, we do not need\n+     to walk the access paths.\n+\n+     Do not consider this as may-alias for stats - it is more useful\n+     to have information how many disambiguations happened provided that\n+     the query was meaningful.  */\n+\n+  if (match1 == ref1 || !handled_component_p (ref1)\n+      || match2 == ref2 || !handled_component_p (ref2))\n+    return -1;\n+\n   auto_vec<tree, 16> component_refs1;\n   auto_vec<tree, 16> component_refs2;\n \n@@ -1214,7 +1229,7 @@ nonoverlapping_component_refs_since_match_p (tree match1, tree ref1,\n \t  if (component_refs1.is_empty ())\n \t    {\n \t      ++alias_stats\n-\t\t.nonoverlapping_component_refs_since_match_p_may_alias;\n+\t\t.nonoverlapping_component_refs_since_match_p_must_overlap;\n \t      return 0;\n \t    }\n \t  ref1 = component_refs1.pop ();\n@@ -1226,7 +1241,7 @@ nonoverlapping_component_refs_since_match_p (tree match1, tree ref1,\n \t  if (component_refs2.is_empty ())\n \t    {\n \t      ++alias_stats\n-\t\t.nonoverlapping_component_refs_since_match_p_may_alias;\n+\t\t.nonoverlapping_component_refs_since_match_p_must_overlap;\n \t      return 0;\n \t    }\n \t  ref2 = component_refs2.pop ();\n@@ -1266,23 +1281,23 @@ nonoverlapping_component_refs_since_match_p (tree match1, tree ref1,\n \t      || DECL_BIT_FIELD_REPRESENTATIVE (field2) == field1)\n \t    {\n \t      ++alias_stats\n-\t\t.nonoverlapping_component_refs_since_match_p_may_alias;\n+\t\t.nonoverlapping_component_refs_since_match_p_must_overlap;\n \t      return 0;\n \t    }\n \t  /* Different fields of the same record type cannot overlap.\n \t     ??? Bitfields can overlap at RTL level so punt on them.  */\n \t  if (DECL_BIT_FIELD (field1) && DECL_BIT_FIELD (field2))\n \t    {\n \t      ++alias_stats\n-\t\t.nonoverlapping_component_refs_since_match_p_may_alias;\n+\t\t.nonoverlapping_component_refs_since_match_p_must_overlap;\n \t      return 0;\n \t    }\n \t  ++alias_stats.nonoverlapping_component_refs_since_match_p_no_alias;\n \t  return 1;\n \t}\n     }\n \n-  ++alias_stats.nonoverlapping_component_refs_since_match_p_may_alias;\n+  ++alias_stats.nonoverlapping_component_refs_since_match_p_must_overlap;\n   return 0;\n }\n \n@@ -1309,14 +1324,16 @@ ncr_compar (const void *field1_, const void *field2_)\n static bool\n nonoverlapping_component_refs_p (const_tree x, const_tree y)\n {\n+  /* Early return if we have nothing to do.\n+\n+     Do not consider this as may-alias for stats - it is more useful\n+     to have information how many disambiguations happened provided that\n+     the query was meaningful.  */\n   if (!flag_strict_aliasing\n       || !x || !y\n       || !handled_component_p (x)\n       || !handled_component_p (y))\n-    {\n-      ++alias_stats.nonoverlapping_component_refs_p_may_alias;\n-      return false;\n-    }\n+    return false;\n \n   auto_vec<const_tree, 16> fieldsx;\n   while (handled_component_p (x))"}]}