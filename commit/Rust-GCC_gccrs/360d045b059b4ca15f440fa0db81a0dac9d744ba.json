{"sha": "360d045b059b4ca15f440fa0db81a0dac9d744ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYwZDA0NWIwNTliNGNhMTVmNDQwZmEwZGI4MWEwZGFjOWQ3NDRiYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-12T18:53:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-12T18:53:42Z"}, "message": "Makefile.in (reginfo.o): Don't depend on $(GGC_H) or gt-reginfo.h.\n\ngcc/\n\t* Makefile.in (reginfo.o): Don't depend on $(GGC_H) or gt-reginfo.h.\n\t(GTFILES): Remove reginfo.c.\n\t* rtl.h (target_rtl): Add x_top_of_stack.\n\t(top_of_stack): New macro.\n\t* reginfo.c: Don't include ggc.h or gt-reginfo.h.\n\t(top_of_stack): Delete.\n\nFrom-SVN: r162091", "tree": {"sha": "aeefab84b5e5108cbebc4f45625b5df52e374403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeefab84b5e5108cbebc4f45625b5df52e374403"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/360d045b059b4ca15f440fa0db81a0dac9d744ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/360d045b059b4ca15f440fa0db81a0dac9d744ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/360d045b059b4ca15f440fa0db81a0dac9d744ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/360d045b059b4ca15f440fa0db81a0dac9d744ba/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55e78c8cf92151e9395ff9cfe91277b58f7fc1d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e78c8cf92151e9395ff9cfe91277b58f7fc1d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e78c8cf92151e9395ff9cfe91277b58f7fc1d0"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "ff43917f4c445d528750dc74fc32a00a8c4df483", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360d045b059b4ca15f440fa0db81a0dac9d744ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360d045b059b4ca15f440fa0db81a0dac9d744ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=360d045b059b4ca15f440fa0db81a0dac9d744ba", "patch": "@@ -1,3 +1,12 @@\n+2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* Makefile.in (reginfo.o): Don't depend on $(GGC_H) or gt-reginfo.h.\n+\t(GTFILES): Remove reginfo.c.\n+\t* rtl.h (target_rtl): Add x_top_of_stack.\n+\t(top_of_stack): New macro.\n+\t* reginfo.c: Don't include ggc.h or gt-reginfo.h.\n+\t(top_of_stack): Delete.\n+\n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* regs.h (target_regs): Add x_hard_regs_of_mode, x_contains_reg_of_mode,"}, {"sha": "4c7c0cd6ded047e04d8ff5370ce84d155309fd62", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360d045b059b4ca15f440fa0db81a0dac9d744ba/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360d045b059b4ca15f440fa0db81a0dac9d744ba/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=360d045b059b4ca15f440fa0db81a0dac9d744ba", "patch": "@@ -3260,9 +3260,9 @@ combine.o : combine.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(TM_P_H) $(TREE_H) $(TARGET_H) output.h $(PARAMS_H) $(OPTABS_H) \\\n    insn-codes.h $(TIMEVAR_H) $(TREE_PASS_H) $(DF_H) vecprim.h $(CGRAPH_H)\n reginfo.o : reginfo.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) addresses.h $(REGS_H) insn-config.h \\\n-   $(RECOG_H) reload.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(FUNCTION_H) output.h $(GGC_H) \\\n-   $(TM_P_H) $(EXPR_H) $(TIMEVAR_H) gt-reginfo.h $(HASHTAB_H) \\\n+   hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) addresses.h $(REGS_H) \\\n+   insn-config.h $(RECOG_H) reload.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) \\\n+   $(FUNCTION_H) output.h $(TM_P_H) $(EXPR_H) $(TIMEVAR_H) $(HASHTAB_H) \\\n    $(TARGET_H) $(TREE_PASS_H) $(DF_H) ira.h\n bitmap.o : bitmap.c $(CONFIG_H) $(SYSTEM_H)  coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(GGC_H) gt-bitmap.h $(BITMAP_H) $(OBSTACK_H) $(HASHTAB_H)\n@@ -3730,7 +3730,7 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/expr.h \\\n   $(srcdir)/function.c $(srcdir)/except.c \\\n   $(srcdir)/gcse.c $(srcdir)/integrate.c $(srcdir)/lists.c $(srcdir)/optabs.c \\\n-  $(srcdir)/profile.c $(srcdir)/reginfo.c $(srcdir)/mcf.c \\\n+  $(srcdir)/profile.c $(srcdir)/mcf.c \\\n   $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c $(srcdir)/cfglayout.h \\\n   $(srcdir)/sdbout.c $(srcdir)/stor-layout.c \\\n   $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \\"}, {"sha": "deb62b761a4d345df7b439a6965e9556a0623426", "filename": "gcc/reginfo.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360d045b059b4ca15f440fa0db81a0dac9d744ba/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360d045b059b4ca15f440fa0db81a0dac9d744ba/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=360d045b059b4ca15f440fa0db81a0dac9d744ba", "patch": "@@ -46,7 +46,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"diagnostic-core.h\"\n #include \"output.h\"\n-#include \"ggc.h\"\n #include \"timevar.h\"\n #include \"hashtab.h\"\n #include \"target.h\"\n@@ -121,9 +120,6 @@ const char * reg_class_names[] = REG_CLASS_NAMES;\n #define last_mode_for_init_move_cost \\\n   (this_target_regs->x_last_mode_for_init_move_cost)\n \n-/* Sample MEM values for use by memory_move_secondary_cost.  */\n-static GTY(()) rtx top_of_stack[MAX_MACHINE_MODE];\n-\n /* No more global register variables may be declared; true once\n    reginfo has been initialized.  */\n static int no_global_reg_vars = 0;\n@@ -1347,5 +1343,3 @@ finish_subregs_of_mode (void)\n }\n \n #endif /* CANNOT_CHANGE_MODE_CLASS */\n-\n-#include \"gt-reginfo.h\""}, {"sha": "aef8da5dc55b8b9253139f425af0b6cad9091fa1", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360d045b059b4ca15f440fa0db81a0dac9d744ba/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360d045b059b4ca15f440fa0db81a0dac9d744ba/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=360d045b059b4ca15f440fa0db81a0dac9d744ba", "patch": "@@ -2038,6 +2038,9 @@ struct GTY(()) target_rtl {\n      They are initialized once per compilation unit, then copied into\n      regno_reg_rtx at the beginning of each function.  */\n   rtx x_initial_regno_reg_rtx[FIRST_PSEUDO_REGISTER];\n+\n+  /* A sample (mem:M stack_pointer_rtx) rtx for each mode M.  */\n+  rtx x_top_of_stack[MAX_MACHINE_MODE];\n };\n \n extern GTY(()) struct target_rtl default_target_rtl;\n@@ -2053,6 +2056,8 @@ extern struct target_rtl *this_target_rtl;\n   (this_target_rtl->x_pic_offset_table_rtx)\n #define return_address_pointer_rtx \\\n   (this_target_rtl->x_return_address_pointer_rtx)\n+#define top_of_stack \\\n+  (this_target_rtl->x_top_of_stack)\n \n /* Standard pieces of rtx, to be substituted directly into things.  */\n #define pc_rtx                  (global_rtl[GR_PC])"}]}