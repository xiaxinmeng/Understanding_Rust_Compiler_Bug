{"sha": "7635b357c483c931e88e9394d8c785d1fae8489b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYzNWIzNTdjNDgzYzkzMWU4OGU5Mzk0ZDhjNzg1ZDFmYWU4NDg5Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-07-11T19:33:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-07-11T19:33:14Z"}, "message": "ada-tree.h: Minor reorganization.\n\n\t* gcc-interface/ada-tree.h: Minor reorganization.\n\t* gcc-interface/misc.c (gnat_print_decl): Minor tweaks.\n\t(gnat_print_type): Likewise.\n\nFrom-SVN: r149518", "tree": {"sha": "68bc4acfc1a6cbeb6d60ac46f50c0d2b6c240b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68bc4acfc1a6cbeb6d60ac46f50c0d2b6c240b96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7635b357c483c931e88e9394d8c785d1fae8489b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7635b357c483c931e88e9394d8c785d1fae8489b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7635b357c483c931e88e9394d8c785d1fae8489b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7635b357c483c931e88e9394d8c785d1fae8489b/comments", "author": null, "committer": null, "parents": [{"sha": "6b45de0060d6c073441e781e6c96f66f71a1a98a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b45de0060d6c073441e781e6c96f66f71a1a98a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b45de0060d6c073441e781e6c96f66f71a1a98a"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "6abe93303f2e88dd4305838b63628f9999345473", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7635b357c483c931e88e9394d8c785d1fae8489b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7635b357c483c931e88e9394d8c785d1fae8489b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7635b357c483c931e88e9394d8c785d1fae8489b", "patch": "@@ -1,3 +1,9 @@\n+2009-07-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h: Minor reorganization.\n+\t* gcc-interface/misc.c (gnat_print_decl): Minor tweaks.\n+\t(gnat_print_type): Likewise.\n+\n 2009-07-11  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_util.adb, sem_res.adb, sem_warn.adb: Minor comment editing:"}, {"sha": "8983139815ca4a68ae6f7a6c37ed7586888305fc", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7635b357c483c931e88e9394d8c785d1fae8489b/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7635b357c483c931e88e9394d8c785d1fae8489b/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=7635b357c483c931e88e9394d8c785d1fae8489b", "patch": "@@ -165,13 +165,14 @@ do {\t\t\t\t\t\t\t    \\\n /* True if TYPE can alias any other types.  */\n #define TYPE_UNIVERSAL_ALIASING_P(NODE) TYPE_LANG_FLAG_6 (NODE)\n \n-/* This field is only defined for FUNCTION_TYPE nodes. If the Ada subprogram\n-   contains no parameters passed by copy in/copy out then this field is zero.\n-   Otherwise it points to a list of nodes used to specify the return values\n-   of the out (or in out) parameters that qualify to be passed by copy in/\n-   copy out. For a full description of the copy in/copy out parameter passing\n-   mechanism refer to the routine gnat_to_gnu_entity. */\n-#define TYPE_CI_CO_LIST(NODE) TYPE_LANG_SLOT_1 (FUNCTION_TYPE_CHECK (NODE))\n+/* In an UNCONSTRAINED_ARRAY_TYPE, this is the record containing both the\n+   template and the object.\n+\n+   ??? We also put this on an ENUMERAL_TYPE that is dummy.  Technically,\n+   this is a conflict on the minval field, but there doesn't seem to be\n+   simple fix, so we'll live with this kludge for now.  */\n+#define TYPE_OBJECT_RECORD_TYPE(NODE) \\\n+  (TREE_CHECK2 ((NODE), UNCONSTRAINED_ARRAY_TYPE, ENUMERAL_TYPE)->type.minval)\n \n /* For numerical types, this is the GCC lower bound of the type.  The GCC\n    type system is based on the invariant that an object X of a given type\n@@ -187,6 +188,13 @@ do {\t\t\t\t\t\t\t    \\\n    considers that the assertion X <= UB is always true.  */\n #define TYPE_GCC_MAX_VALUE(NODE) (NUMERICAL_TYPE_CHECK (NODE)->type.maxval)\n \n+/* For a FUNCTION_TYPE, if the subprogram has parameters passed by copy in/\n+   copy out, this is the list of nodes used to specify the return values of\n+   the out (or in out) parameters that are passed by copy in/copy out.  For\n+   a full description of the copy in/copy out parameter passing mechanism\n+   refer to the routine gnat_to_gnu_entity.  */\n+#define TYPE_CI_CO_LIST(NODE) TYPE_LANG_SLOT_1 (FUNCTION_TYPE_CHECK (NODE))\n+\n /* For numerical types, this holds various RM-defined values.  */\n #define TYPE_RM_VALUES(NODE) TYPE_LANG_SLOT_1 (NUMERICAL_TYPE_CHECK (NODE))\n \n@@ -256,15 +264,6 @@ do {\t\t\t\t\t\t   \\\n   (TYPE_RM_MAX_VALUE (NODE) \\\n    ? TYPE_RM_MAX_VALUE (NODE) : TYPE_GCC_MAX_VALUE (NODE))\n \n-/* In an UNCONSTRAINED_ARRAY_TYPE, points to the record containing both\n-   the template and object.\n-\n-   ??? We also put this on an ENUMERAL_TYPE that's dummy.  Technically,\n-   this is a conflict on the minval field, but there doesn't seem to be\n-   simple fix, so we'll live with this kludge for now.  */\n-#define TYPE_OBJECT_RECORD_TYPE(NODE) \\\n-  (TREE_CHECK2 ((NODE), UNCONSTRAINED_ARRAY_TYPE, ENUMERAL_TYPE)->type.minval)\n-\n /* For an INTEGER_TYPE with TYPE_MODULAR_P, this is the value of the\n    modulus. */\n #define TYPE_MODULUS(NODE) GET_TYPE_LANG_SPECIFIC (INTEGER_TYPE_CHECK (NODE))\n@@ -293,17 +292,17 @@ do {\t\t\t\t\t\t   \\\n #define SET_TYPE_ACTUAL_BOUNDS(NODE, X) \\\n   SET_TYPE_LANG_SPECIFIC (TREE_CHECK2 (NODE, INTEGER_TYPE, ARRAY_TYPE), X)\n \n-/* For a RECORD_TYPE that is a fat pointer, point to the type for the\n+/* For a RECORD_TYPE that is a fat pointer, this is the type for the\n    unconstrained object.  Likewise for a RECORD_TYPE that is pointed\n    to by a thin pointer.  */\n #define TYPE_UNCONSTRAINED_ARRAY(NODE) \\\n   GET_TYPE_LANG_SPECIFIC (RECORD_TYPE_CHECK (NODE))\n #define SET_TYPE_UNCONSTRAINED_ARRAY(NODE, X) \\\n   SET_TYPE_LANG_SPECIFIC (RECORD_TYPE_CHECK (NODE), X)\n \n-/* For other RECORD_TYPEs and all UNION_TYPEs and QUAL_UNION_TYPEs, the Ada\n-   size of the object.  This differs from the GCC size in that it does not\n-   include any rounding up to the alignment of the type.  */\n+/* For other RECORD_TYPEs and all UNION_TYPEs and QUAL_UNION_TYPEs, this is\n+   the Ada size of the object.  This differs from the GCC size in that it\n+   does not include any rounding up to the alignment of the type.  */\n #define TYPE_ADA_SIZE(NODE) \\\n   GET_TYPE_LANG_SPECIFIC (RECORD_OR_UNION_CHECK (NODE))\n #define SET_TYPE_ADA_SIZE(NODE, X) \\"}, {"sha": "587eab3379e80e3fa20dbbf1c04d394c76351a6a", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7635b357c483c931e88e9394d8c785d1fae8489b/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7635b357c483c931e88e9394d8c785d1fae8489b/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=7635b357c483c931e88e9394d8c785d1fae8489b", "patch": "@@ -470,17 +470,17 @@ gnat_print_decl (FILE *file, tree node, int indent)\n   switch (TREE_CODE (node))\n     {\n     case CONST_DECL:\n-      print_node (file, \"const_corresponding_var\",\n+      print_node (file, \"corresponding var\",\n \t\t  DECL_CONST_CORRESPONDING_VAR (node), indent + 4);\n       break;\n \n     case FIELD_DECL:\n-      print_node (file, \"original_field\", DECL_ORIGINAL_FIELD (node),\n+      print_node (file, \"original field\", DECL_ORIGINAL_FIELD (node),\n \t\t  indent + 4);\n       break;\n \n     case VAR_DECL:\n-      print_node (file, \"renamed_object\", DECL_RENAMED_OBJECT (node),\n+      print_node (file, \"renamed object\", DECL_RENAMED_OBJECT (node),\n \t\t  indent + 4);\n       break;\n \n@@ -497,7 +497,7 @@ gnat_print_type (FILE *file, tree node, int indent)\n   switch (TREE_CODE (node))\n     {\n     case FUNCTION_TYPE:\n-      print_node (file, \"ci_co_list\", TYPE_CI_CO_LIST (node), indent + 4);\n+      print_node (file, \"ci/co list\", TYPE_CI_CO_LIST (node), indent + 4);\n       break;\n \n     case INTEGER_TYPE:"}]}