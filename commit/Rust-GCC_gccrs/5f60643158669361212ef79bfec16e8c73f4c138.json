{"sha": "5f60643158669361212ef79bfec16e8c73f4c138", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2MDY0MzE1ODY2OTM2MTIxMmVmNzliZmVjMTZlOGM3M2Y0YzEzOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-10-09T18:21:30Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-10-09T18:21:30Z"}, "message": "Update soft-fp from glibc.\n\nThis patch updates libgcc's copy of soft-fp from glibc, adding a\ntestcase for a bug fix this brings in.\n\nBootstrapped with no regressions on x86_64-unknown-linux-gnu.\n\nlibgcc:\n\t* soft-fp/double.h: Update from glibc.\n\t* soft-fp/eqdf2.c: Likewise.\n\t* soft-fp/eqsf2.c: Likewise.\n\t* soft-fp/eqtf2.c: Likewise.\n\t* soft-fp/extenddftf2.c: Likewise.\n\t* soft-fp/extended.h: Likewise.\n\t* soft-fp/extendsfdf2.c: Likewise.\n\t* soft-fp/extendsftf2.c: Likewise.\n\t* soft-fp/extendxftf2.c: Likewise.\n\t* soft-fp/gedf2.c: Likewise.\n\t* soft-fp/gesf2.c: Likewise.\n\t* soft-fp/getf2.c: Likewise.\n\t* soft-fp/ledf2.c: Likewise.\n\t* soft-fp/lesf2.c: Likewise.\n\t* soft-fp/letf2.c: Likewise.\n\t* soft-fp/op-1.h: Likewise.\n\t* soft-fp/op-2.h: Likewise.\n\t* soft-fp/op-4.h: Likewise.\n\t* soft-fp/op-8.h: Likewise.\n\t* soft-fp/op-common.h: Likewise.\n\t* soft-fp/quad.h: Likewise.\n\t* soft-fp/single.h: Likewise.\n\t* soft-fp/soft-fp.h: Likewise.\n\t* soft-fp/unorddf2.c: Likewise.\n\t* soft-fp/unordsf2.c: Likewise.\n\t* soft-fp/unordtf2.c: Likewise.\n\t* config/c6x/eqd.c (__c6xabi_eqd): Update call to FP_CMP_EQ_D.\n\t* config/c6x/eqf.c (__c6xabi_eqf): Update call to FP_CMP_EQ_S.\n\t* config/c6x/ged.c (__c6xabi_ged): Update call to FP_CMP_D.\n\t* config/c6x/gef.c (__c6xabi_gef): Update call to FP_CMP_S.\n\t* config/c6x/gtd.c (__c6xabi_gtd): Update call to FP_CMP_D.\n\t* config/c6x/gtf.c (__c6xabi_gtf): Update call to FP_CMP_S.\n\t* config/c6x/led.c (__c6xabi_led): Update call to FP_CMP_D.\n\t* config/c6x/lef.c (__c6xabi_lef): Update call to FP_CMP_S.\n\t* config/c6x/ltd.c (__c6xabi_ltd): Update call to FP_CMP_D.\n\t* config/c6x/ltf.c (__c6xabi_ltf): Update call to FP_CMP_S.\n\ngcc/testsuite:\n\t* gcc.dg/torture/float128-extendxf-underflow.c: New test.\n\nFrom-SVN: r216048", "tree": {"sha": "77a4f889c3807e7f78e206208cc84647a983fe05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77a4f889c3807e7f78e206208cc84647a983fe05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f60643158669361212ef79bfec16e8c73f4c138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f60643158669361212ef79bfec16e8c73f4c138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f60643158669361212ef79bfec16e8c73f4c138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f60643158669361212ef79bfec16e8c73f4c138/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c386686921f2eecb9f1a419def40b6b55732da98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c386686921f2eecb9f1a419def40b6b55732da98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c386686921f2eecb9f1a419def40b6b55732da98"}], "stats": {"total": 3134, "additions": 1782, "deletions": 1352}, "files": [{"sha": "d6b22f22f72cd55520c3e2a0d77cb8c551fa2906", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -1,3 +1,7 @@\n+2014-10-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/torture/float128-extendxf-underflow.c: New test.\n+\n 2014-10-09  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n \t* g++.dg/ipa/polymorphic-call-1.C: New testcase."}, {"sha": "228815d38bd6ca41447eae54196f547b1efe79ea", "filename": "gcc/testsuite/gcc.dg/torture/float128-extendxf-underflow.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-extendxf-underflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-extendxf-underflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-extendxf-underflow.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -0,0 +1,40 @@\n+/* Test that extension from XFmode to __float128 raises underflow for\n+   exact tiny values, if trapping on underflow is enabled.  */\n+\n+/* { dg-do run { target i?86-*-*gnu* x86_64-*-*gnu* ia64-*-*gnu* } } */\n+/* { dg-options \"-D_GNU_SOURCE\" } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+#include <setjmp.h>\n+#include <signal.h>\n+#include <stdlib.h>\n+\n+volatile sig_atomic_t caught_sigfpe;\n+sigjmp_buf buf;\n+\n+static void\n+handle_sigfpe (int sig)\n+{\n+  caught_sigfpe = 1;\n+  siglongjmp (buf, 1);\n+}\n+\n+int\n+main (void)\n+{\n+  volatile long double a = 0x1p-16384L;\n+  volatile __float128 r;\n+  r = a;\n+  if (fetestexcept (FE_UNDERFLOW))\n+    abort ();\n+  if (r != 0x1p-16384q)\n+    abort ();\n+  feenableexcept (FE_UNDERFLOW);\n+  signal (SIGFPE, handle_sigfpe);\n+  if (sigsetjmp (buf, 1) == 0)\n+    r = a;\n+  if (!caught_sigfpe)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "7364f93780f323e2964d9832265127e0e5f84333", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -1,3 +1,42 @@\n+2014-10-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* soft-fp/double.h: Update from glibc.\n+\t* soft-fp/eqdf2.c: Likewise.\n+\t* soft-fp/eqsf2.c: Likewise.\n+\t* soft-fp/eqtf2.c: Likewise.\n+\t* soft-fp/extenddftf2.c: Likewise.\n+\t* soft-fp/extended.h: Likewise.\n+\t* soft-fp/extendsfdf2.c: Likewise.\n+\t* soft-fp/extendsftf2.c: Likewise.\n+\t* soft-fp/extendxftf2.c: Likewise.\n+\t* soft-fp/gedf2.c: Likewise.\n+\t* soft-fp/gesf2.c: Likewise.\n+\t* soft-fp/getf2.c: Likewise.\n+\t* soft-fp/ledf2.c: Likewise.\n+\t* soft-fp/lesf2.c: Likewise.\n+\t* soft-fp/letf2.c: Likewise.\n+\t* soft-fp/op-1.h: Likewise.\n+\t* soft-fp/op-2.h: Likewise.\n+\t* soft-fp/op-4.h: Likewise.\n+\t* soft-fp/op-8.h: Likewise.\n+\t* soft-fp/op-common.h: Likewise.\n+\t* soft-fp/quad.h: Likewise.\n+\t* soft-fp/single.h: Likewise.\n+\t* soft-fp/soft-fp.h: Likewise.\n+\t* soft-fp/unorddf2.c: Likewise.\n+\t* soft-fp/unordsf2.c: Likewise.\n+\t* soft-fp/unordtf2.c: Likewise.\n+\t* config/c6x/eqd.c (__c6xabi_eqd): Update call to FP_CMP_EQ_D.\n+\t* config/c6x/eqf.c (__c6xabi_eqf): Update call to FP_CMP_EQ_S.\n+\t* config/c6x/ged.c (__c6xabi_ged): Update call to FP_CMP_D.\n+\t* config/c6x/gef.c (__c6xabi_gef): Update call to FP_CMP_S.\n+\t* config/c6x/gtd.c (__c6xabi_gtd): Update call to FP_CMP_D.\n+\t* config/c6x/gtf.c (__c6xabi_gtf): Update call to FP_CMP_S.\n+\t* config/c6x/led.c (__c6xabi_led): Update call to FP_CMP_D.\n+\t* config/c6x/lef.c (__c6xabi_lef): Update call to FP_CMP_S.\n+\t* config/c6x/ltd.c (__c6xabi_ltd): Update call to FP_CMP_D.\n+\t* config/c6x/ltf.c (__c6xabi_ltf): Update call to FP_CMP_S.\n+\n 2014-10-08  Rong Xu  <xur@google.com>\n \n \t* libgcov-util.c (read_gcda_file): Fix format."}, {"sha": "84133dda38218b334a28640316e5a6f3ffb3ae26", "filename": "libgcc/config/c6x/eqd.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Feqd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Feqd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Feqd.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -38,9 +38,7 @@ CMPtype __c6xabi_eqd(DFtype a, DFtype b)\n \n   FP_UNPACK_RAW_D(A, a);\n   FP_UNPACK_RAW_D(B, b);\n-  FP_CMP_EQ_D(r, A, B);\n-  if (r && (FP_ISSIGNAN_D(A) || FP_ISSIGNAN_D(B)))\n-    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_CMP_EQ_D(r, A, B, 1);\n   FP_HANDLE_EXCEPTIONS;\n \n   return !r;"}, {"sha": "6975b603395a9f60e36ee54e486d43b05853aae7", "filename": "libgcc/config/c6x/eqf.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Feqf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Feqf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Feqf.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -38,9 +38,7 @@ CMPtype __c6xabi_eqf(SFtype a, SFtype b)\n \n   FP_UNPACK_RAW_S(A, a);\n   FP_UNPACK_RAW_S(B, b);\n-  FP_CMP_EQ_S(r, A, B);\n-  if (r && (FP_ISSIGNAN_S(A) || FP_ISSIGNAN_S(B)))\n-    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_CMP_EQ_S(r, A, B, 1);\n   FP_HANDLE_EXCEPTIONS;\n \n   return !r;"}, {"sha": "9a074e5d6553ea3028ac7386165e18511511fe8f", "filename": "libgcc/config/c6x/ged.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fged.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fged.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Fged.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -38,9 +38,7 @@ CMPtype __c6xabi_ged(DFtype a, DFtype b)\n \n   FP_UNPACK_RAW_D(A, a);\n   FP_UNPACK_RAW_D(B, b);\n-  FP_CMP_D(r, A, B, -2);\n-  if (r == -2 && (FP_ISSIGNAN_D(A) || FP_ISSIGNAN_D(B)))\n-    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_CMP_D(r, A, B, -2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r >= 0;"}, {"sha": "2cabc5d670726caf47ff164845bf03fdb45d2ca7", "filename": "libgcc/config/c6x/gef.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fgef.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fgef.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Fgef.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -38,9 +38,7 @@ CMPtype __c6xabi_gef(SFtype a, SFtype b)\n \n   FP_UNPACK_RAW_S(A, a);\n   FP_UNPACK_RAW_S(B, b);\n-  FP_CMP_S(r, A, B, -2);\n-  if (r == -2 && (FP_ISSIGNAN_S(A) || FP_ISSIGNAN_S(B)))\n-    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_CMP_S(r, A, B, -2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r >= 0;"}, {"sha": "29f532057935442bfba0242be62e686a5c35f4cd", "filename": "libgcc/config/c6x/gtd.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fgtd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fgtd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Fgtd.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -38,9 +38,7 @@ CMPtype __c6xabi_gtd(DFtype a, DFtype b)\n \n   FP_UNPACK_RAW_D(A, a);\n   FP_UNPACK_RAW_D(B, b);\n-  FP_CMP_D(r, A, B, -2);\n-  if (r == -2 && (FP_ISSIGNAN_D(A) || FP_ISSIGNAN_D(B)))\n-    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_CMP_D(r, A, B, -2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r > 0;"}, {"sha": "d8c19d5b85ba5a1653fa3289aa5b90304638d72e", "filename": "libgcc/config/c6x/gtf.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fgtf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fgtf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Fgtf.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -38,9 +38,7 @@ CMPtype __c6xabi_gtf(SFtype a, SFtype b)\n \n   FP_UNPACK_RAW_S(A, a);\n   FP_UNPACK_RAW_S(B, b);\n-  FP_CMP_S(r, A, B, -2);\n-  if (r == -2 && (FP_ISSIGNAN_S(A) || FP_ISSIGNAN_S(B)))\n-    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_CMP_S(r, A, B, -2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r > 0;"}, {"sha": "f69ed79fbf77b4f8a9e514789af98f652838fd60", "filename": "libgcc/config/c6x/led.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fled.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fled.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Fled.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -38,9 +38,7 @@ CMPtype __c6xabi_led(DFtype a, DFtype b)\n \n   FP_UNPACK_RAW_D(A, a);\n   FP_UNPACK_RAW_D(B, b);\n-  FP_CMP_D(r, A, B, 2);\n-  if (r == 2 && (FP_ISSIGNAN_D(A) || FP_ISSIGNAN_D(B)))\n-    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_CMP_D(r, A, B, 2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r <= 0;"}, {"sha": "6fb14f1aa7239d6d8b5467b8d3f6fa2ae17760af", "filename": "libgcc/config/c6x/lef.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Flef.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Flef.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Flef.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -38,9 +38,7 @@ CMPtype __c6xabi_lef(SFtype a, SFtype b)\n \n   FP_UNPACK_RAW_S(A, a);\n   FP_UNPACK_RAW_S(B, b);\n-  FP_CMP_S(r, A, B, 2);\n-  if (r == 2 && (FP_ISSIGNAN_S(A) || FP_ISSIGNAN_S(B)))\n-    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_CMP_S(r, A, B, 2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r <= 0;"}, {"sha": "cda9f0151247a7762ff84b62fbdb7d36f6a28495", "filename": "libgcc/config/c6x/ltd.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fltd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fltd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Fltd.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -38,9 +38,7 @@ CMPtype __c6xabi_ltd(DFtype a, DFtype b)\n \n   FP_UNPACK_RAW_D(A, a);\n   FP_UNPACK_RAW_D(B, b);\n-  FP_CMP_D(r, A, B, 2);\n-  if (r == 2 && (FP_ISSIGNAN_D(A) || FP_ISSIGNAN_D(B)))\n-    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_CMP_D(r, A, B, 2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r < 0;"}, {"sha": "7df12fe1978a8582b1fd557723baa93e9aed9d9c", "filename": "libgcc/config/c6x/ltf.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fltf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fconfig%2Fc6x%2Fltf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Fltf.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -38,9 +38,7 @@ CMPtype __c6xabi_ltf(SFtype a, SFtype b)\n \n   FP_UNPACK_RAW_S(A, a);\n   FP_UNPACK_RAW_S(B, b);\n-  FP_CMP_S(r, A, B, 2);\n-  if (r == 2 && (FP_ISSIGNAN_S(A) || FP_ISSIGNAN_S(B)))\n-    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_CMP_S(r, A, B, 2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r < 0;"}, {"sha": "36a11a545247caea3749b2ad080c46ecfffc40f4", "filename": "libgcc/soft-fp/double.h", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fdouble.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fdouble.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fdouble.h?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -90,45 +90,45 @@ union _FP_UNION_D\n };\n \n # define FP_DECL_D(X)\t\t_FP_DECL (2, X)\n-# define FP_UNPACK_RAW_D(X, val)\t_FP_UNPACK_RAW_2 (D, X, val)\n-# define FP_UNPACK_RAW_DP(X, val)\t_FP_UNPACK_RAW_2_P (D, X, val)\n-# define FP_PACK_RAW_D(val, X)\t_FP_PACK_RAW_2 (D, val, X)\n+# define FP_UNPACK_RAW_D(X, val)\t_FP_UNPACK_RAW_2 (D, X, (val))\n+# define FP_UNPACK_RAW_DP(X, val)\t_FP_UNPACK_RAW_2_P (D, X, (val))\n+# define FP_PACK_RAW_D(val, X)\t_FP_PACK_RAW_2 (D, (val), X)\n # define FP_PACK_RAW_DP(val, X)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_2_P (D, val, X);\t\t\\\n+\t_FP_PACK_RAW_2_P (D, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_D(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_2 (D, X, val);\t\t\\\n+      _FP_UNPACK_RAW_2 (D, X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (D, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_DP(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_2_P (D, X, val);\t\t\\\n+      _FP_UNPACK_RAW_2_P (D, X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (D, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_D(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_2 (D, X, val);\t\t\\\n+      _FP_UNPACK_RAW_2 (D, X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (D, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_DP(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_2_P (D, X, val);\t\t\\\n+      _FP_UNPACK_RAW_2_P (D, X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (D, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n@@ -137,7 +137,7 @@ union _FP_UNION_D\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (D, 2, X);\t\t\\\n-      _FP_PACK_RAW_2 (D, val, X);\t\t\\\n+      _FP_PACK_RAW_2 (D, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -146,15 +146,15 @@ union _FP_UNION_D\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (D, 2, X);\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_2_P (D, val, X);\t\t\\\n+\t_FP_PACK_RAW_2_P (D, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_SEMIRAW_D(val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (D, 2, X);\t\t\\\n-      _FP_PACK_RAW_2 (D, val, X);\t\t\\\n+      _FP_PACK_RAW_2 (D, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -163,7 +163,7 @@ union _FP_UNION_D\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (D, 2, X);\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_2_P (D, val, X);\t\t\\\n+\t_FP_PACK_RAW_2_P (D, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -174,15 +174,15 @@ union _FP_UNION_D\n # define FP_MUL_D(R, X, Y)\t\t_FP_MUL (D, 2, R, X, Y)\n # define FP_DIV_D(R, X, Y)\t\t_FP_DIV (D, 2, R, X, Y)\n # define FP_SQRT_D(R, X)\t\t_FP_SQRT (D, 2, R, X)\n-# define _FP_SQRT_MEAT_D(R, S, T, X, Q)\t_FP_SQRT_MEAT_2 (R, S, T, X, Q)\n+# define _FP_SQRT_MEAT_D(R, S, T, X, Q)\t_FP_SQRT_MEAT_2 (R, S, T, X, (Q))\n # define FP_FMA_D(R, X, Y, Z)\t\t_FP_FMA (D, 2, 4, R, X, Y, Z)\n \n-# define FP_CMP_D(r, X, Y, un)\t\t_FP_CMP (D, 2, r, X, Y, un)\n-# define FP_CMP_EQ_D(r, X, Y)\t\t_FP_CMP_EQ (D, 2, r, X, Y)\n-# define FP_CMP_UNORD_D(r, X, Y)\t_FP_CMP_UNORD (D, 2, r, X, Y)\n+# define FP_CMP_D(r, X, Y, un, ex)\t_FP_CMP (D, 2, (r), X, Y, (un), (ex))\n+# define FP_CMP_EQ_D(r, X, Y, ex)\t_FP_CMP_EQ (D, 2, (r), X, Y, (ex))\n+# define FP_CMP_UNORD_D(r, X, Y, ex)\t_FP_CMP_UNORD (D, 2, (r), X, Y, (ex))\n \n-# define FP_TO_INT_D(r, X, rsz, rsg)\t_FP_TO_INT (D, 2, r, X, rsz, rsg)\n-# define FP_FROM_INT_D(X, r, rs, rt)\t_FP_FROM_INT (D, 2, X, r, rs, rt)\n+# define FP_TO_INT_D(r, X, rsz, rsg)\t_FP_TO_INT (D, 2, (r), X, (rsz), (rsg))\n+# define FP_FROM_INT_D(X, r, rs, rt)\t_FP_FROM_INT (D, 2, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_D(X)\t_FP_FRAC_HIGH_2 (X)\n # define _FP_FRAC_HIGH_RAW_D(X)\t_FP_FRAC_HIGH_2 (X)\n@@ -209,45 +209,45 @@ union _FP_UNION_D\n };\n \n # define FP_DECL_D(X)\t\t_FP_DECL (1, X)\n-# define FP_UNPACK_RAW_D(X, val)\t_FP_UNPACK_RAW_1 (D, X, val)\n-# define FP_UNPACK_RAW_DP(X, val)\t_FP_UNPACK_RAW_1_P (D, X, val)\n-# define FP_PACK_RAW_D(val, X)\t_FP_PACK_RAW_1 (D, val, X)\n+# define FP_UNPACK_RAW_D(X, val)\t_FP_UNPACK_RAW_1 (D, X, (val))\n+# define FP_UNPACK_RAW_DP(X, val)\t_FP_UNPACK_RAW_1_P (D, X, (val))\n+# define FP_PACK_RAW_D(val, X)\t_FP_PACK_RAW_1 (D, (val), X)\n # define FP_PACK_RAW_DP(val, X)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_1_P (D, val, X);\t\t\\\n+\t_FP_PACK_RAW_1_P (D, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_D(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_1 (D, X, val);\t\t\\\n+      _FP_UNPACK_RAW_1 (D, X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (D, 1, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_DP(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_1_P (D, X, val);\t\t\\\n+      _FP_UNPACK_RAW_1_P (D, X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (D, 1, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_D(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_1 (D, X, val);\t\t\\\n+      _FP_UNPACK_RAW_1 (D, X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (D, 1, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_DP(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_1_P (D, X, val);\t\t\\\n+      _FP_UNPACK_RAW_1_P (D, X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (D, 1, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n@@ -256,7 +256,7 @@ union _FP_UNION_D\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (D, 1, X);\t\t\\\n-      _FP_PACK_RAW_1 (D, val, X);\t\t\\\n+      _FP_PACK_RAW_1 (D, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -265,15 +265,15 @@ union _FP_UNION_D\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (D, 1, X);\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_1_P (D, val, X);\t\t\\\n+\t_FP_PACK_RAW_1_P (D, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_SEMIRAW_D(val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (D, 1, X);\t\t\\\n-      _FP_PACK_RAW_1 (D, val, X);\t\t\\\n+      _FP_PACK_RAW_1 (D, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -282,7 +282,7 @@ union _FP_UNION_D\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (D, 1, X);\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_1_P (D, val, X);\t\t\\\n+\t_FP_PACK_RAW_1_P (D, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -293,18 +293,18 @@ union _FP_UNION_D\n # define FP_MUL_D(R, X, Y)\t\t_FP_MUL (D, 1, R, X, Y)\n # define FP_DIV_D(R, X, Y)\t\t_FP_DIV (D, 1, R, X, Y)\n # define FP_SQRT_D(R, X)\t\t_FP_SQRT (D, 1, R, X)\n-# define _FP_SQRT_MEAT_D(R, S, T, X, Q)\t_FP_SQRT_MEAT_1 (R, S, T, X, Q)\n+# define _FP_SQRT_MEAT_D(R, S, T, X, Q)\t_FP_SQRT_MEAT_1 (R, S, T, X, (Q))\n # define FP_FMA_D(R, X, Y, Z)\t\t_FP_FMA (D, 1, 2, R, X, Y, Z)\n \n /* The implementation of _FP_MUL_D and _FP_DIV_D should be chosen by\n    the target machine.  */\n \n-# define FP_CMP_D(r, X, Y, un)\t\t_FP_CMP (D, 1, r, X, Y, un)\n-# define FP_CMP_EQ_D(r, X, Y)\t\t_FP_CMP_EQ (D, 1, r, X, Y)\n-# define FP_CMP_UNORD_D(r, X, Y)\t_FP_CMP_UNORD (D, 1, r, X, Y)\n+# define FP_CMP_D(r, X, Y, un, ex)\t_FP_CMP (D, 1, (r), X, Y, (un), (ex))\n+# define FP_CMP_EQ_D(r, X, Y, ex)\t_FP_CMP_EQ (D, 1, (r), X, Y, (ex))\n+# define FP_CMP_UNORD_D(r, X, Y, ex)\t_FP_CMP_UNORD (D, 1, (r), X, Y, (ex))\n \n-# define FP_TO_INT_D(r, X, rsz, rsg)\t_FP_TO_INT (D, 1, r, X, rsz, rsg)\n-# define FP_FROM_INT_D(X, r, rs, rt)\t_FP_FROM_INT (D, 1, X, r, rs, rt)\n+# define FP_TO_INT_D(r, X, rsz, rsg)\t_FP_TO_INT (D, 1, (r), X, (rsz), (rsg))\n+# define FP_FROM_INT_D(X, r, rs, rt)\t_FP_FROM_INT (D, 1, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_D(X)\t_FP_FRAC_HIGH_1 (X)\n # define _FP_FRAC_HIGH_RAW_D(X)\t_FP_FRAC_HIGH_1 (X)"}, {"sha": "e8ce12d0aa036418f41f1b950845640b03eba3a0", "filename": "libgcc/soft-fp/eqdf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Feqdf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Feqdf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Feqdf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -42,9 +42,7 @@ __eqdf2 (DFtype a, DFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_D (A, a);\n   FP_UNPACK_RAW_D (B, b);\n-  FP_CMP_EQ_D (r, A, B);\n-  if (r && (FP_ISSIGNAN_D (A) || FP_ISSIGNAN_D (B)))\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_EQ_D (r, A, B, 1);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}, {"sha": "2ee837d8478327f1fa5bb961fad6cfa3219749d5", "filename": "libgcc/soft-fp/eqsf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Feqsf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Feqsf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Feqsf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -42,9 +42,7 @@ __eqsf2 (SFtype a, SFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_S (A, a);\n   FP_UNPACK_RAW_S (B, b);\n-  FP_CMP_EQ_S (r, A, B);\n-  if (r && (FP_ISSIGNAN_S (A) || FP_ISSIGNAN_S (B)))\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_EQ_S (r, A, B, 1);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}, {"sha": "17b9d40a0562a4b4dd9d3ac9fced4d084862c68e", "filename": "libgcc/soft-fp/eqtf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Feqtf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Feqtf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Feqtf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -42,9 +42,7 @@ __eqtf2 (TFtype a, TFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_Q (A, a);\n   FP_UNPACK_RAW_Q (B, b);\n-  FP_CMP_EQ_Q (r, A, B);\n-  if (r && (FP_ISSIGNAN_Q (A) || FP_ISSIGNAN_Q (B)))\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_EQ_Q (r, A, B, 1);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}, {"sha": "17655326d8f3de8114158b14532a26f4c7397e78", "filename": "libgcc/soft-fp/extenddftf2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fextenddftf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fextenddftf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fextenddftf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -28,6 +28,7 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#define FP_NO_EXACT_UNDERFLOW\n #include \"soft-fp.h\"\n #include \"double.h\"\n #include \"quad.h\""}, {"sha": "d16fa66174d2e87408a4ee305fb19ed2b1d1c04e", "filename": "libgcc/soft-fp/extended.h", "status": "modified", "additions": 143, "deletions": 143, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fextended.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fextended.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fextended.h?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -91,100 +91,102 @@ union _FP_UNION_E\n \n # define FP_DECL_E(X)\t\t_FP_DECL (4, X)\n \n-# define FP_UNPACK_RAW_E(X, val)\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      union _FP_UNION_E _flo;\t\t\t\\\n-      _flo.flt = (val);\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-      X##_f[2] = 0;\t\t\t\t\\\n-      X##_f[3] = 0;\t\t\t\t\\\n-      X##_f[0] = _flo.bits.frac0;\t\t\\\n-      X##_f[1] = _flo.bits.frac1;\t\t\\\n-      X##_e  = _flo.bits.exp;\t\t\t\\\n-      X##_s  = _flo.bits.sign;\t\t\t\\\n-    }\t\t\t\t\t\t\\\n+# define FP_UNPACK_RAW_E(X, val)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      union _FP_UNION_E FP_UNPACK_RAW_E_flo;\t\t\\\n+      FP_UNPACK_RAW_E_flo.flt = (val);\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      X##_f[2] = 0;\t\t\t\t\t\\\n+      X##_f[3] = 0;\t\t\t\t\t\\\n+      X##_f[0] = FP_UNPACK_RAW_E_flo.bits.frac0;\t\\\n+      X##_f[1] = FP_UNPACK_RAW_E_flo.bits.frac1;\t\\\n+      X##_e  = FP_UNPACK_RAW_E_flo.bits.exp;\t\t\\\n+      X##_s  = FP_UNPACK_RAW_E_flo.bits.sign;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n-# define FP_UNPACK_RAW_EP(X, val)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      union _FP_UNION_E *_flo = (union _FP_UNION_E *) (val);\t\\\n-\t\t\t\t\t\t\t\t\\\n-      X##_f[2] = 0;\t\t\t\t\t\t\\\n-      X##_f[3] = 0;\t\t\t\t\t\t\\\n-      X##_f[0] = _flo->bits.frac0;\t\t\t\t\\\n-      X##_f[1] = _flo->bits.frac1;\t\t\t\t\\\n-      X##_e  = _flo->bits.exp;\t\t\t\t\t\\\n-      X##_s  = _flo->bits.sign;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n+# define FP_UNPACK_RAW_EP(X, val)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      union _FP_UNION_E *FP_UNPACK_RAW_EP_flo\t\t\\\n+\t= (union _FP_UNION_E *) (val);\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      X##_f[2] = 0;\t\t\t\t\t\\\n+      X##_f[3] = 0;\t\t\t\t\t\\\n+      X##_f[0] = FP_UNPACK_RAW_EP_flo->bits.frac0;\t\\\n+      X##_f[1] = FP_UNPACK_RAW_EP_flo->bits.frac1;\t\\\n+      X##_e  = FP_UNPACK_RAW_EP_flo->bits.exp;\t\t\\\n+      X##_s  = FP_UNPACK_RAW_EP_flo->bits.sign;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_RAW_E(val, X)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      union _FP_UNION_E _flo;\t\t\t\\\n+      union _FP_UNION_E FP_PACK_RAW_E_flo;\t\\\n \t\t\t\t\t\t\\\n       if (X##_e)\t\t\t\t\\\n \tX##_f[1] |= _FP_IMPLBIT_E;\t\t\\\n       else\t\t\t\t\t\\\n \tX##_f[1] &= ~(_FP_IMPLBIT_E);\t\t\\\n-      _flo.bits.frac0 = X##_f[0];\t\t\\\n-      _flo.bits.frac1 = X##_f[1];\t\t\\\n-      _flo.bits.exp   = X##_e;\t\t\t\\\n-      _flo.bits.sign  = X##_s;\t\t\t\\\n+      FP_PACK_RAW_E_flo.bits.frac0 = X##_f[0];\t\\\n+      FP_PACK_RAW_E_flo.bits.frac1 = X##_f[1];\t\\\n+      FP_PACK_RAW_E_flo.bits.exp   = X##_e;\t\\\n+      FP_PACK_RAW_E_flo.bits.sign  = X##_s;\t\\\n \t\t\t\t\t\t\\\n-      (val) = _flo.flt;\t\t\t\t\\\n+      (val) = FP_PACK_RAW_E_flo.flt;\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-# define FP_PACK_RAW_EP(val, X)\t\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (!FP_INHIBIT_RESULTS)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  union _FP_UNION_E *_flo = (union _FP_UNION_E *) (val);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  if (X##_e)\t\t\t\t\t\t\t\\\n-\t    X##_f[1] |= _FP_IMPLBIT_E;\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\t\\\n-\t    X##_f[1] &= ~(_FP_IMPLBIT_E);\t\t\t\t\\\n-\t  _flo->bits.frac0 = X##_f[0];\t\t\t\t\t\\\n-\t  _flo->bits.frac1 = X##_f[1];\t\t\t\t\t\\\n-\t  _flo->bits.exp   = X##_e;\t\t\t\t\t\\\n-\t  _flo->bits.sign  = X##_s;\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+# define FP_PACK_RAW_EP(val, X)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (!FP_INHIBIT_RESULTS)\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  union _FP_UNION_E *FP_PACK_RAW_EP_flo\t\t\\\n+\t    = (union _FP_UNION_E *) (val);\t\t\\\n+\t\t\t\t\t\t\t\\\n+\t  if (X##_e)\t\t\t\t\t\\\n+\t    X##_f[1] |= _FP_IMPLBIT_E;\t\t\t\\\n+\t  else\t\t\t\t\t\t\\\n+\t    X##_f[1] &= ~(_FP_IMPLBIT_E);\t\t\\\n+\t  FP_PACK_RAW_EP_flo->bits.frac0 = X##_f[0];\t\\\n+\t  FP_PACK_RAW_EP_flo->bits.frac1 = X##_f[1];\t\\\n+\t  FP_PACK_RAW_EP_flo->bits.exp   = X##_e;\t\\\n+\t  FP_PACK_RAW_EP_flo->bits.sign  = X##_s;\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_E(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      FP_UNPACK_RAW_E (X, val);\t\t\t\\\n+      FP_UNPACK_RAW_E (X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (E, 4, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_EP(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      FP_UNPACK_RAW_EP (X, val);\t\t\\\n+      FP_UNPACK_RAW_EP (X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (E, 4, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_E(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      FP_UNPACK_RAW_E (X, val);\t\t\t\\\n+      FP_UNPACK_RAW_E (X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (E, 4, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_EP(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      FP_UNPACK_RAW_EP (X, val);\t\t\\\n+      FP_UNPACK_RAW_EP (X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (E, 4, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n@@ -193,31 +195,31 @@ union _FP_UNION_E\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (E, 4, X);\t\t\\\n-      FP_PACK_RAW_E (val, X);\t\t\t\\\n+      FP_PACK_RAW_E ((val), X);\t\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_EP(val, X)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (E, 4, X);\t\t\\\n-      FP_PACK_RAW_EP (val, X);\t\t\t\\\n+      FP_PACK_RAW_EP ((val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_SEMIRAW_E(val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (E, 4, X);\t\t\\\n-      FP_PACK_RAW_E (val, X);\t\t\t\\\n+      FP_PACK_RAW_E ((val), X);\t\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_SEMIRAW_EP(val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (E, 4, X);\t\t\\\n-      FP_PACK_RAW_EP (val, X);\t\t\t\\\n+      FP_PACK_RAW_EP ((val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -230,50 +232,48 @@ union _FP_UNION_E\n # define FP_SQRT_E(R, X)\t_FP_SQRT (E, 4, R, X)\n # define FP_FMA_E(R, X, Y, Z)\t_FP_FMA (E, 4, 8, R, X, Y, Z)\n \n-/*\n- * Square root algorithms:\n- * We have just one right now, maybe Newton approximation\n- * should be added for those machines where division is fast.\n- * This has special _E version because standard _4 square\n- * root would not work (it has to start normally with the\n- * second word and not the first), but as we have to do it\n- * anyway, we optimize it by doing most of the calculations\n- * in two UWtype registers instead of four.\n- */\n+/* Square root algorithms:\n+   We have just one right now, maybe Newton approximation\n+   should be added for those machines where division is fast.\n+   This has special _E version because standard _4 square\n+   root would not work (it has to start normally with the\n+   second word and not the first), but as we have to do it\n+   anyway, we optimize it by doing most of the calculations\n+   in two UWtype registers instead of four.  */\n \n # define _FP_SQRT_MEAT_E(R, S, T, X, q)\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      q = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\\\n+      (q) = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\\\n       _FP_FRAC_SRL_4 (X, (_FP_WORKBITS));\t\t\\\n       while (q)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\\\n-\t  T##_f[1] = S##_f[1] + q;\t\t\t\\\n+\t  T##_f[1] = S##_f[1] + (q);\t\t\t\\\n \t  if (T##_f[1] <= X##_f[1])\t\t\t\\\n \t    {\t\t\t\t\t\t\\\n-\t      S##_f[1] = T##_f[1] + q;\t\t\t\\\n+\t      S##_f[1] = T##_f[1] + (q);\t\t\\\n \t      X##_f[1] -= T##_f[1];\t\t\t\\\n-\t      R##_f[1] += q;\t\t\t\t\\\n+\t      R##_f[1] += (q);\t\t\t\t\\\n \t    }\t\t\t\t\t\t\\\n \t  _FP_FRAC_SLL_2 (X, 1);\t\t\t\\\n-\t  q >>= 1;\t\t\t\t\t\\\n+\t  (q) >>= 1;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n-      q = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\\\n+      (q) = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\\\n       while (q)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\\\n-\t  T##_f[0] = S##_f[0] + q;\t\t\t\\\n+\t  T##_f[0] = S##_f[0] + (q);\t\t\t\\\n \t  T##_f[1] = S##_f[1];\t\t\t\t\\\n \t  if (T##_f[1] < X##_f[1]\t\t\t\\\n \t      || (T##_f[1] == X##_f[1]\t\t\t\\\n \t\t  && T##_f[0] <= X##_f[0]))\t\t\\\n \t    {\t\t\t\t\t\t\\\n-\t      S##_f[0] = T##_f[0] + q;\t\t\t\\\n+\t      S##_f[0] = T##_f[0] + (q);\t\t\\\n \t      S##_f[1] += (T##_f[0] > S##_f[0]);\t\\\n \t      _FP_FRAC_DEC_2 (X, T);\t\t\t\\\n-\t      R##_f[0] += q;\t\t\t\t\\\n+\t      R##_f[0] += (q);\t\t\t\t\\\n \t    }\t\t\t\t\t\t\\\n \t  _FP_FRAC_SLL_2 (X, 1);\t\t\t\\\n-\t  q >>= 1;\t\t\t\t\t\\\n+\t  (q) >>= 1;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n       _FP_FRAC_SLL_4 (R, (_FP_WORKBITS));\t\t\\\n       if (X##_f[0] | X##_f[1])\t\t\t\t\\\n@@ -287,12 +287,12 @@ union _FP_UNION_E\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-# define FP_CMP_E(r, X, Y, un)\t\t_FP_CMP (E, 4, r, X, Y, un)\n-# define FP_CMP_EQ_E(r, X, Y)\t\t_FP_CMP_EQ (E, 4, r, X, Y)\n-# define FP_CMP_UNORD_E(r, X, Y)\t_FP_CMP_UNORD (E, 4, r, X, Y)\n+# define FP_CMP_E(r, X, Y, un, ex)\t_FP_CMP (E, 4, (r), X, Y, (un), (ex))\n+# define FP_CMP_EQ_E(r, X, Y, ex)\t_FP_CMP_EQ (E, 4, (r), X, Y, (ex))\n+# define FP_CMP_UNORD_E(r, X, Y, ex)\t_FP_CMP_UNORD (E, 4, (r), X, Y, (ex))\n \n-# define FP_TO_INT_E(r, X, rsz, rsg)\t_FP_TO_INT (E, 4, r, X, rsz, rsg)\n-# define FP_FROM_INT_E(X, r, rs, rt)\t_FP_FROM_INT (E, 4, X, r, rs, rt)\n+# define FP_TO_INT_E(r, X, rsz, rsg)\t_FP_TO_INT (E, 4, (r), X, (rsz), (rsg))\n+# define FP_FROM_INT_E(X, r, rs, rt)\t_FP_FROM_INT (E, 4, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_E(X)\t(X##_f[2])\n # define _FP_FRAC_HIGH_RAW_E(X)\t(X##_f[1])\n@@ -323,92 +323,94 @@ union _FP_UNION_E\n # define FP_UNPACK_RAW_E(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      union _FP_UNION_E _flo;\t\t\t\\\n-      _flo.flt = (val);\t\t\t\t\\\n+      union _FP_UNION_E FP_UNPACK_RAW_E_flo;\t\\\n+      FP_UNPACK_RAW_E_flo.flt = (val);\t\t\\\n \t\t\t\t\t\t\\\n-      X##_f0 = _flo.bits.frac;\t\t\t\\\n+      X##_f0 = FP_UNPACK_RAW_E_flo.bits.frac;\t\\\n       X##_f1 = 0;\t\t\t\t\\\n-      X##_e = _flo.bits.exp;\t\t\t\\\n-      X##_s = _flo.bits.sign;\t\t\t\\\n+      X##_e = FP_UNPACK_RAW_E_flo.bits.exp;\t\\\n+      X##_s = FP_UNPACK_RAW_E_flo.bits.sign;\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-# define FP_UNPACK_RAW_EP(X, val)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      union _FP_UNION_E *_flo = (union _FP_UNION_E *) (val);\t\\\n-\t\t\t\t\t\t\t\t\\\n-      X##_f0 = _flo->bits.frac;\t\t\t\t\t\\\n-      X##_f1 = 0;\t\t\t\t\t\t\\\n-      X##_e = _flo->bits.exp;\t\t\t\t\t\\\n-      X##_s = _flo->bits.sign;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n+# define FP_UNPACK_RAW_EP(X, val)\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      union _FP_UNION_E *FP_UNPACK_RAW_EP_flo\t\\\n+\t= (union _FP_UNION_E *) (val);\t\t\\\n+\t\t\t\t\t\t\\\n+      X##_f0 = FP_UNPACK_RAW_EP_flo->bits.frac;\t\\\n+      X##_f1 = 0;\t\t\t\t\\\n+      X##_e = FP_UNPACK_RAW_EP_flo->bits.exp;\t\\\n+      X##_s = FP_UNPACK_RAW_EP_flo->bits.sign;\t\\\n+    }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_RAW_E(val, X)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      union _FP_UNION_E _flo;\t\t\t\\\n+      union _FP_UNION_E FP_PACK_RAW_E_flo;\t\\\n \t\t\t\t\t\t\\\n       if (X##_e)\t\t\t\t\\\n \tX##_f0 |= _FP_IMPLBIT_E;\t\t\\\n       else\t\t\t\t\t\\\n \tX##_f0 &= ~(_FP_IMPLBIT_E);\t\t\\\n-      _flo.bits.frac = X##_f0;\t\t\t\\\n-      _flo.bits.exp  = X##_e;\t\t\t\\\n-      _flo.bits.sign = X##_s;\t\t\t\\\n+      FP_PACK_RAW_E_flo.bits.frac = X##_f0;\t\\\n+      FP_PACK_RAW_E_flo.bits.exp  = X##_e;\t\\\n+      FP_PACK_RAW_E_flo.bits.sign = X##_s;\t\\\n \t\t\t\t\t\t\\\n-      (val) = _flo.flt;\t\t\t\t\\\n+      (val) = FP_PACK_RAW_E_flo.flt;\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-# define FP_PACK_RAW_EP(fs, val, X)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (!FP_INHIBIT_RESULTS)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  union _FP_UNION_E *_flo = (union _FP_UNION_E *) (val);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  if (X##_e)\t\t\t\t\t\t\t\\\n-\t    X##_f0 |= _FP_IMPLBIT_E;\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\t\\\n-\t    X##_f0 &= ~(_FP_IMPLBIT_E);\t\t\t\t\t\\\n-\t  _flo->bits.frac = X##_f0;\t\t\t\t\t\\\n-\t  _flo->bits.exp  = X##_e;\t\t\t\t\t\\\n-\t  _flo->bits.sign = X##_s;\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+# define FP_PACK_RAW_EP(fs, val, X)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (!FP_INHIBIT_RESULTS)\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  union _FP_UNION_E *FP_PACK_RAW_EP_flo\t\t\\\n+\t    = (union _FP_UNION_E *) (val);\t\t\\\n+\t\t\t\t\t\t\t\\\n+\t  if (X##_e)\t\t\t\t\t\\\n+\t    X##_f0 |= _FP_IMPLBIT_E;\t\t\t\\\n+\t  else\t\t\t\t\t\t\\\n+\t    X##_f0 &= ~(_FP_IMPLBIT_E);\t\t\t\\\n+\t  FP_PACK_RAW_EP_flo->bits.frac = X##_f0;\t\\\n+\t  FP_PACK_RAW_EP_flo->bits.exp  = X##_e;\t\\\n+\t  FP_PACK_RAW_EP_flo->bits.sign = X##_s;\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n \n # define FP_UNPACK_E(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      FP_UNPACK_RAW_E (X, val);\t\t\t\\\n+      FP_UNPACK_RAW_E (X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (E, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_EP(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      FP_UNPACK_RAW_EP (X, val);\t\t\\\n+      FP_UNPACK_RAW_EP (X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (E, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_E(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      FP_UNPACK_RAW_E (X, val);\t\t\t\\\n+      FP_UNPACK_RAW_E (X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (E, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_EP(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      FP_UNPACK_RAW_EP (X, val);\t\t\\\n+      FP_UNPACK_RAW_EP (X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (E, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n@@ -417,31 +419,31 @@ union _FP_UNION_E\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (E, 2, X);\t\t\\\n-      FP_PACK_RAW_E (val, X);\t\t\t\\\n+      FP_PACK_RAW_E ((val), X);\t\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_EP(val, X)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (E, 2, X);\t\t\\\n-      FP_PACK_RAW_EP (val, X);\t\t\t\\\n+      FP_PACK_RAW_EP ((val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_SEMIRAW_E(val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (E, 2, X);\t\t\\\n-      FP_PACK_RAW_E (val, X);\t\t\t\\\n+      FP_PACK_RAW_E ((val), X);\t\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_SEMIRAW_EP(val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (E, 2, X);\t\t\\\n-      FP_PACK_RAW_EP (val, X);\t\t\t\\\n+      FP_PACK_RAW_EP ((val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -454,30 +456,28 @@ union _FP_UNION_E\n # define FP_SQRT_E(R, X)\t_FP_SQRT (E, 2, R, X)\n # define FP_FMA_E(R, X, Y, Z)\t_FP_FMA (E, 2, 4, R, X, Y, Z)\n \n-/*\n- * Square root algorithms:\n- * We have just one right now, maybe Newton approximation\n- * should be added for those machines where division is fast.\n- * We optimize it by doing most of the calculations\n- * in one UWtype registers instead of two, although we don't\n- * have to.\n- */\n+/* Square root algorithms:\n+   We have just one right now, maybe Newton approximation\n+   should be added for those machines where division is fast.\n+   We optimize it by doing most of the calculations\n+   in one UWtype registers instead of two, although we don't\n+   have to.  */\n # define _FP_SQRT_MEAT_E(R, S, T, X, q)\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      q = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\\\n+      (q) = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\\\n       _FP_FRAC_SRL_2 (X, (_FP_WORKBITS));\t\t\\\n       while (q)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\\\n-\t  T##_f0 = S##_f0 + q;\t\t\t\t\\\n+\t  T##_f0 = S##_f0 + (q);\t\t\t\\\n \t  if (T##_f0 <= X##_f0)\t\t\t\t\\\n \t    {\t\t\t\t\t\t\\\n-\t      S##_f0 = T##_f0 + q;\t\t\t\\\n+\t      S##_f0 = T##_f0 + (q);\t\t\t\\\n \t      X##_f0 -= T##_f0;\t\t\t\t\\\n-\t      R##_f0 += q;\t\t\t\t\\\n+\t      R##_f0 += (q);\t\t\t\t\\\n \t    }\t\t\t\t\t\t\\\n \t  _FP_FRAC_SLL_1 (X, 1);\t\t\t\\\n-\t  q >>= 1;\t\t\t\t\t\\\n+\t  (q) >>= 1;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n       _FP_FRAC_SLL_2 (R, (_FP_WORKBITS));\t\t\\\n       if (X##_f0)\t\t\t\t\t\\\n@@ -489,12 +489,12 @@ union _FP_UNION_E\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-# define FP_CMP_E(r, X, Y, un)\t\t_FP_CMP (E, 2, r, X, Y, un)\n-# define FP_CMP_EQ_E(r, X, Y)\t\t_FP_CMP_EQ (E, 2, r, X, Y)\n-# define FP_CMP_UNORD_E(r, X, Y)\t_FP_CMP_UNORD (E, 2, r, X, Y)\n+# define FP_CMP_E(r, X, Y, un, ex)\t_FP_CMP (E, 2, (r), X, Y, (un), (ex))\n+# define FP_CMP_EQ_E(r, X, Y, ex)\t_FP_CMP_EQ (E, 2, (r), X, Y, (ex))\n+# define FP_CMP_UNORD_E(r, X, Y, ex)\t_FP_CMP_UNORD (E, 2, (r), X, Y, (ex))\n \n-# define FP_TO_INT_E(r, X, rsz, rsg)\t_FP_TO_INT (E, 2, r, X, rsz, rsg)\n-# define FP_FROM_INT_E(X, r, rs, rt)\t_FP_FROM_INT (E, 2, X, r, rs, rt)\n+# define FP_TO_INT_E(r, X, rsz, rsg)\t_FP_TO_INT (E, 2, (r), X, (rsz), (rsg))\n+# define FP_FROM_INT_E(X, r, rs, rt)\t_FP_FROM_INT (E, 2, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_E(X)\t(X##_f1)\n # define _FP_FRAC_HIGH_RAW_E(X)\t(X##_f0)"}, {"sha": "6224195ce91b793de37321f3c7b7ed4b8e423627", "filename": "libgcc/soft-fp/extendsfdf2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fextendsfdf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fextendsfdf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fextendsfdf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -28,6 +28,7 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#define FP_NO_EXACT_UNDERFLOW\n #include \"soft-fp.h\"\n #include \"single.h\"\n #include \"double.h\""}, {"sha": "f67d614d7c90bcd7ed5c0f52ce915169652e567d", "filename": "libgcc/soft-fp/extendsftf2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fextendsftf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fextendsftf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fextendsftf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -28,6 +28,7 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#define FP_NO_EXACT_UNDERFLOW\n #include \"soft-fp.h\"\n #include \"single.h\"\n #include \"quad.h\""}, {"sha": "a1386a68e657f7fe4ba1efa99b45d2e24d082617", "filename": "libgcc/soft-fp/extendxftf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fextendxftf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fextendxftf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fextendxftf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -39,7 +39,7 @@ __extendxftf2 (XFtype a)\n   FP_DECL_Q (R);\n   TFtype r;\n \n-  FP_INIT_ROUNDMODE;\n+  FP_INIT_TRAPPING_EXCEPTIONS;\n   FP_UNPACK_RAW_E (A, a);\n #if (2 * _FP_W_TYPE_SIZE) < _FP_FRACBITS_Q\n   FP_EXTEND (Q, E, 4, 4, R, A);"}, {"sha": "a8cc94941f99e16be53afb7f3c9385794b327f28", "filename": "libgcc/soft-fp/gedf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fgedf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fgedf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fgedf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -42,9 +42,7 @@ __gedf2 (DFtype a, DFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_D (A, a);\n   FP_UNPACK_RAW_D (B, b);\n-  FP_CMP_D (r, A, B, -2);\n-  if (r == -2)\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_D (r, A, B, -2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}, {"sha": "aa84b2614d8db682d7010f480201d507cd7a4082", "filename": "libgcc/soft-fp/gesf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fgesf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fgesf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fgesf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -42,9 +42,7 @@ __gesf2 (SFtype a, SFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_S (A, a);\n   FP_UNPACK_RAW_S (B, b);\n-  FP_CMP_S (r, A, B, -2);\n-  if (r == -2)\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_S (r, A, B, -2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}, {"sha": "c852228ddcabc8f770d0a9801bdcef5a860b5af9", "filename": "libgcc/soft-fp/getf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fgetf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fgetf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fgetf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -42,9 +42,7 @@ __getf2 (TFtype a, TFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_Q (A, a);\n   FP_UNPACK_RAW_Q (B, b);\n-  FP_CMP_Q (r, A, B, -2);\n-  if (r == -2)\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_Q (r, A, B, -2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}, {"sha": "fb5bbb29de97efb02c769d2293e9fcf2d5354733", "filename": "libgcc/soft-fp/ledf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fledf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fledf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fledf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -42,9 +42,7 @@ __ledf2 (DFtype a, DFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_D (A, a);\n   FP_UNPACK_RAW_D (B, b);\n-  FP_CMP_D (r, A, B, 2);\n-  if (r == 2)\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_D (r, A, B, 2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}, {"sha": "1b672042a2cf1aa4546d0ac9b5f0a6bdc50280d4", "filename": "libgcc/soft-fp/lesf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Flesf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Flesf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Flesf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -42,9 +42,7 @@ __lesf2 (SFtype a, SFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_S (A, a);\n   FP_UNPACK_RAW_S (B, b);\n-  FP_CMP_S (r, A, B, 2);\n-  if (r == 2)\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_S (r, A, B, 2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}, {"sha": "1293519d21bb61a34135d556c26c93b7bbd28bf9", "filename": "libgcc/soft-fp/letf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fletf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fletf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fletf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -42,9 +42,7 @@ __letf2 (TFtype a, TFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_Q (A, a);\n   FP_UNPACK_RAW_Q (B, b);\n-  FP_CMP_Q (r, A, B, 2);\n-  if (r == 2)\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_Q (r, A, B, 2, 2);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}, {"sha": "177705caa32ab16798f76d746d69cb02911443b8", "filename": "libgcc/soft-fp/op-1.h", "status": "modified", "additions": 150, "deletions": 138, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fop-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fop-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fop-1.h?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -50,8 +50,8 @@\n #define _FP_FRAC_SRL_1(X, N)\t(X##_f >>= N)\n \n /* Right shift with sticky-lsb.  */\n-#define _FP_FRAC_SRST_1(X, S, N, sz)\t__FP_FRAC_SRST_1 (X##_f, S, N, sz)\n-#define _FP_FRAC_SRS_1(X, N, sz)\t__FP_FRAC_SRS_1 (X##_f, N, sz)\n+#define _FP_FRAC_SRST_1(X, S, N, sz)\t__FP_FRAC_SRST_1 (X##_f, S, (N), (sz))\n+#define _FP_FRAC_SRS_1(X, N, sz)\t__FP_FRAC_SRS_1 (X##_f, (N), (sz))\n \n #define __FP_FRAC_SRST_1(X, S, N, sz)\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n@@ -71,9 +71,9 @@\n #define _FP_FRAC_ADD_1(R, X, Y)\t(R##_f = X##_f + Y##_f)\n #define _FP_FRAC_SUB_1(R, X, Y)\t(R##_f = X##_f - Y##_f)\n #define _FP_FRAC_DEC_1(X, Y)\t(X##_f -= Y##_f)\n-#define _FP_FRAC_CLZ_1(z, X)\t__FP_CLZ (z, X##_f)\n+#define _FP_FRAC_CLZ_1(z, X)\t__FP_CLZ ((z), X##_f)\n \n-/* Predicates */\n+/* Predicates.  */\n #define _FP_FRAC_NEGP_1(X)\t((_FP_WS_TYPE) X##_f < 0)\n #define _FP_FRAC_ZEROP_1(X)\t(X##_f == 0)\n #define _FP_FRAC_OVERP_1(fs, X)\t(X##_f & _FP_OVERFLOW_##fs)\n@@ -87,66 +87,62 @@\n #define _FP_MINFRAC_1\t\t1\n #define _FP_MAXFRAC_1\t\t(~(_FP_WS_TYPE) 0)\n \n-/*\n- * Unpack the raw bits of a native fp value.  Do not classify or\n- * normalize the data.\n- */\n+/* Unpack the raw bits of a native fp value.  Do not classify or\n+   normalize the data.  */\n \n-#define _FP_UNPACK_RAW_1(fs, X, val)\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs _flo;\t\t\\\n-      _flo.flt = (val);\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-      X##_f = _flo.bits.frac;\t\t\t\\\n-      X##_e = _flo.bits.exp;\t\t\t\\\n-      X##_s = _flo.bits.sign;\t\t\t\\\n-    }\t\t\t\t\t\t\\\n+#define _FP_UNPACK_RAW_1(fs, X, val)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      union _FP_UNION_##fs _FP_UNPACK_RAW_1_flo;\t\\\n+      _FP_UNPACK_RAW_1_flo.flt = (val);\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      X##_f = _FP_UNPACK_RAW_1_flo.bits.frac;\t\t\\\n+      X##_e = _FP_UNPACK_RAW_1_flo.bits.exp;\t\t\\\n+      X##_s = _FP_UNPACK_RAW_1_flo.bits.sign;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define _FP_UNPACK_RAW_1_P(fs, X, val)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs *_flo = (union _FP_UNION_##fs *) (val);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      X##_f = _flo->bits.frac;\t\t\t\t\t\t\\\n-      X##_e = _flo->bits.exp;\t\t\t\t\t\t\\\n-      X##_s = _flo->bits.sign;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+#define _FP_UNPACK_RAW_1_P(fs, X, val)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      union _FP_UNION_##fs *_FP_UNPACK_RAW_1_P_flo\t\\\n+\t= (union _FP_UNION_##fs *) (val);\t\t\\\n+\t\t\t\t\t\t\t\\\n+      X##_f = _FP_UNPACK_RAW_1_P_flo->bits.frac;\t\\\n+      X##_e = _FP_UNPACK_RAW_1_P_flo->bits.exp;\t\t\\\n+      X##_s = _FP_UNPACK_RAW_1_P_flo->bits.sign;\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n-/*\n- * Repack the raw bits of a native fp value.\n- */\n+/* Repack the raw bits of a native fp value.  */\n \n #define _FP_PACK_RAW_1(fs, val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs _flo;\t\t\\\n+      union _FP_UNION_##fs _FP_PACK_RAW_1_flo;\t\\\n \t\t\t\t\t\t\\\n-      _flo.bits.frac = X##_f;\t\t\t\\\n-      _flo.bits.exp  = X##_e;\t\t\t\\\n-      _flo.bits.sign = X##_s;\t\t\t\\\n+      _FP_PACK_RAW_1_flo.bits.frac = X##_f;\t\\\n+      _FP_PACK_RAW_1_flo.bits.exp  = X##_e;\t\\\n+      _FP_PACK_RAW_1_flo.bits.sign = X##_s;\t\\\n \t\t\t\t\t\t\\\n-      (val) = _flo.flt;\t\t\t\t\\\n+      (val) = _FP_PACK_RAW_1_flo.flt;\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define _FP_PACK_RAW_1_P(fs, val, X)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs *_flo = (union _FP_UNION_##fs *) (val);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      _flo->bits.frac = X##_f;\t\t\t\t\t\t\\\n-      _flo->bits.exp  = X##_e;\t\t\t\t\t\t\\\n-      _flo->bits.sign = X##_s;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+#define _FP_PACK_RAW_1_P(fs, val, X)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      union _FP_UNION_##fs *_FP_PACK_RAW_1_P_flo\t\\\n+\t= (union _FP_UNION_##fs *) (val);\t\t\\\n+\t\t\t\t\t\t\t\\\n+      _FP_PACK_RAW_1_P_flo->bits.frac = X##_f;\t\t\\\n+      _FP_PACK_RAW_1_P_flo->bits.exp  = X##_e;\t\t\\\n+      _FP_PACK_RAW_1_P_flo->bits.sign = X##_s;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n \n-/*\n- * Multiplication algorithms:\n- */\n+/* Multiplication algorithms: */\n \n /* Basic.  Assuming the host word size is >= 2*FRACBITS, we can do the\n    multiplication immediately.  */\n@@ -161,11 +157,11 @@\n #define _FP_MUL_MEAT_1_imm(wfracbits, R, X, Y)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_MUL_MEAT_DW_1_imm (wfracbits, R, X, Y);\t\t\t\\\n+      _FP_MUL_MEAT_DW_1_imm ((wfracbits), R, X, Y);\t\t\t\\\n       /* Normalize since we know where the msb of the multiplicands\t\\\n \t were (bit B), we know that the msb of the of the product is\t\\\n \t at either 2B or 2B-1.  */\t\t\t\t\t\\\n-      _FP_FRAC_SRS_1 (R, wfracbits-1, 2*wfracbits);\t\t\t\\\n+      _FP_FRAC_SRS_1 (R, (wfracbits)-1, 2*(wfracbits));\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -181,13 +177,15 @@\n #define _FP_MUL_MEAT_1_wide(wfracbits, R, X, Y, doit)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_Z);\t\t\t\t\t\t\\\n-      _FP_MUL_MEAT_DW_1_wide (wfracbits, _Z, X, Y, doit);\t\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_1_wide_Z);\t\t\t\t\\\n+      _FP_MUL_MEAT_DW_1_wide ((wfracbits), _FP_MUL_MEAT_1_wide_Z,\t\\\n+\t\t\t      X, Y, doit);\t\t\t\t\\\n       /* Normalize since we know where the msb of the multiplicands\t\\\n \t were (bit B), we know that the msb of the of the product is\t\\\n \t at either 2B or 2B-1.  */\t\t\t\t\t\\\n-      _FP_FRAC_SRS_2 (_Z, wfracbits-1, 2*wfracbits);\t\t\t\\\n-      R##_f = _Z_f0;\t\t\t\t\t\t\t\\\n+      _FP_FRAC_SRS_2 (_FP_MUL_MEAT_1_wide_Z, (wfracbits)-1,\t\t\\\n+\t\t      2*(wfracbits));\t\t\t\t\t\\\n+      R##_f = _FP_MUL_MEAT_1_wide_Z_f0;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -196,62 +194,70 @@\n #define _FP_MUL_MEAT_DW_1_hard(wfracbits, R, X, Y)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_W_TYPE _xh, _xl, _yh, _yl;\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_a);\t\t\t\t\t\t\\\n+      _FP_W_TYPE _FP_MUL_MEAT_DW_1_hard_xh, _FP_MUL_MEAT_DW_1_hard_xl;\t\\\n+      _FP_W_TYPE _FP_MUL_MEAT_DW_1_hard_yh, _FP_MUL_MEAT_DW_1_hard_yl;\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_DW_1_hard_a);\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      /* split the words in half */\t\t\t\t\t\\\n-      _xh = X##_f >> (_FP_W_TYPE_SIZE/2);\t\t\t\t\\\n-      _xl = X##_f & (((_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE/2)) - 1);\t\\\n-      _yh = Y##_f >> (_FP_W_TYPE_SIZE/2);\t\t\t\t\\\n-      _yl = Y##_f & (((_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE/2)) - 1);\t\\\n+      /* Split the words in half.  */\t\t\t\t\t\\\n+      _FP_MUL_MEAT_DW_1_hard_xh = X##_f >> (_FP_W_TYPE_SIZE/2);\t\t\\\n+      _FP_MUL_MEAT_DW_1_hard_xl\t\t\t\t\t\t\\\n+\t= X##_f & (((_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE/2)) - 1);\t\\\n+      _FP_MUL_MEAT_DW_1_hard_yh = Y##_f >> (_FP_W_TYPE_SIZE/2);\t\t\\\n+      _FP_MUL_MEAT_DW_1_hard_yl\t\t\t\t\t\t\\\n+\t= Y##_f & (((_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE/2)) - 1);\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      /* multiply the pieces */\t\t\t\t\t\t\\\n-      R##_f0 = _xl * _yl;\t\t\t\t\t\t\\\n-      _a_f0 = _xh * _yl;\t\t\t\t\t\t\\\n-      _a_f1 = _xl * _yh;\t\t\t\t\t\t\\\n-      R##_f1 = _xh * _yh;\t\t\t\t\t\t\\\n+      /* Multiply the pieces.  */\t\t\t\t\t\\\n+      R##_f0 = _FP_MUL_MEAT_DW_1_hard_xl * _FP_MUL_MEAT_DW_1_hard_yl;\t\\\n+      _FP_MUL_MEAT_DW_1_hard_a_f0\t\t\t\t\t\\\n+\t= _FP_MUL_MEAT_DW_1_hard_xh * _FP_MUL_MEAT_DW_1_hard_yl;\t\\\n+      _FP_MUL_MEAT_DW_1_hard_a_f1\t\t\t\t\t\\\n+\t= _FP_MUL_MEAT_DW_1_hard_xl * _FP_MUL_MEAT_DW_1_hard_yh;\t\\\n+      R##_f1 = _FP_MUL_MEAT_DW_1_hard_xh * _FP_MUL_MEAT_DW_1_hard_yh;\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      /* reassemble into two full words */\t\t\t\t\\\n-      if ((_a_f0 += _a_f1) < _a_f1)\t\t\t\t\t\\\n+      /* Reassemble into two full words.  */\t\t\t\t\\\n+      if ((_FP_MUL_MEAT_DW_1_hard_a_f0 += _FP_MUL_MEAT_DW_1_hard_a_f1)\t\\\n+\t  < _FP_MUL_MEAT_DW_1_hard_a_f1)\t\t\t\t\\\n \tR##_f1 += (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE/2);\t\t\\\n-      _a_f1 = _a_f0 >> (_FP_W_TYPE_SIZE/2);\t\t\t\t\\\n-      _a_f0 = _a_f0 << (_FP_W_TYPE_SIZE/2);\t\t\t\t\\\n-      _FP_FRAC_ADD_2 (R, R, _a);\t\t\t\t\t\\\n+      _FP_MUL_MEAT_DW_1_hard_a_f1\t\t\t\t\t\\\n+\t= _FP_MUL_MEAT_DW_1_hard_a_f0 >> (_FP_W_TYPE_SIZE/2);\t\t\\\n+      _FP_MUL_MEAT_DW_1_hard_a_f0\t\t\t\t\t\\\n+\t= _FP_MUL_MEAT_DW_1_hard_a_f0 << (_FP_W_TYPE_SIZE/2);\t\t\\\n+      _FP_FRAC_ADD_2 (R, R, _FP_MUL_MEAT_DW_1_hard_a);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define _FP_MUL_MEAT_1_hard(wfracbits, R, X, Y)\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_z);\t\t\t\t\\\n-      _FP_MUL_MEAT_DW_1_hard (wfracbits, _z, X, Y);\t\\\n-\t\t\t\t\t\t\t\\\n-      /* normalize */\t\t\t\t\t\\\n-      _FP_FRAC_SRS_2 (_z, wfracbits - 1, 2*wfracbits);\t\\\n-      R##_f = _z_f0;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+#define _FP_MUL_MEAT_1_hard(wfracbits, R, X, Y)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_1_hard_z);\t\t\t\\\n+      _FP_MUL_MEAT_DW_1_hard ((wfracbits),\t\t\t\\\n+\t\t\t      _FP_MUL_MEAT_1_hard_z, X, Y);\t\\\n+\t\t\t\t\t\t\t\t\\\n+      /* Normalize.  */\t\t\t\t\t\t\\\n+      _FP_FRAC_SRS_2 (_FP_MUL_MEAT_1_hard_z,\t\t\t\\\n+\t\t      (wfracbits) - 1, 2*(wfracbits));\t\t\\\n+      R##_f = _FP_MUL_MEAT_1_hard_z_f0;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n \n-/*\n- * Division algorithms:\n- */\n+/* Division algorithms: */\n \n /* Basic.  Assuming the host word size is >= 2*FRACBITS, we can do the\n    division immediately.  Give this macro either _FP_DIV_HELP_imm for\n    C primitives or _FP_DIV_HELP_ldiv for the ISO function.  Which you\n    choose will depend on what the compiler does with divrem4.  */\n \n-#define _FP_DIV_MEAT_1_imm(fs, R, X, Y, doit)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      _FP_W_TYPE _q, _r;\t\t\t\\\n-      X##_f <<= (X##_f < Y##_f\t\t\t\\\n-\t\t ? R##_e--, _FP_WFRACBITS_##fs\t\\\n-\t\t : _FP_WFRACBITS_##fs - 1);\t\\\n-      doit (_q, _r, X##_f, Y##_f);\t\t\\\n-      R##_f = _q | (_r != 0);\t\t\t\\\n-    }\t\t\t\t\t\t\\\n+#define _FP_DIV_MEAT_1_imm(fs, R, X, Y, doit)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_1_imm_q, _FP_DIV_MEAT_1_imm_r;\t\t\\\n+      X##_f <<= (X##_f < Y##_f\t\t\t\t\t\t\\\n+\t\t ? R##_e--, _FP_WFRACBITS_##fs\t\t\t\t\\\n+\t\t : _FP_WFRACBITS_##fs - 1);\t\t\t\t\\\n+      doit (_FP_DIV_MEAT_1_imm_q, _FP_DIV_MEAT_1_imm_r, X##_f, Y##_f);\t\\\n+      R##_f = _FP_DIV_MEAT_1_imm_q | (_FP_DIV_MEAT_1_imm_r != 0);\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n /* GCC's longlong.h defines a 2W / 1W => (1W,1W) primitive udiv_qrnnd\n@@ -262,70 +268,80 @@\n #define _FP_DIV_MEAT_1_udiv_norm(fs, R, X, Y)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_W_TYPE _nh, _nl, _q, _r, _y;\t\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_1_udiv_norm_nh;\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_1_udiv_norm_nl;\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_1_udiv_norm_q;\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_1_udiv_norm_r;\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_1_udiv_norm_y;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* Normalize Y -- i.e. make the most significant bit set.  */\t\\\n-      _y = Y##_f << _FP_WFRACXBITS_##fs;\t\t\t\t\\\n+      _FP_DIV_MEAT_1_udiv_norm_y = Y##_f << _FP_WFRACXBITS_##fs;\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* Shift X op correspondingly high, that is, up one full word.  */ \\\n       if (X##_f < Y##_f)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  R##_e--;\t\t\t\t\t\t\t\\\n-\t  _nl = 0;\t\t\t\t\t\t\t\\\n-\t  _nh = X##_f;\t\t\t\t\t\t\t\\\n+\t  _FP_DIV_MEAT_1_udiv_norm_nl = 0;\t\t\t\t\\\n+\t  _FP_DIV_MEAT_1_udiv_norm_nh = X##_f;\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  _nl = X##_f << (_FP_W_TYPE_SIZE - 1);\t\t\t\t\\\n-\t  _nh = X##_f >> 1;\t\t\t\t\t\t\\\n+\t  _FP_DIV_MEAT_1_udiv_norm_nl = X##_f << (_FP_W_TYPE_SIZE - 1);\t\\\n+\t  _FP_DIV_MEAT_1_udiv_norm_nh = X##_f >> 1;\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      udiv_qrnnd (_q, _r, _nh, _nl, _y);\t\t\t\t\\\n-      R##_f = _q | (_r != 0);\t\t\t\t\t\t\\\n+      udiv_qrnnd (_FP_DIV_MEAT_1_udiv_norm_q,\t\t\t\t\\\n+\t\t  _FP_DIV_MEAT_1_udiv_norm_r,\t\t\t\t\\\n+\t\t  _FP_DIV_MEAT_1_udiv_norm_nh,\t\t\t\t\\\n+\t\t  _FP_DIV_MEAT_1_udiv_norm_nl,\t\t\t\t\\\n+\t\t  _FP_DIV_MEAT_1_udiv_norm_y);\t\t\t\t\\\n+      R##_f = (_FP_DIV_MEAT_1_udiv_norm_q\t\t\t\t\\\n+\t       | (_FP_DIV_MEAT_1_udiv_norm_r != 0));\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define _FP_DIV_MEAT_1_udiv(fs, R, X, Y)\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      _FP_W_TYPE _nh, _nl, _q, _r;\t\t\t\\\n-      if (X##_f < Y##_f)\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  R##_e--;\t\t\t\t\t\\\n-\t  _nl = X##_f << _FP_WFRACBITS_##fs;\t\t\\\n-\t  _nh = X##_f >> _FP_WFRACXBITS_##fs;\t\t\\\n-\t}\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  _nl = X##_f << (_FP_WFRACBITS_##fs - 1);\t\\\n-\t  _nh = X##_f >> (_FP_WFRACXBITS_##fs + 1);\t\\\n-\t}\t\t\t\t\t\t\\\n-      udiv_qrnnd (_q, _r, _nh, _nl, Y##_f);\t\t\\\n-      R##_f = _q | (_r != 0);\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+#define _FP_DIV_MEAT_1_udiv(fs, R, X, Y)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_1_udiv_nh, _FP_DIV_MEAT_1_udiv_nl;\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_1_udiv_q, _FP_DIV_MEAT_1_udiv_r;\t\t\\\n+      if (X##_f < Y##_f)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  R##_e--;\t\t\t\t\t\t\t\\\n+\t  _FP_DIV_MEAT_1_udiv_nl = X##_f << _FP_WFRACBITS_##fs;\t\t\\\n+\t  _FP_DIV_MEAT_1_udiv_nh = X##_f >> _FP_WFRACXBITS_##fs;\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  _FP_DIV_MEAT_1_udiv_nl = X##_f << (_FP_WFRACBITS_##fs - 1);\t\\\n+\t  _FP_DIV_MEAT_1_udiv_nh = X##_f >> (_FP_WFRACXBITS_##fs + 1);\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      udiv_qrnnd (_FP_DIV_MEAT_1_udiv_q, _FP_DIV_MEAT_1_udiv_r,\t\t\\\n+\t\t  _FP_DIV_MEAT_1_udiv_nh, _FP_DIV_MEAT_1_udiv_nl,\t\\\n+\t\t  Y##_f);\t\t\t\t\t\t\\\n+      R##_f = _FP_DIV_MEAT_1_udiv_q | (_FP_DIV_MEAT_1_udiv_r != 0);\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n \n-/*\n- * Square root algorithms:\n- * We have just one right now, maybe Newton approximation\n- * should be added for those machines where division is fast.\n- */\n+/* Square root algorithms:\n+   We have just one right now, maybe Newton approximation\n+   should be added for those machines where division is fast.  */\n \n #define _FP_SQRT_MEAT_1(R, S, T, X, q)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      while (q != _FP_WORK_ROUND)\t\t\\\n+      while ((q) != _FP_WORK_ROUND)\t\t\\\n \t{\t\t\t\t\t\\\n-\t  T##_f = S##_f + q;\t\t\t\\\n+\t  T##_f = S##_f + (q);\t\t\t\\\n \t  if (T##_f <= X##_f)\t\t\t\\\n \t    {\t\t\t\t\t\\\n-\t      S##_f = T##_f + q;\t\t\\\n+\t      S##_f = T##_f + (q);\t\t\\\n \t      X##_f -= T##_f;\t\t\t\\\n-\t      R##_f += q;\t\t\t\\\n+\t      R##_f += (q);\t\t\t\\\n \t    }\t\t\t\t\t\\\n \t  _FP_FRAC_SLL_1 (X, 1);\t\t\\\n-\t  q >>= 1;\t\t\t\t\\\n+\t  (q) >>= 1;\t\t\t\t\\\n \t}\t\t\t\t\t\\\n       if (X##_f)\t\t\t\t\\\n \t{\t\t\t\t\t\\\n@@ -336,17 +352,13 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/*\n- * Assembly/disassembly for converting to/from integral types.\n- * No shifting or overflow handled here.\n- */\n+/* Assembly/disassembly for converting to/from integral types.\n+   No shifting or overflow handled here.  */\n \n-#define _FP_FRAC_ASSEMBLE_1(r, X, rsize)\t(r = X##_f)\n-#define _FP_FRAC_DISASSEMBLE_1(X, r, rsize)\t(X##_f = r)\n+#define _FP_FRAC_ASSEMBLE_1(r, X, rsize)\t((r) = X##_f)\n+#define _FP_FRAC_DISASSEMBLE_1(X, r, rsize)\t(X##_f = (r))\n \n \n-/*\n- * Convert FP values between word sizes\n- */\n+/* Convert FP values between word sizes.  */\n \n #define _FP_FRAC_COPY_1_1(D, S)\t\t(D##_f = S##_f)"}, {"sha": "50028f72d29287cab54bf0b39fabb2017c161cd3", "filename": "libgcc/soft-fp/op-2.h", "status": "modified", "additions": 223, "deletions": 179, "changes": 402, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fop-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fop-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fop-2.h?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -122,16 +122,16 @@\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       if (X##_f1)\t\t\t\t\\\n-\t__FP_CLZ (R, X##_f1);\t\t\t\\\n+\t__FP_CLZ ((R), X##_f1);\t\t\t\\\n       else\t\t\t\t\t\\\n \t{\t\t\t\t\t\\\n-\t  __FP_CLZ (R, X##_f0);\t\t\t\\\n-\t  R += _FP_W_TYPE_SIZE;\t\t\t\\\n+\t  __FP_CLZ ((R), X##_f0);\t\t\\\n+\t  (R) += _FP_W_TYPE_SIZE;\t\t\\\n \t}\t\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* Predicates */\n+/* Predicates.  */\n #define _FP_FRAC_NEGP_2(X)\t((_FP_WS_TYPE) X##_f1 < 0)\n #define _FP_FRAC_ZEROP_2(X)\t((X##_f1 | X##_f0) == 0)\n #define _FP_FRAC_OVERP_2(fs, X)\t(_FP_FRAC_HIGH_##fs (X) & _FP_OVERFLOW_##fs)\n@@ -148,21 +148,19 @@\n #define _FP_MINFRAC_2\t\t0, 1\n #define _FP_MAXFRAC_2\t\t(~(_FP_WS_TYPE) 0), (~(_FP_WS_TYPE) 0)\n \n-/*\n- * Internals\n- */\n+/* Internals.  */\n \n #define __FP_FRAC_SET_2(X, I1, I0)\t(X##_f0 = I0, X##_f1 = I1)\n \n #define __FP_CLZ_2(R, xh, xl)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       if (xh)\t\t\t\t\t\\\n-\t__FP_CLZ (R, xh);\t\t\t\\\n+\t__FP_CLZ ((R), xh);\t\t\t\\\n       else\t\t\t\t\t\\\n \t{\t\t\t\t\t\\\n-\t  __FP_CLZ (R, xl);\t\t\t\\\n-\t  R += _FP_W_TYPE_SIZE;\t\t\t\\\n+\t  __FP_CLZ ((R), xl);\t\t\t\\\n+\t  (R) += _FP_W_TYPE_SIZE;\t\t\\\n \t}\t\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n@@ -182,12 +180,12 @@\n   (rh = xh - yh - ((rl = xl - yl) > xl))\n # endif\n # ifndef __FP_FRAC_DEC_2\n-#  define __FP_FRAC_DEC_2(xh, xl, yh, yl)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      UWtype _t = xl;\t\t\t\t\\\n-      xh -= yh + ((xl -= yl) > _t);\t\t\\\n-    }\t\t\t\t\t\t\\\n+#  define __FP_FRAC_DEC_2(xh, xl, yh, yl)\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      UWtype __FP_FRAC_DEC_2_t = xl;\t\t\t\\\n+      xh -= yh + ((xl -= yl) > __FP_FRAC_DEC_2_t);\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n # endif\n \n@@ -205,91 +203,95 @@\n \n #endif\n \n-/*\n- * Unpack the raw bits of a native fp value.  Do not classify or\n- * normalize the data.\n- */\n+/* Unpack the raw bits of a native fp value.  Do not classify or\n+   normalize the data.  */\n \n-#define _FP_UNPACK_RAW_2(fs, X, val)\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs _flo;\t\t\\\n-      _flo.flt = (val);\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-      X##_f0 = _flo.bits.frac0;\t\t\t\\\n-      X##_f1 = _flo.bits.frac1;\t\t\t\\\n-      X##_e  = _flo.bits.exp;\t\t\t\\\n-      X##_s  = _flo.bits.sign;\t\t\t\\\n-    }\t\t\t\t\t\t\\\n+#define _FP_UNPACK_RAW_2(fs, X, val)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      union _FP_UNION_##fs _FP_UNPACK_RAW_2_flo;\t\\\n+      _FP_UNPACK_RAW_2_flo.flt = (val);\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      X##_f0 = _FP_UNPACK_RAW_2_flo.bits.frac0;\t\t\\\n+      X##_f1 = _FP_UNPACK_RAW_2_flo.bits.frac1;\t\t\\\n+      X##_e  = _FP_UNPACK_RAW_2_flo.bits.exp;\t\t\\\n+      X##_s  = _FP_UNPACK_RAW_2_flo.bits.sign;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define _FP_UNPACK_RAW_2_P(fs, X, val)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs *_flo = (union _FP_UNION_##fs *) (val);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      X##_f0 = _flo->bits.frac0;\t\t\t\t\t\\\n-      X##_f1 = _flo->bits.frac1;\t\t\t\t\t\\\n-      X##_e  = _flo->bits.exp;\t\t\t\t\t\t\\\n-      X##_s  = _flo->bits.sign;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+#define _FP_UNPACK_RAW_2_P(fs, X, val)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      union _FP_UNION_##fs *_FP_UNPACK_RAW_2_P_flo\t\\\n+\t= (union _FP_UNION_##fs *) (val);\t\t\\\n+\t\t\t\t\t\t\t\\\n+      X##_f0 = _FP_UNPACK_RAW_2_P_flo->bits.frac0;\t\\\n+      X##_f1 = _FP_UNPACK_RAW_2_P_flo->bits.frac1;\t\\\n+      X##_e  = _FP_UNPACK_RAW_2_P_flo->bits.exp;\t\\\n+      X##_s  = _FP_UNPACK_RAW_2_P_flo->bits.sign;\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n \n-/*\n- * Repack the raw bits of a native fp value.\n- */\n+/* Repack the raw bits of a native fp value.  */\n \n #define _FP_PACK_RAW_2(fs, val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs _flo;\t\t\\\n+      union _FP_UNION_##fs _FP_PACK_RAW_2_flo;\t\\\n \t\t\t\t\t\t\\\n-      _flo.bits.frac0 = X##_f0;\t\t\t\\\n-      _flo.bits.frac1 = X##_f1;\t\t\t\\\n-      _flo.bits.exp   = X##_e;\t\t\t\\\n-      _flo.bits.sign  = X##_s;\t\t\t\\\n+      _FP_PACK_RAW_2_flo.bits.frac0 = X##_f0;\t\\\n+      _FP_PACK_RAW_2_flo.bits.frac1 = X##_f1;\t\\\n+      _FP_PACK_RAW_2_flo.bits.exp   = X##_e;\t\\\n+      _FP_PACK_RAW_2_flo.bits.sign  = X##_s;\t\\\n \t\t\t\t\t\t\\\n-      (val) = _flo.flt;\t\t\t\t\\\n+      (val) = _FP_PACK_RAW_2_flo.flt;\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define _FP_PACK_RAW_2_P(fs, val, X)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs *_flo = (union _FP_UNION_##fs *) (val);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      _flo->bits.frac0 = X##_f0;\t\t\t\t\t\\\n-      _flo->bits.frac1 = X##_f1;\t\t\t\t\t\\\n-      _flo->bits.exp   = X##_e;\t\t\t\t\t\t\\\n-      _flo->bits.sign  = X##_s;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+#define _FP_PACK_RAW_2_P(fs, val, X)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      union _FP_UNION_##fs *_FP_PACK_RAW_2_P_flo\t\\\n+\t= (union _FP_UNION_##fs *) (val);\t\t\\\n+\t\t\t\t\t\t\t\\\n+      _FP_PACK_RAW_2_P_flo->bits.frac0 = X##_f0;\t\\\n+      _FP_PACK_RAW_2_P_flo->bits.frac1 = X##_f1;\t\\\n+      _FP_PACK_RAW_2_P_flo->bits.exp   = X##_e;\t\t\\\n+      _FP_PACK_RAW_2_P_flo->bits.sign  = X##_s;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n \n-/*\n- * Multiplication algorithms:\n- */\n+/* Multiplication algorithms: */\n \n /* Given a 1W * 1W => 2W primitive, do the extended multiplication.  */\n \n #define _FP_MUL_MEAT_DW_2_wide(wfracbits, R, X, Y, doit)\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_b);\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_c);\t\t\t\t\t\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_DW_2_wide_b);\t\t\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_DW_2_wide_c);\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      doit (_FP_FRAC_WORD_4 (R, 1), _FP_FRAC_WORD_4 (R, 0), X##_f0, Y##_f0); \\\n-      doit (_b_f1, _b_f0, X##_f0, Y##_f1);\t\t\t\t\\\n-      doit (_c_f1, _c_f0, X##_f1, Y##_f0);\t\t\t\t\\\n-      doit (_FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2), X##_f1, Y##_f1); \\\n+      doit (_FP_FRAC_WORD_4 (R, 1), _FP_FRAC_WORD_4 (R, 0),\t\t\\\n+\t    X##_f0, Y##_f0);\t\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_2_wide_b_f1, _FP_MUL_MEAT_DW_2_wide_b_f0,\t\\\n+\t    X##_f0, Y##_f1);\t\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_2_wide_c_f1, _FP_MUL_MEAT_DW_2_wide_c_f0,\t\\\n+\t    X##_f1, Y##_f0);\t\t\t\t\t\t\\\n+      doit (_FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2),\t\t\\\n+\t    X##_f1, Y##_f1);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2),\t\\\n-\t\t       _FP_FRAC_WORD_4 (R, 1), 0, _b_f1, _b_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_4 (R, 1), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_2_wide_b_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_2_wide_b_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2),\t\\\n \t\t       _FP_FRAC_WORD_4 (R, 1));\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2),\t\\\n-\t\t       _FP_FRAC_WORD_4 (R, 1), 0, _c_f1, _c_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_4 (R, 1), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_2_wide_c_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_2_wide_c_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2),\t\\\n \t\t       _FP_FRAC_WORD_4 (R, 1));\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -298,16 +300,18 @@\n #define _FP_MUL_MEAT_2_wide(wfracbits, R, X, Y, doit)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_4 (_z);\t\t\t\t\t\t\\\n+      _FP_FRAC_DECL_4 (_FP_MUL_MEAT_2_wide_z);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      _FP_MUL_MEAT_DW_2_wide (wfracbits, _z, X, Y, doit);\t\t\\\n+      _FP_MUL_MEAT_DW_2_wide ((wfracbits), _FP_MUL_MEAT_2_wide_z,\t\\\n+\t\t\t      X, Y, doit);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* Normalize since we know where the msb of the multiplicands\t\\\n \t were (bit B), we know that the msb of the of the product is\t\\\n \t at either 2B or 2B-1.  */\t\t\t\t\t\\\n-      _FP_FRAC_SRS_4 (_z, wfracbits-1, 2*wfracbits);\t\t\t\\\n-      R##_f0 = _FP_FRAC_WORD_4 (_z, 0);\t\t\t\t\t\\\n-      R##_f1 = _FP_FRAC_WORD_4 (_z, 1);\t\t\t\t\t\\\n+      _FP_FRAC_SRS_4 (_FP_MUL_MEAT_2_wide_z, (wfracbits)-1,\t\t\\\n+\t\t      2*(wfracbits));\t\t\t\t\t\\\n+      R##_f0 = _FP_FRAC_WORD_4 (_FP_MUL_MEAT_2_wide_z, 0);\t\t\\\n+      R##_f1 = _FP_FRAC_WORD_4 (_FP_MUL_MEAT_2_wide_z, 1);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -318,81 +322,103 @@\n #define _FP_MUL_MEAT_DW_2_wide_3mul(wfracbits, R, X, Y, doit)\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_b);\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_c);\t\t\t\t\t\t\\\n-      _FP_W_TYPE _d;\t\t\t\t\t\t\t\\\n-      int _c1, _c2;\t\t\t\t\t\t\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_DW_2_wide_3mul_b);\t\t\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_DW_2_wide_3mul_c);\t\t\t\\\n+      _FP_W_TYPE _FP_MUL_MEAT_DW_2_wide_3mul_d;\t\t\t\t\\\n+      int _FP_MUL_MEAT_DW_2_wide_3mul_c1;\t\t\t\t\\\n+      int _FP_MUL_MEAT_DW_2_wide_3mul_c2;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      _b_f0 = X##_f0 + X##_f1;\t\t\t\t\t\t\\\n-      _c1 = _b_f0 < X##_f0;\t\t\t\t\t\t\\\n-      _b_f1 = Y##_f0 + Y##_f1;\t\t\t\t\t\t\\\n-      _c2 = _b_f1 < Y##_f0;\t\t\t\t\t\t\\\n-      doit (_d, _FP_FRAC_WORD_4 (R, 0), X##_f0, Y##_f0);\t\t\\\n-      doit (_FP_FRAC_WORD_4 (R, 2), _FP_FRAC_WORD_4 (R, 1), _b_f0, _b_f1); \\\n-      doit (_c_f1, _c_f0, X##_f1, Y##_f1);\t\t\t\t\\\n+      _FP_MUL_MEAT_DW_2_wide_3mul_b_f0 = X##_f0 + X##_f1;\t\t\\\n+      _FP_MUL_MEAT_DW_2_wide_3mul_c1\t\t\t\t\t\\\n+\t= _FP_MUL_MEAT_DW_2_wide_3mul_b_f0 < X##_f0;\t\t\t\\\n+      _FP_MUL_MEAT_DW_2_wide_3mul_b_f1 = Y##_f0 + Y##_f1;\t\t\\\n+      _FP_MUL_MEAT_DW_2_wide_3mul_c2\t\t\t\t\t\\\n+\t= _FP_MUL_MEAT_DW_2_wide_3mul_b_f1 < Y##_f0;\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_2_wide_3mul_d, _FP_FRAC_WORD_4 (R, 0),\t\\\n+\t    X##_f0, Y##_f0);\t\t\t\t\t\t\\\n+      doit (_FP_FRAC_WORD_4 (R, 2), _FP_FRAC_WORD_4 (R, 1),\t\t\\\n+\t    _FP_MUL_MEAT_DW_2_wide_3mul_b_f0,\t\t\t\t\\\n+\t    _FP_MUL_MEAT_DW_2_wide_3mul_b_f1);\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_2_wide_3mul_c_f1,\t\t\t\t\\\n+\t    _FP_MUL_MEAT_DW_2_wide_3mul_c_f0, X##_f1, Y##_f1);\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      _b_f0 &= -_c2;\t\t\t\t\t\t\t\\\n-      _b_f1 &= -_c1;\t\t\t\t\t\t\t\\\n+      _FP_MUL_MEAT_DW_2_wide_3mul_b_f0\t\t\t\t\t\\\n+\t&= -_FP_MUL_MEAT_DW_2_wide_3mul_c2;\t\t\t\t\\\n+      _FP_MUL_MEAT_DW_2_wide_3mul_b_f1\t\t\t\t\t\\\n+\t&= -_FP_MUL_MEAT_DW_2_wide_3mul_c1;\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2),\t\\\n-\t\t       _FP_FRAC_WORD_4 (R, 1), (_c1 & _c2), 0, _d,\t\\\n+\t\t       _FP_FRAC_WORD_4 (R, 1),\t\t\t\t\\\n+\t\t       (_FP_MUL_MEAT_DW_2_wide_3mul_c1\t\t\t\\\n+\t\t\t& _FP_MUL_MEAT_DW_2_wide_3mul_c2), 0,\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_2_wide_3mul_d,\t\t\t\\\n \t\t       0, _FP_FRAC_WORD_4 (R, 2), _FP_FRAC_WORD_4 (R, 1)); \\\n       __FP_FRAC_ADDI_2 (_FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2),\t\\\n-\t\t\t_b_f0);\t\t\t\t\t\t\\\n+\t\t\t_FP_MUL_MEAT_DW_2_wide_3mul_b_f0);\t\t\\\n       __FP_FRAC_ADDI_2 (_FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2),\t\\\n-\t\t\t_b_f1);\t\t\t\t\t\t\\\n+\t\t\t_FP_MUL_MEAT_DW_2_wide_3mul_b_f1);\t\t\\\n       __FP_FRAC_DEC_3 (_FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2),\t\\\n \t\t       _FP_FRAC_WORD_4 (R, 1),\t\t\t\t\\\n-\t\t       0, _d, _FP_FRAC_WORD_4 (R, 0));\t\t\t\\\n+\t\t       0, _FP_MUL_MEAT_DW_2_wide_3mul_d,\t\t\\\n+\t\t       _FP_FRAC_WORD_4 (R, 0));\t\t\t\t\\\n       __FP_FRAC_DEC_3 (_FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2),\t\\\n-\t\t       _FP_FRAC_WORD_4 (R, 1), 0, _c_f1, _c_f0);\t\\\n+\t\t       _FP_FRAC_WORD_4 (R, 1), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_2_wide_3mul_c_f1,\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_2_wide_3mul_c_f0);\t\t\\\n       __FP_FRAC_ADD_2 (_FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2),\t\\\n-\t\t       _c_f1, _c_f0,\t\t\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_2_wide_3mul_c_f1,\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_2_wide_3mul_c_f0,\t\t\\\n \t\t       _FP_FRAC_WORD_4 (R, 3), _FP_FRAC_WORD_4 (R, 2));\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n #define _FP_MUL_MEAT_2_wide_3mul(wfracbits, R, X, Y, doit)\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_4 (_z);\t\t\t\t\t\t\\\n+      _FP_FRAC_DECL_4 (_FP_MUL_MEAT_2_wide_3mul_z);\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      _FP_MUL_MEAT_DW_2_wide_3mul (wfracbits, _z, X, Y, doit);\t\t\\\n+      _FP_MUL_MEAT_DW_2_wide_3mul ((wfracbits),\t\t\t\t\\\n+\t\t\t\t   _FP_MUL_MEAT_2_wide_3mul_z,\t\t\\\n+\t\t\t\t   X, Y, doit);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* Normalize since we know where the msb of the multiplicands\t\\\n \t were (bit B), we know that the msb of the of the product is\t\\\n \t at either 2B or 2B-1.  */\t\t\t\t\t\\\n-      _FP_FRAC_SRS_4 (_z, wfracbits-1, 2*wfracbits);\t\t\t\\\n-      R##_f0 = _FP_FRAC_WORD_4 (_z, 0);\t\t\t\t\t\\\n-      R##_f1 = _FP_FRAC_WORD_4 (_z, 1);\t\t\t\t\t\\\n+      _FP_FRAC_SRS_4 (_FP_MUL_MEAT_2_wide_3mul_z,\t\t\t\\\n+\t\t      (wfracbits)-1, 2*(wfracbits));\t\t\t\\\n+      R##_f0 = _FP_FRAC_WORD_4 (_FP_MUL_MEAT_2_wide_3mul_z, 0);\t\t\\\n+      R##_f1 = _FP_FRAC_WORD_4 (_FP_MUL_MEAT_2_wide_3mul_z, 1);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n #define _FP_MUL_MEAT_DW_2_gmp(wfracbits, R, X, Y)\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      _FP_W_TYPE _x[2], _y[2];\t\t\t\t\\\n-      _x[0] = X##_f0;\t\t\t\t\t\\\n-      _x[1] = X##_f1;\t\t\t\t\t\\\n-      _y[0] = Y##_f0;\t\t\t\t\t\\\n-      _y[1] = Y##_f1;\t\t\t\t\t\\\n+      _FP_W_TYPE _FP_MUL_MEAT_DW_2_gmp_x[2];\t\t\\\n+      _FP_W_TYPE _FP_MUL_MEAT_DW_2_gmp_y[2];\t\t\\\n+      _FP_MUL_MEAT_DW_2_gmp_x[0] = X##_f0;\t\t\\\n+      _FP_MUL_MEAT_DW_2_gmp_x[1] = X##_f1;\t\t\\\n+      _FP_MUL_MEAT_DW_2_gmp_y[0] = Y##_f0;\t\t\\\n+      _FP_MUL_MEAT_DW_2_gmp_y[1] = Y##_f1;\t\t\\\n \t\t\t\t\t\t\t\\\n-      mpn_mul_n (R##_f, _x, _y, 2);\t\t\t\\\n+      mpn_mul_n (R##_f, _FP_MUL_MEAT_DW_2_gmp_x,\t\\\n+\t\t _FP_MUL_MEAT_DW_2_gmp_y, 2);\t\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n #define _FP_MUL_MEAT_2_gmp(wfracbits, R, X, Y)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_4 (_z);\t\t\t\t\t\t\\\n+      _FP_FRAC_DECL_4 (_FP_MUL_MEAT_2_gmp_z);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      _FP_MUL_MEAT_DW_2_gmp (wfracbits, _z, X, Y);\t\t\t\\\n+      _FP_MUL_MEAT_DW_2_gmp ((wfracbits), _FP_MUL_MEAT_2_gmp_z, X, Y);\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* Normalize since we know where the msb of the multiplicands\t\\\n \t were (bit B), we know that the msb of the of the product is\t\\\n \t at either 2B or 2B-1.  */\t\t\t\t\t\\\n-      _FP_FRAC_SRS_4 (_z, wfracbits-1, 2*wfracbits);\t\t\t\\\n-      R##_f0 = _z_f[0];\t\t\t\t\t\t\t\\\n-      R##_f1 = _z_f[1];\t\t\t\t\t\t\t\\\n+      _FP_FRAC_SRS_4 (_FP_MUL_MEAT_2_gmp_z, (wfracbits)-1,\t\t\\\n+\t\t      2*(wfracbits));\t\t\t\t\t\\\n+      R##_f0 = _FP_MUL_MEAT_2_gmp_z_f[0];\t\t\t\t\\\n+      R##_f1 = _FP_MUL_MEAT_2_gmp_z_f[1];\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -428,7 +454,7 @@\n \t\t\t\t       _p240, _q240, _r240, _s240;\t\\\n       UDItype _t240, _u240, _v240, _w240, _x240, _y240 = 0;\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      if (wfracbits < 106 || wfracbits > 120)\t\t\t\t\\\n+      if ((wfracbits) < 106 || (wfracbits) > 120)\t\t\t\\\n \tabort ();\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       setfetz;\t\t\t\t\t\t\t\t\\\n@@ -500,116 +526,136 @@\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/*\n- * Division algorithms:\n- */\n+/* Division algorithms: */\n \n #define _FP_DIV_MEAT_2_udiv(fs, R, X, Y)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_W_TYPE _n_f2, _n_f1, _n_f0, _r_f1, _r_f0, _m_f1, _m_f0;\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_2_udiv_n_f2;\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_2_udiv_n_f1;\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_2_udiv_n_f0;\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_2_udiv_r_f1;\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_2_udiv_r_f0;\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_2_udiv_m_f1;\t\t\t\t\\\n+      _FP_W_TYPE _FP_DIV_MEAT_2_udiv_m_f0;\t\t\t\t\\\n       if (_FP_FRAC_GE_2 (X, Y))\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  _n_f2 = X##_f1 >> 1;\t\t\t\t\t\t\\\n-\t  _n_f1 = X##_f1 << (_FP_W_TYPE_SIZE - 1) | X##_f0 >> 1;\t\\\n-\t  _n_f0 = X##_f0 << (_FP_W_TYPE_SIZE - 1);\t\t\t\\\n+\t  _FP_DIV_MEAT_2_udiv_n_f2 = X##_f1 >> 1;\t\t\t\\\n+\t  _FP_DIV_MEAT_2_udiv_n_f1\t\t\t\t\t\\\n+\t    = X##_f1 << (_FP_W_TYPE_SIZE - 1) | X##_f0 >> 1;\t\t\\\n+\t  _FP_DIV_MEAT_2_udiv_n_f0\t\t\t\t\t\\\n+\t    = X##_f0 << (_FP_W_TYPE_SIZE - 1);\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  R##_e--;\t\t\t\t\t\t\t\\\n-\t  _n_f2 = X##_f1;\t\t\t\t\t\t\\\n-\t  _n_f1 = X##_f0;\t\t\t\t\t\t\\\n-\t  _n_f0 = 0;\t\t\t\t\t\t\t\\\n+\t  _FP_DIV_MEAT_2_udiv_n_f2 = X##_f1;\t\t\t\t\\\n+\t  _FP_DIV_MEAT_2_udiv_n_f1 = X##_f0;\t\t\t\t\\\n+\t  _FP_DIV_MEAT_2_udiv_n_f0 = 0;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* Normalize, i.e. make the most significant bit of the\t\t\\\n-\t denominator set. */\t\t\t\t\t\t\\\n+\t denominator set.  */\t\t\t\t\t\t\\\n       _FP_FRAC_SLL_2 (Y, _FP_WFRACXBITS_##fs);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      udiv_qrnnd (R##_f1, _r_f1, _n_f2, _n_f1, Y##_f1);\t\t\t\\\n-      umul_ppmm (_m_f1, _m_f0, R##_f1, Y##_f0);\t\t\t\t\\\n-      _r_f0 = _n_f0;\t\t\t\t\t\t\t\\\n-      if (_FP_FRAC_GT_2 (_m, _r))\t\t\t\t\t\\\n+      udiv_qrnnd (R##_f1, _FP_DIV_MEAT_2_udiv_r_f1,\t\t\t\\\n+\t\t  _FP_DIV_MEAT_2_udiv_n_f2, _FP_DIV_MEAT_2_udiv_n_f1,\t\\\n+\t\t  Y##_f1);\t\t\t\t\t\t\\\n+      umul_ppmm (_FP_DIV_MEAT_2_udiv_m_f1, _FP_DIV_MEAT_2_udiv_m_f0,\t\\\n+\t\t R##_f1, Y##_f0);\t\t\t\t\t\\\n+      _FP_DIV_MEAT_2_udiv_r_f0 = _FP_DIV_MEAT_2_udiv_n_f0;\t\t\\\n+      if (_FP_FRAC_GT_2 (_FP_DIV_MEAT_2_udiv_m, _FP_DIV_MEAT_2_udiv_r))\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  R##_f1--;\t\t\t\t\t\t\t\\\n-\t  _FP_FRAC_ADD_2 (_r, Y, _r);\t\t\t\t\t\\\n-\t  if (_FP_FRAC_GE_2 (_r, Y) && _FP_FRAC_GT_2 (_m, _r))\t\t\\\n+\t  _FP_FRAC_ADD_2 (_FP_DIV_MEAT_2_udiv_r, Y,\t\t\t\\\n+\t\t\t  _FP_DIV_MEAT_2_udiv_r);\t\t\t\\\n+\t  if (_FP_FRAC_GE_2 (_FP_DIV_MEAT_2_udiv_r, Y)\t\t\t\\\n+\t      && _FP_FRAC_GT_2 (_FP_DIV_MEAT_2_udiv_m,\t\t\t\\\n+\t\t\t\t_FP_DIV_MEAT_2_udiv_r))\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      R##_f1--;\t\t\t\t\t\t\t\\\n-\t      _FP_FRAC_ADD_2 (_r, Y, _r);\t\t\t\t\\\n+\t      _FP_FRAC_ADD_2 (_FP_DIV_MEAT_2_udiv_r, Y,\t\t\t\\\n+\t\t\t      _FP_DIV_MEAT_2_udiv_r);\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DEC_2 (_r, _m);\t\t\t\t\t\t\\\n+      _FP_FRAC_DEC_2 (_FP_DIV_MEAT_2_udiv_r, _FP_DIV_MEAT_2_udiv_m);\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      if (_r_f1 == Y##_f1)\t\t\t\t\t\t\\\n+      if (_FP_DIV_MEAT_2_udiv_r_f1 == Y##_f1)\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  /* This is a special case, not an optimization\t\t\\\n-\t     (_r/Y##_f1 would not fit into UWtype).\t\t\t\\\n-\t     As _r is guaranteed to be < Y,  R##_f0 can be either\t\\\n-\t     (UWtype)-1 or (UWtype)-2.  But as we know what kind\t\\\n-\t     of bits it is (sticky, guard, round),  we don't care.\t\\\n-\t     We also don't care what the reminder is,  because the\t\\\n-\t     guard bit will be set anyway.  -jj */\t\t\t\\\n+\t     (_FP_DIV_MEAT_2_udiv_r/Y##_f1 would not fit into UWtype).\t\\\n+\t     As _FP_DIV_MEAT_2_udiv_r is guaranteed to be < Y,\t\t\\\n+\t     R##_f0 can be either (UWtype)-1 or (UWtype)-2.  But as we\t\\\n+\t     know what kind of bits it is (sticky, guard, round),\t\\\n+\t     we don't care.  We also don't care what the reminder is,\t\\\n+\t     because the guard bit will be set anyway.  -jj */\t\t\\\n \t  R##_f0 = -1;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  udiv_qrnnd (R##_f0, _r_f1, _r_f1, _r_f0, Y##_f1);\t\t\\\n-\t  umul_ppmm (_m_f1, _m_f0, R##_f0, Y##_f0);\t\t\t\\\n-\t  _r_f0 = 0;\t\t\t\t\t\t\t\\\n-\t  if (_FP_FRAC_GT_2 (_m, _r))\t\t\t\t\t\\\n+\t  udiv_qrnnd (R##_f0, _FP_DIV_MEAT_2_udiv_r_f1,\t\t\t\\\n+\t\t      _FP_DIV_MEAT_2_udiv_r_f1,\t\t\t\t\\\n+\t\t      _FP_DIV_MEAT_2_udiv_r_f0, Y##_f1);\t\t\\\n+\t  umul_ppmm (_FP_DIV_MEAT_2_udiv_m_f1,\t\t\t\t\\\n+\t\t     _FP_DIV_MEAT_2_udiv_m_f0, R##_f0, Y##_f0);\t\t\\\n+\t  _FP_DIV_MEAT_2_udiv_r_f0 = 0;\t\t\t\t\t\\\n+\t  if (_FP_FRAC_GT_2 (_FP_DIV_MEAT_2_udiv_m,\t\t\t\\\n+\t\t\t     _FP_DIV_MEAT_2_udiv_r))\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      R##_f0--;\t\t\t\t\t\t\t\\\n-\t      _FP_FRAC_ADD_2 (_r, Y, _r);\t\t\t\t\\\n-\t      if (_FP_FRAC_GE_2 (_r, Y) && _FP_FRAC_GT_2 (_m, _r))\t\\\n+\t      _FP_FRAC_ADD_2 (_FP_DIV_MEAT_2_udiv_r, Y,\t\t\t\\\n+\t\t\t      _FP_DIV_MEAT_2_udiv_r);\t\t\t\\\n+\t      if (_FP_FRAC_GE_2 (_FP_DIV_MEAT_2_udiv_r, Y)\t\t\\\n+\t\t  && _FP_FRAC_GT_2 (_FP_DIV_MEAT_2_udiv_m,\t\t\\\n+\t\t\t\t    _FP_DIV_MEAT_2_udiv_r))\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n \t\t  R##_f0--;\t\t\t\t\t\t\\\n-\t\t  _FP_FRAC_ADD_2 (_r, Y, _r);\t\t\t\t\\\n+\t\t  _FP_FRAC_ADD_2 (_FP_DIV_MEAT_2_udiv_r, Y,\t\t\\\n+\t\t\t\t  _FP_DIV_MEAT_2_udiv_r);\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n-\t  if (!_FP_FRAC_EQ_2 (_r, _m))\t\t\t\t\t\\\n+\t  if (!_FP_FRAC_EQ_2 (_FP_DIV_MEAT_2_udiv_r,\t\t\t\\\n+\t\t\t      _FP_DIV_MEAT_2_udiv_m))\t\t\t\\\n \t    R##_f0 |= _FP_WORK_STICKY;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n \n-/*\n- * Square root algorithms:\n- * We have just one right now, maybe Newton approximation\n- * should be added for those machines where division is fast.\n- */\n+/* Square root algorithms:\n+   We have just one right now, maybe Newton approximation\n+   should be added for those machines where division is fast.  */\n \n #define _FP_SQRT_MEAT_2(R, S, T, X, q)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       while (q)\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n-\t  T##_f1 = S##_f1 + q;\t\t\t\t\t\\\n+\t  T##_f1 = S##_f1 + (q);\t\t\t\t\\\n \t  if (T##_f1 <= X##_f1)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      S##_f1 = T##_f1 + q;\t\t\t\t\\\n+\t      S##_f1 = T##_f1 + (q);\t\t\t\t\\\n \t      X##_f1 -= T##_f1;\t\t\t\t\t\\\n-\t      R##_f1 += q;\t\t\t\t\t\\\n+\t      R##_f1 += (q);\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  _FP_FRAC_SLL_2 (X, 1);\t\t\t\t\\\n-\t  q >>= 1;\t\t\t\t\t\t\\\n+\t  (q) >>= 1;\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n-      q = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\t\\\n-      while (q != _FP_WORK_ROUND)\t\t\t\t\\\n+      (q) = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\t\\\n+      while ((q) != _FP_WORK_ROUND)\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n-\t  T##_f0 = S##_f0 + q;\t\t\t\t\t\\\n+\t  T##_f0 = S##_f0 + (q);\t\t\t\t\\\n \t  T##_f1 = S##_f1;\t\t\t\t\t\\\n \t  if (T##_f1 < X##_f1\t\t\t\t\t\\\n \t      || (T##_f1 == X##_f1 && T##_f0 <= X##_f0))\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      S##_f0 = T##_f0 + q;\t\t\t\t\\\n+\t      S##_f0 = T##_f0 + (q);\t\t\t\t\\\n \t      S##_f1 += (T##_f0 > S##_f0);\t\t\t\\\n \t      _FP_FRAC_DEC_2 (X, T);\t\t\t\t\\\n-\t      R##_f0 += q;\t\t\t\t\t\\\n+\t      R##_f0 += (q);\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  _FP_FRAC_SLL_2 (X, 1);\t\t\t\t\\\n-\t  q >>= 1;\t\t\t\t\t\t\\\n+\t  (q) >>= 1;\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n       if (X##_f0 | X##_f1)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n@@ -622,31 +668,29 @@\n   while (0)\n \n \n-/*\n- * Assembly/disassembly for converting to/from integral types.\n- * No shifting or overflow handled here.\n- */\n+/* Assembly/disassembly for converting to/from integral types.\n+   No shifting or overflow handled here.  */\n \n #define _FP_FRAC_ASSEMBLE_2(r, X, rsize)\t\\\n-  (void) ((rsize <= _FP_W_TYPE_SIZE)\t\t\\\n-\t  ? ({ r = X##_f0; })\t\t\t\\\n+  (void) (((rsize) <= _FP_W_TYPE_SIZE)\t\t\\\n+\t  ? ({ (r) = X##_f0; })\t\t\t\\\n \t  : ({\t\t\t\t\t\\\n-\t      r = X##_f1;\t\t\t\\\n-\t      r <<= _FP_W_TYPE_SIZE;\t\t\\\n-\t      r += X##_f0;\t\t\t\\\n+\t      (r) = X##_f1;\t\t\t\\\n+\t      (r) <<= _FP_W_TYPE_SIZE;\t\t\\\n+\t      (r) += X##_f0;\t\t\t\\\n \t    }))\n \n-#define _FP_FRAC_DISASSEMBLE_2(X, r, rsize)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      X##_f0 = r;\t\t\t\t\t\t\t\\\n-      X##_f1 = (rsize <= _FP_W_TYPE_SIZE ? 0 : r >> _FP_W_TYPE_SIZE);\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+#define _FP_FRAC_DISASSEMBLE_2(X, r, rsize)\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      X##_f0 = (r);\t\t\t\t\\\n+      X##_f1 = ((rsize) <= _FP_W_TYPE_SIZE\t\\\n+\t\t? 0\t\t\t\t\\\n+\t\t: (r) >> _FP_W_TYPE_SIZE);\t\\\n+    }\t\t\t\t\t\t\\\n   while (0)\n \n-/*\n- * Convert FP values between word sizes\n- */\n+/* Convert FP values between word sizes.  */\n \n #define _FP_FRAC_COPY_1_2(D, S)\t\t(D##_f = S##_f0)\n "}, {"sha": "d65c08afcce5ef3181e6adb18597b35ae8228304", "filename": "libgcc/soft-fp/op-4.h", "status": "modified", "additions": 429, "deletions": 321, "changes": 750, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fop-4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fop-4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fop-4.h?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -39,91 +39,121 @@\n #define _FP_FRAC_LOW_4(X)\t(X##_f[0])\n #define _FP_FRAC_WORD_4(X, w)\t(X##_f[w])\n \n-#define _FP_FRAC_SLL_4(X, N)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      _FP_I_TYPE _up, _down, _skip, _i;\t\t\t\\\n-      _skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\\\n-      _up = (N) % _FP_W_TYPE_SIZE;\t\t\t\\\n-      _down = _FP_W_TYPE_SIZE - _up;\t\t\t\\\n-      if (!_up)\t\t\t\t\t\t\\\n-\tfor (_i = 3; _i >= _skip; --_i)\t\t\t\\\n-\t  X##_f[_i] = X##_f[_i-_skip];\t\t\t\\\n-      else\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  for (_i = 3; _i > _skip; --_i)\t\t\\\n-\t    X##_f[_i] = (X##_f[_i-_skip] << _up\t\t\\\n-\t\t\t | X##_f[_i-_skip-1] >> _down);\t\\\n-\t  X##_f[_i--] = X##_f[0] << _up;\t\t\\\n-\t}\t\t\t\t\t\t\\\n-      for (; _i >= 0; --_i)\t\t\t\t\\\n-\tX##_f[_i] = 0;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+#define _FP_FRAC_SLL_4(X, N)\t\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SLL_4_up, _FP_FRAC_SLL_4_down;\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SLL_4_skip, _FP_FRAC_SLL_4_i;\t\t\t\\\n+      _FP_FRAC_SLL_4_skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SLL_4_up = (N) % _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SLL_4_down = _FP_W_TYPE_SIZE - _FP_FRAC_SLL_4_up;\t\\\n+      if (!_FP_FRAC_SLL_4_up)\t\t\t\t\t\t\\\n+\tfor (_FP_FRAC_SLL_4_i = 3;\t\t\t\t\t\\\n+\t     _FP_FRAC_SLL_4_i >= _FP_FRAC_SLL_4_skip;\t\t\t\\\n+\t     --_FP_FRAC_SLL_4_i)\t\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SLL_4_i]\t\t\t\t\t\\\n+\t    = X##_f[_FP_FRAC_SLL_4_i-_FP_FRAC_SLL_4_skip];\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  for (_FP_FRAC_SLL_4_i = 3;\t\t\t\t\t\\\n+\t       _FP_FRAC_SLL_4_i > _FP_FRAC_SLL_4_skip;\t\t\t\\\n+\t       --_FP_FRAC_SLL_4_i)\t\t\t\t\t\\\n+\t    X##_f[_FP_FRAC_SLL_4_i]\t\t\t\t\t\\\n+\t      = ((X##_f[_FP_FRAC_SLL_4_i-_FP_FRAC_SLL_4_skip]\t\t\\\n+\t\t  << _FP_FRAC_SLL_4_up)\t\t\t\t\t\\\n+\t\t | (X##_f[_FP_FRAC_SLL_4_i-_FP_FRAC_SLL_4_skip-1]\t\\\n+\t\t    >> _FP_FRAC_SLL_4_down));\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SLL_4_i--] = X##_f[0] << _FP_FRAC_SLL_4_up;\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      for (; _FP_FRAC_SLL_4_i >= 0; --_FP_FRAC_SLL_4_i)\t\t\t\\\n+\tX##_f[_FP_FRAC_SLL_4_i] = 0;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* This one was broken too */\n-#define _FP_FRAC_SRL_4(X, N)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      _FP_I_TYPE _up, _down, _skip, _i;\t\t\t\\\n-      _skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\\\n-      _down = (N) % _FP_W_TYPE_SIZE;\t\t\t\\\n-      _up = _FP_W_TYPE_SIZE - _down;\t\t\t\\\n-      if (!_down)\t\t\t\t\t\\\n-\tfor (_i = 0; _i <= 3-_skip; ++_i)\t\t\\\n-\t  X##_f[_i] = X##_f[_i+_skip];\t\t\t\\\n-      else\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  for (_i = 0; _i < 3-_skip; ++_i)\t\t\\\n-\t    X##_f[_i] = (X##_f[_i+_skip] >> _down\t\\\n-\t\t\t | X##_f[_i+_skip+1] << _up);\t\\\n-\t  X##_f[_i++] = X##_f[3] >> _down;\t\t\\\n-\t}\t\t\t\t\t\t\\\n-      for (; _i < 4; ++_i)\t\t\t\t\\\n-\tX##_f[_i] = 0;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+/* This one was broken too.  */\n+#define _FP_FRAC_SRL_4(X, N)\t\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SRL_4_up, _FP_FRAC_SRL_4_down;\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SRL_4_skip, _FP_FRAC_SRL_4_i;\t\t\t\\\n+      _FP_FRAC_SRL_4_skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SRL_4_down = (N) % _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SRL_4_up = _FP_W_TYPE_SIZE - _FP_FRAC_SRL_4_down;\t\\\n+      if (!_FP_FRAC_SRL_4_down)\t\t\t\t\t\t\\\n+\tfor (_FP_FRAC_SRL_4_i = 0;\t\t\t\t\t\\\n+\t     _FP_FRAC_SRL_4_i <= 3-_FP_FRAC_SRL_4_skip;\t\t\t\\\n+\t     ++_FP_FRAC_SRL_4_i)\t\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SRL_4_i]\t\t\t\t\t\\\n+\t    = X##_f[_FP_FRAC_SRL_4_i+_FP_FRAC_SRL_4_skip];\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  for (_FP_FRAC_SRL_4_i = 0;\t\t\t\t\t\\\n+\t       _FP_FRAC_SRL_4_i < 3-_FP_FRAC_SRL_4_skip;\t\t\\\n+\t       ++_FP_FRAC_SRL_4_i)\t\t\t\t\t\\\n+\t    X##_f[_FP_FRAC_SRL_4_i]\t\t\t\t\t\\\n+\t      = ((X##_f[_FP_FRAC_SRL_4_i+_FP_FRAC_SRL_4_skip]\t\t\\\n+\t\t  >> _FP_FRAC_SRL_4_down)\t\t\t\t\\\n+\t\t | (X##_f[_FP_FRAC_SRL_4_i+_FP_FRAC_SRL_4_skip+1]\t\\\n+\t\t    << _FP_FRAC_SRL_4_up));\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SRL_4_i++] = X##_f[3] >> _FP_FRAC_SRL_4_down;\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      for (; _FP_FRAC_SRL_4_i < 4; ++_FP_FRAC_SRL_4_i)\t\t\t\\\n+\tX##_f[_FP_FRAC_SRL_4_i] = 0;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n \n /* Right shift with sticky-lsb.\n- * What this actually means is that we do a standard right-shift,\n- * but that if any of the bits that fall off the right hand side\n- * were one then we always set the LSbit.\n- */\n-#define _FP_FRAC_SRST_4(X, S, N, size)\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      _FP_I_TYPE _up, _down, _skip, _i;\t\t\t\\\n-      _FP_W_TYPE _s;\t\t\t\t\t\\\n-      _skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\\\n-      _down = (N) % _FP_W_TYPE_SIZE;\t\t\t\\\n-      _up = _FP_W_TYPE_SIZE - _down;\t\t\t\\\n-      for (_s = _i = 0; _i < _skip; ++_i)\t\t\\\n-\t_s |= X##_f[_i];\t\t\t\t\\\n-      if (!_down)\t\t\t\t\t\\\n-\tfor (_i = 0; _i <= 3-_skip; ++_i)\t\t\\\n-\t  X##_f[_i] = X##_f[_i+_skip];\t\t\t\\\n-      else\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  _s |= X##_f[_i] << _up;\t\t\t\\\n-\t  for (_i = 0; _i < 3-_skip; ++_i)\t\t\\\n-\t    X##_f[_i] = (X##_f[_i+_skip] >> _down\t\\\n-\t\t\t | X##_f[_i+_skip+1] << _up);\t\\\n-\t  X##_f[_i++] = X##_f[3] >> _down;\t\t\\\n-\t}\t\t\t\t\t\t\\\n-      for (; _i < 4; ++_i)\t\t\t\t\\\n-\tX##_f[_i] = 0;\t\t\t\t\t\\\n-      S = (_s != 0);\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+   What this actually means is that we do a standard right-shift,\n+   but that if any of the bits that fall off the right hand side\n+   were one then we always set the LSbit.  */\n+#define _FP_FRAC_SRST_4(X, S, N, size)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SRST_4_up, _FP_FRAC_SRST_4_down;\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SRST_4_skip, _FP_FRAC_SRST_4_i;\t\t\\\n+      _FP_W_TYPE _FP_FRAC_SRST_4_s;\t\t\t\t\t\\\n+      _FP_FRAC_SRST_4_skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SRST_4_down = (N) % _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SRST_4_up = _FP_W_TYPE_SIZE - _FP_FRAC_SRST_4_down;\t\\\n+      for (_FP_FRAC_SRST_4_s = _FP_FRAC_SRST_4_i = 0;\t\t\t\\\n+\t   _FP_FRAC_SRST_4_i < _FP_FRAC_SRST_4_skip;\t\t\t\\\n+\t   ++_FP_FRAC_SRST_4_i)\t\t\t\t\t\t\\\n+\t_FP_FRAC_SRST_4_s |= X##_f[_FP_FRAC_SRST_4_i];\t\t\t\\\n+      if (!_FP_FRAC_SRST_4_down)\t\t\t\t\t\\\n+\tfor (_FP_FRAC_SRST_4_i = 0;\t\t\t\t\t\\\n+\t     _FP_FRAC_SRST_4_i <= 3-_FP_FRAC_SRST_4_skip;\t\t\\\n+\t     ++_FP_FRAC_SRST_4_i)\t\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SRST_4_i]\t\t\t\t\t\\\n+\t    = X##_f[_FP_FRAC_SRST_4_i+_FP_FRAC_SRST_4_skip];\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  _FP_FRAC_SRST_4_s\t\t\t\t\t\t\\\n+\t    |= X##_f[_FP_FRAC_SRST_4_i] << _FP_FRAC_SRST_4_up;\t\t\\\n+\t  for (_FP_FRAC_SRST_4_i = 0;\t\t\t\t\t\\\n+\t       _FP_FRAC_SRST_4_i < 3-_FP_FRAC_SRST_4_skip;\t\t\\\n+\t       ++_FP_FRAC_SRST_4_i)\t\t\t\t\t\\\n+\t    X##_f[_FP_FRAC_SRST_4_i]\t\t\t\t\t\\\n+\t      = ((X##_f[_FP_FRAC_SRST_4_i+_FP_FRAC_SRST_4_skip]\t\t\\\n+\t\t  >> _FP_FRAC_SRST_4_down)\t\t\t\t\\\n+\t\t | (X##_f[_FP_FRAC_SRST_4_i+_FP_FRAC_SRST_4_skip+1]\t\\\n+\t\t    << _FP_FRAC_SRST_4_up));\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SRST_4_i++]\t\t\t\t\t\\\n+\t    = X##_f[3] >> _FP_FRAC_SRST_4_down;\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      for (; _FP_FRAC_SRST_4_i < 4; ++_FP_FRAC_SRST_4_i)\t\t\\\n+\tX##_f[_FP_FRAC_SRST_4_i] = 0;\t\t\t\t\t\\\n+      S = (_FP_FRAC_SRST_4_s != 0);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define _FP_FRAC_SRS_4(X, N, size)\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      int _sticky;\t\t\t\t\\\n-      _FP_FRAC_SRST_4 (X, _sticky, N, size);\t\\\n-      X##_f[0] |= _sticky;\t\t\t\\\n-    }\t\t\t\t\t\t\\\n+#define _FP_FRAC_SRS_4(X, N, size)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      int _FP_FRAC_SRS_4_sticky;\t\t\t\t\\\n+      _FP_FRAC_SRST_4 (X, _FP_FRAC_SRS_4_sticky, (N), (size));\t\\\n+      X##_f[0] |= _FP_FRAC_SRS_4_sticky;\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n #define _FP_FRAC_ADD_4(R, X, Y)\t\t\t\t\t\\\n@@ -181,183 +211,232 @@\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       if (X##_f[3])\t\t\t\t\\\n-\t__FP_CLZ (R, X##_f[3]);\t\t\t\\\n+\t__FP_CLZ ((R), X##_f[3]);\t\t\\\n       else if (X##_f[2])\t\t\t\\\n \t{\t\t\t\t\t\\\n-\t  __FP_CLZ (R, X##_f[2]);\t\t\\\n-\t  R += _FP_W_TYPE_SIZE;\t\t\t\\\n+\t  __FP_CLZ ((R), X##_f[2]);\t\t\\\n+\t  (R) += _FP_W_TYPE_SIZE;\t\t\\\n \t}\t\t\t\t\t\\\n       else if (X##_f[1])\t\t\t\\\n \t{\t\t\t\t\t\\\n-\t  __FP_CLZ (R, X##_f[1]);\t\t\\\n-\t  R += _FP_W_TYPE_SIZE*2;\t\t\\\n+\t  __FP_CLZ ((R), X##_f[1]);\t\t\\\n+\t  (R) += _FP_W_TYPE_SIZE*2;\t\t\\\n \t}\t\t\t\t\t\\\n       else\t\t\t\t\t\\\n \t{\t\t\t\t\t\\\n-\t  __FP_CLZ (R, X##_f[0]);\t\t\\\n-\t  R += _FP_W_TYPE_SIZE*3;\t\t\\\n+\t  __FP_CLZ ((R), X##_f[0]);\t\t\\\n+\t  (R) += _FP_W_TYPE_SIZE*3;\t\t\\\n \t}\t\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n \n-#define _FP_UNPACK_RAW_4(fs, X, val)\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs _flo;\t\t\\\n-      _flo.flt = (val);\t\t\t\t\\\n-      X##_f[0] = _flo.bits.frac0;\t\t\\\n-      X##_f[1] = _flo.bits.frac1;\t\t\\\n-      X##_f[2] = _flo.bits.frac2;\t\t\\\n-      X##_f[3] = _flo.bits.frac3;\t\t\\\n-      X##_e  = _flo.bits.exp;\t\t\t\\\n-      X##_s  = _flo.bits.sign;\t\t\t\\\n-    }\t\t\t\t\t\t\\\n+#define _FP_UNPACK_RAW_4(fs, X, val)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      union _FP_UNION_##fs _FP_UNPACK_RAW_4_flo;\t\\\n+      _FP_UNPACK_RAW_4_flo.flt = (val);\t\t\t\\\n+      X##_f[0] = _FP_UNPACK_RAW_4_flo.bits.frac0;\t\\\n+      X##_f[1] = _FP_UNPACK_RAW_4_flo.bits.frac1;\t\\\n+      X##_f[2] = _FP_UNPACK_RAW_4_flo.bits.frac2;\t\\\n+      X##_f[3] = _FP_UNPACK_RAW_4_flo.bits.frac3;\t\\\n+      X##_e  = _FP_UNPACK_RAW_4_flo.bits.exp;\t\t\\\n+      X##_s  = _FP_UNPACK_RAW_4_flo.bits.sign;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define _FP_UNPACK_RAW_4_P(fs, X, val)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs *_flo = (union _FP_UNION_##fs *) (val);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      X##_f[0] = _flo->bits.frac0;\t\t\t\t\t\\\n-      X##_f[1] = _flo->bits.frac1;\t\t\t\t\t\\\n-      X##_f[2] = _flo->bits.frac2;\t\t\t\t\t\\\n-      X##_f[3] = _flo->bits.frac3;\t\t\t\t\t\\\n-      X##_e  = _flo->bits.exp;\t\t\t\t\t\t\\\n-      X##_s  = _flo->bits.sign;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+#define _FP_UNPACK_RAW_4_P(fs, X, val)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      union _FP_UNION_##fs *_FP_UNPACK_RAW_4_P_flo\t\\\n+\t= (union _FP_UNION_##fs *) (val);\t\t\\\n+\t\t\t\t\t\t\t\\\n+      X##_f[0] = _FP_UNPACK_RAW_4_P_flo->bits.frac0;\t\\\n+      X##_f[1] = _FP_UNPACK_RAW_4_P_flo->bits.frac1;\t\\\n+      X##_f[2] = _FP_UNPACK_RAW_4_P_flo->bits.frac2;\t\\\n+      X##_f[3] = _FP_UNPACK_RAW_4_P_flo->bits.frac3;\t\\\n+      X##_e  = _FP_UNPACK_RAW_4_P_flo->bits.exp;\t\\\n+      X##_s  = _FP_UNPACK_RAW_4_P_flo->bits.sign;\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n #define _FP_PACK_RAW_4(fs, val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs _flo;\t\t\\\n-      _flo.bits.frac0 = X##_f[0];\t\t\\\n-      _flo.bits.frac1 = X##_f[1];\t\t\\\n-      _flo.bits.frac2 = X##_f[2];\t\t\\\n-      _flo.bits.frac3 = X##_f[3];\t\t\\\n-      _flo.bits.exp   = X##_e;\t\t\t\\\n-      _flo.bits.sign  = X##_s;\t\t\t\\\n-      (val) = _flo.flt;\t\t\t\t\\\n+      union _FP_UNION_##fs _FP_PACK_RAW_4_flo;\t\\\n+      _FP_PACK_RAW_4_flo.bits.frac0 = X##_f[0];\t\\\n+      _FP_PACK_RAW_4_flo.bits.frac1 = X##_f[1];\t\\\n+      _FP_PACK_RAW_4_flo.bits.frac2 = X##_f[2];\t\\\n+      _FP_PACK_RAW_4_flo.bits.frac3 = X##_f[3];\t\\\n+      _FP_PACK_RAW_4_flo.bits.exp   = X##_e;\t\\\n+      _FP_PACK_RAW_4_flo.bits.sign  = X##_s;\t\\\n+      (val) = _FP_PACK_RAW_4_flo.flt;\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define _FP_PACK_RAW_4_P(fs, val, X)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      union _FP_UNION_##fs *_flo = (union _FP_UNION_##fs *) (val);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      _flo->bits.frac0 = X##_f[0];\t\t\t\t\t\\\n-      _flo->bits.frac1 = X##_f[1];\t\t\t\t\t\\\n-      _flo->bits.frac2 = X##_f[2];\t\t\t\t\t\\\n-      _flo->bits.frac3 = X##_f[3];\t\t\t\t\t\\\n-      _flo->bits.exp   = X##_e;\t\t\t\t\t\t\\\n-      _flo->bits.sign  = X##_s;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+#define _FP_PACK_RAW_4_P(fs, val, X)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      union _FP_UNION_##fs *_FP_PACK_RAW_4_P_flo\t\\\n+\t= (union _FP_UNION_##fs *) (val);\t\t\\\n+\t\t\t\t\t\t\t\\\n+      _FP_PACK_RAW_4_P_flo->bits.frac0 = X##_f[0];\t\\\n+      _FP_PACK_RAW_4_P_flo->bits.frac1 = X##_f[1];\t\\\n+      _FP_PACK_RAW_4_P_flo->bits.frac2 = X##_f[2];\t\\\n+      _FP_PACK_RAW_4_P_flo->bits.frac3 = X##_f[3];\t\\\n+      _FP_PACK_RAW_4_P_flo->bits.exp   = X##_e;\t\t\\\n+      _FP_PACK_RAW_4_P_flo->bits.sign  = X##_s;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n-/*\n- * Multiplication algorithms:\n- */\n+/* Multiplication algorithms: */\n \n /* Given a 1W * 1W => 2W primitive, do the extended multiplication.  */\n \n #define _FP_MUL_MEAT_DW_4_wide(wfracbits, R, X, Y, doit)\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_b);\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_c);\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_d);\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_e);\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_2 (_f);\t\t\t\t\t\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_DW_4_wide_b);\t\t\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_DW_4_wide_c);\t\t\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_DW_4_wide_d);\t\t\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_DW_4_wide_e);\t\t\t\\\n+      _FP_FRAC_DECL_2 (_FP_MUL_MEAT_DW_4_wide_f);\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      doit (_FP_FRAC_WORD_8 (R, 1), _FP_FRAC_WORD_8 (R, 0), X##_f[0], Y##_f[0]); \\\n-      doit (_b_f1, _b_f0, X##_f[0], Y##_f[1]);\t\t\t\t\\\n-      doit (_c_f1, _c_f0, X##_f[1], Y##_f[0]);\t\t\t\t\\\n-      doit (_d_f1, _d_f0, X##_f[1], Y##_f[1]);\t\t\t\t\\\n-      doit (_e_f1, _e_f0, X##_f[0], Y##_f[2]);\t\t\t\t\\\n-      doit (_f_f1, _f_f0, X##_f[2], Y##_f[0]);\t\t\t\t\\\n+      doit (_FP_FRAC_WORD_8 (R, 1), _FP_FRAC_WORD_8 (R, 0),\t\t\\\n+\t    X##_f[0], Y##_f[0]);\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_b_f1, _FP_MUL_MEAT_DW_4_wide_b_f0,\t\\\n+\t    X##_f[0], Y##_f[1]);\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_c_f1, _FP_MUL_MEAT_DW_4_wide_c_f0,\t\\\n+\t    X##_f[1], Y##_f[0]);\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_d_f1, _FP_MUL_MEAT_DW_4_wide_d_f0,\t\\\n+\t    X##_f[1], Y##_f[1]);\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_e_f1, _FP_MUL_MEAT_DW_4_wide_e_f0,\t\\\n+\t    X##_f[0], Y##_f[2]);\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_f_f1, _FP_MUL_MEAT_DW_4_wide_f_f0,\t\\\n+\t    X##_f[2], Y##_f[0]);\t\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 3), _FP_FRAC_WORD_8 (R, 2),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 1), 0, _b_f1, _b_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 1), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_b_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_b_f0,\t\t\t\\\n \t\t       0, 0, _FP_FRAC_WORD_8 (R, 1));\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 3), _FP_FRAC_WORD_8 (R, 2),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 1), 0, _c_f1, _c_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 1), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_c_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_c_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 3), _FP_FRAC_WORD_8 (R, 2),\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 1));\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 4), _FP_FRAC_WORD_8 (R, 3),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 2), 0, _d_f1, _d_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 2), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_d_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_d_f0,\t\t\t\\\n \t\t       0, _FP_FRAC_WORD_8 (R, 3), _FP_FRAC_WORD_8 (R, 2)); \\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 4), _FP_FRAC_WORD_8 (R, 3),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 2), 0, _e_f1, _e_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 2), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_e_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_e_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 4), _FP_FRAC_WORD_8 (R, 3),\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 2));\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 4), _FP_FRAC_WORD_8 (R, 3),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 2), 0, _f_f1, _f_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 2), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_f_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_f_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 4), _FP_FRAC_WORD_8 (R, 3),\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 2));\t\t\t\t\\\n-      doit (_b_f1, _b_f0, X##_f[0], Y##_f[3]);\t\t\t\t\\\n-      doit (_c_f1, _c_f0, X##_f[3], Y##_f[0]);\t\t\t\t\\\n-      doit (_d_f1, _d_f0, X##_f[1], Y##_f[2]);\t\t\t\t\\\n-      doit (_e_f1, _e_f0, X##_f[2], Y##_f[1]);\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_b_f1,\t\t\t\t\\\n+\t    _FP_MUL_MEAT_DW_4_wide_b_f0, X##_f[0], Y##_f[3]);\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_c_f1,\t\t\t\t\\\n+\t    _FP_MUL_MEAT_DW_4_wide_c_f0, X##_f[3], Y##_f[0]);\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_d_f1, _FP_MUL_MEAT_DW_4_wide_d_f0,\t\\\n+\t    X##_f[1], Y##_f[2]);\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_e_f1, _FP_MUL_MEAT_DW_4_wide_e_f0,\t\\\n+\t    X##_f[2], Y##_f[1]);\t\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 5), _FP_FRAC_WORD_8 (R, 4),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 3), 0, _b_f1, _b_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 3), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_b_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_b_f0,\t\t\t\\\n \t\t       0, _FP_FRAC_WORD_8 (R, 4), _FP_FRAC_WORD_8 (R, 3)); \\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 5), _FP_FRAC_WORD_8 (R, 4),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 3), 0, _c_f1, _c_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 3), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_c_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_c_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 5), _FP_FRAC_WORD_8 (R, 4),\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 3));\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 5), _FP_FRAC_WORD_8 (R, 4),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 3), 0, _d_f1, _d_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 3), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_d_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_d_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 5), _FP_FRAC_WORD_8 (R, 4),\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 3));\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 5), _FP_FRAC_WORD_8 (R, 4),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 3), 0, _e_f1, _e_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 3), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_e_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_e_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 5), _FP_FRAC_WORD_8 (R, 4),\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 3));\t\t\t\t\\\n-      doit (_b_f1, _b_f0, X##_f[2], Y##_f[2]);\t\t\t\t\\\n-      doit (_c_f1, _c_f0, X##_f[1], Y##_f[3]);\t\t\t\t\\\n-      doit (_d_f1, _d_f0, X##_f[3], Y##_f[1]);\t\t\t\t\\\n-      doit (_e_f1, _e_f0, X##_f[2], Y##_f[3]);\t\t\t\t\\\n-      doit (_f_f1, _f_f0, X##_f[3], Y##_f[2]);\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_b_f1, _FP_MUL_MEAT_DW_4_wide_b_f0,\t\\\n+\t    X##_f[2], Y##_f[2]);\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_c_f1, _FP_MUL_MEAT_DW_4_wide_c_f0,\t\\\n+\t    X##_f[1], Y##_f[3]);\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_d_f1, _FP_MUL_MEAT_DW_4_wide_d_f0,\t\\\n+\t    X##_f[3], Y##_f[1]);\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_e_f1, _FP_MUL_MEAT_DW_4_wide_e_f0,\t\\\n+\t    X##_f[2], Y##_f[3]);\t\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_f_f1, _FP_MUL_MEAT_DW_4_wide_f_f0,\t\\\n+\t    X##_f[3], Y##_f[2]);\t\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 6), _FP_FRAC_WORD_8 (R, 5),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 4), 0, _b_f1, _b_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 4), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_b_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_b_f0,\t\t\t\\\n \t\t       0, _FP_FRAC_WORD_8 (R, 5), _FP_FRAC_WORD_8 (R, 4)); \\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 6), _FP_FRAC_WORD_8 (R, 5),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 4), 0, _c_f1, _c_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 4), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_c_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_c_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 6), _FP_FRAC_WORD_8 (R, 5),\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 4));\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 6), _FP_FRAC_WORD_8 (R, 5),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 4), 0, _d_f1, _d_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 4), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_d_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_d_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 6), _FP_FRAC_WORD_8 (R, 5),\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 4));\t\t\t\t\\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 7), _FP_FRAC_WORD_8 (R, 6),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 5), 0, _e_f1, _e_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 5), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_e_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_e_f0,\t\t\t\\\n \t\t       0, _FP_FRAC_WORD_8 (R, 6), _FP_FRAC_WORD_8 (R, 5)); \\\n       __FP_FRAC_ADD_3 (_FP_FRAC_WORD_8 (R, 7), _FP_FRAC_WORD_8 (R, 6),\t\\\n-\t\t       _FP_FRAC_WORD_8 (R, 5), 0, _f_f1, _f_f0,\t\t\\\n+\t\t       _FP_FRAC_WORD_8 (R, 5), 0,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_f_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_f_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 7), _FP_FRAC_WORD_8 (R, 6),\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 5));\t\t\t\t\\\n-      doit (_b_f1, _b_f0, X##_f[3], Y##_f[3]);\t\t\t\t\\\n+      doit (_FP_MUL_MEAT_DW_4_wide_b_f1, _FP_MUL_MEAT_DW_4_wide_b_f0,\t\\\n+\t    X##_f[3], Y##_f[3]);\t\t\t\t\t\\\n       __FP_FRAC_ADD_2 (_FP_FRAC_WORD_8 (R, 7), _FP_FRAC_WORD_8 (R, 6),\t\\\n-\t\t       _b_f1, _b_f0,\t\t\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_b_f1,\t\t\t\\\n+\t\t       _FP_MUL_MEAT_DW_4_wide_b_f0,\t\t\t\\\n \t\t       _FP_FRAC_WORD_8 (R, 7), _FP_FRAC_WORD_8 (R, 6));\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n #define _FP_MUL_MEAT_4_wide(wfracbits, R, X, Y, doit)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_8 (_z);\t\t\t\t\t\t\\\n+      _FP_FRAC_DECL_8 (_FP_MUL_MEAT_4_wide_z);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      _FP_MUL_MEAT_DW_4_wide (wfracbits, _z, X, Y, doit);\t\t\\\n+      _FP_MUL_MEAT_DW_4_wide ((wfracbits), _FP_MUL_MEAT_4_wide_z,\t\\\n+\t\t\t      X, Y, doit);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* Normalize since we know where the msb of the multiplicands\t\\\n \t were (bit B), we know that the msb of the of the product is\t\\\n \t at either 2B or 2B-1.  */\t\t\t\t\t\\\n-      _FP_FRAC_SRS_8 (_z, wfracbits-1, 2*wfracbits);\t\t\t\\\n-      __FP_FRAC_SET_4 (R, _FP_FRAC_WORD_8 (_z, 3), _FP_FRAC_WORD_8 (_z, 2), \\\n-\t\t       _FP_FRAC_WORD_8 (_z, 1), _FP_FRAC_WORD_8 (_z, 0)); \\\n+      _FP_FRAC_SRS_8 (_FP_MUL_MEAT_4_wide_z, (wfracbits)-1,\t\t\\\n+\t\t      2*(wfracbits));\t\t\t\t\t\\\n+      __FP_FRAC_SET_4 (R, _FP_FRAC_WORD_8 (_FP_MUL_MEAT_4_wide_z, 3),\t\\\n+\t\t       _FP_FRAC_WORD_8 (_FP_MUL_MEAT_4_wide_z, 2),\t\\\n+\t\t       _FP_FRAC_WORD_8 (_FP_MUL_MEAT_4_wide_z, 1),\t\\\n+\t\t       _FP_FRAC_WORD_8 (_FP_MUL_MEAT_4_wide_z, 0));\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -371,101 +450,110 @@\n #define _FP_MUL_MEAT_4_gmp(wfracbits, R, X, Y)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_8 (_z);\t\t\t\t\t\t\\\n+      _FP_FRAC_DECL_8 (_FP_MUL_MEAT_4_gmp_z);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      _FP_MUL_MEAT_DW_4_gmp (wfracbits, _z, X, Y);\t\t\t\\\n+      _FP_MUL_MEAT_DW_4_gmp ((wfracbits), _FP_MUL_MEAT_4_gmp_z, X, Y);\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* Normalize since we know where the msb of the multiplicands\t\\\n \t were (bit B), we know that the msb of the of the product is\t\\\n \t at either 2B or 2B-1.  */\t\t\t\t\t\\\n-      _FP_FRAC_SRS_8 (_z, wfracbits-1, 2*wfracbits);\t\t\t\\\n-      __FP_FRAC_SET_4 (R, _FP_FRAC_WORD_8 (_z, 3), _FP_FRAC_WORD_8 (_z, 2), \\\n-\t\t       _FP_FRAC_WORD_8 (_z, 1), _FP_FRAC_WORD_8 (_z, 0)); \\\n+      _FP_FRAC_SRS_8 (_FP_MUL_MEAT_4_gmp_z, (wfracbits)-1,\t\t\\\n+\t\t      2*(wfracbits));\t\t\t\t\t\\\n+      __FP_FRAC_SET_4 (R, _FP_FRAC_WORD_8 (_FP_MUL_MEAT_4_gmp_z, 3),\t\\\n+\t\t       _FP_FRAC_WORD_8 (_FP_MUL_MEAT_4_gmp_z, 2),\t\\\n+\t\t       _FP_FRAC_WORD_8 (_FP_MUL_MEAT_4_gmp_z, 1),\t\\\n+\t\t       _FP_FRAC_WORD_8 (_FP_MUL_MEAT_4_gmp_z, 0));\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/*\n- * Helper utility for _FP_DIV_MEAT_4_udiv:\n- * pppp = m * nnn\n- */\n+/* Helper utility for _FP_DIV_MEAT_4_udiv:\n+ * pppp = m * nnn.  */\n #define umul_ppppmnnn(p3, p2, p1, p0, m, n2, n1, n0)\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      UWtype _t;\t\t\t\t\t\\\n+      UWtype umul_ppppmnnn_t;\t\t\t\t\\\n       umul_ppmm (p1, p0, m, n0);\t\t\t\\\n-      umul_ppmm (p2, _t, m, n1);\t\t\t\\\n-      __FP_FRAC_ADDI_2 (p2, p1, _t);\t\t\t\\\n-      umul_ppmm (p3, _t, m, n2);\t\t\t\\\n-      __FP_FRAC_ADDI_2 (p3, p2, _t);\t\t\t\\\n+      umul_ppmm (p2, umul_ppppmnnn_t, m, n1);\t\t\\\n+      __FP_FRAC_ADDI_2 (p2, p1, umul_ppppmnnn_t);\t\\\n+      umul_ppmm (p3, umul_ppppmnnn_t, m, n2);\t\t\\\n+      __FP_FRAC_ADDI_2 (p3, p2, umul_ppppmnnn_t);\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-/*\n- * Division algorithms:\n- */\n+/* Division algorithms: */\n \n #define _FP_DIV_MEAT_4_udiv(fs, R, X, Y)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      int _i;\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_4 (_n);\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_4 (_m);\t\t\t\t\t\t\\\n-      _FP_FRAC_SET_4 (_n, _FP_ZEROFRAC_4);\t\t\t\t\\\n+      int _FP_DIV_MEAT_4_udiv_i;\t\t\t\t\t\\\n+      _FP_FRAC_DECL_4 (_FP_DIV_MEAT_4_udiv_n);\t\t\t\t\\\n+      _FP_FRAC_DECL_4 (_FP_DIV_MEAT_4_udiv_m);\t\t\t\t\\\n+      _FP_FRAC_SET_4 (_FP_DIV_MEAT_4_udiv_n, _FP_ZEROFRAC_4);\t\t\\\n       if (_FP_FRAC_GE_4 (X, Y))\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  _n_f[3] = X##_f[0] << (_FP_W_TYPE_SIZE - 1);\t\t\t\\\n+\t  _FP_DIV_MEAT_4_udiv_n_f[3]\t\t\t\t\t\\\n+\t    = X##_f[0] << (_FP_W_TYPE_SIZE - 1);\t\t\t\\\n \t  _FP_FRAC_SRL_4 (X, 1);\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tR##_e--;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* Normalize, i.e. make the most significant bit of the\t\t\\\n-\t denominator set. */\t\t\t\t\t\t\\\n+\t denominator set.  */\t\t\t\t\t\t\\\n       _FP_FRAC_SLL_4 (Y, _FP_WFRACXBITS_##fs);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      for (_i = 3; ; _i--)\t\t\t\t\t\t\\\n+      for (_FP_DIV_MEAT_4_udiv_i = 3; ; _FP_DIV_MEAT_4_udiv_i--)\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  if (X##_f[3] == Y##_f[3])\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      /* This is a special case, not an optimization\t\t\\\n \t\t (X##_f[3]/Y##_f[3] would not fit into UWtype).\t\t\\\n-\t\t As X## is guaranteed to be < Y,  R##_f[_i] can be either \\\n+\t\t As X## is guaranteed to be < Y,\t\t\t\\\n+\t\t R##_f[_FP_DIV_MEAT_4_udiv_i] can be either\t\t\\\n \t\t (UWtype)-1 or (UWtype)-2.  */\t\t\t\t\\\n-\t      R##_f[_i] = -1;\t\t\t\t\t\t\\\n-\t      if (!_i)\t\t\t\t\t\t\t\\\n+\t      R##_f[_FP_DIV_MEAT_4_udiv_i] = -1;\t\t\t\\\n+\t      if (!_FP_DIV_MEAT_4_udiv_i)\t\t\t\t\\\n \t\tbreak;\t\t\t\t\t\t\t\\\n \t      __FP_FRAC_SUB_4 (X##_f[3], X##_f[2], X##_f[1], X##_f[0],\t\\\n \t\t\t       Y##_f[2], Y##_f[1], Y##_f[0], 0,\t\t\\\n-\t\t\t       X##_f[2], X##_f[1], X##_f[0], _n_f[_i]);\t\\\n+\t\t\t       X##_f[2], X##_f[1], X##_f[0],\t\t\\\n+\t\t\t       _FP_DIV_MEAT_4_udiv_n_f[_FP_DIV_MEAT_4_udiv_i]); \\\n \t      _FP_FRAC_SUB_4 (X, Y, X);\t\t\t\t\t\\\n \t      if (X##_f[3] > Y##_f[3])\t\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  R##_f[_i] = -2;\t\t\t\t\t\\\n+\t\t  R##_f[_FP_DIV_MEAT_4_udiv_i] = -2;\t\t\t\\\n \t\t  _FP_FRAC_ADD_4 (X, Y, X);\t\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      udiv_qrnnd (R##_f[_i], X##_f[3], X##_f[3], X##_f[2], Y##_f[3]); \\\n-\t      umul_ppppmnnn (_m_f[3], _m_f[2], _m_f[1], _m_f[0],\t\\\n-\t\t\t     R##_f[_i], Y##_f[2], Y##_f[1], Y##_f[0]);\t\\\n+\t      udiv_qrnnd (R##_f[_FP_DIV_MEAT_4_udiv_i],\t\t\t\\\n+\t\t\t  X##_f[3], X##_f[3], X##_f[2], Y##_f[3]);\t\\\n+\t      umul_ppppmnnn (_FP_DIV_MEAT_4_udiv_m_f[3],\t\t\\\n+\t\t\t     _FP_DIV_MEAT_4_udiv_m_f[2],\t\t\\\n+\t\t\t     _FP_DIV_MEAT_4_udiv_m_f[1],\t\t\\\n+\t\t\t     _FP_DIV_MEAT_4_udiv_m_f[0],\t\t\\\n+\t\t\t     R##_f[_FP_DIV_MEAT_4_udiv_i],\t\t\\\n+\t\t\t     Y##_f[2], Y##_f[1], Y##_f[0]);\t\t\\\n \t      X##_f[2] = X##_f[1];\t\t\t\t\t\\\n \t      X##_f[1] = X##_f[0];\t\t\t\t\t\\\n-\t      X##_f[0] = _n_f[_i];\t\t\t\t\t\\\n-\t      if (_FP_FRAC_GT_4 (_m, X))\t\t\t\t\\\n+\t      X##_f[0]\t\t\t\t\t\t\t\\\n+\t\t= _FP_DIV_MEAT_4_udiv_n_f[_FP_DIV_MEAT_4_udiv_i];\t\\\n+\t      if (_FP_FRAC_GT_4 (_FP_DIV_MEAT_4_udiv_m, X))\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  R##_f[_i]--;\t\t\t\t\t\t\\\n+\t\t  R##_f[_FP_DIV_MEAT_4_udiv_i]--;\t\t\t\\\n \t\t  _FP_FRAC_ADD_4 (X, Y, X);\t\t\t\t\\\n-\t\t  if (_FP_FRAC_GE_4 (X, Y) && _FP_FRAC_GT_4 (_m, X))\t\\\n+\t\t  if (_FP_FRAC_GE_4 (X, Y)\t\t\t\t\\\n+\t\t      && _FP_FRAC_GT_4 (_FP_DIV_MEAT_4_udiv_m, X))\t\\\n \t\t    {\t\t\t\t\t\t\t\\\n-\t\t      R##_f[_i]--;\t\t\t\t\t\\\n+\t\t      R##_f[_FP_DIV_MEAT_4_udiv_i]--;\t\t\t\\\n \t\t      _FP_FRAC_ADD_4 (X, Y, X);\t\t\t\t\\\n \t\t    }\t\t\t\t\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n-\t      _FP_FRAC_DEC_4 (X, _m);\t\t\t\t\t\\\n-\t      if (!_i)\t\t\t\t\t\t\t\\\n+\t      _FP_FRAC_DEC_4 (X, _FP_DIV_MEAT_4_udiv_m);\t\t\\\n+\t      if (!_FP_DIV_MEAT_4_udiv_i)\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  if (!_FP_FRAC_EQ_4 (X, _m))\t\t\t\t\\\n+\t\t  if (!_FP_FRAC_EQ_4 (X, _FP_DIV_MEAT_4_udiv_m))\t\\\n \t\t    R##_f[0] |= _FP_WORK_STICKY;\t\t\t\\\n \t\t  break;\t\t\t\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n@@ -475,48 +563,46 @@\n   while (0)\n \n \n-/*\n- * Square root algorithms:\n- * We have just one right now, maybe Newton approximation\n- * should be added for those machines where division is fast.\n- */\n+/* Square root algorithms:\n+   We have just one right now, maybe Newton approximation\n+   should be added for those machines where division is fast.  */\n \n #define _FP_SQRT_MEAT_4(R, S, T, X, q)\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       while (q)\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  T##_f[3] = S##_f[3] + q;\t\t\t\t\t\\\n+\t  T##_f[3] = S##_f[3] + (q);\t\t\t\t\t\\\n \t  if (T##_f[3] <= X##_f[3])\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      S##_f[3] = T##_f[3] + q;\t\t\t\t\t\\\n+\t      S##_f[3] = T##_f[3] + (q);\t\t\t\t\\\n \t      X##_f[3] -= T##_f[3];\t\t\t\t\t\\\n-\t      R##_f[3] += q;\t\t\t\t\t\t\\\n+\t      R##_f[3] += (q);\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  _FP_FRAC_SLL_4 (X, 1);\t\t\t\t\t\\\n-\t  q >>= 1;\t\t\t\t\t\t\t\\\n+\t  (q) >>= 1;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      q = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\t\t\\\n+      (q) = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\t\t\\\n       while (q)\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  T##_f[2] = S##_f[2] + q;\t\t\t\t\t\\\n+\t  T##_f[2] = S##_f[2] + (q);\t\t\t\t\t\\\n \t  T##_f[3] = S##_f[3];\t\t\t\t\t\t\\\n \t  if (T##_f[3] < X##_f[3]\t\t\t\t\t\\\n \t      || (T##_f[3] == X##_f[3] && T##_f[2] <= X##_f[2]))\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      S##_f[2] = T##_f[2] + q;\t\t\t\t\t\\\n+\t      S##_f[2] = T##_f[2] + (q);\t\t\t\t\\\n \t      S##_f[3] += (T##_f[2] > S##_f[2]);\t\t\t\\\n \t      __FP_FRAC_DEC_2 (X##_f[3], X##_f[2],\t\t\t\\\n \t\t\t       T##_f[3], T##_f[2]);\t\t\t\\\n-\t      R##_f[2] += q;\t\t\t\t\t\t\\\n+\t      R##_f[2] += (q);\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  _FP_FRAC_SLL_4 (X, 1);\t\t\t\t\t\\\n-\t  q >>= 1;\t\t\t\t\t\t\t\\\n+\t  (q) >>= 1;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      q = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\t\t\\\n+      (q) = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\t\t\\\n       while (q)\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  T##_f[1] = S##_f[1] + q;\t\t\t\t\t\\\n+\t  T##_f[1] = S##_f[1] + (q);\t\t\t\t\t\\\n \t  T##_f[2] = S##_f[2];\t\t\t\t\t\t\\\n \t  T##_f[3] = S##_f[3];\t\t\t\t\t\t\\\n \t  if (T##_f[3] < X##_f[3]\t\t\t\t\t\\\n@@ -525,34 +611,34 @@\n \t\t      || (T##_f[2] == X##_f[2]\t\t\t\t\\\n \t\t\t  && T##_f[1] <= X##_f[1]))))\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      S##_f[1] = T##_f[1] + q;\t\t\t\t\t\\\n+\t      S##_f[1] = T##_f[1] + (q);\t\t\t\t\\\n \t      S##_f[2] += (T##_f[1] > S##_f[1]);\t\t\t\\\n \t      S##_f[3] += (T##_f[2] > S##_f[2]);\t\t\t\\\n \t      __FP_FRAC_DEC_3 (X##_f[3], X##_f[2], X##_f[1],\t\t\\\n \t\t\t       T##_f[3], T##_f[2], T##_f[1]);\t\t\\\n-\t      R##_f[1] += q;\t\t\t\t\t\t\\\n+\t      R##_f[1] += (q);\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  _FP_FRAC_SLL_4 (X, 1);\t\t\t\t\t\\\n-\t  q >>= 1;\t\t\t\t\t\t\t\\\n+\t  (q) >>= 1;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      q = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\t\t\\\n-      while (q != _FP_WORK_ROUND)\t\t\t\t\t\\\n+      (q) = (_FP_W_TYPE) 1 << (_FP_W_TYPE_SIZE - 1);\t\t\t\\\n+      while ((q) != _FP_WORK_ROUND)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  T##_f[0] = S##_f[0] + q;\t\t\t\t\t\\\n+\t  T##_f[0] = S##_f[0] + (q);\t\t\t\t\t\\\n \t  T##_f[1] = S##_f[1];\t\t\t\t\t\t\\\n \t  T##_f[2] = S##_f[2];\t\t\t\t\t\t\\\n \t  T##_f[3] = S##_f[3];\t\t\t\t\t\t\\\n \t  if (_FP_FRAC_GE_4 (X, T))\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      S##_f[0] = T##_f[0] + q;\t\t\t\t\t\\\n+\t      S##_f[0] = T##_f[0] + (q);\t\t\t\t\\\n \t      S##_f[1] += (T##_f[0] > S##_f[0]);\t\t\t\\\n \t      S##_f[2] += (T##_f[1] > S##_f[1]);\t\t\t\\\n \t      S##_f[3] += (T##_f[2] > S##_f[2]);\t\t\t\\\n \t      _FP_FRAC_DEC_4 (X, T);\t\t\t\t\t\\\n-\t      R##_f[0] += q;\t\t\t\t\t\t\\\n+\t      R##_f[0] += (q);\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  _FP_FRAC_SLL_4 (X, 1);\t\t\t\t\t\\\n-\t  q >>= 1;\t\t\t\t\t\t\t\\\n+\t  (q) >>= 1;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       if (!_FP_FRAC_ZEROP_4 (X))\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n@@ -564,9 +650,7 @@\n   while (0)\n \n \n-/*\n- * Internals\n- */\n+/* Internals.  */\n \n #define __FP_FRAC_SET_4(X, I3, I2, I1, I0)\t\t\t\\\n   (X##_f[3] = I3, X##_f[2] = I2, X##_f[1] = I1, X##_f[0] = I0)\n@@ -591,18 +675,19 @@\n # define __FP_FRAC_ADD_4(r3, r2, r1, r0, x3, x2, x1, x0, y3, y2, y1, y0) \\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_W_TYPE _c1, _c2, _c3;\t\t\t\t\t\t\\\n+      _FP_W_TYPE __FP_FRAC_ADD_4_c1, __FP_FRAC_ADD_4_c2;\t\t\\\n+      _FP_W_TYPE __FP_FRAC_ADD_4_c3;\t\t\t\t\t\\\n       r0 = x0 + y0;\t\t\t\t\t\t\t\\\n-      _c1 = r0 < x0;\t\t\t\t\t\t\t\\\n+      __FP_FRAC_ADD_4_c1 = r0 < x0;\t\t\t\t\t\\\n       r1 = x1 + y1;\t\t\t\t\t\t\t\\\n-      _c2 = r1 < x1;\t\t\t\t\t\t\t\\\n-      r1 += _c1;\t\t\t\t\t\t\t\\\n-      _c2 |= r1 < _c1;\t\t\t\t\t\t\t\\\n+      __FP_FRAC_ADD_4_c2 = r1 < x1;\t\t\t\t\t\\\n+      r1 += __FP_FRAC_ADD_4_c1;\t\t\t\t\t\t\\\n+      __FP_FRAC_ADD_4_c2 |= r1 < __FP_FRAC_ADD_4_c1;\t\t\t\\\n       r2 = x2 + y2;\t\t\t\t\t\t\t\\\n-      _c3 = r2 < x2;\t\t\t\t\t\t\t\\\n-      r2 += _c2;\t\t\t\t\t\t\t\\\n-      _c3 |= r2 < _c2;\t\t\t\t\t\t\t\\\n-      r3 = x3 + y3 + _c3;\t\t\t\t\t\t\\\n+      __FP_FRAC_ADD_4_c3 = r2 < x2;\t\t\t\t\t\\\n+      r2 += __FP_FRAC_ADD_4_c2;\t\t\t\t\t\t\\\n+      __FP_FRAC_ADD_4_c3 |= r2 < __FP_FRAC_ADD_4_c2;\t\t\t\\\n+      r3 = x3 + y3 + __FP_FRAC_ADD_4_c3;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n #endif\n@@ -611,14 +696,14 @@\n # define __FP_FRAC_SUB_3(r2, r1, r0, x2, x1, x0, y2, y1, y0)\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      _FP_W_TYPE _c1, _c2;\t\t\t\t\t\\\n+      _FP_W_TYPE __FP_FRAC_SUB_3_c1, __FP_FRAC_SUB_3_c2;\t\\\n       r0 = x0 - y0;\t\t\t\t\t\t\\\n-      _c1 = r0 > x0;\t\t\t\t\t\t\\\n+      __FP_FRAC_SUB_3_c1 = r0 > x0;\t\t\t\t\\\n       r1 = x1 - y1;\t\t\t\t\t\t\\\n-      _c2 = r1 > x1;\t\t\t\t\t\t\\\n-      r1 -= _c1;\t\t\t\t\t\t\\\n-      _c2 |= _c1 && (y1 == x1);\t\t\t\t\t\\\n-      r2 = x2 - y2 - _c2;\t\t\t\t\t\\\n+      __FP_FRAC_SUB_3_c2 = r1 > x1;\t\t\t\t\\\n+      r1 -= __FP_FRAC_SUB_3_c1;\t\t\t\t\t\\\n+      __FP_FRAC_SUB_3_c2 |= __FP_FRAC_SUB_3_c1 && (y1 == x1);\t\\\n+      r2 = x2 - y2 - __FP_FRAC_SUB_3_c2;\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n #endif\n@@ -627,18 +712,19 @@\n # define __FP_FRAC_SUB_4(r3, r2, r1, r0, x3, x2, x1, x0, y3, y2, y1, y0) \\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_W_TYPE _c1, _c2, _c3;\t\t\t\t\t\t\\\n+      _FP_W_TYPE __FP_FRAC_SUB_4_c1, __FP_FRAC_SUB_4_c2;\t\t\\\n+      _FP_W_TYPE __FP_FRAC_SUB_4_c3;\t\t\t\t\t\\\n       r0 = x0 - y0;\t\t\t\t\t\t\t\\\n-      _c1 = r0 > x0;\t\t\t\t\t\t\t\\\n+      __FP_FRAC_SUB_4_c1 = r0 > x0;\t\t\t\t\t\\\n       r1 = x1 - y1;\t\t\t\t\t\t\t\\\n-      _c2 = r1 > x1;\t\t\t\t\t\t\t\\\n-      r1 -= _c1;\t\t\t\t\t\t\t\\\n-      _c2 |= _c1 && (y1 == x1);\t\t\t\t\t\t\\\n+      __FP_FRAC_SUB_4_c2 = r1 > x1;\t\t\t\t\t\\\n+      r1 -= __FP_FRAC_SUB_4_c1;\t\t\t\t\t\t\\\n+      __FP_FRAC_SUB_4_c2 |= __FP_FRAC_SUB_4_c1 && (y1 == x1);\t\t\\\n       r2 = x2 - y2;\t\t\t\t\t\t\t\\\n-      _c3 = r2 > x2;\t\t\t\t\t\t\t\\\n-      r2 -= _c2;\t\t\t\t\t\t\t\\\n-      _c3 |= _c2 && (y2 == x2);\t\t\t\t\t\t\\\n-      r3 = x3 - y3 - _c3;\t\t\t\t\t\t\\\n+      __FP_FRAC_SUB_4_c3 = r2 > x2;\t\t\t\t\t\\\n+      r2 -= __FP_FRAC_SUB_4_c2;\t\t\t\t\t\t\\\n+      __FP_FRAC_SUB_4_c3 |= __FP_FRAC_SUB_4_c2 && (y2 == x2);\t\t\\\n+      r3 = x3 - y3 - __FP_FRAC_SUB_4_c3;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n #endif\n@@ -647,46 +733,56 @@\n # define __FP_FRAC_DEC_3(x2, x1, x0, y2, y1, y0)\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      UWtype _t0, _t1, _t2;\t\t\t\t\t\\\n-      _t0 = x0, _t1 = x1, _t2 = x2;\t\t\t\t\\\n-      __FP_FRAC_SUB_3 (x2, x1, x0, _t2, _t1, _t0, y2, y1, y0);\t\\\n+      UWtype __FP_FRAC_DEC_3_t0, __FP_FRAC_DEC_3_t1;\t\t\\\n+      UWtype __FP_FRAC_DEC_3_t2;\t\t\t\t\\\n+      __FP_FRAC_DEC_3_t0 = x0;\t\t\t\t\t\\\n+      __FP_FRAC_DEC_3_t1 = x1;\t\t\t\t\t\\\n+      __FP_FRAC_DEC_3_t2 = x2;\t\t\t\t\t\\\n+      __FP_FRAC_SUB_3 (x2, x1, x0, __FP_FRAC_DEC_3_t2,\t\t\\\n+\t\t       __FP_FRAC_DEC_3_t1, __FP_FRAC_DEC_3_t0,\t\\\n+\t\t       y2, y1, y0);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n #endif\n \n #ifndef __FP_FRAC_DEC_4\n-# define __FP_FRAC_DEC_4(x3, x2, x1, x0, y3, y2, y1, y0)\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      UWtype _t0, _t1, _t2, _t3;\t\t\t\t\t\\\n-      _t0 = x0, _t1 = x1, _t2 = x2, _t3 = x3;\t\t\t\t\\\n-      __FP_FRAC_SUB_4 (x3, x2, x1, x0, _t3, _t2, _t1, _t0, y3, y2, y1, y0); \\\n-    }\t\t\t\t\t\t\t\t\t\\\n+# define __FP_FRAC_DEC_4(x3, x2, x1, x0, y3, y2, y1, y0)\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      UWtype __FP_FRAC_DEC_4_t0, __FP_FRAC_DEC_4_t1;\t\t\\\n+      UWtype __FP_FRAC_DEC_4_t2, __FP_FRAC_DEC_4_t3;\t\t\\\n+      __FP_FRAC_DEC_4_t0 = x0;\t\t\t\t\t\\\n+      __FP_FRAC_DEC_4_t1 = x1;\t\t\t\t\t\\\n+      __FP_FRAC_DEC_4_t2 = x2;\t\t\t\t\t\\\n+      __FP_FRAC_DEC_4_t3 = x3;\t\t\t\t\t\\\n+      __FP_FRAC_SUB_4 (x3, x2, x1, x0, __FP_FRAC_DEC_4_t3,\t\\\n+\t\t       __FP_FRAC_DEC_4_t2, __FP_FRAC_DEC_4_t1,\t\\\n+\t\t       __FP_FRAC_DEC_4_t0, y3, y2, y1, y0);\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n #endif\n \n #ifndef __FP_FRAC_ADDI_4\n-# define __FP_FRAC_ADDI_4(x3, x2, x1, x0, i)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      UWtype _t;\t\t\t\t\\\n-      _t = ((x0 += i) < i);\t\t\t\\\n-      x1 += _t;\t\t\t\t\t\\\n-      _t = (x1 < _t);\t\t\t\t\\\n-      x2 += _t;\t\t\t\t\t\\\n-      _t = (x2 < _t);\t\t\t\t\\\n-      x3 += _t;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\\\n+# define __FP_FRAC_ADDI_4(x3, x2, x1, x0, i)\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      UWtype __FP_FRAC_ADDI_4_t;\t\t\t\\\n+      __FP_FRAC_ADDI_4_t = ((x0 += i) < i);\t\t\\\n+      x1 += __FP_FRAC_ADDI_4_t;\t\t\t\t\\\n+      __FP_FRAC_ADDI_4_t = (x1 < __FP_FRAC_ADDI_4_t);\t\\\n+      x2 += __FP_FRAC_ADDI_4_t;\t\t\t\t\\\n+      __FP_FRAC_ADDI_4_t = (x2 < __FP_FRAC_ADDI_4_t);\t\\\n+      x3 += __FP_FRAC_ADDI_4_t;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n #endif\n \n /* Convert FP values between word sizes. This appears to be more\n- * complicated than I'd have expected it to be, so these might be\n- * wrong... These macros are in any case somewhat bogus because they\n- * use information about what various FRAC_n variables look like\n- * internally [eg, that 2 word vars are X_f0 and x_f1]. But so do\n- * the ones in op-2.h and op-1.h.\n- */\n+   complicated than I'd have expected it to be, so these might be\n+   wrong... These macros are in any case somewhat bogus because they\n+   use information about what various FRAC_n variables look like\n+   internally [eg, that 2 word vars are X_f0 and x_f1]. But so do\n+   the ones in op-2.h and op-1.h.  */\n #define _FP_FRAC_COPY_1_4(D, S)\t\t(D##_f = S##_f[0])\n \n #define _FP_FRAC_COPY_2_4(D, S)\t\t\t\\\n@@ -698,48 +794,60 @@\n   while (0)\n \n /* Assembly/disassembly for converting to/from integral types.\n- * No shifting or overflow handled here.\n- */\n-/* Put the FP value X into r, which is an integer of size rsize. */\n+   No shifting or overflow handled here.  */\n+/* Put the FP value X into r, which is an integer of size rsize.  */\n #define _FP_FRAC_ASSEMBLE_4(r, X, rsize)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (rsize <= _FP_W_TYPE_SIZE)\t\t\t\t\t\\\n-\tr = X##_f[0];\t\t\t\t\t\t\t\\\n-      else if (rsize <= 2*_FP_W_TYPE_SIZE)\t\t\t\t\\\n+      if ((rsize) <= _FP_W_TYPE_SIZE)\t\t\t\t\t\\\n+\t(r) = X##_f[0];\t\t\t\t\t\t\t\\\n+\telse if ((rsize) <= 2*_FP_W_TYPE_SIZE)\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  r = X##_f[1];\t\t\t\t\t\t\t\\\n-\t  r = (rsize <= _FP_W_TYPE_SIZE ? 0 : r << _FP_W_TYPE_SIZE);\t\\\n-\t  r += X##_f[0];\t\t\t\t\t\t\\\n+\t  (r) = X##_f[1];\t\t\t\t\t\t\\\n+\t  (r) = ((rsize) <= _FP_W_TYPE_SIZE\t\t\t\t\\\n+\t\t ? 0\t\t\t\t\t\t\t\\\n+\t\t : (r) << _FP_W_TYPE_SIZE);\t\t\t\t\\\n+\t  (r) += X##_f[0];\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  /* I'm feeling lazy so we deal with int == 3words (implausible)*/ \\\n-\t  /* and int == 4words as a single case.\t\t\t */ \\\n-\t  r = X##_f[3];\t\t\t\t\t\t\t\\\n-\t  r = (rsize <= _FP_W_TYPE_SIZE ? 0 : r << _FP_W_TYPE_SIZE);\t\\\n-\t  r += X##_f[2];\t\t\t\t\t\t\\\n-\t  r = (rsize <= _FP_W_TYPE_SIZE ? 0 : r << _FP_W_TYPE_SIZE);\t\\\n-\t  r += X##_f[1];\t\t\t\t\t\t\\\n-\t  r = (rsize <= _FP_W_TYPE_SIZE ? 0 : r << _FP_W_TYPE_SIZE);\t\\\n-\t  r += X##_f[0];\t\t\t\t\t\t\\\n+\t  /* I'm feeling lazy so we deal with int == 3words\t\t\\\n+\t     (implausible) and int == 4words as a single case.  */\t\\\n+\t  (r) = X##_f[3];\t\t\t\t\t\t\\\n+\t  (r) = ((rsize) <= _FP_W_TYPE_SIZE\t\t\t\t\\\n+\t\t ? 0\t\t\t\t\t\t\t\\\n+\t\t : (r) << _FP_W_TYPE_SIZE);\t\t\t\t\\\n+\t  (r) += X##_f[2];\t\t\t\t\t\t\\\n+\t  (r) = ((rsize) <= _FP_W_TYPE_SIZE\t\t\t\t\\\n+\t\t ? 0\t\t\t\t\t\t\t\\\n+\t\t : (r) << _FP_W_TYPE_SIZE);\t\t\t\t\\\n+\t  (r) += X##_f[1];\t\t\t\t\t\t\\\n+\t  (r) = ((rsize) <= _FP_W_TYPE_SIZE\t\t\t\t\\\n+\t\t ? 0\t\t\t\t\t\t\t\\\n+\t\t : (r) << _FP_W_TYPE_SIZE);\t\t\t\t\\\n+\t  (r) += X##_f[0];\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n /* \"No disassemble Number Five!\" */\n-/* move an integer of size rsize into X's fractional part. We rely on\n- * the _f[] array consisting of words of size _FP_W_TYPE_SIZE to avoid\n- * having to mask the values we store into it.\n- */\n-#define _FP_FRAC_DISASSEMBLE_4(X, r, rsize)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      X##_f[0] = r;\t\t\t\t\t\t\t\\\n-      X##_f[1] = (rsize <= _FP_W_TYPE_SIZE ? 0 : r >> _FP_W_TYPE_SIZE);\t\\\n-      X##_f[2] = (rsize <= 2*_FP_W_TYPE_SIZE ? 0 : r >> 2*_FP_W_TYPE_SIZE); \\\n-      X##_f[3] = (rsize <= 3*_FP_W_TYPE_SIZE ? 0 : r >> 3*_FP_W_TYPE_SIZE); \\\n-    }\t\t\t\t\t\t\t\t\t\\\n+/* Move an integer of size rsize into X's fractional part. We rely on\n+   the _f[] array consisting of words of size _FP_W_TYPE_SIZE to avoid\n+   having to mask the values we store into it.  */\n+#define _FP_FRAC_DISASSEMBLE_4(X, r, rsize)\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      X##_f[0] = (r);\t\t\t\t\\\n+      X##_f[1] = ((rsize) <= _FP_W_TYPE_SIZE\t\\\n+\t\t  ? 0\t\t\t\t\\\n+\t\t  : (r) >> _FP_W_TYPE_SIZE);\t\\\n+      X##_f[2] = ((rsize) <= 2*_FP_W_TYPE_SIZE\t\\\n+\t\t  ? 0\t\t\t\t\\\n+\t\t  : (r) >> 2*_FP_W_TYPE_SIZE);\t\\\n+      X##_f[3] = ((rsize) <= 3*_FP_W_TYPE_SIZE\t\\\n+\t\t  ? 0\t\t\t\t\\\n+\t\t  : (r) >> 3*_FP_W_TYPE_SIZE);\t\\\n+    }\t\t\t\t\t\t\\\n   while (0)\n \n #define _FP_FRAC_COPY_4_1(D, S)\t\t\t\\"}, {"sha": "a47799f1142d53029c005ae7c1eeabe7fb1cf344", "filename": "libgcc/soft-fp/op-8.h", "status": "modified", "additions": 94, "deletions": 65, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fop-8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fop-8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fop-8.h?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -30,87 +30,116 @@\n    <http://www.gnu.org/licenses/>.  */\n \n /* We need just a few things from here for op-4, if we ever need some\n-   other macros, they can be added. */\n+   other macros, they can be added.  */\n #define _FP_FRAC_DECL_8(X)\t_FP_W_TYPE X##_f[8]\n #define _FP_FRAC_HIGH_8(X)\t(X##_f[7])\n #define _FP_FRAC_LOW_8(X)\t(X##_f[0])\n #define _FP_FRAC_WORD_8(X, w)\t(X##_f[w])\n \n-#define _FP_FRAC_SLL_8(X, N)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      _FP_I_TYPE _up, _down, _skip, _i;\t\t\t\\\n-      _skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\\\n-      _up = (N) % _FP_W_TYPE_SIZE;\t\t\t\\\n-      _down = _FP_W_TYPE_SIZE - _up;\t\t\t\\\n-      if (!_up)\t\t\t\t\t\t\\\n-\tfor (_i = 7; _i >= _skip; --_i)\t\t\t\\\n-\t  X##_f[_i] = X##_f[_i-_skip];\t\t\t\\\n-      else\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  for (_i = 7; _i > _skip; --_i)\t\t\\\n-\t    X##_f[_i] = (X##_f[_i-_skip] << _up\t\t\\\n-\t\t\t | X##_f[_i-_skip-1] >> _down);\t\\\n-\t  X##_f[_i--] = X##_f[0] << _up;\t\t\\\n-\t}\t\t\t\t\t\t\\\n-      for (; _i >= 0; --_i)\t\t\t\t\\\n-\tX##_f[_i] = 0;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+#define _FP_FRAC_SLL_8(X, N)\t\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SLL_8_up, _FP_FRAC_SLL_8_down;\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SLL_8_skip, _FP_FRAC_SLL_8_i;\t\t\t\\\n+      _FP_FRAC_SLL_8_skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SLL_8_up = (N) % _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SLL_8_down = _FP_W_TYPE_SIZE - _FP_FRAC_SLL_8_up;\t\\\n+      if (!_FP_FRAC_SLL_8_up)\t\t\t\t\t\t\\\n+\tfor (_FP_FRAC_SLL_8_i = 7;\t\t\t\t\t\\\n+\t     _FP_FRAC_SLL_8_i >= _FP_FRAC_SLL_8_skip;\t\t\t\\\n+\t     --_FP_FRAC_SLL_8_i)\t\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SLL_8_i]\t\t\t\t\t\\\n+\t    = X##_f[_FP_FRAC_SLL_8_i-_FP_FRAC_SLL_8_skip];\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  for (_FP_FRAC_SLL_8_i = 7;\t\t\t\t\t\\\n+\t       _FP_FRAC_SLL_8_i > _FP_FRAC_SLL_8_skip;\t\t\t\\\n+\t       --_FP_FRAC_SLL_8_i)\t\t\t\t\t\\\n+\t    X##_f[_FP_FRAC_SLL_8_i]\t\t\t\t\t\\\n+\t      = ((X##_f[_FP_FRAC_SLL_8_i-_FP_FRAC_SLL_8_skip]\t\t\\\n+\t\t  << _FP_FRAC_SLL_8_up)\t\t\t\t\t\\\n+\t\t | (X##_f[_FP_FRAC_SLL_8_i-_FP_FRAC_SLL_8_skip-1]\t\\\n+\t\t    >> _FP_FRAC_SLL_8_down));\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SLL_8_i--] = X##_f[0] << _FP_FRAC_SLL_8_up;\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      for (; _FP_FRAC_SLL_8_i >= 0; --_FP_FRAC_SLL_8_i)\t\t\t\\\n+\tX##_f[_FP_FRAC_SLL_8_i] = 0;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define _FP_FRAC_SRL_8(X, N)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      _FP_I_TYPE _up, _down, _skip, _i;\t\t\t\\\n-      _skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\\\n-      _down = (N) % _FP_W_TYPE_SIZE;\t\t\t\\\n-      _up = _FP_W_TYPE_SIZE - _down;\t\t\t\\\n-      if (!_down)\t\t\t\t\t\\\n-\tfor (_i = 0; _i <= 7-_skip; ++_i)\t\t\\\n-\t  X##_f[_i] = X##_f[_i+_skip];\t\t\t\\\n-      else\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  for (_i = 0; _i < 7-_skip; ++_i)\t\t\\\n-\t    X##_f[_i] = (X##_f[_i+_skip] >> _down\t\\\n-\t\t\t | X##_f[_i+_skip+1] << _up);\t\\\n-\t  X##_f[_i++] = X##_f[7] >> _down;\t\t\\\n-\t}\t\t\t\t\t\t\\\n-      for (; _i < 8; ++_i)\t\t\t\t\\\n-\tX##_f[_i] = 0;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+#define _FP_FRAC_SRL_8(X, N)\t\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SRL_8_up, _FP_FRAC_SRL_8_down;\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SRL_8_skip, _FP_FRAC_SRL_8_i;\t\t\t\\\n+      _FP_FRAC_SRL_8_skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SRL_8_down = (N) % _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SRL_8_up = _FP_W_TYPE_SIZE - _FP_FRAC_SRL_8_down;\t\\\n+      if (!_FP_FRAC_SRL_8_down)\t\t\t\t\t\t\\\n+\tfor (_FP_FRAC_SRL_8_i = 0;\t\t\t\t\t\\\n+\t     _FP_FRAC_SRL_8_i <= 7-_FP_FRAC_SRL_8_skip;\t\t\t\\\n+\t     ++_FP_FRAC_SRL_8_i)\t\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SRL_8_i]\t\t\t\t\t\\\n+\t    = X##_f[_FP_FRAC_SRL_8_i+_FP_FRAC_SRL_8_skip];\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  for (_FP_FRAC_SRL_8_i = 0;\t\t\t\t\t\\\n+\t       _FP_FRAC_SRL_8_i < 7-_FP_FRAC_SRL_8_skip;\t\t\\\n+\t       ++_FP_FRAC_SRL_8_i)\t\t\t\t\t\\\n+\t    X##_f[_FP_FRAC_SRL_8_i]\t\t\t\t\t\\\n+\t      = ((X##_f[_FP_FRAC_SRL_8_i+_FP_FRAC_SRL_8_skip]\t\t\\\n+\t\t  >> _FP_FRAC_SRL_8_down)\t\t\t\t\\\n+\t\t | (X##_f[_FP_FRAC_SRL_8_i+_FP_FRAC_SRL_8_skip+1]\t\\\n+\t\t    << _FP_FRAC_SRL_8_up));\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SRL_8_i++] = X##_f[7] >> _FP_FRAC_SRL_8_down;\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      for (; _FP_FRAC_SRL_8_i < 8; ++_FP_FRAC_SRL_8_i)\t\t\t\\\n+\tX##_f[_FP_FRAC_SRL_8_i] = 0;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n \n /* Right shift with sticky-lsb.\n- * What this actually means is that we do a standard right-shift,\n- * but that if any of the bits that fall off the right hand side\n- * were one then we always set the LSbit.\n- */\n+   What this actually means is that we do a standard right-shift,\n+   but that if any of the bits that fall off the right hand side\n+   were one then we always set the LSbit.  */\n #define _FP_FRAC_SRS_8(X, N, size)\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _FP_I_TYPE _up, _down, _skip, _i;\t\t\t\t\t\\\n-      _FP_W_TYPE _s;\t\t\t\t\t\t\t\\\n-      _skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\t\t\\\n-      _down = (N) % _FP_W_TYPE_SIZE;\t\t\t\t\t\\\n-      _up = _FP_W_TYPE_SIZE - _down;\t\t\t\t\t\\\n-      for (_s = _i = 0; _i < _skip; ++_i)\t\t\t\t\\\n-\t_s |= X##_f[_i];\t\t\t\t\t\t\\\n-      if (!_down)\t\t\t\t\t\t\t\\\n-\tfor (_i = 0; _i <= 7-_skip; ++_i)\t\t\t\t\\\n-\t  X##_f[_i] = X##_f[_i+_skip];\t\t\t\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SRS_8_up, _FP_FRAC_SRS_8_down;\t\t\\\n+      _FP_I_TYPE _FP_FRAC_SRS_8_skip, _FP_FRAC_SRS_8_i;\t\t\t\\\n+      _FP_W_TYPE _FP_FRAC_SRS_8_s;\t\t\t\t\t\\\n+      _FP_FRAC_SRS_8_skip = (N) / _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SRS_8_down = (N) % _FP_W_TYPE_SIZE;\t\t\t\\\n+      _FP_FRAC_SRS_8_up = _FP_W_TYPE_SIZE - _FP_FRAC_SRS_8_down;\t\\\n+      for (_FP_FRAC_SRS_8_s = _FP_FRAC_SRS_8_i = 0;\t\t\t\\\n+\t   _FP_FRAC_SRS_8_i < _FP_FRAC_SRS_8_skip;\t\t\t\\\n+\t   ++_FP_FRAC_SRS_8_i)\t\t\t\t\t\t\\\n+\t_FP_FRAC_SRS_8_s |= X##_f[_FP_FRAC_SRS_8_i];\t\t\t\\\n+      if (!_FP_FRAC_SRS_8_down)\t\t\t\t\t\t\\\n+\tfor (_FP_FRAC_SRS_8_i = 0;\t\t\t\t\t\\\n+\t     _FP_FRAC_SRS_8_i <= 7-_FP_FRAC_SRS_8_skip;\t\t\t\\\n+\t     ++_FP_FRAC_SRS_8_i)\t\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SRS_8_i]\t\t\t\t\t\\\n+\t    = X##_f[_FP_FRAC_SRS_8_i+_FP_FRAC_SRS_8_skip];\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  _s |= X##_f[_i] << _up;\t\t\t\t\t\\\n-\t  for (_i = 0; _i < 7-_skip; ++_i)\t\t\t\t\\\n-\t    X##_f[_i] = (X##_f[_i+_skip] >> _down\t\t\t\\\n-\t\t\t | X##_f[_i+_skip+1] << _up);\t\t\t\\\n-\t  X##_f[_i++] = X##_f[7] >> _down;\t\t\t\t\\\n+\t  _FP_FRAC_SRS_8_s\t\t\t\t\t\t\\\n+\t    |= X##_f[_FP_FRAC_SRS_8_i] << _FP_FRAC_SRS_8_up;\t\t\\\n+\t  for (_FP_FRAC_SRS_8_i = 0;\t\t\t\t\t\\\n+\t       _FP_FRAC_SRS_8_i < 7-_FP_FRAC_SRS_8_skip;\t\t\\\n+\t       ++_FP_FRAC_SRS_8_i)\t\t\t\t\t\\\n+\t    X##_f[_FP_FRAC_SRS_8_i]\t\t\t\t\t\\\n+\t      = ((X##_f[_FP_FRAC_SRS_8_i+_FP_FRAC_SRS_8_skip]\t\t\\\n+\t\t  >> _FP_FRAC_SRS_8_down)\t\t\t\t\\\n+\t\t | (X##_f[_FP_FRAC_SRS_8_i+_FP_FRAC_SRS_8_skip+1]\t\\\n+\t\t    << _FP_FRAC_SRS_8_up));\t\t\t\t\\\n+\t  X##_f[_FP_FRAC_SRS_8_i++] = X##_f[7] >> _FP_FRAC_SRS_8_down;\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      for (; _i < 8; ++_i)\t\t\t\t\t\t\\\n-\tX##_f[_i] = 0;\t\t\t\t\t\t\t\\\n-      /* don't fix the LSB until the very end when we're sure f[0] is\t\\\n-\t stable */\t\t\t\t\t\t\t\\\n-      X##_f[0] |= (_s != 0);\t\t\t\t\t\t\\\n+      for (; _FP_FRAC_SRS_8_i < 8; ++_FP_FRAC_SRS_8_i)\t\t\t\\\n+\tX##_f[_FP_FRAC_SRS_8_i] = 0;\t\t\t\t\t\\\n+      /* Don't fix the LSB until the very end when we're sure f[0] is\t\\\n+\t stable.  */\t\t\t\t\t\t\t\\\n+      X##_f[0] |= (_FP_FRAC_SRS_8_s != 0);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "73fbe7af25f8f2673dfbe66cbc47199cefaf8675", "filename": "libgcc/soft-fp/op-common.h", "status": "modified", "additions": 479, "deletions": 339, "changes": 818, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fop-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fop-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fop-common.h?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -45,10 +45,8 @@\n    ? (_FP_FRAC_HIGH_##fs (X) & _FP_QNANBIT_SH_##fs)\t\\\n    : !(_FP_FRAC_HIGH_##fs (X) & _FP_QNANBIT_SH_##fs))\n \n-/*\n- * Finish truly unpacking a native fp value by classifying the kind\n- * of fp value and normalizing both the exponent and the fraction.\n- */\n+/* Finish truly unpacking a native fp value by classifying the kind\n+   of fp value and normalizing both the exponent and the fraction.  */\n \n #define _FP_UNPACK_CANONICAL(fs, wc, X)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n@@ -65,14 +63,23 @@\n \tcase 0:\t\t\t\t\t\t\t\\\n \t  if (_FP_FRAC_ZEROP_##wc (X))\t\t\t\t\\\n \t    X##_c = FP_CLS_ZERO;\t\t\t\t\\\n+\t  else if (FP_DENORM_ZERO)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      X##_c = FP_CLS_ZERO;\t\t\t\t\\\n+\t      _FP_FRAC_SET_##wc (X, _FP_ZEROFRAC_##wc);\t\t\\\n+\t      FP_SET_EXCEPTION (FP_EX_DENORM);\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      /* a denormalized number */\t\t\t\\\n-\t      _FP_I_TYPE _shift;\t\t\t\t\\\n-\t      _FP_FRAC_CLZ_##wc (_shift, X);\t\t\t\\\n-\t      _shift -= _FP_FRACXBITS_##fs;\t\t\t\\\n-\t      _FP_FRAC_SLL_##wc (X, (_shift+_FP_WORKBITS));\t\\\n-\t      X##_e -= _FP_EXPBIAS_##fs - 1 + _shift;\t\t\\\n+\t      /* A denormalized number.  */\t\t\t\\\n+\t      _FP_I_TYPE _FP_UNPACK_CANONICAL_shift;\t\t\\\n+\t      _FP_FRAC_CLZ_##wc (_FP_UNPACK_CANONICAL_shift,\t\\\n+\t\t\t\t X);\t\t\t\t\\\n+\t      _FP_UNPACK_CANONICAL_shift -= _FP_FRACXBITS_##fs;\t\\\n+\t      _FP_FRAC_SLL_##wc (X, (_FP_UNPACK_CANONICAL_shift \\\n+\t\t\t\t     + _FP_WORKBITS));\t\t\\\n+\t      X##_e -= (_FP_EXPBIAS_##fs - 1\t\t\t\\\n+\t\t\t+ _FP_UNPACK_CANONICAL_shift);\t\t\\\n \t      X##_c = FP_CLS_NORMAL;\t\t\t\t\\\n \t      FP_SET_EXCEPTION (FP_EX_DENORM);\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n@@ -84,9 +91,10 @@\n \t  else\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      X##_c = FP_CLS_NAN;\t\t\t\t\\\n-\t      /* Check for signaling NaN */\t\t\t\\\n+\t      /* Check for signaling NaN.  */\t\t\t\\\n \t      if (_FP_FRAC_SNANP (fs, X))\t\t\t\\\n-\t\tFP_SET_EXCEPTION (FP_EX_INVALID);\t\t\\\n+\t\tFP_SET_EXCEPTION (FP_EX_INVALID\t\t\t\\\n+\t\t\t\t  | FP_EX_INVALID_SNAN);\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n@@ -98,6 +106,21 @@\n    other classification is not done.  */\n #define _FP_UNPACK_SEMIRAW(fs, wc, X)\t_FP_FRAC_SLL_##wc (X, _FP_WORKBITS)\n \n+/* Check whether a raw or semi-raw input value should be flushed to\n+   zero, and flush it to zero if so.  */\n+#define _FP_CHECK_FLUSH_ZERO(fs, wc, X)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (FP_DENORM_ZERO\t\t\t\t\\\n+\t  && X##_e == 0\t\t\t\t\t\\\n+\t  && !_FP_FRAC_ZEROP_##wc (X))\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  _FP_FRAC_SET_##wc (X, _FP_ZEROFRAC_##wc);\t\\\n+\t  FP_SET_EXCEPTION (FP_EX_DENORM);\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n /* A semi-raw value has overflowed to infinity.  Adjust the mantissa\n    and exponent appropriately.  */\n #define _FP_OVERFLOW_SEMIRAW(fs, wc, X)\t\t\t\\\n@@ -122,14 +145,14 @@\n \n /* Check for a semi-raw value being a signaling NaN and raise the\n    invalid exception if so.  */\n-#define _FP_CHECK_SIGNAN_SEMIRAW(fs, wc, X)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      if (X##_e == _FP_EXPMAX_##fs\t\t\\\n-\t  && !_FP_FRAC_ZEROP_##wc (X)\t\t\\\n-\t  && _FP_FRAC_SNANP_SEMIRAW (fs, X))\t\\\n-\tFP_SET_EXCEPTION (FP_EX_INVALID);\t\\\n-    }\t\t\t\t\t\t\\\n+#define _FP_CHECK_SIGNAN_SEMIRAW(fs, wc, X)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (X##_e == _FP_EXPMAX_##fs\t\t\t\t\\\n+\t  && !_FP_FRAC_ZEROP_##wc (X)\t\t\t\t\\\n+\t  && _FP_FRAC_SNANP_SEMIRAW (fs, X))\t\t\t\\\n+\tFP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_SNAN);\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n /* Choose a NaN result from an operation on two semi-raw NaN\n@@ -234,12 +257,10 @@\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/*\n- * Before packing the bits back into the native fp result, take care\n- * of such mundane things as rounding and overflow.  Also, for some\n- * kinds of fp values, the original parts may not have been fully\n- * extracted -- but that is ok, we can regenerate them now.\n- */\n+/* Before packing the bits back into the native fp result, take care\n+   of such mundane things as rounding and overflow.  Also, for some\n+   kinds of fp values, the original parts may not have been fully\n+   extracted -- but that is ok, we can regenerate them now.  */\n \n #define _FP_PACK_CANONICAL(fs, wc, X)\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n@@ -259,7 +280,7 @@\n \t      _FP_FRAC_SRL_##wc (X, _FP_WORKBITS);\t\t\t\\\n \t      if (X##_e >= _FP_EXPMAX_##fs)\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  /* overflow */\t\t\t\t\t\\\n+\t\t  /* Overflow.  */\t\t\t\t\t\\\n \t\t  switch (FP_ROUNDMODE)\t\t\t\t\t\\\n \t\t    {\t\t\t\t\t\t\t\\\n \t\t    case FP_RND_NEAREST:\t\t\t\t\\\n@@ -276,13 +297,13 @@\n \t\t    }\t\t\t\t\t\t\t\\\n \t\t  if (X##_c == FP_CLS_INF)\t\t\t\t\\\n \t\t    {\t\t\t\t\t\t\t\\\n-\t\t      /* Overflow to infinity */\t\t\t\\\n+\t\t      /* Overflow to infinity.  */\t\t\t\\\n \t\t      X##_e = _FP_EXPMAX_##fs;\t\t\t\t\\\n \t\t      _FP_FRAC_SET_##wc (X, _FP_ZEROFRAC_##wc);\t\t\\\n \t\t    }\t\t\t\t\t\t\t\\\n \t\t  else\t\t\t\t\t\t\t\\\n \t\t    {\t\t\t\t\t\t\t\\\n-\t\t      /* Overflow to maximum normal */\t\t\t\\\n+\t\t      /* Overflow to maximum normal.  */\t\t\\\n \t\t      X##_e = _FP_EXPMAX_##fs - 1;\t\t\t\\\n \t\t      _FP_FRAC_SET_##wc (X, _FP_MAXFRAC_##wc);\t\t\\\n \t\t    }\t\t\t\t\t\t\t\\\n@@ -292,7 +313,7 @@\n \t    }\t\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      /* we've got a denormalized number */\t\t\t\\\n+\t      /* We've got a denormalized number.  */\t\t\t\\\n \t      int _FP_PACK_CANONICAL_is_tiny = 1;\t\t\t\\\n \t      if (_FP_TININESS_AFTER_ROUNDING && X##_e == 0)\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n@@ -329,7 +350,7 @@\n \t\t}\t\t\t\t\t\t\t\\\n \t      else\t\t\t\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  /* underflow to zero */\t\t\t\t\\\n+\t\t  /* Underflow to zero.  */\t\t\t\t\\\n \t\t  X##_e = 0;\t\t\t\t\t\t\\\n \t\t  if (!_FP_FRAC_ZEROP_##wc (X))\t\t\t\t\\\n \t\t    {\t\t\t\t\t\t\t\\\n@@ -367,18 +388,17 @@\n   while (0)\n \n /* This one accepts raw argument and not cooked,  returns\n- * 1 if X is a signaling NaN.\n- */\n+   1 if X is a signaling NaN.  */\n #define _FP_ISSIGNAN(fs, wc, X)\t\t\t\\\n   ({\t\t\t\t\t\t\\\n-    int __ret = 0;\t\t\t\t\\\n+    int _FP_ISSIGNAN_ret = 0;\t\t\t\\\n     if (X##_e == _FP_EXPMAX_##fs)\t\t\\\n       {\t\t\t\t\t\t\\\n \tif (!_FP_FRAC_ZEROP_##wc (X)\t\t\\\n \t    && _FP_FRAC_SNANP (fs, X))\t\t\\\n-\t  __ret = 1;\t\t\t\t\\\n+\t  _FP_ISSIGNAN_ret = 1;\t\t\t\\\n       }\t\t\t\t\t\t\\\n-    __ret;\t\t\t\t\t\\\n+    _FP_ISSIGNAN_ret;\t\t\t\t\\\n   })\n \n \n@@ -389,12 +409,14 @@\n #define _FP_ADD_INTERNAL(fs, wc, R, X, Y, OP)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      _FP_CHECK_FLUSH_ZERO (fs, wc, X);\t\t\t\t\t\\\n+      _FP_CHECK_FLUSH_ZERO (fs, wc, Y);\t\t\t\t\t\\\n       if (X##_s == Y##_s)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  /* Addition.  */\t\t\t\t\t\t\\\n \t  R##_s = X##_s;\t\t\t\t\t\t\\\n-\t  int ediff = X##_e - Y##_e;\t\t\t\t\t\\\n-\t  if (ediff > 0)\t\t\t\t\t\t\\\n+\t  int _FP_ADD_INTERNAL_ediff = X##_e - Y##_e;\t\t\t\\\n+\t  if (_FP_ADD_INTERNAL_ediff > 0)\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      R##_e = X##_e;\t\t\t\t\t\t\\\n \t      if (Y##_e == 0)\t\t\t\t\t\t\\\n@@ -409,8 +431,8 @@\n \t\t  else\t\t\t\t\t\t\t\\\n \t\t    {\t\t\t\t\t\t\t\\\n \t\t      FP_SET_EXCEPTION (FP_EX_DENORM);\t\t\t\\\n-\t\t      ediff--;\t\t\t\t\t\t\\\n-\t\t      if (ediff == 0)\t\t\t\t\t\\\n+\t\t      _FP_ADD_INTERNAL_ediff--;\t\t\t\t\\\n+\t\t      if (_FP_ADD_INTERNAL_ediff == 0)\t\t\t\\\n \t\t\t{\t\t\t\t\t\t\\\n \t\t\t  _FP_FRAC_ADD_##wc (R, X, Y);\t\t\t\\\n \t\t\t  goto add3;\t\t\t\t\t\\\n@@ -436,17 +458,19 @@\n \t      _FP_FRAC_HIGH_##fs (Y) |= _FP_IMPLBIT_SH_##fs;\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t    add1:\t\t\t\t\t\t\t\\\n-\t      /* Shift the mantissa of Y to the right EDIFF steps;\t\\\n-\t\t remember to account later for the implicit MSB of X.  */ \\\n-\t      if (ediff <= _FP_WFRACBITS_##fs)\t\t\t\t\\\n-\t\t_FP_FRAC_SRS_##wc (Y, ediff, _FP_WFRACBITS_##fs);\t\\\n+\t      /* Shift the mantissa of Y to the right\t\t\t\\\n+\t\t _FP_ADD_INTERNAL_EDIFF steps; remember to account\t\\\n+\t\t later for the implicit MSB of X.  */\t\t\t\\\n+\t      if (_FP_ADD_INTERNAL_ediff <= _FP_WFRACBITS_##fs)\t\t\\\n+\t\t_FP_FRAC_SRS_##wc (Y, _FP_ADD_INTERNAL_ediff,\t\t\\\n+\t\t\t\t   _FP_WFRACBITS_##fs);\t\t\t\\\n \t      else if (!_FP_FRAC_ZEROP_##wc (Y))\t\t\t\\\n \t\t_FP_FRAC_SET_##wc (Y, _FP_MINFRAC_##wc);\t\t\\\n \t      _FP_FRAC_ADD_##wc (R, X, Y);\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n-\t  else if (ediff < 0)\t\t\t\t\t\t\\\n+\t  else if (_FP_ADD_INTERNAL_ediff < 0)\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      ediff = -ediff;\t\t\t\t\t\t\\\n+\t      _FP_ADD_INTERNAL_ediff = -_FP_ADD_INTERNAL_ediff;\t\t\\\n \t      R##_e = Y##_e;\t\t\t\t\t\t\\\n \t      if (X##_e == 0)\t\t\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n@@ -460,8 +484,8 @@\n \t\t  else\t\t\t\t\t\t\t\\\n \t\t    {\t\t\t\t\t\t\t\\\n \t\t      FP_SET_EXCEPTION (FP_EX_DENORM);\t\t\t\\\n-\t\t      ediff--;\t\t\t\t\t\t\\\n-\t\t      if (ediff == 0)\t\t\t\t\t\\\n+\t\t      _FP_ADD_INTERNAL_ediff--;\t\t\t\t\\\n+\t\t      if (_FP_ADD_INTERNAL_ediff == 0)\t\t\t\\\n \t\t\t{\t\t\t\t\t\t\\\n \t\t\t  _FP_FRAC_ADD_##wc (R, Y, X);\t\t\t\\\n \t\t\t  goto add3;\t\t\t\t\t\\\n@@ -487,17 +511,19 @@\n \t      _FP_FRAC_HIGH_##fs (X) |= _FP_IMPLBIT_SH_##fs;\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t    add2:\t\t\t\t\t\t\t\\\n-\t      /* Shift the mantissa of X to the right EDIFF steps;\t\\\n-\t\t remember to account later for the implicit MSB of Y.  */ \\\n-\t      if (ediff <= _FP_WFRACBITS_##fs)\t\t\t\t\\\n-\t\t_FP_FRAC_SRS_##wc (X, ediff, _FP_WFRACBITS_##fs);\t\\\n+\t      /* Shift the mantissa of X to the right\t\t\t\\\n+\t\t _FP_ADD_INTERNAL_EDIFF steps; remember to account\t\\\n+\t\t later for the implicit MSB of Y.  */\t\t\t\\\n+\t      if (_FP_ADD_INTERNAL_ediff <= _FP_WFRACBITS_##fs)\t\t\\\n+\t\t_FP_FRAC_SRS_##wc (X, _FP_ADD_INTERNAL_ediff,\t\t\\\n+\t\t\t\t   _FP_WFRACBITS_##fs);\t\t\t\\\n \t      else if (!_FP_FRAC_ZEROP_##wc (X))\t\t\t\\\n \t\t_FP_FRAC_SET_##wc (X, _FP_MINFRAC_##wc);\t\t\\\n \t      _FP_FRAC_ADD_##wc (R, Y, X);\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      /* ediff == 0.  */\t\t\t\t\t\\\n+\t      /* _FP_ADD_INTERNAL_ediff == 0.  */\t\t\t\\\n \t      if (!_FP_EXP_NORMAL (fs, wc, X))\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n \t\t  if (X##_e == 0)\t\t\t\t\t\\\n@@ -573,8 +599,8 @@\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  /* Subtraction.  */\t\t\t\t\t\t\\\n-\t  int ediff = X##_e - Y##_e;\t\t\t\t\t\\\n-\t  if (ediff > 0)\t\t\t\t\t\t\\\n+\t  int _FP_ADD_INTERNAL_ediff = X##_e - Y##_e;\t\t\t\\\n+\t  if (_FP_ADD_INTERNAL_ediff > 0)\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      R##_e = X##_e;\t\t\t\t\t\t\\\n \t      R##_s = X##_s;\t\t\t\t\t\t\\\n@@ -590,8 +616,8 @@\n \t\t  else\t\t\t\t\t\t\t\\\n \t\t    {\t\t\t\t\t\t\t\\\n \t\t      FP_SET_EXCEPTION (FP_EX_DENORM);\t\t\t\\\n-\t\t      ediff--;\t\t\t\t\t\t\\\n-\t\t      if (ediff == 0)\t\t\t\t\t\\\n+\t\t      _FP_ADD_INTERNAL_ediff--;\t\t\t\t\\\n+\t\t      if (_FP_ADD_INTERNAL_ediff == 0)\t\t\t\\\n \t\t\t{\t\t\t\t\t\t\\\n \t\t\t  _FP_FRAC_SUB_##wc (R, X, Y);\t\t\t\\\n \t\t\t  goto sub3;\t\t\t\t\t\\\n@@ -617,17 +643,19 @@\n \t      _FP_FRAC_HIGH_##fs (Y) |= _FP_IMPLBIT_SH_##fs;\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t    sub1:\t\t\t\t\t\t\t\\\n-\t      /* Shift the mantissa of Y to the right EDIFF steps;\t\\\n-\t\t remember to account later for the implicit MSB of X.  */ \\\n-\t      if (ediff <= _FP_WFRACBITS_##fs)\t\t\t\t\\\n-\t\t_FP_FRAC_SRS_##wc (Y, ediff, _FP_WFRACBITS_##fs);\t\\\n+\t      /* Shift the mantissa of Y to the right\t\t\t\\\n+\t\t _FP_ADD_INTERNAL_EDIFF steps; remember to account\t\\\n+\t\t later for the implicit MSB of X.  */\t\t\t\\\n+\t      if (_FP_ADD_INTERNAL_ediff <= _FP_WFRACBITS_##fs)\t\t\\\n+\t\t_FP_FRAC_SRS_##wc (Y, _FP_ADD_INTERNAL_ediff,\t\t\\\n+\t\t\t\t   _FP_WFRACBITS_##fs);\t\t\t\\\n \t      else if (!_FP_FRAC_ZEROP_##wc (Y))\t\t\t\\\n \t\t_FP_FRAC_SET_##wc (Y, _FP_MINFRAC_##wc);\t\t\\\n \t      _FP_FRAC_SUB_##wc (R, X, Y);\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n-\t  else if (ediff < 0)\t\t\t\t\t\t\\\n+\t  else if (_FP_ADD_INTERNAL_ediff < 0)\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      ediff = -ediff;\t\t\t\t\t\t\\\n+\t      _FP_ADD_INTERNAL_ediff = -_FP_ADD_INTERNAL_ediff;\t\t\\\n \t      R##_e = Y##_e;\t\t\t\t\t\t\\\n \t      R##_s = Y##_s;\t\t\t\t\t\t\\\n \t      if (X##_e == 0)\t\t\t\t\t\t\\\n@@ -642,8 +670,8 @@\n \t\t  else\t\t\t\t\t\t\t\\\n \t\t    {\t\t\t\t\t\t\t\\\n \t\t      FP_SET_EXCEPTION (FP_EX_DENORM);\t\t\t\\\n-\t\t      ediff--;\t\t\t\t\t\t\\\n-\t\t      if (ediff == 0)\t\t\t\t\t\\\n+\t\t      _FP_ADD_INTERNAL_ediff--;\t\t\t\t\\\n+\t\t      if (_FP_ADD_INTERNAL_ediff == 0)\t\t\t\\\n \t\t\t{\t\t\t\t\t\t\\\n \t\t\t  _FP_FRAC_SUB_##wc (R, Y, X);\t\t\t\\\n \t\t\t  goto sub3;\t\t\t\t\t\\\n@@ -669,10 +697,12 @@\n \t      _FP_FRAC_HIGH_##fs (X) |= _FP_IMPLBIT_SH_##fs;\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t    sub2:\t\t\t\t\t\t\t\\\n-\t      /* Shift the mantissa of X to the right EDIFF steps;\t\\\n-\t\t remember to account later for the implicit MSB of Y.  */ \\\n-\t      if (ediff <= _FP_WFRACBITS_##fs)\t\t\t\t\\\n-\t\t_FP_FRAC_SRS_##wc (X, ediff, _FP_WFRACBITS_##fs);\t\\\n+\t      /* Shift the mantissa of X to the right\t\t\t\\\n+\t\t _FP_ADD_INTERNAL_EDIFF steps; remember to account\t\\\n+\t\t later for the implicit MSB of Y.  */\t\t\t\\\n+\t      if (_FP_ADD_INTERNAL_ediff <= _FP_WFRACBITS_##fs)\t\t\\\n+\t\t_FP_FRAC_SRS_##wc (X, _FP_ADD_INTERNAL_ediff,\t\t\\\n+\t\t\t\t   _FP_WFRACBITS_##fs);\t\t\t\\\n \t      else if (!_FP_FRAC_ZEROP_##wc (X))\t\t\t\\\n \t\t_FP_FRAC_SET_##wc (X, _FP_MINFRAC_##wc);\t\t\\\n \t      _FP_FRAC_SUB_##wc (R, Y, X);\t\t\t\t\\\n@@ -735,7 +765,8 @@\n \t\t\t      R##_s = _FP_NANSIGN_##fs;\t\t\t\\\n \t\t\t      _FP_FRAC_SET_##wc (R, _FP_NANFRAC_##fs);\t\\\n \t\t\t      _FP_FRAC_SLL_##wc (R, _FP_WORKBITS);\t\\\n-\t\t\t      FP_SET_EXCEPTION (FP_EX_INVALID);\t\t\\\n+\t\t\t      FP_SET_EXCEPTION (FP_EX_INVALID\t\t\\\n+\t\t\t\t\t\t| FP_EX_INVALID_ISI);\t\\\n \t\t\t    }\t\t\t\t\t\t\\\n \t\t\t  else\t\t\t\t\t\t\\\n \t\t\t    {\t\t\t\t\t\t\\\n@@ -783,24 +814,26 @@\n \tsub3:\t\t\t\t\t\t\t\t\\\n \t  if (_FP_FRAC_HIGH_##fs (R) & _FP_IMPLBIT_SH_##fs)\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      int diff;\t\t\t\t\t\t\t\\\n+\t      int _FP_ADD_INTERNAL_diff;\t\t\t\t\\\n \t      /* Carry into most significant bit of larger one of X and Y, \\\n \t\t canceling it; renormalize.  */\t\t\t\t\\\n \t      _FP_FRAC_HIGH_##fs (R) &= _FP_IMPLBIT_SH_##fs - 1;\t\\\n \t    norm:\t\t\t\t\t\t\t\\\n-\t      _FP_FRAC_CLZ_##wc (diff, R);\t\t\t\t\\\n-\t      diff -= _FP_WFRACXBITS_##fs;\t\t\t\t\\\n-\t      _FP_FRAC_SLL_##wc (R, diff);\t\t\t\t\\\n-\t      if (R##_e <= diff)\t\t\t\t\t\\\n+\t      _FP_FRAC_CLZ_##wc (_FP_ADD_INTERNAL_diff, R);\t\t\\\n+\t      _FP_ADD_INTERNAL_diff -= _FP_WFRACXBITS_##fs;\t\t\\\n+\t      _FP_FRAC_SLL_##wc (R, _FP_ADD_INTERNAL_diff);\t\t\\\n+\t      if (R##_e <= _FP_ADD_INTERNAL_diff)\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n \t\t  /* R is denormalized.  */\t\t\t\t\\\n-\t\t  diff = diff - R##_e + 1;\t\t\t\t\\\n-\t\t  _FP_FRAC_SRS_##wc (R, diff, _FP_WFRACBITS_##fs);\t\\\n+\t\t  _FP_ADD_INTERNAL_diff\t\t\t\t\t\\\n+\t\t    = _FP_ADD_INTERNAL_diff - R##_e + 1;\t\t\\\n+\t\t  _FP_FRAC_SRS_##wc (R, _FP_ADD_INTERNAL_diff,\t\t\\\n+\t\t\t\t     _FP_WFRACBITS_##fs);\t\t\\\n \t\t  R##_e = 0;\t\t\t\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n \t      else\t\t\t\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  R##_e -= diff;\t\t\t\t\t\\\n+\t\t  R##_e -= _FP_ADD_INTERNAL_diff;\t\t\t\\\n \t\t  _FP_FRAC_HIGH_##fs (R) &= ~(_FP_W_TYPE) _FP_IMPLBIT_SH_##fs; \\\n \t\t}\t\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n@@ -820,9 +853,7 @@\n   while (0)\n \n \n-/*\n- * Main negation routine.  The input value is raw.\n- */\n+/* Main negation routine.  The input value is raw.  */\n \n #define _FP_NEG(fs, wc, R, X)\t\t\t\\\n   do\t\t\t\t\t\t\\\n@@ -834,9 +865,7 @@\n   while (0)\n \n \n-/*\n- * Main multiplication routine.  The input values should be cooked.\n- */\n+/* Main multiplication routine.  The input values should be cooked.  */\n \n #define _FP_MUL(fs, wc, R, X, Y)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n@@ -889,7 +918,7 @@\n \t  R##_s = _FP_NANSIGN_##fs;\t\t\t\t\\\n \t  R##_c = FP_CLS_NAN;\t\t\t\t\t\\\n \t  _FP_FRAC_SET_##wc (R, _FP_NANFRAC_##fs);\t\t\\\n-\t  FP_SET_EXCEPTION (FP_EX_INVALID);\t\t\t\\\n+\t  FP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_IMZ);\t\\\n \t  break;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n \tdefault:\t\t\t\t\t\t\\\n@@ -904,9 +933,9 @@\n #define _FP_FMA(fs, wc, dwc, R, X, Y, Z)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      FP_DECL_##fs (T);\t\t\t\t\t\t\t\\\n-      T##_s = X##_s ^ Y##_s;\t\t\t\t\t\t\\\n-      T##_e = X##_e + Y##_e + 1;\t\t\t\t\t\\\n+      FP_DECL_##fs (_FP_FMA_T);\t\t\t\t\t\t\\\n+      _FP_FMA_T##_s = X##_s ^ Y##_s;\t\t\t\t\t\\\n+      _FP_FMA_T##_e = X##_e + Y##_e + 1;\t\t\t\t\\\n       switch (_FP_CLS_COMBINE (X##_c, Y##_c))\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NORMAL, FP_CLS_NORMAL):\t\t\\\n@@ -921,8 +950,8 @@\n \t\t\t\t\t\t\t\t\t\\\n \t    case FP_CLS_ZERO:\t\t\t\t\t\t\\\n \t      R##_c = FP_CLS_NORMAL;\t\t\t\t\t\\\n-\t      R##_s = T##_s;\t\t\t\t\t\t\\\n-\t      R##_e = T##_e;\t\t\t\t\t\t\\\n+\t      R##_s = _FP_FMA_T##_s;\t\t\t\t\t\\\n+\t      R##_e = _FP_FMA_T##_e;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t      _FP_MUL_MEAT_##fs (R, X, Y);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -933,61 +962,68 @@\n \t      break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t    case FP_CLS_NORMAL:;\t\t\t\t\t\\\n-\t      _FP_FRAC_DECL_##dwc (TD);\t\t\t\t\t\\\n-\t      _FP_FRAC_DECL_##dwc (ZD);\t\t\t\t\t\\\n-\t      _FP_FRAC_DECL_##dwc (RD);\t\t\t\t\t\\\n-\t      _FP_MUL_MEAT_DW_##fs (TD, X, Y);\t\t\t\t\\\n-\t      R##_e = T##_e;\t\t\t\t\t\t\\\n-\t      int tsh = _FP_FRAC_HIGHBIT_DW_##dwc (fs, TD) == 0;\t\\\n-\t      T##_e -= tsh;\t\t\t\t\t\t\\\n-\t      int ediff = T##_e - Z##_e;\t\t\t\t\\\n-\t      if (ediff >= 0)\t\t\t\t\t\t\\\n+\t      _FP_FRAC_DECL_##dwc (_FP_FMA_TD);\t\t\t\t\\\n+\t      _FP_FRAC_DECL_##dwc (_FP_FMA_ZD);\t\t\t\t\\\n+\t      _FP_FRAC_DECL_##dwc (_FP_FMA_RD);\t\t\t\t\\\n+\t      _FP_MUL_MEAT_DW_##fs (_FP_FMA_TD, X, Y);\t\t\t\\\n+\t      R##_e = _FP_FMA_T##_e;\t\t\t\t\t\\\n+\t      int _FP_FMA_tsh\t\t\t\t\t\t\\\n+\t\t= _FP_FRAC_HIGHBIT_DW_##dwc (fs, _FP_FMA_TD) == 0;\t\\\n+\t      _FP_FMA_T##_e -= _FP_FMA_tsh;\t\t\t\t\\\n+\t      int _FP_FMA_ediff = _FP_FMA_T##_e - Z##_e;\t\t\\\n+\t      if (_FP_FMA_ediff >= 0)\t\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  int shift = _FP_WFRACBITS_##fs - tsh - ediff;\t\t\\\n-\t\t  if (shift <= -_FP_WFRACBITS_##fs)\t\t\t\\\n-\t\t    _FP_FRAC_SET_##dwc (ZD, _FP_MINFRAC_##dwc);\t\t\\\n+\t\t  int _FP_FMA_shift\t\t\t\t\t\\\n+\t\t    = _FP_WFRACBITS_##fs - _FP_FMA_tsh - _FP_FMA_ediff;\t\\\n+\t\t  if (_FP_FMA_shift <= -_FP_WFRACBITS_##fs)\t\t\\\n+\t\t    _FP_FRAC_SET_##dwc (_FP_FMA_ZD, _FP_MINFRAC_##dwc);\t\\\n \t\t  else\t\t\t\t\t\t\t\\\n \t\t    {\t\t\t\t\t\t\t\\\n-\t\t      _FP_FRAC_COPY_##dwc##_##wc (ZD, Z);\t\t\\\n-\t\t      if (shift < 0)\t\t\t\t\t\\\n-\t\t\t_FP_FRAC_SRS_##dwc (ZD, -shift,\t\t\t\\\n+\t\t      _FP_FRAC_COPY_##dwc##_##wc (_FP_FMA_ZD, Z);\t\\\n+\t\t      if (_FP_FMA_shift < 0)\t\t\t\t\\\n+\t\t\t_FP_FRAC_SRS_##dwc (_FP_FMA_ZD, -_FP_FMA_shift,\t\\\n \t\t\t\t\t    _FP_WFRACBITS_DW_##fs);\t\\\n-\t\t      else if (shift > 0)\t\t\t\t\\\n-\t\t\t_FP_FRAC_SLL_##dwc (ZD, shift);\t\t\t\\\n+\t\t      else if (_FP_FMA_shift > 0)\t\t\t\\\n+\t\t\t_FP_FRAC_SLL_##dwc (_FP_FMA_ZD, _FP_FMA_shift);\t\\\n \t\t    }\t\t\t\t\t\t\t\\\n-\t\t  R##_s = T##_s;\t\t\t\t\t\\\n-\t\t  if (T##_s == Z##_s)\t\t\t\t\t\\\n-\t\t    _FP_FRAC_ADD_##dwc (RD, TD, ZD);\t\t\t\\\n+\t\t  R##_s = _FP_FMA_T##_s;\t\t\t\t\\\n+\t\t  if (_FP_FMA_T##_s == Z##_s)\t\t\t\t\\\n+\t\t    _FP_FRAC_ADD_##dwc (_FP_FMA_RD, _FP_FMA_TD,\t\t\\\n+\t\t\t\t\t_FP_FMA_ZD);\t\t\t\\\n \t\t  else\t\t\t\t\t\t\t\\\n \t\t    {\t\t\t\t\t\t\t\\\n-\t\t      _FP_FRAC_SUB_##dwc (RD, TD, ZD);\t\t\t\\\n-\t\t      if (_FP_FRAC_NEGP_##dwc (RD))\t\t\t\\\n+\t\t      _FP_FRAC_SUB_##dwc (_FP_FMA_RD, _FP_FMA_TD,\t\\\n+\t\t\t\t\t  _FP_FMA_ZD);\t\t\t\\\n+\t\t      if (_FP_FRAC_NEGP_##dwc (_FP_FMA_RD))\t\t\\\n \t\t\t{\t\t\t\t\t\t\\\n \t\t\t  R##_s = Z##_s;\t\t\t\t\\\n-\t\t\t  _FP_FRAC_SUB_##dwc (RD, ZD, TD);\t\t\\\n+\t\t\t  _FP_FRAC_SUB_##dwc (_FP_FMA_RD, _FP_FMA_ZD,\t\\\n+\t\t\t\t\t      _FP_FMA_TD);\t\t\\\n \t\t\t}\t\t\t\t\t\t\\\n \t\t    }\t\t\t\t\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n \t      else\t\t\t\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n \t\t  R##_e = Z##_e;\t\t\t\t\t\\\n \t\t  R##_s = Z##_s;\t\t\t\t\t\\\n-\t\t  _FP_FRAC_COPY_##dwc##_##wc (ZD, Z);\t\t\t\\\n-\t\t  _FP_FRAC_SLL_##dwc (ZD, _FP_WFRACBITS_##fs);\t\t\\\n-\t\t  int shift = -ediff - tsh;\t\t\t\t\\\n-\t\t  if (shift >= _FP_WFRACBITS_DW_##fs)\t\t\t\\\n-\t\t    _FP_FRAC_SET_##dwc (TD, _FP_MINFRAC_##dwc);\t\t\\\n-\t\t  else if (shift > 0)\t\t\t\t\t\\\n-\t\t    _FP_FRAC_SRS_##dwc (TD, shift,\t\t\t\\\n+\t\t  _FP_FRAC_COPY_##dwc##_##wc (_FP_FMA_ZD, Z);\t\t\\\n+\t\t  _FP_FRAC_SLL_##dwc (_FP_FMA_ZD, _FP_WFRACBITS_##fs);\t\\\n+\t\t  int _FP_FMA_shift = -_FP_FMA_ediff - _FP_FMA_tsh;\t\\\n+\t\t  if (_FP_FMA_shift >= _FP_WFRACBITS_DW_##fs)\t\t\\\n+\t\t    _FP_FRAC_SET_##dwc (_FP_FMA_TD, _FP_MINFRAC_##dwc);\t\\\n+\t\t  else if (_FP_FMA_shift > 0)\t\t\t\t\\\n+\t\t    _FP_FRAC_SRS_##dwc (_FP_FMA_TD, _FP_FMA_shift,\t\\\n \t\t\t\t\t_FP_WFRACBITS_DW_##fs);\t\t\\\n-\t\t  if (Z##_s == T##_s)\t\t\t\t\t\\\n-\t\t    _FP_FRAC_ADD_##dwc (RD, ZD, TD);\t\t\t\\\n+\t\t  if (Z##_s == _FP_FMA_T##_s)\t\t\t\t\\\n+\t\t    _FP_FRAC_ADD_##dwc (_FP_FMA_RD, _FP_FMA_ZD,\t\t\\\n+\t\t\t\t\t_FP_FMA_TD);\t\t\t\\\n \t\t  else\t\t\t\t\t\t\t\\\n-\t\t    _FP_FRAC_SUB_##dwc (RD, ZD, TD);\t\t\t\\\n+\t\t    _FP_FRAC_SUB_##dwc (_FP_FMA_RD, _FP_FMA_ZD,\t\t\\\n+\t\t\t\t\t_FP_FMA_TD);\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n-\t      if (_FP_FRAC_ZEROP_##dwc (RD))\t\t\t\t\\\n+\t      if (_FP_FRAC_ZEROP_##dwc (_FP_FMA_RD))\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  if (T##_s == Z##_s)\t\t\t\t\t\\\n+\t\t  if (_FP_FMA_T##_s == Z##_s)\t\t\t\t\\\n \t\t    R##_s = Z##_s;\t\t\t\t\t\\\n \t\t  else\t\t\t\t\t\t\t\\\n \t\t    R##_s = (FP_ROUNDMODE == FP_RND_MINF);\t\t\\\n@@ -996,78 +1032,78 @@\n \t\t}\t\t\t\t\t\t\t\\\n \t      else\t\t\t\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  int rlz;\t\t\t\t\t\t\\\n-\t\t  _FP_FRAC_CLZ_##dwc (rlz, RD);\t\t\t\t\\\n-\t\t  rlz -= _FP_WFRACXBITS_DW_##fs;\t\t\t\\\n-\t\t  R##_e -= rlz;\t\t\t\t\t\t\\\n-\t\t  int shift = _FP_WFRACBITS_##fs - rlz;\t\t\t\\\n-\t\t  if (shift > 0)\t\t\t\t\t\\\n-\t\t    _FP_FRAC_SRS_##dwc (RD, shift,\t\t\t\\\n+\t\t  int _FP_FMA_rlz;\t\t\t\t\t\\\n+\t\t  _FP_FRAC_CLZ_##dwc (_FP_FMA_rlz, _FP_FMA_RD);\t\t\\\n+\t\t  _FP_FMA_rlz -= _FP_WFRACXBITS_DW_##fs;\t\t\\\n+\t\t  R##_e -= _FP_FMA_rlz;\t\t\t\t\t\\\n+\t\t  int _FP_FMA_shift = _FP_WFRACBITS_##fs - _FP_FMA_rlz;\t\\\n+\t\t  if (_FP_FMA_shift > 0)\t\t\t\t\\\n+\t\t    _FP_FRAC_SRS_##dwc (_FP_FMA_RD, _FP_FMA_shift,\t\\\n \t\t\t\t\t_FP_WFRACBITS_DW_##fs);\t\t\\\n-\t\t  else if (shift < 0)\t\t\t\t\t\\\n-\t\t    _FP_FRAC_SLL_##dwc (RD, -shift);\t\t\t\\\n-\t\t  _FP_FRAC_COPY_##wc##_##dwc (R, RD);\t\t\t\\\n+\t\t  else if (_FP_FMA_shift < 0)\t\t\t\t\\\n+\t\t    _FP_FRAC_SLL_##dwc (_FP_FMA_RD, -_FP_FMA_shift);\t\\\n+\t\t  _FP_FRAC_COPY_##wc##_##dwc (R, _FP_FMA_RD);\t\t\\\n \t\t  R##_c = FP_CLS_NORMAL;\t\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n \t      break;\t\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  goto done_fma;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NAN, FP_CLS_NAN):\t\t\t\\\n-\t  _FP_CHOOSENAN (fs, wc, T, X, Y, '*');\t\t\t\t\\\n+\t  _FP_CHOOSENAN (fs, wc, _FP_FMA_T, X, Y, '*');\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NAN, FP_CLS_NORMAL):\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NAN, FP_CLS_INF):\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NAN, FP_CLS_ZERO):\t\t\t\\\n-\t  T##_s = X##_s;\t\t\t\t\t\t\\\n+\t  _FP_FMA_T##_s = X##_s;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_INF, FP_CLS_INF):\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_INF, FP_CLS_NORMAL):\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_ZERO, FP_CLS_NORMAL):\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_ZERO, FP_CLS_ZERO):\t\t\\\n-\t  _FP_FRAC_COPY_##wc (T, X);\t\t\t\t\t\\\n-\t  T##_c = X##_c;\t\t\t\t\t\t\\\n+\t  _FP_FRAC_COPY_##wc (_FP_FMA_T, X);\t\t\t\t\\\n+\t  _FP_FMA_T##_c = X##_c;\t\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NORMAL, FP_CLS_NAN):\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_INF, FP_CLS_NAN):\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_ZERO, FP_CLS_NAN):\t\t\t\\\n-\t  T##_s = Y##_s;\t\t\t\t\t\t\\\n+\t  _FP_FMA_T##_s = Y##_s;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NORMAL, FP_CLS_INF):\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NORMAL, FP_CLS_ZERO):\t\t\\\n-\t  _FP_FRAC_COPY_##wc (T, Y);\t\t\t\t\t\\\n-\t  T##_c = Y##_c;\t\t\t\t\t\t\\\n+\t  _FP_FRAC_COPY_##wc (_FP_FMA_T, Y);\t\t\t\t\\\n+\t  _FP_FMA_T##_c = Y##_c;\t\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_INF, FP_CLS_ZERO):\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_ZERO, FP_CLS_INF):\t\t\t\\\n-\t  T##_s = _FP_NANSIGN_##fs;\t\t\t\t\t\\\n-\t  T##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n-\t  _FP_FRAC_SET_##wc (T, _FP_NANFRAC_##fs);\t\t\t\\\n-\t  FP_SET_EXCEPTION (FP_EX_INVALID);\t\t\t\t\\\n+\t  _FP_FMA_T##_s = _FP_NANSIGN_##fs;\t\t\t\t\\\n+\t  _FP_FMA_T##_c = FP_CLS_NAN;\t\t\t\t\t\\\n+\t  _FP_FRAC_SET_##wc (_FP_FMA_T, _FP_NANFRAC_##fs);\t\t\\\n+\t  FP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_IMZ_FMA);\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tdefault:\t\t\t\t\t\t\t\\\n \t  abort ();\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* T = X * Y is zero, infinity or NaN.  */\t\t\t\\\n-      switch (_FP_CLS_COMBINE (T##_c, Z##_c))\t\t\t\t\\\n+      switch (_FP_CLS_COMBINE (_FP_FMA_T##_c, Z##_c))\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NAN, FP_CLS_NAN):\t\t\t\\\n-\t  _FP_CHOOSENAN (fs, wc, R, T, Z, '+');\t\t\t\t\\\n+\t  _FP_CHOOSENAN (fs, wc, R, _FP_FMA_T, Z, '+');\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NAN, FP_CLS_NORMAL):\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NAN, FP_CLS_INF):\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_NAN, FP_CLS_ZERO):\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_INF, FP_CLS_NORMAL):\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_INF, FP_CLS_ZERO):\t\t\t\\\n-\t  R##_s = T##_s;\t\t\t\t\t\t\\\n-\t  _FP_FRAC_COPY_##wc (R, T);\t\t\t\t\t\\\n-\t  R##_c = T##_c;\t\t\t\t\t\t\\\n+\t  R##_s = _FP_FMA_T##_s;\t\t\t\t\t\\\n+\t  _FP_FRAC_COPY_##wc (R, _FP_FMA_T);\t\t\t\t\\\n+\t  R##_c = _FP_FMA_T##_c;\t\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_INF, FP_CLS_NAN):\t\t\t\\\n@@ -1080,7 +1116,7 @@\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_INF, FP_CLS_INF):\t\t\t\\\n-\t  if (T##_s == Z##_s)\t\t\t\t\t\t\\\n+\t  if (_FP_FMA_T##_s == Z##_s)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      R##_s = Z##_s;\t\t\t\t\t\t\\\n \t      _FP_FRAC_COPY_##wc (R, Z);\t\t\t\t\\\n@@ -1091,12 +1127,12 @@\n \t      R##_s = _FP_NANSIGN_##fs;\t\t\t\t\t\\\n \t      R##_c = FP_CLS_NAN;\t\t\t\t\t\\\n \t      _FP_FRAC_SET_##wc (R, _FP_NANFRAC_##fs);\t\t\t\\\n-\t      FP_SET_EXCEPTION (FP_EX_INVALID);\t\t\t\t\\\n+\t      FP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_ISI);\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_ZERO, FP_CLS_ZERO):\t\t\\\n-\t  if (T##_s == Z##_s)\t\t\t\t\t\t\\\n+\t  if (_FP_FMA_T##_s == Z##_s)\t\t\t\t\t\\\n \t    R##_s = Z##_s;\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    R##_s = (FP_ROUNDMODE == FP_RND_MINF);\t\t\t\\\n@@ -1112,9 +1148,7 @@\n   while (0)\n \n \n-/*\n- * Main division routine.  The input values should be cooked.\n- */\n+/* Main division routine.  The input values should be cooked.  */\n \n #define _FP_DIV(fs, wc, R, X, Y)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n@@ -1167,7 +1201,10 @@\n \t  R##_s = _FP_NANSIGN_##fs;\t\t\t\t\\\n \t  R##_c = FP_CLS_NAN;\t\t\t\t\t\\\n \t  _FP_FRAC_SET_##wc (R, _FP_NANFRAC_##fs);\t\t\\\n-\t  FP_SET_EXCEPTION (FP_EX_INVALID);\t\t\t\\\n+\t  FP_SET_EXCEPTION (FP_EX_INVALID\t\t\t\\\n+\t\t\t    | (X##_c == FP_CLS_INF\t\t\\\n+\t\t\t       ? FP_EX_INVALID_IDI\t\t\\\n+\t\t\t       : FP_EX_INVALID_ZDZ));\t\t\\\n \t  break;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n \tdefault:\t\t\t\t\t\t\\\n@@ -1177,227 +1214,313 @@\n   while (0)\n \n \n-/*\n- * Main differential comparison routine.  The inputs should be raw not\n- * cooked.  The return is -1,0,1 for normal values, 2 otherwise.\n- */\n+/* Helper for comparisons.  EX is 0 not to raise exceptions, 1 to\n+   raise exceptions for signaling NaN operands, 2 to raise exceptions\n+   for all NaN operands.  Conditionals are organized to allow the\n+   compiler to optimize away code based on the value of EX.  */\n \n-#define _FP_CMP(fs, wc, ret, X, Y, un)\t\t\t\t\t\\\n+#define _FP_CMP_CHECK_NAN(fs, wc, X, Y, ex)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      /* NANs are unordered */\t\t\t\t\t\t\\\n+      /* The arguments are unordered, which may or may not result in\t\\\n+\t an exception.  */\t\t\t\t\t\t\\\n+      if (ex)\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  /* At least some cases of unordered arguments result in\t\\\n+\t     exceptions; check whether this is one.  */\t\t\t\\\n+\t  if (FP_EX_INVALID_SNAN || FP_EX_INVALID_VC)\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      /* Check separately for each case of \"invalid\"\t\t\\\n+\t\t exceptions.  */\t\t\t\t\t\\\n+\t      if ((ex) == 2)\t\t\t\t\t\t\\\n+\t\tFP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_VC);\t\\\n+\t      if (_FP_ISSIGNAN (fs, wc, X)\t\t\t\t\\\n+\t\t  || _FP_ISSIGNAN (fs, wc, Y))\t\t\t\t\\\n+\t\tFP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_SNAN);\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  /* Otherwise, we only need to check whether to raise an\t\\\n+\t     exception, not which case or cases it is.  */\t\t\\\n+\t  else if ((ex) == 2\t\t\t\t\t\t\\\n+\t\t   || _FP_ISSIGNAN (fs, wc, X)\t\t\t\t\\\n+\t\t   || _FP_ISSIGNAN (fs, wc, Y))\t\t\t\t\\\n+\t    FP_SET_EXCEPTION (FP_EX_INVALID);\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Main differential comparison routine.  The inputs should be raw not\n+   cooked.  The return is -1, 0, 1 for normal values, UN\n+   otherwise.  */\n+\n+#define _FP_CMP(fs, wc, ret, X, Y, un, ex)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      /* NANs are unordered.  */\t\t\t\t\t\\\n       if ((X##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (X))\t\\\n \t  || (Y##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (Y)))\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  ret = un;\t\t\t\t\t\t\t\\\n+\t  (ret) = (un);\t\t\t\t\t\t\t\\\n+\t  _FP_CMP_CHECK_NAN (fs, wc, X, Y, (ex));\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  int __is_zero_x;\t\t\t\t\t\t\\\n-\t  int __is_zero_y;\t\t\t\t\t\t\\\n+\t  int _FP_CMP_is_zero_x;\t\t\t\t\t\\\n+\t  int _FP_CMP_is_zero_y;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  _FP_CHECK_FLUSH_ZERO (fs, wc, X);\t\t\t\t\\\n+\t  _FP_CHECK_FLUSH_ZERO (fs, wc, Y);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  __is_zero_x = (!X##_e && _FP_FRAC_ZEROP_##wc (X)) ? 1 : 0;\t\\\n-\t  __is_zero_y = (!Y##_e && _FP_FRAC_ZEROP_##wc (Y)) ? 1 : 0;\t\\\n+\t  _FP_CMP_is_zero_x\t\t\t\t\t\t\\\n+\t    = (!X##_e && _FP_FRAC_ZEROP_##wc (X)) ? 1 : 0;\t\t\\\n+\t  _FP_CMP_is_zero_y\t\t\t\t\t\t\\\n+\t    = (!Y##_e && _FP_FRAC_ZEROP_##wc (Y)) ? 1 : 0;\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  if (__is_zero_x && __is_zero_y)\t\t\t\t\\\n-\t    ret = 0;\t\t\t\t\t\t\t\\\n-\t  else if (__is_zero_x)\t\t\t\t\t\t\\\n-\t    ret = Y##_s ? 1 : -1;\t\t\t\t\t\\\n-\t  else if (__is_zero_y)\t\t\t\t\t\t\\\n-\t    ret = X##_s ? -1 : 1;\t\t\t\t\t\\\n+\t  if (_FP_CMP_is_zero_x && _FP_CMP_is_zero_y)\t\t\t\\\n+\t    (ret) = 0;\t\t\t\t\t\t\t\\\n+\t  else if (_FP_CMP_is_zero_x)\t\t\t\t\t\\\n+\t    (ret) = Y##_s ? 1 : -1;\t\t\t\t\t\\\n+\t  else if (_FP_CMP_is_zero_y)\t\t\t\t\t\\\n+\t    (ret) = X##_s ? -1 : 1;\t\t\t\t\t\\\n \t  else if (X##_s != Y##_s)\t\t\t\t\t\\\n-\t    ret = X##_s ? -1 : 1;\t\t\t\t\t\\\n+\t    (ret) = X##_s ? -1 : 1;\t\t\t\t\t\\\n \t  else if (X##_e > Y##_e)\t\t\t\t\t\\\n-\t    ret = X##_s ? -1 : 1;\t\t\t\t\t\\\n+\t    (ret) = X##_s ? -1 : 1;\t\t\t\t\t\\\n \t  else if (X##_e < Y##_e)\t\t\t\t\t\\\n-\t    ret = X##_s ? 1 : -1;\t\t\t\t\t\\\n+\t    (ret) = X##_s ? 1 : -1;\t\t\t\t\t\\\n \t  else if (_FP_FRAC_GT_##wc (X, Y))\t\t\t\t\\\n-\t    ret = X##_s ? -1 : 1;\t\t\t\t\t\\\n+\t    (ret) = X##_s ? -1 : 1;\t\t\t\t\t\\\n \t  else if (_FP_FRAC_GT_##wc (Y, X))\t\t\t\t\\\n-\t    ret = X##_s ? 1 : -1;\t\t\t\t\t\\\n+\t    (ret) = X##_s ? 1 : -1;\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n-\t    ret = 0;\t\t\t\t\t\t\t\\\n+\t    (ret) = 0;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n \n /* Simplification for strict equality.  */\n \n-#define _FP_CMP_EQ(fs, wc, ret, X, Y)\t\t\t\t\t\\\n+#define _FP_CMP_EQ(fs, wc, ret, X, Y, ex)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      /* NANs are unordered */\t\t\t\t\t\t\\\n+      /* NANs are unordered.  */\t\t\t\t\t\\\n       if ((X##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (X))\t\\\n \t  || (Y##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (Y)))\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  ret = 1;\t\t\t\t\t\t\t\\\n+\t  (ret) = 1;\t\t\t\t\t\t\t\\\n+\t  _FP_CMP_CHECK_NAN (fs, wc, X, Y, (ex));\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  ret = !(X##_e == Y##_e\t\t\t\t\t\\\n-\t\t  && _FP_FRAC_EQ_##wc (X, Y)\t\t\t\t\\\n-\t\t  && (X##_s == Y##_s || (!X##_e && _FP_FRAC_ZEROP_##wc (X)))); \\\n+\t  _FP_CHECK_FLUSH_ZERO (fs, wc, X);\t\t\t\t\\\n+\t  _FP_CHECK_FLUSH_ZERO (fs, wc, Y);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  (ret) = !(X##_e == Y##_e\t\t\t\t\t\\\n+\t\t    && _FP_FRAC_EQ_##wc (X, Y)\t\t\t\t\\\n+\t\t    && (X##_s == Y##_s\t\t\t\t\t\\\n+\t\t\t|| (!X##_e && _FP_FRAC_ZEROP_##wc (X))));\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n /* Version to test unordered.  */\n \n-#define _FP_CMP_UNORD(fs, wc, ret, X, Y)\t\t\t\t\\\n+#define _FP_CMP_UNORD(fs, wc, ret, X, Y, ex)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      ret = ((X##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (X))\t\\\n-\t     || (Y##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (Y))); \\\n+      (ret) = ((X##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (X))\t\\\n+\t       || (Y##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (Y))); \\\n+      if (ret)\t\t\t\t\t\t\t\t\\\n+\t_FP_CMP_CHECK_NAN (fs, wc, X, Y, (ex));\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/*\n- * Main square root routine.  The input value should be cooked.\n- */\n+/* Main square root routine.  The input value should be cooked.  */\n \n-#define _FP_SQRT(fs, wc, R, X)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_##wc (T);\t\t\t\t\t\\\n-      _FP_FRAC_DECL_##wc (S);\t\t\t\t\t\\\n-      _FP_W_TYPE q;\t\t\t\t\t\t\\\n-      switch (X##_c)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\tcase FP_CLS_NAN:\t\t\t\t\t\\\n-\t  _FP_FRAC_COPY_##wc (R, X);\t\t\t\t\\\n-\t  R##_s = X##_s;\t\t\t\t\t\\\n-\t  R##_c = FP_CLS_NAN;\t\t\t\t\t\\\n-\t  break;\t\t\t\t\t\t\\\n-\tcase FP_CLS_INF:\t\t\t\t\t\\\n-\t  if (X##_s)\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      R##_s = _FP_NANSIGN_##fs;\t\t\t\t\\\n-\t      R##_c = FP_CLS_NAN; /* NAN */\t\t\t\\\n-\t      _FP_FRAC_SET_##wc (R, _FP_NANFRAC_##fs);\t\t\\\n-\t      FP_SET_EXCEPTION (FP_EX_INVALID);\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      R##_s = 0;\t\t\t\t\t\\\n-\t      R##_c = FP_CLS_INF; /* sqrt(+inf) = +inf */\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  break;\t\t\t\t\t\t\\\n-\tcase FP_CLS_ZERO:\t\t\t\t\t\\\n-\t  R##_s = X##_s;\t\t\t\t\t\\\n-\t  R##_c = FP_CLS_ZERO; /* sqrt(+-0) = +-0 */\t\t\\\n-\t  break;\t\t\t\t\t\t\\\n-\tcase FP_CLS_NORMAL:\t\t\t\t\t\\\n-\t  R##_s = 0;\t\t\t\t\t\t\\\n-\t  if (X##_s)\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      R##_c = FP_CLS_NAN; /* NAN */\t\t\t\\\n-\t      R##_s = _FP_NANSIGN_##fs;\t\t\t\t\\\n-\t      _FP_FRAC_SET_##wc (R, _FP_NANFRAC_##fs);\t\t\\\n-\t      FP_SET_EXCEPTION (FP_EX_INVALID);\t\t\t\\\n-\t      break;\t\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  R##_c = FP_CLS_NORMAL;\t\t\t\t\\\n-\t  if (X##_e & 1)\t\t\t\t\t\\\n-\t    _FP_FRAC_SLL_##wc (X, 1);\t\t\t\t\\\n-\t  R##_e = X##_e >> 1;\t\t\t\t\t\\\n-\t  _FP_FRAC_SET_##wc (S, _FP_ZEROFRAC_##wc);\t\t\\\n-\t  _FP_FRAC_SET_##wc (R, _FP_ZEROFRAC_##wc);\t\t\\\n-\t  q = _FP_OVERFLOW_##fs >> 1;\t\t\t\t\\\n-\t  _FP_SQRT_MEAT_##wc (R, S, T, X, q);\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n+#define _FP_SQRT(fs, wc, R, X)\t\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _FP_FRAC_DECL_##wc (_FP_SQRT_T);\t\t\t\t\t\\\n+      _FP_FRAC_DECL_##wc (_FP_SQRT_S);\t\t\t\t\t\\\n+      _FP_W_TYPE _FP_SQRT_q;\t\t\t\t\t\t\\\n+      switch (X##_c)\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\tcase FP_CLS_NAN:\t\t\t\t\t\t\\\n+\t  _FP_FRAC_COPY_##wc (R, X);\t\t\t\t\t\\\n+\t  R##_s = X##_s;\t\t\t\t\t\t\\\n+\t  R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\tcase FP_CLS_INF:\t\t\t\t\t\t\\\n+\t  if (X##_s)\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      R##_s = _FP_NANSIGN_##fs;\t\t\t\t\t\\\n+\t      R##_c = FP_CLS_NAN; /* NAN */\t\t\t\t\\\n+\t      _FP_FRAC_SET_##wc (R, _FP_NANFRAC_##fs);\t\t\t\\\n+\t      FP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_SQRT);\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      R##_s = 0;\t\t\t\t\t\t\\\n+\t      R##_c = FP_CLS_INF; /* sqrt(+inf) = +inf */\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\tcase FP_CLS_ZERO:\t\t\t\t\t\t\\\n+\t  R##_s = X##_s;\t\t\t\t\t\t\\\n+\t  R##_c = FP_CLS_ZERO; /* sqrt(+-0) = +-0 */\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\tcase FP_CLS_NORMAL:\t\t\t\t\t\t\\\n+\t  R##_s = 0;\t\t\t\t\t\t\t\\\n+\t  if (X##_s)\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      R##_c = FP_CLS_NAN; /* NAN */\t\t\t\t\\\n+\t      R##_s = _FP_NANSIGN_##fs;\t\t\t\t\t\\\n+\t      _FP_FRAC_SET_##wc (R, _FP_NANFRAC_##fs);\t\t\t\\\n+\t      FP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_SQRT);\t\\\n+\t      break;\t\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  R##_c = FP_CLS_NORMAL;\t\t\t\t\t\\\n+\t  if (X##_e & 1)\t\t\t\t\t\t\\\n+\t    _FP_FRAC_SLL_##wc (X, 1);\t\t\t\t\t\\\n+\t  R##_e = X##_e >> 1;\t\t\t\t\t\t\\\n+\t  _FP_FRAC_SET_##wc (_FP_SQRT_S, _FP_ZEROFRAC_##wc);\t\t\\\n+\t  _FP_FRAC_SET_##wc (R, _FP_ZEROFRAC_##wc);\t\t\t\\\n+\t  _FP_SQRT_q = _FP_OVERFLOW_##fs >> 1;\t\t\t\t\\\n+\t  _FP_SQRT_MEAT_##wc (R, _FP_SQRT_S, _FP_SQRT_T, X,\t\t\\\n+\t\t\t      _FP_SQRT_q);\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/*\n- * Convert from FP to integer.  Input is raw.\n- */\n+/* Convert from FP to integer.  Input is raw.  */\n \n /* RSIGNED can have following values:\n- * 0:  the number is required to be 0..(2^rsize)-1, if not, NV is set plus\n- *     the result is either 0 or (2^rsize)-1 depending on the sign in such\n- *     case.\n- * 1:  the number is required to be -(2^(rsize-1))..(2^(rsize-1))-1, if not,\n- *     NV is set plus the result is either -(2^(rsize-1)) or (2^(rsize-1))-1\n- *     depending on the sign in such case.\n- * -1: the number is required to be -(2^(rsize-1))..(2^rsize)-1, if not, NV is\n- *     set plus the result is either -(2^(rsize-1)) or (2^(rsize-1))-1\n- *     depending on the sign in such case.\n- */\n+   0:  the number is required to be 0..(2^rsize)-1, if not, NV is set plus\n+       the result is either 0 or (2^rsize)-1 depending on the sign in such\n+       case.\n+   1:  the number is required to be -(2^(rsize-1))..(2^(rsize-1))-1, if not,\n+       NV is set plus the result is either -(2^(rsize-1)) or (2^(rsize-1))-1\n+       depending on the sign in such case.\n+   2:  the number is required to be -(2^(rsize-1))..(2^(rsize-1))-1, if not,\n+       NV is set plus the result is reduced modulo 2^rsize.\n+   -1: the number is required to be -(2^(rsize-1))..(2^rsize)-1, if not, NV is\n+       set plus the result is either -(2^(rsize-1)) or (2^(rsize-1))-1\n+       depending on the sign in such case.  */\n #define _FP_TO_INT(fs, wc, r, X, rsize, rsigned)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (X##_e < _FP_EXPBIAS_##fs)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  r = 0;\t\t\t\t\t\t\t\\\n+\t  (r) = 0;\t\t\t\t\t\t\t\\\n \t  if (X##_e == 0)\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      if (!_FP_FRAC_ZEROP_##wc (X))\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  FP_SET_EXCEPTION (FP_EX_INEXACT);\t\t\t\\\n+\t\t  if (!FP_DENORM_ZERO)\t\t\t\t\t\\\n+\t\t    FP_SET_EXCEPTION (FP_EX_INEXACT);\t\t\t\\\n \t\t  FP_SET_EXCEPTION (FP_EX_DENORM);\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    FP_SET_EXCEPTION (FP_EX_INEXACT);\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      else if (X##_e >= _FP_EXPBIAS_##fs + rsize - (rsigned > 0 || X##_s) \\\n-\t       || (!rsigned && X##_s))\t\t\t\t\t\\\n+      else if ((rsigned) == 2\t\t\t\t\t\t\\\n+\t       && (X##_e\t\t\t\t\t\t\\\n+\t\t   >= ((_FP_EXPMAX_##fs\t\t\t\t\t\\\n+\t\t\t< _FP_EXPBIAS_##fs + _FP_FRACBITS_##fs + (rsize) - 1) \\\n+\t\t       ? _FP_EXPMAX_##fs\t\t\t\t\\\n+\t\t       : _FP_EXPBIAS_##fs + _FP_FRACBITS_##fs + (rsize) - 1))) \\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  /* Overflow resulting in 0.  */\t\t\t\t\\\n+\t  (r) = 0;\t\t\t\t\t\t\t\\\n+\t  FP_SET_EXCEPTION (FP_EX_INVALID\t\t\t\t\\\n+\t\t\t    | FP_EX_INVALID_CVI\t\t\t\t\\\n+\t\t\t    | ((FP_EX_INVALID_SNAN\t\t\t\\\n+\t\t\t\t&& _FP_ISSIGNAN (fs, wc, X))\t\t\\\n+\t\t\t       ? FP_EX_INVALID_SNAN\t\t\t\\\n+\t\t\t       : 0));\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if ((rsigned) != 2\t\t\t\t\t\t\\\n+\t       && (X##_e >= (_FP_EXPMAX_##fs < _FP_EXPBIAS_##fs + (rsize) \\\n+\t\t\t     ? _FP_EXPMAX_##fs\t\t\t\t\\\n+\t\t\t     : (_FP_EXPBIAS_##fs + (rsize)\t\t\\\n+\t\t\t\t- ((rsigned) > 0 || X##_s)))\t\t\\\n+\t\t   || (!(rsigned) && X##_s)))\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  /* Overflow or converting to the most negative integer.  */\t\\\n \t  if (rsigned)\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      r = 1;\t\t\t\t\t\t\t\\\n-\t      r <<= rsize - 1;\t\t\t\t\t\t\\\n-\t      r -= 1 - X##_s;\t\t\t\t\t\t\\\n-\t    } else {\t\t\t\t\t\t\t\\\n-\t    r = 0;\t\t\t\t\t\t\t\\\n-\t    if (!X##_s)\t\t\t\t\t\t\t\\\n-\t      r = ~r;\t\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n+\t      (r) = 1;\t\t\t\t\t\t\t\\\n+\t      (r) <<= (rsize) - 1;\t\t\t\t\t\\\n+\t      (r) -= 1 - X##_s;\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      (r) = 0;\t\t\t\t\t\t\t\\\n+\t      if (!X##_s)\t\t\t\t\t\t\\\n+\t\t(r) = ~(r);\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  if (rsigned && X##_s && X##_e == _FP_EXPBIAS_##fs + rsize - 1) \\\n+\t  if (_FP_EXPBIAS_##fs + (rsize) - 1 < _FP_EXPMAX_##fs\t\t\\\n+\t      && (rsigned)\t\t\t\t\t\t\\\n+\t      && X##_s\t\t\t\t\t\t\t\\\n+\t      && X##_e == _FP_EXPBIAS_##fs + (rsize) - 1)\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      /* Possibly converting to most negative integer; check the \\\n \t\t mantissa.  */\t\t\t\t\t\t\\\n-\t      int inexact = 0;\t\t\t\t\t\t\\\n-\t      (void) ((_FP_FRACBITS_##fs > rsize)\t\t\t\\\n+\t      int _FP_TO_INT_inexact = 0;\t\t\t\t\\\n+\t      (void) ((_FP_FRACBITS_##fs > (rsize))\t\t\t\\\n \t\t      ? ({\t\t\t\t\t\t\\\n-\t\t\t  _FP_FRAC_SRST_##wc (X, inexact,\t\t\\\n-\t\t\t\t\t      _FP_FRACBITS_##fs - rsize, \\\n+\t\t\t  _FP_FRAC_SRST_##wc (X, _FP_TO_INT_inexact,\t\\\n+\t\t\t\t\t      _FP_FRACBITS_##fs - (rsize), \\\n \t\t\t\t\t      _FP_FRACBITS_##fs);\t\\\n \t\t\t  0;\t\t\t\t\t\t\\\n \t\t\t})\t\t\t\t\t\t\\\n \t\t      : 0);\t\t\t\t\t\t\\\n \t      if (!_FP_FRAC_ZEROP_##wc (X))\t\t\t\t\\\n-\t\tFP_SET_EXCEPTION (FP_EX_INVALID);\t\t\t\\\n-\t      else if (inexact)\t\t\t\t\t\t\\\n+\t\tFP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_CVI);\t\\\n+\t      else if (_FP_TO_INT_inexact)\t\t\t\t\\\n \t\tFP_SET_EXCEPTION (FP_EX_INEXACT);\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n-\t    FP_SET_EXCEPTION (FP_EX_INVALID);\t\t\t\t\\\n+\t    FP_SET_EXCEPTION (FP_EX_INVALID\t\t\t\t\\\n+\t\t\t      | FP_EX_INVALID_CVI\t\t\t\\\n+\t\t\t      | ((FP_EX_INVALID_SNAN\t\t\t\\\n+\t\t\t\t  && _FP_ISSIGNAN (fs, wc, X))\t\t\\\n+\t\t\t\t ? FP_EX_INVALID_SNAN\t\t\t\\\n+\t\t\t\t : 0));\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n+\t  int _FP_TO_INT_inexact = 0;\t\t\t\t\t\\\n \t  _FP_FRAC_HIGH_RAW_##fs (X) |= _FP_IMPLBIT_##fs;\t\t\\\n \t  if (X##_e >= _FP_EXPBIAS_##fs + _FP_FRACBITS_##fs - 1)\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      _FP_FRAC_ASSEMBLE_##wc (r, X, rsize);\t\t\t\\\n-\t      r <<= X##_e - _FP_EXPBIAS_##fs - _FP_FRACBITS_##fs + 1;\t\\\n+\t      _FP_FRAC_ASSEMBLE_##wc ((r), X, (rsize));\t\t\t\\\n+\t      (r) <<= X##_e - _FP_EXPBIAS_##fs - _FP_FRACBITS_##fs + 1; \\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      int inexact;\t\t\t\t\t\t\\\n-\t      _FP_FRAC_SRST_##wc (X, inexact,\t\t\t\t\\\n+\t      _FP_FRAC_SRST_##wc (X, _FP_TO_INT_inexact,\t\t\\\n \t\t\t\t  (_FP_FRACBITS_##fs + _FP_EXPBIAS_##fs - 1 \\\n \t\t\t\t   - X##_e),\t\t\t\t\\\n \t\t\t\t  _FP_FRACBITS_##fs);\t\t\t\\\n-\t      if (inexact)\t\t\t\t\t\t\\\n-\t\tFP_SET_EXCEPTION (FP_EX_INEXACT);\t\t\t\\\n-\t      _FP_FRAC_ASSEMBLE_##wc (r, X, rsize);\t\t\t\\\n+\t      _FP_FRAC_ASSEMBLE_##wc ((r), X, (rsize));\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n-\t  if (rsigned && X##_s)\t\t\t\t\t\t\\\n-\t    r = -r;\t\t\t\t\t\t\t\\\n+\t  if ((rsigned) && X##_s)\t\t\t\t\t\\\n+\t    (r) = -(r);\t\t\t\t\t\t\t\\\n+\t  if ((rsigned) == 2 && X##_e >= _FP_EXPBIAS_##fs + (rsize) - 1) \\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      /* Overflow or converting to the most negative integer.  */ \\\n+\t      if (X##_e > _FP_EXPBIAS_##fs + (rsize) - 1\t\t\\\n+\t\t  || !X##_s\t\t\t\t\t\t\\\n+\t\t  || (r) != (((typeof (r)) 1) << ((rsize) - 1)))\t\\\n+\t\t{\t\t\t\t\t\t\t\\\n+\t\t  _FP_TO_INT_inexact = 0;\t\t\t\t\\\n+\t\t  FP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_CVI);\t\\\n+\t\t}\t\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  if (_FP_TO_INT_inexact)\t\t\t\t\t\\\n+\t    FP_SET_EXCEPTION (FP_EX_INEXACT);\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n@@ -1409,30 +1532,33 @@\n     {\t\t\t\t\t\t\t\t\t\\\n       if (r)\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  rtype ur_;\t\t\t\t\t\t\t\\\n+\t  rtype _FP_FROM_INT_ur;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  if ((X##_s = (r < 0)))\t\t\t\t\t\\\n-\t    r = -(rtype) r;\t\t\t\t\t\t\\\n+\t  if ((X##_s = ((r) < 0)))\t\t\t\t\t\\\n+\t    (r) = -(rtype) (r);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  ur_ = (rtype) r;\t\t\t\t\t\t\\\n-\t  (void) ((rsize <= _FP_W_TYPE_SIZE)\t\t\t\t\\\n+\t  _FP_FROM_INT_ur = (rtype) (r);\t\t\t\t\\\n+\t  (void) (((rsize) <= _FP_W_TYPE_SIZE)\t\t\t\t\\\n \t\t  ? ({\t\t\t\t\t\t\t\\\n-\t\t      int lz_;\t\t\t\t\t\t\\\n-\t\t      __FP_CLZ (lz_, (_FP_W_TYPE) ur_);\t\t\t\\\n-\t\t      X##_e = _FP_EXPBIAS_##fs + _FP_W_TYPE_SIZE - 1 - lz_; \\\n+\t\t      int _FP_FROM_INT_lz;\t\t\t\t\\\n+\t\t      __FP_CLZ (_FP_FROM_INT_lz,\t\t\t\\\n+\t\t\t\t(_FP_W_TYPE) _FP_FROM_INT_ur);\t\t\\\n+\t\t      X##_e = (_FP_EXPBIAS_##fs + _FP_W_TYPE_SIZE - 1\t\\\n+\t\t\t       - _FP_FROM_INT_lz);\t\t\t\\\n \t\t    })\t\t\t\t\t\t\t\\\n-\t\t  : ((rsize <= 2 * _FP_W_TYPE_SIZE)\t\t\t\\\n+\t\t  : (((rsize) <= 2 * _FP_W_TYPE_SIZE)\t\t\t\\\n \t\t     ? ({\t\t\t\t\t\t\\\n-\t\t\t int lz_;\t\t\t\t\t\\\n-\t\t\t __FP_CLZ_2 (lz_,\t\t\t\t\\\n-\t\t\t\t     (_FP_W_TYPE) (ur_ >> _FP_W_TYPE_SIZE), \\\n-\t\t\t\t     (_FP_W_TYPE) ur_);\t\t\t\\\n+\t\t\t int _FP_FROM_INT_lz;\t\t\t\t\\\n+\t\t\t __FP_CLZ_2 (_FP_FROM_INT_lz,\t\t\t\\\n+\t\t\t\t     (_FP_W_TYPE) (_FP_FROM_INT_ur\t\\\n+\t\t\t\t\t\t   >> _FP_W_TYPE_SIZE), \\\n+\t\t\t\t     (_FP_W_TYPE) _FP_FROM_INT_ur);\t\\\n \t\t\t X##_e = (_FP_EXPBIAS_##fs + 2 * _FP_W_TYPE_SIZE - 1 \\\n-\t\t\t\t  - lz_);\t\t\t\t\\\n+\t\t\t\t  - _FP_FROM_INT_lz);\t\t\t\\\n \t\t       })\t\t\t\t\t\t\\\n \t\t     : (abort (), 0)));\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  if (rsize - 1 + _FP_EXPBIAS_##fs >= _FP_EXPMAX_##fs\t\t\\\n+\t  if ((rsize) - 1 + _FP_EXPBIAS_##fs >= _FP_EXPMAX_##fs\t\t\\\n \t      && X##_e >= _FP_EXPMAX_##fs)\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      /* Exponent too big; overflow to infinity.  (May also\t\\\n@@ -1441,11 +1567,11 @@\n \t      goto pack_semiraw;\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  if (rsize <= _FP_FRACBITS_##fs\t\t\t\t\\\n+\t  if ((rsize) <= _FP_FRACBITS_##fs\t\t\t\t\\\n \t      || X##_e < _FP_EXPBIAS_##fs + _FP_FRACBITS_##fs)\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      /* Exactly representable; shift left.  */\t\t\t\\\n-\t      _FP_FRAC_DISASSEMBLE_##wc (X, ur_, rsize);\t\t\\\n+\t      _FP_FRAC_DISASSEMBLE_##wc (X, _FP_FROM_INT_ur, (rsize));\t\\\n \t      if (_FP_EXPBIAS_##fs + _FP_FRACBITS_##fs - 1 - X##_e > 0)\t\\\n \t\t_FP_FRAC_SLL_##wc (X, (_FP_EXPBIAS_##fs\t\t\t\\\n \t\t\t\t       + _FP_FRACBITS_##fs - 1 - X##_e)); \\\n@@ -1455,12 +1581,14 @@\n \t      /* More bits in integer than in floating type; need to\t\\\n \t\t round.  */\t\t\t\t\t\t\\\n \t      if (_FP_EXPBIAS_##fs + _FP_WFRACBITS_##fs - 1 < X##_e)\t\\\n-\t\tur_ = ((ur_ >> (X##_e - _FP_EXPBIAS_##fs\t\t\\\n-\t\t\t\t- _FP_WFRACBITS_##fs + 1))\t\t\\\n-\t\t       | ((ur_ << (rsize - (X##_e - _FP_EXPBIAS_##fs\t\\\n-\t\t\t\t\t    - _FP_WFRACBITS_##fs + 1)))\t\\\n-\t\t\t  != 0));\t\t\t\t\t\\\n-\t      _FP_FRAC_DISASSEMBLE_##wc (X, ur_, rsize);\t\t\\\n+\t\t_FP_FROM_INT_ur\t\t\t\t\t\t\\\n+\t\t  = ((_FP_FROM_INT_ur >> (X##_e - _FP_EXPBIAS_##fs\t\\\n+\t\t\t\t\t  - _FP_WFRACBITS_##fs + 1))\t\\\n+\t\t     | ((_FP_FROM_INT_ur\t\t\t\t\\\n+\t\t\t << ((rsize) - (X##_e - _FP_EXPBIAS_##fs\t\\\n+\t\t\t\t\t- _FP_WFRACBITS_##fs + 1)))\t\\\n+\t\t\t!= 0));\t\t\t\t\t\t\\\n+\t      _FP_FRAC_DISASSEMBLE_##wc (X, _FP_FROM_INT_ur, (rsize));\t\\\n \t      if ((_FP_EXPBIAS_##fs + _FP_WFRACBITS_##fs - 1 - X##_e) > 0) \\\n \t\t_FP_FRAC_SLL_##wc (X, (_FP_EXPBIAS_##fs\t\t\t\\\n \t\t\t\t       + _FP_WFRACBITS_##fs - 1 - X##_e)); \\\n@@ -1501,6 +1629,7 @@\n \t{\t\t\t\t\t\t\t\t\\\n \t  if (S##_e == 0)\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n+\t      _FP_CHECK_FLUSH_ZERO (sfs, swc, S);\t\t\t\\\n \t      if (_FP_FRAC_ZEROP_##swc (S))\t\t\t\t\\\n \t\tD##_e = 0;\t\t\t\t\t\t\\\n \t      else if (_FP_EXPBIAS_##dfs\t\t\t\t\\\n@@ -1510,17 +1639,19 @@\n \t\t  _FP_FRAC_SLL_##dwc (D, (_FP_FRACBITS_##dfs\t\t\\\n \t\t\t\t\t  - _FP_FRACBITS_##sfs));\t\\\n \t\t  D##_e = 0;\t\t\t\t\t\t\\\n+\t\t  if (FP_TRAPPING_EXCEPTIONS & FP_EX_UNDERFLOW)\t\t\\\n+\t\t    FP_SET_EXCEPTION (FP_EX_UNDERFLOW);\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n \t      else\t\t\t\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  int _lz;\t\t\t\t\t\t\\\n+\t\t  int FP_EXTEND_lz;\t\t\t\t\t\\\n \t\t  FP_SET_EXCEPTION (FP_EX_DENORM);\t\t\t\\\n-\t\t  _FP_FRAC_CLZ_##swc (_lz, S);\t\t\t\t\\\n+\t\t  _FP_FRAC_CLZ_##swc (FP_EXTEND_lz, S);\t\t\t\\\n \t\t  _FP_FRAC_SLL_##dwc (D,\t\t\t\t\\\n-\t\t\t\t      _lz + _FP_FRACBITS_##dfs\t\t\\\n+\t\t\t\t      FP_EXTEND_lz + _FP_FRACBITS_##dfs\t\\\n \t\t\t\t      - _FP_FRACTBITS_##sfs);\t\t\\\n \t\t  D##_e = (_FP_EXPBIAS_##dfs - _FP_EXPBIAS_##sfs + 1\t\\\n-\t\t\t   + _FP_FRACXBITS_##sfs - _lz);\t\t\\\n+\t\t\t   + _FP_FRACXBITS_##sfs - FP_EXTEND_lz);\t\\\n \t\t}\t\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n@@ -1529,7 +1660,8 @@\n \t      if (!_FP_FRAC_ZEROP_##swc (S))\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n \t\t  if (_FP_FRAC_SNANP (sfs, S))\t\t\t\t\\\n-\t\t    FP_SET_EXCEPTION (FP_EX_INVALID);\t\t\t\\\n+\t\t    FP_SET_EXCEPTION (FP_EX_INVALID\t\t\t\\\n+\t\t\t\t      | FP_EX_INVALID_SNAN);\t\t\\\n \t\t  _FP_FRAC_SLL_##dwc (D, (_FP_FRACBITS_##dfs\t\t\\\n \t\t\t\t\t  - _FP_FRACBITS_##sfs));\t\\\n \t\t  _FP_SETQNAN (dfs, dwc, D);\t\t\t\t\\\n@@ -1584,6 +1716,7 @@\n \t{\t\t\t\t\t\t\t\t\\\n \t  if (S##_e == 0)\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n+\t      _FP_CHECK_FLUSH_ZERO (sfs, swc, S);\t\t\t\\\n \t      D##_e = 0;\t\t\t\t\t\t\\\n \t      if (_FP_FRAC_ZEROP_##swc (S))\t\t\t\t\\\n \t\t_FP_FRAC_SET_##dwc (D, _FP_ZEROFRAC_##dwc);\t\t\\\n@@ -1626,9 +1759,7 @@\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/*\n- * Helper primitives.\n- */\n+/* Helper primitives.  */\n \n /* Count leading zeros in a word.  */\n \n@@ -1638,11 +1769,11 @@\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (sizeof (_FP_W_TYPE) == sizeof (unsigned int))\t\t\t\\\n-\tr = __builtin_clz (x);\t\t\t\t\t\t\\\n+\t(r) = __builtin_clz (x);\t\t\t\t\t\\\n       else if (sizeof (_FP_W_TYPE) == sizeof (unsigned long))\t\t\\\n-\tr = __builtin_clzl (x);\t\t\t\t\t\t\\\n+\t(r) = __builtin_clzl (x);\t\t\t\t\t\\\n       else if (sizeof (_FP_W_TYPE) == sizeof (unsigned long long))\t\\\n-\tr = __builtin_clzll (x);\t\t\t\t\t\\\n+\t(r) = __builtin_clzll (x);\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tabort ();\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -1652,7 +1783,7 @@\n #define _FP_DIV_HELP_imm(q, r, n, d)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      q = n / d, r = n % d;\t\t\t\\\n+      (q) = (n) / (d), (r) = (n) % (d);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -1662,42 +1793,51 @@\n #define _FP_DIV_MEAT_N_loop(fs, wc, R, X, Y)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      int count = _FP_WFRACBITS_##fs;\t\t\t\t\t\\\n-      _FP_FRAC_DECL_##wc (u);\t\t\t\t\t\t\\\n-      _FP_FRAC_DECL_##wc (v);\t\t\t\t\t\t\\\n-      _FP_FRAC_COPY_##wc (u, X);\t\t\t\t\t\\\n-      _FP_FRAC_COPY_##wc (v, Y);\t\t\t\t\t\\\n+      int _FP_DIV_MEAT_N_loop_count = _FP_WFRACBITS_##fs;\t\t\\\n+      _FP_FRAC_DECL_##wc (_FP_DIV_MEAT_N_loop_u);\t\t\t\\\n+      _FP_FRAC_DECL_##wc (_FP_DIV_MEAT_N_loop_v);\t\t\t\\\n+      _FP_FRAC_COPY_##wc (_FP_DIV_MEAT_N_loop_u, X);\t\t\t\\\n+      _FP_FRAC_COPY_##wc (_FP_DIV_MEAT_N_loop_v, Y);\t\t\t\\\n       _FP_FRAC_SET_##wc (R, _FP_ZEROFRAC_##wc);\t\t\t\t\\\n-      /* Normalize U and V.  */\t\t\t\t\t\t\\\n-      _FP_FRAC_SLL_##wc (u, _FP_WFRACXBITS_##fs);\t\t\t\\\n-      _FP_FRAC_SLL_##wc (v, _FP_WFRACXBITS_##fs);\t\t\t\\\n+      /* Normalize _FP_DIV_MEAT_N_LOOP_U and _FP_DIV_MEAT_N_LOOP_V.  */\t\\\n+      _FP_FRAC_SLL_##wc (_FP_DIV_MEAT_N_loop_u, _FP_WFRACXBITS_##fs);\t\\\n+      _FP_FRAC_SLL_##wc (_FP_DIV_MEAT_N_loop_v, _FP_WFRACXBITS_##fs);\t\\\n       /* First round.  Since the operands are normalized, either the\t\\\n \t first or second bit will be set in the fraction.  Produce a\t\\\n \t normalized result by checking which and adjusting the loop\t\\\n \t count and exponent accordingly.  */\t\t\t\t\\\n-      if (_FP_FRAC_GE_1 (u, v))\t\t\t\t\t\t\\\n+      if (_FP_FRAC_GE_1 (_FP_DIV_MEAT_N_loop_u, _FP_DIV_MEAT_N_loop_v))\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  _FP_FRAC_SUB_##wc (u, u, v);\t\t\t\t\t\\\n+\t  _FP_FRAC_SUB_##wc (_FP_DIV_MEAT_N_loop_u,\t\t\t\\\n+\t\t\t     _FP_DIV_MEAT_N_loop_u,\t\t\t\\\n+\t\t\t     _FP_DIV_MEAT_N_loop_v);\t\t\t\\\n \t  _FP_FRAC_LOW_##wc (R) |= 1;\t\t\t\t\t\\\n-\t  count--;\t\t\t\t\t\t\t\\\n+\t  _FP_DIV_MEAT_N_loop_count--;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tR##_e--;\t\t\t\t\t\t\t\\\n       /* Subsequent rounds.  */\t\t\t\t\t\t\\\n       do\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  int msb = (_FP_WS_TYPE) _FP_FRAC_HIGH_##wc (u) < 0;\t\t\\\n-\t  _FP_FRAC_SLL_##wc (u, 1);\t\t\t\t\t\\\n+\t  int _FP_DIV_MEAT_N_loop_msb\t\t\t\t\t\\\n+\t    = (_FP_WS_TYPE) _FP_FRAC_HIGH_##wc (_FP_DIV_MEAT_N_loop_u) < 0; \\\n+\t  _FP_FRAC_SLL_##wc (_FP_DIV_MEAT_N_loop_u, 1);\t\t\t\\\n \t  _FP_FRAC_SLL_##wc (R, 1);\t\t\t\t\t\\\n-\t  if (msb || _FP_FRAC_GE_1 (u, v))\t\t\t\t\\\n+\t  if (_FP_DIV_MEAT_N_loop_msb\t\t\t\t\t\\\n+\t      || _FP_FRAC_GE_1 (_FP_DIV_MEAT_N_loop_u,\t\t\t\\\n+\t\t\t\t_FP_DIV_MEAT_N_loop_v))\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      _FP_FRAC_SUB_##wc (u, u, v);\t\t\t\t\\\n+\t      _FP_FRAC_SUB_##wc (_FP_DIV_MEAT_N_loop_u,\t\t\t\\\n+\t\t\t\t _FP_DIV_MEAT_N_loop_u,\t\t\t\\\n+\t\t\t\t _FP_DIV_MEAT_N_loop_v);\t\t\\\n \t      _FP_FRAC_LOW_##wc (R) |= 1;\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      while (--count > 0);\t\t\t\t\t\t\\\n-      /* If there's anything left in U, the result is inexact.  */\t\\\n-      _FP_FRAC_LOW_##wc (R) |= !_FP_FRAC_ZEROP_##wc (u);\t\t\\\n+      while (--_FP_DIV_MEAT_N_loop_count > 0);\t\t\t\t\\\n+      /* If there's anything left in _FP_DIV_MEAT_N_LOOP_U, the result\t\\\n+\t is inexact.  */\t\t\t\t\t\t\\\n+      _FP_FRAC_LOW_##wc (R)\t\t\t\t\t\t\\\n+\t|= !_FP_FRAC_ZEROP_##wc (_FP_DIV_MEAT_N_loop_u);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "b8cd3108a34d05f2da783dad553c3eee26a0ac65", "filename": "libgcc/soft-fp/quad.h", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fquad.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fquad.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fquad.h?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -95,45 +95,45 @@ union _FP_UNION_Q\n \n \n # define FP_DECL_Q(X)\t\t_FP_DECL (4, X)\n-# define FP_UNPACK_RAW_Q(X, val)\t_FP_UNPACK_RAW_4 (Q, X, val)\n-# define FP_UNPACK_RAW_QP(X, val)\t_FP_UNPACK_RAW_4_P (Q, X, val)\n-# define FP_PACK_RAW_Q(val, X)\t_FP_PACK_RAW_4 (Q, val, X)\n+# define FP_UNPACK_RAW_Q(X, val)\t_FP_UNPACK_RAW_4 (Q, X, (val))\n+# define FP_UNPACK_RAW_QP(X, val)\t_FP_UNPACK_RAW_4_P (Q, X, (val))\n+# define FP_PACK_RAW_Q(val, X)\t_FP_PACK_RAW_4 (Q, (val), X)\n # define FP_PACK_RAW_QP(val, X)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_4_P (Q, val, X);\t\t\\\n+\t_FP_PACK_RAW_4_P (Q, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_Q(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_4 (Q, X, val);\t\t\\\n+      _FP_UNPACK_RAW_4 (Q, X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (Q, 4, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_QP(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_4_P (Q, X, val);\t\t\\\n+      _FP_UNPACK_RAW_4_P (Q, X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (Q, 4, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_Q(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_4 (Q, X, val);\t\t\\\n+      _FP_UNPACK_RAW_4 (Q, X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (Q, 4, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_QP(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_4_P (Q, X, val);\t\t\\\n+      _FP_UNPACK_RAW_4_P (Q, X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (Q, 4, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n@@ -142,7 +142,7 @@ union _FP_UNION_Q\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (Q, 4, X);\t\t\\\n-      _FP_PACK_RAW_4 (Q, val, X);\t\t\\\n+      _FP_PACK_RAW_4 (Q, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -151,15 +151,15 @@ union _FP_UNION_Q\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (Q, 4, X);\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_4_P (Q, val, X);\t\t\\\n+\t_FP_PACK_RAW_4_P (Q, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_SEMIRAW_Q(val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (Q, 4, X);\t\t\\\n-      _FP_PACK_RAW_4 (Q, val, X);\t\t\\\n+      _FP_PACK_RAW_4 (Q, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -168,7 +168,7 @@ union _FP_UNION_Q\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (Q, 4, X);\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_4_P (Q, val, X);\t\t\\\n+\t_FP_PACK_RAW_4_P (Q, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -179,15 +179,15 @@ union _FP_UNION_Q\n # define FP_MUL_Q(R, X, Y)\t\t_FP_MUL (Q, 4, R, X, Y)\n # define FP_DIV_Q(R, X, Y)\t\t_FP_DIV (Q, 4, R, X, Y)\n # define FP_SQRT_Q(R, X)\t\t_FP_SQRT (Q, 4, R, X)\n-# define _FP_SQRT_MEAT_Q(R, S, T, X, Q)\t_FP_SQRT_MEAT_4 (R, S, T, X, Q)\n+# define _FP_SQRT_MEAT_Q(R, S, T, X, Q)\t_FP_SQRT_MEAT_4 (R, S, T, X, (Q))\n # define FP_FMA_Q(R, X, Y, Z)\t\t_FP_FMA (Q, 4, 8, R, X, Y, Z)\n \n-# define FP_CMP_Q(r, X, Y, un)\t\t_FP_CMP (Q, 4, r, X, Y, un)\n-# define FP_CMP_EQ_Q(r, X, Y)\t\t_FP_CMP_EQ (Q, 4, r, X, Y)\n-# define FP_CMP_UNORD_Q(r, X, Y)\t_FP_CMP_UNORD (Q, 4, r, X, Y)\n+# define FP_CMP_Q(r, X, Y, un, ex)\t_FP_CMP (Q, 4, (r), X, Y, (un), (ex))\n+# define FP_CMP_EQ_Q(r, X, Y, ex)\t_FP_CMP_EQ (Q, 4, (r), X, Y, (ex))\n+# define FP_CMP_UNORD_Q(r, X, Y, ex)\t_FP_CMP_UNORD (Q, 4, (r), X, Y, (ex))\n \n-# define FP_TO_INT_Q(r, X, rsz, rsg)\t_FP_TO_INT (Q, 4, r, X, rsz, rsg)\n-# define FP_FROM_INT_Q(X, r, rs, rt)\t_FP_FROM_INT (Q, 4, X, r, rs, rt)\n+# define FP_TO_INT_Q(r, X, rsz, rsg)\t_FP_TO_INT (Q, 4, (r), X, (rsz), (rsg))\n+# define FP_FROM_INT_Q(X, r, rs, rt)\t_FP_FROM_INT (Q, 4, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_Q(X)\t_FP_FRAC_HIGH_4 (X)\n # define _FP_FRAC_HIGH_RAW_Q(X)\t_FP_FRAC_HIGH_4 (X)\n@@ -219,45 +219,45 @@ union _FP_UNION_Q\n };\n \n # define FP_DECL_Q(X)\t\t_FP_DECL (2, X)\n-# define FP_UNPACK_RAW_Q(X, val)\t_FP_UNPACK_RAW_2 (Q, X, val)\n-# define FP_UNPACK_RAW_QP(X, val)\t_FP_UNPACK_RAW_2_P (Q, X, val)\n-# define FP_PACK_RAW_Q(val, X)\t_FP_PACK_RAW_2 (Q, val, X)\n+# define FP_UNPACK_RAW_Q(X, val)\t_FP_UNPACK_RAW_2 (Q, X, (val))\n+# define FP_UNPACK_RAW_QP(X, val)\t_FP_UNPACK_RAW_2_P (Q, X, (val))\n+# define FP_PACK_RAW_Q(val, X)\t_FP_PACK_RAW_2 (Q, (val), X)\n # define FP_PACK_RAW_QP(val, X)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_2_P (Q, val, X);\t\t\\\n+\t_FP_PACK_RAW_2_P (Q, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_Q(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_2 (Q, X, val);\t\t\\\n+      _FP_UNPACK_RAW_2 (Q, X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (Q, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_QP(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_2_P (Q, X, val);\t\t\\\n+      _FP_UNPACK_RAW_2_P (Q, X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (Q, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_Q(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_2 (Q, X, val);\t\t\\\n+      _FP_UNPACK_RAW_2 (Q, X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (Q, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_UNPACK_SEMIRAW_QP(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_2_P (Q, X, val);\t\t\\\n+      _FP_UNPACK_RAW_2_P (Q, X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (Q, 2, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n@@ -266,7 +266,7 @@ union _FP_UNION_Q\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (Q, 2, X);\t\t\\\n-      _FP_PACK_RAW_2 (Q, val, X);\t\t\\\n+      _FP_PACK_RAW_2 (Q, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -275,15 +275,15 @@ union _FP_UNION_Q\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (Q, 2, X);\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_2_P (Q, val, X);\t\t\\\n+\t_FP_PACK_RAW_2_P (Q, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n # define FP_PACK_SEMIRAW_Q(val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (Q, 2, X);\t\t\\\n-      _FP_PACK_RAW_2 (Q, val, X);\t\t\\\n+      _FP_PACK_RAW_2 (Q, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -292,7 +292,7 @@ union _FP_UNION_Q\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (Q, 2, X);\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_2_P (Q, val, X);\t\t\\\n+\t_FP_PACK_RAW_2_P (Q, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -303,15 +303,15 @@ union _FP_UNION_Q\n # define FP_MUL_Q(R, X, Y)\t\t_FP_MUL (Q, 2, R, X, Y)\n # define FP_DIV_Q(R, X, Y)\t\t_FP_DIV (Q, 2, R, X, Y)\n # define FP_SQRT_Q(R, X)\t\t_FP_SQRT (Q, 2, R, X)\n-# define _FP_SQRT_MEAT_Q(R, S, T, X, Q)\t_FP_SQRT_MEAT_2 (R, S, T, X, Q)\n+# define _FP_SQRT_MEAT_Q(R, S, T, X, Q)\t_FP_SQRT_MEAT_2 (R, S, T, X, (Q))\n # define FP_FMA_Q(R, X, Y, Z)\t\t_FP_FMA (Q, 2, 4, R, X, Y, Z)\n \n-# define FP_CMP_Q(r, X, Y, un)\t\t_FP_CMP (Q, 2, r, X, Y, un)\n-# define FP_CMP_EQ_Q(r, X, Y)\t\t_FP_CMP_EQ (Q, 2, r, X, Y)\n-# define FP_CMP_UNORD_Q(r, X, Y)\t_FP_CMP_UNORD (Q, 2, r, X, Y)\n+# define FP_CMP_Q(r, X, Y, un, ex)\t_FP_CMP (Q, 2, (r), X, Y, (un), (ex))\n+# define FP_CMP_EQ_Q(r, X, Y, ex)\t_FP_CMP_EQ (Q, 2, (r), X, Y, (ex))\n+# define FP_CMP_UNORD_Q(r, X, Y, ex)\t_FP_CMP_UNORD (Q, 2, (r), X, Y, (ex))\n \n-# define FP_TO_INT_Q(r, X, rsz, rsg)\t_FP_TO_INT (Q, 2, r, X, rsz, rsg)\n-# define FP_FROM_INT_Q(X, r, rs, rt)\t_FP_FROM_INT (Q, 2, X, r, rs, rt)\n+# define FP_TO_INT_Q(r, X, rsz, rsg)\t_FP_TO_INT (Q, 2, (r), X, (rsz), (rsg))\n+# define FP_FROM_INT_Q(X, r, rs, rt)\t_FP_FROM_INT (Q, 2, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_Q(X)\t_FP_FRAC_HIGH_2 (X)\n # define _FP_FRAC_HIGH_RAW_Q(X)\t_FP_FRAC_HIGH_2 (X)"}, {"sha": "086a558b9eb7917a7fc6ca9ab87f018b605faaa3", "filename": "libgcc/soft-fp/single.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fsingle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fsingle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fsingle.h?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -83,45 +83,45 @@ union _FP_UNION_S\n };\n \n #define FP_DECL_S(X)\t\t_FP_DECL (1, X)\n-#define FP_UNPACK_RAW_S(X, val)\t_FP_UNPACK_RAW_1 (S, X, val)\n-#define FP_UNPACK_RAW_SP(X, val)\t_FP_UNPACK_RAW_1_P (S, X, val)\n-#define FP_PACK_RAW_S(val, X)\t_FP_PACK_RAW_1 (S, val, X)\n+#define FP_UNPACK_RAW_S(X, val)\t_FP_UNPACK_RAW_1 (S, X, (val))\n+#define FP_UNPACK_RAW_SP(X, val)\t_FP_UNPACK_RAW_1_P (S, X, (val))\n+#define FP_PACK_RAW_S(val, X)\t_FP_PACK_RAW_1 (S, (val), X)\n #define FP_PACK_RAW_SP(val, X)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_1_P (S, val, X);\t\t\\\n+\t_FP_PACK_RAW_1_P (S, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n #define FP_UNPACK_S(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_1 (S, X, val);\t\t\\\n+      _FP_UNPACK_RAW_1 (S, X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (S, 1, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n #define FP_UNPACK_SP(X, val)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_1_P (S, X, val);\t\t\\\n+      _FP_UNPACK_RAW_1_P (S, X, (val));\t\t\\\n       _FP_UNPACK_CANONICAL (S, 1, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n #define FP_UNPACK_SEMIRAW_S(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_1 (S, X, val);\t\t\\\n+      _FP_UNPACK_RAW_1 (S, X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (S, 1, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n #define FP_UNPACK_SEMIRAW_SP(X, val)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      _FP_UNPACK_RAW_1_P (S, X, val);\t\t\\\n+      _FP_UNPACK_RAW_1_P (S, X, (val));\t\t\\\n       _FP_UNPACK_SEMIRAW (S, 1, X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n@@ -130,7 +130,7 @@ union _FP_UNION_S\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (S, 1, X);\t\t\\\n-      _FP_PACK_RAW_1 (S, val, X);\t\t\\\n+      _FP_PACK_RAW_1 (S, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -139,15 +139,15 @@ union _FP_UNION_S\n     {\t\t\t\t\t\t\\\n       _FP_PACK_CANONICAL (S, 1, X);\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_1_P (S, val, X);\t\t\\\n+\t_FP_PACK_RAW_1_P (S, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n #define FP_PACK_SEMIRAW_S(val, X)\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (S, 1, X);\t\t\\\n-      _FP_PACK_RAW_1 (S, val, X);\t\t\\\n+      _FP_PACK_RAW_1 (S, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -156,7 +156,7 @@ union _FP_UNION_S\n     {\t\t\t\t\t\t\\\n       _FP_PACK_SEMIRAW (S, 1, X);\t\t\\\n       if (!FP_INHIBIT_RESULTS)\t\t\t\\\n-\t_FP_PACK_RAW_1_P (S, val, X);\t\t\\\n+\t_FP_PACK_RAW_1_P (S, (val), X);\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n@@ -167,20 +167,20 @@ union _FP_UNION_S\n #define FP_MUL_S(R, X, Y)\t\t_FP_MUL (S, 1, R, X, Y)\n #define FP_DIV_S(R, X, Y)\t\t_FP_DIV (S, 1, R, X, Y)\n #define FP_SQRT_S(R, X)\t\t\t_FP_SQRT (S, 1, R, X)\n-#define _FP_SQRT_MEAT_S(R, S, T, X, Q)\t_FP_SQRT_MEAT_1 (R, S, T, X, Q)\n+#define _FP_SQRT_MEAT_S(R, S, T, X, Q)\t_FP_SQRT_MEAT_1 (R, S, T, X, (Q))\n \n #if _FP_W_TYPE_SIZE < 64\n # define FP_FMA_S(R, X, Y, Z)\t_FP_FMA (S, 1, 2, R, X, Y, Z)\n #else\n # define FP_FMA_S(R, X, Y, Z)\t_FP_FMA (S, 1, 1, R, X, Y, Z)\n #endif\n \n-#define FP_CMP_S(r, X, Y, un)\t_FP_CMP (S, 1, r, X, Y, un)\n-#define FP_CMP_EQ_S(r, X, Y)\t_FP_CMP_EQ (S, 1, r, X, Y)\n-#define FP_CMP_UNORD_S(r, X, Y)\t_FP_CMP_UNORD (S, 1, r, X, Y)\n+#define FP_CMP_S(r, X, Y, un, ex)\t_FP_CMP (S, 1, (r), X, Y, (un), (ex))\n+#define FP_CMP_EQ_S(r, X, Y, ex)\t_FP_CMP_EQ (S, 1, (r), X, Y, (ex))\n+#define FP_CMP_UNORD_S(r, X, Y, ex)\t_FP_CMP_UNORD (S, 1, (r), X, Y, (ex))\n \n-#define FP_TO_INT_S(r, X, rsz, rsg)\t_FP_TO_INT (S, 1, r, X, rsz, rsg)\n-#define FP_FROM_INT_S(X, r, rs, rt)\t_FP_FROM_INT (S, 1, X, r, rs, rt)\n+#define FP_TO_INT_S(r, X, rsz, rsg)\t_FP_TO_INT (S, 1, (r), X, (rsz), (rsg))\n+#define FP_FROM_INT_S(X, r, rs, rt)\t_FP_FROM_INT (S, 1, X, (r), (rs), rt)\n \n #define _FP_FRAC_HIGH_S(X)\t_FP_FRAC_HIGH_1 (X)\n #define _FP_FRAC_HIGH_RAW_S(X)\t_FP_FRAC_HIGH_1 (X)"}, {"sha": "05fcca0abafe88a0291cdf4605adad83f9437eff", "filename": "libgcc/soft-fp/soft-fp.h", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fsoft-fp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Fsoft-fp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fsoft-fp.h?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -38,7 +38,7 @@\n # include \"sfp-machine.h\"\n #endif\n \n-/* Allow sfp-machine to have its own byte order definitions. */\n+/* Allow sfp-machine to have its own byte order definitions.  */\n #ifndef __BYTE_ORDER\n # ifdef _LIBC\n #  include <endian.h>\n@@ -63,7 +63,7 @@\n # define FP_ROUNDMODE\t\tFP_RND_NEAREST\n #endif\n \n-/* By default don't care about exceptions. */\n+/* By default don't care about exceptions.  */\n #ifndef FP_EX_INVALID\n # define FP_EX_INVALID\t\t0\n #endif\n@@ -83,6 +83,44 @@\n # define FP_EX_DENORM\t\t0\n #endif\n \n+/* Sub-exceptions of \"invalid\".  */\n+/* Signaling NaN operand.  */\n+#ifndef FP_EX_INVALID_SNAN\n+# define FP_EX_INVALID_SNAN\t0\n+#endif\n+/* Inf * 0.  */\n+#ifndef FP_EX_INVALID_IMZ\n+# define FP_EX_INVALID_IMZ\t0\n+#endif\n+/* fma (Inf, 0, c).  */\n+#ifndef FP_EX_INVALID_IMZ_FMA\n+# define FP_EX_INVALID_IMZ_FMA\t0\n+#endif\n+/* Inf - Inf.  */\n+#ifndef FP_EX_INVALID_ISI\n+# define FP_EX_INVALID_ISI\t0\n+#endif\n+/* 0 / 0.  */\n+#ifndef FP_EX_INVALID_ZDZ\n+# define FP_EX_INVALID_ZDZ\t0\n+#endif\n+/* Inf / Inf.  */\n+#ifndef FP_EX_INVALID_IDI\n+# define FP_EX_INVALID_IDI\t0\n+#endif\n+/* sqrt (negative).  */\n+#ifndef FP_EX_INVALID_SQRT\n+# define FP_EX_INVALID_SQRT\t0\n+#endif\n+/* Invalid conversion to integer.  */\n+#ifndef FP_EX_INVALID_CVI\n+# define FP_EX_INVALID_CVI\t0\n+#endif\n+/* Invalid comparison.  */\n+#ifndef FP_EX_INVALID_VC\n+# define FP_EX_INVALID_VC\t0\n+#endif\n+\n /* _FP_STRUCT_LAYOUT may be defined as an attribute to determine the\n    struct layout variant used for structures where bit-fields are used\n    to access specific parts of binary floating-point numbers.  This is\n@@ -107,31 +145,38 @@\n # define FP_INIT_ROUNDMODE do {} while (0)\n #endif\n \n+/* Initialize any machine-specific state used in\n+   FP_TRAPPING_EXCEPTIONS or FP_HANDLE_EXCEPTIONS.  */\n+#ifndef FP_INIT_TRAPPING_EXCEPTIONS\n+# define FP_INIT_TRAPPING_EXCEPTIONS FP_INIT_ROUNDMODE\n+#endif\n+\n /* Initialize any machine-specific state used in\n    FP_HANDLE_EXCEPTIONS.  */\n #ifndef FP_INIT_EXCEPTIONS\n-# define FP_INIT_EXCEPTIONS FP_INIT_ROUNDMODE\n+# define FP_INIT_EXCEPTIONS FP_INIT_TRAPPING_EXCEPTIONS\n #endif\n \n #ifndef FP_HANDLE_EXCEPTIONS\n # define FP_HANDLE_EXCEPTIONS do {} while (0)\n #endif\n \n+/* Whether to flush subnormal inputs to zero with the same sign.  */\n+#ifndef FP_DENORM_ZERO\n+# define FP_DENORM_ZERO 0\n+#endif\n+\n #ifndef FP_INHIBIT_RESULTS\n /* By default we write the results always.\n- * sfp-machine may override this and e.g.\n- * check if some exceptions are unmasked\n- * and inhibit it in such a case.\n- */\n+   sfp-machine may override this and e.g.\n+   check if some exceptions are unmasked\n+   and inhibit it in such a case.  */\n # define FP_INHIBIT_RESULTS 0\n #endif\n \n #define FP_SET_EXCEPTION(ex)\t\t\t\t\\\n   _fex |= (ex)\n \n-#define FP_CLEAR_EXCEPTIONS\t\t\t\t\\\n-  _fex = 0\n-\n #define FP_CUR_EXCEPTIONS\t\t\t\t\\\n   (_fex)\n \n@@ -166,6 +211,16 @@\n \n #endif\n \n+/* A file using soft-fp may define FP_NO_EXACT_UNDERFLOW before\n+   including soft-fp.h to indicate that, although a macro used there\n+   could allow for the case of exact underflow requiring the underflow\n+   exception to be raised if traps are enabled, for the particular\n+   arguments used in that file no exact underflow can occur.  */\n+#ifdef FP_NO_EXACT_UNDERFLOW\n+# undef FP_TRAPPING_EXCEPTIONS\n+# define FP_TRAPPING_EXCEPTIONS 0\n+#endif\n+\n #define _FP_ROUND_NEAREST(wc, X)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\"}, {"sha": "e09a1ece650a898d1a8ce6cc62af785584bb4a38", "filename": "libgcc/soft-fp/unorddf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Funorddf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Funorddf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Funorddf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -41,9 +41,7 @@ __unorddf2 (DFtype a, DFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_D (A, a);\n   FP_UNPACK_RAW_D (B, b);\n-  FP_CMP_UNORD_D (r, A, B);\n-  if (r && (FP_ISSIGNAN_D (A) || FP_ISSIGNAN_D (B)))\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_UNORD_D (r, A, B, 1);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}, {"sha": "4d6be98a753ff105622f96300a06620d10c44d7e", "filename": "libgcc/soft-fp/unordsf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Funordsf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Funordsf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Funordsf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -41,9 +41,7 @@ __unordsf2 (SFtype a, SFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_S (A, a);\n   FP_UNPACK_RAW_S (B, b);\n-  FP_CMP_UNORD_S (r, A, B);\n-  if (r && (FP_ISSIGNAN_S (A) || FP_ISSIGNAN_S (B)))\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_UNORD_S (r, A, B, 1);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}, {"sha": "79d34211cf281a1dfd007b8269a7869fad46c902", "filename": "libgcc/soft-fp/unordtf2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Funordtf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f60643158669361212ef79bfec16e8c73f4c138/libgcc%2Fsoft-fp%2Funordtf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Funordtf2.c?ref=5f60643158669361212ef79bfec16e8c73f4c138", "patch": "@@ -41,9 +41,7 @@ __unordtf2 (TFtype a, TFtype b)\n   FP_INIT_EXCEPTIONS;\n   FP_UNPACK_RAW_Q (A, a);\n   FP_UNPACK_RAW_Q (B, b);\n-  FP_CMP_UNORD_Q (r, A, B);\n-  if (r && (FP_ISSIGNAN_Q (A) || FP_ISSIGNAN_Q (B)))\n-    FP_SET_EXCEPTION (FP_EX_INVALID);\n+  FP_CMP_UNORD_Q (r, A, B, 1);\n   FP_HANDLE_EXCEPTIONS;\n \n   return r;"}]}