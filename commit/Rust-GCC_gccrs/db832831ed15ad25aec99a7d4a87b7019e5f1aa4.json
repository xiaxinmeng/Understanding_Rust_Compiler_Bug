{"sha": "db832831ed15ad25aec99a7d4a87b7019e5f1aa4", "node_id": "C_kwDOANBUbNoAKGRiODMyODMxZWQxNWFkMjVhZWM5OWE3ZDRhODdiNzAxOWU1ZjFhYTQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-17T17:38:41Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-17T19:44:58Z"}, "message": "Probe for candidates on based on the actual receiver type\n\nImpl blocks Self type is a TypeNoBouns which means it can be for types\nsuch as: impl<T> &T {}.\n\nI think we might need to change the probe algorithm for method calls to be\nfully based on the autoderef rather than trying to filter based on the Self\ntype. More investigation is needed for the probe phase here.\n\nFixes #808", "tree": {"sha": "3efc2aa5786eed2f58dd506c7de1cc9b72354cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3efc2aa5786eed2f58dd506c7de1cc9b72354cbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db832831ed15ad25aec99a7d4a87b7019e5f1aa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db832831ed15ad25aec99a7d4a87b7019e5f1aa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db832831ed15ad25aec99a7d4a87b7019e5f1aa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db832831ed15ad25aec99a7d4a87b7019e5f1aa4/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8695eee4f1b9121d0caa7a93ff51f69707c607f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8695eee4f1b9121d0caa7a93ff51f69707c607f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8695eee4f1b9121d0caa7a93ff51f69707c607f"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "c20659229f6331af4db8ebafb80e3aad8e59180b", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db832831ed15ad25aec99a7d4a87b7019e5f1aa4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db832831ed15ad25aec99a7d4a87b7019e5f1aa4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=db832831ed15ad25aec99a7d4a87b7019e5f1aa4", "patch": "@@ -265,15 +265,29 @@ class TypeCheckExpr : public TypeCheckBase\n     bool probe_impls = !receiver_is_generic;\n     bool ignore_mandatory_trait_items = !receiver_is_generic;\n \n+    auto probe_type = probe_impls ? receiver_tyty : root;\n     auto candidates\n-      = PathProbeType::Probe (root, expr.get_method_name ().get_segment (),\n+      = PathProbeType::Probe (probe_type,\n+\t\t\t      expr.get_method_name ().get_segment (),\n \t\t\t      probe_impls, probe_bounds,\n \t\t\t      ignore_mandatory_trait_items);\n     if (candidates.empty ())\n       {\n-\trust_error_at (expr.get_locus (),\n-\t\t       \"failed to resolve the PathExprSegment to any item\");\n-\treturn;\n+\tif (probe_impls)\n+\t  {\n+\t    candidates\n+\t      = PathProbeType::Probe (root,\n+\t\t\t\t      expr.get_method_name ().get_segment (),\n+\t\t\t\t      probe_impls, probe_bounds,\n+\t\t\t\t      ignore_mandatory_trait_items);\n+\t  }\n+\n+\tif (candidates.empty ())\n+\t  {\n+\t    rust_error_at (expr.get_locus (),\n+\t\t\t   \"failed to resolve the PathExprSegment to any item\");\n+\t    return;\n+\t  }\n       }\n \n     std::vector<Adjustment> adjustments;"}, {"sha": "bfbf774fd05e1a2bc9aed1e02c5e048d9271b8a4", "filename": "gcc/testsuite/rust/compile/torture/issue-808.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db832831ed15ad25aec99a7d4a87b7019e5f1aa4/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-808.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db832831ed15ad25aec99a7d4a87b7019e5f1aa4/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-808.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-808.rs?ref=db832831ed15ad25aec99a7d4a87b7019e5f1aa4", "patch": "@@ -0,0 +1,23 @@\n+pub trait Foo {\n+    type Target;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    fn bar(&self) -> &Self::Target;\n+    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"unused name .Foo::bar.\" \"\" { target *-*-* } .-2 }\n+}\n+\n+impl<T> Foo for &T {\n+    type Target = T;\n+\n+    fn bar(&self) -> &T {\n+        *self\n+    }\n+}\n+\n+pub fn main() {\n+    let a: i32 = 123;\n+    let b: &i32 = &a;\n+\n+    b.bar();\n+}"}]}