{"sha": "bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRiMDVhN2I0OWVlODU2OWI5ZWZhMWIwZTA0MDFiMzAyNmUxMDM0ZQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-11-26T17:31:13Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-11-26T17:31:13Z"}, "message": "cpplib.h (struct cpp_reader): Remove lang_asm.\n\n        * cpplib.h (struct cpp_reader): Remove lang_asm.\n        (struct cpp_options): Remove c89. New members lang,\n        extended_numbers.\n        * cppexp.c (parse_number): Use them.\n        * cpphash.h (VALID_SIGN): Use them.\n        * cppinit.c (set_lang, cpp_start_read): Update.\n        * cpplex.c (parse_string, _cpp_lex_token): Update.\n        * cpplib.c (_cpp_handle_directive): Update.\n        * cppmacro.c (parse_args): Update.\n        * cppmain.c (scan_buffer): Update.\n\nFrom-SVN: r37761", "tree": {"sha": "b125a3451c60a8ac14f5f3f3cd8afb06f601958a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b125a3451c60a8ac14f5f3f3cd8afb06f601958a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/comments", "author": null, "committer": null, "parents": [{"sha": "e1085962754472b391d366d591f66e2413c8faa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1085962754472b391d366d591f66e2413c8faa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1085962754472b391d366d591f66e2413c8faa7"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "9871893eec32a30c272f5d4fe446d5ce51a94569", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "patch": "@@ -1,3 +1,16 @@\n+2000-11-26  Neil Booth  <neilb@earthling.net>\n+\n+        * cpplib.h (struct cpp_reader): Remove lang_asm.\n+        (struct cpp_options): Remove c89. New members lang,\n+        extended_numbers.\n+        * cppexp.c (parse_number): Use them. \n+        * cpphash.h (VALID_SIGN): Use them.\n+        * cppinit.c (set_lang, cpp_start_read): Update.\n+        * cpplex.c (parse_string, _cpp_lex_token): Update.\n+        * cpplib.c (_cpp_handle_directive): Update.\n+        * cppmacro.c (parse_args): Update.\n+        * cppmain.c (scan_buffer): Update.\n+\n Sun Nov 26 10:02:37 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* fold-const.c (fold, case CONVERT_EXPR): Always return tree of"}, {"sha": "882908fda44a347b182eba5bf28fc9f60cb1aae9", "filename": "gcc/cppexp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "patch": "@@ -205,9 +205,7 @@ parse_number (pfile, tok)\n \n       if (CPP_WTRADITIONAL (pfile) && sufftab[i].u)\n \tcpp_warning (pfile, \"traditional C rejects the `U' suffix\");\n-      if (CPP_OPTION (pfile, c89)\n-\t  && sufftab[i].l == 2\n-\t  && pfile->spec_nodes.n__STRICT_ANSI__->type == NT_MACRO)\n+      if (sufftab[i].l == 2 && !CPP_OPTION (pfile, extended_numbers))\n \tSYNTAX_ERROR (\"too many 'l' suffixes in integer constant\");\n     }\n   "}, {"sha": "500c0c25747eb7d125ebea5be133731cd03d5104", "filename": "gcc/cpphash.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "patch": "@@ -26,7 +26,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #define VALID_SIGN(c, prevc) \\\n   (((c) == '+' || (c) == '-') && \\\n    ((prevc) == 'e' || (prevc) == 'E' \\\n-    || (((prevc) == 'p' || (prevc) == 'P') && !CPP_OPTION (pfile, c89))))\n+    || (((prevc) == 'p' || (prevc) == 'P') \\\n+        && CPP_OPTION (pfile, extended_numbers))))\n \n /* Memory pools.  */\n #define ALIGN(size, align) (((size) + ((align) - 1)) & ~((align) - 1))"}, {"sha": "e0b7c4e28ad3ba97026f7cd39f2010eaa00f9271", "filename": "gcc/cppinit.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "patch": "@@ -431,10 +431,11 @@ set_lang (pfile, lang)\n {\n   struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n \n-  /* Default to zero.  */\n-  CPP_OPTION (pfile, lang_asm) = 0;\n+  /* Defaults.  */\n+  CPP_OPTION (pfile, lang) = lang;\n   CPP_OPTION (pfile, objc) = 0;\n   CPP_OPTION (pfile, cplusplus) = 0;\n+  CPP_OPTION (pfile, extended_numbers) = 1; /* Allowed in GNU C and C99.  */\n \n   switch (lang)\n     {\n@@ -444,7 +445,6 @@ set_lang (pfile, lang)\n       CPP_OPTION (pfile, dollars_in_ident) = 1;\n       CPP_OPTION (pfile, cplusplus_comments) = 1;\n       CPP_OPTION (pfile, digraphs) = 1;\n-      CPP_OPTION (pfile, c89) = 0;\n       CPP_OPTION (pfile, c99) = 1;\n       new_pending_directive (pend, \"__STDC_VERSION__=199901L\", cpp_define);\n       break;\n@@ -453,7 +453,6 @@ set_lang (pfile, lang)\n       CPP_OPTION (pfile, dollars_in_ident) = 1;\n       CPP_OPTION (pfile, cplusplus_comments) = 1;\n       CPP_OPTION (pfile, digraphs) = 1;\n-      CPP_OPTION (pfile, c89) = 1;\n       CPP_OPTION (pfile, c99) = 0;\n       break;\n \n@@ -465,16 +464,15 @@ set_lang (pfile, lang)\n       CPP_OPTION (pfile, dollars_in_ident) = 0;\n       CPP_OPTION (pfile, cplusplus_comments) = 0;\n       CPP_OPTION (pfile, digraphs) = lang == CLK_STDC94;\n-      CPP_OPTION (pfile, c89) = 1;\n       CPP_OPTION (pfile, c99) = 0;\n+      CPP_OPTION (pfile, extended_numbers) = 0;\n       new_pending_directive (pend, \"__STRICT_ANSI__\", cpp_define);\n       break;\n     case CLK_STDC99:\n       CPP_OPTION (pfile, trigraphs) = 1;\n       CPP_OPTION (pfile, dollars_in_ident) = 0;\n       CPP_OPTION (pfile, cplusplus_comments) = 1;\n       CPP_OPTION (pfile, digraphs) = 1;\n-      CPP_OPTION (pfile, c89) = 0;\n       CPP_OPTION (pfile, c99) = 1;\n       new_pending_directive (pend, \"__STRICT_ANSI__\", cpp_define);\n       new_pending_directive (pend, \"__STDC_VERSION__=199901L\", cpp_define);\n@@ -489,7 +487,6 @@ set_lang (pfile, lang)\n       CPP_OPTION (pfile, dollars_in_ident) = 1;\n       CPP_OPTION (pfile, cplusplus_comments) = 1;\n       CPP_OPTION (pfile, digraphs) = 1;\n-      CPP_OPTION (pfile, c89) = 0;\n       CPP_OPTION (pfile, c99) = 0;\n       CPP_OPTION (pfile, objc) = 1;\n       new_pending_directive (pend, \"__OBJC__\", cpp_define);\n@@ -503,7 +500,6 @@ set_lang (pfile, lang)\n       CPP_OPTION (pfile, dollars_in_ident) = lang == CLK_GNUCXX;\n       CPP_OPTION (pfile, cplusplus_comments) = 1;\n       CPP_OPTION (pfile, digraphs) = 1;\n-      CPP_OPTION (pfile, c89) = 0;\n       CPP_OPTION (pfile, c99) = 0;\n       new_pending_directive (pend, \"__cplusplus\", cpp_define);\n       break;\n@@ -514,9 +510,7 @@ set_lang (pfile, lang)\n       CPP_OPTION (pfile, dollars_in_ident) = 0;\t/* Maybe not?  */\n       CPP_OPTION (pfile, cplusplus_comments) = 1;\n       CPP_OPTION (pfile, digraphs) = 0; \n-     CPP_OPTION (pfile, c89) = 0;\n       CPP_OPTION (pfile, c99) = 0;\n-      CPP_OPTION (pfile, lang_asm) = 1;\n       new_pending_directive (pend, \"__ASSEMBLER__\", cpp_define);\n       break;\n     }\n@@ -979,7 +973,7 @@ cpp_start_read (pfile, fname)\n     CPP_OPTION (pfile, warn_traditional) = 0;\n \n   /* Do not warn about invalid token pasting if -lang-asm.  */\n-  if (CPP_OPTION (pfile, lang_asm))\n+  if (CPP_OPTION (pfile, lang) == CLK_ASM)\n     CPP_OPTION (pfile, warn_paste) = 0;\n \n   /* Set this if it hasn't been set already. */"}, {"sha": "3cfd8e3e072136afc080c051a93dbe384114d4fb", "filename": "gcc/cpplex.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "patch": "@@ -673,7 +673,7 @@ parse_string (pfile, token, terminator)\n \t  /* In assembly language, silently terminate string and\n \t     character literals at end of line.  This is a kludge\n \t     around not knowing where comments are.  */\n-\t  if (CPP_OPTION (pfile, lang_asm) && terminator != '>')\n+\t  if (CPP_OPTION (pfile, lang) == CLK_ASM && terminator != '>')\n \t    break;\n \n \t  /* Character constants and header names may not extend over\n@@ -1007,11 +1007,9 @@ _cpp_lex_token (pfile, result)\n \t      && !CPP_IN_SYSTEM_HEADER (pfile))\n \t    break;\n \n-\t  /* We silently allow C++ comments in system headers,\n-\t     irrespective of conformance mode, because lots of\n-\t     broken systems do that and trying to clean it up in\n-\t     fixincludes is a nightmare.  */\n-\t  if (CPP_OPTION (pfile, c89) && CPP_PEDANTIC (pfile)\n+\t  /* Warn about comments only if pedantically GNUC89, and not\n+\t     in system headers.  */\n+\t  if (CPP_OPTION (pfile, lang) == CLK_GNUC89 && CPP_PEDANTIC (pfile)\n \t      && ! buffer->warned_cplusplus_comments)\n \t    {\n \t      cpp_pedwarn (pfile,"}, {"sha": "48a8bf6052b7ab6538c9b18e2ebdfe32d0581a4b", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "patch": "@@ -293,7 +293,7 @@ _cpp_handle_directive (pfile, indented)\n \t skipped conditional groups.  Complain about this form if\n \t we're being pedantic, but not if this is regurgitated input\n \t (preprocessed or fed back in by the C++ frontend).  */\n-      if (! buffer->was_skipping  && !CPP_OPTION (pfile, lang_asm))\n+      if (! buffer->was_skipping && CPP_OPTION (pfile, lang) != CLK_ASM)\n \t{\n \t  dir = &dtable[T_LINE];\n \t  _cpp_push_token (pfile, &dname, &pfile->directive_pos);\n@@ -354,7 +354,7 @@ _cpp_handle_directive (pfile, indented)\n \t source: we don't know where the comments are, and # may\n \t introduce assembler pseudo-ops.  Don't complain about invalid\n \t directives in skipped conditional groups (6.10 p4).  */\n-      if (CPP_OPTION (pfile, lang_asm))\n+      if (CPP_OPTION (pfile, lang) == CLK_ASM)\n \t{\n \t  /* Output the # and lookahead token for the assembler.  */\n \t  _cpp_push_token (pfile, &dname, &pfile->directive_pos);"}, {"sha": "4ad00461be509cacd6f4684616b59d91ea02cea7", "filename": "gcc/cpplib.h", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "patch": "@@ -351,6 +351,9 @@ struct cpp_options\n   /* -fleading_underscore sets this to \"_\".  */\n   const char *user_label_prefix;\n \n+  /* The language we're preprocessing.  */\n+  enum c_lang lang;\n+\n   /* Non-0 means -v, so print the full set of include dirs.  */\n   unsigned char verbose;\n \n@@ -363,12 +366,6 @@ struct cpp_options\n   /* Nonzero means handle #import, for objective C.  */\n   unsigned char objc;\n \n-  /* Nonzero means this is an assembly file, so ignore unrecognized\n-     directives and the \"# 33\" form of #line, both of which are\n-     probably comments.  Also, permit unbalanced ' strings (again,\n-     likely to be in comments).  */\n-  unsigned char lang_asm;\n-\n   /* Nonzero means don't copy comments into the output file.  */\n   unsigned char discard_comments;\n \n@@ -378,6 +375,9 @@ struct cpp_options\n   /* Nonzero means process the ISO digraph sequences.  */\n   unsigned char digraphs;\n \n+  /* Nonzero means to allow hexadecimal floats and LL suffixes.  */\n+  unsigned char extended_numbers;\n+\n   /* Nonzero means print the names of included files rather than the\n      preprocessed output.  1 means just the #include \"...\", 2 means\n      #include <...> as well.  */\n@@ -447,9 +447,6 @@ struct cpp_options\n   /* Nonzero means warn if undefined identifiers are evaluated in an #if.  */\n   unsigned char warn_undef;\n \n-  /* Nonzero for the 1989 C Standard, including corrigenda and amendments.  */\n-  unsigned char c89;\n-\n   /* Nonzero for the 1999 C Standard, including corrigenda and amendments.  */\n   unsigned char c99;\n "}, {"sha": "4adf7f687cada63c99cac322e0f730da325ad73c", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "patch": "@@ -564,7 +564,7 @@ parse_args (pfile, node)\n \n       if (argc + 1 == macro->paramc && macro->var_args)\n \t{\n-\t  if (CPP_OPTION (pfile, c99) && CPP_PEDANTIC (pfile))\n+\t  if (CPP_PEDANTIC (pfile))\n \t    cpp_pedwarn (pfile, \"ISO C99 requires rest arguments to be used\");\n \t}\n       else\n@@ -1283,7 +1283,7 @@ parse_params (pfile, macro)\n \t      pfile->state.va_args_ok = 1;\n \t      if (! CPP_OPTION (pfile, c99) && CPP_OPTION (pfile, pedantic))\n \t\tcpp_pedwarn (pfile,\n-\t\t     \"C89 does not permit anonymous variable arguments\");\n+\t\t     \"anonymous variable arguments were introduced in C99\");\n \t    }\n \t  else if (CPP_OPTION (pfile, pedantic))\n \t    cpp_pedwarn (pfile,\n@@ -1395,7 +1395,7 @@ _cpp_create_definition (pfile, node)\n \t      macro->count--;\n \t    }\n \t  /* Let assembler get away with murder.  */\n-\t  else if (!CPP_OPTION (pfile, lang_asm))\n+\t  else if (CPP_OPTION (pfile, lang) != CLK_ASM)\n \t    {\n \t      ok = 0;\n \t      cpp_error (pfile, \"'#' is not followed by a macro parameter\");"}, {"sha": "4e096c4abf9c3dd06bc516d649e014d8b09bdff0", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb05a7b49ee8569b9efa1b0e0401b3026e1034e/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=bdb05a7b49ee8569b9efa1b0e0401b3026e1034e", "patch": "@@ -199,7 +199,7 @@ scan_buffer (pfile)\n \t    }\n \t  else if (print.printed\n \t\t   && ! (token->flags & PREV_WHITE)\n-\t\t   && ! CPP_OPTION (pfile, lang_asm)\n+\t\t   && CPP_OPTION (pfile, lang) != CLK_ASM\n \t\t   && cpp_avoid_paste (pfile, &tokens[1 - index], token))\n \t    token->flags |= PREV_WHITE;\n "}]}