{"sha": "875a15d0da72faf35faabdee1466a82f521811e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc1YTE1ZDBkYTcyZmFmMzVmYWFiZGVlMTQ2NmE4MmY1MjE4MTFlNw==", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@redhat.com", "date": "2003-11-22T00:03:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@gcc.gnu.org", "date": "2003-11-22T00:03:35Z"}, "message": "JLayeredPane.java: Implement.\n\n2003-11-18  Graydon Hoare  <graydon@redhat.com>\n\n\t* javax/swing/JLayeredPane.java: Implement.\n\t* javax/swing/JFrame.java (getContentPane): Make public\n\t* javax/swing/javax/swing/JRootPane.java (setContentPane):\n\tUse JLayeredPane.FRAME_CONTENT_LAYER.\n\nFrom-SVN: r73825", "tree": {"sha": "322f7b410d57e42a814221660bd99bca3d10794b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/322f7b410d57e42a814221660bd99bca3d10794b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/875a15d0da72faf35faabdee1466a82f521811e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875a15d0da72faf35faabdee1466a82f521811e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/875a15d0da72faf35faabdee1466a82f521811e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875a15d0da72faf35faabdee1466a82f521811e7/comments", "author": null, "committer": null, "parents": [{"sha": "6f2aeb725e6a63ce58464951b80c68984cafb808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2aeb725e6a63ce58464951b80c68984cafb808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f2aeb725e6a63ce58464951b80c68984cafb808"}], "stats": {"total": 354, "additions": 346, "deletions": 8}, "files": [{"sha": "79a891105fb744f0441a6dfe5dc5dd9ef608c05b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875a15d0da72faf35faabdee1466a82f521811e7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875a15d0da72faf35faabdee1466a82f521811e7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=875a15d0da72faf35faabdee1466a82f521811e7", "patch": "@@ -1,3 +1,10 @@\n+2003-11-18  Graydon Hoare  <graydon@redhat.com>\n+\n+\t* javax/swing/JLayeredPane.java: Implement.\n+\t* javax/swing/JFrame.java (getContentPane): Make public\n+\t* javax/swing/javax/swing/JRootPane.java (setContentPane): \n+\tUse JLayeredPane.FRAME_CONTENT_LAYER.\n+\n 2003-11-21  Mark Wielaard  <mark@klomp.org>\n \n \t* java/lang/Float.java (static): Removed."}, {"sha": "cc93a87b6de136f2c4b78744a800246c7193b498", "filename": "libjava/javax/swing/JFrame.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875a15d0da72faf35faabdee1466a82f521811e7/libjava%2Fjavax%2Fswing%2FJFrame.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875a15d0da72faf35faabdee1466a82f521811e7/libjava%2Fjavax%2Fswing%2FJFrame.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJFrame.java?ref=875a15d0da72faf35faabdee1466a82f521811e7", "patch": "@@ -149,7 +149,7 @@ void setRootPane(JRootPane root)\n     JRootPane createRootPane()\n     {   return new JRootPane();    }\n \n-    Container getContentPane()\n+    public Container getContentPane()\n     {    return getRootPane().getContentPane();     }\n \n     void setContentPane(Container contentPane)"}, {"sha": "68512a6a8db634a6a8f728c2d05d64a3315e7095", "filename": "libjava/javax/swing/JLayeredPane.java", "status": "modified", "additions": 337, "deletions": 6, "changes": 343, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875a15d0da72faf35faabdee1466a82f521811e7/libjava%2Fjavax%2Fswing%2FJLayeredPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875a15d0da72faf35faabdee1466a82f521811e7/libjava%2Fjavax%2Fswing%2FJLayeredPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJLayeredPane.java?ref=875a15d0da72faf35faabdee1466a82f521811e7", "patch": "@@ -38,23 +38,354 @@\n \n package javax.swing;\n \n+import java.awt.Component;\n+import java.util.*;\n import java.awt.Component;\n import javax.accessibility.Accessible;\n \n+\n+/**\n+ * The \"Layered Pane\" is a container which divides its children into 6 (or\n+ * more) disjoint sets. the pre-defined sets are:\n+ *\n+ *  \"Frame Content\", \"Default\", \"Palette\", \"Modal\", \"Popup\", and \"Drag\".\n+ *\n+ * A child is in exactly one of these layers at any time, though there may\n+ * be other layers if someone creates them.\n+ *\n+ * The purpose of this class is to translate this view of \"layers\" into a\n+ * contiguous array of components: the one held in our ancestor,\n+ * java.awt.Container.\n+ *\n+ * There is a precise set of words we will use to refer to numbers within\n+ * this class:\n+ * \n+ * Internal Component Index: an offset into the \"component\" array held in\n+ * our ancestor, java.awt.Container, from [0 .. component.length). The\n+ * drawing rule with internal indices is that 0 is drawn first.\n+ *\n+ * External Component Index: an offset into the \"logical drawing order\" of\n+ * this container. If I is the internal index of a component, the external\n+ * index E = component.length - I. The rule with external indices is that 0\n+ * is drawn last.\n+ *\n+ * Layer Number: a general int specifying a layer within this component.\n+ * Negative numbers are drawn first, then layer 0, then positive numbered\n+ * layers, in ascending order.\n+ *\n+ * Position: an offset into a layer's \"logical drawing order\". Layer\n+ * position 0 is drawn last. Layer position -1 is a synonym for the first\n+ * layer position (the logical \"bottom\").\n+ */\n+\n public class JLayeredPane extends JComponent implements Accessible\n {\n+\n+    public static String LAYER_PROPERTY = \"LAYER_PROPERTY\";\n+\n+    public static Integer FRAME_CONTENT_LAYER = new Integer (-30000);\n+\n+    public static Integer DEFAULT_LAYER = new Integer (0);\n+    public static Integer PALETTE_LAYER = new Integer (100);\n+    public static Integer MODAL_LAYER   = new Integer (200);\n+    public static Integer POPUP_LAYER   = new Integer (300);\n+    public static Integer DRAG_LAYER    = new Integer (400);\n+\n+    TreeMap layers;               // Layer Number (Integer) -> Layer Size (Integer)\n+    Hashtable componentToLayer;   // Component -> Layer Number (Integer)\n+\n+    protected Integer getLayer (Component c)\n+    {\n+\tif (! componentToLayer.containsKey (c))\n+\t    throw new IllegalArgumentException ();\n+\treturn (Integer) componentToLayer.get (c);\n+    }\n+\n+    // this returns a half-open range [bottom, top), which is the range of\n+    // internal component indices this layer number corresponds to.  note\n+    // that top is *not* included in the range of component indices in this\n+    // layer: a layer with 0 elements in it has ret[0] == ret[1].\n+\n+    protected int[] layerToRange (Integer layer)\n+    {\n+\tint[] ret = new int[2];\t\n+\tIterator i = layers.entrySet ().iterator ();\n+\twhile (i.hasNext())\n+\t    {\n+\t\tMap.Entry pair = (Map.Entry) i.next();\n+\t\tInteger layerNum = (Integer) pair.getKey ();\n+\t\tInteger layerSz = (Integer) pair.getValue ();\n+\t\tif (layerNum == layer)\n+\t\t    {\n+\t\t\tret[1] = ret[0] + layerSz.intValue ();\n+\t\t\treturn ret;\n+\t\t    }\n+\t\telse\n+\t\t    {\n+\t\t\tret[0] += layerSz.intValue ();\n+\t\t    }\n+\t    }\n+\t// should have found the layer during iteration\n+\tthrow new IllegalArgumentException ();\n+    }\n+\n+    protected void incrLayer(Integer layer)\n+    {\n+\tint sz = 1;\n+\tif (layers.containsKey (layer))\n+\t    sz += ((Integer)(layers.get (layer))).intValue ();\n+\tlayers.put (layer, new Integer(sz));\n+    }\n+\n+    protected void decrLayer(Integer layer)\n+    {\n+\tint sz = 0;\n+\tif (layers.containsKey (layer))\n+\t    sz = ((Integer)(layers.get (layer))).intValue () - 1;\n+\tlayers.put (layer, new Integer(sz));\n+    }\n+\n     JLayeredPane()\n     {\n+\tlayers = new TreeMap ();\n+\tlayers.put (FRAME_CONTENT_LAYER, new Integer (0));\n+\tlayers.put (DEFAULT_LAYER, new Integer (0));\n+\tlayers.put (PALETTE_LAYER, new Integer (0));\n+\tlayers.put (MODAL_LAYER, new Integer (0));\n+\tlayers.put (POPUP_LAYER, new Integer (0));\n+\tlayers.put (DRAG_LAYER, new Integer (0));\t\n+\n+\tcomponentToLayer = new Hashtable ();\n+    }\n+\n+    public int highestLayer()\n+    {\n+\tif (layers.size() == 0)\n+\t    return 0;\n+\treturn ((Integer)(layers.lastKey ())).intValue ();\n+    }\n+    \n+    public int lowestLayer()\n+    {\n+\tif (layers.size() == 0)\n+\t    return 0;\n+\treturn ((Integer)(layers.firstKey ())).intValue ();\n+    }\n+\n+    public void moveToFront(Component c)\n+    {\n+\tsetPosition (c, 0);\n     }\n \n+    public void moveToBack(Component c)\n+    {\n+\tsetPosition (c, -1);\n+    }\n     \n-    protected void addImpl(Component comp, Object constraints, int index) \n-    {        \n-        super.addImpl(comp, constraints, index);\n+    public int getPosition(Component c)\n+    {\n+\tInteger layer = getLayer (c);\n+\tint[] range = layerToRange (layer);\n+\tint top = (range[1] - 1);\n+\tComponent[] comps = getComponents ();\n+\tfor (int i = range[0]; i < range[1]; ++i)\n+\t    {\n+\t\tif (comps[i] == c)\n+\t\t    return top - i;\n+\t    }\n+\t// should have found it\n+\tthrow new IllegalArgumentException ();\n+    }\n+\n+    public void setPosition(Component c, int position)\n+    {\n+\tInteger layer = getLayer (c);\n+\tint[] range = layerToRange (layer);\n+\tif (range[0] == range[1])\n+\t    throw new IllegalArgumentException ();\n+\n+\tint top = (range[1] - 1);\n+\tif (position == -1)\n+\t    position = top - range[0];\n+\tint targ = top - position;\n+\tint curr = -1;\n+\n+\tComponent[] comps = getComponents();\n+\tfor (int i = range[0]; i < range[1]; ++i)\n+\t    {\n+\t\tif (comps[i] == c)\n+\t\t    {\n+\t\t\tcurr = i;\n+\t\t\tbreak;\n+\t\t    }\n+\t    }\n+\tif (curr == -1)\n+\t    // should have found it\n+\t    throw new IllegalArgumentException ();\n+\n+\t// System.err.println(\"set component position to \" + position + \" in layer \" + layer);\n+\n+\tComponent tmp = comps[curr];\n+\tsuper.remove (curr);\n+\tsuper.add (tmp, targ);\n+\tsuper.validate ();\n+    }\n+    \n+\n+\n+    public Component[] getComponentsInLayer(int layer)\n+    {\n+\tint[] range = layerToRange (getObjectForLayer (layer));\n+\tif (range[0] == range[1])\n+\t    return new Component[0];\n+\telse\n+\t    {\n+\t\tComponent[] comps = getComponents ();\n+\t\tint sz = (range[1] - 1) - range[0];\n+\t\tComponent[] nc = new Component[sz];\n+\t\tfor (int i = 0; i < sz; ++i)\n+\t\t    nc[i] = comps[range[0] + i];\n+\t\treturn nc;\n+\t    }\n+    }\n+\n+    public int getComponentCountInLayer(int layer)\n+    {\n+\tint[] range = layerToRange (getObjectForLayer (layer));\n+\tif (range[0] == range[1])\n+\t    return 0;\n+\telse\n+\t    return ((range[1] - 1) - range[0]);\n+    }\n+\n+    protected Hashtable getComponentToLayer()\n+    {\n+\treturn componentToLayer;\n+    }\n+\n+    protected int getInternalIndexOf(Component c) \n+    {\n+\tInteger layer = getLayer (c);\n+\tint[] range = layerToRange (layer);\n+\tComponent[] comps = getComponents();\n+\tfor (int i = range[0]; i < range[1]; ++i)\n+\t    {\n+\t\tif (comps[i] == c)\n+\t\t    return i;\n+\t    }\n+\t// should have found the component during iteration\n+\tthrow new IllegalArgumentException ();\n+    }\n+\n+\n+    public int getIndexOf(Component c) \n+    {\n+\t// returns the *external* index of the component.\n+\tint top = getComponentCount() - 1;\n+\treturn top - getIndexOf (c);\n+    }    \n+\n+\n+    protected Integer getObjectForLayer(int layer)\n+    {\n+\tswitch (layer)\n+\t    {\n+\t    case -30000:\n+\t\treturn FRAME_CONTENT_LAYER;\n+\n+\t    case 0:\n+\t\treturn DEFAULT_LAYER;\n+\n+\t    case 100:\n+\t\treturn PALETTE_LAYER;\n+\n+\t    case 200:\n+\t\treturn MODAL_LAYER;\n+\n+\t    case 300:\n+\t\treturn POPUP_LAYER;\n+\n+\t    case 400:\n+\t\treturn DRAG_LAYER;\n+\n+\t    default:\n+\t\tbreak;\n+\t    }\n+\n+\treturn new Integer(layer);\n+    }\n+    \n+    protected int insertIndexForLayer(int layer, int position)\n+    {\n+\tint[] range = layerToRange (getObjectForLayer (layer));\n+\tif (range[0] == range[1])\n+\t    return range[0];\n \t\n-        comp.validate();\n-        comp.repaint();\n+\tint bottom = range[0];\n+\tint top = range[1] - 1;\n+\t\n+\tif (position == -1 || position > (top - bottom))\n+\t    return bottom;\n+\telse\n+\t    return top - position;\n     }\n     \n-  \n+    public void remove (int index)\n+    {\n+\tComponent c = getComponent (index);\n+\tInteger layer = getLayer (c);\n+\tdecrLayer (layer);\n+\tcomponentToLayer.remove (c);\n+\tsuper.remove (index);\n+    }\n+\t\n+    public void remove (Component comp)\n+    {\n+\tInteger layer = getLayer (comp);\n+\tdecrLayer (layer);\n+\tcomponentToLayer.remove (comp);\n+\tsuper.remove (comp);\n+    }\n+\n+    public void removeAll ()\n+    {\n+\tcomponentToLayer.clear ();\n+\tlayers.clear ();\n+\tsuper.removeAll ();\n+    }\n+\n+    public void setLayer(Component c, int layer)\n+    {\n+\tcomponentToLayer.put (c, getObjectForLayer (layer));\n+    }\n+\n+    public void setLayer(Component c,\n+\t\t\t int layer,\n+\t\t\t int position)\n+    {\n+\tcomponentToLayer.put (c, getObjectForLayer (layer));\n+\tsetPosition(c, position);\n+        repaint();\n+    }\n+\n+    protected void addImpl(Component comp, Object layerConstraint, int index) \n+    {        \t\n+\tInteger layer;\n+\tif (layerConstraint != null && layerConstraint instanceof Integer)\n+\t\tlayer = (Integer) layerConstraint;\n+\telse if (componentToLayer.containsKey (comp))\n+\t    layer = (Integer) componentToLayer.remove (comp);\n+\telse\n+\t    layer = DEFAULT_LAYER;\n+\n+\tint newIdx = insertIndexForLayer(layer.intValue (), -1);\n+\tcomponentToLayer.put (comp, layer);\n+\tincrLayer (layer);\n+\n+\t// System.err.println(\"adding component to layer \" + layer);\n+\t\n+        super.addImpl(comp, null, newIdx);\t\n+        validate();\n+        repaint();\n+    }     \n }"}, {"sha": "ccab07c13b1290400defa94043e2bc3fa7226c23", "filename": "libjava/javax/swing/JRootPane.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875a15d0da72faf35faabdee1466a82f521811e7/libjava%2Fjavax%2Fswing%2FJRootPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875a15d0da72faf35faabdee1466a82f521811e7/libjava%2Fjavax%2Fswing%2FJRootPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJRootPane.java?ref=875a15d0da72faf35faabdee1466a82f521811e7", "patch": "@@ -119,7 +119,7 @@ public Container getContentPane()\n     public void setContentPane(Container p)\n     {\n \tcontentPane = p;    \n-\tgetLayeredPane().add(contentPane, 0);\n+\tgetLayeredPane().add(contentPane, JLayeredPane.FRAME_CONTENT_LAYER);\n     }\n \n     protected void addImpl(Component comp,"}]}