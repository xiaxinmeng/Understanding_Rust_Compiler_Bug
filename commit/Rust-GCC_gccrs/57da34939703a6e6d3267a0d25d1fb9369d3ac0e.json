{"sha": "57da34939703a6e6d3267a0d25d1fb9369d3ac0e", "node_id": "C_kwDOANBUbNoAKDU3ZGEzNDkzOTcwM2E2ZTZkMzI2N2EwZDI1ZDFmYjkzNjlkM2FjMGU", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-01-28T21:00:57Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-02-13T15:46:46Z"}, "message": "fortran: Unshare associate var charlen [PR104228]\n\nPR104228 showed that character lengths were shared between associate\nvariable and associate targets.  This is problematic when the associate\ntarget is itself a variable and gets a variable to hold the length, as\nthe length variable is added (and all the variables following it in the chain)\nto both the associate variable scope and the target variable scope.\nThis caused an ICE when compiling with -O0 -fsanitize=address.\n\nThis change forces the creation of a separate character length for the\nassociate variable.  It also forces the initialization of the character\nlength variable to avoid regressing associate_32 and associate_47 tests.\n\n\tPR fortran/104228\n\ngcc/fortran/ChangeLog:\n\n\t* resolve.cc (resolve_assoc_var): Also create a new character\n\tlength for non-dummy associate targets.\n\t* trans-stmt.cc (trans_associate_var): Initialize character length\n\teven if no temporary is used for the associate variable.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/asan/associate_58.f90: New test.\n\t* gfortran.dg/asan/associate_59.f90: New test.", "tree": {"sha": "980531df7698c39dd08c736aa5f60f7bc7f4c9b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/980531df7698c39dd08c736aa5f60f7bc7f4c9b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57da34939703a6e6d3267a0d25d1fb9369d3ac0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57da34939703a6e6d3267a0d25d1fb9369d3ac0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57da34939703a6e6d3267a0d25d1fb9369d3ac0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57da34939703a6e6d3267a0d25d1fb9369d3ac0e/comments", "author": null, "committer": null, "parents": [{"sha": "7e204bd2f189850cb940677c99d8d93eb7dd40cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e204bd2f189850cb940677c99d8d93eb7dd40cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e204bd2f189850cb940677c99d8d93eb7dd40cd"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "266e41e25b199ffcf22881ee037e844546c214d2", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57da34939703a6e6d3267a0d25d1fb9369d3ac0e/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57da34939703a6e6d3267a0d25d1fb9369d3ac0e/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=57da34939703a6e6d3267a0d25d1fb9369d3ac0e", "patch": "@@ -9227,7 +9227,6 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n \tsym->ts.u.cl = target->ts.u.cl;\n \n       if (sym->ts.deferred && target->expr_type == EXPR_VARIABLE\n-\t  && target->symtree->n.sym->attr.dummy\n \t  && sym->ts.u.cl == target->ts.u.cl)\n \t{\n \t  sym->ts.u.cl = gfc_new_charlen (sym->ns, NULL);"}, {"sha": "30b6bd5dd2a37acbfea2df5bd9e31b47ee51830e", "filename": "gcc/fortran/trans-stmt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57da34939703a6e6d3267a0d25d1fb9369d3ac0e/gcc%2Ffortran%2Ftrans-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57da34939703a6e6d3267a0d25d1fb9369d3ac0e/gcc%2Ffortran%2Ftrans-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.cc?ref=57da34939703a6e6d3267a0d25d1fb9369d3ac0e", "patch": "@@ -1918,7 +1918,7 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n       gfc_conv_expr_descriptor (&se, e);\n \n       if (sym->ts.type == BT_CHARACTER\n-\t  && !se.direct_byref && sym->ts.deferred\n+\t  && sym->ts.deferred\n \t  && !sym->attr.select_type_temporary\n \t  && VAR_P (sym->ts.u.cl->backend_decl)\n \t  && se.string_length != sym->ts.u.cl->backend_decl)"}, {"sha": "b5ea75498b7ca6ab8c6b17f843a0535d56c0201d", "filename": "gcc/testsuite/gfortran.dg/asan/associate_58.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57da34939703a6e6d3267a0d25d1fb9369d3ac0e/gcc%2Ftestsuite%2Fgfortran.dg%2Fasan%2Fassociate_58.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57da34939703a6e6d3267a0d25d1fb9369d3ac0e/gcc%2Ftestsuite%2Fgfortran.dg%2Fasan%2Fassociate_58.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fasan%2Fassociate_58.f90?ref=57da34939703a6e6d3267a0d25d1fb9369d3ac0e", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-O0\" }\n+!\n+! PR fortran/104228\n+! The code generated code for the program below wrongly pushed the Y character\n+! length variable to both P and S scope, which was leading to an ICE when\n+! address sanitizer was in effect\n+\n+program p\n+   character(:), save, allocatable :: x(:)\n+   call s\n+contains\n+   subroutine s\n+      associate (y => x)\n+         y = [x]\n+      end associate\n+   end\n+end\n+"}, {"sha": "9bfb2bfbafb9666e8401db7fe423918d6f59834e", "filename": "gcc/testsuite/gfortran.dg/asan/associate_59.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57da34939703a6e6d3267a0d25d1fb9369d3ac0e/gcc%2Ftestsuite%2Fgfortran.dg%2Fasan%2Fassociate_59.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57da34939703a6e6d3267a0d25d1fb9369d3ac0e/gcc%2Ftestsuite%2Fgfortran.dg%2Fasan%2Fassociate_59.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fasan%2Fassociate_59.f90?ref=57da34939703a6e6d3267a0d25d1fb9369d3ac0e", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-O0\" }\n+!\n+! PR fortran/104228\n+! The code generated code for the program below wrongly pushed the Y character\n+! length variable to both P and S scope, which was leading to an ICE when\n+! address sanitizer was in effect\n+\n+program p\n+   character(:), allocatable :: x(:)\n+   call s\n+contains\n+   subroutine s\n+      associate (y => x)\n+         y = [x]\n+      end associate\n+   end\n+end\n+"}]}