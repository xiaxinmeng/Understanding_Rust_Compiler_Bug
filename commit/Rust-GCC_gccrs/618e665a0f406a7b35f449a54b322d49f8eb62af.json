{"sha": "618e665a0f406a7b35f449a54b322d49f8eb62af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4ZTY2NWEwZjQwNmE3YjM1ZjQ0OWE1NGIzMjJkNDlmOGViNjJhZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-01T16:30:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-01T16:30:04Z"}, "message": "Rotate ChangeLog files - step 2 - remove 2020 entries from ChangeLog files.\n\nCan't be committed together with the previous one due to the ChangeLog vs.\nother files restrictions.", "tree": {"sha": "fbaf9137843a45cc983da75671ba3109040e2689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbaf9137843a45cc983da75671ba3109040e2689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/618e665a0f406a7b35f449a54b322d49f8eb62af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618e665a0f406a7b35f449a54b322d49f8eb62af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618e665a0f406a7b35f449a54b322d49f8eb62af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618e665a0f406a7b35f449a54b322d49f8eb62af/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9269627832853dc3bb91b141295563e89c0341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9269627832853dc3bb91b141295563e89c0341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9269627832853dc3bb91b141295563e89c0341"}], "stats": {"total": 102065, "additions": 8, "deletions": 102057}, "files": [{"sha": "21e8799b65312e6231a2cd83991f8486fc25eccb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 39855, "changes": 39856, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=618e665a0f406a7b35f449a54b322d49f8eb62af"}, {"sha": "21e8799b65312e6231a2cd83991f8486fc25eccb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1, "deletions": 13973, "changes": 13974, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=618e665a0f406a7b35f449a54b322d49f8eb62af"}, {"sha": "21e8799b65312e6231a2cd83991f8486fc25eccb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 1, "deletions": 6591, "changes": 6592, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=618e665a0f406a7b35f449a54b322d49f8eb62af"}, {"sha": "21e8799b65312e6231a2cd83991f8486fc25eccb", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 1, "deletions": 1025, "changes": 1026, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=618e665a0f406a7b35f449a54b322d49f8eb62af", "patch": "@@ -1,1029 +1,5 @@\n-2020-12-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 2bd4fc3fe.\n-\n-2020-12-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-lang.cc (deps_add_target): Handle quoting ':' character.\n-\tReimplement backslash tracking.\n-\n-2020-12-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-tree.h (d_eval_constant_expression): Add location argument.\n-\t* d-builtins.cc (d_eval_constant_expression): Give generated constants\n-\ta proper file location.\n-\t* d-compiler.cc (Compiler::paintAsType): Pass expression location to\n-\td_eval_constant_expression.\n-\t* d-frontend.cc (eval_builtin): Likewise.\n-\n-2020-12-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/98427\n-\t* types.cc (TypeVisitor::visit (TypeStruct *)): Set TYPE_MODE of all\n-\tnon-trivial types as BLKmode.\n-\t(TypeVisitor::visit (TypeClass *)): Likewise.\n-\n-2020-12-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/98277\n-\t* decl.cc (DeclVisitor::visit (VarDeclaration *)): Move setting of\n-\tDECL_INITIAL for manifest constants to ...\n-\t(get_symbol_decl): ... here.\n-\n-2020-11-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-target.def (d_minfo_section): New hook.\n-\t(d_minfo_start_name): New hook.\n-\t(d_minfo_end_name): New hook.\n-\t* modules.cc: Include d-target.h.\n-\t(register_moduleinfo): Update to use new targetdm hooks.\n-\n-2020-11-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/87788\n-\t* dmd/MERGE: Merge upsream dmd 45fa6cfd2.\n-\n-2020-11-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd db0df3f7e.\n-\t* types.cc (TypeVisitor::visit (TypeFunction *)): Remove LINKpascal.\n-\n-2020-11-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* intrinsics.cc (maybe_expand_intrinsic): Handle new intrinsics.\n-\t* intrinsics.def (INTRINSIC_COS): Add float and double overloads.\n-\t(INTRINSIC_FABS): Likewise.\n-\t(INTRINSIC_LDEXP): Likewise.\n-\t(INTRINSIC_RINT): Likewise.\n-\t(INTRINSIC_RNDTOL): Likewise.\n-\t(INTRINSIC_SIN): Likewise.\n-\t(INTRINSIC_TOPREC): Adjust signature.\n-\n-2020-11-22  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/97889\n-\t* expr.cc (ExprVisitor::visit (CatAssignExp *)): Enforce LTR order of\n-\tevaluation on left and right hand side expressions.\n-\n-2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR other/97911\n-\t* Make-lang.in (d.serial): Change from goal to a variable.\n-\t(.PHONY): Drop d.serial and d.prev.\n-\t(d21$(exeext)): Depend on $(d.serial) rather than d.serial.\n-\n-2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* Make-lang.in (d.serial): New goal.\n-\t(.PHONY): Add d.serial d.prev.\n-\t(d21$(exeext)): Depend on d.prev.  Call LINK_PROGRESS.\n-\n-2020-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/97843\n-\t* d-codegen.cc (build_assign): Evaluate TARGET_EXPR before use in\n-\tthe right hand side of an assignment.\n-\t* expr.cc (ExprVisitor::visit (CatAssignExp *)): Force a TARGET_EXPR\n-\ton the element to append if it is a CALL_EXPR.\n-\n-2020-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/97842\n-\t* dmd/MERGE: Merge upstream dmd b6a779e49\n-\n-2020-11-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* intrinsics.cc (expand_intrinsic_copysign): Explicitly determine\n-\twhich built-in copysign function to call.\n-\n-2020-11-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/97644\n-\t* dmd/MERGE: Merge upstream dmd 95044d8e4.\n-\t* d-target.cc (TargetCPP::thunkMangle): New function.\n-\t* decl.cc (finish_thunk): Don't force expand thunks for external\n-\tfunctions.\n-\t(make_thunk): Emit thunks only if the function has a definition.\n-\tGenerate correct mangling for thunks to C++ classes.\n-\n-2020-11-10  Strager Neds  <strager.nds@gmail.com>\n-\n-\t* decl.cc (finish_thunk): Use new overload of\n-\tset_decl_section_name\n-\n-2020-10-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd bec5973b0.\n-\t* d-target.cc (Target::critsecsize): Remove.\n-\t* d-target.def: Remove d_critsec_size.\n-\n-2020-10-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 0fcdaab32\n-\n-2020-10-23  Jan Hubicka  <hubicka@ucw.cz>\n-\n-\t* decl.cc (finish_thunk): Update for new thunk api.\n-\n-2020-10-22  Jan Hubicka  <hubicka@ucw.cz>\n-\n-\t* decl.cc: Include tree-nested.h\n-\t(get_symbol_decl): Update for new nested function info.\n-\n-2020-10-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 70aabfb51\n-\n-2020-10-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 3a9790525\n-\t* d-target.cc (Target::isVectorTypeSupported): Adjust return codes for\n-\tinvalid size and invalid base type.\n-\n-2020-09-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/97002\n-\t* d-codegen.cc (d_build_call): Set input_location on CALL_EXPR.\n-\t* d-lang.cc: Include function.h.\n-\t(d_type_promotes_to): Do default conversions for C and C++ functions.\n-\t* intrinsics.cc (expand_intrinsic_vaarg): Use build1_loc to build\n-\tVA_ARG_EXPR.\n-\n-2020-09-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-builtins.cc (d_build_d_type_nodes): Call build_ctype() on all\n-\tbasic front-end types.\n-\t* decl.cc (DeclVisitor::visit (EnumDeclaration *)): Always add decl to\n-\tcurrent binding level.\n-\t(build_type_decl): Build TYPE_DECL as a typedef if not for an enum or\n-\trecord type.\n-\t* types.cc (TypeVisitor::visit (TypeEnum *)): Set underlying type for\n-\tENUMERAL_TYPEs.  Build TYPE_DECL for non-numeric enums.\n-\n-2020-09-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* lang.opt (Waddress): Enable warning by -Wextra.\n-\t(Wcast-result): Likewise.\n-\t(Wunknown-pragmas): Likewise.\n-\n-2020-09-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* decl.cc (DeclVisitor::visit (VarDeclaration *)): Don't warn about\n-\tvariables initialized with 'void'.\n-\n-2020-09-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-convert.cc (convert_expr): Warn when casting from a D class to a\n-\tC++ class.\n-\n-2020-09-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96924\n-\t* expr.cc (ExprVisitor::visit (CatAssignExp *)): Don't force\n-\ttemporaries needlessly.\n-\n-2020-09-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96869\n-\t* d-builtins.cc (build_frontend_type): Don't expose intrinsics that\n-\tuse unsupported vector types.\n-\t* d-target.cc (Target::isVectorTypeSupported): Restrict to supporting\n-\tonly if TARGET_VECTOR_MODE_SUPPORTED_P is true.  Don't allow complex\n-\tor boolean vector types.\n-\n-2020-08-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-target.cc (Target::_init): Don't set classinfosize.\n-\t* d-tree.h (base_vtable_offset): Move under typeinfo.cc section.\n-\t* decl.cc (base_vtable_offset): Move to...\n-\t* typeinfo.cc (base_vtable_offset): ...here.  Get base offset from\n-\tinternal TypeInfo_Class type.\n-\t* intrinsics.cc (expand_intrinsic_bt): Use pointer TYPE_SIZE for\n-\tsetting bitsize value.  Build integer constants of correct type.\n-\n-2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd e49192807\n-\n-2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96156\n-\t* d-frontend.cc (retStyle): Only return RETstack for struct and static\n-\tarray types.\n-\t* decl.cc (DeclVisitor::visit (FuncDeclaration *)): Use NRVO return\n-\tfor all TREE_ADDRESSABLE types.  Set shidden to the RESULT_DECL.\n-\t* expr.cc (ExprVisitor::visit (CallExp *)): Force TARGET_EXPR if the\n-\t'this' pointer reference is a CONSTRUCTOR.\n-\t(ExprVisitor::visit (StructLiteralExp *)): Generate assignment to the\n-\tsymbol to initialize with literal.\n-\t* toir.cc (IRVisitor::visit (ReturnStatement *)): Detect returning\n-\tstruct literals and write directly into the RESULT_DECL.\n-\t* dmd/MERGE: Merge upstream dmd fe5f388d8.\n-\n-2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd cb4a96fae\n-\n-2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-lang.cc (d_parse_file): Use read() to load contents from stdin,\n-\tallow the front-end to free the memory after parsing.\n-\t* dmd/MERGE: Merge upstream dmd 2cc25c219.\n-\n-2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96153\n-\t* d-codegen.cc (build_address): Create a temporary for CALL_EXPRs\n-\treturning trivial aggregates, pre-filling it with zeroes.\n-\t(build_memset_call): Use build_zero_cst if setting the entire object.\n-\n-2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96157\n-\t* d-codegen.cc (d_build_call): Handle TREE_ADDRESSABLE static arrays.\n-\t* types.cc (make_array_type): Propagate TREE_ADDRESSABLE from base\n-\ttype to static array.\n-\n-2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-gimplify.cc (d_gimplify_expr): Move lowering of each tree node to\n-\tseparate functions.\n-\t(d_gimplify_modify_expr): New function.\n-\t(d_gimplify_addr_expr): New function.\n-\t(d_gimplify_call_expr): New function.\n-\t(d_gimplify_unsigned_rshift_expr): New function.\n-\n-2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* Make-lang.in (D_OBJS): Add d-gimplify.o.\n-\t* d-lang.cc (empty_modify_p): Move to d-gimplify.cc.\n-\t(d_gimplify_expr): Likewise.\n-\t* d-tree.h (d_gimplify_expr): Declare.\n-\t* d-gimplify.cc: New file.\n-\n-2020-08-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 1b5a53d01.\n-\n-2020-08-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96301\n-\t* decl.cc (DeclVisitor::visit (FuncDeclaration *)): Only return\n-\tnon-trivial structs by invisible reference.\n-\n-2020-08-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96153\n-\t* d-tree.h (build_expr): Add literalp argument.\n-\t* expr.cc (ExprVisitor): Add literalp_ field.\n-\t(ExprVisitor::ExprVisitor): Initialize literalp_.\n-\t(ExprVisitor::visit (AssignExp *)): Call memset() on blits where RHS\n-\tis a struct literal.  Elide assignment if initializer is all zeroes.\n-\t(ExprVisitor::visit (CastExp *)): Forward literalp_ to generation of\n-\tsubexpression.\n-\t(ExprVisitor::visit (AddrExp *)): Likewise.\n-\t(ExprVisitor::visit (ArrayLiteralExp *)): Use memset() to pre-fill\n-\tobject with zeroes.  Set literalp in subexpressions.\n-\t(ExprVisitor::visit (StructLiteralExp *)): Likewise.\n-\t(ExprVisitor::visit (TupleExp *)): Set literalp in subexpressions.\n-\t(ExprVisitor::visit (VectorExp *)): Likewise.\n-\t(ExprVisitor::visit (VectorArrayExp *)): Likewise.\n-\t(build_expr): Forward literal_p to ExprVisitor.\n-\n-2020-08-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96429\n-\t* expr.cc (ExprVisitor::visit (BinExp*)): Use EXACT_DIV_EXPR for\n-\tpointer diff expressions.\n-\n-2020-08-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96254\n-\t* d-codegen.cc (error_no_frame_access): New.\n-\t(get_frame_for_symbol): Use fdparent name in error message.\n-\t(get_framedecl): Replace call to assert with error.\n-\t* d-tree.h (error_no_frame_access): Declare.\n-\t* decl.cc (get_decl_tree): Detect recursion and error.\n-\n-2020-08-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96250\n-\t* dmd/MERGE: Merge upstream dmd c2274e56a.\n-\n-2020-07-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96393\n-\t* intrinsics.cc (expand_intrinsic_bt): Don't generate BIT_NOT_EXPR for\n-\tbtr32 intrinsic.\n-\n-2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96152\n-\t* d-codegen.cc (build_array_from_exprs): New function.\n-\t* d-tree.h (build_array_from_exprs): Declare.\n-\t* expr.cc (ExprVisitor::visit (AssocArrayLiteralExp *)): Use\n-\tbuild_array_from_exprs to generate key and value arrays.\n-\n-2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96154\n-\t* gdc.texi (Warnings): Document -Wvarargs.\n-\t* lang.opt: Add -Wvarargs\n-\n-2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96140\n-\t* intrinsics.cc (expand_intrinsic_vaarg): Handle ref parameters as\n-\targuments to va_arg().\n-\t(expand_intrinsic_vastart): Handle ref parameters as arguments to\n-\tva_start().\n-\n-2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* expr.cc (ExprVisitor::visit (AssignExp *)): Inline bounds checking\n-\tfor simple array assignments.\n-\n-2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-codegen.cc (build_memcmp_call): New function.\n-\t(build_memcpy_call): New function.\n-\t(build_memset_call): New function.\n-\t(build_float_identity): Call build_memcmp_call.\n-\t(lower_struct_comparison): Likewise.\n-\t(build_struct_comparison): Likewise.\n-\t* d-tree.h (build_memcmp_call): Declare.\n-\t(build_memcpy_call): Declare.\n-\t(build_memset_call): Declare.\n-\t* expr.cc (ExprVisitor::visit (EqualExp *)): Call build_memcmp_call.\n-\t(ExprVisitor::visit (AssignExp *)): Call build_memset_call.\n-\t(ExprVisitor::visit (ArrayLiteralExp *)): Call build_memcpy_call.\n-\t(ExprVisitor::visit (StructLiteralExp *)): Call build_memset_call.\n-\n-2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* expr.cc (needs_postblit): Move out of ExprVisitor as a static\n-\tfunction.  Update all callers.\n-\t(needs_dtor): Likewise.\n-\t(lvalue_p): Likewise.\n-\t(binary_op): Likewise.\n-\t(binop_assignment): Likewise.\n-\n-2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* intrinsics.cc (expand_intrinsic_rotate): Add function.\n-\t(maybe_expand_intrinsic): Handle rol and ror intrinsics.\n-\t* intrinsics.def (ROL): Add intrinsic.\n-\t(ROL_TIARG): Add intrinsic.\n-\t(ROR): Add intrinsic.\n-\t(ROR_TIARG): Add intrinsic.\n-\n-2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-tree.h (DEF_D_INTRINSIC): Rename second argument from A to B.\n-\t* intrinsics.cc (intrinsic_decl): Add built_in field.\n-\t(DEF_D_INTRINSIC): Rename second argument from ALIAS to BUILTIN.\n-\t(maybe_set_intrinsic): Handle new intrinsic codes.\n-\t(expand_intrinsic_bt): Likewise.\n-\t(expand_intrinsic_checkedint): Likewise.\n-\t(expand_intrinsic_bswap): Remove.\n-\t(expand_intrinsic_sqrt): Remove.\n-\t(maybe_expand_intrinsic): Group together intrinsic cases that map\n-\tdirectly to gcc built-ins.\n-\t* intrinsics.def (DEF_D_BUILTIN): Rename second argument from A to B.\n-\tUpdate all callers to pass equivalent DECL_FUNCTION_CODE.\n-\t(DEF_CTFE_BUILTIN): Likewise.\n-\t(STD_COS): Remove intrinsic.\n-\t(STD_FABS): Remove intrinsic.\n-\t(STD_LDEXP): Remove intrinsic.\n-\t(STD_RINT): Remove intrinsic.\n-\t(STD_RNDTOL): Remove intrinsic.\n-\t(STD_SIN): Remove intrinsic.\n-\t(STD_SQRTF): Remove intrinsic.\n-\t(STD_SQRT): Remove intrinsic.\n-\t(STD_SQRTL): Remove intrinsic.\n-\n-2020-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 8508c4e68.\n-\n-2020-06-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* decl.cc (get_symbol_decl): Do not implicitly set\n-\tDECL_DECLARED_INLINE_P on member functions.\n-\n-2020-06-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-lang.cc (d_gimplify_expr_p): Make static.\n-\t(d_parse_file): Likewise.\n-\t(d_signed_or_unsigned_type): Move to types.cc.\n-\t(d_unsigned_type): Likewise.\n-\t(d_signed_type): Likewise.\n-\t* d-tree.h (d_unsigned_type): Change the location in file.\n-\t(d_signed_type): Likewise.\n-\t* types.cc (d_signed_or_unsigned_type): Moved from d-lang.cc.\n-\t(d_unsigned_type): Likewise.\n-\t(d_signed_type): Likewise.\n-\n-2020-06-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/95075\n-\t* dmd/MERGE: Merge upstream dmd 4be011355.\n-\n-2020-06-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/95250\n-\t* dmd/MERGE: Merge upstream dmd 90450f3ef.\n-\n-2020-06-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-lang.cc (d_parse_file): Replace OutBuffer with obstack.\n-\n-2020-06-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 5fc1806cd.\n-\t* d-lang.cc (d_parse_file): Use peekChars to get string representation\n-\tof OutBuffer data.\n-\n-2020-06-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/95173\n-\t* d-attribs.cc (uda_attribute_p): Don't search target attribute table\n-\tif NULL.\n-\n-2020-06-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* decl.cc (DeclVisitor::visit (VarDeclaration *)): Don't set\n-\tDECL_INITIAL if initializer is 'void'.\n-\n-2020-06-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-lang.cc (d_init_options): Turn on deprecation warnings by default.\n-\n-2020-06-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 4f1046222.\n-\t* toir.cc (IRVisitor::visit (OnScopeGuardStatement *)): Rename to ...\n-\t(IRVisitor::visit (ScopeGuardStatement *)): ... this.\n-\n-2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc (handle_noreturn_attribute): Remove names of unused\n-\tfunction parameters.\n-\t(handle_leaf_attribute): Likewise.\n-\t(handle_const_attribute): Likewise.\n-\t(handle_malloc_attribute): Likewise.\n-\t(handle_pure_attribute): Likewise.\n-\t(handle_novops_attribute): Likewise.\n-\t(handle_nonnull_attribute): Likewise.\n-\t(handle_nothrow_attribute): Likewise.\n-\t(handle_type_generic_attribute): Likewise.\n-\t(handle_transaction_pure_attribute): Likewise.\n-\t(handle_returns_twice_attribute): Likewise.\n-\t(handle_fnspec_attribute): Likewise.\n-\t(handle_always_inline_attribute): Likewise.\n-\t(d_handle_noinline_attribute): Likewise.\n-\t(d_handle_forceinline_attribute): Likewise.\n-\t(d_handle_flatten_attribute): Likewise.\n-\t(d_handle_noclone_attribute): Likewise.\n-\t(d_handle_section_attribute): Likewise.\n-\t(d_handle_alias_attribute): Likewise.\n-\t(d_handle_weak_attribute): Likewise.\n-\n-2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc: Update code formatting in a consistant style.\n-\t* d-builtins.cc: Likewise.\n-\t* d-codegen.cc: Likewise.\n-\t* d-compiler.cc: Likewise.\n-\t* d-convert.cc: Likewise.\n-\t* d-diagnostic.cc: Likewise.\n-\t* d-frontend.cc: Likewise.\n-\t* d-lang.cc: Likewise.\n-\t* d-longdouble.cc: Likewise.\n-\t* d-port.cc: Likewise.\n-\t* d-spec.cc: Likewise.\n-\t* d-tree.h: Likewise.\n-\t* decl.cc: Likewise.\n-\t* expr.cc: Likewise.\n-\t* longdouble.h: Likewise.\n-\t* modules.cc: Likewise.\n-\t* toir.cc: Likewise.\n-\t* typeinfo.cc: Likewise.\n-\n-2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-builtins.cc: Update quotation formatting of comments.\n-\t* d-codegen.cc: Likewise.\n-\t* d-lang.cc: Likewise.\n-\t* decl.cc: Likewise.\n-\t* expr.cc: Likewise.\n-\t* imports.cc: Likewise.\n-\t* runtime.cc: Likewise.\n-\t* toir.cc: Likewise.\n-\t* typeinfo.cc: Likewise.\n-\t* types.cc: Likewise.\n-\n-2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-diagnostic.cc (expand_d_format): Replace OutBuffer with obstack.\n-\t(d_diagnostic_report_diagnostic): Don't free xformat.\n-\t* d-lang.cc (struct d_option_data): Change deps_target type from\n-\tOutBuffer to vec <const char *>.\n-\t(deps_add_target): Update to push each target to deps_target.\n-\t(deps_write_string): New function.\n-\t(deps_write): Change buffer type to obstack* and remove colmax.\n-\t(d_init_options): Update initialization of deps_target.\n-\t(d_parse_file): Replace OutBuffer with obstack.\n-\n-2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-lang.cc (d_parse_file): Replace uses of File with FILE.\n-\n-2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-codegen.cc (build_array_bounds_call): New function.\n-\t(build_bounds_condition): Use build_array_bounds_call.\n-\t* d-lang.cc (d_init_options): Explicitly set default check action to\n-\tCHECKACTION_D.\n-\t(d_post_options): Set check action to CHECKACTION_C if the flag\n-\t-fno-druntime was seen.\n-\t* d-tree.h (build_array_bounds_call): Declare.\n-\t* expr.cc (ExprVisitor::visit (AssertExp *)): Use\n-\tbuild_array_bounds_call.\n-\n-2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc (build_attributes): Use toStringExp instead of cast.\n-\t* toir.cc (IRVisitor::visit): Likewise.\n-\n-2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc (build_attributes): Use isXxxxExp helpers instead of\n-\texplicit casts.\n-\t* d-codegen.cc (d_build_call): Likewise.\n-\t* d-compiler.cc (Compiler::paintAsType): Likewise.\n-\t* decl.cc (ExprVisitor::visit): Likewise.\n-\t(layout_class_initializer): Likewise.\n-\t* expr.cc (ExprVisitor::lvalue_p): Likewise\n-\t(ExprVisitor::visit): Likewise.\n-\t* types.cc (layout_aggregate_members): Likewise.\n-\n-2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-frontend.cc (eval_builtin): Use toTypeFunction instead of cast.\n-\t* decl.cc (DeclVisitor::visit): Likewise.\n-\t* toir.cc (IRVisitor::visit): Likewise.\n-\t* typeinfo.cc (TypeInfoVisitor::visit): Likewise.\n-\n-2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-builtins.cc (d_eval_constant_expression): Use isTypeXxxx helpers\n-\tinstead of explicit casts.\n-\t(d_build_builtins_module): Likewise.\n-\t* d-codegen.cc (get_array_length): Likewise.\n-\t(identity_compare_p): Likewise.\n-\t(lower_struct_comparison): Likewise.\n-\t(build_array_from_val): Likewise.\n-\t(array_bounds_check): Likewise.\n-\t(get_function_type): Likewise.\n-\t(d_build_call): Likewise.\n-\t* d-compiler.cc (Compiler::paintAsType): Likewise.\n-\t* d-convert.cc (convert_expr): Likewise.\n-\t(convert_for_assignment): Likewise.\n-\t* d-lang.cc (d_classify_record): Likewise.\n-\t(d_build_eh_runtime_type): Likewise.\n-\t* decl.cc (DeclVisitor::visit): Likewise.\n-\t* expr.cc (ExprVisitor::needs_postblit): Likewise.\n-\t(ExprVisitor::needs_dtor): Likewise.\n-\t(ExprVisitor::visit): Likewise.\n-\t* imports.cc (ImportVisitor::visit): Likewise.\n-\t* typeinfo.cc (get_typeinfo_kind): Likewise.\n-\t(TypeInfoVisitor::visit): Likewise.\n-\t(TypeDeclInfoVisitor::visit): Likewise.\n-\t* types.cc (merge_aggregate_types): Likewise.\n-\t(TypeVisitor::visit): Likewise.\n-\n-2020-06-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* expr.cc (ExprVisitor::visit (AssocArrayLiteralExp *)): Fix line\n-\tlengths, no functional change.\n-\t* typeinfo.cc (TypeInfoVisitor::layout_interfaces): Likewise.\n-\t(layout_classinfo_interfaces): Likewise.\n-\n-2020-06-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 13d67c575.\n-\t* d-builtins.cc (build_frontend_type): Update call to\n-\tTypeVector::create.\n-\t* d-frontend.cc (Global::_init): Move setting of errorLimit to ...\n-\t* d-lang.cc (d_init_options): ... here.  Update for new field\n-\tlocation of errorLimit.\n-\t(d_post_options): Likewise.\n-\t* d-port.cc (Port::readwordLE): Update signature.\n-\t(Port::readwordBE): Likewise.\n-\t(Port::readlongLE): Likewise.\n-\t(Port::readlongBE): Likewise.\n-\t* decl.cc (get_symbol_decl): Update for new field types.\n-\n-2020-06-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/95573\n-\t* dmd/MERGE: Merge upstream dmd 5041e56f1.\n-\n-2020-06-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 955b8b36f.\n-\t* expr.cc (ExprVisitor::visit (AndAndExp *)): Rename type to ...\n-\t(ExprVisitor::visit (LogicalExp *)): ... this.  Handle both 'and if'\n-\tand 'or if' expression nodes.\n-\t(ExprVisitor::visit (OrOrExp *)): Remove.\n-\n-2020-06-07  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 73d8e2fec.\n-\t* decl.cc (get_symbol_decl): Use new Prot::Kind enum.\n-\t* modules.cc (get_internal_fn): Likewise.\n-\n-2020-06-07  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 108ca1bcd.\n-\t* d-diagnostic.cc (expand_d_format): Adjust to use extractChars().\n-\t* d-frontend.cc (Loc::toChars): Likewise.\n-\t* d-lang.cc (deps_write): Likewise.\n-\t(d_parse_file): Likewise.\n-\t* decl.cc (d_mangle_decl): Likewise.\n-\t* intrinsics.cc (maybe_set_intrinsic): Likewise.\n-\n-2020-06-07  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd b0df0e982.\n-\t* d-builtins.cc (build_frontend_type): Use VarArg for varargs_p.\n-\t* d-codegen.cc (declaration_type): Call TypeFunction::create with\n-\targument VARARGnone.\n-\t(parameter_type): Likewise.\n-\t(d_build_call): Use new field names and member functions.\n-\t* d-target.cc (Target::cppParameterType): Call TypeFunction::create\n-\twith argument VARARGnone.\n-\t* types.cc (TypeVisitor::visit (TypeFunction *): Use new field names\n-\tand member functions.\n-\n-2020-06-07  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 1831b24ff.\n-\t* d-lang.cc (d_init_options): Remove initialization of updated fields.\n-\t(d_handle_option): Adjust for new field types.\n-\n-2020-06-07  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd cef1e7991.\n-\t* d-lang.cc (d_parse_file): Adjust for new field types.\n-\n-2020-06-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 740f3d1ea.\n-\t* d-lang.cc (d_handle_option): Use new fields to save debug and\n-\tversion levels passed over command-line.\n-\t(d_post_options): Add them to front-end here.\n-\n-2020-06-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd f5638c7b8.\n-\t* d-builtins.cc (d_init_versions): Use new CHECKENABLE enum.\n-\t* d-codegen.cc (array_bounds_check): Likewise.\n-\t(build_frame_type): Likewise.\n-\t(get_frameinfo): Likewise.\n-\t* d-lang.cc (d_init_options): Likewise.\n-\t(d_init_options_struct): Don't initialize x_flag_bounds_check.\n-\t(d_handle_option): Use new CHECKENABLE enum.\n-\t(d_post_options): Likewise.  Set flag_bounds_check here.\n-\t* expr.cc (ExprVisitor::visit(AssertExp *)): Use new CHECKENABLE enum.\n-\n-2020-06-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 56f0a65c4.\n-\t* d-builtins.cc (build_frontend_type): Remove static.\n-\t(d_build_builtins_module): Use target.va_listType() to get front-end\n-\ttype for va_list.\n-\t(d_init_builtins): Move creation of va_list to Target::va_listType.\n-\t* d-codegen.cc (build_interface_binfo): Use new target global.\n-\t(build_vindex_ref): Likewise.\n-\t(identity_compare_p): Likewise.\n-\t* d-ctfloat.cc (CTFloat::parse): Likewise.\n-\t* d-lang.cc (d_init): Likewise.\n-\t* d-port.cc (Port::isFloat32LiteralOutOfRange): Likewise.\n-\t(Port::isFloat64LiteralOutOfRange): Likewise.\n-\t* d-target.cc (define_float_constants): Initialize constants through a\n-\treference, instead of setting globals.\n-\t(Target::_init): Initialize new fields instead of setting globals.\n-\t(Target::va_listType): Build front-end type from va_list_type_node.\n-\t(Target::toCppMangle): Renamed to ...\n-\t(TargetCPP::toMangle): ... this.\n-\t(Target::cppTypeInfoMangle): Renamed to ...\n-\t(TargetCPP::typeInfoMangle): ... this.\n-\t(Target::cppTypeMangle): Renamed to ...\n-\t(TargetCPP::typeMangle): this.\n-\t(Target::cppParameterType): Renamed to ...\n-\t(TargetCPP::parameterType): ... this.  Use target.va_listType() to get\n-\tfront-end type for va_list.\n-\t(Target::cppFundamentalType): Renamed to ...\n-\t(TargetCPP::fundamentalType): ... this.\n-\t* d-tree.h (build_frontend_type): Declare.\n-\t* decl.cc (base_vtable_offset): Use new target global.\n-\t* typeinfo.cc (layout_classinfo_interfaces): Likewise.\n-\t(layout_cpp_typeinfo): Likewise.\n-\t* types.cc (valist_array_p): Use target.va_listType() to get front-end\n-\ttype for va_list.\n-\t(layout_aggregate_type): Use new target global.\n-\n-2020-06-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 6d5bffa54.\n-\t* d-builtins.cc (maybe_set_builtin_1): Update call to\n-\tCondition::include().\n-\t* decl.cc (DeclVisitor::visit(AttribDeclaration *)): Likewise.\n-\t* types.cc (layout_aggregate_members): Likewise.\n-\n-2020-06-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 48d704f08.\n-\t* d-attribs.cc (build_attributes): Use new field name.\n-\t* d-builtins.cc (build_frontend_type): Likewise.\n-\t(maybe_set_builtin_1): Likewise.\n-\t(d_maybe_set_builtin): Likewise.\n-\t* d-codegen.cc (build_interface_binfo): Likewise.\n-\t(identity_compare_p): Likewise.\n-\t(lower_struct_comparison): Likewise.\n-\t(build_struct_comparison): Likewise.\n-\t(d_build_call): Likewise.\n-\t(build_frame_type): Likewise.\n-\t(build_closure): Likewise.\n-\t* d-compiler.cc (Compiler::paintAsType): Likewise.\n-\t(Compiler::loadModule): Likewise.\n-\t* d-incpath.cc (add_globalpaths): Likewise.\n-\t(add_filepaths): Likewise.\n-\t(add_import_paths): Likewise.\n-\t* d-lang.cc (deps_write): Likewise.\n-\t(d_parse_file): Likewise.\n-\t* decl.cc (gcc_attribute_p): Likewise.\n-\t(base_vtable_offset): Likewise.\n-\t(get_vtable_decl): Likewise.\n-\t(build_class_instance): Likewise.\n-\t* expr.cc (class ExprVisitor): Likewise.\n-\t* modules.cc (layout_moduleinfo_fields): Likewise.\n-\t(layout_moduleinfo): Likewise.\n-\t(build_module_tree): Likewise.\n-\t* toir.cc (class IRVisitor): Likewise.\n-\t* typeinfo.cc (class TypeInfoVisitor): Likewise.\n-\t(layout_classinfo_interfaces): Likewise.\n-\t* types.cc (layout_aggregate_members): Likewise.\n-\t(layout_aggregate_type): Likewise.\n-\n-2020-06-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 47ed0330f.\n-\n-2020-06-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* Make-lang.in (D_OBJS): Add d-compiler.o, d-ctfloat.o, d-port.o.\n-\t* d-frontend.cc (Port::memicmp): Move to d-port.cc.\n-\t(Port::strupr): Likewise.\n-\t(Port::isFloat32LiteralOutOfRange): Likewise.\n-\t(Port::isFloat64LiteralOutOfRange): Likewise.\n-\t(Port::readwordLE): Likewise.\n-\t(Port::readwordBE): Likewise.\n-\t(Port::readlongLE): Likewise.\n-\t(Port::readlongBE): Likewise.\n-\t(Port::valcpy): Likewise.\n-\t(CTFloat::fabs): Move to d-ctfloat.cc.\n-\t(CTFloat::ldexp): Likewise.\n-\t(CTFloat::isIdentical): Likewise.\n-\t(CTFloat::isNaN): Likewise.\n-\t(CTFloat::isSNaN): Likewise.\n-\t(CTFloat::isInfinity): Likewise.\n-\t(CTFloat::parse): Likewise.\n-\t(CTFloat::sprint): Likewise.\n-\t(CTFloat::hash): Likewise.\n-\t(Compiler::genCmain): Move to d-compiler.cc.\n-\t(Compiler::paintAsType): Likewise.\n-\t(Compiler::loadModule): Likewise.\n-\t* d-compiler.cc: New file.\n-\t* d-ctfloat.cc: New file.\n-\t* d-port.cc: New file.\n-\n-2020-06-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* decl.cc (DeclVisitor::build_dsymbol): New function.\n-\t(DeclVisitor::visit (TupleDeclaration *)): Use build_dsymbol to\n-\ttraverse AST instead of accept.\n-\t(DeclVisitor::visit (AttribDeclaration *)): Likewise.\n-\t(DeclVisitor::visit (Nspace *)): Likewise.\n-\t(DeclVisitor::visit (TemplateDeclaration *)): Likewise.\n-\t(DeclVisitor::visit (TemplateInstance *)): Likewise.\n-\t(DeclVisitor::visit (TemplateMixin *)): Likewise.\n-\t(DeclVisitor::visit (StructDeclaration *)): Likewise.\n-\t(DeclVisitor::visit (ClassDeclaration *)): Likewise.\n-\t(DeclVisitor::visit (InterfaceDeclaration *)): Likewise.\n-\t(DeclVisitor::visit (VarDeclaration *)): Likewise.\n-\t(build_decl_tree): Likewise.\n-\n-2020-06-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-builtins.cc (build_frontend_type): Handle struct fields with NULL\n-\tDECL_NAME.  Use byte_position to get the real field offset.\n-\n-2020-05-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/94970\n-\t* d-codegen.cc (force_target_expr): Move create_temporary_var\n-\timplementation inline here.\n-\t(create_temporary_var): Remove.\n-\t(maybe_temporary_var): Remove.\n-\t(bind_expr): Remove.\n-\t* d-convert.cc (d_array_convert): Use build_local_temp to generate\n-\ttemporaries, and generate its assignment.\n-\t* d-tree.h (create_temporary_var): Remove.\n-\t(maybe_temporary_var): Remove.\n-\t(d_array_convert): Remove vars argument.\n-\t* expr.cc (ExprVisitor::visit (CatExp *)): Use build_local_temp to\n-\tgenerate temporaries, don't wrap them in a BIND_EXPR.\n-\t(ExprVisitor::visit (NewExp *)): Likewise.\n-\n-2020-04-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* gdc.texi (Options for Linking): Clarify usage of -defaultlib= and\n-\t-debuglib= options.\n-\n-2020-04-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-codegen.cc (d_decl_context): Don't include module in the name of\n-\tclass and struct types that aren't extern(D).\n-\n-2020-04-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/94777\n-\t* d-builtins.cc (build_frontend_type): Set parent for generated\n-\tfields of built-in types.\n-\t* d-codegen.cc (argument_reference_p): Rename to ...\n-\t(parameter_reference_p): ... this.\n-\t(type_passed_as): Rename to ...\n-\t(parameter_type): ... this.  Make TREE_ADDRESSABLE types restrict.\n-\t(d_build_call): Move handling of non-POD types here from ...\n-\t* d-convert.cc (convert_for_argument): ... here.\n-\t* d-tree.h (argument_reference_p): Rename declaration to ...\n-\t(parameter_reference_p): ... this.\n-\t(type_passed_as): Rename declaration to ...\n-\t(parameter_type): ... this.\n-\t* types.cc (TypeVisitor::visit (TypeFunction *)): Update caller.\n-\n-2020-04-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* decl.cc (get_symbol_decl): Set DECL_DECLARED_INLINE_P or\n-\tDECL_UNINLINABLE for declarations with pragma(inline).\n-\t* toir.cc (IRVisitor::visit (GccAsmStatement *)): Set ASM_INLINE_P if\n-\tin function decorated with pragma(inline).\n-\n-2020-04-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* intrinsics.cc (expand_intrinsic_toprec): New function.\n-\t(maybe_expand_intrinsic): Handle toPrec intrinsics.\n-\t* intrinsics.def (TOPRECF, TOPREC, TOPRECL): Add toPrec intrinsics.\n-\n-2020-04-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-spec.cc (need_phobos): Remove.\n-\t(lang_specific_driver): Replace need_phobos with phobos_library.\n-\tReorder -debuglib and -defaultlib to have precedence over libphobos.\n-\t(lang_specific_pre_link): Remove test for need_phobos.\n-\n-2020-04-19  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/94609\n-\t* d-codegen.cc (argument_reference_p): Don't check TREE_ADDRESSABLE.\n-\t(type_passed_as): Build reference type if TREE_ADDRESSABLE.\n-\t* d-convert.cc (convert_for_argument): Build explicit TARGET_EXPR if\n-\tneeded for arguments passed by invisible reference.\n-\t* types.cc (TypeVisitor::visit (TypeStruct *)): Mark all structs that\n-\tare not POD as TREE_ADDRESSABLE.\n-\n-2020-04-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* Make-lang.in (D_FRONTEND_OBJS): Remove d/argtypes.o.\n-\t* d-target.cc (Target::toArgTypes): New function.\n-\n-2020-04-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-spec.cc (LIBDRUNTIME): Remove.\n-\t(LIBDRUNTIME_PROFILE): Remove.\n-\t(lang_specific_driver): Don't link in libgdruntime.\n-\n-2020-04-07  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/94425\n-\t* toir.cc (IRVisitor::visit (GccAsmStatement *)): Set ASM_VOLATILE_P\n-\ton all asm statements.\n-\n-2020-04-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/90136\n-\t* d-attribs.cc: Include dmd/attrib.h.\n-\t(build_attributes): Redeclare as static.\n-\t(apply_user_attributes): New function.\n-\t* d-tree.h (class UserAttributeDeclaration): Remove.\n-\t(build_attributes): Remove.\n-\t(apply_user_attributes): Declare.\n-\t(finish_aggregate_type): Remove attrs argument.\n-\t* decl.cc (get_symbol_decl): Merge declaration prototypes with\n-\tdefinitions.  Use apply_user_attributes.\n-\t* modules.cc (layout_moduleinfo_fields): Remove last argument to\n-\tfinish_aggregate_type.\n-\t* typeinfo.cc (layout_classinfo_interfaces): Likewise.\n-\t* types.cc (layout_aggregate_members): Likewise.\n-\t(finish_aggregate_type): Remove attrs argument.\n-\t(TypeVisitor::visit (TypeEnum *)): Use apply_user_attributes.\n-\t(TypeVisitor::visit (TypeStruct *)): Remove last argument to\n-\tfinish_aggregate_type.  Use apply_user_attributes.\n-\t(TypeVisitor::visit (TypeClass *)): Likewise.\n-\n-2020-03-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc (d_langhook_common_attribute_table): Add always_inline.\n-\t(handle_always_inline_attribute): New function.\n-\n-2020-03-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/94424\n-\t* d-codegen.cc (build_alignment_field): Remove.\n-\t(build_struct_literal): Don't insert alignment padding.\n-\t* expr.cc (ExprVisitor::visit (AssignExp *)): Call memset before\n-\tassigning struct literals.\n-\n-2020-03-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* typeinfo.cc (TypeInfoVisitor::internal_reference): Call\n-\td_comdat_linkage on generated decl.\n-\n-2020-03-22  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/93038\n-\t* d-lang.cc (deps_write): Generate phony targets for content imported\n-\tfiles.\n-\n-2020-03-22  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/93038\n-\t* d-lang.cc (deps_write): Add content imported files to the make\n-\tdependency list.\n-\n-2020-03-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/94240\n-\t* typeinfo.cc (class TypeInfoVisitor): Replace type_ field with decl_.\n-\t(TypeInfoVisitor::TypeInfoVisitor): Set decl_.\n-\t(TypeInfoVisitor::result): Update.\n-\t(TypeInfoVisitor::internal_reference): New function.\n-\t(TypeInfoVisitor::layout_string): Use internal_reference.\n-\t(TypeInfoVisitor::visit (TypeInfoTupleDeclaration *)): Likewise.\n-\t(layout_typeinfo): Construct TypeInfoVisitor with typeinfo decl.\n-\t(layout_classinfo): Likewise.\n-\n-2020-03-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR lto/91027\n-\t* d-tree.h (struct GTY): Add daggregate field.\n-\t(IDENTIFIER_DAGGREGATE): Define.\n-\t(d_mangle_decl): Add declaration.\n-\t* decl.cc (mangle_decl): Remove static linkage, rename to...\n-\t(d_mangle_decl): ...this, update all callers.\n-\t* types.cc (merge_aggregate_types): New function.\n-\t(TypeVisitor::visit (TypeStruct *)): Call merge_aggregate_types, set\n-\tIDENTIFIER_DAGGREGATE and TYPE_CXX_ODR_P.\n-\t(TypeVisitor::visit (TypeClass *)): Likewise.\n-\n-2020-03-18  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* expr.cc (ExprVisitor::visit (CatAssignExp *)): Fix up duplicated\n-\tword issue in a comment.\n-\t* d-target.cc (Target::FPTypeProperties<T>::max): Likewise.\n-\n-2020-03-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/92309\n-\t* types.cc (fixup_anonymous_offset): Don't set DECL_FIELD_OFFSET on\n-\tanonymous fields.\n-\n-2020-03-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/92216\n-\t* decl.cc (make_thunk): Don't set TREE_PUBLIC on thunks if the target\n-\tfunction is external to the current compilation.\n-\n-2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tUpdate copyright years.\n-\n-\t* gdc.texi: Bump @copyrights-d year.\n \f\n-Copyright (C) 2020 Free Software Foundation, Inc.\n+Copyright (C) 2021 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "21e8799b65312e6231a2cd83991f8486fc25eccb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 1, "deletions": 2377, "changes": 2378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=618e665a0f406a7b35f449a54b322d49f8eb62af", "patch": "@@ -1,2381 +1,5 @@\n-2020-12-29  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/97612\n-\t* primary.c (build_actual_constructor): Missing allocatable\n-\tcomponents are set unallocated using EXPR_NULL. Then missing\n-\tcomponents are tested for a default initializer.\n-\n-2020-12-29  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/93833\n-\t* trans-array.c (get_array_ctor_var_strlen): If the character\n-\tlength backend_decl cannot be found, convert the expression and\n-\tuse the string length. Clear up some minor white space issues\n-\tin the rest of the file.\n-\n-2020-12-27  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/97694\n-\tPR fortran/97723\n-\t* check.c (allocatable_check): Select rank temporaries are\n-\tpermitted even though they are treated as associate variables.\n-\t* resolve.c (gfc_resolve_code): Break on select rank as well as\n-\tselect type so that the block os resolved.\n-\t* trans-stmt.c (trans_associate_var): Class associate variables\n-\tthat are optional dummies must use the backend_decl.\n-\n-2020-12-26  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/98022\n-\t* data.c (gfc_assign_data_value): Throw an error for inquiry\n-\treferences. Follow with corrected code that would provide the\n-\texpected result and provides clean error recovery.\n-\n-2020-12-26  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83118\n-\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Make\n-\tsure that class expressions are captured for dummy arguments by\n-\tuse of gfc_get_class_from_gfc_expr otherwise the wrong vptr is\n-\tused.\n-\t* trans-expr.c (gfc_get_class_from_gfc_expr): New function.\n-\t(gfc_get_class_from_expr): If a constant expression is\n-\tencountered, return NULL_TREE;\n-\t(gfc_trans_assignment_1): Deallocate rhs allocatable components\n-\tafter passing derived type function results to class lhs.\n-\t* trans.h : Add prototype for gfc_get_class_from_gfc_expr.\n-\n-2020-12-25  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* data.c (gfc_assign_data_value): Restrict use of\n-\tcreate_character_initializer to constant initializers.\n-\t* trans-expr.c (gfc_conv_initializer): Ensure that character\n-\tinitializer is constant, otherwise fall through to get the same\n-\terror handling as for non-character cases.\n-\n-2020-12-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* trans.c (create_var_debug_raw): Set DECL_ARTIFICIAL\n-\ton variables.\n-\n-2020-12-18  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83118\n-\tPR fortran/96012\n-\t* resolve.c (resolve_ordinary_assign): Generate a vtable if\n-\tnecessary for scalar non-polymorphic rhs's to unlimited lhs's.\n-\t* trans-array.c (get_class_info_from_ss): New function.\n-\t(gfc_trans_allocate_array_storage): Defer obtaining class\n-\telement type until all sources of class exprs are tried. Use\n-\tclass API rather than TREE_OPERAND. Look for class expressions\n-\tin ss->info by calling get_class_info_from_ss. After, obtain\n-\tthe element size for class descriptors. Where the element type\n-\tis unknown, cast the data as character(len=size) to overcome\n-\tunlimited polymorphic problems.\n-\t(gfc_conv_ss_descriptor): Do not fix class variable refs.\n-\t(build_class_array_ref, structure_alloc_comps): Replace code\n-\treplicating the new function gfc_resize_class_size_with_len.\n-\t(gfc_alloc_allocatable_for_assignment): Obtain element size\n-\tfor lhs in cases of deferred characters and class enitities.\n-\tMove code for the element size of rhs to start of block. Clean\n-\tup extraction of class parameters throughout this function.\n-\tAfter the shape check test whether or not the lhs and rhs\n-\telement sizes are the same. Use earlier evaluation of\n-\t'cond_null'. Reallocation of lhs only to happen if size changes\n-\tor element size changes.\n-\t* trans-expr.c (gfc_resize_class_size_with_len): New function.\n-\t(gfc_get_class_from_expr): If a constant expression is\n-\tencountered, return NULL_TREE;\n-\t(trans_scalar_class_assign): New function.\n-\t(gfc_conv_procedure_call): Ensure the vtable is present for\n-\tpassing a non-class actual to an unlimited formal.\n-\t(trans_class_vptr_len_assignment): For expressions of type\n-\tBT_CLASS, extract the class expression if necessary. Use a\n-\tstatement block outside the loop body. Ensure that 'rhs' is\n-\tof the correct type. Obtain rhs vptr in all circumstances.\n-\t(gfc_trans_scalar_assign): Call trans_scalar_class_assign to\n-\tmake maximum use of the vptr copy in place of assignment.\n-\t(trans_class_assignment): Actually do reallocation if needed.\n-\t(gfc_trans_assignment_1): Simplify some of the logic with\n-\t'realloc_flag'. Set 'vptr_copy' for all array assignments to\n-\tunlimited polymorphic lhs.\n-\t* trans.c (gfc_build_array_ref): Call gfc_resize_class_size_\n-\twith_len to correct span for unlimited polymorphic decls.\n-\t* trans.h : Add prototype for gfc_resize_class_size_with_len.\n-\n-2020-12-17  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/92587\n-\t* match.c (gfc_match_assignment): Move gfc_find_vtab call from here ...\n-\t* resolve.c (gfc_resolve_code): ... to here.\n-\n-2020-12-17  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/98307\n-\t* trans-stmt.c (check_forall_dependencies): Extend dependency\n-\tcheck to allocatable components of derived types.\n-\n-2020-12-16  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/98284\n-\t* resolve.c (check_data_variable): Reject DATA elements with the\n-\tALLOCATABLE attribute.\n-\n-2020-12-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/90207\n-\t* invoke.texi: Document -fdebug-aux-vars.\n-\t* lang.opt: Add -fdebug-aux-vars.\n-\t* trans.c (MAX_PREFIX_LEN): New macro.\n-\t(create_var_debug_raw): New function.\n-\t(gfc_create_var_np): Call create_var_debug_raw if\n-\tflag_debug_aux_vars is set.\n-\n-2020-12-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* dump-parse-tree.c (show_array_ref): Also show coarrays.\n-\t(debug): Implement for array reference.\n-\n-2020-12-12  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/98022\n-\t* data.c (gfc_assign_data_value): Handle inquiry references in\n-\tthe data statement object list.\n-\n-2020-12-08  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses, show_omp_node,\n-\tshow_code_node): Handle OMP SCAN.\n-\t* gfortran.h (enum gfc_statement): Add ST_OMP_SCAN.\n-\t(enum): Add OMP_LIST_SCAN_IN and OMP_LIST_SCAN_EX.\n-\t(enum gfc_exec_op): Add EXEC_OMP_SCAN.\n-\t* match.h (gfc_match_omp_scan): New prototype.\n-\t* openmp.c (gfc_match_omp_scan): New.\n-\t(gfc_match_omp_taskgroup): Cleanup.\n-\t(resolve_omp_clauses, gfc_resolve_omp_do_blocks,\n-\tomp_code_to_statement, gfc_resolve_omp_directive): Handle 'omp scan'.\n-\t* parse.c (decode_omp_directive, next_statement,\n-\tgfc_ascii_statement): Likewise.\n-\t* resolve.c (gfc_resolve_code): Handle EXEC_OMP_SCAN.\n-\t* st.c (gfc_free_statement): Likewise.\n-\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_trans_omp_do,\n-\tgfc_split_omp_clauses): Handle 'omp scan'.\n-\n-2020-12-05  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/98016\n-\t* resolve.c (resolve_symbol): Set formal_arg_flag before\n-\tresolving an array spec and restore value afterwards.\n-\n-2020-12-03  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95342\n-\t* decl.c (gfc_match_function_decl): Avoid NULL pointer dereference.\n-\t(gfc_match_subroutine): Likewise.\n-\n-2020-11-30  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/98011\n-\t* scanner.c (skip_free_comments, skip_fixed_comments): If only\n-\t-fopenacc but not -fopenmp is used, ignore OpenMP's conditional\n-\tcompilation sentinels. Fix indentation, use 'else if' for readability.\n-\n-2020-11-30  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/98010\n-\tPR fortran/98013\n-\t* options.c (gfc_post_options): Also imply recursive with\n-\t-fopenacc.\n-\t* trans-decl.c (gfc_generate_function_code): Simplify condition.\n-\n-2020-11-30  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_expr): Use '==' not '=' for '.eq.'.\n-\n-2020-11-29  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* expr.c (simplify_parameter_variable): Fix up character length\n-\tafter copying an array-valued expression.\n-\n-2020-11-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/97454\n-\t* trans-decl.c (gfc_get_extern_function_decl): Add argument\n-\tfnspec.\n-\t* trans-intrinsic.c (MAX_SPEC_ARG): Define.\n-\t(intrinsic_fnspec): New function.\n-\t(ADD_CHAR): Define.\n-\t(specific_intrinsic_symbol): Adjust comment. Pass\n-\tfn spec to gfc_get_extern_function_decl.\n-\t(gfc_conv_intrinsic_funcall): Add ANY, ALL, NORM2, PRODUCT\n-\tand SUM intrnisic. Add FIXME for cshift et al.\n-\t* trans-types.c\t(gfc_get_function_type): Add fnspec argument,\n-\thandle it.\n-\t* trans-types.h (gfc_get_function_type): Add optinal fnspec\n-\targument.\n-\t* trans.h (gfc_get_extern_function_decl): Likewise.\n-\n-2020-11-25  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/85796\n-\t* resolve.c (traverse_data_list): Fix copy&paste errors; catch\n-\tstep=0 in implied do loop.\n-\n-2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR other/97911\n-\t* Make-lang.in (fortran.serial): Change from goal to a variable.\n-\t(.PHONY): Drop fortran.serial and fortran.prev.\n-\t(f951$(exeext)): Depend on $(fortran.serial) rather than\n-\tfortran.serial.\n-\n-2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* Make-lang.in (fortran.serial): New goal.\n-\t(.PHONY): Add fortran.serial fortran.prev.\n-\t(f951$(exeext)): Depend on fortran.prev.  Call LINK_PROGRESS.\n-\n-2020-11-17  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* gfortran.texi: Fix description of GFC_RTCHECK_* to match actual\n-\tcode.\n-\n-2020-11-16  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Generate runtime\n-\tchecking code for status of argument.\n-\n-2020-11-13  Gerg\u00f6 Barany  <gergo@codesourcery.com>\n-\t    Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* lang.opt (fopenacc-kernels): Add.\n-\n-2020-11-12  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* f95-lang.c (ATTR_ALLOC_WARN_UNUSED_RESULT_SIZE_2_NOTHROW_LIST):\n-\tDefine.\n-\t(gfc_init_builtin_functions): Add alloc_size and warn_unused_result\n-\tattributes to __builtin_GOMP_alloc.\n-\t* types.def (BT_PTRMODE): New primitive type.\n-\t(BT_FN_VOID_PTR_PTRMODE, BT_FN_PTR_SIZE_SIZE_PTRMODE): New function\n-\ttypes.\n-\n-2020-11-12  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/97782\n-\t* trans-openmp.c (gfc_trans_oacc_construct, gfc_trans_omp_parallel_do,\n-\tgfc_trans_omp_parallel_do_simd, gfc_trans_omp_parallel_sections,\n-\tgfc_trans_omp_parallel_workshare, gfc_trans_omp_sections\n-\tgfc_trans_omp_single, gfc_trans_omp_task, gfc_trans_omp_teams\n-\tgfc_trans_omp_target, gfc_trans_omp_target_data,\n-\tgfc_trans_omp_workshare): Use code->loc instead of input_location\n-\twhen building the OMP_/OACC_ construct.\n-\n-2020-11-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/97768\n-\t* misc.c (gfc_typename): Use ex->value.character.length only if\n-\tex->expr_type == EXPR_CONSTANT.  If ex->ts.deferred, print : instead\n-\tof length.  If ex->ts.u.cl && ex->ts.u.cl->length == NULL, print *\n-\tinstead of length.  Otherwise if character length is non-constant,\n-\tprint just CHARACTER or CHARACTER(KIND=N).\n-\n-2020-11-10  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses): Handle new reduction enums.\n-\t* gfortran.h (OMP_LIST_REDUCTION_INSCAN, OMP_LIST_REDUCTION_TASK,\n-\tOMP_LIST_IN_REDUCTION, OMP_LIST_TASK_REDUCTION): Add enums.\n-\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_IN_REDUCTION\n-\tand OMP_CLAUSE_TASK_REDUCTION.\n-\t(gfc_match_omp_clause_reduction): Extend reduction handling;\n-\tmoved from ...\n-\t(gfc_match_omp_clauses): ... here. Add calls to it.\n-\t(OMP_TASK_CLAUSES, OMP_TARGET_CLAUSES, OMP_TASKLOOP_CLAUSES):\n-\tAdd OMP_CLAUSE_IN_REDUCTION.\n-\t(gfc_match_omp_taskgroup): Add task_reduction matching.\n-\t(resolve_omp_clauses): Update for new reduction clause changes;\n-\tremove removed nonmonotonic-schedule restrictions.\n-\t(gfc_resolve_omp_parallel_blocks): Add new enums to switch.\n-\t* trans-openmp.c (gfc_omp_clause_default_ctor,\n-\tgfc_trans_omp_reduction_list, gfc_trans_omp_clauses,\n-\tgfc_split_omp_clauses): Handle updated reduction clause.\n-\n-2020-11-10  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/95847\n-\t* trans-decl.c (gfc_get_symbol_decl): Do not (re)set the location\n-\tof an external procedure.\n-\t(build_entry_thunks, generate_coarray_init, create_main_function,\n-\tgfc_generate_function_code): Use fndecl's location in BIND_EXPR.\n-\n-2020-11-09  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/90111\n-\t* parse.c (case_decl): Move ST_OACC_ROUTINE and ST_OACC_DECLARE to ...\n-\t(case_omp_decl): ... here.\n-\t(verify_st_order): Update comment.\n-\n-2020-11-06  Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* openmp.c (oacc_is_parallel, resolve_oacc_params_in_parallel):\n-\tRemove.\n-\t(resolve_oacc_loop_blocks): Don't call the former.\n-\n-2020-11-06  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (gfc_match_oacc_atomic): No longer accept 'update capture'.\n-\n-2020-11-06  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/97652\n-\t* module.c (mio_symbol): Fix symbol name for pdt_type.\n-\n-2020-11-03  Nathan Sidwell  <nathan@acm.org>\n-\n-\t* cpp.c (gfc_cpp_add_dep): Only add dependency if we're recording\n-\tthem.\n-\t(gfc_cpp_init): Likewise for target.\n-\n-2020-11-03  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* decl.c (ext_attr_list): Add EXT_ATTR_DEPRECATED.\n-\t* gfortran.h (ext_attr_id_t): Ditto.\n-\t* gfortran.texi (GCC$ ATTRIBUTES): Document it.\n-\t* resolve.c (resolve_variable, resolve_function,\n-\tresolve_call, resolve_values): Show -Wdeprecated-declarations warning.\n-\t* trans-decl.c (add_attributes_to_decl): Skip those\n-\twith no middle_end_name.\n-\n-2020-11-03  Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\tPR fortran/92793\n-\t* trans-openmp.c (gfc_trans_omp_clauses): More precise location\n-\tinformation for OpenACC 'gang', 'worker', 'vector' clauses with\n-\targument.\n-\n-2020-11-02  Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\tPR fortran/92793\n-\t* trans.c (gfc_set_backend_locus): Use 'gfc_get_location'.\n-\t(gfc_restore_backend_locus): Adjust.\n-\n-2020-11-02  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/97655\n-\t* openmp.c (gfc_match_omp_atomic): Fix mem-order handling;\n-\treject specifying update + capture together.\n-\n-2020-10-30  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses): Handle atomic clauses.\n-\t(show_omp_node): Call it for atomic.\n-\t* gfortran.h (enum gfc_omp_atomic_op): Add GFC_OMP_ATOMIC_UNSET,\n-\tremove GFC_OMP_ATOMIC_SEQ_CST and GFC_OMP_ATOMIC_ACQ_REL.\n-\t(enum gfc_omp_memorder): Replace OMP_MEMORDER_LAST by\n-\tOMP_MEMORDER_UNSET, add OMP_MEMORDER_SEQ_CST/OMP_MEMORDER_RELAXED.\n-\t(gfc_omp_clauses): Add capture and atomic_op.\n-\t(gfc_code): remove omp_atomic.\n-\t* openmp.c (enum omp_mask1): Add atomic, capture, memorder clauses.\n-\t(gfc_match_omp_clauses): Match them.\n-\t(OMP_ATOMIC_CLAUSES): Add.\n-\t(gfc_match_omp_flush): Update for 'last' to 'unset' change.\n-\t(gfc_match_omp_oacc_atomic): Removed and placed content ..\n-\t(gfc_match_omp_atomic): ... here. Update for OpenMP 5 clauses.\n-\t(gfc_match_oacc_atomic): Match directly here.\n-\t(resolve_omp_atomic, gfc_resolve_omp_directive): Update.\n-\t* parse.c (parse_omp_oacc_atomic): Update for struct gfc_code changes.\n-\t* resolve.c (gfc_resolve_blocks): Update assert.\n-\t* st.c (gfc_free_statement): Also call for EXEC_O{ACC,MP}_ATOMIC.\n-\t* trans-openmp.c (gfc_trans_omp_atomic): Update.\n-\t(gfc_trans_omp_flush): Update for 'last' to 'unset' change.\n-\n-2020-10-30  Jan Hubicka  <jh@suse.cz>\n-\n-\t* trans-types.c: Include alias.h\n-\t(gfc_get_array_type_bounds): Set typeless storage.\n-\n-2020-10-27  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* resolve.c (gfc_impure_variable): A dummy argument with the VALUE\n-\tattribute may be redefined without making a procedure impure.\n-\n-2020-10-27  Richard Biener  <rguenther@suse.de>\n-\n-\t* trans-array.c (gfc_get_descriptor_field): New helper.\n-\t(gfc_conv_descriptor_data_get): Use it - drop strange\n-\tREFERENCE_TYPE handling and make sure we don't trigger it.\n-\t(gfc_conv_descriptor_data_addr): Use gfc_get_descriptor_field.\n-\t(gfc_conv_descriptor_data_set): Likewise.\n-\t(gfc_conv_descriptor_offset): Likewise.\n-\t(gfc_conv_descriptor_dtype): Likewise.\n-\t(gfc_conv_descriptor_span): Likewise.\n-\t(gfc_get_descriptor_dimension): Likewise.\n-\t(gfc_conv_descriptor_token): Likewise.\n-\t(gfc_conv_descriptor_subfield): New helper.\n-\t(gfc_conv_descriptor_stride): Use it.\n-\t(gfc_conv_descriptor_lbound): Likewise.\n-\t(gfc_conv_descriptor_ubound): Likewise.\n-\n-2020-10-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/97454\n-\t* gfortran.h (gfc_symbol): Add pass_as_value flag.\n-\t(gfc_copy_formal_args_intr): Add optional argument\n-\tcopy_type.\n-\t(gfc_get_intrinsic_function_symbol): Add prototype.\n-\t(gfc_find_intrinsic_symbol): Add prototype.\n-\t* intrinsic.c (gfc_get_intrinsic_function_symbol): New function.\n-\t(gfc_find_intrinsic_symbol): New function.\n-\t* symbol.c (gfc_copy_formal_args_intr): Add argument. Handle case\n-\twhere the type needs to be copied from the actual argument.\n-\t* trans-intrinsic.c (remove_empty_actual_arguments): New function.\n-\t(specific_intrinsic_symbol): New function.\n-\t(gfc_conv_intrinsic_funcall): Use it.\n-\t(strip_kind_from_actual): Adjust so that the expression pointer\n-\tis set to NULL.\n-\t(gfc_conv_intrinsic_minmaxloc): Likewise.\n-\t(gfc_conv_intrinsic_minmaxval): Adjust removal of dim.\n-\t* trans-types.c (gfc_sym_type): If sym->pass_as_value is set, do\n-\tnot pass by reference.\n-\n-2020-10-22  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.h (enum gfc_omp_memorder): Add.\n-\t(gfc_omp_clauses): Use it.\n-\t* openmp.c (gfc_match_omp_flush): Match memorder clauses.\n-\t* trans-openmp.c (gfc_trans_omp_flush): Handle them.\n-\t(gfc_trans_omp_directive): Update call.\n-\n-2020-10-21  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/45516\n-\t* class.c: Add _deallocate to the vtable documentation\n-\tcomment.\n-\n-2020-10-16  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95979\n-\t* expr.c (gfc_check_init_expr): Fix check of return code from\n-\tgfc_intrinsic_func_interface.\n-\t* intrinsic.c (gfc_intrinsic_func_interface): Add further attempt\n-\tof simplification of elemental intrinsics with array arguments.\n-\t* iresolve.c (gfc_resolve_index_func): Keep optional KIND argument\n-\tfor simplification of elemental use of INDEX.\n-\n-2020-10-15  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\t* trans-decl.c (gfc_build_builtin_function_decls): Fix the coarray fndecls.\n-\n-2020-10-14  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/97390\n-\t* scanner.c (load_line): Fix line-truncation warning for !$acc\n-\tand !gcc$ in free-form source code.\n-\n-2020-10-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95614\n-\t* decl.c (gfc_get_common): Use gfc_match_common_name instead\n-\tof match_common_name.\n-\t* decl.c (gfc_bind_idents): Use gfc_match_common_name instead\n-\tof match_common_name.\n-\t* match.c : Rename match_common_name to gfc_match_common_name.\n-\t* match.c (gfc_match_common): Use gfc_match_common_name instead\n-\tof match_common_name.\n-\t* match.h : Rename match_common_name to gfc_match_common_name.\n-\t* resolve.c (resolve_common_vars): Check each symbol in a\n-\tcommon block has a global symbol.  If there is a global symbol\n-\tissue an error if the symbol type is a module or a program.\n-\n-2020-10-12  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/96099\n-\t* decl.c (gfc_match_implicit): Check for numeric and logical\n-\ttypes.\n-\n-2020-10-07  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/47469\n-\t* trans-expr.c (arrayfunc_assign_needs_temporary): Tidy detection\n-\tof pointer and allocatable functions.\n-\n-2020-10-04  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/97272\n-\t* trans-intrinsic.c (strip_kind_from_actual): Helper function for\n-\tremoval of KIND argument.\n-\t(gfc_conv_intrinsic_minmaxloc): Ignore KIND argument here, as it\n-\tis treated elsewhere.\n-\n-2020-10-02  Jan Hubicka  <hubicka@ucw.cz>\n-\n-\t* trans-decl.c (gfc_build_library_function_decl_with_spec): Verify\n-\tfnspec.\n-\t(gfc_build_intrinsic_function_decls): Update fnspecs.\n-\t(gfc_build_builtin_function_decls): Update fnspecs.\n-\t* trans-io.c (gfc_build_io_library_fndecls): Update fnspecs.\n-\t* trans-types.c (create_fn_spec): Update fnspecs.\n-\n-2020-09-30  Jan Hubicka  <jh@suse.cz>\n-\n-\t* trans-decl.c (gfc_build_intrinsic_function_decls): Add traling dots\n-\tto spec strings so they match the number of parameters; do not use\n-\tR and W for non-pointer parameters. Drop pointless specifier on\n-\tcaf_stop_numeric and caf_get_team.\n-\n-2020-09-30  Jan Hubicka  <hubicka@ucw.cz>\n-\n-\t* trans-io.c (gfc_build_io_library_fndecls): Add trailing dots so\n-\tlength of spec string matches number of arguments.\n-\n-2020-09-30  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/97242\n-\t* expr.c (gfc_is_not_contiguous): Fix check.\n-\t(gfc_check_pointer_assign): Use it.\n-\n-2020-09-30  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/97045\n-\t* trans-array.c (gfc_conv_array_ref): Make sure that the class\n-\tdecl is passed to build_array_ref in the case of unlimited\n-\tpolymorphic entities.\n-\t* trans-expr.c (gfc_conv_derived_to_class): Ensure that array\n-\trefs do not preceed the _len component. Free the _len expr.\n-\t* trans-stmt.c (trans_associate_var): Reset 'need_len_assign'\n-\tfor polymorphic scalars.\n-\t* trans.c (gfc_build_array_ref): When the vptr size is used for\n-\tspan, multiply by the _len field of unlimited polymorphic\n-\tentities, when non-zero.\n-\n-2020-09-30  Tom de Vries  <tdevries@suse.de>\n-\n-\t* f95-lang.c (gfc_init_builtin_functions):  Update\n-\ttargetm.libc_has_function call.\n-\n-2020-09-28  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tRevert:\n-\t2020-09-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95614\n-\t* decl.c (gfc_get_common): Use gfc_match_common_name instead\n-\tof match_common_name.\n-\t* decl.c (gfc_bind_idents): Use gfc_match_common_name instead\n-\tof match_common_name.\n-\t* match.c : Rename match_common_name to gfc_match_common_name.\n-\t* match.c (gfc_match_common): Use gfc_match_common_name instead\n-\tof match_common_name.\n-\t* match.h : Rename match_common_name to gfc_match_common_name.\n-\t* resolve.c (resolve_common_vars): Check each symbol in a\n-\tcommon block has a global symbol.  If there is a global symbol\n-\tissue an error if the symbol type is known as is not a common\n-\tblock name.\n-\n-2020-09-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95614\n-\t* decl.c (gfc_get_common): Use gfc_match_common_name instead\n-\tof match_common_name.\n-\t* decl.c (gfc_bind_idents): Use gfc_match_common_name instead\n-\tof match_common_name.\n-\t* match.c : Rename match_common_name to gfc_match_common_name.\n-\t* match.c (gfc_match_common): Use gfc_match_common_name instead\n-\tof match_common_name.\n-\t* match.h : Rename match_common_name to gfc_match_common_name.\n-\t* resolve.c (resolve_common_vars): Check each symbol in a\n-\tcommon block has a global symbol.  If there is a global symbol\n-\tissue an error if the symbol type is known as is not a common\n-\tblock name.\n-\n-2020-09-24  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/96495\n-\t* trans-expr.c (gfc_conv_procedure_call): Take the deallocation\n-\tof allocatable result components of a scalar result outside the\n-\tscalarization loop. Find and use the stored result.\n-\n-2020-09-21  Harald Anlauf  <anlauf@gmx.de>\n-\t    Paul Thomas   <pault@gcc.gnu.org>\n-\n-\t* iresolve.c (gfc_resolve_mvbits): Remove unneeded conversion of\n-\tFROMPOS, LEN and TOPOS arguments to fit a C int.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_mvbits): Add inline\n-\texpansion of MVBITS intrinsic elemental subroutine and add code\n-\tfor runtime argument checking.\n-\t(gfc_conv_intrinsic_subroutine): Recognise MVBITS intrinsic, but\n-\tdefer handling to gfc_trans_call.\n-\t* trans-stmt.c (replace_ss):\n-\t(gfc_trans_call): Adjust to handle inline expansion, scalarization\n-\tof intrinsic subroutine MVBITS in gfc_conv_intrinsic_mvbits.\n-\t* trans.h (gfc_conv_intrinsic_mvbits): Add prototype for\n-\tgfc_conv_intrinsic_mvbits.\n-\n-2020-09-19  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* interface.c (gfc_compare_actual_formal): Add assertion after\n-\tmain processing loop to silence maybe-uninitialized error.\n-\n-2020-09-19  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* symbol.c (gfc_check_conflict): Allow ELEMENTAL RECURSIVE\n-\tprocedure prefix for -std=f2018.\n-\n-2020-09-17  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/96041\n-\tPR fortran/93423\n-\t* decl.c (gfc_match_submod_proc): Avoid later double-free\n-\tin the error case.\n-\n-2020-09-16  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/97061\n-\t* trans-openmp.c (gfc_trans_omp_do): Handle simd with (last)private.\n-\n-2020-09-15  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/96668\n-\t* trans.h (gfc_omp_finish_clause): Add bool openacc arg.\n-\t* trans-openmp.c (gfc_omp_finish_clause): Ditto. Use\n-\tGOMP_MAP_ALWAYS_POINTER with PSET for pointers.\n-\t(gfc_trans_omp_clauses): Like the latter and also if the always\n-\tmodifier is used.\n-\n-2020-09-09  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/95109\n-\tPR fortran/94690\n-\t* resolve.c (gfc_resolve_code): Also call\n-\tgfc_resolve_omp_parallel_blocks for 'distribute parallel do (simd)'.\n-\t* openmp.c (gfc_resolve_omp_parallel_blocks): Handle it.\n-\t(gfc_resolve_do_iterator): Remove special code for SIMD, which is\n-\tnot needed.\n-\t* trans-openmp.c (gfc_trans_omp_target): For TARGET_PARALLEL_DO_SIMD,\n-\tcall simd not do processing function.\n-\n-2020-09-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* intrinsic.texi: Fix description of FINDLOC result.\n-\n-2020-09-07  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* trans-intrinsic.c (build_round_expr): Use temporary with\n-\tappropriate kind for conversion before rounding to nearest\n-\tinteger when the result precision is 128 bits.\n-\n-2020-09-07  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/96896\n-\t* resolve.c (get_temp_from_expr): Also reset proc_pointer +\n-\tuse_assoc attribute.\n-\t(resolve_ptr_fcn_assign): Use information from the LHS.\n-\n-2020-09-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* trans-types.c (gfc_get_derived_type): Fix argument types.\n-\n-2020-09-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* resolve.c (resolve_select_type): Provide a formal arg list.\n-\n-2020-09-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* trans-types.c (gfc_get_ppc_type): Add comment.\n-\n-2020-09-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* trans-types.c (gfc_get_ppc_type): Fix function arg types.\n-\n-2020-09-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/96947\n-\t* trans-stmt.c (gfc_trans_fail_image): caf_fail_image\n-\texpects no argument.\n-\n-2020-09-02  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/96859\n-\t* check.c (gfc_boz2real, gfc_boz2int): When clearing first two bits,\n-\tchange also '2' to '0' and '3' to '1' rather than just handling '4'\n-\tthrough '7'.\n-\n-2020-09-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95398\n-\t* resolve.c (resolve_select_type): Add check for BT_CLASS\n-\ttype before using the CLASS_DATA macro which will have a\n-\tNULL pointer to derive components if it isn't BT_CLASS.\n-\n-2020-08-30  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/96728\n-\t* module.c (module_peek_char): Peek ahead function.\n-\t(parse_integer): Add code for parsing signed integers.\n-\t(parse_atom): Add code to handle signed integers.\n-\t(peek_atom): Add code to handle signed integers.\n-\n-2020-08-30  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/96727\n-\t* expr.c (gfc_check_init_expr): Add default error message for the AS_ASSUMED_RANK case.\n-\n-2020-08-30  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/96726\n-\t* expr.c (check_references): Change different relational operator\n-\tto less-than operator to avoid infinite loop.\n-\n-2020-08-30  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/95352\n-\t* simplify.c (simplify_bound_dim): Add check for NULL pointer\n-\tbefore trying to access structure member.\n-\n-2020-08-30  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/94110\n-\t* interface.c (gfc_compare_actual_formal): Add code to also raise\n-\tthe actual argument cannot be an assumed-size array error when the\n-\tdummy arguments are deferred-shape or assumed-rank pointer.\n-\n-2020-08-28  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/94672\n-\t* trans-array.c (gfc_trans_g77_array): Check against the parm decl and\n-\tset the nonparm decl used for the is-present check to NULL if absent.\n-\n-2020-08-28  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/96624\n-\t* simplify.c (gfc_simplify_reshape): Detect zero shape and\n-\tclear index if found.\n-\n-2020-08-27  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95882\n-\t* decl.c (char_len_param_value): Check gfc_seen_div0 and\n-\tif it is set return MATCH_ERROR.\n-\n-2020-08-27  Martin Liska  <mliska@suse.cz>\n-\n-\t* trans-openmp.c (gfc_trans_omp_do): Set exact argument of a vector\n-\tgrowth function to true.\n-\n-2020-08-26  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.h (enum gfc_omp_device_type): New.\n-\t(symbol_attribute, gfc_omp_clauses, gfc_common_head): Use it.\n-\t* module.c (enum ab_attribute): Add AB_OMP_DEVICE_TYPE_HOST,\n-\tAB_OMP_DEVICE_TYPE_NOHOST and AB_OMP_DEVICE_TYPE_ANY.\n-\t(attr_bits, mio_symbol_attribute): Handle it.\n-\t(load_commons, write_common_0): Handle omp_device_type flag.\n-\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_DEVICE_TYPE\n-\t(OMP_DECLARE_TARGET_CLAUSES): Likewise.\n-\t(gfc_match_omp_clauses): Match 'device_type'.\n-\t(gfc_match_omp_declare_target): Handle it.\n-\t* trans-common.c (build_common_decl): Write device-type clause.\n-\t* trans-decl.c (add_attributes_to_decl): Likewise.\n-\n-2020-08-23  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/96737\n-\t* trans-types.c (gfc_get_derived_type): Derived types that are\n-\tused in submodules are not compatible with TYPE_CANONICAL from\n-\tany of the global namespaces.\n-\n-2020-08-20  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/96100\n-\tPR fortran/96101\n-\t* trans-array.c (get_array_charlen): Tidy up the evaluation of\n-\tthe string length for array constructors. Avoid trailing array\n-\treferences. Ensure string lengths of deferred length components\n-\tare set. For parentheses operator apply string  length to both\n-\tthe primary expression and the enclosed expression.\n-\n-2020-08-20  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/94958\n-\t* trans-array.c (gfc_bcast_alloc_comp): Use the correct variable.\n-\n-2020-08-20  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (gfc_match_omp_clauses): Re-order 'if' clause pasing\n-\tto avoid creating spurious symbols.\n-\n-2020-08-18  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* check.c (check_rest): Reject MIN/MAX character arguments of\n-\tdifferent kind.\n-\t* simplify.c (min_max_choose): The simplification result shall\n-\thave the highest kind value of the arguments.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax): Choose type and\n-\tkind of intermediate by looking at all arguments, not the result.\n-\n-2020-08-17  Martin Liska  <mliska@suse.cz>\n-\n-\t* openmp.c (resolve_omp_clauses): Add static assert\n-\tfor OMP_LIST_NUM and size of clause_names array.\n-\tRemove check that is always true.\n-\n-2020-08-17  Martin Liska  <mliska@suse.cz>\n-\n-\t* openmp.c (resolve_omp_clauses): Add NONTEMPORAL to clause\n-\tnames.\n-\n-2020-08-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/93671\n-\t* trans-array.c (structure_alloc_comps): Keep caf-mode when applying to\n-\tcomponents; get the caf_token correctly for allocated scalar components.\n-\n-2020-08-13  Matthew Krupcale  <mkrupcale@matthewkrupcale.com>\n-\n-\tPR fortran/96595\n-\t* invoke.texi: Fix typos.\n-\n-2020-08-12  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.h: Add OMP_LIST_NONTEMPORAL.\n-\t* dump-parse-tree.c (show_omp_clauses): Dump it\n-\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_NOTEMPORAL.\n-\t(OMP_SIMD_CLAUSES): Add it.\n-\t(gfc_match_omp_clauses): Match nontemporal clause.\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Process\n-\tnontemporal clause.\n-\n-2020-08-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/96556\n-\t* frontend-passes.c (doloop_contained_function_call):\n-\tDo not dereference a NULL pointer for value.function.esym.\n-\n-2020-08-10  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/96312\n-\t* trans-expr.c (fcncall_realloc_result): Only compare shapes if\n-\tlhs was allocated..\n-\n-2020-08-10  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/96102\n-\t* resolve.c (check_host_association): Replace the gcc_assert\n-\twith an error for internal procedures.\n-\n-2020-08-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/96469\n-\t* frontend-passes.c (doloop_contained_function_call): New\n-\tfunction.\n-\t(doloop_contained_procedure_code): New function.\n-\t(CHECK_INQ): Macro for inquire checks.\n-\t(doloop_code): Invoke doloop_contained_procedure_code and\n-\tdoloop_contained_function_call if appropriate.\n-\t(do_intent): Likewise.\n-\n-2020-08-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (resolve_omp_do): Detect not perfectly\n-\tnested loop with innermost collapse.\n-\n-2020-08-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* trans-openmp.c (gfc_trans_omp_do): Fix 'lastprivate(conditional:'.\n-\n-2020-08-03  Julian Brown  <julian@codesourcery.com>\n-\t    Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Don't create present/release\n-\tmappings for array descriptors.\n-\n-2020-08-03  Martin Jambor  <mjambor@suse.cz>\n-\n-\t* f95-lang.c (gfc_init_builtin_functions): Remove processing of\n-\thsa-builtins.def.\n-\n-2020-08-03  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfc-internals.texi: Fix typos.\n-\t* gfortran.texi: Likewise.\n-\t* intrinsic.texi: Likewise.\n-\t* invoke.texi: Likewise.\n-\n-2020-08-02  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR target/96320\n-\t* interface.c (gfc_check_dummy_characteristics): If a module\n-\tprocedure arrives with assumed shape in the interface and\n-\tdeferred shape in the procedure itself, update the latter and\n-\tcopy the lower bounds.\n-\n-2020-08-02  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/96325\n-\t* primary.c (gfc_match_varspec): In the case that a component\n-\treference is added to an intrinsic type component, emit the\n-\terror message in this function.\n-\n-2020-07-29  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses): Handle order(concurrent).\n-\t* gfortran.h (struct gfc_omp_clauses): Add order_concurrent.\n-\t* openmp.c (enum omp_mask1, OMP_DO_CLAUSES, OMP_SIMD_CLAUSES):\n-\tAdd OMP_CLAUSE_ORDER.\n-\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_split_omp_clauses):\n-\tHandle order(concurrent) clause.\n-\n-2020-07-29  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (resolve_omp_clauses): Permit 'omp target data' without\n-\tmap if use_device_{addr,ptr} is present.\n-\n-2020-07-29  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/96319\n-\t* intrinsic.c (gfc_convert_type_warn):  Add check for\n-\tLOGICAL type so that warnings are not output.\n-\n-2020-07-29  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* module.c (mio_symbol_attribute): Fix indent of previous\n-\tcommit.\n-\n-2020-07-29  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/53298\n-\t* trans-array.c (gfc_walk_array_ref): If ref->ss.end is set\n-\tcall gfc_get_scalar_ss.\n-\n-2020-07-29  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.h (enum gfc_statement): Add ST_OMP_REQUIRES.\n-\t(enum gfc_omp_requires_kind): New.\n-\t(enum gfc_omp_atomic_op): Add GFC_OMP_ATOMIC_ACQ_REL.\n-\t(struct gfc_namespace): Add omp_requires and omp_target_seen.\n-\t(gfc_omp_requires_add_clause,\n-\t(gfc_check_omp_requires): New.\n-\t* match.h (gfc_match_omp_requires): New.\n-\t* module.c (enum ab_attribute, attr_bits): Add omp requires clauses.\n-\t(mio_symbol_attribute): Read/write them.\n-\t* openmp.c (gfc_check_omp_requires, (gfc_omp_requires_add_clause,\n-\tgfc_match_omp_requires): New.\n-\t(gfc_match_omp_oacc_atomic): Use requires's default mem-order.\n-\t* parse.c (decode_omp_directive): Match requires, set omp_target_seen.\n-\t(gfc_ascii_statement): Handle ST_OMP_REQUIRES.\n-\t* trans-openmp.c (gfc_trans_omp_atomic): Handle GFC_OMP_ATOMIC_ACQ_REL.\n-\n-2020-07-27  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (gfc_resolve_omp_directive): Remove NULL check\n-\tfor clauses in EXEC_OMP_CRITICAL as it no longer can be NULL.\n-\n-2020-07-23  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.h (gfc_omp_namelist): Add lastprivate_conditional.\n-\t* openmp.c (gfc_match_omp_clauses): Handle 'conditional:'\n-\tmodifier of 'lastprivate'.\n-\t* trans-openmp.c (gfc_omp_clause_default_ctor): Don't assert\n-\ton OMP_CLAUSE__CONDTEMP_ and other OMP_*TEMP_.\n-\t(gfc_trans_omp_variable_list): Handle lastprivate_conditional.\n-\n-2020-07-23  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* intrinsic.texi (OMP_LIB_KINDS): Add omp_depend_kind.\n-\n-2020-07-23  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.texi (Standards): Update URL; state that OpenMP 4.5\n-\tis supported and 5.0 is partially.\n-\t* intrinsic.texi (OpenMP Modules): Refer also to OpenMP 5.0;\n-\t(OMP_LIB): Add missing derived type and new named constants.\n-\n-2020-07-22  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.h (enum gfc_omp_if_kind): Add OMP_IF_CANCEL and OMP_IF_SIMD.\n-\t* openmp.c (OMP_SIMD_CLAUSES): Add OMP_CLAUSE_IF.\n-\t(gfc_match_omp_clauses, resolve_omp_clauses): Handle 'if (simd/cancel:'.\n-\t* dump-parse-tree.c (show_omp_clauses): Likewise.\n-\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_trans_omp_cancel,\n-\t(gfc_split_omp_clauses): Likewise.\n-\n-2020-07-22  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (gfc_match_omp_critical): Fix handling hints; permit\n-\thint clause without named critical.\n-\t(resolve_omp_clauses): Require nonnegative constant integer\n-\tfor the hint clause.\n-\t(gfc_resolve_omp_directive): Check for no name but\n-\tnonzero value for hint clause.\n-\t* parse.c (parse_omp_structured_block): Fix same-name check\n-\tfor critical.\n-\t* trans-openmp.c (gfc_trans_omp_critical): Handle hint clause properly.\n-\n-2020-07-21  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/89574\n-\t* trans-decl.c (gfc_get_extern_function_decl): Check whether a\n-\tsymbol belongs to a different module.\n-\n-2020-07-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/96220\n-\t* dump-parse-tree.c (get_c_type_name): Always use the entries from\n-\tc_interop_kinds_table to find the correct C type.\n-\n-2020-07-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/96018\n-\t* frontend-passes.c (gfc_check_externals): Adjust formatting.\n-\t(implicit_pure_call): New function.\n-\t(implicit_pure_expr): New function.\n-\t(gfc_fix_implicit_pure): New function.\n-\t* gfortran.h (gfc_fix_implicit_pure): New prototype.\n-\t* parse.c (translate_all_program_units): Call gfc_fix_implicit_pure.\n-\n-2020-07-18  David Edelsohn  <dje.gcc@gmail.com>\n-\n-\t* check.c (gfc_invalid_boz): Mark hint for translation using _().\n-\n-2020-07-16  Julian Brown  <julian@codesourcery.com>\n-\t    Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Rework OpenACC\n-\tattach/detach handling for arrays with descriptors.\n-\n-2020-07-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95612\n-\t* expr.c (gfc_check_pointer_assigb): Output an error if\n-\trvalue is a zero sized array or output an error if rvalue\n-\tdoesn't have a symbol tree.\n-\n-2020-07-14  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (gfc_match_omp_clauses): Match also derived-type\n-\tcomponent refs in OMP_CLAUSE_MAP.\n-\t(resolve_omp_clauses): Resolve those.\n-\t* trans-openmp.c (gfc_trans_omp_array_section, gfc_trans_omp_clauses):\n-\tHandle OpenMP structure-element mapping.\n-\t(gfc_trans_oacc_construct, gfc_trans_oacc_executable_directive,\n-\t(gfc_trans_oacc_combined_directive, gfc_trans_oacc_declare): Update\n-\tadd openacc=true in gfc_trans_omp_clauses call.\n-\n-2020-07-14  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/67311\n-\t* trans-openmp.c (gfc_has_alloc_comps): Return false also for\n-\tpointers to arrays.\n-\n-2020-07-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/96038\n-\t* decl.c (add_init_expr_sym):  For a symbol that is a\n-\tparameter accept an initialisation if it does not have a\n-\tvalue otherwise output a error and reject.\n-\n-2020-07-13  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/45337\n-\t* resolve.c (resolve_fl_variable): Remove type and intent\n-\tchecks from the check for dummy.\n-\n-2020-07-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95981\n-\t* check.c (dim_rank_check): Allow NULL references in call to\n-\tgfc_find_array_ref and return false if no reference is found.\n-\n-2020-07-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/96073\n-\t* frontend-passes.c (check_externals_procedure):  Add locus\n-\tinformation for new_sym.\n-\t* interface.c (gfc_check_dummy_characteristics): Do not warn\n-\tabout INTENT for artificially generated variables.\n-\n-2020-07-10  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95980\n-\t* class.c (gfc_add_component_ref, gfc_build_class_symbol):\n-\tAdd checks for NULL pointer dereference.\n-\t* primary.c (gfc_variable_attr): Likewise.\n-\t* resolve.c (resolve_variable, resolve_assoc_var)\n-\t(resolve_fl_var_and_proc, resolve_fl_variable_derived)\n-\t(resolve_symbol): Likewise.\n-\n-2020-07-10  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/96086\n-\t* match.c (gfc_match_select_rank): Catch NULL pointer\n-\tdereference.\n-\t* resolve.c (resolve_assoc_var): Catch NULL pointer dereference\n-\tthat may occur after an illegal declaration.\n-\n-2020-07-09  Julian Brown  <julian@codesourcery.com>\n-\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Use 'inner' not 'decl' for\n-\tderived type members which themselves have derived types.\n-\n-2020-07-08  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/96085\n-\t* resolve.c (gfc_resolve_code): Check whether assign target is a\n-\tparameter.\n-\n-2020-07-06  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95980\n-\t* match.c (copy_ts_from_selector_to_associate, build_class_sym):\n-\tDistinguish between unlimited polymorphic and ordinary variables\n-\tto avoid NULL pointer dereference.\n-\t* resolve.c (resolve_select_type):\n-\tDistinguish between unlimited polymorphic and ordinary variables\n-\tto avoid NULL pointer dereference.\n-\n-2020-07-06  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95709\n-\t* resolve.c (gfc_resolve_code): Check for valid arguments to\n-\tassigned GOTO.\n-\n-2020-07-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/27318\n-\t* frontend-passes.c (check_against_globals): New function.\n-\t(gfc_check_externals): Split; also invoke check_against_globals\n-\tvia gfc_traverse_ns.\n-\t(gfc_check_externals0): Recursive part formerly in\n-\tgfc_check_externals.\n-\t* resolve.c (resolve_global_procedure): Set sym->error on\n-\tinterface mismatch.\n-\t* symbol.c (ambiguous_symbol): Check for, and set sym->error.\n-\n-2020-07-02  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/93423\n-\t* resolve.c (resolve_symbol): Avoid NULL pointer dereference.\n-\n-2020-07-02  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/93337\n-\t* class.c (gfc_find_derived_vtab): Punt if name is not set.\n-\n-2020-07-02  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/52279\n-\t* check.c (gfc_invalid_boz):  Change array declaration for\n-\thint into a pointer.\n-\n-2020-07-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95584\n-\t* interface.c (generic_correspondence): Only use the pointer\n-\tto a symbol if exists.\n-\n-2020-07-01  David Edelsohn  <dje.gcc@gmail.com>\n-\n-\t* check.c (gfc_invalid_boz): Fix bootstrap. Revert\n-\tMark hint for translation using _().\n-\n-2020-07-01  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/52279\n-\t* arith.c (reduce_binary_aa): Mark for translation the string\n-\tparameter to gfc_check_conformance with G_().\n-\t* check.c (gfc_invalid_boz): Mark hint for translation using\n-\t_().  (gfc_check_achar): Mark for translation the message\n-\tparameter to gfc_invalid_boz using G_().  (gfc_check_char):\n-\tMark for translation the message parameter to gfc_invalid_boz\n-\tusing G_().  (gfc_check_complex): Mark for translation the\n-\tmessage parameter to gfc_invalid_boz using G_().\n-\t(gfc_check_float): Mark for translation the message\n-\tparameter to gfc_invalid_boz using G_().  (check_rest): Mark\n-\tfor translation the string parameter to gfc_check_conformance\n-\twith _().  (gfc_check_minloc_maxloc): Mark for translation\n-\tthe string parameter to gfc_check_conformance with _().\n-\t(gfc_check_findloc): Mark for translation the string parameter\n-\tto gfc_check_conformance with _().  (check_reduction): Mark\n-\tfor translation the string parameter to gfc_check_conformance\n-\twith _().  (gfc_check_pack): Mark for translation the string\n-\tparameter to gfc_check_conformance with _().\n-\t* decl.c (match_old_style_init): Mark for translation the\n-\tmessage parameter to gfc_invalid_boz using G_().\n-\t* expr.c (gfc_check_assign): Mark for translation the string\n-\tparameter to gfc_check_conformance with _().\n-\t* intrinsic.c (check_specific): Mark for translation the string\n-\tparameter to gfc_check_conformance with _().\n-\t(gfc_check_intrinsic_standard): Mark symstd_msg strings for\n-\ttranslation using G_(). No need to mark symstd_msg for\n-\ttranslation in call to gfc_warning or when setting symstd.\n-\t* io.c (check_open_constraints):  Mark strings for translation\n-\tusing G_() in all calls to warn_or_error.  (match_io_element):\n-\tMark for translation the message parameter to gfc_invalid_boz\n-\tusing G_().\n-\t* primary.c (match_boz_constant): Mark for translation the\n-\tmessage parameter to gfc_invalid_boz using G_().\n-\t* resolve.c (resolve_elemental_actual):  Mark for translation\n-\tthe string parameter to gfc_check_conformance with _().\n-\t(resolve_operator):  Mark for translation the string parameter\n-\tto gfc_check_conformance with _().  Mark translation strings\n-\tassigned to msg using G_() for use in a call to cfg_warning.\n-\n-2020-07-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95446\n-\t* resolve.c (resolve_elemental_actual): Add code to check for\n-\tnon-optional argument of the same rank.  Revise warning message\n-\tto refer to the Fortran 2018 standard.\n-\n-2020-07-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95829\n-\t* decl.c (gfc_match_decl_type_spec): Compare with \"* ) \" instead\n-\tof \"*)\".\n-\n-2020-06-30  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/88379\n-\t* resolve.c (resolve_assoc_var): Avoid NULL pointer dereference.\n-\n-2020-06-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/95355\n-\t* gfortran.h (gfc_typename): Add optional argument for_hash.\n-\t* misc.c (gfc_typename): When for_hash is true, just retur\n-\t  CHARACTER(kind).\n-\t* class.c (gfc_intrinsic_hash_value): Call gfc_typename with\n-\t  for_hash = true.\n-\n-2020-06-29  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95978\n-\t* decl.c (gfc_match_data): Avoid NULL pointer dereference.\n-\n-2020-06-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/95743\n-\t* trans-decl.c (gfc_generate_function_code): Do not generate\n-\trecursion check for compiler-generated procedures.\n-\n-2020-06-29  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/71706\n-\t* trans-stmt.c (gfc_trans_sync): Do proper kind conversion in\n-\tbounds-checking code.\n-\n-2020-06-28  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95340\n-\t* match.c (gfc_match_select_rank): Do not dereference NULL pointer.\n-\n-2020-06-28  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95880\n-\t* symbol.c (gfc_add_type): If sym->ns->proc_name is set, use it,\n-\totherwise fall back to sym->name.\n-\n-2020-06-27  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95881\n-\t* resolve.c (resolve_symbol): Avoid NULL pointer dereference.\n-\n-2020-06-25  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95828\n-\t* match.c (select_rank_set_tmp): Enlarge internal buffer used in\n-\tgenerating a mangled name.\n-\t* resolve.c (resolve_select_rank): Likewise.\n-\n-2020-06-25  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95826\n-\t* decl.c (gfc_match_decl_type_spec): Replace a fixed size\n-\tbuffer by a pointer and reallocate if necessary.\n-\n-2020-06-25  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/95837\n-\t* resolve.c (gfc_resolve_substring_charlen): Remove\n-\tbogus ts.kind setting for the expression.\n-\n-2020-06-25  Tobias Burnus  <tobias@codesourcery.com>\n-\t    Kwok Cheung Yeung  <kcy@codesourery.com>\n-\n-\tPR fortran/95869\n-\t* trans-openmp.c (gfc_trans_omp_target): Use correct scoping block.\n-\n-2020-06-25  Kwok Cheung Yeung  <kcy@codesourcery.com>\n-\n-\t* trans-openmp.c (gfc_split_omp_clauses): Add if clause\n-\tto target and simd sub-constructs.\n-\n-2020-06-24  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95827\n-\t* iresolve.c (gfc_get_string): Enlarge internal buffer used in\n-\tgenerating the mangled name.\n-\n-2020-06-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/95812\n-\t* dependency.c (ref_same_as_full_array): Handle case of AR_FULL\n-\tvs. AR_FULL.\n-\n-2020-06-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95586\n-\t* decl.c (gfc_match_implicit): Only perform else branch if\n-\tthe type spect is not BT_DERIVED.\n-\n-2020-06-22  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95708\n-\t* intrinsic.c (add_functions): Replace CLASS_INQUIRY with\n-\tCLASS_TRANSFORMATIONAL for intrinsic num_images.\n-\t(make_generic): Replace ACTUAL_NO with ACTUAL_YES for\n-\tintrinsic team_number.\n-\t* resolve.c (resolve_fl_procedure): Check pointer ts.u.derived\n-\texists before using it.\n-\n-2020-06-22  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/95585\n-\t* check.c (gfc_check_reshape): Add check for a value when\n-\tthe symbol has an attribute flavor FL_PARAMETER.\n-\n-2020-06-22  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/42693\n-\t* arith.c (gfc_arith_error): Enclose strings in G_() instead\n-\tof _().\n-\n-2020-06-20  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95707\n-\t* gfortran.h (gfc_common_head): Enlarge buffer.\n-\t* trans-common.c (gfc_sym_mangled_common_id): Enlarge temporary\n-\tbuffers, and add check on length on mangled name to prevent\n-\toverflow.\n-\n-2020-06-20  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95688\n-\t* iresolve.c (gfc_get_string): Enlarge static buffer size.\n-\n-2020-06-20  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95687\n-\t* class.c (get_unique_type_string): Return a string with dynamic\n-\tlength.\n-\t(get_unique_hashed_string, gfc_hash_value): Use dynamic result\n-\tfrom get_unique_type_string instead of static buffer.\n-\n-2020-06-20  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95689\n-\t* interface.c (check_sym_interfaces): Enlarge temporary buffer,\n-\tand add check on length on mangled name to prevent overflow.\n-\n-2020-06-20  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95587\n-\t* match.c (gfc_match_equivalence): Check constraints on\n-\tEQUIVALENCE objects also for CLASS variables.\n-\n-2020-06-18  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (resolve_omp_clauses): Reject vars with\n-\tallocatable components in OpenMP map clauses.\n-\n-2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* parse.c (decode_oacc_directive): Permit 'acc routine' also\n-\tinside pure procedures.\n-\t* openmp.c (gfc_match_oacc_routine): Inside pure procedures\n-\tdo not permit gang, worker or vector clauses.\n-\n-2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* parse.c (decode_omp_directive): Remove \"or ELEMENTAL\"\n-\tfrom \"in PURE\" error message also for -fopenmp-simd.\n-\n-2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* parse.c (decode_omp_directive): Remove \"or ELEMENTAL\"\n-\tfrom \"in PURE\" error message.\n-\n-2020-06-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/42122\n-\t* dump-parse-tree.c (gfc_dump_global_symbols):  If the symroot is\n-\tempty, just output \"empty\".\n-\n-2020-06-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95088\n-\t* class.c (get_unique_type_string): Replace use of fixed size\n-\tbuffer by internally passing a pointer to strings.\n-\n-2020-06-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* check.c (gfc_check_random_seed): Always use locations\n-\tfrom get and put arguments for error messages.\n-\n-2020-06-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/94109\n-\t* class.c (finalize_component): Return early if finalization has\n-\talready happened for expression and component within namespace.\n-\t* gfortran.h (gfc_was_finalized): New type.\n-\t(gfc_namespace): Add member was_finalzed.\n-\t(gfc_expr): Remove finalized.\n-\t* symbol.c (gfc_free_namespace): Free was_finalized.\n-\n-2020-06-11  Harald Anlauf  <anlauf@gmx.de>\n-\t    Steven G. Kargl   <kargl@gcc.gnu.org>\n-\n-\tPR fortran/95611\n-\t* decl.c (access_attr_decl): Use correct symbol in error message.\n-\n-2020-06-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95544\n-\t* check.c (invalid_null_arg): Rename to gfc_invalid_null_arg.\n-\t(gfc_check_associated, gfc_check_kind, gfc_check_merge)\n-\t(gfc_check_shape, gfc_check_size, gfc_check_spread)\n-\t(gfc_check_transfer): Adjust.\n-\t(gfc_check_len_lentrim, gfc_check_trim): Check for NULL() argument.\n-\t* gfortran.h: Declare gfc_invalid_null_arg ().\n-\t* intrinsic.c (check_arglist): Check for NULL() argument.\n-\n-2020-06-11  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95503\n-\t* expr.c (gfc_check_pointer_assign): Skip contiguity check of rhs\n-\tof pointer assignment if lhs cannot be simply contiguous.\n-\n-2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/95331\n-\t* trans-array.c (gfc_conv_array_ref): For class array dummy\n-\targuments use the transformed descriptor in sym->backend_decl\n-\tinstead of the original descriptor.\n-\n-2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/52351\n-\tPR fortran/85868\n-\t* trans-array.c (gfc_conv_expr_descriptor): Enable the\n-\tcreation of a new descriptor with the correct one based\n-\tindexing for array sections.  Rework array descriptor\n-\tindexing offset calculation.\n-\n-2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/94022\n-\t* trans-expr.c (gfc_conv_procedure_call): In the case of\n-\tassumed-size arrays ensure that the reference is to a full array.\n-\n-2020-06-07  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95091\n-\t* class.c (gfc_hash_value): Add cast.\n-\n-2020-06-07  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95091\n-\t* class.c (get_unique_type_string, gfc_hash_value): Enlarge\n-\tbuffers, and check whether the strings returned by\n-\tget_unique_type_string() fit.\n-\n-2020-06-05  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95530\n-\tPR fortran/95537\n-\t* decl.c (gfc_match_decl_type_spec): Enlarge buffer, and enhance\n-\tstring copy to detect buffer overflow.\n-\t* gfortran.h (gfc_common_head): Enlarge buffer.\n-\t* trans-common.c (finish_equivalences): Enhance string copy to\n-\tdetect buffer overflow.\n-\n-2020-06-05  Tom Tromey  <tromey@adacore.com>\n-\n-\tPR fortran/95509\n-\t* misc.c (gfc_closest_fuzzy_match): Update cutoff value\n-\tcomputation.\n-\n-2020-06-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95500\n-\t* trans-expr.c (gfc_conv_expr_reference): Do not dereference NULL\n-\tpointer.\n-\n-2020-06-03  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/95214\n-\tPR fortran/66833\n-\tPR fortran/67938\n-\t* trans-expr.c (gfc_maybe_dereference_var): Add assumed-rank to\n-\tcharacter dummy arguments list of possible attributes.\n-\n-2020-06-03  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* f95-lang.c (LANG_HOOKS_OMP_PREDETERMINED_MAPPING): Redefine.\n-\t* trans-openmp.c (gfc_omp_predetermined_mapping): New.\n-\t* trans.h (gfc_omp_predetermined_mapping): Declare.\n-\n-2020-05-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/94361\n-\t* class.c (finalize_component): Use expr->finalized instead of\n-\tcomp->finalized.\n-\t* gfortran.h (gfc_component): Remove finalized member.\n-\t(gfc_expr): Add it here instead.\n-\n-2020-05-30  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95373\n-\t* primary.c (is_inquiry_ref): Move validity check of inquiry\n-\treferences against selected Fortran standard from here...\n-\t(gfc_match_varspec) ...to here.\n-\n-2020-05-30  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95090\n-\t* class.c (get_unique_type_string): Use buffer overrun check.\n-\n-2020-05-29  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95090\n-\t* class.c (get_unique_type_string): Enlarge temporary for\n-\tname-mangling.  Use strncpy to prevent buffer overrun.\n-\t(get_unique_hashed_string): Enlarge temporary.\n-\t(gfc_hash_value): Enlarge temporary for name-mangling.\n-\n-2020-05-28  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95373\n-\t* primary.c (is_inquiry_ref): Check validity of inquiry\n-\treferences against selected Fortran standard.\n-\n-2020-05-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/94397\n-\t* match.c (gfc_match_type_spec): New variable ok initialised\n-\tto true. Set ok with the return value of gfc_reduce_init_expr\n-\tcalled only if the expression is not EXPR_CONSTANT and is not\n-\tEXPR_VARIABLE. Add !ok to the check for type not being integer\n-\tor the rank being greater than zero.\n-\n-2020-05-27  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95090\n-\t* iresolve.c (gfc_get_string): Enlarge temporary for\n-\tname-mangling.\n-\n-2020-05-27  Tobias Burnus  <tobias@codesourcery.com>\n-\t    Mark Eggleston  <markeggleston@gnu.gcc.org>\n-\n-\tPR fortran/50392\n-\t* trans-decl.c (gfc_get_symbol_decl): Remove unnecessary block\n-\tdelimiters.  Add auxiliary variables if a label is assigned to\n-\ta return variable. (gfc_gat_fake_result): If the symbol has an\n-\tassign attribute set declaration from the symbol's backend\n-\tdeclaration.\n-\n-2020-05-26  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95089\n-\t* trans-types.c (gfc_get_derived_type): Enlarge temporary to hold\n-\tmangled name \"_caf_symbol\".\n-\n-2020-05-26  Alexandre Oliva  <oliva@adacore.com>\n-\n-\t* options.c (gfc_get_option_string): Drop auxbase, add\n-\tdumpbase_ext.\n-\n-2020-05-24  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95106\n-\t* trans-common.c (gfc_sym_mangled_common_id): Enlarge temporaries\n-\tfor name-mangling.\n-\n-2020-05-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR libfortran/95191\n-\t* libgfortran.h (libgfortran_error_codes): Add\n-\tLIBERROR_BAD_WAIT_ID.\n-\n-2020-05-20  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/39695\n-\t* resolve.c (resolve_fl_procedure): Set name depending on\n-\twhether the result attribute is set.  For PROCEDURE/RESULT\n-\tconflict use the name in sym->ns->proc_name->name.\n-\t* symbol.c (gfc_add_type): Add check for function and result\n-\tattributes use sym->ns->proc_name->name if both are set.\n-\tWhere the symbol cannot have a type use the name in\n-\tsym->ns->proc_name->name.\n-\n-2020-05-18  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95053\n-\t* arith.c (gfc_divide): Revert hunk introduced by patch for\n-\tPR93499.\n-\t* decl.c (variable_decl): Generate error for array shape not being\n-\tan INTEGER constant.\n-\t(gfc_get_pdt_instance): Generate error if KIND or LEN expressions\n-\tin declaration of a PDT instance do not simplify to INTEGER\n-\tconstants.\n-\n-2020-05-15  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/94690\n-\t* openmp.c (resolve_omp_do): Permit more clauses for SIMD\n-\titeration variables.\n-\n-2020-05-14  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* trans-openmp.c: Include function.h.\n-\t(gfc_trans_omp_target): Set cfun->has_omp_target.\n-\n-2020-05-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93497\n-\t* decl.c (char_len_param_value): Check whether character\n-\tlength expression is of type EXPR_OP and if so simplify it.\n-\t* resolve.c (resolve_charlen): Reject length if it has a\n-\trank.\n-\n-2020-05-13  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/94690\n-\t* openmp.c (OMP_DISTRIBUTE_CLAUSES): Add OMP_CLAUSE_LASTPRIVATE.\n-\t(gfc_resolve_do_iterator): Skip the private handling for SIMD as\n-\tthat is handled by ME code.\n-\t* trans-openmp.c (gfc_trans_omp_do): Don't add private/lastprivate\n-\tfor dovar_found == 0, unless !simple.\n-\n-2020-05-11  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95053\n-\t* arith.c (gfc_divide): Do not error out if operand 2 is\n-\tnon-numeric.  Defer checks to later stage.\n-\n-2020-05-11  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/94672\n-\t* trans.h (gfc_conv_expr_present): Add use_saved_decl=false argument.\n-\t* trans-expr.c (gfc_conv_expr_present): Likewise; use DECL directly\n-\tand only if use_saved_decl is true, use the actual PARAM_DECL arg (saved\n-\tdescriptor).\n-\t* trans-array.c (gfc_trans_dummy_array_bias): Set local 'arg.0'\n-\tvariable to NULL if 'arg' is not present.\n-\t* trans-openmp.c (gfc_omp_check_optional_argument): Simplify by checking\n-\t'arg.0' instead of the true PARM_DECL.\n-\t(gfc_omp_finish_clause): Remove setting 'arg.0' to NULL.\n-\n-2020-05-11  Janus Weil  <janus@gcc.gnu.org>\n-\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR fortran/59107\n-\t* gfortran.h: Rename field resolved as resolve_symbol_called\n-\tand assign two 2 bits instead of 1.\n-\t* interface.c (check_dtio_interface1): Use new field name.\n-\t(gfc_find_typebound_dtio_proc): Use new field name.\n-\t* resolve.c (gfc_resolve_intrinsic): Replace check of the formal\n-\tfield with resolve_symbol_called is at least 2, if it is not\n-\tset the field to 2.  (resolve_typebound_procedure): Use new field\n-\tname.  (resolve_symbol): Use new field name and check whether it\n-\tis at least 1, if it is not set the field to 1.\n-\n-2020-05-10  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/93499\n-\t* arith.c (gfc_divide): Catch division by zero.\n-\t(eval_intrinsic_f3): Safeguard for NULL operands.\n-\n-2020-05-05  Steve Kargl  <kargl@gcc.gnu.org>\n-\tHarald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/93366\n-\t* check.c (gfc_check_associated, invalid_null_arg): Factorize\n-\tcheck for presence of invalid NULL() argument.\n-\t(gfc_check_kind, gfc_check_merge, gfc_check_shape)\n-\t(gfc_check_sizeof, gfc_check_spread, gfc_check_transfer): Use this\n-\tcheck for presence of invalid NULL() arguments.\n-\n-2020-04-29  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n-\n-\tPR fortran/94769\n-\t* io.c (check_io_constraints): Initialize local variable num to\n-\t-1 and assert that it receives a meaningful value by function\n-\tcompare_to_allowed_values.\n-\n-2020-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/93956\n-\tPR fortran/94788\n-\t* expr.c (gfc_check_pointer_assign): Revert patch for PR 93956.\n-\t* interface.c: Likewise.\n-\n-2020-04-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/94578\n-\t* trans-expr.c (arrayfunc_assign_needs_temporary): If the\n-\tLHS is a subref pointer, we also need a temporary.\n-\n-2020-04-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/93956\n-\t* expr.c (gfc_check_pointer_assign): Also set subref_array_pointer\n-\twhen a function returns a pointer.\n-\t* interface.c (gfc_set_subref_array_pointer_arg): New function.\n-\t(gfc_procedure_use): Call it.\n-\n-2020-04-22  Fritz Reese  <foreese@gcc.gnu.org>\n-\n-\t* trigd_fe.inc: Use mpfr to compute cosd(30) rather than a host-\n-\tprecision floating point literal based on an invalid macro.\n-\n-2020-04-22  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/90350\n-\t* simplify.c (simplify_bound): In the case of assumed-size arrays\n-\tcheck if the reference is to a full array.\n-\n-2020-04-22  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/94709\n-\t* scanner.c (load_line): In fixed form, also treat 'C' as comment and\n-\t'D'/'d' only with -fd-lines-as-comments. Treat '!$' with -fopenmp,\n-\t'!$acc' with -fopenacc and '!GCC$' as non-comment to permit <tab>\n-\tand truncation warnings.\n-\n-2020-04-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* dump-parse-tree.c (show_attr): Add numerous flags, some cleanup.\n-\n-2020-04-20  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/93364\n-\t* array.c (gfc_set_array_spec): Check for sum of rank and corank\n-\tnot exceeding GFC_MAX_DIMENSIONS.\n-\n-2020-04-20  Steve Kargl  <kargl@gcc.gnu.org>\n-\tThomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/91800\n-\t* decl.c (variable_decl): Reject Hollerith constants as type\n-\tinitializer.\n-\n-2020-04-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/93500\n-\t* resolve.c (resolve_operator): If both operands are\n-\tNULL, return false.\n-\t* simplify.c (simplify_bound): If a division by zero\n-\twas seen during bound simplification, free the\n-\tcorresponcing expression and return &gfc_bad_expr.\n-\n-2020-04-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/94090\n-\t* gfortran.dg (gfc_compare_interfaces): Add\n-\toptional argument bad_result_characteristics.\n-\t* interface.c (gfc_check_result_characteristics): Fix\n-\twhitespace.\n-\t(gfc_compare_interfaces): Handle new argument; return\n-\ttrue if function return values are wrong.\n-\t* resolve.c (resolve_global_procedure): Hard error if\n-\tthe return value of a function is wrong.\n-\n-2020-04-15  Fritz Reese  <foreese@gcc.gnu.org>\n-\tLinus Koenig <link@sig-st.de>\n-\n-\tPR fortran/94192\n-\t* simplify.c (simplify_bound): Simplify condition for error check.\n-\n-2020-04-14  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* module.c (gfc_match_use): Fix name-conflict check for use-associating\n-\tthe same symbol again in a submodule.\n-\n-2020-04-13  Linus Koenig <link@sig-st.de>\n-\n-\tPR fortran/94192\n-\t* resolve.c (resolve_fl_var_and_proc): Set flag \"error\" to 1 if\n-\tpointer is found to not have an assumed rank or a deferred shape.\n-\t* simplify.c (simplify_bound): If an error has been issued for a\n-\tgiven pointer, one should not attempt to find its bounds.\n-\n-2020-04-09  Fritz Reese  <foreese@gcc.gnu.org>\n-\n-\tPR fortran/87923\n-\t* gfortran.h (gfc_resolve_open, gfc_resolve_close): Add\n-\tlocus parameter.\n-\t(gfc_resolve_dt): Add code parameter.\n-\t* io.c (async_io_dt, check_char_variable, is_char_type): Removed.\n-\t(resolve_tag_format): Add locus to error message regarding\n-\tzero-sized array in FORMAT tag.\n-\t(check_open_constraints, check_close_constraints): New functions\n-\tcalled at resolution time.\n-\t(gfc_match_open, gfc_match_close, match_io): Move checks which don't\n-\taffect the match result to new functions check_open_constraints,\n-\tcheck_close_constraints, check_io_constraints.\n-\t(gfc_resolve_open, gfc_resolve_close): Call new functions\n-\tcheck_open_constraints, check_close_constraints after all tags have\n-\tbeen independently resolved.  Remove duplicate constraints which are\n-\talready verified by resolve_tag.  Explicitly pass locus to all error\n-\treports.\n-\t(compare_to_allowed_values): Add locus parameter and provide\n-\texplicit locus all error reports.\n-\t(match_open_element, match_close_element, match_file_element,\n-\tmatch_dt_element, match_inquire_element): Remove redundant special\n-\tcases for ASYNCHRONOUS and IOMSG tags.\n-\t(gfc_resolve_dt): Remove redundant special case for format\n-\texpression.  Call check_io_constraints, forwarding an I/O list as\n-\tthe io_code parameter if present.\n-\t(check_io_constraints): Change return type to bool.  Pass explicit\n-\tlocus to error reports.  Move generic checks after tag-specific\n-\tchecks, since errors are no longer buffered.  Move simplification of\n-\tformat string to match_io.  Remove redundant checks which are\n-\tverified by resolve_tag.  Remove usage of async_io_dt flag and\n-\texplicitly mark symbols used in asynchronous I/O with the\n-\tasynchronous attribute.\n-\t* resolve.c (resolve_transfer, resolve_fl_namelist): Remove checks\n-\tfor async_io_dt flag.  This is now done in io.c.\n-\t(check_io_constraints).\n-\t(gfc_resolve_code): Pass code locus to gfc_resolve_open,\n-\tgfc_resolve_close, gfc_resolve_dt.\n-\n-2020-04-07  Fritz Reese  <foreese@gcc.gnu.org>\n-\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93871\n-\t* gfortran.h (GFC_ISYM_ACOSD, GFC_ISYM_ASIND, GFC_ISYM_ATAN2D,\n-\tGFC_ISYM_ATAND, GFC_ISYM_COSD, GFC_ISYM_COTAND, GFC_ISYM_SIND,\n-\tGFC_ISYM_TAND): New.\n-\t* intrinsic.c (add_functions): Remove check for flag_dec_math.\n-\tGive degree trig functions simplification and name resolution\n-\tfunctions (e.g, gfc_simplify_atrigd () and gfc_resolve_atrigd ()).\n-\t(do_simplify): Remove special casing of degree trig functions.\n-\t* intrinsic.h (gfc_simplify_acosd, gfc_simplify_asind,\n-\tgfc_simplify_atand, gfc_simplify_cosd, gfc_simplify_cotand,\n-\tgfc_simplify_sind, gfc_simplify_tand, gfc_resolve_trigd2): Add new\n-\tprototypes.\n-\t(gfc_simplify_atrigd, gfc_simplify_trigd, gfc_resolve_cotan,\n-\tresolve_atrigd): Remove prototypes of deleted functions.\n-\t* iresolve.c (is_trig_resolved, copy_replace_function_shallow,\n-\tgfc_resolve_cotan, get_radians, get_degrees, resolve_trig_call,\n-\tgfc_resolve_atrigd, gfc_resolve_atan2d): Delete functions.\n-\t(gfc_resolve_trigd, gfc_resolve_trigd2): Resolve to library functions.\n-\t* simplify.c (rad2deg, deg2rad, gfc_simplify_acosd, gfc_simplify_asind,\n-\tgfc_simplify_atand, gfc_simplify_atan2d, gfc_simplify_cosd,\n-\tgfc_simplify_sind, gfc_simplify_tand, gfc_simplify_cotand): New\n-\tfunctions.\n-\t(gfc_simplify_atan2): Fix error message.\n-\t(simplify_trig_call, gfc_simplify_trigd, gfc_simplify_atrigd,\n-\tradians_f): Delete functions.\n-\t* trans-intrinsic.c: Add LIB_FUNCTION decls for sind, cosd, tand.\n-\t(rad2deg, gfc_conv_intrinsic_atrigd, gfc_conv_intrinsic_cotan,\n-\tgfc_conv_intrinsic_cotand, gfc_conv_intrinsic_atan2d): New functions.\n-\t(gfc_conv_intrinsic_function): Handle ACOSD, ASIND, ATAND, COTAN,\n-\tCOTAND, ATAN2D.\n-\t* trigd_fe.inc: New file. Included by simplify.c to implement\n-\tsimplify_sind, simplify_cosd, simplify_tand with code common to the\n-\tlibgfortran implementation.\n-\n-2020-04-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93686\n-\t* decl.c (gfc_match_data): Handle data matching for derived type\n-\tpointers.\n-\n-2020-04-02  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.h (gfc_resolve_formal_arglist): Add prototype.\n-\t* interface.c (check_dtio_interface1): Call it.\n-\t* resolve.c (gfc_resolve_formal_arglist): Renamed from\n-\tresolve_formal_arglist, removed static.\n-\t(find_arglists, resolve_types): Update calls.\n-\n-2020-04-02  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93522\n-\t* match.c (gfc_match_select_rank): Fix error cleanup.\n-\n-2020-04-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93498\n-\t* check.c (gfc_check_findloc):  If the kinds of the arguments\n-\tdiffer goto label \"incompat\".\n-\n-2020-04-02 Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/94030\n-\t* resolve.c (resolve_equivalence): Correct formatting\n-\taround the label \"identical_types\".  Instead of using\n-\tgfc_resolve_array_spec use is_non_constants_shape_array\n-\tto determine whether the array can be used in a in an\n-\tequivalence statement.\n-\n-2020-04-01  Mark Eggleston  <mark.eggleston@codethink.com>\n-\n-\tPR fortran/94386\n-\texpr.c (simplify_parameter_variable): Restore code deleted\n-\tin PR94246.\n-\n-2020-03-28  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/94246\n-\t* arith.c : Remove trailing white space.\n-\t* expr.c (scalarize_intrinsic_call): Remove the error checking.\n-\tMake a copy of the expression to be simplified and only replace\n-\tthe original if the simplification succeeds.\n-\n-2020-03-28  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/94348\n-\t* decl.c (gfc_match_submod_proc): Add result var to the\n-\tproc's namespace.\n-\n-2020-03-27  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93957\n-\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Accept\n-\tnonallocatable, nonpointer deferred-rank arrays.\n-\n-2020-03-27  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93363\n-\t* resolve.c (resolve_assoc_var): Reject association to DT and\n-\tfunction name.\n-\n-2020-03-25  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93484\n-\t* match.c (gfc_match_type_spec): Replace gfc_match_init_expr with\n-\tgfc_match_expr. Return m if m is MATCH_NO or MATCH_ERROR.\n-\n-2020-03-23  Mark Eggleston  <mark.eggleston@codethink.com>\n-\tSteven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93600\n-\t* expr.c (simplify_parameter_variable): Check whether the ref\n-\tchain contains INQUIRY_LEN or INQUIRY_KIND and set inquiry\n-\tboolean. When an empty array has been identified and a new\n-\tnew EXPR_ARRAY expression has been created only return that\n-\texpression if inquiry is not set. This allows the new\n-\texpression to drop through to be simplified into a\n-\tEXPR_CONSTANT representing %kind or %len.\n-\t* matc.c (gfc_match_assignment): If lvalue doesn't have a\n-\tsymtree free both lvalue and rvalue expressions and return\n-\tan error.\n-\t* resolv.c (gfc_resolve_ref): Ensure that code to handle\n-\tINQUIRY_LEN is only performed for arrays with deferred types.\n-\n-2020-03-18  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* class.c (generate_finalization_wrapper): Fix up duplicated word\n-\tissue in a comment.\n-\t* trans-types.c (gfc_get_nodesc_array_type): Likewise.\n-\n-2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* array.c (gfc_check_iter_variable): Fix up duplicated word issue\n-\tin a comment.\n-\t* arith.c (gfc_arith_concat): Likewise.\n-\t* resolve.c (gfc_resolve_ref): Likewise.\n-\t* frontend-passes.c (matmul_lhs_realloc): Likewise.\n-\t* module.c (gfc_match_submodule, load_needed): Likewise.\n-\t* trans-expr.c (gfc_init_se): Likewise.\n-\n-2020-03-15  Lewis Hyatt  <lhyatt@gmail.com>\n-\n-\t* lang.opt: Avoid redundancy in the help text.\n-\n-2020-03-12  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR middle-end/94120\n-\t* openmp.c (gfc_match_oacc_declare): Accept function-result\n-\tvariables; reject variables declared in a different scoping unit.\n-\n-2020-03-08  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/93581\n-\t* resolve.c (gfc_resolve_ref): Modify array refs to be elements\n-\tif the ref chain ends in INQUIRY_LEN.\n-\t* trans-array.c (gfc_get_dataptr_offset): Provide the offsets\n-\tfor INQUIRY_RE and INQUIRY_IM.\n-\n-2020-03-05 Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93792\n-\t* decl.c (variable_decl): If param and initializer check\n-\tfor BOZ, if found,  output an error, set m to MATCH_ERROR\n-\tand goto cleanup.\n-\n-2020-03-02  Andrew Benson  <abensonca@gmail.com>\n-\n-\tPR fortran/93486\n-\t* module.c: Increase size of variables used to read module names\n-\twhen loading interfaces from module files to permit cases where\n-\tthe name is the concatenation of a module and submodule name.\n-\t* gfortran.dg/pr93486.f90: New test.\n-\n-2020-03-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/92976\n-\t* match.c (select_type_set_tmp): If the selector array spec has\n-\texplicit bounds, make the temporary's bounds deferred.\n-\n-2020-03-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/92959\n-\t* trans-intrinsic.c (gfc_conv_associated): Eliminate\n-\t'nonzero_charlen' and move the chunk to evaluate zero character\n-\tlength until after the argument evaluation so that the string\n-\tlength can be used.\n-\n-2020-02-28  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/92785\n-\t* trans-expr.c (gfc_conv_intrinsic_to_class): Renormalise non-\n-\tvariable expressions to be unity lbound based.\n-\n-2020-02-25  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\t* simplify.c (degrees_f): Remove unused code.\n-\n-2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR translation/93864\n-\t* intrinsic.texi (CO_BROADCAST): Fix typo, paramter -> parameter.\n-\t* trans-array.c (gfc_allocate_pdt_comp, gfc_deallocate_pdt_comp,\n-\tgfc_check_pdt_dummy): Fix comment typo paramter -> parameter.\n-\n-2020-02-24  Mark Eggleston  <mark.eggleston@codethink.com>\n-\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93835\n-\t* decl.c (gfc_match_data) : Check whether the data expression\n-\tis a derived type and is a constructor. If a BOZ constant\n-\tis encountered in the constructor output an error and return\n-\tMATCH_ERROR.\n-\n-2020-02-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93604\n-\t* decl.c (gfc_match_data) : Check whether the data expression\n-\tis a derived type and is a constructor. If a BOZ constant\n-\tis encountered in the constructor output an error and return\n-\tMATCH_ERROR.\n-\n-2020-02-24  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93552\n-\t* match.c (match_exit_cycle): With OpenACC, check the kernels loop\n-\tdirective and tile clause as well.\n-\n-2020-02-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/93889\n-\t* interface.c (compare_parameter): Fix error message.\n-\n-2020-02-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/93890\n-\t* interface.c: Replace \"can not\" by \"cannot\" and remove trailing\n-\tspace.\n-\n-2020-02-20  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93825\n-\t* openmp.c (resolve_oacc_loop_blocks): Move call to\n-\tresolve_oacc_nested_loops from here ...\n-\t(resolve_oacc_loop): ... to here.\n-\n-2020-02-18  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/93714\n-\t* expr.c (gfc_check_pointer_assign): Move check for\n-\tmatching character length to after checking the lvalue\n-\tattributes for target or pointer.\n-\n-2020-02-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93601\n-\t* match.c (gfc_match_assignment) : Reject assignment if\n-\tthe lhs stype is BT_CLASS and the rhs type is BT_BOZ.\n-\n-2020-02-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93603\n-\t* match.c (gfc_match_associate) : If target expression\n-\thas the type BT_BOZ output an error and goto\n-\tassocListError.\n-\n-2020-02-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/93580\n-\t* primary.c (gfc_match_varspec): If the symbol following %\n-\tis re or im and the primary expression type is not BT_COMPLEX\n-\tissue an error. If the symbol is len and the primary\n-\texpression type is not BT_CHARACTER is an error.\n-\n-2020-02-10  Andrew Benson  <abensonca@gmail.com>\n-\n-\tPR fortran/83113\n-\t* array.c: Do not attempt to set the array spec for a submodule\n-\tfunction symbol (as it has already been set in the corresponding\n-\tmodule procedure interface).\n-\t* symbol.c: Do not reject duplicate POINTER, ALLOCATABLE, or\n-\tDIMENSION attributes in declarations of a submodule function.\n-\t* gfortran.h: Add a macro that tests for a module procedure in a\n-\tsubmodule.\n-\t* gfortran.dg/pr83113.f90: New test.\n-\n-2020-02-03  Julian Brown  <julian@codesourcery.com>\n-\t    Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* cpp.c (cpp_define_builtins): Update _OPENACC define to 201711.\n-\t* intrinsic.texi: Update mentions of OpenACC version to 2.6.\n-\t* gfortran.texi: Likewise. Remove experimental disclamer for OpenACC.\n-\t* invoke.texi: Remove experimental disclamer for OpenACC.\n-\n-2020-02-03  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93541\n-\t* intrinisic.texi (OpenMP Modules OMP_LIB and OMP_LIB_KINDS):\n-\tAdd undocumented parameters from omp_lib.f90.in.\n-\n-2020-02-03  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93427\n-\t* resolve.c (resolve_assoc_var): Remove too strict check.\n-\t* gfortran.dg/associate_51.f90: Update test case.\n-\n-2020-02-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/92305\n-\t* trans-types.c (gfc_get_function_type): Also push boolean_type_node\n-\ttypes for non-character scalar VALUE optional dummy arguments.\n-\t* trans-decl.c (create_function_arglist): Skip those in\n-\thidden_typelist.  Formatting fix.\n-\n-2020-01-31  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93462\n-\t* frontend-passes.c (gfc_code_walker): For EXEC_OACC_ATOMIC, set\n-\tin_omp_atomic to true prevent front-end optimization.\n-\n-2020-01-30  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\tPR fortran/87103\n-\t* expr.c (gfc_check_conformance): Check vsnprintf for truncation.\n-\t* iresolve.c (gfc_get_string): Likewise.\n-\t* symbol.c (gfc_new_symbol): Remove check for maximum symbol\n-\tname length.  Remove redundant 0 setting of new calloc()ed\n-\tgfc_symbol.\n-\n-2020-01-30  Paul Thomas \u00a0<pault@gcc.gnu.org>\n-\t    Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/92123\n-\t* trans-decl.c (gfc_get_symbol_decl): Call gfc_defer_symbol_init for\n-\tCFI descs.\n-\t(gfc_build_builtin_function_decls): Use \".w.\" instead of \".ww\" or \".wR\"\n-\tfor gfor_fndecl_{cfi_to_gfc,gfc_to_cfi}.\n-\t(convert_CFI_desc): Handle references to CFI descriptors.\n-\n-2020-01-29  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/93463\n-\t* openmp.c (oacc_code_to_statement): Handle\n-\tEXEC_OACC_{ROUTINE,UPDATE,WAIT,CACHE,{ENTER,EXIT}_DATA,DECLARE}.\n-\n-2020-01-28  Andrew Benson  <abensonca@gmail.com>\n-\n-\tPR fortran/93461\n-\t* trans.h: Increase GFC_MAX_MANGLED_SYMBOL_LEN to\n-\tGFC_MAX_SYMBOL_LEN*3+5 to allow for inclusion of submodule name,\n-\tplus the \".\" between module and submodule names.\n-\t* gfortran.dg/pr93461.f90: New test.\n-\n-2020-01-28  Andrew Benson  <abensonca@gmail.com>\n-\n-\tPR fortran/93473\n-\t* parse.c: Increase length of char variables to allow them to hold\n-\ta concatenated module + submodule name.\n-\t* gfortran.dg/pr93473.f90: New test.\n-\n-2020-01-28  Julian Brown  <julian@codesourcery.com>\n-\n-\tPR fortran/93025\n-\t* openmp.c (resolve_omp_clauses): Check array references for contiguity.\n-\n-2020-01-28  Julian Brown  <julian@codesourcery.com>\n-\n-\t* gfortran.h (gfc_symbol): Add comp_mark bitfield.\n-\t* openmp.c (resolve_omp_clauses): Disallow mixed component and\n-\tfull-derived-type accesses to the same variable within a single\n-\tdirective.\n-\n-2020-01-28  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93464\n-\t* openmp.c (gfc_omp_check_optional_argument): Avoid ICE when\n-\tDECL_LANG_SPECIFIC and GFC_DESCRIPTOR_TYPE_P but not\n-\tGFC_DECL_SAVED_DESCRIPTOR as for local allocatable character vars.\n-\n-2020-01-28  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.texi (Runtime): Remove tailing '.' in @menu.\n-\n-2020-01-27  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/85781\n-\t* trans-expr.c (gfc_conv_substring): Handle non-ARRAY_TYPE strings\n-\tof Bind(C) procedures.\n-\n-2020-01-22  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* parse.c (parse_omp_structured_block): Handle ST_OMP_TARGET_PARALLEL.\n-\t* trans-openmp.c (gfc_trans_omp_target)\n-\t<case EXEC_OMP_TARGET_PARALLEL>: Call pushlevel first.\n-\n-\tPR fortran/93329\n-\t* openmp.c (omp_code_to_statement): Handle remaining EXEC_OMP_*\n-\tcases.\n-\n-2020-01-21  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93309\n-\t* interface.c (gfc_procedure_use): Also check parent namespace for\n-\t'implict none (external)'.\n-\t* symbol.c (gfc_get_namespace): Don't set has_implicit_none_export\n-\tto parent namespace's setting.\n-\n-2020-01-19  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/44960\n-\t* primary.c (gfc_match_rvalue): Break after setting MATCH_ERROR.\n-\t* resolve.c (resolve_function): Issue error when a\n-\tfunction call contains a reference.\n-\n-2020-01-17  Mark Eggleston  <mark.eggleston@codethink.com>\n-\n-\tPR fortran/93236\n-\t* resolve.c (resolve_types): Declare boolean recursive and set with the\n-\tvalue of the recursive attribute of namespace proc_name symbol\n-\tstructure if it exists.  Call gfc_save_all if both flag_automatic and\n-\trecursive are false or ns->save_all is true.\n-\n-2020-01-16  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93253\n-\t* check.c (gfc_invalid_boz): Mention -fallow-invalid-boz\n-\tin the error message.\n-\t* gfortran.texi (BOZ literal constants): List another missing\n-\textension and refer to -fallow-invalid-boz.\n-\t* lang.opt (fallow-invalid-boz): Also mention 'X' in the help text\n-\tas it is not covered by the previous wording.\n-\t* primary.c (match_boz_constant): Tweak wording such that it is\n-\tclear how to fix the nonstandard use.\n-\n-2020-01-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/65428\n-\t* array.c (empty_constructor): New variable.\n-\t(empty_ts): New variable.\n-\t(expand_constructor): Save typespec in empty_ts.\n-\tUnset empty_constructor if there is an element.\n-\t(gfc_expand_constructor): Initialize empty_constructor\n-\tand empty_ts.  If there was no explicit constructor\n-\ttype and the constructor is empty, take the type from\n-\tempty_ts.\n-\n-2020-01-09  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/84135\n-\t* array.c (gfc_set_array_spec): Fix shifting of codimensions\n-\twhen adding a dimension.\n-\t* decl.c (merge_array_spec): Ditto. Fix using correct codimensions.\n-\n-2020-01-07  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/93162\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Check for REF_ARRAY type\n-\tbefore testing u.ar.type == AR_FULL.\n-\n-2020-01-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/91640\n-\t* trans-expr.c (gfc_conv_procedure_call): Avoid copy-out for nonvariable\n-\targuments to contiguous dummy args.  Avoid re-checking whether fsym is\n-\tNULL.\n-\n-2020-01-03  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* trans-openmp.c (gfc_omp_check_optional_argument): Always return a\n-\tBoolean expression; handle unallocated/disassociated actual arguments\n-\tas absent if passed to nonallocatable/nonpointer dummy array arguments.\n-\t(gfc_build_cond_assign): Change to assume a Boolean expr not a pointer.\n-\t(gfc_omp_finish_clause, gfc_trans_omp_clauses): Assign NULL to generated\n-\tarray-data variable if the argument is absent. Simplify code as\n-\t'present' is now a Boolean expression.\n-\n-2020-01-03  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/92994\n-\t* primary.c (gfc_match_rvalue): Add some flavor checks\n-\tgfc_matching_procptr_assignment.\n-\t* resolve.c (resolve_assoc_var): Add more checks for invalid targets.\n-\n-2020-01-02  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/68020\n-\t* array.c (gfc_match_array_spec): Fix implied-type matching\n-\tfor rank > 2.\n-\n-2020-01-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/93113\n-\t* dependency.c (gfc_dep_resolver): Handle REF_INQUIRY in switch\n-\tfor ref types.\n-\n-2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tUpdate copyright years.\n-\n-\t* gfortranspec.c (lang_specific_driver): Update copyright notice\n-\tdates.\n-\t* gfc-internals.texi: Bump @copying's copyright year.\n-\t* gfortran.texi: Ditto.\n-\t* intrinsic.texi: Ditto.\n-\t* invoke.texi: Ditto.\n \f\n-Copyright (C) 2020 Free Software Foundation, Inc.\n+Copyright (C) 2021 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "21e8799b65312e6231a2cd83991f8486fc25eccb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 29079, "changes": 29080, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618e665a0f406a7b35f449a54b322d49f8eb62af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=618e665a0f406a7b35f449a54b322d49f8eb62af"}, {"sha": "21e8799b65312e6231a2cd83991f8486fc25eccb", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 1, "deletions": 386, "changes": 387, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618e665a0f406a7b35f449a54b322d49f8eb62af/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618e665a0f406a7b35f449a54b322d49f8eb62af/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=618e665a0f406a7b35f449a54b322d49f8eb62af", "patch": "@@ -1,390 +1,5 @@\n-2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n-\n-\tPR target/97865\n-\t* configure: Regenerate.\n-\n-2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n-\n-\t* configure: Regenerate.\n-\n-2020-11-26  Maciej W. Rozycki  <macro@linux-mips.org>\n-\n-\t* io/io.h [HAVE_NEWLOCALE]: Also check for HAVE_FREELOCALE and\n-\tHAVE_USELOCALE.\n-\t[HAVE_FREELOCALE && HAVE_NEWLOCALE && HAVE_USELOCALE]\n-\t(HAVE_POSIX_2008_LOCALE): New macro.\n-\t(st_parameter_dt) [HAVE_NEWLOCALE]: Check for\n-\tHAVE_POSIX_2008_LOCALE instead.\n-\t* io/transfer.c (data_transfer_init_worker, finalize_transfer)\n-\t[HAVE_USELOCALE]: Check for HAVE_POSIX_2008_LOCALE instead.\n-\t* io/unit.c [HAVE_NEWLOCALE]: Likewise.\n-\t(init_units) [HAVE_NEWLOCALE]: Likewise.\n-\t(close_units) [HAVE_FREELOCALE]: Likewise.\n-\t* runtime/error.c (gf_strerror) [HAVE_USELOCALE]: Likewise.\n-\n-2020-11-26  Maciej W. Rozycki  <macro@linux-mips.org>\n-\n-\t* libgfortran.h: Use #if rather than #ifdef with\n-\t__FLT_HAS_INFINITY__, __DBL_HAS_INFINITY__,\n-\t__LDBL_HAS_INFINITY__, __FLT_HAS_QUIET_NAN__,\n-\t__DBL_HAS_QUIET_NAN__, and __LDBL_HAS_QUIET_NAN__.\n-\n-2020-11-21  Iain Sandoe  <iain@sandoe.co.uk>\n-\n-\t* intrinsics/execute_command_line.c (environ): Use\n-\t_NSGetEnviron to get the environment pointer on Darwin.\n-\n-2020-10-30  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* intrinsics/random.c (SZ_IN_INT_4): Define size of state in int32_t.\n-\t(SZ_IN_INT_8): Define size of state in int64_t.\n-\t(SZ): Remove.\n-\t(random_seed_i4): Use size SZ_IN_INT_4 instead of SZ.\n-\t(random_seed_i8): Use size SZ_IN_INT_8 instead of SZ.\n-\n-2020-10-18  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* m4/matmul_internal.m4: Move check for rank-1 times rank-2 before\n-\tchecks on strides for rank-2 times rank-2.\n-\t* generated/matmul_c10.c: Regenerated.\n-\t* generated/matmul_c16.c: Likewise.\n-\t* generated/matmul_c4.c: Likewise.\n-\t* generated/matmul_c8.c: Likewise.\n-\t* generated/matmul_i1.c: Likewise.\n-\t* generated/matmul_i16.c: Likewise.\n-\t* generated/matmul_i2.c: Likewise.\n-\t* generated/matmul_i4.c: Likewise.\n-\t* generated/matmul_i8.c: Likewise.\n-\t* generated/matmul_r10.c: Likewise.\n-\t* generated/matmul_r16.c: Likewise.\n-\t* generated/matmul_r4.c: Likewise.\n-\t* generated/matmul_r8.c: Likewise.\n-\t* generated/matmulavx128_c10.c: Likewise.\n-\t* generated/matmulavx128_c16.c: Likewise.\n-\t* generated/matmulavx128_c4.c: Likewise.\n-\t* generated/matmulavx128_c8.c: Likewise.\n-\t* generated/matmulavx128_i1.c: Likewise.\n-\t* generated/matmulavx128_i16.c: Likewise.\n-\t* generated/matmulavx128_i2.c: Likewise.\n-\t* generated/matmulavx128_i4.c: Likewise.\n-\t* generated/matmulavx128_i8.c: Likewise.\n-\t* generated/matmulavx128_r10.c: Likewise.\n-\t* generated/matmulavx128_r16.c: Likewise.\n-\t* generated/matmulavx128_r4.c: Likewise.\n-\t* generated/matmulavx128_r8.c: Likewise.\n-\n-2020-09-28  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* m4/unpack.m4 (unpack0_'rtype_code`,\n-\tunpack1_'rtype_code`): Move 'rstride[0]' initialization outside\n-\tconditional branch to silence -Wmaybe-uninitialized.\n-\t* generated/unpack_c10.c: Regenerate.\n-\t* generated/unpack_c16.c: Regenerate.\n-\t* generated/unpack_c4.c: Regenerate.\n-\t* generated/unpack_c8.c: Regenerate.\n-\t* generated/unpack_i1.c: Regenerate.\n-\t* generated/unpack_i16.c: Regenerate.\n-\t* generated/unpack_i2.c: Regenerate.\n-\t* generated/unpack_i4.c: Regenerate.\n-\t* generated/unpack_i8.c: Regenerate.\n-\t* generated/unpack_r10.c: Regenerate.\n-\t* generated/unpack_r16.c: Regenerate.\n-\t* generated/unpack_r4.c: Regenerate.\n-\t* generated/unpack_r8.c: Regenerate.\n-\n-2020-09-27  Clement Chigot  <clement.chigot@atos.net>\n-\n-\t* config/t-aix: Use $(AR) without -X32_64.\n-\n-2020-09-03  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* m4/iall.m4: Initial value for result should be -1.\n-\t* generated/iall_i1.c (miall_i1): Generated.\n-\t* generated/iall_i16.c (miall_i16): Likewise.\n-\t* generated/iall_i2.c (miall_i2): Likewise.\n-\t* generated/iall_i4.c (miall_i4): Likewise.\n-\t* generated/iall_i8.c (miall_i8): Likewise.\n-\n-2020-08-24  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/96486\n-\t* intrinsics/env.c: If value_len is > 0 blank the string.\n-\tCopy the result only if its length is > 0.\n-\n-2020-08-20  Mark Eggleston  <markeggleston@gcc.gnu.org>\n-\n-\tPR fortran/96436\n-\t* io/format.c (parse_format_list):  Add new local variable\n-\t\"standard\" to hold the required standard to check. If the\n-\tformat width is zero select standard depending on descriptor.\n-\tCall notification_std using the new standard variable.\n-\n-2020-08-17  David Edelsohn  <dje.gcc@gmail.com>\n-\t    Clement Chigot  <clement.chigot@atos.net>\n-\n-\t* config/t-aix: Add complementary mode object file to libcaf_single.a.\n-\n-2020-08-03  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* caf/single.c (_gfortran_caf_lock): Fix typo.\n-\n-2020-07-26  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR target/96306\n-\t* configure.ac: Add LIBGOMP_CHECKED_INT_KINDS and\n-\tLIBGOMP_CHECKED_REAL_KINDS and use it for to skip\n-\tinteger kind=16 checks for amdgcn.\n-\t* Makefile.am (kinds.h, selected_int_kind.inc,\n-\tselected_real_kind.inc): Pass them on.\n-\t* mk-kinds-h.sh: Takes to-be-check kinds as argument.\n-\t* mk-sik-inc.sh: Likewise.\n-\t* mk-srk-inc.sh: Likewise.\n-\t* Makefile.in: Regenerate.\n-\t* configure: Regenerate.\n-\n-2020-07-24  Dominique d'Humieres  <dhumieres.dominique@free.fr>\n-\n-\tPR fortran/93567\n-\t* io/write_float.def (determine_en_precision): Fix switch between\n-\tFMT_E and FMT_F.\n-\n-2020-07-24  Dominique d'Humieres  <dhumieres.dominique@free.fr>\n-\n-\tPR fortran/93592\n-\t* io/write_float.def (build_float_string): Do not reset\n-\t  nbefore for FMT_F and FMT_EN.\n-\n-2020-07-14  David Edelsohn  <dje.gcc@gmail.com>\n-\n-\t* config/t-aix: Set BITS from compiler cpp macro.\n-\n-2020-06-22  David Edelsohn  <dje.gcc@gmail.com>\n-\n-\t* Makefile.am: Use -include.\n-\t* Makefile.in: Regenerate.\n-\n-2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n-\n-\t* Makefile.am (tmake_file): Build and install AIX-style FAT libraries.\n-\t* Makefile.in: Regenerate.\n-\t* configure.ac (tmake_file): Substitute.\n-\t* configure: Regenerate.\n-\t* configure.host: Add system configury stanza. Define tmake_file.\n-\t* config/t-aix: New file.\n-\n-2020-06-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR libfortran/95313\n-\t* io/write.c (ztoa_big): Disable -Wstringop-overflow for one\n-\tline.\n-\n-2020-06-08  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95091\n-\t* io/transfer.c (finalize_transfer): Fix type in error message.\n-\n-2020-06-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n-\n-\tPR libfortran/95418\n-\t* config/fpu-387.h (struct fenv): Add __attribute__ ((gcc_struct)).\n-\n-2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n-\n-\tPR bootstrap/95413\n-\t* configure: Regenerated.\n-\n-2020-05-29  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR libfortran/95390\n-\t* Makefile.am (i_findloc0_c): Add findloc0_i10.c.\n-\t(i_findloc1_c): Add findloc1_i10.c.\n-\t* gfortran.map (GFORTRAN_10.2): New symbol version, export\n-\t_gfortran_{,m,s}findloc{0,1}_c10 symbols.\n-\t* Makefile.in: Regenerated.\n-\t* generated/findloc0_c10.c: Generated.\n-\t* generated/findloc1_c10.c: Generated.\n-\n-2020-05-28  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR libfortran/95104\n-\t* io/unit.c (unlock_unit): Guard by check for NULL pointer.\n-\n-2020-05-26  Harald Anlauf  <anlauf@gmx.de>\n-\t    Steven G. Kargl   <kargl@gcc.gnu.org>\n-\n-\tPR libfortran/95104\n-\t* io/transfer.c (st_wait_async): Do not dereference NULL pointer.\n-\n-2020-05-26  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95195\n-\t* io/transfer.c (finalize_transfer): Generate runtime error for\n-\tnamelist input/output to unformatted file.\n-\n-2020-05-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR libfortran/95191\n-\t* io/async.c (async_wait_id): Generate error if ID is higher\n-\tthan the highest current ID.\n-\t* runtime/error.c (translate_error): Handle LIBERROR_BAD_WAIT_ID.\n-\n-2020-05-21  H.J. Lu  <hongjiu.lu@intel.com>\n-\n-\t* m4/matmul.m4: Don't include <config/i386/cpuinfo.h>.  Use\n-\t__builtin_cpu_is/__builtin_cpu_supports\n-\t* generated/matmul_c10.c: Regenerated.\n-\t* generated/matmul_c16.c: Likewise.\n-\t* generated/matmul_c4.c: Likewise.\n-\t* generated/matmul_c8.c: Likewise.\n-\t* generated/matmul_i1.c: Likewise.\n-\t* generated/matmul_i16.c: Likewise.\n-\t* generated/matmul_i2.c: Likewise.\n-\t* generated/matmul_i4.c: Likewise.\n-\t* generated/matmul_i8.c: Likewise.\n-\t* generated/matmul_r10.c: Likewise.\n-\t* generated/matmul_r16.c: Likewise.\n-\t* generated/matmul_r4.c: Likewise.\n-\t* generated/matmul_r8.c: Likewise.\n-\n-2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n-\n-\tPR bootstrap/95147\n-\t* configure: Regenerated.\n-\n-2020-05-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR libfortran/95119\n-\t* io/close.c (close_status): Add CLOSE_INVALID.\n-\t(st_close): Return early on invalid STATUS parameter.\n-\n-2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n-\n-\t* configure: Regenerated.\n-\n-2020-05-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n-\n-\t* config/fpu-387.h (__math_force_eval): Remove.\n-\t(__math_force_eval_div): New define.\n-\t(local_feraiseexcept): Use __math_force_eval_div to use\n-\tgeneric division to generate INVALID, DIVZERO and INEXACT\n-\texceptions.\n-\t(struct fenv): Define named struct instead of typedef.\n-\n-2020-05-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n-\n-\t* config/fpu-387.h (__math_force_eval): New define.\n-\t(local_feraiseexcept): Use __math_force_eval to evaluate\n-\tgeneric division to generate INVALID and DIVZERO exceptions.\n-\n-2020-04-22  Fritz Reese  <foreese@gcc.gnu.org>\n-\n-\t* intrinsics/trigd.c, intrinsics/trigd_lib.inc, intrinsics/trigd.inc:\n-\tGuard against unavailable math functions.\n-\tUse suffixes from kinds.h based on the REAL kind.\n-\n-2020-04-22  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR libfortran/94694\n-\tPR libfortran/94586\n-\t* configure.ac: Add math func checks for fmaf, fma and fmal.  Add\n-\tHAVE_INLINE_BUILTIN_COPYSIGN check.\n-\t* c99_protos.h (copysign, fmaf, fma, fmal): Provide fallback\n-\tprototypes.\n-\t(HAVE_COPYSIGN, HAVE_FMAF, HAVE_FMA, HAVE_FMAL): Define if not\n-\tdefined and fallback version is provided.\n-\t* intrinsics/c99_functions.c (copysign, fmaf, fma, fmal): Provide\n-\tfallback implementations if possible\n-\t* configure: Regenerated.\n-\t* config.h.in: Regenerated.\n-\n-2020-04-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n-\n-\t* config/fpu-387.h (local_feraiseexcept) [__SSE_MATH__]:\n-\tRemove unneeded assignments to volatile memory.\n-\n-2020-04-01  Fritz Reese  <foreese@gcc.gnu.org>\n-\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/93871\n-\t* Makefile.am, Makefile.in: New make rule for intrinsics/trigd.c.\n-\t* gfortran.map: New routines for {sind, cosd, tand}X{r4, r8, r10, r16}.\n-\t* intrinsics/trigd.c, intrinsics/trigd_lib.inc, intrinsics/trigd.inc:\n-\tNew files. Defines native degree-valued trig functions.\n-\n-2020-02-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/93599\n-\t* io/async.c (destroy_adv_cond): Do not destroy lock.\n-\t(async_io): Make sure au->lock is locked for finishing of thread.\n-\tDo not lock/unlock around signalling emptysignal. Unlock au->lock\n-\tbefore return.\n-\t(init_adv_cond): Do not initialize lock.\n-\t(enqueue_transfer): Unlock after signal.\n-\t(enqueue_done_id): Likewise.\n-\t(enqueue_done): Likewise.\n-\t(enqueue_close): Likewise.\n-\t(enqueue_data_transfer): Likewise.\n-\t(async_wait_id): Do not lock/unlock around signalling au->work.\n-\t(async_wait): Unlock after signal.\n-\t* io/async.h (SIGNAL): Add comment about needed au->lock.\n-\tRemove locking/unlocking of advcond->lock.\n-\t(WAIT_SIGNAL_MUTEX): Add comment. Remove locking/unlocking of\n-\tadvcond->lock.  Unlock mutex only at the end.  Loop on\n-\t__ghread_cond_wait returning zero.\n-\t(REVOKE_SIGNAL): Add comment. Remove locking/unlocking of\n-\tadvcond->lock.\n-\t(struct adv_cond): Remove mutex from struct.\n-\n-2020-02-12  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\tPR libstdc++/79193\n-\tPR libstdc++/88999\n-\n-\t* configure: Regenerated.\n-\n-2020-01-24  Maciej W. Rozycki  <macro@wdc.com>\n-\n-\t* configure.ac: Handle `--with-toolexeclibdir='.\n-\t* Makefile.in: Regenerate.\n-\t* aclocal.m4: Regenerate.\n-\t* configure: Regenerate.\n-\n-2020-01-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR libfortran/93234\n-\t* io/unit.c (set_internal_unit): Set round and sign flags\n-\tcorrectly.\n-\n-2020-01-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR libfortran/90374\n-\t* io/format.c (parse_format_list): Zero width not allowed with\n-\tFMT_D.\n-\t* io/write_float.def (build_float_string): Include range of\n-\thigher exponent values that require wider width.\n-\n-2020-01-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR libfortran/90374\n-\t* io/format.c (parse_format_list): Implement the E0 exponent\n-\twidth to provide smallest possible width for exponent fields.\n-\tRefactor code for correct parsing and better readability of the\n-\tcode.\n-\t* io/io.h (write_real_w0): Change interface to pass in pointer\n-\tto fnode.\n-\t* io/transfer.c: Update all calls to write_real_w0 to use the\n-\tnew interface.\n-\t* io/write.c ((write_real_w0): Use the new interface with fnode\n-\tto access both the decimal precision and exponent widths used in\n-\tbuild_float_string.\n-\t* io/write_float.def (build_float_string): Use the passed in\n-\texponent width to calculate the used width in the case of E0.\n-\n-2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tUpdate copyright years.\n \f\n-Copyright (C) 2020 Free Software Foundation, Inc.\n+Copyright (C) 2021 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "21e8799b65312e6231a2cd83991f8486fc25eccb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 1, "deletions": 8771, "changes": 8772, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618e665a0f406a7b35f449a54b322d49f8eb62af/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618e665a0f406a7b35f449a54b322d49f8eb62af/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=618e665a0f406a7b35f449a54b322d49f8eb62af"}]}