{"sha": "5c5214a92e6291e8f811f24cf838a8ab40edbbf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM1MjE0YTkyZTYyOTFlOGY4MTFmMjRjZjgzOGE4YWI0MGVkYmJmMA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-05-01T00:08:17Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-05-01T00:08:17Z"}, "message": "tree.h (SET_ARRAY_OR_VECTOR_CHECK): Rename to SET_OR_ARRAY_CHECK and adjust definition accordingly.\n\n\t* tree.h (SET_ARRAY_OR_VECTOR_CHECK): Rename to SET_OR_ARRAY_CHECK\n\tand adjust definition accordingly.\n\t(TYPE_DOMAIN): Allow only SET_TYPE and ARRAY_TYPE.\n\t(TYPE_DEBUG_REPRESENTATION_TYPE): Allow only VECTOR_TYPE.\n\t* expr.c (store_constructor): Do not access TYPE_DOMAIN of a\n\tVECTOR_TYPE.\n\nFrom-SVN: r81373", "tree": {"sha": "f8771ff05ff7ef4e27ee7846ed2bc198dd9cdba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8771ff05ff7ef4e27ee7846ed2bc198dd9cdba9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c5214a92e6291e8f811f24cf838a8ab40edbbf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5214a92e6291e8f811f24cf838a8ab40edbbf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5214a92e6291e8f811f24cf838a8ab40edbbf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5214a92e6291e8f811f24cf838a8ab40edbbf0/comments", "author": null, "committer": null, "parents": [{"sha": "672149847fcde1b055ddbcfff7849e3a6a4043aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672149847fcde1b055ddbcfff7849e3a6a4043aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672149847fcde1b055ddbcfff7849e3a6a4043aa"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "76b6a981938efc805edcb88835950dabe45075bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5214a92e6291e8f811f24cf838a8ab40edbbf0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5214a92e6291e8f811f24cf838a8ab40edbbf0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c5214a92e6291e8f811f24cf838a8ab40edbbf0", "patch": "@@ -1,3 +1,12 @@\n+2004-04-30  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* tree.h (SET_ARRAY_OR_VECTOR_CHECK): Rename to SET_OR_ARRAY_CHECK\n+\tand adjust definition accordingly.\n+\t(TYPE_DOMAIN): Allow only SET_TYPE and ARRAY_TYPE.\n+\t(TYPE_DEBUG_REPRESENTATION_TYPE): Allow only VECTOR_TYPE.\n+\t* expr.c (store_constructor): Do not access TYPE_DOMAIN of a\n+\tVECTOR_TYPE.\n+\n 2004-04-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/14587\n@@ -29,18 +38,18 @@\n \t(legitimize_tls_address): Call s390_emit_tls_call_insn instead of\n \temit_call_insn.\n \t(s390_emit_prologue): Use s390_emit_call instead of emit_call_insn.\n-\t(s390_emit_epilogue): Like s390_emit_prologue. Parameter for sibcalls \n+\t(s390_emit_epilogue): Like s390_emit_prologue. Parameter for sibcalls\n \tadded.\n-\t* config/s390/s390.h (SIBCALL_REGNUM): New macro representing the \n+\t* config/s390/s390.h (SIBCALL_REGNUM): New macro representing the\n \tregister number used to hold the target address for sibcalls.\n \t* config/s390/s390.md (\"sibcall\", \"sibcall_value\", \"sibcall_epilogue\"):\n \tNew expanders.\n-\t(\"*sibcall_br\", \"*sibcall_brc\", \"*sibcall_brcl\", \"*sibcall_value_br\", \n+\t(\"*sibcall_br\", \"*sibcall_brc\", \"*sibcall_brcl\", \"*sibcall_value_br\",\n \t\"*sibcall_value_brc\", \"*sibcall_value_brcl\"): New insns.\n-\t(\"call_exp\", \"call_value_exp\", \"call_value_tls\", \"call_value_tls_exp\"): \n+\t(\"call_exp\", \"call_value_exp\", \"call_value_tls\", \"call_value_tls_exp\"):\n \tExpanders removed.\n \t(\"call\", \"call_value\"): Call s390_emit_call to emit the call patterns.\n-\t(\"*bras\", \"*brasl\", \"*bras_r\", \"*brasl_r\", \"*bras_tls\", \"*brasl_tls\", \n+\t(\"*bras\", \"*brasl\", \"*bras_r\", \"*brasl_r\", \"*bras_tls\", \"*brasl_tls\",\n \t\"*basr\", \"*basr_r\", \"*basr_tls\"): Added constraint: !SIBLING_CALL_P.\n \t(\"epilogue\"): Changed the call to s390_emit_epilogue to use the\n \tnew parameter.\n@@ -205,15 +214,15 @@\n \t(simplify_relational_operation_1): New function.\n \t(simplify_ternary_operation): simplify_relational_operation\n \tmay now return another relational expression.\n-\t(simplify_rtx): Remove unnecessary temp variable. \n+\t(simplify_rtx): Remove unnecessary temp variable.\n \n 2004-04-29  Uros Bizjak  <uros@kss-loka.si>\n \n \t* reg-stack.c (swap_to_top): New function.\n \t(subst_stack_regs_pat): UNSPEC_FPATAN, UNSPEC_FYL2X: Use\n \tswap_to_top().\n \t(subst_stack_regs_pat): UNSPEC_FSCALE: Remove.\n-\t(subst_stack_regs_pat): Handle UNSPEC_FSCALE_FRACT and \n+\t(subst_stack_regs_pat): Handle UNSPEC_FSCALE_FRACT and\n \tUNSPEC_FSCALE_EXP.\n \n \t* config/i386/i386.md (UNSPEC_FSCALE): Remove.\n@@ -279,7 +288,7 @@\n \n 2004-04-28  Ulrich Weigand  <uweigand@de.ibm.com>\n \n-\t* gcse.c (find_moveable_store): Do not accept store insns with \n+\t* gcse.c (find_moveable_store): Do not accept store insns with\n \tREG_EH_REGION note.\n \n 2004-04-28  Paul Brook  <paul@codesourcery.com>\n@@ -313,7 +322,7 @@\n \tcallers.\n \t(multiple_reg_loc_descriptor, reg_loc_descriptor): Use gcc register\n \tnumber for indexing hard_regno_nregs array.\n-\t\n+\n 2004-04-27  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/darwin.h (STARTFILE_SPEC): Use %s to find crt2.o."}, {"sha": "9f246dcf6a3ac3710a5403ecb4686b0afd4e3ab5", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5214a92e6291e8f811f24cf838a8ab40edbbf0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5214a92e6291e8f811f24cf838a8ab40edbbf0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5c5214a92e6291e8f811f24cf838a8ab40edbbf0", "patch": "@@ -4723,7 +4723,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n       tree elt;\n       int i;\n       int need_to_clear;\n-      tree domain = TYPE_DOMAIN (type);\n+      tree domain;\n       tree elttype = TREE_TYPE (type);\n       int const_bounds_p;\n       HOST_WIDE_INT minelt = 0;\n@@ -4733,13 +4733,14 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n       int elt_size = 0;\n       unsigned n_elts = 0;\n \n-      /* Vectors are like arrays, but the domain is stored via an array\n-\t type indirectly.  */\n-      if (TREE_CODE (type) == VECTOR_TYPE)\n+      if (TREE_CODE (type) == ARRAY_TYPE)\n+\tdomain = TYPE_DOMAIN (type);\n+      else\n+\t/* Vectors do not have domains; look up the domain of\n+\t   the array embedded in the debug representation type.\n+\t   FIXME Would probably be more efficient to treat vectors\n+\t   separately from arrays.  */\n \t{\n-\t  /* Note that although TYPE_DEBUG_REPRESENTATION_TYPE uses\n-\t     the same field as TYPE_DOMAIN, we are not guaranteed that\n-\t     it always will.  */\n \t  domain = TYPE_DEBUG_REPRESENTATION_TYPE (type);\n \t  domain = TYPE_DOMAIN (TREE_TYPE (TYPE_FIELDS (domain)));\n \t  if (REG_P (target) && VECTOR_MODE_P (GET_MODE (target)))"}, {"sha": "0f7e7eda5f40b7cac1621d00062b116c656ec4ea", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5214a92e6291e8f811f24cf838a8ab40edbbf0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5214a92e6291e8f811f24cf838a8ab40edbbf0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5c5214a92e6291e8f811f24cf838a8ab40edbbf0", "patch": "@@ -483,8 +483,8 @@ extern void tree_operand_check_failed (int, enum tree_code,\n #define FUNC_OR_METHOD_CHECK(T)\tTREE_CHECK2 (T, FUNCTION_TYPE, METHOD_TYPE)\n #define PTR_OR_REF_CHECK(T)\tTREE_CHECK2 (T, POINTER_TYPE, REFERENCE_TYPE)\n \n-#define SET_ARRAY_OR_VECTOR_CHECK(T) \\\n-  TREE_CHECK3 (T, ARRAY_TYPE, SET_TYPE, VECTOR_TYPE)\n+#define SET_OR_ARRAY_CHECK(T) \\\n+  TREE_CHECK2 (T, ARRAY_TYPE, SET_TYPE)\n \n #define REC_OR_UNION_CHECK(T)\t\\\n   TREE_CHECK3 (T, RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE)\n@@ -1075,7 +1075,7 @@ struct tree_block GTY(())\n #define TYPE_MODE(NODE) (TYPE_CHECK (NODE)->type.mode)\n #define TYPE_ORIG_SIZE_TYPE(NODE) (INTEGER_TYPE_CHECK (NODE)->type.values)\n #define TYPE_VALUES(NODE) (ENUMERAL_TYPE_CHECK (NODE)->type.values)\n-#define TYPE_DOMAIN(NODE) (SET_ARRAY_OR_VECTOR_CHECK (NODE)->type.values)\n+#define TYPE_DOMAIN(NODE) (SET_OR_ARRAY_CHECK (NODE)->type.values)\n #define TYPE_FIELDS(NODE) (REC_OR_UNION_CHECK (NODE)->type.values)\n #define TYPE_METHODS(NODE) (REC_OR_UNION_CHECK (NODE)->type.maxval)\n #define TYPE_VFIELD(NODE) (REC_OR_UNION_CHECK (NODE)->type.minval)\n@@ -1101,7 +1101,7 @@ struct tree_block GTY(())\n /* For a VECTOR_TYPE node, this describes a different type which is emitted\n    in the debugging output.  We use this to describe a vector as a\n    structure containing an array.  */\n-#define TYPE_DEBUG_REPRESENTATION_TYPE(NODE) (TYPE_CHECK (NODE)->type.values)\n+#define TYPE_DEBUG_REPRESENTATION_TYPE(NODE) (VECTOR_TYPE_CHECK (NODE)->type.values)\n \n /* For aggregate types, information about this type, as a base type\n    for itself.  Used in a language-dependent way for types that are"}]}