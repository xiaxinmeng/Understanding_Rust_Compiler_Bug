{"sha": "16ae29f1e617a0d0cc43d59b3082faf54bc436bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZhZTI5ZjFlNjE3YTBkMGNjNDNkNTliMzA4MmZhZjU0YmM0MzZiYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-09-15T09:43:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-15T09:43:52Z"}, "message": "cp-tree.h (struct lang_decl_flags): Remove needs_final_overrider.\n\n\t* cp-tree.h (struct lang_decl_flags): Remove\n\tneeds_final_overrider.\n\t(DECL_NEEDS_FINAL_OVERRIDER_P): Remove.\n\t* decl.c (duplicate_decls): Do not copy DECL_NEEDS_FINAL_OVERRIDER_P.\n\t* class.c (finish_struct_bits): Correct comment about\n\tCLASSTYPE_PURE_VIRTUALS.\n\t* search.c (get_pure_virtuals): Remove useless loop.\n\nFrom-SVN: r87541", "tree": {"sha": "1082845093d41243e0a6dc854bbb9503253f2fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1082845093d41243e0a6dc854bbb9503253f2fe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16ae29f1e617a0d0cc43d59b3082faf54bc436bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ae29f1e617a0d0cc43d59b3082faf54bc436bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16ae29f1e617a0d0cc43d59b3082faf54bc436bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ae29f1e617a0d0cc43d59b3082faf54bc436bb/comments", "author": null, "committer": null, "parents": [{"sha": "a45f71f53768d5be6e5dac1906a3bd2bee19e38b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45f71f53768d5be6e5dac1906a3bd2bee19e38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45f71f53768d5be6e5dac1906a3bd2bee19e38b"}], "stats": {"total": 41, "additions": 15, "deletions": 26}, "files": [{"sha": "a2bdd496aaeed42f0ce5cf992374e0a7749b93d7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ae29f1e617a0d0cc43d59b3082faf54bc436bb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ae29f1e617a0d0cc43d59b3082faf54bc436bb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=16ae29f1e617a0d0cc43d59b3082faf54bc436bb", "patch": "@@ -1,3 +1,13 @@\n+2004-09-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (struct lang_decl_flags): Remove\n+\tneeds_final_overrider.\n+\t(DECL_NEEDS_FINAL_OVERRIDER_P): Remove.\n+\t* decl.c (duplicate_decls): Do not copy DECL_NEEDS_FINAL_OVERRIDER_P.\n+\t* class.c (finish_struct_bits): Correct comment about\n+\tCLASSTYPE_PURE_VIRTUALS.\n+\t* search.c (get_pure_virtuals): Remove useless loop.\n+\n 2004-09-14  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/17324"}, {"sha": "d31295a87a637b269c846e5fe13b734d86f26bf8", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ae29f1e617a0d0cc43d59b3082faf54bc436bb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ae29f1e617a0d0cc43d59b3082faf54bc436bb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=16ae29f1e617a0d0cc43d59b3082faf54bc436bb", "patch": "@@ -1439,16 +1439,16 @@ finish_struct_bits (tree t)\n     }\n \n   if (BINFO_N_BASE_BINFOS (TYPE_BINFO (t)) && TYPE_POLYMORPHIC_P (t))\n-    /* For a class w/o baseclasses, `finish_struct' has set\n-       CLASS_TYPE_ABSTRACT_VIRTUALS correctly (by definition).\n+    /* For a class w/o baseclasses, 'finish_struct' has set\n+       CLASSTYPE_PURE_VIRTUALS correctly (by definition).\n        Similarly for a class whose base classes do not have vtables.\n        When neither of these is true, we might have removed abstract\n        virtuals (by providing a definition), added some (by declaring\n        new ones), or redeclared ones from a base class.  We need to\n        recalculate what's really an abstract virtual at this point (by\n        looking in the vtables).  */\n     get_pure_virtuals (t);\n-\n+  \n   /* If this type has a copy constructor or a destructor, force its\n      mode to be BLKmode, and force its TREE_ADDRESSABLE bit to be\n      nonzero.  This will cause it to be passed by invisible reference"}, {"sha": "5d788af0d1bb9df8873a68acbb4f64d6af78df76", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ae29f1e617a0d0cc43d59b3082faf54bc436bb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ae29f1e617a0d0cc43d59b3082faf54bc436bb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=16ae29f1e617a0d0cc43d59b3082faf54bc436bb", "patch": "@@ -1522,16 +1522,15 @@ struct lang_decl_flags GTY(())\n   unsigned use_template : 2;\n   unsigned nonconverting : 1;\n   unsigned not_really_extern : 1;\n-  unsigned needs_final_overrider : 1;\n   unsigned initialized_in_class : 1;\n   unsigned assignment_operator_p : 1;\n-\n   unsigned u1sel : 1;\n+ \n   unsigned u2sel : 1;\n   unsigned can_be_full : 1;\n   unsigned this_thunk_p : 1;\n   unsigned repo_available_p : 1;\n-  unsigned dummy : 3;\n+  unsigned dummy : 4;\n \n   union lang_decl_u {\n     /* In a FUNCTION_DECL for which DECL_THUNK_P holds, this is\n@@ -1883,11 +1882,6 @@ struct lang_decl GTY(())\n #define DECL_PURE_VIRTUAL_P(NODE) \\\n   (DECL_LANG_SPECIFIC (NODE)->decl_flags.pure_virtual)\n \n-/* Nonzero for FUNCTION_DECL means that this member function\n-   must be overridden by derived classes.  */\n-#define DECL_NEEDS_FINAL_OVERRIDER_P(NODE) \\\n-  (DECL_LANG_SPECIFIC (NODE)->decl_flags.needs_final_overrider)\n-\n /* True (in a FUNCTION_DECL) if NODE is a virtual function that is an\n    invalid overrider for a function from a base class.  Once we have\n    complained about an invalid overrider we avoid complaining about it"}, {"sha": "6128598f8b800c185df7ac27c6ca5721b01aa712", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ae29f1e617a0d0cc43d59b3082faf54bc436bb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ae29f1e617a0d0cc43d59b3082faf54bc436bb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=16ae29f1e617a0d0cc43d59b3082faf54bc436bb", "patch": "@@ -1582,7 +1582,6 @@ duplicate_decls (tree newdecl, tree olddecl)\n       DECL_STATIC_DESTRUCTOR (newdecl) |= DECL_STATIC_DESTRUCTOR (olddecl);\n       DECL_PURE_VIRTUAL_P (newdecl) |= DECL_PURE_VIRTUAL_P (olddecl);\n       DECL_VIRTUAL_P (newdecl) |= DECL_VIRTUAL_P (olddecl);\n-      DECL_NEEDS_FINAL_OVERRIDER_P (newdecl) |= DECL_NEEDS_FINAL_OVERRIDER_P (olddecl);\n       DECL_THIS_STATIC (newdecl) |= DECL_THIS_STATIC (olddecl);\n       if (DECL_OVERLOADED_OPERATOR_P (olddecl) != ERROR_MARK)\n \tSET_OVERLOADED_OPERATOR_CODE"}, {"sha": "99a945352e1f96ea7971df5a730053d127e7187c", "filename": "gcc/cp/search.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ae29f1e617a0d0cc43d59b3082faf54bc436bb/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ae29f1e617a0d0cc43d59b3082faf54bc436bb/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=16ae29f1e617a0d0cc43d59b3082faf54bc436bb", "patch": "@@ -1908,20 +1908,6 @@ get_pure_virtuals (tree type)\n \n   /* Put the pure virtuals in dfs order.  */\n   CLASSTYPE_PURE_VIRTUALS (type) = nreverse (CLASSTYPE_PURE_VIRTUALS (type));\n-\n-  for (vbases = CLASSTYPE_VBASECLASSES (type), ix = 0;\n-       VEC_iterate (tree, vbases, ix, binfo); ix++)\n-    {\n-      tree virtuals;\n-      \n-      for (virtuals = BINFO_VIRTUALS (binfo); virtuals;\n-\t   virtuals = TREE_CHAIN (virtuals))\n-\t{\n-\t  tree base_fndecl = BV_FN (virtuals);\n-\t  if (DECL_NEEDS_FINAL_OVERRIDER_P (base_fndecl))\n-\t    error (\"`%#D' needs a final overrider\", base_fndecl);\n-\t}\n-    }\n }\n \f\n /* DEPTH-FIRST SEARCH ROUTINES.  */"}]}