{"sha": "83e9bc792ef10d08bb952a961e8c6f567521d28d", "node_id": "C_kwDOANBUbNoAKDgzZTliYzc5MmVmMTBkMDhiYjk1MmE5NjFlOGM2ZjU2NzUyMWQyOGQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-12T11:40:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-12T11:40:43Z"}, "message": "phiopt: Remove unnecessary checks from spaceship_replacement [PR106506]\n\nThose 2 checks were just me trying to be extra careful, the\n(phires & 1) == phires and variants it is folded to of course make only sense\nfor the -1/0/1/2 result spaceship, for -1/0/1 one can just use comparisons of\nphires.  We only floating point spaceship if nans aren't honored, so the\n2 case is ignored, and if it is, with Aldy's changes we can simplify the\n2 case away from the phi but the (phires & 1) == phires stayed.  It is safe\nto treat the phires comparison as phires >= 0 even then.\n\n2022-08-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/106506\n\t* tree-ssa-phiopt.cc (spaceship_replacement): Don't punt for\n\tis_cast or orig_use_lhs cases if phi_bb has 3 predecessors.\n\n\t* g++.dg/opt/pr94589-2.C: New test.", "tree": {"sha": "ed1caecef894aff26635abfc664a66309310c01f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed1caecef894aff26635abfc664a66309310c01f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83e9bc792ef10d08bb952a961e8c6f567521d28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e9bc792ef10d08bb952a961e8c6f567521d28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83e9bc792ef10d08bb952a961e8c6f567521d28d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e9bc792ef10d08bb952a961e8c6f567521d28d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cc0d3ebaee4b54280ff0466d8e5b351a3b5bacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc0d3ebaee4b54280ff0466d8e5b351a3b5bacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc0d3ebaee4b54280ff0466d8e5b351a3b5bacc"}], "stats": {"total": 6, "additions": 1, "deletions": 5}, "files": [{"sha": "e9ef84b1912336954c946286c53a63970f8446f2", "filename": "gcc/testsuite/g++.dg/opt/pr94589-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e9bc792ef10d08bb952a961e8c6f567521d28d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e9bc792ef10d08bb952a961e8c6f567521d28d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-2.C?ref=83e9bc792ef10d08bb952a961e8c6f567521d28d", "patch": "@@ -1,7 +1,7 @@\n // PR tree-optimization/94589\n // { dg-do compile { target c++20 } }\n // { dg-options \"-O2 -g0 -ffast-math -fdump-tree-optimized\" }\n-// { dg-final { scan-tree-dump-times \"\\[ij]_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) \\[ij]_\\[0-9]+\\\\(D\\\\)\" 12 \"optimized\" { xfail *-*-* } } }\n+// { dg-final { scan-tree-dump-times \"\\[ij]_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) \\[ij]_\\[0-9]+\\\\(D\\\\)\" 12 \"optimized\" } }\n // { dg-final { scan-tree-dump-times \"i_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) 5\\\\.0\" 12 \"optimized\" } }\n \n #include <compare>"}, {"sha": "d5f2ba8be1c33e3ea441a61e9dbf8867aee93a98", "filename": "gcc/tree-ssa-phiopt.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e9bc792ef10d08bb952a961e8c6f567521d28d/gcc%2Ftree-ssa-phiopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e9bc792ef10d08bb952a961e8c6f567521d28d/gcc%2Ftree-ssa-phiopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.cc?ref=83e9bc792ef10d08bb952a961e8c6f567521d28d", "patch": "@@ -2448,8 +2448,6 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n \treturn false;\n       if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (orig_use_lhs))\n \treturn false;\n-      if (EDGE_COUNT (phi_bb->preds) != 4)\n-\treturn false;\n       if (!single_imm_use (orig_use_lhs, &use_p, &use_stmt))\n \treturn false;\n \n@@ -2467,8 +2465,6 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n       orig_use_lhs = gimple_assign_lhs (use_stmt);\n       if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (orig_use_lhs))\n \treturn false;\n-      if (EDGE_COUNT (phi_bb->preds) != 4)\n-\treturn false;\n       if (!single_imm_use (orig_use_lhs, &use_p, &use_stmt))\n \treturn false;\n     }"}]}