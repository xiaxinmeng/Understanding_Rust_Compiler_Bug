{"sha": "821c5063f9ccc964cb109adf6ab64f75a2c617b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIxYzUwNjNmOWNjYzk2NGNiMTA5YWRmNmFiNjRmNzVhMmM2MTdiNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-22T18:40:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-22T18:40:52Z"}, "message": "type_traits_fwd.h: New, forward declarations.\n\n2004-12-22  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits_fwd.h: New, forward declarations.\n\t* include/tr1/type_traits: Clean-up.\n\t* include/Makefile.am: Add.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r92493", "tree": {"sha": "98080df921345c88b76dc42b905072ff682f3799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98080df921345c88b76dc42b905072ff682f3799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/821c5063f9ccc964cb109adf6ab64f75a2c617b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821c5063f9ccc964cb109adf6ab64f75a2c617b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821c5063f9ccc964cb109adf6ab64f75a2c617b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821c5063f9ccc964cb109adf6ab64f75a2c617b4/comments", "author": null, "committer": null, "parents": [{"sha": "dfb5c52315ecc5b6ebabf2d7cb3d3d69f35a378b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb5c52315ecc5b6ebabf2d7cb3d3d69f35a378b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb5c52315ecc5b6ebabf2d7cb3d3d69f35a378b"}], "stats": {"total": 320, "additions": 237, "deletions": 83}, "files": [{"sha": "f7fcd3dddecc21ca74da80df00e99817c99a0ae6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821c5063f9ccc964cb109adf6ab64f75a2c617b4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821c5063f9ccc964cb109adf6ab64f75a2c617b4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=821c5063f9ccc964cb109adf6ab64f75a2c617b4", "patch": "@@ -1,3 +1,10 @@\n+2004-12-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits_fwd.h: New, forward declarations.\n+\t* include/tr1/type_traits: Clean-up.\n+\t* include/Makefile.am: Add.\n+\t* include/Makefile.in: Regenerate.\n+\n 2004-12-20  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/27_io/basic_istream/peek/wchar_t/1.cc: New."}, {"sha": "ba615fa84aac1cc32f3fd318cf57dd3bcc203374", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821c5063f9ccc964cb109adf6ab64f75a2c617b4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821c5063f9ccc964cb109adf6ab64f75a2c617b4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=821c5063f9ccc964cb109adf6ab64f75a2c617b4", "patch": "@@ -232,7 +232,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/utility \\\n-\t${tr1_srcdir}/type_traits\n+\t${tr1_srcdir}/type_traits \\\n+\t${tr1_srcdir}/type_traits_fwd.h\n \n \n # This is the common subset of files that all three \"C\" header models use."}, {"sha": "87470b28e603665cc77fabb0d6d5129643505ba8", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821c5063f9ccc964cb109adf6ab64f75a2c617b4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821c5063f9ccc964cb109adf6ab64f75a2c617b4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=821c5063f9ccc964cb109adf6ab64f75a2c617b4", "patch": "@@ -449,7 +449,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/utility \\\n-\t${tr1_srcdir}/type_traits\n+\t${tr1_srcdir}/type_traits \\\n+\t${tr1_srcdir}/type_traits_fwd.h\n \n \n # This is the common subset of files that all three \"C\" header models use."}, {"sha": "3381ccb57ecf6a7d850c06c486fdf7f6a5ffec2b", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 14, "deletions": 81, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821c5063f9ccc964cb109adf6ab64f75a2c617b4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821c5063f9ccc964cb109adf6ab64f75a2c617b4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=821c5063f9ccc964cb109adf6ab64f75a2c617b4", "patch": "@@ -26,7 +26,7 @@\n #define _TYPE_TRAITS 1\n \n #include <bits/c++config.h>\n-#include <cstddef>\n+#include <tr1/type_traits_fwd.h>\n \n // namespace std::tr1\n namespace std\n@@ -119,33 +119,16 @@ namespace tr1\n     struct is_reference<_Tp&>\n     : public true_type { };\n   \n-  template<typename _Tp>\n-    struct is_member_object_pointer;\n-  \n-  template<typename _Tp>\n-    struct is_member_function_pointer;   \n-\n-  template<typename _Tp>\n-    struct is_enum;\n-  \n-  template<typename _Tp>\n-    struct is_union;\n-  \n-  template<typename _Tp>\n-    struct is_class;\n-\n   template<typename _Tp>\n     struct __is_function_helper\n     : public __sfinae_types\n     {\n     private:\n       template<typename>\n-        static __one\n-        __test(...);\n+        static __one __test(...);\n \n       template<typename _Up>\n-        static __two\n-        __test(_Up (*) [1]);\n+        static __two __test(_Up(*)[1]);\n     \n     public:\n       static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n@@ -178,25 +161,25 @@ namespace tr1\n \t\t\t\t       || is_void<_Tp>::value)>\n     { };\n \n-  template<typename _Tp>\n-    struct is_member_pointer\n-    : public integral_constant<bool,\n-\t\t\t       (is_member_object_pointer<_Tp>::value\n-\t\t\t\t|| is_member_function_pointer<_Tp>::value)>\n-    { };\n-  \n   template<typename _Tp>\n     struct is_scalar\n     : public integral_constant<bool, (is_arithmetic<_Tp>::value\n \t\t\t\t      || is_enum<_Tp>::value\n \t\t\t\t      || is_pointer<_Tp>::value\n \t\t\t\t      || is_member_pointer<_Tp>::value)>\n     { };\n-  \n+\n   template<typename _Tp>\n     struct is_compound\n     : public integral_constant<bool, !is_fundamental<_Tp>::value> { };\n-   \n+\n+  template<typename _Tp>\n+    struct is_member_pointer\n+    : public integral_constant<bool,\n+\t\t\t       (is_member_object_pointer<_Tp>::value\n+\t\t\t\t|| is_member_function_pointer<_Tp>::value)>\n+    { };\n+  \n   /// @brief  type properties [4.5.3].\n   template<typename>\n     struct is_const\n@@ -214,52 +197,10 @@ namespace tr1\n     struct is_volatile<_Tp volatile>\n     : public true_type { };\n \n-  template<typename _Tp>\n-    struct is_pod;\n-  \n-  template<typename _Tp>\n-    struct is_empty;\n-  \n-  template<typename _Tp>\n-    struct is_polymorphic;\n-  \n-  template<typename _Tp>\n-    struct is_abstract;\n-  \n-  template<typename _Tp>\n-    struct has_trivial_constructor;\n-  \n-  template<typename _Tp>\n-    struct has_trivial_copy;\n-\n-  template<typename _Tp>\n-    struct has_trivial_assign;\n-  \n-  template<typename _Tp>\n-    struct has_trivial_destructor;\n-  \n-  template<typename _Tp>\n-    struct has_nothrow_constructor;\n-  \n-  template<typename _Tp>\n-    struct has_nothrow_copy;\n-\n-  template<typename _Tp>\n-    struct has_nothrow_assign;\n-  \n-  template<typename _Tp>\n+  template<typename>\n     struct has_virtual_destructor\n     : public false_type { };\n   \n-  template<typename _Tp>\n-    struct is_signed;\n-  \n-  template<typename _Tp>\n-    struct is_unsigned;\n-   \n-  template<typename _Tp>\n-    struct alignment_of;\n-  \n   template<typename>\n     struct rank\n     : public integral_constant<std::size_t, 0> { };\n@@ -272,7 +213,7 @@ namespace tr1\n     struct rank<_Tp[]>\n     : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };\n    \n-  template<typename, unsigned = 0>\n+  template<typename, unsigned>\n     struct extent\n     : public integral_constant<std::size_t, 0> { };\n   \n@@ -299,12 +240,6 @@ namespace tr1\n     struct is_same<_Tp, _Tp>\n     : public true_type { };\n \n-  template<typename _From, typename _To>\n-    struct is_convertible;\n-  \n-  template<typename _Base, typename _Derived>\n-    struct is_base_of;\n-\n   /// @brief  const-volatile modifications [4.7.1].\n   template<typename _Tp>\n     struct remove_const\n@@ -403,8 +338,6 @@ namespace tr1\n     { typedef typename remove_reference<_Tp>::type*     type; };\n \n   /// @brief  other transformations [4.8].\n-  template<std::size_t _Len, std::size_t _Align>\n-    struct aligned_storage;\n \n #undef _DEFINE_SPEC_HELPER\n #undef _DEFINE_SPEC"}, {"sha": "46beade5819b3f792eb5a1e64910084aa442ae33", "filename": "libstdc++-v3/include/tr1/type_traits_fwd.h", "status": "added", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821c5063f9ccc964cb109adf6ab64f75a2c617b4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821c5063f9ccc964cb109adf6ab64f75a2c617b4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h?ref=821c5063f9ccc964cb109adf6ab64f75a2c617b4", "patch": "@@ -0,0 +1,212 @@\n+// TR1 type_traits -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+/** @file type_traits_fwd.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _TYPE_TRAITS_FWD_H\n+#define _TYPE_TRAITS_FWD_H 1\n+\n+#include <cstddef>\n+\n+// namespace std::tr1\n+namespace std\n+{\n+namespace tr1\n+{\n+  /// @brief  helper classes [4.3].\n+  template<typename _Tp, _Tp __v>\n+    struct integral_constant;\n+  typedef integral_constant<bool, true>     true_type;\n+  typedef integral_constant<bool, false>    false_type;\n+\n+  /// @brief  primary type categories [4.5.1].\n+  template<typename _Tp>\n+    struct is_void;\n+\n+  template<typename _Tp>\n+    struct is_integral;\n+\n+  template<typename _Tp>\n+    struct is_floating_point;\n+\n+  template<typename _Tp>\n+    struct is_array;\n+  \n+  template<typename _Tp>\n+    struct is_pointer;\n+ \n+  template<typename _Tp>\n+    struct is_reference;\n+\n+  template<typename _Tp>\n+    struct is_member_object_pointer;\n+  \n+  template<typename _Tp>\n+    struct is_member_function_pointer;   \n+\n+  template<typename _Tp>\n+    struct is_enum;\n+  \n+  template<typename _Tp>\n+    struct is_union;\n+  \n+  template<typename _Tp>\n+    struct is_class;\n+\n+  template<typename _Tp>\n+    struct is_function;\n+\n+  /// @brief  composite type traits [4.5.2].\n+  template<typename _Tp>\n+    struct is_arithmetic;\n+\n+  template<typename _Tp>\n+    struct is_fundamental;\n+\n+  template<typename _Tp>\n+    struct is_object;\n+\n+  template<typename _Tp>\n+    struct is_scalar;\n+\n+  template<typename _Tp>\n+    struct is_compound;\n+\n+  template<typename _Tp>\n+    struct is_member_pointer;\n+   \n+  /// @brief  type properties [4.5.3].\n+  template<typename _Tp>\n+    struct is_const;\n+  \n+  template<typename _Tp>\n+    struct is_volatile;\n+\n+  template<typename _Tp>\n+    struct is_pod;\n+  \n+  template<typename _Tp>\n+    struct is_empty;\n+  \n+  template<typename _Tp>\n+    struct is_polymorphic;\n+  \n+  template<typename _Tp>\n+    struct is_abstract;\n+  \n+  template<typename _Tp>\n+    struct has_trivial_constructor;\n+  \n+  template<typename _Tp>\n+    struct has_trivial_copy;\n+\n+  template<typename _Tp>\n+    struct has_trivial_assign;\n+  \n+  template<typename _Tp>\n+    struct has_trivial_destructor;\n+  \n+  template<typename _Tp>\n+    struct has_nothrow_constructor;\n+  \n+  template<typename _Tp>\n+    struct has_nothrow_copy;\n+\n+  template<typename _Tp>\n+    struct has_nothrow_assign;\n+  \n+  template<typename _Tp>\n+    struct has_virtual_destructor;\n+  \n+  template<typename _Tp>\n+    struct is_signed;\n+  \n+  template<typename _Tp>\n+    struct is_unsigned;\n+   \n+  template<typename _Tp>\n+    struct alignment_of;\n+  \n+  template<typename _Tp>\n+    struct rank;\n+  \n+  template<typename _Tp, unsigned _Uint = 0>\n+    struct extent;\n+  \n+  /// @brief  relationships between types [4.6].\n+  template<typename _Tp, typename _Up>\n+    struct is_same;\n+\n+  template<typename _From, typename _To>\n+    struct is_convertible;\n+\n+  template<typename _Base, typename _Derived>\n+    struct is_base_of;\n+\n+  /// @brief  const-volatile modifications [4.7.1].\n+  template<typename _Tp>\n+    struct remove_const;\n+  \n+  template<typename _Tp>\n+    struct remove_volatile;\n+  \n+  template<typename _Tp>\n+    struct remove_cv;\n+  \n+  template<typename _Tp>\n+    struct add_const;\n+   \n+  template<typename _Tp>\n+    struct add_volatile;\n+  \n+  template<typename _Tp>\n+    struct add_cv;\n+\n+  /// @brief  reference modifications [4.7.2].\n+  template<typename _Tp>\n+    struct remove_reference;\n+  \n+  template<typename _Tp>\n+    struct add_reference;\n+\n+  /// @brief  array modififications [4.7.3].\n+  template<typename _Tp>\n+    struct remove_extent;\n+\n+  template<typename _Tp>\n+    struct remove_all_extents;\n+\n+  /// @brief  pointer modifications [4.7.4].\n+  template<typename _Tp>\n+    struct remove_pointer;\n+  \n+  template<typename _Tp>\n+    struct add_pointer;\n+\n+  /// @brief  other transformations [4.8].\n+  template<std::size_t _Len, std::size_t _Align>\n+    struct aligned_storage;\n+}\n+}\n+\n+#endif"}]}