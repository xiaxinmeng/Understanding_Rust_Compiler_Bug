{"sha": "3e755d23ce40ee33be8a731a27aad19a799935b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3NTVkMjNjZTQwZWUzM2JlOGE3MzFhMjdhYWQxOWE3OTk5MzViNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-08T20:49:11Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-08T20:49:11Z"}, "message": "(finish_decl): When saving/discarding initializers,\n\ndon't check TREE_PERMANENT and TREE_STATIC.\n(finish_decl, finish_function): Pass new argument to\npermanent_allocation.\n\nFrom-SVN: r6722", "tree": {"sha": "5ea3aa4109ed3c8f28db4f87fe31cc947b82dfea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ea3aa4109ed3c8f28db4f87fe31cc947b82dfea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e755d23ce40ee33be8a731a27aad19a799935b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e755d23ce40ee33be8a731a27aad19a799935b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e755d23ce40ee33be8a731a27aad19a799935b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e755d23ce40ee33be8a731a27aad19a799935b7/comments", "author": null, "committer": null, "parents": [{"sha": "bb98bc58b6ca60c6e36f25d2051f5a242f52e9b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb98bc58b6ca60c6e36f25d2051f5a242f52e9b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb98bc58b6ca60c6e36f25d2051f5a242f52e9b0"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "889a185209fe97ec3807a827ee5f36fa3e47b097", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e755d23ce40ee33be8a731a27aad19a799935b7/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e755d23ce40ee33be8a731a27aad19a799935b7/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3e755d23ce40ee33be8a731a27aad19a799935b7", "patch": "@@ -3558,8 +3558,11 @@ finish_decl (decl, init, asmspec_tree)\n     }\n \n   /* ??? After 2.3, test (init != 0) instead of TREE_CODE.  */\n+  /* This test used to include TREE_PERMANENT, however, we have the same\n+     problem with initializers at the function level.  Such initializers get\n+     saved until the end of the function on the momentary_obstack.  */\n   if (!(TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))\n-      && temporary && TREE_PERMANENT (decl)\n+      && temporary\n       /* DECL_INITIAL is not defined in PARM_DECLs, since it shares\n \t space with DECL_ARG_TYPE.  */\n       && TREE_CODE (decl) != PARM_DECL)\n@@ -3572,10 +3575,12 @@ finish_decl (decl, init, asmspec_tree)\n \t to have a copy of the top-level decl's DECL_INLINE.  */\n       if (DECL_INITIAL (decl) != 0)\n \t{\n-\t  /* If this is a static const variable, then preserve the\n+\t  /* If this is a const variable, then preserve the\n \t     initializer instead of discarding it so that we can optimize\n \t     references to it.  */\n-\t  if (TREE_STATIC (decl) && TREE_READONLY (decl))\n+\t  /* This test used to include TREE_STATIC, but this won't be set\n+\t     for function level initializers.  */\n+\t  if (TREE_READONLY (decl))\n \t    {\n \t      preserve_initializer ();\n \t      /* Hack?  Set the permanent bit for something that is permanent,\n@@ -3616,7 +3621,7 @@ finish_decl (decl, init, asmspec_tree)\n   /* If we have gone back from temporary to permanent allocation,\n      actually free the temporary space that we no longer need.  */\n   if (temporary && !allocation_temporary_p ())\n-    permanent_allocation ();\n+    permanent_allocation (0);\n \n   /* At the end of a declaration, throw away any variable type sizes\n      of types defined inside that declaration.  There is no use\n@@ -6545,7 +6550,7 @@ finish_function (nested)\n   /* Switch back to allocating nodes permanently\n      until we start another function.  */\n   if (! nested)\n-    permanent_allocation ();\n+    permanent_allocation (1);\n \n   if (DECL_SAVED_INSNS (fndecl) == 0 && ! nested)\n     {"}]}