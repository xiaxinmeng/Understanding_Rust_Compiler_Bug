{"sha": "23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmYjllN2MxYzQwM2EyNTZiMTU4ZmRmYzk3ZjdmMzJmNjM2ZDNkMA==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2020-07-09T03:18:54Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2020-07-09T07:21:48Z"}, "message": "vect/testsuite: Adjust dumping for fully masking decision\n\nAs Richard S. suggested in the review of vector with length patch\nseries, we can use one message on \"partial vectors\" instead of\n\"fully with masking\".  This patch is to update the dumping string\nand related test cases.\n\nBootstrapped/regtested on aarch64-linux-gnu.\n\ngcc/ChangeLog:\n\n\t* tree-vect-loop.c (vect_analyze_loop_2): Update dumping string\n\tfor fully masking to be more common.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/sve/clastb_1.c: Update dumping string.\n\t* gcc.target/aarch64/sve/clastb_2.c: Likewise.\n\t* gcc.target/aarch64/sve/clastb_3.c: Likewise.\n\t* gcc.target/aarch64/sve/clastb_4.c: Likewise.\n\t* gcc.target/aarch64/sve/clastb_5.c: Likewise.\n\t* gcc.target/aarch64/sve/clastb_6.c: Likewise.\n\t* gcc.target/aarch64/sve/clastb_7.c: Likewise.", "tree": {"sha": "a5b8a994c8501737f6e314d317518496232ffe8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5b8a994c8501737f6e314d317518496232ffe8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1073b500e5d33af8b75567108a8c04fe2598df2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1073b500e5d33af8b75567108a8c04fe2598df2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1073b500e5d33af8b75567108a8c04fe2598df2b"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "f4445d443ac10202a926a056c10d4fdd4a0af8ab", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_1.c?ref=23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "patch": "@@ -17,5 +17,5 @@ condition_reduction (int *a, int min_v)\n   return last;\n }\n \n-/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"operating on partial vectors.\" \"vect\" } } */\n /* { dg-final { scan-assembler {\\tclastb\\ts[0-9]+, p[0-7], s[0-9]+, z[0-9]+\\.s} } } */"}, {"sha": "27d4cd94a3cf059626b66db31f081e2aea5cbbc5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_2.c?ref=23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "patch": "@@ -23,5 +23,5 @@ condition_reduction (TYPE *a, TYPE min_v)\n   return last;\n }\n \n-/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"operating on partial vectors.\" \"vect\" } } */\n /* { dg-final { scan-assembler {\\tclastb\\ts[0-9]+, p[0-7], s[0-9]+, z[0-9]+\\.s} } } */"}, {"sha": "597f8268413c981f06de596a24ec35ee7743876c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_3.c?ref=23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "patch": "@@ -5,5 +5,5 @@\n \n #include \"clastb_2.c\"\n \n-/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"operating on partial vectors.\" \"vect\" } } */\n /* { dg-final { scan-assembler {\\tclastb\\tb[0-9]+, p[0-7], b[0-9]+, z[0-9]+\\.b} } } */"}, {"sha": "788e29fe982f736f65d7c93c76fce52a21727448", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_4.c?ref=23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "patch": "@@ -5,5 +5,5 @@\n \n #include \"clastb_2.c\"\n \n-/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"operating on partial vectors.\" \"vect\" } } */\n /* { dg-final { scan-assembler {\\tclastb\\tw[0-9]+, p[0-7], w[0-9]+, z[0-9]+\\.h} } } */"}, {"sha": "0e7e20b69ec99226539c7b682865ab3cd74d8759", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_5.c?ref=23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "patch": "@@ -5,5 +5,5 @@\n \n #include \"clastb_2.c\"\n \n-/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"operating on partial vectors.\" \"vect\" } } */\n /* { dg-final { scan-assembler {\\tclastb\\td[0-9]+, p[0-7], d[0-9]+, z[0-9]+\\.d} } } */"}, {"sha": "b9d687e059787e15275e488a0a447de06f19e4c4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_6.c?ref=23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "patch": "@@ -21,5 +21,5 @@ condition_reduction (TYPE *a, TYPE min_v)\n   return last;\n }\n \n-/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"operating on partial vectors.\" \"vect\" } } */\n /* { dg-final { scan-assembler {\\tclastb\\ts[0-9]+, p[0-7], s[0-9]+, z[0-9]+\\.s} } } */"}, {"sha": "a9f1a6aea9892947dc4d521942b366ae9c65b2c9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_7.c?ref=23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "patch": "@@ -4,5 +4,5 @@\n #define TYPE double\n #include \"clastb_6.c\"\n \n-/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"operating on partial vectors.\" \"vect\" } } */\n /* { dg-final { scan-assembler {\\tclastb\\td[0-9]+, p[0-7], d[0-9]+, z[0-9]+\\.d} } } */"}, {"sha": "fb56ca48b68c0b83a8e45c7b5e7692b7547bd4bc", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fb9e7c1c403a256b158fdfc97f7f32f636d3d0/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=23fb9e7c1c403a256b158fdfc97f7f32f636d3d0", "patch": "@@ -2177,12 +2177,12 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n        && vect_verify_full_masking (loop_vinfo));\n   if (dump_enabled_p ())\n     {\n-      if (LOOP_VINFO_FULLY_MASKED_P (loop_vinfo))\n+      if (LOOP_VINFO_USING_PARTIAL_VECTORS_P (loop_vinfo))\n \tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"using a fully-masked loop.\\n\");\n+\t\t\t \"operating on partial vectors.\\n\");\n       else\n \tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"not using a fully-masked loop.\\n\");\n+\t\t\t \"operating only on full vectors.\\n\");\n     }\n \n   /* If epilog loop is required because of data accesses with gaps,"}]}