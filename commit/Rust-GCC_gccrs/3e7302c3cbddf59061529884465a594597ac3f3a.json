{"sha": "3e7302c3cbddf59061529884465a594597ac3f3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3MzAyYzNjYmRkZjU5MDYxNTI5ODg0NDY1YTU5NDU5N2FjM2YzYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-13T10:47:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-13T10:47:00Z"}, "message": "[multiple changes]\n\n2011-10-13  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb, sem_ch3.adb, impunit.adb, impunit.ads, sem_type.adb,\n\tprj-proc.adb, exp_ch9.adb, s-regpat.adb, sem_ch10.adb, sem_prag.adb,\n\tsem_ch12.adb, freeze.adb, sem_attr.adb, sem_attr.ads, gnatlink.adb,\n\tpar-ch6.adb, exp_ch6.adb, sem_ch4.adb, sem_ch6.adb, sem_ch8.adb,\n\tpar-util.adb, sem_ch13.adb, lib-xref.adb, g-trasym.adb, g-trasym.ads,\n\texp_aggr.adb, s-taprop-posix.adb: Minor reformatting.\n\n2011-10-13  Geert Bosch  <bosch@adacore.com>\n\n\t* s-gearop.adb: Minor comment additions.\n\nFrom-SVN: r179907", "tree": {"sha": "be019b118f5bc384e66967a00af32c87ecb403da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be019b118f5bc384e66967a00af32c87ecb403da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e7302c3cbddf59061529884465a594597ac3f3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7302c3cbddf59061529884465a594597ac3f3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7302c3cbddf59061529884465a594597ac3f3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7302c3cbddf59061529884465a594597ac3f3a/comments", "author": null, "committer": null, "parents": [{"sha": "8417f4b28eb60a8c3eae7d61726a57c468e19b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8417f4b28eb60a8c3eae7d61726a57c468e19b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8417f4b28eb60a8c3eae7d61726a57c468e19b8d"}], "stats": {"total": 242, "additions": 152, "deletions": 90}, "files": [{"sha": "c8602ce5911d6503e94ef5212005ecccc1493a98", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -1,3 +1,16 @@\n+2011-10-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch5.adb, sem_ch3.adb, impunit.adb, impunit.ads, sem_type.adb,\n+\tprj-proc.adb, exp_ch9.adb, s-regpat.adb, sem_ch10.adb, sem_prag.adb,\n+\tsem_ch12.adb, freeze.adb, sem_attr.adb, sem_attr.ads, gnatlink.adb,\n+\tpar-ch6.adb, exp_ch6.adb, sem_ch4.adb, sem_ch6.adb, sem_ch8.adb,\n+\tpar-util.adb, sem_ch13.adb, lib-xref.adb, g-trasym.adb, g-trasym.ads,\n+\texp_aggr.adb, s-taprop-posix.adb: Minor reformatting.\n+\n+2011-10-13  Geert Bosch  <bosch@adacore.com>\n+\n+\t* s-gearop.adb: Minor comment additions.\n+\n 2011-10-13  Fedor Rybin  <frybin@adacore.com>\n \n \t* gnat_ugn.texi: Add gnattest section."}, {"sha": "783772f01888a0f5eefcf467c74c7dae8fe619a1", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -3515,7 +3515,7 @@ package body Exp_Aggr is\n                            --  active, if this is a preelaborable unit or a\n                            --  predefined unit. This ensures that predefined\n                            --  units get the same level of constant folding in\n-                           --  Ada 95 and Ada 05, where their categorization\n+                           --  Ada 95 and Ada 2005, where their categorization\n                            --  has changed.\n \n                            declare"}, {"sha": "8d487727009cfb75eaa5f951ef52f0f8b7935adf", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -3466,8 +3466,8 @@ package body Exp_Ch5 is\n                --  remain there.\n \n                pragma Assert (First_Entity (Scope (Loop_Id)) = Loop_Id);\n-\n                Set_First_Entity (Scope (Loop_Id), Next_Entity (Loop_Id));\n+\n                if Last_Entity (Scope (Loop_Id)) = Loop_Id then\n                   Set_Last_Entity (Scope (Loop_Id), Empty);\n                end if;"}, {"sha": "5252e7ce4510a15926330cba091dc7f568370a8b", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -254,9 +254,9 @@ package body Exp_Ch6 is\n       Add_Extra_Actual_To_Call (Function_Call, Obj_Acc_Formal, Obj_Address);\n    end Add_Access_Actual_To_Build_In_Place_Call;\n \n-   --------------------------------------------------\n+   ------------------------------------------------------\n    -- Add_Unconstrained_Actuals_To_Build_In_Place_Call --\n-   --------------------------------------------------\n+   ------------------------------------------------------\n \n    procedure Add_Unconstrained_Actuals_To_Build_In_Place_Call\n      (Function_Call  : Node_Id;\n@@ -5285,13 +5285,13 @@ package body Exp_Ch6 is\n                      else\n                         SS_Allocator := New_Copy_Tree (Heap_Allocator);\n \n-                        --  The heap and pool allocators are marked\n+                        --  The heap and pool allocators are marked as\n                         --  Comes_From_Source since they correspond to an\n                         --  explicit user-written allocator (that is, it will\n                         --  only be executed on behalf of callers that call the\n-                        --  function as initialization for such an\n-                        --  allocator). This prevents errors when\n-                        --  No_Implicit_Heap_Allocations is in force.\n+                        --  function as initialization for such an allocator).\n+                        --  Prevents errors when No_Implicit_Heap_Allocations\n+                        --  is in force.\n \n                         Set_Comes_From_Source (Heap_Allocator, True);\n                         Set_Comes_From_Source (Pool_Allocator, True);\n@@ -8218,9 +8218,7 @@ package body Exp_Ch6 is\n \n       else\n          Add_Unconstrained_Actuals_To_Build_In_Place_Call\n-           (Func_Call,\n-            Function_Id,\n-            Alloc_Form => Secondary_Stack);\n+           (Func_Call, Function_Id, Alloc_Form => Secondary_Stack);\n          Caller_Object := Empty;\n \n          Establish_Transient_Scope (Object_Decl, Sec_Stack => True);"}, {"sha": "e02f4c0f1d9879c7f16e6e58b841057a5164a892", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -2934,8 +2934,7 @@ package body Exp_Ch9 is\n       Insert_Before (Context, Master_Decl);\n       Analyze (Master_Decl);\n \n-      --  Mark the enclosing scope and its associated construct as being task\n-      --  masters.\n+      --  Mark enclosing scope and its associated construct as task masters\n \n       Set_Has_Master_Entity (Master_Scop);\n "}, {"sha": "8c42fed255b929046bf3181d5218ba281e1d4c72", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -1409,7 +1409,6 @@ package body Freeze is\n                if Nkind (Decl) = N_Subprogram_Renaming_Declaration then\n                   if Error_Posted (Decl) then\n                      Set_Has_Completion (E);\n-\n                   else\n                      Build_And_Analyze_Renamed_Body (Decl, E, After);\n                   end if;\n@@ -1621,8 +1620,8 @@ package body Freeze is\n       --  Start of processing for Check_Current_Instance\n \n       begin\n-         --  In Ada 95, the (imprecise) rule is that the current instance of a\n-         --  limited type is aliased. In Ada 2005, limitedness must be\n+         --  In Ada 95, the (imprecise) rule is that the current instance\n+         --  of a limited type is aliased. In Ada 2005, limitedness must be\n          --  explicit: either a tagged type, or a limited record.\n \n          if Is_Limited_Type (Rec_Type)\n@@ -1651,6 +1650,7 @@ package body Freeze is\n          if Nkind (Decl) = N_Full_Type_Declaration then\n             declare\n                Tdef : constant Node_Id := Type_Definition (Decl);\n+\n             begin\n                if Nkind (Tdef) = N_Modular_Type_Definition then\n                   declare"}, {"sha": "ac2444e001e7ba05a66b2454ec6229345c2ef929", "filename": "gcc/ada/g-trasym.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fg-trasym.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fg-trasym.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -30,8 +30,8 @@\n ------------------------------------------------------------------------------\n \n --  This is the default implementation for platforms where the full capability\n---  is not supported. It returns tracebacks as lists of \"0x...\" strings\n---  corresponding to the addresses.\n+--  is not supported. It returns tracebacks as lists of LF separated strings of\n+--  the form \"0x...\" corresponding to the addresses.\n \n with Ada.Exceptions.Traceback; use Ada.Exceptions.Traceback;\n with System.Address_Image;\n@@ -51,8 +51,10 @@ package body GNAT.Traceback.Symbolic is\n       else\n          declare\n             Img : String := System.Address_Image (Traceback (Traceback'First));\n+\n             Result : String (1 .. (Img'Length + 3) * Traceback'Length);\n             Last   : Natural := 0;\n+\n          begin\n             for J in Traceback'Range loop\n                Img := System.Address_Image (Traceback (J));"}, {"sha": "4b30600adb37d97fd72abdfd872e420619d11732", "filename": "gcc/ada/g-trasym.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fg-trasym.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fg-trasym.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.ads?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -42,6 +42,10 @@\n --     OpenVMS Alpha and ia64\n --     Windows\n \n+--  Note: on targets other than those listed above, a dummy implementation of\n+--  the body returns a series of LF separated strings of the form \"0x...\"\n+--  corresponding to the addresses.\n+\n --  The routines provided in this package assume that your application has\n --  been compiled with debugging information turned on, since this information\n --  is used to build a symbolic traceback.\n@@ -87,8 +91,7 @@ package GNAT.Traceback.Symbolic is\n    pragma Elaborate_Body;\n \n    function Symbolic_Traceback (Traceback : Tracebacks_Array) return String;\n-   --  Build a string containing a symbolic traceback of the given call chain\n-   --\n+   --  Build a string containing a symbolic traceback of the given call chain.\n    --  Note: This procedure may be installed by Set_Trace_Decorator, to get a\n    --  symbolic traceback on all exceptions raised (see GNAT.Exception_Traces).\n "}, {"sha": "9a1aab4c071acd35fcd199d3d2e103f35313c7fd", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -1616,7 +1616,7 @@ begin\n                      if Arg'Length > 8\n                        and then\n                          (Arg (Arg'First + 6 .. Arg'First + 8) = \"rtp\"\n-                          or else Arg (Arg'Last - 2 .. Arg'Last) = \"rtp\")\n+                           or else Arg (Arg'Last - 2 .. Arg'Last) = \"rtp\")\n                      then\n                         Linker_Options.Increment_Last;\n                         Linker_Options.Table (Linker_Options.Last) :="}, {"sha": "dfe176bf38d5685fbea25b53aa6e5d7592cb5075", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -61,7 +61,7 @@ package body Impunit is\n    --  The following is a giant string list containing the names of all non-\n    --  implementation internal files, i.e. the complete list of files for\n    --  internal units which a program may legitimately WITH when operating in\n-   --  either Ada 95 or Ada 05 mode.\n+   --  either Ada 95 or Ada 2005 mode.\n \n    --  Note that this list should match the list of units documented in the\n    --  \"GNAT Library\" section of the GNAT Reference Manual. A unit listed here"}, {"sha": "be3e8d3c06a616f2912f71f7dbdacb77bf67ef78", "filename": "gcc/ada/impunit.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fimpunit.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fimpunit.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.ads?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -25,8 +25,9 @@\n \n --  This package contains data and functions used to determine if a given unit\n --  is an internal unit intended only for use by the implementation and which\n---  should not be directly WITH'ed by user code. It also checks for Ada 05\n---  units that should only be WITH'ed in Ada 05 mode.\n+--  should not be directly WITH'ed by user code. It also checks for Ada 2005\n+--  units that should only be WITH'ed in Ada 2005 mode, and Ada 2012 units\n+--  that should only be WITH'ed in Ada 2012 mode.\n \n with Types; use Types;\n "}, {"sha": "83a06e452f3aab06643d79c21fdf3dc5de9e3fa6", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -1910,9 +1910,9 @@ package body Lib.Xref is\n \n                      Op := Ultimate_Alias (Old_E);\n \n-                  --  Normal case of no alias present\n-                  --  we omit generated primitives like tagged equality,\n-                  --  that have no source representation.\n+                  --  Normal case of no alias present. We omit generated\n+                  --  primitives like tagged equality, that have no source\n+                  --  representation.\n \n                   else\n                      Op := Old_E;"}, {"sha": "cb0575b6fe6fe4a72ead30ee3c79a1cb6a9101d4", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -184,7 +184,7 @@ package body Ch6 is\n       Scope.Table (Scope.Last).Ecol := Start_Column;\n       Scope.Table (Scope.Last).Lreq := False;\n \n-      --  Ada 2005: scan leading NOT OVERRIDING indicator\n+      --  Ada 2005: Scan leading NOT OVERRIDING indicator\n \n       if Token = Tok_Not then\n          Scan;  -- past NOT"}, {"sha": "259cfb8e7890e51f9ef8a0ea2c1b00c96f304c92", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -201,7 +201,7 @@ package body Util is\n \n       --  Note: we deliberately do not emit these warnings when operating in\n       --  Ada 83 mode because in that case we assume the user is building\n-      --  legacy code anyway.\n+      --  legacy code anyway and is not interested in updating Ada versions.\n \n    end Check_Future_Keyword;\n "}, {"sha": "a46ee23bb3647e231e55091357e45b7f7ac02004", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -145,6 +145,7 @@ package body Prj.Proc is\n    procedure Recursive_Process\n      (In_Tree                : Project_Tree_Ref;\n       Project                : out Project_Id;\n+      Packages_To_Check      : String_List_Access;\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n@@ -1347,6 +1348,7 @@ package body Prj.Proc is\n    procedure Process\n      (In_Tree                : Project_Tree_Ref;\n       Project                : out Project_Id;\n+      Packages_To_Check      : String_List_Access;\n       Success                : out Boolean;\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n@@ -1361,6 +1363,7 @@ package body Prj.Proc is\n          From_Project_Node      => From_Project_Node,\n          From_Project_Node_Tree => From_Project_Node_Tree,\n          Env                    => Env,\n+         Packages_To_Check      => Packages_To_Check,\n          Reset_Tree             => Reset_Tree);\n \n       if Project_Qualifier_Of\n@@ -2325,6 +2328,7 @@ package body Prj.Proc is\n    procedure Process_Project_Tree_Phase_1\n      (In_Tree                : Project_Tree_Ref;\n       Project                : out Project_Id;\n+      Packages_To_Check      : String_List_Access;\n       Success                : out Boolean;\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n@@ -2349,6 +2353,7 @@ package body Prj.Proc is\n       Recursive_Process\n         (Project                => Project,\n          In_Tree                => In_Tree,\n+         Packages_To_Check      => Packages_To_Check,\n          From_Project_Node      => From_Project_Node,\n          From_Project_Node_Tree => From_Project_Node_Tree,\n          Env                    => Env,\n@@ -2482,6 +2487,7 @@ package body Prj.Proc is\n    procedure Recursive_Process\n      (In_Tree                : Project_Tree_Ref;\n       Project                : out Project_Id;\n+      Packages_To_Check      : String_List_Access;\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n@@ -2539,9 +2545,9 @@ package body Prj.Proc is\n                Recursive_Process\n                  (In_Tree                => In_Tree,\n                   Project                => New_Project,\n+                  Packages_To_Check      => Packages_To_Check,\n                   From_Project_Node      =>\n-                    Project_Node_Of\n-                      (With_Clause, From_Project_Node_Tree),\n+                    Project_Node_Of (With_Clause, From_Project_Node_Tree),\n                   From_Project_Node_Tree => From_Project_Node_Tree,\n                   Env                    => Env,\n                   Extended_By            => No_Project);\n@@ -2596,6 +2602,7 @@ package body Prj.Proc is\n             Prj.Part.Parse\n               (In_Tree           => From_Project_Node_Tree,\n                Project           => Loaded_Project,\n+               Packages_To_Check => Packages_To_Check,\n                Project_File_Name => Get_Name_String (List.Path),\n                Errout_Handling   => Prj.Part.Never_Finalize,\n                Current_Directory => Get_Name_String (Project.Directory.Name),\n@@ -2627,6 +2634,7 @@ package body Prj.Proc is\n                   Process_Project_Tree_Phase_1\n                     (In_Tree                => Tree,\n                      Project                => List.Project,\n+                     Packages_To_Check      => Packages_To_Check,\n                      Success                => Success,\n                      From_Project_Node      => Loaded_Project,\n                      From_Project_Node_Tree => From_Project_Node_Tree,\n@@ -2638,6 +2646,7 @@ package body Prj.Proc is\n                   Process_Project_Tree_Phase_1\n                     (In_Tree                => Tree,\n                      Project                => List.Project,\n+                     Packages_To_Check      => Packages_To_Check,\n                      Success                => Success,\n                      From_Project_Node      => Loaded_Project,\n                      From_Project_Node_Tree => From_Project_Node_Tree,\n@@ -2859,8 +2868,10 @@ package body Prj.Proc is\n             Recursive_Process\n               (In_Tree                => In_Tree,\n                Project                => Project.Extends,\n-               From_Project_Node      => Extended_Project_Of\n-                 (Declaration_Node, From_Project_Node_Tree),\n+               Packages_To_Check      => Packages_To_Check,\n+               From_Project_Node      =>\n+                 Extended_Project_Of\n+                   (Declaration_Node, From_Project_Node_Tree),\n                From_Project_Node_Tree => From_Project_Node_Tree,\n                Env                    => Env,\n                Extended_By            => Project);"}, {"sha": "ddff7bea32e7f8aa573f29689a3a84bb860cf5ad", "filename": "gcc/ada/s-gearop.adb", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fs-gearop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fs-gearop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-gearop.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -109,7 +109,8 @@ package body System.Generic_Array_Operations is\n          Target : Integer;\n          Source : Integer;\n          Factor : Scalar);\n-      --  Needs comments ???\n+      --  Elementary row operation that subtracts Factor * M (Source, <>) from\n+      --  M (Target, <>)\n \n       procedure Sub_Row\n         (M      : in out Matrix;\n@@ -161,24 +162,31 @@ package body System.Generic_Array_Operations is\n       function \"abs\" (X : Scalar) return Scalar is\n         (if X < Zero then Zero - X else X);\n \n+      --  The following are variations of the elementary matrix row operations:\n+      --  row switching, row multiplication and row addition. Because in this\n+      --  algorithm the addition factor is always a negated value, we chose to\n+      --  use  row subtraction instead. Similarly, instead of multiplying by\n+      --  a reciprocal, we divide.\n+\n       procedure Sub_Row\n         (M : in out Matrix;\n          Target : Integer;\n          Source : Integer;\n          Factor : Scalar);\n-      --  Needs commenting ???\n+      --  Subtrace Factor * M (Source, <>) from M (Target, <>)\n \n       procedure Divide_Row\n         (M, N  : in out Matrix;\n          Row   : Integer;\n          Scale : Scalar);\n-      --  Needs commenting ???\n+      --  Divide M (Row) and N (Row) by Scale, and update Det\n \n       procedure Switch_Row\n         (M, N  : in out Matrix;\n          Row_1 : Integer;\n          Row_2 : Integer);\n-      --  Needs commenting ???\n+      --  Exchange M (Row_1) and N (Row_1) with M (Row_2) and N (Row_2),\n+      --  negating Det in the process.\n \n       -------------\n       -- Sub_Row --\n@@ -254,8 +262,7 @@ package body System.Generic_Array_Operations is\n          end if;\n       end Switch_Row;\n \n-      I : Integer := M'First (1);\n-      --  Avoid use of I ???\n+      Row : Integer := M'First (1);\n \n    --  Start of processing for Forward_Eliminate\n \n@@ -264,35 +271,35 @@ package body System.Generic_Array_Operations is\n \n       for J in M'Range (2) loop\n          declare\n-            Max_I   : Integer := I;\n+            Max_Row : Integer := Row;\n             Max_Abs : Scalar := Zero;\n \n          begin\n-            --  Find best pivot in column J, starting in row I\n+            --  Find best pivot in column J, starting in row Row\n \n-            for K in I .. M'Last (1) loop\n+            for K in Row .. M'Last (1) loop\n                declare\n                   New_Abs : constant Scalar := abs M (K, J);\n                begin\n                   if Max_Abs < New_Abs then\n                      Max_Abs := New_Abs;\n-                     Max_I := K;\n+                     Max_Row := K;\n                   end if;\n                end;\n             end loop;\n \n             if Zero < Max_Abs then\n-               Switch_Row (M, N, I, Max_I);\n-               Divide_Row (M, N, I, M (I, J));\n+               Switch_Row (M, N, Row, Max_Row);\n+               Divide_Row (M, N, Row, M (Row, J));\n \n-               for U in I + 1 .. M'Last (1) loop\n-                  Sub_Row (N, U, I, M (U, J));\n-                  Sub_Row (M, U, I, M (U, J));\n+               for U in Row + 1 .. M'Last (1) loop\n+                  Sub_Row (N, U, Row, M (U, J));\n+                  Sub_Row (M, U, Row, M (U, J));\n                end loop;\n \n-               exit when I >= M'Last (1);\n+               exit when Row >= M'Last (1);\n \n-               I := I + 1;\n+               Row := Row + 1;\n \n             else\n                Det := Zero; --  Zero, but we don't have literals"}, {"sha": "cee229ef6b5d7ceaaa807272f242011956b0740f", "filename": "gcc/ada/s-regpat.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fs-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fs-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regpat.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -2013,11 +2013,13 @@ package body System.Regpat is\n             Must_Have_Length => Dummy.Must_Have_Length,\n             Paren_Count      => Dummy.Paren_Count,\n             Flags            => Dummy.Flags,\n-            Program          => Dummy.Program\n-              (Dummy.Program'First .. Dummy.Program'First + Size - 1));\n+            Program          =>\n+              Dummy.Program\n+                (Dummy.Program'First .. Dummy.Program'First + Size - 1));\n       else\n          --  We have to recompile now that we know the size\n-         --  ??? Can we use Ada 05's return construct ?\n+         --  ??? Can we use Ada 2005's return construct ?\n+\n          declare\n             Result : Pattern_Matcher (Size);\n          begin"}, {"sha": "425508a32c2f0f27c13c75ca82e9bbd3fce48ed5", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -1089,6 +1089,9 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_mutex_destroy (S.L'Access);\n          pragma Assert (Result = 0);\n \n+         --  Storage_Error is propagated as intended if the allocation of the\n+         --  underlying OS entities fails.\n+\n          raise Storage_Error;\n       end if;\n \n@@ -1102,6 +1105,9 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_condattr_destroy (Cond_Attr'Access);\n          pragma Assert (Result = 0);\n \n+         --  Storage_Error is propagated as intended if the allocation of the\n+         --  underlying OS entities fails.\n+\n          raise Storage_Error;\n       end if;\n "}, {"sha": "ae7edbf9dc28470bed57a1ab0ee2155ede9f1b1b", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -1229,7 +1229,14 @@ package body Sem_Attr is\n \n       procedure Check_Enum_Image is\n          Lit : Entity_Id;\n+\n       begin\n+         --  When an enumeration type appears in an attribute reference, all\n+         --  literals of the type are marked as referenced. This must only be\n+         --  done if the attribute reference appears in the current source.\n+         --  Otherwise the information on references may differ between a\n+         --  normal compilation and one that performs inlining.\n+\n          if Is_Enumeration_Type (P_Base_Type)\n            and then In_Extended_Main_Code_Unit (N)\n          then\n@@ -5037,6 +5044,12 @@ package body Sem_Attr is\n \n          --  Case of enumeration type\n \n+         --  When an enumeration type appears in an attribute reference, all\n+         --  literals of the type are marked as referenced. This must only be\n+         --  done if the attribute reference appears in the current source.\n+         --  Otherwise the information on references may differ between a\n+         --  normal compilation and one that performs inlining.\n+\n          if Is_Enumeration_Type (P_Type)\n            and then In_Extended_Main_Code_Unit (N)\n          then"}, {"sha": "a12d5a70a9ef56084f57ab712e814f88423fa1a0", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -607,12 +607,12 @@ package Sem_Attr is\n      (Typ          : Entity_Id;\n       Nam          : TSS_Name_Type;\n       Partial_View : Entity_Id := Empty) return Boolean;\n-   --  For a limited type Typ, return True iff the given attribute is\n-   --  available. For Ada 05, availability is defined by 13.13.2(36/1). For Ada\n-   --  95, an attribute is considered to be available if it has been specified\n-   --  using an attribute definition clause for the type, or for its full view,\n-   --  or for an ancestor of either. Parameter Partial_View is used only\n-   --  internally, when checking for an attribute definition clause that is not\n-   --  visible (Ada 95 only).\n+   --  For a limited type Typ, return True if and only if the given attribute\n+   --  is available. For Ada 2005, availability is defined by 13.13.2(36/1).\n+   --  For Ada 95, an attribute is considered to be available if it has been\n+   --  specified using an attribute definition clause for the type, or for its\n+   --  full view, or for an ancestor of either. Parameter Partial_View is used\n+   --  only internally, when checking for an attribute definition clause that\n+   --  is not visible (Ada 95 only).\n \n end Sem_Attr;"}, {"sha": "98a57e2556e212900a082bb7081300b24facc3d7", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -208,7 +208,7 @@ package body Sem_Ch10 is\n    -- Limited_With_Clauses --\n    --------------------------\n \n-   --  Limited_With clauses are the mechanism chosen for Ada 05 to support\n+   --  Limited_With clauses are the mechanism chosen for Ada 2005 to support\n    --  mutually recursive types declared in different units. A limited_with\n    --  clause that names package P in the context of unit U makes the types\n    --  declared in the visible part of P available within U, but with the"}, {"sha": "b1963f3fdd41f3a89b3473669d912e4e4e2ef1b9", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -1573,12 +1573,14 @@ package body Sem_Ch12 is\n      (T   : Entity_Id;\n       Def : Node_Id)\n    is\n-      Loc       : constant Source_Ptr := Sloc (Def);\n-      Base      : constant Entity_Id :=\n-                    New_Internal_Entity\n-                      (E_Decimal_Fixed_Point_Type,\n-                       Current_Scope,\n-                         Sloc (Defining_Identifier (Parent (Def))), 'G');\n+      Loc : constant Source_Ptr := Sloc (Def);\n+\n+      Base : constant Entity_Id :=\n+               New_Internal_Entity\n+                 (E_Decimal_Fixed_Point_Type,\n+                  Current_Scope,\n+                  Sloc (Defining_Identifier (Parent (Def))), 'G');\n+\n       Int_Base  : constant Entity_Id := Standard_Integer;\n       Delta_Val : constant Ureal := Ureal_1;\n       Digs_Val  : constant Uint  := Uint_6;\n@@ -1719,7 +1721,8 @@ package body Sem_Ch12 is\n       Base : constant Entity_Id :=\n                New_Internal_Entity\n                  (E_Floating_Point_Type, Current_Scope,\n-                    Sloc (Defining_Identifier (Parent (Def))), 'G');\n+                  Sloc (Defining_Identifier (Parent (Def))), 'G');\n+\n    begin\n       Enter_Name          (T);\n       Set_Ekind           (T, E_Enumeration_Subtype);\n@@ -1768,7 +1771,7 @@ package body Sem_Ch12 is\n       Base : constant Entity_Id :=\n                New_Internal_Entity\n                  (E_Floating_Point_Type, Current_Scope,\n-                    Sloc (Defining_Identifier (Parent (Def))), 'G');\n+                  Sloc (Defining_Identifier (Parent (Def))), 'G');\n \n    begin\n       --  The various semantic attributes are taken from the predefined type\n@@ -1987,7 +1990,8 @@ package body Sem_Ch12 is\n       Base : constant Entity_Id :=\n                New_Internal_Entity\n                  (E_Ordinary_Fixed_Point_Type, Current_Scope,\n-                    Sloc (Defining_Identifier (Parent (Def))), 'G');\n+                  Sloc (Defining_Identifier (Parent (Def))), 'G');\n+\n    begin\n       --  The semantic attributes are set for completeness only, their values\n       --  will never be used, since all properties of the type are non-static.\n@@ -2410,9 +2414,9 @@ package body Sem_Ch12 is\n    is\n       Base : constant Entity_Id :=\n                New_Internal_Entity\n-          (E_Signed_Integer_Type,\n-           Current_Scope,\n-             Sloc (Defining_Identifier (Parent (Def))), 'G');\n+                 (E_Signed_Integer_Type,\n+                  Current_Scope,\n+                  Sloc (Defining_Identifier (Parent (Def))), 'G');\n \n    begin\n       Enter_Name (T);"}, {"sha": "3a5a9fdf1bab7bcdc682ab986695495a68051798", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -3364,6 +3364,7 @@ package body Sem_Ch13 is\n \n          --  No statements other than code statements, pragmas, and labels.\n          --  Again we allow certain internally generated statements.\n+\n          --  In Ada 2012, qualified expressions are names, and the code\n          --  statement is initially parsed as a procedure call.\n "}, {"sha": "607f51cd165688b1a0bf51f0225319b8b6046e64", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -16895,10 +16895,8 @@ package body Sem_Ch3 is\n          when N_Conditional_Expression =>\n             declare\n                Then_Expr : constant Node_Id :=\n-                 Next\n-                   (First (Expressions (Original_Node (Exp))));\n+                             Next (First (Expressions (Original_Node (Exp))));\n                Else_Expr : constant Node_Id := Next (Then_Expr);\n-\n             begin\n                return OK_For_Limited_Init_In_05 (Typ, Then_Expr)\n                  and then OK_For_Limited_Init_In_05 (Typ, Else_Expr);"}, {"sha": "9bd6bbd8310db906223f0beaf771e3a0155b0d1f", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -3434,8 +3434,8 @@ package body Sem_Ch4 is\n       --  of the high bound.\n \n       procedure Check_Universal_Expression (N : Node_Id);\n-      --  In Ada 83, reject bounds of a universal range that are not\n-      --  literals or entity names.\n+      --  In Ada83, reject bounds of a universal range that are not literals or\n+      --  entity names.\n \n       -----------------------\n       -- Check_Common_Type --"}, {"sha": "c6ce39aa585d6b6aa948a35e9a28e9f3f9b7c170", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -388,9 +388,9 @@ package body Sem_Ch6 is\n    begin\n       Analyze (P);\n \n-      --  A call of the form A.B (X) may be an Ada 05 call, which is rewritten\n-      --  as B (A, X). If the rewriting is successful, the call has been\n-      --  analyzed and we just return.\n+      --  A call of the form A.B (X) may be an Ada 2005 call, which is\n+      --  rewritten as B (A, X). If the rewriting is successful, the call\n+      --  has been analyzed and we just return.\n \n       if Nkind (P) = N_Selected_Component\n         and then Name (N) /= P"}, {"sha": "17f802fc14ef8e425c1b1e3b021a1688b9494729", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -2402,7 +2402,6 @@ package body Sem_Ch8 is\n \n          if not Is_Actual then\n             Error_Msg_N (\"expect valid subprogram name in renaming\", N);\n-\n          else\n             Error_Msg_NE (\"no visible subprogram for formal&\", N, Nam);\n          end if;"}, {"sha": "40afb8b01b4859ec89503b8025330c1d994b4976", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -13762,13 +13762,18 @@ package body Sem_Prag is\n                Error_Msg_N (\"Unchecked_Union must not be tagged\", Typ);\n                return;\n \n-            else\n-               if not Has_Discriminants (Typ) then\n-                  Error_Msg_N\n-                    (\"Unchecked_Union must have one discriminant\", Typ);\n-                  return;\n-               end if;\n+            elsif not Has_Discriminants (Typ) then\n+               Error_Msg_N\n+                (\"Unchecked_Union must have one discriminant\", Typ);\n+               return;\n+\n+            --  Note: in previous versions of GNAT we used to check for limited\n+            --  types and give an error, but in fact the standard does allow\n+            --  Unchecked_Union on limited types, so this check was removed.\n \n+            --  Proceed with basic error checks completed\n+\n+            else\n                Discr := First_Discriminant (Typ);\n                while Present (Discr) loop\n                   if No (Discriminant_Default_Value (Discr)) then"}, {"sha": "fff01b1b6f9745bfa5e6f8720c4bdddefcf60303", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7302c3cbddf59061529884465a594597ac3f3a/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=3e7302c3cbddf59061529884465a594597ac3f3a", "patch": "@@ -1992,8 +1992,8 @@ package body Sem_Type is\n       --  exclude the universal_fixed operator, which often causes ambiguities\n       --  in legacy code.\n \n-      --  Ditto in Ada 2012, where an ambiguity may arise for an operation on\n-      --  a partial view that is completed with a fixed point type. See\n+      --  Ditto in Ada 2012, where an ambiguity may arise for an operation\n+      --  on a partial view that is completed with a fixed point type. See\n       --  AI05-0020 and AI05-0209. The ambiguity is resolved in favor of the\n       --  user-defined subprogram so that a client of the package has the\n       --  same resulution as the body of the package."}]}