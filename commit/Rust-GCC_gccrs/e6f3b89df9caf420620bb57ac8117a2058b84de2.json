{"sha": "e6f3b89df9caf420620bb57ac8117a2058b84de2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmM2I4OWRmOWNhZjQyMDYyMGJiNTdhYzgxMTdhMjA1OGI4NGRlMg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-01-12T17:07:51Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-01-12T17:07:51Z"}, "message": "extend.texi: Move C++-extension-related node from the C section into the C++ section.\n\n2001-01-12  Phil Edwards  <pme@sources.redhat.com>\n\n\t* extend.texi:  Move C++-extension-related node from the C section\n\t  into the C++ section.\n\nFrom-SVN: r38950", "tree": {"sha": "f0dd6a49027a2d92719fbb7a26e2c69d934f3d6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0dd6a49027a2d92719fbb7a26e2c69d934f3d6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6f3b89df9caf420620bb57ac8117a2058b84de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f3b89df9caf420620bb57ac8117a2058b84de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f3b89df9caf420620bb57ac8117a2058b84de2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f3b89df9caf420620bb57ac8117a2058b84de2/comments", "author": null, "committer": null, "parents": [{"sha": "01d9cb8b77655fd1d2f981cfb2f32e33810b5ba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d9cb8b77655fd1d2f981cfb2f32e33810b5ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d9cb8b77655fd1d2f981cfb2f32e33810b5ba5"}], "stats": {"total": 141, "additions": 72, "deletions": 69}, "files": [{"sha": "33185bf1bfa30c015e61f1835f5eb9f631bcf71d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f3b89df9caf420620bb57ac8117a2058b84de2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f3b89df9caf420620bb57ac8117a2058b84de2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6f3b89df9caf420620bb57ac8117a2058b84de2", "patch": "@@ -1,3 +1,8 @@\n+2001-01-12  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* extend.texi:  Move C++-extension-related node from the C section\n+\t  into the C++ section.\n+\n 2001-01-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* extend.texi: Refer to an array of pointers to functions instead"}, {"sha": "0b583a032505d7fb1ab9207d1123d5ddef503ee4", "filename": "gcc/extend.texi", "status": "modified", "additions": 67, "deletions": 69, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f3b89df9caf420620bb57ac8117a2058b84de2/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f3b89df9caf420620bb57ac8117a2058b84de2/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=e6f3b89df9caf420620bb57ac8117a2058b84de2", "patch": "@@ -65,8 +65,6 @@ C++ Language}, for extensions that apply @emph{only} to C++.\n \t\t\t function.\n * Return Address::      Getting the return or frame address of a function.\n * Other Builtins::      Other built-in functions.\n-* Deprecated Features:: Things might disappear from g++.\n-* Backwards Compatibility:: Compatibilities with earlier definitions of C++.\n @end menu\n @end ifset\n @ifclear INTERNALS\n@@ -114,8 +112,6 @@ C++ Language}, for extensions that apply @emph{only} to C++.\n * Function Names::\tPrintable strings which are the name of the current\n \t\t\t function.\n * Return Address::      Getting the return or frame address of a function.\n-* Deprecated Features:: Things might disappear from g++.\n-* Backwards Compatibility:: Compatibilities with earlier definitions of C++.\n * Other Builtins::      Other built-in functions.\n @end menu\n @end ifclear\n@@ -3528,68 +3524,6 @@ if (__builtin_expect (ptr != NULL, 1))\n when testing pointer or floating-point values.\n @end table\n \n-@node Deprecated Features\n-@section Deprecated Features\n-\n-In the past, the GNU C++ compiler was extended to experiment with new\n-features, at a time when the C++ language was still evolving. Now that\n-the C++ standard is complete, some of those features are superseded by\n-superior alternatives. Using the old features might cause a warning in\n-some cases that the feature will be dropped in the future. In other\n-cases, the feature might be gone already.\n-\n-While the list below is not exhaustive, it documents some of the options\n-that are now deprecated:\n-\n-@table @code\n-@item -fexternal-templates\n-@itemx -falt-external-templates\n-These are two of the many ways for g++ to implement template\n-instantiation. @xref{Template Instantiation}. The C++ standard clearly\n-defines how template definitions have to be organized across\n-implementation units. g++ has an implicit instantiation mechanism that\n-should work just fine for standard-conforming code.\n-\n-@item -fstrict-prototype\n-@itemx -fno-strict-prototype\n-Previously it was possible to use an empty prototype parameter list to\n-indicate an unspecified number of parameters (like C), rather than no\n-parameters, as C++ demands. This feature has been removed, except where\n-it is required for backwards compatibility @xref{Backwards Compatibility}.\n-@end table\n-\n-The named return value extension has been deprecated, and will be\n-removed from g++ at some point.\n-\n-@node Backwards Compatibility\n-@section Backwards Compatibility\n-@cindex Backwards Compatibility\n-@cindex ARM\n-\n-Now that there is a definitive ISO standard C++, g++ has a specification\n-to adhere to. The C++ language evolved over time, and features that used\n-to be acceptable in previous drafts of the standard, such as the ARM, are\n-no longer accepted. In order to allow compilation of C++ written to such\n-drafts, g++ contains some backwards compatibilities. @emph{All such\n-backwards compatibility features are liable to disappear in future\n-versions of g++.} They should be considered deprecated @xref{Deprecated\n-Features}.\n-\n-@table @code\n-@item For scope\n-If a variable is declared at for scope, it used to remain in scope until\n-the end of the scope which contained the for statement (rather than just\n-within the for scope). g++ retains this, but issues a warning, if such a\n-variable is accessed outside the for scope.\n-\n-@item implicit C language\n-Old C system header files did not contain an @code{extern \"C\" @{...@}}\n-scope to set the language. On such systems, all header files are\n-implicitly scoped inside a C language scope. Also, an empty prototype\n-@code{()} will be treated as an unspecified number of arguments, rather\n-than no arguments, as C++ demands.\n-@end table\n-\n @node C++ Extensions\n @chapter Extensions to the C++ Language\n @cindex extensions, C++ language\n@@ -3608,12 +3542,14 @@ Predefined Macros,cpp.info,The C Preprocessor}).\n * Volatiles::\t\tWhat constitutes an access to a volatile object.\n * Restricted Pointers:: C99 restricted pointers and references.\n * C++ Interface::       You can use a single C++ header file for both\n-                         declarations and definitions.\n+                        declarations and definitions.\n * Template Instantiation:: Methods for ensuring that exactly one copy of\n-                         each needed template instantiation is emitted.\n+                        each needed template instantiation is emitted.\n * Bound member functions:: You can extract a function pointer to the\n                         method denoted by a @samp{->*} or @samp{.*} expression.\n-* C++ Attributes::  Variable, function, and type attributes for C++ only.\n+* C++ Attributes::      Variable, function, and type attributes for C++ only.\n+* Deprecated Features:: Things might disappear from g++.\n+* Backwards Compatibility:: Compatibilities with earlier definitions of C++.\n @end menu\n \n @node Min and Max\n@@ -4173,3 +4109,65 @@ thus, only the base class in a COM hierarchy needs @code{com_interface}.\n \n @end table\n \n+@node Deprecated Features\n+@section Deprecated Features\n+\n+In the past, the GNU C++ compiler was extended to experiment with new\n+features, at a time when the C++ language was still evolving. Now that\n+the C++ standard is complete, some of those features are superseded by\n+superior alternatives. Using the old features might cause a warning in\n+some cases that the feature will be dropped in the future. In other\n+cases, the feature might be gone already.\n+\n+While the list below is not exhaustive, it documents some of the options\n+that are now deprecated:\n+\n+@table @code\n+@item -fexternal-templates\n+@itemx -falt-external-templates\n+These are two of the many ways for g++ to implement template\n+instantiation. @xref{Template Instantiation}. The C++ standard clearly\n+defines how template definitions have to be organized across\n+implementation units. g++ has an implicit instantiation mechanism that\n+should work just fine for standard-conforming code.\n+\n+@item -fstrict-prototype\n+@itemx -fno-strict-prototype\n+Previously it was possible to use an empty prototype parameter list to\n+indicate an unspecified number of parameters (like C), rather than no\n+parameters, as C++ demands. This feature has been removed, except where\n+it is required for backwards compatibility @xref{Backwards Compatibility}.\n+@end table\n+\n+The named return value extension has been deprecated, and will be\n+removed from g++ at some point.\n+\n+@node Backwards Compatibility\n+@section Backwards Compatibility\n+@cindex Backwards Compatibility\n+@cindex ARM [Annotated C++ Reference Manual]\n+\n+Now that there is a definitive ISO standard C++, g++ has a specification\n+to adhere to. The C++ language evolved over time, and features that\n+used to be acceptable in previous drafts of the standard, such as the ARM\n+[Annotated C++ Reference Manual], are no longer accepted. In order to allow\n+compilation of C++ written to such drafts, g++ contains some backwards\n+compatibilities. @emph{All such backwards compatibility features are\n+liable to disappear in future versions of g++.} They should be considered\n+deprecated @xref{Deprecated Features}.\n+\n+@table @code\n+@item For scope\n+If a variable is declared at for scope, it used to remain in scope until\n+the end of the scope which contained the for statement (rather than just\n+within the for scope). g++ retains this, but issues a warning, if such a\n+variable is accessed outside the for scope.\n+\n+@item implicit C language\n+Old C system header files did not contain an @code{extern \"C\" @{...@}}\n+scope to set the language. On such systems, all header files are\n+implicitly scoped inside a C language scope. Also, an empty prototype\n+@code{()} will be treated as an unspecified number of arguments, rather\n+than no arguments, as C++ demands.\n+@end table\n+"}]}