{"sha": "448a20ee501f177aff829804bce51487b20efcfb", "node_id": "C_kwDOANBUbNoAKDQ0OGEyMGVlNTAxZjE3N2FmZjgyOTgwNGJjZTUxNDg3YjIwZWZjZmI", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-07-27T14:19:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-04T08:45:09Z"}, "message": "[Ada] Add Ada RM description of Ada.Strings.Bounded as comments in the spec\n\ngcc/ada/\n\n\t* libgnat/a-strbou.ads: Add comments.", "tree": {"sha": "989d7aeed4aaa2f0c46bac42f40b1b2726301323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/989d7aeed4aaa2f0c46bac42f40b1b2726301323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/448a20ee501f177aff829804bce51487b20efcfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448a20ee501f177aff829804bce51487b20efcfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/448a20ee501f177aff829804bce51487b20efcfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448a20ee501f177aff829804bce51487b20efcfb/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0dcfc875bf5cdd594e34fde74f85f39d3091684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0dcfc875bf5cdd594e34fde74f85f39d3091684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0dcfc875bf5cdd594e34fde74f85f39d3091684"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "e8201843f7a826e91af2164d620a5a891d20a94d", "filename": "gcc/ada/libgnat/a-strbou.ads", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448a20ee501f177aff829804bce51487b20efcfb/gcc%2Fada%2Flibgnat%2Fa-strbou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448a20ee501f177aff829804bce51487b20efcfb/gcc%2Fada%2Flibgnat%2Fa-strbou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strbou.ads?ref=448a20ee501f177aff829804bce51487b20efcfb", "patch": "@@ -33,6 +33,16 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  The language-defined package Strings.Bounded provides a generic package\n+--  each of whose instances yields a private type Bounded_String and a set\n+--  of operations. An object of a particular Bounded_String type represents\n+--  a String whose low bound is 1 and whose length can vary conceptually\n+--  between 0 and a maximum size established at the generic instantiation. The\n+--  subprograms for fixed-length string handling are either overloaded directly\n+--  for Bounded_String, or are modified as needed to reflect the variability in\n+--  length. Additionally, since the Bounded_String type is private, appropriate\n+--  constructor and selector operations are provided.\n+\n with Ada.Strings.Maps; use type Ada.Strings.Maps.Character_Mapping_Function;\n with Ada.Strings.Superbounded;\n with Ada.Strings.Search;\n@@ -65,11 +75,16 @@ package Ada.Strings.Bounded with SPARK_Mode is\n       pragma Preelaborable_Initialization (Bounded_String);\n \n       Null_Bounded_String : constant Bounded_String;\n+      --  Null_Bounded_String represents the null string. If an object of type\n+      --  Bounded_String is not otherwise initialized, it will be initialized\n+      --  to the same value as Null_Bounded_String.\n \n       subtype Length_Range is Natural range 0 .. Max_Length;\n \n       function Length (Source : Bounded_String) return Length_Range with\n         Global => null;\n+      --  The Length function returns the length of the string represented by\n+      --  Source.\n \n       --------------------------------------------------------\n       -- Conversion, Concatenation, and Selection Functions --\n@@ -94,9 +109,24 @@ package Ada.Strings.Bounded with SPARK_Mode is\n            =>\n              To_String (To_Bounded_String'Result) =\n                Source (Source'First .. Source'First - 1 + Max_Length));\n+      --  If Source'Length <= Max_Length, then this function returns a\n+      --  Bounded_String that represents Source. Otherwise, the effect\n+      --  depends on the value of Drop:\n+      --\n+      --  * If Drop=Left, then the result is a Bounded_String that represents\n+      --    the string comprising the rightmost Max_Length characters of\n+      --    Source.\n+      --\n+      --  * If Drop=Right, then the result is a Bounded_String that represents\n+      --    the string comprising the leftmost Max_Length characters of Source.\n+      --\n+      --  * If Drop=Error, then Strings.Length_Error is propagated.\n \n       function To_String (Source : Bounded_String) return String with\n         Global => null;\n+      --  To_String returns the String value with lower bound 1\n+      --  represented by Source. If B is a Bounded_String, then\n+      --  B = To_Bounded_String(To_String(B)).\n \n       procedure Set_Bounded_String\n         (Target : out Bounded_String;\n@@ -119,6 +149,14 @@ package Ada.Strings.Bounded with SPARK_Mode is\n              To_String (Target) =\n                Source (Source'First .. Source'First - 1 + Max_Length));\n       pragma Ada_05 (Set_Bounded_String);\n+      --  Equivalent to Target := To_Bounded_String (Source, Drop);\n+\n+      --  Each of the Append functions returns a Bounded_String obtained by\n+      --  concatenating the string or character given or represented by one\n+      --  of the parameters, with the string or character given or represented\n+      --  by the other parameter, and applying To_Bounded_String to the\n+      --  concatenation result string, with Drop as provided to the Append\n+      --  function.\n \n       function Append\n         (Left  : Bounded_String;\n@@ -324,6 +362,10 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                    Slice (Right, 1, Max_Length - 1)\n                and then Element (Append'Result, 1) = Left);\n \n+      --  Each of the procedures Append(Source, New_Item, Drop) has the same\n+      --  effect as the corresponding assignment\n+      --  Source := Append(Source, New_Item, Drop).\n+\n       procedure Append\n         (Source   : in out Bounded_String;\n          New_Item : Bounded_String;\n@@ -455,6 +497,9 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                    Slice (Source'Old, 2, Max_Length)\n                and then Element (Source, Max_Length) = New_Item);\n \n+      --  Each of the \"&\" functions has the same effect as the corresponding\n+      --  Append function, with Error as the Drop parameter.\n+\n       function \"&\"\n         (Left  : Bounded_String;\n          Right : Bounded_String) return Bounded_String\n@@ -516,6 +561,8 @@ package Ada.Strings.Bounded with SPARK_Mode is\n       with\n         Pre    => Index <= Length (Source),\n         Global => null;\n+      --  Returns the character at position Index in the string represented by\n+      --  Source; propagates Index_Error if Index > Length(Source).\n \n       procedure Replace_Element\n         (Source : in out Bounded_String;\n@@ -528,6 +575,9 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                       Element (Source, K) =\n                         (if K = Index then By else Element (Source'Old, K))),\n         Global => null;\n+      --  Updates Source such that the character at position Index in the\n+      --  string represented by Source is By; propagates Index_Error if\n+      --  Index > Length(Source).\n \n       function Slice\n         (Source : Bounded_String;\n@@ -536,6 +586,10 @@ package Ada.Strings.Bounded with SPARK_Mode is\n       with\n         Pre    => Low - 1 <= Length (Source) and then High <= Length (Source),\n         Global => null;\n+      --  Returns the slice at positions Low through High in the\n+      --  string represented by Source; propagates Index_Error if\n+      --  Low > Length(Source)+1 or High > Length(Source).\n+      --  The bounds of the returned string are Low and High.\n \n       function Bounded_Slice\n         (Source : Bounded_String;\n@@ -546,6 +600,9 @@ package Ada.Strings.Bounded with SPARK_Mode is\n         Post   => To_String (Bounded_Slice'Result) = Slice (Source, Low, High),\n         Global => null;\n       pragma Ada_05 (Bounded_Slice);\n+      --  Returns the slice at positions Low through High in the string\n+      --  represented by Source as a bounded string; propagates Index_Error\n+      --  if Low > Length(Source)+1 or High > Length(Source).\n \n       procedure Bounded_Slice\n         (Source : Bounded_String;\n@@ -557,6 +614,11 @@ package Ada.Strings.Bounded with SPARK_Mode is\n         Post   => To_String (Target) = Slice (Source, Low, High),\n         Global => null;\n       pragma Ada_05 (Bounded_Slice);\n+      --  Equivalent to Target := Bounded_Slice (Source, Low, High);\n+\n+      --  Each of the functions \"=\", \"<\", \">\", \"<=\", and \">=\" returns the same\n+      --  result as the corresponding String operation applied to the String\n+      --  values given or represented by the two parameters.\n \n       function \"=\"\n         (Left  : Bounded_String;\n@@ -667,6 +729,11 @@ package Ada.Strings.Bounded with SPARK_Mode is\n       -- Search Functions --\n       ----------------------\n \n+      --  Each of the search subprograms (Index, Index_Non_Blank, Count,\n+      --  Find_Token) has the same effect as the corresponding subprogram in\n+      --  Strings.Fixed applied to the string represented by the Bounded_String\n+      --  parameter.\n+\n       function Index\n         (Source  : Bounded_String;\n          Pattern : String;\n@@ -1230,6 +1297,16 @@ package Ada.Strings.Bounded with SPARK_Mode is\n       -- String Translation Subprograms --\n       ------------------------------------\n \n+      --  Each of the Translate subprograms, when applied to a Bounded_String,\n+      --  has an analogous effect to the corresponding subprogram in\n+      --  Strings.Fixed. For the Translate function, the translation is applied\n+      --  to the string represented by the Bounded_String parameter, and the\n+      --  result is converted (via To_Bounded_String) to a Bounded_String. For\n+      --  the Translate procedure, the string represented by the Bounded_String\n+      --  parameter after the translation is given by the Translate function\n+      --  for fixed-length strings applied to the string represented by the\n+      --  original value of the parameter.\n+\n       function Translate\n         (Source  : Bounded_String;\n          Mapping : Maps.Character_Mapping) return Bounded_String\n@@ -1278,6 +1355,19 @@ package Ada.Strings.Bounded with SPARK_Mode is\n       -- String Transformation Subprograms --\n       ---------------------------------------\n \n+      --  Each of the transformation subprograms (Replace_Slice, Insert,\n+      --  Overwrite, Delete), selector subprograms (Trim, Head, Tail), and\n+      --  constructor functions (\"*\") has an effect based on its corresponding\n+      --  subprogram in Strings.Fixed, and Replicate is based on Fixed.\"*\".\n+      --  In the case of a function, the corresponding fixed-length string\n+      --  subprogram is applied to the string represented by the Bounded_String\n+      --  parameter. To_Bounded_String is applied the result string, with Drop\n+      --  (or Error in the case of Generic_Bounded_Length.\"*\") determining\n+      --  the effect when the string length exceeds Max_Length. In\n+      --  the case of a procedure, the corresponding function in\n+      --  Strings.Bounded.Generic_Bounded_Length is applied, with the\n+      --  result assigned into the Source parameter.\n+\n       function Replace_Slice\n         (Source : Bounded_String;\n          Low    : Positive;"}]}