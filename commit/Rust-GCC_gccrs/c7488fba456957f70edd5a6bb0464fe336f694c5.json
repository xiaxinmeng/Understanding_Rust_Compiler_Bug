{"sha": "c7488fba456957f70edd5a6bb0464fe336f694c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc0ODhmYmE0NTY5NTdmNzBlZGQ1YTZiYjA0NjRmZTMzNmY2OTRjNQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2014-11-10T20:43:40Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2014-11-10T20:43:40Z"}, "message": "re PR tree-optimization/63748 (wrong may be used uninitialized warning (abnormal edges))\n\n2014-11-10  Patrick Palka  <ppalka@gcc.gnu.org>\n\ngcc/\n\tPR middle-end/63748\n\t* tree-ssa-propagate.c (may_propagate_copy): Allow propagating\n\tSSA copies whose source and destination names both occur in\n\tabnormal PHIs.\n\ngcc/testsuite/\n\tPR middle-end/63748\n\t* gcc.dg/pr63748.c: New testcase.\n\nFrom-SVN: r217317", "tree": {"sha": "5775c1e9ec86f3e40c0415ce897655efa09b8992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5775c1e9ec86f3e40c0415ce897655efa09b8992"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7488fba456957f70edd5a6bb0464fe336f694c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7488fba456957f70edd5a6bb0464fe336f694c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7488fba456957f70edd5a6bb0464fe336f694c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7488fba456957f70edd5a6bb0464fe336f694c5/comments", "author": null, "committer": null, "parents": [{"sha": "3bbddc8e442eab7b76a5c1a0f63ef5fc647423e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbddc8e442eab7b76a5c1a0f63ef5fc647423e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bbddc8e442eab7b76a5c1a0f63ef5fc647423e0"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "8a329222dc5decc18858ea5a850abca033f5a25a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7488fba456957f70edd5a6bb0464fe336f694c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7488fba456957f70edd5a6bb0464fe336f694c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7488fba456957f70edd5a6bb0464fe336f694c5", "patch": "@@ -1,3 +1,10 @@\n+2014-11-10  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR middle-end/63748\n+\t* tree-ssa-propagate.c (may_propagate_copy): Allow propagating\n+\tSSA copies whose source and destination names both occur in\n+\tabnormal PHIs.\n+\n 2014-11-10 Roman Gareev  <gareevroman@gmail.com>\n \n \t* Makefile.in: Remove the compilation of graphite-clast-to-gimple.o."}, {"sha": "812696db96111dd2aeef203d0ce0b8b8a3597d6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7488fba456957f70edd5a6bb0464fe336f694c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7488fba456957f70edd5a6bb0464fe336f694c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7488fba456957f70edd5a6bb0464fe336f694c5", "patch": "@@ -1,3 +1,8 @@\n+2014-11-10  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR middle-end/63748\n+\t* gcc.dg/pr63748.c: New testcase.\n+\n 2014-11-10  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/pr44194-1.c (dg-do): Add missing braces."}, {"sha": "2e5044584a6d127dad62add07a5ff7ec4c913f4e", "filename": "gcc/testsuite/gcc.dg/pr63748.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7488fba456957f70edd5a6bb0464fe336f694c5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63748.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7488fba456957f70edd5a6bb0464fe336f694c5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63748.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63748.c?ref=c7488fba456957f70edd5a6bb0464fe336f694c5", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+#include <setjmp.h>\n+\n+jmp_buf *alloc_jmp_buf ();\n+int foo (void *);\n+\n+int\n+test (int op, int noside)\n+{\n+  void *argvec = 0;\n+\n+  if (op)\n+    {\n+      jmp_buf *buf = alloc_jmp_buf (); /* { dg-bogus \"uninitialized\" } */\n+      setjmp (*buf);\n+\n+      if (noside)\n+        goto nosideret;\n+\n+    do_call_it:\n+\n+      if (noside)\n+        goto nosideret;\n+\n+      return foo (argvec);\n+    }\n+\n+  argvec = __builtin_alloca (1);\n+  goto do_call_it;\n+\n+nosideret:\n+  return 1;\n+}\n+"}, {"sha": "0195afa7f0128ca54cbaa5520917ec8edf22e74c", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7488fba456957f70edd5a6bb0464fe336f694c5/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7488fba456957f70edd5a6bb0464fe336f694c5/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=c7488fba456957f70edd5a6bb0464fe336f694c5", "patch": "@@ -1275,21 +1275,24 @@ may_propagate_copy (tree dest, tree orig)\n   tree type_d = TREE_TYPE (dest);\n   tree type_o = TREE_TYPE (orig);\n \n-  /* If ORIG flows in from an abnormal edge, it cannot be propagated.  */\n+  /* If ORIG is a default definition which flows in from an abnormal edge\n+     then the copy can be propagated.  It is important that we do so to avoid\n+     uninitialized copies.  */\n   if (TREE_CODE (orig) == SSA_NAME\n       && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (orig)\n-      /* If it is the default definition and an automatic variable then\n-         we can though and it is important that we do to avoid\n-\t uninitialized regular copies.  */\n-      && !(SSA_NAME_IS_DEFAULT_DEF (orig)\n-\t   && (SSA_NAME_VAR (orig) == NULL_TREE\n-\t       || TREE_CODE (SSA_NAME_VAR (orig)) == VAR_DECL)))\n+      && SSA_NAME_IS_DEFAULT_DEF (orig)\n+      && (SSA_NAME_VAR (orig) == NULL_TREE\n+\t  || TREE_CODE (SSA_NAME_VAR (orig)) == VAR_DECL))\n+    ;\n+  /* Otherwise if ORIG just flows in from an abnormal edge then the copy cannot\n+     be propagated.  */\n+  else if (TREE_CODE (orig) == SSA_NAME\n+\t   && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (orig))\n     return false;\n-\n-  /* If DEST is an SSA_NAME that flows from an abnormal edge, then it\n-     cannot be replaced.  */\n-  if (TREE_CODE (dest) == SSA_NAME\n-      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (dest))\n+  /* Similarly if DEST flows in from an abnormal edge then the copy cannot be\n+     propagated.  */\n+  else if (TREE_CODE (dest) == SSA_NAME\n+\t   && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (dest))\n     return false;\n \n   /* Do not copy between types for which we *do* need a conversion.  */"}]}