{"sha": "77d451087596cba90c948eb7c4446f4f9a2a785a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdkNDUxMDg3NTk2Y2JhOTBjOTQ4ZWI3YzQ0NDZmNGY5YTJhNzg1YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-08-10T10:11:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-08-10T10:11:46Z"}, "message": "type_traits (_DEFINE_SPEC*): Simplify.\n\n2008-08-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/tr1_impl/type_traits (_DEFINE_SPEC*): Simplify.\n\t(_DEFINE_SPEC_BODY): Remove.\n\t(__is_void_helper, __is_integral_helper, __is_floating_point_helper,\n\t__is_member_object_pointer_helper, __is_member_function_pointer_helper,\n\t__remove_pointer_helper): Add.\n\t(is_void, is_integral, is_floating_point, is_member_object_pointer,\n\tis_member_function_pointer, remove_pointer): Use the latter.\n\t* include/tr1/type_traits (_DEFINE_SPEC): Simplify.\n\t(_DEFINE_SPEC_HELPER): Remove.\n\t(__is_signed_helper, __is_unsigned_helper): Add.\n\t(is_signed, is_unsigned): Use the latter.\n\nFrom-SVN: r138925", "tree": {"sha": "ff20909381317787f8fdac9e1446ecf96752f68c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff20909381317787f8fdac9e1446ecf96752f68c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77d451087596cba90c948eb7c4446f4f9a2a785a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77d451087596cba90c948eb7c4446f4f9a2a785a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77d451087596cba90c948eb7c4446f4f9a2a785a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77d451087596cba90c948eb7c4446f4f9a2a785a/comments", "author": null, "committer": null, "parents": [{"sha": "d47c3b4eb17c16582507840c61be4ad05884116b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d47c3b4eb17c16582507840c61be4ad05884116b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d47c3b4eb17c16582507840c61be4ad05884116b"}], "stats": {"total": 227, "additions": 137, "deletions": 90}, "files": [{"sha": "f674cd6410de72e26da028289926f5f1816035b7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d451087596cba90c948eb7c4446f4f9a2a785a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d451087596cba90c948eb7c4446f4f9a2a785a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=77d451087596cba90c948eb7c4446f4f9a2a785a", "patch": "@@ -1,3 +1,17 @@\n+2008-08-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/tr1_impl/type_traits (_DEFINE_SPEC*): Simplify.\n+\t(_DEFINE_SPEC_BODY): Remove.\n+\t(__is_void_helper, __is_integral_helper, __is_floating_point_helper,\n+\t__is_member_object_pointer_helper, __is_member_function_pointer_helper,\n+\t__remove_pointer_helper): Add.\n+\t(is_void, is_integral, is_floating_point, is_member_object_pointer,\n+\tis_member_function_pointer, remove_pointer): Use the latter.\n+\t* include/tr1/type_traits (_DEFINE_SPEC): Simplify.\n+\t(_DEFINE_SPEC_HELPER): Remove.\n+\t(__is_signed_helper, __is_unsigned_helper): Add.\n+\t(is_signed, is_unsigned): Use the latter.\n+\n 2008-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tRevert fix for libstdc++/35637, thanks to other/36901."}, {"sha": "f5cffe88a684bd1b6ca1e0c93f2875f980b3e9c0", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d451087596cba90c948eb7c4446f4f9a2a785a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d451087596cba90c948eb7c4446f4f9a2a785a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=77d451087596cba90c948eb7c4446f4f9a2a785a", "patch": "@@ -1,6 +1,6 @@\n // TR1 type_traits -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -60,17 +60,11 @@ namespace std\n {\n namespace tr1\n {\n-#define _DEFINE_SPEC_HELPER(_Spec)                 \\\n-  template<>                                       \\\n-    struct _Spec                                   \\\n+#define _DEFINE_SPEC(_Trait, _Type)    \\\n+  template<>                           \\\n+    struct _Trait<_Type>\t       \\\n     : public true_type { };\n \n-#define _DEFINE_SPEC(_Trait, _Type)                \\\n-  _DEFINE_SPEC_HELPER(_Trait<_Type>)               \\\n-  _DEFINE_SPEC_HELPER(_Trait<_Type const>)         \\\n-  _DEFINE_SPEC_HELPER(_Trait<_Type volatile>)      \\\n-  _DEFINE_SPEC_HELPER(_Trait<_Type const volatile>)\n-\n   template<typename>\n     struct is_reference\n     : public false_type { };\n@@ -120,22 +114,34 @@ namespace tr1\n     { };\n \n   template<typename>\n-    struct is_signed\n+    struct __is_signed_helper\n     : public false_type { };\n-  _DEFINE_SPEC(is_signed, signed char)\n-  _DEFINE_SPEC(is_signed, short)\n-  _DEFINE_SPEC(is_signed, int)\n-  _DEFINE_SPEC(is_signed, long)\n-  _DEFINE_SPEC(is_signed, long long)\n+  _DEFINE_SPEC(__is_signed_helper, signed char)\n+  _DEFINE_SPEC(__is_signed_helper, short)\n+  _DEFINE_SPEC(__is_signed_helper, int)\n+  _DEFINE_SPEC(__is_signed_helper, long)\n+  _DEFINE_SPEC(__is_signed_helper, long long)\n+\n+  template<typename _Tp>\n+    struct is_signed\n+    : public integral_constant<bool, (__is_signed_helper<typename\n+\t\t\t\t      remove_cv<_Tp>::type>::value)>\n+    { };\n \n   template<typename>\n-    struct is_unsigned\n+    struct __is_unsigned_helper\n     : public false_type { };\n-  _DEFINE_SPEC(is_unsigned, unsigned char)\n-  _DEFINE_SPEC(is_unsigned, unsigned short)\n-  _DEFINE_SPEC(is_unsigned, unsigned int)\n-  _DEFINE_SPEC(is_unsigned, unsigned long)\n-  _DEFINE_SPEC(is_unsigned, unsigned long long)\n+  _DEFINE_SPEC(__is_unsigned_helper, unsigned char)\n+  _DEFINE_SPEC(__is_unsigned_helper, unsigned short)\n+  _DEFINE_SPEC(__is_unsigned_helper, unsigned int)\n+  _DEFINE_SPEC(__is_unsigned_helper, unsigned long)\n+  _DEFINE_SPEC(__is_unsigned_helper, unsigned long long)\n+\n+  template<typename _Tp>\n+    struct is_unsigned\n+    : public integral_constant<bool, (__is_unsigned_helper<typename\n+\t\t\t\t      remove_cv<_Tp>::type>::value)>\n+    { };\n \n   template<typename _Base, typename _Derived>\n     struct __is_base_of_helper\n@@ -241,7 +247,6 @@ namespace tr1\n       };\n     };\n \n-#undef _DEFINE_SPEC_HELPER\n #undef _DEFINE_SPEC\n }\n }"}, {"sha": "e3b6af51bdc43be55147cccb89c86ffe3912d450", "filename": "libstdc++-v3/include/tr1_impl/type_traits", "status": "modified", "additions": 95, "deletions": 67, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d451087596cba90c948eb7c4446f4f9a2a785a/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d451087596cba90c948eb7c4446f4f9a2a785a/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits?ref=77d451087596cba90c948eb7c4446f4f9a2a785a", "patch": "@@ -43,29 +43,19 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     typedef struct { char __arr[2]; } __two;\n   };\n \n-#define _DEFINE_SPEC_BODY(_Value)                                    \\\n-    : public integral_constant<bool, _Value> { };\n+#define _DEFINE_SPEC_0_HELPER                          \\\n+  template<>\n+\n+#define _DEFINE_SPEC_1_HELPER                          \\\n+  template<typename _Tp>\n+\n+#define _DEFINE_SPEC_2_HELPER                          \\\n+  template<typename _Tp, typename _Cp>\n \n-#define _DEFINE_SPEC_0_HELPER(_Spec, _Value)                         \\\n-  template<>                                                         \\\n-    struct _Spec                                                     \\\n-    _DEFINE_SPEC_BODY(_Value)\n-\n-#define _DEFINE_SPEC_1_HELPER(_Spec, _Value)                         \\\n-  template<typename _Tp>                                             \\\n-    struct _Spec                                                     \\\n-    _DEFINE_SPEC_BODY(_Value)\n-      \n-#define _DEFINE_SPEC_2_HELPER(_Spec, _Value)                         \\\n-  template<typename _Tp, typename _Cp>                               \\\n-    struct _Spec                                                     \\\n-    _DEFINE_SPEC_BODY(_Value)\n-\n-#define _DEFINE_SPEC(_Order, _Trait, _Type, _Value)                  \\\n-  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type>, _Value)              \\\n-  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type const>, _Value)        \\\n-  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type volatile>, _Value)     \\\n-  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type const volatile>, _Value)\n+#define _DEFINE_SPEC(_Order, _Trait, _Type, _Value)    \\\n+  _DEFINE_SPEC_##_Order##_HELPER                       \\\n+    struct _Trait<_Type>                               \\\n+    : public integral_constant<bool, _Value> { };\n \n   /// helper classes [4.3].\n   template<typename _Tp, _Tp __v>\n@@ -79,49 +69,70 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   /// typedef for true_type\n   typedef integral_constant<bool, true>     true_type;\n \n-  /// typedef for true_type\n+  /// typedef for false_type\n   typedef integral_constant<bool, false>    false_type;\n \n   template<typename _Tp, _Tp __v>\n     const _Tp integral_constant<_Tp, __v>::value;\n \n-  /// primary type categories [4.5.1].\n   template<typename>\n-    struct is_void\n+    struct remove_cv;\n+\n+  template<typename>\n+    struct __is_void_helper\n     : public false_type { };\n-  _DEFINE_SPEC(0, is_void, void, true)\n+  _DEFINE_SPEC(0, __is_void_helper, void, true)\n+\n+  /// primary type categories [4.5.1].\n+  template<typename _Tp>\n+    struct is_void\n+    : public integral_constant<bool, (__is_void_helper<typename\n+\t\t\t\t      remove_cv<_Tp>::type>::value)>\n+    { };\n \n-  /// is_integral\n   template<typename>\n-    struct is_integral\n+    struct __is_integral_helper\n     : public false_type { };\n-  _DEFINE_SPEC(0, is_integral, bool, true)\n-  _DEFINE_SPEC(0, is_integral, char, true)\n-  _DEFINE_SPEC(0, is_integral, signed char, true)\n-  _DEFINE_SPEC(0, is_integral, unsigned char, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, bool, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, char, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, signed char, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, unsigned char, true)\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  _DEFINE_SPEC(0, is_integral, wchar_t, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, wchar_t, true)\n #endif\n #ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n-  _DEFINE_SPEC(0, is_integral, char16_t, true)\n-  _DEFINE_SPEC(0, is_integral, char32_t, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, char16_t, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, char32_t, true)\n #endif\n-  _DEFINE_SPEC(0, is_integral, short, true)\n-  _DEFINE_SPEC(0, is_integral, unsigned short, true)\n-  _DEFINE_SPEC(0, is_integral, int, true)\n-  _DEFINE_SPEC(0, is_integral, unsigned int, true)\n-  _DEFINE_SPEC(0, is_integral, long, true)\n-  _DEFINE_SPEC(0, is_integral, unsigned long, true)\n-  _DEFINE_SPEC(0, is_integral, long long, true)\n-  _DEFINE_SPEC(0, is_integral, unsigned long long, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, short, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, unsigned short, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, int, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, unsigned int, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, long, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, unsigned long, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, long long, true)\n+  _DEFINE_SPEC(0, __is_integral_helper, unsigned long long, true)\n+\n+  /// is_integral\n+  template<typename _Tp>\n+    struct is_integral\n+    : public integral_constant<bool, (__is_integral_helper<typename\n+\t\t\t\t      remove_cv<_Tp>::type>::value)>\n+    { };\n \n-  /// is_floating_point\n   template<typename>\n-    struct is_floating_point\n+    struct __is_floating_point_helper\n     : public false_type { };\n-  _DEFINE_SPEC(0, is_floating_point, float, true)\n-  _DEFINE_SPEC(0, is_floating_point, double, true)\n-  _DEFINE_SPEC(0, is_floating_point, long double, true)\n+  _DEFINE_SPEC(0, __is_floating_point_helper, float, true)\n+  _DEFINE_SPEC(0, __is_floating_point_helper, double, true)\n+  _DEFINE_SPEC(0, __is_floating_point_helper, long double, true)\n+\n+  /// is_floating_point\n+  template<typename _Tp>\n+    struct is_floating_point\n+    : public integral_constant<bool, (__is_floating_point_helper<typename\n+\t\t\t\t      remove_cv<_Tp>::type>::value)>\n+    { };\n \n   /// is_array\n   template<typename>\n@@ -136,11 +147,17 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     struct is_array<_Tp[]>\n     : public true_type { };\n \n-  /// is_pointer\n   template<typename>\n-    struct is_pointer\n+    struct __is_pointer_helper\n     : public false_type { };\n-  _DEFINE_SPEC(1, is_pointer, _Tp*, true)\n+  _DEFINE_SPEC(1, __is_pointer_helper, _Tp*, true)\n+\n+  /// is_pointer\n+  template<typename _Tp>\n+    struct is_pointer\n+    : public integral_constant<bool, (__is_pointer_helper<typename\n+\t\t\t\t      remove_cv<_Tp>::type>::value)>\n+    { };\n \n   /// is_reference\n   template<typename _Tp>\n@@ -150,20 +167,32 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   template<typename _Tp>\n     struct is_function;\n \n-  /// is_member_object_pointer\n   template<typename>\n-    struct is_member_object_pointer\n+    struct __is_member_object_pointer_helper\n     : public false_type { };\n-  _DEFINE_SPEC(2, is_member_object_pointer, _Tp _Cp::*,\n+  _DEFINE_SPEC(2, __is_member_object_pointer_helper, _Tp _Cp::*,\n \t       !is_function<_Tp>::value)\n \n-  /// is_member_function_pointer\n+  /// is_member_object_pointer\n+  template<typename _Tp>\n+    struct is_member_object_pointer\n+    : public integral_constant<bool, (__is_member_object_pointer_helper<\n+\t\t\t\t      typename remove_cv<_Tp>::type>::value)>\n+    { };\n+\n   template<typename>\n-    struct is_member_function_pointer\n+    struct __is_member_function_pointer_helper\n     : public false_type { };\n-  _DEFINE_SPEC(2, is_member_function_pointer, _Tp _Cp::*,\n+  _DEFINE_SPEC(2, __is_member_function_pointer_helper, _Tp _Cp::*,\n \t       is_function<_Tp>::value)\n \n+  /// is_member_function_pointer\n+  template<typename _Tp>\n+    struct is_member_function_pointer\n+    : public integral_constant<bool, (__is_member_function_pointer_helper<\n+\t\t\t\t      typename remove_cv<_Tp>::type>::value)>\n+    { };\n+\n   /// is_enum\n   template<typename _Tp>\n     struct is_enum\n@@ -182,9 +211,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     : public integral_constant<bool, __is_class(_Tp)>\n     { };\n \n-  template<typename _Tp>\n-    struct remove_cv;\n-\n   template<typename>\n     struct __is_function_helper\n     : public false_type { };\n@@ -412,18 +438,21 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     { typedef typename remove_all_extents<_Tp>::type     type; };\n \n   /// pointer modifications [4.7.4].\n-#undef _DEFINE_SPEC_BODY\n-#define _DEFINE_SPEC_BODY(_Value)      \\\n+  template<typename _Tp, typename>\n+    struct __remove_pointer_helper\n     { typedef _Tp     type; };\n \n+  template<typename _Tp, typename _Up>\n+    struct __remove_pointer_helper<_Tp, _Up*>\n+    { typedef _Up     type; };\n+\n   /// remove_pointer\n   template<typename _Tp>\n     struct remove_pointer\n-    { typedef _Tp     type; };\n-  _DEFINE_SPEC(1, remove_pointer, _Tp*, false)\n+    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>\n+    { };\n \n-  /// remove_reference\n-  template<typename _Tp>\n+  template<typename>\n     struct remove_reference;\n \n   /// add_pointer\n@@ -435,7 +464,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n #undef _DEFINE_SPEC_1_HELPER\n #undef _DEFINE_SPEC_2_HELPER\n #undef _DEFINE_SPEC\n-#undef _DEFINE_SPEC_BODY\n \n _GLIBCXX_END_NAMESPACE_TR1\n }"}]}