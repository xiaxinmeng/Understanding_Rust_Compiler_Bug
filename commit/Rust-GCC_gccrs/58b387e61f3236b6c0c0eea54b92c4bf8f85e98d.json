{"sha": "58b387e61f3236b6c0c0eea54b92c4bf8f85e98d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThiMzg3ZTYxZjMyMzZiNmMwYzBlZWE1NGI5MmM0YmY4Zjg1ZTk4ZA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2015-03-12T09:53:36Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-03-12T09:53:36Z"}, "message": "re PR target/65103 ([i386] GOTOFF relocation is not propagated into address expression)\n\ngcc/\n\n\tPR target/65103\n\t* config/i386/i386.c (ix86_address_cost): Fix cost of a PIC\n\tregister.\n\ngcc/testsuite/\n\n\tPR target/65103\n\t* gcc.target/i386/pr65103-1.c: New.\n\nFrom-SVN: r221380", "tree": {"sha": "8590e2e69903c6f16de8debdfaf054da8e7633dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8590e2e69903c6f16de8debdfaf054da8e7633dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b89b8f062f42c782ca528be2a8239019141947f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b89b8f062f42c782ca528be2a8239019141947f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b89b8f062f42c782ca528be2a8239019141947f"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "43d67175732b78c762e7c74857ade38c79babff6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58b387e61f3236b6c0c0eea54b92c4bf8f85e98d", "patch": "@@ -1,3 +1,9 @@\n+2015-03-12  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR target/65103\n+\t* config/i386/i386.c (ix86_address_cost): Fix cost of a PIC\n+\tregister.\n+\n 2015-03-12  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR target/65044"}, {"sha": "47deda7ce50f44839d33ba9964cd3d7f7e7de751", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=58b387e61f3236b6c0c0eea54b92c4bf8f85e98d", "patch": "@@ -12931,30 +12931,26 @@ ix86_address_cost (rtx x, machine_mode, addr_space_t, bool)\n   if (parts.index && GET_CODE (parts.index) == SUBREG)\n     parts.index = SUBREG_REG (parts.index);\n \n-  /* Attempt to minimize number of registers in the address.  */\n-  if ((parts.base\n-       && (!REG_P (parts.base) || REGNO (parts.base) >= FIRST_PSEUDO_REGISTER))\n-      || (parts.index\n-\t  && (!REG_P (parts.index)\n-\t      || REGNO (parts.index) >= FIRST_PSEUDO_REGISTER)))\n-    cost++;\n-\n-  /* When address base or index is \"pic_offset_table_rtx\" we don't increase\n-     address cost.  When a memopt with \"pic_offset_table_rtx\" is not invariant\n-     itself it most likely means that base or index is not invariant.\n-     Therefore only \"pic_offset_table_rtx\" could be hoisted out, which is not\n-     profitable for x86.  */\n+  /* Attempt to minimize number of registers in the address by increasing\n+     address cost for each used register.  We don't increase address cost\n+     for \"pic_offset_table_rtx\".  When a memopt with \"pic_offset_table_rtx\"\n+     is not invariant itself it most likely means that base or index is not\n+     invariant.  Therefore only \"pic_offset_table_rtx\" could be hoisted out,\n+     which is not profitable for x86.  */\n   if (parts.base\n-      && (current_pass->type == GIMPLE_PASS\n-\t  || (!pic_offset_table_rtx\n-\t      || REGNO (pic_offset_table_rtx) != REGNO(parts.base)))\n       && (!REG_P (parts.base) || REGNO (parts.base) >= FIRST_PSEUDO_REGISTER)\n-      && parts.index\n       && (current_pass->type == GIMPLE_PASS\n-\t  || (!pic_offset_table_rtx\n-\t      || REGNO (pic_offset_table_rtx) != REGNO(parts.index)))\n+\t  || !pic_offset_table_rtx\n+\t  || !REG_P (parts.base)\n+\t  || REGNO (pic_offset_table_rtx) != REGNO (parts.base)))\n+    cost++;\n+\n+  if (parts.index\n       && (!REG_P (parts.index) || REGNO (parts.index) >= FIRST_PSEUDO_REGISTER)\n-      && parts.base != parts.index)\n+      && (current_pass->type == GIMPLE_PASS\n+\t  || !pic_offset_table_rtx\n+\t  || !REG_P (parts.index)\n+\t  || REGNO (pic_offset_table_rtx) != REGNO (parts.index)))\n     cost++;\n \n   /* AMD-K6 don't like addresses with ModR/M set to 00_xxx_100b,"}, {"sha": "4bd7f0e7211223429bc4f732292f6ac3763b33ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58b387e61f3236b6c0c0eea54b92c4bf8f85e98d", "patch": "@@ -1,3 +1,8 @@\n+2015-03-12  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR target/65103\n+\t* gcc.target/i386/pr65103-1.c: New.\n+\n 2015-03-12  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR target/65044"}, {"sha": "4e3a7a3a2bc6345364967af142699a64af2932f7", "filename": "gcc/testsuite/gcc.target/i386/pr65103-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65103-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b387e61f3236b6c0c0eea54b92c4bf8f85e98d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65103-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65103-1.c?ref=58b387e61f3236b6c0c0eea54b92c4bf8f85e98d", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-require-effective-target pie } */\n+/* { dg-options \"-O2 -fPIE\" } */\n+/* { dg-final { scan-assembler-not \"GOTOFF,\" } } */\n+\n+typedef struct S\n+{\n+  int a;\n+  int sum;\n+  int delta;\n+} S;\n+\n+S gs;\n+int global_opt (int max)\n+{\n+  while (gs.sum < max)\n+    gs.sum += gs.delta;\n+  return gs.a;\n+}"}]}