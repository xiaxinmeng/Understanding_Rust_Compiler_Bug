{"sha": "b1970801f4cb80dda52adae60bfc0bba690b983f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE5NzA4MDFmNGNiODBkZGE1MmFkYWU2MGJmYzBiYmE2OTBiOTgzZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-03-17T10:29:36Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-03-17T10:29:36Z"}, "message": "re PR c++/70194 (missing -Waddress on constexpr pointer)\n\n\tPR c++/70194\n\t* typeck.c (warn_for_null_address): New function.\n\t(cp_build_binary_op): Call it.\n\n\t* g++.dg/warn/constexpr-70194.C: New test.\n\nFrom-SVN: r234281", "tree": {"sha": "326d2a8e265ead4795e200df893f10b39d20caa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/326d2a8e265ead4795e200df893f10b39d20caa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1970801f4cb80dda52adae60bfc0bba690b983f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1970801f4cb80dda52adae60bfc0bba690b983f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1970801f4cb80dda52adae60bfc0bba690b983f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1970801f4cb80dda52adae60bfc0bba690b983f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b14bb68cce29823a1993d1dd392efbb8eb3913eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14bb68cce29823a1993d1dd392efbb8eb3913eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b14bb68cce29823a1993d1dd392efbb8eb3913eb"}], "stats": {"total": 109, "additions": 57, "deletions": 52}, "files": [{"sha": "224e3fc5efd3fdb9228e6a943d250e54409cb52a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1970801f4cb80dda52adae60bfc0bba690b983f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1970801f4cb80dda52adae60bfc0bba690b983f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b1970801f4cb80dda52adae60bfc0bba690b983f", "patch": "@@ -1,3 +1,9 @@\n+2016-03-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/70194\n+\t* typeck.c (warn_for_null_address): New function.\n+\t(cp_build_binary_op): Call it.\n+\n 2016-03-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/70259"}, {"sha": "447006cb327456b87bdfcb092d131cd85ed2e276", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 34, "deletions": 52, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1970801f4cb80dda52adae60bfc0bba690b983f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1970801f4cb80dda52adae60bfc0bba690b983f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b1970801f4cb80dda52adae60bfc0bba690b983f", "patch": "@@ -3974,6 +3974,38 @@ build_vec_cmp (tree_code code, tree type,\n   return build3 (VEC_COND_EXPR, type, cmp, minus_one_vec, zero_vec);\n }\n \n+/* Possibly warn about an address never being NULL.  */\n+\n+static void\n+warn_for_null_address (location_t location, tree op, tsubst_flags_t complain)\n+{\n+  if (!warn_address\n+      || (complain & tf_warning) == 0\n+      || c_inhibit_evaluation_warnings != 0\n+      || TREE_NO_WARNING (op))\n+    return;\n+\n+  tree cop = fold_non_dependent_expr (op);\n+\n+  if (TREE_CODE (cop) == ADDR_EXPR\n+      && decl_with_nonnull_addr_p (TREE_OPERAND (cop, 0))\n+      && !TREE_NO_WARNING (cop))\n+    warning_at (location, OPT_Waddress, \"the address of %qD will never \"\n+\t\t\"be NULL\", TREE_OPERAND (cop, 0));\n+\n+  if (CONVERT_EXPR_P (op)\n+      && TREE_CODE (TREE_TYPE (TREE_OPERAND (op, 0))) == REFERENCE_TYPE)\n+    {\n+      tree inner_op = op;\n+      STRIP_NOPS (inner_op);\n+\n+      if (DECL_P (inner_op))\n+\twarning_at (location, OPT_Waddress,\n+\t\t    \"the compiler can assume that the address of \"\n+\t\t    \"%qD will never be NULL\", inner_op);\n+    }\n+}\n+\n /* Build a binary-operation expression without default conversions.\n    CODE is the kind of expression to build.\n    LOCATION is the location_t of the operator in the source code.\n@@ -4520,32 +4552,7 @@ cp_build_binary_op (location_t location,\n \t  else\n \t    result_type = type0;\n \n-\t  if (TREE_CODE (op0) == ADDR_EXPR\n-\t      && decl_with_nonnull_addr_p (TREE_OPERAND (op0, 0)))\n-\t    {\n-\t      if ((complain & tf_warning)\n-\t\t  && c_inhibit_evaluation_warnings == 0\n-\t\t  && !TREE_NO_WARNING (op0))\n-\t\twarning (OPT_Waddress, \"the address of %qD will never be NULL\",\n-\t\t\t TREE_OPERAND (op0, 0));\n-\t    }\n-\n-\t  if (CONVERT_EXPR_P (op0)\n-\t      && TREE_CODE (TREE_TYPE (TREE_OPERAND (op0, 0)))\n-\t\t == REFERENCE_TYPE)\n-\t    {\n-\t      tree inner_op0 = op0;\n-\t      STRIP_NOPS (inner_op0);\n-\n-\t      if ((complain & tf_warning)\n-\t\t  && c_inhibit_evaluation_warnings == 0\n-\t\t  && !TREE_NO_WARNING (op0)\n-\t\t  && DECL_P (inner_op0))\n-\t\twarning_at (location, OPT_Waddress,\n-\t\t\t    \"the compiler can assume that the address of \"\n-\t\t\t    \"%qD will never be NULL\",\n-\t\t\t    inner_op0);\n-\t    }\n+\t  warn_for_null_address (location, op0, complain);\n \t}\n       else if (((code1 == POINTER_TYPE || TYPE_PTRDATAMEM_P (type1))\n \t\t&& null_ptr_cst_p (op0))\n@@ -4559,32 +4566,7 @@ cp_build_binary_op (location_t location,\n \t  else\n \t    result_type = type1;\n \n-\t  if (TREE_CODE (op1) == ADDR_EXPR \n-\t      && decl_with_nonnull_addr_p (TREE_OPERAND (op1, 0)))\n-\t    {\n-\t      if ((complain & tf_warning)\n-\t\t  && c_inhibit_evaluation_warnings == 0\n-\t\t  && !TREE_NO_WARNING (op1))\n-\t\twarning (OPT_Waddress, \"the address of %qD will never be NULL\",\n-\t\t\t TREE_OPERAND (op1, 0));\n-\t    }\n-\n-\t  if (CONVERT_EXPR_P (op1)\n-\t      && TREE_CODE (TREE_TYPE (TREE_OPERAND (op1, 0)))\n-\t\t == REFERENCE_TYPE)\n-\t    {\n-\t      tree inner_op1 = op1;\n-\t      STRIP_NOPS (inner_op1);\n-\n-\t      if ((complain & tf_warning)\n-\t\t  && c_inhibit_evaluation_warnings == 0\n-\t\t  && !TREE_NO_WARNING (op1)\n-\t\t  && DECL_P (inner_op1))\n-\t\twarning_at (location, OPT_Waddress,\n-\t\t\t    \"the compiler can assume that the address of \"\n-\t\t\t    \"%qD will never be NULL\",\n-\t\t\t    inner_op1);\n-\t    }\n+\t  warn_for_null_address (location, op1, complain);\n \t}\n       else if ((code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n \t       || (TYPE_PTRDATAMEM_P (type0) && TYPE_PTRDATAMEM_P (type1)))"}, {"sha": "e27a4e178203cea076d7ef2bd696171584c49b13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1970801f4cb80dda52adae60bfc0bba690b983f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1970801f4cb80dda52adae60bfc0bba690b983f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1970801f4cb80dda52adae60bfc0bba690b983f", "patch": "@@ -1,3 +1,8 @@\n+2016-03-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/70194\n+\t* g++.dg/warn/constexpr-70194.C: New test.\n+\n 2016-03-16  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/70240"}, {"sha": "cdc56c0c6f20e8ed3191551a6e3fab36ce2983d3", "filename": "gcc/testsuite/g++.dg/warn/constexpr-70194.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1970801f4cb80dda52adae60bfc0bba690b983f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconstexpr-70194.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1970801f4cb80dda52adae60bfc0bba690b983f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconstexpr-70194.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconstexpr-70194.C?ref=b1970801f4cb80dda52adae60bfc0bba690b983f", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/70194\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wall\" }\n+\n+int i;\n+\n+const bool b0 = &i == 0; // { dg-warning \"the address of .i. will never be NULL\" }\n+constexpr int *p = &i;\n+const bool b1 = p == 0; // { dg-warning \"the address of .i. will never be NULL\" }\n+const bool b2 = 0 == p; // { dg-warning \"the address of .i. will never be NULL\" }\n+const bool b3 = p != 0; // { dg-warning \"the address of .i. will never be NULL\" }\n+const bool b4 = 0 != p; // { dg-warning \"the address of .i. will never be NULL\" }"}]}