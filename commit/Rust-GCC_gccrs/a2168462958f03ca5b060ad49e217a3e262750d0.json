{"sha": "a2168462958f03ca5b060ad49e217a3e262750d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxNjg0NjI5NThmMDNjYTViMDYwYWQ0OWUyMTdhM2UyNjI3NTBkMA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2017-04-27T13:43:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T13:43:49Z"}, "message": "sinput.adb: Minor code cleanup.\n\n2017-04-27  Bob Duff  <duff@adacore.com>\n\n\t* sinput.adb: Minor code cleanup.\n\t* namet.adb (Append): Create faster versions of\n\tAppend(String) and Append(Name_Id) by using slice assignment\n\tinstead of loops.\n\t* sem_util.adb (In_Instance): Speed this up by removing\n\tunnecessary tests; Is_Generic_Instance is defined for all\n\tentities.\n\t* sem_util.ads, sem_util.adb (In_Parameter_Specification):\n\tRemove unused function.\n\t* alloc.ads (Nodes_Initial): Use a much larger value, because\n\tthe compiler was spending a lot of time copying the nodes table\n\twhen it grows. This number was chosen in 1996, so is rather out\n\tof date with current memory sizes. Anyway, it's virtual memory.\n\tGet rid of Orig_Nodes_...; use Node_... instead.\n\t* atree.adb (Lock): Do not release the Nodes tables; it's a\n\twaste of time.\n\tOrig_Nodes_ ==> Nodes_\n\t* nlists.adb: Orig_Nodes_ ==> Nodes_\n\t* g-table.adb: Remove unused \"with\" clause.\n\t* g-table.ads, table.ads: Remove Big_Table_Type, which should\n\tnot be used by clients.\n\t* g-dyntab.adb (Last_Allocated): New function\n\tto encapsulate T.P.Last_Allocated, which I'm thinking of changing.\n\nFrom-SVN: r247335", "tree": {"sha": "9bc9c64f1c0dab1d83d0e57fd7a8eb3a7fdab89b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bc9c64f1c0dab1d83d0e57fd7a8eb3a7fdab89b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2168462958f03ca5b060ad49e217a3e262750d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2168462958f03ca5b060ad49e217a3e262750d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2168462958f03ca5b060ad49e217a3e262750d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2168462958f03ca5b060ad49e217a3e262750d0/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8a36447dbdf5baafe85f953c261ec35f149dfb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a36447dbdf5baafe85f953c261ec35f149dfb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8a36447dbdf5baafe85f953c261ec35f149dfb7"}], "stats": {"total": 165, "additions": 93, "deletions": 72}, "files": [{"sha": "30dbbfcb1dfaa9ea4eeed1e1aed7bdb39f398b17", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -1,3 +1,29 @@\n+2017-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* sinput.adb: Minor code cleanup.\n+\t* namet.adb (Append): Create faster versions of\n+\tAppend(String) and Append(Name_Id) by using slice assignment\n+\tinstead of loops.\n+\t* sem_util.adb (In_Instance): Speed this up by removing\n+\tunnecessary tests; Is_Generic_Instance is defined for all\n+\tentities.\n+\t* sem_util.ads, sem_util.adb (In_Parameter_Specification):\n+\tRemove unused function.\n+\t* alloc.ads (Nodes_Initial): Use a much larger value, because\n+\tthe compiler was spending a lot of time copying the nodes table\n+\twhen it grows. This number was chosen in 1996, so is rather out\n+\tof date with current memory sizes. Anyway, it's virtual memory.\n+\tGet rid of Orig_Nodes_...; use Node_... instead.\n+\t* atree.adb (Lock): Do not release the Nodes tables; it's a\n+\twaste of time.\n+\tOrig_Nodes_ ==> Nodes_\n+\t* nlists.adb: Orig_Nodes_ ==> Nodes_\n+\t* g-table.adb: Remove unused \"with\" clause.\n+\t* g-table.ads, table.ads: Remove Big_Table_Type, which should\n+\tnot be used by clients.\n+\t* g-dyntab.adb (Last_Allocated): New function\n+\tto encapsulate T.P.Last_Allocated, which I'm thinking of changing.\n+\n 2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_eval.adb (Subtypes_Statically_Compatible): Remove duplicated"}, {"sha": "74885fdd1891733b2d64e55da329fd7eddef325e", "filename": "gcc/ada/alloc.ads", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Falloc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Falloc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falloc.ads?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -100,7 +100,7 @@ package Alloc is\n    Names_Initial                    : constant := 6_000;   -- Namet\n    Names_Increment                  : constant := 100;\n \n-   Nodes_Initial                    : constant := 50_000;  -- Atree\n+   Nodes_Initial                    : constant := 5_000_000;  -- Atree\n    Nodes_Increment                  : constant := 100;\n    Nodes_Release_Threshold          : constant := 100_000;\n \n@@ -110,10 +110,6 @@ package Alloc is\n    Obsolescent_Warnings_Initial     : constant := 50;      -- Sem_Prag\n    Obsolescent_Warnings_Increment   : constant := 200;\n \n-   Orig_Nodes_Initial               : constant := 50_000;  -- Atree\n-   Orig_Nodes_Increment             : constant := 100;\n-   Orig_Nodes_Release_Threshold     : constant := 100_000;\n-\n    Pending_Instantiations_Initial   : constant := 10;      -- Inline\n    Pending_Instantiations_Increment : constant := 100;\n "}, {"sha": "16feee0670b2d1b14bd18e664cb2d2f8326d0448", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -519,9 +519,9 @@ package body Atree is\n       Table_Component_Type => Node_Id,\n       Table_Index_Type     => Node_Id'Base,\n       Table_Low_Bound      => First_Node_Id,\n-      Table_Initial        => Alloc.Orig_Nodes_Initial,\n-      Table_Increment      => Alloc.Orig_Nodes_Increment,\n-      Release_Threshold    => Alloc.Orig_Nodes_Release_Threshold,\n+      Table_Initial        => Alloc.Nodes_Initial,\n+      Table_Increment      => Alloc.Nodes_Increment,\n+      Release_Threshold    => Alloc.Nodes_Release_Threshold,\n       Table_Name           => \"Orig_Nodes\");\n \n    --------------------------\n@@ -1579,11 +1579,15 @@ package body Atree is\n \n    procedure Lock is\n    begin\n-      Nodes.Release;\n+      --  We used to Release the tables, as in the comments below, but that is\n+      --  a waste of time. We're only wasting virtual memory here, and the\n+      --  release calls copy large amounts of data.\n+\n+      --  Nodes.Release;\n       Nodes.Locked := True;\n-      Flags.Release;\n+      --  Flags.Release;\n       Flags.Locked := True;\n-      Orig_Nodes.Release;\n+      --  Orig_Nodes.Release;\n       Orig_Nodes.Locked := True;\n    end Lock;\n "}, {"sha": "f975e6cc5d55d0a934cf0e392dd9a0b3a247d31a", "filename": "gcc/ada/g-dyntab.adb", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fg-dyntab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fg-dyntab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dyntab.adb?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -42,6 +42,10 @@ package body GNAT.Dynamic_Tables is\n    -- Local Subprograms --\n    -----------------------\n \n+   function Last_Allocated (T : Instance) return Table_Last_Type;\n+   pragma Inline (Last_Allocated);\n+   --  Return the index of the last allocated element\n+\n    procedure Grow (T : in out Instance; New_Last : Table_Last_Type);\n    --  This is called when we are about to set the value of Last to a value\n    --  that is larger than Last_Allocated. This reallocates the table to the\n@@ -68,7 +72,7 @@ package body GNAT.Dynamic_Tables is\n       pragma Assert (not T.Locked);\n       New_Last : constant Table_Last_Type := Last (T) + 1;\n    begin\n-      if New_Last <= T.P.Last_Allocated then\n+      if New_Last <= Last_Allocated (T) then\n          --  fast path\n          T.P.Last := New_Last;\n          T.Table (New_Last) := New_Val;\n@@ -115,7 +119,7 @@ package body GNAT.Dynamic_Tables is\n    procedure For_Each (Table : Instance) is\n       Quit : Boolean := False;\n    begin\n-      for Index in Table_Low_Bound .. Table.P.Last loop\n+      for Index in First .. Last (Table) loop\n          Action (Index, Table.Table (Index), Quit);\n          exit when Quit;\n       end loop;\n@@ -135,12 +139,12 @@ package body GNAT.Dynamic_Tables is\n       --  storage. Fortunately, GNAT doesn't do that.\n \n       pragma Assert (not T.Locked);\n-      pragma Assert (New_Last > T.P.Last_Allocated);\n+      pragma Assert (New_Last > Last_Allocated (T));\n \n       subtype Table_Length_Type is Table_Index_Type'Base\n         range 0 .. Table_Index_Type'Base'Last;\n \n-      Old_Last_Allocated   : constant Table_Last_Type  := T.P.Last_Allocated;\n+      Old_Last_Allocated   : constant Table_Last_Type  := Last_Allocated (T);\n       Old_Allocated_Length : constant Table_Length_Type :=\n                                Old_Last_Allocated - First + 1;\n \n@@ -200,7 +204,7 @@ package body GNAT.Dynamic_Tables is\n          T.Table := To_Table_Ptr (New_Table);\n       end;\n \n-      pragma Assert (New_Last <= T.P.Last_Allocated);\n+      pragma Assert (New_Last <= Last_Allocated (T));\n       pragma Assert (T.Table /= null);\n       pragma Assert (T.Table /= Empty_Table_Ptr);\n    end Grow;\n@@ -221,7 +225,7 @@ package body GNAT.Dynamic_Tables is\n \n    procedure Init (T : in out Instance) is\n       pragma Assert (not T.Locked);\n-      subtype Alloc_Type is Table_Type (First .. T.P.Last_Allocated);\n+      subtype Alloc_Type is Table_Type (First .. Last_Allocated (T));\n       type Alloc_Ptr is access all Alloc_Type;\n \n       procedure Free is new Ada.Unchecked_Deallocation (Alloc_Type, Alloc_Ptr);\n@@ -247,7 +251,7 @@ package body GNAT.Dynamic_Tables is\n \n    function Is_Empty (T : Instance) return Boolean is\n    begin\n-      return Last (T) = Table_Low_Bound - 1;\n+      return Last (T) = First - 1;\n    end Is_Empty;\n \n    ----------\n@@ -259,6 +263,15 @@ package body GNAT.Dynamic_Tables is\n       return T.P.Last;\n    end Last;\n \n+   --------------------\n+   -- Last_Allocated --\n+   --------------------\n+\n+   function Last_Allocated (T : Instance) return Table_Last_Type is\n+   begin\n+      return T.P.Last_Allocated;\n+   end Last_Allocated;\n+\n    ----------\n    -- Move --\n    ----------\n@@ -272,8 +285,8 @@ package body GNAT.Dynamic_Tables is\n \n       From.Table            := Empty_Table_Ptr;\n       From.Locked           := False;\n-      From.P.Last_Allocated := Table_Low_Bound - 1;\n-      From.P.Last           := Table_Low_Bound - 1;\n+      From.P.Last_Allocated := First - 1;\n+      From.P.Last           := First - 1;\n       pragma Assert (Is_Empty (From));\n    end Move;\n \n@@ -283,7 +296,7 @@ package body GNAT.Dynamic_Tables is\n \n    procedure Release (T : in out Instance) is\n       pragma Assert (not T.Locked);\n-      Old_Last_Allocated : constant Table_Last_Type := T.P.Last_Allocated;\n+      Old_Last_Allocated : constant Table_Last_Type := Last_Allocated (T);\n \n       function New_Last_Allocated return Table_Last_Type;\n       --  Compute the new value of Last_Allocated. This is normally equal to\n@@ -325,8 +338,8 @@ package body GNAT.Dynamic_Tables is\n    --  Start of processing for Release\n \n    begin\n-      if New_Last_Alloc < T.P.Last_Allocated then\n-         pragma Assert (Last (T) < T.P.Last_Allocated);\n+      if New_Last_Alloc < Last_Allocated (T) then\n+         pragma Assert (Last (T) < Last_Allocated (T));\n          pragma Assert (T.Table /= Empty_Table_Ptr);\n \n          declare\n@@ -373,7 +386,7 @@ package body GNAT.Dynamic_Tables is\n       --  passed by reference. Without the copy, we would deallocate the array\n       --  containing Item, leaving a dangling pointer.\n \n-      if Index > T.P.Last_Allocated then\n+      if Index > Last_Allocated (T) then\n          declare\n             Item_Copy : constant Table_Component_Type := Item;\n          begin\n@@ -397,7 +410,7 @@ package body GNAT.Dynamic_Tables is\n    procedure Set_Last (T : in out Instance; New_Val : Table_Last_Type) is\n    begin\n       pragma Assert (not T.Locked);\n-      if New_Val > T.P.Last_Allocated then\n+      if New_Val > Last_Allocated (T) then\n          Grow (T, New_Val);\n       end if;\n "}, {"sha": "ac33bc312766adc614baabdefce0dd1cf3a7cbc8", "filename": "gcc/ada/g-table.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fg-table.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fg-table.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.adb?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -32,8 +32,6 @@\n with System;        use System;\n with System.Memory; use System.Memory;\n \n-with Ada.Unchecked_Conversion;\n-\n package body GNAT.Table is\n \n    --------------"}, {"sha": "ab5381353c34784037b7ae64af09e055a4c459a8", "filename": "gcc/ada/g-table.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fg-table.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fg-table.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.ads?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -71,7 +71,6 @@ package GNAT.Table is\n    subtype Table_Last_Type is Tab.Table_Last_Type;\n    subtype Table_Type is Tab.Table_Type;\n    function \"=\" (X, Y : Table_Type) return Boolean renames Tab.\"=\";\n-   subtype Big_Table_Type is Tab.Big_Table_Type;\n \n    subtype Table_Ptr is Tab.Table_Ptr;\n "}, {"sha": "4e6a69ad81faee03dd9f3b4bf677b3eb9c120af2", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -116,14 +116,15 @@ package body Namet is\n \n    procedure Append (Buf : in out Bounded_String; C : Character) is\n    begin\n-      if Buf.Length >= Buf.Chars'Last then\n+      Buf.Length := Buf.Length + 1;\n+\n+      if Buf.Length > Buf.Chars'Last then\n          Write_Str (\"Name buffer overflow; Max_Length = \");\n          Write_Int (Int (Buf.Max_Length));\n          Write_Line (\"\");\n          raise Program_Error;\n       end if;\n \n-      Buf.Length := Buf.Length + 1;\n       Buf.Chars (Buf.Length) := C;\n    end Append;\n \n@@ -137,10 +138,20 @@ package body Namet is\n    end Append;\n \n    procedure Append (Buf : in out Bounded_String; S : String) is\n+      First : constant Natural := Buf.Length + 1;\n    begin\n-      for J in S'Range loop\n-         Append (Buf, S (J));\n-      end loop;\n+      Buf.Length := Buf.Length + S'Length;\n+\n+      if Buf.Length > Buf.Chars'Last then\n+         Write_Str (\"Name buffer overflow; Max_Length = \");\n+         Write_Int (Int (Buf.Max_Length));\n+         Write_Line (\"\");\n+         raise Program_Error;\n+      end if;\n+\n+      Buf.Chars (First .. Buf.Length) := S;\n+      --  A loop calling Append(Character) would be cleaner, but this slice\n+      --  assignment is substantially faster.\n    end Append;\n \n    procedure Append (Buf : in out Bounded_String; Buf2 : Bounded_String) is\n@@ -150,12 +161,12 @@ package body Namet is\n \n    procedure Append (Buf : in out Bounded_String; Id : Name_Id) is\n       pragma Assert (Id in Name_Entries.First .. Name_Entries.Last);\n-      S : constant Int := Name_Entries.Table (Id).Name_Chars_Index;\n-\n+      Index : constant Int := Name_Entries.Table (Id).Name_Chars_Index;\n+      Len : constant Short := Name_Entries.Table (Id).Name_Len;\n+      Chars : Name_Chars.Table_Type renames\n+        Name_Chars.Table (Index + 1 .. Index + Int (Len));\n    begin\n-      for J in 1 .. Natural (Name_Entries.Table (Id).Name_Len) loop\n-         Append (Buf, Name_Chars.Table (S + Int (J)));\n-      end loop;\n+      Append (Buf, String (Chars));\n    end Append;\n \n    --------------------"}, {"sha": "0f111d84d2bee641447b3b78cd9fa8debfe51c75", "filename": "gcc/ada/nlists.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fnlists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fnlists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.adb?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -92,17 +92,17 @@ package body Nlists is\n       Table_Component_Type => Node_Or_Entity_Id,\n       Table_Index_Type     => Node_Or_Entity_Id'Base,\n       Table_Low_Bound      => First_Node_Id,\n-      Table_Initial        => Alloc.Orig_Nodes_Initial,\n-      Table_Increment      => Alloc.Orig_Nodes_Increment,\n-      Release_Threshold    => Alloc.Orig_Nodes_Release_Threshold,\n+      Table_Initial        => Alloc.Nodes_Initial,\n+      Table_Increment      => Alloc.Nodes_Increment,\n+      Release_Threshold    => Alloc.Nodes_Release_Threshold,\n       Table_Name           => \"Next_Node\");\n \n    package Prev_Node is new Table.Table (\n       Table_Component_Type => Node_Or_Entity_Id,\n       Table_Index_Type     => Node_Or_Entity_Id'Base,\n       Table_Low_Bound      => First_Node_Id,\n-      Table_Initial        => Alloc.Orig_Nodes_Initial,\n-      Table_Increment      => Alloc.Orig_Nodes_Increment,\n+      Table_Initial        => Alloc.Nodes_Initial,\n+      Table_Increment      => Alloc.Nodes_Increment,\n       Table_Name           => \"Prev_Node\");\n \n    -----------------------"}, {"sha": "1a3b0426d85c4fe1c2a9ce0b255a1c3ad2ce923c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -11250,9 +11250,7 @@ package body Sem_Util is\n    begin\n       S := Current_Scope;\n       while Present (S) and then S /= Standard_Standard loop\n-         if Ekind_In (S, E_Function, E_Package, E_Procedure)\n-           and then Is_Generic_Instance (S)\n-         then\n+         if Is_Generic_Instance (S) then\n             --  A child instance is always compiled in the context of a parent\n             --  instance. Nevertheless, the actuals are not analyzed in an\n             --  instance context. We detect this case by examining the current\n@@ -11376,26 +11374,6 @@ package body Sem_Util is\n       return False;\n    end In_Package_Body;\n \n-   --------------------------------\n-   -- In_Parameter_Specification --\n-   --------------------------------\n-\n-   function In_Parameter_Specification (N : Node_Id) return Boolean is\n-      PN : Node_Id;\n-\n-   begin\n-      PN := Parent (N);\n-      while Present (PN) loop\n-         if Nkind (PN) = N_Parameter_Specification then\n-            return True;\n-         end if;\n-\n-         PN := Parent (PN);\n-      end loop;\n-\n-      return False;\n-   end In_Parameter_Specification;\n-\n    --------------------------\n    -- In_Pragma_Expression --\n    --------------------------"}, {"sha": "3cc3df4a3329c898298f9cdc9a5df5633e514a98", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -1326,9 +1326,6 @@ package Sem_Util is\n    function In_Package_Body return Boolean;\n    --  Returns True if current scope is within a package body\n \n-   function In_Parameter_Specification (N : Node_Id) return Boolean;\n-   --  Returns True if node N belongs to a parameter specification\n-\n    function In_Pragma_Expression (N : Node_Id; Nam : Name_Id) return Boolean;\n    --  Returns true if the expression N occurs within a pragma with name Nam\n "}, {"sha": "bab55c1715eeacd0e73b85ac7537ad12d79f41f1", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -882,7 +882,7 @@ package body Sinput is\n    is\n       --  A fat pointer is a pair consisting of data pointer and dope pointer,\n       --  in that order. So we want to overwrite the second word.\n-      Dope : Address;\n+      Dope : System.Address;\n       pragma Import (Ada, Dope);\n       use System.Storage_Elements;\n       for Dope'Address use Src + System.Address'Size / 8;"}, {"sha": "8782f116d516d38d3b0143ae7e2c2234eabed90d", "filename": "gcc/ada/table.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Ftable.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2168462958f03ca5b060ad49e217a3e262750d0/gcc%2Fada%2Ftable.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftable.ads?ref=a2168462958f03ca5b060ad49e217a3e262750d0", "patch": "@@ -71,7 +71,6 @@ package Table is\n       subtype Valid_Table_Index_Type is Tab.Valid_Table_Index_Type;\n       subtype Table_Last_Type is Tab.Table_Last_Type;\n       subtype Table_Type is Tab.Table_Type;\n-      subtype Big_Table_Type is Tab.Big_Table_Type;\n \n       subtype Table_Ptr is Tab.Table_Ptr;\n "}]}