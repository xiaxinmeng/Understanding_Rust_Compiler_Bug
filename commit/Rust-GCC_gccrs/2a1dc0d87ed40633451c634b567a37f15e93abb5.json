{"sha": "2a1dc0d87ed40633451c634b567a37f15e93abb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmExZGMwZDg3ZWQ0MDYzMzQ1MWM2MzRiNTY3YTM3ZjE1ZTkzYWJiNQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-05-21T21:55:37Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-05-21T21:55:37Z"}, "message": "c-common.c (c_common_init): Set options->unsigned_char from flag_signed_char.\n\n\t* c-common.c (c_common_init): Set options->unsigned_char from\n\tflag_signed_char.\n\t(cb_register_builtins): Define __STRICT_ANSI__ and\n\t__CHAR_UNSIGNED__ here...\n\t* cppinit.c (init_builtins): Not here.\n\t(cpp_create_reader): unsigned_char option defaults to 0, not\n\t!DEFAULT_SIGNED_CHAR.\n\t(COMMAND_LINE_OPTIONS, cpp_handle_option): Lose -fsigned-char\n\tand -funsigned-char.\n\n\t* cpphash.h (struct spec_nodes): Kill n__STRICT_ANSI__.\n\t* cpphash.c (_cpp_init_hashtable): Don't set it.\n\t* cppmacro.c (builtin_macro) [BT_STDC]: Use the language setting\n\tdirectly.  Clarify comment.\n\nFrom-SVN: r53703", "tree": {"sha": "a9277c30531397fe1a8be45a591e60dad0e34257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9277c30531397fe1a8be45a591e60dad0e34257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a1dc0d87ed40633451c634b567a37f15e93abb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1dc0d87ed40633451c634b567a37f15e93abb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1dc0d87ed40633451c634b567a37f15e93abb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1dc0d87ed40633451c634b567a37f15e93abb5/comments", "author": null, "committer": null, "parents": [{"sha": "d476dcad7f5d7b4c0a03d5a053e713c6b1b3a528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d476dcad7f5d7b4c0a03d5a053e713c6b1b3a528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d476dcad7f5d7b4c0a03d5a053e713c6b1b3a528"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "63536dd36a2c846bb9b730b09f349c0d5631fa83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a1dc0d87ed40633451c634b567a37f15e93abb5", "patch": "@@ -1,4 +1,22 @@\n+2002-05-21  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-common.c (c_common_init): Set options->unsigned_char from\n+\tflag_signed_char.\n+\t(cb_register_builtins): Define __STRICT_ANSI__ and\n+\t__CHAR_UNSIGNED__ here...\n+\t* cppinit.c (init_builtins): Not here.\n+\t(cpp_create_reader): unsigned_char option defaults to 0, not\n+\t!DEFAULT_SIGNED_CHAR.\n+\t(COMMAND_LINE_OPTIONS, cpp_handle_option): Lose -fsigned-char\n+\tand -funsigned-char.\n+\n+\t* cpphash.h (struct spec_nodes): Kill n__STRICT_ANSI__.\n+\t* cpphash.c (_cpp_init_hashtable): Don't set it.\n+\t* cppmacro.c (builtin_macro) [BT_STDC]: Use the language setting\n+\tdirectly.  Clarify comment.\n+\n 2002-05-21  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n \t* bb-reorder.c (make_reorder_chain_1): Modified.\n \t* cfganal.c (can_fallthru, flow_call_edges_add,\n \tflow_preorder_transversal_compute): Modified.\n@@ -80,8 +98,8 @@ Tue May 21 10:51:54 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-05-20  Dale Johannesen  <dalej@apple.com>\n \n-        * combine.c (cant_combine_insn_p):  Back out my\n-        previous patch.\n+\t* combine.c (cant_combine_insn_p):  Back out my\n+\tprevious patch.\n \n 2002-05-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n@@ -134,14 +152,14 @@ Tue May 21 10:51:54 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-05-19  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.h (FUNCTION_VALUE): Only return vectors in\n-        an altivec register if TARGET_ALTIVEC.\n+\t* config/rs6000/rs6000.h (FUNCTION_VALUE): Only return vectors in\n+\tan altivec register if TARGET_ALTIVEC.\n \n-        * config/rs600/rs6000.c (rs6000_emit_move): Change VECTOR_MODE_P\n-        to ALTIVEC_VECTOR_MODE.\n-        (rs6000_va_arg): Only vectors of type AltiVec are 16 byte aligned.\n-        (rs6000_va_arg): Vectors may go in registers if they are not\n-        altivec vectors.\n+\t* config/rs600/rs6000.c (rs6000_emit_move): Change VECTOR_MODE_P\n+\tto ALTIVEC_VECTOR_MODE.\n+\t(rs6000_va_arg): Only vectors of type AltiVec are 16 byte aligned.\n+\t(rs6000_va_arg): Vectors may go in registers if they are not\n+\taltivec vectors.\n \n 2002-05-19  Kazu Hirata  <kazu@cs.umass.edu>\n "}, {"sha": "89f98703d054ee40f4712fb9620e2e993178a4cb", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2a1dc0d87ed40633451c634b567a37f15e93abb5", "patch": "@@ -4372,6 +4372,12 @@ cb_register_builtins (pfile)\n   if (flag_no_inline)\n     cpp_define (pfile, \"__NO_INLINE__\");\n \n+  if (flag_iso)\n+    cpp_define (pfile, \"__STRICT_ANSI__\");\n+\n+  if (!flag_signed_char)\n+    cpp_define (pfile, \"__CHAR_UNSIGNED__\");\n+\n   /* A straightforward target hook doesn't work, because of problems\n      linking that hook's body when part of non-C front ends.  */\n   #define preprocessing_asm_p() (cpp_get_options (pfile)->lang == CLK_ASM)\n@@ -4461,15 +4467,7 @@ c_common_init (filename)\n   options->int_precision = TYPE_PRECISION (integer_type_node);\n   options->wchar_precision = TYPE_PRECISION (wchar_type_node);\n   options->unsigned_wchar = TREE_UNSIGNED (wchar_type_node);\n-  /* This can be uncommented when 1) This all happens before\n-     cpp_post_options() (needed for __CHAR_UNSIGNED__ builtin), which\n-     in turn requires wchat_type_node to be set up properly by then,\n-     and 2) tradcpp is integrated, so that the preprocessors don't\n-     need to handle the command-line options and the specs in gcc.c\n-     can be updated.\n-\n-     options->unsigned_char = !flag_signed_char; */\n-\n+  options->unsigned_char = !flag_signed_char;\n   options->warn_multichar = warn_multichar;\n   options->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n "}, {"sha": "a90ec9bda53a277c05f2e6cb3fcdd698caa6ee6b", "filename": "gcc/cpphash.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=2a1dc0d87ed40633451c634b567a37f15e93abb5", "patch": "@@ -72,7 +72,6 @@ _cpp_init_hashtable (pfile, table)\n   s->n_defined\t\t= cpp_lookup (pfile, DSC(\"defined\"));\n   s->n_true\t\t= cpp_lookup (pfile, DSC(\"true\"));\n   s->n_false\t\t= cpp_lookup (pfile, DSC(\"false\"));\n-  s->n__STRICT_ANSI__   = cpp_lookup (pfile, DSC(\"__STRICT_ANSI__\"));\n   s->n__VA_ARGS__       = cpp_lookup (pfile, DSC(\"__VA_ARGS__\"));\n   s->n__VA_ARGS__->flags |= NODE_DIAGNOSTIC;\n }"}, {"sha": "7be439fc43af5e9ee9deef4f15340c6ca931015c", "filename": "gcc/cpphash.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=2a1dc0d87ed40633451c634b567a37f15e93abb5", "patch": "@@ -188,7 +188,6 @@ struct spec_nodes\n   cpp_hashnode *n_defined;\t\t/* defined operator */\n   cpp_hashnode *n_true;\t\t\t/* C++ keyword true */\n   cpp_hashnode *n_false;\t\t/* C++ keyword false */\n-  cpp_hashnode *n__STRICT_ANSI__;\t/* STDC_0_IN_SYSTEM_HEADERS */\n   cpp_hashnode *n__VA_ARGS__;\t\t/* C99 vararg macros */\n };\n "}, {"sha": "f8e9cd5e08e6e8219f4ebe532b0f38ae2672ccee", "filename": "gcc/cppinit.c", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=2a1dc0d87ed40633451c634b567a37f15e93abb5", "patch": "@@ -500,7 +500,7 @@ cpp_create_reader (lang)\n   CPP_OPTION (pfile, char_precision) = CHAR_BIT;\n   CPP_OPTION (pfile, wchar_precision) = CHAR_BIT * sizeof (int);\n   CPP_OPTION (pfile, int_precision) = CHAR_BIT * sizeof (int);\n-  CPP_OPTION (pfile, unsigned_char) = !DEFAULT_SIGNED_CHAR;\n+  CPP_OPTION (pfile, unsigned_char) = 0;\n   CPP_OPTION (pfile, unsigned_wchar) = 1;\n \n   /* It's simplest to just create this struct whether or not it will\n@@ -694,25 +694,16 @@ init_builtins (pfile)\n \n   if (CPP_OPTION (pfile, cplusplus))\n     _cpp_define_builtin (pfile, \"__cplusplus 1\");\n-\n-  if (CPP_OPTION (pfile, objc))\n+  else if (CPP_OPTION (pfile, objc))\n     _cpp_define_builtin (pfile, \"__OBJC__ 1\");\n+  else if (CPP_OPTION (pfile, lang) == CLK_ASM)\n+    _cpp_define_builtin (pfile, \"__ASSEMBLER__ 1\");\n \n   if (CPP_OPTION (pfile, lang) == CLK_STDC94)\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199409L\");\n   else if (CPP_OPTION (pfile, c99))\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199901L\");\n \n-  if (CPP_OPTION (pfile, unsigned_char))\n-    _cpp_define_builtin (pfile, \"__CHAR_UNSIGNED__ 1\");\n-\n-  if (CPP_OPTION (pfile, lang) == CLK_STDC89\n-      || CPP_OPTION (pfile, lang) == CLK_STDC94\n-      || CPP_OPTION (pfile, lang) == CLK_STDC99)\n-    _cpp_define_builtin (pfile, \"__STRICT_ANSI__ 1\");\n-  else if (CPP_OPTION (pfile, lang) == CLK_ASM)\n-    _cpp_define_builtin (pfile, \"__ASSEMBLER__ 1\");\n-\n   if (pfile->cb.register_builtins)\n     (*pfile->cb.register_builtins) (pfile);\n }\n@@ -1158,9 +1149,7 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"fno-show-column\",          0,      OPT_fno_show_column)            \\\n   DEF_OPT(\"fpreprocessed\",            0,      OPT_fpreprocessed)              \\\n   DEF_OPT(\"fshow-column\",             0,      OPT_fshow_column)               \\\n-  DEF_OPT(\"fsigned-char\",             0,      OPT_fsigned_char)               \\\n   DEF_OPT(\"ftabstop=\",                no_num, OPT_ftabstop)                   \\\n-  DEF_OPT(\"funsigned-char\",           0,      OPT_funsigned_char)             \\\n   DEF_OPT(\"h\",                        0,      OPT_h)                          \\\n   DEF_OPT(\"idirafter\",                no_dir, OPT_idirafter)                  \\\n   DEF_OPT(\"imacros\",                  no_fil, OPT_imacros)                    \\\n@@ -1365,12 +1354,6 @@ cpp_handle_option (pfile, argc, argv, ignore)\n \tcase OPT_fno_show_column:\n \t  CPP_OPTION (pfile, show_column) = 0;\n \t  break;\n-\tcase OPT_fsigned_char:\n-\t  CPP_OPTION (pfile, unsigned_char) = 0;\n-\t  break;\n-\tcase OPT_funsigned_char:\n-\t  CPP_OPTION (pfile, unsigned_char) = 1;\n-\t  break;\n \tcase OPT_ftabstop:\n \t  /* Silently ignore empty string, non-longs and silly values.  */\n \t  if (arg[0] != '\\0')"}, {"sha": "797a30428f882ab5753a1be99083439fc5d59b8f", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1dc0d87ed40633451c634b567a37f15e93abb5/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=2a1dc0d87ed40633451c634b567a37f15e93abb5", "patch": "@@ -174,14 +174,17 @@ builtin_macro (pfile, node)\n \n       /* __STDC__ has the value 1 under normal circumstances.\n \t However, if (a) we are in a system header, (b) the option\n-\t stdc_0_in_system_headers is true, and (c) __STRICT_ANSI__ is\n-\t not defined, then it has the value 0.  */\n+\t stdc_0_in_system_headers is true (set by target config), and\n+\t (c) we are not in strictly conforming mode, then it has the\n+\t value 0.  */\n     case BT_STDC:\n       {\n \tint stdc;\n+\tenum c_lang lang = CPP_OPTION (pfile, lang);\n \tif (CPP_IN_SYSTEM_HEADER (pfile)\n \t    && CPP_OPTION (pfile, stdc_0_in_system_headers)\n-\t    && pfile->spec_nodes.n__STRICT_ANSI__->type == NT_VOID)\n+\t    && !(lang == CLK_STDC89 || lang == CLK_STDC94\n+\t\t || lang == CLK_STDC99))  /* || lang == CLK_CXX98 ? */\n \t  stdc = 0;\n \telse\n \t  stdc = 1;"}]}