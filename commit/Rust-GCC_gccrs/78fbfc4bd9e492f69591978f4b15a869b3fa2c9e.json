{"sha": "78fbfc4bd9e492f69591978f4b15a869b3fa2c9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhmYmZjNGJkOWU0OTJmNjk1OTE5NzhmNGIxNWE4NjliM2ZhMmM5ZQ==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2004-07-10T01:59:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-10T01:59:12Z"}, "message": "i386.c (init_cumulative_args): Set mmx/sse registers available for use only when TARGET_MMX/_SSE is set...\n\n        * config/i386/i386.c (init_cumulative_args): Set mmx/sse registers\n        available for use only when TARGET_MMX/_SSE is set, and check for\n        variable argument function if any register count is non-zero.\n        (function_arg): Correctly suppress repeated warnings for passing SSE\n        vectors are arguments without SSE enabled.\n        (ix86_function_arg_boundary): Without SSE enabled, the use of what\n        would be SSE register modes does no longer influence the alignment.\n\nFrom-SVN: r84431", "tree": {"sha": "dc6aa8d928dfb58a2c2e40708e3e5e1953838c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc6aa8d928dfb58a2c2e40708e3e5e1953838c5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78fbfc4bd9e492f69591978f4b15a869b3fa2c9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fbfc4bd9e492f69591978f4b15a869b3fa2c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78fbfc4bd9e492f69591978f4b15a869b3fa2c9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fbfc4bd9e492f69591978f4b15a869b3fa2c9e/comments", "author": null, "committer": null, "parents": [{"sha": "e4d3eef11d6ed460db6aa66fea489bd3e0c9f577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d3eef11d6ed460db6aa66fea489bd3e0c9f577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4d3eef11d6ed460db6aa66fea489bd3e0c9f577"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "a9ce92c7edb3634566be8f80feba9f55a5da99e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fbfc4bd9e492f69591978f4b15a869b3fa2c9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fbfc4bd9e492f69591978f4b15a869b3fa2c9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78fbfc4bd9e492f69591978f4b15a869b3fa2c9e", "patch": "@@ -1,3 +1,13 @@\n+2004-07-09  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* config/i386/i386.c (init_cumulative_args): Set mmx/sse registers\n+\tavailable for use only when TARGET_MMX/_SSE is set, and check for\n+\tvariable argument function if any register count is non-zero.\n+\t(function_arg): Correctly suppress repeated warnings for passing SSE\n+\tvectors are arguments without SSE enabled.\n+\t(ix86_function_arg_boundary): Without SSE enabled, the use of what\n+\twould be SSE register modes does no longer influence the alignment.\n+\n 2004-07-09  Richard Henderson  <rth@redhat.com>\n \n \t* builtins.c (std_gimplify_va_arg_expr): Deny ARGS_GROW_DOWNWARD."}, {"sha": "7d7312ca6d061dc6fe4ef06c88dc4f9a07228b65", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fbfc4bd9e492f69591978f4b15a869b3fa2c9e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fbfc4bd9e492f69591978f4b15a869b3fa2c9e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=78fbfc4bd9e492f69591978f4b15a869b3fa2c9e", "patch": "@@ -1921,8 +1921,10 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n     cum->nregs = ix86_function_regparm (fntype, fndecl);\n   else\n     cum->nregs = ix86_regparm;\n-  cum->sse_nregs = SSE_REGPARM_MAX;\n-  cum->mmx_nregs = MMX_REGPARM_MAX;\n+  if (TARGET_SSE)\n+    cum->sse_nregs = SSE_REGPARM_MAX;\n+  if (TARGET_MMX)\n+    cum->mmx_nregs = MMX_REGPARM_MAX;\n   cum->warn_sse = true;\n   cum->warn_mmx = true;\n   cum->maybe_vaarg = false;\n@@ -1937,13 +1939,12 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \t}\n     }\n \n-\n   /* Determine if this function has variable arguments.  This is\n      indicated by the last argument being 'void_type_mode' if there\n      are no variable arguments.  If there are variable arguments, then\n-     we won't pass anything in registers */\n+     we won't pass anything in registers in 32-bit mode. */\n \n-  if (cum->nregs || !TARGET_MMX || !TARGET_SSE)\n+  if (cum->nregs || cum->mmx_nregs || cum->sse_nregs)\n     {\n       for (param = (fntype) ? TYPE_ARG_TYPES (fntype) : 0;\n \t   param != 0; param = next_param)\n@@ -2692,7 +2693,7 @@ function_arg (CUMULATIVE_ARGS *cum,\t/* current arg information */\n       case V2DFmode:\n \tif (!type || !AGGREGATE_TYPE_P (type))\n \t  {\n-\t    if (!TARGET_SSE && !warnedmmx && cum->warn_sse)\n+\t    if (!TARGET_SSE && !warnedsse && cum->warn_sse)\n \t      {\n \t\twarnedsse = true;\n \t\twarning (\"SSE vector argument without SSE enabled \"\n@@ -2839,7 +2840,9 @@ ix86_function_arg_boundary (enum machine_mode mode, tree type)\n \t The handling here differs from field_alignment.  ICC aligns MMX\n \t arguments to 4 byte boundaries, while structure fields are aligned\n \t to 8 byte boundaries.  */\n-      if (!type)\n+      if (!TARGET_SSE)\n+\talign = PARM_BOUNDARY;\n+      else if (!type)\n \t{\n \t  if (!SSE_REG_MODE_P (mode))\n \t    align = PARM_BOUNDARY;"}]}