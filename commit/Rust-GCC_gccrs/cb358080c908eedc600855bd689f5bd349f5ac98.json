{"sha": "cb358080c908eedc600855bd689f5bd349f5ac98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzNTgwODBjOTA4ZWVkYzYwMDg1NWJkNjg5ZjViZDM0OWY1YWM5OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-27T13:13:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-27T13:13:22Z"}, "message": "re PR c++/81675 (attribute(noreturn) of destructor in :? not honored)\n\n\tPR c++/81675\n\t* cp-gimplify.c (cp_fold) <case COND_EXPR>: Don't return immediately\n\tfor VOID_TYPE_P COND_EXPRs, instead fold the operands and if op0 is\n\tINTEGER_CST, ensure that both op1 and op2 are non-NULL and fall\n\tthrough into normal folding, otherwise just rebuild x if any op\n\tchanged.\n\n\t* g++.dg/warn/pr81675.C: New test.\n\nFrom-SVN: r255167", "tree": {"sha": "f6d8a5086d6acee3218bc636a68083d0ac0969c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6d8a5086d6acee3218bc636a68083d0ac0969c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb358080c908eedc600855bd689f5bd349f5ac98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb358080c908eedc600855bd689f5bd349f5ac98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb358080c908eedc600855bd689f5bd349f5ac98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb358080c908eedc600855bd689f5bd349f5ac98/comments", "author": null, "committer": null, "parents": [{"sha": "04f915037850166c05c73baf3d6e2ba10c790ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f915037850166c05c73baf3d6e2ba10c790ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f915037850166c05c73baf3d6e2ba10c790ea1"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "5dda6046ec42091de69f0debe4dc3bb7a406c6de", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb358080c908eedc600855bd689f5bd349f5ac98/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb358080c908eedc600855bd689f5bd349f5ac98/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb358080c908eedc600855bd689f5bd349f5ac98", "patch": "@@ -1,4 +1,15 @@\n-2017-11-14 Boris Kolpackov  <boris@codesynthesis.com>\n+2017-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/81675\n+\t* cp-gimplify.c (cp_fold) <case COND_EXPR>: Don't return immediately\n+\tfor VOID_TYPE_P COND_EXPRs, instead fold the operands and if op0 is\n+\tINTEGER_CST, ensure that both op1 and op2 are non-NULL and fall\n+\tthrough into normal folding, otherwise just rebuild x if any op\n+\tchanged.\n+\n+\t* g++.dg/warn/pr81675.C: New test.\n+\n+2017-11-14  Boris Kolpackov  <boris@codesynthesis.com>\n \n \t* Make-lang.in (c++.install-plugin): Install backend import library.\n "}, {"sha": "734b15660b33bce2af6de71bfb5036c2bf63457f", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb358080c908eedc600855bd689f5bd349f5ac98/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb358080c908eedc600855bd689f5bd349f5ac98/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=cb358080c908eedc600855bd689f5bd349f5ac98", "patch": "@@ -2299,13 +2299,6 @@ cp_fold (tree x)\n \n     case VEC_COND_EXPR:\n     case COND_EXPR:\n-\n-      /* Don't bother folding a void condition, since it can't produce a\n-\t constant value.  Also, some statement-level uses of COND_EXPR leave\n-\t one of the branches NULL, so folding would crash.  */\n-      if (VOID_TYPE_P (TREE_TYPE (x)))\n-\treturn x;\n-\n       loc = EXPR_LOCATION (x);\n       op0 = cp_fold_rvalue (TREE_OPERAND (x, 0));\n       op1 = cp_fold (TREE_OPERAND (x, 1));\n@@ -2319,6 +2312,29 @@ cp_fold (tree x)\n \t  if (!VOID_TYPE_P (TREE_TYPE (op2)))\n \t    op2 = cp_truthvalue_conversion (op2);\n \t}\n+      else if (VOID_TYPE_P (TREE_TYPE (x)))\n+\t{\n+\t  if (TREE_CODE (op0) == INTEGER_CST)\n+\t    {\n+\t      /* If the condition is constant, fold can fold away\n+\t\t the COND_EXPR.  If some statement-level uses of COND_EXPR\n+\t\t have one of the branches NULL, avoid folding crash.  */\n+\t      if (!op1)\n+\t\top1 = build_empty_stmt (loc);\n+\t      if (!op2)\n+\t\top2 = build_empty_stmt (loc);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Otherwise, don't bother folding a void condition, since\n+\t\t it can't produce a constant value.  */\n+\t      if (op0 != TREE_OPERAND (x, 0)\n+\t\t  || op1 != TREE_OPERAND (x, 1)\n+\t\t  || op2 != TREE_OPERAND (x, 2))\n+\t\tx = build3_loc (loc, code, TREE_TYPE (x), op0, op1, op2);\n+\t      break;\n+\t    }\n+\t}\n \n       if (op0 != TREE_OPERAND (x, 0)\n \t  || op1 != TREE_OPERAND (x, 1)"}, {"sha": "a52550985af4b74278fc9b83d60aeda0ef014066", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb358080c908eedc600855bd689f5bd349f5ac98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb358080c908eedc600855bd689f5bd349f5ac98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb358080c908eedc600855bd689f5bd349f5ac98", "patch": "@@ -1,3 +1,8 @@\n+2017-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/81675\n+\t* g++.dg/warn/pr81675.C: New test.\n+\n 2017-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/unroll1.ads: Remove alignment clause."}, {"sha": "24a7a3b067747ec888b2ffae0b949c9eeca12086", "filename": "gcc/testsuite/g++.dg/warn/pr81675.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb358080c908eedc600855bd689f5bd349f5ac98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81675.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb358080c908eedc600855bd689f5bd349f5ac98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81675.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81675.C?ref=cb358080c908eedc600855bd689f5bd349f5ac98", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/81675\n+// { dg-do compile }\n+// { dg-options \"-Wall\" }\n+\n+struct S\n+{\n+  ~S () __attribute__((noreturn));\n+  int a;\n+};\n+\n+int\n+foo ()\n+{\n+  false ? 5 : S ().a;\n+}"}]}