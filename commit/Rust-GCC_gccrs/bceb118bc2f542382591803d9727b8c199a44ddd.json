{"sha": "bceb118bc2f542382591803d9727b8c199a44ddd", "node_id": "C_kwDOANBUbNoAKGJjZWIxMThiYzJmNTQyMzgyNTkxODAzZDk3MjdiOGMxOTlhNDRkZGQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2023-02-10T09:47:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-10T09:47:36Z"}, "message": "Merge #1789\n\n1789: Run workflow r=CohenArthur a=Parthib314\n\nFixes #1767 \n\nCo-authored-by: Parthib <94271200+Parthib314@users.noreply.github.com>", "tree": {"sha": "85f24c7145ccb5d8dcf0daf546600bc23ca79b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85f24c7145ccb5d8dcf0daf546600bc23ca79b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bceb118bc2f542382591803d9727b8c199a44ddd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj5hK4CRBK7hj4Ov3rIwAAH7QIAB+M0plse4H7pVPmA3i+BgtQ\nu2KhkbzneQ7fG1iGLp4dJ0fcg3Gc7hAdLJ4ilOjHOwaPKmJAsuWbaNHwRSqaFfiH\nW2bWeemp33mYpW4OUi+WkkfqZAnMSc/H5K90esQZXml0G/kENiUag+ZuFAAotgh5\na9/cyFFoWskT147CSdiiduvPdWbGGgp5FDTjJShyHF5BQ37ajdYY3e76gCvFlL5L\nCXBhWniVX2oXlufH7KNcae5sccxYSIexVHJ9jtG4BWE/K6+9EZhoV8y1RDhaghVE\nPNQksIE9fw35JkLZesalp4XjAV3HfOuodiiWG2jBgo8z1NsKr4XFp+nhWJ7etFo=\n=Ha6h\n-----END PGP SIGNATURE-----\n", "payload": "tree 85f24c7145ccb5d8dcf0daf546600bc23ca79b4e\nparent d4cce9835097f31d0e32fe47a2644dca4af9c1a3\nparent 0d6b11551b810426119827d40461964f8804b016\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1676022456 +0000\ncommitter GitHub <noreply@github.com> 1676022456 +0000\n\nMerge #1789\n\n1789: Run workflow r=CohenArthur a=Parthib314\n\nFixes #1767 \n\nCo-authored-by: Parthib <94271200+Parthib314@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bceb118bc2f542382591803d9727b8c199a44ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bceb118bc2f542382591803d9727b8c199a44ddd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bceb118bc2f542382591803d9727b8c199a44ddd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4cce9835097f31d0e32fe47a2644dca4af9c1a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4cce9835097f31d0e32fe47a2644dca4af9c1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4cce9835097f31d0e32fe47a2644dca4af9c1a3"}, {"sha": "0d6b11551b810426119827d40461964f8804b016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d6b11551b810426119827d40461964f8804b016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d6b11551b810426119827d40461964f8804b016"}], "stats": {"total": 213, "additions": 95, "deletions": 118}, "files": [{"sha": "bb554f0704836d0536c1bf0394d01542a16b3f21", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bceb118bc2f542382591803d9727b8c199a44ddd/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bceb118bc2f542382591803d9727b8c199a44ddd/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=bceb118bc2f542382591803d9727b8c199a44ddd", "patch": "@@ -66,7 +66,6 @@ GRS_OBJS = \\\n     rust/rust-lang.o \\\n     rust/rust-object-export.o \\\n     rust/rust-linemap.o \\\n-    rust/rust-gcc-diagnostics.o \\\n     rust/rust-diagnostics.o \\\n     rust/rust-gcc.o \\\n     rust/rust-token.o \\"}, {"sha": "894772dd5a510999f985da79a753c1ec41da20b6", "filename": "gcc/rust/rust-diagnostics.cc", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bceb118bc2f542382591803d9727b8c199a44ddd/gcc%2Frust%2Frust-diagnostics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bceb118bc2f542382591803d9727b8c199a44ddd/gcc%2Frust%2Frust-diagnostics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-diagnostics.cc?ref=bceb118bc2f542382591803d9727b8c199a44ddd", "patch": "@@ -21,6 +21,9 @@\n #include \"rust-system.h\"\n #include \"rust-diagnostics.h\"\n \n+#include \"options.h\"\n+#include \"diagnostic-metadata.h\"\n+\n static std::string\n mformat_value ()\n {\n@@ -130,6 +133,13 @@ expand_message (const char *fmt, va_list ap)\n static const char *cached_open_quote = NULL;\n static const char *cached_close_quote = NULL;\n \n+void\n+rust_be_get_quotechars (const char **open_qu, const char **close_qu)\n+{\n+  *open_qu = open_quote;\n+  *close_qu = close_quote;\n+}\n+\n const char *\n rust_open_quote ()\n {\n@@ -146,6 +156,16 @@ rust_close_quote ()\n   return cached_close_quote;\n }\n \n+void\n+rust_be_internal_error_at (const Location location, const std::string &errmsg)\n+{\n+  std::string loc_str = Linemap::location_to_string (location);\n+  if (loc_str.empty ())\n+    internal_error (\"%s\", errmsg.c_str ());\n+  else\n+    internal_error (\"at %s, %s\", loc_str.c_str (), errmsg.c_str ());\n+}\n+\n void\n rust_internal_error_at (const Location location, const char *fmt, ...)\n {\n@@ -156,6 +176,13 @@ rust_internal_error_at (const Location location, const char *fmt, ...)\n   va_end (ap);\n }\n \n+void\n+rust_be_error_at (const Location location, const std::string &errmsg)\n+{\n+  location_t gcc_loc = location.gcc_location ();\n+  error_at (gcc_loc, \"%s\", errmsg.c_str ());\n+}\n+\n void\n rust_error_at (const Location location, const char *fmt, ...)\n {\n@@ -166,6 +193,38 @@ rust_error_at (const Location location, const char *fmt, ...)\n   va_end (ap);\n }\n \n+class rust_error_code_rule : public diagnostic_metadata::rule\n+{\n+public:\n+  rust_error_code_rule (const ErrorCode code) : m_code (code) {}\n+\n+  char *make_description () const final override\n+  {\n+    return xstrdup (m_code.m_str);\n+  }\n+\n+  char *make_url () const final override\n+  {\n+    return concat (\"https://doc.rust-lang.org/error-index.html#\", m_code.m_str,\n+\t\t   NULL);\n+  }\n+\n+private:\n+  const ErrorCode m_code;\n+};\n+\n+void\n+rust_be_error_at (const RichLocation &location, const ErrorCode code,\n+\t\t  const std::string &errmsg)\n+{\n+  /* TODO: 'error_at' would like a non-'const' 'rich_location *'.  */\n+  rich_location &gcc_loc = const_cast<rich_location &> (location.get ());\n+  diagnostic_metadata m;\n+  rust_error_code_rule rule (code);\n+  m.add_rule (rule);\n+  error_meta (&gcc_loc, m, \"%s\", errmsg.c_str ());\n+}\n+\n void\n rust_error_at (const RichLocation &location, const ErrorCode code,\n \t       const char *fmt, ...)\n@@ -177,6 +236,14 @@ rust_error_at (const RichLocation &location, const ErrorCode code,\n   va_end (ap);\n }\n \n+void\n+rust_be_warning_at (const Location location, int opt,\n+\t\t    const std::string &warningmsg)\n+{\n+  location_t gcc_loc = location.gcc_location ();\n+  warning_at (gcc_loc, opt, \"%s\", warningmsg.c_str ());\n+}\n+\n void\n rust_warning_at (const Location location, int opt, const char *fmt, ...)\n {\n@@ -187,6 +254,13 @@ rust_warning_at (const Location location, int opt, const char *fmt, ...)\n   va_end (ap);\n }\n \n+void\n+rust_be_fatal_error (const Location location, const std::string &fatalmsg)\n+{\n+  location_t gcc_loc = location.gcc_location ();\n+  fatal_error (gcc_loc, \"%s\", fatalmsg.c_str ());\n+}\n+\n void\n rust_fatal_error (const Location location, const char *fmt, ...)\n {\n@@ -197,6 +271,13 @@ rust_fatal_error (const Location location, const char *fmt, ...)\n   va_end (ap);\n }\n \n+void\n+rust_be_inform (const Location location, const std::string &infomsg)\n+{\n+  location_t gcc_loc = location.gcc_location ();\n+  inform (gcc_loc, \"%s\", infomsg.c_str ());\n+}\n+\n void\n rust_inform (const Location location, const char *fmt, ...)\n {\n@@ -208,6 +289,14 @@ rust_inform (const Location location, const char *fmt, ...)\n }\n \n // Rich Locations\n+void\n+rust_be_error_at (const RichLocation &location, const std::string &errmsg)\n+{\n+  /* TODO: 'error_at' would like a non-'const' 'rich_location *'.  */\n+  rich_location &gcc_loc = const_cast<rich_location &> (location.get ());\n+  error_at (&gcc_loc, \"%s\", errmsg.c_str ());\n+}\n+\n void\n rust_error_at (const RichLocation &location, const char *fmt, ...)\n {\n@@ -218,6 +307,12 @@ rust_error_at (const RichLocation &location, const char *fmt, ...)\n   va_end (ap);\n }\n \n+bool\n+rust_be_debug_p (void)\n+{\n+  return !!flag_rust_debug;\n+}\n+\n void\n rust_debug_loc (const Location location, const char *fmt, ...)\n {"}, {"sha": "98e2af7308d763ee844cdd264241fc7ca5327294", "filename": "gcc/rust/rust-gcc-diagnostics.cc", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cce9835097f31d0e32fe47a2644dca4af9c1a3/gcc%2Frust%2Frust-gcc-diagnostics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cce9835097f31d0e32fe47a2644dca4af9c1a3/gcc%2Frust%2Frust-gcc-diagnostics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc-diagnostics.cc?ref=d4cce9835097f31d0e32fe47a2644dca4af9c1a3", "patch": "@@ -1,117 +0,0 @@\n-// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n-\n-// This file is part of GCC.\n-\n-// GCC is free software; you can redistribute it and/or modify it under\n-// the terms of the GNU General Public License as published by the Free\n-// Software Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-// for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with GCC; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// rust-gcc-diagnostics.cc -- GCC implementation of rust diagnostics interface.\n-\n-#include \"rust-system.h\"\n-#include \"rust-diagnostics.h\"\n-\n-#include \"options.h\"\n-#include \"diagnostic-metadata.h\"\n-\n-void\n-rust_be_internal_error_at (const Location location, const std::string &errmsg)\n-{\n-  std::string loc_str = Linemap::location_to_string (location);\n-  if (loc_str.empty ())\n-    internal_error (\"%s\", errmsg.c_str ());\n-  else\n-    internal_error (\"at %s, %s\", loc_str.c_str (), errmsg.c_str ());\n-}\n-\n-void\n-rust_be_error_at (const Location location, const std::string &errmsg)\n-{\n-  location_t gcc_loc = location.gcc_location ();\n-  error_at (gcc_loc, \"%s\", errmsg.c_str ());\n-}\n-\n-void\n-rust_be_warning_at (const Location location, int opt,\n-\t\t    const std::string &warningmsg)\n-{\n-  location_t gcc_loc = location.gcc_location ();\n-  warning_at (gcc_loc, opt, \"%s\", warningmsg.c_str ());\n-}\n-\n-void\n-rust_be_fatal_error (const Location location, const std::string &fatalmsg)\n-{\n-  location_t gcc_loc = location.gcc_location ();\n-  fatal_error (gcc_loc, \"%s\", fatalmsg.c_str ());\n-}\n-\n-void\n-rust_be_inform (const Location location, const std::string &infomsg)\n-{\n-  location_t gcc_loc = location.gcc_location ();\n-  inform (gcc_loc, \"%s\", infomsg.c_str ());\n-}\n-\n-void\n-rust_be_error_at (const RichLocation &location, const std::string &errmsg)\n-{\n-  /* TODO: 'error_at' would like a non-'const' 'rich_location *'.  */\n-  rich_location &gcc_loc = const_cast<rich_location &> (location.get ());\n-  error_at (&gcc_loc, \"%s\", errmsg.c_str ());\n-}\n-\n-class rust_error_code_rule : public diagnostic_metadata::rule\n-{\n-public:\n-  rust_error_code_rule (const ErrorCode code) : m_code (code) {}\n-\n-  char *make_description () const final override\n-  {\n-    return xstrdup (m_code.m_str);\n-  }\n-\n-  char *make_url () const final override\n-  {\n-    return concat (\"https://doc.rust-lang.org/error-index.html#\", m_code.m_str,\n-\t\t   NULL);\n-  }\n-\n-private:\n-  const ErrorCode m_code;\n-};\n-\n-void\n-rust_be_error_at (const RichLocation &location, const ErrorCode code,\n-\t\t  const std::string &errmsg)\n-{\n-  /* TODO: 'error_at' would like a non-'const' 'rich_location *'.  */\n-  rich_location &gcc_loc = const_cast<rich_location &> (location.get ());\n-  diagnostic_metadata m;\n-  rust_error_code_rule rule (code);\n-  m.add_rule (rule);\n-  error_meta (&gcc_loc, m, \"%s\", errmsg.c_str ());\n-}\n-\n-void\n-rust_be_get_quotechars (const char **open_qu, const char **close_qu)\n-{\n-  *open_qu = open_quote;\n-  *close_qu = close_quote;\n-}\n-\n-bool\n-rust_be_debug_p (void)\n-{\n-  return !!flag_rust_debug;\n-}"}]}