{"sha": "89be17a1b231ade643f28fbe616d53377e069da8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODliZTE3YTFiMjMxYWRlNjQzZjI4ZmJlNjE2ZDUzMzc3ZTA2OWRhOA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-13T16:03:38Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-09-17T15:40:02Z"}, "message": "Fix 'hash_table::expand' to destruct stale Value objects\n\nThus plugging potentional memory leaks if these have non-trivial\nconstructor/destructor.\n\nSee\n<https://stackoverflow.com/questions/6730403/how-to-delete-object-constructed-via-placement-new-operator>\nand others.\n\nAs one example, compilation of 'g++.dg/warn/Wmismatched-tags.C' per\n'valgrind --leak-check=full' improves as follows:\n\n     [...]\n    -\n    -104 bytes in 1 blocks are definitely lost in loss record 399 of 519\n    -   at 0x483DFAF: realloc (vg_replace_malloc.c:836)\n    -   by 0x223B62C: xrealloc (xmalloc.c:179)\n    -   by 0xA8D848: void va_heap::reserve<class_decl_loc_t::class_key_loc_t>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int, bool) (vec.h:290)\n    -   by 0xA8B373: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::reserve(unsigned int, bool) (vec.h:1858)\n    -   by 0xA8B277: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::safe_push(class_decl_loc_t::class_key_loc_t const&) (vec.h:1967)\n    -   by 0xA57481: class_decl_loc_t::add_or_diag_mismatched_tag(tree_node*, tag_types, bool, bool) (parser.c:32967)\n    -   by 0xA573E1: class_decl_loc_t::add(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32941)\n    -   by 0xA56C52: cp_parser_check_class_key(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32819)\n    -   by 0xA3AD12: cp_parser_elaborated_type_specifier(cp_parser*, bool, bool) (parser.c:20227)\n    -   by 0xA37EF2: cp_parser_type_specifier(cp_parser*, int, cp_decl_specifier_seq*, bool, int*, bool*) (parser.c:18942)\n    -   by 0xA31CDD: cp_parser_decl_specifier_seq(cp_parser*, int, cp_decl_specifier_seq*, int*) (parser.c:15517)\n    -   by 0xA43C71: cp_parser_parameter_declaration(cp_parser*, int, bool, bool*) (parser.c:24242)\n    -\n    -168 bytes in 3 blocks are definitely lost in loss record 422 of 519\n    -   at 0x483DFAF: realloc (vg_replace_malloc.c:836)\n    -   by 0x223B62C: xrealloc (xmalloc.c:179)\n    -   by 0xA8D848: void va_heap::reserve<class_decl_loc_t::class_key_loc_t>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int, bool) (vec.h:290)\n    -   by 0xA8B373: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::reserve(unsigned int, bool) (vec.h:1858)\n    -   by 0xA8B277: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::safe_push(class_decl_loc_t::class_key_loc_t const&) (vec.h:1967)\n    -   by 0xA57481: class_decl_loc_t::add_or_diag_mismatched_tag(tree_node*, tag_types, bool, bool) (parser.c:32967)\n    -   by 0xA573E1: class_decl_loc_t::add(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32941)\n    -   by 0xA56C52: cp_parser_check_class_key(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32819)\n    -   by 0xA3AD12: cp_parser_elaborated_type_specifier(cp_parser*, bool, bool) (parser.c:20227)\n    -   by 0xA37EF2: cp_parser_type_specifier(cp_parser*, int, cp_decl_specifier_seq*, bool, int*, bool*) (parser.c:18942)\n    -   by 0xA31CDD: cp_parser_decl_specifier_seq(cp_parser*, int, cp_decl_specifier_seq*, int*) (parser.c:15517)\n    -   by 0xA53385: cp_parser_single_declaration(cp_parser*, vec<deferred_access_check, va_gc, vl_embed>*, bool, bool, bool*) (parser.c:31072)\n    -\n    -488 bytes in 7 blocks are definitely lost in loss record 449 of 519\n    -   at 0x483DFAF: realloc (vg_replace_malloc.c:836)\n    -   by 0x223B62C: xrealloc (xmalloc.c:179)\n    -   by 0xA8D848: void va_heap::reserve<class_decl_loc_t::class_key_loc_t>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int, bool) (vec.h:290)\n    -   by 0xA8B373: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::reserve(unsigned int, bool) (vec.h:1858)\n    -   by 0xA8B277: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::safe_push(class_decl_loc_t::class_key_loc_t const&) (vec.h:1967)\n    -   by 0xA57481: class_decl_loc_t::add_or_diag_mismatched_tag(tree_node*, tag_types, bool, bool) (parser.c:32967)\n    -   by 0xA573E1: class_decl_loc_t::add(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32941)\n    -   by 0xA56C52: cp_parser_check_class_key(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32819)\n    -   by 0xA3AD12: cp_parser_elaborated_type_specifier(cp_parser*, bool, bool) (parser.c:20227)\n    -   by 0xA37EF2: cp_parser_type_specifier(cp_parser*, int, cp_decl_specifier_seq*, bool, int*, bool*) (parser.c:18942)\n    -   by 0xA31CDD: cp_parser_decl_specifier_seq(cp_parser*, int, cp_decl_specifier_seq*, int*) (parser.c:15517)\n    -   by 0xA49508: cp_parser_member_declaration(cp_parser*) (parser.c:26440)\n    -\n    -728 bytes in 7 blocks are definitely lost in loss record 455 of 519\n    -   at 0x483B7F3: malloc (vg_replace_malloc.c:309)\n    -   by 0x223B63F: xrealloc (xmalloc.c:177)\n    -   by 0xA8D848: void va_heap::reserve<class_decl_loc_t::class_key_loc_t>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int, bool) (vec.h:290)\n    -   by 0xA8B373: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::reserve(unsigned int, bool) (vec.h:1858)\n    -   by 0xA57508: class_decl_loc_t::add_or_diag_mismatched_tag(tree_node*, tag_types, bool, bool) (parser.c:32980)\n    -   by 0xA573E1: class_decl_loc_t::add(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32941)\n    -   by 0xA56C52: cp_parser_check_class_key(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32819)\n    -   by 0xA48BC6: cp_parser_class_head(cp_parser*, bool*) (parser.c:26090)\n    -   by 0xA4674B: cp_parser_class_specifier_1(cp_parser*) (parser.c:25302)\n    -   by 0xA47D76: cp_parser_class_specifier(cp_parser*) (parser.c:25680)\n    -   by 0xA37E27: cp_parser_type_specifier(cp_parser*, int, cp_decl_specifier_seq*, bool, int*, bool*) (parser.c:18912)\n    -   by 0xA31CDD: cp_parser_decl_specifier_seq(cp_parser*, int, cp_decl_specifier_seq*, int*) (parser.c:15517)\n    -\n    -832 bytes in 8 blocks are definitely lost in loss record 458 of 519\n    -   at 0x483B7F3: malloc (vg_replace_malloc.c:309)\n    -   by 0x223B63F: xrealloc (xmalloc.c:177)\n    -   by 0xA8D848: void va_heap::reserve<class_decl_loc_t::class_key_loc_t>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int, bool) (vec.h:290)\n    -   by 0xA901ED: bool vec_safe_reserve<class_decl_loc_t::class_key_loc_t, va_heap>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int, bool) (vec.h:697)\n    -   by 0xA8F161: void vec_alloc<class_decl_loc_t::class_key_loc_t, va_heap>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int) (vec.h:718)\n    -   by 0xA8D18D: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>::copy() const (vec.h:979)\n    -   by 0xA8B0C3: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::copy() const (vec.h:1824)\n    -   by 0xA896B1: class_decl_loc_t::operator=(class_decl_loc_t const&) (parser.c:32697)\n    -   by 0xA571FD: class_decl_loc_t::add(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32899)\n    -   by 0xA56C52: cp_parser_check_class_key(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32819)\n    -   by 0xA3AD12: cp_parser_elaborated_type_specifier(cp_parser*, bool, bool) (parser.c:20227)\n    -   by 0xA37EF2: cp_parser_type_specifier(cp_parser*, int, cp_decl_specifier_seq*, bool, int*, bool*) (parser.c:18942)\n    -\n    -1,144 bytes in 11 blocks are definitely lost in loss record 466 of 519\n    -   at 0x483B7F3: malloc (vg_replace_malloc.c:309)\n    -   by 0x223B63F: xrealloc (xmalloc.c:177)\n    -   by 0xA8D848: void va_heap::reserve<class_decl_loc_t::class_key_loc_t>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int, bool) (vec.h:290)\n    -   by 0xA901ED: bool vec_safe_reserve<class_decl_loc_t::class_key_loc_t, va_heap>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int, bool) (vec.h:697)\n    -   by 0xA8F161: void vec_alloc<class_decl_loc_t::class_key_loc_t, va_heap>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int) (vec.h:718)\n    -   by 0xA8D18D: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>::copy() const (vec.h:979)\n    -   by 0xA8B0C3: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::copy() const (vec.h:1824)\n    -   by 0xA896B1: class_decl_loc_t::operator=(class_decl_loc_t const&) (parser.c:32697)\n    -   by 0xA571FD: class_decl_loc_t::add(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32899)\n    -   by 0xA56C52: cp_parser_check_class_key(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32819)\n    -   by 0xA48BC6: cp_parser_class_head(cp_parser*, bool*) (parser.c:26090)\n    -   by 0xA4674B: cp_parser_class_specifier_1(cp_parser*) (parser.c:25302)\n    -\n    -1,376 bytes in 10 blocks are definitely lost in loss record 467 of 519\n    -   at 0x483DFAF: realloc (vg_replace_malloc.c:836)\n    -   by 0x223B62C: xrealloc (xmalloc.c:179)\n    -   by 0xA8D848: void va_heap::reserve<class_decl_loc_t::class_key_loc_t>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int, bool) (vec.h:290)\n    -   by 0xA8B373: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::reserve(unsigned int, bool) (vec.h:1858)\n    -   by 0xA8B277: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::safe_push(class_decl_loc_t::class_key_loc_t const&) (vec.h:1967)\n    -   by 0xA57481: class_decl_loc_t::add_or_diag_mismatched_tag(tree_node*, tag_types, bool, bool) (parser.c:32967)\n    -   by 0xA573E1: class_decl_loc_t::add(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32941)\n    -   by 0xA56C52: cp_parser_check_class_key(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32819)\n    -   by 0xA3AD12: cp_parser_elaborated_type_specifier(cp_parser*, bool, bool) (parser.c:20227)\n    -   by 0xA37EF2: cp_parser_type_specifier(cp_parser*, int, cp_decl_specifier_seq*, bool, int*, bool*) (parser.c:18942)\n    -   by 0xA31CDD: cp_parser_decl_specifier_seq(cp_parser*, int, cp_decl_specifier_seq*, int*) (parser.c:15517)\n    -   by 0xA301E0: cp_parser_simple_declaration(cp_parser*, bool, tree_node**) (parser.c:14772)\n    -\n    -3,552 bytes in 33 blocks are definitely lost in loss record 483 of 519\n    -   at 0x483B7F3: malloc (vg_replace_malloc.c:309)\n    -   by 0x223B63F: xrealloc (xmalloc.c:177)\n    -   by 0xA8D848: void va_heap::reserve<class_decl_loc_t::class_key_loc_t>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int, bool) (vec.h:290)\n    -   by 0xA901ED: bool vec_safe_reserve<class_decl_loc_t::class_key_loc_t, va_heap>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int, bool) (vec.h:697)\n    -   by 0xA8F161: void vec_alloc<class_decl_loc_t::class_key_loc_t, va_heap>(vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>*&, unsigned int) (vec.h:718)\n    -   by 0xA8D18D: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_embed>::copy() const (vec.h:979)\n    -   by 0xA8B0C3: vec<class_decl_loc_t::class_key_loc_t, va_heap, vl_ptr>::copy() const (vec.h:1824)\n    -   by 0xA8964A: class_decl_loc_t::class_decl_loc_t(class_decl_loc_t const&) (parser.c:32689)\n    -   by 0xA8F515: hash_table<hash_map<tree_decl_hash, class_decl_loc_t, simple_hashmap_traits<default_hash_traits<tree_decl_hash>, class_decl_loc_t> >::hash_entry, false, xcallocator>::expand() (hash-table.h:839)\n    -   by 0xA8D4B3: hash_table<hash_map<tree_decl_hash, class_decl_loc_t, simple_hashmap_traits<default_hash_traits<tree_decl_hash>, class_decl_loc_t> >::hash_entry, false, xcallocator>::find_slot_with_hash(tree_node* const&, unsigned int, insert_option) (hash-table.h:1008)\n    -   by 0xA8B1DC: hash_map<tree_decl_hash, class_decl_loc_t, simple_hashmap_traits<default_hash_traits<tree_decl_hash>, class_decl_loc_t> >::get_or_insert(tree_node* const&, bool*) (hash-map.h:200)\n    -   by 0xA57128: class_decl_loc_t::add(cp_parser*, unsigned int, tag_types, tree_node*, bool, bool) (parser.c:32888)\n     [...]\n     LEAK SUMMARY:\n    -   definitely lost: 8,440 bytes in 81 blocks\n    +   definitely lost: 48 bytes in 1 blocks\n        indirectly lost: 12,529 bytes in 329 blocks\n          possibly lost: 0 bytes in 0 blocks\n        still reachable: 1,644,376 bytes in 768 blocks\n\n\tgcc/\n\t* hash-table.h (hash_table<Descriptor, Lazy, Allocator>::expand):\n\tDestruct stale Value objects.\n\t* hash-map-tests.c (test_map_of_type_with_ctor_and_dtor_expand):\n\tUpdate.", "tree": {"sha": "7b3526910798e4cff7a7200d684383046bac6225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b3526910798e4cff7a7200d684383046bac6225"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89be17a1b231ade643f28fbe616d53377e069da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89be17a1b231ade643f28fbe616d53377e069da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89be17a1b231ade643f28fbe616d53377e069da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89be17a1b231ade643f28fbe616d53377e069da8/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00b1324f9285f49a6f9516f408f6be5bc6545219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b1324f9285f49a6f9516f408f6be5bc6545219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b1324f9285f49a6f9516f408f6be5bc6545219"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "511d4342087e972f2b036b63afc67c1304b781ad", "filename": "gcc/hash-map-tests.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89be17a1b231ade643f28fbe616d53377e069da8/gcc%2Fhash-map-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89be17a1b231ade643f28fbe616d53377e069da8/gcc%2Fhash-map-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-tests.c?ref=89be17a1b231ade643f28fbe616d53377e069da8", "patch": "@@ -317,7 +317,8 @@ test_map_of_type_with_ctor_and_dtor ()\n   }\n }\n \n-/* Verify aspects of 'hash_table::expand'.  */\n+/* Verify aspects of 'hash_table::expand', in particular that it doesn't leak\n+   Value objects.  */\n \n static void\n test_map_of_type_with_ctor_and_dtor_expand (bool remove_some_inline)\n@@ -400,9 +401,9 @@ test_map_of_type_with_ctor_and_dtor_expand (bool remove_some_inline)\n       ASSERT_EQ (val_t::ncopy, n_expand_moved);\n       ASSERT_EQ (val_t::nassign, 0);\n       if (remove_some_inline)\n-\tASSERT_EQ (val_t::ndtor, (i + 2) / 3);\n+\tASSERT_EQ (val_t::ndtor, n_expand_moved + (i + 2) / 3);\n       else\n-\tASSERT_EQ (val_t::ndtor, 0);\n+\tASSERT_EQ (val_t::ndtor, n_expand_moved);\n \n       /* Remove some inline.  This never triggers an 'expand' here, but via\n \t 'm_n_deleted' does influence any following one.  */\n@@ -416,7 +417,7 @@ test_map_of_type_with_ctor_and_dtor_expand (bool remove_some_inline)\n \t  ASSERT_EQ (val_t::ndefault, 1 + i);\n \t  ASSERT_EQ (val_t::ncopy, n_expand_moved);\n \t  ASSERT_EQ (val_t::nassign, 0);\n-\t  ASSERT_EQ (val_t::ndtor, 1 + (i + 2) / 3);\n+\t  ASSERT_EQ (val_t::ndtor, n_expand_moved + 1 + (i + 2) / 3);\n \t}\n     }\n   ASSERT_EQ (expand_c, expand_c_expected);\n@@ -439,6 +440,7 @@ test_map_of_type_with_ctor_and_dtor_expand (bool remove_some_inline)\n       ASSERT_EQ (val_t::nassign, nassign);\n       ASSERT_EQ (val_t::ndtor, ndtor);\n     }\n+  ASSERT_EQ (val_t::ndefault + val_t::ncopy, val_t::ndtor);\n }\n \n /* Test calling empty on a hash_map that has a key type with non-zero"}, {"sha": "ff415c7250bcaf365261afa7c538f084ed4b65de", "filename": "gcc/hash-table.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89be17a1b231ade643f28fbe616d53377e069da8/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89be17a1b231ade643f28fbe616d53377e069da8/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=89be17a1b231ade643f28fbe616d53377e069da8", "patch": "@@ -820,6 +820,9 @@ hash_table<Descriptor, Lazy, Allocator>::expand ()\n         {\n           value_type *q = find_empty_slot_for_expand (Descriptor::hash (x));\n \t  new ((void*) q) value_type (std::move (x));\n+\t  /* After the resources of 'x' have been moved to a new object at 'q',\n+\t     we now have to destroy the 'x' object, to end its lifetime.  */\n+\t  x.~value_type ();\n         }\n \n       p++;"}]}