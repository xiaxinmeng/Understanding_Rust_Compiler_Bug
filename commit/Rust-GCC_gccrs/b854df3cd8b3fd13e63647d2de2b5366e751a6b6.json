{"sha": "b854df3cd8b3fd13e63647d2de2b5366e751a6b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg1NGRmM2NkOGIzZmQxM2U2MzY0N2QyZGUyYjUzNjZlNzUxYTZiNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-08-05T22:00:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-08-05T22:00:41Z"}, "message": "c-ada-spec.c (has_static_fields): Look only into variables.\n\n\t* c-ada-spec.c (has_static_fields): Look only into variables.\n\t(print_constructor): Add TYPE parameter and use it for the name.\n\t(print_destructor): Likewise.\n\t(print_ada_declaration): Adjust to new constructor/destructor names.\n\tAdjust calls to print_constructor and print_destructor.\n\t(print_ada_struct_decl): Do not test TREE_STATIC on FIELD_DECL.\n\tLook only into variables in the final loop.\n\nFrom-SVN: r250890", "tree": {"sha": "9bb4f100537f195cfcac5df389c9a7b82701bb26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bb4f100537f195cfcac5df389c9a7b82701bb26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b854df3cd8b3fd13e63647d2de2b5366e751a6b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b854df3cd8b3fd13e63647d2de2b5366e751a6b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b854df3cd8b3fd13e63647d2de2b5366e751a6b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b854df3cd8b3fd13e63647d2de2b5366e751a6b6/comments", "author": null, "committer": null, "parents": [{"sha": "e7e5639eb2397f6f33f4684798267b9a57c7f611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e5639eb2397f6f33f4684798267b9a57c7f611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e5639eb2397f6f33f4684798267b9a57c7f611"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "3712c8c21d61f54cee233ff8b16174536a21f1a3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854df3cd8b3fd13e63647d2de2b5366e751a6b6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854df3cd8b3fd13e63647d2de2b5366e751a6b6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b854df3cd8b3fd13e63647d2de2b5366e751a6b6", "patch": "@@ -1,3 +1,13 @@\n+2017-08-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (has_static_fields): Look only into variables.\n+\t(print_constructor): Add TYPE parameter and use it for the name.\n+\t(print_destructor): Likewise.\n+\t(print_ada_declaration): Adjust to new constructor/destructor names.\n+\tAdjust calls to print_constructor and print_destructor.\n+\t(print_ada_struct_decl): Do not test TREE_STATIC on FIELD_DECL.\n+\tLook only into variables in the final loop.\n+\n 2017-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (has_static_fields): Look only into fields."}, {"sha": "dac437d9bf63c2165160d8edc6bd6fd4d4888dee", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854df3cd8b3fd13e63647d2de2b5366e751a6b6/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854df3cd8b3fd13e63647d2de2b5366e751a6b6/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=b854df3cd8b3fd13e63647d2de2b5366e751a6b6", "patch": "@@ -1056,7 +1056,7 @@ has_static_fields (const_tree type)\n     return false;\n \n   for (tree fld = TYPE_FIELDS (type); fld; fld = TREE_CHAIN (fld))\n-    if (TREE_CODE (fld) == FIELD_DECL && DECL_NAME (fld) && TREE_STATIC (fld))\n+    if (TREE_CODE (fld) == VAR_DECL && DECL_NAME (fld))\n       return true;\n \n   return false;\n@@ -2635,12 +2635,12 @@ dump_nested_type (pretty_printer *buffer, tree field, tree t, tree parent,\n     }\n }\n \n-/* Dump in BUFFER constructor spec corresponding to T.  */\n+/* Dump in BUFFER constructor spec corresponding to T for TYPE.  */\n \n static void\n-print_constructor (pretty_printer *buffer, tree t)\n+print_constructor (pretty_printer *buffer, tree t, tree type)\n {\n-  tree decl_name = DECL_NAME (DECL_ORIGIN (t));\n+  tree decl_name = DECL_NAME (TYPE_NAME (type));\n \n   pp_string (buffer, \"New_\");\n   pp_ada_tree_identifier (buffer, decl_name, t, false);\n@@ -2649,9 +2649,9 @@ print_constructor (pretty_printer *buffer, tree t)\n /* Dump in BUFFER destructor spec corresponding to T.  */\n \n static void\n-print_destructor (pretty_printer *buffer, tree t)\n+print_destructor (pretty_printer *buffer, tree t, tree type)\n {\n-  tree decl_name = DECL_NAME (DECL_ORIGIN (t));\n+  tree decl_name = DECL_NAME (TYPE_NAME (type));\n \n   pp_string (buffer, \"Delete_\");\n   pp_ada_tree_identifier (buffer, decl_name, t, false);\n@@ -2907,7 +2907,8 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t    return 0;\n \n \t  /* Only consider constructors/destructors for complete objects.  */\n-\t  if (strncmp (IDENTIFIER_POINTER (decl_name), \"__comp\", 6) != 0)\n+\t  if (strncmp (IDENTIFIER_POINTER (decl_name), \"__ct_comp\", 9) != 0\n+\t      && strncmp (IDENTIFIER_POINTER (decl_name), \"__dt_comp\", 9) != 0)\n \t    return 0;\n \t}\n \n@@ -2935,9 +2936,9 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t}\n \n       if (is_constructor)\n-\tprint_constructor (buffer, t);\n+\tprint_constructor (buffer, t, type);\n       else if (is_destructor)\n-\tprint_destructor (buffer, t);\n+\tprint_destructor (buffer, t, type);\n       else\n \tdump_ada_decl_name (buffer, t, false);\n \n@@ -2976,15 +2977,15 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n       if (is_constructor)\n \t{\n \t  pp_string (buffer, \"pragma CPP_Constructor (\");\n-\t  print_constructor (buffer, t);\n+\t  print_constructor (buffer, t, type);\n \t  pp_string (buffer, \", \\\"\");\n \t  pp_asm_name (buffer, t);\n \t  pp_string (buffer, \"\\\");\");\n \t}\n       else if (is_destructor)\n \t{\n \t  pp_string (buffer, \"pragma Import (CPP, \");\n-\t  print_destructor (buffer, t);\n+\t  print_destructor (buffer, t, type);\n \t  pp_string (buffer, \", \\\"\");\n \t  pp_asm_name (buffer, t);\n \t  pp_string (buffer, \"\\\");\");\n@@ -3214,7 +3215,7 @@ print_ada_struct_decl (pretty_printer *buffer, tree node, tree type, int spc,\n \t\t  field_num++;\n \t\t}\n \t    }\n-\t  else if (TREE_CODE (tmp) == FIELD_DECL && !TREE_STATIC (tmp))\n+\t  else if (TREE_CODE (tmp) == FIELD_DECL)\n \t    {\n \t      /* Skip internal virtual table field.  */\n \t      if (!DECL_VIRTUAL_P (tmp))\n@@ -3308,9 +3309,7 @@ print_ada_struct_decl (pretty_printer *buffer, tree node, tree type, int spc,\n   /* Print the static fields of the structure, if any.  */\n   for (tmp = TYPE_FIELDS (node); tmp; tmp = TREE_CHAIN (tmp))\n     {\n-      if (TREE_CODE (tmp) == FIELD_DECL\n-\t  && DECL_NAME (tmp)\n-\t  && TREE_STATIC (tmp))\n+      if (TREE_CODE (tmp) == VAR_DECL && DECL_NAME (tmp))\n \t{\n \t  if (need_semicolon)\n \t    {"}]}