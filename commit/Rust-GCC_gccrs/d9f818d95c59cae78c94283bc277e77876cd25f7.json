{"sha": "d9f818d95c59cae78c94283bc277e77876cd25f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmODE4ZDk1YzU5Y2FlNzhjOTQyODNiYzI3N2U3Nzg3NmNkMjVmNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2001-10-16T13:07:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2001-10-16T13:07:29Z"}, "message": "pt.c (UNIFY_ALLOW_MAX_CORRECTION): Define.\n\n\t* pt.c (UNIFY_ALLOW_MAX_CORRECTION): Define.\n\t(unify): Only handle MINUS_EXPR specially if the above flag is set\n\tand the subtracted constant is 1.  Clear the flag on recursive calls.\n\tSet it when unifying the maximum value in an INTEGER_TYPE's range.\n\nFrom-SVN: r46287", "tree": {"sha": "b2d3d48c1e9e34a20a01c82573b3db0adc9e80d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d3d48c1e9e34a20a01c82573b3db0adc9e80d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9f818d95c59cae78c94283bc277e77876cd25f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f818d95c59cae78c94283bc277e77876cd25f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f818d95c59cae78c94283bc277e77876cd25f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f818d95c59cae78c94283bc277e77876cd25f7/comments", "author": null, "committer": null, "parents": [{"sha": "2d1245b8c88b20c6cfe0026b105d62e2f24b172f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1245b8c88b20c6cfe0026b105d62e2f24b172f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d1245b8c88b20c6cfe0026b105d62e2f24b172f"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "1cb628dadc91b957ba30b9d1a385a52db3b8924a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f818d95c59cae78c94283bc277e77876cd25f7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f818d95c59cae78c94283bc277e77876cd25f7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d9f818d95c59cae78c94283bc277e77876cd25f7", "patch": "@@ -1,3 +1,10 @@\n+2001-10-15  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* pt.c (UNIFY_ALLOW_MAX_CORRECTION): Define.\n+\t(unify): Only handle MINUS_EXPR specially if the above flag is set\n+\tand the subtracted constant is 1.  Clear the flag on recursive calls.\n+\tSet it when unifying the maximum value in an INTEGER_TYPE's range.\n+\n 2001-10-15  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* decl.c (bad_specifiers): Don't allow exception specifications"}, {"sha": "5a5cf4dafe95cae073096ead0eae0ff6aaf3d7b4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f818d95c59cae78c94283bc277e77876cd25f7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f818d95c59cae78c94283bc277e77876cd25f7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d9f818d95c59cae78c94283bc277e77876cd25f7", "patch": "@@ -84,6 +84,7 @@ static htab_t local_specializations;\n #define UNIFY_ALLOW_OUTER_LEVEL 16\n #define UNIFY_ALLOW_OUTER_MORE_CV_QUAL 32\n #define UNIFY_ALLOW_OUTER_LESS_CV_QUAL 64\n+#define UNIFY_ALLOW_MAX_CORRECTION 128\n \n #define GTB_VIA_VIRTUAL 1 /* The base class we are examining is\n \t\t\t     virtual, or a base class of a virtual\n@@ -8473,7 +8474,14 @@ check_cv_quals_for_unify (strict, arg, parm)\n        qualified at this point.\n      UNIFY_ALLOW_OUTER_LESS_CV_QUAL:\n        This is the outermost level of a deduction, and PARM can be less CV\n-       qualified at this point.  */\n+       qualified at this point.\n+     UNIFY_ALLOW_MAX_CORRECTION:\n+       This is an INTEGER_TYPE's maximum value.  Used if the range may\n+       have been derived from a size specification, such as an array size.\n+       If the size was given by a nontype template parameter N, the maximum\n+       value will have the form N-1.  The flag says that we can (and indeed\n+       must) unify N with (ARG + 1), an exception to the normal rules on\n+       folding PARM.  */\n \n static int\n unify (tparms, targs, parm, arg, strict)\n@@ -8529,6 +8537,7 @@ unify (tparms, targs, parm, arg, strict)\n   strict &= ~UNIFY_ALLOW_DERIVED;\n   strict &= ~UNIFY_ALLOW_OUTER_MORE_CV_QUAL;\n   strict &= ~UNIFY_ALLOW_OUTER_LESS_CV_QUAL;\n+  strict &= ~UNIFY_ALLOW_MAX_CORRECTION;\n   \n   switch (TREE_CODE (parm))\n     {\n@@ -8784,7 +8793,8 @@ unify (tparms, targs, parm, arg, strict)\n \t    return 1;\n \t  if (TYPE_MAX_VALUE (parm) && TYPE_MAX_VALUE (arg)\n \t      && unify (tparms, targs, TYPE_MAX_VALUE (parm),\n-\t\t\tTYPE_MAX_VALUE (arg), UNIFY_ALLOW_INTEGER))\n+\t\t\tTYPE_MAX_VALUE (arg),\n+\t\t\tUNIFY_ALLOW_INTEGER | UNIFY_ALLOW_MAX_CORRECTION))\n \t    return 1;\n \t}\n       /* We have already checked cv-qualification at the top of the\n@@ -8914,7 +8924,8 @@ unify (tparms, targs, parm, arg, strict)\n       return 1;\n \n     case MINUS_EXPR:\n-      if (TREE_CODE (TREE_OPERAND (parm, 1)) == INTEGER_CST)\n+      if (tree_int_cst_equal (TREE_OPERAND (parm, 1), integer_one_node)\n+\t  && (strict_in & UNIFY_ALLOW_MAX_CORRECTION))\n \t{\n \t  /* We handle this case specially, since it comes up with\n \t     arrays.  In particular, something like:"}]}