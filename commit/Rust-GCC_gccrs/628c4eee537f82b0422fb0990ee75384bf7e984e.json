{"sha": "628c4eee537f82b0422fb0990ee75384bf7e984e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4YzRlZWU1MzdmODJiMDQyMmZiMDk5MGVlNzUzODRiZjdlOTg0ZQ==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-12-18T10:16:13Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-12-18T10:16:13Z"}, "message": "re PR target/36834 (structure return ABI for windows targets differs from native MSVC)\n\n2010-12-18  Kai Tietz  <kai.tietz@onevision.com>\n\n\tPR target/36834\n\t* config/i386/i386.c (ix86_keep_aggregate_return_pointer):\n\tNew local function.\n\t(ix86_return_pops_args): Use ix86_keep_aggregate_return_pointer\n\tfunction instead of KEEP_AGGREGATE_RETURN_POINTER.\n\t(ix86_handle_callee_pop_aggregate_return): New handler.\n\t(ix86_attribute_table): Add new attribute\n\tcallee_pop_aggregate_return.\n\t* doc/extend.texi (callee_pop_aggregate_return): Add\n\tattribute documentation.\n\n2010-12-18  Kai Tietz  <kai.tietz@onevision.com>\n\n\tPR target/36834\n\t* gcc.target/i386/aggregate-ret1.c: New.\n\t* gcc.target/i386/aggregate-ret2.c: New.\n\nFrom-SVN: r168019", "tree": {"sha": "5575fa8c752c52fdeae36d42bd59040213bf7c70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5575fa8c752c52fdeae36d42bd59040213bf7c70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/628c4eee537f82b0422fb0990ee75384bf7e984e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628c4eee537f82b0422fb0990ee75384bf7e984e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628c4eee537f82b0422fb0990ee75384bf7e984e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628c4eee537f82b0422fb0990ee75384bf7e984e/comments", "author": null, "committer": null, "parents": [{"sha": "a6e4343fc4368e356348e47afbf432bf7f1b339d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e4343fc4368e356348e47afbf432bf7f1b339d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e4343fc4368e356348e47afbf432bf7f1b339d"}], "stats": {"total": 157, "additions": 156, "deletions": 1}, "files": [{"sha": "5b7241e806c18712028809df3ee9e70c2e1de6bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=628c4eee537f82b0422fb0990ee75384bf7e984e", "patch": "@@ -1,3 +1,16 @@\n+2010-12-18  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR target/36834\n+\t* config/i386/i386.c (ix86_keep_aggregate_return_pointer):\n+\tNew local function.\n+\t(ix86_return_pops_args): Use ix86_keep_aggregate_return_pointer\n+\tfunction instead of KEEP_AGGREGATE_RETURN_POINTER.\n+\t(ix86_handle_callee_pop_aggregate_return): New handler.\n+\t(ix86_attribute_table): Add new attribute\n+\tcallee_pop_aggregate_return.\n+\t* doc/extend.texi (callee_pop_aggregate_return): Add\n+\tattribute documentation.\n+\n 2010-12-18  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/darwin.h (SUBTARGET_C_COMMON_OVERRIDE_OPTIONS):"}, {"sha": "40999c86cccfad616f6154ef1d87291a5456269e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=628c4eee537f82b0422fb0990ee75384bf7e984e", "patch": "@@ -5436,6 +5436,19 @@ ix86_eax_live_at_start_p (void)\n   return REGNO_REG_SET_P (df_get_live_out (ENTRY_BLOCK_PTR), 0);\n }\n \n+static bool\n+ix86_keep_aggregate_return_pointer (tree fntype)\n+{\n+  tree attr;\n+\n+  attr = lookup_attribute (\"callee_pop_aggregate_return\",\n+\t\t\t   TYPE_ATTRIBUTES (fntype));\n+  if (attr)\n+    return (TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (attr))) == 0);\n+\n+  return KEEP_AGGREGATE_RETURN_POINTER != 0;\n+}\n+\n /* Value is the number of bytes of arguments automatically\n    popped when returning from a subroutine call.\n    FUNDECL is the declaration node of the function (as a tree),\n@@ -5480,7 +5493,7 @@ ix86_return_pops_args (tree fundecl, tree funtype, int size)\n \n   /* Lose any fake structure return argument if it is passed on the stack.  */\n   if (aggregate_value_p (TREE_TYPE (funtype), fundecl)\n-      && !KEEP_AGGREGATE_RETURN_POINTER)\n+      && !ix86_keep_aggregate_return_pointer (funtype))\n     {\n       int nregs = ix86_function_regparm (funtype, fundecl);\n       if (nregs == 0)\n@@ -29060,6 +29073,58 @@ x86_order_regs_for_local_alloc (void)\n      reg_alloc_order [pos++] = 0;\n }\n \n+/* Handle a \"callee_pop_aggregate_return\" attribute; arguments as\n+   in struct attribute_spec handler.  */\n+static tree\n+ix86_handle_callee_pop_aggregate_return (tree *node, tree name,\n+\t\t\t\t\t      tree args,\n+\t\t\t\t\t      int flags ATTRIBUTE_UNUSED,\n+\t\t\t\t\t      bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_TYPE\n+      && TREE_CODE (*node) != METHOD_TYPE\n+      && TREE_CODE (*node) != FIELD_DECL\n+      && TREE_CODE (*node) != TYPE_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+  if (TARGET_64BIT)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only available for 32-bit\",\n+\t       name);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+  if (is_attribute_p (\"callee_pop_aggregate_return\", name))\n+    {\n+      tree cst;\n+\n+      cst = TREE_VALUE (args);\n+      if (TREE_CODE (cst) != INTEGER_CST)\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"%qE attribute requires an integer constant argument\",\n+\t\t   name);\n+\t  *no_add_attrs = true;\n+\t}\n+      else if (compare_tree_int (cst, 0) != 0\n+\t       && compare_tree_int (cst, 1) != 0)\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"argument to %qE attribute is neither zero, nor one\",\n+\t\t   name);\n+\t  *no_add_attrs = true;\n+\t}\n+\n+      return NULL_TREE;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"ms_abi\" or \"sysv\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n static tree\n@@ -32229,6 +32294,8 @@ static const struct attribute_spec ix86_attribute_table[] =\n   { \"ms_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute },\n   { \"sysv_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute },\n   { \"ms_hook_prologue\", 0, 0, true, false, false, ix86_handle_fndecl_attribute },\n+  { \"callee_pop_aggregate_return\", 1, 1, false, true, true,\n+    ix86_handle_callee_pop_aggregate_return },\n   /* End element.  */\n   { NULL,        0, 0, false, false, false, NULL }\n };"}, {"sha": "cbfb44009e17aa98e169d4304420711748beb940", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=628c4eee537f82b0422fb0990ee75384bf7e984e", "patch": "@@ -2823,6 +2823,19 @@ when targeting Windows.  On all other systems, the default is the AMD ABI.\n Note, the @code{ms_abi} attribute for Windows targets currently requires\n the @option{-maccumulate-outgoing-args} option.\n \n+@item callee_pop_aggregate_return (@var{number})\n+@cindex @code{callee_pop_aggregate_return} attribute\n+\n+On 32-bit i?86-*-* targets, you can control by those attribute for\n+aggregate return in memory, if the caller is responsible to pop the hidden\n+pointer together with the rest of the arguments - @var{number} equal to\n+zero -, or if the callee is responsible to pop hidden pointer - @var{number}\n+equal to one.\n+\n+For i?86-netware, the caller pops the stack for the hidden arguments pointing\n+to aggregate return value.  This differs from the default i386 ABI which assumes\n+that the callee pops the stack for hidden pointer.\n+\n @item ms_hook_prologue\n @cindex @code{ms_hook_prologue} attribute\n "}, {"sha": "5991aac5a752eca4b2eec95763fd65fd28e57024", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=628c4eee537f82b0422fb0990ee75384bf7e984e", "patch": "@@ -1,3 +1,9 @@\n+2010-12-18  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR target/36834\n+\t* gcc.target/i386/aggregate-ret1.c: New.\n+\t* gcc.target/i386/aggregate-ret2.c: New.\n+\n 2010-12-18  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* gcc.target/powerpc/darwin-split-ld-stret.c: New test."}, {"sha": "a50606793f42e563e24e7a201b264b0b848edabe", "filename": "gcc/testsuite/gcc.target/i386/aggregate-ret1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret1.c?ref=628c4eee537f82b0422fb0990ee75384bf7e984e", "patch": "@@ -0,0 +1,28 @@\n+/* target/36834 */\n+/* Check that, with keep_aggregate_return_pointer attribute,  callee does\n+   not pop the stack for the implicit pointer arg when returning a large\n+   structure in memory.  */\n+/* { dg-do compile { target i?86-*-* } } */\n+\n+struct foo {\n+  int a;\n+  int b;\n+  int c;\n+  int d;\n+};\n+\n+__attribute__ ((callee_pop_aggregate_return(0)))\n+struct foo\n+bar (void)\n+{\n+  struct foo retval;\n+  retval.a = 1;\n+  retval.b = 2;\n+  retval.c = 3;\n+  retval.d = 4;\n+  return retval;\n+}\n+\n+/* { dg-final { scan-assembler-not \"ret\\[ \\t\\]\\\\\\$4\" } } */\n+\n+"}, {"sha": "03e9bae925cf127dd5646ff35c4253b8a97ecef9", "filename": "gcc/testsuite/gcc.target/i386/aggregate-ret2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c4eee537f82b0422fb0990ee75384bf7e984e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faggregate-ret2.c?ref=628c4eee537f82b0422fb0990ee75384bf7e984e", "patch": "@@ -0,0 +1,28 @@\n+/* target/36834 */\n+/* Check that, with dont_keep_aggregate_return_pointer attribute,  callee\n+   pops the stack for the implicit pointer arg when returning a large\n+   structure in memory.  */\n+/* { dg-do compile { target i?86-*-* } } */\n+\n+struct foo {\n+  int a;\n+  int b;\n+  int c;\n+  int d;\n+};\n+\n+__attribute__ ((callee_pop_aggregate_return(1)))\n+struct foo\n+bar (void)\n+{\n+  struct foo retval;\n+  retval.a = 1;\n+  retval.b = 2;\n+  retval.c = 3;\n+  retval.d = 4;\n+  return retval;\n+}\n+\n+/* { dg-final { scan-assembler \"ret\\[ \\t\\]\\\\\\$4\" } } */\n+\n+"}]}