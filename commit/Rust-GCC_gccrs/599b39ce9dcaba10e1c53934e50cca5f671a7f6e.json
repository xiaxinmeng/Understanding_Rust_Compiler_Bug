{"sha": "599b39ce9dcaba10e1c53934e50cca5f671a7f6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk5YjM5Y2U5ZGNhYmExMGUxYzUzOTM0ZTUwY2NhNWY2NzFhN2Y2ZQ==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2007-02-16T21:23:10Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2007-02-16T21:23:10Z"}, "message": "Thread.java (Thread(ThreadGroup, Runnable, String)): Pass new parameter constructor.\n\n\t* java/lang/Thread.java (Thread(ThreadGroup, Runnable, String)): Pass\n\tnew parameter constructor.\n\t(Thread(ThreadGroup, Runnable, String, long)): Same.\n\t(Thread(String, boolean)): New constructor.\n\t(Thread(Thread, ThreadGroup, Runnable, String): Add parameter\n\tnoInheritableThreadLocal, don't call\n\tInheritableThreadLocal.newChildThread if set.\n\t* java/lang/PosixProcess.java(ProcessManager()): Set\n\tnoInheritableThreadLocal in super.\n\t* java/lang/natThread.cc (_Jv_AttachCurrentThread): Pass new\n\tparameter to Thread constructor.\n\t(_Jv_AttachCurrentThreadAsDaemon): Same.\n\t* java/lang/Thread.h: Regenerate.\n\t* classpath/lib/java/lang/Thread.class: Same.\n\t* classpath/lib/java/lang/PosixProcess$EOFInputStream.class: Same.\n\t* classpath/lib/java/lang/PosixProcess.class: Same.\n\t* classpath/lib/java/lang/Thread$State.class: Same.\n\t* classpath/lib/java/lang/PosixProcess$ProcessManager.class: Same.\n\nFrom-SVN: r122054", "tree": {"sha": "295acd745105a2a979167a2ab8599425ebc13058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/295acd745105a2a979167a2ab8599425ebc13058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/599b39ce9dcaba10e1c53934e50cca5f671a7f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599b39ce9dcaba10e1c53934e50cca5f671a7f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/599b39ce9dcaba10e1c53934e50cca5f671a7f6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/comments", "author": null, "committer": null, "parents": [{"sha": "d16c4b1a166ea5413487d3935c385ee82f560e81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16c4b1a166ea5413487d3935c385ee82f560e81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16c4b1a166ea5413487d3935c385ee82f560e81"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "06b507e10533ec14aa8170fe7feea51521a0ba98", "filename": "libjava/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=599b39ce9dcaba10e1c53934e50cca5f671a7f6e", "patch": "@@ -1,3 +1,24 @@\n+2007-02-16  David Daney  <ddaney@avtrex.com>\n+\n+\t* java/lang/Thread.java (Thread(ThreadGroup, Runnable, String)): Pass\n+\tnew parameter constructor.\n+\t(Thread(ThreadGroup, Runnable, String, long)): Same.\n+\t(Thread(String, boolean)): New constructor.\n+\t(Thread(Thread, ThreadGroup, Runnable, String): Add parameter\n+\tnoInheritableThreadLocal, don't call\n+\tInheritableThreadLocal.newChildThread if set.\n+\t* java/lang/PosixProcess.java(ProcessManager()): Set\n+\tnoInheritableThreadLocal in super.\n+\t* java/lang/natThread.cc (_Jv_AttachCurrentThread): Pass new\n+\tparameter to Thread constructor.\n+\t(_Jv_AttachCurrentThreadAsDaemon): Same.\n+\t* java/lang/Thread.h: Regenerate.\n+\t* classpath/lib/java/lang/Thread.class: Same.\n+\t* classpath/lib/java/lang/PosixProcess$EOFInputStream.class: Same.\n+\t* classpath/lib/java/lang/PosixProcess.class: Same.\n+\t* classpath/lib/java/lang/Thread$State.class: Same.\n+\t* classpath/lib/java/lang/PosixProcess$ProcessManager.class: Same.\n+\n 2007-02-16  Kyle Galloway  <kgallowa@redhat.com>\n \n \t* interpret.cc: Add extra DEBUG_LOCALS_INSN calls for multi-slot"}, {"sha": "951dbfa9872cb703db1f5ba779f7ce16a1e3f3ba", "filename": "libjava/classpath/lib/java/lang/PosixProcess$EOFInputStream.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess%24EOFInputStream.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess%24EOFInputStream.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess%24EOFInputStream.class?ref=599b39ce9dcaba10e1c53934e50cca5f671a7f6e"}, {"sha": "2e260c358139b799d71989a1dd56997f891cc715", "filename": "libjava/classpath/lib/java/lang/PosixProcess$ProcessManager.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess%24ProcessManager.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess%24ProcessManager.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess%24ProcessManager.class?ref=599b39ce9dcaba10e1c53934e50cca5f671a7f6e"}, {"sha": "dc237fc1149bd48d930b90333dacbce2a3e88feb", "filename": "libjava/classpath/lib/java/lang/PosixProcess.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess.class?ref=599b39ce9dcaba10e1c53934e50cca5f671a7f6e"}, {"sha": "687bc9ff40abbc51c518446baf4714493954539c", "filename": "libjava/classpath/lib/java/lang/Thread$State.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FThread%24State.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FThread%24State.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FThread%24State.class?ref=599b39ce9dcaba10e1c53934e50cca5f671a7f6e"}, {"sha": "25ff6448cc9e92f65f71eb8f9c2e8619a1ed5969", "filename": "libjava/classpath/lib/java/lang/Thread.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FThread.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FThread.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FThread.class?ref=599b39ce9dcaba10e1c53934e50cca5f671a7f6e"}, {"sha": "517e6f33f9256e254cb084e04500d3dba76648e7", "filename": "libjava/java/lang/PosixProcess.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fjava%2Flang%2FPosixProcess.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fjava%2Flang%2FPosixProcess.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FPosixProcess.java?ref=599b39ce9dcaba10e1c53934e50cca5f671a7f6e", "patch": "@@ -42,7 +42,12 @@ static class ProcessManager extends Thread\n \n     ProcessManager()\n     {\n-      super(\"ProcessManager\");\n+      // Use package private Thread constructor to place us in the\n+      // root ThreadGroup with no InheritableThreadLocal.  If the\n+      // InheritableThreadLocals were allowed to initialize, they could\n+      // cause a Runtime.exec() to be called causing infinite\n+      // recursion.\n+      super(\"ProcessManager\", true);\n       // Don't keep the (main) process from exiting on our account.\n       this.setDaemon(true);\n     }"}, {"sha": "b9116b1aad296017cc4acb8c1a0d774980e61dd1", "filename": "libjava/java/lang/Thread.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fjava%2Flang%2FThread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fjava%2Flang%2FThread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.h?ref=599b39ce9dcaba10e1c53934e50cca5f671a7f6e", "patch": "@@ -53,8 +53,10 @@ class java::lang::Thread : public ::java::lang::Object\n   Thread(::java::lang::Runnable *, ::java::lang::String *);\n   Thread(::java::lang::ThreadGroup *, ::java::lang::Runnable *, ::java::lang::String *);\n   Thread(::java::lang::ThreadGroup *, ::java::lang::Runnable *, ::java::lang::String *, jlong);\n+public: // actually package-private\n+  Thread(::java::lang::String *, jboolean);\n private:\n-  Thread(::java::lang::Thread *, ::java::lang::ThreadGroup *, ::java::lang::Runnable *, ::java::lang::String *);\n+  Thread(::java::lang::Thread *, ::java::lang::ThreadGroup *, ::java::lang::Runnable *, ::java::lang::String *, jboolean);\n public:\n   static jint activeCount();\n   virtual void checkAccess();"}, {"sha": "1e1e860cea00bcde59632a1f6851df46188c0859", "filename": "libjava/java/lang/Thread.java", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fjava%2Flang%2FThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fjava%2Flang%2FThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.java?ref=599b39ce9dcaba10e1c53934e50cca5f671a7f6e", "patch": "@@ -355,7 +355,7 @@ public Thread(Runnable target, String name)\n    */\n   public Thread(ThreadGroup group, Runnable target, String name)\n   {\n-    this(currentThread(), group, target, name);\n+    this(currentThread(), group, target, name, false);\n   }\n \n   /**\n@@ -381,10 +381,26 @@ public Thread(ThreadGroup group, Runnable target, String name)\n   public Thread(ThreadGroup group, Runnable target, String name, long size)\n   {\n     // Just ignore stackSize for now.\n-    this(currentThread(), group, target, name);\n+    this(currentThread(), group, target, name, false);\n   }\n \n-  private Thread (Thread current, ThreadGroup g, Runnable r, String n)\n+  /**\n+   * Allocate a new Thread object for threads used internally to the\n+   * run time.  Runtime threads should not be members of an\n+   * application ThreadGroup, nor should they execute arbitrary user\n+   * code as part of the InheritableThreadLocal protocol.\n+   *\n+   * @param name the name for the Thread\n+   * @param noInheritableThreadLocal if true, do not initialize\n+   * InheritableThreadLocal variables for this thread.\n+   * @throws IllegalThreadStateException if group is destroyed\n+   */\n+  Thread(String name, boolean noInheritableThreadLocal)\n+  {\n+    this(null, null, null, name, noInheritableThreadLocal);\n+  }\n+  \n+  private Thread (Thread current, ThreadGroup g, Runnable r, String n, boolean noInheritableThreadLocal)\n   {\n     // Make sure the current thread may create a new thread.\n     checkAccess();\n@@ -424,7 +440,10 @@ private Thread (Thread current, ThreadGroup g, Runnable r, String n)\n \tint pri = current.getPriority();\n \tpriority = (gmax < pri ? gmax : pri);\n \tcontextClassLoader = current.contextClassLoader;\n-\tInheritableThreadLocal.newChildThread(this);\n+        // InheritableThreadLocal allows arbitrary user code to be\n+        // executed, only do this if our caller desires it.\n+        if (!noInheritableThreadLocal)\n+          InheritableThreadLocal.newChildThread(this);\n       }\n     else\n       {"}, {"sha": "42f18c4eb3a9c6d7fb3b08d7912092c7980331bf", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599b39ce9dcaba10e1c53934e50cca5f671a7f6e/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=599b39ce9dcaba10e1c53934e50cca5f671a7f6e", "patch": "@@ -490,7 +490,7 @@ _Jv_AttachCurrentThread(jstring name, java::lang::ThreadGroup* group)\n     return thread;\n   if (name == NULL)\n     name = java::lang::Thread::gen_name ();\n-  thread = new java::lang::Thread (NULL, group, NULL, name);\n+  thread = new java::lang::Thread (NULL, group, NULL, name, false);\n   _Jv_AttachCurrentThread (thread);\n   _Jv_NotifyThreadStart (thread);\n   return thread;\n@@ -504,7 +504,7 @@ _Jv_AttachCurrentThreadAsDaemon(jstring name, java::lang::ThreadGroup* group)\n     return thread;\n   if (name == NULL)\n     name = java::lang::Thread::gen_name ();\n-  thread = new java::lang::Thread (NULL, group, NULL, name);\n+  thread = new java::lang::Thread (NULL, group, NULL, name, false);\n   thread->setDaemon (true);\n   _Jv_AttachCurrentThread (thread);\n   _Jv_NotifyThreadStart (thread);"}]}