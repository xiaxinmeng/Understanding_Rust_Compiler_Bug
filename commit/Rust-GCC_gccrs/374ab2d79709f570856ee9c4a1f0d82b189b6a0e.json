{"sha": "374ab2d79709f570856ee9c4a1f0d82b189b6a0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc0YWIyZDc5NzA5ZjU3MDg1NmVlOWM0YTFmMGQ4MmIxODliNmEwZQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-11-01T23:39:44Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-11-01T23:39:44Z"}, "message": "re PR middle-end/55001 (Handle VEC_COND_EXPR better in tree-vect-generic.c)\n\n2012-11-01  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR middle-end/55001\n\ngcc/\n\t* tree-vect-generic.c (expand_vector_condition): New function.\n\t(expand_vector_operations_1): Call it.\n\ntestsuite/\n\t* g++.dg/ext/vector19.C: Remove target restrictions.\n\t* gcc.dg/fold-compare-7.c: New testcase.\n\nFrom-SVN: r193077", "tree": {"sha": "1a0502f4a9d8b1bc870689bf54fec5e1cf24b5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a0502f4a9d8b1bc870689bf54fec5e1cf24b5d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/374ab2d79709f570856ee9c4a1f0d82b189b6a0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374ab2d79709f570856ee9c4a1f0d82b189b6a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374ab2d79709f570856ee9c4a1f0d82b189b6a0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374ab2d79709f570856ee9c4a1f0d82b189b6a0e/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2328b1de5ebeea8908d5db53c1188b2782d33120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2328b1de5ebeea8908d5db53c1188b2782d33120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2328b1de5ebeea8908d5db53c1188b2782d33120"}], "stats": {"total": 98, "additions": 93, "deletions": 5}, "files": [{"sha": "b59e1cb0efc036b090267e37aec4a7070aa1a179", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374ab2d79709f570856ee9c4a1f0d82b189b6a0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374ab2d79709f570856ee9c4a1f0d82b189b6a0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=374ab2d79709f570856ee9c4a1f0d82b189b6a0e", "patch": "@@ -1,3 +1,9 @@\n+2012-11-01  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR middle-end/55001\n+\t* tree-vect-generic.c (expand_vector_condition): New function.\n+\t(expand_vector_operations_1): Call it.\n+\n 2012-11-01  Steve Ellcey  <sellcey@mips.com>\n \n \t* target-globals.c (save_target_globals): Save lra_int struct."}, {"sha": "ed398608392a9c8336c3b88117e65979204662cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374ab2d79709f570856ee9c4a1f0d82b189b6a0e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374ab2d79709f570856ee9c4a1f0d82b189b6a0e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=374ab2d79709f570856ee9c4a1f0d82b189b6a0e", "patch": "@@ -1,3 +1,9 @@\n+2012-11-01  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR middle-end/55001\n+\t* g++.dg/ext/vector19.C: Remove target restrictions.\n+\t* gcc.dg/fold-compare-7.c: New testcase.\n+\n 2012-11-01  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/55160"}, {"sha": "ace1c64eacc5f3264a18ebfc0b4254ed87815e5f", "filename": "gcc/testsuite/g++.dg/ext/vector19.C", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374ab2d79709f570856ee9c4a1f0d82b189b6a0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374ab2d79709f570856ee9c4a1f0d82b189b6a0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector19.C?ref=374ab2d79709f570856ee9c4a1f0d82b189b6a0e", "patch": "@@ -1,8 +1,5 @@\n-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-std=c++11 -mavx2\" } */\n-\n-// The target restrictions and the -mavx2 flag are meant to disappear\n-// once vector lowering is in place.\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++11\" } */\n \n typedef double vec __attribute__((vector_size(2*sizeof(double))));\n typedef signed char vec2 __attribute__((vector_size(16)));"}, {"sha": "8296751affe422fcd5904dac252bdb714ade18f7", "filename": "gcc/testsuite/gcc.dg/fold-compare-7.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374ab2d79709f570856ee9c4a1f0d82b189b6a0e/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374ab2d79709f570856ee9c4a1f0d82b189b6a0e/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-7.c?ref=374ab2d79709f570856ee9c4a1f0d82b189b6a0e", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef float vecf __attribute__((vector_size(8*sizeof(float))));\n+\n+long f(vecf *f1, vecf *f2){\n+  return ((*f1 == *f2) < 0)[2];\n+}"}, {"sha": "2dec341fc8207bb57cfadfb9bb5fb80b02e552c6", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374ab2d79709f570856ee9c4a1f0d82b189b6a0e/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374ab2d79709f570856ee9c4a1f0d82b189b6a0e/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=374ab2d79709f570856ee9c4a1f0d82b189b6a0e", "patch": "@@ -868,6 +868,72 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n   return gimplify_build2 (gsi, MINUS_EXPR, type, op0, tem);\n }\n \n+/* Expand a vector condition to scalars, by using many conditions\n+   on the vector's elements.  */\n+static void\n+expand_vector_condition (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  tree type = gimple_expr_type (stmt);\n+  tree a = gimple_assign_rhs1 (stmt);\n+  tree a1 = a;\n+  tree a2;\n+  bool a_is_comparison = false;\n+  tree b = gimple_assign_rhs2 (stmt);\n+  tree c = gimple_assign_rhs3 (stmt);\n+  VEC(constructor_elt,gc) *v;\n+  tree constr;\n+  tree inner_type = TREE_TYPE (type);\n+  tree cond_type = TREE_TYPE (TREE_TYPE (a));\n+  tree comp_inner_type = cond_type;\n+  tree width = TYPE_SIZE (inner_type);\n+  tree index = bitsize_int (0);\n+  int nunits = TYPE_VECTOR_SUBPARTS (type);\n+  int i;\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n+\n+  if (TREE_CODE (a) != SSA_NAME)\n+    {\n+      gcc_assert (COMPARISON_CLASS_P (a));\n+      a_is_comparison = true;\n+      a1 = TREE_OPERAND (a, 0);\n+      a2 = TREE_OPERAND (a, 1);\n+      comp_inner_type = TREE_TYPE (TREE_TYPE (a1));\n+    }\n+\n+  if (expand_vec_cond_expr_p (type, TREE_TYPE (a1)))\n+    return;\n+\n+  /* TODO: try and find a smaller vector type.  */\n+\n+  warning_at (loc, OPT_Wvector_operation_performance,\n+\t      \"vector condition will be expanded piecewise\");\n+\n+  v = VEC_alloc(constructor_elt, gc, nunits);\n+  for (i = 0; i < nunits;\n+       i++, index = int_const_binop (PLUS_EXPR, index, width))\n+    {\n+      tree aa, result;\n+      tree bb = tree_vec_extract (gsi, inner_type, b, width, index);\n+      tree cc = tree_vec_extract (gsi, inner_type, c, width, index);\n+      if (a_is_comparison)\n+\t{\n+\t  tree aa1 = tree_vec_extract (gsi, comp_inner_type, a1, width, index);\n+\t  tree aa2 = tree_vec_extract (gsi, comp_inner_type, a2, width, index);\n+\t  aa = build2 (TREE_CODE (a), cond_type, aa1, aa2);\n+\t}\n+      else\n+\taa = tree_vec_extract (gsi, cond_type, a, width, index);\n+      result = gimplify_build3 (gsi, COND_EXPR, inner_type, aa, bb, cc);\n+      constructor_elt ce = {NULL_TREE, result};\n+      VEC_quick_push (constructor_elt, v, ce);\n+    }\n+\n+  constr = build_constructor (type, v);\n+  gimple_assign_set_rhs_from_tree (gsi, constr);\n+  update_stmt (gsi_stmt (*gsi));\n+}\n+\n static tree\n expand_vector_operation (gimple_stmt_iterator *gsi, tree type, tree compute_type,\n \t\t\t gimple assign, enum tree_code code)\n@@ -1248,6 +1314,11 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n       return;\n     }\n \n+  if (code == VEC_COND_EXPR)\n+    {\n+      expand_vector_condition (gsi);\n+      return;\n+    }\n   if (rhs_class != GIMPLE_UNARY_RHS && rhs_class != GIMPLE_BINARY_RHS)\n     return;\n "}]}