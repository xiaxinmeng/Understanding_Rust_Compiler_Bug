{"sha": "37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkNWFkNDZkZGU0ZTFjZjcxYmQ5NGYzOWY2NmUxZmE5ODU5MTIyMg==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2015-12-01T15:52:23Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2015-12-01T15:52:23Z"}, "message": "OpenACC host_data support.\n\n\tgcc/\n\t* gimple-pretty-print.c (dump_gimple_omp_target): Add host_data\n\tsupport.\n\t* gimple.h (gf_mask): Add GF_OMP_TARGET_KIND_OACC_HOST_DATA.\n\t(is_gimple_omp_oacc): Add support for above.\n\t* gimplify.c (omp_region_type): Add ORT_ACC_HOST_DATA.\n\t(omp_notice_variable): Diagnose undefined implicit uses of\n\tuse_device variables in offloaded regions.\n\t(gimplify_scan_omp_clauses): Add host_data, use_device\n\tsupport. Diagnose undefined mapping of use_device variables in\n\tOpenACC clauses.\n\t(gimplify_omp_workshare): Add host_data support.\n\t(gimplify_expr): Likewise.\n\t* omp-builtins.def (BUILT_IN_GOACC_HOST_DATA): New.\n\t* omp-low.c (lookup_decl_in_outer_ctx)\n\t(maybe_lookup_decl_in_outer_ctx): Add optional argument to skip\n\thost_data regions.\n\t(scan_sharing_clauses): Support use_device.\n\t(check_omp_nesting_restrictions): Support host_data.\n\t(expand_omp_target): Support host_data.\n\t(lower_omp_target): Skip over outer host_data regions when looking\n\tup decls. Support use_device.\n\t(make_gimple_omp_edges): Support host_data.\n\t* tree-nested.c (convert_nonlocal_omp_clauses): Add use_device\n\tclause.\n\n\tgcc/c/\n\t* c-parser.c (c_parser_omp_clause_name): Add use_device support.\n\t(c_parser_oacc_clause_use_device): New function.\n\t(c_parser_oacc_all_clauses): Add use_device support.\n\t(OACC_HOST_DATA_CLAUSE_MASK): New macro.\n\t(c_parser_oacc_host_data): New function.\n\t(c_parser_omp_construct): Add host_data support.\n\t* c-tree.h (c_finish_oacc_host_data): Add prototype.\n\t* c-typeck.c (c_finish_oacc_host_data): New function.\n\t(c_finish_omp_clauses): Add use_device support.\n\n\tgcc/cp/\n\t* cp-tree.h (finish_oacc_host_data): Add prototype.\n\t* parser.c (cp_parser_omp_clause_name): Add use_device support.\n\t(cp_parser_oacc_all_clauses): Add use_device support.\n\t(OACC_HOST_DATA_CLAUSE_MASK): New macro.\n\t(cp_parser_oacc_host_data): New function.\n\t(cp_parser_omp_construct): Add host_data support.\n\t(cp_parser_pragma): Add host_data support.\n\t* semantics.c (finish_omp_clauses): Add use_device support.\n\t(finish_oacc_host_data): New function.\n\n\tgcc/c-family/\n\t* c-pragma.c (oacc_pragmas): Add PRAGMA_OACC_HOST_DATA.\n\t* c-pragma.h (pragma_kind): Add PRAGMA_OACC_HOST_DATA.\n\t(pragma_omp_clause): Add PRAGMA_OACC_CLAUSE_USE_DEVICE.\n\n\tlibgomp/\n\t* oacc-parallel.c (GOACC_host_data): New function.\n\t* libgomp.map (GOACC_host_data): Add to GOACC_2.0.1.\n\t* testsuite/libgomp.oacc-c-c++-common/host_data-1.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/host_data-2.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/host_data-3.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/host_data-4.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/host_data-5.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/host_data-6.c: New test.\n\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\nCo-Authored-By: James Norris <James_Norris@mentor.com>\n\nFrom-SVN: r231118", "tree": {"sha": "d90ffe84f571d1596c71e5bc8ecad4230f3774d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d90ffe84f571d1596c71e5bc8ecad4230f3774d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4bc84763c0b0ac41951f66cd11fb1c27197a03dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc84763c0b0ac41951f66cd11fb1c27197a03dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc84763c0b0ac41951f66cd11fb1c27197a03dd"}], "stats": {"total": 568, "additions": 558, "deletions": 10}, "files": [{"sha": "ce77e8bb2f7ffa1158ec08231e04c303960276ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -1,3 +1,32 @@\n+2015-12-01  Julian Brown  <julian@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\t    James Norris  <James_Norris@mentor.com>\n+\n+\t* gimple-pretty-print.c (dump_gimple_omp_target): Add host_data\n+\tsupport.\n+\t* gimple.h (gf_mask): Add GF_OMP_TARGET_KIND_OACC_HOST_DATA.\n+\t(is_gimple_omp_oacc): Add support for above.\n+\t* gimplify.c (omp_region_type): Add ORT_ACC_HOST_DATA.\n+\t(omp_notice_variable): Diagnose undefined implicit uses of\n+\tuse_device variables in offloaded regions.\n+\t(gimplify_scan_omp_clauses): Add host_data, use_device\n+\tsupport. Diagnose undefined mapping of use_device variables in\n+\tOpenACC clauses.\n+\t(gimplify_omp_workshare): Add host_data support.\n+\t(gimplify_expr): Likewise.\n+\t* omp-builtins.def (BUILT_IN_GOACC_HOST_DATA): New.\n+\t* omp-low.c (lookup_decl_in_outer_ctx)\n+\t(maybe_lookup_decl_in_outer_ctx): Add optional argument to skip\n+\thost_data regions.\n+\t(scan_sharing_clauses): Support use_device.\n+\t(check_omp_nesting_restrictions): Support host_data.\n+\t(expand_omp_target): Support host_data.\n+\t(lower_omp_target): Skip over outer host_data regions when looking\n+\tup decls. Support use_device.\n+\t(make_gimple_omp_edges): Support host_data.\n+\t* tree-nested.c (convert_nonlocal_omp_clauses): Add use_device\n+\tclause.\n+\n 2015-12-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/68582"}, {"sha": "982a74a601732ca7c293c280dcd15ac82360d79b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -1,3 +1,11 @@\n+2015-12-01  Julian Brown  <julian@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\t    James Norris  <James_Norris@mentor.com>\n+\n+\t* c-pragma.c (oacc_pragmas): Add PRAGMA_OACC_HOST_DATA.\n+\t* c-pragma.h (pragma_kind): Add PRAGMA_OACC_HOST_DATA.\n+\t(pragma_omp_clause): Add PRAGMA_OACC_CLAUSE_USE_DEVICE.\n+\n 2015-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (print_ada_macros): Remove redundant blank line."}, {"sha": "56cf6976fc957f4c6e5309fb48a505e9250528db", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -1251,6 +1251,7 @@ static const struct omp_pragma_def oacc_pragmas[] = {\n   { \"declare\", PRAGMA_OACC_DECLARE },\n   { \"enter\", PRAGMA_OACC_ENTER_DATA },\n   { \"exit\", PRAGMA_OACC_EXIT_DATA },\n+  { \"host_data\", PRAGMA_OACC_HOST_DATA },\n   { \"kernels\", PRAGMA_OACC_KERNELS },\n   { \"loop\", PRAGMA_OACC_LOOP },\n   { \"parallel\", PRAGMA_OACC_PARALLEL },"}, {"sha": "dd246b938a1c2b4c119e61a757bdb31e78b685d7", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -33,6 +33,7 @@ enum pragma_kind {\n   PRAGMA_OACC_DECLARE,\n   PRAGMA_OACC_ENTER_DATA,\n   PRAGMA_OACC_EXIT_DATA,\n+  PRAGMA_OACC_HOST_DATA,\n   PRAGMA_OACC_KERNELS,\n   PRAGMA_OACC_LOOP,\n   PRAGMA_OACC_PARALLEL,\n@@ -167,6 +168,7 @@ enum pragma_omp_clause {\n   PRAGMA_OACC_CLAUSE_SELF,\n   PRAGMA_OACC_CLAUSE_SEQ,\n   PRAGMA_OACC_CLAUSE_TILE,\n+  PRAGMA_OACC_CLAUSE_USE_DEVICE,\n   PRAGMA_OACC_CLAUSE_VECTOR,\n   PRAGMA_OACC_CLAUSE_VECTOR_LENGTH,\n   PRAGMA_OACC_CLAUSE_WAIT,"}, {"sha": "43d1579aff6ce05b10d088fce91f5b2d268792e4", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -1,3 +1,17 @@\n+2015-12-01  Julian Brown  <julian@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\t    James Norris  <James_Norris@mentor.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_name): Add use_device support.\n+\t(c_parser_oacc_clause_use_device): New function.\n+\t(c_parser_oacc_all_clauses): Add use_device support.\n+\t(OACC_HOST_DATA_CLAUSE_MASK): New macro.\n+\t(c_parser_oacc_host_data): New function.\n+\t(c_parser_omp_construct): Add host_data support.\n+\t* c-tree.h (c_finish_oacc_host_data): Add prototype.\n+\t* c-typeck.c (c_finish_oacc_host_data): New function.\n+\t(c_finish_omp_clauses): Add use_device support.\n+\n 2015-11-29  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR c/67106"}, {"sha": "d4c512fee047c013a4ede26a4f94b1b64dd163ab", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -10279,6 +10279,8 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_UNTIED;\n \t  else if (!strcmp (\"use_device_ptr\", p))\n \t    result = PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR;\n+\t  else if (!strcmp (\"use_device\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_USE_DEVICE;\n \t  break;\n \tcase 'v':\n \t  if (!strcmp (\"vector\", p))\n@@ -11631,6 +11633,15 @@ c_parser_oacc_clause_tile (c_parser *parser, tree list)\n   return c;\n }\n \n+/* OpenACC 2.0:\n+   use_device ( variable-list ) */\n+\n+static tree\n+c_parser_oacc_clause_use_device (c_parser *parser, tree list)\n+{\n+  return c_parser_omp_var_list_parens (parser, OMP_CLAUSE_USE_DEVICE, list);\n+}\n+\n /* OpenACC:\n    wait ( int-expr-list ) */\n \n@@ -12940,6 +12951,10 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"self\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_USE_DEVICE:\n+\t  clauses = c_parser_oacc_clause_use_device (parser, clauses);\n+\t  c_name = \"use_device\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_SEQ:\n \t  clauses = c_parser_oacc_simple_clause (parser, OMP_CLAUSE_SEQ,\n \t\t\t\t\t\tclauses);\n@@ -13589,6 +13604,29 @@ c_parser_oacc_enter_exit_data (c_parser *parser, bool enter)\n }\n \n \n+/* OpenACC 2.0:\n+   # pragma acc host_data oacc-data-clause[optseq] new-line\n+     structured-block\n+*/\n+\n+#define OACC_HOST_DATA_CLAUSE_MASK\t\t\t\t\t\\\n+\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_USE_DEVICE) )\n+\n+static tree\n+c_parser_oacc_host_data (location_t loc, c_parser *parser)\n+{\n+  tree stmt, clauses, block;\n+\n+  clauses = c_parser_oacc_all_clauses (parser, OACC_HOST_DATA_CLAUSE_MASK,\n+\t\t\t\t       \"#pragma acc host_data\");\n+\n+  block = c_begin_omp_parallel ();\n+  add_stmt (c_parser_omp_structured_block (parser));\n+  stmt = c_finish_oacc_host_data (loc, clauses, block);\n+  return stmt;\n+}\n+\n+\n /* OpenACC 2.0:\n \n    # pragma acc loop oacc-loop-clause[optseq] new-line\n@@ -16897,6 +16935,9 @@ c_parser_omp_construct (c_parser *parser)\n     case PRAGMA_OACC_DATA:\n       stmt = c_parser_oacc_data (loc, parser);\n       break;\n+    case PRAGMA_OACC_HOST_DATA:\n+      stmt = c_parser_oacc_host_data (loc, parser);\n+      break;\n     case PRAGMA_OACC_KERNELS:\n     case PRAGMA_OACC_PARALLEL:\n       strcpy (p_name, \"#pragma acc\");"}, {"sha": "848131e67f97eb10eab20fbe81816294b6fb637b", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -653,6 +653,7 @@ extern tree c_finish_goto_ptr (location_t, tree);\n extern tree c_expr_to_decl (tree, bool *, bool *);\n extern tree c_finish_omp_construct (location_t, enum tree_code, tree, tree);\n extern tree c_finish_oacc_data (location_t, tree, tree);\n+extern tree c_finish_oacc_host_data (location_t, tree, tree);\n extern tree c_begin_omp_parallel (void);\n extern tree c_finish_omp_parallel (location_t, tree, tree);\n extern tree c_begin_omp_task (void);"}, {"sha": "cc2e38e12a751943c7b886d1e02d921eaff25da3", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -11631,6 +11631,25 @@ c_finish_oacc_data (location_t loc, tree clauses, tree block)\n   return add_stmt (stmt);\n }\n \n+/* Generate OACC_HOST_DATA, with CLAUSES and BLOCK as its compound\n+   statement.  LOC is the location of the OACC_HOST_DATA.  */\n+\n+tree\n+c_finish_oacc_host_data (location_t loc, tree clauses, tree block)\n+{\n+  tree stmt;\n+\n+  block = c_end_compound_stmt (loc, block, true);\n+\n+  stmt = make_node (OACC_HOST_DATA);\n+  TREE_TYPE (stmt) = void_type_node;\n+  OACC_HOST_DATA_CLAUSES (stmt) = clauses;\n+  OACC_HOST_DATA_BODY (stmt) = block;\n+  SET_EXPR_LOCATION (stmt, loc);\n+\n+  return add_stmt (stmt);\n+}\n+\n /* Like c_begin_compound_stmt, except force the retention of the BLOCK.  */\n \n tree\n@@ -13074,6 +13093,7 @@ c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd)\n \t  bitmap_set_bit (&map_head, DECL_UID (t));\n \t  goto check_dup_generic;\n \n+\tcase OMP_CLAUSE_USE_DEVICE:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \t  t = OMP_CLAUSE_DECL (c);"}, {"sha": "9cc0a53144e640acf15564b2e1ff28f51ad41977", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -1,3 +1,17 @@\n+2015-12-01  Julian Brown  <julian@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\t    James Norris  <James_Norris@mentor.com>\n+\n+\t* cp-tree.h (finish_oacc_host_data): Add prototype.\n+\t* parser.c (cp_parser_omp_clause_name): Add use_device support.\n+\t(cp_parser_oacc_all_clauses): Add use_device support.\n+\t(OACC_HOST_DATA_CLAUSE_MASK): New macro.\n+\t(cp_parser_oacc_host_data): New function.\n+\t(cp_parser_omp_construct): Add host_data support.\n+\t(cp_parser_pragma): Add host_data support.\n+\t* semantics.c (finish_omp_clauses): Add use_device support.\n+\t(finish_oacc_host_data): New function.\n+\n 2015-11-27  Martin Liska  <mliska@suse.cz>\n \n \tPR c++/68312"}, {"sha": "38ae70f74612c0f1305e9891ad0815e729c5584f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -6360,6 +6360,7 @@ extern void finish_omp_threadprivate\t\t(tree);\n extern tree begin_omp_structured_block\t\t(void);\n extern tree finish_omp_structured_block\t\t(tree);\n extern tree finish_oacc_data\t\t\t(tree, tree);\n+extern tree finish_oacc_host_data\t\t(tree, tree);\n extern tree finish_omp_construct\t\t(enum tree_code, tree, tree);\n extern tree begin_omp_parallel\t\t\t(void);\n extern tree finish_omp_parallel\t\t\t(tree, tree);"}, {"sha": "f78df028193b427699b0b0c0cea97cd9913f3af7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -29232,6 +29232,8 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_UNTIED;\n \t  else if (!strcmp (\"use_device_ptr\", p))\n \t    result = PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR;\n+\t  else if (!strcmp (\"use_device\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_USE_DEVICE;\n \t  break;\n \tcase 'v':\n \t  if (!strcmp (\"vector\", p))\n@@ -31598,6 +31600,11 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"self\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_USE_DEVICE:\n+\t  clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_USE_DEVICE,\n+\t\t\t\t\t    clauses);\n+\t  c_name = \"use_device\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_SEQ:\n \t  clauses = cp_parser_oacc_simple_clause (parser, OMP_CLAUSE_SEQ,\n \t\t\t\t\t\t clauses, here);\n@@ -34509,6 +34516,30 @@ cp_parser_oacc_data (cp_parser *parser, cp_token *pragma_tok)\n   return stmt;\n }\n \n+#define OACC_HOST_DATA_CLAUSE_MASK\t\t\t\t\t\\\n+  ( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_USE_DEVICE) )\n+\n+/* OpenACC 2.0:\n+  # pragma acc host_data <clauses> new-line\n+  structured-block  */\n+\n+static tree\n+cp_parser_oacc_host_data (cp_parser *parser, cp_token *pragma_tok)\n+{\n+  tree stmt, clauses, block;\n+  unsigned int save;\n+\n+  clauses = cp_parser_oacc_all_clauses (parser, OACC_HOST_DATA_CLAUSE_MASK,\n+\t\t\t\t\t\"#pragma acc host_data\", pragma_tok);\n+\n+  block = begin_omp_parallel ();\n+  save = cp_parser_begin_omp_structured_block (parser);\n+  cp_parser_statement (parser, NULL_TREE, false, NULL);\n+  cp_parser_end_omp_structured_block (parser, save);\n+  stmt = finish_oacc_host_data (clauses, block);\n+  return stmt;\n+}\n+\n /* OpenACC 2.0:\n    # pragma acc declare oacc-data-clause[optseq] new-line\n */\n@@ -36068,6 +36099,9 @@ cp_parser_omp_construct (cp_parser *parser, cp_token *pragma_tok)\n     case PRAGMA_OACC_EXIT_DATA:\n       stmt = cp_parser_oacc_enter_exit_data (parser, pragma_tok, false);\n       break;\n+    case PRAGMA_OACC_HOST_DATA:\n+      stmt = cp_parser_oacc_host_data (parser, pragma_tok);\n+      break;\n     case PRAGMA_OACC_KERNELS:\n     case PRAGMA_OACC_PARALLEL:\n       strcpy (p_name, \"#pragma acc\");\n@@ -36645,6 +36679,7 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context)\n     case PRAGMA_OACC_DATA:\n     case PRAGMA_OACC_ENTER_DATA:\n     case PRAGMA_OACC_EXIT_DATA:\n+    case PRAGMA_OACC_HOST_DATA:\n     case PRAGMA_OACC_KERNELS:\n     case PRAGMA_OACC_PARALLEL:\n     case PRAGMA_OACC_LOOP:"}, {"sha": "3bb61847ca80e02dcd5e0a65ffeef902c0e859c3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -6835,6 +6835,7 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd)\n \t    }\n \t  break;\n \n+\tcase OMP_CLAUSE_USE_DEVICE:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \t  field_ok = allow_fields;\n@@ -7390,6 +7391,24 @@ finish_oacc_data (tree clauses, tree block)\n   return add_stmt (stmt);\n }\n \n+/* Generate OACC_HOST_DATA, with CLAUSES and BLOCK as its compound\n+   statement.  */\n+\n+tree\n+finish_oacc_host_data (tree clauses, tree block)\n+{\n+  tree stmt;\n+\n+  block = finish_omp_structured_block (block);\n+\n+  stmt = make_node (OACC_HOST_DATA);\n+  TREE_TYPE (stmt) = void_type_node;\n+  OACC_HOST_DATA_CLAUSES (stmt) = clauses;\n+  OACC_HOST_DATA_BODY (stmt) = block;\n+\n+  return add_stmt (stmt);\n+}\n+\n /* Generate OMP construct CODE, with BODY and CLAUSES as its compound\n    statement.  */\n "}, {"sha": "f1abf5c4aea522d0d41a4676a3c5a19eff4e88e8", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -1356,6 +1356,9 @@ dump_gimple_omp_target (pretty_printer *buffer, gomp_target *gs,\n     case GF_OMP_TARGET_KIND_OACC_DECLARE:\n       kind = \" oacc_declare\";\n       break;\n+    case GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n+      kind = \" oacc_host_data\";\n+      break;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "dc61043fafca15297ad758018a1b24a5162c5977", "filename": "gcc/gimple.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -171,6 +171,7 @@ enum gf_mask {\n     GF_OMP_TARGET_KIND_OACC_UPDATE = 8,\n     GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA = 9,\n     GF_OMP_TARGET_KIND_OACC_DECLARE = 10,\n+    GF_OMP_TARGET_KIND_OACC_HOST_DATA = 11,\n \n     /* True on an GIMPLE_OMP_RETURN statement if the return does not require\n        a thread synchronization via some sort of barrier.  The exact barrier\n@@ -6004,6 +6005,7 @@ is_gimple_omp_oacc (const gimple *stmt)\n \tcase GF_OMP_TARGET_KIND_OACC_UPDATE:\n \tcase GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_DECLARE:\n+\tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n \t  return true;\n \tdefault:\n \t  return false;"}, {"sha": "4229e2d52dd049088db1787519dcbfb6a462f45d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -122,6 +122,7 @@ enum omp_region_type\n   ORT_ACC_DATA\t= ORT_ACC | ORT_TARGET_DATA, /* Data construct.  */\n   ORT_ACC_PARALLEL = ORT_ACC | ORT_TARGET,  /* Parallel construct */\n   ORT_ACC_KERNELS  = ORT_ACC | ORT_TARGET | 0x80,  /* Kernels construct.  */\n+  ORT_ACC_HOST_DATA = ORT_ACC | ORT_TARGET_DATA | 0x80,  /* Host data.  */\n \n   /* Dummy OpenMP region, used to disable expansion of\n      DECL_VALUE_EXPRs in taskloop pre body.  */\n@@ -6120,6 +6121,9 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \t\t\t\t\t (splay_tree_key) decl);\n \t\t  if (n2)\n \t\t    {\n+\t\t      if (octx->region_type == ORT_ACC_HOST_DATA)\n+\t\t        error (\"variable %qE declared in enclosing \"\n+\t\t\t       \"%<host_data%> region\", DECL_NAME (decl));\n \t\t      nflags |= GOVD_MAP;\n \t\t      goto found_outer;\n \t\t    }\n@@ -6418,6 +6422,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n       case OMP_TARGET_DATA:\n       case OMP_TARGET_ENTER_DATA:\n       case OMP_TARGET_EXIT_DATA:\n+      case OACC_HOST_DATA:\n \tctx->target_firstprivatize_array_bases = true;\n       default:\n \tbreak;\n@@ -6683,6 +6688,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t    case OMP_TARGET_DATA:\n \t    case OMP_TARGET_ENTER_DATA:\n \t    case OMP_TARGET_EXIT_DATA:\n+\t    case OACC_HOST_DATA:\n \t      if (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_FIRSTPRIVATE_POINTER\n \t\t  || (OMP_CLAUSE_MAP_KIND (c)\n \t\t      == GOMP_MAP_FIRSTPRIVATE_REFERENCE))\n@@ -6695,6 +6701,22 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t    }\n \t  if (remove)\n \t    break;\n+\t  if (DECL_P (decl) && outer_ctx && (region_type & ORT_ACC))\n+\t    {\n+\t      struct gimplify_omp_ctx *octx;\n+\t      for (octx = outer_ctx; octx; octx = octx->outer_context)\n+\t        {\n+\t\t  if (octx->region_type != ORT_ACC_HOST_DATA)\n+\t\t    break;\n+\t\t  splay_tree_node n2\n+\t\t    = splay_tree_lookup (octx->variables,\n+\t\t\t\t\t (splay_tree_key) decl);\n+\t\t  if (n2)\n+\t\t    error_at (OMP_CLAUSE_LOCATION (c), \"variable %qE \"\n+\t\t\t      \"declared in enclosing %<host_data%> region\",\n+\t\t\t      DECL_NAME (decl));\n+\t\t}\n+\t    }\n \t  if (OMP_CLAUSE_SIZE (c) == NULL_TREE)\n \t    OMP_CLAUSE_SIZE (c) = DECL_P (decl) ? DECL_SIZE_UNIT (decl)\n \t\t\t\t  : TYPE_SIZE_UNIT (TREE_TYPE (decl));\n@@ -7092,6 +7114,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t    }\n \t  goto do_notice;\n \n+\tcase OMP_CLAUSE_USE_DEVICE:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \t  flags = GOVD_FIRSTPRIVATE | GOVD_EXPLICIT;\n \t  goto do_add;\n@@ -7327,7 +7350,6 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t  break;\n \n \tcase OMP_CLAUSE_DEVICE_RESIDENT:\n-\tcase OMP_CLAUSE_USE_DEVICE:\n \t  remove = true;\n \t  break;\n \n@@ -9365,6 +9387,9 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n     case OMP_TEAMS:\n       ort = OMP_TEAMS_COMBINED (expr) ? ORT_COMBINED_TEAMS : ORT_TEAMS;\n       break;\n+    case OACC_HOST_DATA:\n+      ort = ORT_ACC_HOST_DATA;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -9386,6 +9411,7 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n \t  switch (TREE_CODE (expr))\n \t    {\n \t    case OACC_DATA:\n+\t    case OACC_HOST_DATA:\n \t      end_ix = BUILT_IN_GOACC_DATA_END;\n \t      break;\n \t    case OMP_TARGET_DATA:\n@@ -9418,6 +9444,10 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n       stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_OACC_KERNELS,\n \t\t\t\t      OMP_CLAUSES (expr));\n       break;\n+    case OACC_HOST_DATA:\n+      stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_OACC_HOST_DATA,\n+\t\t\t\t      OMP_CLAUSES (expr));\n+      break;\n     case OACC_PARALLEL:\n       stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_OACC_PARALLEL,\n \t\t\t\t      OMP_CLAUSES (expr));\n@@ -10527,16 +10557,12 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  ret = GS_ALL_DONE;\n \t  break;\n \n-\tcase OACC_HOST_DATA:\n-\t  sorry (\"directive not yet implemented\");\n-\t  ret = GS_ALL_DONE;\n-\t  break;\n-\n \tcase OACC_DECLARE:\n \t  gimplify_oacc_declare (expr_p, pre_p);\n \t  ret = GS_ALL_DONE;\n \t  break;\n \n+\tcase OACC_HOST_DATA:\n \tcase OACC_DATA:\n \tcase OACC_KERNELS:\n \tcase OACC_PARALLEL:"}, {"sha": "35f5014a62b4a3fc9c2b07228e48191114f0b004", "filename": "gcc/omp-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fomp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fomp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-builtins.def?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -47,6 +47,8 @@ DEF_GOACC_BUILTIN (BUILT_IN_GOACC_UPDATE, \"GOACC_update\",\n DEF_GOACC_BUILTIN (BUILT_IN_GOACC_WAIT, \"GOACC_wait\",\n \t\t   BT_FN_VOID_INT_INT_VAR,\n \t\t   ATTR_NOTHROW_LIST)\n+DEF_GOACC_BUILTIN (BUILT_IN_GOACC_HOST_DATA, \"GOACC_host_data\",\n+\t\t   BT_FN_VOID_INT_SIZE_PTR_PTR_PTR, ATTR_NOTHROW_LIST)\n \n DEF_GOACC_BUILTIN_COMPILER (BUILT_IN_ACC_ON_DEVICE, \"acc_on_device\",\n \t\t\t    BT_FN_INT_INT, ATTR_CONST_NOTHROW_LEAF_LIST)"}, {"sha": "15cc839ce26dd73afb9cac60ed7f794fa4c01325", "filename": "gcc/omp-low.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -1942,6 +1942,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  install_var_local (decl, ctx);\n \t  break;\n \n+\tcase OMP_CLAUSE_USE_DEVICE:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \t  decl = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n@@ -2144,7 +2145,6 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  break;\n \n \tcase OMP_CLAUSE_DEVICE_RESIDENT:\n-\tcase OMP_CLAUSE_USE_DEVICE:\n \tcase OMP_CLAUSE__CACHE_:\n \t  sorry (\"Clause not supported yet\");\n \t  break;\n@@ -2295,6 +2295,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_NOGROUP:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_USE_DEVICE:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE__CILK_FOR_COUNT_:\n \tcase OMP_CLAUSE_ASYNC:\n@@ -2312,7 +2313,6 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  break;\n \n \tcase OMP_CLAUSE_DEVICE_RESIDENT:\n-\tcase OMP_CLAUSE_USE_DEVICE:\n \tcase OMP_CLAUSE__CACHE_:\n \t  sorry (\"Clause not supported yet\");\n \t  break;\n@@ -3615,6 +3615,8 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t    case GF_OMP_TARGET_KIND_OACC_UPDATE: stmt_name = \"update\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n \t      stmt_name = \"enter/exit data\"; break;\n+\t    case GF_OMP_TARGET_KIND_OACC_HOST_DATA: stmt_name = \"host_data\";\n+\t      break;\n \t    default: gcc_unreachable ();\n \t    }\n \t  switch (gimple_omp_target_kind (ctx->stmt))\n@@ -3626,6 +3628,8 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t    case GF_OMP_TARGET_KIND_OACC_KERNELS:\n \t      ctx_stmt_name = \"kernels\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_DATA: ctx_stmt_name = \"data\"; break;\n+\t    case GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n+\t      ctx_stmt_name = \"host_data\"; break;\n \t    default: gcc_unreachable ();\n \t    }\n \n@@ -12508,6 +12512,7 @@ expand_omp_target (struct omp_region *region)\n       break;\n     case GF_OMP_TARGET_KIND_DATA:\n     case GF_OMP_TARGET_KIND_OACC_DATA:\n+    case GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n       data_region = true;\n       break;\n     default:\n@@ -12751,6 +12756,9 @@ expand_omp_target (struct omp_region *region)\n     case GF_OMP_TARGET_KIND_OACC_DECLARE:\n       start_ix = BUILT_IN_GOACC_DECLARE;\n       break;\n+    case GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n+      start_ix = BUILT_IN_GOACC_HOST_DATA;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -12875,6 +12883,7 @@ expand_omp_target (struct omp_region *region)\n     case BUILT_IN_GOACC_DATA_START:\n     case BUILT_IN_GOACC_DECLARE:\n     case BUILT_IN_GOMP_TARGET_DATA:\n+    case BUILT_IN_GOACC_HOST_DATA:\n       break;\n     case BUILT_IN_GOMP_TARGET:\n     case BUILT_IN_GOMP_TARGET_UPDATE:\n@@ -13182,6 +13191,7 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \t\tcase GF_OMP_TARGET_KIND_OACC_PARALLEL:\n \t\tcase GF_OMP_TARGET_KIND_OACC_KERNELS:\n \t\tcase GF_OMP_TARGET_KIND_OACC_DATA:\n+\t\tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n \t\t  break;\n \t\tcase GF_OMP_TARGET_KIND_UPDATE:\n \t\tcase GF_OMP_TARGET_KIND_ENTER_DATA:\n@@ -14982,6 +14992,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n       break;\n     case GF_OMP_TARGET_KIND_DATA:\n     case GF_OMP_TARGET_KIND_OACC_DATA:\n+    case GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n       data_region = true;\n       break;\n     default:\n@@ -15188,6 +15199,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  }\n \tbreak;\n \n+      case OMP_CLAUSE_USE_DEVICE:\n       case OMP_CLAUSE_USE_DEVICE_PTR:\n       case OMP_CLAUSE_IS_DEVICE_PTR:\n \tvar = OMP_CLAUSE_DECL (c);\n@@ -15573,12 +15585,14 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t\t\t    build_int_cstu (tkind_type, tkind));\n \t    break;\n \n+\t  case OMP_CLAUSE_USE_DEVICE:\n \t  case OMP_CLAUSE_USE_DEVICE_PTR:\n \t  case OMP_CLAUSE_IS_DEVICE_PTR:\n \t    ovar = OMP_CLAUSE_DECL (c);\n \t    var = lookup_decl_in_outer_ctx (ovar, ctx);\n \t    x = build_sender_ref (ovar, ctx);\n-\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR)\n+\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR\n+\t\t|| OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE)\n \t      tkind = GOMP_MAP_USE_DEVICE_PTR;\n \t    else\n \t      tkind = GOMP_MAP_FIRSTPRIVATE_INT;\n@@ -15781,10 +15795,12 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t\t\t     gimple_build_assign (new_var, x));\n \t      }\n \t    break;\n+\t  case OMP_CLAUSE_USE_DEVICE:\n \t  case OMP_CLAUSE_USE_DEVICE_PTR:\n \t  case OMP_CLAUSE_IS_DEVICE_PTR:\n \t    var = OMP_CLAUSE_DECL (c);\n-\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR)\n+\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR\n+\t\t|| OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE)\n \t      x = build_sender_ref (var, ctx);\n \t    else\n \t      x = build_receiver_ref (var, false, ctx);\n@@ -16771,6 +16787,7 @@ make_gimple_omp_edges (basic_block bb, struct omp_region **region,\n \tcase GF_OMP_TARGET_KIND_OACC_PARALLEL:\n \tcase GF_OMP_TARGET_KIND_OACC_KERNELS:\n \tcase GF_OMP_TARGET_KIND_OACC_DATA:\n+\tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n \t  break;\n \tcase GF_OMP_TARGET_KIND_UPDATE:\n \tcase GF_OMP_TARGET_KIND_ENTER_DATA:"}, {"sha": "da19e8d3d3515dbe047c54f54981eb19e653fac2", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -1072,6 +1072,7 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_SHARED:\n \tcase OMP_CLAUSE_TO_DECLARE:\n \tcase OMP_CLAUSE_LINK:\n+\tcase OMP_CLAUSE_USE_DEVICE:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tdo_decl_clause:\n@@ -1743,6 +1744,7 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_SHARED:\n \tcase OMP_CLAUSE_TO_DECLARE:\n \tcase OMP_CLAUSE_LINK:\n+\tcase OMP_CLAUSE_USE_DEVICE:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tdo_decl_clause:"}, {"sha": "ddf836a078bb0b685366e93688237a3fd3b7b1fd", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -1,3 +1,15 @@\n+2015-12-01  Julian Brown  <julian@codesourcery.com>\n+\t    James Norris  <James_Norris@mentor.com>\n+\n+\t* oacc-parallel.c (GOACC_host_data): New function.\n+\t* libgomp.map (GOACC_host_data): Add to GOACC_2.0.1.\n+\t* testsuite/libgomp.oacc-c-c++-common/host_data-1.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/host_data-2.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/host_data-3.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/host_data-4.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/host_data-5.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/host_data-6.c: New test.\n+\n 2015-11-30  James Norris  <jnorris@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n "}, {"sha": "ea9344dc8fb5dff579a2d2806c1d812d762cf9c3", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -394,6 +394,7 @@ GOACC_2.0.1 {\n   global:\n \tGOACC_declare;\n \tGOACC_parallel_keyed;\n+\tGOACC_host_data;\n } GOACC_2.0;\n \n GOMP_PLUGIN_1.0 {"}, {"sha": "db7cab3e75c409d8d6b6ecfe73a730bcbd1f4be4", "filename": "libgomp/oacc-parallel.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Foacc-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Foacc-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-parallel.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -490,6 +490,46 @@ GOACC_wait (int async, int num_waits, ...)\n     goacc_thread ()->dev->openacc.async_wait_all_async_func (acc_async_noval);\n }\n \n+void\n+GOACC_host_data (int device, size_t mapnum,\n+\t\t void **hostaddrs, size_t *sizes, unsigned short *kinds)\n+{\n+  bool host_fallback = device == GOMP_DEVICE_HOST_FALLBACK;\n+  struct target_mem_desc *tgt;\n+\n+#ifdef HAVE_INTTYPES_H\n+  gomp_debug (0, \"%s: mapnum=%\"PRIu64\", hostaddrs=%p, size=%p, kinds=%p\\n\",\n+\t      __FUNCTION__, (uint64_t) mapnum, hostaddrs, sizes, kinds);\n+#else\n+  gomp_debug (0, \"%s: mapnum=%lu, hostaddrs=%p, sizes=%p, kinds=%p\\n\",\n+\t      __FUNCTION__, (unsigned long) mapnum, hostaddrs, sizes, kinds);\n+#endif\n+\n+  goacc_lazy_initialize ();\n+\n+  struct goacc_thread *thr = goacc_thread ();\n+  struct gomp_device_descr *acc_dev = thr->dev;\n+\n+  /* Host fallback or 'do nothing'.  */\n+  if ((acc_dev->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+      || host_fallback)\n+    {\n+      tgt = gomp_map_vars (NULL, 0, NULL, NULL, NULL, NULL, true,\n+\t\t\t   GOMP_MAP_VARS_OPENACC);\n+      tgt->prev = thr->mapped_data;\n+      thr->mapped_data = tgt;\n+\n+      return;\n+    }\n+\n+  gomp_debug (0, \"  %s: prepare mappings\\n\", __FUNCTION__);\n+  tgt = gomp_map_vars (acc_dev, mapnum, hostaddrs, NULL, sizes, kinds, true,\n+\t\t       GOMP_MAP_VARS_OPENACC);\n+  gomp_debug (0, \"  %s: mappings prepared\\n\", __FUNCTION__);\n+  tgt->prev = thr->mapped_data;\n+  thr->mapped_data = tgt;\n+}\n+\n int\n GOACC_get_num_threads (void)\n {"}, {"sha": "51745ba726d760b6d925a3b4b520c7a685785581", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/host_data-1.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-1.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -0,0 +1,100 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-additional-options \"-lcuda -lcublas -lcudart\" } */\n+\n+#include <stdlib.h>\n+#include <openacc.h>\n+#include <cuda.h>\n+#include <cuda_runtime_api.h>\n+#include <cublas_v2.h>\n+\n+void\n+saxpy_host (int n, float a, float *x, float *y)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    y[i] = y[i] + a * x[i];\n+}\n+\n+#pragma acc routine\n+void\n+saxpy_target (int n, float a, float *x, float *y)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    y[i] = y[i] + a * x[i];\n+}\n+\n+int\n+main(int argc, char **argv)\n+{\n+#define N 8\n+  int i;\n+  float x_ref[N], y_ref[N];\n+  float x[N], y[N];\n+  cublasHandle_t h;\n+  float a = 2.0;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      x[i] = x_ref[i] = 4.0 + i;\n+      y[i] = y_ref[i] = 3.0;\n+    }\n+\n+  saxpy_host (N, a, x_ref, y_ref);\n+\n+  cublasCreate (&h);\n+\n+#pragma acc data copyin (x[0:N]) copy (y[0:N])\n+  {\n+#pragma acc host_data use_device (x, y)\n+    {\n+      cublasSaxpy (h, N, &a, x, 1, y, 1);\n+    }\n+  }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (y[i] != y_ref[i])\n+        abort ();\n+    }\n+\n+#pragma acc data create (x[0:N]) copyout (y[0:N])\n+  {\n+#pragma acc kernels\n+    for (i = 0; i < N; i++)\n+      y[i] = 3.0;\n+\n+#pragma acc host_data use_device (x, y)\n+    {\n+      cublasSaxpy (h, N, &a, x, 1, y, 1);\n+    }\n+  }\n+\n+  cublasDestroy (h);\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (y[i] != y_ref[i])\n+        abort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    y[i] = 3.0;\n+\n+  /* There's no need to use host_data here.  */\n+#pragma acc data copyin (x[0:N]) copyin (a) copy (y[0:N])\n+  {\n+#pragma acc parallel present (x[0:N]) pcopy (y[0:N]) present (a)\n+    saxpy_target (N, a, x, y);\n+  }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (y[i] != y_ref[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "98202867b4d8daa13fb8e5762fbe0b5366172a06", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/host_data-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-2.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+char *global_in_host;\n+\n+void foo (char *in)\n+{\n+  if (!acc_is_present (global_in_host, sizeof (*global_in_host))\n+      || in != acc_deviceptr (global_in_host))\n+    abort ();\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  char mydata[1024];\n+\n+  global_in_host = mydata;\n+\n+#pragma acc data copyin(mydata)\n+  {\n+#pragma acc host_data use_device (mydata)\n+    {\n+      foo (mydata);\n+    }\n+  }\n+\n+  return 0;\n+}"}, {"sha": "7d9b5f7266789ba46ffc1fc9077748c2fdd906fb", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/host_data-3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-3.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+\n+#include <openacc.h>\n+#include <stdlib.h>\n+\n+#define N 1024\n+\n+int main (int argc, char* argv[])\n+{\n+  int x[N];\n+\n+#pragma acc data copyin (x[0:N])\n+  {\n+    int *xp;\n+#pragma acc host_data use_device (x)\n+    {\n+      /* This use of the present clause is undefined behaviour for OpenACC.  */\n+#pragma acc parallel present (x) copyout (xp) /* { dg-error \"variable 'x' declared in enclosing 'host_data' region\" } */\n+      {\n+        xp = x;\n+      }\n+    }\n+\n+    if (xp != acc_deviceptr (x))\n+      abort ();\n+  }\n+\n+  return 0;\n+}"}, {"sha": "3504f2710fd30857083d1cc05564693de6eb0f6b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/host_data-4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-4.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+\n+#include <openacc.h>\n+#include <stdlib.h>\n+\n+#define N 1024\n+\n+int main (int argc, char* argv[])\n+{\n+  int x[N], *xp2;\n+\n+#pragma acc data copyin (x[0:N])\n+  {\n+    int *xp;\n+#pragma acc host_data use_device (x)\n+    {\n+#pragma acc data\n+      {\n+        xp = x;\n+      }\n+      xp2 = x;\n+    }\n+\n+    if (xp != acc_deviceptr (x) || xp2 != xp)\n+      abort ();\n+  }\n+\n+  return 0;\n+}"}, {"sha": "268e9194d35d4fbde7eea266b9298d97256b851f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/host_data-5.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-5.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+\n+#include <openacc.h>\n+#include <stdlib.h>\n+\n+#define N 1024\n+\n+int main (int argc, char* argv[])\n+{\n+  int x[N], y[N], *yp;\n+\n+  yp = y + 1;\n+\n+#pragma acc data copyin (x[0:N])\n+  {\n+    int *xp, *yp2;\n+#pragma acc host_data use_device (x)\n+    {\n+#pragma acc data copyin (y)\n+      {\n+#pragma acc host_data use_device (yp)\n+\t{\n+\t  xp = x;\n+\t  yp2 = yp;\n+\t}\n+\n+        if (yp2 != acc_deviceptr (yp))\n+\t  abort ();\n+      }\n+    }\n+\n+    if (xp != acc_deviceptr (x))\n+      abort ();\n+\n+  }\n+\n+  return 0;\n+}"}, {"sha": "a841488515efcd683ebb49ca743e0065214e2af2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/host_data-6.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d5ad46dde4e1cf71bd94f39f66e1fa98591222/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-6.c?ref=37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+\n+#include <openacc.h>\n+#include <stdlib.h>\n+\n+#define N 1024\n+\n+int main (int argc, char* argv[])\n+{\n+  int x[N];\n+\n+#pragma acc data copyin (x[0:N])\n+  {\n+    int *xp;\n+#pragma acc host_data use_device (x)\n+    {\n+      /* Here 'x' being implicitly firstprivate for the parallel region\n+\t conflicts with it being declared as use_device in the enclosing\n+\t host_data region.  */\n+#pragma acc parallel copyout (xp)\n+      {\n+        xp = x; /* { dg-error \"variable 'x' declared in enclosing 'host_data' region\" } */\n+      }\n+    }\n+\n+    if (xp != acc_deviceptr (x))\n+      abort ();\n+  }\n+\n+  return 0;\n+}"}]}