{"sha": "5ce08ecb15b2501abea7215e3fc59646ef7a73f9", "node_id": "C_kwDOANBUbNoAKDVjZTA4ZWNiMTViMjUwMWFiZWE3MjE1ZTNmYzU5NjQ2ZWY3YTczZjk", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-04-11T15:11:09Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-04-11T15:11:09Z"}, "message": "c++: Tolerate cdtors returning this in constexpr\n\nOn targets that return this from cdtors, cxx_eval_call_expression may\nflag flowing off the end of a dtor.  That's preempted for ctors, and\navoided entirely when dtors return void, but when they return this,\nthe return value should be conceptually disregarded, without making\nroom for such internal ABI details to make a program ill-formed, as in\ng++.dg/cpp2a/constexpr-dtor12.C on arm-eabi.\n\n\nfor  gcc/cp/ChangeLog\n\n\t* constexpr.cc (cxx_eval_call_expression): Disregard dtor\n\tresult.", "tree": {"sha": "e328283de9045ba3cd21877efe8422873ff00e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e328283de9045ba3cd21877efe8422873ff00e65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ce08ecb15b2501abea7215e3fc59646ef7a73f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce08ecb15b2501abea7215e3fc59646ef7a73f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce08ecb15b2501abea7215e3fc59646ef7a73f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce08ecb15b2501abea7215e3fc59646ef7a73f9/comments", "author": null, "committer": null, "parents": [{"sha": "396a013a5857f85d878993eda32fb2df689bb8e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396a013a5857f85d878993eda32fb2df689bb8e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/396a013a5857f85d878993eda32fb2df689bb8e8"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "1ce1842430d03ec6297ef7afaeb4afaf83657e51", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce08ecb15b2501abea7215e3fc59646ef7a73f9/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce08ecb15b2501abea7215e3fc59646ef7a73f9/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=5ce08ecb15b2501abea7215e3fc59646ef7a73f9", "patch": "@@ -2889,7 +2889,8 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t  else\n \t    {\n \t      result = *ctx->global->values.get (res);\n-\t      if (result == NULL_TREE && !*non_constant_p)\n+\t      if (result == NULL_TREE && !*non_constant_p\n+\t\t  && !DECL_DESTRUCTOR_P (fun))\n \t\t{\n \t\t  if (!ctx->quiet)\n \t\t    error (\"%<constexpr%> call flows off the end \""}]}