{"sha": "8d3ece5d900e311a6b1548885a2535bd93fa86df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQzZWNlNWQ5MDBlMzExYTZiMTU0ODg4NWEyNTM1YmQ5M2ZhODZkZg==", "commit": {"author": {"name": "Sven de Marothy", "email": "sven@physto.se", "date": "2005-03-23T21:26:00Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-03-23T21:26:00Z"}, "message": "PR libgcj/2641, PR libgcj/9854, PR libgcj/14892, PR libgcj/18083,\n\n2005-03-23  Sven de Marothy  <sven@physto.se>\n\n\tPR libgcj/2641, PR libgcj/9854, PR libgcj/14892, PR libgcj/18083,\n\tPR libgcj/11085:\n\t* java/util/Calendar.java\n\t(set): Use starting day of week when one is needed if none is given.\n\t* java/text/SimpleDateFormat.java\n\t(parse): Handle 1-12 and 1-24 timestamps correctly.\n\t* java/util/GregorianCalendar.java\n\t(computeTime, computeFields): HOUR should be in 0-11 format.\n\t(nonLeniencyCheck): Adjust leniency checking to that fact.\n\t(getLinearDay): Should be private.\n\nFrom-SVN: r96951", "tree": {"sha": "fdb34ce03f86ab0625684dbe5615ad44586e2228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdb34ce03f86ab0625684dbe5615ad44586e2228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d3ece5d900e311a6b1548885a2535bd93fa86df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3ece5d900e311a6b1548885a2535bd93fa86df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3ece5d900e311a6b1548885a2535bd93fa86df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3ece5d900e311a6b1548885a2535bd93fa86df/comments", "author": null, "committer": null, "parents": [{"sha": "85c4f26a8651192648d1d4ce37009d838abe4152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c4f26a8651192648d1d4ce37009d838abe4152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c4f26a8651192648d1d4ce37009d838abe4152"}], "stats": {"total": 76, "additions": 54, "deletions": 22}, "files": [{"sha": "dc311113164d4d7e061565c0e68a2ab6b56a314c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3ece5d900e311a6b1548885a2535bd93fa86df/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3ece5d900e311a6b1548885a2535bd93fa86df/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8d3ece5d900e311a6b1548885a2535bd93fa86df", "patch": "@@ -1,3 +1,16 @@\n+2005-03-23  Sven de Marothy  <sven@physto.se>\n+\n+\tPR libgcj/2641, PR libgcj/9854, PR libgcj/14892, PR libgcj/18083,\n+\tPR libgcj/11085:\n+\t* java/util/Calendar.java\n+\t(set): Use starting day of week when one is needed if none is given.\n+\t* java/text/SimpleDateFormat.java\n+\t(parse): Handle 1-12 and 1-24 timestamps correctly.\n+\t* java/util/GregorianCalendar.java\n+\t(computeTime, computeFields): HOUR should be in 0-11 format.\n+\t(nonLeniencyCheck): Adjust leniency checking to that fact.\n+\t(getLinearDay): Should be private.\n+\n 2005-03-23  Tom Tromey  <tromey@redhat.com>\n  \n \t* include/jvm.h (GCJ_40_BC_ABI_VERSION): New define."}, {"sha": "190b4d624f4759efd537dd1254a731463001a633", "filename": "libjava/java/text/SimpleDateFormat.java", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3ece5d900e311a6b1548885a2535bd93fa86df/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3ece5d900e311a6b1548885a2535bd93fa86df/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java?ref=8d3ece5d900e311a6b1548885a2535bd93fa86df", "patch": "@@ -916,6 +916,8 @@ public Date parse (String dateStr, ParsePosition pos)\n \t    boolean is_numeric = true;\n \t    int offset = 0;\n \t    boolean maybe2DigitYear = false;\n+\t    boolean oneBasedHour = false;\n+\t    boolean oneBasedHourOfDay = false;\n \t    Integer simpleOffset;\n \t    String[] set1 = null;\n \t    String[] set2 = null;\n@@ -964,12 +966,14 @@ public Date parse (String dateStr, ParsePosition pos)\n \t\tbreak;\n \t      case 'h':\n \t\tcalendar_field = Calendar.HOUR;\n+\t\toneBasedHour = true;\n \t\tbreak;\n \t      case 'H':\n \t\tcalendar_field = Calendar.HOUR_OF_DAY;\n \t\tbreak;\n \t      case 'k':\n \t\tcalendar_field = Calendar.HOUR_OF_DAY;\n+\t\toneBasedHourOfDay = true;\n \t\tbreak;\n \t      case 'm':\n \t\tcalendar_field = Calendar.MINUTE;\n@@ -1108,6 +1112,14 @@ else if (set1 != null)\n \t\t  }\n \t      }\n \t    \n+\t    // Calendar uses 0-based hours. \n+\t    // I.e. 00:00 AM is midnight, not 12 AM or 24:00\n+\t    if (oneBasedHour && value == 12)\n+\t      value = 0;\n+\n+\t    if (oneBasedHourOfDay && value == 24)\n+\t      value = 0;\n+\t    \n \t    // Assign the value and move on.\n \t    calendar.set(calendar_field, value);\n \t  }"}, {"sha": "7faaeee43bc8235649c93a9314e7f06b13f3c835", "filename": "libjava/java/util/Calendar.java", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3ece5d900e311a6b1548885a2535bd93fa86df/libjava%2Fjava%2Futil%2FCalendar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3ece5d900e311a6b1548885a2535bd93fa86df/libjava%2Fjava%2Futil%2FCalendar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCalendar.java?ref=8d3ece5d900e311a6b1548885a2535bd93fa86df", "patch": "@@ -706,6 +706,8 @@ public void set(int field, int value)\n \tisSet[WEEK_OF_YEAR] = false;\n \tbreak;\n       case WEEK_OF_MONTH: // pattern 2\n+\tif (! isSet[DAY_OF_WEEK])\n+\t  fields[DAY_OF_WEEK] = getFirstDayOfWeek();\n \tisSet[YEAR] = true;\n \tisSet[MONTH] = true;\n \tisSet[DAY_OF_WEEK] = true;\n@@ -715,6 +717,8 @@ public void set(int field, int value)\n \tisSet[WEEK_OF_YEAR] = false;\n \tbreak;\n       case DAY_OF_WEEK_IN_MONTH: // pattern 3\n+\tif (! isSet[DAY_OF_WEEK])\n+\t  fields[DAY_OF_WEEK] = getFirstDayOfWeek();\n \tisSet[YEAR] = true;\n \tisSet[MONTH] = true;\n \tisSet[DAY_OF_WEEK] = true;\n@@ -733,6 +737,8 @@ public void set(int field, int value)\n \tisSet[DAY_OF_WEEK_IN_MONTH] = false;\n \tbreak;\n       case WEEK_OF_YEAR: // pattern 5\n+\tif (! isSet[DAY_OF_WEEK])\n+\t  fields[DAY_OF_WEEK] = getFirstDayOfWeek();\n \tisSet[YEAR] = true;\n \tisSet[DAY_OF_WEEK] = true;\n \tisSet[MONTH] = false;"}, {"sha": "d036cd620e8c92444b3dbbe1e640a61e7ecdd8e9", "filename": "libjava/java/util/GregorianCalendar.java", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3ece5d900e311a6b1548885a2535bd93fa86df/libjava%2Fjava%2Futil%2FGregorianCalendar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3ece5d900e311a6b1548885a2535bd93fa86df/libjava%2Fjava%2Futil%2FGregorianCalendar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FGregorianCalendar.java?ref=8d3ece5d900e311a6b1548885a2535bd93fa86df", "patch": "@@ -275,7 +275,6 @@ public GregorianCalendar(int year, int month, int day, int hour, int minute)\n    * Constructs a new GregorianCalendar representing midnight on the\n    * given date with the default time zone and locale.\n    *\n-   *\n    * @param year corresponds to the YEAR time field.\n    * @param month corresponds to the MONTH time field.\n    * @param day corresponds to the DAY time field.\n@@ -478,7 +477,7 @@ private void nonLeniencyCheck() throws IllegalArgumentException\n \n     if (isSet[AM_PM] && fields[AM_PM] != AM && fields[AM_PM] != PM)\n       throw new IllegalArgumentException(\"Illegal AM_PM.\");\n-    if (isSet[HOUR] && (fields[HOUR] < 0 || fields[HOUR] > 12))\n+    if (isSet[HOUR] && (fields[HOUR] < 0 || fields[HOUR] > 11))\n       throw new IllegalArgumentException(\"Illegal HOUR.\");\n     if (isSet[HOUR_OF_DAY]\n         && (fields[HOUR_OF_DAY] < 0 || fields[HOUR_OF_DAY] > 23))\n@@ -564,10 +563,18 @@ protected synchronized void computeTime()\n \t    // 3: YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK\n \t    if (isSet[DAY_OF_WEEK_IN_MONTH])\n \t      {\n+\t\tif (fields[DAY_OF_WEEK_IN_MONTH] < 0)\n+\t\t  {\n+\t\t    month++;\n+\t\t    first = getFirstDayOfMonth(year, month);\n+\t\t    day = 1 + 7 * (fields[DAY_OF_WEEK_IN_MONTH]);\n+\t\t  }\n+\t\telse\n+\t\t  day = 1 + 7 * (fields[DAY_OF_WEEK_IN_MONTH] - 1);\n+\n \t\tint offs = fields[DAY_OF_WEEK] - first;\n \t\tif (offs < 0)\n \t\t  offs += 7;\n-\t\tday = 1 + 7 * (fields[DAY_OF_WEEK_IN_MONTH] - 1);\n \t\tday += offs;\n \t      }\n \t    else\n@@ -584,7 +591,7 @@ protected synchronized void computeTime()\n \n \t\tday = offs + 7 * (fields[WEEK_OF_MONTH] - 1);\n \t\toffs = fields[DAY_OF_WEEK] - getFirstDayOfWeek();\n-\t\tif (offs < 0)\n+\t\tif (offs <= 0)\n \t\t  offs += 7;\n \t\tday += offs;\n \t      }\n@@ -602,11 +609,7 @@ protected synchronized void computeTime()\n       {\n \thour = fields[HOUR];\n \tif (fields[AM_PM] == PM)\n-\t  if (hour != 12) /* not Noon */\n-\t    hour += 12;\n-\t/* Fix the problem of the status of 12:00 AM (midnight). */\n-\tif (fields[AM_PM] == AM && hour == 12)\n-\t  hour = 0;\n+\t  hour += 12;\n       }\n     else\n       hour = fields[HOUR_OF_DAY];\n@@ -709,15 +712,15 @@ protected synchronized void computeTime()\n    * @param gregorian <code>true</code>, if we should use the Gregorian rules.\n    * @return the days since the epoch, may be negative.\n    */\n-   public long getLinearDay(int year, int dayOfYear, boolean gregorian)\n-    {\n-     // The 13 is the number of days, that were omitted in the Gregorian\n-     // Calender until the epoch.\n-     // We shift right by 2 instead of dividing by 4, to get correct\n-     // results for negative years (and this is even more efficient).\n-     long julianDay = (year - 1) * 365L + ((year - 1) >> 2) + (dayOfYear - 1)\n-                      - EPOCH_DAYS; // gregorian days from 1 to epoch.\n- \n+  private long getLinearDay(int year, int dayOfYear, boolean gregorian)\n+  {\n+    // The 13 is the number of days, that were omitted in the Gregorian\n+    // Calender until the epoch.\n+    // We shift right by 2 instead of dividing by 4, to get correct\n+    // results for negative years (and this is even more efficient).\n+    long julianDay = (year - 1) * 365L + ((year - 1) >> 2) + (dayOfYear - 1)\n+                     - EPOCH_DAYS; // gregorian days from 1 to epoch.\n+\n     if (gregorian)\n       {\n \t// subtract the days that are missing in gregorian calendar\n@@ -858,7 +861,7 @@ protected synchronized void computeFields()\n     int hourOfDay = millisInDay / (60 * 60 * 1000);\n     fields[AM_PM] = (hourOfDay < 12) ? AM : PM;\n     int hour = hourOfDay % 12;\n-    fields[HOUR] = (hour == 0) ? 12 : hour;\n+    fields[HOUR] = hour;\n     fields[HOUR_OF_DAY] = hourOfDay;\n     millisInDay %= (60 * 60 * 1000);\n     fields[MINUTE] = millisInDay / (60 * 1000);\n@@ -925,9 +928,7 @@ public void add(int field, int amount)\n \t  }\n \tint maxDay = getActualMaximum(DAY_OF_MONTH);\n \tif (fields[DAY_OF_MONTH] > maxDay)\n-\t  {\n-\t    fields[DAY_OF_MONTH] = maxDay;\n-\t  }\n+\t  fields[DAY_OF_MONTH] = maxDay;\n \tset(YEAR, fields[YEAR]);\n \tset(MONTH, fields[MONTH]);\n \tbreak;"}]}