{"sha": "f1d8a2d9bc3a817309c299147ff85e5091b6693e", "node_id": "C_kwDOANBUbNoAKGYxZDhhMmQ5YmMzYTgxNzMwOWMyOTkxNDdmZjg1ZTUwOTFiNjY5M2U", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-27T11:48:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-05T11:19:40Z"}, "message": "Embed real_value into REAL_CST\n\nThe following removes the indirection to real_value from REAL_CST\nwhich doesn't seem to serve any useful purpose.  Any sharing can\nbe achieved by sharing the actual REAL_CST (which is what usually\nhappens when copying trees) and sharing of real_value amongst\ndifferent REAL_CST doesn't happen as far as I can see and would\nonly lead to further issues like mismatching type and real_value.\n\n2022-04-27  Richard Biener  <rguenther@suse.de>\n\n\t* tree-core.h (tree_real_cst::real_cst_ptr): Remove pointer\n\tto real_value field.\n\t(tree_real_cst::value): Add real_value field.\n\t* tree.h (TREE_REAL_CST_PTR): Adjust.\n\t* tree.cc (build_real): Remove separate allocation.\n\t* tree-streamer-in.cc (unpack_ts_real_cst_value_fields):\n\tLikewise.\n\ngcc/cp/\n\t* module.cc (trees_in::core_vals): Remove separate allocation\n\tfor REAL_CST.", "tree": {"sha": "8b2d00e5ce2dddc228aad8c500d501a3fa2ddf73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b2d00e5ce2dddc228aad8c500d501a3fa2ddf73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1d8a2d9bc3a817309c299147ff85e5091b6693e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d8a2d9bc3a817309c299147ff85e5091b6693e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1d8a2d9bc3a817309c299147ff85e5091b6693e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d8a2d9bc3a817309c299147ff85e5091b6693e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2a0d2e6f636c6ad7da44256b6bea7470d895100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a0d2e6f636c6ad7da44256b6bea7470d895100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a0d2e6f636c6ad7da44256b6bea7470d895100"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "18dabfcc9acc6e2c7b860c3d0f783d2c88a29790", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d8a2d9bc3a817309c299147ff85e5091b6693e/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d8a2d9bc3a817309c299147ff85e5091b6693e/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=f1d8a2d9bc3a817309c299147ff85e5091b6693e", "patch": "@@ -6468,9 +6468,7 @@ trees_in::core_vals (tree t)\n \n     case REAL_CST:\n       if (const void *bytes = buf (sizeof (real_value)))\n-\tTREE_REAL_CST_PTR (t)\n-\t  = reinterpret_cast<real_value *> (memcpy (ggc_alloc<real_value> (),\n-\t\t\t\t\t\t    bytes, sizeof (real_value)));\n+\tmemcpy (TREE_REAL_CST_PTR (t), bytes, sizeof (real_value));\n       break;\n \n     case STRING_CST:"}, {"sha": "c79b8b28da3288f934817ade65996291dff73285", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d8a2d9bc3a817309c299147ff85e5091b6693e/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d8a2d9bc3a817309c299147ff85e5091b6693e/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=f1d8a2d9bc3a817309c299147ff85e5091b6693e", "patch": "@@ -1461,7 +1461,7 @@ struct GTY(()) tree_int_cst {\n \n struct GTY(()) tree_real_cst {\n   struct tree_typed typed;\n-  struct real_value * real_cst_ptr;\n+  struct real_value value;\n };\n \n struct GTY(()) tree_fixed_cst {"}, {"sha": "196f19c759f2f878b12751bcd6751aff24e16ccc", "filename": "gcc/tree-streamer-in.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d8a2d9bc3a817309c299147ff85e5091b6693e/gcc%2Ftree-streamer-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d8a2d9bc3a817309c299147ff85e5091b6693e/gcc%2Ftree-streamer-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.cc?ref=f1d8a2d9bc3a817309c299147ff85e5091b6693e", "patch": "@@ -190,7 +190,6 @@ unpack_ts_real_cst_value_fields (struct bitpack_d *bp, tree expr)\n {\n   unsigned i;\n   REAL_VALUE_TYPE r;\n-  REAL_VALUE_TYPE *rp;\n \n   /* Clear all bits of the real value type so that we can later do\n      bitwise comparisons to see if two values are the same.  */\n@@ -204,9 +203,7 @@ unpack_ts_real_cst_value_fields (struct bitpack_d *bp, tree expr)\n   for (i = 0; i < SIGSZ; i++)\n     r.sig[i] = (unsigned long) bp_unpack_value (bp, HOST_BITS_PER_LONG);\n \n-  rp = ggc_alloc<real_value> ();\n-  memcpy (rp, &r, sizeof (REAL_VALUE_TYPE));\n-  TREE_REAL_CST_PTR (expr) = rp;\n+  memcpy (TREE_REAL_CST_PTR (expr), &r, sizeof (REAL_VALUE_TYPE));\n }\n \n "}, {"sha": "5e8876d2b38226b4a3715c121e3d3a67b9c55c93", "filename": "gcc/tree.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d8a2d9bc3a817309c299147ff85e5091b6693e/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d8a2d9bc3a817309c299147ff85e5091b6693e/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=f1d8a2d9bc3a817309c299147ff85e5091b6693e", "patch": "@@ -2381,7 +2381,6 @@ tree\n build_real (tree type, REAL_VALUE_TYPE d)\n {\n   tree v;\n-  REAL_VALUE_TYPE *dp;\n   int overflow = 0;\n \n   /* dconst{1,2,m1,half} are used in various places in\n@@ -2408,11 +2407,8 @@ build_real (tree type, REAL_VALUE_TYPE d)\n      Consider doing it via real_convert now.  */\n \n   v = make_node (REAL_CST);\n-  dp = ggc_alloc<real_value> ();\n-  memcpy (dp, &d, sizeof (REAL_VALUE_TYPE));\n-\n   TREE_TYPE (v) = type;\n-  TREE_REAL_CST_PTR (v) = dp;\n+  memcpy (TREE_REAL_CST_PTR (v), &d, sizeof (REAL_VALUE_TYPE));\n   TREE_OVERFLOW (v) = overflow;\n   return v;\n }"}, {"sha": "82eb8ba39d264fa7ebefb3a9de4443ea801bf4d9", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d8a2d9bc3a817309c299147ff85e5091b6693e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d8a2d9bc3a817309c299147ff85e5091b6693e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f1d8a2d9bc3a817309c299147ff85e5091b6693e", "patch": "@@ -1048,7 +1048,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define POLY_INT_CST_COEFF(NODE, I) \\\n   (POLY_INT_CST_CHECK (NODE)->poly_int_cst.coeffs[I])\n \n-#define TREE_REAL_CST_PTR(NODE) (REAL_CST_CHECK (NODE)->real_cst.real_cst_ptr)\n+#define TREE_REAL_CST_PTR(NODE) (&REAL_CST_CHECK (NODE)->real_cst.value)\n #define TREE_REAL_CST(NODE) (*TREE_REAL_CST_PTR (NODE))\n \n #define TREE_FIXED_CST_PTR(NODE) \\"}]}