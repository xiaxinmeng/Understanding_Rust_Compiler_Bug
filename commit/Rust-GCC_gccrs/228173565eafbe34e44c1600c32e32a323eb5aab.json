{"sha": "228173565eafbe34e44c1600c32e32a323eb5aab", "node_id": "C_kwDOANBUbNoAKDIyODE3MzU2NWVhZmJlMzRlNDRjMTYwMGMzMmUzMmEzMjNlYjVhYWI", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2021-12-22T11:46:07Z"}, "committer": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2021-12-22T11:46:07Z"}, "message": "Fortran: allow __float128 on targets where long double is not REAL(KIND=10)\n\nThe logic for detection of REAL(KIND=16) in kinds-override.h made\nassumptions:\n\n    -- if real(kind=10) exists, i.e. if HAVE_GFC_REAL_10 is defined,\n       then it is necessarily the \"long double\" type\n    -- if real(kind=16) exists, then:\n       * if HAVE_GFC_REAL_10, real(kind=16) is \"__float128\"\n       * otherwise, real(kind=16) is \"long double\"\n\nThis may not always be true. Take the aarch64-apple-darwin port,\nit has double == long double == binary64, and __float128 == binary128.\n\nWe already have more fine-grained logic in the mk-kinds-h.sh script,\nwhere we actually check the Fortran kind corresponding to C\u2019s long\ndouble. So let's use it, and emit the GFC_REAL_16_IS_FLOAT128 /\nGFC_REAL_16_IS_LONG_DOUBLE macros there.\n\nlibgfortran/ChangeLog:\n\n\t* kinds-override.h: Move GFC_REAL_16_IS_* macros...\n\t* mk-kinds-h.sh: ... here.", "tree": {"sha": "ff4d90bde8b993288a4d8f85ef0bbe866ad95b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff4d90bde8b993288a4d8f85ef0bbe866ad95b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/228173565eafbe34e44c1600c32e32a323eb5aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228173565eafbe34e44c1600c32e32a323eb5aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/228173565eafbe34e44c1600c32e32a323eb5aab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228173565eafbe34e44c1600c32e32a323eb5aab/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63eb073efbe6dfbf682b687dda2940ab027b474d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63eb073efbe6dfbf682b687dda2940ab027b474d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63eb073efbe6dfbf682b687dda2940ab027b474d"}], "stats": {"total": 29, "additions": 9, "deletions": 20}, "files": [{"sha": "5f7840b0c8982e2bbf30ee93e86b33c80b3a8202", "filename": "libgfortran/kinds-override.h", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228173565eafbe34e44c1600c32e32a323eb5aab/libgfortran%2Fkinds-override.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228173565eafbe34e44c1600c32e32a323eb5aab/libgfortran%2Fkinds-override.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fkinds-override.h?ref=228173565eafbe34e44c1600c32e32a323eb5aab", "patch": "@@ -23,24 +23,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n \n-/* What are the C types corresponding to the real(kind=10) and\n-   real(kind=16) types? We currently rely on the following assumptions:\n-     -- if real(kind=10) exists, i.e. if HAVE_GFC_REAL_10 is defined,\n-        then it is necessarily the \"long double\" type\n-     -- if real(kind=16) exists, then:\n-         * if HAVE_GFC_REAL_10, real(kind=16) is \"__float128\"\n-\t * otherwise, real(kind=16) is \"long double\"\n-   To allow to change this in the future, we create the\n-   GFC_REAL_16_IS_FLOAT128 macro that is used throughout libgfortran.  */\n-\n-#if defined(HAVE_GFC_REAL_16)\n-# if defined(HAVE_GFC_REAL_10)\n-#  define GFC_REAL_16_IS_FLOAT128\n-#  if !defined(HAVE_FLOAT128)\n-#   error \"Where has __float128 gone?\"\n-#  endif\n-# else\n-#  define GFC_REAL_16_IS_LONG_DOUBLE\n-# endif\n+/* Ensure that TFmode is available under.  */\n+\n+#if defined(GFC_REAL_16_IS_FLOAT128) && !defined(HAVE_FLOAT128)\n+# error \"Where has __float128 gone?\"\n #endif\n "}, {"sha": "572878ce8912b0a0bb1308bc5fe097a2ff0d77f6", "filename": "libgfortran/mk-kinds-h.sh", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228173565eafbe34e44c1600c32e32a323eb5aab/libgfortran%2Fmk-kinds-h.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228173565eafbe34e44c1600c32e32a323eb5aab/libgfortran%2Fmk-kinds-h.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fmk-kinds-h.sh?ref=228173565eafbe34e44c1600c32e32a323eb5aab", "patch": "@@ -64,15 +64,19 @@ for k in $possible_real_kinds; do\n     case $k in\n       4) ctype=\"float\" ; cplxtype=\"complex float\" ; suffix=\"f\" ;;\n       8) ctype=\"double\" ; cplxtype=\"complex double\" ; suffix=\"\" ;;\n+      # If we have a REAL(KIND=10), it is always long double\n       10) ctype=\"long double\" ; cplxtype=\"complex long double\" ; suffix=\"l\" ;;\n-      16) if [ $long_double_kind -eq 10 ]; then\n+      # If we have a REAL(KIND=16), it is either long double or __float128\n+      16) if [ $long_double_kind -ne 16 ]; then\n \t    ctype=\"__float128\"\n \t    cplxtype=\"_Complex float __attribute__((mode(TC)))\"\n \t    suffix=\"q\"\n+\t    echo \"#define GFC_REAL_16_IS_FLOAT128\"\n \t  else\n \t    ctype=\"long double\"\n \t    cplxtype=\"complex long double\"\n \t    suffix=\"l\"\n+\t    echo \"#define GFC_REAL_16_IS_LONG_DOUBLE\"\n \t  fi ;;\n       *) echo \"$0: Unknown type\" >&2 ; exit 1 ;;\n     esac"}]}