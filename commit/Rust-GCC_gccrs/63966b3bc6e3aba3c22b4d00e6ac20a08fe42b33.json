{"sha": "63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM5NjZiM2JjNmUzYWJhM2MyMmI0ZDAwZTZhYzIwYTA4ZmU0MmIzMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-07-26T05:48:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-07-26T05:48:39Z"}, "message": "alpha.h (EXPAND_BUILTIN_SAVEREGS): Delete.\n\n        * alpha.h (EXPAND_BUILTIN_SAVEREGS): Delete.\n        (BUILD_VA_LIST_TYPE): New.\n        (EXPAND_BUILTIN_VA_START): New.\n        (EXPAND_BUILTIN_VA_ARG): New.\n        * alpha.c (alpha_builtin_saveregs): Delete.\n        (alpha_build_va_list): New.\n        (alpha_va_start): New.\n        (alpha_va_arg): New.\n\nFrom-SVN: r28252", "tree": {"sha": "9ba17e95b3a1e574ccffe879a874bd7ffd96e956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ba17e95b3a1e574ccffe879a874bd7ffd96e956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33/comments", "author": null, "committer": null, "parents": [{"sha": "820964cd73487046952a206f3fac9bb3f23b3858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/820964cd73487046952a206f3fac9bb3f23b3858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/820964cd73487046952a206f3fac9bb3f23b3858"}], "stats": {"total": 245, "additions": 150, "deletions": 95}, "files": [{"sha": "1dfcd6cf5e0ab43fd4555f6f2dada8a9a4797c72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33", "patch": "@@ -1,3 +1,14 @@\n+Sun Jul 25 22:45:55 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.h (EXPAND_BUILTIN_SAVEREGS): Delete.\n+\t(BUILD_VA_LIST_TYPE): New.\n+\t(EXPAND_BUILTIN_VA_START): New.\n+\t(EXPAND_BUILTIN_VA_ARG): New.\n+\t* alpha.c (alpha_builtin_saveregs): Delete.\n+\t(alpha_build_va_list): New.\n+\t(alpha_va_start): New.\n+\t(alpha_va_arg): New.\n+\n Sun Jul 25 21:40:33 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.texi: More changes related to list conversion."}, {"sha": "9f07b21df061167a8325720a95eb362a91193e88", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 112, "deletions": 81, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33", "patch": "@@ -3083,101 +3083,132 @@ alpha_initialize_trampoline (tramp, fnaddr, cxt, fnofs, cxtofs, jmpofs)\n     emit_insn (gen_imb ());\n }\n \f\n-/* Do what is necessary for `va_start'.  The argument is ignored;\n-   We look at the current function to determine if stdarg or varargs\n-   is used and fill in an initial va_list.  A pointer to this constructor\n-   is returned.  */\n-\n-struct rtx_def *\n-alpha_builtin_saveregs (arglist)\n-     tree arglist ATTRIBUTE_UNUSED;\n+tree\n+alpha_build_va_list ()\n {\n-  rtx block, addr, dest, argsize;\n-  tree fntype = TREE_TYPE (current_function_decl);\n-  int stdarg = (TYPE_ARG_TYPES (fntype) != 0\n-\t\t&& (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-\t\t    != void_type_node));\n+  tree base, ofs, record;\n+\n+  if (TARGET_OPEN_VMS)\n+    return ptr_type_node;\n \n-  /* Compute the current position into the args, taking into account\n-     both registers and memory.  Both of these are already included in\n-     NUM_ARGS.  */\n+  record = make_node (RECORD_TYPE);\n+  /* C++? SET_IS_AGGR_TYPE (record, 1); */\n \n-  argsize = GEN_INT (NUM_ARGS * UNITS_PER_WORD);\n+  ofs = build_decl (FIELD_DECL, get_identifier (\"__offset\"),\n+\t\t    integer_type_node);\n+  DECL_FIELD_CONTEXT (ofs) = record;\n \n-  /* For Unix, SETUP_INCOMING_VARARGS moves the starting address base up by 48,\n-     storing fp arg registers in the first 48 bytes, and the integer arg\n-     registers in the next 48 bytes.  This is only done, however, if any\n-     integer registers need to be stored.\n+  base = build_decl (FIELD_DECL, get_identifier (\"__base\"),\n+\t\t     ptr_type_node);\n+  DECL_FIELD_CONTEXT (base) = record;\n+  TREE_CHAIN (base) = ofs;\n \n-     If no integer registers need be stored, then we must subtract 48 in\n-     order to account for the integer arg registers which are counted in\n-     argsize above, but which are not actually stored on the stack.  */\n+  TYPE_FIELDS (record) = base;\n+  layout_type (record);\n+\n+  return record;\n+}\n+\n+void\n+alpha_va_start (stdarg_p, valist, nextarg)\n+     int stdarg_p;\n+     tree valist;\n+     rtx nextarg ATTRIBUTE_UNUSED;\n+{\n+  HOST_WIDE_INT offset;\n+  tree t, offset_field, base_field;\n \n   if (TARGET_OPEN_VMS)\n-    addr = plus_constant (virtual_incoming_args_rtx,\n-\t\t\t  NUM_ARGS <= 5 + stdarg\n-\t\t\t  ? UNITS_PER_WORD : - 6 * UNITS_PER_WORD);\n+    std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+\n+  /* For Unix, SETUP_INCOMING_VARARGS moves the starting address base\n+     up by 48, storing fp arg registers in the first 48 bytes, and the\n+     integer arg registers in the next 48 bytes.  This is only done,\n+     however, if any integer registers need to be stored.\n+\n+     If no integer registers need be stored, then we must subtract 48\n+     in order to account for the integer arg registers which are counted\n+     in argsize above, but which are not actually stored on the stack.  */\n+\n+  if (NUM_ARGS <= 5 + stdarg_p)\n+    offset = 6 * UNITS_PER_WORD;\n   else\n-    addr = (NUM_ARGS <= 5 + stdarg\n-\t    ? plus_constant (virtual_incoming_args_rtx,\n-\t\t\t     6 * UNITS_PER_WORD)\n-\t    : plus_constant (virtual_incoming_args_rtx,\n-\t\t\t     - (6 * UNITS_PER_WORD)));\n-\n-  /* For VMS, we include the argsize, while on Unix, it's handled as\n-     a separate field.  */\n+    offset = -6 * UNITS_PER_WORD;\n+\n+  base_field = TYPE_FIELDS (TREE_TYPE (valist));\n+  offset_field = TREE_CHAIN (base_field);\n+\n+  base_field = build (COMPONENT_REF, TREE_TYPE (base_field),\n+\t\t      valist, base_field);\n+  offset_field = build (COMPONENT_REF, TREE_TYPE (offset_field),\n+\t\t\tvalist, offset_field);\n+\n+  t = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n+  t = build (PLUS_EXPR, ptr_type_node, t, build_int_2 (offset, 0));\n+  t = build (MODIFY_EXPR, TREE_TYPE (base_field), base_field, t);\n+  TREE_SIDE_EFFECTS (t) = 1;\n+  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  t = build_int_2 (NUM_ARGS*UNITS_PER_WORD, 0);\n+  t = build (MODIFY_EXPR, TREE_TYPE (offset_field), offset_field, t);\n+  TREE_SIDE_EFFECTS (t) = 1;\n+  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+}\n+\n+rtx\n+alpha_va_arg (valist, type)\n+     tree valist, type;\n+{\n+  HOST_WIDE_INT tsize;\n+  rtx addr;\n+  tree t;\n+  tree offset_field, base_field, addr_tree, addend;\n+  tree wide_type, wide_ofs;\n+\n   if (TARGET_OPEN_VMS)\n-    addr = plus_constant (addr, INTVAL (argsize));\n+    return std_expand_builtin_va_arg (valist, type);\n \n-  addr = force_operand (addr, NULL_RTX);\n+  tsize = ((TREE_INT_CST_LOW (TYPE_SIZE (type)) / BITS_PER_UNIT + 7) / 8) * 8;\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  addr = convert_memory_address (ptr_mode, addr);\n-#endif\n+  base_field = TYPE_FIELDS (TREE_TYPE (valist));\n+  offset_field = TREE_CHAIN (base_field);\n \n-  if (TARGET_OPEN_VMS)\n-    return addr;\n-  else\n+  base_field = build (COMPONENT_REF, TREE_TYPE (base_field),\n+\t\t      valist, base_field);\n+  offset_field = build (COMPONENT_REF, TREE_TYPE (offset_field),\n+\t\t\tvalist, offset_field);\n+\n+  wide_type = make_signed_type (64);\n+  wide_ofs = save_expr (build1 (CONVERT_EXPR, wide_type, offset_field));\n+\n+  addend = wide_ofs;\n+  if (FLOAT_TYPE_P (type))\n     {\n-      /* Allocate the va_list constructor */\n-      block = assign_stack_local (BLKmode, 2 * UNITS_PER_WORD, BITS_PER_WORD);\n-      RTX_UNCHANGING_P (block) = 1;\n-      RTX_UNCHANGING_P (XEXP (block, 0)) = 1;\n-\n-      /* Store the address of the first integer register in the __base\n-\t member.  */\n-\n-      dest = change_address (block, ptr_mode, XEXP (block, 0));\n-      emit_move_insn (dest, addr);\n-\n-      if (current_function_check_memory_usage)\n-\temit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n-\t\t\t   dest, ptr_mode,\n-\t\t\t   GEN_INT (GET_MODE_SIZE (ptr_mode)),\n-\t\t\t   TYPE_MODE (sizetype),\n-\t\t\t   GEN_INT (MEMORY_USE_RW), \n-\t\t\t   TYPE_MODE (integer_type_node));\n-  \n-      /* Store the argsize as the __va_offset member.  */\n-      dest = change_address (block, TYPE_MODE (integer_type_node),\n-\t\t\t     plus_constant (XEXP (block, 0),\n-\t\t\t\t\t    POINTER_SIZE/BITS_PER_UNIT));\n-      emit_move_insn (dest, argsize);\n-\n-      if (current_function_check_memory_usage)\n-\temit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,\n-\t\t\t   dest, ptr_mode,\n-\t\t\t   GEN_INT (GET_MODE_SIZE\n-\t\t\t\t    (TYPE_MODE (integer_type_node))),\n-\t\t\t   TYPE_MODE (sizetype),\n-\t\t\t   GEN_INT (MEMORY_USE_RW),\n-\t\t\t   TYPE_MODE (integer_type_node));\n-\n-      /* Return the address of the va_list constructor, but don't put it in a\n-\t register.  Doing so would fail when not optimizing and produce worse\n-\t code when optimizing.  */\n-      return XEXP (block, 0);\n+      tree fpaddend, cond;\n+\n+      fpaddend = fold (build (PLUS_EXPR, TREE_TYPE (addend),\n+\t\t\t      addend, build_int_2 (-6*8, 0)));\n+\n+      cond = fold (build (LT_EXPR, integer_type_node,\n+\t\t\t  wide_ofs, build_int_2 (6*8, 0)));\n+\n+      addend = fold (build (COND_EXPR, TREE_TYPE (addend), cond,\n+\t\t\t    fpaddend, addend));\n     }\n+\n+  addr_tree = build (PLUS_EXPR, TREE_TYPE (base_field),\n+\t\t     base_field, addend);\n+\n+  addr = expand_expr (addr_tree, NULL_RTX, Pmode, EXPAND_NORMAL);\n+  addr = copy_to_reg (addr);\n+\n+  t = build (MODIFY_EXPR, TREE_TYPE (offset_field), offset_field,\n+\t     build (PLUS_EXPR, TREE_TYPE (offset_field), \n+\t\t    offset_field, build_int_2 (tsize, 0)));\n+  TREE_SIDE_EFFECTS (t) = 1;\n+  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  return addr;\n }\n \f\n /* This page contains routines that are used to determine what the function"}, {"sha": "5499edb66db9d3492e464d1410eaefb2a18443db", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=63966b3bc6e3aba3c22b4d00e6ac20a08fe42b33", "patch": "@@ -1161,19 +1161,22 @@ extern int alpha_memory_latency;\n     {\t\t\t\t\t\t\t\t\t\\\n       if (! (NO_RTL))\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n+\t  rtx tmp; int set = get_varargs_alias_set ();\t\t\t\\\n+\t  tmp = gen_rtx_MEM (BLKmode,\t\t\t\t\t\\\n+\t\t             plus_constant (virtual_incoming_args_rtx,\t\\\n+\t\t\t\t            ((CUM) + 6)* UNITS_PER_WORD)); \\\n+\t  MEM_ALIAS_SET (tmp) = set;\t\t\t\t\t\\\n \t  move_block_from_reg\t\t\t\t\t\t\\\n-\t    (16 + CUM,\t\t\t\t\t\t\t\\\n-\t     gen_rtx (MEM, BLKmode,\t\t\t\t\t\\\n-\t\t      plus_constant (virtual_incoming_args_rtx,\t\t\\\n-\t\t\t\t     ((CUM) + 6)* UNITS_PER_WORD)),\t\\\n+\t    (16 + CUM, tmp,\t\t\t\t\t\t\\\n \t     6 - (CUM), (6 - (CUM)) * UNITS_PER_WORD);\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  tmp = gen_rtx_MEM (BLKmode,\t\t\t\t\t\\\n+\t\t             plus_constant (virtual_incoming_args_rtx,\t\\\n+\t\t\t\t            (CUM) * UNITS_PER_WORD));\t\\\n+\t  MEM_ALIAS_SET (tmp) = set;\t\t\t\t\t\\\n \t  move_block_from_reg\t\t\t\t\t\t\\\n-\t    (16 + (TARGET_FPREGS ? 32 : 0) + CUM,\t\t\t\\\n-\t     gen_rtx (MEM, BLKmode,\t\t\t\t\t\\\n-\t\t      plus_constant (virtual_incoming_args_rtx,\t\t\\\n-\t\t\t\t     (CUM) * UNITS_PER_WORD)),\t\t\\\n+\t    (16 + (TARGET_FPREGS ? 32 : 0) + CUM, tmp,\t\t\t\\\n \t     6 - (CUM), (6 - (CUM)) * UNITS_PER_WORD);\t\t\t\\\n-\t   emit_insn (gen_blockage ());\t\t\t\t\t\\\n \t }\t\t\t\t\t\t\t\t\\\n       PRETEND_SIZE = 12 * UNITS_PER_WORD;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -1189,11 +1192,6 @@ extern struct rtx_def *alpha_emit_set_long_const ();\n extern struct rtx_def *alpha_emit_conditional_branch ();\n extern struct rtx_def *alpha_emit_conditional_move ();\n \n-/* Generate necessary RTL for __builtin_saveregs().\n-   ARGLIST is the argument list; see expr.c.  */\n-extern struct rtx_def *alpha_builtin_saveregs ();\n-#define EXPAND_BUILTIN_SAVEREGS(ARGLIST) alpha_builtin_saveregs (ARGLIST)\n-\n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  Note that we can't use \"rtx\" here\n    since it hasn't been defined!  */\n@@ -2348,6 +2346,18 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"reg_not_elim_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"reg_no_subreg_operand\", {REG}},\n \f\n+/* Define the `__builtin_va_list' type for the ABI.  */\n+#define BUILD_VA_LIST_TYPE(VALIST) \\\n+  (VALIST) = alpha_build_va_list ()\n+\n+/* Implement `va_start' for varargs and stdarg.  */\n+#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n+  alpha_va_start (stdarg, valist, nextarg)\n+\n+/* Implement `va_arg'.  */\n+#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n+  alpha_va_arg (valist, type)\n+\f\n /* Tell collect that the object format is ECOFF.  */\n #define OBJECT_FORMAT_COFF\n #define EXTENDED_COFF\n@@ -2548,3 +2558,6 @@ extern int alpha_expand_block_move ();\n extern int alpha_expand_block_clear ();\n extern void alpha_expand_prologue ();\n extern void alpha_expand_epilogue ();\n+extern union tree_node *alpha_build_va_list ();\n+extern void alpha_va_start ();\n+extern struct rtx_def *alpha_va_arg ();"}]}