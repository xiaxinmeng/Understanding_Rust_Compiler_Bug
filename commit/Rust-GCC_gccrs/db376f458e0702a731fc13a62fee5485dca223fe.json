{"sha": "db376f458e0702a731fc13a62fee5485dca223fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIzNzZmNDU4ZTA3MDJhNzMxZmMxM2E2MmZlZTU0ODVkY2EyMjNmZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-22T17:31:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-08-22T17:31:02Z"}, "message": "c-parser.c (c_parser_declaration_or_fndef): Set DECL_ARGUMENTS of a FUNCTION_DECL to the right value in the presence of...\n\n\t* c-parser.c (c_parser_declaration_or_fndef): Set DECL_ARGUMENTS of a\n\tFUNCTION_DECL to the right value in the presence of nested declarators.\n\nFrom-SVN: r274828", "tree": {"sha": "135da187fcbccffdbb6f1cb7c51166f3ce5d2cb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/135da187fcbccffdbb6f1cb7c51166f3ce5d2cb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db376f458e0702a731fc13a62fee5485dca223fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db376f458e0702a731fc13a62fee5485dca223fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db376f458e0702a731fc13a62fee5485dca223fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db376f458e0702a731fc13a62fee5485dca223fe/comments", "author": null, "committer": null, "parents": [{"sha": "943766d37ae4131aa6cbf9e0b2a660ffea3482a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943766d37ae4131aa6cbf9e0b2a660ffea3482a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943766d37ae4131aa6cbf9e0b2a660ffea3482a8"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "0b3dc74f50f87f66e457b4545cb57a8f6eef7732", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db376f458e0702a731fc13a62fee5485dca223fe/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db376f458e0702a731fc13a62fee5485dca223fe/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=db376f458e0702a731fc13a62fee5485dca223fe", "patch": "@@ -1,3 +1,8 @@\n+2019-08-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-parser.c (c_parser_declaration_or_fndef): Set DECL_ARGUMENTS of a\n+\tFUNCTION_DECL to the right value in the presence of nested declarators.\n+\n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/91421"}, {"sha": "7397f536032e643dd75ffc0017a4c35141379f7c", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db376f458e0702a731fc13a62fee5485dca223fe/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db376f458e0702a731fc13a62fee5485dca223fe/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=db376f458e0702a731fc13a62fee5485dca223fe", "patch": "@@ -2161,10 +2161,41 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t\t\t\t    all_prefix_attrs));\n \t      if (d\n \t\t  && TREE_CODE (d) == FUNCTION_DECL\n-\t\t  && declarator->kind == cdk_function\n \t\t  && DECL_ARGUMENTS (d) == NULL_TREE\n \t\t  && DECL_INITIAL (d) == NULL_TREE)\n-\t\tDECL_ARGUMENTS (d) = declarator->u.arg_info->parms;\n+\t\t{\n+\t\t  /* Find the innermost declarator that is neither cdk_id\n+\t\t     nor cdk_attrs.  */\n+\t\t  const struct c_declarator *decl = declarator;\n+\t\t  const struct c_declarator *last_non_id_attrs = NULL;\n+\n+\t\t  while (decl)\n+\t\t    switch (decl->kind)\n+\t\t      {\n+\t\t      case cdk_array:\n+\t\t      case cdk_function:\n+\t\t      case cdk_pointer:\n+\t\t\tlast_non_id_attrs = decl;\n+\t\t\tdecl = decl->declarator;\n+\t\t\tbreak;\n+\n+\t\t      case cdk_attrs:\n+\t\t\tdecl = decl->declarator;\n+\t\t\tbreak;\n+\n+\t\t      case cdk_id:\n+\t\t\tdecl = 0;\n+\t\t\tbreak;\n+\n+\t\t      default:\n+\t\t\tgcc_unreachable ();\n+\t\t      }\n+\n+\t\t  /* If it exists and is cdk_function, use its parameters.  */\n+\t\t  if (last_non_id_attrs\n+\t\t      && last_non_id_attrs->kind == cdk_function)\n+\t\t    DECL_ARGUMENTS (d) = last_non_id_attrs->u.arg_info->parms;\n+\t\t}\n \t      if (omp_declare_simd_clauses.exists ())\n \t\t{\n \t\t  tree parms = NULL_TREE;"}, {"sha": "f8a806578ef222a8ca47c29a5e0a340d887706a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db376f458e0702a731fc13a62fee5485dca223fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db376f458e0702a731fc13a62fee5485dca223fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db376f458e0702a731fc13a62fee5485dca223fe", "patch": "@@ -1,3 +1,7 @@\n+2019-08-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-c++-common/dump-ada-spec-15.c: Check that the parameters are named.\n+\n 2019-08-22  Kyrylo Tkachov <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/acle/crc_hf_1.c: New test."}, {"sha": "c51c3e2dd0b783b0725f0b42e30ef4b6c7979d7a", "filename": "gcc/testsuite/c-c++-common/dump-ada-spec-15.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db376f458e0702a731fc13a62fee5485dca223fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db376f458e0702a731fc13a62fee5485dca223fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-15.c?ref=db376f458e0702a731fc13a62fee5485dca223fe", "patch": "@@ -3,4 +3,6 @@\n \n extern void (*signal (int __sig, void (*__handler)(int)))(int);\n \n+/* { dg-final { scan-ada-spec \"uu_sig\" } } */\n+/* { dg-final { scan-ada-spec \"uu_handler\" } } */\n /* { dg-final { cleanup-ada-spec } } */"}]}