{"sha": "21c425ee433c43f26c0dec346e1fa15fbf7945a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFjNDI1ZWU0MzNjNDNmMjZjMGRlYzM0NmUxZmExNWZiZjc5NDVhMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-14T20:40:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-14T20:40:57Z"}, "message": "config.gcc (mips*-*-*): Rename MASK_SPLIT_ADDRS to MASK_SPLIT_ADDRESSES.\n\n\t* config.gcc (mips*-*-*): Rename MASK_SPLIT_ADDRS to\n\tMASK_SPLIT_ADDRESSES.\n\t* config/mips/mips.h (target_flags, mips_fix_vr4130_string): Delete.\n\t(MASK_INT64, MASK_LONG64, MASK_SPLIT_ADDR, MASK_NO_FUSED_MADD)\n\t(MASK_EXPLICIT_RELOCS, MASK_MEMCPY, MASK_SOFT_FLOAT)\n\t(MASK_FLOAT64, MASK_ABICALLS, MASK_XGOT, MASK_LONG_CALLS)\n\t(MASK_64BIT, MASK_EMBEDDED_DATA, MASK_BIG_ENDIAN)\n\t(MASK_SINGLE_FLOAT, MASK_MAD, MASK_4300_MUL_FIX, MASK_MIPS16)\n\t(MASK_NO_CHECK_ZERO_DIV, MASK_BRANCHLIKELY)\n\t(MASK_UNINIT_CONST_IN_RODATA, MASK_FIX_R4000, MASK_FIX_R4400)\n\t(MASK_FIX_SB1, MASK_FIX_VR4120, MASK_VR4130_ALIGN)\n\t(MASK_FP_EXCEPTIONS, MASK_DIVIDE_BREAKS, MASK_PAIRED_SINGLE)\n\t(MASK_MIPS3D, MASK_SYM32, MASK_DEBUG, MASK_DEBUG_D)\n\t(MASK_MIPS_TFILE, TARGET_INT64, TARGET_LONG64, TARGET_FLOAT64)\n\t(TARGET_64BIT, TARGET_SPLIT_ADDRESSES, TARGET_DEBUG_MODE)\n\t(TARGET_DEBUG_D_MODE, TARGET_MEMCPY, TARGET_ABICALLS)\n\t(TARGET_XGOT, TARGET_SOFT_FLOAT, TARGET_HARD_FLOAT)\n\t(TARGET_LONG_CALLS, TARGET_EMBEDDED_DATA)\n\t(TARGET_UNINIT_CONST_IN_RODATA, TARGET_BIG_ENDIAN)\n\t(TARGET_SINGLE_FLOAT, TARGET_DOUBLE_FLOAT, TARGET_MAD)\n\t(TARGET_FUSED_MADD, TARGET_4300_MUL_FIX, TARGET_CHECK_ZERO_DIV)\n\t(TARGET_DIVIDE_TRAPS, TARGET_BRANCHLIKELY, TARGET_FIX_SB1)\n\t(TARGET_FIX_R4000, TARGET_FIX_R4400, TARGET_FIX_VR4120)\n\t(TARGET_FIX_VR4130, TARGET_VR4130_ALIGN, TARGET_FP_EXCEPTIONS)\n\t(TARGET_PAIRED_SINGLE_FLOAT, TARGET_MIPS3D, TARGET_SYM32)\n\t(TARGET_EXPLICIT_RELOCS): Delete.\n\t(TARGET_SWITCHES, SUBTARGET_TARGET_SWITCHES): Delete.\n\t(TARGET_OPTIONS): Remove entry for -mfix-vr4130.\n\t* config/mips/mips.c (TARGET_DEFAULT_TARGET_FLAGS): Define.\n\t(override_options): Set MASK_LONG64 if -mint64 is given and no\n\t-mlongXX option is.  Complain about -mint64 -mlong32.\n\t(override_options, CMP_BUILTINS, mips_bdesc, sb1_desc): Rename\n\tMASK_PAIRED_SINGLE to MASK_PAIRED_SINGLE_FLOAT.\n\t* config/mips/mips.opt: New file.\n\nFrom-SVN: r96452", "tree": {"sha": "eaf8173dd7f86f0f2009fbc29e3c73d259e3010b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaf8173dd7f86f0f2009fbc29e3c73d259e3010b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21c425ee433c43f26c0dec346e1fa15fbf7945a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c425ee433c43f26c0dec346e1fa15fbf7945a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c425ee433c43f26c0dec346e1fa15fbf7945a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c425ee433c43f26c0dec346e1fa15fbf7945a3/comments", "author": null, "committer": null, "parents": [{"sha": "7568579261ec21099e71d6e3d54a3137d1c43089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7568579261ec21099e71d6e3d54a3137d1c43089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7568579261ec21099e71d6e3d54a3137d1c43089"}], "stats": {"total": 560, "additions": 243, "deletions": 317}, "files": [{"sha": "4dcee1a02bc1281e6c9a5def33c0d5ebd5fd6913", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c425ee433c43f26c0dec346e1fa15fbf7945a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c425ee433c43f26c0dec346e1fa15fbf7945a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21c425ee433c43f26c0dec346e1fa15fbf7945a3", "patch": "@@ -1,3 +1,40 @@\n+2005-03-14  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config.gcc (mips*-*-*): Rename MASK_SPLIT_ADDRS to\n+\tMASK_SPLIT_ADDRESSES.\n+\t* config/mips/mips.h (target_flags, mips_fix_vr4130_string): Delete.\n+\t(MASK_INT64, MASK_LONG64, MASK_SPLIT_ADDR, MASK_NO_FUSED_MADD)\n+\t(MASK_EXPLICIT_RELOCS, MASK_MEMCPY, MASK_SOFT_FLOAT)\n+\t(MASK_FLOAT64, MASK_ABICALLS, MASK_XGOT, MASK_LONG_CALLS)\n+\t(MASK_64BIT, MASK_EMBEDDED_DATA, MASK_BIG_ENDIAN)\n+\t(MASK_SINGLE_FLOAT, MASK_MAD, MASK_4300_MUL_FIX, MASK_MIPS16)\n+\t(MASK_NO_CHECK_ZERO_DIV, MASK_BRANCHLIKELY)\n+\t(MASK_UNINIT_CONST_IN_RODATA, MASK_FIX_R4000, MASK_FIX_R4400)\n+\t(MASK_FIX_SB1, MASK_FIX_VR4120, MASK_VR4130_ALIGN)\n+\t(MASK_FP_EXCEPTIONS, MASK_DIVIDE_BREAKS, MASK_PAIRED_SINGLE)\n+\t(MASK_MIPS3D, MASK_SYM32, MASK_DEBUG, MASK_DEBUG_D)\n+\t(MASK_MIPS_TFILE, TARGET_INT64, TARGET_LONG64, TARGET_FLOAT64)\n+\t(TARGET_64BIT, TARGET_SPLIT_ADDRESSES, TARGET_DEBUG_MODE)\n+\t(TARGET_DEBUG_D_MODE, TARGET_MEMCPY, TARGET_ABICALLS)\n+\t(TARGET_XGOT, TARGET_SOFT_FLOAT, TARGET_HARD_FLOAT)\n+\t(TARGET_LONG_CALLS, TARGET_EMBEDDED_DATA)\n+\t(TARGET_UNINIT_CONST_IN_RODATA, TARGET_BIG_ENDIAN)\n+\t(TARGET_SINGLE_FLOAT, TARGET_DOUBLE_FLOAT, TARGET_MAD)\n+\t(TARGET_FUSED_MADD, TARGET_4300_MUL_FIX, TARGET_CHECK_ZERO_DIV)\n+\t(TARGET_DIVIDE_TRAPS, TARGET_BRANCHLIKELY, TARGET_FIX_SB1)\n+\t(TARGET_FIX_R4000, TARGET_FIX_R4400, TARGET_FIX_VR4120)\n+\t(TARGET_FIX_VR4130, TARGET_VR4130_ALIGN, TARGET_FP_EXCEPTIONS)\n+\t(TARGET_PAIRED_SINGLE_FLOAT, TARGET_MIPS3D, TARGET_SYM32)\n+\t(TARGET_EXPLICIT_RELOCS): Delete.\n+\t(TARGET_SWITCHES, SUBTARGET_TARGET_SWITCHES): Delete.\n+\t(TARGET_OPTIONS): Remove entry for -mfix-vr4130.\n+\t* config/mips/mips.c (TARGET_DEFAULT_TARGET_FLAGS): Define.\n+\t(override_options): Set MASK_LONG64 if -mint64 is given and no\n+\t-mlongXX option is.  Complain about -mint64 -mlong32.\n+\t(override_options, CMP_BUILTINS, mips_bdesc, sb1_desc): Rename\n+\tMASK_PAIRED_SINGLE to MASK_PAIRED_SINGLE_FLOAT.\n+\t* config/mips/mips.opt: New file.\n+\n 2005-03-14  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config.gcc (extra_options): New variable for listing option files."}, {"sha": "bcd35250ec2dd7f40e694cc9597cbbf25c9cf85c", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c425ee433c43f26c0dec346e1fa15fbf7945a3/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c425ee433c43f26c0dec346e1fa15fbf7945a3/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=21c425ee433c43f26c0dec346e1fa15fbf7945a3", "patch": "@@ -2712,7 +2712,7 @@ case ${target} in\n \tmips*-*-*)\n \t\tif test x$gnu_ld = xyes\n \t\tthen\n-\t\t\ttarget_cpu_default2=\"MASK_SPLIT_ADDR\"\n+\t\t\ttarget_cpu_default2=\"MASK_SPLIT_ADDRESSES\"\n \t\tfi\n \t\tcase ${target} in\n \t\t\tmips*el-*-*)"}, {"sha": "d679bf6fe740d27e480046b51db67925775dfcc1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c425ee433c43f26c0dec346e1fa15fbf7945a3/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c425ee433c43f26c0dec346e1fa15fbf7945a3/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=21c425ee433c43f26c0dec346e1fa15fbf7945a3", "patch": "@@ -746,6 +746,15 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD \\\n   mips_multipass_dfa_lookahead\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS\t\t\\\n+  (TARGET_DEFAULT\t\t\t\t\\\n+   | TARGET_CPU_DEFAULT\t\t\t\t\\\n+   | TARGET_ENDIAN_DEFAULT\t\t\t\\\n+   | TARGET_FP_EXCEPTIONS_DEFAULT\t\t\\\n+   | MASK_CHECK_ZERO_DIV\t\t\t\\\n+   | MASK_FUSED_MADD)\n+\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL mips_function_ok_for_sibcall\n \n@@ -4308,11 +4317,13 @@ override_options (void)\n \n   if ((target_flags_explicit & MASK_LONG64) == 0)\n     {\n+      if (TARGET_INT64)\n+\ttarget_flags |= MASK_LONG64;\n       /* If no type size setting options (-mlong64,-mint64,-mlong32)\n \t were used, then set the type sizes.  In the EABI in 64 bit mode,\n \t longs and pointers are 64 bits.  Likewise for the SGI Irix6 N64\n \t ABI.  */\n-      if ((mips_abi == ABI_EABI && TARGET_64BIT) || mips_abi == ABI_64)\n+      else if ((mips_abi == ABI_EABI && TARGET_64BIT) || mips_abi == ABI_64)\n \ttarget_flags |= MASK_LONG64;\n       else\n \ttarget_flags &= ~MASK_LONG64;\n@@ -4322,6 +4333,9 @@ override_options (void)\n   if (TARGET_INT64)\n     warning (\"-mint64 is a deprecated option\");\n \n+  if (TARGET_INT64 && !TARGET_LONG64)\n+    error (\"unsupported combination: %s\", \"-mint64 -mlong32\");\n+\n   if (mips_fix_vr4130_string && mips_fix_vr4130_string[0] != 0)\n     error (\"unrecognized option %<-mfix-vr4130%s%>\", mips_fix_vr4130_string);\n \n@@ -4456,13 +4470,13 @@ override_options (void)\n \n   /* Make sure that the user didn't turn off paired single support when\n      MIPS-3D support is requested.  */\n-  if (TARGET_MIPS3D && (target_flags_explicit & MASK_PAIRED_SINGLE)\n+  if (TARGET_MIPS3D && (target_flags_explicit & MASK_PAIRED_SINGLE_FLOAT)\n       && !TARGET_PAIRED_SINGLE_FLOAT)\n     error (\"-mips3d requires -mpaired-single\");\n \n-  /* If TARGET_MIPS3D, enable MASK_PAIRED_SINGLE.  */\n+  /* If TARGET_MIPS3D, enable MASK_PAIRED_SINGLE_FLOAT.  */\n   if (TARGET_MIPS3D)\n-    target_flags |= MASK_PAIRED_SINGLE;\n+    target_flags |= MASK_PAIRED_SINGLE_FLOAT;\n \n   /* Make sure that when TARGET_PAIRED_SINGLE_FLOAT is true, TARGET_FLOAT64\n      and TARGET_HARD_FLOAT are both true.  */\n@@ -9641,10 +9655,10 @@ struct builtin_description\n \n /* Define all the builtins related to c.cond.fmt condition COND.  */\n #define CMP_BUILTINS(COND)\t\t\t\t\t\t\\\n-  MOVTF_BUILTINS (c, COND, MASK_PAIRED_SINGLE),\t\t\t\t\\\n+  MOVTF_BUILTINS (c, COND, MASK_PAIRED_SINGLE_FLOAT),\t\t\t\\\n   MOVTF_BUILTINS (cabs, COND, MASK_MIPS3D),\t\t\t\t\\\n   CMP_SCALAR_BUILTINS (cabs, COND, MASK_MIPS3D),\t\t\t\\\n-  CMP_PS_BUILTINS (c, COND, MASK_PAIRED_SINGLE),\t\t\t\\\n+  CMP_PS_BUILTINS (c, COND, MASK_PAIRED_SINGLE_FLOAT),\t\t\t\\\n   CMP_PS_BUILTINS (cabs, COND, MASK_MIPS3D),\t\t\t\t\\\n   CMP_4S_BUILTINS (c, COND),\t\t\t\t\t\t\\\n   CMP_4S_BUILTINS (cabs, COND)\n@@ -9654,16 +9668,17 @@ struct builtin_description\n \n static const struct builtin_description mips_bdesc[] =\n {\n-  DIRECT_BUILTIN (pll_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE),\n-  DIRECT_BUILTIN (pul_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE),\n-  DIRECT_BUILTIN (plu_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE),\n-  DIRECT_BUILTIN (puu_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE),\n-  DIRECT_BUILTIN (cvt_ps_s, MIPS_V2SF_FTYPE_SF_SF, MASK_PAIRED_SINGLE),\n-  DIRECT_BUILTIN (cvt_s_pl, MIPS_SF_FTYPE_V2SF, MASK_PAIRED_SINGLE),\n-  DIRECT_BUILTIN (cvt_s_pu, MIPS_SF_FTYPE_V2SF, MASK_PAIRED_SINGLE),\n-  DIRECT_BUILTIN (abs_ps, MIPS_V2SF_FTYPE_V2SF, MASK_PAIRED_SINGLE),\n-\n-  DIRECT_BUILTIN (alnv_ps, MIPS_V2SF_FTYPE_V2SF_V2SF_INT, MASK_PAIRED_SINGLE),\n+  DIRECT_BUILTIN (pll_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE_FLOAT),\n+  DIRECT_BUILTIN (pul_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE_FLOAT),\n+  DIRECT_BUILTIN (plu_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE_FLOAT),\n+  DIRECT_BUILTIN (puu_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE_FLOAT),\n+  DIRECT_BUILTIN (cvt_ps_s, MIPS_V2SF_FTYPE_SF_SF, MASK_PAIRED_SINGLE_FLOAT),\n+  DIRECT_BUILTIN (cvt_s_pl, MIPS_SF_FTYPE_V2SF, MASK_PAIRED_SINGLE_FLOAT),\n+  DIRECT_BUILTIN (cvt_s_pu, MIPS_SF_FTYPE_V2SF, MASK_PAIRED_SINGLE_FLOAT),\n+  DIRECT_BUILTIN (abs_ps, MIPS_V2SF_FTYPE_V2SF, MASK_PAIRED_SINGLE_FLOAT),\n+\n+  DIRECT_BUILTIN (alnv_ps, MIPS_V2SF_FTYPE_V2SF_V2SF_INT,\n+\t\t  MASK_PAIRED_SINGLE_FLOAT),\n   DIRECT_BUILTIN (addr_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D),\n   DIRECT_BUILTIN (mulr_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_MIPS3D),\n   DIRECT_BUILTIN (cvt_pw_ps, MIPS_V2SF_FTYPE_V2SF, MASK_MIPS3D),\n@@ -9692,7 +9707,7 @@ static const struct builtin_description mips_bdesc[] =\n \n static const struct builtin_description sb1_bdesc[] =\n {\n-  DIRECT_BUILTIN (sqrt_ps, MIPS_V2SF_FTYPE_V2SF, MASK_PAIRED_SINGLE)\n+  DIRECT_BUILTIN (sqrt_ps, MIPS_V2SF_FTYPE_V2SF, MASK_PAIRED_SINGLE_FLOAT)\n };\n \n /* This helps provide a mapping from builtin function codes to bdesc"}, {"sha": "8deb448b2e6adbb27b6b95f994bc01d7b2866b35", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 299, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c425ee433c43f26c0dec346e1fa15fbf7945a3/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c425ee433c43f26c0dec346e1fa15fbf7945a3/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=21c425ee433c43f26c0dec346e1fa15fbf7945a3", "patch": "@@ -24,10 +24,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-/* Standard GCC variables that we reference.  */\n-\n-extern int\ttarget_flags;\n-\n /* MIPS external variables defined in mips.c.  */\n \n /* Which processor to schedule for.  Since there is no difference between\n@@ -111,7 +107,6 @@ extern const char *mips_tune_string;    /* for -mtune=<xxx> */\n extern const char *mips_isa_string;\t/* for -mips{1,2,3,4} */\n extern const char *mips_abi_string;\t/* for -mabi={32,n32,64} */\n extern const char *mips_cache_flush_func;/* for -mflush-func= and -mno-flush-func */\n-extern const char *mips_fix_vr4130_string;\n extern const struct mips_cpu_info mips_cpu_info_table[];\n extern const struct mips_cpu_info *mips_arch_info;\n extern const struct mips_cpu_info *mips_tune_info;\n@@ -126,134 +121,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n \f\n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n-/* Macros used in the machine description to test the flags.  */\n-\n-\t\t\t\t\t/* Bits for real switches */\n-#define MASK_INT64\t   0x00000001\t/* ints are 64 bits */\n-#define MASK_LONG64\t   0x00000002\t/* longs are 64 bits */\n-#define MASK_SPLIT_ADDR\t   0x00000004\t/* Address splitting is enabled.  */\n-#define MASK_NO_FUSED_MADD 0x00000008   /* Don't generate floating point\n-\t\t\t\t\t   multiply-add operations.  */\n-#define MASK_EXPLICIT_RELOCS 0x00000010 /* Use relocation operators.  */\n-#define MASK_MEMCPY\t   0x00000020\t/* call memcpy instead of inline code*/\n-#define MASK_SOFT_FLOAT\t   0x00000040\t/* software floating point */\n-#define MASK_FLOAT64\t   0x00000080\t/* fp registers are 64 bits */\n-#define MASK_ABICALLS\t   0x00000100\t/* emit .abicalls/.cprestore/.cpload */\n-#define MASK_XGOT\t   0x00000200\t/* emit big-got PIC */\n-#define MASK_LONG_CALLS\t   0x00000400\t/* Always call through a register */\n-#define MASK_64BIT\t   0x00000800\t/* Use 64 bit GP registers and insns */\n-#define MASK_EMBEDDED_DATA 0x00001000\t/* Reduce RAM usage, not fast code */\n-#define MASK_BIG_ENDIAN\t   0x00002000\t/* Generate big endian code */\n-#define MASK_SINGLE_FLOAT  0x00004000\t/* Only single precision FPU.  */\n-#define MASK_MAD\t   0x00008000\t/* Generate mad/madu as on 4650.  */\n-#define MASK_4300_MUL_FIX  0x00010000   /* Work-around early Vr4300 CPU bug */\n-#define MASK_MIPS16\t   0x00020000\t/* Generate mips16 code */\n-#define MASK_NO_CHECK_ZERO_DIV \\\n-\t\t\t   0x00040000\t/* divide by zero checking */\n-#define MASK_BRANCHLIKELY  0x00080000   /* Generate Branch Likely\n-\t\t\t\t\t   instructions.  */\n-#define MASK_UNINIT_CONST_IN_RODATA \\\n-\t\t\t   0x00100000\t/* Store uninitialized\n-\t\t\t\t\t   consts in rodata */\n-#define MASK_FIX_R4000\t   0x00200000\t/* Work around R4000 errata.  */\n-#define MASK_FIX_R4400\t   0x00400000\t/* Work around R4400 errata.  */\n-#define MASK_FIX_SB1\t   0x00800000\t/* Work around SB-1 errata.  */\n-#define MASK_FIX_VR4120\t   0x01000000   /* Work around VR4120 errata.  */\n-#define MASK_VR4130_ALIGN  0x02000000\t/* Perform VR4130 alignment opts.  */\n-#define MASK_FP_EXCEPTIONS 0x04000000   /* FP exceptions are enabled.  */\n-#define MASK_DIVIDE_BREAKS 0x08000000   /* Divide by zero check uses\n-                                           break instead of trap. */\n-#define MASK_PAIRED_SINGLE 0x10000000   /* Support paired-single FPU.  */\n-#define MASK_MIPS3D        0x20000000   /* Support MIPS-3D instructions.  */\n-#define MASK_SYM32\t   0x40000000\t/* Assume 32-bit symbol values.  */\n-\n-\t\t\t\t\t/* Debug switches, not documented */\n-#define MASK_DEBUG\t0\t\t/* unused */\n-#define MASK_DEBUG_D\t0\t\t/* don't do define_split's */\n-\n-\t\t\t\t\t/* Dummy switches used only in specs */\n-#define MASK_MIPS_TFILE\t0\t\t/* flag for mips-tfile usage */\n-\n-\t\t\t\t\t/* r4000 64 bit sizes */\n-#define TARGET_INT64\t\t((target_flags & MASK_INT64) != 0)\n-#define TARGET_LONG64\t\t((target_flags & MASK_LONG64) != 0)\n-#define TARGET_FLOAT64\t\t((target_flags & MASK_FLOAT64) != 0)\n-#define TARGET_64BIT\t\t((target_flags & MASK_64BIT) != 0)\n-\n-\t\t\t\t\t/* Mips vs. GNU linker */\n-#define TARGET_SPLIT_ADDRESSES\t((target_flags & MASK_SPLIT_ADDR) != 0)\n-\n-\t\t\t\t\t/* Debug Modes */\n-#define TARGET_DEBUG_MODE\t((target_flags & MASK_DEBUG) != 0)\n-#define TARGET_DEBUG_D_MODE\t((target_flags & MASK_DEBUG_D) != 0)\n-\n-\t\t\t\t\t/* call memcpy instead of inline code */\n-#define TARGET_MEMCPY\t\t((target_flags & MASK_MEMCPY) != 0)\n-\n-\t\t\t\t\t/* .abicalls, etc from Pyramid V.4 */\n-#define TARGET_ABICALLS\t\t((target_flags & MASK_ABICALLS) != 0)\n-#define TARGET_XGOT\t\t((target_flags & MASK_XGOT) != 0)\n-\n-\t\t\t\t\t/* software floating point */\n-#define TARGET_SOFT_FLOAT\t((target_flags & MASK_SOFT_FLOAT) != 0)\n-#define TARGET_HARD_FLOAT\t(! TARGET_SOFT_FLOAT)\n-\n-\t\t\t\t\t/* always call through a register */\n-#define TARGET_LONG_CALLS\t((target_flags & MASK_LONG_CALLS) != 0)\n-\n-\t\t\t\t\t/* for embedded systems, optimize for\n-\t\t\t\t\t   reduced RAM space instead of for\n-\t\t\t\t\t   fastest code.  */\n-#define TARGET_EMBEDDED_DATA\t((target_flags & MASK_EMBEDDED_DATA) != 0)\n-\n-\t\t\t\t\t/* always store uninitialized const\n-\t\t\t\t\t   variables in rodata, requires\n-\t\t\t\t\t   TARGET_EMBEDDED_DATA.  */\n-#define TARGET_UNINIT_CONST_IN_RODATA\t\\\n-\t\t\t((target_flags & MASK_UNINIT_CONST_IN_RODATA) != 0)\n-\n-\t\t\t\t\t/* generate big endian code.  */\n-#define TARGET_BIG_ENDIAN\t((target_flags & MASK_BIG_ENDIAN) != 0)\n-\n-#define TARGET_SINGLE_FLOAT\t((target_flags & MASK_SINGLE_FLOAT) != 0)\n-#define TARGET_DOUBLE_FLOAT\t(! TARGET_SINGLE_FLOAT)\n-\n-#define TARGET_MAD\t\t((target_flags & MASK_MAD) != 0)\n-\n-#define TARGET_FUSED_MADD\t((target_flags & MASK_NO_FUSED_MADD) == 0)\n-\n-#define TARGET_4300_MUL_FIX     ((target_flags & MASK_4300_MUL_FIX) != 0)\n-\n-#define TARGET_CHECK_ZERO_DIV   ((target_flags & MASK_NO_CHECK_ZERO_DIV) == 0)\n-#define TARGET_DIVIDE_TRAPS     ((target_flags & MASK_DIVIDE_BREAKS) == 0)\n-\n-#define TARGET_BRANCHLIKELY\t((target_flags & MASK_BRANCHLIKELY) != 0)\n-\n-#define TARGET_FIX_SB1\t\t((target_flags & MASK_FIX_SB1) != 0)\n-\n-\t\t\t\t\t/* Work around R4000 errata.  */\n-#define TARGET_FIX_R4000\t((target_flags & MASK_FIX_R4000) != 0)\n-\n-\t\t\t\t\t/* Work around R4400 errata.  */\n-#define TARGET_FIX_R4400\t((target_flags & MASK_FIX_R4400) != 0)\n-#define TARGET_FIX_VR4120\t((target_flags & MASK_FIX_VR4120) != 0)\n-#define TARGET_FIX_VR4130\t(mips_fix_vr4130_string != 0)\n-#define TARGET_VR4130_ALIGN\t((target_flags & MASK_VR4130_ALIGN) != 0)\n-\n-#define TARGET_FP_EXCEPTIONS\t((target_flags & MASK_FP_EXCEPTIONS) != 0)\n-\n-#define TARGET_PAIRED_SINGLE_FLOAT\t\\\n-\t\t\t\t((target_flags & MASK_PAIRED_SINGLE) != 0)\n-#define TARGET_MIPS3D\t\t((target_flags & MASK_MIPS3D) != 0)\n-#define TARGET_SYM32\t\t((target_flags & MASK_SYM32) != 0)\n-\n-/* True if we should use NewABI-style relocation operators for\n-   symbolic addresses.  This is never true for mips16 code,\n-   which has its own conventions.  */\n-\n-#define TARGET_EXPLICIT_RELOCS\t((target_flags & MASK_EXPLICIT_RELOCS) != 0)\n-\n-\n /* True if the call patterns should be split into a jalr followed by\n    an instruction to restore $gp.  This is only ever true for SVR4 PIC,\n    in which $gp is call-clobbered.  It is only safe to split the load\n@@ -526,168 +393,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n \t\t\t\t\t\t\t\t\\\n } while (0)\n \n-\n-\n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  SUBTARGET_TARGET_SWITCHES                                             \\\n-  {\"int64\",\t\t  MASK_INT64 | MASK_LONG64,\t\t\t\\\n-     N_(\"Use 64-bit int type\")},\t\t\t\t\t\\\n-  {\"long64\",\t\t  MASK_LONG64,\t\t\t\t\t\\\n-     N_(\"Use 64-bit long type\")},\t\t\t\t\t\\\n-  {\"long32\",\t\t -(MASK_LONG64 | MASK_INT64),\t\t\t\\\n-     N_(\"Use 32-bit long type\")},\t\t\t\t\t\\\n-  {\"split-addresses\",\t  MASK_SPLIT_ADDR,\t\t\t\t\\\n-     N_(\"Optimize lui/addiu address loads\")},\t\t\t\t\\\n-  {\"no-split-addresses\", -MASK_SPLIT_ADDR,\t\t\t\t\\\n-     N_(\"Don't optimize lui/addiu address loads\")},\t\t\t\\\n-  {\"gas\",\t\t  0,\t\t\t\t\t\t\\\n-     N_(\"Use GNU as (now ignored)\")},\t\t\t\t\t\\\n-  {\"gpOPT\",\t\t  0,\t\t\t\t\t\t\\\n-     N_(\"Use GP relative sdata/sbss sections (now ignored)\")},\t\t\\\n-  {\"gpopt\",\t\t  0,\t\t\t\t\t\t\\\n-     N_(\"Use GP relative sdata/sbss sections (now ignored)\")},\t\t\\\n-  {\"no-gpOPT\",\t\t  0,\t\t\t\t\t        \\\n-     N_(\"Don't use GP relative sdata/sbss sections (now ignored)\")},\t\\\n-  {\"no-gpopt\",\t\t  0,\t\t\t\t\t        \\\n-     N_(\"Don't use GP relative sdata/sbss sections (now ignored)\")},\t\\\n-  {\"stats\",\t\t  0,\t\t\t\t\t\t\\\n-     N_(\"Output compiler statistics (now ignored)\")},\t\t\t\\\n-  {\"no-stats\",\t\t  0,\t\t\t\t\t\t\\\n-     N_(\"Don't output compiler statistics\")},\t\t\t\t\\\n-  {\"memcpy\",\t\t  MASK_MEMCPY,\t\t\t\t\t\\\n-     N_(\"Don't optimize block moves\")},\t\t\t\t\t\\\n-  {\"no-memcpy\",\t\t -MASK_MEMCPY,\t\t\t\t\t\\\n-     N_(\"Optimize block moves\")},\t\t\t\t\t\\\n-  {\"mips-tfile\",\t  MASK_MIPS_TFILE,\t\t\t\t\\\n-     N_(\"Use mips-tfile asm postpass\")},\t\t\t\t\\\n-  {\"no-mips-tfile\",\t -MASK_MIPS_TFILE,\t\t\t\t\\\n-     N_(\"Don't use mips-tfile asm postpass\")},\t\t\t\t\\\n-  {\"soft-float\",\t  MASK_SOFT_FLOAT,\t\t\t\t\\\n-     N_(\"Use software floating point\")},\t\t\t\t\\\n-  {\"hard-float\",\t -MASK_SOFT_FLOAT,\t\t\t\t\\\n-     N_(\"Use hardware floating point\")},\t\t\t\t\\\n-  {\"fp64\",\t\t  MASK_FLOAT64,\t\t\t\t\t\\\n-     N_(\"Use 64-bit FP registers\")},\t\t\t\t\t\\\n-  {\"fp32\",\t\t -MASK_FLOAT64,\t\t\t\t\t\\\n-     N_(\"Use 32-bit FP registers\")},\t\t\t\t\t\\\n-  {\"gp64\",\t\t  MASK_64BIT,\t\t\t\t\t\\\n-     N_(\"Use 64-bit general registers\")},\t\t\t\t\\\n-  {\"gp32\",\t\t -MASK_64BIT,\t\t\t\t\t\\\n-     N_(\"Use 32-bit general registers\")},\t\t\t\t\\\n-  {\"abicalls\",\t\t  MASK_ABICALLS,\t\t\t\t\\\n-     N_(\"Use Irix PIC\")},\t\t\t\t\t\t\\\n-  {\"no-abicalls\",\t -MASK_ABICALLS,\t\t\t\t\\\n-     N_(\"Don't use Irix PIC\")},\t\t\t\t\t\t\\\n-  {\"long-calls\",\t  MASK_LONG_CALLS,\t\t\t\t\\\n-     N_(\"Use indirect calls\")},\t\t\t\t\t\t\\\n-  {\"no-long-calls\",\t -MASK_LONG_CALLS,\t\t\t\t\\\n-     N_(\"Don't use indirect calls\")},\t\t\t\t\t\\\n-  {\"embedded-data\",\t  MASK_EMBEDDED_DATA,\t\t\t\t\\\n-     N_(\"Use ROM instead of RAM\")},\t\t\t\t\t\\\n-  {\"no-embedded-data\",\t -MASK_EMBEDDED_DATA,\t\t\t\t\\\n-     N_(\"Don't use ROM instead of RAM\")},\t\t\t\t\\\n-  {\"uninit-const-in-rodata\", MASK_UNINIT_CONST_IN_RODATA,\t\t\\\n-     N_(\"Put uninitialized constants in ROM (needs -membedded-data)\")},\t\\\n-  {\"no-uninit-const-in-rodata\", -MASK_UNINIT_CONST_IN_RODATA,\t\t\\\n-     N_(\"Don't put uninitialized constants in ROM\")},\t\t\t\\\n-  {\"eb\",\t\t  MASK_BIG_ENDIAN,\t\t\t\t\\\n-     N_(\"Use big-endian byte order\")},\t\t\t\t\t\\\n-  {\"el\",\t\t -MASK_BIG_ENDIAN,\t\t\t\t\\\n-     N_(\"Use little-endian byte order\")},\t\t\t\t\\\n-  {\"single-float\",\t  MASK_SINGLE_FLOAT,\t\t\t\t\\\n-     N_(\"Use single (32-bit) FP only\")},\t\t\t\t\\\n-  {\"double-float\",\t -MASK_SINGLE_FLOAT,\t\t\t\t\\\n-     N_(\"Don't use single (32-bit) FP only\")},\t\t\t\t\\\n-  {\"paired-single\",       MASK_PAIRED_SINGLE,\t\t\t\t\\\n-     N_(\"Use paired-single floating point instructions\")},\t\t\\\n-  {\"no-paired-single\",   -MASK_PAIRED_SINGLE,\t\t\t\t\\\n-     N_(\"Use paired-single floating point instructions\")},\t\t\\\n-  {\"ips3d\",               MASK_MIPS3D,\t\t\t\t\t\\\n-     N_(\"Use MIPS-3D instructions\")},\t\t\t\t\t\\\n-  {\"no-mips3d\",          -MASK_MIPS3D,\t\t\t\t\t\\\n-     N_(\"Use MIPS-3D instructions\")},\t\t\t\t\t\\\n-  {\"mad\",\t\t  MASK_MAD,\t\t\t\t\t\\\n-     N_(\"Use multiply accumulate\")},\t\t\t\t\t\\\n-  {\"no-mad\",\t\t -MASK_MAD,\t\t\t\t\t\\\n-     N_(\"Don't use multiply accumulate\")},\t\t\t\t\\\n-  {\"no-fused-madd\",       MASK_NO_FUSED_MADD,                           \\\n-     N_(\"Don't generate fused multiply/add instructions\")},\t\t\\\n-  {\"fused-madd\",         -MASK_NO_FUSED_MADD,                           \\\n-     N_(\"Generate fused multiply/add instructions\")},\t\t\t\\\n-  {\"vr4130-align\",\t  MASK_VR4130_ALIGN,\t\t\t\t\\\n-     N_(\"Perform VR4130-specific alignment optimizations\")},\t\t\\\n-  {\"no-vr4130-align\",\t -MASK_VR4130_ALIGN,\t\t\t\t\\\n-     N_(\"Don't perform VR4130-specific alignment optimizations\")},\t\\\n-  {\"fix4300\",             MASK_4300_MUL_FIX,\t\t\t\t\\\n-     N_(\"Work around early 4300 hardware bug\")},\t\t\t\\\n-  {\"no-fix4300\",         -MASK_4300_MUL_FIX,\t\t\t\t\\\n-     N_(\"Don't work around early 4300 hardware bug\")},\t\t\t\\\n-  {\"fix-sb1\",             MASK_FIX_SB1,\t\t\t\t\t\\\n-     N_(\"Work around errata for early SB-1 revision 2 cores\")},\t\t\\\n-  {\"no-fix-sb1\",         -MASK_FIX_SB1,\t\t\t\t\t\\\n-     N_(\"Don't work around errata for early SB-1 revision 2 cores\")},\t\\\n-  {\"fix-r4000\",\t\t  MASK_FIX_R4000,\t\t\t\t\\\n-     N_(\"Work around R4000 errata\")},\t\t\t\t\t\\\n-  {\"no-fix-r4000\",\t -MASK_FIX_R4000,\t\t\t\t\\\n-     N_(\"Don't work around R4000 errata\")},\t\t\t\t\\\n-  {\"fix-r4400\",\t\t  MASK_FIX_R4400,\t\t\t\t\\\n-     N_(\"Work around R4400 errata\")},\t\t\t\t\t\\\n-  {\"no-fix-r4400\",\t -MASK_FIX_R4400,\t\t\t\t\\\n-     N_(\"Don't work around R4400 errata\")},\t\t\t\t\\\n-  {\"fix-vr4120\",\t  MASK_FIX_VR4120,\t\t\t\t\\\n-     N_(\"Work around certain VR4120 errata\")},\t\t\t\t\\\n-  {\"no-fix-vr4120\",\t -MASK_FIX_VR4120,\t\t\t\t\\\n-     N_(\"Don't work around certain VR4120 errata\")},\t\t\t\\\n-  {\"check-zero-division\",-MASK_NO_CHECK_ZERO_DIV,\t\t\t\\\n-     N_(\"Trap on integer divide by zero\")},\t\t\t\t\\\n-  {\"no-check-zero-division\", MASK_NO_CHECK_ZERO_DIV,\t\t\t\\\n-     N_(\"Don't trap on integer divide by zero\")},\t\t\t\\\n-  {\"divide-traps\", -MASK_DIVIDE_BREAKS,\t\t\t\t\t\\\n-     N_(\"Use trap to check for integer divide by zero\")},\t\t\\\n-  {\"divide-breaks\", MASK_DIVIDE_BREAKS,\t\t\t\t\t\\\n-     N_(\"Use break to check for integer divide by zero\")},\t\t\\\n-  { \"branch-likely\",      MASK_BRANCHLIKELY,\t\t\t\t\\\n-      N_(\"Use Branch Likely instructions, overriding default for arch\")}, \\\n-  { \"no-branch-likely\",  -MASK_BRANCHLIKELY,\t\t\t\t\\\n-      N_(\"Don't use Branch Likely instructions, overriding default for arch\")}, \\\n-  {\"explicit-relocs\",\t  MASK_EXPLICIT_RELOCS,\t\t\t\t\\\n-     N_(\"Use NewABI-style %reloc() assembly operators\")},\t\t\\\n-  {\"no-explicit-relocs\", -MASK_EXPLICIT_RELOCS,\t\t\t\t\\\n-     N_(\"Use assembler macros instead of relocation operators\")},\t\\\n-  {\"ips16\",\t\t  MASK_MIPS16,\t\t\t\t\t\\\n-     N_(\"Generate mips16 code\") },\t\t\t\t\t\\\n-  {\"no-mips16\",\t\t -MASK_MIPS16,\t\t\t\t\t\\\n-     N_(\"Generate normal-mode code\") },\t\t\t\t\t\\\n-  {\"xgot\",\t\t  MASK_XGOT,\t\t\t\t\t\\\n-     N_(\"Lift restrictions on GOT size\") },\t\t\t\t\\\n-  {\"no-xgot\",\t\t -MASK_XGOT,\t\t\t\t\t\\\n-     N_(\"Do not lift restrictions on GOT size\") },\t\t\t\\\n-  {\"fp-exceptions\",\t  MASK_FP_EXCEPTIONS,\t\t\t\t\\\n-     N_(\"FP exceptions are enabled\") },\t\t\t\t\t\\\n-  {\"no-fp-exceptions\", \t  -MASK_FP_EXCEPTIONS,\t\t\t\t\\\n-     N_(\"FP exceptions are not enabled\") },\t\t\t\t\\\n-  {\"sym32\",\t\t  MASK_SYM32,\t\t\t\t\t\\\n-     N_(\"Assume all symbols have 32-bit values\") },\t\t\t\\\n-  {\"no-sym32\",\t\t  -MASK_SYM32,\t\t\t\t\t\\\n-     N_(\"Don't assume all symbols have 32-bit values\") },\t\t\\\n-  {\"debug\",\t\t  MASK_DEBUG,\t\t\t\t\t\\\n-     NULL},\t\t\t\t\t\t\t\t\\\n-  {\"debugd\",\t\t  MASK_DEBUG_D,\t\t\t\t\t\\\n-     NULL},\t\t\t\t\t\t\t\t\\\n-  {\"\",\t\t\t  (TARGET_DEFAULT\t\t\t\t\\\n-\t\t\t   | TARGET_CPU_DEFAULT\t\t\t\t\\\n-\t\t\t   | TARGET_ENDIAN_DEFAULT\t\t\t\\\n-\t\t\t   | TARGET_FP_EXCEPTIONS_DEFAULT),\t\t\\\n-     NULL},\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Default target_flags if no switches are specified  */\n \n #ifndef TARGET_DEFAULT\n@@ -796,8 +501,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n       N_(\"Don't call any cache flush functions\"), 0},\t\t\t\\\n   { \"flush-func=\", &mips_cache_flush_func,\t\t\t\t\\\n       N_(\"Specify cache flush function\"), 0},\t\t\t\t\\\n-  { \"fix-vr4130\", &mips_fix_vr4130_string,\t\t\t\t\\\n-      N_(\"Work around VR4130 mflo/mfhi errata\"), 0},\t\t\t\\\n }\n \n /* This is meant to be redefined in the host dependent files.  */\n@@ -1038,8 +741,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n #endif\n \n \f\n-#define SUBTARGET_TARGET_SWITCHES\n-\n #ifndef MIPS_ABI_DEFAULT\n #define MIPS_ABI_DEFAULT ABI_32\n #endif"}, {"sha": "b93dce28f5492f6c6e4f3ac71d59430e96bda25a", "filename": "gcc/config/mips/mips.opt", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c425ee433c43f26c0dec346e1fa15fbf7945a3/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c425ee433c43f26c0dec346e1fa15fbf7945a3/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=21c425ee433c43f26c0dec346e1fa15fbf7945a3", "patch": "@@ -0,0 +1,173 @@\n+mabicalls\n+Target Report Mask(ABICALLS)\n+Use SVR4-style PIC\n+\n+mad\n+Target Report Var(TARGET_MAD)\n+Use PMC-style 'mad' instructions\n+\n+mbranch-likely\n+Target Report Mask(BRANCHLIKELY)\n+Use Branch Likely instructions, overriding the architecture default\n+\n+mcheck-zero-division\n+Target Report Mask(CHECK_ZERO_DIV)\n+Trap on integer divide by zero\n+\n+mdivide-breaks\n+Target Report Mask(DIVIDE_BREAKS)\n+Use branch-and-break sequences to check for integer divide by zero\n+\n+mdivide-traps\n+Target Report InverseMask(DIVIDE_BREAKS, DIVIDE_TRAPS)\n+Use trap instructions to check for integer divide by zero\n+\n+mdouble-float\n+Target Report RejectNegative InverseMask(SINGLE_FLOAT, DOUBLE_FLOAT)\n+Allow hardware floating-point instructions to cover both 32-bit and 64-bit operations\n+\n+mdebug\n+Target Var(TARGET_DEBUG_MODE) Undocumented\n+\n+mdebugd\n+Target Var(TARGET_DEBUG_D_MODE) Undocumented\n+\n+meb\n+Target Report RejectNegative Mask(BIG_ENDIAN)\n+Use big-endian byte order\n+\n+mel\n+Target Report RejectNegative InverseMask(BIG_ENDIAN, LITTLE_ENDIAN)\n+Use little-endian byte order\n+\n+membedded-data\n+Target Report Var(TARGET_EMBEDDED_DATA)\n+Use ROM instead of RAM\n+\n+mexplicit-relocs\n+Target Report Mask(EXPLICIT_RELOCS)\n+Use NewABI-style %reloc() assembly operators\n+\n+mfix-r4000\n+Target Report Mask(FIX_R4000)\n+Work around certain R4000 errata\n+\n+mfix-r4400\n+Target Report Mask(FIX_R4400)\n+Work around certain R4400 errata\n+\n+mfix-sb1\n+Target Report Var(TARGET_FIX_SB1)\n+Work around errata for early SB-1 revision 2 cores\n+\n+mfix-vr4120\n+Target Report Var(TARGET_FIX_VR4120)\n+Work around certain VR4120 errata\n+\n+mfix-vr4130\n+Target Report Var(TARGET_FIX_VR4130)\n+Work around VR4130 mflo/mfhi errata\n+\n+mfix4300\n+Target Report Var(TARGET_4300_MUL_FIX)\n+Work around an early 4300 hardware bug\n+\n+mfp-exceptions\n+Target Report Mask(FP_EXCEPTIONS)\n+FP exceptions are enabled\n+\n+mfp32\n+Target Report RejectNegative InverseMask(FLOAT64)\n+Use 32-bit floating-point registers\n+\n+mfp64\n+Target Report RejectNegative Mask(FLOAT64)\n+Use 64-bit floating-point registers\n+\n+mfused-madd\n+Target Report Mask(FUSED_MADD)\n+Generate floating-point multiply-add instructions\n+\n+mgp32\n+Target Report RejectNegative InverseMask(64BIT)\n+Use 32-bit general registers\n+\n+mgp64\n+Target Report RejectNegative Mask(64BIT)\n+Use 64-bit general registers\n+\n+mhard-float\n+Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)\n+Allow the use of hardware floating-point instructions\n+\n+mint64\n+Target Report RejectNegative Mask(INT64)\n+Use a 64-bit int type\n+\n+mips16\n+Target Report RejectNegative Mask(MIPS16)\n+Generate mips16 code\n+\n+mips3d\n+Target Report RejectNegative Mask(MIPS3D)\n+Use MIPS-3D instructions\n+\n+mlong-calls\n+Target Report Var(TARGET_LONG_CALLS)\n+Use indirect calls\n+\n+mlong32\n+Target Report RejectNegative InverseMask(LONG64, LONG32)\n+Use a 32-bit long type\n+\n+mlong64\n+Target Report RejectNegative Mask(LONG64)\n+Use a 64-bit long type\n+\n+mmemcpy\n+Target Report Var(TARGET_MEMCPY)\n+Don't optimize block moves\n+\n+mmips-tfile\n+Target\n+Use the mips-tfile postpass\n+\n+mno-mips16\n+Target Report RejectNegative InverseMask(MIPS16)\n+Generate normal-mode code\n+\n+mno-mips3d\n+Target Report RejectNegative InverseMask(MIPS3D)\n+Do not use MIPS-3D instructions\n+\n+mpaired-single\n+Target Report Mask(PAIRED_SINGLE_FLOAT)\n+Use paired-single floating-point instructions\n+\n+msingle-float\n+Target Report RejectNegative Mask(SINGLE_FLOAT)\n+Restrict the use of hardware floating-point instructions to 32-bit operations\n+\n+msoft-float\n+Target Report RejectNegative Mask(SOFT_FLOAT)\n+Prevent the use of all hardware floating-point instructions\n+\n+msplit-addresses\n+Target Report Mask(SPLIT_ADDRESSES)\n+Optimize lui/addiu address loads\n+\n+msym32\n+Target Report Var(TARGET_SYM32)\n+Assume all symbols have 32-bit values\n+\n+muninit-const-in-rodata\n+Target Report Var(TARGET_UNINIT_CONST_IN_RODATA)\n+Put uninitialized constants in ROM (needs -membedded-data)\n+\n+mvr4130-align\n+Target Report Mask(VR4130_ALIGN)\n+Perform VR4130-specific alignment optimizations\n+\n+mxgot\n+Target Report Var(TARGET_XGOT)\n+Lift restrictions on GOT size"}]}