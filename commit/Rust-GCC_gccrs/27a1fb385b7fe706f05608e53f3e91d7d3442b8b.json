{"sha": "27a1fb385b7fe706f05608e53f3e91d7d3442b8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhMWZiMzg1YjdmZTcwNmYwNTYwOGU1M2YzZTkxZDdkMzQ0MmI4Yg==", "commit": {"author": {"name": "Sergei Trofimovich", "email": "siarheit@google.com", "date": "2021-08-06T15:14:16Z"}, "committer": {"name": "Sergei Trofimovich", "email": "siarheit@google.com", "date": "2021-08-12T18:43:07Z"}, "message": "c++: fix ptrmemfunc template instantiation [PR101219]\n\nr12-1804 (\"cp: add support for per-location warning groups.\") among other\nthings removed warning suppression from a few places including ptrmemfuncs.\n\nThis exposed a bug in warning detection code as a reference to missing\nBINFO (it's intentionally missing for ptrmemfunc types):\n\n    crash_signal\n        gcc/toplev.c:328\n    perform_or_defer_access_check(tree_node*, tree_node*, tree_node*, int, access_failure_info*)\n        gcc/cp/semantics.c:490\n    finish_non_static_data_member(tree_node*, tree_node*, tree_node*)\n        gcc/cp/semantics.c:2208\n    ...\n\nThe change special cases ptrmemfuncs in templace substitution by using\nbuild_ptrmemfunc_access_expr() instead of finish_non_static_data_member().\n\ngcc/cp/ChangeLog:\n\n\tPR c++/101219\n\t* pt.c (tsubst_copy_and_build): Use build_ptrmemfunc_access_expr\n\tto construct ptrmemfunc expression instantiation.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/101219\n\t* g++.dg/warn/pr101219.C: New test.", "tree": {"sha": "8a287d4386e764feec86d9c179a5f77552b693e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a287d4386e764feec86d9c179a5f77552b693e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27a1fb385b7fe706f05608e53f3e91d7d3442b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a1fb385b7fe706f05608e53f3e91d7d3442b8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a1fb385b7fe706f05608e53f3e91d7d3442b8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a1fb385b7fe706f05608e53f3e91d7d3442b8b/comments", "author": {"login": "trofi", "id": 226650, "node_id": "MDQ6VXNlcjIyNjY1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/226650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trofi", "html_url": "https://github.com/trofi", "followers_url": "https://api.github.com/users/trofi/followers", "following_url": "https://api.github.com/users/trofi/following{/other_user}", "gists_url": "https://api.github.com/users/trofi/gists{/gist_id}", "starred_url": "https://api.github.com/users/trofi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trofi/subscriptions", "organizations_url": "https://api.github.com/users/trofi/orgs", "repos_url": "https://api.github.com/users/trofi/repos", "events_url": "https://api.github.com/users/trofi/events{/privacy}", "received_events_url": "https://api.github.com/users/trofi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "trofi", "id": 226650, "node_id": "MDQ6VXNlcjIyNjY1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/226650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trofi", "html_url": "https://github.com/trofi", "followers_url": "https://api.github.com/users/trofi/followers", "following_url": "https://api.github.com/users/trofi/following{/other_user}", "gists_url": "https://api.github.com/users/trofi/gists{/gist_id}", "starred_url": "https://api.github.com/users/trofi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trofi/subscriptions", "organizations_url": "https://api.github.com/users/trofi/orgs", "repos_url": "https://api.github.com/users/trofi/repos", "events_url": "https://api.github.com/users/trofi/events{/privacy}", "received_events_url": "https://api.github.com/users/trofi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2ba65ab6010f0d507bf5512a0223692e6653b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ba65ab6010f0d507bf5512a0223692e6653b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ba65ab6010f0d507bf5512a0223692e6653b23"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "42ea51cebc081838270b461c8d0b9a5f4ff372b8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a1fb385b7fe706f05608e53f3e91d7d3442b8b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a1fb385b7fe706f05608e53f3e91d7d3442b8b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=27a1fb385b7fe706f05608e53f3e91d7d3442b8b", "patch": "@@ -20530,7 +20530,13 @@ tsubst_copy_and_build (tree t,\n \tif (member == error_mark_node)\n \t  RETURN (error_mark_node);\n \n-\tif (TREE_CODE (member) == FIELD_DECL)\n+\tif (object_type && TYPE_PTRMEMFUNC_P (object_type)\n+\t    && TREE_CODE (member) == FIELD_DECL)\n+\t  {\n+\t    r = build_ptrmemfunc_access_expr (object, DECL_NAME (member));\n+\t    RETURN (r);\n+\t  }\n+\telse if (TREE_CODE (member) == FIELD_DECL)\n \t  {\n \t    r = finish_non_static_data_member (member, object, NULL_TREE);\n \t    if (TREE_CODE (r) == COMPONENT_REF)"}, {"sha": "0d23d73c9ec4b524f7d5f9f54409749b99d40416", "filename": "gcc/testsuite/g++.dg/warn/pr101219.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a1fb385b7fe706f05608e53f3e91d7d3442b8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr101219.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a1fb385b7fe706f05608e53f3e91d7d3442b8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr101219.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr101219.C?ref=27a1fb385b7fe706f05608e53f3e91d7d3442b8b", "patch": "@@ -0,0 +1,11 @@\n+/* PR c++/101219 - ICE on use of uninitialized memfun pointer\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+struct S { void m(); };\n+\n+template <int> bool f() {\n+  void (S::*mp)();\n+\n+  return &S::m == mp; // no warning emitted here (no instantiation)\n+}"}]}