{"sha": "5e95646e734c1c64ea4e1a761b414581534e1d8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU5NTY0NmU3MzRjMWM2NGVhNGUxYTc2MWI0MTQ1ODE1MzRlMWQ4Yw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-01-15T23:02:43Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-01-15T23:02:43Z"}, "message": "[D] Move building of typeof(null) values to a common function.\n\ngcc/d/ChangeLog:\n\n\t* d-codegen.cc (build_typeof_null_value): New function.\n\t* d-tree.h (build_typeof_null_value): Declare.\n\t* d-convert.cc (convert_expr): Use build_typeof_null_value.\n\t* expr.cc (ExprVisitor::visit(NullExp)): Likewise.\n\nFrom-SVN: r267955", "tree": {"sha": "e0b659e37a70ed3996d8c7a6fee4ea09e1587cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0b659e37a70ed3996d8c7a6fee4ea09e1587cd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e95646e734c1c64ea4e1a761b414581534e1d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e95646e734c1c64ea4e1a761b414581534e1d8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e95646e734c1c64ea4e1a761b414581534e1d8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e95646e734c1c64ea4e1a761b414581534e1d8c/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37879e01616f2031866ddbbeff5f30e562e7baac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37879e01616f2031866ddbbeff5f30e562e7baac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37879e01616f2031866ddbbeff5f30e562e7baac"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "441fed8ddb171a41125e5cbb87df73032306c48d", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e95646e734c1c64ea4e1a761b414581534e1d8c/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e95646e734c1c64ea4e1a761b414581534e1d8c/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=5e95646e734c1c64ea4e1a761b414581534e1d8c", "patch": "@@ -1,3 +1,10 @@\n+2019-01-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc (build_typeof_null_value): New function.\n+\t* d-tree.h (build_typeof_null_value): Declare.\n+\t* d-convert.cc (convert_expr): Use build_typeof_null_value.\n+\t* expr.cc (ExprVisitor::visit(NullExp)): Likewise.\n+\n 2019-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR inline-asm/52813"}, {"sha": "7ca0acffcc417bcc61694f0e1df6eba0e1f5d628", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e95646e734c1c64ea4e1a761b414581534e1d8c/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e95646e734c1c64ea4e1a761b414581534e1d8c/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=5e95646e734c1c64ea4e1a761b414581534e1d8c", "patch": "@@ -448,6 +448,42 @@ extract_from_method_call (tree t, tree& callee, tree& object)\n   callee = CONSTRUCTOR_ELT (t, 1)->value;\n }\n \n+/* Build a typeof(null) constant of type TYPE.  Handles certain special case\n+   conversions, where the underlying type is an aggregate with a nullable\n+   interior pointer.  */\n+\n+tree\n+build_typeof_null_value (Type *type)\n+{\n+  Type *tb = type->toBasetype ();\n+  tree value;\n+\n+  /* For dynamic arrays, set length and pointer fields to zero.  */\n+  if (tb->ty == Tarray)\n+    value = d_array_value (build_ctype (type), size_int (0), null_pointer_node);\n+\n+  /* For associative arrays, set the pointer field to null.  */\n+  else if (tb->ty == Taarray)\n+    {\n+      tree ctype = build_ctype (type);\n+      gcc_assert (TYPE_ASSOCIATIVE_ARRAY (ctype));\n+\n+      value = build_constructor_single (ctype, TYPE_FIELDS (ctype),\n+\t\t\t\t\tnull_pointer_node);\n+    }\n+\n+  /* For delegates, set the frame and function pointer fields to null.  */\n+  else if (tb->ty == Tdelegate)\n+    value = build_delegate_cst (null_pointer_node, null_pointer_node, type);\n+\n+  /* Simple zero constant for all other types.  */\n+  else\n+    value = build_zero_cst (build_ctype (type));\n+\n+  TREE_CONSTANT (value) = 1;\n+  return value;\n+}\n+\n /* Build a dereference into the virtual table for OBJECT to retrieve\n    a function pointer of type FNTYPE at position INDEX.  */\n "}, {"sha": "e9aa457d852b3d884a5ca01bb06d684d14f97827", "filename": "gcc/d/d-convert.cc", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e95646e734c1c64ea4e1a761b414581534e1d8c/gcc%2Fd%2Fd-convert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e95646e734c1c64ea4e1a761b414581534e1d8c/gcc%2Fd%2Fd-convert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-convert.cc?ref=5e95646e734c1c64ea4e1a761b414581534e1d8c", "patch": "@@ -560,18 +560,12 @@ convert_expr (tree exp, Type *etype, Type *totype)\n \n     case Tnull:\n       /* Casting from typeof(null) is represented as all zeros.  */\n-      if (tbtype->ty == Tarray)\n-\t{\n-\t  tree ptrtype = build_ctype (tbtype->nextOf ()->pointerTo ());\n-\t  return d_array_value (build_ctype (totype), size_int (0),\n-\t\t\t\tbuild_nop (ptrtype, exp));\n-\t}\n-      else if (tbtype->ty == Taarray)\n-\treturn build_constructor (build_ctype (totype), NULL);\n-      else if (tbtype->ty == Tdelegate)\n-\treturn build_delegate_cst (exp, null_pointer_node, totype);\n+      result = build_typeof_null_value (totype);\n \n-      return build_zero_cst (build_ctype (totype));\n+      /* Make sure the expression is still evaluated if necessary.  */\n+      if (TREE_SIDE_EFFECTS (exp))\n+\tresult = compound_expr (exp, result);\n+      break;\n \n     case Tvector:\n       if (tbtype->ty == Tsarray)"}, {"sha": "6ffb0f32a1f77c9094588c2b0ac0e2ea2283778a", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e95646e734c1c64ea4e1a761b414581534e1d8c/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e95646e734c1c64ea4e1a761b414581534e1d8c/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=5e95646e734c1c64ea4e1a761b414581534e1d8c", "patch": "@@ -511,6 +511,7 @@ extern tree delegate_object (tree);\n extern tree build_delegate_cst (tree, tree, Type *);\n extern tree build_method_call (tree, tree, Type *);\n extern void extract_from_method_call (tree, tree &, tree &);\n+extern tree build_typeof_null_value (Type *);\n extern tree build_vindex_ref (tree, tree, size_t);\n extern tree d_save_expr (tree);\n extern tree stabilize_expr (tree *);"}, {"sha": "15754a1dc2efce73f625e86f30d9b883e726058f", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e95646e734c1c64ea4e1a761b414581534e1d8c/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e95646e734c1c64ea4e1a761b414581534e1d8c/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=5e95646e734c1c64ea4e1a761b414581534e1d8c", "patch": "@@ -2941,33 +2941,7 @@ class ExprVisitor : public Visitor\n \n   void visit (NullExp *e)\n   {\n-    Type *tb = e->type->toBasetype ();\n-    tree value;\n-\n-    /* Handle certain special case conversions, where the underlying type is an\n-       aggregate with a nullable interior pointer.  */\n-    if (tb->ty == Tarray)\n-      {\n-\t/* For dynamic arrays, set length and pointer fields to zero.  */\n-\tvalue = d_array_value (build_ctype (e->type), size_int (0),\n-\t\t\t       null_pointer_node);\n-      }\n-    else if (tb->ty == Taarray)\n-      {\n-\t/* For associative arrays, set the pointer field to null.  */\n-\tvalue = build_constructor (build_ctype (e->type), NULL);\n-      }\n-    else if (tb->ty == Tdelegate)\n-      {\n-\t/* For delegates, set the frame and function pointer to null.  */\n-\tvalue = build_delegate_cst (null_pointer_node,\n-\t\t\t\t    null_pointer_node, e->type);\n-      }\n-    else\n-      value = d_convert (build_ctype (e->type), integer_zero_node);\n-\n-    TREE_CONSTANT (value) = 1;\n-    this->result_ = value;\n+    this->result_ = build_typeof_null_value (e->type);\n   }\n \n   /* Build a vector literal.  */"}]}