{"sha": "d5ea2ac4c76753a47f089cdd23a0da18d7dd443a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVlYTJhYzRjNzY3NTNhNDdmMDg5Y2RkMjNhMGRhMThkN2RkNDQzYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-09T22:32:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-09T22:32:57Z"}, "message": "(delete_if_ordinary): New function.\n\n(delete_temp_files, delete_failure_queue): Call it.\n\nFrom-SVN: r7267", "tree": {"sha": "0083bd8c22e6201275dc10cb303cd2bbd458fb55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0083bd8c22e6201275dc10cb303cd2bbd458fb55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5ea2ac4c76753a47f089cdd23a0da18d7dd443a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ea2ac4c76753a47f089cdd23a0da18d7dd443a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ea2ac4c76753a47f089cdd23a0da18d7dd443a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ea2ac4c76753a47f089cdd23a0da18d7dd443a/comments", "author": null, "committer": null, "parents": [{"sha": "5a76b34913288389fa0a7c22b3e40855ec34d217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a76b34913288389fa0a7c22b3e40855ec34d217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a76b34913288389fa0a7c22b3e40855ec34d217"}], "stats": {"total": 72, "additions": 31, "deletions": 41}, "files": [{"sha": "1cec450138e9e5d8e9d111544baa1cdbb1f45d0b", "filename": "gcc/gcc.c", "status": "modified", "additions": 31, "deletions": 41, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ea2ac4c76753a47f089cdd23a0da18d7dd443a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ea2ac4c76753a47f089cdd23a0da18d7dd443a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=d5ea2ac4c76753a47f089cdd23a0da18d7dd443a", "patch": "@@ -207,6 +207,12 @@ static char *find_a_file\tPROTO((struct path_prefix *, char *, int));\n static void add_prefix\t\tPROTO((struct path_prefix *, char *, int, int, int *));\n static char *skip_whitespace\tPROTO((char *));\n static void record_temp_file\tPROTO((char *, int, int));\n+static void delete_if_ordinary\tPROTO((char *));\n+static void delete_temp_files\tPROTO((void));\n+static void delete_failure_queue PROTO((void));\n+static void clear_failure_queue PROTO((void));\n+static char *choose_temp_base_try PROTO((char *, char *));\n+static void choose_temp_base\tPROTO((void));\n static int check_live_switch\tPROTO((int, int));\n static char *handle_braces\tPROTO((char *));\n static char *save_string\tPROTO((char *, int));\n@@ -1370,35 +1376,34 @@ record_temp_file (filename, always_delete, fail_delete)\n \n /* Delete all the temporary files whose names we previously recorded.  */\n \n+static void\n+delete_if_ordinary (name)\n+     char *name;\n+{\n+  struct stat st;\n+#ifdef DEBUG\n+  int i, c;\n+\n+  printf (\"Delete %s? (y or n) \", name);\n+  fflush (stdout);\n+  i = getchar ();\n+  if (i != '\\n')\n+    while ((c = getchar ()) != '\\n' && c != EOF) ;\n+  if (i == 'y' || i == 'Y')\n+#endif /* DEBUG */\n+    if (stat (name, &st) >= 0 && S_ISREG (st.st_mode))\n+      if (unlink (name) < 0)\n+\tif (verbose_flag)\n+\t  perror_with_name (name);\n+}\n+\n static void\n delete_temp_files ()\n {\n   register struct temp_file *temp;\n \n   for (temp = always_delete_queue; temp; temp = temp->next)\n-    {\n-#ifdef DEBUG\n-      int i;\n-      printf (\"Delete %s? (y or n) \", temp->name);\n-      fflush (stdout);\n-      i = getchar ();\n-      if (i != '\\n')\n-\twhile (getchar () != '\\n') ;\n-      if (i == 'y' || i == 'Y')\n-#endif /* DEBUG */\n-\t{\n-\t  struct stat st;\n-\t  if (stat (temp->name, &st) >= 0)\n-\t    {\n-\t      /* Delete only ordinary files.  */\n-\t      if (S_ISREG (st.st_mode))\n-\t\tif (unlink (temp->name) < 0)\n-\t\t  if (verbose_flag)\n-\t\t    perror_with_name (temp->name);\n-\t    }\n-\t}\n-    }\n-\n+    delete_if_ordinary (temp->name);\n   always_delete_queue = 0;\n }\n \n@@ -1410,22 +1415,7 @@ delete_failure_queue ()\n   register struct temp_file *temp;\n \n   for (temp = failure_delete_queue; temp; temp = temp->next)\n-    {\n-#ifdef DEBUG\n-      int i;\n-      printf (\"Delete %s? (y or n) \", temp->name);\n-      fflush (stdout);\n-      i = getchar ();\n-      if (i != '\\n')\n-\twhile (getchar () != '\\n') ;\n-      if (i == 'y' || i == 'Y')\n-#endif /* DEBUG */\n-\t{\n-\t  if (unlink (temp->name) < 0)\n-\t    if (verbose_flag)\n-\t      perror_with_name (temp->name);\n-\t}\n-    }\n+    delete_if_ordinary (temp->name);\n }\n \n static void\n@@ -1439,8 +1429,8 @@ clear_failure_queue ()\n \n static char *\n choose_temp_base_try (try, base)\n-char *try;\n-char *base;\n+     char *try;\n+     char *base;\n {\n   char *rv;\n   if (base)"}]}