{"sha": "1b1838b64cf2ee0cc35ddf75020894de2a84ee38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIxODM4YjY0Y2YyZWUwY2MzNWRkZjc1MDIwODk0ZGUyYTg0ZWUzOA==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@tuliptree.org", "date": "2003-07-09T00:18:19Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2003-07-09T00:18:19Z"}, "message": "partial fix for PR target/10021\n\npartial fix for PR target/10021\n* emit-rtl.c (set_mem_attribute_minus_bitpos): When handle ARRAY_REF,\nloop over new variable t2 instead of t.\n\nFrom-SVN: r69111", "tree": {"sha": "5d12df5ae9a8437a07b1df0a3993da4b751c1d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d12df5ae9a8437a07b1df0a3993da4b751c1d39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b1838b64cf2ee0cc35ddf75020894de2a84ee38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1838b64cf2ee0cc35ddf75020894de2a84ee38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b1838b64cf2ee0cc35ddf75020894de2a84ee38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1838b64cf2ee0cc35ddf75020894de2a84ee38/comments", "author": {"login": "jim-wilson", "id": 11654017, "node_id": "MDQ6VXNlcjExNjU0MDE3", "avatar_url": "https://avatars.githubusercontent.com/u/11654017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jim-wilson", "html_url": "https://github.com/jim-wilson", "followers_url": "https://api.github.com/users/jim-wilson/followers", "following_url": "https://api.github.com/users/jim-wilson/following{/other_user}", "gists_url": "https://api.github.com/users/jim-wilson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jim-wilson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jim-wilson/subscriptions", "organizations_url": "https://api.github.com/users/jim-wilson/orgs", "repos_url": "https://api.github.com/users/jim-wilson/repos", "events_url": "https://api.github.com/users/jim-wilson/events{/privacy}", "received_events_url": "https://api.github.com/users/jim-wilson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "518ed319bd4421ca550826afbe4fa66f98de8bce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/518ed319bd4421ca550826afbe4fa66f98de8bce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/518ed319bd4421ca550826afbe4fa66f98de8bce"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "194c807de5ab62ceba31488953e103b5b8ff728e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1838b64cf2ee0cc35ddf75020894de2a84ee38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1838b64cf2ee0cc35ddf75020894de2a84ee38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b1838b64cf2ee0cc35ddf75020894de2a84ee38", "patch": "@@ -1,3 +1,9 @@\n+2003-07-08  James E Wilson  <wilson@tuliptree.org>\n+\n+\tPR target/10021\n+\t* emit-rtl.c (set_mem_attribute_minus_bitpos): When handle ARRAY_REF,\n+\tloop over new variable t2 instead of t.\n+\n 2003-07-08  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR bootstrap/11455"}, {"sha": "cb05ea8daadba00fdbebd1a26558216044ad97d4", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1838b64cf2ee0cc35ddf75020894de2a84ee38/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1838b64cf2ee0cc35ddf75020894de2a84ee38/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1b1838b64cf2ee0cc35ddf75020894de2a84ee38", "patch": "@@ -1915,11 +1915,14 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n       else if (TREE_CODE (t) == ARRAY_REF)\n \t{\n \t  tree off_tree = size_zero_node;\n+\t  /* We can't modify t, because we use it at the end of the\n+\t     function.  */\n+\t  tree t2 = t;\n \n \t  do\n \t    {\n-\t      tree index = TREE_OPERAND (t, 1);\n-\t      tree array = TREE_OPERAND (t, 0);\n+\t      tree index = TREE_OPERAND (t2, 1);\n+\t      tree array = TREE_OPERAND (t2, 0);\n \t      tree domain = TYPE_DOMAIN (TREE_TYPE (array));\n \t      tree low_bound = (domain ? TYPE_MIN_VALUE (domain) : 0);\n \t      tree unit_size = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (array)));\n@@ -1936,7 +1939,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t\t WITH_RECORD_EXPR; if the component size is, pass our\n \t\t component to one.  */\n \t      if (CONTAINS_PLACEHOLDER_P (index))\n-\t\tindex = build (WITH_RECORD_EXPR, TREE_TYPE (index), index, t);\n+\t\tindex = build (WITH_RECORD_EXPR, TREE_TYPE (index), index, t2);\n \t      if (CONTAINS_PLACEHOLDER_P (unit_size))\n \t\tunit_size = build (WITH_RECORD_EXPR, sizetype,\n \t\t\t\t   unit_size, array);\n@@ -1947,28 +1950,28 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t\t\t\t\t    index,\n \t\t\t\t\t    unit_size)),\n \t\t\t       off_tree));\n-\t      t = TREE_OPERAND (t, 0);\n+\t      t2 = TREE_OPERAND (t2, 0);\n \t    }\n-\t  while (TREE_CODE (t) == ARRAY_REF);\n+\t  while (TREE_CODE (t2) == ARRAY_REF);\n \n-\t  if (DECL_P (t))\n+\t  if (DECL_P (t2))\n \t    {\n-\t      expr = t;\n+\t      expr = t2;\n \t      offset = NULL;\n \t      if (host_integerp (off_tree, 1))\n \t\t{\n \t\t  HOST_WIDE_INT ioff = tree_low_cst (off_tree, 1);\n \t\t  HOST_WIDE_INT aoff = (ioff & -ioff) * BITS_PER_UNIT;\n-\t\t  align = DECL_ALIGN (t);\n+\t\t  align = DECL_ALIGN (t2);\n \t\t  if (aoff && (unsigned HOST_WIDE_INT) aoff < align)\n \t            align = aoff;\n \t\t  offset = GEN_INT (ioff);\n \t\t  apply_bitpos = bitpos;\n \t\t}\n \t    }\n-\t  else if (TREE_CODE (t) == COMPONENT_REF)\n+\t  else if (TREE_CODE (t2) == COMPONENT_REF)\n \t    {\n-\t      expr = component_ref_for_mem_expr (t);\n+\t      expr = component_ref_for_mem_expr (t2);\n \t      if (host_integerp (off_tree, 1))\n \t\t{\n \t\t  offset = GEN_INT (tree_low_cst (off_tree, 1));\n@@ -1978,10 +1981,10 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t\t the size we got from the type?  */\n \t    }\n \t  else if (flag_argument_noalias > 1\n-\t\t   && TREE_CODE (t) == INDIRECT_REF\n-\t\t   && TREE_CODE (TREE_OPERAND (t, 0)) == PARM_DECL)\n+\t\t   && TREE_CODE (t2) == INDIRECT_REF\n+\t\t   && TREE_CODE (TREE_OPERAND (t2, 0)) == PARM_DECL)\n \t    {\n-\t      expr = t;\n+\t      expr = t2;\n \t      offset = NULL;\n \t    }\n \t}"}]}