{"sha": "471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcxYjZmMWJlMGVmMzUzODU1NWU0ZjJiYzAxYTBlNmQ4Y2UzMzViZg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2000-09-25T10:24:23Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T10:24:23Z"}, "message": "definitions in config/[s-w]* (rest):\n\nChanges add TABs on either or both sides, covering start of line,\nup to any operand for all .*ASM.*_OP definitions.\n\nFrom-SVN: r36612", "tree": {"sha": "ab28b23121e852d6439f10f27423f8e97195e94e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab28b23121e852d6439f10f27423f8e97195e94e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76bbee81601a2978a0263ed90508f7a9bf43189f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76bbee81601a2978a0263ed90508f7a9bf43189f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76bbee81601a2978a0263ed90508f7a9bf43189f"}], "stats": {"total": 148, "additions": 90, "deletions": 58}, "files": [{"sha": "d7ba24a651ce4fa5c2483d588ab63c2c4bd90e5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -227,6 +227,38 @@\n \t* config/rs6000/sol2.h (ASM_STABN_OP): Here.\n \t* config/rs6000/sysv4.h (SKIP_ASM_OP, LOCAL_ASM_OP, LCOMM_ASM_OP):\n \tHere.\n+\t* config/sh/sh.h (SET_ASM_OP, BSS_SECTION_ASM_OP,\n+\tUNALIGNED_SHORT_ASM_OP, UNALIGNED_INT_ASM_OP): Here.\n+\t* config/sparc/linux.h (COMMON_ASM_OP): Here.\n+\t* config/sparc/linux64.h (COMMON_ASM_OP,\n+\tUNALIGNED_DOUBLE_INT_ASM_OP): Here.\n+\t* config/sparc/litecoff.h (BSS_SECTION_ASM_OP,\n+\tCTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP, INT_ASM_OP): Here.\n+\t* config/sparc/lynx.h (BSS_SECTION_ASM_OP): Here.\n+\t* config/sparc/pbd.h (ASM_INT_OP): Here.\n+\t* config/sparc/sp64-elf.h (UNALIGNED_LONGLONG_ASM_OP): Here.\n+\t* config/sparc/sparc.h (ASM_BYTE_OP, TEXT_SECTION_ASM_OP,\n+\tDATA_SECTION_ASM_OP, IDENT_ASM_OP): Here.\n+\t* config/sparc/sun4gas.h (UNALIGNED_DOUBLE_INT_ASM_OP,\n+\tUNALIGNED_INT_ASM_OP, UNALIGNED_SHORT_ASM_OP): Here.\n+\t* config/sparc/sysv4.h (STRING_ASM_OP, COMMON_ASM_OP, SKIP_ASM_OP,\n+\tUNALIGNED_DOUBLE_INT_ASM_OP, UNALIGNED_INT_ASM_OP,\n+\tUNALIGNED_SHORT_ASM_OP, PUSHSECTION_ASM_OP, POPSECTION_ASM_OP,\n+\tTEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP, BSS_SECTION_ASM_OP,\n+\tCONST_SECTION_ASM_OP, INIT_SECTION_ASM_OP, FINI_SECTION_ASM_OP,\n+\tCTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP,\n+\tEH_FRAME_SECTION_ASM_OP): Here.\n+\t* config/sparc/vxsim.h (COMMON_ASM_OP): Here.\n+\t* config/spur/spur.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP):\n+\tHere.\n+\t* config/tahoe/tahoe.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP):\n+\tHere.\n+\t* config/v850/v850.h (SCOMMON_ASM_OP, ZCOMMON_ASM_OP,\n+\tTCOMMON_ASM_OP): Here.\n+\t* config/vax/vax.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP):\n+\tHere.\n+\t* config/we32k/we32k.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP,\n+\tASM_BYTE_OP): Here.\n \n 2000-09-25  Richard Henderson  <rth@cygnus.com>\n "}, {"sha": "a73ebadaa7d329e190c3834967a2e629c6654cc7", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -1837,7 +1837,7 @@ while (0)\n #define ASM_APP_OFF  \t\t\"\"\n #define FILE_ASM_OP \t\t\"\\t.file\\n\"\n #define IDENT_ASM_OP \t\t\"\\t.ident\\n\"\n-#define SET_ASM_OP\t\t\".set\"\n+#define SET_ASM_OP\t\t\"\\t.set\\t\"\n \n /* How to change between sections.  */\n \n@@ -1874,7 +1874,7 @@ dtors_section()\t\t\t\t\t\t\t\\\n    `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n    used.  */\n #ifndef BSS_SECTION_ASM_OP\n-#define BSS_SECTION_ASM_OP\t\".section\\t.bss\"\n+#define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n #endif\n \n /* Like `ASM_OUTPUT_BSS' except takes the required alignment as a\n@@ -2086,8 +2086,8 @@ do { char dstr[30];\t\t\t\t\t\\\n   fprintf ((STREAM), \"\\t.byte\\t%d\\n\", (VALUE)) \t\\\n \n /* The next two are used for debug info when compiling with -gdwarf.  */\n-#define UNALIGNED_SHORT_ASM_OP\t\".uaword\"\n-#define UNALIGNED_INT_ASM_OP\t\".ualong\"\n+#define UNALIGNED_SHORT_ASM_OP\t\"\\t.uaword\\t\"\n+#define UNALIGNED_INT_ASM_OP\t\"\\t.ualong\\t\"\n \n /* Loop alignment is now done in machine_dependent_reorg, so that\n    branch shortening can know about it.  */"}, {"sha": "a68c813c3d63fce39f9b0ebd479e5057f772c6c4", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -214,7 +214,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n #undef COMMON_ASM_OP\n-#define COMMON_ASM_OP \"\\t.common\"\n+#define COMMON_ASM_OP \"\\t.common\\t\"\n \n /* This is how to output a definition of an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.  */"}, {"sha": "6795361e2c04dd56fb18ea2c7bc02513f96596b9", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -338,7 +338,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n #undef COMMON_ASM_OP\n-#define COMMON_ASM_OP \"\\t.common\"\n+#define COMMON_ASM_OP \"\\t.common\\t\"\n \n /* This is how to output a definition of an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.  */\n@@ -368,7 +368,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    misnamed.  These should all refer to explicit sizes (half/word/xword?),\n    anything other than short/int/long/etc.  */\n \n-#define UNALIGNED_DOUBLE_INT_ASM_OP\t\".uaxword\"\n+#define UNALIGNED_DOUBLE_INT_ASM_OP\t\"\\t.uaxword\\t\"\n \n /* DWARF bits.  */\n "}, {"sha": "f83c588dbb0c9b451e2fec8df903e9e9b33e8278", "filename": "gcc/config/sparc/litecoff.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flitecoff.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for SPARClite w/o FPU, COFF.\n-   Copyright (C) 1994, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1996, 2000 Free Software Foundation, Inc.\n    Written by Ken Raeburn (raeburn@cygnus.com).\n \n This file is part of GNU CC.\n@@ -25,7 +25,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef SELECT_SECTION\n #undef SELECT_RTX_SECTION\n-#define BSS_SECTION_ASM_OP\t\".section\\t\\\".bss\\\"\"\n+#define BSS_SECTION_ASM_OP\t\"\\t.section\\t\\\".bss\\\"\"\n \n #include \"svr3.h\"\n \n@@ -45,9 +45,9 @@ Boston, MA 02111-1307, USA.  */\n /* Support the ctors and dtors sections for g++.  */\n \n #undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"x\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n #undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"x\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n \n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n@@ -85,7 +85,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define INT_ASM_OP \".long\"\n+#define INT_ASM_OP \"\\t.long\\t\"\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */"}, {"sha": "2bfda576a4662537875c6f76dcba93032a38c8a8", "filename": "gcc/config/sparc/lynx.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flynx.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for SPARC running LynxOS.\n-   Copyright (C) 1993, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -24,7 +24,7 @@ Boston, MA 02111-1307, USA.  */\n #undef SELECT_SECTION\n #undef SELECT_RTX_SECTION\n \n-#define BSS_SECTION_ASM_OP\t\".section\\t\\\".bss\\\"\"\n+#define BSS_SECTION_ASM_OP\t\"\\t.section\\t\\\".bss\\\"\"\n \n #include <lynx.h>\n "}, {"sha": "eaeef3d44c08dfb7c225851e91b87ee12b5a3b3b", "filename": "gcc/config/sparc/pbd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fpbd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fpbd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpbd.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, Citicorp/TTI Unicom PBD\n    version (using GAS and COFF (encapsulated is unacceptable) )\n-   Copyright (C) 1990, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1990, 1996, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -153,4 +153,4 @@ Boston, MA 02111-1307, USA.  */\n \t     line, sym_lineno, sym_lineno);\t\t\\\n     sym_lineno += 1; }\n \n-#define ASM_INT_OP \".long \"\n+#define ASM_INT_OP \"\\t.long \""}, {"sha": "4d7f913c4865edbce31f1728b92129795d19c2c5", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -129,7 +129,7 @@ crtbegin.o%s \\\n    misnamed.  These should all refer to explicit sizes (half/word/xword?),\n    anything other than short/int/long/etc.  */\n \n-#define UNALIGNED_LONGLONG_ASM_OP\t\".uaxword\"\n+#define UNALIGNED_LONGLONG_ASM_OP\t\"\\t.uaxword\\t\"\n \n /* DWARF stuff.  */\n "}, {"sha": "cdab0720835ec45c56a802ff106eed5b3d3f3c8a", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -2949,18 +2949,18 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_LONGLONG\t\".xword\"\n #define ASM_LONG\t\".word\"\n #define ASM_SHORT\t\".half\"\n-#define ASM_BYTE_OP\t\".byte\"\n+#define ASM_BYTE_OP\t\"\\t.byte\\t\"\n #define ASM_FLOAT\t\".single\"\n #define ASM_DOUBLE\t\".double\"\n #define ASM_LONGDOUBLE\t\".xxx\"\t\t/* ??? Not known (or used yet). */\n \n /* Output before read-only data.  */\n \n-#define TEXT_SECTION_ASM_OP \".text\"\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n \n /* Output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \".data\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n@@ -3218,7 +3218,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-#define IDENT_ASM_OP \".ident\"\n+#define IDENT_ASM_OP \"\\t.ident\\t\"\n \n /* Output #ident as a .ident.  */\n "}, {"sha": "0848ecd11acaf538b3bab10ab91ec0bcc512c6a6", "filename": "gcc/config/sparc/sun4gas.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fsun4gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fsun4gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsun4gas.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for SunOS 4.x with gas\n-   Copyright (C) 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -19,9 +19,9 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* gas supports unaligned data.  */\n-#define UNALIGNED_DOUBLE_INT_ASM_OP \".uaxword\"\n-#define UNALIGNED_INT_ASM_OP\t\".uaword\"\n-#define UNALIGNED_SHORT_ASM_OP\t\".uahalf\"\n+#define UNALIGNED_DOUBLE_INT_ASM_OP \"\\t.uaxword\\t\"\n+#define UNALIGNED_INT_ASM_OP\t\"\\t.uaword\\t\"\n+#define UNALIGNED_SHORT_ASM_OP\t\"\\t.uahalf\\t\"\n \n /* defaults.h will define DWARF2_UNWIND_INFO for us.  */\n #undef DWARF2_UNWIND_INFO"}, {"sha": "5c5fec899a2eeb4dd632f695d253385ce390df1b", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for GNU compiler for Sparc running System V.4\n-   Copyright (C) 1991, 92, 95, 96, 97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 92, 95, 96, 97, 1998, 2000 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GNU CC.\n@@ -92,14 +92,14 @@ Boston, MA 02111-1307, USA.  */\n    to keep the Sparc/svr4 assembler somewhat compatible with the Sparc/SunOS\n    assembler.  */\n \n-#define STRING_ASM_OP\t\t\".asciz\"\n-#define COMMON_ASM_OP\t\t\".common\"\n-#define SKIP_ASM_OP\t\t\".skip\"\n-#define UNALIGNED_DOUBLE_INT_ASM_OP \".uaxword\"\n-#define UNALIGNED_INT_ASM_OP\t\".uaword\"\n-#define UNALIGNED_SHORT_ASM_OP\t\".uahalf\"\n-#define PUSHSECTION_ASM_OP\t\".pushsection\"\n-#define POPSECTION_ASM_OP\t\".popsection\"\n+#define STRING_ASM_OP\t\t\"\\t.asciz\\t\"\n+#define COMMON_ASM_OP\t\t\"\\t.common\\t\"\n+#define SKIP_ASM_OP\t\t\"\\t.skip\\t\"\n+#define UNALIGNED_DOUBLE_INT_ASM_OP \"\\t.uaxword\\t\"\n+#define UNALIGNED_INT_ASM_OP\t\"\\t.uaword\\t\"\n+#define UNALIGNED_SHORT_ASM_OP\t\"\\t.uahalf\\t\"\n+#define PUSHSECTION_ASM_OP\t\"\\t.pushsection\\t\"\n+#define POPSECTION_ASM_OP\t\"\\t.popsection\"\n \n /* This is defined in sparc.h but is not used by svr4.h.  */\n #undef ASM_LONG\n@@ -155,12 +155,12 @@ do { ASM_OUTPUT_ALIGN ((FILE), Pmode == SImode ? 2 : 3);\t\t\\\n    *not* to push the previous section name onto the assembler's\n    section names stack (as we do often in dwarfout.c).  */\n \n-#define TEXT_SECTION_ASM_OP\t\".section\\t\\\".text\\\"\"\n-#define DATA_SECTION_ASM_OP\t\".section\\t\\\".data\\\"\"\n-#define BSS_SECTION_ASM_OP\t\".section\\t\\\".bss\\\"\"\n-#define CONST_SECTION_ASM_OP\t\".section\\t\\\".rodata\\\"\"\n-#define INIT_SECTION_ASM_OP\t\".section\\t\\\".init\\\"\"\n-#define FINI_SECTION_ASM_OP\t\".section\\t\\\".fini\\\"\"\n+#define TEXT_SECTION_ASM_OP\t\"\\t.section\\t\\\".text\\\"\"\n+#define DATA_SECTION_ASM_OP\t\"\\t.section\\t\\\".data\\\"\"\n+#define BSS_SECTION_ASM_OP\t\"\\t.section\\t\\\".bss\\\"\"\n+#define CONST_SECTION_ASM_OP\t\"\\t.section\\t\\\".rodata\\\"\"\n+#define INIT_SECTION_ASM_OP\t\"\\t.section\\t\\\".init\\\"\"\n+#define FINI_SECTION_ASM_OP\t\"\\t.section\\t\\\".fini\\\"\"\n \n /* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n  \n@@ -178,11 +178,11 @@ do { ASM_OUTPUT_ALIGN ((FILE), Pmode == SImode ? 2 : 3);\t\t\\\n    via the SHF_WRITE attribute.)  */\n  \n #undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP    \".section\\t\\\".ctors\\\",#alloc,#write\"\n+#define CTORS_SECTION_ASM_OP    \"\\t.section\\t\\\".ctors\\\",#alloc,#write\"\n #undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP    \".section\\t\\\".dtors\\\",#alloc,#write\"\n+#define DTORS_SECTION_ASM_OP    \"\\t.section\\t\\\".dtors\\\",#alloc,#write\"\n #undef EH_FRAME_SECTION_ASM_OP\n-#define EH_FRAME_SECTION_ASM_OP \".section\\t\\\".eh_frame\\\",#alloc,#write\"\n+#define EH_FRAME_SECTION_ASM_OP \"\\t.section\\t\\\".eh_frame\\\",#alloc,#write\"\n \n /* A C statement to output something to the assembler file to switch to section\n    NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or"}, {"sha": "eb51dc69e53f23b38e2e101ce67163ad8ba9b1a6", "filename": "gcc/config/sparc/vxsim.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxsim.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -67,7 +67,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n #undef COMMON_ASM_OP\n-#define COMMON_ASM_OP \"\\t.common\"\n+#define COMMON_ASM_OP \"\\t.common\\t\"\n \n /* This is how to output a definition of an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.  */"}, {"sha": "2627583bfc8e6eb1f53d049094dc248e69194e28", "filename": "gcc/config/spur/spur.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fspur%2Fspur.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fspur%2Fspur.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspur%2Fspur.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for SPUR chip.\n-   Copyright (C) 1988, 1995, 1996, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1995, 1996, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -835,11 +835,11 @@ enum reg_class { NO_REGS, GENERAL_REGS, FP_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n /* Output before read-only data.  */\n \n-#define TEXT_SECTION_ASM_OP \".text\"\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n \n /* Output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \".data\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */"}, {"sha": "240f39942973605294255ca1cdfa9cb7e3884732", "filename": "gcc/config/tahoe/tahoe.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Tahoe version.\n-   Copyright (C) 1989, 93, 94, 95, 96, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 93, 94, 95, 96, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -730,11 +730,11 @@ enum reg_class {NO_REGS,GENERAL_REGS,FPP_REG,ALL_REGS,LIM_REG_CLASSES};\n \n /* what to output before read-only data.  */\n \n-#define TEXT_SECTION_ASM_OP \".text\"\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n \n /* what to output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \".data\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n \n /* this is what we call each of the regs. notice that the FPP reg is   */\n /* called \"ac\". This should never get used due to the way we've set    */"}, {"sha": "eb41ff973a2bb0363664b4127f5d2ca2158441ae", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -1162,9 +1162,9 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n #define ROSDATA_SECTION_ASM_OP \"\\t.section .rosdata,\\\"a\\\"\"\n #define ROZDATA_SECTION_ASM_OP \"\\t.section .rozdata,\\\"a\\\"\"\n \n-#define SCOMMON_ASM_OP \t       \".scomm\"\n-#define ZCOMMON_ASM_OP \t       \".zcomm\"\n-#define TCOMMON_ASM_OP \t       \".tcomm\"\n+#define SCOMMON_ASM_OP \t       \"\\t.scomm\\t\"\n+#define ZCOMMON_ASM_OP \t       \"\\t.zcomm\\t\"\n+#define TCOMMON_ASM_OP \t       \"\\t.tcomm\\t\"\n \n /* A C statement or statements to switch to the appropriate section\n    for output of EXP.  You can assume that EXP is either a `VAR_DECL'"}, {"sha": "8b15061a56a1949579d9c9b39d04190b4aa6ed48", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -1032,11 +1032,11 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n /* Output before read-only data.  */\n \n-#define TEXT_SECTION_ASM_OP \".text\"\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n \n /* Output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \".data\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */"}, {"sha": "23bf1149c6a39aa9557bedf65387eea8a0224fdd", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=471b6f1be0ef3538555e4f2bc01a0e6d8ce335bf", "patch": "@@ -728,11 +728,11 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n \n /* Output before code.  */\n \n-#define TEXT_SECTION_ASM_OP \".text\"\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n \n /* Output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \".data\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n \n /* Read-only data goes in the data section because\n    AT&T's assembler doesn't guarantee the proper alignment\n@@ -801,7 +801,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n \n /* Assembler pseudo to introduce byte constants.  */\n \n-#define ASM_BYTE_OP \"\\t.byte\"\n+#define ASM_BYTE_OP \"\\t.byte\\t\"\n \n /* This is how to output an assembler line defining a `double' constant.  */\n "}]}