{"sha": "72e2386f8714da23ec900a93c3aa403dcaf80009", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJlMjM4NmY4NzE0ZGEyM2VjOTAwYTkzYzNhYTQwM2RjYWY4MDAwOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-08-28T06:19:35Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-08-28T06:19:35Z"}, "message": "c_locale_gnu.cc: Move facet info to separate files...\n\n\n2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/locale/c_locale_gnu.cc: Move facet info to separate files...\n\t* config/locale/c_locale_generic.cc: Same.\n\t* config/locale/moneypunct_members_gnu.cc: New file.\n\t* config/locale/moneypunct_members_generic.cc: New file.\n\t* config/locale/numpunct_members_gnu.cc: New file.\n\t* config/locale/numpunct_members_generic.cc: New file.\n\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Add moneypunct, numpunct\n\toptions.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* src/Makefile.am (sources): And here.\n\t* src/Makefile.in: Regenerate.\n\n\tRename for consistency with rest of testsuite.\n\t* testsuite/22_locale/codecvt.cc: New file.\n\t* testsuite/22_locale/money_put.cc: New file.\n\t* testsuite/22_locale/money_put_members_char.cc: New file.\n\nFrom-SVN: r45224", "tree": {"sha": "df3f6fe2cd89436b45dfa58bbb336e9d62720517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df3f6fe2cd89436b45dfa58bbb336e9d62720517"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72e2386f8714da23ec900a93c3aa403dcaf80009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e2386f8714da23ec900a93c3aa403dcaf80009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72e2386f8714da23ec900a93c3aa403dcaf80009", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e2386f8714da23ec900a93c3aa403dcaf80009/comments", "author": null, "committer": null, "parents": [{"sha": "79e8ec0eb26d501071212a040332a9336ae1b3c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e8ec0eb26d501071212a040332a9336ae1b3c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e8ec0eb26d501071212a040332a9336ae1b3c5"}], "stats": {"total": 2771, "additions": 1565, "deletions": 1206}, "files": [{"sha": "0c411a15f7b059b148233902cc4c497da6adb2f3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -1,3 +1,23 @@\n+2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/locale/c_locale_gnu.cc: Move facet info to separate files...\n+\t* config/locale/c_locale_generic.cc: Same.\n+\t* config/locale/moneypunct_members_gnu.cc: New file.\n+\t* config/locale/moneypunct_members_generic.cc: New file.\t\n+\t* config/locale/numpunct_members_gnu.cc: New file.\n+\t* config/locale/numpunct_members_generic.cc: New file.\t\n+\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Add moneypunct, numpunct\n+\toptions.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* src/Makefile.am (sources): And here.\n+\t* src/Makefile.in: Regenerate.\n+\t\n+\tRename for consistency with rest of testsuite.\n+\t* testsuite/22_locale/codecvt.cc: New file.\n+\t* testsuite/22_locale/money_put.cc: New file.\n+\t* testsuite/22_locale/money_put_members_char.cc: New file.\n+\t\n 2001-08-27  Phil Edwards  <pme@sources.redhat.com>\n \n \tPR libstdc++/4143"}, {"sha": "7ba7f7ae8fecd397df759604a3f288fd9fc0a702", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -1058,9 +1058,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/c_locale_generic.h\n       CLOCALE_CC=config/locale/c_locale_generic.cc\n       CCODECVT_H=config/locale/codecvt_specializations_generic.h\n+      CCOLLATE_CC=config/locale/collate_members_generic.cc\n       CMESSAGES_H=config/locale/messages_members_generic.h\n       CMESSAGES_CC=config/locale/messages_members_generic.cc\n-      CCOLLATE_CC=config/locale/collate_specializations_generic.cc\n+      CMONEY_CC=config/locale/moneypunct_members_generic.cc\n+      CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n       ;;\n     xgnu)\n       AC_MSG_RESULT(gnu)\n@@ -1084,9 +1086,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/c_locale_gnu.h\n       CLOCALE_CC=config/locale/c_locale_gnu.cc\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n+      CCOLLATE_CC=config/locale/collate_members_gnu.cc\n       CMESSAGES_H=config/locale/messages_members_gnu.h\n       CMESSAGES_CC=config/locale/messages_members_gnu.cc\n-      CCOLLATE_CC=config/locale/collate_specializations_gnu.cc\n+      CMONEY_CC=config/locale/moneypunct_members_gnu.cc\n+      CNUMERIC_CC=config/locale/numpunct_members_gnu.cc\n       ;;\n     xieee_1003.1)\n       AC_MSG_RESULT(generic)\n@@ -1097,9 +1101,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/c_locale_ieee_1003.1-200x.h\n       CLOCALE_CC=config/locale/c_locale_ieee_1003.1-200x.cc\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n+      CCOLLATE_CC=config/locale/collate_members_generic.cc\n       CMESSAGES_H=config/locale/messages_members_ieee_1003.1-200x.h\n       CMESSAGES_CC=config/locale/messages_members_ieee_1003.1-200x.cc\n-      CCOLLATE_CC=config/locale/collate_specializations_generic.cc\n+      CMONEY_CC=config/locale/moneypunct_members_generic.cc\n+      CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n       ;;\n     *)\n       echo \"$enable_clocale is an unknown locale package\" 1>&2\n@@ -1117,8 +1123,10 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_SUBST(CCODECVT_H)\n   AC_SUBST(CMESSAGES_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n-  AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n   AC_LINK_FILES($CCOLLATE_CC, src/collate.cc)\n+  AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n+  AC_LINK_FILES($CMONEY_CC, src/moneypunct.cc)\n+  AC_LINK_FILES($CNUMERIC_CC, src/numpunct.cc)\n ])\n \n "}, {"sha": "23a29c0eeb6829ce83328e4a4ac6a04bcc81efde", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -1070,9 +1070,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/c_locale_generic.h\n       CLOCALE_CC=config/locale/c_locale_generic.cc\n       CCODECVT_H=config/locale/codecvt_specializations_generic.h\n+      CCOLLATE_CC=config/locale/collate_members_generic.cc\n       CMESSAGES_H=config/locale/messages_members_generic.h\n       CMESSAGES_CC=config/locale/messages_members_generic.cc\n-      CCOLLATE_CC=config/locale/collate_specializations_generic.cc\n+      CMONEY_CC=config/locale/moneypunct_members_generic.cc\n+      CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n       ;;\n     xgnu)\n       AC_MSG_RESULT(gnu)\n@@ -1096,9 +1098,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/c_locale_gnu.h\n       CLOCALE_CC=config/locale/c_locale_gnu.cc\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n+      CCOLLATE_CC=config/locale/collate_members_gnu.cc\n       CMESSAGES_H=config/locale/messages_members_gnu.h\n       CMESSAGES_CC=config/locale/messages_members_gnu.cc\n-      CCOLLATE_CC=config/locale/collate_specializations_gnu.cc\n+      CMONEY_CC=config/locale/moneypunct_members_gnu.cc\n+      CNUMERIC_CC=config/locale/numpunct_members_gnu.cc\n       ;;\n     xieee_1003.1)\n       AC_MSG_RESULT(generic)\n@@ -1109,9 +1113,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/c_locale_ieee_1003.1-200x.h\n       CLOCALE_CC=config/locale/c_locale_ieee_1003.1-200x.cc\n       CCODECVT_H=config/locale/codecvt_specializations_ieee_1003.1-200x.h\n+      CCOLLATE_CC=config/locale/collate_members_generic.cc\n       CMESSAGES_H=config/locale/messages_members_ieee_1003.1-200x.h\n       CMESSAGES_CC=config/locale/messages_members_ieee_1003.1-200x.cc\n-      CCOLLATE_CC=config/locale/collate_specializations_generic.cc\n+      CMONEY_CC=config/locale/moneypunct_members_generic.cc\n+      CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n       ;;\n     *)\n       echo \"$enable_clocale is an unknown locale package\" 1>&2\n@@ -1129,8 +1135,10 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_SUBST(CCODECVT_H)\n   AC_SUBST(CMESSAGES_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n-  AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n   AC_LINK_FILES($CCOLLATE_CC, src/collate.cc)\n+  AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n+  AC_LINK_FILES($CMONEY_CC, src/moneypunct.cc)\n+  AC_LINK_FILES($CNUMERIC_CC, src/numpunct.cc)\n ])\n \n \n@@ -1959,12 +1967,12 @@ fi])\n # Macro to add for using GNU gettext.\n # Ulrich Drepper <drepper@cygnus.com>, 1995.\n #\n-# This file file be copied and used freely without restrictions.  It can\n+# This file can be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available.\n \n-# serial 3\n+# serial 5\n \n AC_DEFUN(AM_WITH_NLS,\n   [AC_MSG_CHECKING([whether NLS is requested])\n@@ -2006,9 +2014,10 @@ AC_DEFUN(AM_WITH_NLS,\n \t     AC_CHECK_LIB(intl, bindtextdomain,\n \t       [AC_CACHE_CHECK([for gettext in libintl],\n \t\t gt_cv_func_gettext_libintl,\n-\t\t [AC_TRY_LINK([], [return (int) gettext (\"\")],\n-\t\t gt_cv_func_gettext_libintl=yes,\n-\t\t gt_cv_func_gettext_libintl=no)])])\n+\t\t [AC_CHECK_LIB(intl, gettext,\n+\t\t  gt_cv_func_gettext_libintl=yes,\n+\t\t  gt_cv_func_gettext_libintl=no)],\n+\t\t gt_cv_func_gettext_libintl=no)])\n \t   fi\n \n \t   if test \"$gt_cv_func_gettext_libc\" = \"yes\" \\\n@@ -2102,7 +2111,7 @@ AC_DEFUN(AM_WITH_NLS,\n \t  : ;\n \telse\n \t  AC_MSG_RESULT(\n-\t    [found xgettext programs is not GNU xgettext; ignore it])\n+\t    [found xgettext program is not GNU xgettext; ignore it])\n \t  XGETTEXT=\":\"\n \tfi\n       fi\n@@ -2114,6 +2123,12 @@ AC_DEFUN(AM_WITH_NLS,\n       nls_cv_header_intl=intl/libintl.h\n       nls_cv_header_libgt=intl/libgettext.h\n     fi\n+    AC_LINK_FILES($nls_cv_header_libgt, $nls_cv_header_intl)\n+    AC_OUTPUT_COMMANDS(\n+     [case \"$CONFIG_FILES\" in *po/Makefile.in*)\n+        sed -e \"/POTFILES =/r po/POTFILES\" po/Makefile.in > po/Makefile\n+      esac])\n+\n \n     # If this is used in GNU gettext we have to set USE_NLS to `yes'\n     # because some of the sources are only built for this goal.\n@@ -2158,9 +2173,9 @@ AC_DEFUN(AM_GNU_GETTEXT,\n    AC_REQUIRE([AC_FUNC_MMAP])dnl\n \n    AC_CHECK_HEADERS([argz.h limits.h locale.h nl_types.h malloc.h string.h \\\n-unistd.h values.h sys/param.h])\n+unistd.h sys/param.h])\n    AC_CHECK_FUNCS([getcwd munmap putenv setenv setlocale strchr strcasecmp \\\n-__argz_count __argz_stringify __argz_next])\n+strdup __argz_count __argz_stringify __argz_next])\n \n    if test \"${ac_cv_func_stpcpy+set}\" != \"set\"; then\n      AC_CHECK_FUNCS(stpcpy)\n@@ -2268,7 +2283,7 @@ __argz_count __argz_stringify __argz_next])\n # Search path for a program which passes the given test.\n # Ulrich Drepper <drepper@cygnus.com>, 1996.\n #\n-# This file file be copied and used freely without restrictions.  It can\n+# This file can be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available.\n@@ -2316,7 +2331,7 @@ AC_SUBST($1)dnl\n # Check whether LC_MESSAGES is available in <locale.h>.\n # Ulrich Drepper <drepper@cygnus.com>, 1995.\n #\n-# This file file be copied and used freely without restrictions.  It can\n+# This file can be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available.\n@@ -2329,8 +2344,7 @@ AC_DEFUN(AM_LC_MESSAGES,\n       [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],\n        am_cv_val_LC_MESSAGES=yes, am_cv_val_LC_MESSAGES=no)])\n     if test $am_cv_val_LC_MESSAGES = yes; then\n-      AC_DEFINE(HAVE_LC_MESSAGES, 1,\n-\t\t[Define if your locale.h file contains LC_MESSAGES.])\n+      AC_DEFINE(HAVE_LC_MESSAGES)\n     fi\n   fi])\n "}, {"sha": "fa94318041116d5f5025e31fb8a019d7e0080747", "filename": "libstdc++-v3/config/locale/c_locale_generic.cc", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_generic.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -48,65 +48,4 @@ namespace std\n   __c_locale\n   locale::facet::_S_clone_c_locale(__c_locale&)\n   { return __c_locale(); }\n-\n-  template<> \n-    void\n-    numpunct<char>::_M_initialize_numpunct(__c_locale)\n-    {\n-      // \"C\" locale\n-      _M_decimal_point = '.';\n-      _M_thousands_sep = ',';\n-      _M_grouping = \"\";\n-      _M_truename = \"true\";\n-      _M_falsename = \"false\";\n-    }\n-      \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<> \n-    void\n-    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale)\n-    {\n-      // \"C\" locale\n-      _M_decimal_point = L'.';\n-      _M_thousands_sep = L',';\n-      _M_grouping = \"\";\n-      _M_truename = L\"true\";\n-      _M_falsename = L\"false\";\n-    }\n-#endif\n-\n-  template<> \n-    void\n-    moneypunct<char>::_M_initialize_moneypunct(__c_locale)\n-    {\n-      // \"C\" locale\n-      _M_decimal_point = '.';\n-      _M_thousands_sep = ',';\n-      _M_grouping = \"\";\n-      _M_curr_symbol = string_type();\n-      _M_positive_sign = string_type();\n-      _M_negative_sign = string_type();\n-      _M_frac_digits = 0;\n-      _M_pos_format = money_base::_S_default_pattern;\n-      _M_neg_format = money_base::_S_default_pattern;\n-    }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<> \n-    void\n-    moneypunct<wchar_t>::_M_initialize_moneypunct(__c_locale)\n-    {\n-      // \"C\" locale\n-      _M_decimal_point = L'.';\n-      _M_thousands_sep = L',';\n-      _M_grouping = \"\";\n-      _M_curr_symbol = string_type();\n-      _M_positive_sign = string_type();\n-      _M_negative_sign = string_type();\n-      _M_frac_digits = 0;\n-      _M_pos_format = money_base::_S_default_pattern;\n-      _M_neg_format = money_base::_S_default_pattern;\n-    }\n-#endif\n }  // namespace std\n-"}, {"sha": "3e583e0eea3424d9a18fd7a38b8d8c6f99a6b113", "filename": "libstdc++-v3/config/locale/c_locale_gnu.cc", "status": "modified", "additions": 0, "deletions": 184, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -64,188 +64,4 @@ namespace std\n   __c_locale\n   locale::facet::_S_clone_c_locale(__c_locale& __cloc)\n   { return __duplocale(__cloc); }\n-\n-  template<> \n-    void\n-    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc)\n-    {\n-      if (!__cloc)\n-\t{\n-\t  // \"C\" locale\n-\t  _M_decimal_point = '.';\n-\t  _M_thousands_sep = ',';\n-\t  _M_grouping = \"\";\n-\t}\n-      else\n-\t{\n-\t  // Named locale.\n-\t  _M_decimal_point = *(__nl_langinfo_l(RADIXCHAR, __cloc));\n-\t  _M_thousands_sep = *(__nl_langinfo_l(THOUSEP, __cloc));\n-\t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n-\t}\n-      // NB: There is no way to extact this info from posix locales.\n-      // _M_truename = __nl_langinfo_l(YESSTR, __cloc);\n-      _M_truename = \"true\";\n-      // _M_falsename = __nl_langinfo_l(NOSTR, __cloc);\n-      _M_falsename = \"false\";\n-    }\n-      \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<> \n-    void\n-    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc)\n-    {\n-      if (!__cloc)\n-\t{\n-\t  // \"C\" locale\n-\t  _M_decimal_point = L'.';\n-\t  _M_thousands_sep = L',';\n-\t  _M_grouping = \"\";\n-\t}\n-      else\n-\t{\n-\t  // Named locale.\n-\t  _M_decimal_point = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc));\n-\t  _M_thousands_sep = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC,__cloc));\n-\t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n-\t}\n-      // NB: There is no way to extact this info from posix locales.\n-      // _M_truename = __nl_langinfo_l(YESSTR, __cloc);\n-      _M_truename = L\"true\";\n-      // _M_falsename = __nl_langinfo_l(NOSTR, __cloc);\n-      _M_falsename = L\"false\";\n-    }\n-#endif\n-\n-  template<> \n-    void\n-    moneypunct<char>::_M_initialize_moneypunct(__c_locale __cloc)\n-    {\n-      if (!__cloc)\n-\t{\n-\t  // \"C\" locale\n-\t  _M_decimal_point = '.';\n-\t  _M_thousands_sep = ',';\n-\t  _M_grouping = \"\";\n-\t  _M_curr_symbol = string_type();\n-\t  _M_positive_sign = string_type();\n-\t  _M_negative_sign = string_type();\n-\t  _M_frac_digits = 0;\n-\t  _M_pos_format = money_base::_S_default_pattern;\n-\t  _M_neg_format = money_base::_S_default_pattern;\n-\t}\n-      else\n-\t{\n-\t  // Named locale.\n-\t  _M_decimal_point = *(__nl_langinfo_l(__MON_DECIMAL_POINT, __cloc));\n-\t  _M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, __cloc));\n-\t  _M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n-\t  _M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n-\t  _M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n-\t  if (intl)\n-\t    {\n-\t      _M_curr_symbol = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n-\t      _M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, __cloc));\n-\t      char __ppreceeds = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, \n-\t\t\t\t\t\t   __cloc));\n-\t      char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n-\t      char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n-\t      _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, \n-\t\t\t\t\t\t   __pposn);\n-\t      char __npreceeds = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, \n-\t\t\t\t\t\t   __cloc));\n-\t      char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n-\t      char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n-\t      _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, \n-\t\t\t\t\t\t   __nposn);\n-\t    }\n-\t  else\n-\t    {\n-\t      _M_curr_symbol = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n-\t      _M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n-\t      char __ppreceeds = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n-\t      char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n-\t      char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n-\t      _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, \n-\t\t\t\t\t\t   __pposn);\n-\t      char __npreceeds = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n-\t      char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n-\t      char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n-\t      _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, \n-\t\t\t\t\t\t   __nposn);\n-\t    }\n-\t}\n-    }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<> \n-    void\n-    moneypunct<wchar_t>::_M_initialize_moneypunct(__c_locale __cloc)\n-    {\n-      if (!__cloc)\n-\t{\n-\t  // \"C\" locale\n-\t  _M_decimal_point = L'.';\n-\t  _M_thousands_sep = L',';\n-\t  _M_grouping = \"\";\n-\t  _M_curr_symbol = string_type();\n-\t  _M_positive_sign = string_type();\n-\t  _M_negative_sign = string_type();\n-\t  _M_frac_digits = 0;\n-\t  _M_pos_format = money_base::_S_default_pattern;\n-\t  _M_neg_format = money_base::_S_default_pattern;\n-\t}\n-      else\n-\t{\n-\t  // Named locale.\n-\t  _M_decimal_point = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc));\n-\t  _M_thousands_sep = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC,__cloc));\n-\t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n-\t  _M_positive_sign = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__POSITIVE_SIGN, __cloc));\n-\t  _M_negative_sign = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__NEGATIVE_SIGN, __cloc));\n-\t  if (intl)\n-\t    {\n-\t      _M_curr_symbol = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__INT_CURR_SYMBOL, __cloc));\n-\t      _M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, __cloc));\n-\t      char __ppreceeds = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, \n-\t\t\t\t\t\t   __cloc));\n-\t      char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n-\t      char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n-\t      _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, \n-\t\t\t\t\t\t   __pposn);\n-\t      char __npreceeds = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, \n-\t\t\t\t\t\t   __cloc));\n-\t      char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n-\t      char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n-\t      _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, \n-\t\t\t\t\t\t   __nposn);\n-\t    }\n-\t  else\n-\t    {\n-\t      _M_curr_symbol = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__CURRENCY_SYMBOL, __cloc));\n-\t      _M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n-\t      char __ppreceeds = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n-\t      char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n-\t      char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n-\t      _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, \n-\t\t\t\t\t\t   __pposn);\n-\t      char __npreceeds = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n-\t      char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n-\t      char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n-\t      _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, \n-\t\t\t\t\t\t   __nposn);\n-\t    }\n-\t}\n-    }\n-#endif\n }  // namespace std\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "0abd784378a98542af619ce23a872e0151499b10", "filename": "libstdc++-v3/config/locale/collate_members_generic.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_members_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_members_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_members_generic.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/config/locale/collate_specializations_generic.cc"}, {"sha": "a77adbf35181dbff87e3ec5de66ed36d00e16f27", "filename": "libstdc++-v3/config/locale/collate_members_gnu.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcollate_members_gnu.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/config/locale/collate_specializations_gnu.cc"}, {"sha": "8c0687187395322c98a8eb8c4248a660fefd5af0", "filename": "libstdc++-v3/config/locale/moneypunct_members_generic.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_generic.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -0,0 +1,73 @@\n+// std::moneypunct implementation details, generic version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.6.3.2  moneypunct virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  template<> \n+    void\n+    moneypunct<char>::_M_initialize_moneypunct(__c_locale)\n+    {\n+      // \"C\" locale\n+      _M_decimal_point = '.';\n+      _M_thousands_sep = ',';\n+      _M_grouping = \"\";\n+      _M_curr_symbol = string_type();\n+      _M_positive_sign = string_type();\n+      _M_negative_sign = string_type();\n+      _M_frac_digits = 0;\n+      _M_pos_format = money_base::_S_default_pattern;\n+      _M_neg_format = money_base::_S_default_pattern;\n+    }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    void\n+    moneypunct<wchar_t>::_M_initialize_moneypunct(__c_locale)\n+    {\n+      // \"C\" locale\n+      _M_decimal_point = L'.';\n+      _M_thousands_sep = L',';\n+      _M_grouping = \"\";\n+      _M_curr_symbol = string_type();\n+      _M_positive_sign = string_type();\n+      _M_negative_sign = string_type();\n+      _M_frac_digits = 0;\n+      _M_pos_format = money_base::_S_default_pattern;\n+      _M_neg_format = money_base::_S_default_pattern;\n+    }\n+#endif\n+}"}, {"sha": "d31c84a5386accc223ef11af3dcf23aa55db2307", "filename": "libstdc++-v3/config/locale/moneypunct_members_gnu.cc", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_gnu.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -0,0 +1,161 @@\n+// std::moneypunct implementation details, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.6.3.2  moneypunct virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  template<> \n+    void\n+    moneypunct<char>::_M_initialize_moneypunct(__c_locale __cloc)\n+    {\n+      if (!__cloc)\n+\t{\n+\t  // \"C\" locale\n+\t  _M_decimal_point = '.';\n+\t  _M_thousands_sep = ',';\n+\t  _M_grouping = \"\";\n+\t  _M_curr_symbol = string_type();\n+\t  _M_positive_sign = string_type();\n+\t  _M_negative_sign = string_type();\n+\t  _M_frac_digits = 0;\n+\t  _M_pos_format = money_base::_S_default_pattern;\n+\t  _M_neg_format = money_base::_S_default_pattern;\n+\t}\n+      else\n+\t{\n+\t  // Named locale.\n+\t  _M_decimal_point = *(__nl_langinfo_l(__MON_DECIMAL_POINT, __cloc));\n+\t  _M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, __cloc));\n+\t  _M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n+\t  _M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n+\t  _M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n+\t  if (intl)\n+\t    {\n+\t      _M_curr_symbol = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n+\t      _M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, __cloc));\n+\t      char __ppreceeds = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, \n+\t\t\t\t\t\t   __cloc));\n+\t      char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n+\t      char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n+\t      _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, \n+\t\t\t\t\t\t   __pposn);\n+\t      char __npreceeds = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, \n+\t\t\t\t\t\t   __cloc));\n+\t      char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n+\t      char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n+\t      _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, \n+\t\t\t\t\t\t   __nposn);\n+\t    }\n+\t  else\n+\t    {\n+\t      _M_curr_symbol = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n+\t      _M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n+\t      char __ppreceeds = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n+\t      char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n+\t      char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n+\t      _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, \n+\t\t\t\t\t\t   __pposn);\n+\t      char __npreceeds = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n+\t      char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n+\t      char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n+\t      _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, \n+\t\t\t\t\t\t   __nposn);\n+\t    }\n+\t}\n+    }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    void\n+    moneypunct<wchar_t>::_M_initialize_moneypunct(__c_locale __cloc)\n+    {\n+      if (!__cloc)\n+\t{\n+\t  // \"C\" locale\n+\t  _M_decimal_point = L'.';\n+\t  _M_thousands_sep = L',';\n+\t  _M_grouping = \"\";\n+\t  _M_curr_symbol = string_type();\n+\t  _M_positive_sign = string_type();\n+\t  _M_negative_sign = string_type();\n+\t  _M_frac_digits = 0;\n+\t  _M_pos_format = money_base::_S_default_pattern;\n+\t  _M_neg_format = money_base::_S_default_pattern;\n+\t}\n+      else\n+\t{\n+\t  // Named locale.\n+\t  _M_decimal_point = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc));\n+\t  _M_thousands_sep = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC,__cloc));\n+\t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t  _M_positive_sign = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__POSITIVE_SIGN, __cloc));\n+\t  _M_negative_sign = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__NEGATIVE_SIGN, __cloc));\n+\t  if (intl)\n+\t    {\n+\t      _M_curr_symbol = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__INT_CURR_SYMBOL, __cloc));\n+\t      _M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, __cloc));\n+\t      char __ppreceeds = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, \n+\t\t\t\t\t\t   __cloc));\n+\t      char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n+\t      char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n+\t      _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, \n+\t\t\t\t\t\t   __pposn);\n+\t      char __npreceeds = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, \n+\t\t\t\t\t\t   __cloc));\n+\t      char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n+\t      char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n+\t      _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, \n+\t\t\t\t\t\t   __nposn);\n+\t    }\n+\t  else\n+\t    {\n+\t      _M_curr_symbol = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__CURRENCY_SYMBOL, __cloc));\n+\t      _M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n+\t      char __ppreceeds = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n+\t      char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n+\t      char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n+\t      _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, \n+\t\t\t\t\t\t   __pposn);\n+\t      char __npreceeds = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n+\t      char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n+\t      char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n+\t      _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, \n+\t\t\t\t\t\t   __nposn);\n+\t    }\n+\t}\n+    }\n+#endif\n+}"}, {"sha": "23acb7693889fdba5bcbd7f5b0f2bf4b661dd67e", "filename": "libstdc++-v3/config/locale/numpunct_members_generic.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_generic.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -0,0 +1,65 @@\n+// std::numpunct implementation details, generic version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.3.1.2  numpunct virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  template<> \n+    void\n+    numpunct<char>::_M_initialize_numpunct(__c_locale)\n+    {\n+      // \"C\" locale\n+      _M_decimal_point = '.';\n+      _M_thousands_sep = ',';\n+      _M_grouping = \"\";\n+      _M_truename = \"true\";\n+      _M_falsename = \"false\";\n+    }\n+      \n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    void\n+    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale)\n+    {\n+      // \"C\" locale\n+      _M_decimal_point = L'.';\n+      _M_thousands_sep = L',';\n+      _M_grouping = \"\";\n+      _M_truename = L\"true\";\n+      _M_falsename = L\"false\";\n+    }\n+#endif\n+}"}, {"sha": "1ebad42cdc87b77172a46631351831d2cbb25f8d", "filename": "libstdc++-v3/config/locale/numpunct_members_gnu.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fnumpunct_members_gnu.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -0,0 +1,91 @@\n+// std::numpunct implementation details, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.3.1.2  numpunct virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  template<> \n+    void\n+    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc)\n+    {\n+      if (!__cloc)\n+\t{\n+\t  // \"C\" locale\n+\t  _M_decimal_point = '.';\n+\t  _M_thousands_sep = ',';\n+\t  _M_grouping = \"\";\n+\t}\n+      else\n+\t{\n+\t  // Named locale.\n+\t  _M_decimal_point = *(__nl_langinfo_l(RADIXCHAR, __cloc));\n+\t  _M_thousands_sep = *(__nl_langinfo_l(THOUSEP, __cloc));\n+\t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t}\n+      // NB: There is no way to extact this info from posix locales.\n+      // _M_truename = __nl_langinfo_l(YESSTR, __cloc);\n+      _M_truename = \"true\";\n+      // _M_falsename = __nl_langinfo_l(NOSTR, __cloc);\n+      _M_falsename = \"false\";\n+    }\n+      \n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    void\n+    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc)\n+    {\n+      if (!__cloc)\n+\t{\n+\t  // \"C\" locale\n+\t  _M_decimal_point = L'.';\n+\t  _M_thousands_sep = L',';\n+\t  _M_grouping = \"\";\n+\t}\n+      else\n+\t{\n+\t  // Named locale.\n+\t  _M_decimal_point = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc));\n+\t  _M_thousands_sep = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC,__cloc));\n+\t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t}\n+      // NB: There is no way to extact this info from posix locales.\n+      // _M_truename = __nl_langinfo_l(YESSTR, __cloc);\n+      _M_truename = L\"true\";\n+      // _M_falsename = __nl_langinfo_l(NOSTR, __cloc);\n+      _M_falsename = L\"false\";\n+    }\n+#endif\n+}"}, {"sha": "9fcafe411f15156bce0ac734d854261157628d08", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 927, "deletions": 930, "changes": 1857, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=72e2386f8714da23ec900a93c3aa403dcaf80009"}, {"sha": "760fa6e30c94eb8cceef69e17f4de4ac11a32e52", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.6 2001/08/14 01:24:28 bkoz Exp $\n+## $Id: Makefile.am,v 1.7 2001/08/14 08:42:19 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -392,5 +392,3 @@ install-data-local:\n \n # By adding these files here, automake will remove them for 'make clean'\n #CLEANFILES = ${allstamps}\n-\n-"}, {"sha": "45d7a44990b122e4868fdb344f2917b9d46749a7", "filename": "libstdc++-v3/include/bits/std_iostream.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -58,5 +58,3 @@ namespace std\n } // namespace std\n \n #endif\n-\n-"}, {"sha": "b1057fcb1493a98f83c0a9b7b314208b784cad73", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.94 2001/08/14 01:24:30 bkoz Exp $\n+## $Id: Makefile.am,v 1.95 2001/08/18 02:53:13 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -65,7 +65,7 @@ sources = \\\n \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n \tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \\\n \tlocale.cc locale-inst.cc localename.cc \\\n-\tmessages.cc collate.cc \\\n+\tcollate.cc messages.cc moneypunct.cc numpunct.cc \\\n \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n \tvalarray-inst.cc wstring-inst.cc\n "}, {"sha": "edea410847112d3c0d897c8799898a5fc7f84437", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -178,7 +178,7 @@ TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n INCLUDES =  \t-nostdinc++ \t$(GLIBCPP_INCLUDES) \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n \n \n-sources =  \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \tlocale.cc locale-inst.cc localename.cc \tmessages.cc collate.cc \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \tvalarray-inst.cc wstring-inst.cc\n+sources =  \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \tlocale.cc locale-inst.cc localename.cc \tcollate.cc messages.cc moneypunct.cc numpunct.cc \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \tvalarray-inst.cc wstring-inst.cc\n \n \n VPATH = $(top_srcdir):$(top_srcdir)/src\n@@ -248,9 +248,9 @@ LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libstdc___la_OBJECTS =  basic_file.lo bitset.lo c++locale.lo cmath.lo \\\n codecvt.lo complex_io.lo functexcept.lo globals.lo ios.lo limits.lo \\\n-locale.lo locale-inst.lo localename.lo messages.lo collate.lo \\\n-misc-inst.lo stdexcept.lo stl-inst.lo string-inst.lo strstream.lo \\\n-valarray-inst.lo wstring-inst.lo\n+locale.lo locale-inst.lo localename.lo collate.lo messages.lo \\\n+moneypunct.lo numpunct.lo misc-inst.lo stdexcept.lo stl-inst.lo \\\n+string-inst.lo strstream.lo valarray-inst.lo wstring-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)"}, {"sha": "19dc2717681a1634892d7c1f86389fc0ddb10048", "filename": "libstdc++-v3/testsuite/22_locale/codecvt.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -0,0 +1,53 @@\n+// 2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5  Template class codecvt\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::codecvt<char, char, mbstate_t> test_type;\n+  typedef std::locale::facet base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale()); \n+  const base_type* base = &obj;\n+  \n+  // Check for required typedefs\n+  typedef test_type::intern_type intern_type;\n+  typedef test_type::extern_type extern_type;\n+  typedef test_type::state_type state_type;\n+}\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_codecvt: public std::codecvt<unsigned char, unsigned long, char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_codecvt facet01;\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "01542666ebe5886347c100b611740f470a72b20c", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_char_char.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt_char_char.cc"}, {"sha": "2a135f67df111001ac87ff9319eab67c9ccb3c42", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_unicode_char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_unicode_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_unicode_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_unicode_char.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt_unicode_char.cc"}, {"sha": "df4944f8fea6dfc82583ba2ce8f089160bde1701", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_unicode_wchar_t.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_unicode_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_unicode_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_unicode_wchar_t.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt_unicode_wchar_t.cc"}, {"sha": "92235e8486f4fec244dd496e63c7c2fbc488c9d5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_members_wchar_t_char.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt_wchar_t_char.cc"}, {"sha": "e4cef57934768b31410c5100703368dd49018fbc", "filename": "libstdc++-v3/testsuite/22_locale/collate_members_char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/testsuite/22_locale/collate_char_members.cc"}, {"sha": "445096cc23fddddd9d2d77863a89addbd8c89232", "filename": "libstdc++-v3/testsuite/22_locale/collate_members_wchar_t.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/testsuite/22_locale/collate_wchar_t_members.cc"}, {"sha": "d13f97e13d9dd3922ec567e52ea83aca1013335a", "filename": "libstdc++-v3/testsuite/22_locale/ctype_members_char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_char_members.cc"}, {"sha": "107a4d5e3c31c07376b5c7d40604671374a3d48a", "filename": "libstdc++-v3/testsuite/22_locale/ctype_members_wchar_t.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_wchar_t_members.cc"}, {"sha": "bb34794c78d50ed14b24675608cfb8a8e63c3213", "filename": "libstdc++-v3/testsuite/22_locale/messages_members_char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_members_char.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/testsuite/22_locale/messages_char_members.cc"}, {"sha": "e876e371f819d3b08e99adb89be6344902055df9", "filename": "libstdc++-v3/testsuite/22_locale/money_put.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -0,0 +1,53 @@\n+// 2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2  Template class money_put\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::money_put<char> test_type;\n+  typedef std::locale::facet base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale()); \n+  const base_type* base = &obj;\n+  \n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+  typedef test_type::iter_type iter_type;\n+}\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_money_put: public std::money_put<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_money_put facet01;\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "be8229792807a26b1a556d01e9112656d966d8ca", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_char.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "patch": "@@ -0,0 +1,73 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+\n+  bool test = true;\n+  string str;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  str = loc_c.name();\n+\n+  locale loc_us(\"en_US\");\n+  str = loc_us.name();\n+  VERIFY( loc_c != loc_us );\n+\n+  locale loc_fr(\"fr_FR\");\n+  str = loc_fr.name();\n+  VERIFY( loc_c != loc_fr );\n+\n+  locale loc_de(\"de_DE\");\n+  str = loc_de.name();\n+  VERIFY( loc_c != loc_de );\n+\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the money_put facets\n+  const money_put<char>& monp_c = use_facet<money_put<char> >(loc_c); \n+  const money_put<char>& monp_us = use_facet<money_put<char> >(loc_us); \n+  const money_put<char>& monp_fr = use_facet<money_put<char> >(loc_fr); \n+  const money_put<char>& monp_de = use_facet<money_put<char> >(loc_de); \n+\n+  // sanity check the data is correct.\n+  // VERIFY( dp1 != dp2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "1ddd4268c5ce4ddb3090a247c7dae484a3eace77", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_members_char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_members_char.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/testsuite/22_locale/moneypunct_char_members.cc"}, {"sha": "e562f76fe814c9bda0ecd8bd6c85fd91d9fbdd60", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_members_char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2386f8714da23ec900a93c3aa403dcaf80009/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_members_char.cc?ref=72e2386f8714da23ec900a93c3aa403dcaf80009", "previous_filename": "libstdc++-v3/testsuite/22_locale/numpunct_char_members.cc"}]}