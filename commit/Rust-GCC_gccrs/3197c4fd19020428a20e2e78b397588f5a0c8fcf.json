{"sha": "3197c4fd19020428a20e2e78b397588f5a0c8fcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE5N2M0ZmQxOTAyMDQyOGEyMGUyZTc4YjM5NzU4OGY1YTBjOGZjZg==", "commit": {"author": {"name": "Alexey Starovoytov", "email": "alexey.starovoytov@sun.com", "date": "2003-11-12T18:12:57Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-11-12T18:12:57Z"}, "message": "re PR rtl-optimization/12953 (tree inline bug and fix)\n\n2003-11-12  Alexey Starovoytov  <alexey.starovoytov@sun.com>\n\t    Roger Sayle  <roger@eyesopen.com>\n\n\tPR optimization/12953\n\t* tree-inline.c (inline_forbidden_p_1): Added check for BUILT_IN\n\tbefore switch by FUNCTION_CODE.\n\nCo-Authored-By: Roger Sayle <roger@eyesopen.com>\n\nFrom-SVN: r73502", "tree": {"sha": "16c084ff9dee4c39efda8fdf8d02aaee58f3e966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16c084ff9dee4c39efda8fdf8d02aaee58f3e966"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3197c4fd19020428a20e2e78b397588f5a0c8fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3197c4fd19020428a20e2e78b397588f5a0c8fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3197c4fd19020428a20e2e78b397588f5a0c8fcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3197c4fd19020428a20e2e78b397588f5a0c8fcf/comments", "author": null, "committer": null, "parents": [{"sha": "94f773991e339ae97f6bd62f81c197e134dd7f08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f773991e339ae97f6bd62f81c197e134dd7f08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f773991e339ae97f6bd62f81c197e134dd7f08"}], "stats": {"total": 82, "additions": 46, "deletions": 36}, "files": [{"sha": "e04a1f75969c4e4c24552b72d9d0b9988d0eb5cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4fd19020428a20e2e78b397588f5a0c8fcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4fd19020428a20e2e78b397588f5a0c8fcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3197c4fd19020428a20e2e78b397588f5a0c8fcf", "patch": "@@ -1,3 +1,10 @@\n+2003-11-12  Alexey Starovoytov  <alexey.starovoytov@sun.com>\n+\t    Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/12953\n+\t* tree-inline.c (inline_forbidden_p_1): Added check for BUILT_IN\n+\tbefore switch by FUNCTION_CODE.\n+\n 2003-11-12  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md (storehi): Avoid use of explicit subreg."}, {"sha": "23467b9bb9b2630dbb1e3ad4b2db62aeef32bd1b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 39, "deletions": 36, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4fd19020428a20e2e78b397588f5a0c8fcf/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4fd19020428a20e2e78b397588f5a0c8fcf/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3197c4fd19020428a20e2e78b397588f5a0c8fcf", "patch": "@@ -1000,10 +1000,11 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n   switch (TREE_CODE (node))\n     {\n     case CALL_EXPR:\n-      /* Refuse to inline alloca call unless user explicitly forced so as this\n-\t may change program's memory overhead drastically when the function\n-\t using alloca is called in loop.  In GCC present in SPEC2000 inlining\n-\t into schedule_block cause it to require 2GB of ram instead of 256MB.  */\n+      /* Refuse to inline alloca call unless user explicitly forced so as\n+\t this may change program's memory overhead drastically when the\n+\t function using alloca is called in loop.  In GCC present in\n+\t SPEC2000 inlining into schedule_block cause it to require 2GB of\n+\t RAM instead of 256MB.  */\n       if (alloca_call_p (node)\n \t  && !lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)))\n \t{\n@@ -1025,40 +1026,42 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t  return node;\n \t}\n \n-      switch (DECL_FUNCTION_CODE (t))\n-\t{\n-\t  /* We cannot inline functions that take a variable number of\n-\t     arguments.  */\n-\tcase BUILT_IN_VA_START:\n-\tcase BUILT_IN_STDARG_START:\n-\tcase BUILT_IN_NEXT_ARG:\n-\tcase BUILT_IN_VA_END:\n-\t  {\n-\t    inline_forbidden_reason\n-\t      = N_(\"%Jfunction '%F' can never be inlined because it \"\n-\t\t   \"uses variable argument lists\");\n-\t    return node;\n-\t  }\n-\tcase BUILT_IN_LONGJMP:\n+      if (DECL_BUILT_IN (t))\n+\tswitch (DECL_FUNCTION_CODE (t))\n \t  {\n-\t    /* We can't inline functions that call __builtin_longjmp at all.\n-\t       The non-local goto machinery really requires the destination\n-\t       be in a different function.  If we allow the function calling\n-\t       __builtin_longjmp to be inlined into the function calling\n-\t       __builtin_setjmp, Things will Go Awry.  */\n-\t    /* ??? Need front end help to identify \"regular\" non-local goto.  */\n-            if (DECL_BUILT_IN_CLASS (t) == BUILT_IN_NORMAL)\n-\t      {\n-\t\tinline_forbidden_reason\n-\t\t  = N_(\"%Jfunction '%F' can never be inlined \"\n-\t\t       \"because it uses setjmp-longjmp exception handling\");\n-\t        return node;\n-\t      }\n-\t  }\n+\t    /* We cannot inline functions that take a variable number of\n+\t       arguments.  */\n+\t  case BUILT_IN_VA_START:\n+\t  case BUILT_IN_STDARG_START:\n+\t  case BUILT_IN_NEXT_ARG:\n+\t  case BUILT_IN_VA_END:\n+\t    {\n+\t      inline_forbidden_reason\n+\t\t= N_(\"%Jfunction '%F' can never be inlined because it \"\n+\t\t     \"uses variable argument lists\");\n+\t      return node;\n+\t    }\n+\t  case BUILT_IN_LONGJMP:\n+\t    {\n+\t      /* We can't inline functions that call __builtin_longjmp at\n+\t\t all.  The non-local goto machinery really requires the\n+\t\t destination be in a different function.  If we allow the\n+\t\t function calling __builtin_longjmp to be inlined into the\n+\t\t function calling __builtin_setjmp, Things will Go Awry.  */\n+\t      /* ??? Need front end help to identify \"regular\" non-local\n+\t\t goto.  */\n+\t      if (DECL_BUILT_IN_CLASS (t) == BUILT_IN_NORMAL)\n+\t\t{\n+\t\t  inline_forbidden_reason\n+\t\t    = N_(\"%Jfunction '%F' can never be inlined because \"\n+\t\t\t \"it uses setjmp-longjmp exception handling\");\n+\t\t  return node;\n+\t\t}\n+\t    }\n \n-\tdefault:\n-\t  break;\n-\t}\n+\t  default:\n+\t    break;\n+\t  }\n       break;\n \n #ifndef INLINER_FOR_JAVA"}]}