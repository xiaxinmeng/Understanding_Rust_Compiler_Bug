{"sha": "9bc9ee679959ee61d93ee0d39b7df2235bf0f38a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJjOWVlNjc5OTU5ZWU2MWQ5M2VlMGQzOWI3ZGYyMjM1YmYwZjM4YQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-10-12T09:59:30Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-10-12T09:59:30Z"}, "message": "re PR target/49939 ([avr] Skip 2-word instructions if applicable)\n\n\tPR target/49939\n\t* config/avr/avr.md (*movqi): Rename to movqi_insn.\n\t(*call_insn): Rename to call_insn.\n\t(*call_value_insn): Rename to call_value_insn.\n\t* config/avr/avr.c (avr_2word_insn_p): New static function.\n\t(jump_over_one_insn_p): Use it.\n\nFrom-SVN: r179843", "tree": {"sha": "cbf58215876ec07f4e01477bde81061f8a1df931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbf58215876ec07f4e01477bde81061f8a1df931"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bc9ee679959ee61d93ee0d39b7df2235bf0f38a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc9ee679959ee61d93ee0d39b7df2235bf0f38a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc9ee679959ee61d93ee0d39b7df2235bf0f38a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc9ee679959ee61d93ee0d39b7df2235bf0f38a/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba87a294f618e93699867f50f924758c60dab45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba87a294f618e93699867f50f924758c60dab45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba87a294f618e93699867f50f924758c60dab45"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "7b66633695e9c464326be79ea849da3da3fb47a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc9ee679959ee61d93ee0d39b7df2235bf0f38a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc9ee679959ee61d93ee0d39b7df2235bf0f38a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bc9ee679959ee61d93ee0d39b7df2235bf0f38a", "patch": "@@ -1,3 +1,12 @@\n+2011-10-12  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/49939\n+\t* config/avr/avr.md (*movqi): Rename to movqi_insn.\n+\t(*call_insn): Rename to call_insn.\n+\t(*call_value_insn): Rename to call_value_insn.\n+\t* config/avr/avr.c (avr_2word_insn_p): New static function.\n+\t(jump_over_one_insn_p): Use it.\n+\n 2011-10-12  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* expr.h (copy_blkmode_to_reg): Declare."}, {"sha": "4a93c0aa8dcbcb0eb6045550d5f0b69a33b4ee84", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc9ee679959ee61d93ee0d39b7df2235bf0f38a/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc9ee679959ee61d93ee0d39b7df2235bf0f38a/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=9bc9ee679959ee61d93ee0d39b7df2235bf0f38a", "patch": "@@ -7202,6 +7202,53 @@ test_hard_reg_class (enum reg_class rclass, rtx x)\n }\n \n \n+/* Helper for jump_over_one_insn_p:  Test if INSN is a 2-word instruction\n+   and thus is suitable to be skipped by CPSE, SBRC, etc.  */\n+\n+static bool\n+avr_2word_insn_p (rtx insn)\n+{\n+  if (avr_current_device->errata_skip\n+      || !insn\n+      || 2 != get_attr_length (insn))\n+    {\n+      return false;\n+    }\n+\n+  switch (INSN_CODE (insn))\n+    {\n+    default:\n+      return false;\n+      \n+    case CODE_FOR_movqi_insn:\n+      {\n+        rtx set  = single_set (insn);\n+        rtx src  = SET_SRC (set);\n+        rtx dest = SET_DEST (set);\n+        \n+        /* Factor out LDS and STS from movqi_insn.  */\n+        \n+        if (MEM_P (dest)\n+            && (REG_P (src) || src == const0_rtx))\n+          {\n+            return CONSTANT_ADDRESS_P (XEXP (dest, 0));\n+          }\n+        else if (REG_P (dest)\n+                 && MEM_P (src))\n+          {\n+            return CONSTANT_ADDRESS_P (XEXP (src, 0));\n+          }\n+        \n+        return false;\n+      }\n+\n+    case CODE_FOR_call_insn:\n+    case CODE_FOR_call_value_insn:\n+      return true;\n+    }\n+}\n+\n+\n int\n jump_over_one_insn_p (rtx insn, rtx dest)\n {\n@@ -7210,7 +7257,11 @@ jump_over_one_insn_p (rtx insn, rtx dest)\n \t\t      : dest);\n   int jump_addr = INSN_ADDRESSES (INSN_UID (insn));\n   int dest_addr = INSN_ADDRESSES (uid);\n-  return dest_addr - jump_addr == get_attr_length (insn) + 1;\n+  int jump_offset = dest_addr - jump_addr - get_attr_length (insn);\n+  \n+  return (jump_offset == 1\n+          || (jump_offset == 2\n+              && avr_2word_insn_p (next_active_insn (insn))));\n }\n \n /* Returns 1 if a value of mode MODE can be stored starting with hard"}, {"sha": "1052378de652e751a5457697be9905bb1b086b07", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc9ee679959ee61d93ee0d39b7df2235bf0f38a/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc9ee679959ee61d93ee0d39b7df2235bf0f38a/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=9bc9ee679959ee61d93ee0d39b7df2235bf0f38a", "patch": "@@ -296,7 +296,7 @@\n        operands[1] = copy_to_mode_reg(QImode, operand1);\n   \")\n \n-(define_insn \"*movqi\"\n+(define_insn \"movqi_insn\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,d,Qm,r,q,r,*r\")\n \t(match_operand:QI 1 \"general_operand\"       \"rL,i,rL,Qm,r,q,i\"))]\n   \"(register_operand (operands[0],QImode)\n@@ -3627,7 +3627,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"*call_insn\"\n+(define_insn \"call_insn\"\n   [(parallel[(call (mem:HI (match_operand:HI 0 \"nonmemory_operand\" \"z,s,z,s\"))\n                    (match_operand:HI 1 \"general_operand\"           \"X,X,X,X\"))\n              (use (match_operand:HI 2 \"const_int_operand\"          \"L,L,P,P\"))])]\n@@ -3650,7 +3650,7 @@\n                                         (const_int 2)\n                                         (const_int 1))])])\n \n-(define_insn \"*call_value_insn\"\n+(define_insn \"call_value_insn\"\n   [(parallel[(set (match_operand 0 \"register_operand\"                   \"=r,r,r,r\")\n                   (call (mem:HI (match_operand:HI 1 \"nonmemory_operand\"  \"z,s,z,s\"))\n                         (match_operand:HI 2 \"general_operand\"            \"X,X,X,X\")))"}]}