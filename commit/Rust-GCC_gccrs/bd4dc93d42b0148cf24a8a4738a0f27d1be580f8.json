{"sha": "bd4dc93d42b0148cf24a8a4738a0f27d1be580f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ0ZGM5M2Q0MmIwMTQ4Y2YyNGE4YTQ3MzhhMGYyN2QxYmU1ODBmOA==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2020-07-30T18:54:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-21T07:22:44Z"}, "message": "[Ada] Incorrect associations for extra accessibility parameters\n\ngcc/ada/\n\n\t* exp_ch6.adb (Expand_Call_Helper): Modify calls to\n\tAdd_Extra_Actual to use Extra_Accessibility instead of\n\tGet_Accessibility for the EF parameter.", "tree": {"sha": "7213d0e76973a596dbf29fcf9eae953fa348851c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7213d0e76973a596dbf29fcf9eae953fa348851c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd4dc93d42b0148cf24a8a4738a0f27d1be580f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd4dc93d42b0148cf24a8a4738a0f27d1be580f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd4dc93d42b0148cf24a8a4738a0f27d1be580f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd4dc93d42b0148cf24a8a4738a0f27d1be580f8/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c43098ca632397f5b5af14d7818f6fcdb02a2b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c43098ca632397f5b5af14d7818f6fcdb02a2b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c43098ca632397f5b5af14d7818f6fcdb02a2b6f"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "7b50812a9e8a674a35838a482ae3fb17c69e87bb", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd4dc93d42b0148cf24a8a4738a0f27d1be580f8/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd4dc93d42b0148cf24a8a4738a0f27d1be580f8/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=bd4dc93d42b0148cf24a8a4738a0f27d1be580f8", "patch": "@@ -3658,7 +3658,7 @@ package body Exp_Ch6 is\n \n          --  Create possible extra actual for accessibility level\n \n-         if Present (Get_Accessibility (Formal)) then\n+         if Present (Extra_Accessibility (Formal)) then\n \n             --  Ada 2005 (AI-252): If the actual was rewritten as an Access\n             --  attribute, then the original actual may be an aliased object\n@@ -3748,7 +3748,7 @@ package body Exp_Ch6 is\n                   Add_Extra_Actual\n                     (Expr =>\n                        New_Occurrence_Of (Get_Accessibility (Parm_Ent), Loc),\n-                     EF   => Get_Accessibility (Formal));\n+                     EF   => Extra_Accessibility (Formal));\n                end;\n \n             elsif Is_Entity_Name (Prev_Orig) then\n@@ -3782,7 +3782,7 @@ package body Exp_Ch6 is\n                           (Expr =>\n                              New_Occurrence_Of\n                                (Get_Accessibility (Parm_Ent), Loc),\n-                           EF   => Get_Accessibility (Formal));\n+                           EF   => Extra_Accessibility (Formal));\n \n                      --  If the actual access parameter does not have an\n                      --  associated extra formal providing its scope level,\n@@ -3794,7 +3794,7 @@ package body Exp_Ch6 is\n                           (Expr =>\n                              Make_Integer_Literal (Loc,\n                                Intval => Scope_Depth (Standard_Standard)),\n-                           EF   => Get_Accessibility (Formal));\n+                           EF   => Extra_Accessibility (Formal));\n                      end if;\n                   end;\n \n@@ -3804,7 +3804,7 @@ package body Exp_Ch6 is\n                else\n                   Add_Extra_Actual\n                     (Expr => Dynamic_Accessibility_Level (Prev_Orig),\n-                     EF   => Get_Accessibility (Formal));\n+                     EF   => Extra_Accessibility (Formal));\n                end if;\n \n             --  If the actual is an access discriminant, then pass the level\n@@ -3820,7 +3820,7 @@ package body Exp_Ch6 is\n                  (Expr =>\n                     Make_Integer_Literal (Loc,\n                       Intval => Object_Access_Level (Prefix (Prev_Orig))),\n-                  EF   => Get_Accessibility (Formal));\n+                  EF   => Extra_Accessibility (Formal));\n \n             --  All other cases\n \n@@ -3878,7 +3878,7 @@ package body Exp_Ch6 is\n                                    New_Occurrence_Of\n                                      (Get_Accessibility\n                                         (Entity (Prev_Ult)), Loc),\n-                                 EF   => Get_Accessibility (Formal));\n+                                 EF   => Extra_Accessibility (Formal));\n \n                            --  Normal case, call Object_Access_Level. Note:\n                            --  should be Dynamic_Accessibility_Level ???\n@@ -3889,7 +3889,7 @@ package body Exp_Ch6 is\n                                    Make_Integer_Literal (Loc,\n                                      Intval =>\n                                        Object_Access_Level (Prev_Orig)),\n-                                 EF   => Get_Accessibility (Formal));\n+                                 EF   => Extra_Accessibility (Formal));\n                            end if;\n \n                         --  Treat the unchecked attributes as library-level\n@@ -3901,7 +3901,7 @@ package body Exp_Ch6 is\n                              (Expr =>\n                                 Make_Integer_Literal (Loc,\n                                   Intval => Scope_Depth (Standard_Standard)),\n-                              EF   => Get_Accessibility (Formal));\n+                              EF   => Extra_Accessibility (Formal));\n \n                         --  No other cases of attributes returning access\n                         --  values that can be passed to access parameters.\n@@ -3923,7 +3923,7 @@ package body Exp_Ch6 is\n                        (Expr =>\n                           Make_Integer_Literal (Loc,\n                             Intval => Scope_Depth (Current_Scope) + 1),\n-                        EF   => Get_Accessibility (Formal));\n+                        EF   => Extra_Accessibility (Formal));\n \n                   --  For most other cases we simply pass the level of the\n                   --  actual's access type. The type is retrieved from\n@@ -4151,15 +4151,15 @@ package body Exp_Ch6 is\n \n                            Add_Extra_Actual\n                              (Expr => New_Occurrence_Of (Lvl, Loc),\n-                              EF   => Get_Accessibility (Formal));\n+                              EF   => Extra_Accessibility (Formal));\n                         end;\n \n                      --  General case uncomplicated by conditional expressions\n \n                      else\n                         Add_Extra_Actual\n                           (Expr => Dynamic_Accessibility_Level (Prev),\n-                           EF   => Get_Accessibility (Formal));\n+                           EF   => Extra_Accessibility (Formal));\n                      end if;\n                end case;\n             end if;"}]}