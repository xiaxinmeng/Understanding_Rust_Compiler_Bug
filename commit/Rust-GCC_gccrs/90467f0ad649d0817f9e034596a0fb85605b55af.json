{"sha": "90467f0ad649d0817f9e034596a0fb85605b55af", "node_id": "C_kwDOANBUbNoAKDkwNDY3ZjBhZDY0OWQwODE3ZjllMDM0NTk2YTBmYjg1NjA1YjU1YWY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-14T08:59:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-14T10:52:49Z"}, "message": "middle-end/105965 - add missing v_c_e <{ el }> simplification\n\nWhen we got the simplification of bit-field-ref to view-convert\nwe lost the ability to detect FMAs since we cannot look through\n\n  _1 = {_10};\n  _11 = VIEW_CONVERT_EXPR<float>(_1);\n\nthe following amends the (view_convert CONSTRUCTOR) pattern\nto handle this case.\n\n2022-06-14  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/105965\n\t* match.pd (view_convert CONSTRUCTOR): Handle single-element\n\tCTOR case.\n\n\t* gcc.target/i386/pr105965.c: New testcase.", "tree": {"sha": "3ef84a7938718fb734f6a7e3b10ff82c19bf9b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ef84a7938718fb734f6a7e3b10ff82c19bf9b55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90467f0ad649d0817f9e034596a0fb85605b55af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90467f0ad649d0817f9e034596a0fb85605b55af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90467f0ad649d0817f9e034596a0fb85605b55af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90467f0ad649d0817f9e034596a0fb85605b55af/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be6676286a0fad2d7fdb6a258befe9deb826690e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6676286a0fad2d7fdb6a258befe9deb826690e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6676286a0fad2d7fdb6a258befe9deb826690e"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "776c9c6489af75d21acbe016c1c08818a6cd5dc7", "filename": "gcc/match.pd", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90467f0ad649d0817f9e034596a0fb85605b55af/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90467f0ad649d0817f9e034596a0fb85605b55af/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=90467f0ad649d0817f9e034596a0fb85605b55af", "patch": "@@ -3669,12 +3669,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t       && TYPE_UNSIGNED (TREE_TYPE (@1)))))\n    (view_convert @1)))\n \n-/* Simplify a view-converted empty constructor.  */\n+/* Simplify a view-converted empty or single-element constructor.  */\n (simplify\n   (view_convert CONSTRUCTOR@0)\n-  (if (TREE_CODE (@0) != SSA_NAME\n-       && CONSTRUCTOR_NELTS (@0) == 0)\n-   { build_zero_cst (type); }))\n+  (with\n+   { tree ctor = (TREE_CODE (@0) == SSA_NAME\n+\t\t  ? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0)) : @0); }\n+   (switch\n+    (if (CONSTRUCTOR_NELTS (ctor) == 0)\n+     { build_zero_cst (type); })\n+    (if (CONSTRUCTOR_NELTS (ctor) == 1\n+\t && VECTOR_TYPE_P (TREE_TYPE (ctor))\n+\t && operand_equal_p (TYPE_SIZE (type),\n+\t\t\t     TYPE_SIZE (TREE_TYPE\n+\t\t\t       (CONSTRUCTOR_ELT (ctor, 0)->value))))\n+     (view_convert { CONSTRUCTOR_ELT (ctor, 0)->value; })))))\n \n /* Re-association barriers around constants and other re-association\n    barriers can be removed.  */"}, {"sha": "5bb53790de8ae6105580f0f78a142bc282786cbb", "filename": "gcc/testsuite/gcc.target/i386/pr105965.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90467f0ad649d0817f9e034596a0fb85605b55af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105965.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90467f0ad649d0817f9e034596a0fb85605b55af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105965.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105965.c?ref=90467f0ad649d0817f9e034596a0fb85605b55af", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfma -mfpmath=sse\" } */\n+\n+typedef float v1sf __attribute__((vector_size(4)));\n+\n+v1sf\n+foo43 (v1sf a, v1sf b, v1sf c)\n+{\n+  return a * b + c;\n+}\n+\n+/* { dg-final { scan-assembler \"fmadd\" } } */"}]}