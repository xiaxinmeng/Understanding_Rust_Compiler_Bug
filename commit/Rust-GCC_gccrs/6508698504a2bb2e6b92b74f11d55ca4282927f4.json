{"sha": "6508698504a2bb2e6b92b74f11d55ca4282927f4", "node_id": "C_kwDOANBUbNoAKDY1MDg2OTg1MDRhMmJiMmU2YjkyYjc0ZjExZDU1Y2E0MjgyOTI3ZjQ", "commit": {"author": {"name": "@mvvsmk", "email": "mvvsmanojkumar@gmail.com", "date": "2022-01-23T14:23:39Z"}, "committer": {"name": "@mvvsmk", "email": "mvvsmanojkumar@gmail.com", "date": "2022-01-26T07:25:42Z"}, "message": "Added location data to Match Arm and removed unused code\n\nAddresses #863\nAdded location data to Match arm in gcc/rust/ast/rust-expr.h and gcc/rust/hir/tree/rust-hir-expr.h\nUpdated the respective constructors and copy constructors\nUpdated location info for match arm in code generation in gcc/rust/backend/eust-compile-expr.cc\nRemoved unused code in the above rust-expr.h and rust-gir-expr.h files as mentioned in the issue.\n\nSigned-off-by:M V V S Manoj Kumar <mvvsmanojkumar@gmail.com>", "tree": {"sha": "23cb9985e42bf5b2e97005353aa15e14af7765f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23cb9985e42bf5b2e97005353aa15e14af7765f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6508698504a2bb2e6b92b74f11d55ca4282927f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6508698504a2bb2e6b92b74f11d55ca4282927f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6508698504a2bb2e6b92b74f11d55ca4282927f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6508698504a2bb2e6b92b74f11d55ca4282927f4/comments", "author": {"login": "mvvsmk", "id": 71825974, "node_id": "MDQ6VXNlcjcxODI1OTc0", "avatar_url": "https://avatars.githubusercontent.com/u/71825974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvvsmk", "html_url": "https://github.com/mvvsmk", "followers_url": "https://api.github.com/users/mvvsmk/followers", "following_url": "https://api.github.com/users/mvvsmk/following{/other_user}", "gists_url": "https://api.github.com/users/mvvsmk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvvsmk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvvsmk/subscriptions", "organizations_url": "https://api.github.com/users/mvvsmk/orgs", "repos_url": "https://api.github.com/users/mvvsmk/repos", "events_url": "https://api.github.com/users/mvvsmk/events{/privacy}", "received_events_url": "https://api.github.com/users/mvvsmk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mvvsmk", "id": 71825974, "node_id": "MDQ6VXNlcjcxODI1OTc0", "avatar_url": "https://avatars.githubusercontent.com/u/71825974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvvsmk", "html_url": "https://github.com/mvvsmk", "followers_url": "https://api.github.com/users/mvvsmk/followers", "following_url": "https://api.github.com/users/mvvsmk/following{/other_user}", "gists_url": "https://api.github.com/users/mvvsmk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvvsmk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvvsmk/subscriptions", "organizations_url": "https://api.github.com/users/mvvsmk/orgs", "repos_url": "https://api.github.com/users/mvvsmk/repos", "events_url": "https://api.github.com/users/mvvsmk/events{/privacy}", "received_events_url": "https://api.github.com/users/mvvsmk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cce6b8919ce16acd37a7a203049a52925a7e295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cce6b8919ce16acd37a7a203049a52925a7e295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cce6b8919ce16acd37a7a203049a52925a7e295"}], "stats": {"total": 229, "additions": 16, "deletions": 213}, "files": [{"sha": "2f46fee655052fb0764ae636452f612673a9a530", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 7, "deletions": 120, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6508698504a2bb2e6b92b74f11d55ca4282927f4/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6508698504a2bb2e6b92b74f11d55ca4282927f4/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=6508698504a2bb2e6b92b74f11d55ca4282927f4", "patch": "@@ -4226,6 +4226,7 @@ struct MatchArm\n   std::unique_ptr<Expr> guard_expr;\n \n   // TODO: should this store location data?\n+  Location locus;\n \n public:\n   // Returns whether the MatchArm has a match arm guard expression\n@@ -4234,10 +4235,11 @@ struct MatchArm\n   // Constructor for match arm with a guard expression\n   MatchArm (std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n \t    std::unique_ptr<Expr> guard_expr = nullptr,\n-\t    std::vector<Attribute> outer_attrs = std::vector<Attribute> ())\n+\t    std::vector<Attribute> outer_attrs = std::vector<Attribute> (),\n+\t    Location locus = Location ())\n     : outer_attrs (std::move (outer_attrs)),\n       match_arm_patterns (std::move (match_arm_patterns)),\n-      guard_expr (std::move (guard_expr))\n+      guard_expr (std::move (guard_expr)), locus (locus)\n   {}\n \n   // Copy constructor with clone\n@@ -4250,6 +4252,8 @@ struct MatchArm\n     match_arm_patterns.reserve (other.match_arm_patterns.size ());\n     for (const auto &e : other.match_arm_patterns)\n       match_arm_patterns.push_back (e->clone_pattern ());\n+\n+    locus = other.locus;\n   }\n \n   ~MatchArm () = default;\n@@ -4305,36 +4309,9 @@ struct MatchArm\n   {\n     return match_arm_patterns;\n   }\n-};\n-\n-/*\n-// Base \"match case\" for a match expression - abstract\n-class MatchCase\n-{\n-  MatchArm arm;\n-\n-protected:\n-  MatchCase (MatchArm arm) : arm (std::move (arm)) {}\n-\n-  // Should not require copy constructor or assignment operator overloading\n-\n-  // Clone function implementation as pure virtual method\n-  virtual MatchCase *clone_match_case_impl () const = 0;\n-\n-public:\n-  virtual ~MatchCase () {}\n-\n-  // Unique pointer custom clone function\n-  std::unique_ptr<MatchCase> clone_match_case () const\n-  {\n-    return std::unique_ptr<MatchCase> (clone_match_case_impl ());\n-  }\n-\n-  virtual std::string as_string () const;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n+  Location get_locus () const { return locus; }\n };\n-*/\n \n /* A \"match case\" - a correlated match arm and resulting expression. Not\n  * abstract. */\n@@ -4391,96 +4368,6 @@ struct MatchCase\n   NodeId get_node_id () const { return node_id; }\n };\n \n-#if 0\n-// Block expression match case\n-class MatchCaseBlockExpr : public MatchCase\n-{\n-  std::unique_ptr<BlockExpr> block_expr;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  MatchCaseBlockExpr (MatchArm arm, std::unique_ptr<BlockExpr> block_expr)\n-    : MatchCase (std::move (arm)), block_expr (std::move (block_expr))\n-  {}\n-\n-  // Copy constructor requires clone\n-  MatchCaseBlockExpr (MatchCaseBlockExpr const &other)\n-    : MatchCase (other), block_expr (other.block_expr->clone_block_expr ())\n-  {}\n-\n-  // Overload assignment operator to have clone\n-  MatchCaseBlockExpr &operator= (MatchCaseBlockExpr const &other)\n-  {\n-    MatchCase::operator= (other);\n-    block_expr = other.block_expr->clone_block_expr ();\n-    // arm = other.arm;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  MatchCaseBlockExpr (MatchCaseBlockExpr &&other) = default;\n-  MatchCaseBlockExpr &operator= (MatchCaseBlockExpr &&other) = default;\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  MatchCaseBlockExpr *clone_match_case_impl () const override\n-  {\n-    return new MatchCaseBlockExpr (*this);\n-  }\n-};\n-\n-// Expression (except block expression) match case\n-class MatchCaseExpr : public MatchCase\n-{\n-  std::unique_ptr<Expr> expr;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  MatchCaseExpr (MatchArm arm, std::unique_ptr<Expr> expr)\n-    : MatchCase (std::move (arm)), expr (std::move (expr))\n-  {}\n-\n-  // Copy constructor requires clone\n-  MatchCaseExpr (MatchCaseExpr const &other)\n-    : MatchCase (other), expr (other.expr->clone_expr ())\n-  {}\n-\n-  // Overload assignment operator to have clone\n-  MatchCaseExpr &operator= (MatchCaseExpr const &other)\n-  {\n-    MatchCase::operator= (other);\n-    expr = other.expr->clone_expr ();\n-    // arm = other.arm;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  MatchCaseExpr (MatchCaseExpr &&other) = default;\n-  MatchCaseExpr &operator= (MatchCaseExpr &&other) = default;\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  MatchCaseExpr *clone_match_case_impl () const override\n-  {\n-    return new MatchCaseExpr (*this);\n-  }\n-};\n-#endif\n-\n // Match expression AST node\n class MatchExpr : public ExprWithBlock\n {"}, {"sha": "3e5db29cd64841c565a87d9e8e3a76b38f199374", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6508698504a2bb2e6b92b74f11d55ca4282927f4/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6508698504a2bb2e6b92b74f11d55ca4282927f4/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=6508698504a2bb2e6b92b74f11d55ca4282927f4", "patch": "@@ -274,7 +274,7 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n       rust_assert (kase_arm.get_patterns ().size () > 0);\n \n       // generate implicit label\n-      Location arm_locus = kase_arm.get_patterns ().at (0)->get_locus ();\n+      Location arm_locus = kase_arm.get_locus ();\n       tree case_label = ctx->get_backend ()->label (\n \tfndecl, \"\" /* empty creates an artificial label */, arm_locus);\n "}, {"sha": "89b9f644641b9117b974480cb2f6f91102f55142", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 8, "deletions": 92, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6508698504a2bb2e6b92b74f11d55ca4282927f4/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6508698504a2bb2e6b92b74f11d55ca4282927f4/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=6508698504a2bb2e6b92b74f11d55ca4282927f4", "patch": "@@ -3713,6 +3713,7 @@ struct MatchArm\n   AST::AttrVec outer_attrs;\n   std::vector<std::unique_ptr<Pattern> > match_arm_patterns;\n   std::unique_ptr<Expr> guard_expr;\n+  Location locus;\n \n public:\n   // Returns whether the MatchArm has a match arm guard expression\n@@ -3721,10 +3722,11 @@ struct MatchArm\n   // Constructor for match arm with a guard expression\n   MatchArm (std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n \t    std::unique_ptr<Expr> guard_expr = nullptr,\n-\t    AST::AttrVec outer_attrs = AST::AttrVec ())\n+\t    AST::AttrVec outer_attrs = AST::AttrVec (),\n+\t    Location locus = Location ())\n     : outer_attrs (std::move (outer_attrs)),\n       match_arm_patterns (std::move (match_arm_patterns)),\n-      guard_expr (std::move (guard_expr))\n+      guard_expr (std::move (guard_expr)), locus (locus)\n   {}\n \n   // Copy constructor with clone\n@@ -3737,6 +3739,8 @@ struct MatchArm\n     match_arm_patterns.reserve (other.match_arm_patterns.size ());\n     for (const auto &e : other.match_arm_patterns)\n       match_arm_patterns.push_back (e->clone_pattern ());\n+\n+    locus = other.locus;\n   }\n \n   ~MatchArm () = default;\n@@ -3775,6 +3779,8 @@ struct MatchArm\n   {\n     return match_arm_patterns;\n   }\n+\n+  Location get_locus () const { return locus; }\n };\n \n /* A \"match case\" - a correlated match arm and resulting expression. Not\n@@ -3819,96 +3825,6 @@ struct MatchCase\n   std::unique_ptr<Expr> &get_expr () { return expr; }\n };\n \n-#if 0\n-// Block expression match case\n-class MatchCaseBlockExpr : public MatchCase\n-{\n-  std::unique_ptr<BlockExpr> block_expr;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  MatchCaseBlockExpr (MatchArm arm, std::unique_ptr<BlockExpr> block_expr)\n-    : MatchCase (std::move (arm)), block_expr (std::move (block_expr))\n-  {}\n-\n-  // Copy constructor requires clone\n-  MatchCaseBlockExpr (MatchCaseBlockExpr const &other)\n-    : MatchCase (other), block_expr (other.block_expr->clone_block_expr ())\n-  {}\n-\n-  // Overload assignment operator to have clone\n-  MatchCaseBlockExpr &operator= (MatchCaseBlockExpr const &other)\n-  {\n-    MatchCase::operator= (other);\n-    block_expr = other.block_expr->clone_block_expr ();\n-    // arm = other.arm;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  MatchCaseBlockExpr (MatchCaseBlockExpr &&other) = default;\n-  MatchCaseBlockExpr &operator= (MatchCaseBlockExpr &&other) = default;\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  MatchCaseBlockExpr *clone_match_case_impl () const override\n-  {\n-    return new MatchCaseBlockExpr (*this);\n-  }\n-};\n-\n-// Expression (except block expression) match case\n-class MatchCaseExpr : public MatchCase\n-{\n-  std::unique_ptr<Expr> expr;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  MatchCaseExpr (MatchArm arm, std::unique_ptr<Expr> expr)\n-    : MatchCase (std::move (arm)), expr (std::move (expr))\n-  {}\n-\n-  // Copy constructor requires clone\n-  MatchCaseExpr (MatchCaseExpr const &other)\n-    : MatchCase (other), expr (other.expr->clone_expr ())\n-  {}\n-\n-  // Overload assignment operator to have clone\n-  MatchCaseExpr &operator= (MatchCaseExpr const &other)\n-  {\n-    MatchCase::operator= (other);\n-    expr = other.expr->clone_expr ();\n-    // arm = other.arm;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  MatchCaseExpr (MatchCaseExpr &&other) = default;\n-  MatchCaseExpr &operator= (MatchCaseExpr &&other) = default;\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  MatchCaseExpr *clone_match_case_impl () const override\n-  {\n-    return new MatchCaseExpr (*this);\n-  }\n-};\n-#endif\n-\n // Match expression HIR node\n class MatchExpr : public ExprWithBlock\n {"}]}