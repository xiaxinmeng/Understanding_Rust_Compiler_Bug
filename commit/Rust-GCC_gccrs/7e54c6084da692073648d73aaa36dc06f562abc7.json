{"sha": "7e54c6084da692073648d73aaa36dc06f562abc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1NGM2MDg0ZGE2OTIwNzM2NDhkNzNhYWEzNmRjMDZmNTYyYWJjNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-12-19T15:57:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-12-19T15:57:02Z"}, "message": "re PR lto/51573 (ICE (segfault) in lto_varpool_encoder_encode_initializer_p)\n\n2011-12-19  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/51573\n\t* streamer-hooks.h (struct streamer_hooks): Add second\n\tref_p parameter to write_tree.\n\t(stream_write_tree): Adjust.\n\t(stream_write_tree_shallow_non_ref): New define.\n\t* lto-streamer.h (lto_output_tree): Adjust.\n\t* lto-streamer-out.c (lto_output_tree): Likewise.\n\t* tree-streamer-out.c (streamer_write_chain): Only\n\tforce the immediate tree to be streamed as non-reference.\n\n\t* gcc.dg/lto/20111207-2_0.c: Adjust.\n\t* g++.dg/lto/pr51573-1_0.C: New testcase.\n\nFrom-SVN: r182487", "tree": {"sha": "16b996c2025405cb5a936807037ff9de2de2ece6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16b996c2025405cb5a936807037ff9de2de2ece6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e54c6084da692073648d73aaa36dc06f562abc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e54c6084da692073648d73aaa36dc06f562abc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e54c6084da692073648d73aaa36dc06f562abc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e54c6084da692073648d73aaa36dc06f562abc7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23a3541f271216b1a518ecb6f713500b76949172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23a3541f271216b1a518ecb6f713500b76949172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23a3541f271216b1a518ecb6f713500b76949172"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "484459c0c1d4d7b0c33e51219f92a7d59fdc6d58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e54c6084da692073648d73aaa36dc06f562abc7", "patch": "@@ -1,3 +1,15 @@\n+2011-12-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/51573\n+\t* streamer-hooks.h (struct streamer_hooks): Add second\n+\tref_p parameter to write_tree.\n+\t(stream_write_tree): Adjust.\n+\t(stream_write_tree_shallow_non_ref): New define.\n+\t* lto-streamer.h (lto_output_tree): Adjust.\n+\t* lto-streamer-out.c (lto_output_tree): Likewise.\n+\t* tree-streamer-out.c (streamer_write_chain): Only\n+\tforce the immediate tree to be streamed as non-reference.\n+\n 2011-12-19  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/51583"}, {"sha": "4b3be3bb1ff5667a05df4d1708f551996f1eedd3", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=7e54c6084da692073648d73aaa36dc06f562abc7", "patch": "@@ -370,11 +370,12 @@ lto_write_tree (struct output_block *ob, tree expr, bool ref_p)\n \n \n /* Emit the physical representation of tree node EXPR to output block\n-   OB.  If REF_P is true, the leaves of EXPR are emitted as references\n-   via lto_output_tree_ref.  */\n+   OB.  If THIS_REF_P is true, the leaves of EXPR are emitted as references\n+   via lto_output_tree_ref.  REF_P is used for streaming siblings of EXPR.  */\n \n void\n-lto_output_tree (struct output_block *ob, tree expr, bool ref_p)\n+lto_output_tree (struct output_block *ob, tree expr,\n+\t\t bool ref_p, bool this_ref_p)\n {\n   unsigned ix;\n   bool existed_p;\n@@ -385,7 +386,7 @@ lto_output_tree (struct output_block *ob, tree expr, bool ref_p)\n       return;\n     }\n \n-  if (ref_p && tree_is_indexable (expr))\n+  if (this_ref_p && tree_is_indexable (expr))\n     {\n       lto_output_tree_ref (ob, expr);\n       return;"}, {"sha": "5c2f4eaac0671848d9ff851c15b6c4ce7cb9c3e2", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=7e54c6084da692073648d73aaa36dc06f562abc7", "patch": "@@ -825,7 +825,7 @@ tree lto_input_tree (struct lto_input_block *, struct data_in *);\n extern void lto_register_decl_definition (tree, struct lto_file_decl_data *);\n extern struct output_block *create_output_block (enum lto_section_type);\n extern void destroy_output_block (struct output_block *);\n-extern void lto_output_tree (struct output_block *, tree, bool);\n+extern void lto_output_tree (struct output_block *, tree, bool, bool);\n extern void lto_output_toplevel_asms (void);\n extern void produce_asm (struct output_block *ob, tree fn);\n void lto_output_decl_state_streams (struct output_block *,"}, {"sha": "d23d130cd3ebfaba9eeb56f6783824032bc06e14", "filename": "gcc/streamer-hooks.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Fstreamer-hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Fstreamer-hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstreamer-hooks.h?ref=7e54c6084da692073648d73aaa36dc06f562abc7", "patch": "@@ -41,9 +41,10 @@ struct streamer_hooks {\n      a tree node.  The arguments are: output_block where to write the\n      node, the tree node to write and a boolean flag that should be true\n      if the caller wants to write a reference to the tree, instead of the\n-     tree itself.  The referencing mechanism is up to each streamer to\n-     implement.  */\n-  void (*write_tree) (struct output_block *, tree, bool);\n+     tree itself.  The second boolean parameter specifies this for\n+     the tree itself, the first for all siblings that are streamed.\n+     The referencing mechanism is up to each streamer to implement.  */\n+  void (*write_tree) (struct output_block *, tree, bool, bool);\n \n   /* [REQ] Called by every tree streaming routine that needs to read\n      a tree node.  It takes two arguments: an lto_input_block pointing\n@@ -64,7 +65,10 @@ struct streamer_hooks {\n };\n \n #define stream_write_tree(OB, EXPR, REF_P) \\\n-    streamer_hooks.write_tree(OB, EXPR, REF_P)\n+    streamer_hooks.write_tree(OB, EXPR, REF_P, REF_P)\n+\n+#define stream_write_tree_shallow_non_ref(OB, EXPR, REF_P) \\\n+    streamer_hooks.write_tree(OB, EXPR, REF_P, false)\n \n #define stream_read_tree(IB, DATA_IN) \\\n     streamer_hooks.read_tree(IB, DATA_IN)"}, {"sha": "fcbed1e77bc249109baad21de61260a32a922406", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e54c6084da692073648d73aaa36dc06f562abc7", "patch": "@@ -1,3 +1,9 @@\n+2011-12-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/51573\n+\t* gcc.dg/lto/20111207-2_0.c: Adjust.\n+\t* g++.dg/lto/pr51573-1_0.C: New testcase.\n+\n 2011-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/51619"}, {"sha": "109bbb99a5a1bf0ccf74f3e51af1155f1cc871a0", "filename": "gcc/testsuite/g++.dg/lto/pr51573-1_0.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51573-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51573-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51573-1_0.C?ref=7e54c6084da692073648d73aaa36dc06f562abc7", "patch": "@@ -0,0 +1,13 @@\n+// { dg-lto-do link }\n+// { dg-lto-options { { -flto } { -flto -g } } }\n+\n+struct T\n+{\n+  virtual void m () { }\n+};\n+int\n+main ()\n+{\n+  bool fn (T);\n+  return 0;\n+}"}, {"sha": "6b7f30e136b131b660788974bddd6e78cc3197dc", "filename": "gcc/testsuite/gcc.dg/lto/20111207-2_0.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20111207-2_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20111207-2_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20111207-2_0.c?ref=7e54c6084da692073648d73aaa36dc06f562abc7", "patch": "@@ -1,4 +1,5 @@\n /* { dg-lto-do run } */\n+/* { dg-lto-options { { -g -O -flto } } } */\n \n int\n test (void)"}, {"sha": "17b5be78c7c98d79a085f220545c461b30c32bf6", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e54c6084da692073648d73aaa36dc06f562abc7/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=7e54c6084da692073648d73aaa36dc06f562abc7", "patch": "@@ -410,9 +410,11 @@ streamer_write_chain (struct output_block *ob, tree t, bool ref_p)\n \t to the global decls section as we do not want to have them\n \t enter decl merging.  This is, of course, only for the call\n \t for streaming BLOCK_VARS, but other callers are safe.  */\n-      stream_write_tree (ob, t,\n-\t\t\t ref_p && !(VAR_OR_FUNCTION_DECL_P (t)\n-\t\t\t\t    && DECL_EXTERNAL (t)));\n+      if (VAR_OR_FUNCTION_DECL_P (t)\n+\t  && DECL_EXTERNAL (t))\n+\tstream_write_tree_shallow_non_ref (ob, t, ref_p);\n+      else\n+\tstream_write_tree (ob, t, ref_p);\n \n       TREE_CHAIN (t) = saved_chain;\n       t = TREE_CHAIN (t);"}]}