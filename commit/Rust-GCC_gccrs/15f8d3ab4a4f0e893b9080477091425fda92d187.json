{"sha": "15f8d3ab4a4f0e893b9080477091425fda92d187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVmOGQzYWI0YTRmMGU4OTNiOTA4MDQ3NzA5MTQyNWZkYTkyZDE4Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-18T20:02:17Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-18T20:02:17Z"}, "message": "Introduce rtx_insn subclass of rtx_def\n\ngcc/\n2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n\n\t* coretypes.h (class rtx_insn): Add forward declaration.\n\n\t* rtl.h: Include is-a.h.\n\t(struct rtx_def): Add dummy \"desc\" and \"tag\" GTY options as a\n\tworkaround to ensure gengtype knows inheritance is occurring,\n\twhilst continuing to use the pre-existing special-casing for\n\trtx_def.\n\t(class rtx_insn): New subclass of rtx_def, adding the\n\tinvariant that we're dealing with something we can sanely use\n\tINSN_UID, NEXT_INSN, PREV_INSN on.\n\t(is_a_helper <rtx_insn *>::test): New.\n\t(is_a_helper <const rtx_insn *>::test): New.\n\nFrom-SVN: r214118", "tree": {"sha": "405b41edecb80a913b53d51834002c78bfc5aa09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/405b41edecb80a913b53d51834002c78bfc5aa09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15f8d3ab4a4f0e893b9080477091425fda92d187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f8d3ab4a4f0e893b9080477091425fda92d187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f8d3ab4a4f0e893b9080477091425fda92d187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f8d3ab4a4f0e893b9080477091425fda92d187/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26b3538ba2d537d820c45a02c11ae830093410c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b3538ba2d537d820c45a02c11ae830093410c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b3538ba2d537d820c45a02c11ae830093410c0"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "f6454dbad749906e7e14e12402917ba817e82017", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f8d3ab4a4f0e893b9080477091425fda92d187/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f8d3ab4a4f0e893b9080477091425fda92d187/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15f8d3ab4a4f0e893b9080477091425fda92d187", "patch": "@@ -1,3 +1,18 @@\n+2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* coretypes.h (class rtx_insn): Add forward declaration.\n+\n+\t* rtl.h: Include is-a.h.\n+\t(struct rtx_def): Add dummy \"desc\" and \"tag\" GTY options as a\n+\tworkaround to ensure gengtype knows inheritance is occurring,\n+\twhilst continuing to use the pre-existing special-casing for\n+\trtx_def.\n+\t(class rtx_insn): New subclass of rtx_def, adding the\n+\tinvariant that we're dealing with something we can sanely use\n+\tINSN_UID, NEXT_INSN, PREV_INSN on.\n+\t(is_a_helper <rtx_insn *>::test): New.\n+\t(is_a_helper <const rtx_insn *>::test): New.\n+\n 2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* is-a.h (template<T, U> safe_as_a <U *p>) New function."}, {"sha": "f22b9808b3f9b4abf550540a97c93d570345e3c0", "filename": "gcc/coretypes.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f8d3ab4a4f0e893b9080477091425fda92d187/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f8d3ab4a4f0e893b9080477091425fda92d187/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=15f8d3ab4a4f0e893b9080477091425fda92d187", "patch": "@@ -55,6 +55,13 @@ typedef const struct simple_bitmap_def *const_sbitmap;\n struct rtx_def;\n typedef struct rtx_def *rtx;\n typedef const struct rtx_def *const_rtx;\n+\n+/* Subclasses of rtx_def, using indentation to show the class\n+   hierarchy.\n+   Where possible, keep this list in the same order as in rtl.def.  */\n+class rtx_def;\n+  class rtx_insn;\n+\n struct rtvec_def;\n typedef struct rtvec_def *rtvec;\n typedef const struct rtvec_def *const_rtvec;"}, {"sha": "28f598e03f074a607d3100f5a89bf71f82e21190", "filename": "gcc/rtl.h", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f8d3ab4a4f0e893b9080477091425fda92d187/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f8d3ab4a4f0e893b9080477091425fda92d187/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=15f8d3ab4a4f0e893b9080477091425fda92d187", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n #include \"wide-int.h\"\n #include \"flags.h\"\n+#include \"is-a.h\"\n \n /* Value used by some passes to \"recognize\" noop moves as valid\n  instructions.  */\n@@ -266,7 +267,21 @@ struct GTY((variable_size)) hwivec_def {\n \n /* RTL expression (\"rtx\").  */\n \n-struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n+/* The GTY \"desc\" and \"tag\" options below are a kludge: we need a desc\n+   field for for gengtype to recognize that inheritance is occurring,\n+   so that all subclasses are redirected to the traversal hook for the\n+   base class.\n+   However, all of the fields are in the base class, and special-casing\n+   is at work.  Hence we use desc and tag of 0, generating a switch\n+   statement of the form:\n+     switch (0)\n+       {\n+       case 0: // all the work happens here\n+      }\n+   in order to work with the existing special-casing in gengtype.  */\n+\n+struct GTY((desc(\"0\"), tag(\"0\"),\n+\t    chain_next (\"RTX_NEXT (&%h)\"),\n \t    chain_prev (\"RTX_PREV (&%h)\"))) rtx_def {\n   /* The kind of expression this is.  */\n   ENUM_BITFIELD(rtx_code) code: 16;\n@@ -387,6 +402,25 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n   } GTY ((special (\"rtx_def\"), desc (\"GET_CODE (&%0)\"))) u;\n };\n \n+class GTY(()) rtx_insn : public rtx_def\n+{\n+  /* No extra fields, but adds the invariant:\n+\n+     (INSN_P (X)\n+      || NOTE_P (X)\n+      || JUMP_TABLE_DATA_P (X)\n+      || BARRIER_P (X)\n+      || LABEL_P (X))\n+\n+     i.e. that we must be able to use the following:\n+      INSN_UID ()\n+      NEXT_INSN ()\n+      PREV_INSN ()\n+    i.e. we have an rtx that has an INSN_UID field and can be part of\n+    a linked list of insns.\n+  */\n+};\n+\n /* The size in bytes of an rtx header (code, mode and flags).  */\n #define RTX_HDR_SIZE offsetof (struct rtx_def, u)\n \n@@ -548,6 +582,30 @@ struct GTY(()) rtvec_def {\n /* Predicate yielding nonzero iff X is a data for a jump table.  */\n #define JUMP_TABLE_DATA_P(INSN) (GET_CODE (INSN) == JUMP_TABLE_DATA)\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_insn *>::test (rtx rt)\n+{\n+  return (INSN_P (rt)\n+\t  || NOTE_P (rt)\n+\t  || JUMP_TABLE_DATA_P (rt)\n+\t  || BARRIER_P (rt)\n+\t  || LABEL_P (rt));\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <const rtx_insn *>::test (const_rtx rt)\n+{\n+  return (INSN_P (rt)\n+\t  || NOTE_P (rt)\n+\t  || JUMP_TABLE_DATA_P (rt)\n+\t  || BARRIER_P (rt)\n+\t  || LABEL_P (rt));\n+}\n+\n /* Predicate yielding nonzero iff X is a return or simple_return.  */\n #define ANY_RETURN_P(X) \\\n   (GET_CODE (X) == RETURN || GET_CODE (X) == SIMPLE_RETURN)"}]}