{"sha": "392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkyZmM1YjA2ODlkYjYxYjhkNWY4ZTJmOGM5ZDI5YTU0OGNkNGZhYQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-04-06T08:20:35Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-04-06T08:20:35Z"}, "message": "t-mmix (TARGET_LIBGCC2_CFLAGS): Don't -Dinhibit_libc here.\n\n\t* config/mmix/t-mmix (TARGET_LIBGCC2_CFLAGS): Don't -Dinhibit_libc\n\there.\n\n\t* config/mmix/mmix.h (INITIAL_ELIMINATION_OFFSET): Remove spurious\n\tsemicolon.\n\n\t* config/mmix/mmix.c (mmix_expand_builtin_va_arg): Variable-size\n\ttypes come in by-reference.  Fix typo in comment.\n\nFrom-SVN: r51946", "tree": {"sha": "a32c7853a0de25dc14823ed440a0d51757bb1da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a32c7853a0de25dc14823ed440a0d51757bb1da7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa/comments", "author": null, "committer": null, "parents": [{"sha": "36e408e6ca1a2c30bfbbb894056c77362c55b188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e408e6ca1a2c30bfbbb894056c77362c55b188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e408e6ca1a2c30bfbbb894056c77362c55b188"}], "stats": {"total": 73, "additions": 46, "deletions": 27}, "files": [{"sha": "98e4138d0e540f8d53d59a71dfc23ecce26f3117", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa", "patch": "@@ -1,3 +1,14 @@\n+2002-04-06  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/t-mmix (TARGET_LIBGCC2_CFLAGS): Don't -Dinhibit_libc\n+\there.\n+\n+\t* config/mmix/mmix.h (INITIAL_ELIMINATION_OFFSET): Remove spurious\n+\tsemicolon.\n+\n+\t* config/mmix/mmix.c (mmix_expand_builtin_va_arg): Variable-size\n+\ttypes come in by-reference.  Fix typo in comment.\n+\n 2002-04-05  David S. Miller  <davem@redhat.com>\n \n \t* config/sparc/freebsd.h (ENDFILE_SPEC): Add crtfastmath bits."}, {"sha": "d1f21d69117fc9899d958845a94fe1655c8c6a16", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa", "patch": "@@ -1273,7 +1273,7 @@ mmix_expand_builtin_va_arg (valist, type)\n   if (type == error_mark_node\n       || (type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type))) == NULL\n       || TREE_OVERFLOW (type_size))\n-    /* Presumable an error; the size isn't computable.  A message has\n+    /* Presumably an error; the size isn't computable.  A message has\n        supposedly been emitted elsewhere.  */\n     rounded_size = size_zero_node;\n   else\n@@ -1302,30 +1302,38 @@ mmix_expand_builtin_va_arg (valist, type)\n    }\n  else if (!integer_zerop (rounded_size))\n    {\n-     /* If the size is less than a register, the we need to pad the\n-        address by adding the difference.  */\n-     tree addend\n-       = fold (build (COND_EXPR, sizetype,\n-\t\t      fold (build (GT_EXPR, sizetype,\n-\t\t\t\t   rounded_size,\n-\t\t\t\t   align)),\n-\t\t      size_zero_node,\n-\t\t      fold (build (MINUS_EXPR, sizetype,\n-\t\t\t\t   rounded_size,\n-\t\t\t\t   type_size))));\n-     tree addr_tree1\n-       = fold (build (PLUS_EXPR, TREE_TYPE (addr_tree), addr_tree, addend));\n-\n-     /* If this type is larger than what fits in a register, then it is\n-\tpassed by reference.  */\n-     addr_tree\n-       = fold (build (COND_EXPR, TREE_TYPE (addr_tree1),\n-\t\t      fold (build (GT_EXPR, sizetype,\n-\t\t\t\t   rounded_size,\n-\t\t\t\t   ptr_size)),\n-\t\t      build1 (INDIRECT_REF, build_pointer_type (type),\n-\t\t\t      addr_tree1),\n-\t\t      addr_tree1));\n+     if (!really_constant_p (type_size))\n+       /* Varying-size types come in by reference.  */\n+       addr_tree\n+\t = build1 (INDIRECT_REF, build_pointer_type (type), addr_tree);\n+     else\n+       {\n+\t /* If the size is less than a register, then we need to pad the\n+\t    address by adding the difference.  */\n+\t tree addend\n+\t   = fold (build (COND_EXPR, sizetype,\n+\t\t\t  fold (build (GT_EXPR, sizetype,\n+\t\t\t\t       rounded_size,\n+\t\t\t\t       align)),\n+\t\t\t  size_zero_node,\n+\t\t\t  fold (build (MINUS_EXPR, sizetype,\n+\t\t\t\t       rounded_size,\n+\t\t\t\t       type_size))));\n+\t tree addr_tree1\n+\t   = fold (build (PLUS_EXPR, TREE_TYPE (addr_tree), addr_tree,\n+\t\t\t  addend));\n+\n+\t /* If this type is larger than what fits in a register, then it\n+\t    is passed by reference.  */\n+\t addr_tree\n+\t   = fold (build (COND_EXPR, TREE_TYPE (addr_tree1),\n+\t\t\t  fold (build (GT_EXPR, sizetype,\n+\t\t\t\t       rounded_size,\n+\t\t\t\t       ptr_size)),\n+\t\t\t  build1 (INDIRECT_REF, build_pointer_type (type),\n+\t\t\t\t  addr_tree1),\n+\t\t\t  addr_tree1));\n+       }\n    }\n \n   addr = expand_expr (addr_tree, NULL_RTX, Pmode, EXPAND_NORMAL);"}, {"sha": "6171e588500436a0e2adb93e8b3888262c51fa10", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa", "patch": "@@ -695,7 +695,7 @@ enum reg_class\n #define CAN_ELIMINATE(FROM, TO) 1\n \n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n- (OFFSET) = mmix_initial_elimination_offset (FROM, TO);\n+ (OFFSET) = mmix_initial_elimination_offset (FROM, TO)\n \n \n /* Node: Stack Arguments */"}, {"sha": "84231ace71b4cdb4e2f40754003c78fa60f8c48c", "filename": "gcc/config/mmix/t-mmix", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa/gcc%2Fconfig%2Fmmix%2Ft-mmix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa/gcc%2Fconfig%2Fmmix%2Ft-mmix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Ft-mmix?ref=392fc5b0689db61b8d5f8e2f8c9d29a548cd4faa", "patch": "@@ -6,7 +6,7 @@ LIBGCC1 =\n LIBGCC1_TEST =\n CROSS_LIBGCC1 =\n \n-TARGET_LIBGCC2_CFLAGS = -mlibfuncs -Dinhibit_libc -O2\n+TARGET_LIBGCC2_CFLAGS = -mlibfuncs -O2\n \n EXTRA_MULTILIB_PARTS = crti.o crtn.o crtbegin.o crtend.o\n "}]}