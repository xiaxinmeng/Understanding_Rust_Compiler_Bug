{"sha": "386b1f1f416c9da018d47ccd371494b3a3a32870", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2YjFmMWY0MTZjOWRhMDE4ZDQ3Y2NkMzcxNDk0YjNhM2EzMjg3MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-11-18T14:52:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-11-18T14:52:29Z"}, "message": "cuintp.c (UI_From_gnu): Use tree_to_shwi rather than tree_low_cst.\n\ngcc/ada/\n\t* gcc-interface/cuintp.c (UI_From_gnu): Use tree_to_shwi rather than\n\ttree_low_cst.\n\ngcc/c-family/\n\t* c-common.c (fold_offsetof_1): Use tree_to_uhwi rather than\n\ttree_low_cst.\n\t(complete_array_type): Update comment to refer to tree_to_[su]hwi\n\trather than tree_low_cst.\n\ngcc/c/\n\t* c-decl.c (grokdeclarator): Update comment to refer to\n\ttree_to_[su]hwi rather than tree_low_cst.\n\ngcc/cp/\n\t* decl.c (reshape_init_array_1): Use tree_to_uhwi rather than\n\ttree_low_cst.\n\t(grokdeclarator): Update comment to refer to tree_to_[su]hwi rather\n\tthan tree_low_cst.\n\ngcc/\n\t* expr.h: Update comments to refer to tree_to_[su]hwi rather\n\tthan tree_low_cst.\n\t* fold-const.c (fold_binary_loc): Likewise.\n\t* expr.c (store_constructor): Use tree_to_uhwi rather than\n\ttree_low_cst.\n\t* ipa-utils.h (possible_polymorphic_call_target_p): Likewise.\n\t* stmt.c (emit_case_dispatch_table): Likewise.\n\t* tree-switch-conversion.c (emit_case_bit_tests): Likewise.\n\nFrom-SVN: r204962", "tree": {"sha": "d16c65f5e22e1df0f38b0740834821a33ca730ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d16c65f5e22e1df0f38b0740834821a33ca730ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/386b1f1f416c9da018d47ccd371494b3a3a32870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386b1f1f416c9da018d47ccd371494b3a3a32870", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386b1f1f416c9da018d47ccd371494b3a3a32870", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386b1f1f416c9da018d47ccd371494b3a3a32870/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae7e9dddb860567a40d7c84736522242236a3355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7e9dddb860567a40d7c84736522242236a3355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae7e9dddb860567a40d7c84736522242236a3355"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "2c404891053accec2ba7a5c4ff0c9711f6c1d79e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -1,3 +1,14 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* expr.h: Update comments to refer to tree_to_[su]hwi rather\n+\tthan tree_low_cst.\n+\t* fold-const.c (fold_binary_loc): Likewise.\n+\t* expr.c (store_constructor): Use tree_to_uhwi rather than\n+\ttree_low_cst.\n+\t* ipa-utils.h (possible_polymorphic_call_target_p): Likewise.\n+\t* stmt.c (emit_case_dispatch_table): Likewise.\n+\t* tree-switch-conversion.c (emit_case_bit_tests): Likewise.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* alias.c, asan.c, builtins.c, cfgexpand.c, cgraph.c,"}, {"sha": "a9fd65b16cd749a30ad0d8de022fcbbaf5f3e130", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc-interface/cuintp.c (UI_From_gnu): Use tree_to_shwi rather than\n+\ttree_low_cst.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc-interface/decl.c, gcc-interface/utils.c, gcc-interface/utils2.c:"}, {"sha": "473140daa2b4d449bcb29d3ab227fd12e1ffa060", "filename": "gcc/ada/gcc-interface/cuintp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fcuintp.c?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -176,9 +176,9 @@ UI_From_gnu (tree Input)\n \n   for (i = Max_For_Dint - 1; i >= 0; i--)\n     {\n-      v[i] = tree_low_cst (fold_build1 (ABS_EXPR, gnu_type,\n+      v[i] = tree_to_shwi (fold_build1 (ABS_EXPR, gnu_type,\n \t\t\t\t\tfold_build2 (TRUNC_MOD_EXPR, gnu_type,\n-\t\t\t\t\t\t     gnu_temp, gnu_base)), 0);\n+\t\t\t\t\t\t     gnu_temp, gnu_base)));\n       gnu_temp = fold_build2 (TRUNC_DIV_EXPR, gnu_type, gnu_temp, gnu_base);\n     }\n "}, {"sha": "8aac23c700a718ed93d256242cafdbd79467da39", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -1,3 +1,10 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-common.c (fold_offsetof_1): Use tree_to_uhwi rather than\n+\ttree_low_cst.\n+\t(complete_array_type): Update comment to refer to tree_to_[su]hwi\n+\trather than tree_low_cst.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* c-common.c, c-cppbuiltin.c: Replace tree_low_cst (..., 1) with"}, {"sha": "fb8295dfdc539ede331adc4bc0c0f2544bfe717e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -9721,8 +9721,7 @@ fold_offsetof_1 (tree expr)\n \t  return error_mark_node;\n \t}\n       off = size_binop_loc (input_location, PLUS_EXPR, DECL_FIELD_OFFSET (t),\n-\t\t\t    size_int (tree_low_cst (DECL_FIELD_BIT_OFFSET (t),\n-\t\t\t\t\t\t    1)\n+\t\t\t    size_int (tree_to_uhwi (DECL_FIELD_BIT_OFFSET (t))\n \t\t\t\t      / BITS_PER_UNIT));\n       break;\n \n@@ -10091,7 +10090,7 @@ complete_array_type (tree *ptype, tree initial_value, bool do_default)\n     {\n       error (\"size of array is too large\");\n       /* If we proceed with the array type as it is, we'll eventually\n-\t crash in tree_low_cst().  */\n+\t crash in tree_to_[su]hwi().  */\n       type = error_mark_node;\n     }\n "}, {"sha": "e8a5365592d2f0893efff6a8f2cfb4fe4f74c3c6", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-decl.c (grokdeclarator): Update comment to refer to\n+\ttree_to_[su]hwi rather than tree_low_cst.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* c-decl.c, c-typeck.c: Replace tree_low_cst (..., 1) with"}, {"sha": "10933e80d1a13463ddc1fe63c4d4b157287d7444", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -5912,7 +5912,7 @@ grokdeclarator (const struct c_declarator *declarator,\n       else\n \terror_at (loc, \"size of unnamed array is too large\");\n       /* If we proceed with the array type as it is, we'll eventually\n-\t crash in tree_low_cst().  */\n+\t crash in tree_to_[su]hwi().  */\n       type = error_mark_node;\n     }\n "}, {"sha": "2906ed7a63ac9bc1e8743081e6e55a00ed8c0d93", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -1,3 +1,10 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* decl.c (reshape_init_array_1): Use tree_to_uhwi rather than\n+\ttree_low_cst.\n+\t(grokdeclarator): Update comment to refer to tree_to_[su]hwi rather\n+\tthan tree_low_cst.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* call.c, class.c, decl.c, error.c: Replace tree_low_cst (..., 1) with"}, {"sha": "e2aad9d54b35d4ce28fe493db78136d6df685b48", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -5097,8 +5097,7 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n \tmax_index_cst = tree_to_uhwi (max_index);\n       /* sizetype is sign extended, not zero extended.  */\n       else\n-\tmax_index_cst = tree_low_cst (fold_convert (size_type_node, max_index),\n-\t\t\t\t      1);\n+\tmax_index_cst = tree_to_uhwi (fold_convert (size_type_node, max_index));\n     }\n \n   /* Loop until there are no more initializers.  */\n@@ -10033,7 +10032,7 @@ grokdeclarator (const cp_declarator *declarator,\n     {\n       error (\"size of array %qs is too large\", name);\n       /* If we proceed with the array type as it is, we'll eventually\n-\t crash in tree_low_cst().  */\n+\t crash in tree_to_[su]hwi().  */\n       type = error_mark_node;\n     }\n "}, {"sha": "f4d03ab80267ee666ff8f2a370f7e78efc2b06b2", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -6302,10 +6302,10 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \n \t    FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (exp), idx, value)\n \t      {\n-\t\tint n_elts_here = tree_low_cst\n+\t\tint n_elts_here = tree_to_uhwi\n \t\t  (int_const_binop (TRUNC_DIV_EXPR,\n \t\t\t\t    TYPE_SIZE (TREE_TYPE (value)),\n-\t\t\t\t    TYPE_SIZE (elttype)), 1);\n+\t\t\t\t    TYPE_SIZE (elttype)));\n \n \t\tcount += n_elts_here;\n \t\tif (mostly_zeros_p (value))"}, {"sha": "8230fd54bb13346795dbe63ff47d4e5035c339a7", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -26,8 +26,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl.h\"\n /* For optimize_size */\n #include \"flags.h\"\n-/* For tree_fits_[su]hwi_p, tree_low_cst, fold_convert, size_binop, ssize_int,\n-   TREE_CODE, TYPE_SIZE, int_size_in_bytes,    */\n+/* For tree_fits_[su]hwi_p, tree_to_[su]hwi, fold_convert, size_binop,\n+   ssize_int, TREE_CODE, TYPE_SIZE, int_size_in_bytes,    */\n #include \"tree-core.h\"\n /* For GET_MODE_BITSIZE, word_mode */\n #include \"machmode.h\""}, {"sha": "22f64b3e48f1ba1d43569572d7c2966c559838ca", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -11904,7 +11904,7 @@ fold_binary_loc (location_t loc,\n \t\t    if (TREE_CODE (TREE_OPERAND (pmop[which], 1))\n \t\t\t!= INTEGER_CST)\n \t\t      break;\n-\t\t    /* tree_low_cst not used, because we don't care about\n+\t\t    /* tree_to_[su]hwi not used, because we don't care about\n \t\t       the upper bits.  */\n \t\t    cst0 = TREE_INT_CST_LOW (TREE_OPERAND (pmop[which], 1));\n \t\t    cst0 &= cst1;"}, {"sha": "ca8b87290b5d58b2d61679003295905c9d0138fa", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -117,8 +117,8 @@ possible_polymorphic_call_target_p (tree call,\n \t\t\t\t    struct cgraph_node *n)\n {\n   return possible_polymorphic_call_target_p (obj_type_ref_class (call),\n-\t\t\t\t\t     tree_low_cst\n-\t\t\t\t\t\t(OBJ_TYPE_REF_TOKEN (call), 1),\n+\t\t\t\t\t     tree_to_uhwi\n+\t\t\t\t\t\t(OBJ_TYPE_REF_TOKEN (call)),\n \t\t\t\t\t     n);\n }\n #endif  /* GCC_IPA_UTILS_H  */"}, {"sha": "28fbf7a6bc11c5359bbecf5f2c1357359a45e4c8", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -1029,11 +1029,11 @@ emit_case_dispatch_table (tree index_expr, tree index_type,\n \t value since that should fit in a HOST_WIDE_INT while the\n \t actual values may not.  */\n       HOST_WIDE_INT i_low\n-\t= tree_low_cst (fold_build2 (MINUS_EXPR, index_type,\n-\t\t\t\t     n->low, minval), 1);\n+\t= tree_to_uhwi (fold_build2 (MINUS_EXPR, index_type,\n+\t\t\t\t     n->low, minval));\n       HOST_WIDE_INT i_high\n-\t= tree_low_cst (fold_build2 (MINUS_EXPR, index_type,\n-\t\t\t\t     n->high, minval), 1);\n+\t= tree_to_uhwi (fold_build2 (MINUS_EXPR, index_type,\n+\t\t\t\t     n->high, minval));\n       HOST_WIDE_INT i;\n \n       for (i = i_low; i <= i_high; i ++)"}, {"sha": "a4340a49a8b7f1eeb98b720db27f0017f9dbc2e0", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b1f1f416c9da018d47ccd371494b3a3a32870/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=386b1f1f416c9da018d47ccd371494b3a3a32870", "patch": "@@ -354,15 +354,13 @@ emit_case_bit_tests (gimple swtch, tree index_expr,\n       else\n         test[k].bits++;\n \n-      lo = tree_low_cst (int_const_binop (MINUS_EXPR,\n-\t\t\t\t\t  CASE_LOW (cs), minval),\n-\t\t\t 1);\n+      lo = tree_to_uhwi (int_const_binop (MINUS_EXPR,\n+\t\t\t\t\t  CASE_LOW (cs), minval));\n       if (CASE_HIGH (cs) == NULL_TREE)\n \thi = lo;\n       else\n-\thi = tree_low_cst (int_const_binop (MINUS_EXPR, \n-\t\t\t\t\t    CASE_HIGH (cs), minval),\n-\t\t\t   1);\n+\thi = tree_to_uhwi (int_const_binop (MINUS_EXPR,\n+\t\t\t\t\t    CASE_HIGH (cs), minval));\n \n       for (j = lo; j <= hi; j++)\n         if (j >= HOST_BITS_PER_WIDE_INT)"}]}