{"sha": "56a4e074ee8bcf4c3627fb595c31bd833d5a6532", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhNGUwNzRlZThiY2Y0YzM2MjdmYjU5NWMzMWJkODMzZDVhNjUzMg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-23T12:07:09Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-23T12:07:09Z"}, "message": "Do not use tree_to_wide_ref that point to a temporary (PR c++/90587).\n\n2019-05-23  Martin Liska  <mliska@suse.cz>\n\n\tPR c++/90587\n\t* tree-ssa-uninit.c (value_sat_pred_p): The result of &\n\toperation points to a temporary (pointed via tree_to_wide_ref)\n\tthat is out of scope after the &.\n\nFrom-SVN: r271555", "tree": {"sha": "863165a5b3b619ab3a79ffcc8f116260a3c0bf34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/863165a5b3b619ab3a79ffcc8f116260a3c0bf34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56a4e074ee8bcf4c3627fb595c31bd833d5a6532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a4e074ee8bcf4c3627fb595c31bd833d5a6532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a4e074ee8bcf4c3627fb595c31bd833d5a6532", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a4e074ee8bcf4c3627fb595c31bd833d5a6532/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16f8992e7fec7b8d49fa423b565331b39b17b30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f8992e7fec7b8d49fa423b565331b39b17b30d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f8992e7fec7b8d49fa423b565331b39b17b30d"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "5b12af809abd3b617dbe1f942c16f7286313d216", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a4e074ee8bcf4c3627fb595c31bd833d5a6532/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a4e074ee8bcf4c3627fb595c31bd833d5a6532/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56a4e074ee8bcf4c3627fb595c31bd833d5a6532", "patch": "@@ -1,3 +1,10 @@\n+2019-05-23  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/90587\n+\t* tree-ssa-uninit.c (value_sat_pred_p): The result of &\n+\toperation points to a temporary (pointed via tree_to_wide_ref)\n+\tthat is out of scope after the &.\n+\n 2019-05-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/90592"}, {"sha": "fe8f8f0bc28f022c408f624ddb80d1b4cc2d2112", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a4e074ee8bcf4c3627fb595c31bd833d5a6532/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a4e074ee8bcf4c3627fb595c31bd833d5a6532/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=56a4e074ee8bcf4c3627fb595c31bd833d5a6532", "patch": "@@ -1058,7 +1058,7 @@ value_sat_pred_p (tree val, tree boundary, enum tree_code cmpc,\n   if (cmpc != BIT_AND_EXPR)\n     return is_value_included_in (val, boundary, cmpc);\n \n-  wi::tree_to_wide_ref andw = wi::to_wide (val) & wi::to_wide (boundary);\n+  wide_int andw = wi::to_wide (val) & wi::to_wide (boundary);\n   if (exact_p)\n     return andw == wi::to_wide (val);\n   else"}]}