{"sha": "7bb0199604cf8ba978b2fbfb751f2081faa64f87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JiMDE5OTYwNGNmOGJhOTc4YjJmYmZiNzUxZjIwODFmYWE2NGY4Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-14T14:59:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-14T14:59:20Z"}, "message": "tree-cfg.c (verify_expr_location, [...]): New functions.\n\n2013-01-14  Richard Biener  <rguenther@suse.de>\n\n\t* tree-cfg.c (verify_expr_location, verify_expr_location_1,\n\tverify_location, collect_subblocks): New functions.\n\t(verify_gimple_in_cfg): Verify that locations only reference\n\tBLOCKs in the functions BLOCK tree.\n\nFrom-SVN: r195147", "tree": {"sha": "6f2ecb0a9406dd991dbe8cc74c1b0c73f7f695e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f2ecb0a9406dd991dbe8cc74c1b0c73f7f695e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bb0199604cf8ba978b2fbfb751f2081faa64f87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb0199604cf8ba978b2fbfb751f2081faa64f87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bb0199604cf8ba978b2fbfb751f2081faa64f87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb0199604cf8ba978b2fbfb751f2081faa64f87/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30b2fc65b93b31fd9c2c7c070a31dbba786bbec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b2fc65b93b31fd9c2c7c070a31dbba786bbec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b2fc65b93b31fd9c2c7c070a31dbba786bbec0"}], "stats": {"total": 106, "additions": 105, "deletions": 1}, "files": [{"sha": "93947b6e34f8a66ec7bebcf5e2ac5b65f9f0d48e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb0199604cf8ba978b2fbfb751f2081faa64f87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb0199604cf8ba978b2fbfb751f2081faa64f87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bb0199604cf8ba978b2fbfb751f2081faa64f87", "patch": "@@ -1,3 +1,10 @@\n+2013-01-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (verify_expr_location, verify_expr_location_1,\n+\tverify_location, collect_subblocks): New functions.\n+\t(verify_gimple_in_cfg): Verify that locations only reference\n+\tBLOCKs in the functions BLOCK tree.\n+\n 2013-01-14  Richard Biener  <rguenther@suse.de>\n \n \t* tree-cfgcleanup.c (remove_forwarder_block): Unshare propagated"}, {"sha": "83003fb8b44cf762131909b80a10ba87e8610a91", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 98, "deletions": 1, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb0199604cf8ba978b2fbfb751f2081faa64f87/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb0199604cf8ba978b2fbfb751f2081faa64f87/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=7bb0199604cf8ba978b2fbfb751f2081faa64f87", "patch": "@@ -4499,19 +4499,84 @@ verify_eh_throw_stmt_node (void **slot, void *data)\n   return 1;\n }\n \n+/* Verify if the location LOCs block is in BLOCKS.  */\n+\n+static bool\n+verify_location (pointer_set_t *blocks, location_t loc)\n+{\n+  tree block = LOCATION_BLOCK (loc);\n+  if (block != NULL_TREE\n+      && !pointer_set_contains (blocks, block))\n+    {\n+      error (\"location references block not in block tree\");\n+      return true;\n+    }\n+  return false;\n+}\n+\n+/* Called via walk_tree.  Verify locations of expressions.  */\n+\n+static tree\n+verify_expr_location_1 (tree *tp, int *walk_subtrees, void *data)\n+{\n+  struct pointer_set_t *blocks = (struct pointer_set_t *) data;\n+\n+  if (!EXPR_P (*tp))\n+    {\n+      *walk_subtrees = false;\n+      return NULL;\n+    }\n+\n+  location_t loc = EXPR_LOCATION (*tp);\n+  if (verify_location (blocks, loc))\n+    return *tp;\n+\n+  return NULL;\n+}\n+\n+/* Called via walk_gimple_op.  Verify locations of expressions.  */\n+\n+static tree\n+verify_expr_location (tree *tp, int *walk_subtrees, void *data)\n+{\n+  struct walk_stmt_info *wi = (struct walk_stmt_info *) data;\n+  return verify_expr_location_1 (tp, walk_subtrees, wi->info);\n+}\n+\n+/* Insert all subblocks of BLOCK into BLOCKS and recurse.  */\n+\n+static void\n+collect_subblocks (pointer_set_t *blocks, tree block)\n+{\n+  tree t;\n+  for (t = BLOCK_SUBBLOCKS (block); t; t = BLOCK_CHAIN (t))\n+    {\n+      pointer_set_insert (blocks, t);\n+      collect_subblocks (blocks, t);\n+    }\n+}\n+\n /* Verify the GIMPLE statements in the CFG of FN.  */\n \n DEBUG_FUNCTION void\n verify_gimple_in_cfg (struct function *fn)\n {\n   basic_block bb;\n   bool err = false;\n-  struct pointer_set_t *visited, *visited_stmts;\n+  struct pointer_set_t *visited, *visited_stmts, *blocks;\n \n   timevar_push (TV_TREE_STMT_VERIFY);\n   visited = pointer_set_create ();\n   visited_stmts = pointer_set_create ();\n \n+  /* Collect all BLOCKs referenced by the BLOCK tree of FN.  */\n+  blocks = pointer_set_create ();\n+  if (DECL_INITIAL (fn->decl))\n+    {\n+      pointer_set_insert (blocks, DECL_INITIAL (fn->decl));\n+      collect_subblocks (blocks, DECL_INITIAL (fn->decl));\n+    }\n+\n   FOR_EACH_BB_FN (bb, fn)\n     {\n       gimple_stmt_iterator gsi;\n@@ -4532,6 +4597,13 @@ verify_gimple_in_cfg (struct function *fn)\n \n \t  err2 |= verify_gimple_phi (phi);\n \n+\t  /* Only PHI arguments have locations.  */\n+\t  if (gimple_location (phi) != UNKNOWN_LOCATION)\n+\t    {\n+\t      error (\"PHI node with location\");\n+\t      err2 = true;\n+\t    }\n+\n \t  for (i = 0; i < gimple_phi_num_args (phi); i++)\n \t    {\n \t      tree arg = gimple_phi_arg_def (phi, i);\n@@ -4543,6 +4615,20 @@ verify_gimple_in_cfg (struct function *fn)\n \t\t  debug_generic_expr (addr);\n \t\t  err2 |= true;\n \t\t}\n+\t      location_t loc = gimple_phi_arg_location (phi, i);\n+\t      if (virtual_operand_p (gimple_phi_result (phi))\n+\t\t  && loc != UNKNOWN_LOCATION)\n+\t\t{\n+\t\t  error (\"virtual PHI with argument locations\");\n+\t\t  err2 = true;\n+\t\t}\n+\t      addr = walk_tree (&arg, verify_expr_location_1, blocks, NULL);\n+\t      if (addr)\n+\t\t{\n+\t\t  debug_generic_expr (addr);\n+\t\t  err2 = true;\n+\t\t}\n+\t      err2 |= verify_location (blocks, loc);\n \t    }\n \n \t  if (err2)\n@@ -4567,6 +4653,7 @@ verify_gimple_in_cfg (struct function *fn)\n \t    }\n \n \t  err2 |= verify_gimple_stmt (stmt);\n+\t  err2 |= verify_location (blocks, gimple_location (stmt));\n \n \t  memset (&wi, 0, sizeof (wi));\n \t  wi.info = (void *) visited;\n@@ -4578,6 +4665,15 @@ verify_gimple_in_cfg (struct function *fn)\n \t      err2 |= true;\n \t    }\n \n+\t  memset (&wi, 0, sizeof (wi));\n+\t  wi.info = (void *) blocks;\n+\t  addr = walk_gimple_op (stmt, verify_expr_location, &wi);\n+\t  if (addr)\n+\t    {\n+\t      debug_generic_expr (addr);\n+\t      err2 |= true;\n+\t    }\n+\n \t  /* ???  Instead of not checking these stmts at all the walker\n \t     should know its context via wi.  */\n \t  if (!is_gimple_debug (stmt)\n@@ -4632,6 +4728,7 @@ verify_gimple_in_cfg (struct function *fn)\n \n   pointer_set_destroy (visited);\n   pointer_set_destroy (visited_stmts);\n+  pointer_set_destroy (blocks);\n   verify_histograms ();\n   timevar_pop (TV_TREE_STMT_VERIFY);\n }"}]}