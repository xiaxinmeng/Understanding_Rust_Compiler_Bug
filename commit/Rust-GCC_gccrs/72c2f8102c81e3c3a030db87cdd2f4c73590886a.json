{"sha": "72c2f8102c81e3c3a030db87cdd2f4c73590886a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJjMmY4MTAyYzgxZTNjM2EwMzBkYjg3Y2RkMmY0YzczNTkwODg2YQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-08-03T14:07:32Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-03T14:07:32Z"}, "message": "Add testcases for PR target/47744.\n\n2011-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/47744\n\t* gcc.dg/torture/pr47744-1.c: New.\n\t* gcc.dg/torture/pr47744-2.c: Likewise.\n\t* gcc.dg/torture/pr47744-3.c: Likewise.\n\nFrom-SVN: r177271", "tree": {"sha": "a53d70f41f275e588ae6951259a5681a377657ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a53d70f41f275e588ae6951259a5681a377657ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72c2f8102c81e3c3a030db87cdd2f4c73590886a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c2f8102c81e3c3a030db87cdd2f4c73590886a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72c2f8102c81e3c3a030db87cdd2f4c73590886a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c2f8102c81e3c3a030db87cdd2f4c73590886a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a130fb24411061b0edf14203bd76ff1c3aad89b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a130fb24411061b0edf14203bd76ff1c3aad89b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a130fb24411061b0edf14203bd76ff1c3aad89b8"}], "stats": {"total": 142, "additions": 142, "deletions": 0}, "files": [{"sha": "59175c657fde1e0559f701f2edd0750a5c2012ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c2f8102c81e3c3a030db87cdd2f4c73590886a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c2f8102c81e3c3a030db87cdd2f4c73590886a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72c2f8102c81e3c3a030db87cdd2f4c73590886a", "patch": "@@ -1,3 +1,10 @@\n+2011-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/47744\n+\t* gcc.dg/torture/pr47744-1.c: New.\n+\t* gcc.dg/torture/pr47744-2.c: Likewise.\n+\t* gcc.dg/torture/pr47744-3.c: Likewise.\n+\n 2011-08-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/49958"}, {"sha": "0f7efa9f0e366790cf364c48db9b7c1f24a64209", "filename": "gcc/testsuite/gcc.dg/torture/pr47744-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c2f8102c81e3c3a030db87cdd2f4c73590886a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47744-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c2f8102c81e3c3a030db87cdd2f4c73590886a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47744-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47744-1.c?ref=72c2f8102c81e3c3a030db87cdd2f4c73590886a", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fpic\" { target fpic } } */\n+\n+typedef int int32_t;\n+static const int init_jk[] = {2,3,4,6};\n+ int __kernel_rem_pio2(double *x, double *y, int e0, int nx, int prec, const int32_t *ipio2)\n+{\n+ int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;\n+ double z,fw,f[20],fq[20],q[20];\n+ jk = init_jk[prec];\n+ jp = jk;\n+ jx = nx-1;\n+ for (i=0;i<=jk;i++) {\n+     for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;\n+ }\n+ for(i=0,j=jz,z=q[jz];j>0;i++,j--) {\n+     z = q[j-1]+fw;\n+ }\n+ n = (int32_t) z;\n+ return n&7;\n+}"}, {"sha": "82f6151cb45712f834966216d960dc59d6c2591c", "filename": "gcc/testsuite/gcc.dg/torture/pr47744-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c2f8102c81e3c3a030db87cdd2f4c73590886a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47744-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c2f8102c81e3c3a030db87cdd2f4c73590886a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47744-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47744-2.c?ref=72c2f8102c81e3c3a030db87cdd2f4c73590886a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+typedef long unsigned int size_t;\n+typedef long int ssize_t;\n+typedef ssize_t index_type;\n+typedef __int128_t GFC_INTEGER_16;\n+typedef struct descriptor_dimension\n+{\n+  index_type _stride;\n+  index_type _lbound;\n+  index_type _ubound;\n+}\n+descriptor_dimension;\n+typedef struct { GFC_INTEGER_16 *data; size_t offset; index_type dtype; descriptor_dimension dim[7];} gfc_array_i16;\n+void\n+matmul_i16 (gfc_array_i16 * const restrict retarray,\n+\t    gfc_array_i16 * const restrict a,\n+\t    GFC_INTEGER_16 bbase_yn)\n+{\n+  GFC_INTEGER_16 * restrict dest;\n+  index_type rxstride, rystride;\n+  index_type x, y, n, count, xcount;\n+  GFC_INTEGER_16 * restrict dest_y;\n+  GFC_INTEGER_16 s;\n+  const GFC_INTEGER_16 * restrict abase_n;\n+  rxstride = ((retarray)->dim[0]._stride);\n+  rystride = ((retarray)->dim[1]._stride);\n+  xcount = ((a)->dim[0]._ubound + 1 - (a)->dim[0]._lbound);\n+  dest = retarray->data;\n+  dest_y = &dest[y*rystride];\n+  for (x = 0; x < xcount; x++)\n+    dest_y[x] += abase_n[x] * bbase_yn;\n+  for (x = 0; x < xcount; x++)\n+    {\n+      for (n = 0; n < count; n++)\n+\tdest_y[x*rxstride] = (GFC_INTEGER_16) 0;\n+    }\n+}"}, {"sha": "5a5dd33e9276714942444a71c26c97b7983e56bc", "filename": "gcc/testsuite/gcc.dg/torture/pr47744-3.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c2f8102c81e3c3a030db87cdd2f4c73590886a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47744-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c2f8102c81e3c3a030db87cdd2f4c73590886a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47744-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47744-3.c?ref=72c2f8102c81e3c3a030db87cdd2f4c73590886a", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do compile } */\n+\n+typedef union rtunion_def {\n+  struct rtx_def *rtx;\n+} rtunion;\n+typedef struct rtx_def {\n+  unsigned short code;\n+  rtunion fld[1];\n+} *rtx;\n+extern rtx recog_operand[];\n+extern rtx *recog_operand_loc[];\n+extern int reload_n_operands;\n+extern void find_dummy_reload (int, int);\n+extern int asm_noperands (rtx);\n+extern int n_occurrences (char **);\n+char operands_match[10][10];\n+void find_reloads (rtx insn, int n_alternatives, int commutative)\n+{\n+  register int i, j;\n+  int noperands;\n+  char *constraints[10];\n+  int address_reloaded[10];\n+  int this_alternative[10];\n+  char this_alternative_win[10];\n+  int this_alternative_matches[10];\n+  int this_alternative_number;\n+  rtx body = ((insn)->fld[3].rtx);\n+  int operand_mode[10];\n+  if (body->code == 1)\n+    {\n+      reload_n_operands = noperands = asm_noperands (body);\n+      n_alternatives = n_occurrences (constraints);\n+    }\n+  for (this_alternative_number = 0;\n+       this_alternative_number < n_alternatives;\n+       this_alternative_number++)\n+    for (i = 0;\n+\t i < noperands;\n+\t i++)\n+      {\n+\tregister char *p = constraints[i];\n+\tregister int win = 0;\n+\tint badop = 1;\n+\tint c;\n+\tregister rtx operand = recog_operand[i];\n+\tint force_reload = 0;\n+\tthis_alternative_win[i] = 0;\n+\tthis_alternative[i] = 1;\n+\twhile (*p && (c = *p++) != ',')\n+\t  switch (c)\n+\t    {\n+\t    case '4':\n+\t      c -= '0';\n+\t      this_alternative_matches[i] = c;\n+\t      if ((c != commutative\n+\t\t   || i != commutative + 1)\n+\t\t  && operands_match[c][i])\n+\t\twin = this_alternative_win[c];\n+\t      else\n+\t\tfind_dummy_reload (operand_mode[i], this_alternative[c]);\n+\t      if (! win || force_reload)\n+\t\tfor (j = 0; j < i; j++)\n+\t\t  if (this_alternative_matches[j]\n+\t\t      == this_alternative_matches[i])\n+\t\t    badop = 1;\n+\t      break;\n+\t    case '<':\n+\t      if (operand->code == 2\n+\t\t  && ! address_reloaded[i]\n+\t\t  && operand->fld[0].rtx->code == 3)\n+\t\twin = 1;\n+\t    }\n+      }\n+}"}]}