{"sha": "534bd33b61d08e0bf4d58efbeb3da5a368f8a247", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM0YmQzM2I2MWQwOGUwYmY0ZDU4ZWZiZWIzZGE1YTM2OGY4YTI0Nw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2015-05-26T11:14:16Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2015-05-26T11:14:16Z"}, "message": "match.pd (swapped_tcc_comparison): New operator list.\n\n2015-05-26  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* match.pd (swapped_tcc_comparison): New operator list.\n\t(-A CMP -B): New simplification.\n\t* fold-const.c (fold_comparison): Remove corresponding code.\n\nFrom-SVN: r223689", "tree": {"sha": "d7b381032a45d7b3441c2f5139e9c9af5a65d583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7b381032a45d7b3441c2f5139e9c9af5a65d583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/534bd33b61d08e0bf4d58efbeb3da5a368f8a247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/534bd33b61d08e0bf4d58efbeb3da5a368f8a247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/534bd33b61d08e0bf4d58efbeb3da5a368f8a247", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/534bd33b61d08e0bf4d58efbeb3da5a368f8a247/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3dc5e6654a2911c955eb9371ed7d6e5c2d1a174"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "3197dfcfe47cd70d6b35c414654bc72b748bf278", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534bd33b61d08e0bf4d58efbeb3da5a368f8a247/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534bd33b61d08e0bf4d58efbeb3da5a368f8a247/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=534bd33b61d08e0bf4d58efbeb3da5a368f8a247", "patch": "@@ -1,3 +1,9 @@\n+2015-05-26  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd (swapped_tcc_comparison): New operator list.\n+\t(-A CMP -B): New simplification.\n+\t* fold-const.c (fold_comparison): Remove corresponding code.\n+\n 2015-05-26  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* caller-save.c (init_caller_save): Base temporary register numbers"}, {"sha": "5545ecf3b97bdb27632c1692c60a450982884c24", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534bd33b61d08e0bf4d58efbeb3da5a368f8a247/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534bd33b61d08e0bf4d58efbeb3da5a368f8a247/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=534bd33b61d08e0bf4d58efbeb3da5a368f8a247", "patch": "@@ -9183,24 +9183,11 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t\t\t    fold_convert_loc (loc, newtype, targ0),\n \t\t\t    fold_convert_loc (loc, newtype, targ1));\n \n-      /* (-a) CMP (-b) -> b CMP a  */\n-      if (TREE_CODE (arg0) == NEGATE_EXPR\n-\t  && TREE_CODE (arg1) == NEGATE_EXPR)\n-\treturn fold_build2_loc (loc, code, type, TREE_OPERAND (arg1, 0),\n-\t\t\t    TREE_OPERAND (arg0, 0));\n-\n       if (TREE_CODE (arg1) == REAL_CST)\n \t{\n \t  REAL_VALUE_TYPE cst;\n \t  cst = TREE_REAL_CST (arg1);\n \n-\t  /* (-a) CMP CST -> a swap(CMP) (-CST)  */\n-\t  if (TREE_CODE (arg0) == NEGATE_EXPR)\n-\t    return fold_build2_loc (loc, swap_tree_comparison (code), type,\n-\t\t\t\tTREE_OPERAND (arg0, 0),\n-\t\t\t\tbuild_real (TREE_TYPE (arg1),\n-\t\t\t\t\t    real_value_negate (&cst)));\n-\n \t  /* IEEE doesn't distinguish +0 and -0 in comparisons.  */\n \t  /* a CMP (-0) -> a CMP 0  */\n \t  if (REAL_VALUE_MINUS_ZERO (cst))"}, {"sha": "1e46677d5255371a0daee8f38c0c4c5704e61aae", "filename": "gcc/match.pd", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534bd33b61d08e0bf4d58efbeb3da5a368f8a247/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534bd33b61d08e0bf4d58efbeb3da5a368f8a247/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=534bd33b61d08e0bf4d58efbeb3da5a368f8a247", "patch": "@@ -38,6 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n   ge   gt   ne eq lt   le   ordered   unordered ge   gt   le   lt   ltgt uneq)\n (define_operator_list inverted_tcc_comparison_with_nans\n   unge ungt ne eq unlt unle ordered   unordered ge   gt   le   lt   ltgt uneq)\n+(define_operator_list swapped_tcc_comparison\n+  gt   ge   eq ne le   lt   unordered ordered   ungt unge unlt unle uneq ltgt)\n \n \n /* Simplifications of operations with one constant operand and\n@@ -980,6 +982,24 @@ along with GCC; see the file COPYING3.  If not see\n  (bit_and:c (ordered @0 @0) (ordered:c@2 @0 @1))\n  @2)\n \n+/* -A CMP -B -> B CMP A.  */\n+(for cmp (tcc_comparison)\n+     scmp (swapped_tcc_comparison)\n+ (simplify\n+  (cmp (negate @0) (negate @1))\n+  (if (FLOAT_TYPE_P (TREE_TYPE (@0))\n+       || (ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t   && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))))\n+   (scmp @0 @1)))\n+ (simplify\n+  (cmp (negate @0) CONSTANT_CLASS_P@1)\n+  (if (FLOAT_TYPE_P (TREE_TYPE (@0))\n+       || (ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t   && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))))\n+   (with { tree tem = fold_unary (NEGATE_EXPR, TREE_TYPE (@0), @1); }\n+    (if (tem && !TREE_OVERFLOW (tem))\n+     (scmp @0 { tem; }))))))\n+\n /* Simplification of math builtins.  */\n \n (define_operator_list LOG BUILT_IN_LOGF BUILT_IN_LOG BUILT_IN_LOGL)"}]}