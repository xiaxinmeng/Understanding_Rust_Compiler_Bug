{"sha": "a1e7d33bb9458f76a2d49209a3825940ca7fbe0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFlN2QzM2JiOTQ1OGY3NmEyZDQ5MjA5YTM4MjU5NDBjYTdmYmUwYg==", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2019-11-29T17:43:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-11-29T17:43:37Z"}, "message": "libstdc++: P1423R3 char8_t remediation (1/4)\n\nDecouple constraints for u8path from path constructors\n\nThis patch moves helper classes and functions for std::filesystem::path out of\nthe class definition to a detail namespace so that they are available to the\nimplementations of std::filesystem::u8path.  Prior to this patch, the SFINAE\nconstraints for those implementations were specified via delegation to the\noverloads of path constructors with a std::locale parameter; it just so\nhappened that those overloads had the same constraints.  As of P1423R3, u8path\nand those overloads no longer have the same constraints, so this dependency\nmust be broken.\n\nThis patch also updates the experimental implementation of the filesystem TS\nto add SFINAE constraints to its implementations of u8path.  These functions\nwere previously unconstrained and marked with a TODO comment.\n\nThis patch does not provide any intentional behavioral changes other than the\nadded constraints to the experimental filesystem TS implementation of u8path.\n\nAlternatives to this refactoring would have been to make the u8path overloads\nfriends of class path, or to make the helpers public members. Both of those\napproaches struck me as less desirable than this approach, though this\napproach does require more code changes and will affect implementation detail\nportions of mangled names for path constructors and inline member functions\n(mostly function template specializations).\n\n2019-11-29  Tom Honermann  <tom@honermann.net>\n\n\tDecouple constraints for u8path from path constructors\n\t* include/bits/fs_path.h: Moved helper utilities out of\n\tstd::filesystem::path into a detail namespace to make them\n\tavailable for use by u8path.\n\t* include/experimental/bits/fs_path.h: Moved helper utilities out\n\tof std::experimental::filesystem::v1::path into a detail\n\tnamespace to make them available for use by u8path.\n\nFrom-SVN: r278855", "tree": {"sha": "f18bfddfb04e9c3ae02ec29b877d245a5d2b614f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f18bfddfb04e9c3ae02ec29b877d245a5d2b614f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6851de8b9003582f4c3dbcbfd598cba367f0fbc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6851de8b9003582f4c3dbcbfd598cba367f0fbc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6851de8b9003582f4c3dbcbfd598cba367f0fbc3"}], "stats": {"total": 479, "additions": 256, "deletions": 223}, "files": [{"sha": "87c76f9a05cae0f9dd69a74bc7caf4a7f987fa9b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a1e7d33bb9458f76a2d49209a3825940ca7fbe0b", "patch": "@@ -1,3 +1,13 @@\n+2019-11-29  Tom Honermann  <tom@honermann.net>\n+\n+\tDecouple constraints for u8path from path constructors\n+\t* include/bits/fs_path.h: Moved helper utilities out of\n+\tstd::filesystem::path into a detail namespace to make them\n+\tavailable for use by u8path.\n+\t* include/experimental/bits/fs_path.h: Moved helper utilities out\n+\tof std::experimental::filesystem::v1::path into a detail\n+\tnamespace to make them available for use by u8path.\n+\n 2019-11-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/91997"}, {"sha": "b4c02327f01d4d40d097cc3a83d3593e7ab02870", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 123, "deletions": 110, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=a1e7d33bb9458f76a2d49209a3825940ca7fbe0b", "patch": "@@ -63,99 +63,107 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    *  @{\n    */\n \n-  /// A filesystem path.\n-  class path\n-  {\n-    template<typename _CharT>\n-      using __is_encoded_char = __is_one_of<remove_const_t<_CharT>,\n-\t    char,\n+  class path;\n+\n+  /// @cond undocumented\n+namespace __detail\n+{\n+  template<typename _CharT>\n+    using __is_encoded_char = __is_one_of<remove_const_t<_CharT>,\n+\t  char,\n #ifdef _GLIBCXX_USE_CHAR8_T\n-\t    char8_t,\n+\t  char8_t,\n #endif\n #if _GLIBCXX_USE_WCHAR_T\n-\t    wchar_t,\n+\t  wchar_t,\n #endif\n-\t    char16_t, char32_t>;\n+\t  char16_t, char32_t>;\n \n-    template<typename _Iter,\n-\t     typename _Iter_traits = std::iterator_traits<_Iter>>\n-      using __is_path_iter_src\n-\t= __and_<__is_encoded_char<typename _Iter_traits::value_type>,\n-\t\t std::is_base_of<std::input_iterator_tag,\n-\t\t\t\t typename _Iter_traits::iterator_category>>;\n+  template<typename _Iter,\n+\t   typename _Iter_traits = std::iterator_traits<_Iter>>\n+    using __is_path_iter_src\n+      = __and_<__is_encoded_char<typename _Iter_traits::value_type>,\n+\t       std::is_base_of<std::input_iterator_tag,\n+\t\t\t       typename _Iter_traits::iterator_category>>;\n \n-    template<typename _Iter>\n-      static __is_path_iter_src<_Iter>\n-      __is_path_src(_Iter, int);\n+  template<typename _Iter>\n+    static __is_path_iter_src<_Iter>\n+    __is_path_src(_Iter, int);\n \n-    template<typename _CharT, typename _Traits, typename _Alloc>\n-      static __is_encoded_char<_CharT>\n-      __is_path_src(const basic_string<_CharT, _Traits, _Alloc>&, int);\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    static __is_encoded_char<_CharT>\n+    __is_path_src(const basic_string<_CharT, _Traits, _Alloc>&, int);\n \n-    template<typename _CharT, typename _Traits>\n-      static __is_encoded_char<_CharT>\n-      __is_path_src(const basic_string_view<_CharT, _Traits>&, int);\n+  template<typename _CharT, typename _Traits>\n+    static __is_encoded_char<_CharT>\n+    __is_path_src(const basic_string_view<_CharT, _Traits>&, int);\n \n-    template<typename _Unknown>\n-      static std::false_type\n-      __is_path_src(const _Unknown&, ...);\n+  template<typename _Unknown>\n+    static std::false_type\n+    __is_path_src(const _Unknown&, ...);\n \n-    template<typename _Tp1, typename _Tp2>\n-      struct __constructible_from;\n+  template<typename _Tp1, typename _Tp2>\n+    struct __constructible_from;\n \n-    template<typename _Iter>\n-      struct __constructible_from<_Iter, _Iter>\n-      : __is_path_iter_src<_Iter>\n-      { };\n+  template<typename _Iter>\n+    struct __constructible_from<_Iter, _Iter>\n+    : __is_path_iter_src<_Iter>\n+    { };\n \n-    template<typename _Source>\n-      struct __constructible_from<_Source, void>\n-      : decltype(__is_path_src(std::declval<_Source>(), 0))\n-      { };\n-\n-    template<typename _Tp1, typename _Tp2 = void>\n-      using _Path = typename\n-\tstd::enable_if<__and_<__not_<is_same<remove_cv_t<_Tp1>, path>>,\n-\t\t\t      __not_<is_void<remove_pointer_t<_Tp1>>>,\n-\t\t\t      __constructible_from<_Tp1, _Tp2>>::value,\n-\t\t       path>::type;\n-\n-    template<typename _Source>\n-      static _Source\n-      _S_range_begin(_Source __begin) { return __begin; }\n-\n-    struct __null_terminated { };\n-\n-    template<typename _Source>\n-      static __null_terminated\n-      _S_range_end(_Source) { return {}; }\n-\n-    template<typename _CharT, typename _Traits, typename _Alloc>\n-      static const _CharT*\n-      _S_range_begin(const basic_string<_CharT, _Traits, _Alloc>& __str)\n-      { return __str.data(); }\n+  template<typename _Source>\n+    struct __constructible_from<_Source, void>\n+    : decltype(__is_path_src(std::declval<_Source>(), 0))\n+    { };\n \n-    template<typename _CharT, typename _Traits, typename _Alloc>\n-      static const _CharT*\n-      _S_range_end(const basic_string<_CharT, _Traits, _Alloc>& __str)\n-      { return __str.data() + __str.size(); }\n+  template<typename _Tp1, typename _Tp2 = void>\n+    using _Path = typename\n+      std::enable_if<__and_<__not_<is_same<remove_cv_t<_Tp1>, path>>,\n+\t\t\t    __not_<is_void<remove_pointer_t<_Tp1>>>,\n+\t\t\t    __constructible_from<_Tp1, _Tp2>>::value,\n+\t\t     path>::type;\n \n-    template<typename _CharT, typename _Traits>\n-      static const _CharT*\n-      _S_range_begin(const basic_string_view<_CharT, _Traits>& __str)\n-      { return __str.data(); }\n+  template<typename _Source>\n+    static _Source\n+    _S_range_begin(_Source __begin) { return __begin; }\n \n-    template<typename _CharT, typename _Traits>\n-      static const _CharT*\n-      _S_range_end(const basic_string_view<_CharT, _Traits>& __str)\n-      { return __str.data() + __str.size(); }\n+  struct __null_terminated { };\n \n-    template<typename _Tp,\n-\t     typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n-\t     typename _Val = typename std::iterator_traits<_Iter>::value_type>\n-      using __value_type_is_char\n-\t= std::enable_if_t<std::is_same_v<std::remove_const_t<_Val>, char>>;\n+  template<typename _Source>\n+    static __null_terminated\n+    _S_range_end(_Source) { return {}; }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    static const _CharT*\n+    _S_range_begin(const basic_string<_CharT, _Traits, _Alloc>& __str)\n+    { return __str.data(); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    static const _CharT*\n+    _S_range_end(const basic_string<_CharT, _Traits, _Alloc>& __str)\n+    { return __str.data() + __str.size(); }\n+\n+  template<typename _CharT, typename _Traits>\n+    static const _CharT*\n+    _S_range_begin(const basic_string_view<_CharT, _Traits>& __str)\n+    { return __str.data(); }\n+\n+  template<typename _CharT, typename _Traits>\n+    static const _CharT*\n+    _S_range_end(const basic_string_view<_CharT, _Traits>& __str)\n+    { return __str.data() + __str.size(); }\n+\n+  template<typename _Tp,\n+\t   typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n+\t   typename _Val = typename std::iterator_traits<_Iter>::value_type>\n+    using __value_type_is_char\n+      = std::enable_if_t<std::is_same_v<std::remove_const_t<_Val>, char>>;\n+\n+} // namespace __detail\n+  /// @endcond\n \n+  /// A filesystem path.\n+  class path\n+  {\n   public:\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n     using value_type = wchar_t;\n@@ -193,29 +201,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     { _M_split_cmpts(); }\n \n     template<typename _Source,\n-\t     typename _Require = _Path<_Source>>\n+\t     typename _Require = __detail::_Path<_Source>>\n       path(_Source const& __source, format = auto_format)\n-      : _M_pathname(_S_convert(_S_range_begin(__source),\n-\t\t\t       _S_range_end(__source)))\n+      : _M_pathname(_S_convert(__detail::_S_range_begin(__source),\n+\t\t\t       __detail::_S_range_end(__source)))\n       { _M_split_cmpts(); }\n \n     template<typename _InputIterator,\n-\t     typename _Require = _Path<_InputIterator, _InputIterator>>\n+\t     typename _Require = __detail::_Path<_InputIterator, _InputIterator>>\n       path(_InputIterator __first, _InputIterator __last, format = auto_format)\n       : _M_pathname(_S_convert(__first, __last))\n       { _M_split_cmpts(); }\n \n     template<typename _Source,\n-\t     typename _Require = _Path<_Source>,\n-\t     typename _Require2 = __value_type_is_char<_Source>>\n+\t     typename _Require = __detail::_Path<_Source>,\n+\t     typename _Require2 = __detail::__value_type_is_char<_Source>>\n       path(_Source const& __source, const locale& __loc, format = auto_format)\n-      : _M_pathname(_S_convert_loc(_S_range_begin(__source),\n-\t\t\t\t   _S_range_end(__source), __loc))\n+      : _M_pathname(_S_convert_loc(__detail::_S_range_begin(__source),\n+\t\t\t\t   __detail::_S_range_end(__source), __loc))\n       { _M_split_cmpts(); }\n \n     template<typename _InputIterator,\n-\t     typename _Require = _Path<_InputIterator, _InputIterator>,\n-\t     typename _Require2 = __value_type_is_char<_InputIterator>>\n+\t     typename _Require = __detail::_Path<_InputIterator, _InputIterator>,\n+\t     typename _Require2 = __detail::__value_type_is_char<_InputIterator>>\n       path(_InputIterator __first, _InputIterator __last, const locale& __loc,\n \t   format = auto_format)\n       : _M_pathname(_S_convert_loc(__first, __last, __loc))\n@@ -231,17 +239,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     path& assign(string_type&& __source);\n \n     template<typename _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       operator=(_Source const& __source)\n       { return *this = path(__source); }\n \n     template<typename _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       assign(_Source const& __source)\n       { return *this = path(__source); }\n \n     template<typename _InputIterator>\n-      _Path<_InputIterator, _InputIterator>&\n+      __detail::_Path<_InputIterator, _InputIterator>&\n       assign(_InputIterator __first, _InputIterator __last)\n       { return *this = path(__first, __last); }\n \n@@ -250,23 +258,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     path& operator/=(const path& __p);\n \n     template <class _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       operator/=(_Source const& __source)\n       {\n-\t_M_append(_S_convert(_S_range_begin(__source), _S_range_end(__source)));\n+\t_M_append(_S_convert(__detail::_S_range_begin(__source),\n+\t\t\t     __detail::_S_range_end(__source)));\n \treturn *this;\n       }\n \n     template<typename _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       append(_Source const& __source)\n       {\n-\t_M_append(_S_convert(_S_range_begin(__source), _S_range_end(__source)));\n+\t_M_append(_S_convert(__detail::_S_range_begin(__source),\n+\t\t\t     __detail::_S_range_end(__source)));\n \treturn *this;\n       }\n \n     template<typename _InputIterator>\n-      _Path<_InputIterator, _InputIterator>&\n+      __detail::_Path<_InputIterator, _InputIterator>&\n       append(_InputIterator __first, _InputIterator __last)\n       {\n \t_M_append(_S_convert(__first, __last));\n@@ -282,23 +292,24 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     path& operator+=(basic_string_view<value_type> __x);\n \n     template<typename _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       operator+=(_Source const& __x) { return concat(__x); }\n \n     template<typename _CharT>\n-      _Path<_CharT*, _CharT*>&\n+      __detail::_Path<_CharT*, _CharT*>&\n       operator+=(_CharT __x);\n \n     template<typename _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       concat(_Source const& __x)\n       {\n-\t_M_concat(_S_convert(_S_range_begin(__x), _S_range_end(__x)));\n+\t_M_concat(_S_convert(__detail::_S_range_begin(__x),\n+\t\t\t     __detail::_S_range_end(__x)));\n \treturn *this;\n       }\n \n     template<typename _InputIterator>\n-      _Path<_InputIterator, _InputIterator>&\n+      __detail::_Path<_InputIterator, _InputIterator>&\n       concat(_InputIterator __first, _InputIterator __last)\n       {\n \t_M_concat(_S_convert(__first, __last));\n@@ -496,11 +507,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       struct _Cvt;\n \n     static basic_string_view<value_type>\n-    _S_convert(value_type* __src, __null_terminated)\n+    _S_convert(value_type* __src, __detail::__null_terminated)\n     { return __src; }\n \n     static basic_string_view<value_type>\n-    _S_convert(const value_type* __src, __null_terminated)\n+    _S_convert(const value_type* __src, __detail::__null_terminated)\n     { return __src; }\n \n     static basic_string_view<value_type>\n@@ -522,7 +533,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     template<typename _InputIterator>\n       static string_type\n-      _S_convert(_InputIterator __src, __null_terminated)\n+      _S_convert(_InputIterator __src, __detail::__null_terminated)\n       {\n \t// Read from iterator into basic_string until a null value is seen:\n \tauto __s = _S_string_from_iter(__src);\n@@ -544,7 +555,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     template<typename _InputIterator>\n       static string_type\n-      _S_convert_loc(_InputIterator __src, __null_terminated,\n+      _S_convert_loc(_InputIterator __src, __detail::__null_terminated,\n \t\t     const std::locale& __loc)\n       {\n \tconst std::string __s = _S_string_from_iter(__src);\n@@ -657,10 +668,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    *\n    * @relates std::filesystem::path\n    */\n-  template<typename _InputIterator>\n-    inline auto\n+  template<typename _InputIterator,\n+\t   typename _Require = __detail::_Path<_InputIterator, _InputIterator>,\n+\t   typename _Require2 = __detail::__value_type_is_char<_InputIterator>>\n+    inline path\n     u8path(_InputIterator __first, _InputIterator __last)\n-    -> decltype(filesystem::path(__first, __last, std::locale::classic()))\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n       // XXX This assumes native wide encoding is UTF-16.\n@@ -691,10 +703,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n    *\n    * @relates std::filesystem::path\n    */\n-  template<typename _Source>\n-    inline auto\n+  template<typename _Source,\n+\t   typename _Require = __detail::_Path<_Source>,\n+\t   typename _Require2 = __detail::__value_type_is_char<_Source>>\n+    inline path\n     u8path(const _Source& __source)\n-    -> decltype(filesystem::path(__source, std::locale::classic()))\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n       if constexpr (is_convertible_v<const _Source&, std::string_view>)\n@@ -950,7 +963,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   }\n \n   template<typename _CharT>\n-    inline path::_Path<_CharT*, _CharT*>&\n+    inline __detail::_Path<_CharT*, _CharT*>&\n     path::operator+=(_CharT __x)\n     {\n       auto* __addr = std::__addressof(__x);"}, {"sha": "075e9a8d1259f433f7e0a46e0617d7e6e343ffe7", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 123, "deletions": 113, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=a1e7d33bb9458f76a2d49209a3825940ca7fbe0b", "patch": "@@ -71,111 +71,116 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   using std::basic_string_view;\n #endif\n \n-  /**\n-   * @addtogroup filesystem-ts\n-   * @{\n+  /** @addtogroup filesystem-ts\n+   *  @{\n    */\n \n-  /// A filesystem path.\n-  class path\n-  {\n-    template<typename _CharT,\n-\t     typename _Ch = typename remove_const<_CharT>::type>\n-      using __is_encoded_char\n-\t= __or_<is_same<_Ch, char>,\n-\t\tis_same<_Ch, wchar_t>,\n+  /// @cond undocumented\n+namespace __detail\n+{\n+  template<typename _CharT,\n+\t   typename _Ch = typename remove_const<_CharT>::type>\n+    using __is_encoded_char\n+      = __or_<is_same<_Ch, char>,\n+\t      is_same<_Ch, wchar_t>,\n #ifdef _GLIBCXX_USE_CHAR8_T\n-\t\tis_same<_Ch, char8_t>,\n+\t      is_same<_Ch, char8_t>,\n #endif\n-\t\tis_same<_Ch, char16_t>,\n-\t\tis_same<_Ch, char32_t>>;\n+\t      is_same<_Ch, char16_t>,\n+\t      is_same<_Ch, char32_t>>;\n \n-    template<typename _Iter,\n-\t     typename _Iter_traits = std::iterator_traits<_Iter>>\n-      using __is_path_iter_src\n-\t= __and_<__is_encoded_char<typename _Iter_traits::value_type>,\n-\t\t std::is_base_of<std::input_iterator_tag,\n-\t\t\t\t typename _Iter_traits::iterator_category>>;\n+  template<typename _Iter,\n+\t   typename _Iter_traits = std::iterator_traits<_Iter>>\n+    using __is_path_iter_src\n+      = __and_<__is_encoded_char<typename _Iter_traits::value_type>,\n+\t       std::is_base_of<std::input_iterator_tag,\n+\t\t\t       typename _Iter_traits::iterator_category>>;\n \n-    template<typename _Iter>\n-      static __is_path_iter_src<_Iter>\n-      __is_path_src(_Iter, int);\n+  template<typename _Iter>\n+    static __is_path_iter_src<_Iter>\n+    __is_path_src(_Iter, int);\n \n-    template<typename _CharT, typename _Traits, typename _Alloc>\n-      static __is_encoded_char<_CharT>\n-      __is_path_src(const basic_string<_CharT, _Traits, _Alloc>&, int);\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    static __is_encoded_char<_CharT>\n+    __is_path_src(const basic_string<_CharT, _Traits, _Alloc>&, int);\n \n #if __cplusplus >= 201402L\n-    template<typename _CharT, typename _Traits>\n-      static __is_encoded_char<_CharT>\n-      __is_path_src(const basic_string_view<_CharT, _Traits>&, int);\n+  template<typename _CharT, typename _Traits>\n+    static __is_encoded_char<_CharT>\n+    __is_path_src(const basic_string_view<_CharT, _Traits>&, int);\n #endif\n \n-    template<typename _Unknown>\n-      static std::false_type\n-      __is_path_src(const _Unknown&, ...);\n+  template<typename _Unknown>\n+    static std::false_type\n+    __is_path_src(const _Unknown&, ...);\n \n-    template<typename _Tp1, typename _Tp2>\n-      struct __constructible_from;\n+  template<typename _Tp1, typename _Tp2>\n+    struct __constructible_from;\n \n-    template<typename _Iter>\n-      struct __constructible_from<_Iter, _Iter>\n-      : __is_path_iter_src<_Iter>\n-      { };\n+  template<typename _Iter>\n+    struct __constructible_from<_Iter, _Iter>\n+    : __is_path_iter_src<_Iter>\n+    { };\n \n-    template<typename _Source>\n-      struct __constructible_from<_Source, void>\n-      : decltype(__is_path_src(std::declval<_Source>(), 0))\n-      { };\n-\n-    template<typename _Tp1, typename _Tp2 = void,\n-\t     typename _Tp1_nocv = typename remove_cv<_Tp1>::type,\n-\t     typename _Tp1_noptr = typename remove_pointer<_Tp1>::type>\n-      using _Path = typename\n-\tstd::enable_if<__and_<__not_<is_same<_Tp1_nocv, path>>,\n-\t\t\t      __not_<is_void<_Tp1_noptr>>,\n-\t\t\t      __constructible_from<_Tp1, _Tp2>>::value,\n-\t\t       path>::type;\n+  template<typename _Source>\n+    struct __constructible_from<_Source, void>\n+    : decltype(__is_path_src(std::declval<_Source>(), 0))\n+    { };\n+\n+  template<typename _Tp1, typename _Tp2 = void,\n+\t   typename _Tp1_nocv = typename remove_cv<_Tp1>::type,\n+\t   typename _Tp1_noptr = typename remove_pointer<_Tp1>::type>\n+    using _Path = typename\n+      std::enable_if<__and_<__not_<is_same<_Tp1_nocv, path>>,\n+\t\t\t    __not_<is_void<_Tp1_noptr>>,\n+\t\t\t    __constructible_from<_Tp1, _Tp2>>::value,\n+\t\t     path>::type;\n \n-    template<typename _Source>\n-      static _Source\n-      _S_range_begin(_Source __begin) { return __begin; }\n+  template<typename _Source>\n+    static _Source\n+    _S_range_begin(_Source __begin) { return __begin; }\n \n-    struct __null_terminated { };\n+  struct __null_terminated { };\n \n-    template<typename _Source>\n-      static __null_terminated\n-      _S_range_end(_Source) { return {}; }\n+  template<typename _Source>\n+    static __null_terminated\n+    _S_range_end(_Source) { return {}; }\n \n-    template<typename _CharT, typename _Traits, typename _Alloc>\n-      static const _CharT*\n-      _S_range_begin(const basic_string<_CharT, _Traits, _Alloc>& __str)\n-      { return __str.data(); }\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    static const _CharT*\n+    _S_range_begin(const basic_string<_CharT, _Traits, _Alloc>& __str)\n+    { return __str.data(); }\n \n-    template<typename _CharT, typename _Traits, typename _Alloc>\n-      static const _CharT*\n-      _S_range_end(const basic_string<_CharT, _Traits, _Alloc>& __str)\n-      { return __str.data() + __str.size(); }\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    static const _CharT*\n+    _S_range_end(const basic_string<_CharT, _Traits, _Alloc>& __str)\n+    { return __str.data() + __str.size(); }\n \n #if __cplusplus >= 201402L\n-    template<typename _CharT, typename _Traits>\n-      static const _CharT*\n-      _S_range_begin(const basic_string_view<_CharT, _Traits>& __str)\n-      { return __str.data(); }\n-\n-    template<typename _CharT, typename _Traits>\n-      static const _CharT*\n-      _S_range_end(const basic_string_view<_CharT, _Traits>& __str)\n-      { return __str.data() + __str.size(); }\n+  template<typename _CharT, typename _Traits>\n+    static const _CharT*\n+    _S_range_begin(const basic_string_view<_CharT, _Traits>& __str)\n+    { return __str.data(); }\n+\n+  template<typename _CharT, typename _Traits>\n+    static const _CharT*\n+    _S_range_end(const basic_string_view<_CharT, _Traits>& __str)\n+    { return __str.data() + __str.size(); }\n #endif\n \n-    template<typename _Tp,\n-\t     typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n-\t     typename _Val = typename std::iterator_traits<_Iter>::value_type>\n-      using __value_type_is_char = typename std::enable_if<\n-\tstd::is_same<typename std::remove_const<_Val>::type, char>::value\n-\t>::type;\n+  template<typename _Tp,\n+\t   typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n+\t   typename _Val = typename std::iterator_traits<_Iter>::value_type>\n+    using __value_type_is_char = typename std::enable_if<\n+      std::is_same<typename std::remove_const<_Val>::type, char>::value\n+      >::type;\n+\n+} // namespace __detail\n+  /// @endcond\n \n+  /// A filesystem path.\n+  class path\n+  {\n   public:\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n     typedef wchar_t\t\t\t\tvalue_type;\n@@ -205,29 +210,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     { _M_split_cmpts(); }\n \n     template<typename _Source,\n-\t     typename _Require = _Path<_Source>>\n+\t     typename _Require = __detail::_Path<_Source>>\n       path(_Source const& __source)\n-      : _M_pathname(_S_convert(_S_range_begin(__source),\n-\t\t\t       _S_range_end(__source)))\n+      : _M_pathname(_S_convert(__detail::_S_range_begin(__source),\n+\t\t\t       __detail::_S_range_end(__source)))\n       { _M_split_cmpts(); }\n \n     template<typename _InputIterator,\n-\t     typename _Require = _Path<_InputIterator, _InputIterator>>\n+\t     typename _Require = __detail::_Path<_InputIterator, _InputIterator>>\n       path(_InputIterator __first, _InputIterator __last)\n       : _M_pathname(_S_convert(__first, __last))\n       { _M_split_cmpts(); }\n \n     template<typename _Source,\n-\t     typename _Require = _Path<_Source>,\n-\t     typename _Require2 = __value_type_is_char<_Source>>\n+\t     typename _Require = __detail::_Path<_Source>,\n+\t     typename _Require2 = __detail::__value_type_is_char<_Source>>\n       path(_Source const& __source, const locale& __loc)\n-      : _M_pathname(_S_convert_loc(_S_range_begin(__source),\n-\t\t\t\t   _S_range_end(__source), __loc))\n+      : _M_pathname(_S_convert_loc(__detail::_S_range_begin(__source),\n+\t\t\t\t   __detail::_S_range_end(__source), __loc))\n       { _M_split_cmpts(); }\n \n     template<typename _InputIterator,\n-\t     typename _Require = _Path<_InputIterator, _InputIterator>,\n-\t     typename _Require2 = __value_type_is_char<_InputIterator>>\n+\t     typename _Require = __detail::_Path<_InputIterator, _InputIterator>,\n+\t     typename _Require2 = __detail::__value_type_is_char<_InputIterator>>\n       path(_InputIterator __first, _InputIterator __last, const locale& __loc)\n       : _M_pathname(_S_convert_loc(__first, __last, __loc))\n       { _M_split_cmpts(); }\n@@ -242,17 +247,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     path& assign(string_type&& __source);\n \n     template<typename _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       operator=(_Source const& __source)\n       { return *this = path(__source); }\n \n     template<typename _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       assign(_Source const& __source)\n       { return *this = path(__source); }\n \n     template<typename _InputIterator>\n-      _Path<_InputIterator, _InputIterator>&\n+      __detail::_Path<_InputIterator, _InputIterator>&\n       assign(_InputIterator __first, _InputIterator __last)\n       { return *this = path(__first, __last); }\n \n@@ -261,20 +266,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     path& operator/=(const path& __p) { return _M_append(__p._M_pathname); }\n \n     template <class _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       operator/=(_Source const& __source)\n       { return append(__source); }\n \n     template<typename _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       append(_Source const& __source)\n       {\n-\treturn _M_append(_S_convert(_S_range_begin(__source),\n-\t\t\t\t    _S_range_end(__source)));\n+\treturn _M_append(_S_convert(__detail::_S_range_begin(__source),\n+\t\t\t\t    __detail::_S_range_end(__source)));\n       }\n \n     template<typename _InputIterator>\n-      _Path<_InputIterator, _InputIterator>&\n+      __detail::_Path<_InputIterator, _InputIterator>&\n       append(_InputIterator __first, _InputIterator __last)\n       { return _M_append(_S_convert(__first, __last)); }\n \n@@ -289,20 +294,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n \n     template<typename _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       operator+=(_Source const& __x) { return concat(__x); }\n \n     template<typename _CharT>\n-      _Path<_CharT*, _CharT*>&\n+      __detail::_Path<_CharT*, _CharT*>&\n       operator+=(_CharT __x);\n \n     template<typename _Source>\n-      _Path<_Source>&\n+      __detail::_Path<_Source>&\n       concat(_Source const& __x)\n-      { return *this += _S_convert(_S_range_begin(__x), _S_range_end(__x)); }\n+      {\n+\treturn *this += _S_convert(__detail::_S_range_begin(__x),\n+\t\t\t\t   __detail::_S_range_end(__x));\n+      }\n \n     template<typename _InputIterator>\n-      _Path<_InputIterator, _InputIterator>&\n+      __detail::_Path<_InputIterator, _InputIterator>&\n       concat(_InputIterator __first, _InputIterator __last)\n       { return *this += _S_convert(__first, __last); }\n \n@@ -446,11 +454,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       struct _Cvt;\n \n     static string_type\n-    _S_convert(value_type* __src, __null_terminated)\n+    _S_convert(value_type* __src, __detail::__null_terminated)\n     { return string_type(__src); }\n \n     static string_type\n-    _S_convert(const value_type* __src, __null_terminated)\n+    _S_convert(const value_type* __src, __detail::__null_terminated)\n     { return string_type(__src); }\n \n     template<typename _Iter>\n@@ -464,7 +472,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     template<typename _InputIterator>\n       static string_type\n-      _S_convert(_InputIterator __src, __null_terminated)\n+      _S_convert(_InputIterator __src, __detail::__null_terminated)\n       {\n \tauto __s = _S_string_from_iter(__src);\n \treturn _S_convert(__s.c_str(), __s.c_str() + __s.size());\n@@ -484,7 +492,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     template<typename _InputIterator>\n       static string_type\n-      _S_convert_loc(_InputIterator __src, __null_terminated,\n+      _S_convert_loc(_InputIterator __src, __detail::__null_terminated,\n \t\t     const std::locale& __loc)\n       {\n \tconst std::string __s = _S_string_from_iter(__src);\n@@ -580,8 +588,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     }\n \n   /// Create a path from a UTF-8-encoded sequence of char\n-  // TODO constrain with _Path<InputIterator, InputIterator> and __value_type_is_char\n-  template<typename _InputIterator>\n+  template<typename _InputIterator,\n+\t   typename _Require = __detail::_Path<_InputIterator, _InputIterator>,\n+\t   typename _Require2 = __detail::__value_type_is_char<_InputIterator>>\n     inline path\n     u8path(_InputIterator __first, _InputIterator __last)\n     {\n@@ -602,8 +611,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     }\n \n   /// Create a path from a UTF-8-encoded sequence of char\n-  // TODO constrain with _Path<Source> and __value_type_is_char\n-  template<typename _Source>\n+  template<typename _Source,\n+\t   typename _Require = __detail::_Path<_Source>,\n+\t   typename _Require2 = __detail::__value_type_is_char<_Source>>\n     inline path\n     u8path(const _Source& __source)\n     {\n@@ -872,7 +882,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n \n   template<typename _CharT>\n-    inline path::_Path<_CharT*, _CharT*>&\n+    inline __detail::_Path<_CharT*, _CharT*>&\n     path::operator+=(_CharT __x)\n     {\n       auto* __addr = std::__addressof(__x);"}]}