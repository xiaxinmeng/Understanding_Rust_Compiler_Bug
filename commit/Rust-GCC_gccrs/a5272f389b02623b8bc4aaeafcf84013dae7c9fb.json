{"sha": "a5272f389b02623b8bc4aaeafcf84013dae7c9fb", "node_id": "C_kwDOANBUbNoAKGE1MjcyZjM4OWIwMjYyM2I4YmM0YWFlYWZjZjg0MDEzZGFlN2M5ZmI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-16T18:38:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-16T18:38:44Z"}, "message": "Merge #934 #937\n\n934: macromatch: Add location to abstract MacroMatch class r=philberty a=CohenArthur\n\nCloses #928 \r\n\r\nThis adds location to the all child classes of the `MacroMatch` abstract class. The current locations are as follow, which I believe is what is expected but might be wrong.\r\n\r\n```rust\r\ntest.rs:2:6: error: macro match fragment\r\n    2 |     ($a:expr, $b:expr) => { $a + $b };\r\n      |      ^\r\ntest.rs:2:15: error: macro match fragment\r\n    2 |     ($a:expr, $b:expr) => { $a + $b };\r\n      |               ^\r\ntest.rs:2:5: error: macro matcher\r\n    2 |     ($a:expr, $b:expr) => { $a + $b };\r\n      |     ^\r\ntest.rs:3:8: error: macro match fragment\r\n    3 |     ($($i:ident)*) => { $($i)* }\r\n      |        ^\r\ntest.rs:3:17: error: macro match repetition!\r\n    3 |     ($($i:ident)*) => { $($i)* }\r\n      |                 ^\r\ntest.rs:3:5: error: macro matcher\r\n    3 |     ($($i:ident)*) => { $($i)* }\r\n      |     ^\r\n```\r\n\r\nI think this should be rebased on #932 so that I can remove the FIXME \n\n937: dockerfile: Install cargo-gccrs alongside gccrs r=philberty a=CohenArthur\n\nCloses #826 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "af48d761be4df3c5295a56f48075104543ab0377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af48d761be4df3c5295a56f48075104543ab0377"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5272f389b02623b8bc4aaeafcf84013dae7c9fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiDUS0CRBK7hj4Ov3rIwAAQsIIACH69LnmMjqO3nn6PpSzTX2P\nH0bmYpbKvJGC0mak8tVQ616M65pRm6DZzG689EsW8Eo0pV9kbWvsU29FmRMpFaU3\njUNZjLJBfVzOaLroPy7+kfO2LSXlrJH5PesCOHoFDhV3ElYF609eNw5uvjpizhLI\n1+Brlj3yYnIVCTG4vqNVSCyWNG+aXBrIhqMK/ZyjEq++AZdXqic4ho9CrBGoAnDl\nd2BIW3sRGjl7kfYcZtqwcdsPBNLpX/MmLOXcqw5lpAsB7/jmTWrfYqmfOYcB7jAi\nvHLfKkaZr6NTon3+eorqte9WZ/K2TpK5/clDDiFMHQ0tJ4hLBIQwY831bzDy/n0=\n=s25D\n-----END PGP SIGNATURE-----\n", "payload": "tree af48d761be4df3c5295a56f48075104543ab0377\nparent 733db624cf28519ef537f766d1d0ba162f261def\nparent 3ac17160c8033931f3bb04f234968f9b56ea3c64\nparent 85d78c1b8dd52488a0d572b2e3ff9ebdde99ab37\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645036724 +0000\ncommitter GitHub <noreply@github.com> 1645036724 +0000\n\nMerge #934 #937\n\n934: macromatch: Add location to abstract MacroMatch class r=philberty a=CohenArthur\n\nCloses #928 \r\n\r\nThis adds location to the all child classes of the `MacroMatch` abstract class. The current locations are as follow, which I believe is what is expected but might be wrong.\r\n\r\n```rust\r\ntest.rs:2:6: error: macro match fragment\r\n    2 |     ($a:expr, $b:expr) => { $a + $b };\r\n      |      ^\r\ntest.rs:2:15: error: macro match fragment\r\n    2 |     ($a:expr, $b:expr) => { $a + $b };\r\n      |               ^\r\ntest.rs:2:5: error: macro matcher\r\n    2 |     ($a:expr, $b:expr) => { $a + $b };\r\n      |     ^\r\ntest.rs:3:8: error: macro match fragment\r\n    3 |     ($($i:ident)*) => { $($i)* }\r\n      |        ^\r\ntest.rs:3:17: error: macro match repetition!\r\n    3 |     ($($i:ident)*) => { $($i)* }\r\n      |                 ^\r\ntest.rs:3:5: error: macro matcher\r\n    3 |     ($($i:ident)*) => { $($i)* }\r\n      |     ^\r\n```\r\n\r\nI think this should be rebased on #932 so that I can remove the FIXME \n\n937: dockerfile: Install cargo-gccrs alongside gccrs r=philberty a=CohenArthur\n\nCloses #826 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5272f389b02623b8bc4aaeafcf84013dae7c9fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5272f389b02623b8bc4aaeafcf84013dae7c9fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5272f389b02623b8bc4aaeafcf84013dae7c9fb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "733db624cf28519ef537f766d1d0ba162f261def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733db624cf28519ef537f766d1d0ba162f261def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/733db624cf28519ef537f766d1d0ba162f261def"}, {"sha": "3ac17160c8033931f3bb04f234968f9b56ea3c64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac17160c8033931f3bb04f234968f9b56ea3c64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ac17160c8033931f3bb04f234968f9b56ea3c64"}, {"sha": "85d78c1b8dd52488a0d572b2e3ff9ebdde99ab37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d78c1b8dd52488a0d572b2e3ff9ebdde99ab37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d78c1b8dd52488a0d572b2e3ff9ebdde99ab37"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "1ca3b168358e369b3af36c874157be47f89422c5", "filename": "Dockerfile", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5272f389b02623b8bc4aaeafcf84013dae7c9fb/Dockerfile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5272f389b02623b8bc4aaeafcf84013dae7c9fb/Dockerfile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Dockerfile?ref=a5272f389b02623b8bc4aaeafcf84013dae7c9fb", "patch": "@@ -1,4 +1,4 @@\n-FROM ubuntu:latest\n+FROM ubuntu:latest AS gcc-builder\n \n RUN apt-get update; \\\n     DEBIAN_FRONTEND=\"noninteractive\" apt-get install -y --no-install-recommends \\\n@@ -67,5 +67,8 @@ RUN /bin/sh -c set -ex; \\\n     dpkg-divert --divert /usr/bin/g++.orig --rename /usr/bin/g++; \\\n     update-alternatives --install /usr/bin/cc cc /usr/local/bin/gcc 999\n \n+FROM rust\n+COPY --from=gcc-builder /usr/ /usr/\n+RUN cargo install --git https://github.com/Rust-GCC/cargo-gccrs cargo-gccrs\n \n CMD [\"bash\"]"}, {"sha": "ba973f11ed27b979aa7e75be8454f468b8470d78", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5272f389b02623b8bc4aaeafcf84013dae7c9fb/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5272f389b02623b8bc4aaeafcf84013dae7c9fb/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=a5272f389b02623b8bc4aaeafcf84013dae7c9fb", "patch": "@@ -111,6 +111,7 @@ class MacroMatch\n   virtual ~MacroMatch () {}\n \n   virtual std::string as_string () const = 0;\n+  virtual Location get_match_locus () const = 0;\n \n   // Unique pointer custom clone function\n   std::unique_ptr<MacroMatch> clone_macro_match () const\n@@ -217,6 +218,7 @@ class Token : public TokenTree, public MacroMatch\n   }\n \n   std::string as_string () const override;\n+  Location get_match_locus () const override { return tok_ref->get_locus (); };\n \n   void accept_vis (ASTVisitor &vis) override;\n "}, {"sha": "2d59b1852dbdac7200de2060906b678796cd5aaa", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5272f389b02623b8bc4aaeafcf84013dae7c9fb/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5272f389b02623b8bc4aaeafcf84013dae7c9fb/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=a5272f389b02623b8bc4aaeafcf84013dae7c9fb", "patch": "@@ -87,24 +87,24 @@ class MacroMatchFragment : public MacroMatch\n {\n   Identifier ident;\n   MacroFragSpec frag_spec;\n-\n-  // TODO: should store location information?\n+  Location locus;\n \n public:\n-  MacroMatchFragment (Identifier ident, MacroFragSpec frag_spec)\n-    : ident (std::move (ident)), frag_spec (frag_spec)\n+  MacroMatchFragment (Identifier ident, MacroFragSpec frag_spec, Location locus)\n+    : ident (std::move (ident)), frag_spec (frag_spec), locus (locus)\n   {}\n \n   // Returns whether macro match fragment is in an error state.\n   bool is_error () const { return frag_spec == INVALID; }\n \n   // Creates an error state macro match fragment.\n-  static MacroMatchFragment create_error ()\n+  static MacroMatchFragment create_error (Location locus)\n   {\n-    return MacroMatchFragment (std::string (\"\"), INVALID);\n+    return MacroMatchFragment (std::string (\"\"), INVALID, locus);\n   }\n \n   std::string as_string () const override;\n+  Location get_match_locus () const override { return locus; };\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -137,20 +137,22 @@ class MacroMatchRepetition : public MacroMatch\n   typedef Token MacroRepSep;\n   // any token except delimiters and repetition operators\n   std::unique_ptr<MacroRepSep> sep;\n-\n-  // TODO: should store location information?\n+  Location locus;\n \n public:\n   // Returns whether macro match repetition has separator token.\n   bool has_sep () const { return sep != nullptr; }\n \n   MacroMatchRepetition (std::vector<std::unique_ptr<MacroMatch> > matches,\n-\t\t\tMacroRepOp op, std::unique_ptr<MacroRepSep> sep)\n-    : matches (std::move (matches)), op (op), sep (std::move (sep))\n+\t\t\tMacroRepOp op, std::unique_ptr<MacroRepSep> sep,\n+\t\t\tLocation locus)\n+    : matches (std::move (matches)), op (op), sep (std::move (sep)),\n+      locus (locus)\n   {}\n \n   // Copy constructor with clone\n-  MacroMatchRepetition (MacroMatchRepetition const &other) : op (other.op)\n+  MacroMatchRepetition (MacroMatchRepetition const &other)\n+    : op (other.op), locus (other.locus)\n   {\n     // guard to protect from null pointer dereference\n     if (other.sep != nullptr)\n@@ -165,6 +167,7 @@ class MacroMatchRepetition : public MacroMatch\n   MacroMatchRepetition &operator= (MacroMatchRepetition const &other)\n   {\n     op = other.op;\n+    locus = other.locus;\n \n     // guard to protect from null pointer dereference\n     if (other.sep != nullptr)\n@@ -184,6 +187,7 @@ class MacroMatchRepetition : public MacroMatch\n   MacroMatchRepetition &operator= (MacroMatchRepetition &&other) = default;\n \n   std::string as_string () const override;\n+  Location get_match_locus () const override { return locus; };\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -201,20 +205,22 @@ class MacroMatcher : public MacroMatch\n {\n   DelimType delim_type;\n   std::vector<std::unique_ptr<MacroMatch> > matches;\n+  Location locus;\n \n   // TODO: think of way to mark invalid that doesn't take up more space\n   bool is_invalid;\n \n-  // TODO: should store location information?\n-\n public:\n   MacroMatcher (DelimType delim_type,\n-\t\tstd::vector<std::unique_ptr<MacroMatch> > matches)\n-    : delim_type (delim_type), matches (std::move (matches)), is_invalid (false)\n+\t\tstd::vector<std::unique_ptr<MacroMatch> > matches,\n+\t\tLocation locus)\n+    : delim_type (delim_type), matches (std::move (matches)), locus (locus),\n+      is_invalid (false)\n   {}\n \n   // copy constructor with vector clone\n-  MacroMatcher (MacroMatcher const &other) : delim_type (other.delim_type)\n+  MacroMatcher (MacroMatcher const &other)\n+    : delim_type (other.delim_type), locus (other.locus)\n   {\n     matches.reserve (other.matches.size ());\n     for (const auto &e : other.matches)\n@@ -225,6 +231,7 @@ class MacroMatcher : public MacroMatch\n   MacroMatcher &operator= (MacroMatcher const &other)\n   {\n     delim_type = other.delim_type;\n+    locus = other.locus;\n \n     matches.reserve (other.matches.size ());\n     for (const auto &e : other.matches)\n@@ -238,10 +245,14 @@ class MacroMatcher : public MacroMatch\n   MacroMatcher &operator= (MacroMatcher &&other) = default;\n \n   // Creates an error state macro matcher.\n-  static MacroMatcher create_error () { return MacroMatcher (true); }\n+  static MacroMatcher create_error (Location locus)\n+  {\n+    return MacroMatcher (true, locus);\n+  }\n \n   // Returns whether MacroMatcher is in an error state.\n   bool is_error () const { return is_invalid; }\n+  Location get_match_locus () const override { return locus; }\n \n   std::string as_string () const override;\n \n@@ -256,7 +267,8 @@ class MacroMatcher : public MacroMatch\n   }\n \n   // constructor only used to create error matcher\n-  MacroMatcher (bool is_invalid) : delim_type (PARENS), is_invalid (is_invalid)\n+  MacroMatcher (bool is_invalid, Location locus)\n+    : delim_type (PARENS), locus (locus), is_invalid (is_invalid)\n   {}\n };\n \n@@ -296,7 +308,8 @@ struct MacroRule\n   // Creates an error state macro rule.\n   static MacroRule create_error ()\n   {\n-    return MacroRule (MacroMatcher::create_error (),\n+    // FIXME: Once #928 is merged, give location to MacroMatcher\n+    return MacroRule (MacroMatcher::create_error (Location ()),\n \t\t      MacroTranscriber (DelimTokenTree::create_empty ()));\n   }\n "}, {"sha": "b500c8717955749d839daa3aaf8af7ac2bab6183", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5272f389b02623b8bc4aaeafcf84013dae7c9fb/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5272f389b02623b8bc4aaeafcf84013dae7c9fb/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=a5272f389b02623b8bc4aaeafcf84013dae7c9fb", "patch": "@@ -1709,6 +1709,7 @@ Parser<ManagedTokenSource>::parse_macro_matcher ()\n \n   // Map tokens to DelimType\n   const_TokenPtr t = lexer.peek_token ();\n+  Location locus = t->get_locus ();\n   switch (t->get_id ())\n     {\n     case LEFT_PAREN:\n@@ -1726,7 +1727,7 @@ Parser<ManagedTokenSource>::parse_macro_matcher ()\n \t\"unexpected token %qs - expecting delimiters (for a macro matcher)\",\n \tt->get_token_description ()));\n \n-      return AST::MacroMatcher::create_error ();\n+      return AST::MacroMatcher::create_error (t->get_locus ());\n     }\n   lexer.skip_token ();\n \n@@ -1747,7 +1748,7 @@ Parser<ManagedTokenSource>::parse_macro_matcher ()\n \t    t->get_token_description ());\n \t  add_error (std::move (error));\n \n-\t  return AST::MacroMatcher::create_error ();\n+\t  return AST::MacroMatcher::create_error (t->get_locus ());\n \t}\n \n       matches.push_back (std::move (match));\n@@ -1765,7 +1766,7 @@ Parser<ManagedTokenSource>::parse_macro_matcher ()\n       // tokens match opening delimiter, so skip.\n       lexer.skip_token ();\n \n-      return AST::MacroMatcher (delim_type, std::move (matches));\n+      return AST::MacroMatcher (delim_type, std::move (matches), locus);\n     }\n   else\n     {\n@@ -1781,7 +1782,7 @@ Parser<ManagedTokenSource>::parse_macro_matcher ()\n \n       /* return error macro matcher despite possibly parsing mostly correct one?\n        * TODO is this the best idea? */\n-      return AST::MacroMatcher::create_error ();\n+      return AST::MacroMatcher::create_error (t->get_locus ());\n     }\n }\n \n@@ -1857,6 +1858,7 @@ template <typename ManagedTokenSource>\n std::unique_ptr<AST::MacroMatchFragment>\n Parser<ManagedTokenSource>::parse_macro_match_fragment ()\n {\n+  Location fragment_locus = lexer.peek_token ()->get_locus ();\n   skip_token (DOLLAR_SIGN);\n \n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n@@ -1893,7 +1895,7 @@ Parser<ManagedTokenSource>::parse_macro_match_fragment ()\n     }\n \n   return std::unique_ptr<AST::MacroMatchFragment> (\n-    new AST::MacroMatchFragment (std::move (ident), frag));\n+    new AST::MacroMatchFragment (std::move (ident), frag, fragment_locus));\n }\n \n // Parses a repetition macro match.\n@@ -2002,7 +2004,7 @@ Parser<ManagedTokenSource>::parse_macro_match_repetition ()\n \n   return std::unique_ptr<AST::MacroMatchRepetition> (\n     new AST::MacroMatchRepetition (std::move (matches), op,\n-\t\t\t\t   std::move (separator)));\n+\t\t\t\t   std::move (separator), t->get_locus ()));\n }\n \n /* Parses a visibility syntactical production (i.e. creating a non-default"}]}