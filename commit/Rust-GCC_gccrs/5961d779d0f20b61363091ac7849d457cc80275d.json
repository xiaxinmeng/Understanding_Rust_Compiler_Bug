{"sha": "5961d779d0f20b61363091ac7849d457cc80275d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk2MWQ3NzlkMGYyMGI2MTM2MzA5MWFjNzg0OWQ0NTdjYzgwMjc1ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-02-04T09:34:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-02-04T09:34:58Z"}, "message": "re PR tree-optimization/60012 (Vectorizer generates unnecessary loop versioning for alias)\n\n2014-02-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/60012\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence): Apply\n\tTBAA disambiguation to all DDRs.\n\n\t* gcc.dg/vect/pr60012.c: New testcase.\n\nFrom-SVN: r207455", "tree": {"sha": "0de58989cf334be8504e47b257a2df2a1aab7bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0de58989cf334be8504e47b257a2df2a1aab7bc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5961d779d0f20b61363091ac7849d457cc80275d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5961d779d0f20b61363091ac7849d457cc80275d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5961d779d0f20b61363091ac7849d457cc80275d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5961d779d0f20b61363091ac7849d457cc80275d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91da04811259e454dadc9c828024b1548030bd91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91da04811259e454dadc9c828024b1548030bd91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91da04811259e454dadc9c828024b1548030bd91"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "93a502f399ff94ba0d1a0e52fb5af406941fe760", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5961d779d0f20b61363091ac7849d457cc80275d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5961d779d0f20b61363091ac7849d457cc80275d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5961d779d0f20b61363091ac7849d457cc80275d", "patch": "@@ -1,3 +1,9 @@\n+2014-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60012\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence): Apply\n+\tTBAA disambiguation to all DDRs.\n+\n 2014-02-04  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/59788"}, {"sha": "f630cd974d1f6da8feffd936d725535996546bc7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5961d779d0f20b61363091ac7849d457cc80275d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5961d779d0f20b61363091ac7849d457cc80275d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5961d779d0f20b61363091ac7849d457cc80275d", "patch": "@@ -1,3 +1,8 @@\n+2014-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60012\n+\t* gcc.dg/vect/pr60012.c: New testcase.\n+\n 2014-02-04  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/59788"}, {"sha": "2f737998434eaa5fb7ade4239368289b0f562549", "filename": "gcc/testsuite/gcc.dg/vect/pr60012.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5961d779d0f20b61363091ac7849d457cc80275d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60012.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5961d779d0f20b61363091ac7849d457cc80275d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60012.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60012.c?ref=5961d779d0f20b61363091ac7849d457cc80275d", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"--param vect-max-version-for-alias-checks=0\" } */\n+\n+typedef struct\n+{\n+  short real;\n+  short imag;\n+} complex16_t;\n+\n+void\n+libvector_AccSquareNorm_ref (unsigned long long  *acc,\n+\t\t\t     const complex16_t *x, unsigned len)\n+{\n+  unsigned i;\n+  for (i = 0; i < len; i++)\n+    acc[i] += ((unsigned long long)((int)x[i].real * x[i].real))\n+\t+ ((unsigned long long)((int)x[i].imag * x[i].imag));\n+}\n+\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d018add0a969d7efab02814d8f0ae01b64322470", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5961d779d0f20b61363091ac7849d457cc80275d/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5961d779d0f20b61363091ac7849d457cc80275d/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=5961d779d0f20b61363091ac7849d457cc80275d", "patch": "@@ -235,6 +235,18 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n       || (DR_IS_READ (dra) && DR_IS_READ (drb)))\n     return false;\n \n+  /* Even if we have an anti-dependence then, as the vectorized loop covers at\n+     least two scalar iterations, there is always also a true dependence.\n+     As the vectorizer does not re-order loads and stores we can ignore\n+     the anti-dependence if TBAA can disambiguate both DRs similar to the\n+     case with known negative distance anti-dependences (positive\n+     distance anti-dependences would violate TBAA constraints).  */\n+  if (((DR_IS_READ (dra) && DR_IS_WRITE (drb))\n+       || (DR_IS_WRITE (dra) && DR_IS_READ (drb)))\n+      && !alias_sets_conflict_p (get_alias_set (DR_REF (dra)),\n+\t\t\t\t get_alias_set (DR_REF (drb))))\n+    return false;\n+\n   /* Unknown data dependence.  */\n   if (DDR_ARE_DEPENDENT (ddr) == chrec_dont_know)\n     {"}]}