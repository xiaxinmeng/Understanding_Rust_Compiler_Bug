{"sha": "4378d117ec35f58d5a552eafcb91c91550e6566e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM3OGQxMTdlYzM1ZjU4ZDVhNTUyZWFmY2I5MWM5MTU1MGU2NTY2ZQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-06-28T20:09:36Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-06-28T20:09:36Z"}, "message": "PR c/71552 - Confusing error for incorrect struct initialization\n\ngcc/c/ChangeLog:\n\n\tPR c/71552\n\t* c-typeck.c (output_init_element): Diagnose incompatible types\n\tbefore non-constant initializers.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/71552\n\t* gcc.dg/init-bad-9.c: New test.\n\nFrom-SVN: r237829", "tree": {"sha": "0e59ed1bcb50dd34df30c681054cb932f229267f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e59ed1bcb50dd34df30c681054cb932f229267f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4378d117ec35f58d5a552eafcb91c91550e6566e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4378d117ec35f58d5a552eafcb91c91550e6566e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4378d117ec35f58d5a552eafcb91c91550e6566e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4378d117ec35f58d5a552eafcb91c91550e6566e/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d41dc215ce9eaf812562b1858e5f098e0de82d5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41dc215ce9eaf812562b1858e5f098e0de82d5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d41dc215ce9eaf812562b1858e5f098e0de82d5e"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "403f267b612b0459d84bd5838409211cdfb4370d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4378d117ec35f58d5a552eafcb91c91550e6566e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4378d117ec35f58d5a552eafcb91c91550e6566e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=4378d117ec35f58d5a552eafcb91c91550e6566e", "patch": "@@ -1,3 +1,9 @@\n+2016-06-28 Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/71552\n+\t* c-typeck.c (output_init_element): Diagnose incompatible types\n+\tbefore non-constant initializers.\n+\n 2016-06-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in: Don't cat ../stage_current if it does not exist."}, {"sha": "818ad944f3fc2fd5e8573100cb1f67134c04c596", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4378d117ec35f58d5a552eafcb91c91550e6566e/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4378d117ec35f58d5a552eafcb91c91550e6566e/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=4378d117ec35f58d5a552eafcb91c91550e6566e", "patch": "@@ -8754,6 +8754,22 @@ output_init_element (location_t loc, tree value, tree origtype,\n   if (!maybe_const)\n     constructor_nonconst = 1;\n \n+  /* Digest the initializer and issue any errors about incompatible\n+     types before issuing errors about non-constant initializers.  */\n+  tree new_value = value;\n+  if (semantic_type)\n+    new_value = build1 (EXCESS_PRECISION_EXPR, semantic_type, value);\n+  new_value = digest_init (loc, type, new_value, origtype, npc, strict_string,\n+\t\t\t   require_constant_value);\n+  if (new_value == error_mark_node)\n+    {\n+      constructor_erroneous = 1;\n+      return;\n+    }\n+  if (require_constant_value || require_constant_elements)\n+    constant_expression_warning (new_value);\n+\n+  /* Proceed to check the constness of the original initializer.  */\n   if (!initializer_constant_valid_p (value, TREE_TYPE (value)))\n     {\n       if (require_constant_value)\n@@ -8798,17 +8814,8 @@ output_init_element (location_t loc, tree value, tree origtype,\n \t\t  || DECL_CHAIN (field)))))\n     return;\n \n-  if (semantic_type)\n-    value = build1 (EXCESS_PRECISION_EXPR, semantic_type, value);\n-  value = digest_init (loc, type, value, origtype, npc, strict_string,\n-\t\t       require_constant_value);\n-  if (value == error_mark_node)\n-    {\n-      constructor_erroneous = 1;\n-      return;\n-    }\n-  if (require_constant_value || require_constant_elements)\n-    constant_expression_warning (value);\n+  /* Finally, set VALUE to the initializer value digested above.  */\n+  value = new_value;\n \n   /* If this element doesn't come next in sequence,\n      put it on constructor_pending_elts.  */"}, {"sha": "5fb67e13288f346b01de7ed73579c50e4db8b5d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4378d117ec35f58d5a552eafcb91c91550e6566e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4378d117ec35f58d5a552eafcb91c91550e6566e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4378d117ec35f58d5a552eafcb91c91550e6566e", "patch": "@@ -1,3 +1,8 @@\n+2016-06-28 Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/71552\n+\t* gcc.dg/init-bad-9.c: New test.\n+\n 2016-06-28  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/abs128-1.c: Require VSX."}, {"sha": "035d34940dd600b926d5e19c8d97df6e34b4e764", "filename": "gcc/testsuite/gcc.dg/init-bad-9.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4378d117ec35f58d5a552eafcb91c91550e6566e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4378d117ec35f58d5a552eafcb91c91550e6566e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-9.c?ref=4378d117ec35f58d5a552eafcb91c91550e6566e", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/71552 - Confusing error for incorrect struct initialization */\n+/* { dg-do compile } */\n+\n+struct A { void *p; };\n+struct B { struct A *p; };\n+struct A a;\n+\n+/* Verify that the initializer is diagnosed for its incompatibility\n+   with the type of the object being initialized, not for its lack\n+   of constness (which is a lesser problem).  */\n+struct B b = { a };   /* { dg-error \"incompatible types when initializing\" } */\n+struct B *p = a;      /* { dg-error \"incompatible types when initializing\" } */"}]}