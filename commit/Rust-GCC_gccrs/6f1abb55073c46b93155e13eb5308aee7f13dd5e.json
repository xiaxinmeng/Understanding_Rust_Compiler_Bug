{"sha": "6f1abb55073c46b93155e13eb5308aee7f13dd5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxYWJiNTUwNzNjNDZiOTMxNTVlMTNlYjUzMDhhZWU3ZjEzZGQ1ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-10-17T17:30:31Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-10-17T17:30:31Z"}, "message": "i386.c (ix86_fixup_binary_operands): When both source operands are in memory...\n\n\t* config/i386/i386.c (ix86_fixup_binary_operands): When both source\n\toperands are in memory, prefer to force non-matched operand 1 to\n\tthe register.\n\nFrom-SVN: r203785", "tree": {"sha": "2c20350c2137a725a08e7a360ae1b7782acf04b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c20350c2137a725a08e7a360ae1b7782acf04b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f1abb55073c46b93155e13eb5308aee7f13dd5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1abb55073c46b93155e13eb5308aee7f13dd5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1abb55073c46b93155e13eb5308aee7f13dd5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1abb55073c46b93155e13eb5308aee7f13dd5e/comments", "author": null, "committer": null, "parents": [{"sha": "5ce6ee81f97df13defd467e52a429607c1596c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce6ee81f97df13defd467e52a429607c1596c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce6ee81f97df13defd467e52a429607c1596c26"}], "stats": {"total": 135, "additions": 69, "deletions": 66}, "files": [{"sha": "fdf943d6d0dffb68ae72dc742c1947910a02b4de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 66, "deletions": 65, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1abb55073c46b93155e13eb5308aee7f13dd5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1abb55073c46b93155e13eb5308aee7f13dd5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f1abb55073c46b93155e13eb5308aee7f13dd5e", "patch": "@@ -1,3 +1,9 @@\n+2013-10-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_fixup_binary_operands): When both source\n+\toperands are in memory, prefer to force non-matched operand 1 to\n+\tthe register.\n+\n 2013-10-17  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/58673\n@@ -257,55 +263,55 @@\n \topts->x_ix86_tune_memset_strategy.\n \tChange global_options to access opts.\n \tChange global_options_set to access opts_set.\n-        Change TARGET_64BIT to TARGET_64BIT_P (opts->...)\n-        Change TARGET_MMX to TARGET_MMX_P (opts->...)\n-        Change TARGET_3DNOW to TARGET_3DNOW_P (opts->...)\n-        Change TARGET_3DNOW_A to TARGET_3DNOW_A_P (opts->...)\n-        Change TARGET_SSE to TARGET_SSE_P (opts->...)\n-        Change TARGET_SSE2 to TARGET_SSE2_P (opts->...)\n-        Change TARGET_SSE3 to TARGET_SSE3_P (opts->...)\n-        Change TARGET_SSSE3 to TARGET_SSSE3_P (opts->...)\n-        Change TARGET_SSE4_1 to TARGET_SSE4_1_P (opts->...)\n-        Change TARGET_SSE4_2 to TARGET_SSE4_2_P (opts->...)\n-        Change TARGET_AVX to TARGET_AVX_P (opts->...)\n-        Change TARGET_AVX2 to TARGET_AVX2_P (opts->...)\n-        Change TARGET_AVX512F to TARGET_AVX512F_P (opts->...)\n-        Change TARGET_AVX512PF to TARGET_AVX512PF_P (opts->...)\n-        Change TARGET_AVX512ER to TARGET_AVX512ER_P (opts->...)\n-        Change TARGET_AVX512CD to TARGET_AVX512CD_P (opts->...)\n-        Change TARGET_FMA to TARGET_FMA_P (opts->...)\n-        Change TARGET_SSE4A to TARGET_SSE4A_P (opts->...)\n-        Change TARGET_FMA4 to TARGET_FMA4_P (opts->...)\n-        Change TARGET_XOP to TARGET_XOP_P (opts->...)\n-        Change TARGET_LWP to TARGET_LWP_P (opts->...)\n-        Change TARGET_ABM to TARGET_ABM_P (opts->...)\n-        Change TARGET_BMI to TARGET_BMI_P (opts->...)\n-        Change TARGET_BMI2 to TARGET_BMI2_P (opts->...)\n-        Change TARGET_LZCNT to TARGET_LZCNT_P (opts->...)\n-        Change TARGET_TBM to TARGET_TBM_P (opts->...)\n-        Change TARGET_POPCNT to TARGET_POPCNT_P (opts->...)\n-        Change TARGET_SAHF to TARGET_SAHF_P (opts->...)\n-        Change TARGET_MOVBE to TARGET_MOVBE_P (opts->...)\n-        Change TARGET_CRC32 to TARGET_CRC32_P (opts->...)\n-        Change TARGET_AES to TARGET_AES_P (opts->...)\n-        Change TARGET_PCLMUL to TARGET_PCLMUL_P (opts->...)\n-        Change TARGET_CMPXCHG16B to TARGET_CMPXCHG16B_P (opts->...)\n-        Change TARGET_FSGSBASE to TARGET_FSGSBASE_P (opts->...)\n-        Change TARGET_RDRND to TARGET_RDRND_P (opts->...)\n-        Change TARGET_F16C to TARGET_F16C_P (opts->...)\n-        Change TARGET_RTM to TARGET_RTM_P (opts->...)\n-        Change TARGET_HLE to TARGET_HLE_P (opts->...)\n-        Change TARGET_RDSEED to TARGET_RDSEED_P (opts->...)\n-        Change TARGET_PRFCHW to TARGET_PRFCHW_P (opts->...)\n-        Change TARGET_ADX to TARGET_ADX_P (opts->...)\n-        Change TARGET_FXSR to TARGET_FXSR_P (opts->...)\n-        Change TARGET_XSAVE to TARGET_XSAVE_P (opts->...)\n-        Change TARGET_XSAVEOPT to TARGET_XSAVEOPT_P (opts->...)\n-        Change TARGET_LP64 to TARGET_LP64_P (opts->...)\n-        Change TARGET_X32 to TARGET_X32_P (opts->...)\n-        Change TARGET_FPMATH_DEFAULT to TARGET_FPMATH_DEFAULT_P (opts->...)\n-        Change TARGET_FLOAT_RETURNS_IN_80387 to\n-\t TARGET_FLOAT_RETURNS_IN_80387_P (opts->...)\n+\tChange TARGET_64BIT to TARGET_64BIT_P (opts->...).\n+\tChange TARGET_MMX to TARGET_MMX_P (opts->...).\n+\tChange TARGET_3DNOW to TARGET_3DNOW_P (opts->...).\n+\tChange TARGET_3DNOW_A to TARGET_3DNOW_A_P (opts->...).\n+\tChange TARGET_SSE to TARGET_SSE_P (opts->...).\n+\tChange TARGET_SSE2 to TARGET_SSE2_P (opts->...).\n+\tChange TARGET_SSE3 to TARGET_SSE3_P (opts->...).\n+\tChange TARGET_SSSE3 to TARGET_SSSE3_P (opts->...).\n+\tChange TARGET_SSE4_1 to TARGET_SSE4_1_P (opts->...).\n+\tChange TARGET_SSE4_2 to TARGET_SSE4_2_P (opts->...).\n+\tChange TARGET_AVX to TARGET_AVX_P (opts->...).\n+\tChange TARGET_AVX2 to TARGET_AVX2_P (opts->...).\n+\tChange TARGET_AVX512F to TARGET_AVX512F_P (opts->...).\n+\tChange TARGET_AVX512PF to TARGET_AVX512PF_P (opts->...).\n+\tChange TARGET_AVX512ER to TARGET_AVX512ER_P (opts->...).\n+\tChange TARGET_AVX512CD to TARGET_AVX512CD_P (opts->...).\n+\tChange TARGET_FMA to TARGET_FMA_P (opts->...).\n+\tChange TARGET_SSE4A to TARGET_SSE4A_P (opts->...).\n+\tChange TARGET_FMA4 to TARGET_FMA4_P (opts->...).\n+\tChange TARGET_XOP to TARGET_XOP_P (opts->...).\n+\tChange TARGET_LWP to TARGET_LWP_P (opts->...).\n+\tChange TARGET_ABM to TARGET_ABM_P (opts->...).\n+\tChange TARGET_BMI to TARGET_BMI_P (opts->...).\n+\tChange TARGET_BMI2 to TARGET_BMI2_P (opts->...).\n+\tChange TARGET_LZCNT to TARGET_LZCNT_P (opts->...).\n+\tChange TARGET_TBM to TARGET_TBM_P (opts->...).\n+\tChange TARGET_POPCNT to TARGET_POPCNT_P (opts->...).\n+\tChange TARGET_SAHF to TARGET_SAHF_P (opts->...).\n+\tChange TARGET_MOVBE to TARGET_MOVBE_P (opts->...).\n+\tChange TARGET_CRC32 to TARGET_CRC32_P (opts->...).\n+\tChange TARGET_AES to TARGET_AES_P (opts->...).\n+\tChange TARGET_PCLMUL to TARGET_PCLMUL_P (opts->...).\n+\tChange TARGET_CMPXCHG16B to TARGET_CMPXCHG16B_P (opts->...).\n+\tChange TARGET_FSGSBASE to TARGET_FSGSBASE_P (opts->...).\n+\tChange TARGET_RDRND to TARGET_RDRND_P (opts->...).\n+\tChange TARGET_F16C to TARGET_F16C_P (opts->...).\n+\tChange TARGET_RTM to TARGET_RTM_P (opts->...).\n+\tChange TARGET_HLE to TARGET_HLE_P (opts->...).\n+\tChange TARGET_RDSEED to TARGET_RDSEED_P (opts->...).\n+\tChange TARGET_PRFCHW to TARGET_PRFCHW_P (opts->...).\n+\tChange TARGET_ADX to TARGET_ADX_P (opts->...).\n+\tChange TARGET_FXSR to TARGET_FXSR_P (opts->...).\n+\tChange TARGET_XSAVE to TARGET_XSAVE_P (opts->...).\n+\tChange TARGET_XSAVEOPT to TARGET_XSAVEOPT_P (opts->...).\n+\tChange TARGET_LP64 to TARGET_LP64_P (opts->...).\n+\tChange TARGET_X32 to TARGET_X32_P (opts->...).\n+\tChange TARGET_FPMATH_DEFAULT to TARGET_FPMATH_DEFAULT_P (opts->...).\n+\tChange TARGET_FLOAT_RETURNS_IN_80387 to\n+\tTARGET_FLOAT_RETURNS_IN_80387_P (opts->...).\n \t(ix86_function_specific_save): New parameter. Use opts-> fields\n \tto replace global fields.\n \t(ix86_function_specific_restore): Ditto.\n@@ -339,8 +345,7 @@\n \t* configure.ac: Add --enable-host-shared, setting up new\n \tPICFLAG variable.\n \t* configure: Regenerate.\n-\t* doc/install.texi (--enable-shared): Add note contrasting it\n-\twith...\n+\t* doc/install.texi (--enable-shared): Add note contrasting it with ...\n \t(--enable-host-shared): New option.\n \n 2013-10-15  Richard Biener  <rguenther@suse.de>\n@@ -1242,8 +1247,8 @@\n \n 2013-10-15  Bernd Schmidt  <bernds@codesourcery.com>\n \n-\t* reload1.c (reloads_unique_chain_p): Ensure that r1 is the input for\n-\tr2.\n+\t* reload1.c (reloads_unique_chain_p): Ensure that r1 is\n+\tthe input for r2.\n \n 2013-10-15  Richard Biener  <rguenther@suse.de>\n \n@@ -1280,8 +1285,7 @@\n \t* context.h (gcc::context::get_dumps): New.\n \t(gcc::context::m_dumps): New.\n \t* coverage.c (coverage_init): Port to dump_manager API.\n-\t* dumpfile.c (extra_dump_files): Convert to field of\n-\tgcc::dump_manager.\n+\t* dumpfile.c (extra_dump_files): Convert to field of gcc::dump_manager.\n \t(extra_dump_files_in_use): Likewise.\n \t(extra_dump_files_alloced): Likewise.\n \t(gcc::dump_manager::dump_manager): New.\n@@ -1456,7 +1460,7 @@\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n-\t* config/i386/i386.c (bdesc_args): Change corresponding pattern  for\n+\t* config/i386/i386.c (bdesc_args): Change corresponding pattern for\n \t__builtin_ia32_cvtps2dq, __builtin_ia32_cvtps2dq256.\n \t* config/i386/sse.md (VI4_AVX): New.\n \t(sf2simodelower): Ditto.\n@@ -1720,9 +1724,9 @@\n \n 2013-10-11  Richard Biener  <rguenther@suse.de>\n \n-\t* tree-pretty-print.c (dump_generic_node): Allow to dump\n-\tboth (D) and (ab) for SSA_NAMEs.  Mark INTEGER_CSTs with\n-\t(OVF) if TREE_OVERFLOW is set.\n+\t* tree-pretty-print.c (dump_generic_node): Allow to dump both (D)\n+\tand (ab) for SSA_NAMEs.  Mark INTEGER_CSTs with (OVF) if\n+\tTREE_OVERFLOW is set.\n \n 2013-10-11  Thomas Schwinge  <thomas@codesourcery.com>\n \n@@ -1796,8 +1800,7 @@\n \tGIMPLE_OMP_TARGET, GIMPLE_OMP_TEAMS.\n \t(build_omp_barrier): Add lhs argument, return gimple rather than tree.\n \t(omp_clause_aligned_alignment): New function.\n-\t(lower_rec_simd_input_clauses): Only call SET_DECL_VALUE_EXPR\n-\ton decls.\n+\t(lower_rec_simd_input_clauses): Only call SET_DECL_VALUE_EXPR on decls.\n \t(lower_rec_input_clauses): Add FD argument.  Ignore shared clauses\n \ton teams constructs.  Handle user defined reductions and new\n \tOpenMP 4.0 clauses.\n@@ -1883,8 +1886,7 @@\n \thook.\n \t* gimplify.c (enum gimplify_omp_var_data): Add GOVD_MAP,\n \tGOVD_ALIGNED and GOVD_MAP_TO_ONLY.\n-\t(enum omp_region_type): Add ORT_TEAMS, ORT_TARGET_DATA and\n-\tORT_TARGET.\n+\t(enum omp_region_type): Add ORT_TEAMS, ORT_TARGET_DATA and ORT_TARGET.\n \t(struct gimplify_omp_ctx): Add combined_loop field.\n \t(gimplify_call_expr, gimplify_modify_expr): Don't call fold_stmt\n \ton stmts inside of target region.\n@@ -2019,8 +2021,7 @@\n 2013-10-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58656\n-\t* tree-ssa-pre.c (phi_translate): Do not cache failed\n-\ttranslations.\n+\t* tree-ssa-pre.c (phi_translate): Do not cache failed translations.\n \n 2013-10-10  Andrew MacLeod  <amacleod@redhat.com>\n "}, {"sha": "c2ad5b68ec975242566a7a8839a12a9639d47242", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1abb55073c46b93155e13eb5308aee7f13dd5e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1abb55073c46b93155e13eb5308aee7f13dd5e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6f1abb55073c46b93155e13eb5308aee7f13dd5e", "patch": "@@ -16897,8 +16897,10 @@ ix86_fixup_binary_operands (enum rtx_code code, enum machine_mode mode,\n \t  src2 = force_reg (mode, src2);\n \t  src1 = src2;\n \t}\n-      else\n+      else if (rtx_equal_p (dst, src1))\n \tsrc2 = force_reg (mode, src2);\n+      else\n+\tsrc1 = force_reg (mode, src1);\n     }\n \n   /* If the destination is memory, and we do not have matching source"}]}