{"sha": "a5cee4808e6598c60068f798542e3c9f690321f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVjZWU0ODA4ZTY1OThjNjAwNjhmNzk4NTQyZTNjOWY2OTAzMjFmMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-10-07T15:55:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-10-07T15:55:17Z"}, "message": "Fix libstdc++/24196 for ext/vstring/rc by returning to the behavior of basic_string pre-2003-06-13...\n\n2005-10-07  Paolo Carlini  <pcarlini@suse.de>\n\n\tFix libstdc++/24196 for ext/vstring/rc by returning to the behavior\n\tof basic_string pre-2003-06-13; remove fully-dynamic-string stuff.\n\t* include/ext/rc_string_base.h (_M_refcopy): Move inside the\n\t_Rep class and remove code in macro.\n\t(__rc_string_base()): Construct with _S_empty_rep()._M_refcopy().\n\t(_M_dispose, _M_leak_hard): Remove code in macro.\n\t(_S_construct): Return _S_empty_rep()._M_refcopy() for empty string.\n\t(_M_grab): Adjust.\n\n\t* include/ext/rc_string_base.h (_Rep::_M_refdata()): Minor tweak,\n\tmark throw().\n\nFrom-SVN: r105090", "tree": {"sha": "35667c891da9eb4b7fac1a83cb8b0d21303206c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35667c891da9eb4b7fac1a83cb8b0d21303206c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5cee4808e6598c60068f798542e3c9f690321f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5cee4808e6598c60068f798542e3c9f690321f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5cee4808e6598c60068f798542e3c9f690321f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5cee4808e6598c60068f798542e3c9f690321f2/comments", "author": null, "committer": null, "parents": [{"sha": "05f680972a4639d8e0471b47ff2695fa577bab11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f680972a4639d8e0471b47ff2695fa577bab11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f680972a4639d8e0471b47ff2695fa577bab11"}], "stats": {"total": 68, "additions": 33, "deletions": 35}, "files": [{"sha": "5c2ad8d9d3e89b68843a40a00f49027b42da46bc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5cee4808e6598c60068f798542e3c9f690321f2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5cee4808e6598c60068f798542e3c9f690321f2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a5cee4808e6598c60068f798542e3c9f690321f2", "patch": "@@ -1,3 +1,17 @@\n+2005-10-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tFix libstdc++/24196 for ext/vstring/rc by returning to the behavior\n+\tof basic_string pre-2003-06-13; remove fully-dynamic-string stuff.\n+\t* include/ext/rc_string_base.h (_M_refcopy): Move inside the\n+\t_Rep class and remove code in macro.\n+\t(__rc_string_base()): Construct with _S_empty_rep()._M_refcopy().\n+\t(_M_dispose, _M_leak_hard): Remove code in macro.\n+\t(_S_construct): Return _S_empty_rep()._M_refcopy() for empty string.\n+\t(_M_grab): Adjust.\n+\n+\t* include/ext/rc_string_base.h (_Rep::_M_refdata()): Minor tweak,\n+\tmark throw().\n+\n 2005-10-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* docs/doxygen/user.cfg.in: Update to Doyxygen 1.4.4."}, {"sha": "0b35e383f6a4ff00a26d277b5362f49ac2a41db1", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 19, "deletions": 35, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5cee4808e6598c60068f798542e3c9f690321f2/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5cee4808e6598c60068f798542e3c9f690321f2/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=a5cee4808e6598c60068f798542e3c9f690321f2", "patch": "@@ -134,9 +134,16 @@ namespace __gnu_cxx\n \ttypedef typename _Alloc::template rebind<size_type>::other _Raw_alloc;\n \n  \t_CharT*\n-\t_M_refdata()\n+\t_M_refdata() throw()\n \t{ return reinterpret_cast<_CharT*>(this + 1); }\n \n+\t_CharT*\n+\t_M_refcopy() throw()\n+\t{\n+\t  __atomic_add(&_M_refcount, 1);\n+\t  return _M_refdata();\n+\t}  // XXX MT\n+\t\n \tvoid\n \t_M_set_length(size_type __n)\n \t{ \n@@ -190,31 +197,18 @@ namespace __gnu_cxx\n       _M_rep() const\n       { return &((reinterpret_cast<_Rep*>(_M_data()))[-1]); }\n \n-      _CharT*\n-      _M_refcopy() const throw()\n-      {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n-\tif (__builtin_expect(_M_rep() != &_S_empty_rep(), false))\n-#endif\n-\t  __atomic_add(&_M_rep()->_M_refcount, 1);\n-\treturn _M_data();\n-      }  // XXX MT\n-\n       _CharT*\n       _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2) const\n       {\n \treturn (!_M_is_leaked() && __alloc1 == __alloc2)\n-\t        ? _M_refcopy() : _M_rep()->_M_clone(__alloc1);\n+\t        ? _M_rep()->_M_refcopy() : _M_rep()->_M_clone(__alloc1);\n       }\n \n       void\n       _M_dispose(const _Alloc& __a)\n       {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n-\tif (__builtin_expect(_M_rep() != &_S_empty_rep(), false))\n-#endif\n-\t  if (__exchange_and_add(&_M_rep()->_M_refcount, -1) <= 0)\n-\t    _M_rep()->_M_destroy(__a);\n+\tif (__exchange_and_add(&_M_rep()->_M_refcount, -1) <= 0)\n+\t  _M_rep()->_M_destroy(__a);\n       }  // XXX MT\n \n       void\n@@ -303,11 +297,8 @@ namespace __gnu_cxx\n       }\n \n       __rc_string_base()\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n-      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }\n-#else\n-      : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()) { }\n-#endif\n+      : _M_dataplus(_S_empty_rep()._M_refcopy(), _Alloc()) { }\n+\n       __rc_string_base(const _Alloc& __a);\n \n       __rc_string_base(const __rc_string_base& __rcs);\n@@ -486,10 +477,6 @@ namespace __gnu_cxx\n     __rc_string_base<_CharT, _Traits, _Alloc>::\n     _M_leak_hard()\n     {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n-      if (_M_rep() == &_S_empty_rep())\n-\treturn;\n-#endif\n       if (_M_is_shared())\n \t_M_mutate(0, 0, 0);\n       _M_set_leaked();\n@@ -506,10 +493,9 @@ namespace __gnu_cxx\n       _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t   std::input_iterator_tag)\n       {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n \tif (__beg == __end && __a == _Alloc())\n-\t  return _S_empty_rep()._M_refdata();\n-#endif\n+\t  return _S_empty_rep()._M_refcopy();\n+\n \t// Avoid reallocation for common case.\n \t_CharT __buf[128];\n \tsize_type __len = 0;\n@@ -552,10 +538,9 @@ namespace __gnu_cxx\n       _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t   std::forward_iterator_tag)\n       {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n \tif (__beg == __end && __a == _Alloc())\n-\t  return _S_empty_rep()._M_refdata();\n-#endif\n+\t  return _S_empty_rep()._M_refcopy();\n+\n \t// NB: Not required, but considered best practice.\n \tif (__builtin_expect(__is_null_p(__beg) && __beg != __end, 0))\n \t  std::__throw_logic_error(__N(\"__rc_string_base::\"\n@@ -581,10 +566,9 @@ namespace __gnu_cxx\n     __rc_string_base<_CharT, _Traits, _Alloc>::\n     _S_construct(size_type __n, _CharT __c, const _Alloc& __a)\n     {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n       if (__n == 0 && __a == _Alloc())\n-\treturn _S_empty_rep()._M_refdata();\n-#endif\n+\treturn _S_empty_rep()._M_refcopy();\n+\n       // Check for out_of_range and length_error exceptions.\n       _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);\n       if (__n)"}]}