{"sha": "9e52563514f58a902701416af51b5b8fa6ad8dc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1MjU2MzUxNGY1OGE5MDI3MDE0MTZhZjUxYjViOGZhNmFkOGRjMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-04-21T02:56:58Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-21T02:56:58Z"}, "message": "* loop.c (emit_iv_add_mult): Revert last change.\n\nFrom-SVN: r33302", "tree": {"sha": "ee43740515805d79811046ebf9f421ef0f4e6367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee43740515805d79811046ebf9f421ef0f4e6367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e52563514f58a902701416af51b5b8fa6ad8dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e52563514f58a902701416af51b5b8fa6ad8dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e52563514f58a902701416af51b5b8fa6ad8dc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e52563514f58a902701416af51b5b8fa6ad8dc2/comments", "author": null, "committer": null, "parents": [{"sha": "c52fbf0f79f6e2079687c2bb12542a4e23bffd2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c52fbf0f79f6e2079687c2bb12542a4e23bffd2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c52fbf0f79f6e2079687c2bb12542a4e23bffd2f"}], "stats": {"total": 60, "additions": 9, "deletions": 51}, "files": [{"sha": "99659e9eef484470abbff46347423cac7e5aa904", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e52563514f58a902701416af51b5b8fa6ad8dc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e52563514f58a902701416af51b5b8fa6ad8dc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e52563514f58a902701416af51b5b8fa6ad8dc2", "patch": "@@ -1,3 +1,7 @@\n+2000-04-20  Richard Henderson  <rth@cygnus.com>\n+\n+\t* loop.c (emit_iv_add_mult): Revert last change.\n+\n 2000-04-20  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpplib.h (enum cpp_ttype): Add token types for all"}, {"sha": "1ff6a8ce4fb3a353557506315532303758955694", "filename": "gcc/loop.c", "status": "modified", "additions": 5, "deletions": 51, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e52563514f58a902701416af51b5b8fa6ad8dc2/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e52563514f58a902701416af51b5b8fa6ad8dc2/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=9e52563514f58a902701416af51b5b8fa6ad8dc2", "patch": "@@ -7640,24 +7640,11 @@ emit_iv_add_mult (b, m, a, reg, insert_before)\n {\n   rtx seq;\n   rtx result;\n-  rtx last;\n-  rtx set;\n-  rtx exp;\n-  enum machine_mode mode = GET_MODE (reg);\n \n   /* Prevent unexpected sharing of these rtx.  */\n   a = copy_rtx (a);\n   b = copy_rtx (b);\n \n-  /* We may be faced to (plus (symbol_ref) (const_int)).  We want to simplify\n-     this to CONST rtx.  */\n-  exp = simplify_rtx (a);\n-  if (exp)\n-    a = exp;\n-  exp = simplify_rtx (b);\n-  if (exp)\n-    b = exp;\n-\n   /* Increase the lifetime of any invariants moved further in code.  */\n   update_reg_last_use (a, insert_before);\n   update_reg_last_use (b, insert_before);\n@@ -7670,7 +7657,7 @@ emit_iv_add_mult (b, m, a, reg, insert_before)\n   seq = gen_sequence ();\n   end_sequence ();\n \n-  last = emit_insn_before (seq, insert_before);\n+  emit_insn_before (seq, insert_before);\n \n   /* It is entirely possible that the expansion created lots of new \n      registers.  Iterate over the sequence we just created and \n@@ -7681,47 +7668,14 @@ emit_iv_add_mult (b, m, a, reg, insert_before)\n       int i;\n       for (i = 0; i < XVECLEN (seq, 0); ++i)\n \t{\n-\t  set = single_set (XVECEXP (seq, 0, i));\n+\t  rtx set = single_set (XVECEXP (seq, 0, i));\n \t  if (set && GET_CODE (SET_DEST (set)) == REG)\n \t    record_base_value (REGNO (SET_DEST (set)), SET_SRC (set), 0);\n \t}\n-      last = XVECEXP (seq, 0, i - 1);\n     }\n-  else\n-    {\n-      set = single_set (last);\n-      if (set && GET_CODE (SET_DEST (set)) == REG)\n-        record_base_value (REGNO (SET_DEST (set)), SET_SRC (set), 0);\n-    }\n-  if (!last)\n-    return;\n-  /* Sequence really ought to end by set storing final value to the register.\n-    \n-     Attach note indicating expression we've just calculated to it.  This is\n-     important for second run of loop optimizer to understand strength reduced\n-     givs from the first run.  */\n-  if (GET_CODE (last) != INSN)\n-    abort();\n-  set = single_set (last);\n-  if (!set)\n-    return;\n-  if (SET_DEST (set) != reg)\n-    abort();\n-\n-  /* In case we start to emit some usefull notes to these insns, get abort\n-     here, since we need to decide what information is more important.  */\n-  if (find_reg_note (last, REG_EQUIV, NULL_RTX)\n-      || find_reg_note (last, REG_EQUAL, NULL_RTX))\n-    abort();\n-\n-  /* Expression we've just caluclated.  */\n-  exp = simplify_gen_binary (PLUS, mode,\n-\t\t\t     simplify_gen_binary (MULT, mode, b, m),\n-\t\t\t     a);\n-  REG_NOTES (last)\n-\t= gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t    \t\t     exp,\n-\t    \t\t     REG_NOTES (last));\n+  else if (GET_CODE (seq) == SET\n+\t   && GET_CODE (SET_DEST (seq)) == REG)\n+    record_base_value (REGNO (SET_DEST (seq)), SET_SRC (seq), 0);\n }\n \f\n /* Test whether A * B can be computed without"}]}