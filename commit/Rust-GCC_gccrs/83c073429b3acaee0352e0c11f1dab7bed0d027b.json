{"sha": "83c073429b3acaee0352e0c11f1dab7bed0d027b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNjMDczNDI5YjNhY2FlZTAzNTJlMGMxMWYxZGFiN2JlZDBkMDI3Yg==", "commit": {"author": {"name": "Andrew Cagney", "email": "cagney@redhat.com", "date": "2003-09-22T17:42:03Z"}, "committer": {"name": "Andrew Cagney", "email": "cagney@gcc.gnu.org", "date": "2003-09-22T17:42:03Z"}, "message": "floatformat.h (struct floatformat): Add field \"is_valid\".\n\n2003-09-22  Andrew Cagney  <cagney@redhat.com>\n\n\t* floatformat.h (struct floatformat): Add field \"is_valid\".\n\n2003-09-22  Andrew Cagney  <cagney@redhat.com>\n\n\t* floatformat.c (floatformat_i387_ext_is_valid): New function.\n\t(floatformat_always_valid): New function.\n\t(floatformat_i387_ext): Initialize new \"is_valid\" field to\n\t\"floatformat_i387_ext_is_valid\".\n\t(floatformat_ieee_single_little): Initialize \"is_valid\" field to\n\tfloatformat_always_valid.\n\t(floatformat_ieee_double_big): Ditto.\n\t(floatformat_ieee_double_little): Ditto.\n\t(floatformat_ieee_double_little): Ditto.\n\t(floatformat_ieee_double_littlebyte_bigword): Ditto.\n\t(floatformat_i960_ext): Ditto.\n\t(floatformat_m88110_ext): Ditto.\n\t(floatformat_m88110_harris_ext): Ditto.\n\t(floatformat_arm_ext_big): Ditto.\n\t(floatformat_arm_ext_littlebyte_bigword): Ditto.\n\t(floatformat_ia64_spill_big): Ditto.\n\t(floatformat_ia64_spill_little): Ditto.\n\t(floatformat_ia64_quad_big): Ditto.\n\t(floatformat_ia64_quad_little): Ditto.\n\t(floatformat_ia64_quad_little): Ditto.\n\t(floatformat_is_valid): Call \"is_valid\".\n\nFrom-SVN: r71659", "tree": {"sha": "bb6f917b028df75b7073b269f6970f7dbe80b423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb6f917b028df75b7073b269f6970f7dbe80b423"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83c073429b3acaee0352e0c11f1dab7bed0d027b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c073429b3acaee0352e0c11f1dab7bed0d027b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83c073429b3acaee0352e0c11f1dab7bed0d027b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c073429b3acaee0352e0c11f1dab7bed0d027b/comments", "author": null, "committer": null, "parents": [{"sha": "6b475ad591474951f88297d6e8e32aa99a5d6180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b475ad591474951f88297d6e8e32aa99a5d6180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b475ad591474951f88297d6e8e32aa99a5d6180"}], "stats": {"total": 153, "additions": 106, "deletions": 47}, "files": [{"sha": "db25adc849b627c3ab2eb3b30fc6a36e6a203637", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c073429b3acaee0352e0c11f1dab7bed0d027b/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c073429b3acaee0352e0c11f1dab7bed0d027b/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=83c073429b3acaee0352e0c11f1dab7bed0d027b", "patch": "@@ -1,8 +1,12 @@\n+2003-09-22  Andrew Cagney  <cagney@redhat.com>\n+\n+\t* floatformat.h (struct floatformat): Add field \"is_valid\".\n+\n 2003-09-15  Andrew Cagney  <cagney@redhat.com>\n \n \t* floatformat.h (floatformat_to_double): Make input buffer constant.\n \t(floatformat_from_double, floatformat_is_valid): Ditto.\n-\t\n+\n 2003-09-15  Andrew Cagney  <cagney@redhat.com>\n \n \t* floatformat.h (struct floatformat): Make \"exp_bias\" signed."}, {"sha": "a8244ada5c7267e8229e1cceb37e0795e0ac8c8d", "filename": "include/floatformat.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c073429b3acaee0352e0c11f1dab7bed0d027b/include%2Ffloatformat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c073429b3acaee0352e0c11f1dab7bed0d027b/include%2Ffloatformat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Ffloatformat.h?ref=83c073429b3acaee0352e0c11f1dab7bed0d027b", "patch": "@@ -80,6 +80,9 @@ struct floatformat\n \n   /* Internal name for debugging. */\n   const char *name;\n+\n+  /* Validator method.  */\n+  int (*is_valid) PARAMS ((const struct floatformat *fmt, const char *from));\n };\n \n /* floatformats for IEEE single and double, big and little endian.  */"}, {"sha": "4b4cc2fca5a3cab3de212c0a5c52edffe19f04c5", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c073429b3acaee0352e0c11f1dab7bed0d027b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c073429b3acaee0352e0c11f1dab7bed0d027b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=83c073429b3acaee0352e0c11f1dab7bed0d027b", "patch": "@@ -1,3 +1,27 @@\n+2003-09-22  Andrew Cagney  <cagney@redhat.com>\n+\n+\t* floatformat.c (floatformat_i387_ext_is_valid): New function.\n+\t(floatformat_always_valid): New function.\n+\t(floatformat_i387_ext): Initialize new \"is_valid\" field to\n+\t\"floatformat_i387_ext_is_valid\".\n+\t(floatformat_ieee_single_little): Initialize \"is_valid\" field to\n+\tfloatformat_always_valid.\n+\t(floatformat_ieee_double_big): Ditto.\n+\t(floatformat_ieee_double_little): Ditto.\n+\t(floatformat_ieee_double_little): Ditto.\n+\t(floatformat_ieee_double_littlebyte_bigword): Ditto.\n+\t(floatformat_i960_ext): Ditto.\n+\t(floatformat_m88110_ext): Ditto.\n+\t(floatformat_m88110_harris_ext): Ditto.\n+\t(floatformat_arm_ext_big): Ditto.\n+\t(floatformat_arm_ext_littlebyte_bigword): Ditto.\n+\t(floatformat_ia64_spill_big): Ditto.\n+\t(floatformat_ia64_spill_little): Ditto.\n+\t(floatformat_ia64_quad_big): Ditto.\n+\t(floatformat_ia64_quad_little): Ditto.\n+\t(floatformat_ia64_quad_little): Ditto.\n+\t(floatformat_is_valid): Call \"is_valid\".\n+\n 2003-09-15  Andrew Cagney  <cagney@redhat.com>\n \n \t* floatformat.c (get_field): Make \"data\" constant."}, {"sha": "3589caad2d814b04d4c647fa5676ac54fe7117cf", "filename": "libiberty/floatformat.c", "status": "modified", "additions": 74, "deletions": 46, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c073429b3acaee0352e0c11f1dab7bed0d027b/libiberty%2Ffloatformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c073429b3acaee0352e0c11f1dab7bed0d027b/libiberty%2Ffloatformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffloatformat.c?ref=83c073429b3acaee0352e0c11f1dab7bed0d027b", "patch": "@@ -29,6 +29,22 @@ extern char *memcpy ();\n extern char *memset ();\n #endif\n \n+static unsigned long get_field PARAMS ((const unsigned char *,\n+\t\t\t\t\tenum floatformat_byteorders,\n+\t\t\t\t\tunsigned int,\n+\t\t\t\t\tunsigned int,\n+\t\t\t\t\tunsigned int));\n+static int floatformat_always_valid PARAMS ((const struct floatformat *fmt,\n+\t\t\t\t\t     const char *from));\n+\n+static int\n+floatformat_always_valid (fmt, from)\n+     const struct floatformat *fmt;\n+     const char *from;\n+{\n+  return 1;\n+}\n+\n /* The odds that CHAR_BIT will be anything but 8 are low enough that I'm not\n    going to bother with trying to muck around with whether it is defined in\n    a system header, what we do if not, etc.  */\n@@ -39,25 +55,29 @@ const struct floatformat floatformat_ieee_single_big =\n {\n   floatformat_big, 32, 0, 1, 8, 127, 255, 9, 23,\n   floatformat_intbit_no,\n-  \"floatformat_ieee_single_big\"\n+  \"floatformat_ieee_single_big\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_ieee_single_little =\n {\n   floatformat_little, 32, 0, 1, 8, 127, 255, 9, 23,\n   floatformat_intbit_no,\n-  \"floatformat_ieee_single_little\"\n+  \"floatformat_ieee_single_little\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_ieee_double_big =\n {\n   floatformat_big, 64, 0, 1, 11, 1023, 2047, 12, 52,\n   floatformat_intbit_no,\n-  \"floatformat_ieee_double_big\"\n+  \"floatformat_ieee_double_big\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_ieee_double_little =\n {\n   floatformat_little, 64, 0, 1, 11, 1023, 2047, 12, 52,\n   floatformat_intbit_no,\n-  \"floatformat_ieee_double_little\"\n+  \"floatformat_ieee_double_little\",\n+  floatformat_always_valid\n };\n \n /* floatformat for IEEE double, little endian byte order, with big endian word\n@@ -67,88 +87,119 @@ const struct floatformat floatformat_ieee_double_littlebyte_bigword =\n {\n   floatformat_littlebyte_bigword, 64, 0, 1, 11, 1023, 2047, 12, 52,\n   floatformat_intbit_no,\n-  \"floatformat_ieee_double_littlebyte_bigword\"\n+  \"floatformat_ieee_double_littlebyte_bigword\",\n+  floatformat_always_valid\n };\n \n+static int floatformat_i387_ext_is_valid PARAMS ((const struct floatformat *fmt, const char *from));\n+\n+static int\n+floatformat_i387_ext_is_valid (fmt, from)\n+     const struct floatformat *fmt;\n+     const char *from;\n+{\n+  /* In the i387 double-extended format, if the exponent is all ones,\n+     then the integer bit must be set.  If the exponent is neither 0\n+     nor ~0, the intbit must also be set.  Only if the exponent is\n+     zero can it be zero, and then it must be zero.  */\n+  unsigned long exponent, int_bit;\n+  const unsigned char *ufrom = (const unsigned char *) from;\n+  \n+  exponent = get_field (ufrom, fmt->byteorder, fmt->totalsize,\n+\t\t\tfmt->exp_start, fmt->exp_len);\n+  int_bit = get_field (ufrom, fmt->byteorder, fmt->totalsize,\n+\t\t       fmt->man_start, 1);\n+  \n+  if ((exponent == 0) != (int_bit == 0))\n+    return 0;\n+  else\n+    return 1;\n+}\n+\n const struct floatformat floatformat_i387_ext =\n {\n   floatformat_little, 80, 0, 1, 15, 0x3fff, 0x7fff, 16, 64,\n   floatformat_intbit_yes,\n-  \"floatformat_i387_ext\"\n+  \"floatformat_i387_ext\",\n+  floatformat_i387_ext_is_valid\n };\n const struct floatformat floatformat_m68881_ext =\n {\n   /* Note that the bits from 16 to 31 are unused.  */\n   floatformat_big, 96, 0, 1, 15, 0x3fff, 0x7fff, 32, 64,\n   floatformat_intbit_yes,\n-  \"floatformat_m68881_ext\"\n+  \"floatformat_m68881_ext\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_i960_ext =\n {\n   /* Note that the bits from 0 to 15 are unused.  */\n   floatformat_little, 96, 16, 17, 15, 0x3fff, 0x7fff, 32, 64,\n   floatformat_intbit_yes,\n-  \"floatformat_i960_ext\"\n+  \"floatformat_i960_ext\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_m88110_ext =\n {\n   floatformat_big, 80, 0, 1, 15, 0x3fff, 0x7fff, 16, 64,\n   floatformat_intbit_yes,\n-  \"floatformat_m88110_ext\"\n+  \"floatformat_m88110_ext\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_m88110_harris_ext =\n {\n   /* Harris uses raw format 128 bytes long, but the number is just an ieee\n      double, and the last 64 bits are wasted. */\n   floatformat_big,128, 0, 1, 11,  0x3ff,  0x7ff, 12, 52,\n   floatformat_intbit_no,\n-  \"floatformat_m88110_ext_harris\"\n+  \"floatformat_m88110_ext_harris\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_arm_ext_big =\n {\n   /* Bits 1 to 16 are unused.  */\n   floatformat_big, 96, 0, 17, 15, 0x3fff, 0x7fff, 32, 64,\n   floatformat_intbit_yes,\n-  \"floatformat_arm_ext_big\"\n+  \"floatformat_arm_ext_big\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_arm_ext_littlebyte_bigword =\n {\n   /* Bits 1 to 16 are unused.  */\n   floatformat_littlebyte_bigword, 96, 0, 17, 15, 0x3fff, 0x7fff, 32, 64,\n   floatformat_intbit_yes,\n-  \"floatformat_arm_ext_littlebyte_bigword\"\n+  \"floatformat_arm_ext_littlebyte_bigword\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_ia64_spill_big =\n {\n   floatformat_big, 128, 0, 1, 17, 65535, 0x1ffff, 18, 64,\n   floatformat_intbit_yes,\n-  \"floatformat_ia64_spill_big\"\n+  \"floatformat_ia64_spill_big\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_ia64_spill_little =\n {\n   floatformat_little, 128, 0, 1, 17, 65535, 0x1ffff, 18, 64,\n   floatformat_intbit_yes,\n-  \"floatformat_ia64_spill_little\"\n+  \"floatformat_ia64_spill_little\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_ia64_quad_big =\n {\n   floatformat_big, 128, 0, 1, 15, 16383, 0x7fff, 16, 112,\n   floatformat_intbit_no,\n-  \"floatformat_ia64_quad_big\"\n+  \"floatformat_ia64_quad_big\",\n+  floatformat_always_valid\n };\n const struct floatformat floatformat_ia64_quad_little =\n {\n   floatformat_little, 128, 0, 1, 15, 16383, 0x7fff, 16, 112,\n   floatformat_intbit_no,\n-  \"floatformat_ia64_quad_little\"\n+  \"floatformat_ia64_quad_little\",\n+  floatformat_always_valid\n };\n \f\n-static unsigned long get_field PARAMS ((const unsigned char *,\n-\t\t\t\t\tenum floatformat_byteorders,\n-\t\t\t\t\tunsigned int,\n-\t\t\t\t\tunsigned int,\n-\t\t\t\t\tunsigned int));\n-\n /* Extract a field which starts at START and is LEN bits long.  DATA and\n    TOTAL_LEN are the thing we are extracting it from, in byteorder ORDER.  */\n static unsigned long\n@@ -411,30 +462,7 @@ floatformat_is_valid (fmt, from)\n      const struct floatformat *fmt;\n      const char *from;\n {\n-  if (fmt == &floatformat_i387_ext)\n-    {\n-      /* In the i387 double-extended format, if the exponent is all\n-\t ones, then the integer bit must be set.  If the exponent\n-\t is neither 0 nor ~0, the intbit must also be set.  Only\n-\t if the exponent is zero can it be zero, and then it must\n-\t be zero.  */\n-      unsigned long exponent, int_bit;\n-      const unsigned char *ufrom = (const unsigned char *) from;\n-\n-      exponent = get_field (ufrom, fmt->byteorder, fmt->totalsize,\n-\t\t\t    fmt->exp_start, fmt->exp_len);\n-      int_bit = get_field (ufrom, fmt->byteorder, fmt->totalsize,\n-\t\t\t   fmt->man_start, 1);\n-\n-      if ((exponent == 0) != (int_bit == 0))\n-\treturn 0;\n-      else\n-\treturn 1;\n-    }\n-\n-  /* Other formats with invalid representations should be added\n-     here.  */\n-  return 1;\n+  return fmt->is_valid (fmt, from);\n }\n \n "}]}