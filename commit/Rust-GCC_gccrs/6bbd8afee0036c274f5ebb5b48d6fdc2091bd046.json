{"sha": "6bbd8afee0036c274f5ebb5b48d6fdc2091bd046", "node_id": "C_kwDOANBUbNoAKDZiYmQ4YWZlZTAwMzZjMjc0ZjVlYmI1YjQ4ZDZmZGMyMDkxYmQwNDY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-17T13:35:23Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-17T13:35:23Z"}, "message": "c++: double non-dep folding from finish_compound_literal [PR104565]\n\nIn finish_compound_literal, we perform non-dependent expr folding before\nthe call to check_narrowing ever since r9-5973.  But ever since r10-7096,\ncheck_narrowing also performs non-dependent expr folding of its own.\nThis double folding means tsubst will see non-templated trees during the\nsecond folding, which causes a spurious error in the below testcase.\n\nThis patch removes the former folding operation; it seems obviated by\nthe latter one.\n\n\tPR c++/104565\n\ngcc/cp/ChangeLog:\n\n\t* semantics.cc (finish_compound_literal): Don't perform\n\tnon-dependent expr folding before calling check_narrowing.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/non-dependent22.C: New test.", "tree": {"sha": "ec10d9a576e6719c40aa4b5c45f82351fa14a60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec10d9a576e6719c40aa4b5c45f82351fa14a60e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bbd8afee0036c274f5ebb5b48d6fdc2091bd046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbd8afee0036c274f5ebb5b48d6fdc2091bd046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bbd8afee0036c274f5ebb5b48d6fdc2091bd046", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbd8afee0036c274f5ebb5b48d6fdc2091bd046/comments", "author": null, "committer": null, "parents": [{"sha": "754dce903ca28c4c2f2bc8614a8de5e631655f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754dce903ca28c4c2f2bc8614a8de5e631655f2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754dce903ca28c4c2f2bc8614a8de5e631655f2e"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "114baa4871079573e027b95e4e6c32878704e388", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbd8afee0036c274f5ebb5b48d6fdc2091bd046/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbd8afee0036c274f5ebb5b48d6fdc2091bd046/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=6bbd8afee0036c274f5ebb5b48d6fdc2091bd046", "patch": "@@ -3203,13 +3203,9 @@ finish_compound_literal (tree type, tree compound_literal,\n     return error_mark_node;\n   compound_literal = reshape_init (type, compound_literal, complain);\n   if (SCALAR_TYPE_P (type)\n-      && !BRACE_ENCLOSED_INITIALIZER_P (compound_literal))\n-    {\n-      tree t = instantiate_non_dependent_expr_sfinae (compound_literal,\n-\t\t\t\t\t\t      complain);\n-      if (!check_narrowing (type, t, complain))\n-\treturn error_mark_node;\n-    }\n+      && !BRACE_ENCLOSED_INITIALIZER_P (compound_literal)\n+      && !check_narrowing (type, compound_literal, complain))\n+    return error_mark_node;\n   if (TREE_CODE (type) == ARRAY_TYPE\n       && TYPE_DOMAIN (type) == NULL_TREE)\n     {"}, {"sha": "83a6a13f15b7054ab6e1bba7bbc20d31383059f8", "filename": "gcc/testsuite/g++.dg/template/non-dependent22.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbd8afee0036c274f5ebb5b48d6fdc2091bd046/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbd8afee0036c274f5ebb5b48d6fdc2091bd046/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent22.C?ref=6bbd8afee0036c274f5ebb5b48d6fdc2091bd046", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/104565\n+// { dg-do compile { target c++11 } }\n+\n+struct apa {\n+  constexpr int n() const { return 3; }\n+};\n+\n+template<class>\n+int f() {\n+  apa foo;\n+  return int{foo.n()};  // no matching function for call to 'apa::n(apa*)'\n+}"}]}