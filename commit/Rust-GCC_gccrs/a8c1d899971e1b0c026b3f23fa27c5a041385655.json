{"sha": "a8c1d899971e1b0c026b3f23fa27c5a041385655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThjMWQ4OTk5NzFlMWIwYzAyNmIzZjIzZmEyN2M1YTA0MTM4NTY1NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-12-16T22:34:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-12-16T22:34:39Z"}, "message": "re PR c++/51331 (bad code generated when explicitly calling auto-generated constructor of virtual base)\n\n\tPR c++/51331\n\t* class.c (convert_to_base_statically): Just call\n\tbuild_simple_base_path.\n\t(build_simple_base_path): Check field offset.\n\nFrom-SVN: r182414", "tree": {"sha": "a9e029ece57782eaabad6a6b34f5784f8dd04736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9e029ece57782eaabad6a6b34f5784f8dd04736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8c1d899971e1b0c026b3f23fa27c5a041385655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c1d899971e1b0c026b3f23fa27c5a041385655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c1d899971e1b0c026b3f23fa27c5a041385655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c1d899971e1b0c026b3f23fa27c5a041385655/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20fb2c13c16829dc0246631d95281de92a65e35e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fb2c13c16829dc0246631d95281de92a65e35e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fb2c13c16829dc0246631d95281de92a65e35e"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "ea5ebaa8a8abcd4c2e241732a635f5070ad93da0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c1d899971e1b0c026b3f23fa27c5a041385655/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c1d899971e1b0c026b3f23fa27c5a041385655/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a8c1d899971e1b0c026b3f23fa27c5a041385655", "patch": "@@ -1,3 +1,10 @@\n+2011-12-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51331\n+\t* class.c (convert_to_base_statically): Just call\n+\tbuild_simple_base_path.\n+\t(build_simple_base_path): Check field offset.\n+\n 2011-12-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51458"}, {"sha": "c96f7bf9f7b09d2c5c326fc4a686c9dae21752ec", "filename": "gcc/cp/class.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c1d899971e1b0c026b3f23fa27c5a041385655/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c1d899971e1b0c026b3f23fa27c5a041385655/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a8c1d899971e1b0c026b3f23fa27c5a041385655", "patch": "@@ -471,7 +471,14 @@ build_simple_base_path (tree expr, tree binfo)\n     /* Is this the base field created by build_base_field?  */\n     if (TREE_CODE (field) == FIELD_DECL\n \t&& DECL_FIELD_IS_BASE (field)\n-\t&& TREE_TYPE (field) == type)\n+\t&& TREE_TYPE (field) == type\n+\t/* If we're looking for a field in the most-derived class,\n+\t   also check the field offset; we can have two base fields\n+\t   of the same type if one is an indirect virtual base and one\n+\t   is a direct non-virtual base.  */\n+\t&& (BINFO_INHERITANCE_CHAIN (d_binfo)\n+\t    || tree_int_cst_equal (byte_position (field),\n+\t\t\t\t   BINFO_OFFSET (binfo))))\n       {\n \t/* We don't use build_class_member_access_expr here, as that\n \t   has unnecessary checks, and more importantly results in\n@@ -546,6 +553,10 @@ convert_to_base_statically (tree expr, tree base)\n   expr_type = TREE_TYPE (expr);\n   if (!SAME_BINFO_TYPE_P (BINFO_TYPE (base), expr_type))\n     {\n+      /* If this is a non-empty base, use a COMPONENT_REF.  */\n+      if (!is_empty_class (BINFO_TYPE (base)))\n+\treturn build_simple_base_path (expr, base);\n+\n       /* We use fold_build2 and fold_convert below to simplify the trees\n \t provided to the optimizers.  It is not safe to call these functions\n \t when processing a template because they do not handle C++-specific"}, {"sha": "98a80e396622fa7d45d1c44d57ded748933a7955", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c1d899971e1b0c026b3f23fa27c5a041385655/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c1d899971e1b0c026b3f23fa27c5a041385655/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a8c1d899971e1b0c026b3f23fa27c5a041385655", "patch": "@@ -140,7 +140,9 @@ initialize_vtbl_ptrs (tree addr)\n    zero-initialization does not simply mean filling the storage with\n    zero bytes.  FIELD_SIZE, if non-NULL, is the bit size of the field,\n    subfields with bit positions at or above that bit size shouldn't\n-   be added.  */\n+   be added.  Note that this only works when the result is assigned\n+   to a base COMPONENT_REF; if we only have a pointer to the base subobject,\n+   expand_assignment will end up clearing the full size of TYPE.  */\n \n static tree\n build_zero_init_1 (tree type, tree nelts, bool static_storage_p,"}, {"sha": "0cc64645881aa00f5961dca5e9df1c258a3b06bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c1d899971e1b0c026b3f23fa27c5a041385655/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c1d899971e1b0c026b3f23fa27c5a041385655/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8c1d899971e1b0c026b3f23fa27c5a041385655", "patch": "@@ -1,3 +1,8 @@\n+2011-12-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51331\n+\t* g++.dg/init/value10.C: New.\n+\n 2011-12-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/50803"}, {"sha": "2066410a01d03eb6e7905253690dabf7a99588a3", "filename": "gcc/testsuite/g++.dg/init/value10.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c1d899971e1b0c026b3f23fa27c5a041385655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c1d899971e1b0c026b3f23fa27c5a041385655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue10.C?ref=a8c1d899971e1b0c026b3f23fa27c5a041385655", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/51331\n+// { dg-do run }\n+\n+struct A {\n+  A(): x(10) {}\n+  virtual ~A() {}\n+\n+  int x;\n+};\n+\n+struct B: public virtual A {\n+};\n+\n+struct C: public virtual A {\n+};\n+\n+struct D: public B, virtual public C {\n+  D(): B(), C() {}  // note an explicit call to C() which is auto-generated\n+};\n+\n+int main() {\n+  D* d = new D();\n+\n+  // Crashes here with the following message:\n+  // *** glibc detected *** ./test: free(): invalid next size (fast)\n+  delete d;\n+}"}]}