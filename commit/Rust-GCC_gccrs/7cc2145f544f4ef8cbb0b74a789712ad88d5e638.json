{"sha": "7cc2145f544f4ef8cbb0b74a789712ad88d5e638", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NjMjE0NWY1NDRmNGVmOGNiYjBiNzRhNzg5NzEyYWQ4OGQ1ZTYzOA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-05-16T09:07:34Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-05-16T09:07:34Z"}, "message": "[AArch64 costs 12/18] Improve costs for sign/zero extracts\n\ngcc/\n\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Improve costs for\n\tSIGN/ZERO_EXTRACT.\n\n\nCo-Authored-By: Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\n\nFrom-SVN: r210504", "tree": {"sha": "d4dfcd2e4ac2dbd6e780eb24675a758cc4ba0f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4dfcd2e4ac2dbd6e780eb24675a758cc4ba0f29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cc2145f544f4ef8cbb0b74a789712ad88d5e638", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc2145f544f4ef8cbb0b74a789712ad88d5e638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc2145f544f4ef8cbb0b74a789712ad88d5e638", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc2145f544f4ef8cbb0b74a789712ad88d5e638/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba0cfa1700ccede16632595e36f783e24cb65e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0cfa1700ccede16632595e36f783e24cb65e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0cfa1700ccede16632595e36f783e24cb65e1a"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "d36a3cadbc329769a3abb3333442dfaf7c70174d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc2145f544f4ef8cbb0b74a789712ad88d5e638/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc2145f544f4ef8cbb0b74a789712ad88d5e638/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cc2145f544f4ef8cbb0b74a789712ad88d5e638", "patch": "@@ -1,3 +1,9 @@\n+2014-03-16  James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_rtx_arith_op_extract_p): New.\n+\t(aarch64_rtx_costs): Improve costs for SIGN/ZERO_EXTRACT.\n+\n 2014-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n "}, {"sha": "37c791df422a900af207fe80346019e2729c4d13", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc2145f544f4ef8cbb0b74a789712ad88d5e638/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc2145f544f4ef8cbb0b74a789712ad88d5e638/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7cc2145f544f4ef8cbb0b74a789712ad88d5e638", "patch": "@@ -4833,6 +4833,35 @@ aarch64_address_cost (rtx x,\n   return cost;\n }\n \n+/* Return true if the RTX X in mode MODE is a zero or sign extract\n+   usable in an ADD or SUB (extended register) instruction.  */\n+static bool\n+aarch64_rtx_arith_op_extract_p (rtx x, enum machine_mode mode)\n+{\n+  /* Catch add with a sign extract.\n+     This is add_<optab><mode>_multp2.  */\n+  if (GET_CODE (x) == SIGN_EXTRACT\n+      || GET_CODE (x) == ZERO_EXTRACT)\n+    {\n+      rtx op0 = XEXP (x, 0);\n+      rtx op1 = XEXP (x, 1);\n+      rtx op2 = XEXP (x, 2);\n+\n+      if (GET_CODE (op0) == MULT\n+\t  && CONST_INT_P (op1)\n+\t  && op2 == const0_rtx\n+\t  && CONST_INT_P (XEXP (op0, 1))\n+\t  && aarch64_is_extend_from_extract (mode,\n+\t\t\t\t\t     XEXP (op0, 1),\n+\t\t\t\t\t     op1))\n+\t{\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n /* Calculate the cost of calculating X, storing it in *COST.  Result\n    is true if the total cost of the operation has now been calculated.  */\n static bool\n@@ -5097,6 +5126,18 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \n \t  }\n \n+\t/* Look for SUB (extended register).  */\n+        if (aarch64_rtx_arith_op_extract_p (op1, mode))\n+\t  {\n+\t    if (speed)\n+\t      *cost += extra_cost->alu.arith_shift;\n+\n+\t    *cost += rtx_cost (XEXP (XEXP (op1, 0), 0),\n+\t\t\t       (enum rtx_code) GET_CODE (op1),\n+\t\t\t       0, speed);\n+\t    return true;\n+\t  }\n+\n \trtx new_op1 = aarch64_strip_extend (op1);\n \n \t/* Cost this as an FMA-alike operation.  */\n@@ -5153,6 +5194,18 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t    return true;\n \t  }\n \n+\t/* Look for ADD (extended register).  */\n+        if (aarch64_rtx_arith_op_extract_p (op0, mode))\n+\t  {\n+\t    if (speed)\n+\t      *cost += extra_cost->alu.arith_shift;\n+\n+\t    *cost += rtx_cost (XEXP (XEXP (op0, 0), 0),\n+\t\t\t       (enum rtx_code) GET_CODE (op0),\n+\t\t\t       0, speed);\n+\t    return true;\n+\t  }\n+\n \t/* Strip any extend, leave shifts behind as we will\n \t   cost them through mult_cost.  */\n \tnew_op0 = aarch64_strip_extend (op0);\n@@ -5406,7 +5459,13 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \n     case ZERO_EXTRACT:\n     case SIGN_EXTRACT:\n-      *cost += rtx_cost (XEXP (x, 0), ZERO_EXTRACT, 0, speed);\n+      /* UBFX/SBFX.  */\n+      if (speed)\n+\t*cost += extra_cost->alu.bfx;\n+\n+      /* We can trust that the immediates used will be correct (there\n+\t are no by-register forms), so we need only cost op0.  */\n+      *cost += rtx_cost (XEXP (x, 0), (enum rtx_code) code, 0, speed);\n       return true;\n \n     case MULT:\n@@ -9112,7 +9171,7 @@ aarch64_modes_tieable_p (enum machine_mode mode1, enum machine_mode mode2)\n #define TARGET_RETURN_IN_MSB aarch64_return_in_msb\n \n #undef TARGET_RTX_COSTS\n-#define TARGET_RTX_COSTS aarch64_rtx_costs\n+#define TARGET_RTX_COSTS aarch64_rtx_costs_wrapper\n \n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE aarch64_sched_issue_rate"}]}