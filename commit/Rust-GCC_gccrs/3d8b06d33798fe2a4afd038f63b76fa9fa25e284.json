{"sha": "3d8b06d33798fe2a4afd038f63b76fa9fa25e284", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q4YjA2ZDMzNzk4ZmUyYTRhZmQwMzhmNjNiNzZmYTlmYTI1ZTI4NA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2014-11-17T09:56:43Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2014-11-17T09:56:43Z"}, "message": "Add more comments to some gimple accessors\n\ngcc/ChangeLog:\n\n\t* gimple.h (gimple_set_visited, gimple_visited_p)\n\t(gimple_set_plf, gimple_plf, gimple_set_uid, gimple_uid): Add more\n\tcomments to these accessors.\n\nSigned-off-by: Dodji Seketeli <dodji@redhat.com>\n\nFrom-SVN: r217653", "tree": {"sha": "41afab1c9badd8bd7b19511b0aa1cf4348fa8a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41afab1c9badd8bd7b19511b0aa1cf4348fa8a6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d8b06d33798fe2a4afd038f63b76fa9fa25e284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8b06d33798fe2a4afd038f63b76fa9fa25e284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8b06d33798fe2a4afd038f63b76fa9fa25e284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8b06d33798fe2a4afd038f63b76fa9fa25e284/comments", "author": null, "committer": null, "parents": [{"sha": "b9296a00e8528e7cd7a2539952884d2c81bf5383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9296a00e8528e7cd7a2539952884d2c81bf5383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9296a00e8528e7cd7a2539952884d2c81bf5383"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "660838cde7827a5abe42b95ca3bcc0690343bb06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8b06d33798fe2a4afd038f63b76fa9fa25e284/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8b06d33798fe2a4afd038f63b76fa9fa25e284/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d8b06d33798fe2a4afd038f63b76fa9fa25e284", "patch": "@@ -1,3 +1,9 @@\n+2014-11-17  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* gimple.h (gimple_set_visited, gimple_visited_p)\n+\t(gimple_set_plf, gimple_plf, gimple_set_uid, gimple_uid): Add more\n+\tcomments to these accessors.\n+\n 2014-11-17  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr-log.c (avr_log_set_avr_log) [TARGET_ALL_DEBUG]:"}, {"sha": "27bb7b6b24df9e93125fd018d4a4b846421e83a6", "filename": "gcc/gimple.h", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8b06d33798fe2a4afd038f63b76fa9fa25e284/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8b06d33798fe2a4afd038f63b76fa9fa25e284/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=3d8b06d33798fe2a4afd038f63b76fa9fa25e284", "patch": "@@ -1585,7 +1585,17 @@ gimple_set_no_warning (gimple stmt, bool no_warning)\n   stmt->no_warning = (unsigned) no_warning;\n }\n \n-/* Set the visited status on statement STMT to VISITED_P.  */\n+/* Set the visited status on statement STMT to VISITED_P.\n+\n+   Please note that this 'visited' property of the gimple statement is\n+   supposed to be undefined at pass boundaries.  This means that a\n+   given pass should not assume it contains any useful value when the\n+   pass starts and thus can set it to any value it sees fit.\n+\n+   You can learn more about the visited property of the gimple\n+   statement by reading the comments of the 'visited' data member of\n+   struct gimple statement_base.\n+ */\n \n static inline void\n gimple_set_visited (gimple stmt, bool visited_p)\n@@ -1594,7 +1604,16 @@ gimple_set_visited (gimple stmt, bool visited_p)\n }\n \n \n-/* Return the visited status for statement STMT.  */\n+/* Return the visited status for statement STMT.\n+\n+   Please note that this 'visited' property of the gimple statement is\n+   supposed to be undefined at pass boundaries.  This means that a\n+   given pass should not assume it contains any useful value when the\n+   pass starts and thus can set it to any value it sees fit.\n+\n+   You can learn more about the visited property of the gimple\n+   statement by reading the comments of the 'visited' data member of\n+   struct gimple statement_base.  */\n \n static inline bool\n gimple_visited_p (gimple stmt)\n@@ -1603,7 +1622,15 @@ gimple_visited_p (gimple stmt)\n }\n \n \n-/* Set pass local flag PLF on statement STMT to VAL_P.  */\n+/* Set pass local flag PLF on statement STMT to VAL_P.\n+\n+   Please note that this PLF property of the gimple statement is\n+   supposed to be undefined at pass boundaries.  This means that a\n+   given pass should not assume it contains any useful value when the\n+   pass starts and thus can set it to any value it sees fit.\n+\n+   You can learn more about the PLF property by reading the comment of\n+   the 'plf' data member of struct gimple_statement_structure.  */\n \n static inline void\n gimple_set_plf (gimple stmt, enum plf_mask plf, bool val_p)\n@@ -1615,7 +1642,15 @@ gimple_set_plf (gimple stmt, enum plf_mask plf, bool val_p)\n }\n \n \n-/* Return the value of pass local flag PLF on statement STMT.  */\n+/* Return the value of pass local flag PLF on statement STMT.\n+\n+   Please note that this 'plf' property of the gimple statement is\n+   supposed to be undefined at pass boundaries.  This means that a\n+   given pass should not assume it contains any useful value when the\n+   pass starts and thus can set it to any value it sees fit.\n+\n+   You can learn more about the plf property by reading the comment of\n+   the 'plf' data member of struct gimple_statement_structure.  */\n \n static inline unsigned int\n gimple_plf (gimple stmt, enum plf_mask plf)\n@@ -1624,7 +1659,12 @@ gimple_plf (gimple stmt, enum plf_mask plf)\n }\n \n \n-/* Set the UID of statement.  */\n+/* Set the UID of statement.\n+\n+   Please note that this UID property is supposed to be undefined at\n+   pass boundaries.  This means that a given pass should not assume it\n+   contains any useful value when the pass starts and thus can set it\n+   to any value it sees fit.  */\n \n static inline void\n gimple_set_uid (gimple g, unsigned uid)\n@@ -1633,7 +1673,12 @@ gimple_set_uid (gimple g, unsigned uid)\n }\n \n \n-/* Return the UID of statement.  */\n+/* Return the UID of statement.\n+\n+   Please note that this UID property is supposed to be undefined at\n+   pass boundaries.  This means that a given pass should not assume it\n+   contains any useful value when the pass starts and thus can set it\n+   to any value it sees fit.  */\n \n static inline unsigned\n gimple_uid (const_gimple g)"}]}