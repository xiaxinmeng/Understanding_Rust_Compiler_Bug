{"sha": "03a7dddbdb976cfbc51b5fd64a2fc993e0328398", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhN2RkZGJkYjk3NmNmYmM1MWI1ZmQ2NGEyZmM5OTNlMDMyODM5OA==", "commit": {"author": {"name": "Catherine Moore", "email": "clm@codesourcery.com", "date": "2013-03-25T13:53:53Z"}, "committer": {"name": "Catherine Moore", "email": "clm@gcc.gnu.org", "date": "2013-03-25T13:53:53Z"}, "message": "constraints.md (u, [...]): New constraints.\n\n2013-03-25  Catherine Moore  <clm@codesourcery.com>\n\n\t* config/mips/constraints.md (u, Udb7 Uead, Uean, Uesp, Uib3,\n\tUuw6, Usb4, ZS, ZT, ZU, ZV, ZW): New constraints.\n\t* config/mip/predicates.md (lwsp_swsp_operand,\n\tlw16_sw16_operand, lhu16_sh16_operand, lbu16_operand,\n\tsb16_operand, db4_operand, db7_operand, ib3_operand,\n\tsb4_operand, ub4_operand, uh4_operand, uw4_operand,\n\tuw5_operand, uw6_operand, addiur2_operand, addiusp_operand,\n\tandi16_operand): New predicates.\n\t* config/mips/mips.md (compression): New attribute.\n\t(enabled): New attribute.\n\t(length): Consider compression in computing length.\n\t(shift_compression): New code attribute.\n\t(*add<mode>3): New operands. Record compression.\n\t(sub<mode>3): Likewise.\n\t(one_cmpl<mode>2): Likewise.\n\t(*and<mode>3): Likewise.\n\t(*ior<mode>3): Likewise.\n\t(unnamed pattern for xor): Likewise.\n\t(*zero_extend<SHORT:mode><GPR:mode>2): Likewise.\n\t(*<optab><mode>3): Likewise.\n\t(*mov<mode>_internal: Likewise.\n\t* config/mips/mips-protos.h (mips_signed_immediate_p): New.\n\t(mips_unsigned_immediate_p): New.\n\t(umips_lwsp_swsp_address_p): New.\n\t(m16_based_address_p): New.\n\t* config/mips/mips-protos.h (mips_signed_immediate_p): New prototype.\n\t(mips_unsigned_immediate_p): New prototype.\n\t(lwsp_swsp_address_p): New prototype.\n\t(m16_based_address_p): New prototype.\n\t* config/mips/mips.c (mips_unsigned_immediate_p): New function.\n\t(mips_signed_immediate_p): New function.\n\t(m16_based_address_p): New function.\n\t(lwsp_swsp_address_p): New function.\n\t(mips_print_operand_punctuation): Recognize short delay slot insns\n\tfor microMIPS.add<mode>3\"\n\nFrom-SVN: r197042", "tree": {"sha": "a58356884d6e5da403cae2b4a8be4c4fa640b7d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a58356884d6e5da403cae2b4a8be4c4fa640b7d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03a7dddbdb976cfbc51b5fd64a2fc993e0328398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a7dddbdb976cfbc51b5fd64a2fc993e0328398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a7dddbdb976cfbc51b5fd64a2fc993e0328398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/comments", "author": {"login": "CatherineMoore", "id": 15636327, "node_id": "MDQ6VXNlcjE1NjM2MzI3", "avatar_url": "https://avatars.githubusercontent.com/u/15636327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CatherineMoore", "html_url": "https://github.com/CatherineMoore", "followers_url": "https://api.github.com/users/CatherineMoore/followers", "following_url": "https://api.github.com/users/CatherineMoore/following{/other_user}", "gists_url": "https://api.github.com/users/CatherineMoore/gists{/gist_id}", "starred_url": "https://api.github.com/users/CatherineMoore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CatherineMoore/subscriptions", "organizations_url": "https://api.github.com/users/CatherineMoore/orgs", "repos_url": "https://api.github.com/users/CatherineMoore/repos", "events_url": "https://api.github.com/users/CatherineMoore/events{/privacy}", "received_events_url": "https://api.github.com/users/CatherineMoore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf70554ed8b9e5b90c977f068b9f848c85c89228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf70554ed8b9e5b90c977f068b9f848c85c89228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf70554ed8b9e5b90c977f068b9f848c85c89228"}], "stats": {"total": 354, "additions": 318, "deletions": 36}, "files": [{"sha": "c211bea081e3bd3341e9dc148cdafc9ffb187b82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03a7dddbdb976cfbc51b5fd64a2fc993e0328398", "patch": "@@ -1,3 +1,41 @@\n+2013-03-25  Catherine Moore  <clm@codesourcery.com>\n+\n+\t* config/mips/constraints.md (u, Udb7 Uead, Uean, Uesp, Uib3,\n+\tUuw6, Usb4, ZS, ZT, ZU, ZV, ZW): New constraints.\n+\t* config/mip/predicates.md (lwsp_swsp_operand,\n+\tlw16_sw16_operand, lhu16_sh16_operand, lbu16_operand,\n+\tsb16_operand, db4_operand, db7_operand, ib3_operand,\n+\tsb4_operand, ub4_operand, uh4_operand, uw4_operand,\n+\tuw5_operand, uw6_operand, addiur2_operand, addiusp_operand,\n+\tandi16_operand): New predicates.\n+\t* config/mips/mips.md (compression): New attribute.\n+\t(enabled): New attribute.\n+\t(length): Consider compression in computing length.\n+\t(shift_compression): New code attribute.\n+\t(*add<mode>3): New operands. Record compression.\n+\t(sub<mode>3): Likewise.\n+\t(one_cmpl<mode>2): Likewise.\n+\t(*and<mode>3): Likewise.\n+\t(*ior<mode>3): Likewise.\n+\t(unnamed pattern for xor): Likewise.\n+\t(*zero_extend<SHORT:mode><GPR:mode>2): Likewise.\n+\t(*<optab><mode>3): Likewise.\n+\t(*mov<mode>_internal: Likewise.\n+\t* config/mips/mips-protos.h (mips_signed_immediate_p): New.\n+\t(mips_unsigned_immediate_p): New.\n+\t(umips_lwsp_swsp_address_p): New.\n+\t(m16_based_address_p): New.\n+\t* config/mips/mips-protos.h (mips_signed_immediate_p): New prototype.\n+\t(mips_unsigned_immediate_p): New prototype.\n+\t(lwsp_swsp_address_p): New prototype.\n+\t(m16_based_address_p): New prototype.\n+\t* config/mips/mips.c (mips_unsigned_immediate_p): New function.\n+\t(mips_signed_immediate_p): New function.\n+\t(m16_based_address_p): New function.\n+\t(lwsp_swsp_address_p): New function.\n+\t(mips_print_operand_punctuation): Recognize short delay slot insns\n+\tfor microMIPS.add<mode>3\"\n+\n 2013-03-25  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \tPR target/56720\n \t* config/arm/iterators.md (v_cmp_result): New mode attribute."}, {"sha": "e73c440e1f41b9efd3442382453ae7d348127e69", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=03a7dddbdb976cfbc51b5fd64a2fc993e0328398", "patch": "@@ -43,6 +43,9 @@\n (define_register_constraint \"b\" \"ALL_REGS\"\n   \"@internal\")\n \n+(define_register_constraint \"u\" \"M16_REGS\"\n+  \"@internal\")\n+\n ;; MIPS16 code always calls through a MIPS16 register; see mips_emit_call_insn\n ;; for details.\n (define_register_constraint \"c\" \"TARGET_MIPS16 ? M16_REGS\n@@ -170,6 +173,41 @@\n   (and (match_operand 0 \"call_insn_operand\")\n        (match_test \"CONSTANT_P (op)\")))\n \n+(define_constraint \"Udb7\"\n+  \"@internal\n+   A decremented unsigned constant of 7 bits.\"\n+  (match_operand 0 \"db7_operand\"))\n+\n+(define_constraint \"Uead\"\n+  \"@internal\n+   A microMIPS encoded ADDIUR2 immediate operand.\"\n+  (match_operand 0 \"addiur2_operand\"))\n+  \n+(define_constraint \"Uean\"\n+  \"@internal\n+   A microMIPS encoded ANDI operand.\"\n+  (match_operand 0 \"andi16_operand\"))\n+\n+(define_constraint \"Uesp\"\n+  \"@internal\n+   A microMIPS encoded ADDIUSP operand.\"\n+  (match_operand 0 \"addiusp_operand\"))\n+\n+(define_constraint \"Uib3\"\n+  \"@internal\n+   An unsigned, incremented constant of 3 bits.\"\n+  (match_operand 0 \"ib3_operand\"))\n+\n+(define_constraint \"Uuw6\"\n+  \"@internal\n+   An unsigned constant of 6 bits, shifted left two places.\"\n+  (match_operand 0 \"uw6_operand\"))\n+\n+(define_constraint \"Usb4\"\n+  \"@internal\n+   A signed constant of 4 bits.\"\n+  (match_operand 0 \"sb4_operand\"))\n+\n (define_memory_constraint \"W\"\n   \"@internal\n    A memory address based on a member of @code{BASE_REG_CLASS}.  This is\n@@ -257,3 +295,34 @@\n  \"@internal\n   An address valid for loading/storing register exclusive\"\n  (match_operand 0 \"mem_noofs_operand\"))\n+\n+(define_memory_constraint \"ZS\"\n+  \"@internal\n+   A microMIPS memory operand for use with the LWSP/SWSP insns.\"\n+  (and (match_code \"mem\")\n+       (match_operand 0 \"lwsp_swsp_operand\")))\n+\n+(define_memory_constraint \"ZT\"\n+  \"@internal\n+   A microMIPS memory operand for use with the LW16/SW16 insns.\"\n+  (and (match_code \"mem\")\n+       (match_operand 0 \"lw16_sw16_operand\")))\n+\n+(define_memory_constraint \"ZU\"\n+  \"@internal\n+   A microMIPS memory operand for use with the LHU16/SH16 insns.\"\n+  (and (match_code \"mem\")\n+       (match_operand 0 \"lhu16_sh16_operand\")))\n+\n+(define_memory_constraint \"ZV\"\n+  \"@internal\n+   A microMIPS memory operand for use with the SB16 insn.\"\n+  (and (match_code \"mem\")\n+       (match_operand 0 \"sb16_operand\")))\n+\n+(define_memory_constraint \"ZW\"\n+  \"@internal\n+   A microMIPS memory operand for use with the LBU16 insn.\"\n+  (and (match_code \"mem\")\n+       (match_operand 0 \"lbu16_operand\")))\n+"}, {"sha": "3aaf69a7804edc100b0d7ad5f56bff72de806cd5", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=03a7dddbdb976cfbc51b5fd64a2fc993e0328398", "patch": "@@ -350,12 +350,17 @@ extern void mips_expand_vec_reduc (rtx, rtx, rtx (*)(rtx, rtx, rtx));\n extern void mips_expand_vec_minmax (rtx, rtx, rtx,\n \t\t\t\t    rtx (*) (rtx, rtx, rtx), bool);\n \n+extern bool mips_signed_immediate_p (unsigned HOST_WIDE_INT, int, int);\n+extern bool mips_unsigned_immediate_p (unsigned HOST_WIDE_INT, int, int);\n extern const char *umips_output_save_restore (bool, rtx);\n extern bool umips_save_restore_pattern_p (bool, rtx);\n extern bool umips_load_store_pair_p (bool, rtx *);\n extern void umips_output_load_store_pair (bool, rtx *);\n extern bool umips_movep_target_p (rtx, rtx);\n extern bool umips_12bit_offset_address_p (rtx, enum machine_mode);\n+extern bool lwsp_swsp_address_p (rtx, enum machine_mode);\n+extern bool m16_based_address_p (rtx, enum machine_mode,\n+\t\t\t         int (*)(rtx_def*, machine_mode)); \n extern rtx mips_expand_thread_pointer (rtx);\n \n extern bool mips_eh_uses (unsigned int);"}, {"sha": "4957a150078ac7f1706ff6bdf438d93a432cb6fb", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=03a7dddbdb976cfbc51b5fd64a2fc993e0328398", "patch": "@@ -2377,6 +2377,55 @@ mips_address_insns (rtx x, enum machine_mode mode, bool might_split_p)\n   return 0;\n }\n \n+/* Return true if X fits within an unsigned field of BITS bits that is\n+   shifted left SHIFT bits before being used.  */\n+\n+bool\n+mips_unsigned_immediate_p (unsigned HOST_WIDE_INT x, int bits, int shift = 0)\n+{\n+  return (x & ((1 << shift) - 1)) == 0 && x < ((unsigned) 1 << (shift + bits));\n+}\n+\n+/* Return true if X fits within a signed field of BITS bits that is\n+   shifted left SHIFT bits before being used.  */\n+\n+bool\n+mips_signed_immediate_p (unsigned HOST_WIDE_INT x, int bits, int shift = 0)\n+{\n+  x += 1 << (bits + shift - 1);\n+  return mips_unsigned_immediate_p (x, bits, shift);\n+}\n+\n+/* Return true if X is legitimate for accessing values of mode MODE,\n+   if it is based on a MIPS16 register, and if the offset satisfies\n+   OFFSET_PREDICATE.  */\n+\n+bool\n+m16_based_address_p (rtx x, enum machine_mode mode,\n+\t\t     insn_operand_predicate_fn offset_predicate)\n+{\n+  struct mips_address_info addr;\n+\n+  return (mips_classify_address (&addr, x, mode, false)\n+\t  && addr.type == ADDRESS_REG\n+\t  && M16_REG_P (REGNO (addr.reg))\n+\t  && offset_predicate (addr.offset, mode));\n+}\n+\n+/* Return true if X is a legitimate address that conforms to the requirements\n+   for a microMIPS LWSP or SWSP insn.  */\n+\n+bool\n+lwsp_swsp_address_p (rtx x, enum machine_mode mode)\n+{\n+  struct mips_address_info addr;\n+\n+  return (mips_classify_address (&addr, x, mode, false)\n+\t  && addr.type == ADDRESS_REG\n+\t  && REGNO (addr.reg) == STACK_POINTER_REGNUM\n+\t  && uw5_operand (addr.offset, mode));\n+}\n+\n /* Return true if X is a legitimate address with a 12-bit offset.\n    MODE is the mode of the value being accessed.  */\n \n@@ -8009,9 +8058,10 @@ mips_print_operand_punctuation (FILE *file, int ch)\n       break;\n \n     case '!':\n-      /* When final_sequence is 0, the delay slot will be a nop.  We can\n-\t a 16-bit delay slot for microMIPS.  */\n-      if (final_sequence == 0)\n+      /* If the delay slot instruction is short, then use the\n+\t compact version.  */\n+      if (final_sequence == 0\n+\t  || get_attr_length (XVECEXP (final_sequence, 0, 1)) == 2)\n \tputc ('s', file);\n       break;\n "}, {"sha": "2f629107a57006a5e66b46ee70178216ee0547e4", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 70, "deletions": 33, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=03a7dddbdb976cfbc51b5fd64a2fc993e0328398", "patch": "@@ -412,12 +412,27 @@\n \t\t(const_string \"yes\")\n \t\t(const_string \"no\")))\n \n+(define_attr \"compression\" \"none,all,micromips\"\n+  (const_string \"none\"))\n+\n+(define_attr \"enabled\" \"no,yes\"\n+  (if_then_else (ior (eq_attr \"compression\" \"all,none\")\n+\t\t     (and (eq_attr \"compression\" \"micromips\")\n+\t                  (match_test \"TARGET_MICROMIPS\")))\n+\t        (const_string \"yes\")\n+\t        (const_string \"no\")))\n+  \n ;; Length of instruction in bytes.\n (define_attr \"length\" \"\"\n    (cond [(and (eq_attr \"extended_mips16\" \"yes\")\n \t       (match_test \"TARGET_MIPS16\"))\n \t  (const_int 8)\n \n+\t  (and (eq_attr \"compression\" \"micromips,all\")\n+\t       (eq_attr \"dword_mode\" \"no\")\n+\t       (match_test \"TARGET_MICROMIPS\"))\n+\t  (const_int 2)\n+\n \t  ;; Direct microMIPS branch instructions have a range of\n \t  ;; [-0x10000,0xfffe], otherwise the range is [-0x20000,0x1fffc].\n \t  ;; If a branch is outside this range, we have a choice of two\n@@ -964,6 +979,10 @@\n \t\t\t\t  (xor \"xori\")\n \t\t\t\t  (and \"andi\")])\n \n+(define_code_attr shift_compression [(ashift \"micromips\")\n+\t\t\t\t     (lshiftrt \"micromips\")\n+\t\t\t\t     (ashiftrt \"none\")])\n+\n ;; <fcond> is the c.cond.fmt condition associated with a particular code.\n (define_code_attr fcond [(unordered \"un\")\n \t\t\t (uneq \"ueq\")\n@@ -1131,14 +1150,19 @@\n   \"\")\n \n (define_insn \"*add<mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n-\t(plus:GPR (match_operand:GPR 1 \"register_operand\" \"d,d\")\n-\t\t  (match_operand:GPR 2 \"arith_operand\" \"d,Q\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=!u,d,!u,!u,!ks,!d,d\")\n+\t(plus:GPR (match_operand:GPR 1 \"register_operand\" \"!u,d,!u,!ks,!ks,0,d\")\n+\t\t  (match_operand:GPR 2 \"arith_operand\" \"!u,d,Uead,Uuw6,Uesp,Usb4,Q\")))]\n   \"!TARGET_MIPS16\"\n-  \"@\n-    <d>addu\\t%0,%1,%2\n-    <d>addiu\\t%0,%1,%2\"\n+{\n+  if (which_alternative == 0 \n+      || which_alternative == 1)\n+    return \"<d>addu\\t%0,%1,%2\";\n+  else\n+    return \"<d>addiu\\t%0,%1,%2\";\n+}\n   [(set_attr \"alu_type\" \"add\")\n+   (set_attr \"compression\" \"micromips,*,micromips,micromips,micromips,micromips,*\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*add<mode>3_mips16\"\n@@ -1347,12 +1371,13 @@\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n (define_insn \"sub<mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(minus:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t   (match_operand:GPR 2 \"register_operand\" \"d\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=!u,d\")\n+\t(minus:GPR (match_operand:GPR 1 \"register_operand\" \"!u,d\")\n+\t\t   (match_operand:GPR 2 \"register_operand\" \"!u,d\")))]\n   \"\"\n   \"<d>subu\\t%0,%1,%2\"\n   [(set_attr \"alu_type\" \"sub\")\n+   (set_attr \"compression\" \"micromips,*\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*subsi3_extended\"\n@@ -2828,8 +2853,8 @@\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n (define_insn \"one_cmpl<mode>2\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(not:GPR (match_operand:GPR 1 \"register_operand\" \"d\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=!u,d\")\n+\t(not:GPR (match_operand:GPR 1 \"register_operand\" \"!u,d\")))]\n   \"\"\n {\n   if (TARGET_MIPS16)\n@@ -2838,6 +2863,7 @@\n     return \"nor\\t%0,%.,%1\";\n }\n   [(set_attr \"alu_type\" \"not\")\n+   (set_attr \"compression\" \"micromips,*\")\n    (set_attr \"mode\" \"<MODE>\")])\n \f\n ;;\n@@ -2878,9 +2904,9 @@\n ;;  register =op1                      x\n \n (define_insn \"*and<mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d,d,d,d,d,d\")\n-\t(and:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"o,o,W,d,d,d,d\")\n-\t\t (match_operand:GPR 2 \"and_operand\" \"Yb,Yh,Yw,K,Yx,Yw,d\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d,d,!u,d,d,d,!u,d\")\n+\t(and:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"o,o,W,!u,d,d,d,0,d\")\n+\t\t (match_operand:GPR 2 \"and_operand\" \"Yb,Yh,Yw,Uean,K,Yx,Yw,!u,d\")))]\n   \"!TARGET_MIPS16 && and_operands_ok (<MODE>mode, operands[1], operands[2])\"\n {\n   int len;\n@@ -2897,20 +2923,23 @@\n       operands[1] = gen_lowpart (SImode, operands[1]);\n       return \"lwu\\t%0,%1\";\n     case 3:\n-      return \"andi\\t%0,%1,%x2\";\n     case 4:\n+      return \"andi\\t%0,%1,%x2\";\n+    case 5:\n       len = low_bitmask_len (<MODE>mode, INTVAL (operands[2]));\n       operands[2] = GEN_INT (len);\n       return \"<d>ext\\t%0,%1,0,%2\";\n-    case 5:\n-      return \"#\";\n     case 6:\n+      return \"#\";\n+    case 7:\n+    case 8:\n       return \"and\\t%0,%1,%2\";\n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"move_type\" \"load,load,load,andi,ext_ins,shift_shift,logical\")\n+  [(set_attr \"move_type\" \"load,load,load,andi,andi,ext_ins,shift_shift,logical,logical\")\n+   (set_attr \"compression\" \"*,*,*,micromips,*,*,*,micromips,*\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*and<mode>3_mips16\"\n@@ -2952,14 +2981,16 @@\n })\n \n (define_insn \"*ior<mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n-\t(ior:GPR (match_operand:GPR 1 \"register_operand\" \"%d,d\")\n-\t\t (match_operand:GPR 2 \"uns_arith_operand\" \"d,K\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=!u,d,d\")\n+\t(ior:GPR (match_operand:GPR 1 \"register_operand\" \"%0,d,d\")\n+\t\t (match_operand:GPR 2 \"uns_arith_operand\" \"!u,d,K\")))]\n   \"!TARGET_MIPS16\"\n   \"@\n+   or\\t%0,%1,%2\n    or\\t%0,%1,%2\n    ori\\t%0,%1,%x2\"\n   [(set_attr \"alu_type\" \"or\")\n+   (set_attr \"compression\" \"micromips,*,*\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*ior<mode>3_mips16\"\n@@ -2979,14 +3010,16 @@\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n-\t(xor:GPR (match_operand:GPR 1 \"register_operand\" \"%d,d\")\n-\t\t (match_operand:GPR 2 \"uns_arith_operand\" \"d,K\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=!u,d,d\")\n+\t(xor:GPR (match_operand:GPR 1 \"register_operand\" \"%0,d,d\")\n+\t\t (match_operand:GPR 2 \"uns_arith_operand\" \"!u,d,K\")))]\n   \"!TARGET_MIPS16\"\n   \"@\n+   xor\\t%0,%1,%2\n    xor\\t%0,%1,%2\n    xori\\t%0,%1,%x2\"\n   [(set_attr \"alu_type\" \"xor\")\n+   (set_attr \"compression\" \"micromips,*,*\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"\"\n@@ -3162,14 +3195,16 @@\n })\n \n (define_insn \"*zero_extend<SHORT:mode><GPR:mode>2\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=!u,d,d\")\n         (zero_extend:GPR\n-\t     (match_operand:SHORT 1 \"nonimmediate_operand\" \"d,m\")))]\n+\t     (match_operand:SHORT 1 \"nonimmediate_operand\" \"!u,d,m\")))]\n   \"!TARGET_MIPS16\"\n   \"@\n+   andi\\t%0,%1,<SHORT:mask>\n    andi\\t%0,%1,<SHORT:mask>\n    l<SHORT:size>u\\t%0,%1\"\n-  [(set_attr \"move_type\" \"andi,load\")\n+  [(set_attr \"move_type\" \"andi,andi,load\")\n+   (set_attr \"compression\" \"micromips,*,*\")\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n \n (define_insn \"*zero_extend<SHORT:mode><GPR:mode>2_mips16e\"\n@@ -4362,13 +4397,14 @@\n ;; in FP registers (off by default, use -mdebugh to enable).\n \n (define_insn \"*mov<mode>_internal\"\n-  [(set (match_operand:IMOVE32 0 \"nonimmediate_operand\" \"=d,d,e,d,m,*f,*f,*d,*m,*d,*z,*a,*d,*B*C*D,*B*C*D,*d,*m\")\n-\t(match_operand:IMOVE32 1 \"move_operand\" \"d,Yd,Yf,m,dJ,*d*J,*m,*f,*f,*z,*d,*J*d,*a,*d,*m,*B*C*D,*B*C*D\"))]\n+  [(set (match_operand:IMOVE32 0 \"nonimmediate_operand\" \"=d,!u,!u,d,e,!u,!ks,d,ZS,ZT,m,*f,*f,*d,*m,*d,*z,*a,*d,*B*C*D,*B*C*D,*d,*m\")\n+\t(match_operand:IMOVE32 1 \"move_operand\" \"d,J,Udb7,Yd,Yf,ZT,ZS,m,!ks,!u,dJ,*d*J,*m,*f,*f,*z,*d,*J*d,*a,*d,*m,*B*C*D,*B*C*D\"))]\n   \"!TARGET_MIPS16\n    && (register_operand (operands[0], <MODE>mode)\n        || reg_or_0_operand (operands[1], <MODE>mode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,const,const,load,store,mtc,fpload,mfc,fpstore,mfc,mtc,mtlo,mflo,mtc,fpload,mfc,fpstore\")\n+  [(set_attr \"move_type\" \"move,move,const,const,const,load,load,load,store,store,store,mtc,fpload,mfc,fpstore,mfc,mtc,mtlo,mflo,mtc,fpload,mfc,fpstore\")\n+   (set_attr \"compression\" \"all,micromips,micromips,*,*,micromips,micromips,*,micromips,micromips,*,*,*,*,*,*,*,*,*,*,*,*,*\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*mov<mode>_mips16\"\n@@ -5225,9 +5261,9 @@\n })\n \n (define_insn \"*<optab><mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(any_shift:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t       (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=!u,d\")\n+\t(any_shift:GPR (match_operand:GPR 1 \"register_operand\" \"!u,d\")\n+\t\t       (match_operand:SI 2 \"arith_operand\" \"Uib3,dI\")))]\n   \"!TARGET_MIPS16\"\n {\n   if (CONST_INT_P (operands[2]))\n@@ -5237,6 +5273,7 @@\n   return \"<d><insn>\\t%0,%1,%2\";\n }\n   [(set_attr \"type\" \"shift\")\n+   (set_attr \"compression\" \"<shift_compression>,none\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<optab>si3_extend\""}, {"sha": "57996fa8960f1cb06e44b26d79ac3a89d065e96b", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a7dddbdb976cfbc51b5fd64a2fc993e0328398/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=03a7dddbdb976cfbc51b5fd64a2fc993e0328398", "patch": "@@ -122,6 +122,89 @@\n \t\t    ? M16_REG_P (REGNO (op))\n \t\t    : GP_REG_P (REGNO (op))\")))\n \n+(define_predicate \"lwsp_swsp_operand\"\n+  (and (match_code \"mem\")\n+       (match_test \"lwsp_swsp_address_p (XEXP (op, 0), mode)\")))\n+\n+(define_predicate \"lw16_sw16_operand\"\n+  (and (match_code \"mem\")\n+       (match_test \"m16_based_address_p (XEXP (op, 0), mode, uw4_operand)\")))\n+\n+(define_predicate \"lhu16_sh16_operand\"\n+  (and (match_code \"mem\")\n+       (match_test \"m16_based_address_p (XEXP (op, 0), mode, uh4_operand)\")))\n+\n+(define_predicate \"lbu16_operand\"\n+  (and (match_code \"mem\")\n+       (match_test \"m16_based_address_p (XEXP (op, 0), mode, db4_operand)\")))\n+\n+(define_predicate \"sb16_operand\"\n+  (and (match_code \"mem\")\n+       (match_test \"m16_based_address_p (XEXP (op, 0), mode, ub4_operand)\")))\n+\n+(define_predicate \"db4_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_unsigned_immediate_p (INTVAL (op) + 1, 4, 0)\")))\n+\n+(define_predicate \"db7_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_unsigned_immediate_p (INTVAL (op) + 1, 7, 0)\")))\n+\n+(define_predicate \"ib3_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_unsigned_immediate_p (INTVAL (op) - 1, 3, 0)\")))\n+\n+(define_predicate \"sb4_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_signed_immediate_p (INTVAL (op), 4, 0)\")))\n+\n+(define_predicate \"ub4_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_unsigned_immediate_p (INTVAL (op), 4, 0)\")))\n+\n+(define_predicate \"uh4_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_unsigned_immediate_p (INTVAL (op), 4, 1)\")))\n+\n+(define_predicate \"uw4_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_unsigned_immediate_p (INTVAL (op), 4, 2)\")))\n+\n+(define_predicate \"uw5_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_unsigned_immediate_p (INTVAL (op), 5, 2)\")))\n+\n+(define_predicate \"uw6_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_unsigned_immediate_p (INTVAL (op), 6, 2)\")))\n+\n+(define_predicate \"addiur2_operand\"\n+  (and (match_code \"const_int\")\n+\t(ior (match_test \"INTVAL (op) == -1\")\n+\t     (match_test \"INTVAL (op) == 1\")\n+\t     (match_test \"INTVAL (op) == 4\")\n+\t     (match_test \"INTVAL (op) == 8\")\n+\t     (match_test \"INTVAL (op) == 12\")\n+\t     (match_test \"INTVAL (op) == 16\")\n+\t     (match_test \"INTVAL (op) == 20\")\n+\t     (match_test \"INTVAL (op) == 24\"))))\n+\n+(define_predicate \"addiusp_operand\"\n+  (and (match_code \"const_int\")\n+       (ior (match_test \"(IN_RANGE (INTVAL (op), 2, 257))\")\n+\t    (match_test \"(IN_RANGE (INTVAL (op), -258, -3))\"))))\n+\n+(define_predicate \"andi16_operand\"\n+  (and (match_code \"const_int\")\n+\t(ior (match_test \"IN_RANGE (INTVAL (op), 1, 4)\")\n+\t     (match_test \"IN_RANGE (INTVAL (op), 7, 8)\")\n+\t     (match_test \"IN_RANGE (INTVAL (op), 15, 16)\")\n+\t     (match_test \"IN_RANGE (INTVAL (op), 31, 32)\")\n+\t     (match_test \"IN_RANGE (INTVAL (op), 63, 64)\")\n+\t     (match_test \"INTVAL (op) == 255\")\n+\t     (match_test \"INTVAL (op) == 32768\")\n+\t     (match_test \"INTVAL (op) == 65535\"))))\n+\n (define_predicate \"movep_src_register\"\n   (and (match_code \"reg\")\n        (ior (match_test (\"IN_RANGE (REGNO (op), 2, 3)\"))"}]}