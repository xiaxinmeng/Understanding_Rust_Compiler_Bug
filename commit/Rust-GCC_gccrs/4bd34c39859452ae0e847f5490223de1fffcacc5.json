{"sha": "4bd34c39859452ae0e847f5490223de1fffcacc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJkMzRjMzk4NTk0NTJhZTBlODQ3ZjU0OTAyMjNkZTFmZmZjYWNjNQ==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-04-13T01:42:39Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-04-13T01:42:39Z"}, "message": "objc-act.c: Remove all code ifdefed with the never-used macro OBJC_INT_SELECTORS.\n\n        * objc/objc-act.c: Remove all code ifdefed with the never-used\n        macro OBJC_INT_SELECTORS.\n        * config/d30v/d30v.h: Remove commented-out ref to OBJC_INT_SELECTORS.\n        * tm.texi: Remove doc for OBJC_INT_SELECTORS.\n\nFrom-SVN: r41317", "tree": {"sha": "aefcf9962c6ca0b4528c37ee40994731d3a38803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aefcf9962c6ca0b4528c37ee40994731d3a38803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bd34c39859452ae0e847f5490223de1fffcacc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd34c39859452ae0e847f5490223de1fffcacc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd34c39859452ae0e847f5490223de1fffcacc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd34c39859452ae0e847f5490223de1fffcacc5/comments", "author": null, "committer": null, "parents": [{"sha": "ee8fc32b175c476e21656b7a30d0768464d4cff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8fc32b175c476e21656b7a30d0768464d4cff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee8fc32b175c476e21656b7a30d0768464d4cff9"}], "stats": {"total": 53, "additions": 8, "deletions": 45}, "files": [{"sha": "f079d10abdae82eea7e9c097c0abf5a975f987b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd34c39859452ae0e847f5490223de1fffcacc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd34c39859452ae0e847f5490223de1fffcacc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bd34c39859452ae0e847f5490223de1fffcacc5", "patch": "@@ -1,3 +1,10 @@\n+2001-04-12  Stan Shebs  <shebs@apple.com>\n+\n+\t* objc/objc-act.c: Remove all code ifdefed with the never-used\n+\tmacro OBJC_INT_SELECTORS.\n+\t* config/d30v/d30v.h: Remove commented-out ref to OBJC_INT_SELECTORS.\n+\t* tm.texi: Remove doc for OBJC_INT_SELECTORS.\n+\n Thu Apr 12 18:13:37 2001  Rodney Brown  <RodneyBrown@mynd.com>\n \n \t* config/pa/quadlib.c: Add prototypes."}, {"sha": "1d150cfefb49ef1136f4ce29fbbfae75f7a62ef5", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd34c39859452ae0e847f5490223de1fffcacc5/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd34c39859452ae0e847f5490223de1fffcacc5/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=4bd34c39859452ae0e847f5490223de1fffcacc5", "patch": "@@ -1013,12 +1013,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    at run-time.  This is used in `cpp'.  */\n /* #define MAX_WCHAR_TYPE_SIZE */\n \n-/* Define this macro if the type of Objective C selectors should be `int'.\n-\n-   If this macro is not defined, then selectors should have the type `struct\n-   objc_selector *'.  */\n-/* #define OBJC_INT_SELECTORS */\n-\n /* Define this macro if the compiler can group all the selectors together into\n    a vector and use just one label at the beginning of the vector.  Otherwise,\n    the compiler must give each selector its own assembler label."}, {"sha": "75789bf3e5f9e3065387b674fcae75a6b0559d97", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd34c39859452ae0e847f5490223de1fffcacc5/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd34c39859452ae0e847f5490223de1fffcacc5/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=4bd34c39859452ae0e847f5490223de1fffcacc5", "patch": "@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n \n    code generation `options':\n \n-   - OBJC_INT_SELECTORS  */\n+   */\n \n #include \"config.h\"\n #include \"system.h\"\n@@ -1276,15 +1276,10 @@ synth_module_prologue ()\n \n   /* Declare type of selector-objects that represent an operation name.  */\n \n-#ifdef OBJC_INT_SELECTORS\n-  /* `unsigned int' */\n-  selector_type = unsigned_type_node;\n-#else\n   /* `struct objc_selector *' */\n   selector_type\n     = build_pointer_type (xref_tag (RECORD_TYPE,\n \t\t\t\t    get_identifier (TAG_SELECTOR)));\n-#endif /* not OBJC_INT_SELECTORS */\n \n   /* Forward declare type, or else the prototype for msgSendSuper will\n      complain.  */\n@@ -2807,18 +2802,10 @@ build_method_prototype_template ()\n   proto_record\n     = start_struct (RECORD_TYPE, get_identifier (UTAG_METHOD_PROTOTYPE));\n \n-#ifdef OBJC_INT_SELECTORS\n-  /* unsigned int _cmd; */\n-  decl_specs\n-    = tree_cons (NULL_TREE, ridpointers[(int) RID_UNSIGNED], NULL_TREE);\n-  decl_specs = tree_cons (NULL_TREE, ridpointers[(int) RID_INT], decl_specs);\n-  field_decl = get_identifier (\"_cmd\");\n-#else /* OBJC_INT_SELECTORS */\n   /* struct objc_selector *_cmd; */\n   decl_specs = tree_cons (NULL_TREE, xref_tag (RECORD_TYPE,\n \t\t          get_identifier (TAG_SELECTOR)), NULL_TREE);\n   field_decl = build1 (INDIRECT_REF, NULL_TREE, get_identifier (\"_cmd\"));\n-#endif /* OBJC_INT_SELECTORS */\n \n   field_decl\n     = grokfield (input_filename, lineno, field_decl, decl_specs, NULL_TREE);\n@@ -4047,20 +4034,12 @@ build_method_template ()\n \n   _SLT_record = start_struct (RECORD_TYPE, get_identifier (UTAG_METHOD));\n \n-#ifdef OBJC_INT_SELECTORS\n-  /* unsigned int _cmd; */\n-  decl_specs = tree_cons (NULL_TREE, ridpointers[(int) RID_UNSIGNED],\n-\t\t\t  NULL_TREE);\n-  decl_specs = tree_cons (NULL_TREE, ridpointers[(int) RID_INT], decl_specs);\n-  field_decl = get_identifier (\"_cmd\");\n-#else /* not OBJC_INT_SELECTORS */\n   /* struct objc_selector *_cmd; */\n   decl_specs = tree_cons (NULL_TREE,\n \t\t\t  xref_tag (RECORD_TYPE,\n \t\t\t\t    get_identifier (TAG_SELECTOR)),\n \t\t\t  NULL_TREE);\n   field_decl = build1 (INDIRECT_REF, NULL_TREE, get_identifier (\"_cmd\"));\n-#endif /* not OBJC_INT_SELECTORS */\n \n   field_decl = grokfield (input_filename, lineno, field_decl,\n \t\t\t  decl_specs, NULL_TREE);\n@@ -6559,13 +6538,11 @@ encode_pointer (type, curtype, format)\n \t      obstack_1grow (&util_obstack, '#');\n \t      return;\n \t    }\n-#ifndef OBJC_INT_SELECTORS\n \t  else if (strcmp (name, TAG_SELECTOR) == 0) /* ':' */\n \t    {\n \t      obstack_1grow (&util_obstack, ':');\n \t      return;\n \t    }\n-#endif /* OBJC_INT_SELECTORS */\n \t}\n     }\n   else if (TREE_CODE (pointer_to) == INTEGER_TYPE\n@@ -6981,20 +6958,13 @@ start_method_def (method)\n \t\t\t\t    build1 (INDIRECT_REF, NULL_TREE, self_id)),\n \t\t   build_tree_list (unused_list, NULL_TREE)));\n \n-#ifdef OBJC_INT_SELECTORS\n-  decl_specs = build_tree_list (NULL_TREE, ridpointers[(int) RID_UNSIGNED]);\n-  decl_specs = tree_cons (NULL_TREE, ridpointers[(int) RID_INT], decl_specs);\n-  push_parm_decl (build_tree_list (build_tree_list (decl_specs, ucmd_id),\n-\t\t\t\t   build_tree_list (unused_list, NULL_TREE)));\n-#else /* not OBJC_INT_SELECTORS */\n   decl_specs = build_tree_list (NULL_TREE,\n \t\t\t\txref_tag (RECORD_TYPE,\n \t\t\t\t\t  get_identifier (TAG_SELECTOR)));\n   push_parm_decl (build_tree_list\n \t\t  (build_tree_list (decl_specs,\n \t\t\t\t    build1 (INDIRECT_REF, NULL_TREE, ucmd_id)),\n \t\t   build_tree_list (unused_list, NULL_TREE)));\n-#endif /* not OBJC_INT_SELECTORS */\n \n   /* Generate argument declarations if a keyword_decl.  */\n   if (METHOD_SEL_ARGS (method))"}, {"sha": "51dd01ec53d2c6ccb99739474836c7b8408b5f5c", "filename": "gcc/tm.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd34c39859452ae0e847f5490223de1fffcacc5/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd34c39859452ae0e847f5490223de1fffcacc5/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=4bd34c39859452ae0e847f5490223de1fffcacc5", "patch": "@@ -1435,14 +1435,6 @@ If you don't define this macro, the default is the first of\n unsigned int\"} that has as much precision as @code{long long unsigned\n int}.\n \n-@findex OBJC_INT_SELECTORS\n-@item OBJC_INT_SELECTORS\n-Define this macro if the type of Objective C selectors should be\n-@code{int}.\n-\n-If this macro is not defined, then selectors should have the type\n-@code{struct objc_selector *}.\n-\n @findex OBJC_SELECTORS_WITHOUT_LABELS\n @item OBJC_SELECTORS_WITHOUT_LABELS\n Define this macro if the compiler can group all the selectors together"}]}