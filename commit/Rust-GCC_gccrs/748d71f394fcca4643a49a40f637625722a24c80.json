{"sha": "748d71f394fcca4643a49a40f637625722a24c80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ4ZDcxZjM5NGZjY2E0NjQzYTQ5YTQwZjYzNzYyNTcyMmEyNGM4MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-08-10T20:52:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-08-10T20:52:06Z"}, "message": "Workaround binutils PR14342\n\n\n\tWorkaround binutils PR14342\n\t* tree-profile.c (init_ic_make_global_vars): Add LTO path.\n\t(gimple_init_edge_profiler): Likewise.\n\t(gimple_gen_ic_func_profiler): Likewise.\n\n\t* Makefile.in: Add _gcov_indirect_call_profiler_v2 symbol.\n\t* libgcov.c (L_gcov_indirect_call_profiler): Restore original API.\n\t(L_gcov_indirect_call_profiler_v2): New.\n\nFrom-SVN: r201648", "tree": {"sha": "ce0c2d8826c16bf6bbfa6330c50f8f407eb91463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce0c2d8826c16bf6bbfa6330c50f8f407eb91463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/748d71f394fcca4643a49a40f637625722a24c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748d71f394fcca4643a49a40f637625722a24c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/748d71f394fcca4643a49a40f637625722a24c80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748d71f394fcca4643a49a40f637625722a24c80/comments", "author": null, "committer": null, "parents": [{"sha": "5979aa5497dcfc6b77ad2a10117ad96b6086ffb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5979aa5497dcfc6b77ad2a10117ad96b6086ffb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5979aa5497dcfc6b77ad2a10117ad96b6086ffb7"}], "stats": {"total": 163, "additions": 137, "deletions": 26}, "files": [{"sha": "728ea482cc85ebf8f927a68b4f77ba2a705370ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d71f394fcca4643a49a40f637625722a24c80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d71f394fcca4643a49a40f637625722a24c80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=748d71f394fcca4643a49a40f637625722a24c80", "patch": "@@ -1,3 +1,10 @@\n+2013-08-10  Jan Hubicka  <jh@suse.cz>\n+\n+\tWorkaround binutils PR14342\n+\t* tree-profile.c (init_ic_make_global_vars): Add LTO path.\n+\t(gimple_init_edge_profiler): Likewise.\n+\t(gimple_gen_ic_func_profiler): Likewise.\n+\n 2013-08-09  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_create_edge_1): Clear speculative flag."}, {"sha": "c99253718392be786069a9626f1fa506a44a2c12", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 86, "deletions": 23, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d71f394fcca4643a49a40f637625722a24c80/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d71f394fcca4643a49a40f637625722a24c80/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=748d71f394fcca4643a49a40f637625722a24c80", "patch": "@@ -67,13 +67,28 @@ init_ic_make_global_vars (void)\n \n   ptr_void = build_pointer_type (void_type_node);\n \n-  ic_void_ptr_var\n-    = build_decl (UNKNOWN_LOCATION, VAR_DECL,\n-\t\t  get_identifier (\"__gcov_indirect_call_callee\"),\n-\t\t  ptr_void);\n+  /* Workaround for binutils bug 14342.  Once it is fixed, remove lto path.  */\n+  if (flag_lto)\n+    {\n+      ic_void_ptr_var\n+\t= build_decl (UNKNOWN_LOCATION, VAR_DECL,\n+\t\t      get_identifier (\"__gcov_indirect_call_callee_ltopriv\"),\n+\t\t      ptr_void);\n+      TREE_PUBLIC (ic_void_ptr_var) = 1;\n+      DECL_COMMON (ic_void_ptr_var) = 1;\n+      DECL_VISIBILITY (ic_void_ptr_var) = VISIBILITY_HIDDEN;\n+      DECL_VISIBILITY_SPECIFIED (ic_void_ptr_var) = true;\n+    }\n+  else\n+    {\n+      ic_void_ptr_var\n+\t= build_decl (UNKNOWN_LOCATION, VAR_DECL,\n+\t\t      get_identifier (\"__gcov_indirect_call_callee\"),\n+\t\t      ptr_void);\n+      TREE_PUBLIC (ic_void_ptr_var) = 1;\n+      DECL_EXTERNAL (ic_void_ptr_var) = 1;\n+    }\n   TREE_STATIC (ic_void_ptr_var) = 1;\n-  TREE_PUBLIC (ic_void_ptr_var) = 1;\n-  DECL_EXTERNAL (ic_void_ptr_var) = 1;\n   DECL_ARTIFICIAL (ic_void_ptr_var) = 1;\n   DECL_INITIAL (ic_void_ptr_var) = NULL;\n   if (targetm.have_tls)\n@@ -83,13 +98,28 @@ init_ic_make_global_vars (void)\n   varpool_finalize_decl (ic_void_ptr_var);\n \n   gcov_type_ptr = build_pointer_type (get_gcov_type ());\n-  ic_gcov_type_ptr_var\n-    = build_decl (UNKNOWN_LOCATION, VAR_DECL,\n-\t\t  get_identifier (\"__gcov_indirect_call_counters\"),\n-\t\t  gcov_type_ptr);\n+  /* Workaround for binutils bug 14342.  Once it is fixed, remove lto path.  */\n+  if (flag_lto)\n+    {\n+      ic_gcov_type_ptr_var\n+\t= build_decl (UNKNOWN_LOCATION, VAR_DECL,\n+\t\t      get_identifier (\"__gcov_indirect_call_counters_ltopriv\"),\n+\t\t      gcov_type_ptr);\n+      TREE_PUBLIC (ic_gcov_type_ptr_var) = 1;\n+      DECL_COMMON (ic_gcov_type_ptr_var) = 1;\n+      DECL_VISIBILITY (ic_gcov_type_ptr_var) = VISIBILITY_HIDDEN;\n+      DECL_VISIBILITY_SPECIFIED (ic_gcov_type_ptr_var) = true;\n+    }\n+  else\n+    {\n+      ic_gcov_type_ptr_var\n+\t= build_decl (UNKNOWN_LOCATION, VAR_DECL,\n+\t\t      get_identifier (\"__gcov_indirect_call_counters\"),\n+\t\t      gcov_type_ptr);\n+      TREE_PUBLIC (ic_gcov_type_ptr_var) = 1;\n+      DECL_EXTERNAL (ic_gcov_type_ptr_var) = 1;\n+    }\n   TREE_STATIC (ic_gcov_type_ptr_var) = 1;\n-  TREE_PUBLIC (ic_gcov_type_ptr_var) = 1;\n-  DECL_EXTERNAL (ic_gcov_type_ptr_var) = 1;\n   DECL_ARTIFICIAL (ic_gcov_type_ptr_var) = 1;\n   DECL_INITIAL (ic_gcov_type_ptr_var) = NULL;\n   if (targetm.have_tls)\n@@ -157,15 +187,31 @@ gimple_init_edge_profiler (void)\n \n       init_ic_make_global_vars ();\n \n-      /* void (*) (gcov_type, void *)  */\n-      ic_profiler_fn_type\n-\t       = build_function_type_list (void_type_node,\n-\t\t\t\t\t  gcov_type_node,\n-\t\t\t\t\t  ptr_void,\n-\t\t\t\t\t  NULL_TREE);\n-      tree_indirect_call_profiler_fn\n-\t      = build_fn_decl (\"__gcov_indirect_call_profiler_v2\",\n-\t\t\t\t     ic_profiler_fn_type);\n+      /* Workaround for binutils bug 14342.  Once it is fixed, remove lto path.  */\n+      if (flag_lto)\n+        {\n+\t  /* void (*) (gcov_type, void *)  */\n+\t  ic_profiler_fn_type\n+\t\t   = build_function_type_list (void_type_node,\n+\t\t\t\t\t      gcov_type_ptr, gcov_type_node,\n+\t\t\t\t\t      ptr_void, ptr_void,\n+\t\t\t\t\t      NULL_TREE);\n+\t  tree_indirect_call_profiler_fn\n+\t\t  = build_fn_decl (\"__gcov_indirect_call_profiler\",\n+\t\t\t\t\t ic_profiler_fn_type);\n+        }\n+      else\n+        {\n+\t  /* void (*) (gcov_type, void *)  */\n+\t  ic_profiler_fn_type\n+\t\t   = build_function_type_list (void_type_node,\n+\t\t\t\t\t      gcov_type_node,\n+\t\t\t\t\t      ptr_void,\n+\t\t\t\t\t      NULL_TREE);\n+\t  tree_indirect_call_profiler_fn\n+\t\t  = build_fn_decl (\"__gcov_indirect_call_profiler_v2\",\n+\t\t\t\t\t ic_profiler_fn_type);\n+        }\n       TREE_NOTHROW (tree_indirect_call_profiler_fn) = 1;\n       DECL_ATTRIBUTES (tree_indirect_call_profiler_fn)\n \t= tree_cons (get_identifier (\"leaf\"), NULL,\n@@ -375,8 +421,25 @@ gimple_gen_ic_func_profiler (void)\n \t\t\t\t       true, GSI_SAME_STMT);\n   tree_uid = build_int_cst\n \t      (gcov_type_node, cgraph_get_node (current_function_decl)->profile_id);\n-  stmt1 = gimple_build_call (tree_indirect_call_profiler_fn, 2,\n-\t\t\t     tree_uid, cur_func);\n+  /* Workaround for binutils bug 14342.  Once it is fixed, remove lto path.  */\n+  if (flag_lto)\n+    {\n+      tree counter_ptr, ptr_var;\n+      counter_ptr = force_gimple_operand_gsi (&gsi, ic_gcov_type_ptr_var,\n+\t\t\t\t\t      true, NULL_TREE, true,\n+\t\t\t\t\t      GSI_SAME_STMT);\n+      ptr_var = force_gimple_operand_gsi (&gsi, ic_void_ptr_var,\n+\t\t\t\t\t  true, NULL_TREE, true,\n+\t\t\t\t\t  GSI_SAME_STMT);\n+\n+      stmt1 = gimple_build_call (tree_indirect_call_profiler_fn, 4,\n+\t\t\t\t counter_ptr, tree_uid, cur_func, ptr_var);\n+    }\n+  else\n+    {\n+      stmt1 = gimple_build_call (tree_indirect_call_profiler_fn, 2,\n+\t\t\t\t tree_uid, cur_func);\n+    }\n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n \n   /* Set __gcov_indirect_call_callee to 0,"}, {"sha": "438514fae4484dd2740f0813bd199fbc33669e5b", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d71f394fcca4643a49a40f637625722a24c80/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d71f394fcca4643a49a40f637625722a24c80/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=748d71f394fcca4643a49a40f637625722a24c80", "patch": "@@ -1,3 +1,10 @@\n+2013-08-10  Jan Hubicka  <jh@suse.cz>\n+\n+\tWork around binutils PR14342\n+\t* Makefile.in: Add _gcov_indirect_call_profiler_v2 symbol.\n+\t* libgcov.c (L_gcov_indirect_call_profiler): Restore original API.\n+\t(L_gcov_indirect_call_profiler_v2): New.\n+\n 2013-08-06  Jan Hubicka  <jh@suse.cz>\n \n \t* libgcov.c (__gcov_indirect_call_callee,"}, {"sha": "354fb72d9845eeae351af9d2757a1c22ee51d44f", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d71f394fcca4643a49a40f637625722a24c80/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d71f394fcca4643a49a40f637625722a24c80/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=748d71f394fcca4643a49a40f637625722a24c80", "patch": "@@ -858,7 +858,7 @@ LIBGCOV = _gcov _gcov_merge_add _gcov_merge_single _gcov_merge_delta \\\n     _gcov_execv _gcov_execvp _gcov_execve _gcov_reset _gcov_dump \\\n     _gcov_interval_profiler _gcov_pow2_profiler _gcov_one_value_profiler \\\n     _gcov_indirect_call_profiler _gcov_average_profiler _gcov_ior_profiler \\\n-    _gcov_merge_ior\n+    _gcov_merge_ior _gcov_indirect_call_profiler_v2\n \n libgcov-objects = $(patsubst %,%$(objext),$(LIBGCOV))\n "}, {"sha": "d1a989274f4a314e250aa530856319a453957f8f", "filename": "libgcc/libgcov.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d71f394fcca4643a49a40f637625722a24c80/libgcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d71f394fcca4643a49a40f637625722a24c80/libgcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.c?ref=748d71f394fcca4643a49a40f637625722a24c80", "patch": "@@ -1120,6 +1120,42 @@ __gcov_one_value_profiler (gcov_type *counters, gcov_type value)\n #endif\n \n #ifdef L_gcov_indirect_call_profiler\n+/* This function exist only for workaround of binutils bug 14342.\n+   Once this compatibility hack is obsolette, it can be removed.  */\n+\n+/* By default, the C++ compiler will use function addresses in the\n+   vtable entries.  Setting TARGET_VTABLE_USES_DESCRIPTORS to nonzero\n+   tells the compiler to use function descriptors instead.  The value\n+   of this macro says how many words wide the descriptor is (normally 2),\n+   but it may be dependent on target flags.  Since we do not have access\n+   to the target flags here we just check to see if it is set and use\n+   that to set VTABLE_USES_DESCRIPTORS to 0 or 1.\n+\n+   It is assumed that the address of a function descriptor may be treated\n+   as a pointer to a function.  */\n+\n+#ifdef TARGET_VTABLE_USES_DESCRIPTORS\n+#define VTABLE_USES_DESCRIPTORS 1\n+#else\n+#define VTABLE_USES_DESCRIPTORS 0\n+#endif\n+\n+/* Tries to determine the most common value among its inputs. */\n+void\n+__gcov_indirect_call_profiler (gcov_type* counter, gcov_type value,\n+                               void* cur_func, void* callee_func)\n+{\n+  /* If the C++ virtual tables contain function descriptors then one\n+     function may have multiple descriptors and we need to dereference\n+     the descriptors to see if they point to the same function.  */\n+  if (cur_func == callee_func\n+      || (VTABLE_USES_DESCRIPTORS && callee_func\n+          && *(void **) cur_func == *(void **) callee_func))\n+    __gcov_one_value_profiler_body (counter, value);\n+}\n+\n+#endif\n+#ifdef L_gcov_indirect_call_profiler_v2\n \n /* These two variables are used to actually track caller and callee.  Keep\n    them in TLS memory so races are not common (they are written to often).\n@@ -1135,7 +1171,6 @@ __thread\n #endif\n gcov_type * __gcov_indirect_call_counters;\n \n-\n /* By default, the C++ compiler will use function addresses in the\n    vtable entries.  Setting TARGET_VTABLE_USES_DESCRIPTORS to nonzero\n    tells the compiler to use function descriptors instead.  The value\n@@ -1167,7 +1202,6 @@ __gcov_indirect_call_profiler_v2 (gcov_type value, void* cur_func)\n }\n #endif\n \n-\n #ifdef L_gcov_average_profiler\n /* Increase corresponding COUNTER by VALUE.  FIXME: Perhaps we want\n    to saturate up.  */"}]}