{"sha": "39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhMzljODUwNGE0MTg4ZjVmZWE2MzllMWMwZGRjOGNiNTdhNDI4MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-03-21T09:11:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-03-21T09:11:25Z"}, "message": "target-supports.exp (check_effective_target_nonpic): New procedure.\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_nonpic): New\n\tprocedure.\n\t* gcc.target/i386/20020616-1.c: Use an alternative to %ebx\n\twhen compiling PIC.\n\t* gcc.target/i386/asm-4.c: Require nonpic.\n\t* gcc.target/i386/cmov1.c: Likewise.\n\t* gcc.target/i386/mul.c: Likewise.\n\t* gcc.target/i386/pr21291.c: Require nonpic or ! ilp32.\n\t* gcc.target/i386/ssetype-1.c: Require nonpic.\n\t* gcc.target/i386/ssetype-3.c: Likewise.\n\t* gcc.target/i386/ssetype-5.c: Likewise.\n\nFrom-SVN: r123107", "tree": {"sha": "d58ec84bf1bdeb8d7d5b711c284bfb58697097f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d58ec84bf1bdeb8d7d5b711c284bfb58697097f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/comments", "author": null, "committer": null, "parents": [{"sha": "2a450639801b638f5b28d00b1ba0b560d8a2c271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a450639801b638f5b28d00b1ba0b560d8a2c271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a450639801b638f5b28d00b1ba0b560d8a2c271"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "656d05bd5ec45bcaeaa26ef93f9243db816df91d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "patch": "@@ -1,3 +1,17 @@\n+2007-03-21  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_nonpic): New\n+\tprocedure.\n+\t* gcc.target/i386/20020616-1.c: Use an alternative to %ebx\n+\twhen compiling PIC.\n+\t* gcc.target/i386/asm-4.c: Require nonpic.\n+\t* gcc.target/i386/cmov1.c: Likewise.\n+\t* gcc.target/i386/mul.c: Likewise.\n+\t* gcc.target/i386/pr21291.c: Require nonpic or ! ilp32.\n+\t* gcc.target/i386/ssetype-1.c: Require nonpic.\n+\t* gcc.target/i386/ssetype-3.c: Likewise.\n+\t* gcc.target/i386/ssetype-5.c: Likewise.\n+\n 2007-03-21  Richard Sandiford  <richard@codesourcery.com>\n \n \t* gcc.c-torture/execute/builtins/chk.h (LOCAL): Define."}, {"sha": "594677031bad23547f6ffaf3bf4fdb0189e7434c", "filename": "gcc/testsuite/gcc.target/i386/20020616-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020616-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020616-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020616-1.c?ref=39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "patch": "@@ -2,7 +2,13 @@\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-O2\" } */\n \n+#if !__PIC__\n register int k asm(\"%ebx\");\n+#elif __amd64\n+register int k asm(\"%r12\");\n+#else\n+register int k asm(\"%esi\");\n+#endif\n \n void __attribute__((noinline))\n foo()"}, {"sha": "7ca0c1b3c9498ec72bd5eaa3b75181b9e445e66a", "filename": "gcc/testsuite/gcc.target/i386/asm-4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-4.c?ref=39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "patch": "@@ -2,6 +2,8 @@\n    taken in C code, don't use alternate calling convention for local\n    functions on IA-32.  */\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* The asm in this test uses an absolute address.  */\n+/* { dg-require-effective-target nonpic } */\n /* { dg-options \"-O2\" } */\n \n extern void abort (void);"}, {"sha": "a20b21340ec345a55765438d92d3e6e93e2546c9", "filename": "gcc/testsuite/gcc.target/i386/cmov1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov1.c?ref=39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* This test checks for absolute memory operands.  */\n+/* { dg-require-effective-target nonpic } */\n /* { dg-options \"-O2 -march=k8\" } */\n /* { dg-final { scan-assembler \"sar\\[^\\\\n\\]*magic_namea\" } } */\n /* { dg-final { scan-assembler \"sar\\[^\\\\n\\]*magic_nameb\" } } */"}, {"sha": "d6e378d44dc47c6c2a3f027420d2ba6bdab71403", "filename": "gcc/testsuite/gcc.target/i386/mul.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmul.c?ref=39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* This test checks for absolute memory operands.  */\n+/* { dg-require-effective-target nonpic } */\n /* { dg-options \"-O2 -march=k8\" } */\n /* { dg-final { scan-assembler \"and\\[^\\\\n\\]*magic\" } } */\n "}, {"sha": "f7348bdf6e19761ba98650257e97348415866401", "filename": "gcc/testsuite/gcc.target/i386/pr21291.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr21291.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr21291.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr21291.c?ref=39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "patch": "@@ -1,4 +1,9 @@\n-/* { dg-do compile } */\n+/* The asm has 2 \"r\" in/out operands, 1 earlyclobber \"r\" output, 1 \"r\"\n+   input and 2 fixed \"r\" clobbers (eax and edx), so there are a total of\n+   6 registers that must not conflict.  Add to that the PIC register,\n+   the frame pointer, and the stack pointer, and we've run out of\n+   registers on 32-bit targets.  */\n+/* { dg-do compile { target { { ! ilp32 } || nonpic } } } */\n /* { dg-options \"-O\" } */\n \n typedef unsigned long bngdigit;"}, {"sha": "bd6dbbe9f0f3e4fe1855414d167e2726a46daeb1", "filename": "gcc/testsuite/gcc.target/i386/ssetype-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-1.c?ref=39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* This test checks for absolute memory operands.  */\n+/* { dg-require-effective-target nonpic } */\n /* { dg-options \"-O2 -msse2 -march=k8\" } */\n /* { dg-final { scan-assembler \"andpd\\[^\\\\n\\]*magic\" } } */\n /* { dg-final { scan-assembler \"andnpd\\[^\\\\n\\]*magic\" } } */"}, {"sha": "3799896c8a4a17a2a73eb04a4aa0c539a21750f4", "filename": "gcc/testsuite/gcc.target/i386/ssetype-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-3.c?ref=39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* This test checks for absolute memory operands.  */\n+/* { dg-require-effective-target nonpic } */\n /* { dg-options \"-O2 -msse2 -march=k8\" } */\n /* { dg-final { scan-assembler \"andps\\[^\\\\n\\]*magic\" } } */\n /* { dg-final { scan-assembler \"andnps\\[^\\\\n\\]*magic\" } } */"}, {"sha": "f9c257aa89845cf654c024a1dd8905700a22ba0d", "filename": "gcc/testsuite/gcc.target/i386/ssetype-5.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-5.c?ref=39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* This test checks for absolute memory operands.  */\n+/* { dg-require-effective-target nonpic } */\n /* { dg-options \"-O2 -msse2 -march=k8\" } */\n /* { dg-final { scan-assembler \"pand\\[^\\\\n\\]*magic\" } } */\n /* { dg-final { scan-assembler \"pandn\\[^\\\\n\\]*magic\" } } */"}, {"sha": "4e80b91abe5cb74c145bacc38041d1250abc49e8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a39c8504a4188f5fea639e1c0ddc8cb57a4281/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=39a39c8504a4188f5fea639e1c0ddc8cb57a4281", "patch": "@@ -527,6 +527,16 @@ proc check_effective_target_mpaired_single { } {\n     } \"-mpaired-single\"]\n }\n \n+# Return 1 if the current multilib does not generate PIC by default.\n+\n+proc check_effective_target_nonpic { } {\n+    return [check_no_compiler_messages nonpic assembly {\n+\t#if __PIC__\n+\t#error FOO\n+\t#endif\n+    }]\n+}\n+\n # Return 1 if the target does not use a status wrapper.\n \n proc check_effective_target_unwrapped { } {"}]}