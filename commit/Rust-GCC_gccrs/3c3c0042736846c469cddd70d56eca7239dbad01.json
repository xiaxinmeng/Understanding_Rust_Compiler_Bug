{"sha": "3c3c0042736846c469cddd70d56eca7239dbad01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MzYzAwNDI3MzY4NDZjNDY5Y2RkZDcwZDU2ZWNhNzIzOWRiYWQwMQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-04-21T07:31:59Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-03-23T15:11:52Z"}, "message": "testsuite/arm: Add arm_dsp_ok effective target and use it in arm/acle/dsp_arith.c\n\ngcc.target/arm/acle/dsp_arith.c uses DSP intrinsics, which arm_acle.h\ndefines only with __ARM_FEATURE_DSP, so make the test check for that\nproperty rather than arm_qbit_ok.\n\nHowever, the existing arm_dsp effective target only checks if DSP\nfeatures are supported with the current multilib rather than trying\n-march and -mfloat-abi options. Thus we introduce a similar effective\ntarget, arm_dsp_ok and associated dg-add-options.\n\nThis makes dsp_arith.c unsupported rather than failed when no option\ncombination is suitable, for instance when running the tests with\n-mcpu=cortex-m3.\n\n2021-03-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* doc/sourcebuild.texi (arm_dsp_ok, arm_dsp): Document.\n\n\tgcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_dsp_ok_nocache)\n\t(check_effective_target_arm_dsp_ok, add_options_for_arm_dsp): New.\n\t* gcc.target/arm/acle/dsp_arith.c: Use arm_dsp_ok effective target\n\tand add arm_dsp options.", "tree": {"sha": "f196ab1c1d052e4bb658319c9aa2181a9038d57a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f196ab1c1d052e4bb658319c9aa2181a9038d57a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c3c0042736846c469cddd70d56eca7239dbad01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3c0042736846c469cddd70d56eca7239dbad01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c3c0042736846c469cddd70d56eca7239dbad01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3c0042736846c469cddd70d56eca7239dbad01/comments", "author": null, "committer": null, "parents": [{"sha": "165bc67beb45f0f7e0d4f41347dab1649436f08a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165bc67beb45f0f7e0d4f41347dab1649436f08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165bc67beb45f0f7e0d4f41347dab1649436f08a"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "2bc362be4495d6cfe1ce0b25e3b8b76bcb4641b7", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3c0042736846c469cddd70d56eca7239dbad01/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3c0042736846c469cddd70d56eca7239dbad01/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=3c3c0042736846c469cddd70d56eca7239dbad01", "patch": "@@ -2044,6 +2044,12 @@ ARM Target supports options suitable for accessing the Q-bit manipulation\n intrinsics from @code{arm_acle.h}.\n Some multilibs may be incompatible with these options.\n \n+@item arm_dsp_ok\n+@anchor{arm_dsp_ok}\n+ARM Target supports options suitable for accessing the DSP intrinsics\n+from @code{arm_acle.h}.\n+Some multilibs may be incompatible with these options.\n+\n @item arm_softfp_ok\n @anchor{arm_softfp_ok}\n ARM target supports the @code{-mfloat-abi=softfp} option.\n@@ -2778,6 +2784,11 @@ Add options to enable generation of the @code{VFMAL} and @code{VFMSL}\n instructions, if this is supported by the target; see the\n @ref{arm_fp16fml_neon_ok} effective target keyword.\n \n+@item arm_dsp\n+Add options for ARM DSP intrinsics support, if this is supported by\n+the target; see the @ref{arm_dsp_ok,,arm_dsp_ok effective target\n+keyword}.\n+\n @item bind_pic_locally\n Add the target-specific flags needed to enable functions to bind\n locally when using pic/PIC passes in the testsuite."}, {"sha": "7bf458e8f8ddb04c83ae95ff8b7508dccd2427d0", "filename": "gcc/testsuite/gcc.target/arm/acle/dsp_arith.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3c0042736846c469cddd70d56eca7239dbad01/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fdsp_arith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3c0042736846c469cddd70d56eca7239dbad01/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fdsp_arith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fdsp_arith.c?ref=3c3c0042736846c469cddd70d56eca7239dbad01", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_qbit_ok } */\n-/* { dg-add-options arm_qbit  } */\n+/* { dg-require-effective-target arm_dsp_ok } */\n+/* { dg-add-options arm_dsp } */\n \n #include <arm_acle.h>\n "}, {"sha": "733b6c84518517fca0a8c88e0e7dbe46e59f07e2", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3c0042736846c469cddd70d56eca7239dbad01/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3c0042736846c469cddd70d56eca7239dbad01/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=3c3c0042736846c469cddd70d56eca7239dbad01", "patch": "@@ -4200,6 +4200,46 @@ proc add_options_for_arm_qbit { flags } {\n     return \"$flags $et_arm_qbit_flags\"\n }\n \n+# Return 1 if this is an ARM target supporting the DSP intrinsics from\n+# arm_acle.h.  Some multilibs may be incompatible with these options.\n+# Also set et_arm_dsp_flags to the best options to add.\n+# arm_acle.h includes stdint.h which can cause trouble with incompatible\n+# -mfloat-abi= options.\n+# check_effective_target_arm_dsp also exists, which checks the current\n+# multilib, without trying other options.\n+\n+proc check_effective_target_arm_dsp_ok_nocache { } {\n+    global et_arm_dsp_flags\n+    set et_arm_dsp_flags \"\"\n+    foreach flags {\"\" \"-march=armv5te\" \"-march=armv5te -mfloat-abi=softfp\" \"-march=armv5te -mfloat-abi=hard\"} {\n+      if { [check_no_compiler_messages_nocache et_arm_dsp_ok object {\n+\t#include <arm_acle.h>\n+\tint dummy;\n+\t#ifndef __ARM_FEATURE_DSP\n+\t#error not DSP\n+\t#endif\n+      } \"$flags\"] } {\n+\tset et_arm_dsp_flags $flags\n+\treturn 1\n+      }\n+    }\n+\n+  return 0\n+}\n+\n+proc check_effective_target_arm_dsp_ok { } {\n+    return [check_cached_effective_target et_arm_dsp_flags \\\n+\t\tcheck_effective_target_arm_dsp_ok_nocache]\n+}\n+\n+proc add_options_for_arm_dsp { flags } {\n+    if { ! [check_effective_target_arm_dsp_ok] } {\n+\treturn \"$flags\"\n+    }\n+    global et_arm_dsp_flags\n+    return \"$flags $et_arm_dsp_flags\"\n+}\n+\n # Return 1 if this is an ARM target supporting -mfpu=neon without any\n # -mfloat-abi= option.  Useful in tests where add_options is not\n # supported (such as lto tests)."}]}