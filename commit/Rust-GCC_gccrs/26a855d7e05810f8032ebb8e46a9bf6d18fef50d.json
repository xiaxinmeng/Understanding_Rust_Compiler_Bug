{"sha": "26a855d7e05810f8032ebb8e46a9bf6d18fef50d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZhODU1ZDdlMDU4MTBmODAzMmViYjhlNDZhOWJmNmQxOGZlZjUwZA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2011-08-19T14:45:56Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2011-08-19T14:45:56Z"}, "message": "tree-ssa-math-opts.c (is_widening_mult_rhs_p): Add new argument 'type'.\n\n2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* tree-ssa-math-opts.c (is_widening_mult_rhs_p): Add new argument\n\t'type'.\n\tUse 'type' from caller, not inferred from 'rhs'.\n\tDon't reject non-conversion statements. Do return lhs in this case.\n\t(is_widening_mult_p): Add new argument 'type'.\n\tUse 'type' from caller, not inferred from 'stmt'.\n\tPass type to is_widening_mult_rhs_p.\n\t(convert_mult_to_widen): Pass type to is_widening_mult_p.\n\t(convert_plusminus_to_widen): Likewise.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/wmul-8.c: New file.\n\nFrom-SVN: r177907", "tree": {"sha": "48b8a65fb208d7fc977ce48a973b19157b1be24e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48b8a65fb208d7fc977ce48a973b19157b1be24e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26a855d7e05810f8032ebb8e46a9bf6d18fef50d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a855d7e05810f8032ebb8e46a9bf6d18fef50d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26a855d7e05810f8032ebb8e46a9bf6d18fef50d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a855d7e05810f8032ebb8e46a9bf6d18fef50d/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff63d754c170a5540fd48fa76428da3fc9e0c073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff63d754c170a5540fd48fa76428da3fc9e0c073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff63d754c170a5540fd48fa76428da3fc9e0c073"}], "stats": {"total": 85, "additions": 58, "deletions": 27}, "files": [{"sha": "5cb610cc8b7b00d916ecc715f2b1447538cdf8af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a855d7e05810f8032ebb8e46a9bf6d18fef50d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a855d7e05810f8032ebb8e46a9bf6d18fef50d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26a855d7e05810f8032ebb8e46a9bf6d18fef50d", "patch": "@@ -1,3 +1,15 @@\n+2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* tree-ssa-math-opts.c (is_widening_mult_rhs_p): Add new argument\n+\t'type'.\n+\tUse 'type' from caller, not inferred from 'rhs'.\n+\tDon't reject non-conversion statements. Do return lhs in this case.\n+\t(is_widening_mult_p): Add new argument 'type'.\n+\tUse 'type' from caller, not inferred from 'stmt'.\n+\tPass type to is_widening_mult_rhs_p.\n+\t(convert_mult_to_widen): Pass type to is_widening_mult_p.\n+\t(convert_plusminus_to_widen): Likewise.\n+\n 2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* tree-ssa-math-opts.c (is_widening_mult_p): Remove FIXME."}, {"sha": "6df6a52f609a89b9bd977204a4afe2d05416b92d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a855d7e05810f8032ebb8e46a9bf6d18fef50d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a855d7e05810f8032ebb8e46a9bf6d18fef50d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26a855d7e05810f8032ebb8e46a9bf6d18fef50d", "patch": "@@ -1,3 +1,7 @@\n+2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* gcc.target/arm/wmul-8.c: New file.\n+\n 2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* gcc.target/arm/wmul-7.c: New file."}, {"sha": "3de065d0a62aeb999a29cdf45a90f56508e943e5", "filename": "gcc/testsuite/gcc.target/arm/wmul-8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a855d7e05810f8032ebb8e46a9bf6d18fef50d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fwmul-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a855d7e05810f8032ebb8e46a9bf6d18fef50d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fwmul-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fwmul-8.c?ref=26a855d7e05810f8032ebb8e46a9bf6d18fef50d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target arm_dsp } */\n+\n+long long\n+foo (long long a, int *b, int *c)\n+{\n+  return a + *b * *c;\n+}\n+\n+/* { dg-final { scan-assembler \"smlal\" } } */"}, {"sha": "bcc02b6d58eaf040162b4953d1ca8dbd6c3f817e", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a855d7e05810f8032ebb8e46a9bf6d18fef50d/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a855d7e05810f8032ebb8e46a9bf6d18fef50d/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=26a855d7e05810f8032ebb8e46a9bf6d18fef50d", "patch": "@@ -1966,7 +1966,8 @@ struct gimple_opt_pass pass_optimize_bswap =\n  }\n };\n \n-/* Return true if RHS is a suitable operand for a widening multiplication.\n+/* Return true if RHS is a suitable operand for a widening multiplication,\n+   assuming a target type of TYPE.\n    There are two cases:\n \n      - RHS makes some value at least twice as wide.  Store that value\n@@ -1976,27 +1977,31 @@ struct gimple_opt_pass pass_optimize_bswap =\n        but leave *TYPE_OUT untouched.  */\n \n static bool\n-is_widening_mult_rhs_p (tree rhs, tree *type_out, tree *new_rhs_out)\n+is_widening_mult_rhs_p (tree type, tree rhs, tree *type_out,\n+\t\t\ttree *new_rhs_out)\n {\n   gimple stmt;\n-  tree type, type1, rhs1;\n+  tree type1, rhs1;\n   enum tree_code rhs_code;\n \n   if (TREE_CODE (rhs) == SSA_NAME)\n     {\n-      type = TREE_TYPE (rhs);\n       stmt = SSA_NAME_DEF_STMT (rhs);\n-      if (!is_gimple_assign (stmt))\n-\treturn false;\n-\n-      rhs_code = gimple_assign_rhs_code (stmt);\n-      if (TREE_CODE (type) == INTEGER_TYPE\n-\t  ? !CONVERT_EXPR_CODE_P (rhs_code)\n-\t  : rhs_code != FIXED_CONVERT_EXPR)\n-\treturn false;\n+      if (is_gimple_assign (stmt))\n+\t{\n+\t  rhs_code = gimple_assign_rhs_code (stmt);\n+\t  if (TREE_CODE (type) == INTEGER_TYPE\n+\t      ? !CONVERT_EXPR_CODE_P (rhs_code)\n+\t      : rhs_code != FIXED_CONVERT_EXPR)\n+\t    rhs1 = rhs;\n+\t  else\n+\t    rhs1 = gimple_assign_rhs1 (stmt);\n+\t}\n+      else\n+\trhs1 = rhs;\n \n-      rhs1 = gimple_assign_rhs1 (stmt);\n       type1 = TREE_TYPE (rhs1);\n+\n       if (TREE_CODE (type1) != TREE_CODE (type)\n \t  || TYPE_PRECISION (type1) * 2 > TYPE_PRECISION (type))\n \treturn false;\n@@ -2016,28 +2021,27 @@ is_widening_mult_rhs_p (tree rhs, tree *type_out, tree *new_rhs_out)\n   return false;\n }\n \n-/* Return true if STMT performs a widening multiplication.  If so,\n-   store the unwidened types of the operands in *TYPE1_OUT and *TYPE2_OUT\n-   respectively.  Also fill *RHS1_OUT and *RHS2_OUT such that converting\n-   those operands to types *TYPE1_OUT and *TYPE2_OUT would give the\n-   operands of the multiplication.  */\n+/* Return true if STMT performs a widening multiplication, assuming the\n+   output type is TYPE.  If so, store the unwidened types of the operands\n+   in *TYPE1_OUT and *TYPE2_OUT respectively.  Also fill *RHS1_OUT and\n+   *RHS2_OUT such that converting those operands to types *TYPE1_OUT\n+   and *TYPE2_OUT would give the operands of the multiplication.  */\n \n static bool\n-is_widening_mult_p (gimple stmt,\n+is_widening_mult_p (tree type, gimple stmt,\n \t\t    tree *type1_out, tree *rhs1_out,\n \t\t    tree *type2_out, tree *rhs2_out)\n {\n-  tree type;\n-\n-  type = TREE_TYPE (gimple_assign_lhs (stmt));\n   if (TREE_CODE (type) != INTEGER_TYPE\n       && TREE_CODE (type) != FIXED_POINT_TYPE)\n     return false;\n \n-  if (!is_widening_mult_rhs_p (gimple_assign_rhs1 (stmt), type1_out, rhs1_out))\n+  if (!is_widening_mult_rhs_p (type, gimple_assign_rhs1 (stmt), type1_out,\n+\t\t\t       rhs1_out))\n     return false;\n \n-  if (!is_widening_mult_rhs_p (gimple_assign_rhs2 (stmt), type2_out, rhs2_out))\n+  if (!is_widening_mult_rhs_p (type, gimple_assign_rhs2 (stmt), type2_out,\n+\t\t\t       rhs2_out))\n     return false;\n \n   if (*type1_out == NULL)\n@@ -2089,7 +2093,7 @@ convert_mult_to_widen (gimple stmt, gimple_stmt_iterator *gsi)\n   if (TREE_CODE (type) != INTEGER_TYPE)\n     return false;\n \n-  if (!is_widening_mult_p (stmt, &type1, &rhs1, &type2, &rhs2))\n+  if (!is_widening_mult_p (type, stmt, &type1, &rhs1, &type2, &rhs2))\n     return false;\n \n   to_mode = TYPE_MODE (type);\n@@ -2255,15 +2259,15 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple stmt,\n   if (code == PLUS_EXPR\n       && (rhs1_code == MULT_EXPR || rhs1_code == WIDEN_MULT_EXPR))\n     {\n-      if (!is_widening_mult_p (rhs1_stmt, &type1, &mult_rhs1,\n+      if (!is_widening_mult_p (type, rhs1_stmt, &type1, &mult_rhs1,\n \t\t\t       &type2, &mult_rhs2))\n \treturn false;\n       add_rhs = rhs2;\n       conv_stmt = conv1_stmt;\n     }\n   else if (rhs2_code == MULT_EXPR || rhs2_code == WIDEN_MULT_EXPR)\n     {\n-      if (!is_widening_mult_p (rhs2_stmt, &type1, &mult_rhs1,\n+      if (!is_widening_mult_p (type, rhs2_stmt, &type1, &mult_rhs1,\n \t\t\t       &type2, &mult_rhs2))\n \treturn false;\n       add_rhs = rhs1;"}]}