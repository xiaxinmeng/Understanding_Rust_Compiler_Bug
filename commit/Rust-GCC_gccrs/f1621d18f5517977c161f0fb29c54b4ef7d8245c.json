{"sha": "f1621d18f5517977c161f0fb29c54b4ef7d8245c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2MjFkMThmNTUxNzk3N2MxNjFmMGZiMjljNTRiNGVmN2Q4MjQ1Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-04T16:44:39Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-04T16:44:39Z"}, "message": "c++: Don't save parms in nested requirement [pr 94827]\n\nThis followup patch just removes some stashing that we never made use of.\n\n\t* constraint.cc (tsubst_nested_requirement): TYPE directly holds\n\tnotmalized requirement.\n\t(finish_nested_requirement): Don't stash current tpl parms into\n\tthe requirement.\n\t(diagnose_nested_requirement): TYPE directly holds notmalized\n\trequirement.", "tree": {"sha": "063269f3f738a4a6c42c0e07d4dcddf49e3b1a88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/063269f3f738a4a6c42c0e07d4dcddf49e3b1a88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1621d18f5517977c161f0fb29c54b4ef7d8245c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1621d18f5517977c161f0fb29c54b4ef7d8245c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1621d18f5517977c161f0fb29c54b4ef7d8245c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1621d18f5517977c161f0fb29c54b4ef7d8245c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05be85b649173b10d0bf10255eb15275c2dcf509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05be85b649173b10d0bf10255eb15275c2dcf509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05be85b649173b10d0bf10255eb15275c2dcf509"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "3d5f273477f3829321a94473948569219371fd84", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1621d18f5517977c161f0fb29c54b4ef7d8245c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1621d18f5517977c161f0fb29c54b4ef7d8245c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f1621d18f5517977c161f0fb29c54b4ef7d8245c", "patch": "@@ -1,3 +1,13 @@\n+2020-05-04  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/94827 -- don't save parms in nested requirement\n+\t* constraint.cc (tsubst_nested_requirement): TYPE directly holds\n+\tnotmalized requirement.\n+\t(finish_nested_requirement): Don't stash current tpl parms into\n+\tthe requirement.\n+\t(diagnose_nested_requirement): TYPE directly holds notmalized\n+\trequirement.\n+\n 2020-05-01  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/90880"}, {"sha": "4ad17f3b7d8cbb93762ed053fde6e9fc7777c097", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1621d18f5517977c161f0fb29c54b4ef7d8245c/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1621d18f5517977c161f0fb29c54b4ef7d8245c/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=f1621d18f5517977c161f0fb29c54b4ef7d8245c", "patch": "@@ -2010,7 +2010,7 @@ static tree\n tsubst_nested_requirement (tree t, tree args, subst_info info)\n {\n   /* Ensure that we're in an evaluation context prior to satisfaction.  */\n-  tree norm = TREE_VALUE (TREE_TYPE (t));\n+  tree norm = TREE_TYPE (t);\n   tree result = satisfy_constraint (norm, args, info);\n   if (result == error_mark_node && info.quiet ())\n     {\n@@ -2958,16 +2958,9 @@ finish_nested_requirement (location_t loc, tree expr)\n   /* Currently open template headers have dummy arg vectors, so don't\n      pass into normalization.  */\n   tree norm = normalize_constraint_expression (expr, NULL_TREE, false);\n-  tree args = current_template_parms\n-    ? template_parms_to_args (current_template_parms) : NULL_TREE;\n-\n-  /* Save the normalized constraint and complete set of normalization\n-     arguments with the requirement.  We keep the complete set of arguments\n-     around for re-normalization during diagnostics.  */\n-  tree info = build_tree_list (args, norm);\n \n   /* Build the constraint, saving its normalization as its type.  */\n-  tree r = build1 (NESTED_REQ, info, expr);\n+  tree r = build1 (NESTED_REQ, norm, expr);\n   SET_EXPR_LOCATION (r, loc);\n   return r;\n }\n@@ -3370,7 +3363,7 @@ diagnose_nested_requirement (tree req, tree args)\n {\n   /* Quietly check for satisfaction first. We can elaborate details\n      later if needed.  */\n-  tree norm = TREE_VALUE (TREE_TYPE (req));\n+  tree norm = TREE_TYPE (req);\n   subst_info info (tf_none, NULL_TREE);\n   tree result = satisfy_constraint (norm, args, info);\n   if (result == boolean_true_node)"}]}