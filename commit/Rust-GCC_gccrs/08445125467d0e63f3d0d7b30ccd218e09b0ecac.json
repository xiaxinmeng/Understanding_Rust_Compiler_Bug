{"sha": "08445125467d0e63f3d0d7b30ccd218e09b0ecac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0NDUxMjU0NjdkMGU2M2YzZDBkN2IzMGNjZDIxOGUwOWIwZWNhYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-21T16:06:31Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-21T16:06:31Z"}, "message": "* tree-cfg.c (thread_jumps): Speed up by using a worklist.\n\nFrom-SVN: r89381", "tree": {"sha": "516898685cab1732ef82fb735a8ba8f54a49646a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/516898685cab1732ef82fb735a8ba8f54a49646a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08445125467d0e63f3d0d7b30ccd218e09b0ecac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08445125467d0e63f3d0d7b30ccd218e09b0ecac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08445125467d0e63f3d0d7b30ccd218e09b0ecac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08445125467d0e63f3d0d7b30ccd218e09b0ecac/comments", "author": null, "committer": null, "parents": [{"sha": "072269d857591d9dc9e26b3b8f9cbbe7695fc24c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072269d857591d9dc9e26b3b8f9cbbe7695fc24c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/072269d857591d9dc9e26b3b8f9cbbe7695fc24c"}], "stats": {"total": 107, "additions": 89, "deletions": 18}, "files": [{"sha": "c46f5e43bfbbf9adf27bbd05bf825164a98539a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08445125467d0e63f3d0d7b30ccd218e09b0ecac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08445125467d0e63f3d0d7b30ccd218e09b0ecac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08445125467d0e63f3d0d7b30ccd218e09b0ecac", "patch": "@@ -1,3 +1,7 @@\n+2004-10-21  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-cfg.c (thread_jumps): Speed up by using a worklist.\n+\n 2004-10-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-cfg.c (thread_jumps): Move a part of it to ..."}, {"sha": "d58bb13d9dd7dcd62c0ac2240234a3b47e1b13ba", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 85, "deletions": 18, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08445125467d0e63f3d0d7b30ccd218e09b0ecac/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08445125467d0e63f3d0d7b30ccd218e09b0ecac/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=08445125467d0e63f3d0d7b30ccd218e09b0ecac", "patch": "@@ -3942,35 +3942,102 @@ thread_jumps (void)\n {\n   basic_block bb;\n   bool retval = false;\n-  bool rerun;\n+  int *worklist = xmalloc (sizeof (int) * last_basic_block);\n+  unsigned int size = 0;\n \n   FOR_EACH_BB (bb)\n-    bb_ann (bb)->forwardable = tree_forwarder_block_p (bb);\n+    {\n+      bb_ann (bb)->forwardable = tree_forwarder_block_p (bb);\n+      bb->flags &= ~BB_VISITED;\n+    }\n \n-  do\n+  /* Initialize WORKLIST by putting the indexes of non-forwarder\n+     blocks that immediately precede forwarder blocks because those\n+     are the ones that we know we can thread jumps from.  We use\n+     BB_VISITED to indicate that whether a given basic block is in\n+     WORKLIST or not, thereby avoiding duplicates in WORKLIST.  */\n+  FOR_EACH_BB (bb)\n     {\n-      rerun = false;\n-      FOR_EACH_BB (bb)\n+      edge_iterator ei;\n+      edge e;\n+\n+      /* We are not interested in finding non-forwarder blocks\n+\t directly.  We want to find non-forwarder blocks as\n+\t predecessors of a forwarder block.  */\n+      if (!bb_ann (bb)->forwardable)\n+\tcontinue;\n+\n+      /* Now we know BB is a forwarder block.  Visit each of its\n+\t incoming edges and add to WORKLIST all non-forwarder blocks\n+\t among BB's predecessors.  */\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n \t{\n-\t  /* Don't waste time on forwarders.  */\n-\t  if (bb_ann (bb)->forwardable)\n-\t    continue;\n+\t  /* We are not interested in threading jumps from a forwarder\n+\t     block.  */\n+\t  if (!bb_ann (e->src)->forwardable\n+\t      /* We don't want to visit ENTRY_BLOCK_PTR.  */\n+\t      && e->src->index >= 0\n+\t      /* We don't want to put a duplicate into WORKLIST.  */\n+\t      && (e->src->flags & BB_VISITED) == 0)\n+\t    {\n+\t      e->src->flags |= BB_VISITED;\n+\t      worklist[size] = e->src->index;\n+\t      size++;\n+\t    }\n+\t}\n+    }\n \n-\t  if (thread_jumps_from_bb (bb))\n+  /* Now let's drain WORKLIST.  */\n+  while (size > 0)\n+    {\n+      size--;\n+      bb = BASIC_BLOCK (worklist[size]);\n+\n+      /* Check if BB is NULL because BB may have been deleted.  This\n+\t could happen if BB is originally a non-forwarder block, later\n+\t becomes a forwarder block, and it is deleted when a jump is\n+\t threaded through it.  */\n+      if (!bb)\n+\tcontinue;\n+\n+      /* BB->INDEX is not longer in WORKLIST, so clear BB_VISITED.  */\n+      bb->flags &= ~BB_VISITED;\n+\n+      if (thread_jumps_from_bb (bb))\n+\t{\n+\t  retval = true;\n+\n+\t  if (tree_forwarder_block_p (bb))\n \t    {\n-\t      retval = true;\n+\t      edge_iterator ej;\n+\t      edge f;\n+\n+\t      bb_ann (bb)->forwardable = true;\n \n-\t      /* If we succeeded in threading a jump at BB, update the\n-\t\t forwardable mark as BB may have become a new\n-\t\t forwarder block.  This could happen if we have a\n-\t\t useless \"if\" statement whose two arms eventually\n-\t\t merge without any intervening statements.  */\n-\t      if (tree_forwarder_block_p (bb))\n-\t\tbb_ann (bb)->forwardable = rerun = true;\n+\t      /* Attempts to thread through BB may have been blocked\n+\t\t because BB was not a forwarder block before.  Now\n+\t\t that BB is a forwarder block, we should revisit BB's\n+\t\t predecessors.  */\n+\t      FOR_EACH_EDGE (f, ej, bb->preds)\n+\t\t{\n+\t\t  /* We are not interested in threading jumps from a\n+\t\t     forwarder block.  */\n+\t\t  if (!bb_ann (f->src)->forwardable\n+\t\t      /* We don't want to visit ENTRY_BLOCK_PTR.  */\n+\t\t      && f->src->index >= 0\n+\t\t      /* We don't want to put a duplicate into WORKLIST.  */\n+\t\t      && (f->src->flags & BB_VISITED) == 0)\n+\t\t    {\n+\t\t      f->src->flags |= BB_VISITED;\n+\t\t      worklist[size] = f->src->index;\n+\t\t      size++;\n+\t\t    }\n+\t\t}\n \t    }\n \t}\n     }\n-  while (rerun);\n+\n+  free (worklist);\n \n   return retval;\n }"}]}