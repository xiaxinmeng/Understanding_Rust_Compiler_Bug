{"sha": "115b4dd3a20f3ba9f61523c82013eb602c06a062", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE1YjRkZDNhMjBmM2JhOWY2MTUyM2M4MjAxM2ViNjAyYzA2YTA2Mg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@tofu.to.cygnus.com", "date": "1999-07-12T07:50:05Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1999-07-12T07:50:05Z"}, "message": "thumb.c (thumb_reorg): Call replace_symbols_in_block always unless NO_DEBUG is used.\n\nMon Jul 12 10:40:01 1999  Vladimir Makarov  <vmakarov@tofu.to.cygnus.com>\n\t* config/arm/thumb.c (thumb_reorg): Call replace_symbols_in_block\n \talways unless NO_DEBUG is used.  Compile this code\n \tunconditionally.\n\t(replace_symbols_in_block): Compile it unconditionally.\n\nFrom-SVN: r28063", "tree": {"sha": "9d53fa19e88b17b6dda5475be491bc81e59ec082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d53fa19e88b17b6dda5475be491bc81e59ec082"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/115b4dd3a20f3ba9f61523c82013eb602c06a062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/115b4dd3a20f3ba9f61523c82013eb602c06a062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/115b4dd3a20f3ba9f61523c82013eb602c06a062", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/115b4dd3a20f3ba9f61523c82013eb602c06a062/comments", "author": null, "committer": null, "parents": [{"sha": "d2382ec54a271990208365e22be4cd85c6aa38ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2382ec54a271990208365e22be4cd85c6aa38ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2382ec54a271990208365e22be4cd85c6aa38ca"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "95e80053583cf83f3a314559ca5de0d2c19e9523", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/115b4dd3a20f3ba9f61523c82013eb602c06a062/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/115b4dd3a20f3ba9f61523c82013eb602c06a062/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=115b4dd3a20f3ba9f61523c82013eb602c06a062", "patch": "@@ -1,3 +1,10 @@\n+Mon Jul 12 10:40:01 1999  Vladimir Makarov  <vmakarov@tofu.to.cygnus.com>\n+\n+\t* config/arm/thumb.c (thumb_reorg): Call replace_symbols_in_block\n+ \talways unless NO_DEBUG is used.  Compile this code\n+ \tunconditionally.\n+\t(replace_symbols_in_block): Compile it unconditionally.\n+\t\n Sun Jul 11 12:32:32 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* configure.in (i?86-*-elf*): New target."}, {"sha": "122cb2442b4edccac2ea6dd71c902d66bec5dceb", "filename": "gcc/config/arm/thumb.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/115b4dd3a20f3ba9f61523c82013eb602c06a062/gcc%2Fconfig%2Farm%2Fthumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/115b4dd3a20f3ba9f61523c82013eb602c06a062/gcc%2Fconfig%2Farm%2Fthumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb.c?ref=115b4dd3a20f3ba9f61523c82013eb602c06a062", "patch": "@@ -358,8 +358,6 @@ broken_move (insn)\n   return 0;\n }\n \n-#ifdef DBX_DEBUGGING_INFO\n-\n /* Recursively search through all of the blocks in a function\n    checking to see if any of the variables created in that\n    function match the RTX called 'orig'.  If they do then\n@@ -391,7 +389,6 @@ replace_symbols_in_block (tree block, rtx orig, rtx new)\n       replace_symbols_in_block (BLOCK_SUBBLOCKS (block), orig, new);\n     }\n }\n-#endif\n \n void\n thumb_reorg (first)\n@@ -452,24 +449,31 @@ thumb_reorg (first)\n \t\t  /* But it's still an ordinary insn */\n \t\t  PUT_CODE (newinsn, INSN);\n \n-#ifdef DBX_DEBUGGING_INFO\n-\t\t  /* If debugging information is going to be emitted then we must\n-\t\t     make sure that any refences to symbols which are removed by\n-\t\t     the above code are also removed in the descriptions of the\n-\t\t     function's variables.  Failure to do this means that the\n-\t\t     debugging information emitted could refer to symbols which\n-\t\t     are not emited by output_constant_pool() because\n-\t\t     mark_constant_pool() never sees them as being used.  */\n+\t\t  /* If debugging information is going to be emitted\n+\t\t     then we must make sure that any refences to\n+\t\t     symbols which are removed by the above code are\n+\t\t     also removed in the descriptions of the\n+\t\t     function's variables.  Failure to do this means\n+\t\t     that the debugging information emitted could\n+\t\t     refer to symbols which are not emited by\n+\t\t     output_constant_pool() because\n+\t\t     mark_constant_pool() never sees them as being\n+\t\t     used.  */\n \t\t  \n-\t\t  if (optimize > 0\t\t\t          /* These are the tests used in output_constant_pool() */\n-\t\t      && flag_expensive_optimizations             /*  to decide if the constant pool will be marked.  */\n-\t\t      && write_symbols == DBX_DEBUG               /* Only necessary if debugging info is being emitted.  */\n-\t\t      && GET_CODE (src) == MEM                    /* Only necessary for references to memory ... */\n-\t\t      && GET_CODE (XEXP (src, 0)) == SYMBOL_REF)  /*  ... whose address is given by a symbol.  */\n-\t\t    {\n-\t\t      replace_symbols_in_block (DECL_INITIAL (current_function_decl), src, newsrc);\n-\t\t    }\n-#endif\n+\t\t  /* These are the tests used in\n+\t\t     output_constant_pool() to decide if the constant\n+\t\t     pool will be marked.  Only necessary if debugging\n+\t\t     info is being emitted.  Only necessary for\n+\t\t     references to memory whose address is given by a\n+\t\t     symbol. */\n+\n+\t\t  if (optimize > 0\n+\t\t      && flag_expensive_optimizations\n+\t\t      && write_symbols != NO_DEBUG\n+\t\t      && GET_CODE (src) == MEM\n+\t\t      && GET_CODE (XEXP (src, 0)) == SYMBOL_REF)\n+\t\t    replace_symbols_in_block\n+\t\t      (DECL_INITIAL (current_function_decl), src, newsrc);\n \t\t  \n \t\t  /* Kill old insn */\n \t\t  delete_insn (scan);"}]}