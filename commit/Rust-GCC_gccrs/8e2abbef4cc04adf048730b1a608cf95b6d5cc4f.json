{"sha": "8e2abbef4cc04adf048730b1a608cf95b6d5cc4f", "node_id": "C_kwDOANBUbNoAKDhlMmFiYmVmNGNjMDRhZGYwNDg3MzBiMWE2MDhjZjk1YjZkNWNjNGY", "commit": {"author": {"name": "mxlol233", "email": "mxlol233@outlook.com", "date": "2023-01-11T15:24:07Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:17Z"}, "message": "gccrs: Add get_locus function for abstract class MetaItemInner.\n\nThis commit adds virtual function get_locus to base class MetaItemInner,\nwhich is helpful when we need to print  diagnostics on some sub-classes of\nMetaItemInner.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast.h: Add get_locus method.\n\t* ast/rust-expr.h: Likewise.\n\t* ast/rust-macro.h: Likewise.\n\nSigned-off-by: Xiao Ma <mxlol233@outlook.com>", "tree": {"sha": "5177d795ae3869d51033bf92cbd9baee9f72ef8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5177d795ae3869d51033bf92cbd9baee9f72ef8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e2abbef4cc04adf048730b1a608cf95b6d5cc4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2abbef4cc04adf048730b1a608cf95b6d5cc4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2abbef4cc04adf048730b1a608cf95b6d5cc4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2abbef4cc04adf048730b1a608cf95b6d5cc4f/comments", "author": {"login": "TuringKi", "id": 9394223, "node_id": "MDQ6VXNlcjkzOTQyMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9394223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TuringKi", "html_url": "https://github.com/TuringKi", "followers_url": "https://api.github.com/users/TuringKi/followers", "following_url": "https://api.github.com/users/TuringKi/following{/other_user}", "gists_url": "https://api.github.com/users/TuringKi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TuringKi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TuringKi/subscriptions", "organizations_url": "https://api.github.com/users/TuringKi/orgs", "repos_url": "https://api.github.com/users/TuringKi/repos", "events_url": "https://api.github.com/users/TuringKi/events{/privacy}", "received_events_url": "https://api.github.com/users/TuringKi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "364f4cd3072cb1fa99431fe001f03451059f075e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364f4cd3072cb1fa99431fe001f03451059f075e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/364f4cd3072cb1fa99431fe001f03451059f075e"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "d30e6d494f2d11fb5b5a19f360bb9ce010b28946", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2abbef4cc04adf048730b1a608cf95b6d5cc4f/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2abbef4cc04adf048730b1a608cf95b6d5cc4f/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=8e2abbef4cc04adf048730b1a608cf95b6d5cc4f", "patch": "@@ -630,6 +630,8 @@ class MetaItemInner\n \n   virtual ~MetaItemInner ();\n \n+  virtual Location get_locus () const = 0;\n+\n   virtual std::string as_string () const = 0;\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;"}, {"sha": "34bc6993ab646a7ec0aff91641e3165d58795ff6", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2abbef4cc04adf048730b1a608cf95b6d5cc4f/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2abbef4cc04adf048730b1a608cf95b6d5cc4f/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=8e2abbef4cc04adf048730b1a608cf95b6d5cc4f", "patch": "@@ -150,6 +150,8 @@ class MetaItemLitExpr : public MetaItemInner\n \n   std::string as_string () const override { return lit_expr.as_string (); }\n \n+  Location get_locus () const override { return lit_expr.get_locus (); }\n+\n   void accept_vis (ASTVisitor &vis) override;\n \n   bool check_cfg_predicate (const Session &session) const override;\n@@ -178,6 +180,12 @@ class MetaItemPathLit : public MetaItem\n     return path.as_string () + \" = \" + lit.as_string ();\n   }\n \n+  // There are two Locations in MetaItemPathLit (path and lit_expr),\n+  //  we have no idea use which of them, just simply return UNKNOWN_LOCATION\n+  //  now.\n+  // Maybe we will figure out when we really need the location in the future.\n+  Location get_locus () const override { return Location (UNKNOWN_LOCATION); }\n+\n   void accept_vis (ASTVisitor &vis) override;\n \n   bool check_cfg_predicate (const Session &session) const override;"}, {"sha": "4226c6919ff122d7d25b16125b75a15e49346ce6", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2abbef4cc04adf048730b1a608cf95b6d5cc4f/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2abbef4cc04adf048730b1a608cf95b6d5cc4f/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=8e2abbef4cc04adf048730b1a608cf95b6d5cc4f", "patch": "@@ -725,6 +725,8 @@ class MetaItemPath : public MetaItem\n     return path;\n   }\n \n+  Location get_locus () const override { return path.get_locus (); }\n+\n   bool check_cfg_predicate (const Session &session) const override;\n \n   Attribute to_attribute () const override;\n@@ -778,6 +780,8 @@ class MetaItemSeq : public MetaItem\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  Location get_locus () const override { return path.get_locus (); }\n+\n   bool check_cfg_predicate (const Session &session) const override;\n \n   Attribute to_attribute () const override;\n@@ -805,6 +809,8 @@ class MetaWord : public MetaItem\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  Location get_locus () const override { return ident_locus; }\n+\n   bool check_cfg_predicate (const Session &session) const override;\n \n   Attribute to_attribute () const override;\n@@ -847,6 +853,8 @@ class MetaNameValueStr : public MetaItem\n     return std::unique_ptr<MetaNameValueStr> (clone_meta_item_inner_impl ());\n   }\n \n+  Location get_locus () const override { return ident_locus; }\n+\n   bool check_cfg_predicate (const Session &session) const override;\n \n   Attribute to_attribute () const override;\n@@ -885,6 +893,8 @@ class MetaListPaths : public MetaItem\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  Location get_locus () const override { return ident_locus; }\n+\n   bool check_cfg_predicate (const Session &session) const override;\n \n   Attribute to_attribute () const override;\n@@ -919,6 +929,8 @@ class MetaListNameValueStr : public MetaItem\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  Location get_locus () const override { return ident_locus; }\n+\n   bool check_cfg_predicate (const Session &session) const override;\n \n   Attribute to_attribute () const override;"}]}