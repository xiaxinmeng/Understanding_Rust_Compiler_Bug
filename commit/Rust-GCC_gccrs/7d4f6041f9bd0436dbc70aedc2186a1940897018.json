{"sha": "7d4f6041f9bd0436dbc70aedc2186a1940897018", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0ZjYwNDFmOWJkMDQzNmRiYzcwYWVkYzIxODZhMTk0MDg5NzAxOA==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-05-18T15:52:25Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-05-18T15:52:25Z"}, "message": "collect2.texi: GNU CC -> GCC.\n\n\t* doc/collect2.texi: GNU CC -> GCC.\n\t* doc/headerdirs.texi: GNU CC -> GCC.\n\nFrom-SVN: r66933", "tree": {"sha": "7c8ee99cb86a9417df0efadbaf0fdffdd2e0911f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c8ee99cb86a9417df0efadbaf0fdffdd2e0911f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d4f6041f9bd0436dbc70aedc2186a1940897018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4f6041f9bd0436dbc70aedc2186a1940897018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4f6041f9bd0436dbc70aedc2186a1940897018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4f6041f9bd0436dbc70aedc2186a1940897018/comments", "author": null, "committer": null, "parents": [{"sha": "8b87bb9624085b39ceb1596aeeebdf6f297bea04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b87bb9624085b39ceb1596aeeebdf6f297bea04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b87bb9624085b39ceb1596aeeebdf6f297bea04"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "88d99c13f40f265987fa928124d630faa0611eb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4f6041f9bd0436dbc70aedc2186a1940897018/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4f6041f9bd0436dbc70aedc2186a1940897018/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d4f6041f9bd0436dbc70aedc2186a1940897018", "patch": "@@ -1,3 +1,8 @@\n+2003-05-18  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* doc/collect2.texi: GNU CC -> GCC.\n+\t* doc/headerdirs.texi: GNU CC -> GCC.\n+\n 2003-05-18  Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n \t* hashtable.h (struct ht_identifier): Add data member \"hash_value\"."}, {"sha": "c3498c5317c91b41f5c2168d306f67621ade634b", "filename": "gcc/doc/collect2.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4f6041f9bd0436dbc70aedc2186a1940897018/gcc%2Fdoc%2Fcollect2.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4f6041f9bd0436dbc70aedc2186a1940897018/gcc%2Fdoc%2Fcollect2.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcollect2.texi?ref=7d4f6041f9bd0436dbc70aedc2186a1940897018", "patch": "@@ -5,7 +5,7 @@\n @node Collect2\n @chapter @code{collect2}\n \n-GNU CC uses a utility called @code{collect2} on nearly all systems to arrange\n+GCC uses a utility called @code{collect2} on nearly all systems to arrange\n to call various initialization functions at start time.\n \n The program @code{collect2} works by linking the program once and"}, {"sha": "bc7f07f36be178f5c9893d21dab3edcfa66c7e7d", "filename": "gcc/doc/headerdirs.texi", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4f6041f9bd0436dbc70aedc2186a1940897018/gcc%2Fdoc%2Fheaderdirs.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4f6041f9bd0436dbc70aedc2186a1940897018/gcc%2Fdoc%2Fheaderdirs.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fheaderdirs.texi?ref=7d4f6041f9bd0436dbc70aedc2186a1940897018", "patch": "@@ -6,28 +6,27 @@\n @chapter Standard Header File Directories\n \n @code{GCC_INCLUDE_DIR} means the same thing for native and cross.  It is\n-where GNU CC stores its private include files, and also where GNU CC\n-stores the fixed include files.  A cross compiled GNU CC runs\n+where GCC stores its private include files, and also where GCC\n+stores the fixed include files.  A cross compiled GCC runs\n @code{fixincludes} on the header files in @file{$(tooldir)/include}.\n (If the cross compilation header files need to be fixed, they must be\n-installed before GNU CC is built.  If the cross compilation header files\n-are already suitable for ISO C and GNU CC, nothing special need be\n-done).\n+installed before GCC is built.  If the cross compilation header files\n+are already suitable for GCC, nothing special need be done).\n \n @code{GPLUSPLUS_INCLUDE_DIR} means the same thing for native and cross.  It\n is where @command{g++} looks first for header files.  The C++ library\n installs only target independent header files in that directory.\n \n-@code{LOCAL_INCLUDE_DIR} is used only by native compilers.  GNU CC\n+@code{LOCAL_INCLUDE_DIR} is used only by native compilers.  GCC\n doesn't install anything there.  It is normally\n @file{/usr/local/include}.  This is where local additions to a packaged\n system should place header files.\n \n-@code{CROSS_INCLUDE_DIR} is used only by cross compilers.  GNU CC\n+@code{CROSS_INCLUDE_DIR} is used only by cross compilers.  GCC\n doesn't install anything there.\n \n @code{TOOL_INCLUDE_DIR} is used for both native and cross compilers.  It\n-is the place for other packages to install header files that GNU CC will\n+is the place for other packages to install header files that GCC will\n use.  For a cross-compiler, this is the equivalent of\n @file{/usr/include}.  When you build a cross-compiler,\n @code{fixincludes} processes any header files in this directory."}]}