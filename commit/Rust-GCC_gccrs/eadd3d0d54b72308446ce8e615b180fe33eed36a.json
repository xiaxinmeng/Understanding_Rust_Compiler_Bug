{"sha": "eadd3d0d54b72308446ce8e615b180fe33eed36a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFkZDNkMGQ1NGI3MjMwODQ0NmNlOGU2MTViMTgwZmUzM2VlZDM2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-12-20T10:41:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-12-20T10:41:47Z"}, "message": "re PR c++/55619 (Chromium build fails with: error: memory input is not directly addressable)\n\n\tPR c++/55619\n\t* c-parser.c (c_parser_asm_operands): Remove CONVERT_P\n\targument, don't call default_function_array_conversion\n\tnor c_fully_fold here.\n\t(c_parser_asm_statement): Adjust callers.\n\t* c-typeck.c (build_asm_expr): Call c_fully_fold on inputs\n\tand outputs here, and call default_function_array_conversion\n\ton inputs that don't need to be addressable.\n\n\t* c-c++-common/pr55619.c: New test.\n\nFrom-SVN: r194631", "tree": {"sha": "915b2cceb4b2f29233795c10d764160a76b6b505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/915b2cceb4b2f29233795c10d764160a76b6b505"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eadd3d0d54b72308446ce8e615b180fe33eed36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eadd3d0d54b72308446ce8e615b180fe33eed36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eadd3d0d54b72308446ce8e615b180fe33eed36a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eadd3d0d54b72308446ce8e615b180fe33eed36a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ac13b9c058d6ff982b1fa6cf2fa1515a9692b5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac13b9c058d6ff982b1fa6cf2fa1515a9692b5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ac13b9c058d6ff982b1fa6cf2fa1515a9692b5e"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "8c90c5568ce454a3852050e999249ab71e2c6d9e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eadd3d0d54b72308446ce8e615b180fe33eed36a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eadd3d0d54b72308446ce8e615b180fe33eed36a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=eadd3d0d54b72308446ce8e615b180fe33eed36a", "patch": "@@ -1,3 +1,14 @@\n+2012-12-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/55619\n+\t* c-parser.c (c_parser_asm_operands): Remove CONVERT_P\n+\targument, don't call default_function_array_conversion\n+\tnor c_fully_fold here.\n+\t(c_parser_asm_statement): Adjust callers.\n+\t* c-typeck.c (build_asm_expr): Call c_fully_fold on inputs\n+\tand outputs here, and call default_function_array_conversion\n+\ton inputs that don't need to be addressable.\n+\n 2012-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/39464"}, {"sha": "ef5973fbb7df8a55eaace692595123cb2a0ec09f", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eadd3d0d54b72308446ce8e615b180fe33eed36a/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eadd3d0d54b72308446ce8e615b180fe33eed36a/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=eadd3d0d54b72308446ce8e615b180fe33eed36a", "patch": "@@ -1154,7 +1154,7 @@ static void c_parser_while_statement (c_parser *);\n static void c_parser_do_statement (c_parser *);\n static void c_parser_for_statement (c_parser *);\n static tree c_parser_asm_statement (c_parser *);\n-static tree c_parser_asm_operands (c_parser *, bool);\n+static tree c_parser_asm_operands (c_parser *);\n static tree c_parser_asm_goto_operands (c_parser *);\n static tree c_parser_asm_clobbers (c_parser *);\n static struct c_expr c_parser_expr_no_commas (c_parser *, struct c_expr *);\n@@ -5150,10 +5150,10 @@ c_parser_asm_statement (c_parser *parser)\n \t    /* For asm goto, we don't allow output operands, but reserve\n \t       the slot for a future extension that does allow them.  */\n \t    if (!is_goto)\n-\t      outputs = c_parser_asm_operands (parser, false);\n+\t      outputs = c_parser_asm_operands (parser);\n \t    break;\n \t  case 1:\n-\t    inputs = c_parser_asm_operands (parser, true);\n+\t    inputs = c_parser_asm_operands (parser);\n \t    break;\n \t  case 2:\n \t    clobbers = c_parser_asm_clobbers (parser);\n@@ -5191,9 +5191,7 @@ c_parser_asm_statement (c_parser *parser)\n   goto error;\n }\n \n-/* Parse asm operands, a GNU extension.  If CONVERT_P (for inputs but\n-   not outputs), apply the default conversion of functions and arrays\n-   to pointers.\n+/* Parse asm operands, a GNU extension.\n \n    asm-operands:\n      asm-operand\n@@ -5205,10 +5203,9 @@ c_parser_asm_statement (c_parser *parser)\n */\n \n static tree\n-c_parser_asm_operands (c_parser *parser, bool convert_p)\n+c_parser_asm_operands (c_parser *parser)\n {\n   tree list = NULL_TREE;\n-  location_t loc;\n   while (true)\n     {\n       tree name, str;\n@@ -5243,12 +5240,8 @@ c_parser_asm_operands (c_parser *parser, bool convert_p)\n \t  parser->lex_untranslated_string = true;\n \t  return NULL_TREE;\n \t}\n-      loc = c_parser_peek_token (parser)->location;\n       expr = c_parser_expression (parser);\n       mark_exp_read (expr.value);\n-      if (convert_p)\n-\texpr = default_function_array_conversion (loc, expr);\n-      expr.value = c_fully_fold (expr.value, false, NULL);\n       parser->lex_untranslated_string = true;\n       if (!c_parser_require (parser, CPP_CLOSE_PAREN, \"expected %<)%>\"))\n \t{"}, {"sha": "5f2df6797ad57ed2452782c9f72055d4eb3b582c", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eadd3d0d54b72308446ce8e615b180fe33eed36a/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eadd3d0d54b72308446ce8e615b180fe33eed36a/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=eadd3d0d54b72308446ce8e615b180fe33eed36a", "patch": "@@ -8502,6 +8502,8 @@ build_asm_expr (location_t loc, tree string, tree outputs, tree inputs,\n     {\n       tree output = TREE_VALUE (tail);\n \n+      output = c_fully_fold (output, false, NULL);\n+\n       /* ??? Really, this should not be here.  Users should be using a\n \t proper lvalue, dammit.  But there's a long history of using casts\n \t in the output operands.  In cases like longlong.h, this becomes a\n@@ -8559,16 +8561,27 @@ build_asm_expr (location_t loc, tree string, tree outputs, tree inputs,\n \t     mark it addressable.  */\n \t  if (!allows_reg && allows_mem)\n \t    {\n+\t      input = c_fully_fold (input, false, NULL);\n+\n \t      /* Strip the nops as we allow this case.  FIXME, this really\n \t\t should be rejected or made deprecated.  */\n \t      STRIP_NOPS (input);\n \t      if (!c_mark_addressable (input))\n \t\tinput = error_mark_node;\n \t    }\n-\t  else if (input != error_mark_node && VOID_TYPE_P (TREE_TYPE (input)))\n+\t  else\n \t    {\n-\t      error_at (loc, \"invalid use of void expression\");\n-\t      input = error_mark_node;\n+\t      struct c_expr expr;\n+\t      memset (&expr, 0, sizeof (expr));\n+\t      expr.value = input;\n+\t      expr = default_function_array_conversion (loc, expr);\n+\t      input = c_fully_fold (expr.value, false, NULL);\n+\n+\t      if (input != error_mark_node && VOID_TYPE_P (TREE_TYPE (input)))\n+\t\t{\n+\t\t  error_at (loc, \"invalid use of void expression\");\n+\t\t  input = error_mark_node;\n+\t\t}\n \t    }\n \t}\n       else"}, {"sha": "1b7c851df3838ce1741a44975ad5f39f385714af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eadd3d0d54b72308446ce8e615b180fe33eed36a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eadd3d0d54b72308446ce8e615b180fe33eed36a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eadd3d0d54b72308446ce8e615b180fe33eed36a", "patch": "@@ -1,3 +1,8 @@\n+2012-12-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/55619\n+\t* c-c++-common/pr55619.c: New test.\n+\n 2012-12-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/54818"}, {"sha": "f1b4e9c0023eb39a61d0ad950e6b2ec52dd9b779", "filename": "gcc/testsuite/c-c++-common/pr55619.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eadd3d0d54b72308446ce8e615b180fe33eed36a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr55619.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eadd3d0d54b72308446ce8e615b180fe33eed36a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr55619.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr55619.c?ref=eadd3d0d54b72308446ce8e615b180fe33eed36a", "patch": "@@ -0,0 +1,11 @@\n+/* PR c++/55619 */\n+/* { dg-do compile } */\n+\n+int y[4];\n+\n+void\n+f ()\n+{\n+  int x[4] = { 0, 1, 2, 3 };\n+  __asm volatile (\"\" : : \"m\" (x), \"m\" (y));\n+}"}]}