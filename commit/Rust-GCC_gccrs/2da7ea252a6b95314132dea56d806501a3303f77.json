{"sha": "2da7ea252a6b95314132dea56d806501a3303f77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRhN2VhMjUyYTZiOTUzMTQxMzJkZWE1NmQ4MDY1MDFhMzMwM2Y3Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-07-03T19:27:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-07-03T19:27:55Z"}, "message": "rc_string_base.h (__rc_string_base::_S_max_size): Adjust, take into account rounding in _M_create.\n\n2006-07-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/rc_string_base.h (__rc_string_base::_S_max_size):\n\tAdjust, take into account rounding in _M_create.\n\t(__rc_string_base::_M_create): Add early _S_max_size check.\n\nFrom-SVN: r115158", "tree": {"sha": "f7eadefd7127a170c113a912ec9e4098e8cf2979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7eadefd7127a170c113a912ec9e4098e8cf2979"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2da7ea252a6b95314132dea56d806501a3303f77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2da7ea252a6b95314132dea56d806501a3303f77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2da7ea252a6b95314132dea56d806501a3303f77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2da7ea252a6b95314132dea56d806501a3303f77/comments", "author": null, "committer": null, "parents": [{"sha": "7aa6ba766c8438ca61e08d85573256d00278cc50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa6ba766c8438ca61e08d85573256d00278cc50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa6ba766c8438ca61e08d85573256d00278cc50"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "5e4c01ef4dd1fa1c661f043c6790bec479bd2598", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da7ea252a6b95314132dea56d806501a3303f77/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da7ea252a6b95314132dea56d806501a3303f77/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2da7ea252a6b95314132dea56d806501a3303f77", "patch": "@@ -1,3 +1,9 @@\n+2006-07-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/rc_string_base.h (__rc_string_base::_S_max_size):\n+\tAdjust, take into account rounding in _M_create.\n+\t(__rc_string_base::_M_create): Add early _S_max_size check.\n+\n 2006-07-03  Ian Lance Taylor  <ian@airs.com>\n \t    Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "eec6f2dcf0d1a2c2e571e749f176c87861834577", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da7ea252a6b95314132dea56d806501a3303f77/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da7ea252a6b95314132dea56d806501a3303f77/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=2da7ea252a6b95314132dea56d806501a3303f77", "patch": "@@ -175,11 +175,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // with a terminating character and m _CharT elements, it'd\n       // look like this:\n       // npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)\n+      //        + sizeof(_Rep) - 1\n+      // (NB: last two terms for rounding reasons, see _M_create below)\n       // Solving for m:\n-      // m = ((npos - sizeof(_Rep)) / sizeof(_CharT)) - 1\n+      // m = ((npos - 2 * sizeof(_Rep) + 1) / sizeof(_CharT)) - 1\n       // In addition, this implementation halfs this amount.\n-      enum { _S_max_size = (((static_cast<size_type>(-1) - sizeof(_Rep))\n-\t\t\t     / sizeof(_CharT)) - 1) / 2 };\n+      enum { _S_max_size = (((static_cast<size_type>(-1) - 2 * sizeof(_Rep)\n+\t\t\t      + 1) / sizeof(_CharT)) - 1) / 2 };\n \n       // Data Member (private):\n       mutable typename _Util_Base::template _Alloc_hider<_Alloc>  _M_dataplus;\n@@ -386,7 +388,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // meet amortized linear time requirements of the library: see\n       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.\n       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)\n-\t__capacity = 2 * __old_capacity;\n+\t{\n+\t  __capacity = 2 * __old_capacity;\n+\t  // Never allocate a string bigger than _S_max_size.\n+\t  if (__capacity > size_type(_S_max_size))\n+\t    __capacity = size_type(_S_max_size);\n+\t}\n \n       // NB: Need an array of char_type[__capacity], plus a terminating\n       // null char_type() element, plus enough for the _Rep data structure,\n@@ -401,7 +408,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t{\n \t  const size_type __extra = __pagesize - __adj_size % __pagesize;\n \t  __capacity += __extra / sizeof(_CharT);\n-\t  // Never allocate a string bigger than _S_max_size.\n \t  if (__capacity > size_type(_S_max_size))\n \t    __capacity = size_type(_S_max_size);\n \t  __size = (__capacity + 1) * sizeof(_CharT) + 2 * sizeof(_Rep) - 1;"}]}