{"sha": "c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "node_id": "C_kwDOANBUbNoAKGM4YzdiNGIzMmQ4NmVjZjVmODc2OGE1YzE2MjQ4NGFjMmE2YjAxMzA", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-08T20:54:48Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T07:14:57Z"}, "message": "RISC-V: Add vmadc C API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vmadc-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc-4.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc-5.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc-6.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc-7.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc-8.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vv-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vv-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vv-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vvm-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vvm-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vvm-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vx_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vx_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vx_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vx_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vx_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vx_rv64-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vxm_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vxm_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vxm_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vxm_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vxm_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmadc_vxm_rv64-3.c: New test.", "tree": {"sha": "194300158d2daed56d881c9fcefa0a92611bdef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/194300158d2daed56d881c9fcefa0a92611bdef6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca23bf0bbe68c3880c9793b401cfc03890e6a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dca23bf0bbe68c3880c9793b401cfc03890e6a0d"}], "stats": {"total": 5701, "additions": 5701, "deletions": 0}, "files": [{"sha": "1f281f0c6e138e0e0b4a85a56f9a653e32f7cac6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-1.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vvm_i32m1_b32 (v2, v2, mask, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+void f2 (void * in, void *out)\n+{\n+  vbool32_t mask = *(vbool32_t*)in;\n+  asm volatile (\"\":::\"memory\");\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vvm_i32m1_b32 (v2, v2, mask, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "35dbd8e99b1ba279dc8145d40bcc7f8796a39380", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-2.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vxm_i32m1_b32 (v2, -16, mask, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vxm_i32m1_b32 (v2, 15, mask, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+void f3 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vxm_i32m1_b32 (v2, -17, mask, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+void f4 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vxm_i32m1_b32 (v2, 16, mask, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*15,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "3a5a292df346ff929a5545cf7189cccb691feda4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc-3.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-3.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, -16, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, -16, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, 15, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, 15, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, -17, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, -17, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, 16, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, 16, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, 0xAAAAAAAA, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, 0xAAAAAAAA, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, 0xAAAAAAAAAAAAAAAA, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, x, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, x, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*15,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 10 } } */"}, {"sha": "7bbe6913f8fbf047b70017101eb4067e9c7219f1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc-4.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-4.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, -16, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, -16, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, 15, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, 15, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, -17, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, -17, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, 16, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, 16, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, 0xAAAAAAA, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, 0xAAAAAAA, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, 0xAAAAAAAAAAAAAAAA, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vxm_i64m1_b64 (v2, x, mask, 4);\n+  vbool64_t v4 = __riscv_vmadc_vxm_i64m1_b64 (v, x, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*15,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 6 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */"}, {"sha": "5a27c352fa05262e0d0437420ce001c9f991740f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc-5.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-5.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out)\n+{\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vv_i32m1_b32 (v2, v2, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+void f2 (void * in, void *out)\n+{\n+  vbool32_t mask = *(vbool32_t*)in;\n+  asm volatile (\"\":::\"memory\");\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vv_i32m1_b32 (v2, v2, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "d66962dc9cfb5178d3a58f22db1a6c6ac3111457", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc-6.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-6.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+  \n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vx_i32m1_b32 (v2, -16, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+  \n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vx_i32m1_b32 (v2, 15, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+void f3 (void * in, void *out, int32_t x)\n+{\n+  \n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vx_i32m1_b32 (v2, -17, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+void f4 (void * in, void *out, int32_t x)\n+{\n+  \n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vbool32_t v3 = __riscv_vmadc_vx_i32m1_b32 (v2, 16, 4);\n+  __riscv_vsm_v_b32 (out, v3, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmadc\\.vi\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16} 1 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vi\\s+v[0-9]+,\\s*v[0-9]+,\\s*15} 1 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */"}, {"sha": "648ea08a794e96eaa4f6b76eb64ff6a9c9704c8a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc-7.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-7.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, -16, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, -16, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, 15, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, 15, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, -17, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, -17, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, 16, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, 16, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, 0xAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, 0xAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, x, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, x, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmadc\\.vi\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vi\\s+v[0-9]+,\\s*v[0-9]+,\\s*15} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 10 } } */"}, {"sha": "bbe4bcb63eb24629001b3999ee0e582061e71bcd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc-8.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc-8.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, -16, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, -16, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, 15, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, 15, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, -17, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, -17, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, 16, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, 16, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, 0xAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, 0xAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  \n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmadc_vx_i64m1_b64 (v2, x, 4);\n+  vbool64_t v4 = __riscv_vmadc_vx_i64m1_b64 (v, x, 4);\n+  __riscv_vsm_v_b64 (out + 200, v3, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmadc\\.vi\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vi\\s+v[0-9]+,\\s*v[0-9]+,\\s*15} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 6 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */"}, {"sha": "4f4780b90289c2c7f9423f1f17f11ad47df078da", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vv-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-1.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vv_i8mf8_b64(vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8mf8_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i8mf4_b32(vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8mf4_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i8mf2_b16(vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8mf2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i8m1_b8(vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m1_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_i8m2_b4(vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m2_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_i8m4_b2(vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m4_b2(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vv_i8m8_b1(vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m8_b1(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_i16mf4_b64(vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16mf4_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i16mf2_b32(vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16mf2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i16m1_b16(vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m1_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i16m2_b8(vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m2_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_i16m4_b4(vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m4_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_i16m8_b2(vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m8_b2(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_i32mf2_b64(vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32mf2_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i32m1_b32(vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m1_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i32m2_b16(vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i32m4_b8(vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m4_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_i32m8_b4(vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m8_b4(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_i64m1_b64(vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m1_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i64m2_b32(vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i64m4_b16(vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m4_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i64m8_b8(vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m8_b8(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u8mf8_b64(vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8mf8_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u8mf4_b32(vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8mf4_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u8mf2_b16(vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8mf2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u8m1_b8(vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m1_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_u8m2_b4(vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m2_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_u8m4_b2(vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m4_b2(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vv_u8m8_b1(vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m8_b1(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u16mf4_b64(vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16mf4_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u16mf2_b32(vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16mf2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u16m1_b16(vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m1_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u16m2_b8(vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m2_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_u16m4_b4(vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m4_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_u16m8_b2(vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m8_b2(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u32mf2_b64(vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32mf2_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u32m1_b32(vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m1_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u32m2_b16(vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u32m4_b8(vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m4_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_u32m8_b4(vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m8_b4(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u64m1_b64(vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m1_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u64m2_b32(vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u64m4_b16(vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m4_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u64m8_b8(vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m8_b8(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "690b0091241e866bba1954c44c4cef6560f95ea3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vv-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-2.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vv_i8mf8_b64(vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8mf8_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i8mf4_b32(vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8mf4_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i8mf2_b16(vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8mf2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i8m1_b8(vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m1_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_i8m2_b4(vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m2_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_i8m4_b2(vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m4_b2(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vv_i8m8_b1(vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m8_b1(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_i16mf4_b64(vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16mf4_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i16mf2_b32(vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16mf2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i16m1_b16(vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m1_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i16m2_b8(vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m2_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_i16m4_b4(vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m4_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_i16m8_b2(vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m8_b2(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_i32mf2_b64(vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32mf2_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i32m1_b32(vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m1_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i32m2_b16(vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i32m4_b8(vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m4_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_i32m8_b4(vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m8_b4(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_i64m1_b64(vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m1_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i64m2_b32(vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i64m4_b16(vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m4_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i64m8_b8(vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m8_b8(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u8mf8_b64(vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8mf8_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u8mf4_b32(vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8mf4_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u8mf2_b16(vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8mf2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u8m1_b8(vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m1_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_u8m2_b4(vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m2_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_u8m4_b2(vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m4_b2(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vv_u8m8_b1(vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m8_b1(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u16mf4_b64(vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16mf4_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u16mf2_b32(vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16mf2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u16m1_b16(vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m1_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u16m2_b8(vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m2_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_u16m4_b4(vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m4_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_u16m8_b2(vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m8_b2(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u32mf2_b64(vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32mf2_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u32m1_b32(vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m1_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u32m2_b16(vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u32m4_b8(vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m4_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_u32m8_b4(vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m8_b4(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u64m1_b64(vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m1_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u64m2_b32(vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u64m4_b16(vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m4_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u64m8_b8(vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m8_b8(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "894178188b0d8c1f6260adbf38e10f4af0d4a3e4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vv-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-3.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vv_i8mf8_b64(vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8mf8_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i8mf4_b32(vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8mf4_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i8mf2_b16(vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8mf2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i8m1_b8(vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m1_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_i8m2_b4(vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m2_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_i8m4_b2(vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m4_b2(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vv_i8m8_b1(vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i8m8_b1(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_i16mf4_b64(vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16mf4_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i16mf2_b32(vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16mf2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i16m1_b16(vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m1_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i16m2_b8(vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m2_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_i16m4_b4(vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m4_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_i16m8_b2(vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i16m8_b2(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_i32mf2_b64(vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32mf2_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i32m1_b32(vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m1_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i32m2_b16(vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i32m4_b8(vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m4_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_i32m8_b4(vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i32m8_b4(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_i64m1_b64(vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m1_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_i64m2_b32(vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_i64m4_b16(vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m4_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_i64m8_b8(vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_i64m8_b8(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u8mf8_b64(vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8mf8_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u8mf4_b32(vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8mf4_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u8mf2_b16(vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8mf2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u8m1_b8(vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m1_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_u8m2_b4(vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m2_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_u8m4_b2(vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m4_b2(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vv_u8m8_b1(vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u8m8_b1(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u16mf4_b64(vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16mf4_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u16mf2_b32(vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16mf2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u16m1_b16(vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m1_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u16m2_b8(vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m2_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_u16m4_b4(vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m4_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vv_u16m8_b2(vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u16m8_b2(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u32mf2_b64(vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32mf2_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u32m1_b32(vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m1_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u32m2_b16(vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u32m4_b8(vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m4_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vv_u32m8_b4(vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u32m8_b4(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vv_u64m1_b64(vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m1_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vv_u64m2_b32(vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vv_u64m4_b16(vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m4_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vv_u64m8_b8(vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vv_u64m8_b8(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "b6854783c2acef8fa60f41396ca407d4f7c53330", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vvm-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-1.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vvm_i8mf8_b64(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8mf8_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i8mf4_b32(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8mf4_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i8mf2_b16(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8mf2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i8m1_b8(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m1_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_i8m2_b4(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m2_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_i8m4_b2(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m4_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vvm_i8m8_b1(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m8_b1(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_i16mf4_b64(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16mf4_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i16mf2_b32(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16mf2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i16m1_b16(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m1_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i16m2_b8(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m2_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_i16m4_b4(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m4_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_i16m8_b2(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m8_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_i32mf2_b64(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32mf2_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i32m1_b32(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m1_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i32m2_b16(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i32m4_b8(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m4_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_i32m8_b4(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m8_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_i64m1_b64(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m1_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i64m2_b32(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i64m4_b16(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m4_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i64m8_b8(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m8_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u8mf8_b64(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8mf8_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u8mf4_b32(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8mf4_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u8mf2_b16(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8mf2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u8m1_b8(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m1_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_u8m2_b4(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m2_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_u8m4_b2(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m4_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vvm_u8m8_b1(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m8_b1(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u16mf4_b64(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16mf4_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u16mf2_b32(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16mf2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u16m1_b16(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m1_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u16m2_b8(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m2_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_u16m4_b4(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m4_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_u16m8_b2(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m8_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u32mf2_b64(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32mf2_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u32m1_b32(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m1_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u32m2_b16(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u32m4_b8(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m4_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_u32m8_b4(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m8_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u64m1_b64(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m1_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u64m2_b32(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u64m4_b16(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m4_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u64m8_b8(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m8_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "3237685e9142c224778c3426eae1b8d1a0f5a113", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vvm-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-2.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vvm_i8mf8_b64(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8mf8_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i8mf4_b32(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8mf4_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i8mf2_b16(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8mf2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i8m1_b8(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m1_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_i8m2_b4(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m2_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_i8m4_b2(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m4_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vvm_i8m8_b1(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m8_b1(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_i16mf4_b64(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16mf4_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i16mf2_b32(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16mf2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i16m1_b16(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m1_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i16m2_b8(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m2_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_i16m4_b4(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m4_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_i16m8_b2(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m8_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_i32mf2_b64(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32mf2_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i32m1_b32(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m1_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i32m2_b16(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i32m4_b8(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m4_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_i32m8_b4(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m8_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_i64m1_b64(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m1_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i64m2_b32(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i64m4_b16(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m4_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i64m8_b8(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m8_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u8mf8_b64(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8mf8_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u8mf4_b32(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8mf4_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u8mf2_b16(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8mf2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u8m1_b8(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m1_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_u8m2_b4(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m2_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_u8m4_b2(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m4_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vvm_u8m8_b1(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m8_b1(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u16mf4_b64(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16mf4_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u16mf2_b32(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16mf2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u16m1_b16(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m1_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u16m2_b8(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m2_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_u16m4_b4(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m4_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_u16m8_b2(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m8_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u32mf2_b64(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32mf2_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u32m1_b32(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m1_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u32m2_b16(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u32m4_b8(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m4_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_u32m8_b4(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m8_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u64m1_b64(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m1_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u64m2_b32(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u64m4_b16(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m4_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u64m8_b8(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m8_b8(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "ab34bdeba8f5bc593e836659eabb41532fcffaf8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vvm-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-3.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vvm_i8mf8_b64(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8mf8_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i8mf4_b32(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8mf4_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i8mf2_b16(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8mf2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i8m1_b8(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m1_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_i8m2_b4(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m2_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_i8m4_b2(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m4_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vvm_i8m8_b1(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i8m8_b1(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_i16mf4_b64(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16mf4_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i16mf2_b32(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16mf2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i16m1_b16(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m1_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i16m2_b8(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m2_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_i16m4_b4(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m4_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_i16m8_b2(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i16m8_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_i32mf2_b64(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32mf2_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i32m1_b32(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m1_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i32m2_b16(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i32m4_b8(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m4_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_i32m8_b4(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i32m8_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_i64m1_b64(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m1_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_i64m2_b32(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_i64m4_b16(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m4_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_i64m8_b8(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_i64m8_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u8mf8_b64(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8mf8_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u8mf4_b32(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8mf4_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u8mf2_b16(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8mf2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u8m1_b8(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m1_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_u8m2_b4(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m2_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_u8m4_b2(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m4_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vvm_u8m8_b1(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u8m8_b1(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u16mf4_b64(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16mf4_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u16mf2_b32(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16mf2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u16m1_b16(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m1_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u16m2_b8(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m2_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_u16m4_b4(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m4_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vvm_u16m8_b2(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u16m8_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u32mf2_b64(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32mf2_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u32m1_b32(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m1_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u32m2_b16(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u32m4_b8(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m4_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vvm_u32m8_b4(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u32m8_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vvm_u64m1_b64(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m1_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vvm_u64m2_b32(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vvm_u64m4_b16(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m4_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vvm_u64m8_b8(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vvm_u64m8_b8(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "cbabfdac4077d6d056aa4a1583526a02ae79fa51", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vx_rv32-1.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-1.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vx_i8mf8_b64(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf8_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i8mf4_b32(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf4_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i8mf2_b16(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i8m1_b8(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m1_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i8m2_b4(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m2_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i8m4_b2(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m4_b2(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_i8m8_b1(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m8_b1(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i16mf4_b64(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf4_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i16mf2_b32(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i16m1_b16(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m1_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i16m2_b8(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m2_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i16m4_b4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m4_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i16m8_b2(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m8_b2(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i32mf2_b64(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32mf2_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i32m1_b32(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m1_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i32m2_b16(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i32m4_b8(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m4_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i32m8_b4(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m8_b4(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i64m1_b64(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m1_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i64m2_b32(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i64m4_b16(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m4_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i64m8_b8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m8_b8(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf8_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf4_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u8m1_b8(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m1_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u8m2_b4(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m2_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u8m4_b2(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m4_b2(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_u8m8_b1(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m8_b1(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf4_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u16m1_b16(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m1_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u16m2_b8(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m2_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u16m4_b4(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m4_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u16m8_b2(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m8_b2(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32mf2_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u32m1_b32(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m1_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u32m2_b16(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u32m4_b8(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m4_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u32m8_b4(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m8_b4(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u64m1_b64(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m1_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u64m2_b32(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u64m4_b16(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m4_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u64m8_b8(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m8_b8(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "099c3e1082a878ff5ccf6ef6b5185f442ed64c8f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vx_rv32-2.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-2.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vx_i8mf8_b64(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf8_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i8mf4_b32(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf4_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i8mf2_b16(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i8m1_b8(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m1_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i8m2_b4(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m2_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i8m4_b2(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m4_b2(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_i8m8_b1(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m8_b1(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i16mf4_b64(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf4_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i16mf2_b32(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i16m1_b16(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m1_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i16m2_b8(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m2_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i16m4_b4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m4_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i16m8_b2(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m8_b2(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i32mf2_b64(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32mf2_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i32m1_b32(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m1_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i32m2_b16(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i32m4_b8(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m4_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i32m8_b4(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m8_b4(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i64m1_b64(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m1_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i64m2_b32(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i64m4_b16(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m4_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i64m8_b8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m8_b8(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf8_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf4_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u8m1_b8(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m1_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u8m2_b4(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m2_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u8m4_b2(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m4_b2(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_u8m8_b1(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m8_b1(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf4_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u16m1_b16(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m1_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u16m2_b8(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m2_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u16m4_b4(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m4_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u16m8_b2(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m8_b2(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32mf2_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u32m1_b32(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m1_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u32m2_b16(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u32m4_b8(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m4_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u32m8_b4(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m8_b4(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u64m1_b64(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m1_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u64m2_b32(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u64m4_b16(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m4_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u64m8_b8(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m8_b8(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "aee2c37c8c018b93c57d9c128ace6de47225748e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vx_rv32-3.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-3.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vx_i8mf8_b64(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf8_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i8mf4_b32(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf4_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i8mf2_b16(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i8m1_b8(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m1_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i8m2_b4(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m2_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i8m4_b2(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m4_b2(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_i8m8_b1(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m8_b1(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i16mf4_b64(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf4_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i16mf2_b32(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i16m1_b16(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m1_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i16m2_b8(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m2_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i16m4_b4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m4_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i16m8_b2(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m8_b2(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i32mf2_b64(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32mf2_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i32m1_b32(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m1_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i32m2_b16(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i32m4_b8(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m4_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i32m8_b4(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m8_b4(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i64m1_b64(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m1_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i64m2_b32(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i64m4_b16(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m4_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i64m8_b8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m8_b8(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf8_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf4_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u8m1_b8(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m1_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u8m2_b4(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m2_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u8m4_b2(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m4_b2(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_u8m8_b1(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m8_b1(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf4_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u16m1_b16(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m1_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u16m2_b8(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m2_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u16m4_b4(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m4_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u16m8_b2(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m8_b2(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32mf2_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u32m1_b32(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m1_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u32m2_b16(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u32m4_b8(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m4_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u32m8_b4(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m8_b4(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u64m1_b64(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m1_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u64m2_b32(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u64m4_b16(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m4_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u64m8_b8(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m8_b8(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "743ddd148a858cdaa8ae28b6937422c146730678", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vx_rv64-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-1.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vx_i8mf8_b64(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf8_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i8mf4_b32(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf4_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i8mf2_b16(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i8m1_b8(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m1_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i8m2_b4(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m2_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i8m4_b2(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m4_b2(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_i8m8_b1(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m8_b1(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i16mf4_b64(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf4_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i16mf2_b32(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i16m1_b16(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m1_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i16m2_b8(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m2_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i16m4_b4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m4_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i16m8_b2(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m8_b2(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i32mf2_b64(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32mf2_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i32m1_b32(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m1_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i32m2_b16(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i32m4_b8(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m4_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i32m8_b4(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m8_b4(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i64m1_b64(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m1_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i64m2_b32(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i64m4_b16(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m4_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i64m8_b8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m8_b8(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf8_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf4_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u8m1_b8(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m1_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u8m2_b4(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m2_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u8m4_b2(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m4_b2(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_u8m8_b1(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m8_b1(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf4_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u16m1_b16(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m1_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u16m2_b8(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m2_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u16m4_b4(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m4_b4(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u16m8_b2(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m8_b2(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32mf2_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u32m1_b32(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m1_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u32m2_b16(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m2_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u32m4_b8(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m4_b8(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u32m8_b4(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m8_b4(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u64m1_b64(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m1_b64(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u64m2_b32(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m2_b32(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u64m4_b16(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m4_b16(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u64m8_b8(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m8_b8(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */"}, {"sha": "fd3f1b6b8b7b6ead945f8016a0e6008497d96e58", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vx_rv64-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-2.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vx_i8mf8_b64(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf8_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i8mf4_b32(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf4_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i8mf2_b16(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i8m1_b8(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m1_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i8m2_b4(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m2_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i8m4_b2(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m4_b2(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_i8m8_b1(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m8_b1(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i16mf4_b64(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf4_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i16mf2_b32(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i16m1_b16(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m1_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i16m2_b8(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m2_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i16m4_b4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m4_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i16m8_b2(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m8_b2(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i32mf2_b64(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32mf2_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i32m1_b32(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m1_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i32m2_b16(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i32m4_b8(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m4_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i32m8_b4(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m8_b4(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i64m1_b64(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m1_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i64m2_b32(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i64m4_b16(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m4_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i64m8_b8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m8_b8(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf8_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf4_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u8m1_b8(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m1_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u8m2_b4(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m2_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u8m4_b2(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m4_b2(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_u8m8_b1(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m8_b1(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf4_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u16m1_b16(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m1_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u16m2_b8(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m2_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u16m4_b4(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m4_b4(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u16m8_b2(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m8_b2(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32mf2_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u32m1_b32(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m1_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u32m2_b16(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m2_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u32m4_b8(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m4_b8(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u32m8_b4(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m8_b4(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u64m1_b64(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m1_b64(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u64m2_b32(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m2_b32(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u64m4_b16(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m4_b16(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u64m8_b8(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m8_b8(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */"}, {"sha": "8d0e155bcb812b1553ca9e4501c52781962400f1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vx_rv64-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-3.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vx_i8mf8_b64(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf8_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i8mf4_b32(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf4_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i8mf2_b16(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8mf2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i8m1_b8(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m1_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i8m2_b4(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m2_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i8m4_b2(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m4_b2(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_i8m8_b1(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i8m8_b1(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i16mf4_b64(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf4_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i16mf2_b32(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16mf2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i16m1_b16(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m1_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i16m2_b8(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m2_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i16m4_b4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m4_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_i16m8_b2(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i16m8_b2(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i32mf2_b64(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32mf2_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i32m1_b32(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m1_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i32m2_b16(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i32m4_b8(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m4_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_i32m8_b4(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i32m8_b4(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_i64m1_b64(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m1_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_i64m2_b32(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_i64m4_b16(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m4_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_i64m8_b8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_i64m8_b8(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf8_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf4_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8mf2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u8m1_b8(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m1_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u8m2_b4(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m2_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u8m4_b2(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m4_b2(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vx_u8m8_b1(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u8m8_b1(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf4_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16mf2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u16m1_b16(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m1_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u16m2_b8(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m2_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u16m4_b4(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m4_b4(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vx_u16m8_b2(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u16m8_b2(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32mf2_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u32m1_b32(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m1_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u32m2_b16(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m2_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u32m4_b8(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m4_b8(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vx_u32m8_b4(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u32m8_b4(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vx_u64m1_b64(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m1_b64(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vx_u64m2_b32(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m2_b32(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vx_u64m4_b16(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m4_b16(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vx_u64m8_b8(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc_vx_u64m8_b8(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */"}, {"sha": "0cfdad79082f2888828f0be2ecdbb877fceb1a2c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vxm_rv32-1.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-1.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vxm_i8mf8_b64(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf8_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i8mf4_b32(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf4_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i8mf2_b16(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i8m1_b8(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m1_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i8m2_b4(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m2_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i8m4_b2(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m4_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_i8m8_b1(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m8_b1(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i16mf4_b64(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf4_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i16mf2_b32(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i16m1_b16(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m1_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i16m2_b8(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m2_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i16m4_b4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m4_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i16m8_b2(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m8_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i32mf2_b64(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32mf2_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i32m1_b32(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m1_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i32m2_b16(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i32m4_b8(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m4_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i32m8_b4(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m8_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i64m1_b64(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m1_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i64m2_b32(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i64m4_b16(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m4_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i64m8_b8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m8_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf8_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf4_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u8m1_b8(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m1_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u8m2_b4(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m2_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u8m4_b2(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m4_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_u8m8_b1(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m8_b1(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf4_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u16m1_b16(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m1_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u16m2_b8(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m2_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u16m4_b4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m4_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u16m8_b2(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m8_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32mf2_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u32m1_b32(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m1_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u32m2_b16(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u32m4_b8(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m4_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u32m8_b4(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m8_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u64m1_b64(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m1_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u64m2_b32(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u64m4_b16(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m4_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u64m8_b8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m8_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "0e9c06f099948589b9957da773696cca2bad26b0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vxm_rv32-2.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-2.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vxm_i8mf8_b64(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf8_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i8mf4_b32(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf4_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i8mf2_b16(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i8m1_b8(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m1_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i8m2_b4(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m2_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i8m4_b2(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m4_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_i8m8_b1(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m8_b1(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i16mf4_b64(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf4_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i16mf2_b32(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i16m1_b16(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m1_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i16m2_b8(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m2_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i16m4_b4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m4_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i16m8_b2(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m8_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i32mf2_b64(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32mf2_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i32m1_b32(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m1_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i32m2_b16(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i32m4_b8(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m4_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i32m8_b4(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m8_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i64m1_b64(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m1_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i64m2_b32(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i64m4_b16(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m4_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i64m8_b8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m8_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf8_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf4_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u8m1_b8(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m1_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u8m2_b4(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m2_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u8m4_b2(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m4_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_u8m8_b1(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m8_b1(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf4_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u16m1_b16(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m1_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u16m2_b8(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m2_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u16m4_b4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m4_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u16m8_b2(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m8_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32mf2_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u32m1_b32(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m1_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u32m2_b16(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u32m4_b8(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m4_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u32m8_b4(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m8_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u64m1_b64(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m1_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u64m2_b32(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u64m4_b16(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m4_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u64m8_b8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m8_b8(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "5b8254da92b3f1beded3b9a4ff97f4158ed07ca6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vxm_rv32-3.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-3.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vxm_i8mf8_b64(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf8_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i8mf4_b32(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf4_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i8mf2_b16(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i8m1_b8(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m1_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i8m2_b4(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m2_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i8m4_b2(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m4_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_i8m8_b1(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m8_b1(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i16mf4_b64(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf4_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i16mf2_b32(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i16m1_b16(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m1_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i16m2_b8(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m2_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i16m4_b4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m4_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i16m8_b2(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m8_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i32mf2_b64(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32mf2_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i32m1_b32(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m1_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i32m2_b16(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i32m4_b8(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m4_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i32m8_b4(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m8_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i64m1_b64(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m1_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i64m2_b32(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i64m4_b16(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m4_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i64m8_b8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m8_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf8_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf4_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u8m1_b8(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m1_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u8m2_b4(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m2_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u8m4_b2(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m4_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_u8m8_b1(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m8_b1(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf4_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u16m1_b16(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m1_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u16m2_b8(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m2_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u16m4_b4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m4_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u16m8_b2(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m8_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32mf2_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u32m1_b32(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m1_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u32m2_b16(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u32m4_b8(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m4_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u32m8_b4(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m8_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u64m1_b64(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m1_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u64m2_b32(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u64m4_b16(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m4_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u64m8_b8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m8_b8(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "98e77a102a0ce4b07fb89c8c7ef49c3c2a08bb16", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vxm_rv64-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-1.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vxm_i8mf8_b64(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf8_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i8mf4_b32(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf4_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i8mf2_b16(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i8m1_b8(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m1_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i8m2_b4(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m2_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i8m4_b2(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m4_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_i8m8_b1(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m8_b1(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i16mf4_b64(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf4_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i16mf2_b32(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i16m1_b16(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m1_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i16m2_b8(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m2_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i16m4_b4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m4_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i16m8_b2(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m8_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i32mf2_b64(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32mf2_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i32m1_b32(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m1_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i32m2_b16(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i32m4_b8(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m4_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i32m8_b4(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m8_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i64m1_b64(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m1_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i64m2_b32(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i64m4_b16(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m4_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i64m8_b8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m8_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf8_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf4_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u8m1_b8(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m1_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u8m2_b4(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m2_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u8m4_b2(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m4_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_u8m8_b1(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m8_b1(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf4_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u16m1_b16(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m1_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u16m2_b8(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m2_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u16m4_b4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m4_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u16m8_b2(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m8_b2(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32mf2_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u32m1_b32(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m1_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u32m2_b16(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m2_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u32m4_b8(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m4_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u32m8_b4(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m8_b4(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u64m1_b64(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m1_b64(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u64m2_b32(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m2_b32(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u64m4_b16(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m4_b16(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u64m8_b8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m8_b8(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "9cb64a2a5c94fb121636b23faca1acad41879f83", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vxm_rv64-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-2.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vxm_i8mf8_b64(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf8_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i8mf4_b32(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf4_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i8mf2_b16(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i8m1_b8(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m1_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i8m2_b4(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m2_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i8m4_b2(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m4_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_i8m8_b1(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m8_b1(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i16mf4_b64(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf4_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i16mf2_b32(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i16m1_b16(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m1_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i16m2_b8(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m2_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i16m4_b4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m4_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i16m8_b2(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m8_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i32mf2_b64(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32mf2_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i32m1_b32(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m1_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i32m2_b16(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i32m4_b8(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m4_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i32m8_b4(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m8_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i64m1_b64(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m1_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i64m2_b32(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i64m4_b16(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m4_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i64m8_b8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m8_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf8_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf4_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u8m1_b8(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m1_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u8m2_b4(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m2_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u8m4_b2(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m4_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_u8m8_b1(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m8_b1(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf4_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u16m1_b16(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m1_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u16m2_b8(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m2_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u16m4_b4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m4_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u16m8_b2(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m8_b2(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32mf2_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u32m1_b32(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m1_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u32m2_b16(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m2_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u32m4_b8(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m4_b8(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u32m8_b4(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m8_b4(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u64m1_b64(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m1_b64(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u64m2_b32(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m2_b32(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u64m4_b16(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m4_b16(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u64m8_b8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m8_b8(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "e7183e629c5b3c1e48a377c750bde787baac7a67", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmadc_vxm_rv64-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-3.c?ref=c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc_vxm_i8mf8_b64(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf8_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i8mf4_b32(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf4_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i8mf2_b16(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8mf2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i8m1_b8(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m1_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i8m2_b4(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m2_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i8m4_b2(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m4_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_i8m8_b1(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i8m8_b1(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i16mf4_b64(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf4_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i16mf2_b32(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16mf2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i16m1_b16(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m1_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i16m2_b8(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m2_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i16m4_b4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m4_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_i16m8_b2(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i16m8_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i32mf2_b64(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32mf2_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i32m1_b32(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m1_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i32m2_b16(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i32m4_b8(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m4_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_i32m8_b4(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i32m8_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_i64m1_b64(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m1_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_i64m2_b32(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_i64m4_b16(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m4_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_i64m8_b8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_i64m8_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u8mf8_b64(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf8_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u8mf4_b32(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf4_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u8mf2_b16(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8mf2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u8m1_b8(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m1_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u8m2_b4(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m2_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u8m4_b2(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m4_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc_vxm_u8m8_b1(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u8m8_b1(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u16mf4_b64(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf4_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u16mf2_b32(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16mf2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u16m1_b16(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m1_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u16m2_b8(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m2_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u16m4_b4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m4_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc_vxm_u16m8_b2(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u16m8_b2(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u32mf2_b64(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32mf2_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u32m1_b32(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m1_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u32m2_b16(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m2_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u32m4_b8(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m4_b8(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc_vxm_u32m8_b4(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u32m8_b4(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc_vxm_u64m1_b64(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m1_b64(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc_vxm_u64m2_b32(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m2_b32(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc_vxm_u64m4_b16(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m4_b16(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc_vxm_u64m8_b8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc_vxm_u64m8_b8(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}]}