{"sha": "6c907cff668b1c4bf305b1988d99acbf841f6f52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM5MDdjZmY2NjhiMWM0YmYzMDViMTk4OGQ5OWFjYmY4NDFmNmY1Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:06:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:06:44Z"}, "message": "hash-traits.h (ggc_cache_hasher): Rename to...\n\ngcc/\n\t* hash-traits.h (ggc_cache_hasher): Rename to...\n\t(ggc_cache_remove): ...this and remove typedefs.\n\t(ggc_cache_ptr_hash): New class.\n\t* hash-table.h: Update commentary.\n\t* emit-rtl.c (const_int_hasher): Inherit from ggc_cache_ptr_hash\n\trather than ggc_cache_hasher.\n\t(const_wide_int_hasher, reg_attr_hasher): Likewise.\n\t(const_double_hasher, const_fixed_hasher): Likewise.\n\t* function.c (insn_cache_hasher): Likewise.\n\t* trans-mem.c (tm_wrapper_hasher): Likewise.\n\t* tree.h (tree_decl_map_cache_hasher): Likewise.\n\t* tree.c (type_cache_hasher, int_cst_hasher): Likewise.\n\t(cl_option_hasher, tree_vec_map_cache_hasher): Likewise.\n\t* ubsan.c (tree_type_map_cache_hasher): Likewise.\n\t* varasm.c (tm_clone_hasher): Likewise.\n\t* config/i386/i386.c (dllimport_hasher): Likewise.\n\t* config/nvptx/nvptx.c (declared_libfunc_hasher): Likewise.\n\t(tree_hasher): Likewise.\n\ngcc/ada/\n\t* gcc-interface/decl.c (value_annotation_hasher): Inherit from\n\tggc_cache_ptr_hash rather than ggc_cache_hasher.\n\t* gcc-interface/utils.c (pad_type_hasher): Likewise.\n\nFrom-SVN: r224960", "tree": {"sha": "2e989ada68962878a3c51638dc18cf3f243933ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e989ada68962878a3c51638dc18cf3f243933ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c907cff668b1c4bf305b1988d99acbf841f6f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c907cff668b1c4bf305b1988d99acbf841f6f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c907cff668b1c4bf305b1988d99acbf841f6f52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c907cff668b1c4bf305b1988d99acbf841f6f52/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca752f3929677221a5806daf4940367308fc16d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca752f3929677221a5806daf4940367308fc16d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca752f3929677221a5806daf4940367308fc16d7"}], "stats": {"total": 89, "additions": 64, "deletions": 25}, "files": [{"sha": "3f906d8eff60a90e0fbc5105c6dab95b51222b36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -1,3 +1,24 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-traits.h (ggc_cache_hasher): Rename to...\n+\t(ggc_cache_remove): ...this and remove typedefs.\n+\t(ggc_cache_ptr_hash): New class.\n+\t* hash-table.h: Update commentary.\n+\t* emit-rtl.c (const_int_hasher): Inherit from ggc_cache_ptr_hash\n+\trather than ggc_cache_hasher.\n+\t(const_wide_int_hasher, reg_attr_hasher): Likewise.\n+\t(const_double_hasher, const_fixed_hasher): Likewise.\n+\t* function.c (insn_cache_hasher): Likewise.\n+\t* trans-mem.c (tm_wrapper_hasher): Likewise.\n+\t* tree.h (tree_decl_map_cache_hasher): Likewise.\n+\t* tree.c (type_cache_hasher, int_cst_hasher): Likewise.\n+\t(cl_option_hasher, tree_vec_map_cache_hasher): Likewise.\n+\t* ubsan.c (tree_type_map_cache_hasher): Likewise.\n+\t* varasm.c (tm_clone_hasher): Likewise.\n+\t* config/i386/i386.c (dllimport_hasher): Likewise.\n+\t* config/nvptx/nvptx.c (declared_libfunc_hasher): Likewise.\n+\t(tree_hasher): Likewise.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hash-traits.h (ggc_hasher): Rename to..."}, {"sha": "d07340a459c2e6046f7e522660fe26148b6ea74e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -1,3 +1,9 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc-interface/decl.c (value_annotation_hasher): Inherit from\n+\tggc_cache_ptr_hash rather than ggc_cache_hasher.\n+\t* gcc-interface/utils.c (pad_type_hasher): Likewise.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc-interface/decl.c (value_annotation_hasher::handle_cache_entry):"}, {"sha": "1c82b6eb9260ee4a58a8c3ef4b8800cc7481e593", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -134,7 +134,7 @@ typedef struct variant_desc_d {\n \n /* A hash table used to cache the result of annotate_value.  */\n \n-struct value_annotation_hasher : ggc_cache_hasher<tree_int_map *>\n+struct value_annotation_hasher : ggc_cache_ptr_hash<tree_int_map>\n {\n   static inline hashval_t\n   hash (tree_int_map *m)"}, {"sha": "f09db5946146448e3cd44eeed8147b6d545228be", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -237,7 +237,7 @@ struct GTY((for_user)) pad_type_hash {\n   tree type;\n };\n \n-struct pad_type_hasher : ggc_cache_hasher<pad_type_hash *>\n+struct pad_type_hasher : ggc_cache_ptr_hash<pad_type_hash>\n {\n   static inline hashval_t hash (pad_type_hash *t) { return t->hash; }\n   static bool equal (pad_type_hash *a, pad_type_hash *b);"}, {"sha": "5c904409bbae1a0fb8ab12b5529d07d1e6b3a762", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -14212,7 +14212,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n    to symbol DECL if BEIMPORT is true.  Otherwise create or return the\n    unique refptr-DECL symbol corresponding to symbol DECL.  */\n \n-struct dllimport_hasher : ggc_cache_hasher<tree_map *>\n+struct dllimport_hasher : ggc_cache_ptr_hash<tree_map>\n {\n   static inline hashval_t hash (tree_map *m) { return m->hash; }\n   static inline bool"}, {"sha": "af08abefa5e696c99d130dedb4545b83c44c58b8", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -66,7 +66,7 @@\n    decls corresponding to them.  */\n static std::stringstream func_decls;\n \n-struct declared_libfunc_hasher : ggc_cache_hasher<rtx>\n+struct declared_libfunc_hasher : ggc_cache_ptr_hash<rtx_def>\n {\n   static hashval_t hash (rtx x) { return htab_hash_pointer (x); }\n   static bool equal (rtx a, rtx b) { return a == b; }\n@@ -75,7 +75,7 @@ struct declared_libfunc_hasher : ggc_cache_hasher<rtx>\n static GTY((cache))\n   hash_table<declared_libfunc_hasher> *declared_libfuncs_htab;\n \n-  struct tree_hasher : ggc_cache_hasher<tree>\n+struct tree_hasher : ggc_cache_ptr_hash<tree_node>\n {\n   static hashval_t hash (tree t) { return htab_hash_pointer (t); }\n   static bool equal (tree a, tree b) { return a == b; }"}, {"sha": "e7f7eab4fe2d08100369584722a8c0584ba0c09c", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -140,7 +140,7 @@ rtx_insn *invalid_insn_rtx;\n /* A hash table storing CONST_INTs whose absolute value is greater\n    than MAX_SAVED_CONST_INT.  */\n \n-struct const_int_hasher : ggc_cache_hasher<rtx>\n+struct const_int_hasher : ggc_cache_ptr_hash<rtx_def>\n {\n   typedef HOST_WIDE_INT compare_type;\n \n@@ -150,7 +150,7 @@ struct const_int_hasher : ggc_cache_hasher<rtx>\n \n static GTY ((cache)) hash_table<const_int_hasher> *const_int_htab;\n \n-struct const_wide_int_hasher : ggc_cache_hasher<rtx>\n+struct const_wide_int_hasher : ggc_cache_ptr_hash<rtx_def>\n {\n   static hashval_t hash (rtx x);\n   static bool equal (rtx x, rtx y);\n@@ -159,7 +159,7 @@ struct const_wide_int_hasher : ggc_cache_hasher<rtx>\n static GTY ((cache)) hash_table<const_wide_int_hasher> *const_wide_int_htab;\n \n /* A hash table storing register attribute structures.  */\n-struct reg_attr_hasher : ggc_cache_hasher<reg_attrs *>\n+struct reg_attr_hasher : ggc_cache_ptr_hash<reg_attrs>\n {\n   static hashval_t hash (reg_attrs *x);\n   static bool equal (reg_attrs *a, reg_attrs *b);\n@@ -168,7 +168,7 @@ struct reg_attr_hasher : ggc_cache_hasher<reg_attrs *>\n static GTY ((cache)) hash_table<reg_attr_hasher> *reg_attrs_htab;\n \n /* A hash table storing all CONST_DOUBLEs.  */\n-struct const_double_hasher : ggc_cache_hasher<rtx>\n+struct const_double_hasher : ggc_cache_ptr_hash<rtx_def>\n {\n   static hashval_t hash (rtx x);\n   static bool equal (rtx x, rtx y);\n@@ -177,7 +177,7 @@ struct const_double_hasher : ggc_cache_hasher<rtx>\n static GTY ((cache)) hash_table<const_double_hasher> *const_double_htab;\n \n /* A hash table storing all CONST_FIXEDs.  */\n-struct const_fixed_hasher : ggc_cache_hasher<rtx>\n+struct const_fixed_hasher : ggc_cache_ptr_hash<rtx_def>\n {\n   static hashval_t hash (rtx x);\n   static bool equal (rtx x, rtx y);"}, {"sha": "cb3e9bb4ca00f54a96970933c4305b19012f4470", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -122,7 +122,7 @@ struct function *cfun = 0;\n \n /* These hashes record the prologue and epilogue insns.  */\n \n-struct insn_cache_hasher : ggc_cache_hasher<rtx>\n+struct insn_cache_hasher : ggc_cache_ptr_hash<rtx_def>\n {\n   static hashval_t hash (rtx x) { return htab_hash_pointer (x); }\n   static bool equal (rtx a, rtx b) { return a == b; }"}, {"sha": "5f3dbede8c16737a658c2e72482c85a224b94644", "filename": "gcc/hash-table.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -91,7 +91,7 @@ along with GCC; see the file COPYING3.  If not see\n    We compose this into a few steps.\n \n       1. Decide on a removal policy for values stored in the table.\n-         hash-traits.h provides class templates for the three most common\n+         hash-traits.h provides class templates for the four most common\n          policies:\n \n          * typed_free_remove implements the static 'remove' member function\n@@ -105,6 +105,13 @@ along with GCC; see the file COPYING3.  If not see\n          Use this for garbage-collected data that needs to be preserved across\n          collections.\n \n+         * ggc_cache_remove is like ggc_remove, except that it does not\n+         mark the entries during the normal gc mark phase.  Instead it\n+         uses 'keep_cache_entry' (described above) to keep elements that\n+         were not collected and delete those that were.  Use this for\n+         garbage-collected caches that should not in themselves stop\n+         the data from being collected.\n+\n          You can use these policies by simply deriving the descriptor type\n          from one of those class template, with the appropriate argument.\n "}, {"sha": "5fd43f1f54fa902df8317c19ce8c7c105a52397d", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -149,14 +149,12 @@ struct ggc_remove\n   }\n };\n \n-/* Hasher for cache entry in gc memory.  */\n+/* Remover and marker for \"cache\" entries in gc memory.  These entries can\n+   be deleted if there are no non-cache references to the data.  */\n \n template<typename T>\n-struct ggc_cache_hasher : ggc_remove<T>\n+struct ggc_cache_remove : ggc_remove<T>\n {\n-  typedef T value_type;\n-  typedef T compare_type;\n-\n   /* Entries are weakly held because this is for caches.  */\n   static void ggc_mx (T &) {}\n \n@@ -185,4 +183,11 @@ struct free_ptr_hash : pointer_hash <T>, typed_free_remove <T> {};\n template <typename T>\n struct ggc_ptr_hash : pointer_hash <T>, ggc_remove <T *> {};\n \n+/* Traits for elements that point to gc memory.  The elements don't\n+   in themselves keep the pointed-to data alive and they can be deleted\n+   if the pointed-to data is going to be collected.  */\n+\n+template <typename T>\n+struct ggc_cache_ptr_hash : pointer_hash <T>, ggc_cache_remove <T *> {};\n+\n #endif"}, {"sha": "9e860ce794262d17f4310d2600e26e20885f24ae", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -471,7 +471,7 @@ build_tm_abort_call (location_t loc, bool is_outer)\n /* Map for aribtrary function replacement under TM, as created\n    by the tm_wrap attribute.  */\n \n-struct tm_wrapper_hasher : ggc_cache_hasher<tree_map *>\n+struct tm_wrapper_hasher : ggc_cache_ptr_hash<tree_map>\n {\n   static inline hashval_t hash (tree_map *m) { return m->hash; }\n   static inline bool"}, {"sha": "139544d603efda6bbe2ef48885edd4592a1497da", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -196,7 +196,7 @@ struct GTY((for_user)) type_hash {\n /* Initial size of the hash table (rounded to next prime).  */\n #define TYPE_HASH_INITIAL_SIZE 1000\n \n-struct type_cache_hasher : ggc_cache_hasher<type_hash *>\n+struct type_cache_hasher : ggc_cache_ptr_hash<type_hash>\n {\n   static hashval_t hash (type_hash *t) { return t->hash; }\n   static bool equal (type_hash *a, type_hash *b);\n@@ -220,7 +220,7 @@ static GTY ((cache)) hash_table<type_cache_hasher> *type_hash_table;\n /* Hash table and temporary node for larger integer const values.  */\n static GTY (()) tree int_cst_node;\n \n-struct int_cst_hasher : ggc_cache_hasher<tree>\n+struct int_cst_hasher : ggc_cache_ptr_hash<tree_node>\n {\n   static hashval_t hash (tree t);\n   static bool equal (tree x, tree y);\n@@ -236,7 +236,7 @@ static GTY ((cache)) hash_table<int_cst_hasher> *int_cst_hash_table;\n static GTY (()) tree cl_optimization_node;\n static GTY (()) tree cl_target_option_node;\n \n-struct cl_option_hasher : ggc_cache_hasher<tree>\n+struct cl_option_hasher : ggc_cache_ptr_hash<tree_node>\n {\n   static hashval_t hash (tree t);\n   static bool equal (tree x, tree y);\n@@ -253,7 +253,7 @@ static GTY ((cache))\n static GTY ((cache))\n      hash_table<tree_decl_map_cache_hasher> *value_expr_for_decl;\n \n-struct tree_vec_map_cache_hasher : ggc_cache_hasher<tree_vec_map *>\n+struct tree_vec_map_cache_hasher : ggc_cache_ptr_hash<tree_vec_map>\n {\n   static hashval_t hash (tree_vec_map *m) { return DECL_UID (m->base.from); }\n "}, {"sha": "250f99d14b325c554e6ef0d9e1bd90b2da85aa69", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -4626,7 +4626,7 @@ extern unsigned int tree_map_hash (const void *);\n extern unsigned int tree_decl_map_hash (const void *);\n #define tree_decl_map_marked_p tree_map_base_marked_p\n \n-struct tree_decl_map_cache_hasher : ggc_cache_hasher<tree_decl_map *>\n+struct tree_decl_map_cache_hasher : ggc_cache_ptr_hash<tree_decl_map>\n {\n   static hashval_t hash (tree_decl_map *m) { return tree_decl_map_hash (m); }\n   static bool"}, {"sha": "ded725a55d0480cec1dbc8dbe5447de41df4bd2d", "filename": "gcc/ubsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -83,7 +83,7 @@ struct GTY((for_user)) tree_type_map {\n   tree decl;\n };\n \n-struct tree_type_map_cache_hasher : ggc_cache_hasher<tree_type_map *>\n+struct tree_type_map_cache_hasher : ggc_cache_ptr_hash<tree_type_map>\n {\n   static inline hashval_t\n   hash (tree_type_map *t)"}, {"sha": "611b6ca4940924f96f525f2aac739ff8eb05597d", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c907cff668b1c4bf305b1988d99acbf841f6f52/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6c907cff668b1c4bf305b1988d99acbf841f6f52", "patch": "@@ -5790,7 +5790,7 @@ assemble_alias (tree decl, tree target)\n    to its transaction aware clone.  Note that tm_pure functions are\n    considered to be their own clone.  */\n \n-struct tm_clone_hasher : ggc_cache_hasher<tree_map *>\n+struct tm_clone_hasher : ggc_cache_ptr_hash<tree_map>\n {\n   static hashval_t hash (tree_map *m) { return tree_map_hash (m); }\n   static bool equal (tree_map *a, tree_map *b) { return tree_map_eq (a, b); }"}]}