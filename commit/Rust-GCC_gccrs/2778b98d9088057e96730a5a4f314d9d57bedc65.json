{"sha": "2778b98d9088057e96730a5a4f314d9d57bedc65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3OGI5OGQ5MDg4MDU3ZTk2NzMwYTVhNGYzMTRkOWQ1N2JlZGM2NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-11-27T10:09:17Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-11-27T10:09:17Z"}, "message": "system.h: Include libiberty.h.\n\n        * system.h: Include libiberty.h.\n        * c-aux-info.c: Remove prototypes for concat/concat3.  Change\n        function `concat' from fixed parameters to variable parameters,\n        as is done in libiberty.  All callers of concat/concat3\n        changed to use the new `concat' with variable args.\n        * cccp.c: Remove things made redundant by libiberty.h and/or\n        conform to libiberty standards.\n        * cexp.y: Likewise.\n        * collect2.c: Likewise.\n        * config/1750a/1750a.h: Likewise.\n        * cppalloc.c: Likewise.\n        * cppexp.c: Likewise.\n        * cppfiles.c: Likewise.\n        * cpphash.c: Likewise.\n        * cpplib.c: Likewise.\n        * dyn-string.c: Likewise.\n        * fix-header.c: Likewise.\n        * gcc.c: Likewise.\n        * gcov.c: Likewise.\n        * genattr.c: Likewise.\n        * genattrtab.c: Likewise.\n        * gencheck.c: Likewise.\n        * gencodes.c: Likewise.\n        * genconfig.c: Likewise.\n        * genemit.c: Likewise.\n        * genextract.c: Likewise.\n        * genflags.c: Likewise.\n        * gengenrtl.c: Likewise.\n        * genopinit.c: Likewise.\n        * genoutput.c: Likewise.\n        * genpeep.c: Likewise.\n        * genrecog.c: Likewise.\n        * getpwd.c: Likewise.\n        * halfpic.c: Likewise.\n        * hash.c: Likewise.\n        * mips-tdump.c: Likewise.  Wrap malloc/realloc/calloc prototypes\n        in NEED_DECLARATION_* macros.\n        * mips-tfile.c: Remove things made redundant by libiberty.h and/or\n        conform to libiberty standards.\n        (fatal): Fix const-ification of variable `format' in\n        !ANSI_PROTOTYPES case.\n        * prefix.c: Remove things made redundant by libiberty.h and/or\n        conform to libiberty standards.\n        * print-rtl.c: Rename variable `spaces' to `xspaces' to avoid\n        conflicting with function `spaces' from libiberty.\n        * profile.c: Remove things made redundant by libiberty.h and/or\n        conform to libiberty standards.\n        * protoize.c: Likewise.\n        * rtl.h: Likewise.\n        * scan.h: Likewise.\n        * tlink.c: Likewise.\n        * toplev.c: Likewise.\n        * toplev.h: Likewise.\n        * tree.h: Likewise.\n\nFrom-SVN: r23931", "tree": {"sha": "34ccf49c3a33a630b8aabf80bc4b9c4bd0db64b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ccf49c3a33a630b8aabf80bc4b9c4bd0db64b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2778b98d9088057e96730a5a4f314d9d57bedc65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2778b98d9088057e96730a5a4f314d9d57bedc65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2778b98d9088057e96730a5a4f314d9d57bedc65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2778b98d9088057e96730a5a4f314d9d57bedc65/comments", "author": null, "committer": null, "parents": [{"sha": "3081a3ada689c56e5a8c348aac90dfe7f00122bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3081a3ada689c56e5a8c348aac90dfe7f00122bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3081a3ada689c56e5a8c348aac90dfe7f00122bd"}], "stats": {"total": 980, "additions": 427, "deletions": 553}, "files": [{"sha": "865ebfcb5571d37181fc39fcbb60c289af3a8614", "filename": "gcc/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -1,3 +1,66 @@\n+Fri Nov 27 12:28:56 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* system.h: Include libiberty.h.\n+\n+\t* c-aux-info.c: Remove prototypes for concat/concat3.  Change\n+\tfunction `concat' from fixed parameters to variable parameters,\n+\tas is done in libiberty.  All callers of concat/concat3\n+\tchanged to use the new `concat' with variable args.\n+\n+\t* cccp.c: Remove things made redundant by libiberty.h and/or\n+\tconform to libiberty standards.\n+\t* cexp.y: Likewise.\n+\t* collect2.c: Likewise.\n+\t* config/1750a/1750a.h: Likewise.\n+\t* cppalloc.c: Likewise.\n+\t* cppexp.c: Likewise.\n+\t* cppfiles.c: Likewise.\n+\t* cpphash.c: Likewise.\n+\t* cpplib.c: Likewise.\n+\t* dyn-string.c: Likewise.\n+\t* fix-header.c: Likewise.\n+\t* gcc.c: Likewise.\n+\t* gcov.c: Likewise.\n+\t* genattr.c: Likewise.\n+\t* genattrtab.c: Likewise.\n+\t* gencheck.c: Likewise.\n+\t* gencodes.c: Likewise.\n+\t* genconfig.c: Likewise.\n+\t* genemit.c: Likewise.\n+\t* genextract.c: Likewise.\n+\t* genflags.c: Likewise.\n+\t* gengenrtl.c: Likewise.\n+\t* genopinit.c: Likewise.\n+\t* genoutput.c: Likewise.\n+\t* genpeep.c: Likewise.\n+\t* genrecog.c: Likewise.\n+\t* getpwd.c: Likewise.\n+\t* halfpic.c: Likewise.\n+\t* hash.c: Likewise.\n+\t* mips-tdump.c: Likewise.  Wrap malloc/realloc/calloc prototypes\n+\tin NEED_DECLARATION_* macros.\n+\n+\t* mips-tfile.c: Remove things made redundant by libiberty.h and/or\n+\tconform to libiberty standards.\n+\t(fatal): Fix const-ification of variable `format' in\n+\t!ANSI_PROTOTYPES case.\n+\n+\t* prefix.c: Remove things made redundant by libiberty.h and/or\n+\tconform to libiberty standards.\n+\n+\t* print-rtl.c: Rename variable `spaces' to `xspaces' to avoid\n+\tconflicting with function `spaces' from libiberty.\n+\n+\t* profile.c: Remove things made redundant by libiberty.h and/or\n+\tconform to libiberty standards.\n+\t* protoize.c: Likewise.\n+\t* rtl.h: Likewise.\n+\t* scan.h: Likewise.\n+\t* tlink.c: Likewise.\n+\t* toplev.c: Likewise.\n+\t* toplev.h: Likewise.\n+\t* tree.h: Likewise.\n+\n Thu Nov 26 08:38:06 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cppfiles.c (simplify_pathname): Un-ANSI-fy function definition."}, {"sha": "e6737c995dc856632d45c85209ecc122031eec07", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 99, "deletions": 88, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -37,64 +37,67 @@ typedef enum formals_style_enum formals_style;\n \n static char *data_type;\n \n-static char *concat\t\t\tPROTO((char *, char *));\n-static char *concat3\t\t\tPROTO((char *, char *, char *));\n static char *affix_data_type\t\tPROTO((char *));\n static char *gen_formal_list_for_type\tPROTO((tree, formals_style));\n static int   deserves_ellipsis\t\tPROTO((tree));\n static char *gen_formal_list_for_func_def PROTO((tree, formals_style));\n static char *gen_type\t\t\tPROTO((char *, tree, formals_style));\n static char *gen_decl\t\t\tPROTO((tree, int, formals_style));\n \f\n-/*  Take two strings and mash them together into a newly allocated area.  */\n+/* Concatenate a sequence of strings, returning the result.\n \n-static char *\n-concat (s1, s2)\n-     char *s1;\n-     char *s2;\n+   This function is based on the one in libiberty.  */\n+\n+char *\n+concat VPROTO((const char *first, ...))\n {\n-  int size1, size2;\n-  char *ret_val;\n+  register int length;\n+  register char *newstr;\n+  register char *end;\n+  register const char *arg;\n+  va_list args;\n+#ifndef ANSI_PROTOTYPES\n+  const char *first;\n+#endif\n+\n+  /* First compute the size of the result and get sufficient memory.  */\n+\n+  VA_START (args, first);\n+#ifndef ANSI_PROTOTYPES\n+  first = va_arg (args, const char *);\n+#endif\n+\n+  arg = first;\n+  length = 0;\n+\n+  while (arg != 0)\n+    {\n+      length += strlen (arg);\n+      arg = va_arg (args, const char *);\n+    }\n \n-  if (!s1)\n-    s1 = \"\";\n-  if (!s2)\n-    s2 = \"\";\n+  newstr = (char *) malloc (length + 1);\n+  va_end (args);\n \n-  size1 = strlen (s1);\n-  size2 = strlen (s2);\n-  ret_val = xmalloc (size1 + size2 + 1);\n-  strcpy (ret_val, s1);\n-  strcpy (&ret_val[size1], s2);\n-  return ret_val;\n-}\n+  /* Now copy the individual pieces to the result string.  */\n \n-/*  Take three strings and mash them together into a newly allocated area.  */\n+  VA_START (args, first);\n+#ifndef ANSI_PROTOTYPES\n+  first = va_arg (args, char *);\n+#endif\n \n-static char *\n-concat3 (s1, s2, s3)\n-     char *s1;\n-     char *s2;\n-     char *s3;\n-{\n-  int size1, size2, size3;\n-  char *ret_val;\n+  end = newstr;\n+  arg = first;\n+  while (arg != 0)\n+    {\n+      while (*arg)\n+\t*end++ = *arg++;\n+      arg = va_arg (args, const char *);\n+    }\n+  *end = '\\000';\n+  va_end (args);\n \n-  if (!s1)\n-    s1 = \"\";\n-  if (!s2)\n-    s2 = \"\";\n-  if (!s3)\n-    s3 = \"\";\n-\n-  size1 = strlen (s1);\n-  size2 = strlen (s2);\n-  size3 = strlen (s3);\n-  ret_val = xmalloc (size1 + size2 + size3 + 1);\n-  strcpy (ret_val, s1);\n-  strcpy (&ret_val[size1], s2);\n-  strcpy (&ret_val[size1+size2], s3);\n-  return ret_val;\n+  return (newstr);\n }\n \n /* Given a string representing an entire type or an entire declaration\n@@ -140,13 +143,13 @@ affix_data_type (type_or_decl)\n      add a blank after the data-type of course.  */\n \n   if (p == type_or_decl)\n-    return concat3 (data_type, \" \", type_or_decl);\n+    return concat (data_type, \" \", type_or_decl, NULL_PTR);\n \n   saved = *p;\n   *p = '\\0';\n-  qualifiers_then_data_type = concat (type_or_decl, data_type);\n+  qualifiers_then_data_type = concat (type_or_decl, data_type, NULL_PTR);\n   *p = saved;\n-  return concat3 (qualifiers_then_data_type, \" \", p);\n+  return concat (qualifiers_then_data_type, \" \", p, NULL_PTR);\n }\n \n /* Given a tree node which represents some \"function type\", generate the\n@@ -173,13 +176,13 @@ gen_formal_list_for_type (fntype, style)\n       char *this_type;\n \n       if (*formal_list)\n-        formal_list = concat (formal_list, \", \");\n+        formal_list = concat (formal_list, \", \", NULL_PTR);\n \n       this_type = gen_type (\"\", TREE_VALUE (formal_type), ansi);\n       formal_list\n \t= ((strlen (this_type))\n-\t   ? concat (formal_list, affix_data_type (this_type))\n-\t   : concat (formal_list, data_type));\n+\t   ? concat (formal_list, affix_data_type (this_type), NULL_PTR)\n+\t   : concat (formal_list, data_type, NULL_PTR));\n \n       formal_type = TREE_CHAIN (formal_type);\n     }\n@@ -228,10 +231,10 @@ gen_formal_list_for_type (fntype, style)\n          petered out to a NULL (i.e. without being terminated by a\n          void_type_node) then we need to tack on an ellipsis.  */\n       if (!formal_type)\n-        formal_list = concat (formal_list, \", ...\");\n+        formal_list = concat (formal_list, \", ...\", NULL_PTR);\n     }\n \n-  return concat3 (\" (\", formal_list, \")\");\n+  return concat (\" (\", formal_list, \")\", NULL_PTR);\n }\n \n /* For the generation of an ANSI prototype for a function definition, we have\n@@ -290,23 +293,23 @@ gen_formal_list_for_func_def (fndecl, style)\n       char *this_formal;\n \n       if (*formal_list && ((style == ansi) || (style == k_and_r_names)))\n-        formal_list = concat (formal_list, \", \");\n+        formal_list = concat (formal_list, \", \", NULL_PTR);\n       this_formal = gen_decl (formal_decl, 0, style);\n       if (style == k_and_r_decls)\n-        formal_list = concat3 (formal_list, this_formal, \"; \");\n+        formal_list = concat (formal_list, this_formal, \"; \", NULL_PTR);\n       else\n-        formal_list = concat (formal_list, this_formal);\n+        formal_list = concat (formal_list, this_formal, NULL_PTR);\n       formal_decl = TREE_CHAIN (formal_decl);\n     }\n   if (style == ansi)\n     {\n       if (!DECL_ARGUMENTS (fndecl))\n-        formal_list = concat (formal_list, \"void\");\n+        formal_list = concat (formal_list, \"void\", NULL_PTR);\n       if (deserves_ellipsis (TREE_TYPE (fndecl)))\n-        formal_list = concat (formal_list, \", ...\");\n+        formal_list = concat (formal_list, \", ...\", NULL_PTR);\n     }\n   if ((style == ansi) || (style == k_and_r_names))\n-    formal_list = concat3 (\" (\", formal_list, \")\");\n+    formal_list = concat (\" (\", formal_list, \")\", NULL_PTR);\n   return formal_list;\n }\n \n@@ -368,36 +371,41 @@ gen_type (ret_val, t, style)\n         {\n         case POINTER_TYPE:\n           if (TYPE_READONLY (t))\n-            ret_val = concat (\"const \", ret_val);\n+            ret_val = concat (\"const \", ret_val, NULL_PTR);\n           if (TYPE_VOLATILE (t))\n-            ret_val = concat (\"volatile \", ret_val);\n+            ret_val = concat (\"volatile \", ret_val, NULL_PTR);\n \n-          ret_val = concat (\"*\", ret_val);\n+          ret_val = concat (\"*\", ret_val, NULL_PTR);\n \n \t  if (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE || TREE_CODE (TREE_TYPE (t)) == FUNCTION_TYPE)\n-\t    ret_val = concat3 (\"(\", ret_val, \")\");\n+\t    ret_val = concat (\"(\", ret_val, \")\", NULL_PTR);\n \n           ret_val = gen_type (ret_val, TREE_TYPE (t), style);\n \n           return ret_val;\n \n         case ARRAY_TYPE:\n \t  if (TYPE_SIZE (t) == 0 || TREE_CODE (TYPE_SIZE (t)) != INTEGER_CST)\n-\t    ret_val = gen_type (concat (ret_val, \"[]\"), TREE_TYPE (t), style);\n+\t    ret_val = gen_type (concat (ret_val, \"[]\", NULL_PTR),\n+\t\t\t\tTREE_TYPE (t), style);\n \t  else if (int_size_in_bytes (t) == 0)\n-\t    ret_val = gen_type (concat (ret_val, \"[0]\"), TREE_TYPE (t), style);\n+\t    ret_val = gen_type (concat (ret_val, \"[0]\", NULL_PTR),\n+\t\t\t\tTREE_TYPE (t), style);\n \t  else\n \t    {\n \t      int size = (int_size_in_bytes (t) / int_size_in_bytes (TREE_TYPE (t)));\n \t      char buff[10];\n \t      sprintf (buff, \"[%d]\", size);\n-\t      ret_val = gen_type (concat (ret_val, buff),\n+\t      ret_val = gen_type (concat (ret_val, buff, NULL_PTR),\n \t\t\t\t  TREE_TYPE (t), style);\n \t    }\n           break;\n \n         case FUNCTION_TYPE:\n-          ret_val = gen_type (concat (ret_val, gen_formal_list_for_type (t, style)), TREE_TYPE (t), style);\n+          ret_val = gen_type (concat (ret_val,\n+\t\t\t\t      gen_formal_list_for_type (t, style),\n+\t\t\t\t      NULL_PTR),\n+\t\t\t      TREE_TYPE (t), style);\n           break;\n \n         case IDENTIFIER_NODE:\n@@ -424,13 +432,14 @@ gen_type (ret_val, t, style)\n \t      chain_p = TYPE_FIELDS (t);\n \t      while (chain_p)\n \t\t{\n-\t\t  data_type = concat (data_type, gen_decl (chain_p, 0, ansi));\n+\t\t  data_type = concat (data_type, gen_decl (chain_p, 0, ansi),\n+\t\t\t\t      NULL_PTR);\n \t\t  chain_p = TREE_CHAIN (chain_p);\n-\t\t  data_type = concat (data_type, \"; \");\n+\t\t  data_type = concat (data_type, \"; \", NULL_PTR);\n \t\t}\n-\t      data_type = concat3 (\"{ \", data_type, \"}\");\n+\t      data_type = concat (\"{ \", data_type, \"}\", NULL_PTR);\n \t    }\n-\t  data_type = concat (\"struct \", data_type);\n+\t  data_type = concat (\"struct \", data_type, NULL_PTR);\n \t  break;\n \n         case UNION_TYPE:\n@@ -442,13 +451,14 @@ gen_type (ret_val, t, style)\n \t      chain_p = TYPE_FIELDS (t);\n \t      while (chain_p)\n \t\t{\n-\t\t  data_type = concat (data_type, gen_decl (chain_p, 0, ansi));\n+\t\t  data_type = concat (data_type, gen_decl (chain_p, 0, ansi),\n+\t\t\t\t      NULL_PTR);\n \t\t  chain_p = TREE_CHAIN (chain_p);\n-\t\t  data_type = concat (data_type, \"; \");\n+\t\t  data_type = concat (data_type, \"; \", NULL_PTR);\n \t\t}\n-\t      data_type = concat3 (\"{ \", data_type, \"}\");\n+\t      data_type = concat (\"{ \", data_type, \"}\", NULL_PTR);\n \t    }\n-\t  data_type = concat (\"union \", data_type);\n+\t  data_type = concat (\"union \", data_type, NULL_PTR);\n \t  break;\n \n         case ENUMERAL_TYPE:\n@@ -461,14 +471,14 @@ gen_type (ret_val, t, style)\n \t      while (chain_p)\n \t\t{\n \t\t  data_type = concat (data_type,\n-\t\t\tIDENTIFIER_POINTER (TREE_PURPOSE (chain_p)));\n+\t\t\tIDENTIFIER_POINTER (TREE_PURPOSE (chain_p)), NULL_PTR);\n \t\t  chain_p = TREE_CHAIN (chain_p);\n \t\t  if (chain_p)\n-\t\t    data_type = concat (data_type, \", \");\n+\t\t    data_type = concat (data_type, \", \", NULL_PTR);\n \t\t}\n-\t      data_type = concat3 (\"{ \", data_type, \" }\");\n+\t      data_type = concat (\"{ \", data_type, \" }\", NULL_PTR);\n \t    }\n-\t  data_type = concat (\"enum \", data_type);\n+\t  data_type = concat (\"enum \", data_type, NULL_PTR);\n \t  break;\n \n         case TYPE_DECL:\n@@ -480,7 +490,7 @@ gen_type (ret_val, t, style)\n           /* Normally, `unsigned' is part of the deal.  Not so if it comes\n     \t     with a type qualifier.  */\n           if (TREE_UNSIGNED (t) && TYPE_QUALS (t))\n-    \t    data_type = concat (\"unsigned \", data_type);\n+    \t    data_type = concat (\"unsigned \", data_type, NULL_PTR);\n \t  break;\n \n         case REAL_TYPE:\n@@ -500,11 +510,11 @@ gen_type (ret_val, t, style)\n         }\n     }\n   if (TYPE_READONLY (t))\n-    ret_val = concat (\"const \", ret_val);\n+    ret_val = concat (\"const \", ret_val, NULL_PTR);\n   if (TYPE_VOLATILE (t))\n-    ret_val = concat (\"volatile \", ret_val);\n+    ret_val = concat (\"volatile \", ret_val, NULL_PTR);\n   if (TYPE_RESTRICT (t))\n-    ret_val = concat (\"restrict \", ret_val);\n+    ret_val = concat (\"restrict \", ret_val, NULL_PTR);\n   return ret_val;\n }\n \n@@ -546,9 +556,9 @@ gen_decl (decl, is_func_definition, style)\n      generate the qualifiers here.  */\n \n   if (TREE_THIS_VOLATILE (decl))\n-    ret_val = concat (\"volatile \", ret_val);\n+    ret_val = concat (\"volatile \", ret_val, NULL_PTR);\n   if (TREE_READONLY (decl))\n-    ret_val = concat (\"const \", ret_val);\n+    ret_val = concat (\"const \", ret_val, NULL_PTR);\n \n   data_type = \"\";\n \n@@ -566,7 +576,8 @@ gen_decl (decl, is_func_definition, style)\n \n   if (TREE_CODE (decl) == FUNCTION_DECL && is_func_definition)\n     {\n-      ret_val = concat (ret_val, gen_formal_list_for_func_def (decl, ansi));\n+      ret_val = concat (ret_val, gen_formal_list_for_func_def (decl, ansi),\n+\t\t\tNULL_PTR);\n \n       /* Since we have already added in the formals list stuff, here we don't\n          add the whole \"type\" of the function we are considering (which\n@@ -583,11 +594,11 @@ gen_decl (decl, is_func_definition, style)\n   ret_val = affix_data_type (ret_val);\n \n   if (TREE_CODE (decl) != FUNCTION_DECL && DECL_REGISTER (decl))\n-    ret_val = concat (\"register \", ret_val);\n+    ret_val = concat (\"register \", ret_val, NULL_PTR);\n   if (TREE_PUBLIC (decl))\n-    ret_val = concat (\"extern \", ret_val);\n+    ret_val = concat (\"extern \", ret_val, NULL_PTR);\n   if (TREE_CODE (decl) == FUNCTION_DECL && !TREE_PUBLIC (decl))\n-    ret_val = concat (\"static \", ret_val);\n+    ret_val = concat (\"static \", ret_val, NULL_PTR);\n \n   return ret_val;\n }"}, {"sha": "87868a0e8307560f2d345ed50631957d3413d954", "filename": "gcc/cccp.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -1035,9 +1035,6 @@ static void pfatal_with_name PROTO((char *)) __attribute__ ((noreturn));\n static void pipe_closed PROTO((int)) __attribute__ ((noreturn));\n \n static void memory_full PROTO((void)) __attribute__ ((noreturn));\n-GENERIC_PTR xmalloc PROTO((size_t));\n-static GENERIC_PTR xrealloc PROTO((GENERIC_PTR, size_t));\n-static GENERIC_PTR xcalloc PROTO((size_t, size_t));\n static char *savestring PROTO((char *));\n static void print_help PROTO((void));\n \f\n@@ -10678,34 +10675,33 @@ memory_full ()\n   fatal (\"Memory exhausted.\");\n }\n \n-\n-GENERIC_PTR\n+PTR\n xmalloc (size)\n-     size_t size;\n+  size_t size;\n {\n-  register GENERIC_PTR ptr = (GENERIC_PTR) malloc (size);\n+  register PTR ptr = (PTR) malloc (size);\n   if (!ptr)\n     memory_full ();\n   return ptr;\n }\n \n-static GENERIC_PTR\n+PTR\n xrealloc (old, size)\n-     GENERIC_PTR old;\n-     size_t size;\n+  PTR old;\n+  size_t size;\n {\n-  register GENERIC_PTR ptr = (GENERIC_PTR) realloc (old, size);\n+  register PTR ptr = (PTR) realloc (old, size);\n   if (!ptr)\n     memory_full ();\n   return ptr;\n }\n \n-static GENERIC_PTR\n+PTR\n xcalloc (number, size)\n-     size_t number, size;\n+  size_t number, size;\n {\n   register size_t total = number * size;\n-  register GENERIC_PTR ptr = (GENERIC_PTR) malloc (total);\n+  register PTR ptr = (PTR) malloc (total);\n   if (!ptr)\n     memory_full ();\n   bzero (ptr, total);"}, {"sha": "918f8284d76702092deececd582c04f91c6e93f0", "filename": "gcc/cexp.c", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -164,7 +164,6 @@ extern int c89;\n \n struct constant;\n \n-GENERIC_PTR xmalloc PROTO((size_t));\n HOST_WIDE_INT parse_escape PROTO((char **, HOST_WIDE_INT));\n int check_assertion PROTO((U_CHAR *, int, int, struct arglist *));\n struct hashnode *lookup PROTO((U_CHAR *, int, int));\n@@ -181,7 +180,7 @@ static void integer_overflow PROTO((void));\n #define SIGNED (~0)\n #define UNSIGNED 0\n \n-#line 195 \"cexp.y\"\n+#line 188 \"cexp.y\"\n typedef union {\n   struct constant {HOST_WIDE_INT value; int signedp;} integer;\n   struct name {U_CHAR *address; int length;} name;\n@@ -262,10 +261,10 @@ static const short yyrhs[] = {    35,\n \n #if YYDEBUG != 0\n static const short yyrline[] = { 0,\n-   225,   235,   236,   243,   248,   251,   253,   256,   260,   262,\n-   267,   272,   285,   302,   315,   321,   327,   333,   339,   342,\n-   345,   352,   359,   366,   373,   376,   379,   382,   385,   388,\n-   391,   394,   396,   399,   402,   404,   406,   414,   416,   429\n+   218,   228,   229,   236,   241,   244,   246,   249,   253,   255,\n+   260,   265,   278,   295,   308,   314,   320,   326,   332,   335,\n+   338,   345,   352,   359,   366,   369,   372,   375,   378,   381,\n+   384,   387,   389,   392,   395,   397,   399,   407,   409,   422\n };\n #endif\n \n@@ -869,7 +868,7 @@ yyparse(YYPARSE_PARAM_ARG)\n   switch (yyn) {\n \n case 1:\n-#line 226 \"cexp.y\"\n+#line 219 \"cexp.y\"\n {\n \t\t  expression_value = yyvsp[0].integer.value;\n #ifdef TEST_EXP_READER\n@@ -878,55 +877,55 @@ case 1:\n \t\t;\n     break;}\n case 3:\n-#line 237 \"cexp.y\"\n+#line 230 \"cexp.y\"\n { if (pedantic)\n \t\t\t    pedwarn (\"comma operator in operand of `#if'\");\n \t\t\t  yyval.integer = yyvsp[0].integer; ;\n     break;}\n case 4:\n-#line 244 \"cexp.y\"\n+#line 237 \"cexp.y\"\n { yyval.integer.value = - yyvsp[0].integer.value;\n \t\t\t  yyval.integer.signedp = yyvsp[0].integer.signedp;\n \t\t\t  if ((yyval.integer.value & yyvsp[0].integer.value & yyval.integer.signedp) < 0)\n \t\t\t    integer_overflow (); ;\n     break;}\n case 5:\n-#line 249 \"cexp.y\"\n+#line 242 \"cexp.y\"\n { yyval.integer.value = ! yyvsp[0].integer.value;\n \t\t\t  yyval.integer.signedp = SIGNED; ;\n     break;}\n case 6:\n-#line 252 \"cexp.y\"\n+#line 245 \"cexp.y\"\n { yyval.integer = yyvsp[0].integer; ;\n     break;}\n case 7:\n-#line 254 \"cexp.y\"\n+#line 247 \"cexp.y\"\n { yyval.integer.value = ~ yyvsp[0].integer.value;\n \t\t\t  yyval.integer.signedp = yyvsp[0].integer.signedp; ;\n     break;}\n case 8:\n-#line 257 \"cexp.y\"\n+#line 250 \"cexp.y\"\n { yyval.integer.value = check_assertion (yyvsp[0].name.address, yyvsp[0].name.length,\n \t\t\t\t\t\t      0, NULL_PTR);\n \t\t\t  yyval.integer.signedp = SIGNED; ;\n     break;}\n case 9:\n-#line 261 \"cexp.y\"\n+#line 254 \"cexp.y\"\n { keyword_parsing = 1; ;\n     break;}\n case 10:\n-#line 263 \"cexp.y\"\n+#line 256 \"cexp.y\"\n { yyval.integer.value = check_assertion (yyvsp[-4].name.address, yyvsp[-4].name.length,\n \t\t\t\t\t\t      1, yyvsp[-1].keywords);\n \t\t\t  keyword_parsing = 0;\n \t\t\t  yyval.integer.signedp = SIGNED; ;\n     break;}\n case 11:\n-#line 268 \"cexp.y\"\n+#line 261 \"cexp.y\"\n { yyval.integer = yyvsp[-1].integer; ;\n     break;}\n case 12:\n-#line 273 \"cexp.y\"\n+#line 266 \"cexp.y\"\n { yyval.integer.signedp = yyvsp[-2].integer.signedp & yyvsp[0].integer.signedp;\n \t\t\t  if (yyval.integer.signedp)\n \t\t\t    {\n@@ -941,7 +940,7 @@ case 12:\n \t\t\t\t\t* yyvsp[0].integer.value); ;\n     break;}\n case 13:\n-#line 286 \"cexp.y\"\n+#line 279 \"cexp.y\"\n { if (yyvsp[0].integer.value == 0)\n \t\t\t    {\n \t\t\t      if (!skip_evaluation)\n@@ -960,7 +959,7 @@ case 13:\n \t\t\t\t\t/ yyvsp[0].integer.value); ;\n     break;}\n case 14:\n-#line 303 \"cexp.y\"\n+#line 296 \"cexp.y\"\n { if (yyvsp[0].integer.value == 0)\n \t\t\t    {\n \t\t\t      if (!skip_evaluation)\n@@ -975,49 +974,49 @@ case 14:\n \t\t\t\t\t% yyvsp[0].integer.value); ;\n     break;}\n case 15:\n-#line 316 \"cexp.y\"\n+#line 309 \"cexp.y\"\n { yyval.integer.value = yyvsp[-2].integer.value + yyvsp[0].integer.value;\n \t\t\t  yyval.integer.signedp = yyvsp[-2].integer.signedp & yyvsp[0].integer.signedp;\n \t\t\t  if (overflow_sum_sign (yyvsp[-2].integer.value, yyvsp[0].integer.value,\n \t\t\t\t\t\t yyval.integer.value, yyval.integer.signedp))\n \t\t\t    integer_overflow (); ;\n     break;}\n case 16:\n-#line 322 \"cexp.y\"\n+#line 315 \"cexp.y\"\n { yyval.integer.value = yyvsp[-2].integer.value - yyvsp[0].integer.value;\n \t\t\t  yyval.integer.signedp = yyvsp[-2].integer.signedp & yyvsp[0].integer.signedp;\n \t\t\t  if (overflow_sum_sign (yyval.integer.value, yyvsp[0].integer.value,\n \t\t\t\t\t\t yyvsp[-2].integer.value, yyval.integer.signedp))\n \t\t\t    integer_overflow (); ;\n     break;}\n case 17:\n-#line 328 \"cexp.y\"\n+#line 321 \"cexp.y\"\n { yyval.integer.signedp = yyvsp[-2].integer.signedp;\n \t\t\t  if ((yyvsp[0].integer.value & yyvsp[0].integer.signedp) < 0)\n \t\t\t    yyval.integer.value = right_shift (&yyvsp[-2].integer, -yyvsp[0].integer.value);\n \t\t\t  else\n \t\t\t    yyval.integer.value = left_shift (&yyvsp[-2].integer, yyvsp[0].integer.value); ;\n     break;}\n case 18:\n-#line 334 \"cexp.y\"\n+#line 327 \"cexp.y\"\n { yyval.integer.signedp = yyvsp[-2].integer.signedp;\n \t\t\t  if ((yyvsp[0].integer.value & yyvsp[0].integer.signedp) < 0)\n \t\t\t    yyval.integer.value = left_shift (&yyvsp[-2].integer, -yyvsp[0].integer.value);\n \t\t\t  else\n \t\t\t    yyval.integer.value = right_shift (&yyvsp[-2].integer, yyvsp[0].integer.value); ;\n     break;}\n case 19:\n-#line 340 \"cexp.y\"\n+#line 333 \"cexp.y\"\n { yyval.integer.value = (yyvsp[-2].integer.value == yyvsp[0].integer.value);\n \t\t\t  yyval.integer.signedp = SIGNED; ;\n     break;}\n case 20:\n-#line 343 \"cexp.y\"\n+#line 336 \"cexp.y\"\n { yyval.integer.value = (yyvsp[-2].integer.value != yyvsp[0].integer.value);\n \t\t\t  yyval.integer.signedp = SIGNED; ;\n     break;}\n case 21:\n-#line 346 \"cexp.y\"\n+#line 339 \"cexp.y\"\n { yyval.integer.signedp = SIGNED;\n \t\t\t  if (yyvsp[-2].integer.signedp & yyvsp[0].integer.signedp)\n \t\t\t    yyval.integer.value = yyvsp[-2].integer.value <= yyvsp[0].integer.value;\n@@ -1026,7 +1025,7 @@ case 21:\n \t\t\t\t\t<= yyvsp[0].integer.value); ;\n     break;}\n case 22:\n-#line 353 \"cexp.y\"\n+#line 346 \"cexp.y\"\n { yyval.integer.signedp = SIGNED;\n \t\t\t  if (yyvsp[-2].integer.signedp & yyvsp[0].integer.signedp)\n \t\t\t    yyval.integer.value = yyvsp[-2].integer.value >= yyvsp[0].integer.value;\n@@ -1035,7 +1034,7 @@ case 22:\n \t\t\t\t\t>= yyvsp[0].integer.value); ;\n     break;}\n case 23:\n-#line 360 \"cexp.y\"\n+#line 353 \"cexp.y\"\n { yyval.integer.signedp = SIGNED;\n \t\t\t  if (yyvsp[-2].integer.signedp & yyvsp[0].integer.signedp)\n \t\t\t    yyval.integer.value = yyvsp[-2].integer.value < yyvsp[0].integer.value;\n@@ -1044,7 +1043,7 @@ case 23:\n \t\t\t\t\t< yyvsp[0].integer.value); ;\n     break;}\n case 24:\n-#line 367 \"cexp.y\"\n+#line 360 \"cexp.y\"\n { yyval.integer.signedp = SIGNED;\n \t\t\t  if (yyvsp[-2].integer.signedp & yyvsp[0].integer.signedp)\n \t\t\t    yyval.integer.value = yyvsp[-2].integer.value > yyvsp[0].integer.value;\n@@ -1053,76 +1052,76 @@ case 24:\n \t\t\t\t\t> yyvsp[0].integer.value); ;\n     break;}\n case 25:\n-#line 374 \"cexp.y\"\n+#line 367 \"cexp.y\"\n { yyval.integer.value = yyvsp[-2].integer.value & yyvsp[0].integer.value;\n \t\t\t  yyval.integer.signedp = yyvsp[-2].integer.signedp & yyvsp[0].integer.signedp; ;\n     break;}\n case 26:\n-#line 377 \"cexp.y\"\n+#line 370 \"cexp.y\"\n { yyval.integer.value = yyvsp[-2].integer.value ^ yyvsp[0].integer.value;\n \t\t\t  yyval.integer.signedp = yyvsp[-2].integer.signedp & yyvsp[0].integer.signedp; ;\n     break;}\n case 27:\n-#line 380 \"cexp.y\"\n+#line 373 \"cexp.y\"\n { yyval.integer.value = yyvsp[-2].integer.value | yyvsp[0].integer.value;\n \t\t\t  yyval.integer.signedp = yyvsp[-2].integer.signedp & yyvsp[0].integer.signedp; ;\n     break;}\n case 28:\n-#line 383 \"cexp.y\"\n+#line 376 \"cexp.y\"\n { skip_evaluation += !yyvsp[-1].integer.value; ;\n     break;}\n case 29:\n-#line 385 \"cexp.y\"\n+#line 378 \"cexp.y\"\n { skip_evaluation -= !yyvsp[-3].integer.value;\n \t\t\t  yyval.integer.value = (yyvsp[-3].integer.value && yyvsp[0].integer.value);\n \t\t\t  yyval.integer.signedp = SIGNED; ;\n     break;}\n case 30:\n-#line 389 \"cexp.y\"\n+#line 382 \"cexp.y\"\n { skip_evaluation += !!yyvsp[-1].integer.value; ;\n     break;}\n case 31:\n-#line 391 \"cexp.y\"\n+#line 384 \"cexp.y\"\n { skip_evaluation -= !!yyvsp[-3].integer.value;\n \t\t\t  yyval.integer.value = (yyvsp[-3].integer.value || yyvsp[0].integer.value);\n \t\t\t  yyval.integer.signedp = SIGNED; ;\n     break;}\n case 32:\n-#line 395 \"cexp.y\"\n+#line 388 \"cexp.y\"\n { skip_evaluation += !yyvsp[-1].integer.value; ;\n     break;}\n case 33:\n-#line 397 \"cexp.y\"\n+#line 390 \"cexp.y\"\n { skip_evaluation += !!yyvsp[-4].integer.value - !yyvsp[-4].integer.value; ;\n     break;}\n case 34:\n-#line 399 \"cexp.y\"\n+#line 392 \"cexp.y\"\n { skip_evaluation -= !!yyvsp[-6].integer.value;\n \t\t\t  yyval.integer.value = yyvsp[-6].integer.value ? yyvsp[-3].integer.value : yyvsp[0].integer.value;\n \t\t\t  yyval.integer.signedp = yyvsp[-3].integer.signedp & yyvsp[0].integer.signedp; ;\n     break;}\n case 35:\n-#line 403 \"cexp.y\"\n+#line 396 \"cexp.y\"\n { yyval.integer = yylval.integer; ;\n     break;}\n case 36:\n-#line 405 \"cexp.y\"\n+#line 398 \"cexp.y\"\n { yyval.integer = yylval.integer; ;\n     break;}\n case 37:\n-#line 407 \"cexp.y\"\n+#line 400 \"cexp.y\"\n { if (warn_undef && !skip_evaluation)\n \t\t\t    warning (\"`%.*s' is not defined\",\n \t\t\t\t     yyvsp[0].name.length, yyvsp[0].name.address);\n \t\t\t  yyval.integer.value = 0;\n \t\t\t  yyval.integer.signedp = SIGNED; ;\n     break;}\n case 38:\n-#line 415 \"cexp.y\"\n+#line 408 \"cexp.y\"\n { yyval.keywords = 0; ;\n     break;}\n case 39:\n-#line 417 \"cexp.y\"\n+#line 410 \"cexp.y\"\n { struct arglist *temp;\n \t\t\t  yyval.keywords = (struct arglist *) xmalloc (sizeof (struct arglist));\n \t\t\t  yyval.keywords->next = yyvsp[-2].keywords;\n@@ -1137,7 +1136,7 @@ case 39:\n \t\t\t  temp->next->length = 1; ;\n     break;}\n case 40:\n-#line 430 \"cexp.y\"\n+#line 423 \"cexp.y\"\n { yyval.keywords = (struct arglist *) xmalloc (sizeof (struct arglist));\n \t\t\t  yyval.keywords->name = yyvsp[-1].name.address;\n \t\t\t  yyval.keywords->length = yyvsp[-1].name.length;\n@@ -1341,7 +1340,7 @@ case 40:\n   yystate = yyn;\n   goto yynewstate;\n }\n-#line 435 \"cexp.y\"\n+#line 428 \"cexp.y\"\n \n \f\n /* During parsing of a C expression, the pointer to the next character\n@@ -2156,10 +2155,10 @@ lookup (name, len, hash)\n   return (DEFAULT_SIGNED_CHAR) ? 0 : ((struct hashnode *) -1);\n }\n \n-GENERIC_PTR\n+PTR\n xmalloc (size)\n-     size_t size;\n+  size_t size;\n {\n-  return (GENERIC_PTR) malloc (size);\n+  return (PTR) malloc (size);\n }\n #endif"}, {"sha": "d63c4d1114362ec9703eb2b716e0652115af43f4", "filename": "gcc/cexp.y", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcexp.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcexp.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.y?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -168,7 +168,6 @@ extern int c89;\n \n struct constant;\n \n-GENERIC_PTR xmalloc PROTO((size_t));\n HOST_WIDE_INT parse_escape PROTO((char **, HOST_WIDE_INT));\n int check_assertion PROTO((U_CHAR *, int, int, struct arglist *));\n struct hashnode *lookup PROTO((U_CHAR *, int, int));\n@@ -1240,10 +1239,10 @@ lookup (name, len, hash)\n   return (DEFAULT_SIGNED_CHAR) ? 0 : ((struct hashnode *) -1);\n }\n \n-GENERIC_PTR\n+PTR\n xmalloc (size)\n-     size_t size;\n+  size_t size;\n {\n-  return (GENERIC_PTR) malloc (size);\n+  return (PTR) malloc (size);\n }\n #endif"}, {"sha": "7638e4d84620ba0e536139de604dbb37bbd5a071", "filename": "gcc/collect2.c", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -302,10 +302,6 @@ static char *resolve_lib_name\tPROTO((char *));\n static int use_import_list\tPROTO((char *));\n static int ignore_library\tPROTO((char *));\n #endif\n-\n-char *xcalloc ();\n-char *xmalloc ();\n-\n \f\n #ifdef NO_DUP2\n int\n@@ -514,36 +510,32 @@ handler (signo)\n }\n \n \f\n-char *\n+PTR\n xcalloc (size1, size2)\n-     int size1, size2;\n+  size_t size1, size2;\n {\n-  char *ptr = (char *) calloc (size1, size2);\n-  if (ptr)\n-    return ptr;\n-\n-  fatal (\"out of memory\");\n-  return (char *) 0;\n+  PTR ptr = (PTR) calloc (size1, size2);\n+  if (!ptr)\n+    fatal (\"out of memory\");\n+  return ptr;\n }\n \n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  char *ptr = (char *) malloc (size);\n-  if (ptr)\n-    return ptr;\n-\n-  fatal (\"out of memory\");\n-  return (char *) 0;\n+  PTR ptr = (PTR) malloc (size);\n+  if (!ptr)\n+    fatal (\"out of memory\");\n+  return ptr;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  register char *value = (char *) realloc (ptr, size);\n+  register PTR value = (PTR) realloc (ptr, size);\n   if (value == 0)\n     fatal (\"virtual memory exhausted\");\n   return value;"}, {"sha": "5d3b2a0247e741782c80570f8a120cb643a6d26a", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -66,7 +66,7 @@ extern struct jumplabel_array jmplbl[];\n extern int datalbl_ndx, jmplbl_ndx, label_pending, program_counter;\n extern enum section current_section;\n extern char *sectname[4];\n-extern char *xstrdup(), *float_label();\n+extern char *float_label();\n extern struct rtx_def *function_arg ();\n extern char *movcnt_regno_adjust ();\n extern char *mod_regno_adjust ();"}, {"sha": "3cd72ee1fa2ef676d160410df7f9846228a57f86", "filename": "gcc/cppalloc.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcppalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcppalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppalloc.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -35,22 +35,22 @@ memory_full ()\n   exit (FATAL_EXIT_CODE);\n }\n \n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *ptr = (char *) malloc (size);\n+  register PTR ptr = (PTR) malloc (size);\n   if (ptr == 0)\n     memory_full ();\n   return ptr;\n }\n \n-char *\n+PTR\n xrealloc (old, size)\n-     char *old;\n-     unsigned size;\n+  PTR old;\n+  size_t size;\n {\n-  register char *ptr = (char *) realloc (old, size);\n+  register PTR ptr = (PTR) realloc (old, size);\n   if (ptr == 0)\n     memory_full ();\n   return ptr;"}, {"sha": "419e5bd79dce18a69f496ff24886bbf066bc33a5", "filename": "gcc/cppexp.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -28,9 +28,6 @@ Written by Per Bothner 1994.  */\n #include \"system.h\"\n #include \"cpplib.h\"\n \n-extern char *xmalloc PARAMS ((unsigned));\n-extern char *xrealloc PARAMS ((void *, unsigned));\n-\n #ifdef MULTIBYTE_CHARS\n #include <locale.h>\n #endif"}, {"sha": "8a4a0efb41cf44987bb8fc5a38c232cb53fd07a0", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -47,10 +47,6 @@ static void simplify_pathname\t\tPROTO ((char *));\n static void hack_vms_include_specification PROTO ((char *));\n #endif\n \n-/* Not safe to prototype these. */\n-extern char *xmalloc();\n-extern char *xrealloc();\n-\n /* Windows does not natively support inodes, and neither does MSDOS.\n    VMS has non-numeric inodes. */\n #ifdef VMS"}, {"sha": "1fcabaf0c86cc865c2efe5fa20568b1f2fb1c29d", "filename": "gcc/cpphash.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -27,8 +27,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n \n-extern char *xmalloc PARAMS ((unsigned));\n-\n static HASHNODE *hashtab[HASHSIZE];\n \n /* Return hash function on name.  must be compatible with the one"}, {"sha": "828bcf9a0a71ee8a3f83ba4da414ba6c5b4a941f", "filename": "gcc/cpplib.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -184,7 +184,6 @@ struct cpp_pending {\n \n /* Forward declarations.  */\n \n-char *xmalloc ();\n extern void cpp_hash_cleanup PARAMS ((cpp_reader *));\n \n static char *my_strerror\t\tPROTO ((int));\n@@ -213,8 +212,6 @@ static void free_token_list\t\tPROTO ((struct arglist *));\n static void push_macro_expansion PARAMS ((cpp_reader *,\n \t\t\t\t\t  U_CHAR *, int, HASHNODE *));\n static struct cpp_pending *nreverse_pending PARAMS ((struct cpp_pending *));\n-extern char *xrealloc ();\n-static char *xcalloc\t\t\tPROTO ((unsigned, unsigned));\n \n static void conditional_skip\t\tPROTO ((cpp_reader *, int,\n \t\t\t\t\t       enum node_type, U_CHAR *));\n@@ -6436,12 +6433,12 @@ free_token_list (tokens)\n    be moved into cppalloc.c.  We can't do that right now because\n    then we'd get multiple-symbol clashes with toplev.c and several\n    other people. */\n-static char *\n+PTR\n xcalloc (number, size)\n-     unsigned number, size;\n+  size_t number, size;\n {\n   register unsigned total = number * size;\n-  register char *ptr = (char *) xmalloc (total);\n+  register PTR ptr = (PTR) xmalloc (total);\n   bzero (ptr, total);\n   return ptr;\n }"}, {"sha": "4f8eb160765cb55a4ea2182f1d5cc4e15ac94b2e", "filename": "gcc/dyn-string.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fdyn-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fdyn-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdyn-string.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -22,9 +22,6 @@\n #include \"system.h\"\n #include \"dyn-string.h\"\n \n-extern char *xmalloc ();\n-extern char *xrealloc ();\n-\n /* Create a new dynamic string capable of holding at least SPACE\n    characters, including the terminating NUL.  If SPACE is 0, it\n    will be silently increased to 1.  */"}, {"sha": "76ae479e0ae67a6c08086990ae1abf8bcfd564e1", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -873,7 +873,7 @@ write_rbrac ()\n \n char *\n xstrdup (str)\n-     char *str;\n+  const char *str;\n {\n   char *copy = (char *) xmalloc (strlen (str) + 1);\n   strcpy (copy, str);"}, {"sha": "8521665768c4d97066200861a38a47a92b54262c", "filename": "gcc/gcc.c", "status": "modified", "additions": 7, "deletions": 75, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -38,18 +38,9 @@ compilation is specified by a string called a \"spec\".  */\n \n #include \"obstack.h\"\n \n-\n /* ??? Need to find a GCC header to put these in.  */\n-extern int pexecute PROTO ((const char *, char * const *, const char *,\n-\t\t\t    const char *, char **, char **, int));\n-extern int pwait PROTO ((int, int *, int));\n extern char *update_path PROTO((char *, char *));\n extern void set_std_prefix PROTO((char *, int));\n-/* Flag arguments to pexecute.  */\n-#define PEXECUTE_FIRST   1\n-#define PEXECUTE_LAST    2\n-#define PEXECUTE_SEARCH  4\n-#define PEXECUTE_VERBOSE 8\n \n #ifdef VMS\n #define exit __posix_exit\n@@ -195,7 +186,6 @@ static void clear_failure_queue PROTO((void));\n static int check_live_switch\tPROTO((int, int));\n static char *handle_braces\tPROTO((char *));\n static char *save_string\tPROTO((char *, int));\n-static char *concat\t\tPVPROTO((char *, ...));\n extern int do_spec\t\tPROTO((char *));\n static int do_spec_1\t\tPROTO((char *, int, char *));\n static char *find_file\t\tPROTO((char *));\n@@ -215,8 +205,6 @@ static void error\t\tPVPROTO((char *, ...));\n static void display_help \tPROTO((void));\n \n void fancy_abort\t\tPROTO((void)) ATTRIBUTE_NORETURN;\n-char *xmalloc ();\n-char *xrealloc ();\n \n #ifdef LANG_SPECIFIC_DRIVER\n /* Called before processing to change/add/remove arguments. */\n@@ -1292,8 +1280,6 @@ static struct temp_name {\n   int filename_length;\t/* strlen (filename).  */\n   struct temp_name *next;\n } *temp_names;\n-#else\n-extern char *choose_temp_base PROTO((void));\n #endif\n \n \n@@ -5220,81 +5206,27 @@ lookup_compiler (name, length, language)\n   return 0;\n }\n \f\n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *value = (char *) malloc (size);\n+  register PTR value = (PTR) malloc (size);\n   if (value == 0)\n     fatal (\"virtual memory exhausted\");\n   return value;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  register char *value = (char *) realloc (ptr, size);\n+  register PTR value = (PTR) realloc (ptr, size);\n   if (value == 0)\n     fatal (\"virtual memory exhausted\");\n   return value;\n }\n \n-/* This function is based on the one in libiberty.  */\n-\n-static char *\n-concat VPROTO((char *first, ...))\n-{\n-  register int length;\n-  register char *newstr;\n-  register char *end;\n-  register char *arg;\n-  va_list args;\n-#ifndef ANSI_PROTOTYPES\n-  char *first;\n-#endif\n-\n-  /* First compute the size of the result and get sufficient memory.  */\n-\n-  VA_START (args, first);\n-#ifndef ANSI_PROTOTYPES\n-  first = va_arg (args, char *);\n-#endif\n-\n-  arg = first;\n-  length = 0;\n-\n-  while (arg != 0)\n-    {\n-      length += strlen (arg);\n-      arg = va_arg (args, char *);\n-    }\n-\n-  newstr = (char *) xmalloc (length + 1);\n-  va_end (args);\n-\n-  /* Now copy the individual pieces to the result string.  */\n-\n-  VA_START (args, first);\n-#ifndef ANSI_PROTOTYPES\n-  first = va_arg (args, char *);\n-#endif\n-\n-  end = newstr;\n-  arg = first;\n-  while (arg != 0)\n-    {\n-      while (*arg)\n-\t*end++ = *arg++;\n-      arg = va_arg (args, char *);\n-    }\n-  *end = '\\000';\n-  va_end (args);\n-\n-  return (newstr);\n-}\n-\n static char *\n save_string (s, len)\n      char *s;"}, {"sha": "102b14d7951ff93368b18cc36568f2ec5f7cae2e", "filename": "gcc/gcov.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -218,7 +218,6 @@ static void read_files PROTO ((void));\n static void scan_for_source_files PROTO ((void));\n static void output_data PROTO ((void));\n static void print_usage PROTO ((void)) ATTRIBUTE_NORETURN;\n-char * xmalloc ();\n \n int\n main (argc, argv)\n@@ -238,11 +237,11 @@ main (argc, argv)\n   return 0;\n }\n \n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *value = (char *) malloc (size);\n+  register PTR value = (PTR) malloc (size);\n   if (value == 0)\n     {\n       fprintf (stderr, \"error: virtual memory exhausted\");"}, {"sha": "4064ef012fdbf1a0b4d1e30855fdf658f962877a", "filename": "gcc/genattr.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -31,7 +31,6 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-char *xmalloc PROTO((unsigned));\n static void fatal PVPROTO ((char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n@@ -199,23 +198,23 @@ write_units (num_units, multiplicity, simultaneity,\n   printf (\"#define INSN_QUEUE_SIZE %d\\n\", q_size);\n }\n \n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *val = (char *) malloc (size);\n+  register PTR val = (PTR) malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");\n   return val;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char * result = (char *) realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;"}, {"sha": "00b48963f5647632a3c78285088a37164ec75b14", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -453,8 +453,6 @@ static struct attr_value *find_most_used  PROTO((struct attr_desc *));\n static rtx find_single_value\tPROTO((struct attr_desc *));\n static rtx make_numeric_value\tPROTO((int));\n static void extend_range\tPROTO((struct range *, int, int));\n-char *xrealloc\t\t\tPROTO((char *, unsigned));\n-char *xmalloc\t\t\tPROTO((unsigned));\n \n #define oballoc(size) obstack_alloc (hash_obstack, size)\n \n@@ -5752,22 +5750,22 @@ extend_range (range, min, max)\n   if (range->max < max) range->max = max;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char *result = (char *) realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;\n }\n \n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *val = (char *) malloc (size);\n+  register PTR val = (PTR) malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");"}, {"sha": "a10c40b6b3bf8ffa344f90cc1f84dad4edb3ca5d", "filename": "gcc/gencheck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -66,11 +66,11 @@ int main (argc, argv)\n /* FIXME: We only need an xmalloc definition because we are forced to\n    link with alloca.o on some platforms.  This should go away if/when\n    we link against libiberty.a. (ghazi@caip.rutgers.edu 6/3/98) */\n-char *\n+PTR\n xmalloc (nbytes)\n-     int nbytes;\n+  size_t nbytes;\n {\n-  char *tmp = (char *) malloc (nbytes);\n+  register PTR tmp = (PTR) malloc (nbytes);\n \n   if (!tmp)\n     {"}, {"sha": "3aa7d30ed726a99db94b1856eab9b22e5bc83f8e", "filename": "gcc/gencodes.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -33,7 +33,6 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-char *xmalloc PROTO((unsigned));\n static void fatal PVPROTO ((char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n@@ -57,23 +56,23 @@ gen_insn (insn)\n \t    insn_code_number);\n }\n \n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *val = (char *) malloc (size);\n+  register PTR val = (PTR) malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");\n   return val;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char *result = (char *) realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;"}, {"sha": "086462fd31fbf78e1dd7d9d90e0613fe6fe530e8", "filename": "gcc/genconfig.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -49,7 +49,6 @@ static int max_insns_per_split = 1;\n static int clobbers_seen_this_insn;\n static int dup_operands_seen_this_insn;\n \n-char *xmalloc PROTO((unsigned));\n static void fatal PVPROTO ((char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n@@ -245,24 +244,24 @@ gen_peephole (peep)\n     walk_insn_part (XVECEXP (peep, 0, i), 1, 0);\n }\n \f\n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *val = (char *) malloc (size);\n+  register PTR val = (PTR) malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");\n \n   return val;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char *result = (char *) realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;"}, {"sha": "7e556235c1a5c6e8f1e274f23b3e988d48ec4797", "filename": "gcc/genemit.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -30,7 +30,6 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-char *xmalloc PROTO((unsigned));\n static void fatal PVPROTO ((char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n@@ -679,24 +678,24 @@ output_init_mov_optab ()\n #endif\n }\n \f\n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *val = (char *) malloc (size);\n+  register PTR val = (PTR) malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");\n \n   return val;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char *result = (char *) realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;"}, {"sha": "f17ab671fc3d4848c08ae1b451f91289f15e930a", "filename": "gcc/genextract.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -98,8 +98,6 @@ static struct code_ptr *peepholes;\n static void gen_insn PROTO ((rtx));\n static void walk_rtx PROTO ((rtx, char *));\n static void print_path PROTO ((char *));\n-char *xmalloc PROTO ((unsigned));\n-char *xrealloc PROTO ((char *, unsigned));\n static void fatal PVPROTO ((char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n static char *copystr PROTO ((char *));\n@@ -348,23 +346,23 @@ print_path (path)\n     }\n }\n \f\n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *val = (char *) malloc (size);\n+  register PTR val = (PTR) malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");\n   return val;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char *result = (char *) realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;"}, {"sha": "5d21082ed8799008352cef68af16338d69c18966", "filename": "gcc/genflags.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -33,7 +33,6 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-char *xmalloc PROTO((unsigned));\n static void fatal PVPROTO ((char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n@@ -176,24 +175,24 @@ gen_insn (insn)\n   obstack_grow (obstack_ptr, &insn, sizeof (rtx));\n }\n \f\n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *val = (char *) malloc (size);\n+  register PTR val = (PTR) malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");\n \n   return val;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char *result = (char *) realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;"}, {"sha": "e99cb723e843b618d6e245ea1bd45f6f35acf752", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -281,11 +281,11 @@ gencode (f)\n }\n \n #if defined(USE_C_ALLOCA)\n-char *\n+PTR\n xmalloc (nbytes)\n-     int nbytes;\n+  size_t nbytes;\n {\n-  char *tmp = (char *) malloc (nbytes);\n+  register PTR tmp = (PTR) malloc (nbytes);\n \n   if (!tmp)\n     {"}, {"sha": "882240107cdcf82314d010bee0abd491500be25f", "filename": "gcc/genopinit.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -30,7 +30,6 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-char *xmalloc PROTO((unsigned));\n static void fatal PVPROTO ((char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n@@ -281,24 +280,24 @@ gen_insn (insn)\n   printf (\";\\n\");\n }\n \f\n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *val = (char *) malloc (size);\n+  register PTR val = (PTR) malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");\n \n   return val;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char *result = (char *) realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;"}, {"sha": "af68b613690236747bb68c9a56830b20f656449d", "filename": "gcc/genoutput.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -107,7 +107,6 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-char *xmalloc PROTO((unsigned));\n static void fatal PVPROTO ((char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n@@ -881,23 +880,23 @@ gen_split (split)\n   d->outfun = 0;\n }\n \f\n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *val = (char *) malloc (size);\n+  register PTR val = (PTR) malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");\n   return val;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char *result = (char *) realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;"}, {"sha": "25179bb86758f66b7a73fdbf313100bef3399b26", "filename": "gcc/genpeep.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -46,7 +46,6 @@ struct link\n   int vecelt;\n };\n \n-char *xmalloc PROTO((unsigned));\n static void fatal PVPROTO ((char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n@@ -385,23 +384,23 @@ print_code (code)\n     }\n }\n \f\n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *val = (char *) malloc (size);\n+  register PTR val = (PTR) malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");\n   return val;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char *result = (char *) realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;"}, {"sha": "0e1245cde449ec8e11da5705601b226adfd93c91", "filename": "gcc/genrecog.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -193,8 +193,6 @@ static void mybzero\t\tPROTO((char *, unsigned));\n static void mybcopy\t\tPROTO((char *, char *, unsigned));\n static void fatal\t\tPVPROTO((char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-char *xrealloc\t\t\tPROTO((char *, unsigned));\n-char *xmalloc\t\t\tPROTO((unsigned));\n void fancy_abort\t\tPROTO((void)) ATTRIBUTE_NORETURN;\n \f\n /* Construct and return a sequence of decisions\n@@ -1660,22 +1658,22 @@ mybcopy (in, out, length)\n     *out++ = *in++;\n }\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     unsigned size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char *result = (char *) realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;\n }\n \n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *val = (char *) malloc (size);\n+  register PTR val = (PTR) malloc (size);\n \n   if (val == 0)\n     fatal (\"virtual memory exhausted\");"}, {"sha": "3d5f43f7408ba88a7477876948dc17ec84b3ec26", "filename": "gcc/getpwd.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgetpwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fgetpwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgetpwd.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -20,8 +20,6 @@\n #define GUESSPATHLEN 100\n #endif /* (defined (USG) || defined (VMS)) */\n \n-char *xmalloc ();\n-\n #if !(defined (VMS) || (defined(_WIN32) && !defined(__CYGWIN__)))\n \n /* Get the working directory.  Use the PWD environment variable if it's"}, {"sha": "8505a5844ea5286f3792a3f7411244808880a2cc", "filename": "gcc/halfpic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fhalfpic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fhalfpic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhalfpic.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -40,7 +40,6 @@ Boston, MA 02111-1307, USA.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern char *xmalloc ();\n extern rtx eliminate_constant_term ();\n extern void assemble_name ();\n extern void output_addr_const ();"}, {"sha": "707fdb53fd3128084f8021e66dc60b9cf9959b09", "filename": "gcc/hash.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -28,8 +28,6 @@ Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern char * xmalloc ();\n-\n /* The default number of entries to use when creating a hash table.  */\n #define DEFAULT_SIZE (1009)\n "}, {"sha": "fdf018ec5faf14ab174392887bf0f6425b3875f8", "filename": "gcc/mips-tdump.c", "status": "modified", "additions": 30, "deletions": 39, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fmips-tdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fmips-tdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tdump.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -47,31 +47,37 @@ Boston, MA 02111-1307, USA.  */\n #define MIPS_UNMARK_STAB(code) ((code)-CODE_MASK)\n #endif\n \n-#ifdef __STDC__\n-typedef void *PTR_T;\n-typedef const void *CPTR_T;\n-#define __proto(x) x\n-#else\n-\n-#if defined(_STDIO_H_) || defined(__STDIO_H__)\t\t/* Ultrix 4.0, SGI */\n-typedef void *PTR_T;\n-typedef void *CPTR_T;\n-\n-#else\n-typedef char *PTR_T;\t\t\t\t\t/* Ultrix 3.1 */\n-typedef char *CPTR_T;\n-#endif\n-\n-#define __proto(x) ()\n-#define const\n-#endif\n+#define __proto(x) PARAMS(x)\n+typedef PTR PTR_T;\n+typedef const PTR_T CPTR_T;\n \n #define uchar\tunsigned char\n #define ushort\tunsigned short\n #define uint\tunsigned int\n #define ulong\tunsigned long\n \n \n+static void\n+fatal(s)\n+  const char *s;\n+{\n+  fprintf(stderr, \"%s\\n\", s);\n+  exit(FATAL_EXIT_CODE);\n+}\n+\n+/* Same as `malloc' but report error if no memory available.  */\n+/* Do this before size_t is fiddled with so it matches the prototype\n+   in libiberty.h . */\n+PTR\n+xmalloc (size)\n+  size_t size;\n+{\n+  register PTR value = (PTR) malloc (size);\n+  if (value == 0)\n+    fatal (\"Virtual memory exhausted.\");\n+  return value;\n+}\n+\n /* Do to size_t being defined in sys/types.h and different\n    in stddef.h, we have to do this by hand.....  Note, these\n    types are correct for MIPS based systems, and may not be\n@@ -270,10 +276,15 @@ char *lang_to_string\t__proto((lang_t));\n char *type_to_string\t__proto((AUXU *, int, FDR *));\n \n #ifndef __alpha\n+# ifdef NEED_DECLARATION_MALLOC\n extern PTR_T\tmalloc\t__proto((size_t));\n+# endif\n+# ifdef NEED_DECLARATION_CALLOC\n extern PTR_T\tcalloc\t__proto((size_t, size_t));\n+# endif\n+# ifdef NEED_DECLARATION_REALLOC\n extern PTR_T\trealloc\t__proto((PTR_T, size_t));\n-extern void\tfree\t__proto((PTR_T));\n+# endif\n #endif\n \n extern char *optarg;\n@@ -1590,23 +1601,3 @@ fancy_abort ()\n   fprintf (stderr, \"mips-tdump internal error\");\n   exit (1);\n }\n-\n-void\n-fatal(s)\n-char *s;\n-{\n-  fprintf(stderr, \"%s\\n\", s);\n-  exit(1);\n-}\n-\n-/* Same as `malloc' but report error if no memory available.  */\n-\n-PTR_T\n-xmalloc (size)\n-     unsigned size;\n-{\n-  register PTR_T value = malloc (size);\n-  if (value == 0)\n-    fatal (\"Virtual memory exhausted.\");\n-  return value;\n-}"}, {"sha": "06b9b5012afc3015fd387c42217749b24579de09", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 17, "deletions": 34, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -611,24 +611,10 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #define __proto(x) PARAMS(x)\n-/* Should PTR_T and CPTR_T be typedef'ed in terms of PTR ??? */\n-#ifdef __STDC__\n-typedef void *PTR_T;\n-typedef const void *CPTR_T;\n-#else\n-\n-#if defined(_STDIO_H_) || defined(__STDIO_H__)\t\t/* Ultrix 4.0, SGI */\n-typedef void *PTR_T;\n-typedef void *CPTR_T;\n-\n-#else\n-typedef char *PTR_T;\t\t\t\t\t/* Ultrix 3.1 */\n-typedef char *CPTR_T;\n-#endif\n+typedef PTR PTR_T;\n+typedef const PTR_T CPTR_T;\n \n-#endif\n-\n-/* Do to size_t being defined in sys/types.h and different\n+/* Due to size_t being defined in sys/types.h and different\n    in stddef.h, we have to do this by hand.....  Note, these\n    types are correct for MIPS based systems, and may not be\n    correct for other systems.  Ultrix 4.0 and Silicon Graphics\n@@ -650,10 +636,7 @@ extern void\tpfatal_with_name\n \t\t\t\t__proto((char *));\n extern void\tfancy_abort\t__proto((void));\n        void\tbotch\t\t__proto((const char *));\n-extern PTR_T\txmalloc\t\t__proto((Size_t));\n-extern PTR_T\txcalloc\t\t__proto((Size_t, Size_t));\n-extern PTR_T\txrealloc\t__proto((PTR_T, Size_t));\n-extern void\txfree\t\t__proto((PTR_T));\n+extern void\txfree\t\t__proto((PTR));\n \n extern void\tfatal\t\tPVPROTO((const char *format, ...));\n extern void\terror\t\tPVPROTO((const char *format, ...));\n@@ -5597,14 +5580,14 @@ void\n fatal VPROTO((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *format;\n+  const char *format;\n #endif\n   va_list ap;\n \n   VA_START (ap, format);\n \n #ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n+  format = va_arg (ap, const char *);\n #endif\n \n   if (line_number > 0)\n@@ -5675,11 +5658,11 @@ botch (s)\n \n /* Same as `malloc' but report error if no memory available.  */\n \n-PTR_T\n+PTR\n xmalloc (size)\n-     Size_t size;\n+  size_t size;\n {\n-  register PTR_T value = malloc (size);\n+  register PTR value = (PTR) malloc (size);\n   if (value == 0)\n     fatal (\"Virtual memory exhausted.\");\n \n@@ -5695,11 +5678,11 @@ xmalloc (size)\n \n /* Same as `calloc' but report error if no memory available.  */\n \n-PTR_T\n+PTR\n xcalloc (size1, size2)\n-     Size_t size1, size2;\n+  size_t size1, size2;\n {\n-  register PTR_T value = calloc (size1, size2);\n+  register PTR value = (PTR) calloc (size1, size2);\n   if (value == 0)\n     fatal (\"Virtual memory exhausted.\");\n \n@@ -5717,12 +5700,12 @@ xcalloc (size1, size2)\n \n /* Same as `realloc' but report error if no memory available.  */\n \n-PTR_T\n+PTR\n xrealloc (ptr, size)\n-     PTR_T ptr;\n-     Size_t size;\n+  PTR ptr;\n+  size_t size;\n {\n-  register PTR_T result = realloc (ptr, size);\n+  register PTR result = (PTR) realloc (ptr, size);\n   if (!result)\n     fatal (\"Virtual memory exhausted.\");\n \n@@ -5740,7 +5723,7 @@ xrealloc (ptr, size)\n \n void\n xfree (ptr)\n-     PTR_T ptr;\n+     PTR ptr;\n {\n   if (debug > 3)\n     {"}, {"sha": "3e98ded4d73796b01d0f643201e1eea034675ded", "filename": "gcc/prefix.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -73,7 +73,6 @@ static char *std_prefix = PREFIX;\n \n static char *get_key_value\tPROTO((char *));\n static char *translate_name\tPROTO((char *));\n-static char *concat\t\tPVPROTO((char *, ...));\n static char *save_string\tPROTO((char *, int));\n \n #ifdef _WIN32\n@@ -110,23 +109,23 @@ get_key_value (key)\n \n    This function is based on the one in libiberty.  */\n \n-static char *\n-concat VPROTO((char *first, ...))\n+char *\n+concat VPROTO((const char *first, ...))\n {\n   register int length;\n   register char *newstr;\n   register char *end;\n-  register char *arg;\n+  register const char *arg;\n   va_list args;\n #ifndef ANSI_PROTOTYPES\n-  char *first;\n+  const char *first;\n #endif\n \n   /* First compute the size of the result and get sufficient memory.  */\n \n   VA_START (args, first);\n #ifndef ANSI_PROTOTYPES\n-  first = va_arg (args, char *);\n+  first = va_arg (args, const char *);\n #endif\n \n   arg = first;\n@@ -135,7 +134,7 @@ concat VPROTO((char *first, ...))\n   while (arg != 0)\n     {\n       length += strlen (arg);\n-      arg = va_arg (args, char *);\n+      arg = va_arg (args, const char *);\n     }\n \n   newstr = (char *) malloc (length + 1);\n@@ -154,7 +153,7 @@ concat VPROTO((char *first, ...))\n     {\n       while (*arg)\n \t*end++ = *arg++;\n-      arg = va_arg (args, char *);\n+      arg = va_arg (args, const char *);\n     }\n   *end = '\\000';\n   va_end (args);"}, {"sha": "65242976034e6babb84228aa0d9701d3c936e873", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -45,7 +45,7 @@ static char *reg_names[] = REGISTER_NAMES;\n \n static FILE *outfile;\n \n-static char spaces[] = \"                                                                                                                                                                \";\n+static const char xspaces[] = \"                                                                                                                                                                \";\n \n static int sawclose = 0;\n \n@@ -77,7 +77,7 @@ print_rtx (in_rtx)\n   if (sawclose)\n     {\n       fprintf (outfile, \"\\n%s\",\n-\t       (spaces + (sizeof spaces - 1 - indent * 2)));\n+\t       (xspaces + (sizeof xspaces - 1 - indent * 2)));\n       sawclose = 0;\n     }\n \n@@ -185,7 +185,7 @@ print_rtx (in_rtx)\n \tif (sawclose)\n \t  {\n \t    fprintf (outfile, \"\\n%s\",\n-\t\t     (spaces + (sizeof spaces - 1 - indent * 2)));\n+\t\t     (xspaces + (sizeof xspaces - 1 - indent * 2)));\n \t    sawclose = 0;\n \t  }\n \tfputs (\"[ \", outfile);\n@@ -202,7 +202,7 @@ print_rtx (in_rtx)\n \t  }\n \tif (sawclose)\n \t  fprintf (outfile, \"\\n%s\",\n-\t\t   (spaces + (sizeof spaces - 1 - indent * 2)));\n+\t\t   (xspaces + (sizeof xspaces - 1 - indent * 2)));\n \n \tfputs (\"] \", outfile);\n \tsawclose = 1;"}, {"sha": "578247600bcf62379cdcd8d9f9d46fbda6facdc4", "filename": "gcc/profile.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -53,8 +53,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"gcov-io.h\"\n #include \"toplev.h\"\n \n-extern char * xmalloc ();\n-\n /* One of these is dynamically created whenever we identify an arc in the\n    function.  */\n "}, {"sha": "77b1a11218ee3fe7698b586705227114e819ca9d", "filename": "gcc/protoize.c", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -109,17 +109,8 @@ extern char *version_string;\n \n extern char *getpwd ();\n \n-extern char *choose_temp_base PROTO ((void));\n extern char * my_strerror PROTO ((int));\n \n-extern int pexecute PROTO ((const char *, char * const *, const char *,\n-\t\t\t    const char *, char **, char **, int));\n-extern int pwait PROTO ((int, int *, int));\n-/* Flag arguments to pexecute.  */\n-#define PEXECUTE_FIRST  1\n-#define PEXECUTE_LAST   2\n-#define PEXECUTE_SEARCH 4\n-\n static void usage PROTO ((void)) ATTRIBUTE_NORETURN;\n static void aux_info_corrupted PROTO ((void)) ATTRIBUTE_NORETURN;\n static void declare_source_confusing PROTO ((const char *)) ATTRIBUTE_NORETURN;\n@@ -128,13 +119,8 @@ static void declare_source_confusing PROTO ((const char *)) ATTRIBUTE_NORETURN;\n    These were made to facilitate compilation with old brain-dead DEC C\n    compilers which didn't properly grok `void*' types.  */\n \n-#ifdef __STDC__\n-typedef void * pointer_type;\n-typedef const void * const_pointer_type;\n-#else\n-typedef char * pointer_type;\n-typedef char * const_pointer_type;\n-#endif\n+typedef PTR pointer_type;\n+typedef const PTR const_pointer_type;\n \n #if defined(POSIX)\n \n@@ -605,19 +591,15 @@ my_strerror(e)\n \n pointer_type\n xmalloc (byte_count)\n-     size_t byte_count;\n+  size_t byte_count;\n {\n-  pointer_type rv;\n-\n-  rv = (pointer_type) malloc (byte_count);\n+  register pointer_type rv = (pointer_type) malloc (byte_count);\n   if (rv == NULL)\n     {\n       fprintf (stderr, \"\\n%s: virtual memory exceeded\\n\", pname);\n       exit (FATAL_EXIT_CODE);\n-      return 0;\t\t/* avoid warnings */\n     }\n-  else\n-    return rv;\n+  return rv;\n }\n \n /* Reallocate some space, but check that the reallocation was successful.  */\n@@ -627,17 +609,13 @@ xrealloc (old_space, byte_count)\n      pointer_type old_space;\n      size_t byte_count;\n {\n-  pointer_type rv;\n-\n-  rv = (pointer_type) realloc (old_space, byte_count);\n+  register pointer_type rv = (pointer_type) realloc (old_space, byte_count);\n   if (rv == NULL)\n     {\n       fprintf (stderr, \"\\n%s: virtual memory exceeded\\n\", pname);\n       exit (FATAL_EXIT_CODE);\n-      return 0;\t\t/* avoid warnings */\n     }\n-  else\n-    return rv;\n+  return rv;\n }\n \n /* Deallocate the area pointed to by an arbitrary pointer, but first, strip"}, {"sha": "bf9a603412d7524015a4482c9e3f66f7d121dab6", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -842,19 +842,6 @@ extern rtvec gen_rtvec\t\t\tPVPROTO((int, ...));\n extern rtx read_rtx\t\t\tPROTO((FILE *));\n #endif\n \n-#if 0\n-/* At present, don't prototype xrealloc, since all of the callers don't\n-   cast their pointers to char *, and all of the xrealloc's don't use\n-   void * yet.  */\n-extern char *xmalloc\t\t\tPROTO((size_t));\n-extern char *xcalloc\t\t\tPROTO((size_t, size_t));\n-extern char *xrealloc\t\t\tPROTO((void *, size_t));\n-#else\n-extern char *xmalloc ();\n-extern char *xcalloc ();\n-extern char *xrealloc ();\n-#endif\n-\n extern char *oballoc\t\t\tPROTO((int));\n extern char *permalloc\t\t\tPROTO((int));\n extern rtx rtx_alloc\t\t\tPROTO((RTX_CODE));"}, {"sha": "9fcf8b86fd604002a543f0ab43f7cdae7000b7b8", "filename": "gcc/scan.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fscan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fscan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan.h?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -57,8 +57,6 @@ extern int skip_spaces _PARAMS((FILE *, int));\n extern int scan_ident _PARAMS((FILE *, sstring *, int));\n extern int scan_string _PARAMS((FILE *, sstring *, int));\n extern int read_upto _PARAMS((FILE *, sstring *, int));\n-extern char *xmalloc _PARAMS((unsigned));\n-extern char *xrealloc _PARAMS((char *, unsigned));\n extern unsigned long hash _PARAMS((const char *));\n extern void recognized_function _PARAMS((char *, int, int, char *, int, int, char *, int));\n extern void recognized_extern _PARAMS((char *, int, char *, int));"}, {"sha": "47a3b407d7b18868d81a4d58ec3f469ac476938d", "filename": "gcc/system.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -370,4 +370,7 @@ extern void abort ();\n #define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)\n #endif\n \n+/* Get libiberty declarations. */\n+#include \"libiberty.h\"\n+\n #endif /* __GCC_SYSTEM_H__ */"}, {"sha": "9e7403a7c0ecc75ec46b91ebd0cfcf768ecf5138", "filename": "gcc/tlink.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -32,8 +32,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern char * xmalloc PARAMS((unsigned));\n-\n /* Defined in collect2.c.  */\n extern int vflag, debug;\n extern char *ldout;"}, {"sha": "e5c9319f29cda9e10a1fb7f3d1d76ffd24d01281", "filename": "gcc/toplev.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -1251,7 +1251,7 @@ int dump_time;\n \f\n /* Return time used so far, in microseconds.  */\n \n-int\n+long\n get_run_time ()\n {\n   if (quiet_flag)\n@@ -2173,33 +2173,33 @@ botch (s)\n \n /* Same as `malloc' but report error if no memory available.  */\n \n-char *\n+PTR\n xmalloc (size)\n-     unsigned size;\n+  size_t size;\n {\n-  register char *value;\n+  register PTR value;\n \n   if (size == 0)\n     size = 1;\n \n-  value = (char *) malloc (size);\n+  value = (PTR) malloc (size);\n   if (value == 0)\n     fatal (\"virtual memory exhausted\");\n   return value;\n }\n \n /* Same as `calloc' but report error if no memory available.  */\n \n-char *\n+PTR\n xcalloc (size1, size2)\n-     unsigned size1, size2;\n+  size_t size1, size2;\n {\n-  register char *value;\n+  register PTR value;\n \n   if (size1 == 0 || size2 == 0)\n     size1 = size2 = 1;\n \n-  value = (char *) calloc (size1, size2);\n+  value = (PTR) calloc (size1, size2);\n   if (value == 0)\n     fatal (\"virtual memory exhausted\");\n   return value;\n@@ -2209,19 +2209,17 @@ xcalloc (size1, size2)\n /* Same as `realloc' but report error if no memory available.  \n    Also handle null PTR even if the vendor realloc gets it wrong.  */\n \n-char *\n+PTR\n xrealloc (ptr, size)\n-     char *ptr;\n-     int size;\n+  PTR ptr;\n+  size_t size;\n {\n-  char *result;\n+  register PTR result;\n \n   if (size == 0)\n     size = 1;\n \n-  result = (ptr\n-\t    ? (char *) realloc (ptr, size)\n-\t    : (char *) malloc (size));\n+  result = (ptr ? (PTR) realloc (ptr, size) : (PTR) malloc (size));\n \n   if (!result)\n     fatal (\"virtual memory exhausted\");\n@@ -2233,7 +2231,7 @@ xrealloc (ptr, size)\n \n char *\n xstrdup (s)\n-     register char *s;\n+  register const char *s;\n {\n   register char *result = (char *) malloc (strlen (s) + 1);\n "}, {"sha": "c309399a8645706a4c6dc82a437ac72ac97f7923", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -13,7 +13,6 @@ struct rtx_def;\n extern int count_error\t\t\tPROTO ((int));\n extern void strip_off_ending\t\tPROTO ((char *, int));\n extern void print_time\t\t\tPROTO ((char *, int));\n-extern int get_run_time\t\t\tPROTO ((void));\n extern void debug_start_source_file\tPROTO ((char *));\n extern void debug_end_source_file\tPROTO ((unsigned));\n extern void debug_define\t\tPROTO ((unsigned, char *));"}, {"sha": "895cf2a1b4a4ecfa7d1697bf186e7125f9ab9392", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778b98d9088057e96730a5a4f314d9d57bedc65/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2778b98d9088057e96730a5a4f314d9d57bedc65", "patch": "@@ -1385,21 +1385,6 @@ union tree_node\n extern int exact_log2_wide             PROTO((unsigned HOST_WIDE_INT));\n extern int floor_log2_wide             PROTO((unsigned HOST_WIDE_INT));\n \n-#if 0\n-/* At present, don't prototype xrealloc, since all of the callers don't\n-   cast their pointers to char *, and all of the xrealloc's don't use\n-   void * yet.  */\n-extern char *xmalloc\t\t\tPROTO((size_t));\n-extern char *xcalloc\t\t\tPROTO((size_t, size_t));\n-extern char *xrealloc\t\t\tPROTO((void *, size_t));\n-#else\n-extern char *xmalloc ();\n-extern char *xcalloc ();\n-extern char *xrealloc ();\n-#endif\n-\n-extern char *xstrdup\t\t\tPROTO((char *));\n-\n extern char *oballoc\t\t\tPROTO((int));\n extern char *permalloc\t\t\tPROTO((int));\n extern char *savealloc\t\t\tPROTO((int));"}]}