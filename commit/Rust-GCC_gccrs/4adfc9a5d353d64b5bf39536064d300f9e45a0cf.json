{"sha": "4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFkZmM5YTVkMzUzZDY0YjViZjM5NTM2MDY0ZDMwMGY5ZTQ1YTBjZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-21T20:16:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-21T20:16:36Z"}, "message": "Remove fold_strip_sign_ops\n\nThis patch deletes fold_strip_sign_ops in favour of the\ngimple-ssa-backprop.c pass.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* fold-const.h (fold_strip_sign_ops): Delete.\n\t* fold-const.c (fold_strip_sign_ops): Likewise.\n\t(fold_unary_loc, fold_binary_loc): Remove calls to it.\n\t* builtins.c (fold_builtin_cos, fold_builtin_cosh)\n\t(fold_builtin_ccos): Delete.\n\t(fold_builtin_pow): Don't call fold_strip_sign_ops.\n\t(fold_builtin_hypot, fold_builtin_copysign): Likewise.\n\tRemove fndecl argument.\n\t(fold_builtin_1): Update calls accordingly.  Handle constant\n\tcos, cosh, ccos and ccosh here.\n\ngcc/testsuite/\n\t* gcc.dg/torture/builtin-symmetric-1.c: Don't run at -O0.\n\nFrom-SVN: r229140", "tree": {"sha": "92fc7ae80645bb51dac3ca4e697a59042c1d8bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92fc7ae80645bb51dac3ca4e697a59042c1d8bd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a75d560c855081ddb8147bf6cec378cda55901b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a75d560c855081ddb8147bf6cec378cda55901b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a75d560c855081ddb8147bf6cec378cda55901b"}], "stats": {"total": 244, "additions": 37, "deletions": 207}, "files": [{"sha": "fed6835d9c7267caa8d7e32066e0b63e039b2b79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "patch": "@@ -1,3 +1,16 @@\n+2015-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* fold-const.h (fold_strip_sign_ops): Delete.\n+\t* fold-const.c (fold_strip_sign_ops): Likewise.\n+\t(fold_unary_loc, fold_binary_loc): Remove calls to it.\n+\t* builtins.c (fold_builtin_cos, fold_builtin_cosh)\n+\t(fold_builtin_ccos): Delete.\n+\t(fold_builtin_pow): Don't call fold_strip_sign_ops.\n+\t(fold_builtin_hypot, fold_builtin_copysign): Likewise.\n+\tRemove fndecl argument.\n+\t(fold_builtin_1): Update calls accordingly.  Handle constant\n+\tcos, cosh, ccos and ccosh here.\n+\n 2015-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* doc/invoke.texi (-fdump-tree-backprop, -fssa-backprop): Document."}, {"sha": "fa02d26651b819ede9f19eb21f86e7bace22ca33", "filename": "gcc/builtins.c", "status": "modified", "additions": 19, "deletions": 110, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "patch": "@@ -160,8 +160,6 @@ static rtx expand_builtin_fabs (tree, rtx, rtx);\n static rtx expand_builtin_signbit (tree, rtx);\n static tree fold_builtin_pow (location_t, tree, tree, tree, tree);\n static tree fold_builtin_powi (location_t, tree, tree, tree, tree);\n-static tree fold_builtin_cos (location_t, tree, tree, tree);\n-static tree fold_builtin_cosh (location_t, tree, tree, tree);\n static tree fold_builtin_tan (tree, tree);\n static tree fold_builtin_trunc (location_t, tree, tree);\n static tree fold_builtin_floor (location_t, tree, tree);\n@@ -175,7 +173,6 @@ static tree fold_builtin_memcmp (location_t, tree, tree, tree);\n static tree fold_builtin_strcmp (location_t, tree, tree);\n static tree fold_builtin_strncmp (location_t, tree, tree, tree);\n static tree fold_builtin_signbit (location_t, tree, tree);\n-static tree fold_builtin_copysign (location_t, tree, tree, tree, tree);\n static tree fold_builtin_isascii (location_t, tree);\n static tree fold_builtin_toascii (location_t, tree);\n static tree fold_builtin_isdigit (location_t, tree);\n@@ -7661,77 +7658,6 @@ fold_builtin_cproj (location_t loc, tree arg, tree type)\n   return NULL_TREE;\n }\n \n-/* Fold function call to builtin cos, cosf, or cosl with argument ARG.\n-   TYPE is the type of the return value.  Return NULL_TREE if no\n-   simplification can be made.  */\n-\n-static tree\n-fold_builtin_cos (location_t loc,\n-\t\t  tree arg, tree type, tree fndecl)\n-{\n-  tree res, narg;\n-\n-  if (!validate_arg (arg, REAL_TYPE))\n-    return NULL_TREE;\n-\n-  /* Calculate the result when the argument is a constant.  */\n-  if ((res = do_mpfr_arg1 (arg, type, mpfr_cos, NULL, NULL, 0)))\n-    return res;\n-\n-  /* Optimize cos(-x) into cos (x).  */\n-  if ((narg = fold_strip_sign_ops (arg)))\n-    return build_call_expr_loc (loc, fndecl, 1, narg);\n-\n-  return NULL_TREE;\n-}\n-\n-/* Fold function call to builtin cosh, coshf, or coshl with argument ARG.\n-   Return NULL_TREE if no simplification can be made.  */\n-\n-static tree\n-fold_builtin_cosh (location_t loc, tree arg, tree type, tree fndecl)\n-{\n-  if (validate_arg (arg, REAL_TYPE))\n-    {\n-      tree res, narg;\n-\n-      /* Calculate the result when the argument is a constant.  */\n-      if ((res = do_mpfr_arg1 (arg, type, mpfr_cosh, NULL, NULL, 0)))\n-\treturn res;\n-\n-      /* Optimize cosh(-x) into cosh (x).  */\n-      if ((narg = fold_strip_sign_ops (arg)))\n-\treturn build_call_expr_loc (loc, fndecl, 1, narg);\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-/* Fold function call to builtin ccos (or ccosh if HYPER is TRUE) with\n-   argument ARG.  TYPE is the type of the return value.  Return\n-   NULL_TREE if no simplification can be made.  */\n-\n-static tree\n-fold_builtin_ccos (location_t loc, tree arg, tree type, tree fndecl,\n-\t\t   bool hyper)\n-{\n-  if (validate_arg (arg, COMPLEX_TYPE)\n-      && TREE_CODE (TREE_TYPE (TREE_TYPE (arg))) == REAL_TYPE)\n-    {\n-      tree tmp;\n-\n-      /* Calculate the result when the argument is a constant.  */\n-      if ((tmp = do_mpc_arg1 (arg, type, (hyper ? mpc_cosh : mpc_cos))))\n-\treturn tmp;\n-\n-      /* Optimize fn(-x) into fn(x).  */\n-      if ((tmp = fold_strip_sign_ops (arg)))\n-\treturn build_call_expr_loc (loc, fndecl, 1, tmp);\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Fold function call to builtin tan, tanf, or tanl with argument ARG.\n    Return NULL_TREE if no simplification can be made.  */\n \n@@ -8147,10 +8073,9 @@ fold_builtin_bswap (tree fndecl, tree arg)\n    NULL_TREE if no simplification can be made.  */\n \n static tree\n-fold_builtin_hypot (location_t loc, tree fndecl,\n-\t\t    tree arg0, tree arg1, tree type)\n+fold_builtin_hypot (location_t loc, tree arg0, tree arg1, tree type)\n {\n-  tree res, narg0, narg1;\n+  tree res;\n \n   if (!validate_arg (arg0, REAL_TYPE)\n       || !validate_arg (arg1, REAL_TYPE))\n@@ -8160,16 +8085,6 @@ fold_builtin_hypot (location_t loc, tree fndecl,\n   if ((res = do_mpfr_arg2 (arg0, arg1, type, mpfr_hypot)))\n     return res;\n \n-  /* If either argument to hypot has a negate or abs, strip that off.\n-     E.g. hypot(-x,fabs(y)) -> hypot(x,y).  */\n-  narg0 = fold_strip_sign_ops (arg0);\n-  narg1 = fold_strip_sign_ops (arg1);\n-  if (narg0 || narg1)\n-    {\n-      return build_call_expr_loc (loc, fndecl, 2, narg0 ? narg0 : arg0,\n-\t\t\t      narg1 ? narg1 : arg1);\n-    }\n-\n   /* If either argument is zero, hypot is fabs of the other.  */\n   if (real_zerop (arg0))\n     return fold_build1_loc (loc, ABS_EXPR, type, arg1);\n@@ -8274,14 +8189,6 @@ fold_builtin_pow (location_t loc, tree fndecl, tree arg0, tree arg1, tree type)\n \t      if (flag_unsafe_math_optimizations || !inexact)\n \t\treturn build_real (type, x);\n \t    }\n-\n-\t  /* Strip sign ops from even integer powers.  */\n-\t  if ((n & 1) == 0 && flag_unsafe_math_optimizations)\n-\t    {\n-\t      tree narg0 = fold_strip_sign_ops (arg0);\n-\t      if (narg0)\n-\t\treturn build_call_expr_loc (loc, fndecl, 2, narg0, arg1);\n-\t    }\n \t}\n     }\n \n@@ -8729,11 +8636,8 @@ fold_builtin_signbit (location_t loc, tree arg, tree type)\n    be made.  */\n \n static tree\n-fold_builtin_copysign (location_t loc, tree fndecl,\n-\t\t       tree arg1, tree arg2, tree type)\n+fold_builtin_copysign (location_t loc, tree arg1, tree arg2, tree type)\n {\n-  tree tem;\n-\n   if (!validate_arg (arg1, REAL_TYPE)\n       || !validate_arg (arg2, REAL_TYPE))\n     return NULL_TREE;\n@@ -8764,11 +8668,6 @@ fold_builtin_copysign (location_t loc, tree fndecl,\n \t\t\t     fold_build1_loc (loc, ABS_EXPR, type, arg1),\n \t\t\t     arg2);\n \n-  /* Strip sign changing operations for the first argument.  */\n-  tem = fold_strip_sign_ops (arg1);\n-  if (tem)\n-    return build_call_expr_loc (loc, fndecl, 2, tem, arg2);\n-\n   return NULL_TREE;\n }\n \n@@ -9669,10 +9568,16 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n     break;\n \n     CASE_FLT_FN (BUILT_IN_CCOS):\n-      return fold_builtin_ccos (loc, arg0, type, fndecl, /*hyper=*/ false);\n+      if (validate_arg (arg0, COMPLEX_TYPE)\n+\t  && TREE_CODE (TREE_TYPE (TREE_TYPE (arg0))) == REAL_TYPE)\n+\treturn do_mpc_arg1 (arg0, type, mpc_cos);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_CCOSH):\n-      return fold_builtin_ccos (loc, arg0, type, fndecl, /*hyper=*/ true);\n+      if (validate_arg (arg0, COMPLEX_TYPE)\n+\t  && TREE_CODE (TREE_TYPE (TREE_TYPE (arg0))) == REAL_TYPE)\n+\treturn do_mpc_arg1 (arg0, type, mpc_cosh);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_CPROJ):\n       return fold_builtin_cproj (loc, arg0, type);\n@@ -9805,7 +9710,9 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n     break;\n \n     CASE_FLT_FN (BUILT_IN_COS):\n-      return fold_builtin_cos (loc, arg0, type, fndecl);\n+      if (validate_arg (arg0, REAL_TYPE))\n+\treturn do_mpfr_arg1 (arg0, type, mpfr_cos, NULL, NULL, 0);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_TAN):\n       return fold_builtin_tan (arg0, type);\n@@ -9824,7 +9731,9 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n     break;\n \n     CASE_FLT_FN (BUILT_IN_COSH):\n-      return fold_builtin_cosh (loc, arg0, type, fndecl);\n+      if (validate_arg (arg0, REAL_TYPE))\n+\treturn do_mpfr_arg1 (arg0, type, mpfr_cosh, NULL, NULL, 0);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_TANH):\n       if (validate_arg (arg0, REAL_TYPE))\n@@ -10078,7 +9987,7 @@ fold_builtin_2 (location_t loc, tree fndecl, tree arg0, tree arg1)\n     break;\n \n     CASE_FLT_FN (BUILT_IN_HYPOT):\n-      return fold_builtin_hypot (loc, fndecl, arg0, arg1, type);\n+      return fold_builtin_hypot (loc, arg0, arg1, type);\n \n     CASE_FLT_FN (BUILT_IN_CPOW):\n       if (validate_arg (arg0, COMPLEX_TYPE)\n@@ -10134,7 +10043,7 @@ fold_builtin_2 (location_t loc, tree fndecl, tree arg0, tree arg1)\n       return fold_builtin_powi (loc, fndecl, arg0, arg1, type);\n \n     CASE_FLT_FN (BUILT_IN_COPYSIGN):\n-      return fold_builtin_copysign (loc, fndecl, arg0, arg1, type);\n+      return fold_builtin_copysign (loc, arg0, arg1, type);\n \n     CASE_FLT_FN (BUILT_IN_FMIN):\n       return fold_builtin_fmin_fmax (loc, arg0, arg1, type, /*max=*/false);"}, {"sha": "042d43fa70f0065d40e7801a5cfe9cbab9ccca41", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "patch": "@@ -7803,15 +7803,6 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t\t\t\t\t\t  TREE_TYPE (targ0),\n \t\t\t\t\t\t  targ0));\n \t}\n-\n-      /* Strip sign ops from argument.  */\n-      if (TREE_CODE (type) == REAL_TYPE)\n-\t{\n-\t  tem = fold_strip_sign_ops (arg0);\n-\t  if (tem)\n-\t    return fold_build1_loc (loc, ABS_EXPR, type,\n-\t\t\t\tfold_convert_loc (loc, type, tem));\n-\t}\n       return NULL_TREE;\n \n     case BIT_NOT_EXPR:\n@@ -9859,17 +9850,6 @@ fold_binary_loc (location_t loc,\n \t}\n       else\n \t{\n-          /* Strip sign operations from X in X*X, i.e. -Y*-Y -> Y*Y.  */\n-\t  if (operand_equal_p (arg0, arg1, 0))\n-\t    {\n-\t      tree tem = fold_strip_sign_ops (arg0);\n-\t      if (tem != NULL_TREE)\n-\t\t{\n-\t\t  tem = fold_convert_loc (loc, type, tem);\n-\t\t  return fold_build2_loc (loc, MULT_EXPR, type, tem, tem);\n-\t\t}\n-\t    }\n-\n \t  /* Fold z * +-I to __complex__ (-+__imag z, +-__real z).\n \t     This is not the same for NaNs or if signed zeros are\n \t     involved.  */\n@@ -14252,82 +14232,6 @@ ptr_difference_const (tree e1, tree e2, HOST_WIDE_INT *diff)\n   return true;\n }\n \n-/* Simplify the floating point expression EXP when the sign of the\n-   result is not significant.  Return NULL_TREE if no simplification\n-   is possible.  */\n-\n-tree\n-fold_strip_sign_ops (tree exp)\n-{\n-  tree arg0, arg1;\n-  location_t loc = EXPR_LOCATION (exp);\n-\n-  switch (TREE_CODE (exp))\n-    {\n-    case ABS_EXPR:\n-    case NEGATE_EXPR:\n-      arg0 = fold_strip_sign_ops (TREE_OPERAND (exp, 0));\n-      return arg0 ? arg0 : TREE_OPERAND (exp, 0);\n-\n-    case MULT_EXPR:\n-    case RDIV_EXPR:\n-      if (HONOR_SIGN_DEPENDENT_ROUNDING (element_mode (exp)))\n-\treturn NULL_TREE;\n-      arg0 = fold_strip_sign_ops (TREE_OPERAND (exp, 0));\n-      arg1 = fold_strip_sign_ops (TREE_OPERAND (exp, 1));\n-      if (arg0 != NULL_TREE || arg1 != NULL_TREE)\n-\treturn fold_build2_loc (loc, TREE_CODE (exp), TREE_TYPE (exp),\n-\t\t\t    arg0 ? arg0 : TREE_OPERAND (exp, 0),\n-\t\t\t    arg1 ? arg1 : TREE_OPERAND (exp, 1));\n-      break;\n-\n-    case COMPOUND_EXPR:\n-      arg0 = TREE_OPERAND (exp, 0);\n-      arg1 = fold_strip_sign_ops (TREE_OPERAND (exp, 1));\n-      if (arg1)\n-\treturn fold_build2_loc (loc, COMPOUND_EXPR, TREE_TYPE (exp), arg0, arg1);\n-      break;\n-\n-    case COND_EXPR:\n-      arg0 = fold_strip_sign_ops (TREE_OPERAND (exp, 1));\n-      arg1 = fold_strip_sign_ops (TREE_OPERAND (exp, 2));\n-      if (arg0 || arg1)\n-\treturn fold_build3_loc (loc,\n-\t\t\t    COND_EXPR, TREE_TYPE (exp), TREE_OPERAND (exp, 0),\n-\t\t\t    arg0 ? arg0 : TREE_OPERAND (exp, 1),\n-\t\t\t    arg1 ? arg1 : TREE_OPERAND (exp, 2));\n-      break;\n-\n-    case CALL_EXPR:\n-      {\n-\tconst enum built_in_function fcode = builtin_mathfn_code (exp);\n-\tswitch (fcode)\n-\t{\n-\tCASE_FLT_FN (BUILT_IN_COPYSIGN):\n-\t  /* Strip copysign function call, return the 1st argument. */\n-\t  arg0 = CALL_EXPR_ARG (exp, 0);\n-\t  arg1 = CALL_EXPR_ARG (exp, 1);\n-\t  return omit_one_operand_loc (loc, TREE_TYPE (exp), arg0, arg1);\n-\n-\tdefault:\n-\t  /* Strip sign ops from the argument of \"odd\" math functions.  */\n-\t  if (negate_mathfn_p (fcode))\n-            {\n-\t      arg0 = fold_strip_sign_ops (CALL_EXPR_ARG (exp, 0));\n-\t      if (arg0)\n-\t\treturn build_call_expr_loc (loc, get_callee_fndecl (exp), 1, arg0);\n-\t    }\n-\t  break;\n-\t}\n-      }\n-      break;\n-\n-    default:\n-      break;\n-    }\n-  return NULL_TREE;\n-}\n-\n /* Return OFF converted to a pointer offset type suitable as offset for\n    POINTER_PLUS_EXPR.  Use location LOC for this conversion.  */\n tree"}, {"sha": "1bb68e48e2ab7710375f7ac148c65f2abd8ddd46", "filename": "gcc/fold-const.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "patch": "@@ -107,7 +107,6 @@ extern tree build_fold_addr_expr_loc (location_t, tree);\n         build_fold_addr_expr_with_type_loc (UNKNOWN_LOCATION, (T), TYPE)\n extern tree build_fold_addr_expr_with_type_loc (location_t, tree, tree);\n extern tree fold_build_cleanup_point_expr (tree type, tree expr);\n-extern tree fold_strip_sign_ops (tree);\n #define build_fold_indirect_ref(T)\\\n         build_fold_indirect_ref_loc (UNKNOWN_LOCATION, T)\n extern tree build_fold_indirect_ref_loc (location_t, tree);"}, {"sha": "4abdf50ff9bbb31dcfcb815e92bc67a552185f99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "patch": "@@ -1,3 +1,7 @@\n+2015-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/torture/builtin-symmetric-1.c: Don't run at -O0.\n+\n 2015-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/tree-ssa/backprop-1.c, gcc.dg/tree-ssa/backprop-2.c,"}, {"sha": "61d8a80d72aca94298a90b30149b0591280b650e", "filename": "gcc/testsuite/gcc.dg/torture/builtin-symmetric-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-symmetric-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adfc9a5d353d64b5bf39536064d300f9e45a0cf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-symmetric-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-symmetric-1.c?ref=4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "patch": "@@ -7,6 +7,7 @@\n \n /* { dg-do link } */\n /* { dg-options \"-ffast-math\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n \n /* All references to link_error should go away at compile-time.  */\n extern void link_error(int);"}]}