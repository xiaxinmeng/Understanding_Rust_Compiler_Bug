{"sha": "01a3a3242217431b8707735e4d2510a530a28eae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFhM2EzMjQyMjE3NDMxYjg3MDc3MzVlNGQyNTEwYTUzMGEyOGVhZQ==", "commit": {"author": {"name": "Naveen H.S", "email": "Naveen.Hurugalawadi@caviumnetworks.com", "date": "2013-01-10T07:34:49Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2013-01-10T07:34:49Z"}, "message": "aarch64.c (aarch64_print_operand): Replace %r in asm_fprintf with reg_names.\n\n\t* config/aarch64/aarch64.c (aarch64_print_operand): Replace %r\n\tin asm_fprintf with reg_names.\n\t(aarch64_print_operand_address): Likewise.\n\t(aarch64_return_addr): Likewise.\n\t* config/aarch64/aarch64.h (ASM_FPRINTF_EXTENSIONS): Remove.\n\nFrom-SVN: r195077", "tree": {"sha": "f6d68aebb047b0445d2fedb443e9357cd6b6ee61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6d68aebb047b0445d2fedb443e9357cd6b6ee61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01a3a3242217431b8707735e4d2510a530a28eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a3a3242217431b8707735e4d2510a530a28eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01a3a3242217431b8707735e4d2510a530a28eae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a3a3242217431b8707735e4d2510a530a28eae/comments", "author": null, "committer": null, "parents": [{"sha": "997271c112e5a1d1b11aefc629e26cdc45bc54a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997271c112e5a1d1b11aefc629e26cdc45bc54a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/997271c112e5a1d1b11aefc629e26cdc45bc54a6"}], "stats": {"total": 66, "additions": 32, "deletions": 34}, "files": [{"sha": "4f5bebcb06b596b1c30d2924a9052c171352b08a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a3a3242217431b8707735e4d2510a530a28eae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a3a3242217431b8707735e4d2510a530a28eae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01a3a3242217431b8707735e4d2510a530a28eae", "patch": "@@ -96,6 +96,14 @@\n \t* predict.c (predict_loops): If max is 0, don't call compare_tree_int.\n \tIf nitercst is 0, don't predict the exit edge.\n \n+2013-01-08   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_print_operand): Replace %r\n+\tin asm_fprintf with reg_names.\n+\t(aarch64_print_operand_address): Likewise.\n+\t(aarch64_return_addr): Likewise.\n+\t* config/aarch64/aarch64.h (ASM_FPRINTF_EXTENSIONS): Remove.\n+\n 2013-01-08  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* config/pa/pa.h (VAL_U6_BITS_P): Define."}, {"sha": "7bb7a14fdb76a83f4b57da268d86b4d4999113b2", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a3a3242217431b8707735e4d2510a530a28eae/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a3a3242217431b8707735e4d2510a530a28eae/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=01a3a3242217431b8707735e4d2510a530a28eae", "patch": "@@ -3278,7 +3278,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \t  return;\n \t}\n \n-      asm_fprintf (f, \"%r\", REGNO (x) + 1);\n+      asm_fprintf (f, \"%s\", reg_names [REGNO (x) + 1]);\n       break;\n \n     case 'Q':\n@@ -3288,7 +3288,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \t  output_operand_lossage (\"invalid operand for '%%%c'\", code);\n \t  return;\n \t}\n-      asm_fprintf (f, \"%r\", REGNO (x) + (WORDS_BIG_ENDIAN ? 1 : 0));\n+      asm_fprintf (f, \"%s\", reg_names [REGNO (x) + (WORDS_BIG_ENDIAN ? 1 : 0)]);\n       break;\n \n     case 'R':\n@@ -3298,7 +3298,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \t  output_operand_lossage (\"invalid operand for '%%%c'\", code);\n \t  return;\n \t}\n-      asm_fprintf (f, \"%r\", REGNO (x) + (WORDS_BIG_ENDIAN ? 0 : 1));\n+      asm_fprintf (f, \"%s\", reg_names [REGNO (x) + (WORDS_BIG_ENDIAN ? 0 : 1)]);\n       break;\n \n     case 'm':\n@@ -3403,7 +3403,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n       switch (GET_CODE (x))\n \t{\n \tcase REG:\n-\t  asm_fprintf (f, \"%r\", REGNO (x));\n+\t  asm_fprintf (f, \"%s\", reg_names [REGNO (x)]);\n \t  break;\n \n \tcase MEM:\n@@ -3558,64 +3558,64 @@ aarch64_print_operand_address (FILE *f, rtx x)\n       {\n       case ADDRESS_REG_IMM:\n \tif (addr.offset == const0_rtx)\n-\t  asm_fprintf (f, \"[%r]\", REGNO (addr.base));\n+\t  asm_fprintf (f, \"[%s]\", reg_names [REGNO (addr.base)]);\n \telse\n-\t  asm_fprintf (f, \"[%r,%wd]\", REGNO (addr.base),\n+\t  asm_fprintf (f, \"[%s,%wd]\", reg_names [REGNO (addr.base)],\n \t\t       INTVAL (addr.offset));\n \treturn;\n \n       case ADDRESS_REG_REG:\n \tif (addr.shift == 0)\n-\t  asm_fprintf (f, \"[%r,%r]\", REGNO (addr.base),\n-\t\t       REGNO (addr.offset));\n+\t  asm_fprintf (f, \"[%s,%s]\", reg_names [REGNO (addr.base)],\n+\t\t       reg_names [REGNO (addr.offset)]);\n \telse\n-\t  asm_fprintf (f, \"[%r,%r,lsl %u]\", REGNO (addr.base),\n-\t\t       REGNO (addr.offset), addr.shift);\n+\t  asm_fprintf (f, \"[%s,%s,lsl %u]\", reg_names [REGNO (addr.base)],\n+\t\t       reg_names [REGNO (addr.offset)], addr.shift);\n \treturn;\n \n       case ADDRESS_REG_UXTW:\n \tif (addr.shift == 0)\n-\t  asm_fprintf (f, \"[%r,w%d,uxtw]\", REGNO (addr.base),\n+\t  asm_fprintf (f, \"[%s,w%d,uxtw]\", reg_names [REGNO (addr.base)],\n \t\t       REGNO (addr.offset) - R0_REGNUM);\n \telse\n-\t  asm_fprintf (f, \"[%r,w%d,uxtw %u]\", REGNO (addr.base),\n+\t  asm_fprintf (f, \"[%s,w%d,uxtw %u]\", reg_names [REGNO (addr.base)],\n \t\t       REGNO (addr.offset) - R0_REGNUM, addr.shift);\n \treturn;\n \n       case ADDRESS_REG_SXTW:\n \tif (addr.shift == 0)\n-\t  asm_fprintf (f, \"[%r,w%d,sxtw]\", REGNO (addr.base),\n+\t  asm_fprintf (f, \"[%s,w%d,sxtw]\", reg_names [REGNO (addr.base)],\n \t\t       REGNO (addr.offset) - R0_REGNUM);\n \telse\n-\t  asm_fprintf (f, \"[%r,w%d,sxtw %u]\", REGNO (addr.base),\n+\t  asm_fprintf (f, \"[%s,w%d,sxtw %u]\", reg_names [REGNO (addr.base)],\n \t\t       REGNO (addr.offset) - R0_REGNUM, addr.shift);\n \treturn;\n \n       case ADDRESS_REG_WB:\n \tswitch (GET_CODE (x))\n \t  {\n \t  case PRE_INC:\n-\t    asm_fprintf (f, \"[%r,%d]!\", REGNO (addr.base),\n+\t    asm_fprintf (f, \"[%s,%d]!\", reg_names [REGNO (addr.base)], \n \t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n \t    return;\n \t  case POST_INC:\n-\t    asm_fprintf (f, \"[%r],%d\", REGNO (addr.base),\n+\t    asm_fprintf (f, \"[%s],%d\", reg_names [REGNO (addr.base)],\n \t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n \t    return;\n \t  case PRE_DEC:\n-\t    asm_fprintf (f, \"[%r,-%d]!\", REGNO (addr.base),\n+\t    asm_fprintf (f, \"[%s,-%d]!\", reg_names [REGNO (addr.base)],\n \t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n \t    return;\n \t  case POST_DEC:\n-\t    asm_fprintf (f, \"[%r],-%d\", REGNO (addr.base),\n+\t    asm_fprintf (f, \"[%s],-%d\", reg_names [REGNO (addr.base)],\n \t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n \t    return;\n \t  case PRE_MODIFY:\n-\t    asm_fprintf (f, \"[%r,%wd]!\", REGNO (addr.base),\n+\t    asm_fprintf (f, \"[%s,%wd]!\", reg_names [REGNO (addr.base)],\n \t\t\t INTVAL (addr.offset));\n \t    return;\n \t  case POST_MODIFY:\n-\t    asm_fprintf (f, \"[%r],%wd\", REGNO (addr.base),\n+\t    asm_fprintf (f, \"[%s],%wd\", reg_names [REGNO (addr.base)],\n \t\t\t INTVAL (addr.offset));\n \t    return;\n \t  default:\n@@ -3624,7 +3624,7 @@ aarch64_print_operand_address (FILE *f, rtx x)\n \tbreak;\n \n       case ADDRESS_LO_SUM:\n-\tasm_fprintf (f, \"[%r,#:lo12:\", REGNO (addr.base));\n+\tasm_fprintf (f, \"[%s,#:lo12:\", reg_names [REGNO (addr.base)]);\n \toutput_addr_const (f, addr.offset);\n \tasm_fprintf (f, \"]\");\n \treturn;\n@@ -3935,9 +3935,9 @@ aarch64_return_addr (int count, rtx frame ATTRIBUTE_UNUSED)\n static void\n aarch64_asm_trampoline_template (FILE *f)\n {\n-  asm_fprintf (f, \"\\tldr\\t%r, .+16\\n\", IP1_REGNUM);\n-  asm_fprintf (f, \"\\tldr\\t%r, .+20\\n\", STATIC_CHAIN_REGNUM);\n-  asm_fprintf (f, \"\\tbr\\t%r\\n\", IP1_REGNUM);\n+  asm_fprintf (f, \"\\tldr\\t%s, .+16\\n\", reg_names [IP1_REGNUM]);\n+  asm_fprintf (f, \"\\tldr\\t%s, .+20\\n\", reg_names [STATIC_CHAIN_REGNUM]);\n+  asm_fprintf (f, \"\\tbr\\t%s\\n\", reg_names [IP1_REGNUM]);\n   assemble_aligned_integer (4, const0_rtx);\n   assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\n   assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);"}, {"sha": "b4b7f20ac069d00b654c50134f272173436f20dc", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a3a3242217431b8707735e4d2510a530a28eae/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a3a3242217431b8707735e4d2510a530a28eae/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=01a3a3242217431b8707735e4d2510a530a28eae", "patch": "@@ -768,16 +768,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n #define ASM_APP_ON\t\"\\t\" ASM_COMMENT_START \" Start of user assembly\\n\"\n #define ASM_APP_OFF\t\"\\t\" ASM_COMMENT_START \" End of user assembly\\n\"\n \n-#define ASM_FPRINTF_EXTENSIONS(FILE, ARGS, P)\t\t\\\n-  case '@':\t\t\t\t\t\t\\\n-    fputs (ASM_COMMENT_START, FILE);\t\t\t\\\n-    break;\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-  case 'r':\t\t\t\t\t\t\\\n-    fputs (REGISTER_PREFIX, FILE);\t\t\t\\\n-    fputs (reg_names[va_arg (ARGS, int)], FILE);\t\\\n-    break;\n-\n #define CONSTANT_POOL_BEFORE_FUNCTION 0\n \n /* This definition should be relocated to aarch64-elf-raw.h.  This macro"}]}