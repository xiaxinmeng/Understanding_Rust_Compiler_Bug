{"sha": "f80b9be083e0e7d49e7744b7e531b9aa52acd563", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgwYjliZTA4M2UwZTdkNDllNzc0NGI3ZTUzMWI5YWE1MmFjZDU2Mw==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-09-14T15:47:18Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-09-14T18:04:08Z"}, "message": "rs6000: Disable optimizing multiple xxsetaccz instructions into one xxsetaccz\n\nFwprop will happily optimize two xxsetaccz instructions into one xxsetaccz\nby propagating the results of the first to the uses of the second.\nWe really don't want that to happen given the late priming/depriming of\naccumulators.  I fixed this by making the xxsetaccz source operand an\nunspec volatile.  I also removed the mma_xxsetaccz define_expand and\ndefine_insn_and_split and replaced it with a simple define_insn.\nThe expand and splitter patterns were leftovers from the pre opaque mode\ncode when the xxsetaccz code was part of the movpxi pattern, and we don't\nneed them now.\n\nRather than a new test case, I was able to just modify the current test case\nto add another __builtin_mma_xxsetaccz call which shows the bad code gen\nwith unpatched compilers.\n\n2021-09-14  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/mma.md (unspec): Delete UNSPEC_MMA_XXSETACCZ.\n\t(unspecv): Add UNSPECV_MMA_XXSETACCZ.\n\t(*mma_xxsetaccz): Delete.\n\t(mma_xxsetaccz): Change to define_insn.  Remove operand 1.\n\tUse UNSPECV_MMA_XXSETACCZ.  Update comment.\n\t* config/rs6000/rs6000.c (rs6000_rtx_costs): Use UNSPECV_MMA_XXSETACCZ.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/mma-builtin-6.c: Add second call to xxsetacc\n\tbuilt-in.  Update instruction counts.", "tree": {"sha": "6cf63e620d1db0638a9acbf6238492d530356882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cf63e620d1db0638a9acbf6238492d530356882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f80b9be083e0e7d49e7744b7e531b9aa52acd563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80b9be083e0e7d49e7744b7e531b9aa52acd563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f80b9be083e0e7d49e7744b7e531b9aa52acd563", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80b9be083e0e7d49e7744b7e531b9aa52acd563/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb32372651882adee2d41052f1e59012e8bb32a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb32372651882adee2d41052f1e59012e8bb32a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb32372651882adee2d41052f1e59012e8bb32a7"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "1990a2183f6c96f8f1dac95bc50c8cf64c31aee8", "filename": "gcc/config/rs6000/mma.md", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80b9be083e0e7d49e7744b7e531b9aa52acd563/gcc%2Fconfig%2Frs6000%2Fmma.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80b9be083e0e7d49e7744b7e531b9aa52acd563/gcc%2Fconfig%2Frs6000%2Fmma.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmma.md?ref=f80b9be083e0e7d49e7744b7e531b9aa52acd563", "patch": "@@ -91,7 +91,10 @@\n    UNSPEC_MMA_XVI8GER4SPP\n    UNSPEC_MMA_XXMFACC\n    UNSPEC_MMA_XXMTACC\n-   UNSPEC_MMA_XXSETACCZ\n+  ])\n+\n+(define_c_enum \"unspecv\"\n+  [UNSPECV_MMA_XXSETACCZ\n   ])\n \n ;; MMA instructions with 1 accumulator argument\n@@ -467,30 +470,16 @@\n   \"<acc> %A0\"\n   [(set_attr \"type\" \"mma\")])\n \n-;; We can't have integer constants in XOmode so we wrap this in an UNSPEC.\n-\n-(define_expand \"mma_xxsetaccz\"\n-  [(set (match_operand:XO 0 \"fpr_reg_operand\")\n-\t(const_int 0))]\n-  \"TARGET_MMA\"\n-{\n-  rtx xo0 = gen_rtx_UNSPEC (XOmode, gen_rtvec (1, const0_rtx),\n-\t\t\t    UNSPEC_MMA_XXSETACCZ);\n-  emit_insn (gen_rtx_SET (operands[0], xo0));\n-  DONE;\n-})\n+;; We can't have integer constants in XOmode so we wrap this in an\n+;; UNSPEC_VOLATILE.\n \n-(define_insn_and_split \"*mma_xxsetaccz\"\n+(define_insn \"mma_xxsetaccz\"\n   [(set (match_operand:XO 0 \"fpr_reg_operand\" \"=d\")\n-\t(unspec:XO [(match_operand 1 \"const_0_to_1_operand\" \"O\")]\n-\t UNSPEC_MMA_XXSETACCZ))]\n+\t(unspec_volatile:XO [(const_int 0)]\n+\t\t\t    UNSPECV_MMA_XXSETACCZ))]\n   \"TARGET_MMA\"\n   \"xxsetaccz %A0\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (unspec:XO [(match_dup 1)] UNSPEC_MMA_XXSETACCZ))]\n-  \"\"\n-  [(set_attr \"type\" \"mma\")\n-   (set_attr \"length\" \"4\")])\n+  [(set_attr \"type\" \"mma\")])\n \n (define_insn \"mma_<vv>\"\n   [(set (match_operand:XO 0 \"fpr_reg_operand\" \"=&d\")"}, {"sha": "b0ec8108007ecbbbb8d3fa8047b33b445831e755", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80b9be083e0e7d49e7744b7e531b9aa52acd563/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80b9be083e0e7d49e7744b7e531b9aa52acd563/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f80b9be083e0e7d49e7744b7e531b9aa52acd563", "patch": "@@ -22174,7 +22174,7 @@ rs6000_rtx_costs (rtx x, machine_mode mode, int outer_code,\n       break;\n \n     case UNSPEC:\n-      if (XINT (x, 1) == UNSPEC_MMA_XXSETACCZ)\n+      if (XINT (x, 1) == UNSPECV_MMA_XXSETACCZ)\n \t{\n \t  *total = 0;\n \t  return true;"}, {"sha": "715b28138e9eff4cc491f01a813e1c2614466e32", "filename": "gcc/testsuite/gcc.target/powerpc/mma-builtin-6.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80b9be083e0e7d49e7744b7e531b9aa52acd563/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80b9be083e0e7d49e7744b7e531b9aa52acd563/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-6.c?ref=f80b9be083e0e7d49e7744b7e531b9aa52acd563", "patch": "@@ -5,14 +5,16 @@\n void\n foo (__vector_quad *dst)\n {\n-  __vector_quad acc;\n-  __builtin_mma_xxsetaccz (&acc);\n-  *dst = acc;\n+  __vector_quad acc0, acc1;\n+  __builtin_mma_xxsetaccz (&acc0);\n+  __builtin_mma_xxsetaccz (&acc1);\n+  dst[0] = acc0;\n+  dst[1] = acc1;\n }\n \n /* { dg-final { scan-assembler-not {\\mlxv\\M} } } */\n /* { dg-final { scan-assembler-not {\\mlxvp\\M} } } */\n /* { dg-final { scan-assembler-not {\\mxxmtacc\\M} } } */\n-/* { dg-final { scan-assembler-times {\\mxxsetaccz\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxxmfacc\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mstxvp\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxxsetaccz\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxxmfacc\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvp\\M} 4 } } */"}]}