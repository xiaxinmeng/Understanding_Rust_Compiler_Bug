{"sha": "9a200b0a07e87fd05d1cfcc8564d8db0e80fae26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEyMDBiMGEwN2U4N2ZkMDVkMWNmY2M4NTY0ZDhkYjBlODBmYWUyNg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-10-05T20:15:29Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-10-05T20:15:29Z"}, "message": "acinclude.m4 (GLIBCPP_CHECK_CTYPE): Tweaks to message texts for public relations purposes.\n\n2000-10-05  Phil Edwards  <pme@sources.redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE):  Tweaks to message texts\n\t  for public relations purposes.\n\t* aclocal.m4:  Regenerated.\n\t* configure:  Regenerated.\n\n\t* docs/ext/howto.html:  Additional explanation about hashing.\n\nFrom-SVN: r36731", "tree": {"sha": "c5dece229304405fcb3ed60aaaa93518faa723f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5dece229304405fcb3ed60aaaa93518faa723f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26/comments", "author": null, "committer": null, "parents": [{"sha": "2296d1645dd5fe783674be3d5ed1f8b788041f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2296d1645dd5fe783674be3d5ed1f8b788041f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2296d1645dd5fe783674be3d5ed1f8b788041f4e"}], "stats": {"total": 2108, "additions": 1069, "deletions": 1039}, "files": [{"sha": "6170dee0df33400db2a779091c70573d998483f5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9a200b0a07e87fd05d1cfcc8564d8db0e80fae26", "patch": "@@ -1,3 +1,12 @@\n+2000-10-05  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE):  Tweaks to message texts\n+\t  for public relations purposes.\n+\t* aclocal.m4:  Regenerated.\n+\t* configure:  Regenerated.\n+\n+\t* docs/ext/howto.html:  Additional explanation about hashing.\n+\n 2000-10-05  Benjamin Kosnik  <bkoz@cygnus.com>\n \n \t* include: New directory."}, {"sha": "beea8da7ac638fdfd83140e77e0b7d48d3fe46e5", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=9a200b0a07e87fd05d1cfcc8564d8db0e80fae26", "patch": "@@ -583,7 +583,6 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   dnl keep this sync'd with the one above. And if you add any new symbol,\n   dnl please add the corresponding block in the @BOTTOM@ section of acconfig.h.\n   dnl Check to see if certain C math functions exist.\n-  dnl Check to see if certain C math functions exist.\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnan)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finite)\n@@ -748,8 +747,8 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     dnl If doesn't match any specified, go with defaults.\n     ctype_default=yes\n \n-    dnl Test for <ctype> functionality -- gnu-linux\n-    AC_MSG_CHECKING([<ctype> for gnu-linux ])\n+    dnl Test for <ctype> functionality -- GNU/Linux\n+    AC_MSG_CHECKING([<ctype> for GNU/Linux])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -765,7 +764,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- FreeBSD 4.0\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for freebsd 4.0 ])\n+    AC_MSG_CHECKING([<ctype> for FreeBSD 4.0])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -781,7 +780,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- FreeBSD 3.4\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for freebsd 3.4 ])\n+    AC_MSG_CHECKING([<ctype> for FreeBSD 3.4])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -795,9 +794,9 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     fi\n     fi\n \n-    dnl Test for <ctype> functionality -- solaris 2.6 and 2.7\n+    dnl Test for <ctype> functionality -- Solaris 2.6 and up\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for solaris 2.[6,7,8] ])\n+    AC_MSG_CHECKING([<ctype> for Solaris 2.6,7,8])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -816,19 +815,19 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n       AC_LANG_C\n       if test $ctype_solaris26 = \"yes\"; then\n         ctype_include_dir=\"config/solaris/solaris2.6\"\n-        AC_MSG_RESULT(\"solaris2.6\")\n+        AC_MSG_RESULT([Solaris 2.6])\n         ctype_default=no\n       else\n         ctype_include_dir=\"config/solaris/solaris2.7\"\n-        AC_MSG_RESULT(\"solaris2.[7,8]\")\n+        AC_MSG_RESULT([Solaris 7,8])\n         ctype_default=no\n       fi\n     fi\n     fi  \n \n-    dnl Test for <ctype> functionality -- solaris 2.5.1\n+    dnl Test for <ctype> functionality -- Solaris 2.5.1\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for solaris 2.5.1 ])\n+    AC_MSG_CHECKING([<ctype> for Solaris 2.5.1])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -842,9 +841,9 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     fi\n     fi\n \n-    dnl Test for <ctype> functionality -- aix\n+    dnl Test for <ctype> functionality -- AIX\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for aix ])\n+    AC_MSG_CHECKING([<ctype> for AIX])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -861,7 +860,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- newlib\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for newlib ])\n+    AC_MSG_CHECKING([<ctype> for newlib])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -1592,3 +1591,4 @@ AC_DEFUN([AM_PROG_LIBTOOL])\n AC_DEFUN([AC_LIBTOOL_DLOPEN])\n AC_DEFUN([AC_PROG_LD])\n ])\n+"}, {"sha": "1be9e62ac11cb01bdeaf95d696caa44d50ba4009", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=9a200b0a07e87fd05d1cfcc8564d8db0e80fae26", "patch": "@@ -595,7 +595,6 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   dnl keep this sync'd with the one above. And if you add any new symbol,\n   dnl please add the corresponding block in the @BOTTOM@ section of acconfig.h.\n   dnl Check to see if certain C math functions exist.\n-  dnl Check to see if certain C math functions exist.\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnan)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finite)\n@@ -760,8 +759,8 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     dnl If doesn't match any specified, go with defaults.\n     ctype_default=yes\n \n-    dnl Test for <ctype> functionality -- gnu-linux\n-    AC_MSG_CHECKING([<ctype> for gnu-linux ])\n+    dnl Test for <ctype> functionality -- GNU/Linux\n+    AC_MSG_CHECKING([<ctype> for GNU/Linux])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -777,7 +776,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- FreeBSD 4.0\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for freebsd 4.0 ])\n+    AC_MSG_CHECKING([<ctype> for FreeBSD 4.0])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -793,7 +792,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- FreeBSD 3.4\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for freebsd 3.4 ])\n+    AC_MSG_CHECKING([<ctype> for FreeBSD 3.4])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -807,9 +806,9 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     fi\n     fi\n \n-    dnl Test for <ctype> functionality -- solaris 2.6 and 2.7\n+    dnl Test for <ctype> functionality -- Solaris 2.6 and up\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for solaris 2.[6,7,8] ])\n+    AC_MSG_CHECKING([<ctype> for Solaris 2.6,7,8])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -828,19 +827,19 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n       AC_LANG_C\n       if test $ctype_solaris26 = \"yes\"; then\n         ctype_include_dir=\"config/solaris/solaris2.6\"\n-        AC_MSG_RESULT(\"solaris2.6\")\n+        AC_MSG_RESULT([Solaris 2.6])\n         ctype_default=no\n       else\n         ctype_include_dir=\"config/solaris/solaris2.7\"\n-        AC_MSG_RESULT(\"solaris2.[7,8]\")\n+        AC_MSG_RESULT([Solaris 7,8])\n         ctype_default=no\n       fi\n     fi\n     fi  \n \n-    dnl Test for <ctype> functionality -- solaris 2.5.1\n+    dnl Test for <ctype> functionality -- Solaris 2.5.1\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for solaris 2.5.1 ])\n+    AC_MSG_CHECKING([<ctype> for Solaris 2.5.1])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -854,9 +853,9 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     fi\n     fi\n \n-    dnl Test for <ctype> functionality -- aix\n+    dnl Test for <ctype> functionality -- AIX\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for aix ])\n+    AC_MSG_CHECKING([<ctype> for AIX])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -873,7 +872,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- newlib\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for newlib ])\n+    AC_MSG_CHECKING([<ctype> for newlib])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -1605,6 +1604,7 @@ AC_DEFUN([AC_LIBTOOL_DLOPEN])\n AC_DEFUN([AC_PROG_LD])\n ])\n \n+\n # Do all the work for Automake.  This macro actually does too much --\n # some checks are only needed if your package does certain things.\n # But this isn't really a big deal."}, {"sha": "a0caedacebf365966e296048165ffa99ed5497f5", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1020, "deletions": 1009, "changes": 2029, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=9a200b0a07e87fd05d1cfcc8564d8db0e80fae26"}, {"sha": "11a6366e753adbf1f26d43a836f7e3818adcf427", "filename": "libstdc++-v3/docs/ext/howto.html", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26/libstdc%2B%2B-v3%2Fdocs%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a200b0a07e87fd05d1cfcc8564d8db0e80fae26/libstdc%2B%2B-v3%2Fdocs%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fext%2Fhowto.html?ref=9a200b0a07e87fd05d1cfcc8564d8db0e80fae26", "patch": "@@ -9,7 +9,7 @@\n    <TITLE>libstdc++-v3 HOWTO:  Extensions</TITLE>\n <LINK REL=\"home\" HREF=\"http://sources.redhat.com/libstdc++/docs/ext/\">\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.5 2000/09/19 21:54:48 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.1 2000/09/25 21:42:14 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -84,6 +84,16 @@ <H2><A NAME=\"1\">Ropes and trees and hashes, oh my!</A></H2>\n       functions, as well as some extra constructors specifying the number\n       of buckets, etc.\n    </P>\n+   <P>Why would you want to use a hashing class instead of the\n+      &quot;normal&quot; implementations?  Matt Austern writes:\n+      <BLOCKQUOTE><EM>[W]ith a well chosen hash function, hash tables\n+      generally provide much better average-case performance than binary\n+      search trees, and much worse worst-case performance.  So if your\n+      implementation has hash_map, if you don't mind using nonstandard\n+      components, and if you aren't scared about the possibility of\n+      pathological cases, you'll probably get better performance from\n+      hash_map.</EM></BLOCKQUOTE>\n+   </P>\n    <P>(Side note:  for those of you wondering, <B>&quot;Why wasn't a hash\n       table included in the Standard in the first #!$@ place?&quot;</B> I'll\n       give a quick answer:  it was proposed, but too late and in too\n@@ -139,7 +149,7 @@ <H2><A NAME=\"3\">Allocators</A></H2>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n <A HREF=\"mailto:gdr@egcs.cygnus.com\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.5 2000/09/19 21:54:48 pme Exp $\n+<BR> $Id: howto.html,v 1.1 2000/09/25 21:42:14 pme Exp $\n </EM></P>\n \n "}]}