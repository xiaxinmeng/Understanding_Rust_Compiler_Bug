{"sha": "d815ea49f655071a199c1dae851f0849bdf9d711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgxNWVhNDlmNjU1MDcxYTE5OWMxZGFlODUxZjA4NDliZGY5ZDcxMQ==", "commit": {"author": {"name": "Phil Edwards", "email": "phil@codesourcery.com", "date": "2004-07-29T08:47:34Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2004-07-29T08:47:34Z"}, "message": "index.html: Update version references.\n\n2004-07-29  Phil Edwards  <phil@codesourcery.com>\n\n\t* docs/html/faq/index.html:  Update version references.  Make\n\tclear that code from SGI has diverged greatly.  Remove references\n\tto library snapshots and what's-new sections.\n\t* docs/html/faq/index.txt:  Regenerate.\n\nFrom-SVN: r85289", "tree": {"sha": "e7bc0650518a1e6e5750e5e3047a4f57c8a4fbd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7bc0650518a1e6e5750e5e3047a4f57c8a4fbd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d815ea49f655071a199c1dae851f0849bdf9d711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d815ea49f655071a199c1dae851f0849bdf9d711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d815ea49f655071a199c1dae851f0849bdf9d711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d815ea49f655071a199c1dae851f0849bdf9d711/comments", "author": null, "committer": null, "parents": [{"sha": "91683ccda0140a2c533fc82a8b0b373ac09a95fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91683ccda0140a2c533fc82a8b0b373ac09a95fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91683ccda0140a2c533fc82a8b0b373ac09a95fd"}], "stats": {"total": 557, "additions": 270, "deletions": 287}, "files": [{"sha": "dba7411283bf27634f776f4d1a91b85da0fb505e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d815ea49f655071a199c1dae851f0849bdf9d711/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d815ea49f655071a199c1dae851f0849bdf9d711/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d815ea49f655071a199c1dae851f0849bdf9d711", "patch": "@@ -1,3 +1,10 @@\n+2004-07-29  Phil Edwards  <phil@codesourcery.com>\n+\n+\t* docs/html/faq/index.html:  Update version references.  Make\n+\tclear that code from SGI has diverged greatly.  Remove references\n+\tto library snapshots and what's-new sections.\n+\t* docs/html/faq/index.txt:  Regenerate.\n+\n 2004-07-28  Matt Austern  <austern@apple.com>\n \n \t* include/bits/stl_construct.h (_Destroy): New three-argument"}, {"sha": "abd6ff3d13fe0b79d09c995cf3160bc959feed7a", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d815ea49f655071a199c1dae851f0849bdf9d711/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d815ea49f655071a199c1dae851f0849bdf9d711/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=d815ea49f655071a199c1dae851f0849bdf9d711", "patch": "@@ -13,10 +13,6 @@\n <link rel=\"Start\" rev=\"Help\" href=\"../documentation.html\" type=\"text/html\"\n  title=\"GNU C++ Standard Library\" />\n <link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<!--\n-  ** Locations of \"the most recent snapshot is the Nth\" text are\n-  ** answers 1_1, .\n--->\n </head>\n <body>\n \n@@ -137,12 +133,8 @@ <h1><a name=\"1_0\">1.0 General Information</a></h1>\n    <h2><a name=\"1_1\">1.1 What is libstdc++-v3?</a></h2>\n       <p>The GNU Standard C++ Library v3 is an\n          ongoing project to implement the ISO 14882 Standard C++ library\n-         as described in chapters 17 through 27 and annex D.  As the\n-         library reaches stable plateaus, it is captured in a snapshot\n-         and released.  The latest release is\n-         <a href=\"http://gcc.gnu.org/libstdc++/index.html#download\">the\n-         fourteenth snapshot</a> but newer versions have been included\n-         in recent GCC releases.  For those who want to see exactly how\n+         as described in chapters 17 through 27 and annex D.\n+         For those who want to see exactly how\n          far the project has come, or just want the latest\n          bleeding-edge code, the up-to-date source is available over\n          anonymous CVS, and can even be browsed over the Web (see\n@@ -169,10 +161,10 @@ <h2><a name=\"1_2\">1.2 Why should I use libstdc++?</a></h2>\n       <p>The GNU C/C++/FORTRAN/&lt;pick-a-language&gt; compiler\n          (<code>gcc</code>, <code>g++</code>, etc) is widely considered to be\n          one of the leading compilers in the world.  Its development\n-         has recently been taken over by the\n+         is overseen by the\n          <a href=\"http://gcc.gnu.org/\">GCC team</a>.  All of\n          the rapid development and near-legendary\n-         <a href=\"http://gcc.gnu.org/gcc-3.0/buildstat.html\">portability</a>\n+         <a href=\"http://gcc.gnu.org/gcc-3.3/buildstat.html\">portability</a>\n          that are the hallmarks of an open-source project are being\n          applied to libstdc++.\n       </p>\n@@ -209,7 +201,7 @@ <h2><a name=\"1_4\">1.4 How do I get libstdc++?</a></h2>\n       </p>\n       <p>The subset commonly known as the Standard Template Library\n          (chapters 23 through 25, mostly) is adapted from the final release\n-         of the SGI STL.\n+         of the SGI STL, with extensive changes.\n       </p>\n \n <hr />\n@@ -306,7 +298,7 @@ <h2><a name=\"2_1\">2.1 How do I install libstdc++-v3?</a></h2>\n                  series was.  If you are using GCC 2.95, you can still\n                  build earlier snapshots of libstdc++.\n             </li>\n-            <li> GNU Make is recommended, but should not be required.\n+            <li> GNU Make is required for GCC 3.4 and later.\n             </li>\n             <li> The GNU Autotools are needed if you are messing with\n                  the configury or makefiles.\n@@ -636,26 +628,17 @@ <h1><a name=\"4_0\">4.0 Known Bugs and Non-Bugs</a></h1>\n       respond to your report.  Thank you.\n    </p>\n \n+<hr />\n    <h2><a name=\"4_1\">4.1 What works already?</a></h2>\n       <p>Short answer:  Pretty much everything <em>works</em> except for some\n          corner cases.  Also, localization is incomplete.  For whether it works\n          well, or as you expect it to work, see 5.2.\n       </p>\n       <p>Long answer:  See the docs/html/17_intro/CHECKLIST file, which is\n-         badly outdated...\n-      </p>\n-      <p>What follows is a verbatim clip from the &quot;Status&quot; section\n-         of the RELEASE-NOTES for the latest snapshot.  For a list of\n-         fixed bugs, see that file.\n+         badly outdated...  Also see the RELEASE-NOTES file, which is kept\n+         more up to date.\n       </p>\n \n-<!-- Yeah, I meant that \"verbatim clip\" thing literally... :-)  -->\n-\n-<pre>\n-New:\n-</pre>\n-\n-\n <hr />\n    <h2><a name=\"4_2\">4.2 Bugs in gcc/g++ (not libstdc++-v3)</a></h2>\n       <p>This is by no means meant to be complete nor exhaustive, but\n@@ -915,9 +898,9 @@ <h2><a name=\"5_2\">5.2 What's next after libstdc++-v3?</a></h2>\n <hr />\n    <h2><a name=\"5_3\">5.3 What about the STL from SGI?</a></h2>\n       <p>The <a href=\"http://www.sgi.com/tech/stl/\">STL from SGI</a>,\n-         version 3.3, was the most recent merge of the STL codebase.  The\n-         code in libstdc++ contains many fixes and changes, and it is\n-         very likely that the SGI code is no longer under active\n+         version 3.3, was the final merge of the STL codebase.  The\n+         code in libstdc++ contains many fixes and changes, and\n+         the SGI code is no longer under active\n          development.  We expect that no future merges will take place.\n       </p>\n       <p>In particular, <code>string</code> is not from SGI and makes no"}, {"sha": "b6d0decb2cd8ac21e4f9bbbe7f9686ffdae9e421", "filename": "libstdc++-v3/docs/html/faq/index.txt", "status": "modified", "additions": 251, "deletions": 258, "changes": 509, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d815ea49f655071a199c1dae851f0849bdf9d711/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d815ea49f655071a199c1dae851f0849bdf9d711/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt?ref=d815ea49f655071a199c1dae851f0849bdf9d711", "patch": "@@ -1,18 +1,18 @@\n \n    #[1]GNU C++ Standard Library [2]Copyright\n-   \n+\n                      libstdc++ Frequently Asked Questions\n-                                       \n+\n    The latest version of this document is always available at\n    [3]http://gcc.gnu.org/onlinedocs/libstdc++/faq/. The main\n    documentation page is at\n    [4]http://gcc.gnu.org/onlinedocs/libstdc++/documentation.html. \n-   \n+\n    To the [5]libstdc++-v3 homepage. \n      _________________________________________________________________\n-   \n+\n                                    Questions\n-                                       \n+\n     1. [6]General Information\n          1. [7]What is libstdc++-v3?\n          2. [8]Why should I use libstdc++?\n@@ -71,109 +71,106 @@\n          9. [57]How do I make std::vector<T>::capacity() ==\n             std::vector<T>::size?\n      _________________________________________________________________\n-   \n+\n                             1.0 General Information\n-                                       \n+\n 1.1 What is libstdc++-v3?\n \n    The GNU Standard C++ Library v3 is an ongoing project to implement the\n    ISO 14882 Standard C++ library as described in chapters 17 through 27\n-   and annex D. As the library reaches stable plateaus, it is captured in\n-   a snapshot and released. The latest release is [58]the fourteenth\n-   snapshot but newer versions have been included in recent GCC releases.\n-   For those who want to see exactly how far the project has come, or\n-   just want the latest bleeding-edge code, the up-to-date source is\n-   available over anonymous CVS, and can even be browsed over the Web\n-   (see [59]1.4 below).\n-   \n+   and annex D. For those who want to see exactly how far the project has\n+   come, or just want the latest bleeding-edge code, the up-to-date\n+   source is available over anonymous CVS, and can even be browsed over\n+   the Web (see [58]1.4 below).\n+\n    The older libstdc++-v2 project is no longer maintained; the code has\n-   been completely replaced and rewritten. [60]If you are using V2, then\n+   been completely replaced and rewritten. [59]If you are using V2, then\n    you need to report bugs to your system vendor, not to the V3 list.\n-   \n+\n    A more formal description of the V3 goals can be found in the official\n-   [61]design document.\n+   [60]design document.\n      _________________________________________________________________\n-   \n+\n 1.2 Why should I use libstdc++?\n \n    The completion of the ISO C++ standardization gave the C++ community a\n    powerful set of reuseable tools in the form of the C++ Standard\n    Library. However, all existing C++ implementations are (as the Draft\n    Standard used to say) \"incomplet and incorrekt,\" and many suffer from\n    limitations of the compilers that use them.\n-   \n+\n    The GNU C/C++/FORTRAN/<pick-a-language> compiler (gcc, g++, etc) is\n    widely considered to be one of the leading compilers in the world. Its\n-   development has recently been taken over by the [62]GCC team. All of\n-   the rapid development and near-legendary [63]portability that are the\n-   hallmarks of an open-source project are being applied to libstdc++.\n-   \n+   development is overseen by the [61]GCC team. All of the rapid\n+   development and near-legendary [62]portability that are the hallmarks\n+   of an open-source project are being applied to libstdc++.\n+\n    That means that all of the Standard classes and functions (such as\n    string, vector<>, iostreams, and algorithms) will be freely available\n    and fully compliant. Programmers will no longer need to \"roll their\n    own\" nor be worried about platform-specific incompatibilities.\n      _________________________________________________________________\n-   \n+\n 1.3 Who's in charge of it?\n \n    The libstdc++ project is contributed to by several developers all over\n    the world, in the same way as GCC or Linux. Benjamin Kosnik, Gabriel\n    Dos Reis, Phil Edwards, Ulrich Drepper, Loren James Rittle, and Paolo\n    Carlini are the lead maintainers of the CVS archive.\n-   \n+\n    Development and discussion is held on the libstdc++ mailing list.\n    Subscribing to the list, or searching the list archives, is open to\n-   everyone. You can read instructions for doing so on the [64]homepage.\n+   everyone. You can read instructions for doing so on the [63]homepage.\n    If you have questions, ideas, code, or are just curious, sign up!\n      _________________________________________________________________\n-   \n+\n 1.4 How do I get libstdc++?\n \n-   The [65]homepage has instructions for retrieving the latest CVS\n+   The [64]homepage has instructions for retrieving the latest CVS\n    sources, and for browsing the CVS sources over the web.\n-   \n-   Stable versions of libstdc++-v3 are included with releases of [66]the\n+\n+   Stable versions of libstdc++-v3 are included with releases of [65]the\n    GCC compilers.\n-   \n+\n    The subset commonly known as the Standard Template Library (chapters\n    23 through 25, mostly) is adapted from the final release of the SGI\n-   STL.\n+   STL, with extensive changes.\n      _________________________________________________________________\n-   \n+\n 1.5 When is libstdc++ going to be finished?\n \n    Nathan Myers gave the best of all possible answers, responding to a\n    Usenet article asking this question: Sooner, if you help.\n      _________________________________________________________________\n-   \n+\n 1.6 How do I contribute to the effort?\n \n-   Here is [67]a page devoted to this topic. Subscribing to the mailing\n+   Here is [66]a page devoted to this topic. Subscribing to the mailing\n    list (see above, or the homepage) is a very good idea if you have\n    something to contribute, or if you have spare time and want to help.\n    Contributions don't have to be in the form of source code; anybody who\n    is willing to help write documentation, for example, or has found a\n    bug in code that we all thought was working, is more than welcome!\n      _________________________________________________________________\n-   \n+\n 1.7 What happened to libg++? I need that!\n \n    The most recent libg++ README states that libg++ is no longer being\n    actively maintained. It should not be used for new projects, and is\n    only being kicked along to support older code.\n-   \n+\n    The libg++ was designed and created when there was no Standard to\n    provide guidance. Classes like linked lists are now provided for by\n    list<T> and do not need to be created by genclass. (For that matter,\n    templates exist now and are well-supported, whereas genclass (mostly)\n    predates them.)\n-   \n+\n    There are other classes in libg++ that are not specified in the ISO\n    Standard (e.g., statistical analysis). While there are a lot of really\n    useful things that are used by a lot of people (e.g., statistics :-),\n    the Standards Committee couldn't include everything, and so a lot of\n    those \"obvious\" classes didn't get included.\n-   \n+\n    Since libstdc++ is an implementation of the Standard Library, we have\n    no plans at this time to include non-Standard utilities in the\n    implementation, however handy they are. (The extensions provided in\n@@ -182,35 +179,35 @@\n    entirely plausable that the \"useful stuff\" from libg++ might be\n    extracted into an updated utilities library, but nobody has started\n    such a project yet.\n-   \n-   (The [68]Boost site houses free C++ libraries that do varying things,\n+\n+   (The [67]Boost site houses free C++ libraries that do varying things,\n    and happened to be started by members of the Standards Committee.\n    Certain \"useful stuff\" classes will probably migrate there.)\n-   \n-   For the bold and/or desperate, the [69]GCC extensions page describes\n+\n+   For the bold and/or desperate, the [68]GCC extensions page describes\n    where to find the last libg++ source.\n      _________________________________________________________________\n-   \n+\n 1.8 What if I have more questions?\n \n    If you have read the README and RELEASE-NOTES files, and your question\n    remains unanswered, then just ask the mailing list. At present, you do\n    not need to be subscribed to the list to send a message to it. More\n    information is available on the homepage (including how to browse the\n-   list archives); to send to the list, use [70]libstdc++@gcc.gnu.org.\n-   \n+   list archives); to send to the list, use [69]libstdc++@gcc.gnu.org.\n+\n    If you have a question that you think should be included here, or if\n-   you have a question about a question/answer here, contact [71]Phil\n-   Edwards or [72]Gabriel Dos Reis.\n+   you have a question about a question/answer here, contact [70]Phil\n+   Edwards or [71]Gabriel Dos Reis.\n      _________________________________________________________________\n-   \n+\n 1.9 What are the license terms for libstdc++-v3?\n \n-   See [73]our license description for these and related questions.\n+   See [72]our license description for these and related questions.\n      _________________________________________________________________\n-   \n+\n                                2.0 Installation\n-                                       \n+\n 2.1 How do I install libstdc++-v3?\n \n    Complete instructions are not given here (this is a FAQ, not an\n@@ -219,60 +216,60 @@\n        more automated than building the GCC 2.[78] series was. If you are\n        using GCC 2.95, you can still build earlier snapshots of\n        libstdc++.\n-     * GNU Make is recommended, but should not be required.\n+     * GNU Make is required for GCC 3.4 and later.\n      * The GNU Autotools are needed if you are messing with the configury\n        or makefiles.\n-       \n-   The file [74]documentation.html provides a good overview of the steps\n+\n+   The file [73]documentation.html provides a good overview of the steps\n    necessary to build, install, and use the library. Instructions for\n    configuring the library with new flags such as --enable-threads are\n    there also, as well as patches and instructions for working with GCC\n    2.95.\n-   \n-   The top-level install.html and [75]RELEASE-NOTES files contain the\n+\n+   The top-level install.html and [74]RELEASE-NOTES files contain the\n    exact build and installation instructions. You may wish to browse\n    those files over CVSweb ahead of time to get a feel for what's\n    required. RELEASE-NOTES is located in the \".../docs/17_intro/\"\n    directory of the distribution.\n      _________________________________________________________________\n-   \n+\n 2.2 [removed]\n \n    This question has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n-   \n+\n 2.3 What is this CVS thing that you keep mentioning?\n \n    The Concurrent Versions System is one of several revision control\n    packages. It was selected for GNU projects because it's free (speech),\n-   free (beer), and very high quality. The [76]CVS entry in the GNU\n-   software catalogue has a better description as well as a [77]link to\n+   free (beer), and very high quality. The [75]CVS entry in the GNU\n+   software catalogue has a better description as well as a [76]link to\n    the makers of CVS.\n-   \n+\n    The \"anonymous client checkout\" feature of CVS is similar to anonymous\n    FTP in that it allows anyone to retrieve the latest libstdc++ sources.\n-   \n+\n    After the first of April, American users will have a \"/pharmacy\"\n    command-line option...\n      _________________________________________________________________\n-   \n+\n 2.4 How do I know if it works?\n \n    libstdc++-v3 comes with its own testsuite. You do not need to actually\n    install the library (\"make install\") to run the testsuite, but you do\n-   need DejaGNU, as described [78]here.\n-   \n+   need DejaGNU, as described [77]here.\n+\n    To run the testsuite on the library after building it, use \"make\n    check\" while in your build directory. To run the testsuite on the\n    library after building and installing it, use \"make check-install\"\n    instead.\n-   \n+\n    If you find bugs in the testsuite programs themselves, or if you think\n    of a new test program that should be added to the suite, please write\n    up your idea and send it to the list!\n      _________________________________________________________________\n-   \n+\n 2.5 This library is HUGE! And what's libsupc++?\n \n    Usually the size of libraries on disk isn't noticeable. When a link\n@@ -283,7 +280,7 @@\n    object file is extracted. (There's nothing unique to C++ or\n    libstdc++-v3 about this; it's just common behavior, given here for\n    background reasons.)\n-   \n+\n    Some of the object files which make up libstdc++.a are rather large.\n    If you create a statically-linked executable with -static, those large\n    object files are suddenly part of your executable. Historically the\n@@ -294,33 +291,33 @@\n    files in question contain template classes and template functions,\n    pre-instantiated, and splitting those up causes severe maintenance\n    headaches.\n-   \n+\n    It's not a bug, and it's not really a problem. Nevertheless, some\n    people don't like it, so here are two pseudo-solutions:\n-   \n+\n    If the only functions from libstdc++.a which you need are language\n-   support functions (those listed in [79]clause 18 of the standard,\n-   e.g., new and delete), then try linking against libsupc++.a (usually\n-   specifying -lsupc++ when calling g++ for the final link step will do\n-   it). This library contains only those support routines, one per object\n-   file. But if you are using anything from the rest of the library, such\n-   as IOStreams or vectors, then you'll still need pieces from\n-   libstdc++.a.\n-   \n+   support functions (those listed in [78]clause 18 of the standard,\n+   e.g., new and delete), then try linking against libsupc++.a (Using gcc\n+   instead of g++ and explicitly linking in -lsupc++ for the final link\n+   step will do it). This library contains only those support routines,\n+   one per object file. But if you are using anything from the rest of\n+   the library, such as IOStreams or vectors, then you'll still need\n+   pieces from libstdc++.a.\n+\n    The second method is one we hope to incorporate into the library build\n    process. Some platforms can place each function and variable into its\n    own section in a .o file. The GNU linker can then perform garbage\n    collection on unused sections; this reduces the situation to only\n    copying needed functions into the executable, as before, but all\n    happens automatically.\n-   \n+\n    Unfortunately the garbage collection in GNU ld is buggy; sections\n    (corresponding to functions and variables) which are used are\n    mistakenly removed, leading to horrible crashes when your executable\n    starts up. For the time being, this feature is not used when building\n    the library.\n      _________________________________________________________________\n-   \n+\n 2.6 Why do I get an error saying libstdc++.so.X is missing when I run my\n program?\n \n@@ -347,99 +344,99 @@ shared object file: No such file or directory\n    LD_LIBRARY_PATH_32/LD_LIBRARY_PATH_64 for Solaris 32-/64-bit,\n    LD_LIBRARYN32_PATH/LD_LIBRARY64_PATH for Irix N32/64-bit ABIs and\n    SHLIB_PATH for HP-UX.\n-   \n+\n    See the man pages for ld(1), ldd(1) and ldconfig(8) for more\n    information. The dynamic linker has different names on different\n    platforms but the man page is usually called something such as ld.so /\n    rtld / dld.so.\n      _________________________________________________________________\n-   \n+\n                          3.0 Platform-Specific Issues\n-                                       \n+\n 3.1 Can libstdc++-v3 be used with <my favorite compiler>?\n \n    Probably not. Yet.\n-   \n+\n    Because GCC advances so rapidly, development and testing of libstdc++\n    is being done almost entirely under that compiler. If you are curious\n    about whether other, lesser compilers (*grin*) support libstdc++, you\n    are more than welcome to try. Configuring and building the library\n    (see above) will still require certain tools, however. Also keep in\n    mind that building libstdc++ does not imply that your compiler will be\n    able to use all of the features found in the C++ Standard Library.\n-   \n+\n    Since the goal of ISO Standardization is for all C++ implementations\n    to be able to share code, the final libstdc++ should, in theory, be\n    usable under any ISO-compliant compiler. It will still be targeted and\n    optimized for GCC/g++, however.\n      _________________________________________________________________\n-   \n+\n 3.2 [removed]\n \n    This question has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n-   \n+\n 3.3 [removed]\n \n    This question has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n-   \n+\n 3.4 I can't use 'long long' on Solaris\n \n    By default we try to support the C99 long long type. This requires\n    that certain functions from your C library be present.\n-   \n+\n    Up through release 3.0.2 the tests performed were too general, and\n    this feature was disabled when it did not need to be. The most\n    commonly reported platform affected was Solaris.\n-   \n+\n    This has been fixed for 3.0.3 and onwards.\n      _________________________________________________________________\n-   \n+\n 3.5 _XOPEN_SOURCE / _GNU_SOURCE / etc is always defined\n \n    On Solaris, g++ (but not gcc) always defines the preprocessor macro\n    _XOPEN_SOURCE. On GNU/Linux, the same happens with _GNU_SOURCE. (This\n    is not an exhaustive list; other macros and other platforms are also\n    affected.)\n-   \n+\n    These macros are typically used in C library headers, guarding new\n    versions of functions from their older versions. The C++ standard\n    library includes the C standard library, but it requires the C90\n    version, which for backwards-compatability reasons is often not the\n    default for many vendors.\n-   \n+\n    More to the point, the C++ standard requires behavior which is only\n    available on certain platforms after certain symbols are defined.\n    Usually the issue involves I/O-related typedefs. In order to ensure\n    correctness, the compiler simply predefines those symbols.\n-   \n+\n    Note that it's not enough to #define them only when the library is\n    being built (during installation). Since we don't have an 'export'\n    keyword, much of the library exists as headers, which means that the\n    symbols must also be defined as your programs are parsed and compiled.\n-   \n+\n    To see which symbols are defined, look for CPLUSPLUS_CPP_SPEC in the\n    gcc config headers for your target (and try changing them to see what\n    happens when building complicated code). You can also run \"g++ -E -dM\n    - < /dev/null\" to display a list of predefined macros for any\n    particular installation.\n-   \n-   This has been discussed on the mailing lists [80]quite a bit.\n-   \n+\n+   This has been discussed on the mailing lists [79]quite a bit.\n+\n    This method is something of a wart. We'd like to find a cleaner\n    solution, but nobody yet has contributed the time.\n      _________________________________________________________________\n-   \n+\n 3.6 OS X ctype.h is broken! How can I hack it?\n \n    This is a long-standing bug in the OS X support. Fortunately, the\n-   patch is quite simple, and well-known. [81]Here's a link to the\n+   patch is quite simple, and well-known. [80]Here's a link to the\n    solution.\n      _________________________________________________________________\n-   \n+\n 3.7 Threading is broken on i386\n \n    Support for atomic integer operations is/was broken on i386 platforms.\n@@ -448,135 +445,132 @@ shared object file: No such file or directory\n    i386-linux, but actually used the programs on an i686, then you would\n    encounter no problems. Only when actually running the code on a i386\n    will the problem appear.\n-   \n+\n    This is fixed in 3.2.2.\n      _________________________________________________________________\n-   \n+\n 3.8 Recent GNU/Linux glibc required?\n \n    When running on GNU/Linux, libstdc++ 3.2.1 (shared library version\n    5.0.1) and later uses localization and formatting code from the system\n    C library (glibc) version 2.2.5. That version of glibc is over a year\n    old and contains necessary bugfixes. Many GNU/Linux distros make glibc\n    version 2.3.x available now.\n-   \n+\n    The guideline is simple: the more recent the C++ library, the more\n    recent the C library. (This is also documented in the main GCC\n    installation instructions.)\n      _________________________________________________________________\n-   \n+\n 3.9 Can't use wchar_t/wstring on FreeBSD\n \n    At the moment there are a few problems in FreeBSD's support for wide\n    character functions, and as a result the libstdc++ configury decides\n    that wchar_t support should be disabled. Once the underlying problems\n    are fixed in FreeBSD (soon), the library support will automatically\n    enable itself.\n-   \n+\n    You can fix the problems yourself, and learn more about the situation,\n-   by reading [82]this short thread (\"_GLIBCPP_USE_WCHAR_T undefined in\n+   by reading [81]this short thread (\"_GLIBCPP_USE_WCHAR_T undefined in\n    FreeBSD's c++config.h?\").\n      _________________________________________________________________\n-   \n+\n 3.10 MIPS atomic operations\n \n    The atomic locking routines for MIPS targets requires MIPS II and\n    later. A patch went in just after the 3.3 release to make mips* use\n    the generic implementation instead. You can also configure for\n    mipsel-elf as a workaround.\n-   \n+\n    mips*-*-linux* continues to use the MIPS II routines, and more work in\n    this area is expected.\n      _________________________________________________________________\n-   \n+\n                           4.0 Known Bugs and Non-Bugs\n-                                       \n+\n    Note that this section can get rapdily outdated -- such is the nature\n    of an open-source project. For the latest information, join the\n    mailing list or look through recent archives. The RELEASE- NOTES and\n    BUGS files are generally kept up-to-date.\n-   \n+\n    For 3.0.1, the most common \"bug\" is an apparently missing \"../\" in\n    include/Makefile, resulting in files like gthr.h and gthr-single.h not\n-   being found. Please read [83]the configuration instructions for GCC,\n+   being found. Please read [82]the configuration instructions for GCC,\n    specifically the part about configuring in a separate build directory,\n    and how strongly recommended it is. Building in the source directory\n    is fragile, is rarely tested, and tends to break, as in this case.\n    This was fixed for 3.0.2.\n-   \n+\n    For 3.1, the most common \"bug\" is a parse error when using <fstream>,\n    ending with a message, \"bits/basic_file.h:52: parse error before `{'\n-   token.\" Please read [84]the installation instructions for GCC,\n+   token.\" Please read [83]the installation instructions for GCC,\n    specifically the part about not installing newer versions on top of\n    older versions. If you install 3.1 over a 3.0.x release, then the\n    wrong basic_file.h header will be found (its location changed between\n    releases).\n-   \n+\n    Please do not report these as bugs. We know about them. Reporting this\n    -- or any other problem that's already been fixed -- hinders the\n    development of GCC, because we have to take time to respond to your\n    report. Thank you.\n-   \n+     _________________________________________________________________\n+\n 4.1 What works already?\n \n    Short answer: Pretty much everything works except for some corner\n    cases. Also, localization is incomplete. For whether it works well, or\n    as you expect it to work, see 5.2.\n-   \n+\n    Long answer: See the docs/html/17_intro/CHECKLIST file, which is badly\n-   outdated...\n-   \n-   What follows is a verbatim clip from the \"Status\" section of the\n-   RELEASE-NOTES for the latest snapshot. For a list of fixed bugs, see\n-   that file.\n-New:\n+   outdated... Also see the RELEASE-NOTES file, which is kept more up to\n+   date.\n      _________________________________________________________________\n-   \n+\n 4.2 Bugs in gcc/g++ (not libstdc++-v3)\n \n    This is by no means meant to be complete nor exhaustive, but mentions\n    some problems that users may encounter when building or using\n    libstdc++. If you are experiencing one of these problems, you can find\n    more information on the libstdc++ and the GCC mailing lists.\n-   \n-   Before reporting a bug, examine the [85]bugs database with the\n+\n+   Before reporting a bug, examine the [84]bugs database with the\n    category set to \"libstdc++\". The BUGS file in the source tree also\n    tracks known serious problems.\n      * Debugging is problematic, due to bugs in line-number generation\n        (mostly fixed in the compiler) and gdb lagging behind the compiler\n        (lack of personnel). We recommend configuring the compiler using\n        --with-dwarf2 if the DWARF2 debugging format is not already the\n-       default on your platform. Also, [86]changing your GDB settings can\n+       default on your platform. Also, [85]changing your GDB settings can\n        have a profound effect on your C++ debugging experiences. :-)\n      _________________________________________________________________\n-   \n+\n 4.3 Bugs in the C++ language/lib specification\n \n-   Yes, unfortunately, there are some. In a [87]message to the list,\n+   Yes, unfortunately, there are some. In a [86]message to the list,\n    Nathan Myers announced that he has started a list of problems in the\n    ISO C++ Standard itself, especially with regard to the chapters that\n-   concern the library. The list itself is [88]posted on his website.\n+   concern the library. The list itself is [87]posted on his website.\n    Developers who are having problems interpreting the Standard may wish\n    to consult his notes.\n-   \n+\n    For those people who are not part of the ISO Library Group (i.e.,\n    nearly all of us needing to read this page in the first place :-), a\n-   public list of the library defects is occasionally published [89]here.\n-   Some of these have resulted in [90]code changes.\n+   public list of the library defects is occasionally published [88]here.\n+   Some of these have resulted in [89]code changes.\n      _________________________________________________________________\n-   \n+\n 4.4 Things in libstdc++ that only look like bugs\n \n    There are things which are not bugs in the compiler (4.2) nor the\n    language specification (4.3), but aren't really bugs in libstdc++,\n    either. Really! Please do not report these as bugs.\n-   \n+\n    -Weffc++ The biggest of these is the quadzillions of warnings about\n    the library headers emitted when -Weffc++ is used. Making libstdc++\n    \"-Weffc++-clean\" is not a goal of the project, for a few reasons.\n    Mainly, that option tries to enforce object-oriented programming,\n    while the Standard Library isn't necessarily trying to be OO.\n-   \n+\n    reopening a stream fails Did I just say that -Weffc++ was our biggest\n    false-bug report? I lied. (It used to be.) Today it seems to be\n    reports that after executing a sequence like\n@@ -594,38 +588,38 @@ New:\n    state on the previous file. The reason is that the state flags are not\n    cleared on a successful call to open(). The standard unfortunately did\n    not specify behavior in this case, and to everybody's great sorrow,\n-   the [91]proposed LWG resolution in DR #22 is to leave the flags\n+   the [90]proposed LWG resolution in DR #22 is to leave the flags\n    unchanged. You must insert a call to fs.clear() between the calls to\n    close() and open(), and then everything will work like we all expect\n    it to work.\n-   \n+\n    rel_ops Another is the rel_ops namespace and the template comparison\n    operator functions contained therein. If they become visible in the\n    same namespace as other comparison functions (e.g., 'using' them and\n    the <iterator> header), then you will suddenly be faced with huge\n    numbers of ambiguity errors. This was discussed on the -v3 list;\n-   Nathan Myers [92]sums things up here. The collisions with\n+   Nathan Myers [91]sums things up here. The collisions with\n    vector/string iterator types have been fixed for 3.1.\n-   \n+\n   The g++-3 headers are not ours\n-  \n+\n    If you have found an extremely broken header file which is causing\n    problems for you, look carefully before submitting a \"high\" priority\n    bug report (which you probably shouldn't do anyhow; see the last\n-   paragraph of the page describing [93]the GCC bug database).\n-   \n+   paragraph of the page describing [92]the GCC bug database).\n+\n    If the headers are in ${prefix}/include/g++-3, or if the installed\n    library's name looks like libstdc++-2.10.a or libstdc++-libc6-2.10.so,\n    then you are using the old libstdc++-v2 library, which is nonstandard\n    and unmaintained. Do not report problems with -v2 to the -v3 mailing\n    list.\n-   \n+\n    For GCC versions 3.0 and 3.1 the libstdc++-v3 header files are\n    installed in ${prefix}/include/g++-v3 (see the 'v'?). Starting with\n    version 3.2 the headers are installed in\n    ${prefix}/include/c++/${version} as this prevents headers from\n    previous versions being found by mistake.\n-   \n+\n    glibc If you're on a GNU/Linux system and have just upgraded to glibc\n    2.2, but are still using gcc 2.95.2, then you should have read the\n    glibc FAQ, specifically 2.34:\n@@ -637,21 +631,21 @@ type has changed in glibc 2.2.  The patch is at\n http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n \n-   Note that 2.95.x shipped with the [94]old v2 library which is no\n+   Note that 2.95.x shipped with the [93]old v2 library which is no\n    longer maintained. Also note that gcc 2.95.3 fixes this problem, but\n    requires a separate patch for libstdc++-v3.\n-   \n+\n    concept checks If you see compilation errors containing messages about\n    fooConcept and a constraints member function, then most likely you\n    have violated one of the requirements for types used during\n    instantiation of template containers and functions. For example,\n    EqualityComparableConcept appears if your types must be comparable\n    with == and you have not provided this capability (a typo, or wrong\n    visibility, or you just plain forgot, etc).\n-   \n+\n    More information, including how to optionally enable/disable the\n-   checks, is available [95]here.\n-   \n+   checks, is available [94]here.\n+\n    dlopen/dlsym If you are using the C++ library across\n    dynamically-loaded objects, make certain that you are passing the\n    correct options when compiling and linking:\n@@ -669,50 +663,50 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n    \"memory leaks\" in containers A few people have reported that the\n    standard containers appear to leak memory when tested with memory\n-   checkers such as [96]valgrind. The library's default allocators keep\n+   checkers such as [95]valgrind. The library's default allocators keep\n    free memory in a pool for later reuse, rather than returning it to the\n    OS. Although this memory is always reachable by the library and is\n    never lost, memory debugging tools can report it as a leak. If you\n-   want to test the library for memory leaks please read [97]Tips for\n+   want to test the library for memory leaks please read [96]Tips for\n    memory leak hunting first.\n      _________________________________________________________________\n-   \n+\n 4.5 Aw, that's easy to fix!\n \n    If you have found a bug in the library and you think you have a\n    working fix, then send it in! The main GCC site has a page on\n-   [98]submitting patches that covers the procedure, but for libstdc++\n+   [97]submitting patches that covers the procedure, but for libstdc++\n    you should also send the patch to our mailing list in addition to the\n-   GCC patches mailing list. The libstdc++ [99]contributors' page also\n+   GCC patches mailing list. The libstdc++ [98]contributors' page also\n    talks about how to submit patches.\n-   \n+\n    In addition to the description, the patch, and the ChangeLog entry, it\n    is a Good Thing if you can additionally create a small test program to\n    test for the presence of the bug that your patch fixes. Bugs have a\n    way of being reintroduced; if an old bug creeps back in, it will be\n-   caught immediately by the [100]testsuite -- but only if such a test\n+   caught immediately by the [99]testsuite -- but only if such a test\n    exists.\n      _________________________________________________________________\n-   \n+\n                                5.0 Miscellaneous\n-                                       \n+\n 5.1 string::iterator is not char*; vector<T>::iterator is not T*\n \n    If you have code that depends on container<T> iterators being\n    implemented as pointer-to-T, your code is broken.\n-   \n+\n    While there are arguments for iterators to be implemented in that\n    manner, A) they aren't very good ones in the long term, and B) they\n    were never guaranteed by the Standard anyway. The type-safety achieved\n    by making iterators a real class rather than a typedef for T*\n    outweighs nearly all opposing arguments.\n-   \n+\n    Code which does assume that a vector iterator i is a pointer can often\n    be fixed by changing i in certain expressions to &*i . Future\n    revisions of the Standard are expected to bless this usage for\n    vector<> (but not for basic_string<>).\n      _________________________________________________________________\n-   \n+\n 5.2 What's next after libstdc++-v3?\n \n    Hopefully, not much. The goal of libstdc++-v3 is to produce a\n@@ -724,7 +718,7 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n        libstdc++. Some of that is already happening, see 4.2. Some of\n        those changes are being predicted by the library maintainers, and\n        we add code to the library based on what the current proposed\n-       resolution specifies. Those additions are listed in [101]the\n+       resolution specifies. Those additions are listed in [100]the\n        extensions page.\n     2. Performance tuning. Lots of performance tuning. This too is\n        already underway for post-3.0 releases, starting with memory\n@@ -739,27 +733,27 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n        they seem to be \"standard\" enough. (For example, the \"long long\"\n        type from C99.) Bugfixes and rewrites (to improve or fix thread\n        safety, for instance) will of course be a continuing task.\n-       \n-   [102]This question about the next libstdc++ prompted some brief but\n-   interesting [103]speculation.\n+\n+   [101]This question about the next libstdc++ prompted some brief but\n+   interesting [102]speculation.\n      _________________________________________________________________\n-   \n+\n 5.3 What about the STL from SGI?\n \n-   The [104]STL from SGI, version 3.3, was the most recent merge of the\n-   STL codebase. The code in libstdc++ contains many fixes and changes,\n-   and it is very likely that the SGI code is no longer under active\n-   development. We expect that no future merges will take place.\n-   \n+   The [103]STL from SGI, version 3.3, was the final merge of the STL\n+   codebase. The code in libstdc++ contains many fixes and changes, and\n+   the SGI code is no longer under active development. We expect that no\n+   future merges will take place.\n+\n    In particular, string is not from SGI and makes no use of their \"rope\"\n    class (which is included as an optional extension), nor is valarray\n    and some others. Classes like vector<> are, however we have made\n    significant changes to them since then.\n-   \n+\n    The FAQ for SGI's STL (one jump off of their main page) is recommended\n    reading.\n      _________________________________________________________________\n-   \n+\n 5.4 Extensions and Backward Compatibility\n \n    Headers in the ext and backward subdirectories should be referred to\n@@ -770,7 +764,7 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n    forward-compatible. (The situation is the same as that of other\n    headers whose directories are not searched directly, e.g.,\n    <sys/stat.h>, <X11/Xlib.h>.\n-   \n+\n    The extensions are no longer in the global or std namespaces, instead\n    they are declared in the __gnu_cxx namespace. For maximum portability,\n    consider defining a namespace alias to use to talk about extensions,\n@@ -795,20 +789,20 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n    This is a bit cleaner than defining typedefs for all the\n    instantiations you might need.\n-   \n+\n    Note: explicit template specializations must be declared in the same\n    namespace as the original template. This means you cannot use a\n    namespace alias when declaring an explicit specialization.\n-   \n-   Extensions to the library have [105]their own page.\n+\n+   Extensions to the library have [104]their own page.\n      _________________________________________________________________\n-   \n+\n 5.5 [removed]\n \n    This question has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n-   \n+\n 5.6 Is libstdc++-v3 thread-safe?\n \n    libstdc++-v3 strives to be thread-safe when all of the following\n@@ -817,7 +811,7 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n      * gcc -v reports a thread model other than 'single',\n      * [pre-3.3 only] a non-generic implementation of atomicity.h exists\n        for the architecture in question.\n-       \n+\n    The user-code must guard against concurrent method calls which may\n    access any particular library object's state. Typically, the\n    application programmer may infer what object locks must be held based\n@@ -852,11 +846,11 @@ a\n    both read and write access to objects; unless otherwise documented as\n    safe, do not assume that two threads may access a shared standard\n    library object at the same time.\n-   \n-   See chapters [106]17 (library introduction), [107]23 (containers), and\n-   [108]27 (I/O) for more information.\n+\n+   See chapters [105]17 (library introduction), [106]23 (containers), and\n+   [107]27 (I/O) for more information.\n      _________________________________________________________________\n-   \n+\n 5.7 How do I get a copy of the ISO C++ Standard?\n \n    Copies of the full ISO 14882 standard are available on line via the\n@@ -865,14 +859,14 @@ a\n    their two-meeting commitment for voting rights, may get a copy of the\n    standard from their respective national standards organization. In the\n    USA, this national standards organization is ANSI and their website is\n-   right [109]here. (And if you've already registered with them, clicking\n+   right [108]here. (And if you've already registered with them, clicking\n    this link will take you to directly to the place where you can\n-   [110]buy the standard on-line.\n-   \n-   Who is your country's member body? Visit the [111]ISO homepage and\n+   [109]buy the standard on-line.\n+\n+   Who is your country's member body? Visit the [110]ISO homepage and\n    find out!\n      _________________________________________________________________\n-   \n+\n 5.8 What's an ABI and why is it so messy?\n \n    \"ABI\" stands for \"Application Binary Interface.\" Conventionally, it\n@@ -885,7 +879,7 @@ a\n    one ABI and all the OSes and compilers use it. In practice every ABI\n    omits details that compiler implementers (consciously or accidentally)\n    must choose for themselves.\n-   \n+\n    That ABI definition suffices for compilers to generate code so a\n    program can interact safely with an OS and its lowest-level libraries.\n    Users usually want an ABI to encompass more detail, allowing libraries\n@@ -898,7 +892,7 @@ a\n    C++, and is immediately useful for embedded work relying only on a\n    \"free-standing implementation\" that doesn't include (much of) the\n    standard library. It is a good basis for the work to come.\n-   \n+\n    A useful C++ ABI must also incorporate many details of the standard\n    library implementation. For a C ABI, the layouts of a few structs\n    (such as FILE, stat, jmpbuf, and the like) and a few macros suffice.\n@@ -910,7 +904,7 @@ a\n    documenting library implementation details, but carefully designing\n    those details so that future bug fixes and optimizations don't force\n    breaking the ABI.\n-   \n+\n    There are ways to help isolate library implementation details from the\n    ABI, but they trade off against speed. Library details used in inner\n    loops (e.g., getchar) must be exposed and frozen for all time, but\n@@ -919,7 +913,7 @@ a\n    happen before you can reasonably document a candidate C++ ABI that\n    encompasses the standard library.\n      _________________________________________________________________\n-   \n+\n 5.9 How do I make std::vector<T>::capacity() == std::vector<T>::size()?\n \n    The standard idiom for deallocating a std::vector<T>'s unused memory\n@@ -929,12 +923,12 @@ a\n \n \n    The copy will take O(n) time and the swap is constant time.\n-   \n-   See [112]Shrink-to-fit strings for a similar solution for strings.\n+\n+   See [111]Shrink-to-fit strings for a similar solution for strings.\n      _________________________________________________________________\n-   \n-   See [113]license.html for copying conditions. Comments and suggestions\n-   are welcome, and may be sent to [114]the libstdc++ mailing list. \n+\n+   See [112]license.html for copying conditions. Comments and suggestions\n+   are welcome, and may be sent to [113]the libstdc++ mailing list. \n \n References\n \n@@ -995,60 +989,59 @@ References\n   55. ../faq/index.html#5_7\n   56. ../faq/index.html#5_8\n   57. ../faq/index.html#5_9\n-  58. http://gcc.gnu.org/libstdc++/index.html#download\n-  59. ../faq/index.html#1_4\n-  60. ../faq/index.html#4_4_interface\n-  61. ../17_intro/DESIGN\n-  62. http://gcc.gnu.org/\n-  63. http://gcc.gnu.org/gcc-3.0/buildstat.html\n+  58. ../faq/index.html#1_4\n+  59. ../faq/index.html#4_4_interface\n+  60. ../17_intro/DESIGN\n+  61. http://gcc.gnu.org/\n+  62. http://gcc.gnu.org/gcc-3.3/buildstat.html\n+  63. http://gcc.gnu.org/libstdc++/\n   64. http://gcc.gnu.org/libstdc++/\n-  65. http://gcc.gnu.org/libstdc++/\n-  66. http://gcc.gnu.org/releases.html\n-  67. ../17_intro/contribute.html\n-  68. http://www.boost.org/\n-  69. http://gcc.gnu.org/extensions.html\n-  70. mailto:libstdc++@gcc.gnu.org\n-  71. mailto:pme@gcc.gnu.org\n-  72. mailto:gdr@gcc.gnu.org\n-  73. ../17_intro/license.html\n-  74. ../documentation.html\n-  75. ../17_intro/RELEASE-NOTES\n-  76. http://www.gnu.org/software/cvs/cvs.html\n-  77. http://www.cvshome.org/\n-  78. http://gcc.gnu.org/install/test.html\n-  79. ../18_support/howto.html\n-  80. http://gcc.gnu.org/cgi-bin/htsearch?method=and&format=builtin-long&sort=score&words=_XOPEN_SOURCE+Solaris\n-  81. http://gcc.gnu.org/ml/gcc/2002-03/msg00817.html\n-  82. http://gcc.gnu.org/ml/libstdc++/2003-02/subjects.html#00286\n-  83. http://gcc.gnu.org/install/configure.html\n-  84. http://gcc.gnu.org/install/\n-  85. http://gcc.gnu.org/bugs.html\n-  86. http://gcc.gnu.org/ml/libstdc++/2002-02/msg00034.html\n-  87. http://gcc.gnu.org/ml/libstdc++/1998/msg00006.html\n-  88. http://www.cantrip.org/draft-bugs.txt\n-  89. http://anubis.dkuug.dk/jtc1/sc22/wg21/\n-  90. ../faq/index.html#5_2\n-  91. ../ext/howto.html#5\n-  92. http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\n-  93. http://gcc.gnu.org/gnatswrite.html\n-  94. ../faq/index.html#4_4_interface\n-  95. ../19_diagnostics/howto.html#3\n-  96. http://developer.kde.org/~sewardj/\n-  97. ../debug.html#mem\n-  98. http://gcc.gnu.org/contribute.html\n-  99. ../17_intro/contribute.html\n- 100. ../faq/index.html#2_4\n- 101. ../ext/howto.html#5\n- 102. http://gcc.gnu.org/ml/libstdc++/1999/msg00080.html\n- 103. http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html\n- 104. http://www.sgi.com/tech/stl/\n- 105. ../ext/howto.html\n- 106. ../17_intro/howto.html#3\n- 107. ../23_containers/howto.html#3\n- 108. ../27_io/howto.html#9\n- 109. http://www.ansi.org/\n- 110. http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998\n- 111. http://www.iso.ch/\n- 112. ../21_strings/howto.html#6\n- 113. ../17_intro/license.html\n- 114. mailto:libstdc++@gcc.gnu.org\n+  65. http://gcc.gnu.org/releases.html\n+  66. ../17_intro/contribute.html\n+  67. http://www.boost.org/\n+  68. http://gcc.gnu.org/extensions.html\n+  69. mailto:libstdc++@gcc.gnu.org\n+  70. mailto:pme@gcc.gnu.org\n+  71. mailto:gdr@gcc.gnu.org\n+  72. ../17_intro/license.html\n+  73. ../documentation.html\n+  74. ../17_intro/RELEASE-NOTES\n+  75. http://www.gnu.org/software/cvs/cvs.html\n+  76. http://www.cvshome.org/\n+  77. http://gcc.gnu.org/install/test.html\n+  78. ../18_support/howto.html\n+  79. http://gcc.gnu.org/cgi-bin/htsearch?method=and&format=builtin-long&sort=score&words=_XOPEN_SOURCE+Solaris\n+  80. http://gcc.gnu.org/ml/gcc/2002-03/msg00817.html\n+  81. http://gcc.gnu.org/ml/libstdc++/2003-02/subjects.html#00286\n+  82. http://gcc.gnu.org/install/configure.html\n+  83. http://gcc.gnu.org/install/\n+  84. http://gcc.gnu.org/bugs.html\n+  85. http://gcc.gnu.org/ml/libstdc++/2002-02/msg00034.html\n+  86. http://gcc.gnu.org/ml/libstdc++/1998/msg00006.html\n+  87. http://www.cantrip.org/draft-bugs.txt\n+  88. http://anubis.dkuug.dk/jtc1/sc22/wg21/\n+  89. ../faq/index.html#5_2\n+  90. ../ext/howto.html#5\n+  91. http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\n+  92. http://gcc.gnu.org/bugs.html\n+  93. ../faq/index.html#4_4_interface\n+  94. ../19_diagnostics/howto.html#3\n+  95. http://developer.kde.org/~sewardj/\n+  96. ../debug.html#mem\n+  97. http://gcc.gnu.org/contribute.html\n+  98. ../17_intro/contribute.html\n+  99. ../faq/index.html#2_4\n+ 100. ../ext/howto.html#5\n+ 101. http://gcc.gnu.org/ml/libstdc++/1999/msg00080.html\n+ 102. http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html\n+ 103. http://www.sgi.com/tech/stl/\n+ 104. ../ext/howto.html\n+ 105. ../17_intro/howto.html#3\n+ 106. ../23_containers/howto.html#3\n+ 107. ../27_io/howto.html#9\n+ 108. http://www.ansi.org/\n+ 109. http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%3A2003\n+ 110. http://www.iso.ch/\n+ 111. ../21_strings/howto.html#6\n+ 112. ../17_intro/license.html\n+ 113. mailto:libstdc++@gcc.gnu.org"}]}