{"sha": "d258f4aa696e770d7a06f960c34531804e649900", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1OGY0YWE2OTZlNzcwZDdhMDZmOTYwYzM0NTMxODA0ZTY0OTkwMA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-05-31T17:04:43Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-05-31T17:04:43Z"}, "message": "PR c/82063 - issues with arguments enabled by -Wall\n\ngcc/c-family/ChangeLog:\n\n\tPR c/82063\n\t* c.opt (-Wno-alloc-size-larger-than): New option.\n\t* doc/invoke.texi (-Walloc-size-larger-than): Update.\n\ngcc/ChangeLog:\n\n\tPR c/82063\n\t* calls.c (alloc_max_size): Correct a logic error/typo.\n\tTreat excessive arguments as infinite.  Warn for invalid arguments.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/82063\n\t* gcc.dg/Walloc-size-larger-than-1.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-10.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-11.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-12.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-13.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-14.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-15.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-16.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-17.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-2.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-3.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-4.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-5.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-6.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-7.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-8.c: New test.\n\t* gcc.dg/Walloc-size-larger-than-9.c: New test.\n\t* gcc.dg/Walloc-size-larger-than.c: New test.\n\nFrom-SVN: r261030", "tree": {"sha": "2b6dac6be9352a05bbc3fe624037fdf0438691b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b6dac6be9352a05bbc3fe624037fdf0438691b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d258f4aa696e770d7a06f960c34531804e649900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d258f4aa696e770d7a06f960c34531804e649900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d258f4aa696e770d7a06f960c34531804e649900", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d258f4aa696e770d7a06f960c34531804e649900/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3217e694854fe50be13091f071283f47aad9b348", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3217e694854fe50be13091f071283f47aad9b348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3217e694854fe50be13091f071283f47aad9b348"}], "stats": {"total": 620, "additions": 562, "deletions": 58}, "files": [{"sha": "2bdf916284061436a9484b11bc81502e319224d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -1,3 +1,10 @@\n+2018-05-31  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/82063\n+\t* calls.c (alloc_max_size): Correct a logic error/typo.\n+\tTreat excessive arguments as infinite.  Warn for invalid arguments.\n+\t* doc/invoke.texi (-Walloc-size-larger-than): Update.\n+\n 2018-05-31  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/85829"}, {"sha": "70245074d9c8503b5ad8a183d7bbd25e08882f0b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -1,3 +1,8 @@\n+2018-05-31  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/82063\n+\t* c.opt (-Wno-alloc-size-larger-than): New option.\n+\n 2018-04-22  David Pagan  <dave.pagan@oracle.com>\n \n \tPR c/55976"}, {"sha": "5e0397f3614b7c8a0948b5d94272b7db8eebfa77", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -308,6 +308,10 @@ C ObjC C++ LTO ObjC++ Var(warn_alloc_size_limit) Warning Joined LangEnabledBy(C\n -Walloc-size-larger-than=<bytes> Warn for calls to allocation functions that\n attempt to allocate objects larger than the specified number of bytes.\n \n+Wno-alloc-size-larger-than\n+C ObjC C++ LTO ObjC++ Alias(Walloc-size-larger-than=, 18446744073709551615EiB,none) Warning\n+-Wno-alloc-size-larger-than Disable Walloc-size-larger-than= warning.  Equivalent to Walloc-size-larger-than=<SIZE_MAX> or larger.\n+\n Walloc-zero\n C ObjC C++ ObjC++ Var(warn_alloc_zero) Warning\n -Walloc-zero Warn for calls to allocation functions that specify zero bytes."}, {"sha": "6e1ea925157eae18cf44dea7c9775f31cfa207f3", "filename": "gcc/calls.c", "status": "modified", "additions": 70, "deletions": 54, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -1231,65 +1231,81 @@ static GTY(()) tree alloc_object_size_limit;\n static tree\n alloc_max_size (void)\n {\n-  if (!alloc_object_size_limit)\n-    {\n-      alloc_object_size_limit = max_object_size ();\n+  if (alloc_object_size_limit)\n+    return alloc_object_size_limit;\n \n-      if (warn_alloc_size_limit)\n-\t{\n-\t  char *end = NULL;\n-\t  errno = 0;\n-\t  unsigned HOST_WIDE_INT unit = 1;\n-\t  unsigned HOST_WIDE_INT limit\n-\t    = strtoull (warn_alloc_size_limit, &end, 10);\n+  alloc_object_size_limit = max_object_size ();\n \n-\t  if (!errno)\n-\t    {\n-\t      if (end && *end)\n-\t\t{\n-\t\t  /* Numeric option arguments are at most INT_MAX.  Make it\n-\t\t     possible to specify a larger value by accepting common\n-\t\t     suffixes.  */\n-\t\t  if (!strcmp (end, \"kB\"))\n-\t\t    unit = 1000;\n-\t\t  else if (!strcasecmp (end, \"KiB\") || strcmp (end, \"KB\"))\n-\t\t    unit = 1024;\n-\t\t  else if (!strcmp (end, \"MB\"))\n-\t\t    unit = HOST_WIDE_INT_UC (1000) * 1000;\n-\t\t  else if (!strcasecmp (end, \"MiB\"))\n-\t\t    unit = HOST_WIDE_INT_UC (1024) * 1024;\n-\t\t  else if (!strcasecmp (end, \"GB\"))\n-\t\t    unit = HOST_WIDE_INT_UC (1000) * 1000 * 1000;\n-\t\t  else if (!strcasecmp (end, \"GiB\"))\n-\t\t    unit = HOST_WIDE_INT_UC (1024) * 1024 * 1024;\n-\t\t  else if (!strcasecmp (end, \"TB\"))\n-\t\t    unit = HOST_WIDE_INT_UC (1000) * 1000 * 1000 * 1000;\n-\t\t  else if (!strcasecmp (end, \"TiB\"))\n-\t\t    unit = HOST_WIDE_INT_UC (1024) * 1024 * 1024 * 1024;\n-\t\t  else if (!strcasecmp (end, \"PB\"))\n-\t\t    unit = HOST_WIDE_INT_UC (1000) * 1000 * 1000 * 1000 * 1000;\n-\t\t  else if (!strcasecmp (end, \"PiB\"))\n-\t\t    unit = HOST_WIDE_INT_UC (1024) * 1024 * 1024 * 1024 * 1024;\n-\t\t  else if (!strcasecmp (end, \"EB\"))\n-\t\t    unit = HOST_WIDE_INT_UC (1000) * 1000 * 1000 * 1000 * 1000\n-\t\t\t   * 1000;\n-\t\t  else if (!strcasecmp (end, \"EiB\"))\n-\t\t    unit = HOST_WIDE_INT_UC (1024) * 1024 * 1024 * 1024 * 1024\n-\t\t\t   * 1024;\n-\t\t  else\n-\t\t    unit = 0;\n-\t\t}\n+  if (!warn_alloc_size_limit)\n+    return alloc_object_size_limit;\n \n-\t      if (unit)\n-\t\t{\n-\t\t  widest_int w = wi::mul (limit, unit);\n-\t\t  if (w < wi::to_widest (alloc_object_size_limit))\n-\t\t    alloc_object_size_limit\n-\t\t      = wide_int_to_tree (ptrdiff_type_node, w);\n-\t\t}\n-\t    }\n+  const char *optname = \"-Walloc-size-larger-than=\";\n+\n+  char *end = NULL;\n+  errno = 0;\n+  unsigned HOST_WIDE_INT unit = 1;\n+  unsigned HOST_WIDE_INT limit\n+    = strtoull (warn_alloc_size_limit, &end, 10);\n+\n+  /* If the value is too large to be represented use the maximum\n+     representable value that strtoull sets limit to (setting\n+     errno to ERANGE).  */\n+\n+  if (end && *end)\n+    {\n+      /* Numeric option arguments are at most INT_MAX.  Make it\n+\t possible to specify a larger value by accepting common\n+\t suffixes.  */\n+      if (!strcmp (end, \"kB\"))\n+\tunit = 1000;\n+      else if (!strcasecmp (end, \"KiB\") || !strcmp (end, \"KB\"))\n+\tunit = 1024;\n+      else if (!strcmp (end, \"MB\"))\n+\tunit = HOST_WIDE_INT_UC (1000) * 1000;\n+      else if (!strcasecmp (end, \"MiB\"))\n+\tunit = HOST_WIDE_INT_UC (1024) * 1024;\n+      else if (!strcasecmp (end, \"GB\"))\n+\tunit = HOST_WIDE_INT_UC (1000) * 1000 * 1000;\n+      else if (!strcasecmp (end, \"GiB\"))\n+\tunit = HOST_WIDE_INT_UC (1024) * 1024 * 1024;\n+      else if (!strcasecmp (end, \"TB\"))\n+\tunit = HOST_WIDE_INT_UC (1000) * 1000 * 1000 * 1000;\n+      else if (!strcasecmp (end, \"TiB\"))\n+\tunit = HOST_WIDE_INT_UC (1024) * 1024 * 1024 * 1024;\n+      else if (!strcasecmp (end, \"PB\"))\n+\tunit = HOST_WIDE_INT_UC (1000) * 1000 * 1000 * 1000 * 1000;\n+      else if (!strcasecmp (end, \"PiB\"))\n+\tunit = HOST_WIDE_INT_UC (1024) * 1024 * 1024 * 1024 * 1024;\n+      else if (!strcasecmp (end, \"EB\"))\n+\tunit = HOST_WIDE_INT_UC (1000) * 1000 * 1000 * 1000 * 1000\n+\t  * 1000;\n+      else if (!strcasecmp (end, \"EiB\"))\n+\tunit = HOST_WIDE_INT_UC (1024) * 1024 * 1024 * 1024 * 1024\n+\t  * 1024;\n+      else\n+\t{\n+\t  /* This could mean an unknown suffix or a bad prefix, like\n+\t     \"+-1\".  */\n+\t  warning_at (UNKNOWN_LOCATION, 0,\n+\t\t      \"invalid argument %qs to %qs\",\n+\t\t      warn_alloc_size_limit, optname);\n+\n+\t  /* Ignore the limit extracted by strtoull.  */\n+\t  unit = 0;\n \t}\n     }\n+\n+  if (unit)\n+    {\n+      widest_int w = wi::mul (limit, unit);\n+      if (w < wi::to_widest (alloc_object_size_limit))\n+\talloc_object_size_limit\n+\t  = wide_int_to_tree (ptrdiff_type_node, w);\n+      else\n+\talloc_object_size_limit = build_all_ones_cst (size_type_node);\n+    }\n+\n+\n   return alloc_object_size_limit;\n }\n "}, {"sha": "169dd440059c4f57f4e57c8fcd0ef9283e822320", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -5510,10 +5510,14 @@ portability bugs and should be avoided.\n Warn about calls to functions decorated with attribute @code{alloc_size}\n that attempt to allocate objects larger than the specified number of bytes,\n or where the result of the size computation in an integer type with infinite\n-precision would exceed @code{SIZE_MAX / 2}.  The option argument @var{n}\n-may end in one of the standard suffixes designating a multiple of bytes\n-such as @code{kB} and @code{KiB} for kilobyte and kibibyte, respectively,\n-@code{MB} and @code{MiB} for megabyte and mebibyte, and so on.\n+precision would exceed @code{SIZE_MAX / 2}.  The option argument @var{n} is\n+treated as an integer with infinite precision and may end in one of\n+the standard suffixes designating a multiple of bytes such as @code{kB} and\n+@code{KiB} for kilobyte and kibibyte, respectively, @code{MB} and @code{MiB}\n+for megabyte and mebibyte, and so on.\n+@option{-Walloc-size-larger-than=}@var{PTRDIFF_MAX} is enabled by default.\n+Warnings controlled by the option can be disabled either by specifying\n+@var{n} of @var{SIZE_MAX} or more or by @option{-Wno-alloc-size-larger-than}.\n @xref{Function Attributes}.\n \n @item -Walloca"}, {"sha": "b414492dfb2978285edb6a807437d4c2d3e9ba48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -1,3 +1,25 @@\n+2018-05-31  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/82063\n+\t* gcc.dg/Walloc-size-larger-than-1.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-10.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-11.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-12.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-13.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-14.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-15.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-16.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-17.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-2.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-3.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-4.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-5.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-6.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-7.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-8.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than-9.c: New test.\n+\t* gcc.dg/Walloc-size-larger-than.c: New test.\n+\n 2018-05-31  Chung-Lin Tang  <cltang@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n "}, {"sha": "2e0b76554f9f5ff90e1d57c6e151bfd36694485c", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-1.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-O -Walloc-size-larger-than=1KB -ftrack-macro-expansion=0\" } */\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  unsigned n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = 1024;   /* 1 kibibyte (KB or KiB) */\n+  T (__builtin_malloc (n));\n+\n+  n = 1025;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1025. exceeds maximum object size 1024\" } */\n+}"}, {"sha": "559309d553141922c36f0fc3a9086e0507b5b816", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-10.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-10.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile { target lp64 } }\n+   { dg-options \"-O -Walloc-size-larger-than=1PiB -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  size_t n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = (size_t)1024 * 1024 * 1024 * 1024 * 1024;   /* 1 pebibyte (PiB) */\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1125899906842625. exceeds maximum object size 1125899906842624\" } */\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+}"}, {"sha": "41e523c69586a22e3cc01b88b67cd874b5153b8d", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-11.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-11.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile { target lp64 } }\n+   { dg-options \"-O -Walloc-size-larger-than=1PB -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  size_t n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = (size_t)1000 * 1000 * 1000 * 1000 * 1000;   /* 1 petabyte (PB) */\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1000000000000001. exceeds maximum object size 1000000000000000\" } */\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+}"}, {"sha": "24269a8a102d6a16840c9bae58eaaf6f7c0e802f", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-12.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-12.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile { target lp64 } }\n+   { dg-options \"-O -Walloc-size-larger-than=1EiB -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  size_t n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = (size_t)1024 * 1024 * 1024 * 1024 * 1024 * 1024;   /* 1 exbibyte (EiB) */\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1152921504606846977. exceeds maximum object size 1152921504606846976\" } */\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+}"}, {"sha": "b96e3892bd8ff44286ac93fca567bdd44dbe3d8c", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-13.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-13.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile { target lp64 } }\n+   { dg-options \"-O -Walloc-size-larger-than=1EB -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  size_t n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = (size_t)1000 * 1000 * 1000 * 1000 * 1000 * 1000;   /* 1 exabyte (EB) */\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1000000000000000001. exceeds maximum object size 1000000000000000000\" } */\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+}"}, {"sha": "e632e2236a352436a301aca245c7c10530a8d1f8", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-14.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-14.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,30 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-O -Walloc-size-larger-than=123456789123456789123456789123456789 -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+/* Verify that an exceedingly large -Walloc-size-larger-than argument\n+   with no suffix is accepted and treated as infinite.  */\n+\n+void f (void)\n+{\n+  size_t n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));\n+\n+  n = __SIZE_MAX__ - 1;\n+  T (__builtin_malloc (n));\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));\n+}"}, {"sha": "b699cc09c22a29ff6f64e86f22f8d213ac9b254f", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-15.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-15.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,30 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-O -Walloc-size-larger-than=123456789123456789123456789123456789gb -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+/* Verify that an exceeingly large -Walloc-size-larger-than argument\n+   with a valid suffic is accepted and treated as infinite.  */\n+\n+void f (void)\n+{\n+  size_t n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));\n+\n+  n = __SIZE_MAX__ - 1;\n+  T (__builtin_malloc (n));\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));\n+}"}, {"sha": "837b69a36d8aeefa1d625cd0b529bdce344e2376", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-16.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,32 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-O -Walloc-size-larger-than=1zb -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+/* Verify that an invalid -Walloc-size-larger-than argument is diagnosed\n+   and rejected without changing the default setting of PTRDIFF_MAX.  */\n+\n+void f (void)\n+{\n+  size_t n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+\n+  n = __SIZE_MAX__ - 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+}\n+\n+/* { dg-warning \"invalid argument .1zb. to .-Walloc-size-larger-than=.\" \"\" { target *-*-* } 0 } */"}, {"sha": "752371af2e751bdf62daa8655ac59b3ee04f4566", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-17.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-17.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-O -Wno-alloc-size-larger-than -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  size_t n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));\n+\n+  n = __SIZE_MAX__ - 1;\n+  T (__builtin_malloc (n));\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));\n+}"}, {"sha": "1ded37b0b5c16e93125a4179f2c90c25911ec697", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-2.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,20 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-O -Walloc-size-larger-than=1KiB -ftrack-macro-expansion=0\" }\n+*/\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  unsigned n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = 1024;   /* 1 kibibyte (KB or KiB) */\n+  T (__builtin_malloc (n));\n+\n+  n = 1025;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1025. exceeds maximum object size 1024\" } */\n+}"}, {"sha": "500ddbf7c74de7e19316e097d85294f76961ec38", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-3.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-O -Walloc-size-larger-than=1kB -ftrack-macro-expansion=0\" } */\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  unsigned n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = 1000;   /* 1 kilobyte (kB, not to be confused with KB or KiB) */\n+  T (__builtin_malloc (n));\n+\n+  n = 1001;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1001. exceeds maximum object size 1000\" } */\n+}"}, {"sha": "e4fde5a8eb90ef49595ca14869d2665202cf9b96", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-4.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-O -Walloc-size-larger-than=1MiB -ftrack-macro-expansion=0\" } */\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  unsigned n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = 1024 * 1024;   /* 1 mebibyte (MiB) */\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1048577. exceeds maximum object size 1048576\" } */\n+}"}, {"sha": "bfea259e0ad9780dad2bf1417efb2cde58454489", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-5.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-5.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-O -Walloc-size-larger-than=1MB -ftrack-macro-expansion=0\" } */\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  __SIZE_TYPE__ n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = 1000 * 1000;   /* 1 megabyte (MB) */\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1000001. exceeds maximum object size 1000000\" } */\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size 1000000\" } */\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size 1000000\" } */\n+}"}, {"sha": "1eb83a5f613efc19d945f631ad7a748794066ed7", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-6.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-6.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-O -Walloc-size-larger-than=1GiB -ftrack-macro-expansion=0\" } */\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  __SIZE_TYPE__ n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = 1024 * 1024 * 1024;   /* 1 gigibyte (GiB) */\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1073741825. exceeds maximum object size 1073741824\" } */\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+}"}, {"sha": "5188203337d36f718f7049cbb85a3ae01b936ff4", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-7.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-7.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-O -Walloc-size-larger-than=1GB -ftrack-macro-expansion=0\" } */\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  __SIZE_TYPE__ n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = 1000 * 1000 * 1000;   /* 1 gigabyte (GB) */\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1000000001. exceeds maximum object size 1000000000\" } */\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+}"}, {"sha": "4f84a027d795903c94cc974ed0711be141136628", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-8.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-8.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile { target lp64 } }\n+   { dg-options \"-O -Walloc-size-larger-than=1TiB -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  size_t n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = (size_t)1024 * 1024 * 1024 * 1024;   /* 1 tebibyte (TiB) */\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1099511627777. exceeds maximum object size 1099511627776\" } */\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+}"}, {"sha": "f3927f1456e4e3f5a0bedb8eae959a7a851f698a", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than-9.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than-9.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile { target lp64 } }\n+   { dg-options \"-O -Walloc-size-larger-than=1TB -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  size_t n = 0;\n+  T (__builtin_malloc (n));\n+\n+  n = (size_t)1000 * 1000 * 1000 * 1000;   /* 1 terabyte (TB) */\n+  T (__builtin_malloc (n));\n+\n+  n += 1;\n+  T (__builtin_malloc (n));   /* { dg-warning \"argument 1 value .1000000000001. exceeds maximum object size 1000000000000\" } */\n+\n+  n = __PTRDIFF_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+\n+  n = __SIZE_MAX__;\n+  T (__builtin_malloc (n));   /* { dg-warning \"exceeds maximum object size\" } */\n+}"}, {"sha": "8096ff1d3dd25a8da2be922f2aa97a1de3a4dfea", "filename": "gcc/testsuite/gcc.dg/Walloc-size-larger-than.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d258f4aa696e770d7a06f960c34531804e649900/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloc-size-larger-than.c?ref=d258f4aa696e770d7a06f960c34531804e649900", "patch": "@@ -0,0 +1,13 @@\n+/* PR middle-end/82063 - issues with arguments enabled by -Wall\n+   { dg-do compile }\n+   { dg-options \"-Walloc-size-larger-than=0 -ftrack-macro-expansion=0\" } */\n+\n+void sink (void*);\n+\n+#define T(x) sink (x)\n+\n+void f (void)\n+{\n+  T (__builtin_malloc (0));\n+  T (__builtin_malloc (1));   /* { dg-warning \"argument 1 value .1. exceeds maximum object size 0\" } */\n+}"}]}