{"sha": "1e6025b653fcfbdc34d40ea96bf2336faf0806dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU2MDI1YjY1M2ZjZmJkYzM0ZDQwZWE5NmJmMjMzNmZhZjA4MDZkZA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2016-02-14T17:08:44Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2016-02-14T17:08:44Z"}, "message": "re PR fortran/60526 (Accepts-invalid: Variable name same as type name)\n\n2016-02-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/60526\n\t* decl.c (build_sym):  If the name has already been defined as a\n\ttype, it has a symtree with an upper case letter at the beginning.\n\tIf such a symtree exists, issue an error and exit.  Don't do\n\tthis if there is no corresponding upper case letter.\n\n\n2016-02-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/60526\n\t* gfortran.dg/type_decl_4.f90:  Reinstated.\n\nFrom-SVN: r233413", "tree": {"sha": "bdbc1c289400224e3b9eb7abffb3b3882b394840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdbc1c289400224e3b9eb7abffb3b3882b394840"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e6025b653fcfbdc34d40ea96bf2336faf0806dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e6025b653fcfbdc34d40ea96bf2336faf0806dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e6025b653fcfbdc34d40ea96bf2336faf0806dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e6025b653fcfbdc34d40ea96bf2336faf0806dd/comments", "author": null, "committer": null, "parents": [{"sha": "d33082792f5c74b212dd44f62aaabf223a692d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33082792f5c74b212dd44f62aaabf223a692d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33082792f5c74b212dd44f62aaabf223a692d25"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "453e72a33a1958d4a259b66a3ee12a921d4c45ac", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6025b653fcfbdc34d40ea96bf2336faf0806dd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6025b653fcfbdc34d40ea96bf2336faf0806dd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1e6025b653fcfbdc34d40ea96bf2336faf0806dd", "patch": "@@ -1,3 +1,11 @@\n+2016-02-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/60526\n+\t* decl.c (build_sym):  If the name has already been defined as a\n+\ttype, it has a symtree with an upper case letter at the beginning.\n+\tIf such a symtree exists, issue an error and exit.  Don't do\n+\tthis if there is no corresponding upper case letter.\n+\n 2016-02-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/60526"}, {"sha": "d3ddda2d5f54c20a205ecbab31c659128bd2234c", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6025b653fcfbdc34d40ea96bf2336faf0806dd/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6025b653fcfbdc34d40ea96bf2336faf0806dd/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=1e6025b653fcfbdc34d40ea96bf2336faf0806dd", "patch": "@@ -1215,10 +1215,38 @@ build_sym (const char *name, gfc_charlen *cl, bool cl_deferred,\n {\n   symbol_attribute attr;\n   gfc_symbol *sym;\n+  int upper;\n \n   if (gfc_get_symbol (name, NULL, &sym))\n     return false;\n \n+  /* Check if the name has already been defined as a type.  The\n+     first letter of the symtree will be in upper case then.  Of\n+     course, this is only necessary if the upper case letter is\n+     actually different.  */\n+\n+  upper = TOUPPER(name[0]);\n+  if (upper != name[0])\n+    {\n+      char u_name[GFC_MAX_SYMBOL_LEN + 1];\n+      gfc_symtree *st;\n+      int nlen;\n+\n+      nlen = strlen(name);\n+      gcc_assert (nlen <= GFC_MAX_SYMBOL_LEN);\n+      strncpy (u_name, name, nlen + 1);\n+      u_name[0] = upper;\n+\n+      st = gfc_find_symtree (gfc_current_ns->sym_root, u_name);\n+\n+      if (st != 0)\n+\t{\n+\t  gfc_error (\"Symbol %qs at %C also declared as a type at %L\", name,\n+\t\t     &st->n.sym->declared_at);\n+\t  return false;\n+\t}\n+    }\n+\n   /* Start updating the symbol table.  Add basic type attribute if present.  */\n   if (current_ts.type != BT_UNKNOWN\n       && (sym->attr.implicit_type == 0"}, {"sha": "9dfdc7694b202aa0ad72fea2f956cad767cbd8d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6025b653fcfbdc34d40ea96bf2336faf0806dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6025b653fcfbdc34d40ea96bf2336faf0806dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e6025b653fcfbdc34d40ea96bf2336faf0806dd", "patch": "@@ -1,3 +1,8 @@\n+2016-02-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/60526\n+\t* gfortran.dg/type_decl_4.f90:  Reinstated.\n+\n 2016-02-14  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR fortran/68746"}, {"sha": "5c3ddb88e56b3b6b213a23f5a2c28da10adcf0a5", "filename": "gcc/testsuite/gfortran.dg/type_decl_4.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6025b653fcfbdc34d40ea96bf2336faf0806dd/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_decl_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6025b653fcfbdc34d40ea96bf2336faf0806dd/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_decl_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_decl_4.f90?ref=1e6025b653fcfbdc34d40ea96bf2336faf0806dd", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+program main\n+  type Xx ! { dg-error \"Symbol 'xx' at .1. also declared as a type at .2.\" }\n+  end type Xx\n+  real :: Xx  ! { dg-error \"Symbol 'xx' at .1. also declared as a type at .2.\" }\n+  \n+end program main"}]}