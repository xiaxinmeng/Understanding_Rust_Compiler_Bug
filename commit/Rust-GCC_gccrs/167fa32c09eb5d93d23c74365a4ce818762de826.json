{"sha": "167fa32c09eb5d93d23c74365a4ce818762de826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY3ZmEzMmMwOWViNWQ5M2QyM2M3NDM2NWE0Y2U4MTg3NjJkZTgyNg==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@apple.com", "date": "2006-11-01T05:14:40Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-11-01T05:14:40Z"}, "message": "extend.texi (__builtin_bswap32): Document.\n\n2006-09-07  Eric Christopher  <echristo@apple.com>\n\t    Falk Hueffner  <falk@debian.org>\n\n\t* doc/extend.texi (__builtin_bswap32): Document.\n\t(__builtin_bswap64): Ditto.\n\t* doc/libgcc.texi (bswapsi2): Document.\n\t(bswapdi2): Ditto.\n\t* doc/rtl.texi (bswap): Document.\n\t* optabs.c (expand_unop): Don't widen a bswap.\n\t(init_optabs): Init bswap. Set libfuncs explicitly\n\tfor bswapsi2 and bswapdi2.\n\t* optabs.h (OTI_bswap): New.\n\t(bswap_optab): Ditto.\n\t* genopinit.c (optabs): Handle bswap_optab.\n\t* tree.h (tree_index): Add TI_UINT32_TYPE and\n\tTI_UINT64_TYPE.\n\t(uint32_type_node): New.\n\t(uint64_type_node): Ditto.\n\t* tree.c (build_common_tree_nodes_2): Initialize\n\tuint32_type_node and uint64_type_node.\n\t* builtins.c (expand_builtin_bswap): New.\n\t(expand_builtin): Call.\n\t(fold_builtin_bswap): New.\n\t(fold_builtin_1): Call.\n\t* fold-const.c (tree_expr_nonnegative_p): Return true\n\tfor bswap.\n\t* builtin-types.def (BT_UINT32): New.\n\t(BT_UINT64): Ditto.\n\t(BT_FN_UINT32_UINT32): Ditto.\n\t(BT_FN_UINT64_UINT64): Ditto.\n\t* builtins.def (BUILT_IN_BSWAP32): New.\n\t(BUILT_IN_BSWAP64): Ditto.\n\t* rtl.def (BSWAP): New.\n\t* genattrtab.c (check_attr_value): New.\n\t* libgcc2.c (__bswapSI2): New.\n\t(__bswapDI2): Ditto.\n\t* libgcc2.h (__bswapSI2): Declare.\n\t(__bswapDI2): Ditto.\n\t* mklibgcc.in (lib2funcs): Add _bswapsi2 and _bswapdi2.\n\t* simplify-rtx.c (simplify_const_unary_operation): Return\n\t0 for BSWAP.\n\t* libgcc-std.ver (__bwapsi2): Add.\n\t(__bswapdi2): Ditto.\n\t* reload1.c (eliminate_regs_1): Add bswap.\n\t(elimination_effects): Ditto.\n\t* config/i386/i386.h (x86_bswap): New.\n\t(TARGET_BSWAP): Use.\n\t* config/i386/i386.c (x86_bswap): Set.\n\nCo-Authored-By: Falk Hueffner <falk@debian.org>\n\nFrom-SVN: r118361", "tree": {"sha": "75385000f3e0304a84896c064ff32d8b0dc1c9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75385000f3e0304a84896c064ff32d8b0dc1c9bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/167fa32c09eb5d93d23c74365a4ce818762de826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167fa32c09eb5d93d23c74365a4ce818762de826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167fa32c09eb5d93d23c74365a4ce818762de826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167fa32c09eb5d93d23c74365a4ce818762de826/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5880f14fe8b5809110d1c3858c9259641fd5b92d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5880f14fe8b5809110d1c3858c9259641fd5b92d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5880f14fe8b5809110d1c3858c9259641fd5b92d"}], "stats": {"total": 253, "additions": 248, "deletions": 5}, "files": [{"sha": "e60fc548fef68512e70108507b044e87889fabb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -1,3 +1,52 @@\n+2006-09-07  Eric Christopher  <echristo@apple.com>\n+\t    Falk Hueffner  <falk@debian.org>\n+\n+\t* doc/extend.texi (__builtin_bswap32): Document.\n+\t(__builtin_bswap64): Ditto.\n+\t* doc/libgcc.texi (bswapsi2): Document.\n+\t(bswapdi2): Ditto.\n+\t* doc/rtl.texi (bswap): Document.\n+\t* optabs.c (expand_unop): Don't widen a bswap.\n+\t(init_optabs): Init bswap. Set libfuncs explicitly\n+\tfor bswapsi2 and bswapdi2.\n+\t* optabs.h (OTI_bswap): New.\n+\t(bswap_optab): Ditto.\n+\t* genopinit.c (optabs): Handle bswap_optab.\n+\t* tree.h (tree_index): Add TI_UINT32_TYPE and\n+\tTI_UINT64_TYPE.\n+\t(uint32_type_node): New.\n+\t(uint64_type_node): Ditto.\n+\t* tree.c (build_common_tree_nodes_2): Initialize\n+\tuint32_type_node and uint64_type_node.\n+\t* builtins.c (expand_builtin_bswap): New.\n+\t(expand_builtin): Call.\n+\t(fold_builtin_bswap): New.\n+\t(fold_builtin_1): Call.\n+\t* fold-const.c (tree_expr_nonnegative_p): Return true\n+\tfor bswap.\n+\t* builtin-types.def (BT_UINT32): New.\n+\t(BT_UINT64): Ditto.\n+\t(BT_FN_UINT32_UINT32): Ditto.\n+\t(BT_FN_UINT64_UINT64): Ditto.\n+\t* builtins.def (BUILT_IN_BSWAP32): New.\n+\t(BUILT_IN_BSWAP64): Ditto.\n+\t* rtl.def (BSWAP): New.\n+\t* genattrtab.c (check_attr_value): New.\n+\t* libgcc2.c (__bswapSI2): New.\n+\t(__bswapDI2): Ditto.\n+\t* libgcc2.h (__bswapSI2): Declare.\n+\t(__bswapDI2): Ditto.\n+\t* mklibgcc.in (lib2funcs): Add _bswapsi2 and _bswapdi2.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Return\n+\t0 for BSWAP.\n+\t* libgcc-std.ver (__bwapsi2): Add.\n+\t(__bswapdi2): Ditto.\n+\t* reload1.c (eliminate_regs_1): Add bswap.\n+\t(elimination_effects): Ditto.\n+\t* config/i386/i386.h (x86_bswap): New.\n+\t(TARGET_BSWAP): Use.\n+\t* config/i386/i386.c (x86_bswap): Set.\n+\n 2006-10-31  Geoffrey Keating  <geoffk@apple.com>\n \n \t* coverage.c (coverage_checksum_string): Update comment."}, {"sha": "5d42b2ef9aa866df1836c6eb9ae5f66364c48d3e", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -75,6 +75,8 @@ DEF_PRIMITIVE_TYPE (BT_LONGLONG, long_long_integer_type_node)\n DEF_PRIMITIVE_TYPE (BT_ULONGLONG, long_long_unsigned_type_node)\n DEF_PRIMITIVE_TYPE (BT_INTMAX, intmax_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINTMAX, uintmax_type_node)\n+DEF_PRIMITIVE_TYPE (BT_UINT32, uint32_type_node)\n+DEF_PRIMITIVE_TYPE (BT_UINT64, uint64_type_node)\n DEF_PRIMITIVE_TYPE (BT_WORD, (*lang_hooks.types.type_for_mode) (word_mode, 0))\n DEF_PRIMITIVE_TYPE (BT_FLOAT, float_type_node)\n DEF_PRIMITIVE_TYPE (BT_DOUBLE, double_type_node)\n@@ -204,6 +206,10 @@ DEF_FUNCTION_TYPE_1 (BT_FN_DFLOAT128_DFLOAT128, BT_DFLOAT128, BT_DFLOAT128)\n DEF_FUNCTION_TYPE_1 (BT_FN_VOID_VPTR, BT_VOID, BT_VOLATILE_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_VOID_PTRPTR, BT_VOID, BT_PTR_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT_UINT, BT_UINT, BT_UINT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_ULONG_ULONG, BT_ULONG, BT_ULONG)\n+DEF_FUNCTION_TYPE_1 (BT_FN_ULONGLONG_ULONGLONG, BT_ULONGLONG, BT_ULONGLONG)\n+DEF_FUNCTION_TYPE_1 (BT_FN_UINT32_UINT32, BT_UINT32, BT_UINT32)\n+DEF_FUNCTION_TYPE_1 (BT_FN_UINT64_UINT64, BT_UINT64, BT_UINT64)\n \n DEF_POINTER_TYPE (BT_PTR_FN_VOID_PTR, BT_FN_VOID_PTR)\n \n@@ -435,4 +441,3 @@ DEF_FUNCTION_TYPE_VAR_5 (BT_FN_INT_STRING_SIZE_INT_SIZE_CONST_STRING_VAR,\n DEF_POINTER_TYPE (BT_PTR_FN_VOID_VAR, BT_FN_VOID_VAR)\n DEF_FUNCTION_TYPE_3 (BT_FN_PTR_PTR_FN_VOID_VAR_PTR_SIZE,\n \t\t     BT_PTR, BT_PTR_FN_VOID_VAR, BT_PTR, BT_SIZE)\n-"}, {"sha": "7bbd632c222f553ff9971631fc93c6a0d6618ccc", "filename": "gcc/builtins.c", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -4625,6 +4625,30 @@ expand_builtin_alloca (tree arglist, rtx target)\n   return result;\n }\n \n+/* Expand a call to a bswap builtin.  The arguments are in ARGLIST.  MODE\n+   is the mode to expand with.  */\n+\n+static rtx\n+expand_builtin_bswap (tree arglist, rtx target, rtx subtarget)\n+{\n+  enum machine_mode mode;\n+  tree arg;\n+  rtx op0;\n+\n+  if (!validate_arglist (arglist, INTEGER_TYPE, VOID_TYPE))\n+    return 0;\n+\n+  arg = TREE_VALUE (arglist);\n+  mode = TYPE_MODE (TREE_TYPE (arg));\n+  op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+\n+  target = expand_unop (mode, bswap_optab, op0, target, 1);\n+\n+  gcc_assert (target);\n+\n+  return convert_to_mode (mode, target, 0);\n+}\n+\n /* Expand a call to a unary builtin.  The arguments are in ARGLIST.\n    Return 0 if a normal call should be emitted rather than expanding the\n    function in-line.  If convenient, the result should be placed in TARGET.\n@@ -5903,6 +5927,14 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       expand_stack_restore (TREE_VALUE (arglist));\n       return const0_rtx;\n \n+    case BUILT_IN_BSWAP32:\n+    case BUILT_IN_BSWAP64:\n+      target = expand_builtin_bswap (arglist, target, subtarget);\n+\n+      if (target)\n+\treturn target;\n+      break;\n+\n     CASE_INT_FN (BUILT_IN_FFS):\n     case BUILT_IN_FFSIMAX:\n       target = expand_builtin_unop (target_mode, arglist, target,\n@@ -7543,6 +7575,67 @@ fold_builtin_bitop (tree fndecl, tree arglist)\n   return NULL_TREE;\n }\n \n+/* Fold function call to builtin_bswap and the long and long long\n+   variants.  Return NULL_TREE if no simplification can be made.  */\n+static tree\n+fold_builtin_bswap (tree fndecl, tree arglist)\n+{\n+  tree arg;\n+\n+  if (! validate_arglist (arglist, INTEGER_TYPE, VOID_TYPE))\n+    return 0;\n+\n+  /* Optimize constant value.  */\n+  arg = TREE_VALUE (arglist);\n+  if (TREE_CODE (arg) == INTEGER_CST && ! TREE_CONSTANT_OVERFLOW (arg))\n+    {\n+      HOST_WIDE_INT hi, width, r_hi = 0;\n+      unsigned HOST_WIDE_INT lo, r_lo = 0;\n+      tree type;\n+\n+      type = TREE_TYPE (arg);\n+      width = TYPE_PRECISION (type);\n+      lo = TREE_INT_CST_LOW (arg);\n+      hi = TREE_INT_CST_HIGH (arg);\n+\n+      switch (DECL_FUNCTION_CODE (fndecl))\n+\t{\n+\t  case BUILT_IN_BSWAP32:\n+\t  case BUILT_IN_BSWAP64:\n+\t    {\n+\t      int s;\n+\n+\t      for (s = 0; s < width; s += 8)\n+\t\t{\n+\t\t  int d = width - s - 8;\n+\t\t  unsigned HOST_WIDE_INT byte;\n+\n+\t\t  if (s < HOST_BITS_PER_WIDE_INT)\n+\t\t    byte = (lo >> s) & 0xff;\n+\t\t  else\n+\t\t    byte = (hi >> (s - HOST_BITS_PER_WIDE_INT)) & 0xff;\n+\n+\t\t  if (d < HOST_BITS_PER_WIDE_INT)\n+\t\t    r_lo |= byte << d;\n+\t\t  else\n+\t\t    r_hi |= byte << (d - HOST_BITS_PER_WIDE_INT);\n+\t\t}\n+\t    }\n+\n+\t    break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      if (width < HOST_BITS_PER_WIDE_INT)\n+\treturn build_int_cst (TREE_TYPE (TREE_TYPE (fndecl)), r_lo);\n+      else\n+\treturn build_int_cst_wide (TREE_TYPE (TREE_TYPE (fndecl)), r_lo, r_hi);\n+    }\n+\n+  return NULL_TREE;\n+}\n /* Return true if EXPR is the real constant contained in VALUE.  */\n \n static bool\n@@ -9220,6 +9313,10 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n     CASE_FLT_FN (BUILT_IN_LLRINT):\n       return fold_fixed_mathfn (fndecl, arglist);\n \n+    case BUILT_IN_BSWAP32:\n+    case BUILT_IN_BSWAP64:\n+      return fold_builtin_bswap (fndecl, arglist);\n+\n     CASE_INT_FN (BUILT_IN_FFS):\n     CASE_INT_FN (BUILT_IN_CLZ):\n     CASE_INT_FN (BUILT_IN_CTZ):"}, {"sha": "d565f8cc33821747a03fc8ee80ef8911049fbc02", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -594,6 +594,8 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_ALLOCA, \"alloca\", BT_FN_PTR_SIZE, ATTR_MALLOC_N\n DEF_GCC_BUILTIN        (BUILT_IN_APPLY, \"apply\", BT_FN_PTR_PTR_FN_VOID_VAR_PTR_SIZE, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_APPLY_ARGS, \"apply_args\", BT_FN_PTR_VAR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_ARGS_INFO, \"args_info\", BT_FN_INT_INT, ATTR_NULL)\n+DEF_GCC_BUILTIN        (BUILT_IN_BSWAP32, \"bswap32\", BT_FN_UINT32_UINT32, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_BSWAP64, \"bswap64\", BT_FN_UINT64_UINT64, ATTR_CONST_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_CALLOC, \"calloc\", BT_FN_PTR_SIZE_SIZE, ATTR_MALLOC_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_CLASSIFY_TYPE, \"classify_type\", BT_FN_INT_VAR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_CLZ, \"clz\", BT_FN_INT_UINT, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "a7919dc8d2bc1b318ea5a631835fa400e4ec6be2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -885,6 +885,8 @@ const int x86_cmpxchg8b = ~(m_386 | m_486);\n const int x86_cmpxchg16b = m_NOCONA;\n /* Exchange and add was added for 80486.  */\n const int x86_xadd = ~m_386;\n+/* Byteswap was added for 80486.  */\n+const int x86_bswap = ~m_386;\n const int x86_pad_returns = m_ATHLON_K8 | m_GENERIC;\n \n /* In case the average insn count for single function invocation is"}, {"sha": "b40088ade4828792c3db614d8d702f642b74e701", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -165,6 +165,7 @@ extern const int x86_use_bt;\n extern const int x86_cmpxchg, x86_cmpxchg8b, x86_cmpxchg16b, x86_xadd;\n extern const int x86_use_incdec;\n extern const int x86_pad_returns;\n+extern const int x86_bswap;\n extern const int x86_partial_flag_reg_stall;\n extern int x86_prefetch_sse;\n \n@@ -238,6 +239,7 @@ extern int x86_prefetch_sse;\n #define TARGET_CMPXCHG8B (x86_cmpxchg8b & (1 << ix86_arch))\n #define TARGET_CMPXCHG16B (x86_cmpxchg16b & (1 << ix86_arch))\n #define TARGET_XADD (x86_xadd & (1 << ix86_arch))\n+#define TARGET_BSWAP (x86_bswap & (1 << ix86_arch))\n \n #ifndef TARGET_64BIT_DEFAULT\n #define TARGET_64BIT_DEFAULT 0"}, {"sha": "9ec4460bb6ac5cdc2568b0d9c6ef484575df9590", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -6116,6 +6116,16 @@ Similar to @code{__builtin_powi}, except the argument and return types\n are @code{long double}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} int32_t __builtin_bswap32 (int32_t x)\n+Returns @var{x} with the order of the bytes reversed; for example,\n+@code{0xaabbccdd} becomes @code{0xddccbbaa}.  Byte here always means\n+exactly 8 bits.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int64_t __builtin_bswap64 (int64_t x)\n+Similar to @code{__builtin_bswap32}, except the argument and return types\n+are 64-bit.\n+@end deftypefn\n \n @node Target Builtins\n @section Built-in Functions Specific to Particular Target Machines"}, {"sha": "fcc55d737c3bf4a70d2974f55c41d0eef6d74ba6", "filename": "gcc/doc/libgcc.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fdoc%2Flibgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fdoc%2Flibgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flibgcc.texi?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -212,6 +212,11 @@ These functions return the value zero if the number of bits set in\n These functions return the number of bits set in @var{a}.\n @end deftypefn\n \n+@deftypefn {Runtime Function} int32_t __bswapsi2 (int32_t @var{a})\n+@deftypefnx {Runtime Function} int64_t __bswapdi2 (int64_t @var{a})\n+These functions return the @var{a} byteswapped.\n+@end deftypefn\n+\n @node Soft float library routines\n @section Routines for floating point emulation\n @cindex soft float library\n@@ -728,4 +733,3 @@ document me!\n @deftypefn {Runtime Function} void __clear_cache (char *@var{beg}, char *@var{end})\n This function clears the instruction cache between @var{beg} and @var{end}.\n @end deftypefn\n-"}, {"sha": "d97b2b327efe4b386bdedcd15ca63dec4568acd7", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -2084,6 +2084,11 @@ mode @var{m}.  The mode of @var{x} will usually be an integer mode.\n Represents the number of 1-bits modulo 2 in @var{x}, represented as an\n integer of mode @var{m}.  The mode of @var{x} will usually be an integer\n mode.\n+\n+@findex bswap\n+@item (bswap:@var{m} @var{x})\n+Represents the value @var{x} with the order of bytes reversed, carried out\n+in mode @var{m}, which must be a fixed-point machine mode.\n @end table\n \n @node Comparisons"}, {"sha": "0ac3c8656d2afca6dc74155da87926f1ee54d816", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -12302,6 +12302,8 @@ tree_expr_nonnegative_p (tree t)\n \t    CASE_INT_FN (BUILT_IN_FFS):\n \t    CASE_INT_FN (BUILT_IN_PARITY):\n \t    CASE_INT_FN (BUILT_IN_POPCOUNT):\n+\t    case BUILT_IN_BSWAP32:\n+\t    case BUILT_IN_BSWAP64:\n \t      /* Always true.  */\n \t      return true;\n \n@@ -13241,4 +13243,3 @@ fold_strip_sign_ops (tree exp)\n     }\n   return NULL_TREE;\n }\n-"}, {"sha": "3e0fd9ed73cda281988fe59593ba147eac312406", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -959,6 +959,7 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n     case CTZ:\n     case POPCOUNT:\n     case PARITY:\n+    case BSWAP:\n       XEXP (exp, 0) = check_attr_value (XEXP (exp, 0), attr);\n       break;\n "}, {"sha": "2d0a43df01d37dbd79460f6940a4bee2b6f40bb9", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -274,3 +274,10 @@ GCC_4.2.0 {\n   __floatuntitf\n   _Unwind_GetIPInfo\n }\n+\n+%inherit GCC_4.3 GCC_4.2.0\n+GCC_4.3.0 {\n+  # byte swapping routines\n+  __bswapsi2\n+  __bswapdi2\n+}"}, {"sha": "f3a0a2429708f1066681291230701992d7da809d", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -492,6 +492,30 @@ __ashrdi3 (DWtype u, word_type b)\n }\n #endif\n \f\n+#ifdef L_bswapsi2\n+UWtype\n+__bswapSI2 (UWtype u)\n+{\n+  return ((((u) & 0xff000000) >> 24)\n+\t  | (((u) & 0x00ff0000) >>  8)\n+\t  | (((u) & 0x0000ff00) <<  8)\n+\t  | (((u) & 0x000000ff) << 24));\n+}\n+#endif\n+#ifdef L_bswapdi2\n+UDWtype\n+__bswapDI2 (UDWtype u)\n+{\n+  return ((((u) & 0xff00000000000000ull) >> 56)\n+\t  | (((u) & 0x00ff000000000000ull) >> 40)\n+\t  | (((u) & 0x0000ff0000000000ull) >> 24)\n+\t  | (((u) & 0x000000ff00000000ull) >>  8)\n+\t  | (((u) & 0x00000000ff000000ull) <<  8)\n+\t  | (((u) & 0x0000000000ff0000ull) << 24)\n+\t  | (((u) & 0x000000000000ff00ull) << 40)\n+\t  | (((u) & 0x00000000000000ffull) << 56));\n+}\n+#endif\n #ifdef L_ffssi2\n #undef int\n int"}, {"sha": "1182ba3e92d11b97050c5befec4093ccf85b55d9", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -304,11 +304,13 @@ typedef int word_type __attribute__ ((mode (__word__)));\n #define __ctzSI2\t__NW(ctz,2)\n #define __popcountSI2\t__NW(popcount,2)\n #define __paritySI2\t__NW(parity,2)\n+#define __bswapSI2\t__NW(bswap,2)\n #define __ffsDI2\t__NDW(ffs,2)\n #define __clzDI2\t__NDW(clz,2)\n #define __ctzDI2\t__NDW(ctz,2)\n #define __popcountDI2\t__NDW(popcount,2)\n #define __parityDI2\t__NDW(parity,2)\n+#define __bswapDI2\t__NDW(bswap,2)\n \n extern DWtype __muldi3 (DWtype, DWtype);\n extern DWtype __divdi3 (DWtype, DWtype);\n@@ -345,11 +347,13 @@ extern Wtype __addvSI3 (Wtype, Wtype);\n extern Wtype __subvSI3 (Wtype, Wtype);\n extern Wtype __mulvSI3 (Wtype, Wtype);\n extern Wtype __negvSI2 (Wtype);\n+extern UWtype __bswapSI2 (UWtype);\n extern DWtype __absvDI2 (DWtype);\n extern DWtype __addvDI3 (DWtype, DWtype);\n extern DWtype __subvDI3 (DWtype, DWtype);\n extern DWtype __mulvDI3 (DWtype, DWtype);\n extern DWtype __negvDI2 (DWtype);\n+extern UDWtype __bswapDI2 (UDWtype);\n \n #ifdef COMPAT_SIMODE_TRAPPING_ARITHMETIC\n extern SItype __absvsi2 (SItype);"}, {"sha": "60e390500ea03d3d5c30bdfa47409d6808bc28a6", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -91,7 +91,7 @@ lib2funcs='_muldi3 _negdi2 _lshrdi3 _ashldi3 _ashrdi3\n \t_ffssi2 _ffsdi2 _clz _clzsi2 _clzdi2 _ctzsi2 _ctzdi2 _popcount_tab\n \t_popcountsi2 _popcountdi2 _paritysi2 _paritydi2 _powisf2 _powidf2\n \t_powixf2 _powitf2 _mulsc3 _muldc3 _mulxc3 _multc3 _divsc3 _divdc3\n-\t_divxc3 _divtc3'\n+\t_divxc3 _divtc3 _bswapsi2 _bswapdi2'\n \n if [ \"$LIB2_SIDITI_CONV_FUNCS\" ]; then\n   for func in $swfloatfuncs; do"}, {"sha": "92887ab6b8dc221bca27e7c8bf6232015ec54979", "filename": "gcc/optabs.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -2590,6 +2590,10 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n \tgoto try_libcall;\n     }\n \n+  /* We can't widen a bswap.  */\n+  if (unoptab == bswap_optab)\n+    goto try_libcall;\n+\n   if (CLASS_HAS_WIDER_MODES_P (class))\n     for (wider_mode = GET_MODE_WIDER_MODE (mode);\n \t wider_mode != VOIDmode;\n@@ -5292,6 +5296,7 @@ init_optabs (void)\n   absv_optab = init_optabv (ABS);\n   addcc_optab = init_optab (UNKNOWN);\n   one_cmpl_optab = init_optab (NOT);\n+  bswap_optab = init_optab (BSWAP);\n   ffs_optab = init_optab (FFS);\n   clz_optab = init_optab (CLZ);\n   ctz_optab = init_optab (CTZ);\n@@ -5504,6 +5509,11 @@ init_optabs (void)\n   init_interclass_conv_libfuncs (trunc_optab, \"trunc\", MODE_FLOAT, MODE_DECIMAL_FLOAT);\n   init_interclass_conv_libfuncs (trunc_optab, \"trunc\", MODE_DECIMAL_FLOAT, MODE_FLOAT);\n \n+  /* Explicitly initialize the bswap libfuncs since we need them to be\n+     valid for things other than word_mode.  */\n+  set_optab_libfunc (bswap_optab, SImode, \"__bswapsi2\");\n+  set_optab_libfunc (bswap_optab, DImode, \"__bswapdi2\");\n+\n   /* Use cabs for double complex abs, since systems generally have cabs.\n      Don't define any libcall for float complex, so that cabs will be used.  */\n   if (complex_double_type_node)"}, {"sha": "b47e7623a2e6610e16704a3129413f3359ebf297", "filename": "gcc/optabs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -146,6 +146,8 @@ enum optab_index\n   /* Abs value */\n   OTI_abs,\n   OTI_absv,\n+  /* Byteswap */\n+  OTI_bswap,\n   /* Bitwise not */\n   OTI_one_cmpl,\n   /* Bit scanning and counting */\n@@ -312,6 +314,7 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define abs_optab (optab_table[OTI_abs])\n #define absv_optab (optab_table[OTI_absv])\n #define one_cmpl_optab (optab_table[OTI_one_cmpl])\n+#define bswap_optab (optab_table[OTI_bswap])\n #define ffs_optab (optab_table[OTI_ffs])\n #define clz_optab (optab_table[OTI_clz])\n #define ctz_optab (optab_table[OTI_ctz])"}, {"sha": "e6443226e104f472f3d2021d0a6eb16102c1ce74", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -2555,6 +2555,7 @@ eliminate_regs_1 (rtx x, enum machine_mode mem_mode, rtx insn,\n     case CTZ:\n     case POPCOUNT:\n     case PARITY:\n+    case BSWAP:\n       new = eliminate_regs_1 (XEXP (x, 0), mem_mode, insn, false);\n       if (new != XEXP (x, 0))\n \treturn gen_rtx_fmt_e (code, GET_MODE (x), new);\n@@ -2775,6 +2776,7 @@ elimination_effects (rtx x, enum machine_mode mem_mode)\n     case CTZ:\n     case POPCOUNT:\n     case PARITY:\n+    case BSWAP:\n       elimination_effects (XEXP (x, 0), mem_mode);\n       return;\n "}, {"sha": "cb37f1ab2b2b142d38602dc7af0f7c96d68574b7", "filename": "gcc/rtl.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -567,6 +567,9 @@ DEF_RTL_EXPR(ABS, \"abs\", \"e\", RTX_UNARY)\n /* Square root */\n DEF_RTL_EXPR(SQRT, \"sqrt\", \"e\", RTX_UNARY)\n \n+/* Swap bytes.  */\n+DEF_RTL_EXPR(BSWAP, \"bswap\", \"e\", RTX_UNARY)\n+\n /* Find first bit that is set.\n    Value is 1 + number of trailing zeros in the arg.,\n    or 0 if arg is 0.  */"}, {"sha": "fe5463a3f27079470d901cf94d00dfa27f4dd47b", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -1042,6 +1042,9 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  val &= 1;\n \t  break;\n \n+\tcase BSWAP:\n+\t  return 0;\n+\n \tcase TRUNCATE:\n \t  val = arg0;\n \t  break;\n@@ -4867,4 +4870,3 @@ simplify_rtx (rtx x)\n     }\n   return NULL;\n }\n-"}, {"sha": "5886e18da0a2ce3b71ba013007d8ab5b33dcccc2", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -6576,6 +6576,10 @@ build_common_tree_nodes_2 (int short_double)\n   long_double_ptr_type_node = build_pointer_type (long_double_type_node);\n   integer_ptr_type_node = build_pointer_type (integer_type_node);\n \n+  /* Fixed size integer types.  */\n+  uint32_type_node = build_nonstandard_integer_type (32, true);\n+  uint64_type_node = build_nonstandard_integer_type (64, true);\n+\n   /* Decimal float types. */\n   dfloat32_type_node = make_node (REAL_TYPE);\n   TYPE_PRECISION (dfloat32_type_node) = DECIMAL32_TYPE_SIZE; "}, {"sha": "52a04c40eedac261ead662fd0bf5a29f7f3c1f7f", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167fa32c09eb5d93d23c74365a4ce818762de826/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=167fa32c09eb5d93d23c74365a4ce818762de826", "patch": "@@ -3217,6 +3217,9 @@ enum tree_index\n   TI_UINTDI_TYPE,\n   TI_UINTTI_TYPE,\n \n+  TI_UINT32_TYPE,\n+  TI_UINT64_TYPE,\n+\n   TI_INTEGER_ZERO,\n   TI_INTEGER_ONE,\n   TI_INTEGER_MINUS_ONE,\n@@ -3292,6 +3295,9 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define unsigned_intDI_type_node\tglobal_trees[TI_UINTDI_TYPE]\n #define unsigned_intTI_type_node\tglobal_trees[TI_UINTTI_TYPE]\n \n+#define uint32_type_node\t\tglobal_trees[TI_UINT32_TYPE]\n+#define uint64_type_node\t\tglobal_trees[TI_UINT64_TYPE]\n+\n #define integer_zero_node\t\tglobal_trees[TI_INTEGER_ZERO]\n #define integer_one_node\t\tglobal_trees[TI_INTEGER_ONE]\n #define integer_minus_one_node\t\tglobal_trees[TI_INTEGER_MINUS_ONE]"}]}