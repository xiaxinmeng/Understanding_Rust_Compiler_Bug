{"sha": "735b94a740d585af15678732b069ca905ef6e78a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM1Yjk0YTc0MGQ1ODVhZjE1Njc4NzMyYjA2OWNhOTA1ZWY2ZTc4YQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2009-04-24T19:35:52Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2009-04-24T19:35:52Z"}, "message": "ia64.md (movfs_internal): Allow flt constants.\n\n\t* config/ia64/ia64.md (movfs_internal): Allow flt constants.\n\t(movdf_internal): Ditto.\n\t* config/ia64/ia64.c (ia64_legitimate_constant_p): Allow\n\tSFmode and DFmode constants.\n\t(ia64_print_operand): Add 'G' format for printing\n\tfloating point constants.\n\nFrom-SVN: r146743", "tree": {"sha": "0796ed723c2f7b1a394b48dce41cc2f29e25868b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0796ed723c2f7b1a394b48dce41cc2f29e25868b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/735b94a740d585af15678732b069ca905ef6e78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735b94a740d585af15678732b069ca905ef6e78a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/735b94a740d585af15678732b069ca905ef6e78a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735b94a740d585af15678732b069ca905ef6e78a/comments", "author": null, "committer": null, "parents": [{"sha": "77a302647e6de91919e0e9c8c2383326715e4eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a302647e6de91919e0e9c8c2383326715e4eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a302647e6de91919e0e9c8c2383326715e4eee"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "e470c2635dfdc2b019fb05c53e49a4e6eca1d113", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b94a740d585af15678732b069ca905ef6e78a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b94a740d585af15678732b069ca905ef6e78a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=735b94a740d585af15678732b069ca905ef6e78a", "patch": "@@ -1,3 +1,12 @@\n+2009-04-24  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config/ia64/ia64.md (movfs_internal): Allow flt constants.\n+\t(movdf_internal): Ditto.\n+\t* config/ia64/ia64.c (ia64_legitimate_constant_p): Allow\n+\tSFmode and DFmode constants.\n+\t(ia64_print_operand): Add 'G' format for printing\n+\tfloating point constants.\n+\n 2009-04-24  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vrp.c (extract_range_from_binary_expr): Handle overflow"}, {"sha": "54514256e4fe193a1020aaf0c36a0897d113bb05", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b94a740d585af15678732b069ca905ef6e78a/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b94a740d585af15678732b069ca905ef6e78a/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=735b94a740d585af15678732b069ca905ef6e78a", "patch": "@@ -764,7 +764,8 @@ ia64_legitimate_constant_p (rtx x)\n       return true;\n \n     case CONST_DOUBLE:\n-      if (GET_MODE (x) == VOIDmode)\n+      if (GET_MODE (x) == VOIDmode || GET_MODE (x) == SFmode\n+\t  || GET_MODE (x) == DFmode)\n \treturn true;\n       return satisfies_constraint_G (x);\n \n@@ -4541,6 +4542,7 @@ ia64_print_operand_address (FILE * stream ATTRIBUTE_UNUSED,\n    e    Print 64 - constant, for DImode rotates.\n    F\tA floating point constant 0.0 emitted as f0, or 1.0 emitted as f1, or\n         a floating point register emitted normally.\n+   G\tA floating point constant.\n    I\tInvert a predicate register by adding 1.\n    J    Select the proper predicate register for a condition.\n    j    Select the inverse predicate register for a condition.\n@@ -4628,6 +4630,24 @@ ia64_print_operand (FILE * file, rtx x, int code)\n       fputs (str, file);\n       return;\n \n+    case 'G':\n+      {\n+\tlong val[4];\n+\tREAL_VALUE_TYPE rv;\n+\tREAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n+\treal_to_target (val, &rv, GET_MODE (x));\n+\tif (GET_MODE (x) == SFmode)\n+\t  fprintf (file, \"0x%08lx\", val[0] & 0xffffffff);\n+\telse if (GET_MODE (x) == DFmode)\n+\t  fprintf (file, \"0x%08lx%08lx\", (WORDS_BIG_ENDIAN ? val[0] : val[1])\n+\t\t\t\t\t  & 0xffffffff,\n+\t\t\t\t\t (WORDS_BIG_ENDIAN ? val[1] : val[0])\n+\t\t\t\t\t  & 0xffffffff);\n+\telse\n+\t  output_operand_lossage (\"invalid %%G mode\");\n+      }\n+      return;\n+\n     case 'I':\n       fputs (reg_names [REGNO (x) + 1], file);\n       return;"}, {"sha": "26e71f841b511f123ed1d63741245d248911dd60", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b94a740d585af15678732b069ca905ef6e78a/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b94a740d585af15678732b069ca905ef6e78a/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=735b94a740d585af15678732b069ca905ef6e78a", "patch": "@@ -986,8 +986,8 @@\n })\n \n (define_insn \"movsf_internal\"\n-  [(set (match_operand:SF 0 \"destination_operand\" \"=f,f, Q,*r, f,*r,*r, m\")\n-\t(match_operand:SF 1 \"general_operand\"     \"fG,Q,fG,fG,*r,*r, m,*r\"))]\n+  [(set (match_operand:SF 0 \"destination_operand\" \"=f,f, Q,*r, f,*r,*r, m,*r\")\n+\t(match_operand:SF 1 \"general_operand\"     \"fG,Q,fG,fG,*r,*r, m,*r, F\"))]\n   \"ia64_move_ok (operands[0], operands[1])\"\n   \"@\n    mov %0 = %F1\n@@ -997,10 +997,11 @@\n    setf.s %0 = %1\n    mov %0 = %1\n    ld4%O1 %0 = %1%P1\n-   st4%Q0 %0 = %1%P0\"\n-  [(set_attr \"itanium_class\" \"fmisc,fld,stf,frfr,tofr,ialu,ld,st\")\n+   st4%Q0 %0 = %1%P0\n+   movl %0 = %G1\"\n+  [(set_attr \"itanium_class\" \"fmisc,fld,stf,frfr,tofr,ialu,ld,st,long_i\")\n    (set_attr \"speculable1\"   \"yes\")\n-   (set_attr \"speculable2\"   \"no,   yes,no, no,  no,  no, yes,no\")])\n+   (set_attr \"speculable2\"   \"no,   yes,no, no,  no,  no, yes,no,no\")])\n \n (define_expand \"movdf\"\n   [(set (match_operand:DF 0 \"general_operand\" \"\")\n@@ -1014,8 +1015,8 @@\n })\n \n (define_insn \"movdf_internal\"\n-  [(set (match_operand:DF 0 \"destination_operand\" \"=f,f, Q,*r, f,*r,*r, m\")\n-\t(match_operand:DF 1 \"general_operand\"     \"fG,Q,fG,fG,*r,*r, m,*r\"))]\n+  [(set (match_operand:DF 0 \"destination_operand\" \"=f,f, Q,*r, f,*r,*r, m,*r\")\n+\t(match_operand:DF 1 \"general_operand\"     \"fG,Q,fG,fG,*r,*r, m,*r, F\"))]\n   \"ia64_move_ok (operands[0], operands[1])\"\n   \"@\n    mov %0 = %F1\n@@ -1025,10 +1026,11 @@\n    setf.d %0 = %1\n    mov %0 = %1\n    ld8%O1 %0 = %1%P1\n-   st8%Q0 %0 = %1%P0\"\n-  [(set_attr \"itanium_class\" \"fmisc,fld,stf,frfr,tofr,ialu,ld,st\")\n+   st8%Q0 %0 = %1%P0\n+   movl %0 = %G1\"\n+  [(set_attr \"itanium_class\" \"fmisc,fld,stf,frfr,tofr,ialu,ld,st,long_i\")\n    (set_attr \"speculable1\"   \"yes\")\n-   (set_attr \"speculable2\"   \"no,   yes,no, no,  no,  no, yes,no\")])\n+   (set_attr \"speculable2\"   \"no,   yes,no, no,  no,  no, yes,no,no\")])\n \n ;; With no offsettable memory references, we've got to have a scratch\n ;; around to play with the second word if the variable winds up in GRs."}]}