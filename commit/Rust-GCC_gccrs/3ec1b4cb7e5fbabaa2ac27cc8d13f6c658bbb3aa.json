{"sha": "3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VjMWI0Y2I3ZTVmYmFiYWEyYWMyN2NjOGQxM2Y2YzY1OGJiYjNhYQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-03-10T18:09:35Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-03-10T18:09:35Z"}, "message": "mmix.c: Improve comments.\n\n\t* config/mmix/mmix.c: Improve comments.\n\t(mmix_target_asm_function_prologue): Drop variable\n\tempty_stack_frame.  Don't allocate unused slot above fp.\n\t(mmix_target_asm_function_epilogue): Mirror prologue changes.\n\t* config/mmix/mmix.h (MMIX_GNU_ABI_REG_ALLOC_ORDER): Don't have\n\tbrace in first column.\n\t(enum reg_class): Ditto.\n\t(FIRST_PARM_OFFSET): Now 0.\n\t(USER_LABEL_PREFIX): Remove #if 0:d definition.\n\nFrom-SVN: r50538", "tree": {"sha": "86bd07b8fc4234aad9cffc794a552667ccb386a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86bd07b8fc4234aad9cffc794a552667ccb386a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa/comments", "author": null, "committer": null, "parents": [{"sha": "0c1fcb02b154cf1840914c4b5d96a495690376e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1fcb02b154cf1840914c4b5d96a495690376e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c1fcb02b154cf1840914c4b5d96a495690376e0"}], "stats": {"total": 124, "additions": 52, "deletions": 72}, "files": [{"sha": "62d7a917b30ac9e81ee8b3a07520a49d9b9c4d9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa", "patch": "@@ -1,3 +1,15 @@\n+2002-03-10  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.c: Improve comments.\n+\t(mmix_target_asm_function_prologue): Drop variable\n+\tempty_stack_frame.  Don't allocate unused slot above fp.\n+\t(mmix_target_asm_function_epilogue): Mirror prologue changes.\n+\t* config/mmix/mmix.h (MMIX_GNU_ABI_REG_ALLOC_ORDER): Don't have\n+\tbrace in first column.\n+\t(enum reg_class): Ditto.\n+\t(FIRST_PARM_OFFSET): Now 0.\n+\t(USER_LABEL_PREFIX): Remove #if 0:d definition.\n+\n 2002-03-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* combine.c (make_extraction): Fix error in last change."}, {"sha": "cbec2fcb5bfc46bcbbce96fc8ad6e74b003bf8b8", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 34, "deletions": 59, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa", "patch": "@@ -414,7 +414,10 @@ mmix_return_addr_rtx (count, frame)\n {\n   return count == 0\n     ? (MMIX_CFUN_NEEDS_SAVED_EH_RETURN_ADDRESS\n-       /* FIXME: Set frame_alias_set on the following.  */\n+       /* FIXME: Set frame_alias_set on the following.  (Why?)\n+\t  See mmix_initial_elimination_offset for the reason we can't use\n+\t  get_hard_reg_initial_val for both.  Always using a stack slot\n+\t  and not a register would be suboptimal.  */\n        ? validize_mem (gen_rtx_MEM (Pmode, plus_constant (frame_pointer_rtx, -16)))\n        : get_hard_reg_initial_val (Pmode, MMIX_INCOMING_RETURN_ADDRESS_REGNUM))\n     : NULL_RTX;\n@@ -440,7 +443,10 @@ mmix_initial_elimination_offset (fromreg, toreg)\n   int fp_sp_offset\n     = (get_frame_size () + current_function_outgoing_args_size + 7) & ~7;\n \n-  /* There is no actual difference between these two.  */\n+  /* There is no actual offset between these two virtual values, but for\n+     the frame-pointer, we have the old one in the stack position below\n+     it, so the offset for the frame-pointer to the stack-pointer is one\n+     octabyte larger.  */\n   if (fromreg == MMIX_ARG_POINTER_REGNUM\n       && toreg == MMIX_FRAME_POINTER_REGNUM)\n     return 0;\n@@ -661,14 +667,8 @@ mmix_target_asm_function_prologue (stream, locals_size)\n   int stack_space_to_allocate\n     = (current_function_outgoing_args_size\n        + current_function_pretend_args_size\n-       + (int) locals_size + 8 + 7) & ~7;\n+       + (int) locals_size + 7) & ~7;\n   int offset = -8;\n-  int empty_stack_frame\n-    = (current_function_outgoing_args_size == 0\n-       && locals_size == 0\n-       && current_function_pretend_args_size == 0\n-       && current_function_varargs == 0\n-       && current_function_stdarg == 0);\n   int doing_dwarf = dwarf2out_do_frame ();\n   long cfa_offset = 0;\n \n@@ -752,16 +752,10 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \t}\n     }\n \n-  /* In any case, skip over the return-address slot.  FIXME: Not needed\n-     now.  */\n-  offset -= 8;\n-\n   /* Store the frame-pointer.  */\n \n   if (frame_pointer_needed)\n     {\n-      empty_stack_frame = 0;\n-\n       if (offset < 0)\n \t{\n \t  /* Get 8 less than otherwise, since we need to reach offset + 8.  */\n@@ -799,8 +793,9 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \n   if (MMIX_CFUN_NEEDS_SAVED_EH_RETURN_ADDRESS)\n     {\n-      /* Store the return-address, if one is needed on the stack.  */\n-      empty_stack_frame = 0;\n+      /* Store the return-address, if one is needed on the stack.  We\n+\t usually store it in a register when needed, but that doesn't work\n+\t with -fexceptions.  */\n \n       if (offset < 0)\n \t{\n@@ -838,8 +833,6 @@ mmix_target_asm_function_prologue (stream, locals_size)\n       /* Store the register defining the numbering of local registers, so\n \t we know how long to unwind the register stack.  */\n \n-      empty_stack_frame = 0;\n-\n       if (offset < 0)\n \t{\n \t  /* Get 8 less than otherwise, since we need to reach offset + 8.  */\n@@ -894,8 +887,6 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \t && regs_ever_live[regno] && ! call_used_regs[regno])\n \t|| IS_MMIX_EH_RETURN_DATA_REG (regno))\n       {\n-\tempty_stack_frame = 0;\n-\n \tif (offset < 0)\n \t  {\n \t    int stack_chunk;\n@@ -950,11 +941,10 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \toffset -= 8;\n       }\n \n-  /* Finally, allocate room for local vars (if they weren't allocated for\n-     above) and outgoing args.  This might be any number of bytes (well,\n-     we assume it fits in a host-int).\n-     Don't allocate (the return-address slot) if the stack frame is empty.  */\n-  if (stack_space_to_allocate && ! empty_stack_frame)\n+  /* Finally, allocate room for outgoing args and local vars if room\n+     wasn't allocated above.  This might be any number of bytes (well, we\n+     assume it fits in a host-int).  */\n+  if (stack_space_to_allocate)\n     {\n       if (stack_space_to_allocate < 256)\n \t{\n@@ -1006,19 +996,13 @@ mmix_target_asm_function_epilogue (stream, locals_size)\n   int stack_space_to_deallocate\n     = (current_function_outgoing_args_size\n        + current_function_pretend_args_size\n-       + (int) locals_size + 8 + 7) & ~7;\n+       + (int) locals_size + 7) & ~7;\n \n   /* The assumption that locals_size fits in an int is asserted in\n      mmix_target_asm_function_prologue.  */\n \n   /* The first address to access is beyond the outgoing_args area.  */\n   int offset = current_function_outgoing_args_size;\n-  int empty_stack_frame\n-    = (current_function_outgoing_args_size == 0\n-       && locals_size == 0\n-       && current_function_pretend_args_size == 0\n-       && ! MMIX_CFUN_NEEDS_SAVED_EH_RETURN_ADDRESS\n-       && ! MMIX_CFUN_HAS_LANDING_PAD);\n \n   /* Add the space for global non-register-stack registers.\n      It is assumed that the frame-pointer register can be one of these\n@@ -1059,8 +1043,6 @@ mmix_target_asm_function_epilogue (stream, locals_size)\n \t && regs_ever_live[regno] && !call_used_regs[regno])\n \t|| IS_MMIX_EH_RETURN_DATA_REG (regno))\n       {\n-\tempty_stack_frame = 0;\n-\n \tif (offset > 255)\n \t  {\n \t    if (offset > 65535)\n@@ -1106,8 +1088,6 @@ mmix_target_asm_function_epilogue (stream, locals_size)\n   /* Get back the old frame-pointer-value.  */\n   if (frame_pointer_needed)\n     {\n-      empty_stack_frame = 0;\n-\n       if (offset > 255)\n \t{\n \t  if (offset > 65535)\n@@ -1135,27 +1115,22 @@ mmix_target_asm_function_epilogue (stream, locals_size)\n       offset += 8;\n     }\n \n-  /* Do not deallocate the return-address slot if the stack frame is\n-     empty, because then it was never allocated.  */\n-  if (! empty_stack_frame)\n+  /* We do not need to restore pretended incoming args, just add back\n+     offset to sp.  */\n+  if (stack_space_to_deallocate > 65535)\n     {\n-      /* We do not need to restore pretended incoming args, just add\n-\t back offset to sp.  */\n-      if (stack_space_to_deallocate > 65535)\n-\t{\n-\t  /* There's better support for incrementing than decrementing, so\n-\t     we might be able to optimize this as we see a need.  */\n-\t  mmix_output_register_setting (stream, 255,\n-\t\t\t\t\tstack_space_to_deallocate, 1);\n-\t  fprintf (stream, \"\\tADDU %s,%s,$255\\n\",\n-\t\t   reg_names[MMIX_STACK_POINTER_REGNUM],\n-\t\t   reg_names[MMIX_STACK_POINTER_REGNUM]);\n-\t}\n-      else\n-\tfprintf (stream, \"\\tINCL %s,%d\\n\",\n-\t\t reg_names[MMIX_STACK_POINTER_REGNUM],\n-\t\t stack_space_to_deallocate);\n+      /* There's better support for incrementing than decrementing, so\n+\t we might be able to optimize this as we see a need.  */\n+      mmix_output_register_setting (stream, 255,\n+\t\t\t\t    stack_space_to_deallocate, 1);\n+      fprintf (stream, \"\\tADDU %s,%s,$255\\n\",\n+\t       reg_names[MMIX_STACK_POINTER_REGNUM],\n+\t       reg_names[MMIX_STACK_POINTER_REGNUM]);\n     }\n+  else if (stack_space_to_deallocate != 0)\n+    fprintf (stream, \"\\tINCL %s,%d\\n\",\n+\t     reg_names[MMIX_STACK_POINTER_REGNUM],\n+\t     stack_space_to_deallocate);\n \n   if (current_function_calls_eh_return)\n     /* Adjustment the (normal) stack-pointer to that of the receiver.\n@@ -1343,9 +1318,9 @@ void\n mmix_trampoline_template (stream)\n      FILE * stream;\n {\n-  /* Read a value from to static-chain, jump somewhere.  The static chain\n-     is stored at offset 16, and the function address is stored at offset\n-     24.  */\n+  /* Read a value into the static-chain register and jump somewhere.  The\n+     static chain is stored at offset 16, and the function address is\n+     stored at offset 24.  */\n   /* FIXME: GCC copies this using *intsize* (tetra), when it should use\n      register size (octa).  */\n   fprintf (stream, \"\\tGETA $255,1F\\n\\t\");"}, {"sha": "53521e8dea2604682289dfeab94aeb91525af009", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=3ec1b4cb7e5fbabaa2ac27cc8d13f6c658bbb3aa", "patch": "@@ -483,7 +483,7 @@ extern int target_flags;\n    assuming it is referenced a very limited number of times.  Other global\n    and fixed registers come next; they are never allocated.  */\n #define MMIX_GNU_ABI_REG_ALLOC_ORDER\t\t\\\n-{  252, 251, 250, 249, 248, 247, 246,\t\t\\\n+ { 252, 251, 250, 249, 248, 247, 246,\t\t\\\n    245, 244, 243, 242, 241, 240, 239, 238,\t\\\n    237, 236, 235, 234, 233, 232, 231,\t\t\\\n \t\t\t\t\t\t\\\n@@ -549,10 +549,10 @@ extern int target_flags;\n /* Node: Register Classes */\n \n enum reg_class\n-{\n-  NO_REGS, GENERAL_REGS, REMAINDER_REG, HIMULT_REG,\n-  SYSTEM_REGS, ALL_REGS, LIM_REG_CLASSES\n-};\n+ {\n+   NO_REGS, GENERAL_REGS, REMAINDER_REG, HIMULT_REG,\n+   SYSTEM_REGS, ALL_REGS, LIM_REG_CLASSES\n+ };\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n@@ -626,10 +626,7 @@ enum reg_class\n #define STARTING_FRAME_OFFSET \\\n   mmix_starting_frame_offset ()\n \n-/* There is a stack slot between the frame-pointer and the first\n-   parameter, where the return address is sometimes stored.  FIXME:\n-   Unnecessary.  */\n-#define FIRST_PARM_OFFSET(FUNDECL) 8\n+#define FIRST_PARM_OFFSET(FUNDECL) 0\n \n #define DYNAMIC_CHAIN_ADDRESS(FRAMEADDR) \\\n  mmix_dynamic_chain_address (FRAMEADDR)\n@@ -1104,10 +1101,6 @@ const_section ()\t\t\t\t\t\t\\\n #define PRINT_OPERAND_ADDRESS(STREAM, X) \\\n  mmix_print_operand_address (STREAM, X)\n \n-#if 0\n-#define USER_LABEL_PREFIX \"_\"\n-#endif\n-\n #define ASM_OUTPUT_REG_PUSH(STREAM, REGNO) \\\n  mmix_asm_output_reg_push (STREAM, REGNO)\n "}]}