{"sha": "7036e9ef462fde8181bece4ac4e03f3aa27204dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAzNmU5ZWY0NjJmZGU4MTgxYmVjZTRhYzRlMDNmM2FhMjcyMDRkYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-24T17:11:00Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-25T01:23:42Z"}, "message": "Add support for per-location warning groups.\n\ngcc/ChangeLog:\n\n\t* Makefile.in (OBJS-libcommon): Add diagnostic-spec.o.\n\t* gengtype.c (open_base_files): Add diagnostic-spec.h.\n\t* diagnostic-spec.c: New file.\n\t* diagnostic-spec.h: New file.\n\t* tree.h (no_warning, all_warnings, suppress_warning_at): New\n\tdeclarations.\n\t* warning-control.cc: New file.", "tree": {"sha": "97e05650a7da31613da89031358565ff38f0f111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97e05650a7da31613da89031358565ff38f0f111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7036e9ef462fde8181bece4ac4e03f3aa27204dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7036e9ef462fde8181bece4ac4e03f3aa27204dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7036e9ef462fde8181bece4ac4e03f3aa27204dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7036e9ef462fde8181bece4ac4e03f3aa27204dc/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "980e278dbe5b50dc5a856ea627359c521f1cda53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980e278dbe5b50dc5a856ea627359c521f1cda53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980e278dbe5b50dc5a856ea627359c521f1cda53"}], "stats": {"total": 578, "additions": 575, "deletions": 3}, "files": [{"sha": "3d8c2b94d704b0665cae3161f038c847b01b3e8f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7036e9ef462fde8181bece4ac4e03f3aa27204dc", "patch": "@@ -1698,6 +1698,7 @@ OBJS = \\\n \tvmsdbgout.o \\\n \tvr-values.o \\\n \tvtable-verify.o \\\n+\twarning-control.o \\\n \tweb.o \\\n \twide-int.o \\\n \twide-int-print.o \\\n@@ -1709,8 +1710,8 @@ OBJS = \\\n \n # Objects in libcommon.a, potentially used by all host binaries and with\n # no target dependencies.\n-OBJS-libcommon = diagnostic.o diagnostic-color.o diagnostic-show-locus.o \\\n-\tdiagnostic-format-json.o json.o \\\n+OBJS-libcommon = diagnostic-spec.o diagnostic.o diagnostic-color.o \\\n+\tdiagnostic-show-locus.o diagnostic-format-json.o json.o \\\n \tedit-context.o \\\n \tpretty-print.o intl.o \\\n \tsbitmap.o \\\n@@ -2650,6 +2651,7 @@ GTFILES = $(CPPLIB_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/ipa-modref.h $(srcdir)/ipa-modref.c \\\n   $(srcdir)/ipa-modref-tree.h \\\n   $(srcdir)/signop.h \\\n+  $(srcdir)/diagnostic-spec.h $(srcdir)/diagnostic-spec.c \\\n   $(srcdir)/dwarf2out.h \\\n   $(srcdir)/dwarf2asm.c \\\n   $(srcdir)/dwarf2cfi.c \\"}, {"sha": "fbe52c6445cc227664152f9ee3579459f28a042d", "filename": "gcc/diagnostic-spec.c", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2Fdiagnostic-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2Fdiagnostic-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-spec.c?ref=7036e9ef462fde8181bece4ac4e03f3aa27204dc", "patch": "@@ -0,0 +1,179 @@\n+/* Functions to enable and disable individual warnings on an expression\n+   and statement basis.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Martin Sebor <msebor@redhat.com>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"backend.h\"\n+#include \"bitmap.h\"\n+#include \"tree.h\"\n+#include \"cgraph.h\"\n+#include \"hash-map.h\"\n+#include \"diagnostic-spec.h\"\n+#include \"pretty-print.h\"\n+#include \"options.h\"\n+\n+/* Initialize *THIS from warning option OPT.  */\n+\n+nowarn_spec_t::nowarn_spec_t (opt_code opt)\n+{\n+  /* Create a very simple mapping based on testing and experience.\n+     It should become more refined with time. */\n+  switch (opt)\n+    {\n+    case no_warning:\n+      m_bits = 0;\n+      break;\n+\n+    case all_warnings:\n+      m_bits = -1;\n+      break;\n+\n+      /* Flow-sensitive warnings about pointer problems issued by both\n+\t front ends and the middle end.  */\n+    case OPT_Waddress:\n+    case OPT_Wnonnull:\n+      m_bits = NW_NONNULL;\n+      break;\n+\n+      /* Flow-sensitive warnings about arithmetic overflow issued by both\n+\t front ends and the middle end.  */\n+    case OPT_Woverflow:\n+    case OPT_Wshift_count_negative:\n+    case OPT_Wshift_count_overflow:\n+    case OPT_Wstrict_overflow:\n+      m_bits = NW_VFLOW;\n+      break;\n+\n+      /* Lexical warnings issued by front ends.  */\n+    case OPT_Wabi:\n+    case OPT_Wlogical_op:\n+    case OPT_Wparentheses:\n+    case OPT_Wreturn_type:\n+    case OPT_Wsizeof_array_div:\n+    case OPT_Wstrict_aliasing:\n+    case OPT_Wunused:\n+    case OPT_Wunused_function:\n+    case OPT_Wunused_but_set_variable:\n+    case OPT_Wunused_variable:\n+    case OPT_Wunused_but_set_parameter:\n+      m_bits = NW_LEXICAL;\n+      break;\n+\n+      /* Access warning group.  */\n+    case OPT_Warray_bounds:\n+    case OPT_Warray_bounds_:\n+    case OPT_Wformat_overflow_:\n+    case OPT_Wformat_truncation_:\n+    case OPT_Wrestrict:\n+    case OPT_Wstrict_aliasing_:\n+    case OPT_Wstringop_overflow_:\n+    case OPT_Wstringop_overread:\n+    case OPT_Wstringop_truncation:\n+      m_bits = NW_ACCESS;\n+      break;\n+\n+      /* Initialization warning group.  */\n+    case OPT_Winit_self:\n+    case OPT_Wuninitialized:\n+    case OPT_Wmaybe_uninitialized:\n+\tm_bits = NW_UNINIT;\n+      break;\n+\n+    default:\n+      /* A catchall group for everything else.  */\n+      m_bits = NW_OTHER;\n+    }\n+}\n+\n+/* Map from location to its no-warning disposition.  */\n+\n+GTY(()) xint_hash_map_t *nowarn_map;\n+\n+/* Return the no-warning disposition for location LOC and option OPT\n+   or for all/any otions by default.  */\n+\n+bool\n+warning_suppressed_at (location_t loc, opt_code opt /* = all_warnings */)\n+{\n+  if (!nowarn_map)\n+    return false;\n+\n+  if (const nowarn_spec_t* const pspec = nowarn_map->get (loc))\n+    {\n+      const nowarn_spec_t optspec (opt);\n+      return *pspec & optspec;\n+    }\n+\n+  return false;\n+}\n+\n+ /* Change the supression of warnings for location LOC.\n+    OPT controls which warnings are affected.\n+    The wildcard OPT of -1 controls all warnings.\n+    If SUPP is true (the default), enable the suppression of the warnings.\n+    If SUPP is false, disable the suppression of the warnings.  */\n+\n+bool\n+suppress_warning_at (location_t loc, opt_code opt /* = all_warnings */,\n+\t\t     bool supp /* = true */)\n+{\n+  const nowarn_spec_t optspec (supp ? opt : opt_code ());\n+\n+  if (nowarn_spec_t *pspec = nowarn_map ? nowarn_map->get (loc) : NULL)\n+    {\n+      if (supp)\n+\t{\n+\t  *pspec |= optspec;\n+\t  return true;\n+\t}\n+\n+      *pspec &= optspec;\n+      if (*pspec)\n+\treturn true;\n+\n+      nowarn_map->remove (loc);\n+      return false;\n+    }\n+\n+  if (!supp || opt == no_warning)\n+    return false;\n+\n+  if (!nowarn_map)\n+    nowarn_map = xint_hash_map_t::create_ggc (32);\n+\n+  nowarn_map->put (loc, optspec);\n+  return true;\n+}\n+\n+/* Copy the no-warning disposition from one location to another.  */\n+\n+void\n+copy_warning (location_t to, location_t from)\n+{\n+  if (!nowarn_map)\n+    return;\n+\n+  if (nowarn_spec_t *pspec = nowarn_map->get (from))\n+    nowarn_map->put (to, *pspec);\n+  else\n+    nowarn_map->remove (to);\n+}"}, {"sha": "4e4d260f74a3e56b3dddcebd564c7f81c6f149e2", "filename": "gcc/diagnostic-spec.h", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2Fdiagnostic-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2Fdiagnostic-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-spec.h?ref=7036e9ef462fde8181bece4ac4e03f3aa27204dc", "patch": "@@ -0,0 +1,141 @@\n+/* Language-independent APIs to enable/disable per-location warnings.\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Martin Sebor <msebor@redhat.com>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef DIAGNOSTIC_SPEC_H_INCLUDED\n+#define DIAGNOSTIC_SPEC_H_INCLUDED\n+\n+#include \"hash-map.h\"\n+\n+/* A \"bitset\" of warning groups.  */\n+\n+class nowarn_spec_t\n+{\n+public:\n+  enum\n+    {\n+     /* Middle end warnings about invalid accesses.  */\n+     NW_ACCESS = 1 << 0,\n+     /* Front end/lexical warnings.  */\n+     NW_LEXICAL = 1 << 1,\n+     /* Warnings about null pointers.  */\n+     NW_NONNULL = 1 << 2,\n+     /* Warnings about uninitialized reads.  */\n+     NW_UNINIT = 1 << 3,\n+     /* Warnings about arithmetic overflow.  */\n+     NW_VFLOW = 1 << 4,\n+     /* All other unclassified warnings.  */\n+     NW_OTHER = 1 << 5,\n+     /* All groups of warnings.  */\n+     NW_ALL = (NW_ACCESS | NW_LEXICAL | NW_NONNULL\n+\t       | NW_UNINIT | NW_VFLOW | NW_OTHER)\n+   };\n+\n+  nowarn_spec_t (): m_bits () { }\n+\n+  nowarn_spec_t (opt_code);\n+\n+  /* Return the raw bitset.  */\n+  operator unsigned() const\n+  {\n+    return m_bits;\n+  }\n+\n+  /* Return true if the bitset is clear.  */\n+  bool operator!() const\n+  {\n+    return !m_bits;\n+  }\n+\n+  /* Return the inverse of the bitset.  */\n+  nowarn_spec_t operator~() const\n+  {\n+    nowarn_spec_t res (*this);\n+    res.m_bits &= ~NW_ALL;\n+    return res;\n+  }\n+\n+  /* Set *THIS to the bitwise OR of *THIS and RHS.  */\n+  nowarn_spec_t& operator|= (const nowarn_spec_t &rhs)\n+  {\n+    m_bits |= rhs.m_bits;\n+    return *this;\n+  }\n+\n+  /* Set *THIS to the bitwise AND of *THIS and RHS.  */\n+  nowarn_spec_t& operator&= (const nowarn_spec_t &rhs)\n+  {\n+    m_bits &= rhs.m_bits;\n+    return *this;\n+  }\n+\n+  /* Set *THIS to the bitwise exclusive OR of *THIS and RHS.  */\n+  nowarn_spec_t& operator^= (const nowarn_spec_t &rhs)\n+  {\n+    m_bits ^= rhs.m_bits;\n+    return *this;\n+  }\n+\n+private:\n+  /* Bitset of warning groups.  */\n+  unsigned m_bits;\n+};\n+\n+/* Return the bitwise OR of LHS and RHS.  */\n+\n+inline nowarn_spec_t\n+operator| (const nowarn_spec_t &lhs, const nowarn_spec_t &rhs)\n+{\n+  return nowarn_spec_t (lhs) |= rhs;\n+}\n+\n+/* Return the bitwise AND of LHS and RHS.  */\n+\n+inline nowarn_spec_t\n+operator& (const nowarn_spec_t &lhs, const nowarn_spec_t &rhs)\n+{\n+  return nowarn_spec_t (lhs) &= rhs;\n+}\n+\n+/* Return true if LHS is equal RHS.  */\n+\n+inline bool\n+operator== (const nowarn_spec_t &lhs, const nowarn_spec_t &rhs)\n+{\n+  return static_cast<unsigned>(lhs) == static_cast<unsigned>(rhs);\n+}\n+\n+/* Return true if LHS is not equal RHS.  */\n+\n+inline bool\n+operator!= (const nowarn_spec_t &lhs, const nowarn_spec_t &rhs)\n+{\n+  return !(lhs == rhs);\n+}\n+\n+typedef location_t key_type_t;\n+typedef int_hash <key_type_t, 0, UINT_MAX> xint_hash_t;\n+typedef hash_map<xint_hash_t, nowarn_spec_t> xint_hash_map_t;\n+\n+/* A mapping from the location of an expression to the warning spec\n+   set for it.  */\n+extern GTY(()) xint_hash_map_t *nowarn_map;\n+\n+#endif // DIAGNOSTIC_SPEC_H_INCLUDED"}, {"sha": "c1fa6d35c87d9328c63a819deaa8bd499cc29d6e", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=7036e9ef462fde8181bece4ac4e03f3aa27204dc", "patch": "@@ -1727,7 +1727,7 @@ open_base_files (void)\n       \"target-globals.h\", \"ipa-ref.h\", \"cgraph.h\", \"symbol-summary.h\",\n       \"ipa-prop.h\", \"ipa-fnsummary.h\", \"dwarf2out.h\", \"omp-general.h\",\n       \"omp-offload.h\", \"ipa-modref-tree.h\", \"ipa-modref.h\", \"symtab-thunks.h\",\n-      \"symtab-clones.h\",\n+      \"symtab-clones.h\", \"diagnostic-spec.h\",\n       NULL\n     };\n     const char *const *ifp;"}, {"sha": "e5d1718808933acd32b7fc72612256a3da08aa1f", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7036e9ef462fde8181bece4ac4e03f3aa27204dc", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_TREE_H\n \n #include \"tree-core.h\"\n+#include \"options.h\"\n \n /* Convert a target-independent built-in function code to a combined_fn.  */\n \n@@ -6441,4 +6442,15 @@ class op_location_t\n   operator location_t () const { return m_combined_loc; }\n };\n \n+/* Code that doesn't refer to any warning.  Has no effect on suppression\n+   functions.  */\n+constexpr opt_code no_warning = opt_code ();\n+/* Wildcard code that refers to all warnings.  */\n+constexpr opt_code all_warnings = N_OPTS;\n+\n+/* Set the disposition for a warning (or all warnings by default)\n+   at a location to disabled by default.  */\n+extern bool suppress_warning_at (location_t, opt_code = all_warnings,\n+\t\t\t\t bool = true);\n+\n #endif  /* GCC_TREE_H  */"}, {"sha": "ec8ed232763054be945a3ca2d5bd18678b413cd8", "filename": "gcc/warning-control.cc", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2Fwarning-control.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7036e9ef462fde8181bece4ac4e03f3aa27204dc/gcc%2Fwarning-control.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwarning-control.cc?ref=7036e9ef462fde8181bece4ac4e03f3aa27204dc", "patch": "@@ -0,0 +1,238 @@\n+/* Functions to enable and disable individual warnings on an expression\n+   and statement basis.\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"backend.h\"\n+#include \"bitmap.h\"\n+#include \"tree.h\"\n+#include \"gimple.h\"\n+#include \"cgraph.h\"\n+#include \"hash-map.h\"\n+#include \"diagnostic-spec.h\"\n+\n+/* Return the no-warning bit for EXPR.  */\n+\n+static inline bool\n+get_no_warning_bit (const_tree expr)\n+{\n+  return expr->base.nowarning_flag;\n+}\n+\n+/* Return the no-warning bit for statement STMT.  */\n+\n+static inline bool\n+get_no_warning_bit (const gimple *stmt)\n+{\n+  return stmt->no_warning;\n+}\n+\n+/* Set the no-warning bit for EXPR to VALUE.  */\n+\n+static inline void\n+set_no_warning_bit (tree expr, bool value)\n+{\n+  expr->base.nowarning_flag = value;\n+}\n+\n+/* Set the no-warning bit for statement STMT to VALUE.  */\n+\n+static inline void\n+set_no_warning_bit (gimple *stmt, bool value)\n+{\n+  stmt->no_warning = value;\n+}\n+\n+/* Return EXPR location or zero.  */\n+\n+static inline key_type_t\n+convert_to_key (const_tree expr)\n+{\n+  if (DECL_P (expr))\n+    return DECL_SOURCE_LOCATION (expr);\n+  if (EXPR_P (expr))\n+    return EXPR_LOCATION (expr);\n+  return 0;\n+}\n+\n+/* Return STMT location (may be zero).  */\n+\n+static inline key_type_t\n+convert_to_key (const gimple *stmt)\n+{\n+  return gimple_location (stmt);\n+}\n+\n+/* Return the no-warning bitmap for decl/expression EXPR.  */\n+\n+static nowarn_spec_t *\n+get_nowarn_spec (const_tree expr)\n+{\n+  const key_type_t key = convert_to_key (expr);\n+\n+  if (!get_no_warning_bit (expr) || !key)\n+    return NULL;\n+\n+  return nowarn_map ? nowarn_map->get (key) : NULL;\n+}\n+\n+/* Return the no-warning bitmap for stateemt STMT.  */\n+\n+static nowarn_spec_t *\n+get_nowarn_spec (const gimple *stmt)\n+{\n+  const key_type_t key = convert_to_key (stmt);\n+\n+  if (!get_no_warning_bit (stmt))\n+    return NULL;\n+\n+  return nowarn_map ? nowarn_map->get (key) : NULL;\n+}\n+\n+/* Return true if warning OPT is suppressed for decl/expression EXPR.\n+   By default tests the disposition for any warning.  */\n+\n+bool\n+warning_suppressed_p (const_tree expr, opt_code opt /* = all_warnings */)\n+{\n+  const nowarn_spec_t *spec = get_nowarn_spec (expr);\n+\n+  if (!spec)\n+    return get_no_warning_bit (expr);\n+\n+  const nowarn_spec_t optspec (opt);\n+  bool dis = *spec & optspec;\n+  gcc_assert (get_no_warning_bit (expr) || !dis);\n+  return dis;\n+}\n+\n+/* Return true if warning OPT is suppressed for statement STMT.\n+   By default tests the disposition for any warning.  */\n+\n+bool\n+warning_suppressed_p (const gimple *stmt, opt_code opt /* = all_warnings */)\n+{\n+  const nowarn_spec_t *spec = get_nowarn_spec (stmt);\n+\n+  if (!spec)\n+    /* Fall back on the single no-warning bit.  */\n+    return get_no_warning_bit (stmt);\n+\n+  const nowarn_spec_t optspec (opt);\n+  bool dis = *spec & optspec;\n+  gcc_assert (get_no_warning_bit (stmt) || !dis);\n+  return dis;\n+}\n+\n+/* Enable, or by default disable, a warning for the expression.\n+   The wildcard OPT of -1 controls all warnings.  */\n+\n+void\n+suppress_warning (tree expr, opt_code opt /* = all_warnings */,\n+\t\t  bool supp /* = true */)\n+{\n+  if (opt == no_warning)\n+    return;\n+\n+  const key_type_t key = convert_to_key (expr);\n+\n+  supp = suppress_warning_at (key, opt, supp) || supp;\n+  set_no_warning_bit (expr, supp);\n+}\n+\n+/* Enable, or by default disable, a warning for the statement STMT.\n+   The wildcard OPT of -1 controls all warnings.  */\n+\n+void\n+suppress_warning (gimple *stmt, opt_code opt /* = all_warnings */,\n+\t\t  bool supp /* = true */)\n+{\n+  if (opt == no_warning)\n+    return;\n+\n+  const key_type_t key = convert_to_key (stmt);\n+\n+  supp = suppress_warning_at (key, opt, supp) || supp;\n+  set_no_warning_bit (stmt, supp);\n+}\n+\n+/* Copy the warning disposition mapping between an expression and/or\n+   a statement.  */\n+\n+template <class ToType, class FromType>\n+void copy_warning (ToType to, FromType from)\n+{\n+  const key_type_t to_key = convert_to_key (to);\n+\n+  if (nowarn_spec_t *from_map = get_nowarn_spec (from))\n+    {\n+      /* If there's an entry in the map the no-warning bit must be set.  */\n+      gcc_assert (get_no_warning_bit (from));\n+\n+      if (!nowarn_map)\n+\tnowarn_map = xint_hash_map_t::create_ggc (32);\n+\n+      nowarn_map->put (to_key, *from_map);\n+      set_no_warning_bit (to, true);\n+    }\n+  else\n+    {\n+      if (nowarn_map)\n+\tnowarn_map->remove (to_key);\n+\n+      /* The no-warning bit might be set even if there's no entry\n+\t in the map.  */\n+      set_no_warning_bit (to, get_no_warning_bit (from));\n+    }\n+}\n+\n+/* Copy the warning disposition mapping from one expression to another.  */\n+\n+void\n+copy_warning (tree to, const_tree from)\n+{\n+  copy_warning<tree, const_tree>(to, from);\n+}\n+\n+/* Copy the warning disposition mapping from a statement to an expression.  */\n+\n+void\n+copy_warning (tree to, const gimple *from)\n+{\n+  copy_warning<tree, const gimple *>(to, from);\n+}\n+\n+/* Copy the warning disposition mapping from an expression to a statement.  */\n+\n+void\n+copy_warning (gimple *to, const_tree from)\n+{\n+  copy_warning<gimple *, const_tree>(to, from);\n+}\n+\n+/* Copy the warning disposition mapping from one statement to another.  */\n+\n+void\n+copy_warning (gimple *to, const gimple *from)\n+{\n+  copy_warning<gimple *, const gimple *>(to, from);\n+}"}]}