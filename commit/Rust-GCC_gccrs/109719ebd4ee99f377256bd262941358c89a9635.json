{"sha": "109719ebd4ee99f377256bd262941358c89a9635", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA5NzE5ZWJkNGVlOTlmMzc3MjU2YmQyNjI5NDEzNThjODlhOTYzNQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2013-10-30T09:06:20Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-30T09:06:20Z"}, "message": "builtin-types.def (BT_FN_VOID_CONST_PTR): New.\n\n        * builtin-types.def (BT_FN_VOID_CONST_PTR): New.\n        (BT_FN_PTR_CONST_PTR): New.\n        (BT_FN_CONST_PTR_CONST_PTR): New.\n        (BT_FN_PTR_CONST_PTR_SIZE): New.\n        (BT_FN_PTR_CONST_PTR_CONST_PTR): New.\n        (BT_FN_VOID_PTRPTR_CONST_PTR): New.\n        (BT_FN_VOID_CONST_PTR_SIZE): New.\n        (BT_FN_PTR_CONST_PTR_CONST_PTR_SIZE): New.\n        * chkp-builtins.def: New.\n        * builtins.def: include chkp-builtins.def.\n        (DEF_CHKP_BUILTIN): New.\n        * builtins.c (expand_builtin): Support BUILT_IN_CHKP_INIT_PTR_BOUNDS,\n        BUILT_IN_CHKP_NULL_PTR_BOUNDS, BUILT_IN_CHKP_COPY_PTR_BOUNDS,\n        BUILT_IN_CHKP_CHECK_PTR_LBOUNDS, BUILT_IN_CHKP_CHECK_PTR_UBOUNDS,\n        BUILT_IN_CHKP_CHECK_PTR_BOUNDS, BUILT_IN_CHKP_SET_PTR_BOUNDS,\n        BUILT_IN_CHKP_NARROW_PTR_BOUNDS, BUILT_IN_CHKP_STORE_PTR_BOUNDS,\n        BUILT_IN_CHKP_GET_PTR_LBOUND, BUILT_IN_CHKP_GET_PTR_UBOUND,\n        BUILT_IN_CHKP_BNDMK, BUILT_IN_CHKP_BNDSTX, BUILT_IN_CHKP_BNDCL,\n        BUILT_IN_CHKP_BNDCU, BUILT_IN_CHKP_BNDLDX, BUILT_IN_CHKP_BNDRET,\n        BUILT_IN_CHKP_INTERSECT, BUILT_IN_CHKP_ARG_BND, BUILT_IN_CHKP_NARROW,\n        BUILT_IN_CHKP_EXTRACT_LOWER, BUILT_IN_CHKP_EXTRACT_UPPER.\n        * common.opt (fcheck-pointer-bounds): New.\n        * toplev.c (process_options): Check Pointer Bounds Checker is supported.\n        * doc/extend.texi: Document Pointer Bounds Checker built-in functions.\n\nFrom-SVN: r204196", "tree": {"sha": "907c4a33c22b4d96f3c4df791246a1dff8d47238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/907c4a33c22b4d96f3c4df791246a1dff8d47238"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/109719ebd4ee99f377256bd262941358c89a9635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109719ebd4ee99f377256bd262941358c89a9635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109719ebd4ee99f377256bd262941358c89a9635", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109719ebd4ee99f377256bd262941358c89a9635/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f481a2ce85ddb000d25003d318389926d84159c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f481a2ce85ddb000d25003d318389926d84159c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f481a2ce85ddb000d25003d318389926d84159c4"}], "stats": {"total": 287, "additions": 286, "deletions": 1}, "files": [{"sha": "6756d107a0a808892c9ffbd10970232c44cff78c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109719ebd4ee99f377256bd262941358c89a9635/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109719ebd4ee99f377256bd262941358c89a9635/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=109719ebd4ee99f377256bd262941358c89a9635", "patch": "@@ -1,3 +1,30 @@\n+2013-10-29  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* builtin-types.def (BT_FN_VOID_CONST_PTR): New.\n+\t(BT_FN_PTR_CONST_PTR): New.\n+\t(BT_FN_CONST_PTR_CONST_PTR): New.\n+\t(BT_FN_PTR_CONST_PTR_SIZE): New.\n+\t(BT_FN_PTR_CONST_PTR_CONST_PTR): New.\n+\t(BT_FN_VOID_PTRPTR_CONST_PTR): New.\n+\t(BT_FN_VOID_CONST_PTR_SIZE): New.\n+\t(BT_FN_PTR_CONST_PTR_CONST_PTR_SIZE): New.\n+\t* chkp-builtins.def: New.\n+\t* builtins.def: include chkp-builtins.def.\n+\t(DEF_CHKP_BUILTIN): New.\n+\t* builtins.c (expand_builtin): Support BUILT_IN_CHKP_INIT_PTR_BOUNDS,\n+\tBUILT_IN_CHKP_NULL_PTR_BOUNDS, BUILT_IN_CHKP_COPY_PTR_BOUNDS,\n+\tBUILT_IN_CHKP_CHECK_PTR_LBOUNDS, BUILT_IN_CHKP_CHECK_PTR_UBOUNDS,\n+\tBUILT_IN_CHKP_CHECK_PTR_BOUNDS, BUILT_IN_CHKP_SET_PTR_BOUNDS,\n+\tBUILT_IN_CHKP_NARROW_PTR_BOUNDS, BUILT_IN_CHKP_STORE_PTR_BOUNDS,\n+\tBUILT_IN_CHKP_GET_PTR_LBOUND, BUILT_IN_CHKP_GET_PTR_UBOUND,\n+\tBUILT_IN_CHKP_BNDMK, BUILT_IN_CHKP_BNDSTX, BUILT_IN_CHKP_BNDCL,\n+\tBUILT_IN_CHKP_BNDCU, BUILT_IN_CHKP_BNDLDX, BUILT_IN_CHKP_BNDRET,\n+\tBUILT_IN_CHKP_INTERSECT, BUILT_IN_CHKP_ARG_BND, BUILT_IN_CHKP_NARROW,\n+\tBUILT_IN_CHKP_EXTRACT_LOWER, BUILT_IN_CHKP_EXTRACT_UPPER.\n+\t* common.opt (fcheck-pointer-bounds): New.\n+\t* toplev.c (process_options): Check Pointer Bounds Checker is supported.\n+\t* doc/extend.texi: Document Pointer Bounds Checker built-in functions.\n+\n 2013-10-30  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* target.def (builtin_chkp_function): New."}, {"sha": "1f9ae4e2317550f089f61888d448dfe7091f58c7", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=109719ebd4ee99f377256bd262941358c89a9635", "patch": "@@ -226,13 +226,16 @@ DEF_FUNCTION_TYPE_1 (BT_FN_DFLOAT64_DFLOAT64, BT_DFLOAT64, BT_DFLOAT64)\n DEF_FUNCTION_TYPE_1 (BT_FN_DFLOAT128_DFLOAT128, BT_DFLOAT128, BT_DFLOAT128)\n DEF_FUNCTION_TYPE_1 (BT_FN_VOID_VPTR, BT_VOID, BT_VOLATILE_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_VOID_PTRPTR, BT_VOID, BT_PTR_PTR)\n+DEF_FUNCTION_TYPE_1 (BT_FN_VOID_CONST_PTR, BT_VOID, BT_CONST_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT_UINT, BT_UINT, BT_UINT)\n DEF_FUNCTION_TYPE_1 (BT_FN_ULONG_ULONG, BT_ULONG, BT_ULONG)\n DEF_FUNCTION_TYPE_1 (BT_FN_ULONGLONG_ULONGLONG, BT_ULONGLONG, BT_ULONGLONG)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT16_UINT16, BT_UINT16, BT_UINT16)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT32_UINT32, BT_UINT32, BT_UINT32)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT64_UINT64, BT_UINT64, BT_UINT64)\n DEF_FUNCTION_TYPE_1 (BT_FN_BOOL_INT, BT_BOOL, BT_INT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_PTR_CONST_PTR, BT_PTR, BT_CONST_PTR)\n+DEF_FUNCTION_TYPE_1 (BT_FN_CONST_PTR_CONST_PTR, BT_CONST_PTR, BT_CONST_PTR)\n \n DEF_POINTER_TYPE (BT_PTR_FN_VOID_PTR, BT_FN_VOID_PTR)\n \n@@ -346,6 +349,10 @@ DEF_FUNCTION_TYPE_2 (BT_FN_BOOL_SIZE_CONST_VPTR, BT_BOOL, BT_SIZE,\n \t\t     BT_CONST_VOLATILE_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_BOOL_INT_BOOL, BT_BOOL, BT_INT, BT_BOOL)\n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_UINT_UINT, BT_VOID, BT_UINT, BT_UINT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_PTR_CONST_PTR_SIZE, BT_PTR, BT_CONST_PTR, BT_SIZE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_PTR_CONST_PTR_CONST_PTR, BT_PTR, BT_CONST_PTR, BT_CONST_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTRPTR_CONST_PTR, BT_VOID, BT_PTR_PTR, BT_CONST_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_VOID_CONST_PTR_SIZE, BT_VOID, BT_CONST_PTR, BT_SIZE)\n \n DEF_POINTER_TYPE (BT_PTR_FN_VOID_PTR_PTR, BT_FN_VOID_PTR_PTR)\n \n@@ -428,6 +435,7 @@ DEF_FUNCTION_TYPE_3 (BT_FN_VOID_VPTR_I2_INT, BT_VOID, BT_VOLATILE_PTR, BT_I2, BT\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_VPTR_I4_INT, BT_VOID, BT_VOLATILE_PTR, BT_I4, BT_INT)\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_VPTR_I8_INT, BT_VOID, BT_VOLATILE_PTR, BT_I8, BT_INT)\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_VPTR_I16_INT, BT_VOID, BT_VOLATILE_PTR, BT_I16, BT_INT)\n+DEF_FUNCTION_TYPE_3 (BT_FN_PTR_CONST_PTR_CONST_PTR_SIZE, BT_PTR, BT_CONST_PTR, BT_CONST_PTR, BT_SIZE)\n \n DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_FILEPTR,\n \t\t     BT_SIZE, BT_CONST_PTR, BT_SIZE, BT_SIZE, BT_FILEPTR)"}, {"sha": "1b085450d9e5a5896323e1fcc3a9e205aa8ea2f8", "filename": "gcc/builtins.c", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=109719ebd4ee99f377256bd262941358c89a9635", "patch": "@@ -5646,7 +5646,18 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       && fcode != BUILT_IN_EXECVE\n       && fcode != BUILT_IN_ALLOCA\n       && fcode != BUILT_IN_ALLOCA_WITH_ALIGN\n-      && fcode != BUILT_IN_FREE)\n+      && fcode != BUILT_IN_FREE\n+      && fcode != BUILT_IN_CHKP_SET_PTR_BOUNDS\n+      && fcode != BUILT_IN_CHKP_INIT_PTR_BOUNDS\n+      && fcode != BUILT_IN_CHKP_NULL_PTR_BOUNDS\n+      && fcode != BUILT_IN_CHKP_COPY_PTR_BOUNDS\n+      && fcode != BUILT_IN_CHKP_NARROW_PTR_BOUNDS\n+      && fcode != BUILT_IN_CHKP_STORE_PTR_BOUNDS\n+      && fcode != BUILT_IN_CHKP_CHECK_PTR_LBOUNDS\n+      && fcode != BUILT_IN_CHKP_CHECK_PTR_UBOUNDS\n+      && fcode != BUILT_IN_CHKP_CHECK_PTR_BOUNDS\n+      && fcode != BUILT_IN_CHKP_GET_PTR_LBOUND\n+      && fcode != BUILT_IN_CHKP_GET_PTR_UBOUND)\n     return expand_call (exp, target, ignore);\n \n   /* The built-in function expanders test for target == const0_rtx\n@@ -6698,6 +6709,51 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       expand_builtin_cilk_pop_frame (exp);\n       return const0_rtx;\n \n+    case BUILT_IN_CHKP_INIT_PTR_BOUNDS:\n+    case BUILT_IN_CHKP_NULL_PTR_BOUNDS:\n+    case BUILT_IN_CHKP_COPY_PTR_BOUNDS:\n+      return expand_normal (CALL_EXPR_ARG (exp, 0));\n+\n+    case BUILT_IN_CHKP_CHECK_PTR_LBOUNDS:\n+    case BUILT_IN_CHKP_CHECK_PTR_UBOUNDS:\n+    case BUILT_IN_CHKP_CHECK_PTR_BOUNDS:\n+    case BUILT_IN_CHKP_SET_PTR_BOUNDS:\n+    case BUILT_IN_CHKP_NARROW_PTR_BOUNDS:\n+    case BUILT_IN_CHKP_STORE_PTR_BOUNDS:\n+    case BUILT_IN_CHKP_GET_PTR_LBOUND:\n+    case BUILT_IN_CHKP_GET_PTR_UBOUND:\n+      /* We allow user CHKP builtins if Pointer Bounds\n+\t Checker is off.  */\n+      if (!flag_check_pointer_bounds)\n+\t{\n+\t  if (fcode == BUILT_IN_CHKP_SET_PTR_BOUNDS\n+\t      || fcode == BUILT_IN_CHKP_NARROW_PTR_BOUNDS)\n+\t    return expand_normal (CALL_EXPR_ARG (exp, 0));\n+\t  else if (fcode == BUILT_IN_CHKP_GET_PTR_LBOUND)\n+\t    return expand_normal (size_zero_node);\n+\t  else if (fcode == BUILT_IN_CHKP_GET_PTR_UBOUND)\n+\t    return expand_normal (size_int (-1));\n+\t  else\n+\t    return const0_rtx;\n+\t}\n+      /* FALLTHROUGH */\n+\n+    case BUILT_IN_CHKP_BNDMK:\n+    case BUILT_IN_CHKP_BNDSTX:\n+    case BUILT_IN_CHKP_BNDCL:\n+    case BUILT_IN_CHKP_BNDCU:\n+    case BUILT_IN_CHKP_BNDLDX:\n+    case BUILT_IN_CHKP_BNDRET:\n+    case BUILT_IN_CHKP_INTERSECT:\n+    case BUILT_IN_CHKP_ARG_BND:\n+    case BUILT_IN_CHKP_NARROW:\n+    case BUILT_IN_CHKP_EXTRACT_LOWER:\n+    case BUILT_IN_CHKP_EXTRACT_UPPER:\n+      /* Software implementation of pointers checker is NYI.\n+\t Target support is required.  */\n+      error (\"Your target platform does not support -fcheck-pointers\");\n+      break;\n+\n     default:\t/* just do library call, if unknown builtin */\n       break;\n     }"}, {"sha": "e2d8849c76835f8cc13a903df73546a138a61f0b", "filename": "gcc/builtins.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=109719ebd4ee99f377256bd262941358c89a9635", "patch": "@@ -176,6 +176,12 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, BT_FN_INT_VAR, BT_LAST, \\\n   \t       false, false, false, ATTRS, false, flag_enable_cilkplus) \n \n+/* Builtin used by the implementation of Pointer Bounds Checker.  */\n+#undef DEF_CHKP_BUILTIN\n+#define DEF_CHKP_BUILTIN(ENUM, NAME, TYPE, ATTRS) \\\n+  DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,    \\\n+\t       true, true, false, ATTRS, true, true)\n+\n /* Define an attribute list for math functions that are normally\n    \"impure\" because some of them may write into global memory for\n    `errno'.  If !flag_errno_math they are instead \"const\".  */\n@@ -864,3 +870,6 @@ DEF_GCC_BUILTIN (BUILT_IN_LINE, \"LINE\", BT_FN_INT, ATTR_NOTHROW_LEAF_LIST)\n \n /* Cilk Plus builtins.  */\n #include \"cilkplus.def\"\n+\n+/* Pointer Bounds Checker builtins.  */\n+#include \"chkp-builtins.def\""}, {"sha": "5c2f56eb8bfe5ae2fe57da62e735167100240bd2", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=109719ebd4ee99f377256bd262941358c89a9635", "patch": "@@ -874,6 +874,11 @@ fbounds-check\n Common Report Var(flag_bounds_check)\n Generate code to check bounds before indexing arrays\n \n+fcheck-pointer-bounds\n+Common Report Var(flag_check_pointer_bounds)\n+Add Pointer Bounds Checker instrumentation.  fchkp-* flags are used to\n+control instrumentation.  Currently available for C, C++ and ObjC.\n+\n fbranch-count-reg\n Common Report Var(flag_branch_on_count_reg) Init(1) Optimization\n Replace add, compare, branch with branch on count register"}, {"sha": "8ca3137ae0fd71f04009d79cc86764a6803cacb6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=109719ebd4ee99f377256bd262941358c89a9635", "patch": "@@ -82,6 +82,7 @@ extensions, accepted by GCC in C90 mode and in C++.\n * x86 specific memory model extensions for transactional memory:: x86 memory models.\n * Object Size Checking:: Built-in functions for limited buffer overflow\n                         checking.\n+* Pointer Bounds Checker builtins:: Built-in functions for Pointer Bounds Checker.\n * Cilk Plus Builtins::  Built-in functions for the Cilk Plus language extension.\n * Other Builtins::      Other built-in functions.\n * Target Builtins::     Built-in functions specific to particular targets.\n@@ -7752,6 +7753,176 @@ format string @var{fmt}.  If the compiler is able to optimize them to\n @code{fputc} etc.@: functions, it does, otherwise the checking function\n is called and the @var{flag} argument passed to it.\n \n+@node Pointer Bounds Checker builtins\n+@section Pointer Bounds Checker Built-in Functions\n+@findex __builtin___bnd_set_ptr_bounds\n+@findex __builtin___bnd_narrow_ptr_bounds\n+@findex __builtin___bnd_copy_ptr_bounds\n+@findex __builtin___bnd_init_ptr_bounds\n+@findex __builtin___bnd_null_ptr_bounds\n+@findex __builtin___bnd_store_ptr_bounds\n+@findex __builtin___bnd_chk_ptr_lbounds\n+@findex __builtin___bnd_chk_ptr_ubounds\n+@findex __builtin___bnd_chk_ptr_bounds\n+@findex __builtin___bnd_get_ptr_lbound\n+@findex __builtin___bnd_get_ptr_ubound\n+\n+GCC provides a set of built-in functions to control Pointer Bounds Checker\n+instrumentation.  Note that all Pointer Bounds Checker builtins are allowed\n+to use even if you compile with Pointer Bounds Checker off.  But functions\n+behavior may differ in such case.\n+\n+@deftypefn {Built-in Function} void * __builtin___bnd_set_ptr_bounds (const void * @var{q}, size_t @var{size})\n+\n+This built-in function returns a new pointer with the value of @var{q}, and\n+associate it with the bounds [@var{q}, @var{q}+@var{size}-1].  With Pointer\n+Bounds Checker off built-in function just returns the first argument.\n+\n+@smallexample\n+extern void *__wrap_malloc (size_t n)\n+@{\n+  void *p = (void *)__real_malloc (n);\n+  if (!p) return __builtin___bnd_null_ptr_bounds (p);\n+  return __builtin___bnd_set_ptr_bounds (p, n);\n+@}\n+@end smallexample\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void * __builtin___bnd_narrow_ptr_bounds (const void * @var{p}, const void * @var{q}, size_t  @var{size})\n+\n+This built-in function returns a new pointer with the value of @var{p}\n+and associate it with the narrowed bounds formed by the intersection\n+of bounds associated with @var{q} and the [@var{p}, @var{p} + @var{size} - 1].\n+With Pointer Bounds Checker off built-in function just returns the first\n+argument.\n+\n+@smallexample\n+void init_objects (object *objs, size_t size)\n+@{\n+  size_t i;\n+  /* Initialize objects one-by-one passing pointers with bounds of an object,\n+     not the full array of objects.  */\n+  for (i = 0; i < size; i++)\n+    init_object (__builtin___bnd_narrow_ptr_bounds (objs + i, objs, sizeof(object)));\n+@}\n+@end smallexample\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void * __builtin___bnd_copy_ptr_bounds (const void * @var{q}, const void * @var{r})\n+\n+This built-in function returns a new pointer with the value of @var{q},\n+and associate it with the bounds already associated with pointer @var{r}.\n+With Pointer Bounds Checker off built-in function just returns the first\n+argument.\n+\n+@smallexample\n+/* Here is a way to get pointer to object's field but\n+   still with the full object's bounds.  */\n+int *field_ptr = __builtin___bnd_copy_ptr_bounds (&objptr->int_filed, objptr);\n+@end smallexample\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void * __builtin___bnd_init_ptr_bounds (const void * @var{q})\n+\n+This built-in function returns a new pointer with the value of @var{q}, and\n+associate it with INIT (allowing full memory access) bounds. With Pointer\n+Bounds Checker off built-in function just returns the first argument.\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void * __builtin___bnd_null_ptr_bounds (const void * @var{q})\n+\n+This built-in function returns a new pointer with the value of @var{q}, and\n+associate it with NULL (allowing no memory access) bounds. With Pointer\n+Bounds Checker off built-in function just returns the first argument.\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __builtin___bnd_store_ptr_bounds (const void ** @var{ptr_addr}, const void * @var{ptr_val})\n+\n+This built-in function stores the bounds associated with pointer @var{ptr_val}\n+and location @var{ptr_addr} into Bounds Table.  This can be useful to propagate\n+bounds from legacy code without touching the associated pointer's memory when\n+pointers were copied as integers.  With Pointer Bounds Checker off built-in\n+function call is ignored.\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_lbounds (const void * @var{q})\n+\n+This built-in function checks if the pointer @var{q} is within the lower\n+bound of its associated bounds.  With Pointer Bounds Checker off built-in\n+function call is ignored.\n+\n+@smallexample\n+extern void *__wrap_memset (void *dst, int c, size_t len)\n+@{\n+  if (len > 0)\n+    @{\n+      __builtin___bnd_chk_ptr_lbounds (dst);\n+      __builtin___bnd_chk_ptr_ubounds ((char *)dst + len - 1);\n+      __real_memset (dst, c, len);\n+    @}\n+  return dst;\n+@}\n+@end smallexample\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_ubounds (const void * @var{q})\n+\n+This built-in function checks if the pointer @var{q} is within the upper\n+bound of its associated bounds.  With Pointer Bounds Checker off built-in\n+function call is ignored.\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_bounds (const void * @var{q}, size_t @var{size})\n+\n+This built-in function checks if [@var{q}, @var{q} + @var{size} - 1] is within\n+the lower and upper bounds associated with @var{q}.  With Pointer Bounds Checker\n+off built-in function call is ignored.\n+\n+@smallexample\n+extern void *__wrap_memcpy (void *dst, const void *src, size_t n)\n+@{\n+  if (n > 0)\n+    @{\n+      __bnd_chk_ptr_bounds (dst, n);\n+      __bnd_chk_ptr_bounds (src, n);\n+      __real_memcpy (dst, src, n);\n+    @}\n+  return dst;\n+@}\n+@end smallexample\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} const void * __builtin___bnd_get_ptr_lbound (const void * @var{q})\n+\n+This built-in function returns the lower bound (which is a pointer) associated\n+with the pointer @var{q}.  This is at least useful for debugging using printf.\n+With Pointer Bounds Checker off built-in function returns 0.\n+\n+@smallexample\n+void *lb = __builtin___bnd_get_ptr_lbound (q);\n+void *ub = __builtin___bnd_get_ptr_ubound (q);\n+printf (\"q = %p  lb(q) = %p  ub(q) = %p\", q, lb, ub);\n+@end smallexample\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} const void * __builtin___bnd_get_ptr_ubound (const void * @var{q})\n+\n+This built-in function returns the upper bound (which is a pointer) associated\n+with the pointer @var{q}.  With Pointer Bounds Checker off built-in function\n+returns -1.\n+\n+@end deftypefn\n+\n @node Other Builtins\n @section Other Built-in Functions Provided by GCC\n @cindex built-in functions"}, {"sha": "f78912e09dbe1fea003b41b913600471875a75a5", "filename": "gcc/toplev.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109719ebd4ee99f377256bd262941358c89a9635/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=109719ebd4ee99f377256bd262941358c89a9635", "patch": "@@ -1282,6 +1282,15 @@ process_options (void)\n \t   \"and -ftree-loop-linear)\");\n #endif\n \n+  if (flag_check_pointer_bounds)\n+    {\n+      if (targetm.chkp_bound_mode () == VOIDmode)\n+\terror (\"-fcheck-pointers is not supported for this target\");\n+\n+      if (!lang_hooks.chkp_supported)\n+\tflag_check_pointer_bounds = 0;\n+    }\n+\n   /* One region RA really helps to decrease the code size.  */\n   if (flag_ira_region == IRA_REGION_AUTODETECT)\n     flag_ira_region"}]}