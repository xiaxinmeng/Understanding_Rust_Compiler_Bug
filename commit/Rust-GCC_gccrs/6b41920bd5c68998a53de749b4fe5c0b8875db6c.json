{"sha": "6b41920bd5c68998a53de749b4fe5c0b8875db6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI0MTkyMGJkNWM2ODk5OGE1M2RlNzQ5YjRmZTVjMGI4ODc1ZGI2Yw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-12T08:23:09Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-12T08:23:09Z"}, "message": "ASAN: clear DECL_NOT_GIMPLE_REG_P.\n\n\tPR sanitizer/95033\n\tPR sanitizer/95051\n\t* sanopt.c (sanitize_rewrite_addressable_params):\n\tClear DECL_NOT_GIMPLE_REG_P for argument.\n\tPR sanitizer/95033\n\tPR sanitizer/95051\n\t* g++.dg/asan/function-argument-4.C: New test.\n\t* gcc.dg/asan/pr95033.c: New test.\n\t* gcc.dg/asan/pr95051.c: New test.", "tree": {"sha": "3c6f8e229818dbe1a6860972f0c0d0a9e02ad9f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c6f8e229818dbe1a6860972f0c0d0a9e02ad9f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b41920bd5c68998a53de749b4fe5c0b8875db6c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl66XO0ACgkQTcGC3A+n\nN4VrSwf/Vm3TBhGqYtQtnT9voHYkMYcGyZiQUfOKpy9wTS9uNC7w0N8bd+ylHBoy\nf1reSrxw2gWJqr0xKTAFGGXvIy/Hq4Eo6niBpm43C81Ljee87ZXaCxdemGM9NVoG\n+kfwJpSu/hK436BNlGFGOjK2qlJhrHdV/JRJOenWodIaujFOYkUytJhF+0/Mn0n7\nT3tzpk3D4SS+T47rb6eFO8uaWrj3Bcd/pPqAIGmpAK/tJmWNJhndUczZQBNV0jGD\nHR3jTlWrXqIrwX4uKWS3wJkjT2g2h3/Jyo8OgZhtc8L3a/Ah47jTRFI8Rx2H7utz\ner0rnxDlbRb/6Aayo624r57uhGjMFg==\n=HI0A\n-----END PGP SIGNATURE-----", "payload": "tree 3c6f8e229818dbe1a6860972f0c0d0a9e02ad9f6\nparent 99b0c9ec47d563d1f780cb678c04d37c9835440f\nauthor Martin Liska <mliska@suse.cz> 1589271789 +0200\ncommitter Martin Liska <mliska@suse.cz> 1589271789 +0200\n\nASAN: clear DECL_NOT_GIMPLE_REG_P.\n\n\tPR sanitizer/95033\n\tPR sanitizer/95051\n\t* sanopt.c (sanitize_rewrite_addressable_params):\n\tClear DECL_NOT_GIMPLE_REG_P for argument.\n\tPR sanitizer/95033\n\tPR sanitizer/95051\n\t* g++.dg/asan/function-argument-4.C: New test.\n\t* gcc.dg/asan/pr95033.c: New test.\n\t* gcc.dg/asan/pr95051.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b41920bd5c68998a53de749b4fe5c0b8875db6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b41920bd5c68998a53de749b4fe5c0b8875db6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b41920bd5c68998a53de749b4fe5c0b8875db6c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b0c9ec47d563d1f780cb678c04d37c9835440f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b0c9ec47d563d1f780cb678c04d37c9835440f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b0c9ec47d563d1f780cb678c04d37c9835440f"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "72b56ad6f2ed363e055f96316eb5ee6bfb6c5250", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b41920bd5c68998a53de749b4fe5c0b8875db6c", "patch": "@@ -1,3 +1,10 @@\n+2020-05-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/95033\n+\tPR sanitizer/95051\n+\t* sanopt.c (sanitize_rewrite_addressable_params):\n+\tClear DECL_NOT_GIMPLE_REG_P for argument.\n+\n 2020-05-12  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/94980"}, {"sha": "6c3bce923785f8a2dcd324edc0ce7ceb5f633a0c", "filename": "gcc/sanopt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=6b41920bd5c68998a53de749b4fe5c0b8875db6c", "patch": "@@ -1158,6 +1158,7 @@ sanitize_rewrite_addressable_params (function *fun)\n \t  && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST)\n \t{\n \t  TREE_ADDRESSABLE (arg) = 0;\n+\t  DECL_NOT_GIMPLE_REG_P (arg) = 0;\n \t  /* The parameter is no longer addressable.  */\n \t  has_any_addressable_param = true;\n "}, {"sha": "05952acab929f3c5b3ec3e8f5d94a3fa4b82c558", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b41920bd5c68998a53de749b4fe5c0b8875db6c", "patch": "@@ -1,3 +1,11 @@\n+2020-05-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/95033\n+\tPR sanitizer/95051\n+\t* g++.dg/asan/function-argument-4.C: New test.\n+\t* gcc.dg/asan/pr95033.c: New test.\n+\t* gcc.dg/asan/pr95051.c: New test.\n+\n 2020-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/95063"}, {"sha": "cec1f1d788fc162426617deb776a6938fd2210a2", "filename": "gcc/testsuite/g++.dg/asan/function-argument-4.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Ffunction-argument-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Ffunction-argument-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Ffunction-argument-4.C?ref=6b41920bd5c68998a53de749b4fe5c0b8875db6c", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+#include <complex.h>\n+\n+static __attribute__ ((noinline)) long double\n+goo (long double _Complex *a)\n+{\n+  return crealf(*(volatile _Complex long double *)a);\n+}\n+\n+__attribute__ ((noinline)) float\n+foo (float _Complex arg)\n+{\n+  return goo ((long double _Complex *)&arg);\n+}\n+\n+int\n+main ()\n+{\n+  return foo (3 + 2 * I);\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-buffer-overflow on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"READ of size \\[0-9\\]* at.*\" }\n+// { dg-output \".*'arg' \\\\(line 13\\\\) <== Memory access at offset \\[0-9\\]* partially overflows this variable.*\" }"}, {"sha": "1228b7edcdb3fc92cf4ee6d9bc7c64a51f34f800", "filename": "gcc/testsuite/gcc.dg/asan/pr95033.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr95033.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr95033.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr95033.c?ref=6b41920bd5c68998a53de749b4fe5c0b8875db6c", "patch": "@@ -0,0 +1,13 @@\n+/* PR sanitizer/95033 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=address\" } */\n+\n+struct a\n+{\n+  int b;\n+};\n+\n+struct a c(_Complex d)\n+{\n+  return *(struct a *)&d;\n+}"}, {"sha": "ec41a831299b1393183b9ac967d997b761e775a1", "filename": "gcc/testsuite/gcc.dg/asan/pr95051.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr95051.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b41920bd5c68998a53de749b4fe5c0b8875db6c/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr95051.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr95051.c?ref=6b41920bd5c68998a53de749b4fe5c0b8875db6c", "patch": "@@ -0,0 +1,22 @@\n+/* PR sanitizer/95051 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=kernel-address --param=asan-stack=1 -O2\" } */\n+\n+struct a {\n+  struct {\n+    struct {\n+      int b;\n+    } c;\n+  };\n+};\n+struct d {\n+  struct {\n+    int e;\n+  } f;\n+}\n+\n+g(int h) {\n+  struct a *i;\n+  struct d *j = (struct d*)&h;\n+  i->c.b = j->f.e;\n+}"}]}