{"sha": "37348bf1059789a055e87113553bdda141db5cd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczNDhiZjEwNTk3ODlhMDU1ZTg3MTEzNTUzYmRkYTE0MWRiNWNkMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2009-01-20T17:10:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-01-20T17:10:40Z"}, "message": "re PR tree-optimization/38747 (Wrong code due to VIEW_CONVERT_EXPR)\n\n2009-01-20  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\tRichard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/38747\n\tPR tree-optimization/38748\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Disable the VCE\n\tconversion if the base address is an indirect reference and the\n\taliasing sets could cause issues.\n\n\t* gcc.dg/tree-ssa/struct-aliasing-1.c: New test.\n\t* gcc.dg/tree-ssa/struct-aliasing-2.c: Likewise.\n\t* gcc.c-torture/execute/struct-aliasing-1.c: Likewise.\n\nCo-Authored-By: Richard Guenther <rguenther@suse.de>\n\nFrom-SVN: r143523", "tree": {"sha": "724475a560b4dd068a277f34c223a8bf205b5837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/724475a560b4dd068a277f34c223a8bf205b5837"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37348bf1059789a055e87113553bdda141db5cd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37348bf1059789a055e87113553bdda141db5cd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37348bf1059789a055e87113553bdda141db5cd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37348bf1059789a055e87113553bdda141db5cd0/comments", "author": null, "committer": null, "parents": [{"sha": "d0a589040b272bdc1adafd3a268d0903d418e1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a589040b272bdc1adafd3a268d0903d418e1aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a589040b272bdc1adafd3a268d0903d418e1aa"}], "stats": {"total": 83, "additions": 79, "deletions": 4}, "files": [{"sha": "e4bb5c71b3a4c0cc2df75077b34337b38e6a709c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37348bf1059789a055e87113553bdda141db5cd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37348bf1059789a055e87113553bdda141db5cd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37348bf1059789a055e87113553bdda141db5cd0", "patch": "@@ -1,3 +1,12 @@\n+2009-01-20  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\tRichard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38747\n+\tPR tree-optimization/38748\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Disable the VCE\n+\tconversion if the base address is an indirect reference and the\n+\taliasing sets could cause issues.\n+\n 2009-01-20  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* common.opt (fgraphite, fgraphite-identity): Add comment for "}, {"sha": "4754d1a29983de2eb15e93c6625ad612353445e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37348bf1059789a055e87113553bdda141db5cd0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37348bf1059789a055e87113553bdda141db5cd0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37348bf1059789a055e87113553bdda141db5cd0", "patch": "@@ -1,3 +1,12 @@\n+2009-01-20  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\tRichard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38747\n+\tPR tree-optimization/38748\n+\t* gcc.dg/tree-ssa/struct-aliasing-1.c: New test.\n+\t* gcc.dg/tree-ssa/struct-aliasing-2.c: Likewise.\n+\t* gcc.c-torture/execute/struct-aliasing-1.c: Likewise.\n+\n 2009-01-20  Kees Cook  <kees@ubuntu.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "9786b44c2454a19e587e84f5b4baaf919e13364e", "filename": "gcc/testsuite/gcc.c-torture/execute/struct-aliasing-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37348bf1059789a055e87113553bdda141db5cd0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstruct-aliasing-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37348bf1059789a055e87113553bdda141db5cd0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstruct-aliasing-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstruct-aliasing-1.c?ref=37348bf1059789a055e87113553bdda141db5cd0", "patch": "@@ -0,0 +1,17 @@\n+struct S { float f; };\n+int __attribute__((noinline))\n+foo (int *r, struct S *p)\n+{\n+  int *q = (int *)&p->f;\n+  int i = *q;\n+  *r = 0;\n+  return i + *q;\n+}\n+extern void abort (void);\n+int main()\n+{\n+  int i = 1;\n+  if (foo (&i, (struct S *)&i) != 1)\n+    abort ();\n+  return (0);\n+}"}, {"sha": "78e92d769e4bde29c6b53082ac32cb06e653aab4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/struct-aliasing-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37348bf1059789a055e87113553bdda141db5cd0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstruct-aliasing-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37348bf1059789a055e87113553bdda141db5cd0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstruct-aliasing-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstruct-aliasing-1.c?ref=37348bf1059789a055e87113553bdda141db5cd0", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do \"compile\" } */\n+/* { dg-options \"-O2 -fdump-tree-fre\" } */\n+\n+struct S { float f; };\n+int __attribute__((noinline))\n+foo (float *r, struct S *p)\n+{\n+  int *q = (int *)&p->f;\n+  int i = *q;\n+  *r = 0.0;\n+  return i + *q;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\\\*q\" 1 \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "aa9e142bba07b5583d6f78eec64834bc2949cc72", "filename": "gcc/testsuite/gcc.dg/tree-ssa/struct-aliasing-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37348bf1059789a055e87113553bdda141db5cd0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstruct-aliasing-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37348bf1059789a055e87113553bdda141db5cd0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstruct-aliasing-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstruct-aliasing-2.c?ref=37348bf1059789a055e87113553bdda141db5cd0", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do \"compile\" } */\n+/* { dg-options \"-O2 -fdump-tree-fre\" } */\n+\n+struct S { unsigned f; };\n+\n+int\n+foo ( struct S *p)\n+{\n+  int *q = (int *)&p->f;\n+  int i = *q;\n+  return i + p->f;\n+}\n+\n+\n+/*  There should only be one load of p->f because fwprop can change *(int *)&p->f into just (int)p->f.  */\n+/* { dg-final { scan-tree-dump-times \"p_.\\\\\\(D\\\\\\)->f\" 1 \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */\n+"}, {"sha": "3826f1af598ce1cfa13d9e5e4b4ace9c3f80c30a", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37348bf1059789a055e87113553bdda141db5cd0/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37348bf1059789a055e87113553bdda141db5cd0/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=37348bf1059789a055e87113553bdda141db5cd0", "patch": "@@ -777,7 +777,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n       && operand_equal_p (TYPE_SIZE (TREE_TYPE (rhs)),\n \t\t\t  TYPE_SIZE (TREE_TYPE (TREE_OPERAND (def_rhs, 0))), 0)) \n    {\n-     tree new_rhs = unshare_expr (TREE_OPERAND (def_rhs, 0));\n+     tree def_rhs_base, new_rhs = unshare_expr (TREE_OPERAND (def_rhs, 0));\n      new_rhs = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (rhs), new_rhs);\n      if (TREE_CODE (new_rhs) != VIEW_CONVERT_EXPR)\n        {\n@@ -788,16 +788,23 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n \t new_rhs = force_gimple_operand_gsi (use_stmt_gsi, new_rhs, true, NULL,\n \t\t\t\t\t     true, GSI_NEW_STMT);\n \t gimple_assign_set_rhs1 (use_stmt, new_rhs);\n+\t tidy_after_forward_propagate_addr (use_stmt);\n+\t return true;\n        }\n-     else\n+     /* If the defining rhs comes from an indirect reference, then do not\n+        convert into a VIEW_CONVERT_EXPR.  */\n+     def_rhs_base = TREE_OPERAND (def_rhs, 0);\n+     while (handled_component_p (def_rhs_base))\n+       def_rhs_base = TREE_OPERAND (def_rhs_base, 0);\n+     if (!INDIRECT_REF_P (def_rhs_base))\n        {\n \t /* We may have arbitrary VIEW_CONVERT_EXPRs in a nested component\n \t    reference.  Place it there and fold the thing.  */\n \t *rhsp = new_rhs;\n \t fold_stmt_inplace (use_stmt);\n+\t tidy_after_forward_propagate_addr (use_stmt);\n+\t return true;\n        }\n-     tidy_after_forward_propagate_addr (use_stmt);\n-     return true;\n    }\n \n   /* If the use of the ADDR_EXPR is not a POINTER_PLUS_EXPR, there"}]}