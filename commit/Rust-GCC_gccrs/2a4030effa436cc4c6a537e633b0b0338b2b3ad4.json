{"sha": "2a4030effa436cc4c6a537e633b0b0338b2b3ad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE0MDMwZWZmYTQzNmNjNGM2YTUzN2U2MzNiMGIwMzM4YjJiM2FkNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-11-15T19:54:25Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-11-15T19:54:25Z"}, "message": "[PR c++/86246] ICE tsubst explicit operator call\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-11/msg01405.html\n\tPR c++/86246\n\tPR c++/87989\n\t* typeck.c (finish_class_member_access_expr): Conversion operator\n\tto dependent type is dependent.\n\n\t* g++.dg/template/pr86246.C: New.\n\t* g++.dg/template/pr87989.C: New.\n\nFrom-SVN: r266193", "tree": {"sha": "838ffd8472ee6e696bbb7f993e0daf1e708a05a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/838ffd8472ee6e696bbb7f993e0daf1e708a05a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a4030effa436cc4c6a537e633b0b0338b2b3ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4030effa436cc4c6a537e633b0b0338b2b3ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a4030effa436cc4c6a537e633b0b0338b2b3ad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4030effa436cc4c6a537e633b0b0338b2b3ad4/comments", "author": null, "committer": null, "parents": [{"sha": "f2935576e990ec5e383138622515d393f7227500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2935576e990ec5e383138622515d393f7227500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2935576e990ec5e383138622515d393f7227500"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "deec822b924f87e198694390be7ec6f6f3c41053", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4030effa436cc4c6a537e633b0b0338b2b3ad4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4030effa436cc4c6a537e633b0b0338b2b3ad4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a4030effa436cc4c6a537e633b0b0338b2b3ad4", "patch": "@@ -1,3 +1,10 @@\n+2018-11-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/86246\n+\tPR c++/87989\n+\t* typeck.c (finish_class_member_access_expr): Conversion operator\n+\tto dependent type is dependent.\n+\n 2018-11-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* constexpr.c (ensure_literal_type_for_constexpr_object): Use"}, {"sha": "81cb4057a5b424882bdc82392ab00a15fccabaa8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4030effa436cc4c6a537e633b0b0338b2b3ad4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4030effa436cc4c6a537e633b0b0338b2b3ad4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2a4030effa436cc4c6a537e633b0b0338b2b3ad4", "patch": "@@ -2884,7 +2884,12 @@ finish_class_member_access_expr (cp_expr object, tree name, bool template_p,\n \t     expression is dependent.  */\n \t  || (TREE_CODE (name) == SCOPE_REF\n \t      && TYPE_P (TREE_OPERAND (name, 0))\n-\t      && dependent_scope_p (TREE_OPERAND (name, 0))))\n+\t      && dependent_scope_p (TREE_OPERAND (name, 0)))\n+\t  /* If NAME is operator T where \"T\" is dependent, we can't\n+\t     lookup until we instantiate the T.  */\n+\t  || (TREE_CODE (name) == IDENTIFIER_NODE\n+\t      && IDENTIFIER_CONV_OP_P (name)\n+\t      && dependent_type_p (TREE_TYPE (name))))\n \t{\n \tdependent:\n \t  return build_min_nt_loc (UNKNOWN_LOCATION, COMPONENT_REF,"}, {"sha": "dc8625600dce690fcea15525e80c348017de786e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4030effa436cc4c6a537e633b0b0338b2b3ad4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4030effa436cc4c6a537e633b0b0338b2b3ad4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a4030effa436cc4c6a537e633b0b0338b2b3ad4", "patch": "@@ -1,3 +1,10 @@\n+2018-11-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/86246\n+\tPR c++/87989\n+\t* g++.dg/template/pr86246.C: New.\n+\t* g++.dg/template/pr87989.C: New.\n+\n 2018-11-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/constexpr-diag3.C: Check locations too.\n@@ -39,7 +46,7 @@\n \tPR tree-optimization/88031\n \t* gcc.dg/pr88031.c: New testcase.\n \n-2018-11-15  Wilco Dijkstra  <wdijkstr@arm.com>  \n+2018-11-15  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* gcc.target/aarch64/pr62178.c: Fix spaces.\n "}, {"sha": "43ce545c96cc25779aea70b4974752ff261d2df1", "filename": "gcc/testsuite/g++.dg/template/pr86246.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4030effa436cc4c6a537e633b0b0338b2b3ad4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr86246.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4030effa436cc4c6a537e633b0b0338b2b3ad4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr86246.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr86246.C?ref=2a4030effa436cc4c6a537e633b0b0338b2b3ad4", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile { target c++11 } }\n+// PR c++/86246 ICE in tsubst\n+\n+namespace std {\n+  template<typename T> struct is_class {\n+    static constexpr bool value = true;\n+  };\n+  template<> struct is_class<double> {\n+    static constexpr bool value = false;\n+  };\n+}\n+\n+class MyClass {\n+ public:\n+  operator double() const {\n+    return 1;\n+  }\n+  template<typename T>\n+  operator T() const {\n+    static_assert(std::is_class<T>::value, \"problem\");\n+    return T();\n+  }\n+};\n+\n+template<typename T>\n+void SetValue(const MyClass& obj, T* value) {\n+  //  erroneously dispatched to operator T when T is double\n+  *value = obj.operator T();\n+}\n+\n+int main() {\n+  MyClass obj;\n+  // works fine\n+  obj.operator double ();\n+  double x;\n+  // error, when operator T is called in SetValue\n+  SetValue(obj, &x);\n+}"}, {"sha": "34e6e95dd67764915c7384b3b10439938724daf1", "filename": "gcc/testsuite/g++.dg/template/pr87989.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4030effa436cc4c6a537e633b0b0338b2b3ad4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr87989.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4030effa436cc4c6a537e633b0b0338b2b3ad4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr87989.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr87989.C?ref=2a4030effa436cc4c6a537e633b0b0338b2b3ad4", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/87989\n+// { dg-do link }\n+// Resolved to template instantiation rather than non-template fn.\n+\n+struct X {\n+  template <class T> operator T() const; // no definition\n+  operator float() const {return 0.f;}\n+};\n+\n+template <class T>\n+T f(const X &x) {\n+  // Resoved in error to X::operator float<float>() const`\n+  // instead of correct `X::operator float() const\n+  return x.operator T();\n+}\n+\n+int main ()\n+{\n+  return f<float>(X ());\n+}"}]}