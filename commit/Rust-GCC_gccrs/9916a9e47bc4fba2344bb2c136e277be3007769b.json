{"sha": "9916a9e47bc4fba2344bb2c136e277be3007769b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxNmE5ZTQ3YmM0ZmJhMjM0NGJiMmMxMzZlMjc3YmUzMDA3NzY5Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2010-11-18T18:56:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-11-18T18:56:29Z"}, "message": "re PR libstdc++/46455 (resource leaks due to missing destructors for mutexes and condvars)\n\n2010-11-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/46455\n\t* include/std/mutex: Define destructors for mutex types which use an\n\tinit function.\n\t* include/ext/concurrence.h: Likewise.\n\nFrom-SVN: r166917", "tree": {"sha": "105dd0ced7407acdcfd97c7b0f2b21cee51ddb0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/105dd0ced7407acdcfd97c7b0f2b21cee51ddb0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9916a9e47bc4fba2344bb2c136e277be3007769b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9916a9e47bc4fba2344bb2c136e277be3007769b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9916a9e47bc4fba2344bb2c136e277be3007769b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9916a9e47bc4fba2344bb2c136e277be3007769b/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9d84d0e001228601fb96718a31f2a72ae3baee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d84d0e001228601fb96718a31f2a72ae3baee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d84d0e001228601fb96718a31f2a72ae3baee5"}], "stats": {"total": 148, "additions": 132, "deletions": 16}, "files": [{"sha": "133e400e37019c9415446e1d04252725a6662f7b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9916a9e47bc4fba2344bb2c136e277be3007769b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9916a9e47bc4fba2344bb2c136e277be3007769b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9916a9e47bc4fba2344bb2c136e277be3007769b", "patch": "@@ -1,3 +1,10 @@\n+2010-11-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/46455\n+\t* include/std/mutex: Define destructors for mutex types which use an\n+\tinit function.\n+\t* include/ext/concurrence.h: Likewise.\n+\n 2010-11-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/26211 + N3168"}, {"sha": "b665b41107714b77fb0d78f3c28c4d8828b6f9ad", "filename": "libstdc++-v3/include/ext/concurrence.h", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9916a9e47bc4fba2344bb2c136e277be3007769b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9916a9e47bc4fba2344bb2c136e277be3007769b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h?ref=9916a9e47bc4fba2344bb2c136e277be3007769b", "patch": "@@ -36,6 +36,8 @@\n #include <exception>\n #include <bits/gthr.h> \n #include <bits/functexcept.h>\n+#include <bits/cpp_type_traits.h>\n+#include <ext/type_traits.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -161,6 +163,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif \n     }\n \n+#if __GTHREADS && ! defined __GTHREAD_MUTEX_INIT\n+    ~__mutex() \n+    { \n+      if (__gthread_active_p())\n+\t__gthread_mutex_destroy(&_M_mutex); \n+    }\n+#endif \n+\n     void lock()\n     {\n #if __GTHREADS\n@@ -211,6 +221,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif \n     }\n \n+#if __GTHREADS && ! defined __GTHREAD_RECURSIVE_MUTEX_INIT\n+    ~__recursive_mutex()\n+    {\n+      if (__gthread_active_p())\n+\t_S_destroy(&_M_mutex);\n+    }\n+#endif\n+\n     void lock()\n     { \n #if __GTHREADS\n@@ -234,7 +252,44 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     }\n \n     __gthread_recursive_mutex_t* gthread_recursive_mutex(void)\n-      { return &_M_mutex; }\n+    { return &_M_mutex; }\n+\n+#if __GTHREADS && ! defined __GTHREAD_RECURSIVE_MUTEX_INIT\n+    // FIXME: gthreads doesn't define __gthread_recursive_mutex_destroy\n+    // so we need to obtain a __gthread_mutex_t to destroy\n+  private:\n+    template<typename _Mx, typename _Rm>\n+      static void\n+      _S_destroy_win32(_Mx* __mx, _Rm const* __rmx)\n+      {\n+        __mx->counter = __rmx->counter;\n+        __mx->sema = __rmx->sema;\n+        __gthread_mutex_destroy(__mx);\n+      }\n+\n+    // matches a gthr-win32.h recursive mutex\n+    template<typename _Rm>\n+      static typename __enable_if<sizeof(&_Rm::sema), void>::__type\n+      _S_destroy(_Rm* __mx)\n+      {\n+        __gthread_mutex_t __tmp;\n+        _S_destroy_win32(&__tmp, __mx);\n+      }\n+\n+    // matches a recursive mutex with a member 'actual'\n+    template<typename _Rm>\n+      static typename __enable_if<sizeof(&_Rm::actual), void>::__type\n+      _S_destroy(_Rm* __mx)\n+      { __gthread_mutex_destroy(&__mx->actual); }\n+\n+    // matches when there's only one mutex type\n+    template<typename _Rm>\n+      static typename\n+      __enable_if<std::__are_same<_Rm, __gthread_mutex_t>::__value,\n+        void>::__type\n+      _S_destroy(_Rm* __mx)\n+      { __gthread_mutex_destroy(__mx); }\n+#endif\n   };\n \n   /// Scoped lock idiom.\n@@ -284,6 +339,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif \n     }\n \n+#if __GTHREADS && ! defined __GTHREAD_COND_INIT\n+    ~__cond() \n+    { \n+      if (__gthread_active_p())\n+\t__gthread_cond_destroy(&_M_cond); \n+    }\n+#endif \n+\n     void broadcast()\n     {\n #if __GTHREADS"}, {"sha": "b9b924c4650530294ea8546ee6b6e63a0411b4a6", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 61, "deletions": 15, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9916a9e47bc4fba2344bb2c136e277be3007769b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9916a9e47bc4fba2344bb2c136e277be3007769b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=9916a9e47bc4fba2344bb2c136e277be3007769b", "patch": "@@ -75,6 +75,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n       __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);\n     }\n+\n+    ~mutex() { __gthread_mutex_destroy(&_M_mutex); }\n #endif\n \n     mutex(const mutex&) = delete;\n@@ -109,6 +111,45 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return &_M_mutex; }\n   };\n \n+#ifndef __GTHREAD_RECURSIVE_MUTEX_INIT\n+  // FIXME: gthreads doesn't define __gthread_recursive_mutex_destroy\n+  // so we need to obtain a __gthread_mutex_t to destroy\n+  class __destroy_recursive_mutex\n+  {\n+    template<typename _Mx, typename _Rm>\n+      static void\n+      _S_destroy_win32(_Mx* __mx, _Rm const* __rmx)\n+      {\n+        __mx->counter = __rmx->counter;\n+        __mx->sema = __rmx->sema;\n+        __gthread_mutex_destroy(__mx);\n+      }\n+\n+  public:\n+    // matches a gthr-win32.h recursive mutex\n+    template<typename _Rm>\n+      static typename enable_if<sizeof(&_Rm::sema), void>::type\n+      _S_destroy(_Rm* __mx)\n+      {\n+        __gthread_mutex_t __tmp;\n+        _S_destroy_win32(&__tmp, __mx);\n+      }\n+\n+    // matches a recursive mutex with a member 'actual'\n+    template<typename _Rm>\n+      static typename enable_if<sizeof(&_Rm::actual), void>::type\n+      _S_destroy(_Rm* __mx)\n+      { __gthread_mutex_destroy(&__mx->actual); }\n+\n+    // matches when there's only one mutex type\n+    template<typename _Rm>\n+      static\n+      typename enable_if<is_same<_Rm, __gthread_mutex_t>::value, void>::type\n+      _S_destroy(_Rm* __mx)\n+      { __gthread_mutex_destroy(__mx); }\n+  };\n+#endif\n+\n   /// recursive_mutex\n   class recursive_mutex\n   {\n@@ -118,17 +159,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   public:\n     typedef __native_type* \t\t\tnative_handle_type;\n \n+#ifdef __GTHREAD_RECURSIVE_MUTEX_INIT\n+    recursive_mutex() : _M_mutex(__GTHREAD_RECURSIVE_MUTEX_INIT) { }\n+#else\n     recursive_mutex()\n     {\n       // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n-#ifdef __GTHREAD_RECURSIVE_MUTEX_INIT\n-      __native_type __tmp = __GTHREAD_RECURSIVE_MUTEX_INIT;\n-      _M_mutex = __tmp;\n-#else\n       __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION(&_M_mutex);\n-#endif\n     }\n \n+    ~recursive_mutex()\n+    { __destroy_recursive_mutex::_S_destroy(&_M_mutex); }\n+#endif\n+\n     recursive_mutex(const recursive_mutex&) = delete;\n     recursive_mutex& operator=(const recursive_mutex&) = delete;\n \n@@ -177,16 +220,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   public:\n     typedef __native_type* \t\t  \tnative_handle_type;\n \n-    timed_mutex()\n-    {\n #ifdef __GTHREAD_MUTEX_INIT\n-      __native_type __tmp = __GTHREAD_MUTEX_INIT;\n-      _M_mutex = __tmp;\n+    timed_mutex() : _M_mutex(__GTHREAD_MUTEX_INIT) { }\n #else\n+    timed_mutex()\n+    {\n       __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);\n-#endif\n     }\n \n+    ~timed_mutex() { __gthread_mutex_destroy(&_M_mutex); }\n+#endif\n+\n     timed_mutex(const timed_mutex&) = delete;\n     timed_mutex& operator=(const timed_mutex&) = delete;\n \n@@ -281,17 +325,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   public:\n     typedef __native_type* \t\t\tnative_handle_type;\n \n+#ifdef __GTHREAD_RECURSIVE_MUTEX_INIT\n+    recursive_timed_mutex() : _M_mutex(__GTHREAD_RECURSIVE_MUTEX_INIT) { }\n+#else\n     recursive_timed_mutex()\n     {\n       // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n-#ifdef __GTHREAD_RECURSIVE_MUTEX_INIT\n-      __native_type __tmp = __GTHREAD_RECURSIVE_MUTEX_INIT;\n-      _M_mutex = __tmp;\n-#else\n       __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION(&_M_mutex);\n-#endif\n     }\n \n+    ~recursive_timed_mutex()\n+    { __destroy_recursive_mutex::_S_destroy(&_M_mutex); }\n+#endif\n+\n     recursive_timed_mutex(const recursive_timed_mutex&) = delete;\n     recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;\n "}]}