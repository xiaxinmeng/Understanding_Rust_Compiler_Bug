{"sha": "4e9efe546e1443219d13d8fab76adaed392cd6c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5ZWZlNTQ2ZTE0NDMyMTlkMTNkOGZhYjc2YWRhZWQzOTJjZDZjNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-08-02T14:28:14Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-08-02T14:28:14Z"}, "message": "i386.c (legitimate_address_p): Accept other bases than pic_offset_table_rtx for GOTOFF constructs.\n\n\t* i386.c (legitimate_address_p): Accept other bases than\n\tpic_offset_table_rtx for GOTOFF constructs.\n\nFrom-SVN: r35424", "tree": {"sha": "718108b3040b599162643b2f30c9b1f8400a4fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/718108b3040b599162643b2f30c9b1f8400a4fae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e9efe546e1443219d13d8fab76adaed392cd6c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9efe546e1443219d13d8fab76adaed392cd6c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9efe546e1443219d13d8fab76adaed392cd6c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9efe546e1443219d13d8fab76adaed392cd6c7/comments", "author": null, "committer": null, "parents": [{"sha": "ca4ae08d95126ce975cf5cb82dc77fbc2b839bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4ae08d95126ce975cf5cb82dc77fbc2b839bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4ae08d95126ce975cf5cb82dc77fbc2b839bfc"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "503f008dc615b50bb67106eabfe266dcf8b6a7e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9efe546e1443219d13d8fab76adaed392cd6c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9efe546e1443219d13d8fab76adaed392cd6c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e9efe546e1443219d13d8fab76adaed392cd6c7", "patch": "@@ -1,3 +1,8 @@\n+Wed Aug  2 16:26:15 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (legitimate_address_p): Accept other bases than\n+\tpic_offset_table_rtx for GOTOFF constructs.\n+\n Wed Aug  2 15:59:34 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (shift to lea splitter): Use const_int_operand."}, {"sha": "68a78e933145bcb9065a90f7b0835cead6b877c3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9efe546e1443219d13d8fab76adaed392cd6c7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9efe546e1443219d13d8fab76adaed392cd6c7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4e9efe546e1443219d13d8fab76adaed392cd6c7", "patch": "@@ -2506,14 +2506,27 @@ legitimate_address_p (mode, addr, strict)\n \t      goto error;\n \t    }\n \n-\t  /* Verify that a symbolic pic displacement includes \n-\t     the pic_offset_table_rtx register.  */\n-\t  if (base != pic_offset_table_rtx\n-\t      && (index != pic_offset_table_rtx || scale != 1))\n-\t    {\n-\t      reason = \"pic displacement against invalid base\";\n-\t      goto error;\n-\t    }\n+          /* This code used to verify that a symbolic pic displacement\n+\t     includes the pic_offset_table_rtx register. \n+\t    \n+\t     While this is good idea, unfortunately these constructs may\n+\t     be created by \"adds using lea\" optimization for incorrect\n+\t     code like:\n+\n+\t     int a;\n+\t     int foo(int i)\n+\t       {\n+\t         return *(&a+i);\n+\t       }\n+\n+\t     This code nonsential, but results in addressing\n+\t     GOT table with pic_offset_table_rtx base.  We can't\n+\t     just refuse it easilly, since it gets matched by\n+\t     \"addsi3\" pattern, that later gets split to lea in the\n+\t     case output register differs from input.  While this\n+\t     can be handled by separate addsi pattern for this case\n+\t     that never results in lea, this seems to be easier and\n+\t     correct fix for crash to disable this test.  */\n \t}\n       else if (HALF_PIC_P ())\n \t{"}]}