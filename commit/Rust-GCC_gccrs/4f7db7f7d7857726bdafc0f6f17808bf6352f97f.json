{"sha": "4f7db7f7d7857726bdafc0f6f17808bf6352f97f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY3ZGI3ZjdkNzg1NzcyNmJkYWZjMGY2ZjE3ODA4YmY2MzUyZjk3Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-19T22:14:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-19T22:14:35Z"}, "message": "tree-cfg.c (reinstall_phi_args): New.\n\n\t* tree-cfg.c (reinstall_phi_args): New.\n\t(tree_split_edge): Use it after redirecting an edge.  Don't\n\tmodify PHI_ARG_EDGE.\n\nFrom-SVN: r90940", "tree": {"sha": "568646c49f6870aa2d397a8a2e4daa11db9ab211", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/568646c49f6870aa2d397a8a2e4daa11db9ab211"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f7db7f7d7857726bdafc0f6f17808bf6352f97f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f7db7f7d7857726bdafc0f6f17808bf6352f97f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f7db7f7d7857726bdafc0f6f17808bf6352f97f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f7db7f7d7857726bdafc0f6f17808bf6352f97f/comments", "author": null, "committer": null, "parents": [{"sha": "1d8a9009f57e41974a445e50660e3d9ed7c8f182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8a9009f57e41974a445e50660e3d9ed7c8f182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d8a9009f57e41974a445e50660e3d9ed7c8f182"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "d6f9f790cc54fd76c8d6fed1105fbd3a569afe36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f7db7f7d7857726bdafc0f6f17808bf6352f97f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f7db7f7d7857726bdafc0f6f17808bf6352f97f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f7db7f7d7857726bdafc0f6f17808bf6352f97f", "patch": "@@ -1,3 +1,9 @@\n+2004-11-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-cfg.c (reinstall_phi_args): New.\n+\t(tree_split_edge): Use it after redirecting an edge.  Don't\n+\tmodify PHI_ARG_EDGE.\n+\n 2004-11-19  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* tree-vectorizer.c (slpeel_verify_cfg_after_peeling): Define only"}, {"sha": "337463c0e39213d4bb2a7c6e040f4b9a531e45d2", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f7db7f7d7857726bdafc0f6f17808bf6352f97f/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f7db7f7d7857726bdafc0f6f17808bf6352f97f/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=4f7db7f7d7857726bdafc0f6f17808bf6352f97f", "patch": "@@ -3113,6 +3113,31 @@ bsi_insert_on_edge_immediate (edge e, tree stmt)\n \t     Tree specific functions for CFG manipulation\n ---------------------------------------------------------------------------*/\n \n+/* Reinstall those PHI arguments queued in OLD_EDGE to NEW_EDGE.  */\n+\n+static void\n+reinstall_phi_args (edge new_edge, edge old_edge)\n+{\n+  tree var, phi;\n+\n+  if (!PENDING_STMT (old_edge))\n+    return;\n+  \n+  for (var = PENDING_STMT (old_edge), phi = phi_nodes (new_edge->dest);\n+       var && phi;\n+       var = TREE_CHAIN (var), phi = PHI_CHAIN (phi))\n+    {\n+      tree result = TREE_PURPOSE (var);\n+      tree arg = TREE_VALUE (var);\n+\n+      gcc_assert (result == PHI_RESULT (phi));\n+\n+      add_phi_arg (&phi, arg, new_edge);\n+    }\n+\n+  PENDING_STMT (old_edge) = NULL;\n+}\n+\n /* Split a (typically critical) edge EDGE_IN.  Return the new block.\n    Abort on abnormal edges.  */\n \n@@ -3121,8 +3146,6 @@ tree_split_edge (edge edge_in)\n {\n   basic_block new_bb, after_bb, dest, src;\n   edge new_edge, e;\n-  tree phi;\n-  int i, num_elem;\n   edge_iterator ei;\n \n   /* Abnormal edges cannot be split.  */\n@@ -3149,23 +3172,9 @@ tree_split_edge (edge edge_in)\n   new_edge->probability = REG_BR_PROB_BASE;\n   new_edge->count = edge_in->count;\n \n-  /* Find all the PHI arguments on the original edge, and change them to\n-     the new edge.  Do it before redirection, so that the argument does not\n-     get removed.  */\n-  for (phi = phi_nodes (dest); phi; phi = PHI_CHAIN (phi))\n-    {\n-      num_elem = PHI_NUM_ARGS (phi);\n-      for (i = 0; i < num_elem; i++)\n-\tif (PHI_ARG_EDGE (phi, i) == edge_in)\n-\t  {\n-\t    PHI_ARG_EDGE (phi, i) = new_edge;\n-\t    break;\n-\t  }\n-    }\n-\n   e = redirect_edge_and_branch (edge_in, new_bb);\n   gcc_assert (e);\n-  gcc_assert (!PENDING_STMT (edge_in));\n+  reinstall_phi_args (new_edge, e);\n \n   return new_bb;\n }"}]}