{"sha": "efe5143f896d224c7b0811d9ee42161ac7c4171c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZlNTE0M2Y4OTZkMjI0YzdiMDgxMWQ5ZWU0MjE2MWFjN2M0MTcxYw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-08-05T12:53:01Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-08-05T12:53:01Z"}, "message": "Handle new operators with no arguments in DCE.\n\n2019-08-05  Martin Liska  <mliska@suse.cz>\n\n\tPR c++/91334\n\t* tree-ssa-dce.c (propagate_necessity): Handle new operators\n\twith not arguments.\n\t(eliminate_unnecessary_stmts): Likewise.\n2019-08-05  Martin Liska  <mliska@suse.cz>\n\n\tPR c++/91334\n\t* g++.dg/torture/pr91334.C: New test.\n\nFrom-SVN: r274115", "tree": {"sha": "8b78b51ea36cdfbfae76a968ca5a3af62ae6b9ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b78b51ea36cdfbfae76a968ca5a3af62ae6b9ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efe5143f896d224c7b0811d9ee42161ac7c4171c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe5143f896d224c7b0811d9ee42161ac7c4171c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe5143f896d224c7b0811d9ee42161ac7c4171c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe5143f896d224c7b0811d9ee42161ac7c4171c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2001d445a5ff419c27241019c85f1e033d89d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2001d445a5ff419c27241019c85f1e033d89d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2001d445a5ff419c27241019c85f1e033d89d67"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "892f7aa5ef1c7357fc7c9b9b309c0c4eca9eec69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5143f896d224c7b0811d9ee42161ac7c4171c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5143f896d224c7b0811d9ee42161ac7c4171c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efe5143f896d224c7b0811d9ee42161ac7c4171c", "patch": "@@ -1,3 +1,10 @@\n+2019-08-05  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/91334\n+\t* tree-ssa-dce.c (propagate_necessity): Handle new operators\n+\twith not arguments.\n+\t(eliminate_unnecessary_stmts): Likewise.\n+\n 2019-08-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/91169"}, {"sha": "cff940e0b28883c6c707e414ba7f4547c8fc80a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5143f896d224c7b0811d9ee42161ac7c4171c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5143f896d224c7b0811d9ee42161ac7c4171c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efe5143f896d224c7b0811d9ee42161ac7c4171c", "patch": "@@ -1,3 +1,8 @@\n+2019-08-05  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/91334\n+\t* g++.dg/torture/pr91334.C: New test.\n+\n 2019-08-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/91169"}, {"sha": "ba79d712b0793eae5607edea1abde42b533342ef", "filename": "gcc/testsuite/g++.dg/torture/pr91334.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5143f896d224c7b0811d9ee42161ac7c4171c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr91334.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5143f896d224c7b0811d9ee42161ac7c4171c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr91334.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr91334.C?ref=efe5143f896d224c7b0811d9ee42161ac7c4171c", "patch": "@@ -0,0 +1,14 @@\n+/* PR c++/91334.  */\n+/* { dg-do compile } */\n+\n+#include <new>\n+#include <stdlib.h>\n+\n+struct A {\n+  A() { throw 0; }\n+  void* operator new(size_t size, double = 0.0) { return ::operator new(size);}\n+  void operator delete(void* p, double) { exit(0); }\n+  void operator delete(void* p) { abort(); }\n+};\n+\n+int main() { try { new A; } catch(...) {} }"}, {"sha": "afb7bd9dedc622112bcc56c9f0b9f6a06e4e4a9f", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5143f896d224c7b0811d9ee42161ac7c4171c/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5143f896d224c7b0811d9ee42161ac7c4171c/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=efe5143f896d224c7b0811d9ee42161ac7c4171c", "patch": "@@ -810,6 +810,11 @@ propagate_necessity (bool aggressive)\n \t  if (is_delete_operator\n \t      || gimple_call_builtin_p (stmt, BUILT_IN_FREE))\n \t    {\n+\t      /* It can happen that a user delete operator has the pointer\n+\t\t argument optimized out already.  */\n+\t      if (gimple_call_num_args (stmt) == 0)\n+\t\tcontinue;\n+\n \t      tree ptr = gimple_call_arg (stmt, 0);\n \t      gimple *def_stmt;\n \t      tree def_callee;\n@@ -1323,13 +1328,18 @@ eliminate_unnecessary_stmts (void)\n \t\t  || (is_gimple_call (stmt)\n \t\t      && gimple_call_operator_delete_p (as_a <gcall *> (stmt)))))\n \t    {\n-\t      tree ptr = gimple_call_arg (stmt, 0);\n-\t      if (TREE_CODE (ptr) == SSA_NAME)\n+\t      /* It can happen that a user delete operator has the pointer\n+\t\t argument optimized out already.  */\n+\t      if (gimple_call_num_args (stmt) > 0)\n \t\t{\n-\t\t  gimple *def_stmt = SSA_NAME_DEF_STMT (ptr);\n-\t\t  if (!gimple_nop_p (def_stmt)\n-\t\t      && !gimple_plf (def_stmt, STMT_NECESSARY))\n-\t\t    gimple_set_plf (stmt, STMT_NECESSARY, false);\n+\t\t  tree ptr = gimple_call_arg (stmt, 0);\n+\t\t  if (TREE_CODE (ptr) == SSA_NAME)\n+\t\t    {\n+\t\t      gimple *def_stmt = SSA_NAME_DEF_STMT (ptr);\n+\t\t      if (!gimple_nop_p (def_stmt)\n+\t\t\t  && !gimple_plf (def_stmt, STMT_NECESSARY))\n+\t\t\tgimple_set_plf (stmt, STMT_NECESSARY, false);\n+\t\t    }\n \t\t}\n \t    }\n "}]}