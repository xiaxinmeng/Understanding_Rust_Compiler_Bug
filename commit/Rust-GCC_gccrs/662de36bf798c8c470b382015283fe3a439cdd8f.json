{"sha": "662de36bf798c8c470b382015283fe3a439cdd8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYyZGUzNmJmNzk4YzhjNDcwYjM4MjAxNTI4M2ZlM2E0MzljZGQ4Zg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-12-15T16:10:37Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-12-15T16:10:37Z"}, "message": "Add the -fdebug-aux-vars flag to debug variables generated by Fortran.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/90207\n\t* invoke.texi: Document -fdebug-aux-vars.\n\t* lang.opt: Add -fdebug-aux-vars.\n\t* trans.c (MAX_PREFIX_LEN): New macro.\n\t(create_var_debug_raw): New function.\n\t(gfc_create_var_np): Call create_var_debug_raw if\n\tflag_debug_aux_vars is set.", "tree": {"sha": "0900c00b3911e3d501b1224034e403f807575859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0900c00b3911e3d501b1224034e403f807575859"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/662de36bf798c8c470b382015283fe3a439cdd8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/662de36bf798c8c470b382015283fe3a439cdd8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/662de36bf798c8c470b382015283fe3a439cdd8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/662de36bf798c8c470b382015283fe3a439cdd8f/comments", "author": null, "committer": null, "parents": [{"sha": "4e096e0ff8c428572353a519cdf8726ef3f70f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e096e0ff8c428572353a519cdf8726ef3f70f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e096e0ff8c428572353a519cdf8726ef3f70f73"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "069ccd339f3da13c51c36e6430111782f62f9c0f", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662de36bf798c8c470b382015283fe3a439cdd8f/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662de36bf798c8c470b382015283fe3a439cdd8f/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=662de36bf798c8c470b382015283fe3a439cdd8f", "patch": "@@ -160,7 +160,7 @@ and warnings}.\n @item Debugging Options\n @xref{Debugging Options,,Options for debugging your program or GNU Fortran}.\n @gccoptlist{-fbacktrace -fdump-fortran-optimized -fdump-fortran-original @gol\n--fdump-fortran-global -fdump-parse-tree -ffpe-trap=@var{list} @gol\n+-fdebug-aux-vars -fdump-fortran-global -fdump-parse-tree -ffpe-trap=@var{list} @gol\n -ffpe-summary=@var{list}\n }\n \n@@ -1219,6 +1219,15 @@ change between releases. This option may also generate internal\n compiler errors for features which have only recently been added. This\n option is deprecated; use @code{-fdump-fortran-original} instead.\n \n+@item -fdebug-aux-vars\n+@opindex @code{fdebug-aux-vars}\n+Renames internal variables created by the gfortran front end and makes\n+them accessible to a debugger.  The name of the internal variables then\n+start with upper-case letters followed by an underscore.  This option is\n+useful for debugging the compiler's code generation together with\n+@code{-fdump-tree-original} and enabling debugging of the executable\n+program by using @code{-g} or @code{-ggdb3}.\n+\n @item -fdump-fortran-global\n @opindex @code{fdump-fortran-global}\n Output a list of the global identifiers after translating into"}, {"sha": "57b0264458eead6d29a8c195097cff1973b40362", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662de36bf798c8c470b382015283fe3a439cdd8f/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662de36bf798c8c470b382015283fe3a439cdd8f/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=662de36bf798c8c470b382015283fe3a439cdd8f", "patch": "@@ -452,6 +452,10 @@ fd-lines-as-comments\n Fortran RejectNegative\n Treat lines with 'D' in column one as comments.\n \n+fdebug-aux-vars\n+Fortran Var(flag_debug_aux_vars)\n+Issue debug information for compiler-generated auxiliary variables.\n+\n fdec\n Fortran Var(flag_dec)\n Enable all DEC language extensions."}, {"sha": "ca0b10ca73d7f040f2c2d111b8eade2d4412f675", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662de36bf798c8c470b382015283fe3a439cdd8f/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662de36bf798c8c470b382015283fe3a439cdd8f/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=662de36bf798c8c470b382015283fe3a439cdd8f", "patch": "@@ -73,13 +73,55 @@ gfc_advance_chain (tree t, int n)\n   return t;\n }\n \n+static int num_var;\n+\n+#define MAX_PREFIX_LEN 20\n+\n+static tree\n+create_var_debug_raw (tree type, const char *prefix)\n+{\n+  /* Space for prefix + \"_\" + 10-digit-number + \\0.  */\n+  char name_buf[MAX_PREFIX_LEN + 1 + 10 + 1];\n+  tree t;\n+  int i;\n+\n+  if (prefix == NULL)\n+    prefix = \"gfc\";\n+  else\n+    gcc_assert (strlen (prefix) <= MAX_PREFIX_LEN);\n+\n+  for (i = 0; prefix[i] != 0; i++)\n+    name_buf[i] = gfc_wide_toupper (prefix[i]);\n+\n+  snprintf (name_buf + i, sizeof (name_buf) - i, \"_%d\", num_var++);\n+\n+  t = build_decl (input_location, VAR_DECL, get_identifier (name_buf), type);\n+\n+  /* We want debug info for it.  */\n+  DECL_IGNORED_P (t) = 0;\n+  /* It should not be nameless.  */\n+  DECL_NAMELESS (t) = 0;\n+\n+  /* Make the variable writable.  */\n+  TREE_READONLY (t) = 0;\n+\n+  DECL_EXTERNAL (t) = 0;\n+  TREE_STATIC (t) = 0;\n+  TREE_USED (t) = 1;\n+\n+  return t;\n+}\n+\n /* Creates a variable declaration with a given TYPE.  */\n \n tree\n gfc_create_var_np (tree type, const char *prefix)\n {\n   tree t;\n \n+  if (flag_debug_aux_vars)\n+    return create_var_debug_raw (type, prefix);\n+\n   t = create_tmp_var_raw (type, prefix);\n \n   /* No warnings for anonymous variables.  */"}]}