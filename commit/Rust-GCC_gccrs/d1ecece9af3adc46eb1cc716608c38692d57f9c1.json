{"sha": "d1ecece9af3adc46eb1cc716608c38692d57f9c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFlY2VjZTlhZjNhZGM0NmViMWNjNzE2NjA4YzM4NjkyZDU3ZjljMQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-06-08T22:04:11Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-06-08T22:04:11Z"}, "message": "re PR fortran/85631 (Runtime error message array bound mismatch with nonzero optimization)\n\n2018-06-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/85631\n\t* trans.h (gfc_ss): Add field no_bounds_check.\n\t* trans-array.c (gfc_conv_ss_startstride): If flag_realloc_lhs and\n\tss->no_bounds_check is set, do not use runtime checks.\n\t* trans-expr.c (gfc_trans_assignment_1): Set lss->no_bounds_check\n\tfor reallocatable lhs.\n\n2018-06-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/85631\n\t* gfortran.dg/bounds_check_20.f90: New test.\n\nFrom-SVN: r261348", "tree": {"sha": "e24f8e9128ee4c3b371e623ecdbdba86ba21bc63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e24f8e9128ee4c3b371e623ecdbdba86ba21bc63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1ecece9af3adc46eb1cc716608c38692d57f9c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ecece9af3adc46eb1cc716608c38692d57f9c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ecece9af3adc46eb1cc716608c38692d57f9c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ecece9af3adc46eb1cc716608c38692d57f9c1/comments", "author": null, "committer": null, "parents": [{"sha": "058872eaadac43dcf75839ba6b951619fea14fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058872eaadac43dcf75839ba6b951619fea14fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058872eaadac43dcf75839ba6b951619fea14fe1"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "dbda6ef58d66972dcd5e97443a977d10fba62ddc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d1ecece9af3adc46eb1cc716608c38692d57f9c1", "patch": "@@ -1,6 +1,15 @@\n+2018-06-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/85631\n+\t* trans.h (gfc_ss): Add field no_bounds_check.\n+\t* trans-array.c (gfc_conv_ss_startstride): If flag_realloc_lhs and\n+\tss->no_bounds_check is set, do not use runtime checks.\n+\t* trans-expr.c (gfc_trans_assignment_1): Set lss->no_bounds_check\n+\tfor reallocatable lhs.\n+\n 2018-06-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n-\tPR fortran/86059 \n+\tPR fortran/86059\n \t* array.c (match_array_cons_element): NULL() cannot be in an\n \tarray constructor.\n "}, {"sha": "97c47252435d87eca1552352c1dd645bb3c5af9c", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=d1ecece9af3adc46eb1cc716608c38692d57f9c1", "patch": "@@ -4304,7 +4304,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t}\n     }\n \n-  /* The rest is just runtime bound checking.  */\n+  /* The rest is just runtime bounds checking.  */\n   if (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n     {\n       stmtblock_t block;\n@@ -4334,7 +4334,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t    continue;\n \n \t  /* Catch allocatable lhs in f2003.  */\n-\t  if (flag_realloc_lhs && ss->is_alloc_lhs)\n+\t  if (flag_realloc_lhs && ss->no_bounds_check)\n \t    continue;\n \n \t  expr = ss_info->expr;"}, {"sha": "f85595177c65e6d0c03dd2622ae13c10c03929bd", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=d1ecece9af3adc46eb1cc716608c38692d57f9c1", "patch": "@@ -9982,12 +9982,15 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n \n   /* Walk the lhs.  */\n   lss = gfc_walk_expr (expr1);\n-  if (gfc_is_reallocatable_lhs (expr1)\n-      && !(expr2->expr_type == EXPR_FUNCTION\n-\t   && expr2->value.function.isym != NULL\n-\t   && !(expr2->value.function.isym->elemental\n-\t\t|| expr2->value.function.isym->conversion)))\n-    lss->is_alloc_lhs = 1;\n+  if (gfc_is_reallocatable_lhs (expr1))\n+    {\n+      lss->no_bounds_check = 1;\n+      if (!(expr2->expr_type == EXPR_FUNCTION\n+\t    && expr2->value.function.isym != NULL\n+\t    && !(expr2->value.function.isym->elemental\n+\t\t || expr2->value.function.isym->conversion)))\n+\tlss->is_alloc_lhs = 1;\n+    }\n \n   rss = NULL;\n "}, {"sha": "1813882fe366bbc02c917984b86f3b36d945abfc", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=d1ecece9af3adc46eb1cc716608c38692d57f9c1", "patch": "@@ -330,6 +330,7 @@ typedef struct gfc_ss\n   struct gfc_loopinfo *loop;\n \n   unsigned is_alloc_lhs:1;\n+  unsigned no_bounds_check:1;\n }\n gfc_ss;\n #define gfc_get_ss() XCNEW (gfc_ss)"}, {"sha": "8b9b37f19703b6a604be04f9ad4bb775289dac8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1ecece9af3adc46eb1cc716608c38692d57f9c1", "patch": "@@ -1,3 +1,8 @@\n+2018-06-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/85631\n+\t* gfortran.dg/bounds_check_20.f90: New test.\n+\n 2018-06-08  Carl Love  <cel@us.ibm.com>\n \n  \t* gcc.target/powerpc/p8vector-builtin-3.c: Add vec_pack test. Update\n@@ -16,7 +21,7 @@\n \n 2018-06-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n-\tPR fortran/86059 \n+\tPR fortran/86059\n \t* gfortran.dg/associate_30.f90: Remove code tested ...\n \t* gfortran.dg/pr67803.f90: Ditto.\n \t* gfortran.dg/pr67805.f90: Ditto."}, {"sha": "86a6d09aa277056606d3f091defd1d1bd17289b5", "filename": "gcc/testsuite/gfortran.dg/bounds_check_20.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ecece9af3adc46eb1cc716608c38692d57f9c1/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_20.f90?ref=d1ecece9af3adc46eb1cc716608c38692d57f9c1", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do  run }\n+! { dg-additional-options \"-fcheck=bounds -ffrontend-optimize\" }\n+! PR 85631 - this used to cause a runtime error with bounds checking.\n+module x\n+contains\n+  subroutine sub(a, b)\n+    real, dimension(:,:), intent(in) :: a\n+    real, dimension(:,:), intent(out), allocatable :: b\n+    b = transpose(a)\n+  end subroutine sub\n+end module x\n+\n+program main\n+  use x\n+  implicit none\n+  real, dimension(2,2) :: a\n+  real, dimension(:,:), allocatable :: b\n+  data a /-2., 3., -5., 7./\n+  call sub(a, b)\n+  if (any (b /= reshape([-2., -5., 3., 7.], shape(b)))) stop 1\n+  b = matmul(transpose(b), a)\n+  if (any (b /= reshape([-11., 15., -25.,  34.], shape(b)))) stop 2\n+end program\n+"}]}