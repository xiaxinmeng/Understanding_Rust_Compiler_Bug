{"sha": "28628ea69f5eea41ec4e678e7e66924a574943cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg2MjhlYTY5ZjVlZWE0MWVjNGU2NzhlN2U2NjkyNGE1NzQ5NDNjYg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2011-06-07T14:11:05Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2011-06-07T14:11:05Z"}, "message": "lto.c (uniquify_nodes): Move code to register decls to the loop that computes canonical types.\n\n\t* lto.c (uniquify_nodes): Move code to register decls to\n\tthe loop that computes canonical types.\n\nFrom-SVN: r174745", "tree": {"sha": "1c4ebb43692ab9d19dee42af45f66e94ccf6970f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c4ebb43692ab9d19dee42af45f66e94ccf6970f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28628ea69f5eea41ec4e678e7e66924a574943cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28628ea69f5eea41ec4e678e7e66924a574943cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28628ea69f5eea41ec4e678e7e66924a574943cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28628ea69f5eea41ec4e678e7e66924a574943cb/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1dcad079712bdc8e49d6bc2bcecc0034a4691402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcad079712bdc8e49d6bc2bcecc0034a4691402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dcad079712bdc8e49d6bc2bcecc0034a4691402"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "44265df529fa12970e290f95552c04e52f9a1762", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28628ea69f5eea41ec4e678e7e66924a574943cb/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28628ea69f5eea41ec4e678e7e66924a574943cb/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=28628ea69f5eea41ec4e678e7e66924a574943cb", "patch": "@@ -1,3 +1,8 @@\n+2011-06-07  Diego Novillo  <dnovillo@google.com>\n+\n+\t* lto.c (uniquify_nodes): Move code to register decls to\n+\tthe loop that computes canonical types.\n+\n 2011-06-07  Richard Guenther  <rguenther@suse.de>\n \n \t* lto-lang.c (lto_init): Do not set"}, {"sha": "6e49ee77b59cc353d5f98f91db6a6d30040ab4fc", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28628ea69f5eea41ec4e678e7e66924a574943cb/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28628ea69f5eea41ec4e678e7e66924a574943cb/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=28628ea69f5eea41ec4e678e7e66924a574943cb", "patch": "@@ -651,21 +651,13 @@ uniquify_nodes (struct data_in *data_in, unsigned from)\n   /* Go backwards because children streamed for the first time come\n      as part of their parents, and hence are created after them.  */\n \n-  /* First register all declarations and types in the cache.\n-     This makes sure to have the original structure in the type cycles\n-     when registering them and computing hashes.  */\n+  /* First register all the types in the cache.  This makes sure to\n+     have the original structure in the type cycles when registering\n+     them and computing hashes.  */\n   for (i = len; i-- > from;)\n     {\n       tree t = VEC_index (tree, cache->nodes, i);\n-\n-      if (t == NULL_TREE)\n-\tcontinue;\n-\n-      if (TREE_CODE (t) == VAR_DECL)\n-\tlto_register_var_decl_in_symtab (data_in, t);\n-      else if (TREE_CODE (t) == FUNCTION_DECL && !DECL_BUILT_IN (t))\n-\tlto_register_function_decl_in_symtab (data_in, t);\n-      else if (TYPE_P (t))\n+      if (t && TYPE_P (t))\n \tgimple_register_type (t);\n     }\n \n@@ -788,19 +780,23 @@ uniquify_nodes (struct data_in *data_in, unsigned from)\n \t}\n     }\n \n-  /* Finally compute the canonical type of t.  From this point\n-     there are no longer any types with TYPE_STRUCTURAL_EQUALITY_P\n-     and its type-based alias problems.  This step requires the\n-     TYPE_POINTER_TO lists being present, so make sure it is done\n-     last.  */\n+  /* Finally compute the canonical type of all TREE_TYPEs and register\n+     VAR_DECL and FUNCTION_DECL nodes in the symbol table.\n+     From this point there are no longer any types with\n+     TYPE_STRUCTURAL_EQUALITY_P and its type-based alias problems.\n+     This step requires the TYPE_POINTER_TO lists being present, so\n+     make sure it is done last.  */\n   for (i = len; i-- > from;)\n     {\n       tree t = VEC_index (tree, cache->nodes, i);\n-      if (!t\n-\t  || !TYPE_P (t))\n+      if (t == NULL_TREE)\n \tcontinue;\n \n-      if (!TYPE_CANONICAL (t))\n+      if (TREE_CODE (t) == VAR_DECL)\n+\tlto_register_var_decl_in_symtab (data_in, t);\n+      else if (TREE_CODE (t) == FUNCTION_DECL && !DECL_BUILT_IN (t))\n+\tlto_register_function_decl_in_symtab (data_in, t);\n+      else if (TYPE_P (t) && !TYPE_CANONICAL (t))\n \tTYPE_CANONICAL (t) = gimple_register_canonical_type (t);\n     }\n }"}]}