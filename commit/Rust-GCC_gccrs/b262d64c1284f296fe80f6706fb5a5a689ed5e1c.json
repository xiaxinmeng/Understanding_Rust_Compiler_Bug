{"sha": "b262d64c1284f296fe80f6706fb5a5a689ed5e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI2MmQ2NGMxMjg0ZjI5NmZlODBmNjcwNmZiNWE1YTY4OWVkNWUxYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-02-25T00:11:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-02-25T00:11:35Z"}, "message": "typeck.c (convert_for_assignment): Allow boolean integral constant expressions to convert to null pointer.\n\n\t* typeck.c (convert_for_assignment): Allow boolean integral constant\n\texpressions to convert to null pointer.\n\t* decl.c (lookup_namespace_name): Resolve namespace aliases.\n\t* class.c (push_nested_class): Allow namespaces.\n\t* decl2.c (set_decl_namespace): Add friendp parameter.\n\t* decl.c (grokfndecl): Pass it.\n\t(grokvardecl): Likewise.\n\t* cp-tree.h: Change declaration.\n\nFrom-SVN: r25420", "tree": {"sha": "2e55f1d1d0b102bcae197fd603f70ef89b5a72c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e55f1d1d0b102bcae197fd603f70ef89b5a72c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b262d64c1284f296fe80f6706fb5a5a689ed5e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b262d64c1284f296fe80f6706fb5a5a689ed5e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b262d64c1284f296fe80f6706fb5a5a689ed5e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/comments", "author": null, "committer": null, "parents": [{"sha": "1b14496f064242b4217bd1c6f8caf900d5794854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b14496f064242b4217bd1c6f8caf900d5794854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b14496f064242b4217bd1c6f8caf900d5794854"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "7aa0ff958159827dd6f9ea6e555ba611431155c1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b262d64c1284f296fe80f6706fb5a5a689ed5e1c", "patch": "@@ -1,3 +1,19 @@\n+1999-02-24  Mike Stump  <mrs@wrs.com>\n+\n+\t* typeck.c (convert_for_assignment): Allow boolean integral constant\n+\texpressions to convert to null pointer.\n+\n+1999-02-24  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n+\n+\t* decl.c (lookup_namespace_name): Resolve namespace aliases.\n+\n+\t* class.c (push_nested_class): Allow namespaces.\n+\n+\t* decl2.c (set_decl_namespace): Add friendp parameter.\n+\t* decl.c (grokfndecl): Pass it.\n+\t(grokvardecl): Likewise.\n+\t* cp-tree.h: Change declaration.\n+\n 1999-02-24  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (tsubst): Allow an array of explicit size zero."}, {"sha": "7e916123c2bf763c54d2bd9964e048f353e76969", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b262d64c1284f296fe80f6706fb5a5a689ed5e1c", "patch": "@@ -4897,9 +4897,9 @@ push_nested_class (type, modify)\n {\n   tree context;\n \n-  my_friendly_assert (!type || TREE_CODE (type) != NAMESPACE_DECL, 980711);\n-\n+  /* A namespace might be passed in error cases, like A::B:C.  */\n   if (type == NULL_TREE || type == error_mark_node || ! IS_AGGR_TYPE (type)\n+      || TREE_CODE (type) == NAMESPACE_DECL\n       || TREE_CODE (type) == TEMPLATE_TYPE_PARM\n       || TREE_CODE (type) == TEMPLATE_TEMPLATE_PARM)\n     return;"}, {"sha": "62ffbf0e4bd8ab4cec4cadff4288d4ed4db2046f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b262d64c1284f296fe80f6706fb5a5a689ed5e1c", "patch": "@@ -2874,7 +2874,7 @@ extern tree build_expr_from_tree\t\tPROTO((tree));\n extern tree reparse_decl_as_expr\t\tPROTO((tree, tree));\n extern tree finish_decl_parsing\t\t\tPROTO((tree));\n extern tree check_cp_case_value\t\t\tPROTO((tree));\n-extern void set_decl_namespace                  PROTO((tree, tree));\n+extern void set_decl_namespace                  PROTO((tree, tree, int));\n extern tree current_decl_namespace              PROTO((void));\n extern void push_decl_namespace                 PROTO((tree));\n extern void pop_decl_namespace                  PROTO((void));"}, {"sha": "4cd37a7a3ff8c6f083e8b95573b5ca27ee7dfb0d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b262d64c1284f296fe80f6706fb5a5a689ed5e1c", "patch": "@@ -5029,6 +5029,8 @@ lookup_namespace_name (namespace, name)\n       return error_mark_node;\n     }\n \n+  namespace = ORIGINAL_NAMESPACE (namespace);\n+\n   my_friendly_assert (TREE_CODE (name) == IDENTIFIER_NODE, 373);\n   \n   val = binding_init (&_b);\n@@ -8381,7 +8383,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \n   /* If this decl has namespace scope, set that up.  */\n   if (in_namespace)\n-    set_decl_namespace (decl, in_namespace);\n+    set_decl_namespace (decl, in_namespace, friendp);\n   else if (publicp && ! ctype)\n     DECL_CONTEXT (decl) = FROB_CONTEXT (current_namespace);\n \n@@ -8666,15 +8668,15 @@ grokvardecl (type, declarator, specbits_in, initialized, constp, in_namespace)\n       decl = build_decl (VAR_DECL, declarator, complete_type (type));\n \n       if (context)\n-\tset_decl_namespace (decl, context);\n+\tset_decl_namespace (decl, context, 0);\n \n       context = DECL_CONTEXT (decl);\n       if (declarator && context && current_lang_name != lang_name_c)\n \tDECL_ASSEMBLER_NAME (decl) = build_static_name (context, declarator);\n     }\n \n   if (in_namespace)\n-    set_decl_namespace (decl, in_namespace);\n+    set_decl_namespace (decl, in_namespace, 0);\n \n   if (RIDBIT_SETP (RID_EXTERN, specbits))\n     {"}, {"sha": "cc38dab438f4525b599e78207b48d88006fec8df", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b262d64c1284f296fe80f6706fb5a5a689ed5e1c", "patch": "@@ -4186,17 +4186,19 @@ qualified_lookup_using_namespace (name, scope, result, flags)\n    outside scope. */\n \n void\n-set_decl_namespace (decl, scope)\n+set_decl_namespace (decl, scope, friendp)\n      tree decl;\n      tree scope;\n+     int friendp;\n {\n   tree old;\n   if (scope == std_node)\n     scope = global_namespace;\n   /* Get rid of namespace aliases. */\n   scope = ORIGINAL_NAMESPACE (scope);\n   \n-  if (!is_namespace_ancestor (current_namespace, scope))\n+  /* It is ok for friends to be qualified in parallel space.  */\n+  if (!friendp && !is_namespace_ancestor (current_namespace, scope))\n     cp_error (\"declaration of `%D' not in a namespace surrounding `%D'\",\n \t      decl, scope);\n   DECL_CONTEXT (decl) = FROB_CONTEXT (scope);"}, {"sha": "426d02b0903f0dfd656656074bd7189a894b40fd", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b262d64c1284f296fe80f6706fb5a5a689ed5e1c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b262d64c1284f296fe80f6706fb5a5a689ed5e1c", "patch": "@@ -6771,7 +6771,9 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n \t}\n       return cp_convert (type, rhs);\n     }\n-  else if (codel == POINTER_TYPE && coder == INTEGER_TYPE)\n+  else if (codel == POINTER_TYPE\n+\t   && (coder == INTEGER_TYPE\n+\t       || coder == BOOLEAN_TYPE))\n     {\n       /* An explicit constant 0 can convert to a pointer,\n          but not a 0 that results from casting or folding.  */"}]}