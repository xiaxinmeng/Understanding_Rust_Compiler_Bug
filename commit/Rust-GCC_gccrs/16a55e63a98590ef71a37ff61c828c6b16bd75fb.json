{"sha": "16a55e63a98590ef71a37ff61c828c6b16bd75fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZhNTVlNjNhOTg1OTBlZjcxYTM3ZmY2MWM4MjhjNmIxNmJkNzVmYg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-12-13T10:23:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:23:01Z"}, "message": "checks.adb: Fix optimization problem with short-circuited form\n\n2007-12-06  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb: Fix optimization problem with short-circuited form\n\nFrom-SVN: r130823", "tree": {"sha": "9fdfda59626fff7ba3e443019f6a3d6db94d3421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fdfda59626fff7ba3e443019f6a3d6db94d3421"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16a55e63a98590ef71a37ff61c828c6b16bd75fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a55e63a98590ef71a37ff61c828c6b16bd75fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a55e63a98590ef71a37ff61c828c6b16bd75fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a55e63a98590ef71a37ff61c828c6b16bd75fb/comments", "author": null, "committer": null, "parents": [{"sha": "31897c04da0668370ffd77e938d93b681213d0c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31897c04da0668370ffd77e938d93b681213d0c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31897c04da0668370ffd77e938d93b681213d0c5"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "7395594632169117bf02ec73565eb9cbfc31a487", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a55e63a98590ef71a37ff61c828c6b16bd75fb/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a55e63a98590ef71a37ff61c828c6b16bd75fb/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=16a55e63a98590ef71a37ff61c828c6b16bd75fb", "patch": "@@ -2501,20 +2501,45 @@ package body Checks is\n          P := Parent (N);\n          K := Nkind (P);\n \n-         if K not in N_Subexpr then\n+         --  Done if out of subexpression (note that we allow generated stuff\n+         --  such as itype declarations in this context, to keep the loop going\n+         --  since we may well have generated such stuff in complex situations.\n+         --  Also done if no parent (probably an error condition, but no point\n+         --  in behaving nasty if we find it!)\n+\n+         if No (P)\n+           or else (K not in N_Subexpr and then Comes_From_Source (P))\n+         then\n             return True;\n \n-         --  Or/Or Else case, left operand must be equality test\n+         --  Or/Or Else case, where test is part of the right operand, or is\n+         --  part of one of the actions associated with the right operand, and\n+         --  the left operand is an equality test.\n \n-         elsif K = N_Op_Or or else K = N_Or_Else then\n+         elsif K = N_Op_Or then\n             exit when N = Right_Opnd (P)\n               and then Nkind (Left_Opnd (P)) = N_Op_Eq;\n \n-         --  And/And then case, left operand must be inequality test\n+         elsif K = N_Or_Else then\n+            exit when (N = Right_Opnd (P)\n+                        or else\n+                          (Is_List_Member (N)\n+                             and then List_Containing (N) = Actions (P)))\n+              and then Nkind (Left_Opnd (P)) = N_Op_Eq;\n \n-         elsif K = N_Op_And or else K = N_And_Then then\n+         --  Similar test for the And/And then case, where the left operand\n+         --  is an inequality test.\n+\n+         elsif K = N_Op_And then\n             exit when N = Right_Opnd (P)\n               and then Nkind (Left_Opnd (P)) = N_Op_Ne;\n+\n+         elsif K = N_And_Then then\n+            exit when (N = Right_Opnd (P)\n+                        or else\n+                          (Is_List_Member (N)\n+                             and then List_Containing (N) = Actions (P)))\n+              and then Nkind (Left_Opnd (P)) = N_Op_Ne;\n          end if;\n \n          N := P;\n@@ -2524,11 +2549,6 @@ package body Checks is\n       --  appropriate test as its left operand. So test further.\n \n       L := Left_Opnd (P);\n-\n-      if Nkind (L) = N_Op_Not then\n-         L := Right_Opnd (L);\n-      end if;\n-\n       R := Right_Opnd (L);\n       L := Left_Opnd (L);\n "}]}