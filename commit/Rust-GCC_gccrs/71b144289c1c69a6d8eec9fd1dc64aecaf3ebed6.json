{"sha": "71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFiMTQ0Mjg5YzFjNjlhNmQ4ZWVjOWZkMWRjNjRhZWNhZjNlYmVkNg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2018-11-30T23:06:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-11-30T23:06:51Z"}, "message": "re PR middle-end/64242 (Longjmp expansion incorrect)\n\n\tPR middle-end/64242\n\t* builtins.c (expand_builtin_longjmp): Use a temporary when restoring\n\tthe frame pointer.\n\t(expand_builtin_nonlocal_goto): Likewise.\n\n\t* gcc.c-torture/execute/pr64242.c: New test.\n\nFrom-SVN: r266697", "tree": {"sha": "47f216c2db4a2bd2b45e9c35a194db10402fcaec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47f216c2db4a2bd2b45e9c35a194db10402fcaec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6/comments", "author": null, "committer": null, "parents": [{"sha": "8ba109cecce1cf6598380908a1d6b00e0360b85d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba109cecce1cf6598380908a1d6b00e0360b85d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba109cecce1cf6598380908a1d6b00e0360b85d"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "6c57ed0027ee1b2f8d7f5e85f1f11b9c217f3dc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6", "patch": "@@ -1,3 +1,10 @@\n+2018-11-30  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR middle-end/64242\n+\t* builtins.c (expand_builtin_longjmp): Use a temporary when restoring\n+\tthe frame pointer.\n+\t(expand_builtin_nonlocal_goto): Likewise.\n+\n 2018-11-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-core.h (emit_diagnostic): New decl."}, {"sha": "669e548706f537fa9a92c5f47f30fc3c6ee38176", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6", "patch": "@@ -1143,8 +1143,11 @@ expand_builtin_longjmp (rtx buf_addr, rtx value)\n \t  emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n \t  emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n-\t  emit_move_insn (hard_frame_pointer_rtx, fp);\n+\t  /* Restore the frame pointer and stack pointer.  We must use a\n+\t     temporary since the setjmp buffer may be a local.  */\n+\t  fp = copy_to_reg (fp);\n \t  emit_stack_restore (SAVE_NONLOCAL, stack);\n+\t  emit_move_insn (hard_frame_pointer_rtx, fp);\n \n \t  emit_use (hard_frame_pointer_rtx);\n \t  emit_use (stack_pointer_rtx);\n@@ -1287,9 +1290,11 @@ expand_builtin_nonlocal_goto (tree exp)\n       emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n       emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n-      /* Restore frame pointer for containing function.  */\n-      emit_move_insn (hard_frame_pointer_rtx, r_fp);\n+      /* Restore the frame pointer and stack pointer.  We must use a\n+\t temporary since the setjmp buffer may be a local.  */\n+      r_fp = copy_to_reg (r_fp);\n       emit_stack_restore (SAVE_NONLOCAL, r_sp);\n+      emit_move_insn (hard_frame_pointer_rtx, r_fp);\n \n       /* USE of hard_frame_pointer_rtx added for consistency;\n \t not clear if really needed.  */"}, {"sha": "903f7cb34047233981420044ca65e53cfaeb9a66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6", "patch": "@@ -1,3 +1,8 @@\n+2018-11-30  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR middle-end/64242\n+\t* gcc.c-torture/execute/pr64242.c: New test.\n+\n 2018-11-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* g++.dg/parse/missing-parens-fixit.C: New test."}, {"sha": "72dab5709203437b50514a70c523d104706e4bda", "filename": "gcc/testsuite/gcc.c-torture/execute/pr64242.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64242.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64242.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64242.c?ref=71b144289c1c69a6d8eec9fd1dc64aecaf3ebed6", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-require-effective-target indirect_jumps } */\n+\n+extern void abort (void);\n+\n+__attribute ((noinline)) void\n+broken_longjmp(void *p)\n+{\n+  void *buf[5];\n+  __builtin_memcpy (buf, p, 5 * sizeof (void*));\n+  /* Corrupts stack pointer...  */\n+  __builtin_longjmp (buf, 1);\n+}\n+\n+volatile int x = 0;\n+volatile void *p;\n+int\n+main (void)\n+{\n+  void *buf[5];\n+  p = __builtin_alloca (x);\n+\n+  if (!__builtin_setjmp (buf))\n+    broken_longjmp (buf);\n+\n+  /* Fails if stack pointer corrupted.  */\n+  if (p != __builtin_alloca (x))\n+    abort();\n+\n+  return 0;\n+}"}]}