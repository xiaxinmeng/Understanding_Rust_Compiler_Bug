{"sha": "d822f3d585da1f9be6ab62245073625385a0e34f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgyMmYzZDU4NWRhMWY5YmU2YWI2MjI0NTA3MzYyNTM4NWEwZTM0Zg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-02-23T22:02:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-02-23T22:02:01Z"}, "message": "re PR tree-optimization/79663 (r244815 causes 10% regression for spec1k/172.mgrid on AArch64)\n\n2017-01-21  Bin Cheng  <bin.cheng@arm.com>\n\n\tPR tree-optimization/79663\n\t* tree-predcom.c (combine_chains): Process refs in reverse order\n\tonly for ZERO length chains, and add explaining comment.\n\nFrom-SVN: r245689", "tree": {"sha": "f2a285c3f42caa72a4e8a86c3183f86f8f56f88b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2a285c3f42caa72a4e8a86c3183f86f8f56f88b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d822f3d585da1f9be6ab62245073625385a0e34f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d822f3d585da1f9be6ab62245073625385a0e34f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d822f3d585da1f9be6ab62245073625385a0e34f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d822f3d585da1f9be6ab62245073625385a0e34f/comments", "author": null, "committer": null, "parents": [{"sha": "06b909b07e840d648a425e0ede5947616354f11b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b909b07e840d648a425e0ede5947616354f11b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b909b07e840d648a425e0ede5947616354f11b"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "906607f412383e9bd3d9b53483c5c021b683dbf8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d822f3d585da1f9be6ab62245073625385a0e34f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d822f3d585da1f9be6ab62245073625385a0e34f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d822f3d585da1f9be6ab62245073625385a0e34f", "patch": "@@ -1,3 +1,9 @@\n+2017-02-23  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/79663\n+\t* tree-predcom.c (combine_chains): Process refs in reverse order\n+\tonly for ZERO length chains, and add explaining comment.\n+\n 2017-02-23  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/79578"}, {"sha": "57d8f7d207c380430da5ebfb0f9f8c0fcf29c2bd", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d822f3d585da1f9be6ab62245073625385a0e34f/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d822f3d585da1f9be6ab62245073625385a0e34f/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=d822f3d585da1f9be6ab62245073625385a0e34f", "patch": "@@ -2283,7 +2283,7 @@ combine_chains (chain_p ch1, chain_p ch2)\n   enum tree_code op = ERROR_MARK;\n   bool swap = false;\n   chain_p new_chain;\n-  unsigned i;\n+  int i, j, num;\n   gimple *root_stmt;\n   tree rslt_type = NULL_TREE;\n \n@@ -2305,6 +2305,9 @@ combine_chains (chain_p ch1, chain_p ch2)\n \treturn NULL;\n     }\n \n+  ch1->combined = true;\n+  ch2->combined = true;\n+\n   if (swap)\n     std::swap (ch1, ch2);\n \n@@ -2317,39 +2320,41 @@ combine_chains (chain_p ch1, chain_p ch2)\n   new_chain->length = ch1->length;\n \n   gimple *insert = NULL;\n-  auto_vec<dref> tmp_refs;\n-  gcc_assert (ch1->refs.length () == ch2->refs.length ());\n-  /* Process in reverse order so dominance point is ready when it comes\n-     to the root ref.  */\n-  for (i = ch1->refs.length (); i > 0; i--)\n-    {\n-      r1 = ch1->refs[i - 1];\n-      r2 = ch2->refs[i - 1];\n+  num = ch1->refs.length ();\n+  i = (new_chain->length == 0) ? num - 1 : 0;\n+  j = (new_chain->length == 0) ? -1 : 1;\n+  /* For ZERO length chain, process refs in reverse order so that dominant\n+     position is ready when it comes to the root ref.\n+     For non-ZERO length chain, process refs in order.  See PR79663.  */\n+  for (; num > 0; num--, i += j)\n+    {\n+      r1 = ch1->refs[i];\n+      r2 = ch2->refs[i];\n       nw = XCNEW (struct dref_d);\n       nw->distance = r1->distance;\n-      nw->stmt = stmt_combining_refs (r1, r2, i == 1 ? insert : NULL);\n \n-      /* Record dominance point where root combined stmt should be inserted\n-\t for chains with 0 length.  Though all root refs dominate following\n-\t refs, it's possible the combined stmt doesn't.  See PR70754.  */\n-      if (ch1->length == 0\n+      /* For ZERO length chain, insert combined stmt of root ref at dominant\n+\t position.  */\n+      nw->stmt = stmt_combining_refs (r1, r2, i == 0 ? insert : NULL);\n+      /* For ZERO length chain, record dominant position where combined stmt\n+\t of root ref should be inserted.  In this case, though all root refs\n+\t dominate following ones, it's possible that combined stmt doesn't.\n+\t See PR70754.  */\n+      if (new_chain->length == 0\n \t  && (insert == NULL || stmt_dominates_stmt_p (nw->stmt, insert)))\n \tinsert = nw->stmt;\n \n-      tmp_refs.safe_push (nw);\n+      new_chain->refs.safe_push (nw);\n     }\n-\n-  /* Restore the order for new chain's refs.  */\n-  for (i = tmp_refs.length (); i > 0; i--)\n-    new_chain->refs.safe_push (tmp_refs[i - 1]);\n-\n-  ch1->combined = true;\n-  ch2->combined = true;\n-\n-  /* For chains with 0 length, has_max_use_after must be true since root\n-     combined stmt must dominates others.  */\n   if (new_chain->length == 0)\n     {\n+      /* Restore the order for ZERO length chain's refs.  */\n+      num = new_chain->refs.length () >> 1;\n+      for (i = 0, j = new_chain->refs.length () - 1; i < num; i++, j--)\n+\tstd::swap (new_chain->refs[i], new_chain->refs[j]);\n+\n+      /* For ZERO length chain, has_max_use_after must be true since root\n+\t combined stmt must dominates others.  */\n       new_chain->has_max_use_after = true;\n       return new_chain;\n     }"}]}