{"sha": "2d1439c7ad59625fea5598dda6679c6f3be1fa1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQxNDM5YzdhZDU5NjI1ZmVhNTU5OGRkYTY2NzljNmYzYmUxZmExYw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-08-14T09:52:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-14T09:52:20Z"}, "message": "[Ada] Defer processing of unknown CTW/E conditions to the back end\n\n2019-08-14  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* sem_prag.adb (Process_Compile_Time_Warning_Or_Error): Defer\n\tprocessing to the back end in all cases where the pragma's\n\tcondition is not known at compile time during the front end\n\t(except in generics), as opposed to detecting 'Size attributes\n\tand the like. This ensures that we take advantage of whatever\n\tcan be compile-time known after running the back end, as opposed\n\tto having the front end guess what the back end can do.  Remove\n\ta little duplicated code at the call site.\n\t* gnat1drv.adb (Post_Compilation_Validation_Checks): Unlock the\n\tElists while in Validate_Compile_Time_Warning_Errors, because it\n\tdoes analysis and name resolution, which sometimes involves\n\tadding Elists.\n\nFrom-SVN: r274466", "tree": {"sha": "4e7268760ed77b8d6f435ba9fb87ffb85aa23925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e7268760ed77b8d6f435ba9fb87ffb85aa23925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d1439c7ad59625fea5598dda6679c6f3be1fa1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1439c7ad59625fea5598dda6679c6f3be1fa1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d1439c7ad59625fea5598dda6679c6f3be1fa1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1439c7ad59625fea5598dda6679c6f3be1fa1c/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b96d3861e74b8df1032f4317230408248e4bf09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b96d3861e74b8df1032f4317230408248e4bf09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b96d3861e74b8df1032f4317230408248e4bf09"}], "stats": {"total": 94, "additions": 31, "deletions": 63}, "files": [{"sha": "4e7daba7635015e650f60a7ad40de51f67a77425", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1439c7ad59625fea5598dda6679c6f3be1fa1c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1439c7ad59625fea5598dda6679c6f3be1fa1c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2d1439c7ad59625fea5598dda6679c6f3be1fa1c", "patch": "@@ -1,3 +1,18 @@\n+2019-08-14  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_prag.adb (Process_Compile_Time_Warning_Or_Error): Defer\n+\tprocessing to the back end in all cases where the pragma's\n+\tcondition is not known at compile time during the front end\n+\t(except in generics), as opposed to detecting 'Size attributes\n+\tand the like. This ensures that we take advantage of whatever\n+\tcan be compile-time known after running the back end, as opposed\n+\tto having the front end guess what the back end can do.  Remove\n+\ta little duplicated code at the call site.\n+\t* gnat1drv.adb (Post_Compilation_Validation_Checks): Unlock the\n+\tElists while in Validate_Compile_Time_Warning_Errors, because it\n+\tdoes analysis and name resolution, which sometimes involves\n+\tadding Elists.\n+\n 2019-08-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* einfo.ads (Is_Called): Document new usage on E_Package"}, {"sha": "af07a0652763fb2becce7fe93db053a07e691588", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1439c7ad59625fea5598dda6679c6f3be1fa1c/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1439c7ad59625fea5598dda6679c6f3be1fa1c/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=2d1439c7ad59625fea5598dda6679c6f3be1fa1c", "patch": "@@ -1022,9 +1022,11 @@ procedure Gnat1drv is\n \n       Atree.Unlock;\n       Nlists.Unlock;\n+      Elists.Unlock;\n       Sem.Unlock;\n       Sem_Prag.Validate_Compile_Time_Warning_Errors;\n       Sem.Lock;\n+      Elists.Lock;\n       Nlists.Lock;\n       Atree.Lock;\n "}, {"sha": "f4c07a35106f16002517fb5be0665f890595f588", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 14, "deletions": 63, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1439c7ad59625fea5598dda6679c6f3be1fa1c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1439c7ad59625fea5598dda6679c6f3be1fa1c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2d1439c7ad59625fea5598dda6679c6f3be1fa1c", "patch": "@@ -7598,46 +7598,7 @@ package body Sem_Prag is\n       -------------------------------------------\n \n       procedure Process_Compile_Time_Warning_Or_Error is\n-         Validation_Needed : Boolean := False;\n-\n-         function Check_Node (N : Node_Id) return Traverse_Result;\n-         --  Tree visitor that checks if N is an attribute reference that can\n-         --  be statically computed by the back end. Validation_Needed is set\n-         --  to True if found.\n-\n-         ----------------\n-         -- Check_Node --\n-         ----------------\n-\n-         function Check_Node (N : Node_Id) return Traverse_Result is\n-         begin\n-            if Nkind (N) = N_Attribute_Reference\n-              and then Is_Entity_Name (Prefix (N))\n-              and then not Is_Generic_Unit (Scope (Entity (Prefix (N))))\n-            then\n-               declare\n-                  Attr_Id : constant Attribute_Id :=\n-                              Get_Attribute_Id (Attribute_Name (N));\n-               begin\n-                  if Attr_Id = Attribute_Alignment\n-                    or else Attr_Id = Attribute_Size\n-                  then\n-                     Validation_Needed := True;\n-                  end if;\n-               end;\n-            end if;\n-\n-            return OK;\n-         end Check_Node;\n-\n-         procedure Check_Expression is new Traverse_Proc (Check_Node);\n-\n-         --  Local variables\n-\n          Arg1x : constant Node_Id := Get_Pragma_Arg (Arg1);\n-\n-      --  Start of processing for Process_Compile_Time_Warning_Or_Error\n-\n       begin\n          --  In GNATprove mode, pragmas Compile_Time_Error and\n          --  Compile_Time_Warning are ignored, as the analyzer may not have the\n@@ -7655,20 +7616,18 @@ package body Sem_Prag is\n          Check_Arg_Is_OK_Static_Expression (Arg2, Standard_String);\n          Analyze_And_Resolve (Arg1x, Standard_Boolean);\n \n+         --  If the condition is known at compile time (now), process it now.\n+         --  Otherwise, register the expression for validation after the back\n+         --  end has been called, because it might be known at compile time\n+         --  then. For example, if the expression is \"Record_Type'Size /= 32\"\n+         --  it might be known after the back end has determined the size of\n+         --  Record_Type. We do not defer processing if we're inside a generic\n+         --  unit, because we will have more information in the instances.\n+\n          if Compile_Time_Known_Value (Arg1x) then\n             Process_Compile_Time_Warning_Or_Error (N, Sloc (Arg1));\n-\n-         --  Register the expression for its validation after the back end has\n-         --  been called if it has occurrences of attributes Size or Alignment\n-         --  (because they may be statically computed by the back end and hence\n-         --  the whole expression needs to be reevaluated).\n-\n-         else\n-            Check_Expression (Arg1x);\n-\n-            if Validation_Needed then\n-               Validate_Compile_Time_Warning_Error (N);\n-            end if;\n+         elsif not Inside_A_Generic then\n+            Validate_Compile_Time_Warning_Error (N);\n          end if;\n       end Process_Compile_Time_Warning_Or_Error;\n \n@@ -14449,25 +14408,17 @@ package body Sem_Prag is\n \n          --  Processing for this pragma is shared with Psect_Object\n \n-         ------------------------\n-         -- Compile_Time_Error --\n-         ------------------------\n+         ----------------------------------------------\n+         -- Compile_Time_Error, Compile_Time_Warning --\n+         ----------------------------------------------\n \n          --  pragma Compile_Time_Error\n          --    (boolean_EXPRESSION, static_string_EXPRESSION);\n \n-         when Pragma_Compile_Time_Error =>\n-            GNAT_Pragma;\n-            Process_Compile_Time_Warning_Or_Error;\n-\n-         --------------------------\n-         -- Compile_Time_Warning --\n-         --------------------------\n-\n          --  pragma Compile_Time_Warning\n          --    (boolean_EXPRESSION, static_string_EXPRESSION);\n \n-         when Pragma_Compile_Time_Warning =>\n+         when Pragma_Compile_Time_Error | Pragma_Compile_Time_Warning =>\n             GNAT_Pragma;\n             Process_Compile_Time_Warning_Or_Error;\n "}]}