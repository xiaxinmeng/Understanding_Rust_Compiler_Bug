{"sha": "dddf8120dbd8633f77e47501efc234057778ecfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkZjgxMjBkYmQ4NjMzZjc3ZTQ3NTAxZWZjMjM0MDU3Nzc4ZWNmYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-09-11T18:33:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-09-11T18:33:46Z"}, "message": "gigi.h (build_call_0_expr): Delete.\n\n\t* gcc-interface/gigi.h (build_call_0_expr): Delete.\n\t(build_call_1_expr): Likewise.\n\t(build_call_2_expr): Likewise.\n\t(build_call_n_expr): New prototype.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use build_call_n_expr.\n\t* gcc-interface/trans.c (establish_gnat_vms_condition_handler): Ditto.\n\t(Handled_Sequence_Of_Statements_to_gnu): Likewise.\n\t(Exception_Handler_to_gnu_zcx): Likewise.\n\t(gnat_to_gnu): Likewise.\n\t(build_binary_op_trapv): Likewise.\n\t* gcc-interface/utils2.c (build_call_0_expr): Delete.\n\t(build_call_1_expr): Likewise.\n\t(build_call_2_expr): Likewise.\n\t(build_call_n_expr): New function.\n\t(build_call_raise): Use build_call_n_expr.\n\t(build_call_raise_range): Likewise.\n\t(build_call_raise_column): Likewise.\n\t(build_call_alloc_dealloc_proc): Likewise.\n\t(maybe_wrap_malloc): Likewise.\n\t(maybe_wrap_free): Likewise.\n\nFrom-SVN: r178762", "tree": {"sha": "e285f0c98a8369100446e6c6f25585c2bf12712d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e285f0c98a8369100446e6c6f25585c2bf12712d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dddf8120dbd8633f77e47501efc234057778ecfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddf8120dbd8633f77e47501efc234057778ecfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dddf8120dbd8633f77e47501efc234057778ecfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddf8120dbd8633f77e47501efc234057778ecfc/comments", "author": null, "committer": null, "parents": [{"sha": "d8e38554672516173980b6f245781ef36767780a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e38554672516173980b6f245781ef36767780a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e38554672516173980b6f245781ef36767780a"}], "stats": {"total": 204, "additions": 94, "deletions": 110}, "files": [{"sha": "ca59e2530070049c795e6ab60960b0b5a41331e1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf8120dbd8633f77e47501efc234057778ecfc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf8120dbd8633f77e47501efc234057778ecfc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dddf8120dbd8633f77e47501efc234057778ecfc", "patch": "@@ -1,3 +1,26 @@\n+2011-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (build_call_0_expr): Delete.\n+\t(build_call_1_expr): Likewise.\n+\t(build_call_2_expr): Likewise.\n+\t(build_call_n_expr): New prototype.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use build_call_n_expr.\n+\t* gcc-interface/trans.c (establish_gnat_vms_condition_handler): Ditto.\n+\t(Handled_Sequence_Of_Statements_to_gnu): Likewise.\n+\t(Exception_Handler_to_gnu_zcx): Likewise.\n+\t(gnat_to_gnu): Likewise.\n+\t(build_binary_op_trapv): Likewise.\n+\t* gcc-interface/utils2.c (build_call_0_expr): Delete.\n+\t(build_call_1_expr): Likewise.\n+\t(build_call_2_expr): Likewise.\n+\t(build_call_n_expr): New function.\n+\t(build_call_raise): Use build_call_n_expr.\n+\t(build_call_raise_range): Likewise.\n+\t(build_call_raise_column): Likewise.\n+\t(build_call_alloc_dealloc_proc): Likewise.\n+\t(maybe_wrap_malloc): Likewise.\n+\t(maybe_wrap_free): Likewise.\n+\n 2011-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (build_return_expr): Use void_type_node for"}, {"sha": "539c2628d2c38a22d59f2d663605f8239b143a3b", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf8120dbd8633f77e47501efc234057778ecfc/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf8120dbd8633f77e47501efc234057778ecfc/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=dddf8120dbd8633f77e47501efc234057778ecfc", "patch": "@@ -1492,8 +1492,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t|| (flag_stack_check == GENERIC_STACK_CHECK\n \t\t    && compare_tree_int (DECL_SIZE_UNIT (gnu_decl),\n \t\t\t\t\t STACK_CHECK_MAX_VAR_SIZE) > 0)))\n-\t  add_stmt_with_node (build_call_1_expr\n-\t\t\t      (update_setjmp_buf_decl,\n+\t  add_stmt_with_node (build_call_n_expr\n+\t\t\t      (update_setjmp_buf_decl, 1,\n \t\t\t       build_unary_op (ADDR_EXPR, NULL_TREE,\n \t\t\t\t\t       get_block_jmpbuf_decl ())),\n \t\t\t      gnat_entity);"}, {"sha": "2614eb25c8caab50f4503d9155799a2c0bc16c53", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf8120dbd8633f77e47501efc234057778ecfc/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf8120dbd8633f77e47501efc234057778ecfc/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=dddf8120dbd8633f77e47501efc234057778ecfc", "patch": "@@ -813,16 +813,11 @@ extern tree build_cond_expr (tree result_type, tree condition_operand,\n extern tree build_compound_expr (tree result_type, tree stmt_operand,\n \t\t\t\t tree expr_operand);\n \n-/* Build a CALL_EXPR to call FUNDECL with one argument, ARG.  Return\n-   the CALL_EXPR.  */\n-extern tree build_call_1_expr (tree fundecl, tree arg);\n-\n-/* Build a CALL_EXPR to call FUNDECL with two argument, ARG1 & ARG2.  Return\n-   the CALL_EXPR.  */\n-extern tree build_call_2_expr (tree fundecl, tree arg1, tree arg2);\n-\n-/* Likewise to call FUNDECL with no arguments.  */\n-extern tree build_call_0_expr (tree fundecl);\n+/* Conveniently construct a function call expression.  FNDECL names the\n+   function to be called, N is the number of arguments, and the \"...\"\n+   parameters are the argument expressions.  Unlike build_call_expr\n+   this doesn't fold the call, hence it will always return a CALL_EXPR.  */\n+extern tree build_call_n_expr (tree fndecl, int n, ...);\n \n /* Call a function that raises an exception and pass the line number and file\n    name, if requested.  MSG says which exception function to call."}, {"sha": "75f9d70437078101d03da04d142d8c59173353f5", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf8120dbd8633f77e47501efc234057778ecfc/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf8120dbd8633f77e47501efc234057778ecfc/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=dddf8120dbd8633f77e47501efc234057778ecfc", "patch": "@@ -2444,7 +2444,7 @@ establish_gnat_vms_condition_handler (void)\n     return;\n \n   establish_stmt\n-    = build_call_1_expr (vms_builtin_establish_handler_decl,\n+    = build_call_n_expr (vms_builtin_establish_handler_decl, 1,\n \t\t\t build_unary_op\n \t\t\t (ADDR_EXPR, NULL_TREE,\n \t\t\t  gnat_vms_condition_handler_decl));\n@@ -3528,44 +3528,45 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n      the setjmp buf known for any decls in this block.  */\n   if (setjmp_longjmp)\n     {\n-      gnu_jmpsave_decl = create_var_decl (get_identifier (\"JMPBUF_SAVE\"),\n-\t\t\t\t\t  NULL_TREE, jmpbuf_ptr_type,\n-\t\t\t\t\t  build_call_0_expr (get_jmpbuf_decl),\n-\t\t\t\t\t  false, false, false, false,\n-\t\t\t\t\t  NULL, gnat_node);\n+      gnu_jmpsave_decl\n+\t= create_var_decl (get_identifier (\"JMPBUF_SAVE\"), NULL_TREE,\n+\t\t\t   jmpbuf_ptr_type,\n+\t\t\t   build_call_n_expr (get_jmpbuf_decl, 0),\n+\t\t\t   false, false, false, false, NULL, gnat_node);\n       DECL_ARTIFICIAL (gnu_jmpsave_decl) = 1;\n \n       /* The __builtin_setjmp receivers will immediately reinstall it.  Now\n \t because of the unstructured form of EH used by setjmp_longjmp, there\n \t might be forward edges going to __builtin_setjmp receivers on which\n \t it is uninitialized, although they will never be actually taken.  */\n       TREE_NO_WARNING (gnu_jmpsave_decl) = 1;\n-      gnu_jmpbuf_decl = create_var_decl (get_identifier (\"JMP_BUF\"),\n-\t\t\t\t\t NULL_TREE, jmpbuf_type, NULL_TREE,\n-\t\t\t\t\t false, false, false, false,\n-\t\t\t\t\t NULL, gnat_node);\n+      gnu_jmpbuf_decl\n+\t= create_var_decl (get_identifier (\"JMP_BUF\"), NULL_TREE,\n+\t\t\t   jmpbuf_type,\n+\t\t\t   NULL_TREE,\n+\t\t\t   false, false, false, false, NULL, gnat_node);\n       DECL_ARTIFICIAL (gnu_jmpbuf_decl) = 1;\n \n       set_block_jmpbuf_decl (gnu_jmpbuf_decl);\n \n       /* When we exit this block, restore the saved value.  */\n-      add_cleanup (build_call_1_expr (set_jmpbuf_decl, gnu_jmpsave_decl),\n+      add_cleanup (build_call_n_expr (set_jmpbuf_decl, 1, gnu_jmpsave_decl),\n \t\t   End_Label (gnat_node));\n     }\n \n   /* If we are to call a function when exiting this block, add a cleanup\n      to the binding level we made above.  Note that add_cleanup is FIFO\n      so we must register this cleanup after the EH cleanup just above.  */\n   if (at_end)\n-    add_cleanup (build_call_0_expr (gnat_to_gnu (At_End_Proc (gnat_node))),\n+    add_cleanup (build_call_n_expr (gnat_to_gnu (At_End_Proc (gnat_node)), 0),\n \t\t End_Label (gnat_node));\n \n   /* Now build the tree for the declarations and statements inside this block.\n      If this is SJLJ, set our jmp_buf as the current buffer.  */\n   start_stmt_group ();\n \n   if (setjmp_longjmp)\n-    add_stmt (build_call_1_expr (set_jmpbuf_decl,\n+    add_stmt (build_call_n_expr (set_jmpbuf_decl, 1,\n \t\t\t\t build_unary_op (ADDR_EXPR, NULL_TREE,\n \t\t\t\t\t\t gnu_jmpbuf_decl)));\n \n@@ -3596,7 +3597,7 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n       VEC_safe_push (tree, gc, gnu_except_ptr_stack,\n \t\t     create_var_decl (get_identifier (\"EXCEPT_PTR\"), NULL_TREE,\n \t\t\t\t      build_pointer_type (except_type_node),\n-\t\t\t\t      build_call_0_expr (get_excptr_decl),\n+\t\t\t\t      build_call_n_expr (get_excptr_decl, 0),\n \t\t\t\t      false, false, false, false,\n \t\t\t\t      NULL, gnat_node));\n \n@@ -3621,7 +3622,7 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n \n       /* If none of the exception handlers did anything, re-raise but do not\n \t defer abortion.  */\n-      gnu_expr = build_call_1_expr (raise_nodefer_decl,\n+      gnu_expr = build_call_n_expr (raise_nodefer_decl, 1,\n \t\t\t\t    VEC_last (tree, gnu_except_ptr_stack));\n       set_expr_location_from_node\n \t(gnu_expr,\n@@ -3641,16 +3642,16 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n       /* If the setjmp returns 1, we restore our incoming longjmp value and\n \t then check the handlers.  */\n       start_stmt_group ();\n-      add_stmt_with_node (build_call_1_expr (set_jmpbuf_decl,\n+      add_stmt_with_node (build_call_n_expr (set_jmpbuf_decl, 1,\n \t\t\t\t\t     gnu_jmpsave_decl),\n \t\t\t  gnat_node);\n       add_stmt (gnu_handler);\n       gnu_handler = end_stmt_group ();\n \n       /* This block is now \"if (setjmp) ... <handlers> else <block>\".  */\n       gnu_result = build3 (COND_EXPR, void_type_node,\n-\t\t\t   (build_call_1_expr\n-\t\t\t    (setjmp_decl,\n+\t\t\t   (build_call_n_expr\n+\t\t\t    (setjmp_decl, 1,\n \t\t\t     build_unary_op (ADDR_EXPR, NULL_TREE,\n \t\t\t\t\t     gnu_jmpbuf_decl))),\n \t\t\t   gnu_handler, gnu_inner_block);\n@@ -3861,11 +3862,11 @@ Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n \t\t\t\t\t  false, false, false, false,\n \t\t\t\t\t  NULL, gnat_node);\n \n-  add_stmt_with_node (build_call_1_expr (begin_handler_decl,\n+  add_stmt_with_node (build_call_n_expr (begin_handler_decl, 1,\n \t\t\t\t\t gnu_incoming_exc_ptr),\n \t\t      gnat_node);\n   /* ??? We don't seem to have an End_Label at hand to set the location.  */\n-  add_cleanup (build_call_1_expr (end_handler_decl, gnu_incoming_exc_ptr),\n+  add_cleanup (build_call_n_expr (end_handler_decl, 1, gnu_incoming_exc_ptr),\n \t       Empty);\n   add_stmt_list (Statements (gnat_node));\n   gnat_poplevel ();\n@@ -5496,7 +5497,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \n       add_stmt (build_binary_op (MODIFY_EXPR, NULL_TREE, gnu_incoming_exc_ptr,\n \t\t\t\t convert (ptr_type_node, integer_zero_node)));\n-      add_stmt (build_call_1_expr (reraise_zcx_decl, gnu_expr));\n+      add_stmt (build_call_n_expr (reraise_zcx_decl, 1, gnu_expr));\n       gnat_poplevel ();\n       gnu_result = end_stmt_group ();\n       break;\n@@ -6976,7 +6977,7 @@ build_binary_op_trapv (enum tree_code code, tree gnu_type, tree left,\n \t{\n \t  tree int_64 = gnat_type_for_size (64, 0);\n \n-\t  return convert (gnu_type, build_call_2_expr (mulv64_decl,\n+\t  return convert (gnu_type, build_call_n_expr (mulv64_decl, 2,\n \t\t\t\t\t\t       convert (int_64, lhs),\n \t\t\t\t\t\t       convert (int_64, rhs)));\n \t}"}, {"sha": "424a0c00fd245a38c69d4b8fea72dc28e055051f", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 41, "deletions": 76, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf8120dbd8633f77e47501efc234057778ecfc/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf8120dbd8633f77e47501efc234057778ecfc/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=dddf8120dbd8633f77e47501efc234057778ecfc", "patch": "@@ -1409,43 +1409,22 @@ build_compound_expr (tree result_type, tree stmt_operand, tree expr_operand)\n   return result;\n }\n \f\n-/* Build a CALL_EXPR to call FUNDECL with one argument, ARG.  Return\n-   the CALL_EXPR.  */\n+/* Conveniently construct a function call expression.  FNDECL names the\n+   function to be called, N is the number of arguments, and the \"...\"\n+   parameters are the argument expressions.  Unlike build_call_expr\n+   this doesn't fold the call, hence it will always return a CALL_EXPR.  */\n \n tree\n-build_call_1_expr (tree fundecl, tree arg)\n+build_call_n_expr (tree fndecl, int n, ...)\n {\n-  tree call = build_call_nary (TREE_TYPE (TREE_TYPE (fundecl)),\n-\t\t\t       build_unary_op (ADDR_EXPR, NULL_TREE, fundecl),\n-\t\t\t       1, arg);\n-  TREE_SIDE_EFFECTS (call) = 1;\n-  return call;\n-}\n-\n-/* Build a CALL_EXPR to call FUNDECL with two arguments, ARG1 & ARG2.  Return\n-   the CALL_EXPR.  */\n-\n-tree\n-build_call_2_expr (tree fundecl, tree arg1, tree arg2)\n-{\n-  tree call = build_call_nary (TREE_TYPE (TREE_TYPE (fundecl)),\n-\t\t\t       build_unary_op (ADDR_EXPR, NULL_TREE, fundecl),\n-\t\t\t       2, arg1, arg2);\n-  TREE_SIDE_EFFECTS (call) = 1;\n-  return call;\n-}\n-\n-/* Likewise to call FUNDECL with no arguments.  */\n-\n-tree\n-build_call_0_expr (tree fundecl)\n-{\n-  /* We rely on build_call_nary to compute TREE_SIDE_EFFECTS.  This makes\n-     it possible to propagate DECL_IS_PURE on parameterless functions.  */\n-  tree call = build_call_nary (TREE_TYPE (TREE_TYPE (fundecl)),\n-\t\t\t       build_unary_op (ADDR_EXPR, NULL_TREE, fundecl),\n-\t\t\t       0);\n-  return call;\n+  va_list ap;\n+  tree fntype = TREE_TYPE (fndecl);\n+  tree fn = build1 (ADDR_EXPR, build_pointer_type (fntype), fndecl);\n+\n+  va_start (ap, n);\n+  fn = build_call_valist (TREE_TYPE (fntype), fn, n, ap);\n+  va_end (ap);\n+  return fn;\n }\n \f\n /* Call a function that raises an exception and pass the line number and file\n@@ -1483,7 +1462,7 @@ build_call_raise (int msg, Node_Id gnat_node, char kind)\n \t  tree gnu_exception_entity\n \t    = gnat_to_gnu_entity (Get_RT_Exception_Entity (msg), NULL_TREE, 0);\n \t  tree gnu_call\n-\t    = build_call_1_expr (gnu_local_raise,\n+\t    = build_call_n_expr (gnu_local_raise, 1,\n \t\t\t\t build_unary_op (ADDR_EXPR, NULL_TREE,\n \t\t\t\t\t\t gnu_exception_entity));\n \n@@ -1513,7 +1492,7 @@ build_call_raise (int msg, Node_Id gnat_node, char kind)\n \t\t\t\t\t   build_index_type (size_int (len)));\n \n   return\n-    build_call_2_expr (fndecl,\n+    build_call_n_expr (fndecl, 2,\n \t\t       build1 (ADDR_EXPR,\n \t\t\t       build_pointer_type (unsigned_char_type_node),\n \t\t\t       filename),\n@@ -1528,7 +1507,6 @@ tree\n build_call_raise_range (int msg, Node_Id gnat_node,\n \t\t\ttree index, tree first, tree last)\n {\n-  tree call;\n   tree fndecl = gnat_raise_decls_ext[msg];\n   tree filename;\n   int line_number, column_number;\n@@ -1561,19 +1539,16 @@ build_call_raise_range (int msg, Node_Id gnat_node,\n   TREE_TYPE (filename) = build_array_type (unsigned_char_type_node,\n \t\t\t\t\t   build_index_type (size_int (len)));\n \n-  call = build_call_nary (TREE_TYPE (TREE_TYPE (fndecl)),\n-\t\t\t  build_unary_op (ADDR_EXPR, NULL_TREE, fndecl),\n-\t\t\t  6,\n-\t\t\t  build1 (ADDR_EXPR,\n-\t\t\t\t  build_pointer_type (unsigned_char_type_node),\n-\t\t\t\t  filename),\n-\t\t\t  build_int_cst (NULL_TREE, line_number),\n-\t\t\t  build_int_cst (NULL_TREE, column_number),\n-\t\t\t  convert (integer_type_node, index),\n-\t\t\t  convert (integer_type_node, first),\n-\t\t\t  convert (integer_type_node, last));\n-  TREE_SIDE_EFFECTS (call) = 1;\n-  return call;\n+  return\n+    build_call_n_expr (fndecl, 6,\n+\t\t       build1 (ADDR_EXPR,\n+\t\t\t       build_pointer_type (unsigned_char_type_node),\n+\t\t\t       filename),\n+\t\t       build_int_cst (NULL_TREE, line_number),\n+\t\t       build_int_cst (NULL_TREE, column_number),\n+\t\t       convert (integer_type_node, index),\n+\t\t       convert (integer_type_node, first),\n+\t\t       convert (integer_type_node, last));\n }\n \n /* Similar to build_call_raise, with extra information about the column\n@@ -1583,7 +1558,6 @@ tree\n build_call_raise_column (int msg, Node_Id gnat_node)\n {\n   tree fndecl = gnat_raise_decls_ext[msg];\n-  tree call;\n   tree filename;\n   int line_number, column_number;\n   const char *str;\n@@ -1615,16 +1589,13 @@ build_call_raise_column (int msg, Node_Id gnat_node)\n   TREE_TYPE (filename) = build_array_type (unsigned_char_type_node,\n \t\t\t\t\t   build_index_type (size_int (len)));\n \n-  call = build_call_nary (TREE_TYPE (TREE_TYPE (fndecl)),\n-\t\t\t  build_unary_op (ADDR_EXPR, NULL_TREE, fndecl),\n-\t\t\t  3,\n-\t\t\t  build1 (ADDR_EXPR,\n-\t\t\t\t  build_pointer_type (unsigned_char_type_node),\n-\t\t\t\t  filename),\n-\t\t\t  build_int_cst (NULL_TREE, line_number),\n-\t\t\t  build_int_cst (NULL_TREE, column_number));\n-  TREE_SIDE_EFFECTS (call) = 1;\n-  return call;\n+  return\n+    build_call_n_expr (fndecl, 3,\n+\t\t       build1 (ADDR_EXPR,\n+\t\t\t       build_pointer_type (unsigned_char_type_node),\n+\t\t\t       filename),\n+\t\t       build_int_cst (NULL_TREE, line_number),\n+\t\t       build_int_cst (NULL_TREE, column_number));\n }\n \f\n /* qsort comparer for the bit positions of two constructor elements\n@@ -1842,7 +1813,6 @@ build_call_alloc_dealloc_proc (tree gnu_obj, tree gnu_size, tree gnu_type,\n \t\t\t       Entity_Id gnat_proc, Entity_Id gnat_pool)\n {\n   tree gnu_proc = gnat_to_gnu (gnat_proc);\n-  tree gnu_proc_addr = build_unary_op (ADDR_EXPR, NULL_TREE, gnu_proc);\n   tree gnu_call;\n \n   /* The storage pools are obviously always tagged types, but the\n@@ -1866,13 +1836,11 @@ build_call_alloc_dealloc_proc (tree gnu_obj, tree gnu_size, tree gnu_type,\n \t comes the address of the object, for a deallocator, then the\n \t size and alignment.  */\n       if (gnu_obj)\n-\tgnu_call = build_call_nary (TREE_TYPE (TREE_TYPE (gnu_proc)),\n-\t\t\t\t    gnu_proc_addr, 4, gnu_pool_addr,\n-\t\t\t\t    gnu_obj, gnu_size, gnu_align);\n+\tgnu_call = build_call_n_expr (gnu_proc, 4, gnu_pool_addr, gnu_obj,\n+\t\t\t\t      gnu_size, gnu_align);\n       else\n-\tgnu_call = build_call_nary (TREE_TYPE (TREE_TYPE (gnu_proc)),\n-\t\t\t\t    gnu_proc_addr, 3, gnu_pool_addr,\n-\t\t\t\t    gnu_size, gnu_align);\n+\tgnu_call = build_call_n_expr (gnu_proc, 3, gnu_pool_addr,\n+\t\t\t\t      gnu_size, gnu_align);\n     }\n \n   /* Secondary stack case.  */\n@@ -1888,14 +1856,11 @@ build_call_alloc_dealloc_proc (tree gnu_obj, tree gnu_size, tree gnu_type,\n       /* The first arg is the address of the object, for a deallocator,\n \t then the size.  */\n       if (gnu_obj)\n-\tgnu_call = build_call_nary (TREE_TYPE (TREE_TYPE (gnu_proc)),\n-\t\t\t\t    gnu_proc_addr, 2, gnu_obj, gnu_size);\n+\tgnu_call = build_call_n_expr (gnu_proc, 2, gnu_obj, gnu_size);\n       else\n-\tgnu_call = build_call_nary (TREE_TYPE (TREE_TYPE (gnu_proc)),\n-\t\t\t\t    gnu_proc_addr, 1, gnu_size);\n+\tgnu_call = build_call_n_expr (gnu_proc, 1, gnu_size);\n     }\n \n-  TREE_SIDE_EFFECTS (gnu_call) = 1;\n   return gnu_call;\n }\n \n@@ -1935,9 +1900,9 @@ maybe_wrap_malloc (tree data_size, tree data_type, Node_Id gnat_node)\n       && Nkind (gnat_node) == N_Allocator\n       && (UI_To_Int (Esize (Etype (gnat_node))) == 32\n           || Convention (Etype (gnat_node)) == Convention_C))\n-    malloc_ptr = build_call_1_expr (malloc32_decl, size_to_malloc);\n+    malloc_ptr = build_call_n_expr (malloc32_decl, 1, size_to_malloc);\n   else\n-    malloc_ptr = build_call_1_expr (malloc_decl, size_to_malloc);\n+    malloc_ptr = build_call_n_expr (malloc_decl, 1, size_to_malloc);\n \n   if (aligning_type)\n     {\n@@ -2016,7 +1981,7 @@ maybe_wrap_free (tree data_ptr, tree data_type)\n   else\n     free_ptr = data_ptr;\n \n-  return build_call_1_expr (free_decl, free_ptr);\n+  return build_call_n_expr (free_decl, 1, free_ptr);\n }\n \n /* Build a GCC tree to call an allocation or deallocation function."}]}