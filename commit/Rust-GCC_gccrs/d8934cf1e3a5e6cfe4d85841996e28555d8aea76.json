{"sha": "d8934cf1e3a5e6cfe4d85841996e28555d8aea76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg5MzRjZjFlM2E1ZTZjZmU0ZDg1ODQxOTk2ZTI4NTU1ZDhhZWE3Ng==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@apple.com", "date": "2007-01-02T06:34:09Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2007-01-02T06:34:09Z"}, "message": "mips.c (mips_regno_mode_ok_for_base_p): Use HARD_REGISTER_NUM_P.\n\n2007-01-01  Eric Christopher  <echristo@apple.com>\n\n        * config/mips/mips.c (mips_regno_mode_ok_for_base_p): Use\n        HARD_REGISTER_NUM_P.\n\nFrom-SVN: r120334", "tree": {"sha": "9b43610b38c694e1bbd87bf850fc9db8924db680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b43610b38c694e1bbd87bf850fc9db8924db680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8934cf1e3a5e6cfe4d85841996e28555d8aea76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8934cf1e3a5e6cfe4d85841996e28555d8aea76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8934cf1e3a5e6cfe4d85841996e28555d8aea76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8934cf1e3a5e6cfe4d85841996e28555d8aea76/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf06e5c146b311b9a1f3109f2047a14ee458304d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf06e5c146b311b9a1f3109f2047a14ee458304d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf06e5c146b311b9a1f3109f2047a14ee458304d"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "f178159b46343997d51f8d2e8feb9d6c7b08d3e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8934cf1e3a5e6cfe4d85841996e28555d8aea76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8934cf1e3a5e6cfe4d85841996e28555d8aea76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8934cf1e3a5e6cfe4d85841996e28555d8aea76", "patch": "@@ -1,3 +1,8 @@\n+2007-01-01  Eric Christopher  <echristo@apple.com>\n+\n+\t* config/mips/mips.c (mips_regno_mode_ok_for_base_p): Use\n+\tHARD_REGISTER_NUM_P.\n+\n 2007-01-01  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold_binary) <EQ_EXPR>: Fold \"(X^C1) eq/ne C2\" into\n@@ -64,4 +69,3 @@\n \n \t* cgraphunit.c (cgraph_optimize): Call cgraph_add_new_functions\n \tbefore starting IPA passes.\n-"}, {"sha": "19421235b70895e62ba6f24fd7ff07476ef76033", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8934cf1e3a5e6cfe4d85841996e28555d8aea76/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8934cf1e3a5e6cfe4d85841996e28555d8aea76/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d8934cf1e3a5e6cfe4d85841996e28555d8aea76", "patch": "@@ -1447,7 +1447,7 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_type *symbol_type)\n int\n mips_regno_mode_ok_for_base_p (int regno, enum machine_mode mode, int strict)\n {\n-  if (regno >= FIRST_PSEUDO_REGISTER)\n+  if (!HARD_REGISTER_NUM_P (regno))\n     {\n       if (!strict)\n \treturn true;\n@@ -3103,17 +3103,17 @@ mips_relational_operand_ok_p (enum rtx_code code, rtx cmp1)\n    comparison.  */\n \n static bool\n-mips_canonicalize_comparison (enum rtx_code *code, rtx *cmp1, \n+mips_canonicalize_comparison (enum rtx_code *code, rtx *cmp1,\n \t\t\t      enum machine_mode mode)\n {\n   HOST_WIDE_INT original, plus_one;\n \n   if (GET_CODE (*cmp1) != CONST_INT)\n     return false;\n-  \n+\n   original = INTVAL (*cmp1);\n   plus_one = trunc_int_for_mode ((unsigned HOST_WIDE_INT) original + 1, mode);\n-  \n+\n   switch (*code)\n     {\n     case LE:\n@@ -3124,7 +3124,7 @@ mips_canonicalize_comparison (enum rtx_code *code, rtx *cmp1,\n \t  return true;\n \t}\n       break;\n-      \n+\n     case LEU:\n       if (plus_one != 0)\n \t{\n@@ -3133,11 +3133,11 @@ mips_canonicalize_comparison (enum rtx_code *code, rtx *cmp1,\n \t  return true;\n \t}\n       break;\n-      \n+\n     default:\n       return false;\n    }\n-  \n+\n   return false;\n \n }\n@@ -4667,8 +4667,8 @@ mips_use_ins_ext_p (rtx op, rtx size, rtx position)\n \n   len = INTVAL (size);\n   pos = INTVAL (position);\n-  \n-  if (len <= 0 || len >= GET_MODE_BITSIZE (GET_MODE (op)) \n+\n+  if (len <= 0 || len >= GET_MODE_BITSIZE (GET_MODE (op))\n       || pos < 0 || pos + len > GET_MODE_BITSIZE (GET_MODE (op)))\n     return false;\n \n@@ -4824,7 +4824,7 @@ override_options (void)\n \t only one right answer here.  */\n       if (TARGET_64BIT && TARGET_DOUBLE_FLOAT && !TARGET_FLOAT64)\n \terror (\"unsupported combination: %s\", \"-mgp64 -mfp32 -mdouble-float\");\n-      else if (!TARGET_64BIT && TARGET_FLOAT64 \n+      else if (!TARGET_64BIT && TARGET_FLOAT64\n \t       && !(ISA_HAS_MXHC1 && mips_abi == ABI_32))\n \terror (\"-mgp32 and -mfp64 can only be combined if the target\"\n \t       \" supports the mfhc1 and mthc1 instructions\");\n@@ -6945,7 +6945,7 @@ mips_expand_prologue (void)\n \t{\n \t  rtx offset = GEN_INT (cfun->machine->frame.args_size);\n \t  if (SMALL_OPERAND (cfun->machine->frame.args_size))\n-\t    RTX_FRAME_RELATED_P \n+\t    RTX_FRAME_RELATED_P\n \t      (emit_insn (gen_add3_insn (hard_frame_pointer_rtx,\n \t\t\t\t\t stack_pointer_rtx,\n \t\t\t\t\t offset))) = 1;\n@@ -6958,7 +6958,7 @@ mips_expand_prologue (void)\n \t\t\t\t\tMIPS_PROLOGUE_TEMP (Pmode)));\n \t      mips_set_frame_expr\n \t\t(gen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n-\t\t\t      plus_constant (stack_pointer_rtx, \n+\t\t\t      plus_constant (stack_pointer_rtx,\n \t\t\t\t\t     cfun->machine->frame.args_size)));\n \t    }\n \t}\n@@ -7685,7 +7685,7 @@ mips_cannot_change_mode_class (enum machine_mode from,\n \n   /* gcc assumes that each word of a multiword register can be accessed\n      individually using SUBREGs.  This is not true for floating-point\n-     registers if they are bigger than a word.  */  \n+     registers if they are bigger than a word.  */\n   if (UNITS_PER_FPREG > UNITS_PER_WORD\n       && GET_MODE_SIZE (from) > UNITS_PER_WORD\n       && GET_MODE_SIZE (to) < UNITS_PER_FPREG"}]}