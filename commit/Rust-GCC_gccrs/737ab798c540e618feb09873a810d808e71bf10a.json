{"sha": "737ab798c540e618feb09873a810d808e71bf10a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM3YWI3OThjNTQwZTYxOGZlYjA5ODczYTgxMGQ4MDhlNzFiZjEwYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-01T23:19:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-01T23:19:55Z"}, "message": "stl_algo.h: Additional minor tweaks.\n\n2004-02-01  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algo.h: Additional minor tweaks.\n\t* include/bits/stl_map.h: Likewise.\n\t* include/bits/stl_multimap.h: Likewise.\n\t* include/bits/stl_multiset.h: Likewise.\n\t* include/bits/stl_set.h: Likewise.\n\t* include/bits/stl_tree.h: Likewise.\n\nFrom-SVN: r77082", "tree": {"sha": "aefc0d7e28408ed8c489c89aa49e2a9619460304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aefc0d7e28408ed8c489c89aa49e2a9619460304"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/737ab798c540e618feb09873a810d808e71bf10a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737ab798c540e618feb09873a810d808e71bf10a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737ab798c540e618feb09873a810d808e71bf10a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737ab798c540e618feb09873a810d808e71bf10a/comments", "author": null, "committer": null, "parents": [{"sha": "64ebadacc4ee75f95596174273b89bebbc0dfb01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ebadacc4ee75f95596174273b89bebbc0dfb01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ebadacc4ee75f95596174273b89bebbc0dfb01"}], "stats": {"total": 177, "additions": 95, "deletions": 82}, "files": [{"sha": "8e8365aca3feb6a72653cf64c179de9a01639385", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=737ab798c540e618feb09873a810d808e71bf10a", "patch": "@@ -1,3 +1,12 @@\n+2004-02-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algo.h: Additional minor tweaks.\n+\t* include/bits/stl_map.h: Likewise.\n+\t* include/bits/stl_multimap.h: Likewise.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\t* include/bits/stl_set.h: Likewise.\n+\t* include/bits/stl_tree.h: Likewise.\n+\n 2004-02-01  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/vector.tcc (vector::_M_insert_aux(iterator)):"}, {"sha": "f33d4e3042f22d413ffa96aead68fbe0aa0391cd", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=737ab798c540e618feb09873a810d808e71bf10a", "patch": "@@ -82,7 +82,7 @@ namespace std\n    *  @ingroup SGIextensions\n   */\n   template<typename _Tp>\n-  inline const _Tp&\n+    inline const _Tp&\n     __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)\n     {\n       // concept requirements\n@@ -167,8 +167,7 @@ namespace std\n   template<typename _InputIterator, typename _Tp>\n     inline _InputIterator\n     find(_InputIterator __first, _InputIterator __last,\n-\t const _Tp& __val,\n-\t input_iterator_tag)\n+\t const _Tp& __val, input_iterator_tag)\n     {\n       while (__first != __last && !(*__first == __val))\n \t++__first;\n@@ -183,8 +182,7 @@ namespace std\n   template<typename _InputIterator, typename _Predicate>\n     inline _InputIterator\n     find_if(_InputIterator __first, _InputIterator __last,\n-\t    _Predicate __pred,\n-\t    input_iterator_tag)\n+\t    _Predicate __pred, input_iterator_tag)\n     {\n       while (__first != __last && !__pred(*__first))\n \t++__first;\n@@ -199,8 +197,7 @@ namespace std\n   template<typename _RandomAccessIterator, typename _Tp>\n     _RandomAccessIterator\n     find(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t const _Tp& __val,\n-\t random_access_iterator_tag)\n+\t const _Tp& __val, random_access_iterator_tag)\n     {\n       typename iterator_traits<_RandomAccessIterator>::difference_type\n \t__trip_count = (__last - __first) >> 2;\n@@ -252,8 +249,7 @@ namespace std\n   template<typename _RandomAccessIterator, typename _Predicate>\n     _RandomAccessIterator\n     find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t    _Predicate __pred,\n-\t    random_access_iterator_tag)\n+\t    _Predicate __pred, random_access_iterator_tag)\n     {\n       typename iterator_traits<_RandomAccessIterator>::difference_type\n \t__trip_count = (__last - __first) >> 2;"}, {"sha": "6cb0845267e72fcfc35b59b1f7861febca8fb115", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=737ab798c540e618feb09873a810d808e71bf10a", "patch": "@@ -92,10 +92,10 @@ namespace __gnu_norm\n     {\n       // concept requirements\n       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n-\t__glibcxx_class_requires4(_Compare, bool, _Key, _Key,\n-\t\t\t\t  _BinaryFunctionConcept)\n+      __glibcxx_class_requires4(_Compare, bool, _Key, _Key,\n+\t\t\t\t_BinaryFunctionConcept)\n   \n-\tpublic:\n+    public:\n       typedef _Key                                          key_type;\n       typedef _Tp                                           mapped_type;\n       typedef pair<const _Key, _Tp>                         value_type;\n@@ -109,7 +109,7 @@ namespace __gnu_norm\n \t_Compare comp;\n \t\n \tvalue_compare(_Compare __c)\n-\t  : comp(__c) { }\n+\t: comp(__c) { }\n \t\n       public:\n \tbool operator()(const value_type& __x, const value_type& __y) const\n@@ -613,11 +613,14 @@ namespace __gnu_norm\n       { return _M_t.equal_range(__x); }\n       \n       template <typename _K1, typename _T1, typename _C1, typename _A1>\n-      friend bool operator== (const map<_K1,_T1,_C1,_A1>&,\n-\t\t\t      const map<_K1,_T1,_C1,_A1>&);\n+        friend bool\n+        operator== (const map<_K1,_T1,_C1,_A1>&,\n+\t\t    const map<_K1,_T1,_C1,_A1>&);\n+\n       template <typename _K1, typename _T1, typename _C1, typename _A1>\n-      friend bool operator< (const map<_K1,_T1,_C1,_A1>&,\n-\t\t\t     const map<_K1,_T1,_C1,_A1>&);\n+        friend bool\n+        operator< (const map<_K1,_T1,_C1,_A1>&,\n+\t\t   const map<_K1,_T1,_C1,_A1>&);\n     };\n   \n   /**"}, {"sha": "4f442b8c32c150143b10f4d91b05ffd69c3c1b91", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=737ab798c540e618feb09873a810d808e71bf10a", "patch": "@@ -70,15 +70,17 @@ namespace __gnu_norm\n   template <typename _Key, typename _Tp,\n             typename _Compare = less<_Key>,\n             typename _Alloc = allocator<pair<const _Key, _Tp> > >\n-  class multimap;\n+    class multimap;\n   \n   template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n-  inline bool operator==(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,\n-                         const multimap<_Key,_Tp,_Compare,_Alloc>& __y);\n+    inline bool\n+    operator==(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,\n+\t       const multimap<_Key,_Tp,_Compare,_Alloc>& __y);\n   \n   template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n-  inline bool operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,\n-                        const multimap<_Key,_Tp,_Compare,_Alloc>& __y);\n+    inline bool\n+    operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,\n+\t      const multimap<_Key,_Tp,_Compare,_Alloc>& __y);\n   \n   /**\n    *  @brief A standard container made up of (key,value) pairs, which can be\n@@ -123,7 +125,7 @@ namespace __gnu_norm\n \t_Compare comp;\n \t\n \tvalue_compare(_Compare __c)\n-\t  : comp(__c) { }\n+\t: comp(__c) { }\n \t\n       public:\n \tbool operator()(const value_type& __x, const value_type& __y) const"}, {"sha": "f085a0059cc11c3d60b01c18aba090ab269e0e23", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=737ab798c540e618feb09873a810d808e71bf10a", "patch": "@@ -69,15 +69,17 @@ namespace __gnu_norm\n   // Forward declaration of operators < and ==, needed for friend declaration.\n   template <class _Key, class _Compare = less<_Key>,\n \t    class _Alloc = allocator<_Key> >\n-  class multiset;\n+    class multiset;\n \n   template <class _Key, class _Compare, class _Alloc>\n-  inline bool operator==(const multiset<_Key,_Compare,_Alloc>& __x, \n-\t\t\t const multiset<_Key,_Compare,_Alloc>& __y);\n+    inline bool\n+    operator==(const multiset<_Key,_Compare,_Alloc>& __x, \n+\t       const multiset<_Key,_Compare,_Alloc>& __y);\n \n   template <class _Key, class _Compare, class _Alloc>\n-  inline bool operator<(const multiset<_Key,_Compare,_Alloc>& __x, \n-\t\t\tconst multiset<_Key,_Compare,_Alloc>& __y);\n+    inline bool\n+    operator<(const multiset<_Key,_Compare,_Alloc>& __x, \n+\t      const multiset<_Key,_Compare,_Alloc>& __y);\n \n   /**\n    *  @brief A standard container made up of elements, which can be retrieved"}, {"sha": "75fa7f5c3ef77bbae83c7972aab3fdf4dc6d7713", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=737ab798c540e618feb09873a810d808e71bf10a", "patch": "@@ -68,7 +68,7 @@ namespace __gnu_norm\n   // Forward declarations of operators < and ==, needed for friend declaration.\n   template<class _Key, class _Compare = less<_Key>, \n \t   class _Alloc = allocator<_Key> >\n-  class set;\n+    class set;\n \n   template<class _Key, class _Compare, class _Alloc>\n     inline bool \n@@ -111,7 +111,7 @@ namespace __gnu_norm\n       __glibcxx_class_requires4(_Compare, bool, _Key, _Key,\n \t\t\t\t_BinaryFunctionConcept)\n \t\n-\tpublic:\n+    public:\n       // typedefs:\n       //@{\n       /// Public typedefs."}, {"sha": "f0d36b729412633c1e7ddb8bb43cdd74cda7b4fb", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 53, "deletions": 52, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737ab798c540e618feb09873a810d808e71bf10a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=737ab798c540e618feb09873a810d808e71bf10a", "patch": "@@ -289,7 +289,7 @@ namespace std\n       { return _M_node != __x._M_node; }\n \n       _Base_ptr _M_node;\n-  };\n+    };\n \n   template<typename _Val>\n     inline bool \n@@ -325,7 +325,7 @@ namespace std\n   template<typename _Key, typename _Val, typename _KeyOfValue, \n            typename _Compare, typename _Alloc = allocator<_Val> >\n     class _Rb_tree\n-      : protected _Alloc::template rebind<_Rb_tree_node<_Val> >::other\n+    : protected _Alloc::template rebind<_Rb_tree_node<_Val> >::other\n     {\n       typedef typename _Alloc::template rebind<_Rb_tree_node<_Val> >::other\n               _Node_allocator;\n@@ -505,27 +505,27 @@ namespace std\n     public:\n       // allocation/deallocation\n       _Rb_tree()\n-\t: _Node_allocator(allocator_type()),\n-\t  _M_node_count(0),\n-\t  _M_key_compare()\n+      : _Node_allocator(allocator_type()),\n+\t_M_node_count(0),\n+\t_M_key_compare()\n       { _M_empty_initialize(); }\n \n       _Rb_tree(const _Compare& __comp)\n-\t: _Node_allocator(allocator_type()),\n-\t  _M_node_count(0),\n-\t  _M_key_compare(__comp) \n+      : _Node_allocator(allocator_type()),\n+\t_M_node_count(0),\n+\t_M_key_compare(__comp) \n       { _M_empty_initialize(); }\n \n       _Rb_tree(const _Compare& __comp, const allocator_type& __a)\n-\t: _Node_allocator(__a),\n-\t  _M_node_count(0),\n-\t  _M_key_compare(__comp) \n+      : _Node_allocator(__a),\n+\t_M_node_count(0),\n+\t_M_key_compare(__comp) \n       { _M_empty_initialize(); }\n \n       _Rb_tree(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x) \n-\t: _Node_allocator(__x.get_allocator()),\n-\t  _M_node_count(0), \n-\t  _M_key_compare(__x._M_key_compare)\n+      : _Node_allocator(__x.get_allocator()),\n+\t_M_node_count(0), \n+\t_M_key_compare(__x._M_key_compare)\n       { \n \tif (__x._M_root() == 0)\n \t  _M_empty_initialize();\n@@ -539,7 +539,8 @@ namespace std\n \t_M_node_count = __x._M_node_count;\n       }\n \n-      ~_Rb_tree() { _M_erase(_M_begin()); }\n+      ~_Rb_tree()\n+      { _M_erase(_M_begin()); }\n \n       _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& \n       operator=(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x);\n@@ -722,14 +723,14 @@ namespace std\n     inline bool \n     operator<=(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x, \n \t       const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __y) \n-  { return !(__y < __x); }\n+    { return !(__y < __x); }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue, \n            typename _Compare, typename _Alloc>\n     inline bool \n     operator>=(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x, \n \t       const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __y) \n-  { return !(__x < __y); }\n+    { return !(__x < __y); }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue, \n            typename _Compare, typename _Alloc>\n@@ -1205,14 +1206,14 @@ namespace std\n \n   template<typename _Key, typename _Val, typename _KoV, \n            typename _Compare, typename _Alloc>\n-  inline \n-  pair<typename _Rb_tree<_Key, _Val, _KoV,\n-\t\t\t _Compare, _Alloc>::const_iterator,\n-       typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::const_iterator>\n-  _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>\n-  ::equal_range(const _Key& __k) const\n-  { return pair<const_iterator, const_iterator>(lower_bound(__k),\n-\t\t\t\t\t\tupper_bound(__k)); }\n+    inline \n+    pair<typename _Rb_tree<_Key, _Val, _KoV,\n+\t\t\t   _Compare, _Alloc>::const_iterator,\n+\t typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::const_iterator>\n+    _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::\n+    equal_range(const _Key& __k) const\n+    { return pair<const_iterator, const_iterator>(lower_bound(__k),\n+\t\t\t\t\t\t  upper_bound(__k)); }\n \n   unsigned int\n   _Rb_tree_black_count(const _Rb_tree_node_base* __node,\n@@ -1223,37 +1224,37 @@ namespace std\n     bool \n     _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const\n     {\n-    if (_M_node_count == 0 || begin() == end())\n-      return _M_node_count == 0 && begin() == end()\n-\t     && this->_M_header._M_left == _M_end()\n-\t     &&\tthis->_M_header._M_right == _M_end();\n+      if (_M_node_count == 0 || begin() == end())\n+\treturn _M_node_count == 0 && begin() == end()\n+\t       && this->_M_header._M_left == _M_end()\n+\t       && this->_M_header._M_right == _M_end();\n   \n-    unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());\n-    for (const_iterator __it = begin(); __it != end(); ++__it) \n-      {\n-\t_Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);\n-\t_Const_Link_type __L = _S_left(__x);\n-\t_Const_Link_type __R = _S_right(__x);\n+      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());\n+      for (const_iterator __it = begin(); __it != end(); ++__it) \n+\t{\n+\t  _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);\n+\t  _Const_Link_type __L = _S_left(__x);\n+\t  _Const_Link_type __R = _S_right(__x);\n \t\n-\tif (__x->_M_color == _S_red)\n-\t  if ((__L && __L->_M_color == _S_red) \n-\t      || (__R && __R->_M_color == _S_red))\n-\t    return false;\n+\t  if (__x->_M_color == _S_red)\n+\t    if ((__L && __L->_M_color == _S_red) \n+\t\t|| (__R && __R->_M_color == _S_red))\n+\t      return false;\n \t\n-\tif (__L && _M_key_compare(_S_key(__x), _S_key(__L)))\n-\t  return false;\n-\tif (__R && _M_key_compare(_S_key(__R), _S_key(__x)))\n-\t  return false;\n-\n-\tif (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)\n-\t  return false;\n-      }\n+\t  if (__L && _M_key_compare(_S_key(__x), _S_key(__L)))\n+\t    return false;\n+\t  if (__R && _M_key_compare(_S_key(__R), _S_key(__x)))\n+\t    return false;\n+\t  \n+\t  if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)\n+\t    return false;\n+\t}\n     \n-    if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))\n-      return false;\n-    if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))\n-      return false;\n-    return true;\n+      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))\n+\treturn false;\n+      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))\n+\treturn false;\n+      return true;\n     }\n } // namespace std \n "}]}