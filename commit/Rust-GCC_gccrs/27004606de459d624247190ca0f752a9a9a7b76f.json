{"sha": "27004606de459d624247190ca0f752a9a9a7b76f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwMDQ2MDZkZTQ1OWQ2MjQyNDcxOTBjYTBmNzUyYTlhOWE3Yjc2Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-08-22T16:58:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-08-22T16:58:50Z"}, "message": "re PR rtl-optimization/23478 (Miscompilation due to reloading of a var that is also used in EH pad)\n\n\tPR rtl-optimization/23478\n\t* regs.h (reg_info): Add throw_calls_crossed.\n\t(REG_N_THROWING_CALLS_CROSSED): Define.\n\t* flow.c (allocate_reg_life_data): Initialize\n\tREG_N_THROWING_CALLS_CROSSED.\n\t(propagate_one_insn, attempt_auto_inc): Update\n\tREG_N_THROWING_CALLS_CROSSED.\n\t* global.c (global_alloc): Don't allocate pseudos across\n\tcalls that may throw.\n\n\t* g++.dg/opt/pr23478.C: New test.\n\nFrom-SVN: r103348", "tree": {"sha": "a84c1cb04ef05b13f2b4cd991e221d8edbf8e2ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a84c1cb04ef05b13f2b4cd991e221d8edbf8e2ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27004606de459d624247190ca0f752a9a9a7b76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27004606de459d624247190ca0f752a9a9a7b76f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27004606de459d624247190ca0f752a9a9a7b76f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27004606de459d624247190ca0f752a9a9a7b76f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad685e8112bbaf64ff9ee993cb189feaa869e741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad685e8112bbaf64ff9ee993cb189feaa869e741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad685e8112bbaf64ff9ee993cb189feaa869e741"}], "stats": {"total": 251, "additions": 248, "deletions": 3}, "files": [{"sha": "3663104e59c78df9a80470f647e85b6b04c536cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27004606de459d624247190ca0f752a9a9a7b76f", "patch": "@@ -1,3 +1,15 @@\n+2005-08-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/23478\n+\t* regs.h (reg_info): Add throw_calls_crossed.\n+\t(REG_N_THROWING_CALLS_CROSSED): Define.\n+\t* flow.c (allocate_reg_life_data): Initialize\n+\tREG_N_THROWING_CALLS_CROSSED.\n+\t(propagate_one_insn, attempt_auto_inc): Update\n+\tREG_N_THROWING_CALLS_CROSSED.\n+\t* global.c (global_alloc): Don't allocate pseudos across\n+\tcalls that may throw.\n+\n 2005-08-22  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/18715"}, {"sha": "aa45def3e7c2f41118ee0da84036afbc314667f7", "filename": "gcc/flow.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=27004606de459d624247190ca0f752a9a9a7b76f", "patch": "@@ -104,7 +104,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n    life_analysis fills in certain vectors containing information about\n    register usage: REG_N_REFS, REG_N_DEATHS, REG_N_SETS, REG_LIVE_LENGTH,\n-   REG_N_CALLS_CROSSED and REG_BASIC_BLOCK.\n+   REG_N_CALLS_CROSSED, REG_N_THROWING_CALLS_CROSSED and REG_BASIC_BLOCK.\n \n    life_analysis sets current_function_sp_is_unchanging if the function\n    doesn't modify the stack pointer.  */\n@@ -1589,6 +1589,7 @@ allocate_reg_life_data (void)\n       REG_N_REFS (i) = 0;\n       REG_N_DEATHS (i) = 0;\n       REG_N_CALLS_CROSSED (i) = 0;\n+      REG_N_THROWING_CALLS_CROSSED (i) = 0;\n       REG_LIVE_LENGTH (i) = 0;\n       REG_FREQ (i) = 0;\n       REG_BASIC_BLOCK (i) = REG_BLOCK_UNKNOWN;\n@@ -1820,6 +1821,9 @@ propagate_one_insn (struct propagate_block_info *pbi, rtx insn)\n \t  reg_set_iterator rsi;\n \t  EXECUTE_IF_SET_IN_REG_SET (pbi->reg_live, 0, i, rsi)\n \t    REG_N_CALLS_CROSSED (i)++;\n+          if (can_throw_internal (insn))\n+\t    EXECUTE_IF_SET_IN_REG_SET (pbi->reg_live, 0, i, rsi)\n+\t      REG_N_THROWING_CALLS_CROSSED (i)++;\n \t}\n \n       /* Record sets.  Do this even for dead instructions, since they\n@@ -3512,7 +3516,11 @@ attempt_auto_inc (struct propagate_block_info *pbi, rtx inc, rtx insn,\n \t that REGNO now crosses them.  */\n       for (temp = insn; temp != incr; temp = NEXT_INSN (temp))\n \tif (CALL_P (temp))\n-\t  REG_N_CALLS_CROSSED (regno)++;\n+\t  {\n+\t    REG_N_CALLS_CROSSED (regno)++;\n+\t    if (can_throw_internal (temp))\n+\t      REG_N_THROWING_CALLS_CROSSED (regno)++;\n+\t  }\n \n       /* Invalidate alias info for Q since we just changed its value.  */\n       clear_reg_alias_info (q);"}, {"sha": "f82cd08017a15b8465778ef34133a5f75318400b", "filename": "gcc/global.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=27004606de459d624247190ca0f752a9a9a7b76f", "patch": "@@ -465,7 +465,9 @@ global_alloc (FILE *file)\n \t/* Don't allocate pseudos that cross calls,\n \t   if this function receives a nonlocal goto.  */\n \t&& (! current_function_has_nonlocal_label\n-\t    || REG_N_CALLS_CROSSED (i) == 0))\n+\t    || REG_N_CALLS_CROSSED (i) == 0)\n+\t/* Don't allocate pseudos that cross calls that may throw.  */\n+\t&& REG_N_THROWING_CALLS_CROSSED (i) == 0)\n       {\n \tif (reg_renumber[i] < 0\n \t    && reg_may_share[i] && reg_allocno[reg_may_share[i]] >= 0)"}, {"sha": "d29e0e1aace3093686cb6907593984cd08e30e25", "filename": "gcc/regs.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=27004606de459d624247190ca0f752a9a9a7b76f", "patch": "@@ -61,6 +61,7 @@ typedef struct reg_info_def\n   int deaths;\t\t\t/* # of times (REG n) dies */\n   int live_length;\t\t/* # of instructions (REG n) is live */\n   int calls_crossed;\t\t/* # of calls (REG n) is live across */\n+  int throw_calls_crossed;\t/* # of calls that may throw (REG n) is live across */\n   int basic_block;\t\t/* # of basic blocks (REG n) is used in */\n } reg_info;\n \n@@ -125,6 +126,12 @@ extern varray_type reg_n_info;\n \n #define REG_N_CALLS_CROSSED(N) (VARRAY_REG (reg_n_info, N)->calls_crossed)\n \n+/* Indexed by N, gives number of CALL_INSNS that may throw, across which\n+   (REG n) is live.  */\n+\n+#define REG_N_THROWING_CALLS_CROSSED(N) \\\n+  (VARRAY_REG (reg_n_info, N)->throw_calls_crossed)\n+\n /* Total number of instructions at which (REG n) is live.\n    The larger this is, the less priority (REG n) gets for\n    allocation in a hard register (in global-alloc)."}, {"sha": "bb30ee1c0b330fa0dd33e8dd10e40e7c7cdc4cb4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27004606de459d624247190ca0f752a9a9a7b76f", "patch": "@@ -1,3 +1,8 @@\n+2005-08-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/23478\n+\t* g++.dg/opt/pr23478.C: New test.\n+\n 2005-08-22  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/18715"}, {"sha": "da1371d25149708639ff511d48d7d23c1a85ad38", "filename": "gcc/testsuite/g++.dg/opt/pr23478.C", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23478.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27004606de459d624247190ca0f752a9a9a7b76f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23478.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23478.C?ref=27004606de459d624247190ca0f752a9a9a7b76f", "patch": "@@ -0,0 +1,211 @@\n+// PR rtl-optimization/23478\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort ();\n+bool tthrow;\n+struct C3 { int i; };\n+class C14 {};\n+struct C7\n+{\n+  virtual ~C7 ();\n+};\n+\n+C7::~C7 ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+}\n+class C2 : public C7 {};\n+\n+template <class X> class C13\n+{\n+  bool ma;\n+  X *mb;\n+public:\n+  explicit C13 (X *p = 0) throw () : ma (p != 0), mb (p) {}\n+  ~C13 ();\n+};\n+\n+template <class X>\n+C13<X>::~C13 ()\n+{\n+  asm volatile (\"\" : : \"r\" (ma), \"r\" (mb) : \"memory\");\n+}\n+\n+struct C1\n+{\n+  C1 (const C3 &, const C3 &, const C3 &, const C3 *&);\n+};\n+\n+C1::C1 (const C3 &, const C3 &, const C3 &, const C3 *&)\n+{\n+  if (!tthrow)\n+    throw 24;\n+}\n+\n+struct C8\n+{\n+  struct C15 {};\n+  typedef C15 *C9;\n+  virtual void f1 (C2 &, long *, void *, C3 &, void *, bool) = 0;\n+  virtual C13<C14> f3 () const = 0;\n+  virtual ~C8 () {}\n+};\n+\n+bool\n+xx14 ()\n+{\n+  bool b = false;\n+  if (tthrow)\n+    throw 6;\n+  asm volatile (\"\" : : \"r\" (&b) : \"memory\");\n+  return b;\n+}\n+\n+bool\n+xx2 ()\n+{\n+  bool b = false;\n+  if (tthrow)\n+    throw 6;\n+  asm volatile (\"\" : : \"r\" (&b) : \"memory\");\n+  return b;\n+}\n+\n+C13<C7>\n+xx9 ()\n+{\n+  return C13<C7>();\n+}\n+\n+C2 &\n+xx10 ()\n+{\n+  static C2 c2;\n+  return c2;\n+}\n+\n+C3 &\n+xx12 ()\n+{\n+  static C3 c3 = { 1 };\n+  return c3;\n+}\n+\n+const C3 &\n+xx5 ()\n+{\n+  static const C3 c3 = { 2 };\n+  return c3;\n+}\n+\n+const C3 *&\n+xx4 ()\n+{\n+  static const C3 *p;\n+  if (tthrow)\n+    throw 6;\n+  return p;\n+}\n+\n+long ll13;\n+\n+long\n+xx13 ()\n+{\n+  long ret;\n+  asm volatile (\"\" : \"=r\" (ret) : \"r\" (ll13));\n+  return ret;\n+}\n+\n+void\n+xx15 (C3 &x, C13<C1> &y)\n+{\n+  asm volatile (\"\" : : \"r\" (&x), \"r\" (&y) : \"memory\");\n+}\n+\n+long\n+xx16 (const void *x)\n+{\n+  long ret;\n+  asm volatile (\"\" : \"=r\" (ret) : \"0\" (1), \"r\" (x) : \"memory\");\n+  return ret;\n+}\n+\n+void\n+xx1 (C13<C14> x)\n+{\n+  asm volatile (\"\" : : \"r\" (&x) : \"memory\");\n+  if (tthrow)\n+    throw 6;\n+}\n+\n+void\n+xx3 (const C7 *x)\n+{\n+  if (x)\n+    abort ();\n+}\n+\n+void\n+xx7 ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+}\n+\n+struct C5\n+{\n+  C13<C7> f2 (C3 &v1, const void *v2, C8 *v6);\n+  C7 *m2[2];\n+  long m1[2];\n+};\n+\n+C13<C7>\n+C5::f2 (C3 &v1, const void *v2, C8 *v6)\n+{\n+  C13<C7> v13 = xx9 ();\n+  C2 &v9 = xx10 ();\n+  for (long i = 1; i < 2; i++)\n+    xx3 (m2[i]);\n+  const C3 &ld = xx5 ();\n+  xx7 ();\n+  if (xx2 ())\n+    throw \"\";\n+  xx4 ();\n+  C3 &si = xx12 ();\n+  for (long i = 0; i < xx16 (v2); ++i)\n+    {\n+      C13<C1> sk (new C1 (xx5 (), ld, xx5 (), xx4 ()));\n+      xx15 (si, sk);\n+    }\n+  long v4 = xx13 ();\n+  for (long i = v4 - 1; i >= 0; --i)\n+    m1[i] = i;\n+  bool v8 = xx2 ();\n+  for (long i = 0; i < 2 && !xx14 (); i++)\n+    {\n+      v6[i].f1 (v9, 0, __null, v1, __null, v8);\n+      if (v8)\n+\txx1 (v6[i].f3 ());\n+    }\n+  return v13;\n+}\n+\n+int\n+main (void)\n+{\n+  C5 c5 = { { __null, __null }, { 0, 0 } };\n+  bool seen = false;\n+  try\n+    {\n+      c5.f2 (xx12 (), __null, __null);\n+    }\n+  catch (int n)\n+    {\n+      if (n != 24)\n+\tabort ();\n+      seen = true;\n+    }\n+  if (!seen)\n+    abort ();\n+}"}]}