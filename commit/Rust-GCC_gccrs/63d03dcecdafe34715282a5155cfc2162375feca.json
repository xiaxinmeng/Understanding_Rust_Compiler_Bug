{"sha": "63d03dcecdafe34715282a5155cfc2162375feca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkMDNkY2VjZGFmZTM0NzE1MjgyYTUxNTVjZmMyMTYyMzc1ZmVjYQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-07-03T13:22:05Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-07-03T13:22:05Z"}, "message": "[arm] Clean up generation of BE8 format images.\n\nThe existing code in arm/bpabi.h was quite fragile and relied on matching\nspecific CPU and/or architecture names.  The introduction of the option\nformat for -mcpu and -march broke that in a way that would be non-trivial\nto fix by updating the list.  The hook in that file was always a pain\nas it required every new CPU being added to be add an update here as well\n(easy to miss).\n\nI've fixed that problem once and for all by adding a new callback into\nthe driver to select the correct BE8 behaviour.  This uses features in\nthe ISA capabilities list to select whether or not to use BE8 format\nduring linking.\n\nI also noticed that if the user happened to pass both -mbig-endian and\n-mlittle-endian on the command line then the linker spec rules would\nget somewhat confused and potentially do the wrong thing.  I've fixed that\nby marking these options as opposites in the option descriptions.  The\ndriver will now automatically suppress overridden options leading to the\ncorrect desired behavior.\n\nWhilst fixing this I noticed a couple of anomolus cases in the\nexisting BE8 support: we were not generating BE8 format for ARMv6 or\nARMv7-R targets.  While the ARMv6 status was probably deliberate at\nthe time, this is probably not a good idea in the long term as the\nalternative, BE32, has been deprecated by ARM.  After discussion with\na couple of colleagues I've decided to change this, but to then add an\noption to restore the existing behaviour at the user's option.  So\nthis patch introduces two new options (opposites) -mbe8 and -mbe32.\n\nThis is a quiet behavior change, so I'll add a comment to the release\nnotes shortly.\n\n\t* common/config/arm/arm-common.c (arm_be8_option): New function.\n\t* config/arm/arm-isa.h (isa_feature): Add new feature bit isa_bit_be8.\n\t(ISA_ARMv6): Add isa_bit_be8.\n\t* config/arm/arm.h (arm_be8_option): Add prototype.\n\t(BE8_SPEC_FUNCTION): New define.\n\t(EXTRA_SPEC_FUNCTIONS): Add BE8_SPEC_FUNCTION.\n\t* config/arm/arm.opt (mbig-endian): Mark as Negative of mlittle-endian.\n\t(mlittle-endian): Similarly.\n\t(mbe8, mbe32): New options.\n\t* config/arm/bpabi.h (BE8_LINK_SPEC): Call arm_be8_option.\n\t* doc/invoke.texi (ARM Options): Document -mbe8 and -mbe32.\n\nFrom-SVN: r249909", "tree": {"sha": "c8dfbc4b955b364717b586abf41b43f527f7f865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8dfbc4b955b364717b586abf41b43f527f7f865"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d03dcecdafe34715282a5155cfc2162375feca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d03dcecdafe34715282a5155cfc2162375feca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d03dcecdafe34715282a5155cfc2162375feca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d03dcecdafe34715282a5155cfc2162375feca/comments", "author": null, "committer": null, "parents": [{"sha": "e1a921ddaac5e50426fc2b0edfee3b17a4607fe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a921ddaac5e50426fc2b0edfee3b17a4607fe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a921ddaac5e50426fc2b0edfee3b17a4607fe6"}], "stats": {"total": 189, "additions": 105, "deletions": 84}, "files": [{"sha": "05aaba91b68c518a65208d26df0f48df5f3920bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63d03dcecdafe34715282a5155cfc2162375feca", "patch": "@@ -1,3 +1,17 @@\n+2017-07-02  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* common/config/arm/arm-common.c (arm_be8_option): New function.\n+\t* config/arm/arm-isa.h (isa_feature): Add new feature bit isa_bit_be8.\n+\t(ISA_ARMv6): Add isa_bit_be8.\n+\t* config/arm/arm.h (arm_be8_option): Add prototype.\n+\t(BE8_SPEC_FUNCTION): New define.\n+\t(EXTRA_SPEC_FUNCTIONS): Add BE8_SPEC_FUNCTION.\n+\t* config/arm/arm.opt (mbig-endian): Mark as Negative of mlittle-endian.\n+\t(mlittle-endian): Similarly.\n+\t(mbe8, mbe32): New options.\n+\t* config/arm/bpabi.h (BE8_LINK_SPEC): Call arm_be8_option.\n+\t* doc/invoke.texi (ARM Options): Document -mbe8 and -mbe32.\n+\n 2017-07-02  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-cfg.c (gimple_find_sub_bbs): Fix profile updating."}, {"sha": "b6244d64e6f9d980c96b62acadef85a53083879c", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=63d03dcecdafe34715282a5155cfc2162375feca", "patch": "@@ -761,6 +761,63 @@ arm_canon_arch_option (int argc, const char **argv)\n   return canonical_arch;\n }\n \n+/* If building big-endian on a BE8 target generate a --be8 option for\n+   the linker.  Takes four types of option: \"little\" - little-endian;\n+   \"big\" - big-endian; \"be8\" - force be8 iff big-endian; and \"arch\"\n+   \"<arch-name>\" (two arguments) - the target architecture.  The\n+   parameter names are generated by the driver from the command-line\n+   options.  */\n+const char *\n+arm_be8_option (int argc, const char **argv)\n+{\n+  int endian = TARGET_ENDIAN_DEFAULT;\n+  const char *arch = NULL;\n+  int arg;\n+  bool force = false;\n+\n+  for (arg = 0; arg < argc; arg++)\n+    {\n+      if (strcmp (argv[arg], \"little\") == 0)\n+\tendian = 0;\n+      else if (strcmp (argv[arg], \"big\") == 0)\n+\tendian = 1;\n+      else if (strcmp (argv[arg], \"be8\") == 0)\n+\tforce = true;\n+      else if (strcmp (argv[arg], \"arch\") == 0)\n+\t{\n+\t  arg++;\n+\t  gcc_assert (arg < argc);\n+\t  arch = argv[arg];\n+\t}\n+      else\n+\tgcc_unreachable ();\n+    }\n+\n+  /* Little endian - no be8 option.  */\n+  if (!endian)\n+    return \"\";\n+\n+  if (force)\n+    return \"--be8\";\n+\n+  /* Arch might not be set iff arm_canon_arch (above) detected an\n+     error.  Do nothing in that case.  */\n+  if (!arch)\n+    return \"\";\n+\n+  const arch_option *selected_arch\n+    = arm_parse_arch_option_name (all_architectures, \"-march\", arch);\n+\n+  /* Similarly if the given arch option was itself invalid.  */\n+  if (!selected_arch)\n+    return \"\";\n+\n+  if (check_isa_bits_for (selected_arch->common.isa_bits, isa_bit_be8))\n+    return \"--be8\";\n+\n+  return \"\";\n+}\n+\n #undef ARM_CPU_NAME_LENGTH\n \n "}, {"sha": "c0c2ccee330f2313951e980c5d399ae5d21005d6", "filename": "gcc/config/arm/arm-isa.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fconfig%2Farm%2Farm-isa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fconfig%2Farm%2Farm-isa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-isa.h?ref=63d03dcecdafe34715282a5155cfc2162375feca", "patch": "@@ -40,7 +40,8 @@ enum isa_feature\n     isa_bit_ARMv6,\t/* Architecture rel 6.  */\n     isa_bit_ARMv6k,\t/* Architecture rel 6k.  */\n     isa_bit_thumb2,\t/* Thumb-2.  */\n-    isa_bit_notm,\t/* Instructions that are not present in 'M' profile.  */\n+    isa_bit_notm,\t/* Instructions not present in 'M' profile.  */\n+    isa_bit_be8,\t/* Architecture uses be8 mode in big-endian.  */\n     isa_bit_tdiv,\t/* Thumb division instructions.  */\n     isa_bit_ARMv7em,\t/* Architecture rel 7e-m.  */\n     isa_bit_ARMv7,\t/* Architecture rel 7.  */\n@@ -101,7 +102,7 @@ enum isa_feature\n #define ISA_ARMv5e\tISA_ARMv5, isa_bit_ARMv5e\n #define ISA_ARMv5te\tISA_ARMv5e, isa_bit_thumb\n #define ISA_ARMv5tej\tISA_ARMv5te\n-#define ISA_ARMv6\tISA_ARMv5te, isa_bit_ARMv6\n+#define ISA_ARMv6\tISA_ARMv5te, isa_bit_ARMv6, isa_bit_be8\n #define ISA_ARMv6j\tISA_ARMv6\n #define ISA_ARMv6k\tISA_ARMv6, isa_bit_ARMv6k\n #define ISA_ARMv6z\tISA_ARMv6"}, {"sha": "c803d4461c08436ef5f8468f6018e3226ccf33f8", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=63d03dcecdafe34715282a5155cfc2162375feca", "patch": "@@ -2257,11 +2257,16 @@ const char *arm_canon_arch_option (int argc, const char **argv);\n #define CANON_ARCH_SPEC_FUNCTION\t\t\\\n   { \"canon_arch\", arm_canon_arch_option },\n \n+const char *arm_be8_option (int argc, const char **argv);\n+#define BE8_SPEC_FUNCTION\t\t\t\\\n+  { \"be8_linkopt\", arm_be8_option },\n+\n # define EXTRA_SPEC_FUNCTIONS\t\t\t\\\n   MCPU_MTUNE_NATIVE_FUNCTIONS\t\t\t\\\n   ASM_CPU_SPEC_FUNCTIONS\t\t\t\\\n   CANON_ARCH_SPEC_FUNCTION\t\t\t\\\n-  TARGET_MODE_SPEC_FUNCTIONS\n+  TARGET_MODE_SPEC_FUNCTIONS\t\t\t\\\n+  BE8_SPEC_FUNCTION\n \n /* Automatically add -mthumb for Thumb-only targets if mode isn't specified\n    via the configuration option --with-mode or via the command line. The"}, {"sha": "b6c707b1afde0c6421d0a470f31c196a55d01cc6", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=63d03dcecdafe34715282a5155cfc2162375feca", "patch": "@@ -95,7 +95,7 @@ Target Report RejectNegative Negative(mthumb) InverseMask(THUMB)\n Generate code in 32 bit ARM state.\n \n mbig-endian\n-Target Report RejectNegative Mask(BIG_END)\n+Target Report RejectNegative Negative(mlittle-endian) Mask(BIG_END)\n Assume target CPU is configured as big endian.\n \n mcallee-super-interworking\n@@ -160,7 +160,7 @@ mhard-float\n Target RejectNegative Alias(mfloat-abi=, hard) Undocumented\n \n mlittle-endian\n-Target Report RejectNegative InverseMask(BIG_END)\n+Target Report RejectNegative Negative(mbig-endian) InverseMask(BIG_END)\n Assume target CPU is configured as little endian.\n \n mlong-calls\n@@ -286,3 +286,11 @@ Assume unified syntax for inline assembly code.\n mpure-code\n Target Report Var(target_pure_code) Init(0)\n Do not allow constant data to be placed in code sections.\n+\n+mbe8\n+Target Report RejectNegative Negative(mbe32) Mask(BE8)\n+When linking for big-endian targets, generate a BE8 format image.\n+\n+mbe32\n+Target Report RejectNegative Negative(mbe8) InverseMask(BE8)\n+When linking for big-endian targets, generate a legacy BE32 format image."}, {"sha": "2f41c4ffbdba8b02054805e8cfc038142e07330c", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 6, "deletions": 79, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=63d03dcecdafe34715282a5155cfc2162375feca", "patch": "@@ -26,7 +26,7 @@\n /* Use the AAPCS ABI by default.  */\n #define ARM_DEFAULT_ABI ARM_ABI_AAPCS\n \n-/* Assume that AAPCS ABIs should adhere to the full BPABI.  */ \n+/* Assume that AAPCS ABIs should adhere to the full BPABI.  */\n #define TARGET_BPABI (TARGET_AAPCS_BASED)\n \n /* BPABI targets use EABI frame unwinding tables.  */\n@@ -55,84 +55,11 @@\n #define TARGET_FIX_V4BX_SPEC \" %{mcpu=arm8|mcpu=arm810|mcpu=strongarm*\"\\\n   \"|march=armv4|mcpu=fa526|mcpu=fa626:--fix-v4bx}\"\n \n-#if TARGET_BIG_ENDIAN_DEFAULT\n-#define BE8_LINK_SPEC \\\n-  \" %{!mlittle-endian:%{march=armv7-a|mcpu=cortex-a5    \\\n-   |mcpu=cortex-a7                                      \\\n-   |mcpu=cortex-a8|mcpu=cortex-a9|mcpu=cortex-a15       \\\n-   |mcpu=cortex-a12|mcpu=cortex-a17\t\t\t\\\n-   |mcpu=cortex-a15.cortex-a7\t\t\t\t\\\n-   |mcpu=cortex-a17.cortex-a7\t\t\t\t\\\n-   |mcpu=marvell-pj4\t\t\t\t\t\\\n-   |mcpu=cortex-a32\t\t\t\t\t\\\n-   |mcpu=cortex-a35\t\t\t\t\t\\\n-   |mcpu=cortex-a53\t\t\t\t\t\\\n-   |mcpu=cortex-a57\t\t\t\t\t\\\n-   |mcpu=cortex-a57.cortex-a53\t\t\t\t\\\n-   |mcpu=cortex-a72\t\t\t\t\t\\\n-   |mcpu=cortex-a72.cortex-a53\t\t\t\t\\\n-   |mcpu=cortex-a73\t\t\t\t\t\\\n-   |mcpu=cortex-a73.cortex-a35\t\t\t\t\\\n-   |mcpu=cortex-a73.cortex-a53\t\t\t\t\\\n-   |mcpu=exynos-m1                                      \\\n-   |mcpu=xgene1                                         \\\n-   |mcpu=cortex-m1.small-multiply                       \\\n-   |mcpu=cortex-m0.small-multiply                       \\\n-   |mcpu=cortex-m0plus.small-multiply\t\t\t\\\n-   |mcpu=generic-armv7-a                                \\\n-   |march=armv7ve\t                                \\\n-   |march=armv7-m|mcpu=cortex-m3                        \\\n-   |march=armv7e-m|mcpu=cortex-m4|mcpu=cortex-m7        \\\n-   |march=armv6-m|mcpu=cortex-m0                        \\\n-   |march=armv8-a\t\t\t\t\t\\\n-   |march=armv8-a+crc\t\t\t\t\t\\\n-   |march=armv8.1-a\t\t\t\t\t\\\n-   |march=armv8.1-a+crc\t\t\t\t\t\\\n-   |march=armv8.2-a\t\t\t\t\t\\\n-   |march=armv8.2-a+fp16\t\t\t\t\\\n-   |march=armv8-m.base|mcpu=cortex-m23\t\t\t\\\n-   |march=armv8-m.main\t\t\t\t\t\\\n-   |march=armv8-m.main+dsp|mcpu=cortex-m33\t\t\\\n-   :%{!r:--be8}}}\"\n-#else\n-#define BE8_LINK_SPEC \\\n-  \" %{mbig-endian:%{march=armv7-a|mcpu=cortex-a5        \\\n-   |mcpu=cortex-a7                                      \\\n-   |mcpu=cortex-a8|mcpu=cortex-a9|mcpu=cortex-a15       \\\n-   |mcpu=cortex-a12|mcpu=cortex-a17\t\t\t\\\n-   |mcpu=cortex-a15.cortex-a7\t\t\t\t\\\n-   |mcpu=cortex-a17.cortex-a7\t\t\t\t\\\n-   |mcpu=cortex-a35\t\t\t\t\t\\\n-   |mcpu=cortex-a53\t\t\t\t\t\\\n-   |mcpu=cortex-a57\t\t\t\t\t\\\n-   |mcpu=cortex-a57.cortex-a53\t\t\t\t\\\n-   |mcpu=cortex-a72\t\t\t\t\t\\\n-   |mcpu=cortex-a72.cortex-a53\t\t\t\t\\\n-   |mcpu=cortex-a73\t\t\t\t\t\\\n-   |mcpu=cortex-a73.cortex-a35\t\t\t\t\\\n-   |mcpu=cortex-a73.cortex-a53\t\t\t\t\\\n-   |mcpu=exynos-m1                                      \\\n-   |mcpu=xgene1                                         \\\n-   |mcpu=cortex-m1.small-multiply                       \\\n-   |mcpu=cortex-m0.small-multiply                       \\\n-   |mcpu=cortex-m0plus.small-multiply                   \\\n-   |mcpu=marvell-pj4\t\t\t\t\t\\\n-   |mcpu=generic-armv7-a                                \\\n-   |march=armv7ve\t                                \\\n-   |march=armv7-m|mcpu=cortex-m3                        \\\n-   |march=armv7e-m|mcpu=cortex-m4|mcpu=cortex-m7        \\\n-   |march=armv6-m|mcpu=cortex-m0                        \\\n-   |march=armv8-a\t\t\t\t\t\\\n-   |march=armv8-a+crc\t\t\t\t\t\\\n-   |march=armv8.1-a\t\t\t\t\t\\\n-   |march=armv8.1-a+crc\t\t\t\t\t\\\n-   |march=armv8.2-a\t\t\t\t\t\\\n-   |march=armv8.2-a+fp16\t\t\t\t\\\n-   |march=armv8-m.base|mcpu=cortex-m23\t\t\t\\\n-   |march=armv8-m.main\t\t\t\t\t\\\n-   |march=armv8-m.main+dsp|mcpu=cortex-m33\t\t\\\n-   :%{!r:--be8}}}\"\n-#endif\n+#define BE8_LINK_SPEC\t\t\t\t\t\t\t\\\n+  \"%{!r:%{!mbe32:%:be8_linkopt(%{mlittle-endian:little}\"\t\t\\\n+  \"\t\t\t       %{mbig-endian:big}\"\t\t\t\\\n+  \"\t\t\t       %{mbe8:be8}\"\t\t\t\t\\\n+  \"\t\t\t       %{march=*:arch %*})}}\"\n \n /* Tell the assembler to build BPABI binaries.  */\n #undef  SUBTARGET_EXTRA_ASM_SPEC"}, {"sha": "a5f084ef833738765e65128fd22f8c0e85fc1940", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d03dcecdafe34715282a5155cfc2162375feca/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=63d03dcecdafe34715282a5155cfc2162375feca", "patch": "@@ -15189,6 +15189,15 @@ the default for all standard configurations.\n Generate code for a processor running in big-endian mode; the default is\n to compile code for a little-endian processor.\n \n+@item -mbe8\n+@itemx -mbe32\n+@opindex mbe8\n+When linking a big-endian image select between BE8 and BE32 formats.\n+The option has no effect for little-endian images and is ignored.  The\n+default is dependent on the selected target architecture.  For ARMv6\n+and later architectures the default is BE8, for older architectures\n+the default is BE32.  BE32 format has been deprecated by ARM.\n+\n @item -march=@var{name@r{[}+extension@dots{}@r{]}}\n @opindex march\n This specifies the name of the target ARM architecture.  GCC uses this"}]}