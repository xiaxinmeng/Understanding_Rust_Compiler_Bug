{"sha": "331c7fcdd09ca68e53bd5e64cd4b1cdc04416aa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMxYzdmY2RkMDljYTY4ZTUzYmQ1ZTY0Y2Q0YjFjZGMwNDQxNmFhMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-28T19:01:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-28T19:01:00Z"}, "message": "lto-streamer.c [...] (tree_htab, [...]): New tree hash table.\n\n\t* lto-streamer.c [LTO_STREAMER_DEBUG] (tree_htab, tree_hash_entry,\n\thash_tree, eq_tree): New tree hash table.\n\t(lto_streamer_init) [LTO_STREAMER_DEBUG]: Initialize it.\n\t[LTO_STREAMER_DEBUG] (lto_orig_address_map, lto_orig_address_get,\n\tlto_orig_address_remove): Reimplement.\n\nFrom-SVN: r158836", "tree": {"sha": "731d3ebc836e47abbec16c06098076ee6a609f8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/731d3ebc836e47abbec16c06098076ee6a609f8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/331c7fcdd09ca68e53bd5e64cd4b1cdc04416aa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/331c7fcdd09ca68e53bd5e64cd4b1cdc04416aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/331c7fcdd09ca68e53bd5e64cd4b1cdc04416aa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/331c7fcdd09ca68e53bd5e64cd4b1cdc04416aa2/comments", "author": null, "committer": null, "parents": [{"sha": "34f97b9407c6a39f133b3446e8c788d19a9f9e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f97b9407c6a39f133b3446e8c788d19a9f9e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f97b9407c6a39f133b3446e8c788d19a9f9e34"}], "stats": {"total": 69, "additions": 63, "deletions": 6}, "files": [{"sha": "0dbca97c8fb6eb641db34c0fbe7092463bba8e24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331c7fcdd09ca68e53bd5e64cd4b1cdc04416aa2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331c7fcdd09ca68e53bd5e64cd4b1cdc04416aa2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=331c7fcdd09ca68e53bd5e64cd4b1cdc04416aa2", "patch": "@@ -1,3 +1,11 @@\n+2010-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* lto-streamer.c [LTO_STREAMER_DEBUG] (tree_htab, tree_hash_entry,\n+\thash_tree, eq_tree): New tree hash table.\n+\t(lto_streamer_init) [LTO_STREAMER_DEBUG]: Initialize it.\n+\t[LTO_STREAMER_DEBUG] (lto_orig_address_map, lto_orig_address_get,\n+\tlto_orig_address_remove): Reimplement.\n+\n 2010-04-28  Xinliang David Li  <davidxl@google.com>\n \n \tPR c/42643"}, {"sha": "84baeacee9908bfaa9b3e9a5c4c15a8c3a4df5f9", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331c7fcdd09ca68e53bd5e64cd4b1cdc04416aa2/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331c7fcdd09ca68e53bd5e64cd4b1cdc04416aa2/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=331c7fcdd09ca68e53bd5e64cd4b1cdc04416aa2", "patch": "@@ -785,6 +785,31 @@ lto_streamer_cache_delete (struct lto_streamer_cache_d *c)\n }\n \n \n+#ifdef LTO_STREAMER_DEBUG\n+static htab_t tree_htab;\n+\n+struct tree_hash_entry\n+{\n+  tree key;\n+  intptr_t value;\n+};\n+\n+static hashval_t\n+hash_tree (const void *p)\n+{\n+  const struct tree_hash_entry *e = (const struct tree_hash_entry *) p;\n+  return htab_hash_pointer (e->key);\n+}\n+\n+static int\n+eq_tree (const void *p1, const void *p2)\n+{\n+  const struct tree_hash_entry *e1 = (const struct tree_hash_entry *) p1;\n+  const struct tree_hash_entry *e2 = (const struct tree_hash_entry *) p2;\n+  return (e1->key == e2->key);\n+}\n+#endif\n+\n /* Initialization common to the LTO reader and writer.  */\n \n void\n@@ -795,6 +820,10 @@ lto_streamer_init (void)\n      new TS_* astructure is added, the streamer should be updated to\n      handle it.  */\n   check_handled_ts_structures ();\n+\n+#ifdef LTO_STREAMER_DEBUG\n+  tree_htab = htab_create (31, hash_tree, eq_tree, NULL);\n+#endif\n }\n \n \n@@ -823,10 +852,16 @@ gate_lto_out (void)\n void\n lto_orig_address_map (tree t, intptr_t orig_t)\n {\n-  /* FIXME lto.  Using the annotation field is quite hacky as it relies\n-     on the GC not running while T is being rematerialized.  It would\n-     be cleaner to use a hash table here.  */\n-  t->base.ann = (union tree_ann_d *) orig_t;\n+  struct tree_hash_entry ent;\n+  struct tree_hash_entry **slot;\n+\n+  ent.key = t;\n+  ent.value = orig_t;\n+  slot\n+    = (struct tree_hash_entry **) htab_find_slot (tree_htab, &ent, INSERT);\n+  gcc_assert (!*slot);\n+  *slot = XNEW (struct tree_hash_entry);\n+  **slot = ent;\n }\n \n \n@@ -836,7 +871,13 @@ lto_orig_address_map (tree t, intptr_t orig_t)\n intptr_t\n lto_orig_address_get (tree t)\n {\n-  return (intptr_t) t->base.ann;\n+  struct tree_hash_entry ent;\n+  struct tree_hash_entry **slot;\n+\n+  ent.key = t;\n+  slot\n+    = (struct tree_hash_entry **) htab_find_slot (tree_htab, &ent, NO_INSERT);\n+  return (slot ? (*slot)->value : 0);\n }\n \n \n@@ -845,7 +886,15 @@ lto_orig_address_get (tree t)\n void\n lto_orig_address_remove (tree t)\n {\n-  t->base.ann = NULL;\n+  struct tree_hash_entry ent;\n+  struct tree_hash_entry **slot;\n+\n+  ent.key = t;\n+  slot\n+    = (struct tree_hash_entry **) htab_find_slot (tree_htab, &ent, NO_INSERT);\n+  gcc_assert (slot);\n+  free (*slot);\n+  htab_clear_slot (tree_htab, (PTR *)slot);\n }\n #endif\n "}]}