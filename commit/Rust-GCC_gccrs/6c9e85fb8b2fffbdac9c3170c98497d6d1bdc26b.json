{"sha": "6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM5ZTg1ZmI4YjJmZmZiZGFjOWMzMTcwYzk4NDk3ZDZkMWJkYzI2Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-11-27T11:03:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-11-27T11:03:12Z"}, "message": "re PR tree-optimization/64024 (gcc.dg/vect/vect-simd-clone-6.c ICEs)\n\n\tPR tree-optimization/64024\n\t* tree-vectorizer.h (struct _stmt_vec_info): Remove simd_clone_fndecl\n\tfield.  Add simd_clone_info field.\n\t(STMT_VINFO_SIMD_CLONE_FNDECL): Remove.\n\t(STMT_VINFO_SIMD_CLONE_INFO): Define.\n\t* tree-vect-stmts.c (vectorizable_simd_clone_call): Adjust for\n\tSTMT_VINFO_SIMD_CLONE_FNDECL becoming first element of\n\tSTMT_VINFO_SIMD_CLONE_INFO vector.  For linear arguments, remember\n\tbase and linear_step from analysis phase and use it during transform\n\tphase, biased by the difference between LOOP_VINFO_NITERS{_UNCHANGED,}\n\tmultiplied by linear_step.\n\t(free_stmt_vec_info): Release STMT_VINFO_SIMD_CLONE_INFO.\n\n\t* gcc.dg/vect/vect-simd-clone-13.c: New test.\n\t* gcc.dg/vect/vect-simd-clone-14.c: New test.\n\nFrom-SVN: r218120", "tree": {"sha": "cf46507fed79cd2730c0fc10c373d2631ae276b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf46507fed79cd2730c0fc10c373d2631ae276b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7c7534348a4f6af27f5d17b83356619ad26f73c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c7534348a4f6af27f5d17b83356619ad26f73c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c7534348a4f6af27f5d17b83356619ad26f73c"}], "stats": {"total": 100, "additions": 88, "deletions": 12}, "files": [{"sha": "0d544fcb6d962c807eb0b42de59475bc0376a466", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b", "patch": "@@ -1,5 +1,18 @@\n 2014-11-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/64024\n+\t* tree-vectorizer.h (struct _stmt_vec_info): Remove simd_clone_fndecl\n+\tfield.  Add simd_clone_info field.\n+\t(STMT_VINFO_SIMD_CLONE_FNDECL): Remove.\n+\t(STMT_VINFO_SIMD_CLONE_INFO): Define.\n+\t* tree-vect-stmts.c (vectorizable_simd_clone_call): Adjust for\n+\tSTMT_VINFO_SIMD_CLONE_FNDECL becoming first element of\n+\tSTMT_VINFO_SIMD_CLONE_INFO vector.  For linear arguments, remember\n+\tbase and linear_step from analysis phase and use it during transform\n+\tphase, biased by the difference between LOOP_VINFO_NITERS{_UNCHANGED,}\n+\tmultiplied by linear_step.\n+\t(free_stmt_vec_info): Release STMT_VINFO_SIMD_CLONE_INFO.\n+\n \tPR lto/64025\n \t* alias.c (find_base_term): Use std::swap.  Prefer tmp2\n \tif it is CONSTANT_P other than CONST_INT."}, {"sha": "045d4fde9a6b6512927ea830ff0447c859d90cfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b", "patch": "@@ -1,3 +1,9 @@\n+2014-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/64024\n+\t* gcc.dg/vect/vect-simd-clone-13.c: New test.\n+\t* gcc.dg/vect/vect-simd-clone-14.c: New test.\n+\n 2014-11-27  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR target/59593"}, {"sha": "c5066c0f92b5352f0b97c956690ec20a069318c6", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-13.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-13.c?ref=6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd -fcommon\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#include \"vect-simd-clone-6.c\"\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "59cd9524f02622341bebaee512507349f603d96d", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-14.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-14.c?ref=6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd -fcommon\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+#include \"vect-simd-clone-11.c\"\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "22de440eb37a9740a5a3c9363888837ed3082404", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 50, "deletions": 9, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b", "patch": "@@ -2715,12 +2715,40 @@ vectorizable_simd_clone_call (gimple stmt, gimple_stmt_iterator *gsi,\n       else\n \tgcc_assert (thisarginfo.vectype != NULL_TREE);\n \n-      if (thisarginfo.dt != vect_constant_def\n-\t  && thisarginfo.dt != vect_external_def\n-\t  && loop_vinfo\n-\t  && TREE_CODE (op) == SSA_NAME\n-\t  && simple_iv (loop, loop_containing_stmt (stmt), op, &iv, false)\n-\t  && tree_fits_shwi_p (iv.step))\n+      /* For linear arguments, the analyze phase should have saved\n+\t the base and step in STMT_VINFO_SIMD_CLONE_INFO.  */\n+      if (i * 2 + 3 <= STMT_VINFO_SIMD_CLONE_INFO (stmt_info).length ()\n+\t  && STMT_VINFO_SIMD_CLONE_INFO (stmt_info)[i * 2 + 2])\n+\t{\n+\t  gcc_assert (vec_stmt);\n+\t  thisarginfo.linear_step\n+\t    = tree_to_shwi (STMT_VINFO_SIMD_CLONE_INFO (stmt_info)[i * 2 + 2]);\n+\t  thisarginfo.op\n+\t    = STMT_VINFO_SIMD_CLONE_INFO (stmt_info)[i * 2 + 1];\n+\t  /* If loop has been peeled for alignment, we need to adjust it.  */\n+\t  tree n1 = LOOP_VINFO_NITERS_UNCHANGED (loop_vinfo);\n+\t  tree n2 = LOOP_VINFO_NITERS (loop_vinfo);\n+\t  if (n1 != n2)\n+\t    {\n+\t      tree bias = fold_build2 (MINUS_EXPR, TREE_TYPE (n1), n1, n2);\n+\t      tree step = STMT_VINFO_SIMD_CLONE_INFO (stmt_info)[i * 2 + 2];\n+\t      tree opt = TREE_TYPE (thisarginfo.op);\n+\t      bias = fold_convert (TREE_TYPE (step), bias);\n+\t      bias = fold_build2 (MULT_EXPR, TREE_TYPE (step), bias, step);\n+\t      thisarginfo.op\n+\t\t= fold_build2 (POINTER_TYPE_P (opt)\n+\t\t\t       ? POINTER_PLUS_EXPR : PLUS_EXPR, opt,\n+\t\t\t       thisarginfo.op, bias);\n+\t    }\n+\t}\n+      else if (!vec_stmt\n+\t       && thisarginfo.dt != vect_constant_def\n+\t       && thisarginfo.dt != vect_external_def\n+\t       && loop_vinfo\n+\t       && TREE_CODE (op) == SSA_NAME\n+\t       && simple_iv (loop, loop_containing_stmt (stmt), op,\n+\t\t\t     &iv, false)\n+\t       && tree_fits_shwi_p (iv.step))\n \t{\n \t  thisarginfo.linear_step = tree_to_shwi (iv.step);\n \t  thisarginfo.op = iv.base;\n@@ -2735,8 +2763,8 @@ vectorizable_simd_clone_call (gimple stmt, gimple_stmt_iterator *gsi,\n \n   unsigned int badness = 0;\n   struct cgraph_node *bestn = NULL;\n-  if (STMT_VINFO_SIMD_CLONE_FNDECL (stmt_info))\n-    bestn = cgraph_node::get (STMT_VINFO_SIMD_CLONE_FNDECL (stmt_info));\n+  if (STMT_VINFO_SIMD_CLONE_INFO (stmt_info).exists ())\n+    bestn = cgraph_node::get (STMT_VINFO_SIMD_CLONE_INFO (stmt_info)[0]);\n   else\n     for (struct cgraph_node *n = node->simd_clones; n != NULL;\n \t n = n->simdclone->next_clone)\n@@ -2855,7 +2883,19 @@ vectorizable_simd_clone_call (gimple stmt, gimple_stmt_iterator *gsi,\n \n   if (!vec_stmt) /* transformation not required.  */\n     {\n-      STMT_VINFO_SIMD_CLONE_FNDECL (stmt_info) = bestn->decl;\n+      STMT_VINFO_SIMD_CLONE_INFO (stmt_info).safe_push (bestn->decl);\n+      for (i = 0; i < nargs; i++)\n+\tif (bestn->simdclone->args[i].arg_type\n+\t    == SIMD_CLONE_ARG_TYPE_LINEAR_CONSTANT_STEP)\n+\t  {\n+\t    STMT_VINFO_SIMD_CLONE_INFO (stmt_info).safe_grow_cleared (i * 2\n+\t\t\t\t\t\t\t\t\t+ 1);\n+\t    STMT_VINFO_SIMD_CLONE_INFO (stmt_info).safe_push (arginfo[i].op);\n+\t    tree lst = POINTER_TYPE_P (TREE_TYPE (arginfo[i].op))\n+\t\t       ? size_type_node : TREE_TYPE (arginfo[i].op);\n+\t    tree ls = build_int_cst (lst, arginfo[i].linear_step);\n+\t    STMT_VINFO_SIMD_CLONE_INFO (stmt_info).safe_push (ls);\n+\t  }\n       STMT_VINFO_TYPE (stmt_info) = call_simd_clone_vec_info_type;\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n@@ -7479,6 +7519,7 @@ free_stmt_vec_info (gimple stmt)\n     }\n \n   STMT_VINFO_SAME_ALIGN_REFS (stmt_info).release ();\n+  STMT_VINFO_SIMD_CLONE_INFO (stmt_info).release ();\n   set_vinfo_for_stmt (stmt, NULL);\n   free (stmt_info);\n }"}, {"sha": "c37eb202ea501a62dfbbe4f19c4939f04826dc61", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=6c9e85fb8b2fffbdac9c3170c98497d6d1bdc26b", "patch": "@@ -602,8 +602,10 @@ typedef struct _stmt_vec_info {\n      of this stmt.  */\n   vec<dr_p> same_align_refs;\n \n-  /* Selected SIMD clone's function decl.  */\n-  tree simd_clone_fndecl;\n+  /* Selected SIMD clone's function info.  First vector element\n+     is SIMD clone's function decl, followed by a pair of trees (base + step)\n+     for linear arguments (pair of NULLs for other arguments).  */\n+  vec<tree> simd_clone_info;\n \n   /* Classify the def of this stmt.  */\n   enum vect_def_type def_type;\n@@ -677,7 +679,7 @@ typedef struct _stmt_vec_info {\n #define STMT_VINFO_RELATED_STMT(S)         (S)->related_stmt\n #define STMT_VINFO_PATTERN_DEF_SEQ(S)      (S)->pattern_def_seq\n #define STMT_VINFO_SAME_ALIGN_REFS(S)      (S)->same_align_refs\n-#define STMT_VINFO_SIMD_CLONE_FNDECL(S)\t   (S)->simd_clone_fndecl\n+#define STMT_VINFO_SIMD_CLONE_INFO(S)\t   (S)->simd_clone_info\n #define STMT_VINFO_DEF_TYPE(S)             (S)->def_type\n #define STMT_VINFO_GROUP_FIRST_ELEMENT(S)  (S)->first_element\n #define STMT_VINFO_GROUP_NEXT_ELEMENT(S)   (S)->next_element"}]}