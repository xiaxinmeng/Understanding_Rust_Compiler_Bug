{"sha": "5cc200fcf0b382bb7509f26eb8bd9cc6538e255d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjMjAwZmNmMGIzODJiYjc1MDlmMjZlYjhiZDljYzY1MzhlMjU1ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-30T18:49:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-30T18:49:20Z"}, "message": "c-typeck.c (build_unary_op): Don't expand ADDR_EXPR of a COMPONENT_REF to pointer arithmetic.\n\n        * c-typeck.c (build_unary_op): Don't expand ADDR_EXPR of a\n        COMPONENT_REF to pointer arithmetic.\n        * varasm.c (initializer_constant_valid_p): Allow \"&(*c).f\", for\n        constant \"c\" as a valid constant initializer.  Allow narrowing of\n        differences against the same base object, for any base object.\n\nFrom-SVN: r86794", "tree": {"sha": "b64b1c02953ecd652d493aee5e592cde95eaf88b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b64b1c02953ecd652d493aee5e592cde95eaf88b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cc200fcf0b382bb7509f26eb8bd9cc6538e255d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc200fcf0b382bb7509f26eb8bd9cc6538e255d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc200fcf0b382bb7509f26eb8bd9cc6538e255d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc200fcf0b382bb7509f26eb8bd9cc6538e255d/comments", "author": null, "committer": null, "parents": [{"sha": "1c340cb66c5a3f1d3e0fcc88100ebacb33c78f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c340cb66c5a3f1d3e0fcc88100ebacb33c78f1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c340cb66c5a3f1d3e0fcc88100ebacb33c78f1f"}], "stats": {"total": 94, "additions": 52, "deletions": 42}, "files": [{"sha": "15a9897ae95a67a515e8e0b3780a4063a952738a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc200fcf0b382bb7509f26eb8bd9cc6538e255d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc200fcf0b382bb7509f26eb8bd9cc6538e255d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cc200fcf0b382bb7509f26eb8bd9cc6538e255d", "patch": "@@ -1,3 +1,11 @@\n+2004-08-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-typeck.c (build_unary_op): Don't expand ADDR_EXPR of a \n+\tCOMPONENT_REF to pointer arithmetic.\n+\t* varasm.c (initializer_constant_valid_p): Allow \"&(*c).f\", for\n+\tconstant \"c\" as a valid constant initializer.  Allow narrowing of\n+\tdifferences against the same base object, for any base object.\n+\n 2004-08-30  Richard Henderson  <rth@redhat.com>\n \n \t* expr.c (expand_expr_addr_expr): New."}, {"sha": "6e7bbfe7ef79bd5ce7689c047c78deca598c9214", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc200fcf0b382bb7509f26eb8bd9cc6538e255d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc200fcf0b382bb7509f26eb8bd9cc6538e255d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5cc200fcf0b382bb7509f26eb8bd9cc6538e255d", "patch": "@@ -2514,44 +2514,24 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \t\t\t\t\t  TREE_READONLY (arg),\n \t\t\t\t\t  TREE_THIS_VOLATILE (arg));\n \n-      argtype = build_pointer_type (argtype);\n-\n       if (!c_mark_addressable (arg))\n \treturn error_mark_node;\n \n-      {\n-\ttree addr;\n-\n-\tif (TREE_CODE (arg) == COMPONENT_REF)\n-\t  {\n-\t    tree field = TREE_OPERAND (arg, 1);\n-\n-\t    addr = build_unary_op (ADDR_EXPR, TREE_OPERAND (arg, 0), flag);\n-\n-\t    if (DECL_C_BIT_FIELD (field))\n-\t      {\n-\t\terror (\"attempt to take address of bit-field structure member `%s'\",\n-\t\t       IDENTIFIER_POINTER (DECL_NAME (field)));\n-\t\treturn error_mark_node;\n-\t      }\n+      if (TREE_CODE (arg) == COMPONENT_REF\n+\t  && DECL_C_BIT_FIELD (TREE_OPERAND (arg, 1)))\n+\t{\n+\t  error (\"attempt to take address of bit-field structure member `%D'\",\n+\t\t TREE_OPERAND (arg, 1));\n+\t  return error_mark_node;\n+\t}\n \n-\t    addr = fold (build2 (PLUS_EXPR, argtype,\n-\t\t\t\t convert (argtype, addr),\n-\t\t\t\t convert (argtype, byte_position (field))));\n-\t    \n-\t    /* If the folded PLUS_EXPR is not a constant address, wrap\n-               it in an ADDR_EXPR.  */\n-\t    if (!TREE_CONSTANT (addr))\n-\t      addr = build1 (ADDR_EXPR, argtype, arg);\n-\t  }\n-\telse\n-\t  addr = build1 (ADDR_EXPR, argtype, arg);\n+      argtype = build_pointer_type (argtype);\n+      val = build1 (ADDR_EXPR, argtype, arg);\n \n-\tif (TREE_CODE (arg) == COMPOUND_LITERAL_EXPR)\n-\t  TREE_INVARIANT (addr) = TREE_CONSTANT (addr) = 1;\n+      if (TREE_CODE (arg) == COMPOUND_LITERAL_EXPR)\n+\tTREE_INVARIANT (val) = TREE_CONSTANT (val) = 1;\n \n-\treturn addr;\n-      }\n+      return val;\n \n     default:\n       break;"}, {"sha": "693196eaca8a3383800d31cbfb3f2c379146608f", "filename": "gcc/varasm.c", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc200fcf0b382bb7509f26eb8bd9cc6538e255d/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc200fcf0b382bb7509f26eb8bd9cc6538e255d/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=5cc200fcf0b382bb7509f26eb8bd9cc6538e255d", "patch": "@@ -3463,7 +3463,14 @@ initializer_constant_valid_p (tree value, tree endtype)\n \n     case ADDR_EXPR:\n     case FDESC_EXPR:\n-      return staticp (TREE_OPERAND (value, 0)) ? TREE_OPERAND (value, 0) : 0;\n+      value = staticp (TREE_OPERAND (value, 0));\n+      /* \"&(*a).f\" is like unto pointer arithmetic.  If \"a\" turns out to\n+\t be a constant, this is old-skool offsetof-like nonsense.  */\n+      if (value\n+\t  && TREE_CODE (value) == INDIRECT_REF\n+\t  && TREE_CONSTANT (TREE_OPERAND (value, 0)))\n+\treturn null_pointer_node;\n+      return value;\n \n     case VIEW_CONVERT_EXPR:\n     case NON_LVALUE_EXPR:\n@@ -3565,16 +3572,17 @@ initializer_constant_valid_p (tree value, tree endtype)\n \t  /* Since GCC guarantees that string constants are unique in the\n \t     generated code, a subtraction between two copies of the same\n \t     constant string is absolute.  */\n-\t  if (valid0 && TREE_CODE (valid0) == STRING_CST &&\n-\t      valid1 && TREE_CODE (valid1) == STRING_CST &&\n-\t      TREE_STRING_POINTER (valid0) == TREE_STRING_POINTER (valid1))\n+\t  if (valid0 && TREE_CODE (valid0) == STRING_CST\n+\t      && valid1 && TREE_CODE (valid1) == STRING_CST\n+\t      && operand_equal_p (valid0, valid1, 1))\n \t    return null_pointer_node;\n \t}\n \n-      /* Support differences between labels.  */\n+      /* Support narrowing differences.  */\n       if (INTEGRAL_TYPE_P (endtype))\n \t{\n \t  tree op0, op1;\n+\n \t  op0 = TREE_OPERAND (value, 0);\n \t  op1 = TREE_OPERAND (value, 1);\n \n@@ -3609,11 +3617,25 @@ initializer_constant_valid_p (tree value, tree endtype)\n \t      op1 = inner;\n \t    }\n \n-\t  if (TREE_CODE (op0) == ADDR_EXPR\n-\t      && TREE_CODE (TREE_OPERAND (op0, 0)) == LABEL_DECL\n-\t      && TREE_CODE (op1) == ADDR_EXPR\n-\t      && TREE_CODE (TREE_OPERAND (op1, 0)) == LABEL_DECL)\n-\t    return null_pointer_node;\n+\t  op0 = initializer_constant_valid_p (op0, endtype);\n+\t  op1 = initializer_constant_valid_p (op1, endtype);\n+\n+\t  /* Both initializers must be known.  */\n+\t  if (op0 && op1)\n+\t    {\n+\t      if (op0 == op1)\n+\t\treturn null_pointer_node;\n+\n+\t      /* Support differences between labels.  */\n+\t      if (TREE_CODE (op0) == LABEL_DECL\n+\t\t  && TREE_CODE (op1) == LABEL_DECL)\n+\t\treturn null_pointer_node;\n+\n+\t      if (TREE_CODE (op0) == STRING_CST\n+\t\t  && TREE_CODE (op1) == STRING_CST\n+\t\t  && operand_equal_p (op0, op1, 1))\n+\t\treturn null_pointer_node;\n+\t    }\n \t}\n       break;\n "}]}