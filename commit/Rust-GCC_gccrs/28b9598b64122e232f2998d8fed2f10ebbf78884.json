{"sha": "28b9598b64122e232f2998d8fed2f10ebbf78884", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhiOTU5OGI2NDEyMmUyMzJmMjk5OGQ4ZmVkMmYxMGViYmY3ODg4NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-21T14:34:26Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-21T14:34:26Z"}, "message": "compiler: omit write barrier for assignment to *(convert(&local))\n    \n    Assignments to local variables don't need a write barrier. But\n    currently the compiler inserts a write barrier if the LHS is a\n    local variable with type converted, as *(convert(&local)). Let\n    the compiler recognize this pattern and omit the write barrier.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/182541\n\nFrom-SVN: r272550", "tree": {"sha": "61e15520c182ee2d61f3e78111672e36494dc133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61e15520c182ee2d61f3e78111672e36494dc133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28b9598b64122e232f2998d8fed2f10ebbf78884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b9598b64122e232f2998d8fed2f10ebbf78884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28b9598b64122e232f2998d8fed2f10ebbf78884", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b9598b64122e232f2998d8fed2f10ebbf78884/comments", "author": null, "committer": null, "parents": [{"sha": "c9b236e5cafaea9d09ff8102140c72eb3d70e302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b236e5cafaea9d09ff8102140c72eb3d70e302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b236e5cafaea9d09ff8102140c72eb3d70e302"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "4bc337c7c5466d461d485d019e49ab9a4bf43a8c", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b9598b64122e232f2998d8fed2f10ebbf78884/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b9598b64122e232f2998d8fed2f10ebbf78884/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=28b9598b64122e232f2998d8fed2f10ebbf78884", "patch": "@@ -1,4 +1,4 @@\n-62e3a8cc0a862b0abd3d0b1ef6cf4b228992a137\n+593f94f008c24f5abfe7f917a717cf2b0a2585e2\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "501ad6a8ca208426f715ef22d316eaed0fc538fb", "filename": "gcc/go/gofrontend/wb.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b9598b64122e232f2998d8fed2f10ebbf78884/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b9598b64122e232f2998d8fed2f10ebbf78884/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fwb.cc?ref=28b9598b64122e232f2998d8fed2f10ebbf78884", "patch": "@@ -735,6 +735,26 @@ Gogo::assign_needs_write_barrier(Expression* lhs)\n \t}\n     }\n \n+  // Nothing to do for an assignment to *(convert(&x)) where\n+  // x is local variable or a temporary variable.\n+  Unary_expression* ue = lhs->unary_expression();\n+  if (ue != NULL && ue->op() == OPERATOR_MULT)\n+    {\n+      Expression* expr = ue->operand();\n+      while (true)\n+        {\n+          if (expr->conversion_expression() != NULL)\n+            expr = expr->conversion_expression()->expr();\n+          else if (expr->unsafe_conversion_expression() != NULL)\n+            expr = expr->unsafe_conversion_expression()->expr();\n+          else\n+            break;\n+        }\n+      ue = expr->unary_expression();\n+      if (ue != NULL && ue->op() == OPERATOR_AND)\n+        return this->assign_needs_write_barrier(ue->operand());\n+    }\n+\n   // For a struct assignment, we don't need a write barrier if all the\n   // pointer types can not be in the heap.\n   Struct_type* st = lhs->type()->struct_type();"}]}