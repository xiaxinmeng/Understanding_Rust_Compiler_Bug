{"sha": "633221dbab4b06bae16c5cd3b6da0c91608fb5ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMzMjIxZGJhYjRiMDZiYWUxNmM1Y2QzYjZkYTBjOTE2MDhmYjVmZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-10T09:02:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-10T09:02:06Z"}, "message": "PR c++ 9483\n\ncp:\n\tPR c++ 9483\n\t* class.c (check_field_decls): Pass DECL_NAME to constructor_name_p.\n\t* decl2.c (constructor_name_p): Avoid repeated constructor_name\n\tcalls.\n\t* decl.c (grokdeclarator): Refactor ctor/dtor detection.\ntestsuite:\n\tPR c++ 9483\n\t* g++.dg/other/field1.C: New test.\n\nFrom-SVN: r69180", "tree": {"sha": "76650e1120092ea70d8d68f3ac66639be6583a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76650e1120092ea70d8d68f3ac66639be6583a19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/633221dbab4b06bae16c5cd3b6da0c91608fb5ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/633221dbab4b06bae16c5cd3b6da0c91608fb5ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/633221dbab4b06bae16c5cd3b6da0c91608fb5ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/633221dbab4b06bae16c5cd3b6da0c91608fb5ff/comments", "author": null, "committer": null, "parents": [{"sha": "31c56a8ba7c10ccacfa1f3566d8eb16dddadbfd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31c56a8ba7c10ccacfa1f3566d8eb16dddadbfd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31c56a8ba7c10ccacfa1f3566d8eb16dddadbfd2"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "0f91172fcccc97c5ba0f93682c9d51cfdfded804", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633221dbab4b06bae16c5cd3b6da0c91608fb5ff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633221dbab4b06bae16c5cd3b6da0c91608fb5ff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=633221dbab4b06bae16c5cd3b6da0c91608fb5ff", "patch": "@@ -1,3 +1,11 @@\n+2003-07-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++ 9483\n+\t* class.c (check_field_decls): Pass DECL_NAME to constructor_name_p.\n+\t* decl2.c (constructor_name_p): Avoid repeated constructor_name\n+\tcalls.\n+\t* decl.c (grokdeclarator): Refactor ctor/dtor detection.\n+\n 2003-07-09  Mark Mitchell  <mark@codesourcery.com>\n \n \t* typeck.c (build_x_unary_op): Take note of the fact that"}, {"sha": "bac2e0974a2112f30c60b34e0494280cd992b31c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633221dbab4b06bae16c5cd3b6da0c91608fb5ff/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633221dbab4b06bae16c5cd3b6da0c91608fb5ff/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=633221dbab4b06bae16c5cd3b6da0c91608fb5ff", "patch": "@@ -3177,7 +3177,7 @@ check_field_decls (tree t, tree *access_decls,\n       /* Core issue 80: A nonstatic data member is required to have a\n \t different name from the class iff the class has a\n \t user-defined constructor.  */\n-      if (constructor_name_p (x, t) && TYPE_HAS_CONSTRUCTOR (t))\n+      if (constructor_name_p (DECL_NAME (x), t) && TYPE_HAS_CONSTRUCTOR (t))\n \tcp_pedwarn_at (\"field `%#D' with same name as class\", x);\n \n       /* We set DECL_C_BIT_FIELD in grokbitfield."}, {"sha": "8ed521341d4ab43c0ff9d72aff0fe20ca1987fa9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633221dbab4b06bae16c5cd3b6da0c91608fb5ff/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633221dbab4b06bae16c5cd3b6da0c91608fb5ff/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=633221dbab4b06bae16c5cd3b6da0c91608fb5ff", "patch": "@@ -9911,16 +9911,19 @@ grokdeclarator (tree declarator,\n \t      decl = *next;\n \t      if (ctype)\n \t\t{\n-\t\t  if (TREE_CODE (decl) == IDENTIFIER_NODE\n-\t\t      && constructor_name_p (decl, ctype))\n+\t\t  tree name = decl;\n+\n+\t\t  if (TREE_CODE (name) == BIT_NOT_EXPR)\n+\t\t    name = TREE_OPERAND (name, 0);\n+\n+\t\t  if (!constructor_name_p (decl, ctype))\n+\t\t    ;\n+\t\t  else if (decl == name)\n \t\t    {\n \t\t      sfk = sfk_constructor;\n \t\t      ctor_return_type = ctype;\n \t\t    }\n-\t\t  else if (TREE_CODE (decl) == BIT_NOT_EXPR\n-\t\t\t   && TREE_CODE (TREE_OPERAND (decl, 0)) == IDENTIFIER_NODE\n-\t\t\t   && constructor_name_p (TREE_OPERAND (decl, 0),\n-\t\t\t\t\t\t  ctype))\n+\t\t  else\n \t\t    {\n \t\t      sfk = sfk_destructor;\n \t\t      ctor_return_type = ctype;"}, {"sha": "9a0185bd75e85723e04ead8adffff6bab6ff22ba", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633221dbab4b06bae16c5cd3b6da0c91608fb5ff/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633221dbab4b06bae16c5cd3b6da0c91608fb5ff/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=633221dbab4b06bae16c5cd3b6da0c91608fb5ff", "patch": "@@ -1190,8 +1190,21 @@ constructor_name (tree type)\n bool\n constructor_name_p (tree name, tree type)\n {\n-  return (name == constructor_name (type)\n-\t  || name == constructor_name_full (type));\n+  tree ctor_name;\n+\n+  if (!name)\n+    return false;\n+  \n+  if (TREE_CODE (name) != IDENTIFIER_NODE)\n+    return false;\n+  \n+  ctor_name = constructor_name_full (type);\n+  if (name == ctor_name)\n+    return true;\n+  if (IDENTIFIER_TEMPLATE (ctor_name)\n+      && name == IDENTIFIER_TEMPLATE (ctor_name))\n+    return true;\n+  return false;\n }\n \n \f"}, {"sha": "3afe3d908de5fc05212d19d956e883d5356fb894", "filename": "gcc/testsuite/g++.dg/other/field1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633221dbab4b06bae16c5cd3b6da0c91608fb5ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633221dbab4b06bae16c5cd3b6da0c91608fb5ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffield1.C?ref=633221dbab4b06bae16c5cd3b6da0c91608fb5ff", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 9 Jul 2003 <nathan@codesourcery.com>\n+\n+// PR c++ 9483.  accepted fields with same name as class\n+\n+struct test\n+{\n+  char test;  // { dg-error \"with same name as class\" \"\" }\n+  test();\n+};\n+\n+template <typename T> struct X\n+{\n+  char X;  // { dg-error \"with same name as class\" \"\" }\n+  X ();\n+};\n+\n+template <> struct X<int> {\n+  char X;  // { dg-error \"with same name as class\" \"\" }\n+  X();\n+};\n+\n+X<float> i; // { dg-error \"instantiated from\" \"\" }"}]}