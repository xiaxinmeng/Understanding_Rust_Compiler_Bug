{"sha": "c0129d6b2a5f2b3cfedd213d48c95581f75312aa", "node_id": "C_kwDOANBUbNoAKGMwMTI5ZDZiMmE1ZjJiM2NmZWRkMjEzZDQ4Yzk1NTgxZjc1MzEyYWE", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-02T08:46:47Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-03T11:06:25Z"}, "message": "Do not pessimize range in set_nonzero_bits.\n\nCurrently if we have a range of [0,0] and we set the nonzero bits to\n1, the current code pessimizes the range to [0,1] because it assumes\nthe range is [1,1] plus the possibility of 0.  This fixes the\noversight.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (irange::set_nonzero_bits): Do not pessimize range.\n\t(range_tests_nonzero_bits): New test.", "tree": {"sha": "513c7d1239f83a03e4dd455241b37ff567992693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/513c7d1239f83a03e4dd455241b37ff567992693"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0129d6b2a5f2b3cfedd213d48c95581f75312aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0129d6b2a5f2b3cfedd213d48c95581f75312aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0129d6b2a5f2b3cfedd213d48c95581f75312aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0129d6b2a5f2b3cfedd213d48c95581f75312aa/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f6f1f521fc12d4dbbdd0766d8fb7121d1e5ea8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f6f1f521fc12d4dbbdd0766d8fb7121d1e5ea8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f6f1f521fc12d4dbbdd0766d8fb7121d1e5ea8d"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "6e196574de9109e25b564ab2b6735dfe3b49731e", "filename": "gcc/value-range.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0129d6b2a5f2b3cfedd213d48c95581f75312aa/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0129d6b2a5f2b3cfedd213d48c95581f75312aa/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=c0129d6b2a5f2b3cfedd213d48c95581f75312aa", "patch": "@@ -2934,6 +2934,14 @@ irange::set_nonzero_bits (const wide_int_ref &bits)\n   // range immediately.\n   if (wi::popcount (bits) == 1)\n     {\n+      // Make sure we don't pessimize the range.\n+      tree tbits = wide_int_to_tree (type (), bits);\n+      if (!contains_p (tbits))\n+\t{\n+\t  set_nonzero_bits (tbits);\n+\t  return;\n+\t}\n+\n       bool has_zero = contains_p (build_zero_cst (type ()));\n       set (type (), bits, bits);\n       if (has_zero)\n@@ -3628,6 +3636,11 @@ range_tests_nonzero_bits ()\n   r1.set_nonzero_bits (0xff);\n   r0.union_ (r1);\n   ASSERT_TRUE (r0.varying_p ());\n+\n+  // Test that setting a nonzero bit of 1 does not pessimize the range.\n+  r0.set_zero (integer_type_node);\n+  r0.set_nonzero_bits (1);\n+  ASSERT_TRUE (r0.zero_p ());\n }\n \n // Build an frange from string endpoints."}]}