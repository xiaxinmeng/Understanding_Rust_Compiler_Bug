{"sha": "056e6860b3a3f915b499a9e7be48f49da2c04850", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2ZTY4NjBiM2EzZjkxNWI0OTlhOWU3YmU0OGY0OWRhMmMwNDg1MA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-09-22T18:44:01Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-09-22T18:44:01Z"}, "message": "re PR middle-end/41453 (use INTENT(out) for optimization)\n\n2018-09-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/41453\n\t* trans.h (gfc_conv_expr_reference): Add optional argument\n\tadd_clobber to prototype.\n\t(gfc_conv_procedure_call):  Set add_clobber argument to\n\tgfc_conv_procedure_reference to true for scalar, INTENT(OUT),\n\tnon-pointer, non-allocatable, non-dummy variables whose type\n\tis neither BT_CHARACTER, BT_DERIVED or BT_CLASS, but only if\n\tthe procedure is not elemental.\n\t* trans-expr.c (gfc_conv_procedure_reference): Add clobber\n\tstatement before call if add_clobber is set.\n\n2018-09-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/41453\n\t* gfortran.dg/intent_optimize_2.f90: New test.\n\nFrom-SVN: r264506", "tree": {"sha": "efba4c14d83c1c69cafcbf03c2c2db4ab500a286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efba4c14d83c1c69cafcbf03c2c2db4ab500a286"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056e6860b3a3f915b499a9e7be48f49da2c04850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056e6860b3a3f915b499a9e7be48f49da2c04850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056e6860b3a3f915b499a9e7be48f49da2c04850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056e6860b3a3f915b499a9e7be48f49da2c04850/comments", "author": null, "committer": null, "parents": [{"sha": "73a958c67e3c99e10724dc65c4cb738da6188e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a958c67e3c99e10724dc65c4cb738da6188e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a958c67e3c99e10724dc65c4cb738da6188e34"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "6a7f7f26720ca69ae00405f397f955ab67674284", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056e6860b3a3f915b499a9e7be48f49da2c04850/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056e6860b3a3f915b499a9e7be48f49da2c04850/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=056e6860b3a3f915b499a9e7be48f49da2c04850", "patch": "@@ -1,3 +1,16 @@\n+2018-09-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/41453\n+\t* trans.h (gfc_conv_expr_reference): Add optional argument\n+\tadd_clobber to prototype.\n+\t(gfc_conv_procedure_call):  Set add_clobber argument to\n+\tgfc_conv_procedure_reference to true for scalar, INTENT(OUT),\n+\tnon-pointer, non-allocatable, non-dummy variables whose type\n+\tis neither BT_CHARACTER, BT_DERIVED or BT_CLASS, but only if\n+\tthe procedure is not elemental.\n+\t* trans-expr.c (gfc_conv_procedure_reference): Add clobber\n+\tstatement before call if add_clobber is set.\n+\n 2018-09-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/85603"}, {"sha": "ae86d59272de16a4c8f26ed953aa10d26cbc031e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056e6860b3a3f915b499a9e7be48f49da2c04850/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056e6860b3a3f915b499a9e7be48f49da2c04850/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=056e6860b3a3f915b499a9e7be48f49da2c04850", "patch": "@@ -5276,8 +5276,17 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t}\n \t\t    }\n \t\t  else\n-\t\t    gfc_conv_expr_reference (&parmse, e);\n-\n+\t\t    {\n+\t\t      bool add_clobber;\n+\t\t      add_clobber = fsym && fsym->attr.intent == INTENT_OUT\n+\t\t\t&& !fsym->attr.allocatable && !fsym->attr.pointer\n+\t\t\t&& !e->symtree->n.sym->attr.pointer\n+\t\t\t&& !e->symtree->n.sym->attr.dummy  /* See PR 41453.  */\n+\t\t\t&& e->ts.type != BT_CHARACTER && e->ts.type != BT_DERIVED\n+\t\t\t&& e->ts.type != BT_CLASS && !sym->attr.elemental;\n+\n+\t\t      gfc_conv_expr_reference (&parmse, e, add_clobber);\n+\t\t    }\n \t\t  /* Catch base objects that are not variables.  */\n \t\t  if (e->ts.type == BT_CLASS\n \t\t\t&& e->expr_type != EXPR_VARIABLE\n@@ -8060,7 +8069,7 @@ gfc_conv_expr_type (gfc_se * se, gfc_expr * expr, tree type)\n    values only.  */\n \n void\n-gfc_conv_expr_reference (gfc_se * se, gfc_expr * expr)\n+gfc_conv_expr_reference (gfc_se * se, gfc_expr * expr, bool add_clobber)\n {\n   gfc_ss *ss;\n   tree var;\n@@ -8100,6 +8109,16 @@ gfc_conv_expr_reference (gfc_se * se, gfc_expr * expr)\n \t  gfc_add_block_to_block (&se->pre, &se->post);\n \t  se->expr = var;\n \t}\n+      else if (add_clobber)\n+\t{\n+\t  tree clobber;\n+\t  tree var;\n+\t  /* FIXME: This fails if var is passed by reference, see PR\n+\t     41453.  */\n+\t  var = expr->symtree->n.sym->backend_decl;\n+\t  clobber = build_clobber (TREE_TYPE (var));\n+\t  gfc_add_modify (&se->pre, var, clobber);\n+\t}\n       return;\n     }\n "}, {"sha": "4f33a89eddc55f70eb242fd4e5d61de113680289", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056e6860b3a3f915b499a9e7be48f49da2c04850/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056e6860b3a3f915b499a9e7be48f49da2c04850/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=056e6860b3a3f915b499a9e7be48f49da2c04850", "patch": "@@ -485,7 +485,8 @@ tree gfc_build_compare_string (tree, tree, tree, tree, int, enum tree_code);\n void gfc_conv_expr (gfc_se * se, gfc_expr * expr);\n void gfc_conv_expr_val (gfc_se * se, gfc_expr * expr);\n void gfc_conv_expr_lhs (gfc_se * se, gfc_expr * expr);\n-void gfc_conv_expr_reference (gfc_se * se, gfc_expr *);\n+void gfc_conv_expr_reference (gfc_se * se, gfc_expr * expr,\n+\t\t\t      bool add_clobber = false);\n void gfc_conv_expr_type (gfc_se * se, gfc_expr *, tree);\n \n "}, {"sha": "d26e494c6dddd75df9e3e3bbf45a55e61f26fc0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056e6860b3a3f915b499a9e7be48f49da2c04850/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056e6860b3a3f915b499a9e7be48f49da2c04850/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=056e6860b3a3f915b499a9e7be48f49da2c04850", "patch": "@@ -1,3 +1,8 @@\n+2018-09-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/41453\n+\t* gfortran.dg/intent_optimize_2.f90: New test.\n+\n 2018-09-22  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/87318"}, {"sha": "47632bb7c0139746ee21a7a29c7d8f207a26b57b", "filename": "gcc/testsuite/gfortran.dg/intent_optimize_2.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056e6860b3a3f915b499a9e7be48f49da2c04850/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_optimize_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056e6860b3a3f915b499a9e7be48f49da2c04850/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_optimize_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_optimize_2.f90?ref=056e6860b3a3f915b499a9e7be48f49da2c04850", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-O -fno-inline -fdump-tree-optimized -fdump-tree-original\" }\n+! PR fortran/41453\n+! Check that there is one clobber in the *.original tree, plus that\n+! the constant 123456789 has been removed due to the INTENT(OUT).\n+\n+module x\n+implicit none\n+contains\n+  subroutine foo(a)\n+    integer, intent(out) :: a\n+    a = 42\n+  end subroutine foo\n+end module x\n+\n+program main\n+  use x\n+  implicit none\n+  integer :: a\n+  a = 123456789\n+  call foo(a)\n+  print *,a\n+end program main\n+\n+! { dg-final { scan-tree-dump-times \"123456789\" 0 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"CLOBBER\" 1 \"original\" } }"}]}