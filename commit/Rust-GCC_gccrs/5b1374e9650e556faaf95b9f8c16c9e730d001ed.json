{"sha": "5b1374e9650e556faaf95b9f8c16c9e730d001ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIxMzc0ZTk2NTBlNTU2ZmFhZjk1YjlmOGMxNmM5ZTczMGQwMDFlZA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-10-04T21:30:32Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-10-04T21:30:32Z"}, "message": "re PR fortran/17776 (no subroutine system)\n\nfortran/\nPR fortran/17776\n* check.c (gfc_check_system_sub): New function.\n* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_SYSTEM.\n* intrinsic.c (add_functions): Add 'system'.\n(add_subroutines): Add 'system'.\n* intrinsic.h (gfc_check_etime_sub, gfc_check_getcwd_sub):\nMove prototypes to other suborutines.\n(gfc_check_system_sub, gfc_resolve_system, gfc_resolve_system_sub):\nAdd prototype.\n(gfc_resolve_system_clock): Fix formatting of prototype.\n* iresolve.c (gfc_resolve_system, gfc_resolve_system_sub): New\nfunctions.\n* trans-intrinsic.c (gfc_conv_intrinsic_function): Deal with\nGFC_ISYM_SYSTEM.\n\nlibgfortran/\nPR fortran/17776\n* intrinsics/system.c: New file.\n* Makefile.am: Add dependency for the new file.\n* Makefile.in: Regenerate.\n\nFrom-SVN: r88532", "tree": {"sha": "8fc6d2fea1b1e4f419fa9262f4e6faa4f4e68471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fc6d2fea1b1e4f419fa9262f4e6faa4f4e68471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b1374e9650e556faaf95b9f8c16c9e730d001ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1374e9650e556faaf95b9f8c16c9e730d001ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b1374e9650e556faaf95b9f8c16c9e730d001ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1374e9650e556faaf95b9f8c16c9e730d001ed/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73a014b5498d4d6ea86796cca4a97973c9a847cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a014b5498d4d6ea86796cca4a97973c9a847cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a014b5498d4d6ea86796cca4a97973c9a847cd"}], "stats": {"total": 165, "additions": 156, "deletions": 9}, "files": [{"sha": "4260ff4ee6ddf0fc0ec4b6887e6bb2be176c525d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5b1374e9650e556faaf95b9f8c16c9e730d001ed", "patch": "@@ -24,7 +24,21 @@\n \t(parse_do_block): Generate possible END DO label inside END DO\n \tblock.\n \n-\t\n+\tPR fortran/17776\n+\t* check.c (gfc_check_system_sub): New function.\n+\t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_SYSTEM.\n+\t* intrinsic.c (add_functions): Add 'system'.\n+\t(add_subroutines): Add 'system'.\n+\t* intrinsic.h (gfc_check_etime_sub, gfc_check_getcwd_sub):\n+\tMove prototypes to other suborutines.\n+\t(gfc_check_system_sub, gfc_resolve_system, gfc_resolve_system_sub):\n+\tAdd prototype.\n+\t(gfc_resolve_system_clock): Fix formatting of prototype.\n+\t* iresolve.c (gfc_resolve_system, gfc_resolve_system_sub): New\n+\tfunctions.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Deal with\n+\tGFC_ISYM_SYSTEM.\n+\n 2004-10-04  Erik Schnetter  <schnetter@aei.mpg.de>\n \n \t* scanner.c (preprocessor_line): Accept preprocessor lines without"}, {"sha": "a22acf062cfd618f8f2b7caab1b12a8019a534a3", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=5b1374e9650e556faaf95b9f8c16c9e730d001ed", "patch": "@@ -2110,3 +2110,22 @@ gfc_check_getcwd_sub (gfc_expr * cwd, gfc_expr * status)\n \n   return SUCCESS;\n }\n+\n+\n+try\n+gfc_check_system_sub (gfc_expr * cmd, gfc_expr * status)\n+{\n+  if (type_check (cmd, 0, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (status, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (status, 1, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check (status, 1, gfc_default_integer_kind) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}"}, {"sha": "25b7192ba717bc3a555061f628f2f490943888ee", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=5b1374e9650e556faaf95b9f8c16c9e730d001ed", "patch": "@@ -379,6 +379,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_SQRT,\n   GFC_ISYM_SR_KIND,\n   GFC_ISYM_SUM,\n+  GFC_ISYM_SYSTEM,\n   GFC_ISYM_TAN,\n   GFC_ISYM_TANH,\n   GFC_ISYM_TRANSFER,"}, {"sha": "aa358f0716ccacd4f3e29e6ae00ff3deba020a67", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=5b1374e9650e556faaf95b9f8c16c9e730d001ed", "patch": "@@ -1775,6 +1775,10 @@ add_functions (void)\n \n   make_generic (\"sum\", GFC_ISYM_SUM);\n \n+  add_sym_1 (\"system\", 1, 1, BT_INTEGER, di, NULL, NULL, NULL,\n+\t     c, BT_CHARACTER, dc, 0);\n+  make_generic (\"system\", GFC_ISYM_SYSTEM);\n+\n   add_sym_1 (\"tan\", 1, 1, BT_REAL, dr,\n \t     NULL, gfc_simplify_tan, gfc_resolve_tan, x, BT_REAL, dr, 0);\n \n@@ -1951,6 +1955,11 @@ add_subroutines (void)\n              gfc_check_srand, NULL, gfc_resolve_srand,\n              c, BT_INTEGER, 4, 0);\n \n+  add_sym_2s (\"system\", 0, 1, BT_UNKNOWN, 0,\n+\t      NULL, NULL, gfc_resolve_system_sub,\n+\t      c, BT_CHARACTER, dc, 0,\n+\t      st, BT_INTEGER, di, 1);\n+\n   add_sym_3s (\"system_clock\", 0, 1, BT_UNKNOWN, 0,\n \t     gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n \t     c, BT_INTEGER, di, 1, cr, BT_INTEGER, di, 1,"}, {"sha": "c9e1dc1c0afd8ff9d7b1832ea02693b4149e8463", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=5b1374e9650e556faaf95b9f8c16c9e730d001ed", "patch": "@@ -47,8 +47,6 @@ try gfc_check_digits (gfc_expr *);\n try gfc_check_dot_product (gfc_expr *, gfc_expr *);\n try gfc_check_eoshift (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_etime (gfc_expr *);\n-try gfc_check_etime_sub (gfc_expr *, gfc_expr *);\n-try gfc_check_getcwd_sub (gfc_expr *, gfc_expr *);\n try gfc_check_g77_math1 (gfc_expr *);\n try gfc_check_huge (gfc_expr *);\n try gfc_check_i (gfc_expr *);\n@@ -115,6 +113,9 @@ try gfc_check_mvbits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t      gfc_expr *);\n try gfc_check_random_number (gfc_expr *);\n try gfc_check_random_seed (gfc_expr *, gfc_expr *, gfc_expr *);\n+try gfc_check_etime_sub (gfc_expr *, gfc_expr *);\n+try gfc_check_getcwd_sub (gfc_expr *, gfc_expr *);\n+try gfc_check_system_sub (gfc_expr *, gfc_expr *);\n \n \n /* Simplification functions.  */\n@@ -311,6 +312,7 @@ void gfc_resolve_spread (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_sqrt (gfc_expr *, gfc_expr *);\n void gfc_resolve_srand (gfc_code *);\n void gfc_resolve_sum (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_system (gfc_expr *, gfc_expr *);\n void gfc_resolve_tan (gfc_expr *, gfc_expr *);\n void gfc_resolve_tanh (gfc_expr *, gfc_expr *);\n void gfc_resolve_transfer (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -323,8 +325,9 @@ void gfc_resolve_verify (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n \n /* Intrinsic subroutine resolution.  */\n void gfc_resolve_cpu_time (gfc_code *);\n+void gfc_resolve_system_sub (gfc_code *);\n+void gfc_resolve_system_clock (gfc_code *);\n void gfc_resolve_mvbits (gfc_code *);\n-void gfc_resolve_system_clock(gfc_code *);\n void gfc_resolve_random_number (gfc_code *);\n void gfc_resolve_getarg (gfc_code *);\n void gfc_resolve_getcwd_sub (gfc_code *);"}, {"sha": "82c9b209429a4f273b8d53c49e2905bca1af9079", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=5b1374e9650e556faaf95b9f8c16c9e730d001ed", "patch": "@@ -1302,6 +1302,17 @@ gfc_resolve_sum (gfc_expr * f, gfc_expr * array, gfc_expr * dim,\n }\n \n \n+/* Resolve the g77 compatibility function SYSTEM.  */\n+\n+void\n+gfc_resolve_system (gfc_expr * f, gfc_expr * n ATTRIBUTE_UNUSED)\n+{\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = 4;\n+  f->value.function.name = gfc_get_string (PREFIX(\"system\"));\n+}\n+\n+\n void\n gfc_resolve_tan (gfc_expr * f, gfc_expr * x)\n {\n@@ -1596,6 +1607,16 @@ gfc_resolve_get_environment_variable (gfc_code * code)\n   code->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n \n+/* Resolve the SYSTEM intrinsic subroutine.  */\n+\n+void\n+gfc_resolve_system_sub (gfc_code * c)\n+{\n+  const char *name;\n+\n+  name = gfc_get_string (PREFIX(\"system_sub\"));\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n \n /* Determine if the arguments to SYSTEM_CLOCK are INTEGER(4) or INTEGER(8) */\n "}, {"sha": "d4812acbaae29e819cb25dd32591410ead34bd9c", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1374e9650e556faaf95b9f8c16c9e730d001ed/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=5b1374e9650e556faaf95b9f8c16c9e730d001ed", "patch": "@@ -2973,6 +2973,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n     case GFC_ISYM_GETGID:\n     case GFC_ISYM_GETPID:\n     case GFC_ISYM_GETUID:\n+    case GFC_ISYM_SYSTEM:\n       gfc_conv_intrinsic_funcall (se, expr);\n       break;\n "}, {"sha": "a66c499cb84f61078b2347a31f0479c8069d4712", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1374e9650e556faaf95b9f8c16c9e730d001ed/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1374e9650e556faaf95b9f8c16c9e730d001ed/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=5b1374e9650e556faaf95b9f8c16c9e730d001ed", "patch": "@@ -12,6 +12,11 @@\n \t* Makefile.in: Regenerate.\n \t* intrinsics/mvbits.h: New file.\n \n+\tPR fortran/17776\n+\t* intrinsics/system.c: New file.\n+\t* Makefile.am: Add dependency for the new file.\n+\t* Makefile.in: Regenerate.\n+\n 2004-10-04  Paul Brook  <paul@codesourcery.com>\n \tBud Davis  <bdavis9659@comcast.net>\n "}, {"sha": "5be4b9f0fd8477fd6bca119c6989cd94cf7683b2", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1374e9650e556faaf95b9f8c16c9e730d001ed/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1374e9650e556faaf95b9f8c16c9e730d001ed/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=5b1374e9650e556faaf95b9f8c16c9e730d001ed", "patch": "@@ -57,6 +57,7 @@ intrinsics/pack_generic.c \\\n intrinsics/size.c \\\n intrinsics/spread_generic.c \\\n intrinsics/string_intrinsics.c \\\n+intrinsics/system.c \\\n intrinsics/rand.c \\\n intrinsics/random.c \\\n intrinsics/reshape_generic.c \\"}, {"sha": "3fa14b49a05da2b8da64a09807227f517f608c71", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1374e9650e556faaf95b9f8c16c9e730d001ed/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1374e9650e556faaf95b9f8c16c9e730d001ed/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=5b1374e9650e556faaf95b9f8c16c9e730d001ed", "patch": "@@ -122,11 +122,11 @@ am__objects_33 = associated.lo abort.lo args.lo bessel.lo \\\n \tc99_functions.lo cpu_time.lo cshift0.lo date_and_time.lo \\\n \tenv.lo erf.lo eoshift0.lo eoshift2.lo etime.lo getcwd.lo \\\n \tgetXid.lo ishftc.lo mvbits.lo pack_generic.lo size.lo \\\n-\tspread_generic.lo string_intrinsics.lo rand.lo random.lo \\\n-\treshape_generic.lo reshape_packed.lo selected_int_kind.lo \\\n-\tselected_real_kind.lo system_clock.lo transpose_generic.lo \\\n-\tunpack_generic.lo in_pack_generic.lo in_unpack_generic.lo \\\n-\tnormalize.lo\n+\tspread_generic.lo string_intrinsics.lo system.lo rand.lo \\\n+\trandom.lo reshape_generic.lo reshape_packed.lo \\\n+\tselected_int_kind.lo selected_real_kind.lo system_clock.lo \\\n+\ttranspose_generic.lo unpack_generic.lo in_pack_generic.lo \\\n+\tin_unpack_generic.lo normalize.lo\n am__objects_34 =\n am__objects_35 = _abs_c4.lo _abs_c8.lo _abs_i4.lo _abs_i8.lo \\\n \t_abs_r4.lo _abs_r8.lo _exp_r4.lo _exp_r8.lo _exp_c4.lo \\\n@@ -330,6 +330,7 @@ intrinsics/pack_generic.c \\\n intrinsics/size.c \\\n intrinsics/spread_generic.c \\\n intrinsics/string_intrinsics.c \\\n+intrinsics/system.c \\\n intrinsics/rand.c \\\n intrinsics/random.c \\\n intrinsics/reshape_generic.c \\\n@@ -2161,6 +2162,15 @@ string_intrinsics.obj: intrinsics/string_intrinsics.c\n string_intrinsics.lo: intrinsics/string_intrinsics.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o string_intrinsics.lo `test -f 'intrinsics/string_intrinsics.c' || echo '$(srcdir)/'`intrinsics/string_intrinsics.c\n \n+system.o: intrinsics/system.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o system.o `test -f 'intrinsics/system.c' || echo '$(srcdir)/'`intrinsics/system.c\n+\n+system.obj: intrinsics/system.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o system.obj `if test -f 'intrinsics/system.c'; then $(CYGPATH_W) 'intrinsics/system.c'; else $(CYGPATH_W) '$(srcdir)/intrinsics/system.c'; fi`\n+\n+system.lo: intrinsics/system.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o system.lo `test -f 'intrinsics/system.c' || echo '$(srcdir)/'`intrinsics/system.c\n+\n rand.o: intrinsics/rand.c\n \t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rand.o `test -f 'intrinsics/rand.c' || echo '$(srcdir)/'`intrinsics/rand.c\n "}, {"sha": "38ae0a9d2a9495ee266095ef1e6c0e68c42d586e", "filename": "libgfortran/intrinsics/system.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1374e9650e556faaf95b9f8c16c9e730d001ed/libgfortran%2Fintrinsics%2Fsystem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1374e9650e556faaf95b9f8c16c9e730d001ed/libgfortran%2Fintrinsics%2Fsystem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsystem.c?ref=5b1374e9650e556faaf95b9f8c16c9e730d001ed", "patch": "@@ -0,0 +1,63 @@\n+/* Implementation of the SYSTEM intrinsic.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Tobias Schl\u00fcter.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combined\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+void\n+prefix(system_sub) (const char * fcmd, GFC_INTEGER_4 * status,\n+\t\t    gfc_charlen_type cmd_len)\n+{\n+  char cmd[cmd_len + 1];\n+  int stat;\n+\n+  memcpy (cmd, fcmd, cmd_len);\n+  cmd[cmd_len] = '\\0';\n+\n+  stat = system (cmd);\n+  if (status)\n+    *status = stat;\n+}\n+\n+GFC_INTEGER_4\n+prefix(system) (char * fcmd, gfc_charlen_type cmd_len)\n+{\n+  GFC_INTEGER_4 stat;\n+\n+  prefix(system_sub) (fcmd, &stat, cmd_len);\n+  return stat;\n+}"}]}