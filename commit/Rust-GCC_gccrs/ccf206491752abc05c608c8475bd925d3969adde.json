{"sha": "ccf206491752abc05c608c8475bd925d3969adde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NmMjA2NDkxNzUyYWJjMDVjNjA4Yzg0NzViZDkyNWQzOTY5YWRkZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-05T13:49:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-05T13:49:46Z"}, "message": "Revert DECL_USER_ALIGN part of r241959\n\nr241959 included code to stop the vectoriser increasing the alignment of\na \"user-aligned\" variable.  This wasn't the main purpose of the patch,\nbut was done for consistency with pass_increase_alignment, and was\nneeded to make the testcase work.\n\nThe documentation for the aligned attribute says:\n\n  This attribute specifies a minimum alignment for the variable or\n  structure field, measured in bytes.\n\nso I think it's reasonable for the vectoriser to increase the\nalignment further, if that helps us to vectorise code.  It's also\nuseful if the \"user\" alignment actually came from an earlier pass\nrather than the source code.\n\nA possible counterexample came up when this was discussed on the lists.\nUsers who are trying to collate things from several translation units\ninto a single section can use:\n\n  __attribute__((section (\"whatever\"), aligned(N)))\n\nand would not want extra padding.  It turns out that the supported way\nof doing that is to add a \"used\" attribute, which works even when no\n\"aligned\" attribute is given.\n\n2018-01-05  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Don't\n\tpunt for user-aligned variables.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-align-4.c: New test.\n\t* gcc.dg/vect/vect-nb-iter-ub-2.c (cc): Remove alignment attribute\n\tand redefine as a structure with an unaligned member \"b\".\n\t(foo): Update accordingly.\n\nFrom-SVN: r256277", "tree": {"sha": "cde6570c50283787d3500e8a6cafc99a6cb66f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cde6570c50283787d3500e8a6cafc99a6cb66f1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccf206491752abc05c608c8475bd925d3969adde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf206491752abc05c608c8475bd925d3969adde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf206491752abc05c608c8475bd925d3969adde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf206491752abc05c608c8475bd925d3969adde/comments", "author": null, "committer": null, "parents": [{"sha": "8db2698d1cb49e7f3aed532bb753511071892a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db2698d1cb49e7f3aed532bb753511071892a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db2698d1cb49e7f3aed532bb753511071892a64"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "a419f02e2a55e47763aa728b76b5eefbf1e3280a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf206491752abc05c608c8475bd925d3969adde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf206491752abc05c608c8475bd925d3969adde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccf206491752abc05c608c8475bd925d3969adde", "patch": "@@ -1,3 +1,8 @@\n+2018-01-05  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Don't\n+\tpunt for user-aligned variables.\n+\n 2018-01-05  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-chrec.c (chrec_contains_symbols): Return true for"}, {"sha": "2a18e22131febe58641d867d3a346fe75ecf75fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf206491752abc05c608c8475bd925d3969adde/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf206491752abc05c608c8475bd925d3969adde/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ccf206491752abc05c608c8475bd925d3969adde", "patch": "@@ -1,3 +1,10 @@\n+2018-01-05  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.dg/vect/vect-align-4.c: New test.\n+\t* gcc.dg/vect/vect-nb-iter-ub-2.c (cc): Remove alignment attribute\n+\tand redefine as a structure with an unaligned member \"b\".\n+\t(foo): Update accordingly.\n+\n 2018-01-05  Sudakshina Das  <sudi.das@arm.com>\n \n \tPR target/82439"}, {"sha": "82bbf07c568961f20cd17e5f088f6a2bd837391e", "filename": "gcc/testsuite/gcc.dg/vect/vect-align-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf206491752abc05c608c8475bd925d3969adde/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-align-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf206491752abc05c608c8475bd925d3969adde/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-align-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-align-4.c?ref=ccf206491752abc05c608c8475bd925d3969adde", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+__attribute__((aligned (8))) int a[2048] = {};\n+\n+void\n+f1 (void)\n+{\n+  for (int i = 0; i < 2048; i++)\n+    a[i]++;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Vectorizing an unaligned access\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"Alignment of access forced using peeling\" \"vect\" } } */"}, {"sha": "229ce987db5f5a5b48177d0c9d74e416e417d3f6", "filename": "gcc/testsuite/gcc.dg/vect/vect-nb-iter-ub-2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf206491752abc05c608c8475bd925d3969adde/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf206491752abc05c608c8475bd925d3969adde/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-2.c?ref=ccf206491752abc05c608c8475bd925d3969adde", "patch": "@@ -3,18 +3,19 @@\n #include \"tree-vect.h\"\n \n int ii[32];\n-char cc[66] __attribute__((aligned(1))) =\n+struct { char a; char b[66]; } cc = { 0,\n   { 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0,\n     10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 17, 0, 18, 0, 19, 0,\n     20, 0, 21, 0, 22, 0, 23, 0, 24, 0, 25, 0, 26, 0, 27, 0, 28, 0, 29, 0,\n-    30, 0, 31, 0 };\n+    30, 0, 31, 0 }\n+};\n \n void __attribute__((noinline,noclone))\n foo (int s)\n {\n   int i;\n    for (i = 0; i < s; i++)\n-     ii[i] = (int) cc[i*2];\n+     ii[i] = (int) cc.b[i*2];\n }\n \n int main (int argc, const char **argv)"}, {"sha": "e0a2f7b7c890aa8e450801a7e9c0eaf9878c219d", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf206491752abc05c608c8475bd925d3969adde/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf206491752abc05c608c8475bd925d3969adde/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=ccf206491752abc05c608c8475bd925d3969adde", "patch": "@@ -920,19 +920,6 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n \t  return true;\n \t}\n \n-      if (DECL_USER_ALIGN (base))\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    {\n-\t      dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t       \"not forcing alignment of user-aligned \"\n-\t\t\t       \"variable: \");\n-\t      dump_generic_expr (MSG_NOTE, TDF_SLIM, base);\n-\t      dump_printf (MSG_NOTE, \"\\n\");\n-\t    }\n-\t  return true;\n-\t}\n-\n       /* Force the alignment of the decl.\n \t NOTE: This is the only change to the code we make during\n \t the analysis phase, before deciding to vectorize the loop.  */"}]}