{"sha": "9fd6479043b30a8abb901d481d0f6422f0af4fda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZkNjQ3OTA0M2IzMGE4YWJiOTAxZDQ4MWQwZjY0MjJmMGFmNGZkYQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-09-18T11:32:46Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-09-18T11:32:46Z"}, "message": "2003-09-18  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramSocket.java\n\t(ch): Removed.\n\t(receive): Use getChannel() instead of ch.\n\t(send): Likewise.\n\t(getChannel): Return null.\n\t* java/net/ServerSocket.java\n\t(ch): Removed.\n\t(setChannel): Removed.\n\t(implAccept): Use getChannel() instead of ch.\n\t(close): Likewise.\n\t(getChannel): Return null.\n\t* java/net/Socket.java\n\t(ch): Removed.\n\t(connect): Use getChannel() instead of ch.\n\t(setChannel): Removed.\n\t(getChannel): Return null.\n\nFrom-SVN: r71516", "tree": {"sha": "12925196dcfe56b1532ce045b0b7e55c97f93cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12925196dcfe56b1532ce045b0b7e55c97f93cf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fd6479043b30a8abb901d481d0f6422f0af4fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd6479043b30a8abb901d481d0f6422f0af4fda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd6479043b30a8abb901d481d0f6422f0af4fda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd6479043b30a8abb901d481d0f6422f0af4fda/comments", "author": null, "committer": null, "parents": [{"sha": "780071b5a626b11f6aafbf97f26e65f53596180a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780071b5a626b11f6aafbf97f26e65f53596180a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/780071b5a626b11f6aafbf97f26e65f53596180a"}], "stats": {"total": 76, "additions": 34, "deletions": 42}, "files": [{"sha": "3a1cadc927e07a9e4d8f11a0cfe6de2cb3ecff5f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd6479043b30a8abb901d481d0f6422f0af4fda/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd6479043b30a8abb901d481d0f6422f0af4fda/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9fd6479043b30a8abb901d481d0f6422f0af4fda", "patch": "@@ -1,3 +1,22 @@\n+2003-09-18  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramSocket.java\n+\t(ch): Removed.\n+\t(receive): Use getChannel() instead of ch.\n+\t(send): Likewise.\n+\t(getChannel): Return null.\n+\t* java/net/ServerSocket.java\n+\t(ch): Removed.\n+\t(setChannel): Removed.\n+\t(implAccept): Use getChannel() instead of ch.\n+\t(close): Likewise.\n+\t(getChannel): Return null.\n+\t* java/net/Socket.java\n+\t(ch): Removed.\n+\t(connect): Use getChannel() instead of ch.\n+\t(setChannel): Removed.\n+\t(getChannel): Return null.\n+\n 2003-09-18  Mark Wielaard  <mark@klomp.org>\n \n \tReported by Guilhem Lavaux and Julian Dolby"}, {"sha": "4cc8e50f0d5314d0fe24efce2dbc5058e19e7c73", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd6479043b30a8abb901d481d0f6422f0af4fda/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd6479043b30a8abb901d481d0f6422f0af4fda/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=9fd6479043b30a8abb901d481d0f6422f0af4fda", "patch": "@@ -74,12 +74,6 @@\n    */\n   DatagramSocketImpl impl;\n \n-  /**\n-   * The unique DatagramChannel object associated with this datagram socket,\n-   * or null.\n-   */\n-  DatagramChannel ch;\n-\n   /**\n    * This is the address we are \"connected\" to\n    */\n@@ -519,7 +513,8 @@ public synchronized void receive(DatagramPacket p) throws IOException\n       throw new IOException (\n         \"Socket connected to a multicast address my not receive\");\n \n-    if (ch != null && !ch.isBlocking ())\n+    if (getChannel() != null\n+        && !getChannel().isBlocking ())\n       throw new IllegalBlockingModeException ();\n \n     impl.receive(p);\n@@ -568,7 +563,8 @@ public void send(DatagramPacket p) throws IOException\n     // FIXME: if this is a subclass of MulticastSocket,\n     // use getTimeToLive for TTL val.\n \n-    if (ch != null && !ch.isBlocking ())\n+    if (getChannel() != null\n+        && !getChannel().isBlocking ())\n       throw new IllegalBlockingModeException ();\n \n     impl.send(p);\n@@ -618,7 +614,7 @@ public boolean isClosed()\n    */\n   public DatagramChannel getChannel()\n   {\n-    return ch;\n+    return null;\n   }\n \n   /**"}, {"sha": "44281783dc80e69e5d249dae1478ea658d24ceeb", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd6479043b30a8abb901d481d0f6422f0af4fda/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd6479043b30a8abb901d481d0f6422f0af4fda/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=9fd6479043b30a8abb901d481d0f6422f0af4fda", "patch": "@@ -73,12 +73,6 @@\n    */\n   private SocketImpl impl;\n \n-  /**\n-   * ServerSocketChannel of this ServerSocket. This channel only exists\n-   * when the socket is created by ServerSocketChannel.open().\n-   */\n-  private ServerSocketChannel ch;\n-\n   private boolean closed = false;\n   \n   /**\n@@ -160,14 +154,6 @@ public ServerSocket (int port, int backlog, InetAddress bindAddr)\n     bind (new InetSocketAddress (bindAddr, port), backlog);\n   }\n \n-  /*\n-   * This method may only be used by java.nio.channels.ServerSocketChannel.open.\n-   */\n-  void setChannel (ServerSocketChannel ch)\n-  {\n-    this.ch = ch;\n-  }\n-\n   /**\n    * Binds the server socket to a specified socket address\n    *\n@@ -318,7 +304,8 @@ public Socket accept () throws IOException\n   protected final void implAccept (Socket s)\n     throws IOException\n   {\n-    if (ch != null && !ch.isBlocking())\n+    if (getChannel() != null\n+        && !getChannel().isBlocking())\n       throw new IllegalBlockingModeException();\n \t    \n     impl.accept(s.impl);\n@@ -334,8 +321,8 @@ public void close () throws IOException\n     if (impl != null)\n       impl.close ();\n \n-    if (ch != null)\n-      ch.close ();\n+    if (getChannel() != null)\n+      getChannel().close ();\n     \n     closed = true;\n   }\n@@ -351,7 +338,7 @@ public void close () throws IOException\n    */\n   public ServerSocketChannel getChannel()\n   {\n-    return ch;\n+    return null;\n   }\n \n   /**"}, {"sha": "a5397bf7a499a509711bcecf91455c4d427096dd", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd6479043b30a8abb901d481d0f6422f0af4fda/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd6479043b30a8abb901d481d0f6422f0af4fda/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=9fd6479043b30a8abb901d481d0f6422f0af4fda", "patch": "@@ -87,8 +87,6 @@\n   private boolean inputShutdown = false;\n   private boolean outputShutdown = false;\n \n-  SocketChannel ch; // this field must have been set if created by SocketChannel\n-\n   private boolean closed = false;\n \n   /**\n@@ -298,15 +296,6 @@ private Socket(InetAddress raddr, int rport, InetAddress laddr, int lport,\n     // that default.  JDK 1.2 doc infers not to do a bind.\n   }\n \n-  /*\n-   * This method may only be used by java.nio.channels.ServerSocketChannel.accept and\n-   * java.nio.channels.SocketChannel.open.\n-   */\n-  void setChannel (SocketChannel ch)\n-  {\n-    this.ch = ch;\n-  }\n-\n   /**\n    * Binds the socket to the givent local address/port\n    *\n@@ -401,7 +390,8 @@ public void connect (SocketAddress endpoint, int timeout)\n     if (! (endpoint instanceof InetSocketAddress))\n       throw new IllegalArgumentException (\"Address type not supported\");\n \n-    if (ch != null && !ch.isBlocking ())\n+    if (getChannel() != null\n+        && !getChannel().isBlocking ())\n       throw new IllegalBlockingModeException ();\n   \n     if (!isBound ())\n@@ -882,8 +872,8 @@ public synchronized void close ()  throws IOException\n     if (impl != null)\n       impl.close();\n \n-    if (ch != null)\n-      ch.close();\n+    if (getChannel() != null)\n+      getChannel().close();\n     \n     closed = true;\n   }\n@@ -970,7 +960,7 @@ public void shutdownOutput() throws IOException\n    */\n   public SocketChannel getChannel()\n   {\n-    return ch;\n+    return null;\n   }\n \n   /**"}]}