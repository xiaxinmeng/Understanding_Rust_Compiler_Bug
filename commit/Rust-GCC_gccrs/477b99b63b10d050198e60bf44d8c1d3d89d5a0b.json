{"sha": "477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3Yjk5YjYzYjEwZDA1MDE5OGU2MGJmNDRkOGMxZDNkODlkNWEwYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-10-27T13:06:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-10-27T13:06:06Z"}, "message": "[multiple changes]\n\n2009-10-27  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_aggr.adb: Fix comment.\n\n2009-10-27  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-err.adb (Error_Msg): take into account continuation lines when\n\tcomputing whether we have a warning.\n\n2009-10-27  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* make.adb, s-os_lib.adb, s-os_lib.ads (Create_Temp_Output_File): New\n\troutine that is designed to create temp file descriptor specifically\n\tfor redirecting an output stream.\n\nFrom-SVN: r153591", "tree": {"sha": "0214bfd0d71f1fd62a7120a78eeb8925bd3ed168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0214bfd0d71f1fd62a7120a78eeb8925bd3ed168"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/comments", "author": null, "committer": null, "parents": [{"sha": "673beced43fa873c9d4158b9c60424d5392f20a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/673beced43fa873c9d4158b9c60424d5392f20a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/673beced43fa873c9d4158b9c60424d5392f20a3"}], "stats": {"total": 89, "additions": 81, "deletions": 8}, "files": [{"sha": "d23b7c116d8b9e9de65de9712ce075bdefa00a6a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "patch": "@@ -1,3 +1,18 @@\n+2009-10-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb: Fix comment.\n+\n+2009-10-27  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-err.adb (Error_Msg): take into account continuation lines when\n+\tcomputing whether we have a warning.\n+\n+2009-10-27  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* make.adb, s-os_lib.adb, s-os_lib.ads (Create_Temp_Output_File): New\n+\troutine that is designed to create temp file descriptor specifically\n+\tfor redirecting an output stream.\n+\n 2009-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: When"}, {"sha": "75eb8f500fabbef681d4e3d37f07a27711f5d09c", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "patch": "@@ -509,7 +509,7 @@ package body Exp_Aggr is\n \n    --   10. No controlled actions need to be generated for components\n \n-   --   11. The backend is a No_VM backend and the array has aliased components\n+   --   11. For a VM back end, the array should have no aliased components\n \n    function Backend_Processing_Possible (N : Node_Id) return Boolean is\n       Typ : constant Entity_Id := Etype (N);"}, {"sha": "c7eab81d9351e012335988d1a3f75dc9c204daff", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "patch": "@@ -7372,7 +7372,7 @@ package body Make is\n \n       Multilib_Gcc_Path := GNAT.OS_Lib.Locate_Exec_On_Path (Multilib_Gcc.all);\n \n-      Create_Temp_File (Output_FD, Output_Name);\n+      Create_Temp_Output_File (Output_FD, Output_Name);\n \n       if Output_FD = Invalid_FD then\n          return;"}, {"sha": "cf76c8f1a92c53631a178f372e92ca1931d5df91", "filename": "gcc/ada/prj-err.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2Fprj-err.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2Fprj-err.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-err.adb?ref=477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Err_Vars;\n with Output;  use Output;\n with Stringt; use Stringt;\n \n@@ -117,7 +118,12 @@ package body Prj.Err is\n       if Flags.Report_Error /= null then\n          Flags.Report_Error\n            (Project,\n-            Is_Warning => Msg (Msg'First) = '?' or else Msg (Msg'First) = '<');\n+            Is_Warning => Msg (Msg'First) = '?'\n+            or else (Msg (Msg'First) = '<'\n+              and then Err_Vars.Error_Msg_Warn)\n+            or else (Msg (Msg'First) = '\\'\n+              and then Msg (Msg'First + 1) = '<'\n+                and then Err_Vars.Error_Msg_Warn));\n       end if;\n    end Error_Msg;\n "}, {"sha": "a3f4b499347dfa39b04fb900ce2b86c42c9f305d", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "patch": "@@ -80,6 +80,15 @@ package body System.OS_Lib is\n    --  Returns total number of characters needed to create a string\n    --  of all Args terminated by ASCII.NUL characters\n \n+   procedure Create_Temp_File_Internal\n+     (FD        : out File_Descriptor;\n+      Name      : out String_Access;\n+      Stdout    : Boolean);\n+   --  Internal routine to implement two Create_Temp_File routines. If Stdout\n+   --  is set to True the created descriptor is stdout-compatible, otherwise\n+   --  it might not be depending on the OS (VMS is one example). The first two\n+   --  parameters are as in Create_Temp_File.\n+\n    function C_String_Length (S : Address) return Integer;\n    --  Returns the length of a C string. Does check for null address\n    --  (returns 0).\n@@ -748,6 +757,27 @@ package body System.OS_Lib is\n    procedure Create_Temp_File\n      (FD   : out File_Descriptor;\n       Name : out String_Access)\n+   is\n+   begin\n+      Create_Temp_File_Internal (FD, Name, Stdout => False);\n+   end Create_Temp_File;\n+\n+   procedure Create_Temp_Output_File\n+     (FD   : out File_Descriptor;\n+      Name : out String_Access)\n+   is\n+   begin\n+      Create_Temp_File_Internal (FD, Name, Stdout => True);\n+   end Create_Temp_Output_File;\n+\n+   -------------------------------\n+   -- Create_Temp_File_Internal --\n+   -------------------------------\n+\n+   procedure Create_Temp_File_Internal\n+     (FD        : out File_Descriptor;\n+      Name      : out String_Access;\n+      Stdout    : Boolean)\n    is\n       Pos      : Positive;\n       Attempts : Natural := 0;\n@@ -814,7 +844,11 @@ package body System.OS_Lib is\n \n          --  Attempt to create the file\n \n-         FD := Create_New_File (Current, Binary);\n+         if Stdout then\n+            FD := Create_Output_Text_File (Current);\n+         else\n+            FD := Create_File (Current, Binary);\n+         end if;\n \n          if FD /= Invalid_FD then\n             Name := new String'(Current);\n@@ -836,7 +870,7 @@ package body System.OS_Lib is\n             end if;\n          end if;\n       end loop File_Loop;\n-   end Create_Temp_File;\n+   end Create_Temp_File_Internal;\n \n    -----------------\n    -- Delete_File --"}, {"sha": "034a7f0694341ecd257509e87770e2b75d0526d3", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477b99b63b10d050198e60bf44d8c1d3d89d5a0b/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "patch": "@@ -245,9 +245,27 @@ package System.OS_Lib is\n       Name : out String_Access);\n    --  Create and open for writing a temporary file in the current working\n    --  directory. The name of the file and the File Descriptor are returned.\n-   --  No mode parameter is provided. Since this is a temporary file, there is\n-   --  no point in doing text translation on it. It is the responsibility of\n-   --  the caller to deallocate the access value returned in Name.\n+   --  It is the responsibility of the caller to deallocate the access value\n+   --  returned in Name.\n+   --\n+   --  The file is opened in binary mode (no text translation).\n+   --\n+   --  This procedure will always succeed if the current working directory is\n+   --  writable. If the current working directory is not writable, then\n+   --  Invalid_FD is returned for the file descriptor and null for the Name.\n+   --  There is no race condition problem between processes trying to create\n+   --  temp files at the same time in the same directory.\n+\n+   procedure Create_Temp_Output_File\n+     (FD        : out File_Descriptor;\n+      Name      : out String_Access);\n+   --  Create and open for writing a temporary file in the current working\n+   --  directory suitable to redirect standard output. The name of the file\n+   --  and the File Descriptor are returned.\n+   --  It is the responsibility of the caller to deallocate the access value\n+   --  returned in Name.\n+   --\n+   --  The file is opened in the mode specified by the With_Mode parameter.\n    --\n    --  This procedure will always succeed if the current working directory is\n    --  writable. If the current working directory is not writable, then"}]}