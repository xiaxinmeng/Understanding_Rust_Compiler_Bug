{"sha": "60fce41336693ee3cfb0d722fb05d4dc7039516c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBmY2U0MTMzNjY5M2VlM2NmYjBkNzIyZmIwNWQ0ZGM3MDM5NTE2Yw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-06-06T20:49:09Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-06-06T20:49:09Z"}, "message": "re PR testsuite/25241 ([C++] DejaGNU does not distinguish between errors and warnings)\n\n2007-06-06  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR testsuite/25241\n\ntestsuite/\n\t* gcc.dg/simd-5.c: Mark output as a note.\n\t* gcc.dg/simd-6.c: Mark output as a note. Fix incorrect use of\n\tdg-message.\n\t* gcc.dg/simd-1.c: Likewise.\n\t* gcc.dg/always_inline.c: Mark output as a sorry.\n\t* gcc.dg/always_inline2.c: Likewise.\n\t* gcc.dg/always_inline3.c: Likewise.\n\nFrom-SVN: r125505", "tree": {"sha": "26ee2d83a16ad3648f8aa969d9109a4e027d974d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26ee2d83a16ad3648f8aa969d9109a4e027d974d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60fce41336693ee3cfb0d722fb05d4dc7039516c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fce41336693ee3cfb0d722fb05d4dc7039516c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60fce41336693ee3cfb0d722fb05d4dc7039516c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fce41336693ee3cfb0d722fb05d4dc7039516c/comments", "author": null, "committer": null, "parents": [{"sha": "c22940cd7cb1bb5d23e496acc843a74d44ee050a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c22940cd7cb1bb5d23e496acc843a74d44ee050a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c22940cd7cb1bb5d23e496acc843a74d44ee050a"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "2e07a8aba5bde44737f3cde282792f3027789cb1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60fce41336693ee3cfb0d722fb05d4dc7039516c", "patch": "@@ -1,3 +1,14 @@\n+2007-06-06  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR testsuite/25241\n+\t* gcc.dg/simd-5.c: Mark output as a note.\n+\t* gcc.dg/simd-6.c: Mark output as a note. Fix incorrect use of\n+\tdg-message.\n+\t* gcc.dg/simd-1.c: Likewise.\n+\t* gcc.dg/always_inline.c: Mark output as a sorry.\n+\t* gcc.dg/always_inline2.c: Likewise.\n+\t* gcc.dg/always_inline3.c: Likewise.\n+\t\n 2007-06-06  Ian Lance Taylor  <iant@google.com>\n \n \t* g++.dg/conversion/enum1.C: New test."}, {"sha": "3233741896af032312a15c3f1b8199ea537fd355", "filename": "gcc/testsuite/gcc.dg/always_inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c?ref=60fce41336693ee3cfb0d722fb05d4dc7039516c", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n inline __attribute__ ((always_inline)) void\n e(int t, ...)\n-{\t\t\t\t/* { dg-message \"variable argument\" \"\" } */\n+{\t\t\t\t/* { dg-message \"sorry\\[^\\n\\]*variable argument\" \"\" } */\n   va_list q;\n   va_start (q, t);\n }"}, {"sha": "c65df24ea601e6bf7130dca20b9c6a9991701990", "filename": "gcc/testsuite/gcc.dg/always_inline2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c?ref=60fce41336693ee3cfb0d722fb05d4dc7039516c", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-Winline -O2\" } */\n-inline __attribute__ ((always_inline)) void t(void); /* { dg-message \"body not available\" \"\" } */\n+inline __attribute__ ((always_inline)) void t(void); /* { dg-message \"sorry\\[^\\n\\]*body not available\" \"\" } */\n void\n q(void)\n {\n-  t(); \t\t\t\t/* { dg-message \"called from here\" \"\" } */\n+  t(); \t\t\t\t/* { dg-message \"sorry\\[^\\n\\]*called from here\" \"\" } */\n }"}, {"sha": "db06843c7d0c343e9694e098e0101c58ddf5bbef", "filename": "gcc/testsuite/gcc.dg/always_inline3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c?ref=60fce41336693ee3cfb0d722fb05d4dc7039516c", "patch": "@@ -3,9 +3,9 @@\n int do_something_evil (void);\n inline __attribute__ ((always_inline)) void\n q2(void)\n-{ \t\t\t\t/* { dg-message \"recursive\" \"\" } */\n+{ \t\t\t\t/* { dg-message \"sorry\\[^\\n\\]*recursive\" \"\" } */\n   if (do_something_evil ())\n     return;\n-  q2(); \t\t\t/* { dg-message \"called from here\" \"\" } */\n+  q2(); \t\t\t/* { dg-message \"sorry\\[^\\n\\]*called from here\" \"\" } */\n   q2(); /* With -O2 we don't warn here, it is eliminated by tail recursion.  */\n }"}, {"sha": "d0064ad4d32210a5c14e5640942e56327884491e", "filename": "gcc/testsuite/gcc.dg/simd-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c?ref=60fce41336693ee3cfb0d722fb05d4dc7039516c", "patch": "@@ -32,7 +32,8 @@ hanneke ()\n   e = (typeof (e)) a;\n \n   /* Different signed SIMD assignment.  */\n-  f = a; /* { dg-error \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts.*35: error: incompatible types in assignment\" } */\n+  f = a; /* { dg-message \"note: use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n+  /* { dg-error \"incompatible types in assignment\" \"\" { target *-*-* } 35 } */\n \n   /* Casted different signed SIMD assignment.  */\n   f = (uv4si) a;"}, {"sha": "2a3147004db707c9aab55e758c3e9e2380f9adc5", "filename": "gcc/testsuite/gcc.dg/simd-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c?ref=60fce41336693ee3cfb0d722fb05d4dc7039516c", "patch": "@@ -4,5 +4,5 @@\n /* Ensure that we don't need a typedef to initialize a vector type.  */\n #define vector __attribute__ ((vector_size (8)))\n vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n-vector char y = (vector short) {1,2,3,4}; /* { dg-message \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n+vector char y = (vector short) {1,2,3,4}; /* { dg-message \"note: use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n   /* { dg-error \"incompatible types in initialization\" \"\" { target *-*-* } 7 } */"}, {"sha": "d8ae1a590cd3d73f062da600fc374c26a8316f80", "filename": "gcc/testsuite/gcc.dg/simd-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fce41336693ee3cfb0d722fb05d4dc7039516c/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c?ref=60fce41336693ee3cfb0d722fb05d4dc7039516c", "patch": "@@ -4,5 +4,5 @@\n /* Ensure that we don't need a typedef to initialize a vector type.  */\n #define vector __attribute__ ((vector_size (8)))\n vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n-vector char y = (vector short) {1,2,3,4}; /* { dg-message \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n-\t/* { dg-message \"incompatible types in initialization\" \"\" { target *-*-* } 7 } */\n+vector char y = (vector short) {1,2,3,4}; /* { dg-message \"note: use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n+  /* { dg-error \"incompatible types in initialization\" \"\" { target *-*-* } 7 } */"}]}