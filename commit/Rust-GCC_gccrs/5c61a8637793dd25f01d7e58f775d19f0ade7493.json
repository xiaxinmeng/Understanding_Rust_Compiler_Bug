{"sha": "5c61a8637793dd25f01d7e58f775d19f0ade7493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2MWE4NjM3NzkzZGQyNWYwMWQ3ZTU4Zjc3NWQxOWYwYWRlNzQ5Mw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-05-13T14:54:24Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-05-13T14:54:24Z"}, "message": "re PR libstdc++/15412 (_GLIBCXX_ symbols symbols defined and used in different namespaces)\n\n\n2004-05-13  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/15412\n\t* include/bits/stl_threads.h (_GLIBCXX_mutex): Move to namespace\n\t__gnu_internal.\n\t(_GLIBCXX_mutex_address): Same.\n\t(_GLIBCXX_once): Same.\n\t(_GLIBCXX_mutex_init): Same.\n\t(_GLIBCXX_mutex_address_init): Same.\n\nFrom-SVN: r81785", "tree": {"sha": "f65458545809cc2a015afeab51930c5a50c53778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f65458545809cc2a015afeab51930c5a50c53778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c61a8637793dd25f01d7e58f775d19f0ade7493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c61a8637793dd25f01d7e58f775d19f0ade7493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c61a8637793dd25f01d7e58f775d19f0ade7493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c61a8637793dd25f01d7e58f775d19f0ade7493/comments", "author": null, "committer": null, "parents": [{"sha": "c15190ecef2cdd2ff2df390e2cb5197ea585c9de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c15190ecef2cdd2ff2df390e2cb5197ea585c9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c15190ecef2cdd2ff2df390e2cb5197ea585c9de"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "56da7b312343740b2a96f5fd54f3aa3279c4f876", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c61a8637793dd25f01d7e58f775d19f0ade7493/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c61a8637793dd25f01d7e58f775d19f0ade7493/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5c61a8637793dd25f01d7e58f775d19f0ade7493", "patch": "@@ -1,3 +1,13 @@\n+2004-05-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/15412\n+\t* include/bits/stl_threads.h (_GLIBCXX_mutex): Move to namespace\n+\t__gnu_internal.\n+\t(_GLIBCXX_mutex_address): Same.\n+\t(_GLIBCXX_once): Same.\t\n+\t(_GLIBCXX_mutex_init): Same.\n+\t(_GLIBCXX_mutex_address_init): Same.\n+\t\n 2004-05-13  Benjamin Kosnik  <bkoz@redhat.com>\n \t\n \t* docs/html/abi.html: New."}, {"sha": "04baf0a08f9192c13c6535bc96fb5f71adab9465", "filename": "libstdc++-v3/include/bits/stl_threads.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c61a8637793dd25f01d7e58f775d19f0ade7493/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c61a8637793dd25f01d7e58f775d19f0ade7493/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h?ref=5c61a8637793dd25f01d7e58f775d19f0ade7493", "patch": "@@ -1,6 +1,6 @@\n // Threading support -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -54,7 +54,7 @@\n // layer.\n #include \"bits/gthr.h\"\n \n-namespace __gnu_cxx\n+namespace __gnu_internal\n {\n #if !defined(__GTHREAD_MUTEX_INIT) && defined(__GTHREAD_MUTEX_INIT_FUNCTION)\n   extern __gthread_mutex_t _GLIBCXX_mutex;\n@@ -63,7 +63,10 @@ namespace __gnu_cxx\n   extern void _GLIBCXX_mutex_init(void);\n   extern void _GLIBCXX_mutex_address_init(void);\n #endif\n+} // namespace __gnu_internal\n \n+namespace __gnu_cxx\n+{\n   // Locking class.  Note that this class *does not have a\n   // constructor*.  It must be initialized either statically, with\n   // __STL_MUTEX_INITIALIZER, or dynamically, by explicitly calling\n@@ -92,24 +95,24 @@ namespace __gnu_cxx\n       // There should be no code in this path given the usage rules above.\n #elif defined(__GTHREAD_MUTEX_INIT_FUNCTION)\n       if (_M_init_flag) return;\n-      if (__gthread_once(&__gnu_cxx::_GLIBCXX_once,\n-\t\t\t __gnu_cxx::_GLIBCXX_mutex_init) != 0\n+      if (__gthread_once(&__gnu_internal::_GLIBCXX_once,\n+\t\t\t __gnu_internal::_GLIBCXX_mutex_init) != 0\n \t  && __gthread_active_p())\n \tabort ();\n-      __gthread_mutex_lock(&__gnu_cxx::_GLIBCXX_mutex);\n+      __gthread_mutex_lock(&__gnu_internal::_GLIBCXX_mutex);\n       if (!_M_init_flag)\n \t{\n \t  // Even though we have a global lock, we use __gthread_once to be\n \t  // absolutely certain the _M_lock mutex is only initialized once on\n \t  // multiprocessor systems.\n-\t  __gnu_cxx::_GLIBCXX_mutex_address = &_M_lock;\n+\t  __gnu_internal::_GLIBCXX_mutex_address = &_M_lock;\n \t  if (__gthread_once(&_M_once,\n-\t\t\t     __gnu_cxx::_GLIBCXX_mutex_address_init) != 0\n+\t\t\t     __gnu_internal::_GLIBCXX_mutex_address_init) != 0\n \t    && __gthread_active_p())\n \t    abort();\n \t  _M_init_flag = 1;\n \t}\n-      __gthread_mutex_unlock(&__gnu_cxx::_GLIBCXX_mutex);\n+      __gthread_mutex_unlock(&__gnu_internal::_GLIBCXX_mutex);\n #endif\n     }\n "}]}