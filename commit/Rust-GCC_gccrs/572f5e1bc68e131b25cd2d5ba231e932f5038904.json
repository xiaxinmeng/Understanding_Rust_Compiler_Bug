{"sha": "572f5e1bc68e131b25cd2d5ba231e932f5038904", "node_id": "C_kwDOANBUbNoAKDU3MmY1ZTFiYzY4ZTEzMWIyNWNkMmQ1YmEyMzFlOTMyZjUwMzg5MDQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-07T06:44:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-07T06:44:38Z"}, "message": "libcpp: Named universal character escapes and delimited escape sequence tweaks\n\nOn Tue, Aug 30, 2022 at 09:10:37PM +0000, Joseph Myers wrote:\n> I'm seeing build failures of glibc for powerpc64, as illustrated by the\n> following C code:\n>\n> #if 0\n> \\NARG\n> #endif\n>\n> (the actual sysdeps/powerpc/powerpc64/sysdep.h code is inside #ifdef\n> __ASSEMBLER__).\n>\n> This shows some problems with this feature - and with delimited escape\n> sequences - as it affects C.  It's fine to accept it as an extension\n> inside string and character literals, because \\N or \\u{...} would be\n> invalid in the absence of the feature (i.e. the syntax for such literals\n> fails to match, meaning that the rule about undefined behavior for a\n> single ' or \" as a pp-token applies).  But outside string and character\n> literals, the usual lexing rules apply, the \\ is a pp-token on its own and\n> the code is valid at the preprocessing level, and with expansion of macros\n> appearing before or after the \\ (e.g. u defined as a macro in the \\u{...}\n> case) it may be valid code at the language level as well.  I don't know\n> what older C++ versions say about this, but for C this means e.g.\n>\n> #define z(x) 0\n> #define a z(\n> int x = a\\NARG);\n>\n> needs to be accepted as expanding to \"int x = 0;\", not interpreted as\n> using the \\N feature in an identifier and produce an error.\n\nThe following patch changes this, so that:\n1) outside of string/character literals, \\N without following { is never\n   treated as an error nor warning, it is silently treated as \\ separate\n   token followed by whatever is after it\n2) \\u{123} and \\N{LATIN SMALL LETTER A WITH ACUTE} are not handled as\n   extension at all outside of string/character literals in the strict\n   standard modes (-std=c*) except for -std=c++{23,2b}, only in the\n   -std=gnu* modes, because it changes behavior on valid sources, e.g.\n   #define z(x) 0\n   #define a z(\n   int x = a\\u{123});\n   int y = a\\N{LATIN SMALL LETTER A WITH ACUTE});\n3) introduces -Wunicode warning (on by default) and warns for cases\n   of what looks like invalid delimited escape sequence or named\n   universal character escape outside of string/character literals\n   and is treated as separate tokens\n\n2022-09-07  Jakub Jelinek  <jakub@redhat.com>\n\nlibcpp/\n\t* include/cpplib.h (struct cpp_options): Add cpp_warn_unicode member.\n\t(enum cpp_warning_reason): Add CPP_W_UNICODE.\n\t* init.cc (cpp_create_reader): Initialize cpp_warn_unicode.\n\t* charset.cc (_cpp_valid_ucn): In possible identifier contexts, don't\n\thandle \\u{ or \\N{ specially in -std=c* modes except -std=c++2{3,b}.\n\tIn possible identifier contexts, don't emit an error and punt\n\tif \\N isn't followed by {, or if \\N{} surrounds some lower case\n\tletters or _.  In possible identifier contexts when not C++23, don't\n\temit an error but warning about unknown character names and treat as\n\tseparate tokens.  When treating as separate tokens \\u{ or \\N{, emit\n\twarnings.\ngcc/\n\t* doc/invoke.texi (-Wno-unicode): Document.\ngcc/c-family/\n\t* c.opt (Winvalid-utf8): Use ObjC instead of objC.  Remove\n\t\" in comments\" from description.\n\t(Wunicode): New option.\ngcc/testsuite/\n\t* c-c++-common/cpp/delimited-escape-seq-4.c: New test.\n\t* c-c++-common/cpp/delimited-escape-seq-5.c: New test.\n\t* c-c++-common/cpp/delimited-escape-seq-6.c: New test.\n\t* c-c++-common/cpp/delimited-escape-seq-7.c: New test.\n\t* c-c++-common/cpp/named-universal-char-escape-5.c: New test.\n\t* c-c++-common/cpp/named-universal-char-escape-6.c: New test.\n\t* c-c++-common/cpp/named-universal-char-escape-7.c: New test.\n\t* g++.dg/cpp23/named-universal-char-escape1.C: New test.\n\t* g++.dg/cpp23/named-universal-char-escape2.C: New test.", "tree": {"sha": "3bb768b7f06160f88ca0aaa8f0e2f5df0408ab7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bb768b7f06160f88ca0aaa8f0e2f5df0408ab7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/572f5e1bc68e131b25cd2d5ba231e932f5038904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/572f5e1bc68e131b25cd2d5ba231e932f5038904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/572f5e1bc68e131b25cd2d5ba231e932f5038904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/572f5e1bc68e131b25cd2d5ba231e932f5038904/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea6e89e07f4223c8ac7877508c62bba368084999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6e89e07f4223c8ac7877508c62bba368084999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6e89e07f4223c8ac7877508c62bba368084999"}], "stats": {"total": 247, "additions": 228, "deletions": 19}, "files": [{"sha": "1c7f89eeb94e5c1c6896f1fd2268d67ec90ceba4", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -822,8 +822,8 @@ C ObjC C++ ObjC++ CPP(warn_invalid_pch) CppReason(CPP_W_INVALID_PCH) Var(cpp_war\n Warn about PCH files that are found but not used.\n \n Winvalid-utf8\n-C objC C++ ObjC++ CPP(cpp_warn_invalid_utf8) CppReason(CPP_W_INVALID_UTF8) Var(warn_invalid_utf8) Init(0) Warning\n-Warn about invalid UTF-8 characters in comments.\n+C ObjC C++ ObjC++ CPP(cpp_warn_invalid_utf8) CppReason(CPP_W_INVALID_UTF8) Var(warn_invalid_utf8) Init(0) Warning\n+Warn about invalid UTF-8 characters.\n \n Wjump-misses-init\n C ObjC Var(warn_jump_misses_init) Warning LangEnabledby(C ObjC,Wc++-compat)\n@@ -1345,6 +1345,10 @@ Wundef\n C ObjC C++ ObjC++ CPP(warn_undef) CppReason(CPP_W_UNDEF) Var(cpp_warn_undef) Init(0) Warning\n Warn if an undefined macro is used in an #if directive.\n \n+Wunicode\n+C ObjC C++ ObjC++ CPP(cpp_warn_unicode) CppReason(CPP_W_UNICODE) Var(warn_unicode) Init(1) Warning\n+Warn about invalid forms of delimited or named escape sequences.\n+\n Wuninitialized\n C ObjC C++ ObjC++ LTO LangEnabledBy(C ObjC C++ ObjC++ LTO,Wall)\n ;"}, {"sha": "cc631dfa26176b19a2726b973cf66176ef2f58ab", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -365,7 +365,7 @@ Objective-C and Objective-C++ Dialects}.\n -Winfinite-recursion @gol\n -Winit-self  -Winline  -Wno-int-conversion  -Wint-in-bool-context @gol\n -Wno-int-to-pointer-cast  -Wno-invalid-memory-model @gol\n--Winvalid-pch  -Winvalid-utf8 -Wjump-misses-init  @gol\n+-Winvalid-pch  -Winvalid-utf8  -Wno-unicode  -Wjump-misses-init  @gol\n -Wlarger-than=@var{byte-size}  -Wlogical-not-parentheses  -Wlogical-op  @gol\n -Wlong-long  -Wno-lto-type-mismatch -Wmain  -Wmaybe-uninitialized @gol\n -Wmemset-elt-size  -Wmemset-transposed-args @gol\n@@ -9578,6 +9578,12 @@ Warn if an invalid UTF-8 character is found.\n This warning is on by default for C++23 if @option{-finput-charset=UTF-8}\n is used and turned into error with @option{-pedantic-errors}.\n \n+@item -Wno-unicode\n+@opindex Wunicode\n+@opindex Wno-unicode\n+Don't diagnose invalid forms of delimited or named escape sequences which are\n+treated as separate tokens.  @option{Wunicode} is enabled by default.\n+\n @item -Wlong-long\n @opindex Wlong-long\n @opindex Wno-long-long"}, {"sha": "107051fcce384771e45b050c5987e264a381e131", "filename": "gcc/testsuite/c-c++-common/cpp/delimited-escape-seq-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-4.c?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -0,0 +1,13 @@\n+/* P2290R3 - Delimited escape sequences */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=gnu99 -Wno-c++-compat\" { target c } } */\n+/* { dg-options \"-std=gnu++20\" { target c++ } } */\n+\n+#define z(x) 0\n+#define a z(\n+int b = a\\u{});\t\t/* { dg-warning \"empty delimited escape sequence; treating it as separate tokens\" } */\n+int c = a\\u{);\t\t/* { dg-warning \"'\\\\\\\\u\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\u\\\\\\{; treating it as separate tokens\" } */\n+int d = a\\u{12XYZ});\t/* { dg-warning \"'\\\\\\\\u\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\u\\\\\\{12; treating it as separate tokens\" } */\n+int e = a\\u123);\n+int f = a\\U1234567);"}, {"sha": "e04f519674ed805af7e267b84075904aaa02b051", "filename": "gcc/testsuite/c-c++-common/cpp/delimited-escape-seq-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-5.c?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -0,0 +1,13 @@\n+/* P2290R3 - Delimited escape sequences */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=c17 -Wno-c++-compat\" { target c } } */\n+/* { dg-options \"-std=c++23\" { target c++ } } */\n+\n+#define z(x) 0\n+#define a z(\n+int b = a\\u{});\t\t/* { dg-warning \"empty delimited escape sequence; treating it as separate tokens\" \"\" { target c++23 } } */\n+int c = a\\u{);\t\t/* { dg-warning \"'\\\\\\\\u\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\u\\\\\\{; treating it as separate tokens\" \"\" { target c++23 } } */\n+int d = a\\u{12XYZ});\t/* { dg-warning \"'\\\\\\\\u\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\u\\\\\\{12; treating it as separate tokens\" \"\" { target c++23 } } */\n+int e = a\\u123);\n+int f = a\\U1234567);"}, {"sha": "f2a4e93909403a698cc5d986312ef76f01361fdb", "filename": "gcc/testsuite/c-c++-common/cpp/delimited-escape-seq-6.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-6.c?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -0,0 +1,13 @@\n+/* P2290R3 - Delimited escape sequences */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=gnu99 -Wno-c++-compat -Wno-unicode\" { target c } } */\n+/* { dg-options \"-std=gnu++20 -Wno-unicode\" { target c++ } } */\n+\n+#define z(x) 0\n+#define a z(\n+int b = a\\u{});\t\t/* { dg-bogus \"empty delimited escape sequence; treating it as separate tokens\" } */\n+int c = a\\u{);\t\t/* { dg-bogus \"'\\\\\\\\u\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\u\\\\\\{; treating it as separate tokens\" } */\n+int d = a\\u{12XYZ});\t/* { dg-bogus \"'\\\\\\\\u\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\u\\\\\\{12; treating it as separate tokens\" } */\n+int e = a\\u123);\n+int f = a\\U1234567);"}, {"sha": "e2f0da4e4d4db0eadca3f86bde6ccc841e0d5e9b", "filename": "gcc/testsuite/c-c++-common/cpp/delimited-escape-seq-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdelimited-escape-seq-7.c?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -0,0 +1,13 @@\n+/* P2290R3 - Delimited escape sequences */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=c17 -Wno-c++-compat -Wno-unicode\" { target c } } */\n+/* { dg-options \"-std=c++23 -Wno-unicode\" { target c++ } } */\n+\n+#define z(x) 0\n+#define a z(\n+int b = a\\u{});\t\t/* { dg-bogus \"empty delimited escape sequence; treating it as separate tokens\" } */\n+int c = a\\u{);\t\t/* { dg-bogus \"'\\\\\\\\u\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\u\\\\\\{; treating it as separate tokens\" } */\n+int d = a\\u{12XYZ});\t/* { dg-bogus \"'\\\\\\\\u\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\u\\\\\\{12; treating it as separate tokens\" } */\n+int e = a\\u123);\n+int f = a\\U1234567);"}, {"sha": "a1c53c7f649ae2e74416e25b21f7787b3ce0189a", "filename": "gcc/testsuite/c-c++-common/cpp/named-universal-char-escape-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnamed-universal-char-escape-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnamed-universal-char-escape-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnamed-universal-char-escape-5.c?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -0,0 +1,17 @@\n+/* P2071R2 - Named universal character escapes */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=gnu99 -Wno-c++-compat\" { target c } } */\n+/* { dg-options \"-std=gnu++20\" { target c++ } } */\n+\n+#define z(x) 0\n+#define a z(\n+int b = a\\N{});\t\t\t\t/* { dg-warning \"empty named universal character escape sequence; treating it as separate tokens\" } */\n+int c = a\\N{);\t\t\t\t/* { dg-warning \"'\\\\\\\\N\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\N\\\\\\{; treating it as separate tokens\" } */\n+int d = a\\N);\n+int e = a\\NARG);\n+int f = a\\N{abc});\t\t\t\t/* { dg-warning \"\\\\\\\\N\\\\\\{abc\\\\\\} is not a valid universal character; treating it as separate tokens\" } */\n+int g = a\\N{ABC.123});\t\t\t\t/* { dg-warning \"'\\\\\\\\N\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\N\\\\\\{ABC; treating it as separate tokens\" } */\n+int h = a\\N{NON-EXISTENT CHAR});\t/* { dg-warning \"\\\\\\\\N\\\\\\{NON-EXISTENT CHAR\\\\\\} is not a valid universal character; treating it as separate tokens\" } */\n+int i = a\\N{Latin_Small_Letter_A_With_Acute});\t/* { dg-warning \"\\\\\\\\N\\\\\\{Latin_Small_Letter_A_With_Acute\\\\\\} is not a valid universal character; treating it as separate tokens\" } */\n+\t\t\t\t\t/* { dg-message \"did you mean \\\\\\\\N\\\\\\{LATIN SMALL LETTER A WITH ACUTE\\\\\\}\\\\?\" \"\" { target *-*-* } .-1 } */"}, {"sha": "a6a5a102aac469dbc05615bb64f07a46866ce233", "filename": "gcc/testsuite/c-c++-common/cpp/named-universal-char-escape-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnamed-universal-char-escape-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnamed-universal-char-escape-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnamed-universal-char-escape-6.c?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -0,0 +1,17 @@\n+/* P2071R2 - Named universal character escapes */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=c17 -Wno-c++-compat\" { target c } } */\n+/* { dg-options \"-std=c++20\" { target c++ } } */\n+\n+#define z(x) 0\n+#define a z(\n+int b = a\\N{});\n+int c = a\\N{);\n+int d = a\\N);\n+int e = a\\NARG);\n+int f = a\\N{abc});\n+int g = a\\N{ABC.123});\n+int h = a\\N{NON-EXISTENT CHAR});\t/* { dg-bogus \"is not a valid universal character\" } */\n+int i = a\\N{Latin_Small_Letter_A_With_Acute});\n+int j = a\\N{LATIN SMALL LETTER A WITH ACUTE});"}, {"sha": "e6142bff63cd5a16ad0bfd1e153611498fcf65f6", "filename": "gcc/testsuite/c-c++-common/cpp/named-universal-char-escape-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnamed-universal-char-escape-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnamed-universal-char-escape-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fnamed-universal-char-escape-7.c?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -0,0 +1,17 @@\n+/* P2071R2 - Named universal character escapes */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=gnu99 -Wno-c++-compat -Wno-unicode\" { target c } } */\n+/* { dg-options \"-std=gnu++20 -Wno-unicode\" { target c++ } } */\n+\n+#define z(x) 0\n+#define a z(\n+int b = a\\N{});\t\t\t\t/* { dg-bogus \"empty named universal character escape sequence; treating it as separate tokens\" } */\n+int c = a\\N{);\t\t\t\t/* { dg-bogus \"'\\\\\\\\N\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\N\\\\\\{; treating it as separate tokens\" } */\n+int d = a\\N);\n+int e = a\\NARG);\n+int f = a\\N{abc});\t\t\t\t/* { dg-bogus \"\\\\\\\\N\\\\\\{abc\\\\\\} is not a valid universal character; treating it as separate tokens\" } */\n+int g = a\\N{ABC.123});\t\t\t\t/* { dg-bogus \"'\\\\\\\\N\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\N\\\\\\{ABC; treating it as separate tokens\" } */\n+int h = a\\N{NON-EXISTENT CHAR});\t/* { dg-bogus \"\\\\\\\\N\\\\\\{NON-EXISTENT CHAR\\\\\\} is not a valid universal character; treating it as separate tokens\" } */\n+int i = a\\N{Latin_Small_Letter_A_With_Acute});\t/* { dg-bogus \"\\\\\\\\N\\\\\\{Latin_Small_Letter_A_With_Acute\\\\\\} is not a valid universal character; treating it as separate tokens\" } */\n+\t\t\t\t\t/* { dg-bogus \"did you mean \\\\\\\\N\\\\\\{LATIN SMALL LETTER A WITH ACUTE\\\\\\}\\\\?\" \"\" { target *-*-* } .-1 } */"}, {"sha": "fe494824ed48ff6ea1655dbb6281c464e9de1933", "filename": "gcc/testsuite/g++.dg/cpp23/named-universal-char-escape1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnamed-universal-char-escape1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnamed-universal-char-escape1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnamed-universal-char-escape1.C?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -0,0 +1,16 @@\n+// P2071R2 - Named universal character escapes\n+// { dg-do compile }\n+// { dg-require-effective-target wchar }\n+\n+#define z(x) 0\n+#define a z(\n+int b = a\\N{});\t\t\t\t// { dg-warning \"empty named universal character escape sequence; treating it as separate tokens\" \"\" { target c++23 } }\n+int c = a\\N{);\t\t\t\t// { dg-warning \"'\\\\\\\\N\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\N\\\\\\{; treating it as separate tokens\" \"\" { target c++23 } }\n+int d = a\\N);\n+int e = a\\NARG);\n+int f = a\\N{abc});\t\t\t// { dg-warning \"\\\\\\\\N\\\\\\{abc\\\\\\} is not a valid universal character; treating it as separate tokens\" \"\" { target c++23 } }\n+int g = a\\N{ABC.123});\t\t\t// { dg-warning \"'\\\\\\\\N\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\N\\\\\\{ABC; treating it as separate tokens\" \"\" { target c++23 } }\n+int h = a\\N{NON-EXISTENT CHAR});\t// { dg-error \"is not a valid universal character\" \"\" { target c++23 } }\n+\t\t\t\t\t// { dg-error \"was not declared in this scope\" \"\" { target c++23 } .-1 }\n+int i = a\\N{Latin_Small_Letter_A_With_Acute});\t// { dg-warning \"\\\\\\\\N\\\\\\{Latin_Small_Letter_A_With_Acute\\\\\\} is not a valid universal character; treating it as separate tokens\" \"\" { target c++23 } }\n+\t\t\t\t\t// { dg-message \"did you mean \\\\\\\\N\\\\\\{LATIN SMALL LETTER A WITH ACUTE\\\\\\}\\\\?\" \"\" { target c++23 } .-1 }"}, {"sha": "8699e098c88774673b968d9960e08b779a7ed844", "filename": "gcc/testsuite/g++.dg/cpp23/named-universal-char-escape2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnamed-universal-char-escape2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnamed-universal-char-escape2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fnamed-universal-char-escape2.C?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -0,0 +1,18 @@\n+// P2071R2 - Named universal character escapes\n+// { dg-do compile }\n+// { dg-require-effective-target wchar }\n+// { dg-options \"\" }\n+\n+#define z(x) 0\n+#define a z(\n+int b = a\\N{});\t\t\t\t// { dg-warning \"empty named universal character escape sequence; treating it as separate tokens\" }\n+int c = a\\N{);\t\t\t\t// { dg-warning \"'\\\\\\\\N\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\N\\\\\\{; treating it as separate tokens\" }\n+int d = a\\N);\n+int e = a\\NARG);\n+int f = a\\N{abc});\t\t\t// { dg-warning \"\\\\\\\\N\\\\\\{abc\\\\\\} is not a valid universal character; treating it as separate tokens\" }\n+int g = a\\N{ABC.123});\t\t\t// { dg-warning \"'\\\\\\\\N\\\\\\{' not terminated with '\\\\\\}' after \\\\\\\\N\\\\\\{ABC; treating it as separate tokens\" }\n+int h = a\\N{NON-EXISTENT CHAR});\t// { dg-error \"is not a valid universal character\" \"\" { target c++23 } }\n+\t\t\t\t\t// { dg-error \"was not declared in this scope\" \"\" { target c++23 } .-1 }\n+\t\t\t\t\t// { dg-warning \"\\\\\\\\N\\\\\\{NON-EXISTENT CHAR\\\\\\} is not a valid universal character; treating it as separate tokens\" \"\" { target c++20_down } .-2 }\n+int i = a\\N{Latin_Small_Letter_A_With_Acute});\t// { dg-warning \"\\\\\\\\N\\\\\\{Latin_Small_Letter_A_With_Acute\\\\\\} is not a valid universal character; treating it as separate tokens\" }\n+\t\t\t\t\t// { dg-message \"did you mean \\\\\\\\N\\\\\\{LATIN SMALL LETTER A WITH ACUTE\\\\\\}\\\\?\" \"\" { target *-*-* } .-1 }"}, {"sha": "6834969a919fc10b4a2847b26bd8900f2ee54c13", "filename": "libcpp/charset.cc", "status": "modified", "additions": 71, "deletions": 15, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/libcpp%2Fcharset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/libcpp%2Fcharset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.cc?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -1448,7 +1448,11 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n   if (str[-1] == 'u')\n     {\n       length = 4;\n-      if (str < limit && *str == '{')\n+      if (str < limit\n+\t  && *str == '{'\n+\t  && (!identifier_pos\n+\t      || CPP_OPTION (pfile, delimited_escape_seqs)\n+\t      || !CPP_OPTION (pfile, std)))\n \t{\n \t  str++;\n \t  /* Magic value to indicate no digits seen.  */\n@@ -1462,8 +1466,22 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n   else if (str[-1] == 'N')\n     {\n       length = 4;\n+      if (identifier_pos\n+\t  && !CPP_OPTION (pfile, delimited_escape_seqs)\n+\t  && CPP_OPTION (pfile, std))\n+\t{\n+\t  *cp = 0;\n+\t  return false;\n+\t}\n       if (str == limit || *str != '{')\n-\tcpp_error (pfile, CPP_DL_ERROR, \"'\\\\N' not followed by '{'\");\n+\t{\n+\t  if (identifier_pos)\n+\t    {\n+\t      *cp = 0;\n+\t      return false;\n+\t    }\n+\t  cpp_error (pfile, CPP_DL_ERROR, \"'\\\\N' not followed by '{'\");\n+\t}\n       else\n \t{\n \t  str++;\n@@ -1489,15 +1507,19 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n \n \t  if (str < limit && *str == '}')\n \t    {\n-\t      if (name == str && identifier_pos)\n+\t      if (identifier_pos && name == str)\n \t\t{\n+\t\t  cpp_warning (pfile, CPP_W_UNICODE,\n+\t\t\t       \"empty named universal character escape \"\n+\t\t\t       \"sequence; treating it as separate tokens\");\n \t\t  *cp = 0;\n \t\t  return false;\n \t\t}\n \t      if (name == str)\n \t\tcpp_error (pfile, CPP_DL_ERROR,\n \t\t\t   \"empty named universal character escape sequence\");\n-\t      else if (!CPP_OPTION (pfile, delimited_escape_seqs)\n+\t      else if ((!identifier_pos || strict)\n+\t\t       && !CPP_OPTION (pfile, delimited_escape_seqs)\n \t\t       && CPP_OPTION (pfile, cpp_pedantic))\n \t\tcpp_error (pfile, CPP_DL_PEDWARN,\n \t\t\t   \"named universal character escapes are only valid \"\n@@ -1515,27 +1537,51 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n \t\t\t\t\t   uname2c_tree, NULL);\n \t\t  if (result == (cppchar_t) -1)\n \t\t    {\n-\t\t      cpp_error (pfile, CPP_DL_ERROR,\n-\t\t\t\t \"\\\\N{%.*s} is not a valid universal \"\n-\t\t\t\t \"character\", (int) (str - name), name);\n+\t\t      bool ret = true;\n+\t\t      if (identifier_pos\n+\t\t\t  && (!CPP_OPTION (pfile, delimited_escape_seqs)\n+\t\t\t      || !strict))\n+\t\t\tret = cpp_warning (pfile, CPP_W_UNICODE,\n+\t\t\t\t\t   \"\\\\N{%.*s} is not a valid \"\n+\t\t\t\t\t   \"universal character; treating it \"\n+\t\t\t\t\t   \"as separate tokens\",\n+\t\t\t\t\t   (int) (str - name), name);\n+\t\t      else\n+\t\t\tcpp_error (pfile, CPP_DL_ERROR,\n+\t\t\t\t   \"\\\\N{%.*s} is not a valid universal \"\n+\t\t\t\t   \"character\", (int) (str - name), name);\n \n \t\t      /* Try to do a loose name lookup according to\n \t\t\t Unicode loose matching rule UAX44-LM2.  */\n \t\t      char canon_name[uname2c_max_name_len + 1];\n \t\t      result = _cpp_uname2c_uax44_lm2 ((const char *) name,\n \t\t\t\t\t\t       str - name, canon_name);\n-\t\t      if (result != (cppchar_t) -1)\n+\t\t      if (result != (cppchar_t) -1 && ret)\n \t\t\tcpp_error (pfile, CPP_DL_NOTE,\n \t\t\t\t   \"did you mean \\\\N{%s}?\", canon_name);\n \t\t      else\n-\t\t\tresult = 0x40;\n+\t\t\tresult = 0xC0;\n+\t\t      if (identifier_pos\n+\t\t\t  && (!CPP_OPTION (pfile, delimited_escape_seqs)\n+\t\t\t      || !strict))\n+\t\t\t{\n+\t\t\t  *cp = 0;\n+\t\t\t  return false;\n+\t\t\t}\n \t\t    }\n \t\t}\n \t      str++;\n \t      extend_char_range (char_range, loc_reader);\n \t    }\n \t  else if (identifier_pos)\n-\t    length = 1;\n+\t    {\n+\t      cpp_warning (pfile, CPP_W_UNICODE,\n+\t\t\t   \"'\\\\N{' not terminated with '}' after %.*s; \"\n+\t\t\t   \"treating it as separate tokens\",\n+\t\t\t   (int) (str - base), base);\n+\t      *cp = 0;\n+\t      return false;\n+\t    }\n \t  else\n \t    {\n \t      cpp_error (pfile, CPP_DL_ERROR,\n@@ -1584,12 +1630,17 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n       }\n     while (--length);\n \n-  if (delimited\n-      && str < limit\n-      && *str == '}'\n-      && (length != 32 || !identifier_pos))\n+  if (delimited && str < limit && *str == '}')\n     {\n-      if (length == 32)\n+      if (length == 32 && identifier_pos)\n+\t{\n+\t  cpp_warning (pfile, CPP_W_UNICODE,\n+\t\t       \"empty delimited escape sequence; \"\n+\t\t       \"treating it as separate tokens\");\n+\t  *cp = 0;\n+\t  return false;\n+\t}\n+      else if (length == 32)\n \tcpp_error (pfile, CPP_DL_ERROR,\n \t\t   \"empty delimited escape sequence\");\n       else if (!CPP_OPTION (pfile, delimited_escape_seqs)\n@@ -1607,6 +1658,11 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n      error message in that case.  */\n   if (length && identifier_pos)\n     {\n+      if (delimited)\n+\tcpp_warning (pfile, CPP_W_UNICODE,\n+\t\t     \"'\\\\u{' not terminated with '}' after %.*s; \"\n+\t\t     \"treating it as separate tokens\",\n+\t\t     (int) (str - base), base);\n       *cp = 0;\n       return false;\n     }"}, {"sha": "c25bcf215e027fca92eda729754408ff4b99709f", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -565,6 +565,10 @@ struct cpp_options\n      2 if it should be a pedwarn.  */\n   unsigned char cpp_warn_invalid_utf8;\n \n+  /* True if libcpp should warn about invalid forms of delimited or named\n+     escape sequences.  */\n+  bool cpp_warn_unicode;\n+\n   /* True if -finput-charset= option has been used explicitly.  */\n   bool cpp_input_charset_explicit;\n \n@@ -675,7 +679,8 @@ enum cpp_warning_reason {\n   CPP_W_CXX20_COMPAT,\n   CPP_W_EXPANSION_TO_DEFINED,\n   CPP_W_BIDIRECTIONAL,\n-  CPP_W_INVALID_UTF8\n+  CPP_W_INVALID_UTF8,\n+  CPP_W_UNICODE\n };\n \n /* Callback for header lookup for HEADER, which is the name of a"}, {"sha": "629252445e12b82c2b3df772c0774525ab0999dc", "filename": "libcpp/init.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f5e1bc68e131b25cd2d5ba231e932f5038904/libcpp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f5e1bc68e131b25cd2d5ba231e932f5038904/libcpp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.cc?ref=572f5e1bc68e131b25cd2d5ba231e932f5038904", "patch": "@@ -228,6 +228,7 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   CPP_OPTION (pfile, warn_date_time) = 0;\n   CPP_OPTION (pfile, cpp_warn_bidirectional) = bidirectional_unpaired;\n   CPP_OPTION (pfile, cpp_warn_invalid_utf8) = 0;\n+  CPP_OPTION (pfile, cpp_warn_unicode) = 1;\n   CPP_OPTION (pfile, cpp_input_charset_explicit) = 0;\n \n   /* Default CPP arithmetic to something sensible for the host for the"}]}