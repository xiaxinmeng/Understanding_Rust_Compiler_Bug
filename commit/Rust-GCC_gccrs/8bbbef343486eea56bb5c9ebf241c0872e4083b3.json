{"sha": "8bbbef343486eea56bb5c9ebf241c0872e4083b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJiYmVmMzQzNDg2ZWVhNTZiYjVjOWViZjI0MWMwODcyZTQwODNiMw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-08-04T16:28:14Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-08-04T16:28:14Z"}, "message": "cpphash.h (struct cpp_reader): New member directive_line.\n\n\t* cpphash.h (struct cpp_reader): New member directive_line.\n\t* cpplib.h (struct cpp_callbacks): Update prototypes of callbacks.\n\t* cpplib.c (do_define, do_undef, do_ident, do_include_common,\n\tdo_pragma): Pass line to callbacks.\n\t(start_directive): Record line of directive.\n\t* cppmain.c (cb_ident, cb_define, cb_undef, cb_def_pragma,\n\tcb_include): Similarly.\n\t* c-lex.c (cb_ident, cb_define, cb_undef, cb_def_pragma):\n\tSimilarly.\n\nFrom-SVN: r44637", "tree": {"sha": "d9a94dd57cbcb162a1616b5fe4623e5c76a95412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9a94dd57cbcb162a1616b5fe4623e5c76a95412"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bbbef343486eea56bb5c9ebf241c0872e4083b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bbbef343486eea56bb5c9ebf241c0872e4083b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bbbef343486eea56bb5c9ebf241c0872e4083b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bbbef343486eea56bb5c9ebf241c0872e4083b3/comments", "author": null, "committer": null, "parents": [{"sha": "95146dd651f1e96713c9eaeaa14bc61362b3f2f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95146dd651f1e96713c9eaeaa14bc61362b3f2f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95146dd651f1e96713c9eaeaa14bc61362b3f2f4"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "59a292b103d99b37423f92fa59d654999d03487c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bbbef343486eea56bb5c9ebf241c0872e4083b3", "patch": "@@ -1,3 +1,15 @@\n+2001-08-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cpphash.h (struct cpp_reader): New member directive_line.\n+\t* cpplib.h (struct cpp_callbacks): Update prototypes of callbacks.\n+\t* cpplib.c (do_define, do_undef, do_ident, do_include_common,\n+\tdo_pragma): Pass line to callbacks.\n+\t(start_directive): Record line of directive.\n+\t* cppmain.c (cb_ident, cb_define, cb_undef, cb_def_pragma,\n+\tcb_include): Similarly.\n+\t* c-lex.c (cb_ident, cb_define, cb_undef, cb_def_pragma):\n+\tSimilarly.\n+\n 2001-08-04  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/d30v/d30v.h: Fix typo in start of UNIQUE_SECTION"}, {"sha": "89e17021facfc1857198973cdb9f81485d914d9f", "filename": "gcc/c-lex.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=8bbbef343486eea56bb5c9ebf241c0872e4083b3", "patch": "@@ -86,11 +86,14 @@ static tree lex_string\t\tPARAMS ((const char *, unsigned int, int));\n static tree lex_charconst\tPARAMS ((const cpp_token *));\n static void update_header_times\tPARAMS ((const char *));\n static int dump_one_header\tPARAMS ((splay_tree_node, void *));\n-static void cb_ident\t\tPARAMS ((cpp_reader *, const cpp_string *));\n+static void cb_ident\t\tPARAMS ((cpp_reader *, unsigned int,\n+\t\t\t\t\t const cpp_string *));\n static void cb_file_change    PARAMS ((cpp_reader *, const cpp_file_change *));\n-static void cb_def_pragma\tPARAMS ((cpp_reader *));\n-static void cb_define\t\tPARAMS ((cpp_reader *, cpp_hashnode *));\n-static void cb_undef\t\tPARAMS ((cpp_reader *, cpp_hashnode *));\n+static void cb_def_pragma\tPARAMS ((cpp_reader *, unsigned int));\n+static void cb_define\t\tPARAMS ((cpp_reader *, unsigned int,\n+\t\t\t\t\t cpp_hashnode *));\n+static void cb_undef\t\tPARAMS ((cpp_reader *, unsigned int,\n+\t\t\t\t\t cpp_hashnode *));\n \f\n const char *\n init_c_lex (filename)\n@@ -222,8 +225,9 @@ dump_time_statistics ()\n    No need to deal with linemarkers under normal conditions.  */\n \n static void\n-cb_ident (pfile, str)\n+cb_ident (pfile, line, str)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n+     unsigned int line ATTRIBUTE_UNUSED;\n      const cpp_string *str ATTRIBUTE_UNUSED;\n {\n #ifdef ASM_OUTPUT_IDENT\n@@ -306,8 +310,9 @@ cb_file_change (pfile, fc)\n }\n \n static void\n-cb_def_pragma (pfile)\n+cb_def_pragma (pfile, line)\n      cpp_reader *pfile;\n+     unsigned int line ATTRIBUTE_UNUSED;\n {\n   /* Issue a warning message if we have been asked to do so.  Ignore\n      unknown pragmas in system headers unless an explicit\n@@ -333,8 +338,9 @@ cb_def_pragma (pfile)\n \n /* #define callback for DWARF and DWARF2 debug info.  */\n static void\n-cb_define (pfile, node)\n+cb_define (pfile, line, node)\n      cpp_reader *pfile;\n+     unsigned int line ATTRIBUTE_UNUSED;\n      cpp_hashnode *node;\n {\n   (*debug_hooks->define) (cpp_get_line (pfile)->line,\n@@ -343,8 +349,9 @@ cb_define (pfile, node)\n \n /* #undef callback for DWARF and DWARF2 debug info.  */\n static void\n-cb_undef (pfile, node)\n+cb_undef (pfile, line, node)\n      cpp_reader *pfile;\n+     unsigned int line ATTRIBUTE_UNUSED;\n      cpp_hashnode *node;\n {\n   (*debug_hooks->undef) (cpp_get_line (pfile)->line,"}, {"sha": "1abeb57499013f6d1b9ce6053aa81e3b4b2f7242", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=8bbbef343486eea56bb5c9ebf241c0872e4083b3", "patch": "@@ -261,6 +261,7 @@ struct cpp_reader\n   /* The position of the last lexed token and last lexed directive.  */\n   cpp_lexer_pos lexer_pos;\n   cpp_lexer_pos directive_pos;\n+  unsigned int directive_line;\n \n   /* Memory pools.  */\n   cpp_pool ident_pool;\t\t/* For all identifiers, and permanent"}, {"sha": "d46fb93154d503d7a3c8ec8f212f1c1c7760689c", "filename": "gcc/cpplib.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=8bbbef343486eea56bb5c9ebf241c0872e4083b3", "patch": "@@ -225,6 +225,7 @@ start_directive (pfile)\n \n   /* Some handlers need the position of the # for diagnostics.  */\n   pfile->directive_pos = pfile->lexer_pos;\n+  pfile->directive_line = pfile->line;\n \n   /* Don't save directive tokens for external clients.  */\n   pfile->la_saved = pfile->la_write;\n@@ -476,7 +477,7 @@ do_define (pfile)\n     {\n       if (_cpp_create_definition (pfile, node))\n \tif (pfile->cb.define)\n-\t  (*pfile->cb.define) (pfile, node);\n+\t  (*pfile->cb.define) (pfile, pfile->directive_line, node);\n     }\n }\n \n@@ -492,7 +493,7 @@ do_undef (pfile)\n   if (node && node->type == NT_MACRO)\n     {\n       if (pfile->cb.undef)\n-\t(*pfile->cb.undef) (pfile, node);\n+\t(*pfile->cb.undef) (pfile, pfile->directive_line, node);\n \n       if (node->flags & NODE_WARN)\n \tcpp_warning (pfile, \"undefining \\\"%s\\\"\", NODE_NAME (node));\n@@ -625,7 +626,8 @@ do_include_common (pfile, type)\n \t  /* Get out of macro context, if we are.  */\n \t  end_directive (pfile, 1);\n \t  if (pfile->cb.include)\n-\t    (*pfile->cb.include) (pfile, pfile->directive->name, &header);\n+\t    (*pfile->cb.include) (pfile, pfile->directive_line,\n+\t\t\t\t  pfile->directive->name, &header);\n \n \t  _cpp_execute_include (pfile, &header, type);\n \t}\n@@ -888,7 +890,7 @@ do_ident (pfile)\n   if (str.type != CPP_STRING)\n     cpp_error (pfile, \"invalid #ident\");\n   else if (pfile->cb.ident)\n-    (*pfile->cb.ident) (pfile, &str.val.str);\n+    (*pfile->cb.ident) (pfile, pfile->directive_line, &str.val.str);\n \n   check_eol (pfile);\n }\n@@ -1042,7 +1044,7 @@ do_pragma (pfile)\n   if (handler)\n     (*handler) (pfile);\n   else if (pfile->cb.def_pragma)\n-    (*pfile->cb.def_pragma) (pfile);\n+    (*pfile->cb.def_pragma) (pfile, pfile->directive_line);\n }\n \n static void"}, {"sha": "937e60476931d50f1574d3da3b3a1e7fd32d0629", "filename": "gcc/cpplib.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=8bbbef343486eea56bb5c9ebf241c0872e4083b3", "patch": "@@ -401,12 +401,12 @@ struct cpp_file_change\n struct cpp_callbacks\n {\n     void (*file_change) PARAMS ((cpp_reader *, const cpp_file_change *));\n-    void (*include) PARAMS ((cpp_reader *, const unsigned char *,\n-\t\t\t     const cpp_token *));\n-    void (*define) PARAMS ((cpp_reader *, cpp_hashnode *));\n-    void (*undef) PARAMS ((cpp_reader *, cpp_hashnode *));\n-    void (*ident) PARAMS ((cpp_reader *, const cpp_string *));\n-    void (*def_pragma) PARAMS ((cpp_reader *));\n+    void (*include) PARAMS ((cpp_reader *, unsigned int,\n+\t\t\t     const unsigned char *, const cpp_token *));\n+    void (*define) PARAMS ((cpp_reader *, unsigned int, cpp_hashnode *));\n+    void (*undef) PARAMS ((cpp_reader *, unsigned int, cpp_hashnode *));\n+    void (*ident) PARAMS ((cpp_reader *, unsigned int, const cpp_string *));\n+    void (*def_pragma) PARAMS ((cpp_reader *, unsigned int));\n };\n \n #define CPP_FATAL_LIMIT 1000"}, {"sha": "63026102600c6478c6a458addcef2d08b323f44e", "filename": "gcc/cppmain.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bbbef343486eea56bb5c9ebf241c0872e4083b3/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=8bbbef343486eea56bb5c9ebf241c0872e4083b3", "patch": "@@ -54,13 +54,14 @@ static void maybe_print_line PARAMS ((unsigned int));\n \n /* Callback routines for the parser.   Most of these are active only\n    in specific modes.  */\n-static void cb_define\tPARAMS ((cpp_reader *, cpp_hashnode *));\n-static void cb_undef\tPARAMS ((cpp_reader *, cpp_hashnode *));\n-static void cb_include\tPARAMS ((cpp_reader *, const unsigned char *,\n-\t\t\t\t const cpp_token *));\n-static void cb_ident\t  PARAMS ((cpp_reader *, const cpp_string *));\n+static void cb_define\tPARAMS ((cpp_reader *, unsigned int, cpp_hashnode *));\n+static void cb_undef\tPARAMS ((cpp_reader *, unsigned int, cpp_hashnode *));\n+static void cb_include\tPARAMS ((cpp_reader *, unsigned int,\n+\t\t\t\t const unsigned char *, const cpp_token *));\n+static void cb_ident\t  PARAMS ((cpp_reader *, unsigned int,\n+\t\t\t\t   const cpp_string *));\n static void cb_file_change PARAMS ((cpp_reader *, const cpp_file_change *));\n-static void cb_def_pragma PARAMS ((cpp_reader *));\n+static void cb_def_pragma PARAMS ((cpp_reader *, unsigned int));\n \n const char *progname;\t\t/* Needs to be global.  */\n static cpp_reader *pfile;\t/* An opaque handle.  */\n@@ -345,8 +346,9 @@ print_line (special_flags)\n /* Callbacks.  */\n \n static void\n-cb_ident (pfile, str)\n+cb_ident (pfile, line, str)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n+     unsigned int line ATTRIBUTE_UNUSED;\n      const cpp_string * str;\n {\n   maybe_print_line (cpp_get_line (pfile)->output_line);\n@@ -355,8 +357,9 @@ cb_ident (pfile, str)\n }\n \n static void\n-cb_define (pfile, node)\n+cb_define (pfile, line, node)\n      cpp_reader *pfile;\n+     unsigned int line ATTRIBUTE_UNUSED;\n      cpp_hashnode *node;\n {\n   maybe_print_line (cpp_get_line (pfile)->output_line);\n@@ -373,8 +376,9 @@ cb_define (pfile, node)\n }\n \n static void\n-cb_undef (pfile, node)\n+cb_undef (pfile, line, node)\n      cpp_reader *pfile;\n+     unsigned int line ATTRIBUTE_UNUSED;\n      cpp_hashnode *node;\n {\n   maybe_print_line (cpp_get_line (pfile)->output_line);\n@@ -383,8 +387,9 @@ cb_undef (pfile, node)\n }\n \n static void\n-cb_include (pfile, dir, header)\n+cb_include (pfile, line, dir, header)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n+     unsigned int line ATTRIBUTE_UNUSED;\n      const unsigned char *dir;\n      const cpp_token *header;\n {\n@@ -429,8 +434,9 @@ cb_file_change (pfile, fc)\n /* Copy a #pragma directive to the preprocessed output.  LINE is the\n    line of the current source file, not the logical line.  */\n static void\n-cb_def_pragma (pfile)\n+cb_def_pragma (pfile, line)\n      cpp_reader *pfile;\n+     unsigned int line ATTRIBUTE_UNUSED;\n {\n   maybe_print_line (cpp_get_line (pfile)->output_line);\n   fputs (\"#pragma \", print.outf);"}]}