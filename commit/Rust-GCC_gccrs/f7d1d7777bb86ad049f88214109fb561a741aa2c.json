{"sha": "f7d1d7777bb86ad049f88214109fb561a741aa2c", "node_id": "C_kwDOANBUbNoAKGY3ZDFkNzc3N2JiODZhZDA0OWY4ODIxNDEwOWZiNTYxYTc0MWFhMmM", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-10-24T21:39:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-10-27T15:56:11Z"}, "message": "c++: Templated lambda mangling\n\n(Explicitly) Templated lambdas have a different signature to\nimplicitly templated lambdas -- '[]<template T> (T) {}' is not the\nsame as '[](auto) {}'.  This should be reflected in the mangling.  The\nABI captures this as\nhttps://github.com/itanium-cxx-abi/cxx-abi/issues/31, and clang has\nimplemented such additions.\n\nIt's relatively straight forwards to write out the non-synthetic\ntemplate parms, and note if we need to issue an ABI warning.\n\n\tgcc/cp/\n\t* mangle.cc (write_closure_template_head): New.\n\t(write_closure_type_name): Call it.\n\tgcc/testsuite/\n\t* g++.dg/abi/lambda-ctx1-18.C: Adjust.\n\t* g++.dg/abi/lambda-ctx1-18vs17.C: Adjust.\n\t* g++.dg/abi/lambda-tpl1-17.C: New.\n\t* g++.dg/abi/lambda-tpl1-18.C: New.\n\t* g++.dg/abi/lambda-tpl1-18vs17.C: New.\n\t* g++.dg/abi/lambda-tpl1.h: New.", "tree": {"sha": "82ece2eeb0a792f358dd7a0a57be1d4e85c90a57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82ece2eeb0a792f358dd7a0a57be1d4e85c90a57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7d1d7777bb86ad049f88214109fb561a741aa2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d1d7777bb86ad049f88214109fb561a741aa2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d1d7777bb86ad049f88214109fb561a741aa2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d1d7777bb86ad049f88214109fb561a741aa2c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f95d3d5de72a1c43e8d529bad3ef59afc3214705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f95d3d5de72a1c43e8d529bad3ef59afc3214705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f95d3d5de72a1c43e8d529bad3ef59afc3214705"}], "stats": {"total": 196, "additions": 192, "deletions": 4}, "files": [{"sha": "e39621876ef9206bd3b638a91ec9944568cad04a", "filename": "gcc/cp/mangle.cc", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Fcp%2Fmangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Fcp%2Fmangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.cc?ref=f7d1d7777bb86ad049f88214109fb561a741aa2c", "patch": "@@ -1727,6 +1727,66 @@ write_unnamed_type_name (const tree type)\n   write_compact_number (discriminator);\n }\n \n+// A template head, for templated lambdas.\n+// <template-head> ::=   Tp* Ty\n+//                       Tp* Tn <type>\n+//                       Tp* Tt <template-head> E\n+// New in ABI=18. Returns true iff we emitted anything -- used for ABI\n+// version warning.\n+\n+static bool\n+write_closure_template_head (tree tmpl)\n+{\n+  bool any = false;\n+\n+  // We only need one level of template parms\n+  tree inner = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (tmpl));\n+\n+  for (int ix = 0, len = TREE_VEC_LENGTH (inner); ix != len; ix++)\n+    {\n+      tree parm = TREE_VEC_ELT (inner, ix);\n+      if (parm == error_mark_node)\n+\tcontinue;\n+      parm = TREE_VALUE (parm);\n+\n+      if (DECL_VIRTUAL_P (parm))\n+\t// A synthetic parm, we're done.\n+\tbreak;\n+\n+      any = true;\n+      if (abi_version_at_least (18))\n+\t{\n+\t  if (TREE_CODE (parm) == PARM_DECL\n+\t      ? TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm))\n+\t      : TEMPLATE_TYPE_PARAMETER_PACK (TREE_TYPE (parm)))\n+\t    write_string (\"Tp\");\n+\n+\t  switch (TREE_CODE (parm))\n+\t    {\n+\t    default:\n+\t      gcc_unreachable ();\n+\n+\t    case TYPE_DECL:\n+\t      write_string (\"Ty\");\n+\t      break;\n+\n+\t    case PARM_DECL:\n+\t      write_string (\"Tn\");\n+\t      write_type (TREE_TYPE (parm));\n+\t      break;\n+\n+\t    case TEMPLATE_DECL:\n+\t      write_string (\"Tt\");\n+\t      write_closure_template_head (parm);\n+\t      write_string (\"E\");\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  return any;\n+}\n+\n /* <closure-type-name> ::= Ul <lambda-sig> E [ <nonnegative number> ] _\n    <lambda-sig> ::= <parameter type>+  # Parameter types or \"v\" if the lambda has no parameters */\n \n@@ -1740,6 +1800,14 @@ write_closure_type_name (const tree type)\n   MANGLE_TRACE_TREE (\"closure-type-name\", type);\n \n   write_string (\"Ul\");\n+\n+  if (auto ti = maybe_template_info (fn))\n+    if (write_closure_template_head (TI_TEMPLATE (ti)))\n+      // If there were any explicit template parms, we may need to\n+      // issue a mangling diagnostic.\n+      if (abi_warn_or_compat_version_crosses (18))\n+\tG.need_abi_warning = true;\n+\n   write_method_parms (parms, /*method_p=*/1, fn);\n   write_char ('E');\n   write_compact_number (LAMBDA_EXPR_DISCRIMINATOR (lambda));"}, {"sha": "3dd68a4bed2eb1e72f006f1f826c77cc0d194ef6", "filename": "gcc/testsuite/g++.dg/abi/lambda-ctx1-18.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18.C?ref=f7d1d7777bb86ad049f88214109fb561a741aa2c", "patch": "@@ -6,6 +6,6 @@\n // These correctly include the lambda's extra context as a\n // substitution candidate, and thus demangle as expected\n // { dg-final { scan-assembler {_ZNK1C1fMUlT_E_clIMS_iEEDaS1_:} } }\n-// { dg-final { scan-assembler {_ZNK2L2MUlT_T0_E_clIifEEvS0_S1_:} } }\n-// { dg-final { scan-assembler {_ZNK1B2L3MUlT_T0_E_clIjdEEvS1_S2_:} } }\n+// { dg-final { scan-assembler {_ZNK2L2MUlTyTyT_T0_E_clIifEEvS0_S1_:} } }\n+// { dg-final { scan-assembler {_ZNK1B2L3MUlTyTyT_T0_E_clIjdEEvS1_S2_:} } }\n // { dg-final { scan-assembler {_Z3fooIN1qMUlvE_ENS0_UlvE0_EEiOT_OT0_:} } }"}, {"sha": "ec6709a1df09885ec57001fe4691e2967f06b1df", "filename": "gcc/testsuite/g++.dg/abi/lambda-ctx1-18vs17.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18vs17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18vs17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-ctx1-18vs17.C?ref=f7d1d7777bb86ad049f88214109fb561a741aa2c", "patch": "@@ -3,7 +3,7 @@\n \n #include \"lambda-ctx1.h\"\n \n-// { dg-regexp {[^\\n]*lambda-ctx1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK1B2L3MUlT_T0_E_clIjdEEvS0_S1_'\\) and '-fabi-version=18' \\('_ZNK1B2L3MUlT_T0_E_clIjdEEvS1_S2_'\\) [^\\n]*\\n} }\n-// { dg-regexp {[^\\n]*lambda-ctx1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK2L2MUlT_T0_E_clIifEEvS_S0_'\\) and '-fabi-version=18' \\('_ZNK2L2MUlT_T0_E_clIifEEvS0_S1_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-ctx1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK1B2L3MUlT_T0_E_clIjdEEvS0_S1_'\\) and '-fabi-version=18' \\('_ZNK1B2L3MUlTyTyT_T0_E_clIjdEEvS1_S2_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-ctx1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK2L2MUlT_T0_E_clIifEEvS_S0_'\\) and '-fabi-version=18' \\('_ZNK2L2MUlTyTyT_T0_E_clIifEEvS0_S1_'\\) [^\\n]*\\n} }\n // { dg-regexp {[^\\n]*lambda-ctx1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK1C1fMUlT_E_clIMS_iEEDaS0_'\\) and '-fabi-version=18' \\('_ZNK1C1fMUlT_E_clIMS_iEEDaS1_'\\) [^\\n]*\\n} }\n // { dg-regexp {[^\\n]*lambda-ctx1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_Z3fooIN1qMUlvE_EN1qMUlvE0_EEiOT_OT0_'\\) and '-fabi-version=18' \\('_Z3fooIN1qMUlvE_ENS0_UlvE0_EEiOT_OT0_'\\) [^\\n]*\\n} }"}, {"sha": "b61aaf98cd0043c34e8053bb1cade70b32b7fb74", "filename": "gcc/testsuite/g++.dg/abi/lambda-tpl1-17.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1-17.C?ref=f7d1d7777bb86ad049f88214109fb561a741aa2c", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options -fabi-version=17 }\n+\n+#include \"lambda-tpl1.h\"\n+\n+// { dg-final { scan-assembler {_ZNK6l_autoMUlT_E_clIiEEDaS_:} } }\n+// { dg-final { scan-assembler {_ZNK5l_tplMUlT_E_clIiEEDaS_:} } }\n+// { dg-final { scan-assembler {_ZNK10l_tpl_autoMUlT_T0_E_clIiiEEDaS_S0_:} } }\n+// { dg-final { scan-assembler {_ZNK12l_tpl_nt_aryMUlRAT__iE_clILi2EEEDaS0_:} } }\n+// { dg-final { scan-assembler {_ZNK13l_tpl_nt_autoMUlvE_clILi0EEEDav:} } }\n+// { dg-final { scan-assembler {_ZNK9l_tpl_tplMUlR3TPLIT_EE_clI1UEEDaS2_:} } }\n+// { dg-final { scan-assembler {_ZNK13l_tpl_tpl_tplMUlR6TPLTPLIT_EE_clI3TPLEEDaS2_:} } }\n+// { dg-final { scan-assembler {_ZNK5l_varMUlDpT_E_clIJiiiEEEDaS0_:} } }\n+\n+// This mangling might not be correct, it is my best guess:\n+// { FIXMEdg-final { scan-assembler {_ZNK6l_var2MUlDpRAT__iE_clIJLi2ELi2EEEEDaS1_:} } }\n+\n+// { dg-final { scan-assembler {_ZNK6l_var3MUlRT_IJXspT0_EEEE_clI1XJLi1ELi2ELi3EEEEDaS1_:} } }\n+// { dg-final { scan-assembler {_ZNK6l_var4MUlR1YIJDpT_EEE_clIJ1US6_EEEDaS3_:} } }\n+// { dg-final { scan-assembler {_ZZ2FnILi1EEvvENKUlT_E_clIiEEDaS0_:} } }"}, {"sha": "dbeea40765106037b9ed93aa8474dd9573b4a8c3", "filename": "gcc/testsuite/g++.dg/abi/lambda-tpl1-18.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1-18.C?ref=f7d1d7777bb86ad049f88214109fb561a741aa2c", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile { target c++20 } }\n+\n+#include \"lambda-tpl1.h\"\n+\n+// { dg-final { scan-assembler {_ZNK6l_autoMUlT_E_clIiEEDaS0_:} } }\n+// { dg-final { scan-assembler {_ZNK5l_tplMUlTyT_E_clIiEEDaS0_:} } }\n+// { dg-final { scan-assembler {_ZNK10l_tpl_autoMUlTyT_T0_E_clIiiEEDaS0_S1_:} } }\n+// { dg-final { scan-assembler {_ZNK12l_tpl_nt_aryMUlTniRAT__iE_clILi2EEEDaS1_:} } }\n+// { dg-final { scan-assembler {_ZNK13l_tpl_nt_autoMUlTnDavE_clILi0EEEDav:} } }\n+// { dg-final { scan-assembler {_ZNK9l_tpl_tplMUlTtTyTnjER3TPLIT_EE_clI1UEEDaS3_:} } }\n+// { dg-final { scan-assembler {_ZNK13l_tpl_tpl_tplMUlTtTtTyTnjEER6TPLTPLIT_EE_clI3TPLEEDaS3_:} } }\n+// { dg-final { scan-assembler {_ZNK5l_varMUlTpTyDpT_E_clIJiiiEEEDaS1_:} } }\n+\n+// { FIXMEdg-final { scan-assembler {_ZNK6l_var2MUlTpTniDpRAT__iE_clIJLi2ELi2EEEEDaS2_:} } }\n+\n+// { dg-final { scan-assembler {_ZNK6l_var3MUlTtTpTniETpTniRT_IJXspT0_EEEE_clI1XJLi1ELi2ELi3EEEEDaS2_:} } }\n+\n+// { dg-final { scan-assembler {_ZNK6l_var4MUlTpTtTyTnjER1YIJDpT_EEE_clIJ1US7_EEEDaS4_:} } }\n+// This is a different mangling to clang, which gets\n+// _ZNK6l_var4MUlTpTtTyTnjER1YIJDpT_EEE_clIJ1US6_EEEDaS3_\n+// However, I think that is incorrect -- it doesn't demangle as\n+// expected (using the llvm demangler).\n+// https://github.com/llvm/llvm-project/issues/58631\n+\n+// { dg-final { scan-assembler {_ZZ2FnILi1EEvvENKUlTyT_E_clIiEEDaS0_:} } }"}, {"sha": "8bead7393c75202c21f397668e60b69e1a857955", "filename": "gcc/testsuite/g++.dg/abi/lambda-tpl1-18vs17.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1-18vs17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1-18vs17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1-18vs17.C?ref=f7d1d7777bb86ad049f88214109fb561a741aa2c", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options {-fabi-version=18 -Wabi=17} }\n+\n+#include \"lambda-tpl1.h\"\n+\n+// { dg-regexp {[^\\n]*lambda-tpl1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZZ2FnILi1EEvvENKUlT_E_clIiEEDaS0_'\\) and '-fabi-version=18' \\('_ZZ2FnILi1EEvvENKUlTyT_E_clIiEEDaS0_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-tpl1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK6l_var4MUlR1YIJDpT_EEE_clIJ1US6_EEEDaS3_'\\) and '-fabi-version=18' \\('_ZNK6l_var4MUlTpTtTyTnjER1YIJDpT_EEE_clIJ1US7_EEEDaS4_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-tpl1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK6l_var3MUlRT_IJXspT0_EEEE_clI1XJLi1ELi2ELi3EEEEDaS1_'\\) and '-fabi-version=18' \\('_ZNK6l_var3MUlTtTpTniETpTniRT_IJXspT0_EEEE_clI1XJLi1ELi2ELi3EEEEDaS2_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-tpl1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK5l_varMUlDpT_E_clIJiiiEEEDaS0_'\\) and '-fabi-version=18' \\('_ZNK5l_varMUlTpTyDpT_E_clIJiiiEEEDaS1_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-tpl1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK13l_tpl_tpl_tplMUlR6TPLTPLIT_EE_clI3TPLEEDaS2_'\\) and '-fabi-version=18' \\('_ZNK13l_tpl_tpl_tplMUlTtTtTyTnjEER6TPLTPLIT_EE_clI3TPLEEDaS3_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-tpl1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK9l_tpl_tplMUlR3TPLIT_EE_clI1UEEDaS2_'\\) and '-fabi-version=18' \\('_ZNK9l_tpl_tplMUlTtTyTnjER3TPLIT_EE_clI1UEEDaS3_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-tpl1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK13l_tpl_nt_autoMUlvE_clILi0EEEDav'\\) and '-fabi-version=18' \\('_ZNK13l_tpl_nt_autoMUlTnDavE_clILi0EEEDav'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-tpl1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK12l_tpl_nt_aryMUlRAT__iE_clILi2EEEDaS0_'\\) and '-fabi-version=18' \\('_ZNK12l_tpl_nt_aryMUlTniRAT__iE_clILi2EEEDaS1_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-tpl1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK10l_tpl_autoMUlT_T0_E_clIiiEEDaS_S0_'\\) and '-fabi-version=18' \\('_ZNK10l_tpl_autoMUlTyT_T0_E_clIiiEEDaS0_S1_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-tpl1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK5l_tplMUlT_E_clIiEEDaS_'\\) and '-fabi-version=18' \\('_ZNK5l_tplMUlTyT_E_clIiEEDaS0_'\\) [^\\n]*\\n} }\n+// { dg-regexp {[^\\n]*lambda-tpl1.h:[:0-9]* warning: the mangled name [^\\n]* \\('_ZNK6l_autoMUlT_E_clIiEEDaS_'\\) and '-fabi-version=18' \\('_ZNK6l_autoMUlT_E_clIiEEDaS0_'\\) [^\\n]*\\n} }"}, {"sha": "5d6fe5e1d0afba0452c8b75bf7dfcef9d54ed296", "filename": "gcc/testsuite/g++.dg/abi/lambda-tpl1.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d1d7777bb86ad049f88214109fb561a741aa2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-tpl1.h?ref=f7d1d7777bb86ad049f88214109fb561a741aa2c", "patch": "@@ -0,0 +1,59 @@\n+inline auto l_auto = [] (auto) {};\n+\n+inline auto l_tpl = [] <typename T> (T) {};\n+\n+inline auto l_tpl_auto = [] <typename T> (T, auto) {};\n+\n+inline auto l_tpl_nt_ary = [] <int I> (int (&)[I]) {};\n+\n+inline auto l_tpl_nt_auto = [] <auto I = 0> () {};\n+\n+template<typename T, unsigned I> class U;\n+\n+template<template<typename, unsigned> typename> class TPL {};\n+inline auto l_tpl_tpl = [] <template<typename, unsigned> typename T> (TPL<T> &) {};\n+\n+template<template<template<typename, unsigned> typename> typename> class TPLTPL {};\n+inline auto l_tpl_tpl_tpl = []<template<template<typename, unsigned> typename> typename T> (TPLTPL<T> &) {};\n+\n+inline auto l_var = []<typename... Args> (Args...) {};\n+\n+#if FIXME // we fail to parse (&...) correctly\n+inline auto l_var2 = []<int... I> (int (&...)[I]) {};\n+#endif\n+\n+template<int...I> class X {};\n+inline auto l_var3 = []<template<int...> typename T, int...I> (T<I...> &a) {};\n+\n+template<template<typename, unsigned> typename...T> class Y{};\n+inline auto l_var4 = []<template<typename, unsigned> typename... T> (Y<T...> &a) {};\n+\n+template<int I> inline void Fn ()\n+{\n+  auto l = []<typename T> (T) {};\n+  l (1);\n+}\n+\n+void f () \n+{\n+  l_auto (1);\n+  l_tpl (1);\n+  l_tpl_auto (1, 1);\n+  int ary[2];\n+  l_tpl_nt_ary (ary);\n+  l_tpl_nt_auto ();\n+  TPL<U> v;\n+  l_tpl_tpl (v);\n+  TPLTPL<TPL> u;\n+  l_tpl_tpl_tpl (u);\n+  l_var (1, 2, 3);\n+#if FIXME\n+  l_var2 (ary, ary);\n+#endif\n+  X<1,2,3> x;\n+  l_var3 (x);\n+  Y<U,U> y;\n+  l_var4 (y);\n+\n+  Fn<1> ();\n+}"}]}