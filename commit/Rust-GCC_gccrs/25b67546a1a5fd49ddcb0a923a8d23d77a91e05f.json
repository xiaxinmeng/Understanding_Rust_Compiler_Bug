{"sha": "25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViNjc1NDZhMWE1ZmQ0OWRkY2IwYTkyM2E4ZDIzZDc3YTkxZTA1Zg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-02-07T23:00:18Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-02-07T23:00:18Z"}, "message": "Fix more ICEs in -fsave-optimization-record (PR tree-optimization/89235)\n\nPR tree-optimization/89235 reports an ICE inside -fsave-optimization-record\nwhilst reporting the inlining chain of of the location_t in the\nvect_location global.\n\nThis is very similar to PR tree-optimization/86637, fixed in r266821.\n\nThe issue is that the inlining chains are read from the location_t's\nad-hoc data, referencing GC-managed tree blocks, but the former are\nnot GC roots; it's simply assumed that old locations referencing dead\nblocks never get used again.\n\nThe fix is to reset the \"vect_location\" global in more places.  Given\nthat is a somewhat subtle detail, the patch adds a sentinel class to\nreset vect_location at the end of a scope.  Doing it as a class\nsimplifies the task of ensuring that the global is reset on every\nexit path from a function, and also gives a good place to signpost\nthe above subtlety (in the documentation for the class).\n\nThe patch also adds test cases for both of the PRs mentioned above.\n\ngcc/testsuite/ChangeLog:\n\tPR tree-optimization/86637\n\tPR tree-optimization/89235\n\t* gcc.c-torture/compile/pr86637-1.c: New test.\n\t* gcc.c-torture/compile/pr86637-2.c: New test.\n\t* gcc.c-torture/compile/pr86637-3.c: New test.\n\t* gcc.c-torture/compile/pr89235.c: New test.\n\ngcc/ChangeLog:\n\tPR tree-optimization/86637\n\tPR tree-optimization/89235\n\t* tree-vect-loop.c (optimize_mask_stores): Add an\n\tauto_purge_vect_location sentinel to ensure that vect_location is\n\tpurged on exit.\n\t* tree-vectorizer.c\n\t(auto_purge_vect_location::~auto_purge_vect_location): New dtor.\n\t(try_vectorize_loop_1): Add an auto_purge_vect_location sentinel\n\tto ensure that vect_location is purged on exit.\n\t(pass_slp_vectorize::execute): Likewise, replacing the manual\n\treset.\n\t* tree-vectorizer.h (class auto_purge_vect_location): New class.\n\nFrom-SVN: r268659", "tree": {"sha": "9669c8a1154a56f24f9d2079c0759f4b6424e0ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9669c8a1154a56f24f9d2079c0759f4b6424e0ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8544ed6eea68a80999504c8a4b21b77d29cd86e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8544ed6eea68a80999504c8a4b21b77d29cd86e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8544ed6eea68a80999504c8a4b21b77d29cd86e2"}], "stats": {"total": 265, "additions": 263, "deletions": 2}, "files": [{"sha": "cbb1ebe4a3ebed76c13f049b6a0d2299a1c5f6fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "patch": "@@ -1,3 +1,18 @@\n+2019-02-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/86637\n+\tPR tree-optimization/89235\n+\t* tree-vect-loop.c (optimize_mask_stores): Add an\n+\tauto_purge_vect_location sentinel to ensure that vect_location is\n+\tpurged on exit.\n+\t* tree-vectorizer.c\n+\t(auto_purge_vect_location::~auto_purge_vect_location): New dtor.\n+\t(try_vectorize_loop_1): Add an auto_purge_vect_location sentinel\n+\tto ensure that vect_location is purged on exit.\n+\t(pass_slp_vectorize::execute): Likewise, replacing the manual\n+\treset.\n+\t* tree-vectorizer.h (class auto_purge_vect_location): New class.\n+\n 2019-02-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/iterators.md (max_opp): New code_attr."}, {"sha": "cb500f534890cfb8d4370d52e4fa698d854ddec4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "patch": "@@ -1,3 +1,12 @@\n+2019-02-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/86637\n+\tPR tree-optimization/89235\n+\t* gcc.c-torture/compile/pr86637-1.c: New test.\n+\t* gcc.c-torture/compile/pr86637-2.c: New test.\n+\t* gcc.c-torture/compile/pr86637-3.c: New test.\n+\t* gcc.c-torture/compile/pr89235.c: New test.\n+\n 2019-02-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/abd_1.c: New test."}, {"sha": "61b6381b22461c5fa96a76badcd908af9b7fb471", "filename": "gcc/testsuite/gcc.c-torture/compile/pr86637-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86637-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86637-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86637-1.c?ref=25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-fsave-optimization-record -ftree-slp-vectorize --param ggc-min-expand=1 --param ggc-min-heapsize=1024\" } */\n+\n+void\n+en (void)\n+{\n+}\n+\n+void\n+n4 (int zb)\n+{\n+  while (zb < 1)\n+    ++zb;\n+}"}, {"sha": "3b675eae1b685fb1f7a431bb84dc5b3dbb327177", "filename": "gcc/testsuite/gcc.c-torture/compile/pr86637-2.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86637-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86637-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86637-2.c?ref=25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do compile { target fgraphite } } */\n+/* { dg-options \"-floop-parallelize-all -fsave-optimization-record -ftree-parallelize-loops=2 -ftree-slp-vectorize\" } */\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+signed char qq;\n+int rm, mu, l9;\n+long long unsigned int ip;\n+\n+void\n+fi (void)\n+{\n+}\n+\n+void\n+il (long long unsigned int c5)\n+{\n+  int *na = &mu;\n+\n+  while (l9 < 1)\n+    {\n+      if (qq < 1)\n+        {\n+          short int ds = 0;\n+\n+          if ((ip - *na - ip / c5 != 0) && (*na / ((c5 + c5) && !!ip) != 0))\n+            __builtin_trap ();\n+\n+          rm = -1 / (!!rm && !!c5);\n+\n+          while (qq < 1)\n+            {\n+              ++*na;\n+              ++ip;\n+              if (*na < (int) ip)\n+                while (ds < 2)\n+                  {\n+                    ++qq;\n+                    ++ds;\n+                  }\n+            }\n+        }\n+\n+      ++l9;\n+    }\n+\n+  for (;;)\n+    {\n+    }\n+}\n+\n+void\n+uu (short int wk)\n+{\n+  int64_t tl = ip;\n+\n+  while (ip < 2)\n+    {\n+      signed char vn;\n+\n+      for (vn = 1; vn != 0; ++vn)\n+        {\n+          int rh;\n+\n+          if (qq < 1)\n+            {\n+              while (mu < 1)\n+                ip = 0;\n+\n+              while (rm != 0)\n+                ++rm;\n+            }\n+\n+          for (rh = 0; rh < 3; ++rh)\n+            {\n+              int ab;\n+\n+              for (ab = 0; ab < 5; ++ab)\n+                {\n+                  tl -= qq;\n+                  wk += rh - tl;\n+                  ip += (ab < wk) + wk;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void\n+im (uint8_t kt)\n+{\n+  int wu = 0;\n+\n+  for (;;)\n+    {\n+      ++rm;\n+      if (rm < 1)\n+        {\n+          short int ms = 0;\n+\n+          while (kt < 1)\n+            {\n+              ms += rm < 0;\n+\n+              if (wu != 0)\n+                for (;;)\n+                  {\n+                  }\n+\n+              while (ms < 4)\n+                {\n+                  while (wu < 1)\n+                    wu += 2;\n+\n+                  ++ms;\n+                }\n+            }\n+\n+          if (ms == 0 || wu == 0)\n+            break;\n+        }\n+    }\n+\n+  while (wu < 1)\n+    while (qq < 1)\n+      ++qq;\n+}"}, {"sha": "6cb0fd78e97d202b4b0f66ee3c70bb4926357be1", "filename": "gcc/testsuite/gcc.c-torture/compile/pr86637-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86637-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86637-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86637-3.c?ref=25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-fsave-optimization-record -ftree-slp-vectorize --param ggc-min-expand=0 --param ggc-min-heapsize=1024\" } */\n+void\n+te (void)\n+{\n+}\n+\n+int\n+main (void)\n+{\n+  return 0;\n+}"}, {"sha": "86be27f7704fe5691b1e24b5c92784f9993dffe9", "filename": "gcc/testsuite/gcc.c-torture/compile/pr89235.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89235.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89235.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89235.c?ref=25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-require-effective-target fopenmp } */\n+/* { dg-options \"-S -fopenmp -fsave-optimization-record -ftree-parallelize-loops=2 -fno-tree-vectorize --param ggc-min-expand=0\" } */\n+\n+int a1, dr, xm, ly, zb, g9, il;\n+\n+long int wt;\n+unsigned int mq;\n+int br, e7, rm, t4, jb, ry;\n+\n+int\n+fi (void);\n+\n+int\n+z5 (int fl)\n+{\n+  while (br < 1)\n+    while (e7 != 0)\n+      while (mq != 1)\n+        {\n+          if (!!fl)\n+            {\n+              wt = rm;\n+              fi ();\n+            }\n+\n+          ++mq;\n+        }\n+\n+  return 0;\n+}\n+\n+void\n+gg (void)\n+{\n+  t4 = rm = z5 (rm);\n+  jb = z5 (rm);\n+  ry = fi ();\n+}\n+\n+#pragma omp declare simd\n+void\n+hl (void)\n+{\n+  for (;;)\n+    {\n+      gg ();\n+      gg ();\n+      gg ();\n+    }\n+}\n+\n+#pragma omp declare simd\n+int\n+cw (void)\n+{\n+  return 0;\n+}"}, {"sha": "d63d3825f2018c885405440e07c4e9fcd9daea82", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "patch": "@@ -8578,6 +8578,7 @@ optimize_mask_stores (struct loop *loop)\n   gimple_stmt_iterator gsi;\n   gimple *stmt;\n   auto_vec<gimple *> worklist;\n+  auto_purge_vect_location sentinel;\n \n   vect_location = find_loop_location (loop);\n   /* Pick up all masked stores in loop if any.  */"}, {"sha": "d27104933a95a330e560505ec519ec820b921572", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "patch": "@@ -86,6 +86,15 @@ along with GCC; see the file COPYING3.  If not see\n /* Loop or bb location, with hotness information.  */\n dump_user_location_t vect_location;\n \n+/* auto_purge_vect_location's dtor: reset the vect_location\n+   global, to avoid stale location_t values that could reference\n+   GC-ed blocks.  */\n+\n+auto_purge_vect_location::~auto_purge_vect_location ()\n+{\n+  vect_location = dump_user_location_t ();\n+}\n+\n /* Dump a cost entry according to args to F.  */\n \n void\n@@ -860,6 +869,7 @@ try_vectorize_loop_1 (hash_table<simduid_to_vf> *&simduid_to_vf_htab,\n {\n   unsigned ret = 0;\n   vec_info_shared shared;\n+  auto_purge_vect_location sentinel;\n   vect_location = find_loop_location (loop);\n   if (LOCATION_LOCUS (vect_location.get_location_t ()) != UNKNOWN_LOCATION\n       && dump_enabled_p ())\n@@ -1269,6 +1279,7 @@ class pass_slp_vectorize : public gimple_opt_pass\n unsigned int\n pass_slp_vectorize::execute (function *fun)\n {\n+  auto_purge_vect_location sentinel;\n   basic_block bb;\n \n   bool in_loop_pipeline = scev_initialized_p ();\n@@ -1303,8 +1314,6 @@ pass_slp_vectorize::execute (function *fun)\n       loop_optimizer_finalize ();\n     }\n \n-  vect_location = dump_user_location_t ();\n-\n   return 0;\n }\n "}, {"sha": "0e056f34b53cf80028cdc43d33c8d90f246fb880", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b67546a1a5fd49ddcb0a923a8d23d77a91e05f/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=25b67546a1a5fd49ddcb0a923a8d23d77a91e05f", "patch": "@@ -1420,6 +1420,24 @@ extern dump_user_location_t vect_location;\n #define DUMP_VECT_SCOPE(MSG) \\\n   AUTO_DUMP_SCOPE (MSG, vect_location)\n \n+/* A sentinel class for ensuring that the \"vect_location\" global gets\n+   reset at the end of a scope.\n+\n+   The \"vect_location\" global is used during dumping and contains a\n+   location_t, which could contain references to a tree block via the\n+   ad-hoc data.  This data is used for tracking inlining information,\n+   but it's not a GC root; it's simply assumed that such locations never\n+   get accessed if the blocks are optimized away.\n+\n+   Hence we need to ensure that such locations are purged at the end\n+   of any operations using them (e.g. via this class).  */\n+\n+class auto_purge_vect_location\n+{\n+ public:\n+  ~auto_purge_vect_location ();\n+};\n+\n /*-----------------------------------------------------------------*/\n /* Function prototypes.                                            */\n /*-----------------------------------------------------------------*/"}]}