{"sha": "5f5f7b7d730a2065a784c089af386a593ee4b575", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1ZjdiN2Q3MzBhMjA2NWE3ODRjMDg5YWYzODZhNTkzZWU0YjU3NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2016-07-04T12:57:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T12:57:30Z"}, "message": "Update documentation.\n\nFrom-SVN: r237979", "tree": {"sha": "faac9de31e90017bacc4402eeb02b9955aaba0c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faac9de31e90017bacc4402eeb02b9955aaba0c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f5f7b7d730a2065a784c089af386a593ee4b575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5f7b7d730a2065a784c089af386a593ee4b575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5f7b7d730a2065a784c089af386a593ee4b575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5f7b7d730a2065a784c089af386a593ee4b575/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e12880f96fa42ce889c08d51876cf782afe11aa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12880f96fa42ce889c08d51876cf782afe11aa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e12880f96fa42ce889c08d51876cf782afe11aa4"}], "stats": {"total": 6293, "additions": 487, "deletions": 5806}, "files": [{"sha": "399452bdcd628e777e6f92c226aea6c24f1034f3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -1,3 +1,21 @@\n+2016-07-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_rm.texi, gnat_ugn.texi,\n+\tdoc/gnat_ugn/gnat_project_manager.rst,\n+\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n+\tdoc/gnat_ugn/elaboration_order_handling_in_gnat.rst,\n+\tdoc/gnat_ugn/about_this_guide.rst,\n+\tdoc/gnat_ugn/platform_specific_information.rst,\n+\tdoc/gnat_ugn/tools_supporting_project_files.rst,\n+\tdoc/gnat_ugn/gnat_and_program_execution.rst,\n+\tdoc/gnat_ugn/gnat_utility_programs.rst,\n+\tdoc/gnat_ugn/the_gnat_compilation_model.rst,\n+\tdoc/gnat_rm/implementation_defined_attributes.rst,\n+\tdoc/gnat_rm/implementation_defined_pragmas.rst,\n+\tdoc/gnat_rm/representation_clauses_and_pragmas.rst,\n+\tdoc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n+\tdoc/gnat_ugn.rst: Update documentation.\n+\n 2016-07-04  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Makefile.in: Cleanups."}, {"sha": "5c7f8012104d0c0c4e416675e2e3a55e1fbf45e6", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_attributes.rst", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -966,9 +966,6 @@ types. This may be overridden for the derived type by giving an explicit scalar\n storage order for the derived type. For a record extension, the derived type\n must have the same scalar storage order as the parent type.\n \n-If a component of `T` is of a record or array type, then that type must\n-also have a `Scalar_Storage_Order` attribute definition clause.\n-\n A component of a record or array type that is a bit-packed array, or that\n does not start on a byte boundary, must have the same scalar storage order\n as the enclosing record or array type.\n@@ -1005,6 +1002,11 @@ inheritance in the case of a derived type), then the default is normally\n the native ordering of the target, but this default can be overridden using\n pragma `Default_Scalar_Storage_Order`.\n \n+Note that if a component of `T` is itself of a record or array type,\n+the specfied `Scalar_Storage_Order` does *not* apply to that nested type:\n+an explicit attribute definition clause must be provided for the component\n+type as well if desired.\n+\n Note that the scalar storage order only affects the in-memory data\n representation. It has no effect on the representation used by stream\n attributes."}, {"sha": "78ee2f65d0438013aab3c31d8dca52d8621fd534", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -196,7 +196,7 @@ Ada 83, Ada 95, or Ada 2005 programs.\n The one argument form, which is not a configuration pragma,\n is used for managing the transition from Ada\n 2005 to Ada 2012 in the run-time library. If an entity is marked\n-as Ada_201 only, then referencing the entity in any pre-Ada_2012\n+as Ada_2012 only, then referencing the entity in any pre-Ada_2012\n mode will generate a warning. In addition, in any pre-Ada_2012\n mode, a preference rule is established which does not choose\n such an entity unless it is unambiguously specified. This avoids\n@@ -6821,6 +6821,40 @@ the handling of existing code which depends on the interpretation of Size\n as implemented in the VADS compiler.  See description of the VADS_Size\n attribute for further details.\n \n+.. _Pragma-Unused:\n+\n+Pragma Unused\n+=============\n+.. index:: Warnings, unused\n+\n+Syntax:\n+\n+\n+::\n+\n+  pragma Unused (LOCAL_NAME {, LOCAL_NAME});\n+\n+\n+This pragma signals that the assignable entities (variables,\n+`out` parameters, and `in out` parameters) whose names are listed\n+deliberately do not get assigned or referenced in the current source unit\n+after the occurrence of the pragma in the current source unit. This\n+suppresses warnings about the entities that are unreferenced and/or not\n+assigned, and, in addition, a warning will be generated if one of these\n+entities gets assigned or subsequently referenced in the same unit as the\n+pragma (in the corresponding body or one of its subunits).\n+\n+This is particularly useful for clearly signaling that a particular\n+parameter is not modified or referenced, even though the spec suggests\n+that it might be.\n+\n+For the variable case, warnings are never given for unreferenced\n+variables whose name contains one of the substrings\n+`DISCARD, DUMMY, IGNORE, JUNK, UNUSED` in any casing. Such names\n+are typically to be used in cases where such warnings are expected.\n+Thus it is never necessary to use `pragma Unmodified` for such\n+variables, though it is harmless to do so. \n+\n Pragma Validity_Checks\n ======================\n "}, {"sha": "0af4ce74ccbb6a86ab50dfee9fae6ff33ce1ea0f", "filename": "gcc/ada/doc/gnat_rm/representation_clauses_and_pragmas.rst", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -53,9 +53,9 @@ values are as follows:\n   For arrays, the alignment is equal to the alignment of the component type\n   for the normal case where no packing or component size is given.  If the\n   array is packed, and the packing is effective (see separate section on\n-  packed arrays), then the alignment will be either 4, 2 or 1 for long packed\n+  packed arrays), then the alignment will be either 4, 2, or 1 for long packed\n   arrays or arrays whose length is not known at compile time, depending on\n-  whether the component size is divisible by 4, 2 or is odd.  For short packed\n+  whether the component size is divisible by 4, 2, or is odd.  For short packed\n   arrays, which are handled internally as modular types, the alignment\n   will be as described for elementary types, e.g. a packed array of length\n   31 bits will have an object size of four bytes, and an alignment of 4.\n@@ -490,7 +490,7 @@ discrete types are as follows:\n   The `Object_Size` for base subtypes reflect the natural hardware\n   size in bits (run the compiler with *-gnatS* to find those values\n   for numeric types). Enumeration types and fixed-point base subtypes have\n-  8, 16, 32 or 64 bits for this size, depending on the range of values\n+  8, 16, 32, or 64 bits for this size, depending on the range of values\n   to be stored.\n \n *\n@@ -1187,7 +1187,7 @@ taken by components.  We distinguish between *packable* components and\n Components of the following types are considered packable:\n \n * Components of an elementary type are packable unless they are aliased,\n-  independent or of an atomic type.\n+  independent, or of an atomic type.\n \n * Small packed arrays, where the size is statically known, are represented\n   internally as modular integers, and so they are also packable."}, {"sha": "da49056d4f155cf9ee67d2aaeaafd2cc6c62c06c", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -445,20 +445,6 @@ No_Implicit_Heap_Allocations\n \n [RM D.7] No constructs are allowed to cause implicit heap allocation.\n \n-No_Implicit_Loops\n------------------\n-.. index:: No_Implicit_Loops\n-\n-[GNAT] This restriction ensures that the generated code does not contain any\n-implicit `for` loops, either by modifying\n-the generated code where possible,\n-or by rejecting any construct that would otherwise generate an implicit\n-`for` loop. If this restriction is active, it is possible to build\n-large array aggregates with all static components without generating an\n-intermediate temporary, and without generating a loop to initialize individual\n-components. Otherwise, a loop is created for arrays larger than about 5000\n-scalar components.\n-\n No_Implicit_Protected_Object_Allocations\n ----------------------------------------\n .. index:: No_Implicit_Protected_Object_Allocations\n@@ -969,6 +955,20 @@ Unrestricted_Access is forbidden is that it would require the prefix\n to be aliased, and in such cases, it can always be replaced by\n the standard attribute Unchecked_Access which is preferable.\n \n+No_Implicit_Loops\n+-----------------\n+.. index:: No_Implicit_Loops\n+\n+[GNAT] This restriction ensures that the generated code of the unit marked\n+with this restriction does not contain any implicit `for` loops, either by\n+modifying the generated code where possible, or by rejecting any construct\n+that would otherwise generate an implicit `for` loop. If this restriction is\n+active, it is possible to build large array aggregates with all static\n+components without generating an intermediate temporary, and without generating\n+a loop to initialize individual components. Otherwise, a loop is created for\n+arrays larger than about 5000 scalar components. Note that if this restriction\n+is set in the spec of a package, it will not apply to its body.\n+\n No_Obsolescent_Features\n -----------------------\n .. index:: No_Obsolescent_Features"}, {"sha": "d6d2ba9756b24de1e99f42ab9e1a764619852867", "filename": "gcc/ada/doc/gnat_ugn.rst", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -42,8 +42,6 @@ included in the section entitled :ref:`gnu_fdl`.\n    gnat_ugn/getting_started_with_gnat\n    gnat_ugn/the_gnat_compilation_model\n    gnat_ugn/building_executable_programs_with_gnat\n-   gnat_ugn/gnat_project_manager\n-   gnat_ugn/tools_supporting_project_files\n    gnat_ugn/gnat_utility_programs\n    gnat_ugn/gnat_and_program_execution\n "}, {"sha": "308a1e6ee58cf7058025623b97b65254010550fe", "filename": "gcc/ada/doc/gnat_ugn/about_this_guide.rst", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fabout_this_guide.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -37,12 +37,6 @@ This guide contains the following chapters:\n   main GNAT tools to build executable programs, and it also gives examples of\n   using the GNU make utility with GNAT.\n \n-* :ref:`GNAT_Project_Manager` describes how to use project files\n-  to organize large projects.\n-  \n-* :ref:`Tools_Supporting_Project_Files` described how to use the project\n-  facility in conjunction with various GNAT tools.\n-\n * :ref:`GNAT_Utility_Programs` explains the various utility programs that\n   are included in the GNAT environment\n "}, {"sha": "d981f4670574cfe8fad5bab821337b85dc0a8f60", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -27,6 +27,15 @@ Finally, this chapter provides examples of\n how to make use of the general GNU make mechanism\n in a GNAT context (see :ref:`Using_the_GNU_make_Utility`).\n \n+.. only:: PRO or GPL\n+  \n+   For building large systems with components possibly written\n+   in different languages (such as Ada, C, C++ and Fortran)\n+   and organized into subsystems and libraries, the GPRbuild\n+   tool can be used. This tool, and the Project Manager\n+   facility that it is based upon, is described in\n+   *GPRbuild and GPR Companion Tools User's Guide*.\n+\t  \n \n .. _The_GNAT_Make_Program_gnatmake:\n \n@@ -67,8 +76,9 @@ changes to the source program cause corresponding changes in\n dependencies, they will always be tracked exactly correctly by\n *gnatmake*.\n \n-Note that for advanced description of project structure, we recommend creating\n-a project file as explained in :ref:`GNAT_Project_Manager` and use the\n+Note that for advanced forms of project structure, we recommend creating\n+a project file as explained in the *GNAT_Project_Manager* chapter in the\n+*GPRbuild User's Guide*, and using the\n *gprbuild* tool which supports building with project files and works similarly\n to *gnatmake*.\n \n@@ -516,6 +526,8 @@ You may specify any of the following switches to *gnatmake*:\n \n :samp:`-P{project}`\n   Use project file `project`. Only one such switch can be used.\n+\n+.. -- Comment:  \n   :ref:`gnatmake_and_Project_Files`.\n \n \n@@ -545,8 +557,10 @@ You may specify any of the following switches to *gnatmake*:\n :samp:`-u`\n   Unique. Recompile at most the main files. It implies -c. Combined with\n   -f, it is equivalent to calling the compiler directly. Note that using\n-  -u with a project file and no main has a special meaning\n-  (:ref:`Project_Files_and_Main_Subprograms`).\n+  -u with a project file and no main has a special meaning.\n+\n+.. --Comment:\n+  (See :ref:`Project_Files_and_Main_Subprograms`.)\n \n \n .. index:: -U  (gnatmake)"}, {"sha": "4f0c3752dbf4a2c9a0eb8db3b0826e18fe85eef2", "filename": "gcc/ada/doc/gnat_ugn/elaboration_order_handling_in_gnat.rst", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -75,7 +75,7 @@ of that unit before elaborating the unit doing the |withing|:\n \n      with Unit_1;\n      package Unit_2 is ...\n-  \n+\n would require that both the body and spec of `Unit_1` be elaborated\n before the spec of `Unit_2`. However, a rule like that would be far too\n restrictive. In particular, it would make it impossible to have routines\n@@ -94,7 +94,7 @@ of the body of `Unit_1`:\n .. code-block:: ada\n \n      Sqrt_1 : Float := Sqrt (0.1);\n-  \n+\n The elaboration code of the body of `Unit_1` also contains:\n \n .. code-block:: ada\n@@ -111,15 +111,15 @@ the body `Unit_2`:\n .. code-block:: ada\n \n       Sqrt_2 : Float := Sqrt (0.1);\n-  \n+\n The elaboration code of the body of `Unit_2` also contains:\n \n .. code-block:: ada\n \n      if expression_2 = 2 then\n         Q := Unit_1.Func_1;\n      end if;\n-  \n+\n Now the question is, which of the following orders of elaboration is\n acceptable:\n \n@@ -129,7 +129,7 @@ acceptable:\n      Spec of Unit_2\n      Body of Unit_1\n      Body of Unit_2\n-  \n+\n or\n \n ::\n@@ -138,7 +138,7 @@ or\n      Spec of Unit_1\n      Body of Unit_2\n      Body of Unit_1\n-  \n+\n If you carefully analyze the flow here, you will see that you cannot tell\n at compile time the answer to this question.\n If `expression_1` is not equal to 1,\n@@ -378,7 +378,7 @@ order of elaboration of the servers on which they depend:\n \n         Unit A |withs| unit B and calls B.Func in elab code\n         Unit B |withs| unit C, and B.Func calls C.Func\n-    \n+\n \n   Now if we put a pragma `Elaborate (B)`\n   in unit `A`, this ensures that the\n@@ -481,14 +481,14 @@ example writing:\n .. code-block:: ada\n \n      function One return Float;\n- \n+\n      Q : Float := One;\n-  \n+\n      function One return Float is\n      begin\n           return 1.0;\n      end One;\n-  \n+\n will obviously raise `Program_Error` at run time, because function\n One will be called before its body is elaborated. In this case GNAT will\n generate a warning that the call will raise `Program_Error`::\n@@ -510,7 +510,7 @@ generate a warning that the call will raise `Program_Error`::\n     11. begin\n     12.    null;\n     13. end;\n-  \n+\n \n Note that in this particular case, it is likely that the call is safe, because\n the function `One` does not access any global variables.\n@@ -527,7 +527,7 @@ would prevent this reordering, and if we write:\n .. code-block:: ada\n \n      function One return Float;\n- \n+\n      function One return Float is\n      begin\n           return 1.0;\n@@ -586,7 +586,7 @@ raised at the point of the call. Let's look at the warning::\n     13. begin\n     14.    null;\n     15. end;\n-  \n+\n \n Note that the message here says 'may raise', instead of the direct case,\n where the message says 'will be raised'. That's because whether\n@@ -677,7 +677,7 @@ Consider the following:\n       begin\n          ...\n       end Main;\n-  \n+\n where `Main` is the main program. When this program is executed, the\n elaboration code must first be executed, and one of the jobs of the\n binder is to determine the order in which the units of a program are\n@@ -813,7 +813,7 @@ switch, then the compiler outputs an information message::\n                           |\n         >>> info: call to \"r\" may raise Program_Error\n         >>> info: missing pragma Elaborate_All for \"k\"\n-   \n+\n      4. end;\n \n and these messages can be used as a guide for supplying manually\n@@ -840,7 +840,7 @@ the *-gnatE* switch on the compiler (*gcc* or\n .. code-block:: ada\n \n       pragma Elaboration_Checks (DYNAMIC);\n-  \n+\n Either approach will cause the unit affected to be compiled using the\n standard dynamic run-time elaboration checks described in the Ada\n Reference Manual. The static model is generally preferable, since it\n@@ -976,7 +976,7 @@ the following example\n       begin\n          Decls.Lib_Task.Start;\n       end;\n-  \n+\n If the above example is compiled in the default static elaboration\n mode, then a circularity occurs. The circularity comes from the call\n `Utils.Put_Val` in the task body of `Decls.Lib_Task`. Since\n@@ -1112,7 +1112,7 @@ We have four possible answers to this question:\n       begin\n          Decls1.Lib_Task.Start;\n       end;\n-    \n+\n \n   All we have done is to split `Decls` into two packages, one\n   containing the library task, and one containing everything else. Now\n@@ -1179,7 +1179,7 @@ We have four possible answers to this question:\n       begin\n          Declst.Lib_Task.Start;\n       end;\n-    \n+\n \n   What we have done here is to replace the `task` declaration in\n   package `Decls` with a `task type` declaration. Then we\n@@ -1227,7 +1227,7 @@ We have four possible answers to this question:\n   .. code-block:: ada\n \n       pragma Restrictions (No_Entry_Calls_In_Elaboration_Code);\n-    \n+\n   This pragma can be placed in the :file:`gnat.adc` file in the usual\n   manner. If we take our original unmodified program and compile it\n   in the presence of a :file:`gnat.adc` containing the above pragma,\n@@ -1288,7 +1288,7 @@ similar to that in the following example::\n \n      warning: \"x.ads\" has dynamic elaboration checks and with's\n      warning:   \"y.ads\" which has static elaboration checks\n- \n+\n These warnings indicate that the rule has been violated, and that as a result\n elaboration checks may be missed in the resulting executable file.\n This warning may be suppressed using the *-ws* binder switch\n@@ -1456,7 +1456,7 @@ Faced with a circularity of this kind, you have three different options.\n         begin\n           Ada.Text_IO.Put_Line(Pack1.X1'Img); -- 101\n         end Proc3;\n-    \n+\n   In the absence of any pragmas, an attempt to bind this program produces\n   the following diagnostics::\n \n@@ -1473,7 +1473,7 @@ Faced with a circularity of this kind, you have three different options.\n        info:          \"pack2 (spec)\"\n        info:             which is withed by:\n        info:          \"pack1 (body)\"\n-    \n+\n   The sources of the circularity are the two calls to `Pack2.Pure` and\n   `Pack2.F2` in the body of `Pack1`. We can see that the call to\n   F2 is safe, even though F2 calls F1, because the call appears after the\n@@ -1541,19 +1541,24 @@ fall back to run-time checks; premature calls to any primitive\n operation of a tagged type before the body of the operation has been\n elaborated will raise `Program_Error`.\n \n-Access-to-subprogram types, however, are handled conservatively, and\n-do not require run-time checks. This was not true in earlier versions\n-of the compiler; you can use the *-gnatd.U* debug switch to\n-revert to the old behavior if the new conservative behavior causes\n-elaboration cycles. Here, 'conservative' means that if you do\n-`P'Access` during elaboration, the compiler will assume that you\n-might call `P` indirectly during elaboration, so it adds an\n-implicit `pragma Elaborate_All` on the library unit containing\n-`P`. The *-gnatd.U* switch is safe if you know there are\n-no such calls. If the program worked before, it will continue to work\n-with *-gnatd.U*. But beware that code modifications such as\n-adding an indirect call can cause erroneous behavior in the presence\n-of *-gnatd.U*.\n+Access-to-subprogram types, however, are handled conservatively in many\n+cases. This was not true in earlier versions of the compiler; you can use\n+the *-gnatd.U* debug switch to revert to the old behavior if the new\n+conservative behavior causes elaboration cycles. Here, 'conservative' means\n+that if you do `P'Access` during elaboration, the compiler will normally\n+assume that you might call `P` indirectly during elaboration, so it adds an\n+implicit `pragma Elaborate_All` on the library unit containing `P`. The\n+*-gnatd.U* switch is safe if you know there are no such calls. If the\n+program worked before, it will continue to work with *-gnatd.U*. But beware\n+that code modifications such as adding an indirect call can cause erroneous\n+behavior in the presence of *-gnatd.U*.\n+\n+These implicit Elaborate_All pragmas are not added in all cases, because\n+they cause elaboration cycles in certain common code patterns. If you want\n+even more conservative handling of P'Access, you can use the *-gnatd.o*\n+switch.\n+\n+See `debug.adb` for documentation on the *-gnatd...* debug switches.\n \n \n .. _Summary_of_Procedures_for_Elaboration_Control:\n@@ -1564,7 +1569,7 @@ Summary of Procedures for Elaboration Control\n .. index:: Elaboration control\n \n First, compile your program with the default options, using none of\n-the special elaboration control switches. If the binder successfully\n+the special elaboration-control switches. If the binder successfully\n binds your program, then you can be confident that, apart from issues\n raised by the use of access-to-subprogram types and dynamic dispatching,\n the program is free of elaboration errors. If it is important that the\n@@ -1621,7 +1626,7 @@ requirements. Consider this example:\n      package Init_Constants is\n         procedure P; --* require a body*\n      end Init_Constants;\n- \n+\n      with Constants;\n      package body Init_Constants is\n         procedure P is begin null; end;\n@@ -1641,7 +1646,7 @@ requirements. Consider this example:\n      begin\n         Put_Line (Calc.Z'Img);\n      end Main;\n-  \n+\n In this example, there is more than one valid order of elaboration. For\n example both the following are correct orders::\n \n@@ -1654,13 +1659,13 @@ example both the following are correct orders::\n and\n \n ::\n-  \n+\n     Init_Constants spec\n     Init_Constants body\n     Constants spec\n     Calc spec\n     Main body\n-  \n+\n There is no language rule to prefer one or the other, both are correct\n from an order of elaboration point of view. But the programmatic effects\n of the two orders are very different. In the first, the elaboration routine\n@@ -1684,7 +1689,7 @@ case, that could have been achieved by adding to the spec of Calc:\n .. code-block:: ada\n \n      pragma Elaborate_All (Constants);\n-  \n+\n which requires that the body (if any) and spec of `Constants`,\n as well as the body and spec of any unit |withed| by\n `Constants` be elaborated before `Calc` is elaborated.\n@@ -1719,7 +1724,7 @@ following output:\n      $ gnatmake -f -q main -bargs -p\n      $ main\n       0\n-  \n+\n It is of course quite unlikely that both these results are correct, so\n it is up to you in a case like this to investigate the source of the\n difference, by looking at the two elaboration orders that are chosen,\n@@ -1768,7 +1773,7 @@ the last part of the file:`b~xxx.adb` binder output file. Here is an example::\n      Ada.Text_Io'Elab_Spec;\n      Ada.Text_Io'Elab_Body;\n      E07 := True;\n-  \n+\n Here Elab_Spec elaborates the spec\n and Elab_Body elaborates the body. The assignments to the :samp:`E{xx}` flags\n flag that the corresponding body is now elaborated."}, {"sha": "ddce9218b363549c01899e254bc732cf7bc2fb10", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -2605,6 +2605,14 @@ appropriate options.\n   subprograms and helps the compiler to create a smaller executable for your\n   program.\n \n+  *gnatelim* is a project-aware tool.\n+  (See :ref:`Using_Project_Files_with_GNAT_Tools` for a description of\n+  the project-related switches but note that *gnatelim* does not support\n+  the :samp:`-U`, :samp:`-U {main_unit}`, :samp:`--subdirs={dir}`, or\n+  :samp:`--no_objects_dir` switches.)\n+  The project file package that can specify\n+  *gnatelim* switches is named ``Eliminate``.\n+\n   .. _About_gnatelim:\n \n   About `gnatelim`"}, {"sha": "95f6ebd7183ea3c029c84699e8dd0a4e371c6af7", "filename": "gcc/ada/doc/gnat_ugn/gnat_project_manager.rst", "status": "removed", "additions": 0, "deletions": 4887, "changes": 4887, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12880f96fa42ce889c08d51876cf782afe11aa4/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12880f96fa42ce889c08d51876cf782afe11aa4/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst?ref=e12880f96fa42ce889c08d51876cf782afe11aa4"}, {"sha": "1d22d17e93518c9acb5184400cddfd9743ad85fe", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 237, "deletions": 82, "changes": 319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -19,6 +19,9 @@ This chapter describes a number of utility programs:\n   * :ref:`The_Body_Stub_Generator_gnatstub`\n   * :ref:`The_Unit_Test_Generator_gnattest`\n \n+  It also describes how several of these tools can be used in conjunction\n+  with project files: :ref:`Using_Project_Files_with_GNAT_Tools`\n+\n .. only:: FSF\n \n   * :ref:`The_File_Cleanup_Utility_gnatclean`\n@@ -629,7 +632,8 @@ The following switches are available for *gnatxref*:\n .. index:: -pFILE (gnatxref)\n \n :samp:`p{FILE}`\n-  Specify a project file to use :ref:`GNAT_Project_Manager`.\n+  Specify a project file to use (see the *GNAT_Project_Manager*\n+  chapter in the *GPRbuild User's Guide*).\n   If you need to use the :file:`.gpr`\n   project files, you should use gnatxref through the GNAT driver\n   (*gnat xref -Pproject*).\n@@ -832,7 +836,8 @@ The following switches are available:\n .. index:: -pFILE (gnatfind)\n \n :samp:`p{FILE}`\n-  Specify a project file (:ref:`GNAT_Project_Manager`) to use.\n+  Specify a project file (see the *GNAT_Project_Manager* chapter in the\n+  *GPRbuild User's Guide*).\n   By default, `gnatxref` and `gnatfind` will try to locate a\n   project file in the current directory.\n \n@@ -1379,6 +1384,11 @@ Alternatively, you may run the script using the following command line:\n   The *gnat2xml* tool is an ASIS-based utility that converts\n   Ada source code into XML.\n \n+  *gnat2xml* is a project-aware tool\n+  (see :ref:`Using_Project_Files_with_GNAT_Tools` for a description of\n+  the project-related switches).  The project file package that can specify\n+  *gnat2xml* switches is named ``gnat2xml``.\n+\n   .. _Switches_for_*gnat2xml*:\n \n   Switches for *gnat2xml*\n@@ -1823,15 +1833,12 @@ Alternatively, you may run the script using the following command line:\n   The *gnatcheck* tool is an ASIS-based utility that checks properties\n   of Ada source files according to a given set of semantic rules.\n \n-  In order to check compliance with a given rule, *gnatcheck* has to\n-  semantically analyze the Ada sources.\n-  Therefore, checks can only be performed on\n-  legal Ada units. Moreover, when a unit depends semantically upon units located\n-  outside the current directory, the source search path has to be provided when\n-  calling *gnatcheck*, either through a specified project file or\n-  through *gnatcheck* switches.\n+  *gnatcheck* is a project-aware tool\n+  (see :ref:`Using_Project_Files_with_GNAT_Tools` for a description of\n+  the project-related switches).  The project file package that can specify\n+  *gnatcheck* switches is named ``Check``.\n \n-  For full details, refer to :title:`GNATcheck Reference Manual`.\n+  For full details, plese refer to :title:`GNATcheck Reference Manual`.\n \n \n \n@@ -1851,6 +1858,11 @@ Alternatively, you may run the script using the following command line:\n   metrics data as output. Various switches control which\n   metrics are computed and output.\n \n+  *gnatmetric* is a project-aware tool\n+  (see :ref:`Using_Project_Files_with_GNAT_Tools` for a description of\n+  the project-related switches).  The project file package that can specify\n+  *gnatmetric* switches is named ``Metrics``.\n+\n   To compute program metrics, *gnatmetric* invokes the Ada\n   compiler and generates and uses the ASIS tree for the input source;\n   thus the input must be legal Ada code, and the tool should have all the\n@@ -2095,71 +2107,71 @@ Alternatively, you may run the script using the following command line:\n   .. index:: --no-lines (gnatmetric)\n \n \n-  :samp:`-lines-all`\n+  :samp:`--lines-all`\n     Report all the line metrics\n \n \n-  :samp:`-no-lines-all`\n+  :samp:`--no-lines-all`\n     Do not report any of line metrics\n \n \n-  :samp:`-lines`\n+  :samp:`--lines`\n     Report the number of all lines\n \n \n-  :samp:`-no-lines`\n+  :samp:`--no-lines`\n     Do not report the number of all lines\n \n \n-  :samp:`-lines-code`\n+  :samp:`--lines-code`\n     Report the number of code lines\n \n \n-  :samp:`-no-lines-code`\n+  :samp:`--no-lines-code`\n     Do not report the number of code lines\n \n \n-  :samp:`-lines-comment`\n+  :samp:`--lines-comment`\n     Report the number of comment lines\n \n \n-  :samp:`-no-lines-comment`\n+  :samp:`--no-lines-comment`\n     Do not report the number of comment lines\n \n \n-  :samp:`-lines-eol-comment`\n+  :samp:`--lines-eol-comment`\n     Report the number of code lines containing\n     end-of-line comments\n \n \n-  :samp:`-no-lines-eol-comment`\n+  :samp:`--no-lines-eol-comment`\n     Do not report the number of code lines containing\n     end-of-line comments\n \n \n-  :samp:`-lines-ratio`\n+  :samp:`--lines-ratio`\n     Report the comment percentage in the program text\n \n \n-  :samp:`-no-lines-ratio`\n+  :samp:`--no-lines-ratio`\n     Do not report the comment percentage in the program text\n \n \n-  :samp:`-lines-blank`\n+  :samp:`--lines-blank`\n     Report the number of blank lines\n \n \n-  :samp:`-no-lines-blank`\n+  :samp:`--no-lines-blank`\n     Do not report the number of blank lines\n \n \n-  :samp:`-lines-average`\n+  :samp:`--lines-average`\n     Report the average number of code lines in subprogram bodies, task bodies,\n     entry bodies and statement sequences in package bodies. The metric is computed\n     and reported for the whole set of processed Ada sources only.\n \n \n-  :samp:`-no-lines-average`\n+  :samp:`--no-lines-average`\n     Do not report the average number of code lines in subprogram bodies,\n     task bodies, entry bodies and statement sequences in package bodies.\n \n@@ -2204,6 +2216,15 @@ Alternatively, you may run the script using the following command line:\n       maximum nesting level in the GNAT built-in style checks\n       (see :ref:`Style_Checking`)\n \n+  * *Number of formal parameters*\n+      Number of formal parameters of a subprogram; if a subprogram does have\n+      parameters, then numbers of \"in\", \"out\" and \"in out\" parameters are also\n+      reported. This metric is reported for subprogram specifications and for\n+      subprogram instantiations. For subprogram bodies, expression functions\n+      and null procedures this metric is reported if the construct acts as a\n+      subprogram declaration but is not a completion of previous declaration.\n+      This metric is not reported for generic and formal subprograms.\n+\n   For the outermost unit in the file, *gnatmetric* additionally computes\n   the following metrics:\n \n@@ -2263,77 +2284,84 @@ Alternatively, you may run the script using the following command line:\n   .. index:: --no-syntax (gnatmetric)\n \n \n-  :samp:`-syntax-all`\n+  :samp:`--syntax-all`\n     Report all the syntax metrics\n \n \n-  :samp:`-no-syntax-all`\n+  :samp:`--no-syntax-all`\n     Do not report any of syntax metrics\n \n \n-  :samp:`-declarations`\n+  :samp:`--declarations`\n     Report the total number of declarations\n \n \n-  :samp:`-no-declarations`\n+  :samp:`--no-declarations`\n     Do not report the total number of declarations\n \n \n-  :samp:`-statements`\n+  :samp:`--statements`\n     Report the total number of statements\n \n \n-  :samp:`-no-statements`\n+  :samp:`--no-statements`\n     Do not report the total number of statements\n \n \n-  :samp:`-public-subprograms`\n+  :samp:`--public-subprograms`\n     Report the number of public subprograms in a compilation unit\n \n \n-  :samp:`-no-public-subprograms`\n+  :samp:`--no-public-subprograms`\n     Do not report the number of public subprograms in a compilation unit\n \n \n-  :samp:`-all-subprograms`\n+  :samp:`--all-subprograms`\n     Report the number of all the subprograms in a compilation unit\n \n \n-  :samp:`-no-all-subprograms`\n+  :samp:`--no-all-subprograms`\n     Do not report the number of all the subprograms in a compilation unit\n \n \n-  :samp:`-public-types`\n+  :samp:`--public-types`\n     Report the number of public types in a compilation unit\n \n \n-  :samp:`-no-public-types`\n+  :samp:`--no-public-types`\n     Do not report the number of public types in a compilation unit\n \n \n-  :samp:`-all-types`\n+  :samp:`--all-types`\n     Report the number of all the types in a compilation unit\n \n \n-  :samp:`-no-all-types`\n+  :samp:`--no-all-types`\n     Do not report the number of all the types in a compilation unit\n \n \n-  :samp:`-unit-nesting`\n+  :samp:`--unit-nesting`\n     Report the maximal program unit nesting level\n \n \n-  :samp:`-no-unit-nesting`\n+  :samp:`--no-unit-nesting`\n     Do not report the maximal program unit nesting level\n \n \n-  :samp:`-construct-nesting`\n+  :samp:`--construct-nesting`\n     Report the maximal construct nesting level\n \n \n-  :samp:`-no-construct-nesting`\n+  :samp:`--no-construct-nesting`\n     Do not report the maximal construct nesting level\n \n+  :samp:`--param-number`\n+    Report the number of subprogram parameters\n+\n+\n+  :samp:`--no-param-number`\n+    Do not report the number of subprogram parameters\n+\n \n   .. _Complexity_Metrics_Control:\n \n@@ -2420,46 +2448,46 @@ Alternatively, you may run the script using the following command line:\n   .. index:: --no-complexity (gnatmetric)\n \n \n-  :samp:`-complexity-all`\n+  :samp:`--complexity-all`\n     Report all the complexity metrics\n \n \n-  :samp:`-no-complexity-all`\n+  :samp:`--no-complexity-all`\n     Do not report any of complexity metrics\n \n \n-  :samp:`-complexity-cyclomatic`\n+  :samp:`--complexity-cyclomatic`\n     Report the McCabe Cyclomatic Complexity\n \n \n-  :samp:`-no-complexity-cyclomatic`\n+  :samp:`--no-complexity-cyclomatic`\n     Do not report the McCabe Cyclomatic Complexity\n \n \n-  :samp:`-complexity-essential`\n+  :samp:`--complexity-essential`\n     Report the Essential Complexity\n \n \n-  :samp:`-no-complexity-essential`\n+  :samp:`--no-complexity-essential`\n     Do not report the Essential Complexity\n \n \n-  :samp:`-loop-nesting`\n+  :samp:`--loop-nesting`\n     Report maximal loop nesting level\n \n \n   :samp:`-no-loop-nesting`\n     Do not report maximal loop nesting level\n \n \n-  :samp:`-complexity-average`\n+  :samp:`--complexity-average`\n     Report the average McCabe Cyclomatic Complexity for all the subprogram bodies,\n     task bodies, entry bodies and statement sequences in package bodies.\n     The metric is computed and reported for whole set of processed Ada sources\n     only.\n \n \n-  :samp:`-no-complexity-average`\n+  :samp:`--no-complexity-average`\n     Do not report the average McCabe Cyclomatic Complexity for all the subprogram\n     bodies, task bodies, entry bodies and statement sequences in package bodies\n \n@@ -2473,19 +2501,19 @@ Alternatively, you may run the script using the following command line:\n   .. index:: --no-static-loop (gnatmetric)\n \n \n-  :samp:`-no-static-loop`\n+  :samp:`--no-static-loop`\n     Do not consider static loops when computing cyclomatic complexity\n \n \n-  :samp:`-extra-exit-points`\n+  :samp:`--extra-exit-points`\n     Report the extra exit points for subprogram bodies. As an exit point, this\n     metric counts `return` statements and raise statements in case when the\n     raised exception is not handled in the same body. In case of a function this\n     metric subtracts 1 from the number of exit points, because a function body\n     must contain at least one `return` statement.\n \n \n-  :samp:`-no-extra-exit-points`\n+  :samp:`--no-extra-exit-points`\n     Do not report the extra exit points for subprogram bodies\n \n \n@@ -2678,39 +2706,39 @@ Alternatively, you may run the script using the following command line:\n   .. index:: --unit-coupling (gnatmetric)\n   .. index:: --control-coupling (gnatmetric)\n \n-  :samp:`-coupling-all`\n+  :samp:`--coupling-all`\n     Report all the coupling metrics\n \n \n-  :samp:`-tagged-coupling-out`\n+  :samp:`--tagged-coupling-out`\n     Report tagged (class) fan-out coupling\n \n \n-  :samp:`-tagged-coupling-in`\n+  :samp:`--tagged-coupling-in`\n     Report tagged (class) fan-in coupling\n \n \n-  :samp:`-hierarchy-coupling-out`\n+  :samp:`--hierarchy-coupling-out`\n     Report hierarchy (category) fan-out coupling\n \n \n-  :samp:`-hierarchy-coupling-in`\n+  :samp:`--hierarchy-coupling-in`\n     Report hierarchy (category) fan-in coupling\n \n \n-  :samp:`-unit-coupling-out`\n+  :samp:`--unit-coupling-out`\n     Report unit fan-out coupling\n \n \n-  :samp:`-unit-coupling-in`\n+  :samp:`--unit-coupling-in`\n     Report unit fan-in coupling\n \n \n-  :samp:`-control-coupling-out`\n+  :samp:`--control-coupling-out`\n     Report control fan-out coupling\n \n \n-  :samp:`-control-coupling-in`\n+  :samp:`--control-coupling-in`\n     Report control fan-in coupling\n \n \n@@ -2724,13 +2752,13 @@ Alternatively, you may run the script using the following command line:\n \n   .. index:: --version (gnatmetric)\n \n-  :samp:`-version`\n+  :samp:`--version`\n     Display Copyright and version, then exit disregarding all other options.\n \n \n   .. index:: --help (gnatmetric)\n \n-  :samp:`-help`\n+  :samp:`--help`\n     Display usage, then exit disregarding all other options.\n \n \n@@ -2768,14 +2796,14 @@ Alternatively, you may run the script using the following command line:\n \n   .. index:: --RTS (gnatmetric)\n \n-  :samp:`-RTS={rts-path}`\n+  :samp:`--RTS={rts-path}`\n     Specifies the default location of the runtime library. Same meaning as the\n     equivalent *gnatmake* flag (see :ref:`Switches_for_gnatmake`).\n \n \n   .. index:: --subdirs=dir (gnatmetric)\n \n-  :samp:`-subdirs={dir}`\n+  :samp:`--subdirs={dir}`\n     Use the specified subdirectory of the project objects file (or of the\n     project file directory if the project does not specify an object directory)\n     for tool output files. Has no effect if no project is specified as\n@@ -2784,7 +2812,7 @@ Alternatively, you may run the script using the following command line:\n \n   .. index:: --no_objects_dir (gnatmetric)\n \n-  :samp:`-no_objects_dir`\n+  :samp:`--no_objects_dir`\n     Place all the result files into the current directory instead of\n     project objects directory. This corresponds to the *gnatcheck*\n     behavior when it is called with the project file from the\n@@ -2852,6 +2880,11 @@ Alternatively, you may run the script using the following command line:\n    You can specify various style directives via switches; e.g.,\n    identifier case conventions, rules of indentation, and comment layout.\n \n+   *gnatpp* is a project-aware tool\n+   (see :ref:`Using_Project_Files_with_GNAT_Tools` for a description of\n+   the project-related switches).  The project file package that can specify\n+   *gnatpp* switches is named ``Pretty_Printer``.\n+\n    To produce a reformatted file, *gnatpp* invokes the Ada\n    compiler and generates and uses the ASIS tree for the input source;\n    thus the input must be legal Ada code, and the tool should have all the\n@@ -3143,6 +3176,13 @@ Alternatively, you may run the script using the following command line:\n    :samp:`--comments-only`\n      Format just the comments.\n \n+   .. index:: --no-end-id (gnatpp)\n+\n+\n+   :samp:`--no-end-id`\n+     Do not insert the name of a unit after `end`; leave whatever comes\n+     after `end`, if anything, alone.\n+\n    .. index:: --no-separate-is (gnatpp)\n \n \n@@ -3849,6 +3889,15 @@ Alternatively, you may run the script using the following command line:\n   for library unit declarations, and empty but compilable\n   subunit for body stubs.\n \n+  *gnatstub* is a project-aware tool.\n+  (See :ref:`Using_Project_Files_with_GNAT_Tools` for a description of\n+  the project-related switches but note that *gnatstub* does not support\n+  the :samp:`-U`, :samp:`-U {main_unit}`, :samp:`--subdirs={dir}`, or\n+  :samp:`--no_objects_dir` switches.)\n+  The project file package that can specify\n+  *gnatstub* switches is named ``gnatstub``.\n+\n+\n   To create a body or a subunit, *gnatstub* invokes the Ada\n   compiler and generates and uses the ASIS tree for the input source;\n   thus the input must be legal Ada code, and the tool should have all the\n@@ -4336,9 +4385,10 @@ Alternatively, you may run the script using the following command line:\n \n     .. index:: --separate-drivers (gnattest)\n \n-  :samp:`--separate-drivers`\n-    Generates a separate test driver for each test, rather than a single\n-    executable incorporating all tests.\n+  :samp:`--separate-drivers[={val}]`\n+    Generates a separate test driver for each test or unit under test, rather\n+    than a single executable incorporating all tests. `val` can be \"unit\" or\n+    \"test\", or may be omitted, which defaults to \"unit\".\n \n \n     .. index:: --stub (gnattest)\n@@ -4401,6 +4451,16 @@ Alternatively, you may run the script using the following command line:\n     placed accordingly.\n \n \n+    .. index:: --exclude-from-stubbing (gnattest)\n+\n+  :samp:`--exclude-from-stubbing={filename}`\n+    Disables stubbing of units listed in `filename`. The file should contain\n+    corresponding spec files, one per line.\n+\n+  :samp:`--exclude-from-stubbing:{unit}={filename}`\n+    Same as above, but corresponding units will not be stubbed only when testing\n+    specified `unit`.\n+\n     .. index:: --validate-type-extensions (gnattest)\n \n   :samp:`--validate-type-extensions`\n@@ -4531,6 +4591,15 @@ Alternatively, you may run the script using the following command line:\n        specified by ``--skeleton-default`` option. The value of this attribute\n        should be either ``pass`` or ``fail``.\n \n+  * ``Default_Stub_Exclusion_List``\n+       is used to specify the file with list of units whose bodies should not\n+       be stubbed, otherwise specified by ``--exclude-from-stubbing=filename``.\n+\n+  * ``Stub_Exclusion_List (\"unit\")``\n+       is used to specify the file with list of units whose bodies should not\n+       be stubbed when testing \"unit\", otherwise specified by\n+       ``--exclude-from-stubbing:unit=filename``.\n+\n   Each of those attributes can be overridden from the command line if needed.\n   Other *gnattest* switches can also be passed via the project\n   file as an attribute list called *Gnattest_Switches*.\n@@ -4877,12 +4946,12 @@ Alternatively, you may run the script using the following command line:\n \n   By default, *gnattest* generates a monolithic test driver that\n   aggregates the individual tests into a single executable. It is also possible\n-  to generate separate executables for each test, by passing the switch\n-  ``--separate-drivers``. This approach scales better for large testing\n-  campaigns, especially involving target architectures with limited resources\n-  typical for embedded development. It can also provide a major performance\n-  benefit on multi-core systems by allowing simultaneous execution of multiple\n-  tests.\n+  to generate separate executables for each test or each unit under test, by\n+  passing the switch ``--separate-drivers`` with corresponding parameter. This\n+  approach scales better for large testing campaigns, especially involving target\n+  architectures with limited resources typical for embedded development. It can\n+  also provide a major performance benefit on multi-core systems by allowing\n+  simultaneous execution of multiple tests.\n \n   *gnattest* can take charge of executing the individual tests; for this,\n   instead of passing a project file, a text file containing the list of\n@@ -4923,7 +4992,8 @@ Alternatively, you may run the script using the following command line:\n \n   Due to the nature of stubbing process, this mode implies the switch\n   ``--separate-drivers``, i.e. an individual test driver (with the\n-  corresponding hierarchy of extending projects) is generated for each test.\n+  corresponding hierarchy of extending projects) is generated for each unit under\n+  test.\n \n   .. note::\n \n@@ -4965,5 +5035,90 @@ Alternatively, you may run the script using the following command line:\n   * pragma *No_Secondary_Stack* is not supported;\n   * if pragmas for interfacing with foreign languages are used, manual\n     adjustments might be necessary to make the test harness compilable;\n-  * use of elaboration control pragmas may result in elaboration circularities\n-    in the generated harness.\n+  * use of some constructs, such as elaboration-control pragmas, Type_Invariant\n+    aspects, and complex variable initializations that use Subprogram'Access,\n+    may result in elaboration circularities in the generated harness.\n+\n+.. only:: PRO or GPL\n+\n+   .. _Using_Project_Files_with_GNAT_Tools:\n+\n+   Using Project Files with GNAT Tools\n+   ===================================\n+\n+   This section describes how project files can be used in conjunction\n+   with a number of GNAT tools.\n+   For a comprehensive description of project files and the overall\n+   GNAT Project Manager facility, please refer to the\n+   *GNAT Project Manager* chapter in the \n+   *GPRbuild and GPR Companion Tools User's Guide*.\n+\n+   .. index:: Project-aware tool\n+\n+   If a tool can take a project file as an option and extract the needed\n+   information, such a tool is called a *project-aware* tool.\n+\n+   .. _Switches_Related_to_Project_Files:\n+\n+   Switches Related to Project Files\n+   ---------------------------------\n+\n+   The following switches are used by the project-aware GNAT tools:\n+\n+   :samp:`-P{project_file}`\n+      Indicates the name of the project file whose source files are to\n+      be processed. The exact set of sources depends on other options\n+      specified, see below.\n+\n+   :samp:`-U`\n+      If a project file is supplied, say for project ``proj``,\n+      but no sources are specified for ``proj`` (either by a \n+      project attribute or through a tool option that provides a list\n+      of the files to be used), process all the source files\n+      from projects imported either directly or indirectly by ``proj``.\n+      Otherwise this option has no effect.\n+\n+   :samp:`-U {main_unit}`\n+      Similar to :samp:`-U`, but if no sources are specified then\n+      process only those source files for units in the closure of\n+      `main_unit`.\n+\n+   :samp:`-X{name}={val}`\n+      Indicates that the external variable ``name`` in the project has the\n+      value ``val``. Has no effect if no project has been specified.\n+\n+   :samp:`--subdirs={dir}`\n+      Use the `dir` subdirectory of the project's object directory (or the `dir`\n+      subdirectory of the project file directory if the project does not specify\n+      an object directory) for tool output files. Has no effect if no project\n+      has been specified or if :samp:`--no_objects_dir` is specified.\n+\n+   :samp:`--no_objects_dir`\n+      Place all the result files into the current directory (i.e., the directory\n+      from which the tool invocation command is issued) instead of the project's\n+      object directory. Has no effect if no project has been specified.\n+\n+   :samp:`-eL`\n+      Follow all symbolic links when processing project files.\n+\n+   If a project file is specified and there is neither a :samp:`-U` option,\n+   nor a :samp:`-U {main_unit}` option, nor some other explicit option to\n+   specify the source files, then the sources to be processed are the\n+   immediate sources of the specified project (i.e., the source files directly\n+   defined by that project, either implicitly by residing in the project\n+   source directories, or explicitly through any of the source-related\n+   attributes).\n+  \n+   .. _Tool-specific_packages_in_project files:\n+\n+   Tool-specific packages in project files\n+   ---------------------------------------\n+\n+   Each project-aware tool may have a corresponding package in a project file;\n+   the package names are given elsewhere in this manual, in the sections that describe\n+   the respective tools.\n+\n+   A tool-specific package in a project file may define the ``Default_Switches``\n+   attribute indexed by \"ada\" (as language name). The value of this attribute\n+   is a list of switches that will be supplied at tool invocation.\n+   Project-specific switches cannot be specified through this attribute. "}, {"sha": "d6f36c29058d8cb0ac59c046321f3899e0db771a", "filename": "gcc/ada/doc/gnat_ugn/platform_specific_information.rst", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -156,6 +156,31 @@ For example on x86-linux::\n    --           |\n    --           +--- adalib\n \n+.. only:: html or latex\n+\n+  .. image:: rtlibrary-structure.png\n+\n+.. only:: not (html or latex) \n+\n+   ::\n+\n+                      $(target-dir)\n+                     __/ /      \\ \\___\n+             _______/   /        \\    \\_________________\n+            /          /          \\                     \\\n+           /          /            \\                     \\\n+       ADAINCLUDE  ADALIB      rts-native             rts-sjlj\n+          :          :            /    \\                 /   \\\n+          :          :           /      \\               /     \\\n+          :          :          /        \\             /       \\\n+          :          :         /          \\           /         \\\n+          +-------------> adainclude     adalib   adainclude   adalib\n+                     :                     ^\n+                     :                     :\n+                     +---------------------+\n+\n+                     Run-Time Library Directory Structure\n+          (Upper-case names and dotted/dashed arrows represent soft links)\n \n If the *rts-sjlj* library is to be selected on a permanent basis,\n these soft links can be modified with the following commands:\n@@ -486,7 +511,58 @@ file will be created. This is particularly useful in networked\n environments where you may not have write access to some\n directories.\n \n+Disabling Command Line Argument Expansion\n+-----------------------------------------\n+\n+.. index:: Command Line Argument Expansion\n+\n+By default, an executable compiled for the **Windows** platform will do\n+the following postprocessing on the arguments passed on the command\n+line:\n+\n+* If the argument contains the characters ``*`` and/or ``?``, then\n+  file expansion will be attempted. For example, if the current directory\n+  contains :file:`a.txt` and :file:`b.txt`, then when calling::\n+\n+      $ my_ada_program *.txt\n+\n+  The following arguments will effectively be passed to the main program\n+  (for example when using ``Ada.Command_Line.Argument``)::\n+\n+      Ada.Command_Line.Argument (1) -> \"a.txt\"\n+      Ada.Command_Line.Argument (2) -> \"b.txt\"\n+\n+* Filename expansion can be disabled for a given argument by using single\n+  quotes. Thus, calling::\n \n+      $ my_ada_program '*.txt'\n+\n+  will result in::\n+\n+      Ada.Command_Line.Argument (1) -> \"*.txt\"\n+\n+Note that if the program is launched from a shell such as **Cygwin** **Bash**\n+then quote removal might be performed by the shell.\n+\n+In some contexts it might be useful to disable this feature (for example if\n+the program performs its own argument expansion). In order to do this, a C\n+symbol needs to be defined and set to ``0``. You can do this by\n+adding the following code fragment in one of your **Ada** units:\n+\n+.. code-block:: ada\n+\n+   Do_Argv_Expansion : Integer := 0;\n+   pragma Export (C, Do_Argv_Expansion, \"__gnat_do_argv_expansion\");\n+\n+The results of previous examples will be respectively::\n+\n+   Ada.Command_Line.Argument (1) -> \"*.txt\"\n+\n+and::\n+\n+   Ada.Command_Line.Argument (1) -> \"'*.txt'\"\n+\n+   \n .. _Mixed-Language_Programming_on_Windows:\n \n Mixed-Language Programming on Windows\n@@ -1033,7 +1109,8 @@ Building DLLs with GNAT Project files\n .. index:: DLLs, building\n \n There is nothing specific to Windows in the build process.\n-:ref:`Library_Projects`.\n+See the *Library Projects* section in the *GNAT Project Manager*\n+chapter of the *GPRbuild User's Guide*.\n \n Due to a system limitation, it is not possible under Windows to create threads\n when inside the `DllMain` routine which is used for auto-initialization\n@@ -1149,7 +1226,9 @@ Note that a relocatable DLL stripped using the `strip`\n binutils tool will not be relocatable anymore. To build a DLL without\n debug information pass `-largs -s` to `gnatdll`. This\n restriction does not apply to a DLL built using a Library Project.\n-See :ref:`Library_Projects`.\n+See the *Library Projects* section in the *GNAT Project Manager*\n+chapter of the *GPRbuild User's Guide*.\n+\n \n .. Limitations_When_Using_Ada_DLLs_from Ada:\n "}, {"sha": "32d3417e0ff21b396e85e48ed4d6f76abd77e1b9", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5f7b7d730a2065a784c089af386a593ee4b575/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=5f5f7b7d730a2065a784c089af386a593ee4b575", "patch": "@@ -872,7 +872,7 @@ File Name Krunching with `gnatkr`\n \n .. index:: ! gnatkr\n \n-This chapter discusses the method used by the compiler to shorten\n+This section discusses the method used by the compiler to shorten\n the default file names chosen for Ada units so that they do not\n exceed the maximum length permitted. It also describes the\n `gnatkr` utility that can be used to determine the result of\n@@ -1052,7 +1052,7 @@ Renaming Files with `gnatchop`\n \n .. index:: ! gnatchop\n \n-This chapter discusses how to handle files with multiple units by using\n+This section discusses how to handle files with multiple units by using\n the `gnatchop` utility. This utility is also useful in renaming\n files to meet the standard GNAT default file naming conventions.\n \n@@ -1550,8 +1550,10 @@ depend on a file that no longer exists. Such tools include\n *gprbuild*, *gnatmake*, and *gnatcheck*.\n \n If you are using project file, a separate mechanism is provided using\n-project attributes, see :ref:`Specifying_Configuration_Pragmas` for more\n-details.\n+project attributes.\n+\n+.. --Comment:\n+   See :ref:`Specifying_Configuration_Pragmas` for more details.\n \n \n .. _Generating_Object_Files:\n@@ -1788,10 +1790,10 @@ GNAT and Libraries\n \n .. index:: Library building and using\n \n-This chapter describes how to build and use libraries with GNAT, and also shows\n+This section describes how to build and use libraries with GNAT, and also shows\n how to recompile the GNAT run-time library. You should be familiar with the\n-Project Manager facility (:ref:`GNAT_Project_Manager`) before reading this\n-chapter.\n+Project Manager facility (see the *GNAT_Project_Manager* chapter of the\n+*GPRbuild User's Guide*) before reading this chapter.\n \n .. _Introduction_to_Libraries_in_GNAT:\n \n@@ -1849,7 +1851,8 @@ Building a library\n \n The easiest way to build a library is to use the Project Manager,\n which supports a special type of project called a *Library Project*\n-(see :ref:`Library_Projects`).\n+(see the *Library Projects* section in the *GNAT Project Manager*\n+chapter of the *GPRbuild User's Guide*).\n \n A project is considered a library project, when two project-level attributes\n are defined in it: `Library_Name` and `Library_Dir`. In order to\n@@ -1961,7 +1964,8 @@ Installing a library\n .. index:: GPR_PROJECT_PATH\n \n If you use project files, library installation is part of the library build\n-process (:ref:`Installing_a_library_with_project_files`).\n+process (see the *Installing a Library with Project Files* section of the\n+*GNAT Project Manager* chapter of the *GPRbuild User's Guide*).\n \n When project files are not an option, it is also possible, but not recommended,\n to install the library so that the sources needed to use the library are on the\n@@ -2137,11 +2141,13 @@ Building a Stand-alone Library\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n GNAT's Project facility provides a simple way of building and installing\n-stand-alone libraries; see :ref:`Stand-alone_Library_Projects`.\n+stand-alone libraries; see the *Stand-alone Library Projects* section\n+in the *GNAT Project Manager* chapter of the *GPRbuild User's Guide*.\n To be a Stand-alone Library Project, in addition to the two attributes\n that make a project a Library Project (`Library_Name` and\n-`Library_Dir`; see :ref:`Library_Projects`), the attribute\n-`Library_Interface` must be defined.  For example:\n+`Library_Dir`; see the *Library Projects* section in the\n+*GNAT Project Manager* chapter of the *GPRbuild User's Guide*),\n+the attribute `Library_Interface` must be defined.  For example:\n \n .. code-block:: gpr\n  "}, {"sha": "7360acb0b8a47570863d70669b800367143eb897", "filename": "gcc/ada/doc/gnat_ugn/tools_supporting_project_files.rst", "status": "removed", "additions": 0, "deletions": 745, "changes": 745, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12880f96fa42ce889c08d51876cf782afe11aa4/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Ftools_supporting_project_files.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12880f96fa42ce889c08d51876cf782afe11aa4/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Ftools_supporting_project_files.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Ftools_supporting_project_files.rst?ref=e12880f96fa42ce889c08d51876cf782afe11aa4", "patch": "@@ -1,745 +0,0 @@\n-.. _Tools_Supporting_Project_Files:\n-\n-Tools Supporting Project Files\n-==============================\n-\n-This section describes how project files can be used in conjunction with a number of\n-GNAT tools.\n-\n-.. _gnatmake_and_Project_Files:\n-\n-gnatmake and Project Files\n---------------------------\n-\n-This section covers several topics related to *gnatmake* and\n-project files: defining switches for *gnatmake*\n-and for the tools that it invokes; specifying configuration pragmas;\n-the use of the `Main` attribute; building and rebuilding library project\n-files.\n-\n-.. _Switches_Related_to_Project_Files:\n-\n-Switches Related to Project Files\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The following switches are used by GNAT tools that support project files:\n-\n-\n-  .. index:: -P (any project-aware tool)\n-\n-:samp:`-P{project}`\n-  Indicates the name of a project file. This project file will be parsed with\n-  the verbosity indicated by *-vP*x**,\n-  if any, and using the external references indicated\n-  by *-X* switches, if any.\n-  There may zero, one or more spaces between *-P* and `project`.\n-\n-  There must be only one *-P* switch on the command line.\n-\n-  Since the Project Manager parses the project file only after all the switches\n-  on the command line are checked, the order of the switches\n-  *-P*,\n-  *-vP*x**\n-  or *-X* is not significant.\n-\n-\n-  .. index:: -X (any project-aware tool)\n-\n-:samp:`-X{name}={value}`\n-  Indicates that external variable `name` has the value `value`.\n-  The Project Manager will use this value for occurrences of\n-  `external(name)` when parsing the project file.\n-\n-  If `name` or `value` includes a space, then `name=value` should be\n-  put between quotes.\n-\n-  ::\n-\n-      -XOS=NT\n-      -X\"user=John Doe\"\n-    \n-  Several *-X* switches can be used simultaneously.\n-  If several *-X* switches specify the same\n-  `name`, only the last one is used.\n-\n-  An external variable specified with a *-X* switch\n-  takes precedence over the value of the same name in the environment.\n-\n-\n-  .. index:: -vP (any project-aware tool)\n-\n-:samp:`-vP{x}`\n-  Indicates the verbosity of the parsing of GNAT project files.\n-\n-  *-vP0* means Default;\n-  *-vP1* means Medium;\n-  *-vP2* means High.\n-\n-  The default is Default: no output for syntactically correct\n-  project files.\n-  If several *-vP*x** switches are present,\n-  only the last one is used.\n-\n-\n-  .. index:: -aP (any project-aware tool)\n-\n-:samp:`-aP{dir}`\n-  Add directory `dir` at the beginning of the project search path, in order,\n-  after the current working directory.\n-\n-\n-  .. index:: -eL (any project-aware tool)\n-\n-:samp:`-eL`\n-  Follow all symbolic links when processing project files.\n-\n-\n-  .. index:: --subdirs= (gnatmake and gnatclean)\n-\n-:samp:`--subdirs={subdir}`\n-  This switch is recognized by *gnatmake* and *gnatclean*. It\n-  indicate that the real directories (except the source directories) are the\n-  subdirectories `subdir` of the directories specified in the project files.\n-  This applies in particular to object directories, library directories and\n-  exec directories. If the subdirectories do not exist, they are created\n-  automatically.\n-\n-\n-.. _Switches_and_Project_Files:\n-\n-Switches and Project Files\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-For each of the packages `Builder`, `Compiler`, `Binder`, and\n-`Linker`, you can specify a `Default_Switches`\n-attribute, a `Switches` attribute, or both;\n-as their names imply, these switch-related\n-attributes affect the switches that are used for each of these GNAT\n-components when\n-*gnatmake* is invoked.  As will be explained below, these\n-component-specific switches precede\n-the switches provided on the *gnatmake* command line.\n-\n-The `Default_Switches` attribute is an attribute\n-indexed by language name (case insensitive) whose value is a string list.\n-For example:\n-\n-  .. code-block:: gpr\n-\n-     package Compiler is\n-       for Default_Switches (\"Ada\")\n-           use (\"-gnaty\",\n-                \"-v\");\n-     end Compiler;\n-\n-The `Switches` attribute is indexed on a file name (which may or may\n-not be case sensitive, depending\n-on the operating system) whose value is a string list.  For example:\n-\n-  .. code-block:: gpr\n-\n-     package Builder is\n-        for Switches (\"main1.adb\")\n-            use (\"-O2\");\n-        for Switches (\"main2.adb\")\n-            use (\"-g\");\n-     end Builder;\n-\n-For the `Builder` package, the file names must designate source files\n-for main subprograms.  For the `Binder` and `Linker` packages, the\n-file names must designate :file:`ALI` or source files for main subprograms.\n-In each case just the file name without an explicit extension is acceptable.\n-\n-For each tool used in a program build (*gnatmake*, the compiler, the\n-binder, and the linker), the corresponding package @dfn{contributes} a set of\n-switches for each file on which the tool is invoked, based on the\n-switch-related attributes defined in the package.\n-In particular, the switches\n-that each of these packages contributes for a given file `f` comprise:\n-\n-* the value of attribute `Switches (`f`)`,\n-  if it is specified in the package for the given file,\n-* otherwise, the value of `Default_Switches (\"Ada\")`,\n-  if it is specified in the package.\n-\n-If neither of these attributes is defined in the package, then the package does\n-not contribute any switches for the given file.\n-\n-When *gnatmake* is invoked on a file, the switches comprise\n-two sets, in the following order: those contributed for the file\n-by the `Builder` package;\n-and the switches passed on the command line.\n-\n-When *gnatmake* invokes a tool (compiler, binder, linker) on a file,\n-the switches passed to the tool comprise three sets,\n-in the following order:\n-\n-* the applicable switches contributed for the file\n-  by the `Builder` package in the project file supplied on the command line;\n-\n-* those contributed for the file by the package (in the relevant project file --\n-  see below) corresponding to the tool; and\n-\n-* the applicable switches passed on the command line.\n-\n-The term *applicable switches* reflects the fact that\n-*gnatmake* switches may or may not be passed to individual\n-tools, depending on the individual switch.\n-\n-*gnatmake* may invoke the compiler on source files from different\n-projects. The Project Manager will use the appropriate project file to\n-determine the `Compiler` package for each source file being compiled.\n-Likewise for the `Binder` and `Linker` packages.\n-\n-As an example, consider the following package in a project file:\n-\n-\n-  .. code-block:: gpr\n-\n-     project Proj1 is\n-        package Compiler is\n-           for Default_Switches (\"Ada\")\n-               use (\"-g\");\n-           for Switches (\"a.adb\")\n-               use (\"-O1\");\n-           for Switches (\"b.adb\")\n-               use (\"-O2\",\n-                    \"-gnaty\");\n-        end Compiler;\n-     end Proj1;\n-  \n-If *gnatmake* is invoked with this project file, and it needs to\n-compile, say, the files :file:`a.adb`, :file:`b.adb`, and :file:`c.adb`, then\n-:file:`a.adb` will be compiled with the switch *-O1*,\n-:file:`b.adb` with switches *-O2* and *-gnaty*,\n-and :file:`c.adb` with *-g*.\n-\n-The following example illustrates the ordering of the switches\n-contributed by different packages:\n-\n-  .. code-block:: gpr\n-\n-     project Proj2 is\n-        package Builder is\n-           for Switches (\"main.adb\")\n-               use (\"-g\",\n-                    \"-O1\",\n-                    \"-f\");\n-        end Builder;\n-\n-        package Compiler is\n-           for Switches (\"main.adb\")\n-               use (\"-O2\");\n-        end Compiler;\n-     end Proj2;\n-\n-If you issue the command:\n-\n-  ::\n-\n-      $ gnatmake -Pproj2 -O0 main\n-  \n-then the compiler will be invoked on :file:`main.adb` with the following\n-sequence of switches\n-\n-  ::\n-\n-      -g -O1 -O2 -O0\n-  \n-with the last *-O*\n-switch having precedence over the earlier ones;\n-several other switches\n-(such as *-c*) are added implicitly.\n-\n-The switches *-g*\n-and *-O1* are contributed by package\n-`Builder`,  *-O2* is contributed\n-by the package `Compiler`\n-and *-O0* comes from the command line.\n-\n-The *-g* switch will also be passed in the invocation of\n-*Gnatlink.*\n-\n-A final example illustrates switch contributions from packages in different\n-project files:\n-\n-  .. code-block:: gpr\n-  \n-     project Proj3 is\n-        for Source_Files use (\"pack.ads\", \"pack.adb\");\n-        package Compiler is\n-           for Default_Switches (\"Ada\")\n-               use (\"-gnata\");\n-        end Compiler;\n-     end Proj3;\n-\n-     with \"Proj3\";\n-     project Proj4 is\n-        for Source_Files use (\"foo_main.adb\", \"bar_main.adb\");\n-        package Builder is\n-           for Switches (\"foo_main.adb\")\n-               use (\"-s\",\n-                    \"-g\");\n-        end Builder;\n-     end Proj4;\n-\n-  .. code-block:: ada\n-\n-     -- Ada source file:\n-     with Pack;\n-     procedure Foo_Main is\n-        ...\n-     end Foo_Main;\n-  \n-If the command is\n-\n-  ::\n-\n-     $ gnatmake -PProj4 foo_main.adb -cargs -gnato\n-  \n-then the switches passed to the compiler for :file:`foo_main.adb` are\n-*-g* (contributed by the package `Proj4.Builder`) and\n-*-gnato* (passed on the command line).\n-When the imported package `Pack` is compiled, the switches used\n-are *-g* from `Proj4.Builder`,\n-*-gnata* (contributed from package `Proj3.Compiler`,\n-and *-gnato* from the command line.\n-\n-When using *gnatmake* with project files, some switches or\n-arguments may be expressed as relative paths. As the working directory where\n-compilation occurs may change, these relative paths are converted to absolute\n-paths. For the switches found in a project file, the relative paths\n-are relative to the project file directory, for the switches on the command\n-line, they are relative to the directory where *gnatmake* is invoked.\n-The switches for which this occurs are:\n--I,\n--A,\n--L,\n--aO,\n--aL,\n--aI, as well as all arguments that are not switches (arguments to\n-switch\n--o, object files specified in package `Linker` or after\n--largs on the command line). The exception to this rule is the switch\n---RTS= for which a relative path argument is never converted.\n-\n-.. _Specifying_Configuration_Pragmas:\n-\n-Specifying Configuration Pragmas\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-When using *gnatmake* with project files, if there exists a file\n-:file:`gnat.adc` that contains configuration pragmas, this file will be\n-ignored.\n-\n-Configuration pragmas can be defined by means of the following attributes in\n-project files: `Global_Configuration_Pragmas` in package `Builder`\n-and `Local_Configuration_Pragmas` in package `Compiler`.\n-\n-Both these attributes are single string attributes. Their values is the path\n-name of a file containing configuration pragmas. If a path name is relative,\n-then it is relative to the project directory of the project file where the\n-attribute is defined.\n-\n-When compiling a source, the configuration pragmas used are, in order,\n-those listed in the file designated by attribute\n-`Global_Configuration_Pragmas` in package `Builder` of the main\n-project file, if it is specified, and those listed in the file designated by\n-attribute `Local_Configuration_Pragmas` in package `Compiler` of\n-the project file of the source, if it exists.\n-\n-.. _Project_Files_and_Main_Subprograms:\n-\n-Project Files and Main Subprograms\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-When using a project file, you can invoke *gnatmake*\n-with one or several main subprograms, by specifying their source files on the\n-command line.\n-\n-  ::\n-\n-      $ gnatmake -Pprj main1.adb main2.adb main3.adb\n-\n-Each of these needs to be a source file of the same project, except\n-when the switch `-u` is used.\n-\n-When `-u` is not used, all the mains need to be sources of the\n-same project, one of the project in the tree rooted at the project specified\n-on the command line. The package `Builder` of this common project, the\n-\"main project\" is the one that is considered by *gnatmake*.\n-\n-When `-u` is used, the specified source files may be in projects\n-imported directly or indirectly by the project specified on the command line.\n-Note that if such a source file is not part of the project specified on the\n-command line, the switches found in package `Builder` of the\n-project specified on the command line, if any, that are transmitted\n-to the compiler will still be used, not those found in the project file of\n-the source file.\n-\n-When using a project file, you can also invoke *gnatmake* without\n-explicitly specifying any main, and the effect depends on whether you have\n-defined the `Main` attribute.  This attribute has a string list value,\n-where each element in the list is the name of a source file (the file\n-extension is optional) that contains a unit that can be a main subprogram.\n-\n-If the `Main` attribute is defined in a project file as a non-empty\n-string list and the switch *-u* is not used on the command\n-line, then invoking *gnatmake* with this project file but without any\n-main on the command line is equivalent to invoking *gnatmake* with all\n-the file names in the `Main` attribute on the command line.\n-\n-Example:\n-\n-  .. code-block:: gpr\n-\n-     project Prj is\n-        for Main use (\"main1.adb\", \"main2.adb\", \"main3.adb\");\n-     end Prj;\n-\n-With this project file, `\"gnatmake -Pprj\"`\n-is equivalent to\n-`\"gnatmake -Pprj main1.adb main2.adb main3.adb\"`.\n-\n-When the project attribute `Main` is not specified, or is specified\n-as an empty string list, or when the switch *-u* is used on the command\n-line, then invoking *gnatmake* with no main on the command line will\n-result in all immediate sources of the project file being checked, and\n-potentially recompiled. Depending on the presence of the switch *-u*,\n-sources from other project files on which the immediate sources of the main\n-project file depend are also checked and potentially recompiled. In other\n-words, the *-u* switch is applied to all of the immediate sources of the\n-main project file.\n-\n-When no main is specified on the command line and attribute `Main` exists\n-and includes several mains, or when several mains are specified on the\n-command line, the default switches in package `Builder` will\n-be used for all mains, even if there are specific switches\n-specified for one or several mains.\n-\n-But the switches from package `Binder` or `Linker` will be\n-the specific switches for each main, if they are specified.\n-\n-.. _Library_Project_Files:\n-\n-Library Project Files\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-When *gnatmake* is invoked with a main project file that is a library\n-project file, it is not allowed to specify one or more mains on the command\n-line.\n-\n-When a library project file is specified, switches `-b` and\n-`-l` have special meanings.\n-\n-* `-b` is only allowed for stand-alone libraries. It indicates\n-  to *gnatmake* that *gnatbind* should be invoked for the\n-  library.\n-\n-* `-l` may be used for all library projects. It indicates\n-  to *gnatmake* that the binder generated file should be compiled\n-  (in the case of a stand-alone library) and that the library should be built.\n-\n-\n-.. _The_GNAT_Driver_and_Project_Files:\n-\n-The GNAT Driver and Project Files\n----------------------------------\n-\n-A number of GNAT tools beyond *gnatmake*\n-can benefit from project files:\n-\n-.. only:: PRO or GPL\n-\n-  * *gnatbind*\n-  * *gnatcheck*\n-  * *gnatclean*\n-  * *gnatelim*\n-  * *gnatfind*\n-  * *gnatlink*\n-  * *gnatls*\n-  * *gnatmetric*\n-  * *gnatpp*\n-  * *gnatstub*\n-  * *gnatxref*\n-\n-.. only:: FSF\n-\n-  * *gnatbind*\n-  * *gnatclean*\n-  * *gnatfind*\n-  * *gnatlink*\n-  * *gnatls*\n-  * *gnatxref*\n-\n-However, none of these tools can be invoked\n-directly with a project file switch (*-P*).\n-They must be invoked through the *gnat* driver.\n-\n-The *gnat* driver is a wrapper that accepts a number of commands and\n-calls the corresponding tool. It was designed initially for VMS platforms (to\n-convert VMS qualifiers to Unix-style switches), but it is now available on all\n-GNAT platforms.\n-\n-On non-VMS platforms, the *gnat* driver accepts the following commands\n-(case insensitive):\n-\n-.. only:: PRO or GPL\n-\n-  * BIND to invoke *gnatbind*\n-  * CHOP to invoke *gnatchop*\n-  * CLEAN to invoke *gnatclean*\n-  * COMP or COMPILE to invoke the compiler\n-  * ELIM to invoke *gnatelim*\n-  * FIND to invoke *gnatfind*\n-  * KR or KRUNCH to invoke *gnatkr*\n-  * LINK to invoke *gnatlink*\n-  * LS or LIST to invoke *gnatls*\n-  * MAKE to invoke *gnatmake*\n-  * METRIC to invoke *gnatmetric*\n-  * NAME to invoke *gnatname*\n-  * PP or PRETTY to invoke *gnatpp*\n-  * PREP or PREPROCESS to invoke *gnatprep*\n-  * STUB to invoke *gnatstub*\n-  * XREF to invoke *gnatxref*\n-\n-.. only:: FSF\n-\n-  * BIND to invoke *gnatbind*\n-  * CHOP to invoke *gnatchop*\n-  * CLEAN to invoke *gnatclean*\n-  * COMP or COMPILE to invoke the compiler\n-  * FIND to invoke *gnatfind*\n-  * KR or KRUNCH to invoke *gnatkr*\n-  * LINK to invoke *gnatlink*\n-  * LS or LIST to invoke *gnatls*\n-  * MAKE to invoke *gnatmake*\n-  * NAME to invoke *gnatname*\n-  * PREP or PREPROCESS to invoke *gnatprep*\n-  * XREF to invoke *gnatxref*\n-\n-Note that the command\n-*gnatmake -c -f -u* is used to invoke the compiler.\n-\n-On non-VMS platforms, between *gnat* and the command, two\n-special switches may be used:\n-\n-* *-v* to display the invocation of the tool.\n-* *-dn* to prevent the *gnat* driver from removing\n-  the temporary files it has created. These temporary files are\n-  configuration files and temporary file list files.\n-\n-The command may be followed by switches and arguments for the invoked\n-tool.\n-\n-  ::\n-\n-     $ gnat bind -C main.ali\n-     $ gnat ls -a main\n-     $ gnat chop foo.txt\n-  \n-Switches may also be put in text files, one switch per line, and the text\n-files may be specified with their path name preceded by '@'.\n-\n-  ::\n-\n-     $ gnat bind @args.txt main.ali\n-  \n-In addition, for the following commands the project file related switches\n-(*-P*, *-X* and *-vPx*) may be used in addition to\n-the switches of the invoking tool:\n-\n-.. only:: PRO or GPL\n-\n-   * BIND\n-   * COMP or COMPILE \n-   * FIND\n-   * ELIM\n-   * LS or LIST\n-   * LINK\n-   * METRIC\n-   * PP or PRETTY\n-   * STUB\n-   * XREF\n-\n-.. only:: FSF\n-\n-   * BIND\n-   * COMP or COMPILE \n-   * FIND\n-   * LS or LIST\n-   * LINK\n-   * XREF\n-\n-.. only:: PRO or GPL\n-\n-   When GNAT PP or GNAT PRETTY is used with a project file, but with no source\n-   specified on the command line, it invokes *gnatpp* with all\n-   the immediate sources of the specified project file.\n-\n-   When GNAT METRIC is used with a project file, but with no source\n-   specified on the command line, it invokes *gnatmetric*\n-   with all the immediate sources of the specified project file and with\n-   *-d* with the parameter pointing to the object directory\n-   of the project.\n-\n-   In addition, when GNAT PP, GNAT PRETTY or GNAT METRIC is used with\n-   a project file, no source is specified on the command line and\n-   switch -U is specified on the command line, then\n-   the underlying tool (gnatpp or\n-   gnatmetric) is invoked for all sources of all projects,\n-   not only for the immediate sources of the main project.\n-   (-U stands for Universal or Union of the project files of the project tree)\n-\n-For each of the following commands, there is optionally a corresponding\n-package in the main project.\n-\n-.. only:: PRO or GPL\n-\n-   * package `Binder` for command BIND (invoking `gnatbind`)\n-   * package `Check` for command CHECK (invoking `gnatcheck`)\n-   * package `Compiler` for command COMP or COMPILE (invoking the compiler)\n-   * package `Cross_Reference` for command XREF (invoking `gnatxref`)\n-   * package `Eliminate` for command ELIM (invoking `gnatelim`)\n-   * package `Finder` for command FIND (invoking `gnatfind`)\n-   * package `Gnatls` for command LS or LIST (invoking `gnatls`)\n-   * package `Gnatstub` for command STUB (invoking `gnatstub`)\n-   * package `Linker` for command LINK (invoking `gnatlink`)\n-   * package `Metrics` for command METRIC (invoking `gnatmetric`)\n-   * package `Pretty_Printer` for command PP or PRETTY (invoking `gnatpp`)\n-\n-.. only:: FSF\n-\n-   * package `Binder` for command BIND (invoking `gnatbind`)\n-   * package `Compiler` for command COMP or COMPILE (invoking the compiler)\n-   * package `Cross_Reference` for command XREF (invoking `gnatxref`)\n-   * package `Finder` for command FIND (invoking `gnatfind`)\n-   * package `Gnatls` for command LS or LIST (invoking `gnatls`)\n-   * package `Linker` for command LINK (invoking `gnatlink`)\n-\n-Package `Gnatls` has a unique attribute `Switches`,\n-a simple variable with a string list value. It contains switches\n-for the invocation of `gnatls`.\n-\n-  .. code-block:: gpr\n-\n-     project Proj1 is\n-        package gnatls is\n-           for Switches\n-               use (\"-a\",\n-                    \"-v\");\n-        end gnatls;\n-     end Proj1;\n-\n-All other packages have two attribute `Switches` and\n-`Default_Switches`.\n-\n-`Switches` is an indexed attribute, indexed by the\n-source file name, that has a string list value: the switches to be\n-used when the tool corresponding to the package is invoked for the specific\n-source file.\n-\n-`Default_Switches` is an attribute,\n-indexed by  the programming language that has a string list value.\n-`Default_Switches (\"Ada\")` contains the\n-switches for the invocation of the tool corresponding\n-to the package, except if a specific `Switches` attribute\n-is specified for the source file.\n-\n-  .. code-block:: gpr\n-\n-     project Proj is\n-\n-        for Source_Dirs use (\"\");\n-\n-        package gnatls is\n-           for Switches use\n-               (\"-a\",\n-                \"-v\");\n-        end gnatls;\n-\n-        package Compiler is\n-           for Default_Switches (\"Ada\")\n-               use (\"-gnatv\",\n-                    \"-gnatwa\");\n-        end Binder;\n-\n-        package Binder is\n-           for Default_Switches (\"Ada\")\n-               use (\"-C\",\n-                    \"-e\");\n-        end Binder;\n-\n-        package Linker is\n-           for Default_Switches (\"Ada\")\n-               use (\"-C\");\n-           for Switches (\"main.adb\")\n-               use (\"-C\",\n-                    \"-v\",\n-                    \"-v\");\n-        end Linker;\n-\n-        package Finder is\n-           for Default_Switches (\"Ada\")\n-                use (\"-a\",\n-                     \"-f\");\n-        end Finder;\n-\n-        package Cross_Reference is\n-           for Default_Switches (\"Ada\")\n-               use (\"-a\",\n-                    \"-f\",\n-                    \"-d\",\n-                    \"-u\");\n-        end Cross_Reference;\n-     end Proj;\n-  \n-With the above project file, commands such as\n-\n-  ::\n-\n-     $ gnat comp -Pproj main\n-     $ gnat ls -Pproj main\n-     $ gnat xref -Pproj main\n-     $ gnat bind -Pproj main.ali\n-     $ gnat link -Pproj main.ali\n-\n-will set up the environment properly and invoke the tool with the switches\n-found in the package corresponding to the tool:\n-`Default_Switches (\"Ada\")` for all tools,\n-except `Switches (\"main.adb\")`\n-for `gnatlink`.\n-\n-.. only:: PRO or GPL\n-\n-   It is also possible to invoke some of the tools,\n-   (`gnatcheck`,\n-   `gnatmetric`,\n-   and `gnatpp`)\n-   on a set of project units thanks to the combination of the switches\n-   *-P*, *-U* and possibly the main unit when one is interested\n-   in its closure. For instance,\n-\n-     ::\n-\n-        $ gnat metric -Pproj\n- \n-   will compute the metrics for all the immediate units of project `proj`.\n-\n-     ::\n-\n-        $ gnat metric -Pproj -U\n-  \n-   will compute the metrics for all the units of the closure of projects\n-   rooted at `proj`.\n-\n-     ::\n-\n-        $ gnat metric -Pproj -U main_unit\n-\n-   will compute the metrics for the closure of units rooted at\n-   `main_unit`. This last possibility relies implicitly\n-   on *gnatbind*'s option *-R*. But if the argument files for the\n-   tool invoked by the *gnat* driver are explicitly  specified\n-   either directly or through the tool *-files* option, then the tool\n-   is called only for these explicitly specified files."}]}