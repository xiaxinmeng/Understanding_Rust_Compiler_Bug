{"sha": "a752a43073dc49909c017fd52feacd7526ed31c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc1MmE0MzA3M2RjNDk5MDljMDE3ZmQ1MmZlYWNkNzUyNmVkMzFjMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-23T12:25:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-23T12:54:34Z"}, "message": "libstdc++ Simplify definition of net::socket_base constants\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/socket (socket_base::shutdown_type):\n\t(socket_base::wait_type, socket_base::message_flags):\n\tRemove enumerators. Initialize constants directly with desired\n\tvalues.\n\t(socket_base::message_flags): Make all operators constexpr and\n\tnoexcept.\n\t* testsuite/util/testsuite_common_types.h (test_bitmask_values):\n\tNew test utility.\n\t* testsuite/experimental/net/socket/socket_base.cc: New test.", "tree": {"sha": "3f655656a48f78f39c13063e62585e9a8299b2b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f655656a48f78f39c13063e62585e9a8299b2b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a752a43073dc49909c017fd52feacd7526ed31c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a752a43073dc49909c017fd52feacd7526ed31c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a752a43073dc49909c017fd52feacd7526ed31c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a752a43073dc49909c017fd52feacd7526ed31c0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87fc34a461cf362947a430d8a241f653fd83bc7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fc34a461cf362947a430d8a241f653fd83bc7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87fc34a461cf362947a430d8a241f653fd83bc7b"}], "stats": {"total": 203, "additions": 173, "deletions": 30}, "files": [{"sha": "ec4ed9d95e219a9155842aef73950e5ab8dce8bc", "filename": "libstdc++-v3/include/experimental/socket", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a752a43073dc49909c017fd52feacd7526ed31c0/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a752a43073dc49909c017fd52feacd7526ed31c0/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket?ref=a752a43073dc49909c017fd52feacd7526ed31c0", "patch": "@@ -250,37 +250,29 @@ inline namespace v1\n       static const int _S_name = SO_SNDLOWAT;\n     };\n \n-    enum shutdown_type : int\n-    {\n-      __shutdown_receive\t= SHUT_RD,\n-      __shutdown_send\t\t= SHUT_WR,\n-      __shutdown_both\t\t= SHUT_RDWR\n-    };\n-    static constexpr shutdown_type shutdown_receive\t= __shutdown_receive;\n-    static constexpr shutdown_type shutdown_send\t= __shutdown_send;\n-    static constexpr shutdown_type shutdown_both\t= __shutdown_both;\n+    enum shutdown_type : int { };\n+    static constexpr shutdown_type shutdown_receive = (shutdown_type)SHUT_RD;\n+    static constexpr shutdown_type shutdown_send    = (shutdown_type)SHUT_WR;\n+    static constexpr shutdown_type shutdown_both    = (shutdown_type)SHUT_RDWR;\n \n+    enum wait_type : int { };\n #ifdef _GLIBCXX_HAVE_POLL_H\n-    enum wait_type : int\n-    {\n-      __wait_read\t\t= POLLIN,\n-      __wait_write\t\t= POLLOUT,\n-      __wait_error\t\t= POLLERR\n-    };\n-    static constexpr wait_type wait_read\t\t= __wait_read;\n-    static constexpr wait_type wait_write\t\t= __wait_write;\n-    static constexpr wait_type wait_error\t\t= __wait_error;\n+    static constexpr wait_type wait_read  = (wait_type)POLLIN;\n+    static constexpr wait_type wait_write = (wait_type)POLLOUT;\n+    static constexpr wait_type wait_error = (wait_type)POLLERR;\n+#else\n+    static constexpr wait_type wait_read  = (wait_type)1;\n+    static constexpr wait_type wait_write = (wait_type)2;\n+    static constexpr wait_type wait_error = (wait_type)4;\n #endif\n \n-    enum message_flags : int\n-    {\n-      __message_peek\t\t= MSG_PEEK,\n-      __message_oob\t\t= MSG_OOB,\n-      __message_dontroute\t= MSG_DONTROUTE\n-    };\n-    static constexpr message_flags message_peek\t\t= __message_peek;\n-    static constexpr message_flags message_out_of_band\t= __message_oob;\n-    static constexpr message_flags message_do_not_route\t= __message_dontroute;\n+    enum message_flags : int { };\n+    static constexpr message_flags message_peek\n+      = (message_flags)MSG_PEEK;\n+    static constexpr message_flags message_out_of_band\n+      = (message_flags)MSG_OOB;\n+    static constexpr message_flags message_do_not_route\n+      = (message_flags)MSG_DONTROUTE;\n \n     static const int max_listen_connections = SOMAXCONN;\n #endif\n@@ -350,30 +342,37 @@ inline namespace v1\n \n   constexpr socket_base::message_flags\n   operator&(socket_base::message_flags __f1, socket_base::message_flags __f2)\n+    noexcept\n   { return socket_base::message_flags( int(__f1) & int(__f2) ); }\n \n   constexpr socket_base::message_flags\n   operator|(socket_base::message_flags __f1, socket_base::message_flags __f2)\n+    noexcept\n   { return socket_base::message_flags( int(__f1) | int(__f2) ); }\n \n   constexpr socket_base::message_flags\n   operator^(socket_base::message_flags __f1, socket_base::message_flags __f2)\n+    noexcept\n   { return socket_base::message_flags( int(__f1) ^ int(__f2) ); }\n \n   constexpr socket_base::message_flags\n   operator~(socket_base::message_flags __f)\n+    noexcept\n   { return socket_base::message_flags( ~int(__f) ); }\n \n-  inline socket_base::message_flags&\n+  constexpr socket_base::message_flags&\n   operator&=(socket_base::message_flags& __f1, socket_base::message_flags __f2)\n+    noexcept\n   { return __f1 = (__f1 & __f2); }\n \n-  inline socket_base::message_flags&\n+  constexpr socket_base::message_flags&\n   operator|=(socket_base::message_flags& __f1, socket_base::message_flags __f2)\n+    noexcept\n   { return __f1 = (__f1 | __f2); }\n \n-  inline socket_base::message_flags&\n+  constexpr socket_base::message_flags&\n   operator^=(socket_base::message_flags& __f1, socket_base::message_flags __f2)\n+    noexcept\n   { return __f1 = (__f1 ^ __f2); }\n \n #if _GLIBCXX_HAVE_UNISTD_H"}, {"sha": "b0b02b4e560af1fa9d8f973b1bcd0b4a4bb22c49", "filename": "libstdc++-v3/testsuite/experimental/net/socket/socket_base.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a752a43073dc49909c017fd52feacd7526ed31c0/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fsocket_base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a752a43073dc49909c017fd52feacd7526ed31c0/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fsocket_base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fsocket_base.cc?ref=a752a43073dc49909c017fd52feacd7526ed31c0", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2020-2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/socket>\n+#include <testsuite_common_types.h>\n+\n+using S = std::experimental::net::socket_base;\n+using namespace std;\n+\n+void test_constants()\n+{\n+  static_assert( is_enum<S::shutdown_type>::value, \"\" );\n+  static_assert( S::shutdown_receive != S::shutdown_send, \"\" );\n+  static_assert( S::shutdown_receive != S::shutdown_both, \"\" );\n+  static_assert( S::shutdown_send != S::shutdown_both, \"\" );\n+\n+  static_assert( is_enum<S::wait_type>::value, \"\" );\n+  static_assert( S::wait_read != S::wait_write, \"\");\n+  static_assert( S::wait_read != S::wait_error, \"\");\n+  static_assert( S::wait_write != S::wait_error, \"\");\n+\n+  static_assert( __gnu_test::test_bitmask_values(\n+\t{S::message_peek, S::message_out_of_band, S::message_do_not_route}\n+\t), \"each bitmask element is distinct\" );\n+\n+  auto m = &S::max_listen_connections;\n+  static_assert( is_same<decltype(m), const int*>::value, \"\" );\n+}\n+"}, {"sha": "a9a44df9664cb1980112ddf1f7d4f89af0f723a2", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a752a43073dc49909c017fd52feacd7526ed31c0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a752a43073dc49909c017fd52feacd7526ed31c0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=a752a43073dc49909c017fd52feacd7526ed31c0", "patch": "@@ -952,5 +952,104 @@ namespace __gnu_test\n       }\n   };\n #endif\n+\n+#if __cplusplus >= 201402L\n+  // Check that bitmask type T supports all the required operators,\n+  // with the required semantics. Check that each bitmask element\n+  // has a distinct, nonzero value, and that each bitmask constant\n+  // has no bits set which do not correspond to a bitmask element.\n+  template<typename T>\n+    constexpr bool\n+    test_bitmask_values(std::initializer_list<T> elements,\n+\t\t\tstd::initializer_list<T> constants = {})\n+    {\n+      const T t0{};\n+\n+      if (!(t0 == t0))\n+\treturn false;\n+      if (t0 != t0)\n+\treturn false;\n+\n+      if (t0 & t0)\n+\treturn false;\n+      if (t0 | t0)\n+\treturn false;\n+      if (t0 ^ t0)\n+\treturn false;\n+\n+      T all = t0;\n+\n+      for (auto t : elements)\n+\t{\n+\t  // Each bitmask element has a distinct value.\n+\t  if (t & all)\n+\t    return false;\n+\n+\t  // Each bitmask element has a nonzero value.\n+\t  if (!bool(t))\n+\t    return false;\n+\n+\t  // Check operators\n+\n+\t  if (!(t == t))\n+\t    return false;\n+\t  if (t != t)\n+\t    return false;\n+\t  if (t == t0)\n+\t    return false;\n+\t  if (t == all)\n+\t    return false;\n+\n+\t  if (t & t0)\n+\t    return false;\n+\t  if ((t | t0) != t)\n+\t    return false;\n+\t  if ((t ^ t0) != t)\n+\t    return false;\n+\n+\t  if ((t & t) != t)\n+\t    return false;\n+\t  if ((t | t) != t)\n+\t    return false;\n+\t  if (t ^ t)\n+\t    return false;\n+\n+\t  T t1 = t;\n+\t  if ((t1 &= t) != t)\n+\t    return false;\n+\t  if ((t1 |= t) != t)\n+\t    return false;\n+\t  if (t1 ^= t)\n+\t    return false;\n+\n+\t  t1 = all;\n+\t  if ((t1 &= t) != (all & t))\n+\t    return false;\n+\t  t1 = all;\n+\t  if ((t1 |= t) != (all | t))\n+\t    return false;\n+\t  t1 = all;\n+\t  if ((t1 ^= t) != (all ^ t))\n+\t    return false;\n+\n+\t  all |= t;\n+\t  if (!(all & t))\n+\t    return false;\n+\t}\n+\n+      for (auto t : constants)\n+\t{\n+\t  // Check that bitmask constants are composed of the bitmask elements.\n+\t  if ((t & all) != t)\n+\t    return false;\n+\t  if ((t | all) != all)\n+\t    return false;\n+\t}\n+\n+      return true;\n+    }\n+#endif // C++14\n+\n+\n } // namespace __gnu_test\n #endif"}]}