{"sha": "14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRhMmM5YWFjMDRmMDEzMjQ1ZTMzMmI5ZTdlY2I4YzNhOWY0MmEwYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-10-13T19:26:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-10-13T19:26:54Z"}, "message": "Implement P0386R2 - C++17 inline variables\n\n2016-10-11  Jakub Jelinek  <jakub@redhat.com>\n\n\t* dwarf2out.c (gen_member_die): Handle inline static data member\n\tdefinitions.\nc-family/\n\t* c-cppbuiltin.c (c_cpp_builtins): Add __cpp_inline_variables.\ncp/\n\t* cp-tree.h (struct lang_type): Shrink language field to 1 bit\n\tfrom 4.  Add var_declared_inline_p field.  Mention 2 spare bits.\n\t(DECL_VAR_DECLARED_INLINE_P): Define.\n\t(SET_DECL_VAR_DECLARED_INLINE_P): Define.\n\t(DECL_INLINE_VAR_P): Define.\n\t(diagnose_inline_vars_for_namespace): Declare.\n\t* decl.c (diagnose_inline_vars_for_namespace): New function.\n\t(duplicate_decls): For static data members copy\n\tDECL_DECLARED_CONSTEXPR_P.\n\t(redeclaration_error_message): Handle C++17 redundant redeclaration\n\tof constexpr static data member outside of class.\n\t(maybe_commonize_var): Handle inline variables.\n\t(check_initializer): Ignore inline variables for diagnostics.\n\tAdjust diagnostic wording for C++17.\n\t(make_rtl_for_nonlocal_decl): Allow in-class definition of\n\tinline static data members.\n\t(bad_specifiers): Don't diagnose inline on variables here.\n\t(grokvardecl): Add inlinep argument, non-static const inline variables\n\tare TREE_PUBLIC.\n\t(check_static_variable_definition): Return early also for inline\n\tvariables.\n\t(grokdeclarator): Handle inline variables and inline static data\n\tmembers.\n\t* typeck2.c (store_init_value): Don't diagnose non-constant\n\tinitializers for non-constexpr inline static data members.\n\t* decl2.c (vague_linkage_p): Return true for inline variables.\n\t(c_parse_final_cleanups): In-class declaration of inline static\n\tdata members is a definition.  Call diagnose_inline_vars_for_namespace\n\tthrough walk_namespaces.\n\t* pt.c (instantiate_decl): Set pattern_defined for in-class definitions\n\tof inline static data members.\n\nFrom-SVN: r241137", "tree": {"sha": "96a256d961ae6d285efeaf0bfc8c5baa96931f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96a256d961ae6d285efeaf0bfc8c5baa96931f31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/comments", "author": null, "committer": null, "parents": [{"sha": "fc0911e0b86076b3241f19df921acf46f0890a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc0911e0b86076b3241f19df921acf46f0890a59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc0911e0b86076b3241f19df921acf46f0890a59"}], "stats": {"total": 743, "additions": 712, "deletions": 31}, "files": [{"sha": "ae5a7109a81dc2339406d7058014f8d76444276c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -1,3 +1,8 @@\n+2016-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (gen_member_die): Handle inline static data member\n+\tdefinitions.\n+\n 2016-10-13  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcov-io.c (gcov_open): Fix documentation.  Simplify setting"}, {"sha": "e4ba2de334d571d43e3e59b52971aaef7edc631f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -1,3 +1,7 @@\n+2016-10-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Add __cpp_inline_variables.\n+\n 2016-10-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* c-cppbuiltin.c: Include memmodel.h."}, {"sha": "06b5aa3ac6518028d4eccfcac84f898fae9e370e", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -935,6 +935,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_constexpr=201603\");\n \t  cpp_define (pfile, \"__cpp_if_constexpr=201606\");\n \t  cpp_define (pfile, \"__cpp_capture_star_this=201603\");\n+\t  cpp_define (pfile, \"__cpp_inline_variables=201606\");\n \t}\n       if (flag_concepts)\n \t/* Use a value smaller than the 201507 specified in"}, {"sha": "5753ab10a9a039d0546a76726d3e9d1efd1b0e4f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -1,3 +1,44 @@\n+2016-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tImplement P0386R2 - C++17 inline variables\n+\t* cp-tree.h (struct lang_type): Shrink language field to 1 bit\n+\tfrom 4.  Add var_declared_inline_p field.  Mention 2 spare bits.\n+\t(DECL_VAR_DECLARED_INLINE_P): Define.\n+\t(SET_DECL_VAR_DECLARED_INLINE_P): Define.\n+\t(DECL_INLINE_VAR_P): Define.\n+\t(diagnose_inline_vars_for_namespace): Declare.\n+\t* decl.c (diagnose_inline_vars_for_namespace): New function.\n+\t(duplicate_decls): For static data members copy\n+\tDECL_DECLARED_CONSTEXPR_P.\n+\t(redeclaration_error_message): Handle C++17 redundant redeclaration\n+\tof constexpr static data member outside of class.\n+\t(maybe_commonize_var): Handle inline variables.\n+\t(check_initializer): Ignore inline variables for diagnostics.\n+\tAdjust diagnostic wording for C++17.\n+\t(make_rtl_for_nonlocal_decl): Allow in-class definition of\n+\tinline static data members.\n+\t(bad_specifiers): Don't diagnose inline on variables here.\n+\t(grokvardecl): Add inlinep argument, non-static const inline variables\n+\tare TREE_PUBLIC.\n+\t(check_static_variable_definition): Return early also for inline\n+\tvariables.\n+\t(mark_inline_variable): New.\n+\t(grokdeclarator): Handle inline variables and inline static data\n+\tmembers.\n+\t* typeck2.c (store_init_value): Don't diagnose non-constant\n+\tinitializers for non-constexpr inline static data members.\n+\t* decl2.c (vague_linkage_p): Return true for inline variables.\n+\t(c_parse_final_cleanups): In-class declaration of inline static\n+\tdata members is a definition.  Call diagnose_inline_vars_for_namespace\n+\tthrough walk_namespaces.\n+\t* pt.c (instantiate_decl): Set pattern_defined for in-class definitions\n+\tof inline static data members.\n+\n+2016-10-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (mark_inline_variable): New.\n+\n 2016-10-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* decl2.c: Include memmodel.h."}, {"sha": "f4a8985b351121f3f6a54b44888308ee98244533", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -2214,7 +2214,7 @@ struct GTY(()) lang_type {\n \n struct GTY(()) lang_decl_base {\n   unsigned selector : 16;   /* Larger than necessary for faster access.  */\n-  ENUM_BITFIELD(languages) language : 4;\n+  ENUM_BITFIELD(languages) language : 1;\n   unsigned use_template : 2;\n   unsigned not_really_extern : 1;\t   /* var or fn */\n   unsigned initialized_in_class : 1;\t   /* var or fn */\n@@ -2227,7 +2227,8 @@ struct GTY(()) lang_decl_base {\n   unsigned odr_used : 1;\t\t   /* var or fn */\n   unsigned u2sel : 1;\n   unsigned concept_p : 1;                  /* applies to vars and functions */\n-  /* 0 spare bits */\n+  unsigned var_declared_inline_p : 1;\t   /* var */\n+  /* 2 spare bits */\n };\n \n /* True for DECL codes which have template info and access.  */\n@@ -3607,6 +3608,23 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define CP_DECL_THREADPRIVATE_P(DECL) \\\n   (DECL_LANG_SPECIFIC (VAR_DECL_CHECK (DECL))->u.base.threadprivate_or_deleted_p)\n \n+/* Nonzero if NODE is a VAR_DECL which has been declared inline.  */\n+#define DECL_VAR_DECLARED_INLINE_P(NODE) \\\n+  (DECL_LANG_SPECIFIC (VAR_DECL_CHECK (NODE))\t\t\t\\\n+   ? DECL_LANG_SPECIFIC (NODE)->u.base.var_declared_inline_p\t\\\n+   : false)\n+#define SET_DECL_VAR_DECLARED_INLINE_P(NODE) \\\n+  (DECL_LANG_SPECIFIC (VAR_DECL_CHECK (NODE))->u.base.var_declared_inline_p \\\n+   = true)\n+\n+/* Nonzero if NODE is an inline VAR_DECL.  In C++17, static data members\n+   declared with constexpr specifier are implicitly inline variables.  */\n+#define DECL_INLINE_VAR_P(NODE) \\\n+  (DECL_VAR_DECLARED_INLINE_P (NODE)\t\t\t\t\\\n+   || (cxx_dialect >= cxx1z\t\t\t\t\t\\\n+       && DECL_DECLARED_CONSTEXPR_P (NODE)\t\t\t\\\n+       && DECL_CLASS_SCOPE_P (NODE)))\n+\n /* Nonzero if DECL was declared with '= delete'.  */\n #define DECL_DELETED_FN(DECL) \\\n   (LANG_DECL_FN_CHECK (DECL)->min.base.threadprivate_or_deleted_p)\n@@ -5799,6 +5817,7 @@ typedef int (*walk_namespaces_fn)\t\t(tree, void *);\n extern int walk_namespaces\t\t\t(walk_namespaces_fn,\n \t\t\t\t\t\t void *);\n extern int wrapup_globals_for_namespace\t\t(tree, void *);\n+extern int diagnose_inline_vars_for_namespace\t(tree, void *);\n extern tree create_implicit_typedef\t\t(tree, tree);\n extern int local_variable_p\t\t\t(const_tree);\n extern tree register_dtor_fn\t\t\t(tree);"}, {"sha": "f761d0dfa92594414b06448f8c479347a0b9ddc3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 119, "deletions": 23, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -68,7 +68,7 @@ static int unary_op_p (enum tree_code);\n static void push_local_name (tree);\n static tree grok_reference_init (tree, tree, tree, int);\n static tree grokvardecl (tree, tree, tree, const cp_decl_specifier_seq *,\n-\t\t\t int, int, int, tree);\n+\t\t\t int, int, int, int, tree);\n static int check_static_variable_definition (tree, tree);\n static void record_unknown_type (tree, const char *);\n static tree builtin_function_1 (tree, tree, bool);\n@@ -937,6 +937,27 @@ wrapup_globals_for_namespace (tree name_space, void* data ATTRIBUTE_UNUSED)\n   /* Write out any globals that need to be output.  */\n   return wrapup_global_declarations (vec, len);\n }\n+\n+/* Diagnose odr-used extern inline variables without definitions\n+   in the current TU.  */\n+int\n+diagnose_inline_vars_for_namespace (tree name_space, void *)\n+{\n+  cp_binding_level *level = NAMESPACE_LEVEL (name_space);\n+  vec<tree, va_gc> *statics = level->static_decls;\n+  tree decl;\n+  unsigned int i;\n+\n+  FOR_EACH_VEC_SAFE_ELT (statics, i, decl)\n+    if (VAR_P (decl)\n+\t&& DECL_EXTERNAL (decl)\n+\t&& DECL_INLINE_VAR_P (decl)\n+\t&& DECL_ODR_USED (decl))\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"odr-used inline variable %qD is not defined\", decl);\n+\n+  return 0;\n+}\n \f\n /* In C++, you don't have to write `struct S' to refer to `S'; you\n    can just use `S'.  We accomplish this by creating a TYPE_DECL as\n@@ -2098,6 +2119,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    |= DECL_NONTRIVIALLY_INITIALIZED_P (olddecl);\n \t  DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (newdecl)\n \t    |= DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (olddecl);\n+          if (DECL_CLASS_SCOPE_P (olddecl))\n+            DECL_DECLARED_CONSTEXPR_P (newdecl)\n+\t      |= DECL_DECLARED_CONSTEXPR_P (olddecl);\n \n \t  /* Merge the threadprivate attribute from OLDDECL into NEWDECL.  */\n \t  if (DECL_LANG_SPECIFIC (olddecl)\n@@ -2882,6 +2906,27 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \t is valid.  */\n       if (DECL_EXTERNAL (newdecl) || DECL_EXTERNAL (olddecl))\n \treturn NULL;\n+\n+      /* Static data member declared outside a class definition\n+\t if the variable is defined within the class with constexpr\n+\t specifier is declaration rather than definition (and\n+\t deprecated).  */\n+      if (cxx_dialect >= cxx1z\n+\t  && DECL_CLASS_SCOPE_P (olddecl)\n+\t  && DECL_DECLARED_CONSTEXPR_P (olddecl)\n+\t  && !DECL_INITIAL (newdecl))\n+\t{\n+\t  DECL_EXTERNAL (newdecl) = 1;\n+\t  /* For now, only warn with explicit -Wdeprecated.  */\n+\t  if (global_options_set.x_warn_deprecated\n+\t      && warning_at (DECL_SOURCE_LOCATION (newdecl), OPT_Wdeprecated,\n+\t\t\t     \"redundant redeclaration of %<constexpr%> static \"\n+\t\t\t     \"data member %qD\", newdecl))\n+\t    inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t    \"previous declaration of %qD\", olddecl);\n+\t  return NULL;\n+\t}\n+\n       /* Reject two definitions.  */\n       return G_(\"redefinition of %q#D\");\n     }\n@@ -5405,11 +5450,12 @@ maybe_commonize_var (tree decl)\n {\n   /* Static data in a function with comdat linkage also has comdat\n      linkage.  */\n-  if (TREE_STATIC (decl)\n-      /* Don't mess with __FUNCTION__.  */\n-      && ! DECL_ARTIFICIAL (decl)\n-      && DECL_FUNCTION_SCOPE_P (decl)\n-      && vague_linkage_p (DECL_CONTEXT (decl)))\n+  if ((TREE_STATIC (decl)\n+       /* Don't mess with __FUNCTION__.  */\n+       && ! DECL_ARTIFICIAL (decl)\n+       && DECL_FUNCTION_SCOPE_P (decl)\n+       && vague_linkage_p (DECL_CONTEXT (decl)))\n+      || (TREE_PUBLIC (decl) && DECL_INLINE_VAR_P (decl)))\n     {\n       if (flag_weak)\n \t{\n@@ -5435,10 +5481,17 @@ maybe_commonize_var (tree decl)\n \t\t be merged.  */\n \t      TREE_PUBLIC (decl) = 0;\n \t      DECL_COMMON (decl) = 0;\n+\t      const char *msg;\n+\t      if (DECL_INLINE_VAR_P (decl))\n+\t\tmsg = G_(\"sorry: semantics of inline variable \"\n+\t\t\t \"%q#D are wrong (you%'ll wind up with \"\n+\t\t\t \"multiple copies)\");\n+\t      else\n+\t\tmsg = G_(\"sorry: semantics of inline function \"\n+\t\t\t \"static data %q#D are wrong (you%'ll wind \"\n+\t\t\t \"up with multiple copies)\");\n \t      if (warning_at (DECL_SOURCE_LOCATION (decl), 0,\n-\t\t\t      \"sorry: semantics of inline function static \"\n-\t\t\t      \"data %q#D are wrong (you%'ll wind up \"\n-\t\t\t      \"with multiple copies)\", decl))\n+\t\t\t      msg, decl))\n \t\tinform (DECL_SOURCE_LOCATION (decl),\n \t\t\t\"you can work around this by removing the initializer\");\n \t    }\n@@ -6282,15 +6335,19 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n       TREE_CONSTANT (decl) = false;\n     }\n \n-  if (init_code && DECL_IN_AGGR_P (decl))\n+  if (init_code\n+      && (DECL_IN_AGGR_P (decl) && !DECL_VAR_DECLARED_INLINE_P (decl)))\n     {\n       static int explained = 0;\n \n       if (cxx_dialect < cxx11)\n \terror (\"initializer invalid for static member with constructor\");\n-      else\n+      else if (cxx_dialect < cxx1z)\n \terror (\"non-constant in-class initialization invalid for static \"\n \t       \"member %qD\", decl);\n+      else\n+\terror (\"non-constant in-class initialization invalid for non-inline \"\n+\t       \"static member %qD\", decl);\n       if (!explained)\n \t{\n \t  inform (input_location,\n@@ -6346,7 +6403,9 @@ make_rtl_for_nonlocal_decl (tree decl, tree init, const char* asmspec)\n       /* An in-class declaration of a static data member should be\n \t external; it is only a declaration, and not a definition.  */\n       if (init == NULL_TREE)\n-\tgcc_assert (DECL_EXTERNAL (decl) || !TREE_PUBLIC (decl));\n+\tgcc_assert (DECL_EXTERNAL (decl)\n+\t\t    || !TREE_PUBLIC (decl)\n+\t\t    || DECL_INLINE_VAR_P (decl));\n     }\n \n   /* We don't create any RTL for local variables.  */\n@@ -7745,8 +7804,6 @@ bad_specifiers (tree object,\n       case BSP_VAR:\n \tif (virtualp)\n \t  error (\"%qD declared as a %<virtual%> variable\", object);\n-\tif (inlinep)\n-\t  error (\"%qD declared as an %<inline%> variable\", object);\n \tif (quals)\n \t  error (\"%<const%> and %<volatile%> function specifiers on \"\n \t         \"%qD invalid in variable declaration\", object);\n@@ -8456,6 +8513,7 @@ grokvardecl (tree type,\n \t     const cp_decl_specifier_seq *declspecs,\n \t     int initialized,\n \t     int flags,\n+\t     int inlinep,\n \t     int template_count,\n \t     tree scope)\n {\n@@ -8520,7 +8578,9 @@ grokvardecl (tree type,\n   else if (toplevel_bindings_p ())\n     {\n       TREE_PUBLIC (decl) = (declspecs->storage_class != sc_static\n-\t\t\t    && (DECL_THIS_EXTERN (decl) || ! constp));\n+\t\t\t    && (DECL_THIS_EXTERN (decl)\n+\t\t\t\t|| ! constp\n+\t\t\t\t|| inlinep));\n       TREE_STATIC (decl) = ! DECL_EXTERNAL (decl);\n     }\n   /* Not at top level, only `static' makes a static definition.  */\n@@ -8692,8 +8752,10 @@ check_static_variable_definition (tree decl, tree type)\n   if (dependent_type_p (type))\n     return 0;\n   /* If DECL is declared constexpr, we'll do the appropriate checks\n-     in check_initializer.  */\n-  if (DECL_P (decl) && DECL_DECLARED_CONSTEXPR_P (decl))\n+     in check_initializer.  Similarly for inline static data members.  */\n+  if (DECL_P (decl)\n+      && (DECL_DECLARED_CONSTEXPR_P (decl)\n+\t  || DECL_VAR_DECLARED_INLINE_P (decl)))\n     return 0;\n   else if (cxx_dialect >= cxx11 && !INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n     {\n@@ -9241,6 +9303,29 @@ check_var_type (tree identifier, tree type)\n   return type;\n }\n \n+/* Handle declaring DECL as an inline variable.  */\n+\n+static void\n+mark_inline_variable (tree decl)\n+{\n+  bool inlinep = true;\n+  if (! toplevel_bindings_p ())\n+    {\n+      error (\"%<inline%> specifier invalid for variable \"\n+\t     \"%qD declared at block scope\", decl);\n+      inlinep = false;\n+    }\n+  else if (cxx_dialect < cxx1z)\n+    pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n+\t     \"inline variables are only available \"\n+\t     \"with -std=c++1z or -std=gnu++1z\");\n+  if (inlinep)\n+    {\n+      retrofit_lang_decl (decl);\n+      SET_DECL_VAR_DECLARED_INLINE_P (decl);\n+    }\n+}\n+\n /* Given declspecs and a declarator (abstract or otherwise), determine\n    the name and type of the object declared and construct a DECL node\n    for it.\n@@ -11349,11 +11434,6 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t\t\t    : input_location,\n \t\t\t\t\t    VAR_DECL, unqualified_id, type);\n \t\tset_linkage_for_static_data_member (decl);\n-\t\t/* Even if there is an in-class initialization, DECL\n-\t\t   is considered undefined until an out-of-class\n-\t\t   definition is provided.  */\n-\t\tDECL_EXTERNAL (decl) = 1;\n-\n \t\tif (thread_p)\n \t\t  {\n \t\t    CP_DECL_THREAD_LOCAL_P (decl) = true;\n@@ -11371,6 +11451,17 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t   \"initializer\", decl);\n \t\t    constexpr_p = false;\n \t\t  }\n+\n+\t\tif (inlinep)\n+\t\t  mark_inline_variable (decl);\n+\n+\t\tif (!DECL_VAR_DECLARED_INLINE_P (decl)\n+\t\t    && !(cxx_dialect >= cxx1z && constexpr_p))\n+\t\t  /* Even if there is an in-class initialization, DECL\n+\t\t     is considered undefined until an out-of-class\n+\t\t     definition is provided, unless this is an inline\n+\t\t     variable.  */\n+\t\t  DECL_EXTERNAL (decl) = 1;\n \t      }\n \t    else\n \t      {\n@@ -11411,7 +11502,8 @@ grokdeclarator (const cp_declarator *declarator,\n \n \t    bad_specifiers (decl, BSP_FIELD, virtualp,\n \t\t\t    memfn_quals != TYPE_UNQUALIFIED,\n-\t\t\t    inlinep, friendp, raises != NULL_TREE);\n+\t\t\t    staticp ? false : inlinep, friendp,\n+\t\t\t    raises != NULL_TREE);\n \t  }\n       }\n     else if (TREE_CODE (type) == FUNCTION_TYPE\n@@ -11535,6 +11627,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t    declspecs,\n \t\t\t    initialized,\n \t\t\t    ((type_quals & TYPE_QUAL_CONST) != 0) | (2 * concept_p),\n+\t\t\t    inlinep,\n \t\t\t    template_count,\n \t\t\t    ctype ? ctype : in_namespace);\n \tif (decl == NULL_TREE)\n@@ -11573,6 +11666,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t   decl);\n \t    constexpr_p = false;\n \t  }\n+\n+\tif (inlinep)\n+\t  mark_inline_variable (decl);\n       }\n \n     if (VAR_P (decl) && !initialized)"}, {"sha": "e0fff1e81c54e142243d40cdbc75d89ce91af0f8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -1827,7 +1827,8 @@ vague_linkage_p (tree decl)\n       || (TREE_CODE (decl) == FUNCTION_DECL\n \t  && DECL_DECLARED_INLINE_P (decl))\n       || (DECL_LANG_SPECIFIC (decl)\n-\t  && DECL_TEMPLATE_INSTANTIATION (decl)))\n+\t  && DECL_TEMPLATE_INSTANTIATION (decl))\n+      || (VAR_P (decl) && DECL_INLINE_VAR_P (decl)))\n     return true;\n   else if (DECL_FUNCTION_SCOPE_P (decl))\n     /* A local static in an inline effectively has vague linkage.  */\n@@ -4711,7 +4712,7 @@ c_parse_final_cleanups (void)\n \t{\n \t  if (var_finalized_p (decl) || DECL_REALLY_EXTERN (decl)\n \t      /* Don't write it out if we haven't seen a definition.  */\n-\t      || DECL_IN_AGGR_P (decl))\n+\t      || (DECL_IN_AGGR_P (decl) && !DECL_INLINE_VAR_P (decl)))\n \t    continue;\n \t  import_export_decl (decl);\n \t  /* If this static data member is needed, provide it to the\n@@ -4728,6 +4729,8 @@ c_parse_final_cleanups (void)\n     }\n   while (reconsider);\n \n+  walk_namespaces (diagnose_inline_vars_for_namespace, /*data=*/0);\n+\n   lower_var_init ();\n \n   generate_mangling_aliases ();"}, {"sha": "028025deb7a0ded04223169dccf35f22b0200e26", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -21923,7 +21923,8 @@ instantiate_decl (tree d, int defer_ok,\n     {\n       deleted_p = false;\n       if (DECL_CLASS_SCOPE_P (code_pattern))\n-\tpattern_defined = ! DECL_IN_AGGR_P (code_pattern);\n+\tpattern_defined = (! DECL_IN_AGGR_P (code_pattern)\n+\t\t\t   || DECL_INLINE_VAR_P (code_pattern));\n       else\n \tpattern_defined = ! DECL_EXTERNAL (code_pattern);\n     }"}, {"sha": "121da32dd4b7b8e0c7deabc593ec5ed0bfdb7f91", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -807,7 +807,7 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n       bool const_init;\n       value = instantiate_non_dependent_expr (value);\n       if (DECL_DECLARED_CONSTEXPR_P (decl)\n-\t  || DECL_IN_AGGR_P (decl))\n+\t  || (DECL_IN_AGGR_P (decl) && !DECL_VAR_DECLARED_INLINE_P (decl)))\n \t{\n \t  /* Diagnose a non-constant initializer for constexpr.  */\n \t  if (processing_template_decl"}, {"sha": "541faf75f1f508a0a29e55607a069114bedd3ccc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -22653,7 +22653,18 @@ gen_member_die (tree type, dw_die_ref context_die)\n \n       child = lookup_decl_die (member);\n       if (child)\n-\tsplice_child_die (context_die, child);\n+\t{\n+\t  /* Handle inline static data members, which only have in-class\n+\t     declarations.  */\n+\t  if (child->die_tag == DW_TAG_variable\n+\t      && child->die_parent == comp_unit_die ())\n+\t    {\n+\t      reparent_child (child, context_die);\n+\t      child->die_tag = DW_TAG_member;\n+\t    }\n+\t  else\n+\t    splice_child_die (context_die, child);\n+\t}\n \n       /* Do not generate standard DWARF for variant parts if we are generating\n \t the corresponding GNAT encodings: DIEs generated for both would"}, {"sha": "5e31162e2c68e547c2f75d48351884f9b3041beb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -1,3 +1,13 @@\n+2016-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp1z/inline-var1.C: New test.\n+\t* g++.dg/cpp1z/inline-var1a.C: New test.\n+\t* g++.dg/cpp1z/inline-var1.h: New file.\n+\t* g++.dg/cpp1z/inline-var2.C: New test.\n+\t* g++.dg/cpp1z/inline-var3.C: New test.\n+\t* g++.dg/concepts/decl-diagnose.C (struct X): Expect also error about\n+\tuninitialized const.\n+\n 2016-10-13  Sandra Loosemore <sandra@codesourcery.com>\n \n \t* gcc.target/arm/scd42-1.c: Skip if -mcpu incompatible with"}, {"sha": "65785b25fe9b2856476974ea82fdbdf7c4e19ea5", "filename": "gcc/testsuite/g++.dg/concepts/decl-diagnose.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -16,6 +16,7 @@ struct X\n   template<typename T>\n   static concept bool f6() { return true; } // { dg-error \"a concept cannot be a member function\" }\n   static concept bool x; // { dg-error \"declared 'concept'\" }\n+\t\t\t // { dg-error \"uninitialized const\" \"\" { target *-*-* } .-1 }\n   concept int x2; // { dg-error \"declared 'concept'\" }\n   concept ~X(); // { dg-error \"a destructor cannot be 'concept'\" }\n   concept X(); // { dg-error \"a constructor cannot be 'concept'\" }"}, {"sha": "381b8a4ea3224e6cd0d4c455cb0bc9e1b5dcf476", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ice10.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice10.C?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -6,3 +6,5 @@ struct A\n   constexpr A() {}\n   static constexpr A a[2] = {};  // { dg-error \"22:elements of array 'constexpr const A A::a \\\\\\[2\\\\\\]' have incomplete type\" }\n };\n+\n+// { dg-prune-output \"storage size\" }"}, {"sha": "c86dbe2c9111c34596c6a8a150ba37d9fbb8a607", "filename": "gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -356,6 +356,12 @@\n #  error \"__cpp_aligned_new != 201606\"\n #endif\n \n+#ifndef __cpp_inline_variables\n+#  error \"__cpp_inline_variables\"\n+#elif __cpp_inline_variables != 201606\n+#  error \"__cpp_inline_variables != 201606\"\n+#endif\n+\n #ifndef __cpp_capture_star_this\n #  error \"__cpp_capture_star_this\"\n #elif __cpp_capture_star_this != 201603"}, {"sha": "c4fdaf8384aece00b4ad279388ee3d1e8cb122de", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1.C?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -0,0 +1,216 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++1z -Wno-deprecated\" }\n+// { dg-require-weak \"\" }\n+// { dg-additional-sources \"inline-var1a.C\" }\n+\n+#include \"inline-var1.h\"\n+\n+static inline int var19 = bar (0);\n+static int inline var20 = bar (1);\n+extern inline int var23;\n+inline int var21 = foo (6);\n+inline int var22 = foo (7);\n+extern inline int var23, var22;\n+inline int var23 = foo (8);\n+\n+static int v, w;\n+\n+int\n+foo (int x)\n+{\n+  if (x != v++)\n+    __builtin_abort ();\n+  return 36 + x;\n+}\n+\n+int\n+bar (int x)\n+{\n+  if (v < 6)\n+    __builtin_abort ();\n+  if ((x >> 4) != (w >> 4))\n+    {\n+      if ((x & 15) != 0 || (w & 15) != 2)\n+\t__builtin_abort ();\n+      w = x + 1;\n+    }\n+  else if (x != w++)\n+    __builtin_abort ();\n+  return 46 + x;\n+}\n+\n+int &ref1 = var1;\n+int &ref2 = N::var2;\n+const int &ref3 = S::var3;\n+int &ref4 = S::var4;\n+const int &ref5 = S::var5;\n+const int &ref6 = N::var6;\n+int &ref7 = var7;\n+double &ref8 = N::var8;\n+double &ref9 = S::var9;\n+const int &ref11 = S::var11;\n+int &ref12 = var12;\n+int &ref13 = var13;\n+int &ref14 = U::var14;\n+T &ref15 = U::var15;\n+T &ref16 = U::var16;\n+int &ref17 = U::var17;\n+const double &ref18 = U::var18;\n+int &ref19 = var19;\n+int &ref20 = var20;\n+int &ref21 = var21;\n+int &ref22 = var22;\n+int &ref23 = var23;\n+const int &ref24 = Y<int>::var24;\n+int &ref25 = Y<int>::var25;\n+int &ref26 = Y<int>::var26;\n+int &ref27 = var27<int>;\n+const int &ref28 = Y<int>::var28;\n+const char &ref24a = Y<char>::var24;\n+char &ref25a = Y<char>::var25;\n+int &ref26a = Y<char>::var26;\n+char &ref27a = var27<char>;\n+const char &ref28a = Y<char>::var28;\n+extern int &alt1;\n+extern int &alt2;\n+extern const int &alt3;\n+extern int &alt4;\n+extern const int &alt5;\n+extern const int &alt6;\n+extern int &alt7;\n+extern double &alt8;\n+extern double &alt9;\n+extern const int &alt11;\n+extern int &alt12;\n+extern int &alt13;\n+extern int &alt14;\n+extern T &alt15;\n+extern T &alt16;\n+extern int &alt17;\n+extern const double &alt18;\n+extern int &alt19;\n+extern int &alt20;\n+extern int &alt21;\n+extern int &alt22;\n+extern int &alt23;\n+extern const int &alt24;\n+extern int &alt25;\n+extern int &alt26;\n+extern int &alt27;\n+extern const int &alt28;\n+extern const char &alt24a;\n+extern char &alt25a;\n+extern int &alt26a;\n+extern char &alt27a;\n+extern const char &alt28a;\n+\n+int\n+main ()\n+{\n+  if (v != 9)\n+    __builtin_abort ();\n+  if (var1 != 4\n+      || N::var2 != 0\n+      || S::var3 != 5\n+      || S::var4 != 6\n+      || S::var5 != 7\n+      || N::var6 != 8\n+      || var7 != 9\n+      || N::var8 != 2.0\n+      || S::var9 != 3.0\n+      || sizeof (N::var10) != 1\n+      || S::var11 != 11\n+      || var12 != 36\n+      || var13 != 37\n+      || U::var14 != 38\n+      || U::var15.t != 39\n+      || U::var16.t != 40\n+      || U::var17 != 41\n+      || U::var18 != 4.0\n+      || var19 != 46\n+      || var20 != 47\n+      || var21 != 42\n+      || var22 != 43\n+      || var23 != 44\n+      || Y<int>::var24 != 6\n+      || Y<int>::var25 != 7\n+      || Y<int>::var26 != 8\n+      || var27<int> != 9\n+      || Y<int>::var28 != 10\n+      || Y<char>::var24 != 6\n+      || Y<char>::var25 != 7\n+      || Y<char>::var26 != 8\n+      || var27<char> != 9\n+      || Y<char>::var28 != 10)\n+    __builtin_abort ();\n+  if (ref1 != 4\n+      || ref2 != 0\n+      || ref3 != 5\n+      || ref4 != 6\n+      || ref5 != 7\n+      || ref6 != 8\n+      || ref7 != 9\n+      || alt7 != 9\n+      || ref8 != 2.0\n+      || alt8 != 2.0\n+      || ref9 != 3.0\n+      || ref11 != 11\n+      || ref12 != 36\n+      || ref13 != 37\n+      || ref14 != 38\n+      || ref15.t != 39\n+      || ref16.t != 40\n+      || ref17 != 41\n+      || ref18 != 4.0\n+      || ref19 != 46\n+      || alt19 != 62\n+      || ref20 != 47\n+      || alt20 != 63\n+      || ref21 != 42\n+      || ref22 != 43\n+      || ref23 != 44\n+      || ref24 != 6\n+      || ref25 != 7\n+      || ref26 != 8\n+      || ref27 != 9\n+      || ref28 != 10\n+      || ref24a != 6\n+      || ref25a != 7\n+      || ref26a != 8\n+      || ref27a != 9\n+      || ref28a != 10)\n+    __builtin_abort ();\n+  if (&ref1 != &alt1\n+      || &ref2 != &alt2\n+      || &ref3 != &alt3\n+      || &ref4 != &alt4\n+      || &ref5 != &alt5\n+      || &ref6 != &alt6\n+      || &ref7 == &alt7\n+      || &ref8 == &alt8\n+      || &ref9 != &alt9\n+      || &ref11 != &alt11\n+      || &ref12 != &alt12\n+      || &ref13 != &alt13\n+      || &ref14 != &alt14\n+      || &ref15 != &alt15\n+      || &ref16 != &alt16\n+      || &ref17 != &alt17\n+      || &ref18 != &alt18\n+      || &ref19 == &alt19\n+      || &ref20 == &alt20\n+      || &ref21 != &alt21\n+      || &ref22 != &alt22\n+      || &ref23 != &alt23\n+      || &ref24 != &alt24\n+      || &ref25 != &alt25\n+      || &ref26 != &alt26\n+      || &ref27 != &alt27\n+      || &ref28 != &alt28\n+      || &ref24a != &alt24a\n+      || &ref25a != &alt25a\n+      || &ref26a != &alt26a\n+      || &ref27a != &alt27a\n+      || &ref28a != &alt28a)\n+    __builtin_abort ();\n+}"}, {"sha": "675e71b0763d3eca76ad80972088864e9e7fd164", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var1.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1.h?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -0,0 +1,46 @@\n+inline int var1 = 4;\n+static inline int var7 = 9;\n+namespace N\n+{\n+  int inline var2;\n+  inline const int var6 = 8;\n+  static inline double var8 = 2.0;\n+  extern inline char var10;\n+}\n+struct S\n+{\n+  static constexpr int var3 = 5;\n+  static inline int var4 = 6;\n+  static constexpr int var5 = 7;\n+  static inline double var9 = 3.0;\n+  static constexpr inline int var11 = 11;\n+};\n+const int S::var3;\n+const int S::var3;\n+extern int foo (int);\n+extern int bar (int);\n+struct T { T () { t = foo (3); } T (int x) { t = foo (x); } int t; };\n+inline int var12 = foo (0);\n+int inline var13 = foo (1);\n+struct U\n+{\n+  static inline int var14 = foo (2);\n+  static inline T var15;\n+  static inline T var16 = 4;\n+  static int inline var17 = foo (5);\n+  static constexpr double var18 = 4.0;\n+};\n+template <typename T>\n+struct Y\n+{\n+  static constexpr T var24 = 6;\n+  static inline T var25 = 7;\n+  static inline int var26 = 8;\n+  static constexpr T var28 = 10;\n+};\n+template <typename T>\n+const T Y<T>::var24;\n+template <typename T>\n+const T Y<T>::var24;\n+template <typename T>\n+inline T var27 = 9;"}, {"sha": "9b3da299837e9b031deee183a64976c4835f0955", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var1a.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1a.C?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++1z -Wno-deprecated -g\" }\n+\n+#include \"inline-var1.h\"\n+\n+static inline int var19 = bar (16);\n+static int inline var20 = bar (17);\n+inline int var21 = foo (6);\n+inline int var22 = foo (7);\n+extern inline int var23;   \n+inline int var23 = foo (8);\n+\n+int &alt1 = var1;\n+int &alt2 = N::var2;   \n+const int &alt3 = S::var3;\n+int &alt4 = S::var4;   \n+const int &alt5 = S::var5;\n+const int &alt6 = N::var6;\n+int &alt7 = var7;\n+double &alt8 = N::var8;\n+double &alt9 = S::var9; \n+const int &alt11 = S::var11;\n+int &alt12 = var12;\n+int &alt13 = var13;\n+int &alt14 = U::var14;\n+T &alt15 = U::var15;\n+T &alt16 = U::var16;\n+int &alt17 = U::var17;\n+const double &alt18 = U::var18;\n+int &alt19 = var19;\n+int &alt20 = var20;\n+int &alt21 = var21;\n+int &alt22 = var22;\n+int &alt23 = var23;\n+const int &alt24 = Y<int>::var24;\n+int &alt25 = Y<int>::var25;\n+int &alt26 = Y<int>::var26;\n+int &alt27 = var27<int>;\n+const int &alt28 = Y<int>::var28;\n+const char &alt24a = Y<char>::var24;\n+char &alt25a = Y<char>::var25;\n+int &alt26a = Y<char>::var26;\n+char &alt27a = var27<char>;\n+const char &alt28a = Y<char>::var28;"}, {"sha": "bfbbe1d6223273e0a57094c75bfecbc426eaf566", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var2.C", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -0,0 +1,117 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wdeprecated\" }\n+\n+inline int var1 = 4;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+static inline int var7 = 9;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+namespace N\n+{\n+  int inline var2;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  inline const int var6 = 8;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline double var8 = 2.0;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  extern inline char var10;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+}\n+struct S\n+{\n+  static constexpr int var3 = 5;\n+  static inline int var4 = 6;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static constexpr int var5 = 7;\n+  static inline double var9 = 3.0;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static constexpr inline int var11 = 11;\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+};\n+const int S::var3;\t\t\t\t// { dg-warning \"redundant redeclaration of\" \"\" { target c++1z } }\n+const int S::var3;\t\t\t\t// { dg-error \"redefinition of\" \"\" { target c++14_down } }\n+extern int foo (int);\t\t\t\t// { dg-warning \"redundant redeclaration of\" \"\" { target c++1z } .-1 }\n+extern int bar (int);\n+struct T { T () { t = foo (3); } T (int x) { t = foo (x); } int t; };\n+inline int var12 = foo (0);\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+int inline var13 = foo (1);\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+struct U\n+{\n+  static inline int var14 = foo (2);\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline T var15;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline T var16 = 4;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static int inline var17 = foo (5);\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static constexpr double var18 = 4.0;\n+};\n+extern inline int var19;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+extern inline int var20;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+int &ref19 = var19;\t\t\t\t// { dg-error \"odr-used inline variable 'var19' is not defined\" \"\" { target *-*-* } .-2 }\n+int sz20 = sizeof (var20);\n+struct V\n+{\n+  static struct A var21;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } .+1 }\n+  static inline struct B var22;\t\t\t// { dg-error \"has incomplete type\" }\n+  static inline struct C var23 = {};\t\t// { dg-error \"has incomplete type\" }\n+};\t\t\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } .-1 }\n+struct W\n+{\n+  static inline int var24;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline const int var25;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+\t\t\t\t\t\t// { dg-error \"uninitialized const\" \"\" { target *-*-* } .-1 }\n+  static inline int var26 = 5;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline const int var27 = 6;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline double var28 = { 4.0 };\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static const inline double var29 = { 5.0 };\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+};\n+int W::var24;\t\t\t\t\t// { dg-error \"redefinition of\" }\n+const int W::var25;\t\t\t\t// { dg-error \"redefinition of\" }\n+int W::var26;\t\t\t\t\t// { dg-error \"redefinition of\" }\n+const int W::var27;\t\t\t\t// { dg-error \"redefinition of\" }\n+double W::var28;\t\t\t\t// { dg-error \"redefinition of\" }\n+double const W::var29;\t\t\t\t// { dg-error \"redefinition of\" }\n+struct X\n+{\n+  inline int var30;\t\t\t\t// { dg-error \"'var30' declared as an 'inline' field\" }\n+};\n+inline typedef int TT;\t\t\t\t// { dg-error \"'TT' declared as an 'inline' type\" }\n+int\n+foo (inline int var31)\t\t\t\t// { dg-error \"'var31' declared as an 'inline' parameter\" }\n+{\n+  inline int var32;\t\t\t\t// { dg-error \"'inline' specifier invalid for variable 'var32' declared at block scope\" }\n+  static inline int var33;\t\t\t// { dg-error \"'inline' specifier invalid for variable 'var33' declared at block scope\" }\n+}\n+template <typename A, typename B, typename C>\n+struct Y\n+{\n+  static A var34;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } .+1 }\n+  static inline B var35;\t\t\t// { dg-error \"has incomplete type\" }\n+  static inline C var36;\t\t\t// { dg-error \"has incomplete type\" }\n+};\t\t\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } .-1 }\n+struct A;\n+struct B;\n+struct C;\n+Y<A, B, C> y;\n+A *ptr34 = &Y<A, B, C>::var34;\n+B *ptr35 = &Y<A, B, C>::var35;\n+C *ptr36 = &Y<A, B, C>::var36;\n+template <int N>\n+struct Z\n+{\n+  static inline int var37;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline const int var38;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+\t\t\t\t\t\t// { dg-error \"uninitialized const\" \"\" { target *-*-* } .-1 }\n+  static inline int var39 = 5;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline const int var40 = 6;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static inline double var41 = { 4.0 };\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static const inline double var42 = { 5.0 };\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  static constexpr int var43 = 5;\n+  static constexpr inline int var44 = 5;\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+};\n+template <int N>\n+int Z<N>::var37;\t\t\t\t// { dg-error \"redefinition of\" }\n+template <int N>\n+const int Z<N>::var38;\t\t\t\t// { dg-error \"redefinition of\" }\n+const int &ref38 = Z<0>::var38;\n+template <int N>\n+int Z<N>::var39;\t\t\t\t// { dg-error \"redefinition of\" }\n+template <int N>\n+const int Z<N>::var40;\t\t\t\t// { dg-error \"redefinition of\" }\n+template <int N>\n+double Z<N>::var41;\t\t\t\t// { dg-error \"redefinition of\" }\n+template <int N>\n+double const Z<N>::var42;\t\t\t// { dg-error \"redefinition of\" }\n+template <int N>\n+const int Z<N>::var43;\t\t\t\t// { dg-warning \"redundant redeclaration of\" \"\" { target c++1z } }\n+template <int N>\t\t\t\t// { dg-warning \"redundant redeclaration of\" \"\" { target c++1z } .+1 }\n+const int Z<N>::var43;\t\t\t\t// { dg-error \"redefinition of\" \"\" { target c++14_down } }\n+Z<0> z;"}, {"sha": "7bee9dc30aae06f7d4ef63e4d166b9a60e6c5091", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var3.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var3.C?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do compile }\n+// { dg-options \"-g0\" }\n+// Verify that inline variables and static data members that aren't odr-used\n+// aren't emitted into assembly even at -O0.\n+// { dg-final { scan-assembler-not \"inlvarvariable\" } }\n+\n+inline int inlvarvariable1 = 1;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+const inline int inlvarvariable2 = 2;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+namespace N\n+{\n+  int inline inlvarvariable3;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  const int inline inlvarvariable4 = 4;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+}\n+struct S\n+{\n+  static inline double inlvarvariable5 = 5.0;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+#if __cplusplus >= 201103L\n+  static constexpr int inlvarvariable6 = 6;\n+  static inline constexpr int inlvarvariable7 = 7;\t// { dg-warning \"inline variables are only available with\" \"\" { target { c++11 && c++14_down } } }\n+#endif\n+};\n+template <int N>\t\t\t\t\t// { dg-warning \"variable templates only available with\" \"\" { target c++11_down } .+1 }\n+inline int inlvarvariable8;\t\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+template <int N>\t\t\t\t\t// { dg-warning \"variable templates only available with\" \"\" { target c++11_down } .+1 }\n+const int inline inlvarvariable9 = 9;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+namespace N\n+{\n+  template <int N>\t\t\t\t\t// { dg-warning \"variable templates only available with\" \"\" { target c++11_down } .+1 }\n+  int inline inlvarvariable10 = 10;\t\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+  template <int N>\t\t\t\t\t// { dg-warning \"variable templates only available with\" \"\" { target c++11_down } .+1 }\n+  const inline double inlvarvariable11 = 11.0;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+}\n+template <int N>\n+struct T\n+{\n+  static inline int inlvarvariable12 = 12;\t\t// { dg-warning \"inline variables are only available with\" \"\" { target c++14_down } }\n+#if __cplusplus >= 201103L\n+  static constexpr int inlvarvariable13 = 13;\n+  static inline constexpr double inlvarvariable14 = 14.0; // { dg-warning \"inline variables are only available with\" \"\" { target { c++11 && c++14_down } } }\n+#endif\n+};\n+#if __cplusplus < 201103L\n+#define decltype(x) int\n+#endif\n+decltype (inlvarvariable1) v1 = inlvarvariable2 + sizeof (inlvarvariable1);\n+decltype (N::inlvarvariable3) v2 = N::inlvarvariable4 + sizeof (N::inlvarvariable3);\n+#if __cplusplus >= 201103L\n+decltype (S::inlvarvariable6) v3 = sizeof (S::inlvarvariable5) + S::inlvarvariable6 + S::inlvarvariable7;\n+#else\n+int v3 = sizeof (S::inlvarvariable5);\n+#endif\n+decltype (inlvarvariable8<2>) v4 = inlvarvariable9<2> + sizeof (inlvarvariable8<2>);\n+decltype (N::inlvarvariable10<0>) v5 = sizeof (N::inlvarvariable10<0>) + sizeof (N::inlvarvariable11<0>);\n+#if __cplusplus >= 201103L\n+decltype (T<-1>::inlvarvariable12) v6 = sizeof (T<-1>::inlvarvariable14) + sizeof (T<-1>::inlvarvariable12) + T<-1>::inlvarvariable13;\n+#else\n+int v6 = sizeof (T<-1>::inlvarvariable12);\n+#endif"}, {"sha": "c7d35b7f71e96f4fa8af65908c9cd6aa29108304", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc6.C?ref=14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "patch": "@@ -1,7 +1,7 @@\n // { dg-do assemble  }\n // GROUPS passed miscellaneous\n // test that use of `inline' is forbidden when it should be\n-inline int i;// { dg-error \"\" } .*\n+inline int i;// { dg-error \"\" \"\" { target c++14_down } } .*\n struct c { inline int i; };// { dg-error \"\" } .*\n int foo (inline int i);// { dg-error \"\" } .*\n inline class c; // { dg-error \"'inline' can only be specified for functions\" } inline"}]}