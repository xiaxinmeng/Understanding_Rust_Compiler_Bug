{"sha": "de54de93fa4bf4740638e58f9aaab1e50026bacb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU1NGRlOTNmYTRiZjQ3NDA2MzhlNThmOWFhYWIxZTUwMDI2YmFjYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-15T18:49:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-15T18:49:38Z"}, "message": "PR c++/71092 - ICE with array and constexpr.\n\n\t* constexpr.c (cxx_eval_call_expression): Fail quietly when cgraph\n\tthrew away DECL_SAVED_TREE.\n\nFrom-SVN: r238395", "tree": {"sha": "861ecdf4e032f243cb226623473bb28315a295b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/861ecdf4e032f243cb226623473bb28315a295b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de54de93fa4bf4740638e58f9aaab1e50026bacb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de54de93fa4bf4740638e58f9aaab1e50026bacb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de54de93fa4bf4740638e58f9aaab1e50026bacb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de54de93fa4bf4740638e58f9aaab1e50026bacb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d031550cc895e3004f9cd23874877facc5d429a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d031550cc895e3004f9cd23874877facc5d429a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d031550cc895e3004f9cd23874877facc5d429a"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "0c3819593103a5dd014e5ee226e714096ed87b6d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de54de93fa4bf4740638e58f9aaab1e50026bacb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de54de93fa4bf4740638e58f9aaab1e50026bacb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=de54de93fa4bf4740638e58f9aaab1e50026bacb", "patch": "@@ -1,5 +1,9 @@\n 2016-07-15  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/71092\n+\t* constexpr.c (cxx_eval_call_expression): Fail quietly when cgraph\n+\tthrew away DECL_SAVED_TREE.\n+\n \tPR c++/71117\n \tCore 2189\n \t* call.c (add_template_conv_candidate): Disable if there are"}, {"sha": "cb8ece0773feb277a352bfd739a959bba7a55a79", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de54de93fa4bf4740638e58f9aaab1e50026bacb/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de54de93fa4bf4740638e58f9aaab1e50026bacb/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=de54de93fa4bf4740638e58f9aaab1e50026bacb", "patch": "@@ -1504,9 +1504,19 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n     }\n   else\n     {\n-      if (!result || result == error_mark_node)\n+      if (result && result != error_mark_node)\n+\t/* OK */;\n+      else if (!DECL_SAVED_TREE (fun))\n+\t{\n+\t  /* When at_eof >= 2, cgraph has started throwing away\n+\t     DECL_SAVED_TREE, so fail quietly.  FIXME we get here because of\n+\t     late code generation for VEC_INIT_EXPR, which needs to be\n+\t     completely reconsidered.  */\n+\t  gcc_assert (at_eof >= 2 && ctx->quiet);\n+\t  *non_constant_p = true;\n+\t}\n+      else\n \t{\n-\t  gcc_assert (DECL_SAVED_TREE (fun));\n \t  tree body, parms, res;\n \n \t  /* Reuse or create a new unshared copy of this function's body.  */"}, {"sha": "c6afa507f02a586ff8b611db00ee22983f37a0f2", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array17.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de54de93fa4bf4740638e58f9aaab1e50026bacb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de54de93fa4bf4740638e58f9aaab1e50026bacb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array17.C?ref=de54de93fa4bf4740638e58f9aaab1e50026bacb", "patch": "@@ -0,0 +1,61 @@\n+// PR c++/71092\n+// { dg-do compile { target c++11 } }\n+\n+template <typename _Default> struct A { using type = _Default; };\n+template <typename _Default, template <typename> class>\n+using __detected_or = A<_Default>;\n+template <typename _Default, template <typename> class _Op>\n+using __detected_or_t = typename __detected_or<_Default, _Op>::type;\n+template <typename _Tp> struct B { typedef _Tp value_type; };\n+struct C {\n+  template <typename _Tp> using __pointer = typename _Tp::pointer;\n+};\n+template <typename _Alloc> struct J : C {\n+  using pointer = __detected_or_t<typename _Alloc::value_type *, __pointer>;\n+};\n+template <typename _T1> void _Construct(_T1 *) { new _T1; }\n+struct D {\n+  template <typename _ForwardIterator, typename _Size>\n+  static _ForwardIterator __uninit_default_n(_ForwardIterator p1, _Size) {\n+    _Construct(p1);\n+  }\n+};\n+template <typename _ForwardIterator, typename _Size>\n+void __uninitialized_default_n(_ForwardIterator p1, _Size) {\n+  D::__uninit_default_n(p1, 0);\n+}\n+template <typename _ForwardIterator, typename _Size, typename _Tp>\n+void __uninitialized_default_n_a(_ForwardIterator p1, _Size, _Tp) {\n+  __uninitialized_default_n(p1, 0);\n+}\n+template <typename> struct __shared_ptr {\n+  constexpr __shared_ptr() : _M_ptr(), _M_refcount() {}\n+  int _M_ptr;\n+  int _M_refcount;\n+};\n+template <typename _Alloc> struct F {\n+  typedef _Alloc _Tp_alloc_type;\n+  struct G {\n+    typename J<_Tp_alloc_type>::pointer _M_start;\n+    G(_Tp_alloc_type);\n+  };\n+  F(int, _Alloc p2) : _M_impl(p2) {}\n+  G _M_impl;\n+};\n+template <typename _Tp, typename _Alloc = B<_Tp>> struct K : F<_Alloc> {\n+  typedef _Alloc allocator_type;\n+  K(int, allocator_type p2 = allocator_type()) : F<_Alloc>(0, p2) {\n+    __uninitialized_default_n_a(this->_M_impl._M_start, 0, 0);\n+  }\n+};\n+struct H {\n+  H();\n+  struct I {\n+    __shared_ptr<int> trigger[1];\n+  };\n+  __shared_ptr<int> resetTrigger_;\n+  K<I> states_;\n+  __shared_ptr<int> triggerManager_;\n+};\n+__shared_ptr<int> a;\n+H::H() : states_(0), triggerManager_(a) {}"}]}