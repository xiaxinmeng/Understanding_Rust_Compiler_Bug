{"sha": "11f1e3ab239b3a45b085ca5eb1327f1254fb6205", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFmMWUzYWIyMzliM2E0NWIwODVjYTVlYjEzMjdmMTI1NGZiNjIwNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-05T15:54:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-05T15:54:39Z"}, "message": "re PR tree-optimization/56205 (stdarg pass confused by jump threading)\n\n\tPR tree-optimization/56205\n\t* tree-stdarg.c (check_all_va_list_escapes): Return true if\n\tthere are any PHI nodes that set non-va_list_escape_vars SSA_NAME\n\tand some va_list_escape_vars SSA_NAME appears in some PHI argument.\n\n\t* gcc.dg/tree-ssa/stdarg-6.c: New test.\n\t* gcc.c-torture/execute/pr56205.c: New test.\n\nFrom-SVN: r195760", "tree": {"sha": "899e8e666ecaed66a88bbdcc9ab214a36edc66dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/899e8e666ecaed66a88bbdcc9ab214a36edc66dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11f1e3ab239b3a45b085ca5eb1327f1254fb6205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f1e3ab239b3a45b085ca5eb1327f1254fb6205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11f1e3ab239b3a45b085ca5eb1327f1254fb6205", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f1e3ab239b3a45b085ca5eb1327f1254fb6205/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14ac6aa24e155affd1829600a5294a8f3cc115cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ac6aa24e155affd1829600a5294a8f3cc115cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14ac6aa24e155affd1829600a5294a8f3cc115cd"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "a6ab680cc8ad2e86f9f297d1ce078c97757c6494", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f1e3ab239b3a45b085ca5eb1327f1254fb6205/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f1e3ab239b3a45b085ca5eb1327f1254fb6205/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11f1e3ab239b3a45b085ca5eb1327f1254fb6205", "patch": "@@ -1,3 +1,10 @@\n+2013-02-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/56205\n+\t* tree-stdarg.c (check_all_va_list_escapes): Return true if\n+\tthere are any PHI nodes that set non-va_list_escape_vars SSA_NAME\n+\tand some va_list_escape_vars SSA_NAME appears in some PHI argument.\n+\n 2013-02-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/53342"}, {"sha": "dc716f97bb94eea515880c61947782a3e17e3522", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f1e3ab239b3a45b085ca5eb1327f1254fb6205/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f1e3ab239b3a45b085ca5eb1327f1254fb6205/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11f1e3ab239b3a45b085ca5eb1327f1254fb6205", "patch": "@@ -1,3 +1,9 @@\n+2013-02-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/56205\n+\t* gcc.dg/tree-ssa/stdarg-6.c: New test.\n+\t* gcc.c-torture/execute/pr56205.c: New test.\n+\n 2013-02-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/53342"}, {"sha": "bf39685946b55b4ada76d854a00ce49ca3098115", "filename": "gcc/testsuite/gcc.c-torture/execute/pr56205.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f1e3ab239b3a45b085ca5eb1327f1254fb6205/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56205.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f1e3ab239b3a45b085ca5eb1327f1254fb6205/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56205.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56205.c?ref=11f1e3ab239b3a45b085ca5eb1327f1254fb6205", "patch": "@@ -0,0 +1,61 @@\n+/* PR tree-optimization/56205 */\n+\n+#include <stdarg.h>\n+\n+int a, b;\n+char c[128];\n+\n+__attribute__((noinline, noclone)) static void\n+f1 (const char *fmt, ...)\n+{\n+  va_list ap;\n+  asm volatile (\"\" : : : \"memory\");\n+  if (__builtin_strcmp (fmt, \"%s %d %s\") != 0)\n+    __builtin_abort ();\n+  va_start (ap, fmt);\n+  if (__builtin_strcmp (va_arg (ap, const char *), \"foo\") != 0\n+      || va_arg (ap, int) != 1\n+      || __builtin_strcmp (va_arg (ap, const char *), \"bar\") != 0)\n+    __builtin_abort ();\n+  va_end (ap);\n+}\n+\n+__attribute__((noinline, noclone)) static void\n+f2 (const char *fmt, va_list ap)\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  if (__builtin_strcmp (fmt, \"baz\") != 0\n+      || __builtin_strcmp (va_arg (ap, const char *), \"foo\") != 0\n+      || va_arg (ap, double) != 12.0\n+      || va_arg (ap, int) != 26)\n+    __builtin_abort ();\n+}\n+\n+static void\n+f3 (int x, char const *y, va_list z)\n+{\n+  f1 (\"%s %d %s\", x ? \"\" : \"foo\", ++a, (y && *y) ? \"bar\" : \"\");\n+  if (y && *y)\n+    f2 (y, z);\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f4 (int x, char const *y, ...)\n+{\n+  va_list z;\n+  va_start (z, y);\n+  if (!x && *c == '\\0')\n+    ++b;\n+  f3 (x, y, z);\n+  va_end (z);\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  f4 (0, \"baz\", \"foo\", 12.0, 26);\n+  if (a != 1 || b != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "c21dc17b527dd6fe2e3c0510f8553d0ed5789eb6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-6.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f1e3ab239b3a45b085ca5eb1327f1254fb6205/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f1e3ab239b3a45b085ca5eb1327f1254fb6205/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-6.c?ref=11f1e3ab239b3a45b085ca5eb1327f1254fb6205", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/56205 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-stdarg\" } */\n+\n+#include <stdarg.h>\n+\n+int a, b;\n+char c[128];\n+\n+static inline void\n+foo (int x, char const *y, va_list z)\n+{\n+  __builtin_printf (\"%s %d %s\", x ? \"\" : \"foo\", ++a, (y && *y) ? \"bar\" : \"\");\n+  if (y && *y)\n+    __builtin_vprintf (y, z);\n+}\n+\n+void\n+bar (int x, char const *y, ...)\n+{\n+  va_list z;\n+  va_start (z, y);\n+  if (!x && *c == '\\0')\n+    ++b;\n+  foo (x, y, z);\n+  va_end (z);\n+}\n+\n+/* { dg-final { scan-tree-dump \"bar: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"bar: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"bar: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"bar: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"bar: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } } */\n+/* { dg-final { scan-tree-dump \"bar: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"bar: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */"}, {"sha": "8ad9fc2d22e48917f843b21eded1b527f783e70c", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f1e3ab239b3a45b085ca5eb1327f1254fb6205/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f1e3ab239b3a45b085ca5eb1327f1254fb6205/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=11f1e3ab239b3a45b085ca5eb1327f1254fb6205", "patch": "@@ -526,6 +526,37 @@ check_all_va_list_escapes (struct stdarg_info *si)\n     {\n       gimple_stmt_iterator i;\n \n+      for (i = gsi_start_phis (bb); !gsi_end_p (i); gsi_next (&i))\n+\t{\n+\t  tree lhs;\n+\t  use_operand_p uop;\n+\t  ssa_op_iter soi;\n+\t  gimple phi = gsi_stmt (i);\n+\n+\t  lhs = PHI_RESULT (phi);\n+\t  if (virtual_operand_p (lhs)\n+\t      || bitmap_bit_p (si->va_list_escape_vars,\n+\t\t\t       SSA_NAME_VERSION (lhs)))\n+\t    continue;\n+\n+\t  FOR_EACH_PHI_ARG (uop, phi, soi, SSA_OP_USE)\n+\t    {\n+\t      tree rhs = USE_FROM_PTR (uop);\n+\t      if (TREE_CODE (rhs) == SSA_NAME\n+\t\t  && bitmap_bit_p (si->va_list_escape_vars,\n+\t\t\t\tSSA_NAME_VERSION (rhs)))\n+\t\t{\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    {\n+\t\t      fputs (\"va_list escapes in \", dump_file);\n+\t\t      print_gimple_stmt (dump_file, phi, 0, dump_flags);\n+\t\t      fputc ('\\n', dump_file);\n+\t\t    }\n+\t\t  return true;\n+\t\t}\n+\t    }\n+\t}\n+\n       for (i = gsi_start_bb (bb); !gsi_end_p (i); gsi_next (&i))\n \t{\n \t  gimple stmt = gsi_stmt (i);"}]}