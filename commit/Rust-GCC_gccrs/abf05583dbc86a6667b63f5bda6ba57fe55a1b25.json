{"sha": "abf05583dbc86a6667b63f5bda6ba57fe55a1b25", "node_id": "C_kwDOANBUbNoAKGFiZjA1NTgzZGJjODZhNjY2N2I2M2Y1YmRhNmJhNTdmZTU1YTFiMjU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-01T09:12:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-01T09:53:41Z"}, "message": "tree-optimization/107937 - uninit predicate simplification fixup\n\nThe following changes the predicate representation to record the\nvalue of a predicate with an empty set of AND predicates.  That's\nnecessary to properly represent the conservative fallback for the\ndef vs use predicates.  Since simplification now can result in\nsuch an empty set this distinction becomes important and we need\nto check for this as we otherwise ICE.\n\n\tPR tree-optimization/107937\n\t* gimple-predicate-analysis.h (predicate::is_true): New.\n\t(predicate::is_false): Likewise.\n\t(predicate::empty_val): Likewise.\n\t(uninit_analysis::uninit_analysis): Properly initialize\n\tdef_preds.\n\t* gimple-predicate-analysis.cc (simplify_1b): Indicate\n\twhether the chain became empty.\n\t(predicate::simplify): Release emptied chain before removing it.\n\t(predicate::normalize): Replace temporary object with assertion.\n\t(uninit_analysis::is_use_guarded): Deal with predicates\n\tthat simplify to true/false.\n\n\t* gcc.dg/pr107937.c: New testcase.", "tree": {"sha": "befc2c277eb2254a84124f509c76f41e20567281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/befc2c277eb2254a84124f509c76f41e20567281"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abf05583dbc86a6667b63f5bda6ba57fe55a1b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf05583dbc86a6667b63f5bda6ba57fe55a1b25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abf05583dbc86a6667b63f5bda6ba57fe55a1b25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf05583dbc86a6667b63f5bda6ba57fe55a1b25/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8629f212af0acb113879d0bc45291c54743790f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8629f212af0acb113879d0bc45291c54743790f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8629f212af0acb113879d0bc45291c54743790f1"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "afe01e7f4b8d95e513da9903205e7e0cee2ba53c", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf05583dbc86a6667b63f5bda6ba57fe55a1b25/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf05583dbc86a6667b63f5bda6ba57fe55a1b25/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=abf05583dbc86a6667b63f5bda6ba57fe55a1b25", "patch": "@@ -1249,7 +1249,7 @@ simplify_1a (pred_chain &chain)\n }\n \n /* Implement rule 1b above.  PREDS is the AND predicate to simplify\n-   in place.  Returns true if CHAIN simplifies to true.  */\n+   in place.  Returns true if CHAIN simplifies to true or false.  */\n \n static bool\n simplify_1b (pred_chain &chain)\n@@ -1290,6 +1290,8 @@ simplify_1b (pred_chain &chain)\n \t    {\n \t      chain.ordered_remove (j);\n \t      chain.ordered_remove (i);\n+\t      if (chain.is_empty ())\n+\t\treturn true;\n \t      i--;\n \t      break;\n \t    }\n@@ -1503,6 +1505,7 @@ predicate::simplify (gimple *use_or_def, bool is_use)\n       ::simplify_1a (m_preds[i]);\n       if (::simplify_1b (m_preds[i]))\n \t{\n+\t  m_preds[i].release ();\n \t  m_preds.ordered_remove (i);\n \t  i--;\n \t}\n@@ -1719,10 +1722,11 @@ predicate::normalize (const pred_chain &chain)\n   while (!work_list.is_empty ())\n     {\n       pred_info pi = work_list.pop ();\n-      predicate pred;\n       /* The predicate object is not modified here, only NORM_CHAIN and\n \t WORK_LIST are appended to.  */\n-      pred.normalize (&norm_chain, pi, BIT_AND_EXPR, &work_list, &mark_set);\n+      unsigned oldlen = m_preds.length ();\n+      normalize (&norm_chain, pi, BIT_AND_EXPR, &work_list, &mark_set);\n+      gcc_assert (m_preds.length () == oldlen);\n     }\n \n   m_preds.safe_push (norm_chain);\n@@ -1740,7 +1744,7 @@ predicate::normalize (gimple *use_or_def, bool is_use)\n       dump (dump_file, use_or_def, is_use ? \"[USE]:\\n\" : \"[DEF]:\\n\");\n     }\n \n-  predicate norm_preds;\n+  predicate norm_preds (empty_val ());\n   for (unsigned i = 0; i < m_preds.length (); i++)\n     {\n       if (m_preds[i].length () != 1)\n@@ -2076,6 +2080,8 @@ predicate::operator= (const predicate &rhs)\n   if (this == &rhs)\n     return *this;\n \n+  m_cval = rhs.m_cval;\n+\n   unsigned n = m_preds.length ();\n   for (unsigned i = 0; i != n; ++i)\n     m_preds[i].release ();\n@@ -2204,11 +2210,15 @@ uninit_analysis::is_use_guarded (gimple *use_stmt, basic_block use_bb,\n   /* Try to build the predicate expression under which the PHI flows\n      into its use.  This will be empty if the PHI is defined and used\n      in the same bb.  */\n-  predicate use_preds;\n+  predicate use_preds (true);\n   if (!init_use_preds (use_preds, def_bb, use_bb))\n     return false;\n \n   use_preds.simplify (use_stmt, /*is_use=*/true);\n+  if (use_preds.is_false ())\n+    return true;\n+  if (use_preds.is_true ())\n+    return false;\n   use_preds.normalize (use_stmt, /*is_use=*/true);\n \n   /* Try to prune the dead incoming phi edges.  */\n@@ -2227,6 +2237,10 @@ uninit_analysis::is_use_guarded (gimple *use_stmt, basic_block use_bb,\n \treturn false;\n \n       m_phi_def_preds.simplify (phi);\n+      if (m_phi_def_preds.is_false ())\n+\treturn false;\n+      if (m_phi_def_preds.is_true ())\n+\treturn true;\n       m_phi_def_preds.normalize (phi);\n     }\n "}, {"sha": "c4a7ed51967b563c8d4fad45db58de72d3ee638f", "filename": "gcc/gimple-predicate-analysis.h", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf05583dbc86a6667b63f5bda6ba57fe55a1b25/gcc%2Fgimple-predicate-analysis.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf05583dbc86a6667b63f5bda6ba57fe55a1b25/gcc%2Fgimple-predicate-analysis.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.h?ref=abf05583dbc86a6667b63f5bda6ba57fe55a1b25", "patch": "@@ -45,7 +45,7 @@ class predicate\n {\n  public:\n   /* Construct with the specified EVAL object.  */\n-  predicate () : m_preds (vNULL) { }\n+  predicate (bool empty_val) : m_preds (vNULL), m_cval (empty_val) { }\n \n   /* Copy.  */\n   predicate (const predicate &rhs) : m_preds (vNULL) { *this = rhs; }\n@@ -60,6 +60,21 @@ class predicate\n     return m_preds.is_empty ();\n   }\n \n+  bool is_true () const\n+  {\n+    return is_empty () && m_cval;\n+  }\n+\n+  bool is_false () const\n+  {\n+    return is_empty () && !m_cval;\n+  }\n+\n+  bool empty_val () const\n+  {\n+    return m_cval;\n+  }\n+\n   const pred_chain_union chain () const\n   {\n     return m_preds;\n@@ -92,8 +107,10 @@ class predicate\n   bool simplify_3 ();\n   bool simplify_4 ();\n \n-  /* Representation of the predicate expression(s).  */\n+  /* Representation of the predicate expression(s).  The predicate is\n+     m_cval || m_preds[0] || ...  */\n   pred_chain_union m_preds;\n+  bool m_cval;\n };\n \n /* Represents a complex Boolean predicate expression.  */\n@@ -119,7 +136,7 @@ class uninit_analysis\n \n   /* Construct with the specified EVAL object.  */\n   uninit_analysis (func_t &eval)\n-    : m_phi_def_preds (), m_eval (eval) { }\n+    : m_phi_def_preds (false), m_eval (eval) { }\n \n   /* Copy.  */\n   uninit_analysis (const uninit_analysis &rhs) = delete;"}, {"sha": "524850bcfa5d210379e95227a82038a70fe6488e", "filename": "gcc/testsuite/gcc.dg/pr107937.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf05583dbc86a6667b63f5bda6ba57fe55a1b25/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107937.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf05583dbc86a6667b63f5bda6ba57fe55a1b25/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107937.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107937.c?ref=abf05583dbc86a6667b63f5bda6ba57fe55a1b25", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+int _setjmp(int);\n+int regs, vm_debug_engine_vp_0, vm_debug_engine_vp_2;\n+\n+void\n+vm_dispatch_hook();\n+\n+\n+void\n+vm_debug_engine() {\n+  int fp;\n+  void *jump_table = &&l_nop;\n+l_nop:\n+  if (__builtin_expect(vm_debug_engine_vp_2, 0))\n+    vm_dispatch_hook();\n+  if (_setjmp(regs)) {\n+    fp = fp;\n+    vm_dispatch_hook();\n+    goto *jump_table;\n+  }\n+  vm_debug_engine_vp_0 = fp;\n+}"}]}