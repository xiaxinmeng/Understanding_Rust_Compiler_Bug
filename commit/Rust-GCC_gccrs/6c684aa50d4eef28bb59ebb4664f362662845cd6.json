{"sha": "6c684aa50d4eef28bb59ebb4664f362662845cd6", "node_id": "C_kwDOANBUbNoAKDZjNjg0YWE1MGQ0ZWVmMjhiYjU5ZWJiNDY2NGYzNjI2NjI4NDVjZDY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-30T21:25:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-30T21:25:34Z"}, "message": "regrename: Fix -fcompare-debug issue in find_rename_reg [PR103756]\n\nThe r12-5978 change caused a -fcompare-debug issue, because without\n-g a chain might start with a noop move, but with -g there could be\none or more DEBUG_INSNs in the chain before the noop move and so\nregrename could make different decisions between -g and -g0.\n\nNote, I must say I don't really understand the original change much,\nif we want to make sure the noop moves are removed, couldn't regrename\nduring building of those du chains simply remove the noop moves instead?\n\n2021-12-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/103756\n\t* regrename.c (find_rename_reg): Test noop_move_p on the first\n\tnon-debug insn in the chain rather than on the first insn.\n\n\t* g++.dg/opt/pr103756.C: New test.", "tree": {"sha": "209287f89f026bc7eefb42fc9133380f7b36f308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/209287f89f026bc7eefb42fc9133380f7b36f308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c684aa50d4eef28bb59ebb4664f362662845cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c684aa50d4eef28bb59ebb4664f362662845cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c684aa50d4eef28bb59ebb4664f362662845cd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c684aa50d4eef28bb59ebb4664f362662845cd6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "c34ea6be76b36e56df58c814d747a03f2f2b277a", "filename": "gcc/regrename.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c684aa50d4eef28bb59ebb4664f362662845cd6/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c684aa50d4eef28bb59ebb4664f362662845cd6/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=6c684aa50d4eef28bb59ebb4664f362662845cd6", "patch": "@@ -394,10 +394,15 @@ find_rename_reg (du_head_p this_head, enum reg_class super_class,\n \t\t\t  this_head, *unavailable))\n     return this_head->tied_chain->regno;\n \n-  /* If this insn is a noop move, then do not rename in this chain as doing so\n-     would inhibit removal of the noop move.  */\n-  if (noop_move_p (this_head->first->insn))\n-    return best_new_reg;\n+  /* If the first non-debug insn is a noop move, then do not rename in this\n+     chain as doing so would inhibit removal of the noop move.  */\n+  for (struct du_chain *tmp = this_head->first; tmp; tmp = tmp->next_use)\n+    if (DEBUG_INSN_P (tmp->insn))\n+      continue;\n+    else if (noop_move_p (tmp->insn))\n+      return best_new_reg;\n+    else\n+      break;\n \n   /* If PREFERRED_CLASS is not NO_REGS, we iterate in the first pass\n      over registers that belong to PREFERRED_CLASS and try to find the"}, {"sha": "d6d75966d74efeb6a0b8fb019841dd506924c0e1", "filename": "gcc/testsuite/g++.dg/opt/pr103756.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c684aa50d4eef28bb59ebb4664f362662845cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr103756.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c684aa50d4eef28bb59ebb4664f362662845cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr103756.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr103756.C?ref=6c684aa50d4eef28bb59ebb4664f362662845cd6", "patch": "@@ -0,0 +1,57 @@\n+// PR rtl-optimization/103756\n+// { dg-do compile }\n+// { dg-options \"-std=c++17 -O -fcompare-debug -fconserve-stack -frename-registers -fno-tree-ch -fira-algorithm=priority\" }\n+\n+char __copy_move_b___trans_tmp_9;\n+template <typename> struct __iterator_traits;\n+template <typename _Tp> struct __iterator_traits<_Tp *> {\n+  typedef _Tp &reference;\n+};\n+template <typename _Iterator> struct reverse_iterator {\n+  _Iterator current;\n+  reverse_iterator();\n+  reverse_iterator(reverse_iterator &__x) : current(__x.current) {}\n+  _Iterator base() { return current; }\n+  typename __iterator_traits<_Iterator>::reference operator*() {\n+    return *current;\n+  }\n+  reverse_iterator operator--() {\n+    ++current;\n+    return *this;\n+  }\n+};\n+template <typename _IteratorL, typename _IteratorR>\n+auto operator-(_IteratorL __x, _IteratorR __y) {\n+  return __y - __x.base();\n+}\n+struct __copy_move_backward {\n+  template <typename _BI1, typename _BI2>\n+  static _BI2 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) {\n+    typename __n = __last - __first;\n+    for (; __n > 0; --__n) {\n+      reverse_iterator __trans_tmp_8 = --__result;\n+      *__trans_tmp_8 = __copy_move_b___trans_tmp_9;\n+    }\n+    return __result;\n+  }\n+};\n+template <int, typename _BI1, typename _BI2>\n+inline _BI2 __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) {\n+  return __copy_move_backward::__copy_move_b(__first, __last, __result);\n+}\n+template <int _IsMove, typename _BI1, typename _BI2>\n+_BI2 __copy_move_backward_a1(_BI1 __last, _BI2 __result) {\n+  _BI1 __first;\n+  return __copy_move_backward_a2<_IsMove>(__first, __last, __result);\n+}\n+template <int _IsMove, typename _II, typename _OI>\n+void __copy_move_backward_a(_II, _OI __result) {\n+  reverse_iterator<unsigned char *> __trans_tmp_7 =\n+      __copy_move_backward_a1<_IsMove>(__trans_tmp_7, __result);\n+}\n+template <typename _BI1, typename _BI2>\n+void move_backward(_BI1 __first, _BI2 __result) {\n+  __copy_move_backward_a<true>(__first, __result);\n+}\n+reverse_iterator<unsigned char *> __rotate___first;\n+void __rotate() { move_backward(__rotate___first, __rotate___first); }"}]}