{"sha": "3f67ba6e957d9d03126c0c241f592c4a94ad7440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y2N2JhNmU5NTdkOWQwMzEyNmMwYzI0MWY1OTJjNGE5NGFkNzQ0MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-12-10T07:13:18Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2000-12-10T07:13:18Z"}, "message": "Richards changes to the closure code for alpha\n\nFrom-SVN: r38169", "tree": {"sha": "79170559bd34c678d6bd594b9a8884741a5f0cae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79170559bd34c678d6bd594b9a8884741a5f0cae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f67ba6e957d9d03126c0c241f592c4a94ad7440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f67ba6e957d9d03126c0c241f592c4a94ad7440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f67ba6e957d9d03126c0c241f592c4a94ad7440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f67ba6e957d9d03126c0c241f592c4a94ad7440/comments", "author": null, "committer": null, "parents": [{"sha": "bc38c7877529a30dc7fcd1b231041881c3d45a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc38c7877529a30dc7fcd1b231041881c3d45a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc38c7877529a30dc7fcd1b231041881c3d45a1e"}], "stats": {"total": 155, "additions": 130, "deletions": 25}, "files": [{"sha": "bd2e83ce05bcda4a616c5164c7a036bf991c4b26", "filename": "libffi/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f67ba6e957d9d03126c0c241f592c4a94ad7440/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f67ba6e957d9d03126c0c241f592c4a94ad7440/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=3f67ba6e957d9d03126c0c241f592c4a94ad7440", "patch": "@@ -1,4 +1,12 @@\n-2000-12-07 Dec  8 11:23:29 2000  Richard Henderson  <rth@redhat.com>\n+2000-12-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* src/alpha/ffi.c (ffi_call): Simplify struct return test.\n+\t(ffi_closure_osf_inner): Index rather than increment avalue\n+\tand arg_types.  Give ffi_closure_osf the raw return value type.\n+\t* src/alpha/osf.S (ffi_closure_osf): Handle return value type\n+\tpromotion.\n+\n+2000-12-07  Richard Henderson  <rth@redhat.com>\n \n \t* src/raw_api.c (ffi_translate_args): Fix typo.\n \t(ffi_prep_closure): Likewise."}, {"sha": "29292e6abe62ece0c6ccd18f39a05897408c5680", "filename": "libffi/src/alpha/ffi.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f67ba6e957d9d03126c0c241f592c4a94ad7440/libffi%2Fsrc%2Falpha%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f67ba6e957d9d03126c0c241f592c4a94ad7440/libffi%2Fsrc%2Falpha%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Falpha%2Fffi.c?ref=3f67ba6e957d9d03126c0c241f592c4a94ad7440", "patch": "@@ -70,7 +70,7 @@ ffi_call(ffi_cif *cif, void (*fn)(), void *rvalue, void **avalue)\n \n   /* If the return value is a struct and we don't have a return\n      value address then we need to make one.  */\n-  if (rvalue == NULL && cif->rtype->type == FFI_TYPE_STRUCT)\n+  if (rvalue == NULL && cif->flags == FFI_TYPE_STRUCT)\n     rvalue = alloca(cif->rtype->size);\n \n   /* Allocate the space for the arguments, plus 4 words of temp\n@@ -202,7 +202,7 @@ ffi_closure_osf_inner(ffi_closure *closure, void *rvalue, unsigned long *argp)\n   /* Grab the addresses of the arguments from the stack frame.  */\n   while (i < avn)\n     {\n-      switch ((*arg_types)->type)\n+      switch (arg_types[i]->type)\n \t{\n \tcase FFI_TYPE_SINT8:\n \tcase FFI_TYPE_UINT8:\n@@ -214,7 +214,7 @@ ffi_closure_osf_inner(ffi_closure *closure, void *rvalue, unsigned long *argp)\n \tcase FFI_TYPE_UINT64:\n \tcase FFI_TYPE_POINTER:\n \tcase FFI_TYPE_STRUCT:\n-\t  *avalue = &argp[argn];\n+\t  avalue[i] = &argp[argn];\n \t  break;\n \n \tcase FFI_TYPE_FLOAT:\n@@ -223,27 +223,27 @@ ffi_closure_osf_inner(ffi_closure *closure, void *rvalue, unsigned long *argp)\n \t      /* Floats coming from registers need conversion from double\n \t         back to float format.  */\n \t      *(float *)&argp[argn - 6] = *(double *)&argp[argn - 6];\n-\t      *avalue = &argp[argn - 6];\n+\t      avalue[i] = &argp[argn - 6];\n \t    }\n \t  else\n-\t    *avalue = &argp[argn];\n+\t    avalue[i] = &argp[argn];\n \t  break;\n \n \tcase FFI_TYPE_DOUBLE:\n-\t  *avalue = &argp[argn - (argn < 6 ? 6 : 0)];\n+\t  avalue[i] = &argp[argn - (argn < 6 ? 6 : 0)];\n \t  break;\n \n \tdefault:\n \t  FFI_ASSERT(0);\n \t}\n \n-      argn += ALIGN((*arg_types)->size, SIZEOF_ARG) / SIZEOF_ARG;\n-      i++, arg_types++, avalue++;\n+      argn += ALIGN(arg_types[i]->size, SIZEOF_ARG) / SIZEOF_ARG;\n+      i++;\n     }\n \n   /* Invoke the closure.  */\n   (closure->fun) (cif, rvalue, avalue, closure->user_data);\n \n-  /* Tell ffi_closure_osf what register to put the return value in.  */\n-  return cif->flags;\n+  /* Tell ffi_closure_osf how to perform return type promotions.  */\n+  return cif->rtype->type;\n }"}, {"sha": "fce089ac05d4f9ed51a8e539bb9ddf7862066f83", "filename": "libffi/src/alpha/osf.S", "status": "modified", "additions": 111, "deletions": 14, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f67ba6e957d9d03126c0c241f592c4a94ad7440/libffi%2Fsrc%2Falpha%2Fosf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f67ba6e957d9d03126c0c241f592c4a94ad7440/libffi%2Fsrc%2Falpha%2Fosf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Falpha%2Fosf.S?ref=3f67ba6e957d9d03126c0c241f592c4a94ad7440", "patch": "@@ -28,6 +28,7 @@\n #define LIBFFI_ASM\t\n #include <ffi.h>\n \n+\t.arch ev6\n \t.text\n \n /* ffi_call_osf (void *args, unsigned long bytes, unsigned flags,\n@@ -121,9 +122,9 @@ $retdouble:\n \t.ent\tffi_closure_osf\n ffi_closure_osf:\n \t.frame\t$30, 16*8, $26, 0\n-\t.mask\t0x4000000, -14*8\n+\t.mask\t0x4000000, -16*8\n \tldgp\t$29, 0($27)\n-\tsubq\t$30, 14*8, $30\n+\tsubq\t$30, 16*8, $30\n \tstq\t$26, 0($30)\n \t.prologue 1\n \n@@ -150,33 +151,129 @@ ffi_closure_osf:\n \tldq\t$26, 0($30)\n \n \t# Load up the return value in the proper type.\n-\tcmpeq\t$0, FFI_TYPE_INT, $1\n-\tbne\t$1, $loadint\n-\tcmpeq\t$0, FFI_TYPE_FLOAT, $2\n-\tbne\t$2, $loadfloat\n-\tcmpeq\t$18, FFI_TYPE_DOUBLE, $3\n-\tbne\t$3, $loaddouble\n+\tlda\t$1, $load_table\n+\ts4addq\t$0, $1, $1\n+\tldl\t$1, 0($1)\n+\taddq\t$1, $29, $1\n+\tjmp\t$31, ($1), $load_32\n+\n+\t.align 4\n+$load_none:\n+\taddq\t$30, 16*8, $30\n+\tret\n \n+\t.align 4\n+$load_float:\n+\tlds\t$f0, 16($30)\n+\tnop\n+\taddq\t$30, 16*8, $30\n+\tret\n+\n+\t.align 4\n+$load_double:\n+\tldt\t$f0, 16($30)\n+\tnop\n+\taddq\t$30, 16*8, $30\n+\tret\n+\n+\t.align 4\n+$load_u8:\n+#ifdef __alpha_bwx__\n+\tldbu\t$0, 16($30)\n+\tnop\n+#else\n+\tldq\t$0, 16($30)\n+\tand\t$0, 255, $0\n+#endif\n \taddq\t$30, 16*8, $30\n \tret\n \n-\t.align 3\n-$loadint:\n+\t.align 4\n+$load_s8:\n+#ifdef __alpha_bwx__\n+\tldbu\t$0, 16($30)\n+\tsextb\t$0, $0\n+#else\n \tldq\t$0, 16($30)\n+\tsll\t$0, 56, $0\n+\tsra\t$0, 56, $0\n+#endif\n+\taddq\t$30, 16*8, $30\n+\tret\n+\n+\t.align 4\n+$load_u16:\n+#ifdef __alpha_bwx__\n+\tldwu\t$0, 16($30)\n \tnop\n+#else\n+\tldq\t$0, 16($30)\n+\tzapnot\t$0, 3, $0\n+#endif\n \taddq\t$30, 16*8, $30\n \tret\n \n-$loadfloat:\n-\tlds\t$f0, 16($30)\n+\t.align 4\n+$load_s16:\n+#ifdef __alpha_bwx__\n+\tldwu\t$0, 16($30)\n+\tsextw\t$0, $0\n+#else\n+\tldq\t$0, 16($30)\n+\tsll\t$0, 48, $0\n+\tsra\t$0, 48, $0\n+#endif\n+\taddq\t$30, 16*8, $30\n+\tret\n+\n+\t.align 4\n+$load_32:\n+\tldl\t$0, 16($30)\n \tnop\n \taddq\t$30, 16*8, $30\n \tret\n \n-$loaddouble:\n-\tldt\t$f0, 16($30)\n+\t.align 4\n+$load_64:\n+\tldq\t$0, 16($30)\n \tnop\n \taddq\t$30, 16*8, $30\n \tret\n \n \t.end\tffi_closure_osf\n+\n+.section .rodata\n+$load_table:\n+\t.gprel32 $load_none\t# FFI_TYPE_VOID\n+\t.gprel32 $load_32\t# FFI_TYPE_INT\n+\t.gprel32 $load_float\t# FFI_TYPE_FLOAT\n+\t.gprel32 $load_double\t# FFI_TYPE_DOUBLE\n+\t.gprel32 $load_double\t# FFI_TYPE_LONGDOUBLE\n+\t.gprel32 $load_u8\t# FFI_TYPE_UINT8\n+\t.gprel32 $load_s8\t# FFI_TYPE_SINT8\n+\t.gprel32 $load_u16\t# FFI_TYPE_UINT16\n+\t.gprel32 $load_s16\t# FFI_TYPE_SINT16\n+\t.gprel32 $load_32\t# FFI_TYPE_UINT32\n+\t.gprel32 $load_32\t# FFI_TYPE_SINT32\n+\t.gprel32 $load_64\t# FFI_TYPE_UINT64\n+\t.gprel32 $load_64\t# FFI_TYPE_SINT64\n+\t.gprel32 $load_none\t# FFI_TYPE_STRUCT\n+\t.gprel32 $load_64\t# FFI_TYPE_POINTER\n+\n+/* Assert that the table above is in sync with ffi.h.  */\n+\n+#if\t   FFI_TYPE_FLOAT != 2\t\t\\\n+\t|| FFI_TYPE_DOUBLE != 3\t\t\\\n+\t|| FFI_TYPE_UINT8 != 5\t\t\\\n+\t|| FFI_TYPE_SINT8 != 6\t\t\\\n+\t|| FFI_TYPE_UINT16 != 7\t\t\\\n+\t|| FFI_TYPE_SINT16 != 8\t\t\\\n+\t|| FFI_TYPE_UINT32 != 9\t\t\\\n+\t|| FFI_TYPE_SINT32 != 10\t\\\n+\t|| FFI_TYPE_UINT64 != 11\t\\\n+\t|| FFI_TYPE_SINT64 != 12\t\\\n+\t|| FFI_TYPE_STRUCT != 13\t\\\n+\t|| FFI_TYPE_POINTER != 14\t\\\n+\t|| FFI_TYPE_LAST != 14\n+#error \"osf.S out of sync with ffi.h\"\n+#endif"}]}