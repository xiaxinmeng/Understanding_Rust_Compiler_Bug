{"sha": "b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI4MzRmYmQyMmY3MWNlNzY3OGRkZDUzOGIwZDU0NTVkNmU3Y2FiYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-22T16:47:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-22T16:47:20Z"}, "message": "[multiple changes]\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aux.adb, sem_aux.ads, sem_ch3.adb (Has_Unconstrained_Elements):\n\tMoved to sem_aux.adb.\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* vms_data.ads: Minor reformatting.\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: Document messages affected by -gnatd.E including\n\tthe new ones that relate to late definition of equality.\n\t* sem_ch6.adb (Check_Untagged_Equality): In Ada 2012 mode, if\n\tdebug flag -gnatd.E is set, then generate warnings rather than\n\terrors.\n\t(Check_Untagged_Equality): In earlier versions of Ada,\n\tgenerate warnings if Warn_On_Ada_2012_Incompatibility flag is set.\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Usage_Error): Output additional messages for\n\tunconstrained OUT parameters lacking an input dependency.\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch4.adb: Minor reformatting.\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* restrict.ads: Minor reformatting.\n\t* sem_res.adb (Resolve_Call): Check for SPARK_05 restriction that\n\tforbids a call from within a subprogram to the same subprogram.\n\n2014-01-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* a-stream.ads (Read_SEA, Write_SEA): New subprograms, optimized\n\tstream attributes for Stream_Element_Array.\n\t* a-stream.adb (Read_SEA, Write_SEA): Bodies for the above.\n\t* rtsfind.adb (Check_CRT): Do not reject a reference to an entity\n\tdefined in the current scope.\n\nFrom-SVN: r206929", "tree": {"sha": "e8cd596ba2f7074f976ffde7e506c2ce18d30798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8cd596ba2f7074f976ffde7e506c2ce18d30798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/comments", "author": null, "committer": null, "parents": [{"sha": "d4129bfa7c814dc1878c3256d34f721398617255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4129bfa7c814dc1878c3256d34f721398617255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4129bfa7c814dc1878c3256d34f721398617255"}], "stats": {"total": 434, "additions": 352, "deletions": 82}, "files": [{"sha": "eafe2bd30b4a80cfaff01989afbf1ba71b4ea104", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -1,3 +1,45 @@\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aux.adb, sem_aux.ads, sem_ch3.adb (Has_Unconstrained_Elements):\n+\tMoved to sem_aux.adb.\n+\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* vms_data.ads: Minor reformatting.\n+\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Document messages affected by -gnatd.E including\n+\tthe new ones that relate to late definition of equality.\n+\t* sem_ch6.adb (Check_Untagged_Equality): In Ada 2012 mode, if\n+\tdebug flag -gnatd.E is set, then generate warnings rather than\n+\terrors.\n+\t(Check_Untagged_Equality): In earlier versions of Ada,\n+\tgenerate warnings if Warn_On_Ada_2012_Incompatibility flag is set.\n+\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Usage_Error): Output additional messages for\n+\tunconstrained OUT parameters lacking an input dependency.\n+\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch4.adb: Minor reformatting.\n+\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* restrict.ads: Minor reformatting.\n+\t* sem_res.adb (Resolve_Call): Check for SPARK_05 restriction that\n+\tforbids a call from within a subprogram to the same subprogram.\n+\n+2014-01-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* a-stream.ads (Read_SEA, Write_SEA): New subprograms, optimized\n+\tstream attributes for Stream_Element_Array.\n+\t* a-stream.adb (Read_SEA, Write_SEA): Bodies for the above.\n+\t* rtsfind.adb (Check_CRT): Do not reject a reference to an entity\n+\tdefined in the current scope.\n+\n 2014-01-22  Robert Dewar  <dewar@adacore.com>\n \n \t* debug.adb, exp_ch4.adb, erroutc.adb: Minor reformatting."}, {"sha": "59f0a3ddbdbfea9c1694f93fdf39e44342caed9e", "filename": "gcc/ada/a-stream.adb", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fa-stream.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fa-stream.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stream.adb?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -0,0 +1,68 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                           A D A . S T R E A M S                          --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--             Copyright (C) 2013, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.IO_Exceptions;\n+\n+package body Ada.Streams is\n+\n+   --------------\n+   -- Read_SEA --\n+   --------------\n+\n+   procedure Read_SEA\n+     (S : access Root_Stream_Type'Class;\n+      V : out Stream_Element_Array)\n+   is\n+      Last : Stream_Element_Offset;\n+   begin\n+      Read (S.all, V, Last);\n+      if Last /= V'Last then\n+         raise Ada.IO_Exceptions.End_Error;\n+      end if;\n+   end Read_SEA;\n+\n+   ---------------\n+   -- Write_SEA --\n+   ---------------\n+\n+   procedure Write_SEA\n+     (S : access Root_Stream_Type'Class;\n+      V : Stream_Element_Array)\n+   is\n+   begin\n+      Write (S.all, V);\n+   end Write_SEA;\n+\n+end Ada.Streams;"}, {"sha": "75810f3dacd6a3ad5e7d219775b5022804fffe60", "filename": "gcc/ada/a-stream.ads", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fa-stream.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fa-stream.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stream.ads?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---                          A D A . S T R E A M S                           --\n+--                           A D A . S T R E A M S                          --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -66,4 +66,19 @@ private\n \n    type Root_Stream_Type is abstract tagged limited null record;\n \n+   --  Stream attributes for Stream_Element_Array: trivially call the\n+   --  corresponding stream primitive for the whole array, instead of doing\n+   --  so element by element.\n+\n+   procedure Read_SEA\n+     (S : access Root_Stream_Type'Class;\n+      V : out Stream_Element_Array);\n+\n+   procedure Write_SEA\n+     (S : access Root_Stream_Type'Class;\n+      V : Stream_Element_Array);\n+\n+   for Stream_Element_Array'Read use Read_SEA;\n+   for Stream_Element_Array'Write use Write_SEA;\n+\n end Ada.Streams;"}, {"sha": "251da34e6aff6de6d7d1f33e84376a3c728c060a", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -596,10 +596,16 @@ package body Debug is\n \n    --  d.E  Turn selected errors into warnings. This debug switch causes a\n    --       specific set of error messages into warnings. Setting this switch\n-   --       causes Opt.Error_To_Warning to be set to True. Right now the only\n-   --       error affected is the case of overlapping subprogram parameters\n-   --       which has become illegal in Ada 2012, but only generates a warning\n-   --       in earlier versions of Ada.\n+   --       causes Opt.Error_To_Warning to be set to True. The intention is\n+   --       that this be used for messages representing upwards incompatible\n+   --       changes to Ada 2012 that cause previously correct programs to be\n+   --       treated as illegal now. The following cases are affected:\n+   --\n+   --          Errors relating to overlapping subprogram parameters for cases\n+   --          other than IN OUT parameters to functions.\n+   --\n+   --          Errors relating to the new rules about not defining equality\n+   --          too late so that composition of equality can be assured.\n \n    --  d.F  Sets GNATprove_Mode to True. This allows debugging the frontend in\n    --       the special mode used by GNATprove."}, {"sha": "cef3167ea8ee9dd3af2d06819f716295eabd706b", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -254,7 +254,7 @@ package Restrict is\n      (Msg   : String;\n       N     : Node_Id;\n       Force : Boolean := False);\n-   --  Node N represents a construct not allowed in formal mode. If this is\n+   --  Node N represents a construct not allowed in SPARK_05 mode. If this is\n    --  a source node, or if the restriction is forced (Force = True), and\n    --  the SPARK_05 restriction is set, then an error is issued on N. Msg\n    --  is appended to the restriction failure message."}, {"sha": "2b25c9fdd9551949003f42579a200f2206ec7aa5", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -225,11 +225,18 @@ package body Rtsfind is\n       --  Entity is available\n \n       else\n-         --  If in No_Run_Time mode and entity is not in one of the\n-         --  specially permitted units, raise the exception.\n+         --  If in No_Run_Time mode and entity is neither in the current unit\n+         --  nor in one of the specially permitted units, raise the exception.\n \n          if No_Run_Time_Mode\n            and then not OK_No_Run_Time_Unit (U_Id)\n+\n+           --  If the entity being referenced is defined in the current scope,\n+           --  using it is always fine as such usage can never introduce any\n+           --  dependency on an additional unit.\n+           --  Why do we need to do this test ???\n+\n+           and then Scope (Eid) /= Current_Scope\n          then\n             Entity_Not_Defined (E);\n             raise RE_Not_Available;"}, {"sha": "5098d74f8d1aa0686e1573f4ca441b3dbb05ea25", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -624,6 +624,24 @@ package body Sem_Aux is\n       return Present (Get_Rep_Pragma (E, Nam1, Nam2, Check_Parents));\n    end Has_Rep_Pragma;\n \n+   --------------------------------\n+   -- Has_Unconstrained_Elements --\n+   --------------------------------\n+\n+   function Has_Unconstrained_Elements (T : Entity_Id) return Boolean is\n+      U_T : constant Entity_Id := Underlying_Type (T);\n+   begin\n+      if No (U_T) then\n+         return False;\n+      elsif Is_Record_Type (U_T) then\n+         return Has_Discriminants (U_T) and then not Is_Constrained (U_T);\n+      elsif Is_Array_Type (U_T) then\n+         return Has_Unconstrained_Elements (Component_Type (U_T));\n+      else\n+         return False;\n+      end if;\n+   end Has_Unconstrained_Elements;\n+\n    ---------------------\n    -- In_Generic_Body --\n    ---------------------"}, {"sha": "ed218d712a9318f823e9791865e958aae2ac7f6a", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -246,6 +246,10 @@ package Sem_Aux is\n    --  the given names then True is returned, otherwise False indicates that no\n    --  matching entry was found.\n \n+   function Has_Unconstrained_Elements (T : Entity_Id) return Boolean;\n+   --  True if T has discriminants and is unconstrained, or is an array type\n+   --  whose element type Has_Unconstrained_Elements.\n+\n    function In_Generic_Body (Id : Entity_Id) return Boolean;\n    --  Determine whether entity Id appears inside a generic body\n "}, {"sha": "671776ad217e4153fcf6af851fffbd3b4c9c49bd", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -2991,11 +2991,6 @@ package body Sem_Ch3 is\n       --  or a variant record type is encountered, Check_Restrictions is called\n       --  indicating the count is unknown.\n \n-      function Has_Unconstrained_Elements (T : Entity_Id) return Boolean;\n-      --  True if T has discriminants and is unconstrained, or is an array\n-      --  type whose element type Has_Unconstrained_Elements. Shouldn't this\n-      --  be in sem_util???\n-\n       -----------------\n       -- Count_Tasks --\n       -----------------\n@@ -3050,24 +3045,6 @@ package body Sem_Ch3 is\n          end if;\n       end Count_Tasks;\n \n-      --------------------------------\n-      -- Has_Unconstrained_Elements --\n-      --------------------------------\n-\n-      function Has_Unconstrained_Elements (T : Entity_Id) return Boolean is\n-         U_T : constant Entity_Id := Underlying_Type (T);\n-      begin\n-         if No (U_T) then\n-            return False;\n-         elsif Is_Record_Type (U_T) then\n-            return Has_Discriminants (U_T) and then not Is_Constrained (U_T);\n-         elsif Is_Array_Type (U_T) then\n-            return Has_Unconstrained_Elements (Component_Type (U_T));\n-         else\n-            return False;\n-         end if;\n-      end Has_Unconstrained_Elements;\n-\n    --  Start of processing for Analyze_Object_Declaration\n \n    begin"}, {"sha": "4bff4df47df15714f9e50a1d5482f6bc1a4cfb4f", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -1045,14 +1045,14 @@ package body Sem_Ch4 is\n            and then Ekind (Designated_Type (Etype (Nam))) = E_Subprogram_Type\n            and then\n              (not Name_Denotes_Function\n-                or else Nkind (N) = N_Procedure_Call_Statement\n-                or else\n-                  (Nkind (Parent (N)) /= N_Explicit_Dereference\n-                     and then Is_Entity_Name (Nam)\n-                     and then No (First_Formal (Entity (Nam)))\n-                     and then not\n-                       Is_Array_Type (Etype (Designated_Type (Etype (Nam))))\n-                     and then Present (Actuals)))\n+               or else Nkind (N) = N_Procedure_Call_Statement\n+               or else\n+                 (Nkind (Parent (N)) /= N_Explicit_Dereference\n+                   and then Is_Entity_Name (Nam)\n+                   and then No (First_Formal (Entity (Nam)))\n+                   and then not\n+                     Is_Array_Type (Etype (Designated_Type (Etype (Nam))))\n+                   and then Present (Actuals)))\n          then\n             Nam_Ent := Designated_Type (Etype (Nam));\n             Insert_Explicit_Dereference (Nam);"}, {"sha": "9793aa4e18834d5492c14de3bdb86966d2773496", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 116, "deletions": 39, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -193,7 +193,10 @@ package body Sem_Ch6 is\n    --  must appear before the type is frozen, and have the same visibility as\n    --  that of the type. This procedure checks that this rule is met, and\n    --  otherwise emits an error on the subprogram declaration and a warning\n-   --  on the earlier freeze point if it is easy to locate.\n+   --  on the earlier freeze point if it is easy to locate. In Ada 2012 mode,\n+   --  this routine outputs errors (or warnings if -gnatd.E is set). In earlier\n+   --  versions of Ada, warnings are output if Warn_On_Ada_2012_Incompatibility\n+   --  is set, otherwise the call has no effect.\n \n    procedure Enter_Overloaded_Entity (S : Entity_Id);\n    --  This procedure makes S, a new overloaded entity, into the first visible\n@@ -8198,63 +8201,140 @@ package body Sem_Ch6 is\n       Obj_Decl : Node_Id;\n \n    begin\n-      if Nkind (Decl) = N_Subprogram_Declaration\n-        and then Is_Record_Type (Typ)\n-        and then not Is_Tagged_Type (Typ)\n+      --  This check applies only if we have a subprogram declaration with a\n+      --  non-tagged record type.\n+\n+      if Nkind (Decl) /= N_Subprogram_Declaration\n+        or else not Is_Record_Type (Typ)\n+        or else Is_Tagged_Type (Typ)\n       then\n-         --  If the type is not declared in a package, or if we are in the\n-         --  body of the package or in some other scope, the new operation is\n-         --  not primitive, and therefore legal, though suspicious. If the\n-         --  type is a generic actual (sub)type, the operation is not primitive\n-         --  either because the base type is declared elsewhere.\n-\n-         if Is_Frozen (Typ) then\n-            if Ekind (Scope (Typ)) /= E_Package\n-              or else Scope (Typ) /= Current_Scope\n-            then\n-               null;\n+         return;\n+      end if;\n \n-            elsif Is_Generic_Actual_Type (Typ) then\n-               null;\n+      --  In Ada 2012 case, we will output errors or warnings depending on\n+      --  the setting of debug flag -gnatd.E.\n+\n+      if Ada_Version >= Ada_2012 then\n+         Error_Msg_Warn := Debug_Flag_Dot_EE;\n+\n+      --  In earlier versions of Ada, nothing to do unless we are warning on\n+      --  Ada 2012 incompatibilities (Warn_On_Ada_2012_Incompatibility set).\n+\n+      else\n+         if not Warn_On_Ada_2012_Compatibility then\n+            return;\n+         end if;\n+      end if;\n+\n+      --  Cases where the type has already been frozen\n \n-            elsif In_Package_Body (Scope (Typ)) then\n+      if Is_Frozen (Typ) then\n+\n+         --  If the type is not declared in a package, or if we are in the body\n+         --  of the package or in some other scope, the new operation is not\n+         --  primitive, and therefore legal, though suspicious. Should we\n+         --  generate a warning in this case ???\n+\n+         if Ekind (Scope (Typ)) /= E_Package\n+           or else Scope (Typ) /= Current_Scope\n+         then\n+            return;\n+\n+         --  If the type is a generic actual (sub)type, the operation is not\n+         --  primitive either because the base type is declared elsewhere.\n+\n+         elsif Is_Generic_Actual_Type (Typ) then\n+            return;\n+\n+         --  Here we have a definite error of declaration after freezing\n+\n+         else\n+            if Ada_Version >= Ada_2012 then\n                Error_Msg_NE\n-                 (\"equality operator must be declared \"\n-                   & \"before type& is frozen\", Eq_Op, Typ);\n-               Error_Msg_N\n-                 (\"\\move declaration to package spec\", Eq_Op);\n+                 (\"equality operator must be declared before type& is \"\n+                  & \"frozen (RM 4.5.2 (9.8)) (Ada 2012)<<\", Eq_Op, Typ);\n+\n+               --  In Ada 2012 mode with error turned to warning, output one\n+               --  more warning to warn that the equality operation may not\n+               --  compose. This is the consequence of ignoring the error.\n+\n+               if Error_Msg_Warn then\n+                  Error_Msg_N (\"\\equality operation may not compose??\", Eq_Op);\n+               end if;\n \n             else\n                Error_Msg_NE\n-                 (\"equality operator must be declared \"\n-                   & \"before type& is frozen\", Eq_Op, Typ);\n+                 (\"equality operator must be declared before type& is \"\n+                  & \"frozen (RM 4.5.2 (9.8)) (Ada 2012)?y?\", Eq_Op, Typ);\n+            end if;\n \n+            --  If we are in the package body, we could just move the\n+            --  declaration to the package spec, so add a message saying that.\n+\n+            if In_Package_Body (Scope (Typ)) then\n+               if Ada_Version >= Ada_2012 then\n+                  Error_Msg_N\n+                    (\"\\move declaration to package spec<<\", Eq_Op);\n+               else\n+                  Error_Msg_N\n+                    (\"\\move declaration to package spec (Ada 2012)?y?\", Eq_Op);\n+               end if;\n+\n+            --  Otherwise try to find the freezing point\n+\n+            else\n                Obj_Decl := Next (Parent (Typ));\n                while Present (Obj_Decl) and then Obj_Decl /= Decl loop\n                   if Nkind (Obj_Decl) = N_Object_Declaration\n                     and then Etype (Defining_Identifier (Obj_Decl)) = Typ\n                   then\n-                     Error_Msg_NE\n-                       (\"type& is frozen by declaration??\", Obj_Decl, Typ);\n-                     Error_Msg_N\n-                       (\"\\an equality operator cannot be declared after this \"\n-                         & \"point (RM 4.5.2 (9.8)) (Ada 2012))??\", Obj_Decl);\n+                     --  Freezing point, output warnings\n+\n+                     if Ada_Version >= Ada_2012 then\n+                        Error_Msg_NE\n+                          (\"type& is frozen by declaration??\", Obj_Decl, Typ);\n+                        Error_Msg_N\n+                          (\"\\an equality operator cannot be declared after \"\n+                           & \"this point??\",\n+                           Obj_Decl);\n+                     else\n+                        Error_Msg_NE\n+                          (\"type& is frozen by declaration (Ada 2012)?y?\",\n+                           Obj_Decl, Typ);\n+                        Error_Msg_N\n+                          (\"\\an equality operator cannot be declared after \"\n+                           & \"this point (Ada 2012)?y?\",\n+                           Obj_Decl);\n+                     end if;\n+\n                      exit;\n                   end if;\n \n                   Next (Obj_Decl);\n                end loop;\n             end if;\n+         end if;\n \n-         elsif not In_Same_List (Parent (Typ), Decl)\n-           and then not Is_Limited_Type (Typ)\n-         then\n+      --  Here if type is not frozen yet. It is illegal to have a primitive\n+      --  equality declared in the private part if the type is visible.\n \n-            --  This makes it illegal to have a primitive equality declared in\n-            --  the private part if the type is visible.\n+      elsif not In_Same_List (Parent (Typ), Decl)\n+        and then not Is_Limited_Type (Typ)\n+      then\n+         --  Shouldn't we give an RM reference here???\n \n-            Error_Msg_N (\"equality operator appears too late\", Eq_Op);\n+         if Ada_Version >= Ada_2012 then\n+            Error_Msg_N\n+              (\"equality operator appears too late<<\", Eq_Op);\n+         else\n+            Error_Msg_N\n+              (\"equality operator appears too late (Ada 2012)?y?\", Eq_Op);\n          end if;\n+\n+      --  No error detected\n+\n+      else\n+         return;\n       end if;\n    end Check_Untagged_Equality;\n \n@@ -10796,10 +10876,7 @@ package body Sem_Ch6 is\n            and then not Is_Dispatching_Operation (S)\n          then\n             Make_Inequality_Operator (S);\n-\n-            if Ada_Version >= Ada_2012 then\n-               Check_Untagged_Equality (S);\n-            end if;\n+            Check_Untagged_Equality (S);\n          end if;\n    end New_Overloaded_Entity;\n "}, {"sha": "555a7887ff6e3080f83211918f3069d289a02612", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -1114,11 +1114,57 @@ package body Sem_Prag is\n          -----------------\n \n          procedure Usage_Error (Item : Node_Id; Item_Id : Entity_Id) is\n+            Typ : constant Entity_Id := Etype (Item_Id);\n+\n          begin\n+            --  Input case\n+\n             if Is_Input then\n                Error_Msg_NE\n                  (\"item & must appear in at least one input list of aspect \"\n                   & \"Depends\", Item, Item_Id);\n+\n+               --  Case of OUT parameter for which Is_Input is set\n+\n+               if Nkind (Item) = N_Defining_Identifier\n+                 and then Ekind (Item) = E_Out_Parameter\n+               then\n+                  --  One case is an unconstrained array where the bounds\n+                  --  must be read, if we have this case, output a message\n+                  --  indicating why the OUT parameter is read.\n+\n+                  if Is_Array_Type (Typ)\n+                    and then not Is_Constrained (Typ)\n+                  then\n+                     Error_Msg_NE\n+                       (\"\\& is an unconstrained array type, so bounds must be \"\n+                        & \"read\", Item, Typ);\n+\n+                  --  Another case is an unconstrained discriminated record\n+                  --  type where the constrained flag must be read (and if\n+                  --  set, the discriminants). Again output a message.\n+\n+                  elsif Is_Record_Type (Typ)\n+                    and then Has_Discriminants (Typ)\n+                    and then not Is_Constrained (Typ)\n+                  then\n+                     Error_Msg_NE\n+                       (\"\\& is an unconstrained discriminated record type\",\n+                        Item, Typ);\n+                     Error_Msg_N\n+                       (\"\\constrained flag and possible discriminants must be \"\n+                        & \"read\", Item);\n+\n+                  --  Not clear if there are other cases. Anyway, we will\n+                  --  simply ignore any other cases.\n+\n+                  else\n+                     null;\n+                  end if;\n+               end if;\n+\n+            --  Output case\n+\n             else\n                Error_Msg_NE\n                  (\"item & must appear in exactly one output list of aspect \""}, {"sha": "9289971d0f86f05bf178167bfb6deef1ed2f12f0", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -5279,8 +5279,7 @@ package body Sem_Res is\n       is\n          Subp_Alias : constant Entity_Id := Alias (S);\n       begin\n-         return S = E\n-           or else (Present (Subp_Alias) and then Subp_Alias = E);\n+         return S = E or else (Present (Subp_Alias) and then Subp_Alias = E);\n       end Same_Or_Aliased_Subprograms;\n \n    --  Start of processing for Resolve_Call\n@@ -5630,6 +5629,16 @@ package body Sem_Res is\n       if Comes_From_Source (N) then\n          Scop := Current_Scope;\n \n+         --  Check violation of SPARK_05 restriction which does not permit\n+         --  a subprogram body to contain a call to the subprogram directly.\n+\n+         if Restriction_Check_Required (SPARK_05)\n+           and then Same_Or_Aliased_Subprograms (Nam, Scop)\n+         then\n+            Check_SPARK_Restriction\n+              (\"subprogram may not contain direct call to itself\", N);\n+         end if;\n+\n          --  Issue warning for possible infinite recursion in the absence\n          --  of the No_Recursion restriction.\n "}, {"sha": "6d81c4811f480002af13c4f2ef1794b4a54b7f6b", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2834fbd22f71ce7678ddd538b0d5455d6e7caba/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=b2834fbd22f71ce7678ddd538b0d5455d6e7caba", "patch": "@@ -3368,7 +3368,8 @@ package VMS_Data is\n    --                             switch -gnat??. See below for list of these\n    --                             equivalent switch names.\n    --\n-   --   NOTAG_WARNINGS          Turns off warning tag output (default setting).\n+   --   NOTAG_WARNINGS            Turns off warning tag output (default\n+   --                             setting).\n    --\n    --   The remaining entries control individual warning categories. If one\n    --   of these options is preceded by NO (e.g. NOAVOID_GAPS), then the"}]}