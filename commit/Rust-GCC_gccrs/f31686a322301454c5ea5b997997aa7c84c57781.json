{"sha": "f31686a322301454c5ea5b997997aa7c84c57781", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMxNjg2YTMyMjMwMTQ1NGM1ZWE1Yjk5Nzk5N2FhN2M4NGM1Nzc4MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-09-22T05:09:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-09-22T05:09:32Z"}, "message": "Revert DECL_SOURCE_LOCATION -> TREE_LOCUS change.\n\nFrom-SVN: r71641", "tree": {"sha": "d942bc168b4a8f91e17acf863e1d2091ff773b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d942bc168b4a8f91e17acf863e1d2091ff773b6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f31686a322301454c5ea5b997997aa7c84c57781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f31686a322301454c5ea5b997997aa7c84c57781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f31686a322301454c5ea5b997997aa7c84c57781", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f31686a322301454c5ea5b997997aa7c84c57781/comments", "author": null, "committer": null, "parents": [{"sha": "0f7fcd6a40a237b634e0f93f1206724add7354d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7fcd6a40a237b634e0f93f1206724add7354d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f7fcd6a40a237b634e0f93f1206724add7354d3"}], "stats": {"total": 373, "additions": 201, "deletions": 172}, "files": [{"sha": "0b9c8e60610d99a42d3f6abf62287c34b70aaae6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1,3 +1,11 @@\n+2003-09-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree.h c-aux-info.c, c-decl.c, c-parse.in, coverage.c, dbxout.c, \n+\tdiagnostic.c, dwarf2out.c, dwarfout.c, function.c, integrate.c,\n+\tprint-tree.c, stmt.c, toplev.c, tree-dump.c, tree-inline.c,\n+\ttree-optimize.c, tree.c, tree.def, xcoffout.c, config/alpha/alpha.c,\n+\tconfig/mips/mips.c, doc/c-tree.texi, objc/objc-act.c: Revert.\n+\n 2003-09-21  Richard Henderson  <rth@redhat.com>\n \n \t* tree.h (TREE_LOCUS): Rename from DECL_SOURCE_LOCATION; make const."}, {"sha": "c84af19d0d60e6b7d7c44beaeb5cbc992d06f357", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1,3 +1,7 @@\n+2003-09-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* trans.c, utils.c: Revert.\n+\n 2003-09-21  Richard Henderson  <rth@redhat.com>\n \n \t* trans.c, utils.c: Update for DECL_SOURCE_LOCATION rename and"}, {"sha": "8e6f9ac4e497c93ceb64154013cb8e358e427d42", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -2611,7 +2611,7 @@ tree_transform (gnat_node)\n \t   the body so that the line number notes are written \n \t   correctly.  */\n \tset_lineno (gnat_node, 0);\n-\tset_tree_locus (gnu_subprog_decl, input_location);\n+\tDECL_SOURCE_LOCATION (gnu_subprog_decl) = input_location;\n \n \tbegin_subprog_body (gnu_subprog_decl);\n \tset_lineno (gnat_node, 1);\n@@ -5333,7 +5333,7 @@ build_unit_elab (gnat_unit, body_p, gnu_elab_list)\n       {\n \ttree lhs = TREE_PURPOSE (gnu_elab_list);\n \n-\tinput_location = TREE_LOCUS (lhs);\n+\tinput_location = DECL_SOURCE_LOCATION (lhs);\n \n \t/* If LHS has a padded type, convert it to the unpadded type\n \t   so the assignment is done properly.  */"}, {"sha": "186b0fdb175ee8fb724c53fd67ba43bb581c9d6b", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1655,9 +1655,9 @@ create_label_decl (label_name)\n {\n   tree label_decl = build_decl (LABEL_DECL, label_name, void_type_node);\n \n-  DECL_CONTEXT (label_decl) = current_function_decl;\n-  DECL_MODE (label_decl) = VOIDmode;\n-  set_tree_locus (label_decl, input_location);\n+  DECL_CONTEXT (label_decl)     = current_function_decl;\n+  DECL_MODE (label_decl)        = VOIDmode;\n+  DECL_SOURCE_LOCATION (label_decl) = input_location;\n \n   return label_decl;\n }"}, {"sha": "e785ade2239c7971abdddd2fa51dbaa0d3b9fb50", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -569,8 +569,8 @@ gen_aux_info_record (tree fndecl, int is_definition, int is_implicit,\n       /* Write the actual line of auxiliary info.  */\n \n       fprintf (aux_info_file, \"/* %s:%d:%c%c */ %s;\",\n-\t       TREE_FILENAME (fndecl),\n-\t       TREE_LINENO (fndecl),\n+\t       DECL_SOURCE_FILE (fndecl),\n+\t       DECL_SOURCE_LINE (fndecl),\n \t       (is_implicit) ? 'I' : (is_prototyped) ? 'N' : 'O',\n \t       (is_definition) ? 'F' : 'C',\n \t       gen_decl (fndecl, is_definition, ansi));"}, {"sha": "db35f9a9ea9cf127f400d724fc450ea4b57cdb11", "filename": "gcc/c-decl.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -905,7 +905,8 @@ duplicate_decls (tree newdecl, tree olddecl, int different_binding_level,\n \t  return 0;\n \t}\n     }\n-  else if (TREE_CODE (olddecl) == FUNCTION_DECL && !TREE_LOCUS_SET_P (olddecl))\n+  else if (TREE_CODE (olddecl) == FUNCTION_DECL\n+\t   && DECL_SOURCE_LINE (olddecl) == 0)\n     {\n       /* A function declaration for a predeclared function\n \t that isn't actually built in.  */\n@@ -1174,7 +1175,7 @@ duplicate_decls (tree newdecl, tree olddecl, int different_binding_level,\n     }\n \n   /* Optionally warn about more than one declaration for the same name.  */\n-  if (errmsg == 0 && warn_redundant_decls && TREE_LOCUS_SET_P (olddecl)\n+  if (errmsg == 0 && warn_redundant_decls && DECL_SOURCE_LINE (olddecl) != 0\n       /* Don't warn about a function declaration\n \t followed by a definition.  */\n       && !(TREE_CODE (newdecl) == FUNCTION_DECL && DECL_INITIAL (newdecl) != 0\n@@ -1271,7 +1272,10 @@ duplicate_decls (tree newdecl, tree olddecl, int different_binding_level,\n \t information so that meaningful diagnostics can be given.  */\n       if (DECL_INITIAL (newdecl) == 0 && DECL_INITIAL (olddecl) != 0\n \t  && ! different_binding_level)\n-\tcopy_tree_locus (newdecl, olddecl);\n+\t{\n+\t  DECL_SOURCE_LINE (newdecl) = DECL_SOURCE_LINE (olddecl);\n+\t  DECL_SOURCE_FILE (newdecl) = DECL_SOURCE_FILE (olddecl);\n+\t}\n \n       /* Merge the unused-warning information.  */\n       if (DECL_IN_SYSTEM_HEADER (olddecl))\n@@ -1521,7 +1525,7 @@ warn_if_shadowing (tree x, tree old)\n       /* Shadow warnings not wanted?  */\n       || !warn_shadow\n       /* No shadow warnings for internally generated vars.  */\n-      || !TREE_LOCUS_SET_P (x)\n+      || DECL_SOURCE_LINE (x) == 0\n       /* No shadow warnings for vars made for inlining.  */\n       || DECL_FROM_INLINE (x)\n       /* Don't warn about the parm names in function declarator\n@@ -1589,7 +1593,7 @@ warn_if_shadowing (tree x, tree old)\n static void\n clone_underlying_type (tree x)\n {\n-  if (!TREE_LOCUS_SET_P (x))\n+  if (DECL_SOURCE_LINE (x) == 0)\n     {\n       if (TYPE_NAME (TREE_TYPE (x)) == 0)\n \tTYPE_NAME (TREE_TYPE (x)) = x;\n@@ -1944,7 +1948,7 @@ make_label (tree name, location_t location)\n \n   DECL_CONTEXT (label) = current_function_decl;\n   DECL_MODE (label) = VOIDmode;\n-  set_tree_locus (label, location);\n+  DECL_SOURCE_LOCATION (label) = location;\n \n   return label;\n }\n@@ -1991,7 +1995,7 @@ lookup_label (tree name)\n \t location to point here, for better diagnostics if it\n \t turns out not to have been defined.  */\n       if (!TREE_USED (label))\n-\tset_tree_locus (label, input_location);\n+\tDECL_SOURCE_LOCATION (label) = input_location;\n       return label;\n     }\n \n@@ -2070,7 +2074,7 @@ define_label (location_t location, tree name)\n       /* The label has been used or declared already in this function,\n \t but not defined.  Update its location to point to this\n \t definition.  */\n-      set_tree_locus (label, location);\n+      DECL_SOURCE_LOCATION (label) = location;\n     }\n   else\n     {\n@@ -5458,7 +5462,7 @@ start_function (tree declspecs, tree declarator, tree attributes)\n       && TYPE_ARG_TYPES (TREE_TYPE (decl1)) == 0)\n     {\n       TREE_TYPE (decl1) = TREE_TYPE (old_decl);\n-      current_function_prototype_locus = TREE_LOCUS (old_decl);\n+      current_function_prototype_locus = DECL_SOURCE_LOCATION (old_decl);\n     }\n \n   /* Optionally warn of old-fashioned def with no previous prototype.  */\n@@ -5751,7 +5755,7 @@ store_parm_decls_oldstyle (void)\n \t{\n \t  decl = build_decl (PARM_DECL, TREE_VALUE (parm), integer_type_node);\n \t  DECL_ARG_TYPE (decl) = TREE_TYPE (decl);\n-\t  copy_tree_locus (decl, fndecl);\n+\t  DECL_SOURCE_LOCATION (decl) = DECL_SOURCE_LOCATION (fndecl);\n \t  pushdecl (decl);\n \n \t  if (flag_isoc99)"}, {"sha": "bb9cc1a77032daf97bc80d82c39a805be1bb76f4", "filename": "gcc/c-parse.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -414,7 +414,7 @@ fndef:\n \t\t    YYERROR1;\n \t\t}\n \t  old_style_parm_decls save_location\n-\t\t{ set_tree_locus (current_function_decl, $6);\n+\t\t{ DECL_SOURCE_LOCATION (current_function_decl) = $6;\n \t\t  store_parm_decls (); }\n \t  compstmt_or_error\n \t\t{ finish_function ();\n@@ -427,7 +427,7 @@ fndef:\n \t\t    YYERROR1;\n \t\t}\n \t  old_style_parm_decls save_location\n-\t\t{ set_tree_locus (current_function_decl, $6);\n+\t\t{ DECL_SOURCE_LOCATION (current_function_decl) = $6;\n \t\t  store_parm_decls (); }\n \t  compstmt_or_error\n \t\t{ finish_function ();\n@@ -440,7 +440,7 @@ fndef:\n \t\t    YYERROR1;\n \t\t}\n \t  old_style_parm_decls save_location\n-\t\t{ set_tree_locus (current_function_decl, $5);\n+\t\t{ DECL_SOURCE_LOCATION (current_function_decl) = $5;\n \t\t  store_parm_decls (); }\n \t  compstmt_or_error\n \t\t{ finish_function ();\n@@ -1563,7 +1563,7 @@ nested_function:\n \t\t}\n \t   old_style_parm_decls save_location\n \t\t{ tree decl = current_function_decl;\n-\t\t  set_tree_locus (decl, $4);\n+\t\t  DECL_SOURCE_LOCATION (decl) = $4;\n \t\t  store_parm_decls (); }\n /* This used to use compstmt_or_error.\n    That caused a bug with input `f(g) int g {}',\n@@ -1594,7 +1594,7 @@ notype_nested_function:\n \t\t}\n \t  old_style_parm_decls save_location\n \t\t{ tree decl = current_function_decl;\n-\t\t  set_tree_locus (decl, $4);\n+\t\t  DECL_SOURCE_LOCATION (decl) = $4;\n \t\t  store_parm_decls (); }\n /* This used to use compstmt_or_error.\n    That caused a bug with input `f(g) int g {}',"}, {"sha": "72d01af2f153595d10c2a053274000f5cf4b1a09", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -7349,11 +7349,13 @@ alpha_start_function (FILE *file, const char *fnname,\n   if (write_symbols == SDB_DEBUG)\n     {\n #ifdef ASM_OUTPUT_SOURCE_FILENAME\n-      ASM_OUTPUT_SOURCE_FILENAME (file, TREE_FILENAME (current_function_decl));\n+      ASM_OUTPUT_SOURCE_FILENAME (file,\n+\t\t\t\t  DECL_SOURCE_FILE (current_function_decl));\n #endif\n #ifdef ASM_OUTPUT_SOURCE_LINE\n       if (debug_info_level != DINFO_LEVEL_TERSE)\n-        ASM_OUTPUT_SOURCE_LINE (file, TREE_LINENO (current_function_decl), 0);\n+        ASM_OUTPUT_SOURCE_LINE (file,\n+\t\t\t\tDECL_SOURCE_LINE (current_function_decl), 0);\n #endif\n     }\n "}, {"sha": "8bd2139d9efbd54b0bf1928f95143272d044b1db", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -6507,11 +6507,11 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n      need the source filename more than once in the file, beyond what is\n      emitted by the debug information.  */\n   if (!TARGET_GAS)\n-    ASM_OUTPUT_SOURCE_FILENAME (file, TREE_FILENAME (current_function_decl));\n+    ASM_OUTPUT_SOURCE_FILENAME (file, DECL_SOURCE_FILE (current_function_decl));\n \n #ifdef SDB_DEBUGGING_INFO\n   if (debug_info_level != DINFO_LEVEL_TERSE && write_symbols == SDB_DEBUG)\n-    ASM_OUTPUT_SOURCE_LINE (file, TREE_LINENO (current_function_decl), 0);\n+    ASM_OUTPUT_SOURCE_LINE (file, DECL_SOURCE_LINE (current_function_decl), 0);\n #endif\n \n   /* In mips16 mode, we may need to generate a 32 bit to handle"}, {"sha": "e6f4129dd79011e368cd01ea477d1d2503e9b04a", "filename": "gcc/coverage.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -410,9 +410,9 @@ checksum_string (unsigned chksum, const char *string)\n static unsigned\n compute_checksum (void)\n {\n-  unsigned chksum = TREE_LINENO (current_function_decl);\n+  unsigned chksum = DECL_SOURCE_LINE (current_function_decl);\n \n-  chksum = checksum_string (chksum, TREE_FILENAME (current_function_decl));\n+  chksum = checksum_string (chksum, DECL_SOURCE_FILE (current_function_decl));\n   chksum = checksum_string\n     (chksum, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl)));\n \n@@ -432,8 +432,8 @@ coverage_begin_output (void)\n \n   if (!bbg_function_announced)\n     {\n-      const char *file = TREE_FILENAME (current_function_decl);\n-      unsigned line = TREE_LINENO (current_function_decl);\n+      const char *file = DECL_SOURCE_FILE (current_function_decl);\n+      unsigned line = DECL_SOURCE_LINE (current_function_decl);\n       unsigned long offset;\n \n       if (!bbg_file_opened)"}, {"sha": "7f85eaf9c793c5d4ff9a9f49d01e78962f94da20", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1,3 +1,8 @@\n+2003-09-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* class.c, cp-tree.h, decl.c, decl2.c, error.c, init.c,\n+\tmethod.c, optimize.c, pt.c, semantics.c, tree.c: Revert.\n+\n 2003-09-21  Richard Henderson  <rth@redhat.com>\n \n \t* class.c, cp-tree.h, decl.c, decl2.c, error.c, init.c,"}, {"sha": "17ff0e49674d5b0c1ad100651ff204d863941c59", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -5212,7 +5212,7 @@ finish_struct (tree t, tree attributes)\n \n   /* Nadger the current location so that diagnostics point to the start of\n      the struct, not the end.  */\n-  input_location = TREE_LOCUS (TYPE_NAME (t));\n+  input_location = DECL_SOURCE_LOCATION (TYPE_NAME (t));\n \n   if (processing_template_decl)\n     {"}, {"sha": "ef38d5565d801b43e0f1864b2873fba27a175c14", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -390,7 +390,7 @@ typedef enum cp_id_kind\n /* The IDENTIFIER_VALUE is the value of the IDENTIFIER_BINDING, or\n    NULL_TREE if there is no binding.  */\n #define IDENTIFIER_VALUE(NODE)\t\t\t\\\n-  (IDENTIFIER_BINDING (NODE) ? IDENTIFIER_BINDING (NODE)->value : NULL_TREE)\n+  (IDENTIFIER_BINDING (NODE) ? IDENTIFIER_BINDING (NODE)->value : NULL)\n \n /* If IDENTIFIER_CLASS_VALUE is set, then NODE is bound in the current\n    class, and IDENTIFIER_CLASS_VALUE is the value binding.  This is"}, {"sha": "892affacc82092635fe32b51ef8a69f034d6f085", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1787,7 +1787,7 @@ print_binding_level (struct cp_binding_level* lvl)\n \t    continue;\n \t  if (no_print_builtins\n \t      && (TREE_CODE (t) == TYPE_DECL)\n-\t      && (!strcmp (TREE_FILENAME (t), \"<built-in>\")))\n+\t      && (!strcmp (DECL_SOURCE_FILE (t),\"<built-in>\")))\n \t    continue;\n \n \t  /* Function decls tend to have longer names.  */\n@@ -3153,8 +3153,9 @@ duplicate_decls (tree newdecl, tree olddecl)\n       if (DECL_INITIAL (DECL_TEMPLATE_RESULT (olddecl)) == NULL_TREE\n \t  && DECL_INITIAL (DECL_TEMPLATE_RESULT (newdecl)) != NULL_TREE)\n \t{\n-\t  copy_tree_locus (olddecl, newdecl);\n-\t  copy_tree_locus (DECL_TEMPLATE_RESULT (olddecl), newdecl);\n+\t  DECL_SOURCE_LOCATION (olddecl) \n+\t    = DECL_SOURCE_LOCATION (DECL_TEMPLATE_RESULT (olddecl))\n+\t    = DECL_SOURCE_LOCATION (newdecl);\n \t}\n \n       return 1;\n@@ -3194,13 +3195,13 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t\t\t\t\t\t\t TYPE_RAISES_EXCEPTIONS (oldtype));\n \n \t  if ((pedantic || ! DECL_IN_SYSTEM_HEADER (olddecl))\n-\t      && TREE_LOCUS_SET_P (olddecl)\n+\t      && DECL_SOURCE_LINE (olddecl) != 0\n \t      && flag_exceptions\n \t      && !comp_except_specs (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (newdecl)),\n \t                             TYPE_RAISES_EXCEPTIONS (TREE_TYPE (olddecl)), 1))\n \t    {\n \t      error (\"declaration of `%F' throws different exceptions\",\n-\t\t     newdecl);\n+\t\t\tnewdecl);\n \t      cp_error_at (\"than previous declaration `%F'\", olddecl);\n \t    }\n \t}\n@@ -3231,7 +3232,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t  && DECL_INITIAL (olddecl) != NULL_TREE)\n \t{\n \t  DECL_INITIAL (newdecl) = DECL_INITIAL (olddecl);\n-\t  copy_tree_locus (newdecl, olddecl);\n+\t  DECL_SOURCE_LOCATION (newdecl) = DECL_SOURCE_LOCATION (olddecl);\n \t  if (CAN_HAVE_FULL_LANG_DECL_P (newdecl)\n \t      && DECL_LANG_SPECIFIC (newdecl)\n \t      && DECL_LANG_SPECIFIC (olddecl))\n@@ -3700,7 +3701,7 @@ pushdecl (tree x)\n       if (TREE_CODE (x) == TYPE_DECL)\n \t{\n \t  tree type = TREE_TYPE (x);\n-\t  if (!TREE_LOCUS_SET_P (x))\n+\t  if (DECL_SOURCE_LINE (x) == 0)\n             {\n \t      if (TYPE_NAME (type) == 0)\n \t        TYPE_NAME (type) = x;\n@@ -4074,7 +4075,7 @@ pushdecl_class_level (tree x)\n       for (f = TYPE_FIELDS (TREE_TYPE (x)); f; f = TREE_CHAIN (f))\n \t{\n \t  location_t save_location = input_location;\n-\t  input_location = TREE_LOCUS (f);\n+\t  input_location = DECL_SOURCE_LOCATION (f);\n \t  if (!pushdecl_class_level (f))\n \t    is_valid = false;\n \t  input_location = save_location;\n@@ -4519,7 +4520,7 @@ make_label_decl (tree id, int local_p)\n \n   /* Say where one reference is to the label, for the sake of the\n      error if it is not defined.  */\n-  set_tree_locus (decl, input_location);\n+  DECL_SOURCE_LOCATION (decl) = input_location;\n \n   /* Record the fact that this identifier is bound to this label.  */\n   SET_IDENTIFIER_LABEL_VALUE (id, decl);\n@@ -4830,7 +4831,7 @@ define_label (location_t location, tree name)\n       /* Mark label as having been defined.  */\n       DECL_INITIAL (decl) = error_mark_node;\n       /* Say where in the source.  */\n-      set_tree_locus (decl, location);\n+      DECL_SOURCE_LOCATION (decl) = location;\n       if (ent)\n \t{\n \t  ent->names_in_scope = current_binding_level->names;"}, {"sha": "b1ee970464e0c59c07619cac162e39147a1b817e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -2240,7 +2240,7 @@ start_static_initialization_or_destruction (tree decl, int initp)\n      where DECL was declared so that error-messages make sense, and so\n      that the debugger will show somewhat sensible file and line\n      information.  */\n-  input_location = TREE_LOCUS (decl);\n+  input_location = DECL_SOURCE_LOCATION (decl);\n \n   /* Because of:\n "}, {"sha": "a10dcf6a87611506e967a23e9b31584fd3e1c020", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1959,7 +1959,7 @@ location_of (tree t)\n   else if (TREE_CODE (t) == OVERLOAD)\n     t = OVL_FUNCTION (t);\n   \n-  return TREE_LOCUS (t);\n+  return DECL_SOURCE_LOCATION (t);\n }\n \n /* Now the interfaces from error et al to dump_type et al. Each takes an"}, {"sha": "ace82cdc39f96fefc8cb138ecd3e62785671e60a", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -2414,9 +2414,9 @@ create_temporary_var (tree type)\n   decl = build_decl (VAR_DECL, NULL_TREE, type);\n   TREE_USED (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n+  DECL_SOURCE_LOCATION (decl) = input_location;\n   DECL_IGNORED_P (decl) = 1;\n   DECL_CONTEXT (decl) = current_function_decl;\n-  set_tree_locus (decl, input_location);\n \n   return decl;\n }"}, {"sha": "52770042bee66cdf7764069eb59966abe49cc50b", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -719,7 +719,7 @@ synthesize_method (tree fndecl)\n      where the attempt to generate the function occurs, giving the\n      user a hint as to why we are attempting to generate the\n      function.  */\n-  set_tree_locus (fndecl, input_location);\n+  DECL_SOURCE_LOCATION (fndecl) = input_location;\n \n   interface_unknown = 1;\n   start_function (NULL_TREE, fndecl, NULL_TREE, SF_DEFAULT | SF_PRE_PARSED);"}, {"sha": "2b7df6c52440a9e559695314f1d470f572145579", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -109,7 +109,7 @@ update_cloned_parm (tree parm, tree cloned_parm)\n   \n   /* The name may have changed from the declaration.  */\n   DECL_NAME (cloned_parm) = DECL_NAME (parm);\n-  copy_tree_locus (cloned_parm, parm);\n+  DECL_SOURCE_LOCATION (cloned_parm) = DECL_SOURCE_LOCATION (parm);\n }\n \n /* FN is a function that has a complete body.  Clone the body as\n@@ -146,7 +146,7 @@ maybe_clone_body (tree fn)\n       splay_tree decl_map;\n \n       /* Update CLONE's source position information to match FN's.  */\n-      copy_tree_locus (clone, fn);\n+      DECL_SOURCE_LOCATION (clone) = DECL_SOURCE_LOCATION (fn);\n       DECL_INLINE (clone) = DECL_INLINE (fn);\n       DECL_DECLARED_INLINE_P (clone) = DECL_DECLARED_INLINE_P (fn);\n       DECL_COMDAT (clone) = DECL_COMDAT (fn);"}, {"sha": "12baea14a33b0711ba565fdcbfd462f1b6447f29", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -966,9 +966,10 @@ register_specialization (tree spec, tree tmpl, tree args)\n \t      else if (DECL_TEMPLATE_SPECIALIZATION (fn))\n \t\t{\n \t\t  if (!duplicate_decls (spec, fn) && DECL_INITIAL (spec))\n-\t\t    /* Dup decl failed, but this is a new definition.  Set the\n-\t\t       line number so any errors match this new definition.  */\n-\t\t    copy_tree_locus (fn, spec);\n+\t\t    /* Dup decl failed, but this is a new\n+\t\t       definition. Set the line number so any errors\n+\t\t       match this new definition.  */\n+\t\t    DECL_SOURCE_LOCATION (fn) = DECL_SOURCE_LOCATION (spec);\n \t\t  \n \t\t  return fn;\n \t\t}\n@@ -1782,8 +1783,9 @@ check_explicit_specialization (tree declarator,\n \t      DECL_INITIAL (DECL_TEMPLATE_RESULT (tmpl)) = NULL_TREE;\n \t      if (have_def)\n \t\t{\n-\t\t  copy_tree_locus (tmpl, decl);\n-\t\t  copy_tree_locus (DECL_TEMPLATE_RESULT (tmpl), decl);\n+\t\t  DECL_SOURCE_LOCATION (tmpl) = DECL_SOURCE_LOCATION (decl);\n+\t\t  DECL_SOURCE_LOCATION (DECL_TEMPLATE_RESULT (tmpl))\n+\t\t    = DECL_SOURCE_LOCATION (decl);\n \t\t}\n \t      return tmpl;\n \t    }\n@@ -4253,7 +4255,8 @@ lookup_template_class (tree d1,\n \t  type_decl = create_implicit_typedef (DECL_NAME (template), t);\n \t  DECL_CONTEXT (type_decl) = TYPE_CONTEXT (t);\n \t  TYPE_STUB_DECL (t) = type_decl;\n-\t  copy_tree_locus (type_decl, TYPE_STUB_DECL (template_type));\n+\t  DECL_SOURCE_LOCATION (type_decl) \n+\t    = DECL_SOURCE_LOCATION (TYPE_STUB_DECL (template_type));\n \t}\n       else\n \ttype_decl = TYPE_NAME (t);\n@@ -4709,7 +4712,7 @@ tsubst_friend_function (tree decl, tree args)\n   tree new_friend;\n   location_t saved_loc = input_location;\n \n-  input_location = TREE_LOCUS (decl);\n+  input_location = DECL_SOURCE_LOCATION (decl);\n \n   if (TREE_CODE (decl) == FUNCTION_DECL \n       && DECL_TEMPLATE_INSTANTIATION (decl)\n@@ -5150,7 +5153,7 @@ instantiate_class_template (tree type)\n \n   /* Set the input location to the template definition. This is needed\n      if tsubsting causes an error.  */\n-  input_location = TREE_LOCUS (TYPE_NAME (pattern));\n+  input_location = DECL_SOURCE_LOCATION (TYPE_NAME (pattern));\n \n   TYPE_HAS_CONSTRUCTOR (type) = TYPE_HAS_CONSTRUCTOR (pattern);\n   TYPE_HAS_DESTRUCTOR (type) = TYPE_HAS_DESTRUCTOR (pattern);\n@@ -5299,7 +5302,7 @@ instantiate_class_template (tree type)\n \t\t     assist in error message reporting.  Since we\n \t\t     called push_tinst_level above, we don't need to\n \t\t     restore these.  */\n-\t\t  input_location = TREE_LOCUS (t);\n+\t\t  input_location = DECL_SOURCE_LOCATION (t);\n \n \t\t  if (TREE_CODE (t) == TEMPLATE_DECL)\n \t\t    processing_template_decl++;\n@@ -5408,7 +5411,7 @@ instantiate_class_template (tree type)\n      implicit functions at a predictable point, and the same point\n      that would be used for non-template classes.  */\n   typedecl = TYPE_MAIN_DECL (type);\n-  input_location = TREE_LOCUS (typedecl);\n+  input_location = DECL_SOURCE_LOCATION (typedecl);\n   \n   unreverse_member_declarations (type);\n   finish_struct_1 (type);\n@@ -5705,7 +5708,7 @@ tsubst_decl (tree t, tree args, tree type, tsubst_flags_t complain)\n \n   /* Set the filename and linenumber to improve error-reporting.  */\n   saved_loc = input_location;\n-  input_location = TREE_LOCUS (t);\n+  input_location = DECL_SOURCE_LOCATION (t);\n \n   switch (TREE_CODE (t))\n     {\n@@ -10771,7 +10774,7 @@ instantiate_decl (tree d, int defer_ok)\n   else\n     pattern_defined = ! DECL_IN_AGGR_P (code_pattern);\n \n-  input_location = TREE_LOCUS (d);\n+  input_location = DECL_SOURCE_LOCATION (d);\n \n   if (pattern_defined)\n     {\n@@ -10887,7 +10890,7 @@ instantiate_decl (tree d, int defer_ok)\n   /* We already set the file and line above.  Reset them now in case\n      they changed as a result of calling\n      regenerate_decl_from_template.  */\n-  input_location = TREE_LOCUS (d);\n+  input_location = DECL_SOURCE_LOCATION (d);\n \n   if (TREE_CODE (d) == VAR_DECL)\n     {\n@@ -11175,7 +11178,8 @@ tsubst_enum (tree tag, tree newtag, tree args)\n     }\n \n   finish_enum (newtag);\n-  copy_tree_locus (TYPE_NAME (newtag), TYPE_NAME (tag));\n+  DECL_SOURCE_LOCATION (TYPE_NAME (newtag))\n+    = DECL_SOURCE_LOCATION (TYPE_NAME (tag));\n }\n \n /* DECL is a FUNCTION_DECL that is a template specialization.  Return"}, {"sha": "ef42579f34994884012305bf86952bed8145191f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -2030,7 +2030,7 @@ begin_class_definition (tree t)\n     }\n \n   /* Update the location of the decl.  */\n-  set_tree_locus (TYPE_NAME (t), input_location);\n+  DECL_SOURCE_LOCATION (TYPE_NAME (t)) = input_location;\n   \n   if (TYPE_BEING_DEFINED (t))\n     {"}, {"sha": "0c729d6118c81b156eff8a2715e64792139b0fb4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -2153,7 +2153,7 @@ cp_copy_res_decl_for_inlining (tree result,\n \t      && DECL_NAME (var) == NULL_TREE)\n \t    {\n \t      DECL_NAME (var) = DECL_NAME (nrv);\n-\t      copy_tree_locus (var, nrv);\n+\t      DECL_SOURCE_LOCATION (var) = DECL_SOURCE_LOCATION (nrv);\n \t      DECL_ABSTRACT_ORIGIN (var) = DECL_ORIGIN (nrv);\n \t      /* Don't lose initialization info.  */\n \t      DECL_INITIAL (var) = DECL_INITIAL (nrv);"}, {"sha": "e4c797894c0421158374fbff0fd93b2809c93e85", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -2689,7 +2689,7 @@ static void\n dbxout_prepare_symbol (tree decl ATTRIBUTE_UNUSED)\n {\n #ifdef WINNING_GDB\n-  const char *filename = TREE_FILENAME (decl);\n+  const char *filename = DECL_SOURCE_FILE (decl);\n \n   dbxout_source_file (asmfile, filename);\n #endif\n@@ -2703,7 +2703,7 @@ dbxout_finish_symbol (tree sym)\n #else\n   int line = 0;\n   if (use_gnu_debug_info_extensions && sym != 0)\n-    line = TREE_LINENO (sym);\n+    line = DECL_SOURCE_LINE (sym);\n \n   fprintf (asmfile, \"\\\",%d,0,%d,\", current_sym_code, line);\n   if (current_sym_addr)"}, {"sha": "c29867a60b3546644e62c4fb7f9e6bb294b538ea", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -139,7 +139,7 @@ text_specifies_location (text_info *text, location_t *locus)\n   else if (p[0] == '%' && p[1] == 'J')\n     {\n       tree t = va_arg (*text->args_ptr, tree);\n-      *locus = TREE_LOCUS (t);\n+      *locus = DECL_SOURCE_LOCATION (t);\n       text->format_spec = p + 2;\n       return true;\n     }"}, {"sha": "29ccaec317dedfeaebda8caf7922066bb9c29da7", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -856,13 +856,13 @@ entity.\n @item TREE_TYPE\n This macro returns the type of the entity declared.\n \n-@item TREE_FILENAME\n+@item DECL_SOURCE_FILE\n This macro returns the name of the file in which the entity was\n declared, as a @code{char*}.  For an entity declared implicitly by the\n compiler (like @code{__builtin_memcpy}), this will be the string\n @code{\"<internal>\"}.\n \n-@item TREE_LINENO\n+@item DECL_SOURCE_LINE\n This macro returns the line number at which the entity was declared, as\n an @code{int}.\n "}, {"sha": "5fa730e1b55c5f0fe5c3ad66439e3f35219bc31d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -9907,10 +9907,10 @@ add_pure_or_virtual_attribute (dw_die_ref die, tree func_decl)\n static void\n add_src_coords_attributes (dw_die_ref die, tree decl)\n {\n-  unsigned file_index = lookup_filename (TREE_FILENAME (decl));\n+  unsigned file_index = lookup_filename (DECL_SOURCE_FILE (decl));\n \n   add_AT_unsigned (die, DW_AT_decl_file, file_index);\n-  add_AT_unsigned (die, DW_AT_decl_line, TREE_LINENO (decl));\n+  add_AT_unsigned (die, DW_AT_decl_line, DECL_SOURCE_LINE (decl));\n }\n \n /* Add a DW_AT_name attribute and source coordinate attribute for the\n@@ -10596,7 +10596,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n     }\n   else if (old_die)\n     {\n-      unsigned file_index = lookup_filename (TREE_FILENAME (decl));\n+      unsigned file_index = lookup_filename (DECL_SOURCE_FILE (decl));\n \n       if (!get_AT_flag (old_die, DW_AT_declaration)\n \t  /* We can have a normal definition following an inline one in the\n@@ -10625,7 +10625,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  && (DECL_ARTIFICIAL (decl)\n \t      || (get_AT_unsigned (old_die, DW_AT_decl_file) == file_index\n \t\t  && (get_AT_unsigned (old_die, DW_AT_decl_line)\n-\t\t      == (unsigned) TREE_LINENO (decl)))))\n+\t\t      == (unsigned) DECL_SOURCE_LINE (decl)))))\n \t{\n \t  subr_die = old_die;\n \n@@ -10640,9 +10640,9 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  if (get_AT_unsigned (old_die, DW_AT_decl_file) != file_index)\n \t    add_AT_unsigned (subr_die, DW_AT_decl_file, file_index);\n \t  if (get_AT_unsigned (old_die, DW_AT_decl_line)\n-\t      != (unsigned) TREE_LINENO (decl))\n+\t      != (unsigned) DECL_SOURCE_LINE (decl))\n \t    add_AT_unsigned\n-\t      (subr_die, DW_AT_decl_line, TREE_LINENO (decl));\n+\t      (subr_die, DW_AT_decl_line, DECL_SOURCE_LINE (decl));\n \t}\n     }\n   else\n@@ -10859,16 +10859,16 @@ gen_variable_die (tree decl, dw_die_ref context_die)\n       add_AT_die_ref (var_die, DW_AT_specification, old_die);\n       if (DECL_NAME (decl))\n \t{\n-\t  unsigned file_index = lookup_filename (TREE_FILENAME (decl));\n+\t  unsigned file_index = lookup_filename (DECL_SOURCE_FILE (decl));\n \n \t  if (get_AT_unsigned (old_die, DW_AT_decl_file) != file_index)\n \t    add_AT_unsigned (var_die, DW_AT_decl_file, file_index);\n \n \t  if (get_AT_unsigned (old_die, DW_AT_decl_line)\n-\t      != (unsigned) TREE_LINENO (decl))\n+\t      != (unsigned) DECL_SOURCE_LINE (decl))\n \n \t    add_AT_unsigned (var_die, DW_AT_decl_line,\n-\t\t\t     TREE_LINENO (decl));\n+\t\t\t     DECL_SOURCE_LINE (decl));\n \t}\n     }\n   else\n@@ -12036,7 +12036,7 @@ dwarf2out_decl (tree decl)\n \n       /* Don't bother trying to generate any DIEs to represent any of the\n \t normal built-in types for the language we are compiling.  */\n-      if (!TREE_LOCUS_SET_P (decl))\n+      if (DECL_SOURCE_LINE (decl) == 0)\n \t{\n \t  /* OK, we need to generate one for `bool' so GDB knows what type\n \t     comparisons have.  */"}, {"sha": "dfd1f0b57e1c6e4402b6cedd2fe7669f9278ab77", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -3411,10 +3411,10 @@ name_and_src_coords_attributes (tree decl)\n \t   Fred Fish sez that m68k/svr4 assemblers botch those.  */\n \n \tASM_OUTPUT_POP_SECTION (asm_out_file);\n-\tfile_index = lookup_filename (TREE_FILENAME (decl));\n+\tfile_index = lookup_filename (DECL_SOURCE_FILE (decl));\n \tASM_OUTPUT_PUSH_SECTION (asm_out_file, DEBUG_SECTION);\n \n-\tsrc_coords_attribute (file_index, TREE_LINENO (decl));\n+\tsrc_coords_attribute (file_index, DECL_SOURCE_LINE (decl));\n       }\n #endif /* defined(DWARF_DECL_COORDINATES) */\n     }\n@@ -5618,7 +5618,7 @@ dwarfout_file_scope_decl (tree decl, int set_finalizing)\n       /* ??? This code is different than the equivalent code in dwarf2out.c.\n \t The dwarf2out.c code is probably more correct.  */\n \n-      if (!TREE_LOCUS_SET_P (decl)\n+      if (DECL_SOURCE_LINE (decl) == 0\n \t  && (type_is_fundamental (TREE_TYPE (decl))\n \t      || TREE_CODE (TREE_TYPE (decl)) == LANG_TYPE))\n \treturn;"}, {"sha": "8ab5c2c3ab42fd723906f5d4dccaae798b2d985d", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1,3 +1,7 @@\n+2003-09-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* com.c, ste.c: Revert.\n+\n 2003-09-21  Richard Henderson  <rth@redhat.com>\n \n \t* com.c, ste.c: Update for DECL_SOURCE_LOCATION rename and"}, {"sha": "a5100d9bfa9297448ff5cb6489bf3dad87ebb1d0", "filename": "gcc/f/com.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -13227,7 +13227,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \treturn 0;\n     }\n   else if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t   && !TREE_LOCUS_SET_P (olddecl))\n+\t   && DECL_SOURCE_LINE (olddecl) == 0)\n     {\n       /* A function declaration for a predeclared function\n \t that isn't actually built in.  */\n@@ -13297,7 +13297,8 @@ duplicate_decls (tree newdecl, tree olddecl)\n       if ((DECL_INITIAL (newdecl) == 0 && DECL_INITIAL (olddecl) != 0)\n \t  || (DECL_CONTEXT (newdecl) != 0 && DECL_CONTEXT (olddecl) == 0))\n \t{\n-\t  copy_tree_locus (newdecl, olddecl);\n+\t  DECL_SOURCE_LINE (newdecl) = DECL_SOURCE_LINE (olddecl);\n+\t  DECL_SOURCE_FILE (newdecl) = DECL_SOURCE_FILE (olddecl);\n \n \t  if (DECL_CONTEXT (olddecl) == 0\n \t      && TREE_CODE (newdecl) != FUNCTION_DECL)\n@@ -14534,7 +14535,7 @@ pushdecl (tree x)\n \n       if (TREE_CODE (x) == TYPE_DECL)\n \t{\n-\t  if (!TREE_LOCUS_SET_P (x))\n+\t  if (DECL_SOURCE_LINE (x) == 0)\n \t    {\n \t      if (TYPE_NAME (TREE_TYPE (x)) == 0)\n \t\tTYPE_NAME (TREE_TYPE (x)) = x;"}, {"sha": "82435bc8dc8e2bbf8a8b5e7e463a6ad242c93a31", "filename": "gcc/f/ste.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ff%2Fste.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ff%2Fste.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fste.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -2392,8 +2392,8 @@ ffeste_labeldef_branch (ffelab label)\n   assert (DECL_INITIAL (glabel) == NULL_TREE);\n \n   DECL_INITIAL (glabel) = error_mark_node;\n-  set_tree_file_line (glabel, ffelab_definition_filename (label),\n-\t\t      ffelab_definition_filelinenum (label));\n+  DECL_SOURCE_FILE (glabel) = ffelab_definition_filename (label);\n+  DECL_SOURCE_LINE (glabel) = ffelab_definition_filelinenum (label);\n \n   emit_nop ();\n "}, {"sha": "baec4ab3048a3c337a2e54a0583d022abd3eeb83", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -6399,8 +6399,8 @@ init_function_start (tree subr)\n      function.  Also tell final how to output a linenum before the\n      function prologue.  Note linenums could be missing, e.g. when\n      compiling a Java .class file.  */\n-  if (TREE_LOCUS_SET_P (subr))\n-    emit_line_note (TREE_LOCUS (subr));\n+  if (DECL_SOURCE_LINE (subr))\n+    emit_line_note (DECL_SOURCE_LOCATION (subr));\n \n   /* Make sure first insn is a note even if we don't want linenums.\n      This makes sure the first insn will never be deleted."}, {"sha": "21a738ea237bc0beb89fe5e75f5903d37e267ade", "filename": "gcc/integrate.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -987,7 +987,7 @@ expand_inline_function (tree fndecl, tree parms, rtx target, int ignore,\n \t  && ! (GET_CODE (XEXP (loc, 0)) == REG\n \t\t&& REGNO (XEXP (loc, 0)) > LAST_VIRTUAL_REGISTER))\n \t{\n-\t  rtx note = emit_line_note (TREE_LOCUS (formal));\n+\t  rtx note = emit_line_note (DECL_SOURCE_LOCATION (formal));\n \n \t  if (note)\n \t    RTX_INTEGRATED_P (note) = 1;\n@@ -2985,7 +2985,7 @@ output_inline_function (tree fndecl)\n \n   /* Make sure warnings emitted by the optimizers (e.g. control reaches\n      end of non-void function) is not wildly incorrect.  */\n-  input_location = TREE_LOCUS (fndecl);\n+  input_location = DECL_SOURCE_LOCATION (fndecl);\n \n   /* Compile this function all the way down to assembly code.  As a\n      side effect this destroys the saved RTL representation, but"}, {"sha": "f0a863b2322dddcb82d9e9ffc491abe6d4b8cc4a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1,3 +1,8 @@\n+2003-09-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* class.c, decl.c, jcf-parse.c, jcf-write.c, parse.y, \n+\tresource.c: Revert.\n+\n 2003-09-21  Richard Henderson  <rth@redhat.com>\n \n \t* class.c, decl.c, jcf-parse.c, jcf-write.c, parse.y, "}, {"sha": "e3e6cc36e586b5f6b65a3cf5d0b45c8496e08a50", "filename": "gcc/java/class.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1728,8 +1728,8 @@ maybe_layout_super_class (tree super_class, tree this_class)\n \t    {\n \t      tree this_decl = TYPE_NAME (this_class);\n \t      this_wrap = build_expr_wfl (this_class,\n-\t\t\t\t\t  TREE_FILENAME (this_decl),\n-\t\t\t\t\t  TREE_LINENO (this_decl), 0);\n+\t\t\t\t\t  DECL_SOURCE_FILE (this_decl),\n+\t\t\t\t\t  DECL_SOURCE_LINE (this_decl), 0);\n \t    }\n \t  super_class = do_resolve_class (NULL_TREE, /* FIXME? */\n \t\t\t\t\t  super_class, NULL_TREE, this_wrap);\n@@ -1767,8 +1767,8 @@ layout_class (tree this_class)\n \t  tree decl = TYPE_NAME (TREE_PURPOSE (current));\n \t  sprintf (buffer, \"\\n  which inherits from `%s' (%s:%d)\",\n \t\t   IDENTIFIER_POINTER (DECL_NAME (decl)),\n-\t\t   TREE_FILENAME (decl),\n-\t\t   TREE_LINENO (decl));\n+\t\t   DECL_SOURCE_FILE (decl),\n+\t\t   DECL_SOURCE_LINE (decl));\n \t  obstack_grow (&temporary_obstack, buffer, strlen (buffer));\n \t}\n       obstack_1grow (&temporary_obstack, '\\0');\n@@ -2059,6 +2059,7 @@ emit_register_classes (void)\n       \n       init_decl = build_decl (FUNCTION_DECL, init_name, init_type);\n       SET_DECL_ASSEMBLER_NAME (init_decl, init_name);\n+      DECL_SOURCE_LINE (init_decl) = 0;\n       TREE_STATIC (init_decl) = 1;\n       current_function_decl = init_decl;\n       DECL_RESULT (init_decl) = build_decl (RESULT_DECL, NULL_TREE,\n@@ -2083,7 +2084,7 @@ emit_register_classes (void)\n       for ( t = registered_class; t; t = TREE_CHAIN (t))\n \temit_library_call (registerClass_libfunc, 0, VOIDmode, 1,\n \t\t\t   XEXP (DECL_RTL (t), 0), Pmode);\n-      input_location = TREE_LOCUS (init_decl);\n+      input_location = DECL_SOURCE_LOCATION (init_decl);\n       expand_function_end ();\n       poplevel (1, 0, 1);\n       rest_of_compilation (init_decl);"}, {"sha": "7ddf704efad777761819a36d89d122accde601cf", "filename": "gcc/java/decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1070,7 +1070,7 @@ pushdecl (tree x)\n \t  /* Maybe warn if shadowing something else.  */\n \t  else if (warn_shadow && !DECL_EXTERNAL (x)\n \t\t   /* No shadow warnings for internally generated vars.  */\n-\t\t   && TREE_LOCUS_SET_P (x)\n+\t\t   && DECL_SOURCE_LINE (x) != 0\n \t\t   /* No shadow warnings for vars made for inlining.  */\n \t\t   && ! DECL_FROM_INLINE (x))\n \t    {\n@@ -1817,7 +1817,8 @@ java_expand_body (tree fndecl)\n   int saved_lineno = input_line;\n \n   current_function_decl = fndecl;\n-  input_location = TREE_LOCUS (fndecl);\n+  input_filename = DECL_SOURCE_FILE (fndecl);\n+  input_line = DECL_SOURCE_LINE (fndecl);\n \n   timevar_push (TV_EXPAND);\n "}, {"sha": "f47dbe0897a27e020468402508877500c7031214", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -145,10 +145,8 @@ set_source_filename (JCF *jcf, int index)\n \treturn;\n     }\n   input_filename = sfname;\n-  set_tree_file_line (TYPE_NAME (current_class), sfname,\n-\t\t      TREE_LINENO (TYPE_NAME (current_class)));\n-  if (current_class == main_class)\n-    main_input_filename = input_filename;\n+  DECL_SOURCE_FILE (TYPE_NAME (current_class)) = sfname;\n+  if (current_class == main_class) main_input_filename = input_filename;\n }\n \n #define HANDLE_SOURCEFILE(INDEX) set_source_filename (jcf, INDEX)\n@@ -420,7 +418,7 @@ give_name_to_class (JCF *jcf, int i)\n       tree class_name = unmangle_classname (JPOOL_UTF_DATA (jcf, j),\n \t\t\t\t\t    JPOOL_UTF_LENGTH (jcf, j));\n       this_class = lookup_class (class_name);\n-      input_filename = TREE_FILENAME (TYPE_NAME (this_class));\n+      input_filename = DECL_SOURCE_FILE (TYPE_NAME (this_class));\n       input_line = 0;\n       if (main_input_filename == NULL && jcf == main_jcf)\n \tmain_input_filename = input_filename;\n@@ -710,7 +708,7 @@ parse_class_file (void)\n \n   java_layout_seen_class_methods ();\n \n-  input_filename = TREE_FILENAME (TYPE_NAME (current_class));\n+  input_filename = DECL_SOURCE_FILE (TYPE_NAME (current_class));\n   input_line = 0;\n   (*debug_hooks->start_source_file) (input_line, input_filename);\n   init_outgoing_cpool ();"}, {"sha": "82c77b1c831014fc576f0dee620c77a8adb035d9", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -3113,7 +3113,7 @@ generate_classfile (tree clas, struct jcf_partial *state)\n     }\n   ptr = methods_count_ptr;  UNSAFE_PUT2 (methods_count);\n \n-  source_file = TREE_FILENAME (TYPE_NAME (clas));\n+  source_file = DECL_SOURCE_FILE (TYPE_NAME (clas));\n   for (s = source_file; ; s++)\n     {\n       char ch = *s;\n@@ -3299,7 +3299,7 @@ make_class_file_name (tree clas)\n       /* Make sure we put the class file into the .java file's\n \t directory, and not into some subdirectory thereof.  */\n       char *t;\n-      dname = TREE_FILENAME (TYPE_NAME (clas));\n+      dname = DECL_SOURCE_FILE (TYPE_NAME (clas));\n       slash = strrchr (dname, DIR_SEPARATOR);\n #ifdef DIR_SEPARATOR_2\n       if (! slash)"}, {"sha": "a5064e18465afde11729515f2a01f540ba5c5db6", "filename": "gcc/java/parse.y", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -3208,7 +3208,7 @@ classitf_redefinition_error (const char *context, tree id, tree decl, tree cl)\n {\n   parse_error_context (cl, \"%s `%s' already defined in %s:%d\",\n \t\t       context, IDENTIFIER_POINTER (id),\n-\t\t       TREE_FILENAME (decl), TREE_LINENO (decl));\n+\t\t       DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n   /* Here we should point out where its redefined. It's a unicode. FIXME */\n }\n \n@@ -3716,10 +3716,12 @@ maybe_create_class_interface_decl (tree decl, tree raw_name,\n     decl = push_class (make_class (), qualified_name);\n \n   /* Take care of the file and line business */\n-  set_tree_file_line (decl, EXPR_WFL_FILENAME (cl),\n-\t\t      (flag_emit_xref\n-\t\t       ? EXPR_WFL_LINECOL (cl) : EXPR_WFL_LINENO (cl)));\n-\n+  DECL_SOURCE_FILE (decl) = EXPR_WFL_FILENAME (cl);\n+  /* If we're emiting xrefs, store the line/col number information */\n+  if (flag_emit_xref)\n+    DECL_SOURCE_LINE (decl) = EXPR_WFL_LINECOL (cl);\n+  else\n+    DECL_SOURCE_LINE (decl) = EXPR_WFL_LINENO (cl);\n   CLASS_FROM_SOURCE_P (TREE_TYPE (decl)) = 1;\n   CLASS_PARSED_P (TREE_TYPE (decl)) = 1;\n   CLASS_FROM_CURRENTLY_COMPILED_P (TREE_TYPE (decl)) =\n@@ -4203,7 +4205,7 @@ duplicate_declaration_error_p (tree new_field_name, tree new_type, tree cl)\n \t(cl , \"Duplicate variable declaration: `%s %s' was `%s %s' (%s:%d)\",\n \t t1, IDENTIFIER_POINTER (new_field_name),\n \t t2, IDENTIFIER_POINTER (DECL_NAME (decl)),\n-\t TREE_FILENAME (decl), TREE_LINENO (decl));\n+\t DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n       free (t1);\n       free (t2);\n       return 1;\n@@ -4685,7 +4687,7 @@ method_header (int flags, tree type, tree mdecl, tree throws)\n   /* If doing xref, store column and line number information instead\n      of the line number only. */\n   if (flag_emit_xref)\n-    set_tree_file_line (meth, TREE_FILENAME (meth), EXPR_WFL_LINECOL (id));\n+    DECL_SOURCE_LINE (meth) = EXPR_WFL_LINECOL (id);\n \n   return meth;\n }\n@@ -6703,8 +6705,8 @@ lookup_cl (tree decl)\n       cl_v = build_expr_wfl (NULL_TREE, NULL, 0, 0);\n     }\n \n-  EXPR_WFL_FILENAME_NODE (cl_v) = get_identifier (TREE_FILENAME (decl));\n-  EXPR_WFL_SET_LINECOL (cl_v, TREE_LINENO (decl), -1);\n+  EXPR_WFL_FILENAME_NODE (cl_v) = get_identifier (DECL_SOURCE_FILE (decl));\n+  EXPR_WFL_SET_LINECOL (cl_v, DECL_SOURCE_LINE (decl), -1);\n \n   line = java_get_line_col (EXPR_WFL_FILENAME (cl_v),\n \t\t\t    EXPR_WFL_LINENO (cl_v), EXPR_WFL_COLNO (cl_v));\n@@ -7284,7 +7286,7 @@ declare_local_variables (int modifier, tree type, tree vlist)\n       if ((other = lookup_name_in_blocks (name)))\n \t{\n \t  variable_redefinition_error (wfl, name, TREE_TYPE (other),\n-\t\t\t\t       TREE_LINENO (other));\n+\t\t\t\t       DECL_SOURCE_LINE (other));\n \t  continue;\n \t}\n \n@@ -7304,8 +7306,7 @@ declare_local_variables (int modifier, tree type, tree vlist)\n       /* If doing xreferencing, replace the line number with the WFL\n          compound value */\n       if (flag_emit_xref)\n-\tset_tree_file_line (decl, TREE_FILENAME (decl),\n-\t\t\t    EXPR_WFL_LINECOL (wfl));\n+\tDECL_SOURCE_LINE (decl) = EXPR_WFL_LINECOL (wfl);\n \n       /* Don't try to use an INIT statement when an error was found */\n       if (init && java_error_count)\n@@ -7413,7 +7414,7 @@ create_artificial_method (tree class, int flags, tree type,\n static void\n start_artificial_method_body (tree mdecl)\n {\n-  set_tree_file_line (mdecl, TREE_FILENAME (mdecl), 1);\n+  DECL_SOURCE_LINE (mdecl) = 1;\n   DECL_FUNCTION_LAST_LINE (mdecl) = 1;\n   source_start_java_method (mdecl);\n   enter_block ();\n@@ -7979,7 +7980,7 @@ start_complete_expand_method (tree mdecl)\n       TREE_CHAIN (tem) = next;\n     }\n   pushdecl_force_head (DECL_ARGUMENTS (mdecl));\n-  input_location = TREE_LOCUS (mdecl);\n+  input_line = DECL_SOURCE_LINE (mdecl);\n   build_result_decl (mdecl);\n }\n \n@@ -10144,7 +10145,7 @@ check_deprecation (tree wfl, tree decl)\n \t to the record.  */\n       decl = TYPE_NAME (TREE_TYPE (elt));\n     }\n-  file = TREE_FILENAME (decl);\n+  file = DECL_SOURCE_FILE (decl);\n \n   /* Complain if the field is deprecated and the file it was defined\n      in isn't compiled at the same time the file which contains its"}, {"sha": "b71a6709f5efbcc4b4246e95e5668ec40da238a7", "filename": "gcc/java/resource.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fjava%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fresource.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -114,6 +114,7 @@ write_resource_constructor (void)\n   init_type = build_function_type (void_type_node, end_params_node);\n \n   init_decl = build_decl (FUNCTION_DECL, init_name, init_type);\n+  DECL_SOURCE_LINE (init_decl) = 0;\n   SET_DECL_ASSEMBLER_NAME (init_decl, init_name);\n   TREE_STATIC (init_decl) = 1;\n   current_function_decl = init_decl;\n@@ -139,7 +140,7 @@ write_resource_constructor (void)\n \t\t\t Pmode);\n     }\n \n-  input_location = TREE_LOCUS (init_decl);\n+  input_location = DECL_SOURCE_LOCATION (init_decl);\n   expand_function_end ();\n   poplevel (1, 0, 1);\n   { "}, {"sha": "0c07543050204b744e1cf147a8560186529f07a9", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1984,12 +1984,13 @@ build_selector_translation_table (void)\n           }\n         if (!found)\n           {\n-\t    location_t loc = input_location;\n+            /* Adjust line number for warning message.  */\n+            int save_lineno = input_line;\n             if (flag_next_runtime && TREE_PURPOSE (chain))\n-              loc = TREE_LOCUS (TREE_PURPOSE (chain));\n-\n-            warning (\"%Hcreating selector for non existant method %s\",\n-                     &loc, IDENTIFIER_POINTER (TREE_VALUE (chain)));\n+              input_line = DECL_SOURCE_LINE (TREE_PURPOSE (chain));\n+            warning (\"creating selector for non existant method %s\",\n+                     IDENTIFIER_POINTER (TREE_VALUE (chain)));\n+            input_line = save_lineno;\n           }\n       }\n \n@@ -2856,6 +2857,7 @@ build_tmp_function_decl (void)\n   expr_decl = build1 (INDIRECT_REF, NULL_TREE, expr_decl);\n \n   tmp_decl = define_decl (expr_decl, decl_specs);\n+  DECL_SOURCE_LINE (tmp_decl) = 0;\n \n   return tmp_decl;\n }"}, {"sha": "3d6c01e01eeb73e0cdee5729a987af5c59cb5a48", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -368,7 +368,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n       fprintf (file, \" %s\", GET_MODE_NAME (mode));\n       fprintf (file, \" file %s line %d\",\n-\t       TREE_FILENAME (node), TREE_LINENO (node));\n+\t       DECL_SOURCE_FILE (node), DECL_SOURCE_LINE (node));\n \n       print_node (file, \"size\", DECL_SIZE (node), indent + 4);\n       print_node (file, \"unit size\", DECL_SIZE_UNIT (node), indent + 4);"}, {"sha": "9d5553f2517263fb996b4223acb0dda00d0b1687", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -3981,7 +3981,7 @@ expand_decl_init (tree decl)\n     }\n   else if (DECL_INITIAL (decl) && TREE_CODE (DECL_INITIAL (decl)) != TREE_LIST)\n     {\n-      emit_line_note (TREE_LOCUS (decl));\n+      emit_line_note (DECL_SOURCE_LOCATION (decl));\n       expand_assignment (decl, DECL_INITIAL (decl), 0);\n       emit_queue ();\n     }"}, {"sha": "03485bc8aed04ff4117ca955eafec4b7a32c13a3", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1709,7 +1709,7 @@ warn_deprecated_use (tree node)\n   if (DECL_P (node))\n     warning (\"`%s' is deprecated (declared at %s:%d)\",\n \t     IDENTIFIER_POINTER (DECL_NAME (node)),\n-\t     TREE_FILENAME (node), TREE_LINENO (node));\n+\t     DECL_SOURCE_FILE (node), DECL_SOURCE_LINE (node));\n   else if (TYPE_P (node))\n     {\n       const char *what = NULL;\n@@ -1725,13 +1725,13 @@ warn_deprecated_use (tree node)\n \t{\n \t  if (decl)\n \t    warning (\"`%s' is deprecated (declared at %s:%d)\", what,\n-\t\t     TREE_FILENAME (decl), TREE_LINENO (decl));\n+\t\t     DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n \t  else\n \t    warning (\"`%s' is deprecated\", what);\n \t}\n       else if (decl)\n \twarning (\"type is deprecated (declared at %s:%d)\",\n-\t\t TREE_FILENAME (decl), TREE_LINENO (decl));\n+\t\t DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n       else\n \twarning (\"type is deprecated\");\n     }"}, {"sha": "c3696336c4465f6e4e044ba0f916a8ffc4da79ba", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -321,18 +321,18 @@ dequeue_and_dump (dump_info_p di)\n       queue_and_dump_type (di, t);\n       dump_child (\"scpe\", DECL_CONTEXT (t));\n       /* And a source position.  */\n-      if (TREE_FILENAME (t))\n+      if (DECL_SOURCE_FILE (t))\n \t{\n-\t  const char *filename = strrchr (TREE_FILENAME (t), '/');\n+\t  const char *filename = strrchr (DECL_SOURCE_FILE (t), '/');\n \t  if (!filename)\n-\t    filename = TREE_FILENAME (t);\n+\t    filename = DECL_SOURCE_FILE (t);\n \t  else\n \t    /* Skip the slash.  */\n \t    ++filename;\n \n \t  dump_maybe_newline (di);\n \t  fprintf (di->stream, \"srcp: %s:%-6d \", filename,\n-\t\t   TREE_LINENO (t));\n+\t\t   DECL_SOURCE_LINE (t));\n \t  di->column += 6 + strlen (filename) + 8;\n \t}\n       /* And any declaration can be compiler-generated.  */"}, {"sha": "e4e24b2b3b27e6a7a6c1f22c3784b96ecb28cce7", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1322,7 +1322,7 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n      line numbers corresponding to the function we are calling.  We\n      wrap the whole inlined body in an EXPR_WITH_FILE_AND_LINE as well\n      because individual statements don't record the filename.  */\n-  push_srcloc (TREE_FILENAME (fn), TREE_LINENO (fn));\n+  push_srcloc (DECL_SOURCE_FILE (fn), DECL_SOURCE_LINE (fn));\n \n #ifndef INLINER_FOR_JAVA\n   /* Build a statement-expression containing code to initialize the\n@@ -1522,7 +1522,7 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n #ifndef INLINER_FOR_JAVA\n   chain = TREE_CHAIN (*tp);\n #endif /* INLINER_FOR_JAVA */\n-  *tp = build_expr_wfl (expr, TREE_FILENAME (fn), TREE_LINENO (fn),\n+  *tp = build_expr_wfl (expr, DECL_SOURCE_FILE (fn), DECL_SOURCE_LINE (fn),\n \t\t\t/*col=*/0);\n   EXPR_WFL_EMIT_LINE_NOTE (*tp) = 1;\n #ifndef INLINER_FOR_JAVA"}, {"sha": "e6049cb2b29c6300418a0a1e314690e6cf23ac93", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -105,7 +105,7 @@ tree_rest_of_compilation (tree fndecl, bool nested_p)\n   /* Initialize the RTL code for the function.  */\n   current_function_decl = fndecl;\n   saved_loc = input_location;\n-  input_location = TREE_LOCUS (fndecl);\n+  input_location = DECL_SOURCE_LOCATION (fndecl);\n   init_function_start (fndecl);\n \n   /* This function is being processed in whole-function mode.  */"}, {"sha": "b82a6bf6965fc60392d768a8532c458d49e92747", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -287,7 +287,7 @@ make_node (enum tree_code code)\n \tDECL_ALIGN (t) = 1;\n       DECL_USER_ALIGN (t) = 0;\n       DECL_IN_SYSTEM_HEADER (t) = in_system_header;\n-      set_tree_locus (t, input_location);\n+      DECL_SOURCE_LOCATION (t) = input_location;\n       DECL_UID (t) = next_decl_uid++;\n \n       /* We have not yet computed the alias set for this declaration.  */"}, {"sha": "4b6d236dde6efa2b4d2757a97cc2db3646a71d23", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -327,7 +327,7 @@ DEFTREECODE (STRING_CST, \"string_cst\", 'c', 0)\n     built-in functions.  Its value is an enum built_in_function\n     that says which built-in function it is.\n \n-   TREE_FILENAME holds a filename string and TREE_LINENO\n+   DECL_SOURCE_FILE holds a filename string and DECL_SOURCE_LINE\n    holds a line number.  In some cases these can be the location of\n    a reference, if no definition has been seen.\n "}, {"sha": "d742bc3d95b3dca2af81e999b62540d306629642", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -802,29 +802,6 @@ struct tree_vec GTY(())\n #define TREE_OPERAND(NODE, I) TREE_OPERAND_CHECK (NODE, I)\n #define TREE_COMPLEXITY(NODE) (EXPR_CHECK (NODE)->exp.complexity)\n \n-/* These macros access the location of a declaration.  For 3.4, this is\n-   only defined for DECLs, but for 3.5 it will be valid on EXPRs as well;\n-   thus the name is not decl specific.  The values accessed from the \n-   uppercase macros are intentionally read-only.  Use the setter functions\n-   to write to this field.  */\n-\n-#define TREE_LOCUS(NODE) \\\n-  (*(const location_t *)&DECL_CHECK (NODE)->decl.locus)\n-#define TREE_FILENAME(NODE)\t(TREE_LOCUS (NODE).file)\n-#define TREE_LINENO(NODE)\t(TREE_LOCUS (NODE).line)\n-#define TREE_LOCUS_SET_P(NODE)\t(TREE_LINENO (NODE) != 0)\n-\n-#define set_tree_locus(NODE, LOC) \\\n-  ((void)(DECL_CHECK (NODE)->decl.locus = (LOC)))\n-#define copy_tree_locus(DEST, SRC) \\\n-  ((void)(DECL_CHECK (DEST)->decl.locus = DECL_CHECK (SRC)->decl.locus))\n-#define set_tree_file_line(NODE, FILE, LINE)\t\t\\\n-  do { \t\t\t\t\t\t\t\\\n-    location_t *l_ = &DECL_CHECK (NODE)->decl.locus;\t\\\n-    l_->file = (FILE);\t\t\t\t\t\\\n-    l_->line = (LINE);\t\t\t\t\t\\\n-  } while (0)\n-\n /* In a LABELED_BLOCK_EXPR node.  */\n #define LABELED_BLOCK_LABEL(NODE) \\\n   TREE_OPERAND_CHECK_CODE (NODE, LABELED_BLOCK_EXPR, 0)\n@@ -1332,6 +1309,13 @@ struct tree_type GTY(())\n /* For a FIELD_DECL in a QUAL_UNION_TYPE, records the expression, which\n    if nonzero, indicates that the field occupies the type.  */\n #define DECL_QUALIFIER(NODE) (FIELD_DECL_CHECK (NODE)->decl.initial)\n+/* These two fields describe where in the source code the declaration\n+   was.  If the declaration appears in several places (as for a C\n+   function that is declared first and then defined later), this\n+   information should refer to the definition.  */\n+#define DECL_SOURCE_LOCATION(NODE) (DECL_CHECK (NODE)->decl.locus)\n+#define DECL_SOURCE_FILE(NODE) (DECL_SOURCE_LOCATION (NODE).file)\n+#define DECL_SOURCE_LINE(NODE) (DECL_SOURCE_LOCATION (NODE).line)\n /* Holds the size of the datum, in bits, as a tree expression.\n    Need not be constant.  */\n #define DECL_SIZE(NODE) (DECL_CHECK (NODE)->decl.size)"}, {"sha": "3221ba8002a3713ce4ea7c6415428b371ac48066", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -1,3 +1,7 @@\n+2003-09-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* treetree.c: Revert.\n+\n 2003-09-21  Richard Henderson  <rth@redhat.com>\n \n \t* treetree.c: Update for DECL_SOURCE_LOCATION rename and"}, {"sha": "7697e3c49e51c2acf54069252933f41440c6d7be", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -313,9 +313,8 @@ tree_code_create_function_prototype (unsigned char* chars,\n   id = get_identifier ((const char*)chars);\n   fn_decl = build_decl (FUNCTION_DECL, id, fn_type);\n \n-  /* Nested functions not supported here.  */\n-  DECL_CONTEXT (fn_decl) = NULL_TREE;\n-  set_tree_locus (fn_decl, loc);\n+  DECL_CONTEXT (fn_decl) = NULL_TREE; /* Nested functions not supported here.  */\n+  DECL_SOURCE_LOCATION (fn_decl) = loc;\n \n   TREE_USED (fn_decl) = 1;\n \n@@ -388,14 +387,14 @@ tree_code_create_function_initial (tree prev_saved,\n   current_function_decl = fn_decl;\n   DECL_INITIAL (fn_decl) = error_mark_node;\n \n-  set_tree_locus (fn_decl, loc);\n+  DECL_SOURCE_LOCATION (fn_decl) = loc;\n \n   /* Prepare creation of rtl for a new function.  */\n \n   resultdecl = DECL_RESULT (fn_decl) \n     = build_decl (RESULT_DECL, NULL_TREE, TREE_TYPE (TREE_TYPE (fn_decl)));\n   DECL_CONTEXT (DECL_RESULT (fn_decl)) = fn_decl;\n-  set_tree_locus (resultdecl, loc);\n+  DECL_SOURCE_LOCATION (resultdecl) = loc;\n \n   /* Work out the size. ??? is this needed.  */\n   layout_decl (DECL_RESULT (fn_decl), 0);\n@@ -415,7 +414,7 @@ tree_code_create_function_initial (tree prev_saved,\n       if (!fn_decl)\n         abort ();\n       DECL_CONTEXT (parm_decl) = fn_decl;\n-      set_tree_locus (parm_decl, loc);\n+      DECL_SOURCE_LOCATION (parm_decl) = loc;\n       parm_list = chainon (parm_decl, parm_list);\n     }\n \n@@ -583,7 +582,7 @@ tree_code_create_variable (unsigned int storage_class,\n \n   DECL_CONTEXT (var_decl) = current_function_decl;\n \n-  set_tree_locus (var_decl, loc);\n+  DECL_SOURCE_LOCATION (var_decl) = loc;\n \n   /* Set the storage mode and whether only visible in the same file.  */\n   switch (storage_class)"}, {"sha": "7c03ca5b096cc3f5d97ce2a4d6c68fcb35eba24d", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31686a322301454c5ea5b997997aa7c84c57781/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=f31686a322301454c5ea5b997997aa7c84c57781", "patch": "@@ -411,7 +411,7 @@ xcoffout_declare_function (FILE *file, tree decl, const char *name)\n   /* Any pending .bi or .ei must occur before the .function pseudo op.\n      Otherwise debuggers will think that the function is in the previous\n      file and/or at the wrong line number.  */\n-  xcoffout_source_file (file, TREE_FILENAME (decl), 0);\n+  xcoffout_source_file (file, DECL_SOURCE_FILE (decl), 0);\n   dbxout_symbol (decl, 0);\n \n   /* .function NAME, TOP, MAPPING, TYPE, SIZE"}]}