{"sha": "4849deb1a30681b31d51da7501c6432b12324593", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0OWRlYjFhMzA2ODFiMzFkNTFkYTc1MDFjNjQzMmIxMjMyNDU5Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-15T15:13:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-15T15:13:12Z"}, "message": "tree-core.h (struct attribute_spec): Swap affects_type_identity and handler fields.\n\n\t* tree-core.h (struct attribute_spec): Swap affects_type_identity and\n\thandler fields.\n\t* config/alpha/alpha.c (vms_attribute_table): Swap\n\taffects_type_identity and handler fields, adjust comments.\n\t* config/mips/mips.c (mips_attribute_table): Likewise.\n\t* config/visium/visium.c (visium_attribute_table): Likewise.\n\t* config/epiphany/epiphany.c (epiphany_attribute_table): Likewise.\n\t* config/microblaze/microblaze.c (microblaze_attribute_table):\n\tLikewise.\n\t* config/spu/spu.c (spu_attribute_table): Likewise.\n\t* config/mcore/mcore.c (mcore_attribute_table): Likewise.\n\t* config/arc/arc.c (arc_attribute_table): Likewise.\n\t* config/m68k/m68k.c (m68k_attribute_table): Likewise.\n\t* config/v850/v850.c (v850_handle_interrupt_attribute,\n\tv850_handle_data_area_attribute): Formatting fixes.\n\t(v850_attribute_table): Swap affects_type_identity and handler\n\tfields, adjust comments.\n\t* config/m32r/m32r.c (m32r_attribute_table): Likewise.\n\t* config/arm/arm.c (arm_attribute_table): Likewise.\n\t* config/avr/avr.c (avr_attribute_table): Likewise.\n\t* config/s390/s390.c (s390_attribute_table): Likewise.\n\t* config/sh/sh.c (sh_attribute_table): Likewise.\n\t* config/i386/i386.c (ix86_handle_cconv_attribute,\n\tix86_handle_callee_pop_aggregate_return): Formatting fixes.\n\t(ix86_attribute_table): Swap affects_type_identity and handler\n\tfields, adjust comments.\n\t* config/i386/cygming.h (SUBTARGET_ATTRIBUTE_TABLE): Likewise.\n\t* config/sparc/sparc.c (sparc_attribute_table): Likewise.\n\t* config/m32c/m32c.c (m32c_attribute_table): Likewise.\n\t* config/sol2.h (SOLARIS_ATTRIBUTE_TABLE): Likewise.\n\t* config/ia64/ia64.c (ia64_attribute_table): Likewise.\n\t* config/msp430/msp430.c (msp430_attribute_table): Likewise.\n\t* config/rx/rx.c (rx_attribute_table): Likewise.\n\t* config/cr16/cr16.c (cr16_attribute_table): Likewise.\n\t* config/h8300/h8300.c (h8300_attribute_table): Likewise.\n\t* config/nvptx/nvptx.c (nvptx_attribute_table): Likewise.\n\t* config/powerpcspe/powerpcspe.c (rs6000_attribute_table): Likewise.\n\t* config/darwin.h (SUBTARGET_ATTRIBUTE_TABLE): Likewise.\n\t* config/stormy16/stormy16.c (xstormy16_attribute_table): Likewise.\n\t* config/bfin/bfin.c (bfin_attribute_table): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_attribute_table): Likewise.\n\t* config/rl78/rl78.c (rl78_attribute_table): Likewise.\n\t* config/nds32/nds32.c (nds32_attribute_table): Likewise.\n\t* doc/plugins.texi (user_attr): Likewise.  Add NULL for\n\texclude.\n\t* attribs.c (empty_attribute_table): Swap affects_type_identity and\n\thandler fields.\n\t(register_scoped_attributes, decl_attributes): Formatting fixes.\nada/\n\t* gcc-interface/utils.c (gnat_internal_attribute_table): Swap\n\taffects_type_identity and handler fields, adjust comments.\nbrig/\n\t* brig-lang.c (brig_attribute_table): Swap affects_type_identity\n\tand handler fields, adjust comments.\nc-family/\n\t* c-attribs.c (c_common_attribute_table,\n\tc_common_format_attribute_table): Swap affects_type_identity\n\tand handler fields, adjust comments.\ncp/\n\t* tree.c (cxx_attribute_table, std_attribute_table): Swap\n\taffects_type_identity and handler fields, adjust comments.\nfortran/\n\t* f95-lang.c (gfc_attribute_table): Swap affects_type_identity\n\tand handler fields, adjust comments.\nlto/\n\t* lto-lang.c (lto_attribute_table, lto_format_attribute_table): Swap\n\taffects_type_identity and handler fields, adjust comments.\ntestsuite/\n\t* g++.dg/plugin/attribute_plugin.c (user_attr): Swap\n\taffects_type_identity and handler fields, add NULL for exclude.\n\nFrom-SVN: r255699", "tree": {"sha": "a06dbec1bb73f2a50d29b0f3c6e5b331baa760bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a06dbec1bb73f2a50d29b0f3c6e5b331baa760bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4849deb1a30681b31d51da7501c6432b12324593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4849deb1a30681b31d51da7501c6432b12324593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4849deb1a30681b31d51da7501c6432b12324593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4849deb1a30681b31d51da7501c6432b12324593/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0cf4820dd596a5884fb59c2c9874ed100a7ff614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf4820dd596a5884fb59c2c9874ed100a7ff614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf4820dd596a5884fb59c2c9874ed100a7ff614"}], "stats": {"total": 1511, "additions": 790, "deletions": 721}, "files": [{"sha": "8830638d226357ede9d1e769bbd5e9a6c9e19be6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1,5 +1,54 @@\n 2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* tree-core.h (struct attribute_spec): Swap affects_type_identity and\n+\thandler fields.\n+\t* config/alpha/alpha.c (vms_attribute_table): Swap\n+\taffects_type_identity and handler fields, adjust comments.\n+\t* config/mips/mips.c (mips_attribute_table): Likewise.\n+\t* config/visium/visium.c (visium_attribute_table): Likewise.\n+\t* config/epiphany/epiphany.c (epiphany_attribute_table): Likewise.\n+\t* config/microblaze/microblaze.c (microblaze_attribute_table):\n+\tLikewise.\n+\t* config/spu/spu.c (spu_attribute_table): Likewise.\n+\t* config/mcore/mcore.c (mcore_attribute_table): Likewise.\n+\t* config/arc/arc.c (arc_attribute_table): Likewise.\n+\t* config/m68k/m68k.c (m68k_attribute_table): Likewise.\n+\t* config/v850/v850.c (v850_handle_interrupt_attribute,\n+\tv850_handle_data_area_attribute): Formatting fixes.\n+\t(v850_attribute_table): Swap affects_type_identity and handler\n+\tfields, adjust comments.\n+\t* config/m32r/m32r.c (m32r_attribute_table): Likewise.\n+\t* config/arm/arm.c (arm_attribute_table): Likewise.\n+\t* config/avr/avr.c (avr_attribute_table): Likewise.\n+\t* config/s390/s390.c (s390_attribute_table): Likewise.\n+\t* config/sh/sh.c (sh_attribute_table): Likewise.\n+\t* config/i386/i386.c (ix86_handle_cconv_attribute,\n+\tix86_handle_callee_pop_aggregate_return): Formatting fixes.\n+\t(ix86_attribute_table): Swap affects_type_identity and handler\n+\tfields, adjust comments.\n+\t* config/i386/cygming.h (SUBTARGET_ATTRIBUTE_TABLE): Likewise.\n+\t* config/sparc/sparc.c (sparc_attribute_table): Likewise.\n+\t* config/m32c/m32c.c (m32c_attribute_table): Likewise.\n+\t* config/sol2.h (SOLARIS_ATTRIBUTE_TABLE): Likewise.\n+\t* config/ia64/ia64.c (ia64_attribute_table): Likewise.\n+\t* config/msp430/msp430.c (msp430_attribute_table): Likewise.\n+\t* config/rx/rx.c (rx_attribute_table): Likewise.\n+\t* config/cr16/cr16.c (cr16_attribute_table): Likewise.\n+\t* config/h8300/h8300.c (h8300_attribute_table): Likewise.\n+\t* config/nvptx/nvptx.c (nvptx_attribute_table): Likewise.\n+\t* config/powerpcspe/powerpcspe.c (rs6000_attribute_table): Likewise.\n+\t* config/darwin.h (SUBTARGET_ATTRIBUTE_TABLE): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_attribute_table): Likewise.\n+\t* config/bfin/bfin.c (bfin_attribute_table): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_attribute_table): Likewise.\n+\t* config/rl78/rl78.c (rl78_attribute_table): Likewise.\n+\t* config/nds32/nds32.c (nds32_attribute_table): Likewise.\n+\t* doc/plugins.texi (user_attr): Likewise.  Add NULL for\n+\texclude.\n+\t* attribs.c (empty_attribute_table): Swap affects_type_identity and\n+\thandler fields.\n+\t(register_scoped_attributes, decl_attributes): Formatting fixes.\n+\n \tPR tree-optimization/83269\n \t* fold-const.c (fold_binary_loc): Perform (-A) - B -> (-B) - A\n \tsubtraction in arg0's type if type is signed and arg0 is unsigned."}, {"sha": "e414acdb885289bc380c2e9e9c3c6388cd91f270", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1,3 +1,8 @@\n+2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-interface/utils.c (gnat_internal_attribute_table): Swap\n+\taffects_type_identity and handler fields, adjust comments.\n+\n 2017-12-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Use Component_Size of"}, {"sha": "a094ac78d6fe2c910732cb605b2877281eda7989", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -107,50 +107,50 @@ static tree fake_attribute_handler (tree *, tree, tree, int, bool *);\n    this minimal set of attributes to accommodate the needs of builtins.  */\n const struct attribute_spec gnat_internal_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"const\",        0, 0,  true,  false, false, handle_const_attribute,\n-    false, NULL },\n-  { \"nothrow\",      0, 0,  true,  false, false, handle_nothrow_attribute,\n-    false, NULL },\n-  { \"pure\",         0, 0,  true,  false, false, handle_pure_attribute,\n-    false, NULL },\n-  { \"no vops\",      0, 0,  true,  false, false, handle_novops_attribute,\n-    false, NULL },\n-  { \"nonnull\",      0, -1, false, true,  true,  handle_nonnull_attribute,\n-    false, NULL },\n-  { \"sentinel\",     0, 1,  false, true,  true,  handle_sentinel_attribute,\n-    false, NULL },\n-  { \"noreturn\",     0, 0,  true,  false, false, handle_noreturn_attribute,\n-    false, NULL },\n-  { \"noinline\",     0, 0,  true,  false, false, handle_noinline_attribute,\n-    false, NULL },\n-  { \"noclone\",      0, 0,  true,  false, false, handle_noclone_attribute,\n-    false, NULL },\n-  { \"leaf\",         0, 0,  true,  false, false, handle_leaf_attribute,\n-    false, NULL },\n-  { \"always_inline\",0, 0,  true,  false, false, handle_always_inline_attribute,\n-    false, NULL },\n-  { \"malloc\",       0, 0,  true,  false, false, handle_malloc_attribute,\n-    false, NULL },\n-  { \"type generic\", 0, 0,  false, true, true, handle_type_generic_attribute,\n-    false, NULL },\n-\n-  { \"vector_size\",  1, 1,  false, true, false,  handle_vector_size_attribute,\n-    false, NULL },\n-  { \"vector_type\",  0, 0,  false, true, false,  handle_vector_type_attribute,\n-    false, NULL },\n-  { \"may_alias\",    0, 0, false, true, false, NULL, false, NULL },\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"const\",        0, 0,  true,  false, false, false,\n+    handle_const_attribute, NULL },\n+  { \"nothrow\",      0, 0,  true,  false, false, false,\n+    handle_nothrow_attribute, NULL },\n+  { \"pure\",         0, 0,  true,  false, false, false,\n+    handle_pure_attribute, NULL },\n+  { \"no vops\",      0, 0,  true,  false, false, false,\n+    handle_novops_attribute, NULL },\n+  { \"nonnull\",      0, -1, false, true,  true,  false,\n+    handle_nonnull_attribute, NULL },\n+  { \"sentinel\",     0, 1,  false, true,  true,  false,\n+    handle_sentinel_attribute, NULL },\n+  { \"noreturn\",     0, 0,  true,  false, false, false,\n+    handle_noreturn_attribute, NULL },\n+  { \"noinline\",     0, 0,  true,  false, false, false,\n+    handle_noinline_attribute, NULL },\n+  { \"noclone\",      0, 0,  true,  false, false, false,\n+    handle_noclone_attribute, NULL },\n+  { \"leaf\",         0, 0,  true,  false, false, false,\n+    handle_leaf_attribute, NULL },\n+  { \"always_inline\",0, 0,  true,  false, false, false,\n+    handle_always_inline_attribute, NULL },\n+  { \"malloc\",       0, 0,  true,  false, false, false,\n+    handle_malloc_attribute, NULL },\n+  { \"type generic\", 0, 0,  false, true, true, false,\n+    handle_type_generic_attribute, NULL },\n+\n+  { \"vector_size\",  1, 1,  false, true, false,  false,\n+    handle_vector_size_attribute, NULL },\n+  { \"vector_type\",  0, 0,  false, true, false,  false,\n+    handle_vector_type_attribute, NULL },\n+  { \"may_alias\",    0, 0, false, true, false, false, NULL, NULL },\n \n   /* ??? format and format_arg are heavy and not supported, which actually\n      prevents support for stdio builtins, which we however declare as part\n      of the common builtins.def contents.  */\n-  { \"format\",     3, 3,  false, true,  true,  fake_attribute_handler, false,\n+  { \"format\",     3, 3,  false, true,  true,  false, fake_attribute_handler,\n     NULL },\n-  { \"format_arg\", 1, 1,  false, true,  true,  fake_attribute_handler, false,\n+  { \"format_arg\", 1, 1,  false, true,  true,  false, fake_attribute_handler,\n     NULL },\n \n-  { NULL,         0, 0, false, false, false, NULL, false, NULL }\n+  { NULL,         0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Associates a GNAT tree node to a GCC tree node. It is used in"}, {"sha": "b7a7509171a51432589ddde233a3566119528639", "filename": "gcc/attribs.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -96,7 +96,7 @@ static bool attributes_initialized = false;\n \n static const struct attribute_spec empty_attribute_table[] =\n {\n-  { NULL, 0, 0, false, false, false, NULL, false, NULL }\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Return base name of the attribute.  Ie '__attr__' is turned into 'attr'.\n@@ -118,9 +118,9 @@ extract_attribute_substring (struct substring *str)\n    namespace.  The function returns the namespace into which the\n    attributes have been registered.  */\n \n-scoped_attributes*\n-register_scoped_attributes (const struct attribute_spec * attributes,\n-\t\t\t    const char* ns)\n+scoped_attributes *\n+register_scoped_attributes (const struct attribute_spec *attributes,\n+\t\t\t    const char *ns)\n {\n   scoped_attributes *result = NULL;\n \n@@ -535,8 +535,8 @@ decl_attributes (tree *node, tree attributes, int flags,\n       tree name = get_attribute_name (a);\n       tree args = TREE_VALUE (a);\n       tree *anode = node;\n-      const struct attribute_spec *spec =\n-\tlookup_scoped_attribute_spec (ns, name);\n+      const struct attribute_spec *spec\n+\t= lookup_scoped_attribute_spec (ns, name);\n       int fn_ptr_quals = 0;\n       tree fn_ptr_tmp = NULL_TREE;\n "}, {"sha": "0bb552e41cbc115d19947df699058930706e9f5b", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1,3 +1,8 @@\n+2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* brig-lang.c (brig_attribute_table): Swap affects_type_identity\n+\tand handler fields, adjust comments.\n+\n 2017-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* brig-lang.c (brig_attribute_table): Fix up comment."}, {"sha": "01908f42bb3d9a3d736d2a7769a7441dd6fa139a", "filename": "gcc/brig/brig-lang.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fbrig%2Fbrig-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fbrig%2Fbrig-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrig-lang.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -447,19 +447,19 @@ brig_localize_identifier (const char *ident)\n /* Table of machine-independent attributes supported in GIMPLE.  */\n const struct attribute_spec brig_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"leaf\",\t\t      0, 0, true,  false, false,\n-\t\t\t      handle_leaf_attribute, false, NULL },\n-  { \"const\",                  0, 0, true,  false, false,\n-\t\t\t      handle_const_attribute, false, NULL },\n-  { \"pure\",                   0, 0, true,  false, false,\n-\t\t\t      handle_pure_attribute, false, NULL },\n-  { \"nothrow\",                0, 0, true,  false, false,\n-\t\t\t      handle_nothrow_attribute, false, NULL },\n-  { \"returns_twice\",          0, 0, true,  false, false,\n-\t\t\t      handle_returns_twice_attribute, false, NULL },\n-  { NULL,                     0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"leaf\",\t\t      0, 0, true,  false, false, false,\n+\t\t\t      handle_leaf_attribute, NULL },\n+  { \"const\",                  0, 0, true,  false, false, false,\n+\t\t\t      handle_const_attribute, NULL },\n+  { \"pure\",                   0, 0, true,  false, false, false,\n+\t\t\t      handle_pure_attribute, NULL },\n+  { \"nothrow\",                0, 0, true,  false, false, false,\n+\t\t\t      handle_nothrow_attribute, NULL },\n+  { \"returns_twice\",          0, 0, true,  false, false, false,\n+\t\t\t      handle_returns_twice_attribute, NULL },\n+  { NULL,                     0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Attribute handlers.  */"}, {"sha": "e5343680a2287fd0e20ae0db1e521d5f7c021525", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1,3 +1,9 @@\n+2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-attribs.c (c_common_attribute_table,\n+\tc_common_format_attribute_table): Swap affects_type_identity\n+\tand handler fields, adjust comments.\n+\n 2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* c.opt (Wcast-function-type): New warning option."}, {"sha": "2625f87d19dafb61433d277da22f9535a6c34378", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 193, "deletions": 200, "changes": 393, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -245,236 +245,229 @@ static const struct attribute_spec::exclusions attr_const_pure_exclusions[] =\n    Current list of processed common attributes: nonnull.  */\n const struct attribute_spec c_common_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity } */\n-  { \"packed\",                 0, 0, false, false, false,\n-\t\t\t      handle_packed_attribute, false,\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"packed\",                 0, 0, false, false, false, false,\n+\t\t\t      handle_packed_attribute,\n \t                      attr_aligned_exclusions },\n-  { \"nocommon\",               0, 0, true,  false, false,\n-\t\t\t      handle_nocommon_attribute, false,\n+  { \"nocommon\",               0, 0, true,  false, false, false,\n+\t\t\t      handle_nocommon_attribute,\n \t                      attr_common_exclusions },\n-  { \"common\",                 0, 0, true,  false, false,\n-\t\t\t      handle_common_attribute, false,\n+  { \"common\",                 0, 0, true,  false, false, false,\n+\t\t\t      handle_common_attribute,\n \t                      attr_common_exclusions },\n   /* FIXME: logically, noreturn attributes should be listed as\n      \"false, true, true\" and apply to function types.  But implementing this\n      would require all the places in the compiler that use TREE_THIS_VOLATILE\n      on a decl to identify non-returning functions to be located and fixed\n      to check the function type instead.  */\n-  { \"noreturn\",               0, 0, true,  false, false,\n-\t\t\t      handle_noreturn_attribute, false,\n+  { \"noreturn\",               0, 0, true,  false, false, false,\n+\t\t\t      handle_noreturn_attribute,\n \t                      attr_noreturn_exclusions },\n-  { \"volatile\",               0, 0, true,  false, false,\n-\t\t\t      handle_noreturn_attribute, false, NULL },\n-  { \"stack_protect\",          0, 0, true,  false, false,\n-\t\t\t      handle_stack_protect_attribute, false, NULL },\n-  { \"noinline\",               0, 0, true,  false, false,\n-\t\t\t      handle_noinline_attribute, false,\n+  { \"volatile\",               0, 0, true,  false, false, false,\n+\t\t\t      handle_noreturn_attribute, NULL },\n+  { \"stack_protect\",          0, 0, true,  false, false, false,\n+\t\t\t      handle_stack_protect_attribute, NULL },\n+  { \"noinline\",               0, 0, true,  false, false, false,\n+\t\t\t      handle_noinline_attribute,\n \t                      attr_noinline_exclusions },\n-  { \"noclone\",                0, 0, true,  false, false,\n-\t\t\t      handle_noclone_attribute, false, NULL },\n-  { \"no_icf\",                 0, 0, true,  false, false,\n-\t\t\t      handle_noicf_attribute, false, NULL },\n-  { \"noipa\",\t\t      0, 0, true,  false, false,\n-\t\t\t      handle_noipa_attribute, false, NULL },\n-  { \"leaf\",                   0, 0, true,  false, false,\n-\t\t\t      handle_leaf_attribute, false, NULL },\n-  { \"always_inline\",          0, 0, true,  false, false,\n-\t\t\t      handle_always_inline_attribute, false,\n+  { \"noclone\",                0, 0, true,  false, false, false,\n+\t\t\t      handle_noclone_attribute, NULL },\n+  { \"no_icf\",                 0, 0, true,  false, false, false,\n+\t\t\t      handle_noicf_attribute, NULL },\n+  { \"noipa\",\t\t      0, 0, true,  false, false, false,\n+\t\t\t      handle_noipa_attribute, NULL },\n+  { \"leaf\",                   0, 0, true,  false, false, false,\n+\t\t\t      handle_leaf_attribute, NULL },\n+  { \"always_inline\",          0, 0, true,  false, false, false,\n+\t\t\t      handle_always_inline_attribute,\n \t                      attr_inline_exclusions },\n-  { \"gnu_inline\",             0, 0, true,  false, false,\n-\t\t\t      handle_gnu_inline_attribute, false,\n+  { \"gnu_inline\",             0, 0, true,  false, false, false,\n+\t\t\t      handle_gnu_inline_attribute,\n \t                      attr_inline_exclusions },\n-  { \"artificial\",             0, 0, true,  false, false,\n-\t\t\t      handle_artificial_attribute, false, NULL },\n-  { \"flatten\",                0, 0, true,  false, false,\n-\t\t\t      handle_flatten_attribute, false, NULL },\n-  { \"used\",                   0, 0, true,  false, false,\n-\t\t\t      handle_used_attribute, false, NULL },\n-  { \"unused\",                 0, 0, false, false, false,\n-\t\t\t      handle_unused_attribute, false, NULL },\n-  { \"externally_visible\",     0, 0, true,  false, false,\n-\t\t\t      handle_externally_visible_attribute, false, NULL },\n-  { \"no_reorder\",\t      0, 0, true, false, false,\n-\t                      handle_no_reorder_attribute, false, NULL },\n+  { \"artificial\",             0, 0, true,  false, false, false,\n+\t\t\t      handle_artificial_attribute, NULL },\n+  { \"flatten\",                0, 0, true,  false, false, false,\n+\t\t\t      handle_flatten_attribute, NULL },\n+  { \"used\",                   0, 0, true,  false, false, false,\n+\t\t\t      handle_used_attribute, NULL },\n+  { \"unused\",                 0, 0, false, false, false, false,\n+\t\t\t      handle_unused_attribute, NULL },\n+  { \"externally_visible\",     0, 0, true,  false, false, false,\n+\t\t\t      handle_externally_visible_attribute, NULL },\n+  { \"no_reorder\",\t      0, 0, true, false, false, false,\n+\t                      handle_no_reorder_attribute, NULL },\n   /* The same comments as for noreturn attributes apply to const ones.  */\n-  { \"const\",                  0, 0, true,  false, false,\n-\t\t\t      handle_const_attribute, false,\n+  { \"const\",                  0, 0, true,  false, false, false,\n+\t\t\t      handle_const_attribute,\n \t                      attr_const_pure_exclusions },\n-  { \"scalar_storage_order\",   1, 1, false, false, false,\n-\t\t\t      handle_scalar_storage_order_attribute, false, NULL },\n-  { \"transparent_union\",      0, 0, false, false, false,\n-\t\t\t      handle_transparent_union_attribute, false, NULL },\n-  { \"constructor\",            0, 1, true,  false, false,\n-\t\t\t      handle_constructor_attribute, false, NULL },\n-  { \"destructor\",             0, 1, true,  false, false,\n-\t\t\t      handle_destructor_attribute, false, NULL },\n-  { \"mode\",                   1, 1, false,  true, false,\n-\t\t\t      handle_mode_attribute, false, NULL },\n-  { \"section\",                1, 1, true,  false, false,\n-\t\t\t      handle_section_attribute, false, NULL },\n-  { \"aligned\",                0, 1, false, false, false,\n-\t\t\t      handle_aligned_attribute, false,\n+  { \"scalar_storage_order\",   1, 1, false, false, false, false,\n+\t\t\t      handle_scalar_storage_order_attribute, NULL },\n+  { \"transparent_union\",      0, 0, false, false, false, false,\n+\t\t\t      handle_transparent_union_attribute, NULL },\n+  { \"constructor\",            0, 1, true,  false, false, false,\n+\t\t\t      handle_constructor_attribute, NULL },\n+  { \"destructor\",             0, 1, true,  false, false, false,\n+\t\t\t      handle_destructor_attribute, NULL },\n+  { \"mode\",                   1, 1, false,  true, false, false,\n+\t\t\t      handle_mode_attribute, NULL },\n+  { \"section\",                1, 1, true,  false, false, false,\n+\t\t\t      handle_section_attribute, NULL },\n+  { \"aligned\",                0, 1, false, false, false, false,\n+\t\t\t      handle_aligned_attribute,\n \t                      attr_aligned_exclusions },\n-  { \"warn_if_not_aligned\",    0, 1, false, false, false,\n-\t\t\t      handle_warn_if_not_aligned_attribute,\n-\t\t\t      false, NULL },\n-  { \"weak\",                   0, 0, true,  false, false,\n-\t\t\t      handle_weak_attribute, false, NULL },\n-  { \"noplt\",                   0, 0, true,  false, false,\n-\t\t\t      handle_noplt_attribute, false, NULL },\n-  { \"ifunc\",                  1, 1, true,  false, false,\n-\t\t\t      handle_ifunc_attribute, false, NULL },\n-  { \"alias\",                  1, 1, true,  false, false,\n-\t\t\t      handle_alias_attribute, false, NULL },\n-  { \"weakref\",                0, 1, true,  false, false,\n-\t\t\t      handle_weakref_attribute, false, NULL },\n-  { \"no_instrument_function\", 0, 0, true,  false, false,\n+  { \"warn_if_not_aligned\",    0, 1, false, false, false, false,\n+\t\t\t      handle_warn_if_not_aligned_attribute, NULL },\n+  { \"weak\",                   0, 0, true,  false, false, false,\n+\t\t\t      handle_weak_attribute, NULL },\n+  { \"noplt\",                   0, 0, true,  false, false, false,\n+\t\t\t      handle_noplt_attribute, NULL },\n+  { \"ifunc\",                  1, 1, true,  false, false, false,\n+\t\t\t      handle_ifunc_attribute, NULL },\n+  { \"alias\",                  1, 1, true,  false, false, false,\n+\t\t\t      handle_alias_attribute, NULL },\n+  { \"weakref\",                0, 1, true,  false, false, false,\n+\t\t\t      handle_weakref_attribute, NULL },\n+  { \"no_instrument_function\", 0, 0, true,  false, false, false,\n \t\t\t      handle_no_instrument_function_attribute,\n-\t\t\t      false, NULL },\n-  { \"no_profile_instrument_function\",  0, 0, true, false, false,\n+\t\t\t      NULL },\n+  { \"no_profile_instrument_function\",  0, 0, true, false, false, false,\n \t\t\t      handle_no_profile_instrument_function_attribute,\n-\t\t\t      false, NULL },\n-  { \"malloc\",                 0, 0, true,  false, false,\n-\t\t\t      handle_malloc_attribute, false,\n-\t                      attr_alloc_exclusions },\n-  { \"returns_twice\",          0, 0, true,  false, false,\n-\t\t\t      handle_returns_twice_attribute, false,\n+\t\t\t      NULL },\n+  { \"malloc\",                 0, 0, true,  false, false, false,\n+\t\t\t      handle_malloc_attribute, attr_alloc_exclusions },\n+  { \"returns_twice\",          0, 0, true,  false, false, false,\n+\t\t\t      handle_returns_twice_attribute,\n \t                      attr_returns_twice_exclusions },\n-  { \"no_stack_limit\",         0, 0, true,  false, false,\n-\t\t\t      handle_no_limit_stack_attribute, false, NULL },\n-  { \"pure\",                   0, 0, true,  false, false,\n-\t\t\t      handle_pure_attribute, false,\n+  { \"no_stack_limit\",         0, 0, true,  false, false, false,\n+\t\t\t      handle_no_limit_stack_attribute, NULL },\n+  { \"pure\",                   0, 0, true,  false, false, false,\n+\t\t\t      handle_pure_attribute,\n \t                      attr_const_pure_exclusions },\n-  { \"transaction_callable\",   0, 0, false, true,  false,\n-\t\t\t      handle_tm_attribute, false, NULL },\n-  { \"transaction_unsafe\",     0, 0, false, true,  false,\n-\t\t\t      handle_tm_attribute, true, NULL },\n-  { \"transaction_safe\",       0, 0, false, true,  false,\n-\t\t\t      handle_tm_attribute, true, NULL },\n-  { \"transaction_safe_dynamic\", 0, 0, true, false,  false,\n-\t\t\t      handle_tm_attribute, false, NULL },\n-  { \"transaction_may_cancel_outer\", 0, 0, false, true, false,\n-\t\t\t      handle_tm_attribute, false, NULL },\n+  { \"transaction_callable\",   0, 0, false, true,  false, false,\n+\t\t\t      handle_tm_attribute, NULL },\n+  { \"transaction_unsafe\",     0, 0, false, true,  false, true,\n+\t\t\t      handle_tm_attribute, NULL },\n+  { \"transaction_safe\",       0, 0, false, true,  false, true,\n+\t\t\t      handle_tm_attribute, NULL },\n+  { \"transaction_safe_dynamic\", 0, 0, true, false,  false, false,\n+\t\t\t      handle_tm_attribute, NULL },\n+  { \"transaction_may_cancel_outer\", 0, 0, false, true, false, false,\n+\t\t\t      handle_tm_attribute, NULL },\n   /* ??? These two attributes didn't make the transition from the\n      Intel language document to the multi-vendor language document.  */\n-  { \"transaction_pure\",       0, 0, false, true,  false,\n-\t\t\t      handle_tm_attribute, false, NULL },\n-  { \"transaction_wrap\",       1, 1, true,  false,  false,\n-\t\t\t     handle_tm_wrap_attribute, false, NULL },\n+  { \"transaction_pure\",       0, 0, false, true,  false, false,\n+\t\t\t      handle_tm_attribute, NULL },\n+  { \"transaction_wrap\",       1, 1, true,  false,  false, false,\n+\t\t\t     handle_tm_wrap_attribute, NULL },\n   /* For internal use (marking of builtins) only.  The name contains space\n      to prevent its usage in source code.  */\n-  { \"no vops\",                0, 0, true,  false, false,\n-\t\t\t      handle_novops_attribute, false, NULL },\n-  { \"deprecated\",             0, 1, false, false, false,\n-\t\t\t      handle_deprecated_attribute, false, NULL },\n-  { \"vector_size\",\t      1, 1, false, true, false,\n-\t\t\t      handle_vector_size_attribute, true, NULL },\n-  { \"visibility\",\t      1, 1, false, false, false,\n-\t\t\t      handle_visibility_attribute, false, NULL },\n-  { \"tls_model\",\t      1, 1, true,  false, false,\n-\t\t\t      handle_tls_model_attribute, false, NULL },\n-  { \"nonnull\",                0, -1, false, true, true,\n-\t\t\t      handle_nonnull_attribute, false, NULL },\n-  { \"nonstring\",              0, 0, true, false, false,\n-\t\t\t      handle_nonstring_attribute, false, NULL },\n-  { \"nothrow\",                0, 0, true,  false, false,\n-\t\t\t      handle_nothrow_attribute, false, NULL },\n-  { \"may_alias\",\t      0, 0, false, true, false, NULL, false, NULL },\n-  { \"cleanup\",\t\t      1, 1, true, false, false,\n-\t\t\t      handle_cleanup_attribute, false, NULL },\n-  { \"warn_unused_result\",     0, 0, false, true, true,\n-\t\t\t      handle_warn_unused_result_attribute, false,\n+  { \"no vops\",                0, 0, true,  false, false, false,\n+\t\t\t      handle_novops_attribute, NULL },\n+  { \"deprecated\",             0, 1, false, false, false, false,\n+\t\t\t      handle_deprecated_attribute, NULL },\n+  { \"vector_size\",\t      1, 1, false, true, false, true,\n+\t\t\t      handle_vector_size_attribute, NULL },\n+  { \"visibility\",\t      1, 1, false, false, false, false,\n+\t\t\t      handle_visibility_attribute, NULL },\n+  { \"tls_model\",\t      1, 1, true,  false, false, false,\n+\t\t\t      handle_tls_model_attribute, NULL },\n+  { \"nonnull\",                0, -1, false, true, true, false,\n+\t\t\t      handle_nonnull_attribute, NULL },\n+  { \"nonstring\",              0, 0, true, false, false, false,\n+\t\t\t      handle_nonstring_attribute, NULL },\n+  { \"nothrow\",                0, 0, true,  false, false, false,\n+\t\t\t      handle_nothrow_attribute, NULL },\n+  { \"may_alias\",\t      0, 0, false, true, false, false, NULL, NULL },\n+  { \"cleanup\",\t\t      1, 1, true, false, false, false,\n+\t\t\t      handle_cleanup_attribute, NULL },\n+  { \"warn_unused_result\",     0, 0, false, true, true, false,\n+\t\t\t      handle_warn_unused_result_attribute,\n \t                      attr_warn_unused_result_exclusions },\n-  { \"sentinel\",               0, 1, false, true, true,\n-\t\t\t      handle_sentinel_attribute, false, NULL },\n+  { \"sentinel\",               0, 1, false, true, true, false,\n+\t\t\t      handle_sentinel_attribute, NULL },\n   /* For internal use (marking of builtins) only.  The name contains space\n      to prevent its usage in source code.  */\n-  { \"type generic\",           0, 0, false, true, true,\n-\t\t\t      handle_type_generic_attribute, false, NULL },\n-  { \"alloc_size\",\t      1, 2, false, true, true,\n-\t\t\t      handle_alloc_size_attribute, false,\n+  { \"type generic\",           0, 0, false, true, true, false,\n+\t\t\t      handle_type_generic_attribute, NULL },\n+  { \"alloc_size\",\t      1, 2, false, true, true, false,\n+\t\t\t      handle_alloc_size_attribute,\n \t                      attr_alloc_exclusions },\n-  { \"cold\",                   0, 0, true,  false, false,\n-\t\t\t      handle_cold_attribute, false,\n+  { \"cold\",                   0, 0, true,  false, false, false,\n+\t\t\t      handle_cold_attribute,\n \t                      attr_cold_hot_exclusions },\n-  { \"hot\",                    0, 0, true,  false, false,\n-\t\t\t      handle_hot_attribute, false,\n+  { \"hot\",                    0, 0, true,  false, false, false,\n+\t\t\t      handle_hot_attribute,\n \t                      attr_cold_hot_exclusions },\n   { \"no_address_safety_analysis\",\n-\t\t\t      0, 0, true, false, false,\n+\t\t\t      0, 0, true, false, false, false,\n \t\t\t      handle_no_address_safety_analysis_attribute,\n-\t\t\t      false, NULL },\n-  { \"no_sanitize\",\t      1, 1, true, false, false,\n-\t\t\t      handle_no_sanitize_attribute,\n-\t\t\t      false, NULL },\n-  { \"no_sanitize_address\",    0, 0, true, false, false,\n-\t\t\t      handle_no_sanitize_address_attribute,\n-\t\t\t      false, NULL },\n-  { \"no_sanitize_thread\",     0, 0, true, false, false,\n-\t\t\t      handle_no_sanitize_thread_attribute,\n-\t\t\t      false, NULL },\n-  { \"no_sanitize_undefined\",  0, 0, true, false, false,\n-\t\t\t      handle_no_sanitize_undefined_attribute,\n-\t\t\t      false, NULL },\n-  { \"asan odr indicator\",     0, 0, true, false, false,\n-\t\t\t      handle_asan_odr_indicator_attribute,\n-\t\t\t      false, NULL },\n-  { \"warning\",\t\t      1, 1, true,  false, false,\n-\t\t\t      handle_error_attribute, false, NULL },\n-  { \"error\",\t\t      1, 1, true,  false, false,\n-\t\t\t      handle_error_attribute, false, NULL },\n-  { \"target\",                 1, -1, true, false, false,\n-\t\t\t      handle_target_attribute, false, NULL },\n-  { \"target_clones\",          1, -1, true, false, false,\n-\t\t\t      handle_target_clones_attribute, false, NULL },\n-  { \"optimize\",               1, -1, true, false, false,\n-\t\t\t      handle_optimize_attribute, false, NULL },\n+\t\t\t      NULL },\n+  { \"no_sanitize\",\t      1, 1, true, false, false, false,\n+\t\t\t      handle_no_sanitize_attribute, NULL },\n+  { \"no_sanitize_address\",    0, 0, true, false, false, false,\n+\t\t\t      handle_no_sanitize_address_attribute, NULL },\n+  { \"no_sanitize_thread\",     0, 0, true, false, false, false,\n+\t\t\t      handle_no_sanitize_thread_attribute, NULL },\n+  { \"no_sanitize_undefined\",  0, 0, true, false, false, false,\n+\t\t\t      handle_no_sanitize_undefined_attribute, NULL },\n+  { \"asan odr indicator\",     0, 0, true, false, false, false,\n+\t\t\t      handle_asan_odr_indicator_attribute, NULL },\n+  { \"warning\",\t\t      1, 1, true,  false, false, false,\n+\t\t\t      handle_error_attribute, NULL },\n+  { \"error\",\t\t      1, 1, true,  false, false, false,\n+\t\t\t      handle_error_attribute, NULL },\n+  { \"target\",                 1, -1, true, false, false, false,\n+\t\t\t      handle_target_attribute, NULL },\n+  { \"target_clones\",          1, -1, true, false, false, false,\n+\t\t\t      handle_target_clones_attribute, NULL },\n+  { \"optimize\",               1, -1, true, false, false, false,\n+\t\t\t      handle_optimize_attribute, NULL },\n   /* For internal use only.  The leading '*' both prevents its usage in\n      source code and signals that it may be overridden by machine tables.  */\n-  { \"*tm regparm\",            0, 0, false, true, true,\n-\t\t\t      ignore_attribute, false, NULL },\n-  { \"no_split_stack\",\t      0, 0, true,  false, false,\n-\t\t\t      handle_no_split_stack_attribute, false, NULL },\n+  { \"*tm regparm\",            0, 0, false, true, true, false,\n+\t\t\t      ignore_attribute, NULL },\n+  { \"no_split_stack\",\t      0, 0, true,  false, false, false,\n+\t\t\t      handle_no_split_stack_attribute, NULL },\n   /* For internal use (marking of builtins and runtime functions) only.\n      The name contains space to prevent its usage in source code.  */\n-  { \"fn spec\",\t\t      1, 1, false, true, true,\n-\t\t\t      handle_fnspec_attribute, false, NULL },\n-  { \"warn_unused\",            0, 0, false, false, false,\n-\t\t\t      handle_warn_unused_attribute, false, NULL },\n-  { \"returns_nonnull\",        0, 0, false, true, true,\n-\t\t\t      handle_returns_nonnull_attribute, false, NULL },\n-  { \"omp declare simd\",       0, -1, true,  false, false,\n-\t\t\t      handle_omp_declare_simd_attribute, false, NULL },\n-  { \"cilk simd function\",     0, -1, true,  false, false,\n-\t\t\t      handle_omp_declare_simd_attribute, false, NULL },\n-  { \"simd\",\t\t      0, 1, true,  false, false,\n-\t\t\t      handle_simd_attribute, false, NULL },\n-  { \"omp declare target\",     0, 0, true, false, false,\n-\t\t\t      handle_omp_declare_target_attribute, false, NULL },\n-  { \"omp declare target link\", 0, 0, true, false, false,\n-\t\t\t      handle_omp_declare_target_attribute, false, NULL },\n-  { \"alloc_align\",\t      1, 1, false, true, true,\n-\t\t\t      handle_alloc_align_attribute, false,\n+  { \"fn spec\",\t\t      1, 1, false, true, true, false,\n+\t\t\t      handle_fnspec_attribute, NULL },\n+  { \"warn_unused\",            0, 0, false, false, false, false,\n+\t\t\t      handle_warn_unused_attribute, NULL },\n+  { \"returns_nonnull\",        0, 0, false, true, true, false,\n+\t\t\t      handle_returns_nonnull_attribute, NULL },\n+  { \"omp declare simd\",       0, -1, true,  false, false, false,\n+\t\t\t      handle_omp_declare_simd_attribute, NULL },\n+  { \"cilk simd function\",     0, -1, true,  false, false, false,\n+\t\t\t      handle_omp_declare_simd_attribute, NULL },\n+  { \"simd\",\t\t      0, 1, true,  false, false, false,\n+\t\t\t      handle_simd_attribute, NULL },\n+  { \"omp declare target\",     0, 0, true, false, false, false,\n+\t\t\t      handle_omp_declare_target_attribute, NULL },\n+  { \"omp declare target link\", 0, 0, true, false, false, false,\n+\t\t\t      handle_omp_declare_target_attribute, NULL },\n+  { \"alloc_align\",\t      1, 1, false, true, true, false,\n+\t\t\t      handle_alloc_align_attribute,\n \t                      attr_alloc_exclusions },\n-  { \"assume_aligned\",\t      1, 2, false, true, true,\n-\t\t\t      handle_assume_aligned_attribute, false, NULL },\n-  { \"designated_init\",        0, 0, false, true, false,\n-\t\t\t      handle_designated_init_attribute, false, NULL },\n-  { \"bnd_variable_size\",      0, 0, true,  false, false,\n-\t\t\t      handle_bnd_variable_size_attribute, false, NULL },\n-  { \"bnd_legacy\",             0, 0, true, false, false,\n-\t\t\t      handle_bnd_legacy, false, NULL },\n-  { \"bnd_instrument\",         0, 0, true, false, false,\n-\t\t\t      handle_bnd_instrument, false, NULL },\n-  { \"fallthrough\",\t      0, 0, false, false, false,\n-\t\t\t      handle_fallthrough_attribute, false, NULL },\n-  { \"patchable_function_entry\",\t1, 2, true, false, false,\n+  { \"assume_aligned\",\t      1, 2, false, true, true, false,\n+\t\t\t      handle_assume_aligned_attribute, NULL },\n+  { \"designated_init\",        0, 0, false, true, false, false,\n+\t\t\t      handle_designated_init_attribute, NULL },\n+  { \"bnd_variable_size\",      0, 0, true,  false, false, false,\n+\t\t\t      handle_bnd_variable_size_attribute, NULL },\n+  { \"bnd_legacy\",             0, 0, true, false, false, false,\n+\t\t\t      handle_bnd_legacy, NULL },\n+  { \"bnd_instrument\",         0, 0, true, false, false, false,\n+\t\t\t      handle_bnd_instrument, NULL },\n+  { \"fallthrough\",\t      0, 0, false, false, false, false,\n+\t\t\t      handle_fallthrough_attribute, NULL },\n+  { \"patchable_function_entry\",\t1, 2, true, false, false, false,\n \t\t\t      handle_patchable_function_entry_attribute,\n-\t\t\t      false, NULL },\n-  { \"nocf_check\",\t      0, 0, false, true, true,\n-\t\t\t      handle_nocf_check_attribute, true, NULL },\n-  { NULL,                     0, 0, false, false, false, NULL, false, NULL }\n+\t\t\t      NULL },\n+  { \"nocf_check\",\t      0, 0, false, true, true, true,\n+\t\t\t      handle_nocf_check_attribute, NULL },\n+  { NULL,                     0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Give the specifications for the format attributes, used by C and all\n@@ -486,13 +479,13 @@ const struct attribute_spec c_common_attribute_table[] =\n    Current list of processed format attributes: format, format_arg.  */\n const struct attribute_spec c_common_format_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity } */\n-  { \"format\",                 3, 3, false, true,  true,\n-\t\t\t      handle_format_attribute, false, NULL },\n-  { \"format_arg\",             1, 1, false, true,  true,\n-\t\t\t      handle_format_arg_attribute, false, NULL },\n-  { NULL,                     0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"format\",                 3, 3, false, true,  true, false,\n+\t\t\t      handle_format_attribute, NULL },\n+  { \"format_arg\",             1, 1, false, true,  true, false,\n+\t\t\t      handle_format_arg_attribute, NULL },\n+  { NULL,                     0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Returns TRUE iff the attribute indicated by ATTR_ID takes a plain"}, {"sha": "63821fc62350a7e4357b5336a948ea08d8856878", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -7505,11 +7505,11 @@ common_object_handler (tree *node, tree name ATTRIBUTE_UNUSED,\n \n static const struct attribute_spec vms_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { COMMON_OBJECT,   0, 1, true,  false, false, common_object_handler, false,\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { COMMON_OBJECT,   0, 1, true,  false, false, false, common_object_handler,\n     NULL },\n-  { NULL,            0, 0, false, false, false, NULL, false, NULL }\n+  { NULL,            0, 0, false, false, false, false, NULL, NULL }\n };\n \n void"}, {"sha": "3fc867f09c4068397888dd8a7da3de04d1b3a818", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -217,25 +217,25 @@ static tree arc_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n    machine specific supported attributes.  */\n const struct attribute_spec arc_attribute_table[] =\n {\n- /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-      affects_type_identity, exclusions } */\n-  { \"interrupt\", 1, 1, true, false, false, arc_handle_interrupt_attribute,\n-      true, NULL },\n+ /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+      affects_type_identity, handler, exclude } */\n+  { \"interrupt\", 1, 1, true, false, false, true,\n+    arc_handle_interrupt_attribute, NULL },\n   /* Function calls made to this symbol must be done indirectly, because\n      it may lie outside of the 21/25 bit addressing range of a normal function\n      call.  */\n-  { \"long_call\",    0, 0, false, true,  true,  NULL, false, NULL },\n+  { \"long_call\",    0, 0, false, true,  true,  false, NULL, NULL },\n   /* Whereas these functions are always known to reside within the 25 bit\n      addressing range of unconditionalized bl.  */\n-  { \"medium_call\",   0, 0, false, true,  true,  NULL, false, NULL },\n+  { \"medium_call\",   0, 0, false, true,  true, false, NULL, NULL },\n   /* And these functions are always known to reside within the 21 bit\n      addressing range of blcc.  */\n-  { \"short_call\",   0, 0, false, true,  true,  NULL, false, NULL },\n+  { \"short_call\",   0, 0, false, true,  true,  false, NULL, NULL },\n   /* Function which are not having the prologue and epilogue generated\n      by the compiler.  */\n-  { \"naked\", 0, 0, true, false, false, arc_handle_fndecl_attribute, false,\n+  { \"naked\", 0, 0, true, false, false,  false, arc_handle_fndecl_attribute,\n     NULL },\n-  { NULL, 0, 0, false, false, false, NULL, false, NULL }\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n static int arc_comp_type_attributes (const_tree, const_tree);\n static void arc_file_start (void);"}, {"sha": "1b2bcc3f74f1e74d90a888aa84e01a2c42bb8860", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -322,25 +322,25 @@ static HOST_WIDE_INT arm_constant_alignment (const_tree, HOST_WIDE_INT);\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n   /* Function calls made to this symbol must be done indirectly, because\n      it may lie outside of the 26 bit addressing range of a normal function\n      call.  */\n-  { \"long_call\",    0, 0, false, true,  true,  NULL, false, NULL },\n+  { \"long_call\",    0, 0, false, true,  true,  false, NULL, NULL },\n   /* Whereas these functions are always known to reside within the 26 bit\n      addressing range.  */\n-  { \"short_call\",   0, 0, false, true,  true,  NULL, false, NULL },\n+  { \"short_call\",   0, 0, false, true,  true,  false, NULL, NULL },\n   /* Specify the procedure call conventions for a function.  */\n-  { \"pcs\",          1, 1, false, true,  true,  arm_handle_pcs_attribute,\n-    false, NULL },\n+  { \"pcs\",          1, 1, false, true,  true,  false, arm_handle_pcs_attribute,\n+    NULL },\n   /* Interrupt Service Routines have special prologue and epilogue requirements.  */\n-  { \"isr\",          0, 1, false, false, false, arm_handle_isr_attribute,\n-    false, NULL },\n-  { \"interrupt\",    0, 1, false, false, false, arm_handle_isr_attribute,\n-    false, NULL },\n-  { \"naked\",        0, 0, true,  false, false, arm_handle_fndecl_attribute,\n-    false, NULL },\n+  { \"isr\",          0, 1, false, false, false, false, arm_handle_isr_attribute,\n+    NULL },\n+  { \"interrupt\",    0, 1, false, false, false, false, arm_handle_isr_attribute,\n+    NULL },\n+  { \"naked\",        0, 0, true,  false, false, false,\n+    arm_handle_fndecl_attribute, NULL },\n #ifdef ARM_PE\n   /* ARM/PE has three new attributes:\n      interfacearm - ?\n@@ -351,24 +351,24 @@ static const struct attribute_spec arm_attribute_table[] =\n      them with spaces.  We do NOT support this.  Instead, use __declspec\n      multiple times.\n   */\n-  { \"dllimport\",    0, 0, true,  false, false, NULL, false, NULL },\n-  { \"dllexport\",    0, 0, true,  false, false, NULL, false, NULL },\n-  { \"interfacearm\", 0, 0, true,  false, false, arm_handle_fndecl_attribute,\n-    false, NULL },\n+  { \"dllimport\",    0, 0, true,  false, false, false, NULL, NULL },\n+  { \"dllexport\",    0, 0, true,  false, false, false, NULL, NULL },\n+  { \"interfacearm\", 0, 0, true,  false, false, false,\n+    arm_handle_fndecl_attribute, NULL },\n #elif TARGET_DLLIMPORT_DECL_ATTRIBUTES\n-  { \"dllimport\",    0, 0, false, false, false, handle_dll_attribute, false,\n+  { \"dllimport\",    0, 0, false, false, false, false, handle_dll_attribute,\n     NULL },\n-  { \"dllexport\",    0, 0, false, false, false, handle_dll_attribute, false,\n+  { \"dllexport\",    0, 0, false, false, false, false, handle_dll_attribute,\n     NULL },\n-  { \"notshared\",    0, 0, false, true, false, arm_handle_notshared_attribute,\n-    false, NULL },\n+  { \"notshared\",    0, 0, false, true, false, false,\n+    arm_handle_notshared_attribute, NULL },\n #endif\n   /* ARMv8-M Security Extensions support.  */\n-  { \"cmse_nonsecure_entry\", 0, 0, true, false, false,\n-    arm_handle_cmse_nonsecure_entry, false, NULL },\n-  { \"cmse_nonsecure_call\", 0, 0, true, false, false,\n-    arm_handle_cmse_nonsecure_call, true, NULL },\n-  { NULL, 0, 0, false, false, false, NULL, false, NULL }\n+  { \"cmse_nonsecure_entry\", 0, 0, true, false, false, false,\n+    arm_handle_cmse_nonsecure_entry, NULL },\n+  { \"cmse_nonsecure_call\", 0, 0, true, false, false, true,\n+    arm_handle_cmse_nonsecure_call, NULL },\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n \f\n /* Initialize the GCC target structure.  */"}, {"sha": "39decb820c21ec9fa461ca9f5f94c0e6f3b06dfb", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -9871,34 +9871,33 @@ avr_eval_addr_attrib (rtx x)\n \n \n /* AVR attributes.  */\n-static const struct attribute_spec\n-avr_attribute_table[] =\n-{\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"progmem\",   0, 0, false, false, false,  avr_handle_progmem_attribute,\n-    false, NULL },\n-  { \"signal\",    0, 0, true,  false, false,  avr_handle_fndecl_attribute,\n-    false, NULL },\n-  { \"interrupt\", 0, 0, true,  false, false,  avr_handle_fndecl_attribute,\n-    false, NULL },\n-  { \"no_gccisr\", 0, 0, true,  false, false,  avr_handle_fndecl_attribute,\n-    false, NULL },\n-  { \"naked\",     0, 0, false, true,  true,   avr_handle_fntype_attribute,\n-    false, NULL },\n-  { \"OS_task\",   0, 0, false, true,  true,   avr_handle_fntype_attribute,\n-    false, NULL },\n-  { \"OS_main\",   0, 0, false, true,  true,   avr_handle_fntype_attribute,\n-    false, NULL },\n-  { \"io\",        0, 1, true, false, false,  avr_handle_addr_attribute,\n-    false, NULL },\n-  { \"io_low\",    0, 1, true, false, false,  avr_handle_addr_attribute,\n-    false, NULL },\n-  { \"address\",   1, 1, true, false, false,  avr_handle_addr_attribute,\n-    false, NULL },\n-  { \"absdata\",   0, 0, true, false, false,  avr_handle_absdata_attribute,\n-    false, NULL },\n-  { NULL,        0, 0, false, false, false, NULL, false, NULL }\n+static const struct attribute_spec avr_attribute_table[] =\n+{\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"progmem\",   0, 0, false, false, false, false,\n+    avr_handle_progmem_attribute, NULL },\n+  { \"signal\",    0, 0, true,  false, false, false,\n+    avr_handle_fndecl_attribute, NULL },\n+  { \"interrupt\", 0, 0, true,  false, false, false,\n+    avr_handle_fndecl_attribute, NULL },\n+  { \"no_gccisr\", 0, 0, true,  false, false, false,\n+    avr_handle_fndecl_attribute, NULL },\n+  { \"naked\",     0, 0, false, true,  true,  false,\n+    avr_handle_fntype_attribute, NULL },\n+  { \"OS_task\",   0, 0, false, true,  true,  false,\n+    avr_handle_fntype_attribute, NULL },\n+  { \"OS_main\",   0, 0, false, true,  true,  false,\n+    avr_handle_fntype_attribute, NULL },\n+  { \"io\",        0, 1, true, false, false,  false,\n+    avr_handle_addr_attribute, NULL },\n+  { \"io_low\",    0, 1, true, false, false,  false,\n+    avr_handle_addr_attribute, NULL },\n+  { \"address\",   1, 1, true, false, false,  false,\n+    avr_handle_addr_attribute, NULL },\n+  { \"absdata\",   0, 0, true, false, false,  false,\n+    avr_handle_absdata_attribute, NULL },\n+  { NULL,        0, 0, false, false, false, false, NULL, NULL }\n };\n \n "}, {"sha": "96ef232f08535c08ff9120aae0e359d081d1f3b0", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -4905,31 +4905,31 @@ bfin_handle_l2_attribute (tree *node, tree ARG_UNUSED (name),\n /* Table of valid machine attributes.  */\n static const struct attribute_spec bfin_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"interrupt_handler\", 0, 0, false, true,  true, handle_int_attribute,\n-    false, NULL },\n-  { \"exception_handler\", 0, 0, false, true,  true, handle_int_attribute,\n-    false, NULL },\n-  { \"nmi_handler\", 0, 0, false, true,  true, handle_int_attribute, false,\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"interrupt_handler\", 0, 0, false, true,  true, false,\n+    handle_int_attribute, NULL },\n+  { \"exception_handler\", 0, 0, false, true,  true, false,\n+    handle_int_attribute, NULL },\n+  { \"nmi_handler\", 0, 0, false, true,  true, false, handle_int_attribute,\n     NULL },\n-  { \"nesting\", 0, 0, false, true,  true, NULL, false, NULL },\n-  { \"kspisusp\", 0, 0, false, true,  true, NULL, false, NULL },\n-  { \"saveall\", 0, 0, false, true,  true, NULL, false, NULL },\n-  { \"longcall\",  0, 0, false, true,  true,  bfin_handle_longcall_attribute,\n-    false, NULL },\n-  { \"shortcall\", 0, 0, false, true,  true,  bfin_handle_longcall_attribute,\n-    false, NULL },\n-  { \"l1_text\", 0, 0, true, false, false,  bfin_handle_l1_text_attribute,\n-    false, NULL },\n-  { \"l1_data\", 0, 0, true, false, false,  bfin_handle_l1_data_attribute,\n-    false, NULL },\n-  { \"l1_data_A\", 0, 0, true, false, false, bfin_handle_l1_data_attribute,\n-    false, NULL },\n-  { \"l1_data_B\", 0, 0, true, false, false,  bfin_handle_l1_data_attribute,\n-    false, NULL },\n-  { \"l2\", 0, 0, true, false, false,  bfin_handle_l2_attribute, false, NULL },\n-  { NULL, 0, 0, false, false, false, NULL, false, NULL }\n+  { \"nesting\", 0, 0, false, true,  true, false, NULL, NULL },\n+  { \"kspisusp\", 0, 0, false, true,  true, false, NULL, NULL },\n+  { \"saveall\", 0, 0, false, true,  true, false, NULL, NULL },\n+  { \"longcall\",  0, 0, false, true,  true, false,\n+    bfin_handle_longcall_attribute, NULL },\n+  { \"shortcall\", 0, 0, false, true,  true, false,\n+    bfin_handle_longcall_attribute, NULL },\n+  { \"l1_text\", 0, 0, true, false, false, false,\n+    bfin_handle_l1_text_attribute, NULL },\n+  { \"l1_data\", 0, 0, true, false, false, false,\n+    bfin_handle_l1_data_attribute, NULL },\n+  { \"l1_data_A\", 0, 0, true, false, false, false,\n+    bfin_handle_l1_data_attribute, NULL },\n+  { \"l1_data_B\", 0, 0, true, false, false, false,\n+    bfin_handle_l1_data_attribute, NULL },\n+  { \"l2\", 0, 0, true, false, false, false, bfin_handle_l2_attribute, NULL },\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n \f\n /* Implementation of TARGET_ASM_INTEGER.  When using FD-PIC, we need to"}, {"sha": "70c0e34ed8ec1006832348aab28d76a2b3d8484b", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -206,10 +206,10 @@ static void cr16_print_operand_address (FILE *, machine_mode, rtx);\n /* Table of machine attributes.  */\n static const struct attribute_spec cr16_attribute_table[] = {\n   /* ISRs have special prologue and epilogue requirements.  */\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions }.  */\n-  {\"interrupt\", 0, 0, false, true, true, NULL, false, NULL},\n-  {NULL, 0, 0, false, false, false, NULL, false, NULL}\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude }.  */\n+  {\"interrupt\", 0, 0, false, true, true, false, NULL, NULL},\n+  {NULL, 0, 0, false, false, false, false, NULL, NULL}\n };\n \n /* TARGET_ASM_UNALIGNED_xx_OP generates .?byte directive"}, {"sha": "c20a48430faa9ea4cf78fda1eac95f574ea34456", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -740,12 +740,12 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n \n /* Extra attributes for Darwin.  */\n #define SUBTARGET_ATTRIBUTE_TABLE\t\t\t\t\t     \\\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,     \\\n-       affects_type_identity, exclusions } */\t\t\t\t     \\\n-  { \"apple_kext_compatibility\", 0, 0, false, true, false,\t\t     \\\n-    darwin_handle_kext_attribute, false, NULL },\t\t\t     \\\n-  { \"weak_import\", 0, 0, true, false, false,\t\t\t\t     \\\n-    darwin_handle_weak_import_attribute, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\t\t     \\\n+       affects_type_identity, handler, exclude } */\t\t\t     \\\n+  { \"apple_kext_compatibility\", 0, 0, false, true, false, false,\t     \\\n+    darwin_handle_kext_attribute, NULL },\t\t\t\t     \\\n+  { \"weak_import\", 0, 0, true, false, false, false,\t\t\t     \\\n+    darwin_handle_weak_import_attribute, NULL }\n \n /* Make local constant labels linker-visible, so that if one follows a\n    weak_global constant, ld64 will be able to separate the atoms.  */"}, {"sha": "912823160dae4fb7809829d6903ad7942e2ff5bd", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -460,14 +460,16 @@ epiphany_init_reg_tables (void)\n \n static const struct attribute_spec epiphany_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"interrupt\",  0, 9, true,  false, false, epiphany_handle_interrupt_attribute, true, NULL },\n-  { \"forwarder_section\", 1, 1, true, false, false, epiphany_handle_forwarder_attribute, false, NULL },\n-  { \"long_call\",  0, 0, false, true, true, NULL, false, NULL },\n-  { \"short_call\", 0, 0, false, true, true, NULL, false, NULL },\n-  { \"disinterrupt\", 0, 0, false, true, true, NULL, true, NULL },\n-  { NULL,         0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"interrupt\",  0, 9, true,  false, false, true,\n+    epiphany_handle_interrupt_attribute, NULL },\n+  { \"forwarder_section\", 1, 1, true, false, false, false,\n+    epiphany_handle_forwarder_attribute, NULL },\n+  { \"long_call\",  0, 0, false, true, true, false, NULL, NULL },\n+  { \"short_call\", 0, 0, false, true, true, false, NULL, NULL },\n+  { \"disinterrupt\", 0, 0, false, true, true, true, NULL, NULL },\n+  { NULL,         0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Handle an \"interrupt\" attribute; arguments as in"}, {"sha": "dd5b69c44f242f83088ba47a5f3968967506dea4", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -5424,23 +5424,23 @@ h8300_insert_attributes (tree node, tree *attributes)\n \n static const struct attribute_spec h8300_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"interrupt_handler\", 0, 0, true,  false, false,\n-    h8300_handle_fndecl_attribute, false, NULL },\n-  { \"saveall\",           0, 0, true,  false, false,\n-    h8300_handle_fndecl_attribute, false, NULL },\n-  { \"OS_Task\",           0, 0, true,  false, false,\n-    h8300_handle_fndecl_attribute, false, NULL },\n-  { \"monitor\",           0, 0, true,  false, false,\n-    h8300_handle_fndecl_attribute, false, NULL },\n-  { \"function_vector\",   0, 0, true,  false, false,\n-    h8300_handle_fndecl_attribute, false, NULL },\n-  { \"eightbit_data\",     0, 0, true,  false, false,\n-    h8300_handle_eightbit_data_attribute, false, NULL },\n-  { \"tiny_data\",         0, 0, true,  false, false,\n-    h8300_handle_tiny_data_attribute, false, NULL },\n-  { NULL,                0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"interrupt_handler\", 0, 0, true,  false, false, false,\n+    h8300_handle_fndecl_attribute, NULL },\n+  { \"saveall\",           0, 0, true,  false, false, false,\n+    h8300_handle_fndecl_attribute, NULL },\n+  { \"OS_Task\",           0, 0, true,  false, false, false,\n+    h8300_handle_fndecl_attribute, NULL },\n+  { \"monitor\",           0, 0, true,  false, false, false,\n+    h8300_handle_fndecl_attribute, NULL },\n+  { \"function_vector\",   0, 0, true,  false, false, false,\n+    h8300_handle_fndecl_attribute, NULL },\n+  { \"eightbit_data\",     0, 0, true,  false, false, false,\n+    h8300_handle_eightbit_data_attribute, NULL },\n+  { \"tiny_data\",         0, 0, true,  false, false, false,\n+    h8300_handle_tiny_data_attribute, NULL },\n+  { NULL,                0, 0, false, false, false, false, NULL, NULL }\n };\n \n "}, {"sha": "12233c2416bfe99759d45e6c5af65909c583f5f7", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -447,10 +447,10 @@ do {\t\t\t\t\t\t\\\n #define TARGET_USE_LOCAL_THUNK_ALIAS_P(DECL) (!DECL_ONE_ONLY (DECL))\n \n #define SUBTARGET_ATTRIBUTE_TABLE \\\n-  { \"selectany\", 0, 0, true, false, false, ix86_handle_selectany_attribute, \\\n-    false, NULL }\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n+  { \"selectany\", 0, 0, true, false, false, false, \\\n+    ix86_handle_selectany_attribute, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n \n /*  mcount() does not need a counter variable.  */\n #undef NO_PROFILE_COUNTERS"}, {"sha": "551395f4e54c78d1cc56708f9491e072dea6b237", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 46, "deletions": 48, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -6270,10 +6270,8 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n    arguments as in struct attribute_spec.handler.  */\n \n static tree\n-ix86_handle_cconv_attribute (tree *node, tree name,\n-\t\t\t\t   tree args,\n-\t\t\t\t   int,\n-\t\t\t\t   bool *no_add_attrs)\n+ix86_handle_cconv_attribute (tree *node, tree name, tree args, int,\n+\t\t\t     bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE\n       && TREE_CODE (*node) != METHOD_TYPE\n@@ -40230,10 +40228,8 @@ x86_order_regs_for_local_alloc (void)\n /* Handle a \"callee_pop_aggregate_return\" attribute; arguments as\n    in struct attribute_spec handler.  */\n static tree\n-ix86_handle_callee_pop_aggregate_return (tree *node, tree name,\n-\t\t\t\t\t      tree args,\n-\t\t\t\t\t      int,\n-\t\t\t\t\t      bool *no_add_attrs)\n+ix86_handle_callee_pop_aggregate_return (tree *node, tree name, tree args, int,\n+\t\t\t\t\t bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE\n       && TREE_CODE (*node) != METHOD_TYPE\n@@ -44711,72 +44707,74 @@ ix86_expand_round_sse4 (rtx op0, rtx op1)\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ix86_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n   /* Stdcall attribute says callee is responsible for popping arguments\n      if they are not variable.  */\n-  { \"stdcall\",   0, 0, false, true,  true,  ix86_handle_cconv_attribute,\n-    true, NULL },\n+  { \"stdcall\",   0, 0, false, true,  true,  true, ix86_handle_cconv_attribute,\n+    NULL },\n   /* Fastcall attribute says callee is responsible for popping arguments\n      if they are not variable.  */\n-  { \"fastcall\",  0, 0, false, true,  true,  ix86_handle_cconv_attribute,\n-    true, NULL },\n+  { \"fastcall\",  0, 0, false, true,  true,  true, ix86_handle_cconv_attribute,\n+    NULL },\n   /* Thiscall attribute says callee is responsible for popping arguments\n      if they are not variable.  */\n-  { \"thiscall\",  0, 0, false, true,  true,  ix86_handle_cconv_attribute,\n-    true, NULL },\n+  { \"thiscall\",  0, 0, false, true,  true,  true, ix86_handle_cconv_attribute,\n+    NULL },\n   /* Cdecl attribute says the callee is a normal C declaration */\n-  { \"cdecl\",     0, 0, false, true,  true,  ix86_handle_cconv_attribute,\n-    true, NULL },\n+  { \"cdecl\",     0, 0, false, true,  true,  true, ix86_handle_cconv_attribute,\n+    NULL },\n   /* Regparm attribute specifies how many integer arguments are to be\n      passed in registers.  */\n-  { \"regparm\",   1, 1, false, true,  true,  ix86_handle_cconv_attribute,\n-    true, NULL },\n+  { \"regparm\",   1, 1, false, true,  true,  true, ix86_handle_cconv_attribute,\n+    NULL },\n   /* Sseregparm attribute says we are using x86_64 calling conventions\n      for FP arguments.  */\n-  { \"sseregparm\", 0, 0, false, true, true, ix86_handle_cconv_attribute,\n-    true, NULL },\n+  { \"sseregparm\", 0, 0, false, true, true,  true, ix86_handle_cconv_attribute,\n+    NULL },\n   /* The transactional memory builtins are implicitly regparm or fastcall\n      depending on the ABI.  Override the generic do-nothing attribute that\n      these builtins were declared with.  */\n-  { \"*tm regparm\", 0, 0, false, true, true, ix86_handle_tm_regparm_attribute,\n-    true, NULL },\n+  { \"*tm regparm\", 0, 0, false, true, true, true,\n+    ix86_handle_tm_regparm_attribute, NULL },\n   /* force_align_arg_pointer says this function realigns the stack at entry.  */\n   { (const char *)&ix86_force_align_arg_pointer_string, 0, 0,\n-    false, true,  true, ix86_handle_force_align_arg_pointer_attribute, false,\n+    false, true,  true, false, ix86_handle_force_align_arg_pointer_attribute,\n     NULL },\n #if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n-  { \"dllimport\", 0, 0, false, false, false, handle_dll_attribute, false, NULL },\n-  { \"dllexport\", 0, 0, false, false, false, handle_dll_attribute, false, NULL },\n-  { \"shared\",    0, 0, true,  false, false, ix86_handle_shared_attribute,\n-    false, NULL },\n+  { \"dllimport\", 0, 0, false, false, false, false, handle_dll_attribute,\n+    NULL },\n+  { \"dllexport\", 0, 0, false, false, false, false, handle_dll_attribute,\n+    NULL },\n+  { \"shared\",    0, 0, true,  false, false, false,\n+    ix86_handle_shared_attribute, false, NULL },\n #endif\n-  { \"ms_struct\", 0, 0, false, false,  false, ix86_handle_struct_attribute,\n-    false, NULL },\n-  { \"gcc_struct\", 0, 0, false, false,  false, ix86_handle_struct_attribute,\n-    false, NULL },\n+  { \"ms_struct\", 0, 0, false, false,  false, false,\n+    ix86_handle_struct_attribute, NULL },\n+  { \"gcc_struct\", 0, 0, false, false,  false, false,\n+    ix86_handle_struct_attribute, NULL },\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n   SUBTARGET_ATTRIBUTE_TABLE,\n #endif\n   /* ms_abi and sysv_abi calling convention function attributes.  */\n-  { \"ms_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute, true, NULL },\n-  { \"sysv_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute, true,\n+  { \"ms_abi\", 0, 0, false, true, true, true, ix86_handle_abi_attribute, NULL },\n+  { \"sysv_abi\", 0, 0, false, true, true, true, ix86_handle_abi_attribute,\n     NULL },\n-  { \"ms_abi va_list\", 0, 0, false, false, false, NULL, false, NULL },\n-  { \"sysv_abi va_list\", 0, 0, false, false, false, NULL, false, NULL },\n-  { \"ms_hook_prologue\", 0, 0, true, false, false, ix86_handle_fndecl_attribute,\n-    false, NULL },\n-  { \"callee_pop_aggregate_return\", 1, 1, false, true, true,\n-    ix86_handle_callee_pop_aggregate_return, true, NULL },\n-  { \"interrupt\", 0, 0, false, true, true,\n-    ix86_handle_interrupt_attribute, false, NULL },\n-  { \"no_caller_saved_registers\", 0, 0, false, true, true,\n-    ix86_handle_no_caller_saved_registers_attribute, false, NULL },\n-  { \"naked\", 0, 0, true, false, false,\n-    ix86_handle_fndecl_attribute, false, NULL },\n+  { \"ms_abi va_list\", 0, 0, false, false, false, false, NULL, NULL },\n+  { \"sysv_abi va_list\", 0, 0, false, false, false, false, NULL, NULL },\n+  { \"ms_hook_prologue\", 0, 0, true, false, false, false,\n+    ix86_handle_fndecl_attribute, NULL },\n+  { \"callee_pop_aggregate_return\", 1, 1, false, true, true, true,\n+    ix86_handle_callee_pop_aggregate_return, NULL },\n+  { \"interrupt\", 0, 0, false, true, true, false,\n+    ix86_handle_interrupt_attribute, NULL },\n+  { \"no_caller_saved_registers\", 0, 0, false, true, true, false,\n+    ix86_handle_no_caller_saved_registers_attribute, NULL },\n+  { \"naked\", 0, 0, true, false, false, false,\n+    ix86_handle_fndecl_attribute, NULL },\n \n   /* End element.  */\n-  { NULL, 0, 0, false, false, false, NULL, false, NULL }\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Implement targetm.vectorize.builtin_vectorization_cost.  */"}, {"sha": "b16c3401aa090cbdcc29851cba465975f743c77d", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -359,18 +359,18 @@ static bool ia64_expand_vec_perm_const_1 (struct expand_vec_perm_d *d);\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ia64_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"syscall_linkage\", 0, 0, false, true,  true,  NULL, false, NULL },\n-  { \"model\",\t       1, 1, true, false, false, ia64_handle_model_attribute,\n-    false, NULL },\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"syscall_linkage\", 0, 0, false, true,  true,  false, NULL, NULL },\n+  { \"model\",\t       1, 1, true, false, false,  false,\n+    ia64_handle_model_attribute, NULL },\n #if TARGET_ABI_OPEN_VMS\n-  { \"common_object\",   1, 1, true, false, false,\n-    ia64_vms_common_object_attribute, false, NULL },\n+  { \"common_object\",   1, 1, true, false, false, false,\n+    ia64_vms_common_object_attribute, NULL },\n #endif\n-  { \"version_id\",      1, 1, true, false, false,\n-    ia64_handle_version_id_attribute, false, NULL },\n-  { NULL,\t       0, 0, false, false, false, NULL, false, NULL }\n+  { \"version_id\",      1, 1, true, false, false, false,\n+    ia64_handle_version_id_attribute, NULL },\n+  { NULL,\t       0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Initialize the GCC target structure.  */"}, {"sha": "244e6bcc160d5e9b50773c4e46d0ecb3a7961a23", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -3000,14 +3000,15 @@ current_function_special_page_vector (rtx x)\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE m32c_attribute_table\n static const struct attribute_spec m32c_attribute_table[] = {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  {\"interrupt\", 0, 0, false, false, false, interrupt_handler, false, NULL},\n-  {\"bank_switch\", 0, 0, false, false, false, interrupt_handler, false, NULL},\n-  {\"fast_interrupt\", 0, 0, false, false, false, interrupt_handler, false, NULL},\n-  {\"function_vector\", 1, 1, true,  false, false, function_vector_handler,\n-   false, NULL},\n-  {0, 0, 0, 0, 0, 0, 0, false, NULL}\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"interrupt\", 0, 0, false, false, false, false, interrupt_handler, NULL },\n+  { \"bank_switch\", 0, 0, false, false, false, false, interrupt_handler, NULL },\n+  { \"fast_interrupt\", 0, 0, false, false, false, false,\n+    interrupt_handler, NULL },\n+  { \"function_vector\", 1, 1, true,  false, false, false,\n+    function_vector_handler, NULL },\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n \n #undef TARGET_COMP_TYPE_ATTRIBUTES"}, {"sha": "830e7e742fbf117d31e653fffc3f3020b8d5a0e6", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -110,12 +110,12 @@ static HOST_WIDE_INT m32r_starting_frame_offset (void);\n \n static const struct attribute_spec m32r_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"interrupt\", 0, 0, true,  false, false, NULL, false, NULL },\n-  { \"model\",     1, 1, true,  false, false, m32r_handle_model_attribute,\n-    false, NULL },\n-  { NULL,        0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"interrupt\", 0, 0, true,  false, false, false, NULL, NULL },\n+  { \"model\",     1, 1, true,  false, false, false, m32r_handle_model_attribute,\n+    NULL },\n+  { NULL,        0, 0, false, false, false, false, NULL, NULL }\n };\n \f\n /* Initialize the GCC target structure.  */"}, {"sha": "075ab47cc0b30844eb5b06a0e0d1ab6c3bf1e2f2", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -347,15 +347,15 @@ static bool m68k_modes_tieable_p (machine_mode, machine_mode);\n \n static const struct attribute_spec m68k_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"interrupt\", 0, 0, true,  false, false, m68k_handle_fndecl_attribute,\n-    false },\n-  { \"interrupt_handler\", 0, 0, true,  false, false,\n-    m68k_handle_fndecl_attribute, false, NULL },\n-  { \"interrupt_thread\", 0, 0, true,  false, false,\n-    m68k_handle_fndecl_attribute, false, NULL },\n-  { NULL, 0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"interrupt\", 0, 0, true,  false, false, false,\n+    m68k_handle_fndecl_attribute, NULL },\n+  { \"interrupt_handler\", 0, 0, true,  false, false, false,\n+    m68k_handle_fndecl_attribute, NULL },\n+  { \"interrupt_thread\", 0, 0, true,  false, false, false,\n+    m68k_handle_fndecl_attribute, NULL },\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n \n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "4bd1671f99d28bb64f10a54366f08782f8eaa845", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -151,13 +151,13 @@ static bool\t  mcore_modes_tieable_p\t\t(machine_mode, machine_mode);\n \n static const struct attribute_spec mcore_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"dllexport\", 0, 0, true,  false, false, NULL, false, NULL },\n-  { \"dllimport\", 0, 0, true,  false, false, NULL, false, NULL },\n-  { \"naked\",     0, 0, true,  false, false, mcore_handle_naked_attribute,\n-    false, NULL },\n-  { NULL,        0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"dllexport\", 0, 0, true,  false, false, false, NULL, NULL },\n+  { \"dllimport\", 0, 0, true,  false, false, false, NULL, NULL },\n+  { \"naked\",     0, 0, true,  false, false, false,\n+    mcore_handle_naked_attribute, NULL },\n+  { NULL,        0, 0, false, false, false, false, NULL, NULL }\n };\n \f\n /* Initialize the GCC target structure.  */"}, {"sha": "a808bd06133701f89e7da6965b025523c75a099b", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -215,18 +215,13 @@ int fast_interrupt;\n int save_volatiles;\n \n const struct attribute_spec microblaze_attribute_table[] = {\n-  /* name         min_len, max_len, decl_req, type_req, fn_type, req_handler,\n-     affects_type_identity, exclusions */\n-  {\"interrupt_handler\", 0,       0,     true,    false,   false,        NULL,\n-    false, NULL },\n-  {\"break_handler\",     0,       0,     true,    false,   false,        NULL,\n-    false, NULL },\n-  {\"fast_interrupt\",    0,       0,     true,    false,   false,        NULL,\n-    false, NULL },\n-  {\"save_volatiles\"   , 0,       0,     true,    false,   false,        NULL,\n-    false, NULL },\n-  { NULL,        \t0,       0,    false,    false,   false,        NULL,\n-    false, NULL }\n+  /* name         min_len, max_len, decl_req, type_req, fn_type_req,\n+     affects_type_identity, handler, exclude */\n+  {\"interrupt_handler\",\t0,       0,    true, false, false, false, NULL, NULL },\n+  {\"break_handler\",\t0,       0,    true, false, false, false, NULL, NULL },\n+  {\"fast_interrupt\",\t0,       0,    true, false, false, false, NULL, NULL },\n+  {\"save_volatiles\",\t0,       0,    true, false, false, false, NULL, NULL },\n+  { NULL,        \t0,       0,   false, false, false, false, NULL, NULL }\n };\n \n static int microblaze_interrupt_function_p (tree);"}, {"sha": "d6f7e28c030a13e4680d8bb29a5e70f97ebba25a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -595,29 +595,29 @@ static tree mips_handle_use_shadow_register_set_attr (tree *, tree, tree, int,\n \n /* The value of TARGET_ATTRIBUTE_TABLE.  */\n static const struct attribute_spec mips_attribute_table[] = {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       om_diagnostic } */\n-  { \"long_call\",   0, 0, false, true,  true,  NULL, false, NULL },\n-  { \"short_call\",  0, 0, false, true,  true,  NULL, false, NULL },\n-  { \"far\",     \t   0, 0, false, true,  true,  NULL, false, NULL },\n-  { \"near\",        0, 0, false, true,  true,  NULL, false, NULL },\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"long_call\",   0, 0, false, true,  true,  false, NULL, NULL },\n+  { \"short_call\",  0, 0, false, true,  true,  false, NULL, NULL },\n+  { \"far\",     \t   0, 0, false, true,  true,  false, NULL, NULL },\n+  { \"near\",        0, 0, false, true,  true,  false, NULL, NULL },\n   /* We would really like to treat \"mips16\" and \"nomips16\" as type\n      attributes, but GCC doesn't provide the hooks we need to support\n      the right conversion rules.  As declaration attributes, they affect\n      code generation but don't carry other semantics.  */\n-  { \"mips16\", \t   0, 0, true,  false, false, NULL, false, NULL },\n-  { \"nomips16\",    0, 0, true,  false, false, NULL, false, NULL },\n-  { \"micromips\",   0, 0, true,  false, false, NULL, false, NULL },\n-  { \"nomicromips\", 0, 0, true,  false, false, NULL, false, NULL },\n-  { \"nocompression\", 0, 0, true,  false, false, NULL, false, NULL },\n+  { \"mips16\", \t   0, 0, true,  false, false, false, NULL, NULL },\n+  { \"nomips16\",    0, 0, true,  false, false, false, NULL, NULL },\n+  { \"micromips\",   0, 0, true,  false, false, false, NULL, NULL },\n+  { \"nomicromips\", 0, 0, true,  false, false, false, NULL, NULL },\n+  { \"nocompression\", 0, 0, true,  false, false, false, NULL, NULL },\n   /* Allow functions to be specified as interrupt handlers */\n-  { \"interrupt\",   0, 1, false, true,  true, mips_handle_interrupt_attr,\n-    false, NULL },\n-  { \"use_shadow_register_set\",\t0, 1, false, true,  true,\n-    mips_handle_use_shadow_register_set_attr, false, NULL },\n-  { \"keep_interrupts_masked\",\t0, 0, false, true,  true, NULL, false, NULL },\n-  { \"use_debug_exception_return\", 0, 0, false, true,  true, NULL, false, NULL },\n-  { NULL,\t   0, 0, false, false, false, NULL, false, NULL }\n+  { \"interrupt\",   0, 1, false, true,  true, false, mips_handle_interrupt_attr,\n+    NULL },\n+  { \"use_shadow_register_set\",\t0, 1, false, true,  true, false,\n+    mips_handle_use_shadow_register_set_attr, NULL },\n+  { \"keep_interrupts_masked\",\t0, 0, false, true,  true, false, NULL, NULL },\n+  { \"use_debug_exception_return\", 0, 0, false, true, true, false, NULL, NULL },\n+  { NULL,\t   0, 0, false, false, false, false, NULL, NULL }\n };\n \f\n /* A table describing all the processors GCC knows about; see"}, {"sha": "e8f4c9f36521113b129cfa23567b21931118f208", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -2049,28 +2049,28 @@ msp430_data_attr (tree * node,\n /* Table of MSP430-specific attributes.  */\n const struct attribute_spec msp430_attribute_table[] =\n {\n-  /* Name        min_num_args     type_req,             affects_type_identity\n-\t\t      max_num_args,     fn_type_req\t\texclusions\n-                          decl_req               handler.  */\n-  { ATTR_INTR,        0, 1, true,  false, false, msp430_attr, false, NULL },\n-  { ATTR_NAKED,       0, 0, true,  false, false, msp430_attr, false, NULL },\n-  { ATTR_REENT,       0, 0, true,  false, false, msp430_attr, false, NULL },\n-  { ATTR_CRIT,        0, 0, true,  false, false, msp430_attr, false, NULL },\n-  { ATTR_WAKEUP,      0, 0, true,  false, false, msp430_attr, false, NULL },\n-\n-  { ATTR_LOWER,       0, 0, true,  false, false, msp430_section_attr, false,\n+  /* Name        min_num_args     type_req,             handler\n+\t\t      max_num_args,     fn_type_req\t\texclude\n+                          decl_req               affects_type_identity.  */\n+  { ATTR_INTR,        0, 1, true,  false, false, false, msp430_attr, NULL },\n+  { ATTR_NAKED,       0, 0, true,  false, false, false, msp430_attr, NULL },\n+  { ATTR_REENT,       0, 0, true,  false, false, false, msp430_attr, NULL },\n+  { ATTR_CRIT,        0, 0, true,  false, false, false, msp430_attr, NULL },\n+  { ATTR_WAKEUP,      0, 0, true,  false, false, false, msp430_attr, NULL },\n+\n+  { ATTR_LOWER,       0, 0, true,  false, false, false, msp430_section_attr,\n     NULL },\n-  { ATTR_UPPER,       0, 0, true,  false, false, msp430_section_attr, false,\n+  { ATTR_UPPER,       0, 0, true,  false, false, false, msp430_section_attr,\n     NULL },\n-  { ATTR_EITHER,      0, 0, true,  false, false, msp430_section_attr, false,\n+  { ATTR_EITHER,      0, 0, true,  false, false, false, msp430_section_attr,\n     NULL },\n \n-  { ATTR_NOINIT,      0, 0, true,  false, false, msp430_data_attr, false,\n+  { ATTR_NOINIT,      0, 0, true,  false, false, false, msp430_data_attr,\n     NULL },\n-  { ATTR_PERSIST,     0, 0, true,  false, false, msp430_data_attr, false,\n+  { ATTR_PERSIST,     0, 0, true,  false, false, false, msp430_data_attr,\n     NULL },\n \n-  { NULL,             0, 0, false, false, false, NULL, false, NULL }\n+  { NULL,             0, 0, false, false, false, false, NULL,  NULL }\n };\n \n #undef  TARGET_ASM_FUNCTION_PROLOGUE"}, {"sha": "e4ba5ff8cb6175c00929d170c81e48e3712a1e63", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -83,34 +83,34 @@ static const char * const nds32_intrinsic_register_names[] =\n static const struct attribute_spec nds32_attribute_table[] =\n {\n   /* Syntax: { name, min_len, max_len, decl_required, type_required,\n-\t       function_type_required, handler, affects_type_identity,\n-\t       exclusions } */\n+\t       function_type_required, affects_type_identity, handler,\n+\t       exclude } */\n \n   /* The interrupt vid: [0-63]+ (actual vector number starts from 9 to 72).  */\n-  { \"interrupt\",    1, 64, false, false, false, NULL, false, NULL },\n+  { \"interrupt\",    1, 64, false, false, false, false, NULL, NULL },\n   /* The exception vid: [1-8]+  (actual vector number starts from 1 to 8).  */\n-  { \"exception\",    1,  8, false, false, false, NULL, false, NULL },\n+  { \"exception\",    1,  8, false, false, false, false, NULL, NULL },\n   /* Argument is user's interrupt numbers.  The vector number is always 0.  */\n-  { \"reset\",        1,  1, false, false, false, NULL, false, NULL },\n+  { \"reset\",        1,  1, false, false, false, false, NULL, NULL },\n \n   /* The attributes describing isr nested type.  */\n-  { \"nested\",       0,  0, false, false, false, NULL, false, NULL },\n-  { \"not_nested\",   0,  0, false, false, false, NULL, false, NULL },\n-  { \"nested_ready\", 0,  0, false, false, false, NULL, false, NULL },\n+  { \"nested\",       0,  0, false, false, false, false, NULL, NULL },\n+  { \"not_nested\",   0,  0, false, false, false, false, NULL, NULL },\n+  { \"nested_ready\", 0,  0, false, false, false, false, NULL, NULL },\n \n   /* The attributes describing isr register save scheme.  */\n-  { \"save_all\",     0,  0, false, false, false, NULL, false, NULL },\n-  { \"partial_save\", 0,  0, false, false, false, NULL, false, NULL },\n+  { \"save_all\",     0,  0, false, false, false, false, NULL, NULL },\n+  { \"partial_save\", 0,  0, false, false, false, false, NULL, NULL },\n \n   /* The attributes used by reset attribute.  */\n-  { \"nmi\",          1,  1, false, false, false, NULL, false, NULL },\n-  { \"warm\",         1,  1, false, false, false, NULL, false, NULL },\n+  { \"nmi\",          1,  1, false, false, false, false, NULL, NULL },\n+  { \"warm\",         1,  1, false, false, false, false, NULL, NULL },\n \n   /* The attribute telling no prologue/epilogue.  */\n-  { \"naked\",        0,  0, false, false, false, NULL, false, NULL },\n+  { \"naked\",        0,  0, false, false, false, false, NULL, NULL },\n \n   /* The last attribute spec is set to be NULL.  */\n-  { NULL,           0,  0, false, false, false, NULL, false, NULL }\n+  { NULL,           0,  0, false, false, false, false, NULL, NULL }\n };\n \n "}, {"sha": "f57b4f9b33beb15d532a62ef336a9f29cee59d3a", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -4457,13 +4457,13 @@ nvptx_handle_shared_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n /* Table of valid machine attributes.  */\n static const struct attribute_spec nvptx_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"kernel\", 0, 0, true, false,  false, nvptx_handle_kernel_attribute, false,\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"kernel\", 0, 0, true, false,  false, false, nvptx_handle_kernel_attribute,\n     NULL },\n-  { \"shared\", 0, 0, true, false,  false, nvptx_handle_shared_attribute, false,\n+  { \"shared\", 0, 0, true, false,  false, false, nvptx_handle_shared_attribute,\n     NULL },\n-  { NULL, 0, 0, false, false, false, NULL, false, NULL }\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n \f\n /* Limit vector alignments to BIGGEST_ALIGNMENT.  */"}, {"sha": "7d1124223d22114ba4a9fe7a996062455f29b729", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1533,22 +1533,22 @@ static const char alt_reg_names[][8] =\n \n static const struct attribute_spec rs6000_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"altivec\",   1, 1, false, true,  false, rs6000_handle_altivec_attribute,\n-    false, NULL },\n-  { \"longcall\",  0, 0, false, true,  true,  rs6000_handle_longcall_attribute,\n-    false, NULL },\n-  { \"shortcall\", 0, 0, false, true,  true,  rs6000_handle_longcall_attribute,\n-    false, NULL },\n-  { \"ms_struct\", 0, 0, false, false, false, rs6000_handle_struct_attribute,\n-    false, NULL },\n-  { \"gcc_struct\", 0, 0, false, false, false, rs6000_handle_struct_attribute,\n-    false, NULL },\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"altivec\",   1, 1, false, true,  false, false,\n+    rs6000_handle_altivec_attribute, NULL },\n+  { \"longcall\",  0, 0, false, true,  true,  false,\n+    rs6000_handle_longcall_attribute, NULL },\n+  { \"shortcall\", 0, 0, false, true,  true,  false,\n+    rs6000_handle_longcall_attribute, NULL },\n+  { \"ms_struct\", 0, 0, false, false, false, false,\n+    rs6000_handle_struct_attribute, NULL },\n+  { \"gcc_struct\", 0, 0, false, false, false, false,\n+    rs6000_handle_struct_attribute, NULL },\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n   SUBTARGET_ATTRIBUTE_TABLE,\n #endif\n-  { NULL,        0, 0, false, false, false, NULL, false, NULL }\n+  { NULL,        0, 0, false, false, false, false, NULL, NULL }\n };\n \f\n #ifndef TARGET_PROFILE_KERNEL"}, {"sha": "e2532b13b56c254efd1937d2bee75bfbbbbf7d17", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -857,17 +857,17 @@ rl78_handle_saddr_attribute (tree * node,\n /* Table of RL78-specific attributes.  */\n const struct attribute_spec rl78_attribute_table[] =\n {\n-  /* Name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-     affects_type_identity, exclusions.  */\n-  { \"interrupt\",      0, 0, true, false, false, rl78_handle_func_attribute,\n-    false, NULL },\n-  { \"brk_interrupt\",  0, 0, true, false, false, rl78_handle_func_attribute,\n-    false, NULL },\n-  { \"naked\",          0, 0, true, false, false, rl78_handle_naked_attribute,\n-    false, NULL },\n-  { \"saddr\",          0, 0, true, false, false, rl78_handle_saddr_attribute,\n-    false, NULL },\n-  { NULL,             0, 0, false, false, false, NULL, false, NULL }\n+  /* Name, min_len, max_len, decl_req, type_req, fn_type_req,\n+     affects_type_identity, handler, exclude.  */\n+  { \"interrupt\",      0, 0, true, false, false, false,\n+    rl78_handle_func_attribute, NULL },\n+  { \"brk_interrupt\",  0, 0, true, false, false, false,\n+    rl78_handle_func_attribute, NULL },\n+  { \"naked\",          0, 0, true, false, false, false,\n+    rl78_handle_naked_attribute, NULL },\n+  { \"saddr\",          0, 0, true, false, false, false,\n+    rl78_handle_saddr_attribute, NULL },\n+  { NULL,             0, 0, false, false, false, false, NULL, NULL }\n };\n \n "}, {"sha": "215a1f4d3e4c413bcaeba3d88b7553fc45eedc62", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1518,22 +1518,22 @@ static const char alt_reg_names[][8] =\n \n static const struct attribute_spec rs6000_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"altivec\",   1, 1, false, true,  false, rs6000_handle_altivec_attribute,\n-    false, NULL },\n-  { \"longcall\",  0, 0, false, true,  true,  rs6000_handle_longcall_attribute,\n-    false, NULL },\n-  { \"shortcall\", 0, 0, false, true,  true,  rs6000_handle_longcall_attribute,\n-    false, NULL },\n-  { \"ms_struct\", 0, 0, false, false, false, rs6000_handle_struct_attribute,\n-    false, NULL },\n-  { \"gcc_struct\", 0, 0, false, false, false, rs6000_handle_struct_attribute,\n-    false, NULL },\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"altivec\",   1, 1, false, true,  false, false,\n+    rs6000_handle_altivec_attribute, NULL },\n+  { \"longcall\",  0, 0, false, true,  true,  false,\n+    rs6000_handle_longcall_attribute, NULL },\n+  { \"shortcall\", 0, 0, false, true,  true,  false,\n+    rs6000_handle_longcall_attribute, NULL },\n+  { \"ms_struct\", 0, 0, false, false, false, false,\n+    rs6000_handle_struct_attribute, NULL },\n+  { \"gcc_struct\", 0, 0, false, false, false, false,\n+    rs6000_handle_struct_attribute, NULL },\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n   SUBTARGET_ATTRIBUTE_TABLE,\n #endif\n-  { NULL,        0, 0, false, false, false, NULL, false, NULL }\n+  { NULL,        0, 0, false, false, false, false, NULL, NULL }\n };\n \f\n #ifndef TARGET_PROFILE_KERNEL"}, {"sha": "071cca5a947da91e38b3d9dc44df6b500bce9069", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -2731,17 +2731,17 @@ rx_handle_vector_attribute (tree * node,\n /* Table of RX specific attributes.  */\n const struct attribute_spec rx_attribute_table[] =\n {\n-  /* Name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-     affects_type_identity, exclusions.  */\n-  { \"fast_interrupt\", 0, 0, true, false, false, rx_handle_func_attribute,\n-    false, NULL },\n-  { \"interrupt\",      0, -1, true, false, false, rx_handle_func_attribute,\n-    false, NULL },\n-  { \"naked\",          0, 0, true, false, false, rx_handle_func_attribute,\n-    false, NULL },\n-  { \"vector\",         1, -1, true, false, false, rx_handle_vector_attribute,\n-    false, NULL },\n-  { NULL,             0, 0, false, false, false, NULL, false, NULL }\n+  /* Name, min_len, max_len, decl_req, type_req, fn_type_req,\n+     affects_type_identity, handler, exclude.  */\n+  { \"fast_interrupt\", 0, 0, true, false, false, false,\n+    rx_handle_func_attribute, NULL },\n+  { \"interrupt\",      0, -1, true, false, false, false,\n+    rx_handle_func_attribute, NULL },\n+  { \"naked\",          0, 0, true, false, false, false,\n+    rx_handle_func_attribute, NULL },\n+  { \"vector\",         1, -1, true, false, false, false,\n+    rx_handle_vector_attribute, NULL },\n+  { NULL,             0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Implement TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE.  */"}, {"sha": "b87b49e2060e748dd3757df12e1c4779461cb867", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1178,12 +1178,12 @@ s390_handle_vectorbool_attribute (tree *node, tree name ATTRIBUTE_UNUSED,\n }\n \n static const struct attribute_spec s390_attribute_table[] = {\n-  { \"hotpatch\", 2, 2, true, false, false,\n-    s390_handle_hotpatch_attribute, false, NULL },\n-  { \"s390_vector_bool\", 0, 0, false, true, false,\n-    s390_handle_vectorbool_attribute, true, NULL },\n+  { \"hotpatch\", 2, 2, true, false, false, false,\n+    s390_handle_hotpatch_attribute, NULL },\n+  { \"s390_vector_bool\", 0, 0, false, true, false, true,\n+    s390_handle_vectorbool_attribute, NULL },\n   /* End element.  */\n-  { NULL,        0, 0, false, false, false, NULL, false, NULL }\n+  { NULL,        0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Return the alignment for LABEL.  We default to the -falign-labels"}, {"sha": "a627e8f35998f0ed27144132f95508ca07d3c114", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -329,25 +329,25 @@ static bool sh_can_change_mode_class (machine_mode, machine_mode, reg_class_t);\n \f\n static const struct attribute_spec sh_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"interrupt_handler\", 0, 0, true,  false, false,\n-    sh_handle_interrupt_handler_attribute, false, NULL },\n-  { \"sp_switch\",         1, 1, true,  false, false,\n-     sh_handle_sp_switch_attribute, false, NULL },\n-  { \"trap_exit\",         1, 1, true,  false, false,\n-    sh_handle_trap_exit_attribute, false, NULL },\n-  { \"renesas\",           0, 0, false, true, false,\n-    sh_handle_renesas_attribute, false, NULL },\n-  { \"trapa_handler\",     0, 0, true,  false, false,\n-    sh_handle_interrupt_handler_attribute, false, NULL },\n-  { \"nosave_low_regs\",   0, 0, true,  false, false,\n-    sh_handle_interrupt_handler_attribute, false, NULL },\n-  { \"resbank\",           0, 0, true,  false, false,\n-    sh_handle_resbank_handler_attribute, false, NULL },\n-  { \"function_vector\",   1, 1, true,  false, false,\n-    sh2a_handle_function_vector_handler_attribute, false, NULL },\n-  { NULL,                0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"interrupt_handler\", 0, 0, true,  false, false, false,\n+    sh_handle_interrupt_handler_attribute, NULL },\n+  { \"sp_switch\",         1, 1, true,  false, false, false,\n+     sh_handle_sp_switch_attribute, NULL },\n+  { \"trap_exit\",         1, 1, true,  false, false, false,\n+    sh_handle_trap_exit_attribute, NULL },\n+  { \"renesas\",           0, 0, false, true, false, false,\n+    sh_handle_renesas_attribute, NULL },\n+  { \"trapa_handler\",     0, 0, true,  false, false, false,\n+    sh_handle_interrupt_handler_attribute, NULL },\n+  { \"nosave_low_regs\",   0, 0, true,  false, false, false,\n+    sh_handle_interrupt_handler_attribute, NULL },\n+  { \"resbank\",           0, 0, true,  false, false, false,\n+    sh_handle_resbank_handler_attribute, NULL },\n+  { \"function_vector\",   1, 1, true,  false, false, false,\n+    sh2a_handle_function_vector_handler_attribute, NULL },\n+  { NULL,                0, 0, false, false, false, false, NULL, NULL }\n };\n \f\n /* Initialize the GCC target structure.  */"}, {"sha": "268ab13e4ee5926d1c135a0a15e8b7c0b8eea01d", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -406,8 +406,8 @@ along with GCC; see the file COPYING3.  If not see\n /* #pragma init and #pragma fini are implemented on top of init and\n    fini attributes.  */\n #define SOLARIS_ATTRIBUTE_TABLE\t\t\t\t\t\t\\\n-  { \"init\",      0, 0, true,  false,  false, NULL, false, NULL },\t\\\n-  { \"fini\",      0, 0, true,  false,  false, NULL, false, NULL }\n+  { \"init\",      0, 0, true,  false,  false, false, NULL, NULL },\t\\\n+  { \"fini\",      0, 0, true,  false,  false, false, NULL, NULL }\n \n /* Solaris-specific #pragmas are implemented on top of attributes.  Hook in\n    the bits from config/sol2.c.  */"}, {"sha": "fc50f9b1aa03d527d4417f045f970050dc83fa07", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -691,10 +691,10 @@ static HOST_WIDE_INT sparc_constant_alignment (const_tree, HOST_WIDE_INT);\n /* Table of valid machine attributes.  */\n static const struct attribute_spec sparc_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       do_diagnostic, exclusions } */\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       do_diagnostic, handler, exclude } */\n   SUBTARGET_ATTRIBUTE_TABLE,\n-  { NULL,        0, 0, false, false, false, NULL, false, NULL }\n+  { NULL,        0, 0, false, false, false, false, NULL, NULL }\n };\n #endif\n \f"}, {"sha": "c1c79a2656df19e1099de6a8ba6847df93f63996", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -7215,13 +7215,13 @@ spu_constant_alignment (const_tree, HOST_WIDE_INT align)\n /*  Table of machine attributes.  */\n static const struct attribute_spec spu_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"naked\",          0, 0, true,  false, false, spu_handle_fndecl_attribute,\n-    false, NULL },\n-  { \"spu_vector\",     0, 0, false, true,  false, spu_handle_vector_attribute,\n-    false, NULL },\n-  { NULL,             0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"naked\",          0, 0, true,  false, false, false,\n+    spu_handle_fndecl_attribute, NULL },\n+  { \"spu_vector\",     0, 0, false, true,  false, false,\n+    spu_handle_vector_attribute, NULL },\n+  { NULL,             0, 0, false, false, false, false, NULL, NULL }\n };\n \n /*  TARGET overrides.  */"}, {"sha": "bf7269391b501ddb40df366758d9365931306f35", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -2189,15 +2189,15 @@ static tree xstormy16_handle_below100_attribute\n \n static const struct attribute_spec xstormy16_attribute_table[] =\n {\n-  /* name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-     affects_type_identity, exclusions.  */\n-  { \"interrupt\", 0, 0, false, true,  true,\n-    xstormy16_handle_interrupt_attribute , false, NULL },\n-  { \"BELOW100\",  0, 0, false, false, false,\n-    xstormy16_handle_below100_attribute, false, NULL },\n-  { \"below100\",  0, 0, false, false, false,\n-    xstormy16_handle_below100_attribute, false, NULL },\n-  { NULL,        0, 0, false, false, false, NULL, false, NULL }\n+  /* name, min_len, max_len, decl_req, type_req, fn_type_req,\n+     affects_type_identity, handler, exclude.  */\n+  { \"interrupt\", 0, 0, false, true,  true, false,\n+    xstormy16_handle_interrupt_attribute, NULL },\n+  { \"BELOW100\",  0, 0, false, false, false, false,\n+    xstormy16_handle_below100_attribute, NULL },\n+  { \"below100\",  0, 0, false, false, false, false,\n+    xstormy16_handle_below100_attribute, NULL },\n+  { NULL,        0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Handle an \"interrupt\" attribute;"}, {"sha": "a26f5d655fff177fea1c5f2515c04751138fc56e", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -2072,8 +2072,7 @@ v850_set_data_area (tree decl, v850_data_area data_area)\n /* Handle an \"interrupt\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n static tree\n-v850_handle_interrupt_attribute (tree * node,\n-                                 tree name,\n+v850_handle_interrupt_attribute (tree *node, tree name,\n                                  tree args ATTRIBUTE_UNUSED,\n                                  int flags ATTRIBUTE_UNUSED,\n                                  bool * no_add_attrs)\n@@ -2091,8 +2090,7 @@ v850_handle_interrupt_attribute (tree * node,\n /* Handle a \"sda\", \"tda\" or \"zda\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n static tree\n-v850_handle_data_area_attribute (tree* node,\n-                                 tree name,\n+v850_handle_data_area_attribute (tree *node, tree name,\n                                  tree args ATTRIBUTE_UNUSED,\n                                  int flags ATTRIBUTE_UNUSED,\n                                  bool * no_add_attrs)\n@@ -3187,19 +3185,19 @@ v850_adjust_insn_length (rtx_insn *insn, int length)\n \n static const struct attribute_spec v850_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"interrupt_handler\", 0, 0, true,  false, false,\n-    v850_handle_interrupt_attribute, false, NULL },\n-  { \"interrupt\",         0, 0, true,  false, false,\n-    v850_handle_interrupt_attribute, false, NULL },\n-  { \"sda\",               0, 0, true,  false, false,\n-    v850_handle_data_area_attribute, false, NULL },\n-  { \"tda\",               0, 0, true,  false, false,\n-    v850_handle_data_area_attribute, false, NULL },\n-  { \"zda\",               0, 0, true,  false, false,\n-    v850_handle_data_area_attribute, false, NULL },\n-  { NULL,                0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"interrupt_handler\", 0, 0, true,  false, false, false,\n+    v850_handle_interrupt_attribute, NULL },\n+  { \"interrupt\",         0, 0, true,  false, false, false,\n+    v850_handle_interrupt_attribute, NULL },\n+  { \"sda\",               0, 0, true,  false, false, false,\n+    v850_handle_data_area_attribute, NULL },\n+  { \"tda\",               0, 0, true,  false, false, false,\n+    v850_handle_data_area_attribute, NULL },\n+  { \"zda\",               0, 0, true,  false, false, false,\n+    v850_handle_data_area_attribute, NULL },\n+  { NULL,                0, 0, false, false, false, false, NULL, NULL }\n };\n \f\n static void"}, {"sha": "4165214f5b78b9d1100e65b6a733e127b20298b7", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -145,11 +145,11 @@ static inline bool current_function_has_lr_slot (void);\n    interrupt -- specifies this function is an interrupt handler.   */\n static const struct attribute_spec visium_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  {\"interrupt\", 0, 0, true, false, false, visium_handle_interrupt_attr, false,\n-   NULL},\n-  {NULL, 0, 0, false, false, false, NULL, false, NULL},\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"interrupt\", 0, 0, true, false, false, false, visium_handle_interrupt_attr,\n+    NULL},\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL },\n };\n \n static struct machine_function *visium_init_machine_status (void);"}, {"sha": "25d7f58ea5816b8d4032e187dcb18ac52009b7da", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1,3 +1,8 @@\n+2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.c (cxx_attribute_table, std_attribute_table): Swap\n+\taffects_type_identity and handler fields, adjust comments.\n+\n 2017-12-15  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/59930\n@@ -301,8 +306,6 @@\n \tthrough into normal folding, otherwise just rebuild x if any op\n \tchanged.\n \n-\t* g++.dg/warn/pr81675.C: New test.\n-\n 2017-11-14  Boris Kolpackov  <boris@codesynthesis.com>\n \n \t* Make-lang.in (c++.install-plugin): Install backend import library."}, {"sha": "5528fa96fb72b5ded7a574a0bea2994cb9f80f34", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -4329,25 +4329,25 @@ handle_nodiscard_attribute (tree *node, tree name, tree /*args*/,\n /* Table of valid C++ attributes.  */\n const struct attribute_spec cxx_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"init_priority\",  1, 1, true,  false, false,\n-    handle_init_priority_attribute, false, NULL },\n-  { \"abi_tag\", 1, -1, false, false, false,\n-    handle_abi_tag_attribute, true, NULL },\n-  { NULL, 0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"init_priority\",  1, 1, true,  false, false, false,\n+    handle_init_priority_attribute, NULL },\n+  { \"abi_tag\", 1, -1, false, false, false, true,\n+    handle_abi_tag_attribute, NULL },\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Table of C++ standard attributes.  */\n const struct attribute_spec std_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"maybe_unused\", 0, 0, false, false, false,\n-    handle_unused_attribute, false, NULL },\n-  { \"nodiscard\", 0, 0, false, false, false,\n-    handle_nodiscard_attribute, false, NULL },\n-  { NULL, 0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"maybe_unused\", 0, 0, false, false, false, false,\n+    handle_unused_attribute, NULL },\n+  { \"nodiscard\", 0, 0, false, false, false, false,\n+    handle_nodiscard_attribute, NULL },\n+  { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Handle an \"init_priority\" attribute; arguments as in"}, {"sha": "1dcdcbaea7259deee7579242af50391e8c2b47e5", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -381,7 +381,7 @@ handle_user_attribute (tree *node, tree name, tree args,\n \n /* Attribute definition */\n static struct attribute_spec user_attr =\n-  @{ \"user\", 1, 1, false,  false, false, handle_user_attribute, false @};\n+  @{ \"user\", 1, 1, false,  false, false, false, handle_user_attribute, NULL @};\n \n /* Plugin callback called during attribute registration.\n Registered with register_callback (plugin_name, PLUGIN_ATTRIBUTES, register_attributes, NULL)"}, {"sha": "6fab2bc76a8fafe21f335f467117611dcdbbe90a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1,3 +1,8 @@\n+2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* f95-lang.c (gfc_attribute_table): Swap affects_type_identity\n+\tand handler fields, adjust comments.\n+\n 2017-12-14  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR middle_end/79538"}, {"sha": "dc9a1ae1cef77f83b8cd27a2609a4381a09c60c1", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -89,15 +89,15 @@ gfc_handle_omp_declare_target_attribute (tree *, tree, tree, int, bool *)\n /* Table of valid Fortran attributes.  */\n static const struct attribute_spec gfc_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity } */\n-  { \"omp declare target\", 0, 0, true,  false, false,\n-    gfc_handle_omp_declare_target_attribute, false, NULL },\n-  { \"omp declare target link\", 0, 0, true,  false, false,\n-    gfc_handle_omp_declare_target_attribute, false, NULL },\n-  { \"oacc function\", 0, -1, true,  false, false,\n-    gfc_handle_omp_declare_target_attribute, false, NULL },\n-  { NULL,\t\t  0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"omp declare target\", 0, 0, true,  false, false, false,\n+    gfc_handle_omp_declare_target_attribute, NULL },\n+  { \"omp declare target link\", 0, 0, true,  false, false, false,\n+    gfc_handle_omp_declare_target_attribute, NULL },\n+  { \"oacc function\", 0, -1, true,  false, false, false,\n+    gfc_handle_omp_declare_target_attribute, NULL },\n+  { NULL,\t\t  0, 0, false, false, false, false, NULL, NULL }\n };\n \n #undef LANG_HOOKS_NAME"}, {"sha": "ce2d407406f65d5b85672bd37e83d2967c4b3a68", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1,3 +1,8 @@\n+2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lto-lang.c (lto_attribute_table, lto_format_attribute_table): Swap\n+\taffects_type_identity and handler fields, adjust comments.\n+\n 2017-12-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* lto.c (compare_tree_sccs_1): Compare the new VECTOR_CST flags."}, {"sha": "2961b7df206657765d8464e12a91c671123d5daa", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -92,61 +92,61 @@ static const struct attribute_spec::exclusions attr_const_pure_exclusions[] =\n /* Table of machine-independent attributes supported in GIMPLE.  */\n const struct attribute_spec lto_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       do_diagnostic, exclusions } */\n-  { \"noreturn\",               0, 0, true,  false, false,\n-\t\t\t      handle_noreturn_attribute, false,\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"noreturn\",               0, 0, true,  false, false, false,\n+\t\t\t      handle_noreturn_attribute,\n \t\t\t      attr_noreturn_exclusions },\n-  { \"leaf\",\t\t      0, 0, true,  false, false,\n-\t\t\t      handle_leaf_attribute, false, NULL },\n+  { \"leaf\",\t\t      0, 0, true,  false, false, false,\n+\t\t\t      handle_leaf_attribute, NULL },\n   /* The same comments as for noreturn attributes apply to const ones.  */\n-  { \"const\",                  0, 0, true,  false, false,\n-\t\t\t      handle_const_attribute, false,\n+  { \"const\",                  0, 0, true,  false, false, false,\n+\t\t\t      handle_const_attribute,\n \t\t\t      attr_const_pure_exclusions },\n-  { \"malloc\",                 0, 0, true,  false, false,\n-\t\t\t      handle_malloc_attribute, false, NULL },\n-  { \"pure\",                   0, 0, true,  false, false,\n-\t\t\t      handle_pure_attribute, false,\n+  { \"malloc\",                 0, 0, true,  false, false, false,\n+\t\t\t      handle_malloc_attribute, NULL },\n+  { \"pure\",                   0, 0, true,  false, false, false,\n+\t\t\t      handle_pure_attribute,\n \t\t\t      attr_const_pure_exclusions },\n-  { \"no vops\",                0, 0, true,  false, false,\n-\t\t\t      handle_novops_attribute, false, NULL },\n-  { \"nonnull\",                0, -1, false, true, true,\n-\t\t\t      handle_nonnull_attribute, false, NULL },\n-  { \"nothrow\",                0, 0, true,  false, false,\n-\t\t\t      handle_nothrow_attribute, false, NULL },\n-  { \"patchable_function_entry\", 1, 2, true, false, false,\n+  { \"no vops\",                0, 0, true,  false, false, false,\n+\t\t\t      handle_novops_attribute, NULL },\n+  { \"nonnull\",                0, -1, false, true, true, false,\n+\t\t\t      handle_nonnull_attribute, NULL },\n+  { \"nothrow\",                0, 0, true,  false, false, false,\n+\t\t\t      handle_nothrow_attribute, NULL },\n+  { \"patchable_function_entry\", 1, 2, true, false, false, false,\n \t\t\t      handle_patchable_function_entry_attribute,\n-\t\t\t      false, NULL },\n-  { \"returns_twice\",          0, 0, true,  false, false,\n-\t\t\t      handle_returns_twice_attribute, false,\n+\t\t\t      NULL },\n+  { \"returns_twice\",          0, 0, true,  false, false, false,\n+\t\t\t      handle_returns_twice_attribute,\n \t\t\t      attr_returns_twice_exclusions },\n-  { \"sentinel\",               0, 1, false, true, true,\n-\t\t\t      handle_sentinel_attribute, false, NULL },\n-  { \"type generic\",           0, 0, false, true, true,\n-\t\t\t      handle_type_generic_attribute, false, NULL },\n-  { \"fn spec\",\t \t      1, 1, false, true, true,\n-\t\t\t      handle_fnspec_attribute, false, NULL },\n-  { \"transaction_pure\",\t      0, 0, false, true, true,\n-\t\t\t      handle_transaction_pure_attribute, false, NULL },\n+  { \"sentinel\",               0, 1, false, true, true, false,\n+\t\t\t      handle_sentinel_attribute, NULL },\n+  { \"type generic\",           0, 0, false, true, true, false,\n+\t\t\t      handle_type_generic_attribute, NULL },\n+  { \"fn spec\",\t \t      1, 1, false, true, true, false,\n+\t\t\t      handle_fnspec_attribute, NULL },\n+  { \"transaction_pure\",\t      0, 0, false, true, true, false,\n+\t\t\t      handle_transaction_pure_attribute, NULL },\n   /* For internal use only.  The leading '*' both prevents its usage in\n      source code and signals that it may be overridden by machine tables.  */\n-  { \"*tm regparm\",            0, 0, false, true, true,\n-\t\t\t      ignore_attribute, false, NULL },\n-  { NULL,                     0, 0, false, false, false, NULL, false, NULL }\n+  { \"*tm regparm\",            0, 0, false, true, true, false,\n+\t\t\t      ignore_attribute, NULL },\n+  { NULL,                     0, 0, false, false, false, false, NULL, NULL }\n };\n \n /* Give the specifications for the format attributes, used by C and all\n    descendants.  */\n \n const struct attribute_spec lto_format_attribute_table[] =\n {\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n-       affects_type_identity, exclusions } */\n-  { \"format\",                 3, 3, false, true,  true,\n-\t\t\t      handle_format_attribute, false, NULL },\n-  { \"format_arg\",             1, 1, false, true,  true,\n-\t\t\t      handle_format_arg_attribute, false, NULL },\n-  { NULL,                     0, 0, false, false, false, NULL, false, NULL }\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"format\",                 3, 3, false, true,  true, false,\n+\t\t\t      handle_format_attribute, NULL },\n+  { \"format_arg\",             1, 1, false, true,  true, false,\n+\t\t\t      handle_format_arg_attribute, NULL },\n+  { NULL,                     0, 0, false, false, false, false, NULL, NULL }\n };\n \n enum built_in_attribute"}, {"sha": "9ab04282c4e8da196851e6f66d586b9d1242d7e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1,3 +1,8 @@\n+2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/plugin/attribute_plugin.c (user_attr): Swap\n+\taffects_type_identity and handler fields, add NULL for exclude.\n+\n 2017-12-14  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/59930"}, {"sha": "8bdaca77086f4e73683f73c5b6400e22f4cbb29c", "filename": "gcc/testsuite/g++.dg/plugin/attribute_plugin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -26,7 +26,7 @@ handle_user_attribute (tree *node, tree name, tree args,\n /* Attribute definition */\n \n static struct attribute_spec user_attr =\n-  { \"user\", 1, 1, false,  false, false, handle_user_attribute, false };\n+  { \"user\", 1, 1, false,  false, false, false, handle_user_attribute, NULL };\n \n /* Plugin callback called during attribute registration */\n "}, {"sha": "e25500def953cc05e544710f75bd05b241a986ea", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4849deb1a30681b31d51da7501c6432b12324593/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=4849deb1a30681b31d51da7501c6432b12324593", "patch": "@@ -1929,6 +1929,8 @@ struct attribute_spec {\n      and from a function return type (which is not itself a function\n      pointer type) to the function type.  */\n   bool function_type_required;\n+  /* Specifies if attribute affects type's identity.  */\n+  bool affects_type_identity;\n   /* Function to handle this attribute.  NODE points to the node to which\n      the attribute is to be applied.  If a DECL, it should be modified in\n      place; if a TYPE, a copy should be created.  NAME is the name of the\n@@ -1945,8 +1947,6 @@ struct attribute_spec {\n      by the rest of this structure.  */\n   tree (*handler) (tree *node, tree name, tree args,\n \t\t   int flags, bool *no_add_attrs);\n-  /* Specifies if attribute affects type's identity.  */\n-  bool affects_type_identity;\n \n   /* Specifies the name of an attribute that's mutually exclusive with\n      this one, and whether the relationship applies to the function,"}]}