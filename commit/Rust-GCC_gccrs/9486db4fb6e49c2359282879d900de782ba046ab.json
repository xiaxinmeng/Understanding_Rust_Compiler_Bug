{"sha": "9486db4fb6e49c2359282879d900de782ba046ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4NmRiNGZiNmU0OWMyMzU5MjgyODc5ZDkwMGRlNzgyYmEwNDZhYg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-03-26T19:24:33Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-03-26T19:24:33Z"}, "message": "demangle.h: Remove uses of PARAMS.\n\ninclude/\n2005-03-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n        * demangle.h: Remove uses of PARAMS.\n\n        * libiberty.h (ANSI_PROTOTYPES): Remove guard since\n        ANSI_PROTOTYPES is always assumed.\n        Remove uses of PARAMS throughout.\n\nlibiberty/\n2005-03-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n        Convert libiberty to use ISO C prototype style 2/n.\n        * cp-demangle.h: Remove uses of PARAMS.\n        * cp-demangle.c: Likewise.\n        (d_dump, cplus_demangle_fill_name,\n        cplus_demangle_fill_extended_operator,\n        cplus_demangle_fill_ctor,\n        cplus_demangle_fill_dtor, d_make_empty, d_make_comp,\n        d_make_name,\n        d_make_builtin_type, d_make_operator,\n        d_make_extended_operator,\n        d_make_ctor, d_make_dtor, d_make_template_param, d_make_sub,\n        cplus_demangle_mangled_name, has_return_type,\n        is_ctor_dtor_or_conversion, d_encoding, d_name, d_nested_name,\n        d_prefix, d_unqualified_name, d_source_name, d_number,\n        d_identifier, d_operator_name, d_special_name, d_call_offset,\n        d_ctor_dtor_name, cplus_demangle_type, d_cv_qualifiers,\n        d_function_type, d_bare_function_type, d_class_enum_type,\n        d_array_type, d_pointer_to_member_type, d_template_param,\n        d_template_args, d_template_arg, d_expression, d_expr_primary,\n        d_local_name, d_discriminator, d_add_substitution,\n        d_substitution, d_print_resize, d_print_append_char,\n        d_print_append_buffer, d_print_error, cplus_demangle_print,\n        d_print_comp, d_print_java_identifier, d_print_mod_list,\n        d_print_mod, d_print_function_type, d_print_array_type,\n        d_print_expr_op, d_print_cast, cplus_demangle_init_info,\n        d_demangle, __cxa_demangle, cplus_demangle_v3,\n        java_demangle_v3,\n        is_ctor_or_dtor, is_gnu_v3_mangled_ctor,\n        is_gnu_v3_mangled_dtor,\n        print_usage, main):\n\n2005-03-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n        Convert libiberty to ISO C prototype style 1/n.\n        * _doprnt.c: Remove conditional #include <varargs.h> on\n        ANSI_PROTOTYPES as the latter is always assumed.\n        (_doprnt, checkit, main): Use ISO C prototype.\n        * alloca.c (find_stack_direction, C_alloca): Use ISO C\n        prototype.\n        * argv.c: Remove conditional #includes on ANSI_PROTOTYPES.\n        (dupargv, freeargv, buildargv, main): Use ISO C prototype.\n        * atexit.c (atexit): Likewise\n        * asprintf.c: Remove conditional include on ANSI_PROTOTYPES.\n        (asprintf): Use ISO C prototype.\n        * basename.c (basename): Likewise\n        * bcmp.c (bcmp): Likewise.\n        * bcopy.c (bcopy): Likewise.\n        * bzero.c (bzero): Likewise.\n        * bsearch.c (bsearch): Likewise.  Improve const-correctness.\n        * choose-temp.c (choose_temp_base): Likewise.\n        * calloc.c: Remove conditional #include on ANSI_PROTOTYPES.\n        (calloc): Use ISO C prototype.\n        * clock.c (clock): Likewise.\n        * concat.c: Remove conditional #include on ANSI_PROTOTYPES.\n        (vconcat_length, vconcat_copy, concat_length, concat_copy,\n        concat_copy2, concat, reconcat, main): Use ISO C prototype.\n        * copysign.c (copysign): Likewise.\n\nFrom-SVN: r97085", "tree": {"sha": "9c3f754432ea0c19b927ce9935610496d6eb3c22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c3f754432ea0c19b927ce9935610496d6eb3c22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9486db4fb6e49c2359282879d900de782ba046ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9486db4fb6e49c2359282879d900de782ba046ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9486db4fb6e49c2359282879d900de782ba046ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9486db4fb6e49c2359282879d900de782ba046ab/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a8c79d545a7374577868b099c82500866f2b242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8c79d545a7374577868b099c82500866f2b242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a8c79d545a7374577868b099c82500866f2b242"}], "stats": {"total": 858, "additions": 358, "deletions": 500}, "files": [{"sha": "1de167a0a6d887b80ed1a1874e6332e0362cc73f", "filename": "include/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -1,3 +1,11 @@\n+2005-03-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* demangle.h: Remove uses of PARAMS.\n+\n+\t* libiberty.h (ANSI_PROTOTYPES): Remove guard since\n+\tANSI_PROTOTYPES is always assumed.\n+\tRemove uses of PARAMS throughout.\n+\n 2005-03-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libiberty.h (xstrndup): Declare."}, {"sha": "b88b43d8baef91c49bb103818e017365be6c2458", "filename": "include/demangle.h", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -110,31 +110,31 @@ extern const struct demangler_engine\n } libiberty_demanglers[];\n \n extern char *\n-cplus_demangle PARAMS ((const char *mangled, int options));\n+cplus_demangle (const char *mangled, int options);\n \n extern int\n-cplus_demangle_opname PARAMS ((const char *opname, char *result, int options));\n+cplus_demangle_opname (const char *opname, char *result, int options);\n \n extern const char *\n-cplus_mangle_opname PARAMS ((const char *opname, int options));\n+cplus_mangle_opname (const char *opname, int options);\n \n /* Note: This sets global state.  FIXME if you care about multi-threading. */\n \n extern void\n-set_cplus_marker_for_demangling PARAMS ((int ch));\n+set_cplus_marker_for_demangling (int ch);\n \n extern enum demangling_styles \n-cplus_demangle_set_style PARAMS ((enum demangling_styles style));\n+cplus_demangle_set_style (enum demangling_styles style);\n \n extern enum demangling_styles \n-cplus_demangle_name_to_style PARAMS ((const char *name));\n+cplus_demangle_name_to_style (const char *name);\n \n /* V3 ABI demangling entry points, defined in cp-demangle.c.  */\n extern char*\n-cplus_demangle_v3 PARAMS ((const char* mangled, int options));\n+cplus_demangle_v3 (const char* mangled, int options);\n \n extern char*\n-java_demangle_v3 PARAMS ((const char* mangled));\n+java_demangle_v3 (const char* mangled);\n \n \n enum gnu_v3_ctor_kinds {\n@@ -148,7 +148,7 @@ enum gnu_v3_ctor_kinds {\n    gnu_v3_ctor_kinds' value indicating what kind of constructor\n    it is.  */\n extern enum gnu_v3_ctor_kinds\n-\tis_gnu_v3_mangled_ctor PARAMS ((const char *name));\n+\tis_gnu_v3_mangled_ctor (const char *name);\n \n \n enum gnu_v3_dtor_kinds {\n@@ -162,7 +162,7 @@ enum gnu_v3_dtor_kinds {\n    gnu_v3_dtor_kinds' value, indicating what kind of destructor\n    it is.  */\n extern enum gnu_v3_dtor_kinds\n-\tis_gnu_v3_mangled_dtor PARAMS ((const char *name));\n+\tis_gnu_v3_mangled_dtor (const char *name);\n \n /* The V3 demangler works in two passes.  The first pass builds a tree\n    representation of the mangled name, and the second pass turns the\n@@ -440,25 +440,25 @@ struct demangle_component\n    unrecognized or inappropriate component type.  */\n \n extern int\n-cplus_demangle_fill_component PARAMS ((struct demangle_component *fill,\n-\t\t\t\t       enum demangle_component_type,\n-\t\t\t\t       struct demangle_component *left,\n-\t\t\t\t       struct demangle_component *right));\n+cplus_demangle_fill_component (struct demangle_component *fill,\n+                               enum demangle_component_type,\n+                               struct demangle_component *left,\n+                               struct demangle_component *right);\n \n /* Fill in a DEMANGLE_COMPONENT_NAME.  Returns non-zero on success,\n    zero for bad arguments.  */\n \n extern int\n-cplus_demangle_fill_name PARAMS ((struct demangle_component *fill,\n-\t\t\t\t  const char *, int));\n+cplus_demangle_fill_name (struct demangle_component *fill,\n+                          const char *, int);\n \n /* Fill in a DEMANGLE_COMPONENT_BUILTIN_TYPE, using the name of the\n    builtin type (e.g., \"int\", etc.).  Returns non-zero on success,\n    zero if the type is not recognized.  */\n \n extern int\n-cplus_demangle_fill_builtin_type PARAMS ((struct demangle_component *fill,\n-\t\t\t\t\t  const char *type_name));\n+cplus_demangle_fill_builtin_type (struct demangle_component *fill,\n+                                  const char *type_name);\n \n /* Fill in a DEMANGLE_COMPONENT_OPERATOR, using the name of the\n    operator and the number of arguments which it takes (the latter is\n@@ -467,33 +467,33 @@ cplus_demangle_fill_builtin_type PARAMS ((struct demangle_component *fill,\n    not recognized.  */\n \n extern int\n-cplus_demangle_fill_operator PARAMS ((struct demangle_component *fill,\n-\t\t\t\t      const char *opname, int args));\n+cplus_demangle_fill_operator (struct demangle_component *fill,\n+                              const char *opname, int args);\n \n /* Fill in a DEMANGLE_COMPONENT_EXTENDED_OPERATOR, providing the\n    number of arguments and the name.  Returns non-zero on success,\n    zero for bad arguments.  */\n \n extern int\n-cplus_demangle_fill_extended_operator PARAMS ((struct demangle_component *fill,\n-\t\t\t\t\t       int numargs,\n-\t\t\t\t\t       struct demangle_component *nm));\n+cplus_demangle_fill_extended_operator (struct demangle_component *fill,\n+                                       int numargs,\n+                                       struct demangle_component *nm);\n \n /* Fill in a DEMANGLE_COMPONENT_CTOR.  Returns non-zero on success,\n    zero for bad arguments.  */\n \n extern int\n-cplus_demangle_fill_ctor PARAMS ((struct demangle_component *fill,\n-\t\t\t\t  enum gnu_v3_ctor_kinds kind,\n-\t\t\t\t  struct demangle_component *name));\n+cplus_demangle_fill_ctor (struct demangle_component *fill,\n+                          enum gnu_v3_ctor_kinds kind,\n+                          struct demangle_component *name);\n \n /* Fill in a DEMANGLE_COMPONENT_DTOR.  Returns non-zero on success,\n    zero for bad arguments.  */\n \n extern int\n-cplus_demangle_fill_dtor PARAMS ((struct demangle_component *fill,\n-\t\t\t\t  enum gnu_v3_dtor_kinds kind,\n-\t\t\t\t  struct demangle_component *name));\n+cplus_demangle_fill_dtor (struct demangle_component *fill,\n+                          enum gnu_v3_dtor_kinds kind,\n+                          struct demangle_component *name);\n \n /* This function translates a mangled name into a struct\n    demangle_component tree.  The first argument is the mangled name.\n@@ -504,9 +504,7 @@ cplus_demangle_fill_dtor PARAMS ((struct demangle_component *fill,\n    needed.  */\n \n extern struct demangle_component *\n-cplus_demangle_v3_components PARAMS ((const char *mangled,\n-\t\t\t\t      int options,\n-\t\t\t\t      void **mem));\n+cplus_demangle_v3_components (const char *mangled, int options, void **mem);\n \n /* This function takes a struct demangle_component tree and returns\n    the corresponding demangled string.  The first argument is DMGL_*\n@@ -521,10 +519,10 @@ cplus_demangle_v3_components PARAMS ((const char *mangled,\n    memory allocation error.  */\n \n extern char *\n-cplus_demangle_print PARAMS ((int options,\n-\t\t\t      const struct demangle_component *tree,\n-\t\t\t      int estimated_length,\n-\t\t\t      size_t *p_allocated_size));\n+cplus_demangle_print (int options,\n+                      const struct demangle_component *tree,\n+                      int estimated_length,\n+                      size_t *p_allocated_size);\n \n #ifdef __cplusplus\n }"}, {"sha": "a06421037268dbcd500210563add5120ad9e175d", "filename": "include/libiberty.h", "status": "modified", "additions": 48, "deletions": 50, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -41,26 +41,24 @@ extern \"C\" {\n \n #include \"ansidecl.h\"\n \n-#ifdef ANSI_PROTOTYPES\n /* Get a definition for size_t.  */\n #include <stddef.h>\n /* Get a definition for va_list.  */\n #include <stdarg.h>\n-#endif\n \n /* Build an argument vector from a string.  Allocates memory using\n    malloc.  Use freeargv to free the vector.  */\n \n-extern char **buildargv PARAMS ((const char *)) ATTRIBUTE_MALLOC;\n+extern char **buildargv (const char *) ATTRIBUTE_MALLOC;\n \n /* Free a vector returned by buildargv.  */\n \n-extern void freeargv PARAMS ((char **));\n+extern void freeargv (char **);\n \n /* Duplicate an argument vector. Allocates memory using malloc.  Use\n    freeargv to free the vector.  */\n \n-extern char **dupargv PARAMS ((char **)) ATTRIBUTE_MALLOC;\n+extern char **dupargv (char **) ATTRIBUTE_MALLOC;\n \n \n /* Return the last component of a path name.  Note that we can't use a\n@@ -75,25 +73,25 @@ extern char **dupargv PARAMS ((char **)) ATTRIBUTE_MALLOC;\n    is 1, we found it so don't provide any declaration at all.  */\n #if !HAVE_DECL_BASENAME\n #if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined(__NetBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (__MINGW32__) || defined (HAVE_DECL_BASENAME)\n-extern char *basename PARAMS ((const char *));\n+extern char *basename (const char *);\n #else\n extern char *basename ();\n #endif\n #endif\n \n /* A well-defined basename () that is always compiled in.  */\n \n-extern const char *lbasename PARAMS ((const char *));\n+extern const char *lbasename (const char *);\n \n /* A well-defined realpath () that is always compiled in.  */\n \n-extern char *lrealpath PARAMS ((const char *));\n+extern char *lrealpath (const char *);\n \n /* Concatenate an arbitrary number of strings.  You must pass NULL as\n    the last argument of this function, to terminate the list of\n    strings.  Allocates memory using xmalloc.  */\n \n-extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;\n+extern char *concat (const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;\n \n /* Concatenate an arbitrary number of strings.  You must pass NULL as\n    the last argument of this function, to terminate the list of\n@@ -102,27 +100,27 @@ extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC ATTRIBUTE_SENT\n    pointer to be freed after the new string is created, similar to the\n    way xrealloc works.  */\n \n-extern char *reconcat PARAMS ((char *, const char *, ...)) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;\n+extern char *reconcat (char *, const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;\n \n /* Determine the length of concatenating an arbitrary number of\n    strings.  You must pass NULL as the last argument of this function,\n    to terminate the list of strings.  */\n \n-extern unsigned long concat_length PARAMS ((const char *, ...)) ATTRIBUTE_SENTINEL;\n+extern unsigned long concat_length (const char *, ...) ATTRIBUTE_SENTINEL;\n \n /* Concatenate an arbitrary number of strings into a SUPPLIED area of\n    memory.  You must pass NULL as the last argument of this function,\n    to terminate the list of strings.  The supplied memory is assumed\n    to be large enough.  */\n \n-extern char *concat_copy PARAMS ((char *, const char *, ...)) ATTRIBUTE_SENTINEL;\n+extern char *concat_copy (char *, const char *, ...) ATTRIBUTE_SENTINEL;\n \n /* Concatenate an arbitrary number of strings into a GLOBAL area of\n    memory.  You must pass NULL as the last argument of this function,\n    to terminate the list of strings.  The supplied memory is assumed\n    to be large enough.  */\n \n-extern char *concat_copy2 PARAMS ((const char *, ...)) ATTRIBUTE_SENTINEL;\n+extern char *concat_copy2 (const char *, ...) ATTRIBUTE_SENTINEL;\n \n /* This is the global area used by concat_copy2.  */\n \n@@ -138,134 +136,134 @@ extern char *libiberty_concat_ptr;\n \n /* Check whether two file descriptors refer to the same file.  */\n \n-extern int fdmatch PARAMS ((int fd1, int fd2));\n+extern int fdmatch (int fd1, int fd2);\n \n /* Get the working directory.  The result is cached, so don't call\n    chdir() between calls to getpwd().  */\n \n-extern char * getpwd PARAMS ((void));\n+extern char * getpwd (void);\n \n /* Get the current time.  */\n /* Prototypes vary from system to system, so we only provide a\n    prototype on systems where we know that we need it.  */\n #ifdef __MINGW32__\n /* Forward declaration to avoid #include <sys/time.h>.   */\n struct timeval;\n-extern int gettimeofday PARAMS ((struct timeval *, void *)); \n+extern int gettimeofday (struct timeval *, void *); \n #endif\n \n /* Get the amount of time the process has run, in microseconds.  */\n \n-extern long get_run_time PARAMS ((void));\n+extern long get_run_time (void);\n \n /* Generate a relocated path to some installation directory.  Allocates\n    return value using malloc.  */\n \n-extern char *make_relative_prefix PARAMS ((const char *, const char *,\n-\t\t\t\t\t   const char *)) ATTRIBUTE_MALLOC;\n+extern char *make_relative_prefix (const char *, const char *,\n+                                   const char *) ATTRIBUTE_MALLOC;\n \n /* Choose a temporary directory to use for scratch files.  */\n \n-extern char *choose_temp_base PARAMS ((void)) ATTRIBUTE_MALLOC;\n+extern char *choose_temp_base (void) ATTRIBUTE_MALLOC;\n \n /* Return a temporary file name or NULL if unable to create one.  */\n \n-extern char *make_temp_file PARAMS ((const char *)) ATTRIBUTE_MALLOC;\n+extern char *make_temp_file (const char *) ATTRIBUTE_MALLOC;\n \n /* Remove a link to a file unless it is special. */\n \n-extern int unlink_if_ordinary PARAMS((const char *));\n+extern int unlink_if_ordinary (const char *);\n \n /* Allocate memory filled with spaces.  Allocates using malloc.  */\n \n-extern const char *spaces PARAMS ((int count));\n+extern const char *spaces (int count);\n \n /* Return the maximum error number for which strerror will return a\n    string.  */\n \n-extern int errno_max PARAMS ((void));\n+extern int errno_max (void);\n \n /* Return the name of an errno value (e.g., strerrno (EINVAL) returns\n    \"EINVAL\").  */\n \n-extern const char *strerrno PARAMS ((int));\n+extern const char *strerrno (int);\n \n /* Given the name of an errno value, return the value.  */\n \n-extern int strtoerrno PARAMS ((const char *));\n+extern int strtoerrno (const char *);\n \n /* ANSI's strerror(), but more robust.  */\n \n-extern char *xstrerror PARAMS ((int));\n+extern char *xstrerror (int);\n \n /* Return the maximum signal number for which strsignal will return a\n    string.  */\n \n-extern int signo_max PARAMS ((void));\n+extern int signo_max (void);\n \n /* Return a signal message string for a signal number\n    (e.g., strsignal (SIGHUP) returns something like \"Hangup\").  */\n /* This is commented out as it can conflict with one in system headers.\n    We still document its existence though.  */\n \n-/*extern const char *strsignal PARAMS ((int));*/\n+/*extern const char *strsignal (int);*/\n \n /* Return the name of a signal number (e.g., strsigno (SIGHUP) returns\n    \"SIGHUP\").  */\n \n-extern const char *strsigno PARAMS ((int));\n+extern const char *strsigno (int);\n \n /* Given the name of a signal, return its number.  */\n \n-extern int strtosigno PARAMS ((const char *));\n+extern int strtosigno (const char *);\n \n /* Register a function to be run by xexit.  Returns 0 on success.  */\n \n-extern int xatexit PARAMS ((void (*fn) (void)));\n+extern int xatexit (void (*fn) (void));\n \n /* Exit, calling all the functions registered with xatexit.  */\n \n-extern void xexit PARAMS ((int status)) ATTRIBUTE_NORETURN;\n+extern void xexit (int status) ATTRIBUTE_NORETURN;\n \n /* Set the program name used by xmalloc.  */\n \n-extern void xmalloc_set_program_name PARAMS ((const char *));\n+extern void xmalloc_set_program_name (const char *);\n \n /* Report an allocation failure.  */\n-extern void xmalloc_failed PARAMS ((size_t)) ATTRIBUTE_NORETURN;\n+extern void xmalloc_failed (size_t) ATTRIBUTE_NORETURN;\n \n /* Allocate memory without fail.  If malloc fails, this will print a\n    message to stderr (using the name set by xmalloc_set_program_name,\n    if any) and then call xexit.  */\n \n-extern PTR xmalloc PARAMS ((size_t)) ATTRIBUTE_MALLOC;\n+extern PTR xmalloc (size_t) ATTRIBUTE_MALLOC;\n \n /* Reallocate memory without fail.  This works like xmalloc.  Note,\n    realloc type functions are not suitable for attribute malloc since\n    they may return the same address across multiple calls. */\n \n-extern PTR xrealloc PARAMS ((PTR, size_t));\n+extern PTR xrealloc (PTR, size_t);\n \n /* Allocate memory without fail and set it to zero.  This works like\n    xmalloc.  */\n \n-extern PTR xcalloc PARAMS ((size_t, size_t)) ATTRIBUTE_MALLOC;\n+extern PTR xcalloc (size_t, size_t) ATTRIBUTE_MALLOC;\n \n /* Copy a string into a memory buffer without fail.  */\n \n-extern char *xstrdup PARAMS ((const char *)) ATTRIBUTE_MALLOC;\n+extern char *xstrdup (const char *) ATTRIBUTE_MALLOC;\n \n /* Copy at most N characters from string into a buffer without fail.  */\n \n-extern char *xstrndup PARAMS ((const char *, size_t)) ATTRIBUTE_MALLOC;\n+extern char *xstrndup (const char *, size_t) ATTRIBUTE_MALLOC;\n \n /* Copy an existing memory buffer to a new memory buffer without fail.  */\n \n-extern PTR xmemdup PARAMS ((const PTR, size_t, size_t)) ATTRIBUTE_MALLOC;\n+extern PTR xmemdup (const PTR, size_t, size_t) ATTRIBUTE_MALLOC;\n \n /* Physical memory routines.  Return values are in BYTES.  */\n-extern double physmem_total PARAMS ((void));\n-extern double physmem_available PARAMS ((void));\n+extern double physmem_total (void);\n+extern double physmem_available (void);\n \n \n /* These macros provide a K&R/C89/C++-friendly way of allocating structures\n@@ -303,7 +301,7 @@ extern double physmem_available PARAMS ((void));\n #define _hex_array_size 256\n #define _hex_bad\t99\n extern const unsigned char _hex_value[_hex_array_size];\n-extern void hex_init PARAMS ((void));\n+extern void hex_init (void);\n #define hex_p(c)\t(hex_value (c) != _hex_bad)\n /* If you change this, note well: Some code relies on side effects in\n    the argument being performed exactly once.  */\n@@ -319,25 +317,25 @@ extern void hex_init PARAMS ((void));\n \n /* Execute a program.  */\n \n-extern int pexecute PARAMS ((const char *, char * const *, const char *,\n-\t\t\t    const char *, char **, char **, int));\n+extern int pexecute (const char *, char * const *, const char *,\n+                     const char *, char **, char **, int);\n \n /* Wait for pexecute to finish.  */\n \n-extern int pwait PARAMS ((int, int *, int));\n+extern int pwait (int, int *, int);\n \n #if !HAVE_DECL_ASPRINTF\n /* Like sprintf but provides a pointer to malloc'd storage, which must\n    be freed by the caller.  */\n \n-extern int asprintf PARAMS ((char **, const char *, ...)) ATTRIBUTE_PRINTF_2;\n+extern int asprintf (char **, const char *, ...) ATTRIBUTE_PRINTF_2;\n #endif\n \n #if !HAVE_DECL_VASPRINTF\n /* Like vsprintf but provides a pointer to malloc'd storage, which\n    must be freed by the caller.  */\n \n-extern int vasprintf PARAMS ((char **, const char *, va_list))\n+extern int vasprintf (char **, const char *, va_list)\n   ATTRIBUTE_PRINTF(2,0);\n #endif\n \n@@ -349,7 +347,7 @@ extern int vasprintf PARAMS ((char **, const char *, va_list))\n    USE_C_ALLOCA yourself.  The canonical autoconf macro C_ALLOCA is\n    also set/unset as it is often used to indicate whether code needs\n    to call alloca(0).  */\n-extern PTR C_alloca PARAMS ((size_t)) ATTRIBUTE_MALLOC;\n+extern PTR C_alloca (size_t) ATTRIBUTE_MALLOC;\n #undef alloca\n #if GCC_VERSION >= 2000 && !defined USE_C_ALLOCA\n # define alloca(x) __builtin_alloca(x)"}, {"sha": "0d501df7e687dad3db1aead01bcfd54d1f708abe", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -1,3 +1,57 @@\n+2005-03-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\tConvert libiberty to use ISO C prototype style 2/n.\n+\t* cp-demangle.h: Remove uses of PARAMS.\n+\t* cp-demangle.c: Likewise.\n+\t(d_dump, cplus_demangle_fill_name, \n+\tcplus_demangle_fill_extended_operator, cplus_demangle_fill_ctor, \n+\tcplus_demangle_fill_dtor, d_make_empty, d_make_comp, d_make_name, \n+\td_make_builtin_type, d_make_operator, d_make_extended_operator, \n+\td_make_ctor, d_make_dtor, d_make_template_param, d_make_sub, \n+\tcplus_demangle_mangled_name, has_return_type, \n+\tis_ctor_dtor_or_conversion, d_encoding, d_name, d_nested_name, \n+\td_prefix, d_unqualified_name, d_source_name, d_number, \n+\td_identifier, d_operator_name, d_special_name, d_call_offset, \n+\td_ctor_dtor_name, cplus_demangle_type, d_cv_qualifiers, \n+\td_function_type, d_bare_function_type, d_class_enum_type, \n+\td_array_type, d_pointer_to_member_type, d_template_param, \n+\td_template_args, d_template_arg, d_expression, d_expr_primary, \n+\td_local_name, d_discriminator, d_add_substitution, \n+\td_substitution, d_print_resize, d_print_append_char, \n+\td_print_append_buffer, d_print_error, cplus_demangle_print, \n+\td_print_comp, d_print_java_identifier, d_print_mod_list, \n+\td_print_mod, d_print_function_type, d_print_array_type, \n+\td_print_expr_op, d_print_cast, cplus_demangle_init_info, \n+\td_demangle, __cxa_demangle, cplus_demangle_v3, java_demangle_v3, \n+\tis_ctor_or_dtor, is_gnu_v3_mangled_ctor, is_gnu_v3_mangled_dtor,\n+\tprint_usage, main): \n+\n+2005-03-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\tConvert libiberty to ISO C prototype style 1/n.\n+\t* _doprnt.c: Remove conditional #include <varargs.h> on\n+\tANSI_PROTOTYPES as the latter is always assumed.\n+\t(_doprnt, checkit, main): Use ISO C prototype.\n+\t* alloca.c (find_stack_direction, C_alloca): Use ISO C prototype.\n+\t* argv.c: Remove conditional #includes on ANSI_PROTOTYPES.\n+\t(dupargv, freeargv, buildargv, main): Use ISO C prototype. \n+\t* atexit.c (atexit): Likewise\n+\t* asprintf.c: Remove conditional include on ANSI_PROTOTYPES.\n+\t(asprintf): Use ISO C prototype. \n+\t* basename.c (basename): Likewise\n+\t* bcmp.c (bcmp): Likewise.\n+\t* bcopy.c (bcopy): Likewise.\n+\t* bzero.c (bzero): Likewise.\n+\t* bsearch.c (bsearch): Likewise.  Improve const-correctness.\n+\t* choose-temp.c (choose_temp_base): Likewise.\n+\t* calloc.c: Remove conditional #include on ANSI_PROTOTYPES.\n+\t(calloc): Use ISO C prototype.\n+\t* clock.c (clock): Likewise.\n+\t* concat.c: Remove conditional #include on ANSI_PROTOTYPES.\n+\t(vconcat_length, vconcat_copy, concat_length, concat_copy, \n+\tconcat_copy2, concat, reconcat, main): Use ISO C prototype.\n+\t* copysign.c (copysign): Likewise.\n+\n 2005-03-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (CFILES): Add strndup.c and xstrndup.c."}, {"sha": "804b93977808cee9c27b620c99b01a88e43673d3", "filename": "libiberty/_doprnt.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2F_doprnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2F_doprnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2F_doprnt.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -21,11 +21,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"safe-ctype.h\"\n \n #include <stdio.h>\n-#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n-#else\n-#include <varargs.h>\n-#endif\n #ifdef HAVE_STRING_H\n #include <string.h>\n #endif\n@@ -79,10 +75,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n       } while (0)\n \n int\n-_doprnt (format, ap, stream)\n-  const char * format;\n-  va_list ap;\n-  FILE * stream;\n+_doprnt (const char *format, va_list ap, FILE *stream)\n {\n   const char * ptr = format;\n   char specifier[128];\n@@ -223,10 +216,10 @@ _doprnt (format, ap, stream)\n     fflush(stdin); \\\n } while (0)\n \n-static int checkit PARAMS ((const char * format, ...)) ATTRIBUTE_PRINTF_1;\n+static int checkit (const char * format, ...) ATTRIBUTE_PRINTF_1;\n \n static int\n-checkit VPARAMS ((const char* format, ...))\n+checkit (const char* format, ...)\n {\n   int result;\n   VA_OPEN (args, format);\n@@ -239,7 +232,7 @@ checkit VPARAMS ((const char* format, ...))\n }\n \n int\n-main ()\n+main (void)\n {\n   RESULT(checkit (\"<%d>\\n\", 0x12345678));\n   RESULT(printf (\"<%d>\\n\", 0x12345678));"}, {"sha": "866344429df24d88bbc5f167e88987bc12da6c4d", "filename": "libiberty/alloca.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Falloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Falloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Falloca.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -97,7 +97,7 @@ static int stack_dir;\t\t/* 1 or -1 once known.  */\n #define\tSTACK_DIR\tstack_dir\n \n static void\n-find_stack_direction ()\n+find_stack_direction (void)\n {\n   static char *addr = NULL;\t/* Address of first `dummy', once known.  */\n   auto char dummy;\t\t/* To get stack address.  */\n@@ -153,8 +153,7 @@ static header *last_alloca_header = NULL;\t/* -> last alloca header.  */\n /* @undocumented C_alloca */\n \n PTR\n-C_alloca (size)\n-     size_t size;\n+C_alloca (size_t size)\n {\n   auto char probe;\t\t/* Probes stack depth: */\n   register char *depth = ADDRESS_FUNCTION (probe);"}, {"sha": "76502058d3eee64feabebac84967c9d9a2541f2a", "filename": "libiberty/argv.c", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -29,26 +29,10 @@ Boston, MA 02111-1307, USA.  */\n \n /*  Routines imported from standard C runtime libraries. */\n \n-#ifdef ANSI_PROTOTYPES\n-\n #include <stddef.h>\n #include <string.h>\n #include <stdlib.h>\n \n-#else\t/* !ANSI_PROTOTYPES */\n-\n-#if !defined _WIN32 || defined __GNUC__\n-extern char *memcpy ();\t\t/* Copy memory region */\n-extern int strlen ();\t\t/* Count length of string */\n-extern char *malloc ();\t\t/* Standard memory allocater */\n-extern char *realloc ();\t/* Standard memory reallocator */\n-extern void free ();\t\t/* Free malloc'd memory */\n-extern char *strdup ();\t\t/* Duplicate a string */\n-#endif\n-\n-#endif\t/* ANSI_PROTOTYPES */\n-\n-\n #ifndef NULL\n #define NULL 0\n #endif\n@@ -75,8 +59,7 @@ argument vector.\n */\n \n char **\n-dupargv (argv)\n-     char **argv;\n+dupargv (char **argv)\n {\n   int argc;\n   char **copy;\n@@ -119,8 +102,7 @@ itself.\n \n */\n \n-void freeargv (vector)\n-char **vector;\n+void freeargv (char **vector)\n {\n   register char **scan;\n \n@@ -174,8 +156,7 @@ returned, as appropriate.\n \n */\n \n-char **buildargv (input)\n-     const char *input;\n+char **buildargv (const char *input)\n {\n   char *arg;\n   char *copybuf;\n@@ -325,7 +306,8 @@ static const char *const tests[] =\n   NULL\n };\n \n-int main ()\n+int\n+main (void)\n {\n   char **argv;\n   const char *const *test;"}, {"sha": "3ef067ffac739842d57dc7b9c5ae07b18bf1b8b7", "filename": "libiberty/asprintf.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fasprintf.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -22,11 +22,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ansidecl.h\"\n #include \"libiberty.h\"\n \n-#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n-#else\n-#include <varargs.h>\n-#endif\n \n /*\n \n@@ -45,7 +41,7 @@ not be allocated, minus one is returned and @code{NULL} is stored in\n */\n \n int\n-asprintf VPARAMS ((char **buf, const char *fmt, ...))\n+asprintf (char **buf, const char *fmt, ...)\n {\n   int status;\n   VA_OPEN (ap, fmt);"}, {"sha": "e091f0139eedc5519ed38aee9e9cfa1e4d2c180a", "filename": "libiberty/atexit.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fatexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fatexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fatexit.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -16,8 +16,7 @@ Causes function @var{f} to be called at exit.  Returns 0.\n #ifdef HAVE_ON_EXIT\n \n int\n-atexit(f)\n-     void (*f)();\n+atexit(void (*f)(void))\n {\n   /* If the system doesn't provide a definition for atexit, use on_exit\n      if the system provides that.  */"}, {"sha": "037a90601457e1ca3ae82f29f561b8569ed8039c", "filename": "libiberty/basename.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fbasename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fbasename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbasename.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -37,8 +37,7 @@ Behavior is undefined if the pathname ends in a directory separator.\n #endif /* DIR_SEPARATOR_2 */\n \n char *\n-basename (name)\n-     const char *name;\n+basename (const char *name)\n {\n   const char *base;\n "}, {"sha": "1bd28160f696a838f98c0afadedb851039c46167", "filename": "libiberty/bcmp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fbcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fbcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbcmp.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -17,9 +17,7 @@ result mean @var{x} sorts before @var{y}).\n \n \n int\n-bcmp (from, to, count)\n-  char *from, *to;\n-  int count;\n+bcmp (char *from, char *to, int count)\n {\n   int rtnval = 0;\n "}, {"sha": "0944247464593ecf4b20e4ad81ff68f3641d2cfc", "filename": "libiberty/bcopy.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fbcopy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fbcopy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbcopy.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -10,9 +10,7 @@ Copies @var{length} bytes from memory region @var{in} to region\n */\n \n void\n-bcopy (src, dest, len)\n-  register char *src, *dest;\n-  int len;\n+bcopy (register char *src, register char *dest, int len)\n {\n   if (dest < src)\n     while (len--)"}, {"sha": "bb5555eff3cdc8f5075340619fdf4be7bbdc81a0", "filename": "libiberty/bsearch.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fbsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fbsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbsearch.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -67,24 +67,21 @@ is respectively less than, matching, or greater than the array member.\n  * look at item 3.\n  */\n void *\n-bsearch(key, base0, nmemb, size, compar)\n-\tregister void *key;\n-\tvoid *base0;\n-\tsize_t nmemb;\n-\tregister size_t size;\n-\tregister int (*compar)();\n+bsearch (register const void *key, const void *base0,\n+         size_t nmemb, register size_t size,\n+         register int (*compar)(const void *, const void *))\n {\n-\tregister char *base = base0;\n+\tregister const char *base = (const char *) base0;\n \tregister int lim, cmp;\n-\tregister void *p;\n+\tregister const void *p;\n \n \tfor (lim = nmemb; lim != 0; lim >>= 1) {\n \t\tp = base + (lim >> 1) * size;\n \t\tcmp = (*compar)(key, p);\n \t\tif (cmp == 0)\n \t\t\treturn (p);\n \t\tif (cmp > 0) {\t/* key > p: move right */\n-\t\t\tbase = (char *)p + size;\n+\t\t\tbase = (const char *)p + size;\n \t\t\tlim--;\n \t\t} /* else move left */\n \t}"}, {"sha": "1f52d2d3098f311b4e900f9a871174cdc17e7bec", "filename": "libiberty/bzero.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fbzero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fbzero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbzero.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -14,9 +14,7 @@ is deprecated in favor of @code{memset}.\n \n \n void\n-bzero (to, count)\n-  char *to;\n-  int count;\n+bzero (char *to, int count)\n {\n   while (count-- > 0)\n     {"}, {"sha": "f4bd27b1cd2a460c89c1e5ba2e3e94190db98c85", "filename": "libiberty/calloc.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fcalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fcalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcalloc.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -13,19 +13,14 @@ Uses @code{malloc} to allocate storage for @var{nelem} objects of\n */\n  \n #include \"ansidecl.h\"\n-#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n-#else\n-#define size_t unsigned long\n-#endif\n \n /* For systems with larger pointers than ints, this must be declared.  */\n-PTR malloc PARAMS ((size_t));\n-void bzero PARAMS ((PTR, size_t));\n+PTR malloc (size_t);\n+void bzero (PTR, size_t);\n \n PTR\n-calloc (nelem, elsize)\n-  size_t nelem, elsize;\n+calloc (size_t nelem, size_t elsize)\n {\n   register PTR ptr;  \n "}, {"sha": "25c36cc997b2c46051c69b5fe104f88595592bee", "filename": "libiberty/choose-temp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fchoose-temp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fchoose-temp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fchoose-temp.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #include \"libiberty.h\"\n-extern char *choose_tmpdir PARAMS ((void));\n+extern char *choose_tmpdir (void);\n \n /* Name of temporary file.\n    mktemp requires 6 trailing X's.  */\n@@ -54,7 +54,7 @@ not recommended.\n */\n \n char *\n-choose_temp_base ()\n+choose_temp_base (void)\n {\n   const char *base = choose_tmpdir ();\n   char *temp_filename;"}, {"sha": "2a59900384f497c7ff41f025e6cc0a1c45159011", "filename": "libiberty/clock.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fclock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fclock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fclock.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -67,7 +67,7 @@ number of seconds used.\n /* FIXME: should be able to declare as clock_t. */\n \n long\n-clock ()\n+clock (void)\n {\n #ifdef HAVE_GETRUSAGE\n   struct rusage rusage;"}, {"sha": "e3bdd91c5507139bb012978a8972f5d71cda8c48", "filename": "libiberty/concat.c", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fconcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fconcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconcat.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -51,11 +51,7 @@ NOTES\n #include \"libiberty.h\"\n #include <sys/types.h>\t\t/* size_t */\n \n-#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n-#else\n-#include <varargs.h>\n-#endif\n \n # if HAVE_STRING_H\n #  include <string.h>\n@@ -69,11 +65,9 @@ NOTES\n #include <stdlib.h>\n #endif\n \n-static inline unsigned long vconcat_length PARAMS ((const char *, va_list));\n+static inline unsigned long vconcat_length (const char *, va_list);\n static inline unsigned long\n-vconcat_length (first, args)\n-     const char *first;\n-     va_list args;\n+vconcat_length (const char *first, va_list args)\n {\n   unsigned long length = 0;\n   const char *arg;\n@@ -84,12 +78,8 @@ vconcat_length (first, args)\n   return length;\n }\n \n-static inline char *vconcat_copy PARAMS ((char *, const char *, va_list));\n static inline char *\n-vconcat_copy (dst, first, args)\n-     char *dst;\n-     const char *first;\n-     va_list args;\n+vconcat_copy (char *dst, const char *first, va_list args)\n {\n   char *end = dst;\n   const char *arg;\n@@ -108,7 +98,7 @@ vconcat_copy (dst, first, args)\n /* @undocumented concat_length */\n \n unsigned long\n-concat_length VPARAMS ((const char *first, ...))\n+concat_length (const char *first, ...)\n {\n   unsigned long length;\n \n@@ -123,7 +113,7 @@ concat_length VPARAMS ((const char *first, ...))\n /* @undocumented concat_copy */\n \n char *\n-concat_copy VPARAMS ((char *dst, const char *first, ...))\n+concat_copy (char *dst, const char *first, ...)\n {\n   char *save_dst;\n \n@@ -142,7 +132,7 @@ char *libiberty_concat_ptr;\n /* @undocumented concat_copy2 */\n \n char *\n-concat_copy2 VPARAMS ((const char *first, ...))\n+concat_copy2 (const char *first, ...)\n {\n   VA_OPEN (args, first);\n   VA_FIXEDARG (args, const char *, first);\n@@ -153,7 +143,7 @@ concat_copy2 VPARAMS ((const char *first, ...))\n }\n \n char *\n-concat VPARAMS ((const char *first, ...))\n+concat (const char *first, ...)\n {\n   char *newstr;\n \n@@ -190,7 +180,7 @@ when you're extending an existing string or building up a string in a\n */\n \n char *\n-reconcat VPARAMS ((char *optr, const char *first, ...))\n+reconcat (char *optr, const char *first, ...)\n {\n   char *newstr;\n \n@@ -221,7 +211,7 @@ reconcat VPARAMS ((char *optr, const char *first, ...))\n #include <stdio.h>\n \n int\n-main ()\n+main (void)\n {\n   printf (\"\\\"\\\" = \\\"%s\\\"\\n\", concat (NULLP));\n   printf (\"\\\"a\\\" = \\\"%s\\\"\\n\", concat (\"a\", NULLP));"}, {"sha": "6793f22e8ccab04a257a0d26958ba5a1983dd0c2", "filename": "libiberty/copysign.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fcopysign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fcopysign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcopysign.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -132,8 +132,7 @@ typedef union\n #if defined(__IEEE_BIG_ENDIAN) || defined(__IEEE_LITTLE_ENDIAN)\n \n double\n-copysign (x, y)\n-     double x, y;\n+copysign (double x, double y)\n {\n   __ieee_double_shape_type a,b;\n   b.value = y;  \n@@ -145,8 +144,7 @@ copysign (x, y)\n #else\n \n double\n-copysign (x, y)\n-     double x, y;\n+copysign (double x, double y)\n {\n   if ((x < 0 && y > 0) || (x > 0 && y < 0))\n     return -x;"}, {"sha": "6c7e859fc77910b69da5a2b200303fdf0ef3d614", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 171, "deletions": 313, "changes": 484, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -109,39 +109,34 @@\n #define CP_STATIC_IF_GLIBCPP_V3 static\n \n #define cplus_demangle_fill_name d_fill_name\n-static int\n-d_fill_name PARAMS ((struct demangle_component *, const char *, int));\n+static int d_fill_name (struct demangle_component *, const char *, int);\n \n #define cplus_demangle_fill_extended_operator d_fill_extended_operator\n static int\n-d_fill_extended_operator PARAMS ((struct demangle_component *, int,\n-\t\t\t\t  struct demangle_component *));\n+d_fill_extended_operator (struct demangle_component *, int,\n+                          struct demangle_component *);\n \n #define cplus_demangle_fill_ctor d_fill_ctor\n static int\n-d_fill_ctor PARAMS ((struct demangle_component *, enum gnu_v3_ctor_kinds,\n-\t\t     struct demangle_component *));\n+d_fill_ctor (struct demangle_component *, enum gnu_v3_ctor_kinds,\n+             struct demangle_component *);\n \n #define cplus_demangle_fill_dtor d_fill_dtor\n static int\n-d_fill_dtor PARAMS ((struct demangle_component *, enum gnu_v3_dtor_kinds,\n-\t\t     struct demangle_component *));\n+d_fill_dtor (struct demangle_component *, enum gnu_v3_dtor_kinds,\n+             struct demangle_component *);\n \n #define cplus_demangle_mangled_name d_mangled_name\n-static struct demangle_component *\n-d_mangled_name PARAMS ((struct d_info *, int));\n+static struct demangle_component *d_mangled_name (struct d_info *, int);\n \n #define cplus_demangle_type d_type\n-static struct demangle_component *\n-d_type PARAMS ((struct d_info *));\n+static struct demangle_component *d_type (struct d_info *);\n \n #define cplus_demangle_print d_print\n-static char *\n-d_print PARAMS ((int, const struct demangle_component *, int, size_t *));\n+static char *d_print (int, const struct demangle_component *, int, size_t *);\n \n #define cplus_demangle_init_info d_init_info\n-static void\n-d_init_info PARAMS ((const char *, int, size_t, struct d_info *));\n+static void d_init_info (const char *, int, size_t, struct d_info *);\n \n #else /* ! defined(IN_GLIBCPP_V3) */\n #define CP_STATIC_IF_GLIBCPP_V3\n@@ -286,187 +281,157 @@ struct d_print_info\n   ((dpi)->buf == NULL || (dpi)->len == 0 ? '\\0' : (dpi)->buf[(dpi)->len - 1])\n \n #ifdef CP_DEMANGLE_DEBUG\n-static void \n-d_dump PARAMS ((struct demangle_component *, int));\n+static void d_dump (struct demangle_component *, int);\n #endif\n \n static struct demangle_component *\n-d_make_empty PARAMS ((struct d_info *));\n+d_make_empty (struct d_info *);\n \n static struct demangle_component *\n-d_make_comp PARAMS ((struct d_info *, enum demangle_component_type,\n-\t\t     struct demangle_component *,\n-\t\t     struct demangle_component *));\n+d_make_comp (struct d_info *, enum demangle_component_type,\n+             struct demangle_component *,\n+             struct demangle_component *);\n \n static struct demangle_component *\n-d_make_name PARAMS ((struct d_info *, const char *, int));\n+d_make_name (struct d_info *, const char *, int);\n \n static struct demangle_component *\n-d_make_builtin_type PARAMS ((struct d_info *,\n-\t\t\t     const struct demangle_builtin_type_info *));\n+d_make_builtin_type (struct d_info *,\n+                     const struct demangle_builtin_type_info *);\n \n static struct demangle_component *\n-d_make_operator PARAMS ((struct d_info *,\n-\t\t\t const struct demangle_operator_info *));\n+d_make_operator (struct d_info *,\n+                 const struct demangle_operator_info *);\n \n static struct demangle_component *\n-d_make_extended_operator PARAMS ((struct d_info *, int,\n-\t\t\t\t  struct demangle_component *));\n+d_make_extended_operator (struct d_info *, int,\n+                          struct demangle_component *);\n \n static struct demangle_component *\n-d_make_ctor PARAMS ((struct d_info *, enum gnu_v3_ctor_kinds,\n-\t\t     struct demangle_component *));\n+d_make_ctor (struct d_info *, enum gnu_v3_ctor_kinds,\n+             struct demangle_component *);\n \n static struct demangle_component *\n-d_make_dtor PARAMS ((struct d_info *, enum gnu_v3_dtor_kinds,\n-\t\t     struct demangle_component *));\n+d_make_dtor (struct d_info *, enum gnu_v3_dtor_kinds,\n+             struct demangle_component *);\n \n static struct demangle_component *\n-d_make_template_param PARAMS ((struct d_info *, long));\n+d_make_template_param (struct d_info *, long);\n \n static struct demangle_component *\n-d_make_sub PARAMS ((struct d_info *, const char *, int));\n+d_make_sub (struct d_info *, const char *, int);\n \n static int\n-has_return_type PARAMS ((struct demangle_component *));\n+has_return_type (struct demangle_component *);\n \n static int\n-is_ctor_dtor_or_conversion PARAMS ((struct demangle_component *));\n+is_ctor_dtor_or_conversion (struct demangle_component *);\n \n-static struct demangle_component *\n-d_encoding PARAMS ((struct d_info *, int));\n+static struct demangle_component *d_encoding (struct d_info *, int);\n \n-static struct demangle_component *\n-d_name PARAMS ((struct d_info *));\n+static struct demangle_component *d_name (struct d_info *);\n \n-static struct demangle_component *\n-d_nested_name PARAMS ((struct d_info *));\n+static struct demangle_component *d_nested_name (struct d_info *);\n \n-static struct demangle_component *\n-d_prefix PARAMS ((struct d_info *));\n+static struct demangle_component *d_prefix (struct d_info *);\n \n-static struct demangle_component *\n-d_unqualified_name PARAMS ((struct d_info *));\n+static struct demangle_component *d_unqualified_name (struct d_info *);\n \n-static struct demangle_component *\n-d_source_name PARAMS ((struct d_info *));\n+static struct demangle_component *d_source_name (struct d_info *);\n \n-static long\n-d_number PARAMS ((struct d_info *));\n+static long d_number (struct d_info *);\n \n-static struct demangle_component *\n-d_identifier PARAMS ((struct d_info *, int));\n+static struct demangle_component *d_identifier (struct d_info *, int);\n \n-static struct demangle_component *\n-d_operator_name PARAMS ((struct d_info *));\n+static struct demangle_component *d_operator_name (struct d_info *);\n \n-static struct demangle_component *\n-d_special_name PARAMS ((struct d_info *));\n+static struct demangle_component *d_special_name (struct d_info *);\n \n-static int\n-d_call_offset PARAMS ((struct d_info *, int));\n+static int d_call_offset (struct d_info *, int);\n \n-static struct demangle_component *\n-d_ctor_dtor_name PARAMS ((struct d_info *));\n+static struct demangle_component *d_ctor_dtor_name (struct d_info *);\n \n static struct demangle_component **\n-d_cv_qualifiers PARAMS ((struct d_info *, struct demangle_component **, int));\n+d_cv_qualifiers (struct d_info *, struct demangle_component **, int);\n \n static struct demangle_component *\n-d_function_type PARAMS ((struct d_info *));\n+d_function_type (struct d_info *);\n \n static struct demangle_component *\n-d_bare_function_type PARAMS ((struct d_info *, int));\n+d_bare_function_type (struct d_info *, int);\n \n static struct demangle_component *\n-d_class_enum_type PARAMS ((struct d_info *));\n+d_class_enum_type (struct d_info *);\n \n-static struct demangle_component *\n-d_array_type PARAMS ((struct d_info *));\n+static struct demangle_component *d_array_type (struct d_info *);\n \n static struct demangle_component *\n-d_pointer_to_member_type PARAMS ((struct d_info *));\n+d_pointer_to_member_type (struct d_info *);\n \n static struct demangle_component *\n-d_template_param PARAMS ((struct d_info *));\n+d_template_param (struct d_info *);\n \n-static struct demangle_component *\n-d_template_args PARAMS ((struct d_info *));\n+static struct demangle_component *d_template_args (struct d_info *);\n \n static struct demangle_component *\n-d_template_arg PARAMS ((struct d_info *));\n+d_template_arg (struct d_info *);\n \n-static struct demangle_component *\n-d_expression PARAMS ((struct d_info *));\n+static struct demangle_component *d_expression (struct d_info *);\n \n-static struct demangle_component *\n-d_expr_primary PARAMS ((struct d_info *));\n+static struct demangle_component *d_expr_primary (struct d_info *);\n \n-static struct demangle_component *\n-d_local_name PARAMS ((struct d_info *));\n+static struct demangle_component *d_local_name (struct d_info *);\n \n-static int\n-d_discriminator PARAMS ((struct d_info *));\n+static int d_discriminator (struct d_info *);\n \n static int\n-d_add_substitution PARAMS ((struct d_info *, struct demangle_component *));\n+d_add_substitution (struct d_info *, struct demangle_component *);\n \n-static struct demangle_component *\n-d_substitution PARAMS ((struct d_info *, int));\n+static struct demangle_component *d_substitution (struct d_info *, int);\n \n-static void\n-d_print_resize PARAMS ((struct d_print_info *, size_t));\n+static void d_print_resize (struct d_print_info *, size_t);\n \n-static void\n-d_print_append_char PARAMS ((struct d_print_info *, int));\n+static void d_print_append_char (struct d_print_info *, int);\n \n static void\n-d_print_append_buffer PARAMS ((struct d_print_info *, const char *, size_t));\n+d_print_append_buffer (struct d_print_info *, const char *, size_t);\n \n-static void\n-d_print_error PARAMS ((struct d_print_info *));\n+static void d_print_error (struct d_print_info *);\n \n static void\n-d_print_comp PARAMS ((struct d_print_info *,\n-\t\t      const struct demangle_component *));\n+d_print_comp (struct d_print_info *, const struct demangle_component *);\n \n static void\n-d_print_java_identifier PARAMS ((struct d_print_info *, const char *, int));\n+d_print_java_identifier (struct d_print_info *, const char *, int);\n \n static void\n-d_print_mod_list PARAMS ((struct d_print_info *, struct d_print_mod *, int));\n+d_print_mod_list (struct d_print_info *, struct d_print_mod *, int);\n \n static void\n-d_print_mod PARAMS ((struct d_print_info *,\n-\t\t     const struct demangle_component *));\n+d_print_mod (struct d_print_info *, const struct demangle_component *);\n \n static void\n-d_print_function_type PARAMS ((struct d_print_info *,\n-\t\t\t       const struct demangle_component *,\n-\t\t\t       struct d_print_mod *));\n+d_print_function_type (struct d_print_info *,\n+                       const struct demangle_component *,\n+                       struct d_print_mod *);\n \n static void\n-d_print_array_type PARAMS ((struct d_print_info *,\n-\t\t\t    const struct demangle_component *,\n-\t\t\t    struct d_print_mod *));\n+d_print_array_type (struct d_print_info *,\n+                    const struct demangle_component *,\n+                    struct d_print_mod *);\n \n static void\n-d_print_expr_op PARAMS ((struct d_print_info *,\n-\t\t\t const struct demangle_component *));\n+d_print_expr_op (struct d_print_info *, const struct demangle_component *);\n \n static void\n-d_print_cast PARAMS ((struct d_print_info *,\n-\t\t      const struct demangle_component *));\n+d_print_cast (struct d_print_info *, const struct demangle_component *);\n \n-static char *\n-d_demangle PARAMS ((const char *, int, size_t *));\n+static char *d_demangle (const char *, int, size_t *);\n \n #ifdef CP_DEMANGLE_DEBUG\n \n static void\n-d_dump (dc, indent)\n-     struct demangle_component *dc;\n-     int indent;\n+d_dump (struct demangle_component *dc, int indent)\n {\n   int i;\n \n@@ -645,10 +610,7 @@ d_dump (dc, indent)\n \n CP_STATIC_IF_GLIBCPP_V3\n int\n-cplus_demangle_fill_name (p, s, len)\n-     struct demangle_component *p;\n-     const char *s;\n-     int len;\n+cplus_demangle_fill_name (struct demangle_component *p, const char *s, int len)\n {\n   if (p == NULL || s == NULL || len == 0)\n     return 0;\n@@ -662,10 +624,8 @@ cplus_demangle_fill_name (p, s, len)\n \n CP_STATIC_IF_GLIBCPP_V3\n int\n-cplus_demangle_fill_extended_operator (p, args, name)\n-     struct demangle_component *p;\n-     int args;\n-     struct demangle_component *name;\n+cplus_demangle_fill_extended_operator (struct demangle_component *p, int args,\n+                                       struct demangle_component *name)\n {\n   if (p == NULL || args < 0 || name == NULL)\n     return 0;\n@@ -679,10 +639,9 @@ cplus_demangle_fill_extended_operator (p, args, name)\n \n CP_STATIC_IF_GLIBCPP_V3\n int\n-cplus_demangle_fill_ctor (p, kind, name)\n-     struct demangle_component *p;\n-     enum gnu_v3_ctor_kinds kind;\n-     struct demangle_component *name;\n+cplus_demangle_fill_ctor (struct demangle_component *p,\n+                          enum gnu_v3_ctor_kinds kind,\n+                          struct demangle_component *name)\n {\n   if (p == NULL\n       || name == NULL\n@@ -699,10 +658,9 @@ cplus_demangle_fill_ctor (p, kind, name)\n \n CP_STATIC_IF_GLIBCPP_V3\n int\n-cplus_demangle_fill_dtor (p, kind, name)\n-     struct demangle_component *p;\n-     enum gnu_v3_dtor_kinds kind;\n-     struct demangle_component *name;\n+cplus_demangle_fill_dtor (struct demangle_component *p,\n+                          enum gnu_v3_dtor_kinds kind,\n+                          struct demangle_component *name)\n {\n   if (p == NULL\n       || name == NULL\n@@ -718,8 +676,7 @@ cplus_demangle_fill_dtor (p, kind, name)\n /* Add a new component.  */\n \n static struct demangle_component *\n-d_make_empty (di)\n-     struct d_info *di;\n+d_make_empty (struct d_info *di)\n {\n   struct demangle_component *p;\n \n@@ -733,11 +690,9 @@ d_make_empty (di)\n /* Add a new generic component.  */\n \n static struct demangle_component *\n-d_make_comp (di, type, left, right)\n-     struct d_info *di;\n-     enum demangle_component_type type;\n-     struct demangle_component *left;\n-     struct demangle_component *right;\n+d_make_comp (struct d_info *di, enum demangle_component_type type,\n+             struct demangle_component *left,\n+             struct demangle_component *right)\n {\n   struct demangle_component *p;\n \n@@ -826,10 +781,7 @@ d_make_comp (di, type, left, right)\n /* Add a new name component.  */\n \n static struct demangle_component *\n-d_make_name (di, s, len)\n-     struct d_info *di;\n-     const char *s;\n-     int len;\n+d_make_name (struct d_info *di, const char *s, int len)\n {\n   struct demangle_component *p;\n \n@@ -842,9 +794,8 @@ d_make_name (di, s, len)\n /* Add a new builtin type component.  */\n \n static struct demangle_component *\n-d_make_builtin_type (di, type)\n-     struct d_info *di;\n-     const struct demangle_builtin_type_info *type;\n+d_make_builtin_type (struct d_info *di,\n+                     const struct demangle_builtin_type_info *type)\n {\n   struct demangle_component *p;\n \n@@ -862,9 +813,7 @@ d_make_builtin_type (di, type)\n /* Add a new operator component.  */\n \n static struct demangle_component *\n-d_make_operator (di, op)\n-     struct d_info *di;\n-     const struct demangle_operator_info *op;\n+d_make_operator (struct d_info *di, const struct demangle_operator_info *op)\n {\n   struct demangle_component *p;\n \n@@ -880,10 +829,8 @@ d_make_operator (di, op)\n /* Add a new extended operator component.  */\n \n static struct demangle_component *\n-d_make_extended_operator (di, args, name)\n-     struct d_info *di;\n-     int args;\n-     struct demangle_component *name;\n+d_make_extended_operator (struct d_info *di, int args,\n+                          struct demangle_component *name)\n {\n   struct demangle_component *p;\n \n@@ -896,10 +843,8 @@ d_make_extended_operator (di, args, name)\n /* Add a new constructor component.  */\n \n static struct demangle_component *\n-d_make_ctor (di, kind,  name)\n-     struct d_info *di;\n-     enum gnu_v3_ctor_kinds kind;\n-     struct demangle_component *name;\n+d_make_ctor (struct d_info *di, enum gnu_v3_ctor_kinds kind,\n+             struct demangle_component *name)\n {\n   struct demangle_component *p;\n \n@@ -912,10 +857,8 @@ d_make_ctor (di, kind,  name)\n /* Add a new destructor component.  */\n \n static struct demangle_component *\n-d_make_dtor (di, kind, name)\n-     struct d_info *di;\n-     enum gnu_v3_dtor_kinds kind;\n-     struct demangle_component *name;\n+d_make_dtor (struct d_info *di, enum gnu_v3_dtor_kinds kind,\n+             struct demangle_component *name)\n {\n   struct demangle_component *p;\n \n@@ -928,9 +871,7 @@ d_make_dtor (di, kind, name)\n /* Add a new template parameter.  */\n \n static struct demangle_component *\n-d_make_template_param (di, i)\n-     struct d_info *di;\n-     long i;\n+d_make_template_param (struct d_info *di, long i)\n {\n   struct demangle_component *p;\n \n@@ -946,10 +887,7 @@ d_make_template_param (di, i)\n /* Add a new standard substitution component.  */\n \n static struct demangle_component *\n-d_make_sub (di, name, len)\n-     struct d_info *di;\n-     const char *name;\n-     int len;\n+d_make_sub (struct d_info *di, const char *name, int len)\n {\n   struct demangle_component *p;\n \n@@ -969,9 +907,7 @@ d_make_sub (di, name, len)\n \n CP_STATIC_IF_GLIBCPP_V3\n struct demangle_component *\n-cplus_demangle_mangled_name (di, top_level)\n-     struct d_info *di;\n-     int top_level;\n+cplus_demangle_mangled_name (struct d_info *di, int top_level)\n {\n   if (d_next_char (di) != '_')\n     return NULL;\n@@ -990,8 +926,7 @@ cplus_demangle_mangled_name (di, top_level)\n    return types.  */\n \n static int\n-has_return_type (dc)\n-     struct demangle_component *dc;\n+has_return_type (struct demangle_component *dc)\n {\n   if (dc == NULL)\n     return 0;\n@@ -1012,8 +947,7 @@ has_return_type (dc)\n    conversion operator.  */\n \n static int\n-is_ctor_dtor_or_conversion (dc)\n-     struct demangle_component *dc;\n+is_ctor_dtor_or_conversion (struct demangle_component *dc)\n {\n   if (dc == NULL)\n     return 0;\n@@ -1041,9 +975,7 @@ is_ctor_dtor_or_conversion (dc)\n    we would not correctly demangle names in local scopes.  */\n \n static struct demangle_component *\n-d_encoding (di, top_level)\n-     struct d_info *di;\n-     int top_level;\n+d_encoding (struct d_info *di, int top_level)\n {\n   char peek = d_peek_char (di);\n \n@@ -1105,8 +1037,7 @@ d_encoding (di, top_level)\n */\n \n static struct demangle_component *\n-d_name (di)\n-     struct d_info *di;\n+d_name (struct d_info *di)\n {\n   char peek = d_peek_char (di);\n   struct demangle_component *dc;\n@@ -1183,8 +1114,7 @@ d_name (di)\n */\n \n static struct demangle_component *\n-d_nested_name (di)\n-     struct d_info *di;\n+d_nested_name (struct d_info *di)\n {\n   struct demangle_component *ret;\n   struct demangle_component **pret;\n@@ -1218,8 +1148,7 @@ d_nested_name (di)\n */\n \n static struct demangle_component *\n-d_prefix (di)\n-     struct d_info *di;\n+d_prefix (struct d_info *di)\n {\n   struct demangle_component *ret = NULL;\n \n@@ -1278,8 +1207,7 @@ d_prefix (di)\n */\n \n static struct demangle_component *\n-d_unqualified_name (di)\n-     struct d_info *di;\n+d_unqualified_name (struct d_info *di)\n {\n   char peek;\n \n@@ -1304,8 +1232,7 @@ d_unqualified_name (di)\n /* <source-name> ::= <(positive length) number> <identifier>  */\n \n static struct demangle_component *\n-d_source_name (di)\n-     struct d_info *di;\n+d_source_name (struct d_info *di)\n {\n   long len;\n   struct demangle_component *ret;\n@@ -1321,8 +1248,7 @@ d_source_name (di)\n /* number ::= [n] <(non-negative decimal integer)>  */\n \n static long\n-d_number (di)\n-     struct d_info *di;\n+d_number (struct d_info *di)\n {\n   int negative;\n   char peek;\n@@ -1355,9 +1281,7 @@ d_number (di)\n /* identifier ::= <(unqualified source code identifier)>  */\n \n static struct demangle_component *\n-d_identifier (di, len)\n-     struct d_info *di;\n-     int len;\n+d_identifier (struct d_info *di, int len)\n {\n   const char *name;\n \n@@ -1460,8 +1384,7 @@ const struct demangle_operator_info cplus_demangle_operators[] =\n };\n \n static struct demangle_component *\n-d_operator_name (di)\n-     struct d_info *di;\n+d_operator_name (struct d_info *di)\n {\n   char c1;\n   char c2;\n@@ -1519,8 +1442,7 @@ d_operator_name (di)\n */\n \n static struct demangle_component *\n-d_special_name (di)\n-     struct d_info *di;\n+d_special_name (struct d_info *di)\n {\n   char c;\n \n@@ -1629,9 +1551,7 @@ d_special_name (di)\n    display it in verbose mode.  */\n \n static int\n-d_call_offset (di, c)\n-     struct d_info *di;\n-     int c;\n+d_call_offset (struct d_info *di, int c)\n {\n   if (c == '\\0')\n     c = d_next_char (di);\n@@ -1663,8 +1583,7 @@ d_call_offset (di, c)\n */\n \n static struct demangle_component *\n-d_ctor_dtor_name (di)\n-     struct d_info *di;\n+d_ctor_dtor_name (struct d_info *di)\n {\n   if (di->last_name != NULL)\n     {\n@@ -1777,8 +1696,7 @@ cplus_demangle_builtin_types[D_BUILTIN_TYPE_COUNT] =\n \n CP_STATIC_IF_GLIBCPP_V3\n struct demangle_component *\n-cplus_demangle_type (di)\n-     struct d_info *di;\n+cplus_demangle_type (struct d_info *di)\n {\n   char peek;\n   struct demangle_component *ret;\n@@ -1947,10 +1865,8 @@ cplus_demangle_type (di)\n /* <CV-qualifiers> ::= [r] [V] [K]  */\n \n static struct demangle_component **\n-d_cv_qualifiers (di, pret, member_fn)\n-     struct d_info *di;\n-     struct demangle_component **pret;\n-     int member_fn;\n+d_cv_qualifiers (struct d_info *di,\n+                 struct demangle_component **pret, int member_fn)\n {\n   char peek;\n \n@@ -1996,8 +1912,7 @@ d_cv_qualifiers (di, pret, member_fn)\n /* <function-type> ::= F [Y] <bare-function-type> E  */\n \n static struct demangle_component *\n-d_function_type (di)\n-     struct d_info *di;\n+d_function_type (struct d_info *di)\n {\n   struct demangle_component *ret;\n \n@@ -2018,9 +1933,7 @@ d_function_type (di)\n /* <bare-function-type> ::= <type>+  */\n \n static struct demangle_component *\n-d_bare_function_type (di, has_return_type)\n-     struct d_info *di;\n-     int has_return_type;\n+d_bare_function_type (struct d_info *di, int has_return_type)\n {\n   struct demangle_component *return_type;\n   struct demangle_component *tl;\n@@ -2075,8 +1988,7 @@ d_bare_function_type (di, has_return_type)\n /* <class-enum-type> ::= <name>  */\n \n static struct demangle_component *\n-d_class_enum_type (di)\n-     struct d_info *di;\n+d_class_enum_type (struct d_info *di)\n {\n   return d_name (di);\n }\n@@ -2086,8 +1998,7 @@ d_class_enum_type (di)\n */\n \n static struct demangle_component *\n-d_array_type (di)\n-     struct d_info *di;\n+d_array_type (struct d_info *di)\n {\n   char peek;\n   struct demangle_component *dim;\n@@ -2130,8 +2041,7 @@ d_array_type (di)\n /* <pointer-to-member-type> ::= M <(class) type> <(member) type>  */\n \n static struct demangle_component *\n-d_pointer_to_member_type (di)\n-     struct d_info *di;\n+d_pointer_to_member_type (struct d_info *di)\n {\n   struct demangle_component *cl;\n   struct demangle_component *mem;\n@@ -2168,8 +2078,7 @@ d_pointer_to_member_type (di)\n */\n \n static struct demangle_component *\n-d_template_param (di)\n-     struct d_info *di;\n+d_template_param (struct d_info *di)\n {\n   long param;\n \n@@ -2197,8 +2106,7 @@ d_template_param (di)\n /* <template-args> ::= I <template-arg>+ E  */\n \n static struct demangle_component *\n-d_template_args (di)\n-     struct d_info *di;\n+d_template_args (struct d_info *di)\n {\n   struct demangle_component *hold_last_name;\n   struct demangle_component *al;\n@@ -2245,8 +2153,7 @@ d_template_args (di)\n */\n \n static struct demangle_component *\n-d_template_arg (di)\n-     struct d_info *di;\n+d_template_arg (struct d_info *di)\n {\n   struct demangle_component *ret;\n \n@@ -2278,8 +2185,7 @@ d_template_arg (di)\n */\n \n static struct demangle_component *\n-d_expression (di)\n-     struct d_info *di;\n+d_expression (struct d_info *di)\n {\n   char peek;\n \n@@ -2379,8 +2285,7 @@ d_expression (di)\n */\n \n static struct demangle_component *\n-d_expr_primary (di)\n-     struct d_info *di;\n+d_expr_primary (struct d_info *di)\n {\n   struct demangle_component *ret;\n \n@@ -2436,8 +2341,7 @@ d_expr_primary (di)\n */\n \n static struct demangle_component *\n-d_local_name (di)\n-     struct d_info *di;\n+d_local_name (struct d_info *di)\n {\n   struct demangle_component *function;\n \n@@ -2475,8 +2379,7 @@ d_local_name (di)\n    We should print it out in verbose mode.  */\n \n static int\n-d_discriminator (di)\n-     struct d_info *di;\n+d_discriminator (struct d_info *di)\n {\n   long discrim;\n \n@@ -2492,9 +2395,7 @@ d_discriminator (di)\n /* Add a new substitution.  */\n \n static int\n-d_add_substitution (di, dc)\n-     struct d_info *di;\n-     struct demangle_component *dc;\n+d_add_substitution (struct d_info *di, struct demangle_component *dc)\n {\n   if (dc == NULL)\n     return 0;\n@@ -2550,9 +2451,7 @@ static const struct d_standard_sub_info standard_subs[] =\n };\n \n static struct demangle_component *\n-d_substitution (di, prefix)\n-     struct d_info *di;\n-     int prefix;\n+d_substitution (struct d_info *di, int prefix)\n {\n   char c;\n \n@@ -2639,9 +2538,7 @@ d_substitution (di, prefix)\n /* Resize the print buffer.  */\n \n static void\n-d_print_resize (dpi, add)\n-     struct d_print_info *dpi;\n-     size_t add;\n+d_print_resize (struct d_print_info *dpi, size_t add)\n {\n   size_t need;\n \n@@ -2670,9 +2567,7 @@ d_print_resize (dpi, add)\n /* Append a character to the print buffer.  */\n \n static void\n-d_print_append_char (dpi, c)\n-     struct d_print_info *dpi;\n-     int c;\n+d_print_append_char (struct d_print_info *dpi, int c)\n {\n   if (dpi->buf != NULL)\n     {\n@@ -2691,10 +2586,7 @@ d_print_append_char (dpi, c)\n /* Append a buffer to the print buffer.  */\n \n static void\n-d_print_append_buffer (dpi, s, l)\n-     struct d_print_info *dpi;\n-     const char *s;\n-     size_t l;\n+d_print_append_buffer (struct d_print_info *dpi, const char *s, size_t l)\n {\n   if (dpi->buf != NULL)\n     {\n@@ -2713,8 +2605,7 @@ d_print_append_buffer (dpi, s, l)\n /* Indicate that an error occurred during printing.  */\n \n static void\n-d_print_error (dpi)\n-     struct d_print_info *dpi;\n+d_print_error (struct d_print_info *dpi)\n {\n   free (dpi->buf);\n   dpi->buf = NULL;\n@@ -2730,11 +2621,8 @@ d_print_error (dpi)\n \n CP_STATIC_IF_GLIBCPP_V3\n char *\n-cplus_demangle_print (options, dc, estimate, palc)\n-     int options;\n-     const struct demangle_component *dc;\n-     int estimate;\n-     size_t *palc;\n+cplus_demangle_print (int options, const struct demangle_component *dc,\n+                      int estimate, size_t *palc)\n {\n   struct d_print_info dpi;\n \n@@ -2769,9 +2657,8 @@ cplus_demangle_print (options, dc, estimate, palc)\n /* Subroutine to handle components.  */\n \n static void\n-d_print_comp (dpi, dc)\n-     struct d_print_info *dpi;\n-     const struct demangle_component *dc;\n+d_print_comp (struct d_print_info *dpi,\n+              const struct demangle_component *dc)\n {\n   if (dc == NULL)\n     {\n@@ -3442,10 +3329,7 @@ d_print_comp (dpi, dc)\n    __U<hex-char>+_.  */\n \n static void\n-d_print_java_identifier (dpi, name, len)\n-     struct d_print_info *dpi;\n-     const char *name;\n-     int len;\n+d_print_java_identifier (struct d_print_info *dpi, const char *name, int len)\n {\n   const char *p;\n   const char *end;\n@@ -3495,10 +3379,8 @@ d_print_java_identifier (dpi, name, len)\n    qualifiers on this after printing a function.  */\n \n static void\n-d_print_mod_list (dpi, mods, suffix)\n-     struct d_print_info *dpi;\n-     struct d_print_mod *mods;\n-     int suffix;\n+d_print_mod_list (struct d_print_info *dpi,\n+                  struct d_print_mod *mods, int suffix)\n {\n   struct d_print_template *hold_dpt;\n \n@@ -3574,9 +3456,8 @@ d_print_mod_list (dpi, mods, suffix)\n /* Print a modifier.  */\n \n static void\n-d_print_mod (dpi, mod)\n-     struct d_print_info *dpi;\n-     const struct demangle_component *mod;\n+d_print_mod (struct d_print_info *dpi,\n+             const struct demangle_component *mod)\n {\n   switch (mod->type)\n     {\n@@ -3630,10 +3511,9 @@ d_print_mod (dpi, mod)\n /* Print a function type, except for the return type.  */\n \n static void\n-d_print_function_type (dpi, dc, mods)\n-     struct d_print_info *dpi;\n-     const struct demangle_component *dc;\n-     struct d_print_mod *mods;\n+d_print_function_type (struct d_print_info *dpi,\n+                       const struct demangle_component *dc,\n+                       struct d_print_mod *mods)\n {\n   int need_paren;\n   int saw_mod;\n@@ -3716,10 +3596,9 @@ d_print_function_type (dpi, dc, mods)\n /* Print an array type, except for the element type.  */\n \n static void\n-d_print_array_type (dpi, dc, mods)\n-     struct d_print_info *dpi;\n-     const struct demangle_component *dc;\n-     struct d_print_mod *mods;\n+d_print_array_type (struct d_print_info *dpi,\n+                    const struct demangle_component *dc,\n+                    struct d_print_mod *mods)\n {\n   int need_space;\n \n@@ -3771,9 +3650,8 @@ d_print_array_type (dpi, dc, mods)\n /* Print an operator in an expression.  */\n \n static void\n-d_print_expr_op (dpi, dc)\n-     struct d_print_info *dpi;\n-     const struct demangle_component *dc;\n+d_print_expr_op (struct d_print_info *dpi,\n+                 const struct demangle_component *dc)\n {\n   if (dc->type == DEMANGLE_COMPONENT_OPERATOR)\n     d_append_buffer (dpi, dc->u.s_operator.op->name,\n@@ -3785,9 +3663,8 @@ d_print_expr_op (dpi, dc)\n /* Print a cast.  */\n \n static void\n-d_print_cast (dpi, dc)\n-     struct d_print_info *dpi;\n-     const struct demangle_component *dc;\n+d_print_cast (struct d_print_info *dpi,\n+              const struct demangle_component *dc)\n {\n   if (d_left (dc)->type != DEMANGLE_COMPONENT_TEMPLATE)\n     d_print_comp (dpi, d_left (dc));\n@@ -3831,11 +3708,8 @@ d_print_cast (dpi, dc)\n \n CP_STATIC_IF_GLIBCPP_V3\n void\n-cplus_demangle_init_info (mangled, options, len, di)\n-     const char *mangled;\n-     int options;\n-     size_t len;\n-     struct d_info *di;\n+cplus_demangle_init_info (const char *mangled, int options, size_t len,\n+                          struct d_info *di)\n {\n   di->s = mangled;\n   di->send = mangled + len;\n@@ -3868,10 +3742,7 @@ cplus_demangle_init_info (mangled, options, len, di)\n    a memory allocation failure.  On failure, this returns NULL.  */\n \n static char *\n-d_demangle (mangled, options, palc)\n-     const char* mangled;\n-     int options;\n-     size_t *palc;\n+d_demangle (const char* mangled, int options, size_t *palc)\n {\n   size_t len;\n   int type;\n@@ -3995,7 +3866,7 @@ d_demangle (mangled, options, palc)\n \n #if defined(IN_LIBGCC2) || defined(IN_GLIBCPP_V3)\n \n-extern char *__cxa_demangle PARAMS ((const char *, char *, size_t *, int *));\n+extern char *__cxa_demangle (const char *, char *, size_t *, int *);\n \n /* ia64 ABI-mandated entry point in the C++ runtime library for\n    performing demangling.  MANGLED_NAME is a NUL-terminated character\n@@ -4024,11 +3895,8 @@ extern char *__cxa_demangle PARAMS ((const char *, char *, size_t *, int *));\n    GNU extensions.  */\n \n char *\n-__cxa_demangle (mangled_name, output_buffer, length, status)\n-     const char *mangled_name;\n-     char *output_buffer;\n-     size_t *length;\n-     int *status;\n+__cxa_demangle (const char *mangled_name, char *output_buffer,\n+                size_t *length, int *status)\n {\n   char *demangled;\n   size_t alc;\n@@ -4094,9 +3962,7 @@ __cxa_demangle (mangled_name, output_buffer, length, status)\n    demangled name.  Otherwise, return NULL.  */\n \n char *\n-cplus_demangle_v3 (mangled, options)\n-     const char* mangled;\n-     int options;\n+cplus_demangle_v3 (const char* mangled, int options)\n {\n   size_t alc;\n \n@@ -4111,8 +3977,7 @@ cplus_demangle_v3 (mangled, options)\n    of JArray<TYPE> with TYPE[].  */\n \n char *\n-java_demangle_v3 (mangled)\n-     const char* mangled;\n+java_demangle_v3 (const char* mangled)\n {\n   size_t alc;\n   char *demangled;\n@@ -4162,10 +4027,9 @@ java_demangle_v3 (mangled)\n    *DTOR_KIND appropriately.  */\n \n static int\n-is_ctor_or_dtor (mangled, ctor_kind, dtor_kind)\n-     const char *mangled;\n-     enum gnu_v3_ctor_kinds *ctor_kind;\n-     enum gnu_v3_dtor_kinds *dtor_kind;\n+is_ctor_or_dtor (const char *mangled,\n+                 enum gnu_v3_ctor_kinds *ctor_kind,\n+                 enum gnu_v3_dtor_kinds *dtor_kind)\n {\n   struct d_info di;\n   struct demangle_component *dc;\n@@ -4248,8 +4112,7 @@ is_ctor_or_dtor (mangled, ctor_kind, dtor_kind)\n    name.  A non-zero return indicates the type of constructor.  */\n \n enum gnu_v3_ctor_kinds\n-is_gnu_v3_mangled_ctor (name)\n-     const char *name;\n+is_gnu_v3_mangled_ctor (const char *name)\n {\n   enum gnu_v3_ctor_kinds ctor_kind;\n   enum gnu_v3_dtor_kinds dtor_kind;\n@@ -4264,8 +4127,7 @@ is_gnu_v3_mangled_ctor (name)\n    name.  A non-zero return indicates the type of destructor.  */\n \n enum gnu_v3_dtor_kinds\n-is_gnu_v3_mangled_dtor (name)\n-     const char *name;\n+is_gnu_v3_mangled_dtor (const char *name)\n {\n   enum gnu_v3_ctor_kinds ctor_kind;\n   enum gnu_v3_dtor_kinds dtor_kind;\n@@ -4299,9 +4161,7 @@ const char* program_name;\n /* Prints usage summary to FP and then exits with EXIT_VALUE.  */\n \n static void\n-print_usage (fp, exit_value)\n-     FILE* fp;\n-     int exit_value;\n+print_usage (FILE* fp, int exit_value)\n {\n   fprintf (fp, \"Usage: %s [options] [names ...]\\n\", program_name);\n   fprintf (fp, \"Options:\\n\");\n@@ -4328,9 +4188,7 @@ static const struct option long_options[] =\n    with their demangled equivalents.  */\n \n int\n-main (argc, argv)\n-     int argc;\n-     char *argv[];\n+main (int argc, char *argv[])\n {\n   int i;\n   int opt_char;"}, {"sha": "4fe1fa572475e72a80b57974617b8db11fd4d3a1", "filename": "libiberty/cp-demangle.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fcp-demangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9486db4fb6e49c2359282879d900de782ba046ab/libiberty%2Fcp-demangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.h?ref=9486db4fb6e49c2359282879d900de782ba046ab", "patch": "@@ -148,14 +148,14 @@ cplus_demangle_builtin_types[D_BUILTIN_TYPE_COUNT];\n \n CP_STATIC_IF_GLIBCPP_V3\n struct demangle_component *\n-cplus_demangle_mangled_name PARAMS ((struct d_info *, int));\n+cplus_demangle_mangled_name (struct d_info *, int);\n \n CP_STATIC_IF_GLIBCPP_V3\n struct demangle_component *\n-cplus_demangle_type PARAMS ((struct d_info *));\n+cplus_demangle_type (struct d_info *);\n \n extern void\n-cplus_demangle_init_info PARAMS ((const char *, int, size_t, struct d_info *));\n+cplus_demangle_init_info (const char *, int, size_t, struct d_info *);\n \n /* cp-demangle.c needs to define this a little differently */\n #undef CP_STATIC_IF_GLIBCPP_V3"}]}