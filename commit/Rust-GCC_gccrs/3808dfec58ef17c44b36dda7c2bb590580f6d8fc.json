{"sha": "3808dfec58ef17c44b36dda7c2bb590580f6d8fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwOGRmZWM1OGVmMTdjNDRiMzZkZGE3YzJiYjU5MDU4MGY2ZDhmYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-10-16T07:47:33Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-10-16T07:47:33Z"}, "message": "re PR libstdc++/40654 ([C++0x] atomic.cc: 'd' is used uninitialized warning)\n\n2009-10-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/40654\n\tPR libstdc++/40826\n\t* src/atomic.cc (atomic_flag_test_and_set_explicit): Add\n\tstatic_cast from base to derived.\n\t(atomic_flag_clear_explicit): Same.\n\t* include/bits/atomic_2.h (__atomic2::atomic_flag): Public derivation.\n\tRemove value type constructor.\n\t* include/bits/atomic_0.h (__atomic0::atomic_flag): Same.\n\t* include/std/future (_Future_state): Use ATOMIC_FLAG_INIT to\n\tinitialized the atomic_flag member.\n\nFrom-SVN: r152895", "tree": {"sha": "cdc799eed07c90fa504ba1d50d068b242f48f2e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdc799eed07c90fa504ba1d50d068b242f48f2e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3808dfec58ef17c44b36dda7c2bb590580f6d8fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3808dfec58ef17c44b36dda7c2bb590580f6d8fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3808dfec58ef17c44b36dda7c2bb590580f6d8fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/comments", "author": null, "committer": null, "parents": [{"sha": "a3e1ddfc645871eeddc703d8f17f2014197d3f5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e1ddfc645871eeddc703d8f17f2014197d3f5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e1ddfc645871eeddc703d8f17f2014197d3f5c"}], "stats": {"total": 100, "additions": 91, "deletions": 9}, "files": [{"sha": "4f8367eaff0eca9a3888b46bea90cfaf264e22e3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3808dfec58ef17c44b36dda7c2bb590580f6d8fc", "patch": "@@ -1,3 +1,16 @@\n+2009-10-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/40654\n+\tPR libstdc++/40826\n+\t* src/atomic.cc (atomic_flag_test_and_set_explicit): Add\n+\tstatic_cast from base to derived.\n+\t(atomic_flag_clear_explicit): Same.\n+\t* include/bits/atomic_2.h (__atomic2::atomic_flag): Public derivation.\n+\tRemove value type constructor.\n+\t* include/bits/atomic_0.h (__atomic0::atomic_flag): Same.\n+\t* include/std/future (_Future_state): Use ATOMIC_FLAG_INIT to\n+\tinitialized the atomic_flag member.\n+\n 2009-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/xml/authors.xml: Update."}, {"sha": "0caffaf1e9fb91d3355e2e95498729ed6b0e48f0", "filename": "libstdc++-v3/include/bits/atomic_0.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h?ref=3808dfec58ef17c44b36dda7c2bb590580f6d8fc", "patch": "@@ -82,14 +82,15 @@ namespace __atomic0\n     __r; })\n \n   /// atomic_flag\n-  struct atomic_flag : private __atomic_flag_base\n+  struct atomic_flag : public __atomic_flag_base\n   {\n     atomic_flag() = default;\n     ~atomic_flag() = default;\n     atomic_flag(const atomic_flag&) = delete;\n     atomic_flag& operator=(const atomic_flag&) = delete;\n \n-    atomic_flag(bool __i) { _M_i = __i; } // XXX deleted copy ctor != agg\n+    // Conversion to ATOMIC_FLAG_INIT.\n+    atomic_flag(bool __i): __atomic_flag_base({ __i }) { }\n \n     bool\n     test_and_set(memory_order __m = memory_order_seq_cst) volatile;"}, {"sha": "d39adb920a25d4b2927afdf5a2d37afaedc59098", "filename": "libstdc++-v3/include/bits/atomic_2.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h?ref=3808dfec58ef17c44b36dda7c2bb590580f6d8fc", "patch": "@@ -44,14 +44,15 @@\n namespace __atomic2\n {\n   /// atomic_flag\n-  struct atomic_flag : private __atomic_flag_base\n+  struct atomic_flag : public __atomic_flag_base\n   {\n     atomic_flag() = default;\n     ~atomic_flag() = default;\n     atomic_flag(const atomic_flag&) = delete;\n     atomic_flag& operator=(const atomic_flag&) = delete;\n \n-    atomic_flag(bool __i) { _M_i = __i; } // XXX deleted copy ctor != agg\n+    // Conversion to ATOMIC_FLAG_INIT.\n+    atomic_flag(bool __i): __atomic_flag_base({ __i }) { }\n \n     bool\n     test_and_set(memory_order __m = memory_order_seq_cst) volatile"}, {"sha": "f922dcd74d5bbf092ffa0e655dac7bfa40b5e3e8", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=3808dfec58ef17c44b36dda7c2bb590580f6d8fc", "patch": "@@ -150,7 +150,7 @@ namespace std\n     typedef _Future_ptr<_Future_result_base>::type _Future_ptr_type;\n \n   public:\n-    _Future_state() : _M_result(), _M_retrieved(false) { }\n+    _Future_state() : _M_result(), _M_retrieved(ATOMIC_FLAG_INIT) { }\n \n     _Future_state(const _Future_state&) = delete;\n     _Future_state& operator=(const _Future_state&) = delete;"}, {"sha": "775bb7601c17ddeaed7e550b8407df889f8e770a", "filename": "libstdc++-v3/src/atomic.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc?ref=3808dfec58ef17c44b36dda7c2bb590580f6d8fc", "patch": "@@ -80,16 +80,16 @@ namespace std\n     atomic_flag_test_and_set_explicit(volatile __atomic_flag_base* __a,\n \t\t\t\t      memory_order __m) throw ()\n     {\n-      volatile atomic_flag d(__a->_M_i);\n-      return d.test_and_set(__m);\n+      volatile atomic_flag* d = static_cast<volatile atomic_flag*>(__a);\n+      return d->test_and_set(__m);\n     }\n \n     void\n     atomic_flag_clear_explicit(volatile __atomic_flag_base* __a,\n \t\t\t       memory_order __m) throw ()\n     {\n-      volatile atomic_flag d(__a->_M_i);\n-      return d.clear(__m);\n+      volatile atomic_flag* d = static_cast<volatile atomic_flag*>(__a);\n+      return d->clear(__m);\n     }\n \n     void"}, {"sha": "3fd2f2c799d2f47fc453b821d32e9771c062ab38", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/clear/1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.c?ref=3808dfec58ef17c44b36dda7c2bb590580f6d8fc", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-x c -shared-libgcc -lstdc++\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <cassert>\n+#include <stdatomic.h>\n+\n+// libstdc++/40826\n+// libstdc++/40654\n+int main()\n+{\n+  atomic_flag f = ATOMIC_FLAG_INIT;\n+\n+  atomic_flag_clear(&f); // set to false\n+  assert( false == atomic_flag_test_and_set(&f) ); // return previous false, set to true\n+  assert( true == atomic_flag_test_and_set(&f) ); // return true\n+\n+  return 0;\n+}"}, {"sha": "6cb09f34b7a1541920bb444d6011f48d353f2c27", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/clear/1.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3808dfec58ef17c44b36dda7c2bb590580f6d8fc/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.cc?ref=3808dfec58ef17c44b36dda7c2bb590580f6d8fc", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <cstdatomic>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::atomic_flag f = ATOMIC_FLAG_INIT;\n+\n+  f.clear(); // set to false\n+  VERIFY( false == f.test_and_set() ); // return previous false, set to true\n+  VERIFY( true == f.test_and_set() ); // return true\n+\n+  return 0;\n+}"}]}