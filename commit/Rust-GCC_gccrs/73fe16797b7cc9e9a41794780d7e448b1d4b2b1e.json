{"sha": "73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmZTE2Nzk3YjdjYzllOWE0MTc5NDc4MGQ3ZTQ0OGIxZDRiMmIxZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T13:55:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T13:55:34Z"}, "message": "[multiple changes]\n\n2011-11-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* bindgen.adb (Gen_Elab_Calls): In the case\n\tof the AAMP target, set elaboration entities to 1 rather than\n\tincrementing.\n\n2011-11-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Install_Limited_With_Unit): To establish the\n\tproper entities on the ancestors of a child unit that appear\n\tin a limited_with clause, follow the unit links because the\n\tunits are not analyzed and scope information is incomplete.\n\n2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Selected_Component): Refine code\n\tsetting the Atomic_Sync_Required flag to detect one more case.\n\t* exp_util.adb (Activate_Atomic_Synchronization): Refine code\n\tsetting the Atomic_Sync_Required flag to exclude more cases,\n\tdepending on the parent of the node to be examined.\n\n2011-11-04  Bob Duff  <duff@adacore.com>\n\n\t* g-excact.adb: Minor: use named notation.\n\n2011-11-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb: Improve error messages for illegal iterators.\n\nFrom-SVN: r180952", "tree": {"sha": "c293a986ed0b8e8c3860934f1afced9d8a36d475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c293a986ed0b8e8c3860934f1afced9d8a36d475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/comments", "author": null, "committer": null, "parents": [{"sha": "b2ab8c33ed0041184fe3747fbad246a619883600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ab8c33ed0041184fe3747fbad246a619883600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2ab8c33ed0041184fe3747fbad246a619883600"}], "stats": {"total": 197, "additions": 158, "deletions": 39}, "files": [{"sha": "41bd2b6726914078f37d5c4bc40f93de4dbf38b4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "patch": "@@ -1,3 +1,32 @@\n+2011-11-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* bindgen.adb (Gen_Elab_Calls): In the case\n+\tof the AAMP target, set elaboration entities to 1 rather than\n+\tincrementing.\n+\n+2011-11-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Install_Limited_With_Unit): To establish the\n+\tproper entities on the ancestors of a child unit that appear\n+\tin a limited_with clause, follow the unit links because the\n+\tunits are not analyzed and scope information is incomplete.\n+\n+2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Selected_Component): Refine code\n+\tsetting the Atomic_Sync_Required flag to detect one more case.\n+\t* exp_util.adb (Activate_Atomic_Synchronization): Refine code\n+\tsetting the Atomic_Sync_Required flag to exclude more cases,\n+\tdepending on the parent of the node to be examined.\n+\n+2011-11-04  Bob Duff  <duff@adacore.com>\n+\n+\t* g-excact.adb: Minor: use named notation.\n+\n+2011-11-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb: Improve error messages for illegal iterators.\n+\n 2011-11-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_alfa.adb: Add with and use clauses for Exp_Ch8 and"}, {"sha": "a4b7d394deb39a37a9245571e1f007f81723ffa8", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 40, "deletions": 14, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "patch": "@@ -1060,18 +1060,31 @@ package body Bindgen is\n                then\n                   Set_String (\"      E\");\n                   Set_Unit_Number (Unum_Spec);\n-                  Set_String (\" := E\");\n-                  Set_Unit_Number (Unum_Spec);\n-                  Set_String (\" + 1;\");\n+\n+                  --  The AAMP target has no notion of shared libraries, and\n+                  --  there's no possibility of reelaboration, so we treat the\n+                  --  the elaboration var as a flag instead of a counter and\n+                  --  simply set it.\n+\n+                  if AAMP_On_Target then\n+                     Set_String (\" := 1;\");\n+\n+                  --  Otherwise (normal case), increment elaboration counter\n+\n+                  else\n+                     Set_String (\" := E\");\n+                     Set_Unit_Number (Unum_Spec);\n+                     Set_String (\" + 1;\");\n+                  end if;\n+\n                   Write_Statement_Buffer;\n \n                --  In the special case where the target is AAMP and the unit is\n                --  a spec with a body, the elaboration entity is initialized\n                --  here. This is done because it's the only way to accomplish\n-               --  initialization of such entities, because there's not any\n-               --  mechanism provided to initialize global variables at load\n-               --  time on AAMP. (Also note that there is no notion of shared\n-               --  libraries for AAMP, so no possibility of reelaboration.)\n+               --  initialization of such entities, as there is no mechanism\n+               --  provided for initializing global variables at load time on\n+               --  AAMP.\n \n                elsif AAMP_On_Target\n                  and then U.Utype = Is_Spec\n@@ -1106,10 +1119,9 @@ package body Bindgen is\n                --  In the special case where the target is AAMP and the unit is\n                --  a spec with a body, the elaboration entity is initialized\n                --  here. This is done because it's the only way to accomplish\n-               --  initialization of such entities, because there's not any\n-               --  mechanism provided to initialize global variables at load\n-               --  time on AAMP. (Also note that there is no notion of shared\n-               --  libraries for AAMP, so no possibility of reelaboration.)\n+               --  initialization of such entities, as there is no mechanism\n+               --  provided for initializing global variables at load time on\n+               --  AAMP.\n \n                if AAMP_On_Target\n                  and then U.Utype = Is_Spec\n@@ -1185,9 +1197,23 @@ package body Bindgen is\n                then\n                   Set_String (\"      E\");\n                   Set_Unit_Number (Unum_Spec);\n-                  Set_String (\" := E\");\n-                  Set_Unit_Number (Unum_Spec);\n-                  Set_String (\" + 1;\");\n+\n+                  --  The AAMP target has no notion of shared libraries, and\n+                  --  there's no possibility of reelaboration, so we treat the\n+                  --  the elaboration var as a flag instead of a counter and\n+                  --  simply set it.\n+\n+                  if AAMP_On_Target then\n+                     Set_String (\" := 1;\");\n+\n+                  --  Otherwise (normal case), increment elaboration counter\n+\n+                  else\n+                     Set_String (\" := E\");\n+                     Set_Unit_Number (Unum_Spec);\n+                     Set_String (\" + 1;\");\n+                  end if;\n+\n                   Write_Statement_Buffer;\n                end if;\n             end if;"}, {"sha": "8f2b86543dbd1c90ee4cd9394a7d29de5222b42d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "patch": "@@ -8196,15 +8196,44 @@ package body Exp_Ch4 is\n          Analyze (N);\n       end if;\n \n-      --  If we still have a selected component, and the type is an Atomic\n-      --  type for which Atomic_Sync is enabled, then we set the atomic sync\n-      --  flag on the selector.\n+      --  Set Atomic_Sync_Required if necessary for atomic component\n \n-      if Nkind (N) = N_Selected_Component\n-        and then Is_Atomic (Etype (N))\n-        and then not Atomic_Synchronization_Disabled (Etype (N))\n-      then\n-         Activate_Atomic_Synchronization (N);\n+      if Nkind (N) = N_Selected_Component then\n+         declare\n+            E   : constant Entity_Id := Entity (Selector_Name (N));\n+            Set : Boolean;\n+\n+         begin\n+            --  If component is atomic, but type is not, setting depends on\n+            --  disable/enable state for the component.\n+\n+            if Is_Atomic (E) and then not Is_Atomic (Etype (E)) then\n+               Set := not Atomic_Synchronization_Disabled (E);\n+\n+            --  If component is not atomic, but its type is atomic, setting\n+            --  depends on disable/enable state for the type.\n+\n+            elsif not Is_Atomic (E) and then Is_Atomic (Etype (E)) then\n+               Set := not Atomic_Synchronization_Disabled (Etype (E));\n+\n+            --  If both component and type are atomic, we disable if either\n+            --  component or its type have sync disabled.\n+\n+            elsif Is_Atomic (E) and then Is_Atomic (Etype (E)) then\n+               Set := (not Atomic_Synchronization_Disabled (E))\n+                        and then\n+                      (not Atomic_Synchronization_Disabled (Etype (E)));\n+\n+            else\n+               Set := False;\n+            end if;\n+\n+            --  Set flag if required\n+\n+            if Set then\n+               Activate_Atomic_Synchronization (N);\n+            end if;\n+         end;\n       end if;\n    end Expand_N_Selected_Component;\n "}, {"sha": "aa33066d9da1662464b3a75e9315ba8396f5ae97", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "patch": "@@ -168,14 +168,30 @@ package body Exp_Util is\n       Msg_Node : Node_Id;\n \n    begin\n-      --  Nothing to do if we are the prefix of an attribute, since we do not\n-      --  want an atomic sync operation for things like A'Adress or A'Size).\n \n-      if Nkind (Parent (N)) = N_Attribute_Reference\n-        and then Prefix (Parent (N)) = N\n-      then\n-         return;\n-      end if;\n+      case Nkind (Parent (N)) is\n+         when N_Attribute_Reference |\n+\n+            --  Nothing to do if we are the prefix of an attribute, since we\n+            --  do not want an atomic sync operation for things like 'Size.\n+\n+              N_Reference           |\n+\n+            --  Likewise for a mere reference\n+\n+              N_Indexed_Component   |\n+              N_Selected_Component  |\n+              N_Slice               =>\n+\n+            --  The C.6(15) clause says that only reads and updates of the\n+            --  object as a whole require atomic synchronization.\n+\n+            if Prefix (Parent (N)) = N then\n+               return;\n+            end if;\n+\n+         when others => null;\n+      end case;\n \n       --  Go ahead and set the flag\n "}, {"sha": "ed454cefcdeee46fc6687b0342393156a566721f", "filename": "gcc/ada/g-excact.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fg-excact.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fg-excact.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-excact.adb?ref=73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -97,7 +97,7 @@ package body GNAT.Exception_Actions is\n \n    function Name_To_Id (Name : String) return Exception_Id is\n    begin\n-      return To_Id (Internal_Exception (Name, False));\n+      return To_Id (Internal_Exception (Name, Create_If_Not_Exist => False));\n    end Name_To_Id;\n \n    ---------------------------------"}, {"sha": "34346e39925a3cf1fa83b8adc01daed783e3ba5b", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "patch": "@@ -5013,12 +5013,16 @@ package body Sem_Ch10 is\n \n                --  Set entity of parent identifiers if the unit is a child\n                --  unit. This ensures that the tree is properly formed from\n-               --  semantic point of view (e.g. for ASIS queries).\n+               --  semantic point of view (e.g. for ASIS queries). The unit\n+               --  entities are not fully analyzed, so we need to follow unit\n+               --  links in the tree.\n \n                Set_Entity (Nam, Ent);\n \n                Nam := Prefix (Nam);\n-               Ent := Scope (Ent);\n+               Ent :=\n+                 Defining_Entity\n+                   (Unit (Parent_Spec (Unit_Declaration_Node (Ent))));\n \n                --  Set entity of last ancestor\n "}, {"sha": "2ddf1af53bb4177ad3a70aa74bafc80917bc029f", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "patch": "@@ -2429,8 +2429,17 @@ package body Sem_Ch5 is\n             --  The type of the loop variable is the Iterator_Element aspect of\n             --  the container type.\n \n-            Set_Etype (Def_Id,\n-              Entity (Find_Aspect (Typ, Aspect_Iterator_Element)));\n+            declare\n+               Element : constant Entity_Id :=\n+                 Find_Aspect (Typ, Aspect_Iterator_Element);\n+            begin\n+               if No (Element) then\n+                  Error_Msg_NE (\"cannot iterate over&\", N, Typ);\n+                  return;\n+               else\n+                  Set_Etype (Def_Id, Entity (Element));\n+               end if;\n+            end;\n \n          else\n             --  For an iteration of the form IN, the name must denote an\n@@ -2440,12 +2449,18 @@ package body Sem_Ch5 is\n             if Is_Entity_Name (Original_Node (Name (N)))\n               and then not Is_Iterator (Typ)\n             then\n-               Error_Msg_N\n-                 (\"name must be an iterator, not a container\", Name (N));\n+               if No (Find_Aspect (Typ, Aspect_Iterator_Element)) then\n+                  Error_Msg_NE\n+                    (\"cannot iterate over&\", Name (N), Typ);\n+               else\n+\n+                  Error_Msg_N\n+                    (\"name must be an iterator, not a container\", Name (N));\n+               end if;\n \n                Error_Msg_NE\n-                 (\"\\to iterate directly over a container, write `of &`\",\n-                    Name (N), Original_Node (Name (N)));\n+                 (\"\\to iterate directly over the elements of a container, \" &\n+                   \"write `of &`\", Name (N), Original_Node (Name (N)));\n             end if;\n \n             --  The result type of Iterate function is the classwide type of"}]}