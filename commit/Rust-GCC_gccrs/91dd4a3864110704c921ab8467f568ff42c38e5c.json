{"sha": "91dd4a3864110704c921ab8467f568ff42c38e5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFkZDRhMzg2NDExMDcwNGM5MjFhYjg0NjdmNTY4ZmY0MmMzOGU1Yw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-27T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-27T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "96e295dd9effec6463e4ade07ca4eb36ff5b1257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96e295dd9effec6463e4ade07ca4eb36ff5b1257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91dd4a3864110704c921ab8467f568ff42c38e5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91dd4a3864110704c921ab8467f568ff42c38e5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91dd4a3864110704c921ab8467f568ff42c38e5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91dd4a3864110704c921ab8467f568ff42c38e5c/comments", "author": null, "committer": null, "parents": [{"sha": "e6923541fae5081b646f240d54de2a32e17a0382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6923541fae5081b646f240d54de2a32e17a0382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6923541fae5081b646f240d54de2a32e17a0382"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "c471c25e9dcb3ca54e7eb054cd3c733d686b70f4", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dd4a3864110704c921ab8467f568ff42c38e5c/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dd4a3864110704c921ab8467f568ff42c38e5c/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=91dd4a3864110704c921ab8467f568ff42c38e5c", "patch": "@@ -1,3 +1,10 @@\n+2020-09-26  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/97044\n+\t* inclhack.def (aix_inttypes): New fix.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/sys/inttypes.h: New file.\n+\n 2020-09-17  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* inclhack.def (aix_externcpp1): Add more context to select."}, {"sha": "a81090e32915db5f8abcefc7dd8042965e623ffa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dd4a3864110704c921ab8467f568ff42c38e5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dd4a3864110704c921ab8467f568ff42c38e5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91dd4a3864110704c921ab8467f568ff42c38e5c", "patch": "@@ -1,3 +1,65 @@\n+2020-09-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (analyze_stmt): Do not skip clobbers in early pass.\n+\t* ipa-pure-const.c (analyze_stmt): Update comment.\n+\n+2020-09-26  David Edelsohn  <dje.gcc@gmail.com>\n+\t    Clement Chigot  <clement.chigot@atos.com>\n+\n+\t* collect2.c (visibility_flag): New.\n+\t(main): Detect -fvisibility.\n+\t(write_c_file_stat): Push and pop default visibility.\n+\n+2020-09-26  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline-transform.c: Include ipa-modref-tree.h and ipa-modref.h.\n+\t(inline_call): Call ipa_merge_modref_summary_after_inlining.\n+\t* ipa-inline.c (ipa_inline): Do not free summaries.\n+\t* ipa-modref.c (dump_records): Fix formating.\n+\t(merge_call_side_effects): Break out from ...\n+\t(analyze_call): ... here; record recursive calls.\n+\t(analyze_stmt): Add new parameter RECURSIVE_CALLS.\n+\t(analyze_function): Do iterative dataflow on recursive calls.\n+\t(compute_parm_map): New function.\n+\t(ipa_merge_modref_summary_after_inlining): New function.\n+\t(collapse_loads): New function.\n+\t(modref_propagate_in_scc): Break out from ...\n+\t(pass_ipa_modref::execute): ... here; Do iterative dataflow.\n+\t* ipa-modref.h (ipa_merge_modref_summary_after_inlining): Declare.\n+\n+2020-09-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-expand.c (expand_omp_simd): Help vectorizer for the collapse == 1\n+\tand non-composite collapse > 1 case with non-constant innermost loop\n+\tstep by precomputing number of iterations before loop and using an\n+\talternate IV from 0 to number of iterations - 1 with step of 1.\n+\n+2020-09-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-fnsummary.c (dump_ipa_call_summary): Dump\n+\tpoints_to_local_or_readonly_memory flag.\n+\t(analyze_function_body): Compute points_to_local_or_readonly_memory\n+\tflag.\n+\t(remap_edge_change_prob): Rename to ...\n+\t(remap_edge_params): ... this one; update\n+\tpoints_to_local_or_readonly_memory.\n+\t(remap_edge_summaries): Update.\n+\t(read_ipa_call_summary): Stream the new flag.\n+\t(write_ipa_call_summary): Likewise.\n+\t* ipa-predicate.h (struct inline_param_summary): Add\n+\tpoints_to_local_or_readonly_memory.\n+\t(inline_param_summary::equal_to): Update.\n+\t(inline_param_summary::useless_p): Update.\n+\n+2020-09-26  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref-tree.h (modref_ref_node::insert_access): Track if something\n+\tchanged.\n+\t(modref_base_node::insert_ref): Likewise (and add a new optional\n+\targument)\n+\t(modref_tree::insert): Likewise.\n+\t(modref_tree::merge): Rewrite\n+\n 2020-09-25  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* doc/invoke.texi: Add -fno-ipa-modref to flags disabled by"}, {"sha": "51daa72546b6ef6123f8736a21fc05c8e7078e75", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dd4a3864110704c921ab8467f568ff42c38e5c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dd4a3864110704c921ab8467f568ff42c38e5c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=91dd4a3864110704c921ab8467f568ff42c38e5c", "patch": "@@ -1 +1 @@\n-20200926\n+20200927"}, {"sha": "0d04604718214c9543a973d5c8adbff912449451", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dd4a3864110704c921ab8467f568ff42c38e5c/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dd4a3864110704c921ab8467f568ff42c38e5c/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=91dd4a3864110704c921ab8467f568ff42c38e5c", "patch": "@@ -1,3 +1,13 @@\n+2020-09-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96646\n+\tPR analyzer/96841\n+\t* region-model.cc (region_model::get_representative_path_var):\n+\tWhen handling offset_region, wrap the MEM_REF's first argument in\n+\tan ADDR_EXPR of pointer type, rather than simply using the tree\n+\tfor the parent region.  Require the MEM_REF's second argument to\n+\tbe an integer constant.\n+\n 2020-09-24  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.h (struct rejected_constraint): New decl."}, {"sha": "1e676963bc4173f1a25525b3da824e15492a07d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dd4a3864110704c921ab8467f568ff42c38e5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dd4a3864110704c921ab8467f568ff42c38e5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91dd4a3864110704c921ab8467f568ff42c38e5c", "patch": "@@ -1,3 +1,38 @@\n+2020-09-26  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/96495\n+\t* gfortran.dg/alloc_comp_result_2.f90 : Restore original.\n+\t* gfortran.dg/alloc_comp_result_3.f90 : New test.\n+\n+2020-09-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/lto/modref-1_0.c: New test.\n+\t* gcc.dg/lto/modref-1_1.c: New test.\n+\t* gcc.dg/tree-ssa/modref-2.c: New test.\n+\n+2020-09-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/vect/vect-simd-17.c: Expect 11 or more vectorized loops.\n+\t* gcc.dg/vect/vect-simd-18.c: New test.\n+\t* gcc.dg/vect/vect-simd-19.c: New test.\n+\t* gcc.dg/vect/vect-simd-20.c: New test.\n+\n+2020-09-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/ipa/ipa-pta-13.c: Disable modref.\n+\n+2020-09-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94355\n+\t* g++.dg/analyzer/placement-new.C: New test.\n+\n+2020-09-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96646\n+\tPR analyzer/96841\n+\t* gcc.dg/analyzer/pr96646.c: New test.\n+\t* gcc.dg/analyzer/pr96841.c: New test.\n+\n 2020-09-25  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/96814"}, {"sha": "b6b6b18a3b9ce1267c619e8d409b138bdbc6d75b", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dd4a3864110704c921ab8467f568ff42c38e5c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dd4a3864110704c921ab8467f568ff42c38e5c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=91dd4a3864110704c921ab8467f568ff42c38e5c", "patch": "@@ -1,3 +1,9 @@\n+2020-09-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/97163\n+\t* lex.c (search_line_fast): Only use _ARCH_PWR8 Altivec version\n+\tfor GCC >= 4.5.\n+\n 2020-09-17  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c/80076"}, {"sha": "edfe0e00adf006a5dee54f07aa48833ebeb3df09", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dd4a3864110704c921ab8467f568ff42c38e5c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dd4a3864110704c921ab8467f568ff42c38e5c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=91dd4a3864110704c921ab8467f568ff42c38e5c", "patch": "@@ -1,3 +1,13 @@\n+2020-09-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96817\n+\t* include/ext/atomicity.h (__gnu_cxx::__is_single_threaded()):\n+\tNew function wrapping __libc_single_threaded if available.\n+\t(__exchange_and_add_dispatch, __atomic_add_dispatch): Use it.\n+\t* libsupc++/guard.cc (__cxa_guard_acquire, __cxa_guard_abort)\n+\t(__cxa_guard_release): Likewise.\n+\t* testsuite/18_support/96817.cc: New test.\n+\n 2020-09-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* libsupc++/Makefile.am: Remove redundant -std=gnu++1z flags."}]}