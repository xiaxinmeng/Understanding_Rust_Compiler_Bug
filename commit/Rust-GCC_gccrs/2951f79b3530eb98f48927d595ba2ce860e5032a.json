{"sha": "2951f79b3530eb98f48927d595ba2ce860e5032a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk1MWY3OWIzNTMwZWI5OGY0ODkyN2Q1OTViYTJjZTg2MGU1MDMyYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-09-14T09:56:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-09-14T09:56:59Z"}, "message": "re PR target/32337 (Error: Register number out of range 0..1)\n\n\tPR target/32337\n\t* config/ia64/ia64.c (find_gr_spill): Don't decrement\n\tcurrent_frame_info.n_local_regs.  Don't return emitted local\n\tregs.\n\t(ia64_compute_frame_size): Improve unwind hack to put\n\tRP, PFS, FP in that order by allowing some of the registers\n\tbeen already emitted, as long as they are emitted to the\n\tdesired register.\n\nFrom-SVN: r128490", "tree": {"sha": "815fee21350f1860e46341d2b1be29a0d0831c68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/815fee21350f1860e46341d2b1be29a0d0831c68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2951f79b3530eb98f48927d595ba2ce860e5032a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2951f79b3530eb98f48927d595ba2ce860e5032a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2951f79b3530eb98f48927d595ba2ce860e5032a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2951f79b3530eb98f48927d595ba2ce860e5032a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6adf1bd514c75ed0e7610dfa1ac6bf9c3304e286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6adf1bd514c75ed0e7610dfa1ac6bf9c3304e286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6adf1bd514c75ed0e7610dfa1ac6bf9c3304e286"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "bf1a16988fd94f95d6d226f4b295d96fc4560326", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2951f79b3530eb98f48927d595ba2ce860e5032a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2951f79b3530eb98f48927d595ba2ce860e5032a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2951f79b3530eb98f48927d595ba2ce860e5032a", "patch": "@@ -1,3 +1,14 @@\n+2007-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/32337\n+\t* config/ia64/ia64.c (find_gr_spill): Don't decrement\n+\tcurrent_frame_info.n_local_regs.  Don't return emitted local\n+\tregs.\n+\t(ia64_compute_frame_size): Improve unwind hack to put\n+\tRP, PFS, FP in that order by allowing some of the registers\n+\tbeen already emitted, as long as they are emitted to the\n+\tdesired register.\n+\n 2007-09-14  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/vmx2spu.h (vec_extract, vec_insert, vec_lvlx,"}, {"sha": "d4ad0f4dfe1a331bfe74176a201067d54f9540ac", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2951f79b3530eb98f48927d595ba2ce860e5032a/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2951f79b3530eb98f48927d595ba2ce860e5032a/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=2951f79b3530eb98f48927d595ba2ce860e5032a", "patch": "@@ -2207,7 +2207,8 @@ find_gr_spill (enum ia64_frame_regs r, int try_locals)\n   if (emitted_frame_related_regs[r] != 0)\n     {\n       regno = emitted_frame_related_regs[r];\n-      if (regno >= LOC_REG (0) && regno < LOC_REG (80 - frame_pointer_needed))\n+      if (regno >= LOC_REG (0) && regno < LOC_REG (80 - frame_pointer_needed)\n+\t  && current_frame_info.n_local_regs < regno - LOC_REG (0) + 1)\n         current_frame_info.n_local_regs = regno - LOC_REG (0) + 1;\n       else if (current_function_is_leaf \n                && regno >= GR_REG (1) && regno <= GR_REG (31))\n@@ -2239,11 +2240,12 @@ find_gr_spill (enum ia64_frame_regs r, int try_locals)\n       /* If there is a frame pointer, then we can't use loc79, because\n \t that is HARD_FRAME_POINTER_REGNUM.  In particular, see the\n \t reg_name switching code in ia64_expand_prologue.  */\n-      if (regno < (80 - frame_pointer_needed))\n-\t{\n-\t  current_frame_info.n_local_regs = regno + 1;\n-\t  return LOC_REG (0) + regno;\n-\t}\n+      while (regno < (80 - frame_pointer_needed))\n+\tif (! is_emitted (LOC_REG (regno++)))\n+\t  {\n+\t    current_frame_info.n_local_regs = regno;\n+\t    return LOC_REG (regno - 1);\n+\t  }\n     }\n \n   /* Failed to find a general register to spill to.  Must use stack.  */\n@@ -2315,6 +2317,8 @@ ia64_compute_frame_size (HOST_WIDE_INT size)\n   int spilled_gr_p = 0;\n   int spilled_fr_p = 0;\n   unsigned int regno;\n+  int min_regno;\n+  int max_regno;\n   int i;\n \n   if (current_frame_info.initialized)\n@@ -2490,16 +2494,27 @@ ia64_compute_frame_size (HOST_WIDE_INT size)\n      \n      If we have already emitted code for any of those registers,\n      then it's already too late to change.  */\n-  if (current_frame_info.r[reg_fp] != 0\n-      && current_frame_info.r[reg_save_b0] == current_frame_info.r[reg_fp] + 1\n-      && current_frame_info.r[reg_save_ar_pfs] == current_frame_info.r[reg_fp] + 2\n-      && emitted_frame_related_regs[reg_save_b0] == 0\n-      && emitted_frame_related_regs[reg_save_ar_pfs] == 0\n-      && emitted_frame_related_regs[reg_fp] == 0)\n-    {\n-      current_frame_info.r[reg_save_b0] = current_frame_info.r[reg_fp];\n-      current_frame_info.r[reg_save_ar_pfs] = current_frame_info.r[reg_fp] + 1;\n-      current_frame_info.r[reg_fp] = current_frame_info.r[reg_fp] + 2;\n+  min_regno = MIN (current_frame_info.r[reg_fp],\n+\t\t   MIN (current_frame_info.r[reg_save_b0],\n+\t\t\tcurrent_frame_info.r[reg_save_ar_pfs]));\n+  max_regno = MAX (current_frame_info.r[reg_fp],\n+\t\t   MAX (current_frame_info.r[reg_save_b0],\n+\t\t\tcurrent_frame_info.r[reg_save_ar_pfs]));\n+  if (min_regno > 0\n+      && min_regno + 2 == max_regno\n+      && (current_frame_info.r[reg_fp] == min_regno + 1\n+\t  || current_frame_info.r[reg_save_b0] == min_regno + 1\n+\t  || current_frame_info.r[reg_save_ar_pfs] == min_regno + 1)\n+      && (emitted_frame_related_regs[reg_save_b0] == 0\n+\t  || emitted_frame_related_regs[reg_save_b0] == min_regno)\n+      && (emitted_frame_related_regs[reg_save_ar_pfs] == 0\n+\t  || emitted_frame_related_regs[reg_save_ar_pfs] == min_regno + 1)\n+      && (emitted_frame_related_regs[reg_fp] == 0\n+\t  || emitted_frame_related_regs[reg_fp] == min_regno + 2))\n+    {\n+      current_frame_info.r[reg_save_b0] = min_regno;\n+      current_frame_info.r[reg_save_ar_pfs] = min_regno + 1;\n+      current_frame_info.r[reg_fp] = min_regno + 2;\n     }\n \n   /* See if we need to store the predicate register block.  */"}]}