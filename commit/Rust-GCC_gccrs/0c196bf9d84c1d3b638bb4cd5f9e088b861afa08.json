{"sha": "0c196bf9d84c1d3b638bb4cd5f9e088b861afa08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMxOTZiZjlkODRjMWQzYjYzOGJiNGNkNWY5ZTA4OGI4NjFhZmEwOA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-05-10T22:28:50Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-05-10T22:28:50Z"}, "message": "gcse.c (eliminate_partially_redundant_loads): Instead of returning early, goto a cleanup label.\n\n2004-05-10  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * gcse.c (eliminate_partially_redundant_loads): Instead of returning early,\n        goto a cleanup label.  After the cleanup, free the allocated memory.\n\nFrom-SVN: r81682", "tree": {"sha": "7a09be609b6e643706d2fb5ae859c16713ba8528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a09be609b6e643706d2fb5ae859c16713ba8528"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c196bf9d84c1d3b638bb4cd5f9e088b861afa08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c196bf9d84c1d3b638bb4cd5f9e088b861afa08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c196bf9d84c1d3b638bb4cd5f9e088b861afa08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c196bf9d84c1d3b638bb4cd5f9e088b861afa08/comments", "author": null, "committer": null, "parents": [{"sha": "16cfa3dc57a18490554abf3d1c02fa5e26c4c669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16cfa3dc57a18490554abf3d1c02fa5e26c4c669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16cfa3dc57a18490554abf3d1c02fa5e26c4c669"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "63345cb8babe59bf94ec669e7a35d4787a764fab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c196bf9d84c1d3b638bb4cd5f9e088b861afa08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c196bf9d84c1d3b638bb4cd5f9e088b861afa08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c196bf9d84c1d3b638bb4cd5f9e088b861afa08", "patch": "@@ -1,3 +1,8 @@\n+2004-05-10  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* gcse.c (eliminate_partially_redundant_loads): Instead of returning early,\n+\tgoto a cleanup label.  After the cleanup, free the allocated memory.\n+\n 2004-05-10  Ziemowit Laski  <zlaski@apple.com>\n \n \t* config/rs6000/altivec.h (vec_sld): Add overloads for"}, {"sha": "19710d200fec81ded845e2648fc52df2b5c161c0", "filename": "gcc/gcse.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c196bf9d84c1d3b638bb4cd5f9e088b861afa08/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c196bf9d84c1d3b638bb4cd5f9e088b861afa08/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=0c196bf9d84c1d3b638bb4cd5f9e088b861afa08", "patch": "@@ -8401,14 +8401,14 @@ eliminate_partially_redundant_loads (basic_block bb, rtx insn,\n \n   if (npred_ok == 0    /* No load can be replaced by copy.  */\n       || (optimize_size && npred_ok > 1)) /* Prevent exploding the code.  */\n-    return;\n+    goto cleanup;\n \n   /* Check if it's worth applying the partial redundancy elimination.  */\n   if (ok_count < GCSE_AFTER_RELOAD_PARTIAL_FRACTION * not_ok_count)\n-    return;\n+    goto cleanup;\n \n   if (ok_count < GCSE_AFTER_RELOAD_CRITICAL_FRACTION * critical_count)\n-    return;\n+    goto cleanup;\n \n   /* Generate moves to the loaded register from where\n      the memory is available.  */\n@@ -8461,6 +8461,22 @@ eliminate_partially_redundant_loads (basic_block bb, rtx insn,\n     delete_insn (insn);\n   else\n     a_occr->deleted_p = 1;\n+  \n+cleanup:\n+\n+  while (unavail_occrs)\n+    {\n+      struct unoccr *temp = unavail_occrs->next;\n+      free (unavail_occrs);\n+      unavail_occrs = temp;\n+    }\n+\n+  while (avail_occrs)\n+    {\n+      struct unoccr *temp = avail_occrs->next;\n+      free (avail_occrs);\n+      avail_occrs = temp;\n+    }\n }\n \n /* Performing the redundancy elimination as described before.  */"}]}