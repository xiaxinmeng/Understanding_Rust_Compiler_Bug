{"sha": "db1d09b049a9388c481ff76aa00fe74734cce1c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIxZDA5YjA0OWE5Mzg4YzQ4MWZmNzZhYTAwZmU3NDczNGNjZTFjOA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-11-23T18:23:31Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-11-23T18:23:31Z"}, "message": "PR testsuite/88098 - FAIL: gcc.dg/Wbuiltin-declaration-mismatch-4.c\n\ngcc/c/ChangeLog:\n\n\tPR testsuite/88098\n\t* c-typeck.c (convert_arguments): Call builtin_decl_explicit instead.\n\t(maybe_warn_builtin_no_proto_arg): Handle short enum to int promotion.\n\ngcc/testsuite/ChangeLog:\n\n\tPR testsuite/88098\n\t* gcc.dg/Wbuiltin-declaration-mismatch-4.c: Adjust.\n\t* gcc.dg/Wbuiltin-declaration-mismatch-5.c: New test.\n\t* gcc.dg/torture/pr67222.c: Adjust.\n\nFrom-SVN: r266417", "tree": {"sha": "42a7fa6c53e216da806d8aa51b9e929cf5056d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42a7fa6c53e216da806d8aa51b9e929cf5056d2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db1d09b049a9388c481ff76aa00fe74734cce1c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1d09b049a9388c481ff76aa00fe74734cce1c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db1d09b049a9388c481ff76aa00fe74734cce1c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1d09b049a9388c481ff76aa00fe74734cce1c8/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e987fb1ebecc7494f9869071e487deef70a792f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e987fb1ebecc7494f9869071e487deef70a792f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e987fb1ebecc7494f9869071e487deef70a792f6"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "bcb282c084eca4e17781ca9906e1c5769cd2751b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=db1d09b049a9388c481ff76aa00fe74734cce1c8", "patch": "@@ -1,3 +1,9 @@\n+2018-11-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/88098\n+\t* c-typeck.c (convert_arguments): Call builtin_decl_explicit instead.\n+\t(maybe_warn_builtin_no_proto_arg): Handle short enum to int promotion.\n+\n 2018-11-20  Martin Sebor  <msebor@redhat.com>\n \n \t* c-parser.c (c_parser_has_attribute_expression): New function."}, {"sha": "81c520ade3942b1897241bb051884c82fa4f0012", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=db1d09b049a9388c481ff76aa00fe74734cce1c8", "patch": "@@ -3422,7 +3422,10 @@ convert_arguments (location_t loc, vec<location_t> arg_loc, tree typelist,\n       built_in_function code = DECL_FUNCTION_CODE (fundecl);\n       if (C_DECL_BUILTIN_PROTOTYPE (fundecl))\n \t{\n-\t  if (tree bdecl = builtin_decl_implicit (code))\n+\t  /* For a call to a built-in function declared without a prototype\n+\t     use the types of the parameters of the internal built-in to\n+\t     match those of the arguments to.  */\n+\t  if (tree bdecl = builtin_decl_explicit (code))\n \t    builtin_typelist = TYPE_ARG_TYPES (TREE_TYPE (bdecl));\n \t}\n \n@@ -6461,7 +6464,9 @@ maybe_warn_builtin_no_proto_arg (location_t loc, tree fundecl, int parmnum,\n       && TYPE_MODE (parmtype) == TYPE_MODE (argtype))\n     return;\n \n-  if (parmcode == argcode\n+  if ((parmcode == argcode\n+       || (parmcode == INTEGER_TYPE\n+\t   && argcode == ENUMERAL_TYPE))\n       && TYPE_MAIN_VARIANT (parmtype) == TYPE_MAIN_VARIANT (promoted))\n     return;\n "}, {"sha": "0338c9aeedc24fe9b4dcab0dee9122eb54f09d3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db1d09b049a9388c481ff76aa00fe74734cce1c8", "patch": "@@ -1,3 +1,10 @@\n+2018-11-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/88098\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-4.c: Adjust.\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-5.c: New test.\n+\t* gcc.dg/torture/pr67222.c: Adjust.\n+\n 2018-11-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88149"}, {"sha": "856166c667341d46c10aad8fbcbc7b3efe3cfda7", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-4.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-4.c?ref=db1d09b049a9388c481ff76aa00fe74734cce1c8", "patch": "@@ -77,9 +77,9 @@ void test_integer_conversion_memset (void *d)\n   /* Passing a ptrdiff_t where size_t is expected may not be unsafe\n      but because GCC may emits suboptimal code for such calls warning\n      for them helps improve efficiency.  */\n-  memset (d, 0, diffi);       /* { dg-warning \".memset. argument 3 promotes to .ptrdiff_t. {aka .long int.} where .long unsigned int. is expected\" } */\n+  memset (d, 0, diffi);       /* { dg-warning \".memset. argument 3 promotes to .ptrdiff_t. {aka .\\(long \\)?int.} where .\\(long \\)?unsigned int. is expected\" } */\n \n-  memset (d, 0, 2.0);         /* { dg-warning \".memset. argument 3 type is .double. where 'long unsigned int' is expected\" } */\n+  memset (d, 0, 2.0);         /* { dg-warning \".memset. argument 3 type is .double. where '\\(long \\)?unsigned int' is expected\" } */\n \n   /* Verify that the same call as above but to the built-in doesn't\n      trigger a warning.  */\n@@ -108,7 +108,8 @@ void test_real_conversion_fabs (void)\n   /* In C, the type of an enumeration constant is int.  */\n   d = fabs (e0);    /* { dg-warning \".fabs. argument 1 type is .int. where .double. is expected in a call to built-in function declared without prototype\" } */\n \n-  d = fabs (e);     /* { dg-warning \".fabs. argument 1 type is .enum E. where .double. is expected in a call to built-in function declared without prototype\" } */\n+  d = fabs (e);     /* { dg-warning \".fabs. argument 1 type is .enum E. where .double. is expected in a call to built-in function declared without prototype\" \"ordinary enum\" { target { ! short_enums } } } */\n+  /* { dg-warning \".fabs. argument 1 promotes to .int. where .double. is expected in a call to built-in function declared without prototype\" \"size 1 enum\" { target short_enums } .-1 } */\n \n   /* No warning here since float is promoted to double.  */\n   d = fabs (f);"}, {"sha": "9cac92777503e07c34bf89e4f41ef9a29a8303db", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-5.c?ref=db1d09b049a9388c481ff76aa00fe74734cce1c8", "patch": "@@ -0,0 +1,19 @@\n+/* PR testsuite/88098 - FAIL: gcc.dg/Wbuiltin-declaration-mismatch-4.c\n+   { dg-do compile }\n+   { dg-options \"-Wbuiltin-declaration-mismatch -fshort-enums\" } */\n+\n+int abs ();\n+double fabs ();     /* { dg-message \"built-in .fabs. declared here\" } */\n+\n+enum E { e0 } e;\n+\n+int i;\n+double d;\n+\n+void test_short_enums (void)\n+{\n+  /* enum e promotes to int.  */\n+  i = abs (e);\n+\n+  d = fabs (e);     /* { dg-warning \".fabs. argument 1 promotes to .int. where .double. is expected in a call to built-in function declared without prototype\" } */\n+}"}, {"sha": "1beba6dd22cb27c8a77cc3ca5c50507b9602abef", "filename": "gcc/testsuite/gcc.dg/torture/pr67222.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67222.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1d09b049a9388c481ff76aa00fe74734cce1c8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67222.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67222.c?ref=db1d09b049a9388c481ff76aa00fe74734cce1c8", "patch": "@@ -1,4 +1,4 @@\n-/* PR middle-end/67222 */\n+/* PR middle-end/67222 - ICE in gimple_call_arg with bogus posix_memalign */\n /* { dg-do compile } */\n \n void\n@@ -17,3 +17,9 @@ foo (void **p)\n   posix_memalign (p, \"qui\", 3);\n   posix_memalign (p, 1, 2);\n }\n+\n+/* Prune warnings:\n+  { dg-prune-output \"call to built-in function declared without prototype\" }\n+  { dg-prune-output \"too few arguments to built-in function\" }\n+  { dg-prune-output \"incompatible pointer type\" }\n+  { dg-prune-output \"\\\\\\[-Wint-conversion]\" }  */"}]}