{"sha": "bddd8d86e3036e480158ba9219ee3f290ba652ce", "node_id": "C_kwDOANBUbNoAKGJkZGQ4ZDg2ZTMwMzZlNDgwMTU4YmE5MjE5ZWUzZjI5MGJhNjUyY2U", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-08-09T23:58:54Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-08-09T23:58:54Z"}, "message": "analyzer: fix missing -Wanalyzer-use-of-uninitialized-value on special-cased functions [PR106573]\n\nWe were missing checks for uninitialized params on calls to functions\nthat the analyzer has hardcoded knowledge of - both for those that are\nhandled just by state machines, and for those that are handled in\nregion-model-impl-calls.cc (for those arguments for which the svalue\nwasn't accessed in handling the call).\n\nFixed thusly.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106573\n\t* region-model.cc (region_model::on_call_pre): Ensure that we call\n\tget_arg_svalue on all arguments.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106573\n\t* gcc.dg/analyzer/error-uninit.c: New test.\n\t* gcc.dg/analyzer/fd-uninit-1.c: New test.\n\t* gcc.dg/analyzer/file-uninit-1.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "bf8679b09610d267849816bbd0ee8cf3ad4d9a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf8679b09610d267849816bbd0ee8cf3ad4d9a90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bddd8d86e3036e480158ba9219ee3f290ba652ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bddd8d86e3036e480158ba9219ee3f290ba652ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bddd8d86e3036e480158ba9219ee3f290ba652ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bddd8d86e3036e480158ba9219ee3f290ba652ce/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a56c1641e9d25e46059168e811b4a2f185f07b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56c1641e9d25e46059168e811b4a2f185f07b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56c1641e9d25e46059168e811b4a2f185f07b6b"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "8393c7ddbf7fdabfa743cdf4b0ef36289e367bff", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bddd8d86e3036e480158ba9219ee3f290ba652ce/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bddd8d86e3036e480158ba9219ee3f290ba652ce/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=bddd8d86e3036e480158ba9219ee3f290ba652ce", "patch": "@@ -1355,6 +1355,14 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n       && gimple_call_internal_fn (call) == IFN_DEFERRED_INIT)\n     return false;\n \n+  /* Get svalues for all of the arguments at the callsite, to ensure that we\n+     complain about any uninitialized arguments.  This might lead to\n+     duplicates if any of the handling below also looks up the svalues,\n+     but the deduplication code should deal with that.  */\n+  if (ctxt)\n+    for (unsigned arg_idx = 0; arg_idx < cd.num_args (); arg_idx++)\n+      cd.get_arg_svalue (arg_idx);\n+\n   /* Some of the cases below update the lhs of the call based on the\n      return value, but not all.  Provide a default value, which may\n      get overwritten below.  */"}, {"sha": "8d52a177b113ad5aec7568db8a96604bfce68dc4", "filename": "gcc/testsuite/gcc.dg/analyzer/error-uninit.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bddd8d86e3036e480158ba9219ee3f290ba652ce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bddd8d86e3036e480158ba9219ee3f290ba652ce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ferror-uninit.c?ref=bddd8d86e3036e480158ba9219ee3f290ba652ce", "patch": "@@ -0,0 +1,29 @@\n+/* Verify that we check for uninitialized values passed to functions\n+   that we have special-cased region-model handling for.  */\n+\n+extern void error (int __status, int __errnum, const char *__format, ...)\n+     __attribute__ ((__format__ (__printf__, 3, 4)));\n+\n+void test_uninit_status (int arg)\n+{\n+  int st;\n+  error (st, 42, \"test: %s\", arg); /* { dg-warning \"use of uninitialized value 'st'\" } */\n+}\n+\n+void test_uninit_errnum (int st)\n+{\n+  int num;\n+  error (st, num, \"test\"); /* { dg-warning \"use of uninitialized value 'num'\" } */\n+}\n+\n+void test_uninit_fmt (int st)\n+{\n+  const char *fmt;\n+  error (st, 42, fmt); /* { dg-warning \"use of uninitialized value 'fmt'\" } */\n+}\n+\n+void test_uninit_vargs (int st)\n+{\n+  int arg;\n+  error (st, 42, \"test: %s\", arg); /* { dg-warning \"use of uninitialized value 'arg'\" } */\n+}"}, {"sha": "b5b189ece988dacac9447e0a5c0484c25a1fc22d", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-uninit-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bddd8d86e3036e480158ba9219ee3f290ba652ce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-uninit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bddd8d86e3036e480158ba9219ee3f290ba652ce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-uninit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-uninit-1.c?ref=bddd8d86e3036e480158ba9219ee3f290ba652ce", "patch": "@@ -0,0 +1,21 @@\n+/* Verify that we check for uninitialized values passed to functions\n+   that we have special-cased state-machine handling for.  */\n+\n+int dup (int old_fd);\n+int not_dup (int old_fd);\n+\n+int\n+test_1 ()\n+{\n+  int m;\n+  return dup (m); /* { dg-warning \"use of uninitialized value 'm'\" \"uninit\" } */\n+  /* { dg-bogus \"'dup' on possibly invalid file descriptor 'm'\" \"invalid fd false +ve\" { xfail *-*-* } .-1 } */\n+  /* XFAIL: probably covered by fix for PR analyzer/106551.  */\n+}\n+\n+int\n+test_2 ()\n+{\n+  int m;\n+  return not_dup (m); /* { dg-warning \"use of uninitialized value 'm'\" } */\n+}"}, {"sha": "0f8ac5442b16a33bed425650a8953e10bbd11a8a", "filename": "gcc/testsuite/gcc.dg/analyzer/file-uninit-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bddd8d86e3036e480158ba9219ee3f290ba652ce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-uninit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bddd8d86e3036e480158ba9219ee3f290ba652ce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-uninit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-uninit-1.c?ref=bddd8d86e3036e480158ba9219ee3f290ba652ce", "patch": "@@ -0,0 +1,52 @@\n+/* Verify that we check for uninitialized values passed to functions\n+   that we have special-cased state-machine handling for.  */\n+\n+typedef struct FILE   FILE;\n+\n+FILE* fopen (const char*, const char*);\n+int   fclose (FILE*);\n+int fseek (FILE *, long, int);\n+\n+FILE *\n+test_fopen_uninit_path (void)\n+{\n+  const char *path;\n+  FILE *f = fopen (path, \"r\"); /* { dg-warning \"use of uninitialized value 'path'\" } */\n+  return f;\n+}\n+\n+FILE *\n+test_fopen_uninit_mode (const char *path)\n+{\n+  const char *mode;\n+  FILE *f = fopen (path, mode); /* { dg-warning \"use of uninitialized value 'mode'\" } */\n+  return f;\n+}\n+\n+void\n+test_fclose_uninit (void)\n+{\n+  FILE *f;\n+  fclose (f); /* { dg-warning \"use of uninitialized value 'f'\" } */\n+}\n+\n+int\n+test_fseek_uninit_stream (void)\n+{\n+  FILE *stream;\n+  return fseek (stream, 0, 0); /* { dg-warning \"use of uninitialized value 'stream'\" } */\n+}\n+\n+int\n+test_fseek_uninit_offset (FILE *stream, int whence)\n+{\n+  long offset;\n+  return fseek (stream, offset, whence); /* { dg-warning \"use of uninitialized value 'offset'\" } */\n+}\n+\n+int\n+test_fseek_uninit_whence (FILE *stream, long offset)\n+{\n+  int whence;\n+  return fseek (stream, offset, whence); /* { dg-warning \"use of uninitialized value 'whence'\" } */\n+}"}]}