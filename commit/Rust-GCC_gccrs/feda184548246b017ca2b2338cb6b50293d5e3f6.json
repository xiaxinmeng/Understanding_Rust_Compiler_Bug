{"sha": "feda184548246b017ca2b2338cb6b50293d5e3f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkYTE4NDU0ODI0NmIwMTdjYTJiMjMzOGNiNmI1MDI5M2Q1ZTNmNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-10-11T03:53:05Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-10-11T03:53:05Z"}, "message": "builtins.c (builtin_mathfn_code): Generalize to check whether the call is to any built-in function by comparing...\n\n\n\t* builtins.c (builtin_mathfn_code): Generalize to check whether\n\tthe call is to any built-in function by comparing the call's\n\targument list against the builtin decl's function type.\n\nFrom-SVN: r72327", "tree": {"sha": "ac9e9e0dafcea89fd08cf274b9e7aabba1833ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac9e9e0dafcea89fd08cf274b9e7aabba1833ce0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feda184548246b017ca2b2338cb6b50293d5e3f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feda184548246b017ca2b2338cb6b50293d5e3f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feda184548246b017ca2b2338cb6b50293d5e3f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feda184548246b017ca2b2338cb6b50293d5e3f6/comments", "author": null, "committer": null, "parents": [{"sha": "dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "5daf7a07dc75b9b8739a1100a9aff21e4eb31d93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feda184548246b017ca2b2338cb6b50293d5e3f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feda184548246b017ca2b2338cb6b50293d5e3f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=feda184548246b017ca2b2338cb6b50293d5e3f6", "patch": "@@ -1,3 +1,9 @@\n+2003-10-10  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (builtin_mathfn_code): Generalize to check whether\n+\tthe call is to any built-in function by comparing the call's\n+\targument list against the builtin decl's function type.\n+\n 2003-10-10  Roger Sayle  <roger@eyesopen.com>\n \n \t* cse.c (constant_pool_entries_regcost): New global variable to"}, {"sha": "dc2008809a7c0032b827e166993964329d50c1ab", "filename": "gcc/builtins.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feda184548246b017ca2b2338cb6b50293d5e3f6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feda184548246b017ca2b2338cb6b50293d5e3f6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=feda184548246b017ca2b2338cb6b50293d5e3f6", "patch": "@@ -5318,52 +5318,74 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n }\n \n /* Determine whether a tree node represents a call to a built-in\n-   math function.  If the tree T is a call to a built-in function\n-   taking a single real argument, then the return value is the\n-   DECL_FUNCTION_CODE of the call, e.g. BUILT_IN_SQRT.  Otherwise\n-   the return value is END_BUILTINS.  */\n+   function.  If the tree T is a call to a built-in function with\n+   the right number of arguments of the appropriate types, return\n+   the DECL_FUNCTION_CODE of the call, e.g. BUILT_IN_SQRT.\n+   Otherwise the return value is END_BUILTINS.  */\n \n enum built_in_function\n builtin_mathfn_code (tree t)\n {\n-  tree fndecl, arglist;\n+  tree fndecl, arglist, parmlist;\n+  tree argtype, parmtype;\n \n   if (TREE_CODE (t) != CALL_EXPR\n       || TREE_CODE (TREE_OPERAND (t, 0)) != ADDR_EXPR)\n     return END_BUILTINS;\n \n   fndecl = get_callee_fndecl (t);\n   if (fndecl == NULL_TREE\n+      || TREE_CODE (fndecl) != FUNCTION_DECL\n       || ! DECL_BUILT_IN (fndecl)\n       || DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n     return END_BUILTINS;\n \n   arglist = TREE_OPERAND (t, 1);\n-  if (! arglist\n-      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != REAL_TYPE)\n-    return END_BUILTINS;\n-\n-  arglist = TREE_CHAIN (arglist);\n-  switch (DECL_FUNCTION_CODE (fndecl))\n+  parmlist = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n+  for (; parmlist; parmlist = TREE_CHAIN (parmlist))\n     {\n-    case BUILT_IN_POW:\n-    case BUILT_IN_POWF:\n-    case BUILT_IN_POWL:\n-    case BUILT_IN_ATAN2:\n-    case BUILT_IN_ATAN2F:\n-    case BUILT_IN_ATAN2L:\n-      if (! arglist\n-\t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != REAL_TYPE\n-\t  || TREE_CHAIN (arglist))\n+      /* If a function doesn't take a variable number of arguments,\n+\t the last element in the list will have type `void'.  */\n+      parmtype = TREE_VALUE (parmlist);\n+      if (VOID_TYPE_P (parmtype))\n+\t{\n+\t  if (arglist)\n+\t    return END_BUILTINS;\n+\t  return DECL_FUNCTION_CODE (fndecl);\n+\t}\n+\n+      if (! arglist)\n \treturn END_BUILTINS;\n-      break;\n \n-    default:\n-      if (arglist)\n+      argtype = TREE_TYPE (TREE_VALUE (arglist));\n+\n+      if (SCALAR_FLOAT_TYPE_P (parmtype))\n+\t{\n+\t  if (! SCALAR_FLOAT_TYPE_P (argtype))\n+\t    return END_BUILTINS;\n+\t}\n+      else if (COMPLEX_FLOAT_TYPE_P (parmtype))\n+\t{\n+\t  if (! COMPLEX_FLOAT_TYPE_P (argtype))\n+\t    return END_BUILTINS;\n+\t}\n+      else if (POINTER_TYPE_P (parmtype))\n+\t{\n+\t  if (! POINTER_TYPE_P (argtype))\n+\t    return END_BUILTINS;\n+\t}\n+      else if (INTEGRAL_TYPE_P (parmtype))\n+\t{\n+\t  if (! INTEGRAL_TYPE_P (argtype))\n+\t    return END_BUILTINS;\n+\t}\n+      else\n \treturn END_BUILTINS;\n-      break;\n+\n+      arglist = TREE_CHAIN (arglist);\n     }\n \n+  /* Variable-length argument list.  */\n   return DECL_FUNCTION_CODE (fndecl);\n }\n "}]}