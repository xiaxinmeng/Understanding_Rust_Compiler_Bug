{"sha": "2fb654f77d5292864ef57040f7bc01d7a975f6d9", "node_id": "C_kwDOANBUbNoAKDJmYjY1NGY3N2Q1MjkyODY0ZWY1NzA0MGY3YmMwMWQ3YTk3NWY2ZDk", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2022-05-06T16:39:13Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-05-06T16:40:43Z"}, "message": "rs6000: Ignore fusion option flags for inlining test [PR102059]\n\nThe -mpower8-fusion and -mpower10-fusion options do not modify which\ninstructions we can generate, so ignore them when deciding whether we\ncan inline callee into caller.\n\n2022-05-06   Michael Meissner  <meissner@linux.ibm.com>\n\ngcc/\n\tPR target/102059\n\t* config/rs6000/rs6000.cc (rs6000_can_inline_p): Ignore -mpower8-fusion\n\tand -mpower10-fusion options for inlining purposes.\n\ngcc/testsuite/\n\tPR target/102059\n\t* gcc.target/powerpc/pr102059-4.c: New test.", "tree": {"sha": "948376ddf38ee22ad197b64d320c20aa9ade9567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/948376ddf38ee22ad197b64d320c20aa9ade9567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fb654f77d5292864ef57040f7bc01d7a975f6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb654f77d5292864ef57040f7bc01d7a975f6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb654f77d5292864ef57040f7bc01d7a975f6d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb654f77d5292864ef57040f7bc01d7a975f6d9/comments", "author": null, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37f57a3f4e48fe1a22dfc1544730483022ee5ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37f57a3f4e48fe1a22dfc1544730483022ee5ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37f57a3f4e48fe1a22dfc1544730483022ee5ffb"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "4030864aa1afa4f1334dc1fa65940617b86aefe5", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb654f77d5292864ef57040f7bc01d7a975f6d9/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb654f77d5292864ef57040f7bc01d7a975f6d9/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=2fb654f77d5292864ef57040f7bc01d7a975f6d9", "patch": "@@ -25350,6 +25350,11 @@ rs6000_can_inline_p (tree caller, tree callee)\n \t    }\n \t}\n \n+      /* Ignore -mpower8-fusion and -mpower10-fusion options for inlining\n+\t purposes.  */\n+      callee_isa &= ~(OPTION_MASK_P8_FUSION | OPTION_MASK_P10_FUSION);\n+      explicit_isa &= ~(OPTION_MASK_P8_FUSION | OPTION_MASK_P10_FUSION);\n+\n       /* The callee's options must be a subset of the caller's options, i.e.\n \t a vsx function may inline an altivec function, but a no-vsx function\n \t must not inline a vsx function.  However, for those options that the"}, {"sha": "5fe66f8af4bf3ccbd08d7c4a142023c08f200462", "filename": "gcc/testsuite/gcc.target/powerpc/pr102059-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb654f77d5292864ef57040f7bc01d7a975f6d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102059-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb654f77d5292864ef57040f7bc01d7a975f6d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102059-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102059-4.c?ref=2fb654f77d5292864ef57040f7bc01d7a975f6d9", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+/* { dg-require-effective-target power10_ok } */\n+\n+/* Verify that power10 can explicity include functions compiled for power8.\n+   The issue was -mcpu=power8 enables -mpower8-fusion, but -mcpu=power9 or\n+   -mcpu=power10 do not set power8-fusion by default.  Thus when doing this\n+   compilation, they would get an error that the inline function failed in its\n+   inlining due to having incompatible options.  */\n+\n+static inline int __attribute__ ((always_inline,target(\"cpu=power8\")))\n+foo (int *b)\n+{\n+  *b += 10;\n+  return *b;\n+}\n+\n+int\n+bar (int *a)\n+{\n+  *a = foo (a);\n+  return 0;\n+}"}]}