{"sha": "7e49f9653784a0683e7e7f5d52daa1de081b7a14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U0OWY5NjUzNzg0YTA2ODNlN2U3ZjVkNTJkYWExZGUwODFiN2ExNA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-09-27T21:27:51Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-09-27T21:27:51Z"}, "message": "arith.c (reduce_binary_aa): Fix capitalization.\n\nfortran/\n* arith.c (reduce_binary_aa): Fix capitalization.\n* check.c (gfc_check_dot_product): Likewise.\n(gfc_check_matmul): Likewise.\n* expr.c (gfc_check_conformance): Likewise.\n(gfc_check_assign): Likewise.\n(gfc_default_initializer): Simplify logic.\n* trans.c (gfc_msg_bounds): Make const.\n(gfc_msg_fault): Likewise.\n(gfc_msg_wrong_return): Likewise.\n* trans.h: Add const to corresponding extern declarations.\ntestsuite/\n* gfortran.dg/array_initializer_3.f90: Adapt error annotations for\nfixed capitalizations.\n* gfortran.dg/compliant_elemental_intrinsics_1.f90: Likewise.\n* gfortran.dg/compliant_elemental_intrinsics_2.f90: Likewise.\n* gfortran.dg/elemental_subroutine_4.f90: Likewise.\n* gfortran.dg/intrinsic_argument_conformance_1.f90: Likewise.\n* gfortran.dg/maxloc_shape_1.f90: Likewise.\n* gfortran.dg/maxval_maxloc_conformance_1.f90: Likewise.\n* gfortran.dg/min_max_conformance.f90: Likewise.\n\nFrom-SVN: r128849", "tree": {"sha": "c8c963b4e7930274695f7cb023f990e51a9c4cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8c963b4e7930274695f7cb023f990e51a9c4cda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e49f9653784a0683e7e7f5d52daa1de081b7a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e49f9653784a0683e7e7f5d52daa1de081b7a14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e49f9653784a0683e7e7f5d52daa1de081b7a14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e49f9653784a0683e7e7f5d52daa1de081b7a14/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da4c1ea8461992bef38a5ad49e9e5e67fd5a495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495"}], "stats": {"total": 153, "additions": 88, "deletions": 65}, "files": [{"sha": "494036620ba35810a7e6425ab2430b340604b4b3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -1,3 +1,16 @@\n+2007-09-27  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\t* arith.c (reduce_binary_aa): Fix capitalization.\n+\t* check.c (gfc_check_dot_product): Likewise.\n+\t(gfc_check_matmul): Likewise.\n+\t* expr.c (gfc_check_conformance): Likewise.\n+\t(gfc_check_assign): Likewise.\n+\t(gfc_default_initializer): Simplify logic.\n+\t* trans.c (gfc_msg_bounds): Make const.\n+\t(gfc_msg_fault): Likewise.\n+\t(gfc_msg_wrong_return): Likewise.\n+\t* trans.h: Add const to corresponding extern declarations.\n+\n 2007-09-27  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/33568"}, {"sha": "97d093f31ea3c0ec641f7a639383fbb3a3e405fe", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -1422,7 +1422,7 @@ reduce_binary_aa (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n   rc = ARITH_OK;\n   d = op2->value.constructor;\n \n-  if (gfc_check_conformance (\"Elemental binary operation\", op1, op2)\n+  if (gfc_check_conformance (\"elemental binary operation\", op1, op2)\n       != SUCCESS)\n     rc = ARITH_INCOMMENSURATE;\n   else"}, {"sha": "b6c47dad990924268b1ee8e990e5f82df756b398", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -957,7 +957,7 @@ gfc_check_dot_product (gfc_expr *vector_a, gfc_expr *vector_b)\n \n   if (! identical_dimen_shape (vector_a, 0, vector_b, 0))\n     {\n-      gfc_error (\"different shape for arguments '%s' and '%s' at %L for \"\n+      gfc_error (\"Different shape for arguments '%s' and '%s' at %L for \"\n \t\t \"intrinsic 'dot_product'\", gfc_current_intrinsic_arg[0],\n \t\t gfc_current_intrinsic_arg[1], &vector_a->where);\n       return FAILURE;\n@@ -1676,7 +1676,7 @@ gfc_check_matmul (gfc_expr *matrix_a, gfc_expr *matrix_b)\n       /* Check for case matrix_a has shape(m), matrix_b has shape (m, k).  */\n       if (!identical_dimen_shape (matrix_a, 0, matrix_b, 0))\n \t{\n-\t  gfc_error (\"different shape on dimension 1 for arguments '%s' \"\n+\t  gfc_error (\"Different shape on dimension 1 for arguments '%s' \"\n \t\t     \"and '%s' at %L for intrinsic matmul\",\n \t\t     gfc_current_intrinsic_arg[0],\n \t\t     gfc_current_intrinsic_arg[1], &matrix_a->where);\n@@ -1695,7 +1695,7 @@ gfc_check_matmul (gfc_expr *matrix_a, gfc_expr *matrix_b)\n \t - matrix_a has shape (n,m) and matrix_b has shape (m).  */\n       if (!identical_dimen_shape (matrix_a, 1, matrix_b, 0))\n \t{\n-\t  gfc_error (\"different shape on dimension 2 for argument '%s' and \"\n+\t  gfc_error (\"Different shape on dimension 2 for argument '%s' and \"\n \t\t     \"dimension 1 for argument '%s' at %L for intrinsic \"\n \t\t     \"matmul\", gfc_current_intrinsic_arg[0],\n \t\t     gfc_current_intrinsic_arg[1], &matrix_a->where);"}, {"sha": "0c68095e6a870547f70090ecc8d505b178e5371a", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -2556,8 +2556,8 @@ gfc_check_conformance (const char *optype_msgid, gfc_expr *op1, gfc_expr *op2)\n \n       if (op1_flag && op2_flag && mpz_cmp (op1_size, op2_size) != 0)\n \t{\n-\t  gfc_error (\"different shape for %s at %L on dimension %d (%d and %d)\",\n-\t\t     _(optype_msgid), &op1->where, d + 1,\n+\t  gfc_error (\"Different shape for %s at %L on dimension %d \"\n+\t\t     \"(%d and %d)\", _(optype_msgid), &op1->where, d + 1,\n \t\t     (int) mpz_get_si (op1_size),\n \t\t     (int) mpz_get_si (op2_size));\n \n@@ -2696,7 +2696,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n \n   /* Check size of array assignments.  */\n   if (lvalue->rank != 0 && rvalue->rank != 0\n-      && gfc_check_conformance (\"Array assignment\", lvalue, rvalue) != SUCCESS)\n+      && gfc_check_conformance (\"array assignment\", lvalue, rvalue) != SUCCESS)\n     return FAILURE;\n \n   if (gfc_compare_types (&lvalue->ts, &rvalue->ts))\n@@ -2905,22 +2905,20 @@ gfc_default_initializer (gfc_typespec *ts)\n   gfc_expr *init;\n   gfc_component *c;\n \n-  init = NULL;\n-\n   /* See if we have a default initializer.  */\n   for (c = ts->derived->components; c; c = c->next)\n-    {\n-      if ((c->initializer || c->allocatable) && init == NULL)\n-\tinit = gfc_get_expr ();\n-    }\n+    if (c->initializer || c->allocatable)\n+      break;\n \n-  if (init == NULL)\n+  if (!c)\n     return NULL;\n \n   /* Build the constructor.  */\n+  init = gfc_get_expr ();\n   init->expr_type = EXPR_STRUCTURE;\n   init->ts = *ts;\n   init->where = ts->derived->declared_at;\n+\n   tail = NULL;\n   for (c = ts->derived->components; c; c = c->next)\n     {"}, {"sha": "d2e2b5ab4d20defb44e456bd9f76d667f1ffb755", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -46,9 +46,9 @@ along with GCC; see the file COPYING3.  If not see\n \n static gfc_file *gfc_current_backend_file;\n \n-char gfc_msg_bounds[] = N_(\"Array bound mismatch\");\n-char gfc_msg_fault[] = N_(\"Array reference out of bounds\");\n-char gfc_msg_wrong_return[] = N_(\"Incorrect function return value\");\n+const char gfc_msg_bounds[] = N_(\"Array bound mismatch\");\n+const char gfc_msg_fault[] = N_(\"Array reference out of bounds\");\n+const char gfc_msg_wrong_return[] = N_(\"Incorrect function return value\");\n \n \n /* Advance along TREE_CHAIN n times.  */"}, {"sha": "7bff3aa14b415c7fabec4c6ae54a3100ce3df1c2", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -716,9 +716,9 @@ void gfc_apply_interface_mapping (gfc_interface_mapping *,\n \n \n /* Standard error messages used in all the trans-*.c files.  */\n-extern char gfc_msg_bounds[];\n-extern char gfc_msg_fault[];\n-extern char gfc_msg_wrong_return[];\n+extern const char gfc_msg_bounds[];\n+extern const char gfc_msg_fault[];\n+extern const char gfc_msg_wrong_return[];\n \n \n #endif /* GFC_TRANS_H */"}, {"sha": "bfc1af73e670009d84826da910597dec4ba936b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -1,3 +1,15 @@\n+2007-09-27  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\t* gfortran.dg/array_initializer_3.f90: Adapt error annotations for\n+\tfixed capitalizations.\n+\t* gfortran.dg/compliant_elemental_intrinsics_1.f90: Likewise.\n+\t* gfortran.dg/compliant_elemental_intrinsics_2.f90: Likewise.\n+\t* gfortran.dg/elemental_subroutine_4.f90: Likewise.\n+\t* gfortran.dg/intrinsic_argument_conformance_1.f90: Likewise.\n+\t* gfortran.dg/maxloc_shape_1.f90: Likewise.\n+\t* gfortran.dg/maxval_maxloc_conformance_1.f90: Likewise.\n+\t* gfortran.dg/min_max_conformance.f90: Likewise.\n+\n 2007-09-27  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* gcc.dg/c99-tgmath-1.c: Require c99_runtime and add the associated"}, {"sha": "c420e95dc73ed74d591467c64f46c6355264defa", "filename": "gcc/testsuite/gfortran.dg/array_initializer_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_3.f90?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -6,7 +6,7 @@\n ! Contributed by Dominique d'Humieres  <dominiq@lps.ens.fr>\n !\n real, dimension(3,3), parameter :: a=reshape ((/(i, i = 1,9)/),(/3,3/))\n-real, dimension(2,3) :: b=a(:2:-1,:)  ! { dg-error \"different shape for Array assignment\" }\n+real, dimension(2,3) :: b=a(:2:-1,:)  ! { dg-error \"Different shape for array assignment\" }\n real, dimension(2,3) :: c=a(3:2:-1,:)\n print *, b\n print *, c"}, {"sha": "19cef2bfd8ecf315e7a7003399a19a6c621c5f07", "filename": "gcc/testsuite/gfortran.dg/compliant_elemental_intrinsics_1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompliant_elemental_intrinsics_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompliant_elemental_intrinsics_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompliant_elemental_intrinsics_1.f90?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -12,15 +12,15 @@\n pi = acos(-1.0)\n b = pi\n \n-a = cos(b) ! { dg-error \"different shape for Array assignment\" }\n+a = cos(b) ! { dg-error \"Different shape for array assignment\" }\n \n a = -pi\n-b = cos(a) ! { dg-error \"different shape for Array assignment\" }\n+b = cos(a) ! { dg-error \"Different shape for array assignment\" }\n \n ch = \"abcdefghijklmnopqrstuvwxyz\"\n-a = transfer (ch, pi, 3) ! { dg-error \"different shape for Array assignment\" }\n+a = transfer (ch, pi, 3) ! { dg-error \"Different shape for array assignment\" }\n \n ! This already generated an error\n-b = reshape ((/1.0/),(/1/)) ! { dg-error \"different shape for Array assignment\" }\n+b = reshape ((/1.0/),(/1/)) ! { dg-error \"Different shape for array assignment\" }\n \n end"}, {"sha": "0ced3301f1f9adf7ca3b3af0d16522093cda9cf7", "filename": "gcc/testsuite/gfortran.dg/compliant_elemental_intrinsics_2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompliant_elemental_intrinsics_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompliant_elemental_intrinsics_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompliant_elemental_intrinsics_2.f90?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -24,7 +24,7 @@ SUBROUTINE test_1()\n \n   SUBROUTINE test_2()\n     INTEGER :: a(2) = 0, b(3) = 0\n-    a = f(b)                          ! { dg-error \"different shape\" }\n+    a = f(b)                          ! { dg-error \"Different shape\" }\n     a = f(b(1:2))                     ! ok, slice, stride 1\n     a = f(b(1:3:2))                   ! ok, slice, stride 2\n   END SUBROUTINE\n@@ -37,8 +37,8 @@ SUBROUTINE test_3()\n \n   SUBROUTINE test_4()\n     INTEGER :: a(2,2) = 0, b(3,3) = 0\n-    a = f(b)                          ! { dg-error \"different shape\" }\n-    a = f(b(1:3, 1:2))                ! { dg-error \"different shape\" }\n+    a = f(b)                          ! { dg-error \"Different shape\" }\n+    a = f(b(1:3, 1:2))                ! { dg-error \"Different shape\" }\n     a = f(b(1:3:2, 1:3:2))            ! ok, same shape\n   END SUBROUTINE\n END PROGRAM"}, {"sha": "9d2bc492f5c304c3e07d564842b0d3a7bd2e8cb0", "filename": "gcc/testsuite/gfortran.dg/elemental_subroutine_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_4.f90?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -27,7 +27,7 @@ end module elem_assign\n    CALL S(I,J) ! { dg-error \"Incompatible ranks in elemental procedure\" }\n ! Check interface assignments\n    x = w       ! { dg-error \"Incompatible ranks in elemental procedure\" }\n-   x = y       ! { dg-error \"different shape for elemental procedure\" }\n+   x = y       ! { dg-error \"Different shape for elemental procedure\" }\n    x = z\n CONTAINS\n    ELEMENTAL SUBROUTINE S(I,J)"}, {"sha": "40f53824221cdf4289e84fce8ab8be5790ddd9d3", "filename": "gcc/testsuite/gfortran.dg/intrinsic_argument_conformance_1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_argument_conformance_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_argument_conformance_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_argument_conformance_1.f90?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -3,8 +3,8 @@ program main\n   real :: av(2), bv(4)\n   real :: a(2,2)\n   logical :: lo(3,2)\n-  print *,dot_product(av, bv) ! { dg-error \"different shape\" }\n-  print *,pack(a, lo) ! { dg-error \"different shape\" }\n-  print *,merge(av, bv, lo(1,:)) ! { dg-error \"different shape\" }\n-  print *,matmul(bv,a) ! { dg-error \"different shape\" }\n+  print *,dot_product(av, bv) ! { dg-error \"Different shape\" }\n+  print *,pack(a, lo) ! { dg-error \"Different shape\" }\n+  print *,merge(av, bv, lo(1,:)) ! { dg-error \"Different shape\" }\n+  print *,matmul(bv,a) ! { dg-error \"Different shape\" }\n end program main"}, {"sha": "0004f67f969b96a23c3505f57abc0cb3d3dfc21b", "filename": "gcc/testsuite/gfortran.dg/maxloc_shape_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxloc_shape_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxloc_shape_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxloc_shape_1.f90?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -8,7 +8,7 @@\n   integer, dimension(0:1,0:1) :: n\n   integer, dimension(1) :: i\n   n = reshape((/1, 2, 3, 4/), shape(n))\n-  i = maxloc(n) ! { dg-error \"different shape for Array assignment\" }\n-  i = maxloc(n,dim=1) ! { dg-error \"different shape for Array assignment\" }\n+  i = maxloc(n) ! { dg-error \"Different shape for array assignment\" }\n+  i = maxloc(n,dim=1) ! { dg-error \"Different shape for array assignment\" }\n !  print *,i\n end program"}, {"sha": "3925eca31c477bf5e3d7f12b8b709b5f23abbf77", "filename": "gcc/testsuite/gfortran.dg/maxval_maxloc_conformance_1.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxval_maxloc_conformance_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxval_maxloc_conformance_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxval_maxloc_conformance_1.f90?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -20,16 +20,16 @@ program main\n   print *,sum(a,1,mask=lo) ! { dg-error \"Incompatible ranks\" }\n   print *,product(a,1,mask=lo) ! { dg-error \"Incompatible ranks\" }\n \n-  print *,minloc(a,mask=lo2) ! { dg-error \"different shape\" }\n-  print *,maxloc(a,mask=lo2) ! { dg-error \"different shape\" }\n-  print *,minval(a,mask=lo2) ! { dg-error \"different shape\" }\n-  print *,maxval(a,mask=lo2) ! { dg-error \"different shape\" }\n-  print *,sum(a,mask=lo2) ! { dg-error \"different shape\" }\n-  print *,product(a,mask=lo2) ! { dg-error \"different shape\" }\n-  print *,minloc(a,1,mask=lo2) ! { dg-error \"different shape\" }\n-  print *,maxloc(a,1,mask=lo2) ! { dg-error \"different shape\" }\n-  print *,minval(a,1,mask=lo2) ! { dg-error \"different shape\" }\n-  print *,maxval(a,1,mask=lo2) ! { dg-error \"different shape\" }\n-  print *,sum(a,1,mask=lo2) ! { dg-error \"different shape\" }\n-  print *,product(a,1,mask=lo2) ! { dg-error \"different shape\" }\n+  print *,minloc(a,mask=lo2) ! { dg-error \"Different shape\" }\n+  print *,maxloc(a,mask=lo2) ! { dg-error \"Different shape\" }\n+  print *,minval(a,mask=lo2) ! { dg-error \"Different shape\" }\n+  print *,maxval(a,mask=lo2) ! { dg-error \"Different shape\" }\n+  print *,sum(a,mask=lo2) ! { dg-error \"Different shape\" }\n+  print *,product(a,mask=lo2) ! { dg-error \"Different shape\" }\n+  print *,minloc(a,1,mask=lo2) ! { dg-error \"Different shape\" }\n+  print *,maxloc(a,1,mask=lo2) ! { dg-error \"Different shape\" }\n+  print *,minval(a,1,mask=lo2) ! { dg-error \"Different shape\" }\n+  print *,maxval(a,1,mask=lo2) ! { dg-error \"Different shape\" }\n+  print *,sum(a,1,mask=lo2) ! { dg-error \"Different shape\" }\n+  print *,product(a,1,mask=lo2) ! { dg-error \"Different shape\" }\n end program main"}, {"sha": "57e37d0e76b51371c94b308022bb26a01ac1445b", "filename": "gcc/testsuite/gfortran.dg/min_max_conformance.f90", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_conformance.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e49f9653784a0683e7e7f5d52daa1de081b7a14/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_conformance.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_conformance.f90?ref=7e49f9653784a0683e7e7f5d52daa1de081b7a14", "patch": "@@ -20,32 +20,32 @@ program pr31919\n   r4a = amin1(r4a, r4b)          ! { dg-error \"Incompatible ranks\" }\n   r8a = dmin1(r8a, r8b)          ! { dg-error \"Incompatible ranks\" }\n \n-  i4a = max(i4b, i4c)            ! { dg-error \"different shape for arguments\" }\n-  i4a = max0(i4b, i4c)           ! { dg-error \"different shape for arguments\" }\n-  r4a = amax0(i4b, i4c)          ! { dg-error \"different shape for arguments\" }\n-  i4a = max1(r4b, r4c)           ! { dg-error \"different shape for arguments\" }\n-  r4a = amax1(r4b, r4c)          ! { dg-error \"different shape for arguments\" }\n-  r8a = dmax1(r8B, r8c)          ! { dg-error \"different shape for arguments\" }\n+  i4a = max(i4b, i4c)            ! { dg-error \"Different shape for arguments\" }\n+  i4a = max0(i4b, i4c)           ! { dg-error \"Different shape for arguments\" }\n+  r4a = amax0(i4b, i4c)          ! { dg-error \"Different shape for arguments\" }\n+  i4a = max1(r4b, r4c)           ! { dg-error \"Different shape for arguments\" }\n+  r4a = amax1(r4b, r4c)          ! { dg-error \"Different shape for arguments\" }\n+  r8a = dmax1(r8B, r8c)          ! { dg-error \"Different shape for arguments\" }\n \n-  i4a = min(i4b, i4c)            ! { dg-error \"different shape for arguments\" }\n-  i4a = min0(i4b, i4c)           ! { dg-error \"different shape for arguments\" }\n-  i4a = amin0(i4b, i4c)          ! { dg-error \"different shape for arguments\" }\n-  r4a = min1(r4b, r4c)           ! { dg-error \"different shape for arguments\" }\n-  r4a = amin1(r4b, r4c)          ! { dg-error \"different shape for arguments\" }\n-  r8a = dmin1(r8b, r8c)          ! { dg-error \"different shape for arguments\" }\n+  i4a = min(i4b, i4c)            ! { dg-error \"Different shape for arguments\" }\n+  i4a = min0(i4b, i4c)           ! { dg-error \"Different shape for arguments\" }\n+  i4a = amin0(i4b, i4c)          ! { dg-error \"Different shape for arguments\" }\n+  r4a = min1(r4b, r4c)           ! { dg-error \"Different shape for arguments\" }\n+  r4a = amin1(r4b, r4c)          ! { dg-error \"Different shape for arguments\" }\n+  r8a = dmin1(r8b, r8c)          ! { dg-error \"Different shape for arguments\" }\n \n   ! checking needs to be position independent\n   i4a = min(i4, i4a, i4, i4b)    ! { dg-error \"Incompatible ranks\" }\n   r4a = min(r4, r4a, r4, r4b)    ! { dg-error \"Incompatible ranks\" }\n   r8a = min(r8, r8a, r8, r8b)    ! { dg-error \"Incompatible ranks\" }\n-  i4a = min(i4, i4b, i4, i4c)    ! { dg-error \"different shape for arguments\" }\n-  r4a = min(r4, r4b, r4, r4c)    ! { dg-error \"different shape for arguments\" }\n-  r8a = min(r8, r8b, r8, r8c)    ! { dg-error \"different shape for arguments\" }\n+  i4a = min(i4, i4b, i4, i4c)    ! { dg-error \"Different shape for arguments\" }\n+  r4a = min(r4, r4b, r4, r4c)    ! { dg-error \"Different shape for arguments\" }\n+  r8a = min(r8, r8b, r8, r8c)    ! { dg-error \"Different shape for arguments\" }\n \n   i4a = max(i4, i4a, i4, i4b)    ! { dg-error \"Incompatible ranks\" }\n   r4a = max(r4, r4a, r4, r4b)    ! { dg-error \"Incompatible ranks\" }\n   r8a = max(r8, r8a, r8, r8b)    ! { dg-error \"Incompatible ranks\" }\n-  i4a = max(i4, i4b, i4, i4c)    ! { dg-error \"different shape for arguments\" }\n-  r4a = max(r4, r4b, r4, r4c)    ! { dg-error \"different shape for arguments\" }\n-  r8a = max(r8, r8b, r8, r8c)    ! { dg-error \"different shape for arguments\" }\n+  i4a = max(i4, i4b, i4, i4c)    ! { dg-error \"Different shape for arguments\" }\n+  r4a = max(r4, r4b, r4, r4c)    ! { dg-error \"Different shape for arguments\" }\n+  r8a = max(r8, r8b, r8, r8c)    ! { dg-error \"Different shape for arguments\" }\n end program"}]}