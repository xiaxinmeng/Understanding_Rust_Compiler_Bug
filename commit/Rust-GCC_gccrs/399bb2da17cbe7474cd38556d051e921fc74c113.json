{"sha": "399bb2da17cbe7474cd38556d051e921fc74c113", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk5YmIyZGExN2NiZTc0NzRjZDM4NTU2ZDA1MWU5MjFmYzc0YzExMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-24T15:03:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-24T15:03:51Z"}, "message": "N3648: Allow braced and parenthesized initializers.\n\n\t* parser.c (cp_parser_lambda_introducer): Use cp_parser_initializer.\n\t* pt.c (tsubst) [DECLTYPE_TYPE]: Handle DECLTYPE_FOR_INIT_CAPTURE.\n\t* semantics.c (lambda_capture_field_type): Use do_auto_deduction.\n\t(add_capture): Collapse a parenthesized initializer into a single\n\texpression.\n\t* cp-tree.h (DECLTYPE_FOR_INIT_CAPTURE): New.\n\nFrom-SVN: r198246", "tree": {"sha": "4a74df96c106fa41190e45e0d69fd4efc617e763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a74df96c106fa41190e45e0d69fd4efc617e763"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/399bb2da17cbe7474cd38556d051e921fc74c113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/399bb2da17cbe7474cd38556d051e921fc74c113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/399bb2da17cbe7474cd38556d051e921fc74c113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/399bb2da17cbe7474cd38556d051e921fc74c113/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98bdfa5050997aaa055a899f80ff6c14734edd7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98bdfa5050997aaa055a899f80ff6c14734edd7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98bdfa5050997aaa055a899f80ff6c14734edd7d"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "c63c9e21a194f8d428a6e8fcf49633ce405c0c8b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=399bb2da17cbe7474cd38556d051e921fc74c113", "patch": "@@ -1,3 +1,13 @@\n+2013-04-24  Jason Merrill  <jason@redhat.com>\n+\n+\tN3648: Allow braced and parenthesized initializers.\n+\t* parser.c (cp_parser_lambda_introducer): Use cp_parser_initializer.\n+\t* pt.c (tsubst) [DECLTYPE_TYPE]: Handle DECLTYPE_FOR_INIT_CAPTURE.\n+\t* semantics.c (lambda_capture_field_type): Use do_auto_deduction.\n+\t(add_capture): Collapse a parenthesized initializer into a single\n+\texpression.\n+\t* cp-tree.h (DECLTYPE_FOR_INIT_CAPTURE): New.\n+\n 2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56970"}, {"sha": "78fd56bab1dd4018f1a92e17a495586e5d3fecb1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=399bb2da17cbe7474cd38556d051e921fc74c113", "patch": "@@ -90,13 +90,15 @@ c-common.h, not after.\n       LAMBDA_EXPR_MUTABLE_P (in LAMBDA_EXPR)\n       DECL_FINAL_P (in FUNCTION_DECL)\n       QUALIFIED_NAME_IS_TEMPLATE (in SCOPE_REF)\n+      DECLTYPE_FOR_INIT_CAPTURE (in DECLTYPE_TYPE)\n    2: IDENTIFIER_OPNAME_P (in IDENTIFIER_NODE)\n       ICS_THIS_FLAG (in _CONV)\n       DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (in VAR_DECL)\n       STATEMENT_LIST_TRY_BLOCK (in STATEMENT_LIST)\n       TYPENAME_IS_RESOLVING_P (in TYPE_NAME_TYPE)\n       TARGET_EXPR_DIRECT_INIT_P (in TARGET_EXPR)\n       FNDECL_USED_AUTO (in FUNCTION_DECL)\n+      DECLTYPE_FOR_LAMBDA_PROXY (in DECLTYPE_TYPE)\n    3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n@@ -3590,10 +3592,12 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n   (DECLTYPE_TYPE_CHECK (NODE))->type_common.string_flag\n \n /* These flags indicate that we want different semantics from normal\n-   decltype: lambda capture just drops references, lambda proxies look\n-   through implicit dereference.  */\n+   decltype: lambda capture just drops references, init capture\n+   uses auto semantics, lambda proxies look through implicit dereference.  */\n #define DECLTYPE_FOR_LAMBDA_CAPTURE(NODE) \\\n   TREE_LANG_FLAG_0 (DECLTYPE_TYPE_CHECK (NODE))\n+#define DECLTYPE_FOR_INIT_CAPTURE(NODE) \\\n+  TREE_LANG_FLAG_1 (DECLTYPE_TYPE_CHECK (NODE))\n #define DECLTYPE_FOR_LAMBDA_PROXY(NODE) \\\n   TREE_LANG_FLAG_2 (DECLTYPE_TYPE_CHECK (NODE))\n \n@@ -5781,7 +5785,7 @@ extern tree finish_trait_expr\t\t\t(enum cp_trait_kind, tree, tree);\n extern tree build_lambda_expr                   (void);\n extern tree build_lambda_object\t\t\t(tree);\n extern tree begin_lambda_type                   (tree);\n-extern tree lambda_capture_field_type\t\t(tree);\n+extern tree lambda_capture_field_type\t\t(tree, bool);\n extern tree lambda_return_type\t\t\t(tree);\n extern tree lambda_proxy_type\t\t\t(tree);\n extern tree lambda_function\t\t\t(tree);"}, {"sha": "cb2629204049c1310d6bb6bba1744f0b5d6a9e5a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=399bb2da17cbe7474cd38556d051e921fc74c113", "patch": "@@ -8548,17 +8548,18 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t}\n \n       /* Find the initializer for this capture.  */\n-      if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_EQ)\n+\t  || cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN)\n+\t  || cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t{\n-\t  /* An explicit expression exists.  */\n-\t  cp_lexer_consume_token (parser->lexer);\n+\t  bool direct, non_constant;\n+\t  /* An explicit initializer exists.  */\n \t  if (cxx_dialect < cxx1y)\n \t    pedwarn (input_location, 0,\n \t\t     \"lambda capture initializers \"\n \t\t     \"only available with -std=c++1y or -std=gnu++1y\");\n-\t  capture_init_expr = cp_parser_assignment_expression (parser,\n-\t\t\t\t\t\t\t       /*cast_p=*/true,\n-\t\t\t\t\t\t\t       &idk);\n+\t  capture_init_expr = cp_parser_initializer (parser, &direct,\n+\t\t\t\t\t\t     &non_constant);\n \t  explicit_init_p = true;\n \t}\n       else"}, {"sha": "57f65b3be0e4dd36d463207ec55498aa47bb738e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=399bb2da17cbe7474cd38556d051e921fc74c113", "patch": "@@ -11794,7 +11794,8 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t--c_inhibit_evaluation_warnings;\n \n \tif (DECLTYPE_FOR_LAMBDA_CAPTURE (t))\n-\t  type = lambda_capture_field_type (type);\n+\t  type = lambda_capture_field_type (type,\n+\t\t\t\t\t    DECLTYPE_FOR_INIT_CAPTURE (t));\n \telse if (DECLTYPE_FOR_LAMBDA_PROXY (t))\n \t  type = lambda_proxy_type (type);\n \telse"}, {"sha": "4cc22597e85a231efdaaa8c1cf4d4218e35b4ebe", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=399bb2da17cbe7474cd38556d051e921fc74c113", "patch": "@@ -9127,14 +9127,22 @@ lambda_function (tree lambda)\n    The caller should add REFERENCE_TYPE for capture by reference.  */\n \n tree\n-lambda_capture_field_type (tree expr)\n+lambda_capture_field_type (tree expr, bool explicit_init_p)\n {\n-  tree type = non_reference (unlowered_expr_type (expr));\n+  tree type;\n+  if (explicit_init_p)\n+    {\n+      type = make_auto ();\n+      type = do_auto_deduction (type, expr, type);\n+    }\n+  else\n+    type = non_reference (unlowered_expr_type (expr));\n   if (!type || WILDCARD_TYPE_P (type))\n     {\n       type = cxx_make_type (DECLTYPE_TYPE);\n       DECLTYPE_TYPE_EXPR (type) = expr;\n       DECLTYPE_FOR_LAMBDA_CAPTURE (type) = true;\n+      DECLTYPE_FOR_INIT_CAPTURE (type) = explicit_init_p;\n       SET_TYPE_STRUCTURAL_EQUALITY (type);\n     }\n   return type;\n@@ -9400,7 +9408,10 @@ add_capture (tree lambda, tree id, tree initializer, bool by_reference_p,\n   char *buf;\n   tree type, member, name;\n \n-  type = lambda_capture_field_type (initializer);\n+  if (TREE_CODE (initializer) == TREE_LIST)\n+    initializer = build_x_compound_expr_from_list (initializer, ELK_INIT,\n+\t\t\t\t\t\t   tf_warning_or_error);\n+  type = lambda_capture_field_type (initializer, explicit_init_p);\n   if (by_reference_p)\n     {\n       type = build_reference_type (type);"}, {"sha": "edada406986b34732d93ce9608eec53382c2e8da", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init5.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/399bb2da17cbe7474cd38556d051e921fc74c113/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init5.C?ref=399bb2da17cbe7474cd38556d051e921fc74c113", "patch": "@@ -0,0 +1,11 @@\n+// Test for paren and brace initializers\n+// { dg-options \"-std=c++1y\" }\n+// { dg-do run }\n+\n+#include <initializer_list>\n+\n+int main()\n+{\n+  if ([x(42)]{ return x; }() != 42) __builtin_abort();\n+  if ([x{1,2}]{ return x.begin()[0]; }() != 1) __builtin_abort();\n+}"}]}