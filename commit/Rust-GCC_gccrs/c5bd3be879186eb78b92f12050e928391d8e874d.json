{"sha": "c5bd3be879186eb78b92f12050e928391d8e874d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzViZDNiZTg3OTE4NmViNzhiOTJmMTIwNTBlOTI4MzkxZDhlODc0ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-11T20:50:50Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-11T20:50:50Z"}, "message": "(clobbers_to): Deleted.\n\n(call_internal, call_value_internal): New patterns.\n(call, call_value): Just call new patterns and a29k_clobbers_to.\n\nFrom-SVN: r7277", "tree": {"sha": "6a1d58d906b0095506e92ddac9c8f871d1f40fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a1d58d906b0095506e92ddac9c8f871d1f40fab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5bd3be879186eb78b92f12050e928391d8e874d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5bd3be879186eb78b92f12050e928391d8e874d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5bd3be879186eb78b92f12050e928391d8e874d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5bd3be879186eb78b92f12050e928391d8e874d/comments", "author": null, "committer": null, "parents": [{"sha": "f5fa4507849214668430b923a811b6537c4e0272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fa4507849214668430b923a811b6537c4e0272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5fa4507849214668430b923a811b6537c4e0272"}], "stats": {"total": 61, "additions": 30, "deletions": 31}, "files": [{"sha": "9c7ca79a2c338384161c251198943361745ff607", "filename": "gcc/config/a29k/a29k.md", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bd3be879186eb78b92f12050e928391d8e874d/gcc%2Fconfig%2Fa29k%2Fa29k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bd3be879186eb78b92f12050e928391d8e874d/gcc%2Fconfig%2Fa29k%2Fa29k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.md?ref=c5bd3be879186eb78b92f12050e928391d8e874d", "patch": "@@ -111,39 +111,28 @@\n \f\n ;; CALLI\n ;;\n-;; Start with a subroutine to write out CLOBBERs starting at lr2 up to,\n-;; but not including, the next parameter register.  If operand[0] is null,\n-;; it means that all the argument registers have been used.\n-(define_expand \"clobbers_to\"\n-  [(clobber (match_operand:SI 0 \"\" \"\"))]\n+;; Each call pattern is duplicated so that we can add CLOBBERs to the\n+;; resulting insn.\n+;;\n+;; We indicate that LR0 is clobbered in the CALL_INSN itself.  Otherwise,\n+;; reorg will think it is just clobbered by the called function.\n+\n+(define_expand \"call\"\n+  [(use (match_operand:SI 0 \"\" \"\"))\n+   (use (match_operand 1 \"\" \"\"))\n+   (use (match_operand 2 \"\" \"\"))]\n   \"\"\n   \"\n-{\n-  int i;\n-  int high_regno;\n-\n-  if (operands[0] == 0)\n-    high_regno = R_LR (18);\n-  else if (GET_CODE (operands[0]) != REG || REGNO (operands[0]) < R_LR (0)\n-\t   || REGNO (operands[0]) > R_LR (18))\n-    abort ();\n-  else\n-    high_regno = REGNO (operands[0]);\n-\n-  for (i = R_LR (2); i < high_regno; i++)\n-    emit_insn (gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, i)));\n+{ rtx insn = emit_call_insn (gen_call_internal (operands[0], operands[1]));\n+  a29k_clobbers_to (insn, operands[2]);\n \n   DONE;\n }\")\n-\n-;; We indicate that LR0 is clobbered in the CALL_INSN itself.  Otherwise,\n-;; reorg will think it is just clobbered by the called function.\n-\n-(define_expand \"call\"\n+ \n+(define_expand \"call_internal\"\n   [(parallel [(call (match_operand:SI 0 \"\" \"\")\n \t\t    (match_operand 1 \"\" \"\"))\n-\t      (clobber (scratch:SI))])\n-   (match_operand 2 \"\" \"\")]\n+\t      (clobber (scratch:SI))])]\n   \"\"\n   \"\n {\n@@ -156,16 +145,27 @@\n       && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF)\n     operands[0] = gen_rtx (MEM, SImode,\n \t\t\t   force_reg (Pmode, XEXP (operands[0], 0)));\n-\n-  operands[2] = gen_clobbers_to (operands[2]);\n }\")\n  \n (define_expand \"call_value\"\n+  [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n+   (use (match_operand:SI 1 \"\" \"\"))\n+   (use (match_operand 2 \"\" \"\"))\n+   (use (match_operand 3 \"\" \"\"))]\n+  \"\"\n+  \"\n+{ rtx insn = emit_call_insn (gen_call_value_internal (operands[0], operands[1],\n+\t\t\t\t\t\t      operands[2]));\n+\n+  a29k_clobbers_to (insn, operands[3]);\n+  DONE;\n+}\")\n+ \n+(define_expand \"call_value_internal\"\n   [(parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t\t   (call (match_operand:SI 1 \"\" \"\")\n \t\t\t (match_operand 2 \"\" \"\")))\n-\t\t   (clobber (scratch:SI))])\n-   (match_operand 3 \"\" \"\")]\n+\t\t   (clobber (scratch:SI))])]\n   \"\"\n   \"\n {\n@@ -179,7 +179,6 @@\n     operands[1] = gen_rtx (MEM, SImode,\n \t\t\t   force_reg (Pmode, XEXP (operands[1], 0)));\n \n-  operands[3] = gen_clobbers_to (operands[3]);\n }\")\n  \n (define_insn \"\""}]}