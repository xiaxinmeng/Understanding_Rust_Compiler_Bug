{"sha": "4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUzMjI5M2NlNmUyNWRmZTRmM2Y3NTYwMzJhMDQ0ZjRkMzllNzBkMQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-11-23T06:17:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-11-23T06:17:32Z"}, "message": "freebsd.h: New, FreeBSD architecture independent file.\n\n        * config/freebsd.h: New, FreeBSD architecture independent file.\n        * config/i386/freebsd-elf.h: removed FreeBSD architecturally\n        independent pieces.\n        * config/i386/freebsd.h: include i386/perform.h via tm.h rather than\n        directly by i386/freebsd.h.\n        * configure.in (*-*-freebsdelf): Include new FreeBSD architecturally\n        independent configuration file.\n        (*-*-freebsdelf): Include i386/perform.h via tm.h rather than\n        directly by i386/freebsd.h.\n        * configure: Rebuilt.\n\t*POTFILES.in: Add config/freebsd.h\n\nFrom-SVN: r30628", "tree": {"sha": "cafbdb2c6286fa978581a22ce3b823c32aa9bec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cafbdb2c6286fa978581a22ce3b823c32aa9bec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/comments", "author": null, "committer": null, "parents": [{"sha": "d7ebf9ea950d7aee3b8cf3e316aa260211719afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ebf9ea950d7aee3b8cf3e316aa260211719afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ebf9ea950d7aee3b8cf3e316aa260211719afb"}], "stats": {"total": 236, "additions": 170, "deletions": 66}, "files": [{"sha": "1f88b82594f18877d3725a13da80e5c8cecdad4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "patch": "@@ -1,5 +1,16 @@\n Mon Nov 22 23:09:44 1999  David O'Brien  <obrien@FreeBSD.org>\n \n+\t* config/freebsd.h: New, FreeBSD architecture independent file.\n+\t* config/i386/freebsd-elf.h: removed FreeBSD architecturally\n+\tindependent pieces.\n+\t* config/i386/freebsd.h: include i386/perform.h via tm.h rather than\n+\tdirectly by i386/freebsd.h.\n+\t* configure.in (*-*-freebsdelf): Include new FreeBSD architecturally\n+\tindependent configuration file.\n+\t(*-*-freebsdelf): Include i386/perform.h via tm.h rather than\n+\tdirectly by i386/freebsd.h.\n+\t* configure: Rebuilt.\n+\n         * xm-i386.h: Define `__i386__' if not defined, rather than `i386'\n \twhich is in the user's namespace.\n         * libgcc2.c: Look for the ANSI-C approved `__i386__' symbol, vs."}, {"sha": "461f69edf1bf8dc090ad01d6480b34cf80146b9f", "filename": "gcc/config/freebsd.h", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "patch": "@@ -0,0 +1,141 @@\n+/* Base configuration file for all FreeBSD targets.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Common FreeBSD configuration. \n+   All FreeBSD architectures should include this file, which will specify\n+   their commonalities.\n+   Adapted from gcc/config/i386/freebsd-elf.h by \n+   David O'Brien <obrien@FreeBSD.org>.  */\n+\n+\n+/* This defines which switch letters take arguments.  On FreeBSD, most of\n+   the normal cases (defined in gcc.c) apply, and we also have -h* and\n+   -z* options (for the linker) (coming from SVR4).\n+   We also have -R (alias --rpath), no -z, --soname (-h), --assert etc.  */\n+\n+#define FBSD_SWITCH_TAKES_ARG(CHAR)\t\t\t\t\t\\\n+  (DEFAULT_SWITCH_TAKES_ARG (CHAR)\t\t\t\t\t\\\n+    || (CHAR) == 'h'\t\t\t\t\t\t\t\\\n+    || (CHAR) == 'z' /* ignored by ld */\t\t\t\t\\\n+    || (CHAR) == 'R')\n+\n+#undef SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR) (FBSD_SWITCH_TAKES_ARG(CHAR))\n+\n+#define FBSD_WORD_SWITCH_TAKES_ARG(STR)\t\t\t\t\t\\\n+  (DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\t\t\t\t\t\\\n+   || !strcmp ((STR), \"rpath\") || !strcmp ((STR), \"rpath-link\")\t\t\\\n+   || !strcmp ((STR), \"soname\") || !strcmp ((STR), \"defsym\") \t\t\\\n+   || !strcmp ((STR), \"assert\") || !strcmp ((STR), \"dynamic-linker\"))\n+\n+#undef WORD_SWITCH_TAKES_ARG\n+#define WORD_SWITCH_TAKES_ARG(STR) (FBSD_WORD_SWITCH_TAKES_ARG(STR))\n+\n+/* Provide a CPP_SPEC appropriate for FreeBSD.  We just deal with the GCC \n+   option `-posix', and PIC issues.  */\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%(cpp_cpu)\t\t\t\t\t\t\\\n+  %{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__}\t\t\\\n+  %{posix:-D_POSIX_SOURCE}\"\n+\n+/* Provide a LIB_SPEC appropriate for FreeBSD.  Just select the appropriate\n+   libc, depending on whether we're doing profiling or need threads support.\n+   (simular to the default, except no -lg, and no -p).  */\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC\t\t\t\t\t\t\t\\\n+  \"%{!shared:\t\t\t\t\t\t\t\t\\\n+     %{!pg:%{!pthread:%{!kthread:-lc}\t\t\t\t\t\\\n+       %{kthread:-lpthread -lc}}\t\t\t\t\t\\\n+       %{pthread:-lc_r}}\t\t\t\t\t\t\\\n+     %{pg:%{!pthread:%{!kthread:-lc_p}\t\t\t\t\t\\\n+       %{kthread:-lpthread_p -lc_p}}\t\t\t\t\t\\\n+       %{pthread:-lc_r_p}}}\"\n+\n+\n+/* Code generation parameters.  */\n+\n+/* Make gcc agree with <machine/ansi.h>.  */\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef WCHAR_UNSIGNED\n+#define WCHAR_UNSIGNED 0\n+\n+/* Don't default to pcc-struct-return, because gcc is the only compiler, and\n+   we want to retain compatibility with older gcc versions\n+   (even though the SVR4 ABI for the i386 says that records and unions are\n+   returned in memory).  */\n+#undef DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* Ensure we the configuration knows our system correctly so we can link with\n+   libraries compiled with the native cc.  */\n+#undef NO_DOLLAR_IN_LABEL\n+\n+/* Use more efficient ``thunks'' to implement C++ vtables.  */\n+#undef DEFAULT_VTABLE_THUNKS\n+#define DEFAULT_VTABLE_THUNKS 1\n+\n+/* This is BSD, so use stabs instead of DWARF debug format.  */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+/* Attach a special .ident directive to the end of the file to identify\n+   the version of GCC which compiled this code.  The format of the .ident\n+   string is patterned after the ones produced by native SVR4 C compilers.  */\n+#undef IDENT_ASM_OP\n+#define IDENT_ASM_OP \".ident\"\n+\n+/* Output #ident as a .ident.  */\n+#undef ASM_OUTPUT_IDENT\n+#define ASM_OUTPUT_IDENT(FILE, NAME)\t\t\t\t\t\\\n+  fprintf ((FILE), \"\\t%s\\t\\\"%s\\\"\\n\", IDENT_ASM_OP, (NAME));\n+\n+#undef ASM_IDENTIFY_LANGUAGE\n+#define ASM_IDENTIFY_LANGUAGE(FILE)\t\t\t\t\t\\\n+  fprintf ((FILE), \"\\t%s \\\"GCC (%s) %s\\\"\\n\", IDENT_ASM_OP,\t\t\\\n+\t   lang_identify (), version_string)\n+\n+#undef ASM_FILE_END\n+#define ASM_FILE_END(FILE)\t\t\t\t\t\t\\\n+do {\t\t\t\t \t\t\t\t\t\\\n+     if (!flag_no_ident)\t\t\t\t\t\t\\\n+\tfprintf ((FILE), \"\\t%s\\t\\\"GCC: (GNU) %s\\\"\\n\",\t\t\t\\\n+\t\t IDENT_ASM_OP, version_string);\t\t\t\t\\\n+   } while (0)\n+\n+\n+/* Miscellaneous parameters.  */\n+\n+/* Don't assume anything about the header files.  */\n+#undef NO_IMPLICIT_EXTERN_C\n+#define NO_IMPLICIT_EXTERN_C\n+\n+/* Allow #sccs in preprocessor.  */\n+#define SCCS_DIRECTIVE\n+\n+/* Handle #pragma weak and #pragma pack.  */\n+#define HANDLE_SYSV_PRAGMA\n+\n+/* Tell libgcc2.c that FreeBSD targets support atexit(3).  */\n+#define HAVE_ATEXIT"}, {"sha": "4c27dfa52e02e1ff876d50bfff62aeb351b353ee", "filename": "gcc/config/i386/freebsd-elf.h", "status": "modified", "additions": 9, "deletions": 59, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fconfig%2Fi386%2Ffreebsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fconfig%2Fi386%2Ffreebsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd-elf.h?ref=4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "patch": "@@ -25,20 +25,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (i386 FreeBSD/ELF)\");\n \n-/* The svr4 ABI for the i386 says that records and unions are returned\n-   in memory.  */\n-/* On FreeBSD, we do not. */\n-#undef DEFAULT_PCC_STRUCT_RETURN\n-#define DEFAULT_PCC_STRUCT_RETURN 0\n-\n-/* This gets defined in tm.h->linux.h->svr4.h, and keeps us from using\n-   libraries compiled with the native cc, so undef it. */\n-#undef NO_DOLLAR_IN_LABEL\n-\n-/* Use more efficient ``thunks'' to implement C++ vtables. */\n-#undef DEFAULT_VTABLE_THUNKS\n-#define DEFAULT_VTABLE_THUNKS 1\n-\n /* Override the default comment-starter of \"/\".  */\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \"#\"\n@@ -57,16 +43,12 @@ Boston, MA 02111-1307, USA.  */\n    i386.md for an explanation of the expression this outputs. */\n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n+  fprintf ((FILE), \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n \n /* Indicate that jump tables go in the text section.  This is\n    necessary when compiling PIC code.  */\n #define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n \n-/* Use stabs instead of DWARF debug format.  */\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n /* Copy this from the svr4 specifications... */\n /* Define the register numbers to be used in Dwarf debugging information.\n    The SVR4 reference port C compiler uses the following register numbers\n@@ -141,44 +123,25 @@ Boston, MA 02111-1307, USA.  */\n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n {\t\t\t\t\t\t\t\t\t\\\n   if (flag_pic)\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tcall *.mcount@GOT(%%ebx)\\n\");\t\t\t\\\n+      fprintf ((FILE), \"\\tcall *.mcount@GOT(%%ebx)\\n\");\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tcall .mcount\\n\");\t\t\t\t\\\n+      fprintf ((FILE), \"\\tcall .mcount\\n\");\t\t\t\t\\\n }\n \n+/* Make gcc agree with <machine/ansi.h>.  */\n+\n #undef SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\"\n  \n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"int\"\n   \n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE \"int\"\n-\n-#undef WCHAR_UNSIGNED\n-#define WCHAR_UNSIGNED 0\n-   \n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n     \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Di386 -Dunix -D__ELF__ -D__FreeBSD__ -Asystem(unix) -Asystem(FreeBSD) -Acpu(i386) -Amachine(i386)\"\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"%(cpp_cpu) %{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE}\"\n-\n-/* This defines which switch letters take arguments.  On FreeBSD, most of\n-   the normal cases (defined in gcc.c) apply, and we also have -h* and\n-   -z* options (for the linker) (comming from svr4).\n-   We also have -R (alias --rpath), no -z, --soname (-h), --assert etc. */\n-\n-#undef SWITCH_TAKES_ARG\n-#define SWITCH_TAKES_ARG(CHAR) \\\n-  (DEFAULT_SWITCH_TAKES_ARG (CHAR) \\\n-   || (CHAR) == 'h' \\\n-   || (CHAR) == 'z' \\\n-   || (CHAR) == 'R')\n-\n /* Provide a STARTFILE_SPEC appropriate for FreeBSD.  Here we add\n    the magical crtbegin.o file (see crtstuff.c) which provides part \n \tof the support for getting C++ file-scope static object constructed \n@@ -202,19 +165,6 @@ Boston, MA 02111-1307, USA.  */\n #define ENDFILE_SPEC \\\n   \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n \n-/* Provide a LIB_SPEC appropriate for FreeBSD.  Just select the appropriate\n-   libc, depending on whether we're doing profiling or need threads support.\n-   (simular to the default, except no -lg, and no -p.  */\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"%{!shared: \\\n-   %{!pg:%{!pthread:%{!kthread:-lc} \\\n-     %{kthread:-lpthread -lc}} \\\n-     %{pthread:-lc_r}} \\\n-   %{pg:%{!pthread:%{!kthread:-lc_p} \\\n-     %{kthread:-lpthread_p -lc_p}} \\\n-     %{pthread:-lc_r_p}}}\"\n-\n /* Provide a LINK_SPEC appropriate for FreeBSD.  Here we provide support\n    for the special GCC options -static and -shared, which allow us to\n    link things in one of these three modes by applying the appropriate\n@@ -249,9 +199,9 @@ Boston, MA 02111-1307, USA.  */\n    This is used to align code labels according to Intel recommendations.  */\n \n #ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n-#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP) \\\n-  if ((LOG) != 0) {\\\n-    if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG)); \\\n-    else fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP)); \\\n+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE, LOG, MAX_SKIP)\t\t\t\t\t\\\n+  if ((LOG) != 0) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n+    if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG));\t\\\n+    else fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP));\t\\\n   }\n #endif"}, {"sha": "5492fd18678c8d8313e0d55fe99c3570a3472a23", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "patch": "@@ -29,9 +29,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"i386/gstabs.h\"\n \n-/* Get perform_* macros to build libgcc.a.  */\n-#include \"i386/perform.h\"\n-\n /* This goes away when the math-emulator is fixed */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\"}, {"sha": "92bb397cdef7a5d9bad4c80f4804b3ef1f73fb19", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "patch": "@@ -4051,7 +4051,7 @@ for machine in $build $host $target; do\n #\t\tuse_collect2=yes\n \t\t;;\n \ti[34567]86-*-freebsdelf*)\n-\t\ttm_file=\"i386/i386.h i386/att.h svr4.h i386/freebsd-elf.h i386/perform.h\"\n+\t\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/freebsd-elf.h i386/perform.h\"\n \t\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \t\ttmake_file=t-freebsd\n \t\tgas=yes\n@@ -4065,7 +4065,7 @@ for machine in $build $host $target; do\n \t\tesac\n \t\t;;\n \ti[34567]86-*-freebsd*)\n-\t\ttm_file=i386/freebsd.h\n+\t\ttm_file=\"i386/freebsd.h i386/perform.h\"\n \t\ttmake_file=t-freebsd\n \t\t;;\n \ti[34567]86-*-netbsd*)"}, {"sha": "3599580fd77ed7ed4acb501dbd69f7fd69b24562", "filename": "gcc/configure.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "patch": "@@ -1273,7 +1273,7 @@ changequote([,])dnl\n changequote(,)dnl\n \ti[34567]86-*-freebsdelf*)\n changequote([,])dnl\n-\t\ttm_file=\"i386/i386.h i386/att.h svr4.h i386/freebsd-elf.h i386/perform.h\"\n+\t\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/freebsd-elf.h i386/perform.h\"\n \t\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \t\ttmake_file=t-freebsd\n \t\tgas=yes\n@@ -1289,7 +1289,7 @@ changequote([,])dnl\n changequote(,)dnl\n \ti[34567]86-*-freebsd*)\n changequote([,])dnl\n-\t\ttm_file=i386/freebsd.h\n+\t\ttm_file=\"i386/freebsd.h i386/perform.h\"\n \t\ttmake_file=t-freebsd\n \t\t;;\n changequote(,)dnl"}, {"sha": "f79ad9efb92b22070f13c33d1f1422d9273919b1", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "patch": "@@ -1,3 +1,7 @@\n+Mon Nov 22 23:17:13 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* POTFILES.in: Add config/freebsd.h\n+\n Sun Oct 31 17:17:18 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* POTFILES.in: Add simplify-rtx.c"}, {"sha": "3e3c43cbf692abe268a392e5167548cb87824172", "filename": "gcc/po/POTFILES.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fpo%2FPOTFILES.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e32293ce6e25dfe4f3f756032a044f4d39e70d1/gcc%2Fpo%2FPOTFILES.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FPOTFILES.in?ref=4e32293ce6e25dfe4f3f756032a044f4d39e70d1", "patch": "@@ -142,6 +142,7 @@ config/float-i64.h\n config/float-sh.h\n config/float-vax.h\n config/fp-bit.c\n+config/freebsd.h\n config/fx80/fx80.c\n config/fx80/fx80.h\n config/fx80/xm-fx80.h"}]}