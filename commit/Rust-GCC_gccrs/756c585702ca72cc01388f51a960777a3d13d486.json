{"sha": "756c585702ca72cc01388f51a960777a3d13d486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU2YzU4NTcwMmNhNzJjYzAxMzg4ZjUxYTk2MDc3N2EzZDEzZDQ4Ng==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-12-31T11:30:14Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-12-31T11:30:14Z"}, "message": "config.gcc (extra_headers): Add avx512fintrin.h, avx512cdintrin.h, avx512erintrin.h, avx512pfintrin.h.\n\ngcc/\n\n\t* config.gcc (extra_headers): Add avx512fintrin.h, avx512cdintrin.h,\n\tavx512erintrin.h, avx512pfintrin.h.\n\t* config/i386/avx512cdintrin.h: New file.\n\t* config/i386/avx512erintrin.h: New file.\n\t* config/i386/avx512fintrin.h: New file.\n\t* config/i386/avx512pfintrin.h: New file.\n\t* config/i386/i386-builtin-types.def: Add V16UHI, V32SF, V16SF, V8DF,\n\tV8DI, V16SI, V64QI, PV8DF, PV8DI, PV16SI, PV16SF, PCV8DF, PCV16SF,\n\tPCV8DI, PCV16SI, V16QI_FTYPE_V16SI, V8DF_FTYPE_V8SI, V8DF_FTYPE_V8DF,\n\tV8HI_FTYPE_V8DI, V16SF_FTYPE_V16SF, V8SI_FTYPE_V8DI, V8SF_FTYPE_V8DF,\n\tV8SF_FTYPE_V8DF_V8SF_QI, V16HI_FTYPE_V16SI, V16SF_FTYPE_FLOAT,\n\tV16SI_FTYPE_INT, V8DF_FTYPE_DOUBLE, V8DI_FTYPE_INT64,\n\tV16SF_FTYPE_V4SF, V8DF_FTYPE_V4DF, V8DI_FTYPE_V4DI, V16QI_FTYPE_V8DI,\n\tUINT_FTYPE_V4SF, UINT64_FTYPE_V4SF, UINT_FTYPE_V2DF,\n\tUINT64_FTYPE_V2DF, V16SI_FTYPE_V16SI, V16SI_FTYPE_V16SI_V16SI_HI,\n\tV8DI_FTYPE_V8DI, V8DI_FTYPE_V8DI_V8DI_QI, V16SI_FTYPE_PV4SI,\n\tV16SF_FTYPE_PV4SF, V8DI_FTYPE_PV4DI, V8DF_FTYPE_PV4DF,\n\tV8UHI_FTYPE_V8UHI, V8USI_FTYPE_V8USI, V2DF_FTYPE_V2DF_UINT,\n\tV2DF_FTYPE_V2DF_UINT64, V4DF_FTYPE_V8DF_INT,\n\tV4DF_FTYPE_V8DF_INT_V4DF_QI, V8DF_FTYPE_V8DF_V8DI,\n\tV4SF_FTYPE_V4SF_UINT, V4SF_FTYPE_V4SF_UINT64,\n\tINT_FTYPE_V4SF_V4SF_INT_INT, INT_FTYPE_V2DF_V2DF_INT_INT,\n\tV16SF_FTYPE_V16SF_INT, V4SF_FTYPE_V16SF_INT,\n\tV4SF_FTYPE_V16SF_INT_V4SF_QI, V16SF_FTYPE_V16SF_V16SF,\n\tV16SF_FTYPE_V16SF_V16SI, V8DF_FTYPE_V8DF_V4DF_INT_V8DF_QI,\n\tV8DF_FTYPE_V8DF_V8DF_INT_V8DF_QI, V8DF_FTYPE_V8DF_INT_V8DF_QI,\n\tV8DF_FTYPE_V8DF_V8DF_V8DI_INT_QI_INT, V8DF_FTYPE_V8DF_V8DF,\n\tV16SF_FTYPE_V16SF_V16SF_INT, V16SF_FTYPE_V16SF_V16SF_INT_V16SF_HI,\n\tV16SF_FTYPE_V16SF_INT_V16SF_HI, V16SI_FTYPE_V16SI_V4SI_INT_V16SI_HI,\n\tV16SF_FTYPE_V16SF_V16SF_V16SI_INT,\n\tV16SF_FTYPE_V16SF_V16SF_V16SI_INT_HI,\n\tV16SF_FTYPE_V16SF_V16SF_V16SI_INT_HI_INT,\n\tV4SF_FTYPE_V4SF_V4SF_V4SI_INT_QI,\n\tV4SF_FTYPE_V4SF_V4SF_V4SI_INT_QI_INT,\n\tV2DF_FTYPE_V2DF_V2DF_V2DI_INT_QI,\n\tV2DF_FTYPE_V2DF_V2DF_V2DI_INT_QI_INT, V16SF_FTYPE_V16SF_V4SF_INT,\n\tV16SF_FTYPE_V16SF_V4SF_INT_V16SF_HI, V16HI_FTYPE_V16SF_INT,\n\tV16HI_FTYPE_V16SF_INT_V16HI_HI, V16HI_FTYPE_V16HI_V16HI_INT_V16HI_HI,\n\tV16SI_FTYPE_V16SI_V4SI, V16SI_FTYPE_V16SI_V4SI_INT,\n\tV4SI_FTYPE_V16SI_INT, V4SI_FTYPE_V16SI_INT_V4SI_QI,\n\tV16SI_FTYPE_V16SI_V16SI, V16SI_FTYPE_V16SI_V16SI_INT_V16SI_HI,\n\tV16SI_FTYPE_V16SI_SI, V16SI_FTYPE_V16SI_INT,\n\tV16SI_FTYPE_V16SI_V4SI_V16SI_HI, V16SI_FTYPE_V16SI_INT_V16SI_HI,\n\tV8DI_FTYPE_V8DI_V8DI, V16SI_FTYPE_V8DF_V8DF,\n\tV8DI_FTYPE_V8DI_V8DI_INT_V8DI_QI, V8DI_FTYPE_V8DI_V4DI_INT_V8DI_QI,\n\tV8DI_FTYPE_V8DI_V2DI, V4DI_FTYPE_V8DI_INT,\n\tV4DI_FTYPE_V8DI_INT_V4DI_QI, V8DI_FTYPE_V8DI_V2DI_V8DI_QI,\n\tV8DI_FTYPE_V8DI_INT_V8DI_QI, VOID_FTYPE_PDOUBLE_V8DF,\n\tVOID_FTYPE_PFLOAT_V16SF, VOID_FTYPE_PV8DI_V8DI, HI_FTYPE_HI,\n\tHI_FTYPE_HI_HI, HI_FTYPE_HI_INT, QI_FTYPE_V8DI_V8DI,\n\tQI_FTYPE_V8DI_V8DI_QI, HI_FTYPE_V16SI_V16SI, HI_FTYPE_V16SI_V16SI_HI,\n\tQI_FTYPE_V8DI_V8DI_INT, QI_FTYPE_V8DI_V8DI_INT_QI,\n\tHI_FTYPE_V16SI_V16SI_INT, HI_FTYPE_V16SI_V16SI_INT ,HI,\n\tQI_FTYPE_V8DF_V8DF_INT, QI_FTYPE_V8DF_V8DF_INT_QI,\n\tQI_FTYPE_V8DF_V8DF_INT_QI_INT, HI_FTYPE_V16SF_V16SF_INT,\n\tHI_FTYPE_V16SF_V16SF_INT_HI, HI_FTYPE_V16SF_V16SF_INT_HI_INT,\n\tQI_FTYPE_V2DF_V2DF_INT, QI_FTYPE_V2DF_V2DF_INT_QI,\n\tQI_FTYPE_V2DF_V2DF_INT_QI_INT, QI_FTYPE_V4SF_V4SF_INT,\n\tQI_FTYPE_V4SF_V4SF_INT_QI, QI_FTYPE_V4SF_V4SF_INT_QI_INT,\n\tV16SI_FTYPE_HI, V8DI_FTYPE_QI, V8DF_FTYPE_V8DF_V8DF_V8DF,\n\tV16SF_FTYPE_V16SF_V16SF_V16SF, V8DF_FTYPE_V8DF_V8DF_QI,\n\tV8DF_FTYPE_V8SF_V8DF_QI, V8DF_FTYPE_V8SI_V8DF_QI,\n\tV8DI_FTYPE_V8SI_V8DI_QI, V8DI_FTYPE_V8HI_V8DI_QI,\n\tV8DI_FTYPE_V16QI_V8DI_QI, V8DI_FTYPE_V8DI_V8DI_V8DI_QI,\n\tV8DF_FTYPE_V8DI_V8DF_V8DF, V8DF_FTYPE_V8DI_V8DF_V8DF_QI,\n\tV8DF_FTYPE_V8DF_V8DI_V8DF_QI, V8DF_FTYPE_V8DF_V8DF_V8DF_QI,\n\tV16SI_FTYPE_V16SI_V16SI_V16SI_HI, V2DF_FTYPE_V2DF_V2DF_V2DF_QI,\n\tV2DF_FTYPE_V2DF_V4SF_V2DF_QI, V16SF_FTYPE_V16SF_V16SF_HI,\n\tV16SF_FTYPE_V16SI_V16SF_HI, V16SF_FTYPE_V16SF_V16SF_V16SF_HI,\n\tV16SF_FTYPE_V16SI_V16SF_V16SF, V16SF_FTYPE_V16SI_V16SF_V16SF_HI,\n\tV16SF_FTYPE_V16SF_V16SI_V16SF_HI, V4SF_FTYPE_V4SF_V2DF_V4SF_QI,\n\tV4SF_FTYPE_V4SF_V4SF_V4SF_QI, V16SF_FTYPE_V4SF_V16SF_HI,\n\tV8DF_FTYPE_V4DF_V8DF_QI, V8DF_FTYPE_V2DF_V8DF_QI,\n\tV16SI_FTYPE_V4SI_V16SI_HI, V16SI_FTYPE_SI_V16SI_HI,\n\tV16SI_FTYPE_V16HI_V16SI_HI, V16SI_FTYPE_V16QI_V16SI_HI,\n\tV8SI_FTYPE_V8DF_V8SI_QI, V8DI_FTYPE_V4DI_V8DI_QI,\n\tV8DI_FTYPE_V2DI_V8DI_QI, V8DI_FTYPE_DI_V8DI_QI,\n\tV16SF_FTYPE_PCV16SF_V16SF_HI, V8DF_FTYPE_PCV8DF_V8DF_QI,\n\tV16SI_FTYPE_PCV16SI_V16SI_HI, V8DI_FTYPE_PCV8DI_V8DI_QI,\n\tV2DF_FTYPE_PCDOUBLE_V2DF_QI, V4SF_FTYPE_PCFLOAT_V4SF_QI,\n\tV16QI_FTYPE_V16SI_V16QI_HI, V16HI_FTYPE_V16SI_V16HI_HI,\n\tV8SI_FTYPE_V8DI_V8SI_QI, V8HI_FTYPE_V8DI_V8HI_QI,\n\tV16QI_FTYPE_V8DI_V16QI_QI, VOID_FTYPE_PV8DF_V8DF_QI,\n\tVOID_FTYPE_PV16SF_V16SF_HI, VOID_FTYPE_PV8DI_V8DI_QI,\n\tVOID_FTYPE_PV16SI_V16SI_HI, VOID_FTYPE_PDOUBLE_V2DF_QI,\n\tVOID_FTYPE_PFLOAT_V4SF_QI, V16SI_FTYPE_V16SF_V16SI_HI,\n\tV8DI_FTYPE_V8DI_V8DI_V8DI_INT_QI,\n\tV16SI_FTYPE_V16SI_V16SI_V16SI_INT_HI, V8DI_FTYPE_V8DI_V8DI_V8DI,\n\tV16SI_FTYPE_V16SI_V16SI_V16SI, V8DF_FTYPE_V8DF_V8DI_V8DF,\n\tV16SF_FTYPE_V16SF_V16SI_V16SF, V4SF_FTYPE_V4SF_V4SF_INT_V4SF_QI,\n\tV2DF_FTYPE_V2DF_V2DF_INT_V2DF_QI, V8DI_FTYPE_V16SI_V16SI_V8DI_QI,\n\tUINT64_FTYPE_V2DF_INT, UINT64_FTYPE_V4SF_INT, UINT_FTYPE_V2DF_INT,\n\tUINT_FTYPE_V4SF_INT, INT64_FTYPE_V2DF_INT, INT64_FTYPE_V4SF_INT,\n\tINT_FTYPE_V2DF_INT, INT_FTYPE_V4SF_INT, V2DF_FTYPE_V2DF_UINT64_INT,\n\tV4SF_FTYPE_V4SF_UINT64_INT, V4SF_FTYPE_V4SF_UINT_INT,\n\tV2DF_FTYPE_V2DF_INT64_INT, V4SF_FTYPE_V4SF_INT64_INT,\n\tV4SF_FTYPE_V4SF_INT_INT, V16SI_FTYPE_V16SF_V16SI_HI_INT,\n\tV16SF_FTYPE_V16SI_V16SF_HI_INT, V16SF_FTYPE_V16SF_V16SF_HI_INT,\n\tV16SF_FTYPE_V16HI_V16SF_HI_INT, V8SI_FTYPE_V8DF_V8SI_QI_INT,\n\tV8SF_FTYPE_V8DF_V8SF_QI_INT, V8DF_FTYPE_V8DF_V8DF_QI_INT,\n\tV8DF_FTYPE_V8SF_V8DF_QI_INT, V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT,\n\tV8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT, V4SF_FTYPE_V4SF_V4SF_V4SF_QI_INT,\n\tV4SF_FTYPE_V4SF_V2DF_V4SF_QI_INT, V2DF_FTYPE_V2DF_V2DF_V2DF_QI_INT,\n\tV2DF_FTYPE_V2DF_V4SF_V2DF_QI_INT, V2DF_FTYPE_V2DF_V2DF_V2DF_INT,\n\tV16SF_FTYPE_V16SF_INT_V16SF_HI_INT, V8DF_FTYPE_V8DF_INT_V8DF_QI_INT,\n\tV4SF_FTYPE_V4SF_V4SF_INT_V4SF_QI_INT,\n\tV2DF_FTYPE_V2DF_V2DF_INT_V2DF_QI_INT, V8DI_FTYPE_V8DI_SI_V8DI_V8DI,\n\tV16SF_FTYPE_V16SF_PCFLOAT_V16SI_HI_INT,\n\tV16SF_FTYPE_V16SF_PCFLOAT_V8DI_HI_INT,\n\tV8DF_FTYPE_V8DF_PCDOUBLE_V8SI_QI_INT,\n\tV8DF_FTYPE_V8DF_PCDOUBLE_V16SI_QI_INT,\n\tV8SF_FTYPE_V8SF_PCFLOAT_V8DI_QI_INT,\n\tV8DF_FTYPE_V8DF_PCDOUBLE_V8DI_QI_INT,\n\tV16SI_FTYPE_V16SI_PCINT_V16SI_HI_INT,\n\tV16SI_FTYPE_V16SI_PCINT_V8DI_HI_INT,\n\tV8DI_FTYPE_V8DI_PCINT64_V8SI_QI_INT,\n\tV8DI_FTYPE_V8DI_PCINT64_V16SI_QI_INT,\n\tV8SI_FTYPE_V8SI_PCINT_V8DI_QI_INT,\n\tV8DI_FTYPE_V8DI_PCINT64_V8DI_QI_INT,\n\tVOID_FTYPE_PFLOAT_HI_V16SI_V16SF_INT,\n\tVOID_FTYPE_PDOUBLE_QI_V8SI_V8DF_INT,\n\tVOID_FTYPE_PFLOAT_QI_V8DI_V8SF_INT,\n\tVOID_FTYPE_PDOUBLE_QI_V8DI_V8DF_INT,\n\tVOID_FTYPE_PINT_HI_V16SI_V16SI_INT,\n\tVOID_FTYPE_PLONGLONG_QI_V8SI_V8DI_INT,\n\tVOID_FTYPE_PINT_QI_V8DI_V8SI_INT,\n\tVOID_FTYPE_PLONGLONG_QI_V8DI_V8DI_INT,\n\tVOID_FTYPE_HI_V16SI_PCINT_INT_INT, VOID_FTYPE_QI_V8DI_PCINT_INT_INT.\n\t(ALIAS): Add DEF_FUNCTION_TYPE_ALIAS (V16SI_FTYPE_V8DF_V8DF, ROUND).\n\t* config/i386/i386.c (enum ix86_builtins): Add IX86_BUILTIN_ADDPD512,\n\tIX86_BUILTIN_ADDPS512, IX86_BUILTIN_ADDSD_MASK,\n\tIX86_BUILTIN_ADDSS_MASK, IX86_BUILTIN_ALIGND512,\n\tIX86_BUILTIN_ALIGNQ512, IX86_BUILTIN_BLENDMD512,\n\tIX86_BUILTIN_BLENDMPD512, IX86_BUILTIN_BLENDMPS512,\n\tIX86_BUILTIN_BLENDMQ512, IX86_BUILTIN_BROADCASTF32X4_512,\n\tIX86_BUILTIN_BROADCASTF64X4_512, IX86_BUILTIN_BROADCASTI32X4_512,\n\tIX86_BUILTIN_BROADCASTI64X4_512, IX86_BUILTIN_BROADCASTSD512,\n\tIX86_BUILTIN_BROADCASTSS512, IX86_BUILTIN_CMPD512,\n\tIX86_BUILTIN_CMPPD512, IX86_BUILTIN_CMPPS512, IX86_BUILTIN_CMPQ512,\n\tIX86_BUILTIN_CMPSD_MASK, IX86_BUILTIN_CMPSS_MASK, IX86_BUILTIN_COMIDF,\n\tIX86_BUILTIN_COMISF, IX86_BUILTIN_COMPRESSPD512,\n\tIX86_BUILTIN_COMPRESSPDSTORE512, IX86_BUILTIN_COMPRESSPS512,\n\tIX86_BUILTIN_COMPRESSPSSTORE512, IX86_BUILTIN_CVTDQ2PD512,\n\tIX86_BUILTIN_CVTDQ2PS512, IX86_BUILTIN_CVTPD2DQ512,\n\tIX86_BUILTIN_CVTPD2PS512, IX86_BUILTIN_CVTPD2UDQ512,\n\tIX86_BUILTIN_CVTPH2PS512, IX86_BUILTIN_CVTPS2DQ512,\n\tIX86_BUILTIN_CVTPS2PD512, IX86_BUILTIN_CVTPS2PH512,\n\tIX86_BUILTIN_CVTPS2UDQ512, IX86_BUILTIN_CVTSD2SS_MASK,\n\tIX86_BUILTIN_CVTSI2SD64, IX86_BUILTIN_CVTSI2SS32,\n\tIX86_BUILTIN_CVTSI2SS64, IX86_BUILTIN_CVTSS2SD_MASK,\n\tIX86_BUILTIN_CVTTPD2DQ512, IX86_BUILTIN_CVTTPD2UDQ512,\n\tIX86_BUILTIN_CVTTPS2DQ512, IX86_BUILTIN_CVTTPS2UDQ512,\n\tIX86_BUILTIN_CVTUDQ2PD512, IX86_BUILTIN_CVTUDQ2PS512,\n\tIX86_BUILTIN_CVTUSI2SD32, IX86_BUILTIN_CVTUSI2SD64,\n\tIX86_BUILTIN_CVTUSI2SS32, IX86_BUILTIN_CVTUSI2SS64,\n\tIX86_BUILTIN_DIVPD512, IX86_BUILTIN_DIVPS512, IX86_BUILTIN_DIVSD_MASK,\n\tIX86_BUILTIN_DIVSS_MASK, IX86_BUILTIN_EXPANDPD512,\n\tIX86_BUILTIN_EXPANDPD512Z, IX86_BUILTIN_EXPANDPDLOAD512,\n\tIX86_BUILTIN_EXPANDPDLOAD512Z, IX86_BUILTIN_EXPANDPS512,\n\tIX86_BUILTIN_EXPANDPS512Z, IX86_BUILTIN_EXPANDPSLOAD512,\n\tIX86_BUILTIN_EXPANDPSLOAD512Z, IX86_BUILTIN_EXTRACTF32X4,\n\tIX86_BUILTIN_EXTRACTF64X4, IX86_BUILTIN_EXTRACTI32X4,\n\tIX86_BUILTIN_EXTRACTI64X4, IX86_BUILTIN_FIXUPIMMPD512_MASK,\n\tIX86_BUILTIN_FIXUPIMMPD512_MASKZ, IX86_BUILTIN_FIXUPIMMPS512_MASK,\n\tIX86_BUILTIN_FIXUPIMMPS512_MASKZ, IX86_BUILTIN_FIXUPIMMSD128_MASK,\n\tIX86_BUILTIN_FIXUPIMMSD128_MASKZ, IX86_BUILTIN_FIXUPIMMSS128_MASK,\n\tIX86_BUILTIN_FIXUPIMMSS128_MASKZ, IX86_BUILTIN_GETEXPPD512,\n\tIX86_BUILTIN_GETEXPPS512, IX86_BUILTIN_GETEXPSD128,\n\tIX86_BUILTIN_GETEXPSS128, IX86_BUILTIN_GETMANTPD512,\n\tIX86_BUILTIN_GETMANTPS512, IX86_BUILTIN_GETMANTSD128,\n\tIX86_BUILTIN_GETMANTSS128, IX86_BUILTIN_INSERTF32X4,\n\tIX86_BUILTIN_INSERTF64X4, IX86_BUILTIN_INSERTI32X4,\n\tIX86_BUILTIN_INSERTI64X4, IX86_BUILTIN_LOADAPD512,\n\tIX86_BUILTIN_LOADAPS512, IX86_BUILTIN_LOADDQUDI512,\n\tIX86_BUILTIN_LOADDQUSI512, IX86_BUILTIN_LOADSD, IX86_BUILTIN_LOADSS,\n\tIX86_BUILTIN_LOADUPD512, IX86_BUILTIN_LOADUPS512,\n\tIX86_BUILTIN_MAXPD512, IX86_BUILTIN_MAXPS512, IX86_BUILTIN_MAXSD_MASK,\n\tIX86_BUILTIN_MAXSS_MASK, IX86_BUILTIN_MINPD512, IX86_BUILTIN_MINPS512,\n\tIX86_BUILTIN_MINSD_MASK, IX86_BUILTIN_MINSS_MASK,\n\tIX86_BUILTIN_MOVAPD512, IX86_BUILTIN_MOVAPS512,\n\tIX86_BUILTIN_MOVDDUP512, IX86_BUILTIN_MOVDQA32LOAD512,\n\tIX86_BUILTIN_MOVDQA32STORE512, IX86_BUILTIN_MOVDQA32_512,\n\tIX86_BUILTIN_MOVDQA64LOAD512, IX86_BUILTIN_MOVDQA64STORE512,\n\tIX86_BUILTIN_MOVDQA64_512, IX86_BUILTIN_MOVESD, IX86_BUILTIN_MOVESS,\n\tIX86_BUILTIN_MOVNTDQ512, IX86_BUILTIN_MOVNTPD512,\n\tIX86_BUILTIN_MOVNTPS512, IX86_BUILTIN_MOVSHDUP512,\n\tIX86_BUILTIN_MOVSLDUP512, IX86_BUILTIN_MULPD512,\n\tIX86_BUILTIN_MULPS512, IX86_BUILTIN_MULSD_MASK,\n\tIX86_BUILTIN_MULSS_MASK, IX86_BUILTIN_PABSD512, IX86_BUILTIN_PABSQ512,\n\tIX86_BUILTIN_PADDD512, IX86_BUILTIN_PADDQ512, IX86_BUILTIN_PANDD512,\n\tIX86_BUILTIN_PANDND512, IX86_BUILTIN_PANDNQ512, IX86_BUILTIN_PANDQ512,\n\tIX86_BUILTIN_PBROADCASTD512, IX86_BUILTIN_PBROADCASTD512_GPR,\n\tIX86_BUILTIN_PBROADCASTMB512, IX86_BUILTIN_PBROADCASTMW512,\n\tIX86_BUILTIN_PBROADCASTQ512, IX86_BUILTIN_PBROADCASTQ512_GPR,\n\tIX86_BUILTIN_PBROADCASTQ512_MEM, IX86_BUILTIN_PCMPEQD512_MASK,\n\tIX86_BUILTIN_PCMPEQQ512_MASK, IX86_BUILTIN_PCMPGTD512_MASK,\n\tIX86_BUILTIN_PCMPGTQ512_MASK, IX86_BUILTIN_PCOMPRESSD512,\n\tIX86_BUILTIN_PCOMPRESSDSTORE512, IX86_BUILTIN_PCOMPRESSQ512,\n\tIX86_BUILTIN_PCOMPRESSQSTORE512, IX86_BUILTIN_PEXPANDD512,\n\tIX86_BUILTIN_PEXPANDD512Z, IX86_BUILTIN_PEXPANDDLOAD512,\n\tIX86_BUILTIN_PEXPANDDLOAD512Z, IX86_BUILTIN_PEXPANDQ512,\n\tIX86_BUILTIN_PEXPANDQ512Z, IX86_BUILTIN_PEXPANDQLOAD512,\n\tIX86_BUILTIN_PEXPANDQLOAD512Z, IX86_BUILTIN_PMAXSD512,\n\tIX86_BUILTIN_PMAXSQ512, IX86_BUILTIN_PMAXUD512,\n\tIX86_BUILTIN_PMAXUQ512, IX86_BUILTIN_PMINSD512,\n\tIX86_BUILTIN_PMINSQ512, IX86_BUILTIN_PMINUD512,\n\tIX86_BUILTIN_PMINUQ512, IX86_BUILTIN_PMOVDB512,\n\tIX86_BUILTIN_PMOVDW512, IX86_BUILTIN_PMOVQB512,\n\tIX86_BUILTIN_PMOVQD512, IX86_BUILTIN_PMOVQW512,\n\tIX86_BUILTIN_PMOVSDB512, IX86_BUILTIN_PMOVSDW512,\n\tIX86_BUILTIN_PMOVSQB512, IX86_BUILTIN_PMOVSQD512,\n\tIX86_BUILTIN_PMOVSQW512, IX86_BUILTIN_PMOVSXBD512,\n\tIX86_BUILTIN_PMOVSXBQ512, IX86_BUILTIN_PMOVSXDQ512,\n\tIX86_BUILTIN_PMOVSXWD512, IX86_BUILTIN_PMOVSXWQ512,\n\tIX86_BUILTIN_PMOVUSDB512, IX86_BUILTIN_PMOVUSDW512,\n\tIX86_BUILTIN_PMOVUSQB512, IX86_BUILTIN_PMOVUSQD512,\n\tIX86_BUILTIN_PMOVUSQW512, IX86_BUILTIN_PMOVZXBD512,\n\tIX86_BUILTIN_PMOVZXBQ512, IX86_BUILTIN_PMOVZXDQ512,\n\tIX86_BUILTIN_PMOVZXWD512, IX86_BUILTIN_PMOVZXWQ512,\n\tIX86_BUILTIN_PMULDQ512, IX86_BUILTIN_PMULLD512,\n\tIX86_BUILTIN_PMULUDQ512, IX86_BUILTIN_PORD512, IX86_BUILTIN_PORQ512,\n\tIX86_BUILTIN_PROLD512, IX86_BUILTIN_PROLQ512, IX86_BUILTIN_PROLVD512,\n\tIX86_BUILTIN_PROLVQ512, IX86_BUILTIN_PRORD512, IX86_BUILTIN_PRORQ512,\n\tIX86_BUILTIN_PRORVD512, IX86_BUILTIN_PRORVQ512,\n\tIX86_BUILTIN_PSHUFD512, IX86_BUILTIN_PSLLD512, IX86_BUILTIN_PSLLDI512,\n\tIX86_BUILTIN_PSLLQ512, IX86_BUILTIN_PSLLQI512,\n\tIX86_BUILTIN_PSLLVV16SI, IX86_BUILTIN_PSLLVV8DI,\n\tIX86_BUILTIN_PSRAD512, IX86_BUILTIN_PSRADI512, IX86_BUILTIN_PSRAQ512,\n\tIX86_BUILTIN_PSRAQI512, IX86_BUILTIN_PSRAVV16SI,\n\tIX86_BUILTIN_PSRAVV8DI, IX86_BUILTIN_PSRLD512, IX86_BUILTIN_PSRLDI512,\n\tIX86_BUILTIN_PSRLQ512, IX86_BUILTIN_PSRLQI512,\n\tIX86_BUILTIN_PSRLVV16SI, IX86_BUILTIN_PSRLVV8DI,\n\tIX86_BUILTIN_PSUBD512, IX86_BUILTIN_PSUBQ512, IX86_BUILTIN_PTESTMD512,\n\tIX86_BUILTIN_PTESTMQ512, IX86_BUILTIN_PTESTNMD512,\n\tIX86_BUILTIN_PTESTNMQ512, IX86_BUILTIN_PUNPCKHDQ512,\n\tIX86_BUILTIN_PUNPCKHQDQ512, IX86_BUILTIN_PUNPCKLDQ512,\n\tIX86_BUILTIN_PUNPCKLQDQ512, IX86_BUILTIN_PXORD512,\n\tIX86_BUILTIN_PXORQ512, IX86_BUILTIN_RCP14PD512,\n\tIX86_BUILTIN_RCP14PS512, IX86_BUILTIN_RCP14SD, IX86_BUILTIN_RCP14SS,\n\tIX86_BUILTIN_RNDSCALEPD, IX86_BUILTIN_RNDSCALEPS,\n\tIX86_BUILTIN_RNDSCALESD, IX86_BUILTIN_RNDSCALESS,\n\tIX86_BUILTIN_RSQRT14PD512, IX86_BUILTIN_RSQRT14PS512,\n\tIX86_BUILTIN_RSQRT14SD, IX86_BUILTIN_RSQRT14SS,\n\tIX86_BUILTIN_SCALEFPD512, IX86_BUILTIN_SCALEFPS512,\n\tIX86_BUILTIN_SCALEFSD, IX86_BUILTIN_SCALEFSS, IX86_BUILTIN_SHUFPD512,\n\tIX86_BUILTIN_SHUFPS512, IX86_BUILTIN_SHUF_F32x4,\n\tIX86_BUILTIN_SHUF_F64x2, IX86_BUILTIN_SHUF_I32x4,\n\tIX86_BUILTIN_SHUF_I64x2,\n\tIX86_BUILTIN_SQRTPD512_MASK, IX86_BUILTIN_SQRTPS512_MASK,\n\tIX86_BUILTIN_SQRTSD_MASK,\n\tIX86_BUILTIN_SQRTSS_MASK, IX86_BUILTIN_STOREAPD512,\n\tIX86_BUILTIN_STOREAPS512, IX86_BUILTIN_STOREDQUDI512,\n\tIX86_BUILTIN_STOREDQUSI512, IX86_BUILTIN_STORESD,\n\tIX86_BUILTIN_STORESS, IX86_BUILTIN_STOREUPD512,\n\tIX86_BUILTIN_STOREUPS512, IX86_BUILTIN_SUBPD512,\n\tIX86_BUILTIN_SUBPS512, IX86_BUILTIN_SUBSD_MASK,\n\tIX86_BUILTIN_SUBSS_MASK, IX86_BUILTIN_UCMPD512, IX86_BUILTIN_UCMPQ512,\n\tIX86_BUILTIN_UNPCKHPD512, IX86_BUILTIN_UNPCKHPS512,\n\tIX86_BUILTIN_UNPCKLPD512, IX86_BUILTIN_UNPCKLPS512,\n\tIX86_BUILTIN_VCVTSD2SI32, IX86_BUILTIN_VCVTSD2SI64,\n\tIX86_BUILTIN_VCVTSD2USI32, IX86_BUILTIN_VCVTSD2USI64,\n\tIX86_BUILTIN_VCVTSS2SI32, IX86_BUILTIN_VCVTSS2SI64,\n\tIX86_BUILTIN_VCVTSS2USI32, IX86_BUILTIN_VCVTSS2USI64,\n\tIX86_BUILTIN_VCVTTSD2SI32, IX86_BUILTIN_VCVTTSD2SI64,\n\tIX86_BUILTIN_VCVTTSD2USI32, IX86_BUILTIN_VCVTTSD2USI64,\n\tIX86_BUILTIN_VCVTTSS2SI32, IX86_BUILTIN_VCVTTSS2SI64,\n\tIX86_BUILTIN_VCVTTSS2USI32, IX86_BUILTIN_VCVTTSS2USI64,\n\tIX86_BUILTIN_VFMADDPD512_MASK, IX86_BUILTIN_VFMADDPD512_MASK3,\n\tIX86_BUILTIN_VFMADDPD512_MASKZ, IX86_BUILTIN_VFMADDPS512_MASK,\n\tIX86_BUILTIN_VFMADDPS512_MASK3, IX86_BUILTIN_VFMADDPS512_MASKZ,\n\tIX86_BUILTIN_VFMADDSD3_MASK, IX86_BUILTIN_VFMADDSD3_MASK3,\n\tIX86_BUILTIN_VFMADDSD3_MASKZ, IX86_BUILTIN_VFMADDSS3_MASK,\n\tIX86_BUILTIN_VFMADDSS3_MASK3, IX86_BUILTIN_VFMADDSS3_MASKZ,\n\tIX86_BUILTIN_VFMADDSUBPD512_MASK, IX86_BUILTIN_VFMADDSUBPD512_MASK3,\n\tIX86_BUILTIN_VFMADDSUBPD512_MASKZ, IX86_BUILTIN_VFMADDSUBPS512_MASK,\n\tIX86_BUILTIN_VFMADDSUBPS512_MASK3, IX86_BUILTIN_VFMADDSUBPS512_MASKZ,\n\tIX86_BUILTIN_VFMSUBADDPD512_MASK3, IX86_BUILTIN_VFMSUBADDPS512_MASK3,\n\tIX86_BUILTIN_VFMSUBPD512_MASK3, IX86_BUILTIN_VFMSUBPS512_MASK3,\n\tIX86_BUILTIN_VFMSUBSD3_MASK3, IX86_BUILTIN_VFMSUBSS3_MASK3,\n\tIX86_BUILTIN_VFNMADDPD512_MASK, IX86_BUILTIN_VFNMADDPS512_MASK,\n\tIX86_BUILTIN_VFNMSUBPD512_MASK, IX86_BUILTIN_VFNMSUBPD512_MASK3,\n\tIX86_BUILTIN_VFNMSUBPS512_MASK, IX86_BUILTIN_VFNMSUBPS512_MASK3,\n\tIX86_BUILTIN_VPCLZCNTD512, IX86_BUILTIN_VPCLZCNTQ512,\n\tIX86_BUILTIN_VPCONFLICTD512, IX86_BUILTIN_VPCONFLICTQ512,\n\tIX86_BUILTIN_VPERMDF512, IX86_BUILTIN_VPERMDI512,\n\tIX86_BUILTIN_VPERMI2VARD512, IX86_BUILTIN_VPERMI2VARPD512,\n\tIX86_BUILTIN_VPERMI2VARPS512, IX86_BUILTIN_VPERMI2VARQ512,\n\tIX86_BUILTIN_VPERMILPD512, IX86_BUILTIN_VPERMILPS512,\n\tIX86_BUILTIN_VPERMILVARPD512, IX86_BUILTIN_VPERMILVARPS512,\n\tIX86_BUILTIN_VPERMT2VARD512, IX86_BUILTIN_VPERMT2VARD512_MASKZ,\n\tIX86_BUILTIN_VPERMT2VARPD512, IX86_BUILTIN_VPERMT2VARPD512_MASKZ,\n\tIX86_BUILTIN_VPERMT2VARPS512, IX86_BUILTIN_VPERMT2VARPS512_MASKZ,\n\tIX86_BUILTIN_VPERMT2VARQ512, IX86_BUILTIN_VPERMT2VARQ512_MASKZ,\n\tIX86_BUILTIN_VPERMVARDF512, IX86_BUILTIN_VPERMVARDI512,\n\tIX86_BUILTIN_VPERMVARSF512, IX86_BUILTIN_VPERMVARSI512,\n\tIX86_BUILTIN_VTERNLOGD512_MASK, IX86_BUILTIN_VTERNLOGD512_MASKZ,\n\tIX86_BUILTIN_VTERNLOGQ512_MASK, IX86_BUILTIN_VTERNLOGQ512_MASKZ,\n\tIX86_BUILTIN_KAND16, IX86_BUILTIN_KANDN16, IX86_BUILTIN_KNOT16,\n\tIX86_BUILTIN_KOR16, IX86_BUILTIN_KORTESTC16, IX86_BUILTIN_KORTESTZ16,\n\tIX86_BUILTIN_KUNPCKBW, IX86_BUILTIN_KXNOR16, IX86_BUILTIN_KXOR16,\n\tIX86_BUILTIN_GATHER3SIV8DI,\n\tIX86_BUILTIN_SCATTERDIV16SF, IX86_BUILTIN_SCATTERDIV16SI,\n\tIX86_BUILTIN_SCATTERDIV8DF, IX86_BUILTIN_SCATTERDIV8DI,\n\tIX86_BUILTIN_SCATTERSIV16SF, IX86_BUILTIN_SCATTERSIV16SI,\n\tIX86_BUILTIN_SCATTERSIV8DF, IX86_BUILTIN_SCATTERSIV8DI,\n\tIX86_BUILTIN_GATHERPFDPS, IX86_BUILTIN_GATHERPFQPS,\n\tIX86_BUILTIN_SCATTERPFDPS, IX86_BUILTIN_SCATTERPFQPS,\n\tIX86_BUILTIN_EXP2PD_MASK, IX86_BUILTIN_EXP2PS_MASK,\n\tIX86_BUILTIN_RCP28PD, IX86_BUILTIN_RCP28PS,\n\tIX86_BUILTIN_RSQRT28PD, IX86_BUILTIN_RSQRT28PS.\n\t(bdesc_special_args): Add __builtin_ia32_compressstoresf512_mask,\n\t__builtin_ia32_compressstoresi512_mask,\n\t__builtin_ia32_compressstoredf512_mask,\n\t__builtin_ia32_compressstoredi512_mask,\n\t__builtin_ia32_expandloadsf512_mask,\n\t__builtin_ia32_expandloadsf512_maskz,\n\t__builtin_ia32_expandloadsi512_mask,\n\t__builtin_ia32_expandloadsi512_maskz,\n\t__builtin_ia32_expandloaddf512_mask,\n\t__builtin_ia32_expandloaddf512_maskz,\n\t__builtin_ia32_expandloaddi512_mask,\n\t__builtin_ia32_expandloaddi512_maskz,\n\t__builtin_ia32_loaddqusi512_mask, __builtin_ia32_loaddqudi512_mask,\n\t__builtin_ia32_loadsd_mask, __builtin_ia32_loadss_mask,\n\t__builtin_ia32_loadupd512_mask, __builtin_ia32_loadups512_mask,\n\t__builtin_ia32_loadaps512_mask, __builtin_ia32_movdqa32load512_mask,\n\t__builtin_ia32_loadapd512_mask, __builtin_ia32_movdqa64load512_mask,\n\t__builtin_ia32_movntps512, __builtin_ia32_movntpd512,\n\t__builtin_ia32_movntdq512, __builtin_ia32_storedqusi512_mask,\n\t__builtin_ia32_storedqudi512_mask, __builtin_ia32_storesd_mask,\n\t__builtin_ia32_storess_mask, __builtin_ia32_storeupd512_mask,\n\t__builtin_ia32_storeups512_mask, __builtin_ia32_storeaps512_mask,\n\t__builtin_ia32_movdqa32store512_mask, __builtin_ia32_storeapd512_mask,\n\t__builtin_ia32_movdqa64store512_mask, __builtin_ia32_alignd512_mask,\n\t__builtin_ia32_alignq512_mask, __builtin_ia32_blendmd_512_mask,\n\t__builtin_ia32_blendmpd_512_mask, __builtin_ia32_blendmps_512_mask,\n\t__builtin_ia32_blendmq_512_mask, __builtin_ia32_broadcastf32x4_512,\n\t__builtin_ia32_broadcastf64x4_512, __builtin_ia32_broadcasti32x4_512,\n\t__builtin_ia32_broadcasti64x4_512, __builtin_ia32_broadcastsd512,\n\t__builtin_ia32_broadcastss512, __builtin_ia32_cmpd512_mask,\n\t__builtin_ia32_cmpq512_mask, __builtin_ia32_compressdf512_mask,\n\t__builtin_ia32_compresssf512_mask, __builtin_ia32_cvtdq2pd512_mask,\n\t__builtin_ia32_vcvtps2ph512_mask, __builtin_ia32_cvtudq2pd512_mask,\n\t__builtin_ia32_cvtusi2sd32, __builtin_ia32_expanddf512_mask,\n\t__builtin_ia32_expanddf512_maskz, __builtin_ia32_expandsf512_mask,\n\t__builtin_ia32_expandsf512_maskz, __builtin_ia32_extractf32x4_mask,\n\t__builtin_ia32_extractf64x4_mask, __builtin_ia32_extracti32x4_mask,\n\t__builtin_ia32_extracti64x4_mask, __builtin_ia32_insertf32x4_mask,\n\t__builtin_ia32_insertf64x4_mask, __builtin_ia32_inserti32x4_mask,\n\t__builtin_ia32_inserti64x4_mask, __builtin_ia32_movapd512_mask,\n\t__builtin_ia32_movaps512_mask, __builtin_ia32_movddup512_mask,\n\t__builtin_ia32_movdqa32_512_mask, __builtin_ia32_movdqa64_512_mask,\n\t__builtin_ia32_movesd_mask, __builtin_ia32_movess_mask,\n\t__builtin_ia32_movshdup512_mask, __builtin_ia32_movsldup512_mask,\n\t__builtin_ia32_pabsd512_mask, __builtin_ia32_pabsq512_mask,\n\t__builtin_ia32_paddd512_mask, __builtin_ia32_paddq512_mask,\n\t__builtin_ia32_pandd512_mask, __builtin_ia32_pandnd512_mask,\n\t__builtin_ia32_pandnq512_mask, __builtin_ia32_pandq512_mask,\n\t__builtin_ia32_pbroadcastd512, __builtin_ia32_pbroadcastd512_gpr_mask,\n\t__builtin_ia32_broadcastmb512, __builtin_ia32_broadcastmw512,\n\t__builtin_ia32_pbroadcastq512, __builtin_ia32_pbroadcastq512_gpr_mask,\n\t__builtin_ia32_pbroadcastq512_mem_mask,\n\t__builtin_ia32_pcmpeqd512_mask, __builtin_ia32_pcmpeqq512_mask,\n\t__builtin_ia32_pcmpgtd512_mask, __builtin_ia32_pcmpgtq512_mask,\n\t__builtin_ia32_compresssi512_mask, __builtin_ia32_compressdi512_mask,\n\t__builtin_ia32_expandsi512_mask, __builtin_ia32_expandsi512_maskz,\n\t__builtin_ia32_expanddi512_mask, __builtin_ia32_expanddi512_maskz,\n\t__builtin_ia32_pmaxsd512_mask, __builtin_ia32_pmaxsq512_mask,\n\t__builtin_ia32_pmaxud512_mask, __builtin_ia32_pmaxuq512_mask,\n\t__builtin_ia32_pminsd512_mask, __builtin_ia32_pminsq512_mask,\n\t__builtin_ia32_pminud512_mask, __builtin_ia32_pminuq512_mask,\n\t__builtin_ia32_pmovdb512_mask, __builtin_ia32_pmovdw512_mask,\n\t__builtin_ia32_pmovqb512_mask, __builtin_ia32_pmovqd512_mask,\n\t__builtin_ia32_pmovqw512_mask, __builtin_ia32_pmovsdb512_mask,\n\t__builtin_ia32_pmovsdw512_mask, __builtin_ia32_pmovsqb512_mask,\n\t__builtin_ia32_pmovsqd512_mask, __builtin_ia32_pmovsqw512_mask,\n\t__builtin_ia32_pmovsxbd512_mask, __builtin_ia32_pmovsxbq512_mask,\n\t__builtin_ia32_pmovsxdq512_mask, __builtin_ia32_pmovsxwd512_mask,\n\t__builtin_ia32_pmovsxwq512_mask, __builtin_ia32_pmovusdb512_mask,\n\t__builtin_ia32_pmovusdw512_mask, __builtin_ia32_pmovusqb512_mask,\n\t__builtin_ia32_pmovusqd512_mask, __builtin_ia32_pmovusqw512_mask,\n\t__builtin_ia32_pmovzxbd512_mask, __builtin_ia32_pmovzxbq512_mask,\n\t__builtin_ia32_pmovzxdq512_mask, __builtin_ia32_pmovzxwd512_mask,\n\t__builtin_ia32_pmovzxwq512_mask, __builtin_ia32_pmuldq512_mask,\n\t__builtin_ia32_pmulld512_mask, __builtin_ia32_pmuludq512_mask,\n\t__builtin_ia32_pord512_mask, __builtin_ia32_porq512_mask,\n\t__builtin_ia32_prold512_mask, __builtin_ia32_prolq512_mask,\n\t__builtin_ia32_prolvd512_mask, __builtin_ia32_prolvq512_mask,\n\t__builtin_ia32_prord512_mask, __builtin_ia32_prorq512_mask,\n\t__builtin_ia32_prorvd512_mask, __builtin_ia32_prorvq512_mask,\n\t__builtin_ia32_pshufd512_mask, __builtin_ia32_pslld512_mask,\n\t__builtin_ia32_pslldi512_mask, __builtin_ia32_psllq512_mask,\n\t__builtin_ia32_psllqi512_mask, __builtin_ia32_psllv16si_mask,\n\t__builtin_ia32_psllv8di_mask, __builtin_ia32_psrad512_mask,\n\t__builtin_ia32_psradi512_mask, __builtin_ia32_psraq512_mask,\n\t__builtin_ia32_psraqi512_mask, __builtin_ia32_psrav16si_mask,\n\t__builtin_ia32_psrav8di_mask, __builtin_ia32_psrld512_mask,\n\t__builtin_ia32_psrldi512_mask, __builtin_ia32_psrlq512_mask,\n\t__builtin_ia32_psrlqi512_mask, __builtin_ia32_psrlv16si_mask,\n\t__builtin_ia32_psrlv8di_mask, __builtin_ia32_psubd512_mask,\n\t__builtin_ia32_psubq512_mask, __builtin_ia32_ptestmd512,\n\t__builtin_ia32_ptestmq512, __builtin_ia32_ptestnmd512,\n\t__builtin_ia32_ptestnmq512, __builtin_ia32_punpckhdq512_mask,\n\t__builtin_ia32_punpckhqdq512_mask, __builtin_ia32_punpckldq512_mask,\n\t__builtin_ia32_punpcklqdq512_mask, __builtin_ia32_pxord512_mask,\n\t__builtin_ia32_pxorq512_mask, __builtin_ia32_rcp14pd512_mask,\n\t__builtin_ia32_rcp14ps512_mask, __builtin_ia32_rcp14sd_mask,\n\t__builtin_ia32_rcp14ss_mask, __builtin_ia32_rsqrt14pd512_mask,\n\t__builtin_ia32_rsqrt14ps512_mask, __builtin_ia32_rsqrt14sd_mask,\n\t__builtin_ia32_rsqrt14ss_mask, __builtin_ia32_shufpd512_mask,\n\t__builtin_ia32_shufps512_mask, __builtin_ia32_shuf_f32x4_mask,\n\t__builtin_ia32_shuf_f64x2_mask, __builtin_ia32_shuf_i32x4_mask,\n\t__builtin_ia32_shuf_i64x2_mask, __builtin_ia32_ucmpd512_mask,\n\t__builtin_ia32_ucmpq512_mask, __builtin_ia32_unpckhpd512_mask,\n\t__builtin_ia32_unpckhps512_mask, __builtin_ia32_unpcklpd512_mask,\n\t__builtin_ia32_unpcklps512_mask, __builtin_ia32_vplzcntd_512_mask,\n\t__builtin_ia32_vplzcntq_512_mask,\n\t__builtin_ia32_vpconflictsi_512_mask,\n\t__builtin_ia32_vpconflictdi_512_mask, __builtin_ia32_permdf512_mask,\n\t__builtin_ia32_permdi512_mask, __builtin_ia32_vpermi2vard512_mask,\n\t__builtin_ia32_vpermi2varpd512_mask,\n\t__builtin_ia32_vpermi2varps512_mask,\n\t__builtin_ia32_vpermi2varq512_mask, __builtin_ia32_vpermilpd512_mask,\n\t__builtin_ia32_vpermilps512_mask, __builtin_ia32_vpermilvarpd512_mask,\n\t__builtin_ia32_vpermilvarps512_mask,\n\t__builtin_ia32_vpermt2vard512_mask,\n\t__builtin_ia32_vpermt2vard512_maskz,\n\t__builtin_ia32_vpermt2varpd512_mask,\n\t__builtin_ia32_vpermt2varpd512_maskz,\n\t__builtin_ia32_vpermt2varps512_mask,\n\t__builtin_ia32_vpermt2varps512_maskz,\n\t__builtin_ia32_vpermt2varq512_mask,\n\t__builtin_ia32_vpermt2varq512_maskz, __builtin_ia32_permvardf512_mask,\n\t__builtin_ia32_permvardi512_mask, __builtin_ia32_permvarsf512_mask,\n\t__builtin_ia32_permvarsi512_mask, __builtin_ia32_pternlogd512_mask,\n\t__builtin_ia32_pternlogd512_maskz, __builtin_ia32_pternlogq512_mask,\n\t__builtin_ia32_pternlogq512_maskz, __builtin_ia32_copysignps512,\n\t__builtin_ia32_copysignpd512, __builtin_ia32_sqrtpd512,\n\t__builtin_ia32_sqrtps512, __builtin_ia32_exp2ps,\n\t__builtin_ia32_roundpd_az_vec_pack_sfix512,\n\t__builtin_ia32_floorpd_vec_pack_sfix512,\n\t__builtin_ia32_ceilpd_vec_pack_sfix512, __builtin_ia32_kandhi,\n\t__builtin_ia32_kandnhi, __builtin_ia32_knothi, __builtin_ia32_korhi,\n\t__builtin_ia32_kortestchi, __builtin_ia32_kortestzhi,\n\t__builtin_ia32_kunpckhi, __builtin_ia32_kxnorhi,\n\t__builtin_ia32_kxorhi, __builtin_ia32_addpd512_mask,\n\t__builtin_ia32_addps512_mask, __builtin_ia32_addsd_mask,\n\t__builtin_ia32_addss_mask, __builtin_ia32_cmppd512_mask,\n\t__builtin_ia32_cmpps512_mask, __builtin_ia32_cmpsd_mask,\n\t__builtin_ia32_cmpss_mask, __builtin_ia32_vcomisd,\n\t__builtin_ia32_vcomiss, __builtin_ia32_cvtdq2ps512_mask,\n\t__builtin_ia32_cvtpd2dq512_mask, __builtin_ia32_cvtpd2ps512_mask,\n\t__builtin_ia32_cvtpd2udq512_mask, __builtin_ia32_vcvtph2ps512_mask,\n\t__builtin_ia32_cvtps2dq512_mask, __builtin_ia32_cvtps2pd512_mask,\n\t__builtin_ia32_cvtps2udq512_mask, __builtin_ia32_cvtsd2ss_mask,\n\t__builtin_ia32_cvtsi2sd64, __builtin_ia32_cvtsi2ss32,\n\t__builtin_ia32_cvtsi2ss64, __builtin_ia32_cvtss2sd_mask,\n\t__builtin_ia32_cvttpd2dq512_mask, __builtin_ia32_cvttpd2udq512_mask,\n\t__builtin_ia32_cvttps2dq512_mask, __builtin_ia32_cvttps2udq512_mask,\n\t__builtin_ia32_cvtudq2ps512_mask, __builtin_ia32_cvtusi2sd64,\n\t__builtin_ia32_cvtusi2ss32, __builtin_ia32_cvtusi2ss64,\n\t__builtin_ia32_divpd512_mask, __builtin_ia32_divps512_mask,\n\t__builtin_ia32_divsd_mask, __builtin_ia32_divss_mask,\n\t__builtin_ia32_fixupimmpd512_mask, __builtin_ia32_fixupimmpd512_maskz,\n\t__builtin_ia32_fixupimmps512_mask, __builtin_ia32_fixupimmps512_maskz,\n\t__builtin_ia32_fixupimmsd_mask, __builtin_ia32_fixupimmsd_maskz,\n\t__builtin_ia32_fixupimmss_mask, __builtin_ia32_fixupimmss_maskz,\n\t__builtin_ia32_getexppd512_mask, __builtin_ia32_getexpps512_mask,\n\t__builtin_ia32_getexpsd128_mask, __builtin_ia32_getexpss128_mask,\n\t__builtin_ia32_getmantpd512_mask, __builtin_ia32_getmantps512_mask,\n\t__builtin_ia32_getmantsd_mask, __builtin_ia32_getmantss_mask,\n\t__builtin_ia32_maxpd512_mask, __builtin_ia32_maxps512_mask,\n\t__builtin_ia32_maxsd_mask, __builtin_ia32_maxss_mask,\n\t__builtin_ia32_minpd512_mask, __builtin_ia32_minps512_mask,\n\t__builtin_ia32_minsd_mask, __builtin_ia32_minss_mask,\n\t__builtin_ia32_mulpd512_mask, __builtin_ia32_mulps512_mask,\n\t__builtin_ia32_mulsd_mask, __builtin_ia32_mulss_mask,\n\t__builtin_ia32_rndscalepd_mask, __builtin_ia32_rndscaleps_mask,\n\t__builtin_ia32_rndscalesd_mask, __builtin_ia32_rndscaless_mask,\n\t__builtin_ia32_scalefpd512_mask, __builtin_ia32_scalefps512_mask,\n\t__builtin_ia32_scalefsd_mask, __builtin_ia32_scalefss_mask,\n\t__builtin_ia32_sqrtpd512_mask, __builtin_ia32_sqrtps512_mask,\n\t__builtin_ia32_sqrtsd_mask, __builtin_ia32_sqrtss_mask,\n\t__builtin_ia32_subpd512_mask, __builtin_ia32_subps512_mask,\n\t__builtin_ia32_subsd_mask, __builtin_ia32_subss_mask,\n\t__builtin_ia32_vcvtsd2si32, __builtin_ia32_vcvtsd2si64,\n\t__builtin_ia32_vcvtsd2usi32, __builtin_ia32_vcvtsd2usi64,\n\t__builtin_ia32_vcvtss2si32, __builtin_ia32_vcvtss2si64,\n\t__builtin_ia32_vcvtss2usi32, __builtin_ia32_vcvtss2usi64,\n\t__builtin_ia32_vcvttsd2si32, __builtin_ia32_vcvttsd2si64,\n\t__builtin_ia32_vcvttsd2usi32, __builtin_ia32_vcvttsd2usi64,\n\t__builtin_ia32_vcvttss2si32, __builtin_ia32_vcvttss2si64,\n\t__builtin_ia32_vcvttss2usi32, __builtin_ia32_vcvttss2usi64,\n\t__builtin_ia32_vfmaddpd512_mask, __builtin_ia32_vfmaddpd512_mask3,\n\t__builtin_ia32_vfmaddpd512_maskz, __builtin_ia32_vfmaddps512_mask,\n\t__builtin_ia32_vfmaddps512_mask3, __builtin_ia32_vfmaddps512_maskz,\n\t__builtin_ia32_vfmaddsd3_mask, __builtin_ia32_vfmaddsd3_mask3,\n\t__builtin_ia32_vfmaddsd3_maskz, __builtin_ia32_vfmaddss3_mask,\n\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n\t__builtin_ia32_vfmaddsubpd512_mask,\n\t__builtin_ia32_vfmaddsubpd512_mask3,\n\t__builtin_ia32_vfmaddsubpd512_maskz,\n\t__builtin_ia32_vfmaddsubps512_mask,\n\t__builtin_ia32_vfmaddsubps512_mask3,\n\t__builtin_ia32_vfmaddsubps512_maskz,\n\t__builtin_ia32_vfmsubaddpd512_mask3,\n\t__builtin_ia32_vfmsubaddps512_mask3, __builtin_ia32_vfmsubpd512_mask3,\n\t__builtin_ia32_vfmsubps512_mask3, __builtin_ia32_vfmsubsd3_mask3,\n\t__builtin_ia32_vfmsubss3_mask3, __builtin_ia32_vfnmaddpd512_mask,\n\t__builtin_ia32_vfnmaddps512_mask, __builtin_ia32_vfnmsubpd512_mask,\n\t__builtin_ia32_vfnmsubpd512_mask3, __builtin_ia32_vfnmsubps512_mask,\n\t__builtin_ia32_vfnmsubps512_mask3, __builtin_ia32_exp2pd_mask,\n\t__builtin_ia32_exp2ps_mask, __builtin_ia32_rcp28pd_mask,\n\t__builtin_ia32_rcp28ps_mask, __builtin_ia32_rsqrt28pd_mask,\n\t__builtin_ia32_rsqrt28ps_mask, __builtin_ia32_gathersiv16sf,\n\t__builtin_ia32_gathersiv8df, __builtin_ia32_gatherdiv16sf,\n\t__builtin_ia32_gatherdiv8df, __builtin_ia32_gathersiv16si,\n\t__builtin_ia32_gathersiv8di, __builtin_ia32_gatherdiv16si,\n\t__builtin_ia32_gatherdiv8di, __builtin_ia32_gatheraltsiv8df ,\n\t__builtin_ia32_gatheraltdiv8sf , __builtin_ia32_gatheraltsiv8di ,\n\t__builtin_ia32_gatheraltdiv8si , __builtin_ia32_scattersiv16sf,\n\t__builtin_ia32_scattersiv8df, __builtin_ia32_scatterdiv16sf,\n\t__builtin_ia32_scatterdiv8df, __builtin_ia32_scattersiv16si,\n\t__builtin_ia32_scattersiv8di, __builtin_ia32_scatterdiv16si,\n\t__builtin_ia32_scatterdiv8di, __builtin_ia32_gatherpfdps,\n\t__builtin_ia32_gatherpfqps, __builtin_ia32_scatterpfdps,\n\t__builtin_ia32_scatterpfqps.\n\t(ix86_init_mmx_sse_builtins): Handle builtins with AVX512 embeded\n\trounding, builtins for AVX512 gathers/scatters.\n\t(ix86_expand_args_builtin): Handle new functions types, add warnings\n\tfor masked builtins.\n\t(ix86_erase_embedded_rounding): Handle patterns with embedded rounding.\n\t(ix86_expand_sse_comi_round): Ditto.\n\t(ix86_expand_round_builtin): Ditto.\n\t(ix86_expand_builtin): Handle AVX512's gathers/scatters and kortest{z}.\n\tCall ix86_expand_round_builtin.\n\t* config/i386/immintrin.h: Add avx512fintrin.h, avx512erintrin.h,\n\tavx512pfintrin.h, avx512cdintrin.h.\n\ntestsuite/\n\n\t* gcc.target/i386/avx-1.c: Extend to AVX-512.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r206261", "tree": {"sha": "6ef1639ca51c0d908c2b3288e865ce36c647774a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ef1639ca51c0d908c2b3288e865ce36c647774a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/756c585702ca72cc01388f51a960777a3d13d486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/756c585702ca72cc01388f51a960777a3d13d486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/756c585702ca72cc01388f51a960777a3d13d486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/756c585702ca72cc01388f51a960777a3d13d486/comments", "author": null, "committer": null, "parents": [{"sha": "d3c2fee09607e7d70cc7e69822638fab2bda6c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c2fee09607e7d70cc7e69822638fab2bda6c7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3c2fee09607e7d70cc7e69822638fab2bda6c7b"}], "stats": {"total": 16208, "additions": 16150, "deletions": 58}, "files": [{"sha": "be9476cae0d7a121d3690c322cfeeb04ec7a93a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 549, "deletions": 0, "changes": 549, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=756c585702ca72cc01388f51a960777a3d13d486", "patch": "@@ -1,3 +1,552 @@\n+2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config.gcc (extra_headers): Add avx512fintrin.h, avx512cdintrin.h,\n+\tavx512erintrin.h, avx512pfintrin.h.\n+\t* config/i386/avx512cdintrin.h: New file.\n+\t* config/i386/avx512erintrin.h: New file.\n+\t* config/i386/avx512fintrin.h: New file.\n+\t* config/i386/avx512pfintrin.h: New file.\n+\t* config/i386/i386-builtin-types.def: Add V16UHI, V32SF, V16SF, V8DF,\n+\tV8DI, V16SI, V64QI, PV8DF, PV8DI, PV16SI, PV16SF, PCV8DF, PCV16SF,\n+\tPCV8DI, PCV16SI, V16QI_FTYPE_V16SI, V8DF_FTYPE_V8SI, V8DF_FTYPE_V8DF,\n+\tV8HI_FTYPE_V8DI, V16SF_FTYPE_V16SF, V8SI_FTYPE_V8DI, V8SF_FTYPE_V8DF,\n+\tV8SF_FTYPE_V8DF_V8SF_QI, V16HI_FTYPE_V16SI, V16SF_FTYPE_FLOAT,\n+\tV16SI_FTYPE_INT, V8DF_FTYPE_DOUBLE, V8DI_FTYPE_INT64,\n+\tV16SF_FTYPE_V4SF, V8DF_FTYPE_V4DF, V8DI_FTYPE_V4DI, V16QI_FTYPE_V8DI,\n+\tUINT_FTYPE_V4SF, UINT64_FTYPE_V4SF, UINT_FTYPE_V2DF,\n+\tUINT64_FTYPE_V2DF, V16SI_FTYPE_V16SI, V16SI_FTYPE_V16SI_V16SI_HI,\n+\tV8DI_FTYPE_V8DI, V8DI_FTYPE_V8DI_V8DI_QI, V16SI_FTYPE_PV4SI,\n+\tV16SF_FTYPE_PV4SF, V8DI_FTYPE_PV4DI, V8DF_FTYPE_PV4DF,\n+\tV8UHI_FTYPE_V8UHI, V8USI_FTYPE_V8USI, V2DF_FTYPE_V2DF_UINT,\n+\tV2DF_FTYPE_V2DF_UINT64, V4DF_FTYPE_V8DF_INT,\n+\tV4DF_FTYPE_V8DF_INT_V4DF_QI, V8DF_FTYPE_V8DF_V8DI,\n+\tV4SF_FTYPE_V4SF_UINT, V4SF_FTYPE_V4SF_UINT64,\n+\tINT_FTYPE_V4SF_V4SF_INT_INT, INT_FTYPE_V2DF_V2DF_INT_INT,\n+\tV16SF_FTYPE_V16SF_INT, V4SF_FTYPE_V16SF_INT,\n+\tV4SF_FTYPE_V16SF_INT_V4SF_QI, V16SF_FTYPE_V16SF_V16SF,\n+\tV16SF_FTYPE_V16SF_V16SI, V8DF_FTYPE_V8DF_V4DF_INT_V8DF_QI,\n+\tV8DF_FTYPE_V8DF_V8DF_INT_V8DF_QI, V8DF_FTYPE_V8DF_INT_V8DF_QI,\n+\tV8DF_FTYPE_V8DF_V8DF_V8DI_INT_QI_INT, V8DF_FTYPE_V8DF_V8DF,\n+\tV16SF_FTYPE_V16SF_V16SF_INT, V16SF_FTYPE_V16SF_V16SF_INT_V16SF_HI,\n+\tV16SF_FTYPE_V16SF_INT_V16SF_HI, V16SI_FTYPE_V16SI_V4SI_INT_V16SI_HI,\n+\tV16SF_FTYPE_V16SF_V16SF_V16SI_INT,\n+\tV16SF_FTYPE_V16SF_V16SF_V16SI_INT_HI,\n+\tV16SF_FTYPE_V16SF_V16SF_V16SI_INT_HI_INT,\n+\tV4SF_FTYPE_V4SF_V4SF_V4SI_INT_QI,\n+\tV4SF_FTYPE_V4SF_V4SF_V4SI_INT_QI_INT,\n+\tV2DF_FTYPE_V2DF_V2DF_V2DI_INT_QI,\n+\tV2DF_FTYPE_V2DF_V2DF_V2DI_INT_QI_INT, V16SF_FTYPE_V16SF_V4SF_INT,\n+\tV16SF_FTYPE_V16SF_V4SF_INT_V16SF_HI, V16HI_FTYPE_V16SF_INT,\n+\tV16HI_FTYPE_V16SF_INT_V16HI_HI, V16HI_FTYPE_V16HI_V16HI_INT_V16HI_HI,\n+\tV16SI_FTYPE_V16SI_V4SI, V16SI_FTYPE_V16SI_V4SI_INT,\n+\tV4SI_FTYPE_V16SI_INT, V4SI_FTYPE_V16SI_INT_V4SI_QI,\n+\tV16SI_FTYPE_V16SI_V16SI, V16SI_FTYPE_V16SI_V16SI_INT_V16SI_HI,\n+\tV16SI_FTYPE_V16SI_SI, V16SI_FTYPE_V16SI_INT,\n+\tV16SI_FTYPE_V16SI_V4SI_V16SI_HI, V16SI_FTYPE_V16SI_INT_V16SI_HI,\n+\tV8DI_FTYPE_V8DI_V8DI, V16SI_FTYPE_V8DF_V8DF,\n+\tV8DI_FTYPE_V8DI_V8DI_INT_V8DI_QI, V8DI_FTYPE_V8DI_V4DI_INT_V8DI_QI,\n+\tV8DI_FTYPE_V8DI_V2DI, V4DI_FTYPE_V8DI_INT,\n+\tV4DI_FTYPE_V8DI_INT_V4DI_QI, V8DI_FTYPE_V8DI_V2DI_V8DI_QI,\n+\tV8DI_FTYPE_V8DI_INT_V8DI_QI, VOID_FTYPE_PDOUBLE_V8DF,\n+\tVOID_FTYPE_PFLOAT_V16SF, VOID_FTYPE_PV8DI_V8DI, HI_FTYPE_HI,\n+\tHI_FTYPE_HI_HI, HI_FTYPE_HI_INT, QI_FTYPE_V8DI_V8DI,\n+\tQI_FTYPE_V8DI_V8DI_QI, HI_FTYPE_V16SI_V16SI, HI_FTYPE_V16SI_V16SI_HI,\n+\tQI_FTYPE_V8DI_V8DI_INT, QI_FTYPE_V8DI_V8DI_INT_QI,\n+\tHI_FTYPE_V16SI_V16SI_INT, HI_FTYPE_V16SI_V16SI_INT ,HI,\n+\tQI_FTYPE_V8DF_V8DF_INT, QI_FTYPE_V8DF_V8DF_INT_QI,\n+\tQI_FTYPE_V8DF_V8DF_INT_QI_INT, HI_FTYPE_V16SF_V16SF_INT,\n+\tHI_FTYPE_V16SF_V16SF_INT_HI, HI_FTYPE_V16SF_V16SF_INT_HI_INT,\n+\tQI_FTYPE_V2DF_V2DF_INT, QI_FTYPE_V2DF_V2DF_INT_QI,\n+\tQI_FTYPE_V2DF_V2DF_INT_QI_INT, QI_FTYPE_V4SF_V4SF_INT,\n+\tQI_FTYPE_V4SF_V4SF_INT_QI, QI_FTYPE_V4SF_V4SF_INT_QI_INT,\n+\tV16SI_FTYPE_HI, V8DI_FTYPE_QI, V8DF_FTYPE_V8DF_V8DF_V8DF,\n+\tV16SF_FTYPE_V16SF_V16SF_V16SF, V8DF_FTYPE_V8DF_V8DF_QI,\n+\tV8DF_FTYPE_V8SF_V8DF_QI, V8DF_FTYPE_V8SI_V8DF_QI,\n+\tV8DI_FTYPE_V8SI_V8DI_QI, V8DI_FTYPE_V8HI_V8DI_QI,\n+\tV8DI_FTYPE_V16QI_V8DI_QI, V8DI_FTYPE_V8DI_V8DI_V8DI_QI,\n+\tV8DF_FTYPE_V8DI_V8DF_V8DF, V8DF_FTYPE_V8DI_V8DF_V8DF_QI,\n+\tV8DF_FTYPE_V8DF_V8DI_V8DF_QI, V8DF_FTYPE_V8DF_V8DF_V8DF_QI,\n+\tV16SI_FTYPE_V16SI_V16SI_V16SI_HI, V2DF_FTYPE_V2DF_V2DF_V2DF_QI,\n+\tV2DF_FTYPE_V2DF_V4SF_V2DF_QI, V16SF_FTYPE_V16SF_V16SF_HI,\n+\tV16SF_FTYPE_V16SI_V16SF_HI, V16SF_FTYPE_V16SF_V16SF_V16SF_HI,\n+\tV16SF_FTYPE_V16SI_V16SF_V16SF, V16SF_FTYPE_V16SI_V16SF_V16SF_HI,\n+\tV16SF_FTYPE_V16SF_V16SI_V16SF_HI, V4SF_FTYPE_V4SF_V2DF_V4SF_QI,\n+\tV4SF_FTYPE_V4SF_V4SF_V4SF_QI, V16SF_FTYPE_V4SF_V16SF_HI,\n+\tV8DF_FTYPE_V4DF_V8DF_QI, V8DF_FTYPE_V2DF_V8DF_QI,\n+\tV16SI_FTYPE_V4SI_V16SI_HI, V16SI_FTYPE_SI_V16SI_HI,\n+\tV16SI_FTYPE_V16HI_V16SI_HI, V16SI_FTYPE_V16QI_V16SI_HI,\n+\tV8SI_FTYPE_V8DF_V8SI_QI, V8DI_FTYPE_V4DI_V8DI_QI,\n+\tV8DI_FTYPE_V2DI_V8DI_QI, V8DI_FTYPE_DI_V8DI_QI,\n+\tV16SF_FTYPE_PCV16SF_V16SF_HI, V8DF_FTYPE_PCV8DF_V8DF_QI,\n+\tV16SI_FTYPE_PCV16SI_V16SI_HI, V8DI_FTYPE_PCV8DI_V8DI_QI,\n+\tV2DF_FTYPE_PCDOUBLE_V2DF_QI, V4SF_FTYPE_PCFLOAT_V4SF_QI,\n+\tV16QI_FTYPE_V16SI_V16QI_HI, V16HI_FTYPE_V16SI_V16HI_HI,\n+\tV8SI_FTYPE_V8DI_V8SI_QI, V8HI_FTYPE_V8DI_V8HI_QI,\n+\tV16QI_FTYPE_V8DI_V16QI_QI, VOID_FTYPE_PV8DF_V8DF_QI,\n+\tVOID_FTYPE_PV16SF_V16SF_HI, VOID_FTYPE_PV8DI_V8DI_QI,\n+\tVOID_FTYPE_PV16SI_V16SI_HI, VOID_FTYPE_PDOUBLE_V2DF_QI,\n+\tVOID_FTYPE_PFLOAT_V4SF_QI, V16SI_FTYPE_V16SF_V16SI_HI,\n+\tV8DI_FTYPE_V8DI_V8DI_V8DI_INT_QI,\n+\tV16SI_FTYPE_V16SI_V16SI_V16SI_INT_HI, V8DI_FTYPE_V8DI_V8DI_V8DI,\n+\tV16SI_FTYPE_V16SI_V16SI_V16SI, V8DF_FTYPE_V8DF_V8DI_V8DF,\n+\tV16SF_FTYPE_V16SF_V16SI_V16SF, V4SF_FTYPE_V4SF_V4SF_INT_V4SF_QI,\n+\tV2DF_FTYPE_V2DF_V2DF_INT_V2DF_QI, V8DI_FTYPE_V16SI_V16SI_V8DI_QI,\n+\tUINT64_FTYPE_V2DF_INT, UINT64_FTYPE_V4SF_INT, UINT_FTYPE_V2DF_INT,\n+\tUINT_FTYPE_V4SF_INT, INT64_FTYPE_V2DF_INT, INT64_FTYPE_V4SF_INT,\n+\tINT_FTYPE_V2DF_INT, INT_FTYPE_V4SF_INT, V2DF_FTYPE_V2DF_UINT64_INT,\n+\tV4SF_FTYPE_V4SF_UINT64_INT, V4SF_FTYPE_V4SF_UINT_INT,\n+\tV2DF_FTYPE_V2DF_INT64_INT, V4SF_FTYPE_V4SF_INT64_INT,\n+\tV4SF_FTYPE_V4SF_INT_INT, V16SI_FTYPE_V16SF_V16SI_HI_INT,\n+\tV16SF_FTYPE_V16SI_V16SF_HI_INT, V16SF_FTYPE_V16SF_V16SF_HI_INT,\n+\tV16SF_FTYPE_V16HI_V16SF_HI_INT, V8SI_FTYPE_V8DF_V8SI_QI_INT,\n+\tV8SF_FTYPE_V8DF_V8SF_QI_INT, V8DF_FTYPE_V8DF_V8DF_QI_INT,\n+\tV8DF_FTYPE_V8SF_V8DF_QI_INT, V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT,\n+\tV8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT, V4SF_FTYPE_V4SF_V4SF_V4SF_QI_INT,\n+\tV4SF_FTYPE_V4SF_V2DF_V4SF_QI_INT, V2DF_FTYPE_V2DF_V2DF_V2DF_QI_INT,\n+\tV2DF_FTYPE_V2DF_V4SF_V2DF_QI_INT, V2DF_FTYPE_V2DF_V2DF_V2DF_INT,\n+\tV16SF_FTYPE_V16SF_INT_V16SF_HI_INT, V8DF_FTYPE_V8DF_INT_V8DF_QI_INT,\n+\tV4SF_FTYPE_V4SF_V4SF_INT_V4SF_QI_INT,\n+\tV2DF_FTYPE_V2DF_V2DF_INT_V2DF_QI_INT, V8DI_FTYPE_V8DI_SI_V8DI_V8DI,\n+\tV16SF_FTYPE_V16SF_PCFLOAT_V16SI_HI_INT,\n+\tV16SF_FTYPE_V16SF_PCFLOAT_V8DI_HI_INT,\n+\tV8DF_FTYPE_V8DF_PCDOUBLE_V8SI_QI_INT,\n+\tV8DF_FTYPE_V8DF_PCDOUBLE_V16SI_QI_INT,\n+\tV8SF_FTYPE_V8SF_PCFLOAT_V8DI_QI_INT,\n+\tV8DF_FTYPE_V8DF_PCDOUBLE_V8DI_QI_INT,\n+\tV16SI_FTYPE_V16SI_PCINT_V16SI_HI_INT,\n+\tV16SI_FTYPE_V16SI_PCINT_V8DI_HI_INT,\n+\tV8DI_FTYPE_V8DI_PCINT64_V8SI_QI_INT,\n+\tV8DI_FTYPE_V8DI_PCINT64_V16SI_QI_INT,\n+\tV8SI_FTYPE_V8SI_PCINT_V8DI_QI_INT,\n+\tV8DI_FTYPE_V8DI_PCINT64_V8DI_QI_INT,\n+\tVOID_FTYPE_PFLOAT_HI_V16SI_V16SF_INT,\n+\tVOID_FTYPE_PDOUBLE_QI_V8SI_V8DF_INT,\n+\tVOID_FTYPE_PFLOAT_QI_V8DI_V8SF_INT,\n+\tVOID_FTYPE_PDOUBLE_QI_V8DI_V8DF_INT,\n+\tVOID_FTYPE_PINT_HI_V16SI_V16SI_INT,\n+\tVOID_FTYPE_PLONGLONG_QI_V8SI_V8DI_INT,\n+\tVOID_FTYPE_PINT_QI_V8DI_V8SI_INT,\n+\tVOID_FTYPE_PLONGLONG_QI_V8DI_V8DI_INT,\n+\tVOID_FTYPE_HI_V16SI_PCINT_INT_INT, VOID_FTYPE_QI_V8DI_PCINT_INT_INT.\n+\t(ALIAS): Add DEF_FUNCTION_TYPE_ALIAS (V16SI_FTYPE_V8DF_V8DF, ROUND).\n+\t* config/i386/i386.c (enum ix86_builtins): Add IX86_BUILTIN_ADDPD512,\n+\tIX86_BUILTIN_ADDPS512, IX86_BUILTIN_ADDSD_MASK,\n+\tIX86_BUILTIN_ADDSS_MASK, IX86_BUILTIN_ALIGND512,\n+\tIX86_BUILTIN_ALIGNQ512, IX86_BUILTIN_BLENDMD512,\n+\tIX86_BUILTIN_BLENDMPD512, IX86_BUILTIN_BLENDMPS512,\n+\tIX86_BUILTIN_BLENDMQ512, IX86_BUILTIN_BROADCASTF32X4_512,\n+\tIX86_BUILTIN_BROADCASTF64X4_512, IX86_BUILTIN_BROADCASTI32X4_512,\n+\tIX86_BUILTIN_BROADCASTI64X4_512, IX86_BUILTIN_BROADCASTSD512,\n+\tIX86_BUILTIN_BROADCASTSS512, IX86_BUILTIN_CMPD512,\n+\tIX86_BUILTIN_CMPPD512, IX86_BUILTIN_CMPPS512, IX86_BUILTIN_CMPQ512,\n+\tIX86_BUILTIN_CMPSD_MASK, IX86_BUILTIN_CMPSS_MASK, IX86_BUILTIN_COMIDF,\n+\tIX86_BUILTIN_COMISF, IX86_BUILTIN_COMPRESSPD512,\n+\tIX86_BUILTIN_COMPRESSPDSTORE512, IX86_BUILTIN_COMPRESSPS512,\n+\tIX86_BUILTIN_COMPRESSPSSTORE512, IX86_BUILTIN_CVTDQ2PD512,\n+\tIX86_BUILTIN_CVTDQ2PS512, IX86_BUILTIN_CVTPD2DQ512,\n+\tIX86_BUILTIN_CVTPD2PS512, IX86_BUILTIN_CVTPD2UDQ512,\n+\tIX86_BUILTIN_CVTPH2PS512, IX86_BUILTIN_CVTPS2DQ512,\n+\tIX86_BUILTIN_CVTPS2PD512, IX86_BUILTIN_CVTPS2PH512,\n+\tIX86_BUILTIN_CVTPS2UDQ512, IX86_BUILTIN_CVTSD2SS_MASK,\n+\tIX86_BUILTIN_CVTSI2SD64, IX86_BUILTIN_CVTSI2SS32,\n+\tIX86_BUILTIN_CVTSI2SS64, IX86_BUILTIN_CVTSS2SD_MASK,\n+\tIX86_BUILTIN_CVTTPD2DQ512, IX86_BUILTIN_CVTTPD2UDQ512,\n+\tIX86_BUILTIN_CVTTPS2DQ512, IX86_BUILTIN_CVTTPS2UDQ512,\n+\tIX86_BUILTIN_CVTUDQ2PD512, IX86_BUILTIN_CVTUDQ2PS512,\n+\tIX86_BUILTIN_CVTUSI2SD32, IX86_BUILTIN_CVTUSI2SD64,\n+\tIX86_BUILTIN_CVTUSI2SS32, IX86_BUILTIN_CVTUSI2SS64,\n+\tIX86_BUILTIN_DIVPD512, IX86_BUILTIN_DIVPS512, IX86_BUILTIN_DIVSD_MASK,\n+\tIX86_BUILTIN_DIVSS_MASK, IX86_BUILTIN_EXPANDPD512,\n+\tIX86_BUILTIN_EXPANDPD512Z, IX86_BUILTIN_EXPANDPDLOAD512,\n+\tIX86_BUILTIN_EXPANDPDLOAD512Z, IX86_BUILTIN_EXPANDPS512,\n+\tIX86_BUILTIN_EXPANDPS512Z, IX86_BUILTIN_EXPANDPSLOAD512,\n+\tIX86_BUILTIN_EXPANDPSLOAD512Z, IX86_BUILTIN_EXTRACTF32X4,\n+\tIX86_BUILTIN_EXTRACTF64X4, IX86_BUILTIN_EXTRACTI32X4,\n+\tIX86_BUILTIN_EXTRACTI64X4, IX86_BUILTIN_FIXUPIMMPD512_MASK,\n+\tIX86_BUILTIN_FIXUPIMMPD512_MASKZ, IX86_BUILTIN_FIXUPIMMPS512_MASK,\n+\tIX86_BUILTIN_FIXUPIMMPS512_MASKZ, IX86_BUILTIN_FIXUPIMMSD128_MASK,\n+\tIX86_BUILTIN_FIXUPIMMSD128_MASKZ, IX86_BUILTIN_FIXUPIMMSS128_MASK,\n+\tIX86_BUILTIN_FIXUPIMMSS128_MASKZ, IX86_BUILTIN_GETEXPPD512,\n+\tIX86_BUILTIN_GETEXPPS512, IX86_BUILTIN_GETEXPSD128,\n+\tIX86_BUILTIN_GETEXPSS128, IX86_BUILTIN_GETMANTPD512,\n+\tIX86_BUILTIN_GETMANTPS512, IX86_BUILTIN_GETMANTSD128,\n+\tIX86_BUILTIN_GETMANTSS128, IX86_BUILTIN_INSERTF32X4,\n+\tIX86_BUILTIN_INSERTF64X4, IX86_BUILTIN_INSERTI32X4,\n+\tIX86_BUILTIN_INSERTI64X4, IX86_BUILTIN_LOADAPD512,\n+\tIX86_BUILTIN_LOADAPS512, IX86_BUILTIN_LOADDQUDI512,\n+\tIX86_BUILTIN_LOADDQUSI512, IX86_BUILTIN_LOADSD, IX86_BUILTIN_LOADSS,\n+\tIX86_BUILTIN_LOADUPD512, IX86_BUILTIN_LOADUPS512,\n+\tIX86_BUILTIN_MAXPD512, IX86_BUILTIN_MAXPS512, IX86_BUILTIN_MAXSD_MASK,\n+\tIX86_BUILTIN_MAXSS_MASK, IX86_BUILTIN_MINPD512, IX86_BUILTIN_MINPS512,\n+\tIX86_BUILTIN_MINSD_MASK, IX86_BUILTIN_MINSS_MASK,\n+\tIX86_BUILTIN_MOVAPD512, IX86_BUILTIN_MOVAPS512,\n+\tIX86_BUILTIN_MOVDDUP512, IX86_BUILTIN_MOVDQA32LOAD512,\n+\tIX86_BUILTIN_MOVDQA32STORE512, IX86_BUILTIN_MOVDQA32_512,\n+\tIX86_BUILTIN_MOVDQA64LOAD512, IX86_BUILTIN_MOVDQA64STORE512,\n+\tIX86_BUILTIN_MOVDQA64_512, IX86_BUILTIN_MOVESD, IX86_BUILTIN_MOVESS,\n+\tIX86_BUILTIN_MOVNTDQ512, IX86_BUILTIN_MOVNTPD512,\n+\tIX86_BUILTIN_MOVNTPS512, IX86_BUILTIN_MOVSHDUP512,\n+\tIX86_BUILTIN_MOVSLDUP512, IX86_BUILTIN_MULPD512,\n+\tIX86_BUILTIN_MULPS512, IX86_BUILTIN_MULSD_MASK,\n+\tIX86_BUILTIN_MULSS_MASK, IX86_BUILTIN_PABSD512, IX86_BUILTIN_PABSQ512,\n+\tIX86_BUILTIN_PADDD512, IX86_BUILTIN_PADDQ512, IX86_BUILTIN_PANDD512,\n+\tIX86_BUILTIN_PANDND512, IX86_BUILTIN_PANDNQ512, IX86_BUILTIN_PANDQ512,\n+\tIX86_BUILTIN_PBROADCASTD512, IX86_BUILTIN_PBROADCASTD512_GPR,\n+\tIX86_BUILTIN_PBROADCASTMB512, IX86_BUILTIN_PBROADCASTMW512,\n+\tIX86_BUILTIN_PBROADCASTQ512, IX86_BUILTIN_PBROADCASTQ512_GPR,\n+\tIX86_BUILTIN_PBROADCASTQ512_MEM, IX86_BUILTIN_PCMPEQD512_MASK,\n+\tIX86_BUILTIN_PCMPEQQ512_MASK, IX86_BUILTIN_PCMPGTD512_MASK,\n+\tIX86_BUILTIN_PCMPGTQ512_MASK, IX86_BUILTIN_PCOMPRESSD512,\n+\tIX86_BUILTIN_PCOMPRESSDSTORE512, IX86_BUILTIN_PCOMPRESSQ512,\n+\tIX86_BUILTIN_PCOMPRESSQSTORE512, IX86_BUILTIN_PEXPANDD512,\n+\tIX86_BUILTIN_PEXPANDD512Z, IX86_BUILTIN_PEXPANDDLOAD512,\n+\tIX86_BUILTIN_PEXPANDDLOAD512Z, IX86_BUILTIN_PEXPANDQ512,\n+\tIX86_BUILTIN_PEXPANDQ512Z, IX86_BUILTIN_PEXPANDQLOAD512,\n+\tIX86_BUILTIN_PEXPANDQLOAD512Z, IX86_BUILTIN_PMAXSD512,\n+\tIX86_BUILTIN_PMAXSQ512, IX86_BUILTIN_PMAXUD512,\n+\tIX86_BUILTIN_PMAXUQ512, IX86_BUILTIN_PMINSD512,\n+\tIX86_BUILTIN_PMINSQ512, IX86_BUILTIN_PMINUD512,\n+\tIX86_BUILTIN_PMINUQ512, IX86_BUILTIN_PMOVDB512,\n+\tIX86_BUILTIN_PMOVDW512, IX86_BUILTIN_PMOVQB512,\n+\tIX86_BUILTIN_PMOVQD512, IX86_BUILTIN_PMOVQW512,\n+\tIX86_BUILTIN_PMOVSDB512, IX86_BUILTIN_PMOVSDW512,\n+\tIX86_BUILTIN_PMOVSQB512, IX86_BUILTIN_PMOVSQD512,\n+\tIX86_BUILTIN_PMOVSQW512, IX86_BUILTIN_PMOVSXBD512,\n+\tIX86_BUILTIN_PMOVSXBQ512, IX86_BUILTIN_PMOVSXDQ512,\n+\tIX86_BUILTIN_PMOVSXWD512, IX86_BUILTIN_PMOVSXWQ512,\n+\tIX86_BUILTIN_PMOVUSDB512, IX86_BUILTIN_PMOVUSDW512,\n+\tIX86_BUILTIN_PMOVUSQB512, IX86_BUILTIN_PMOVUSQD512,\n+\tIX86_BUILTIN_PMOVUSQW512, IX86_BUILTIN_PMOVZXBD512,\n+\tIX86_BUILTIN_PMOVZXBQ512, IX86_BUILTIN_PMOVZXDQ512,\n+\tIX86_BUILTIN_PMOVZXWD512, IX86_BUILTIN_PMOVZXWQ512,\n+\tIX86_BUILTIN_PMULDQ512, IX86_BUILTIN_PMULLD512,\n+\tIX86_BUILTIN_PMULUDQ512, IX86_BUILTIN_PORD512, IX86_BUILTIN_PORQ512,\n+\tIX86_BUILTIN_PROLD512, IX86_BUILTIN_PROLQ512, IX86_BUILTIN_PROLVD512,\n+\tIX86_BUILTIN_PROLVQ512, IX86_BUILTIN_PRORD512, IX86_BUILTIN_PRORQ512,\n+\tIX86_BUILTIN_PRORVD512, IX86_BUILTIN_PRORVQ512,\n+\tIX86_BUILTIN_PSHUFD512, IX86_BUILTIN_PSLLD512, IX86_BUILTIN_PSLLDI512,\n+\tIX86_BUILTIN_PSLLQ512, IX86_BUILTIN_PSLLQI512,\n+\tIX86_BUILTIN_PSLLVV16SI, IX86_BUILTIN_PSLLVV8DI,\n+\tIX86_BUILTIN_PSRAD512, IX86_BUILTIN_PSRADI512, IX86_BUILTIN_PSRAQ512,\n+\tIX86_BUILTIN_PSRAQI512, IX86_BUILTIN_PSRAVV16SI,\n+\tIX86_BUILTIN_PSRAVV8DI, IX86_BUILTIN_PSRLD512, IX86_BUILTIN_PSRLDI512,\n+\tIX86_BUILTIN_PSRLQ512, IX86_BUILTIN_PSRLQI512,\n+\tIX86_BUILTIN_PSRLVV16SI, IX86_BUILTIN_PSRLVV8DI,\n+\tIX86_BUILTIN_PSUBD512, IX86_BUILTIN_PSUBQ512, IX86_BUILTIN_PTESTMD512,\n+\tIX86_BUILTIN_PTESTMQ512, IX86_BUILTIN_PTESTNMD512,\n+\tIX86_BUILTIN_PTESTNMQ512, IX86_BUILTIN_PUNPCKHDQ512,\n+\tIX86_BUILTIN_PUNPCKHQDQ512, IX86_BUILTIN_PUNPCKLDQ512,\n+\tIX86_BUILTIN_PUNPCKLQDQ512, IX86_BUILTIN_PXORD512,\n+\tIX86_BUILTIN_PXORQ512, IX86_BUILTIN_RCP14PD512,\n+\tIX86_BUILTIN_RCP14PS512, IX86_BUILTIN_RCP14SD, IX86_BUILTIN_RCP14SS,\n+\tIX86_BUILTIN_RNDSCALEPD, IX86_BUILTIN_RNDSCALEPS,\n+\tIX86_BUILTIN_RNDSCALESD, IX86_BUILTIN_RNDSCALESS,\n+\tIX86_BUILTIN_RSQRT14PD512, IX86_BUILTIN_RSQRT14PS512,\n+\tIX86_BUILTIN_RSQRT14SD, IX86_BUILTIN_RSQRT14SS,\n+\tIX86_BUILTIN_SCALEFPD512, IX86_BUILTIN_SCALEFPS512,\n+\tIX86_BUILTIN_SCALEFSD, IX86_BUILTIN_SCALEFSS, IX86_BUILTIN_SHUFPD512,\n+\tIX86_BUILTIN_SHUFPS512, IX86_BUILTIN_SHUF_F32x4,\n+\tIX86_BUILTIN_SHUF_F64x2, IX86_BUILTIN_SHUF_I32x4,\n+\tIX86_BUILTIN_SHUF_I64x2,\n+\tIX86_BUILTIN_SQRTPD512_MASK, IX86_BUILTIN_SQRTPS512_MASK,\n+\tIX86_BUILTIN_SQRTSD_MASK,\n+\tIX86_BUILTIN_SQRTSS_MASK, IX86_BUILTIN_STOREAPD512,\n+\tIX86_BUILTIN_STOREAPS512, IX86_BUILTIN_STOREDQUDI512,\n+\tIX86_BUILTIN_STOREDQUSI512, IX86_BUILTIN_STORESD,\n+\tIX86_BUILTIN_STORESS, IX86_BUILTIN_STOREUPD512,\n+\tIX86_BUILTIN_STOREUPS512, IX86_BUILTIN_SUBPD512,\n+\tIX86_BUILTIN_SUBPS512, IX86_BUILTIN_SUBSD_MASK,\n+\tIX86_BUILTIN_SUBSS_MASK, IX86_BUILTIN_UCMPD512, IX86_BUILTIN_UCMPQ512,\n+\tIX86_BUILTIN_UNPCKHPD512, IX86_BUILTIN_UNPCKHPS512,\n+\tIX86_BUILTIN_UNPCKLPD512, IX86_BUILTIN_UNPCKLPS512,\n+\tIX86_BUILTIN_VCVTSD2SI32, IX86_BUILTIN_VCVTSD2SI64,\n+\tIX86_BUILTIN_VCVTSD2USI32, IX86_BUILTIN_VCVTSD2USI64,\n+\tIX86_BUILTIN_VCVTSS2SI32, IX86_BUILTIN_VCVTSS2SI64,\n+\tIX86_BUILTIN_VCVTSS2USI32, IX86_BUILTIN_VCVTSS2USI64,\n+\tIX86_BUILTIN_VCVTTSD2SI32, IX86_BUILTIN_VCVTTSD2SI64,\n+\tIX86_BUILTIN_VCVTTSD2USI32, IX86_BUILTIN_VCVTTSD2USI64,\n+\tIX86_BUILTIN_VCVTTSS2SI32, IX86_BUILTIN_VCVTTSS2SI64,\n+\tIX86_BUILTIN_VCVTTSS2USI32, IX86_BUILTIN_VCVTTSS2USI64,\n+\tIX86_BUILTIN_VFMADDPD512_MASK, IX86_BUILTIN_VFMADDPD512_MASK3,\n+\tIX86_BUILTIN_VFMADDPD512_MASKZ, IX86_BUILTIN_VFMADDPS512_MASK,\n+\tIX86_BUILTIN_VFMADDPS512_MASK3, IX86_BUILTIN_VFMADDPS512_MASKZ,\n+\tIX86_BUILTIN_VFMADDSD3_MASK, IX86_BUILTIN_VFMADDSD3_MASK3,\n+\tIX86_BUILTIN_VFMADDSD3_MASKZ, IX86_BUILTIN_VFMADDSS3_MASK,\n+\tIX86_BUILTIN_VFMADDSS3_MASK3, IX86_BUILTIN_VFMADDSS3_MASKZ,\n+\tIX86_BUILTIN_VFMADDSUBPD512_MASK, IX86_BUILTIN_VFMADDSUBPD512_MASK3,\n+\tIX86_BUILTIN_VFMADDSUBPD512_MASKZ, IX86_BUILTIN_VFMADDSUBPS512_MASK,\n+\tIX86_BUILTIN_VFMADDSUBPS512_MASK3, IX86_BUILTIN_VFMADDSUBPS512_MASKZ,\n+\tIX86_BUILTIN_VFMSUBADDPD512_MASK3, IX86_BUILTIN_VFMSUBADDPS512_MASK3,\n+\tIX86_BUILTIN_VFMSUBPD512_MASK3, IX86_BUILTIN_VFMSUBPS512_MASK3,\n+\tIX86_BUILTIN_VFMSUBSD3_MASK3, IX86_BUILTIN_VFMSUBSS3_MASK3,\n+\tIX86_BUILTIN_VFNMADDPD512_MASK, IX86_BUILTIN_VFNMADDPS512_MASK,\n+\tIX86_BUILTIN_VFNMSUBPD512_MASK, IX86_BUILTIN_VFNMSUBPD512_MASK3,\n+\tIX86_BUILTIN_VFNMSUBPS512_MASK, IX86_BUILTIN_VFNMSUBPS512_MASK3,\n+\tIX86_BUILTIN_VPCLZCNTD512, IX86_BUILTIN_VPCLZCNTQ512,\n+\tIX86_BUILTIN_VPCONFLICTD512, IX86_BUILTIN_VPCONFLICTQ512,\n+\tIX86_BUILTIN_VPERMDF512, IX86_BUILTIN_VPERMDI512,\n+\tIX86_BUILTIN_VPERMI2VARD512, IX86_BUILTIN_VPERMI2VARPD512,\n+\tIX86_BUILTIN_VPERMI2VARPS512, IX86_BUILTIN_VPERMI2VARQ512,\n+\tIX86_BUILTIN_VPERMILPD512, IX86_BUILTIN_VPERMILPS512,\n+\tIX86_BUILTIN_VPERMILVARPD512, IX86_BUILTIN_VPERMILVARPS512,\n+\tIX86_BUILTIN_VPERMT2VARD512, IX86_BUILTIN_VPERMT2VARD512_MASKZ,\n+\tIX86_BUILTIN_VPERMT2VARPD512, IX86_BUILTIN_VPERMT2VARPD512_MASKZ,\n+\tIX86_BUILTIN_VPERMT2VARPS512, IX86_BUILTIN_VPERMT2VARPS512_MASKZ,\n+\tIX86_BUILTIN_VPERMT2VARQ512, IX86_BUILTIN_VPERMT2VARQ512_MASKZ,\n+\tIX86_BUILTIN_VPERMVARDF512, IX86_BUILTIN_VPERMVARDI512,\n+\tIX86_BUILTIN_VPERMVARSF512, IX86_BUILTIN_VPERMVARSI512,\n+\tIX86_BUILTIN_VTERNLOGD512_MASK, IX86_BUILTIN_VTERNLOGD512_MASKZ,\n+\tIX86_BUILTIN_VTERNLOGQ512_MASK, IX86_BUILTIN_VTERNLOGQ512_MASKZ,\n+\tIX86_BUILTIN_KAND16, IX86_BUILTIN_KANDN16, IX86_BUILTIN_KNOT16,\n+\tIX86_BUILTIN_KOR16, IX86_BUILTIN_KORTESTC16, IX86_BUILTIN_KORTESTZ16,\n+\tIX86_BUILTIN_KUNPCKBW, IX86_BUILTIN_KXNOR16, IX86_BUILTIN_KXOR16,\n+\tIX86_BUILTIN_GATHER3SIV8DI,\n+\tIX86_BUILTIN_SCATTERDIV16SF, IX86_BUILTIN_SCATTERDIV16SI,\n+\tIX86_BUILTIN_SCATTERDIV8DF, IX86_BUILTIN_SCATTERDIV8DI,\n+\tIX86_BUILTIN_SCATTERSIV16SF, IX86_BUILTIN_SCATTERSIV16SI,\n+\tIX86_BUILTIN_SCATTERSIV8DF, IX86_BUILTIN_SCATTERSIV8DI,\n+\tIX86_BUILTIN_GATHERPFDPS, IX86_BUILTIN_GATHERPFQPS,\n+\tIX86_BUILTIN_SCATTERPFDPS, IX86_BUILTIN_SCATTERPFQPS,\n+\tIX86_BUILTIN_EXP2PD_MASK, IX86_BUILTIN_EXP2PS_MASK,\n+\tIX86_BUILTIN_RCP28PD, IX86_BUILTIN_RCP28PS,\n+\tIX86_BUILTIN_RSQRT28PD, IX86_BUILTIN_RSQRT28PS.\n+\t(bdesc_special_args): Add __builtin_ia32_compressstoresf512_mask,\n+\t__builtin_ia32_compressstoresi512_mask,\n+\t__builtin_ia32_compressstoredf512_mask,\n+\t__builtin_ia32_compressstoredi512_mask,\n+\t__builtin_ia32_expandloadsf512_mask,\n+\t__builtin_ia32_expandloadsf512_maskz,\n+\t__builtin_ia32_expandloadsi512_mask,\n+\t__builtin_ia32_expandloadsi512_maskz,\n+\t__builtin_ia32_expandloaddf512_mask,\n+\t__builtin_ia32_expandloaddf512_maskz,\n+\t__builtin_ia32_expandloaddi512_mask,\n+\t__builtin_ia32_expandloaddi512_maskz,\n+\t__builtin_ia32_loaddqusi512_mask, __builtin_ia32_loaddqudi512_mask,\n+\t__builtin_ia32_loadsd_mask, __builtin_ia32_loadss_mask,\n+\t__builtin_ia32_loadupd512_mask, __builtin_ia32_loadups512_mask,\n+\t__builtin_ia32_loadaps512_mask, __builtin_ia32_movdqa32load512_mask,\n+\t__builtin_ia32_loadapd512_mask, __builtin_ia32_movdqa64load512_mask,\n+\t__builtin_ia32_movntps512, __builtin_ia32_movntpd512,\n+\t__builtin_ia32_movntdq512, __builtin_ia32_storedqusi512_mask,\n+\t__builtin_ia32_storedqudi512_mask, __builtin_ia32_storesd_mask,\n+\t__builtin_ia32_storess_mask, __builtin_ia32_storeupd512_mask,\n+\t__builtin_ia32_storeups512_mask, __builtin_ia32_storeaps512_mask,\n+\t__builtin_ia32_movdqa32store512_mask, __builtin_ia32_storeapd512_mask,\n+\t__builtin_ia32_movdqa64store512_mask, __builtin_ia32_alignd512_mask,\n+\t__builtin_ia32_alignq512_mask, __builtin_ia32_blendmd_512_mask,\n+\t__builtin_ia32_blendmpd_512_mask, __builtin_ia32_blendmps_512_mask,\n+\t__builtin_ia32_blendmq_512_mask, __builtin_ia32_broadcastf32x4_512,\n+\t__builtin_ia32_broadcastf64x4_512, __builtin_ia32_broadcasti32x4_512,\n+\t__builtin_ia32_broadcasti64x4_512, __builtin_ia32_broadcastsd512,\n+\t__builtin_ia32_broadcastss512, __builtin_ia32_cmpd512_mask,\n+\t__builtin_ia32_cmpq512_mask, __builtin_ia32_compressdf512_mask,\n+\t__builtin_ia32_compresssf512_mask, __builtin_ia32_cvtdq2pd512_mask,\n+\t__builtin_ia32_vcvtps2ph512_mask, __builtin_ia32_cvtudq2pd512_mask,\n+\t__builtin_ia32_cvtusi2sd32, __builtin_ia32_expanddf512_mask,\n+\t__builtin_ia32_expanddf512_maskz, __builtin_ia32_expandsf512_mask,\n+\t__builtin_ia32_expandsf512_maskz, __builtin_ia32_extractf32x4_mask,\n+\t__builtin_ia32_extractf64x4_mask, __builtin_ia32_extracti32x4_mask,\n+\t__builtin_ia32_extracti64x4_mask, __builtin_ia32_insertf32x4_mask,\n+\t__builtin_ia32_insertf64x4_mask, __builtin_ia32_inserti32x4_mask,\n+\t__builtin_ia32_inserti64x4_mask, __builtin_ia32_movapd512_mask,\n+\t__builtin_ia32_movaps512_mask, __builtin_ia32_movddup512_mask,\n+\t__builtin_ia32_movdqa32_512_mask, __builtin_ia32_movdqa64_512_mask,\n+\t__builtin_ia32_movesd_mask, __builtin_ia32_movess_mask,\n+\t__builtin_ia32_movshdup512_mask, __builtin_ia32_movsldup512_mask,\n+\t__builtin_ia32_pabsd512_mask, __builtin_ia32_pabsq512_mask,\n+\t__builtin_ia32_paddd512_mask, __builtin_ia32_paddq512_mask,\n+\t__builtin_ia32_pandd512_mask, __builtin_ia32_pandnd512_mask,\n+\t__builtin_ia32_pandnq512_mask, __builtin_ia32_pandq512_mask,\n+\t__builtin_ia32_pbroadcastd512, __builtin_ia32_pbroadcastd512_gpr_mask,\n+\t__builtin_ia32_broadcastmb512, __builtin_ia32_broadcastmw512,\n+\t__builtin_ia32_pbroadcastq512, __builtin_ia32_pbroadcastq512_gpr_mask,\n+\t__builtin_ia32_pbroadcastq512_mem_mask,\n+\t__builtin_ia32_pcmpeqd512_mask, __builtin_ia32_pcmpeqq512_mask,\n+\t__builtin_ia32_pcmpgtd512_mask, __builtin_ia32_pcmpgtq512_mask,\n+\t__builtin_ia32_compresssi512_mask, __builtin_ia32_compressdi512_mask,\n+\t__builtin_ia32_expandsi512_mask, __builtin_ia32_expandsi512_maskz,\n+\t__builtin_ia32_expanddi512_mask, __builtin_ia32_expanddi512_maskz,\n+\t__builtin_ia32_pmaxsd512_mask, __builtin_ia32_pmaxsq512_mask,\n+\t__builtin_ia32_pmaxud512_mask, __builtin_ia32_pmaxuq512_mask,\n+\t__builtin_ia32_pminsd512_mask, __builtin_ia32_pminsq512_mask,\n+\t__builtin_ia32_pminud512_mask, __builtin_ia32_pminuq512_mask,\n+\t__builtin_ia32_pmovdb512_mask, __builtin_ia32_pmovdw512_mask,\n+\t__builtin_ia32_pmovqb512_mask, __builtin_ia32_pmovqd512_mask,\n+\t__builtin_ia32_pmovqw512_mask, __builtin_ia32_pmovsdb512_mask,\n+\t__builtin_ia32_pmovsdw512_mask, __builtin_ia32_pmovsqb512_mask,\n+\t__builtin_ia32_pmovsqd512_mask, __builtin_ia32_pmovsqw512_mask,\n+\t__builtin_ia32_pmovsxbd512_mask, __builtin_ia32_pmovsxbq512_mask,\n+\t__builtin_ia32_pmovsxdq512_mask, __builtin_ia32_pmovsxwd512_mask,\n+\t__builtin_ia32_pmovsxwq512_mask, __builtin_ia32_pmovusdb512_mask,\n+\t__builtin_ia32_pmovusdw512_mask, __builtin_ia32_pmovusqb512_mask,\n+\t__builtin_ia32_pmovusqd512_mask, __builtin_ia32_pmovusqw512_mask,\n+\t__builtin_ia32_pmovzxbd512_mask, __builtin_ia32_pmovzxbq512_mask,\n+\t__builtin_ia32_pmovzxdq512_mask, __builtin_ia32_pmovzxwd512_mask,\n+\t__builtin_ia32_pmovzxwq512_mask, __builtin_ia32_pmuldq512_mask,\n+\t__builtin_ia32_pmulld512_mask, __builtin_ia32_pmuludq512_mask,\n+\t__builtin_ia32_pord512_mask, __builtin_ia32_porq512_mask,\n+\t__builtin_ia32_prold512_mask, __builtin_ia32_prolq512_mask,\n+\t__builtin_ia32_prolvd512_mask, __builtin_ia32_prolvq512_mask,\n+\t__builtin_ia32_prord512_mask, __builtin_ia32_prorq512_mask,\n+\t__builtin_ia32_prorvd512_mask, __builtin_ia32_prorvq512_mask,\n+\t__builtin_ia32_pshufd512_mask, __builtin_ia32_pslld512_mask,\n+\t__builtin_ia32_pslldi512_mask, __builtin_ia32_psllq512_mask,\n+\t__builtin_ia32_psllqi512_mask, __builtin_ia32_psllv16si_mask,\n+\t__builtin_ia32_psllv8di_mask, __builtin_ia32_psrad512_mask,\n+\t__builtin_ia32_psradi512_mask, __builtin_ia32_psraq512_mask,\n+\t__builtin_ia32_psraqi512_mask, __builtin_ia32_psrav16si_mask,\n+\t__builtin_ia32_psrav8di_mask, __builtin_ia32_psrld512_mask,\n+\t__builtin_ia32_psrldi512_mask, __builtin_ia32_psrlq512_mask,\n+\t__builtin_ia32_psrlqi512_mask, __builtin_ia32_psrlv16si_mask,\n+\t__builtin_ia32_psrlv8di_mask, __builtin_ia32_psubd512_mask,\n+\t__builtin_ia32_psubq512_mask, __builtin_ia32_ptestmd512,\n+\t__builtin_ia32_ptestmq512, __builtin_ia32_ptestnmd512,\n+\t__builtin_ia32_ptestnmq512, __builtin_ia32_punpckhdq512_mask,\n+\t__builtin_ia32_punpckhqdq512_mask, __builtin_ia32_punpckldq512_mask,\n+\t__builtin_ia32_punpcklqdq512_mask, __builtin_ia32_pxord512_mask,\n+\t__builtin_ia32_pxorq512_mask, __builtin_ia32_rcp14pd512_mask,\n+\t__builtin_ia32_rcp14ps512_mask, __builtin_ia32_rcp14sd_mask,\n+\t__builtin_ia32_rcp14ss_mask, __builtin_ia32_rsqrt14pd512_mask,\n+\t__builtin_ia32_rsqrt14ps512_mask, __builtin_ia32_rsqrt14sd_mask,\n+\t__builtin_ia32_rsqrt14ss_mask, __builtin_ia32_shufpd512_mask,\n+\t__builtin_ia32_shufps512_mask, __builtin_ia32_shuf_f32x4_mask,\n+\t__builtin_ia32_shuf_f64x2_mask, __builtin_ia32_shuf_i32x4_mask,\n+\t__builtin_ia32_shuf_i64x2_mask, __builtin_ia32_ucmpd512_mask,\n+\t__builtin_ia32_ucmpq512_mask, __builtin_ia32_unpckhpd512_mask,\n+\t__builtin_ia32_unpckhps512_mask, __builtin_ia32_unpcklpd512_mask,\n+\t__builtin_ia32_unpcklps512_mask, __builtin_ia32_vplzcntd_512_mask,\n+\t__builtin_ia32_vplzcntq_512_mask,\n+\t__builtin_ia32_vpconflictsi_512_mask,\n+\t__builtin_ia32_vpconflictdi_512_mask, __builtin_ia32_permdf512_mask,\n+\t__builtin_ia32_permdi512_mask, __builtin_ia32_vpermi2vard512_mask,\n+\t__builtin_ia32_vpermi2varpd512_mask,\n+\t__builtin_ia32_vpermi2varps512_mask,\n+\t__builtin_ia32_vpermi2varq512_mask, __builtin_ia32_vpermilpd512_mask,\n+\t__builtin_ia32_vpermilps512_mask, __builtin_ia32_vpermilvarpd512_mask,\n+\t__builtin_ia32_vpermilvarps512_mask,\n+\t__builtin_ia32_vpermt2vard512_mask,\n+\t__builtin_ia32_vpermt2vard512_maskz,\n+\t__builtin_ia32_vpermt2varpd512_mask,\n+\t__builtin_ia32_vpermt2varpd512_maskz,\n+\t__builtin_ia32_vpermt2varps512_mask,\n+\t__builtin_ia32_vpermt2varps512_maskz,\n+\t__builtin_ia32_vpermt2varq512_mask,\n+\t__builtin_ia32_vpermt2varq512_maskz, __builtin_ia32_permvardf512_mask,\n+\t__builtin_ia32_permvardi512_mask, __builtin_ia32_permvarsf512_mask,\n+\t__builtin_ia32_permvarsi512_mask, __builtin_ia32_pternlogd512_mask,\n+\t__builtin_ia32_pternlogd512_maskz, __builtin_ia32_pternlogq512_mask,\n+\t__builtin_ia32_pternlogq512_maskz, __builtin_ia32_copysignps512,\n+\t__builtin_ia32_copysignpd512, __builtin_ia32_sqrtpd512,\n+\t__builtin_ia32_sqrtps512, __builtin_ia32_exp2ps,\n+\t__builtin_ia32_roundpd_az_vec_pack_sfix512,\n+\t__builtin_ia32_floorpd_vec_pack_sfix512,\n+\t__builtin_ia32_ceilpd_vec_pack_sfix512, __builtin_ia32_kandhi,\n+\t__builtin_ia32_kandnhi, __builtin_ia32_knothi, __builtin_ia32_korhi,\n+\t__builtin_ia32_kortestchi, __builtin_ia32_kortestzhi,\n+\t__builtin_ia32_kunpckhi, __builtin_ia32_kxnorhi,\n+\t__builtin_ia32_kxorhi, __builtin_ia32_addpd512_mask,\n+\t__builtin_ia32_addps512_mask, __builtin_ia32_addsd_mask,\n+\t__builtin_ia32_addss_mask, __builtin_ia32_cmppd512_mask,\n+\t__builtin_ia32_cmpps512_mask, __builtin_ia32_cmpsd_mask,\n+\t__builtin_ia32_cmpss_mask, __builtin_ia32_vcomisd,\n+\t__builtin_ia32_vcomiss, __builtin_ia32_cvtdq2ps512_mask,\n+\t__builtin_ia32_cvtpd2dq512_mask, __builtin_ia32_cvtpd2ps512_mask,\n+\t__builtin_ia32_cvtpd2udq512_mask, __builtin_ia32_vcvtph2ps512_mask,\n+\t__builtin_ia32_cvtps2dq512_mask, __builtin_ia32_cvtps2pd512_mask,\n+\t__builtin_ia32_cvtps2udq512_mask, __builtin_ia32_cvtsd2ss_mask,\n+\t__builtin_ia32_cvtsi2sd64, __builtin_ia32_cvtsi2ss32,\n+\t__builtin_ia32_cvtsi2ss64, __builtin_ia32_cvtss2sd_mask,\n+\t__builtin_ia32_cvttpd2dq512_mask, __builtin_ia32_cvttpd2udq512_mask,\n+\t__builtin_ia32_cvttps2dq512_mask, __builtin_ia32_cvttps2udq512_mask,\n+\t__builtin_ia32_cvtudq2ps512_mask, __builtin_ia32_cvtusi2sd64,\n+\t__builtin_ia32_cvtusi2ss32, __builtin_ia32_cvtusi2ss64,\n+\t__builtin_ia32_divpd512_mask, __builtin_ia32_divps512_mask,\n+\t__builtin_ia32_divsd_mask, __builtin_ia32_divss_mask,\n+\t__builtin_ia32_fixupimmpd512_mask, __builtin_ia32_fixupimmpd512_maskz,\n+\t__builtin_ia32_fixupimmps512_mask, __builtin_ia32_fixupimmps512_maskz,\n+\t__builtin_ia32_fixupimmsd_mask, __builtin_ia32_fixupimmsd_maskz,\n+\t__builtin_ia32_fixupimmss_mask, __builtin_ia32_fixupimmss_maskz,\n+\t__builtin_ia32_getexppd512_mask, __builtin_ia32_getexpps512_mask,\n+\t__builtin_ia32_getexpsd128_mask, __builtin_ia32_getexpss128_mask,\n+\t__builtin_ia32_getmantpd512_mask, __builtin_ia32_getmantps512_mask,\n+\t__builtin_ia32_getmantsd_mask, __builtin_ia32_getmantss_mask,\n+\t__builtin_ia32_maxpd512_mask, __builtin_ia32_maxps512_mask,\n+\t__builtin_ia32_maxsd_mask, __builtin_ia32_maxss_mask,\n+\t__builtin_ia32_minpd512_mask, __builtin_ia32_minps512_mask,\n+\t__builtin_ia32_minsd_mask, __builtin_ia32_minss_mask,\n+\t__builtin_ia32_mulpd512_mask, __builtin_ia32_mulps512_mask,\n+\t__builtin_ia32_mulsd_mask, __builtin_ia32_mulss_mask,\n+\t__builtin_ia32_rndscalepd_mask, __builtin_ia32_rndscaleps_mask,\n+\t__builtin_ia32_rndscalesd_mask, __builtin_ia32_rndscaless_mask,\n+\t__builtin_ia32_scalefpd512_mask, __builtin_ia32_scalefps512_mask,\n+\t__builtin_ia32_scalefsd_mask, __builtin_ia32_scalefss_mask,\n+\t__builtin_ia32_sqrtpd512_mask, __builtin_ia32_sqrtps512_mask,\n+\t__builtin_ia32_sqrtsd_mask, __builtin_ia32_sqrtss_mask,\n+\t__builtin_ia32_subpd512_mask, __builtin_ia32_subps512_mask,\n+\t__builtin_ia32_subsd_mask, __builtin_ia32_subss_mask,\n+\t__builtin_ia32_vcvtsd2si32, __builtin_ia32_vcvtsd2si64,\n+\t__builtin_ia32_vcvtsd2usi32, __builtin_ia32_vcvtsd2usi64,\n+\t__builtin_ia32_vcvtss2si32, __builtin_ia32_vcvtss2si64,\n+\t__builtin_ia32_vcvtss2usi32, __builtin_ia32_vcvtss2usi64,\n+\t__builtin_ia32_vcvttsd2si32, __builtin_ia32_vcvttsd2si64,\n+\t__builtin_ia32_vcvttsd2usi32, __builtin_ia32_vcvttsd2usi64,\n+\t__builtin_ia32_vcvttss2si32, __builtin_ia32_vcvttss2si64,\n+\t__builtin_ia32_vcvttss2usi32, __builtin_ia32_vcvttss2usi64,\n+\t__builtin_ia32_vfmaddpd512_mask, __builtin_ia32_vfmaddpd512_mask3,\n+\t__builtin_ia32_vfmaddpd512_maskz, __builtin_ia32_vfmaddps512_mask,\n+\t__builtin_ia32_vfmaddps512_mask3, __builtin_ia32_vfmaddps512_maskz,\n+\t__builtin_ia32_vfmaddsd3_mask, __builtin_ia32_vfmaddsd3_mask3,\n+\t__builtin_ia32_vfmaddsd3_maskz, __builtin_ia32_vfmaddss3_mask,\n+\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n+\t__builtin_ia32_vfmaddsubpd512_mask,\n+\t__builtin_ia32_vfmaddsubpd512_mask3,\n+\t__builtin_ia32_vfmaddsubpd512_maskz,\n+\t__builtin_ia32_vfmaddsubps512_mask,\n+\t__builtin_ia32_vfmaddsubps512_mask3,\n+\t__builtin_ia32_vfmaddsubps512_maskz,\n+\t__builtin_ia32_vfmsubaddpd512_mask3,\n+\t__builtin_ia32_vfmsubaddps512_mask3, __builtin_ia32_vfmsubpd512_mask3,\n+\t__builtin_ia32_vfmsubps512_mask3, __builtin_ia32_vfmsubsd3_mask3,\n+\t__builtin_ia32_vfmsubss3_mask3, __builtin_ia32_vfnmaddpd512_mask,\n+\t__builtin_ia32_vfnmaddps512_mask, __builtin_ia32_vfnmsubpd512_mask,\n+\t__builtin_ia32_vfnmsubpd512_mask3, __builtin_ia32_vfnmsubps512_mask,\n+\t__builtin_ia32_vfnmsubps512_mask3, __builtin_ia32_exp2pd_mask,\n+\t__builtin_ia32_exp2ps_mask, __builtin_ia32_rcp28pd_mask,\n+\t__builtin_ia32_rcp28ps_mask, __builtin_ia32_rsqrt28pd_mask,\n+\t__builtin_ia32_rsqrt28ps_mask, __builtin_ia32_gathersiv16sf,\n+\t__builtin_ia32_gathersiv8df, __builtin_ia32_gatherdiv16sf,\n+\t__builtin_ia32_gatherdiv8df, __builtin_ia32_gathersiv16si,\n+\t__builtin_ia32_gathersiv8di, __builtin_ia32_gatherdiv16si,\n+\t__builtin_ia32_gatherdiv8di, __builtin_ia32_gatheraltsiv8df ,\n+\t__builtin_ia32_gatheraltdiv8sf , __builtin_ia32_gatheraltsiv8di ,\n+\t__builtin_ia32_gatheraltdiv8si , __builtin_ia32_scattersiv16sf,\n+\t__builtin_ia32_scattersiv8df, __builtin_ia32_scatterdiv16sf,\n+\t__builtin_ia32_scatterdiv8df, __builtin_ia32_scattersiv16si,\n+\t__builtin_ia32_scattersiv8di, __builtin_ia32_scatterdiv16si,\n+\t__builtin_ia32_scatterdiv8di, __builtin_ia32_gatherpfdps,\n+\t__builtin_ia32_gatherpfqps, __builtin_ia32_scatterpfdps,\n+\t__builtin_ia32_scatterpfqps.\n+\t(ix86_init_mmx_sse_builtins): Handle builtins with AVX512 embeded\n+\trounding, builtins for AVX512 gathers/scatters.\n+\t(ix86_expand_args_builtin): Handle new functions types, add warnings\n+\tfor masked builtins.\n+\t(ix86_erase_embedded_rounding): Handle patterns with embedded rounding.\n+\t(ix86_expand_sse_comi_round): Ditto.\n+\t(ix86_expand_round_builtin): Ditto.\n+\t(ix86_expand_builtin): Handle AVX512's gathers/scatters and kortest{z}.\n+\tCall ix86_expand_round_builtin.\n+\t* config/i386/immintrin.h: Add avx512fintrin.h, avx512erintrin.h,\n+\tavx512pfintrin.h, avx512cdintrin.h.\n+\n 2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "9ce29901f6e5b6cac4dee7f8d880133b8f237d55", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=756c585702ca72cc01388f51a960777a3d13d486", "patch": "@@ -372,9 +372,10 @@ i[34567]86-*-*)\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h bmi2intrin.h tbmintrin.h\n-\t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n-\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h adxintrin.h\n-\t\t       fxsrintrin.h xsaveintrin.h xsaveoptintrin.h\"\n+\t\t       avx2intrin.h avx512fintrin.h fmaintrin.h f16cintrin.h\n+\t\t       rtmintrin.h xtestintrin.h rdseedintrin.h prfchwintrin.h\n+\t\t       adxintrin.h fxsrintrin.h xsaveintrin.h xsaveoptintrin.h\n+\t\t       avx512cdintrin.h avx512erintrin.h avx512pfintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -387,9 +388,10 @@ x86_64-*-*)\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h tbmintrin.h bmi2intrin.h\n-\t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n-\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h adxintrin.h\n-\t\t       fxsrintrin.h xsaveintrin.h xsaveoptintrin.h\"\n+\t\t       avx2intrin.h avx512fintrin.h fmaintrin.h f16cintrin.h\n+\t\t       rtmintrin.h xtestintrin.h rdseedintrin.h prfchwintrin.h\n+\t\t       adxintrin.h fxsrintrin.h xsaveintrin.h xsaveoptintrin.h\n+\t\t       avx512cdintrin.h avx512erintrin.h avx512pfintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "6186e06bdbe6cf57739585652eaf4653c46222be", "filename": "gcc/config/i386/avx512cdintrin.h", "status": "added", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Favx512cdintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Favx512cdintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512cdintrin.h?ref=756c585702ca72cc01388f51a960777a3d13d486", "patch": "@@ -0,0 +1,219 @@\n+/* Copyright (C) 2013\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512cdintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512CDINTRIN_H_INCLUDED\n+#define _AVX512CDINTRIN_H_INCLUDED\n+\n+#ifndef __AVX512CD__\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512cd\")\n+#define __DISABLE_AVX512CD__\n+#endif /* __AVX512CD__ */\n+\n+/* Internal data types for implementing the intrinsics.  */\n+typedef long long __v8di __attribute__ ((__vector_size__ (64)));\n+typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+/* The Intel API is flexible enough that we must allow aliasing with other\n+   vector types, and their scalar components.  */\n+typedef long long __m512i __attribute__ ((__vector_size__ (64), __may_alias__));\n+typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));\n+\n+typedef unsigned char  __mmask8;\n+typedef unsigned short __mmask16;\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_conflict_epi32 (__m512i __A)\n+{\n+  return (__m512i)\n+\t __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,\n+\t\t\t\t\t       (__v16si) _mm512_setzero_si512 (),\n+\t\t\t\t\t       (__mmask16) -1);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_conflict_epi32 (__m512i __W, __mmask16 __U, __m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,\n+\t\t\t\t\t\t\t (__v16si) __W,\n+\t\t\t\t\t\t\t (__mmask16) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_conflict_epi32 (__mmask16 __U, __m512i __A)\n+{\n+  return (__m512i)\n+\t __builtin_ia32_vpconflictsi_512_mask ((__v16si) __A,\n+\t\t\t\t\t       (__v16si) _mm512_setzero_si512 (),\n+\t\t\t\t\t       (__mmask16) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_conflict_epi64 (__m512i __A)\n+{\n+  return (__m512i)\n+\t __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,\n+\t\t\t\t\t       (__v8di) _mm512_setzero_si512 (),\n+\t\t\t\t\t       (__mmask8) -1);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_conflict_epi64 (__m512i __W, __mmask8 __U, __m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,\n+\t\t\t\t\t\t\t (__v8di) __W,\n+\t\t\t\t\t\t\t (__mmask8) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_conflict_epi64 (__mmask8 __U, __m512i __A)\n+{\n+  return (__m512i)\n+\t __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,\n+\t\t\t\t\t       (__v8di) _mm512_setzero_si512 (),\n+\t\t\t\t\t       (__mmask8) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_lzcnt_epi64 (__m512i __A)\n+{\n+  return (__m512i)\n+\t __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,\n+\t\t\t\t\t   (__v8di) _mm512_setzero_si512 (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_lzcnt_epi64 (__m512i __W, __mmask8 __U, __m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,\n+\t\t\t\t\t\t     (__v8di) __W,\n+\t\t\t\t\t\t     (__mmask8) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_lzcnt_epi64 (__mmask8 __U, __m512i __A)\n+{\n+  return (__m512i)\n+\t __builtin_ia32_vplzcntq_512_mask ((__v8di) __A,\n+\t\t\t\t\t   (__v8di) _mm512_setzero_si512 (),\n+\t\t\t\t\t   (__mmask8) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_lzcnt_epi32 (__m512i __A)\n+{\n+  return (__m512i)\n+\t __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,\n+\t\t\t\t\t   (__v16si) _mm512_setzero_si512 (),\n+\t\t\t\t\t   (__mmask16) -1);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_lzcnt_epi32 (__m512i __W, __mmask16 __U, __m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,\n+\t\t\t\t\t\t     (__v16si) __W,\n+\t\t\t\t\t\t     (__mmask16) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_lzcnt_epi32 (__mmask16 __U, __m512i __A)\n+{\n+  return (__m512i)\n+\t __builtin_ia32_vplzcntd_512_mask ((__v16si) __A,\n+\t\t\t\t\t   (__v16si) _mm512_setzero_si512 (),\n+\t\t\t\t\t   (__mmask16) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_broadcastmb_epi64 (__mmask8 __A)\n+{\n+  return (__m512i) __builtin_ia32_broadcastmb512 (__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_broadcastmw_epi32 (__mmask16 __A)\n+{\n+  return (__m512i) __builtin_ia32_broadcastmw512 (__A);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_testn_epi32_mask (__m512i __A, __m512i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ptestnmd512 ((__v16si) __A,\n+\t\t\t\t\t\t (__v16si) __B,\n+\t\t\t\t\t\t (__mmask16) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_testn_epi32_mask (__mmask16 __U, __m512i __A, __m512i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ptestnmd512 ((__v16si) __A,\n+\t\t\t\t\t\t (__v16si) __B, __U);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_testn_epi64_mask (__m512i __A, __m512i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ptestnmq512 ((__v8di) __A,\n+\t\t\t\t\t\t(__v8di) __B,\n+\t\t\t\t\t\t(__mmask8) -1);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_testn_epi64_mask (__mmask8 __U, __m512i __A, __m512i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ptestnmq512 ((__v8di) __A,\n+\t\t\t\t\t\t(__v8di) __B, __U);\n+}\n+\n+#ifdef __DISABLE_AVX512CD__\n+#undef __DISABLE_AVX512CD__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512CD__ */\n+\n+#endif /* _AVX512CDINTRIN_H_INCLUDED */"}, {"sha": "4583d690378f4b6e31ef702e8d62e44d5668f1ad", "filename": "gcc/config/i386/avx512erintrin.h", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Favx512erintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Favx512erintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512erintrin.h?ref=756c585702ca72cc01388f51a960777a3d13d486", "patch": "@@ -0,0 +1,333 @@\n+/* Copyright (C) 2013\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512erintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512ERINTRIN_H_INCLUDED\n+#define _AVX512ERINTRIN_H_INCLUDED\n+\n+#ifndef __AVX512ER__\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512er\")\n+#define __DISABLE_AVX512ER__\n+#endif /* __AVX512ER__ */\n+\n+/* Internal data types for implementing the intrinsics.  */\n+typedef double __v8df __attribute__ ((__vector_size__ (64)));\n+typedef float __v16sf __attribute__ ((__vector_size__ (64)));\n+\n+/* The Intel API is flexible enough that we must allow aliasing with other\n+   vector types, and their scalar components.  */\n+typedef float __m512 __attribute__ ((__vector_size__ (64), __may_alias__));\n+typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));\n+\n+typedef unsigned char  __mmask8;\n+typedef unsigned short __mmask16;\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_exp2a23_round_pd (__m512d __A, int __R)\n+{\n+  __m512d __W;\n+  return (__m512d) __builtin_ia32_exp2pd_mask ((__v8df) __A,\n+\t\t\t\t\t       (__v8df) __W,\n+\t\t\t\t\t       (__mmask8) -1, __R);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_exp2a23_round_pd (__m512d __W, __mmask8 __U, __m512d __A, int __R)\n+{\n+  return (__m512d) __builtin_ia32_exp2pd_mask ((__v8df) __A,\n+\t\t\t\t\t       (__v8df) __W,\n+\t\t\t\t\t       (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_exp2a23_round_pd (__mmask8 __U, __m512d __A, int __R)\n+{\n+  return (__m512d) __builtin_ia32_exp2pd_mask ((__v8df) __A,\n+\t\t\t\t\t       (__v8df) _mm512_setzero_pd (),\n+\t\t\t\t\t       (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_exp2a23_round_ps (__m512 __A, int __R)\n+{\n+  __m512 __W;\n+  return (__m512) __builtin_ia32_exp2ps_mask ((__v16sf) __A,\n+\t\t\t\t\t      (__v16sf) __W,\n+\t\t\t\t\t      (__mmask16) -1, __R);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_exp2a23_round_ps (__m512 __W, __mmask16 __U, __m512 __A, int __R)\n+{\n+  return (__m512) __builtin_ia32_exp2ps_mask ((__v16sf) __A,\n+\t\t\t\t\t      (__v16sf) __W,\n+\t\t\t\t\t      (__mmask16) __U, __R);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_exp2a23_round_ps (__mmask16 __U, __m512 __A, int __R)\n+{\n+  return (__m512) __builtin_ia32_exp2ps_mask ((__v16sf) __A,\n+\t\t\t\t\t      (__v16sf) _mm512_setzero_ps (),\n+\t\t\t\t\t      (__mmask16) __U, __R);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_rcp28_round_pd (__m512d __A, int __R)\n+{\n+  __m512d __W;\n+  return (__m512d) __builtin_ia32_rcp28pd_mask ((__v8df) __A,\n+\t\t\t\t\t\t(__v8df) __W,\n+\t\t\t\t\t\t(__mmask8) -1, __R);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_rcp28_round_pd (__m512d __W, __mmask8 __U, __m512d __A, int __R)\n+{\n+  return (__m512d) __builtin_ia32_rcp28pd_mask ((__v8df) __A,\n+\t\t\t\t\t\t(__v8df) __W,\n+\t\t\t\t\t\t(__mmask8) __U, __R);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_rcp28_round_pd (__mmask8 __U, __m512d __A, int __R)\n+{\n+  return (__m512d) __builtin_ia32_rcp28pd_mask ((__v8df) __A,\n+\t\t\t\t\t\t(__v8df) _mm512_setzero_pd (),\n+\t\t\t\t\t\t(__mmask8) __U, __R);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_rcp28_round_ps (__m512 __A, int __R)\n+{\n+  __m512 __W;\n+  return (__m512) __builtin_ia32_rcp28ps_mask ((__v16sf) __A,\n+\t\t\t\t\t       (__v16sf) __W,\n+\t\t\t\t\t       (__mmask16) -1, __R);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_rcp28_round_ps (__m512 __W, __mmask16 __U, __m512 __A, int __R)\n+{\n+  return (__m512) __builtin_ia32_rcp28ps_mask ((__v16sf) __A,\n+\t\t\t\t\t       (__v16sf) __W,\n+\t\t\t\t\t       (__mmask16) __U, __R);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_rcp28_round_ps (__mmask16 __U, __m512 __A, int __R)\n+{\n+  return (__m512) __builtin_ia32_rcp28ps_mask ((__v16sf) __A,\n+\t\t\t\t\t       (__v16sf) _mm512_setzero_ps (),\n+\t\t\t\t\t       (__mmask16) __U, __R);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_rsqrt28_round_pd (__m512d __A, int __R)\n+{\n+  __m512d __W;\n+  return (__m512d) __builtin_ia32_rsqrt28pd_mask ((__v8df) __A,\n+\t\t\t\t\t\t  (__v8df) __W,\n+\t\t\t\t\t\t  (__mmask8) -1, __R);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_rsqrt28_round_pd (__m512d __W, __mmask8 __U, __m512d __A, int __R)\n+{\n+  return (__m512d) __builtin_ia32_rsqrt28pd_mask ((__v8df) __A,\n+\t\t\t\t\t\t  (__v8df) __W,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_rsqrt28_round_pd (__mmask8 __U, __m512d __A, int __R)\n+{\n+  return (__m512d) __builtin_ia32_rsqrt28pd_mask ((__v8df) __A,\n+\t\t\t\t\t\t  (__v8df) _mm512_setzero_pd (),\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_rsqrt28_round_ps (__m512 __A, int __R)\n+{\n+  __m512 __W;\n+  return (__m512) __builtin_ia32_rsqrt28ps_mask ((__v16sf) __A,\n+\t\t\t\t\t\t (__v16sf) __W,\n+\t\t\t\t\t\t (__mmask16) -1, __R);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_rsqrt28_round_ps (__m512 __W, __mmask16 __U, __m512 __A, int __R)\n+{\n+  return (__m512) __builtin_ia32_rsqrt28ps_mask ((__v16sf) __A,\n+\t\t\t\t\t\t (__v16sf) __W,\n+\t\t\t\t\t\t (__mmask16) __U, __R);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_rsqrt28_round_ps (__mmask16 __U, __m512 __A, int __R)\n+{\n+  return (__m512) __builtin_ia32_rsqrt28ps_mask ((__v16sf) __A,\n+\t\t\t\t\t\t (__v16sf) _mm512_setzero_ps (),\n+\t\t\t\t\t\t (__mmask16) __U, __R);\n+}\n+#else\n+#define _mm512_exp2a23_round_pd(A, C)            \\\n+    __builtin_ia32_exp2pd_mask(A, (__v8df)_mm512_setzero_pd(), -1, C)\n+\n+#define _mm512_mask_exp2a23_round_pd(W, U, A, C) \\\n+    __builtin_ia32_exp2pd_mask(A, W, U, C)\n+\n+#define _mm512_maskz_exp2a23_round_pd(U, A, C)   \\\n+    __builtin_ia32_exp2pd_mask(A, (__v8df)_mm512_setzero_pd(), U, C)\n+\n+#define _mm512_exp2a23_round_ps(A, C)            \\\n+    __builtin_ia32_exp2ps_mask(A, (__v16sf)_mm512_setzero_ps(), -1, C)\n+\n+#define _mm512_mask_exp2a23_round_ps(W, U, A, C) \\\n+    __builtin_ia32_exp2ps_mask(A, W, U, C)\n+\n+#define _mm512_maskz_exp2a23_round_ps(U, A, C)   \\\n+    __builtin_ia32_exp2ps_mask(A, (__v16sf)_mm512_setzero_ps(), U, C)\n+\n+#define _mm512_rcp28_round_pd(A, C)            \\\n+    __builtin_ia32_rcp28pd_mask(A, (__v8df)_mm512_setzero_pd(), -1, C)\n+\n+#define _mm512_mask_rcp28_round_pd(W, U, A, C) \\\n+    __builtin_ia32_rcp28pd_mask(A, W, U, C)\n+\n+#define _mm512_maskz_rcp28_round_pd(U, A, C)   \\\n+    __builtin_ia32_rcp28pd_mask(A, (__v8df)_mm512_setzero_pd(), U, C)\n+\n+#define _mm512_rcp28_round_ps(A, C)            \\\n+    __builtin_ia32_rcp28ps_mask(A, (__v16sf)_mm512_setzero_ps(), -1, C)\n+\n+#define _mm512_mask_rcp28_round_ps(W, U, A, C) \\\n+    __builtin_ia32_rcp28ps_mask(A, W, U, C)\n+\n+#define _mm512_maskz_rcp28_round_ps(U, A, C)   \\\n+    __builtin_ia32_rcp28ps_mask(A, (__v16sf)_mm512_setzero_ps(), U, C)\n+\n+#define _mm512_rsqrt28_round_pd(A, C)            \\\n+    __builtin_ia32_rsqrt28pd_mask(A, (__v8df)_mm512_setzero_pd(), -1, C)\n+\n+#define _mm512_mask_rsqrt28_round_pd(W, U, A, C) \\\n+    __builtin_ia32_rsqrt28pd_mask(A, W, U, C)\n+\n+#define _mm512_maskz_rsqrt28_round_pd(U, A, C)   \\\n+    __builtin_ia32_rsqrt28pd_mask(A, (__v8df)_mm512_setzero_pd(), U, C)\n+\n+#define _mm512_rsqrt28_round_ps(A, C)            \\\n+    __builtin_ia32_rsqrt28ps_mask(A, (__v16sf)_mm512_setzero_ps(), -1, C)\n+\n+#define _mm512_mask_rsqrt28_round_ps(W, U, A, C) \\\n+    __builtin_ia32_rsqrt28ps_mask(A, W, U, C)\n+\n+#define _mm512_maskz_rsqrt28_round_ps(U, A, C)   \\\n+    __builtin_ia32_rsqrt28ps_mask(A, (__v16sf)_mm512_setzero_ps(), U, C)\n+#endif\n+\n+#define _mm512_exp2a23_pd(A)                    \\\n+    _mm512_exp2a23_round_pd(A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_mask_exp2a23_pd(W, U, A)   \\\n+    _mm512_mask_exp2a23_round_pd(W, U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_maskz_exp2a23_pd(U, A)     \\\n+    _mm512_maskz_exp2a23_round_pd(U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_exp2a23_ps(A)                    \\\n+    _mm512_exp2a23_round_ps(A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_mask_exp2a23_ps(W, U, A)   \\\n+    _mm512_mask_exp2a23_round_ps(W, U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_maskz_exp2a23_ps(U, A)     \\\n+    _mm512_maskz_exp2a23_round_ps(U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_rcp28_pd(A)                    \\\n+    _mm512_rcp28_round_pd(A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_mask_rcp28_pd(W, U, A)   \\\n+    _mm512_mask_rcp28_round_pd(W, U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_maskz_rcp28_pd(U, A)     \\\n+    _mm512_maskz_rcp28_round_pd(U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_rcp28_ps(A)                    \\\n+    _mm512_rcp28_round_ps(A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_mask_rcp28_ps(W, U, A)   \\\n+    _mm512_mask_rcp28_round_ps(W, U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_maskz_rcp28_ps(U, A)     \\\n+    _mm512_maskz_rcp28_round_ps(U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_rsqrt28_pd(A)                    \\\n+    _mm512_rsqrt28_round_pd(A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_mask_rsqrt28_pd(W, U, A)   \\\n+    _mm512_mask_rsqrt28_round_pd(W, U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_maskz_rsqrt28_pd(U, A)     \\\n+    _mm512_maskz_rsqrt28_round_pd(U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_rsqrt28_ps(A)                    \\\n+    _mm512_rsqrt28_round_ps(A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_mask_rsqrt28_ps(W, U, A)   \\\n+    _mm512_mask_rsqrt28_round_ps(W, U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm512_maskz_rsqrt28_ps(U, A)     \\\n+    _mm512_maskz_rsqrt28_round_ps(U, A, _MM_FROUND_CUR_DIRECTION)\n+\n+#ifdef __DISABLE_AVX512ER__\n+#undef __DISABLE_AVX512ER__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512ER__ */\n+\n+#endif /* _AVX512ERINTRIN_H_INCLUDED */"}, {"sha": "f717d4601fc613e03ead5cd79574f671a3918a78", "filename": "gcc/config/i386/avx512fintrin.h", "status": "added", "additions": 12147, "deletions": 0, "changes": 12147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=756c585702ca72cc01388f51a960777a3d13d486"}, {"sha": "4dba640458dcb60dbeaad6dec257eccae2e2a6f2", "filename": "gcc/config/i386/avx512pfintrin.h", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h?ref=756c585702ca72cc01388f51a960777a3d13d486", "patch": "@@ -0,0 +1,130 @@\n+/* Copyright (C) 2013\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512pfintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512PFINTRIN_H_INCLUDED\n+#define _AVX512PFINTRIN_H_INCLUDED\n+\n+#ifndef __AVX512PF__\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512pf\")\n+#define __DISABLE_AVX512PF__\n+#endif /* __AVX512PF__ */\n+\n+/* Internal data types for implementing the intrinsics.  */\n+typedef long long __v8di __attribute__ ((__vector_size__ (64)));\n+typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+/* The Intel API is flexible enough that we must allow aliasing with other\n+   vector types, and their scalar components.  */\n+typedef long long __m512i __attribute__ ((__vector_size__ (64), __may_alias__));\n+\n+typedef unsigned char  __mmask8;\n+typedef unsigned short __mmask16;\n+\n+#ifdef __OPTIMIZE__\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_prefetch_i32gather_ps (__m512i index, __mmask16 mask,\n+\t\t\t\t   int const *addr, int scale, int hint)\n+{\n+  __builtin_ia32_gatherpfdps (mask, (__v16si) index, addr, scale, hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_prefetch_i64gather_ps (__m512i index, __mmask8 mask,\n+\t\t\t\t   int const *addr, int scale, int hint)\n+{\n+  __builtin_ia32_gatherpfqps (mask, (__v8di) index, addr, scale, hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_prefetch_i32scatter_ps (int const *addr, __m512i index, int scale,\n+\t\t\t       int hint)\n+{\n+  __builtin_ia32_scatterpfdps ((__mmask16) 0xFFFF, (__v16si) index, addr, scale,\n+\t\t\t       hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_prefetch_i32scatter_ps (int const *addr, __mmask16 mask,\n+\t\t\t\t    __m512i index, int scale, int hint)\n+{\n+  __builtin_ia32_scatterpfdps (mask, (__v16si) index, addr, scale, hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_prefetch_i64scatter_ps (int const *addr, __m512i index, int scale,\n+\t\t\t       int hint)\n+{\n+  __builtin_ia32_scatterpfqps ((__mmask8) 0xFF, (__v8di) index, addr, scale,\n+\t\t\t       hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_prefetch_i64scatter_ps (int const *addr, __mmask16 mask,\n+\t\t\t\t    __m512i index, int scale, int hint)\n+{\n+  __builtin_ia32_scatterpfqps (mask, (__v8di) index, addr, scale, hint);\n+}\n+#else\n+#define _mm512_mask_prefetch_i32gather_ps(INDEX, MASK, ADDR, SCALE, HINT)    \\\n+  __builtin_ia32_gatherpfdps ((__mmask16)MASK, (__v16si)(__m512i)INDEX,\t     \\\n+\t\t\t      (int const *)ADDR, (int)SCALE, (int)HINT)\n+\n+#define _mm512_mask_prefetch_i64gather_ps(INDEX, MASK, ADDR, SCALE, HINT)    \\\n+  __builtin_ia32_gatherpfqps ((__mmask8)MASK, (__v8di)(__m512i)INDEX,\t     \\\n+\t\t\t      (int const *)ADDR, (int)SCALE, (int)HINT)\n+\n+#define _mm512_prefetch_i32scatter_ps(ADDR, INDEX, SCALE, HINT)              \\\n+  __builtin_ia32_scatterpfdps ((__mmask16)0xFFFF, (__v16si)(__m512i)INDEX,   \\\n+\t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)\n+\n+#define _mm512_mask_prefetch_i32scatter_ps(ADDR, MASK, INDEX, SCALE, HINT)   \\\n+  __builtin_ia32_scatterpfdps ((__mmask16)MASK, (__v16si)(__m512i)INDEX,     \\\n+\t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)\n+\n+#define _mm512_prefetch_i64scatter_ps(ADDR, INDEX, SCALE, HINT)              \\\n+  __builtin_ia32_scatterpfqps ((__mmask8)0xFF, (__v8di)(__m512i)INDEX,\t     \\\n+\t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)\n+\n+#define _mm512_mask_prefetch_i64scatter_ps(ADDR, MASK, INDEX, SCALE, HINT)   \\\n+  __builtin_ia32_scatterpfqps ((__mmask8)MASK, (__v8di)(__m512i)INDEX,\t     \\\n+\t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)\n+#endif\n+\n+#ifdef __DISABLE_AVX512PF__\n+#undef __DISABLE_AVX512PF__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512PF__ */\n+\n+#endif /* _AVX512PFINTRIN_H_INCLUDED */"}, {"sha": "86ad31ea4780841491704b598080fa73358174cc", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=756c585702ca72cc01388f51a960777a3d13d486", "patch": "@@ -99,6 +99,15 @@ DEF_VECTOR_TYPE (V16HI, HI)\n DEF_VECTOR_TYPE (V32QI, QI)\n DEF_VECTOR_TYPE (V4UDI, UDI, V4DI)\n DEF_VECTOR_TYPE (V8USI, USI, V8SI)\n+DEF_VECTOR_TYPE (V16UHI, UHI, V16HI)\n+\n+# AVX512F vectors\n+DEF_VECTOR_TYPE (V32SF, FLOAT)\n+DEF_VECTOR_TYPE (V16SF, FLOAT)\n+DEF_VECTOR_TYPE (V8DF, DOUBLE)\n+DEF_VECTOR_TYPE (V8DI, DI)\n+DEF_VECTOR_TYPE (V16SI, SI)\n+DEF_VECTOR_TYPE (V64QI, QI)\n \n DEF_POINTER_TYPE (PCCHAR, CHAR, CONST)\n DEF_POINTER_TYPE (PCDOUBLE, DOUBLE, CONST)\n@@ -123,21 +132,29 @@ DEF_POINTER_TYPE (PV2SF, V2SF)\n DEF_POINTER_TYPE (PV4DF, V4DF)\n DEF_POINTER_TYPE (PV4DI, V4DI)\n DEF_POINTER_TYPE (PV4SF, V4SF)\n+DEF_POINTER_TYPE (PV8DF, V8DF)\n DEF_POINTER_TYPE (PV8SF, V8SF)\n DEF_POINTER_TYPE (PV4SI, V4SI)\n DEF_POINTER_TYPE (PV8SI, V8SI)\n+DEF_POINTER_TYPE (PV8DI, V8DI)\n+DEF_POINTER_TYPE (PV16SI, V16SI)\n+DEF_POINTER_TYPE (PV16SF, V16SF)\n \n DEF_POINTER_TYPE (PCV2SI, V2SI, CONST)\n DEF_POINTER_TYPE (PCV2DF, V2DF, CONST)\n DEF_POINTER_TYPE (PCV2SF, V2SF, CONST)\n DEF_POINTER_TYPE (PCV4DF, V4DF, CONST)\n DEF_POINTER_TYPE (PCV4SF, V4SF, CONST)\n+DEF_POINTER_TYPE (PCV8DF, V8DF, CONST)\n DEF_POINTER_TYPE (PCV8SF, V8SF, CONST)\n+DEF_POINTER_TYPE (PCV16SF, V16SF, CONST)\n \n DEF_POINTER_TYPE (PCV2DI, V2DI, CONST)\n DEF_POINTER_TYPE (PCV4SI, V4SI, CONST)\n DEF_POINTER_TYPE (PCV4DI, V4DI, CONST)\n DEF_POINTER_TYPE (PCV8SI, V8SI, CONST)\n+DEF_POINTER_TYPE (PCV8DI, V8DI, CONST)\n+DEF_POINTER_TYPE (PCV16SI, V16SI, CONST)\n \n DEF_FUNCTION_TYPE (FLOAT128)\n DEF_FUNCTION_TYPE (UINT64)\n@@ -165,6 +182,7 @@ DEF_FUNCTION_TYPE (UINT16, UINT16)\n DEF_FUNCTION_TYPE (UINT64, PUNSIGNED)\n DEF_FUNCTION_TYPE (V16QI, PCCHAR)\n DEF_FUNCTION_TYPE (V16QI, V16QI)\n+DEF_FUNCTION_TYPE (V16QI, V16SI)\n DEF_FUNCTION_TYPE (V2DF, PCDOUBLE)\n DEF_FUNCTION_TYPE (V2DF, V2DF)\n DEF_FUNCTION_TYPE (V2DF, V2SI)\n@@ -190,6 +208,8 @@ DEF_FUNCTION_TYPE (V4DF, V2DF)\n DEF_FUNCTION_TYPE (V4DF, V4DF)\n DEF_FUNCTION_TYPE (V4DF, V4SF)\n DEF_FUNCTION_TYPE (V4DF, V4SI)\n+DEF_FUNCTION_TYPE (V8DF, V8SI)\n+DEF_FUNCTION_TYPE (V8DF, V8DF)\n DEF_FUNCTION_TYPE (V4HI, V4HI)\n DEF_FUNCTION_TYPE (V4SF, PCFLOAT)\n DEF_FUNCTION_TYPE (V4SF, V2DF)\n@@ -207,6 +227,7 @@ DEF_FUNCTION_TYPE (V4SI, V4SI)\n DEF_FUNCTION_TYPE (V4SI, V8HI)\n DEF_FUNCTION_TYPE (V4SI, V8SI)\n DEF_FUNCTION_TYPE (V8HI, V16QI)\n+DEF_FUNCTION_TYPE (V8HI, V8DI)\n DEF_FUNCTION_TYPE (V8HI, V8HI)\n DEF_FUNCTION_TYPE (V8QI, V8QI)\n DEF_FUNCTION_TYPE (V8SF, PCFLOAT)\n@@ -216,10 +237,15 @@ DEF_FUNCTION_TYPE (V8SF, V4SF)\n DEF_FUNCTION_TYPE (V8SF, V8SF)\n DEF_FUNCTION_TYPE (V8SF, V8SI)\n DEF_FUNCTION_TYPE (V8SF, V8HI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF)\n+DEF_FUNCTION_TYPE (V8SI, V8DI)\n DEF_FUNCTION_TYPE (V8SI, V4SI)\n+DEF_FUNCTION_TYPE (V8SF, V8DF)\n+DEF_FUNCTION_TYPE (V8SF, V8DF, V8SF, QI)\n DEF_FUNCTION_TYPE (V8SI, V8SF)\n DEF_FUNCTION_TYPE (V32QI, V32QI)\n DEF_FUNCTION_TYPE (V32QI, V16QI)\n+DEF_FUNCTION_TYPE (V16HI, V16SI)\n DEF_FUNCTION_TYPE (V16HI, V16HI)\n DEF_FUNCTION_TYPE (V16HI, V8HI)\n DEF_FUNCTION_TYPE (V8SI, V8SI)\n@@ -239,6 +265,28 @@ DEF_FUNCTION_TYPE (V4DI, V8HI)\n DEF_FUNCTION_TYPE (V4DI, V4SI)\n DEF_FUNCTION_TYPE (V4DI, PV4DI)\n DEF_FUNCTION_TYPE (V4DI, V2DI)\n+DEF_FUNCTION_TYPE (V16SF, FLOAT)\n+DEF_FUNCTION_TYPE (V16SI, INT)\n+DEF_FUNCTION_TYPE (V8DF, DOUBLE)\n+DEF_FUNCTION_TYPE (V8DI, INT64)\n+DEF_FUNCTION_TYPE (V16SF, V4SF)\n+DEF_FUNCTION_TYPE (V8DF, V4DF)\n+DEF_FUNCTION_TYPE (V8DI, V4DI)\n+DEF_FUNCTION_TYPE (V16QI, V8DI)\n+DEF_FUNCTION_TYPE (UINT, V4SF)\n+DEF_FUNCTION_TYPE (UINT64, V4SF)\n+DEF_FUNCTION_TYPE (UINT, V2DF)\n+DEF_FUNCTION_TYPE (UINT64, V2DF)\n+DEF_FUNCTION_TYPE (V16SI, V16SI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, HI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, QI)\n+DEF_FUNCTION_TYPE (V16SI, PV4SI)\n+DEF_FUNCTION_TYPE (V16SF, PV4SF)\n+DEF_FUNCTION_TYPE (V8DI, PV4DI)\n+DEF_FUNCTION_TYPE (V8DF, PV4DF)\n+DEF_FUNCTION_TYPE (V8UHI, V8UHI)\n+DEF_FUNCTION_TYPE (V8USI, V8USI)\n \n DEF_FUNCTION_TYPE (DI, V2DI, INT)\n DEF_FUNCTION_TYPE (DOUBLE, V2DF, INT)\n@@ -270,6 +318,8 @@ DEF_FUNCTION_TYPE (V1DI, V1DI, V1DI)\n DEF_FUNCTION_TYPE (V1DI, V2SI, V2SI)\n DEF_FUNCTION_TYPE (V1DI, V8QI, V8QI)\n DEF_FUNCTION_TYPE (V2DF, PCV2DF, V2DI)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, UINT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, UINT64)\n DEF_FUNCTION_TYPE (V2DF, V2DF, DI)\n DEF_FUNCTION_TYPE (V2DF, V2DF, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, PCDOUBLE)\n@@ -295,16 +345,23 @@ DEF_FUNCTION_TYPE (V2SI, V2SI, V2SI)\n DEF_FUNCTION_TYPE (V2SI, V4HI, V4HI)\n DEF_FUNCTION_TYPE (V4DF, PCV4DF, V4DI)\n DEF_FUNCTION_TYPE (V4DF, V4DF, INT)\n+DEF_FUNCTION_TYPE (V4DF, V8DF, INT)\n+DEF_FUNCTION_TYPE (V4DF, V8DF, INT, V4DF, QI)\n DEF_FUNCTION_TYPE (V4DF, V4DF, V4DF)\n DEF_FUNCTION_TYPE (V4DF, V4DF, V4DI)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DI)\n DEF_FUNCTION_TYPE (V4HI, V2SI, V2SI)\n DEF_FUNCTION_TYPE (V4HI, V4HI, INT)\n DEF_FUNCTION_TYPE (V4HI, V4HI, SI)\n DEF_FUNCTION_TYPE (V4HI, V4HI, V4HI)\n DEF_FUNCTION_TYPE (V4HI, V8QI, V8QI)\n DEF_FUNCTION_TYPE (V4SF, PCV4SF, V4SI)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, UINT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, UINT64)\n DEF_FUNCTION_TYPE (V4SF, V4SF, DI)\n DEF_FUNCTION_TYPE (V4SF, V4SF, INT)\n+DEF_FUNCTION_TYPE (INT, V4SF, V4SF, INT, INT)\n+DEF_FUNCTION_TYPE (INT, V2DF, V2DF, INT, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, PCV2SF)\n DEF_FUNCTION_TYPE (V4SF, V4SF, SI)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V2DF)\n@@ -331,39 +388,86 @@ DEF_FUNCTION_TYPE (V8QI, V4HI, V4HI)\n DEF_FUNCTION_TYPE (V8QI, V8QI, V8QI)\n DEF_FUNCTION_TYPE (V8SF, PCV8SF, V8SI)\n DEF_FUNCTION_TYPE (V8SF, V8SF, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, INT)\n+DEF_FUNCTION_TYPE (V4SF, V16SF, INT)\n+DEF_FUNCTION_TYPE (V4SF, V16SF, INT, V4SF, QI)\n DEF_FUNCTION_TYPE (V8SF, V8SF, V8SF)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF)\n DEF_FUNCTION_TYPE (V8SF, V8SF, V8SI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SI)\n DEF_FUNCTION_TYPE (V32QI, V16HI, V16HI)\n DEF_FUNCTION_TYPE (V16HI, V8SI, V8SI)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V4DF, INT, V8DF, QI)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, INT, V8DF, QI)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, INT, V8DF, QI)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, V8DI, INT, QI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, INT, V16SF, HI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, INT, V16SF, HI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V4SI, INT, V16SI, HI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, V16SI, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, V16SI, INT, HI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, V16SI, INT, HI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SI, INT, QI)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SI, INT, QI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DI, INT, QI)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DI, INT, QI, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V4SF, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V4SF, INT, V16SF, HI)\n DEF_FUNCTION_TYPE (V32QI, V32QI, V32QI)\n DEF_FUNCTION_TYPE (V16HI, V32QI, V32QI)\n DEF_FUNCTION_TYPE (V16HI, V16HI, V8HI)\n DEF_FUNCTION_TYPE (V16HI, V16HI, V16HI)\n DEF_FUNCTION_TYPE (V16HI, V16HI, INT)\n+DEF_FUNCTION_TYPE (V16HI, V16SF, INT)\n+DEF_FUNCTION_TYPE (V16HI, V16SF, INT, V16HI, HI)\n+DEF_FUNCTION_TYPE (V16HI, V16HI, V16HI, INT, V16HI, HI)\n DEF_FUNCTION_TYPE (V16HI, V16HI, SI)\n DEF_FUNCTION_TYPE (V16HI, V16HI, V16HI, INT)\n DEF_FUNCTION_TYPE (V32QI, V32QI, V32QI, INT)\n DEF_FUNCTION_TYPE (V8SI, V4DF, V4DF)\n DEF_FUNCTION_TYPE (V8SI, V8SI, V4SI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V4SI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V4SI, INT)\n+DEF_FUNCTION_TYPE (V4SI, V16SI, INT)\n+DEF_FUNCTION_TYPE (V4SI, V16SI, INT, V4SI, QI)\n DEF_FUNCTION_TYPE (V8SI, V8SI, V8SI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, INT, V16SI, HI)\n DEF_FUNCTION_TYPE (V8SI, V16HI, V16HI)\n DEF_FUNCTION_TYPE (V8SI, V8SI, INT)\n DEF_FUNCTION_TYPE (V8SI, V8SI, SI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, SI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, INT)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V4SI, V16SI, HI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, INT, V16SI, HI)\n DEF_FUNCTION_TYPE (V8SI, PCV8SI, V8SI)\n DEF_FUNCTION_TYPE (V4DI, V4DI, V4DI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI)\n+DEF_FUNCTION_TYPE (V16SI, V8DF, V8DF)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, INT, V8DI, QI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V4DI, INT, V8DI, QI)\n DEF_FUNCTION_TYPE (V4DI, V8SI, V8SI)\n DEF_FUNCTION_TYPE (V4UDI, V8USI, V8USI)\n DEF_FUNCTION_TYPE (V4DI, V4DI, V2DI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V2DI)\n DEF_FUNCTION_TYPE (V4DI, PCV4DI, V4DI)\n+DEF_FUNCTION_TYPE (V4DI, V8DI, INT)\n+DEF_FUNCTION_TYPE (V4DI, V8DI, INT, V4DI, QI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V2DI, V8DI, QI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, INT, V8DI, QI)\n DEF_FUNCTION_TYPE (V4DI, V4DI, INT)\n DEF_FUNCTION_TYPE (V2DI, V4DI, INT)\n DEF_FUNCTION_TYPE (VOID, PVOID, INT64)\n DEF_FUNCTION_TYPE (VOID, PCHAR, V16QI)\n DEF_FUNCTION_TYPE (VOID, PCHAR, V32QI)\n DEF_FUNCTION_TYPE (VOID, PDOUBLE, V2DF)\n DEF_FUNCTION_TYPE (VOID, PDOUBLE, V4DF)\n+DEF_FUNCTION_TYPE (VOID, PDOUBLE, V8DF)\n DEF_FUNCTION_TYPE (VOID, PFLOAT, V4SF)\n DEF_FUNCTION_TYPE (VOID, PFLOAT, V8SF)\n+DEF_FUNCTION_TYPE (VOID, PFLOAT, V16SF)\n DEF_FUNCTION_TYPE (VOID, PINT, INT)\n DEF_FUNCTION_TYPE (VOID, PLONGLONG, LONGLONG)\n DEF_FUNCTION_TYPE (VOID, PULONGLONG, ULONGLONG)\n@@ -374,6 +478,34 @@ DEF_FUNCTION_TYPE (VOID, PV4DI, V4DI)\n DEF_FUNCTION_TYPE (VOID, PV4SF, V4SF)\n DEF_FUNCTION_TYPE (VOID, PV8SF, V8SF)\n DEF_FUNCTION_TYPE (VOID, UNSIGNED, UNSIGNED)\n+DEF_FUNCTION_TYPE (VOID, PV8DI, V8DI)\n+\n+# Instructions returning mask\n+DEF_FUNCTION_TYPE (HI, HI)\n+DEF_FUNCTION_TYPE (HI, HI, HI)\n+DEF_FUNCTION_TYPE (HI, HI, INT)\n+DEF_FUNCTION_TYPE (QI, V8DI, V8DI)\n+DEF_FUNCTION_TYPE (QI, V8DI, V8DI, QI)\n+DEF_FUNCTION_TYPE (HI, V16SI, V16SI)\n+DEF_FUNCTION_TYPE (HI, V16SI, V16SI, HI)\n+DEF_FUNCTION_TYPE (QI, V8DI, V8DI, INT)\n+DEF_FUNCTION_TYPE (QI, V8DI, V8DI, INT, QI)\n+DEF_FUNCTION_TYPE (HI, V16SI, V16SI, INT)\n+DEF_FUNCTION_TYPE (HI, V16SI, V16SI, INT ,HI)\n+DEF_FUNCTION_TYPE (QI, V8DF, V8DF, INT)\n+DEF_FUNCTION_TYPE (QI, V8DF, V8DF, INT, QI)\n+DEF_FUNCTION_TYPE (QI, V8DF, V8DF, INT, QI, INT)\n+DEF_FUNCTION_TYPE (HI, V16SF, V16SF, INT)\n+DEF_FUNCTION_TYPE (HI, V16SF, V16SF, INT, HI)\n+DEF_FUNCTION_TYPE (HI, V16SF, V16SF, INT, HI, INT)\n+DEF_FUNCTION_TYPE (QI, V2DF, V2DF, INT)\n+DEF_FUNCTION_TYPE (QI, V2DF, V2DF, INT, QI)\n+DEF_FUNCTION_TYPE (QI, V2DF, V2DF, INT, QI, INT)\n+DEF_FUNCTION_TYPE (QI, V4SF, V4SF, INT)\n+DEF_FUNCTION_TYPE (QI, V4SF, V4SF, INT, QI)\n+DEF_FUNCTION_TYPE (QI, V4SF, V4SF, INT, QI, INT)\n+DEF_FUNCTION_TYPE (V16SI, HI)\n+DEF_FUNCTION_TYPE (V8DI, QI)\n \n DEF_FUNCTION_TYPE (INT, V16QI, V16QI, INT)\n DEF_FUNCTION_TYPE (UCHAR, UINT, UINT, UINT)\n@@ -413,11 +545,69 @@ DEF_FUNCTION_TYPE (V8SF, V8SF, V4SF, INT)\n DEF_FUNCTION_TYPE (V8SF, V8SF, V8SF, INT)\n DEF_FUNCTION_TYPE (V8SF, V8SF, V8SF, V8SF)\n DEF_FUNCTION_TYPE (V8SF, V8SF, V8SF, V8SI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, V8DF)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, V16SF)\n DEF_FUNCTION_TYPE (V8SI, V8SI, V4SI, INT)\n DEF_FUNCTION_TYPE (V8SI, V8SI, V8SI, INT)\n DEF_FUNCTION_TYPE (V8SI, V8SI, V8SI, V8SI)\n DEF_FUNCTION_TYPE (V4DI, V4DI, V4DI, INT)\n DEF_FUNCTION_TYPE (V4DI, V4DI, V2DI, INT)\n+\n+# Instructions with masking\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, QI)\n+DEF_FUNCTION_TYPE (V8DF, V8SF, V8DF, QI)\n+DEF_FUNCTION_TYPE (V8DF, V8SI, V8DF, QI)\n+DEF_FUNCTION_TYPE (V8DI, V8SI, V8DI, QI)\n+DEF_FUNCTION_TYPE (V8DI, V8HI, V8DI, QI)\n+DEF_FUNCTION_TYPE (V8DI, V16QI, V8DI, QI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, V8DI, QI)\n+DEF_FUNCTION_TYPE (V8DF, V8DI, V8DF, V8DF)\n+DEF_FUNCTION_TYPE (V8DF, V8DI, V8DF, V8DF, QI)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DI, V8DF, QI)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, V8DF, QI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, V16SI, HI)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DF, QI)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V4SF, V2DF, QI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, HI)\n+DEF_FUNCTION_TYPE (V16SF, V16SI, V16SF, HI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, V16SF, HI)\n+DEF_FUNCTION_TYPE (V16SF, V16SI, V16SF, V16SF)\n+DEF_FUNCTION_TYPE (V16SF, V16SI, V16SF, V16SF, HI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SI, V16SF, HI)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V2DF, V4SF, QI)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SF, QI)\n+DEF_FUNCTION_TYPE (V16SF, V4SF, V16SF, HI)\n+DEF_FUNCTION_TYPE (V8DF, V4DF, V8DF, QI)\n+DEF_FUNCTION_TYPE (V8DF, V2DF, V8DF, QI)\n+DEF_FUNCTION_TYPE (V16SI, V4SI, V16SI, HI)\n+DEF_FUNCTION_TYPE (V16SI, SI, V16SI, HI)\n+DEF_FUNCTION_TYPE (V16SI, V16HI, V16SI, HI)\n+DEF_FUNCTION_TYPE (V16SI, V16QI, V16SI, HI)\n+DEF_FUNCTION_TYPE (V8SI, V8DF, V8SI, QI)\n+DEF_FUNCTION_TYPE (V8DI, V4DI, V8DI, QI)\n+DEF_FUNCTION_TYPE (V8DI, V2DI, V8DI, QI)\n+DEF_FUNCTION_TYPE (V8DI, DI, V8DI, QI)\n+DEF_FUNCTION_TYPE (V16SF, PCV16SF, V16SF, HI)\n+DEF_FUNCTION_TYPE (V8DF, PCV8DF, V8DF, QI)\n+DEF_FUNCTION_TYPE (V16SI, PCV16SI, V16SI, HI)\n+DEF_FUNCTION_TYPE (V8DI, PCV8DI, V8DI, QI)\n+DEF_FUNCTION_TYPE (V2DF, PCDOUBLE, V2DF, QI)\n+DEF_FUNCTION_TYPE (V4SF, PCFLOAT, V4SF, QI)\n+DEF_FUNCTION_TYPE (V16QI, V16SI, V16QI, HI)\n+DEF_FUNCTION_TYPE (V16HI, V16SI, V16HI, HI)\n+DEF_FUNCTION_TYPE (V8SI, V8DI, V8SI, QI)\n+DEF_FUNCTION_TYPE (V8HI, V8DI, V8HI, QI)\n+DEF_FUNCTION_TYPE (V16QI, V8DI, V16QI, QI)\n+DEF_FUNCTION_TYPE (VOID, PV8DF, V8DF, QI)\n+DEF_FUNCTION_TYPE (VOID, PV16SF, V16SF, HI)\n+DEF_FUNCTION_TYPE (VOID, PV8DI, V8DI, QI)\n+DEF_FUNCTION_TYPE (VOID, PV16SI, V16SI, HI)\n+DEF_FUNCTION_TYPE (VOID, PDOUBLE, V2DF, QI)\n+DEF_FUNCTION_TYPE (VOID, PFLOAT, V4SF, QI)\n+DEF_FUNCTION_TYPE (V16SI, V16SF, V16SI, HI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, V8DI, INT, QI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, V16SI, INT, HI)\n+\n DEF_FUNCTION_TYPE (VOID, PCVOID, UNSIGNED, UNSIGNED)\n DEF_FUNCTION_TYPE (VOID, PV2DF, V2DI, V2DF)\n DEF_FUNCTION_TYPE (VOID, PV4DF, V4DI, V4DF)\n@@ -439,6 +629,13 @@ DEF_FUNCTION_TYPE (V8UHI, V8UHI, V8UHI, V8UHI)\n DEF_FUNCTION_TYPE (V16UQI, V16UQI, V16UQI, V16UQI)\n DEF_FUNCTION_TYPE (V4DF, V4DF, V4DF, V4DI)\n DEF_FUNCTION_TYPE (V8SF, V8SF, V8SF, V8SI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, V8DI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, V16SI)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DI, V8DF)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SI, V16SF)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, INT, V4SF, QI)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, INT, V2DF, QI)\n+DEF_FUNCTION_TYPE (V8DI, V16SI, V16SI, V8DI, QI)\n \n DEF_FUNCTION_TYPE (V2DI, V2DI, V2DI, UINT, UINT)\n DEF_FUNCTION_TYPE (V4HI, HI, HI, HI, HI)\n@@ -451,6 +648,43 @@ DEF_FUNCTION_TYPE (V8QI, QI, QI, QI, QI, QI, QI, QI, QI)\n DEF_FUNCTION_TYPE (UCHAR, UCHAR, UINT, UINT, PUNSIGNED)\n DEF_FUNCTION_TYPE (UCHAR, UCHAR, ULONGLONG, ULONGLONG, PULONGLONG)\n \n+# Instructions with rounding\n+DEF_FUNCTION_TYPE (UINT64, V2DF, INT)\n+DEF_FUNCTION_TYPE (UINT64, V4SF, INT)\n+DEF_FUNCTION_TYPE (UINT, V2DF, INT)\n+DEF_FUNCTION_TYPE (UINT, V4SF, INT)\n+DEF_FUNCTION_TYPE (INT64, V2DF, INT)\n+DEF_FUNCTION_TYPE (INT64, V4SF, INT)\n+DEF_FUNCTION_TYPE (INT, V2DF, INT)\n+DEF_FUNCTION_TYPE (INT, V4SF, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, UINT64, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, UINT64, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, UINT, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, INT64, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, INT64, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, INT, INT)\n+DEF_FUNCTION_TYPE (V16SI, V16SF, V16SI, HI, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SI, V16SF, HI, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, HI, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16HI, V16SF, HI, INT)\n+DEF_FUNCTION_TYPE (V8SI, V8DF, V8SI, QI, INT)\n+DEF_FUNCTION_TYPE (V8SF, V8DF, V8SF, QI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, QI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8SF, V8DF, QI, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, V16SF, HI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, V8DF, QI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SF, QI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V2DF, V4SF, QI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DF, QI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V4SF, V2DF, QI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DF, INT)\n+\n+DEF_FUNCTION_TYPE (V16SF, V16SF, INT, V16SF, HI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, INT, V8DF, QI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, INT, V4SF, QI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, INT, V2DF, QI, INT)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, SI, V8DI, V8DI)\n+\n DEF_FUNCTION_TYPE (V2DF, V2DF, PCDOUBLE, V4SI, V2DF, INT)\n DEF_FUNCTION_TYPE (V4DF, V4DF, PCDOUBLE, V4SI, V4DF, INT)\n DEF_FUNCTION_TYPE (V4DF, V4DF, PCDOUBLE, V8SI, V4DF, INT)\n@@ -472,13 +706,38 @@ DEF_FUNCTION_TYPE (V4SI, V4SI, PCINT, V2DI, V4SI, INT)\n DEF_FUNCTION_TYPE (V4SI, V4SI, PCINT, V4DI, V4SI, INT)\n DEF_FUNCTION_TYPE (V8SI, V8SI, PCINT, V4DI, V8SI, INT)\n \n+DEF_FUNCTION_TYPE (V16SF, V16SF, PCFLOAT, V16SI, HI, INT)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, PCFLOAT, V8DI, HI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, PCDOUBLE, V8SI, QI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, PCDOUBLE, V16SI, QI, INT)\n+DEF_FUNCTION_TYPE (V8SF, V8SF, PCFLOAT, V8DI, QI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, PCDOUBLE, V8DI, QI, INT)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, PCINT, V16SI, HI, INT)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, PCINT, V8DI, HI, INT)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, PCINT64, V8SI, QI, INT)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, PCINT64, V16SI, QI, INT)\n+DEF_FUNCTION_TYPE (V8SI, V8SI, PCINT, V8DI, QI, INT)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, PCINT64, V8DI, QI, INT)\n+DEF_FUNCTION_TYPE (VOID, PFLOAT, HI, V16SI, V16SF, INT)\n+DEF_FUNCTION_TYPE (VOID, PDOUBLE, QI, V8SI, V8DF, INT)\n+DEF_FUNCTION_TYPE (VOID, PFLOAT, QI, V8DI, V8SF, INT)\n+DEF_FUNCTION_TYPE (VOID, PDOUBLE, QI, V8DI, V8DF, INT)\n+DEF_FUNCTION_TYPE (VOID, PINT, HI, V16SI, V16SI, INT)\n+DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V8SI, V8DI, INT)\n+DEF_FUNCTION_TYPE (VOID, PINT, QI, V8DI, V8SI, INT)\n+DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V8DI, V8DI, INT)\n+\n+DEF_FUNCTION_TYPE (VOID, HI, V16SI, PCINT, INT, INT)\n+DEF_FUNCTION_TYPE (VOID, QI, V8DI, PCINT, INT, INT)\n+\n DEF_FUNCTION_TYPE_ALIAS (V2DF_FTYPE_V2DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V4DF_FTYPE_V4DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V4SF_FTYPE_V4SF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V8SF_FTYPE_V8SF, ROUND)\n \n DEF_FUNCTION_TYPE_ALIAS (V4SI_FTYPE_V2DF_V2DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V8SI_FTYPE_V4DF_V4DF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V16SI_FTYPE_V8DF_V8DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V4SI_FTYPE_V4SF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V8SI_FTYPE_V8SF, ROUND)\n "}, {"sha": "95ebf52d2b5cac63b9e340cf51d25351c32e3735", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1705, "deletions": 40, "changes": 1745, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=756c585702ca72cc01388f51a960777a3d13d486"}, {"sha": "fa75a30ba79c29733e7a68436e42b36707a06f2d", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=756c585702ca72cc01388f51a960777a3d13d486", "patch": "@@ -42,6 +42,14 @@\n \n #include <avx2intrin.h>\n \n+#include <avx512fintrin.h>\n+\n+#include <avx512erintrin.h>\n+\n+#include <avx512pfintrin.h>\n+\n+#include <avx512cdintrin.h>\n+\n #include <lzcntintrin.h>\n \n #include <bmiintrin.h>"}, {"sha": "240a964a47e7b2e268a9461c6f247bc11564c8f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=756c585702ca72cc01388f51a960777a3d13d486", "patch": "@@ -1,12 +1,26 @@\n 2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n-\tMaxim Kuznetsov  <maxim.kuznetsov@intel.com>\n-\tSergey Lega  <sergey.s.lega@intel.com>\n-\tAnna Tikhonova  <anna.tikhonova@intel.com>\n-\tIlya Tocar  <ilya.tocar@intel.com>\n-\tAndrey Turetskiy  <andrey.turetskiy@intel.com>\n-\tIlya Verbin  <ilya.verbin@intel.com>\n-\tKirill Yukhin  <kirill.yukhin@intel.com>\n-\tMichael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Extend to AVX-512.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\n+2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n \t* gcc.target/i386/pr49002-2.c: allow vmovapd generation.\n "}, {"sha": "75b6f04e24b3909c396403cc7291371a3bd42dec", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=756c585702ca72cc01388f51a960777a3d13d486", "patch": "@@ -166,6 +166,181 @@\n /* rtmintrin.h */\n #define __builtin_ia32_xabort(I) __builtin_ia32_xabort(0)\n \n+/* avx512fintrin.h */\n+#define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_alignd512_mask(A, B, F, D, E) __builtin_ia32_alignd512_mask(A, B, 1, D, E)\n+#define __builtin_ia32_alignq512_mask(A, B, F, D, E) __builtin_ia32_alignq512_mask(A, B, 1, D, E)\n+#define __builtin_ia32_cmpd512_mask(A, B, E, D) __builtin_ia32_cmpd512_mask(A, B, 1, D)\n+#define __builtin_ia32_cmppd512_mask(A, B, F, D, E) __builtin_ia32_cmppd512_mask(A, B, 1, D, 5)\n+#define __builtin_ia32_cmpps512_mask(A, B, F, D, E) __builtin_ia32_cmpps512_mask(A, B, 1, D, 5)\n+#define __builtin_ia32_cmpq512_mask(A, B, E, D) __builtin_ia32_cmpq512_mask(A, B, 1, D)\n+#define __builtin_ia32_cmpsd_mask(A, B, F, D, E) __builtin_ia32_cmpsd_mask(A, B, 1, D, 5)\n+#define __builtin_ia32_cmpss_mask(A, B, F, D, E) __builtin_ia32_cmpss_mask(A, B, 1, D, 5)\n+#define __builtin_ia32_cvtdq2ps512_mask(A, B, C, D) __builtin_ia32_cvtdq2ps512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtpd2dq512_mask(A, B, C, D) __builtin_ia32_cvtpd2dq512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtpd2ps512_mask(A, B, C, D) __builtin_ia32_cvtpd2ps512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtpd2udq512_mask(A, B, C, D) __builtin_ia32_cvtpd2udq512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtps2dq512_mask(A, B, C, D) __builtin_ia32_cvtps2dq512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtps2pd512_mask(A, B, C, D) __builtin_ia32_cvtps2pd512_mask(A, B, C, 5)\n+#define __builtin_ia32_cvtps2udq512_mask(A, B, C, D) __builtin_ia32_cvtps2udq512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtsd2ss_mask(A, B, C, D, E) __builtin_ia32_cvtsd2ss_mask(A, B, C, D, 1)\n+#define __builtin_ia32_cvtsi2sd64(A, B, C) __builtin_ia32_cvtsi2sd64(A, B, 1)\n+#define __builtin_ia32_cvtsi2ss32(A, B, C) __builtin_ia32_cvtsi2ss32(A, B, 1)\n+#define __builtin_ia32_cvtsi2ss64(A, B, C) __builtin_ia32_cvtsi2ss64(A, B, 1)\n+#define __builtin_ia32_cvtss2sd_mask(A, B, C, D, E) __builtin_ia32_cvtss2sd_mask(A, B, C, D, 5)\n+#define __builtin_ia32_cvttpd2dq512_mask(A, B, C, D) __builtin_ia32_cvttpd2dq512_mask(A, B, C, 5)\n+#define __builtin_ia32_cvttpd2udq512_mask(A, B, C, D) __builtin_ia32_cvttpd2udq512_mask(A, B, C, 5)\n+#define __builtin_ia32_cvttps2dq512_mask(A, B, C, D) __builtin_ia32_cvttps2dq512_mask(A, B, C, 5)\n+#define __builtin_ia32_cvttps2udq512_mask(A, B, C, D) __builtin_ia32_cvttps2udq512_mask(A, B, C, 5)\n+#define __builtin_ia32_cvtudq2ps512_mask(A, B, C, D) __builtin_ia32_cvtudq2ps512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtusi2sd64(A, B, C) __builtin_ia32_cvtusi2sd64(A, B, 1)\n+#define __builtin_ia32_cvtusi2ss32(A, B, C) __builtin_ia32_cvtusi2ss32(A, B, 1)\n+#define __builtin_ia32_cvtusi2ss64(A, B, C) __builtin_ia32_cvtusi2ss64(A, B, 1)\n+#define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_extractf32x4_mask(A, E, C, D) __builtin_ia32_extractf32x4_mask(A, 1, C, D)\n+#define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n+#define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n+#define __builtin_ia32_extracti64x4_mask(A, E, C, D) __builtin_ia32_extracti64x4_mask(A, 1, C, D)\n+#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmpd512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmps512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmsd_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmss_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(A, B, C, 1, E, 5)\n+#define __builtin_ia32_gatherdiv8df(A, B, C, D, F) __builtin_ia32_gatherdiv8df(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv8di(A, B, C, D, F) __builtin_ia32_gatherdiv8di(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv16sf(A, B, C, D, F) __builtin_ia32_gatherdiv16sf(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv16si(A, B, C, D, F) __builtin_ia32_gatherdiv16si(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv16sf(A, B, C, D, F) __builtin_ia32_gathersiv16sf(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv16si(A, B, C, D, F) __builtin_ia32_gathersiv16si(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv8df(A, B, C, D, F) __builtin_ia32_gathersiv8df(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv8di(A, B, C, D, F) __builtin_ia32_gathersiv8di(A, B, C, D, 1)\n+#define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 5)\n+#define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 5)\n+#define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_insertf32x4_mask(A, B, F, D, E) __builtin_ia32_insertf32x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_insertf64x4_mask(A, B, F, D, E) __builtin_ia32_insertf64x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_inserti32x4_mask(A, B, F, D, E) __builtin_ia32_inserti32x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_inserti64x4_mask(A, B, F, D, E) __builtin_ia32_inserti64x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_permdf512_mask(A, E, C, D) __builtin_ia32_permdf512_mask(A, 1, C, D)\n+#define __builtin_ia32_permdi512_mask(A, E, C, D) __builtin_ia32_permdi512_mask(A, 1, C, D)\n+#define __builtin_ia32_prold512_mask(A, E, C, D) __builtin_ia32_prold512_mask(A, 1, C, D)\n+#define __builtin_ia32_prolq512_mask(A, E, C, D) __builtin_ia32_prolq512_mask(A, 1, C, D)\n+#define __builtin_ia32_prord512_mask(A, E, C, D) __builtin_ia32_prord512_mask(A, 1, C, D)\n+#define __builtin_ia32_prorq512_mask(A, E, C, D) __builtin_ia32_prorq512_mask(A, 1, C, D)\n+#define __builtin_ia32_pshufd512_mask(A, E, C, D) __builtin_ia32_pshufd512_mask(A, 1, C, D)\n+#define __builtin_ia32_pslldi512_mask(A, E, C, D) __builtin_ia32_pslldi512_mask(A, 1, C, D)\n+#define __builtin_ia32_psllqi512_mask(A, E, C, D) __builtin_ia32_psllqi512_mask(A, 1, C, D)\n+#define __builtin_ia32_psradi512_mask(A, E, C, D) __builtin_ia32_psradi512_mask(A, 1, C, D)\n+#define __builtin_ia32_psraqi512_mask(A, E, C, D) __builtin_ia32_psraqi512_mask(A, 1, C, D)\n+#define __builtin_ia32_psrldi512_mask(A, E, C, D) __builtin_ia32_psrldi512_mask(A, 1, C, D)\n+#define __builtin_ia32_psrlqi512_mask(A, E, C, D) __builtin_ia32_psrlqi512_mask(A, 1, C, D)\n+#define __builtin_ia32_pternlogd512_mask(A, B, C, F, E) __builtin_ia32_pternlogd512_mask(A, B, C, 1, E)\n+#define __builtin_ia32_pternlogd512_maskz(A, B, C, F, E) __builtin_ia32_pternlogd512_maskz(A, B, C, 1, E)\n+#define __builtin_ia32_pternlogq512_mask(A, B, C, F, E) __builtin_ia32_pternlogq512_mask(A, B, C, 1, E)\n+#define __builtin_ia32_pternlogq512_maskz(A, B, C, F, E) __builtin_ia32_pternlogq512_maskz(A, B, C, 1, E)\n+#define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_rndscalesd_mask(A, B, I, D, E, F) __builtin_ia32_rndscalesd_mask(A, B, 1, D, E, 5)\n+#define __builtin_ia32_rndscaless_mask(A, B, I, D, E, F) __builtin_ia32_rndscaless_mask(A, B, 1, D, E, 5)\n+#define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_scatterdiv8df(A, B, C, D, F) __builtin_ia32_scatterdiv8df(A, B, C, D, 1)\n+#define __builtin_ia32_scatterdiv8di(A, B, C, D, F) __builtin_ia32_scatterdiv8di(A, B, C, D, 1)\n+#define __builtin_ia32_scatterdiv16sf(A, B, C, D, F) __builtin_ia32_scatterdiv16sf(A, B, C, D, 1)\n+#define __builtin_ia32_scatterdiv16si(A, B, C, D, F) __builtin_ia32_scatterdiv16si(A, B, C, D, 1)\n+#define __builtin_ia32_scattersiv16sf(A, B, C, D, F) __builtin_ia32_scattersiv16sf(A, B, C, D, 1)\n+#define __builtin_ia32_scattersiv16si(A, B, C, D, F) __builtin_ia32_scattersiv16si(A, B, C, D, 1)\n+#define __builtin_ia32_scattersiv8df(A, B, C, D, F) __builtin_ia32_scattersiv8df(A, B, C, D, 1)\n+#define __builtin_ia32_scattersiv8di(A, B, C, D, F) __builtin_ia32_scattersiv8di(A, B, C, D, 1)\n+#define __builtin_ia32_shuf_f32x4_mask(A, B, F, D, E) __builtin_ia32_shuf_f32x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_shuf_f64x2_mask(A, B, F, D, E) __builtin_ia32_shuf_f64x2_mask(A, B, 1, D, E)\n+#define __builtin_ia32_shuf_i32x4_mask(A, B, F, D, E) __builtin_ia32_shuf_i32x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_shuf_i64x2_mask(A, B, F, D, E) __builtin_ia32_shuf_i64x2_mask(A, B, 1, D, E)\n+#define __builtin_ia32_shufpd512_mask(A, B, F, D, E) __builtin_ia32_shufpd512_mask(A, B, 1, D, E)\n+#define __builtin_ia32_shufps512_mask(A, B, F, D, E) __builtin_ia32_shufps512_mask(A, B, 1, D, E)\n+#define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 1)\n+#define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 1)\n+#define __builtin_ia32_sqrtsd_mask(A, B, C, D, E) __builtin_ia32_sqrtsd_mask(A, B, C, D, 1)\n+#define __builtin_ia32_sqrtss_mask(A, B, C, D, E) __builtin_ia32_sqrtss_mask(A, B, C, D, 1)\n+#define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_ucmpd512_mask(A, B, E, D) __builtin_ia32_ucmpd512_mask(A, B, 1, D)\n+#define __builtin_ia32_ucmpq512_mask(A, B, E, D) __builtin_ia32_ucmpq512_mask(A, B, 1, D)\n+#define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 5)\n+#define __builtin_ia32_vcomiss(A, B, C, D) __builtin_ia32_vcomiss(A, B, 1, 5)\n+#define __builtin_ia32_vcvtph2ps512_mask(A, B, C, D) __builtin_ia32_vcvtph2ps512_mask(A, B, C, 5)\n+#define __builtin_ia32_vcvtps2ph512_mask(A, E, C, D) __builtin_ia32_vcvtps2ph512_mask(A, 1, C, D)\n+#define __builtin_ia32_vcvtsd2si32(A, B) __builtin_ia32_vcvtsd2si32(A, 1)\n+#define __builtin_ia32_vcvtsd2si64(A, B) __builtin_ia32_vcvtsd2si64(A, 1)\n+#define __builtin_ia32_vcvtsd2usi32(A, B) __builtin_ia32_vcvtsd2usi32(A, 1)\n+#define __builtin_ia32_vcvtsd2usi64(A, B) __builtin_ia32_vcvtsd2usi64(A, 1)\n+#define __builtin_ia32_vcvtss2si32(A, B) __builtin_ia32_vcvtss2si32(A, 1)\n+#define __builtin_ia32_vcvtss2si64(A, B) __builtin_ia32_vcvtss2si64(A, 1)\n+#define __builtin_ia32_vcvtss2usi32(A, B) __builtin_ia32_vcvtss2usi32(A, 1)\n+#define __builtin_ia32_vcvtss2usi64(A, B) __builtin_ia32_vcvtss2usi64(A, 1)\n+#define __builtin_ia32_vcvttsd2si32(A, B) __builtin_ia32_vcvttsd2si32(A, 5)\n+#define __builtin_ia32_vcvttsd2si64(A, B) __builtin_ia32_vcvttsd2si64(A, 5)\n+#define __builtin_ia32_vcvttsd2usi32(A, B) __builtin_ia32_vcvttsd2usi32(A, 5)\n+#define __builtin_ia32_vcvttsd2usi64(A, B) __builtin_ia32_vcvttsd2usi64(A, 5)\n+#define __builtin_ia32_vcvttss2si32(A, B) __builtin_ia32_vcvttss2si32(A, 5)\n+#define __builtin_ia32_vcvttss2si64(A, B) __builtin_ia32_vcvttss2si64(A, 5)\n+#define __builtin_ia32_vcvttss2usi32(A, B) __builtin_ia32_vcvttss2usi32(A, 5)\n+#define __builtin_ia32_vcvttss2usi64(A, B) __builtin_ia32_vcvttss2usi64(A, 5)\n+#define __builtin_ia32_vfmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddps512_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsd3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddss3_mask(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmsubps512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vpermilpd512_mask(A, E, C, D) __builtin_ia32_vpermilpd512_mask(A, 1, C, D)\n+#define __builtin_ia32_vpermilps512_mask(A, E, C, D) __builtin_ia32_vpermilps512_mask(A, 1, C, D)\n+#define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask(A, B, C, 1)\n+#define __builtin_ia32_exp2pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask(A, B, C, 1)\n+#define __builtin_ia32_rcp28ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask(A, B, C, 1)\n+#define __builtin_ia32_rcp28pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask(A, B, C, 1)\n+#define __builtin_ia32_rsqrt28ps_mask(A, B, C, D) __builtin_ia32_rsqrt28ps_mask(A, B, C, 1)\n+#define __builtin_ia32_rsqrt28pd_mask(A, B, C, D) __builtin_ia32_rsqrt28pd_mask(A, B, C, 1)\n+#define __builtin_ia32_gatherpfdps(A, B, C, D, E) __builtin_ia32_gatherpfdps(A, B, C, 1, 1)\n+#define __builtin_ia32_gatherpfqps(A, B, C, D, E) __builtin_ia32_gatherpfqps(A, B, C, 1, 1)\n+#define __builtin_ia32_scatterpfdps(A, B, C, D, E) __builtin_ia32_scatterpfdps(A, B, C, 1, 1)\n+#define __builtin_ia32_scatterpfqps(A, B, C, D, E) __builtin_ia32_scatterpfqps(A, B, C, 1, 1)\n+\n #include <wmmintrin.h>\n #include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "6f625ad11c95c747789a033dfa511f90f3558b66", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 421, "deletions": 3, "changes": 424, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=756c585702ca72cc01388f51a960777a3d13d486", "patch": "@@ -30,6 +30,10 @@\n   type _CONCAT(_,func) (op1_type A, int const I, int const L)\t\t\\\n   { return func (A, imm1, imm2); }\n \n+#define test_1y(func, type, op1_type, imm1, imm2, imm3)\t\t\t\\\n+  type _CONCAT(_,func) (op1_type A, int const I, int const L, int const R)\\\n+  { return func (A, imm1, imm2, imm3); }\n+\n #define test_2(func, type, op1_type, op2_type, imm)\t\t\t\\\n   type _CONCAT(_,func) (op1_type A, op2_type B, int const I)\t\t\\\n   { return func (A, B, imm); }\n@@ -38,19 +42,64 @@\n   type _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n   { return func (A, B, imm1, imm2); }\n \n+#define test_2y(func, type, op1_type, op2_type, imm1, imm2, imm3)\t \\\n+  type _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L,\\\n+\t\t\tint const R)\t\t\t\t\t \\\n+  { return func (A, B, imm1, imm2, imm3); }\n+\n+#define test_2vx(func, op1_type, op2_type, imm1, imm2)     \\\n+  _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n+  { func (A, B, imm1, imm2); }\n+\n #define test_3(func, type, op1_type, op2_type, op3_type, imm)\t\t\\\n   type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n \t\t\top3_type C, int const I)\t\t\t\\\n   { return func (A, B, C, imm); }\n \n+#define test_3x(func, type, op1_type, op2_type, op3_type, imm1, imm2)\t\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n+\t\t\top3_type C, int const I, int const L)\t\t\t\\\n+  { return func (A, B, C, imm1, imm2); }\n+\n+#define test_3y(func, type, op1_type, op2_type, op3_type, imm1, imm2, imm3)\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n+\t\t\top3_type C, int const I, int const L, int const R)\t\\\n+  { return func (A, B, C, imm1, imm2, imm3); }\n+\n+#define test_3v(func, op1_type, op2_type, op3_type, imm)\t\t\\\n+  _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n+\t\t   op3_type C, int const I)\t\t\t\t\\\n+  { func (A, B, C, imm); }\n+\n+#define test_3vx(func, op1_type, op2_type, op3_type, imm1, imm2)   \\\n+  _CONCAT(_,func) (op1_type A, op2_type B,             \\\n+           op3_type C, int const I, int const L)       \\\n+  { func (A, B, C, imm1, imm2); }\n+\n #define test_4(func, type, op1_type, op2_type, op3_type, op4_type, imm)\t\\\n   type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n \t\t\top3_type C, op4_type D, int const I)\t\t\\\n   { return func (A, B, C, D, imm); }\n \n+#define test_4x(func, type, op1_type, op2_type, op3_type, op4_type, imm1, imm2)\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n+\t\t\top3_type C, op4_type D, int const I, int const L)\t\t\\\n+  { return func (A, B, C, D, imm1, imm2); }\n+\n+#define test_4y(func, type, op1_type, op2_type, op3_type, op4_type, imm1, imm2, imm3)\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B,\top3_type C,\t\t\\\n+\t\t\top4_type D, int const I, int const L, int const R)\t\t\\\n+  { return func (A, B, C, D, imm1, imm2, imm3); }\n+\n+\n+#define test_4v(func, op1_type, op2_type, op3_type, op4_type, imm)\t\\\n+  _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n+\t\t   op3_type C, op4_type D, int const I)\t\t\t\\\n+  { func (A, B, C, D, imm); }\n+\n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512pf,avx512er,avx512cd\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -163,9 +212,9 @@ test_4 (_mm_cmpestro, int, __m128i, int, __m128i, int, 1)\n test_4 (_mm_cmpestrs, int, __m128i, int, __m128i, int, 1)\n test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n-/* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM) */\n+/* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)\n@@ -248,6 +297,375 @@ test_2 ( _mm256_i64gather_epi32, __m128i, int const *, __m256i, 1)\n /* rtmintrin.h */\n test_0 ( _xabort, void, 1)\n \n+/* avx512fintrin.h */\n+test_1 (_mm512_cvt_roundepi32_ps, __m512, __m512i, 1)\n+test_1 (_mm512_cvt_roundepu32_ps, __m512, __m512i, 1)\n+test_1 (_mm512_cvt_roundpd_epi32, __m256i, __m512d, 1)\n+test_1 (_mm512_cvt_roundpd_epu32, __m256i, __m512d, 1)\n+test_1 (_mm512_cvt_roundpd_ps, __m256, __m512d, 1)\n+test_1 (_mm512_cvt_roundph_ps, __m512, __m256i, 5)\n+test_1 (_mm512_cvt_roundps_epi32, __m512i, __m512, 1)\n+test_1 (_mm512_cvt_roundps_epu32, __m512i, __m512, 1)\n+test_1 (_mm512_cvt_roundps_pd, __m512d, __m256, 5)\n+test_1 (_mm512_cvtps_ph, __m256i, __m512, 1)\n+test_1 (_mm512_cvtt_roundpd_epi32, __m256i, __m512d, 5)\n+test_1 (_mm512_cvtt_roundpd_epu32, __m256i, __m512d, 5)\n+test_1 (_mm512_cvtt_roundps_epi32, __m512i, __m512, 5)\n+test_1 (_mm512_cvtt_roundps_epu32, __m512i, __m512, 5)\n+test_1 (_mm512_extractf32x4_ps, __m128, __m512, 1)\n+test_1 (_mm512_extractf64x4_pd, __m256d, __m512d, 1)\n+test_1 (_mm512_extracti32x4_epi32, __m128i, __m512i, 1)\n+test_1 (_mm512_extracti64x4_epi64, __m256i, __m512i, 1)\n+test_1 (_mm512_getexp_round_pd, __m512d, __m512d, 5)\n+test_1 (_mm512_getexp_round_ps, __m512, __m512, 5)\n+test_1y (_mm512_getmant_round_pd, __m512d, __m512d, 1, 1, 5)\n+test_1y (_mm512_getmant_round_ps, __m512, __m512, 1, 1, 5)\n+test_1 (_mm512_permute_pd, __m512d, __m512d, 1)\n+test_1 (_mm512_permute_ps, __m512, __m512, 1)\n+test_1 (_mm512_permutex_epi64, __m512i, __m512i, 1)\n+test_1 (_mm512_permutex_pd, __m512d, __m512d, 1)\n+test_1 (_mm512_rol_epi32, __m512i, __m512i, 1)\n+test_1 (_mm512_rol_epi64, __m512i, __m512i, 1)\n+test_1 (_mm512_ror_epi32, __m512i, __m512i, 1)\n+test_1 (_mm512_ror_epi64, __m512i, __m512i, 1)\n+test_1 (_mm512_shuffle_epi32, __m512i, __m512i, 1)\n+test_1 (_mm512_slli_epi32, __m512i, __m512i, 1)\n+test_1 (_mm512_slli_epi64, __m512i, __m512i, 1)\n+test_1 (_mm512_sqrt_round_pd, __m512d, __m512d, 1)\n+test_1 (_mm512_sqrt_round_ps, __m512, __m512, 1)\n+test_1 (_mm512_srai_epi32, __m512i, __m512i, 1)\n+test_1 (_mm512_srai_epi64, __m512i, __m512i, 1)\n+test_1 (_mm512_srli_epi32, __m512i, __m512i, 1)\n+test_1 (_mm512_srli_epi64, __m512i, __m512i, 1)\n+test_1 (_mm_cvt_roundsd_i32, int, __m128d, 1)\n+test_1 (_mm_cvt_roundsd_u32, unsigned, __m128d, 1)\n+test_1 (_mm_cvt_roundss_i32, int, __m128, 1)\n+test_1 (_mm_cvt_roundss_u32, unsigned, __m128, 1)\n+test_1 (_mm_cvtt_roundsd_i32, int, __m128d, 5)\n+test_1 (_mm_cvtt_roundsd_u32, unsigned, __m128d, 5)\n+test_1 (_mm_cvtt_roundss_i32, int, __m128, 5)\n+test_1 (_mm_cvtt_roundss_u32, unsigned, __m128, 5)\n+test_1x (_mm512_getmant_pd, __m512d, __m512d, 1, 1)\n+test_1x (_mm512_getmant_ps, __m512, __m512, 1, 1)\n+test_1x (_mm_cvt_roundi32_ss, __m128, __m128, 1, 1)\n+test_2 (_mm512_add_round_pd, __m512d, __m512d, __m512d, 1)\n+test_2 (_mm512_add_round_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm512_alignr_epi32, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_alignr_epi64, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_cmp_epi32_mask, __mmask16, __m512i, __m512i, 1)\n+test_2 (_mm512_cmp_epi64_mask, __mmask8, __m512i, __m512i, 1)\n+test_2 (_mm512_cmp_epu32_mask, __mmask16, __m512i, __m512i, 1)\n+test_2 (_mm512_cmp_epu64_mask, __mmask8, __m512i, __m512i, 1)\n+test_2 (_mm512_cmp_pd_mask, __mmask8, __m512d, __m512d, 1)\n+test_2 (_mm512_cmp_ps_mask, __mmask16, __m512, __m512, 1)\n+test_2 (_mm512_div_round_pd, __m512d, __m512d, __m512d, 1)\n+test_2 (_mm512_div_round_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm512_i32gather_epi32, __m512i, __m512i, void const *, 1)\n+test_2 (_mm512_i32gather_epi64, __m512i, __m256i, void const *, 1)\n+test_2 (_mm512_i32gather_pd, __m512d, __m256i, void const *, 1)\n+test_2 (_mm512_i32gather_ps, __m512, __m512i, void const *, 1)\n+test_2 (_mm512_i64gather_epi32, __m256i, __m512i, void const *, 1)\n+test_2 (_mm512_i64gather_epi64, __m512i, __m512i, void const *, 1)\n+test_2 (_mm512_i64gather_pd, __m512d, __m512i, void const *, 1)\n+test_2 (_mm512_i64gather_ps, __m256, __m512i, void const *, 1)\n+test_2 (_mm512_insertf32x4, __m512, __m512, __m128, 1)\n+test_2 (_mm512_insertf64x4, __m512d, __m512d, __m256d, 1)\n+test_2 (_mm512_inserti32x4, __m512i, __m512i, __m128i, 1)\n+test_2 (_mm512_inserti64x4, __m512i, __m512i, __m256i, 1)\n+test_2 (_mm512_maskz_cvt_roundepi32_ps, __m512, __mmask16, __m512i, 1)\n+test_2 (_mm512_maskz_cvt_roundepu32_ps, __m512, __mmask16, __m512i, 1)\n+test_2 (_mm512_maskz_cvt_roundpd_epi32, __m256i, __mmask8, __m512d, 1)\n+test_2 (_mm512_maskz_cvt_roundpd_epu32, __m256i, __mmask8, __m512d, 1)\n+test_2 (_mm512_maskz_cvt_roundpd_ps, __m256, __mmask8, __m512d, 1)\n+test_2 (_mm512_maskz_cvt_roundph_ps, __m512, __mmask16, __m256i, 5)\n+test_2 (_mm512_maskz_cvt_roundps_epi32, __m512i, __mmask16, __m512, 1)\n+test_2 (_mm512_maskz_cvt_roundps_epu32, __m512i, __mmask16, __m512, 1)\n+test_2 (_mm512_maskz_cvt_roundps_pd, __m512d, __mmask8, __m256, 5)\n+test_2 (_mm512_maskz_cvtps_ph, __m256i, __mmask16, __m512, 1)\n+test_2 (_mm512_maskz_cvtt_roundpd_epi32, __m256i, __mmask8, __m512d, 5)\n+test_2 (_mm512_maskz_cvtt_roundpd_epu32, __m256i, __mmask8, __m512d, 5)\n+test_2 (_mm512_maskz_cvtt_roundps_epi32, __m512i, __mmask16, __m512, 5)\n+test_2 (_mm512_maskz_cvtt_roundps_epu32, __m512i, __mmask16, __m512, 5)\n+test_2 (_mm512_maskz_extractf32x4_ps, __m128, __mmask8, __m512, 1)\n+test_2 (_mm512_maskz_extractf64x4_pd, __m256d, __mmask8, __m512d, 1)\n+test_2 (_mm512_maskz_extracti32x4_epi32, __m128i, __mmask8, __m512i, 1)\n+test_2 (_mm512_maskz_extracti64x4_epi64, __m256i, __mmask8, __m512i, 1)\n+test_2 (_mm512_maskz_getexp_round_pd, __m512d, __mmask8, __m512d, 5)\n+test_2 (_mm512_maskz_getexp_round_ps, __m512, __mmask16, __m512, 5)\n+test_2y (_mm512_maskz_getmant_round_pd, __m512d, __mmask8, __m512d, 1, 1, 5)\n+test_2y (_mm512_maskz_getmant_round_ps, __m512, __mmask16, __m512, 1, 1, 5)\n+test_2 (_mm512_maskz_permute_pd, __m512d, __mmask8, __m512d, 1)\n+test_2 (_mm512_maskz_permute_ps, __m512, __mmask16, __m512, 1)\n+test_2 (_mm512_maskz_permutex_epi64, __m512i, __mmask8, __m512i, 1)\n+test_2 (_mm512_maskz_permutex_pd, __m512d, __mmask8, __m512d, 1)\n+test_2 (_mm512_maskz_rol_epi32, __m512i, __mmask16, __m512i, 1)\n+test_2 (_mm512_maskz_rol_epi64, __m512i, __mmask8, __m512i, 1)\n+test_2 (_mm512_maskz_ror_epi32, __m512i, __mmask16, __m512i, 1)\n+test_2 (_mm512_maskz_ror_epi64, __m512i, __mmask8, __m512i, 1)\n+test_2 (_mm512_maskz_shuffle_epi32, __m512i, __mmask16, __m512i, 1)\n+test_2 (_mm512_maskz_slli_epi32, __m512i, __mmask16, __m512i, 1)\n+test_2 (_mm512_maskz_slli_epi64, __m512i, __mmask8, __m512i, 1)\n+test_2 (_mm512_maskz_sqrt_round_pd, __m512d, __mmask8, __m512d, 1)\n+test_2 (_mm512_maskz_sqrt_round_ps, __m512, __mmask16, __m512, 1)\n+test_2 (_mm512_maskz_srai_epi32, __m512i, __mmask16, __m512i, 1)\n+test_2 (_mm512_maskz_srai_epi64, __m512i, __mmask8, __m512i, 1)\n+test_2 (_mm512_maskz_srli_epi32, __m512i, __mmask16, __m512i, 1)\n+test_2 (_mm512_maskz_srli_epi64, __m512i, __mmask8, __m512i, 1)\n+test_2 (_mm512_max_round_pd, __m512d, __m512d, __m512d, 5)\n+test_2 (_mm512_max_round_ps, __m512, __m512, __m512, 5)\n+test_2 (_mm512_min_round_pd, __m512d, __m512d, __m512d, 5)\n+test_2 (_mm512_min_round_ps, __m512, __m512, __m512, 5)\n+test_2 (_mm512_mul_round_pd, __m512d, __m512d, __m512d, 1)\n+test_2 (_mm512_mul_round_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm512_scalef_round_pd, __m512d, __m512d, __m512d, 1)\n+test_2 (_mm512_scalef_round_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm512_shuffle_f32x4, __m512, __m512, __m512, 1)\n+test_2 (_mm512_shuffle_f64x2, __m512d, __m512d, __m512d, 1)\n+test_2 (_mm512_shuffle_i32x4, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_shuffle_i64x2, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_shuffle_pd, __m512d, __m512d, __m512d, 1)\n+test_2 (_mm512_shuffle_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm512_sub_round_pd, __m512d, __m512d, __m512d, 1)\n+test_2 (_mm512_sub_round_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm_cmp_sd_mask, __mmask8, __m128d, __m128d, 1)\n+test_2 (_mm_cmp_ss_mask, __mmask8, __m128, __m128, 1)\n+#ifdef __x86_64__\n+test_2 (_mm_cvt_roundi64_sd, __m128d, __m128d, long long, 1)\n+test_2 (_mm_cvt_roundi64_ss, __m128, __m128, long long, 1)\n+#endif\n+test_2 (_mm_cvt_roundu32_ss, __m128, __m128, unsigned, 1)\n+#ifdef __x86_64__\n+test_2 (_mm_cvt_roundu64_sd, __m128d, __m128d, unsigned long long, 1)\n+test_2 (_mm_cvt_roundu64_ss, __m128, __m128, unsigned long long, 1)\n+#endif\n+test_2x (_mm512_cmp_round_pd_mask, __mmask8, __m512d, __m512d, 1, 5)\n+test_2x (_mm512_cmp_round_ps_mask, __mmask16, __m512, __m512, 1, 5)\n+test_2x (_mm512_maskz_roundscale_round_pd, __m512d, __mmask8, __m512d, 1, 5)\n+test_2x (_mm512_maskz_roundscale_round_ps, __m512, __mmask16, __m512, 1, 5)\n+test_2x (_mm_cmp_round_sd_mask, __mmask8, __m128d, __m128d, 1, 5)\n+test_2x (_mm_cmp_round_ss_mask, __mmask8, __m128, __m128, 1, 5)\n+test_2x (_mm_comi_round_sd, int, __m128d, __m128d, 1, 5)\n+test_2x (_mm_comi_round_ss, int, __m128, __m128, 1, 5)\n+test_3 (_mm512_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n+test_3 (_mm512_fmadd_round_ps, __m512, __m512, __m512, __m512, 1)\n+test_3 (_mm512_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n+test_3 (_mm512_fmaddsub_round_ps, __m512, __m512, __m512, __m512, 1)\n+test_3 (_mm512_fmsub_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n+test_3 (_mm512_fmsub_round_ps, __m512, __m512, __m512, __m512, 1)\n+test_3 (_mm512_fmsubadd_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n+test_3 (_mm512_fmsubadd_round_ps, __m512, __m512, __m512, __m512, 1)\n+test_3 (_mm512_fnmadd_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n+test_3 (_mm512_fnmadd_round_ps, __m512, __m512, __m512, __m512, 1)\n+test_3 (_mm512_fnmsub_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n+test_3 (_mm512_fnmsub_round_ps, __m512, __m512, __m512, __m512, 1)\n+test_3 (_mm512_mask_cmp_epi32_mask, __mmask16, __mmask16, __m512i, __m512i, 1)\n+test_3 (_mm512_mask_cmp_epi64_mask, __mmask8, __mmask8, __m512i, __m512i, 1)\n+test_3 (_mm512_mask_cmp_epu32_mask, __mmask16, __mmask16, __m512i, __m512i, 1)\n+test_3 (_mm512_mask_cmp_epu64_mask, __mmask8, __mmask8, __m512i, __m512i, 1)\n+test_3 (_mm512_mask_cmp_pd_mask, __mmask8, __mmask8, __m512d, __m512d, 1)\n+test_3 (_mm512_mask_cmp_ps_mask, __mmask16, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_mask_cvt_roundepi32_ps, __m512, __m512, __mmask16, __m512i, 1)\n+test_3 (_mm512_mask_cvt_roundepu32_ps, __m512, __m512, __mmask16, __m512i, 1)\n+test_3 (_mm512_mask_cvt_roundpd_epi32, __m256i, __m256i, __mmask8, __m512d, 1)\n+test_3 (_mm512_mask_cvt_roundpd_epu32, __m256i, __m256i, __mmask8, __m512d, 1)\n+test_3 (_mm512_mask_cvt_roundpd_ps, __m256, __m256, __mmask8, __m512d, 1)\n+test_3 (_mm512_mask_cvt_roundph_ps, __m512, __m512, __mmask16, __m256i, 5)\n+test_3 (_mm512_mask_cvt_roundps_epi32, __m512i, __m512i, __mmask16, __m512, 1)\n+test_3 (_mm512_mask_cvt_roundps_epu32, __m512i, __m512i, __mmask16, __m512, 1)\n+test_3 (_mm512_mask_cvt_roundps_pd, __m512d, __m512d, __mmask8, __m256, 5)\n+test_3 (_mm512_mask_cvtps_ph, __m256i, __m256i, __mmask16, __m512, 1)\n+test_3 (_mm512_mask_cvtt_roundpd_epi32, __m256i, __m256i, __mmask8, __m512d, 5)\n+test_3 (_mm512_mask_cvtt_roundpd_epu32, __m256i, __m256i, __mmask8, __m512d, 5)\n+test_3 (_mm512_mask_cvtt_roundps_epi32, __m512i, __m512i, __mmask16, __m512, 5)\n+test_3 (_mm512_mask_cvtt_roundps_epu32, __m512i, __m512i, __mmask16, __m512, 5)\n+test_3 (_mm512_mask_extractf32x4_ps, __m128, __m128, __mmask8, __m512, 1)\n+test_3 (_mm512_mask_extractf64x4_pd, __m256d, __m256d, __mmask8, __m512d, 1)\n+test_3 (_mm512_mask_extracti32x4_epi32, __m128i, __m128i, __mmask8, __m512i, 1)\n+test_3 (_mm512_mask_extracti64x4_epi64, __m256i, __m256i, __mmask8, __m512i, 1)\n+test_3 (_mm512_mask_getexp_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n+test_3 (_mm512_mask_getexp_round_ps, __m512, __m512, __mmask16, __m512, 5)\n+test_3y (_mm512_mask_getmant_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 1, 5)\n+test_3y (_mm512_mask_getmant_round_ps, __m512, __m512, __mmask16, __m512, 1, 1, 5)\n+test_3 (_mm512_mask_permute_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n+test_3 (_mm512_mask_permute_ps, __m512, __m512, __mmask16, __m512, 1)\n+test_3 (_mm512_mask_permutex_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n+test_3 (_mm512_mask_permutex_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n+test_3 (_mm512_mask_rol_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n+test_3 (_mm512_mask_rol_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n+test_3 (_mm512_mask_ror_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n+test_3 (_mm512_mask_ror_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n+test_3 (_mm512_mask_shuffle_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n+test_3 (_mm512_mask_slli_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n+test_3 (_mm512_mask_slli_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n+test_3 (_mm512_mask_sqrt_round_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n+test_3 (_mm512_mask_sqrt_round_ps, __m512, __m512, __mmask16, __m512, 1)\n+test_3 (_mm512_mask_srai_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n+test_3 (_mm512_mask_srai_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n+test_3 (_mm512_mask_srli_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n+test_3 (_mm512_mask_srli_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n+test_3 (_mm512_maskz_add_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_3 (_mm512_maskz_add_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_alignr_epi32, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_alignr_epi64, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_div_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_3 (_mm512_maskz_div_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_insertf32x4, __m512, __mmask16, __m512, __m128, 1)\n+test_3 (_mm512_maskz_insertf64x4, __m512d, __mmask8, __m512d, __m256d, 1)\n+test_3 (_mm512_maskz_inserti32x4, __m512i, __mmask16, __m512i, __m128i, 1)\n+test_3 (_mm512_maskz_inserti64x4, __m512i, __mmask8, __m512i, __m256i, 1)\n+test_3 (_mm512_maskz_max_round_pd, __m512d, __mmask8, __m512d, __m512d, 5)\n+test_3 (_mm512_maskz_max_round_ps, __m512, __mmask16, __m512, __m512, 5)\n+test_3 (_mm512_maskz_min_round_pd, __m512d, __mmask8, __m512d, __m512d, 5)\n+test_3 (_mm512_maskz_min_round_ps, __m512, __mmask16, __m512, __m512, 5)\n+test_3 (_mm512_maskz_mul_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_3 (_mm512_maskz_mul_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_scalef_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_3 (_mm512_maskz_scalef_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_shuffle_f32x4, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_shuffle_f64x2, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_3 (_mm512_maskz_shuffle_i32x4, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_shuffle_i64x2, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_shuffle_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_3 (_mm512_maskz_shuffle_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_sub_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_3 (_mm512_maskz_sub_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_ternarylogic_epi32, __m512i, __m512i, __m512i, __m512i, 1)\n+test_3 (_mm512_ternarylogic_epi64, __m512i, __m512i, __m512i, __m512i, 1)\n+test_3 (_mm_mask_cmp_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1)\n+test_3 (_mm_mask_cmp_ss_mask, __mmask8, __mmask8, __m128, __m128, 1)\n+test_3v (_mm512_i32scatter_epi32, void *, __m512i, __m512i, 1)\n+test_3v (_mm512_i32scatter_epi64, void *, __m256i, __m512i, 1)\n+test_3v (_mm512_i32scatter_pd, void *, __m256i, __m512d, 1)\n+test_3v (_mm512_i32scatter_ps, void *, __m512i, __m512, 1)\n+test_3v (_mm512_i64scatter_epi32, void *, __m512i, __m256i, 1)\n+test_3v (_mm512_i64scatter_epi64, void *, __m512i, __m512i, 1)\n+test_3v (_mm512_i64scatter_pd, void *, __m512i, __m512d, 1)\n+test_3v (_mm512_i64scatter_ps, void *, __m512i, __m256, 1)\n+test_3x (_mm512_mask_roundscale_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 5)\n+test_3x (_mm512_mask_roundscale_round_ps, __m512, __m512, __mmask16, __m512, 1, 5)\n+test_3x (_mm512_mask_cmp_round_pd_mask, __mmask8, __mmask8, __m512d, __m512d, 1, 5)\n+test_3x (_mm512_mask_cmp_round_ps_mask, __mmask16, __mmask16, __m512, __m512, 1, 5)\n+test_3x (_mm_fixupimm_round_sd, __m128d, __m128d, __m128d, __m128i, 1, 5)\n+test_3x (_mm_fixupimm_round_ss, __m128, __m128, __m128, __m128i, 1, 5)\n+test_3x (_mm_mask_cmp_round_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1, 5)\n+test_3x (_mm_mask_cmp_round_ss_mask, __mmask8, __mmask8, __m128, __m128, 1, 5)\n+test_4 (_mm512_mask3_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n+test_4 (_mm512_mask3_fmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n+test_4 (_mm512_mask3_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n+test_4 (_mm512_mask3_fmaddsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n+test_4 (_mm512_mask3_fmsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n+test_4 (_mm512_mask3_fmsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n+test_4 (_mm512_mask3_fmsubadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n+test_4 (_mm512_mask3_fmsubadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n+test_4 (_mm512_mask3_fnmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n+test_4 (_mm512_mask3_fnmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n+test_4 (_mm512_mask3_fnmsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n+test_4 (_mm512_mask3_fnmsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n+test_4 (_mm512_mask_add_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_add_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_alignr_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_alignr_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_div_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_div_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_fmadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_fmadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_fmaddsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_fmaddsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_fmsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_fmsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_fmsubadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_fmsubadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_fnmadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_fnmadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_fnmsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_fnmsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_i32gather_epi32, __m512i, __m512i, __mmask16, __m512i, void const *, 1)\n+test_4 (_mm512_mask_i32gather_epi64, __m512i, __m512i, __mmask8, __m256i, void const *, 1)\n+test_4 (_mm512_mask_i32gather_pd, __m512d, __m512d, __mmask8, __m256i, void const *, 1)\n+test_4 (_mm512_mask_i32gather_ps, __m512, __m512, __mmask16, __m512i, void const *, 1)\n+test_4 (_mm512_mask_i64gather_epi32, __m256i, __m256i, __mmask8, __m512i, void const *, 1)\n+test_4 (_mm512_mask_i64gather_epi64, __m512i, __m512i, __mmask8, __m512i, void const *, 1)\n+test_4 (_mm512_mask_i64gather_pd, __m512d, __m512d, __mmask8, __m512i, void const *, 1)\n+test_4 (_mm512_mask_i64gather_ps, __m256, __m256, __mmask8, __m512i, void const *, 1)\n+test_4 (_mm512_mask_insertf32x4, __m512, __m512, __mmask16, __m512, __m128, 1)\n+test_4 (_mm512_mask_insertf64x4, __m512d, __m512d, __mmask8, __m512d, __m256d, 1)\n+test_4 (_mm512_mask_inserti32x4, __m512i, __m512i, __mmask16, __m512i, __m128i, 1)\n+test_4 (_mm512_mask_inserti64x4, __m512i, __m512i, __mmask8, __m512i, __m256i, 1)\n+test_4 (_mm512_mask_max_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 5)\n+test_4 (_mm512_mask_max_round_ps, __m512, __m512, __mmask16, __m512, __m512, 5)\n+test_4 (_mm512_mask_min_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 5)\n+test_4 (_mm512_mask_min_round_ps, __m512, __m512, __mmask16, __m512, __m512, 5)\n+test_4 (_mm512_mask_mul_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_mul_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_scalef_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_scalef_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_shuffle_f32x4, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_shuffle_f64x2, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_shuffle_i32x4, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_shuffle_i64x2, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_shuffle_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_shuffle_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_sub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n+test_4 (_mm512_mask_sub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_ternarylogic_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_ternarylogic_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_4 (_mm512_maskz_fmadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n+test_4 (_mm512_maskz_fmadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n+test_4 (_mm512_maskz_fmaddsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n+test_4 (_mm512_maskz_fmaddsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n+test_4 (_mm512_maskz_fmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n+test_4 (_mm512_maskz_fmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n+test_4 (_mm512_maskz_fmsubadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n+test_4 (_mm512_maskz_fmsubadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n+test_4 (_mm512_maskz_fnmadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n+test_4 (_mm512_maskz_fnmadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n+test_4 (_mm512_maskz_fnmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n+test_4 (_mm512_maskz_fnmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n+test_4 (_mm512_maskz_ternarylogic_epi32, __m512i, __mmask16, __m512i, __m512i, __m512i, 1)\n+test_4 (_mm512_maskz_ternarylogic_epi64, __m512i, __mmask8, __m512i, __m512i, __m512i, 1)\n+test_4v (_mm512_mask_i32scatter_epi32, void *, __mmask16, __m512i, __m512i, 1)\n+test_4v (_mm512_mask_i32scatter_epi64, void *, __mmask8, __m256i, __m512i, 1)\n+test_4v (_mm512_mask_i32scatter_pd, void *, __mmask8, __m256i, __m512d, 1)\n+test_4v (_mm512_mask_i32scatter_ps, void *, __mmask16, __m512i, __m512, 1)\n+test_4v (_mm512_mask_i64scatter_epi32, void *, __mmask8, __m512i, __m256i, 1)\n+test_4v (_mm512_mask_i64scatter_epi64, void *, __mmask8, __m512i, __m512i, 1)\n+test_4v (_mm512_mask_i64scatter_pd, void *, __mmask8, __m512i, __m512d, 1)\n+test_4v (_mm512_mask_i64scatter_ps, void *, __mmask8, __m512i, __m256, 1)\n+test_4x (_mm512_mask_fixupimm_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512i, 1, 5)\n+test_4x (_mm512_mask_fixupimm_round_ps, __m512, __m512, __mmask16, __m512, __m512i, 1, 5)\n+test_4x (_mm512_maskz_fixupimm_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512i, 1, 5)\n+test_4x (_mm512_maskz_fixupimm_round_ps, __m512, __mmask16, __m512, __m512, __m512i, 1, 5)\n+test_4x (_mm_mask_fixupimm_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128i, 1, 5)\n+test_4x (_mm_mask_fixupimm_round_ss, __m128, __m128, __mmask8, __m128, __m128i, 1, 5)\n+test_4x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128i, 1, 5)\n+test_4x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128, __m128i, 1, 5)\n+\n+/* avx512pfintrin.h */\n+test_3vx (_mm512_mask_prefetch_i32gather_ps, __m512i, __mmask16, void const *, 1, 1)\n+test_3vx (_mm512_mask_prefetch_i32scatter_ps, void const *, __mmask16, __m512i, 1, 1)\n+test_3vx (_mm512_mask_prefetch_i64gather_ps, __m512i, __mmask8, void const *, 1, 1)\n+test_3vx (_mm512_mask_prefetch_i64scatter_ps, void const *, __mmask8, __m512i, 1, 1)\n+\n+/* avx512erintrin.h */\n+test_1 (_mm512_exp2a23_round_pd, __m512d, __m512d, 1)\n+test_1 (_mm512_exp2a23_round_ps, __m512, __m512, 1)\n+test_1 (_mm512_rcp28_round_pd, __m512d, __m512d, 1)\n+test_1 (_mm512_rcp28_round_ps, __m512, __m512, 1)\n+test_1 (_mm512_rsqrt28_round_pd, __m512d, __m512d, 1)\n+test_1 (_mm512_rsqrt28_round_ps, __m512, __m512, 1)\n+test_2 (_mm512_maskz_exp2a23_round_pd, __m512d, __mmask8, __m512d, 1)\n+test_2 (_mm512_maskz_exp2a23_round_ps, __m512, __mmask16, __m512, 1)\n+test_2 (_mm512_maskz_rcp28_round_pd, __m512d, __mmask8, __m512d, 1)\n+test_2 (_mm512_maskz_rcp28_round_ps, __m512, __mmask16, __m512, 1)\n+test_2 (_mm512_maskz_rsqrt28_round_pd, __m512d, __mmask8, __m512d, 1)\n+test_2 (_mm512_maskz_rsqrt28_round_ps, __m512, __mmask16, __m512, 1)\n+test_3 (_mm512_mask_exp2a23_round_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n+test_3 (_mm512_mask_exp2a23_round_ps, __m512, __m512, __mmask16, __m512, 1)\n+test_3 (_mm512_mask_rcp28_round_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n+test_3 (_mm512_mask_rcp28_round_ps, __m512, __m512, __mmask16, __m512, 1)\n+test_3 (_mm512_mask_rsqrt28_round_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n+test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 1)\n+\n /* wmmintrin.h (AES/PCLMUL).  */\n #ifdef DIFFERENT_PRAGMAS\n #pragma GCC target (\"aes,pclmul\")"}, {"sha": "f993c07cdf1d96e920cb24fd0bb61f2a007cc1f4", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 174, "deletions": 1, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/756c585702ca72cc01388f51a960777a3d13d486/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=756c585702ca72cc01388f51a960777a3d13d486", "patch": "@@ -183,7 +183,180 @@\n /* rtmintrin.h */\n #define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt\")\n+/* avx512fintrin.h */\n+#define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_alignd512_mask(A, B, F, D, E) __builtin_ia32_alignd512_mask(A, B, 1, D, E)\n+#define __builtin_ia32_alignq512_mask(A, B, F, D, E) __builtin_ia32_alignq512_mask(A, B, 1, D, E)\n+#define __builtin_ia32_cmpd512_mask(A, B, E, D) __builtin_ia32_cmpd512_mask(A, B, 1, D)\n+#define __builtin_ia32_cmppd512_mask(A, B, F, D, E) __builtin_ia32_cmppd512_mask(A, B, 1, D, 5)\n+#define __builtin_ia32_cmpps512_mask(A, B, F, D, E) __builtin_ia32_cmpps512_mask(A, B, 1, D, 5)\n+#define __builtin_ia32_cmpq512_mask(A, B, E, D) __builtin_ia32_cmpq512_mask(A, B, 1, D)\n+#define __builtin_ia32_cmpsd_mask(A, B, F, D, E) __builtin_ia32_cmpsd_mask(A, B, 1, D, 5)\n+#define __builtin_ia32_cmpss_mask(A, B, F, D, E) __builtin_ia32_cmpss_mask(A, B, 1, D, 5)\n+#define __builtin_ia32_cvtdq2ps512_mask(A, B, C, D) __builtin_ia32_cvtdq2ps512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtpd2dq512_mask(A, B, C, D) __builtin_ia32_cvtpd2dq512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtpd2ps512_mask(A, B, C, D) __builtin_ia32_cvtpd2ps512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtpd2udq512_mask(A, B, C, D) __builtin_ia32_cvtpd2udq512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtps2dq512_mask(A, B, C, D) __builtin_ia32_cvtps2dq512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtps2pd512_mask(A, B, C, D) __builtin_ia32_cvtps2pd512_mask(A, B, C, 5)\n+#define __builtin_ia32_cvtps2udq512_mask(A, B, C, D) __builtin_ia32_cvtps2udq512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtsi2sd64(A, B, C) __builtin_ia32_cvtsi2sd64(A, B, 1)\n+#define __builtin_ia32_cvtsi2ss32(A, B, C) __builtin_ia32_cvtsi2ss32(A, B, 1)\n+#define __builtin_ia32_cvtsi2ss64(A, B, C) __builtin_ia32_cvtsi2ss64(A, B, 1)\n+#define __builtin_ia32_cvttpd2dq512_mask(A, B, C, D) __builtin_ia32_cvttpd2dq512_mask(A, B, C, 5)\n+#define __builtin_ia32_cvttpd2udq512_mask(A, B, C, D) __builtin_ia32_cvttpd2udq512_mask(A, B, C, 5)\n+#define __builtin_ia32_cvttps2dq512_mask(A, B, C, D) __builtin_ia32_cvttps2dq512_mask(A, B, C, 5)\n+#define __builtin_ia32_cvttps2udq512_mask(A, B, C, D) __builtin_ia32_cvttps2udq512_mask(A, B, C, 5)\n+#define __builtin_ia32_cvtudq2ps512_mask(A, B, C, D) __builtin_ia32_cvtudq2ps512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtusi2sd64(A, B, C) __builtin_ia32_cvtusi2sd64(A, B, 1)\n+#define __builtin_ia32_cvtusi2ss32(A, B, C) __builtin_ia32_cvtusi2ss32(A, B, 1)\n+#define __builtin_ia32_cvtusi2ss64(A, B, C) __builtin_ia32_cvtusi2ss64(A, B, 1)\n+#define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_extractf32x4_mask(A, E, C, D) __builtin_ia32_extractf32x4_mask(A, 1, C, D)\n+#define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n+#define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n+#define __builtin_ia32_extracti64x4_mask(A, E, C, D) __builtin_ia32_extracti64x4_mask(A, 1, C, D)\n+#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmpd512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmps512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmsd_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, C, 1, E, 5)\n+#define __builtin_ia32_fixupimmss_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(A, B, C, 1, E, 5)\n+#define __builtin_ia32_gatherdiv8df(A, B, C, D, F) __builtin_ia32_gatherdiv8df(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv8di(A, B, C, D, F) __builtin_ia32_gatherdiv8di(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv16sf(A, B, C, D, F) __builtin_ia32_gatherdiv16sf(A, B, C, D, 1)\n+#define __builtin_ia32_gatherdiv16si(A, B, C, D, F) __builtin_ia32_gatherdiv16si(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv16sf(A, B, C, D, F) __builtin_ia32_gathersiv16sf(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv16si(A, B, C, D, F) __builtin_ia32_gathersiv16si(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv8df(A, B, C, D, F) __builtin_ia32_gathersiv8df(A, B, C, D, 1)\n+#define __builtin_ia32_gathersiv8di(A, B, C, D, F) __builtin_ia32_gathersiv8di(A, B, C, D, 1)\n+#define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 5)\n+#define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 5)\n+#define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_insertf32x4_mask(A, B, F, D, E) __builtin_ia32_insertf32x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_insertf64x4_mask(A, B, F, D, E) __builtin_ia32_insertf64x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_inserti32x4_mask(A, B, F, D, E) __builtin_ia32_inserti32x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_inserti64x4_mask(A, B, F, D, E) __builtin_ia32_inserti64x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_permdf512_mask(A, E, C, D) __builtin_ia32_permdf512_mask(A, 1, C, D)\n+#define __builtin_ia32_permdi512_mask(A, E, C, D) __builtin_ia32_permdi512_mask(A, 1, C, D)\n+#define __builtin_ia32_prold512_mask(A, E, C, D) __builtin_ia32_prold512_mask(A, 1, C, D)\n+#define __builtin_ia32_prolq512_mask(A, E, C, D) __builtin_ia32_prolq512_mask(A, 1, C, D)\n+#define __builtin_ia32_prord512_mask(A, E, C, D) __builtin_ia32_prord512_mask(A, 1, C, D)\n+#define __builtin_ia32_prorq512_mask(A, E, C, D) __builtin_ia32_prorq512_mask(A, 1, C, D)\n+#define __builtin_ia32_pshufd512_mask(A, E, C, D) __builtin_ia32_pshufd512_mask(A, 1, C, D)\n+#define __builtin_ia32_pslldi512_mask(A, E, C, D) __builtin_ia32_pslldi512_mask(A, 1, C, D)\n+#define __builtin_ia32_psllqi512_mask(A, E, C, D) __builtin_ia32_psllqi512_mask(A, 1, C, D)\n+#define __builtin_ia32_psradi512_mask(A, E, C, D) __builtin_ia32_psradi512_mask(A, 1, C, D)\n+#define __builtin_ia32_psraqi512_mask(A, E, C, D) __builtin_ia32_psraqi512_mask(A, 1, C, D)\n+#define __builtin_ia32_psrldi512_mask(A, E, C, D) __builtin_ia32_psrldi512_mask(A, 1, C, D)\n+#define __builtin_ia32_psrlqi512_mask(A, E, C, D) __builtin_ia32_psrlqi512_mask(A, 1, C, D)\n+#define __builtin_ia32_pternlogd512_mask(A, B, C, F, E) __builtin_ia32_pternlogd512_mask(A, B, C, 1, E)\n+#define __builtin_ia32_pternlogd512_maskz(A, B, C, F, E) __builtin_ia32_pternlogd512_maskz(A, B, C, 1, E)\n+#define __builtin_ia32_pternlogq512_mask(A, B, C, F, E) __builtin_ia32_pternlogq512_mask(A, B, C, 1, E)\n+#define __builtin_ia32_pternlogq512_maskz(A, B, C, F, E) __builtin_ia32_pternlogq512_maskz(A, B, C, 1, E)\n+#define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_scatterdiv8df(A, B, C, D, F) __builtin_ia32_scatterdiv8df(A, B, C, D, 1)\n+#define __builtin_ia32_scatterdiv8di(A, B, C, D, F) __builtin_ia32_scatterdiv8di(A, B, C, D, 1)\n+#define __builtin_ia32_scatterdiv16sf(A, B, C, D, F) __builtin_ia32_scatterdiv16sf(A, B, C, D, 1)\n+#define __builtin_ia32_scatterdiv16si(A, B, C, D, F) __builtin_ia32_scatterdiv16si(A, B, C, D, 1)\n+#define __builtin_ia32_scattersiv16sf(A, B, C, D, F) __builtin_ia32_scattersiv16sf(A, B, C, D, 1)\n+#define __builtin_ia32_scattersiv16si(A, B, C, D, F) __builtin_ia32_scattersiv16si(A, B, C, D, 1)\n+#define __builtin_ia32_scattersiv8df(A, B, C, D, F) __builtin_ia32_scattersiv8df(A, B, C, D, 1)\n+#define __builtin_ia32_scattersiv8di(A, B, C, D, F) __builtin_ia32_scattersiv8di(A, B, C, D, 1)\n+#define __builtin_ia32_shuf_f32x4_mask(A, B, F, D, E) __builtin_ia32_shuf_f32x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_shuf_f64x2_mask(A, B, F, D, E) __builtin_ia32_shuf_f64x2_mask(A, B, 1, D, E)\n+#define __builtin_ia32_shuf_i32x4_mask(A, B, F, D, E) __builtin_ia32_shuf_i32x4_mask(A, B, 1, D, E)\n+#define __builtin_ia32_shuf_i64x2_mask(A, B, F, D, E) __builtin_ia32_shuf_i64x2_mask(A, B, 1, D, E)\n+#define __builtin_ia32_shufpd512_mask(A, B, F, D, E) __builtin_ia32_shufpd512_mask(A, B, 1, D, E)\n+#define __builtin_ia32_shufps512_mask(A, B, F, D, E) __builtin_ia32_shufps512_mask(A, B, 1, D, E)\n+#define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 1)\n+#define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 1)\n+#define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_ucmpd512_mask(A, B, E, D) __builtin_ia32_ucmpd512_mask(A, B, 1, D)\n+#define __builtin_ia32_ucmpq512_mask(A, B, E, D) __builtin_ia32_ucmpq512_mask(A, B, 1, D)\n+#define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 5)\n+#define __builtin_ia32_vcomiss(A, B, C, D) __builtin_ia32_vcomiss(A, B, 1, 5)\n+#define __builtin_ia32_vcvtph2ps512_mask(A, B, C, D) __builtin_ia32_vcvtph2ps512_mask(A, B, C, 5)\n+#define __builtin_ia32_vcvtps2ph512_mask(A, E, C, D) __builtin_ia32_vcvtps2ph512_mask(A, 1, C, D)\n+#define __builtin_ia32_vcvtsd2si32(A, B) __builtin_ia32_vcvtsd2si32(A, 1)\n+#define __builtin_ia32_vcvtsd2si64(A, B) __builtin_ia32_vcvtsd2si64(A, 1)\n+#define __builtin_ia32_vcvtsd2usi32(A, B) __builtin_ia32_vcvtsd2usi32(A, 1)\n+#define __builtin_ia32_vcvtsd2usi64(A, B) __builtin_ia32_vcvtsd2usi64(A, 1)\n+#define __builtin_ia32_vcvtss2si32(A, B) __builtin_ia32_vcvtss2si32(A, 1)\n+#define __builtin_ia32_vcvtss2si64(A, B) __builtin_ia32_vcvtss2si64(A, 1)\n+#define __builtin_ia32_vcvtss2usi32(A, B) __builtin_ia32_vcvtss2usi32(A, 1)\n+#define __builtin_ia32_vcvtss2usi64(A, B) __builtin_ia32_vcvtss2usi64(A, 1)\n+#define __builtin_ia32_vcvttsd2si32(A, B) __builtin_ia32_vcvttsd2si32(A, 5)\n+#define __builtin_ia32_vcvttsd2si64(A, B) __builtin_ia32_vcvttsd2si64(A, 5)\n+#define __builtin_ia32_vcvttsd2usi32(A, B) __builtin_ia32_vcvttsd2usi32(A, 5)\n+#define __builtin_ia32_vcvttsd2usi64(A, B) __builtin_ia32_vcvttsd2usi64(A, 5)\n+#define __builtin_ia32_vcvttss2si32(A, B) __builtin_ia32_vcvttss2si32(A, 5)\n+#define __builtin_ia32_vcvttss2si64(A, B) __builtin_ia32_vcvttss2si64(A, 5)\n+#define __builtin_ia32_vcvttss2usi32(A, B) __builtin_ia32_vcvttss2usi32(A, 5)\n+#define __builtin_ia32_vcvttss2usi64(A, B) __builtin_ia32_vcvttss2usi64(A, 5)\n+#define __builtin_ia32_vfmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddps512_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsd3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddss3_mask(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmsubps512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vpermilpd512_mask(A, E, C, D) __builtin_ia32_vpermilpd512_mask(A, 1, C, D)\n+#define __builtin_ia32_vpermilps512_mask(A, E, C, D) __builtin_ia32_vpermilps512_mask(A, 1, C, D)\n+\n+/* avx512pfintrin.h */\n+#define __builtin_ia32_gatherpfdps(A, B, C, D, E) __builtin_ia32_gatherpfdps(A, B, C, 1, 1)\n+#define __builtin_ia32_gatherpfqps(A, B, C, D, E) __builtin_ia32_gatherpfqps(A, B, C, 1, 1)\n+#define __builtin_ia32_scatterpfdps(A, B, C, D, E) __builtin_ia32_scatterpfdps(A, B, C, 1, 1)\n+#define __builtin_ia32_scatterpfqps(A, B, C, D, E) __builtin_ia32_scatterpfqps(A, B, C, 1, 1)\n+\n+/* avx512erintrin.h */\n+#define __builtin_ia32_exp2pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask (A, B, C, 1)\n+#define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask (A, B, C, 1)\n+#define __builtin_ia32_rcp28pd_mask(A, B, C, D) __builtin_ia32_rcp28pd_mask (A, B, C, 1)\n+#define __builtin_ia32_rcp28ps_mask(A, B, C, D) __builtin_ia32_rcp28ps_mask (A, B, C, 1)\n+#define __builtin_ia32_rsqrt28pd_mask(A, B, C, D) __builtin_ia32_rsqrt28pd_mask (A, B, C, 1)\n+#define __builtin_ia32_rsqrt28ps_mask(A, B, C, D) __builtin_ia32_rsqrt28ps_mask (A, B, C, 1)\n+\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512pf,avx512cd\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}