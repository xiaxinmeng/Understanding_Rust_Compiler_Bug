{"sha": "353b39fa9d51efa6213cf277a036548c32cf655a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUzYjM5ZmE5ZDUxZWZhNjIxM2NmMjc3YTAzNjU0OGMzMmNmNjU1YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-06-27T14:54:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-06-27T14:54:09Z"}, "message": "* dwarf2out.c (TYPE_DECL_IS_STUB): Extend mechanism to all types.\n\nFrom-SVN: r175535", "tree": {"sha": "c502659c344547c4e21d4e3ea174d3288dd3fb79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c502659c344547c4e21d4e3ea174d3288dd3fb79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/353b39fa9d51efa6213cf277a036548c32cf655a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353b39fa9d51efa6213cf277a036548c32cf655a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/353b39fa9d51efa6213cf277a036548c32cf655a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353b39fa9d51efa6213cf277a036548c32cf655a/comments", "author": null, "committer": null, "parents": [{"sha": "a7af037b11a17b98365306466eaa568b8c01ca89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7af037b11a17b98365306466eaa568b8c01ca89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7af037b11a17b98365306466eaa568b8c01ca89"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "199b653689b159b0f0784f424ed89d303de1e0ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/353b39fa9d51efa6213cf277a036548c32cf655a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/353b39fa9d51efa6213cf277a036548c32cf655a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=353b39fa9d51efa6213cf277a036548c32cf655a", "patch": "@@ -1,3 +1,7 @@\n+2011-06-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.c (TYPE_DECL_IS_STUB): Extend mechanism to all types.\n+\n 2011-06-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR lto/48492"}, {"sha": "3d63d7b8e3cc193e78cd8305a2948aea096aa673", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/353b39fa9d51efa6213cf277a036548c32cf655a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/353b39fa9d51efa6213cf277a036548c32cf655a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=353b39fa9d51efa6213cf277a036548c32cf655a", "patch": "@@ -6207,19 +6207,19 @@ skeleton_chain_node;\n #endif\n \n /* Define a macro which returns nonzero for a TYPE_DECL which was\n-   implicitly generated for a tagged type.\n+   implicitly generated for a type.\n \n-   Note that unlike the gcc front end (which generates a NULL named\n-   TYPE_DECL node for each complete tagged type, each array type, and\n-   each function type node created) the g++ front end generates a\n-   _named_ TYPE_DECL node for each tagged type node created.\n+   Note that, unlike the C front-end (which generates a NULL named\n+   TYPE_DECL node for each complete tagged type, each array type,\n+   and each function type node created) the C++ front-end generates\n+   a _named_ TYPE_DECL node for each tagged type node created.\n    These TYPE_DECLs have DECL_ARTIFICIAL set, so we know not to\n-   generate a DW_TAG_typedef DIE for them.  */\n+   generate a DW_TAG_typedef DIE for them.  Likewise with the Ada\n+   front-end, but for each type, tagged or not.  */\n \n #define TYPE_DECL_IS_STUB(decl)\t\t\t\t\\\n   (DECL_NAME (decl) == NULL_TREE\t\t\t\\\n    || (DECL_ARTIFICIAL (decl)\t\t\t\t\\\n-       && is_tagged_type (TREE_TYPE (decl))\t\t\\\n        && ((decl == TYPE_STUB_DECL (TREE_TYPE (decl)))\t\\\n \t   /* This is necessary for stub decls that\t\\\n \t      appear in nested inline functions.  */\t\\"}]}