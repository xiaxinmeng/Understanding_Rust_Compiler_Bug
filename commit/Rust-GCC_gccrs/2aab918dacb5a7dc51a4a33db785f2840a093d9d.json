{"sha": "2aab918dacb5a7dc51a4a33db785f2840a093d9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhYjkxOGRhY2I1YTdkYzUxYTRhMzNkYjc4NWYyODQwYTA5M2Q5ZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-03-16T10:11:11Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-03-16T10:11:11Z"}, "message": "Add PR64895 xfails in i386/fuse-caller-save*.c\n\n2015-03-16  Tom de Vries  <tom@codesourcery.com>\n\n\t* gcc.target/i386/fuse-caller-save-rec.c: Add PR64895 xfail on scans.\n\t* gcc.target/i386/fuse-caller-save-xmm.c: Same.\n\t* gcc.target/i386/fuse-caller-save.c: Same.\n\nFrom-SVN: r221452", "tree": {"sha": "c660bf8ba93ece6f1669ea686ed3e5896ac00858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c660bf8ba93ece6f1669ea686ed3e5896ac00858"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aab918dacb5a7dc51a4a33db785f2840a093d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aab918dacb5a7dc51a4a33db785f2840a093d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aab918dacb5a7dc51a4a33db785f2840a093d9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aab918dacb5a7dc51a4a33db785f2840a093d9d/comments", "author": null, "committer": null, "parents": [{"sha": "61e0b23353f25d12fd1925ccd2aaaf19f56ddbcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e0b23353f25d12fd1925ccd2aaaf19f56ddbcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e0b23353f25d12fd1925ccd2aaaf19f56ddbcb"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "96f81d107caae380524f9201e93ff38e35992112", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aab918dacb5a7dc51a4a33db785f2840a093d9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aab918dacb5a7dc51a4a33db785f2840a093d9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2aab918dacb5a7dc51a4a33db785f2840a093d9d", "patch": "@@ -1,3 +1,9 @@\n+2015-03-16  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.target/i386/fuse-caller-save-rec.c: Add PR64895 xfail on scans.\n+\t* gcc.target/i386/fuse-caller-save-xmm.c: Same.\n+\t* gcc.target/i386/fuse-caller-save.c: Same.\n+\n 2015-03-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/loop_optimization18.ad[sb]: New test."}, {"sha": "7abcf91e26dd8ae739be12f56322ea4847c337d9", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save-rec.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aab918dacb5a7dc51a4a33db785f2840a093d9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aab918dacb5a7dc51a4a33db785f2840a093d9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c?ref=2aab918dacb5a7dc51a4a33db785f2840a093d9d", "patch": "@@ -18,12 +18,14 @@ foo (int y)\n   return y + bar (y);\n }\n \n+/* For !nonpic && ia32 xfails, see PR64895.  */\n+\n /* Check that no registers are saved/restored. */\n-/* { dg-final { scan-assembler-not \"push\"  } } */\n-/* { dg-final { scan-assembler-not \"pop\"  } } */\n+/* { dg-final { scan-assembler-not \"push\" { xfail { { ! nonpic } && ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"pop\" { xfail { { ! nonpic } && ia32 } } } } */\n \n /* Check that addition uses dx. */\n-/* { dg-final { scan-assembler-times \"addl\\t%\\[re\\]?dx, %\\[re\\]?ax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"addl\\t%\\[re\\]?dx, %\\[re\\]?ax\" 1 { xfail { { ! nonpic } && ia32 } } } } */\n \n /* Verify that bar is self-recursive.  */\n /* { dg-final { scan-assembler-times \"call\\t_?bar\" 2 } } */"}, {"sha": "c2d0544d665ddf68f4103fe1445d37fbc513ec45", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save-xmm.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aab918dacb5a7dc51a4a33db785f2840a093d9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aab918dacb5a7dc51a4a33db785f2840a093d9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-xmm.c?ref=2aab918dacb5a7dc51a4a33db785f2840a093d9d", "patch": "@@ -15,11 +15,13 @@ foo (v2df y)\n   return y + bar (y);\n }\n \n+/* For !nonpic && ia32 xfails, see PR64895.  */\n+\n /* Check presence of all insns on xmm registers.  These checks are expected to\n    pass with both -fipa-ra and -fno-ipa-ra.  */\n /* { dg-final { scan-assembler-times \"addpd\\t\\\\.?LC0.*, %xmm0\" 1 } } */\n-/* { dg-final { scan-assembler-times \"addpd\\t%xmm1, %xmm0\" 1 } } */\n-/* { dg-final { scan-assembler-times \"movapd\\t%xmm0, %xmm1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"addpd\\t%xmm1, %xmm0\" 1 { xfail { { ! nonpic } && ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movapd\\t%xmm0, %xmm1\" 1 { xfail { { ! nonpic } && ia32 } } } } */\n \n /* Check absence of save/restore of xmm1 register.  */\n /* { dg-final { scan-assembler-not \"movaps\\t%xmm1, \\\\(%\\[re\\]?sp\\\\)\" } } */"}, {"sha": "4b8e68d90f508ce000c4bf96f8d6a5d74a4002e0", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aab918dacb5a7dc51a4a33db785f2840a093d9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aab918dacb5a7dc51a4a33db785f2840a093d9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c?ref=2aab918dacb5a7dc51a4a33db785f2840a093d9d", "patch": "@@ -16,9 +16,11 @@ foo (int y)\n   return y + bar (y);\n }\n \n+/* For !nonpic && ia32 xfails, see PR64895.  */\n+\n /* Check that no registers are saved/restored. */\n-/* { dg-final { scan-assembler-not \"push\"  } } */\n-/* { dg-final { scan-assembler-not \"pop\"  } } */\n+/* { dg-final { scan-assembler-not \"push\" { xfail { { ! nonpic } && ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"pop\" { xfail { { ! nonpic } && ia32 } } } } */\n \n /* PR61605.  If the first argument register and the return register differ, then\n    bar leaves the first argument register intact.  That means in foo that the\n@@ -29,4 +31,4 @@ foo (int y)\n /* { dg-final { scan-assembler-not \"movl\" { target { ! ia32 } } } } */\n \n /* Check that addition uses di (in case of no copy) or dx (in case of copy). */\n-/* { dg-final { scan-assembler-times \"addl\\t%\\[re\\]?d\\[ix\\], %\\[re\\]?ax\" 1 } } */\n+/* { dg-final { scan-assembler-times \"addl\\t%\\[re\\]?d\\[ix\\], %\\[re\\]?ax\" 1 { xfail { { ! nonpic } && ia32 } } } } */"}]}