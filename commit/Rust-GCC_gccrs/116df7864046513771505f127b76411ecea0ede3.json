{"sha": "116df7864046513771505f127b76411ecea0ede3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE2ZGY3ODY0MDQ2NTEzNzcxNTA1ZjEyN2I3NjQxMWVjZWEwZWRlMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-09-09T17:36:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-09-09T17:36:42Z"}, "message": "re PR c/17322 (initializer folding broken)\n\n        PR c/17322\n        * c-typeck.c (valid_compound_expr_initializer): Use only\n        initializer_constant_valid_p, and not TREE_CONSTANT.\n        (digest_init): Likewise.\n        (output_init_element): Likewise.\n\nFrom-SVN: r87245", "tree": {"sha": "554e99807d215b24b2560c87ef3c474674a53b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/554e99807d215b24b2560c87ef3c474674a53b96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/116df7864046513771505f127b76411ecea0ede3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116df7864046513771505f127b76411ecea0ede3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/116df7864046513771505f127b76411ecea0ede3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116df7864046513771505f127b76411ecea0ede3/comments", "author": null, "committer": null, "parents": [{"sha": "41374e13ac15863e80fff7c4b8731ab34b1921f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41374e13ac15863e80fff7c4b8731ab34b1921f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41374e13ac15863e80fff7c4b8731ab34b1921f9"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "84a8c3462b113bea674a9be27f056cbac1f13a10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116df7864046513771505f127b76411ecea0ede3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116df7864046513771505f127b76411ecea0ede3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=116df7864046513771505f127b76411ecea0ede3", "patch": "@@ -1,3 +1,11 @@\n+2004-09-09  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c/17322\n+\t* c-typeck.c (valid_compound_expr_initializer): Use only\n+\tinitializer_constant_valid_p, and not TREE_CONSTANT.\n+\t(digest_init): Likewise.\n+\t(output_init_element): Likewise.\n+\n 2004-09-09  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \t* ra-build.c (copy_insn_p, remember_move, defuse_overlap_p_1,"}, {"sha": "4cfd7ce35b5dc19bc7626cb8229ad3075e9a3362", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116df7864046513771505f127b76411ecea0ede3/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116df7864046513771505f127b76411ecea0ede3/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=116df7864046513771505f127b76411ecea0ede3", "patch": "@@ -3737,8 +3737,7 @@ valid_compound_expr_initializer (tree value, tree endtype)\n       return valid_compound_expr_initializer (TREE_OPERAND (value, 1),\n \t\t\t\t\t      endtype);\n     }\n-  else if (! TREE_CONSTANT (value)\n-\t   && ! initializer_constant_valid_p (value, endtype))\n+  else if (!initializer_constant_valid_p (value, endtype))\n     return error_mark_node;\n   else\n     return value;\n@@ -4166,16 +4165,8 @@ digest_init (tree type, tree init, bool strict_string, int require_constant)\n \t    inside_init = error_mark_node;\n \t}\n       else if (require_constant\n-\t       && (!TREE_CONSTANT (inside_init)\n-\t\t   /* This test catches things like `7 / 0' which\n-\t\t      result in an expression for which TREE_CONSTANT\n-\t\t      is true, but which is not actually something\n-\t\t      that is a legal constant.  We really should not\n-\t\t      be using this function, because it is a part of\n-\t\t      the back-end.  Instead, the expression should\n-\t\t      already have been turned into ERROR_MARK_NODE.  */\n-\t\t   || !initializer_constant_valid_p (inside_init,\n-\t\t\t\t\t\t     TREE_TYPE (inside_init))))\n+\t       && !initializer_constant_valid_p (inside_init,\n+\t\t\t\t\t\t TREE_TYPE (inside_init)))\n \t{\n \t  error_init (\"initializer element is not constant\");\n \t  inside_init = error_mark_node;\n@@ -4203,7 +4194,8 @@ digest_init (tree type, tree init, bool strict_string, int require_constant)\n \t  inside_init = error_mark_node;\n \t}\n       else if (require_constant\n-\t       && initializer_constant_valid_p (inside_init, TREE_TYPE (inside_init)) == 0)\n+\t       && !initializer_constant_valid_p (inside_init,\n+\t\t\t\t\t\t TREE_TYPE (inside_init)))\n \t{\n \t  error_init (\"initializer element is not computable at load time\");\n \t  inside_init = error_mark_node;\n@@ -5585,21 +5577,23 @@ output_init_element (tree value, bool strict_string, tree type, tree field,\n     constructor_erroneous = 1;\n   else if (!TREE_CONSTANT (value))\n     constructor_constant = 0;\n-  else if (initializer_constant_valid_p (value, TREE_TYPE (value)) == 0\n+  else if (!initializer_constant_valid_p (value, TREE_TYPE (value))\n \t   || ((TREE_CODE (constructor_type) == RECORD_TYPE\n \t\t|| TREE_CODE (constructor_type) == UNION_TYPE)\n \t       && DECL_C_BIT_FIELD (field)\n \t       && TREE_CODE (value) != INTEGER_CST))\n     constructor_simple = 0;\n \n-  if (require_constant_value && ! TREE_CONSTANT (value))\n+  if (!initializer_constant_valid_p (value, TREE_TYPE (value)))\n     {\n-      error_init (\"initializer element is not constant\");\n-      value = error_mark_node;\n+      if (require_constant_value)\n+\t{\n+\t  error_init (\"initializer element is not constant\");\n+\t  value = error_mark_node;\n+\t}\n+      else if (require_constant_elements)\n+\tpedwarn (\"initializer element is not computable at load time\");\n     }\n-  else if (require_constant_elements\n-\t   && initializer_constant_valid_p (value, TREE_TYPE (value)) == 0)\n-    pedwarn (\"initializer element is not computable at load time\");\n \n   /* If this field is empty (and not at the end of structure),\n      don't do anything other than checking the initializer.  */"}, {"sha": "705787273b548d8d5ac5cf88bb02afedcc32ecf3", "filename": "gcc/testsuite/gcc.dg/pr17322.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116df7864046513771505f127b76411ecea0ede3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17322.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116df7864046513771505f127b76411ecea0ede3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17322.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17322.c?ref=116df7864046513771505f127b76411ecea0ede3", "patch": "@@ -0,0 +1,5 @@\n+/* PR 17322 */\n+\n+struct s { int a; int b[1]; };\n+struct s x;\n+int *y = ((struct s *)&x.a)->b;"}]}