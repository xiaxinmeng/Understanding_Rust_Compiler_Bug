{"sha": "fe1fd3534199f0595b01432701f76c65d4a464dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUxZmQzNTM0MTk5ZjA1OTViMDE0MzI3MDFmNzZjNjVkNGE0NjRkYw==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-10-16T20:25:25Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-10-16T20:25:25Z"}, "message": "irix6 ctors\n\nFrom-SVN: r12971", "tree": {"sha": "73380f8b5b5334d5ba3a9df98aa3b5ce0c1af224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73380f8b5b5334d5ba3a9df98aa3b5ce0c1af224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe1fd3534199f0595b01432701f76c65d4a464dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1fd3534199f0595b01432701f76c65d4a464dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe1fd3534199f0595b01432701f76c65d4a464dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1fd3534199f0595b01432701f76c65d4a464dc/comments", "author": null, "committer": null, "parents": [{"sha": "c8507ba06b74b058357b484e7a400da11935954c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8507ba06b74b058357b484e7a400da11935954c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8507ba06b74b058357b484e7a400da11935954c"}], "stats": {"total": 143, "additions": 105, "deletions": 38}, "files": [{"sha": "038affa2737b9ccfba29c4a99b9ec5ba0fa0e267", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 61, "deletions": 33, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1fd3534199f0595b01432701f76c65d4a464dc/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1fd3534199f0595b01432701f76c65d4a464dc/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=fe1fd3534199f0595b01432701f76c65d4a464dc", "patch": "@@ -49,7 +49,7 @@ Boston, MA 02111-1307, USA.  */\n %{mabi=32: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n %{mabi=n32: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n %{mabi=64: -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n-%{!mabi=32:%{!mabi=n32: %{!mabi=64: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int}}}\"\n+%{!mabi*: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int}\"\n \n /* We must make -mips3 do what -mlong64 used to do.  */\n /* ??? If no mipsX option given, but a mabi=X option is, then should set\n@@ -67,26 +67,26 @@ Boston, MA 02111-1307, USA.  */\n %{mips2: -D_MIPS_ISA=_MIPS_ISA_MIPS2} \\\n %{mips3: -D_MIPS_ISA=_MIPS_ISA_MIPS3} \\\n %{mips4: -D_MIPS_ISA=_MIPS_ISA_MIPS4} \\\n-%{!mips1: %{!mips2: %{!mips3: %{!mips4: -D_MIPS_ISA=_MIPS_ISA_MIPS3}}}} \\\n+%{!mips*: -D_MIPS_ISA=_MIPS_ISA_MIPS3} \\\n %{mabi=32: -D_MIPS_SIM=_MIPS_SIM_ABI32}\t\\\n %{mabi=n32: -D_ABIN32=2 -D_MIPS_SIM=_ABIN32} \\\n %{mabi=64: -D_ABI64=3 -D_MIPS_SIM=_ABI64} \\\n-%{!mabi=32: %{!mabi=n32: %{!mabi=64: -D_ABIN32=2 -D_MIPS_SIM=_ABIN32}}}\t\\\n+%{!mabi*: -D_ABIN32=2 -D_MIPS_SIM=_ABIN32} \\\n %{!mint64: -D_MIPS_SZINT=32}%{mint64: -D_MIPS_SZINT=64} \\\n %{mabi=32: -D_MIPS_SZLONG=32} \\\n %{mabi=n32: -D_MIPS_SZLONG=32} \\\n %{mabi=64: -D_MIPS_SZLONG=64} \\\n-%{!mabi=32: %{!mabi=n32: %{!mabi=64: -D_MIPS_SZLONG=32}}} \\\n+%{!mabi*: -D_MIPS_SZLONG=32} \\\n %{mabi=32: -D_MIPS_SZPTR=32} \\\n %{mabi=n32: -D_MIPS_SZPTR=32} \\\n %{mabi=64: -D_MIPS_SZPTR=64} \\\n-%{!mabi=32: %{!mabi=n32: %{!mabi=64: -D_MIPS_SZPTR=32}}} \\\n+%{!mabi*: -D_MIPS_SZPTR=32} \\\n %{!mips1:%{!mips2: -D_COMPILER_VERSION=601}}\t\t\\\n-%{!mips1:%{!mips2:%{!mips3:%{!mips4: -U__mips -D__mips=3}}}} \\\n+%{!mips*: -U__mips -D__mips=3} \\\n %{mabi=32: -U__mips64} \\\n %{mabi=n32: -D__mips64} \\\n %{mabi=64: -D__mips64} \\\n-%{!mabi=32: %{!mabi=n32: %{!mabi=64: -D__mips64}}}\"\n+%{!mabi*: -D__mips64}\"\n \n /* Irix 6 uses DWARF.  */\n #define DWARF_DEBUGGING_INFO\n@@ -190,10 +190,10 @@ Boston, MA 02111-1307, USA.  */\n /* Stuff for constructors.  Start here.  */\n \n /* The assembler now accepts .section pseudo-ops, but it does not allow\n-   one to change the section in the middle of a function.  crtstuff relies\n-   on this hack, and thus crtstuff won't work here.  So, we do init and\n-   fini sections exactly the same way as they are done for Irix 5, and\n-   we ifdef out the ASM_OUTPUT_{CON,DE}STRUCTOR macros below.  */\n+   one to change the section in the middle of a function, so we can't use\n+   the INIT_SECTION_ASM_OP code in crtstuff.  But we can build up the ctor\n+   and dtor lists this way, so we use -init and -fini to invoke the\n+   do_global_* functions instead of running collect2.  */\n \n #define CONST_SECTION_ASM_OP_32\t\"\\t.rdata\"\n #define CONST_SECTION_ASM_OP_64\t\".section\\t.rodata\"\n@@ -269,8 +269,6 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#if 0\n-\n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n@@ -291,8 +289,6 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n \n-#endif\n-\n /* A C statement to output something to the assembler file to switch to section\n    NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n    NULL_TREE.  */\n@@ -350,38 +346,70 @@ while (0)\n /* ??? If no mabi=X option give, but a mipsX option is, then should depend\n    on the mipsX option.  */\n #undef STARTFILE_SPEC\n-#undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n-  \"%{mabi=32:%{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s libprof1.a%s}%{!p:crt1.o%s}}} \\\n-   %{mabi=n32:%{pg:/usr/lib32/mips3/gcrt1.o%s}%{!pg:%{p:/usr/lib32/mips3/mcrt1.o%s /usr/lib32/mips3/libprof1.a%s}%{!p:/usr/lib32/mips3/crt1.o%s}} -L/usr/lib32/mips3} \\\n-   %{mabi=64:%{pg:/usr/lib64/gcrt1.o}%{!pg:%{p:/usr/lib64/mcrt1.o /usr/lib64/libprof1.a}%{!p:/usr/lib64/crt1.o}}} \\\n-   %{!mabi=32:%{!mabi=n32:%{!mabi=64:%{pg:/usr/lib32/mips3/gcrt1.o%s}%{!pg:%{p:/usr/lib32/mips3/mcrt1.o%s /usr/lib32/mips3/libprof1.a%s}%{!p:/usr/lib32/mips3/crt1.o%s}} -L/usr/lib32/mips3}}}\"\n+  \"%{!shared: \\\n+     %{mabi=32:%{pg:gcrt1.o%s} \\\n+       %{!pg:%{p:mcrt1.o%s libprof1.a%s}%{!p:crt1.o%s}}} \\\n+     %{mabi=n32: \\\n+       %{mips4:%{pg:/usr/lib32/mips4/gcrt1.o%s} \\\n+         %{!pg:%{p:/usr/lib32/mips4/mcrt1.o%s /usr/lib32/mips4/libprof1.a%s} \\\n+           %{!p:/usr/lib32/mips4/crt1.o%s}}} \\\n+       %{!mips4:%{pg:/usr/lib32/mips3/gcrt1.o%s} \\\n+         %{!pg:%{p:/usr/lib32/mips3/mcrt1.o%s /usr/lib32/mips3/libprof1.a%s} \\\n+           %{!p:/usr/lib32/mips3/crt1.o%s}}}} \\\n+     %{mabi=64: \\\n+       %{mips4:%{pg:/usr/lib64/mips4/gcrt1.o} \\\n+         %{!pg:%{p:/usr/lib64/mips4/mcrt1.o /usr/lib64/mips4/libprof1.a} \\\n+           %{!p:/usr/lib64/mips4/crt1.o}}} \\\n+       %{!mips4:%{pg:/usr/lib64/mips3/gcrt1.o} \\\n+         %{!pg:%{p:/usr/lib64/mips3/mcrt1.o /usr/lib64/mips3/libprof1.a} \\\n+           %{!p:/usr/lib64/mips3/crt1.o}}}} \\\n+     %{!mabi*: \\\n+       %{mips4:%{pg:/usr/lib32/mips4/gcrt1.o%s} \\\n+         %{!pg:%{p:/usr/lib32/mips4/mcrt1.o%s /usr/lib32/mips4/libprof1.a%s} \\\n+           %{!p:/usr/lib32/mips4/crt1.o%s}}} \\\n+       %{!mips4:%{pg:/usr/lib32/mips3/gcrt1.o%s} \\\n+         %{!pg:%{p:/usr/lib32/mips3/mcrt1.o%s /usr/lib32/mips3/libprof1.a%s} \\\n+           %{!p:/usr/lib32/mips3/crt1.o%s}}}}} \\\n+   %{mabi=n32: %{mips4:-L/usr/lib32/mips4} %{!mips4:-L/usr/lib32/mips3} \\\n+     -L/usr/lib32} \\\n+   %{mabi=64: %{mips4:-L/usr/lib64/mips4} %{!mips4:-L/usr/lib64/mips3} \\\n+     -L/usr/lib64} \\\n+   %{!mabi*: %{mips4:-L/usr/lib32/mips4} %{!mips4:-L/usr/lib32/mips3} \\\n+     -L/usr/lib32} \\\n+   crtbegin.o%s\"\n \n #undef LIB_SPEC\n-#define LIB_SPEC \"%{p:libprof1.a%s}%{pg:libprof1.a%s} -lc\"\n+#define LIB_SPEC \"\\\n+%{!shared: \\\n+  -dont_warn_unused %{p:libprof1.a%s}%{pg:libprof1.a%s} -lc -warn_unused}\"\n+\n+/* Avoid getting two warnings for libgcc.a everytime we link.  */\n+#undef LIBGCC_SPEC\n+#define LIBGCC_SPEC \"-dont_warn_unused -lgcc -warn_unused\"\n \n /* ??? If no mabi=X option give, but a mipsX option is, then should depend\n    on the mipsX option.  */\n #undef ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n-  \"%{mabi=32:crtn.o%s}%{mabi=n32:/usr/lib32/mips3/crtn.o%s}\\\n-   %{mabi=64:/usr/lib64/crtn.o}\\\n-   %{!mabi=32:%{!mabi=n32:%{!mabi=64:/usr/lib32/mips3/crtn.o%s}}}\"\n+  \"crtend.o%s \\\n+   %{!shared: \\\n+     %{mabi=32:crtn.o%s}\\\n+     %{mabi=n32:%{mips4:/usr/lib32/mips4/crtn.o%s}\\\n+       %{!mips4:/usr/lib32/mips3/crtn.o%s}}\\\n+     %{mabi=64:%{mips4:/usr/lib64/mips4/crtn.o%s}\\\n+       %{!mips4:/usr/lib64/mips3/crtn.o%s}}\\\n+     %{!mabi*:%{mips4:/usr/lib32/mips4/crtn.o%s}\\\n+       %{!mips4:/usr/lib32/mips3/crtn.o%s}}}\"\n \n /* ??? If no mabi=X option give, but a mipsX option is, then should depend\n    on the mipsX option.  */\n-/* ??? We use the -woff 84 option to disable the warning about linking\n-   with libraries that are unnecessary.  This message is currently more of\n-   a hassle than a benefit, because we get two warnings for libgcc.a everytime\n-   we link.  If we added the proper -dont_warn_unused/-warn_unused options\n-   around libgcc.a, then we can take out the -woff 84 option.  */\n #undef LINK_SPEC\n #define LINK_SPEC \"\\\n %{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n %{bestGnum} %{shared} %{non_shared} \\\n %{call_shared} %{no_archive} %{exact_version} \\\n %{!shared: %{!non_shared: %{!call_shared: -call_shared -no_unresolved}}} \\\n-%{rpath} \\\n--_SYSTYPE_SVR4 -woff 84 \\\n-%{mabi=32: -32}%{mabi=n32: -n32}%{mabi=64: -64} \\\n-%{!mabi=32:%{!mabi=n32:%{!mabi=64: -n32}}}\"\n+%{rpath} -init __do_global_ctors -fini __do_global_dtors \\\n+%{shared:-hidden_symbol __do_global_ctors,__do_global_dtors} \\\n+-_SYSTYPE_SVR4 %{mabi=32: -32}%{mabi=n32: -n32}%{mabi=64: -64} %{!mabi*: -n32}\""}, {"sha": "9990bef57c6cf2645a67923a7b0971abc48b327a", "filename": "gcc/config/mips/t-iris6", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1fd3534199f0595b01432701f76c65d4a464dc/gcc%2Fconfig%2Fmips%2Ft-iris6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1fd3534199f0595b01432701f76c65d4a464dc/gcc%2Fconfig%2Fmips%2Ft-iris6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-iris6?ref=fe1fd3534199f0595b01432701f76c65d4a464dc", "patch": "@@ -12,3 +12,8 @@ MULTILIB_MATCHES=\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n+\n+# For svr4 we build crtbegin.o and crtend.o which serve to add begin and\n+# end labels to the .ctors and .dtors section when we link using gcc.\n+\n+EXTRA_PARTS=crtbegin.o crtend.o"}, {"sha": "f41035c91ae5dc27e3a74d44f6ddb64f961b0b0c", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1fd3534199f0595b01432701f76c65d4a464dc/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1fd3534199f0595b01432701f76c65d4a464dc/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=fe1fd3534199f0595b01432701f76c65d4a464dc", "patch": "@@ -186,6 +186,21 @@ __do_global_ctors_aux ()\t/* prologue goes in .init section */\n }\n \n #endif /* OBJECT_FORMAT_ELF */\n+\n+#else /* defined(INIT_SECTION_ASM_OP) */\n+\n+/* This case is used by the Irix 6 port, which supports named sections but\n+   not an SVR4-style .fini section.  __do_global_dtors can be non-static\n+   in this case because the -fini switch to ld binds strongly.  */\n+static func_ptr __DTOR_LIST__[];\n+void\n+__do_global_dtors ()\n+{\n+  func_ptr *p;\n+  for (p = __DTOR_LIST__ + 1; *p; p++)\n+    (*p) ();\n+}\n+\n #endif /* defined(INIT_SECTION_ASM_OP) */\n \n /* Force cc1 to switch to .data section.  */\n@@ -297,6 +312,20 @@ __do_global_ctors_aux ()\t/* prologue goes in .text section */\n \n #endif /* OBJECT_FORMAT_ELF */\n \n+#else /* defined(INIT_SECTION_ASM_OP) */\n+\n+/* This case is used by the Irix 6 port, which supports named sections but\n+   not an SVR4-style .init section.  __do_global_ctors can be non-static\n+   in this case because the -init switch to ld binds strongly.  */\n+static func_ptr __CTOR_END__[];\n+void\n+__do_global_ctors ()\n+{\n+  func_ptr *p;\n+  for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)\n+    (*p) ();\n+}\n+\n #endif /* defined(INIT_SECTION_ASM_OP) */\n \n /* Force cc1 to switch to .data section.  */"}, {"sha": "9ccb1a550e48d38c8d2e2a5c4086c93a0f512ab3", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1fd3534199f0595b01432701f76c65d4a464dc/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1fd3534199f0595b01432701f76c65d4a464dc/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=fe1fd3534199f0595b01432701f76c65d4a464dc", "patch": "@@ -2815,7 +2815,12 @@ __enable_execute_stack ()\n #define SYMBOL__MAIN __main\n #endif\n \n-#if !defined (INIT_SECTION_ASM_OP) || !defined (OBJECT_FORMAT_ELF)\n+#ifdef INIT_SECTION_ASM_OP\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION\n+#endif\n+\n+#if !defined (HAS_INIT_SECTION) || !defined (OBJECT_FORMAT_ELF)\n /* Run all the global destructors on exit from the program.  */\n \n void\n@@ -2831,7 +2836,7 @@ __do_global_dtors ()\n }\n #endif\n \n-#ifndef INIT_SECTION_ASM_OP\n+#ifndef HAS_INIT_SECTION\n /* Run all the global constructors on entry to the program.  */\n \n #ifndef ON_EXIT\n@@ -2851,9 +2856,9 @@ __do_global_ctors ()\n   DO_GLOBAL_CTORS_BODY;\n   ON_EXIT (__do_global_dtors, 0);\n }\n-#endif /* no INIT_SECTION_ASM_OP */\n+#endif /* no HAS_INIT_SECTION */\n \n-#if !defined (INIT_SECTION_ASM_OP) || defined (INVOKE__main)\n+#if !defined (HAS_INIT_SECTION) || defined (INVOKE__main)\n /* Subroutine called automatically by `main'.\n    Compiling a global function named `main'\n    produces an automatic call to this function at the beginning.\n@@ -2873,7 +2878,7 @@ SYMBOL__MAIN ()\n       __do_global_ctors ();\n     }\n }\n-#endif /* no INIT_SECTION_ASM_OP or INVOKE__main */\n+#endif /* no HAS_INIT_SECTION or INVOKE__main */\n \n #endif /* L__main */\n \f"}]}