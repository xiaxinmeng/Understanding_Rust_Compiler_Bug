{"sha": "f7e1d19d58660dee3fb0bd41496610a343f93e45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdlMWQxOWQ1ODY2MGRlZTNmYjBiZDQxNDk2NjEwYTM0M2Y5M2U0NQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2018-08-30T10:40:07Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2018-08-30T10:40:07Z"}, "message": "Limit movmem copies to TImode on AArch64\n\nOn AArch64 we have integer modes larger than TImode, and while we can generate\nmoves for these they're not as efficient.\n\nSo instead make sure we limit the maximum we can copy to TImode.  This means\ncopying a 16 byte struct will issue 1 TImode copy, which will be done using a\nsingle STP as we expect but an CImode sized copy won't issue CImode operations.\n\nI am also moving the residual code inside the if since smallest_mode_for_int may\ntrap if the mode doesn't exist.  And the only time we know the mode to exist for\nsure is when the condition of the if is true.  This also saves repeated calls to\nthe iterator.\n\ngcc/\n2018-08-30  Tamar Christina  <tamar.christina@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_expand_movmem): Set TImode max.\n\ngcc/testsuite/\n2018-08-30  Tamar Christina  <tamar.christina@arm.com>\n\n \t* gcc.target/aarch64/large_struct_copy_2.c: New.\n\nFrom-SVN: r263974", "tree": {"sha": "9260b896db0bc13a11c812bd438f016bc728b63c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9260b896db0bc13a11c812bd438f016bc728b63c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7e1d19d58660dee3fb0bd41496610a343f93e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e1d19d58660dee3fb0bd41496610a343f93e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7e1d19d58660dee3fb0bd41496610a343f93e45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e1d19d58660dee3fb0bd41496610a343f93e45/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c729951e9c51dabfc3ab7ef864ab2ab8b07b5934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c729951e9c51dabfc3ab7ef864ab2ab8b07b5934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c729951e9c51dabfc3ab7ef864ab2ab8b07b5934"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "f7fb162f92553b3efc0e550cd3dd69603f42f53d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e1d19d58660dee3fb0bd41496610a343f93e45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e1d19d58660dee3fb0bd41496610a343f93e45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7e1d19d58660dee3fb0bd41496610a343f93e45", "patch": "@@ -1,3 +1,7 @@\n+2018-08-30  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_movmem): Set TImode max.\n+\n 2018-08-30  Vlad Lazar  <vlad.lazar@arm.com>\n \n \tPR middle-end/86995"}, {"sha": "1de76e075471acaa68584595023e3878b10538e2", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e1d19d58660dee3fb0bd41496610a343f93e45/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e1d19d58660dee3fb0bd41496610a343f93e45/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f7e1d19d58660dee3fb0bd41496610a343f93e45", "patch": "@@ -15938,13 +15938,17 @@ aarch64_expand_movmem (rtx *operands)\n   /* Convert n to bits to make the rest of the code simpler.  */\n   n = n * BITS_PER_UNIT;\n \n+  /* Maximum amount to copy in one go.  The AArch64 back-end has integer modes\n+     larger than TImode, but we should not use them for loads/stores here.  */\n+  const int copy_limit = GET_MODE_BITSIZE (TImode);\n+\n   while (n > 0)\n     {\n       /* Find the largest mode in which to do the copy in without over reading\n \t or writing.  */\n       opt_scalar_int_mode mode_iter;\n       FOR_EACH_MODE_IN_CLASS (mode_iter, MODE_INT)\n-\tif (GET_MODE_BITSIZE (mode_iter.require ()) <= n)\n+\tif (GET_MODE_BITSIZE (mode_iter.require ()) <= MIN (n, copy_limit))\n \t  cur_mode = mode_iter.require ();\n \n       gcc_assert (cur_mode != BLKmode);\n@@ -15958,10 +15962,10 @@ aarch64_expand_movmem (rtx *operands)\n \t cheaper.  i.e. less instructions to do so.  For instance doing a 15\n \t byte copy it's more efficient to do two overlapping 8 byte copies than\n \t 8 + 6 + 1.  */\n-      next_mode = smallest_mode_for_size (n, MODE_INT);\n-      int n_bits = GET_MODE_BITSIZE (next_mode).to_constant ();\n-      if (n > 0 && n_bits > n && n_bits <= 8 * BITS_PER_UNIT)\n+      if (n > 0 && n <= 8 * BITS_PER_UNIT)\n \t{\n+\t  next_mode = smallest_mode_for_size (n, MODE_INT);\n+\t  int n_bits = GET_MODE_BITSIZE (next_mode).to_constant ();\n \t  src = aarch64_move_pointer (src, (n - n_bits) / BITS_PER_UNIT);\n \t  dst = aarch64_move_pointer (dst, (n - n_bits) / BITS_PER_UNIT);\n \t  n = n_bits;"}, {"sha": "fd78dcf089207eafce38ea15e4cdcaa0847db991", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e1d19d58660dee3fb0bd41496610a343f93e45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e1d19d58660dee3fb0bd41496610a343f93e45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7e1d19d58660dee3fb0bd41496610a343f93e45", "patch": "@@ -1,3 +1,7 @@\n+2018-08-30  Tamar Christina  <tamar.christina@arm.com>\n+\n+ \t* gcc.target/aarch64/large_struct_copy_2.c: New.\n+\n 2018-08-29  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/87053"}, {"sha": "565434244e8296749a99bebc4e095065945d825e", "filename": "gcc/testsuite/gcc.target/aarch64/large_struct_copy_2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e1d19d58660dee3fb0bd41496610a343f93e45/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flarge_struct_copy_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e1d19d58660dee3fb0bd41496610a343f93e45/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flarge_struct_copy_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flarge_struct_copy_2.c?ref=f7e1d19d58660dee3fb0bd41496610a343f93e45", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned __attribute__((mode(DI))) uint64_t;\n+\n+struct S0 {\n+  uint64_t f1;\n+  uint64_t f2;\n+  uint64_t f3;\n+  uint64_t f4;\n+  uint64_t f5;\n+} a;\n+struct S2 {\n+  uint64_t f0;\n+  uint64_t f2;\n+  struct S0 f3;\n+};\n+\n+void fn1 () {\n+  struct S2 b = {0, 1, 7, 4073709551611, 4, 8, 7};\n+  a = b.f3;\n+}\n+\n+/* { dg-final { scan-assembler-times {ldp\\s+x[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {stp\\s+x[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {ld[1-3]} } } */"}]}