{"sha": "5b2003105b35f8fe8e074c055a718c8f484d9d32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIyMDAzMTA1YjM1ZjhmZThlMDc0YzA1NWE3MThjOGY0ODRkOWQzMg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-02T13:46:30Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-05T20:55:14Z"}, "message": "c++: Implement -Wvexing-parse [PR25814]\n\nThis patch implements the -Wvexing-parse warning to warn about the\nsneaky most vexing parse rule in C++: the cases when a declaration\nlooks like a variable definition, but the C++ language requires it\nto be interpreted as a function declaration.  This warning is on by\ndefault (like clang++).  From the docs:\n\n  void f(double a) {\n    int i();        // extern int i (void);\n    int n(int(a));  // extern int n (int);\n  }\n\n  Another example:\n\n  struct S { S(int); };\n  void f(double a) {\n    S x(int(a));   // extern struct S x (int);\n    S y(int());    // extern struct S y (int (*) (void));\n    S z();         // extern struct S z (void);\n  }\n\nYou can find more on this in [dcl.ambig.res].\n\nI spent a fair amount of time on fix-it hints so that GCC can recommend\nvarious ways to resolve such an ambiguity.  Sometimes that's tricky.\nE.g., suggesting default-initialization when the class doesn't have\na default constructor would not be optimal.  Suggesting {}-init is also\nnot trivial because it can use an initializer-list constructor if no\ndefault constructor is available (which ()-init wouldn't do).  And of\ncourse, pre-C++11, we shouldn't be recommending {}-init at all.\n\nI also uncovered a bug in cp_parser_declarator, where we were setting\n*parenthesized_p to true despite the comment saying the exact opposite.\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/25814\n\t* c.opt (Wvexing-parse): New option.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/25814\n\t* cp-tree.h (enum cp_tree_index): Add CPTI_EXPLICIT_VOID_LIST.\n\t(explicit_void_list_node): Define.\n\t(PARENTHESIZED_LIST_P): New macro.\n\t(struct cp_declarator): Add function::parens_loc.\n\t* decl.c (cxx_init_decl_processing): Initialize explicit_void_list_node.\n\t(grokparms): Also break when explicit_void_list_node.\n\t* parser.c (make_call_declarator): New location_t parameter.  Use it\n\tto set declarator->u.function.parens_loc.\n\t(cp_parser_lambda_declarator_opt): Pass UNKNOWN_LOCATION to\n\tmake_call_declarator.\n\t(warn_about_ambiguous_parse): New function.\n\t(cp_parser_init_declarator): Call warn_about_ambiguous_parse.\n\t(cp_parser_declarator): Set *parenthesized_p to false rather than to\n\ttrue.\n\t(cp_parser_direct_declarator): Create a location for the function's\n\tparentheses and pass it to make_call_declarator.\n\t(cp_parser_parameter_declaration_clause): Return explicit_void_list_node\n\tfor (void).\n\t(cp_parser_parameter_declaration_list): Set PARENTHESIZED_LIST_P\n\tin the parameters tree.\n\ngcc/ChangeLog:\n\n\tPR c++/25814\n\t* doc/invoke.texi: Document -Wvexing-parse.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/25814\n\t* g++.dg/cpp2a/fn-template16.C: Add a dg-warning.\n\t* g++.dg/cpp2a/fn-template7.C: Likewise.\n\t* g++.dg/lookup/pr80891-5.C: Likewise.\n\t* g++.dg/lto/pr79050_0.C: Add extern.\n\t* g++.dg/lto/pr84805_0.C: Likewise.\n\t* g++.dg/parse/pr58898.C: Add a dg-warning.\n\t* g++.dg/template/scope5.C: Likewise.\n\t* g++.old-deja/g++.brendan/recurse.C: Likewise.\n\t* g++.old-deja/g++.jason/template4.C: Likewise.\n\t* g++.old-deja/g++.law/arm4.C: Likewise.\n\t* g++.old-deja/g++.mike/for2.C: Likewise.\n\t* g++.old-deja/g++.other/local4.C: Likewise.\n\t* g++.old-deja/g++.pt/crash3.C: Likewise.\n\t* g++.dg/warn/Wvexing-parse.C: New test.\n\t* g++.dg/warn/Wvexing-parse2.C: New test.\n\t* g++.dg/warn/Wvexing-parse3.C: New test.\n\t* g++.dg/warn/Wvexing-parse4.C: New test.\n\t* g++.dg/warn/Wvexing-parse5.C: New test.\n\t* g++.dg/warn/Wvexing-parse6.C: New test.\n\t* g++.dg/warn/Wvexing-parse7.C: New test.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR c++/25814\n\t* testsuite/20_util/reference_wrapper/lwg2993.cc: Add a dg-warning.\n\t* testsuite/25_algorithms/generate_n/87982_neg.cc: Likewise.", "tree": {"sha": "864228a0058125059a0930ea0abc69aef281e8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/864228a0058125059a0930ea0abc69aef281e8df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b2003105b35f8fe8e074c055a718c8f484d9d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2003105b35f8fe8e074c055a718c8f484d9d32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b2003105b35f8fe8e074c055a718c8f484d9d32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2003105b35f8fe8e074c055a718c8f484d9d32/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22984f3f090921b5ac80ec0057f6754ec458e97e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22984f3f090921b5ac80ec0057f6754ec458e97e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22984f3f090921b5ac80ec0057f6754ec458e97e"}], "stats": {"total": 640, "additions": 617, "deletions": 23}, "files": [{"sha": "5bfe3a68f66b11bcc53d1c386142c53e6bba6490", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -1274,6 +1274,10 @@ Wvarargs\n C ObjC C++ ObjC++ Warning Var(warn_varargs) Init(1)\n Warn about questionable usage of the macros used to retrieve variable arguments.\n \n+Wvexing-parse\n+C++ ObjC++ Warning Var(warn_vexing_parse) Init(1)\n+Warn about the most vexing parse syntactic ambiguity.\n+\n Wvla\n C ObjC C++ ObjC++ Var(warn_vla) Init(-1) Warning\n Warn if a variable length array is used."}, {"sha": "fde9f63ec0552c1b100cb06cbfdf143c63511de5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -125,6 +125,7 @@ enum cp_tree_index\n     CPTI_CLASS_TYPE,\n     CPTI_UNKNOWN_TYPE,\n     CPTI_INIT_LIST_TYPE,\n+    CPTI_EXPLICIT_VOID_LIST,\n     CPTI_VTBL_TYPE,\n     CPTI_VTBL_PTR_TYPE,\n     CPTI_STD,\n@@ -232,6 +233,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define class_type_node\t\t\tcp_global_trees[CPTI_CLASS_TYPE]\n #define unknown_type_node\t\tcp_global_trees[CPTI_UNKNOWN_TYPE]\n #define init_list_type_node\t\tcp_global_trees[CPTI_INIT_LIST_TYPE]\n+#define explicit_void_list_node\t\tcp_global_trees[CPTI_EXPLICIT_VOID_LIST]\n #define vtbl_type_node\t\t\tcp_global_trees[CPTI_VTBL_TYPE]\n #define vtbl_ptr_type_node\t\tcp_global_trees[CPTI_VTBL_PTR_TYPE]\n #define std_node\t\t\tcp_global_trees[CPTI_STD]\n@@ -413,6 +415,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       ATTR_IS_DEPENDENT (in the TREE_LIST for an attribute)\n       ABI_TAG_IMPLICIT (in the TREE_LIST for the argument of abi_tag)\n       LAMBDA_CAPTURE_EXPLICIT_P (in a TREE_LIST in LAMBDA_EXPR_CAPTURE_LIST)\n+      PARENTHESIZED_LIST_P (in the TREE_LIST for a parameter-declaration-list)\n       CONSTRUCTOR_IS_DIRECT_INIT (in CONSTRUCTOR)\n       LAMBDA_EXPR_CAPTURES_THIS_P (in LAMBDA_EXPR)\n       DECLTYPE_FOR_LAMBDA_CAPTURE (in DECLTYPE_TYPE)\n@@ -3382,6 +3385,10 @@ struct GTY(()) lang_decl {\n    was inherited from a template parameter, not explicitly indicated.  */\n #define ABI_TAG_IMPLICIT(NODE) TREE_LANG_FLAG_0 (TREE_LIST_CHECK (NODE))\n \n+/* In a TREE_LIST for a parameter-declaration-list, indicates that all the\n+   parameters in the list have declarators enclosed in ().  */\n+#define PARENTHESIZED_LIST_P(NODE) TREE_LANG_FLAG_0 (TREE_LIST_CHECK (NODE))\n+\n /* Non zero if this is a using decl for a dependent scope. */\n #define DECL_DEPENDENT_P(NODE) DECL_LANG_FLAG_0 (USING_DECL_CHECK (NODE))\n \n@@ -6038,6 +6045,7 @@ struct cp_declarator {\n       tree late_return_type;\n       /* The trailing requires-clause, if any. */\n       tree requires_clause;\n+      location_t parens_loc;\n     } function;\n     /* For arrays.  */\n     struct {"}, {"sha": "98c1a5decf251e5f1259ebe3edef47d058c2805b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -4384,6 +4384,9 @@ cxx_init_decl_processing (void)\n   init_list_type_node = make_node (LANG_TYPE);\n   record_unknown_type (init_list_type_node, \"init list\");\n \n+  /* Used when parsing to distinguish parameter-lists () and (void).  */\n+  explicit_void_list_node = build_void_list_node ();\n+\n   {\n     /* Make sure we get a unique function type, so we can give\n        its pointer type a name.  (This wins for gdb.) */\n@@ -14037,7 +14040,7 @@ grokparms (tree parmlist, tree *parms)\n       tree init = TREE_PURPOSE (parm);\n       tree decl = TREE_VALUE (parm);\n \n-      if (parm == void_list_node)\n+      if (parm == void_list_node || parm == explicit_void_list_node)\n \tbreak;\n \n       if (! decl || TREE_TYPE (decl) == error_mark_node)"}, {"sha": "e7bfbf649a5b59b58dde998e3e0ae9210b083afc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 149, "deletions": 6, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -1438,7 +1438,8 @@ clear_decl_specs (cp_decl_specifier_seq *decl_specs)\n    VAR_DECLs or FUNCTION_DECLs) should do that directly.  */\n \n static cp_declarator *make_call_declarator\n-  (cp_declarator *, tree, cp_cv_quals, cp_virt_specifiers, cp_ref_qualifier, tree, tree, tree, tree);\n+  (cp_declarator *, tree, cp_cv_quals, cp_virt_specifiers, cp_ref_qualifier,\n+   tree, tree, tree, tree, location_t);\n static cp_declarator *make_array_declarator\n   (cp_declarator *, tree);\n static cp_declarator *make_pointer_declarator\n@@ -1621,7 +1622,8 @@ make_call_declarator (cp_declarator *target,\n \t\t      tree tx_qualifier,\n \t\t      tree exception_specification,\n \t\t      tree late_return_type,\n-\t\t      tree requires_clause)\n+\t\t      tree requires_clause,\n+\t\t      location_t parens_loc)\n {\n   cp_declarator *declarator;\n \n@@ -1635,6 +1637,7 @@ make_call_declarator (cp_declarator *target,\n   declarator->u.function.exception_specification = exception_specification;\n   declarator->u.function.late_return_type = late_return_type;\n   declarator->u.function.requires_clause = requires_clause;\n+  declarator->u.function.parens_loc = parens_loc;\n   if (target)\n     {\n       declarator->id_loc = target->id_loc;\n@@ -11246,7 +11249,8 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \t\t\t\t       tx_qual,\n \t\t\t\t       exception_spec,\n                                        return_type,\n-\t\t\t\t       trailing_requires_clause);\n+\t\t\t\t       trailing_requires_clause,\n+\t\t\t\t       UNKNOWN_LOCATION);\n     declarator->std_attributes = std_attrs;\n \n     fco = grokmethod (&return_type_specs,\n@@ -20613,6 +20617,129 @@ strip_declarator_types (tree type, cp_declarator *declarator)\n   return type;\n }\n \n+/* Warn about the most vexing parse syntactic ambiguity, i.e., warn when\n+   a construct looks like a variable definition but is actually a function\n+   declaration.  DECL_SPECIFIERS is the decl-specifier-seq and DECLARATOR\n+   is the declarator for this function declaration.  */\n+\n+static void\n+warn_about_ambiguous_parse (const cp_decl_specifier_seq *decl_specifiers,\n+\t\t\t    const cp_declarator *declarator)\n+{\n+  /* Only warn if we are declaring a function at block scope.  */\n+  if (!at_function_scope_p ())\n+    return;\n+\n+  /* And only if there is no storage class specified.  */\n+  if (decl_specifiers->storage_class != sc_none\n+      || decl_spec_seq_has_spec_p (decl_specifiers, ds_typedef))\n+    return;\n+\n+  if (declarator->kind != cdk_function\n+      || !declarator->declarator\n+      || declarator->declarator->kind != cdk_id\n+      || !identifier_p (get_unqualified_id\n+\t\t\t(const_cast<cp_declarator *>(declarator))))\n+    return;\n+\n+  /* Don't warn when the whole declarator (not just the declarator-id!)\n+     was parenthesized.  That is, don't warn for int(n()) but do warn\n+     for int(f)().  */\n+  if (declarator->parenthesized != UNKNOWN_LOCATION)\n+    return;\n+\n+  tree type = decl_specifiers->type;\n+  if (TREE_CODE (type) == TYPE_DECL)\n+   type = TREE_TYPE (type);\n+\n+  /* If the return type is void there is no ambiguity.  */\n+  if (same_type_p (type, void_type_node))\n+    return;\n+\n+  auto_diagnostic_group d;\n+  location_t loc = declarator->u.function.parens_loc;\n+  tree params = declarator->u.function.parameters;\n+  const bool has_list_ctor_p = CLASS_TYPE_P (type) && TYPE_HAS_LIST_CTOR (type);\n+\n+  /* The T t() case.  */\n+  if (params == void_list_node)\n+    {\n+      if (warning_at (loc, OPT_Wvexing_parse,\n+\t\t      \"empty parentheses were disambiguated as a function \"\n+\t\t      \"declaration\"))\n+\t{\n+\t  /* () means value-initialization (C++03 and up); {} (C++11 and up)\n+\t     means value-initialization or aggregate-initialization, nothing\n+\t     means default-initialization.  We can only suggest removing the\n+\t     parentheses/adding {} if T has a default constructor.  */\n+\t  if (!CLASS_TYPE_P (type) || TYPE_HAS_DEFAULT_CONSTRUCTOR (type))\n+\t    {\n+\t      gcc_rich_location iloc (loc);\n+\t      iloc.add_fixit_remove ();\n+\t      inform (&iloc, \"remove parentheses to default-initialize \"\n+\t\t      \"a variable\");\n+\t      if (cxx_dialect >= cxx11 && !has_list_ctor_p)\n+\t\t{\n+\t\t  if (CP_AGGREGATE_TYPE_P (type))\n+\t\t    inform (loc, \"or replace parentheses with braces to \"\n+\t\t\t    \"aggregate-initialize a variable\");\n+\t\t  else\n+\t\t    inform (loc, \"or replace parentheses with braces to \"\n+\t\t\t    \"value-initialize a variable\");\n+\t\t}\n+\t    }\n+\t}\n+      return;\n+    }\n+\n+  /* If we had (...) or the parameter-list wasn't parenthesized,\n+     we're done.  */\n+  if (params == NULL_TREE || !PARENTHESIZED_LIST_P (params))\n+    return;\n+\n+  /* The T t(X()) case.  */\n+  if (list_length (params) == 2)\n+    {\n+      if (warning_at (loc, OPT_Wvexing_parse,\n+\t\t      \"parentheses were disambiguated as a function \"\n+\t\t      \"declaration\"))\n+\t{\n+\t  gcc_rich_location iloc (loc);\n+\t  /* {}-initialization means that we can use an initializer-list\n+\t     constructor if no default constructor is available, so don't\n+\t     suggest using {} for classes that have an initializer_list\n+\t     constructor.  */\n+\t  if (cxx_dialect >= cxx11 && !has_list_ctor_p)\n+\t    {\n+\t      iloc.add_fixit_replace (get_start (loc), \"{\");\n+\t      iloc.add_fixit_replace (get_finish (loc), \"}\");\n+\t      inform (&iloc, \"replace parentheses with braces to declare a \"\n+\t\t      \"variable\");\n+\t    }\n+\t  else\n+\t    {\n+\t      iloc.add_fixit_insert_after (get_start (loc), \"(\");\n+\t      iloc.add_fixit_insert_before (get_finish (loc), \")\");\n+\t      inform (&iloc, \"add parentheses to declare a variable\");\n+\t    }\n+\t}\n+    }\n+  /* The T t(X(), X()) case.  */\n+  else if (warning_at (loc, OPT_Wvexing_parse,\n+\t\t       \"parentheses were disambiguated as a function \"\n+\t\t       \"declaration\"))\n+    {\n+      gcc_rich_location iloc (loc);\n+      if (cxx_dialect >= cxx11 && !has_list_ctor_p)\n+\t{\n+\t  iloc.add_fixit_replace (get_start (loc), \"{\");\n+\t  iloc.add_fixit_replace (get_finish (loc), \"}\");\n+\t  inform (&iloc, \"replace parentheses with braces to declare a \"\n+\t\t  \"variable\");\n+\t}\n+    }\n+}\n+\n /* Declarators [gram.dcl.decl] */\n \n /* Parse an init-declarator.\n@@ -20808,6 +20935,9 @@ cp_parser_init_declarator (cp_parser* parser,\n \t    }\n \t}\n \n+      if (!member_p && !cp_parser_error_occurred (parser))\n+\twarn_about_ambiguous_parse (decl_specifiers, declarator);\n+\n       /* Check to see if the token indicates the start of a\n \t function-definition.  */\n       if (cp_parser_token_starts_function_definition_p (token))\n@@ -21202,7 +21332,7 @@ cp_parser_declarator (cp_parser* parser,\n       /* If a ptr-operator was found, then this declarator was not\n \t parenthesized.  */\n       if (parenthesized_p)\n-\t*parenthesized_p = true;\n+\t*parenthesized_p = false;\n       /* The dependent declarator is optional if we are parsing an\n \t abstract-declarator.  */\n       if (dcl_kind != CP_PARSER_DECLARATOR_NAMED)\n@@ -21349,6 +21479,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\tcp_parser_parse_tentatively (parser);\n \n \t      /* Consume the `('.  */\n+\t      const location_t parens_start = token->location;\n \t      matching_parens parens;\n \t      parens.consume_open (parser);\n \t      if (first)\n@@ -21368,6 +21499,8 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      /* Parse the parameter-declaration-clause.  */\n \t      params\n \t\t= cp_parser_parameter_declaration_clause (parser, flags);\n+\t      const location_t parens_end\n+\t\t= cp_lexer_peek_token (parser->lexer)->location;\n \n \t      /* Consume the `)'.  */\n \t      parens.require_close (parser);\n@@ -21432,6 +21565,9 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t  /* Parse the virt-specifier-seq.  */\n \t\t  virt_specifiers = cp_parser_virt_specifier_seq_opt (parser);\n \n+\t\t  location_t parens_loc = make_location (parens_start,\n+\t\t\t\t\t\t\t parens_start,\n+\t\t\t\t\t\t\t parens_end);\n \t\t  /* Create the function-declarator.  */\n \t\t  declarator = make_call_declarator (declarator,\n \t\t\t\t\t\t     params,\n@@ -21441,7 +21577,8 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t\t\t\t\t     tx_qual,\n \t\t\t\t\t\t     exception_specification,\n \t\t\t\t\t\t     late_return,\n-\t\t\t\t\t\t     requires_clause);\n+\t\t\t\t\t\t     requires_clause,\n+\t\t\t\t\t\t     parens_loc);\n \t\t  declarator->std_attributes = attrs;\n \t\t  declarator->attributes = gnu_attrs;\n \t\t  /* Any subsequent parameter lists are to do with\n@@ -22708,7 +22845,7 @@ cp_parser_parameter_declaration_clause (cp_parser* parser,\n       /* Consume the `void' token.  */\n       cp_lexer_consume_token (parser->lexer);\n       /* There are no parameters.  */\n-      return void_list_node;\n+      return explicit_void_list_node;\n     }\n \n   /* Parse the parameter-declaration-list.  */\n@@ -22832,6 +22969,12 @@ cp_parser_parameter_declaration_list (cp_parser* parser, cp_parser_flags flags)\n       *tail = build_tree_list (parameter->default_argument, decl);\n       tail = &TREE_CHAIN (*tail);\n \n+      /* If the parameters were parenthesized, it's the case of\n+\t T foo(X(x)) which looks like a variable definition but\n+\t is a function declaration.  */\n+      if (index == 1 || PARENTHESIZED_LIST_P (parameters))\n+\tPARENTHESIZED_LIST_P (parameters) = parenthesized_p;\n+\n       /* Peek at the next token.  */\n       if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN)\n \t  || cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS)"}, {"sha": "812fa46e906734f109d9434548f6b53e327d695e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -253,7 +253,8 @@ in the following sections.\n -Woverloaded-virtual  -Wno-pmf-conversions -Wsign-promo @gol\n -Wsized-deallocation  -Wsuggest-final-methods @gol\n -Wsuggest-final-types  -Wsuggest-override  @gol\n--Wno-terminate  -Wuseless-cast  -Wvirtual-inheritance  @gol\n+-Wno-terminate  -Wuseless-cast  -Wno-vexing-parse  @gol\n+-Wvirtual-inheritance  @gol\n -Wno-virtual-move-assign  -Wvolatile  -Wzero-as-null-pointer-constant}\n \n @item Objective-C and Objective-C++ Language Options\n@@ -3886,6 +3887,37 @@ use the STL.  One may also use using directives and qualified names.\n Disable the warning about a throw-expression that will immediately\n result in a call to @code{terminate}.\n \n+@item -Wno-vexing-parse @r{(C++ and Objective-C++ only)}\n+@opindex Wvexing-parse\n+@opindex Wno-vexing-parse\n+Warn about the most vexing parse syntactic ambiguity.  This warns about\n+the cases when a declaration looks like a variable definition, but the\n+C++ language requires it to be interpreted as a function declaration.\n+For instance:\n+\n+@smallexample\n+void f(double a) @{\n+  int i();        // extern int i (void);\n+  int n(int(a));  // extern int n (int);\n+@}\n+@end smallexample\n+\n+Another example:\n+\n+@smallexample\n+struct S @{ S(int); @};\n+void f(double a) @{\n+  S x(int(a));   // extern struct S x (int);\n+  S y(int());    // extern struct S y (int (*) (void));\n+  S z();         // extern struct S z (void);\n+@}\n+@end smallexample\n+\n+The warning will suggest options how to deal with such an ambiguity; e.g.,\n+it can suggest removing the parentheses or using braces instead.\n+\n+This warning is enabled by default.\n+\n @item -Wno-class-conversion @r{(C++ and Objective-C++ only)}\n @opindex Wno-class-conversion\n @opindex Wclass-conversion"}, {"sha": "8ee783ad5773bb14b987b73657095e18cb16ad17", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template16.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -7,7 +7,7 @@ struct undeclared<int> { }; // { dg-error \"not a class template\" }\n int\n main ()\n {\n-  int foo ();\n+  int foo (); // { dg-warning \"empty parentheses\" }\n   int foo (int);\n   int foo (int, int);\n   int a, b = 10;"}, {"sha": "2c5ee120dcd4ad132ff68935f40cb496e0c26ece", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template7.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -7,7 +7,7 @@ struct undeclared<int> { }; // { dg-error \"not a class template\" }\n int\n main ()\n {\n-  int foo ();\n+  int foo (); // { dg-warning \"empty parentheses\" }\n   int a, b = 10;\n   a = foo<; // { dg-error \"invalid template-argument-list|invalid\" }\n   a = foo < b; // { dg-error \"invalid template-argument-list|invalid\" }"}, {"sha": "10d1ce3f3d52bad3f8f0c99a8aca0b7e0e87ae78", "filename": "gcc/testsuite/g++.dg/lookup/pr80891-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80891-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80891-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80891-5.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -14,7 +14,7 @@ template <typename, typename, typename, typename,\n struct B {\n   B(A, A, int, int, int, int);\n   void m_fn1(SubGraphIsoMapCallback p1) {\n-    __normal_iterator __trans_tmp_1();\n+    __normal_iterator __trans_tmp_1(); // { dg-warning \"empty parentheses\" }\n     p1(__trans_tmp_1, 0);\n   }\n };"}, {"sha": "464f559476958b47f4813564b18ccf1e7201d049", "filename": "gcc/testsuite/g++.dg/lto/pr79050_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr79050_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr79050_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr79050_0.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -3,5 +3,5 @@\n \n int main ()\n {\n-  auto foo ();\n+  extern auto foo ();\n }"}, {"sha": "668ba362aed50976313cc623fd273bef3838c283", "filename": "gcc/testsuite/g++.dg/lto/pr84805_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -149,5 +149,5 @@ public:\n class XclImpRoot : XclRoot {}; \n class XclImpColRowSettings : XclImpRoot {};\n void lcl_ExportExcelBiff() {\n-XclRootData aExpData();\n+extern XclRootData aExpData();\n }"}, {"sha": "e67011d2fe7962eac9b1df25ec7a4da12d00c4ff", "filename": "gcc/testsuite/g++.dg/parse/pr58898.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr58898.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr58898.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr58898.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -5,12 +5,12 @@ struct Foo\n {\n   Foo()\n   {\n-    int t(int()); // Error\n+    int t(int()); // { dg-warning \"parentheses were disambiguated\" }\n   }\n };\n \n int main()\n {\n-  int t(int()); // OK\n+  int t(int()); // { dg-warning \"parentheses were disambiguated\" }\n   Foo<> a; // Error\n }"}, {"sha": "b20d897b49f5d5b3fa325ed9c9f1f87538d53e77", "filename": "gcc/testsuite/g++.dg/template/scope5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope5.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -59,7 +59,7 @@ template <typename av> struct ac : ao<av> { typedef c::e<am::an> aq; };\n template <typename aw, typename i, typename ax> void ay(aw, i, ax) {\n   // Not sure if this has been creduced from an initialization of a\n   // variable to a block-scope extern function decl\n-  au<c::e<ap<typename ak<i>::o>::f> > az2();\n+  au<c::e<ap<typename ak<i>::o>::f> > az2(); // { dg-warning \"empty parentheses\" }\n }\n void v() {\n   ad a;"}, {"sha": "b02e904fa83e508e8a71c91c9a475fcd66a1e4cd", "filename": "gcc/testsuite/g++.dg/warn/Wvexing-parse.C", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -0,0 +1,110 @@\n+// PR c++/25814\n+// { dg-do compile }\n+// Test -Wvexing-parse.\n+\n+struct T { };\n+\n+struct X {\n+  X();\n+};\n+\n+struct S {\n+  S(int);\n+  S foo (int (int));\n+  S(T);\n+  int m;\n+};\n+\n+struct W {\n+  W();\n+  W(X, X);\n+  int m;\n+};\n+\n+int g;\n+int g1(int(g));\n+int g2(int());\n+void fg(int);\n+\n+void\n+fn1 (double (a))\n+{\n+  extern int f0();\n+  extern int f1(int(a));\n+  int f2(int(a)); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  int (*f3)(int(a));\n+  int f4(int a);\n+  int f5(int()); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  int f6(...);\n+  int f7((int(a)));\n+  int (f8);\n+  int f9(S(s)); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  int(f10) __attribute__(());\n+  int(f11(int()));\n+  if (int(a) = 1) { }\n+  int j, k, l(); // { dg-warning \"empty parentheses were disambiguated as a function declaration\" }\n+  int m, f12(int(j)); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+\n+  T t1(); // { dg-warning \"empty parentheses were disambiguated as a function declaration\" }\n+  T t2(T()); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  /* Declares a variable t3.  */\n+  T(t3);\n+  T t4(), // { dg-warning \"empty parentheses were disambiguated as a function declaration\" }\n+    t5(); // { dg-warning \"empty parentheses were disambiguated as a function declaration\" }\n+\n+  extern S s1(int(a));\n+  S s2(int(a)); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  S s3(int a);\n+  S s4(int()); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  S s5(int(int)); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  S s6(...);\n+  S s7((int(a)));\n+  S s8((int)a);\n+  S s9 = int(a);\n+  S(T());\n+  S s10(S()); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  S s11(T());\n+  S s12(X()); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  S s13 = S(T());\n+  S(T()).foo(0);\n+  S (S::*foo)(int (int));\n+  S(*s14)(int(a));\n+  S s15(); // { dg-warning \"empty parentheses were disambiguated as a function declaration\" }\n+  S s16(void);\n+\n+  /* Don't warn here.  */\n+  void fv1(int(a));\n+  void fv2(int());\n+  void (fv3)();\n+  void (fv4)(void);\n+  void (fv5)(int);\n+\n+  int n(); // { dg-warning \"empty parentheses were disambiguated as a function declaration\" }\n+  int (n2)(); // { dg-warning \"empty parentheses were disambiguated as a function declaration\" }\n+  int n3(void);\n+\n+  typedef int F(const char*);\n+  typedef int F2();\n+  typedef int F3() const;\n+  typedef int F4(int(a)) const;\n+\n+  W w(X(), X()); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+}\n+\n+struct C1 {\n+  C1(int);\n+};\n+\n+struct C2 {\n+  C2(C1, int);\n+};\n+\n+template<int N> int value() { return N; }\n+\n+void\n+fn2 ()\n+{\n+  int i = 0;\n+  C2 c2(C1(int(i)), i);\n+  C1(value<0>());\n+}"}, {"sha": "0dbeb7255cc458f477c6f31e72e470d9bcb40011", "filename": "gcc/testsuite/g++.dg/warn/Wvexing-parse2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse2.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/25814\n+// { dg-do compile { target c++11 } }\n+// Test -Wvexing-parse.  C++11 features.\n+\n+struct X { };\n+struct T {\n+  T(X);\n+};\n+\n+void\n+fn1 (double (a))\n+{\n+  auto l = [](){\n+    int f(int(a)); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  };\n+\n+  [[noreturn]] int(e)(); // { dg-warning \"empty parentheses were disambiguated as a function declaration\" }\n+\n+  T t1{X()};\n+  T t2(X{});\n+  T t3{X{}};\n+\n+  using U = int();\n+}"}, {"sha": "43fcdf29f61da4a8fd609d10679b0f3e7a3e0fc0", "filename": "gcc/testsuite/g++.dg/warn/Wvexing-parse3.C", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse3.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -0,0 +1,129 @@\n+// PR c++/25814\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-fdiagnostics-show-caret\" }\n+// Test -Wvexing-parse's fix-it hints in C++11.\n+\n+#include <initializer_list>\n+\n+struct X { };\n+\n+struct S {\n+  S(X);\n+  S(std::initializer_list<X>);\n+  int m;\n+};\n+\n+struct T {\n+  T(X);\n+  int m;\n+};\n+\n+struct W {\n+  W();\n+  W(std::initializer_list<X>);\n+  int m;\n+};\n+\n+struct U {\n+  U();\n+  int m;\n+};\n+\n+int\n+main ()\n+{\n+  /*\n+     Careful what we're suggesting:\n+     S a((X())) -> S(X)\n+     S a({X()}) -> (std::initializer_list<X>)\n+     S a{X()} -> (std::initializer_list<X>)\n+   */\n+  S a(X()); // { dg-warning \"6:parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   S a(X());\n+      ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"6:add parentheses to declare a variable\" \"\" { target *-*-* } 41 }\n+  /* { dg-begin-multiline-output \"\" }\n+   S a(X());\n+      ^~~~~\n+       (  )\n+     { dg-end-multiline-output \"\" } */\n+\n+  T t(X()); // { dg-warning \"6:parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   T t(X());\n+      ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"6:replace parentheses with braces to declare a variable\" \"\" { target *-*-* } 53 }\n+  /* { dg-begin-multiline-output \"\" }\n+   T t(X());\n+      ^~~~~\n+      -\n+      {   -\n+          }\n+     { dg-end-multiline-output \"\" } */\n+\n+  int n(   ); // { dg-warning \"8:empty parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   int n(   );\n+        ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"8:remove parentheses to default-initialize a variable\" \"\" { target *-*-* } 67 }\n+  /* { dg-begin-multiline-output \"\" }\n+   int n(   );\n+        ^~~~~\n+        -----\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"8:or replace parentheses with braces to value-initialize a variable\" \"\" { target *-*-* } 67 }\n+\n+  S s(); // { dg-warning \"6:empty parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   S s();\n+      ^~\n+     { dg-end-multiline-output \"\" } */\n+\n+  X x(); // { dg-warning \"6:empty parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   X x();\n+      ^~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"6:remove parentheses to default-initialize a variable\" \"\" { target *-*-* } 86 }\n+  /* { dg-begin-multiline-output \"\" }\n+   X x();\n+      ^~\n+      --\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"6:or replace parentheses with braces to aggregate-initialize a variable\" \"\" { target *-*-* } 86 }\n+\n+  W w(); // { dg-warning \"6:empty parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   W w();\n+      ^~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"6:remove parentheses to default-initialize a variable\" \"\" { target *-*-* } 99 }\n+  /* { dg-begin-multiline-output \"\" }\n+   W w();\n+      ^~\n+      --\n+     { dg-end-multiline-output \"\" } */\n+\n+  T t2(); // { dg-warning \"7:empty parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   T t2();\n+       ^~\n+     { dg-end-multiline-output \"\" } */\n+\n+  U u(); // { dg-warning \"6:empty parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   U u();\n+      ^~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"6:remove parentheses to default-initialize a variable\" \"\" { target *-*-* } 117 }\n+  /* { dg-begin-multiline-output \"\" }\n+   U u();\n+      ^~\n+      --\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"6:or replace parentheses with braces to value-initialize a variable\" \"\" { target *-*-* } 117 }\n+}"}, {"sha": "3e010aaba3dd453ae827ff9173c50740fbcf00fe", "filename": "gcc/testsuite/g++.dg/warn/Wvexing-parse4.C", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse4.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -0,0 +1,74 @@\n+// PR c++/25814\n+// { dg-do compile { target c++98_only } }\n+// { dg-additional-options \"-fdiagnostics-show-caret\" }\n+// Test -Wvexing-parse's fix-it hints in C++98.\n+\n+struct X { };\n+\n+struct T {\n+  T(X);\n+  int m;\n+};\n+\n+struct U {\n+  U();\n+  int m;\n+};\n+\n+int\n+main ()\n+{\n+  T t(X()); // { dg-warning \"6:parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   T t(X());\n+      ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"6:add parentheses to declare a variable\" \"\" { target *-*-* } 21 }\n+  /* { dg-begin-multiline-output \"\" }\n+   T t(X());\n+      ^~~~~\n+       (  )\n+     { dg-end-multiline-output \"\" } */\n+\n+  int n(   ); // { dg-warning \"8:empty parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   int n(   );\n+        ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"8:remove parentheses to default-initialize a variable\" \"\" { target *-*-* } 33 }\n+  /* { dg-begin-multiline-output \"\" }\n+   int n(   );\n+        ^~~~~\n+        -----\n+     { dg-end-multiline-output \"\" } */\n+\n+  T y(); // { dg-warning \"6:empty parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   T y();\n+      ^~\n+     { dg-end-multiline-output \"\" } */\n+\n+  X x(); // { dg-warning \"6:empty parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   X x();\n+      ^~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"6:remove parentheses to default-initialize a variable\" \"\" { target *-*-* } 51 }\n+  /* { dg-begin-multiline-output \"\" }\n+   X x();\n+      ^~\n+      --\n+     { dg-end-multiline-output \"\" } */\n+\n+  U u(); // { dg-warning \"6:empty parentheses were disambiguated as a function declaration\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   U u();\n+      ^~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"6:remove parentheses to default-initialize a variable\" \"\" { target *-*-* } 63 }\n+  /* { dg-begin-multiline-output \"\" }\n+   U u();\n+      ^~\n+      --\n+     { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "3422e706160b62fb8b4c848eaa850c610e4a5e71", "filename": "gcc/testsuite/g++.dg/warn/Wvexing-parse5.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse5.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/25814\n+// { dg-do compile }\n+// Test -Wvexing-parse in a template.\n+\n+struct X { };\n+\n+template<typename T>\n+void fn ()\n+{\n+  T t(); // { dg-warning \"empty parentheses were disambiguated as a function declaration\" }\n+  T a(X()); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  X x(T()); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  int i(T()); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+}"}, {"sha": "58fa725a2ee3b31190b98aa15a75b5b51d38cc88", "filename": "gcc/testsuite/g++.dg/warn/Wvexing-parse6.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse6.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/25814\n+// { dg-do compile }\n+// Test from Wikipedia.\n+\n+class Timer {\n+ public:\n+  Timer();\n+};\n+\n+class TimeKeeper {\n+ public:\n+  TimeKeeper(const Timer& t);\n+\n+  int get_time();\n+};\n+\n+void f(double adouble) {\n+  int i(int(adouble)); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+}\n+\n+int main() {\n+  TimeKeeper time_keeper(Timer()); // { dg-warning \"parentheses were disambiguated as a function declaration\" }\n+  return time_keeper.get_time(); // { dg-error \"request for member\" }\n+}"}, {"sha": "9f4c7021cdc2d938b9089345624ba8a8b1ba1ca9", "filename": "gcc/testsuite/g++.dg/warn/Wvexing-parse7.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse7.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/25814\n+// { dg-do compile }\n+\n+struct X { };\n+struct W {\n+  W(X, X);\n+};\n+\n+void\n+fn ()\n+{\n+  W w1(X(), X()); // { dg-warning \"parentheses\" }\n+  W w2(X(a), X()); // { dg-warning \"parentheses\" }\n+  W w3(X(), X(a)); // { dg-warning \"parentheses\" }\n+  W w4(X(a), X(b)); // { dg-warning \"parentheses\" }\n+  W w5(X, X);\n+  W w6(X(a), X);\n+  W w7(X, X(a));\n+  W w8(X(a), X()); // { dg-warning \"parentheses\" }\n+  W w9(X, X());\n+  W w10(X, X());\n+\n+  // Not function declarations.\n+  W z1(X(), (X()));\n+  W z2((X()), X());\n+  W z3((X()), (X()));\n+}"}, {"sha": "0af1c147cd86f648724d08bf087aa77b1bd16e1e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/recurse.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Frecurse.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Frecurse.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Frecurse.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -73,7 +73,7 @@ public:\n \n int main()\n {\n-  DBpathrec a(), b();\n+  DBpathrec a(), b(); // { dg-warning \"empty parentheses\" }\n \n   a = b;// { dg-error \"\" }  non-lvalue in assignment.*\n }"}, {"sha": "1cf5a61441177a71149c462e3c26e0be0149043c", "filename": "gcc/testsuite/g++.old-deja/g++.jason/template4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate4.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -17,5 +17,5 @@ template <class T>\n ccList <T> cc_List<T>::copy (){}\n \n int main (int, char **) {\n-  ccList <int> size1();\n+  ccList <int> size1(); // { dg-warning \"empty parentheses\" }\n }"}, {"sha": "59492ca952c6b419836be64f029c79ffa6755330", "filename": "gcc/testsuite/g++.old-deja/g++.law/arm4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farm4.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -20,7 +20,7 @@ int main(void)\n {\n   double a = 2.0;\n \n-  S x(int (a));\n+  S x(int (a)); // { dg-warning \"parentheses were disambiguated\" }\n   if (count > 0)\n     { printf (\"FAIL\\n\"); return 1; }\n   else"}, {"sha": "4a7c30425440485047aef1b88c9a82162a859b93", "filename": "gcc/testsuite/g++.old-deja/g++.mike/for2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Ffor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Ffor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Ffor2.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -14,7 +14,7 @@ void bar() {\n \n void bee () {\n   int i = 0;\n-  for (int fun() = 0; i != 2; ++i) {\t// { dg-warning \"extern\" \"extern\" }\n+  for (int fun() = 0; i != 2; ++i) {\t// { dg-warning \"extern|empty parentheses\" \"extern\" }\n   // { dg-error \"initialized\" \"init\" { target *-*-* } .-1 }\n   }\n }"}, {"sha": "492ce2b7e7079a756e53114f233b8be18e510f21", "filename": "gcc/testsuite/g++.old-deja/g++.other/local4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flocal4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flocal4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flocal4.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -6,6 +6,6 @@ int f (int);\n \n int main ()\n {\n-  int f ();\n+  int f (); // { dg-warning \"empty parentheses\" }\n   return f ();\n }"}, {"sha": "d1d9b12738c45cb332b69d1551fd760a888a41c6", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash3.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash3.C?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -7,11 +7,13 @@ public:\n     {\n       // local-extern :)\n       CVector<int> v(); // { dg-message \"old declaration\" }\n+      // { dg-warning \"empty parentheses\" \"\" { target *-*-* } .-1 }\n        return v;\t\t// { dg-error \"convert\" }\n     }\n     CVector<long> g() const\n     {\n       CVector<long> v(); // { dg-error \"ambiguating new\" }\n+      // { dg-warning \"empty parentheses\" \"\" { target *-*-* } .-1 }\n        return v;\t\t// { dg-error \"convert\" }\n     }\n };"}, {"sha": "c30511cab115f8f30deeab3c09e5a982e566ad8f", "filename": "libstdc++-v3/testsuite/20_util/reference_wrapper/lwg2993.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Flwg2993.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Flwg2993.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Flwg2993.cc?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -43,7 +43,7 @@ test01()\n void\n test02()\n {\n-  std::reference_wrapper<int> purr();\n+  std::reference_wrapper<int> purr(); // { dg-warning \"empty parentheses\" }\n \n   // error, ambiguous: ICS exists from int prvalue to\n   // reference_wrapper<int> and from reference_wrapper<int> to int"}, {"sha": "73934638ee3cc8ba165daca3d74e4339b6ea9aa0", "filename": "libstdc++-v3/testsuite/25_algorithms/generate_n/87982_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2003105b35f8fe8e074c055a718c8f484d9d32/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F87982_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2003105b35f8fe8e074c055a718c8f484d9d32/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F87982_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F87982_neg.cc?ref=5b2003105b35f8fe8e074c055a718c8f484d9d32", "patch": "@@ -23,7 +23,7 @@\n \n void test01()\n {\n-  int gen();\n+  int gen(); // { dg-warning \"empty parentheses\" }\n   int a[2];\n   std::generate_n(a, a+2, &gen);\n }"}]}