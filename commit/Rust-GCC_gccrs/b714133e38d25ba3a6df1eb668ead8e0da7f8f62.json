{"sha": "b714133e38d25ba3a6df1eb668ead8e0da7f8f62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcxNDEzM2UzOGQyNWJhM2E2ZGYxZWI2NjhlYWQ4ZTBkYTdmOGY2Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-08-10T04:12:45Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2009-08-10T04:12:45Z"}, "message": "alpha.c (alpha_links): Add 'target' field.\n\n\n\t* config/alpha/alpha.c (alpha_links): Add 'target' field.\n\t(alpha_need_linkage): Handle aliases.  Return function symbol.\n\t(alpha_use_linkage): Rename 'linkage' argument to 'func'.\n\tUse ultimate alias target for the linkage name.\n\t* config/alpha/alpha.md (movmemdi): Use the symbol returned\n\tby alpha_need_linkage for the function symbol.\n\t(setmemdi): Likewise.\n\n\nCo-Authored-By: Douglas B Rupp <rupp@gnat.com>\n\nFrom-SVN: r150611", "tree": {"sha": "aa7b0a3cb44ccd4403826727d6d53e9257066ee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa7b0a3cb44ccd4403826727d6d53e9257066ee0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b714133e38d25ba3a6df1eb668ead8e0da7f8f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b714133e38d25ba3a6df1eb668ead8e0da7f8f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b714133e38d25ba3a6df1eb668ead8e0da7f8f62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b714133e38d25ba3a6df1eb668ead8e0da7f8f62/comments", "author": null, "committer": null, "parents": [{"sha": "3bd1b1096b6826ef953ed3634fceb8c0344f347a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd1b1096b6826ef953ed3634fceb8c0344f347a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd1b1096b6826ef953ed3634fceb8c0344f347a"}], "stats": {"total": 74, "additions": 44, "deletions": 30}, "files": [{"sha": "7028cbdf81c8ab41fd92c294f1813c8fba10d147", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b714133e38d25ba3a6df1eb668ead8e0da7f8f62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b714133e38d25ba3a6df1eb668ead8e0da7f8f62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b714133e38d25ba3a6df1eb668ead8e0da7f8f62", "patch": "@@ -1,3 +1,14 @@\n+2009-08-09  Eric Botcazou  <botcazou@adacore.com>\n+            Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/alpha.c (alpha_links): Add 'target' field.\n+\t(alpha_need_linkage): Handle aliases.  Return function symbol.\n+\t(alpha_use_linkage): Rename 'linkage' argument to 'func'.\n+\tUse ultimate alias target for the linkage name.\n+\t* config/alpha/alpha.md (movmemdi): Use the symbol returned\n+\tby alpha_need_linkage for the function symbol.\n+\t(setmemdi): Likewise.\n+\n 2009-08-09  Douglas B Rupp  <rupp@gnat.com>\n \n \t* config/alpha/alpha.c (TARGET_ASM_UNALIGNED_*_OP): Define if on VMS."}, {"sha": "42cb7a97edfd861f02f5db1a72b39ce6c617efa0", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b714133e38d25ba3a6df1eb668ead8e0da7f8f62/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b714133e38d25ba3a6df1eb668ead8e0da7f8f62/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b714133e38d25ba3a6df1eb668ead8e0da7f8f62", "patch": "@@ -9583,6 +9583,7 @@ enum reloc_kind {KIND_LINKAGE, KIND_CODEADDR};\n struct GTY(()) alpha_links\n {\n   int num;\n+  const char *target;\n   rtx linkage;\n   enum links_kind lkind;\n   enum reloc_kind rkind;\n@@ -9635,17 +9636,17 @@ alpha_arg_info_reg_val (CUMULATIVE_ARGS cum)\n   return GEN_INT (regval);\n }\n \f\n-/* Make (or fake) .linkage entry for function call.\n-\n-   IS_LOCAL is 0 if name is used in call, 1 if name is used in definition.\n-\n-   Return an SYMBOL_REF rtx for the linkage.  */\n+/* Register the need for a (fake) .linkage entry for calls to function NAME.\n+   IS_LOCAL is 1 if this is for a definition, 0 if this is for a real call.\n+   Return a SYMBOL_REF suited to the call instruction.  */\n \n rtx\n alpha_need_linkage (const char *name, int is_local)\n {\n   splay_tree_node node;\n   struct alpha_links *al;\n+  const char *target;\n+  tree id;\n \n   if (name[0] == '*')\n     name++;\n@@ -9700,33 +9701,38 @@ alpha_need_linkage (const char *name, int is_local)\n   /* Assume external if no definition.  */\n   al->lkind = (is_local ? KIND_UNUSED : KIND_EXTERN);\n \n-  /* Ensure we have an IDENTIFIER so assemble_name can mark it used.  */\n-  get_identifier (name);\n+  /* Ensure we have an IDENTIFIER so assemble_name can mark it used\n+     and find the ultimate alias target like assemble_name.  */\n+  id = get_identifier (name);\n+  target = NULL;\n+  while (IDENTIFIER_TRANSPARENT_ALIAS (id))\n+    {\n+      id = TREE_CHAIN (id);\n+      target = IDENTIFIER_POINTER (id);\n+    }\n \n-  /* Construct a SYMBOL_REF for us to call.  */\n-  {\n-    size_t name_len = strlen (name);\n-    char *linksym = XALLOCAVEC (char, name_len + 6);\n-    linksym[0] = '$';\n-    memcpy (linksym + 1, name, name_len);\n-    memcpy (linksym + 1 + name_len, \"..lk\", 5);\n-    al->linkage = gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t      ggc_alloc_string (linksym, name_len + 5));\n-  }\n+  al->target = target ? target : name;\n+  al->linkage = gen_rtx_SYMBOL_REF (Pmode, name);\n \n   splay_tree_insert (alpha_links_tree, (splay_tree_key) name,\n \t\t     (splay_tree_value) al);\n \n   return al->linkage;\n }\n \n+/* Return a SYMBOL_REF representing the reference to the .linkage entry\n+   of function FUNC built for calls made from CFUNDECL.  LFLAG is 1 if\n+   this is the reference to the linkage pointer value, 0 if this is the\n+   reference to the function entry value.  RFLAG is 1 if this a reduced\n+   reference (code address only), 0 if this is a full reference.  */\n+\n rtx\n-alpha_use_linkage (rtx linkage, tree cfundecl, int lflag, int rflag)\n+alpha_use_linkage (rtx func, tree cfundecl, int lflag, int rflag)\n {\n   splay_tree_node cfunnode;\n   struct alpha_funcs *cfaf;\n   struct alpha_links *al;\n-  const char *name = XSTR (linkage, 0);\n+  const char *name = XSTR (func, 0);\n \n   cfaf = (struct alpha_funcs *) 0;\n   al = (struct alpha_links *) 0;\n@@ -9751,7 +9757,6 @@ alpha_use_linkage (rtx linkage, tree cfundecl, int lflag, int rflag)\n     {\n       size_t name_len;\n       size_t buflen;\n-      char buf [512];\n       char *linksym;\n       splay_tree_node node = 0;\n       struct alpha_links *anl;\n@@ -9760,6 +9765,7 @@ alpha_use_linkage (rtx linkage, tree cfundecl, int lflag, int rflag)\n \tname++;\n \n       name_len = strlen (name);\n+      linksym = (char *) alloca (name_len + 50);\n \n       al = (struct alpha_links *) ggc_alloc (sizeof (struct alpha_links));\n       al->num = cfaf->num;\n@@ -9769,12 +9775,11 @@ alpha_use_linkage (rtx linkage, tree cfundecl, int lflag, int rflag)\n \t{\n \t  anl = (struct alpha_links *) node->value;\n \t  al->lkind = anl->lkind;\n+\t  name = anl->target;\n \t}\n \n-      sprintf (buf, \"$%d..%s..lk\", cfaf->num, name);\n-      buflen = strlen (buf);\n-      linksym = XALLOCAVEC (char, buflen + 1);\n-      memcpy (linksym, buf, buflen + 1);\n+      sprintf (linksym, \"$%d..%s..lk\", cfaf->num, name);\n+      buflen = strlen (linksym);\n \n       al->linkage = gen_rtx_SYMBOL_REF\n \t(Pmode, ggc_alloc_string (linksym, buflen + 1));\n@@ -9944,7 +9949,7 @@ alpha_need_linkage (const char *name ATTRIBUTE_UNUSED,\n }\n \n rtx\n-alpha_use_linkage (rtx linkage ATTRIBUTE_UNUSED,\n+alpha_use_linkage (rtx func ATTRIBUTE_UNUSED,\n \t\t   tree cfundecl ATTRIBUTE_UNUSED,\n \t\t   int lflag ATTRIBUTE_UNUSED,\n \t\t   int rflag ATTRIBUTE_UNUSED)"}, {"sha": "fe475c23edcb97577e9c1505a48204ad02f71950", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b714133e38d25ba3a6df1eb668ead8e0da7f8f62/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b714133e38d25ba3a6df1eb668ead8e0da7f8f62/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=b714133e38d25ba3a6df1eb668ead8e0da7f8f62", "patch": "@@ -1,6 +1,6 @@\n ;; Machine description for DEC Alpha for GNU C compiler\n ;; Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-;; 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+;; 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n ;; Free Software Foundation, Inc.\n ;; Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n ;;\n@@ -6460,8 +6460,7 @@\n \t      (clobber (reg:DI 27))])]\n   \"TARGET_ABI_OPEN_VMS\"\n {\n-  operands[4] = gen_rtx_SYMBOL_REF (Pmode, \"OTS$MOVE\");\n-  alpha_need_linkage (XSTR (operands[4], 0), 0);\n+  operands[4] = alpha_need_linkage (\"OTS$MOVE\", 0);\n })\n \n (define_insn \"*movmemdi_1\"\n@@ -6528,8 +6527,7 @@\n   if (operands[2] != const0_rtx)\n     FAIL;\n \n-  operands[4] = gen_rtx_SYMBOL_REF (Pmode, \"OTS$ZERO\");\n-  alpha_need_linkage (XSTR (operands[4], 0), 0);\n+  operands[4] = alpha_need_linkage (\"OTS$ZERO\", 0);\n })\n \n (define_insn \"*clrmemdi_1\""}]}