{"sha": "072c558a0f181bec139d68b451e7aa4907dbc5ef", "node_id": "C_kwDOANBUbNoAKDA3MmM1NThhMGYxODFiZWMxMzlkNjhiNDUxZTdhYTQ5MDdkYmM1ZWY", "commit": {"author": {"name": "Liao Shihua", "email": "shihua@iscas.ac.cn", "date": "2023-02-20T07:01:23Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-05T17:05:00Z"}, "message": "RISC-V: Implement ZKND and ZKNE extensions\n\nThis patch supports Zkne and Zknd extension.\nIt includes instruction's machine description and built-in funtions.\n\ngcc/ChangeLog:\n\n\t* config/riscv/constraints.md (D03): Add constants of bs and rnum.\n\t(DsA): New.\n\t* config/riscv/crypto.md (riscv_aes32dsi): Add ZKND's and ZKNE's instructions.\n\t(riscv_aes32dsmi): New.\n\t(riscv_aes64ds): New.\n\t(riscv_aes64dsm): New.\n\t(riscv_aes64im): New.\n\t(riscv_aes64ks1i): New.\n\t(riscv_aes64ks2): New.\n\t(riscv_aes32esi): New.\n\t(riscv_aes32esmi): New.\n\t(riscv_aes64es): New.\n\t(riscv_aes64esm): New.\n\t* config/riscv/riscv-builtins.cc (AVAIL): Add ZKND's and ZKNE's AVAIL.\n\t* config/riscv/riscv-scalar-crypto.def (DIRECT_BUILTIN): Add ZKND's and\n\tZKNE's built-in functions.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zknd32.c: New test.\n\t* gcc.target/riscv/zknd64.c: New test.\n\t* gcc.target/riscv/zkne32.c: New test.\n\t* gcc.target/riscv/zkne64.c: New test.\n\nCo-Authored-By: SiYu Wu <siyu@isrc.iscas.ac.cn>", "tree": {"sha": "e39baa37aa3f6eb95c6b7e4ba9abf1ddb9a07d2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e39baa37aa3f6eb95c6b7e4ba9abf1ddb9a07d2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/072c558a0f181bec139d68b451e7aa4907dbc5ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072c558a0f181bec139d68b451e7aa4907dbc5ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/072c558a0f181bec139d68b451e7aa4907dbc5ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072c558a0f181bec139d68b451e7aa4907dbc5ef/comments", "author": {"login": "Liaoshihua", "id": 43035022, "node_id": "MDQ6VXNlcjQzMDM1MDIy", "avatar_url": "https://avatars.githubusercontent.com/u/43035022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Liaoshihua", "html_url": "https://github.com/Liaoshihua", "followers_url": "https://api.github.com/users/Liaoshihua/followers", "following_url": "https://api.github.com/users/Liaoshihua/following{/other_user}", "gists_url": "https://api.github.com/users/Liaoshihua/gists{/gist_id}", "starred_url": "https://api.github.com/users/Liaoshihua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Liaoshihua/subscriptions", "organizations_url": "https://api.github.com/users/Liaoshihua/orgs", "repos_url": "https://api.github.com/users/Liaoshihua/repos", "events_url": "https://api.github.com/users/Liaoshihua/events{/privacy}", "received_events_url": "https://api.github.com/users/Liaoshihua/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df"}], "stats": {"total": 251, "additions": 251, "deletions": 0}, "files": [{"sha": "fdfcf2380f80ae04463cac9483bd484b575cd242", "filename": "gcc/config/riscv/constraints.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Fconfig%2Friscv%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Fconfig%2Friscv%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fconstraints.md?ref=072c558a0f181bec139d68b451e7aa4907dbc5ef", "patch": "@@ -83,6 +83,14 @@\n   (and (match_code \"const_int\")\n        (match_test \"SINGLE_BIT_MASK_OPERAND (~ival)\")))\n \n+(define_constraint \"D03\"\n+  \"0, 1, 2 or 3 immediate\"\n+  (match_test \"IN_RANGE (ival, 0, 3)\"))\n+\n+(define_constraint \"DsA\"\n+  \"0 - 10 immediate\"\n+  (match_test \"IN_RANGE (ival, 0, 10)\"))\n+\n ;; Floating-point constant +0.0, used for FCVT-based moves when FMV is\n ;; not available in RV32.\n (define_constraint \"G\""}, {"sha": "7568466ec979de5e1e96aedd95d8aa2087ec0f05", "filename": "gcc/config/riscv/crypto.md", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Fconfig%2Friscv%2Fcrypto.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Fconfig%2Friscv%2Fcrypto.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fcrypto.md?ref=072c558a0f181bec139d68b451e7aa4907dbc5ef", "patch": "@@ -33,6 +33,21 @@\n     ;; Zbkx unspecs\n     UNSPEC_XPERM8\n     UNSPEC_XPERM4\n+\n+    ;; Zknd unspecs\n+    UNSPEC_AES_DSI\n+    UNSPEC_AES_DSMI\n+    UNSPEC_AES_DS\n+    UNSPEC_AES_DSM\n+    UNSPEC_AES_IM\n+    UNSPEC_AES_KS1I\n+    UNSPEC_AES_KS2\n+\n+    ;; Zkne unspecs\n+    UNSPEC_AES_ES\n+    UNSPEC_AES_ESM\n+    UNSPEC_AES_ESI\n+    UNSPEC_AES_ESMI\n ])\n \n ;; ZBKB extension\n@@ -126,3 +141,109 @@\n   \"TARGET_ZBKX\"\n   \"xperm8\\t%0,%1,%2\"\n   [(set_attr \"type\" \"crypto\")])\n+\n+;; ZKND extension\n+\n+(define_insn \"riscv_aes32dsi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+                   (match_operand:SI 2 \"register_operand\" \"r\")\n+                   (match_operand:SI 3 \"register_operand\" \"D03\")]\n+                   UNSPEC_AES_DSI))]\n+  \"TARGET_ZKND && !TARGET_64BIT\"\n+  \"aes32dsi\\t%0,%1,%2,%3\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_aes32dsmi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+                   (match_operand:SI 2 \"register_operand\" \"r\")\n+                   (match_operand:SI 3 \"register_operand\" \"D03\")]\n+                   UNSPEC_AES_DSMI))]\n+  \"TARGET_ZKND && !TARGET_64BIT\"\n+  \"aes32dsmi\\t%0,%1,%2,%3\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_aes64ds\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n+                   (match_operand:DI 2 \"register_operand\" \"r\")]\n+                   UNSPEC_AES_DS))]\n+  \"TARGET_ZKND && TARGET_64BIT\"\n+  \"aes64ds\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_aes64dsm\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n+                   (match_operand:DI 2 \"register_operand\" \"r\")]\n+                   UNSPEC_AES_DSM))]\n+  \"TARGET_ZKND && TARGET_64BIT\"\n+  \"aes64dsm\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_aes64im\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")]\n+                   UNSPEC_AES_IM))]\n+  \"TARGET_ZKND && TARGET_64BIT\"\n+  \"aes64im\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_aes64ks1i\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n+                   (match_operand:SI 2 \"register_operand\" \"DsA\")]\n+                   UNSPEC_AES_KS1I))]\n+  \"(TARGET_ZKND || TARGET_ZKNE) && TARGET_64BIT\"\n+  \"aes64ks1i\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_aes64ks2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n+                   (match_operand:DI 2 \"register_operand\" \"r\")]\n+                   UNSPEC_AES_KS2))]\n+  \"(TARGET_ZKND || TARGET_ZKNE) && TARGET_64BIT\"\n+  \"aes64ks2\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+;; ZKNE extension\n+\n+(define_insn \"riscv_aes32esi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+                   (match_operand:SI 2 \"register_operand\" \"r\")\n+                   (match_operand:SI 3 \"register_operand\" \"D03\")]\n+                   UNSPEC_AES_ESI))]\n+  \"TARGET_ZKNE && !TARGET_64BIT\"\n+  \"aes32esi\\t%0,%1,%2,%3\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_aes32esmi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+                   (match_operand:SI 2 \"register_operand\" \"r\")\n+                   (match_operand:SI 3 \"register_operand\" \"D03\")]\n+                   UNSPEC_AES_ESMI))]\n+  \"TARGET_ZKNE && !TARGET_64BIT\"\n+  \"aes32esmi\\t%0,%1,%2,%3\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_aes64es\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n+                   (match_operand:DI 2 \"register_operand\" \"r\")]\n+                   UNSPEC_AES_ES))]\n+  \"TARGET_ZKNE && TARGET_64BIT\"\n+  \"aes64es\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_aes64esm\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n+                   (match_operand:DI 2 \"register_operand\" \"r\")]\n+                   UNSPEC_AES_ESM))]\n+  \"TARGET_ZKNE && TARGET_64BIT\"\n+  \"aes64esm\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])"}, {"sha": "6632009734b06782a5ba83423c48bf49feed034d", "filename": "gcc/config/riscv/riscv-builtins.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc?ref=072c558a0f181bec139d68b451e7aa4907dbc5ef", "patch": "@@ -106,6 +106,11 @@ AVAIL (crypto_zbkc32, TARGET_ZBKC && !TARGET_64BIT)\n AVAIL (crypto_zbkc64, TARGET_ZBKC && TARGET_64BIT)\n AVAIL (crypto_zbkx32, TARGET_ZBKX && !TARGET_64BIT)\n AVAIL (crypto_zbkx64, TARGET_ZBKX && TARGET_64BIT)\n+AVAIL (crypto_zknd32, TARGET_ZKND && !TARGET_64BIT)\n+AVAIL (crypto_zknd64, TARGET_ZKND && TARGET_64BIT)\n+AVAIL (crypto_zkne32, TARGET_ZKNE && !TARGET_64BIT)\n+AVAIL (crypto_zkne64, TARGET_ZKNE && TARGET_64BIT)\n+AVAIL (crypto_zkne_or_zknd, (TARGET_ZKNE || TARGET_ZKND) && TARGET_64BIT)\n AVAIL (always,     (!0))\n \n /* Construct a riscv_builtin_description from the given arguments."}, {"sha": "fe1a4e13d2d734f344626f273717947b026a03f3", "filename": "gcc/config/riscv/riscv-scalar-crypto.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Fconfig%2Friscv%2Friscv-scalar-crypto.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Fconfig%2Friscv%2Friscv-scalar-crypto.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-scalar-crypto.def?ref=072c558a0f181bec139d68b451e7aa4907dbc5ef", "patch": "@@ -43,3 +43,18 @@ RISCV_BUILTIN (xperm4_si, \"xperm4\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI_SI,\n RISCV_BUILTIN (xperm4_di, \"xperm4\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_DI_DI, crypto_zbkx64),\n RISCV_BUILTIN (xperm8_si, \"xperm8\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI_SI, crypto_zbkx32),\n RISCV_BUILTIN (xperm8_di, \"xperm8\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_DI_DI, crypto_zbkx64),\n+\n+// ZKND\n+DIRECT_BUILTIN (aes32dsi, RISCV_SI_FTYPE_SI_SI_SI, crypto_zknd32),\n+DIRECT_BUILTIN (aes32dsmi, RISCV_SI_FTYPE_SI_SI_SI, crypto_zknd32),\n+DIRECT_BUILTIN (aes64ds, RISCV_DI_FTYPE_DI_DI, crypto_zknd64),\n+DIRECT_BUILTIN (aes64dsm, RISCV_DI_FTYPE_DI_DI, crypto_zknd64),\n+DIRECT_BUILTIN (aes64im, RISCV_DI_FTYPE_DI, crypto_zknd64),\n+DIRECT_BUILTIN (aes64ks1i, RISCV_DI_FTYPE_DI_SI, crypto_zkne_or_zknd),\n+DIRECT_BUILTIN (aes64ks2, RISCV_DI_FTYPE_DI_DI, crypto_zkne_or_zknd),\n+\n+// ZKNE\n+DIRECT_BUILTIN (aes32esi, RISCV_SI_FTYPE_SI_SI_SI, crypto_zkne32),\n+DIRECT_BUILTIN (aes32esmi, RISCV_SI_FTYPE_SI_SI_SI, crypto_zkne32),\n+DIRECT_BUILTIN (aes64es, RISCV_DI_FTYPE_DI_DI, crypto_zkne64),\n+DIRECT_BUILTIN (aes64esm, RISCV_DI_FTYPE_DI_DI, crypto_zkne64),"}, {"sha": "5fcc66da9015947bf5571ca01bd09c6e0888c6a3", "filename": "gcc/testsuite/gcc.target/riscv/zknd32.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknd32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknd32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknd32.c?ref=072c558a0f181bec139d68b451e7aa4907dbc5ef", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32gc_zknd -mabi=ilp32d\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+\n+#include <stdint-gcc.h>\n+\n+int32_t foo1(int32_t rs1, int32_t rs2, int bs)\n+{\n+    return __builtin_riscv_aes32dsi(rs1,rs2,bs);\n+}\n+\n+int32_t foo2(int32_t rs1, int32_t rs2, int bs)\n+{\n+    return __builtin_riscv_aes32dsmi(rs1,rs2,bs);\n+}\n+\n+/* { dg-final { scan-assembler-times \"aes32dsi\" 1 } } */\n+/* { dg-final { scan-assembler-times \"aes32dsmi\" 1 } } */"}, {"sha": "b1dff98f7e21e44ddbcf3fba7b1d6ea49af237f3", "filename": "gcc/testsuite/gcc.target/riscv/zknd64.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknd64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknd64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknd64.c?ref=072c558a0f181bec139d68b451e7aa4907dbc5ef", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64gc_zknd -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+\n+#include <stdint-gcc.h>\n+\n+int64_t foo1(int64_t rs1, int64_t rs2)\n+{\n+    return __builtin_riscv_aes64ds(rs1,rs2);\n+}\n+\n+int64_t foo2(int64_t rs1, int64_t rs2)\n+{\n+    return __builtin_riscv_aes64dsm(rs1,rs2);\n+}\n+\n+int64_t foo3(int64_t rs1, int rnum)\n+{\n+    return __builtin_riscv_aes64ks1i(rs1,rnum);\n+}\n+\n+int64_t foo4(int64_t rs1, int64_t rs2)\n+{\n+    return __builtin_riscv_aes64ks2(rs1,rs2);\n+}\n+\n+int64_t foo5(int64_t rs1)\n+{\n+    return __builtin_riscv_aes64im(rs1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"aes64ds\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"aes64dsm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"aes64ks1i\" 1 } } */\n+/* { dg-final { scan-assembler-times \"aes64ks2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"aes64im\" 1 } } */"}, {"sha": "c131c9a6bbb149a58be5bca07dcb955438f88647", "filename": "gcc/testsuite/gcc.target/riscv/zkne32.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzkne32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzkne32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzkne32.c?ref=072c558a0f181bec139d68b451e7aa4907dbc5ef", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32gc_zkne -mabi=ilp32d\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+\n+#include <stdint-gcc.h>\n+\n+int32_t foo1(int32_t rs1, int32_t rs2, int bs)\n+{\n+    return __builtin_riscv_aes32esi(rs1, rs2, bs);\n+}\n+\n+int32_t foo2(int32_t rs1, int32_t rs2, int bs)\n+{\n+    return __builtin_riscv_aes32esmi(rs1, rs2, bs);\n+}\n+\n+/* { dg-final { scan-assembler-times \"aes32esi\" 1 } } */\n+/* { dg-final { scan-assembler-times \"aes32esmi\" 1 } } */"}, {"sha": "7d82b5a5d411375110ffb21cceb7ff3859002a1b", "filename": "gcc/testsuite/gcc.target/riscv/zkne64.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzkne64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072c558a0f181bec139d68b451e7aa4907dbc5ef/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzkne64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzkne64.c?ref=072c558a0f181bec139d68b451e7aa4907dbc5ef", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64gc_zkne -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+\n+#include <stdint-gcc.h>\n+\n+int64_t foo1(int64_t rs1, int64_t rs2)\n+{\n+    return __builtin_riscv_aes64es(rs1,rs2);\n+}\n+\n+int64_t foo2(int64_t rs1, int64_t rs2)\n+{\n+    return __builtin_riscv_aes64esm(rs1,rs2);\n+}\n+\n+int64_t foo3(int64_t rs1, int rnum)\n+{\n+    return __builtin_riscv_aes64ks1i(rs1,rnum);\n+}\n+\n+int64_t foo4(int64_t rs1, int64_t rs2)\n+{\n+    return __builtin_riscv_aes64ks2(rs1,rs2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"aes64es\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"aes64esm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"aes64ks1i\" 1 } } */\n+/* { dg-final { scan-assembler-times \"aes64ks2\" 1 } } */"}]}