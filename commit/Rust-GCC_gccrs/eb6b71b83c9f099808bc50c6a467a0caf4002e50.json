{"sha": "eb6b71b83c9f099808bc50c6a467a0caf4002e50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2YjcxYjgzYzlmMDk5ODA4YmM1MGM2YTQ2N2EwY2FmNDAwMmU1MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-29T11:43:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-29T11:43:55Z"}, "message": "libstdc++: Fix some warnings in headers\n\nThese are usually suppressed without -Wsystem-headers.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/hashtable_policy.h (_Local_iterator_base): Cast\n\tvalue to avoid -Wsign-compare warnings.\n\t* include/bits/regex.h (sub_match::_M_str): Avoid narrowing\n\tconversion.\n\t* include/bits/regex_compiler.tcc (_Compiler::_M_quantifier):\n\tInitialize variable to avoid -Wmaybe-uninitialized warning.\n\t* include/bits/shared_ptr_base.h (_Sp_counted_deleter::_Impl):\n\tReorder mem-initializer-list to avoid -Wreorder warning.\n\t* include/bits/stl_tree.h (_Rb_tree_impl): Explicitly\n\tinitialize base class in copy constructor.\n\t* include/debug/safe_iterator.h (_Safe_iterator): Likewise.\n\t* include/ext/debug_allocator.h: Reorder mem-initializer-list\n\tto avoid -Wreorder warning.\n\t* include/ext/throw_allocator.h (throw_allocator_limit)\n\t(throw_allocator_random): Add user-declared assignment operators\n\tto avoid -Wdeprecated-copy warnings.", "tree": {"sha": "f102c93889faa853f8d8eb7a9b05579509675b77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f102c93889faa853f8d8eb7a9b05579509675b77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb6b71b83c9f099808bc50c6a467a0caf4002e50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6b71b83c9f099808bc50c6a467a0caf4002e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6b71b83c9f099808bc50c6a467a0caf4002e50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6b71b83c9f099808bc50c6a467a0caf4002e50/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9df44b9403312d7cd9678bfb44cae3bb972d6355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9df44b9403312d7cd9678bfb44cae3bb972d6355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9df44b9403312d7cd9678bfb44cae3bb972d6355"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "cea5e549d25343df893d6c76f956c0c8fb962806", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=eb6b71b83c9f099808bc50c6a467a0caf4002e50", "patch": "@@ -1368,15 +1368,15 @@ namespace __detail\n \n       ~_Local_iterator_base()\n       {\n-\tif (_M_bucket_count != -1)\n+\tif (_M_bucket_count != size_t(-1))\n \t  _M_destroy();\n       }\n \n       _Local_iterator_base(const _Local_iterator_base& __iter)\n       : __node_iter_base(__iter._M_cur), _M_bucket(__iter._M_bucket)\n       , _M_bucket_count(__iter._M_bucket_count)\n       {\n-\tif (_M_bucket_count != -1)\n+\tif (_M_bucket_count != size_t(-1))\n \t  _M_init(*__iter._M_h());\n       }\n "}, {"sha": "3cbd0d5913e8c5e7217797c61dc0548ae300f577", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=eb6b71b83c9f099808bc50c6a467a0caf4002e50", "patch": "@@ -994,7 +994,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t_M_str() const noexcept\n \t{\n \t  if (this->matched)\n-\t    if (auto __len = this->second - this->first)\n+\t    if (size_t __len = this->second - this->first)\n \t      return { std::__addressof(*this->first), __len };\n \t  return {};\n \t}"}, {"sha": "c26b28a6965606f2fe2880b997a56258983c2d4a", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=eb6b71b83c9f099808bc50c6a467a0caf4002e50", "patch": "@@ -233,16 +233,16 @@ namespace __detail\n \t  _StateSeqT __e(*_M_nfa, _M_nfa->_M_insert_dummy());\n \t  long __min_rep = _M_cur_int_value(10);\n \t  bool __infi = false;\n-\t  long __n;\n+\t  long __n = 0;\n \n \t  // {3\n \t  if (_M_match_token(_ScannerT::_S_token_comma))\n-\t    if (_M_match_token(_ScannerT::_S_token_dup_count)) // {3,7}\n-\t      __n = _M_cur_int_value(10) - __min_rep;\n-\t    else\n-\t      __infi = true;\n-\t  else\n-\t    __n = 0;\n+\t    {\n+\t      if (_M_match_token(_ScannerT::_S_token_dup_count)) // {3,7}\n+\t\t__n = _M_cur_int_value(10) - __min_rep;\n+\t      else\n+\t\t__infi = true;\n+\t    }\n \t  if (!_M_match_token(_ScannerT::_S_token_interval_end))\n \t    __throw_regex_error(regex_constants::error_brace,\n \t\t\t\t\"Unexpected end of brace expression.\");"}, {"sha": "368b2d7379ae12d256abc09f1955bbc744cafb94", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=eb6b71b83c9f099808bc50c6a467a0caf4002e50", "patch": "@@ -415,7 +415,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       public:\n \t_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept\n-\t: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)\n+\t: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)\n \t{ }\n \n \t_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }"}, {"sha": "ec141ea01c76d447ecd5e91b75967af78e608720", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=eb6b71b83c9f099808bc50c6a467a0caf4002e50", "patch": "@@ -691,6 +691,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _Rb_tree_impl(const _Rb_tree_impl& __x)\n \t  : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))\n \t  , _Base_key_compare(__x._M_key_compare)\n+\t  , _Rb_tree_header()\n \t  { }\n \n #if __cplusplus < 201103L"}, {"sha": "9b77fac6478ba76c5cb7c4fca11a5b4c0fc8fc4d", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=eb6b71b83c9f099808bc50c6a467a0caf4002e50", "patch": "@@ -170,7 +170,7 @@ namespace __gnu_debug\n        * @brief Copy construction.\n        */\n       _Safe_iterator(const _Safe_iterator& __x) _GLIBCXX_NOEXCEPT\n-      : _Iter_base(__x.base())\n+      : _Iter_base(__x.base()), _Safe_base()\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// DR 408. Is vector<reverse_iterator<char*> > forbidden?"}, {"sha": "8b3941682eb9796ac0962dce946cebf3435d35c5", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=eb6b71b83c9f099808bc50c6a467a0caf4002e50", "patch": "@@ -112,10 +112,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc2>\n \tdebug_allocator(const debug_allocator<_Alloc2>& __a2,\n \t\t\ttypename __convertible<_Alloc2>::__type = 0)\n-\t: _M_allocator(__a2._M_allocator), _M_extra(_S_extra()) { }\n+\t: _M_extra(_S_extra()), _M_allocator(__a2._M_allocator)  { }\n \n       debug_allocator(const _Alloc& __a)\n-      : _M_allocator(__a), _M_extra(_S_extra()) { }\n+      : _M_extra(_S_extra()), _M_allocator(__a)  { }\n \n       _GLIBCXX_NODISCARD pointer\n       allocate(size_type __n)"}, {"sha": "0ab174f19a57ae3869349e6194f8e7658c80091b", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6b71b83c9f099808bc50c6a467a0caf4002e50/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=eb6b71b83c9f099808bc50c6a467a0caf4002e50", "patch": "@@ -922,6 +922,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_GLIBCXX_USE_NOEXCEPT { }\n \n       ~throw_allocator_limit() _GLIBCXX_USE_NOEXCEPT { }\n+\n+#if __cplusplus >= 201103L\n+      throw_allocator_limit&\n+      operator=(const throw_allocator_limit&) = default;\n+#endif\n     };\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n@@ -944,6 +949,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_GLIBCXX_USE_NOEXCEPT { }\n \n       ~throw_allocator_random() _GLIBCXX_USE_NOEXCEPT { }\n+\n+#if __cplusplus >= 201103L\n+      throw_allocator_random&\n+      operator=(const throw_allocator_random&) = default;\n+#endif\n     };\n #endif // _GLIBCXX_USE_C99_STDINT_TR1\n "}]}