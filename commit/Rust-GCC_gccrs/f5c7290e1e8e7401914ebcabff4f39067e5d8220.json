{"sha": "f5c7290e1e8e7401914ebcabff4f39067e5d8220", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVjNzI5MGUxZThlNzQwMTkxNGViY2FiZmY0ZjM5MDY3ZTVkODIyMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-04-25T08:03:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-04-25T08:03:55Z"}, "message": "config.gcc (sh-wrs-vxworks): Don't include dbxelf.h.\n\ngcc/\n\t* config.gcc (sh-wrs-vxworks): Don't include dbxelf.h.  Include\n\tsh/elf.h, vx-common.h and vxworks.h.\n\t* config/sh/sh.h: Include config/vxworks-dummy.h.\n\t(SUBTARGET_OVERRIDE_OPTIONS): Define.\n\t(OVERRIDE_OPTIONS): Use it.\n\t* config/sh/sh.md (GOTaddr2picreg): Add suport for VxWorks RTPs.\n\t(vxworks_picreg): New pattern.\n\t* config/sh/vxworks.h (TARGET_OS_CPP_BUILTINS): Use\n\tVXWORKS_OS_CPP_BUILTINS.\n\t(LIB_SPEC, LINK_SPEC, STARTFILE_SPEC, ENDFILE_SPEC): Redefine\n\tto their VXWORKS_* equivalents.\n\t(SUBTARGET_OVERRIDE_OPTIONS, SUBTARGET_CPP_SPEC): Define.\n\t(SUBTARGET_LINK_EMUL_SUFFIX, FUNCTION_PROFILER): Define.\n\t* config/sh/lib1funcs.asm (NO_FPSCR_VALUES): Define for VxWorks PIC.\n\t(set_fpscr, ic_invalidate): Add VxWorks PIC sequences.\n\t* config/sh/t-vxworks (MULTILIB_OPTIONS): Add m4a, -mrtp and\n\t-mrtp/-fPIC multilibs.\n\t(MULTILIB_EXCEPTIONS): Generalize globs accordingly.\n\t(MULTILIB_MATCHES, EXTRA_MULTILIB_PARTS): Define.\n\t(MULTILIB_OSDIRNAMES): Delete.\n\nFrom-SVN: r124145", "tree": {"sha": "3218b549c5120e1652fb8409aa7b2f31cf5b69e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3218b549c5120e1652fb8409aa7b2f31cf5b69e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5c7290e1e8e7401914ebcabff4f39067e5d8220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c7290e1e8e7401914ebcabff4f39067e5d8220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c7290e1e8e7401914ebcabff4f39067e5d8220", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c7290e1e8e7401914ebcabff4f39067e5d8220/comments", "author": null, "committer": null, "parents": [{"sha": "3a35ee02c8c7a390a393085ecd66814c3debc47b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a35ee02c8c7a390a393085ecd66814c3debc47b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a35ee02c8c7a390a393085ecd66814c3debc47b"}], "stats": {"total": 165, "additions": 128, "deletions": 37}, "files": [{"sha": "f82239149ec557a7c633aed0a35a93800c897f8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5c7290e1e8e7401914ebcabff4f39067e5d8220", "patch": "@@ -1,3 +1,26 @@\n+2007-04-25  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config.gcc (sh-wrs-vxworks): Don't include dbxelf.h.  Include\n+\tsh/elf.h, vx-common.h and vxworks.h.\n+\t* config/sh/sh.h: Include config/vxworks-dummy.h.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Define.\n+\t(OVERRIDE_OPTIONS): Use it.\n+\t* config/sh/sh.md (GOTaddr2picreg): Add suport for VxWorks RTPs.\n+\t(vxworks_picreg): New pattern.\n+\t* config/sh/vxworks.h (TARGET_OS_CPP_BUILTINS): Use\n+\tVXWORKS_OS_CPP_BUILTINS.\n+\t(LIB_SPEC, LINK_SPEC, STARTFILE_SPEC, ENDFILE_SPEC): Redefine\n+\tto their VXWORKS_* equivalents.\n+\t(SUBTARGET_OVERRIDE_OPTIONS, SUBTARGET_CPP_SPEC): Define.\n+\t(SUBTARGET_LINK_EMUL_SUFFIX, FUNCTION_PROFILER): Define.\n+\t* config/sh/lib1funcs.asm (NO_FPSCR_VALUES): Define for VxWorks PIC.\n+\t(set_fpscr, ic_invalidate): Add VxWorks PIC sequences.\n+\t* config/sh/t-vxworks (MULTILIB_OPTIONS): Add m4a, -mrtp and\n+\t-mrtp/-fPIC multilibs.\n+\t(MULTILIB_EXCEPTIONS): Generalize globs accordingly.\n+\t(MULTILIB_MATCHES, EXTRA_MULTILIB_PARTS): Define.\n+\t(MULTILIB_OSDIRNAMES): Delete.\n+\n 2007-04-25  Anatoly Sokolov <aesok@post.ru>\n \n \tPR target/18989"}, {"sha": "31b10d4b5e13a229c00132c72a0b99d328826033", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f5c7290e1e8e7401914ebcabff4f39067e5d8220", "patch": "@@ -2236,7 +2236,7 @@ sh-*-rtems*)\n \t;;\n sh-wrs-vxworks)\n \ttmake_file=\"$tmake_file sh/t-sh sh/t-elf sh/t-vxworks\"\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sh/embed-elf.h sh/vxworks.h\"\n+\ttm_file=\"${tm_file} elfos.h svr4.h sh/elf.h sh/embed-elf.h vx-common.h vxworks.h sh/vxworks.h\"\n \t;;\n sh-*-*)\n \ttm_file=\"${tm_file} dbxcoff.h sh/coff.h\""}, {"sha": "b4c5289c0e3abcb5e92e5eccdbff771522439fbc", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=f5c7290e1e8e7401914ebcabff4f39067e5d8220", "patch": "@@ -40,6 +40,13 @@ Boston, MA 02110-1301, USA.  */\n \n #include \"lib1funcs.h\"\n \n+/* t-vxworks needs to build both PIC and non-PIC versions of libgcc,\n+   so it is more convenient to define NO_FPSCR_VALUES here than to\n+   define it on the command line.  */\n+#if defined __vxworks && defined __PIC__\n+#define NO_FPSCR_VALUES\n+#endif\n+\t\n #if ! __SH5__\n #ifdef L_ashiftrt\n \t.global\tGLOBAL(ashiftrt_r4_0)\n@@ -1967,9 +1974,16 @@ GLOBAL(set_fpscr):\n \tlds r4,fpscr\n #ifdef __PIC__\n \tmov.l\tr12,@-r15\n+#ifdef __vxworks\n+\tmov.l\tLOCAL(set_fpscr_L0_base),r12\n+\tmov.l\tLOCAL(set_fpscr_L0_index),r0\n+\tmov.l\t@r12,r12\n+\tmov.l\t@(r0,r12),r12\n+#else\n \tmova\tLOCAL(set_fpscr_L0),r0\n \tmov.l\tLOCAL(set_fpscr_L0),r12\n \tadd\tr0,r12\n+#endif\n \tmov.l\tLOCAL(set_fpscr_L1),r0\n \tmov.l\t@(r0,r12),r1\n \tmov.l\t@r15+,r12\n@@ -2004,8 +2018,15 @@ GLOBAL(set_fpscr):\n #endif\n \t.align 2\n #ifdef __PIC__\n+#ifdef __vxworks\n+LOCAL(set_fpscr_L0_base):\n+\t.long ___GOTT_BASE__\n+LOCAL(set_fpscr_L0_index):\n+\t.long ___GOTT_INDEX__\n+#else\n LOCAL(set_fpscr_L0):\n \t.long _GLOBAL_OFFSET_TABLE_\n+#endif\n LOCAL(set_fpscr_L1):\n \t.long GLOBAL(fpscr_values@GOT)\n #else\n@@ -2080,12 +2101,22 @@ GLOBAL(ic_invalidate):\n \t.global GLOBAL(ic_invalidate)\n \tHIDDEN_FUNC(GLOBAL(ic_invalidate))\n GLOBAL(ic_invalidate):\n-\tmov.l\t0f,r1\n #ifdef __pic__\n-\tmova\t0f,r0\n-\tmov.l\t1f,r2\n+#ifdef __vxworks\n+\tmov.l\t1f,r1\n+\tmov.l\t2f,r0\n+\tmov.l\t@r1,r1\n+\tmov.l\t0f,r2\n+\tmov.l\t@(r0,r1),r0\n+#else\n+\tmov.l\t1f,r1\n+\tmova\t1f,r0\n+\tmov.l\t0f,r2\n \tadd\tr1,r0\n+#endif\n \tmov.l\t@(r0,r2),r1\n+#else\n+\tmov.l\t0f,r1\n #endif\n \tocbwb\t@r4\n \tmov.l\t@(8,r1),r0\n@@ -2098,9 +2129,13 @@ GLOBAL(ic_invalidate):\n 0:\t.long   GLOBAL(ic_invalidate_array)\n #else /* __pic__ */\n \t.global GLOBAL(ic_invalidate_array)\n-\t/* ??? Why won't the assembler allow to add these two constants?  */\n-0:\t.long   _GLOBAL_OFFSET_TABLE_\n-1:\t.long   GLOBAL(ic_invalidate_array)@GOT\n+0:\t.long   GLOBAL(ic_invalidate_array)@GOT\n+#ifdef __vxworks\n+1:\t.long\t___GOTT_BASE__\n+2:\t.long\t___GOTT_INDEX__\n+#else\n+1:\t.long   _GLOBAL_OFFSET_TABLE_\n+#endif\n \tENDFUNC(GLOBAL(ic_invalidate))\n #endif /* __pic__ */\n #endif /* SH4 */"}, {"sha": "4665f3885c788e7f443ea9328c9e9c56feb3bbcf", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=f5c7290e1e8e7401914ebcabff4f39067e5d8220", "patch": "@@ -24,6 +24,8 @@ Boston, MA 02110-1301, USA.  */\n #ifndef GCC_SH_H\n #define GCC_SH_H\n \n+#include \"config/vxworks-dummy.h\"\n+\n #define TARGET_VERSION \\\n   fputs (\" (Hitachi SH)\", stderr);\n \n@@ -530,10 +532,13 @@ extern enum sh_divide_strategy_e sh_div_strategy;\n #define SH_DIV_STRATEGY_DEFAULT SH_DIV_CALL\n #endif\n \n+#define SUBTARGET_OVERRIDE_OPTIONS (void) 0\n+\n #define OVERRIDE_OPTIONS \t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   int regno;\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  SUBTARGET_OVERRIDE_OPTIONS;\t\t\t\t\t\t\\\n   if (flag_finite_math_only == 2)\t\t\t\t\t\\\n     flag_finite_math_only\t\t\t\t\t\t\\\n       = !flag_signaling_nans && TARGET_SH2E && ! TARGET_IEEE;\t\t\\"}, {"sha": "455a23805df0eaa4a67d0d7147572733fe494d85", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=f5c7290e1e8e7401914ebcabff4f39067e5d8220", "patch": "@@ -8288,6 +8288,14 @@ label:\n    (set (match_dup 0) (plus:SI (match_dup 0) (reg:SI R0_REG)))]\n   \"\" \"\n {\n+  if (TARGET_VXWORKS_RTP)\n+    {\n+      rtx gott_base = gen_rtx_SYMBOL_REF (Pmode, VXWORKS_GOTT_BASE);\n+      rtx gott_index = gen_rtx_SYMBOL_REF (Pmode, VXWORKS_GOTT_INDEX);\n+      emit_insn (gen_vxworks_picreg (gott_base, gott_index));\n+      DONE;\n+    }\n+\n   operands[0] = gen_rtx_REG (Pmode, PIC_REG);\n   operands[1] = gen_rtx_SYMBOL_REF (VOIDmode, GOT_SYMBOL_NAME);\n \n@@ -8330,6 +8338,21 @@ label:\n }\n \")\n \n+;; A helper for GOTaddr2picreg to finish up the initialization of the\n+;; PIC register.\n+\n+(define_expand \"vxworks_picreg\"\n+  [(set (reg:SI PIC_REG)\n+\t(const:SI (unspec:SI [(match_operand:SI 0 \"\" \"\")] UNSPEC_PIC)))\n+   (set (reg:SI R0_REG)\n+\t(const:SI (unspec:SI [(match_operand:SI 1 \"\" \"\")] UNSPEC_PIC)))\n+   (set (reg:SI PIC_REG)\n+\t(mem:SI (reg:SI PIC_REG)))\n+   (set (reg:SI PIC_REG)\n+\t(mem:SI (plus:SI (reg:SI PIC_REG)\n+\t\t\t (reg:SI R0_REG))))]\n+  \"TARGET_VXWORKS_RTP\")\n+\n (define_insn \"*ptb\"\n   [(set (match_operand 0 \"target_reg_operand\" \"=b\")\n \t(const (unspec [(match_operand 1 \"\" \"Csy\")]"}, {"sha": "66aa7091ab189b8c28406aad7c9d851f11abdd12", "filename": "gcc/config/sh/t-vxworks", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig%2Fsh%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig%2Fsh%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-vxworks?ref=f5c7290e1e8e7401914ebcabff4f39067e5d8220", "patch": "@@ -1,11 +1,9 @@\n # Multilibs for VxWorks.\n \n-MULTILIB_OPTIONS = m2/m3/m4 ml\n-\n-MULTILIB_EXCEPTIONS = ml m2/ml\n-\n-MULTILIB_OSDIRNAMES = \\\n-  m2=!SH7600gnu \\\n-  m3=!SH7700gnu m3/ml=!SH7700gnule \\\n-  m4=!SH7750gnu m4/ml=!SH7750gnule\n+MULTILIB_OPTIONS = mrtp fPIC m2/m3/m4/m4a ml\n+# Don't build -fPIC without -mrtp, or -ml without -m3/-m4.\n+MULTILIB_EXCEPTIONS = fPIC* ml* mrtp/ml* mrtp/fPIC/ml* *m2/ml*\n+MULTILIB_MATCHES = m2=m4-nofpu fPIC=fpic\n \n+# Restore a variable from t-vxworks clobbered by t-elf.\n+EXTRA_MULTILIB_PARTS ="}, {"sha": "63f2bbf6969a474bc521ec1cf07359f566ebdfd6", "filename": "gcc/config/sh/vxworks.h", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig%2Fsh%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c7290e1e8e7401914ebcabff4f39067e5d8220/gcc%2Fconfig%2Fsh%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fvxworks.h?ref=f5c7290e1e8e7401914ebcabff4f39067e5d8220", "patch": "@@ -22,29 +22,36 @@ Boston, MA 02110-1301, USA.  */\n \n \n #define TARGET_OS_CPP_BUILTINS()\t\\\n-  do {\t\t\t\t\t\\\n-    builtin_define (\"__vxworks\");\t\\\n-    builtin_define (\"CPU=SH7000\");\t\t\\\n-  } while (0)\n-\n-/* VxWorks does all the library stuff itself.  */\n-#undef  LIB_SPEC\n-#define LIB_SPEC \t\"\"\n-\n-/* VxWorks uses object files, not loadable images.  Make the linker just\n-   combine objects.  */\n-#undef  LINK_SPEC\n-#define LINK_SPEC \t\"-r\"\n-\n-/* VxWorks provides the functionality of crt0.o and friends itself.  */\n-#undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC \t\"\"\n-\n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \t\"\"\n-\n-#undef  TARGET_VERSION\n+  do\t\t\t\t\t\\\n+    {\t\t\t\t\t\\\n+      builtin_define (\"CPU=SH7000\");\t\\\n+      VXWORKS_OS_CPP_BUILTINS ();\t\\\n+    }\t\t\t\t\t\\\n+  while (0)\n+\n+#undef SUBTARGET_OVERRIDE_OPTIONS\n+#define SUBTARGET_OVERRIDE_OPTIONS VXWORKS_OVERRIDE_OPTIONS\n+\n+#undef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC VXWORKS_ADDITIONAL_CPP_SPEC\n+\n+#undef SUBTARGET_LINK_EMUL_SUFFIX\n+#define SUBTARGET_LINK_EMUL_SUFFIX \"_vxworks\"\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC VXWORKS_LIB_SPEC\n+#undef LINK_SPEC\n+#define LINK_SPEC VXWORKS_LINK_SPEC \" \" SH_LINK_SPEC\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC VXWORKS_STARTFILE_SPEC\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC VXWORKS_ENDFILE_SPEC\n+\n+#undef TARGET_VERSION\n #define TARGET_VERSION\tfputs (\" (SH/VxWorks)\", stderr);\n \n /* There is no default multilib.  */\n #undef MULTILIB_DEFAULTS\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER VXWORKS_FUNCTION_PROFILER"}]}