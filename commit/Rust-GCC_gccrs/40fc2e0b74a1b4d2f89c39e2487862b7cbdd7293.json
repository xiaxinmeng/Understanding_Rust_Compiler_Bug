{"sha": "40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmYzJlMGI3NGExYjRkMmY4OWMzOWUyNDg3ODYyYjdjYmRkNzI5Mw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2006-02-07T22:09:52Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2006-02-07T22:09:52Z"}, "message": "re PR target/26109 (ICE: Segmentation fault (program cc1) compiling _muldi3.o in stage1)\n\n\tPR target/26109\n\t* pa.c (attr_length_indirect_call): Don't return length 8 for distances\n\t>= 240000 when generating code for SOM runtime.\n\t(output_indirect_call): Don't use \"b,l\" instruction for indirect calls\n\tto $$dyncall when generating code for SOM runtime..\n\nFrom-SVN: r110721", "tree": {"sha": "be647bd6ca0753648be30cd91b66b28377dca133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be647bd6ca0753648be30cd91b66b28377dca133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293/comments", "author": null, "committer": null, "parents": [{"sha": "cb2bbc673b91b08de12c199259368a05484dbba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2bbc673b91b08de12c199259368a05484dbba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb2bbc673b91b08de12c199259368a05484dbba2"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "053e26d6ca2545b7d78f20329a46e35249c2c59f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293", "patch": "@@ -1,3 +1,11 @@\n+2006-02-07  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/26109\n+\t* pa.c (attr_length_indirect_call): Don't return length 8 for distances\n+\t>= 240000 when generating code for SOM runtime.\n+\t(output_indirect_call): Don't use \"b,l\" instruction for indirect calls\n+\tto $$dyncall when generating code for SOM runtime..\n+\n 2006-02-07  Dirk Mueller  <dmueller@suse.com>\n \n \tPR c++/18150"}, {"sha": "b6b1ef741528c4575664b4fbf812bb5a18ad8fd5", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=40fc2e0b74a1b4d2f89c39e2487862b7cbdd7293", "patch": "@@ -7447,7 +7447,8 @@ attr_length_indirect_call (rtx insn)\n \n   if (TARGET_FAST_INDIRECT_CALLS\n       || (!TARGET_PORTABLE_RUNTIME\n-\t  && ((TARGET_PA_20 && distance < 7600000) || distance < 240000)))\n+\t  && ((TARGET_PA_20 && !TARGET_SOM && distance < 7600000)\n+\t      || distance < 240000)))\n     return 8;\n \n   if (flag_pic)\n@@ -7484,10 +7485,10 @@ output_indirect_call (rtx insn, rtx call_dest)\n      the remaining cases.  */\n   if (attr_length_indirect_call (insn) == 8)\n     {\n-      /* The HP linker substitutes a BLE for millicode calls using\n-\t the short PIC PCREL form.  Thus, we must use %r31 as the\n-\t link register when generating PA 1.x code.  */\n-      if (TARGET_PA_20)\n+      /* The HP linker sometimes substitutes a BLE for BL/B,L calls to\n+\t $$dyncall.  Since BLE uses %r31 as the link register, the 22-bit\n+\t variant of the B,L instruction can't be used on the SOM target.  */\n+      if (TARGET_PA_20 && !TARGET_SOM)\n \treturn \".CALL\\tARGW0=GR\\n\\tb,l $$dyncall,%%r2\\n\\tcopy %%r2,%%r31\";\n       else\n \treturn \".CALL\\tARGW0=GR\\n\\tbl $$dyncall,%%r31\\n\\tcopy %%r31,%%r2\";"}]}