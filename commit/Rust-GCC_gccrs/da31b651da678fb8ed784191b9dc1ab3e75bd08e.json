{"sha": "da31b651da678fb8ed784191b9dc1ab3e75bd08e", "node_id": "C_kwDOANBUbNoAKGRhMzFiNjUxZGE2NzhmYjhlZDc4NDE5MWI5ZGMxYWIzZTc1YmQwOGU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-03T11:32:33Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-04T15:52:29Z"}, "message": "Update TyTy::can_eq interface for pointers and references\n\nIt is valid for pointers and references to unify against inference\nvariables.", "tree": {"sha": "10ed4ecedd266b951815449a337006906fa01830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10ed4ecedd266b951815449a337006906fa01830"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da31b651da678fb8ed784191b9dc1ab3e75bd08e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da31b651da678fb8ed784191b9dc1ab3e75bd08e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da31b651da678fb8ed784191b9dc1ab3e75bd08e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da31b651da678fb8ed784191b9dc1ab3e75bd08e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "405d9f1d135771015199546cd1c224ba589ab48d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405d9f1d135771015199546cd1c224ba589ab48d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405d9f1d135771015199546cd1c224ba589ab48d"}], "stats": {"total": 106, "additions": 100, "deletions": 6}, "files": [{"sha": "07d1dea7464ff1081a31420d12ab6826daad36b3", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 100, "deletions": 6, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da31b651da678fb8ed784191b9dc1ab3e75bd08e/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da31b651da678fb8ed784191b9dc1ab3e75bd08e/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=da31b651da678fb8ed784191b9dc1ab3e75bd08e", "patch": "@@ -36,12 +36,7 @@ class BaseCmp : public TyConstVisitor\n     if (other->get_kind () == TypeKind::PARAM)\n       {\n \tconst ParamType *p = static_cast<const ParamType *> (other);\n-\tif (p->can_resolve ())\n-\t  {\n-\t    const BaseType *resolved = p->resolve ();\n-\t    resolved->accept_vis (*this);\n-\t    return ok;\n-\t  }\n+\tother = p->resolve ();\n       }\n     if (other->get_kind () == TypeKind::PLACEHOLDER)\n       {\n@@ -861,6 +856,17 @@ class ClosureCmp : public BaseCmp\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n+  void visit (const InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCmp::visit (type);\n+\treturn;\n+      }\n+\n+    ok = true;\n+  }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const ClosureType *base;\n@@ -889,6 +895,17 @@ class ArrayCmp : public BaseCmp\n     ok = true;\n   }\n \n+  void visit (const InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCmp::visit (type);\n+\treturn;\n+      }\n+\n+    ok = true;\n+  }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const ArrayType *base;\n@@ -917,6 +934,17 @@ class SliceCmp : public BaseCmp\n     ok = true;\n   }\n \n+  void visit (const InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCmp::visit (type);\n+\treturn;\n+      }\n+\n+    ok = true;\n+  }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const SliceType *base;\n@@ -1074,6 +1102,17 @@ class ADTCmp : public BaseCmp\n     ok = true;\n   }\n \n+  void visit (const InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCmp::visit (type);\n+\treturn;\n+      }\n+\n+    ok = true;\n+  }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const ADTType *base;\n@@ -1111,6 +1150,17 @@ class TupleCmp : public BaseCmp\n     ok = true;\n   }\n \n+  void visit (const InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCmp::visit (type);\n+\treturn;\n+      }\n+\n+    ok = true;\n+  }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const TupleType *base;\n@@ -1209,6 +1259,17 @@ class ReferenceCmp : public BaseCmp\n     ok = true;\n   }\n \n+  void visit (const InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCmp::visit (type);\n+\treturn;\n+      }\n+\n+    ok = true;\n+  }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const ReferenceType *base;\n@@ -1246,6 +1307,17 @@ class PointerCmp : public BaseCmp\n     ok = true;\n   }\n \n+  void visit (const InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCmp::visit (type);\n+\treturn;\n+      }\n+\n+    ok = true;\n+  }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const PointerType *base;\n@@ -1344,6 +1416,17 @@ class StrCmp : public BaseCmp\n \n   void visit (const StrType &type) override { ok = true; }\n \n+  void visit (const InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCmp::visit (type);\n+\treturn;\n+      }\n+\n+    ok = true;\n+  }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const StrType *base;\n@@ -1360,6 +1443,17 @@ class NeverCmp : public BaseCmp\n \n   void visit (const NeverType &type) override { ok = true; }\n \n+  void visit (const InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCmp::visit (type);\n+\treturn;\n+      }\n+\n+    ok = true;\n+  }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const NeverType *base;"}]}