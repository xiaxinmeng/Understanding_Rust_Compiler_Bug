{"sha": "1c2575586c47f56a2e75f734af42371579516f0c", "node_id": "C_kwDOANBUbNoAKDFjMjU3NTU4NmM0N2Y1NmEyZTc1ZjczNGFmNDIzNzE1Nzk1MTZmMGM", "commit": {"author": {"name": "wwwhhhyyy", "email": "hongyu.wang@intel.com", "date": "2021-08-30T08:41:41Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-01-16T04:43:02Z"}, "message": "[i386] GLC tuning: Break false dependency for dest register.\n\nFor GoldenCove micro-architecture, force insert zero-idiom in asm\ntemplate to break false dependency of dest register for several insns.\n\nThe related insns are:\n\nVPERM/D/Q/PS/PD\nVRANGEPD/PS/SD/SS\nVGETMANTSS/SD/SH\nVGETMANDPS/PD - mem version only\nVPMULLQ\nVFMULCSH/PH\nVFCMULCSH/PH\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.h (TARGET_DEST_FALSE_DEP_FOR_GLC): New macro.\n\t* config/i386/sse.md (<avx512>_<complexopname>_<mode><maskc_name><round_name>):\n\tInsert zero-idiom in output template when attr enabled, set new attribute to\n\ttrue for non-mask/maskz insn.\n\t(avx512fp16_<complexopname>sh_v8hf<mask_scalarc_name><round_scalarcz_name>):\n\tLikewise.\n\t(avx512dq_mul<mode>3<mask_name>): Likewise.\n\t(<avx2_avx512>_permvar<mode><mask_name>): Likewise.\n\t(avx2_perm<mode>_1<mask_name>): Likewise.\n\t(avx512f_perm<mode>_1<mask_name>): Likewise.\n\t(avx512dq_rangep<mode><mask_name><round_saeonly_name>): Likewise.\n\t(avx512dq_ranges<mode><mask_scalar_name><round_saeonly_scalar_name>):\n\tLikewise.\n\t(<avx512>_getmant<mode><mask_name><round_saeonly_name>): Likewise.\n\t(avx512f_vgetmant<mode><mask_scalar_name><round_saeonly_scalar_name>):\n\tLikewise.\n\t* config/i386/subst.md (mask3_dest_false_dep_for_glc_cond): New\n\tsubst_attr.\n\t(mask4_dest_false_dep_for_glc_cond): Likewise.\n\t(mask6_dest_false_dep_for_glc_cond): Likewise.\n\t(mask10_dest_false_dep_for_glc_cond): Likewise.\n\t(maskc_dest_false_dep_for_glc_cond): Likewise.\n\t(mask_scalar4_dest_false_dep_for_glc_cond): Likewise.\n\t(mask_scalarc_dest_false_dep_for_glc_cond): Likewise.\n\t* config/i386/x86-tune.def (X86_TUNE_DEST_FALSE_DEP_FOR_GLC): New\n\tDEF_TUNE enabled for m_SAPPHIRERAPIDS and m_ALDERLAKE\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx2-dest-false-dep-for-glc.c: New test.\n\t* gcc.target/i386/avx512dq-dest-false-dep-for-glc.c: Ditto.\n\t* gcc.target/i386/avx512f-dest-false-dep-for-glc.c: Ditto.\n\t* gcc.target/i386/avx512fp16-dest-false-dep-for-glc.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-dest-false-dep-for-glc.c: Ditto.\n\t* gcc.target/i386/avx512vl-dest-false-dep-for-glc.c: Ditto.", "tree": {"sha": "00cfab3267531feb8987b3cec759731030662d9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00cfab3267531feb8987b3cec759731030662d9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c2575586c47f56a2e75f734af42371579516f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2575586c47f56a2e75f734af42371579516f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2575586c47f56a2e75f734af42371579516f0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2575586c47f56a2e75f734af42371579516f0c/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9248ee41478754b46b70f2409b85d9743ece9e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9248ee41478754b46b70f2409b85d9743ece9e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9248ee41478754b46b70f2409b85d9743ece9e72"}], "stats": {"total": 435, "additions": 427, "deletions": 8}, "files": [{"sha": "f1bb8a868f170f87d979832e21bd355443b80bbf", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1c2575586c47f56a2e75f734af42371579516f0c", "patch": "@@ -429,6 +429,8 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_EXPAND_ABS]\n #define TARGET_V2DF_REDUCTION_PREFER_HADDPD \\\n \tix86_tune_features[X86_TUNE_V2DF_REDUCTION_PREFER_HADDPD]\n+#define TARGET_DEST_FALSE_DEP_FOR_GLC \\\n+\tix86_tune_features[X86_TUNE_DEST_FALSE_DEP_FOR_GLC]\n \n /* Feature tests against the various architecture variations.  */\n enum ix86_arch_indices {"}, {"sha": "ea72aa5d9ac488f91fdba76505e63579d7cca3f2", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 67, "deletions": 8, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1c2575586c47f56a2e75f734af42371579516f0c", "patch": "@@ -6536,7 +6536,12 @@\n \t     (match_operand:VF_AVX512FP16VL 2 \"nonimmediate_operand\" \"<round_constraint>\")]\n \t     UNSPEC_COMPLEX_F_C_MUL))]\n   \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n-  \"v<complexopname><ssemodesuffix>\\t{<round_maskc_op3>%2, %1, %0<maskc_operand3>|%0<maskc_operand3>, %1, %2<round_maskc_op3>}\"\n+{\n+  if (TARGET_DEST_FALSE_DEP_FOR_GLC\n+      && <maskc_dest_false_dep_for_glc_cond>)\n+    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+  return \"v<complexopname><ssemodesuffix>\\t{<round_maskc_op3>%2, %1, %0<maskc_operand3>|%0<maskc_operand3>, %1, %2<round_maskc_op3>}\";\n+}\n   [(set_attr \"type\" \"ssemul\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -6742,7 +6747,12 @@\n \t    (match_dup 1)\n \t    (const_int 3)))]\n   \"TARGET_AVX512FP16\"\n-  \"v<complexopname>sh\\t{<round_scalarc_mask_op3>%2, %1, %0<mask_scalarc_operand3>|%0<mask_scalarc_operand3>, %1, %2<round_scalarc_mask_op3>}\"\n+{\n+  if (TARGET_DEST_FALSE_DEP_FOR_GLC\n+      && <mask_scalarc_dest_false_dep_for_glc_cond>)\n+    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+  return \"v<complexopname>sh\\t{<round_scalarc_mask_op3>%2, %1, %0<mask_scalarc_operand3>|%0<mask_scalarc_operand3>, %1, %2<round_scalarc_mask_op3>}\";\n+}\n   [(set_attr \"type\" \"ssemul\")\n    (set_attr \"mode\" \"V8HF\")])\n \n@@ -15207,7 +15217,14 @@\n \t  (match_operand:VI8_AVX512VL 2 \"bcst_vector_operand\" \"vmBr\")))]\n   \"TARGET_AVX512DQ && <mask_mode512bit_condition>\n   && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n-  \"vpmullq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+{\n+  if (TARGET_DEST_FALSE_DEP_FOR_GLC\n+      && <mask3_dest_false_dep_for_glc_cond>\n+      && !reg_mentioned_p (operands[0], operands[1])\n+      && !reg_mentioned_p (operands[0], operands[2]))\n+    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+  return \"vpmullq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\";\n+}\n   [(set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -24636,7 +24653,14 @@\n \t   (match_operand:<sseintvecmode> 2 \"register_operand\" \"v\")]\n \t  UNSPEC_VPERMVAR))]\n   \"TARGET_AVX2 && <mask_mode512bit_condition>\"\n-  \"vperm<ssemodesuffix>\\t{%1, %2, %0<mask_operand3>|%0<mask_operand3>, %2, %1}\"\n+{\n+  if (TARGET_DEST_FALSE_DEP_FOR_GLC\n+      && <mask3_dest_false_dep_for_glc_cond>\n+      && !reg_mentioned_p (operands[0], operands[1])\n+      && !reg_mentioned_p (operands[0], operands[2]))\n+    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+  return \"vperm<ssemodesuffix>\\t{%1, %2, %0<mask_operand3>|%0<mask_operand3>, %2, %1}\";\n+}\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"<mask_prefix2>\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -24873,6 +24897,10 @@\n   mask |= INTVAL (operands[4]) << 4;\n   mask |= INTVAL (operands[5]) << 6;\n   operands[2] = GEN_INT (mask);\n+  if (TARGET_DEST_FALSE_DEP_FOR_GLC\n+      && <mask6_dest_false_dep_for_glc_cond>\n+      && !reg_mentioned_p (operands[0], operands[1]))\n+    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n   return \"vperm<ssemodesuffix>\\t{%2, %1, %0<mask_operand6>|%0<mask_operand6>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog\")\n@@ -24944,6 +24972,10 @@\n   mask |= INTVAL (operands[4]) << 4;\n   mask |= INTVAL (operands[5]) << 6;\n   operands[2] = GEN_INT (mask);\n+  if (TARGET_DEST_FALSE_DEP_FOR_GLC\n+      && <mask10_dest_false_dep_for_glc_cond>\n+      && !reg_mentioned_p (operands[0], operands[1]))\n+    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n   return \"vperm<ssemodesuffix>\\t{%2, %1, %0<mask_operand10>|%0<mask_operand10>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog\")\n@@ -26843,7 +26875,14 @@\n \t   (match_operand:SI 3 \"const_0_to_15_operand\")]\n \t  UNSPEC_RANGE))]\n   \"TARGET_AVX512DQ && <round_saeonly_mode512bit_condition>\"\n-  \"vrange<ssemodesuffix>\\t{%3, <round_saeonly_mask_op4>%2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2<round_saeonly_mask_op4>, %3}\"\n+{\n+  if (TARGET_DEST_FALSE_DEP_FOR_GLC\n+      && <mask4_dest_false_dep_for_glc_cond>\n+      && !reg_mentioned_p (operands[0], operands[1])\n+      && !reg_mentioned_p (operands[0], operands[2]))\n+    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+  return \"vrange<ssemodesuffix>\\t{%3, <round_saeonly_mask_op4>%2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2<round_saeonly_mask_op4>, %3}\";\n+}\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -26859,7 +26898,14 @@\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_AVX512DQ\"\n-  \"vrange<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %<iptr>2<round_saeonly_scalar_mask_op4>, %3}\"\n+{\n+  if (TARGET_DEST_FALSE_DEP_FOR_GLC\n+      && <mask_scalar4_dest_false_dep_for_glc_cond>\n+      && !reg_mentioned_p (operands[0], operands[1])\n+      && !reg_mentioned_p (operands[0], operands[2]))\n+    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+  return \"vrange<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %<iptr>2<round_saeonly_scalar_mask_op4>, %3}\";\n+}\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -26899,7 +26945,13 @@\n \t   (match_operand:SI 2 \"const_0_to_15_operand\")]\n \t  UNSPEC_GETMANT))]\n   \"TARGET_AVX512F\"\n-  \"vgetmant<ssemodesuffix>\\t{%2, <round_saeonly_mask_op3>%1, %0<mask_operand3>|%0<mask_operand3>, %1<round_saeonly_mask_op3>, %2}\";\n+{\n+  if (TARGET_DEST_FALSE_DEP_FOR_GLC\n+      && <mask3_dest_false_dep_for_glc_cond>\n+      && MEM_P (operands[1]))\n+    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+  return \"vgetmant<ssemodesuffix>\\t{%2, <round_saeonly_mask_op3>%1, %0<mask_operand3>|%0<mask_operand3>, %1<round_saeonly_mask_op3>, %2}\";\n+}\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -26914,7 +26966,14 @@\n \t  (match_dup 1)\n \t  (const_int 1)))]\n    \"TARGET_AVX512F\"\n-   \"vgetmant<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %<iptr>2<round_saeonly_scalar_mask_op4>, %3}\";\n+{\n+  if (TARGET_DEST_FALSE_DEP_FOR_GLC\n+      && <mask_scalar4_dest_false_dep_for_glc_cond>\n+      && !reg_mentioned_p (operands[0], operands[1])\n+      && !reg_mentioned_p (operands[0], operands[2]))\n+    output_asm_insn (\"vxorps\\t{%x0, %x0, %x0}\", operands);\n+  return \"vgetmant<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %<iptr>2<round_saeonly_scalar_mask_op4>, %3}\";\n+}\n    [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n "}, {"sha": "bb86f82905f8bc217108bfe22e4075c08cc01d01", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=1c2575586c47f56a2e75f734af42371579516f0c", "patch": "@@ -71,6 +71,11 @@\n (define_subst_attr \"mask_prefix4\" \"mask\" \"orig,orig,vex\" \"evex,evex,evex\")\n (define_subst_attr \"bcst_mask_prefix4\" \"mask\" \"orig,orig,maybe_evex\" \"evex,evex,evex\")\n (define_subst_attr \"mask_expand_op3\" \"mask\" \"3\" \"5\")\n+(define_subst_attr \"mask3_dest_false_dep_for_glc_cond\" \"mask\" \"1\" \"operands[3] == CONST0_RTX(<MODE>mode)\")\n+(define_subst_attr \"mask4_dest_false_dep_for_glc_cond\" \"mask\" \"1\" \"operands[4] == CONST0_RTX(<MODE>mode)\")\n+(define_subst_attr \"mask6_dest_false_dep_for_glc_cond\" \"mask\" \"1\" \"operands[6] == CONST0_RTX(<MODE>mode)\")\n+(define_subst_attr \"mask10_dest_false_dep_for_glc_cond\" \"mask\" \"1\" \"operands[10] == CONST0_RTX(<MODE>mode)\")\n+(define_subst_attr \"maskc_dest_false_dep_for_glc_cond\" \"maskc\" \"1\" \"operands[3] == CONST0_RTX(<MODE>mode)\")\n \n (define_subst \"mask\"\n   [(set (match_operand:SUBST_V 0)\n@@ -337,6 +342,8 @@\n (define_subst_attr \"mask_scalar_operand3\" \"mask_scalar\" \"\" \"%{%4%}%N3\")\n (define_subst_attr \"mask_scalar_operand4\" \"mask_scalar\" \"\" \"%{%5%}%N4\")\n (define_subst_attr \"mask_scalarcz_operand4\" \"mask_scalarcz\" \"\" \"%{%5%}%N4\")\n+(define_subst_attr \"mask_scalar4_dest_false_dep_for_glc_cond\" \"mask_scalar\" \"1\" \"operands[4] == CONST0_RTX(<MODE>mode)\")\n+(define_subst_attr \"mask_scalarc_dest_false_dep_for_glc_cond\" \"mask_scalarc\" \"1\" \"operands[3] == CONST0_RTX(V8HFmode)\")\n \n (define_subst \"mask_scalar\"\n   [(set (match_operand:SUBST_V 0)"}, {"sha": "f9eb3c227c11ec9be089b09bd5aa3270f925c6c0", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=1c2575586c47f56a2e75f734af42371579516f0c", "patch": "@@ -79,6 +79,12 @@ DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY,\n \t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n \t  | m_BDVER | m_ZNVER | m_ALDERLAKE | m_GENERIC)\n \n+/* X86_TUNE_DEST_FALSE_DEP_FOR_GLC: This knob inserts zero-idiom before\n+   several insns to break false dependency on the dest register for GLC\n+   micro-architecture.  */\n+DEF_TUNE (X86_TUNE_DEST_FALSE_DEP_FOR_GLC,\n+\t  \"dest_false_dep_for_glc\", m_SAPPHIRERAPIDS | m_ALDERLAKE)\n+\n /* X86_TUNE_SSE_SPLIT_REGS: Set for machines where the type and dependencies\n    are resolved on SSE register parts instead of whole registers, so we may\n    maintain just lower part of scalar values in proper format leaving the"}, {"sha": "787b1d08f804e6593eb7ef4dff10cd442f269027", "filename": "gcc/testsuite/gcc.target/i386/avx2-dest-false-dep-for-glc.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-dest-false-dep-for-glc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-dest-false-dep-for-glc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-dest-false-dep-for-glc.c?ref=1c2575586c47f56a2e75f734af42371579516f0c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -mtune=generic -mtune-ctrl=dest_false_dep_for_glc -O2\" } */\n+\n+\n+#include <immintrin.h>\n+\n+extern __m256i i1, i2, i3, i4;\n+extern __m256d d1, d2;\n+extern __m256 f1, f2;\n+\n+void vperm_test (void)\n+{\n+  i3 = _mm256_permutevar8x32_epi32 (i1, i2);\n+  i4 = _mm256_permute4x64_epi64 (i1, 12);\n+  d2 = _mm256_permute4x64_pd (d1, 12);\n+  f2 = _mm256_permutevar8x32_ps (f1, i2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vxorps\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpermd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermpd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermps\" 1 } } */\n+"}, {"sha": "b334b88194be5591f2fbab64e62c1daa18b078dc", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-dest-false-dep-for-glc.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-dest-false-dep-for-glc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-dest-false-dep-for-glc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-dest-false-dep-for-glc.c?ref=1c2575586c47f56a2e75f734af42371579516f0c", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -mtune=generic -mtune-ctrl=dest_false_dep_for_glc -O2\" } */\n+\n+#include <immintrin.h>\n+\n+extern __m512i i1;\n+extern __m256i i2;\n+extern __m128i i3;\n+extern __m512d d1, d11;\n+extern __m256d d2;\n+extern __m128d d3, d33;\n+extern __m512 f1, f11;\n+extern __m256 f2;\n+extern __m128 f3, f33;\n+\n+__mmask32 m32;\n+__mmask16 m16;\n+__mmask8 m8;\n+\n+void mullo_test (void)\n+{\n+  i1 = _mm512_mullo_epi64 (i1, i1);\n+  i1 = _mm512_mask_mullo_epi64 (i1, m8, i1, i1);\n+  i1 = _mm512_maskz_mullo_epi64 (m8, i1, i1);\n+  i2 = _mm256_mullo_epi64 (i2, i2);\n+  i2 = _mm256_mask_mullo_epi64 (i2, m8, i2, i2);\n+  i2 = _mm256_maskz_mullo_epi64 (m8, i2, i2);\n+  i3 = _mm_mullo_epi64 (i3, i3);\n+  i3 = _mm_mask_mullo_epi64 (i3, m8, i3, i3);\n+  i3 = _mm_maskz_mullo_epi64 (m8, i3, i3);\n+}\n+\n+void range_test (void)\n+{\n+  d1 = _mm512_range_pd (d1, d11, 15);\n+  d11 = _mm512_range_round_pd (d11, d1, 15, 8);\n+  d1 = _mm512_mask_range_pd (d1, m8, d11, d11, 15);\n+  d11 = _mm512_mask_range_round_pd (d11, m8, d1, d1, 15, 8);\n+  d1 = _mm512_maskz_range_pd (m8, d11, d11, 15);\n+  d11 = _mm512_maskz_range_round_pd (m8, d1, d1, 15, 8);\n+  d2 = _mm256_range_pd (d2, d2, 15);\n+  d2 = _mm256_mask_range_pd (d2, m8, d2, d2, 15);\n+  d2 = _mm256_maskz_range_pd (m8, d2, d2, 15);\n+  d3 = _mm_range_pd (d3, d3, 15);\n+  d3 = _mm_mask_range_pd (d3, m8, d3, d3, 15);\n+  d3 = _mm_maskz_range_pd (m8, d3, d3, 15);\n+  d33 = _mm_range_sd (d33, d33, 15);\n+  d33 = _mm_mask_range_sd (d33, m8, d33, d33, 15);\n+  d33 = _mm_maskz_range_sd (m8, d33, d33, 15);\n+\n+  f1 = _mm512_range_ps (f1, f11, 15);\n+  f11 = _mm512_range_round_ps (f11, f1, 15, 8);\n+  f1 = _mm512_mask_range_ps (f1, m16, f11, f11, 15);\n+  f11 = _mm512_mask_range_round_ps (f11, m16, f1, f1, 15, 8);\n+  f1 = _mm512_maskz_range_ps (m16, f11, f11, 15);\n+  f11 = _mm512_maskz_range_round_ps (m16, f1, f1, 15, 8);\n+  f2 = _mm256_range_ps (f2, f2, 15);\n+  f2 = _mm256_mask_range_ps (f2, m8, f2, f2, 15);\n+  f2 = _mm256_maskz_range_ps (m8, f2, f2, 15);\n+  f3 = _mm_range_ps (f3, f3, 15);\n+  f3 = _mm_mask_range_ps (f3, m8, f3, f3, 15);\n+  f3 = _mm_maskz_range_ps (m8, f3, f3, 15);\n+  f33 = _mm_range_ss (f33, f33, 15);\n+  f33 = _mm_mask_range_ss (f33, m8, f33, f33, 15);\n+  f33 = _mm_maskz_range_ss (m8, f33, f33, 15);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vxorps\" 26 } } */\n+/* { dg-final { scan-assembler-times \"vpmullq\" 9 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\" 12 } } */\n+/* { dg-final { scan-assembler-times \"vrangesd\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\" 12 } } */\n+/* { dg-final { scan-assembler-times \"vrangess\" 3 } } */"}, {"sha": "26e4ba7e9696da97d089df85e990873a517448ff", "filename": "gcc/testsuite/gcc.target/i386/avx512f-dest-false-dep-for-glc.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-dest-false-dep-for-glc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-dest-false-dep-for-glc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-dest-false-dep-for-glc.c?ref=1c2575586c47f56a2e75f734af42371579516f0c", "patch": "@@ -0,0 +1,103 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -mtune=generic -mtune-ctrl=dest_false_dep_for_glc -O2\" } */\n+\n+#include <immintrin.h>\n+\n+extern __m512i i1, i2, i3;\n+extern __m512d d1, d11, *pd1;\n+extern __m128d d2;\n+extern __m512 f1, *pf1;\n+extern __m128 f2;\n+volatile __m512d *pd11;\n+\n+__mmask16 m16;\n+__mmask8 m8;\n+\n+void vperm_test (void)\n+{\n+  d1 = _mm512_permutex_pd (d1, 12);\n+  d1 = _mm512_mask_permutex_pd (d1, m8, d1, 13);\n+  d1 = _mm512_maskz_permutex_pd (m8, d1, 14);\n+  d11 = _mm512_permutexvar_pd (i1, d11);\n+  d11 = _mm512_mask_permutexvar_pd (d11, m8, i2, d11);\n+  d11 = _mm512_maskz_permutexvar_pd (m8, i3, d11);\n+\n+  f1 = _mm512_permutexvar_ps (i1, f1);\n+  f1 = _mm512_mask_permutexvar_ps (f1, m16, i1, f1);\n+  f1 = _mm512_maskz_permutexvar_ps (m16, i1, f1);\n+\n+  i3 = _mm512_permutexvar_epi64 (i3, i3);\n+  i3 = _mm512_mask_permutexvar_epi64 (i3, m8, i1, i1);\n+  i3 = _mm512_maskz_permutexvar_epi64 (m8, i3, i1);\n+  i1 = _mm512_permutex_epi64 (i3, 12);\n+  i1 = _mm512_mask_permutex_epi64 (i1, m8, i1, 12);\n+  i1 = _mm512_maskz_permutex_epi64 (m8, i1, 12);\n+\n+  i2 = _mm512_permutexvar_epi32 (i2, i2);\n+  i2 = _mm512_mask_permutexvar_epi32 (i2, m16, i2, i2);\n+  i3 = _mm512_maskz_permutexvar_epi32 (m16, i3, i3);\n+} \n+\n+void getmant_test (void)\n+{\n+  d1 = _mm512_getmant_pd (*pd1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t  _MM_MANT_SIGN_src);\n+  d1 = _mm512_getmant_round_pd (*pd11, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t_MM_MANT_SIGN_src, 8);\n+  d1 = _mm512_mask_getmant_pd (d1, m8, *pd1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t       _MM_MANT_SIGN_src);\n+  d1 = _mm512_mask_getmant_round_pd (d1, m8, *pd1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t     _MM_MANT_SIGN_src, 8);\n+  d1 = _mm512_maskz_getmant_pd (m8, *pd1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t_MM_MANT_SIGN_src);\n+  d1 = _mm512_maskz_getmant_round_pd (m8, *pd1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t      _MM_MANT_SIGN_src, 8);\n+  f1 = _mm512_getmant_ps (*pf1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t  _MM_MANT_SIGN_src);\n+  f1 = _mm512_getmant_round_ps (*pf1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t_MM_MANT_SIGN_src, 8);\n+  f1 = _mm512_mask_getmant_ps (f1, m16, *pf1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t       _MM_MANT_SIGN_src);\n+  f1 = _mm512_mask_getmant_round_ps (f1, m16, *pf1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t     _MM_MANT_SIGN_src, 8);\n+  f1 = _mm512_maskz_getmant_ps (m16, *pf1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t_MM_MANT_SIGN_src);\n+  f1 = _mm512_maskz_getmant_round_ps (m16, *pf1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t      _MM_MANT_SIGN_src, 8);\n+\n+  d2 = _mm_getmant_sd (d2, d2, _MM_MANT_NORM_p75_1p5,\n+\t\t       _MM_MANT_SIGN_src);\n+  d2 = _mm_getmant_round_sd (d2, d2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t     _MM_MANT_SIGN_src, 8);\n+  d2 = _mm_mask_getmant_sd (d2, m8, d2, d2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t    _MM_MANT_SIGN_src);\n+  d2 = _mm_mask_getmant_round_sd (d2, m8, d2, d2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t  _MM_MANT_SIGN_src, 8);\n+  d2 = _mm_maskz_getmant_sd (m8, d2, d2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t     _MM_MANT_SIGN_src);\n+  d2 = _mm_maskz_getmant_round_sd (m8, d2, d2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t   _MM_MANT_SIGN_src, 8);\n+  f2 = _mm_getmant_ss (f2, f2, _MM_MANT_NORM_p75_1p5,\n+\t\t       _MM_MANT_SIGN_src);\n+  f2 = _mm_getmant_round_ss (f2, f2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t     _MM_MANT_SIGN_src, 8);\n+  f2 = _mm_mask_getmant_ss (f2, m8, f2, f2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t    _MM_MANT_SIGN_src);\n+  f2 = _mm_mask_getmant_round_ss (f2, m8, f2, f2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t  _MM_MANT_SIGN_src, 8);\n+  f2 = _mm_maskz_getmant_ss (m8, f2, f2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t     _MM_MANT_SIGN_src);\n+  f2 = _mm_maskz_getmant_round_ss (m8, f2, f2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t   _MM_MANT_SIGN_src, 8);\n+\n+}\n+\n+/* { dg-final { scan-assembler-times \"vxorps\" 22 } } */\n+/* { dg-final { scan-assembler-times \"vpermd\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermq\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vpermps\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermpd\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantpd\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantps\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsd\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantss\" 6 } } */"}, {"sha": "990d65b09044693c556f01a15edca1884e2ec998", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-dest-false-dep-for-glc.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-dest-false-dep-for-glc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-dest-false-dep-for-glc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-dest-false-dep-for-glc.c?ref=1c2575586c47f56a2e75f734af42371579516f0c", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -mtune=generic -mtune-ctrl=dest_false_dep_for_glc -O2\" } */\n+\n+#include <immintrin.h>\n+\n+extern __m512h h1;\n+extern __m256h h2;\n+extern __m128h h3;\n+\n+__mmask32 m32;\n+__mmask16 m16;\n+__mmask8 m8;\n+\n+void complex_mul_test (void)\n+{\n+  h1 = _mm512_fmul_pch (h1, h1);\n+  h1 = _mm512_fmul_round_pch (h1, h1, 8);\n+  h1 = _mm512_mask_fmul_pch (h1, m32, h1, h1);\n+  h1 = _mm512_mask_fmul_round_pch (h1, m32, h1, h1, 8);\n+  h1 = _mm512_maskz_fmul_pch (m32, h1, h1);\n+  h1 = _mm512_maskz_fmul_round_pch (m32, h1, h1, 11);\n+\n+  h3 = _mm_fmul_sch (h3, h3);\n+  h3 = _mm_fmul_round_sch (h3, h3, 8);\n+  h3 = _mm_mask_fmul_sch (h3, m8, h3, h3);\n+  h3 = _mm_mask_fmul_round_sch (h3, m8, h3, h3, 8);\n+  h3 = _mm_maskz_fmul_sch (m8, h3, h3);\n+  h3 = _mm_maskz_fmul_round_sch (m8, h3, h3, 11);\n+}\n+\n+void vgetmant_test (void)\n+{\n+  h3 = _mm_getmant_sh (h3, h3, _MM_MANT_NORM_p75_1p5,\n+\t\t       _MM_MANT_SIGN_src);\n+  h3 = _mm_mask_getmant_sh (h3, m8, h3, h3, _MM_MANT_NORM_p75_1p5,\n+\t\t\t    _MM_MANT_SIGN_src);\n+  h3 = _mm_maskz_getmant_sh (m8, h3, h3, _MM_MANT_NORM_p75_1p5,\n+\t\t\t     _MM_MANT_SIGN_src);\n+}    \n+\n+/* { dg-final { scan-assembler-times \"vxorps\" 10 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsh\" 3 } } */\n+"}, {"sha": "775d88abe0468562d5429842320fd9e5789ff943", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-dest-false-dep-for-glc.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-dest-false-dep-for-glc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-dest-false-dep-for-glc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-dest-false-dep-for-glc.c?ref=1c2575586c47f56a2e75f734af42371579516f0c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -mtune-ctrl=dest_false_dep_for_glc -O2\" } */\n+\n+#include <immintrin.h>\n+\n+extern __m256h h1;\n+extern __m128h h2;\n+\n+__mmask16 m16;\n+__mmask8 m8;\n+\n+void complex_mul_test (void)\n+{\n+  h1 = _mm256_fmul_pch (h1, h1);\n+  h1 = _mm256_mask_fmul_pch (h1, m16, h1, h1);\n+  h1 = _mm256_maskz_fmul_pch (m16, h1, h1);\n+  h2 = _mm_fmul_pch (h2, h2);\n+  h2 = _mm_mask_fmul_pch (h2, m16, h2, h2);\n+  h2 = _mm_maskz_fmul_pch (m16, h2, h2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vxorps\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\" 6 } } */\n+"}, {"sha": "37d3ba51452f324fa20c43a5029edb54fe85505c", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-dest-false-dep-for-glc.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-dest-false-dep-for-glc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2575586c47f56a2e75f734af42371579516f0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-dest-false-dep-for-glc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-dest-false-dep-for-glc.c?ref=1c2575586c47f56a2e75f734af42371579516f0c", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -mtune=generic -mavx512vl -mtune-ctrl=dest_false_dep_for_glc -O2\" } */\n+\n+\n+#include <immintrin.h>\n+\n+extern __m256i i1, i2, i3;\n+extern __m256d d1, d11, *pd1;\n+extern __m128d d2, *pd2;\n+extern __m256 f1, *pf1;\n+extern __m128 f2, *pf2;\n+\n+__mmask16 m16;\n+__mmask8 m8;\n+\n+void vperm_test (void)\n+{\n+  d1 = _mm256_permutex_pd (d1, 12);\n+  d1 = _mm256_mask_permutex_pd (d1, m8, d1, 12);\n+  d1 = _mm256_maskz_permutex_pd (m8, d1, 12);\n+  d11 = _mm256_permutexvar_pd (i1, d11);\n+  d11 = _mm256_mask_permutexvar_pd (d11, m8, i1, d11);\n+  d11 = _mm256_maskz_permutexvar_pd (m8, i1, d11);\n+\n+  f1 = _mm256_permutexvar_ps (i1, f1);\n+  f1 = _mm256_mask_permutexvar_ps (f1, m8, i1, f1);\n+  f1 = _mm256_maskz_permutexvar_ps (m8, i1, f1);\n+\n+  i1 = _mm256_permutexvar_epi64 (i1, i1);\n+  i1 = _mm256_mask_permutexvar_epi64 (i1, m8, i1, i1);\n+  i1 = _mm256_maskz_permutexvar_epi64 (m8, i1, i1);\n+  i1 = _mm256_permutex_epi64 (i1, 12);\n+  i1 = _mm256_mask_permutex_epi64 (i1, m8, i1, 12);\n+  i1 = _mm256_maskz_permutex_epi64 (m8, i1, 12);\n+\n+  i2 = _mm256_permutexvar_epi32 (i2, i2);\n+  i2 = _mm256_mask_permutexvar_epi32 (i2, m8, i2, i2);\n+  i3 = _mm256_maskz_permutexvar_epi32 (m8, i3, i3);\n+} \n+\n+void getmant_test (void)\n+{\n+  d1 = _mm256_getmant_pd (*pd1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t  _MM_MANT_SIGN_src);\n+  d1 = _mm256_mask_getmant_pd (d1, m8, *pd1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t       _MM_MANT_SIGN_src);\n+  d1 = _mm256_maskz_getmant_pd (m8, *pd1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t_MM_MANT_SIGN_src);\n+  d2 = _mm_getmant_pd (*pd2, _MM_MANT_NORM_p75_1p5,\n+\t\t       _MM_MANT_SIGN_src);\n+  d2 = _mm_mask_getmant_pd (d2, m8, *pd2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t    _MM_MANT_SIGN_src);\n+  d2 = _mm_maskz_getmant_pd (m8, *pd2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t     _MM_MANT_SIGN_src);\n+  f1 = _mm256_getmant_ps (*pf1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t  _MM_MANT_SIGN_src);\n+  f1 = _mm256_mask_getmant_ps (f1, m8, *pf1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t       _MM_MANT_SIGN_src);\n+  f1 = _mm256_maskz_getmant_ps (m8, *pf1, _MM_MANT_NORM_p75_1p5,\n+\t\t\t\t_MM_MANT_SIGN_src);\n+  f2 = _mm_getmant_ps (*pf2, _MM_MANT_NORM_p75_1p5,\n+\t\t       _MM_MANT_SIGN_src);\n+  f2 = _mm_mask_getmant_ps (f2, m8, *pf2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t    _MM_MANT_SIGN_src);\n+  f2 = _mm_maskz_getmant_ps (m8, *pf2, _MM_MANT_NORM_p75_1p5,\n+\t\t\t     _MM_MANT_SIGN_src);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vxorps\" 19 } } */\n+/* { dg-final { scan-assembler-times \"vpermpd\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vpermps\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermq\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vpermd\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantpd\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantps\" 6 } } */\n+"}]}