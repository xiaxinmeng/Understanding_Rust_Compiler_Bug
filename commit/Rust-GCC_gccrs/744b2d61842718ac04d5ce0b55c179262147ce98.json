{"sha": "744b2d61842718ac04d5ce0b55c179262147ce98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ0YjJkNjE4NDI3MThhYzA0ZDVjZTBiNTVjMTc5MjYyMTQ3Y2U5OA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2005-03-05T01:59:24Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-03-05T01:59:24Z"}, "message": "re PR c++/19797 (g++.dg/abi/inline1.C fails on hppa*-*-hpux*)\n\n\tPR c++/19797\n\t* elf.h, pa64-hpux.h, som.h (ASM_OUTPUT_EXTERNAL_REAL): Define.\n\t(ASM_OUTPUT_EXTERNAL): Call pa_hpux_asm_output_external.\n\t* pa-protos.h (pa_hpux_asm_output_external): Add prototype.\n\t* pa.c (get_plabel): Change argument to symbol_ref.  Call\n\tmaybe_get_identifier instead of get_identifier.\n\t(pa_hpux_asm_output_external, pa_hpux_file_end): New functions.\n\t(struct deferred_plabel): Replace name field with symbol field.\n\t(TARGET_ASM_FILE_END): Define as pa_hpux_file_end if\n\tASM_OUTPUT_EXTERNAL_REAL is defined.\n\t(output_global_address): Use output_addr_const for output of all\n\tsymbol_refs.\n\t(output_deferred_plabels): Use symbol_ref instead of name for address\n\toutput.\n\t* pa.h (SYMBOL_FLAG_REFERENCED, SYMBOL_REF_REFERENCED_P,\n\tASM_OUTPUT_SYMBOL_REF): New macros.\n\t* som.h (ASM_OUTPUT_EXTERNAL_LIBCALL): Use assemble_name_raw.  Update\n\tcomment.\n\t(ASM_WEAKEN_LABEL): Use targetm.asm_out.globalize_label to globalize\n\tlabel.\n\t* g++.dg/abi/vague1.C: Remove xfail hppa*-*-hpux*.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r95921", "tree": {"sha": "24488badd6a83dd0628351ad2c259f08314f16ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24488badd6a83dd0628351ad2c259f08314f16ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/744b2d61842718ac04d5ce0b55c179262147ce98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744b2d61842718ac04d5ce0b55c179262147ce98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/744b2d61842718ac04d5ce0b55c179262147ce98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744b2d61842718ac04d5ce0b55c179262147ce98/comments", "author": null, "committer": null, "parents": [{"sha": "1fb641a1e18cb92d7034ea165a11d28ada6d228e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb641a1e18cb92d7034ea165a11d28ada6d228e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb641a1e18cb92d7034ea165a11d28ada6d228e"}], "stats": {"total": 178, "additions": 150, "deletions": 28}, "files": [{"sha": "efb94bb82c73b93fc47644692ae3bf876a0a6f94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=744b2d61842718ac04d5ce0b55c179262147ce98", "patch": "@@ -1,3 +1,27 @@\n+2005-03-04  John David Anglin  <dave.danglin@nrc-cnrc.gc.ca>\n+\t    Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/19797\n+\t* elf.h, pa64-hpux.h, som.h (ASM_OUTPUT_EXTERNAL_REAL): Define.\n+\t(ASM_OUTPUT_EXTERNAL): Call pa_hpux_asm_output_external.\n+\t* pa-protos.h (pa_hpux_asm_output_external): Add prototype.\n+\t* pa.c (get_plabel): Change argument to symbol_ref.  Call\n+\tmaybe_get_identifier instead of get_identifier.\n+\t(pa_hpux_asm_output_external, pa_hpux_file_end): New functions.\n+\t(struct deferred_plabel): Replace name field with symbol field.\n+\t(TARGET_ASM_FILE_END): Define as pa_hpux_file_end if\n+\tASM_OUTPUT_EXTERNAL_REAL is defined.\n+\t(output_global_address): Use output_addr_const for output of all\n+\tsymbol_refs.\n+\t(output_deferred_plabels): Use symbol_ref instead of name for address\n+\toutput.\n+\t* pa.h (SYMBOL_FLAG_REFERENCED, SYMBOL_REF_REFERENCED_P,\n+\tASM_OUTPUT_SYMBOL_REF): New macros.\n+\t* som.h (ASM_OUTPUT_EXTERNAL_LIBCALL): Use assemble_name_raw.  Update\n+\tcomment.\n+\t(ASM_WEAKEN_LABEL): Use targetm.asm_out.globalize_label to globalize\n+\tlabel.\n+\n 2005-03-05  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* config.gcc (hppa*64*-*-hpux11*): Use pa/pa-hpux1111.h for"}, {"sha": "0fbb350c1e2e90a763c2353328168829c72440c1", "filename": "gcc/config/pa/elf.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Felf.h?ref=744b2d61842718ac04d5ce0b55c179262147ce98", "patch": "@@ -59,6 +59,8 @@ do {  \\\n    be imported as an ENTRY symbol.  */\n \n #define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) \\\n+  pa_hpux_asm_output_external ((FILE), (DECL), (NAME))\n+#define ASM_OUTPUT_EXTERNAL_REAL(FILE, DECL, NAME) \\\n   do { fputs (\"\\t.IMPORT \", FILE);\t\t\t\t\t\\\n        assemble_name_raw (FILE, NAME);\t\t\t\t\t\\\n        if (FUNCTION_NAME_P (NAME))     \t\t\t\t\t\\"}, {"sha": "065433a355bfb6923af2349ea036fb095a787288", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=744b2d61842718ac04d5ce0b55c179262147ce98", "patch": "@@ -174,6 +174,7 @@ extern void pa_asm_output_aligned_common (FILE *, const char *,\n extern void pa_asm_output_aligned_local (FILE *, const char *,\n \t\t\t\t\t unsigned HOST_WIDE_INT,\n \t\t\t\t\t unsigned int);\n+extern void pa_hpux_asm_output_external (FILE *, tree, const char *);\n \n /* Functions in varasm.c used by pa.c.  */\n extern void som_readonly_data_section (void);"}, {"sha": "fce8c8c2d7f8ae0b8e189c7315187236f341e235", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 84, "deletions": 15, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=744b2d61842718ac04d5ce0b55c179262147ce98", "patch": "@@ -126,8 +126,7 @@ static tree hppa_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static bool pa_scalar_mode_supported_p (enum machine_mode);\n static void copy_fp_args (rtx) ATTRIBUTE_UNUSED;\n static int length_fp_args (rtx) ATTRIBUTE_UNUSED;\n-static struct deferred_plabel *get_plabel (const char *)\n-     ATTRIBUTE_UNUSED;\n+static struct deferred_plabel *get_plabel (rtx) ATTRIBUTE_UNUSED;\n static inline void pa_file_start_level (void) ATTRIBUTE_UNUSED;\n static inline void pa_file_start_space (int) ATTRIBUTE_UNUSED;\n static inline void pa_file_start_file (int) ATTRIBUTE_UNUSED;\n@@ -138,6 +137,9 @@ static void pa_linux_file_start (void) ATTRIBUTE_UNUSED;\n static void pa_hpux64_gas_file_start (void) ATTRIBUTE_UNUSED;\n static void pa_hpux64_hpas_file_start (void) ATTRIBUTE_UNUSED;\n static void output_deferred_plabels (void);\n+#ifdef ASM_OUTPUT_EXTERNAL_REAL\n+static void pa_hpux_file_end (void);\n+#endif\n #ifdef HPUX_LONG_DOUBLE_LIBRARY\n static void pa_hpux_init_libfuncs (void);\n #endif\n@@ -195,7 +197,7 @@ static int last_address;\n struct deferred_plabel GTY(())\n {\n   rtx internal_label;\n-  const char *name;\n+  rtx symbol;\n };\n static GTY((length (\"n_deferred_plabels\"))) struct deferred_plabel *\n   deferred_plabels;\n@@ -245,7 +247,11 @@ static size_t n_deferred_plabels = 0;\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n #undef TARGET_ASM_FILE_END\n+#ifdef ASM_OUTPUT_EXTERNAL_REAL\n+#define TARGET_ASM_FILE_END pa_hpux_file_end\n+#else\n #define TARGET_ASM_FILE_END output_deferred_plabels\n+#endif\n \n #if !defined(USE_COLLECT2)\n #undef TARGET_ASM_CONSTRUCTOR\n@@ -5430,10 +5436,10 @@ output_global_address (FILE *file, rtx x, int round_constant)\n     x = XEXP (x, 0);\n \n   if (GET_CODE (x) == SYMBOL_REF && read_only_operand (x, VOIDmode))\n-    assemble_name (file, XSTR (x, 0));\n+    output_addr_const (file, x);\n   else if (GET_CODE (x) == SYMBOL_REF && !flag_pic)\n     {\n-      assemble_name (file, XSTR (x, 0));\n+      output_addr_const (file, x);\n       fputs (\"-$global$\", file);\n     }\n   else if (GET_CODE (x) == CONST)\n@@ -5594,21 +5600,24 @@ pa_hpux64_hpas_file_start (void)\n #undef aputs\n \n static struct deferred_plabel *\n-get_plabel (const char *fname)\n+get_plabel (rtx symbol)\n {\n+  const char *fname = XSTR (symbol, 0);\n   size_t i;\n \n   /* See if we have already put this function on the list of deferred\n      plabels.  This list is generally small, so a liner search is not\n      too ugly.  If it proves too slow replace it with something faster.  */\n   for (i = 0; i < n_deferred_plabels; i++)\n-    if (strcmp (fname, deferred_plabels[i].name) == 0)\n+    if (strcmp (fname, XSTR (deferred_plabels[i].symbol, 0)) == 0)\n       break;\n \n   /* If the deferred plabel list is empty, or this entry was not found\n      on the list, create a new entry on the list.  */\n   if (deferred_plabels == NULL || i == n_deferred_plabels)\n     {\n+      tree id;\n+\n       if (deferred_plabels == 0)\n \tdeferred_plabels = (struct deferred_plabel *)\n \t  ggc_alloc (sizeof (struct deferred_plabel));\n@@ -5620,12 +5629,13 @@ get_plabel (const char *fname)\n \n       i = n_deferred_plabels++;\n       deferred_plabels[i].internal_label = gen_label_rtx ();\n-      deferred_plabels[i].name = ggc_strdup (fname);\n+      deferred_plabels[i].symbol = symbol;\n \n-      /* Gross.  We have just implicitly taken the address of\n-\t this function, mark it as such.  */\n-      fname = targetm.strip_name_encoding (fname);\n-      TREE_SYMBOL_REFERENCED (get_identifier (fname)) = 1;\n+      /* Gross.  We have just implicitly taken the address of this\n+\t function.  Mark it in the same manner as assemble_name.  */\n+      id = maybe_get_identifier (targetm.strip_name_encoding (fname));\n+      if (id)\n+\tmark_referenced (id);\n     }\n \n   return &deferred_plabels[i];\n@@ -5649,7 +5659,7 @@ output_deferred_plabels (void)\n     {\n       (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n \t\t CODE_LABEL_NUMBER (deferred_plabels[i].internal_label));\n-      assemble_integer (gen_rtx_SYMBOL_REF (Pmode, deferred_plabels[i].name),\n+      assemble_integer (deferred_plabels[i].symbol,\n \t\t\tTARGET_64BIT ? 8 : 4, TARGET_64BIT ? 64 : 32, 1);\n     }\n }\n@@ -7470,7 +7480,7 @@ output_call (rtx insn, rtx call_dest, int sibcall)\n \t  /* ??? As far as I can tell, the HP linker doesn't support the\n \t     long pc-relative sequence described in the 64-bit runtime\n \t     architecture.  So, we use a slightly longer indirect call.  */\n-\t  struct deferred_plabel *p = get_plabel (XSTR (call_dest, 0));\n+\t  struct deferred_plabel *p = get_plabel (call_dest);\n \n \t  xoperands[0] = p->internal_label;\n \t  xoperands[1] = gen_label_rtx ();\n@@ -7599,7 +7609,7 @@ output_call (rtx insn, rtx call_dest, int sibcall)\n \t\t     essentially an inline implementation of $$dyncall.\n \t\t     We don't actually try to call $$dyncall as this is\n \t\t     as difficult as calling the function itself.  */\n-\t\t  struct deferred_plabel *p = get_plabel (XSTR (call_dest, 0));\n+\t\t  struct deferred_plabel *p = get_plabel (call_dest);\n \n \t\t  xoperands[0] = p->internal_label;\n \t\t  xoperands[1] = gen_label_rtx ();\n@@ -9492,4 +9502,63 @@ pa_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n \t  || int_size_in_bytes (type) <= 0);\n }\n \n+/* Structure to hold declaration and name of external symbols that are\n+   emitted by GCC.  We generate a vector of these symbols and output them\n+   at the end of the file if and only if SYMBOL_REF_REFERENCED_P is true.\n+   This avoids putting out names that are never really used.  */\n+\n+struct extern_symbol GTY(())\n+{\n+  tree decl;\n+  const char *name;\n+};\n+typedef struct extern_symbol *extern_symbol;\n+\n+/* Define gc'd vector type for extern_symbol.  */\n+DEF_VEC_GC_P(extern_symbol);\n+\n+/* Vector of extern_symbol pointers.  */\n+static GTY(()) VEC(extern_symbol) *extern_symbols;\n+\n+#ifdef ASM_OUTPUT_EXTERNAL_REAL\n+/* Mark DECL (name NAME) as an external reference (assembler output\n+   file FILE).  This saves the names to output at the end of the file\n+   if actually referenced.  */\n+\n+void\n+pa_hpux_asm_output_external (FILE *file, tree decl, const char *name)\n+{\n+  extern_symbol p = ggc_alloc (sizeof (struct extern_symbol));\n+\n+  gcc_assert (file == asm_out_file);\n+  p->decl = decl;\n+  p->name = name;\n+  VEC_safe_push (extern_symbol, extern_symbols, p);\n+}\n+\n+/* Output text required at the end of an assembler file.\n+   This includes deferred plabels and .import directives for\n+   all external symbols that were actually referenced.  */\n+\n+static void\n+pa_hpux_file_end (void)\n+{\n+  unsigned int i;\n+  extern_symbol p;\n+\n+  output_deferred_plabels ();\n+\n+  for (i = 0; VEC_iterate (extern_symbol, extern_symbols, i, p); i++)\n+    {\n+      tree decl = p->decl;\n+\n+      if (!TREE_ASM_WRITTEN (decl)\n+\t  && SYMBOL_REF_REFERENCED_P (XEXP (DECL_RTL (decl), 0)))\n+\tASM_OUTPUT_EXTERNAL_REAL (asm_out_file, decl, p->name);\n+    }\n+\n+  extern_symbols = NULL;\n+}\n+#endif\n+\n #include \"gt-pa.h\""}, {"sha": "30b982a0aec144eb265b7f2fe7370c86f6168baa", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=744b2d61842718ac04d5ce0b55c179262147ce98", "patch": "@@ -1262,6 +1262,13 @@ extern int may_call_alloca;\n \t     || cint_ok_for_move (INTVAL (X))))\t\t\t\\\n    && !function_label_operand (X, VOIDmode))\n \n+/* Target flags set on a symbol_ref.  */\n+\n+/* Set by ASM_OUTPUT_SYMBOL_REF when a symbol_ref is output.  */\n+#define SYMBOL_FLAG_REFERENCED (1 << SYMBOL_FLAG_MACH_DEP_SHIFT)\n+#define SYMBOL_REF_REFERENCED_P(RTX) \\\n+  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_REFERENCED) != 0)\n+\n /* Subroutines for EXTRA_CONSTRAINT.\n \n    Return 1 iff OP is a pseudo which did not get a hard register and\n@@ -1954,6 +1961,14 @@ forget_section (void)\t\t\t\t\t\t\t\\\n     fputs (xname, FILE);\t\t\\\n   } while (0)\n \n+/* This how we output the symbol_ref X.  */\n+\n+#define ASM_OUTPUT_SYMBOL_REF(FILE,X) \\\n+  do {                                                 \\\n+    SYMBOL_REF_FLAGS (X) |= SYMBOL_FLAG_REFERENCED;    \\\n+    assemble_name (FILE, XSTR (X, 0));                 \\\n+  } while (0)\n+\n /* This is how to store into the string LABEL\n    the symbol_ref name of an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class."}, {"sha": "f322e7e4b12660a2c59edf28110db449c48234d6", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=744b2d61842718ac04d5ce0b55c179262147ce98", "patch": "@@ -201,6 +201,8 @@ do {\t\t\t\t\t\t\t\t\\\n    HP assembler's .IMPORT directive but relates more directly to\n    ELF object file types.  */\n #define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\t\t\\\n+  pa_hpux_asm_output_external ((FILE), (DECL), (NAME))\n+#define ASM_OUTPUT_EXTERNAL_REAL(FILE, DECL, NAME)\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   if (FUNCTION_NAME_P (NAME))\t\t\t\t\t\\\n     ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\t\\"}, {"sha": "d937876d0e56e0d26f2de3e4cbf46a013306a015", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=744b2d61842718ac04d5ce0b55c179262147ce98", "patch": "@@ -230,6 +230,8 @@ do {\t\t\t\t\t\t\t\t\\\n    be imported as an ENTRY symbol.  */\n \n #define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) \\\n+  pa_hpux_asm_output_external ((FILE), (DECL), (NAME))\n+#define ASM_OUTPUT_EXTERNAL_REAL(FILE, DECL, NAME) \\\n   do { fputs (\"\\t.IMPORT \", FILE);\t\t\t\t\t\\\n        assemble_name_raw (FILE, NAME);\t\t\t\t\t\\\n        if (FUNCTION_NAME_P (NAME))\t\t\t\t\t\\\n@@ -239,14 +241,22 @@ do {\t\t\t\t\t\t\t\t\\\n      } while (0)\n \n /* The bogus HP assembler requires ALL external references to be\n-   \"imported\", even library calls. They look a bit different, so\n+   \"imported\", even library calls.  They look a bit different, so\n    here's this macro.\n \n    Also note not all libcall names are passed to pa_encode_section_info\n    (__main for example).  To make sure all libcall names have section\n-   info recorded in them, we do it here.  We must also ensure that\n-   we don't import a libcall that has been previously exported since\n-   the HP assembler may change an ENTRY symbol to a CODE symbol.  */\n+   info recorded in them, we do it here.\n+\n+   We must also ensure that a libcall that has been previously\n+   exported is not subsequently imported since the HP assembler may\n+   change the type from an ENTRY to a CODE symbol.  This would make\n+   the symbol local.  We are forced to use the identifier node\n+   associated with the real assembler name for this check as the\n+   symbol_ref available in ASM_DECLARE_FUNCTION_NAME is not the\n+   same as the one used here.  As a result, we can't use flags\n+   in the symbol_ref for this check.  The identifier check assumes\n+   assemble_external_libcall is called before the symbol is used.  */\n \n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, RTL) \\\n   do { const char *name;\t\t\t\t\t\t\\\n@@ -260,7 +270,7 @@ do {\t\t\t\t\t\t\t\t\\\n        if (!id || !TREE_SYMBOL_REFERENCED (id))\t\t\t\t\\\n \t {\t\t\t\t\t\t\t\t\\\n \t   fputs (\"\\t.IMPORT \", FILE);\t\t\t\t\t\\\n-\t   assemble_name (FILE, XSTR ((RTL), 0));\t\t       \t\\\n+\t   assemble_name_raw (FILE, XSTR ((RTL), 0));\t\t       \t\\\n \t   fputs (\",CODE\\n\", FILE);\t\t\t\t\t\\\n \t }\t\t\t\t\t\t\t\t\\\n      } while (0)\n@@ -357,12 +367,7 @@ do {\t\t\t\t\t\t\\\n   do { fputs (\"\\t.weak\\t\", FILE);\t\t\t\t\\\n        assemble_name (FILE, NAME);\t\t\t\t\\\n        fputc ('\\n', FILE);\t\t\t\t\t\\\n-       if (! FUNCTION_NAME_P (NAME))\t\t\t\t\\\n-\t {\t\t\t\t\t\t\t\\\n-\t   fputs (\"\\t.EXPORT \", FILE);\t\t\t\t\\\n-\t   assemble_name (FILE, NAME);\t\t\t\t\\\n-\t   fputs (\",DATA\\n\", FILE);\t\t\t\t\\\n-\t }\t\t\t\t\t\t\t\\\n+       targetm.asm_out.globalize_label (FILE, NAME);\t\t\\\n   } while (0)\n \n /* We can't handle weak aliases, and therefore can't support pragma weak."}, {"sha": "98132002b1e09e2a8004b0db8d9c816ab149e2ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=744b2d61842718ac04d5ce0b55c179262147ce98", "patch": "@@ -1,3 +1,9 @@\n+2005-03-04  John David Anglin  <dave.danglin@nrc-cnrc.gc.ca>\n+\t    Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/19797\n+\t* g++.dg/abi/vague1.C: Remove xfail hppa*-*-hpux*.\n+\n 2005-03-04  Matthew Sachs  <msachs@apple.com>\n \n \t* gcc.exp (gcc_target_compile): Put braces around"}, {"sha": "02feee9e2d4b5d8b3cb2fec858b0f672e4f22a31", "filename": "gcc/testsuite/g++.dg/abi/vague1.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvague1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744b2d61842718ac04d5ce0b55c179262147ce98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvague1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvague1.C?ref=744b2d61842718ac04d5ce0b55c179262147ce98", "patch": "@@ -3,8 +3,6 @@\n \n // Disable debug info so we don't get confused by the symbol name there.\n // { dg-options \"-g0\" }\n-// The test fails on hppa*-*-hpux* because the symbol _ZN1AIiE1tE is imported.\n-// { dg-final { scan-assembler-not \"_ZN1AIiE1tE\" { xfail hppa*-*-hpux* } } }\n \n template <class T> struct A {\n   static const T t = 0;"}]}