{"sha": "26ec4f47ba9c2d8f178bdd0b920d70708021ce29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlYzRmNDdiYTljMmQ4ZjE3OGJkZDBiOTIwZDcwNzA4MDIxY2UyOQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-05-16T15:34:46Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-05-16T15:34:46Z"}, "message": "SimpleDateFormat.java (parse): Handle non-dst time zones.\n\n\t* java/text/SimpleDateFormat.java (parse): Handle non-dst time\n\tzones.\n\nFrom-SVN: r42156", "tree": {"sha": "e90df73370796662a1701f3a31c3381056d62f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e90df73370796662a1701f3a31c3381056d62f0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26ec4f47ba9c2d8f178bdd0b920d70708021ce29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ec4f47ba9c2d8f178bdd0b920d70708021ce29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ec4f47ba9c2d8f178bdd0b920d70708021ce29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ec4f47ba9c2d8f178bdd0b920d70708021ce29/comments", "author": null, "committer": null, "parents": [{"sha": "df002c7d8fdf477dc49a6960394dd9eb6c9d8c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df002c7d8fdf477dc49a6960394dd9eb6c9d8c9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df002c7d8fdf477dc49a6960394dd9eb6c9d8c9c"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "4bb315f44be4825dfa5fd7233be40cacf30bf071", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec4f47ba9c2d8f178bdd0b920d70708021ce29/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec4f47ba9c2d8f178bdd0b920d70708021ce29/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=26ec4f47ba9c2d8f178bdd0b920d70708021ce29", "patch": "@@ -1,3 +1,8 @@\n+2001-05-16  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/text/SimpleDateFormat.java (parse): Handle non-dst time\n+\tzones.\n+\n 2001-05-15  Tom Tromey  <tromey@redhat.com>\n \n \t* java/util/GregorianCalendar.java (computeTime): Only call"}, {"sha": "80ab6ea73095de1529eaae75e3c338fbb0950a90", "filename": "libjava/java/text/SimpleDateFormat.java", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec4f47ba9c2d8f178bdd0b920d70708021ce29/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec4f47ba9c2d8f178bdd0b920d70708021ce29/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java?ref=26ec4f47ba9c2d8f178bdd0b920d70708021ce29", "patch": "@@ -518,6 +518,7 @@ public Date parse (String dateStr, ParsePosition pos)\n     // then this.equals() will no longer have the desired result.\n     Calendar theCalendar = (Calendar) calendar.clone ();\n     theCalendar.clear();\n+    boolean saw_timezone = false;\n     int quote_start = -1;\n     for (; fmt_index < fmt_max; ++fmt_index)\n       {\n@@ -635,7 +636,6 @@ public Date parse (String dateStr, ParsePosition pos)\n \t    // We need a special case for the timezone, because it\n \t    // uses a different data structure than the other cases.\n \t    is_numeric = false;\n-\t    // We don't actually use this; see below.\n \t    calendar_field = Calendar.DST_OFFSET;\n \t    String[][] zoneStrings = formatData.getZoneStrings();\n \t    int zoneCount = zoneStrings.length;\n@@ -653,8 +653,16 @@ public Date parse (String dateStr, ParsePosition pos)\n \t\tif (k != strings.length)\n \t\t  {\n \t\t    found_zone = true;\n+\t\t    saw_timezone = true;\n \t\t    TimeZone tz = TimeZone.getTimeZone (strings[0]);\n \t\t    theCalendar.setTimeZone (tz);\n+\t\t    theCalendar.set (Calendar.ZONE_OFFSET, tz.getRawOffset ());\n+\t\t    offset = 0;\n+\t\t    if (k > 2 && tz instanceof SimpleTimeZone)\n+\t\t      {\n+\t\t\tSimpleTimeZone stz = (SimpleTimeZone) tz;\n+\t\t\toffset = stz.getDSTSavings ();\n+\t\t      }\n \t\t    pos.setIndex(index + strings[k].length());\n \t\t    break;\n \t\t  }\n@@ -698,19 +706,21 @@ else if (match != null)\n \t    value = i;\n \t  }\n \telse\n-\t  value = 0;\n+\t  value = offset;\n \n \t// Assign the value and move on.\n-\tif (calendar_field != Calendar.DST_OFFSET)\n-\t  theCalendar.set(calendar_field, value);\n+\ttheCalendar.set(calendar_field, value);\n       }\n \n     try\n       {\n-\t// Clear calendar fields here to force getTime() to correctly\n-\t// respect DST in the timezone.\n-\ttheCalendar.clear (Calendar.DST_OFFSET);\n-\ttheCalendar.clear (Calendar.ZONE_OFFSET);\n+\tif (! saw_timezone)\n+\t  {\n+\t    // Use the real rules to determine whether or not this\n+\t    // particular time is in daylight savings.\n+\t    theCalendar.clear (Calendar.DST_OFFSET);\n+\t    theCalendar.clear (Calendar.ZONE_OFFSET);\n+\t  }\n         return theCalendar.getTime();\n       }\n     catch (IllegalArgumentException x)"}]}