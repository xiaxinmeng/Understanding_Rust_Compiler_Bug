{"sha": "2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQyYmQ5NDllYTA0MjU4OTFjODUwNGI0NDk2NWNiYjRiNmNjY2U1Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-09-02T11:43:19Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-09-02T11:43:19Z"}, "message": "opts.h (struct cl_option): Add warn_message field.\n\n\t* opts.h (struct cl_option): Add warn_message field.\n\t(struct cl_decoded_option): Add warn_message field.\n\t* doc/options.texi (Ignore, Warn): Document.\n\t* opt-functions.awk (needs_state_p): Don't consider aliases or\n\tignored options to need state saved.\n\t* optc-gen.awk: Handle Warn and Ignore.\n\t* opth-gen.awk: Output OPT_SPECIAL_ignore.\n\t* opts-common.c (decode_cmdline_option): Set warn_message field.\n\tHandle ignored options.\n\t(decode_cmdline_options_to_array, generate_option,\n\tgenerate_option_input_file): Set warn_message field.\n\t(read_cmdline_option): Generate warnings from warn_message field.\n\tHandle ignored options.\n\t* common.opt (Wunreachable-code, fargument-alias,\n\tfargument-noalias, fargument-noalias-global,\n\tfargument-noalias-anything, fcse-skip-blocks, fforce-addr,\n\tfloop-optimize, frerun-loop-opt, fsched2-use-traces, fsee,\n\tfstrength-reduce, ftree-store-ccp, ftree-store-copy-prop,\n\tftree-salias): Mark Ignore.\n\t* config/i386/i386.h (CC1_CPU_SPEC_1): Don't handle -mcpu,\n\t-mintel-syntax and -mno-intel-syntax here.\n\t* config/i386/i386.opt (mcpu=, mintel-syntax): Define as aliases\n\tusing Warn.\n\t* opts.c (common_handle_option): Don't handle options marked as\n\tignored.\n\t(enable_warning_as_error): Handle ignored options.\n\nc-family:\n\t* c.opt (Wimport, fall-virtual, falt-external-templates,\n\tfdefault-inline, fenum-int-equiv, fexternal-templates,\n\tfguiding-decls, fhonor-std, fhuge-objects, flabels-ok,\n\tfname-mangling-version-, fnew-abi, fnonnull-objects,\n\tfoptional-diags, fsquangle, fstrict-prototype, fthis-is-variable,\n\tfvtable-gc, fvtable-thunks, fxref): Mark with Ignore and Warn as\n\tapplicable.\n\t(fhandle-exceptions): Mark with Alias and Warn.\n\t* c-opts.c (c_common_handle_option): Don't handle options marked\n\tas ignored.\n\npo:\n\t* exgettext: Handle {} in operand of MissingArgError.  Handle\n\tWarn.\n\nFrom-SVN: r163771", "tree": {"sha": "b73424a97ff306c8f1ae185b160c05e86be29bc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b73424a97ff306c8f1ae185b160c05e86be29bc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5de8299cec99d5a056149ce23d09d3db5cbf0116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de8299cec99d5a056149ce23d09d3db5cbf0116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de8299cec99d5a056149ce23d09d3db5cbf0116"}], "stats": {"total": 355, "additions": 211, "deletions": 144}, "files": [{"sha": "fc2ceb19f2a910b41cd36f34424120d021df13c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -1,3 +1,32 @@\n+2010-09-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* opts.h (struct cl_option): Add warn_message field.\n+\t(struct cl_decoded_option): Add warn_message field.\n+\t* doc/options.texi (Ignore, Warn): Document.\n+\t* opt-functions.awk (needs_state_p): Don't consider aliases or\n+\tignored options to need state saved.\n+\t* optc-gen.awk: Handle Warn and Ignore.\n+\t* opth-gen.awk: Output OPT_SPECIAL_ignore.\n+\t* opts-common.c (decode_cmdline_option): Set warn_message field.\n+\tHandle ignored options.\n+\t(decode_cmdline_options_to_array, generate_option,\n+\tgenerate_option_input_file): Set warn_message field.\n+\t(read_cmdline_option): Generate warnings from warn_message field.\n+\tHandle ignored options.\n+\t* common.opt (Wunreachable-code, fargument-alias,\n+\tfargument-noalias, fargument-noalias-global,\n+\tfargument-noalias-anything, fcse-skip-blocks, fforce-addr,\n+\tfloop-optimize, frerun-loop-opt, fsched2-use-traces, fsee,\n+\tfstrength-reduce, ftree-store-ccp, ftree-store-copy-prop,\n+\tftree-salias): Mark Ignore.\n+\t* config/i386/i386.h (CC1_CPU_SPEC_1): Don't handle -mcpu,\n+\t-mintel-syntax and -mno-intel-syntax here.\n+\t* config/i386/i386.opt (mcpu=, mintel-syntax): Define as aliases\n+\tusing Warn.\n+\t* opts.c (common_handle_option): Don't handle options marked as\n+\tignored.\n+\t(enable_warning_as_error): Handle ignored options.\n+\n 2010-09-02  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR driver/44076"}, {"sha": "56fef0b0694ee3e30872d24a38b10fecc00f9917", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -1,3 +1,16 @@\n+2010-09-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c.opt (Wimport, fall-virtual, falt-external-templates,\n+\tfdefault-inline, fenum-int-equiv, fexternal-templates,\n+\tfguiding-decls, fhonor-std, fhuge-objects, flabels-ok,\n+\tfname-mangling-version-, fnew-abi, fnonnull-objects,\n+\tfoptional-diags, fsquangle, fstrict-prototype, fthis-is-variable,\n+\tfvtable-gc, fvtable-thunks, fxref): Mark with Ignore and Warn as\n+\tapplicable.\n+\t(fhandle-exceptions): Mark with Alias and Warn.\n+\t* c-opts.c (c_common_handle_option): Don't handle options marked\n+\tas ignored.\n+\n 2010-09-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c.opt (Wcomments, Werror-implicit-function-declaration,"}, {"sha": "e641ad029cb5fa6933d39ed7f7133d35c9cc5e88", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -537,10 +537,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \t\t\t\t value, c_family_lang_mask, kind, handlers);\n       break;\n \n-    case OPT_Wimport:\n-      /* Silently ignore for now.  */\n-      break;\n-\n     case OPT_Winvalid_pch:\n       cpp_opts->warn_invalid_pch = value;\n       break;\n@@ -623,25 +619,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \t  flag_cond_mismatch = value;\n \t  break;\n \t}\n-      /* Fall through.  */\n-\n-    case OPT_fall_virtual:\n-    case OPT_falt_external_templates:\n-    case OPT_fenum_int_equiv:\n-    case OPT_fexternal_templates:\n-    case OPT_fguiding_decls:\n-    case OPT_fhonor_std:\n-    case OPT_fhuge_objects:\n-    case OPT_flabels_ok:\n-    case OPT_fname_mangling_version_:\n-    case OPT_fnew_abi:\n-    case OPT_fnonnull_objects:\n-    case OPT_fsquangle:\n-    case OPT_fstrict_prototype:\n-    case OPT_fthis_is_variable:\n-    case OPT_fvtable_thunks:\n-    case OPT_fxref:\n-    case OPT_fvtable_gc:\n       warning (0, \"switch %qs is no longer supported\", option->opt_text);\n       break;\n \n@@ -672,10 +649,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       constant_string_class_name = arg;\n       break;\n \n-    case OPT_fdefault_inline:\n-      /* Ignore.  */\n-      break;\n-\n     case OPT_fextended_identifiers:\n       cpp_opts->extended_identifiers = value;\n       break;\n@@ -684,11 +657,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       flag_next_runtime = !value;\n       break;\n \n-    case OPT_fhandle_exceptions:\n-      warning (0, \"-fhandle-exceptions has been renamed -fexceptions (and is now on by default)\");\n-      flag_exceptions = value;\n-      break;\n-\n     case OPT_fnext_runtime:\n       flag_next_runtime = value;\n       break;\n@@ -697,10 +665,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->operator_names = value;\n       break;\n \n-    case OPT_foptional_diags:\n-      /* Ignore.  */\n-      break;\n-\n     case OPT_fpch_deps:\n       cpp_opts->restore_pch_deps = value;\n       break;"}, {"sha": "f10cc48d7564f27b69626bb8b487c93b6e43b36e", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -275,7 +275,7 @@ C ObjC Var(warn_implicit_int) Init(-1) Warning\n Warn when a declaration does not specify a type\n \n Wimport\n-C ObjC C++ ObjC++ Undocumented\n+C ObjC C++ ObjC++ Undocumented Ignore\n \n Wint-to-pointer-cast\n C ObjC C++ ObjC++ Var(warn_int_to_pointer_cast) Init(1) Warning\n@@ -534,10 +534,10 @@ C++ ObjC++ Var(flag_access_control) Init(1)\n Enforce class member access control semantics\n \n fall-virtual\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n falt-external-templates\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n Change when template instances are emitted\n \n fasm\n@@ -572,7 +572,7 @@ C++ ObjC++ Var(flag_deduce_init_list) Init(1)\n -fno-deduce-init-list\tdisable deduction of std::initializer_list for a template type parameter from a brace-enclosed initializer-list\n \n fdefault-inline\n-C++ ObjC++\n+C++ ObjC++ Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fdirectives-only\n@@ -591,7 +591,7 @@ C++ ObjC++ Var(flag_enforce_eh_specs) Init(1)\n Generate code to check exception specifications\n \n fenum-int-equiv\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n fexec-charset=\n C ObjC C++ ObjC++ Joined RejectNegative\n@@ -607,7 +607,7 @@ C ObjC C++ ObjC++ Joined RejectNegative\n \n \n fexternal-templates\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n ffor-scope\n C++ ObjC++ Var(flag_new_for_scope) Init(1)\n@@ -630,20 +630,20 @@ C ObjC Var(flag_gnu89_inline) Init(-1)\n Use traditional GNU semantics for inline functions\n \n fguiding-decls\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n fhandle-exceptions\n-C++ ObjC++ Optimization\n+C++ ObjC++ Optimization Alias(fexceptions) Warn({-fhandle-exceptions has been renamed -fexceptions (and is now on by default)})\n \n fhonor-std\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n fhosted\n C ObjC\n Assume normal C execution environment\n \n fhuge-objects\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n Enable support for huge objects\n \n fimplement-inlines\n@@ -663,7 +663,7 @@ C++ ObjC++ Var(flag_friend_injection)\n Inject friend functions into enclosing namespace\n \n flabels-ok\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n flax-vector-conversions\n C ObjC C++ ObjC++ Var(flag_lax_vector_conversions)\n@@ -674,10 +674,10 @@ C ObjC C++ ObjC++ Var(flag_ms_extensions)\n Don't warn about uses of Microsoft extensions\n \n fname-mangling-version-\n-C++ ObjC++ Joined\n+C++ ObjC++ Joined Ignore Warn(switch %qs is no longer supported)\n \n fnew-abi\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n fnext-runtime\n ObjC ObjC++\n@@ -691,7 +691,7 @@ fnonansi-builtins\n C++ ObjC++ Var(flag_no_nonansi_builtin, 0)\n \n fnonnull-objects\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n fnothrow-opt\n C++ ObjC++ Optimization Var(flag_nothrow_opt)\n@@ -731,7 +731,7 @@ C++ ObjC++\n Recognize C++ keywords like \\\"compl\\\" and \\\"xor\\\"\n \n foptional-diags\n-C++ ObjC++\n+C++ ObjC++ Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fpch-deps\n@@ -786,7 +786,7 @@ C ObjC C++ ObjC++ LTO Var(flag_signed_char)\n Make \\\"char\\\" signed by default\n \n fsquangle\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n fstats\n C++ ObjC++ Var(flag_detailed_statistics)\n@@ -797,7 +797,7 @@ C++ ObjC++ Optimization Var(flag_strict_enums)\n Assume that values of enumeration type are always within the minimum range of that type\n \n fstrict-prototype\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n ftabstop=\n C ObjC C++ ObjC++ Joined RejectNegative UInteger\n@@ -811,7 +811,7 @@ C++ ObjC++ Joined RejectNegative UInteger\n -ftemplate-depth=<number>\tSpecify maximum template instantiation depth\n \n fthis-is-variable\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n fthreadsafe-statics\n C++ ObjC++ Optimization Var(flag_threadsafe_statics) Init(1)\n@@ -842,11 +842,11 @@ C++ ObjC++ Var(flag_visibility_ms_compat)\n Changes visibility to match Microsoft Visual Studio by default\n \n fvtable-gc\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n Discard unused virtual functions\n \n fvtable-thunks\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n Implement vtables using thunks\n \n fweak\n@@ -862,7 +862,7 @@ C ObjC C++ ObjC++ Var(flag_working_directory) Init(-1)\n Generate a #line directive pointing at the current working directory\n \n fxref\n-C++ ObjC++\n+C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n Emit cross referencing information\n \n fzero-link"}, {"sha": "c5be49ea15949752da21627b6c430543a37d53af", "filename": "gcc/common.opt", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -248,7 +248,7 @@ Common Var(warn_uninitialized) Init(-1) Warning\n Warn about uninitialized automatic variables\n \n Wunreachable-code\n-Common\n+Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n Wunused\n@@ -387,19 +387,19 @@ falign-loops=\n Common RejectNegative Joined UInteger\n \n fargument-alias\n-Common\n+Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n fargument-noalias\n-Common\n+Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n fargument-noalias-global\n-Common\n+Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n fargument-noalias-anything\n-Common\n+Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n fasynchronous-unwind-tables\n@@ -490,7 +490,7 @@ Common Report Var(flag_cse_follow_jumps) Optimization\n When running CSE, follow jumps to their targets\n \n fcse-skip-blocks\n-Common\n+Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fcx-limited-range\n@@ -619,7 +619,7 @@ Common Report Var(flag_float_store) Optimization\n Don't allocate floats and doubles in extended-precision registers\n \n fforce-addr\n-Common\n+Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fforward-propagate\n@@ -852,7 +852,7 @@ Common Report Var(flag_leading_underscore) Init(-1)\n Give external symbols a leading underscore\n \n floop-optimize\n-Common\n+Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n flto\n@@ -1098,7 +1098,7 @@ Common Report Var(flag_rerun_cse_after_loop) Init(2) Optimization\n Add a common subexpression elimination pass after loop optimizations\n \n frerun-loop-opt\n-Common\n+Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n frounding-math\n@@ -1134,7 +1134,7 @@ Common Report Var(flag_sched2_use_superblocks) Optimization\n If scheduling post reload, do superblock scheduling\n \n fsched2-use-traces\n-Common\n+Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fschedule-insns\n@@ -1219,7 +1219,7 @@ Common Report Var(flag_section_anchors) Optimization\n Access data in the same section from shared anchor points\n \n fsee\n-Common\n+Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fzee\n@@ -1286,7 +1286,7 @@ Common RejectNegative Var(flag_stack_usage)\n Output stack usage information on a per-function basis\n \n fstrength-reduce\n-Common\n+Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n ; Nonzero if we should do (language-dependent) alias analysis.\n@@ -1349,7 +1349,7 @@ Common Report Var(flag_tree_bit_ccp) Optimization\n Enable SSA-BIT-CCP optimization on trees\n \n ftree-store-ccp\n-Common\n+Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n ftree-ch\n@@ -1365,7 +1365,7 @@ Common Report Var(flag_tree_copy_prop) Optimization\n Enable copy propagation on trees\n \n ftree-store-copy-prop\n-Common\n+Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n ftree-cselim\n@@ -1441,7 +1441,7 @@ Common Report Var(flag_tree_reassoc) Init(1) Optimization\n Enable reassociation on tree level\n \n ftree-salias\n-Common\n+Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n ftree-sink"}, {"sha": "5bd41539c4aabd1c4d260d54318fddb634fedbd6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -555,15 +555,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #ifndef CC1_CPU_SPEC\n #define CC1_CPU_SPEC_1 \"\\\n-%{mcpu=*:-mtune=%* \\\n-%n`-mcpu=' is deprecated. Use `-mtune=' or '-march=' instead.\\n} \\\n-%<mcpu=* \\\n-%{mintel-syntax:-masm=intel \\\n-%n`-mintel-syntax' is deprecated. Use `-masm=intel' instead.\\n} \\\n %{msse5:-mavx \\\n-%n'-msse5' was removed.\\n} \\\n-%{mno-intel-syntax:-masm=att \\\n-%n`-mno-intel-syntax' is deprecated. Use `-masm=att' instead.\\n}\"\n+%n'-msse5' was removed.\\n}\"\n \n #ifndef HAVE_LOCAL_CPU_DETECT\n #define CC1_CPU_SPEC CC1_CPU_SPEC_1"}, {"sha": "8009830ebfe7b97b113d23ef8a0d505d8781178a", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -1,6 +1,7 @@\n ; Options for the IA-32 and AMD64 ports of the compiler.\n \n-; Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2006, 2007, 2008, 2009,\n+; 2010 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -112,6 +113,9 @@ mcmodel=\n Target RejectNegative Joined Var(ix86_cmodel_string)\n Use given x86-64 code model\n \n+mcpu=\n+Target RejectNegative Joined Undocumented Alias(mtune=) Warn(%<-mcpu=%> is deprecated; use %<-mtune=%> or %<-march=%> instead)\n+\n mfancy-math-387\n Target RejectNegative Report InverseMask(NO_FANCY_MATH_387, USE_FANCY_MATH_387) Save\n Generate sin, cos, sqrt for FPU\n@@ -145,7 +149,7 @@ Target Report Mask(INLINE_STRINGOPS_DYNAMICALLY) Save\n Inline memset/memcpy string operations, but perform inline version only for small blocks\n \n mintel-syntax\n-Target Undocumented\n+Target Undocumented Alias(masm=, intel, att) Warn(%<-mintel-syntax%> and %<-mno-intel-syntax%> are deprecated; use %<-masm=intel%> and %<-masm=att%> instead)\n ;; Deprecated\n \n mms-bitfields"}, {"sha": "d7a18af7ef4bed2d111fed9d4750c4888d86a5e5", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -273,6 +273,19 @@ not need to handle it and no @samp{OPT_} enumeration value is defined\n for it; only the canonical form of the option will be seen in those\n places.\n \n+@item Ignore\n+This option is ignored apart from printing any warning specified using\n+@code{Warn}.  The option will not be seen by specs and no @samp{OPT_}\n+enumeration value is defined for it.\n+\n+@item Warn(@var{message})\n+If this option is used, output the warning @var{message}.\n+@var{message} is a format string, either taking a single operand with\n+a @samp{%qs} format which is the option name, or not taking any\n+operands, which is passed to the @samp{warning} function.  If an alias\n+is marked @code{Warn}, the target of the alias must not also be marked\n+@code{Warn}.\n+\n @item Report\n The state of the option should be printed by @option{-fverbose-asm}.\n "}, {"sha": "94816a2d363af58bc5a7c0a794fd84dbab5e7dee", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -114,7 +114,9 @@ function global_state_p(flags)\n # associated with it.\n function needs_state_p(flags)\n {\n-\treturn flag_set_p(\"Target\", flags)\n+\treturn (flag_set_p(\"Target\", flags) \\\n+\t\t&& !flag_set_p(\"Alias.*\", flags) \\\n+\t\t&& !flag_set_p(\"Ignore\", flags))\n }\n \n # If FLAGS describes an option that needs a static state variable,"}, {"sha": "bee780c0b638647384c28ffbbd8732c72aeb9636", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -201,9 +201,19 @@ for (i = 0; i < n_opts; i++) {\n \telse\n \t\tmissing_arg_error = quote missing_arg_error quote\n \n+\n+\twarn_message = opt_args(\"Warn\", flags[i])\n+\tif (warn_message == \"\")\n+\t\twarn_message = \"0\"\n+\telse\n+\t\twarn_message = quote warn_message quote\n+\n \talias_arg = opt_args(\"Alias\", flags[i])\n \tif (alias_arg == \"\") {\n-\t\talias_data = \"NULL, NULL, N_OPTS\"\n+\t\tif (flag_set_p(\"Ignore\", flags[i]))\n+\t\t\talias_data = \"NULL, NULL, OPT_SPECIAL_ignore\"\n+\t\telse\n+\t\t\talias_data = \"NULL, NULL, N_OPTS\"\n \t} else {\n \t\talias_opt = nth_arg(0, alias_arg)\n \t\talias_posarg = nth_arg(1, alias_arg)\n@@ -246,8 +256,8 @@ for (i = 0; i < n_opts; i++) {\n \t}\n \t# Split the printf after %u to work around an ia64-hp-hpux11.23\n \t# awk bug.\n-\tprintf(\"  { %c-%s%c,\\n    %s,\\n    %s,\\n    %s, %s, %u,\",\n-\t       quote, opts[i], quote, hlp, missing_arg_error,\n+\tprintf(\"  { %c-%s%c,\\n    %s,\\n    %s,\\n    %s,\\n    %s, %s, %u,\",\n+\t       quote, opts[i], quote, hlp, missing_arg_error, warn_message,\n \t       alias_data, back_chain[i], len)\n \tprintf(\" %d,\\n\", idx)\n \tcondition = opt_args(\"Condition\", flags[i])"}, {"sha": "9d3ea9e67b0528126fcf479670a37966395907d6", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -369,6 +369,7 @@ for (i = 0; i < n_opts; i++) {\n \n print \"  N_OPTS,\"\n print \"  OPT_SPECIAL_unknown,\"\n+print \"  OPT_SPECIAL_ignore,\"\n print \"  OPT_SPECIAL_program_name,\"\n print \"  OPT_SPECIAL_input_file\"\n print \"};\""}, {"sha": "40822a7bde14f5c10db5cbfe8f5e6e75e8a7ecc6", "filename": "gcc/opts-common.c", "status": "modified", "additions": 69, "deletions": 39, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -214,6 +214,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   char *p;\n   const struct cl_option *option;\n   int errors = 0;\n+  const char *warn_message = NULL;\n   bool separate_arg_flag;\n   bool joined_arg_flag;\n \n@@ -254,6 +255,8 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n       goto done;\n     }\n \n+  warn_message = option->warn_message;\n+\n   /* Check to see if the option is disabled for this configuration.  */\n   if (option->flags & CL_DISABLED)\n     errors |= CL_ERR_DISABLED;\n@@ -300,55 +303,73 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   if (arg == NULL && (separate_arg_flag || joined_arg_flag))\n     errors |= CL_ERR_MISSING_ARG;\n \n-  /* Is this option an alias?  */\n+  /* Is this option an alias (or an ignored option, marked as an alias\n+     of OPT_SPECIAL_ignore)?  */\n   if (option->alias_target != N_OPTS)\n     {\n       size_t new_opt_index = option->alias_target;\n-      const struct cl_option *new_option = &cl_options[new_opt_index];\n-\n-      /* The new option must not be an alias itself.  */\n-      gcc_assert (new_option->alias_target == N_OPTS);\n \n-      if (option->neg_alias_arg)\n+      if (new_opt_index == OPT_SPECIAL_ignore)\n \t{\n-\t  gcc_assert (option->alias_arg != NULL);\n-\t  gcc_assert (arg == NULL);\n-\t  if (value)\n-\t    arg = option->alias_arg;\n-\t  else\n-\t    arg = option->neg_alias_arg;\n+\t  gcc_assert (option->alias_arg == NULL);\n+\t  gcc_assert (option->neg_alias_arg == NULL);\n+\t  opt_index = new_opt_index;\n+\t  arg = NULL;\n \t  value = 1;\n \t}\n-      else if (option->alias_arg)\n+      else\n \t{\n-\t  gcc_assert (value == 1);\n-\t  gcc_assert (arg == NULL);\n-\t  arg = option->alias_arg;\n-\t}\n+\t  const struct cl_option *new_option = &cl_options[new_opt_index];\n \n-      opt_index = new_opt_index;\n-      option = new_option;\n+\t  /* The new option must not be an alias itself.  */\n+\t  gcc_assert (new_option->alias_target == N_OPTS);\n \n-      if (value == 0)\n-\tgcc_assert (!(option->flags & CL_REJECT_NEGATIVE));\n+\t  if (option->neg_alias_arg)\n+\t    {\n+\t      gcc_assert (option->alias_arg != NULL);\n+\t      gcc_assert (arg == NULL);\n+\t      if (value)\n+\t\targ = option->alias_arg;\n+\t      else\n+\t\targ = option->neg_alias_arg;\n+\t      value = 1;\n+\t    }\n+\t  else if (option->alias_arg)\n+\t    {\n+\t      gcc_assert (value == 1);\n+\t      gcc_assert (arg == NULL);\n+\t      arg = option->alias_arg;\n+\t    }\n \n-      /* Recompute what arguments are allowed.  */\n-      separate_arg_flag = ((option->flags & CL_SEPARATE)\n-\t\t\t   && !((option->flags & CL_NO_DRIVER_ARG)\n-\t\t\t\t&& (lang_mask & CL_DRIVER)));\n-      joined_arg_flag = (option->flags & CL_JOINED) != 0;\n+\t  opt_index = new_opt_index;\n+\t  option = new_option;\n \n-      if (!(errors & CL_ERR_MISSING_ARG))\n-\t{\n-\t  if (separate_arg_flag || joined_arg_flag)\n-\t    gcc_assert (arg != NULL);\n-\t  else\n-\t    gcc_assert (arg == NULL);\n-\t}\n+\t  if (value == 0)\n+\t    gcc_assert (!(option->flags & CL_REJECT_NEGATIVE));\n+\n+\t  /* Recompute what arguments are allowed.  */\n+\t  separate_arg_flag = ((option->flags & CL_SEPARATE)\n+\t\t\t       && !((option->flags & CL_NO_DRIVER_ARG)\n+\t\t\t\t    && (lang_mask & CL_DRIVER)));\n+\t  joined_arg_flag = (option->flags & CL_JOINED) != 0;\n+\n+\t  if (!(errors & CL_ERR_MISSING_ARG))\n+\t    {\n+\t      if (separate_arg_flag || joined_arg_flag)\n+\t\tgcc_assert (arg != NULL);\n+\t      else\n+\t\tgcc_assert (arg == NULL);\n+\t    }\n \n-      /* Recheck for disabled options.  */\n-      if (option->flags & CL_DISABLED)\n-\terrors |= CL_ERR_DISABLED;\n+\t  /* Recheck for warnings and disabled options.  */\n+\t  if (option->warn_message)\n+\t    {\n+\t      gcc_assert (warn_message == NULL);\n+\t      warn_message = option->warn_message;\n+\t    }\n+\t  if (option->flags & CL_DISABLED)\n+\t    errors |= CL_ERR_DISABLED;\n+\t}\n     }\n \n   /* Check if this is a switch for a different front end.  */\n@@ -370,6 +391,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   decoded->arg = arg;\n   decoded->value = value;\n   decoded->errors = errors;\n+  decoded->warn_message = warn_message;\n \n   if (opt_index == OPT_SPECIAL_unknown)\n     {\n@@ -408,7 +430,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n       else\n \tdecoded->canonical_option[i] = NULL;\n     }\n-  if (opt_index != OPT_SPECIAL_unknown)\n+  if (opt_index != OPT_SPECIAL_unknown && opt_index != OPT_SPECIAL_ignore)\n     generate_canonical_option (opt_index, arg, value, decoded);\n   decoded->orig_option_with_args_text = p = XNEWVEC (char, total_len);\n   for (i = 0; i < result; i++)\n@@ -448,6 +470,7 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n   opt_array = XNEWVEC (struct cl_decoded_option, argc);\n \n   opt_array[0].opt_index = OPT_SPECIAL_program_name;\n+  opt_array[0].warn_message = NULL;\n   opt_array[0].arg = argv[0];\n   opt_array[0].orig_option_with_args_text = argv[0];\n   opt_array[0].canonical_option_num_elements = 1;\n@@ -678,6 +701,7 @@ generate_option (size_t opt_index, const char *arg, int value,\n   const struct cl_option *option = &cl_options[opt_index];\n \n   decoded->opt_index = opt_index;\n+  decoded->warn_message = NULL;\n   decoded->arg = arg;\n   decoded->value = value;\n   decoded->errors = (option_ok_for_language (option, lang_mask)\n@@ -709,6 +733,7 @@ generate_option_input_file (const char *file,\n \t\t\t    struct cl_decoded_option *decoded)\n {\n   decoded->opt_index = OPT_SPECIAL_input_file;\n+  decoded->warn_message = NULL;\n   decoded->arg = file;\n   decoded->orig_option_with_args_text = file;\n   decoded->canonical_option_num_elements = 1;\n@@ -729,7 +754,10 @@ read_cmdline_option (struct cl_decoded_option *decoded,\n \t\t     const struct cl_option_handlers *handlers)\n {\n   const struct cl_option *option;\n-  const char *opt;\n+  const char *opt = decoded->orig_option_with_args_text;\n+\n+  if (decoded->warn_message)\n+    warning (0, decoded->warn_message, opt);\n \n   if (decoded->opt_index == OPT_SPECIAL_unknown)\n     {\n@@ -738,8 +766,10 @@ read_cmdline_option (struct cl_decoded_option *decoded,\n       return;\n     }\n \n+  if (decoded->opt_index == OPT_SPECIAL_ignore)\n+    return;\n+\n   option = &cl_options[decoded->opt_index];\n-  opt = decoded->orig_option_with_args_text;\n \n   if (decoded->errors & CL_ERR_DISABLED)\n     {"}, {"sha": "e59332f68f8265e68cfb33c3bee36b68131668a3", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -2081,24 +2081,6 @@ common_handle_option (const struct cl_decoded_option *decoded,\n       global_dc->inhibit_warnings = true;\n       break;\n \n-    case OPT_fsee:\n-    case OPT_fcse_skip_blocks:\n-    case OPT_floop_optimize:\n-    case OPT_frerun_loop_opt:\n-    case OPT_fsched2_use_traces:\n-    case OPT_fstrength_reduce:\n-    case OPT_ftree_store_copy_prop:\n-    case OPT_fforce_addr:\n-    case OPT_ftree_salias:\n-    case OPT_ftree_store_ccp:\n-    case OPT_Wunreachable_code:\n-    case OPT_fargument_alias:\n-    case OPT_fargument_noalias:\n-    case OPT_fargument_noalias_anything:\n-    case OPT_fargument_noalias_global:\n-      /* These are no-ops, preserved for backward compatibility.  */\n-      break;\n-\n     case OPT_fuse_linker_plugin:\n       /* No-op. Used by the driver and passed to us because it starts with f.*/\n       break;\n@@ -2363,6 +2345,8 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n \n       if (option->alias_target != N_OPTS)\n \toption_index = option->alias_target;\n+      if (option_index == OPT_SPECIAL_ignore)\n+\treturn;\n       diagnostic_classify_diagnostic (global_dc, option_index, kind,\n \t\t\t\t      UNKNOWN_LOCATION);\n       if (kind == DK_ERROR)"}, {"sha": "09e305b225b6682e72897a1a14444282f72f24f1", "filename": "gcc/opts.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -45,6 +45,7 @@ struct cl_option\n   const char *opt_text;\n   const char *help;\n   const char *missing_argument_error;\n+  const char *warn_message;\n   const char *alias_arg;\n   const char *neg_alias_arg;\n   unsigned short alias_target;\n@@ -117,6 +118,9 @@ struct cl_decoded_option\n      non-options and unknown options.  */\n   size_t opt_index;\n \n+  /* Any warning to give for use of this option, or NULL if none.  */\n+  const char *warn_message;\n+\n   /* The string argument, or NULL if none.  For OPT_SPECIAL_* cases,\n      the option or non-option command-line argument.  */\n   const char *arg;"}, {"sha": "66d0152edd0beec19006be87967160959e0a1867", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -1,3 +1,8 @@\n+2010-09-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* exgettext: Handle {} in operand of MissingArgError.  Handle\n+\tWarn.\n+\n 2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* exgettext: Also extract MissingArgError texts from .opt files."}, {"sha": "6cc9156e58f59f28a7b18a7c645b42da94338371", "filename": "gcc/po/exgettext", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fpo%2Fexgettext", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bd949ea0425891c8504b44965cbb4b6ccce5f/gcc%2Fpo%2Fexgettext", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fexgettext?ref=2d2bd949ea0425891c8504b44965cbb4b6ccce5f", "patch": "@@ -226,7 +226,22 @@ echo \"scanning option files...\" >&2\n \t    if ((field == 1) && /MissingArgError/) {\n \t\tline = $0\n \t\tsub(\".*MissingArgError\\\\(\", \"\", line)\n-\t\tsub(\"\\\\).*\", \"\", line)\n+\t\tif (line ~ \"^{\") {\n+\t\t\tsub(\"^{\", \"\", line)\n+\t\t\tsub(\"}\\\\).*\", \"\", line)\n+\t\t} else\n+\t\t\tsub(\"\\\\).*\", \"\", line)\n+\t\tprintf(\"#line %d \\\"%s\\\"\\n\", lineno, file)\n+\t\tprintf(\"_(\\\"%s\\\")\\n\", line)\n+\t    }\n+\t    if ((field == 1) && /Warn/) {\n+\t\tline = $0\n+\t\tsub(\".*Warn\\\\(\", \"\", line)\n+\t\tif (line ~ \"^{\") {\n+\t\t\tsub(\"^{\", \"\", line)\n+\t\t\tsub(\"}\\\\).*\", \"\", line)\n+\t\t} else\n+\t\t\tsub(\"\\\\).*\", \"\", line)\n \t\tprintf(\"#line %d \\\"%s\\\"\\n\", lineno, file)\n \t\tprintf(\"_(\\\"%s\\\")\\n\", line)\n \t    }"}]}