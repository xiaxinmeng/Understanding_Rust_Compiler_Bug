{"sha": "9e51149de67a1f3cb79bf03c39b4fbeeb0718d89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1MTE0OWRlNjdhMWYzY2I3OWJmMDNjMzliNGZiZWViMDcxOGQ4OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-10-02T19:47:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-10-02T19:47:34Z"}, "message": "* config/i386/i386.md (divmod<mode>4) Macroize expander from\n\tdivmoddi4, divmodsi4 and divmodhi4 patterns using SWI248 macro.\n\t(*divmod<mode>4): Macroize insn_and_split pattern from\n\t*divmoddi4_cltd_rex64, *divmodsi4_cltd and divmodhi4 insn patterns\n\tand their corresponding splitters usign SWI248 macro.  Split SImode\n\tinsn to generate cltd and DImode insn to generate cqto instead of\n\tmove+shift when optimizing for size or TARGET_USE_CLTD is in effect.\n\t(*divmoddi4_nocltd_rex64, *divmodsi4_nocltd): Remove insn patterns.\n\t(*divmod<mode>4_noext): Macroize insn from *divmoddi_noext_rex64 and\n\t*divmodsi_noext patterns using SWI248 macro.\n\t(udivmod<mode>4): Macroize expander from udivmoddi4, udivmodsi4 and\n\tudivmodhi4 patterns using SWI248 macro.\n\t(*udivmod<mode>4): Macroize insn_and_split pattern from\n\t*udivmoddi4, udivmodsi4 and udivmodhi4 patterns and their\n\tcorresponding splitters using SWI248 macro.\n\t(*udivmod<mode>4_noext): Macroize insn from *udivmoddi4_noext,\n\t*udivmodsi4_noext and *udivmodhi_noext patterns using SWI248 macro.\n\nFrom-SVN: r152416", "tree": {"sha": "6ed5976610f198b80ac87c79b19da35829ad85f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ed5976610f198b80ac87c79b19da35829ad85f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89/comments", "author": null, "committer": null, "parents": [{"sha": "c2ce8cdc82051800c389c16725365e91986f89c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2ce8cdc82051800c389c16725365e91986f89c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2ce8cdc82051800c389c16725365e91986f89c5"}], "stats": {"total": 374, "additions": 104, "deletions": 270}, "files": [{"sha": "5f955aea2a0ee5c8917c242dfd3da7fec4af076e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e51149de67a1f3cb79bf03c39b4fbeeb0718d89", "patch": "@@ -1,3 +1,23 @@\n+2009-10-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (divmod<mode>4) Macroize expander from\n+\tdivmoddi4, divmodsi4 and divmodhi4 patterns using SWI248 macro.\n+\t(*divmod<mode>4): Macroize insn_and_split pattern from\n+\t*divmoddi4_cltd_rex64, *divmodsi4_cltd and divmodhi4 insn patterns\n+\tand their corresponding splitters usign SWI248 macro.  Split SImode\n+\tinsn to generate cltd and DImode insn to generate cqto instead of\n+\tmove+shift when optimizing for size or TARGET_USE_CLTD is in effect.\n+\t(*divmoddi4_nocltd_rex64, *divmodsi4_nocltd): Remove insn patterns.\n+\t(*divmod<mode>4_noext): Macroize insn from *divmoddi_noext_rex64 and\n+\t*divmodsi_noext patterns using SWI248 macro.\n+\t(udivmod<mode>4): Macroize expander from udivmoddi4, udivmodsi4 and\n+\tudivmodhi4 patterns using SWI248 macro.\n+\t(*udivmod<mode>4): Macroize insn_and_split pattern from\n+\t*udivmoddi4, udivmodsi4 and udivmodhi4 patterns and their\n+\tcorresponding splitters using SWI248 macro.\n+\t(*udivmod<mode>4_noext): Macroize insn from *udivmoddi4_noext,\n+\t*udivmodsi4_noext and *udivmodhi_noext patterns using SWI248 macro.\n+\n 2009-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* stor-layout.c (layout_type) <ARRAY_TYPE>: Make sure that an array\n@@ -36,7 +56,7 @@\n \n 2009-10-02  Andreas Schwab  <schwab@linux-m68k.org>\n \t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n- \n+\n \t* config/m68k/lb1sf68.asm (PICCALL): Use variable sized branch.\n \n 2009-10-02  Nick Clifton  <nickc@redhat.com>\n@@ -89,12 +109,12 @@\n \tPR c++/41503\n \t* cp/pt.c (function_parameter_expanded_from_pack_p): Return false if\n \tDECL_ARTIFICIAL (param_decl) is true.\n-\t\n+\n 2009-09-30  Gabriel Dos Reis  <gdr@cs.tamu.edu>\n \n \t* tree.h (tree_decl_common::lang_flag_8): New.\n \t* c-common.c (c_common_reswords): Include \"constexpr\" as C++0x\n-\tkeyword. \n+\tkeyword.\n \t* c-common.h (RID_CONSTEXPR): New.\n \n 2009-09-30  Uros Bizjak  <ubizjak@gmail.com>"}, {"sha": "27800804eca9e55fa5cdd47736c8b049265cd421", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 77, "deletions": 262, "changes": 339, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9e51149de67a1f3cb79bf03c39b4fbeeb0718d89", "patch": "@@ -8916,296 +8916,111 @@\n     }\n })\n \f\n-;; Remainder instructions.\n-\n-(define_expand \"divmoddi4\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (div:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:DI 2 \"nonimmediate_operand\" \"\")))\n-\t      (set (match_operand:DI 3 \"register_operand\" \"\")\n-\t\t   (mod:DI (match_dup 1) (match_dup 2)))\n+;; Divmod instructions.\n+\n+(define_expand \"divmod<mode>4\"\n+  [(parallel [(set (match_operand:SWI248 0 \"register_operand\" \"\")\n+\t\t   (div:SWI248\n+\t\t     (match_operand:SWI248 1 \"register_operand\" \"\")\n+\t\t     (match_operand:SWI248 2 \"nonimmediate_operand\" \"\")))\n+\t      (set (match_operand:SWI248 3 \"register_operand\" \"\")\n+\t\t   (mod:SWI248 (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_64BIT\"\n+  \"(<MODE>mode != HImode) || TARGET_HIMODE_MATH\"\n   \"\")\n \n-;; Allow to come the parameter in eax or edx to avoid extra moves.\n-;; Penalize eax case slightly because it results in worse scheduling\n-;; of code.\n-(define_insn \"*divmoddi4_nocltd_rex64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&a,?a\")\n-\t(div:DI (match_operand:DI 2 \"register_operand\" \"1,0\")\n-\t\t(match_operand:DI 3 \"nonimmediate_operand\" \"rm,rm\")))\n-   (set (match_operand:DI 1 \"register_operand\" \"=&d,&d\")\n-\t(mod:DI (match_dup 2) (match_dup 3)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && optimize_function_for_speed_p (cfun) && !TARGET_USE_CLTD\"\n-  \"#\"\n-  [(set_attr \"type\" \"multi\")])\n-\n-(define_insn \"*divmoddi4_cltd_rex64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(div:DI (match_operand:DI 2 \"register_operand\" \"a\")\n-\t\t(match_operand:DI 3 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:DI 1 \"register_operand\" \"=&d\")\n-\t(mod:DI (match_dup 2) (match_dup 3)))\n+(define_insn_and_split \"*divmod<mode>4\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=a\")\n+\t(div:SWI248 (match_operand:SWI248 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:SWI248 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SWI248 1 \"register_operand\" \"=&d\")\n+\t(mod:SWI248 (match_dup 2) (match_dup 3)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && (optimize_function_for_size_p (cfun) || TARGET_USE_CLTD)\"\n+  \"(<MODE>mode != HImode) || TARGET_HIMODE_MATH\"\n   \"#\"\n-  [(set_attr \"type\" \"multi\")])\n-\n-(define_insn \"*divmoddi_noext_rex64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(div:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t(match_operand:DI 2 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:DI 3 \"register_operand\" \"=d\")\n-\t(mod:DI (match_dup 1) (match_dup 2)))\n-   (use (match_operand:DI 4 \"register_operand\" \"3\"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\"\n-  \"idiv{q}\\t%2\"\n-  [(set_attr \"type\" \"idiv\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(div:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"nonimmediate_operand\" \"\")))\n-   (set (match_operand:DI 3 \"register_operand\" \"\")\n-\t(mod:DI (match_dup 1) (match_dup 2)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\"\n-  [(parallel [(set (match_dup 3)\n-\t\t   (ashiftrt:DI (match_dup 4) (const_int 63)))\n+  \"&& reload_completed\"\n+  [(parallel [(set (match_dup 1)\n+\t\t   (ashiftrt:SWI248 (match_dup 4) (match_dup 5)))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (parallel [(set (match_dup 0)\n-\t           (div:DI (reg:DI 0) (match_dup 2)))\n-\t      (set (match_dup 3)\n-\t\t   (mod:DI (reg:DI 0) (match_dup 2)))\n-\t      (use (match_dup 3))\n+\t           (div:SWI248 (match_dup 2) (match_dup 3)))\n+\t      (set (match_dup 1)\n+\t\t   (mod:SWI248 (match_dup 2) (match_dup 3)))\n+\t      (use (match_dup 1))\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n-  /* Avoid use of cltd in favor of a mov+shift.  */\n-  if (!TARGET_USE_CLTD && optimize_function_for_speed_p (cfun))\n-    {\n-      if (true_regnum (operands[1]))\n-        emit_move_insn (operands[0], operands[1]);\n-      else\n-\temit_move_insn (operands[3], operands[1]);\n-      operands[4] = operands[3];\n-    }\n-  else\n-    {\n-      gcc_assert (!true_regnum (operands[1]));\n-      operands[4] = operands[1];\n-    }\n-})\n+  operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - 1);\n \n-\n-(define_expand \"divmodsi4\"\n-  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (div:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n-\t      (set (match_operand:SI 3 \"register_operand\" \"\")\n-\t\t   (mod:SI (match_dup 1) (match_dup 2)))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"\"\n-  \"\")\n-\n-;; Allow to come the parameter in eax or edx to avoid extra moves.\n-;; Penalize eax case slightly because it results in worse scheduling\n-;; of code.\n-(define_insn \"*divmodsi4_nocltd\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&a,?a\")\n-\t(div:SI (match_operand:SI 2 \"register_operand\" \"1,0\")\n-\t\t(match_operand:SI 3 \"nonimmediate_operand\" \"rm,rm\")))\n-   (set (match_operand:SI 1 \"register_operand\" \"=&d,&d\")\n-\t(mod:SI (match_dup 2) (match_dup 3)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"optimize_function_for_speed_p (cfun) && !TARGET_USE_CLTD\"\n-  \"#\"\n-  [(set_attr \"type\" \"multi\")])\n-\n-(define_insn \"*divmodsi4_cltd\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(div:SI (match_operand:SI 2 \"register_operand\" \"a\")\n-\t\t(match_operand:SI 3 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:SI 1 \"register_operand\" \"=&d\")\n-\t(mod:SI (match_dup 2) (match_dup 3)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"optimize_function_for_size_p (cfun) || TARGET_USE_CLTD\"\n-  \"#\"\n-  [(set_attr \"type\" \"multi\")])\n-\n-(define_insn \"*divmodsi_noext\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(div:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t(match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:SI 3 \"register_operand\" \"=d\")\n-\t(mod:SI (match_dup 1) (match_dup 2)))\n-   (use (match_operand:SI 4 \"register_operand\" \"3\"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n-  \"idiv{l}\\t%2\"\n-  [(set_attr \"type\" \"idiv\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(div:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n-   (set (match_operand:SI 3 \"register_operand\" \"\")\n-\t(mod:SI (match_dup 1) (match_dup 2)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed\"\n-  [(parallel [(set (match_dup 3)\n-\t\t   (ashiftrt:SI (match_dup 4) (const_int 31)))\n-\t      (clobber (reg:CC FLAGS_REG))])\n-   (parallel [(set (match_dup 0)\n-\t           (div:SI (reg:SI 0) (match_dup 2)))\n-\t      (set (match_dup 3)\n-\t\t   (mod:SI (reg:SI 0) (match_dup 2)))\n-\t      (use (match_dup 3))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-{\n-  /* Avoid use of cltd in favor of a mov+shift.  */\n-  if (!TARGET_USE_CLTD && optimize_function_for_speed_p (cfun))\n-    {\n-      if (true_regnum (operands[1]))\n-        emit_move_insn (operands[0], operands[1]);\n-      else\n-\temit_move_insn (operands[3], operands[1]);\n-      operands[4] = operands[3];\n-    }\n+  if (<MODE>mode != HImode\n+      && (optimize_function_for_size_p (cfun) || TARGET_USE_CLTD))\n+    operands[4] = operands[2];\n   else\n     {\n-      gcc_assert (!true_regnum (operands[1]));\n+      /* Avoid use of cltd in favor of a mov+shift.  */\n+      emit_move_insn (operands[1], operands[2]);\n       operands[4] = operands[1];\n     }\n-})\n-;; %%% Split me.\n-(define_insn \"divmodhi4\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n-\t(div:HI (match_operand:HI 1 \"register_operand\" \"0\")\n-\t\t(match_operand:HI 2 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:HI 3 \"register_operand\" \"=&d\")\n-\t(mod:HI (match_dup 1) (match_dup 2)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_HIMODE_MATH\"\n-  \"cwtd\\;idiv{w}\\t%2\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length_immediate\" \"0\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"udivmoddi4\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(udiv:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:DI 3 \"register_operand\" \"=&d\")\n-\t(umod:DI (match_dup 1) (match_dup 2)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\"\n-  \"xor{q}\\t%3, %3\\;div{q}\\t%2\"\n+}\n   [(set_attr \"type\" \"multi\")\n-   (set_attr \"length_immediate\" \"0\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*udivmoddi4_noext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(udiv:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:DI 3 \"register_operand\" \"=d\")\n-\t(umod:DI (match_dup 1) (match_dup 2)))\n-   (use (match_dup 3))\n+(define_insn \"*divmod<mode>4_noext\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=a\")\n+\t(div:SWI248 (match_operand:SWI248 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:SWI248 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SWI248 1 \"register_operand\" \"=d\")\n+\t(mod:SWI248 (match_dup 2) (match_dup 3)))\n+   (use (match_operand:SWI248 4 \"register_operand\" \"1\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\"\n-  \"div{q}\\t%2\"\n+  \"\"\n+  \"idiv{<imodesuffix>}\\t%3\"\n   [(set_attr \"type\" \"idiv\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(udiv:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"nonimmediate_operand\" \"\")))\n-   (set (match_operand:DI 3 \"register_operand\" \"\")\n-\t(umod:DI (match_dup 1) (match_dup 2)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\"\n-  [(set (match_dup 3) (const_int 0))\n-   (parallel [(set (match_dup 0)\n-\t\t   (udiv:DI (match_dup 1) (match_dup 2)))\n-\t      (set (match_dup 3)\n-\t\t   (umod:DI (match_dup 1) (match_dup 2)))\n-\t      (use (match_dup 3))\n+(define_expand \"udivmod<mode>4\"\n+  [(parallel [(set (match_operand:SWI248 0 \"register_operand\" \"\")\n+\t\t   (udiv:SWI248\n+\t\t     (match_operand:SWI248 1 \"register_operand\" \"\")\n+\t\t     (match_operand:SWI248 2 \"nonimmediate_operand\" \"\")))\n+\t      (set (match_operand:SWI248 3 \"register_operand\" \"\")\n+\t\t   (umod:SWI248 (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n+  \"(<MODE>mode != HImode) || TARGET_HIMODE_MATH\"\n   \"\")\n \n-(define_insn \"udivmodsi4\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(udiv:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:SI 3 \"register_operand\" \"=&d\")\n-\t(umod:SI (match_dup 1) (match_dup 2)))\n+(define_insn_and_split \"*udivmod<mode>4\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=a\")\n+\t(udiv:SWI248 (match_operand:SWI248 2 \"register_operand\" \"0\")\n+\t\t     (match_operand:SWI248 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SWI248 1 \"register_operand\" \"=&d\")\n+\t(umod:SWI248 (match_dup 2) (match_dup 3)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n-  \"xor{l}\\t%3, %3\\;div{l}\\t%2\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length_immediate\" \"0\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*udivmodsi4_noext\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(udiv:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:SI 3 \"register_operand\" \"=d\")\n-\t(umod:SI (match_dup 1) (match_dup 2)))\n-   (use (match_dup 3))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n-  \"div{l}\\t%2\"\n-  [(set_attr \"type\" \"idiv\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(udiv:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n-   (set (match_operand:SI 3 \"register_operand\" \"\")\n-\t(umod:SI (match_dup 1) (match_dup 2)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed\"\n-  [(set (match_dup 3) (const_int 0))\n+  \"(<MODE>mode != HImode) || TARGET_HIMODE_MATH\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 1) (const_int 0))\n    (parallel [(set (match_dup 0)\n-\t\t   (udiv:SI (match_dup 1) (match_dup 2)))\n-\t      (set (match_dup 3)\n-\t\t   (umod:SI (match_dup 1) (match_dup 2)))\n-\t      (use (match_dup 3))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"\")\n-\n-(define_expand \"udivmodhi4\"\n-  [(set (match_dup 4) (const_int 0))\n-   (parallel [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t\t   (udiv:HI (match_operand:HI 1 \"register_operand\" \"\")\n-\t\t \t    (match_operand:HI 2 \"nonimmediate_operand\" \"\")))\n-\t      (set (match_operand:HI 3 \"register_operand\" \"\")\n-\t   \t   (umod:HI (match_dup 1) (match_dup 2)))\n-\t      (use (match_dup 4))\n+\t\t   (udiv:SWI248 (match_dup 2) (match_dup 3)))\n+\t      (set (match_dup 1)\n+\t\t   (umod:SWI248 (match_dup 2) (match_dup 3)))\n+\t      (use (match_dup 1))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_HIMODE_MATH\"\n-  \"operands[4] = gen_reg_rtx (HImode);\")\n+  \"\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*udivmodhi_noext\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n-\t(udiv:HI (match_operand:HI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:HI 2 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:HI 3 \"register_operand\" \"=d\")\n-\t(umod:HI (match_dup 1) (match_dup 2)))\n-   (use (match_operand:HI 4 \"register_operand\" \"3\"))\n+(define_insn \"*udivmod<mode>4_noext\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=a\")\n+\t(udiv:SWI248 (match_operand:SWI248 2 \"register_operand\" \"0\")\n+\t\t     (match_operand:SWI248 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SWI248 1 \"register_operand\" \"=d\")\n+\t(umod:SWI248 (match_dup 2) (match_dup 3)))\n+   (use (match_operand:SWI248 4 \"register_operand\" \"1\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n-  \"div{w}\\t%2\"\n+  \"(<MODE>mode != HImode) || TARGET_HIMODE_MATH\"\n+  \"div{<imodesuffix>}\\t%3\"\n   [(set_attr \"type\" \"idiv\")\n-   (set_attr \"mode\" \"HI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; We cannot use div/idiv for double division, because it causes\n ;; \"division by zero\" on the overflow and that's not what we expect"}, {"sha": "a7739b8ec891c7be3ef96fbeb15671422ddfbb51", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e51149de67a1f3cb79bf03c39b4fbeeb0718d89/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e51149de67a1f3cb79bf03c39b4fbeeb0718d89", "patch": "@@ -30,7 +30,7 @@\n \n \tPR testsuite/41546\n \t* gcc.target/i386/ifcvt-onecmpl-abs-1.c: Change -mtune=i586\n-\tto -mtune=generic. \n+\tto -mtune=generic.\n \n 2009-10-01  Jan Hubicka  <jh@suse.cz>\n \n@@ -245,7 +245,7 @@\n \t* gcc.target/i386/avx-2.c\n \t* gcc.target/i386/sse-23.c: Remove comments to mmintrin-common.h.\n \t* gcc.target/i386/funcspec-9.c: Delete.\n-\t\n+\n 2009-09-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/guality/guality.exp (gdb-test): New proc for use in dg-final.\n@@ -294,7 +294,7 @@\n 2009-09-28  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg (tagged_alloc_free.adb): New testcase.\n-\t\n+\n 2009-09-28  Janis Johnson  <janis187@us.ibm.com>\n \n \t* g++.dg/dfp: New directory.\n@@ -871,8 +871,7 @@\n \t* gcc.dg/dfp/compare-special.h: Ditto.\n \t* gcc.dg/dfp/convert.h: Ditto.\n \t* gcc.dg/dfp/fe-check.h: Ditto.\n-\t* gcc.dg/dfp/call-by-value.c: Use default options and\n-\t  debug macros.\n+\t* gcc.dg/dfp/call-by-value.c: Use default options and debug macros.\n \t* gcc.dg/dfp/cast.c: Ditto.\n \t* gcc.dg/dfp/compare-eq-const.c: Ditto.\n \t* gcc.dg/dfp/compare-eq-d32.c: Ditto."}]}