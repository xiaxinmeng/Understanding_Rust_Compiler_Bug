{"sha": "62f4333a68e86e13c02d9436a71bb7367ffcaea8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJmNDMzM2E2OGU4NmUxM2MwMmQ5NDM2YTcxYmI3MzY3ZmZjYWVhOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@fillmore.redhat.com", "date": "2000-12-19T19:49:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-19T19:49:00Z"}, "message": "ctype_inline.h (is): Same.\n\n\n2000-12-19  Benjamin Kosnik  <bkoz@fillmore.redhat.com>\n\n\t* config/os/solaris/solaris2.5/bits/ctype_inline.h (is): Same.\n\t* config/os/solaris/solaris2.6/bits/ctype_inline.h (is): Same.\n\t* config/os/solaris/solaris2.7/bits/ctype_inline.h (is): Same.\n\t* config/os/newlib/bits/ctype_inline.h (is): Same.\n\t* config/os/irix/bits/ctype_inline.h (is): Same.\n\t* config/os/bsd/netbsd/bits/ctype_inline.h (is): Same.\n\t* config/os/bsd/freebsd/bits/ctype_inline.h (is): Same.\n\t* config/os/aix/bits/ctype_inline.h (is): Same.\n\t* config/os/gnu-linux/bits/ctype_inline.h (is): Revert.\n\t* config/os/generic/bits/ctype_inline.h (is): Non-table based\n\timplementation.\n\n\t* testsuite/22_locale/ctype_char_members.cc (test01): Use binary\n\toperator correctly.\n\t(test01): Check 'A' for alnum, upper, alpha.\n\nFrom-SVN: r38385", "tree": {"sha": "c26d566d555a6dbd35adf57e919628e8e7044fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26d566d555a6dbd35adf57e919628e8e7044fe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62f4333a68e86e13c02d9436a71bb7367ffcaea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f4333a68e86e13c02d9436a71bb7367ffcaea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62f4333a68e86e13c02d9436a71bb7367ffcaea8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f4333a68e86e13c02d9436a71bb7367ffcaea8/comments", "author": null, "committer": null, "parents": [{"sha": "c387606fe86d65768afb5a0225f7b6659e8c8f9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c387606fe86d65768afb5a0225f7b6659e8c8f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c387606fe86d65768afb5a0225f7b6659e8c8f9d"}], "stats": {"total": 145, "additions": 67, "deletions": 78}, "files": [{"sha": "b440b9e8067bc26e10acd6de8db55302876f9fd4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=62f4333a68e86e13c02d9436a71bb7367ffcaea8", "patch": "@@ -1,3 +1,21 @@\n+2000-12-19  Benjamin Kosnik  <bkoz@fillmore.redhat.com>\n+\n+\t* config/os/solaris/solaris2.5/bits/ctype_inline.h (is): Same.\n+\t* config/os/solaris/solaris2.6/bits/ctype_inline.h (is): Same.\n+\t* config/os/solaris/solaris2.7/bits/ctype_inline.h (is): Same.\n+\t* config/os/newlib/bits/ctype_inline.h (is): Same.\n+\t* config/os/irix/bits/ctype_inline.h (is): Same.\n+\t* config/os/bsd/netbsd/bits/ctype_inline.h (is): Same.\n+\t* config/os/bsd/freebsd/bits/ctype_inline.h (is): Same.\n+\t* config/os/aix/bits/ctype_inline.h (is): Same.\n+\t* config/os/gnu-linux/bits/ctype_inline.h (is): Revert.\n+\t* config/os/generic/bits/ctype_inline.h (is): Non-table based\n+\timplementation.\n+\n+\t* testsuite/22_locale/ctype_char_members.cc (test01): Use binary\n+\toperator correctly.\n+\t(test01): Check 'A' for alnum, upper, alpha.\n+\n 2000-12-19  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* include/bits/std_complex.h (complex<float>::operator-=): Fix"}, {"sha": "d9df620b0109b3795dccfdb672462ccc717ca97b", "filename": "libstdc++-v3/config/os/aix/bits/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_inline.h?ref=62f4333a68e86e13c02d9436a71bb7367ffcaea8", "patch": "@@ -43,15 +43,8 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const \n   {\n-    const int __bitmasksize = sizeof(mask) * 8;\n-    for (;__low < __high; ++__vec, ++__low)\n-      {\n-\tmask __m = __OBJ_DATA(__lc_ctype)->mask[*__low++];\n-\tint __i = 0; // Lowest bitmask.\n-\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n-\t  ++__i;\n-\t*__vec = static_cast<mask>(1 << __i);\n-      }\n+    while (__low < __high)\n+      *__vec++ = __OBJ_DATA(__lc_ctype)->mask[*__low++];\n     return __high;\n   }\n "}, {"sha": "c282c4bf158e0f42e63d756323e8fb530f05a406", "filename": "libstdc++-v3/config/os/bsd/freebsd/bits/ctype_inline.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_inline.h?ref=62f4333a68e86e13c02d9436a71bb7367ffcaea8", "patch": "@@ -48,14 +48,18 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n-    const int __bitmasksize = sizeof(mask) * 8;\n+    const int __bitmasksize = 11; // Highest bitmask in ctype_base == 10\n     for (;__low < __high; ++__vec, ++__low)\n       {\n-\tmask __m = _M_table[*__low];\n-\tint __i = 0; // Lowest bitmask value, 1 == 1 << 0 means 0 \n-\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n-\t  ++__i;\n-\t*__vec = static_cast<mask>(1 << __i);\n+\tmask __m = 0;\n+\tint __i = 0; // Lowest bitmask in ctype_base == 0\n+\tfor (;__i < __bitmasksize; ++__i)\n+\t  {\n+\t    mask __bit = static_cast<mask>(1 << __i);\n+\t    if (this->is(__bit, *__low))\n+\t      __m |= __bit;\n+\t  }\n+\t*__vec = __m;\n       }\n     return __high;\n   }"}, {"sha": "f6dfc4d7f655a04421503d512e1a7ddddd1b2bed", "filename": "libstdc++-v3/config/os/bsd/netbsd/bits/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_inline.h?ref=62f4333a68e86e13c02d9436a71bb7367ffcaea8", "patch": "@@ -43,15 +43,8 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n-    const int __bitmasksize = sizeof(mask) * 8;\n-    for (;__low < __high; ++__vec, ++__low)\n-      {\n-\tmask __m = _M_table[*__low];\n-\tint __i = 0; // Lowest bitmask.\n-\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n-\t  ++__i;\n-\t*__vec = static_cast<mask>(1 << __i);\n-      }\n+    while (__low < __high)\n+      *__vec++ = _M_table[*__low++];\n     return __high;\n   }\n "}, {"sha": "a5f6e855a9330077156e6b7e8275ce0ec2474dbc", "filename": "libstdc++-v3/config/os/generic/bits/ctype_inline.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h?ref=62f4333a68e86e13c02d9436a71bb7367ffcaea8", "patch": "@@ -93,11 +93,15 @@\n     const int __bitmasksize = 11; // Highest bitmask in ctype_base == 10\n     for (;__low < __high; ++__vec, ++__low)\n       {\n-\tmask __m = _M_table[*__low];\n+\tmask __m = 0;\n \tint __i = 0; // Lowest bitmask in ctype_base == 0\n-\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n-\t  ++__i;\n-\t*__vec = static_cast<mask>(1 << __i);\n+\tfor (;__i < __bitmasksize; ++__i)\n+\t  {\n+\t    mask __bit = static_cast<mask>(1 << __i);\n+\t    if (this->is(__bit, *__low))\n+\t      __m |= __bit;\n+\t  }\n+\t*__vec = __m;\n       }\n     return __high;\n   }"}, {"sha": "4c24824262554ffff22e10578866fa888c2527d8", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h?ref=62f4333a68e86e13c02d9436a71bb7367ffcaea8", "patch": "@@ -43,15 +43,8 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n-    const int __bitmasksize = sizeof(mask) * 8;\n-    for (;__low < __high; ++__vec, ++__low)\n-      {\n-\tmask __m = _M_table[*__low];\n-\tint __i = 1; // Lowest bitmask on linux, 1 <= x <= 15\n-\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n-\t  ++__i;\n-\t*__vec = static_cast<mask>(1 << __i);\n-      }\n+    while (__low < __high)\n+      *__vec++ = _M_table[*__low++];\n     return __high;\n   }\n "}, {"sha": "6a20c096cd5c692c0a9b7c891fc407a96bc4fb01", "filename": "libstdc++-v3/config/os/irix/bits/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fctype_inline.h?ref=62f4333a68e86e13c02d9436a71bb7367ffcaea8", "patch": "@@ -43,15 +43,8 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n-    const int __bitmasksize = sizeof(mask) * 8;\n-    for (;__low < __high; ++__vec, ++__low)\n-      {\n-\tmask __m = _M_table[*__low];\n-\tint __i = 1; // Lowest bitmask on linux, 1 <= x <= 15\n-\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n-\t  ++__i;\n-\t*__vec = static_cast<mask>(1 << __i);\n-      }\n+    while (__low < __high)\n+      *__vec++ = (_M_table)[*__low++];\n     return __high;\n   }\n "}, {"sha": "cddffedaa4447ed3d635ef88327d03cb91548020", "filename": "libstdc++-v3/config/os/newlib/bits/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_inline.h?ref=62f4333a68e86e13c02d9436a71bb7367ffcaea8", "patch": "@@ -43,15 +43,8 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n-    const int __bitmasksize = sizeof(mask) * 8;\n-    for (;__low < __high; ++__vec, ++__low)\n-      {\n-\tmask __m = _M_table[*__low];\n-\tint __i = 0; // Lowest bitmask with newlib, 1 << 0 == 01\n-\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n-\t  ++__i;\n-\t*__vec = static_cast<mask>(1 << __i);\n-      }\n+    while (__low < __high)\n+      *__vec++ = (_M_table + 1)[(unsigned char) (*__low++)];\n     return __high;\n   }\n "}, {"sha": "affa4945c601f599ff5c27217866f60a0e0d487e", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_inline.h?ref=62f4333a68e86e13c02d9436a71bb7367ffcaea8", "patch": "@@ -43,15 +43,8 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n-    const int __bitmasksize = sizeof(mask) * 8;\n-    for (;__low < __high; ++__vec, ++__low)\n-      {\n-\tmask __m = _M_table[*__low];\n-\tint __i = 0; // Lowest bitmask in ctype_base::mask.\n-\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n-\t  ++__i;\n-\t*__vec = static_cast<mask>(1 << __i);\n-      }\n+    while (__low < __high)\n+      *__vec++ = (_M_table + 1)[(unsigned char) (*__low++)];\n     return __high;\n   }\n "}, {"sha": "8ec057dfb4756410cb12164652fb38d50faafb8d", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/bits/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_inline.h?ref=62f4333a68e86e13c02d9436a71bb7367ffcaea8", "patch": "@@ -43,15 +43,8 @@\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n-    const int __bitmasksize = sizeof(mask) * 8;\n-    for (;__low < __high; ++__vec, ++__low)\n-      {\n-\tmask __m = _M_table[*__low];\n-\tint __i = 0; // Lowest bitmask value from ctype_base.\n-\twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n-\t  ++__i;\n-\t*__vec = static_cast<mask>(1 << __i);\n-      }\n+    while (__low < __high)\n+      *__vec++ = _M_table[*__low++];\n     return __high;\n   }\n "}, {"sha": "93eedd171ce7e8960382a08fedbb58d1ca07c292", "filename": "libstdc++-v3/testsuite/22_locale/ctype_char_members.cc", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f4333a68e86e13c02d9436a71bb7367ffcaea8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc?ref=62f4333a68e86e13c02d9436a71bb7367ffcaea8", "patch": "@@ -69,8 +69,17 @@ void test01()\n   int i10 = std::ctype_base::print;\n   int i11 = std::ctype_base::cntrl;\n   int i12 = sizeof(std::ctype_base::mask);\n-  VERIFY ( i01 != i02 != i03 != i04 != i05 != i06 != i07 != i08 != i09 );\n-  VERIFY ( i01 != i10 != i11);\n+  VERIFY ( i01 != i02);\n+  VERIFY ( i02 != i03);\n+  VERIFY ( i03 != i04);\n+  VERIFY ( i04 != i05);\n+  VERIFY ( i05 != i06);\n+  VERIFY ( i06 != i07);\n+  VERIFY ( i07 != i08);\n+  VERIFY ( i08 != i09);\n+  VERIFY ( i09 != i10);\n+  VERIFY ( i10 != i11);\n+  VERIFY ( i11 != i01);\n \n   // bool is(mask m, char c) const;\n   VERIFY( gctype.is(std::ctype_base::space, c30) );\n@@ -118,14 +127,17 @@ void test01()\n   VERIFY( gctype.is(m01[1], cc0[1]) );\n   VERIFY( gctype.is(m01[2], cc0[2]) );\n \n-  cc0 = strlit00;\n+  cc0 = strlit01;\n   cc1 = gctype.is(cc0, cc0 + 13, m02);\n-  VERIFY( cc1 == strlit00 + 13);\n+  VERIFY( cc1 == strlit01 + 13);\n   VERIFY( m02[6] != m00 );\n   VERIFY( m02[7] != m00 );\n   VERIFY( m02[8] != m00 );\n-  VERIFY( m02[8] != m02[6] != m02[7] );\n+  VERIFY( m02[8] != m02[6] );\n+  VERIFY( m02[6] != m02[7] );\n   VERIFY( static_cast<bool>(m02[6] & std::ctype_base::alnum) );\n+  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::upper) );\n+  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::alpha) );\n   VERIFY( static_cast<bool>(m02[7] & std::ctype_base::punct) );\n   VERIFY( static_cast<bool>(m02[8] & std::ctype_base::space) );\n   VERIFY( gctype.is(m02[6], cc0[6]) );"}]}