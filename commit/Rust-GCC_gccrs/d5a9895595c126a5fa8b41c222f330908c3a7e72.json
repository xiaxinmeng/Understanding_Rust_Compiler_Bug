{"sha": "d5a9895595c126a5fa8b41c222f330908c3a7e72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVhOTg5NTU5NWMxMjZhNWZhOGI0MWMyMjJmMzMwOTA4YzNhN2U3Mg==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2018-10-05T17:37:56Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2018-10-05T17:37:56Z"}, "message": "Remove -mfloat32, -mfloat64 switches from pdp11 target.\n\n    * config/pdp11/pdp11.h (FLOAT_TYPE_SIZE): Always 32.\n    * config/pdp11/pdp11.opt (mfloat32): Remove.\n    (mfloat64): Remove.\n    * doc/invoke.texi (pdp11 -mfloat32): Remove:\n    (pdp11 -mfloat64): Remove.\n\nFrom-SVN: r264881", "tree": {"sha": "580e7104a383aaf77b367971af6c497de2cd7b1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/580e7104a383aaf77b367971af6c497de2cd7b1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5a9895595c126a5fa8b41c222f330908c3a7e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a9895595c126a5fa8b41c222f330908c3a7e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5a9895595c126a5fa8b41c222f330908c3a7e72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a9895595c126a5fa8b41c222f330908c3a7e72/comments", "author": null, "committer": null, "parents": [{"sha": "9a85d982cc52c200ac8530c05909df593a0d075c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a85d982cc52c200ac8530c05909df593a0d075c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a85d982cc52c200ac8530c05909df593a0d075c"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "3ca3c1c28b6c8ddf66313eacf48f4136446a9404", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a9895595c126a5fa8b41c222f330908c3a7e72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a9895595c126a5fa8b41c222f330908c3a7e72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5a9895595c126a5fa8b41c222f330908c3a7e72", "patch": "@@ -1,3 +1,11 @@\n+2018-10-05  Paul Koning  <ni1d@arrl.net>\n+\n+\t* config/pdp11/pdp11.h (FLOAT_TYPE_SIZE): Always 32.\n+\t* config/pdp11/pdp11.opt (mfloat32): Remove.\n+\t(mfloat64): Remove.\n+\t* doc/invoke.texi (pdp11 -mfloat32): Remove:\n+\t(pdp11 -mfloat64): Remove.\n+\n 2018-10-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*cmpxf_i387): Change operand 2 predicate"}, {"sha": "c68a74d91a0448db3e0d8bbd4300da4ac3db4229", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a9895595c126a5fa8b41c222f330908c3a7e72/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a9895595c126a5fa8b41c222f330908c3a7e72/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=d5a9895595c126a5fa8b41c222f330908c3a7e72", "patch": "@@ -59,12 +59,14 @@ along with GCC; see the file COPYING3.  If not see\n #define LONG_TYPE_SIZE\t\t32\n #define LONG_LONG_TYPE_SIZE\t64     \n \n-/* if we set FLOAT_TYPE_SIZE to 32, we could have the benefit \n-   of saving core for huge arrays - the definitions are \n-   already in md - but floats can never reside in \n-   an FPU register - we keep the FPU in double float mode \n-   all the time !! */\n-#define FLOAT_TYPE_SIZE\t\t(TARGET_FLOAT32 ? 32 : 64)\n+/* In earlier versions, FLOAT_TYPE_SIZE was selectable as 32 or 64,\n+   but that conflicts with Fortran language rules.  Since there is no\n+   obvious reason why we should have that feature -- other targets\n+   generally don't have float and double the same size -- I've removed\n+   it.  Note that it continues to be true (for now) that arithmetic is\n+   always done with 64-bit values, i.e., the FPU is always in \"double\"\n+   mode.  */\n+#define FLOAT_TYPE_SIZE\t\t32\n #define DOUBLE_TYPE_SIZE\t64\n #define LONG_DOUBLE_TYPE_SIZE\t64\n \n@@ -200,12 +202,11 @@ extern const struct real_format pdp11_d_format;\n \n MUL_REGS are used for odd numbered regs, to use in 16-bit multiplication\n          (even numbered do 32-bit multiply)\n-LMUL_REGS long multiply registers (even numbered regs )\n-\t  (don't need them, all 32-bit regs are even numbered!)\n GENERAL_REGS is all cpu\n LOAD_FPU_REGS is the first four cpu regs, they are easier to load\n NO_LOAD_FPU_REGS is ac4 and ac5, currently - difficult to load them\n FPU_REGS is all fpu regs \n+CC_REGS is the condition codes (CPU and FPU)\n */\n \n enum reg_class"}, {"sha": "5da3b39569c74de7139335c5b2761231bef6cc41", "filename": "gcc/config/pdp11/pdp11.opt", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a9895595c126a5fa8b41c222f330908c3a7e72/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a9895595c126a5fa8b41c222f330908c3a7e72/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt?ref=d5a9895595c126a5fa8b41c222f330908c3a7e72", "patch": "@@ -42,14 +42,6 @@ mgnu-asm\n Target RejectNegative Report Mask(GNU_ASM) Negative(munix-asm)\n Use the GNU assembler syntax.\n \n-mfloat32\n-Target Report Mask(FLOAT32)\n-Use 32 bit float.\n-\n-mfloat64\n-Target Report InverseMask(FLOAT32, FLOAT64)\n-Use 64 bit float.\n-\n mfpu\n Target RejectNegative Report Mask(FPU)\n Use hardware floating point."}, {"sha": "802cc642453aef2d2c516bcbda22246252ec87c1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a9895595c126a5fa8b41c222f330908c3a7e72/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a9895595c126a5fa8b41c222f330908c3a7e72/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d5a9895595c126a5fa8b41c222f330908c3a7e72", "patch": "@@ -1007,7 +1007,6 @@ Objective-C and Objective-C++ Dialects}.\n @emph{PDP-11 Options}\n @gccoptlist{-mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10 @gol\n -mint32  -mno-int16 -mint16  -mno-int32 @gol\n--mfloat32  -mno-float64 -mfloat64  -mno-float32 @gol\n -msplit -munix-asm  -mdec-asm -mgnu-asm -mlra}\n \n @emph{picoChip Options}\n@@ -22722,18 +22721,6 @@ Use 16-bit @code{int}.  This is the default.\n @opindex mno-int16\n Use 32-bit @code{int}.\n \n-@item -mfloat64\n-@itemx -mno-float32\n-@opindex mfloat64\n-@opindex mno-float32\n-Use 64-bit @code{float}.  This is the default.\n-\n-@item -mfloat32\n-@itemx -mno-float64\n-@opindex mfloat32\n-@opindex mno-float64\n-Use 32-bit @code{float}.\n-\n @item -msplit\n @opindex msplit\n Target has split instruction and data space.  Implies -m45."}]}