{"sha": "2493e718159bdee3a589234196ce177d37b1e649", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ5M2U3MTgxNTliZGVlM2E1ODkyMzQxOTZjZTE3N2QzN2IxZTY0OQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-04-24T22:46:59Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-24T22:46:59Z"}, "message": "libphobos: Fix linker warning and SEGV in core.thread tests.\n\nThe monolithic core/threadasm.S source has been removed, and split into\nmultiple parts, one for each intended target CPU/OS.\n\nAdded .type and .size directives for all asm implementations of\nfiber_switchContent and callWithStackShell where they were missing.\n\nlibphobos/ChangeLog:\n\n2019-04-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\tPR d/90086\n\t* m4/druntime/cpu.m4 (DRUNTIME_CPU_SOURCES): New macro.\n\t* configure.ac: Use it.\n\t* configure: Regenerate.\n\t* libdruntime/Makefile.am: Add new config sources to\n\tDRUNTIME_SOURCES_CONFIGURED.\n\t* libdruntime/Makefile.in: Regenerate.\n\t* libdruntime/config/aarch64/switchcontext.S: New file.\n\t* libdruntime/config/arm/switchcontext.S: New file.\n\t* libdruntime/config/common/threadasm.S: New file.\n\t* libdruntime/config/mingw/switchcontext.S: New file.\n\t* libdruntime/config/mips/switchcontext.S: New file.\n\t* libdruntime/config/powerpc/switchcontext.S: New file.\n\t* libdruntime/config/powerpc64/callwithstack.S: New file.\n\t* libdruntime/config/x86/switchcontext.S: New file.\n\t* libdruntime/core/threadasm.S: Remove.\n\nFrom-SVN: r270560", "tree": {"sha": "1fcbbacd1e37224ecd98458ffb0021f4a4efbf5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fcbbacd1e37224ecd98458ffb0021f4a4efbf5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2493e718159bdee3a589234196ce177d37b1e649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2493e718159bdee3a589234196ce177d37b1e649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2493e718159bdee3a589234196ce177d37b1e649", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2493e718159bdee3a589234196ce177d37b1e649/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c3e085e4405ef4148edf4ea5bedd7930df23c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3e085e4405ef4148edf4ea5bedd7930df23c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3e085e4405ef4148edf4ea5bedd7930df23c58"}], "stats": {"total": 2023, "additions": 1256, "deletions": 767}, "files": [{"sha": "6595a82e48ffc948e98d5ce4813fae821e97fd73", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -1,3 +1,22 @@\n+2019-04-25  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/90086\n+\t* m4/druntime/cpu.m4 (DRUNTIME_CPU_SOURCES): New macro.\n+\t* configure.ac: Use it.\n+\t* configure: Regenerate.\n+\t* libdruntime/Makefile.am: Add new config sources to\n+\tDRUNTIME_SOURCES_CONFIGURED.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* libdruntime/config/aarch64/switchcontext.S: New file.\n+\t* libdruntime/config/arm/switchcontext.S: New file.\n+\t* libdruntime/config/common/threadasm.S: New file.\n+\t* libdruntime/config/mingw/switchcontext.S: New file.\n+\t* libdruntime/config/mips/switchcontext.S: New file.\n+\t* libdruntime/config/powerpc/switchcontext.S: New file.\n+\t* libdruntime/config/powerpc64/callwithstack.S: New file.\n+\t* libdruntime/config/x86/switchcontext.S: New file.\n+\t* libdruntime/core/threadasm.S: Remove.\n+\n 2019-04-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/89432"}, {"sha": "67fe34d71844c31ab17d43a5e2859a2d0e4e2fdf", "filename": "libphobos/configure", "status": "modified", "additions": 106, "deletions": 2, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -681,6 +681,18 @@ DRUNTIME_OS_AIX_FALSE\n DRUNTIME_OS_AIX_TRUE\n DRUNTIME_OS_UNIX_FALSE\n DRUNTIME_OS_UNIX_TRUE\n+DRUNTIME_CPU_X86_FALSE\n+DRUNTIME_CPU_X86_TRUE\n+DRUNTIME_CPU_POWERPC64_FALSE\n+DRUNTIME_CPU_POWERPC64_TRUE\n+DRUNTIME_CPU_POWERPC_FALSE\n+DRUNTIME_CPU_POWERPC_TRUE\n+DRUNTIME_CPU_MIPS_FALSE\n+DRUNTIME_CPU_MIPS_TRUE\n+DRUNTIME_CPU_ARM_FALSE\n+DRUNTIME_CPU_ARM_TRUE\n+DRUNTIME_CPU_AARCH64_FALSE\n+DRUNTIME_CPU_AARCH64_TRUE\n DRUNTIME_GC_ENABLE_FALSE\n DRUNTIME_GC_ENABLE_TRUE\n libphobos_srcdir\n@@ -11623,7 +11635,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11626 \"configure\"\n+#line 11638 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11729,7 +11741,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11732 \"configure\"\n+#line 11744 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14024,6 +14036,74 @@ fi\n \n \n \n+  druntime_target_cpu_parsed=\"\"\n+  case \"$target_cpu\" in\n+      aarch64*)\n+               druntime_target_cpu_parsed=\"aarch64\"\n+               ;;\n+      arm*)    druntime_target_cpu_parsed=\"arm\"\n+               ;;\n+      mips*)   druntime_target_cpu_parsed=\"mips\"\n+               ;;\n+      powerpc) druntime_target_cpu_parsed=\"powerpc\"\n+               ;;\n+      powerpc64)\n+               druntime_target_cpu_parsed=\"powerpc64\"\n+               ;;\n+      i3456786|x86_64)\n+               druntime_target_cpu_parsed=\"x86\"\n+               ;;\n+  esac\n+   if test \"$druntime_target_cpu_parsed\" = \"aarch64\"; then\n+  DRUNTIME_CPU_AARCH64_TRUE=\n+  DRUNTIME_CPU_AARCH64_FALSE='#'\n+else\n+  DRUNTIME_CPU_AARCH64_TRUE='#'\n+  DRUNTIME_CPU_AARCH64_FALSE=\n+fi\n+\n+   if test \"$druntime_target_cpu_parsed\" = \"arm\"; then\n+  DRUNTIME_CPU_ARM_TRUE=\n+  DRUNTIME_CPU_ARM_FALSE='#'\n+else\n+  DRUNTIME_CPU_ARM_TRUE='#'\n+  DRUNTIME_CPU_ARM_FALSE=\n+fi\n+\n+   if test \"$druntime_target_cpu_parsed\" = \"mips\"; then\n+  DRUNTIME_CPU_MIPS_TRUE=\n+  DRUNTIME_CPU_MIPS_FALSE='#'\n+else\n+  DRUNTIME_CPU_MIPS_TRUE='#'\n+  DRUNTIME_CPU_MIPS_FALSE=\n+fi\n+\n+   if test \"$druntime_target_cpu_parsed\" = \"powerpc\"; then\n+  DRUNTIME_CPU_POWERPC_TRUE=\n+  DRUNTIME_CPU_POWERPC_FALSE='#'\n+else\n+  DRUNTIME_CPU_POWERPC_TRUE='#'\n+  DRUNTIME_CPU_POWERPC_FALSE=\n+fi\n+\n+   if test \"$druntime_target_cpu_parsed\" = \"powerpc64\"; then\n+  DRUNTIME_CPU_POWERPC64_TRUE=\n+  DRUNTIME_CPU_POWERPC64_FALSE='#'\n+else\n+  DRUNTIME_CPU_POWERPC64_TRUE='#'\n+  DRUNTIME_CPU_POWERPC64_FALSE=\n+fi\n+\n+   if test \"$druntime_target_cpu_parsed\" = \"x86\"; then\n+  DRUNTIME_CPU_X86_TRUE=\n+  DRUNTIME_CPU_X86_FALSE='#'\n+else\n+  DRUNTIME_CPU_X86_TRUE='#'\n+  DRUNTIME_CPU_X86_FALSE=\n+fi\n+\n+\n+\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for target OS\" >&5\n $as_echo_n \"checking for target OS... \" >&6; }\n if ${druntime_cv_target_os+:} false; then :\n@@ -15413,6 +15493,30 @@ if test -z \"${DRUNTIME_GC_ENABLE_TRUE}\" && test -z \"${DRUNTIME_GC_ENABLE_FALSE}\"\n   as_fn_error $? \"conditional \\\"DRUNTIME_GC_ENABLE\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${DRUNTIME_CPU_AARCH64_TRUE}\" && test -z \"${DRUNTIME_CPU_AARCH64_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"DRUNTIME_CPU_AARCH64\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n+if test -z \"${DRUNTIME_CPU_ARM_TRUE}\" && test -z \"${DRUNTIME_CPU_ARM_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"DRUNTIME_CPU_ARM\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n+if test -z \"${DRUNTIME_CPU_MIPS_TRUE}\" && test -z \"${DRUNTIME_CPU_MIPS_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"DRUNTIME_CPU_MIPS\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n+if test -z \"${DRUNTIME_CPU_POWERPC_TRUE}\" && test -z \"${DRUNTIME_CPU_POWERPC_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"DRUNTIME_CPU_POWERPC\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n+if test -z \"${DRUNTIME_CPU_POWERPC64_TRUE}\" && test -z \"${DRUNTIME_CPU_POWERPC64_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"DRUNTIME_CPU_POWERPC64\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n+if test -z \"${DRUNTIME_CPU_X86_TRUE}\" && test -z \"${DRUNTIME_CPU_X86_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"DRUNTIME_CPU_X86\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${DRUNTIME_OS_UNIX_TRUE}\" && test -z \"${DRUNTIME_OS_UNIX_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"DRUNTIME_OS_UNIX\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "c4a86f2ec5a27151145f630ca83d5b6b9aa82770", "filename": "libphobos/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure.ac?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -157,6 +157,7 @@ DRUNTIME_CONFIGURE\n DRUNTIME_MULTILIB\n DRUNTIME_WERROR\n DRUNTIME_GC\n+DRUNTIME_CPU_SOURCES\n DRUNTIME_OS_UNIX\n DRUNTIME_OS_SOURCES\n DRUNTIME_OS_THREAD_MODEL"}, {"sha": "b981f233d71914c09f9d3835e4927afbbacd9e45", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -36,43 +36,67 @@ ALL_DRUNTIME_INSTALL_DSOURCES = $(DRUNTIME_DSOURCES) \\\n \t$(DRUNTIME_DSOURCES_STDCXX)\n \n # Setup source files depending on configure\n-ALL_DRUNTIME_COMPILE_DSOURCES = $(DRUNTIME_DSOURCES)\n+DRUNTIME_SOURCES_CONFIGURED =\n+\n # GC sources\n if DRUNTIME_GC_ENABLE\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_GC)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_GC)\n else\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_GCSTUB)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_GCSTUB)\n endif\n # OS specific sources\n if DRUNTIME_OS_UNIX\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_POSIX)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_POSIX)\n endif\n if DRUNTIME_OS_DARWIN\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_DARWIN)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_DARWIN)\n endif\n if DRUNTIME_OS_DRAGONFLYBSD\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_DRAGONFLYBSD)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_DRAGONFLYBSD)\n endif\n if DRUNTIME_OS_ANDROID\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_BIONIC)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_BIONIC)\n endif\n if DRUNTIME_OS_FREEBSD\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_FREEBSD)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_FREEBSD)\n endif\n if DRUNTIME_OS_NETBSD\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_NETBSD)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_NETBSD)\n endif\n if DRUNTIME_OS_OPENBSD\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_OPENBSD)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_OPENBSD)\n endif\n if DRUNTIME_OS_LINUX\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_LINUX)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_LINUX)\n endif\n if DRUNTIME_OS_MINGW\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_WINDOWS)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_WINDOWS)\n endif\n if DRUNTIME_OS_SOLARIS\n-    ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_SOLARIS)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_SOLARIS)\n+endif\n+# CPU specific sources\n+if DRUNTIME_CPU_AARCH64\n+    DRUNTIME_SOURCES_CONFIGURED += config/aarch64/switchcontext.S\n+endif\n+if DRUNTIME_CPU_ARM\n+    DRUNTIME_SOURCES_CONFIGURED += config/arm/switchcontext.S\n+endif\n+if DRUNTIME_CPU_MIPS\n+    DRUNTIME_SOURCES_CONFIGURED += config/mips/switchcontext.S\n+endif\n+if DRUNTIME_CPU_POWERPC\n+    DRUNTIME_SOURCES_CONFIGURED += config/powerpc/switchcontext.S\n+endif\n+if DRUNTIME_CPU_POWERPC64\n+    DRUNTIME_SOURCES_CONFIGURED += config/powerpc64/callwithstack.S\n+endif\n+if DRUNTIME_CPU_X86\n+if DRUNTIME_OS_MINGW\n+    DRUNTIME_SOURCES_CONFIGURED += config/mingw/switchcontext.S\n+else\n+    DRUNTIME_SOURCES_CONFIGURED += config/x86/switchcontext.S\n+endif\n endif\n \n # Provide __start_minfo, __stop_minfo if linker doesn't.\n@@ -89,10 +113,10 @@ gcc/drtend.o: gcc/drtstuff.c\n endif\n \n # Generated by configure\n-ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_GENERATED)\n+DRUNTIME_DSOURCES_GENERATED = gcc/config.d gcc/libbacktrace.d\n \n-ALL_DRUNTIME_SOURCES = $(ALL_DRUNTIME_COMPILE_DSOURCES) $(DRUNTIME_CSOURCES) \\\n-\t$(DRUNTIME_SSOURCES)\n+ALL_DRUNTIME_SOURCES = $(DRUNTIME_DSOURCES) $(DRUNTIME_CSOURCES) \\\n+\t$(DRUNTIME_SOURCES_CONFIGURED) $(DRUNTIME_DSOURCES_GENERATED)\n \n toolexeclib_LTLIBRARIES = libgdruntime.la\n libgdruntime_la_SOURCES = $(ALL_DRUNTIME_SOURCES)\n@@ -114,13 +138,10 @@ install-data-local:\n \t  fi ; \\\n \tdone\n \n-\n-DRUNTIME_DSOURCES_GENERATED = gcc/config.d gcc/libbacktrace.d\n # Source file definitions. Boring stuff, auto-generated with\n # https://gist.github.com/jpf91/8ad1dbc9902d6ad876313f134c6527d1\n # Can't use wildcards here:\n # https://www.gnu.org/software/automake/manual/html_node/Wildcards.html\n-DRUNTIME_SSOURCES = core/threadasm.S\n \n DRUNTIME_CSOURCES = core/stdc/errno_.c\n \n@@ -141,13 +162,13 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/sync/rwmutex.d core/sync/semaphore.d core/thread.d core/time.d \\\n \tcore/vararg.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n \tgcc/sections/android.d gcc/sections/elf_shared.d gcc/sections/osx.d \\\n-\tgcc/sections/package.d gcc/sections/win32.d \\\n-\tgcc/sections/win64.d gcc/unwind/arm.d gcc/unwind/arm_common.d \\\n-\tgcc/unwind/c6x.d gcc/unwind/generic.d gcc/unwind/package.d \\\n-\tgcc/unwind/pe.d object.d rt/aApply.d rt/aApplyR.d rt/aaA.d rt/adi.d \\\n-\trt/arrayassign.d rt/arraycast.d rt/arraycat.d rt/cast_.d rt/config.d \\\n-\trt/critical_.d rt/deh.d rt/dmain2.d rt/invariant.d rt/lifetime.d \\\n-\trt/memory.d rt/minfo.d rt/monitor_.d rt/obj.d rt/qsort.d rt/sections.d \\\n+\tgcc/sections/package.d gcc/sections/win32.d gcc/sections/win64.d \\\n+\tgcc/unwind/arm.d gcc/unwind/arm_common.d gcc/unwind/c6x.d \\\n+\tgcc/unwind/generic.d gcc/unwind/package.d gcc/unwind/pe.d object.d \\\n+\trt/aApply.d rt/aApplyR.d rt/aaA.d rt/adi.d rt/arrayassign.d \\\n+\trt/arraycast.d rt/arraycat.d rt/cast_.d rt/config.d rt/critical_.d \\\n+\trt/deh.d rt/dmain2.d rt/invariant.d rt/lifetime.d rt/memory.d \\\n+\trt/minfo.d rt/monitor_.d rt/obj.d rt/qsort.d rt/sections.d \\\n \trt/switch_.d rt/tlsgc.d rt/typeinfo/ti_Acdouble.d \\\n \trt/typeinfo/ti_Acfloat.d rt/typeinfo/ti_Acreal.d \\\n \trt/typeinfo/ti_Adouble.d rt/typeinfo/ti_Afloat.d rt/typeinfo/ti_Ag.d \\"}, {"sha": "eb290b6a14f847a1cf5dea81750124fb6da24781", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 156, "deletions": 57, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -107,6 +107,7 @@ POST_UNINSTALL = :\n build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n+\n # GC sources\n @DRUNTIME_GC_ENABLE_TRUE@am__append_1 = $(DRUNTIME_DSOURCES_GC)\n @DRUNTIME_GC_ENABLE_FALSE@am__append_2 = $(DRUNTIME_DSOURCES_GCSTUB)\n@@ -121,6 +122,14 @@ target_triplet = @target@\n @DRUNTIME_OS_LINUX_TRUE@am__append_10 = $(DRUNTIME_DSOURCES_LINUX)\n @DRUNTIME_OS_MINGW_TRUE@am__append_11 = $(DRUNTIME_DSOURCES_WINDOWS)\n @DRUNTIME_OS_SOLARIS_TRUE@am__append_12 = $(DRUNTIME_DSOURCES_SOLARIS)\n+# CPU specific sources\n+@DRUNTIME_CPU_AARCH64_TRUE@am__append_13 = config/aarch64/switchcontext.S\n+@DRUNTIME_CPU_ARM_TRUE@am__append_14 = config/arm/switchcontext.S\n+@DRUNTIME_CPU_MIPS_TRUE@am__append_15 = config/mips/switchcontext.S\n+@DRUNTIME_CPU_POWERPC_TRUE@am__append_16 = config/powerpc/switchcontext.S\n+@DRUNTIME_CPU_POWERPC64_TRUE@am__append_17 = config/powerpc64/callwithstack.S\n+@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_TRUE@am__append_18 = config/mingw/switchcontext.S\n+@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_FALSE@am__append_19 = config/x86/switchcontext.S\n subdir = libdruntime\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n@@ -228,13 +237,14 @@ am__objects_1 = core/atomic.lo core/attribute.lo core/bitop.lo \\\n \trt/util/container/common.lo rt/util/container/hashtab.lo \\\n \trt/util/container/treap.lo rt/util/random.lo \\\n \trt/util/typeinfo.lo rt/util/utf.lo\n-am__objects_2 = gc/bits.lo gc/config.lo gc/gcinterface.lo \\\n+am__objects_2 = core/stdc/libgdruntime_la-errno_.lo\n+am__objects_3 = gc/bits.lo gc/config.lo gc/gcinterface.lo \\\n \tgc/impl/conservative/gc.lo gc/impl/manual/gc.lo gc/os.lo \\\n \tgc/pooltable.lo gc/proxy.lo\n-@DRUNTIME_GC_ENABLE_TRUE@am__objects_3 = $(am__objects_2)\n-am__objects_4 = gcstub/gc.lo\n-@DRUNTIME_GC_ENABLE_FALSE@am__objects_5 = $(am__objects_4)\n-am__objects_6 = core/sys/posix/aio.lo core/sys/posix/arpa/inet.lo \\\n+@DRUNTIME_GC_ENABLE_TRUE@am__objects_4 = $(am__objects_3)\n+am__objects_5 = gcstub/gc.lo\n+@DRUNTIME_GC_ENABLE_FALSE@am__objects_6 = $(am__objects_5)\n+am__objects_7 = core/sys/posix/aio.lo core/sys/posix/arpa/inet.lo \\\n \tcore/sys/posix/config.lo core/sys/posix/dirent.lo \\\n \tcore/sys/posix/dlfcn.lo core/sys/posix/fcntl.lo \\\n \tcore/sys/posix/grp.lo core/sys/posix/iconv.lo \\\n@@ -259,8 +269,8 @@ am__objects_6 = core/sys/posix/aio.lo core/sys/posix/arpa/inet.lo \\\n \tcore/sys/posix/syslog.lo core/sys/posix/termios.lo \\\n \tcore/sys/posix/time.lo core/sys/posix/ucontext.lo \\\n \tcore/sys/posix/unistd.lo core/sys/posix/utime.lo\n-@DRUNTIME_OS_UNIX_TRUE@am__objects_7 = $(am__objects_6)\n-am__objects_8 = core/sys/darwin/crt_externs.lo \\\n+@DRUNTIME_OS_UNIX_TRUE@am__objects_8 = $(am__objects_7)\n+am__objects_9 = core/sys/darwin/crt_externs.lo \\\n \tcore/sys/darwin/dlfcn.lo core/sys/darwin/execinfo.lo \\\n \tcore/sys/darwin/mach/dyld.lo core/sys/darwin/mach/getsect.lo \\\n \tcore/sys/darwin/mach/kern_return.lo \\\n@@ -270,8 +280,8 @@ am__objects_8 = core/sys/darwin/crt_externs.lo \\\n \tcore/sys/darwin/netinet/in_.lo core/sys/darwin/pthread.lo \\\n \tcore/sys/darwin/sys/cdefs.lo core/sys/darwin/sys/event.lo \\\n \tcore/sys/darwin/sys/mman.lo\n-@DRUNTIME_OS_DARWIN_TRUE@am__objects_9 = $(am__objects_8)\n-am__objects_10 = core/sys/dragonflybsd/dlfcn.lo \\\n+@DRUNTIME_OS_DARWIN_TRUE@am__objects_10 = $(am__objects_9)\n+am__objects_11 = core/sys/dragonflybsd/dlfcn.lo \\\n \tcore/sys/dragonflybsd/execinfo.lo \\\n \tcore/sys/dragonflybsd/netinet/in_.lo \\\n \tcore/sys/dragonflybsd/pthread_np.lo \\\n@@ -286,10 +296,10 @@ am__objects_10 = core/sys/dragonflybsd/dlfcn.lo \\\n \tcore/sys/dragonflybsd/sys/link_elf.lo \\\n \tcore/sys/dragonflybsd/sys/mman.lo \\\n \tcore/sys/dragonflybsd/time.lo\n-@DRUNTIME_OS_DRAGONFLYBSD_TRUE@am__objects_11 = $(am__objects_10)\n-am__objects_12 = core/sys/bionic/fcntl.lo core/sys/bionic/unistd.lo\n-@DRUNTIME_OS_ANDROID_TRUE@am__objects_13 = $(am__objects_12)\n-am__objects_14 = core/sys/freebsd/dlfcn.lo \\\n+@DRUNTIME_OS_DRAGONFLYBSD_TRUE@am__objects_12 = $(am__objects_11)\n+am__objects_13 = core/sys/bionic/fcntl.lo core/sys/bionic/unistd.lo\n+@DRUNTIME_OS_ANDROID_TRUE@am__objects_14 = $(am__objects_13)\n+am__objects_15 = core/sys/freebsd/dlfcn.lo \\\n \tcore/sys/freebsd/execinfo.lo core/sys/freebsd/netinet/in_.lo \\\n \tcore/sys/freebsd/pthread_np.lo core/sys/freebsd/sys/_bitset.lo \\\n \tcore/sys/freebsd/sys/_cpuset.lo core/sys/freebsd/sys/cdefs.lo \\\n@@ -299,16 +309,16 @@ am__objects_14 = core/sys/freebsd/dlfcn.lo \\\n \tcore/sys/freebsd/sys/event.lo core/sys/freebsd/sys/link_elf.lo \\\n \tcore/sys/freebsd/sys/mman.lo core/sys/freebsd/sys/mount.lo \\\n \tcore/sys/freebsd/time.lo core/sys/freebsd/unistd.lo\n-@DRUNTIME_OS_FREEBSD_TRUE@am__objects_15 = $(am__objects_14)\n-am__objects_16 = core/sys/netbsd/dlfcn.lo core/sys/netbsd/execinfo.lo \\\n+@DRUNTIME_OS_FREEBSD_TRUE@am__objects_16 = $(am__objects_15)\n+am__objects_17 = core/sys/netbsd/dlfcn.lo core/sys/netbsd/execinfo.lo \\\n \tcore/sys/netbsd/sys/elf.lo core/sys/netbsd/sys/elf32.lo \\\n \tcore/sys/netbsd/sys/elf64.lo core/sys/netbsd/sys/elf_common.lo \\\n \tcore/sys/netbsd/sys/event.lo core/sys/netbsd/sys/link_elf.lo \\\n \tcore/sys/netbsd/sys/mman.lo core/sys/netbsd/time.lo\n-@DRUNTIME_OS_NETBSD_TRUE@am__objects_17 = $(am__objects_16)\n-am__objects_18 = core/sys/openbsd/dlfcn.lo\n-@DRUNTIME_OS_OPENBSD_TRUE@am__objects_19 = $(am__objects_18)\n-am__objects_20 = core/sys/linux/config.lo core/sys/linux/dlfcn.lo \\\n+@DRUNTIME_OS_NETBSD_TRUE@am__objects_18 = $(am__objects_17)\n+am__objects_19 = core/sys/openbsd/dlfcn.lo\n+@DRUNTIME_OS_OPENBSD_TRUE@am__objects_20 = $(am__objects_19)\n+am__objects_21 = core/sys/linux/config.lo core/sys/linux/dlfcn.lo \\\n \tcore/sys/linux/elf.lo core/sys/linux/epoll.lo \\\n \tcore/sys/linux/errno.lo core/sys/linux/execinfo.lo \\\n \tcore/sys/linux/fcntl.lo core/sys/linux/ifaddrs.lo \\\n@@ -323,8 +333,8 @@ am__objects_20 = core/sys/linux/config.lo core/sys/linux/dlfcn.lo \\\n \tcore/sys/linux/sys/xattr.lo core/sys/linux/termios.lo \\\n \tcore/sys/linux/time.lo core/sys/linux/timerfd.lo \\\n \tcore/sys/linux/tipc.lo core/sys/linux/unistd.lo\n-@DRUNTIME_OS_LINUX_TRUE@am__objects_21 = $(am__objects_20)\n-am__objects_22 = core/sys/windows/accctrl.lo \\\n+@DRUNTIME_OS_LINUX_TRUE@am__objects_22 = $(am__objects_21)\n+am__objects_23 = core/sys/windows/accctrl.lo \\\n \tcore/sys/windows/aclapi.lo core/sys/windows/aclui.lo \\\n \tcore/sys/windows/basetsd.lo core/sys/windows/basetyps.lo \\\n \tcore/sys/windows/cderr.lo core/sys/windows/cguid.lo \\\n@@ -407,8 +417,8 @@ am__objects_22 = core/sys/windows/accctrl.lo \\\n \tcore/sys/windows/winspool.lo core/sys/windows/winsvc.lo \\\n \tcore/sys/windows/winuser.lo core/sys/windows/winver.lo \\\n \tcore/sys/windows/wtsapi32.lo core/sys/windows/wtypes.lo\n-@DRUNTIME_OS_MINGW_TRUE@am__objects_23 = $(am__objects_22)\n-am__objects_24 = core/sys/solaris/dlfcn.lo core/sys/solaris/elf.lo \\\n+@DRUNTIME_OS_MINGW_TRUE@am__objects_24 = $(am__objects_23)\n+am__objects_25 = core/sys/solaris/dlfcn.lo core/sys/solaris/elf.lo \\\n \tcore/sys/solaris/execinfo.lo core/sys/solaris/libelf.lo \\\n \tcore/sys/solaris/link.lo core/sys/solaris/sys/elf.lo \\\n \tcore/sys/solaris/sys/elf_386.lo \\\n@@ -419,17 +429,25 @@ am__objects_24 = core/sys/solaris/dlfcn.lo core/sys/solaris/elf.lo \\\n \tcore/sys/solaris/sys/priocntl.lo \\\n \tcore/sys/solaris/sys/procset.lo core/sys/solaris/sys/types.lo \\\n \tcore/sys/solaris/time.lo\n-@DRUNTIME_OS_SOLARIS_TRUE@am__objects_25 = $(am__objects_24)\n-am__objects_26 = gcc/config.lo gcc/libbacktrace.lo\n-am__objects_27 = $(am__objects_1) $(am__objects_3) $(am__objects_5) \\\n-\t$(am__objects_7) $(am__objects_9) $(am__objects_11) \\\n-\t$(am__objects_13) $(am__objects_15) $(am__objects_17) \\\n-\t$(am__objects_19) $(am__objects_21) $(am__objects_23) \\\n-\t$(am__objects_25) $(am__objects_26)\n-am__objects_28 = core/stdc/libgdruntime_la-errno_.lo\n-am__objects_29 = core/libgdruntime_la-threadasm.lo\n-am__objects_30 = $(am__objects_27) $(am__objects_28) $(am__objects_29)\n-am_libgdruntime_la_OBJECTS = $(am__objects_30)\n+@DRUNTIME_OS_SOLARIS_TRUE@am__objects_26 = $(am__objects_25)\n+@DRUNTIME_CPU_AARCH64_TRUE@am__objects_27 = config/aarch64/libgdruntime_la-switchcontext.lo\n+@DRUNTIME_CPU_ARM_TRUE@am__objects_28 = config/arm/libgdruntime_la-switchcontext.lo\n+@DRUNTIME_CPU_MIPS_TRUE@am__objects_29 = config/mips/libgdruntime_la-switchcontext.lo\n+@DRUNTIME_CPU_POWERPC_TRUE@am__objects_30 = config/powerpc/libgdruntime_la-switchcontext.lo\n+@DRUNTIME_CPU_POWERPC64_TRUE@am__objects_31 = config/powerpc64/libgdruntime_la-callwithstack.lo\n+@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_TRUE@am__objects_32 = config/mingw/libgdruntime_la-switchcontext.lo\n+@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_FALSE@am__objects_33 = config/x86/libgdruntime_la-switchcontext.lo\n+am__objects_34 = $(am__objects_4) $(am__objects_6) $(am__objects_8) \\\n+\t$(am__objects_10) $(am__objects_12) $(am__objects_14) \\\n+\t$(am__objects_16) $(am__objects_18) $(am__objects_20) \\\n+\t$(am__objects_22) $(am__objects_24) $(am__objects_26) \\\n+\t$(am__objects_27) $(am__objects_28) $(am__objects_29) \\\n+\t$(am__objects_30) $(am__objects_31) $(am__objects_32) \\\n+\t$(am__objects_33)\n+am__objects_35 = gcc/config.lo gcc/libbacktrace.lo\n+am__objects_36 = $(am__objects_1) $(am__objects_2) $(am__objects_34) \\\n+\t$(am__objects_35)\n+am_libgdruntime_la_OBJECTS = $(am__objects_36)\n libgdruntime_la_OBJECTS = $(am_libgdruntime_la_OBJECTS)\n AM_V_P = $(am__v_P_@AM_V@)\n am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)\n@@ -692,20 +710,22 @@ ALL_DRUNTIME_INSTALL_DSOURCES = $(DRUNTIME_DSOURCES) \\\n \n \n # Setup source files depending on configure\n-\n-# Generated by configure\n-ALL_DRUNTIME_COMPILE_DSOURCES = $(DRUNTIME_DSOURCES) $(am__append_1) \\\n-\t$(am__append_2) $(am__append_3) $(am__append_4) \\\n-\t$(am__append_5) $(am__append_6) $(am__append_7) \\\n-\t$(am__append_8) $(am__append_9) $(am__append_10) \\\n-\t$(am__append_11) $(am__append_12) \\\n-\t$(DRUNTIME_DSOURCES_GENERATED)\n+DRUNTIME_SOURCES_CONFIGURED = $(am__append_1) $(am__append_2) \\\n+\t$(am__append_3) $(am__append_4) $(am__append_5) \\\n+\t$(am__append_6) $(am__append_7) $(am__append_8) \\\n+\t$(am__append_9) $(am__append_10) $(am__append_11) \\\n+\t$(am__append_12) $(am__append_13) $(am__append_14) \\\n+\t$(am__append_15) $(am__append_16) $(am__append_17) \\\n+\t$(am__append_18) $(am__append_19)\n \n # Provide __start_minfo, __stop_minfo if linker doesn't.\n @DRUNTIME_OS_MINFO_BRACKETING_FALSE@DRTSTUFF = gcc/drtbegin.o gcc/drtend.o\n @DRUNTIME_OS_MINFO_BRACKETING_FALSE@toolexeclib_DATA = $(DRTSTUFF)\n-ALL_DRUNTIME_SOURCES = $(ALL_DRUNTIME_COMPILE_DSOURCES) $(DRUNTIME_CSOURCES) \\\n-\t$(DRUNTIME_SSOURCES)\n+\n+# Generated by configure\n+DRUNTIME_DSOURCES_GENERATED = gcc/config.d gcc/libbacktrace.d\n+ALL_DRUNTIME_SOURCES = $(DRUNTIME_DSOURCES) $(DRUNTIME_CSOURCES) \\\n+\t$(DRUNTIME_SOURCES_CONFIGURED) $(DRUNTIME_DSOURCES_GENERATED)\n \n toolexeclib_LTLIBRARIES = libgdruntime.la\n libgdruntime_la_SOURCES = $(ALL_DRUNTIME_SOURCES)\n@@ -715,12 +735,11 @@ libgdruntime_la_LDFLAGS = -Wc,-nophoboslib,-dstartfiles,-B../src,-Bgcc \\\n \n libgdruntime_la_LIBADD = $(LIBATOMIC) $(LIBBACKTRACE)\n libgdruntime_la_DEPENDENCIES = $(DRTSTUFF)\n-DRUNTIME_DSOURCES_GENERATED = gcc/config.d gcc/libbacktrace.d\n+\n # Source file definitions. Boring stuff, auto-generated with\n # https://gist.github.com/jpf91/8ad1dbc9902d6ad876313f134c6527d1\n # Can't use wildcards here:\n # https://www.gnu.org/software/automake/manual/html_node/Wildcards.html\n-DRUNTIME_SSOURCES = core/threadasm.S\n DRUNTIME_CSOURCES = core/stdc/errno_.c\n DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/checkedint.d core/cpuid.d core/demangle.d core/exception.d \\\n@@ -739,13 +758,13 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/sync/rwmutex.d core/sync/semaphore.d core/thread.d core/time.d \\\n \tcore/vararg.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n \tgcc/sections/android.d gcc/sections/elf_shared.d gcc/sections/osx.d \\\n-\tgcc/sections/package.d gcc/sections/win32.d \\\n-\tgcc/sections/win64.d gcc/unwind/arm.d gcc/unwind/arm_common.d \\\n-\tgcc/unwind/c6x.d gcc/unwind/generic.d gcc/unwind/package.d \\\n-\tgcc/unwind/pe.d object.d rt/aApply.d rt/aApplyR.d rt/aaA.d rt/adi.d \\\n-\trt/arrayassign.d rt/arraycast.d rt/arraycat.d rt/cast_.d rt/config.d \\\n-\trt/critical_.d rt/deh.d rt/dmain2.d rt/invariant.d rt/lifetime.d \\\n-\trt/memory.d rt/minfo.d rt/monitor_.d rt/obj.d rt/qsort.d rt/sections.d \\\n+\tgcc/sections/package.d gcc/sections/win32.d gcc/sections/win64.d \\\n+\tgcc/unwind/arm.d gcc/unwind/arm_common.d gcc/unwind/c6x.d \\\n+\tgcc/unwind/generic.d gcc/unwind/package.d gcc/unwind/pe.d object.d \\\n+\trt/aApply.d rt/aApplyR.d rt/aaA.d rt/adi.d rt/arrayassign.d \\\n+\trt/arraycast.d rt/arraycat.d rt/cast_.d rt/config.d rt/critical_.d \\\n+\trt/deh.d rt/dmain2.d rt/invariant.d rt/lifetime.d rt/memory.d \\\n+\trt/minfo.d rt/monitor_.d rt/obj.d rt/qsort.d rt/sections.d \\\n \trt/switch_.d rt/tlsgc.d rt/typeinfo/ti_Acdouble.d \\\n \trt/typeinfo/ti_Acfloat.d rt/typeinfo/ti_Acreal.d \\\n \trt/typeinfo/ti_Adouble.d rt/typeinfo/ti_Afloat.d rt/typeinfo/ti_Ag.d \\\n@@ -1182,6 +1201,7 @@ rt/util/container/treap.lo: rt/util/container/$(am__dirstamp)\n rt/util/random.lo: rt/util/$(am__dirstamp)\n rt/util/typeinfo.lo: rt/util/$(am__dirstamp)\n rt/util/utf.lo: rt/util/$(am__dirstamp)\n+core/stdc/libgdruntime_la-errno_.lo: core/stdc/$(am__dirstamp)\n gc/$(am__dirstamp):\n \t@$(MKDIR_P) gc\n \t@: > gc/$(am__dirstamp)\n@@ -1629,16 +1649,63 @@ core/sys/solaris/sys/priocntl.lo:  \\\n core/sys/solaris/sys/procset.lo: core/sys/solaris/sys/$(am__dirstamp)\n core/sys/solaris/sys/types.lo: core/sys/solaris/sys/$(am__dirstamp)\n core/sys/solaris/time.lo: core/sys/solaris/$(am__dirstamp)\n+config/aarch64/$(am__dirstamp):\n+\t@$(MKDIR_P) config/aarch64\n+\t@: > config/aarch64/$(am__dirstamp)\n+config/aarch64/libgdruntime_la-switchcontext.lo:  \\\n+\tconfig/aarch64/$(am__dirstamp)\n+config/arm/$(am__dirstamp):\n+\t@$(MKDIR_P) config/arm\n+\t@: > config/arm/$(am__dirstamp)\n+config/arm/libgdruntime_la-switchcontext.lo:  \\\n+\tconfig/arm/$(am__dirstamp)\n+config/mips/$(am__dirstamp):\n+\t@$(MKDIR_P) config/mips\n+\t@: > config/mips/$(am__dirstamp)\n+config/mips/libgdruntime_la-switchcontext.lo:  \\\n+\tconfig/mips/$(am__dirstamp)\n+config/powerpc/$(am__dirstamp):\n+\t@$(MKDIR_P) config/powerpc\n+\t@: > config/powerpc/$(am__dirstamp)\n+config/powerpc/libgdruntime_la-switchcontext.lo:  \\\n+\tconfig/powerpc/$(am__dirstamp)\n+config/powerpc64/$(am__dirstamp):\n+\t@$(MKDIR_P) config/powerpc64\n+\t@: > config/powerpc64/$(am__dirstamp)\n+config/powerpc64/libgdruntime_la-callwithstack.lo:  \\\n+\tconfig/powerpc64/$(am__dirstamp)\n+config/mingw/$(am__dirstamp):\n+\t@$(MKDIR_P) config/mingw\n+\t@: > config/mingw/$(am__dirstamp)\n+config/mingw/libgdruntime_la-switchcontext.lo:  \\\n+\tconfig/mingw/$(am__dirstamp)\n+config/x86/$(am__dirstamp):\n+\t@$(MKDIR_P) config/x86\n+\t@: > config/x86/$(am__dirstamp)\n+config/x86/libgdruntime_la-switchcontext.lo:  \\\n+\tconfig/x86/$(am__dirstamp)\n gcc/config.lo: gcc/$(am__dirstamp)\n gcc/libbacktrace.lo: gcc/$(am__dirstamp)\n-core/stdc/libgdruntime_la-errno_.lo: core/stdc/$(am__dirstamp)\n-core/libgdruntime_la-threadasm.lo: core/$(am__dirstamp)\n \n libgdruntime.la: $(libgdruntime_la_OBJECTS) $(libgdruntime_la_DEPENDENCIES) $(EXTRA_libgdruntime_la_DEPENDENCIES) \n \t$(AM_V_GEN)$(libgdruntime_la_LINK) -rpath $(toolexeclibdir) $(libgdruntime_la_OBJECTS) $(libgdruntime_la_LIBADD) $(LIBS)\n \n mostlyclean-compile:\n \t-rm -f *.$(OBJEXT)\n+\t-rm -f config/aarch64/*.$(OBJEXT)\n+\t-rm -f config/aarch64/*.lo\n+\t-rm -f config/arm/*.$(OBJEXT)\n+\t-rm -f config/arm/*.lo\n+\t-rm -f config/mingw/*.$(OBJEXT)\n+\t-rm -f config/mingw/*.lo\n+\t-rm -f config/mips/*.$(OBJEXT)\n+\t-rm -f config/mips/*.lo\n+\t-rm -f config/powerpc/*.$(OBJEXT)\n+\t-rm -f config/powerpc/*.lo\n+\t-rm -f config/powerpc64/*.$(OBJEXT)\n+\t-rm -f config/powerpc64/*.lo\n+\t-rm -f config/x86/*.$(OBJEXT)\n+\t-rm -f config/x86/*.lo\n \t-rm -f core/*.$(OBJEXT)\n \t-rm -f core/*.lo\n \t-rm -f core/internal/*.$(OBJEXT)\n@@ -1734,8 +1801,26 @@ distclean-compile:\n .S.lo:\n \t$(AM_V_CPPAS)$(LTCPPASCOMPILE) -c -o $@ $<\n \n-core/libgdruntime_la-threadasm.lo: core/threadasm.S\n-\t$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o core/libgdruntime_la-threadasm.lo `test -f 'core/threadasm.S' || echo '$(srcdir)/'`core/threadasm.S\n+config/aarch64/libgdruntime_la-switchcontext.lo: config/aarch64/switchcontext.S\n+\t$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o config/aarch64/libgdruntime_la-switchcontext.lo `test -f 'config/aarch64/switchcontext.S' || echo '$(srcdir)/'`config/aarch64/switchcontext.S\n+\n+config/arm/libgdruntime_la-switchcontext.lo: config/arm/switchcontext.S\n+\t$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o config/arm/libgdruntime_la-switchcontext.lo `test -f 'config/arm/switchcontext.S' || echo '$(srcdir)/'`config/arm/switchcontext.S\n+\n+config/mips/libgdruntime_la-switchcontext.lo: config/mips/switchcontext.S\n+\t$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o config/mips/libgdruntime_la-switchcontext.lo `test -f 'config/mips/switchcontext.S' || echo '$(srcdir)/'`config/mips/switchcontext.S\n+\n+config/powerpc/libgdruntime_la-switchcontext.lo: config/powerpc/switchcontext.S\n+\t$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o config/powerpc/libgdruntime_la-switchcontext.lo `test -f 'config/powerpc/switchcontext.S' || echo '$(srcdir)/'`config/powerpc/switchcontext.S\n+\n+config/powerpc64/libgdruntime_la-callwithstack.lo: config/powerpc64/callwithstack.S\n+\t$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o config/powerpc64/libgdruntime_la-callwithstack.lo `test -f 'config/powerpc64/callwithstack.S' || echo '$(srcdir)/'`config/powerpc64/callwithstack.S\n+\n+config/mingw/libgdruntime_la-switchcontext.lo: config/mingw/switchcontext.S\n+\t$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o config/mingw/libgdruntime_la-switchcontext.lo `test -f 'config/mingw/switchcontext.S' || echo '$(srcdir)/'`config/mingw/switchcontext.S\n+\n+config/x86/libgdruntime_la-switchcontext.lo: config/x86/switchcontext.S\n+\t$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o config/x86/libgdruntime_la-switchcontext.lo `test -f 'config/x86/switchcontext.S' || echo '$(srcdir)/'`config/x86/switchcontext.S\n \n .c.o:\n \t$(AM_V_CC)$(COMPILE) -c -o $@ $<\n@@ -1754,6 +1839,13 @@ mostlyclean-libtool:\n \n clean-libtool:\n \t-rm -rf .libs _libs\n+\t-rm -rf config/aarch64/.libs config/aarch64/_libs\n+\t-rm -rf config/arm/.libs config/arm/_libs\n+\t-rm -rf config/mingw/.libs config/mingw/_libs\n+\t-rm -rf config/mips/.libs config/mips/_libs\n+\t-rm -rf config/powerpc/.libs config/powerpc/_libs\n+\t-rm -rf config/powerpc64/.libs config/powerpc64/_libs\n+\t-rm -rf config/x86/.libs config/x86/_libs\n \t-rm -rf core/.libs core/_libs\n \t-rm -rf core/internal/.libs core/internal/_libs\n \t-rm -rf core/stdc/.libs core/stdc/_libs\n@@ -1901,6 +1993,13 @@ clean-generic:\n distclean-generic:\n \t-test -z \"$(CONFIG_CLEAN_FILES)\" || rm -f $(CONFIG_CLEAN_FILES)\n \t-test . = \"$(srcdir)\" || test -z \"$(CONFIG_CLEAN_VPATH_FILES)\" || rm -f $(CONFIG_CLEAN_VPATH_FILES)\n+\t-rm -f config/aarch64/$(am__dirstamp)\n+\t-rm -f config/arm/$(am__dirstamp)\n+\t-rm -f config/mingw/$(am__dirstamp)\n+\t-rm -f config/mips/$(am__dirstamp)\n+\t-rm -f config/powerpc/$(am__dirstamp)\n+\t-rm -f config/powerpc64/$(am__dirstamp)\n+\t-rm -f config/x86/$(am__dirstamp)\n \t-rm -f core/$(am__dirstamp)\n \t-rm -f core/internal/$(am__dirstamp)\n \t-rm -f core/stdc/$(am__dirstamp)"}, {"sha": "0a29baceca600a091d4419482cc08abbf949deb8", "filename": "libphobos/libdruntime/config/aarch64/switchcontext.S", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Faarch64%2Fswitchcontext.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Faarch64%2Fswitchcontext.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Faarch64%2Fswitchcontext.S?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -0,0 +1,103 @@\n+/* AArch64 support code for fibers and multithreading.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../common/threadasm.S\"\n+\n+/**\n+ * preserve/restore AAPCS64 registers\n+ *   x19-x28 5.1.1 64-bit callee saved\n+ *   x29 fp, or possibly callee saved reg - depends on platform choice 5.2.3)\n+ *   x30 lr\n+ *   d8-d15  5.1.2 says callee only must save bottom 64-bits (the \"d\" regs)\n+ *\n+ * saved regs on stack will look like:\n+ *   19: x19\n+ *   18: x20\n+ *   ...\n+ *   10: x28\n+ *    9: x29 (fp)  <-- oldp / *newp save stack top\n+ *    8: x30 (lr)\n+ *    7: d8\n+ *   ...\n+ *    0: d15       <-- sp\n+ */\n+    .text\n+    .global CSYM(fiber_switchContext)\n+    .type CSYM(fiber_switchContext), %function\n+    .align 4\n+CSYM(fiber_switchContext):\n+    .cfi_startproc\n+    stp     d15, d14, [sp, #-20*8]!\n+    stp     d13, d12, [sp, #2*8]\n+    stp     d11, d10, [sp, #4*8]\n+    stp     d9, d8,   [sp, #6*8]\n+    stp     x30, x29, [sp, #8*8] // lr, fp\n+    stp     x28, x27, [sp, #10*8]\n+    stp     x26, x25, [sp, #12*8]\n+    stp     x24, x23, [sp, #14*8]\n+    stp     x22, x21, [sp, #16*8]\n+    stp     x20, x19, [sp, #18*8]\n+\n+    // oldp is set above saved lr (x30) to hide it and float regs\n+    // from GC\n+    add     x19, sp, #9*8\n+    str     x19, [x0]       // *oldp tstack\n+    sub     sp, x1, #9*8    // switch to newp sp\n+\n+    ldp     x20, x19, [sp, #18*8]\n+    ldp     x22, x21, [sp, #16*8]\n+    ldp     x24, x23, [sp, #14*8]\n+    ldp     x26, x25, [sp, #12*8]\n+    ldp     x28, x27, [sp, #10*8]\n+    ldp     x30, x29, [sp, #8*8] // lr, fp\n+    ldp     d9, d8,   [sp, #6*8]\n+    ldp     d11, d10, [sp, #4*8]\n+    ldp     d13, d12, [sp, #2*8]\n+    ldp     d15, d14, [sp], #20*8\n+    ret\n+    .cfi_endproc\n+    .size CSYM(fiber_switchContext),.-CSYM(fiber_switchContext)\n+\n+/**\n+ * When generating any kind of backtrace (gdb, exception handling) for\n+ * a function called in a Fiber, we need to tell the unwinder to stop\n+ * at our Fiber main entry point, i.e. we need to mark the bottom of\n+ * the call stack. This can be done by clearing the link register lr\n+ * prior to calling fiber_entryPoint (i.e. in fiber_switchContext) or\n+ * using a .cfi_undefined directive for the link register in the\n+ * Fiber entry point. cfi_undefined seems to yield better results in gdb.\n+ * Unfortunately we can't place it into fiber_entryPoint using inline\n+ * asm, so we use this trampoline instead.\n+ */\n+    .text\n+    .global CSYM(fiber_trampoline)\n+    .p2align  2\n+    .type CSYM(fiber_trampoline), %function\n+CSYM(fiber_trampoline):\n+    .cfi_startproc\n+    .cfi_undefined x30\n+    // fiber_entryPoint never returns\n+    bl CSYM(fiber_entryPoint)\n+    .cfi_endproc\n+    .size CSYM(fiber_trampoline),.-CSYM(fiber_trampoline)"}, {"sha": "bc510cf81b56c9e9d01242e60f33486c87687650", "filename": "libphobos/libdruntime/config/arm/switchcontext.S", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Farm%2Fswitchcontext.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Farm%2Fswitchcontext.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Farm%2Fswitchcontext.S?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -0,0 +1,118 @@\n+/* ARM support code for fibers and multithreading.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../common/threadasm.S\"\n+\n+#if defined(__ARM_EABI__)\n+\n+/**\n+ * Performs a context switch.\n+ *\n+ * Parameters:\n+ * r0 - void** - ptr to old stack pointer\n+ * r1 - void*  - new stack pointer\n+ *\n+ * ARM EABI registers:\n+ * r0-r3   : argument/scratch registers\n+ * r4-r10  : callee-save registers\n+ * r11     : frame pointer (or a callee save register if fp isn't needed)\n+ * r12 =ip : inter procedure register. We can treat it like any other scratch\n+ *           register\n+ * r13 =sp : stack pointer\n+ * r14 =lr : link register, it contains the return address (belonging to the\n+ *           function which called us)\n+ * r15 =pc : program counter\n+ *\n+ * For floating point registers:\n+ * According to AAPCS (version 2.09, section 5.1.2) only the d8-d15 registers\n+ * need to be preserved across method calls. This applies to all ARM FPU\n+ * variants, whether they have 16 or 32 double registers NEON support or not,\n+ * half-float support or not and so on does not matter.\n+ *\n+ * Note: If this file was compiled with -mfloat-abi=soft but the code runs on a\n+ * softfp system with fpu the d8-d15 registers won't be saved (we do not know\n+ * that the system has got a fpu in that case) but the registers might actually\n+ * be used by other code if it was compiled with -mfloat-abi=softfp.\n+ *\n+ * Interworking is only supported on ARMv5+, not on ARM v4T as ARM v4t requires\n+ * special stubs when changing from thumb to arm mode or the other way round.\n+ */\n+\n+    .text\n+#if defined(__ARM_PCS_VFP) || (defined(__ARM_PCS) && !defined(__SOFTFP__))\n+    .fpu vfp\n+#endif\n+    .global CSYM(fiber_switchContext)\n+    .type CSYM(fiber_switchContext), %function\n+    .align 4\n+CSYM(fiber_switchContext):\n+    .cfi_sections .debug_frame\n+    .cfi_startproc\n+    .fnstart\n+    push {r4-r11}\n+    // update the oldp pointer. Link register and floating point registers\n+    // stored later to prevent the GC from scanning them.\n+    str sp, [r0]\n+    // push r0 (or any other register) as well to keep stack 8byte aligned\n+    push {r0, lr}\n+\n+     // ARM_HardFloat  || ARM_SoftFP\n+#if defined(__ARM_PCS_VFP) || (defined(__ARM_PCS) && !defined(__SOFTFP__))\n+    vpush {d8-d15}\n+    // now switch over to the new stack.\n+    // Need to subtract (8*8[d8-d15]+2*4[r0, lr]) to position stack pointer\n+    // below the last saved register. Remember we saved the SP before pushing\n+    // [r0, lr, d8-d15].\n+    sub sp, r1, #72\n+    vpop {d8-d15}\n+#else\n+    sub sp, r1, #8\n+#endif\n+\n+    // we don't really care about r0, we only used that for padding.\n+    // r1 is now what used to be in the link register when saving.\n+    pop {r0, r1, r4-r11}\n+    /**\n+     * The link register for the initial jump to fiber_entryPoint must be zero:\n+     * The jump actually looks like a normal method call as we jump to the\n+     * start of the fiber_entryPoint function. Although fiber_entryPoint never\n+     * returns and therefore never accesses lr, it saves lr to the stack.\n+     * ARM unwinding will then look at the stack, find lr and think that\n+     * fiber_entryPoint was called by the function in lr! So if we have some\n+     * address in lr the unwinder will try to continue stack unwinding,\n+     * although it's already at the stack base and crash.\n+     * In all other cases the content of lr doesn't matter.\n+     * Note: If we simply loaded into lr above and then moved lr into pc, the\n+     * initial method call to fiber_entryPoint would look as if it was called\n+     * from fiber_entryPoint itself, as the fiber_entryPoint address is in lr\n+     * on the initial context switch.\n+     */\n+    mov lr, #0\n+    // return by writing lr into pc\n+    mov pc, r1\n+    .fnend\n+    .cfi_endproc\n+    .size CSYM(fiber_switchContext),.-CSYM(fiber_switchContext)\n+\n+#endif"}, {"sha": "4f43722c2dbc51a2343605bb15d342fa4040d15f", "filename": "libphobos/libdruntime/config/common/threadasm.S", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fcommon%2Fthreadasm.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fcommon%2Fthreadasm.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fcommon%2Fthreadasm.S?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -0,0 +1,43 @@\n+/* Support code for fibers and multithreading.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#if (__linux__ || __FreeBSD__ || __NetBSD__ || __DragonFly__) && __ELF__\n+/*\n+ * Mark the resulting object file as not requiring execution permissions on\n+ * stack memory. The absence of this section would mark the whole resulting\n+ * library as requiring an executable stack, making it impossible to\n+ * dynamically load druntime on several Linux platforms where this is\n+ * forbidden due to security policies.\n+ */\n+    .section .note.GNU-stack,\"\",%progbits\n+#endif\n+\n+/* Let preprocessor tell us if C symbols have a prefix: __USER_LABEL_PREFIX__ */\n+#ifdef __USER_LABEL_PREFIX__\n+#define __CONCAT2(a, b) a ## b\n+#define __CONCAT(a, b) __CONCAT2(a, b)\n+#define CSYM(name) __CONCAT(__USER_LABEL_PREFIX__, name)\n+#else\n+#define CSYM(name) name\n+#endif"}, {"sha": "2951feab0df9df3fe4954d3b72b9db933fa88196", "filename": "libphobos/libdruntime/config/mingw/switchcontext.S", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fmingw%2Fswitchcontext.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fmingw%2Fswitchcontext.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fmingw%2Fswitchcontext.S?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -0,0 +1,109 @@\n+/* Windows i386 support code for fibers and multithreading.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../common/threadasm.S\"\n+\n+#if defined(__x86_64__)\n+\n+    .text\n+    .globl CSYM(fiber_switchContext)\n+    .type CSYM(fiber_switchContext), @function\n+    .align 16\n+CSYM(fiber_switchContext):\n+    .cfi_startproc\n+    pushq %RBP;\n+    movq %RSP, %RBP;\n+    pushq %RBX;\n+    pushq %R12;\n+    pushq %R13;\n+    pushq %R14;\n+    pushq %R15;\n+    pushq %GS:0;\n+    pushq %GS:8;\n+    pushq %GS:16;\n+\n+    // store oldp\n+    movq %RSP, (%RCX);\n+    // load newp to begin context switch\n+    movq %RDX, %RSP;\n+\n+    // load saved state from new stack\n+    popq %GS:16;\n+    popq %GS:8;\n+    popq %GS:0;\n+    popq %R15;\n+    popq %R14;\n+    popq %R13;\n+    popq %R12;\n+    popq %RBX;\n+    popq %RBP;\n+\n+    // 'return' to complete switch\n+    popq %RCX;\n+    jmp *%RCX;\n+    .cfi_endproc\n+    .size CSYM(fiber_switchContext),.-CSYM(fiber_switchContext)\n+\n+#elif defined(_X86_)\n+\n+    .text\n+    .globl CSYM(fiber_switchContext)\n+    .type CSYM(fiber_switchContext), @function\n+    .align 16\n+CSYM(fiber_switchContext):\n+    .cfi_startproc\n+    // Save current stack state.save current stack state\n+    // Standard CDECL prologue.\n+    push %EBP;\n+    mov  %ESP, %EBP;\n+    push %EDI;\n+    push %ESI;\n+    push %EBX;\n+    push %FS:0;\n+    push %FS:4;\n+    push %FS:8;\n+    push %EAX;\n+\n+    // store oldp again with more accurate address\n+    mov 8(%EBP), %EAX;\n+    mov %ESP, (%EAX);\n+    // load newp to begin context switch\n+    mov 12(%EBP), %ESP;\n+\n+    // load saved state from new stack\n+    pop %EAX;\n+    pop %FS:8;\n+    pop %FS:4;\n+    pop %FS:0;\n+    pop %EBX;\n+    pop %ESI;\n+    pop %EDI;\n+    pop %EBP;\n+\n+    // 'return' to complete switch\n+    ret;\n+    .cfi_endproc\n+    .size CSYM(fiber_switchContext),.-CSYM(fiber_switchContext)\n+\n+#endif"}, {"sha": "7604ba1ebbd89d1232794b40179ff4b54db96406", "filename": "libphobos/libdruntime/config/mips/switchcontext.S", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fmips%2Fswitchcontext.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fmips%2Fswitchcontext.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fmips%2Fswitchcontext.S?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -0,0 +1,102 @@\n+/* MIPS support code for fibers and multithreading.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../common/threadasm.S\"\n+\n+#if _MIPS_SIM == _ABIO32\n+\n+/**\n+ * Performs a context switch.\n+ *\n+ * $a0 - void** - ptr to old stack pointer\n+ * $a1 - void*  - new stack pointer\n+ *\n+ */\n+    .text\n+    .globl fiber_switchContext\n+    .align 2\n+    .ent fiber_switchContext,0\n+fiber_switchContext:\n+    .cfi_startproc\n+    addiu $sp, $sp, -(10 * 4)\n+\n+    // fp regs and return address are stored below the stack\n+    // because we don't want the GC to scan them.\n+\n+#ifdef __mips_hard_float\n+#define ALIGN8(val) (val + (-val & 7))\n+#define BELOW (ALIGN8(6 * 8 + 4))\n+    sdc1 $f20, (0 * 8 - BELOW)($sp)\n+    sdc1 $f22, (1 * 8 - BELOW)($sp)\n+    sdc1 $f24, (2 * 8 - BELOW)($sp)\n+    sdc1 $f26, (3 * 8 - BELOW)($sp)\n+    sdc1 $f28, (4 * 8 - BELOW)($sp)\n+    sdc1 $f30, (5 * 8 - BELOW)($sp)\n+#endif\n+    sw $ra, -4($sp)\n+\n+    sw $s0, (0 * 4)($sp)\n+    sw $s1, (1 * 4)($sp)\n+    sw $s2, (2 * 4)($sp)\n+    sw $s3, (3 * 4)($sp)\n+    sw $s4, (4 * 4)($sp)\n+    sw $s5, (5 * 4)($sp)\n+    sw $s6, (6 * 4)($sp)\n+    sw $s7, (7 * 4)($sp)\n+    sw $s8, (8 * 4)($sp)\n+    sw $gp, (9 * 4)($sp)\n+\n+    // swap stack pointer\n+    sw $sp, 0($a0)\n+    move $sp, $a1\n+\n+#ifdef __mips_hard_float\n+    ldc1 $f20, (0 * 8 - BELOW)($sp)\n+    ldc1 $f22, (1 * 8 - BELOW)($sp)\n+    ldc1 $f24, (2 * 8 - BELOW)($sp)\n+    ldc1 $f26, (3 * 8 - BELOW)($sp)\n+    ldc1 $f28, (4 * 8 - BELOW)($sp)\n+    ldc1 $f30, (5 * 8 - BELOW)($sp)\n+#endif\n+    lw $ra, -4($sp)\n+\n+    lw $s0, (0 * 4)($sp)\n+    lw $s1, (1 * 4)($sp)\n+    lw $s2, (2 * 4)($sp)\n+    lw $s3, (3 * 4)($sp)\n+    lw $s4, (4 * 4)($sp)\n+    lw $s5, (5 * 4)($sp)\n+    lw $s6, (6 * 4)($sp)\n+    lw $s7, (7 * 4)($sp)\n+    lw $s8, (8 * 4)($sp)\n+    lw $gp, (9 * 4)($sp)\n+\n+    addiu $sp, $sp, (10 * 4)\n+\n+    jr $ra // return\n+    .cfi_endproc\n+    .end fiber_switchContext\n+    .size fiber_switchContext,.-fiber_switchContext\n+\n+#endif"}, {"sha": "3d0aebde94e7b0e6c7f2e392d1f8e1345ab6d9c9", "filename": "libphobos/libdruntime/config/powerpc/switchcontext.S", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fpowerpc%2Fswitchcontext.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fpowerpc%2Fswitchcontext.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fpowerpc%2Fswitchcontext.S?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -0,0 +1,150 @@\n+/* PowerPC support code for fibers and multithreading.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../common/threadasm.S\"\n+\n+/**\n+ * Performs a context switch.\n+ *\n+ * r3 - old context pointer\n+ * r4 - new context pointer\n+ *\n+ */\n+    .text\n+    .globl CSYM(_fiber_switchContext)\n+    .type CSYM(_fiber_switchContext), @function\n+    .align 2\n+CSYM(_fiber_switchContext):\n+    .cfi_startproc\n+    /* Save linkage area */\n+    mflr        0\n+    mfcr        5\n+    stw     0, 8(1)\n+    stw     5, 4(1)\n+\n+    /* Save GPRs */\n+    stw     11, (-1 * 4)(1)\n+    stw     13, (-2 * 4)(1)\n+    stw     14, (-3 * 4)(1)\n+    stw     15, (-4 * 4)(1)\n+    stw     16, (-5 * 4)(1)\n+    stw     17, (-6 * 4)(1)\n+    stw     18, (-7 * 4)(1)\n+    stw     19, (-8 * 4)(1)\n+    stw     20, (-9 * 4)(1)\n+    stw     21, (-10 * 4)(1)\n+    stw     22, (-11 * 4)(1)\n+    stw     23, (-12 * 4)(1)\n+    stw     24, (-13 * 4)(1)\n+    stw     25, (-14 * 4)(1)\n+    stw     26, (-15 * 4)(1)\n+    stw     27, (-16 * 4)(1)\n+    stw     28, (-17 * 4)(1)\n+    stw     29, (-18 * 4)(1)\n+    stw     30, (-19 * 4)(1)\n+    stwu    31, (-20 * 4)(1)\n+\n+    /* We update the stack pointer here, since we do not want the GC to\n+       scan the floating point registers. */\n+\n+    /* Save FPRs */\n+    stfd    14, (-1 * 8)(1)\n+    stfd    15, (-2 * 8)(1)\n+    stfd    16, (-3 * 8)(1)\n+    stfd    17, (-4 * 8)(1)\n+    stfd    18, (-5 * 8)(1)\n+    stfd    19, (-6 * 8)(1)\n+    stfd    20, (-7 * 8)(1)\n+    stfd    21, (-8 * 8)(1)\n+    stfd    22, (-9 * 8)(1)\n+    stfd    23, (-10 * 8)(1)\n+    stfd    24, (-11 * 8)(1)\n+    stfd    25, (-12 * 8)(1)\n+    stfd    26, (-13 * 8)(1)\n+    stfd    27, (-14 * 8)(1)\n+    stfd    28, (-15 * 8)(1)\n+    stfd    29, (-16 * 8)(1)\n+    stfd    30, (-17 * 8)(1)\n+    stfd    31, (-18 * 8)(1)\n+\n+    /* Update the old stack pointer */\n+    stw     1, 0(3)\n+\n+    /* Set new stack pointer */\n+    addi        1, 4, 20 * 4\n+\n+    /* Restore linkage area */\n+    lwz     0, 8(1)\n+    lwz     5, 4(1)\n+\n+    /* Restore GPRs */\n+    lwz     11, (-1 * 4)(1)\n+    lwz     13, (-2 * 4)(1)\n+    lwz     14, (-3 * 4)(1)\n+    lwz     15, (-4 * 4)(1)\n+    lwz     16, (-5 * 4)(1)\n+    lwz     17, (-6 * 4)(1)\n+    lwz     18, (-7 * 4)(1)\n+    lwz     19, (-8 * 4)(1)\n+    lwz     20, (-9 * 4)(1)\n+    lwz     21, (-10 * 4)(1)\n+    lwz     22, (-11 * 4)(1)\n+    lwz     23, (-12 * 4)(1)\n+    lwz     24, (-13 * 4)(1)\n+    lwz     25, (-14 * 4)(1)\n+    lwz     26, (-15 * 4)(1)\n+    lwz     27, (-16 * 4)(1)\n+    lwz     28, (-17 * 4)(1)\n+    lwz     29, (-18 * 4)(1)\n+    lwz     30, (-19 * 4)(1)\n+    lwz     31, (-20 * 4)(1)\n+\n+    /* Restore FPRs */\n+    lfd     14, (-1 * 8)(4)\n+    lfd     15, (-2 * 8)(4)\n+    lfd     16, (-3 * 8)(4)\n+    lfd     17, (-4 * 8)(4)\n+    lfd     18, (-5 * 8)(4)\n+    lfd     19, (-6 * 8)(4)\n+    lfd     20, (-7 * 8)(4)\n+    lfd     21, (-8 * 8)(4)\n+    lfd     22, (-9 * 8)(4)\n+    lfd     23, (-10 * 8)(4)\n+    lfd     24, (-11 * 8)(4)\n+    lfd     25, (-12 * 8)(4)\n+    lfd     26, (-13 * 8)(4)\n+    lfd     27, (-14 * 8)(4)\n+    lfd     28, (-15 * 8)(4)\n+    lfd     29, (-16 * 8)(4)\n+    lfd     30, (-17 * 8)(4)\n+    lfd     31, (-18 * 8)(4)\n+\n+    /* Set condition and link register */\n+    mtcr        5\n+    mtlr        0\n+\n+    /* Return and switch context */\n+    blr\n+    .cfi_endproc\n+    .size CSYM(_fiber_switchContext),.-CSYM(_fiber_switchContext)"}, {"sha": "79ecd69119909b41e9a6efe9486a2cda282f6fd9", "filename": "libphobos/libdruntime/config/powerpc64/callwithstack.S", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fpowerpc64%2Fcallwithstack.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fpowerpc64%2Fcallwithstack.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fpowerpc64%2Fcallwithstack.S?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -0,0 +1,168 @@\n+/* PowerPC64 support code for fibers and multithreading.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../common/threadasm.S\"\n+\n+#if defined(_CALL_ELF) && _CALL_ELF == 2\n+#define USE_ABI_2\n+#define LINKAGE_SZ   32\n+#define LR_OFS       16\n+#define TOC_OFS      24\n+#define GPR_OFS      32\n+#define STACK_SZ     (LINKAGE_SZ + 26*8)\n+#define OFS_R3_R10   GPR_OFS\n+#define OFS_R14_R31  (GPR_OFS+8*8)\n+#else\n+#define LINKAGE_SZ   48\n+#define LR_OFS       16\n+#define TOC_OFS      40\n+#define GPR_OFS      112\n+#define STACK_SZ     (LINKAGE_SZ + 8*8 + 18*8)\n+#define OFS_R3_R10   (STACK_SZ+LINKAGE_SZ)\n+#define OFS_R14_R31  GPR_OFS\n+#endif\n+\n+    .text\n+#if defined( USE_ABI_2 )\n+    .abiversion 2\n+#endif\n+    .globl  _D4core6thread18callWithStackShellFNbMDFNbPvZvZv\n+    .align  2\n+    .type   _D4core6thread18callWithStackShellFNbMDFNbPvZvZv,@function\n+#if defined( USE_ABI_2 )\n+    .section .text._D4core6thread18callWithStackShellFNbMDFNbPvZvZv,\"a\",@progbits\n+#else\n+    .section .opd,\"aw\",@progbits\n+#endif\n+_D4core6thread18callWithStackShellFNbMDFNbPvZvZv:\n+#if !defined( USE_ABI_2 )\n+    .align  3\n+    .quad .L._D4core6thread18callWithStackShellFNbMDFNbPvZvZv\n+    .quad .TOC.@tocbase\n+    .quad 0\n+#endif\n+    .text\n+/*\n+ * Called with:\n+ * r3: pointer context\n+ * r4: pointer to function\n+ */\n+.L._D4core6thread18callWithStackShellFNbMDFNbPvZvZv:\n+    .cfi_startproc\n+    stdu    1, -STACK_SZ(1)\n+    mflr    0\n+    std     0, LR_OFS(1)\n+    .cfi_def_cfa_offset 256\n+    .cfi_offset lr, 16\n+\n+    /* Save r14-r31 in general register save area */\n+    std     14, (OFS_R14_R31 + 0 * 8)(1)\n+    std     15, (OFS_R14_R31 + 1 * 8)(1)\n+    std     16, (OFS_R14_R31 + 2 * 8)(1)\n+    std     17, (OFS_R14_R31 + 3 * 8)(1)\n+    std     18, (OFS_R14_R31 + 4 * 8)(1)\n+    std     19, (OFS_R14_R31 + 5 * 8)(1)\n+    std     20, (OFS_R14_R31 + 6 * 8)(1)\n+    std     21, (OFS_R14_R31 + 7 * 8)(1)\n+    std     22, (OFS_R14_R31 + 8 * 8)(1)\n+    std     23, (OFS_R14_R31 + 9 * 8)(1)\n+    std     24, (OFS_R14_R31 + 10 * 8)(1)\n+    std     25, (OFS_R14_R31 + 11 * 8)(1)\n+    std     26, (OFS_R14_R31 + 12 * 8)(1)\n+    std     27, (OFS_R14_R31 + 13 * 8)(1)\n+    std     28, (OFS_R14_R31 + 14 * 8)(1)\n+    std     29, (OFS_R14_R31 + 15 * 8)(1)\n+    std     30, (OFS_R14_R31 + 16 * 8)(1)\n+    std     31, (OFS_R14_R31 + 17 * 8)(1)\n+\n+    /* Save r3-r10 in parameter save area of caller */\n+    std     3, (OFS_R3_R10 + 0 * 8)(1)\n+    std     4, (OFS_R3_R10 + 1 * 8)(1)\n+    std     5, (OFS_R3_R10 + 2 * 8)(1)\n+    std     6, (OFS_R3_R10 + 3 * 8)(1)\n+    std     7, (OFS_R3_R10 + 4 * 8)(1)\n+    std     8, (OFS_R3_R10 + 5 * 8)(1)\n+    std     9, (OFS_R3_R10 + 6 * 8)(1)\n+    std     10, (OFS_R3_R10 + 7 * 8)(1)\n+\n+    /* Save r2 in TOC save area */\n+    std     2, TOC_OFS(1)\n+\n+    /* Do not save r11, r12 and r13. */\n+\n+    /* Call delegate:\n+     * r3: pointer to context\n+     * r4: pointer to stack\n+     */\n+    mr      5, 4\n+    mr      4, 1\n+    ld      6, 0(5)\n+    ld      11, 16(5)\n+    ld      2, 8(5)\n+    mtctr   6\n+    bctrl\n+    nop\n+\n+    /* Restore r2 from TOC save area */\n+    ld      2, TOC_OFS(1)\n+\n+    /* Restore r3-r10 from local variable space */\n+    ld      3, (OFS_R3_R10 + 0 * 8)(1)\n+    ld      4, (OFS_R3_R10 + 1 * 8)(1)\n+    ld      5, (OFS_R3_R10 + 2 * 8)(1)\n+    ld      6, (OFS_R3_R10 + 3 * 8)(1)\n+    ld      7, (OFS_R3_R10 + 4 * 8)(1)\n+    ld      8, (OFS_R3_R10 + 5 * 8)(1)\n+    ld      9, (OFS_R3_R10 + 6 * 8)(1)\n+    ld      10, (OFS_R3_R10 + 7 * 8)(1)\n+\n+    /* Restore r14-r31 from general register save area */\n+    ld      14, (OFS_R14_R31 + 0 * 8)(1)\n+    ld      15, (OFS_R14_R31 + 1 * 8)(1)\n+    ld      16, (OFS_R14_R31 + 2 * 8)(1)\n+    ld      17, (OFS_R14_R31 + 3 * 8)(1)\n+    ld      18, (OFS_R14_R31 + 4 * 8)(1)\n+    ld      19, (OFS_R14_R31 + 5 * 8)(1)\n+    ld      20, (OFS_R14_R31 + 6 * 8)(1)\n+    ld      21, (OFS_R14_R31 + 7 * 8)(1)\n+    ld      22, (OFS_R14_R31 + 8 * 8)(1)\n+    ld      23, (OFS_R14_R31 + 9 * 8)(1)\n+    ld      24, (OFS_R14_R31 + 10 * 8)(1)\n+    ld      25, (OFS_R14_R31 + 11 * 8)(1)\n+    ld      26, (OFS_R14_R31 + 12 * 8)(1)\n+    ld      27, (OFS_R14_R31 + 13 * 8)(1)\n+    ld      28, (OFS_R14_R31 + 14 * 8)(1)\n+    ld      29, (OFS_R14_R31 + 15 * 8)(1)\n+    ld      30, (OFS_R14_R31 + 16 * 8)(1)\n+    ld      31, (OFS_R14_R31 + 17 * 8)(1)\n+\n+    ld      0, LR_OFS(1)\n+    mtlr    0\n+    addi    1, 1, STACK_SZ\n+    blr\n+    .long 0\n+    .quad 0\n+.Lend:\n+    .size _D4core6thread18callWithStackShellFNbMDFNbPvZvZv, .Lend-.L._D4core6thread18callWithStackShellFNbMDFNbPvZvZv\n+    .cfi_endproc"}, {"sha": "be3862f2c50ebbeb12dc297cfcdc5b3167e3c961", "filename": "libphobos/libdruntime/config/x86/switchcontext.S", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fx86%2Fswitchcontext.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Flibdruntime%2Fconfig%2Fx86%2Fswitchcontext.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fx86%2Fswitchcontext.S?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -0,0 +1,96 @@\n+/* i386 support code for fibers and multithreading.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../common/threadasm.S\"\n+\n+#if defined(__i386__)\n+\n+    .text\n+    .globl CSYM(fiber_switchContext)\n+    .type CSYM(fiber_switchContext), @function\n+    .align 16\n+CSYM(fiber_switchContext):\n+    .cfi_startproc\n+    // save current stack state\n+    push %ebp\n+    mov  %esp, %ebp\n+    push %edi\n+    push %esi\n+    push %ebx\n+    push %eax\n+\n+    // store oldp again with more accurate address\n+    mov 8(%ebp), %eax\n+    mov %esp, (%eax)\n+    // load newp to begin context switch\n+    mov 12(%ebp), %esp\n+\n+    // load saved state from new stack\n+    pop %eax\n+    pop %ebx\n+    pop %esi\n+    pop %edi\n+    pop %ebp\n+\n+    // 'return' to complete switch\n+    ret\n+    .cfi_endproc\n+    .size CSYM(fiber_switchContext),.-CSYM(fiber_switchContext)\n+\n+#elif defined(__x86_64__) && !defined(__ILP32__)\n+\n+    .text\n+    .globl CSYM(fiber_switchContext)\n+    .type CSYM(fiber_switchContext), @function\n+    .align 16\n+CSYM(fiber_switchContext):\n+    .cfi_startproc\n+    // Save current stack state.save current stack state\n+    push %rbp\n+    mov  %rsp, %rbp\n+    push %rbx\n+    push %r12\n+    push %r13\n+    push %r14\n+    push %r15\n+\n+    // store oldp again with more accurate address\n+    mov %rsp, (%rdi)\n+    // load newp to begin context switch\n+    mov %rsi, %rsp\n+\n+    // load saved state from new stack\n+    pop %r15\n+    pop %r14\n+    pop %r13\n+    pop %r12\n+    pop %rbx\n+    pop %rbp\n+\n+    // 'return' to complete switch\n+    ret\n+    .cfi_endproc\n+   .size CSYM(fiber_switchContext),.-CSYM(fiber_switchContext)\n+\n+#endif"}, {"sha": "140e5f9a9e4f30a089a01c3169d9766c34d05714", "filename": "libphobos/libdruntime/core/threadasm.S", "status": "removed", "additions": 0, "deletions": 682, "changes": 682, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e085e4405ef4148edf4ea5bedd7930df23c58/libphobos%2Flibdruntime%2Fcore%2Fthreadasm.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e085e4405ef4148edf4ea5bedd7930df23c58/libphobos%2Flibdruntime%2Fcore%2Fthreadasm.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthreadasm.S?ref=7c3e085e4405ef4148edf4ea5bedd7930df23c58", "patch": "@@ -1,682 +0,0 @@\n-/**\n- * Support code for mutithreading.\n- *\n- * Copyright: Copyright Mikola Lysenko 2005 - 2012.\n- * License:   $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n- * Authors:   Mikola Lysenko, Martin Nowak, Kai Nacke\n- */\n-\n-/*\n- *          Copyright Mikola Lysenko 2005 - 2012.\n- * Distributed under the Boost Software License, Version 1.0.\n- *    (See accompanying file LICENSE_1_0.txt or copy at\n- *          http://www.boost.org/LICENSE_1_0.txt)\n- */\n-\n-/* NOTE: This file has been patched from the original DMD distribution to\n- * work with the GDC compiler.\n- */\n-#if (__linux__ || __FreeBSD__ || __NetBSD__ || __DragonFly__) && __ELF__\n-/*\n- * Mark the resulting object file as not requiring execution permissions on\n- * stack memory. The absence of this section would mark the whole resulting\n- * library as requiring an executable stack, making it impossible to\n- * dynamically load druntime on several Linux platforms where this is\n- * forbidden due to security policies.\n- * Use %progbits instead of @progbits to support ARM and X86.\n- */\n-.section .note.GNU-stack,\"\",%progbits\n-#endif\n-\n-/* Let preprocessor tell us if C symbols have a prefix: __USER_LABEL_PREFIX__ */\n-#ifdef __USER_LABEL_PREFIX__\n-#define GLUE2(a, b) a ## b\n-#define GLUE(a, b) GLUE2(a, b)\n-#define CSYM(name) GLUE(__USER_LABEL_PREFIX__, name)\n-#else\n-#define CSYM(name) name\n-#endif\n-\n-/************************************************************************************\n- * POWER PC ASM BITS\n- ************************************************************************************/\n-#if defined( __PPC64__ )\n-\n-#if defined(_CALL_ELF) && _CALL_ELF == 2\n-#define USE_ABI_2\n-#define LINKAGE_SZ   32\n-#define LR_OFS       16\n-#define TOC_OFS      24\n-#define GPR_OFS      32\n-#define STACK_SZ     (LINKAGE_SZ + 26*8)\n-#define OFS_R3_R10   GPR_OFS\n-#define OFS_R14_R31  (GPR_OFS+8*8)\n-#else\n-#define LINKAGE_SZ   48\n-#define LR_OFS       16\n-#define TOC_OFS      40\n-#define GPR_OFS      112\n-#define STACK_SZ     (LINKAGE_SZ + 8*8 + 18*8)\n-#define OFS_R3_R10   (STACK_SZ+LINKAGE_SZ)\n-#define OFS_R14_R31  GPR_OFS\n-#endif\n-\n-    .text\n-#if defined( USE_ABI_2 )\n-    .abiversion 2\n-#endif\n-    .globl  _D4core6thread18callWithStackShellFNbMDFNbPvZvZv\n-    .align  2\n-    .type   _D4core6thread18callWithStackShellFNbMDFNbPvZvZv,@function\n-#if defined( USE_ABI_2 )\n-    .section .text._D4core6thread18callWithStackShellFNbMDFNbPvZvZv,\"a\",@progbits\n-#else\n-    .section .opd,\"aw\",@progbits\n-#endif\n-_D4core6thread18callWithStackShellFNbMDFNbPvZvZv:\n-#if !defined( USE_ABI_2 )\n-    .align  3\n-    .quad .L._D4core6thread18callWithStackShellFNbMDFNbPvZvZv\n-    .quad .TOC.@tocbase\n-    .quad 0\n-#endif\n-    .text\n-/*\n- * Called with:\n- * r3: pointer context\n- * r4: pointer to function\n- */\n-.L._D4core6thread18callWithStackShellFNbMDFNbPvZvZv:\n-    .cfi_startproc\n-    stdu    1, -STACK_SZ(1)\n-    mflr    0\n-    std     0, LR_OFS(1)\n-    .cfi_def_cfa_offset 256\n-    .cfi_offset lr, 16\n-\n-    /* Save r14-r31 in general register save area */\n-    std     14, (OFS_R14_R31 + 0 * 8)(1)\n-    std     15, (OFS_R14_R31 + 1 * 8)(1)\n-    std     16, (OFS_R14_R31 + 2 * 8)(1)\n-    std     17, (OFS_R14_R31 + 3 * 8)(1)\n-    std     18, (OFS_R14_R31 + 4 * 8)(1)\n-    std     19, (OFS_R14_R31 + 5 * 8)(1)\n-    std     20, (OFS_R14_R31 + 6 * 8)(1)\n-    std     21, (OFS_R14_R31 + 7 * 8)(1)\n-    std     22, (OFS_R14_R31 + 8 * 8)(1)\n-    std     23, (OFS_R14_R31 + 9 * 8)(1)\n-    std     24, (OFS_R14_R31 + 10 * 8)(1)\n-    std     25, (OFS_R14_R31 + 11 * 8)(1)\n-    std     26, (OFS_R14_R31 + 12 * 8)(1)\n-    std     27, (OFS_R14_R31 + 13 * 8)(1)\n-    std     28, (OFS_R14_R31 + 14 * 8)(1)\n-    std     29, (OFS_R14_R31 + 15 * 8)(1)\n-    std     30, (OFS_R14_R31 + 16 * 8)(1)\n-    std     31, (OFS_R14_R31 + 17 * 8)(1)\n-\n-    /* Save r3-r10 in parameter save area of caller */\n-    std     3, (OFS_R3_R10 + 0 * 8)(1)\n-    std     4, (OFS_R3_R10 + 1 * 8)(1)\n-    std     5, (OFS_R3_R10 + 2 * 8)(1)\n-    std     6, (OFS_R3_R10 + 3 * 8)(1)\n-    std     7, (OFS_R3_R10 + 4 * 8)(1)\n-    std     8, (OFS_R3_R10 + 5 * 8)(1)\n-    std     9, (OFS_R3_R10 + 6 * 8)(1)\n-    std     10, (OFS_R3_R10 + 7 * 8)(1)\n-\n-    /* Save r2 in TOC save area */\n-    std     2, TOC_OFS(1)\n-\n-    /* Do not save r11, r12 and r13. */\n-\n-    /* Call delegate:\n-     * r3: pointer to context\n-     * r4: pointer to stack\n-     */\n-    mr      5, 4\n-    mr      4, 1\n-    ld      6, 0(5)\n-    ld      11, 16(5)\n-    ld      2, 8(5)\n-    mtctr   6\n-    bctrl\n-    nop\n-\n-    /* Restore r2 from TOC save area */\n-    ld      2, TOC_OFS(1)\n-\n-    /* Restore r3-r10 from local variable space */\n-    ld      3, (OFS_R3_R10 + 0 * 8)(1)\n-    ld      4, (OFS_R3_R10 + 1 * 8)(1)\n-    ld      5, (OFS_R3_R10 + 2 * 8)(1)\n-    ld      6, (OFS_R3_R10 + 3 * 8)(1)\n-    ld      7, (OFS_R3_R10 + 4 * 8)(1)\n-    ld      8, (OFS_R3_R10 + 5 * 8)(1)\n-    ld      9, (OFS_R3_R10 + 6 * 8)(1)\n-    ld      10, (OFS_R3_R10 + 7 * 8)(1)\n-\n-    /* Restore r14-r31 from general register save area */\n-    ld      14, (OFS_R14_R31 + 0 * 8)(1)\n-    ld      15, (OFS_R14_R31 + 1 * 8)(1)\n-    ld      16, (OFS_R14_R31 + 2 * 8)(1)\n-    ld      17, (OFS_R14_R31 + 3 * 8)(1)\n-    ld      18, (OFS_R14_R31 + 4 * 8)(1)\n-    ld      19, (OFS_R14_R31 + 5 * 8)(1)\n-    ld      20, (OFS_R14_R31 + 6 * 8)(1)\n-    ld      21, (OFS_R14_R31 + 7 * 8)(1)\n-    ld      22, (OFS_R14_R31 + 8 * 8)(1)\n-    ld      23, (OFS_R14_R31 + 9 * 8)(1)\n-    ld      24, (OFS_R14_R31 + 10 * 8)(1)\n-    ld      25, (OFS_R14_R31 + 11 * 8)(1)\n-    ld      26, (OFS_R14_R31 + 12 * 8)(1)\n-    ld      27, (OFS_R14_R31 + 13 * 8)(1)\n-    ld      28, (OFS_R14_R31 + 14 * 8)(1)\n-    ld      29, (OFS_R14_R31 + 15 * 8)(1)\n-    ld      30, (OFS_R14_R31 + 16 * 8)(1)\n-    ld      31, (OFS_R14_R31 + 17 * 8)(1)\n-\n-    ld      0, LR_OFS(1)\n-    mtlr    0\n-    addi    1, 1, STACK_SZ\n-    blr\n-    .long 0\n-    .quad 0\n-.Lend:\n-    .size _D4core6thread18callWithStackShellFNbMDFNbPvZvZv, .Lend-.L._D4core6thread18callWithStackShellFNbMDFNbPvZvZv\n-    .cfi_endproc\n-\n-#elif defined( __ppc__ ) || defined( __PPC__ ) || defined( __powerpc__ )\n-\n-\n-/**\n- * Performs a context switch.\n- *\n- * r3 - old context pointer\n- * r4 - new context pointer\n- *\n- */\n-.text\n-.align 2\n-.globl _fiber_switchContext\n-_fiber_switchContext:\n-\n-    /* Save linkage area */\n-    mflr        0\n-    mfcr        5\n-    stw     0, 8(1)\n-    stw     5, 4(1)\n-\n-    /* Save GPRs */\n-    stw     11, (-1 * 4)(1)\n-    stw     13, (-2 * 4)(1)\n-    stw     14, (-3 * 4)(1)\n-    stw     15, (-4 * 4)(1)\n-    stw     16, (-5 * 4)(1)\n-    stw     17, (-6 * 4)(1)\n-    stw     18, (-7 * 4)(1)\n-    stw     19, (-8 * 4)(1)\n-    stw     20, (-9 * 4)(1)\n-    stw     21, (-10 * 4)(1)\n-    stw     22, (-11 * 4)(1)\n-    stw     23, (-12 * 4)(1)\n-    stw     24, (-13 * 4)(1)\n-    stw     25, (-14 * 4)(1)\n-    stw     26, (-15 * 4)(1)\n-    stw     27, (-16 * 4)(1)\n-    stw     28, (-17 * 4)(1)\n-    stw     29, (-18 * 4)(1)\n-    stw     30, (-19 * 4)(1)\n-    stwu    31, (-20 * 4)(1)\n-\n-    /* We update the stack pointer here, since we do not want the GC to\n-       scan the floating point registers. */\n-\n-    /* Save FPRs */\n-    stfd    14, (-1 * 8)(1)\n-    stfd    15, (-2 * 8)(1)\n-    stfd    16, (-3 * 8)(1)\n-    stfd    17, (-4 * 8)(1)\n-    stfd    18, (-5 * 8)(1)\n-    stfd    19, (-6 * 8)(1)\n-    stfd    20, (-7 * 8)(1)\n-    stfd    21, (-8 * 8)(1)\n-    stfd    22, (-9 * 8)(1)\n-    stfd    23, (-10 * 8)(1)\n-    stfd    24, (-11 * 8)(1)\n-    stfd    25, (-12 * 8)(1)\n-    stfd    26, (-13 * 8)(1)\n-    stfd    27, (-14 * 8)(1)\n-    stfd    28, (-15 * 8)(1)\n-    stfd    29, (-16 * 8)(1)\n-    stfd    30, (-17 * 8)(1)\n-    stfd    31, (-18 * 8)(1)\n-\n-    /* Update the old stack pointer */\n-    stw     1, 0(3)\n-\n-    /* Set new stack pointer */\n-    addi        1, 4, 20 * 4\n-\n-    /* Restore linkage area */\n-    lwz     0, 8(1)\n-    lwz     5, 4(1)\n-\n-    /* Restore GPRs */\n-    lwz     11, (-1 * 4)(1)\n-    lwz     13, (-2 * 4)(1)\n-    lwz     14, (-3 * 4)(1)\n-    lwz     15, (-4 * 4)(1)\n-    lwz     16, (-5 * 4)(1)\n-    lwz     17, (-6 * 4)(1)\n-    lwz     18, (-7 * 4)(1)\n-    lwz     19, (-8 * 4)(1)\n-    lwz     20, (-9 * 4)(1)\n-    lwz     21, (-10 * 4)(1)\n-    lwz     22, (-11 * 4)(1)\n-    lwz     23, (-12 * 4)(1)\n-    lwz     24, (-13 * 4)(1)\n-    lwz     25, (-14 * 4)(1)\n-    lwz     26, (-15 * 4)(1)\n-    lwz     27, (-16 * 4)(1)\n-    lwz     28, (-17 * 4)(1)\n-    lwz     29, (-18 * 4)(1)\n-    lwz     30, (-19 * 4)(1)\n-    lwz     31, (-20 * 4)(1)\n-\n-\n-    /* Restore FPRs */\n-    lfd     14, (-1 * 8)(4)\n-    lfd     15, (-2 * 8)(4)\n-    lfd     16, (-3 * 8)(4)\n-    lfd     17, (-4 * 8)(4)\n-    lfd     18, (-5 * 8)(4)\n-    lfd     19, (-6 * 8)(4)\n-    lfd     20, (-7 * 8)(4)\n-    lfd     21, (-8 * 8)(4)\n-    lfd     22, (-9 * 8)(4)\n-    lfd     23, (-10 * 8)(4)\n-    lfd     24, (-11 * 8)(4)\n-    lfd     25, (-12 * 8)(4)\n-    lfd     26, (-13 * 8)(4)\n-    lfd     27, (-14 * 8)(4)\n-    lfd     28, (-15 * 8)(4)\n-    lfd     29, (-16 * 8)(4)\n-    lfd     30, (-17 * 8)(4)\n-    lfd     31, (-18 * 8)(4)\n-\n-    /* Set condition and link register */\n-    mtcr        5\n-    mtlr        0\n-\n-    /* Return and switch context */\n-    blr\n-\n-#elif defined(__mips__) && _MIPS_SIM == _ABIO32\n-/************************************************************************************\n- * MIPS ASM BITS\n- ************************************************************************************/\n-\n-/**\n- * Performs a context switch.\n- *\n- * $a0 - void** - ptr to old stack pointer\n- * $a1 - void*  - new stack pointer\n- *\n- */\n-.text\n-.globl fiber_switchContext\n-fiber_switchContext:\n-    addiu $sp, $sp, -(10 * 4)\n-\n-    // fp regs and return address are stored below the stack\n-    // because we don't want the GC to scan them.\n-\n-#ifdef __mips_hard_float\n-#define ALIGN8(val) (val + (-val & 7))\n-#define BELOW (ALIGN8(6 * 8 + 4))\n-    sdc1 $f20, (0 * 8 - BELOW)($sp)\n-    sdc1 $f22, (1 * 8 - BELOW)($sp)\n-    sdc1 $f24, (2 * 8 - BELOW)($sp)\n-    sdc1 $f26, (3 * 8 - BELOW)($sp)\n-    sdc1 $f28, (4 * 8 - BELOW)($sp)\n-    sdc1 $f30, (5 * 8 - BELOW)($sp)\n-#endif\n-    sw $ra, -4($sp)\n-\n-    sw $s0, (0 * 4)($sp)\n-    sw $s1, (1 * 4)($sp)\n-    sw $s2, (2 * 4)($sp)\n-    sw $s3, (3 * 4)($sp)\n-    sw $s4, (4 * 4)($sp)\n-    sw $s5, (5 * 4)($sp)\n-    sw $s6, (6 * 4)($sp)\n-    sw $s7, (7 * 4)($sp)\n-    sw $s8, (8 * 4)($sp)\n-    sw $gp, (9 * 4)($sp)\n-\n-    // swap stack pointer\n-    sw $sp, 0($a0)\n-    move $sp, $a1\n-\n-#ifdef __mips_hard_float\n-    ldc1 $f20, (0 * 8 - BELOW)($sp)\n-    ldc1 $f22, (1 * 8 - BELOW)($sp)\n-    ldc1 $f24, (2 * 8 - BELOW)($sp)\n-    ldc1 $f26, (3 * 8 - BELOW)($sp)\n-    ldc1 $f28, (4 * 8 - BELOW)($sp)\n-    ldc1 $f30, (5 * 8 - BELOW)($sp)\n-#endif\n-    lw $ra, -4($sp)\n-\n-    lw $s0, (0 * 4)($sp)\n-    lw $s1, (1 * 4)($sp)\n-    lw $s2, (2 * 4)($sp)\n-    lw $s3, (3 * 4)($sp)\n-    lw $s4, (4 * 4)($sp)\n-    lw $s5, (5 * 4)($sp)\n-    lw $s6, (6 * 4)($sp)\n-    lw $s7, (7 * 4)($sp)\n-    lw $s8, (8 * 4)($sp)\n-    lw $gp, (9 * 4)($sp)\n-\n-    addiu $sp, $sp, (10 * 4)\n-\n-    jr $ra // return\n-\n-#elif defined(__arm__) && defined(__ARM_EABI__)\n-/************************************************************************************\n- * ARM ASM BITS\n- ************************************************************************************/\n-\n-/**\n- * Performs a context switch.\n- *\n- * Parameters:\n- * r0 - void** - ptr to old stack pointer\n- * r1 - void*  - new stack pointer\n- *\n- * ARM EABI registers:\n- * r0-r3   : argument/scratch registers\n- * r4-r10  : callee-save registers\n- * r11     : frame pointer (or a callee save register if fp isn't needed)\n- * r12 =ip : inter procedure register. We can treat it like any other scratch register\n- * r13 =sp : stack pointer\n- * r14 =lr : link register, it contains the return address (belonging to the function which called us)\n- * r15 =pc : program counter\n- *\n- * For floating point registers:\n- * According to AAPCS (version 2.09, section 5.1.2) only the d8-d15 registers need to be preserved\n- * across method calls. This applies to all ARM FPU variants, whether they have 16 or 32 double registers\n- * NEON support or not, half-float support or not and so on does not matter.\n- *\n- * Note: If this file was compiled with -mfloat-abi=soft but the code runs on a softfp system with fpu the d8-d15\n- * registers won't be saved (we do not know that the system has got a fpu in that case) but the registers might actually\n- * be used by other code if it was compiled with -mfloat-abi=softfp.\n- *\n- * Interworking is only supported on ARMv5+, not on ARM v4T as ARM v4t requires special stubs when changing\n- * from thumb to arm mode or the other way round.\n- */\n-\n-.text\n-.align  2\n-.global fiber_switchContext\n-#if defined(__ARM_PCS_VFP) || (defined(__ARM_PCS) && !defined(__SOFTFP__)) // ARM_HardFloat  || ARM_SoftFP\n-  .fpu vfp\n-#endif\n-.type   fiber_switchContext, %function\n-fiber_switchContext:\n-    .fnstart\n-    push {r4-r11}\n-    // update the oldp pointer. Link register and floating point registers stored later to prevent the GC from\n-    // scanning them.\n-    str sp, [r0]\n-    // push r0 (or any other register) as well to keep stack 8byte aligned\n-    push {r0, lr}\n-\n-    #if defined(__ARM_PCS_VFP) || (defined(__ARM_PCS) && !defined(__SOFTFP__)) // ARM_HardFloat  || ARM_SoftFP\n-      vpush {d8-d15}\n-      // now switch over to the new stack. Need to subtract (8*8[d8-d15]+2*4[r0, lr]) to position stack pointer\n-      // below the last saved register. Remember we saved the SP before pushing [r0, lr, d8-d15]\n-      sub sp, r1, #72\n-      vpop {d8-d15}\n-    #else\n-      sub sp, r1, #8\n-    #endif\n-\n-    // we don't really care about r0, we only used that for padding.\n-    // r1 is now what used to be in the link register when saving.\n-    pop {r0, r1, r4-r11}\n-    /**\n-     * The link register for the initial jump to fiber_entryPoint must be zero: The jump actually\n-     * looks like a normal method call as we jump to the start of the fiber_entryPoint function.\n-     * Although fiber_entryPoint never returns and therefore never accesses lr, it saves lr to the stack.\n-     * ARM unwinding will then look at the stack, find lr and think that fiber_entryPoint was called by\n-     * the function in lr! So if we have some address in lr the unwinder will try to continue stack unwinding,\n-     * although it's already at the stack base and crash.\n-     * In all other cases the content of lr doesn't matter.\n-     * Note: If we simply loaded into lr above and then moved lr into pc, the initial method call\n-     * to fiber_entryPoint would look as if it was called from fiber_entryPoint itself, as the fiber_entryPoint\n-     * address is in lr on the initial context switch.\n-     */\n-    mov lr, #0\n-    // return by writing lr into pc\n-    mov pc, r1\n-    .fnend\n-\n-#elif defined(__aarch64__)\n-/************************************************************************************\n- * AArch64 (arm64) ASM BITS\n- ************************************************************************************/\n-/**\n- * preserve/restore AAPCS64 registers\n- *   x19-x28 5.1.1 64-bit callee saved\n- *   x29 fp, or possibly callee saved reg - depends on platform choice 5.2.3)\n- *   x30 lr\n- *   d8-d15  5.1.2 says callee only must save bottom 64-bits (the \"d\" regs)\n- *\n- * saved regs on stack will look like:\n- *   19: x19\n- *   18: x20\n- *   ...\n- *   10: x28\n- *    9: x29 (fp)  <-- oldp / *newp save stack top\n- *    8: x30 (lr)\n- *    7: d8\n- *   ...\n- *    0: d15       <-- sp\n- */\n-        .text\n-        .global CSYM(fiber_switchContext)\n-        .type   fiber_switchContext, %function\n-        .p2align  2\n-CSYM(fiber_switchContext):\n-        stp     d15, d14, [sp, #-20*8]!\n-        stp     d13, d12, [sp, #2*8]\n-        stp     d11, d10, [sp, #4*8]\n-        stp     d9, d8,   [sp, #6*8]\n-        stp     x30, x29, [sp, #8*8] // lr, fp\n-        stp     x28, x27, [sp, #10*8]\n-        stp     x26, x25, [sp, #12*8]\n-        stp     x24, x23, [sp, #14*8]\n-        stp     x22, x21, [sp, #16*8]\n-        stp     x20, x19, [sp, #18*8]\n-\n-        // oldp is set above saved lr (x30) to hide it and float regs\n-        // from GC\n-        add     x19, sp, #9*8\n-        str     x19, [x0]       // *oldp tstack\n-        sub     sp, x1, #9*8    // switch to newp sp\n-\n-        ldp     x20, x19, [sp, #18*8]\n-        ldp     x22, x21, [sp, #16*8]\n-        ldp     x24, x23, [sp, #14*8]\n-        ldp     x26, x25, [sp, #12*8]\n-        ldp     x28, x27, [sp, #10*8]\n-        ldp     x30, x29, [sp, #8*8] // lr, fp\n-        ldp     d9, d8,   [sp, #6*8]\n-        ldp     d11, d10, [sp, #4*8]\n-        ldp     d13, d12, [sp, #2*8]\n-        ldp     d15, d14, [sp], #20*8\n-        ret\n-\n-\n-/**\n- * When generating any kind of backtrace (gdb, exception handling) for\n- * a function called in a Fiber, we need to tell the unwinder to stop\n- * at our Fiber main entry point, i.e. we need to mark the bottom of\n- * the call stack. This can be done by clearing the link register lr\n- * prior to calling fiber_entryPoint (i.e. in fiber_switchContext) or\n- * using a .cfi_undefined directive for the link register in the\n- * Fiber entry point. cfi_undefined seems to yield better results in gdb.\n- * Unfortunately we can't place it into fiber_entryPoint using inline\n- * asm, so we use this trampoline instead.\n- */\n-        .text\n-        .global CSYM(fiber_trampoline)\n-        .p2align  2\n-        .type   fiber_trampoline, %function\n-CSYM(fiber_trampoline):\n-        .cfi_startproc\n-        .cfi_undefined x30\n-        // fiber_entryPoint never returns\n-        bl fiber_entryPoint\n-        .cfi_endproc\n-\n-#elif defined(__MINGW32__)\n-/************************************************************************************\n- * GDC MinGW ASM BITS\n- ************************************************************************************/\n-#if defined(__x86_64__)\n-.global fiber_switchContext\n-fiber_switchContext:\n-    pushq %RBP;\n-    movq %RSP, %RBP;\n-    pushq %RBX;\n-    pushq %R12;\n-    pushq %R13;\n-    pushq %R14;\n-    pushq %R15;\n-    pushq %GS:0;\n-    pushq %GS:8;\n-    pushq %GS:16;\n-\n-    // store oldp\n-    movq %RSP, (%RCX);\n-    // load newp to begin context switch\n-    movq %RDX, %RSP;\n-\n-    // load saved state from new stack\n-    popq %GS:16;\n-    popq %GS:8;\n-    popq %GS:0;\n-    popq %R15;\n-    popq %R14;\n-    popq %R13;\n-    popq %R12;\n-    popq %RBX;\n-    popq %RBP;\n-\n-    // 'return' to complete switch\n-    popq %RCX;\n-    jmp *%RCX;\n-#elif defined(_X86_)\n-.global _fiber_switchContext\n-_fiber_switchContext:\n-    // Save current stack state.save current stack state\n-    // Standard CDECL prologue.\n-    push %EBP;\n-    mov  %ESP, %EBP;\n-    push %EDI;\n-    push %ESI;\n-    push %EBX;\n-    push %FS:0;\n-    push %FS:4;\n-    push %FS:8;\n-    push %EAX;\n-\n-    // store oldp again with more accurate address\n-    mov 8(%EBP), %EAX;\n-    mov %ESP, (%EAX);\n-    // load newp to begin context switch\n-    mov 12(%EBP), %ESP;\n-\n-    // load saved state from new stack\n-    pop %EAX;\n-    pop %FS:8;\n-    pop %FS:4;\n-    pop %FS:0;\n-    pop %EBX;\n-    pop %ESI;\n-    pop %EDI;\n-    pop %EBP;\n-\n-    // 'return' to complete switch\n-    ret;\n-#endif\n-\n-// if POSIX boils down to this (reference http://nadeausoftware.com)\n-#elif !defined(_WIN32) && (defined(__unix__) || defined(__unix) || (defined(__APPLE__) && defined(__MACH__)))\n-/************************************************************************************\n- * i386- and x86_64-apple-darwin POSIX ASM BITS\n- ************************************************************************************/\n-#if defined(__i386__)\n-.text\n-.p2align 4\n-.globl CSYM(fiber_switchContext)\n-CSYM(fiber_switchContext):\n-    // save current stack state\n-    push %ebp\n-    mov  %esp, %ebp\n-    push %edi\n-    push %esi\n-    push %ebx\n-    push %eax\n-\n-    // store oldp again with more accurate address\n-    mov 8(%ebp), %eax\n-    mov %esp, (%eax)\n-    // load newp to begin context switch\n-    mov 12(%ebp), %esp\n-\n-    // load saved state from new stack\n-    pop %eax\n-    pop %ebx\n-    pop %esi\n-    pop %edi\n-    pop %ebp\n-\n-    // 'return' to complete switch\n-    ret\n-\n-#elif defined(__x86_64__) && !defined(__ILP32__)\n-.text\n-.p2align 4\n-.globl CSYM(fiber_switchContext)\n-CSYM(fiber_switchContext):\n-    // Save current stack state.save current stack state\n-    push %rbp\n-    mov  %rsp, %rbp\n-    push %rbx\n-    push %r12\n-    push %r13\n-    push %r14\n-    push %r15\n-\n-    // store oldp again with more accurate address\n-    mov %rsp, (%rdi)\n-    // load newp to begin context switch\n-    mov %rsi, %rsp\n-\n-    // load saved state from new stack\n-    pop %r15\n-    pop %r14\n-    pop %r13\n-    pop %r12\n-    pop %rbx\n-    pop %rbp\n-\n-    // 'return' to complete switch\n-    ret\n-#endif\t// __x86_64__ && !__ILP32__\n-\n-#endif\t// posix"}, {"sha": "4795edaa78d605dabda63ae0661c01f47dafacc0", "filename": "libphobos/m4/druntime/cpu.m4", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Fm4%2Fdruntime%2Fcpu.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2493e718159bdee3a589234196ce177d37b1e649/libphobos%2Fm4%2Fdruntime%2Fcpu.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fm4%2Fdruntime%2Fcpu.m4?ref=2493e718159bdee3a589234196ce177d37b1e649", "patch": "@@ -3,6 +3,44 @@\n #\n \n \n+# DRUNTIME_CPU_SOURCES\n+# -------------------\n+# Detect target CPU and add DRUNTIME_CPU_XXX conditionals.\n+AC_DEFUN([DRUNTIME_CPU_SOURCES],\n+[\n+  druntime_target_cpu_parsed=\"\"\n+  case \"$target_cpu\" in\n+      aarch64*)\n+               druntime_target_cpu_parsed=\"aarch64\"\n+               ;;\n+      arm*)    druntime_target_cpu_parsed=\"arm\"\n+               ;;\n+      mips*)   druntime_target_cpu_parsed=\"mips\"\n+               ;;\n+      powerpc) druntime_target_cpu_parsed=\"powerpc\"\n+               ;;\n+      powerpc64)\n+               druntime_target_cpu_parsed=\"powerpc64\"\n+               ;;\n+      i[34567]86|x86_64)\n+               druntime_target_cpu_parsed=\"x86\"\n+               ;;\n+  esac\n+  AM_CONDITIONAL([DRUNTIME_CPU_AARCH64],\n+                 [test \"$druntime_target_cpu_parsed\" = \"aarch64\"])\n+  AM_CONDITIONAL([DRUNTIME_CPU_ARM],\n+                 [test \"$druntime_target_cpu_parsed\" = \"arm\"])\n+  AM_CONDITIONAL([DRUNTIME_CPU_MIPS],\n+                 [test \"$druntime_target_cpu_parsed\" = \"mips\"])\n+  AM_CONDITIONAL([DRUNTIME_CPU_POWERPC],\n+                 [test \"$druntime_target_cpu_parsed\" = \"powerpc\"])\n+  AM_CONDITIONAL([DRUNTIME_CPU_POWERPC64],\n+                 [test \"$druntime_target_cpu_parsed\" = \"powerpc64\"])\n+  AM_CONDITIONAL([DRUNTIME_CPU_X86],\n+                 [test \"$druntime_target_cpu_parsed\" = \"x86\"])\n+])\n+\n+\n # DRUNTIME_ENABLE_ATOMIC_BUILTINS\n # -------------------------\n # Check support for atomic builtins up to 64 bit."}]}