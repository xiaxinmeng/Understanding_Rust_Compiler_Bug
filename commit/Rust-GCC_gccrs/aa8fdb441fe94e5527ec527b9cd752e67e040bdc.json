{"sha": "aa8fdb441fe94e5527ec527b9cd752e67e040bdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE4ZmRiNDQxZmU5NGU1NTI3ZWM1MjdiOWNkNzUyZTY3ZTA0MGJkYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-12T17:22:16Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-12T17:22:16Z"}, "message": "re PR target/71241 ([x86] Missing built-in functions for float128 NaNs)\n\n\tPR target/71241\n\t* config/i386/i386.i386-builtin-types.def (CONST_STRING):\n\tNew primitive type.\n\t(FLOAT128_FTYPE_CONST_STRING): New function type.\n\t* config/i386/i386.c (enum ix86_builtins) [IX86_BUILTIN_NANQ]: New.\n\t[IX86_BUILTIN_NANSQ]: Ditto.\n\t(ix86_fold_builtin): Handle IX86_BUILTIN_NANQ and IX86_BUILTIN_NANSQ.\n\t(ix86_init_builtin_types) Declare const_string_type_node.\n\tAdd __builtin_nanq and __builtin_nansq builtin functions.\n\t(ix86_expand_builtin): Handle IX86_BUILTIN_NANQ and IX86_BUILTIN_NANSQ.\n\t* doc/extend.texi (x86 Built-in Functions): Document\n\t__builtin_nanq and __builtin_nansq.\n\ntestsuite/ChangeLog:\n\n\tPR target/71241\n\t* testsuite/gcc.dg/torture/float128-nan.c: New test.\n\nFrom-SVN: r237338", "tree": {"sha": "44f30b6b04720ade2d2ce3bbb6de39e816c62170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44f30b6b04720ade2d2ce3bbb6de39e816c62170"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa8fdb441fe94e5527ec527b9cd752e67e040bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa8fdb441fe94e5527ec527b9cd752e67e040bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa8fdb441fe94e5527ec527b9cd752e67e040bdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa8fdb441fe94e5527ec527b9cd752e67e040bdc/comments", "author": null, "committer": null, "parents": [{"sha": "a543674d471542144274ecb561f60f50cee1915c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a543674d471542144274ecb561f60f50cee1915c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a543674d471542144274ecb561f60f50cee1915c"}], "stats": {"total": 190, "additions": 176, "deletions": 14}, "files": [{"sha": "0a48316e0f9546877325c4f819d5ade238a52e2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa8fdb441fe94e5527ec527b9cd752e67e040bdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa8fdb441fe94e5527ec527b9cd752e67e040bdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa8fdb441fe94e5527ec527b9cd752e67e040bdc", "patch": "@@ -1,3 +1,18 @@\n+2016-06-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/71241\n+\t* config/i386/i386.i386-builtin-types.def (CONST_STRING):\n+\tNew primitive type.\n+\t(FLOAT128_FTYPE_CONST_STRING): New function type.\n+\t* config/i386/i386.c (enum ix86_builtins) [IX86_BUILTIN_NANQ]: New.\n+\t[IX86_BUILTIN_NANSQ]: Ditto.\n+\t(ix86_fold_builtin): Handle IX86_BUILTIN_NANQ and IX86_BUILTIN_NANSQ.\n+\t(ix86_init_builtin_types) Declare const_string_type_node.\n+\tAdd __builtin_nanq and __builtin_nansq builtin functions.\n+\t(ix86_expand_builtin): Handle IX86_BUILTIN_NANQ and IX86_BUILTIN_NANSQ.\n+\t* doc/extend.texi (x86 Built-in Functions): Document\n+\t__builtin_nanq and __builtin_nansq.\n+\n 2016-06-11  Jiong Wang  <jiong.wang@arm.com>\n \n \tPR target/71061\n@@ -60,7 +75,7 @@\n \t(fsm_find_control_statement_thread_paths): Avoid putting the same\n \tblock on the thread path twice, but ensure the thread path is\n \tunchanged from the caller's point of view.\n-\t\n+\n 2016-06-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* predict.c (predict_loops): Remove PRED_LOOP_BRANCH.\n@@ -144,21 +159,22 @@\n \t    Jiong Wang  <jiong.wang@arm.com>\n \n \tPR rtl-optimization/70751\n-\t* lra-constraints.c (process_alt_operands): Recognize Non-pseudo spilled\n-\tinto memory.\n+\t* lra-constraints.c (process_alt_operands): Recognize Non-pseudo\n+\tspilled into memory.\n \n-2016-06-09 Jonathan Yong  <10walls@gmail.com>\n+2016-06-09  Jonathan Yong  <10walls@gmail.com>\n \n \tRevert:\n \t2015-09-21  Jonathan Yong  <10walls@gmail.com>\n-        * config/i386/cygwin.h (STARTFILE_SPEC): Explicitly search\n-        sysroot/usr/lib/32api for additional win32 libraries,\n-        fixes failing Cygwin bootstrapping.\n+\n+\t* config/i386/cygwin.h (STARTFILE_SPEC): Explicitly search\n+\tsysroot/usr/lib/32api for additional win32 libraries,\n+\tfixes failing Cygwin bootstrapping.\n \n 2016-06-09  Marcin Baczy\u0144ski  <marbacz@gmail.com>\n \n \t* diagnostic.h (diagnostic_line_cutoff, diagnostic_flush_buffer):\n-\tdelete.\n+\tDelete.\n \n 2016-06-09  David Malcolm  <dmalcolm@redhat.com>\n \n@@ -503,8 +519,7 @@\n \n 2016-06-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n-\t* simplify-rtx.c (simplify_cond_clz_ctz): Delete 'mode' local\n-\tvariable.\n+\t* simplify-rtx.c (simplify_cond_clz_ctz): Delete 'mode' local variable.\n \n 2016-06-07  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "7eb6fc96e66f8d50520a6847bd41641b0c97520d", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa8fdb441fe94e5527ec527b9cd752e67e040bdc/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa8fdb441fe94e5527ec527b9cd752e67e040bdc/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=aa8fdb441fe94e5527ec527b9cd752e67e040bdc", "patch": "@@ -73,6 +73,7 @@ DEF_PRIMITIVE_TYPE (FLOAT, float_type_node)\n DEF_PRIMITIVE_TYPE (DOUBLE, double_type_node)\n DEF_PRIMITIVE_TYPE (FLOAT80, float80_type_node)\n DEF_PRIMITIVE_TYPE (FLOAT128, float128_type_node)\n+DEF_PRIMITIVE_TYPE (CONST_STRING, const_string_type_node)\n \n # MMX vectors\n DEF_VECTOR_TYPE (V2SF, FLOAT)\n@@ -191,6 +192,7 @@ DEF_FUNCTION_TYPE (PVOID)\n \n DEF_FUNCTION_TYPE (FLOAT, FLOAT)\n DEF_FUNCTION_TYPE (FLOAT128, FLOAT128)\n+DEF_FUNCTION_TYPE (FLOAT128, CONST_STRING)\n DEF_FUNCTION_TYPE (INT, INT)\n DEF_FUNCTION_TYPE (INT, V16QI)\n DEF_FUNCTION_TYPE (INT, V2DF)"}, {"sha": "dd47305c5b0cc2be0bf111e8a84a0c689e03b3a4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa8fdb441fe94e5527ec527b9cd752e67e040bdc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa8fdb441fe94e5527ec527b9cd752e67e040bdc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=aa8fdb441fe94e5527ec527b9cd752e67e040bdc", "patch": "@@ -32718,6 +32718,8 @@ enum ix86_builtins\n   /* TFmode support builtins.  */\n   IX86_BUILTIN_INFQ,\n   IX86_BUILTIN_HUGE_VALQ,\n+  IX86_BUILTIN_NANQ,\n+  IX86_BUILTIN_NANSQ,\n   IX86_BUILTIN_FABSQ,\n   IX86_BUILTIN_COPYSIGNQ,\n \n@@ -38105,11 +38107,28 @@ ix86_fold_builtin (tree fndecl, int n_args,\n     {\n       enum ix86_builtins fn_code = (enum ix86_builtins)\n \t\t\t\t   DECL_FUNCTION_CODE (fndecl);\n-      if (fn_code ==  IX86_BUILTIN_CPU_IS\n-\t  || fn_code == IX86_BUILTIN_CPU_SUPPORTS)\n+      switch (fn_code)\n \t{\n+\tcase IX86_BUILTIN_CPU_IS:\n+\tcase IX86_BUILTIN_CPU_SUPPORTS:\n \t  gcc_assert (n_args == 1);\n-          return fold_builtin_cpu (fndecl, args);\n+\t  return fold_builtin_cpu (fndecl, args);\n+\n+\tcase IX86_BUILTIN_NANQ:\n+\tcase IX86_BUILTIN_NANSQ:\n+\t  {\n+\t    tree type = TREE_TYPE (TREE_TYPE (fndecl));\n+\t    const char *str = c_getstr (*args);\n+\t    int quiet = fn_code == IX86_BUILTIN_NANQ;\n+\t    REAL_VALUE_TYPE real;\n+\n+\t    if (str && real_nan (&real, str, quiet, TYPE_MODE (type)))\n+\t      return build_real (type, real);\n+\t    return NULL_TREE;\n+\t  }\n+\n+\tdefault:\n+\t  break;\n \t}\n     }\n \n@@ -38210,7 +38229,7 @@ ix86_init_builtins_va_builtins_abi (void)\n static void\n ix86_init_builtin_types (void)\n {\n-  tree float128_type_node, float80_type_node;\n+  tree float128_type_node, float80_type_node, const_string_type_node;\n \n   /* The __float80 type.  */\n   float80_type_node = long_double_type_node;\n@@ -38230,6 +38249,10 @@ ix86_init_builtin_types (void)\n   layout_type (float128_type_node);\n   lang_hooks.types.register_builtin_type (float128_type_node, \"__float128\");\n \n+  const_string_type_node\n+    = build_pointer_type (build_qualified_type\n+\t\t\t  (char_type_node, TYPE_QUAL_CONST));\n+\n   /* This macro is built by i386-builtin-types.awk.  */\n   DEFINE_BUILTIN_PRIMITIVE_TYPES;\n }\n@@ -38250,6 +38273,18 @@ ix86_init_builtins (void)\n   def_builtin_const (0, \"__builtin_huge_valq\",\n \t\t     FLOAT128_FTYPE_VOID, IX86_BUILTIN_HUGE_VALQ);\n \n+  t = ix86_get_builtin_func_type (FLOAT128_FTYPE_CONST_STRING);\n+  t = add_builtin_function (\"__builtin_nanq\", t, IX86_BUILTIN_NANQ,\n+\t\t\t    BUILT_IN_MD, \"nanq\", NULL_TREE);\n+  TREE_READONLY (t) = 1;\n+  ix86_builtins[(int) IX86_BUILTIN_NANQ] = t;\n+\n+  t = ix86_get_builtin_func_type (FLOAT128_FTYPE_CONST_STRING);\n+  t = add_builtin_function (\"__builtin_nansq\", t, IX86_BUILTIN_NANSQ,\n+\t\t\t    BUILT_IN_MD, \"nansq\", NULL_TREE);\n+  TREE_READONLY (t) = 1;\n+  ix86_builtins[(int) IX86_BUILTIN_NANSQ] = t;  \n+\n   /* We will expand them to normal call if SSE isn't available since\n      they are used by libgcc. */\n   t = ix86_get_builtin_func_type (FLOAT128_FTYPE_FLOAT128);\n@@ -41463,6 +41498,10 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \treturn target;\n       }\n \n+    case IX86_BUILTIN_NANQ:\n+    case IX86_BUILTIN_NANSQ:\n+      return expand_call (exp, target, ignore);\n+\n     case IX86_BUILTIN_RDPMC:\n     case IX86_BUILTIN_RDTSC:\n     case IX86_BUILTIN_RDTSCP:"}, {"sha": "426c8ad1865a7a28f3f698184707f88ebaecf675", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa8fdb441fe94e5527ec527b9cd752e67e040bdc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa8fdb441fe94e5527ec527b9cd752e67e040bdc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa8fdb441fe94e5527ec527b9cd752e67e040bdc", "patch": "@@ -1,3 +1,8 @@\n+2016-06-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/71241\n+\t* testsuite/gcc.dg/torture/float128-nan.c: New test.\n+\n 2016-06-12  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR target/60751"}, {"sha": "b570623498795ac8122ca1fa3972f34546c86e25", "filename": "gcc/testsuite/gcc.dg/torture/float128-nan.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa8fdb441fe94e5527ec527b9cd752e67e040bdc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa8fdb441fe94e5527ec527b9cd752e67e040bdc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan.c?ref=aa8fdb441fe94e5527ec527b9cd752e67e040bdc", "patch": "@@ -0,0 +1,101 @@\n+/* Test __float128 NaN generation.  */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+/* { dg-options \"\" } */\n+\n+#include <fenv.h>\n+#include <stdbool.h>\n+\n+typedef unsigned long long int uint64_t;\n+\n+typedef union\n+{\n+  __float128 value;\n+\n+  struct\n+#ifdef __MINGW32__\n+  /* Make sure we are using gnu-style bitfield handling.  */\n+  __attribute__ ((gcc_struct))\n+#endif\n+  {\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+    unsigned negative:1;\n+    unsigned exponent:15;\n+    unsigned quiet_nan:1;\n+    uint64_t mant_high:47;\n+    uint64_t mant_low:64;\n+#else\n+    uint64_t mant_low:64;\n+    uint64_t mant_high:47;\n+    unsigned quiet_nan:1;\n+    unsigned exponent:15;\n+    unsigned negative:1;\n+#endif\n+  } nan;\n+\n+} ieee854_float128;\n+\n+bool\n+__attribute__((noinline, noclone))\n+check_nan (__float128 val, bool quiet)\n+{\n+  ieee854_float128 u;\n+  volatile __float128 tmp;\n+\n+  u.value = val;\n+\n+  if (u.nan.exponent != 0x7fff\n+      || (u.nan.quiet_nan | u.nan.mant_high | u.nan.mant_low) == 0\n+      || u.nan.quiet_nan != quiet)\n+    return false;\n+\n+  if (!__builtin_isnan (u.value))\n+    return false;\n+\n+  feclearexcept (FE_INVALID);\n+\n+  tmp = u.value + u.value;\n+\n+  if ((fetestexcept (FE_INVALID) != 0) == quiet)\n+    return false;\n+\n+  return true;\n+}\n+\n+int\n+main (void)\n+{\n+  __float128 nan;\n+\n+  nan = __builtin_nanq (\"\");\n+\n+  if (!check_nan (nan, true))\n+    __builtin_abort ();\n+\n+  nan = __builtin_nanq (\"0x0\");\n+\n+  if (!check_nan (nan, true))\n+    __builtin_abort ();\n+\n+  nan = __builtin_nanq (\"0x1\");\n+\n+  if (!check_nan (nan, true))\n+    __builtin_abort ();\n+\n+  nan = __builtin_nansq (\"\");\n+\n+  if (!check_nan (nan, false))\n+    __builtin_abort ();\n+\n+  nan = __builtin_nansq (\"0x0\");\n+\n+  if (!check_nan (nan, false))\n+    __builtin_abort ();\n+\n+  nan = __builtin_nansq (\"0x1\");\n+\n+  if (!check_nan (nan, false))\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}