{"sha": "fdcc0283c6fbae461214a011ac517443c81b0102", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRjYzAyODNjNmZiYWU0NjEyMTRhMDExYWM1MTc0NDNjODFiMDEwMg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-11T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-11T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "4295eaea20dd08d823c7fac813f62afe99fa24f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4295eaea20dd08d823c7fac813f62afe99fa24f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdcc0283c6fbae461214a011ac517443c81b0102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdcc0283c6fbae461214a011ac517443c81b0102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdcc0283c6fbae461214a011ac517443c81b0102", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdcc0283c6fbae461214a011ac517443c81b0102/comments", "author": null, "committer": null, "parents": [{"sha": "aa53f657aaa7d4cddf810d504b61cf08e4fc5528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa53f657aaa7d4cddf810d504b61cf08e4fc5528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa53f657aaa7d4cddf810d504b61cf08e4fc5528"}], "stats": {"total": 351, "additions": 350, "deletions": 1}, "files": [{"sha": "bc47d90254b4725a1795be54d097ed1d6079ae23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdcc0283c6fbae461214a011ac517443c81b0102", "patch": "@@ -1,3 +1,125 @@\n+2020-09-10  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_emit_cmove): Change return\n+\ttype to bool.\n+\t(rs6000_emit_int_cmove): Change return type to bool.\n+\t* config/rs6000/rs6000.c (rs6000_emit_cmove): Change return type\n+\tto bool.\n+\t(rs6000_emit_int_cmove): Change return type to bool.\n+\n+2020-09-10  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/97004\n+\t* config/nvptx/nvptx.c (nvptx_assemble_value): Handle shift by\n+\tnumber of bits in shift operand.\n+\n+2020-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lto-streamer-out.c (collect_block_tree_leafs): Recurse on\n+\troot rather than BLOCK_SUBBLOCKS (root).\n+\n+2020-09-10  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def: Add Cortex-R82.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* doc/invoke.texi: Add entry for Cortex-R82.\n+\n+2020-09-10  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* common/config/aarch64/aarch64-common.c\n+\t(aarch64_get_extension_string_for_isa_flags): Don't force +crc for\n+\tArmv8-R.\n+\t* config/aarch64/aarch64-arches.def: Add entry for Armv8-R.\n+\t* config/aarch64/aarch64-c.c (aarch64_define_unconditional_macros): Set\n+\t__ARM_ARCH_PROFILE correctly for Armv8-R.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_V8_R): New.\n+\t(AARCH64_FL_FOR_ARCH8_R): New.\n+\t(AARCH64_ISA_V8_R): New.\n+\t* doc/invoke.texi: Add Armv8-R to architecture table.\n+\n+2020-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/arm/arm.c (arm_override_options_after_change_1): Add opts_set\n+\targument, test opts_set->x_str_align_functions rather than\n+\topts->x_str_align_functions.\n+\t(arm_override_options_after_change, arm_option_override_internal,\n+\tarm_set_current_function): Adjust callers.\n+\n+2020-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96939\n+\t* config/arm/arm.c (arm_override_options_after_change): Don't call\n+\tarm_configure_build_target here.\n+\t(arm_set_current_function): Call arm_override_options_after_change_1\n+\tat the end.\n+\n+2020-09-10  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.md\n+\t(lfiwzx, floatunssi<mode>2_lfiwzx, p8_mtvsrwz, p8_mtvsrd_sf): Fix insn\n+\ttype.\n+\t* config/rs6000/vsx.md\n+\t(vsx_concat_<mode>, vsx_splat_<mode>_reg, vsx_splat_v4sf): Likewise.\n+\n+2020-09-10  Jonathan Yong  <10walls@gmail.com>\n+\n+\t* config.host: Adjust plugin name for Windows.\n+\n+2020-09-10  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR tree-optimization/97000\n+\t* tree-cfgcleanup.c (cleanup_call_ctrl_altering_flag): Don't clear\n+\tflag for IFN_UNIQUE.\n+\n+2020-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/93865\n+\t* lto-streamer.h (struct output_block): Add emit_pwd member.\n+\t* lto-streamer-out.c: Include toplev.h.\n+\t(clear_line_info): Set emit_pwd.\n+\t(lto_output_location_1): Encode the ob->current_file != xloc.file\n+\tbit directly into the location number.  If changing file, emit\n+\tadditionally a bit whether pwd is emitted and emit it before the\n+\tfirst relative pathname since clear_line_info.\n+\t(output_function, output_constructor): Don't call clear_line_info\n+\there.\n+\t* lto-streamer-in.c (struct string_pair_map): New type.\n+\t(struct string_pair_map_hasher): New type.\n+\t(string_pair_map_hasher::hash): New method.\n+\t(string_pair_map_hasher::equal): New method.\n+\t(path_name_pair_hash_table, string_pair_map_allocator): New variables.\n+\t(relative_path_prefix, canon_relative_path_prefix,\n+\tcanon_relative_file_name): New functions.\n+\t(canon_file_name): Add relative_prefix argument, if non-NULL\n+\tand string is a relative path, return canon_relative_file_name.\n+\t(lto_location_cache::input_location_and_block): Decode file change\n+\tbit from the location number.  If changing file, unpack bit whether\n+\tpwd is streamed and stream in pwd.  Adjust canon_file_name caller.\n+\t(lto_free_file_name_hash): Delete path_name_pair_hash_table\n+\tand string_pair_map_allocator.\n+\n+2020-09-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96043\n+\t* tree-vectorizer.h (_slp_instance::cost_vec): New.\n+\t(_slp_instance::subgraph_entries): Likewise.\n+\t(BB_VINFO_TARGET_COST_DATA): Remove.\n+\t* tree-vect-slp.c (vect_free_slp_instance): Free\n+\tcost_vec and subgraph_entries.\n+\t(vect_analyze_slp_instance): Initialize them.\n+\t(vect_slp_analyze_operations): Defer passing costs to\n+\tthe target, instead record them in the SLP graph entry.\n+\t(get_ultimate_leader): New helper for graph partitioning.\n+\t(vect_bb_partition_graph_r): Likewise.\n+\t(vect_bb_partition_graph): New function to partition the\n+\tSLP graph into independently costable parts.\n+\t(vect_bb_vectorization_profitable_p): Adjust to work on\n+\ta subgraph.\n+\t(vect_bb_vectorization_profitable_p): New wrapper,\n+\tdiscarding non-profitable vectorization of subgraphs.\n+\t(vect_slp_analyze_bb_1): Call vect_bb_partition_graph before\n+\tcosting.\n+\n 2020-09-09  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/94355"}, {"sha": "15fb79cba7d15dd1c929cc63955c0b6bdfeb7837", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fdcc0283c6fbae461214a011ac517443c81b0102", "patch": "@@ -1 +1 @@\n-20200910\n+20200911"}, {"sha": "f945ae883bc6ba2befb5b0ff7890ad4421508c12", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fdcc0283c6fbae461214a011ac517443c81b0102", "patch": "@@ -1,3 +1,19 @@\n+2020-09-10  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/decl.c (set_rm_size): Do not take into account the\n+\tValue_Size clause if it is not for the entity itself.\n+\n+2020-09-10  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/decl.c (build_subst_list): For a definition, make\n+\tsure to instantiate the SAVE_EXPRs generated by the elaboration of\n+\tthe constraints in front of the elaboration of the type itself.\n+\n+2020-09-10  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/misc.c: Include tree-pass.h.\n+\t(internal_error_function): Call emergency_dump_function.\n+\n 2020-09-03  Arnaud Charlet  <charlet@adacore.com>\n \n \t* fe.h, opt.ads (Enable_128bit_Types): New."}, {"sha": "b1b9e27b74de673b605d90a24b1178a728b1314d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fdcc0283c6fbae461214a011ac517443c81b0102", "patch": "@@ -1,3 +1,33 @@\n+2020-09-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (TINFO_VAR_DECLARED_CONSTINIT): Replace with ...\n+\t(DECL_DECLARED_CONSTINIT_P): ... this.\n+\t* decl.c (start_decl): No need to retrofit_lang_decl for constinit\n+\tflag.\n+\t(cp_finish_decl): Use DECL_DECLARED_CONSTINIT_P.\n+\t* pt.c (tsubst_decl): No need to handle constinit flag\n+\tpropagation.\n+\t(tsubst_expr): Or here.\n+\n+2020-09-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (DECL_LOCAL_FUNCTION_P): Rename to ...\n+\t(DECL_LOCAL_DECL_P): ... here.  Accept both fns and vars.\n+\t* decl.c (start_decl): Set DECL_LOCAL_DECL_P for local externs.\n+\t(omp_declare_variant_finalize_one): Use DECL_LOCAL_DECL_P.\n+\t(local_variable_p): Simplify.\n+\t* name-lookup.c (set_decl_context_in_fn): Assert DECL_LOCAL_DECL_P\n+\tis as expected.  Simplify.\n+\t(do_pushdecl): Don't set decl_context_in_fn for friends.\n+\t(is_local_extern): Simplify.\n+\t* call.c (equal_functions): Use DECL_LOCAL_DECL_P.\n+\t* parser.c (cp_parser_postfix_expression): Likewise.\n+\t(cp_parser_omp_declare_reduction): Likewise.\n+\t* pt.c (check_default_tmpl_args): Likewise.\n+\t(tsubst_expr): Assert nested reduction function is local.\n+\t(type_dependent_expression_p): Use DECL_LOCAL_DECL_P.\n+\t* semantics.c (finish_call_expr): Likewise.\n+\n 2020-09-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/77841"}, {"sha": "7487d4edb3a013f06e7b22a71a4ad47d1db5f8aa", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=fdcc0283c6fbae461214a011ac517443c81b0102", "patch": "@@ -1,3 +1,19 @@\n+2020-09-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* lang.opt (Waddress): Enable warning by -Wextra.\n+\t(Wcast-result): Likewise.\n+\t(Wunknown-pragmas): Likewise.\n+\n+2020-09-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* decl.cc (DeclVisitor::visit (VarDeclaration *)): Don't warn about\n+\tvariables initialized with 'void'.\n+\n+2020-09-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-convert.cc (convert_expr): Warn when casting from a D class to a\n+\tC++ class.\n+\n 2020-09-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/96924"}, {"sha": "7e5d32be0fcb61d0ec56729440fda852acf398c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcc0283c6fbae461214a011ac517443c81b0102/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fdcc0283c6fbae461214a011ac517443c81b0102", "patch": "@@ -1,3 +1,38 @@\n+2020-09-10  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* gcc.target/aarch64/acle/armv8-r.c: New test.\n+\n+2020-09-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/Waddress.d: New test.\n+\t* gdc.dg/Wcastresult1.d: New test.\n+\t* gdc.dg/Wcastresult2.d: New test.\n+\n+2020-09-10  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gnat.dg/specs/size_clause5.ads: New test.\n+\n+2020-09-10  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gnat.dg/discr59.adb: New test.\n+\t* gnat.dg/discr59_pkg1.ads: New helper.\n+\t* gnat.dg/discr59_pkg2.ads: Likewise.\n+\n+2020-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96939\n+\t* gcc.target/arm/lto/pr96939_0.c: New test.\n+\t* gcc.target/arm/lto/pr96939_1.c: New file.\n+\n+2020-09-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/analyzer/vla-1.c: Add require-effective-target alloca.\n+\n+2020-09-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96043\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr69297.c: Adjust.\n+\n 2020-09-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/77841"}, {"sha": "381a823a57759d01e4c1a67fe7fa6efd7620513d", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcc0283c6fbae461214a011ac517443c81b0102/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcc0283c6fbae461214a011ac517443c81b0102/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=fdcc0283c6fbae461214a011ac517443c81b0102", "patch": "@@ -1,3 +1,7 @@\n+2020-09-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_build_call_expr): Use DECL_LOCAL_DECL_P.\n+\n 2020-08-14  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (plugin_build_dependent_expr): Rename"}, {"sha": "d8c9914e0b5950f99de83ac915e279d894515750", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcc0283c6fbae461214a011ac517443c81b0102/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcc0283c6fbae461214a011ac517443c81b0102/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=fdcc0283c6fbae461214a011ac517443c81b0102", "patch": "@@ -1,3 +1,25 @@\n+2020-09-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/95680\n+\tPR d/97007\n+\t* Makefile.am (AM_MAKEFLAGS): Remove $(CET_FLAGS).\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac (DCFG_ENABLE_CET): Remove substitution.\n+\t(CET_DFLAGS): Substitute.\n+\t* libdruntime/Makefile.am (AM_DFLAGS): Add $(CET_DFLAGS).\n+\t(AM_CFLAGS): Add $(CET_FLAGS).\n+\t(AM_CCASFLAGS): Likewise.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* libdruntime/core/thread.d: Replace static if GNU_Enable_CET\n+\tcondition with `version (CET)'.\n+\t* libdruntime/gcc/config.d.in (GNU_Enable_CET): Remove.\n+\t* src/Makefile.am (AM_DFLAGS): Add $(CET_DFLAGS).\n+\t(AM_CFLAGS): Add $(CET_FLAGS).\n+\t* src/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* testsuite/testsuite_flags.in: Add $(CET_DFLAGS) to --gdcflags.\n+\n 2020-09-09  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR d/95680"}, {"sha": "717e227a883d3184e9237690476680315fefdb4d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcc0283c6fbae461214a011ac517443c81b0102/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcc0283c6fbae461214a011ac517443c81b0102/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fdcc0283c6fbae461214a011ac517443c81b0102", "patch": "@@ -1,3 +1,102 @@\n+2020-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/locale_conv.h (__do_str_codecvt, __str_codecvt_in_all):\n+\tAdd casts to compare types of the same signedness.\n+\n+2020-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_algobase.h (__equal_fn): Remove unused\n+\ttypedef.\n+\n+2020-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/version (__cpp_lib_array_constexpr):\n+\t(__cpp_lib_constexpr_char_traits): Only define C++17 value when\n+\tcompiling C++17.\n+\n+2020-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/bits/shared_ptr.h (shared_ptr(auto_ptr&&))\n+\t(operator=(auto_ptr&&)): Add diagnostic pragmas to suppress\n+\twarnings for uses of std::auto_ptr.\n+\t* include/experimental/type_traits (is_literal_type_v):\n+\tLikewise, for use of std::is_literal_type.\n+\t* include/std/condition_variable (condition_variable_any::_Unlock):\n+\tLikewise, for use of std::uncaught_exception.\n+\n+2020-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (path::_List::type()): Avoid narrowing\n+\tconversion.\n+\t* include/std/chrono (operator+(const year&, const years&)):\n+\tLikewise.\n+\n+2020-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/codecvt.h (codecvt_byname): Remove names of\n+\tunused parameters.\n+\n+2020-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/locale_facets_nonio.tcc: Adjust whitespace.\n+\n+2020-09-10  Krystian Ku\u017aniarek  <krystian.kuzniarek@gmail.com>\n+\n+\t* include/c_global/cmath (__lerp): Avoid -Wparentheses warnings.\n+\n+2020-09-10  Krystian Ku\u017aniarek  <krystian.kuzniarek@gmail.com>\n+\n+\t* include/bits/atomic_base.h: Fix -Wunused-variable\n+\twarnings.\n+\t* include/ext/new_allocator.h: Fix -Wunused-parameter\n+\twarnings.\n+\n+2020-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (counted_iterator): Add assertions\n+\tto check preconditions added by LWG 3472.\n+\n+2020-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94160\n+\t* src/c++17/memory_resource.cc (munge_options): Round\n+\tmax_blocks_per_chunk to a multiple of four.\n+\t(__pool_resource::_M_alloc_pools()): Simplify slightly.\n+\t* testsuite/20_util/unsynchronized_pool_resource/allocate.cc:\n+\tCheck that valid pointers are returned when small values are\n+\tused for max_blocks_per_chunk.\n+\n+2020-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96942\n+\t* include/std/memory_resource (monotonic_buffer_resource::do_allocate):\n+\tUse __builtin_expect when checking if a new buffer needs to be\n+\tallocated from the upstream resource, and for checks for edge\n+\tcases like zero sized buffers and allocations.\n+\t* src/c++17/memory_resource.cc (aligned_size): New class template.\n+\t(aligned_ceil): New helper function to round up to a given\n+\talignment.\n+\t(monotonic_buffer_resource::chunk): Replace _M_size and _M_align\n+\twith an aligned_size member. Remove _M_canary member. Change _M_next\n+\tto pointer instead of unaligned buffer.\n+\t(monotonic_buffer_resource::chunk::allocate): Round up to multiple\n+\tof 64 instead of to power of two. Check for size overflow. Remove\n+\tredundant check for minimum required alignment.\n+\t(monotonic_buffer_resource::chunk::release): Adjust for changes\n+\tto data members.\n+\t(monotonic_buffer_resource::_M_new_buffer): Use aligned_ceil.\n+\t(big_block): Replace _M_size and _M_align with aligned_size\n+\tmember.\n+\t(big_block::big_block): Check for size overflow.\n+\t(big_block::size, big_block::align): Adjust to use aligned_size.\n+\t(big_block::alloc_size): Use aligned_ceil.\n+\t(munge_options): Use aligned_ceil.\n+\t(__pool_resource::allocate): Use big_block::align for alignment.\n+\t* testsuite/20_util/monotonic_buffer_resource/allocate.cc: Check\n+\tupstream resource gets expected values for impossible sizes.\n+\t* testsuite/20_util/unsynchronized_pool_resource/allocate.cc:\n+\tLikewise. Adjust checks for expected alignment in existing test.\n+\n 2020-09-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/chrono (duration::_S_gcd): Use invariant that"}, {"sha": "4f285ce0c3e385f67832fe314b83fdb65e29fac8", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcc0283c6fbae461214a011ac517443c81b0102/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcc0283c6fbae461214a011ac517443c81b0102/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=fdcc0283c6fbae461214a011ac517443c81b0102", "patch": "@@ -1,3 +1,8 @@\n+2020-09-10  Jonathan Yong  <10walls@gmail.com>\n+\n+\t* Makefile.am: drop versioning from libtool completely.\n+\t* Makefile.in: regenerate.\n+\n 2020-09-09  Nick Clifton  <nickc@redhat.com>\n \n \t* lto-plugin.c (struct plugin_symtab): Add last_sym field."}]}