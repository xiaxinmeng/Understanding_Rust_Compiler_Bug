{"sha": "e96a50ccad69f136f81e4d81b24282fa78dacb23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk2YTUwY2NhZDY5ZjEzNmY4MWU0ZDgxYjI0MjgyZmE3OGRhY2IyMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-03-22T22:57:33Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-03-22T22:57:33Z"}, "message": "(udivsi3): Don't clobber register 6.\n\n(udivsi3, divsi3, mulsi3_call): Use a pseudo-reg with regclass 'z'\nfor output rather than hard register 0.\n(block_move_real): Don't clobber registers 4 and 5.\n\nFrom-SVN: r9224", "tree": {"sha": "7ca81f4b7f2824c1a069ca53762d9b15596dcfd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ca81f4b7f2824c1a069ca53762d9b15596dcfd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e96a50ccad69f136f81e4d81b24282fa78dacb23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96a50ccad69f136f81e4d81b24282fa78dacb23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e96a50ccad69f136f81e4d81b24282fa78dacb23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96a50ccad69f136f81e4d81b24282fa78dacb23/comments", "author": null, "committer": null, "parents": [{"sha": "9ff5b60dfbe8962d634a80adbdc7d01516fbb117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff5b60dfbe8962d634a80adbdc7d01516fbb117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff5b60dfbe8962d634a80adbdc7d01516fbb117"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "c17575d87443e1e69b516715ff024e8362f89087", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a50ccad69f136f81e4d81b24282fa78dacb23/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a50ccad69f136f81e4d81b24282fa78dacb23/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=e96a50ccad69f136f81e4d81b24282fa78dacb23", "patch": "@@ -292,17 +292,22 @@\n ;; Division instructions\n ;; -------------------------------------------------------------------------\n \n-\n ;; we take advantage of the library routines which don't clobber as many\n ;; registers as a normal function call would.\n \n+;; We must use a psuedo-reg forced to reg 0 in the SET_DEST rather than\n+;; hard register 0.  If we used hard register 0, then the next instruction\n+;; would be a move from hard register 0 to a pseudo-reg.  If the pseudo-reg\n+;; gets allocated to a stack slot that needs its address reloaded, then\n+;; there is nothing to prevent reload from using r0 to reload the address.\n+;; This reload would clobber the value in r0 we are trying to store.\n+;; If we let reload allocate r0, then this problem can never happen.\n \n (define_insn \"\"\n-  [(set (reg:SI 0)\n+  [(set (match_operand:SI 1 \"register_operand\" \"=z\")\n \t(udiv:SI (reg:SI 4) (reg:SI 5)))\n    (clobber (reg:SI 18))\n    (clobber (reg:SI 17))\n-   (clobber (reg:SI 6))\n    (clobber (reg:SI 4))\n    (use (match_operand:SI 0 \"arith_reg_operand\" \"r\"))]\n   \"\"\n@@ -314,22 +319,18 @@\n   [(set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"g\"))\n    (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"g\"))\n    (set (match_dup 3) (symbol_ref:SI \"__udivsi3\"))\n-   (parallel[(set (reg:SI 0)\n+   (parallel[(set (match_operand:SI 0 \"register_operand\" \"=z\")\n \t\t  (udiv:SI (reg:SI 4)\n \t\t\t   (reg:SI 5)))\n \t     (clobber (reg:SI 18))\n \t     (clobber (reg:SI 17))\n-\t     (clobber (reg:SI 6))\n \t     (clobber (reg:SI 4))\n-\t     (use (match_dup 3))])\n-   (set (match_operand:SI 0 \"general_operand\" \"=g\")\n-\t(reg:SI 0))]\n+\t     (use (match_dup 3))])]\n   \"\"\n   \"operands[3] = gen_reg_rtx(SImode);\")\n \n-\n (define_insn \"\"\n-  [(set (reg:SI 0)\n+  [(set (match_operand:SI 1 \"register_operand\" \"=z\")\n \t(div:SI (reg:SI 4) (reg:SI 5)))\n    (clobber (reg:SI 18))\n    (clobber (reg:SI 17))\n@@ -346,17 +347,15 @@\n   [(set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"g\"))\n    (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"g\"))\n    (set (match_dup 3) (symbol_ref:SI \"__sdivsi3\"))\n-   (parallel[(set (reg:SI 0)\n+   (parallel[(set (match_operand:SI 0 \"register_operand\" \"=z\")\n \t\t  (div:SI (reg:SI 4)\n \t\t\t   (reg:SI 5)))\n \t     (clobber (reg:SI 18))\n \t     (clobber (reg:SI 17))\n \t     (clobber (reg:SI 1))\n \t     (clobber (reg:SI 2))\n \t     (clobber (reg:SI 3))\n-\t     (use (match_dup 3))])\n-   (set (match_operand:SI 0 \"general_operand\" \"=g\")\n-\t(reg:SI 0))]\n+\t     (use (match_dup 3))])]\n   \"\"\n   \"operands[3] = gen_reg_rtx(SImode);\")\n \f\n@@ -408,7 +407,7 @@\n ;; a call to a routine which clobbers known registers.\n \n (define_insn \"\"\n-  [(set (reg:SI 0)\n+  [(set (match_operand:SI 1 \"register_operand\" \"=z\")\n \t(mult:SI (reg:SI 4) (reg:SI 5)))\n    (clobber (reg:SI 21))\n    (clobber (reg:SI 18))\n@@ -426,7 +425,7 @@\n   [(set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"g\"))\n    (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"g\"))\n    (set (match_dup 3) (symbol_ref:SI \"__mulsi3\"))\n-   (parallel[(set (reg:SI 0)\n+   (parallel[(set (match_operand:SI 0 \"register_operand\" \"=z\")\n \t\t  (mult:SI (reg:SI 4)\n \t\t\t   (reg:SI 5)))\n \t     (clobber (reg:SI 21))\n@@ -435,9 +434,7 @@\n \t     (clobber (reg:SI 3))\n \t     (clobber (reg:SI 2))\n \t     (clobber (reg:SI 1))\n-\t     (use (match_dup 3))])\n-   (set (match_operand:SI 0 \"general_operand\" \"=g\")\n-\t(reg:SI 0))]\n+\t     (use (match_dup 3))])]\n   \"\"\n   \"operands[3] = gen_reg_rtx(SImode);\")\n \n@@ -1675,8 +1672,6 @@\n \t\t   (mem:BLK (reg:SI 5)))\n \t      (use (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n \t      (clobber (reg:SI 17))\n-\t      (clobber (reg:SI 4))\n-\t      (clobber (reg:SI 5))\n \t      (clobber (reg:SI 0))])]\n   \"\"\n   \"jsr\t@%0%#\""}]}