{"sha": "56c47f227103ba589fc246c6bee47d0fca8afaaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZjNDdmMjI3MTAzYmE1ODlmYzI0NmM2YmVlNDdkMGZjYThhZmFhZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-04-07T10:13:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-04-07T10:13:25Z"}, "message": "re PR rtl-optimization/42617 (TARGET_MEM_REF and plain INDIRECT_REFs are not handled by the RTL oracle)\n\n2010-04-07  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/42617\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Do not\n\tdiscard plain indirect references.\n\t* fold-const.c (operand_equal_p): Guard against NULL_TREE\n\ttype.\n\t* tree.c (tree_nop_conversion): Likewise.\n\nFrom-SVN: r158045", "tree": {"sha": "73257bbd69a5a06f1b84a4d755f735c5fa36e36c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73257bbd69a5a06f1b84a4d755f735c5fa36e36c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56c47f227103ba589fc246c6bee47d0fca8afaaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c47f227103ba589fc246c6bee47d0fca8afaaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c47f227103ba589fc246c6bee47d0fca8afaaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c47f227103ba589fc246c6bee47d0fca8afaaf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a42f12170922d13a8ecb5b0d9043c0b929bec957", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42f12170922d13a8ecb5b0d9043c0b929bec957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42f12170922d13a8ecb5b0d9043c0b929bec957"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "d41b7d504b657f67b809eb6be63991af8d48f183", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c47f227103ba589fc246c6bee47d0fca8afaaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c47f227103ba589fc246c6bee47d0fca8afaaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56c47f227103ba589fc246c6bee47d0fca8afaaf", "patch": "@@ -1,3 +1,12 @@\n+2010-04-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/42617\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Do not\n+\tdiscard plain indirect references.\n+\t* fold-const.c (operand_equal_p): Guard against NULL_TREE\n+\ttype.\n+\t* tree.c (tree_nop_conversion): Likewise.\n+\n 2010-04-07  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/43628"}, {"sha": "dda2b0f0f70222ab1452d5da30d61e33f16ebbdf", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c47f227103ba589fc246c6bee47d0fca8afaaf/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c47f227103ba589fc246c6bee47d0fca8afaaf/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=56c47f227103ba589fc246c6bee47d0fca8afaaf", "patch": "@@ -1750,13 +1750,23 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t      /* ??? Any reason the field size would be different than\n \t\t the size we got from the type?  */\n \t    }\n+\n \t  else if (flag_argument_noalias > 1\n \t\t   && (INDIRECT_REF_P (t2))\n \t\t   && TREE_CODE (TREE_OPERAND (t2, 0)) == PARM_DECL)\n \t    {\n \t      expr = t2;\n \t      offset = NULL;\n \t    }\n+\n+\t  /* If this is an indirect reference, record it.  */\n+\t  else if (TREE_CODE (t) == INDIRECT_REF\n+\t\t   || TREE_CODE (t) == MISALIGNED_INDIRECT_REF)\n+\t    {\n+\t      expr = t;\n+\t      offset = const0_rtx;\n+\t      apply_bitpos = bitpos;\n+\t    }\n \t}\n \n       /* If this is a Fortran indirect argument reference, record the\n@@ -1769,6 +1779,15 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t  offset = NULL;\n \t}\n \n+      /* If this is an indirect reference, record it.  */\n+      else if (TREE_CODE (t) == INDIRECT_REF\n+\t       || TREE_CODE (t) == MISALIGNED_INDIRECT_REF)\n+\t{\n+\t  expr = t;\n+\t  offset = const0_rtx;\n+\t  apply_bitpos = bitpos;\n+\t}\n+\n       if (!align_computed && !INDIRECT_REF_P (t))\n \t{\n \t  unsigned int obj_align"}, {"sha": "62c86254ea12ff878a06dfe4830ccef6420ffed3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c47f227103ba589fc246c6bee47d0fca8afaaf/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c47f227103ba589fc246c6bee47d0fca8afaaf/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=56c47f227103ba589fc246c6bee47d0fca8afaaf", "patch": "@@ -3170,6 +3170,11 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n       || TREE_TYPE (arg1) == error_mark_node)\n     return 0;\n \n+  /* Similar, if either does not have a type (like a released SSA name), \n+     they aren't equal.  */\n+  if (!TREE_TYPE (arg0) || !TREE_TYPE (arg1))\n+    return 0;\n+\n   /* Check equality of integer constants before bailing out due to\n      precision differences.  */\n   if (TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == INTEGER_CST)"}, {"sha": "b72e0578260304468417ff49938462aaf76c0246", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c47f227103ba589fc246c6bee47d0fca8afaaf/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c47f227103ba589fc246c6bee47d0fca8afaaf/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=56c47f227103ba589fc246c6bee47d0fca8afaaf", "patch": "@@ -10645,6 +10645,9 @@ tree_nop_conversion (const_tree exp)\n   outer_type = TREE_TYPE (exp);\n   inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n \n+  if (!inner_type)\n+    return false;\n+\n   /* Use precision rather then machine mode when we can, which gives\n      the correct answer even for submode (bit-field) types.  */\n   if ((INTEGRAL_TYPE_P (outer_type)"}]}