{"sha": "d18b1ed89ece9698c8e3d0a90534bbf9fe103951", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE4YjFlZDg5ZWNlOTY5OGM4ZTNkMGE5MDUzNGJiZjlmZTEwMzk1MQ==", "commit": {"author": {"name": "Osku Salerma", "email": "osku@iki.fi", "date": "2002-05-30T21:28:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-30T21:28:17Z"}, "message": "c-common.c (c_common_attribute_table): Add \"may_alias\" entry.\n\n        * c-common.c (c_common_attribute_table): Add \"may_alias\" entry.\n        (c_common_get_alias_set): Handle it.\n        * doc/extend.texi: Document it.\n\n        * gcc.c-torture/execute/mayalias-1.c: New file.\n\nFrom-SVN: r54074", "tree": {"sha": "ee747f8a73267f90560111b8582704eea377e81c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee747f8a73267f90560111b8582704eea377e81c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d18b1ed89ece9698c8e3d0a90534bbf9fe103951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18b1ed89ece9698c8e3d0a90534bbf9fe103951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d18b1ed89ece9698c8e3d0a90534bbf9fe103951", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18b1ed89ece9698c8e3d0a90534bbf9fe103951/comments", "author": null, "committer": null, "parents": [{"sha": "a7943381121420155a686f4d9a086acef1c95548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7943381121420155a686f4d9a086acef1c95548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7943381121420155a686f4d9a086acef1c95548"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "4890db352f2eb3efde36ecc714258c0e9284176e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1ed89ece9698c8e3d0a90534bbf9fe103951/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1ed89ece9698c8e3d0a90534bbf9fe103951/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d18b1ed89ece9698c8e3d0a90534bbf9fe103951", "patch": "@@ -1,3 +1,9 @@\n+2002-05-30  Osku Salerma  <osku@iki.fi>\n+\n+\t* c-common.c (c_common_attribute_table): Add \"may_alias\" entry.\n+\t(c_common_get_alias_set): Handle it.\n+\t* doc/extend.texi: Document it.\n+\n 2002-05-30  Richard Henderson  <rth@redhat.com>\n \n \t* defaults.h (TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER): Kill."}, {"sha": "8a554e894666f971ab2c33b6a0038658fb9fed51", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1ed89ece9698c8e3d0a90534bbf9fe103951/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1ed89ece9698c8e3d0a90534bbf9fe103951/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d18b1ed89ece9698c8e3d0a90534bbf9fe103951", "patch": "@@ -430,6 +430,7 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_nonnull_attribute },\n   { \"nothrow\",                0, 0, true,  false, false,\n \t\t\t      handle_nothrow_attribute },\n+  { \"may_alias\",\t      0, 0, false, true, false, NULL },\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n \n@@ -2551,6 +2552,10 @@ c_common_get_alias_set (t)\n       && TYPE_PRECISION (TREE_TYPE (t)) == TYPE_PRECISION (char_type_node))\n     return 0;\n \n+  /* If it has the may_alias attribute, it can alias anything.  */\n+  if (TYPE_P (t) && lookup_attribute (\"may_alias\", TYPE_ATTRIBUTES (t)))\n+    return 0;\n+\n   /* That's all the expressions we handle specially.  */\n   if (! TYPE_P (t))\n     return -1;"}, {"sha": "4b8d496c64ece19ff45fc7dbc0bfa502175842a0", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1ed89ece9698c8e3d0a90534bbf9fe103951/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1ed89ece9698c8e3d0a90534bbf9fe103951/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d18b1ed89ece9698c8e3d0a90534bbf9fe103951", "patch": "@@ -3149,10 +3149,11 @@ packed))}.\n The keyword @code{__attribute__} allows you to specify special\n attributes of @code{struct} and @code{union} types when you define such\n types.  This keyword is followed by an attribute specification inside\n-double parentheses.  Five attributes are currently defined for types:\n+double parentheses.  Six attributes are currently defined for types:\n @code{aligned}, @code{packed}, @code{transparent_union}, @code{unused},\n-and @code{deprecated}.  Other attributes are defined for functions\n-(@pxref{Function Attributes}) and for variables (@pxref{Variable Attributes}).\n+@code{deprecated} and @code{may_alias}.  Other attributes are defined for\n+functions (@pxref{Function Attributes}) and for variables\n+(@pxref{Variable Attributes}).\n \n You may also specify any one of these attributes with @samp{__}\n preceding and following its keyword.  This allows you to use these\n@@ -3363,6 +3364,36 @@ deprecated.  Similarly for line 6.\n The @code{deprecated} attribute can also be used for functions and\n variables (@pxref{Function Attributes}, @pxref{Variable Attributes}.)\n \n+@item may_alias\n+Accesses to objects with types with this attribute are not subjected to\n+type-based alias analysis, but are instead assumed to be able to alias\n+any other type of objects, just like the @code{char} type.  See\n+@option{-fstrict-aliasing} for more information on aliasing issues.\n+\n+Example of use:\n+\n+@example\n+typedef short __attribute__((__may_alias__)) short_a;\n+\n+int\n+main (void)\n+@{\n+  int a = 0x12345678;\n+  short_a *b = (short_a *) &a;\n+\n+  b[1] = 0;\n+\n+  if (a == 0x12345678)\n+    abort();\n+\n+  exit(0);\n+@}\n+@end example\n+\n+If you replaced @code{short_a} with @code{short} in the variable\n+declaration, the above program would abort when compiled with\n+@option{-fstrict-aliasing}, which is on by default at @option{-O2} or\n+above in recent GCC versions.\n @end table\n \n To specify multiple attributes, separate them by commas within the"}, {"sha": "8e063176cafce3c193a1dd946b7d5dbf12b0eb28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1ed89ece9698c8e3d0a90534bbf9fe103951/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1ed89ece9698c8e3d0a90534bbf9fe103951/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d18b1ed89ece9698c8e3d0a90534bbf9fe103951", "patch": "@@ -1,3 +1,7 @@\n+2002-05-30  Osku Salerma  <osku@iki.fi>\n+\n+\t* gcc.c-torture/execute/mayalias-1.c: New file.\n+\n 2002-05-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/c++98-pedantic.c, gcc.dg/cpp/c89-pedantic.c, "}, {"sha": "ba461cae1969fd63e7d0d43c6083a69f9dcb2470", "filename": "gcc/testsuite/gcc.c-torture/execute/mayalias-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1ed89ece9698c8e3d0a90534bbf9fe103951/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmayalias-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1ed89ece9698c8e3d0a90534bbf9fe103951/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmayalias-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmayalias-1.c?ref=d18b1ed89ece9698c8e3d0a90534bbf9fe103951", "patch": "@@ -0,0 +1,21 @@\n+/* Tests that the may_alias attribute works as expected.\n+   Author: Osku Salerma <osku@iki.fi> Apr 2002.  */\n+ \n+extern void abort(void);\n+extern void exit(int);\n+\n+typedef short __attribute__((__may_alias__)) short_a;\n+\n+int\n+main (void)\n+{\n+  int a = 0x12345678;\n+  short_a *b = (short_a*) &a;\n+\n+  b[1] = 0;\n+\n+  if (a == 0x12345678)\n+    abort();\n+\n+  exit(0);\n+}"}]}