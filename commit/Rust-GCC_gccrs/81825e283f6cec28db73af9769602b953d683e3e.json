{"sha": "81825e283f6cec28db73af9769602b953d683e3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE4MjVlMjgzZjZjZWMyOGRiNzNhZjk3Njk2MDJiOTUzZDY4M2UzZQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-11-16T11:54:49Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-11-16T11:54:49Z"}, "message": "Canonicalize constant multiplies in division\n\nThis patch implements some of the optimizations discussed in\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=71026.\n\nCanonicalize x / (C1 * y) into (x * C2) / y.\n\nThis moves constant multiplies out of the RHS of a division in order\nto allow further simplifications (such as (C1 * x) / (C2 * y) ->\n(C3 * x) / y) and to enable more reciprocal CSEs.\n\n2017-11-16  Wilco Dijkstra  <wdijkstr@arm.com>\n\t    Jackson Woodruff  <jackson.woodruff@arm.com>\n\n    gcc/\n\tPR tree-optimization/71026\n\t* match.pd: Canonicalize constant multiplies in division.\n\n    gcc/testsuite/\n\tPR tree-optimization/71026\n\t* gcc.dg/cse_recip.c: New test.\n\nCo-Authored-By: Jackson Woodruff <jackson.woodruff@arm.com>\n\nFrom-SVN: r254816", "tree": {"sha": "8126f7147441bbeb11d41053c993f7ae1046aa37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8126f7147441bbeb11d41053c993f7ae1046aa37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81825e283f6cec28db73af9769602b953d683e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81825e283f6cec28db73af9769602b953d683e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81825e283f6cec28db73af9769602b953d683e3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81825e283f6cec28db73af9769602b953d683e3e/comments", "author": null, "committer": null, "parents": [{"sha": "efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efeee67f4c9fd021d2594e0271c84b7e90e63d3d"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "aaaa6389856d64f5a4db8ad327d5f9d5e0ffd0c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81825e283f6cec28db73af9769602b953d683e3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81825e283f6cec28db73af9769602b953d683e3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81825e283f6cec28db73af9769602b953d683e3e", "patch": "@@ -1,3 +1,9 @@\n+2017-11-16  Wilco Dijkstra  <wdijkstr@arm.com>\n+\t    Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\tPR tree-optimization/71026\n+\t* match.pd: Canonicalize constant multiplies in division.\n+\n 2017-11-16  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* opts.c (default_options_table): Add OPT_fomit_frame_pointer entry."}, {"sha": "0e21a0d8d8ff478c122a199d4b4a93f701d6466a", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81825e283f6cec28db73af9769602b953d683e3e/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81825e283f6cec28db73af9769602b953d683e3e/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=81825e283f6cec28db73af9769602b953d683e3e", "patch": "@@ -344,10 +344,18 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (negate @0)))\n \n (if (flag_reciprocal_math)\n- /* Convert (A/B)/C to A/(B*C)  */\n+ /* Convert (A/B)/C to A/(B*C). */\n  (simplify\n   (rdiv (rdiv:s @0 @1) @2)\n-   (rdiv @0 (mult @1 @2)))\n+  (rdiv @0 (mult @1 @2)))\n+\n+ /* Canonicalize x / (C1 * y) to (x * C2) / y.  */\n+ (simplify\n+  (rdiv @0 (mult:s @1 REAL_CST@2))\n+  (with\n+   { tree tem = const_binop (RDIV_EXPR, type, build_one_cst (type), @2); }\n+   (if (tem)\n+    (rdiv (mult @0 { tem; } ) @1))))\n \n  /* Convert A/(B/C) to (A/B)*C  */\n  (simplify\n@@ -633,15 +641,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (if (tem)\n      (rdiv { tem; } @1)))))\n \n-/* Convert C1/(X*C2) into (C1/C2)/X  */\n-(simplify\n- (rdiv REAL_CST@0 (mult @1 REAL_CST@2))\n-  (if (flag_reciprocal_math)\n-   (with\n-    { tree tem = const_binop (RDIV_EXPR, type, @0, @2); }\n-    (if (tem)\n-     (rdiv { tem; } @1)))))\n-\n /* Simplify ~X & X as zero.  */\n (simplify\n  (bit_and:c (convert? @0) (convert? (bit_not @0)))"}, {"sha": "57bdc1c5ccc3c101e2e6122a3bc319a8301f3186", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81825e283f6cec28db73af9769602b953d683e3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81825e283f6cec28db73af9769602b953d683e3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81825e283f6cec28db73af9769602b953d683e3e", "patch": "@@ -1,3 +1,9 @@\n+2017-11-16  Wilco Dijkstra  <wdijkstr@arm.com>\n+\t    Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\tPR tree-optimization/71026\n+\t* gcc.dg/cse_recip.c: New test.\n+\n 2017-11-16  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* gcc.target/aarch64/lr_free_2.c: Fix test."}, {"sha": "88cba9930c0eb1fdee22a797eff110cd9a14fcda", "filename": "gcc/testsuite/gcc.dg/cse_recip.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81825e283f6cec28db73af9769602b953d683e3e/gcc%2Ftestsuite%2Fgcc.dg%2Fcse_recip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81825e283f6cec28db73af9769602b953d683e3e/gcc%2Ftestsuite%2Fgcc.dg%2Fcse_recip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcse_recip.c?ref=81825e283f6cec28db73af9769602b953d683e3e", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -fdump-tree-optimized-raw\" } */\n+\n+void\n+cse_recip (float x, float y, float *a)\n+{\n+  a[0] = y / (5 * x);\n+  a[1] = y / (3 * x);\n+  a[2] = y / x;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"rdiv_expr\" 1 \"optimized\" } } */"}]}