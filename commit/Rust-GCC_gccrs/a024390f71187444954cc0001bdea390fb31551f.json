{"sha": "a024390f71187444954cc0001bdea390fb31551f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyNDM5MGY3MTE4NzQ0NDk1NGNjMDAwMWJkZWEzOTBmYjMxNTUxZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-08-10T09:13:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-08-10T09:13:37Z"}, "message": "tree-ssa-copy.c (set_copy_of_val): Use operand_equal_p.\n\n2010-08-10  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-copy.c (set_copy_of_val): Use operand_equal_p.\n\t(copy_prop_visit_assignment): Simplify.\n\t(copy_prop_visit_stmt): Also visit assignments from\n\tconstants.\n\t(copy_prop_visit_phi_node): Use operand_equal_p.\n\nFrom-SVN: r163050", "tree": {"sha": "013c16e35d556e45198777483ba6a98a958d5edc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/013c16e35d556e45198777483ba6a98a958d5edc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a024390f71187444954cc0001bdea390fb31551f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a024390f71187444954cc0001bdea390fb31551f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a024390f71187444954cc0001bdea390fb31551f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a024390f71187444954cc0001bdea390fb31551f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a5c2065bd4c06217c2035e1103d2f73a124285e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a5c2065bd4c06217c2035e1103d2f73a124285e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a5c2065bd4c06217c2035e1103d2f73a124285e"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "5b066a6a456761ece1dad36241dd5b3a5ddb6f25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024390f71187444954cc0001bdea390fb31551f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024390f71187444954cc0001bdea390fb31551f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a024390f71187444954cc0001bdea390fb31551f", "patch": "@@ -1,3 +1,11 @@\n+2010-08-10  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-copy.c (set_copy_of_val): Use operand_equal_p.\n+\t(copy_prop_visit_assignment): Simplify.\n+\t(copy_prop_visit_stmt): Also visit assignments from\n+\tconstants.\n+\t(copy_prop_visit_phi_node): Use operand_equal_p.\n+\n 2010-08-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* ipa-split.c (find_split_points): Free stack."}, {"sha": "c82943c47aa1404f05e4fb96e1c0bec1fd8bef53", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024390f71187444954cc0001bdea390fb31551f/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024390f71187444954cc0001bdea390fb31551f/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=a024390f71187444954cc0001bdea390fb31551f", "patch": "@@ -366,7 +366,8 @@ set_copy_of_val (tree var, tree val)\n   old = copy_of[ver].value;\n   copy_of[ver].value = val;\n \n-  if (old != val)\n+  if (old != val\n+      || (val && !operand_equal_p (old, val, 0)))\n     return true;\n \n   return false;\n@@ -409,14 +410,9 @@ static enum ssa_prop_result\n copy_prop_visit_assignment (gimple stmt, tree *result_p)\n {\n   tree lhs, rhs;\n-  prop_value_t *rhs_val;\n \n   lhs = gimple_assign_lhs (stmt);\n-  rhs = gimple_assign_rhs1 (stmt);\n-\n-  gcc_assert (gimple_assign_rhs_code (stmt) == SSA_NAME);\n-\n-  rhs_val = get_copy_of_val (rhs);\n+  rhs = valueize_val (gimple_assign_rhs1 (stmt));\n \n   if (TREE_CODE (lhs) == SSA_NAME)\n     {\n@@ -425,14 +421,8 @@ copy_prop_visit_assignment (gimple stmt, tree *result_p)\n       if (!may_propagate_copy (lhs, rhs))\n \treturn SSA_PROP_VARYING;\n \n-      /* Notice that in the case of assignments, we make the LHS be a\n-\t copy of RHS's value, not of RHS itself.  This avoids keeping\n-\t unnecessary copy-of chains (assignments cannot be in a cycle\n-\t like PHI nodes), speeding up the propagation process.\n-\t This is different from what we do in copy_prop_visit_phi_node.\n-\t In those cases, we are interested in the copy-of chains.  */\n       *result_p = lhs;\n-      if (set_copy_of_val (*result_p, rhs_val->value))\n+      if (set_copy_of_val (*result_p, rhs))\n \treturn SSA_PROP_INTERESTING;\n       else\n \treturn SSA_PROP_NOT_INTERESTING;\n@@ -518,7 +508,8 @@ copy_prop_visit_stmt (gimple stmt, edge *taken_edge_p, tree *result_p)\n \n   if (gimple_assign_single_p (stmt)\n       && TREE_CODE (gimple_assign_lhs (stmt)) == SSA_NAME\n-      && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME)\n+      && (TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n+\t  || is_gimple_min_invariant (gimple_assign_rhs1 (stmt))))\n     {\n       /* If the statement is a copy assignment, evaluate its RHS to\n \t see if the lattice value of its output has changed.  */\n@@ -631,7 +622,8 @@ copy_prop_visit_phi_node (gimple phi)\n \n       /* If PHI_VAL and ARG don't have a common copy-of chain, then\n \t this PHI node cannot be a copy operation.  */\n-      if (phi_val.value != arg_val->value)\n+      if (phi_val.value != arg_val->value\n+\t  && !operand_equal_p (phi_val.value, arg_val->value, 0))\n \t{\n \t  phi_val.value = lhs;\n \t  break;"}]}