{"sha": "f2aca1970f34a502c0a4f7e3dd6011caf22ea509", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhY2ExOTcwZjM0YTUwMmMwYTRmN2UzZGQ2MDExY2FmMjJlYTUwOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-12-17T23:47:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-12-17T23:47:48Z"}, "message": "print-tree.c (print_node): Print DECL_USER_ALIGN and TYPE_USER_ALIGN.\n\n\t* print-tree.c (print_node): Print DECL_USER_ALIGN and TYPE_USER_ALIGN.\n\tPrint TYPE_MIN_VALUE and TYPE_MAX_VALUE for REAL_TYPE.\n\tUse print_node_brief to print bounds.\n\nFrom-SVN: r38337", "tree": {"sha": "01066e1e1f81844d435ff53324444333e1c2ea47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01066e1e1f81844d435ff53324444333e1c2ea47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2aca1970f34a502c0a4f7e3dd6011caf22ea509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2aca1970f34a502c0a4f7e3dd6011caf22ea509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2aca1970f34a502c0a4f7e3dd6011caf22ea509", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2aca1970f34a502c0a4f7e3dd6011caf22ea509/comments", "author": null, "committer": null, "parents": [{"sha": "49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "260b5be72e23a2146f1958d2d2f0e25f2f13001d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2aca1970f34a502c0a4f7e3dd6011caf22ea509/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2aca1970f34a502c0a4f7e3dd6011caf22ea509/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2aca1970f34a502c0a4f7e3dd6011caf22ea509", "patch": "@@ -1,3 +1,9 @@\n+Sun Dec 17 18:45:41 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* print-tree.c (print_node): Print DECL_USER_ALIGN and TYPE_USER_ALIGN.\n+\tPrint TYPE_MIN_VALUE and TYPE_MAX_VALUE for REAL_TYPE.\n+\tUse print_node_brief to print bounds.\n+\n 2000-12-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n         * cpplib.h (struct cpp_reader): Remove references to string_pool"}, {"sha": "662521563d60622869930b2cb878bc31a06da396", "filename": "gcc/print-tree.c", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2aca1970f34a502c0a4f7e3dd6011caf22ea509/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2aca1970f34a502c0a4f7e3dd6011caf22ea509/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=f2aca1970f34a502c0a4f7e3dd6011caf22ea509", "patch": "@@ -95,7 +95,8 @@ print_node_brief (file, prefix, node, indent)\n     }\n   if (TREE_CODE (node) == IDENTIFIER_NODE)\n     fprintf (file, \" %s\", IDENTIFIER_POINTER (node));\n-  /* We might as well always print the value of an integer.  */\n+\n+  /* We might as well always print the value of an integer or real.  */\n   if (TREE_CODE (node) == INTEGER_CST)\n     {\n       if (TREE_CONSTANT_OVERFLOW (node))\n@@ -376,7 +377,6 @@ print_node (file, prefix, node, indent)\n \tfputs (\" decl_7\", file);\n \n       fprintf (file, \" %s\", GET_MODE_NAME(mode));\n-\n       fprintf (file, \" file %s line %d\",\n \t       DECL_SOURCE_FILE (node), DECL_SOURCE_LINE (node));\n \n@@ -389,6 +389,9 @@ print_node (file, prefix, node, indent)\n \n       if (TREE_CODE (node) != FUNCTION_DECL)\n \t{\n+\t  if (DECL_USER_ALIGN (node))\n+\t    fprintf (file, \" user\");\n+\n \t  fprintf (file, \" align %d\", DECL_ALIGN (node));\n \t  if (TREE_CODE (node) == FIELD_DECL)\n \t    {\n@@ -521,32 +524,27 @@ print_node (file, prefix, node, indent)\n       print_node (file, \"unit size\", TYPE_SIZE_UNIT (node), indent + 4);\n       indent_to (file, indent + 3);\n \n+      if (TYPE_USER_ALIGN (node))\n+\tfprintf (file, \" user\");\n+\n       fprintf (file, \" align %d\", TYPE_ALIGN (node));\n       fprintf (file, \" symtab %d\", TYPE_SYMTAB_ADDRESS (node));\n       fprintf (file, \" alias set \");\n       fprintf (file, HOST_WIDE_INT_PRINT_DEC, TYPE_ALIAS_SET (node));\n \n       print_node (file, \"attributes\", TYPE_ATTRIBUTES (node), indent + 4);\n \n-      if (TREE_CODE (node) == ARRAY_TYPE || TREE_CODE (node) == SET_TYPE)\n-\tprint_node (file, \"domain\", TYPE_DOMAIN (node), indent + 4);\n-      else if (TREE_CODE (node) == INTEGER_TYPE\n-\t       || TREE_CODE (node) == BOOLEAN_TYPE\n-\t       || TREE_CODE (node) == CHAR_TYPE)\n+      if (INTEGRAL_TYPE_P (node) || TREE_CODE (node) == REAL_TYPE)\n \t{\n \t  fprintf (file, \" precision %d\", TYPE_PRECISION (node));\n-\t  print_node (file, \"min\", TYPE_MIN_VALUE (node), indent + 4);\n-\t  print_node (file, \"max\", TYPE_MAX_VALUE (node), indent + 4);\n+\t  print_node_brief (file, \"min\", TYPE_MIN_VALUE (node), indent + 4);\n+\t  print_node_brief (file, \"max\", TYPE_MAX_VALUE (node), indent + 4);\n \t}\n-      else if (TREE_CODE (node) == ENUMERAL_TYPE)\n-\t{\n-\t  fprintf (file, \" precision %d\", TYPE_PRECISION (node));\n-\t  print_node (file, \"min\", TYPE_MIN_VALUE (node), indent + 4);\n-\t  print_node (file, \"max\", TYPE_MAX_VALUE (node), indent + 4);\n-\t  print_node (file, \"values\", TYPE_VALUES (node), indent + 4);\n-\t}\n-      else if (TREE_CODE (node) == REAL_TYPE)\n-\tfprintf (file, \" precision %d\", TYPE_PRECISION (node));\n+\n+      if (TREE_CODE (node) == ENUMERAL_TYPE)\n+\tprint_node (file, \"values\", TYPE_VALUES (node), indent + 4);\n+      else if (TREE_CODE (node) == ARRAY_TYPE || TREE_CODE (node) == SET_TYPE)\n+\tprint_node (file, \"domain\", TYPE_DOMAIN (node), indent + 4);\n       else if (TREE_CODE (node) == RECORD_TYPE\n \t       || TREE_CODE (node) == UNION_TYPE\n \t       || TREE_CODE (node) == QUAL_UNION_TYPE)\n@@ -562,15 +560,19 @@ print_node (file, prefix, node, indent)\n       else if (TREE_CODE (node) == OFFSET_TYPE)\n \tprint_node_brief (file, \"basetype\", TYPE_OFFSET_BASETYPE (node),\n \t\t\t  indent + 4);\n+\n       if (TYPE_CONTEXT (node))\n \tprint_node_brief (file, \"context\", TYPE_CONTEXT (node), indent + 4);\n \n       print_lang_type (file, node, indent);\n \n       if (TYPE_POINTER_TO (node) || TREE_CHAIN (node))\n \tindent_to (file, indent + 3);\n-      print_node_brief (file, \"pointer_to_this\", TYPE_POINTER_TO (node), indent + 4);\n-      print_node_brief (file, \"reference_to_this\", TYPE_REFERENCE_TO (node), indent + 4);\n+\n+      print_node_brief (file, \"pointer_to_this\", TYPE_POINTER_TO (node),\n+\t\t\tindent + 4);\n+      print_node_brief (file, \"reference_to_this\", TYPE_REFERENCE_TO (node),\n+\t\t\tindent + 4);\n       print_node_brief (file, \"chain\", TREE_CHAIN (node), indent + 4);\n       break;\n "}]}