{"sha": "2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNhMTdlMGE4OWZmNmMzN2UxNzg1MWE1YmQ3YjBhMDNlZThkZTUzNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-16T08:12:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-16T08:12:30Z"}, "message": "intl: Allow building both with old bison and bison >= 3 [PR92008]\n\nbison 3 apparently made a backwards incompatible change, dropped\nYYLEX_PARAM/YYPARSE_PARAM support and instead needs %param or %lex-param\nand %parse-param.  Furthermore, there is no easy way to conditionalize\non bison version in the *.y files.\nWhile e.g. glibc bumped bison requirement and just has the bison 3\ncompatible version, Richi said there are still systems with older bison\nwhere we want to build gcc.\n\nSo, this patch instead determines during configure bison version, and\ndepending on that when building plural.c (if building it at all) tweaks\nwhat is passed over to bison if needed.\n\nTested with both bison 3 and bison 1.35, in each case with reconfiguring\nintl and building with make all-yes (as in my setup intl isn't normally\nused).\n\n2020-04-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR bootstrap/92008\n\t* configure.ac: Add check for bison >= 3, AC_DEFINE HAVE_BISON3\n\tand AC_SUBST BISON3_YES and BISON3_NO.\n\t* Makefile.in (.y.c): Prefix $(YACC) invocation with @BISON3_NO@,\n\tadd @BISON3_YES@ prefixed rule to adjust the *.y source using sed\n\tand adjust output afterwards.\n\t* plural-exp.h (PLURAL_PARSE): If HAVE_BISON3 is defined, use\n\tstruct parse_args * type for arg instead of void *.\n\t* plural.y: Add magic /* BISON3 ... */ comments with bison >= 3\n\tdirectives.\n\t(YYLEX_PARAM, YYPARSE_PARAM): Don't define if HAVE_BISON3 is defined.\n\t(yylex, yyerror): Adjust prototypes and definitions if HAVE_BISON3\n\tis defined.\n\t* plural.c: Regenerated.\n\t* config.h.in: Regenerated.\n\t* configure: Regenerated.", "tree": {"sha": "d382835bed7c6ccc5103c89226444912b774794a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d382835bed7c6ccc5103c89226444912b774794a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc6b42bbaa298ea6c10af185e1dd0126f5a760cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6b42bbaa298ea6c10af185e1dd0126f5a760cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6b42bbaa298ea6c10af185e1dd0126f5a760cd"}], "stats": {"total": 173, "additions": 150, "deletions": 23}, "files": [{"sha": "a3762f81f566ca1a963f737ff456d951c82632e6", "filename": "intl/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/intl%2FChangeLog?ref=2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "patch": "@@ -1,3 +1,22 @@\n+2020-04-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/92008\n+\t* configure.ac: Add check for bison >= 3, AC_DEFINE HAVE_BISON3\n+\tand AC_SUBST BISON3_YES and BISON3_NO.\n+\t* Makefile.in (.y.c): Prefix $(YACC) invocation with @BISON3_NO@,\n+\tadd @BISON3_YES@ prefixed rule to adjust the *.y source using sed\n+\tand adjust output afterwards.\n+\t* plural-exp.h (PLURAL_PARSE): If HAVE_BISON3 is defined, use\n+\tstruct parse_args * type for arg instead of void *.\n+\t* plural.y: Add magic /* BISON3 ... */ comments with bison >= 3\n+\tdirectives.\n+\t(YYLEX_PARAM, YYPARSE_PARAM): Don't define if HAVE_BISON3 is defined.\n+\t(yylex, yyerror): Adjust prototypes and definitions if HAVE_BISON3\n+\tis defined.\n+\t* plural.c: Regenerated.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\n 2020-02-01  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* configure: Regenerate."}, {"sha": "bdb74ebb78c6af4be5fad7f37f31fd7fd5f13d72", "filename": "intl/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/intl%2FMakefile.in?ref=2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "patch": "@@ -133,7 +133,11 @@ libintl.h: $(srcdir)/libgnuintl.h\n \t$(COMPILE) $<\n \n .y.c:\n-\t$(YACC) $(YFLAGS) --output $@ $<\n+@BISON3_YES@\tsed 's,%pure_parser,,;s,^/\\* BISON3 \\(.*\\) \\*/$$,\\1,' $< > $@.y\n+@BISON3_YES@\t$(YACC) $(YFLAGS) --output $@.c $@.y\n+@BISON3_YES@\tsed 's/\\.c\\.y\"/.y\"/' $@.c > $@\n+@BISON3_YES@\trm -f $@.c $@.y $@.h\n+@BISON3_NO@\t$(YACC) $(YFLAGS) --output $@ $<\n \trm -f $*.h\n \n INCLUDES = -I. -I$(srcdir)"}, {"sha": "87738c0aad2398cdc6867e63fe45cdb80e2b2db0", "filename": "intl/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/intl%2Fconfig.h.in?ref=2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "patch": "@@ -28,6 +28,9 @@\n /* Define to 1 if you have the <argz.h> header file. */\n #undef HAVE_ARGZ_H\n \n+/* Define if bison 3 or later is used. */\n+#undef HAVE_BISON3\n+\n /* Define if the GNU dcgettext() function is already present or preinstalled.\n    */\n #undef HAVE_DCGETTEXT"}, {"sha": "58cee2983a5b1daf1939e994deaaf3367366b778", "filename": "intl/configure", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/intl%2Fconfigure?ref=2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "patch": "@@ -622,6 +622,8 @@ ac_unique_file=\"gettext.c\"\n ac_header_list=\n ac_subst_vars='LTLIBOBJS\n LIBOBJS\n+BISON3_NO\n+BISON3_YES\n INCINTL\n LIBINTL_DEP\n MAINT\n@@ -6791,6 +6793,31 @@ case $USE_INCLUDED_LIBINTL in\n     ;;\n esac\n \n+BISON3_YES='#'\n+BISON3_NO=\n+if test \"$INTLBISON\" != :; then\n+  ac_bison3=no\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking bison 3 or later\" >&5\n+$as_echo_n \"checking bison 3 or later... \" >&6; }\n+  ac_prog_version=`$INTLBISON --version 2>&1 | sed -n 's/^.*GNU Bison.* \\([0-9]*\\.[0-9.]*\\).*$/\\1/p'`\n+  case $ac_prog_version in\n+    [3-9].*)\n+      ac_prog_version=\"$ac_prog_version, bison3\"; ac_bison3=yes;;\n+    *) ac_prog_version=\"$ac_prog_version, old\";;\n+  esac\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_prog_version\" >&5\n+$as_echo \"$ac_prog_version\" >&6; }\n+  if test $ac_bison3 = yes; then\n+\n+$as_echo \"#define HAVE_BISON3 1\" >>confdefs.h\n+\n+    BISON3_YES=\n+    BISON3_NO='#'\n+  fi\n+fi\n+\n+\n+\n ac_config_files=\"$ac_config_files Makefile config.intl\"\n \n cat >confcache <<\\_ACEOF"}, {"sha": "b11033712bc589f9993cafb86d4b8e3f8fc8a8b2", "filename": "intl/configure.ac", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/intl%2Fconfigure.ac?ref=2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "patch": "@@ -47,5 +47,28 @@ case $USE_INCLUDED_LIBINTL in\n     ;;\n esac\n \n+BISON3_YES='#'\n+BISON3_NO=\n+if test \"$INTLBISON\" != :; then\n+  ac_bison3=no\n+  AC_MSG_CHECKING([bison 3 or later])\n+changequote(<<,>>)dnl\n+  ac_prog_version=`$INTLBISON --version 2>&1 | sed -n 's/^.*GNU Bison.* \\([0-9]*\\.[0-9.]*\\).*$/\\1/p'`\n+  case $ac_prog_version in\n+    [3-9].*)\n+changequote([,])dnl\n+      ac_prog_version=\"$ac_prog_version, bison3\"; ac_bison3=yes;;\n+    *) ac_prog_version=\"$ac_prog_version, old\";;\n+  esac\n+  AC_MSG_RESULT([$ac_prog_version])\n+  if test $ac_bison3 = yes; then\n+    AC_DEFINE(HAVE_BISON3, 1, [Define if bison 3 or later is used.])\n+    BISON3_YES=\n+    BISON3_NO='#'\n+  fi\n+fi\n+AC_SUBST(BISON3_YES)\n+AC_SUBST(BISON3_NO)\n+\n AC_CONFIG_FILES(Makefile config.intl)\n AC_OUTPUT"}, {"sha": "e27c28050937889cf5a8595406da0649e6061b94", "filename": "intl/plural-exp.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fplural-exp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fplural-exp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/intl%2Fplural-exp.h?ref=2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "patch": "@@ -1,5 +1,5 @@\n /* Expression parsing and evaluation for plural form selection.\n-   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000-2020 Free Software Foundation, Inc.\n    Written by Ulrich Drepper <drepper@cygnus.com>, 2000.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -111,7 +111,11 @@ struct parse_args\n \n extern void FREE_EXPRESSION PARAMS ((struct expression *exp))\n      internal_function;\n+#ifdef HAVE_BISON3\n+extern int PLURAL_PARSE PARAMS ((struct parse_args *arg));\n+#else\n extern int PLURAL_PARSE PARAMS ((void *arg));\n+#endif\n extern struct expression GERMANIC_PLURAL attribute_hidden;\n extern void EXTRACT_PLURAL_EXPRESSION PARAMS ((const char *nullentry,\n \t\t\t\t\t       struct expression **pluralp,"}, {"sha": "ad86faa89ce325928dffb05c1f35b3fbf84b7e2f", "filename": "intl/plural.c", "status": "modified", "additions": 42, "deletions": 20, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fplural.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fplural.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/intl%2Fplural.c?ref=2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "patch": "@@ -19,7 +19,7 @@\n #line 1 \"plural.y\"\n \n /* Expression parsing for plural form selection.\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2000-2020 Free Software Foundation, Inc.\n    Written by Ulrich Drepper <drepper@cygnus.com>, 2000.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -59,10 +59,12 @@\n # define __gettextparse PLURAL_PARSE\n #endif\n \n+#ifndef HAVE_BISON3\n #define YYLEX_PARAM\t&((struct parse_args *) arg)->cp\n #define YYPARSE_PARAM\targ\n+#endif\n \n-#line 49 \"plural.y\"\n+#line 54 \"plural.y\"\n #ifndef YYSTYPE\n typedef union {\n   unsigned long int num;\n@@ -72,7 +74,7 @@ typedef union {\n # define YYSTYPE yystype\n # define YYSTYPE_IS_TRIVIAL 1\n #endif\n-#line 55 \"plural.y\"\n+#line 60 \"plural.y\"\n \n /* Prototypes for local functions.  */\n static struct expression *new_exp PARAMS ((int nargs, enum operator op,\n@@ -87,8 +89,13 @@ static inline struct expression *new_exp_3 PARAMS ((enum operator op,\n \t\t\t\t\t\t   struct expression *bexp,\n \t\t\t\t\t\t   struct expression *tbranch,\n \t\t\t\t\t\t   struct expression *fbranch));\n+#ifdef HAVE_BISON3\n+static int yylex PARAMS ((YYSTYPE *lval, struct parse_args *arg));\n+static void yyerror PARAMS ((struct parse_args *arg, const char *str));\n+#else\n static int yylex PARAMS ((YYSTYPE *lval, const char **pexp));\n static void yyerror PARAMS ((const char *str));\n+#endif\n \n /* Allocation of expressions.  */\n \n@@ -236,8 +243,8 @@ static const short yyrhs[] =\n /* YYRLINE[YYN] -- source line where rule number YYN was defined. */\n static const short yyrline[] =\n {\n-       0,   174,   182,   186,   190,   194,   198,   202,   206,   210,\n-     214,   218,   223\n+       0,   184,   192,   196,   200,   204,   208,   212,   216,   220,\n+     224,   228,   233\n };\n #endif\n \n@@ -339,8 +346,8 @@ static const short yycheck[] =\n \n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n-   Foundation, Inc., 51 Franklin Street - Fifth Floor,\n-   Boston, MA 02110-1301, USA.  */\n+   Foundation, Inc., 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n \n /* As a special exception, when this file is copied by Bison into a\n    Bison output file, you may use that output file without restriction.\n@@ -1027,76 +1034,76 @@ yyparse (YYPARSE_PARAM_ARG)\n   switch (yyn) {\n \n case 1:\n-#line 175 \"plural.y\"\n+#line 185 \"plural.y\"\n {\n \t    if (yyvsp[0].exp == NULL)\n \t      YYABORT;\n \t    ((struct parse_args *) arg)->res = yyvsp[0].exp;\n \t  }\n     break;\n case 2:\n-#line 183 \"plural.y\"\n+#line 193 \"plural.y\"\n {\n \t    yyval.exp = new_exp_3 (qmop, yyvsp[-4].exp, yyvsp[-2].exp, yyvsp[0].exp);\n \t  }\n     break;\n case 3:\n-#line 187 \"plural.y\"\n+#line 197 \"plural.y\"\n {\n \t    yyval.exp = new_exp_2 (lor, yyvsp[-2].exp, yyvsp[0].exp);\n \t  }\n     break;\n case 4:\n-#line 191 \"plural.y\"\n+#line 201 \"plural.y\"\n {\n \t    yyval.exp = new_exp_2 (land, yyvsp[-2].exp, yyvsp[0].exp);\n \t  }\n     break;\n case 5:\n-#line 195 \"plural.y\"\n+#line 205 \"plural.y\"\n {\n \t    yyval.exp = new_exp_2 (yyvsp[-1].op, yyvsp[-2].exp, yyvsp[0].exp);\n \t  }\n     break;\n case 6:\n-#line 199 \"plural.y\"\n+#line 209 \"plural.y\"\n {\n \t    yyval.exp = new_exp_2 (yyvsp[-1].op, yyvsp[-2].exp, yyvsp[0].exp);\n \t  }\n     break;\n case 7:\n-#line 203 \"plural.y\"\n+#line 213 \"plural.y\"\n {\n \t    yyval.exp = new_exp_2 (yyvsp[-1].op, yyvsp[-2].exp, yyvsp[0].exp);\n \t  }\n     break;\n case 8:\n-#line 207 \"plural.y\"\n+#line 217 \"plural.y\"\n {\n \t    yyval.exp = new_exp_2 (yyvsp[-1].op, yyvsp[-2].exp, yyvsp[0].exp);\n \t  }\n     break;\n case 9:\n-#line 211 \"plural.y\"\n+#line 221 \"plural.y\"\n {\n \t    yyval.exp = new_exp_1 (lnot, yyvsp[0].exp);\n \t  }\n     break;\n case 10:\n-#line 215 \"plural.y\"\n+#line 225 \"plural.y\"\n {\n \t    yyval.exp = new_exp_0 (var);\n \t  }\n     break;\n case 11:\n-#line 219 \"plural.y\"\n+#line 229 \"plural.y\"\n {\n \t    if ((yyval.exp = new_exp_0 (num)) != NULL)\n \t      yyval.exp->val.num = yyvsp[0].num;\n \t  }\n     break;\n case 12:\n-#line 224 \"plural.y\"\n+#line 234 \"plural.y\"\n {\n \t    yyval.exp = yyvsp[-1].exp;\n \t  }\n@@ -1334,7 +1341,7 @@ case 12:\n #endif\n   return yyresult;\n }\n-#line 229 \"plural.y\"\n+#line 239 \"plural.y\"\n \n \n void\n@@ -1365,11 +1372,20 @@ FREE_EXPRESSION (exp)\n }\n \n \n+#ifdef HAVE_BISON3\n+static int\n+yylex (lval, arg)\n+     YYSTYPE *lval;\n+     struct parse_args *arg;\n+{\n+  const char **pexp = &arg->cp;\n+#else\n static int\n yylex (lval, pexp)\n      YYSTYPE *lval;\n      const char **pexp;\n {\n+#endif\n   const char *exp = *pexp;\n   int result;\n \n@@ -1510,8 +1526,14 @@ yylex (lval, pexp)\n }\n \n \n+#ifdef HAVE_BISON3\n+static void\n+yyerror (arg, str)\n+     struct parse_args *arg;\n+#else\n static void\n yyerror (str)\n+#endif\n      const char *str;\n {\n   /* Do nothing.  We don't print error messages here.  */"}, {"sha": "c97f09a6f697429021591e8a78a3774a6d181fad", "filename": "intl/plural.y", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fplural.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535/intl%2Fplural.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/intl%2Fplural.y?ref=2ca17e0a89ff6c37e17851a5bd7b0a03ee8de535", "patch": "@@ -1,6 +1,6 @@\n %{\n /* Expression parsing for plural form selection.\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2000-2020 Free Software Foundation, Inc.\n    Written by Ulrich Drepper <drepper@cygnus.com>, 2000.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -40,10 +40,15 @@\n # define __gettextparse PLURAL_PARSE\n #endif\n \n+#ifndef HAVE_BISON3\n #define YYLEX_PARAM\t&((struct parse_args *) arg)->cp\n #define YYPARSE_PARAM\targ\n+#endif\n %}\n %pure_parser\n+/* BISON3 %parse-param {struct parse_args *arg} */\n+/* BISON3 %lex-param {struct parse_args *arg} */\n+/* BISON3 %define api.pure full */\n %expect 7\n \n %union {\n@@ -66,8 +71,13 @@ static inline struct expression *new_exp_3 PARAMS ((enum operator op,\n \t\t\t\t\t\t   struct expression *bexp,\n \t\t\t\t\t\t   struct expression *tbranch,\n \t\t\t\t\t\t   struct expression *fbranch));\n+#ifdef HAVE_BISON3\n+static int yylex PARAMS ((YYSTYPE *lval, struct parse_args *arg));\n+static void yyerror PARAMS ((struct parse_args *arg, const char *str));\n+#else\n static int yylex PARAMS ((YYSTYPE *lval, const char **pexp));\n static void yyerror PARAMS ((const char *str));\n+#endif\n \n /* Allocation of expressions.  */\n \n@@ -256,11 +266,20 @@ FREE_EXPRESSION (exp)\n }\n \n \n+#ifdef HAVE_BISON3\n+static int\n+yylex (lval, arg)\n+     YYSTYPE *lval;\n+     struct parse_args *arg;\n+{\n+  const char **pexp = &arg->cp;\n+#else\n static int\n yylex (lval, pexp)\n      YYSTYPE *lval;\n      const char **pexp;\n {\n+#endif\n   const char *exp = *pexp;\n   int result;\n \n@@ -401,8 +420,14 @@ yylex (lval, pexp)\n }\n \n \n+#ifdef HAVE_BISON3\n+static void\n+yyerror (arg, str)\n+     struct parse_args *arg;\n+#else\n static void\n yyerror (str)\n+#endif\n      const char *str;\n {\n   /* Do nothing.  We don't print error messages here.  */"}]}