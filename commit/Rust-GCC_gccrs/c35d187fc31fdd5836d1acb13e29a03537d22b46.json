{"sha": "c35d187fc31fdd5836d1acb13e29a03537d22b46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM1ZDE4N2ZjMzFmZGQ1ODM2ZDFhY2IxM2UyOWEwMzUzN2QyMmI0Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-10-30T02:02:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-10-30T02:02:49Z"}, "message": "builtins.c (std_build_builtin_va_list): New.\n\n\t* builtins.c (std_build_builtin_va_list): New.\n\t* expr.h (std_build_builtin_va_list): Declare.\n\t* defaults.h (BUILD_VA_LIST_TYPE): New.\n\t* system.h (BUILD_VA_LIST_TYPE): Poison.\n\t* target-def.h (TARGET_BUILD_BUILTIN_VA_LIST): New.\n\t* target.h (struct gcc_target): Add build_builtin_va_list.\n\t* tree.c (build_common_tree_nodes_2): Use it.\n\n\t* config/alpha/alpha-protos.h, config/alpha/alpha.c,\n\tconfig/alpha/alpha.h, config/alpha/unicosmk.h,\n\tconfig/d30v/d30v-protos.h, config/d30v/d30v.c, config/d30v/d30v.h,\n\tconfig/i386/i386-protos.h, config/i386/i386.c, config/i386/i386.h,\n\tconfig/i860/i860-protos.h, config/i860/i860.c, config/i860/i860.h,\n\tconfig/i960/i960-protos.h, config/i960/i960.c, config/i960/i960.h,\n\tconfig/mips/iris6.h, config/mips/mips-protos.h, config/mips/mips.c,\n\tconfig/mips/mips.h, config/rs6000/rs6000-protos.h,\n\tconfig/rs6000/rs6000.c, config/rs6000/rs6000.h,\n\tconfig/s390/s390-protos.h, config/s390/s390.c, config/s390/s390.h,\n\tconfig/sh/sh-protos.h, config/sh/sh.c, config/sh/sh.h,\n\tconfig/xtensa/xtensa-protos.h, config/xtensa/xtensa.c,\n\tconfig/xtensa/xtensa.h: Rename foo_build_va_list to\n\tfoo_build_builtin_va_list; make it static.  Define\n\tTARGET_BUILD_BUILTIN_VA_LIST.  Remove BUILD_VA_LIST_TYPE.\n\tUpdate protos.\n\n\t* config/i386/i386.c (ix86_expand_carry_flag_compare): Make static.\n\t* config/iq2000/iq2000.h (BUILD_VA_LIST_TYPE): Remove.\n\nFrom-SVN: r73076", "tree": {"sha": "de282819f47f9d9172dff72434c1129a8147296c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de282819f47f9d9172dff72434c1129a8147296c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c35d187fc31fdd5836d1acb13e29a03537d22b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35d187fc31fdd5836d1acb13e29a03537d22b46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35d187fc31fdd5836d1acb13e29a03537d22b46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35d187fc31fdd5836d1acb13e29a03537d22b46/comments", "author": null, "committer": null, "parents": [{"sha": "12d104a2b9c2bcb0e85cd0289dc7616422d55753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d104a2b9c2bcb0e85cd0289dc7616422d55753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d104a2b9c2bcb0e85cd0289dc7616422d55753"}], "stats": {"total": 221, "additions": 118, "deletions": 103}, "files": [{"sha": "80dd00f8866b5b085c9c6c9228be4e7042093b60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -1,3 +1,33 @@\n+2003-10-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (std_build_builtin_va_list): New.\n+\t* expr.h (std_build_builtin_va_list): Declare.\n+\t* defaults.h (BUILD_VA_LIST_TYPE): New.\n+\t* system.h (BUILD_VA_LIST_TYPE): Poison.\n+\t* target-def.h (TARGET_BUILD_BUILTIN_VA_LIST): New.\n+\t* target.h (struct gcc_target): Add build_builtin_va_list.\n+\t* tree.c (build_common_tree_nodes_2): Use it.\n+\n+\t* config/alpha/alpha-protos.h, config/alpha/alpha.c, \n+\tconfig/alpha/alpha.h, config/alpha/unicosmk.h,\n+\tconfig/d30v/d30v-protos.h, config/d30v/d30v.c, config/d30v/d30v.h,\n+\tconfig/i386/i386-protos.h, config/i386/i386.c, config/i386/i386.h,\n+\tconfig/i860/i860-protos.h, config/i860/i860.c, config/i860/i860.h,\n+\tconfig/i960/i960-protos.h, config/i960/i960.c, config/i960/i960.h,\n+\tconfig/mips/iris6.h, config/mips/mips-protos.h, config/mips/mips.c,\n+\tconfig/mips/mips.h, config/rs6000/rs6000-protos.h, \n+\tconfig/rs6000/rs6000.c, config/rs6000/rs6000.h,\n+\tconfig/s390/s390-protos.h, config/s390/s390.c, config/s390/s390.h,\n+\tconfig/sh/sh-protos.h, config/sh/sh.c, config/sh/sh.h,\n+\tconfig/xtensa/xtensa-protos.h, config/xtensa/xtensa.c,\n+\tconfig/xtensa/xtensa.h: Rename foo_build_va_list to\n+\tfoo_build_builtin_va_list; make it static.  Define\n+\tTARGET_BUILD_BUILTIN_VA_LIST.  Remove BUILD_VA_LIST_TYPE.\n+\tUpdate protos.\n+\n+\t* config/i386/i386.c (ix86_expand_carry_flag_compare): Make static.\n+\t* config/iq2000/iq2000.h (BUILD_VA_LIST_TYPE): Remove.\n+\n 2003-10-29  James E Wilson  <wilson@specifixinc.com>\n \n \t* recog.c (asm_operand_ok): Add missing break after case 'X'."}, {"sha": "23b0acfb801ea6ecf18247216c7ab4cc8dae5d32", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -3910,6 +3910,14 @@ stabilize_va_list (tree valist, int needs_lvalue)\n   return valist;\n }\n \n+/* The \"standard\" definition of va_list is void*.  */\n+\n+tree\n+std_build_builtin_va_list (void)\n+{\n+  return ptr_type_node;\n+}\n+\n /* The \"standard\" implementation of va_start: just assign `nextarg' to\n    the variable.  */\n "}, {"sha": "95f1ad25c7c6638bb139731d7f6d14b3b3c52f75", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -80,7 +80,6 @@ extern void print_operand (FILE *, rtx, int);\n extern void print_operand_address (FILE *, rtx);\n extern void alpha_initialize_trampoline (rtx, rtx, rtx, int, int, int);\n \n-extern tree alpha_build_va_list (void);\n extern void alpha_va_start (tree, rtx);\n extern rtx alpha_va_arg (tree, tree);\n extern rtx function_arg (CUMULATIVE_ARGS, enum machine_mode, tree, int);"}, {"sha": "0d59c343d843607fe8df7ec7d68e74bc16bac6ba", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -6080,8 +6080,8 @@ function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n   return gen_rtx_REG (mode, regnum);\n }\n \n-tree\n-alpha_build_va_list (void)\n+static tree\n+alpha_build_builtin_va_list (void)\n {\n   tree base, ofs, record, type_decl;\n \n@@ -10188,6 +10188,9 @@ alpha_init_libfuncs (void)\n #undef TARGET_PRETEND_OUTGOING_VARARGS_NAMED\n #define TARGET_PRETEND_OUTGOING_VARARGS_NAMED hook_bool_CUMULATIVE_ARGS_true\n \n+#undef TARGET_BUILD_BUILTIN_VA_LIST\n+#define TARGET_BUILD_BUILTIN_VA_LIST alpha_build_builtin_va_list\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f"}, {"sha": "2855351e9fac7f8782c2a247632256a8c40400af", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -1679,10 +1679,6 @@ do {\t\t\t\t\t\t\\\n   {\"some_small_symbolic_operand\", {SET, PARALLEL, PREFETCH, UNSPEC,\t\\\n \t\t\t\t   UNSPEC_VOLATILE}},\n \f\n-/* Define the `__builtin_va_list' type for the ABI.  */\n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = alpha_build_va_list ()\n-\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   alpha_va_start (valist, nextarg)"}, {"sha": "46877fbc2bd32c338db9d4bf299c2bc0231191ca", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -496,7 +496,6 @@ ssib_section ()\t\t\t\\\n #undef LIB_SPEC\n #define LIB_SPEC \"-L/opt/ctl/craylibs/craylibs -lu -lm -lc -lsma\"\n \n-#undef BUILD_VA_LIST_TYPE\n #undef EXPAND_BUILTIN_VA_START\n #undef EXPAND_BUILTIN_VA_ARG\n "}, {"sha": "cd5be23105ab91f83222b1dbacb82c1310e89bbf", "filename": "gcc/config/d30v/d30v-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -103,7 +103,6 @@ extern rtx d30v_expand_builtin_saveregs\tPARAMS ((void));\n extern void d30v_setup_incoming_varargs\tPARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t tree, int *, int));\n-extern tree d30v_build_va_list\t\tPARAMS ((void));\n #ifdef RTX_CODE\n extern void d30v_expand_builtin_va_start PARAMS ((tree, rtx));\n extern rtx d30v_expand_builtin_va_arg\tPARAMS ((tree, tree));"}, {"sha": "aadba9d794c4b687d3f81617c5169f1f9b96a601", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -55,6 +55,7 @@ static void d30v_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static int d30v_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int d30v_issue_rate PARAMS ((void));\n static bool d30v_rtx_costs PARAMS ((rtx, int, int, int *));\n+static tree d30v_build_builtin_va_list PARAMS ((void));\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  */\n@@ -105,6 +106,9 @@ enum reg_class reg_class_from_letter[256];\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_0\n \n+#undef TARGET_BUILD_BUILTIN_VA_LIST\n+#define TARGET_BUILD_BUILTIN_VA_LIST d30v_build_builtin_va_list\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n@@ -2201,8 +2205,8 @@ d30v_setup_incoming_varargs (cum, mode, type, pretend_size, second_time)\n \f\n /* Create the va_list data type.  */\n \n-tree\n-d30v_build_va_list ()\n+static tree\n+d30v_build_builtin_va_list ()\n {\n   tree f_arg_ptr, f_arg_num, record, type_decl;\n   tree int_type_node;"}, {"sha": "6c4c0669eb66e810293ff1ba0814c635ade133e9", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -1407,13 +1407,6 @@ typedef struct machine_function GTY(())\n   d30v_setup_incoming_varargs (&ARGS_SO_FAR, (int) MODE, TYPE,\t\t\\\n \t\t\t       &PRETEND_ARGS_SIZE, SECOND_TIME)\n \n-/* Build up the stdarg/varargs va_list type tree, assinging it to NODE.  If not\n-   defined, it is assumed that va_list is a void * pointer.  */\n-\n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = d30v_build_va_list ()\n-\n-\n /* Implement the stdarg/varargs va_start macro.  STDARG_P is nonzero if this\n    is stdarg.h instead of varargs.h.  VALIST is the tree of the va_list\n    variable to initialize.  NEXTARG is the machine independent notion of the"}, {"sha": "60880b805e2ceb9838c9f4998cd4af34564ebc4e", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -203,7 +203,6 @@ extern rtx ix86_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n \n #ifdef TREE_CODE\n extern int ix86_return_pops_args (tree, tree, int);\n-extern tree ix86_build_va_list (void);\n \n extern int ix86_data_alignment (tree, int);\n extern int ix86_local_alignment (tree, int);"}, {"sha": "a5d27fcbde725c8d92c7afbd83364425591c6e38", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -830,7 +830,8 @@ static void x86_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n static bool x86_can_output_mi_thunk (tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n static void x86_file_start (void);\n static void ix86_reorg (void);\n-bool ix86_expand_carry_flag_compare (enum rtx_code, rtx, rtx, rtx*);\n+static bool ix86_expand_carry_flag_compare (enum rtx_code, rtx, rtx, rtx*);\n+static tree ix86_build_builtin_va_list (void);\n \n struct ix86_address\n {\n@@ -1012,6 +1013,9 @@ static void init_ext_80387_constants (void);\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG ix86_reorg\n \n+#undef TARGET_BUILD_BUILTIN_VA_LIST\n+#define TARGET_BUILD_BUILTIN_VA_LIST ix86_build_builtin_va_list\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* The svr4 ABI for the i386 says that records and unions are returned\n@@ -2825,8 +2829,8 @@ ix86_value_regno (enum machine_mode mode)\n \f\n /* Create the va_list data type.  */\n \n-tree\n-ix86_build_va_list (void)\n+static tree\n+ix86_build_builtin_va_list (void)\n {\n   tree f_gpr, f_fpr, f_ovf, f_sav, record, type_decl;\n \n@@ -9454,9 +9458,9 @@ ix86_expand_setcc (enum rtx_code code, rtx dest)\n   return 1; /* DONE */\n }\n \n-/* Expand comparison setting or clearing carry flag.  Return true when successful\n-   and set pop for the operation.  */\n-bool\n+/* Expand comparison setting or clearing carry flag.  Return true when\n+   successful and set pop for the operation.  */\n+static bool\n ix86_expand_carry_flag_compare (enum rtx_code code, rtx op0, rtx op1, rtx *pop)\n {\n   enum machine_mode mode ="}, {"sha": "d6133e9402aa31c680445e67774717aa4ee56e36", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -1828,10 +1828,6 @@ typedef struct ix86_args {\n   ix86_setup_incoming_varargs (&(CUM), (MODE), (TYPE), &(PRETEND_SIZE), \\\n \t\t\t       (NO_RTL))\n \n-/* Define the `__builtin_va_list' type for the ABI.  */\n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  ((VALIST) = ix86_build_va_list ())\n-\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(VALIST, NEXTARG) \\\n   ix86_va_start (VALIST, NEXTARG)"}, {"sha": "74568af66b5cb8e3bd7f44caea1e4bfecaded86e", "filename": "gcc/config/i860/i860-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi860%2Fi860-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi860%2Fi860-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860-protos.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -51,9 +51,5 @@ extern rtx i860_va_arg (tree, tree);\n #endif /* TREE_CODE */\n #endif /* RTX_CODE */\n \n-#ifdef TREE_CODE\n-extern tree i860_build_va_list (void);\n-#endif /* TREE_CODE */\n-\n extern void tdesc_section (void);\n "}, {"sha": "9946f261c7c288367bf9774bd2c3d72612f28bea", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -1813,8 +1813,8 @@ i860_saveregs (void)\n \n    The tree representing the va_list declaration is returned.  */\n \n-tree\n-i860_build_va_list (void)\n+static tree\n+i860_build_builtin_va_list (void)\n {\n   tree f_gpr, f_fpr, f_mem, f_sav, record, type_decl;\n \n@@ -2117,5 +2117,7 @@ i860_init_libfuncs (void)\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS i860_init_libfuncs\n \n-struct gcc_target targetm = TARGET_INITIALIZER;\n+#undef TARGET_BUILD_BUILTIN_VA_LIST\n+#define TARGET_BUILD_BUILTIN_VA_LIST i860_build_builtin_va_list\n \n+struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "c600f0276ec8b5d9a3c6f6b119657232e97c686b", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -571,10 +571,6 @@ struct cumulative_args { int ints, floats; };\n #define EXPAND_BUILTIN_SAVEREGS() \\\n   i860_saveregs()\n \n-/* Define the `__builtin_va_list' type for the ABI.  */\n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = i860_build_va_list ()\n-\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   i860_va_start (valist, nextarg)"}, {"sha": "fa7941e935884bd692e5f0c4339e1f4cddb3c1a8", "filename": "gcc/config/i960/i960-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-protos.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -82,7 +82,6 @@ extern void i960_function_name_declare PARAMS ((FILE *, const char *, tree));\n extern void i960_function_arg_advance PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n extern int i960_round_align PARAMS ((int, tree));\n extern void i960_setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int));\n-extern tree i960_build_va_list PARAMS ((void));\n extern int i960_final_reg_parm_stack_space PARAMS ((int, tree));\n extern int i960_reg_parm_stack_space PARAMS ((tree));\n #endif /* TREE_CODE */"}, {"sha": "4d4d23f21d89ba72faa901788a435bd82f3f7330", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -52,6 +52,7 @@ static void i960_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t  HOST_WIDE_INT, tree));\n static bool i960_rtx_costs PARAMS ((rtx, int, int, int *));\n static int i960_address_cost PARAMS ((rtx));\n+static tree i960_build_builtin_va_list (void);\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -114,6 +115,9 @@ static int ret_label = 0;\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST i960_address_cost\n \n+#undef TARGET_BUILD_BUILTIN_VA_LIST\n+#define TARGET_BUILD_BUILTIN_VA_LIST i960_build_builtin_va_list\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Override conflicting target switch options.\n@@ -2600,8 +2604,8 @@ i960_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n \n /* Define the `__builtin_va_list' type for the ABI.  */\n \n-tree\n-i960_build_va_list ()\n+static tree\n+i960_build_builtin_va_list ()\n {\n   return build_array_type (unsigned_type_node,\n \t\t\t   build_index_type (size_one_node));"}, {"sha": "ad86dba003bd0bcde2a612f581ace9995a9df420", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -817,10 +817,6 @@ enum reg_class { NO_REGS, GLOBAL_REGS, LOCAL_REGS, LOCAL_OR_GLOBAL_REGS,\n #define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL) \\\n   i960_setup_incoming_varargs(&CUM,MODE,TYPE,&PRETEND_SIZE,NO_RTL)\n \n-/* Define the `__builtin_va_list' type for the ABI.  */\n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = i960_build_va_list ()\n-\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   i960_va_start (valist, nextarg)"}, {"sha": "6bc18f3b20d86d7b8540554ce5226a544e278d84", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -589,9 +589,6 @@ typedef struct iq2000_args {\n \n #define STRICT_ARGUMENT_NAMING  1\n \n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = ptr_type_node\n-\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   iq2000_va_start (valist, nextarg)\n "}, {"sha": "ca8f4283b7c050ae3d4f720d51f1190e27e71e04", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -423,12 +423,6 @@ while (0)\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n \n-/* Define the `__builtin_va_list' type for the ABI.  On IRIX 6, this\n-   type is `char *'.  */\n-#undef BUILD_VA_LIST_TYPE\n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = build_pointer_type (char_type_node)\n-\n #undef ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME mips_declare_object_name\n "}, {"sha": "73b1bc45572e7544cd9687b33dec7e3a03257af1", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -84,7 +84,6 @@ extern bool mips_pad_arg_upward (enum machine_mode, tree);\n extern bool mips_pad_reg_upward (enum machine_mode, tree);\n extern int mips_setup_incoming_varargs (const CUMULATIVE_ARGS *,\n \t\t\t\t\tenum machine_mode, tree, int);\n-extern tree mips_build_va_list (void);\n extern void mips_va_start (tree, rtx);\n extern struct rtx_def *mips_va_arg (tree, tree);\n "}, {"sha": "d85a83d68f2b4ab692ac68145d6d2fdcc2fefc79", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -275,6 +275,7 @@ static int mips_adjust_cost (rtx, rtx, rtx, int);\n static int mips_issue_rate (void);\n static int mips_use_dfa_pipeline_interface (void);\n static void mips_init_libfuncs (void);\n+static tree mips_build_builtin_va_list (void);\n \n #if TARGET_IRIX\n static void irix_asm_named_section_1 (const char *, unsigned int,\n@@ -792,6 +793,9 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS mips_init_libfuncs\n \n+#undef TARGET_BUILD_BUILTIN_VA_LIST\n+#define TARGET_BUILD_BUILTIN_VA_LIST mips_build_builtin_va_list\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return true if RELOC is a valid relocation number and OFFSET can be\n@@ -3982,9 +3986,8 @@ mips_setup_incoming_varargs (const CUMULATIVE_ARGS *cum,\n      and two offsets, although we could have designed this with two pointers\n      and three offsets.  */\n \n-\n-tree\n-mips_build_va_list (void)\n+static tree\n+mips_build_builtin_va_list (void)\n {\n   if (EABI_FLOAT_VARARGS_P)\n     {\n@@ -4028,7 +4031,15 @@ mips_build_va_list (void)\n       return record;\n     }\n   else\n-    return ptr_type_node;\n+    {\n+#if defined(TARGET_IRIX) && !TARGET_IRIX5\n+      /* On IRIX 6, this type is 'char *'.  */\n+      return build_pointer_type (char_type_node);\n+#else\n+      /* Otherwise, we use 'void *'.  */\n+      return ptr_type_node;\n+#endif\n+    }\n }\n \n /* Implement va_start.  */"}, {"sha": "a27dae3d40b0300de60b6bf7153df43b8b9b29b1", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -2412,10 +2412,6 @@ typedef struct mips_args {\n    : ((LOC) + 15) & ~15)\n \n \f\n-/* Define the `__builtin_va_list' type for the ABI.  */\n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = mips_build_va_list ()\n-\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   mips_va_start (valist, nextarg)"}, {"sha": "2f50d1ef7ba92d64f07240646b8f5e6d3a948c2f", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -166,7 +166,6 @@ extern enum direction function_arg_padding (enum machine_mode, tree);\n extern void optimization_options (int, int);\n extern void rs6000_override_options (const char *);\n extern int direct_return (void);\n-extern union tree_node *rs6000_build_va_list (void);\n extern int first_reg_to_save (void);\n extern int first_fp_reg_to_save (void);\n extern rs6000_stack_t *rs6000_stack_info (void);"}, {"sha": "94527017ac4ac342d97182ba4fdf78f90b126735", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -350,6 +350,7 @@ static rtx rs6000_spe_function_arg (CUMULATIVE_ARGS *,\n static void setup_incoming_varargs (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree,\n \t\t\t\t    int *, int);\n+static tree rs6000_build_builtin_va_list (void);\n \n /* Hash table stuff for keeping track of TOC entries.  */\n \n@@ -554,6 +555,9 @@ static const char alt_reg_names[][8] =\n #undef TARGET_PRETEND_OUTGOING_VARARGS_NAMED\n #define TARGET_PRETEND_OUTGOING_VARARGS_NAMED hook_bool_CUMULATIVE_ARGS_true\n \n+#undef TARGET_BUILD_BUILTIN_VA_LIST\n+#define TARGET_BUILD_BUILTIN_VA_LIST rs6000_build_builtin_va_list\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Override command line options.  Mostly we process the processor\n@@ -4338,8 +4342,8 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n /* Create the va_list data type.  */\n \n-tree\n-rs6000_build_va_list (void)\n+static tree\n+rs6000_build_builtin_va_list (void)\n {\n   tree f_gpr, f_fpr, f_res, f_ovf, f_sav, record, type_decl;\n "}, {"sha": "d2c31099e5d03263e09c906508c453f246af11f0", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -1869,10 +1869,6 @@ typedef struct rs6000_args\n    the ABIs at the moment.  For now, only AIX gets fixed.  */\n #define SPLIT_COMPLEX_ARGS (DEFAULT_ABI == ABI_AIX)\n \n-/* Define the `__builtin_va_list' type for the ABI.  */\n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = rs6000_build_va_list ()\n-\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   rs6000_va_start (valist, nextarg)"}, {"sha": "cad75e0abd1e6ef956393b75bf4291ae02fd863c", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -97,7 +97,6 @@ extern int s390_agen_dep_p (rtx, rtx);\n extern int s390_function_arg_pass_by_reference (enum machine_mode, tree);\n extern void s390_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, int);\n-extern tree s390_build_va_list (void);\n #ifdef RTX_CODE\n extern rtx s390_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern void s390_va_start (tree, rtx);"}, {"sha": "9a343a95b3bc3f2c6ef91fa84b3d5e5f3641cee0", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -76,6 +76,7 @@ static bool s390_rtx_costs (rtx, int, int, int *);\n static int s390_address_cost (rtx);\n static void s390_reorg (void);\n static bool s390_valid_pointer_mode (enum machine_mode);\n+static tree s390_build_builtin_va_list (void);\n \n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n@@ -140,6 +141,9 @@ static bool s390_valid_pointer_mode (enum machine_mode);\n #undef TARGET_VALID_POINTER_MODE\n #define TARGET_VALID_POINTER_MODE s390_valid_pointer_mode\n \n+#undef TARGET_BUILD_BUILTIN_VA_LIST\n+#define TARGET_BUILD_BUILTIN_VA_LIST s390_build_builtin_va_list\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n extern int reload_completed;\n@@ -6107,7 +6111,6 @@ s390_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n             long __fpr;\n             void *__overflow_arg_area;\n             void *__reg_save_area;\n-\n         } va_list[1];\n \n    where __gpr and __fpr hold the number of general purpose\n@@ -6119,8 +6122,8 @@ s390_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n    saves all registers used for argument passing into this\n    area if the function uses variable arguments.  */\n \n-tree\n-s390_build_va_list (void)\n+static tree\n+s390_build_builtin_va_list (void)\n {\n   tree f_gpr, f_fpr, f_ovf, f_sav, record, type_decl;\n "}, {"sha": "610223a41f44c98761f2b0588481823daf6b9a25", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -750,9 +750,6 @@ CUMULATIVE_ARGS;\n \n /* Implementing the varargs macros.  */\n \n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = s390_build_va_list ()\n-\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   s390_va_start (valist, nextarg)\n "}, {"sha": "eb2f201040023359b0a427552461131de4bbaf12", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -103,10 +103,6 @@ extern rtx sh_va_arg (tree, tree);\n #endif /* TREE_CODE */\n #endif /* RTX_CODE */\n \n-#ifdef TREE_CODE\n-extern tree sh_build_va_list (void);\n-#endif /* TREE_CODE */\n-\n extern const char *output_jump_label_table (void);\n extern int sh_handle_pragma (int (*)(void), void (*)(int), const char *);\n extern struct rtx_def *get_fpscr_rtx (void);"}, {"sha": "d84a36f42f9d943649d9f812dad935706ad2575e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -246,6 +246,7 @@ static rtx sh_builtin_saveregs (void);\n static void sh_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int);\n static bool sh_strict_argument_naming (CUMULATIVE_ARGS *);\n static bool sh_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n+static tree sh_build_builtin_va_list (void);\n \n \f\n /* Initialize the GCC target structure.  */\n@@ -345,6 +346,9 @@ static bool sh_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n #undef TARGET_PRETEND_OUTGOING_VARARGS_NAMED\n #define TARGET_PRETEND_OUTGOING_VARARGS_NAMED sh_pretend_outgoing_varargs_named\n \n+#undef TARGET_BUILD_BUILTIN_VA_LIST\n+#define TARGET_BUILD_BUILTIN_VA_LIST sh_build_builtin_va_list\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Print the operand address in x to the stream.  */\n@@ -5911,8 +5915,8 @@ sh_builtin_saveregs (void)\n \n /* Define the `__builtin_va_list' type for the ABI.  */\n \n-tree\n-sh_build_va_list (void)\n+static tree\n+sh_build_builtin_va_list (void)\n {\n   tree f_next_o, f_next_o_limit, f_next_fp, f_next_fp_limit, f_next_stack;\n   tree record;"}, {"sha": "907e7652593bc0c87b2d8b165686b1198c5ddb5d", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -2033,10 +2033,6 @@ struct sh_args {\n /* Perform any needed actions needed for a function that is receiving a\n    variable number of arguments.  */\n \n-/* Define the `__builtin_va_list' type for the ABI.  */\n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = sh_build_va_list ()\n-\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   sh_va_start (valist, nextarg)"}, {"sha": "0d6d45f1640927dd1e36b6bfd724c909b4cb8339", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -96,7 +96,6 @@ extern int a7_overlap_mentioned_p (rtx);\n extern void function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree);\n extern struct rtx_def *function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t     tree, int);\n-extern tree xtensa_build_va_list (void);\n #endif /* TREE_CODE */\n \n extern int xtensa_mask_immediate (int);"}, {"sha": "2e69c46f7140cf70dc884ee653c6a4209a97e79d", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -205,6 +205,7 @@ static unsigned int xtensa_multibss_section_type_flags (tree, const char *,\n static void xtensa_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t       unsigned HOST_WIDE_INT);\n static bool xtensa_rtx_costs (rtx, int, int, int *);\n+static tree xtensa_build_builtin_va_list (void);\n \n static int current_function_arg_words;\n static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n@@ -233,6 +234,9 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_0\n \n+#undef TARGET_BUILD_BUILTIN_VA_LIST\n+#define TARGET_BUILD_BUILTIN_VA_LIST xtensa_build_builtin_va_list\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n \n@@ -2318,8 +2322,8 @@ xtensa_return_addr (int count, rtx frame)\n    references argument word N for 0 <= N < 6, and __va_stk[N*4] references\n    argument word N for N >= 6.  */\n \n-tree\n-xtensa_build_va_list (void)\n+static tree\n+xtensa_build_builtin_va_list (void)\n {\n   tree f_stk, f_reg, f_ndx, record, type_decl;\n "}, {"sha": "dae6810ea008b64cf736b20c958db16569014d8b", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -930,10 +930,6 @@ typedef struct xtensa_args {\n \t\t       0, VOIDmode, 1, addr, Pmode);\t\t\t\\\n   } while (0)\n \n-/* Define the `__builtin_va_list' type for the ABI.  */\n-#define BUILD_VA_LIST_TYPE(VALIST) \\\n-  (VALIST) = xtensa_build_va_list ()\n-\n /* If defined, is a C expression that produces the machine-specific\n    code for a call to '__builtin_saveregs'.  This code will be moved\n    to the very beginning of the function, before any parameter access"}, {"sha": "7b0c6b84846bc3d93775c868fc2d6fb14829b7de", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -382,10 +382,6 @@ do { fputs (integer_asm_op (POINTER_SIZE / UNITS_PER_WORD, TRUE), FILE); \\\n #define POINTER_SIZE BITS_PER_WORD\n #endif\n \n-#ifndef BUILD_VA_LIST_TYPE\n-#define BUILD_VA_LIST_TYPE(X) ((X) = ptr_type_node)\n-#endif\n-\n #ifndef PIC_OFFSET_TABLE_REGNUM\n #define PIC_OFFSET_TABLE_REGNUM INVALID_REGNUM\n #endif"}, {"sha": "abd7f5b049de007d61cf2d59da6878a8927e47d7", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -331,6 +331,7 @@ extern rtx gen_cond_trap (enum rtx_code, rtx, rtx, rtx);\n \f\n /* Functions from builtins.c:  */\n extern rtx expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n+extern tree std_build_builtin_va_list (void);\n extern void std_expand_builtin_va_start (tree, rtx);\n extern rtx std_expand_builtin_va_arg (tree, tree);\n extern rtx expand_builtin_va_arg (tree, tree);"}, {"sha": "a00c0d37d42e52f79ceebd702dd12961ad59e489", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -594,7 +594,7 @@ typedef char _Bool;\n \tASM_SIMPLIFY_DWARF_ADDR INIT_TARGET_OPTABS INIT_SUBTARGET_OPTABS \\\n \tINIT_GOFAST_OPTABS MULSI3_LIBCALL MULDI3_LIBCALL DIVSI3_LIBCALL \\\n \tDIVDI3_LIBCALL UDIVSI3_LIBCALL UDIVDI3_LIBCALL MODSI3_LIBCALL\t\\\n-\tMODDI3_LIBCALL UMODSI3_LIBCALL UMODDI3_LIBCALL\n+\tMODDI3_LIBCALL UMODSI3_LIBCALL UMODDI3_LIBCALL BUILD_VA_LIST_TYPE\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "4d091f2160234004803da54e55c1a635a9a7b0a7", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -316,6 +316,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #define TARGET_MACHINE_DEPENDENT_REORG 0\n \n+#define TARGET_BUILD_BUILTIN_VA_LIST std_build_builtin_va_list\n+\n #define TARGET_GET_PCH_VALIDITY default_get_pch_validity\n #define TARGET_PCH_VALID_P default_pch_valid_p\n \n@@ -377,6 +379,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_ADDRESS_COST,\t\t\t\t\\\n   TARGET_DWARF_REGISTER_SPAN,                   \\\n   TARGET_MACHINE_DEPENDENT_REORG,\t\t\\\n+  TARGET_BUILD_BUILTIN_VA_LIST,\t\t\t\\\n   TARGET_GET_PCH_VALIDITY,\t\t\t\\\n   TARGET_PCH_VALID_P,\t\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\"}, {"sha": "c77d40f5fafdce1a2e30fa1569285418d9cba430", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -382,6 +382,9 @@ struct gcc_target\n      delayed-branch scheduling.  */\n   void (* machine_dependent_reorg) (void);\n \n+  /* Create the __builtin_va_list type.  */\n+  tree (* build_builtin_va_list) (void);\n+\n   /* Validity-checking routines for PCH files, target-specific.\n      get_pch_validity returns a pointer to the data to be stored,\n      and stores the size in its argument.  pch_valid_p gets the same"}, {"sha": "66e0afd735130f1625eff24a8ae38ef9ca747efd", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35d187fc31fdd5836d1acb13e29a03537d22b46/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c35d187fc31fdd5836d1acb13e29a03537d22b46", "patch": "@@ -4916,8 +4916,7 @@ build_common_tree_nodes_2 (int short_double)\n   layout_type (complex_long_double_type_node);\n \n   {\n-    tree t;\n-    BUILD_VA_LIST_TYPE (t);\n+    tree t = (*targetm.build_builtin_va_list) ();\n \n     /* Many back-ends define record types without setting TYPE_NAME.\n        If we copied the record type here, we'd keep the original"}]}