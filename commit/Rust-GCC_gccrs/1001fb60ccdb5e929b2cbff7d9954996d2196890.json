{"sha": "1001fb60ccdb5e929b2cbff7d9954996d2196890", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwMWZiNjBjY2RiNWU5MjliMmNiZmY3ZDk5NTQ5OTZkMjE5Njg5MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-11-28T12:18:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-11-28T12:18:39Z"}, "message": "re PR tree-optimization/54547 (FAIL: gcc.dg/tree-ssa/pr37508.c scan-tree-dump-times vrp1 \"Folding\" 3)\n\n2012-11-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/54547\n\t* tree-vrp.c (set_and_canonicalize_value_range): Handle\n\t1-bit anti-ranges explicitely.\n\t(extract_range_from_assert): Properly canonicalize all\n\tbuilt anti-ranges.\n\nFrom-SVN: r193888", "tree": {"sha": "d3aabbe906b306a411332e60aaba0c2f12064e55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3aabbe906b306a411332e60aaba0c2f12064e55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1001fb60ccdb5e929b2cbff7d9954996d2196890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1001fb60ccdb5e929b2cbff7d9954996d2196890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1001fb60ccdb5e929b2cbff7d9954996d2196890", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1001fb60ccdb5e929b2cbff7d9954996d2196890/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6625d7bc4c6c0b61a45df8918927471b1ab30b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6625d7bc4c6c0b61a45df8918927471b1ab30b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6625d7bc4c6c0b61a45df8918927471b1ab30b7b"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "128062da83fedc7f1d5eb25fbe70c688379ed01a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1001fb60ccdb5e929b2cbff7d9954996d2196890/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1001fb60ccdb5e929b2cbff7d9954996d2196890/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1001fb60ccdb5e929b2cbff7d9954996d2196890", "patch": "@@ -1,3 +1,11 @@\n+2012-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54547\n+\t* tree-vrp.c (set_and_canonicalize_value_range): Handle\n+\t1-bit anti-ranges explicitely.\n+\t(extract_range_from_assert): Properly canonicalize all\n+\tbuilt anti-ranges.\n+\n 2012-11-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* stor-layout.c (layout_type) <ARRAY_TYPE>: Do not clear TREE_OVERFLOW"}, {"sha": "dc03db5d069b12d07e22bcf6259fe5310bb64760", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1001fb60ccdb5e929b2cbff7d9954996d2196890/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1001fb60ccdb5e929b2cbff7d9954996d2196890/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1001fb60ccdb5e929b2cbff7d9954996d2196890", "patch": "@@ -541,22 +541,15 @@ set_and_canonicalize_value_range (value_range_t *vr, enum value_range_type t,\n \t  return;\n \t}\n       else if (TYPE_PRECISION (TREE_TYPE (min)) == 1\n-\t       && !TYPE_UNSIGNED (TREE_TYPE (min))\n \t       && (is_min || is_max))\n \t{\n-\t  /* For signed 1-bit precision, one is not in-range and\n-\t     thus adding/subtracting it would result in overflows.  */\n-\t  if (operand_equal_p (min, max, 0))\n-\t    {\n-\t      min = max = is_min ? vrp_val_max (TREE_TYPE (min))\n-\t\t\t\t : vrp_val_min (TREE_TYPE (min));\n-\t      t = VR_RANGE;\n-\t    }\n+\t  /* Non-empty boolean ranges can always be represented\n+\t     as a singleton range.  */\n+\t  if (is_min)\n+\t    min = max = vrp_val_max (TREE_TYPE (min));\n \t  else\n-\t    {\n-\t      set_value_range_to_varying (vr);\n-\t      return;\n-\t    }\n+\t    min = max = vrp_val_min (TREE_TYPE (min));\n+\t  t = VR_RANGE;\n \t}\n       else if (is_min\n \t       /* As a special exception preserve non-null ranges.  */\n@@ -1707,7 +1700,8 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t  && vrp_val_is_max (max))\n \tmin = max = limit;\n \n-      set_value_range (vr_p, VR_ANTI_RANGE, min, max, vr_p->equiv);\n+      set_and_canonicalize_value_range (vr_p, VR_ANTI_RANGE,\n+\t\t\t\t\tmin, max, vr_p->equiv);\n     }\n   else if (cond_code == LE_EXPR || cond_code == LT_EXPR)\n     {"}]}