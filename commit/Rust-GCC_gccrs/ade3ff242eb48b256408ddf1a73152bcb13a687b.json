{"sha": "ade3ff242eb48b256408ddf1a73152bcb13a687b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRlM2ZmMjQyZWI0OGIyNTY0MDhkZGYxYTczMTUyYmNiMTNhNjg3Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@twiddle.net", "date": "2014-02-03T23:13:08Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2014-02-03T23:13:08Z"}, "message": "re PR tree-optimization/59924 (uninit memory hog)\n\nPR tree-opt/59924\n\n        * tree-ssa-uninit.c (push_to_worklist): Don't re-push if we've\n        already processed this node.\n        (normalize_one_pred_1): Pass along mark_set.\n        (normalize_one_pred): Create and destroy a pointer_set_t.\n        (normalize_one_pred_chain): Likewise.\n\nFrom-SVN: r207442", "tree": {"sha": "0e7eec685bf75c6b5a0dc49c5cbde949012647aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e7eec685bf75c6b5a0dc49c5cbde949012647aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ade3ff242eb48b256408ddf1a73152bcb13a687b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ade3ff242eb48b256408ddf1a73152bcb13a687b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ade3ff242eb48b256408ddf1a73152bcb13a687b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ade3ff242eb48b256408ddf1a73152bcb13a687b/comments", "author": {"login": "rth7680", "id": 2529319, "node_id": "MDQ6VXNlcjI1MjkzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2529319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rth7680", "html_url": "https://github.com/rth7680", "followers_url": "https://api.github.com/users/rth7680/followers", "following_url": "https://api.github.com/users/rth7680/following{/other_user}", "gists_url": "https://api.github.com/users/rth7680/gists{/gist_id}", "starred_url": "https://api.github.com/users/rth7680/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rth7680/subscriptions", "organizations_url": "https://api.github.com/users/rth7680/orgs", "repos_url": "https://api.github.com/users/rth7680/repos", "events_url": "https://api.github.com/users/rth7680/events{/privacy}", "received_events_url": "https://api.github.com/users/rth7680/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55428cc32908fd176450e703d58bb901b75e55db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55428cc32908fd176450e703d58bb901b75e55db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55428cc32908fd176450e703d58bb901b75e55db"}], "stats": {"total": 96, "additions": 59, "deletions": 37}, "files": [{"sha": "1c76b13844db6290c6c06fd02cacd67f01a894ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade3ff242eb48b256408ddf1a73152bcb13a687b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade3ff242eb48b256408ddf1a73152bcb13a687b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ade3ff242eb48b256408ddf1a73152bcb13a687b", "patch": "@@ -1,3 +1,12 @@\n+2014-02-03  Richard Henderson  <rth@twiddle.net>\n+\n+\tPR tree-opt/59924\n+\t* tree-ssa-uninit.c (push_to_worklist): Don't re-push if we've\n+\talready processed this node.\n+\t(normalize_one_pred_1): Pass along mark_set.\n+\t(normalize_one_pred): Create and destroy a pointer_set_t.\n+\t(normalize_one_pred_chain): Likewise.\n+\n 2014-02-03  Laurent Aflonsi  <laurent.alfonsi@st.com>\n \n \tPR gcov-profile/58602"}, {"sha": "71a564c9944e89e7fbfeb1691971f92144a6de7c", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 50, "deletions": 37, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade3ff242eb48b256408ddf1a73152bcb13a687b/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade3ff242eb48b256408ddf1a73152bcb13a687b/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=ade3ff242eb48b256408ddf1a73152bcb13a687b", "patch": "@@ -1821,8 +1821,13 @@ push_pred (pred_chain_union *norm_preds, pred_info pred)\n    OP != 0 and push it WORK_LIST.  */\n \n inline static void\n-push_to_worklist (tree op, vec<pred_info, va_heap, vl_ptr> *work_list)\n+push_to_worklist (tree op, vec<pred_info, va_heap, vl_ptr> *work_list,\n+                  pointer_set_t *mark_set)\n {\n+  if (pointer_set_contains (mark_set, op))\n+    return;\n+  pointer_set_insert (mark_set, op);\n+\n   pred_info arg_pred;\n   arg_pred.pred_lhs = op;\n   arg_pred.pred_rhs = integer_zero_node;\n@@ -1905,7 +1910,8 @@ normalize_one_pred_1 (pred_chain_union *norm_preds,\n                       pred_chain *norm_chain,\n                       pred_info pred,\n                       enum tree_code and_or_code,\n-                      vec<pred_info, va_heap, vl_ptr> *work_list)\n+                      vec<pred_info, va_heap, vl_ptr> *work_list,\n+\t\t      pointer_set_t *mark_set)\n {\n   if (!is_neq_zero_form_p (pred))\n     {\n@@ -1945,39 +1951,37 @@ normalize_one_pred_1 (pred_chain_union *norm_preds,\n           if (integer_zerop (op))\n             continue;\n \n-          push_to_worklist (op, work_list);\n+          push_to_worklist (op, work_list, mark_set);\n         }\n-     }\n-   else if (gimple_code (def_stmt) != GIMPLE_ASSIGN)\n-     {\n-       if (and_or_code == BIT_IOR_EXPR)\n-         push_pred (norm_preds, pred);\n-       else\n-         norm_chain->safe_push (pred);\n-     }\n-   else if (gimple_assign_rhs_code (def_stmt) == and_or_code)\n-     {\n-        push_to_worklist (gimple_assign_rhs1 (def_stmt),\n-                          work_list);\n-        push_to_worklist (gimple_assign_rhs2 (def_stmt),\n-                          work_list);\n-     }\n-   else if (TREE_CODE_CLASS (gimple_assign_rhs_code (def_stmt))\n-            == tcc_comparison)\n-     {\n-       pred_info n_pred = get_pred_info_from_cmp (def_stmt);\n-       if (and_or_code == BIT_IOR_EXPR)\n-         push_pred (norm_preds, n_pred);\n-       else\n-         norm_chain->safe_push (n_pred);\n-     }\n-   else\n-     {\n-       if (and_or_code == BIT_IOR_EXPR)\n-         push_pred (norm_preds, pred);\n-       else\n-         norm_chain->safe_push (pred);\n-     }\n+    }\n+  else if (gimple_code (def_stmt) != GIMPLE_ASSIGN)\n+    {\n+      if (and_or_code == BIT_IOR_EXPR)\n+\tpush_pred (norm_preds, pred);\n+      else\n+\tnorm_chain->safe_push (pred);\n+    }\n+  else if (gimple_assign_rhs_code (def_stmt) == and_or_code)\n+    {\n+      push_to_worklist (gimple_assign_rhs1 (def_stmt), work_list, mark_set);\n+      push_to_worklist (gimple_assign_rhs2 (def_stmt), work_list, mark_set);\n+    }\n+  else if (TREE_CODE_CLASS (gimple_assign_rhs_code (def_stmt))\n+\t   == tcc_comparison)\n+    {\n+      pred_info n_pred = get_pred_info_from_cmp (def_stmt);\n+      if (and_or_code == BIT_IOR_EXPR)\n+\tpush_pred (norm_preds, n_pred);\n+      else\n+\tnorm_chain->safe_push (n_pred);\n+    }\n+  else\n+    {\n+      if (and_or_code == BIT_IOR_EXPR)\n+\tpush_pred (norm_preds, pred);\n+      else\n+\tnorm_chain->safe_push (pred);\n+    }\n }\n \n /* Normalize PRED and store the normalized predicates into NORM_PREDS.  */\n@@ -1987,6 +1991,7 @@ normalize_one_pred (pred_chain_union *norm_preds,\n                     pred_info pred)\n {\n   vec<pred_info, va_heap, vl_ptr> work_list = vNULL;\n+  pointer_set_t *mark_set = NULL;\n   enum tree_code and_or_code = ERROR_MARK;\n   pred_chain norm_chain = vNULL;\n \n@@ -2014,38 +2019,46 @@ normalize_one_pred (pred_chain_union *norm_preds,\n     }\n \n   work_list.safe_push (pred);\n+  mark_set = pointer_set_create ();\n+\n   while (!work_list.is_empty ())\n     {\n       pred_info a_pred = work_list.pop ();\n       normalize_one_pred_1 (norm_preds, &norm_chain, a_pred,\n-                            and_or_code, &work_list);\n+                            and_or_code, &work_list, mark_set);\n     }\n   if (and_or_code == BIT_AND_EXPR)\n     norm_preds->safe_push (norm_chain);\n \n   work_list.release ();\n+  pointer_set_destroy (mark_set);\n }\n \n static void\n normalize_one_pred_chain (pred_chain_union *norm_preds,\n                           pred_chain one_chain)\n {\n   vec<pred_info, va_heap, vl_ptr> work_list = vNULL;\n+  pointer_set_t *mark_set = pointer_set_create ();\n   pred_chain norm_chain = vNULL;\n   size_t i;\n \n   for (i = 0; i < one_chain.length (); i++)\n-    work_list.safe_push (one_chain[i]);\n+    {\n+      work_list.safe_push (one_chain[i]);\n+      pointer_set_insert (mark_set, one_chain[i].pred_lhs);\n+    }\n \n   while (!work_list.is_empty ())\n     {\n       pred_info a_pred = work_list.pop ();\n       normalize_one_pred_1 (0, &norm_chain, a_pred,\n-                            BIT_AND_EXPR, &work_list);\n+                            BIT_AND_EXPR, &work_list, mark_set);\n     }\n \n   norm_preds->safe_push (norm_chain);\n   work_list.release ();\n+  pointer_set_destroy (mark_set);\n }\n \n /* Normalize predicate chains PREDS and returns the normalized one.  */"}]}