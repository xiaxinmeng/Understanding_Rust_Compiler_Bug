{"sha": "c0ba7a8af5366c37241f20e8be41e362f7260389", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBiYTdhOGFmNTM2NmMzNzI0MWYyMGU4YmU0MWUzNjJmNzI2MDM4OQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2021-06-09T09:12:57Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2021-06-09T09:12:57Z"}, "message": "arc: Update 64bit move split patterns.\n\nARCv2HS can use a limited number of instructions to implement 64bit\nmoves. The VADD2 is used as a 64bit move, the LDD/STD are 64 bit loads\nand stores. All those instructions are not baseline, hence we need to\nprovide alternatives when they are not available or cannot be generate\ndue to instruction restriction.\n\nThis patch is cleaning up those move patterns, and updates splits\ninstruction lengths.\n\ngcc/\n2021-06-09  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc-protos.h (arc_split_move_p): New prototype.\n\t* config/arc/arc.c (arc_split_move_p): New function.\n\t(arc_split_move): Clean up.\n\t* config/arc/arc.md (movdi_insn): Clean up, use arc_split_move_p.\n\t(movdf_insn): Likewise.\n\t* config/arc/simdext.md (mov<VWH>_insn): Likewise.\n\nSigned-off-by: Claudiu Zissulescu <claziss@synopsys.com>", "tree": {"sha": "6dff994f3ed1329cab83f5b4a77c8cfbb0e2de97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dff994f3ed1329cab83f5b4a77c8cfbb0e2de97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0ba7a8af5366c37241f20e8be41e362f7260389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ba7a8af5366c37241f20e8be41e362f7260389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ba7a8af5366c37241f20e8be41e362f7260389", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ba7a8af5366c37241f20e8be41e362f7260389/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4d38135b3137f1d3148138340e67bdcd7ea8216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d38135b3137f1d3148138340e67bdcd7ea8216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d38135b3137f1d3148138340e67bdcd7ea8216"}], "stats": {"total": 174, "additions": 52, "deletions": 122}, "files": [{"sha": "62d7e45d29df1b45c955db77a668cba500b6a1b0", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ba7a8af5366c37241f20e8be41e362f7260389/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ba7a8af5366c37241f20e8be41e362f7260389/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=c0ba7a8af5366c37241f20e8be41e362f7260389", "patch": "@@ -50,6 +50,7 @@ extern void arc_split_ior (rtx *);\n extern bool arc_check_mov_const (HOST_WIDE_INT );\n extern bool arc_split_mov_const (rtx *);\n extern bool arc_can_use_return_insn (void);\n+extern bool arc_split_move_p (rtx *);\n #endif /* RTX_CODE */\n \n extern bool arc_ccfsm_branch_deleted_p (void);"}, {"sha": "69f6ae464e1816a2bea94cceff9c4875b23dea0c", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ba7a8af5366c37241f20e8be41e362f7260389/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ba7a8af5366c37241f20e8be41e362f7260389/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=c0ba7a8af5366c37241f20e8be41e362f7260389", "patch": "@@ -10108,6 +10108,31 @@ arc_process_double_reg_moves (rtx *operands)\n   return true;\n }\n \n+\n+/* Check if we need to split a 64bit move.  We do not need to split it if we can\n+   use vadd2 or ldd/std instructions.  */\n+\n+bool\n+arc_split_move_p (rtx *operands)\n+{\n+  machine_mode mode = GET_MODE (operands[0]);\n+\n+  if (TARGET_LL64\n+      && ((memory_operand (operands[0], mode)\n+\t   && (even_register_operand (operands[1], mode)\n+\t       || satisfies_constraint_Cm3 (operands[1])))\n+\t  || (memory_operand (operands[1], mode)\n+\t      && even_register_operand (operands[0], mode))))\n+    return false;\n+\n+  if (TARGET_PLUS_QMACW\n+      && even_register_operand (operands[0], mode)\n+      && even_register_operand (operands[1], mode))\n+    return false;\n+\n+  return true;\n+}\n+\n /* operands 0..1 are the operands of a 64 bit move instruction.\n    split it into two moves with operands 2/3 and 4/5.  */\n \n@@ -10125,25 +10150,6 @@ arc_split_move (rtx *operands)\n       return;\n   }\n \n-  if (TARGET_LL64\n-      && ((memory_operand (operands[0], mode)\n-\t   && (even_register_operand (operands[1], mode)\n-\t       || satisfies_constraint_Cm3 (operands[1])))\n-\t  || (memory_operand (operands[1], mode)\n-\t      && even_register_operand (operands[0], mode))))\n-    {\n-      emit_move_insn (operands[0], operands[1]);\n-      return;\n-    }\n-\n-  if (TARGET_PLUS_QMACW\n-      && even_register_operand (operands[0], mode)\n-      && even_register_operand (operands[1], mode))\n-    {\n-      emit_move_insn (operands[0], operands[1]);\n-      return;\n-    }\n-\n   if (TARGET_PLUS_QMACW\n       && GET_CODE (operands[1]) == CONST_VECTOR)\n     {"}, {"sha": "6f13b3a01d8e3d357929b7e628f2d110ba7cc0ca", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 18, "deletions": 73, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ba7a8af5366c37241f20e8be41e362f7260389/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ba7a8af5366c37241f20e8be41e362f7260389/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=c0ba7a8af5366c37241f20e8be41e362f7260389", "patch": "@@ -1330,47 +1330,20 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   \"register_operand (operands[0], DImode)\n    || register_operand (operands[1], DImode)\n    || (satisfies_constraint_Cm3 (operands[1])\n-      && memory_operand (operands[0], DImode))\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    default:\n-      return \\\"#\\\";\n-\n-    case 0:\n-    if (TARGET_PLUS_QMACW\n-\t&& even_register_operand (operands[0], DImode)\n-\t&& even_register_operand (operands[1], DImode))\n-      return \\\"vadd2%?\\\\t%0,%1,0\\\";\n-    return \\\"#\\\";\n-\n-    case 2:\n-    if (TARGET_LL64\n-        && memory_operand (operands[1], DImode)\n-\t&& even_register_operand (operands[0], DImode))\n-      return \\\"ldd%U1%V1 %0,%1%&\\\";\n-    return \\\"#\\\";\n-\n-    case 3:\n-    if (TARGET_LL64\n-\t&& memory_operand (operands[0], DImode)\n-\t&& (even_register_operand (operands[1], DImode)\n-\t    || satisfies_constraint_Cm3 (operands[1])))\n-     return \\\"std%U0%V0 %1,%0\\\";\n-    return \\\"#\\\";\n-    }\n-}\"\n-  \"&& reload_completed\"\n+       && memory_operand (operands[0], DImode))\"\n+  \"@\n+   vadd2\\\\t%0,%1,0\n+   #\n+   ldd%U1%V1\\\\t%0,%1\n+   std%U0%V0\\\\t%1,%0\"\n+  \"&& reload_completed && arc_split_move_p (operands)\"\n   [(const_int 0)]\n   {\n    arc_split_move (operands);\n    DONE;\n   }\n   [(set_attr \"type\" \"move,move,load,store\")\n-   ;; ??? The ld/st values could be 4 if it's [reg,bignum].\n-   (set_attr \"length\" \"8,16,*,*\")])\n-\n+   (set_attr \"length\" \"8,16,16,16\")])\n \n ;; Floating point move insns.\n \n@@ -1409,50 +1382,22 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n (define_insn_and_split \"*movdf_insn\"\n   [(set (match_operand:DF 0 \"move_dest_operand\"      \"=D,r,r,r,r,m\")\n \t(match_operand:DF 1 \"move_double_src_operand\" \"r,D,r,E,m,r\"))]\n-  \"register_operand (operands[0], DFmode)\n-   || register_operand (operands[1], DFmode)\"\n-  \"*\n-{\n- switch (which_alternative)\n-   {\n-    default:\n-      return \\\"#\\\";\n-\n-    case 2:\n-    if (TARGET_PLUS_QMACW\n-\t&& even_register_operand (operands[0], DFmode)\n-\t&& even_register_operand (operands[1], DFmode))\n-      return \\\"vadd2%?\\\\t%0,%1,0\\\";\n-    return \\\"#\\\";\n-\n-    case 4:\n-    if (TARGET_LL64\n-\t&& ((even_register_operand (operands[0], DFmode)\n-\t     && memory_operand (operands[1], DFmode))\n-\t    || (memory_operand (operands[0], DFmode)\n-\t        && even_register_operand (operands[1], DFmode))))\n-      return \\\"ldd%U1%V1 %0,%1%&\\\";\n-    return \\\"#\\\";\n-\n-    case 5:\n-    if (TARGET_LL64\n-\t&& ((even_register_operand (operands[0], DFmode)\n-\t     && memory_operand (operands[1], DFmode))\n-\t    || (memory_operand (operands[0], DFmode)\n-\t\t&& even_register_operand (operands[1], DFmode))))\n-     return \\\"std%U0%V0 %1,%0\\\";\n-    return \\\"#\\\";\n-   }\n-}\"\n-  \"reload_completed\"\n+  \"(register_operand (operands[0], DFmode)\n+    || register_operand (operands[1], DFmode))\"\n+  \"@\n+   #\n+   #\n+   vadd2\\\\t%0,%1,0\n+   #\n+   ldd%U1%V1\\\\t%0,%1\n+   std%U0%V0\\\\t%1,%0\"\n+  \"&& reload_completed && arc_split_move_p (operands)\"\n   [(const_int 0)]\n   {\n    arc_split_move (operands);\n    DONE;\n   }\n   [(set_attr \"type\" \"move,move,move,move,load,store\")\n-   (set_attr \"predicable\" \"no,no,no,yes,no,no\")\n-   ;; ??? The ld/st values could be 16 if it's [reg,bignum].\n    (set_attr \"length\" \"4,16,8,16,16,16\")])\n \n (define_insn_and_split \"*movdf_insn_nolrsr\""}, {"sha": "303f52cf260d5f8a8ca39d99fae67c80b3558ac5", "filename": "gcc/config/arc/simdext.md", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ba7a8af5366c37241f20e8be41e362f7260389/gcc%2Fconfig%2Farc%2Fsimdext.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ba7a8af5366c37241f20e8be41e362f7260389/gcc%2Fconfig%2Farc%2Fsimdext.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fsimdext.md?ref=c0ba7a8af5366c37241f20e8be41e362f7260389", "patch": "@@ -1472,41 +1472,19 @@\n \t(match_operand:VWH 1 \"general_operand\"    \"i,r,m,r\"))]\n   \"(register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-     default:\n-       return \\\"#\\\";\n-\n-     case 1:\n-       if (TARGET_PLUS_QMACW\n-\t   && even_register_operand (operands[0], <MODE>mode)\n-\t   && even_register_operand (operands[1], <MODE>mode))\n-\t return \\\"vadd2%?\\\\t%0,%1,0\\\";\n-       return \\\"#\\\";\n-\n-     case 2:\n-       if (TARGET_LL64)\n-\t return \\\"ldd%U1%V1\\\\t%0,%1\\\";\n-       return \\\"#\\\";\n-\n-     case 3:\n-       if (TARGET_LL64)\n-\t   return \\\"std%U0%V0\\\\t%1,%0\\\";\n-\t return \\\"#\\\";\n-    }\n-}\"\n-  \"reload_completed\"\n+  \"@\n+   #\n+   vadd2\\\\t%0,%1,0\n+   ldd%U1%V1\\\\t%0,%1\n+   std%U0%V0\\\\t%1,%0\"\n+  \"&& reload_completed && arc_split_move_p (operands)\"\n   [(const_int 0)]\n   {\n    arc_split_move (operands);\n    DONE;\n   }\n-  [(set_attr \"type\" \"move,multi,load,store\")\n-   (set_attr \"predicable\" \"no,no,no,no\")\n-   (set_attr \"iscompact\"  \"false,false,false,false\")\n-   ])\n+  [(set_attr \"type\" \"move,move,load,store\")\n+   (set_attr \"length\" \"16,8,16,16\")])\n \n (define_expand \"movmisalign<mode>\"\n   [(set (match_operand:VWH 0 \"general_operand\" \"\")"}]}