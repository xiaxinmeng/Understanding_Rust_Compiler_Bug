{"sha": "2cb3951d3277847945a0c1cc1516fdcde59a1912", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNiMzk1MWQzMjc3ODQ3OTQ1YTBjMWNjMTUxNmZkY2RlNTlhMTkxMg==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-10-30T02:37:25Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-10-30T02:37:25Z"}, "message": "parse.y (patch_method_invocation): NULLify this_arg when already inserted.\n\n2000-10-25  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* parse.y (patch_method_invocation): NULLify this_arg when already\n\tinserted.\n\t(maybe_use_access_method): Handle call to methods unrelated to the\n\tcurrent class. Fixed comment.\n\tFixes gcj/361.\n\n(http://sources.redhat.com/ml/java-prs/2000-q4/msg00072.html\n http://gcc.gnu.org/ml/gcc-patches/2000-10/msg00993.html)\n\nFrom-SVN: r37139", "tree": {"sha": "f99896e3408c47839acc86752cecc450e462ec05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f99896e3408c47839acc86752cecc450e462ec05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cb3951d3277847945a0c1cc1516fdcde59a1912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb3951d3277847945a0c1cc1516fdcde59a1912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cb3951d3277847945a0c1cc1516fdcde59a1912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb3951d3277847945a0c1cc1516fdcde59a1912/comments", "author": null, "committer": null, "parents": [{"sha": "661a98d17ace6fdf2aa293528f175e882ac8981c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661a98d17ace6fdf2aa293528f175e882ac8981c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/661a98d17ace6fdf2aa293528f175e882ac8981c"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "363b6da61fd4848badebbdbc25c8d5d3625f271e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb3951d3277847945a0c1cc1516fdcde59a1912/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb3951d3277847945a0c1cc1516fdcde59a1912/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2cb3951d3277847945a0c1cc1516fdcde59a1912", "patch": "@@ -10,6 +10,14 @@\n \t* Makefile.in: Delete.\n \t* config-lang.in: Delete outputs= line.\n \n+2000-10-25  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (patch_method_invocation): NULLify this_arg when already\n+\tinserted.\n+\t(maybe_use_access_method): Handle call to methods unrelated to the\n+\tcurrent class. Fixed comment.\n+\tFixes gcj/361.\n+\n 2000-10-24  Tom Tromey  <tromey@cygnus.com>\n \n \t* lex.c (java_new_lexer): Initialize new fields.  Work around"}, {"sha": "b705fc6f59460d24e36ca6fc02672d9347c9bddd", "filename": "gcc/java/parse.y", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb3951d3277847945a0c1cc1516fdcde59a1912/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb3951d3277847945a0c1cc1516fdcde59a1912/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=2cb3951d3277847945a0c1cc1516fdcde59a1912", "patch": "@@ -9930,7 +9930,10 @@ patch_method_invocation (patch, primary, where, is_static, ret_decl)\n \t     argument list. In the meantime, the selected function\n \t     might have be replaced by a generated stub. */\n \t  if (maybe_use_access_method (is_super_init, &list, &this_arg))\n-\t    args = tree_cons (NULL_TREE, this_arg, args);\n+\t    {\n+\t      args = tree_cons (NULL_TREE, this_arg, args);\n+\t      this_arg = NULL_TREE; /* So it doesn't get chained twice */\n+\t    }\n \t}\n     }\n \n@@ -10086,9 +10089,10 @@ maybe_use_access_method (is_super_init, mdecl, this_arg)\n   \n   /* If we're calling a method found in an enclosing class, generate\n      what it takes to retrieve the right this. Don't do that if we're\n-     invoking a static method. */\n+     invoking a static method. Note that if MD's type is unrelated to\n+     CURRENT_CLASS, then the current this can be used. */\n \n-  if (non_static_context)\n+  if (non_static_context && DECL_CONTEXT (md) != object_type_node)\n     {\n       ctx = TREE_TYPE (DECL_CONTEXT (TYPE_NAME (current_class)));\n       if (inherits_from_p (ctx, DECL_CONTEXT (md)))"}]}