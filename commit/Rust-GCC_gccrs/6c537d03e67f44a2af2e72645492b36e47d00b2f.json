{"sha": "6c537d03e67f44a2af2e72645492b36e47d00b2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM1MzdkMDNlNjdmNDRhMmFmMmU3MjY0NTQ5MmIzNmU0N2QwMGIyZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-03-18T19:03:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-03-18T19:03:59Z"}, "message": "builtins.c (expand_builtin_unop): New target_mode operand; use it to convert the result to the correct mode.\n\n        * builtins.c (expand_builtin_unop): New target_mode operand;\n        use it to convert the result to the correct mode.\n        (expand_builtin): Update all callers.\n\nFrom-SVN: r64545", "tree": {"sha": "bddc15f177ea81ff8c527d13c261dbab8bfe42bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bddc15f177ea81ff8c527d13c261dbab8bfe42bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c537d03e67f44a2af2e72645492b36e47d00b2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c537d03e67f44a2af2e72645492b36e47d00b2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c537d03e67f44a2af2e72645492b36e47d00b2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c537d03e67f44a2af2e72645492b36e47d00b2f/comments", "author": null, "committer": null, "parents": [{"sha": "75fbf7d9694901f476bfc057120423b57812aa55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fbf7d9694901f476bfc057120423b57812aa55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75fbf7d9694901f476bfc057120423b57812aa55"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "bd1f10ad5bedb7f206e4da4756fb7915e5ee830d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c537d03e67f44a2af2e72645492b36e47d00b2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c537d03e67f44a2af2e72645492b36e47d00b2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c537d03e67f44a2af2e72645492b36e47d00b2f", "patch": "@@ -1,3 +1,9 @@\n+2003-03-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (expand_builtin_unop): New target_mode operand;\n+\tuse it to convert the result to the correct mode.\n+\t(expand_builtin): Update all callers.\n+\n 2003-03-18  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.md (\"movti\", \"movhi\", \"movqi\"): Add \"type\" attribute."}, {"sha": "244249d8ecc73404200bff644d36a50c18adce94", "filename": "gcc/builtins.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c537d03e67f44a2af2e72645492b36e47d00b2f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c537d03e67f44a2af2e72645492b36e47d00b2f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6c537d03e67f44a2af2e72645492b36e47d00b2f", "patch": "@@ -149,7 +149,8 @@ static rtx expand_builtin_strchr\tPARAMS ((tree, rtx,\n static rtx expand_builtin_strrchr\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_alloca\tPARAMS ((tree, rtx));\n-static rtx expand_builtin_unop\t\tPARAMS ((tree, rtx, rtx, optab));\n+static rtx expand_builtin_unop\t\tPARAMS ((enum machine_mode,\n+\t\t\t\t\t\t tree, rtx, rtx, optab));\n static rtx expand_builtin_frame_address\tPARAMS ((tree));\n static rtx expand_builtin_fputs\t\tPARAMS ((tree, int, int));\n static tree stabilize_va_list\t\tPARAMS ((tree, int));\n@@ -3714,7 +3715,8 @@ expand_builtin_alloca (arglist, target)\n    SUBTARGET may be used as the target for computing one of EXP's operands.  */\n \n static rtx\n-expand_builtin_unop (arglist, target, subtarget, op_optab)\n+expand_builtin_unop (target_mode, arglist, target, subtarget, op_optab)\n+     enum machine_mode target_mode;\n      tree arglist;\n      rtx target, subtarget;\n      optab op_optab;\n@@ -3731,7 +3733,8 @@ expand_builtin_unop (arglist, target, subtarget, op_optab)\n \t\t\top_optab, op0, target, 1);\n   if (target == 0)\n     abort ();\n-  return target;\n+\n+  return convert_to_mode (target_mode, target, 0);\n }\n \n /* If the string passed to fputs is a constant and is one character\n@@ -4011,6 +4014,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   tree arglist = TREE_OPERAND (exp, 1);\n   enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n+  enum machine_mode target_mode = TYPE_MODE (TREE_TYPE (exp));\n \n   /* Perform postincrements before expanding builtin functions. \ufffd*/\n   emit_queue ();\n@@ -4254,40 +4258,44 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n     case BUILT_IN_FFS:\n     case BUILT_IN_FFSL:\n     case BUILT_IN_FFSLL:\n-      target = expand_builtin_unop (arglist, target, subtarget, ffs_optab);\n+      target = expand_builtin_unop (target_mode, arglist, target,\n+\t\t\t\t    subtarget, ffs_optab);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_CLZ:\n     case BUILT_IN_CLZL:\n     case BUILT_IN_CLZLL:\n-      target = expand_builtin_unop (arglist, target, subtarget, clz_optab);\n+      target = expand_builtin_unop (target_mode, arglist, target,\n+\t\t\t\t    subtarget, clz_optab);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_CTZ:\n     case BUILT_IN_CTZL:\n     case BUILT_IN_CTZLL:\n-      target = expand_builtin_unop (arglist, target, subtarget, ctz_optab);\n+      target = expand_builtin_unop (target_mode, arglist, target,\n+\t\t\t\t    subtarget, ctz_optab);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_POPCOUNT:\n     case BUILT_IN_POPCOUNTL:\n     case BUILT_IN_POPCOUNTLL:\n-      target = expand_builtin_unop (arglist, target, subtarget,\n-\t\t\t\t    popcount_optab);\n+      target = expand_builtin_unop (target_mode, arglist, target,\n+\t\t\t\t    subtarget, popcount_optab);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_PARITY:\n     case BUILT_IN_PARITYL:\n     case BUILT_IN_PARITYLL:\n-      target = expand_builtin_unop (arglist, target, subtarget, parity_optab);\n+      target = expand_builtin_unop (target_mode, arglist, target,\n+\t\t\t\t    subtarget, parity_optab);\n       if (target)\n \treturn target;\n       break;"}]}