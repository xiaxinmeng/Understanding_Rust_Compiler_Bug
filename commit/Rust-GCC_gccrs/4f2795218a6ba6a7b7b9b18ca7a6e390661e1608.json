{"sha": "4f2795218a6ba6a7b7b9b18ca7a6e390661e1608", "node_id": "C_kwDOANBUbNoAKDRmMjc5NTIxOGE2YmE2YTdiN2I5YjE4Y2E3YTZlMzkwNjYxZTE2MDg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-30T07:16:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-30T07:16:41Z"}, "message": "c++: Fox template-introduction tentative parsing in class bodies clear colon_corrects_to_scope_p [PR105061]\n\nThe concepts support (in particular template introductions from concepts TS)\nbroke the following testcase, valid unnamed bitfields with dependent\ntypes (or even just typedefs) were diagnosed as typos (: instead of correct\n::) in template introduction during their tentative parsing.\nThe following patch fixes that by not doing this : to :: correction when\nmember_p is true.\n\n2022-03-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105061\n\t* parser.cc (cp_parser_template_introduction): If member_p, temporarily\n\tclear parser->colon_corrects_to_scope_p around tentative parsing of\n\tnested name specifier.\n\n\t* g++.dg/concepts/pr105061.C: New test.", "tree": {"sha": "17d8eaeb7f5ed3b9a63d5bc09270e1d125fd847f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17d8eaeb7f5ed3b9a63d5bc09270e1d125fd847f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f2795218a6ba6a7b7b9b18ca7a6e390661e1608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2795218a6ba6a7b7b9b18ca7a6e390661e1608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f2795218a6ba6a7b7b9b18ca7a6e390661e1608", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2795218a6ba6a7b7b9b18ca7a6e390661e1608/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8e91994bad073b713f2b47bc6171f3a4e422562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e91994bad073b713f2b47bc6171f3a4e422562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e91994bad073b713f2b47bc6171f3a4e422562"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "7e1c777364e79d3b5fe606ffeb5b0537f1b9acbb", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2795218a6ba6a7b7b9b18ca7a6e390661e1608/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2795218a6ba6a7b7b9b18ca7a6e390661e1608/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=4f2795218a6ba6a7b7b9b18ca7a6e390661e1608", "patch": "@@ -31417,9 +31417,15 @@ cp_parser_template_introduction (cp_parser* parser, bool member_p)\n   tree saved_scope = parser->scope;\n   tree saved_object_scope = parser->object_scope;\n   tree saved_qualifying_scope = parser->qualifying_scope;\n+  bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;\n \n   cp_token *start_token = cp_lexer_peek_token (parser->lexer);\n \n+  /* In classes don't parse valid unnamed bitfields as invalid\n+     template introductions.  */\n+  if (member_p)\n+    parser->colon_corrects_to_scope_p = false;\n+\n   /* Look for the optional `::' operator.  */\n   cp_parser_global_scope_opt (parser,\n \t\t\t      /*current_scope_valid_p=*/false);\n@@ -31440,6 +31446,7 @@ cp_parser_template_introduction (cp_parser* parser, bool member_p)\n   parser->scope = saved_scope;\n   parser->object_scope = saved_object_scope;\n   parser->qualifying_scope = saved_qualifying_scope;\n+  parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;\n \n   if (concept_name == error_mark_node\n       || (seen_error () && !concept_definition_p (tmpl_decl)))"}, {"sha": "3f6f0e4d6e10161760fb338115b07712247cc843", "filename": "gcc/testsuite/g++.dg/concepts/pr105061.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2795218a6ba6a7b7b9b18ca7a6e390661e1608/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr105061.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2795218a6ba6a7b7b9b18ca7a6e390661e1608/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr105061.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr105061.C?ref=4f2795218a6ba6a7b7b9b18ca7a6e390661e1608", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/105061\n+\n+template <typename T, int U, int V>\n+struct A { T : V, u : U; };\n+template <int U, int V>\n+struct B { unsigned : V, u : U; };\n+typedef unsigned uns;\n+template <int U, int V>\n+struct C { uns : V, u : U; };\n+\n+A<unsigned int, 4, 5> a = { 13 };\n+B<5, 6> b = { 26 };\n+C<8, 9> c = { 42 };"}]}