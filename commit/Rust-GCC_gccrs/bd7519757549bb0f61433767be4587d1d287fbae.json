{"sha": "bd7519757549bb0f61433767be4587d1d287fbae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ3NTE5NzU3NTQ5YmIwZjYxNDMzNzY3YmU0NTg3ZDFkMjg3ZmJhZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-11-05T13:50:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-05T13:50:13Z"}, "message": "target.def (goacc.dim_limit): New hook.\n\n\t* target.def (goacc.dim_limit): New hook.\n\t* targhooks.h (default_goacc_dim_limit): Declare.\n\t* doc/tm.texi.in (TARGET_GOACC_DIM_LIMIT): Add.\n\t* doc/tm.texi: Rebuilt.\n\t* omp-low.h (get_oacc_fn_dim_size, get_oacc_ifn_dim_arg): Declare.\n\t* omp-low.c (get_oacc_fn_dim_size, get_oacc_ifn_dim_arg): New.\n\t(default_goacc_dim_limit): New.\n\t* config/nvptx/nvptx.c (PTX_VECTOR_LENGTH, PTX_WORKER_LENGTH): New.\n\t(nvptx_goacc_dim_limit) New.\n\t(TARGET_GOACC_DIM_LIMIT): Override.\n\t* tree-vrp.c: Include omp-low.h, target.h.\n\t(extract_range_basic): Add handling for IFN_GOACC_DIM_SIZE &\n\tIFN_GOACC_DIM_POS.\n\nFrom-SVN: r229809", "tree": {"sha": "7e0c36ef8da7959fa24be13c6ac216e007bdfb80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e0c36ef8da7959fa24be13c6ac216e007bdfb80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd7519757549bb0f61433767be4587d1d287fbae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7519757549bb0f61433767be4587d1d287fbae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7519757549bb0f61433767be4587d1d287fbae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7519757549bb0f61433767be4587d1d287fbae/comments", "author": null, "committer": null, "parents": [{"sha": "337d2167ccf01c028e993852f6d3a4681a021505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337d2167ccf01c028e993852f6d3a4681a021505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/337d2167ccf01c028e993852f6d3a4681a021505"}], "stats": {"total": 132, "additions": 129, "deletions": 3}, "files": [{"sha": "44e71f48d15b487375a04d55b4e214d50cf62ff7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd7519757549bb0f61433767be4587d1d287fbae", "patch": "@@ -1,3 +1,19 @@\n+2015-11-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* target.def (goacc.dim_limit): New hook.\n+\t* targhooks.h (default_goacc_dim_limit): Declare.\n+\t* doc/tm.texi.in (TARGET_GOACC_DIM_LIMIT): Add.\n+\t* doc/tm.texi: Rebuilt.\n+\t* omp-low.h (get_oacc_fn_dim_size, get_oacc_ifn_dim_arg): Declare.\n+\t* omp-low.c (get_oacc_fn_dim_size, get_oacc_ifn_dim_arg): New.\n+\t(default_goacc_dim_limit): New.\n+\t* config/nvptx/nvptx.c (PTX_VECTOR_LENGTH, PTX_WORKER_LENGTH): New.\n+\t(nvptx_goacc_dim_limit) New.\n+\t(TARGET_GOACC_DIM_LIMIT): Override.\n+\t* tree-vrp.c: Include omp-low.h, target.h.\n+\t(extract_range_basic): Add handling for IFN_GOACC_DIM_SIZE &\n+\tIFN_GOACC_DIM_POS.\n+\n 2015-11-05  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* tree-vect-generic.c (do_compare): Use -1 for true"}, {"sha": "0204ad3383e7122a63bdaaa9c17dde743d1743c2", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=bd7519757549bb0f61433767be4587d1d287fbae", "patch": "@@ -3499,6 +3499,25 @@ nvptx_goacc_validate_dims (tree ARG_UNUSED (decl), int *ARG_UNUSED (dims),\n   return changed;\n }\n \n+/* Return maximum dimension size, or zero for unbounded.  */\n+\n+static int\n+nvptx_dim_limit (int axis)\n+{\n+  switch (axis)\n+    {\n+    case GOMP_DIM_WORKER:\n+      return PTX_WORKER_LENGTH;\n+\n+    case GOMP_DIM_VECTOR:\n+      return PTX_VECTOR_LENGTH;\n+\n+    default:\n+      break;\n+    }\n+  return 0;\n+}\n+\n /* Determine whether fork & joins are needed.  */\n \n static bool\n@@ -4016,6 +4035,9 @@ nvptx_goacc_reduction (gcall *call)\n #undef TARGET_GOACC_VALIDATE_DIMS\n #define TARGET_GOACC_VALIDATE_DIMS nvptx_goacc_validate_dims\n \n+#undef TARGET_GOACC_DIM_LIMIT\n+#define TARGET_GOACC_DIM_LIMIT nvptx_dim_limit\n+\n #undef TARGET_GOACC_FORK_JOIN\n #define TARGET_GOACC_FORK_JOIN nvptx_goacc_fork_join\n "}, {"sha": "f394db7d0a64eec55ccd5b9fb9a60321ae467267", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=bd7519757549bb0f61433767be4587d1d287fbae", "patch": "@@ -5777,6 +5777,11 @@ true, if changes have been made.  You must override this hook to\n provide dimensions larger than 1.\n @end deftypefn\n \n+@deftypefn {Target Hook} int TARGET_GOACC_DIM_LIMIT (int @var{axis})\n+This hook should return the maximum size of a particular dimension,\n+or zero if unbounded.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_GOACC_FORK_JOIN (gcall *@var{call}, const int *@var{dims}, bool @var{is_fork})\n This hook can be used to convert IFN_GOACC_FORK and IFN_GOACC_JOIN\n function calls to target-specific gimple, or indicate whether they"}, {"sha": "d188c57b75c9dbb81caba45d93af5bc9866a7d48", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=bd7519757549bb0f61433767be4587d1d287fbae", "patch": "@@ -4262,6 +4262,8 @@ address;  but often a machine-dependent strategy can generate better code.\n \n @hook TARGET_GOACC_VALIDATE_DIMS\n \n+@hook TARGET_GOACC_DIM_LIMIT\n+\n @hook TARGET_GOACC_FORK_JOIN\n \n @hook TARGET_GOACC_REDUCTION"}, {"sha": "b72c3dd4249b9a9c5f7234cae3b73f854ee41bcc", "filename": "gcc/omp-low.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=bd7519757549bb0f61433767be4587d1d287fbae", "patch": "@@ -12096,6 +12096,41 @@ get_oacc_fn_attrib (tree fn)\n   return lookup_attribute (OACC_FN_ATTRIB, DECL_ATTRIBUTES (fn));\n }\n \n+/* Extract an oacc execution dimension from FN.  FN must be an\n+   offloaded function or routine that has already had its execution\n+   dimensions lowered to the target-specific values.  */\n+\n+int\n+get_oacc_fn_dim_size (tree fn, int axis)\n+{\n+  tree attrs = get_oacc_fn_attrib (fn);\n+  \n+  gcc_assert (axis < GOMP_DIM_MAX);\n+\n+  tree dims = TREE_VALUE (attrs);\n+  while (axis--)\n+    dims = TREE_CHAIN (dims);\n+\n+  int size = TREE_INT_CST_LOW (TREE_VALUE (dims));\n+\n+  return size;\n+}\n+\n+/* Extract the dimension axis from an IFN_GOACC_DIM_POS or\n+   IFN_GOACC_DIM_SIZE call.  */\n+\n+int\n+get_oacc_ifn_dim_arg (const gimple *stmt)\n+{\n+  gcc_checking_assert (gimple_call_internal_fn (stmt) == IFN_GOACC_DIM_SIZE\n+\t\t       || gimple_call_internal_fn (stmt) == IFN_GOACC_DIM_POS);\n+  tree arg = gimple_call_arg (stmt, 0);\n+  HOST_WIDE_INT axis = TREE_INT_CST_LOW (arg);\n+\n+  gcc_checking_assert (axis >= 0 && axis < GOMP_DIM_MAX);\n+  return (int) axis;\n+}\n+\n /* Expand the GIMPLE_OMP_TARGET starting at REGION.  */\n \n static void\n@@ -19015,6 +19050,18 @@ default_goacc_validate_dims (tree ARG_UNUSED (decl), int *dims,\n   return changed;\n }\n \n+/* Default dimension bound is unknown on accelerator and 1 on host. */\n+\n+int\n+default_goacc_dim_limit (int ARG_UNUSED (axis))\n+{\n+#ifdef ACCEL_COMPILER\n+  return 0;\n+#else\n+  return 1;\n+#endif\n+}\n+\n namespace {\n \n const pass_data pass_data_oacc_device_lower ="}, {"sha": "ee0f8ac1ad5f353ca8d576f4c73e62d249917688", "filename": "gcc/omp-low.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Fomp-low.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Fomp-low.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.h?ref=bd7519757549bb0f61433767be4587d1d287fbae", "patch": "@@ -31,6 +31,8 @@ extern bool make_gimple_omp_edges (basic_block, struct omp_region **, int *);\n extern void omp_finish_file (void);\n extern tree omp_member_access_dummy_var (tree);\n extern tree get_oacc_fn_attrib (tree);\n+extern int get_oacc_ifn_dim_arg (const gimple *);\n+extern int get_oacc_fn_dim_size (tree, int);\n \n extern GTY(()) vec<tree, va_gc> *offload_funcs;\n extern GTY(()) vec<tree, va_gc> *offload_vars;"}, {"sha": "c7ec292971448e16f91866548fbba7f2767588d4", "filename": "gcc/target.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=bd7519757549bb0f61433767be4587d1d287fbae", "patch": "@@ -1658,6 +1658,13 @@ provide dimensions larger than 1.\",\n bool, (tree decl, int *dims, int fn_level),\n default_goacc_validate_dims)\n \n+DEFHOOK\n+(dim_limit,\n+\"This hook should return the maximum size of a particular dimension,\\n\\\n+or zero if unbounded.\",\n+int, (int axis),\n+default_goacc_dim_limit)\n+\n DEFHOOK\n (fork_join,\n \"This hook can be used to convert IFN_GOACC_FORK and IFN_GOACC_JOIN\\n\\"}, {"sha": "a8e7ebbd8ca624d5aba15b76725516d625d6f644", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=bd7519757549bb0f61433767be4587d1d287fbae", "patch": "@@ -110,6 +110,7 @@ extern void default_destroy_cost_data (void *);\n \n /* OpenACC hooks.  */\n extern bool default_goacc_validate_dims (tree, int [], int);\n+extern int default_goacc_dim_limit (int);\n extern bool default_goacc_fork_join (gcall *, const int [], bool);\n extern void default_goacc_reduction (gcall *);\n "}, {"sha": "c0b6cfc14444b1329036658309f902042bc85f43", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7519757549bb0f61433767be4587d1d287fbae/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=bd7519757549bb0f61433767be4587d1d287fbae", "patch": "@@ -55,8 +55,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-threadupdate.h\"\n #include \"tree-ssa-scopedtables.h\"\n #include \"tree-ssa-threadedge.h\"\n-\n-\n+#include \"omp-low.h\"\n+#include \"target.h\"\n \n /* Range of values that can be associated with an SSA_NAME after VRP\n    has executed.  */\n@@ -3973,7 +3973,9 @@ extract_range_basic (value_range *vr, gimple *stmt)\n   else if (is_gimple_call (stmt) && gimple_call_internal_p (stmt))\n     {\n       enum tree_code subcode = ERROR_MARK;\n-      switch (gimple_call_internal_fn (stmt))\n+      unsigned ifn_code = gimple_call_internal_fn (stmt);\n+\n+      switch (ifn_code)\n \t{\n \tcase IFN_UBSAN_CHECK_ADD:\n \t  subcode = PLUS_EXPR;\n@@ -3984,6 +3986,28 @@ extract_range_basic (value_range *vr, gimple *stmt)\n \tcase IFN_UBSAN_CHECK_MUL:\n \t  subcode = MULT_EXPR;\n \t  break;\n+\tcase IFN_GOACC_DIM_SIZE:\n+\tcase IFN_GOACC_DIM_POS:\n+\t  /* Optimizing these two internal functions helps the loop\n+\t     optimizer eliminate outer comparisons.  Size is [1,N]\n+\t     and pos is [0,N-1].  */\n+\t  {\n+\t    bool is_pos = ifn_code == IFN_GOACC_DIM_POS;\n+\t    int axis = get_oacc_ifn_dim_arg (stmt);\n+\t    int size = get_oacc_fn_dim_size (current_function_decl, axis);\n+\n+\t    if (!size)\n+\t      /* If it's dynamic, the backend might know a hardware\n+\t\t limitation.  */\n+\t      size = targetm.goacc.dim_limit (axis);\n+\n+\t    tree type = TREE_TYPE (gimple_call_lhs (stmt));\n+\t    set_value_range (vr, VR_RANGE,\n+\t\t\t     build_int_cst (type, is_pos ? 0 : 1),\n+\t\t\t     size ? build_int_cst (type, size - is_pos)\n+\t\t\t          : vrp_val_max (type), NULL);\n+\t  }\n+\t  return;\n \tdefault:\n \t  break;\n \t}"}]}