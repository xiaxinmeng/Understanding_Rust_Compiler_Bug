{"sha": "d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0Nzg2ZTNmZTM1YzMxNmZhNDZkYTEzZDgwYTMwY2YzYmYyNWVlNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-01-17T07:44:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-01-17T07:44:57Z"}, "message": "ios_base.h (ios_base::failure): Tighten up throw specs.\n\n\n2001-01-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/1605\n\t* include/bits/ios_base.h (ios_base::failure): Tighten up throw specs.\n\t* src/ios.cc (ios_base::failure): Make definitions match.\n        * libsupc++/typeinfo (class bad_typeid): Add throw specs.\n        (class bad_cast): Same.\n        * libsupc++/exception (class exception): Add throw specs.\n        * libsupc++/exception_support.cc (set_terminate): Add throw specs.\n        (set_unexpected): Same.\n        (uncaught_exception): Same.\n        (what): Same.\n\n\t* docs/html/17_intro/C++STYLE (classname): Fix.\n\nFrom-SVN: r39087", "tree": {"sha": "0cde8b75b22945d8c655cf156c6078e3c0c94a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cde8b75b22945d8c655cf156c6078e3c0c94a40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/comments", "author": null, "committer": null, "parents": [{"sha": "5fdfba85be35635b2e37c62108dfa90acc36f74c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fdfba85be35635b2e37c62108dfa90acc36f74c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fdfba85be35635b2e37c62108dfa90acc36f74c"}], "stats": {"total": 230, "additions": 128, "deletions": 102}, "files": [{"sha": "5e31c3374ddf0365e291e4c4efbd6062d8602e71", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "patch": "@@ -1,3 +1,18 @@\n+2001-01-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tlibstdc++/1605\n+\t* include/bits/ios_base.h (ios_base::failure): Tighten up throw specs.\n+\t* src/ios.cc (ios_base::failure): Make definitions match.\n+        * libsupc++/typeinfo (class bad_typeid): Add throw specs.\n+        (class bad_cast): Same.\n+        * libsupc++/exception (class exception): Add throw specs.\n+        * libsupc++/exception_support.cc (set_terminate): Add throw specs.\n+        (set_unexpected): Same.\n+        (uncaught_exception): Same.\n+        (what): Same.\n+\n+\t* docs/html/17_intro/C++STYLE (classname): Fix.\n+\t\n 2001-01-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* src/gen-num-limits.cc (INSTANTIATIONS): New macro."}, {"sha": "3d4ab171c3ee997319e1b0bdb7944091ee6b50b3", "filename": "libstdc++-v3/docs/html/17_intro/C++STYLE", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE?ref=d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "patch": "@@ -99,8 +99,8 @@ Notable areas of divergence from what may be previous local practice\n 07. Member initialization lists\n    All one line, separate from class name.\n \n-  gribble::gribble() :\n-  _M_private_data(0), _M_more_stuff(0), _M_helper(0);\n+  gribble::gribble() \n+  : _M_private_data(0), _M_more_stuff(0), _M_helper(0);\n   { }\n   -NOT-\n   gribble::gribble() : _M_private_data(0), _M_more_stuff(0), _M_helper(0);"}, {"sha": "2e31863680bb9a7b19d5c5492f648d8b7896578b", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "patch": "@@ -146,10 +146,10 @@ namespace std {\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n       // Can't do exception(_msg) as defined in 27.4.2.1.1\n       explicit \n-      failure(const string& __str);\n+      failure(const string& __str) throw();\n \n       virtual \n-      ~failure();\n+      ~failure() throw();\n \n       virtual const char*\n       what() const throw();"}, {"sha": "e48d2160a6067fcbea1b20b7f39d2786cac97bfe", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "patch": "@@ -1,5 +1,6 @@\n // Exception Handling support header for -*- C++ -*-\n-// Copyright (C) 1995, 1996, 1997, 1998, 2000 Free Software Foundation\n+\n+// Copyright (C) 1995, 1996, 1997, 1998, 2000, 2001 Free Software Foundation\n \n // This file is part of GNU CC.\n //\n@@ -34,30 +35,33 @@\n \n extern \"C++\" {\n \n-namespace std {\n+namespace std \n+{\n+  class exception \n+  {\n+  public:\n+    exception() throw() { }\n+    virtual ~exception() throw() { }\n+    virtual const char* what() const throw();\n+  };\n \n-class exception {\n-public:\n-  exception () { }\n-  virtual ~exception () { }\n-  virtual const char* what () const;\n-};\n+  class bad_exception : public exception \n+  {\n+  public:\n+    bad_exception() throw() { }\n+    virtual ~bad_exception() throw() { }\n+  };\n \n-class bad_exception : public exception {\n-public:\n-  bad_exception () { }\n-  virtual ~bad_exception () { }\n-};\n+  typedef void (*terminate_handler) ();\n+  typedef void (*unexpected_handler) ();\n \n-typedef void (*terminate_handler) ();\n-typedef void (*unexpected_handler) ();\n+  terminate_handler set_terminate(terminate_handler) throw();\n+  void terminate() __attribute__ ((__noreturn__));\n \n-terminate_handler set_terminate (terminate_handler);\n-void terminate () __attribute__ ((__noreturn__));\n-unexpected_handler set_unexpected (unexpected_handler);\n-void unexpected () __attribute__ ((__noreturn__));\n-bool uncaught_exception ();\n+  unexpected_handler set_unexpected(unexpected_handler) throw();\n+  void unexpected() __attribute__ ((__noreturn__));\n \n+  bool uncaught_exception() throw();\n } // namespace std\n \n } // extern \"C++\""}, {"sha": "f6ec508687664fd0087332d4782000bdb8fe85a2", "filename": "libstdc++-v3/libsupc++/exception_support.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc?ref=d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "patch": "@@ -1,5 +1,7 @@\n // Functions for Exception Support for -*- C++ -*-\n-// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation\n+\n+// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+// 2001 Free Software Foundation\n \n // This file is part of GNU CC.\n \n@@ -56,7 +58,7 @@ static std::unexpected_handler __unexpected_func __attribute__((__noreturn__))\n   = __default_unexpected;\n \n std::terminate_handler\n-std::set_terminate (std::terminate_handler func)\n+std::set_terminate (std::terminate_handler func) throw()\n {\n   std::terminate_handler old = __terminate_func;\n \n@@ -65,7 +67,7 @@ std::set_terminate (std::terminate_handler func)\n }\n \n std::unexpected_handler\n-std::set_unexpected (std::unexpected_handler func)\n+std::set_unexpected (std::unexpected_handler func) throw()\n {\n   std::unexpected_handler old = __unexpected_func;\n \n@@ -374,14 +376,15 @@ THROW_BAD_TYPEID ()\n /* Has the current exception been caught?  */\n \n bool\n-std::uncaught_exception ()\n+std::uncaught_exception () throw()\n {\n   cp_eh_info *p = CP_EH_INFO;\n   return p && ! p->caught;\n }\n \n-const char * std::exception::\n-what () const\n+const char * \n+std::exception::\n+what () const throw()\n {\n   return typeid (*this).name ();\n }"}, {"sha": "092963c524fc46aa4125c65e1bb60d871b40b879", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 74, "deletions": 70, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "patch": "@@ -48,86 +48,90 @@ namespace __cxxabiv1\n } // namespace __cxxabiv1\n #endif\n \n-namespace std {\n-\n-class type_info {\n-public:\n-  // Destructor. Being the first non-inline virtual function, this controls in\n-  // which translation unit the vtable is emitted. The compiler makes use of\n-  // that information to know where to emit the runtime-mandated type_info\n-  // structures in the new-abi.\n-  virtual ~type_info ();\n-\n-private:\n-  // Assigning type_info is not supported.  made private.\n-  type_info& operator= (const type_info&);\n-  type_info (const type_info&);\n-\n-protected:\n-  const char *__name;\n-\n-protected:\n-  explicit type_info (const char *__n): __name (__n) { }\n-\n-public:\n-  // the public interface\n+namespace std \n+{\n+  class type_info \n+  {\n+  public:\n+    // Destructor. Being the first non-inline virtual function, this\n+    // controls in which translation unit the vtable is emitted. The\n+    // compiler makes use of that information to know where to emit\n+    // the runtime-mandated type_info structures in the new-abi.\n+    virtual ~type_info();\n+\n+  private:\n+    // Assigning type_info is not supported.  made private.\n+    type_info& operator=(const type_info&);\n+    type_info(const type_info&);\n+    \n+  protected:\n+    const char *__name;\n+    \n+  protected:\n+    explicit type_info(const char *__n): __name(__n) { }\n+    \n+  public:\n+    // the public interface\n #if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n-  // In old abi, there can be multiple instances of a type_info object for one\n-  // type. Uniqueness must use the _name value, not object address.\n-  bool before (const type_info& arg) const;\n-  const char* name () const\n+    // In old abi, there can be multiple instances of a type_info\n+    // object for one type. Uniqueness must use the _name value, not\n+    // object address.\n+    bool before(const type_info& arg) const;\n+    const char* name() const\n     { return __name; }\n-  bool operator== (const type_info& __arg) const;\n-  bool operator!= (const type_info& __arg) const\n-    { return !operator== (__arg); }\n+    bool operator==(const type_info& __arg) const;\n+    bool operator!=(const type_info& __arg) const\n+    { return !operator==(__arg); }\n \n #else\n-  // In new abi we can rely on type_info's NTBS being unique,\n-  // and therefore address comparisons are sufficient.\n-  bool before (const type_info& __arg) const\n+    // In new abi we can rely on type_info's NTBS being unique,\n+    // and therefore address comparisons are sufficient.\n+    bool before(const type_info& __arg) const\n     { return __name < __arg.__name; }\n-  const char* name () const\n+    const char* name() const\n     { return __name; }\n-  bool operator== (const type_info& __arg) const\n+    bool operator==(const type_info& __arg) const\n     { return __name == __arg.__name; }\n-  bool operator!= (const type_info& __arg) const\n-    { return !operator== (__arg); }\n+    bool operator!=(const type_info& __arg) const\n+    { return !operator==(__arg); }\n #endif\n-\n-  // the internal interface\n+    \n+    // the internal interface\n #if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n-public:\n-  // return true if this is a pointer type of some kind\n-  virtual bool __is_pointer_p () const;\n-  // return true if this is a function type\n-  virtual bool __is_function_p () const;\n-\n-  // Try and catch a thrown type. Store an adjusted pointer to the caught type\n-  // in THR_OBJ. If THR_TYPE is not a pointer type, then THR_OBJ points to the\n-  // thrown object. If THR_TYPE is a pointer type, then THR_OBJ is the pointer\n-  // itself. OUTER indicates the number of outer pointers, and whether they\n-  // were const qualified.\n-  virtual bool __do_catch (const type_info *__thr_type, void **__thr_obj,\n-                         unsigned __outer) const;\n-\n-  // internally used during catch matching\n-  virtual bool __do_upcast (const __cxxabiv1::__class_type_info *__target,\n-\t\t\t    void **__obj_ptr) const;\n+  public:\n+    // return true if this is a pointer type of some kind\n+    virtual bool __is_pointer_p() const;\n+    // return true if this is a function type\n+    virtual bool __is_function_p() const;\n+\n+    // Try and catch a thrown type. Store an adjusted pointer to the\n+    // caught type in THR_OBJ. If THR_TYPE is not a pointer type, then\n+    // THR_OBJ points to the thrown object. If THR_TYPE is a pointer\n+    // type, then THR_OBJ is the pointer itself. OUTER indicates the\n+    // number of outer pointers, and whether they were const\n+    // qualified.\n+    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,\n+\t\t\t    unsigned __outer) const;\n+\n+    // internally used during catch matching\n+    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,\n+\t\t\t     void **__obj_ptr) const;\n #endif\n-};\n-\n-class bad_cast : public exception {\n-public:\n-  bad_cast() { }\n-  virtual ~bad_cast() { }\n-};\n-\n-class bad_typeid : public exception {\n- public:\n-  bad_typeid () { }\n-  virtual ~bad_typeid () { }\n-};\n-\n+  };\n+\n+  class bad_cast : public exception \n+  {\n+  public:\n+    bad_cast() throw() { }\n+    virtual ~bad_cast() throw() { }\n+  };\n+  \n+  class bad_typeid : public exception \n+  {\n+  public:\n+    bad_typeid () throw() { }\n+    virtual ~bad_typeid () throw() { }\n+  };\n } // namespace std\n \n } // extern \"C++\""}, {"sha": "d61c2635351c5c90c22923182e2f3b3e5d072249", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34786e3fe35c316fa46da13d80a30cf3bf25ee5/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "patch": "@@ -120,13 +120,13 @@ namespace std\n   wostream wclog(NULL);\n #endif\n \n-  ios_base::failure::failure(const string& __str)\n+  ios_base::failure::failure(const string& __str) throw()\n   {\n     strncpy(_M_name, __str.c_str(), _M_bufsize);\n     _M_name[_M_bufsize - 1] = '\\0';\n   }\n \n-  ios_base::failure::~failure()\n+  ios_base::failure::~failure() throw()\n   { }\n \n   const char*"}]}