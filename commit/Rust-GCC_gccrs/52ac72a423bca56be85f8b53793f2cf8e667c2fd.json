{"sha": "52ac72a423bca56be85f8b53793f2cf8e667c2fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJhYzcyYTQyM2JjYTU2YmU4NWY4YjUzNzkzZjJjZjhlNjY3YzJmZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-15T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-15T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "948dbed74a31df6574e2beeeb409efffad7b4f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/948dbed74a31df6574e2beeeb409efffad7b4f81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52ac72a423bca56be85f8b53793f2cf8e667c2fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ac72a423bca56be85f8b53793f2cf8e667c2fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ac72a423bca56be85f8b53793f2cf8e667c2fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ac72a423bca56be85f8b53793f2cf8e667c2fd/comments", "author": null, "committer": null, "parents": [{"sha": "b305ec979d9dfc8153859a62a8ab9dd43c3bfc73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b305ec979d9dfc8153859a62a8ab9dd43c3bfc73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b305ec979d9dfc8153859a62a8ab9dd43c3bfc73"}], "stats": {"total": 532, "additions": 531, "deletions": 1}, "files": [{"sha": "fe606e52d3f0adb72fba0c0b7cb2903d321618e0", "filename": "c++tools/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ac72a423bca56be85f8b53793f2cf8e667c2fd/c%2B%2Btools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ac72a423bca56be85f8b53793f2cf8e667c2fd/c%2B%2Btools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/c%2B%2Btools%2FChangeLog?ref=52ac72a423bca56be85f8b53793f2cf8e667c2fd", "patch": "@@ -1,3 +1,9 @@\n+2021-09-14  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* resolver.cc (module_resolver::ModuleCompiledRequest):\n+\tAdd a simple handler.\n+\t* resolver.h: Declare handler for ModuleCompiledRequest.\n+\n 2021-07-21  Iain Sandoe  <iain@sandoe.co.uk>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "272ac78083cc066d10b479a4025b6dfd9bfdb3c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52ac72a423bca56be85f8b53793f2cf8e667c2fd", "patch": "@@ -1,3 +1,243 @@\n+2021-09-14  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* config/rs6000/mma.md (unspec): Delete UNSPEC_MMA_XXSETACCZ.\n+\t(unspecv): Add UNSPECV_MMA_XXSETACCZ.\n+\t(*mma_xxsetaccz): Delete.\n+\t(mma_xxsetaccz): Change to define_insn.  Remove operand 1.\n+\tUse UNSPECV_MMA_XXSETACCZ.  Update comment.\n+\t* config/rs6000/rs6000.c (rs6000_rtx_costs): Use UNSPECV_MMA_XXSETACCZ.\n+\n+2021-09-14  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* Makefile.in: Remove variables related to applying no-PIE\n+\tto the exes on $build.\n+\t* configure: Regenerate.\n+\t* configure.ac: Remove configuration related to applying\n+\tno-PIE to the exes on $build.\n+\n+2021-09-14  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.md (doloop_end): Add missing mode.\n+\t(loop_end): Likewise.\n+\n+2021-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.c (goa_stabilize_expr): Add depth argument, propagate\n+\tit to recursive calls, for depth above 7 just gimplify or return.\n+\tPerform a test even for MODIFY_EXPR, ADDR_EXPR, COMPOUND_EXPR with\n+\t__builtin_clear_padding and TARGET_EXPR.\n+\t(gimplify_omp_atomic): Adjust goa_stabilize_expr callers.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm_fpclass_sh_mask):\n+\tNew intrinsic.\n+\t(_mm_mask_fpclass_sh_mask): Likewise.\n+\t(_mm512_mask_fpclass_ph_mask): Likewise.\n+\t(_mm512_fpclass_ph_mask): Likewise.\n+\t(_mm_getexp_sh): Likewise.\n+\t(_mm_mask_getexp_sh): Likewise.\n+\t(_mm_maskz_getexp_sh): Likewise.\n+\t(_mm512_getexp_ph): Likewise.\n+\t(_mm512_mask_getexp_ph): Likewise.\n+\t(_mm512_maskz_getexp_ph): Likewise.\n+\t(_mm_getexp_round_sh): Likewise.\n+\t(_mm_mask_getexp_round_sh): Likewise.\n+\t(_mm_maskz_getexp_round_sh): Likewise.\n+\t(_mm512_getexp_round_ph): Likewise.\n+\t(_mm512_mask_getexp_round_ph): Likewise.\n+\t(_mm512_maskz_getexp_round_ph): Likewise.\n+\t(_mm_getmant_sh): Likewise.\n+\t(_mm_mask_getmant_sh): Likewise.\n+\t(_mm_maskz_getmant_sh): Likewise.\n+\t(_mm512_getmant_ph): Likewise.\n+\t(_mm512_mask_getmant_ph): Likewise.\n+\t(_mm512_maskz_getmant_ph): Likewise.\n+\t(_mm_getmant_round_sh): Likewise.\n+\t(_mm_mask_getmant_round_sh): Likewise.\n+\t(_mm_maskz_getmant_round_sh): Likewise.\n+\t(_mm512_getmant_round_ph): Likewise.\n+\t(_mm512_mask_getmant_round_ph): Likewise.\n+\t(_mm512_maskz_getmant_round_ph): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_mask_fpclass_ph_mask):\n+\tNew intrinsic.\n+\t(_mm_fpclass_ph_mask): Likewise.\n+\t(_mm256_mask_fpclass_ph_mask): Likewise.\n+\t(_mm256_fpclass_ph_mask): Likewise.\n+\t(_mm256_getexp_ph): Likewise.\n+\t(_mm256_mask_getexp_ph): Likewise.\n+\t(_mm256_maskz_getexp_ph): Likewise.\n+\t(_mm_getexp_ph): Likewise.\n+\t(_mm_mask_getexp_ph): Likewise.\n+\t(_mm_maskz_getexp_ph): Likewise.\n+\t(_mm256_getmant_ph): Likewise.\n+\t(_mm256_mask_getmant_ph): Likewise.\n+\t(_mm256_maskz_getmant_ph): Likewise.\n+\t(_mm_getmant_ph): Likewise.\n+\t(_mm_mask_getmant_ph): Likewise.\n+\t(_mm_maskz_getmant_ph): Likewise.\n+\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_args_builtin): Handle new builtin types.\n+\t(ix86_expand_round_builtin): Ditto.\n+\t* config/i386/sse.md (vecmemsuffix): Add HF vector modes.\n+\t(<avx512>_getexp<mode><mask_name><round_saeonly_name>): Adjust\n+\tto support HF vector modes.\n+\t(avx512f_sgetexp<mode><mask_scalar_name><round_saeonly_scalar_name):\n+\tDitto.\n+\t(avx512dq_fpclass<mode><mask_scalar_merge_name>): Ditto.\n+\t(avx512dq_vmfpclass<mode><mask_scalar_merge_name>): Ditto.\n+\t(<avx512>_getmant<mode><mask_name><round_saeonly_name>): Ditto.\n+\t(avx512f_vgetmant<mode><mask_scalar_name><round_saeonly_scalar_name>):\n+\tDitto.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm512_reduce_ph):\n+\tNew intrinsic.\n+\t(_mm512_mask_reduce_ph): Likewise.\n+\t(_mm512_maskz_reduce_ph): Likewise.\n+\t(_mm512_reduce_round_ph): Likewise.\n+\t(_mm512_mask_reduce_round_ph): Likewise.\n+\t(_mm512_maskz_reduce_round_ph): Likewise.\n+\t(_mm_reduce_sh): Likewise.\n+\t(_mm_mask_reduce_sh): Likewise.\n+\t(_mm_maskz_reduce_sh): Likewise.\n+\t(_mm_reduce_round_sh): Likewise.\n+\t(_mm_mask_reduce_round_sh): Likewise.\n+\t(_mm_maskz_reduce_round_sh): Likewise.\n+\t(_mm512_roundscale_ph): Likewise.\n+\t(_mm512_mask_roundscale_ph): Likewise.\n+\t(_mm512_maskz_roundscale_ph): Likewise.\n+\t(_mm512_roundscale_round_ph): Likewise.\n+\t(_mm512_mask_roundscale_round_ph): Likewise.\n+\t(_mm512_maskz_roundscale_round_ph): Likewise.\n+\t(_mm_roundscale_sh): Likewise.\n+\t(_mm_mask_roundscale_sh): Likewise.\n+\t(_mm_maskz_roundscale_sh): Likewise.\n+\t(_mm_roundscale_round_sh): Likewise.\n+\t(_mm_mask_roundscale_round_sh): Likewise.\n+\t(_mm_maskz_roundscale_round_sh): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h: (_mm_reduce_ph):\n+\tNew intrinsic.\n+\t(_mm_mask_reduce_ph): Likewise.\n+\t(_mm_maskz_reduce_ph): Likewise.\n+\t(_mm256_reduce_ph): Likewise.\n+\t(_mm256_mask_reduce_ph): Likewise.\n+\t(_mm256_maskz_reduce_ph): Likewise.\n+\t(_mm_roundscale_ph): Likewise.\n+\t(_mm_mask_roundscale_ph): Likewise.\n+\t(_mm_maskz_roundscale_ph): Likewise.\n+\t(_mm256_roundscale_ph): Likewise.\n+\t(_mm256_mask_roundscale_ph): Likewise.\n+\t(_mm256_maskz_roundscale_ph): Likewise.\n+\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_args_builtin): Handle new builtin types.\n+\t(ix86_expand_round_builtin): Ditto.\n+\t* config/i386/sse.md (<mask_codefor>reducep<mode><mask_name>):\n+\tRenamed to ...\n+\t(<mask_codefor>reducep<mode><mask_name><round_saeonly_name>):\n+\t... this, and adjust for round operands.\n+\t(reduces<mode><mask_scalar_name>): Likewise, with ...\n+\t(reduces<mode><mask_scalar_name><round_saeonly_scalar_name):\n+\t... this.\n+\t(<avx512>_rndscale<mode><mask_name><round_saeonly_name>):\n+\tAdjust for HF vector modes.\n+\t(avx512f_rndscale<mode><mask_scalar_name><round_saeonly_scalar_name>):\n+\tDitto.\n+\t(*avx512f_rndscale<mode><round_saeonly_name>): Ditto.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h: (_mm512_rcp_ph):\n+\tNew intrinsic.\n+\t(_mm512_mask_rcp_ph): Likewise.\n+\t(_mm512_maskz_rcp_ph): Likewise.\n+\t(_mm_rcp_sh): Likewise.\n+\t(_mm_mask_rcp_sh): Likewise.\n+\t(_mm_maskz_rcp_sh): Likewise.\n+\t(_mm512_scalef_ph): Likewise.\n+\t(_mm512_mask_scalef_ph): Likewise.\n+\t(_mm512_maskz_scalef_ph): Likewise.\n+\t(_mm512_scalef_round_ph): Likewise.\n+\t(_mm512_mask_scalef_round_ph): Likewise.\n+\t(_mm512_maskz_scalef_round_ph): Likewise.\n+\t(_mm_scalef_sh): Likewise.\n+\t(_mm_mask_scalef_sh): Likewise.\n+\t(_mm_maskz_scalef_sh): Likewise.\n+\t(_mm_scalef_round_sh): Likewise.\n+\t(_mm_mask_scalef_round_sh): Likewise.\n+\t(_mm_maskz_scalef_round_sh): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_rcp_ph):\n+\tNew intrinsic.\n+\t(_mm256_rcp_ph): Likewise.\n+\t(_mm_mask_rcp_ph): Likewise.\n+\t(_mm256_mask_rcp_ph): Likewise.\n+\t(_mm_maskz_rcp_ph): Likewise.\n+\t(_mm256_maskz_rcp_ph): Likewise.\n+\t(_mm_scalef_ph): Likewise.\n+\t(_mm256_scalef_ph): Likewise.\n+\t(_mm_mask_scalef_ph): Likewise.\n+\t(_mm256_mask_scalef_ph): Likewise.\n+\t(_mm_maskz_scalef_ph): Likewise.\n+\t(_mm256_maskz_scalef_ph): Likewise.\n+\t* config/i386/i386-builtin.def: Add new builtins.\n+\t* config/i386/sse.md (VFH_AVX512VL): New.\n+\t(avx512fp16_rcp<mode>2<mask_name>): Ditto.\n+\t(avx512fp16_vmrcpv8hf2<mask_scalar_name>): Ditto.\n+\t(avx512f_vmscalef<mode><mask_scalar_name><round_scalar_name>):\n+\tAdjust to support HF vector modes.\n+\t(<avx512>_scalef<mode><mask_name><round_name>): Ditto.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h: (_mm512_sqrt_ph):\n+\tNew intrinsic.\n+\t(_mm512_mask_sqrt_ph): Likewise.\n+\t(_mm512_maskz_sqrt_ph): Likewise.\n+\t(_mm512_sqrt_round_ph): Likewise.\n+\t(_mm512_mask_sqrt_round_ph): Likewise.\n+\t(_mm512_maskz_sqrt_round_ph): Likewise.\n+\t(_mm512_rsqrt_ph): Likewise.\n+\t(_mm512_mask_rsqrt_ph): Likewise.\n+\t(_mm512_maskz_rsqrt_ph): Likewise.\n+\t(_mm_rsqrt_sh): Likewise.\n+\t(_mm_mask_rsqrt_sh): Likewise.\n+\t(_mm_maskz_rsqrt_sh): Likewise.\n+\t(_mm_sqrt_sh): Likewise.\n+\t(_mm_mask_sqrt_sh): Likewise.\n+\t(_mm_maskz_sqrt_sh): Likewise.\n+\t(_mm_sqrt_round_sh): Likewise.\n+\t(_mm_mask_sqrt_round_sh): Likewise.\n+\t(_mm_maskz_sqrt_round_sh): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_sqrt_ph): New intrinsic.\n+\t(_mm256_sqrt_ph): Likewise.\n+\t(_mm_mask_sqrt_ph): Likewise.\n+\t(_mm256_mask_sqrt_ph): Likewise.\n+\t(_mm_maskz_sqrt_ph): Likewise.\n+\t(_mm256_maskz_sqrt_ph): Likewise.\n+\t(_mm_rsqrt_ph): Likewise.\n+\t(_mm256_rsqrt_ph): Likewise.\n+\t(_mm_mask_rsqrt_ph): Likewise.\n+\t(_mm256_mask_rsqrt_ph): Likewise.\n+\t(_mm_maskz_rsqrt_ph): Likewise.\n+\t(_mm256_maskz_rsqrt_ph): Likewise.\n+\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_args_builtin): Handle new builtins.\n+\t(ix86_expand_round_builtin): Ditto.\n+\t* config/i386/sse.md (VF_AVX512FP16VL): New.\n+\t(sqrt<mode>2): Adjust for HF vector modes.\n+\t(<sse>_sqrt<mode>2<mask_name><round_name>): Likewise.\n+\t(<sse>_vmsqrt<mode>2<mask_scalar_name><round_scalar_name>):\n+\tLikewise.\n+\t(<sse>_rsqrt<mode>2<mask_name>): New.\n+\t(avx512fp16_vmrsqrtv8hf2<mask_scalar_name>): Likewise.\n+\n 2021-09-13  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR bootstrap/101574"}, {"sha": "5de3919d17461c405f7a9297a32191e90a333553", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=52ac72a423bca56be85f8b53793f2cf8e667c2fd", "patch": "@@ -1 +1 @@\n-20210914\n+20210915"}, {"sha": "6cfb3b977e651e9bf213202a25732dd6f1733dcc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=52ac72a423bca56be85f8b53793f2cf8e667c2fd", "patch": "@@ -1,3 +1,71 @@\n+2021-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/101970\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Attribute_Enum_Rep>:\n+\tUse an unchecked conversion instead of a regular conversion in the\n+\tenumeration case and remove Conversion_OK flag in the integer case.\n+\t<Attribute_Pos>: Remove superfluous test.\n+\n+2021-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (validate_size): Do not issue an error if the\n+\told size has overflowed.\n+\n+2021-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): For vector types, make\n+\tthe representative array the debug type.\n+\n+2021-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_subprog_type): Turn variable\n+\tinto constant.  Capitalize GCC in warning message.\n+\t(intrin_arglists_compatible_p): Change parameter to pointer-to-const\n+\tAdjust warning messages.  Turn warning into error for vector types.\n+\t(intrin_return_compatible_p): Likewise.\n+\t(intrin_profiles_compatible_p): Change parameter to pointer-to-const\n+\n+2021-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-atopri.ads (bool): Delete.\n+\t(Atomic_Test_And_Set): Replace bool with Boolean.\n+\t(Atomic_Always_Lock_Free): Likewise.\n+\t* libgnat/s-aoinar.adb (Is_Lock_Free): Adjust.\n+\t* libgnat/s-aomoar.adb (Is_Lock_Free): Likewise.\n+\t* libgnat/s-aotase.adb (Atomic_Test_And_Set): Likewise.\n+\t* libgnat/s-atopex.adb (Atomic_Compare_And_Exchange): Likewise.\n+\t* gcc-interface/decl.c: Include gimple-expr.h.\n+\t(intrin_types_incompatible_p): Delete.\n+\t(intrin_arglists_compatible_p): Call types_compatible_p.\n+\t(intrin_return_compatible_p): Likewise.\n+\n+2021-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (update_pointer_to): Set TYPE_CANONICAL on\n+\tpointer and reference types.\n+\n+2021-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/101385\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n+\t(-Wall): Minor fixes.\n+\t(-w): Likewise.\n+\t(-Werror): Document that it also sets -gnatwe by default.\n+\t* gcc-interface/lang-specs.h (ada): Expand -gnatwe if -Werror is\n+\tpassed and move expansion of -gnatw switches to before -gnatez.\n+\n+2021-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (can_materialize_object_renaming_p): Do not\n+\tcall UI_Is_In_Int_Range on the result of Normalized_First_Bit.\n+\n+2021-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <is_type>: Declare new\n+\tconstant.  Adjust error message issued by validate_size in the case\n+\tof by-reference types.\n+\t(validate_size): Always use the error strings passed by the caller.\n+\n 2021-09-08  liuhongt  <hongtao.liu@intel.com>\n \n \t* gcc-interface/misc.c (gnat_post_options): Issue an error for"}, {"sha": "a22fbfd086919f1ac61f539c8d25b8e3cfb0a9d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=52ac72a423bca56be85f8b53793f2cf8e667c2fd", "patch": "@@ -1,3 +1,59 @@\n+2021-09-14  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (struct param_info): Add copy_var.\n+\t(build_actor_fn): Use simplified param references.\n+\t(register_param_uses): Likewise.\n+\t(rewrite_param_uses): Likewise.\n+\t(analyze_fn_parms): New function.\n+\t(coro_rewrite_function_body): Add proxies for the fn\n+\tparameters to the outer bind scope of the rewritten code.\n+\t(morph_fn_to_coro): Use simplified version of param ref.\n+\n+2021-09-14  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (coro_resume_fn_id, coro_destroy_fn_id,\n+\tcoro_promise_id, coro_frame_needs_free_id, coro_resume_index_id,\n+\tcoro_self_handle_id, coro_actor_continue_id,\n+\tcoro_frame_i_a_r_c_id): New.\n+\t(coro_init_identifiers): Initialize new name identifiers.\n+\t(coro_promise_type_found_p): Use pre-built identifiers.\n+\t(struct await_xform_data): Remove unused fields.\n+\t(transform_await_expr): Delete code that is now unused.\n+\t(build_actor_fn): Simplify interface, use pre-built identifiers and\n+\tremove transforms that are no longer needed.\n+\t(build_destroy_fn): Use revised field names.\n+\t(register_local_var_uses): Use pre-built identifiers.\n+\t(coro_rewrite_function_body): Simplify interface, use pre-built\n+\tidentifiers.  Generate proxy vars in the outer bind expr scope for the\n+\timplementation state that we wish to expose.\n+\t(morph_fn_to_coro): Adjust comments for new variable names, use pre-\n+\tbuilt identifiers.  Remove unused code to generate frame entries for\n+\tthe implementation state.  Adjust call for build_actor_fn.\n+\n+2021-09-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102163\n+\t* constexpr.c (cxx_eval_call_expression): After evaluating a\n+\tsubobject constructor call for an empty union member, produce a\n+\tside effect that makes sure the member gets activated.\n+\n+2021-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102295\n+\t* decl.c (layout_var_decl): For aggregates ending with a flexible\n+\tarray member, add the size of the initializer for that member to\n+\tDECL_SIZE and DECL_SIZE_UNIT.\n+\n+2021-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102305\n+\t* method.c (is_xible_helper): Call complete_type on to.\n+\n+2021-09-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (cxx_init_decl_processing): Don't warn if L1 cache line\n+\tsize is smaller than maxalign.\n+\n 2021-09-13  Jason Merrill  <jason@redhat.com>\n \n \t* constexpr.c (maybe_warn_about_constant_value):"}, {"sha": "0530dadcdae3b18416aa183eadf21a5ee40ce0d5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=52ac72a423bca56be85f8b53793f2cf8e667c2fd", "patch": "@@ -1,3 +1,14 @@\n+2021-09-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102311\n+\t* resolve.c (resolve_entries): Attempt to recover cleanly after\n+\trejecting mismatched function entries.\n+\n+2021-09-14  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/102313\n+\t* parse.c (gfc_ascii_statement): Add missing ST_OMP_END_SCOPE.\n+\n 2021-09-13  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/82314"}, {"sha": "20af715bf5c7f3853eb91ca1504493f2b1d25e98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ac72a423bca56be85f8b53793f2cf8e667c2fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52ac72a423bca56be85f8b53793f2cf8e667c2fd", "patch": "@@ -1,3 +1,152 @@\n+2021-09-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102311\n+\t* gfortran.dg/entry_25.f90: New test.\n+\n+2021-09-14  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/mma-builtin-6.c: Add second call to xxsetacc\n+\tbuilt-in.  Update instruction counts.\n+\n+2021-09-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102163\n+\t* g++.dg/cpp0x/constexpr-empty17.C: New test.\n+\n+2021-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102295\n+\t* g++.target/i386/pr102295.C: New test.\n+\n+2021-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102305\n+\t* g++.dg/cpp0x/pr102305.C: New test.\n+\n+2021-09-14  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/102313\n+\t* gfortran.dg/goacc/unexpected-end.f90: New test.\n+\t* gfortran.dg/gomp/unexpected-end.f90: New test.\n+\n+2021-09-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/gcov/gcov.py: Fix failing pytests as gcov.json.gz\n+\t  filename was changed in b777f228b481ae881a7fbb09de367a053740932c.\n+\n+2021-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/enum_rep2.adb: New test.\n+\n+2021-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/atomic-29.c: Add -march=pentium\n+\tdg-additional-options for ia32.  Use sync_long_long effective target\n+\tinstead of sync_int_long.\n+\t* lib/target-supports.exp (check_effective_target_sync_long_long): Fix\n+\ta syntax error.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-helper.h (V512):\n+\tAdd xmm component.\n+\t* gcc.target/i386/avx512fp16-vfpclassph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vfpclassph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfpclasssh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfpclasssh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vgetexpph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vgetexpph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vgetexpsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vgetexpsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vgetmantph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vgetmantph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vgetmantsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vgetmantsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfpclassph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfpclassph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vgetexpph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vgetexpph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vgetmantph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vgetmantph-1b.c: Ditto.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-helper.h (_ROUND_CUR): New macro.\n+\t* gcc.target/i386/avx512fp16-vreduceph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vreduceph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vreducesh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vreducesh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vrndscaleph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vrndscaleph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vrndscalesh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vrndscalesh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vreduceph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vreduceph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vrndscaleph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vrndscaleph-1b.c: Ditto.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vrcpph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vrcpph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vrcpsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vrcpsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vscalefph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vscalefph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vscalefsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vscalefsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vrcpph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vrcpph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vscalefph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vscalefph-1b.c: Ditto.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vrsqrtph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vrsqrtph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vrsqrtsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vrsqrtsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vsqrtph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vsqrtph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vsqrtsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vsqrtsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vrsqrtph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vrsqrtph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vsqrtph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vsqrtph-1b.c: Ditto.\n+\n+2021-09-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n 2021-09-13  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/82314"}]}