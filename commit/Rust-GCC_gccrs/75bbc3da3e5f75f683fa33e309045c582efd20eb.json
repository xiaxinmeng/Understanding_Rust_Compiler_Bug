{"sha": "75bbc3da3e5f75f683fa33e309045c582efd20eb", "node_id": "C_kwDOANBUbNoAKDc1YmJjM2RhM2U1Zjc1ZjY4M2ZhMzNlMzA5MDQ1YzU4MmVmZDIwZWI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-04-29T20:46:25Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-05-01T12:18:06Z"}, "message": "Denormalize VR_VARYING to VR_RANGE before passing it to set_range_info_raw.\n\nWe are ICEing in set_range_info_raw because value_range_kind cannot be\nVR_VARYING, since SSA_NAME_RANGE_TYPE can only hold VR_RANGE /\nVR_ANTI_RANGE.  Most of the time setting a VR_VARYING as a global\nrange makes no sense.  However, we can have a range spanning the\nentire domain (VR_RANGE of [MIN,MAX] which is essentially a\nVR_VARYING), if the nonzero bits are set.\n\nThis was working before because set_range_info_raw allows setting\nVR_RANGE of [MIN, MAX].  However, when going through an irange, we\nnormalize this to a VR_VARYING, thus causing the ICE.  It's\ninteresting that other calls to set_range_info with an irange haven't\ntriggered this.\n\nOne solution would be to just ignore VR_VARYING and bail, since\nset_range_info* is really an update of the current range semantic\nwise.  After all, we keep the nonzero bits which provide additional\ninfo.  But this would be a change in behavior, so not suitable until\nafter GCC 12 is released.  So in order to keep with current behavior\nwe can just denormalize the varying to VR_RANGE.\n\nTested on x86-64 Linux.\n\n\t    PR tree-optimization/105432\n\ngcc/ChangeLog:\n\n\t* tree-ssanames.cc (set_range_info): Denormalize VR_VARYING to\n\tVR_RANGE before passing a piecewise range to set_range_info_raw.", "tree": {"sha": "705dc42dc3934fb9b7b6c01d0f2a7712f94da531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/705dc42dc3934fb9b7b6c01d0f2a7712f94da531"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75bbc3da3e5f75f683fa33e309045c582efd20eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75bbc3da3e5f75f683fa33e309045c582efd20eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75bbc3da3e5f75f683fa33e309045c582efd20eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75bbc3da3e5f75f683fa33e309045c582efd20eb/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95874f95095f401405d3386e2e6695351b3f97b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95874f95095f401405d3386e2e6695351b3f97b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95874f95095f401405d3386e2e6695351b3f97b5"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "05536cd2f74bbdf0ea854488f9e9c5cd0b11bfc8", "filename": "gcc/tree-ssanames.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75bbc3da3e5f75f683fa33e309045c582efd20eb/gcc%2Ftree-ssanames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75bbc3da3e5f75f683fa33e309045c582efd20eb/gcc%2Ftree-ssanames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.cc?ref=75bbc3da3e5f75f683fa33e309045c582efd20eb", "patch": "@@ -395,8 +395,17 @@ set_range_info (tree name, enum value_range_kind range_type,\n {\n   gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n \n-  /* A range of the entire domain is really no range at all.  */\n   tree type = TREE_TYPE (name);\n+  if (range_type == VR_VARYING)\n+    {\n+      /* SSA_NAME_RANGE_TYPE can only hold a VR_RANGE or\n+\t VR_ANTI_RANGE.  Denormalize VR_VARYING to VR_RANGE.  */\n+      range_type = VR_RANGE;\n+      gcc_checking_assert (min == wi::min_value (type));\n+      gcc_checking_assert (max == wi::max_value (type));\n+    }\n+\n+  /* A range of the entire domain is really no range at all.  */\n   if (min == wi::min_value (TYPE_PRECISION (type), TYPE_SIGN (type))\n       && max == wi::max_value (TYPE_PRECISION (type), TYPE_SIGN (type)))\n     {"}]}