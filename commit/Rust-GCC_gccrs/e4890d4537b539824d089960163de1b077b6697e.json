{"sha": "e4890d4537b539824d089960163de1b077b6697e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ4OTBkNDUzN2I1Mzk4MjRkMDg5OTYwMTYzZGUxYjA3N2I2Njk3ZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-04T22:27:23Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-04T22:27:23Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1162", "tree": {"sha": "0fc3d7c3193dda4477f4dddc01b7a45c2b55ff13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fc3d7c3193dda4477f4dddc01b7a45c2b55ff13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4890d4537b539824d089960163de1b077b6697e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4890d4537b539824d089960163de1b077b6697e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4890d4537b539824d089960163de1b077b6697e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4890d4537b539824d089960163de1b077b6697e/comments", "author": null, "committer": null, "parents": [{"sha": "d1c1397eebc39be331ab210b57ade79bf51ced73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c1397eebc39be331ab210b57ade79bf51ced73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c1397eebc39be331ab210b57ade79bf51ced73"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "a54781e68e0f7882f410bcd353b7579cd8ac476c", "filename": "gcc/cse.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4890d4537b539824d089960163de1b077b6697e/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4890d4537b539824d089960163de1b077b6697e/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=e4890d4537b539824d089960163de1b077b6697e", "patch": "@@ -4580,6 +4580,10 @@ fold_rtx (x, insn)\n   switch (GET_RTX_CLASS (code))\n     {\n     case '1':\n+      /* We can't simplify extension ops unless we know the original mode.  */\n+      if ((code == ZERO_EXTEND || code == SIGN_EXTEND)\n+\t  && mode_arg0 == VOIDmode)\n+\tbreak;\n       new = simplify_unary_operation (code, mode,\n \t\t\t\t      const_arg0 ? const_arg0 : folded_arg0,\n \t\t\t\t      mode_arg0);\n@@ -6630,6 +6634,17 @@ cse_process_notes (x, object)\n \tXEXP (x, 1) = cse_process_notes (XEXP (x, 1), 0);\n       return x;\n \n+    case SIGN_EXTEND:\n+    case ZERO_EXTEND:\n+      {\n+\trtx new = cse_process_notes (XEXP (x, 0), object);\n+\t/* We don't substitute VOIDmode constants into these rtx,\n+\t   since they would impede folding.  */\n+\tif (GET_MODE (new) != VOIDmode)\n+\t  validate_change (object, &XEXP (x, 0), new, 0);\n+\treturn x;\n+      }\n+\n     case REG:\n       i = reg_qty[REGNO (x)];\n \n@@ -7599,6 +7614,7 @@ delete_dead_from_cse (insns, nreg)\n   rtx insn;\n   rtx tem;\n   int i;\n+  int in_libcall = 0;\n \n   /* First count the number of times each register is used.  */\n   bzero (counts, sizeof (int) * nreg);\n@@ -7613,7 +7629,14 @@ delete_dead_from_cse (insns, nreg)\n     {\n       int live_insn = 0;\n \n-      if (GET_CODE (PATTERN (insn)) == SET)\n+      /* Don't delete any insns that are part of a libcall block.\n+\t Flow or loop might get confused if we did that.  */\n+      if (find_reg_note (insn, REG_LIBCALL, 0))\n+\tin_libcall = 1;\n+\n+      if (in_libcall)\n+\tlive_insn = 1;\n+      else if (GET_CODE (PATTERN (insn)) == SET)\n \t{\n \t  if (GET_CODE (SET_DEST (PATTERN (insn))) == REG\n \t      && SET_DEST (PATTERN (insn)) == SET_SRC (PATTERN (insn)))\n@@ -7665,16 +7688,17 @@ delete_dead_from_cse (insns, nreg)\n \tlive_insn = 1;\n \n       /* If this is a dead insn, delete it and show registers in it aren't\n-\t being used.  If this is the last insn of a libcall sequence, don't\n-\t delete it even if it is dead because we don't know how to do so\n-\t here.  */\n+\t being used.  */\n \n-      if (! live_insn && ! find_reg_note (insn, REG_RETVAL, 0))\n+      if (! live_insn)\n \t{\n \t  count_reg_usage (insn, counts, -1);\n \t  PUT_CODE (insn, NOTE);\n \t  NOTE_SOURCE_FILE (insn) = 0;\n \t  NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n \t}\n+\n+      if (find_reg_note (insn, REG_RETVAL, 0))\n+\tin_libcall = 0;\n     }\n }"}]}