{"sha": "18431dc503bba275e82e8d664c7da0785510888d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg0MzFkYzUwM2JiYTI3NWU4MmU4ZDY2NGM3ZGEwNzg1NTEwODg4ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:36:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:36:01Z"}, "message": "[multiple changes]\n\n2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch4.adb (Expand_Allocator_Expression): Ensure that the\n\ttag assignment and adjustment preceed the accessibility check.\n\t* exp_ch7.adb (Is_Subprogram_Call): Reimplemented.\n\n2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_prag.adb (Expand_Attributes): Ensure that\n\tthe temporary used to capture the value of attribute 'Old's\n\tprefix is properly initialized.\n\n2016-04-20  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_unst.ads, exp_unst.adb (Get_Level, Subp_Index): Moved to library\n\tlevel.\n\nFrom-SVN: r235258", "tree": {"sha": "d9d59ab5c9d523ed198bb32f4c1c628c0a8df170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9d59ab5c9d523ed198bb32f4c1c628c0a8df170"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18431dc503bba275e82e8d664c7da0785510888d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18431dc503bba275e82e8d664c7da0785510888d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18431dc503bba275e82e8d664c7da0785510888d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18431dc503bba275e82e8d664c7da0785510888d/comments", "author": null, "committer": null, "parents": [{"sha": "dfbc6cbe30524f817b427c19756dd13aecf31d09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbc6cbe30524f817b427c19756dd13aecf31d09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfbc6cbe30524f817b427c19756dd13aecf31d09"}], "stats": {"total": 194, "additions": 102, "deletions": 92}, "files": [{"sha": "f6f5dc34e79515794353749cc4def5641041d3db", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=18431dc503bba275e82e8d664c7da0785510888d", "patch": "@@ -1,3 +1,20 @@\n+2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Ensure that the\n+\ttag assignment and adjustment preceed the accessibility check.\n+\t* exp_ch7.adb (Is_Subprogram_Call): Reimplemented.\n+\n+2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Attributes): Ensure that\n+\tthe temporary used to capture the value of attribute 'Old's\n+\tprefix is properly initialized.\n+\n+2016-04-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_unst.ads, exp_unst.adb (Get_Level, Subp_Index): Moved to library\n+\tlevel.\n+\n 2016-04-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_ch9.adb (Analyze_Task_Type_Declaration): Shut down warning"}, {"sha": "7ac80187bd391489aa4bb53048d713435848d7ae", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=18431dc503bba275e82e8d664c7da0785510888d", "patch": "@@ -1182,8 +1182,6 @@ package body Exp_Ch4 is\n             end;\n          end if;\n \n-         Apply_Accessibility_Check (Temp);\n-\n          --  Generate the tag assignment\n \n          --  Suppress the tag assignment for VM targets because VM tags are\n@@ -1241,34 +1239,36 @@ package body Exp_Ch4 is\n             Insert_Action (N, Tag_Assign);\n          end if;\n \n-         if Needs_Finalization (DesigT) and then Needs_Finalization (T) then\n+         --  Generate an Adjust call if the object will be moved. In Ada 2005,\n+         --  the object may be inherently limited, in which case there is no\n+         --  Adjust procedure, and the object is built in place. In Ada 95, the\n+         --  object can be limited but not inherently limited if this allocator\n+         --  came from a return statement (we're allocating the result on the\n+         --  secondary stack). In that case, the object will be moved, so we do\n+         --  want to Adjust.\n \n-            --  Generate an Adjust call if the object will be moved. In Ada\n-            --  2005, the object may be inherently limited, in which case\n-            --  there is no Adjust procedure, and the object is built in\n-            --  place. In Ada 95, the object can be limited but not\n-            --  inherently limited if this allocator came from a return\n-            --  statement (we're allocating the result on the secondary\n-            --  stack). In that case, the object will be moved, so we _do_\n-            --  want to Adjust.\n+         if Needs_Finalization (DesigT)\n+           and then Needs_Finalization (T)\n+           and then not Aggr_In_Place\n+           and then not Is_Limited_View (T)\n+         then\n+            --  An unchecked conversion is needed in the classwide case because\n+            --  the designated type can be an ancestor of the subtype mark of\n+            --  the allocator.\n \n-            if not Aggr_In_Place\n-              and then not Is_Limited_View (T)\n-            then\n-               Insert_Action (N,\n+            Insert_Action (N,\n+              Make_Adjust_Call\n+                (Obj_Ref =>\n+                   Unchecked_Convert_To (T,\n+                     Make_Explicit_Dereference (Loc,\n+                       Prefix => New_Occurrence_Of (Temp, Loc))),\n+                 Typ     => T));\n+         end if;\n \n-                 --  An unchecked conversion is needed in the classwide case\n-                 --  because the designated type can be an ancestor of the\n-                 --  subtype mark of the allocator.\n+         --  Note: the accessibility check must be inserted after the call to\n+         --  [Deep_]Adjust to ensure proper completion of the assignment.\n \n-                 Make_Adjust_Call\n-                   (Obj_Ref =>\n-                      Unchecked_Convert_To (T,\n-                        Make_Explicit_Dereference (Loc,\n-                          Prefix => New_Occurrence_Of (Temp, Loc))),\n-                    Typ     => T));\n-            end if;\n-         end if;\n+         Apply_Accessibility_Check (Temp);\n \n          Rewrite (N, New_Occurrence_Of (Temp, Loc));\n          Analyze_And_Resolve (N, PtrT);"}, {"sha": "60ea45b97d33fd7e242e74df1bf2355d8453db88", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=18431dc503bba275e82e8d664c7da0785510888d", "patch": "@@ -4640,42 +4640,35 @@ package body Exp_Ch7 is\n \n          function Is_Subprogram_Call (N : Node_Id) return Traverse_Result is\n          begin\n-            --  Complex constructs are factored out by the expander and their\n-            --  occurrences are replaced with references to temporaries or\n-            --  object renamings. Due to this expansion activity, inspect the\n-            --  original tree to detect subprogram calls.\n-\n-            if Nkind_In (N, N_Identifier,\n-                            N_Object_Renaming_Declaration)\n-              and then Original_Node (N) /= N\n-            then\n-               Detect_Subprogram_Call (Original_Node (N));\n+            --  A regular procedure or function call\n+\n+            if Nkind (N) in N_Subprogram_Call then\n+               Must_Hook := True;\n+               return Abandon;\n+\n+            --  Special cases\n \n-               --  The original construct contains a subprogram call, there is\n-               --  no point in continuing the tree traversal.\n+            --  Heavy expansion may relocate function calls outside the related\n+            --  node. Inspect the original node to detect the initial placement\n+            --  of the call.\n+\n+            elsif Original_Node (N) /= N then\n+               Detect_Subprogram_Call (Original_Node (N));\n \n                if Must_Hook then\n                   return Abandon;\n                else\n                   return OK;\n                end if;\n \n-            --  The original construct contains a subprogram call, there is no\n-            --  point in continuing the tree traversal.\n+            --  Generalized indexing always involves a function call\n \n-            elsif Nkind (N) = N_Object_Declaration\n-              and then Present (Expression (N))\n-              and then Nkind (Original_Node (Expression (N))) = N_Function_Call\n+            elsif Nkind (N) = N_Indexed_Component\n+              and then Present (Generalized_Indexing (N))\n             then\n                Must_Hook := True;\n                return Abandon;\n \n-            --  A regular procedure or function call\n-\n-            elsif Nkind (N) in N_Subprogram_Call then\n-               Must_Hook := True;\n-               return Abandon;\n-\n             --  Keep searching\n \n             else"}, {"sha": "5df49eef1f529cb01e2627a26f68e56929895116", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=18431dc503bba275e82e8d664c7da0785510888d", "patch": "@@ -862,16 +862,16 @@ package body Exp_Prag is\n \n                --  Generate a temporary to capture the value of the prefix:\n                --    Temp : <Pref type>;\n-               --  Place that temporary at the beginning of declarations, to\n-               --  prevent anomalies in the GNATprove flow-analysis pass in\n-               --  the precondition procedure that follows.\n \n                Decl :=\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Temp,\n                    Object_Definition   =>\n                      New_Occurrence_Of (Etype (Pref), Loc));\n-               Set_No_Initialization (Decl);\n+\n+               --  Place that temporary at the beginning of declarations, to\n+               --  prevent anomalies in the GNATprove flow-analysis pass in\n+               --  the precondition procedure that follows.\n \n                Prepend_To (Decls, Decl);\n                Analyze (Decl);"}, {"sha": "668f596915346435370d0fc337896277f8b01fbe", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 31, "deletions": 39, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=18431dc503bba275e82e8d664c7da0785510888d", "patch": "@@ -138,6 +138,36 @@ package body Exp_Unst is\n       Calls.Append (Call);\n    end Append_Unique_Call;\n \n+   ---------------\n+   -- Get_Level --\n+   ---------------\n+\n+   function Get_Level (Subp : Entity_Id; Sub : Entity_Id) return Nat is\n+      Lev : Nat;\n+      S   : Entity_Id;\n+   begin\n+      Lev := 1;\n+      S   := Sub;\n+      loop\n+         if S = Subp then\n+            return Lev;\n+         else\n+            S := Enclosing_Subprogram (S);\n+            Lev := Lev + 1;\n+         end if;\n+      end loop;\n+   end Get_Level;\n+\n+   ----------------\n+   -- Subp_Index --\n+   ----------------\n+\n+   function Subp_Index (Sub : Entity_Id) return SI_Type is\n+   begin\n+      pragma Assert (Is_Subprogram (Sub));\n+      return SI_Type (UI_To_Int (Subps_Index (Sub)));\n+   end Subp_Index;\n+\n    -----------------------\n    -- Unnest_Subprogram --\n    -----------------------\n@@ -151,17 +181,9 @@ package body Exp_Unst is\n       --  This function returns the index of the enclosing subprogram which\n       --  will have a Lev value one less than this.\n \n-      function Get_Level (Sub : Entity_Id) return Nat;\n-      --  Sub is either Subp itself, or a subprogram nested within Subp. This\n-      --  function returns the level of nesting (Subp = 1, subprograms that\n-      --  are immediately nested within Subp = 2, etc).\n-\n       function Img_Pos (N : Pos) return String;\n       --  Return image of N without leading blank\n \n-      function Subp_Index (Sub : Entity_Id) return SI_Type;\n-      --  Given the entity for a subprogram, return corresponding Subps index\n-\n       function Upref_Name\n         (Ent   : Entity_Id;\n          Index : Pos;\n@@ -196,26 +218,6 @@ package body Exp_Unst is\n          return Ret;\n       end Enclosing_Subp;\n \n-      ---------------\n-      -- Get_Level --\n-      ---------------\n-\n-      function Get_Level (Sub : Entity_Id) return Nat is\n-         Lev : Nat;\n-         S   : Entity_Id;\n-      begin\n-         Lev := 1;\n-         S   := Sub;\n-         loop\n-            if S = Subp then\n-               return Lev;\n-            else\n-               S := Enclosing_Subprogram (S);\n-               Lev := Lev + 1;\n-            end if;\n-         end loop;\n-      end Get_Level;\n-\n       -------------\n       -- Img_Pos --\n       -------------\n@@ -237,16 +239,6 @@ package body Exp_Unst is\n          return Buf (Ptr + 1 .. Buf'Last);\n       end Img_Pos;\n \n-      ----------------\n-      -- Subp_Index --\n-      ----------------\n-\n-      function Subp_Index (Sub : Entity_Id) return SI_Type is\n-      begin\n-         pragma Assert (Is_Subprogram (Sub));\n-         return SI_Type (UI_To_Int (Subps_Index (Sub)));\n-      end Subp_Index;\n-\n       ----------------\n       -- Upref_Name --\n       ----------------\n@@ -561,7 +553,7 @@ package body Exp_Unst is\n                --  Make new entry in subprogram table if not already made\n \n                declare\n-                  L : constant Nat := Get_Level (Ent);\n+                  L : constant Nat := Get_Level (Subp, Ent);\n                begin\n                   Subps.Append\n                     ((Ent           => Ent,"}, {"sha": "d455175ca14e38f3006fb96f1f0fcbd30e7956d6", "filename": "gcc/ada/exp_unst.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2Fexp_unst.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18431dc503bba275e82e8d664c7da0785510888d/gcc%2Fada%2Fexp_unst.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.ads?ref=18431dc503bba275e82e8d664c7da0785510888d", "patch": "@@ -678,6 +678,14 @@ package Exp_Unst is\n    -- Subprograms --\n    -----------------\n \n+   function Get_Level (Subp : Entity_Id; Sub : Entity_Id) return Nat;\n+   --  Sub is either Subp itself, or a subprogram nested within Subp. This\n+   --  function returns the level of nesting (Subp = 1, subprograms that\n+   --  are immediately nested within Subp = 2, etc).\n+\n+   function Subp_Index (Sub : Entity_Id) return SI_Type;\n+   --  Given the entity for a subprogram, return corresponding Subps index\n+\n    procedure Unnest_Subprogram (Subp : Entity_Id; Subp_Body : Node_Id);\n    --  Subp is a library level subprogram which has nested subprograms, and\n    --  Subp_Body is the corresponding N_Subprogram_Body node. This procedure"}]}