{"sha": "cd1c668b50e5fa0041d6d6267e884914e0aa9d94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QxYzY2OGI1MGU1ZmEwMDQxZDZkNjI2N2U4ODQ5MTRlMGFhOWQ5NA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-08-04T18:50:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-04T18:50:45Z"}, "message": "2008-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb:\n\t(Replace_Anonymous_Access_To_Protected_Subprogram): Handle properly an\n\tanonymous access to protected subprogram that is the return type of the\n\tspecification of a subprogram body.\n\n\t* sem_ch6.adb:\n\t(Analyze_Subprogram_Body): if the return type is an anonymous access to\n\tsubprogram, freeze it now to prevent access anomalies in the back-end.\n\n\t* exp_ch9.adb: Minor code cleanup.\n\tMake sure that new declarations are inserted into the tree before\n\tanalysis (from code reading).\n\nFrom-SVN: r138650", "tree": {"sha": "bb7c07914ca27a6a2d8326c20534a48711e867a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb7c07914ca27a6a2d8326c20534a48711e867a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd1c668b50e5fa0041d6d6267e884914e0aa9d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1c668b50e5fa0041d6d6267e884914e0aa9d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd1c668b50e5fa0041d6d6267e884914e0aa9d94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1c668b50e5fa0041d6d6267e884914e0aa9d94/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94eefd2ef77020f87a7787c294b6b01c3e67450a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94eefd2ef77020f87a7787c294b6b01c3e67450a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94eefd2ef77020f87a7787c294b6b01c3e67450a"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "53de7a0e9d5c474f0fd91f57aec1868f0d15aad8", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1c668b50e5fa0041d6d6267e884914e0aa9d94/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1c668b50e5fa0041d6d6267e884914e0aa9d94/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=cd1c668b50e5fa0041d6d6267e884914e0aa9d94", "patch": "@@ -4733,9 +4733,9 @@ package body Exp_Ch9 is\n       Def1   : Node_Id;\n \n    begin\n-      --  Create access to protected subprogram with full signature\n+      --  Create access to subprogram with full signature\n \n-      if Nkind (Type_Definition (N)) = N_Access_Function_Definition then\n+      if Etype (D_T) /= Standard_Void_Type then\n          Def1 :=\n            Make_Access_Function_Definition (Loc,\n              Parameter_Specifications => P_List,\n@@ -4753,8 +4753,8 @@ package body Exp_Ch9 is\n           Defining_Identifier => D_T2,\n           Type_Definition => Def1);\n \n-      Analyze (Decl1);\n       Insert_After (N, Decl1);\n+      Analyze (Decl1);\n \n       --  Create Equivalent_Type, a record with two components for an access to\n       --  object and an access to subprogram.\n@@ -4786,8 +4786,8 @@ package body Exp_Ch9 is\n                 Make_Component_List (Loc,\n                   Component_Items => Comps)));\n \n-      Analyze (Decl2);\n       Insert_After (Decl1, Decl2);\n+      Analyze (Decl2);\n       Set_Equivalent_Type (T, E_T);\n    end Expand_Access_Protected_Subprogram_Type;\n \n@@ -7062,6 +7062,7 @@ package body Exp_Ch9 is\n    procedure Expand_N_Protected_Body (N : Node_Id) is\n       Loc          : constant Source_Ptr := Sloc (N);\n       Pid          : constant Entity_Id  := Corresponding_Spec (N);\n+\n       Current_Node : Node_Id;\n       Disp_Op_Body : Node_Id;\n       New_Op_Body  : Node_Id;\n@@ -7070,6 +7071,9 @@ package body Exp_Ch9 is\n       Op_Decl      : Node_Id;\n       Op_Id        : Entity_Id;\n \n+      Chain        : Entity_Id := Empty;\n+      --  Finalization chain that may be attached to new body\n+\n       function Build_Dispatching_Subprogram_Body\n         (N        : Node_Id;\n          Pid      : Node_Id;\n@@ -7203,13 +7207,13 @@ package body Exp_Ch9 is\n                   --  entity is not further elaborated, and so the chain\n                   --  properly belongs to the newly created subprogram body.\n \n-                  if Present\n-                    (Finalization_Chain_Entity (Defining_Entity (Op_Body)))\n-                  then\n+                  Chain :=\n+                    Finalization_Chain_Entity (Defining_Entity (Op_Body));\n+\n+                  if Present (Chain) then\n                      Set_Finalization_Chain_Entity\n                        (Protected_Body_Subprogram\n-                         (Corresponding_Spec (Op_Body)),\n-                       Finalization_Chain_Entity (Defining_Entity (Op_Body)));\n+                         (Corresponding_Spec (Op_Body)), Chain);\n                      Set_Analyzed\n                          (Handled_Statement_Sequence (New_Op_Body), False);\n                   end if;"}, {"sha": "44cd6c65e035524e0d9482e57f5d5fdacf07e550", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1c668b50e5fa0041d6d6267e884914e0aa9d94/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1c668b50e5fa0041d6d6267e884914e0aa9d94/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=cd1c668b50e5fa0041d6d6267e884914e0aa9d94", "patch": "@@ -1056,7 +1056,6 @@ package body Sem_Ch3 is\n                                    N_Object_Renaming_Declaration,\n                                    N_Formal_Object_Declaration,\n                                    N_Formal_Type_Declaration,\n-                                   N_Formal_Object_Declaration,\n                                    N_Task_Type_Declaration,\n                                    N_Protected_Type_Declaration))\n       loop\n@@ -4476,9 +4475,17 @@ package body Sem_Ch3 is\n \n       Mark_Rewrite_Insertion (Decl);\n \n-      --  Insert the new declaration in the nearest enclosing scope\n+      --  Insert the new declaration in the nearest enclosing scope. If the\n+      --  node is a body and N is its return type, the declaration belongs in\n+      --  the enclosing scope.\n \n       P := Parent (N);\n+      if Nkind (P) = N_Subprogram_Body\n+        and then Nkind (N) = N_Function_Specification\n+      then\n+         P := Parent (P);\n+      end if;\n+\n       while Present (P) and then not Has_Declarations (P) loop\n          P := Parent (P);\n       end loop;\n@@ -4521,13 +4528,13 @@ package body Sem_Ch3 is\n \n       Mark_Rewrite_Insertion (Comp);\n \n-      --  Temporarily remove the current scope from the stack to add the new\n-      --  declarations to the enclosing scope\n-\n       if Nkind_In (N, N_Object_Declaration, N_Access_Function_Definition) then\n          Analyze (Decl);\n \n       else\n+         --  Temporarily remove the current scope (record or subprogram) from\n+         --  the stack to add the new declarations to the enclosing scope.\n+\n          Scope_Stack.Decrement_Last;\n          Analyze (Decl);\n          Set_Is_Itype (Anon);"}, {"sha": "1e84b266745f48f711311f0ae6d204d2a784c5f7", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1c668b50e5fa0041d6d6267e884914e0aa9d94/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1c668b50e5fa0041d6d6267e884914e0aa9d94/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=cd1c668b50e5fa0041d6d6267e884914e0aa9d94", "patch": "@@ -663,9 +663,9 @@ package body Sem_Ch6 is\n             --  Analyze_Object_Declaration; we treat it as a normal\n             --  object declaration.\n \n+            Set_Is_Return_Object (Defining_Identifier (Obj_Decl));\n             Analyze (Obj_Decl);\n \n-            Set_Is_Return_Object (Defining_Identifier (Obj_Decl));\n             Check_Return_Subtype_Indication (Obj_Decl);\n \n             if Present (HSS) then\n@@ -1804,12 +1804,19 @@ package body Sem_Ch6 is\n             --  the body that depends on the subprogram having been frozen,\n             --  such as uses of extra formals), so we force it to be frozen\n             --  here. Same holds if the body and spec are compilation units.\n+            --  Finally, if the return type is an anonymous access to protected\n+            --  subprogram, it must be frozen before the body because its\n+            --  expansion has generated an equivalent type that is used when\n+            --  elaborating the body.\n \n             if No (Spec_Id) then\n                Freeze_Before (N, Body_Id);\n \n             elsif Nkind (Parent (N)) = N_Compilation_Unit then\n                Freeze_Before (N, Spec_Id);\n+\n+            elsif Is_Access_Subprogram_Type (Etype (Body_Id)) then\n+               Freeze_Before (N, Etype (Body_Id));\n             end if;\n \n          else"}]}