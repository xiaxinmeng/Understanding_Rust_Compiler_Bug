{"sha": "0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNhZDIxMDg1YjVkMmQ1ZWU2YzdhMDY3ZmY1NGExZWZhNWY1Y2EzOA==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-23T14:40:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-23T14:40:17Z"}, "message": "Merge #443 #444 #447\n\n443: Fix raw identifier parsing. r=dkm a=dkm\n\nLexer::parse_raw_identifier added the first character twice.\r\n\r\nAdds tests for a simple raw identifier, a keyword as raw identifier and\r\nxfail tests for a single underscore and forbidden keyword (crate) as raw\r\nidentifier.\r\n\r\nTo help error diagnostics continue after parse_raw_identifier failed in\r\nLexer::build_token.\r\n\r\nFixes: https://github.com/Rust-GCC/gccrs/issues/426\n\n444: Initialize crateNumItr in rust-hir-map to zero. r=dkm a=dkm\n\nvalgrind complains whenever a crate number is used because they are all\r\nderived from the initial crateNumItr in the rust-hir-map Mapping which\r\nis never initialized. This isn't technically a bug because all that is\r\nrequired is for crate numbers to be unique. But it could cause\r\nnon-deterministic behaviour when crate numbers are used for sorting.\r\nAnd it makes the valgrind output really noisy.\r\n\r\nWith this patch and configure --enable-valgrind-annotations running\r\nrust1 should not give any valgrind errors.\n\n447: Mention the identifier that was unused in ScanUnused. r=dkm a=dkm\n\nThe ScanUnused class would only mention some name was unused.\r\nAdd the actual identifier name that is unused to help the user.\r\n\r\nNote that this warning might produce a similar warning as the\r\nScanDeadcode class produces if the indentifier is a function.\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "d4dca907249ded4cb0343c8f74880a168a3bc32c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4dca907249ded4cb0343c8f74880a168a3bc32c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgqmlRCRBK7hj4Ov3rIwAAf64IAF/bfqXAbRXoZ7/kzaxNesBP\n0t6lrciBIgCOdvA4oc3JAzmhYbNOg2yfnCmdpsFD+XFOOOsntdPv+ZqDy9kl0bVN\nq3/JQNdgPaKQOpGAUf3QVapYw9PLuySjSbqhKVD2+igoQO6362ae+r9bnJGVBcOO\nQu2j0iWIjrz3jNNrWytlt10QeTbzfxjLTSVgL4VeIDomcgUnRoqXFnmo91kRO549\nawztoisYrRKTywAJH6Q+VfvEILsMKwLZogVdBvW6UZYvQfM6uXrqBWqTGIOxvyx7\nWPzbjYzsmsEeOb4y+tk39XgYGmuDrZ8d1+KSD6cS0YJc/4ImUfSFgw+7zhAbgEU=\n=/2xa\n-----END PGP SIGNATURE-----\n", "payload": "tree d4dca907249ded4cb0343c8f74880a168a3bc32c\nparent 251536cdb29525d9ca6a6ba54abe40469f260a10\nparent 5467ac12d7bfd204cd4f1712ecefcbb9bcab6af8\nparent 9ca4faebe11908f3c634a36cd95db002152c3057\nparent fd95c6cec373a79b7dc0210a55398061666fe14a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621780817 +0000\ncommitter GitHub <noreply@github.com> 1621780817 +0000\n\nMerge #443 #444 #447\n\n443: Fix raw identifier parsing. r=dkm a=dkm\n\nLexer::parse_raw_identifier added the first character twice.\r\n\r\nAdds tests for a simple raw identifier, a keyword as raw identifier and\r\nxfail tests for a single underscore and forbidden keyword (crate) as raw\r\nidentifier.\r\n\r\nTo help error diagnostics continue after parse_raw_identifier failed in\r\nLexer::build_token.\r\n\r\nFixes: https://github.com/Rust-GCC/gccrs/issues/426\n\n444: Initialize crateNumItr in rust-hir-map to zero. r=dkm a=dkm\n\nvalgrind complains whenever a crate number is used because they are all\r\nderived from the initial crateNumItr in the rust-hir-map Mapping which\r\nis never initialized. This isn't technically a bug because all that is\r\nrequired is for crate numbers to be unique. But it could cause\r\nnon-deterministic behaviour when crate numbers are used for sorting.\r\nAnd it makes the valgrind output really noisy.\r\n\r\nWith this patch and configure --enable-valgrind-annotations running\r\nrust1 should not give any valgrind errors.\n\n447: Mention the identifier that was unused in ScanUnused. r=dkm a=dkm\n\nThe ScanUnused class would only mention some name was unused.\r\nAdd the actual identifier name that is unused to help the user.\r\n\r\nNote that this warning might produce a similar warning as the\r\nScanDeadcode class produces if the indentifier is a function.\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "251536cdb29525d9ca6a6ba54abe40469f260a10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251536cdb29525d9ca6a6ba54abe40469f260a10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251536cdb29525d9ca6a6ba54abe40469f260a10"}, {"sha": "5467ac12d7bfd204cd4f1712ecefcbb9bcab6af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5467ac12d7bfd204cd4f1712ecefcbb9bcab6af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5467ac12d7bfd204cd4f1712ecefcbb9bcab6af8"}, {"sha": "9ca4faebe11908f3c634a36cd95db002152c3057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca4faebe11908f3c634a36cd95db002152c3057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca4faebe11908f3c634a36cd95db002152c3057"}, {"sha": "fd95c6cec373a79b7dc0210a55398061666fe14a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd95c6cec373a79b7dc0210a55398061666fe14a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd95c6cec373a79b7dc0210a55398061666fe14a"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "16fb1ade220d355ac9a52e308890998db724b255", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38", "patch": "@@ -743,6 +743,9 @@ Lexer::build_token ()\n \t      TokenPtr raw_ident_ptr = parse_raw_identifier (loc);\n \t      if (raw_ident_ptr != nullptr)\n \t\treturn raw_ident_ptr;\n+\t      else\n+\t\tcontinue; /* input got parsed, it just wasn't valid. An error\n+\t\t\t     was produced. */\n \t    }\n \t  else\n \t    {\n@@ -1523,11 +1526,9 @@ Lexer::parse_raw_identifier (Location loc)\n \n   current_column += 2;\n \n-  str += current_char;\n-\n   bool first_is_underscore = current_char == '_';\n \n-  int length = 1;\n+  int length = 0;\n   current_char = peek_input ();\n   // loop through entire name\n   while (ISALPHA (current_char) || ISDIGIT (current_char)"}, {"sha": "432776ccb9b89fc4affa05796721ab5c25c9b57f", "filename": "gcc/rust/resolve/rust-ast-resolve-unused.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h?ref=0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38", "patch": "@@ -38,7 +38,7 @@ class ScanUnused\n       if (!r->have_references_for_node (decl_node_id)\n \t  && ident.get ().at (0) != '_')\n \t{\n-\t  rust_warning_at (locus, 0, \"unused name\");\n+\t  rust_warning_at (locus, 0, \"unused name '%s'\", ident.get ().c_str ());\n \t}\n       return true;\n     });"}, {"sha": "9feff330ae397a24ac63a5c500b7f3456986aa41", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38", "patch": "@@ -198,7 +198,7 @@ class Mappings\n private:\n   Mappings ();\n \n-  CrateNum crateNumItr;\n+  CrateNum crateNumItr = 0;\n   CrateNum currentCrateNum;\n \n   std::map<CrateNum, HirId> hirIdIter;"}, {"sha": "8746f337048627adf25c2068303a1b1758fd28c7", "filename": "gcc/testsuite/rust.test/compile/raw_identifiers.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fraw_identifiers.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fraw_identifiers.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fraw_identifiers.rs?ref=0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38", "patch": "@@ -0,0 +1,3 @@\n+pub fn square(num: i32) -> i32 { /* { dg-warning \"used\" } */\n+    r#num * num\n+}\n\\ No newline at end of file"}, {"sha": "c9aa3cf49386b50a87a5566891058888f58f9981", "filename": "gcc/testsuite/rust.test/compile/raw_identifiers_keywords.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fraw_identifiers_keywords.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fraw_identifiers_keywords.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fraw_identifiers_keywords.rs?ref=0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38", "patch": "@@ -0,0 +1,3 @@\n+pub fn plus(r#break: i32, r#unsafe: i32) -> i32 { /* { dg-warning \"used\" } */\n+    r#break + r#unsafe\n+}\n\\ No newline at end of file"}, {"sha": "854d7e6edee1d28a7999fc4dba318f02175b31f5", "filename": "gcc/testsuite/rust.test/xfail_compile/raw_identifiers_bad_keywords.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fraw_identifiers_bad_keywords.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fraw_identifiers_bad_keywords.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fraw_identifiers_bad_keywords.rs?ref=0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38", "patch": "@@ -0,0 +1,3 @@\n+pub fn plus(n: i32, m: i32) -> i32 {\n+    r#crate /* { dg-error \"forbidden raw identifier\" } */\n+}"}, {"sha": "86e9013a50bf027e399462b1591b2fc7f2d5be64", "filename": "gcc/testsuite/rust.test/xfail_compile/raw_identifiers_underscore.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fraw_identifiers_underscore.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fraw_identifiers_underscore.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fraw_identifiers_underscore.rs?ref=0cad21085b5d2d5ee6c7a067ff54a1efa5f5ca38", "patch": "@@ -0,0 +1,3 @@\n+pub fn s(num: i32) -> i32 {\n+    r#_ * num /* { dg-error \"not a valid raw identifier\" } */\n+}"}]}