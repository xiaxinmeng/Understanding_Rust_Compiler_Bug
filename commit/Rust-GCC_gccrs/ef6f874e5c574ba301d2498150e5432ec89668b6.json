{"sha": "ef6f874e5c574ba301d2498150e5432ec89668b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY2Zjg3NGU1YzU3NGJhMzAxZDI0OTgxNTBlNTQzMmVjODk2NjhiNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-10-28T09:46:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-28T09:46:26Z"}, "message": "re PR driver/50876 (unrecognized command line option '-Zmultiply_defined suppress regressions for lto.exp on x86_64-apple-darwin11)\n\n2010-10-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR driver/50876\n\t* lto-wrapper.c (get_options_from_collect_gcc_options):\n\tProperly count arguments.\n\t(run_gcc): Use an obstack to collect argv, properly separate\n\tswitches and their arguments.\n\nFrom-SVN: r180608", "tree": {"sha": "2084ee4c9833905c4cdab3491aa8f44e7bfffd24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2084ee4c9833905c4cdab3491aa8f44e7bfffd24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef6f874e5c574ba301d2498150e5432ec89668b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6f874e5c574ba301d2498150e5432ec89668b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6f874e5c574ba301d2498150e5432ec89668b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6f874e5c574ba301d2498150e5432ec89668b6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c16fa77142c5d2b35f12a6f26c8799eb6c9d8a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c16fa77142c5d2b35f12a6f26c8799eb6c9d8a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c16fa77142c5d2b35f12a6f26c8799eb6c9d8a9"}], "stats": {"total": 62, "additions": 38, "deletions": 24}, "files": [{"sha": "9569f1c35f622b17330a1799029a16f3518fd4b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6f874e5c574ba301d2498150e5432ec89668b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6f874e5c574ba301d2498150e5432ec89668b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef6f874e5c574ba301d2498150e5432ec89668b6", "patch": "@@ -1,3 +1,11 @@\n+2010-10-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR driver/50876\n+\t* lto-wrapper.c (get_options_from_collect_gcc_options):\n+\tProperly count arguments.\n+\t(run_gcc): Use an obstack to collect argv, properly separate\n+\tswitches and their arguments.\n+\n 2011-10-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-vect-stmts.c (vectorizable_shift): Give up if op1 has different"}, {"sha": "1bf7ded2524a8d0257f61945ce503ef60ff9b539", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6f874e5c574ba301d2498150e5432ec89668b6/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6f874e5c574ba301d2498150e5432ec89668b6/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=ef6f874e5c574ba301d2498150e5432ec89668b6", "patch": "@@ -296,8 +296,8 @@ get_options_from_collect_gcc_options (const char *collect_gcc,\n   const char **argv;\n   int i, j, argc;\n \n-  /* Count arguments.  */\n-  argc = 0;\n+  /* Count arguments, account for the program name.  */\n+  argc = 2;\n   for (j = 0; collect_gcc_options[j] != '\\0'; ++j)\n     if (collect_gcc_options[j] == '\\'')\n       ++argc;\n@@ -344,6 +344,8 @@ run_gcc (unsigned argc, char *argv[])\n   bool no_partition = false;\n   struct cl_decoded_option *decoded_options;\n   unsigned int decoded_options_count;\n+  struct obstack argv_obstack;\n+  int new_head_argc;\n \n   /* Get the driver and options.  */\n   collect_gcc = getenv (\"COLLECT_GCC\");\n@@ -358,19 +360,17 @@ run_gcc (unsigned argc, char *argv[])\n \t\t\t\t\t&decoded_options_count);\n \n   /* Initalize the common arguments for the driver.  */\n-  new_argv = (const char **) xmalloc ((15 + decoded_options_count + argc)\n-\t\t\t\t      * sizeof (char *));\n-  argv_ptr = new_argv;\n-  *argv_ptr++ = collect_gcc;\n-  *argv_ptr++ = \"-xlto\";\n-  *argv_ptr++ = \"-c\";\n+  obstack_init (&argv_obstack);\n+  obstack_ptr_grow (&argv_obstack, collect_gcc);\n+  obstack_ptr_grow (&argv_obstack, \"-xlto\");\n+  obstack_ptr_grow (&argv_obstack, \"-c\");\n   for (j = 1; j < decoded_options_count; ++j)\n     {\n       struct cl_decoded_option *option = &decoded_options[j];\n \n-      /* Do not pass on frontend specific flags.  */\n+      /* Do not pass on frontend specific flags not suitable for lto.  */\n       if (!(cl_options[option->opt_index].flags\n-\t    & (CL_COMMON|CL_TARGET|CL_DRIVER)))\n+\t    & (CL_COMMON|CL_TARGET|CL_DRIVER|CL_LTO)))\n \tcontinue;\n \n       switch (option->opt_index)\n@@ -416,7 +416,8 @@ run_gcc (unsigned argc, char *argv[])\n \t}\n \n       /* Pass the option on.  */\n-      *argv_ptr++ = option->orig_option_with_args_text;\n+      for (i = 0; i < option->canonical_option_num_elements; ++i)\n+\tobstack_ptr_grow (&argv_obstack, option->canonical_option[i]);\n     }\n \n   if (no_partition)\n@@ -446,22 +447,23 @@ run_gcc (unsigned argc, char *argv[])\n \t}\n       if (!bit_bucket)\n \t{\n-\t  *argv_ptr++ = \"-dumpdir\";\n-\t  *argv_ptr++ = output_dir;\n+\t  obstack_ptr_grow (&argv_obstack, \"-dumpdir\");\n+\t  obstack_ptr_grow (&argv_obstack, output_dir);\n \t}\n \n-      *argv_ptr++ = \"-dumpbase\";\n+      obstack_ptr_grow (&argv_obstack, \"-dumpbase\");\n     }\n-  else\n-    argv_ptr--;\n+\n+  /* Remember at which point we can scrub args to re-use the commons.  */\n+  new_head_argc = obstack_object_size (&argv_obstack) / sizeof (void *);\n \n   if (lto_mode == LTO_MODE_LTO)\n     {\n       flto_out = make_temp_file (\".lto.o\");\n       if (linker_output)\n-\targv_ptr[0] = linker_output;\n-      argv_ptr[1] = \"-o\";\n-      argv_ptr[2] = flto_out;\n+\tobstack_ptr_grow (&argv_obstack, linker_output);\n+      obstack_ptr_grow (&argv_obstack, \"-o\");\n+      obstack_ptr_grow (&argv_obstack, flto_out);\n     }\n   else \n     {\n@@ -475,7 +477,7 @@ run_gcc (unsigned argc, char *argv[])\n \t\t\t\t\t     + sizeof (\".wpa\") + 1);\n \t  strcpy (dumpbase, linker_output);\n \t  strcat (dumpbase, \".wpa\");\n-\t  argv_ptr[0] = dumpbase;\n+\t  obstack_ptr_grow (&argv_obstack, dumpbase);\n \t}\n \n       if (linker_output && debug)\n@@ -491,19 +493,21 @@ run_gcc (unsigned argc, char *argv[])\n \t\t         (strlen (ltrans_output_file) + list_option_len + 1));\n       tmp = list_option_full;\n \n-      argv_ptr[1] = tmp;\n+      obstack_ptr_grow (&argv_obstack, tmp);\n       strcpy (tmp, list_option);\n       tmp += list_option_len;\n       strcpy (tmp, ltrans_output_file);\n \n-      argv_ptr[2] = \"-fwpa\";\n+      obstack_ptr_grow (&argv_obstack, \"-fwpa\");\n     }\n \n   /* Append the input objects and possible preceeding arguments.  */\n   for (i = 1; i < argc; ++i)\n-    argv_ptr[2 + i] = argv[i];\n-  argv_ptr[2 + i] = NULL;\n+    obstack_ptr_grow (&argv_obstack, argv[i]);\n+  obstack_ptr_grow (&argv_obstack, NULL);\n \n+  new_argv = XOBFINISH (&argv_obstack, const char **);\n+  argv_ptr = &new_argv[new_head_argc];\n   fork_execute (CONST_CAST (char **, new_argv));\n \n   if (lto_mode == LTO_MODE_LTO)\n@@ -656,6 +660,8 @@ run_gcc (unsigned argc, char *argv[])\n       free (list_option_full);\n       obstack_free (&env_obstack, NULL);\n     }\n+\n+  obstack_free (&argv_obstack, NULL);\n }\n \n "}]}