{"sha": "7bc8cb2b6be16ffbf5fbc3f0aebaa4203cc06f2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JjOGNiMmI2YmUxNmZmYmY1ZmJjM2YwYWViYWE0MjAzY2MwNmYyZQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-07-11T22:50:27Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-07-11T22:50:27Z"}, "message": "h8300.h (CPP_PREDEFINES, [...]): Add h8/300h support.\n\n\t* h8300/h8300.h (CPP_PREDEFINES, CPP_SPEC, LIB_SPEC, TARGET_SWITCHES,\n\tBITS_PER_WORD, MAX_BITS_PER_WORD, UNITS_PER_WORD, MAX_UNITS_PER_WORD,\n\tPOINTER_SIZE, PARM_BOUNDARY, BIGGEST_ALIGNMENT,\n\tBIGGEST_FIELD_ALIGNMENT, STACK_BOUNDARY, HARD_REGNO_NREGS,\n\tHARD_REGNO_MODE_OK, REG_CLASS_NAMES, REG_CLASS_CONTENTS,\n\tREGNO_REG_CLASS, PUSH_ROUNDING, FUNCTION_ARG_ADVANCE,\n\tTRAMPOLINE_TEMPLATE, TRAMPOLINE_SIZE, INITIALIZE_TRAMPOLINE,\n\tCONSTANT_ADDRESS, MOVE_MAX, Pmode, SIZE_TYPE, PTRDIFF_TYPE):\n\tAdd h8/300h support.\n\t(LINK_SPEC, TARGET_RTL_DUMP, TARGET_H8300, TARGET_H8300H,\n\tREAL_ARITHMETIC, SETUP_INCOMING_VARARGS, HAVE_POST_INCREMENT,\n\tHAVE_PRE_DECREMENT, MAX_MOVE_MAX, NO_BUILTIN_SIZE_TYPE,\n\tNO_BUILTIN_PTRDIFF_TYPE, WCHAR_TYPE, WCHAR_TYPE_SIZE,\n\tMAX_WCHAR_TYPE_SIZE, ASM_WORD_OP, INIT_SECTION_ASM_OP,\n\tCTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP, EXTRA_SECTIONS,\n\tEXTRA_SECTION_FUNCTIONS, ASM_OUTPUT_CONSTRUCTOR, ASM_OUTPUT_DESTRUCTOR,\n\tDO_GLOBAL_CTORS_BODY, DO_GLOBAL_DTORS_BODY, INIT_TARGET_OPTABS):\n\tDefine.\n\t(CAN_DEBUG_WITHOUT_FP, PCC_STATIC_STRUCT_RETURN, STRUCT_VALUE_REGNUM,\n\tSTRUCT_VALUE_INCOMING, STRUCTURE_SIZE_BOUNDARY): Undefine.\n\t(enum reg_class): Add h8/300h support.\n\t(emit_a_shift): Declare.\n\t(TARGET_DEFAULT): Set default to -mquickcall.\n\t(DOUBLE_TYPE_SIZE): Fix at 32.  DFmode support doesn't exist.\n\t(CALL_USED_REGISTERS, REG_ALLOC_ORDER): Swap registers 2,3 with 4,5.\n\tRegisters 0,1 contain function result, allocate after 2,3.\n\t(STATIC_CHAIN_REGNUM): Use reg 4.\n\t(CONST_OK_FOR_LETTER_P): 'O' is ok_for_bclr, 'P' is small_power_of_two.\n\t(FUNCTION_PROFILER, FUNCTION_BLOCK_PROFILER, BLOCK_PROFILER): First\n\tattempt at an implementation.\n\t(CONST_COSTS): Move code into function const_costs.\n\t(BRANCH_COST): Set to 0.\n\t(NOTICE_UPDATE_CC): Move code into function notice_update_cc.\n\t(ASM_FILE_START): Move code into function asm_file_start.\n\t(ASM_FILE_END): Move code into function asm_file_end.\n\t(ASM_OUTPUT_DOUBLE, ASM_OUTPUT_FLOAT): Use REAL_VALUE_TO_DECIMAL.\n\nFrom-SVN: r7728", "tree": {"sha": "97bec9c8d2e739ff7671330ec113312098253761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97bec9c8d2e739ff7671330ec113312098253761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bc8cb2b6be16ffbf5fbc3f0aebaa4203cc06f2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc8cb2b6be16ffbf5fbc3f0aebaa4203cc06f2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bc8cb2b6be16ffbf5fbc3f0aebaa4203cc06f2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc8cb2b6be16ffbf5fbc3f0aebaa4203cc06f2e/comments", "author": null, "committer": null, "parents": [{"sha": "d215dc1d4bccb9a3c1480437580679ad3a7036f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d215dc1d4bccb9a3c1480437580679ad3a7036f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d215dc1d4bccb9a3c1480437580679ad3a7036f1"}], "stats": {"total": 908, "additions": 548, "deletions": 360}, "files": [{"sha": "7ce716a002dc3ea5d7476527731e8532a7cc0a0a", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 548, "deletions": 360, "changes": 908, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc8cb2b6be16ffbf5fbc3f0aebaa4203cc06f2e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc8cb2b6be16ffbf5fbc3f0aebaa4203cc06f2e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=7bc8cb2b6be16ffbf5fbc3f0aebaa4203cc06f2e", "patch": "@@ -1,7 +1,8 @@\n /* Definitions of target machine for GNU compiler. \n    Hitachi H8/300 version generating coff \n-   Copyright (C) 1992, 1993 Free Software Foundation, Inc.\n-   Contributed by Steve Chamberlain (sac@cygnus.com)\n+   Copyright (C) 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Contributed by Steve Chamberlain (sac@cygnus.com),\n+   Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n \n This file is part of GNU CC.\n \n@@ -19,62 +20,109 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n+/* Which cpu to compile for.\n+   We use int for CPU_TYPE to avoid lots of casts.  */\n+#if 0 /* defined in insn-attr.h, here for documentation */\n+enum attr_cpu { CPU_H8300, CPU_H8300H };\n+#endif\n+extern int cpu_type;\n+\n+/* Various globals defined in h8300.c.  */\n+\n+extern char *h8_push_op,*h8_pop_op,*h8_mov_op;\n+extern char **h8_reg_names;\n+\n /* Names to predefine in the preprocessor for this target machine.  */\n \n-#define CPP_PREDEFINES \"-D__H8300__ -D_DOUBLE_IS_32BITS -Acpu(h8300) -Amachine(h8300)\"\n+#define CPP_PREDEFINES \\\n+\"-D__LONG_MAX__=2147483647L -D__LONG_LONG_MAX__=2147483647L -D_DOUBLE_IS_32BITS\"\n \n-#define LIB_SPEC \"%{mrelax:-relax} %{g:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} \"\n+#define CPP_SPEC \\\n+  \"%{!mh:-D__H8300__} %{mh:-D__H8300H__} \\\n+   %{!mh:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n+   %{mh:-D__SIZE_TYPE__=unsigned\\\\ long -D__PTRDIFF_TYPE__=long} \\\n+   %{!mh:-Acpu(h8300) -Amachine(h8300)} %{mh:-Acpu(h8300h) -Amachine(h8300h)} \\\n+   %{!mint32:-D__INT_MAX__=32767} %{mint32:-D__INT_MAX__=2147483647}\"\n+\n+#define LINK_SPEC \"%{mh:-m h8300h}\"\n+\n+#define LIB_SPEC \"%{mrelax:-relax} %{g:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n \n /* Print subsidiary information on the compiler version in use.  */\n+\n #define TARGET_VERSION fprintf (stderr, \" (Hitachi H8/300)\");\n-\f\n+\n /* Run-time compilation parameters selecting different hardware subsets.  */\n-int target_flags;\n+\n+extern int target_flags;\n \n /* Macros used in the machine description to test the flags.  */\n \n+/* Make int's 32 bits.  */\n+#define TARGET_INT32 (target_flags & 8)\n+\n+/* Dump recorded insn lengths into the output file.  This helps debug the\n+   md file.  */\n+#define TARGET_ADDRESSES (target_flags & 64)\n+\n+/* Pass the first few arguments in registers.  */\n+#define TARGET_QUICKCALL (target_flags & 128)\n+\n+/* Pretend byte accesses are slow.  */\n+#define TARGET_SLOWBYTE (target_flags & 256)\n+\n+/* Dump each assembler insn's rtl into the output file.\n+   This is for debugging the compiler only.  */\n+#define TARGET_RTL_DUMP\t(target_flags & 2048)\n+\n+/* Select between the h8/300 and h8/300h cpus.  */\n+#define TARGET_H8300\t(! TARGET_H8300H)\n+#define TARGET_H8300H\t(target_flags & 4096)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n    where VALUE is the bits to set or minus the bits to clear.\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-  { {\"int32\",8},\t\\\n-    {\"long16\",16},\t\\\n-    {\"double64\",32},\t\\\n-    {\"addresses\",64 },\t\\\n-    {\"quickcall\",128},  \\\n-    {\"slowbyte\",256},  \\\n-    {\"noquick\",512},  \\\n-    {\"relax\",1024},  \\\n+  { {\"int32\",8},\t\t\\\n+    {\"addresses\",64 },\t\t\\\n+    {\"quickcall\",128},  \t\\\n+    {\"no-quickcall\",-128},\t\\\n+    {\"slowbyte\",256},\t\t\\\n+    {\"relax\",1024},\t\t\\\n+    {\"rtl-dump\",2048},\t\t\\\n+    {\"h\",4096},\t\t\t\\\n+    {\"no-h\",-4096},\t\t\\\n+    {\"exp\",8192},\t\t\\\n     { \"\", TARGET_DEFAULT}}\n \n+#define OVERRIDE_OPTIONS \\\n+{\t\t\t\t\\\n+  h8300_init_once ();\t\t\\\n+}\n+\n+/* Default target_flags if no switches specified.  */\n+\n+#ifndef TARGET_DEFAULT\n+#define TARGET_DEFAULT (128)\t/* quickcall */\n+#endif\n+\n /* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n+/* #define CAN_DEBUG_WITHOUT_FP */\n \n /* Define this if addresses of constant functions\n    shouldn't be put through pseudo regs where they can be cse'd.\n    Desirable on machines where ordinary constants are expensive\n    but a CALL with constant address is cheap.  */\n #define NO_FUNCTION_CSE\n-\n-#define TARGET_INT32 \t (target_flags & 8)\n-#define TARGET_LONG16 \t (target_flags & 16)\n-#define TARGET_DOUBLE32  (!(target_flags & 32))\n-#define TARGET_ADDRESSES (target_flags & 64)\n-#define TARGET_QUICKCALL (target_flags & 128)\n-#define TARGET_SLOWBYTE  (target_flags & 256)\n-#define TARGET_NOQUICK   (target_flags & 512)\n-\n-/* Default target_flags if no switches specified.  */\n-#ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT 0\n-#endif\n-\n-#define TARGET_NO_IMPORT (target_flags & MASK_NO_IMPORT)\n \f\n-/* Target machine storage layout.  */\n+/* Target machine storage layout */\n+\n+/* Define to use software floating point emulator for REAL_ARITHMETIC and\n+   decimal <-> binary conversion. */\n+#define REAL_ARITHMETIC\n \n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields.\n@@ -87,66 +135,63 @@ int target_flags;\n \n /* Define this if most significant word of a multiword number is lowest\n    numbered.  \n-\n    This is true on an H8/300 (actually we can make it up, but we choose to\n-   be consistent.  */\n+   be consistent.  */ \n #define WORDS_BIG_ENDIAN 1\n \n /* Number of bits in an addressable storage unit */\n #define BITS_PER_UNIT 8\n \n-#define UNITS_PER_PTR 2\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32.\n    But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD \t16\n-#define MAX_BITS_PER_WORD 16\n+#define BITS_PER_WORD\t\t(TARGET_H8300H ? 32 : 16)\n+#define MAX_BITS_PER_WORD\t32\n \n /* Width of a word, in units (bytes).  */\n-#define UNITS_PER_WORD 2\n+#define UNITS_PER_WORD\t\t(TARGET_H8300H ? 4 : 2)\n+#define MAX_UNITS_PER_WORD\t4\n \n /* Width in bits of a pointer.\n    See also the macro `Pmode' defined below.  */\n-#define POINTER_SIZE 16\n+#define POINTER_SIZE (TARGET_H8300H ? 32 : 16)\n \n-#define SHORT_TYPE_SIZE 16\n-#define INT_TYPE_SIZE (TARGET_INT32 ? 32 : 16)\n-#define LONG_TYPE_SIZE 32\n-#define LONG_LONG_TYPE_SIZE 32\n-#define DOUBLE_TYPE_SIZE (TARGET_DOUBLE32 ? 32 : 64)\n-#define FLOAT_TYPE_SIZE 32\n-#define LONG_DOUBLE_TYPE_SIZE DOUBLE_TYPE_SIZE\n+#define SHORT_TYPE_SIZE \t16\n+#define INT_TYPE_SIZE \t\t(TARGET_INT32 ? 32 : 16)\n+#define LONG_TYPE_SIZE \t\t32\n+#define LONG_LONG_TYPE_SIZE \t32\n+#define FLOAT_TYPE_SIZE \t32\n+#define DOUBLE_TYPE_SIZE \t32\n+#define LONG_DOUBLE_TYPE_SIZE \tDOUBLE_TYPE_SIZE\n \n-#define MAX_FIXED_MODE_SIZE 32\n+#define MAX_FIXED_MODE_SIZE \t32\n \n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n-#define PARM_BOUNDARY 16\n+#define PARM_BOUNDARY (TARGET_H8300H ? 32 : 16)\n \n /* Allocation boundary (in *bits*) for the code of a function.  */\n #define FUNCTION_BOUNDARY 16\n \n /* Alignment of field after `int : 0' in a structure.  */\n-#define EMPTY_FIELD_BOUNDARY (16)\n-\n-/* Every structure's size must be a multiple of this.  */\n-#define STRUCTURE_SIZE_BOUNDARY 16\n+#define EMPTY_FIELD_BOUNDARY 16\n \n /* A bitfield declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS  0\n \n /* No data type wants to be aligned rounder than this.  */\n-#define BIGGEST_ALIGNMENT 16\n+#define BIGGEST_ALIGNMENT (TARGET_H8300H ? 32 : 16)\n \n /* No structure field wants to be aligned rounder than this.  */\n-#define BIGGEST_FIELD_ALIGNMENT 16\n+#define BIGGEST_FIELD_ALIGNMENT (TARGET_H8300H ? 32 : 16)\n \n-/* The stack goes in 16 bit lumps.  */\n-#define STACK_BOUNDARY 16\n+/* The stack goes in 16/32 bit lumps.  */\n+#define STACK_BOUNDARY (TARGET_H8300 ? 16 : 32)\n \n /* Define this if move instructions will actually fail to work\n    when given unaligned data.  */\n+/* On the H8/300, longs can be aligned on halfword boundaries, but not\n+   byte boundaries.  */\n #define STRICT_ALIGNMENT 1\n \f\n /* Standard register usage.  */\n@@ -162,14 +207,14 @@ int target_flags;\n    appears in the RTL as an argument pointer prior to reload, and is\n    eliminated during reloading in favor of either the stack or frame\n    pointer.  */\n+\n #define FIRST_PSEUDO_REGISTER 9\n \n /* 1 for registers that have pervasive standard uses\n-   and are not available for the register allocator. \n+   and are not available for the register allocator.  */\n \n-   r7 is the stack pointer, r8 is the arg pointer.  */\n #define FIXED_REGISTERS \\\n-   {  0,0,0,0,  0,0,0,1, 1 }\n+  { 0, 0, 0, 0, 0, 0, 0, 1, 1}\n \n /* 1 for registers not available across function calls.\n    These must include the FIXED_REGISTERS and also any\n@@ -179,30 +224,33 @@ int target_flags;\n    Aside from that, you can include as many other registers as you\n    like.  \n \n-   The H8/300 destroys r0, r1, r4 and r5.  */\n+   h8 destroys r0,r1,r2,r3.  */\n \n #define CALL_USED_REGISTERS \\\n-    {1,1,0,0,  1,1,0,1, 1 }\n+  { 1, 1, 1, 1, 0, 0, 0, 1, 1 }\n \n-/* This is the order in which to allocate registers\n-   normally.  */\n-#define REG_ALLOC_ORDER { 0, 1, 4, 5, 2, 3, 6, 7, 8 }\n+#define REG_ALLOC_ORDER \\\n+  { 2, 3, 0, 1, 4, 5, 6, 7, 8}\n \n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n \n    This is ordinarily the length in words of a value of mode MODE\n    but can be less for certain modes in special long registers.  */\n+\n #define HARD_REGNO_NREGS(REGNO, MODE)   \\\n   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode\n    MODE.\n \n-   If an even reg, then anything goes.  Otherwise the mode must be QI\n-   or HI.  */\n+   H8/300: If an even reg, then anything goes. Otherwise the mode must be QI\n+   or HI.\n+   H8/300H: Anything goes.  */\n+\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n- ((((REGNO) & 1) == 0) || (MODE == HImode) || (MODE == QImode))\n+ (TARGET_H8300 ? (((REGNO)&1)==0) || (MODE==HImode) || (MODE==QImode) \\\n+  : 1)\n \n /* Value is 1 if it is a good idea to tie two pseudo registers\n    when one has mode MODE1 and one has mode MODE2.\n@@ -214,6 +262,7 @@ int target_flags;\n    The values of these macros are register numbers.  */\n \n /* H8/300 pc is not overloaded on a register.  */\n+\n /*#define PC_REGNUM 15*/\n \n /* Register to use for pushing function arguments.  */\n@@ -232,7 +281,7 @@ int target_flags;\n #define ARG_POINTER_REGNUM 8\n \n /* Register in which static-chain is passed to a function.  */\n-#define STATIC_CHAIN_REGNUM 0\n+#define STATIC_CHAIN_REGNUM 4\n \f\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n@@ -254,41 +303,40 @@ int target_flags;\n    For any two classes, it is very desirable that there be another\n    class that represents their union.  */\n    \n-/* The H8/300 has only one kind of register, but we mustn't do byte by\n-   byte operations on the sp, so we keep it as a different class.  */\n+/* The h8 has only one kind of register, but we mustn't do byte by\n+   byte operations on the sp, so we keep it as a different class */\n \n-enum reg_class { NO_REGS, LONG_REGS, GENERAL_REGS, SP_REG, ALL_REGS, LIM_REG_CLASSES };\n+enum reg_class { NO_REGS,  LONG_REGS, GENERAL_REGS, SP_REG, SP_AND_G_REG, ALL_REGS, LIM_REG_CLASSES };\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.  */\n+/* Give names of register classes as strings for dump file.   */\n \n #define REG_CLASS_NAMES \\\n- {\"NO_REGS\", \"LONG_REGS\", \"GENERAL_REGS\", \"SP_REG\", \"ALL_REGS\", \"LIM_REGS\"}\n+ {\"NO_REGS\",  \"LONG_REGS\",  \"GENERAL_REGS\", \"SP_REG\", \"SP_AND_G_REG\", \"ALL_REGS\", \"LIM_REGS\" }\n \n /* Define which registers fit in which classes.\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS  \t\t\t\t\\\n-{     0,   \t\t\t/* No regs      */\t\\\n-   0x7f,                        /* LONG_REGS    */      \\\n-   0x7f,\t\t\t/* GENERAL_REGS */\t\\\n-   0x80,\t\t\t/* SP_REG       */     \t\\\n-   0xff,\t\t\t/* ALL_REGS \t*/\t\\\n+#define REG_CLASS_CONTENTS  \t\t\t\\\n+{      0,\t\t/* No regs      */\t\\\n+   0x07f,               /* LONG_REGS    */      \\\n+   0x07f,\t\t/* GENERAL_REGS */\t\\\n+   0x080,\t\t/* SP_REG       */     \t\\\n+   0x0ff,\t\t/* SP_AND_G_REG */     \t\\\n+   0x1ff,\t\t/* ALL_REGS \t*/\t\\\n }\n \n-  /* The same information, inverted:\n-     Return the class number of the smallest class containing\n-     reg number REGNO.  This could be a conditional expression\n-     or could index an array.  */\n+/* The same information, inverted:\n+   Return the class number of the smallest class containing\n+   reg number REGNO.  This could be a conditional expression\n+   or could index an array.  */\n \n-#define REGNO_REG_CLASS(REGNO)\t\t\t\\\n- ((REGNO) >= STACK_POINTER_REGNUM\t\t\\\n-  ? ((REGNO) >= FRAME_POINTER_REGNUM\t\t\\\n-     ? SP_REG\t\t\t\t\t\\\n-     : GENERAL_REGS)\t\t\t\t\\\n-  : LONG_REGS)\n+#define REGNO_REG_CLASS(REGNO)  \\\n+   ((REGNO) < 7  ? LONG_REGS  : \\\n+    (REGNO) == 7 ? SP_REG     : \\\n+    GENERAL_REGS)\n \n /* The class value for index registers, and the one for base regs.  */\n \n@@ -298,93 +346,102 @@ enum reg_class { NO_REGS, LONG_REGS, GENERAL_REGS, SP_REG, ALL_REGS, LIM_REG_CLA\n /* Get reg_class from a letter such as appears in the machine description.  */\n \n #define REG_CLASS_FROM_LETTER(C) \\\n- ((C) == 'a' ? SP_REG : (((C) == 'l') ? LONG_REGS : NO_REGS))\n+  ((C) == 'a' ? (SP_REG) : (C) == 'l' ? (LONG_REGS) : (NO_REGS))\n \n /* The letters I, J, K, L, M, N, O, P in a register constraint string\n    can be used to stand for particular ranges of immediate operands.\n    This macro defines what the ranges are.\n    C is the letter, and VALUE is a constant value.\n    Return 1 if VALUE is in the range specified by C.  */\n \n-#define CONST_OK_FOR_LETTER_P(VALUE, C)  \t\t\\\n-  ((C) == 'I' ? (VALUE) == 0 : \t\t\t\t\\\n-   (C) == 'J' ? (((VALUE) & 0xff00) == 0) : \t\t\\\n-   (C) == 'K' ? ((VALUE) == 1 || (VALUE) == 2) :\t\\\n-   (C) == 'L' ? ((VALUE) == -1 || (VALUE) == -2) :      \\\n-   (C) == 'M' ? ((VALUE) == 3 || (VALUE) == 4) :        \\\n-   (C) == 'N' ? ((VALUE) == -3 || (VALUE) == -4) :      \\\n-   (C) == 'O' ? (potg8 (VALUE)) :\t\t\t\\\n-   (C) == 'P' ? (potl8 (VALUE)) :\t\t\t\\\n+#define CONST_OK_FOR_I(VALUE) ((VALUE) == 0)\n+#define CONST_OK_FOR_J(VALUE) ((unsigned) (VALUE) < 256)\n+#define CONST_OK_FOR_K(VALUE) (((VALUE) == 1) || (VALUE) == 2)\n+#define CONST_OK_FOR_L(VALUE) (((VALUE) == -1) || (VALUE) == -2)\n+#define CONST_OK_FOR_M(VALUE) (((VALUE) == 3) || (VALUE) == 4)\n+#define CONST_OK_FOR_N(VALUE) (((VALUE) == -3) || (VALUE) == -4)\n+#define CONST_OK_FOR_O(VALUE) (ok_for_bclr (VALUE))\n+#define CONST_OK_FOR_P(VALUE) (small_power_of_two (VALUE))\n+\n+#define CONST_OK_FOR_LETTER_P(VALUE, C) \\\n+  ((C) == 'I' ? CONST_OK_FOR_I (VALUE) : \\\n+   (C) == 'J' ? CONST_OK_FOR_J (VALUE) : \\\n+   (C) == 'K' ? CONST_OK_FOR_K (VALUE) : \\\n+   (C) == 'L' ? CONST_OK_FOR_L (VALUE) : \\\n+   (C) == 'M' ? CONST_OK_FOR_M (VALUE) : \\\n+   (C) == 'N' ? CONST_OK_FOR_N (VALUE) : \\\n+   (C) == 'O' ? CONST_OK_FOR_O (VALUE) : \\\n+   (C) == 'P' ? CONST_OK_FOR_P(VALUE) : \\\n    0)\n \n /* Similar, but for floating constants, and defining letters G and H.\n    Here VALUE is the CONST_DOUBLE rtx itself. \n+     \n+  `G' is a floating-point zero.  */\n \n-     `G' is a floating-point zero.  */\n-\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)          \\\n-  ((C) == 'G' ? ((VALUE) == CONST0_RTX (DFmode)         \\\n-                 || (VALUE) == CONST0_RTX (DFmode))     \\\n-   : 0)\n-\n-/* Extra constraints - 'U' if for an operand valid for a bset\n-   destination; i.e. a register or register indirect target.  */\n-#define EXTRA_CONSTRAINT(OP, C) \t\t\t\\\n-  (((C) == 'U')\t\t\t\t\t\t\\\n-   ? ((GET_CODE (OP) == REG) \t\t\t\t\\\n-      || ((GET_CODE (OP) == MEM) \t\t\t\\\n-\t  && GET_CODE (XEXP (OP, 0)) == REG))\t\t\\\n+#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C) \\\n+  ((C) == 'G' ? (VALUE) == CONST0_RTX (DFmode)\t\\\n    : 0)\n \n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines\n    in some cases it is preferable to use a more restrictive class.  */\n+\n #define PREFERRED_RELOAD_CLASS(X,CLASS)  (CLASS)\n \n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n \n-/* On the H8, this is the size of MODE in words,\n-   except in the FP regs, where a single reg is always enough.  */\n+/* On the H8, this is the size of MODE in words.  */\n+\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\\\n   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* Any SI register to register move may need to be reloaded, \n    so define REGISTER_MOVE_COST to be > 2 so that reload never\n    shortcuts.  */\n+\n #define REGISTER_MOVE_COST(CLASS1, CLASS2) 3\n \f\n /* Stack layout; function entry, exit and calling.  */\n \n /* Define this if pushing a word on the stack\n    makes the stack pointer a smaller address.  */\n+\n #define STACK_GROWS_DOWNWARD\n \n /* Define this if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */\n+\n #define FRAME_GROWS_DOWNWARD\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n    first local allocated.  Otherwise, it is the offset to the BEGINNING\n    of the first local allocated.  */\n+\n #define STARTING_FRAME_OFFSET 0\n \n /* If we generate an insn to push BYTES bytes,\n    this says how many the stack pointer really advances by.\n \n    On the H8/300, @-sp really pushes a byte if you ask it to - but that's\n    dangerous, so we claim that it always pushes a word, then we catch\n-   the mov.b rx,@-sp and turn it into a mov.w rx,@-sp on output.  */\n-#define PUSH_ROUNDING(BYTES)   (((BYTES) + 1) & ~1)\n+   the mov.b rx,@-sp and turn it into a mov.w rx,@-sp on output.\n \n-/* Offset of first parameter from the argument pointer register value.  */\n+   On the H8/300h, we simplify TARGET_QUICKCALL by setting this to 4 and doing\n+   a similar thing.  */\n \n+#define PUSH_ROUNDING(BYTES) \\\n+  (((BYTES) + PARM_BOUNDARY/8 - 1) & -PARM_BOUNDARY/8)\n+\n+/* Offset of first parameter from the argument pointer register value.  */\n /* Is equal to the size of the saved fp + pc, even if an fp isn't\n    saved since the value is used before we know.  */\n+\n #define FIRST_PARM_OFFSET(FNDECL) 0\n \n /* Value is the number of bytes of arguments automatically\n@@ -393,7 +450,8 @@ enum reg_class { NO_REGS, LONG_REGS, GENERAL_REGS, SP_REG, ALL_REGS, LIM_REG_CLA\n    or for a library call it is an identifier node for the subroutine name.\n    SIZE is the number of bytes of arguments passed on the stack.\n \n-   On the H8/300 the return does not pop anything.  */\n+   On the H8 the return does not pop anything.  */\n+\n #define RETURN_POPS_ARGS(FUNTYPE,SIZE) 0\n \n /* Definitions for register eliminations.\n@@ -403,100 +461,114 @@ enum reg_class { NO_REGS, LONG_REGS, GENERAL_REGS, SP_REG, ALL_REGS, LIM_REG_CLA\n    followed by \"to\".  Eliminations of the same \"from\" register are listed\n    in order of preference.\n \n-   We have two registers that can be eliminated on the i386.  First, the\n+   We have two registers that can be eliminated on the h8300.  First, the\n    frame pointer register can often be eliminated in favor of the stack\n    pointer register.  Secondly, the argument pointer register can always be\n    eliminated; it is replaced with either the stack or frame pointer. */\n+\n #define ELIMINABLE_REGS\t\t\t\t\\\n {{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n  { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},   \\\n  { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}\n \n+/* Given FROM and TO register numbers, say whether this elimination is allowed.\n+   Frame pointer elimination is automatically handled.\n+\n+   For the h8300, if frame pointer elimination is being done, we would like to\n+   convert ap into sp, not fp.\n+\n+   All other eliminations are valid.  */\n+\n #define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\\\n  ((FROM) == ARG_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM\t\\\n   ? ! frame_pointer_needed\t\t\t\t\t\\\n   : 1)\n \n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n-#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) OFFSET = io (FROM,TO)\n+\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n+  OFFSET = initial_offset (FROM, TO)\n \n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;\n    otherwise, FUNC is 0. \n    \n-   On the H8/300 the return value is in R0/R1.  */\n+   On the H8 the return value is in R0/R1.  */\n+\n #define FUNCTION_VALUE(VALTYPE, FUNC) \\\n- \tgen_rtx (REG, TYPE_MODE (VALTYPE), 0)\n+  gen_rtx (REG, TYPE_MODE (VALTYPE), 0)\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n \n-/* On the H8/300 the return value is in R0/R1.  */\n+/* On the h8 the return value is in R0/R1 */\n+\n #define LIBCALL_VALUE(MODE) \\\n-\tgen_rtx (REG, MODE, 0)\n+  gen_rtx (REG, MODE, 0)\n \n /* 1 if N is a possible register number for a function value.\n-   On the H8/300, R0 is the only register thus used.  */\n+   On the H8, R0 is the only register thus used.  */\n+\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 0)\n \n /* Define this if PCC uses the nonreentrant convention for returning\n    structure and union values.  */\n-#define PCC_STATIC_STRUCT_RETURN\n+\n+/*#define PCC_STATIC_STRUCT_RETURN*/\n \n /* 1 if N is a possible register number for function argument passing.\n-   On the H8/300, no registers are used in this way.  */\n+   On the H8, no registers are used in this way.  */\n+/* ??? What about TARGET_QUICKCALL? */\n+\n #define FUNCTION_ARG_REGNO_P(N) 0\n \n /* Register in which address to store a structure value\n    is passed to a function.  */\n+\n #define STRUCT_VALUE 0\n-#define STRUCT_VALUE_REGNUM 0\n-#define STRUCT_VALUE_INCOMING 0\n \n /* Return true if X should be returned in memory.  */\n-#define RETURN_IN_MEMORY(X) \\\n-  (TYPE_MODE (X) == BLKmode || GET_MODE_SIZE (TYPE_MODE (X)) > 4)\n-\n-/* Don't default to pcc-struct-return, because we have already specified\n-   exactly how to return structures in the RETURN_IN_MEMORY macro.  */\n-#define DEFAULT_PCC_STRUCT_RETURN 0\n+/* ??? This will return small structs in regs.  */\n+#define RETURN_IN_MEMORY(X) (GET_MODE_SIZE (TYPE_MODE (X)) > 4)\n \n /* When defined, the compiler allows registers explicitly used in the\n    rtl to be used as spill registers but prevents the compiler from\n-   extending the lifetime of these registers.  */\n+   extending the lifetime of these registers. */\n+\n #define SMALL_REGISTER_CLASSES\n \f\n /* Define a data type for recording info about an argument list\n    during the scan of that argument list.  This data type should\n-   Hold all necessary information about the function itself\n+   hold all necessary information about the function itself\n    and about the args processed so far, enough to enable macros\n    such as FUNCTION_ARG to determine where the next arg should go.\n \n    On the H8/300, this is a two item struct, the first is the number of bytes\n-   scanned so far, the second the name of any libcall.  */\n+   scanned so far and the second is the rtx of the called library\n+   function if any.  */\n \n #define CUMULATIVE_ARGS struct cum_arg\n-struct cum_arg { int nbytes; struct rtx_def* libcall; };\n+struct cum_arg { int nbytes; struct rtx_def * libcall; };\n \n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.\n \n    On the H8/300, the offset starts at 0.  */\n+\n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n-\t((CUM).nbytes = 0, (CUM).libcall = LIBNAME)\n+ ((CUM).nbytes = 0, (CUM).libcall = LIBNAME)\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE.\n+   (TYPE is null for libcalls where that information may not be available.)  */\n \n-   All sizes rounded up to even bytes.  */\n-\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)    \\\n- ((CUM).nbytes += ((MODE) != BLKmode                    \\\n-\t\t   ? (GET_MODE_SIZE (MODE) + 1) & ~1    \\\n-\t\t   : (int_size_in_bytes (TYPE) + 1) & ~1))\n+#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n+ ((CUM).nbytes += ((MODE) != BLKmode\t\t\t\\\n+  ? (GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) & -UNITS_PER_WORD\t\\\n+  : (int_size_in_bytes (TYPE) + UNITS_PER_WORD - 1) & -UNITS_PER_WORD))\n \n /* Define where to put the arguments to a function.\n    Value is zero to push the argument on the stack,\n@@ -511,41 +583,59 @@ struct cum_arg { int nbytes; struct rtx_def* libcall; };\n    NAMED is nonzero if this argument is a named parameter\n     (otherwise it is an extra parameter matching an ellipsis).  */\n \n-/* On the H8/300 all normal args are pushed, we pass args to named\n-   functions in registers.  */\n+/* On the H8/300 all normal args are pushed, unless -mquickcall in which\n+   case the first 3 arguments are passed in registers.\n+   See function `function_arg'.  */\n \n-extern struct rtx_def *function_arg();\n+struct rtx_def *function_arg();\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   function_arg (&CUM, MODE, TYPE, NAMED)\n \n-/* This macro generates the assembly code for function entry.\n-   FILE is a stdio stream to output the code to.\n-   SIZE is an int: how many units of temporary storage to allocate.\n-   Refer to the array `regs_ever_live' to determine which registers\n-   to save; `regs_ever_live[I]' is nonzero if register number I\n-   is ever used in the function.  This macro is responsible for\n-   knowing which registers should not be saved even if used.  */\n+/* Perform any needed actions needed for a function that is receiving a\n+   variable number of arguments.  */\n+\n+extern int current_function_anonymous_args;\n+#define SETUP_INCOMING_VARARGS(ASF, MODE, TYPE, PAS, ST) \\\n+  current_function_anonymous_args = 1;\n+\n+/* Generate assembly output for the start of a function.  */\n \n #define FUNCTION_PROLOGUE(FILE, SIZE) \\\n- function_prologue (FILE, SIZE)\n+  function_prologue (FILE, SIZE)\n \n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n \n-#define FUNCTION_PROFILER(FILE, LABELNO)  \t\\\n-   fprintf (FILE, \"\\t; not implemented\\n\", (LABELNO));\n+#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n+  fprintf (FILE, \"\\t%s\\t#LP%d,%s\\n\\tjsr @mcount\\n\", \\\n+\t   h8_mov_op, (LABELNO), h8_reg_names[0]);\n \n /* Output assembler code to FILE to initialize this source file's\n    basic block profiling info, if that has not already been done.  */\n+/* ??? @LPBX0 is moved into r0 twice.  */\n \n #define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)  \\\n- fprintf (FILE, \"\\t; not implemented \\n\", LABELNO, LABELNO);\n+  fprintf (FILE, \"\\t%s\\t%s\\n\\t%s\\t@LPBX0,%s\\n\\tbne LPI%d\\n\\t%s\\t@LPBX0,%s\\n\\t%s\\t%s\\n\\tjsr\\t@__bb_init_func\\nLPI%d:\\t%s\\t%s\\n\", \\\n+\t   h8_push_op, h8_reg_names[0],\t\t\\\n+\t   h8_mov_op, h8_reg_names[0],\t\t\\\n+\t   (LABELNO),\t\t\t\t\\\n+\t   h8_mov_op, h8_reg_names[0],\t\t\\\n+\t   h8_push_op, h8_reg_names[0],\t\t\\\n+\t   (LABELNO),\t\t\t\t\\\n+\t   h8_pop_op, h8_reg_names[0]);\n \n /* Output assembler code to FILE to increment the entry-count for\n-   the BLOCKNO'th basic block in this source file.  */\n-\n-#define BLOCK_PROFILER(FILE, BLOCKNO)\t\t\\\n- fprintf (FILE, \"\\t; not implemented\\n\");\n+   the BLOCKNO'th basic block in this source file.  This is a real pain in the\n+   sphincter on a VAX, since we do not want to change any of the bits in the\n+   processor status word.  The way it is done here, it is pushed onto the stack\n+   before any flags have changed, and then the stack is fixed up to account for\n+   the fact that the instruction to restore the flags only reads a word.\n+   It may seem a bit clumsy, but at least it works.  */\n+/* ??? This one needs work.  */\n+\n+#define BLOCK_PROFILER(FILE, BLOCKNO)\t\\\n+  fprintf (FILE, \"\\tmovpsl -(sp)\\n\\tmovw (sp),2(sp)\\n\\taddl2 $2,sp\\n\\taddl2 $1,LPBX2+%d\\n\\tbicpsw $255\\n\\tbispsw (sp)+\\n\", \\\n+\t   4 * BLOCKNO)\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n@@ -559,43 +649,62 @@ extern struct rtx_def *function_arg();\n    then individual return instructions are generated for each\n    return statement.  Args are same as for FUNCTION_PROLOGUE.  */\n \n-#define FUNCTION_EPILOGUE(FILE, SIZE)\t\t\\\n- function_epilogue (FILE, SIZE)\n+#define FUNCTION_EPILOGUE(FILE, SIZE) \\\n+  function_epilogue (FILE, SIZE)\n \n /* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.  */\n-\n-#define TRAMPOLINE_TEMPLATE(FILE) \t\t\\\n- fprintf (FILE, \" trampolines not implemented\\n\");\n+   of a trampoline, leaving space for the variable parts.  \n+\n+   H8/300\n+\t      vvvv context\n+   1 0000 79001234 \t\tmov.w\t#0x1234,r4\n+   2 0004 5A000000 \t\tjmp\t@0x1234\n+\t      ^^^^ function\n+\n+   H8/300H\n+\t      vvvvvvvv context\n+   2 0000 7A0012345678 \t\tmov.l\t#0x12345678,er4\n+   3 0006 5A000000 \t\tjmp\t@0x12345678\n+\t    ^^^^^^ function\n+*/\n+\n+#define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    if (TARGET_H8300)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tfprintf (FILE, \"\\tmov.w\t#0x1234,r4\\n\");\t\t\\\n+\tfprintf (FILE, \"\\tjmp\t@0x1234\\n\");\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tfprintf (FILE, \"\\tmov.l\t#0x12345678,er4\\n\");\t\\\n+\tfprintf (FILE, \"\\tjmp\t@0x123456\\n\");\t\\\n+      }\t\t\t\t\t\t\t\\\n+  } while (0)\n \n /* Length in units of the trampoline for entering a nested function.  */\n \n-#define TRAMPOLINE_SIZE 15\n+#define TRAMPOLINE_SIZE (TARGET_H8300 ? 8 : 12)\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  */\n \n-/* We copy the register-mask from the function's pure code\n-   to the start of the trampoline.  */\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx (MEM, HImode, TRAMP),\t\t\t\t\\\n-\t\t  gen_rtx (MEM, HImode, FNADDR));\t\t\t\\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 4)), CXT);\\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 11)),\t\\\n-\t\t  plus_constant (FNADDR, 2));\t\t\t\t\\\n+#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\t\\\n+  enum machine_mode mode = TARGET_H8300H ? SImode : HImode;\t\t\t\\\n+  emit_move_insn (gen_rtx (MEM, mode, plus_constant ((TRAMP), 2)), CXT);\t\\\n+  emit_move_insn (gen_rtx (MEM, mode, plus_constant ((TRAMP), 6)), FNADDR);\t\\\n+  if (TARGET_H8300H)\t\t\t\t\t\t\t\t\\\n+    emit_move_insn (gen_rtx (MEM, QImode, plus_constant ((TRAMP), 6)), GEN_INT (0x5A)); \\\n }\n \f\n-/* Addressing modes, and classification of registers for them.\n-   Although the H8/300 has pre decrement destinations and post\n-   increment sources on moves, they are not general enough to be much\n-   use to gcc */\n+/* Addressing modes, and classification of registers for them.  */\n \n-/*#define HAVE_POST_INCREMENT*/\n+#define HAVE_POST_INCREMENT\n /*#define HAVE_POST_DECREMENT */\n \n-/*#define HAVE_PRE_DECREMENT*/\n+#define HAVE_PRE_DECREMENT\n /*#define HAVE_PRE_INCREMENT */\n \n /* Macros to check register numbers against specific register classes.  */\n@@ -606,7 +715,7 @@ extern struct rtx_def *function_arg();\n    Since they use reg_renumber, they are safe only once reg_renumber\n    has been allocated, which happens in local-alloc.c.  */\n  \n-#define REGNO_OK_FOR_INDEX_P(regno)  0\n+#define REGNO_OK_FOR_INDEX_P(regno) 0\n \n #define REGNO_OK_FOR_BASE_P(regno) \\\n   ((regno) < FIRST_PSEUDO_REGISTER || reg_renumber[regno] >= 0)\n@@ -618,8 +727,12 @@ extern struct rtx_def *function_arg();\n /* 1 if X is an rtx for a constant that is a valid address.  */\n \n #define CONSTANT_ADDRESS_P(X)   \\\n-  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n-   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\\\n+   || (GET_CODE (X) == CONST_INT\t\t\t\t\\\n+       /* We handle signed and unsigned offsets here.  */\t\\\n+       && INTVAL (X) > (TARGET_H8300 ? -0x10000 : -0x1000000)\t\\\n+       && INTVAL (X) < (TARGET_H8300 ? 0x10000 : 0x1000000))\t\\\n+   || GET_CODE (X) == CONST\t\t\t\t\t\\\n    || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n@@ -648,18 +761,29 @@ extern struct rtx_def *function_arg();\n /* Nonzero if X is a hard reg that can be used as a base reg\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_BASE_P(X) 1\n-\n #define REG_OK_FOR_INDEX_P_STRICT(X) REGNO_OK_FOR_INDEX_P (REGNO (X))\n-#define REG_OK_FOR_BASE_P_STRICT(X)  REGNO_OK_FOR_BASE_P (REGNO (X))\n+#define REG_OK_FOR_BASE_P_STRICT(X) REGNO_OK_FOR_BASE_P (REGNO (X))\n+#define STRICT 0\n \n #else\n \n /* Nonzero if X is a hard reg that can be used as an index.  */\n #define REG_OK_FOR_INDEX_P(X) REGNO_OK_FOR_INDEX_P (REGNO (X))\n /* Nonzero if X is a hard reg that can be used as a base reg.  */\n #define REG_OK_FOR_BASE_P(X) REGNO_OK_FOR_BASE_P (REGNO (X))\n+#define STRICT 1\n \n #endif\n+\n+/* Extra constraints - 'U' if for an operand valid for a bset\n+   destination; i.e. a register or register indirect target.  */\n+#define OK_FOR_U(OP) \\\n+  ((GET_CODE (OP) == REG && REG_OK_FOR_BASE_P (OP)) \\\n+   || (GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == REG \\\n+       && REG_OK_FOR_BASE_P (XEXP (OP, 0)))) \n+ \n+#define EXTRA_CONSTRAINT(OP, C) \\\n+ ((C) == 'U' ? OK_FOR_U (OP) : 0)\n \f\n /* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression\n    that is a valid memory address for an instruction.\n@@ -670,22 +794,21 @@ extern struct rtx_def *function_arg();\n    except for CONSTANT_ADDRESS_P which is actually\n    machine-independent.  \n \n-\n    On the H8/300, a legitimate address has the form\n    REG, REG+CONSTANT_ADDRESS or CONSTANT_ADDRESS.  */\n \n /* Accept either REG or SUBREG where a register is valid.  */\n   \n-#define RTX_OK_FOR_BASE_P(X)                                    \\\n-  ((REG_P (X) && REG_OK_FOR_BASE_P (X))                         \\\n-   || (GET_CODE (X) == SUBREG && REG_P (SUBREG_REG (X))         \\\n+#define RTX_OK_FOR_BASE_P(X)\t\t\t\t\t\\\n+  ((REG_P (X) && REG_OK_FOR_BASE_P (X))\t\t\t\t\\\n+   || (GET_CODE (X) == SUBREG && REG_P (SUBREG_REG (X))\t\t\\\n        && REG_OK_FOR_BASE_P (SUBREG_REG (X))))\n \n-#define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)         \\\n-  if (RTX_OK_FOR_BASE_P (X)) goto ADDR;                 \\\n-  if (CONSTANT_ADDRESS_P (X)) goto ADDR;                \\\n-  if (GET_CODE (X) == PLUS                              \\\n-      && CONSTANT_ADDRESS_P (XEXP (X, 1))               \\\n+#define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)    \t\\\n+  if (RTX_OK_FOR_BASE_P (X)) goto ADDR;\t\t\t\\\n+  if (CONSTANT_ADDRESS_P (X)) goto ADDR;    \t\t\\\n+  if (GET_CODE (X) == PLUS\t\t\t\t\\\n+      && CONSTANT_ADDRESS_P (XEXP (X, 1))\t\t\\\n       && RTX_OK_FOR_BASE_P (XEXP (X, 0))) goto ADDR;\n \f\n /* Try machine-dependent ways of modifying an illegitimate address\n@@ -699,7 +822,7 @@ extern struct rtx_def *function_arg();\n    GO_IF_LEGITIMATE_ADDRESS.\n \n    It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output.\n+   opportunities to optimize the output. \n \n    For the H8/300, don't do anything.  */\n \n@@ -713,12 +836,12 @@ extern struct rtx_def *function_arg();\n    and all indexed address depend thus (because the index scale factor\n    is the length of the operand).  */\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\t\t\\\n- if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC) goto LABEL;\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL) \\\n+  if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC) goto LABEL;\n \f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */\n-#define CASE_VECTOR_MODE HImode\n+#define CASE_VECTOR_MODE Pmode\n \n /* Define this if the case instruction expects the table\n    to contain offsets from the address of the table.\n@@ -748,7 +871,8 @@ extern struct rtx_def *function_arg();\n \n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n-#define MOVE_MAX 2\n+#define MOVE_MAX\t(TARGET_H8300H ? 4 : 2)\n+#define MAX_MOVE_MAX\t4\n \n /* Define this if zero-extension is slow (more than one real instruction).  */\n /* #define SLOW_ZERO_EXTEND */\n@@ -768,10 +892,19 @@ extern struct rtx_def *function_arg();\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */\n-#define Pmode HImode\n+#define Pmode (TARGET_H8300H ? SImode : HImode)\n+\n+/* ANSI C types.\n+   We use longs for the 300h because ints can be 16 or 32.\n+   GCC requires SIZE_TYPE to be the same size as pointers.  */\n+#define NO_BUILTIN_SIZE_TYPE\n+#define NO_BUILTIN_PTRDIFF_TYPE\n+#define SIZE_TYPE (TARGET_H8300 ? \"unsigned int\" : \"long unsigned int\")\n+#define PTRDIFF_TYPE (TARGET_H8300 ? \"int\" : \"long int\")\n \n-#define SIZE_TYPE \"unsigned int\"\n-#define PTRDIFF_TYPE \"int\"\n+#define WCHAR_TYPE \"short unsigned int\"\n+#define WCHAR_TYPE_SIZE 16\n+#define MAX_WCHAR_TYPE_SIZE 16\n \n /* A function address in a call instruction\n    is a byte address (for indexing purposes)\n@@ -783,132 +916,150 @@ extern struct rtx_def *function_arg();\n    of a switch statement.  If the code is computed here,\n    return it with a return statement.  Otherwise, break from the switch.  */\n \n-#define CONST_COSTS(RTX,CODE,OUTER_CODE) \t\\\n-    case CONST_INT:\t\t\t\t\\\n-      switch (INTVAL (RTX))\t\t\t\\\n-\t{\t\t\t\t\t\\\n-\tcase 0:\t\t\t\t\t\\\n-\tcase 1:\t\t\t\t\t\\\n-\tcase 2:\t\t\t\t\t\\\n-\tcase -1:\t\t\t\t\\\n-\tcase -2:\t\t\t\t\\\n-\t  return 0;\t\t\t\t\\\n-\tdefault:\t\t\t\t\\\n-          return 1;\t\t\t\t\\\n-\t}\t\t\t\t\t\\\n-    case CONST:\t\t\t\t\t\\\n-    case LABEL_REF:\t\t\t\t\\\n-    case SYMBOL_REF:\t\t\t\t\\\n-      return 3;\t\t\t\t\t\\\n-    case CONST_DOUBLE:\t\t\t\t\\\n-      return 20;\t\t\t\t\n-\n-#define BRANCH_COST 2\n+#define CONST_COSTS(RTX,CODE,OUTER_CODE) \\\n+  default: { int _zxy= const_costs(RTX, CODE);\t\\\n+\t     if(_zxy) return _zxy; break;}\n+\n+#define BRANCH_COST 0\n+\n+/* We say that MOD and DIV are so cheap because otherwise we'll\n+   generate some really horrible code for division of a power of two.  */\n \n /* Provide the costs of a rtl expression.  This is in the body of a\n    switch on CODE.  */\n+/* ??? Shifts need to have a *much* higher cost than this.  */\n+\n+#define RTX_COSTS(RTX,CODE,OUTER_CODE) \\\n+  case MOD:\t\t\\\n+  case DIV:\t\t\\\n+    return 60;\t\t\\\n+  case MULT:\t\t\\\n+    return 20;\t\t\\\n+  case ASHIFT:\t\t\\\n+  case ASHIFTRT:\t\\\n+  case LSHIFTRT:\t\\\n+  case ROTATE:\t\t\\\n+  case ROTATERT:\t\\\n+    if (GET_MODE (RTX) == HImode) return 2; \\\n+    return 8; \n \n-#define RTX_COSTS(RTX,CODE,OUTER_CODE) \t\t\\\n-   case MOD: \t\t\t\t\t\\\n-   case DIV: \t\t\t\t\t\\\n-     return 60;\t\t\t\t\t\\\n-   case MULT: \t\t\t\t\t\\\n-     return 20; \t\t\t\t\\\n-   case ASHIFT:\t\t\t\t\t\\\n-   case ASHIFTRT:\t\t\t\t\\\n-   case LSHIFTRT:\t\t\t\t\\\n-   case ROTATE:\t\t\t\t\t\\\n-   case ROTATERT:\t\t\t\t\\\n-    if (GET_MODE (RTX) == HImode) \t\t\\\n-      return 2; \t\t\t\t\\\n-    return 10; \t\t\t\t\t\\\n-\f\n /* Tell final.c how to eliminate redundant test instructions.  */\n-  \n-/* Store in cc_status the expressions that the condition codes will describe\n-   after execution of an instruction whose pattern is EXP. Do not\n-   alter them if the instruction would not alter the cc's.  */\n-\n-#define NOTICE_UPDATE_CC(EXP, INSN) \t\t\t\t\t\\\n-switch (get_attr_cc (INSN))\t\t\t\t\t\t\\\n-  {\t        \t\t\t\t\t\t\t\\\n-  case CC_NONE:\t\t\t\t\t\t\t\t\\\n-    /* Insn does not affect the CC at all.  */\t\t\t\t\\\n-    break;\t\t\t\t\t\t\t\t\\\n-  case CC_NONE_0HIT:\t\t\t\t\t\t\t\\\n-    /* Insn does not change the CC, but the 0'th operand has been\t\\\n-       changed.  */\t\t\t\t        \t\t\\\n-    if (cc_status.value1 != 0\t\t\t\t\t\t\\\n-        && reg_overlap_mentioned_p (recog_operand[0], cc_status.value1))\\\n-    cc_status.value1 = 0;\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    if (cc_status.value2 != 0\t\t\t\t\t\t\\\n-        && reg_overlap_mentioned_p (recog_operand[0], cc_status.value2))\\\n-    cc_status.value2 = 0;\t\t\t\t\t\t\\\n-    break;\t\t\t\t\t\t\t\t\\\n-  case CC_SET:\t\t\t\t\t\t\t\t\\\n-    /* Insn sets CC to recog_operand[0], but overflow is impossible.  */\\\n-    CC_STATUS_INIT;\t\t\t\t\t\t\t\\\n-    cc_status.flags |= CC_NO_OVERFLOW;\t\t\t\t\t\\\n-    cc_status.value1 = recog_operand[0];\t\t\t\t\\\n-    break;\t\t\t\t\t\t\t\t\\\n-  case CC_COMPARE:\t\t\t\t\t\t\t\\\n-    /* The insn is a compare instruction.  */\t\t\t\t\\\n-    CC_STATUS_INIT;\t\t\t\t\t\t\t\\\n-    cc_status.value1 = recog_operand[0];\t\t\t\t\\\n-    cc_status.value1 = recog_operand[1];\t\t\t\t\\\n-    break;\t\t\t\t\t\t\t\t\\\n-  case CC_WHOOPS:\t\t\t\t\t\t\t\\\n-  case CC_CLOBBER:\t\t\t\t\t\t\t\\\n-    /* Insn clobbers CC.  */\t\t\t\t\t\t\\\n-    CC_STATUS_INIT;\t\t\t\t\t\t\t\\\n-    break;\t\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-\n-#define OUTPUT_JUMP(NORMAL, FLOAT, NO_OV)  \t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (cc_status.flags & CC_NO_OVERFLOW)\t\t\t\t\\\n-    return NO_OV;\t\t\t\t\t\t\\\n-  return NORMAL;\t\t\t\t\t\t\\\n+\n+/* Here we define machine-dependent flags and fields in cc_status\n+   (see `conditions.h').  No extra ones are needed for the vax.  */\n+\n+/* Store in cc_status the expressions\n+   that the condition codes will describe\n+   after execution of an instruction whose pattern is EXP.\n+   Do not alter them if the instruction would not alter the cc's.  */\n+\n+#define NOTICE_UPDATE_CC(EXP, INSN) notice_update_cc(EXP, INSN)\n+#define CC_DONE_CBIT 0400\n+\n+#define OUTPUT_JUMP(NORMAL, FLOAT, NO_OV) \\\n+{\t\t\t\t\t\\\n+  if (cc_status.flags & CC_NO_OVERFLOW)\t\\\n+    return NO_OV;\t\t\t\\\n+  return NORMAL;\t\t\t\\\n }\n \f\n /* Control the assembler format that we output.  */\n \n #define ASM_IDENTIFY_GCC /* nothing */\n \n-/* Output at beginning of assembler file.  */\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \";\\tGCC For the Hitachi H8/300\\n\");\t\t\\\n-  if (optimize)\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"; -O%d\\n\", optimize);\t\t\t\\\n-  fprintf (FILE, \"\\n\\n\");\t\t\t\t\t\\\n-  output_file_directive (FILE, main_input_filename);\t\t\\\n-}\n+/* Output at beginning/end of assembler file.  */\n+\n+#define ASM_FILE_START(FILE) asm_file_start(FILE)\n \n-#define ASM_FILE_END(FILE)\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.end\\n\");\n+#define ASM_FILE_END(FILE) asm_file_end(FILE)\n \n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n \n-#define ASM_APP_ON \t\"; #APP\\n\"\n+#define ASM_APP_ON \"; #APP\\n\"\n \n /* Output to assembler file text saying following lines\n    no longer contain unusual constructs.  */\n \n-#define ASM_APP_OFF \t\"; #NO_APP\\n\"\n+#define ASM_APP_OFF \"; #NO_APP\\n\"\n \n-#define FILE_ASM_OP \t\"\\t.file\\n\"\n-#define IDENT_ASM_OP \t\"\\t.ident\\n\"\n+#define FILE_ASM_OP \"\\t.file\\n\"\n+#define IDENT_ASM_OP \"\\t.ident\\n\"\n+\n+/* The assembler op to get a word, 2 bytes for the H8/300, 4 for H8/300H.  */\n+#define ASM_WORD_OP\t(TARGET_H8300 ? \".word\" : \".long\")\n \n /* Output before read-only data.  */\n \n #define TEXT_SECTION_ASM_OP \"\\t.section .text\"\n #define DATA_SECTION_ASM_OP \"\\t.section .data\"\n-#define BSS_SECTION_ASM_OP  \"\\t.section .bss\"\n+#define BSS_SECTION_ASM_OP \"\\t.section .bss\"\n+#define INIT_SECTION_ASM_OP \"\\t.section .init\"\n+#define CTORS_SECTION_ASM_OP \"\\t.section .ctors\"\n+#define DTORS_SECTION_ASM_OP \"\\t.section .dtors\"\n+\n+#define EXTRA_SECTIONS in_ctors, in_dtors\n+\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+ctors_section() \t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n+      in_section = in_ctors;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+dtors_section() \t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n+      in_section = in_dtors;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\n+#if 0\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE, NAME) \\\n+  do { named_section(\".init\"); fprintf(FILE,\"\\t.word\\t%s\\n\", NAME); } while (0)\n+#else\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n+  do { ctors_section();\t\t\t\t\\\n+       fprintf(FILE, \"\\t%s\\t_%s\\n\", ASM_WORD_OP, NAME); } while (0)\n+#endif\n \n-#define MAX_TEXT_ALIGN 16\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\\\n+  do { dtors_section();\t\t\t\t\\\n+       fprintf(FILE, \"\\t%s\\t_%s\\n\", ASM_WORD_OP, NAME); } while (0)\n+\n+#undef DO_GLOBAL_CTORS_BODY                     \n+#define DO_GLOBAL_CTORS_BODY\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  typedef (*pfunc)();\t\t\t\t\\\n+  extern pfunc __ctors[];\t\t\t\\\n+  extern pfunc __ctors_end[];\t\t\t\\\n+  pfunc *p;\t\t\t\t\t\\\n+  for (p = __ctors; p < __ctors_end; p++)\t\\\n+    {\t\t\t\t\t\t\\\n+      (*p)();\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\n+\n+#undef DO_GLOBAL_DTORS_BODY\t\t\t \n+#define DO_GLOBAL_DTORS_BODY                    \\\n+{\t\t\t\t\t\t\\\n+  typedef (*pfunc)();\t\t\t\t\\\n+  extern pfunc __dtors[];\t\t\t\\\n+  extern pfunc __dtors_end[];\t\t\t\\\n+  pfunc *p;\t\t\t\t\t\\\n+  for (p = __dtors; p < __dtors_end; p++)\t\\\n+    {\t\t\t\t\t\t\\\n+      (*p)();\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t \n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n@@ -921,6 +1072,10 @@ switch (get_attr_cc (INSN))\t\t\t\t\t\t\\\n \n #define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n \n+/* Vax specific: which type character is used for type double?  */\n+\n+#define ASM_DOUBLE_CHAR ('g')\n+\n #define SDB_DEBUGGING_INFO\n #define SDB_DELIM\t\"\\n\"\n \n@@ -933,23 +1088,24 @@ switch (get_attr_cc (INSN))\t\t\t\t\t\t\\\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n \n-#define ASM_OUTPUT_LABEL(FILE,NAME)\t\\\n+#define ASM_OUTPUT_LABEL(FILE, NAME)\t\\\n   do { assemble_name (FILE, NAME); fputs (\":\\n\", FILE); } while (0)\n \n-/*#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) */\n+#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) \n \n /* This is how to output a command to make the user-level label named NAME\n    defined for reference from other files.  */\n-#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n+\n+#define ASM_GLOBALIZE_LABEL(FILE, NAME)\t\\\n   do { fputs (\"\\t.global \", FILE); assemble_name (FILE, NAME); fputs (\"\\n\", FILE);} while (0)\n \n-/*#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) \\\n-  ASM_OUTPUT_LABEL(FILE, NAME); */\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) \\\n+   ASM_OUTPUT_LABEL(FILE, NAME)\n \n /* This is how to output a reference to a user-level label named NAME.\n    `assemble_name' uses this.  */\n \n-#define ASM_OUTPUT_LABELREF(FILE,NAME)\t\\\n+#define ASM_OUTPUT_LABELREF(FILE, NAME)\t\\\n   fprintf (FILE, \"_%s\", NAME)\n \n /* This is how to output an internal numbered label where\n@@ -969,78 +1125,93 @@ switch (get_attr_cc (INSN))\t\t\t\t\t\t\\\n /* This is how to output an assembler line defining a `double' constant.\n    It is .dfloat or .gfloat, depending.  */\n \n-/*#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\\\n-  fprintf (FILE, \"\\t.double %.20e\\n\", (VALUE))*/\n+#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\\\n+do { char dstr[30];\t\t\t\t\t\\\n+     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n+     fprintf (FILE, \"\\t.double %s\\n\", dstr);\t\t\\\n+   } while (0)\n+\n \n /* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\\\n-  fprintf (FILE, \"\\t.float %.20e\\n\", \t\t\\\n-\t   ((VALUE) > 1e30 ? 1e30\t\t\\\n-\t    : ((VALUE) < -1e30) ? -1e30 : (double) ((float) VALUE)));\n+#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\\\n+do { char dstr[30];\t\t\t\t\t\\\n+     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n+     fprintf (FILE, \"\\t.float %s\\n\", dstr);\t\t\\\n+   } while (0)\n \n /* This is how to output an assembler line defining an `int' constant.  */\n-#define ASM_OUTPUT_INT(FILE, VALUE)  \t\t\\\n+\n+#define ASM_OUTPUT_INT(FILE, VALUE)\t\t\\\n ( fprintf (FILE, \"\\t.long \"),\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n /* Likewise for `char' and `short' constants.  */\n-#define ASM_OUTPUT_CHAR(FILE, VALUE)  \t\t\\\n-( fprintf (FILE, \"\\t.byte \"),\t\t\t\\\n+\n+#define ASM_OUTPUT_SHORT(FILE, VALUE)\t\t\\\n+( fprintf (FILE, \"\\t.word \"),\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n-#define ASM_OUTPUT_SHORT(FILE, VALUE)  \t\t\\\n-( fprintf (FILE, \"\\t.word \"),\t\t\t\\\n+#define ASM_OUTPUT_CHAR(FILE, VALUE)\t\t\\\n+( fprintf (FILE, \"\\t.byte \"),\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n-#define ASM_OUTPUT_BYTE(FILE, VALUE)  \t\t\\\n+#define ASM_OUTPUT_BYTE(FILE, VALUE)  \\\n   fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */\n-#define ASM_OUTPUT_REG_PUSH(FILE, REGNO)  \t\\\n-  fprintf (FILE, \"\\tpush %s\\n\", reg_names[REGNO])\n+\n+#define ASM_OUTPUT_REG_PUSH(FILE, REGNO) \\\n+  fprintf (FILE, \"\\t%s\\t%s\\n\", h8_push_op, h8_reg_names[REGNO])\n \n /* This is how to output an insn to pop a register from the stack.\n    It need not be very fast code.  */\n-#define ASM_OUTPUT_REG_POP(FILE, REGNO)  \t\\\n-  fprintf (FILE, \"\\tpop\\t%s\\n\", reg_names[REGNO])\n \n-/* This is how to output an element of a case-vector that is absolute. */\n-#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n-  asm_fprintf (FILE, \"\\t.word .L%d\\n\", VALUE)\n+#define ASM_OUTPUT_REG_POP(FILE,REGNO) \\\n+  fprintf (FILE, \"\\t%s\\t%s\\n\", h8_pop_op, h8_reg_names[REGNO])\n+\n+/* This is how to output an element of a case-vector that is absolute.  */\n+\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n+  asm_fprintf (FILE, \"\\t%s .L%d\\n\", ASM_WORD_OP, VALUE)\n \n /* This is how to output an element of a case-vector that is relative.  */\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL)  \\\n-  fprintf (FILE, \"\\t.word.w .L%d-.L%d\\n\", VALUE, REL)\n+\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL) \\\n+  fprintf (FILE, \"\\t%s .L%d-.L%d\\n\", ASM_WORD_OP, VALUE, REL)\n \n /* This is how to output an assembler line\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */\n-#define ASM_OUTPUT_ALIGN(FILE, LOG)\t\t\\\n-  if ((LOG) != 0)\t\t\t\t\\\n+\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n+  if ((LOG) != 0)\t\t\t\\\n     fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG))\n \n /* This is how to output an assembler line\n    that says to advance the location counter by SIZE bytes.  */\n+\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n-  fprintf (FILE, \"%s\\t \\\"%s\\\"\\n\", IDENT_ASM_OP, NAME)\n+  fprintf(FILE, \"%s\\t \\\"%s\\\"\\n\", IDENT_ASM_OP, NAME)\n \n-#define ASM_OUTPUT_SKIP(FILE, SIZE)  \\\n+#define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n   fprintf (FILE, \"\\t.space %d\\n\", (SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n-#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \t\\\n-( fputs (\"\\t.comm \", (FILE)),\t\t\t\t\\\n-  assemble_name ((FILE), (NAME)),\t\t\t\\\n+\n+#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED) \\\n+( fputs (\"\\t.comm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n   fprintf ((FILE), \",%d\\n\", (SIZE)))\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n+\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE,ROUNDED)\t\\\n ( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n@@ -1069,37 +1240,54 @@ switch (get_attr_cc (INSN))\t\t\t\t\t\t\\\n #define TARGET_FF 014\n #define TARGET_CR 015\n \n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t \\\n+/* Print an instruction operand X on file FILE.\n+   look in h8300.c for details */\n+\n+#define PRINT_OPERAND_PUNCT_VALID_P(CODE) \\\n   ((CODE) == '#')\n \n-#define PRINT_OPERAND(FILE, X, CODE)\t\t\\\n- print_operand (FILE, X, CODE)\n+#define PRINT_OPERAND(FILE, X, CODE)  print_operand(FILE,X,CODE)\n \n /* Print a memory operand whose address is X, on file FILE.\n-   This uses a function in h8300.c.  */\n+   This uses a function in output-vax.c.  */\n \n-#define PRINT_OPERAND_ADDRESS(FILE, ADDR) \t \\\n- print_operand_address (FILE, ADDR)\n+#define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n \n #define HANDLE_PRAGMA(FILE) handle_pragma (FILE)\n \n-#define FINAL_PRESCAN_INSN(insn, operand, nop)\t\\\n- final_prescan_insn (insn, operand, nop)\n+#define FINAL_PRESCAN_INSN(insn, operand, nop) final_prescan_insn (insn, operand,nop)\n \n /* Define this macro if GNU CC should generate calls to the System V\n    (and ANSI C) library functions `memcpy' and `memset' rather than\n    the BSD functions `bcopy' and `bzero'.  */\n-#define TARGET_MEM_FUNCTIONS 1\n \n-/* Define subroutines to call to handle various operations not\n-   supported in the hardware */\n+#define TARGET_MEM_FUNCTIONS 1\n \n-#define DIVHI3_LIBCALL \"__divhi3\"\n-#define UDIVHI3_LIBCALL \"__udivhi3\"\n-#define MULHI3_LIBCALL \"__mulhi3\"\n-#define MODHI3_LIBCALL \"__modhi3\"\n-#define UMODHI3_LIBCALL \"__umodhi3\"\n-#define ADDSI3_LIBCALL \"__addsi3\"\n-#define SUBSI3_LIBCALL \"__subsi3\"\n+#define MULHI3_LIBCALL\t\"__mulhi3\"\n+#define DIVHI3_LIBCALL\t\"__divhi3\"\n+#define UDIVHI3_LIBCALL\t\"__udivhi3\"\n+#define MODHI3_LIBCALL\t\"__modhi3\"\n+#define UMODHI3_LIBCALL\t\"__umodhi3\"\n+\n+/* Perform target dependent optabs initialization.  */\n+\n+#define INIT_TARGET_OPTABS \\\n+  do { \\\n+    smul_optab->handlers[(int) HImode].libfunc\t\t\\\n+      = gen_rtx (SYMBOL_REF, Pmode, MULHI3_LIBCALL);\t\\\n+    sdiv_optab->handlers[(int) HImode].libfunc\t\t\\\n+      = gen_rtx (SYMBOL_REF, Pmode, DIVHI3_LIBCALL);\t\\\n+    udiv_optab->handlers[(int) HImode].libfunc\t\t\\\n+      = gen_rtx (SYMBOL_REF, Pmode, UDIVHI3_LIBCALL);\t\\\n+    smod_optab->handlers[(int) HImode].libfunc\t\t\\\n+      = gen_rtx (SYMBOL_REF, Pmode, MODHI3_LIBCALL);\t\\\n+    umod_optab->handlers[(int) HImode].libfunc\t\t\\\n+      = gen_rtx (SYMBOL_REF, Pmode, UMODHI3_LIBCALL);\t\\\n+  } while (0)\n \n #define MOVE_RATIO 3\n+\n+/* Declarations for functions used in insn-output.c.  */\n+char *emit_a_shift ();\n+\n+"}]}