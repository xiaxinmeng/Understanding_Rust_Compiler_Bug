{"sha": "a251ffd0ced940b9121ef658981e16640863836d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1MWZmZDBjZWQ5NDBiOTEyMWVmNjU4OTgxZTE2NjQwODYzODM2ZA==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-02-12T01:07:04Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-02-12T01:07:04Z"}, "message": "(ppc_adjust_cost): New function.  Adjust for TYPE_JMPREG.\n\nFrom-SVN: r6535", "tree": {"sha": "325f8d9f7355dfcc070fe706393cb74d404ffd61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/325f8d9f7355dfcc070fe706393cb74d404ffd61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a251ffd0ced940b9121ef658981e16640863836d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a251ffd0ced940b9121ef658981e16640863836d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a251ffd0ced940b9121ef658981e16640863836d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a251ffd0ced940b9121ef658981e16640863836d/comments", "author": null, "committer": null, "parents": [{"sha": "324e52cc5b57fdc9a0e529ae97cba33109a08791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324e52cc5b57fdc9a0e529ae97cba33109a08791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324e52cc5b57fdc9a0e529ae97cba33109a08791"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "2b14e5b99a525f83a41189cee67cc2fefde1f558", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a251ffd0ced940b9121ef658981e16640863836d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a251ffd0ced940b9121ef658981e16640863836d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a251ffd0ced940b9121ef658981e16640863836d", "patch": "@@ -1999,3 +1999,37 @@ output_function_profiler (file, labelno)\n   for (i = 3, j = 30; i <= last_parm_reg; i++, j--)\n     fprintf (file, \"\\tai %d,%d,0\\n\", i, j);\n }\n+\n+/* Adjust the cost of a scheduling dependency.  Return the new cost of\n+   a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */\n+\n+int\n+ppc_adjust_cost (insn, link, dep_insn, cost)\n+     rtx insn;\n+     rtx link;\n+     rtx dep_insn;\n+     int cost;\n+{\n+  if (! recog_memoized (insn))\n+    return 0;\n+\n+  if (REG_NOTE_KIND (link) != 0)\n+    return 0;\n+\n+  if (REG_NOTE_KIND (link) == 0)\n+    {\n+      /* Data dependency; DEP_INSN writes a register that INSN reads some\n+\t cycles later.  */\n+\n+      /* Tell the first scheduling pass about the latency between a mtctr\n+\t and bctr (and mtlr and br/blr).  The first scheduling pass will not\n+\t know about this latency since the mtctr instruction, which has the\n+\t latency associated to it, will be generated by reload.  */\n+      if (get_attr_type (insn) == TYPE_JMPREG)\n+\treturn TARGET_POWER ? 5 : 4;\n+\n+      /* Fall out to return default cost.  */\n+    }\n+\n+  return cost;\n+}"}]}