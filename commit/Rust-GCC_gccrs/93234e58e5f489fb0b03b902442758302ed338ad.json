{"sha": "93234e58e5f489fb0b03b902442758302ed338ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMyMzRlNThlNWY0ODlmYjBiMDNiOTAyNDQyNzU4MzAyZWQzMzhhZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-01T09:57:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-01T09:57:12Z"}, "message": "cpuid.h (__get_cpuid_max): Move misplaced comment.\n\n\t* config/i386/cpuid.h (__get_cpuid_max): Move misplaced comment.\n\nFrom-SVN: r157902", "tree": {"sha": "e149bbb521c065bac37f39b5bf8fde30c286e8af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e149bbb521c065bac37f39b5bf8fde30c286e8af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93234e58e5f489fb0b03b902442758302ed338ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93234e58e5f489fb0b03b902442758302ed338ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93234e58e5f489fb0b03b902442758302ed338ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93234e58e5f489fb0b03b902442758302ed338ad/comments", "author": null, "committer": null, "parents": [{"sha": "ef369ad84e0fbc339316eb9bd26f20b96fdd9faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef369ad84e0fbc339316eb9bd26f20b96fdd9faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef369ad84e0fbc339316eb9bd26f20b96fdd9faf"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "9f616761b95fb311f3c9f9c99db776ad73dd441f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93234e58e5f489fb0b03b902442758302ed338ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93234e58e5f489fb0b03b902442758302ed338ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93234e58e5f489fb0b03b902442758302ed338ad", "patch": "@@ -1,3 +1,7 @@\n+2010-04-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/cpuid.h (__get_cpuid_max): Move misplaced comment.\n+\n 2010-04-01  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* doc/install.texi (Specific, mips-sgi-irix5): Document IRIX 5\n@@ -195,8 +199,7 @@\n \tPR 43562\n \t* reload.h (caller_save_initialized_p): Declare.\n \t* toplev.c (backend_init_target): Don't call\n-\tinit_caller_save but set caller_save_initialized_p\n-\tto false.\n+\tinit_caller_save but set caller_save_initialized_p to false.\n \t* caller-save.c (caller_save_initialized_p): Define.\n \t(init_caller_save): Check caller_save_initialized_p.\n \t* ira.c (ira): Call init_caller_save if flag_caller_saves.\n@@ -226,8 +229,7 @@\n \t(add_mem_for_addr): Promote debug locs.\n \t(cselib_lookup_mem): Likewise.\n \t(cselib_lookup_addr): Renamed to...\n-\t(cselib_lookup_addr_1): ... this.  Promote debug locs.\n-\tDon't call...\n+\t(cselib_lookup_addr_1): ... this.  Promote debug locs.  Don't call...\n \t(cselib_log_lookup): ... this.  Turn into...\n \t(cselib_lookup_addr): ... new wrapper.\n \t(cselib_lookup_from_insn): New.\n@@ -250,9 +252,8 @@\n \twith operations in the narrower mode.\n \n \tPR debug/43593\n-\t* var-tracking.c (dataflow_set_clear_at_call): Invalidate\n-\tjust regs_invalidated_by_call instead all call_used_reg_set\n-\tregisters.\n+\t* var-tracking.c (dataflow_set_clear_at_call): Invalidate just\n+\tregs_invalidated_by_call instead all call_used_reg_set registers.\n \n 2010-03-30  Sebastian Pop  <sebastian.pop@amd.com>\n \n@@ -290,7 +291,7 @@\n \n 2010-03-28  Duncan Sands  <baldrick@free.fr>\n \n-       * Makefile.in (PLUGIN_HEADERS): Add except.h.\n+\t* Makefile.in (PLUGIN_HEADERS): Add except.h.\n \n 2010-03-29  Sebastian Pop  <sebastian.pop@amd.com>\n \n@@ -309,10 +310,8 @@\n 2010-03-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43560\n-\t* tree-ssa-loop-im.c (ref_always_accessed_p): Add store_p\n-\tparameter.\n-\t(can_sm_ref_p): Treat stores to readonly locations as\n-\ttrapping.\n+\t* tree-ssa-loop-im.c (ref_always_accessed_p): Add store_p parameter.\n+\t(can_sm_ref_p): Treat stores to readonly locations as trapping.\n \n 2010-03-29  Jie Zhang  <jie@codesourcery.com>\n "}, {"sha": "a8e49b7aa7985aa843df516f1b24248909c6151a", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93234e58e5f489fb0b03b902442758302ed338ad/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93234e58e5f489fb0b03b902442758302ed338ad/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=93234e58e5f489fb0b03b902442758302ed338ad", "patch": "@@ -117,8 +117,8 @@ __get_cpuid_max (unsigned int __ext, unsigned int *__sig)\n   unsigned int __eax, __ebx, __ecx, __edx;\n \n #ifndef __x86_64__\n-#if __GNUC__ >= 3\n   /* See if we can use cpuid.  On AMD64 we always can.  */\n+#if __GNUC__ >= 3\n   __asm__ (\"pushf{l|d}\\n\\t\"\n \t   \"pushf{l|d}\\n\\t\"\n \t   \"pop{l}\\t%0\\n\\t\""}]}