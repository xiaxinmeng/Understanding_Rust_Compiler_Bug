{"sha": "e74780a3ddec1c20eb782ba8b3bf0e30d25f78a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc0NzgwYTNkZGVjMWMyMGViNzgyYmE4YjNiZjBlMzBkMjVmNzhhOA==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2010-07-19T16:32:57Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2010-07-19T16:32:57Z"}, "message": "Fix PR44932\n\nFrom-SVN: r162310", "tree": {"sha": "9d2e457193c61d745a05b6a0e13e57a0e39407d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d2e457193c61d745a05b6a0e13e57a0e39407d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e74780a3ddec1c20eb782ba8b3bf0e30d25f78a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e74780a3ddec1c20eb782ba8b3bf0e30d25f78a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e74780a3ddec1c20eb782ba8b3bf0e30d25f78a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e74780a3ddec1c20eb782ba8b3bf0e30d25f78a8/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b4c365c560219ff8d4cf1f34857bcbf7d109325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4c365c560219ff8d4cf1f34857bcbf7d109325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4c365c560219ff8d4cf1f34857bcbf7d109325"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "e96fc43a0fcf4625780c336b07a34bb323ddaf4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74780a3ddec1c20eb782ba8b3bf0e30d25f78a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74780a3ddec1c20eb782ba8b3bf0e30d25f78a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e74780a3ddec1c20eb782ba8b3bf0e30d25f78a8", "patch": "@@ -1,3 +1,12 @@\n+2010-07-19  Xinliang David Li  <davidxl@google.com>\n+\n+\tPR testsuite/44932\n+\t* tree-ssa-uninit.c (collect_phi_def_edges): Fix bug collecting def edges.\n+\t(find_uninit_use): Add dump.\n+\t(is_use_properly_guarded): Ditto.\n+\t(warn_uninitialized_phi): Ditto.\n+\t(execute_late_warn_uninitialized): Ditto.\n+\n 2010-07-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/44941"}, {"sha": "16adde3b070b304bdd51a1bef63a097c2521522b", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74780a3ddec1c20eb782ba8b3bf0e30d25f78a8/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74780a3ddec1c20eb782ba8b3bf0e30d25f78a8/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=e74780a3ddec1c20eb782ba8b3bf0e30d25f78a8", "patch": "@@ -490,17 +490,33 @@ collect_phi_def_edges (gimple phi, basic_block cd_root,\n       opnd_edge = gimple_phi_arg_edge (phi, i);\n       opnd = gimple_phi_arg_def (phi, i);\n \n-      if (TREE_CODE (opnd) != SSA_NAME\n-          || !ssa_undefined_value_p (opnd))\n-        VEC_safe_push (edge, heap, *edges, opnd_edge);\n+      if (TREE_CODE (opnd) != SSA_NAME)\n+        {\n+          if (dump_file && (dump_flags & TDF_DETAILS))\n+            {\n+              fprintf (dump_file, \"\\n[CHECK] Found def edge %d in \", (int)i);\n+              print_gimple_stmt (dump_file, phi, 0, 0);\n+            }\n+          VEC_safe_push (edge, heap, *edges, opnd_edge);\n+        }\n       else\n         {\n           gimple def = SSA_NAME_DEF_STMT (opnd);\n+\n           if (gimple_code (def) == GIMPLE_PHI\n               && dominated_by_p (CDI_DOMINATORS,\n                                  gimple_bb (def), cd_root))\n             collect_phi_def_edges (def, cd_root, edges,\n                                    visited_phis);\n+          else if (!ssa_undefined_value_p (opnd))\n+            {\n+              if (dump_file && (dump_flags & TDF_DETAILS))\n+                {\n+                  fprintf (dump_file, \"\\n[CHECK] Found def edge %d in \", (int)i);\n+                  print_gimple_stmt (dump_file, phi, 0, 0);\n+                }\n+              VEC_safe_push (edge, heap, *edges, opnd_edge);\n+            }\n         }\n     }\n }\n@@ -1530,7 +1546,7 @@ is_use_properly_guarded (gimple use_stmt,\n \n   if (dump_file)\n     dump_predicates (use_stmt, num_preds, preds,\n-                     \"Use in stmt \");\n+                     \"\\nUse in stmt \");\n \n   has_valid_preds = find_def_preds (&def_preds,\n                                     &num_def_preds, phi);\n@@ -1615,15 +1631,26 @@ find_uninit_use (gimple phi, unsigned uninit_opnds,\n         }\n       pointer_set_destroy (visited_phis);\n \n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+        {\n+          fprintf (dump_file, \"[CHECK]: Found unguarded use: \");\n+          print_gimple_stmt (dump_file, use_stmt, 0, 0);\n+        }\n       /* Found one real use, return.  */\n       if (gimple_code (use_stmt) != GIMPLE_PHI)\n-         return use_stmt;\n+        return use_stmt;\n \n       /* Found a phi use that is not guarded,\n          add the phi to the worklist.  */\n       if (!pointer_set_insert (added_to_worklist,\n                                use_stmt))\n         {\n+          if (dump_file && (dump_flags & TDF_DETAILS))\n+            {\n+              fprintf (dump_file, \"[WORKLIST]: Update worklist with phi: \");\n+              print_gimple_stmt (dump_file, use_stmt, 0, 0);\n+            }\n+\n           VEC_safe_push (gimple, heap, *worklist, use_stmt);\n           pointer_set_insert (possibly_undefined_names,\n \t                      phi_result);\n@@ -1658,6 +1685,12 @@ warn_uninitialized_phi (gimple phi, VEC(gimple, heap) **worklist,\n   if  (MASK_EMPTY (uninit_opnds))\n     return;\n \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"[CHECK]: examining phi: \");\n+      print_gimple_stmt (dump_file, phi, 0, 0);\n+    }\n+\n   /* Now check if we have any use of the value without proper guard.  */\n   uninit_use_stmt = find_uninit_use (phi, uninit_opnds,\n                                      worklist, added_to_worklist);\n@@ -1717,6 +1750,11 @@ execute_late_warn_uninitialized (void)\n               {\n                 VEC_safe_push (gimple, heap, worklist, phi);\n \t\tpointer_set_insert (added_to_worklist, phi);\n+                if (dump_file && (dump_flags & TDF_DETAILS))\n+                  {\n+                    fprintf (dump_file, \"[WORKLIST]: add to initial list: \");\n+                    print_gimple_stmt (dump_file, phi, 0, 0);\n+                  }\n                 break;\n               }\n           }\n@@ -1728,7 +1766,7 @@ execute_late_warn_uninitialized (void)\n       cur_phi = VEC_pop (gimple, worklist);\n       warn_uninitialized_phi (cur_phi, &worklist, added_to_worklist);\n     }\n-  \n+\n   VEC_free (gimple, heap, worklist);\n   pointer_set_destroy (added_to_worklist);\n   pointer_set_destroy (possibly_undefined_names);"}]}