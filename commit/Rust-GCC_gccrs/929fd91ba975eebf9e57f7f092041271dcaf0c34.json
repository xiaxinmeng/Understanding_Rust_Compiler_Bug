{"sha": "929fd91ba975eebf9e57f7f092041271dcaf0c34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI5ZmQ5MWJhOTc1ZWViZjllNTdmN2YwOTIwNDEyNzFkY2FmMGMzNA==", "commit": {"author": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2020-06-04T11:50:49Z"}, "committer": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2020-06-16T15:30:28Z"}, "message": "S/390: Emit vector alignment hints for z13 if AS accepts them\n\nSince 87cb9423add vector alignment hints are emitted for target z13,\ntoo.  This patch changes this behaviour in the sense that alignment\nhints are only emitted for target z13 if the assembler accepts them.\n\ngcc/ChangeLog:\n\n\t* config.in: Regenerate.\n\t* config/s390/s390.c (print_operand): Emit vector alignment hints\n\tfor target z13, if AS accepts them.  For other targets the logic\n\tstays the same.\n\t* config/s390/s390.h (TARGET_VECTOR_LOADSTORE_ALIGNMENT_HINTS): Define\n\tmacro.\n\t* configure: Regenerate.\n\t* configure.ac: Check HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS_ON_Z13.", "tree": {"sha": "4ef5ac0b831d0ccb0aeb01e4da3fde26d5bd2c81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ef5ac0b831d0ccb0aeb01e4da3fde26d5bd2c81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/929fd91ba975eebf9e57f7f092041271dcaf0c34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929fd91ba975eebf9e57f7f092041271dcaf0c34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/929fd91ba975eebf9e57f7f092041271dcaf0c34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929fd91ba975eebf9e57f7f092041271dcaf0c34/comments", "author": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc39db873670bea8d8e655444387ceaa53a01a79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc39db873670bea8d8e655444387ceaa53a01a79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc39db873670bea8d8e655444387ceaa53a01a79"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "364eba4773744f2a5b415dbccc01242df1fc289f", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929fd91ba975eebf9e57f7f092041271dcaf0c34/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929fd91ba975eebf9e57f7f092041271dcaf0c34/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=929fd91ba975eebf9e57f7f092041271dcaf0c34", "patch": "@@ -706,6 +706,13 @@\n #endif\n \n \n+/* Define if your assembler supports vl/vst/vlm/vstm with an optional\n+   alignment hint argument on z13. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS_ON_Z13\n+#endif\n+\n+\n /* Define if your assembler supports VSX instructions. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_VSX"}, {"sha": "758315c0c724938851727526a380a1b020959976", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929fd91ba975eebf9e57f7f092041271dcaf0c34/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929fd91ba975eebf9e57f7f092041271dcaf0c34/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=929fd91ba975eebf9e57f7f092041271dcaf0c34", "patch": "@@ -7853,15 +7853,13 @@ print_operand (FILE *file, rtx x, int code)\n   switch (code)\n     {\n     case 'A':\n-#ifdef HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS\n-      if (TARGET_Z13 && MEM_P (x))\n+      if (TARGET_VECTOR_LOADSTORE_ALIGNMENT_HINTS && MEM_P (x))\n \t{\n \t  if (MEM_ALIGN (x) >= 128)\n \t    fprintf (file, \",4\");\n \t  else if (MEM_ALIGN (x) == 64)\n \t    fprintf (file, \",3\");\n \t}\n-#endif\n       return;\n     case 'C':\n       fprintf (file, s390_branch_condition_mnemonic (x, FALSE));"}, {"sha": "e4ef63e4080818ecd12bbaf7347966218fadd791", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929fd91ba975eebf9e57f7f092041271dcaf0c34/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929fd91ba975eebf9e57f7f092041271dcaf0c34/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=929fd91ba975eebf9e57f7f092041271dcaf0c34", "patch": "@@ -167,6 +167,13 @@ enum processor_flags\n \t(TARGET_VX && TARGET_CPU_VXE2)\n #define TARGET_VXE2_P(opts)\t\t\t\t\t\t\\\n \t(TARGET_VX_P (opts) && TARGET_CPU_VXE2_P (opts))\n+#if defined(HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS_ON_Z13)\n+#define TARGET_VECTOR_LOADSTORE_ALIGNMENT_HINTS TARGET_Z13\n+#elif defined(HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS)\n+#define TARGET_VECTOR_LOADSTORE_ALIGNMENT_HINTS TARGET_Z14\n+#else\n+#define TARGET_VECTOR_LOADSTORE_ALIGNMENT_HINTS 0\n+#endif\n \n #ifdef HAVE_AS_MACHINE_MACHINEMODE\n #define S390_USE_TARGET_ATTRIBUTE 1"}, {"sha": "f224679ed3ee5e4bbd80318a3eb2f32561dfd89c", "filename": "gcc/configure", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929fd91ba975eebf9e57f7f092041271dcaf0c34/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929fd91ba975eebf9e57f7f092041271dcaf0c34/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=929fd91ba975eebf9e57f7f092041271dcaf0c34", "patch": "@@ -28241,6 +28241,37 @@ if test $gcc_cv_as_s390_vector_loadstore_alignment_hints = yes; then\n \n $as_echo \"#define HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS 1\" >>confdefs.h\n \n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for vector load/store alignment hints on z13\" >&5\n+$as_echo_n \"checking assembler for vector load/store alignment hints on z13... \" >&6; }\n+if ${gcc_cv_as_s390_vector_loadstore_alignment_hints_on_z13+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_s390_vector_loadstore_alignment_hints_on_z13=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '\tvl %v24,0(%r15),3 ' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -mzarch -march=z13 -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_s390_vector_loadstore_alignment_hints_on_z13=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_s390_vector_loadstore_alignment_hints_on_z13\" >&5\n+$as_echo \"$gcc_cv_as_s390_vector_loadstore_alignment_hints_on_z13\" >&6; }\n+if test $gcc_cv_as_s390_vector_loadstore_alignment_hints_on_z13 = yes; then\n+\n+$as_echo \"#define HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS_ON_Z13 1\" >>confdefs.h\n+\n fi\n \n "}, {"sha": "e83f0833ef3fb19d6f2d68cc3c24e039da997a08", "filename": "gcc/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929fd91ba975eebf9e57f7f092041271dcaf0c34/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929fd91ba975eebf9e57f7f092041271dcaf0c34/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=929fd91ba975eebf9e57f7f092041271dcaf0c34", "patch": "@@ -5106,6 +5106,11 @@ configured with --enable-newlib-nano-formatted-io.])\n       [\tvl %v24,0(%r15),3 ],,\n       [AC_DEFINE(HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS, 1,\n \t  [Define if your assembler supports vl/vst/vlm/vstm with an optional alignment hint argument.])])\n+    gcc_GAS_CHECK_FEATURE([vector load/store alignment hints on z13],\n+      gcc_cv_as_s390_vector_loadstore_alignment_hints_on_z13,, [-mzarch -march=z13],\n+      [\tvl %v24,0(%r15),3 ],,\n+      [AC_DEFINE(HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS_ON_Z13, 1,\n+\t  [Define if your assembler supports vl/vst/vlm/vstm with an optional alignment hint argument on z13.])])\n \n     ;;\n esac"}]}