{"sha": "4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY4MTYzYjE5Y2QxZTBiNGU1ZDNlMTA0MjZkMDhhZDFlNTRjZjFlZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-01-04T22:42:22Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-01-04T22:42:22Z"}, "message": "re PR c++/12226 (g++ fails to enforce accessibility requirement for copy constructor)\n\n\tPR c++/12226\n\t* call.c (CHECK_COPY_CONSTRUCTOR_P): New macro.\n\t(reference_binding): Set it when appropriate.\n\t(build_temp): New function, split out from ...\n\t(convert_like_real): ... here.  Honor CHECK_COPY_CONSTRUCTOR_P.\n\t(initialize_reference): Likewise.\n\n\tPR c++/12226\n\t* g++.dg/init/copy7.c: New test.\n\n\tPR c++/12226\n\t* testsuite/27_io/basic_filebuf/4.cc: Remove use of invalid copy\n\tconstructor.\n\t* testsuite/27_io/basic_fstream/4.cc: Likewise.\n\t* testsuite/27_io/basic_ifstream/4.cc: Likewise.\n\t* testsuite/27_io/basic_ios/4.cc: Likewise.\n\t* testsuite/27_io/basic_iostream/4.cc: Likewise.\n\t* testsuite/27_io/basic_istream/4.cc: Likewise.\n\t* testsuite/27_io/basic_istingstream/4.cc: Likewise.\n\t* testsuite/27_io/basic_ofstream/4.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/4.cc: Likewise.\n\t* testsuite/27_io/basic_ostringstream/4.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/5.cc: Likewise.\n\t* testsuite/27_io/basic_stringstream/4.cc: Likewise.\n\n\tPR c++/13536\n\t* parser.c (cp_parser): Add in_type_id_in_expr_p.\n\t(cp_parser_new): Initialize it.\n\t(cp_parser_postfix_expression): Set it.\n\t(cp_parser_sizeof_operand): Likewise.\n\t(cp_parser_parameteR_declaration): Do not commit early to tenative\n\tparsers when in_type_id_in_expr_p is set.\n\n\tPR c++/13536\n\t* g++.dg/parse/cast1.C: New test.\n\nFrom-SVN: r75397", "tree": {"sha": "2f162239ad6abe8e01544300565821a85d22ac4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f162239ad6abe8e01544300565821a85d22ac4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/comments", "author": null, "committer": null, "parents": [{"sha": "5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7"}], "stats": {"total": 252, "additions": 193, "deletions": 59}, "files": [{"sha": "08600f7a7a9bb97ca1f076369e224b21d6d999a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -1,3 +1,20 @@\n+2004-01-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/12226\n+\t* call.c (CHECK_COPY_CONSTRUCTOR_P): New macro.\n+\t(reference_binding): Set it when appropriate.\n+\t(build_temp): New function, split out from ...\n+\t(convert_like_real): ... here.  Honor CHECK_COPY_CONSTRUCTOR_P.\n+\t(initialize_reference): Likewise.\n+\n+\tPR c++/13536\n+\t* parser.c (cp_parser): Add in_type_id_in_expr_p.\n+\t(cp_parser_new): Initialize it.\n+\t(cp_parser_postfix_expression): Set it.\n+\t(cp_parser_sizeof_operand): Likewise.\n+\t(cp_parser_parameteR_declaration): Do not commit early to tenative\n+\tparsers when in_type_id_in_expr_p is set.\n+\n 2004-01-03  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/13094"}, {"sha": "46ebca522539c51bc8e10fa0dff4177dd603e1fc", "filename": "gcc/cp/call.c", "status": "modified", "additions": 79, "deletions": 45, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -497,6 +497,10 @@ struct z_candidate GTY(()) {\n    should be created to hold the result of the conversion.  */\n #define NEED_TEMPORARY_P(NODE) TREE_LANG_FLAG_4 (NODE)\n \n+/* TRUE in an IDENTITY_CONV or BASE_CONV if the copy constructor must\n+   be accessible, even though it is not being used.  */\n+#define CHECK_COPY_CONSTRUCTOR_P(NODE) TREE_LANG_FLAG_5 (NODE)\n+\n #define USER_CONV_CAND(NODE) WRAPPER_ZC (TREE_OPERAND (NODE, 1))\n #define USER_CONV_FN(NODE) (USER_CONV_CAND (NODE)->fn)\n \n@@ -1176,7 +1180,9 @@ reference_binding (tree rto, tree rfrom, tree expr, int flags)\n   if (CLASS_TYPE_P (from) && compatible_p)\n     {\n       conv = build1 (IDENTITY_CONV, from, expr);\n-      return direct_reference_binding (rto, conv);\n+      conv = direct_reference_binding (rto, conv);\n+      CHECK_COPY_CONSTRUCTOR_P (TREE_OPERAND (conv, 0)) = 1;\n+      return conv;\n     }\n \n   /* [dcl.init.ref]\n@@ -3952,6 +3958,34 @@ enforce_access (tree basetype_path, tree decl)\n   return true;\n }\n \n+/* Initialize a temporary of type TYPE with EXPR.  The FLAGS are a\n+   bitwise or of LOOKUP_* values.  If any errors are warnings are\n+   generated, set *DIAGNOSTIC_FN to \"error\" or \"warning\",\n+   respectively.  If no diagnostics are generated, set *DIAGNOSTIC_FN\n+   to NULL.  */\n+\n+static tree\n+build_temp (tree expr, tree type, int flags, \n+\t    void (**diagnostic_fn)(const char *, ...))\n+{\n+  int savew, savee;\n+\n+  savew = warningcount, savee = errorcount;\n+  expr = build_special_member_call (NULL_TREE, \n+\t\t\t\t    complete_ctor_identifier,\n+\t\t\t\t    build_tree_list (NULL_TREE, expr), \n+\t\t\t\t    TYPE_BINFO (type),\n+\t\t\t\t    flags);\n+  if (warningcount > savew)\n+    *diagnostic_fn = warning;\n+  else if (errorcount > savee)\n+    *diagnostic_fn = error;\n+  else\n+    *diagnostic_fn = NULL;\n+  return expr;\n+}\n+\t    \n+\n /* Perform the conversions in CONVS on the expression EXPR.  FN and\n    ARGNUM are used for diagnostics.  ARGNUM is zero based, -1\n    indicates the `this' argument of a method.  INNER is nonzero when\n@@ -3964,9 +3998,8 @@ static tree\n convert_like_real (tree convs, tree expr, tree fn, int argnum, int inner,\n \t\t   bool issue_conversion_warnings)\n {\n-  int savew, savee;\n-\n   tree totype = TREE_TYPE (convs);\n+  void (*diagnostic_fn)(const char *, ...);\n \n   if (ICS_BAD_FLAG (convs)\n       && TREE_CODE (convs) != USER_CONV\n@@ -4038,35 +4071,24 @@ convert_like_real (tree convs, tree expr, tree fn, int argnum, int inner,\n \tif (IS_AGGR_TYPE (totype)\n \t    && (inner >= 0 || !lvalue_p (expr)))\n \t  {\n-\t    savew = warningcount, savee = errorcount;\n-\t    expr = build_special_member_call\n-\t      (NULL_TREE, complete_ctor_identifier,\n-\t       build_tree_list (NULL_TREE, expr), TYPE_BINFO (totype),\n-\t       /* Core issue 84, now a DR, says that we don't allow UDCs\n-\t\t  for these args (which deliberately breaks copy-init of an\n-\t\t  auto_ptr<Base> from an auto_ptr<Derived>).  */\n-\t       LOOKUP_NORMAL|LOOKUP_ONLYCONVERTING|LOOKUP_NO_CONVERSION);\n-\n-\t    /* Tell the user where this failing constructor call came from.  */\n-\t    if (fn)\n+\t    expr = (build_temp \n+\t\t    (expr, totype, \n+\t\t     /* Core issue 84, now a DR, says that we don't\n+\t\t\tallow UDCs for these args (which deliberately\n+\t\t\tbreaks copy-init of an auto_ptr<Base> from an\n+\t\t\tauto_ptr<Derived>).  */\n+\t\t     LOOKUP_NORMAL|LOOKUP_ONLYCONVERTING|LOOKUP_NO_CONVERSION,\n+\t\t     &diagnostic_fn));\n+\t\t    \n+\t    if (diagnostic_fn)\n \t      {\n-\t\tif (warningcount > savew)\n-\t\t  warning\n+\t\tif (fn)\n+\t\t  diagnostic_fn \n \t\t    (\"  initializing argument %P of `%D' from result of `%D'\",\n \t\t     argnum, fn, convfn);\n-\t\telse if (errorcount > savee)\n-\t\t  error\n-\t\t    (\"  initializing argument %P of `%D' from result of `%D'\",\n-\t\t     argnum, fn, convfn);\n-\t      }\n-\t    else\n-\t      {\n-\t\tif (warningcount > savew)\n-\t\t  warning (\"  initializing temporary from result of `%D'\",\n-\t\t\t      convfn);\n-\t\telse if (errorcount > savee)\n-\t\t  error (\"  initializing temporary from result of `%D'\",\n-\t\t\t    convfn);\n+\t\telse\n+\t\t diagnostic_fn \n+\t\t   (\"  initializing temporary from result of `%D'\",  convfn);\n \t      }\n \t    expr = build_cplus_new (totype, expr);\n \t  }\n@@ -4081,7 +4103,13 @@ convert_like_real (tree convs, tree expr, tree fn, int argnum, int inner,\n       if (inner >= 0\n \t  && TREE_CODE (TREE_TYPE (expr)) != ARRAY_TYPE)\n \texpr = decl_constant_value (expr);\n-      return expr;\n+      if (CHECK_COPY_CONSTRUCTOR_P (convs))\n+\t/* Generate a temporary copy purely to generate the required\n+\t   diagnostics.  */\n+\tbuild_temp (build_dummy_object (totype), totype, \n+\t\t    LOOKUP_NORMAL|LOOKUP_ONLYCONVERTING,\n+\t\t    &diagnostic_fn);\n+\treturn expr;\n     case AMBIG_CONV:\n       /* Call build_user_type_conversion again for the error.  */\n       return build_user_type_conversion\n@@ -4108,30 +4136,28 @@ convert_like_real (tree convs, tree expr, tree fn, int argnum, int inner,\n \t{\n \t  /* We are going to bind a reference directly to a base-class\n \t     subobject of EXPR.  */\n-\t  tree base_ptr = build_pointer_type (totype);\n-\n+\t  if (CHECK_COPY_CONSTRUCTOR_P (convs))\n+\t    /* Generate a temporary copy purely to generate the required\n+\t       diagnostics.  */\n+\t    build_temp (build_dummy_object (TREE_TYPE (expr)),\n+\t\t\tTREE_TYPE (expr),\n+\t\t\tLOOKUP_NORMAL|LOOKUP_ONLYCONVERTING,\n+\t\t\t&diagnostic_fn);\n \t  /* Build an expression for `*((base*) &expr)'.  */\n \t  expr = build_unary_op (ADDR_EXPR, expr, 0);\n-\t  expr = perform_implicit_conversion (base_ptr, expr);\n+\t  expr = perform_implicit_conversion (build_pointer_type (totype), \n+\t\t\t\t\t      expr);\n \t  expr = build_indirect_ref (expr, \"implicit conversion\");\n \t  return expr;\n \t}\n \n       /* Copy-initialization where the cv-unqualified version of the source\n \t type is the same class as, or a derived class of, the class of the\n \t destination [is treated as direct-initialization].  [dcl.init] */\n-      savew = warningcount, savee = errorcount;\n-      expr = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n-\t\t\t\t\tbuild_tree_list (NULL_TREE, expr),\n-\t\t\t\t\tTYPE_BINFO (totype),\n-\t\t\t\t\tLOOKUP_NORMAL|LOOKUP_ONLYCONVERTING);\n-      if (fn)\n-\t{\n-\t  if (warningcount > savew)\n-\t    warning (\"  initializing argument %P of `%D'\", argnum, fn);\n-\t  else if (errorcount > savee)\n-\t    error (\"  initializing argument %P of `%D'\", argnum, fn);\n-\t}\n+      expr = build_temp (expr, totype, LOOKUP_NORMAL|LOOKUP_ONLYCONVERTING,\n+\t\t\t &diagnostic_fn);\n+      if (diagnostic_fn && fn)\n+\tdiagnostic_fn (\"  initializing argument %P of `%D'\", argnum, fn);\n       return build_cplus_new (totype, expr);\n \n     case REF_BIND:\n@@ -6205,6 +6231,14 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup)\n \t remember that the conversion was required.  */\n       if (TREE_CODE (conv) == BASE_CONV && !NEED_TEMPORARY_P (conv))\n \t{\n+\t  void (*diagnostic_fn) (const char *, ...);\n+\t  if (CHECK_COPY_CONSTRUCTOR_P (conv))\n+\t    /* Generate a temporary copy purely to generate the required\n+\t       diagnostics.  */\n+\t    build_temp (build_dummy_object (TREE_TYPE (expr)),\n+\t\t\tTREE_TYPE (expr),\n+\t\t\tLOOKUP_NORMAL|LOOKUP_ONLYCONVERTING,\n+\t\t\t&diagnostic_fn);\n \t  base_conv_type = TREE_TYPE (conv);\n \t  conv = TREE_OPERAND (conv, 0);\n \t}"}, {"sha": "2edc777df8ec52b172ec0b945ed95240ba7371d0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -1257,6 +1257,11 @@ typedef struct cp_parser GTY(())\n      statement.  */\n   bool in_switch_statement_p;\n \n+  /* TRUE if we are parsing a type-id in an expression context.  In\n+     such a situation, both \"type (expr)\" and \"type (type)\" are valid\n+     alternatives.  */\n+  bool in_type_id_in_expr_p;\n+\n   /* If non-NULL, then we are parsing a construct where new type\n      definitions are not permitted.  The string stored here will be\n      issued as an error message if a type is defined.  */\n@@ -2254,6 +2259,9 @@ cp_parser_new (void)\n   /* We are not in a switch statement.  */\n   parser->in_switch_statement_p = false;\n \n+  /* We are not parsing a type-id inside an expression.  */\n+  parser->in_type_id_in_expr_p = false;\n+\n   /* The unparsed function queue is empty.  */\n   parser->unparsed_functions_queues = build_tree_list (NULL_TREE, NULL_TREE);\n \n@@ -3468,6 +3476,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n       {\n \ttree type;\n \tconst char *saved_message;\n+\tbool saved_in_type_id_in_expr_p;\n \n \t/* Consume the `typeid' token.  */\n \tcp_lexer_consume_token (parser->lexer);\n@@ -3481,7 +3490,10 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t   expression.  */\n \tcp_parser_parse_tentatively (parser);\n \t/* Try a type-id first.  */\n+\tsaved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;\n+\tparser->in_type_id_in_expr_p = true;\n \ttype = cp_parser_type_id (parser);\n+\tparser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n \t/* Look for the `)' token.  Otherwise, we can't be sure that\n \t   we're not looking at an expression: consider `typeid (int\n \t   (3))', for example.  */\n@@ -3572,12 +3584,16 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t    && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n \t  {\n \t    tree initializer_list = NULL_TREE;\n+\t    bool saved_in_type_id_in_expr_p;\n \n \t    cp_parser_parse_tentatively (parser);\n \t    /* Consume the `('.  */\n \t    cp_lexer_consume_token (parser->lexer);\n \t    /* Parse the type.  */\n+\t    saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;\n+\t    parser->in_type_id_in_expr_p = true;\n \t    type = cp_parser_type_id (parser);\n+\t    parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n \t    /* Look for the `)'.  */\n \t    cp_parser_require (parser, CPP_CLOSE_PAREN, \"`)'\");\n \t    /* Look for the `{'.  */\n@@ -4713,10 +4729,13 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p)\n \tcp_parser_simulate_error (parser);\n       else\n \t{\n+\t  bool saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;\n+\t  parser->in_type_id_in_expr_p = true;\n \t  /* Look for the type-id.  */\n \t  type = cp_parser_type_id (parser);\n \t  /* Look for the closing `)'.  */\n \t  cp_parser_require (parser, CPP_CLOSE_PAREN, \"`)'\");\n+\t  parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n \t}\n \n       /* Restore the saved message.  */\n@@ -10955,9 +10974,16 @@ cp_parser_parameter_declaration (cp_parser *parser,\n   \n       /* After seeing a decl-specifier-seq, if the next token is not a\n \t \"(\", there is no possibility that the code is a valid\n-\t expression initializer.  Therefore, if parsing tentatively,\n-\t we commit at this point.  */\n+\t expression.  Therefore, if parsing tentatively, we commit at\n+\t this point.  */\n       if (!parser->in_template_argument_list_p\n+\t  /* Having seen:\n+\n+\t       (int((char *)...\n+\n+\t     we cannot be sure whether we are looking at a\n+\t     function-type (taking a */\n+\t  && !parser->in_type_id_in_expr_p\n \t  && cp_parser_parsing_tentatively (parser)\n \t  && !cp_parser_committed_to_tentative_parse (parser)\n \t  && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_PAREN))\n@@ -14473,14 +14499,18 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n     {\n       tree type;\n+      bool saved_in_type_id_in_expr_p;\n \n       /* We can't be sure yet whether we're looking at a type-id or an\n \t expression.  */\n       cp_parser_parse_tentatively (parser);\n       /* Consume the `('.  */\n       cp_lexer_consume_token (parser->lexer);\n       /* Parse the type-id.  */\n+      saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;\n+      parser->in_type_id_in_expr_p = true;\n       type = cp_parser_type_id (parser);\n+      parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n       /* Now, look for the trailing `)'.  */\n       cp_parser_require (parser, CPP_CLOSE_PAREN, \"`)'\");\n       /* If all went well, then we're done.  */"}, {"sha": "e80100144f3a8525b8397dc387aeb3fd9116d326", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -1,3 +1,11 @@\n+2004-01-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/12226\n+\t* g++.dg/init/copy7.c: New test.\n+\n+\tPR c++/13536\n+\t* g++.dg/parse/cast1.C: New test.\n+\n 2004-01-04  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/winline[1-7].c: New tests."}, {"sha": "da447faab8c4218d8816b81ed3b0ec832a76803c", "filename": "gcc/testsuite/g++.dg/init/copy7.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fcopy7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fcopy7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fcopy7.C?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/12226\n+\n+class foo {\n+private:\n+  foo(const foo &);\n+public:\n+  foo();\n+};\n+const foo &bar = foo();\n+\n+class derived : public foo {\n+private:\n+  derived(const derived&);\n+public:\n+  derived();\n+};\n+\n+const foo& baz = derived();"}, {"sha": "04285265da67c95f7476dc6ba6f501b31b5f8db0", "filename": "gcc/testsuite/g++.dg/parse/cast1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcast1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcast1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcast1.C?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/13536\n+// { dg-options \"-w\" }\n+\n+#include <typeinfo>\n+\n+void f() {\n+  (int((char*)0));\n+  sizeof ((int((char*)0)));\n+  typeid ((int((char*)0)));\n+}"}, {"sha": "9ff75067f6ef7e3649f95de27e852d0590d2bf0c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -1,3 +1,20 @@\n+2004-01-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/12226\n+\t* testsuite/27_io/basic_filebuf/4.cc: Remove use of invalid copy\n+\tconstructor.\n+\t* testsuite/27_io/basic_fstream/4.cc: Likewise.\n+\t* testsuite/27_io/basic_ifstream/4.cc: Likewise.\n+\t* testsuite/27_io/basic_ios/4.cc: Likewise.\n+\t* testsuite/27_io/basic_iostream/4.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/4.cc: Likewise.\n+\t* testsuite/27_io/basic_istingstream/4.cc: Likewise.\n+\t* testsuite/27_io/basic_ofstream/4.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/4.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/4.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/5.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/4.cc: Likewise.\n+\n 2004-01-04  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/locale/generic/numeric_members.cc (_M_initialize_numpunct):"}, {"sha": "3bde4817e27e1a511ce0e7e5c2385498f2763ca8", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F4.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -27,7 +27,7 @@ void test01()\n   // Check for required base class.\n   typedef std::filebuf test_type;\n   typedef std::streambuf base_type;\n-  const test_type& obj = test_type();\n+  const test_type& obj = *new test_type();\n   const base_type* base __attribute__((unused)) = &obj;\n }\n "}, {"sha": "58f6f99ba33bcdc2a3fd1fda485789f7565d0fca", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F4.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -28,7 +28,7 @@ void test01()\n   // Check for required base class.\n   typedef std::fstream test_type;\n   typedef std::iostream base_type;\n-  const test_type& obj = test_type();\n+  const test_type& obj = *new test_type();\n   const base_type* base __attribute__((unused)) = &obj;\n }\n "}, {"sha": "3cc66cf7f1913e31fff167babb69556a900c587f", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F4.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -28,7 +28,7 @@ void test01()\n   // Check for required base class.\n   typedef std::ifstream test_type;\n   typedef std::istream base_type;\n-  const test_type& obj = test_type();\n+  const test_type& obj = *new test_type();\n   const base_type* base __attribute__((unused)) = &obj;\n }\n "}, {"sha": "7e70339d87539ec92a0263a81e64aba930692e4a", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2F4.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -30,7 +30,7 @@ void test01()\n   typedef std::ios_base base_type;\n   \n   std::stringbuf buf;\n-  const test_type& obj = test_type(&buf);\n+  const test_type& obj = *new test_type(&buf);\n   const base_type* base __attribute__((unused)) = &obj;\n }\n "}, {"sha": "3c4a4922c580d32295c6f473b18634971d0470c0", "filename": "libstdc++-v3/testsuite/27_io/basic_iostream/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_iostream%2F4.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -31,7 +31,7 @@ void test01()\n   typedef std::ostream base_type2;\n \n   std::stringbuf buf;\n-  const test_type& obj = test_type(&buf);\n+  const test_type& obj = *new test_type(&buf);\n   const base_type1* base1 __attribute__((unused)) = &obj;\n   const base_type2* base2 __attribute__((unused)) = &obj;\n }"}, {"sha": "76aac6bf4f555089e326cc5845d0478787e98641", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F4.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -30,7 +30,7 @@ void test01()\n   typedef std::ios base_type;\n   \n   std::stringbuf buf;\n-  const test_type& obj = test_type(&buf);\n+  const test_type& obj = *new test_type(&buf);\n   const base_type* base __attribute__((unused)) = &obj;\n }\n "}, {"sha": "c2cc29e47394520df5c763b89aae7e05ab23835e", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2F4.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -28,7 +28,7 @@ void test01()\n   // Check for required base class.\n   typedef std::istringstream test_type;\n   typedef std::istream base_type;\n-  const test_type& obj = test_type();\n+  const test_type& obj = *new test_type();\n   const base_type* base __attribute__((unused)) = &obj;\n }\n "}, {"sha": "32843325e53334af331d9d1970da36962c845e9a", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F4.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -28,7 +28,7 @@ void test01()\n   // Check for required base class.\n   typedef std::ofstream test_type;\n   typedef std::ostream base_type;\n-  const test_type& obj = test_type();\n+  const test_type& obj = *new test_type();\n   const base_type* base __attribute__((unused)) = &obj;\n }\n "}, {"sha": "e9affab30de93e75aae394259ab7aec2be918544", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F4.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -30,7 +30,7 @@ void test01()\n   typedef std::ios base_type;\n   \n   std::stringbuf buf;\n-  const test_type& obj = test_type(&buf);\n+  const test_type& obj = *new test_type(&buf);\n   const base_type* base __attribute__((unused)) = &obj;\n }\n "}, {"sha": "f687b5065ede0ad454d5a059bc0660b8bfc7fa4a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2F4.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -28,7 +28,7 @@ void test01()\n   // Check for required base class.\n   typedef std::ostringstream test_type;\n   typedef std::ostream base_type;\n-  const test_type& obj = test_type();\n+  const test_type& obj = *new test_type();\n   const base_type* base __attribute__((unused)) = &obj;\n }\n "}, {"sha": "792171564cf4ca1148f0d507b6b68d1bb1625a04", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F5.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -27,7 +27,7 @@ void test01()\n   // Check for required base class.\n   typedef std::stringbuf test_type;\n   typedef std::streambuf base_type;\n-  const test_type& obj = test_type();\n+  const test_type& obj = *new test_type();\n   const base_type* base __attribute__((unused)) = &obj;\n }\n "}, {"sha": "1f210d78530a3a64de538527b119d003748db152", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F4.cc?ref=4f8163b19cd1e0b4e5d3e10426d08ad1e54cf1ed", "patch": "@@ -28,7 +28,7 @@ void test01()\n   // Check for required base class.\n   typedef std::stringstream test_type;\n   typedef std::iostream base_type;\n-  const test_type& obj = test_type();\n+  const test_type& obj = *new test_type();\n   const base_type* base __attribute__((unused)) = &obj;\n }\n "}]}