{"sha": "4143fd3683c4720401b400cc110f848685d11c09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0M2ZkMzY4M2M0NzIwNDAxYjQwMGNjMTEwZjg0ODY4NWQxMWMwOQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@codesourcery.com", "date": "2010-04-10T12:30:29Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-04-10T12:30:29Z"}, "message": "Makefile.in (web.o): Depend on insn-config.h and $(RECOG_H).\n\n\t* Makefile.in (web.o): Depend on insn-config.h and $(RECOG_H).\n\t* web.c: Include \"insn-config.h\" and \"recog.h\".\n\t(union_match_dups): New function.\n\t(web_main): Call it.\n\t(union_defs): Don't try to recognize match_dups.\n\nFrom-SVN: r158187", "tree": {"sha": "6d2fd7f0a84684d261a4502ba271f2632ef66f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d2fd7f0a84684d261a4502ba271f2632ef66f24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4143fd3683c4720401b400cc110f848685d11c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4143fd3683c4720401b400cc110f848685d11c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4143fd3683c4720401b400cc110f848685d11c09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4143fd3683c4720401b400cc110f848685d11c09/comments", "author": null, "committer": null, "parents": [{"sha": "979740a0897ac0a74dcd1136447f7118de4f3839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979740a0897ac0a74dcd1136447f7118de4f3839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979740a0897ac0a74dcd1136447f7118de4f3839"}], "stats": {"total": 71, "additions": 52, "deletions": 19}, "files": [{"sha": "5b2f0f05fbb693b20e1bd297a314709ce5658bdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4143fd3683c4720401b400cc110f848685d11c09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4143fd3683c4720401b400cc110f848685d11c09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4143fd3683c4720401b400cc110f848685d11c09", "patch": "@@ -2,7 +2,13 @@\n \n \t* ira-costs.c (record_reg_classes): Ignore alternatives that are\n \tnot enabled.\n-\t\n+\n+\t* Makefile.in (web.o): Depend on insn-config.h and $(RECOG_H).\n+\t* web.c: Include \"insn-config.h\" and \"recog.h\".\n+\t(union_match_dups): New function.\n+\t(web_main): Call it.\n+\t(union_defs): Don't try to recognize match_dups.\n+\n 2010-04-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/43707"}, {"sha": "99811e78351065d75f29083d627ecb3083cdaa7c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4143fd3683c4720401b400cc110f848685d11c09/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4143fd3683c4720401b400cc110f848685d11c09/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4143fd3683c4720401b400cc110f848685d11c09", "patch": "@@ -2959,7 +2959,7 @@ fwprop.o : fwprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TM_P_H) $(CFGLOOP_H) $(EMIT_RTL_H) domwalk.h\n web.o : web.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\\n-   $(DF_H) $(OBSTACK_H) $(TIMEVAR_H) $(TREE_PASS_H)\n+   insn-config.h $(RECOG_H) $(DF_H) $(OBSTACK_H) $(TIMEVAR_H) $(TREE_PASS_H)\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) $(REAL_H) insn-config.h $(GGC_H) \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\"}, {"sha": "ff917333f59bf486c997285e495ccd5bd292d642", "filename": "gcc/web.c", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4143fd3683c4720401b400cc110f848685d11c09/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4143fd3683c4720401b400cc110f848685d11c09/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=4143fd3683c4720401b400cc110f848685d11c09", "patch": "@@ -48,6 +48,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"df.h\"\n #include \"function.h\"\n+#include \"insn-config.h\"\n+#include \"recog.h\"\n #include \"timevar.h\"\n #include \"tree-pass.h\"\n \n@@ -85,6 +87,46 @@ unionfind_union (struct web_entry *first, struct web_entry *second)\n   return false;\n }\n \n+/* For INSN, union all defs and uses that are linked by match_dup.\n+   FUN is the function that does the union.  */\n+\n+static void\n+union_match_dups (rtx insn, struct web_entry *def_entry,\n+\t\t  struct web_entry *use_entry,\n+\t\t  bool (*fun) (struct web_entry *, struct web_entry *))\n+{\n+  struct df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n+  df_ref *use_link = DF_INSN_INFO_USES (insn_info);\n+  df_ref *def_link = DF_INSN_INFO_DEFS (insn_info);\n+  int i;\n+\n+  extract_insn (insn);\n+\n+  for (i = 0; i < recog_data.n_dups; i++)\n+    {\n+      int op = recog_data.dup_num[i];\n+      enum op_type type = recog_data.operand_type[op];\n+      df_ref *ref, *dupref;\n+      struct web_entry *entry;\n+\n+      for (dupref = use_link; *dupref; dupref++)\n+\tif (DF_REF_LOC (*dupref) == recog_data.dup_loc[i])\n+\t  break;\n+\n+      if (*dupref == NULL\n+\t  || DF_REF_REGNO (*dupref) < FIRST_PSEUDO_REGISTER)\n+\tcontinue;\n+\n+      ref = type == OP_IN ? use_link : def_link;\n+      entry = type == OP_IN ? use_entry : def_entry;\n+      for (; *ref; ref++)\n+\tif (DF_REF_LOC (*ref) == recog_data.operand_loc[op])\n+\t  break;\n+\n+      (*fun) (use_entry + DF_REF_ID (*dupref), entry + DF_REF_ID (*ref));\n+    }\n+}\n+\n /* For each use, all possible defs reaching it must come in the same\n    register, union them.\n    FUN is the function that does the union.\n@@ -101,42 +143,26 @@ union_defs (df_ref use, struct web_entry *def_entry,\n {\n   struct df_insn_info *insn_info = DF_REF_INSN_INFO (use);\n   struct df_link *link = DF_REF_CHAIN (use);\n-  df_ref *use_link;\n   df_ref *eq_use_link;\n   df_ref *def_link;\n   rtx set;\n \n   if (insn_info)\n     {\n       rtx insn = insn_info->insn;\n-      use_link = DF_INSN_INFO_USES (insn_info);\n       eq_use_link = DF_INSN_INFO_EQ_USES (insn_info);\n       def_link = DF_INSN_INFO_DEFS (insn_info);\n       set = single_set (insn);\n     }\n   else\n     {\n       /* An artificial use.  It links up with nothing.  */\n-      use_link = NULL;\n       eq_use_link = NULL;\n       def_link = NULL;\n       set = NULL;\n     }\n \n-  /* Some instructions may use match_dup for their operands.  In case the\n-     operands are dead, we will assign them different pseudos, creating\n-     invalid instructions, so union all uses of the same operand for each\n-     insn.  */\n-\n-  if (use_link)\n-    while (*use_link)\n-      {\n-\tif (use != *use_link\n-\t    && DF_REF_REAL_REG (use) == DF_REF_REAL_REG (*use_link))\n-\t  (*fun) (use_entry + DF_REF_ID (use),\n-\t\t  use_entry + DF_REF_ID (*use_link));\n-\tuse_link++;\n-      }\n+  /* Union all occurrences of the same register in reg notes.  */\n \n   if (eq_use_link)\n     while (*eq_use_link)\n@@ -329,6 +355,7 @@ web_main (void)\n       if (NONDEBUG_INSN_P (insn))\n \t{\n \t  df_ref *use_rec;\n+\t  union_match_dups (insn, def_entry, use_entry, unionfind_union);\n \t  for (use_rec = DF_INSN_UID_USES (uid); *use_rec; use_rec++)\n \t    {\n \t      df_ref use = *use_rec;"}]}