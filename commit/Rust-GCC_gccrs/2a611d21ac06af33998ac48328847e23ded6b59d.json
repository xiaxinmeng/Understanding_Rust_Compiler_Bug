{"sha": "2a611d21ac06af33998ac48328847e23ded6b59d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE2MTFkMjFhYzA2YWYzMzk5OGFjNDgzMjg4NDdlMjNkZWQ2YjU5ZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.columbia.edu", "date": "1999-04-16T19:52:44Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-04-16T19:52:44Z"}, "message": "system.h: Always prototype abort.\n\n1999-04-16 22:44 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n\t* system.h: Always prototype abort.  Prototype fatal.  Define\n\tabort to call fatal, not fprintf/exit.  Define a stub macro\n\tfor trim_filename.\n\t* toplev.c: Define DIR_SEPARATOR.  (trim_filename): New\n\tfunction.\n\t* toplev.h: Prototype trim_filename, and #undef system.h's stub.\n\t* gcc.c, genattr.c, genattrtab.c, gencodes.c, genconfig.c,\n\tgenemit.c, genextract.c, genflags.c, genopinit.c, genoutput.c,\n\tgenpeep.c, genrecog.c: Make fatal non-static.\n\t* gcov.c, gengenrtl.c, protoize.c: #undef abort after\n\tincluding system.h.\n\t* config/i386/dgux.h, config/m68k/xm-amix.h: Remove stale code\n\trelating to abort.\n\nFrom-SVN: r26511", "tree": {"sha": "06e7f5db783744cf670101812a22a46a3d9482ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06e7f5db783744cf670101812a22a46a3d9482ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a611d21ac06af33998ac48328847e23ded6b59d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a611d21ac06af33998ac48328847e23ded6b59d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a611d21ac06af33998ac48328847e23ded6b59d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a611d21ac06af33998ac48328847e23ded6b59d/comments", "author": null, "committer": null, "parents": [{"sha": "bf69fb7efcf26ee27067c3225c8ce705ee357c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf69fb7efcf26ee27067c3225c8ce705ee357c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf69fb7efcf26ee27067c3225c8ce705ee357c5d"}], "stats": {"total": 172, "additions": 89, "deletions": 83}, "files": [{"sha": "d1b12a80fad00461cb8fe4aca8652de2dda95611", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -1,3 +1,21 @@\n+1999-04-16 22:44 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* system.h: Always prototype abort.  Prototype fatal.  Define\n+\tabort to call fatal, not fprintf/exit.  Define a stub macro\n+\tfor trim_filename.\n+\t* toplev.c: Define DIR_SEPARATOR.  (trim_filename): New\n+\tfunction.\n+\t* toplev.h: Prototype trim_filename, and #undef system.h's stub.\n+\n+\t* gcc.c, genattr.c, genattrtab.c, gencodes.c, genconfig.c,\n+\tgenemit.c, genextract.c, genflags.c, genopinit.c, genoutput.c,\n+\tgenpeep.c, genrecog.c: Make fatal non-static.\n+\t* gcov.c, gengenrtl.c, protoize.c: #undef abort after\n+\tincluding system.h.\n+\n+\t* config/i386/dgux.h, config/m68k/xm-amix.h: Remove stale code\n+\trelating to abort.\n+\n Sat Apr 17 11:25:44 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.md (mulqf3_clrqf_clobber, mulqi3_clrqi_clobber): "}, {"sha": "9e41d6512b86a53a3807c315c2178d9f67ecd4f3", "filename": "gcc/config/i386/dgux.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fconfig%2Fi386%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fconfig%2Fi386%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.h?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -124,7 +124,6 @@ Boston, MA 02111-1307, USA.  */\n   do {\t\t\t\t\t\t\t\\\n     extern int flag_signed_bitfields;\t\t\t\\\n     flag_signed_bitfields = 0;\t\t\t\t\\\n-    abort_helper ();\t\t\t\t\t\\\n     optimization_options (LEVEL,SIZE);\t\t\t\\\n   } while (0)\n \n@@ -220,23 +219,6 @@ Boston, MA 02111-1307, USA.  */\n \n #endif /* CROSS_COMPILE */\n \n-#if !defined (no_abort) || defined (CRT_BEGIN) || defined (CRT_END)\n-#undef abort\n-\n-char insn; int insn_; char * file_; int line_;\n-#define abort()\t\t\t\\\n-  (insn_ = (int) insn,\t\t\\\n-   file_ = __FILE__,\t\t\\\n-   line_ = __LINE__,\t\t\\\n-   fancy_abort ())\n-#define abort_helper()\t\t\\\n-  do {\t\t\t\t\\\n-    extern void abort_aux ();\t\\\n-    atexit (abort_aux);\t\t\\\n-  } while (0)\n-#define _abort_aux\n-#endif /* no abort */\n-\n /* The maximum alignment which the object file format can support.\n    page alignment would seem to be enough */\n #undef MAX_OFILE_ALIGNMENT"}, {"sha": "72d534fe6191fa5382d7274b65d0d3e71ad1c1db", "filename": "gcc/config/m68k/xm-amix.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fconfig%2Fm68k%2Fxm-amix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fconfig%2Fm68k%2Fxm-amix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fxm-amix.h?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -32,14 +32,3 @@ Boston, MA 02111-1307, USA.  */\n #if defined (__GNUC__) && __GNUC__ == 1\n #define alloca __builtin_alloca\n #endif\n-\n-#if 0 /* I don't want individual ports to be inconsistent about this.\n-\t I regard fancy_abort as a half-solution and not the right way\n-\t to do things. --rms.  */\n-/* The m88k and mips ports make use of fancy_abort to give possibly helpful\n-   abort information rather than just dumping core.  They do it in their\n-   tm-* files.  It seems more logical that this is a characteristic of\n-   the host machine and not the target machine, so we do it here. */\n-\n-#define abort fancy_abort\t/* give possibly helpful abort info */\n-#endif"}, {"sha": "cece9c57475f47c786adb988bce09d9ff7403baf", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -204,8 +204,6 @@ static void pfatal_with_name\tPROTO((const char *)) ATTRIBUTE_NORETURN;\n static void perror_with_name\tPROTO((const char *));\n static void pfatal_pexecute\tPROTO((const char *, const char *))\n   ATTRIBUTE_NORETURN;\n-static void fatal\t\tPVPROTO((const char *, ...))\n-  ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1;\n static void error\t\tPVPROTO((const char *, ...))\n   ATTRIBUTE_PRINTF_1;\n static void notice\t\tPVPROTO((const char *, ...))\n@@ -5324,7 +5322,7 @@ fancy_abort ()\n \f\n /* Output an error message and exit */\n \n-static void\n+void\n fatal VPROTO((const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "629aa0239853a33d9a28497cad58ccd7b5749bce", "filename": "gcc/gcov.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -45,6 +45,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"intl.h\"\n+#undef abort\n \n #include \"gcov-io.h\"\n "}, {"sha": "55d6fb1996d5607aafaf74e629c0aec8dc41c309", "filename": "gcc/genattr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -31,7 +31,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((const char *, ...))\n+void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -224,7 +224,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-static void\n+void\n fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "fcb50c13a8290119749a167fffce8b1983e597a5", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -119,7 +119,7 @@ struct obstack *temp_obstack = &obstack2;\n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n char **insn_name_ptr = 0;\n \n-static void fatal PVPROTO ((const char *, ...))\n+void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -5904,7 +5904,7 @@ copy_rtx_unchanging (orig)\n #endif\n }\n \n-static void\n+void\n fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "2658216760e46bc45340f91fe8ea60bd9f850049", "filename": "gcc/gencodes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -33,7 +33,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((const char *, ...))\n+void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -82,7 +82,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-static void\n+void\n fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "9f79e5882e11dab8ced826b3726cd97b86b1f1d4", "filename": "gcc/genconfig.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -49,7 +49,7 @@ static int max_insns_per_split = 1;\n static int clobbers_seen_this_insn;\n static int dup_operands_seen_this_insn;\n \n-static void fatal PVPROTO ((const char *, ...))\n+void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -271,7 +271,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-static void\n+void\n fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "c7daa1dfd9954944a0c9a3f57b7cf32e22eb83c5", "filename": "gcc/genemit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -30,7 +30,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((const char *, ...))\n+void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -705,7 +705,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-static void\n+void\n fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "24d3d511975da3d49d5a3f1d411b58a3f91f90e1", "filename": "gcc/genextract.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -98,7 +98,7 @@ static struct code_ptr *peepholes;\n static void gen_insn PROTO ((rtx));\n static void walk_rtx PROTO ((rtx, const char *));\n static void print_path PROTO ((char *));\n-static void fatal PVPROTO ((const char *, ...))\n+void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO ((void)) ATTRIBUTE_NORETURN;\n \f\n@@ -370,7 +370,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-static void\n+void\n fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "636aafeed57320801685c8433e7d13e844f1ee9b", "filename": "gcc/genflags.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -33,7 +33,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((const char *, ...))\n+void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -202,7 +202,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-static void\n+void\n fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "bf98a716770d3293b5ab5fd6d4b7d1298dfce012", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -21,6 +21,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"hconfig.h\"\n #include \"system.h\"\n+#undef abort\n \n #define NO_GENRTL_H\n #include \"rtl.h\""}, {"sha": "2cd67b31866e17bc74094d5bff5f2285aff3fca1", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -30,7 +30,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((const char *, ...))\n+void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -307,7 +307,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-static void\n+void\n fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "2956ec6594ce15dbad6d76e04da497bc85c0b2c8", "filename": "gcc/genoutput.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -107,7 +107,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static void fatal PVPROTO ((const char *, ...))\n+void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n static void error PVPROTO ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n@@ -928,7 +928,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-static void\n+void\n fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "65ba963c056e6737760161ac3bc12a60f4e43b3b", "filename": "gcc/genpeep.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -46,7 +46,7 @@ struct link\n   int vecelt;\n };\n \n-static void fatal PVPROTO ((const char *, ...))\n+void fatal PVPROTO ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort PROTO((void)) ATTRIBUTE_NORETURN;\n \n@@ -410,7 +410,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-static void\n+void\n fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "546f922cccb504c2be202fe30212c64bcdbf2576", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -193,7 +193,7 @@ static void write_tree\t\tPROTO((struct decision *, const char *,\n \t\t\t\t       struct decision *, int,\n \t\t\t\t       enum routine_type));\n static void change_state\tPROTO((const char *, const char *, int));\n-static void fatal\t\tPVPROTO((const char *, ...))\n+void fatal\t\tPVPROTO((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void fancy_abort\t\tPROTO((void)) ATTRIBUTE_NORETURN;\n \f\n@@ -1697,7 +1697,7 @@ xmalloc (size)\n   return val;\n }\n \n-static void\n+void\n fatal VPROTO ((const char *format, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "7e9205cb1a821c4a305e30db50ed838816f94ab3", "filename": "gcc/protoize.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -59,6 +59,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"system.h\"\n #include \"intl.h\"\n+#undef abort\n \n #if ! defined (_WIN32) || defined (__CYGWIN__) || defined (_UWIN)\n #if defined(POSIX) || defined(CONCURRENT)"}, {"sha": "3ec73a6cab1fe7d4d062e8bfd4a4278b798bd292", "filename": "gcc/system.h", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -378,40 +378,27 @@ extern int setrlimit ();\n #endif\n \n /* Redefine abort to report an internal error w/o coredump, and reporting the\n-   location of the error in the source file.  */\n-#ifndef abort\n-#ifndef __STDC__\n-#ifndef __GNUC__\n-#ifndef USE_SYSTEM_ABORT\n-#define USE_SYSTEM_ABORT\n-#endif /* !USE_SYSTEM_ABORT */\n-#endif /* !__GNUC__ */\n-#endif /* !__STDC__ */\n-\n-#ifdef USE_SYSTEM_ABORT\n-# ifdef NEED_DECLARATION_ABORT\n+   location of the error in the source file.\n+   Some files undefine abort again, so we must prototype the real thing\n+   for their sake.  */\n+#ifdef NEED_DECLARATION_ABORT\n extern void abort ();\n-# endif\n-#else\n-#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)\n-#define abort()\t\t\t\t\t\t\t\t\\\n-(fprintf (stderr,\t\t\t\t\t\t\t\\\n-\t  \"%s:%d: Internal compiler error\\n\", __FILE__, __LINE__),\t\\\n- exit (FATAL_EXIT_CODE))\n+#endif\n+extern void fatal PVPROTO((const char *, ...)) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n \n+#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)\n+#define abort() fatal (\"Internal compiler error at %s:%d\\n\", \\\n+\t\t       trim_filename (__FILE__), __LINE__)\n #else\n-#define abort()\t\t\t\t\t\t\t\t\\\n-(fprintf (stderr,\t\t\t\t\t\t\t\\\n-\t  \"%s:%d: Internal compiler error in function %s\\n\"             \\\n-\t  \"Please submit a full bug report to `egcs-bugs@egcs.cygnus.com'.\\n\"  \\\n-\t  \"See <URL:http://egcs.cygnus.com/faq.html#bugreport> for details.\\n\", \\\n-\t  __FILE__, __LINE__, __PRETTY_FUNCTION__),\t\t\t\\\n- exit (FATAL_EXIT_CODE))\n-\n+#define abort() fatal (\"Internal compiler error in `%s', at %s:%d\\n\"\t\\\n+  \"Please submit a full bug report to `egcs-bugs@egcs.cygnus.com'.\\n\"\t\\\n+  \"See <URL:http://egcs.cygnus.com/faq.html#bugreport> for details.\", \\\n+  __PRETTY_FUNCTION__, trim_filename (__FILE__), __LINE__)\n #endif /* recent gcc */\n-#endif /* USE_SYSTEM_ABORT */\n-#endif /* !abort */\n \n+/* trim_filename is in toplev.c.  Define a stub macro for files that\n+   don't link toplev.c.  toplev.h will reset it to the real version.  */\n+#define trim_filename(x) (x)\n \n /* Define a STRINGIFY macro that's right for ANSI or traditional C.\n    HAVE_CPP_STRINGIFY only refers to the stage1 compiler.  Assume that"}, {"sha": "482b956795cfea210c3cd5c3acc6a630f57ccbf3", "filename": "gcc/toplev.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -132,6 +132,10 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #define PREFERRED_DEBUGGING_TYPE NO_DEBUG\n #endif\n \n+#ifndef DIR_SEPARATOR\n+#define DIR_SEPARATOR '/'\n+#endif\n+\n extern int rtx_equal_function_value_matters;\n \n #if ! (defined (VMS) || defined (OS2))\n@@ -2221,6 +2225,28 @@ sorry VPROTO((const char *msgid, ...))\n   va_end (ap);\n }\n \f\n+/* Given a partial pathname as input, return another pathname that shares\n+   no elements with the pathname of __FILE__.  This is used by abort() to\n+   print `Internal compiler error in expr.c' instead of `Internal compiler\n+   error in ../../egcs/gcc/expr.c'.  */\n+const char *\n+trim_filename (name)\n+     const char *name;\n+{\n+  static const char *this_file = __FILE__;\n+  const char *p = name, *q = this_file;\n+\n+  while (*p == *q && *p != 0 && *q != 0) p++, q++;\n+  while (p > name && p[-1] != DIR_SEPARATOR\n+#ifdef DIR_SEPARATOR_2\n+\t && p[-1] != DIR_SEPARATOR_2\n+#endif\n+\t )\n+    p--;\n+\n+  return p;\n+}\n+\n /* More 'friendly' abort that prints the line and file.\n    config.h can #define abort fancy_abort if you like that sort of thing.\n "}, {"sha": "d933a7e803eaa1d5b47a0dc0ad01bd8818b6fc68", "filename": "gcc/toplev.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a611d21ac06af33998ac48328847e23ded6b59d/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=2a611d21ac06af33998ac48328847e23ded6b59d", "patch": "@@ -111,4 +111,7 @@ extern void fnotice\t\t\tPROTO ((FILE *, const char *, ...))\n   ATTRIBUTE_PRINTF_2;\n #endif\n \n+#undef trim_filename\n+extern const char *trim_filename\tPROTO ((const char *));\n+\n #endif /* __GCC_TOPLEV_H */"}]}