{"sha": "3717616ba7118e1ff8166024e819bba5cd3fca0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcxNzYxNmJhNzExOGUxZmY4MTY2MDI0ZTgxOWJiYTVjZDNmY2EwYw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-08-03T00:30:04Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-08-03T00:30:04Z"}, "message": "[RS6000] Delete duplicate code\n\nThis removes the duplicate (TARGET_POWERPC64 && size == 16) block.\n\n\t* config/rs6000/rs6000.c (rs6000_secondary_reload_direct_move):\n\tDelete duplicated code.\n\nFrom-SVN: r239009", "tree": {"sha": "31559ee5ba1d145216e7285eb72c43cb372af643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31559ee5ba1d145216e7285eb72c43cb372af643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3717616ba7118e1ff8166024e819bba5cd3fca0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3717616ba7118e1ff8166024e819bba5cd3fca0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3717616ba7118e1ff8166024e819bba5cd3fca0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3717616ba7118e1ff8166024e819bba5cd3fca0c/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "749f7c4466054c1a9c6a37e324abcd21b2fdbf9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749f7c4466054c1a9c6a37e324abcd21b2fdbf9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749f7c4466054c1a9c6a37e324abcd21b2fdbf9d"}], "stats": {"total": 63, "additions": 22, "deletions": 41}, "files": [{"sha": "fc1fe6af9598c86b9df5e7093043f16ee25c3e24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717616ba7118e1ff8166024e819bba5cd3fca0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717616ba7118e1ff8166024e819bba5cd3fca0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3717616ba7118e1ff8166024e819bba5cd3fca0c", "patch": "@@ -1,3 +1,8 @@\n+2016-08-03  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_secondary_reload_direct_move):\n+\tDelete duplicated code.\n+\n 2016-08-02  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR middle-end/72778"}, {"sha": "5b9aae2768112246390412a07ac065ae780870da", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 41, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717616ba7118e1ff8166024e819bba5cd3fca0c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717616ba7118e1ff8166024e819bba5cd3fca0c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3717616ba7118e1ff8166024e819bba5cd3fca0c", "patch": "@@ -19599,50 +19599,11 @@ rs6000_secondary_reload_direct_move (enum rs6000_reg_type to_type,\n   int cost = 0;\n   int size = GET_MODE_SIZE (mode);\n \n-  if (TARGET_POWERPC64)\n-    {\n-      if (size == 16)\n-\t{\n-\t  /* Handle moving 128-bit values from GPRs to VSX point registers on\n-\t     ISA 2.07 (power8, power9) when running in 64-bit mode using\n-\t     XXPERMDI to glue the two 64-bit values back together.  */\n-\t  if (to_type == VSX_REG_TYPE && from_type == GPR_REG_TYPE)\n-\t    {\n-\t      cost = 3;\t\t\t/* 2 mtvsrd's, 1 xxpermdi.  */\n-\t      icode = reg_addr[mode].reload_vsx_gpr;\n-\t    }\n-\n-\t  /* Handle moving 128-bit values from VSX point registers to GPRs on\n-\t     ISA 2.07 when running in 64-bit mode using XXPERMDI to get access to the\n-\t     bottom 64-bit value.  */\n-\t  else if (to_type == GPR_REG_TYPE && from_type == VSX_REG_TYPE)\n-\t    {\n-\t      cost = 3;\t\t\t/* 2 mfvsrd's, 1 xxpermdi.  */\n-\t      icode = reg_addr[mode].reload_gpr_vsx;\n-\t    }\n-\t}\n-\n-      else if (mode == SFmode)\n-\t{\n-\t  if (to_type == GPR_REG_TYPE && from_type == VSX_REG_TYPE)\n-\t    {\n-\t      cost = 3;\t\t\t/* xscvdpspn, mfvsrd, and.  */\n-\t      icode = reg_addr[mode].reload_gpr_vsx;\n-\t    }\n-\n-\t  else if (to_type == VSX_REG_TYPE && from_type == GPR_REG_TYPE)\n-\t    {\n-\t      cost = 2;\t\t\t/* mtvsrz, xscvspdpn.  */\n-\t      icode = reg_addr[mode].reload_vsx_gpr;\n-\t    }\n-\t}\n-    }\n-\n   if (TARGET_POWERPC64 && size == 16)\n     {\n       /* Handle moving 128-bit values from GPRs to VSX point registers on\n-\t ISA 2.07 when running in 64-bit mode using XXPERMDI to glue the two\n-\t 64-bit values back together.  */\n+\t ISA 2.07 (power8, power9) when running in 64-bit mode using\n+\t XXPERMDI to glue the two 64-bit values back together.  */\n       if (to_type == VSX_REG_TYPE && from_type == GPR_REG_TYPE)\n \t{\n \t  cost = 3;\t\t\t/* 2 mtvsrd's, 1 xxpermdi.  */\n@@ -19659,6 +19620,21 @@ rs6000_secondary_reload_direct_move (enum rs6000_reg_type to_type,\n \t}\n     }\n \n+  else if (TARGET_POWERPC64 && mode == SFmode)\n+    {\n+      if (to_type == GPR_REG_TYPE && from_type == VSX_REG_TYPE)\n+\t{\n+\t  cost = 3;\t\t\t/* xscvdpspn, mfvsrd, and.  */\n+\t  icode = reg_addr[mode].reload_gpr_vsx;\n+\t}\n+\n+      else if (to_type == VSX_REG_TYPE && from_type == GPR_REG_TYPE)\n+\t{\n+\t  cost = 2;\t\t\t/* mtvsrz, xscvspdpn.  */\n+\t  icode = reg_addr[mode].reload_vsx_gpr;\n+\t}\n+    }\n+\n   else if (!TARGET_POWERPC64 && size == 8)\n     {\n       /* Handle moving 64-bit values from GPRs to floating point registers on"}]}