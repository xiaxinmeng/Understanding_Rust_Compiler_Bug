{"sha": "e3947d809d75c6bc47e600ce490c238006c2de2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM5NDdkODA5ZDc1YzZiYzQ3ZTYwMGNlNDkwYzIzODAwNmMyZGUyYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-06-20T08:06:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-06-20T08:06:27Z"}, "message": "[2/n] PR85694: Attach a DEF_SEQ only to the original statement\n\nA pattern's PATTERN_DEF_SEQ was attached to both the original statement\nand the main pattern statement, which made it harder to update later.\nThis patch attaches it to just the original statement.  In practice,\nanything that cared had ready access to both.\n\n2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (_stmt_vec_info): Note above pattern_def_seq\n\tthat the sequence is attached to the original statement rather\n\tthan the pattern statement.\n\t* tree-vect-loop.c (vect_determine_vf_for_stmt): Take the\n\tPATTERN_DEF_SEQ from the original statement rather than\n\tthe main pattern statement.\n\t* tree-vect-stmts.c (free_stmt_vec_info): Likewise.\n\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Likewise.\n\t(vect_mark_pattern_stmts): Don't copy the PATTERN_DEF_SEQ.\n\nFrom-SVN: r261785", "tree": {"sha": "556707591b83d585de8ceef3746d12aaea8c5132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/556707591b83d585de8ceef3746d12aaea8c5132"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3947d809d75c6bc47e600ce490c238006c2de2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3947d809d75c6bc47e600ce490c238006c2de2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3947d809d75c6bc47e600ce490c238006c2de2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3947d809d75c6bc47e600ce490c238006c2de2b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d54a098e48987e7368ff190b703efd72aba9e6d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54a098e48987e7368ff190b703efd72aba9e6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54a098e48987e7368ff190b703efd72aba9e6d9"}], "stats": {"total": 90, "additions": 48, "deletions": 42}, "files": [{"sha": "09ab7d8c3a4bc86d98b3ba84ea410793a77b1e89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3947d809d75c6bc47e600ce490c238006c2de2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3947d809d75c6bc47e600ce490c238006c2de2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3947d809d75c6bc47e600ce490c238006c2de2b", "patch": "@@ -1,3 +1,15 @@\n+2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (_stmt_vec_info): Note above pattern_def_seq\n+\tthat the sequence is attached to the original statement rather\n+\tthan the pattern statement.\n+\t* tree-vect-loop.c (vect_determine_vf_for_stmt): Take the\n+\tPATTERN_DEF_SEQ from the original statement rather than\n+\tthe main pattern statement.\n+\t* tree-vect-stmts.c (free_stmt_vec_info): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Likewise.\n+\t(vect_mark_pattern_stmts): Don't copy the PATTERN_DEF_SEQ.\n+\n 2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-stmts.c (vect_analyze_stmt): Move the handling of pattern"}, {"sha": "5a73a97d6ee16d774e9ff52de94cd9e5bd595818", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3947d809d75c6bc47e600ce490c238006c2de2b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3947d809d75c6bc47e600ce490c238006c2de2b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=e3947d809d75c6bc47e600ce490c238006c2de2b", "patch": "@@ -224,10 +224,10 @@ vect_determine_vf_for_stmt (stmt_vec_info stmt_info, poly_uint64 *vf,\n   if (STMT_VINFO_IN_PATTERN_P (stmt_info)\n       && STMT_VINFO_RELATED_STMT (stmt_info))\n     {\n+      gimple *pattern_def_seq = STMT_VINFO_PATTERN_DEF_SEQ (stmt_info);\n       stmt_info = vinfo_for_stmt (STMT_VINFO_RELATED_STMT (stmt_info));\n \n       /* If a pattern statement has def stmts, analyze them too.  */\n-      gimple *pattern_def_seq = STMT_VINFO_PATTERN_DEF_SEQ (stmt_info);\n       for (gimple_stmt_iterator si = gsi_start (pattern_def_seq);\n \t   !gsi_end_p (si); gsi_next (&si))\n \t{\n@@ -2247,10 +2247,10 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n \t  STMT_SLP_TYPE (stmt_info) = loop_vect;\n \t  if (STMT_VINFO_IN_PATTERN_P (stmt_info))\n \t    {\n+\t      gimple *pattern_def_seq = STMT_VINFO_PATTERN_DEF_SEQ (stmt_info);\n \t      stmt_info = vinfo_for_stmt (STMT_VINFO_RELATED_STMT (stmt_info));\n \t      STMT_SLP_TYPE (stmt_info) = loop_vect;\n-\t      for (gimple_stmt_iterator pi\n-\t\t     = gsi_start (STMT_VINFO_PATTERN_DEF_SEQ (stmt_info));\n+\t      for (gimple_stmt_iterator pi = gsi_start (pattern_def_seq);\n \t\t   !gsi_end_p (pi); gsi_next (&pi))\n \t\t{\n \t\t  gimple *pstmt = gsi_stmt (pi);"}, {"sha": "5d0543f05d09aae2702119562ee7b2e8ff2013cd", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3947d809d75c6bc47e600ce490c238006c2de2b/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3947d809d75c6bc47e600ce490c238006c2de2b/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=e3947d809d75c6bc47e600ce490c238006c2de2b", "patch": "@@ -405,13 +405,13 @@ vect_recog_dot_prod_pattern (vec<gimple *> *stmts, tree *type_in,\n       stmt = STMT_VINFO_RELATED_STMT (stmt_vinfo);\n       if (gimple_assign_rhs_code (stmt) != WIDEN_MULT_EXPR)\n         return NULL;\n+      STMT_VINFO_PATTERN_DEF_SEQ (vinfo_for_stmt (last_stmt))\n+\t= STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo);\n       stmt_vinfo = vinfo_for_stmt (stmt);\n       gcc_assert (stmt_vinfo);\n       gcc_assert (STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_internal_def);\n       oprnd00 = gimple_assign_rhs1 (stmt);\n       oprnd01 = gimple_assign_rhs2 (stmt);\n-      STMT_VINFO_PATTERN_DEF_SEQ (vinfo_for_stmt (last_stmt))\n-\t  = STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo);\n     }\n   else\n     {\n@@ -4433,28 +4433,23 @@ vect_mark_pattern_stmts (gimple *orig_stmt, gimple *pattern_stmt,\n   STMT_VINFO_VECTYPE (pattern_stmt_info) = pattern_vectype;\n   STMT_VINFO_IN_PATTERN_P (orig_stmt_info) = true;\n   STMT_VINFO_RELATED_STMT (orig_stmt_info) = pattern_stmt;\n-  STMT_VINFO_PATTERN_DEF_SEQ (pattern_stmt_info)\n-    = STMT_VINFO_PATTERN_DEF_SEQ (orig_stmt_info);\n-  if (STMT_VINFO_PATTERN_DEF_SEQ (pattern_stmt_info))\n-    {\n-      gimple_stmt_iterator si;\n-      for (si = gsi_start (STMT_VINFO_PATTERN_DEF_SEQ (pattern_stmt_info));\n-\t   !gsi_end_p (si); gsi_next (&si))\n-\t{\n-\t  def_stmt = gsi_stmt (si);\n-\t  def_stmt_info = vinfo_for_stmt (def_stmt);\n-\t  if (def_stmt_info == NULL)\n-\t    {\n-\t      def_stmt_info = new_stmt_vec_info (def_stmt, vinfo);\n-\t      set_vinfo_for_stmt (def_stmt, def_stmt_info);\n-\t    }\n-\t  gimple_set_bb (def_stmt, gimple_bb (orig_stmt));\n-\t  STMT_VINFO_RELATED_STMT (def_stmt_info) = orig_stmt;\n-\t  STMT_VINFO_DEF_TYPE (def_stmt_info) = vect_internal_def;\n-\t  if (STMT_VINFO_VECTYPE (def_stmt_info) == NULL_TREE)\n-\t    STMT_VINFO_VECTYPE (def_stmt_info) = pattern_vectype;\n-\t}\n-    }\n+  if (gimple *def_seq = STMT_VINFO_PATTERN_DEF_SEQ (orig_stmt_info))\n+    for (gimple_stmt_iterator si = gsi_start (def_seq);\n+\t !gsi_end_p (si); gsi_next (&si))\n+      {\n+\tdef_stmt = gsi_stmt (si);\n+\tdef_stmt_info = vinfo_for_stmt (def_stmt);\n+\tif (def_stmt_info == NULL)\n+\t  {\n+\t    def_stmt_info = new_stmt_vec_info (def_stmt, vinfo);\n+\t    set_vinfo_for_stmt (def_stmt, def_stmt_info);\n+\t  }\n+\tgimple_set_bb (def_stmt, gimple_bb (orig_stmt));\n+\tSTMT_VINFO_RELATED_STMT (def_stmt_info) = orig_stmt;\n+\tSTMT_VINFO_DEF_TYPE (def_stmt_info) = vect_internal_def;\n+\tif (STMT_VINFO_VECTYPE (def_stmt_info) == NULL_TREE)\n+\t  STMT_VINFO_VECTYPE (def_stmt_info) = pattern_vectype;\n+      }\n }\n \n /* Function vect_pattern_recog_1"}, {"sha": "af58d918cdbb666cee4b0fd82ac37dc718210945", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3947d809d75c6bc47e600ce490c238006c2de2b/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3947d809d75c6bc47e600ce490c238006c2de2b/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e3947d809d75c6bc47e600ce490c238006c2de2b", "patch": "@@ -9876,29 +9876,26 @@ free_stmt_vec_info (gimple *stmt)\n      too.  */\n   if (STMT_VINFO_IN_PATTERN_P (stmt_info))\n     {\n+      if (gimple_seq seq = STMT_VINFO_PATTERN_DEF_SEQ (stmt_info))\n+\tfor (gimple_stmt_iterator si = gsi_start (seq);\n+\t     !gsi_end_p (si); gsi_next (&si))\n+\t  {\n+\t    gimple *seq_stmt = gsi_stmt (si);\n+\t    gimple_set_bb (seq_stmt, NULL);\n+\t    tree lhs = gimple_get_lhs (seq_stmt);\n+\t    if (lhs && TREE_CODE (lhs) == SSA_NAME)\n+\t      release_ssa_name (lhs);\n+\t    free_stmt_vec_info (seq_stmt);\n+\t  }\n       stmt_vec_info patt_info\n \t= vinfo_for_stmt (STMT_VINFO_RELATED_STMT (stmt_info));\n       if (patt_info)\n \t{\n-\t  gimple_seq seq = STMT_VINFO_PATTERN_DEF_SEQ (patt_info);\n \t  gimple *patt_stmt = STMT_VINFO_STMT (patt_info);\n \t  gimple_set_bb (patt_stmt, NULL);\n \t  tree lhs = gimple_get_lhs (patt_stmt);\n \t  if (lhs && TREE_CODE (lhs) == SSA_NAME)\n \t    release_ssa_name (lhs);\n-\t  if (seq)\n-\t    {\n-\t      gimple_stmt_iterator si;\n-\t      for (si = gsi_start (seq); !gsi_end_p (si); gsi_next (&si))\n-\t\t{\n-\t\t  gimple *seq_stmt = gsi_stmt (si);\n-\t\t  gimple_set_bb (seq_stmt, NULL);\n-\t\t  lhs = gimple_get_lhs (seq_stmt);\n-\t\t  if (lhs && TREE_CODE (lhs) == SSA_NAME)\n-\t\t    release_ssa_name (lhs);\n-\t\t  free_stmt_vec_info (seq_stmt);\n-\t\t}\n-\t    }\n \t  free_stmt_vec_info (patt_stmt);\n \t}\n     }"}, {"sha": "fce3238ff64f8a3c438bc348f867ba9285cfa42d", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3947d809d75c6bc47e600ce490c238006c2de2b/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3947d809d75c6bc47e600ce490c238006c2de2b/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=e3947d809d75c6bc47e600ce490c238006c2de2b", "patch": "@@ -796,7 +796,9 @@ typedef struct _stmt_vec_info {\n         pattern).  */\n   gimple *related_stmt;\n \n-  /* Used to keep a sequence of def stmts of a pattern stmt if such exists.  */\n+  /* Used to keep a sequence of def stmts of a pattern stmt if such exists.\n+     The sequence is attached to the original statement rather than the\n+     pattern statement.  */\n   gimple_seq pattern_def_seq;\n \n   /* List of datarefs that are known to have the same alignment as the dataref"}]}