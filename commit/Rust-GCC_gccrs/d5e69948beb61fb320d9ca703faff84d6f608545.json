{"sha": "d5e69948beb61fb320d9ca703faff84d6f608545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVlNjk5NDhiZWI2MWZiMzIwZDljYTcwM2ZhZmY4NGQ2ZjYwODU0NQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-28T20:47:21Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-28T20:47:21Z"}, "message": "fortran: Add support for per-location warning groups.\n\ngcc/fortran/ChangeLog:\n\n\t* trans-array.c (trans_array_constructor): Replace direct uses\n\tof TREE_NO_WARNING with warning_suppressed_p, and suppress_warning.\n\t* trans-decl.c (gfc_build_qualified_array): Same.\n\t(gfc_build_dummy_array_decl): Same.\n\t(generate_local_decl): Same.\n\t(gfc_generate_function_code): Same.\n\t* trans-openmp.c (gfc_omp_clause_default_ctor): Same.\n\t(gfc_omp_clause_copy_ctor): Same.\n\t* trans-types.c (get_dtype_type_node): Same.\n\t(gfc_get_desc_dim_type): Same.\n\t(gfc_get_array_descriptor_base): Same.\n\t(gfc_get_caf_vector_type): Same.\n\t(gfc_get_caf_reference_type): Same.\n\t* trans.c (gfc_create_var_np): Same.", "tree": {"sha": "737c21d80886bd2c6eb937b1461d19aa2a992d08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/737c21d80886bd2c6eb937b1461d19aa2a992d08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5e69948beb61fb320d9ca703faff84d6f608545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5e69948beb61fb320d9ca703faff84d6f608545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5e69948beb61fb320d9ca703faff84d6f608545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5e69948beb61fb320d9ca703faff84d6f608545/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c7dfbb8f3d55be6bed27a6889ebae30c0e7a044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7dfbb8f3d55be6bed27a6889ebae30c0e7a044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7dfbb8f3d55be6bed27a6889ebae30c0e7a044"}], "stats": {"total": 120, "additions": 60, "deletions": 60}, "files": [{"sha": "0d013defdbbf1d3bbb3995436e7f5ed51af06751", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5e69948beb61fb320d9ca703faff84d6f608545/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5e69948beb61fb320d9ca703faff84d6f608545/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=d5e69948beb61fb320d9ca703faff84d6f608545", "patch": "@@ -2764,7 +2764,7 @@ trans_array_constructor (gfc_ss * ss, locus * where)\n   desc = ss_info->data.array.descriptor;\n   offset = gfc_index_zero_node;\n   offsetvar = gfc_create_var_np (gfc_array_index_type, \"offset\");\n-  TREE_NO_WARNING (offsetvar) = 1;\n+  suppress_warning (offsetvar);\n   TREE_USED (offsetvar) = 0;\n   gfc_trans_array_constructor_value (&outer_loop->pre, type, desc, c,\n \t\t\t\t     &offset, &offsetvar, dynamic);"}, {"sha": "a73ce8a3f40c978a4a40da0c4890f433989b84cd", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5e69948beb61fb320d9ca703faff84d6f608545/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5e69948beb61fb320d9ca703faff84d6f608545/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=d5e69948beb61fb320d9ca703faff84d6f608545", "patch": "@@ -1045,21 +1045,21 @@ gfc_build_qualified_array (tree decl, gfc_symbol * sym)\n       if (GFC_TYPE_ARRAY_LBOUND (type, dim) == NULL_TREE)\n \t{\n \t  GFC_TYPE_ARRAY_LBOUND (type, dim) = create_index_var (\"lbound\", nest);\n-\t  TREE_NO_WARNING (GFC_TYPE_ARRAY_LBOUND (type, dim)) = 1;\n+\t  suppress_warning (GFC_TYPE_ARRAY_LBOUND (type, dim));\n \t}\n       /* Don't try to use the unknown bound for assumed shape arrays.  */\n       if (GFC_TYPE_ARRAY_UBOUND (type, dim) == NULL_TREE\n \t  && (as->type != AS_ASSUMED_SIZE\n \t      || dim < GFC_TYPE_ARRAY_RANK (type) - 1))\n \t{\n \t  GFC_TYPE_ARRAY_UBOUND (type, dim) = create_index_var (\"ubound\", nest);\n-\t  TREE_NO_WARNING (GFC_TYPE_ARRAY_UBOUND (type, dim)) = 1;\n+\t  suppress_warning (GFC_TYPE_ARRAY_UBOUND (type, dim));\n \t}\n \n       if (GFC_TYPE_ARRAY_STRIDE (type, dim) == NULL_TREE)\n \t{\n \t  GFC_TYPE_ARRAY_STRIDE (type, dim) = create_index_var (\"stride\", nest);\n-\t  TREE_NO_WARNING (GFC_TYPE_ARRAY_STRIDE (type, dim)) = 1;\n+\t  suppress_warning (GFC_TYPE_ARRAY_STRIDE (type, dim));\n \t}\n     }\n   for (dim = GFC_TYPE_ARRAY_RANK (type);\n@@ -1068,21 +1068,21 @@ gfc_build_qualified_array (tree decl, gfc_symbol * sym)\n       if (GFC_TYPE_ARRAY_LBOUND (type, dim) == NULL_TREE)\n \t{\n \t  GFC_TYPE_ARRAY_LBOUND (type, dim) = create_index_var (\"lbound\", nest);\n-\t  TREE_NO_WARNING (GFC_TYPE_ARRAY_LBOUND (type, dim)) = 1;\n+\t  suppress_warning (GFC_TYPE_ARRAY_LBOUND (type, dim));\n \t}\n       /* Don't try to use the unknown ubound for the last coarray dimension.  */\n       if (GFC_TYPE_ARRAY_UBOUND (type, dim) == NULL_TREE\n           && dim < GFC_TYPE_ARRAY_RANK (type) + GFC_TYPE_ARRAY_CORANK (type) - 1)\n \t{\n \t  GFC_TYPE_ARRAY_UBOUND (type, dim) = create_index_var (\"ubound\", nest);\n-\t  TREE_NO_WARNING (GFC_TYPE_ARRAY_UBOUND (type, dim)) = 1;\n+\t  suppress_warning (GFC_TYPE_ARRAY_UBOUND (type, dim));\n \t}\n     }\n   if (GFC_TYPE_ARRAY_OFFSET (type) == NULL_TREE)\n     {\n       GFC_TYPE_ARRAY_OFFSET (type) = gfc_create_var_np (gfc_array_index_type,\n \t\t\t\t\t\t\t\"offset\");\n-      TREE_NO_WARNING (GFC_TYPE_ARRAY_OFFSET (type)) = 1;\n+      suppress_warning (GFC_TYPE_ARRAY_OFFSET (type));\n \n       if (nest)\n \tgfc_add_decl_to_parent_function (GFC_TYPE_ARRAY_OFFSET (type));\n@@ -1094,7 +1094,7 @@ gfc_build_qualified_array (tree decl, gfc_symbol * sym)\n       && as->type != AS_ASSUMED_SIZE)\n     {\n       GFC_TYPE_ARRAY_SIZE (type) = create_index_var (\"size\", nest);\n-      TREE_NO_WARNING (GFC_TYPE_ARRAY_SIZE (type)) = 1;\n+      suppress_warning (GFC_TYPE_ARRAY_SIZE (type));\n     }\n \n   if (POINTER_TYPE_P (type))\n@@ -1299,7 +1299,7 @@ gfc_build_dummy_array_decl (gfc_symbol * sym, tree dummy)\n \n   /* Avoid uninitialized warnings for optional dummy arguments.  */\n   if (sym->attr.optional)\n-    TREE_NO_WARNING (decl) = 1;\n+    suppress_warning (decl);\n \n   /* We should never get deferred shape arrays here.  We used to because of\n      frontend bugs.  */\n@@ -5986,7 +5986,7 @@ generate_local_decl (gfc_symbol * sym)\n \t\t\t     \"does not have a default initializer\",\n \t\t\t     sym->name, &sym->declared_at);\n \t      if (sym->backend_decl != NULL_TREE)\n-\t\tTREE_NO_WARNING(sym->backend_decl) = 1;\n+\t\tsuppress_warning (sym->backend_decl);\n \t    }\n \t  else if (warn_unused_dummy_argument)\n \t    {\n@@ -5996,7 +5996,7 @@ generate_local_decl (gfc_symbol * sym)\n \t\t\t     &sym->declared_at);\n \n \t      if (sym->backend_decl != NULL_TREE)\n-\t\tTREE_NO_WARNING(sym->backend_decl) = 1;\n+\t\tsuppress_warning (sym->backend_decl);\n \t    }\n \t}\n \n@@ -6012,7 +6012,7 @@ generate_local_decl (gfc_symbol * sym)\n \t\t\t   \"explicitly imported at %L\", sym->name,\n \t\t\t   &sym->declared_at);\n \t      if (sym->backend_decl != NULL_TREE)\n-\t\tTREE_NO_WARNING(sym->backend_decl) = 1;\n+\t\tsuppress_warning (sym->backend_decl);\n \t    }\n \t  else if (!sym->attr.use_assoc)\n \t    {\n@@ -6030,7 +6030,7 @@ generate_local_decl (gfc_symbol * sym)\n \t\t\t     \"Unused variable %qs declared at %L\",\n \t\t\t     sym->name, &sym->declared_at);\n \t      if (sym->backend_decl != NULL_TREE)\n-\t\tTREE_NO_WARNING(sym->backend_decl) = 1;\n+\t\tsuppress_warning (sym->backend_decl);\n \t    }\n \t}\n \n@@ -6145,7 +6145,7 @@ generate_local_decl (gfc_symbol * sym)\n \t  /* Silence bogus \"unused parameter\" warnings from the\n \t     middle end.  */\n \t  if (sym->backend_decl != NULL_TREE)\n-\t\tTREE_NO_WARNING (sym->backend_decl) = 1;\n+\t\tsuppress_warning (sym->backend_decl);\n \t}\n     }\n \n@@ -6976,7 +6976,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n \t\t\t \"Return value of function %qs at %L not set\",\n \t\t\t sym->name, &sym->declared_at);\n \t  if (warn_return_type > 0)\n-\t    TREE_NO_WARNING(sym->backend_decl) = 1;\n+\t    suppress_warning (sym->backend_decl);\n \t}\n       if (result != NULL_TREE)\n \tgfc_add_expr_to_block (&body, gfc_generate_return ());"}, {"sha": "ace4faf038a18312b87ebd31d69d53613ce153e0", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5e69948beb61fb320d9ca703faff84d6f608545/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5e69948beb61fb320d9ca703faff84d6f608545/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=d5e69948beb61fb320d9ca703faff84d6f608545", "patch": "@@ -785,7 +785,7 @@ gfc_omp_clause_default_ctor (tree clause, tree decl, tree outer)\n \t\t\t\t\t else_b));\n       /* Avoid -W*uninitialized warnings.  */\n       if (DECL_P (decl))\n-\tTREE_NO_WARNING (decl) = 1;\n+\tsuppress_warning (decl, OPT_Wuninitialized);\n     }\n   else\n     gfc_add_expr_to_block (&block, then_b);\n@@ -970,7 +970,7 @@ gfc_omp_clause_copy_ctor (tree clause, tree dest, tree src)\n \t\t\t\t     void_type_node, cond, then_b, else_b));\n   /* Avoid -W*uninitialized warnings.  */\n   if (DECL_P (dest))\n-    TREE_NO_WARNING (dest) = 1;\n+    suppress_warning (dest, OPT_Wuninitialized);\n \n   return gfc_finish_block (&block);\n }"}, {"sha": "d715838a0463167cadea458eebc4dba4fa785571", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5e69948beb61fb320d9ca703faff84d6f608545/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5e69948beb61fb320d9ca703faff84d6f608545/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=d5e69948beb61fb320d9ca703faff84d6f608545", "patch": "@@ -150,23 +150,23 @@ tree get_dtype_type_node (void)\n       field = gfc_add_field_to_struct_1 (dtype_node,\n \t\t\t\t\t get_identifier (\"elem_len\"),\n \t\t\t\t\t size_type_node, &dtype_chain);\n-      TREE_NO_WARNING (field) = 1;\n+      suppress_warning (field);\n       field = gfc_add_field_to_struct_1 (dtype_node,\n \t\t\t\t\t get_identifier (\"version\"),\n \t\t\t\t\t integer_type_node, &dtype_chain);\n-      TREE_NO_WARNING (field) = 1;\n+      suppress_warning (field);\n       field = gfc_add_field_to_struct_1 (dtype_node,\n \t\t\t\t\t get_identifier (\"rank\"),\n \t\t\t\t\t signed_char_type_node, &dtype_chain);\n-      TREE_NO_WARNING (field) = 1;\n+      suppress_warning (field);\n       field = gfc_add_field_to_struct_1 (dtype_node,\n \t\t\t\t\t get_identifier (\"type\"),\n \t\t\t\t\t signed_char_type_node, &dtype_chain);\n-      TREE_NO_WARNING (field) = 1;\n+      suppress_warning (field);\n       field = gfc_add_field_to_struct_1 (dtype_node,\n \t\t\t\t\t get_identifier (\"attribute\"),\n \t\t\t\t\t short_integer_type_node, &dtype_chain);\n-      TREE_NO_WARNING (field) = 1;\n+      suppress_warning (field);\n       gfc_finish_type (dtype_node);\n       TYPE_DECL_SUPPRESS_DEBUG (TYPE_STUB_DECL (dtype_node)) = 1;\n       dtype_type_node = dtype_node;\n@@ -1453,17 +1453,17 @@ gfc_get_desc_dim_type (void)\n   decl = gfc_add_field_to_struct_1 (type,\n \t\t\t\t    get_identifier (\"stride\"),\n \t\t\t\t    gfc_array_index_type, &chain);\n-  TREE_NO_WARNING (decl) = 1;\n+  suppress_warning (decl);\n \n   decl = gfc_add_field_to_struct_1 (type,\n \t\t\t\t    get_identifier (\"lbound\"),\n \t\t\t\t    gfc_array_index_type, &chain);\n-  TREE_NO_WARNING (decl) = 1;\n+  suppress_warning (decl);\n \n   decl = gfc_add_field_to_struct_1 (type,\n \t\t\t\t    get_identifier (\"ubound\"),\n \t\t\t\t    gfc_array_index_type, &chain);\n-  TREE_NO_WARNING (decl) = 1;\n+  suppress_warning (decl);\n \n   /* Finish off the type.  */\n   gfc_finish_type (type);\n@@ -1853,19 +1853,19 @@ gfc_get_array_descriptor_base (int dimen, int codimen, bool restricted)\n   decl = gfc_add_field_to_struct_1 (fat_type,\n \t\t\t\t    get_identifier (\"offset\"),\n \t\t\t\t    gfc_array_index_type, &chain);\n-  TREE_NO_WARNING (decl) = 1;\n+  suppress_warning (decl);\n \n   /* Add the dtype component.  */\n   decl = gfc_add_field_to_struct_1 (fat_type,\n \t\t\t\t    get_identifier (\"dtype\"),\n \t\t\t\t    get_dtype_type_node (), &chain);\n-  TREE_NO_WARNING (decl) = 1;\n+  suppress_warning (decl);\n \n   /* Add the span component.  */\n   decl = gfc_add_field_to_struct_1 (fat_type,\n \t\t\t\t    get_identifier (\"span\"),\n \t\t\t\t    gfc_array_index_type, &chain);\n-  TREE_NO_WARNING (decl) = 1;\n+  suppress_warning (decl);\n \n   /* Build the array type for the stride and bound components.  */\n   if (dimen + codimen > 0)\n@@ -1878,15 +1878,15 @@ gfc_get_array_descriptor_base (int dimen, int codimen, bool restricted)\n \n       decl = gfc_add_field_to_struct_1 (fat_type, get_identifier (\"dim\"),\n \t\t\t\t\tarraytype, &chain);\n-      TREE_NO_WARNING (decl) = 1;\n+      suppress_warning (decl);\n     }\n \n   if (flag_coarray == GFC_FCOARRAY_LIB)\n     {\n       decl = gfc_add_field_to_struct_1 (fat_type,\n \t\t\t\t\tget_identifier (\"token\"),\n \t\t\t\t\tprvoid_type_node, &chain);\n-      TREE_NO_WARNING (decl) = 1;\n+      suppress_warning (decl);\n     }\n \n   /* Finish off the type.  */\n@@ -2882,7 +2882,7 @@ gfc_get_derived_type (gfc_symbol * derived, int codimen)\n \t  token = gfc_find_component (derived, caf_name, true, true, NULL);\n \t  gcc_assert (token);\n \t  c->caf_token = token->backend_decl;\n-\t  TREE_NO_WARNING (c->caf_token) = 1;\n+\t  suppress_warning (c->caf_token);\n \t}\n     }\n \n@@ -3547,46 +3547,46 @@ gfc_get_caf_vector_type (int dim)\n       tmp = gfc_add_field_to_struct_1 (vect_struct_type,\n \t\t\t\t       get_identifier (\"vector\"),\n \t\t\t\t       pvoid_type_node, &chain);\n-      TREE_NO_WARNING (tmp) = 1;\n+      suppress_warning (tmp);\n       tmp = gfc_add_field_to_struct_1 (vect_struct_type,\n \t\t\t\t       get_identifier (\"kind\"),\n \t\t\t\t       integer_type_node, &chain);\n-      TREE_NO_WARNING (tmp) = 1;\n+      suppress_warning (tmp);\n       gfc_finish_type (vect_struct_type);\n \n       chain = 0;\n       triplet_struct_type = make_node (RECORD_TYPE);\n       tmp = gfc_add_field_to_struct_1 (triplet_struct_type,\n \t\t\t\t       get_identifier (\"lower_bound\"),\n \t\t\t\t       gfc_array_index_type, &chain);\n-      TREE_NO_WARNING (tmp) = 1;\n+      suppress_warning (tmp);\n       tmp = gfc_add_field_to_struct_1 (triplet_struct_type,\n \t\t\t\t       get_identifier (\"upper_bound\"),\n \t\t\t\t       gfc_array_index_type, &chain);\n-      TREE_NO_WARNING (tmp) = 1;\n+      suppress_warning (tmp);\n       tmp = gfc_add_field_to_struct_1 (triplet_struct_type, get_identifier (\"stride\"),\n \t\t\t\t       gfc_array_index_type, &chain);\n-      TREE_NO_WARNING (tmp) = 1;\n+      suppress_warning (tmp);\n       gfc_finish_type (triplet_struct_type);\n \n       chain = 0;\n       union_type = make_node (UNION_TYPE);\n       tmp = gfc_add_field_to_struct_1 (union_type, get_identifier (\"v\"),\n                                        vect_struct_type, &chain);\n-      TREE_NO_WARNING (tmp) = 1;\n+      suppress_warning (tmp);\n       tmp = gfc_add_field_to_struct_1 (union_type, get_identifier (\"triplet\"),\n \t\t\t\t       triplet_struct_type, &chain);\n-      TREE_NO_WARNING (tmp) = 1;\n+      suppress_warning (tmp);\n       gfc_finish_type (union_type);\n \n       chain = 0;\n       vec_type = make_node (RECORD_TYPE);\n       tmp = gfc_add_field_to_struct_1 (vec_type, get_identifier (\"nvec\"),\n \t\t\t\t       size_type_node, &chain);\n-      TREE_NO_WARNING (tmp) = 1;\n+      suppress_warning (tmp);\n       tmp = gfc_add_field_to_struct_1 (vec_type, get_identifier (\"u\"),\n \t\t\t\t       union_type, &chain);\n-      TREE_NO_WARNING (tmp) = 1;\n+      suppress_warning (tmp);\n       gfc_finish_type (vec_type);\n       TYPE_NAME (vec_type) = get_identifier (\"caf_vector_t\");\n     }\n@@ -3613,53 +3613,53 @@ gfc_get_caf_reference_type ()\n   tmp = gfc_add_field_to_struct_1 (c_struct_type,\n \t\t\t\t   get_identifier (\"offset\"),\n \t\t\t\t   gfc_array_index_type, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (c_struct_type,\n \t\t\t\t   get_identifier (\"caf_token_offset\"),\n \t\t\t\t   gfc_array_index_type, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   gfc_finish_type (c_struct_type);\n \n   chain = 0;\n   s_struct_type = make_node (RECORD_TYPE);\n   tmp = gfc_add_field_to_struct_1 (s_struct_type,\n \t\t\t\t   get_identifier (\"start\"),\n \t\t\t\t   gfc_array_index_type, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (s_struct_type,\n \t\t\t\t   get_identifier (\"end\"),\n \t\t\t\t   gfc_array_index_type, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (s_struct_type,\n \t\t\t\t   get_identifier (\"stride\"),\n \t\t\t\t   gfc_array_index_type, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   gfc_finish_type (s_struct_type);\n \n   chain = 0;\n   v_struct_type = make_node (RECORD_TYPE);\n   tmp = gfc_add_field_to_struct_1 (v_struct_type,\n \t\t\t\t   get_identifier (\"vector\"),\n \t\t\t\t   pvoid_type_node, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (v_struct_type,\n \t\t\t\t   get_identifier (\"nvec\"),\n \t\t\t\t   size_type_node, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (v_struct_type,\n \t\t\t\t   get_identifier (\"kind\"),\n \t\t\t\t   integer_type_node, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   gfc_finish_type (v_struct_type);\n \n   chain = 0;\n   union_type = make_node (UNION_TYPE);\n   tmp = gfc_add_field_to_struct_1 (union_type, get_identifier (\"s\"),\n \t\t\t\t   s_struct_type, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (union_type, get_identifier (\"v\"),\n \t\t\t\t   v_struct_type, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   gfc_finish_type (union_type);\n \n   tmp = build_range_type (gfc_array_index_type, gfc_index_zero_node,\n@@ -3674,40 +3674,40 @@ gfc_get_caf_reference_type ()\n \t\t\t\t\t\t    gfc_index_zero_node,\n \t\t\t\t\t gfc_rank_cst[GFC_MAX_DIMENSIONS - 1])),\n \t\t&chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (a_struct_type,\n \t\t\t\t   get_identifier (\"static_array_type\"),\n \t\t\t\t   integer_type_node, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (a_struct_type, get_identifier (\"dim\"),\n \t\t\t\t   dim_union_type, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   gfc_finish_type (a_struct_type);\n \n   chain = 0;\n   u_union_type = make_node (UNION_TYPE);\n   tmp = gfc_add_field_to_struct_1 (u_union_type, get_identifier (\"c\"),\n \t\t\t\t   c_struct_type, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (u_union_type, get_identifier (\"a\"),\n \t\t\t\t   a_struct_type, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   gfc_finish_type (u_union_type);\n \n   chain = 0;\n   reference_type = make_node (RECORD_TYPE);\n   tmp = gfc_add_field_to_struct_1 (reference_type, get_identifier (\"next\"),\n \t\t\t\t   build_pointer_type (reference_type), &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (reference_type, get_identifier (\"type\"),\n \t\t\t\t   integer_type_node, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (reference_type, get_identifier (\"item_size\"),\n \t\t\t\t   size_type_node, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tmp = gfc_add_field_to_struct_1 (reference_type, get_identifier (\"u\"),\n \t\t\t\t   u_union_type, &chain);\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   gfc_finish_type (reference_type);\n   TYPE_NAME (reference_type) = get_identifier (\"caf_reference_t\");\n "}, {"sha": "275d6a28f1c053072765097b0ed08fa6d80f6e6e", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5e69948beb61fb320d9ca703faff84d6f608545/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5e69948beb61fb320d9ca703faff84d6f608545/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=d5e69948beb61fb320d9ca703faff84d6f608545", "patch": "@@ -129,7 +129,7 @@ gfc_create_var_np (tree type, const char *prefix)\n \n   /* No warnings for anonymous variables.  */\n   if (prefix == NULL)\n-    TREE_NO_WARNING (t) = 1;\n+    suppress_warning (t);\n \n   return t;\n }"}]}