{"sha": "55dea7b14958ca29e9644c56ad9e1e9c90b7ab59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVkZWE3YjE0OTU4Y2EyOWU5NjQ0YzU2YWQ5ZTFlOWM5MGI3YWI1OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-09-14T22:09:35Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-09-14T22:09:35Z"}, "message": "moneypunct_members_gnu.cc: Fix initialization of wchar_t members.\n\n\n2001-09-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/locale/moneypunct_members_gnu.cc: Fix initialization of\n\twchar_t members.\n\t* testsuite/22_locale/money_get_members_wchar_t.cc (test02): New file.\n\t* testsuite/22_locale/money_put_members_wchar_t.cc (test02): Fix.\n\nFrom-SVN: r45614", "tree": {"sha": "ec8a3b6be505a05b26084a6a67748eec4ee9cbc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec8a3b6be505a05b26084a6a67748eec4ee9cbc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59/comments", "author": null, "committer": null, "parents": [{"sha": "972938978677f76ef6af494932345945947852ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/972938978677f76ef6af494932345945947852ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/972938978677f76ef6af494932345945947852ee"}], "stats": {"total": 373, "additions": 366, "deletions": 7}, "files": [{"sha": "aaeda2556bade7cdf5ddebb51c5d123e0e079787", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=55dea7b14958ca29e9644c56ad9e1e9c90b7ab59", "patch": "@@ -1,3 +1,10 @@\n+2001-09-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/locale/moneypunct_members_gnu.cc: Fix initialization of\n+\twchar_t members.\n+\t* testsuite/22_locale/money_get_members_wchar_t.cc (test02): New file.\n+\t* testsuite/22_locale/money_put_members_wchar_t.cc (test02): Fix.\n+\n 2001-09-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/locale_facets.tcc: Conditionalize use of strtold."}, {"sha": "079f9f13246c159042b8675e4cde8c0819058dff", "filename": "libstdc++-v3/config/locale/moneypunct_members_gnu.cc", "status": "modified", "additions": 80, "deletions": 6, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_gnu.cc?ref=55dea7b14958ca29e9644c56ad9e1e9c90b7ab59", "patch": "@@ -322,11 +322,48 @@ namespace std\n \t  _M_decimal_point = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc));\n \t  _M_thousands_sep = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC,__cloc));\n \t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n-\t  _M_positive_sign = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__POSITIVE_SIGN, __cloc));\n-\t  _M_negative_sign = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__NEGATIVE_SIGN, __cloc));\n+\n+\t  mbstate_t __state;\n+\t  const char* __cs;\n+\t  string __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n+\t  string __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n+\t  string __ccurr = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n+\t  string::size_type __len = max(__cpossign.size(), __cnegsign.size());\n+\t  __len = max(__len, __ccurr.size()) + 1;\n+\t  wchar_t* __ws = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t) * __len));\n+\n+\t  // NB: Should swich to __cloc's ctype info first.\n+\t  if (__cpossign.size())\n+\t    {\n+\t      memset(&__state, 0, sizeof(mbstate_t));\n+\t      __cs = __cpossign.c_str();\n+\t      mbsrtowcs(__ws, &__cs, __cpossign.size() + 1, &__state);\n+\t      _M_positive_sign = string_type(__ws);\n+\t    }\n+\t  else\n+\t    _M_positive_sign = string_type();\n+\n+\t  if (__cnegsign.size())\n+\t    { \n+\t      memset(&__state, 0, sizeof(mbstate_t));\n+\t      __cs = __cnegsign.c_str();\n+\t      mbsrtowcs(__ws, &__cs, __cnegsign.size() + 1, &__state);\n+\t      _M_negative_sign = string_type(__ws);\n+\t    }\n+\t  else\n+\t    _M_negative_sign = string_type();\n \n \t  // _Intl == true.\n-\t  _M_curr_symbol = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__INT_CURR_SYMBOL, __cloc));\n+\t  if (__ccurr.size())\n+\t    {\n+\t      memset(&__state, 0, sizeof(mbstate_t));\n+\t      __cs = __ccurr.c_str();\n+\t      mbsrtowcs(__ws, &__cs, __ccurr.size() + 1, &__state);\n+\t      _M_curr_symbol = string_type(__ws);\n+\t    }\n+\t  else\n+\t    _M_curr_symbol = string_type();\n+\n \t  _M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, __cloc));\n \t  char __ppreceeds = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n@@ -364,11 +401,48 @@ namespace std\n \t  _M_decimal_point = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc));\n \t  _M_thousands_sep = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC,__cloc));\n \t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n-\t  _M_positive_sign = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__POSITIVE_SIGN, __cloc));\n-\t  _M_negative_sign = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__NEGATIVE_SIGN, __cloc));\n+\n+\t  mbstate_t __state;\n+\t  const char* __cs;\n+\t  string __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n+\t  string __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n+\t  string __ccurr = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n+\t  string::size_type __len = max(__cpossign.size(), __cnegsign.size());\n+\t  __len = max(__len, __ccurr.size()) + 1;\n+\t  wchar_t* __ws = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t) * __len));\n+\n+\t  // NB: Should swich to __cloc's ctype info first.\n+\t  if (__cpossign.size())\n+\t    {\n+\t      memset(&__state, 0, sizeof(mbstate_t));\n+\t      __cs = __cpossign.c_str();\n+\t      mbsrtowcs(__ws, &__cs, __cpossign.size() + 1, &__state);\n+\t      _M_positive_sign = string_type(__ws);\n+\t    }\n+\t  else\n+\t    _M_positive_sign = string_type();\n+\n+\t  if (__cnegsign.size())\n+\t    { \n+\t      memset(&__state, 0, sizeof(mbstate_t));\n+\t      __cs = __cnegsign.c_str();\n+\t      mbsrtowcs(__ws, &__cs, __cnegsign.size() + 1, &__state);\n+\t      _M_negative_sign = string_type(__ws);\n+\t    }\n+\t  else\n+\t    _M_negative_sign = string_type();\n \n \t  // _Intl == false.\n-\t  _M_curr_symbol = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__CURRENCY_SYMBOL, __cloc));\n+\t  if (__ccurr.size())\n+\t    {\n+\t      memset(&__state, 0, sizeof(mbstate_t));\n+\t      __cs = __ccurr.c_str();\n+\t      mbsrtowcs(__ws, &__cs, __ccurr.size() + 1, &__state);\n+\t      _M_curr_symbol = string_type(__ws);\n+\t    }\n+\t  else\n+\t    _M_curr_symbol = string_type();\n+\n \t  _M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n \t  char __ppreceeds = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));"}, {"sha": "5062e01b474a4a62e68fe9ccd5927b2478e57771", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_wchar_t.cc", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc?ref=55dea7b14958ca29e9644c56ad9e1e9c90b7ab59", "patch": "@@ -0,0 +1,279 @@\n+// 2001-09-14 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+// test string version\n+void test01()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+  string str;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  str = loc_c.name();\n+\n+  locale loc_hk(\"en_HK\");\n+  str = loc_hk.name();\n+  VERIFY( loc_c != loc_hk );\n+\n+  locale loc_fr(\"fr_FR@euro\");\n+  str = loc_fr.name();\n+  VERIFY( loc_c != loc_fr );\n+\n+  locale loc_de(\"de_DE\");\n+  str = loc_de.name();\n+  VERIFY( loc_c != loc_de );\n+\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<wchar_t, true> __money_true;\n+  typedef moneypunct<wchar_t, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+\n+  // total EPA budget FY 2002\n+  const wstring digits1(L\"720000000000\");\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const wstring digits2(L\"-10000000000000\");  \n+\n+  // not valid input\n+  const wstring digits3(L\"-A\"); \n+\n+  // input less than frac_digits\n+  const wstring digits4(L\"-1\");\n+  \n+  iterator_type end;\n+  wistringstream iss;\n+  iss.imbue(loc_de);\n+  // cache the money_get facet\n+  const money_get<wchar_t>& mon_get = use_facet<money_get<wchar_t> >(iss.getloc()); \n+\n+\n+  iss.str(L\"7.200.000.000,00 \");\n+  iterator_type is_it01(iss);\n+  wstring result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  mon_get.get(is_it01, end, true, iss, err01, result1);\n+  VERIFY( result1 == digits1 );\n+  VERIFY( err01 == ios_base::eofbit );\n+\n+  iss.str(L\"7.200.000.000,00  \");\n+  iterator_type is_it02(iss);\n+  wstring result2;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  mon_get.get(is_it02, end, true, iss, err02, result2);\n+  VERIFY( result2 == digits1 );\n+  VERIFY( err02 == ios_base::eofbit );\n+\n+  iss.str(L\"7.200.000.000,00  a\");\n+  iterator_type is_it03(iss);\n+  wstring result3;\n+  ios_base::iostate err03 = ios_base::goodbit;\n+  mon_get.get(is_it03, end, true, iss, err03, result3);\n+  VERIFY( result3 == digits1 );\n+  VERIFY( err03 == ios_base::goodbit );\n+\n+  iss.str(L\"\");\n+  iterator_type is_it04(iss);\n+  wstring result4;\n+  ios_base::iostate err04 = ios_base::goodbit;\n+  mon_get.get(is_it04, end, true, iss, err04, result4);\n+  VERIFY( result4 == empty );\n+  VERIFY( err04 == ios_base::failbit | ios_base::eofbit );\n+\n+  iss.str(L\"working for enlightenment and peace in a mad world\");\n+  iterator_type is_it05(iss);\n+  wstring result5;\n+  ios_base::iostate err05 = ios_base::goodbit;\n+  mon_get.get(is_it05, end, true, iss, err05, result5);\n+  VERIFY( result5 == empty );\n+  VERIFY( err05 == ios_base::failbit );\n+\n+  // now try with showbase, to get currency symbol in format\n+  iss.setf(ios_base::showbase);\n+\n+  iss.str(L\"7.200.000.000,00 DEM \");\n+  iterator_type is_it06(iss);\n+  wstring result6;\n+  ios_base::iostate err06 = ios_base::goodbit;\n+  mon_get.get(is_it06, end, true, iss, err06, result6);\n+  VERIFY( result6 == digits1 );\n+  VERIFY( err06 == ios_base::eofbit );\n+\n+  iss.str(L\"7.200.000.000,00 DEM  \"); // Extra space.\n+  iterator_type is_it07(iss);\n+  wstring result7;\n+  ios_base::iostate err07 = ios_base::goodbit;\n+  mon_get.get(is_it07, end, true, iss, err07, result7);\n+  VERIFY( result7 == digits1 );\n+  VERIFY( err07 == ios_base::goodbit );\n+\n+  iss.str(L\"7.200.000.000,00 DM\"); \n+  iterator_type is_it08(iss);\n+  wstring result8;\n+  ios_base::iostate err08 = ios_base::goodbit;\n+  mon_get.get(is_it08, end, false, iss, err08, result8);\n+  VERIFY( result8 == digits1 );\n+  VERIFY( err08 == ios_base::eofbit );\n+\n+  iss.imbue(loc_hk);\n+  iss.str(L\"HK$7,200,000,000.00\"); \n+  iterator_type is_it09(iss);\n+  wstring result9;\n+  ios_base::iostate err09 = ios_base::goodbit;\n+  mon_get.get(is_it09, end, false, iss, err09, result9);\n+  VERIFY( result9 == digits1 );\n+  VERIFY( err09 == ios_base::eofbit );\n+\n+  iss.str(L\"(HKD 100,000,000,000.00)\"); \n+  iterator_type is_it10(iss);\n+  wstring result10;\n+  ios_base::iostate err10 = ios_base::goodbit;\n+  mon_get.get(is_it10, end, true, iss, err10, result10);\n+  VERIFY( result10 == digits2 );\n+  VERIFY( err10 == ios_base::goodbit );\n+\n+  iss.str(L\"(HKD .01)\"); \n+  iterator_type is_it11(iss);\n+  wstring result11;\n+  ios_base::iostate err11 = ios_base::goodbit;\n+  mon_get.get(is_it11, end, true, iss, err11, result11);\n+  VERIFY( result11 == digits4 );\n+  VERIFY( err11 == ios_base::goodbit );\n+}\n+\n+// test double/wstring versions\n+void test02()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+  string str;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  str = loc_c.name();\n+\n+  locale loc_hk(\"en_HK\");\n+  str = loc_hk.name();\n+  VERIFY( loc_c != loc_hk );\n+\n+  locale loc_fr(\"fr_FR@euro\");\n+  str = loc_fr.name();\n+  VERIFY( loc_c != loc_fr );\n+\n+  locale loc_de(\"de_DE\");\n+  str = loc_de.name();\n+  VERIFY( loc_c != loc_de );\n+\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<wchar_t, true> __money_true;\n+  typedef moneypunct<wchar_t, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+\n+  // total EPA budget FY 2002\n+  const long double  digits1 = 720000000000;\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const long double digits2 = -10000000000000;  \n+\n+  // input less than frac_digits\n+  const long double digits4 = -1;\n+  \n+  iterator_type end;\n+  wistringstream iss;\n+  iss.imbue(loc_de);\n+  // cache the money_get facet\n+  const money_get<wchar_t>& mon_get = use_facet<money_get<wchar_t> >(iss.getloc()); \n+\n+  iss.str(L\"7.200.000.000,00 \");\n+  iterator_type is_it01(iss);\n+  long double result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  mon_get.get(is_it01, end, true, iss, err01, result1);\n+  VERIFY( result1 == digits1 );\n+  VERIFY( err01 == ios_base::eofbit );\n+\n+  iss.str(L\"7.200.000.000,00 \");\n+  iterator_type is_it02(iss);\n+  long double result2;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  mon_get.get(is_it02, end, false, iss, err02, result2);\n+  VERIFY( result2 == digits1 );\n+  VERIFY( err02 == ios_base::eofbit );\n+\n+  // now try with showbase, to get currency symbol in format\n+  iss.setf(ios_base::showbase);\n+\n+  iss.imbue(loc_hk);\n+  iss.str(L\"(HKD .01)\"); \n+  iterator_type is_it03(iss);\n+  long double result3;\n+  ios_base::iostate err03 = ios_base::goodbit;\n+  mon_get.get(is_it03, end, true, iss, err03, result3);\n+  VERIFY( result3 == digits4 );\n+  VERIFY( err03 == ios_base::goodbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "6ff9f6fea597a651b0d82692c8e13ab5e535b797", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_wchar_t.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dea7b14958ca29e9644c56ad9e1e9c90b7ab59/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc?ref=55dea7b14958ca29e9644c56ad9e1e9c90b7ab59", "patch": "@@ -84,7 +84,6 @@ void test01()\n   // input less than frac_digits\n   const wstring digits4(L\"-1\");\n   \n-\n   wostringstream oss;\n   oss.imbue(loc_de);\n   // cache the money_put facet"}]}