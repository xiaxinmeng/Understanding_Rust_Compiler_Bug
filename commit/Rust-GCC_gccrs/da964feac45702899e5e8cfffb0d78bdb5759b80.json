{"sha": "da964feac45702899e5e8cfffb0d78bdb5759b80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5NjRmZWFjNDU3MDI4OTllNWU4Y2ZmZmIwZDc4YmRiNTc1OWI4MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-02-13T19:14:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-02-13T19:14:07Z"}, "message": "re PR c++/39070 (ICE with typeof() (... and __decltype))\n\n        PR c++/39070\n        * semantics.c (finish_call_expr): Change koenig_p parm to int.\n        If -1, don't set KOENIG_LOOKUP_P but do keep hidden candidates.\n        * cp-tree.h: Adjust prototype.\n        * pt.c (tsubst_copy_and_build) [CALL_EXPR]: Pass -1.\n\nFrom-SVN: r144161", "tree": {"sha": "1f92e7ac9446a8e08a82c60275545cd2748fd81d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f92e7ac9446a8e08a82c60275545cd2748fd81d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da964feac45702899e5e8cfffb0d78bdb5759b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da964feac45702899e5e8cfffb0d78bdb5759b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da964feac45702899e5e8cfffb0d78bdb5759b80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da964feac45702899e5e8cfffb0d78bdb5759b80/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2e7ba7e3a035ea6b6609a09d3a5b7061563c2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e7ba7e3a035ea6b6609a09d3a5b7061563c2ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2e7ba7e3a035ea6b6609a09d3a5b7061563c2ae"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "d9d6866e3ad48c62bd05589d77bdd1d423f25f24", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da964feac45702899e5e8cfffb0d78bdb5759b80", "patch": "@@ -1,3 +1,11 @@\n+2009-02-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/39070\n+\t* semantics.c (finish_call_expr): Change koenig_p parm to int.\n+\tIf -1, don't set KOENIG_LOOKUP_P but do keep hidden candidates.\n+\t* cp-tree.h: Adjust prototype.\n+\t* pt.c (tsubst_copy_and_build) [CALL_EXPR]: Pass -1.\n+\n 2009-02-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/38950"}, {"sha": "b23a3963d4476a9086b92a3df5acfda25ad6d342", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=da964feac45702899e5e8cfffb0d78bdb5759b80", "patch": "@@ -4757,7 +4757,7 @@ extern tree finish_stmt_expr_expr\t\t(tree, tree);\n extern tree finish_stmt_expr\t\t\t(tree, bool);\n extern tree stmt_expr_value_expr\t\t(tree);\n extern tree perform_koenig_lookup\t\t(tree, tree);\n-extern tree finish_call_expr\t\t\t(tree, tree, bool, bool, \n+extern tree finish_call_expr\t\t\t(tree, tree, bool, int, \n \t\t\t\t\t\t tsubst_flags_t);\n extern tree finish_increment_expr\t\t(tree, enum tree_code);\n extern tree finish_this_expr\t\t\t(void);"}, {"sha": "81eaffef57a3f4e2452c4cdadc7a74b2cf7c835b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=da964feac45702899e5e8cfffb0d78bdb5759b80", "patch": "@@ -11404,12 +11404,12 @@ tsubst_copy_and_build (tree t,\n \t\t       /*fn_p=*/NULL,\n \t\t       complain));\n \t  }\n-\t/* Pass true for koenig_p so that build_new_function_call will\n+\t/* Pass -1 for koenig_p so that build_new_function_call will\n \t   allow hidden friends found by arg-dependent lookup at template\n \t   parsing time.  */\n \treturn finish_call_expr (function, call_args,\n \t\t\t\t /*disallow_virtual=*/qualified_p,\n-\t\t\t\t /*koenig_p*/true,\n+\t\t\t\t /*koenig_p*/-1,\n \t\t\t\t complain);\n       }\n "}, {"sha": "dfff09bb0af92fc51a43cddcafb3ca0a06e53566", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=da964feac45702899e5e8cfffb0d78bdb5759b80", "patch": "@@ -1839,10 +1839,14 @@ perform_koenig_lookup (tree fn, tree args)\n    qualified.  For example a call to `X::f' never generates a virtual\n    call.)\n \n+   KOENIG_P is 1 if we want to perform argument-dependent lookup,\n+   -1 if we don't, but we want to accept functions found by previous\n+   argument-dependent lookup, and 0 if we want nothing to do with it.\n+\n    Returns code for the call.  */\n \n tree\n-finish_call_expr (tree fn, tree args, bool disallow_virtual, bool koenig_p,\n+finish_call_expr (tree fn, tree args, bool disallow_virtual, int koenig_p,\n \t\t  tsubst_flags_t complain)\n {\n   tree result;\n@@ -1865,7 +1869,7 @@ finish_call_expr (tree fn, tree args, bool disallow_virtual, bool koenig_p,\n \t  || any_type_dependent_arguments_p (args))\n \t{\n \t  result = build_nt_call_list (fn, args);\n-\t  KOENIG_LOOKUP_P (result) = koenig_p;\n+\t  KOENIG_LOOKUP_P (result) = koenig_p > 0;\n \t  if (cfun)\n \t    {\n \t      do\n@@ -1955,7 +1959,7 @@ finish_call_expr (tree fn, tree args, bool disallow_virtual, bool koenig_p,\n \n       if (!result)\n \t/* A call to a namespace-scope function.  */\n-\tresult = build_new_function_call (fn, args, koenig_p, complain);\n+\tresult = build_new_function_call (fn, args, koenig_p != 0, complain);\n     }\n   else if (TREE_CODE (fn) == PSEUDO_DTOR_EXPR)\n     {"}, {"sha": "d3f7ed7f84155270fa3f4c5d822e56813b4917ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da964feac45702899e5e8cfffb0d78bdb5759b80", "patch": "@@ -1,3 +1,8 @@\n+2009-02-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/39070\n+\t* g++.dg/cpp0x/decltype16.C: New.\n+\n 2009-02-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39152"}, {"sha": "2002458b8515f94116dd2ca7d1f8d7c86c944ab7", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype16.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da964feac45702899e5e8cfffb0d78bdb5759b80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype16.C?ref=da964feac45702899e5e8cfffb0d78bdb5759b80", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/39070\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename X> struct junk {\n+   template<typename Z> static Z y();\n+   template<typename Y> static int  test(...);\n+   template<typename Y> static char test(decltype(y<Y>())*);\n+   static int const value=sizeof(test<X>(0));\n+};\n+typedef char type[junk<int>::value==sizeof(char) ? 1 : -1];"}]}