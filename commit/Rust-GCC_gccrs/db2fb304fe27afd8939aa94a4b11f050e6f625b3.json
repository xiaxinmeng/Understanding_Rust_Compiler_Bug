{"sha": "db2fb304fe27afd8939aa94a4b11f050e6f625b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIyZmIzMDRmZTI3YWZkODkzOWFhOTRhNGIxMWYwNTBlNmY2MjViMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-14T17:20:40Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-14T17:20:40Z"}, "message": "runtime: just do file/line lookup in C, move Func to Go\n    \n    In order to port stack backtraces to Go, we need the ability to look up\n    file/line information for PC values without allocating memory.  This\n    patch moves the handling of Func from C code to Go code, and simplifies\n    the C code to just look up function/file/line/entry information for a PC.\n    \n    Reviewed-on: https://go-review.googlesource.com/31150\n\nFrom-SVN: r241172", "tree": {"sha": "9d0eff081f71ed2e0ceaa851807623afe4a7f286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d0eff081f71ed2e0ceaa851807623afe4a7f286"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db2fb304fe27afd8939aa94a4b11f050e6f625b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db2fb304fe27afd8939aa94a4b11f050e6f625b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db2fb304fe27afd8939aa94a4b11f050e6f625b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db2fb304fe27afd8939aa94a4b11f050e6f625b3/comments", "author": null, "committer": null, "parents": [{"sha": "d2c4425e86310d44aa8e9f9d91b49e2e61237ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c4425e86310d44aa8e9f9d91b49e2e61237ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2c4425e86310d44aa8e9f9d91b49e2e61237ef2"}], "stats": {"total": 167, "additions": 43, "deletions": 124}, "files": [{"sha": "b2f0413da895d241fdd9de1a532d77716d349a27", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2fb304fe27afd8939aa94a4b11f050e6f625b3/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2fb304fe27afd8939aa94a4b11f050e6f625b3/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=db2fb304fe27afd8939aa94a4b11f050e6f625b3", "patch": "@@ -1,4 +1,4 @@\n-911fceabd4c955b2f29f6b532f241a002ca7ad4f\n+993840643e27e52cda7e86e6a775f54443ea5d07\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "52e2d03d14b5a18185966ad8638c18bb4738fcd9", "filename": "libgo/go/runtime/symtab.go", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2fb304fe27afd8939aa94a4b11f050e6f625b3/libgo%2Fgo%2Fruntime%2Fsymtab.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2fb304fe27afd8939aa94a4b11f050e6f625b3/libgo%2Fgo%2Fruntime%2Fsymtab.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fsymtab.go?ref=db2fb304fe27afd8939aa94a4b11f050e6f625b3", "patch": "@@ -65,19 +65,20 @@ func (ci *Frames) Next() (frame Frame, more bool) {\n \t}\n \tmore = len(ci.callers) > 0\n \n-\tf, file, line := funcframe(pc, i)\n-\tif f == nil {\n+\t// Subtract 1 from PC to undo the 1 we added in callback in\n+\t// go-callers.c.\n+\tfunction, file, line := funcfileline(pc-1, int32(i))\n+\tif function == \"\" && file == \"\" {\n \t\treturn Frame{}, more\n \t}\n+\tentry := funcentry(pc - 1)\n+\tf := &Func{name: function, entry: entry}\n \n-\tentry := f.Entry()\n \txpc := pc\n \tif xpc > entry {\n \t\txpc--\n \t}\n \n-\tfunction := f.Name()\n-\n \tframe = Frame{\n \t\tPC:       xpc,\n \t\tFunc:     f,\n@@ -97,33 +98,40 @@ func (ci *Frames) Next() (frame Frame, more bool) {\n \n // A Func represents a Go function in the running binary.\n type Func struct {\n-\topaque struct{} // unexported field to disallow conversions\n+\tname  string\n+\tentry uintptr\n }\n \n // FuncForPC returns a *Func describing the function that contains the\n // given program counter address, or else nil.\n-func FuncForPC(pc uintptr) *Func\n+func FuncForPC(pc uintptr) *Func {\n+\tname, _, _ := funcfileline(pc, -1)\n+\tif name == \"\" {\n+\t\treturn nil\n+\t}\n+\tentry := funcentry(pc)\n+\treturn &Func{name: name, entry: entry}\n+}\n \n // Name returns the name of the function.\n func (f *Func) Name() string {\n-\treturn funcname_go(f)\n+\treturn f.name\n }\n \n // Entry returns the entry address of the function.\n func (f *Func) Entry() uintptr {\n-\treturn funcentry_go(f)\n+\treturn f.entry\n }\n \n // FileLine returns the file name and line number of the\n // source code corresponding to the program counter pc.\n // The result will not be accurate if pc is not a program\n // counter within f.\n func (f *Func) FileLine(pc uintptr) (file string, line int) {\n-\treturn funcline_go(f, pc)\n+\t_, file, line = funcfileline(pc, -1)\n+\treturn file, line\n }\n \n-// implemented in symtab.c\n-func funcline_go(*Func, uintptr) (string, int)\n-func funcname_go(*Func) string\n-func funcentry_go(*Func) uintptr\n-func funcframe(uintptr, int) (*Func, string, int)\n+// implemented in go-caller.c\n+func funcfileline(uintptr, int32) (string, string, int)\n+func funcentry(uintptr) uintptr"}, {"sha": "a35d8d73f44bbb66a381e99461a34dbb5c5fc076", "filename": "libgo/runtime/go-caller.c", "status": "modified", "additions": 19, "deletions": 96, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2fb304fe27afd8939aa94a4b11f050e6f625b3/libgo%2Fruntime%2Fgo-caller.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2fb304fe27afd8939aa94a4b11f050e6f625b3/libgo%2Fruntime%2Fgo-caller.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-caller.c?ref=db2fb304fe27afd8939aa94a4b11f050e6f625b3", "patch": "@@ -1,4 +1,4 @@\n-/* go-caller.c -- runtime.Caller and runtime.FuncForPC for Go.\n+/* go-caller.c -- look up function/file/line/entry info\n \n    Copyright 2009 The Go Authors. All rights reserved.\n    Use of this source code is governed by a BSD-style\n@@ -171,8 +171,6 @@ struct caller_ret\n \n struct caller_ret Caller (int n) __asm__ (GOSYM_PREFIX \"runtime.Caller\");\n \n-Func *FuncForPC (uintptr_t) __asm__ (GOSYM_PREFIX \"runtime.FuncForPC\");\n-\n /* Implement runtime.Caller.  */\n \n struct caller_ret\n@@ -193,115 +191,40 @@ Caller (int skip)\n   return ret;\n }\n \n-/* Implement runtime.FuncForPC.  */\n+/* Look up the function name, file name, and line number for a PC.  */\n \n-Func *\n-FuncForPC (uintptr_t pc)\n-{\n-  Func *ret;\n-  String fn;\n-  String file;\n-  intgo line;\n-  uintptr_t val;\n-\n-  if (!__go_file_line (pc, -1, &fn, &file, &line))\n-    return NULL;\n-\n-  ret = (Func *) runtime_malloc (sizeof (*ret));\n-  ret->name = fn;\n-\n-  if (__go_symbol_value (pc, &val))\n-    ret->entry = val;\n-  else\n-    ret->entry = 0;\n-\n-  return ret;\n-}\n-\n-/* Look up the file and line information for a PC within a\n-   function.  */\n-\n-struct funcline_go_return\n+struct funcfileline_return\n {\n+  String retfn;\n   String retfile;\n   intgo retline;\n };\n \n-struct funcline_go_return\n-runtime_funcline_go (Func *f, uintptr targetpc)\n-  __asm__ (GOSYM_PREFIX \"runtime.funcline_go\");\n+struct funcfileline_return\n+runtime_funcfileline (uintptr targetpc, int32 index)\n+  __asm__ (GOSYM_PREFIX \"runtime.funcfileline\");\n \n-struct funcline_go_return\n-runtime_funcline_go (Func *f __attribute__((unused)), uintptr targetpc)\n+struct funcfileline_return\n+runtime_funcfileline (uintptr targetpc, int32 index)\n {\n-  struct funcline_go_return ret;\n-  String fn;\n+  struct funcfileline_return ret;\n \n-  if (!__go_file_line (targetpc, -1, &fn, &ret.retfile,  &ret.retline))\n+  if (!__go_file_line (targetpc, index, &ret.retfn, &ret.retfile,\n+\t\t       &ret.retline))\n     runtime_memclr (&ret, sizeof ret);\n   return ret;\n }\n \n-/* Return the name of a function.  */\n-String runtime_funcname_go (Func *f)\n-  __asm__ (GOSYM_PREFIX \"runtime.funcname_go\");\n-\n-String\n-runtime_funcname_go (Func *f)\n-{\n-  if (f == NULL)\n-    return runtime_gostringnocopy ((const byte *) \"\");\n-  return f->name;\n-}\n-\n /* Return the entry point of a function.  */\n-uintptr runtime_funcentry_go(Func *f)\n-  __asm__ (GOSYM_PREFIX \"runtime.funcentry_go\");\n+uintptr runtime_funcentry(uintptr)\n+  __asm__ (GOSYM_PREFIX \"runtime.funcentry\");\n \n uintptr\n-runtime_funcentry_go (Func *f)\n+runtime_funcentry (uintptr pc)\n {\n-  return f->entry;\n-}\n+  uintptr val;\n \n-/* Look up file and line information for Frames.Next.  */\n-\n-struct funcframe_return\n-{\n-  Func* retfunc;\n-  String retfile;\n-  intgo retline;\n-};\n-\n-struct funcframe_return\n-runtime_funcframe (uintptr pc, int index)\n-  __asm__ (GOSYM_PREFIX \"runtime.funcframe\");\n-\n-struct funcframe_return\n-runtime_funcframe (uintptr pc, int index)\n-{\n-  struct funcframe_return ret;\n-  String fn;\n-  Func* func;\n-  uintptr_t val;\n-\n-  // Subtract 1 from PC to undo the 1 we added in callback in go-callers.c.\n-  --pc;\n-\n-  if (!__go_file_line (pc, index, &fn, &ret.retfile, &ret.retline))\n-    runtime_memclr (&ret, sizeof ret);\n-  else\n-    {\n-      func = (Func *) runtime_malloc (sizeof (*func));\n-      func->name = fn;\n-\n-      if (__go_symbol_value (pc, &val))\n-\tfunc->entry = val;\n-      else\n-\tfunc->entry = 0;\n-\n-      ret.retfunc = func;\n-    }\n-\n-  return ret;\n+  if (!__go_symbol_value (pc, &val))\n+    return 0;\n+  return val;\n }"}, {"sha": "27b0649f30f922e866df4a01dc03c6be61b0336f", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2fb304fe27afd8939aa94a4b11f050e6f625b3/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2fb304fe27afd8939aa94a4b11f050e6f625b3/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=db2fb304fe27afd8939aa94a4b11f050e6f625b3", "patch": "@@ -55,7 +55,6 @@ typedef uintptr\t\tuintreg;\n \n typedef\tuint8\t\t\tbool;\n typedef\tuint8\t\t\tbyte;\n-typedef\tstruct\tFunc\t\tFunc;\n typedef\tstruct\tg\t\tG;\n typedef\tstruct\tmutex\t\tLock;\n typedef\tstruct\tm\t\tM;\n@@ -153,16 +152,6 @@ struct\tSigTab\n \tvoid*   fwdsig;\n };\n \n-// Layout of in-memory per-function information prepared by linker\n-// See http://golang.org/s/go12symtab.\n-// Keep in sync with linker and with ../../libmach/sym.c\n-// and with package debug/gosym.\n-struct\tFunc\n-{\n-\tString\tname;\n-\tuintptr\tentry;\t// entry pc\n-};\n-\n #ifdef GOOS_nacl\n enum {\n    NaCl = 1,\n@@ -446,7 +435,6 @@ void\truntime_crash(void);\n void\truntime_parsedebugvars(void)\n   __asm__(GOSYM_PREFIX \"runtime.parsedebugvars\");\n void\t_rt0_go(void);\n-void*\truntime_funcdata(Func*, int32);\n int32\truntime_setmaxthreads(int32);\n G*\truntime_timejump(void);\n void\truntime_iterate_finq(void (*callback)(FuncVal*, void*, const FuncType*, const PtrType*));"}]}