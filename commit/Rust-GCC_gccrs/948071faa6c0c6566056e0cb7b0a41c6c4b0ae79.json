{"sha": "948071faa6c0c6566056e0cb7b0a41c6c4b0ae79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4MDcxZmFhNmMwYzY1NjYwNTZlMGNiN2IwYTQxYzZjNGIwYWU3OQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-07-31T09:56:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-31T09:56:36Z"}, "message": "[Ada] Refine generation of range checks to happen in front end\n\n2018-07-31  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_Attribute, case Fixed_Value): Set the\n\tbase type of the result to ensure that proper overflow and range\n\tchecks are generated.  If the target is a fixed-point tyoe,\n\tgenerate the required overflow and range checks explicitly,\n\trather than relying on Apply_Type_Conversion_Checks, which might\n\tsimply set the Do_Range_Check flag and rely on the backend to\n\tadd the check.\n\nFrom-SVN: r263104", "tree": {"sha": "4b8b435d7b8c68e167d1c201cb17bac9e4f6b1be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b8b435d7b8c68e167d1c201cb17bac9e4f6b1be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/948071faa6c0c6566056e0cb7b0a41c6c4b0ae79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948071faa6c0c6566056e0cb7b0a41c6c4b0ae79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948071faa6c0c6566056e0cb7b0a41c6c4b0ae79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948071faa6c0c6566056e0cb7b0a41c6c4b0ae79/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51d4bdfb567c86de722ac5a72b79c8f51209228c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d4bdfb567c86de722ac5a72b79c8f51209228c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d4bdfb567c86de722ac5a72b79c8f51209228c"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "b7987f1300273b24ebb457ffd176b3c554d5b8a8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948071faa6c0c6566056e0cb7b0a41c6c4b0ae79/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948071faa6c0c6566056e0cb7b0a41c6c4b0ae79/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=948071faa6c0c6566056e0cb7b0a41c6c4b0ae79", "patch": "@@ -1,3 +1,13 @@\n+2018-07-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Attribute, case Fixed_Value): Set the\n+\tbase type of the result to ensure that proper overflow and range\n+\tchecks are generated.  If the target is a fixed-point tyoe,\n+\tgenerate the required overflow and range checks explicitly,\n+\trather than relying on Apply_Type_Conversion_Checks, which might\n+\tsimply set the Do_Range_Check flag and rely on the backend to\n+\tadd the check.\n+\n 2018-07-31  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_res.adb (Resolve_Call): Establish a transient scope to"}, {"sha": "469a90e6ae1347e5e63acec21f5dfc217f4aec8f", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948071faa6c0c6566056e0cb7b0a41c6c4b0ae79/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948071faa6c0c6566056e0cb7b0a41c6c4b0ae79/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=948071faa6c0c6566056e0cb7b0a41c6c4b0ae79", "patch": "@@ -3639,6 +3639,10 @@ package body Exp_Attr is\n       --  not want this to go through the fixed-point conversion circuits. Note\n       --  that the back end always treats fixed-point as equivalent to the\n       --  corresponding integer type anyway.\n+      --  However, in order to remove the handling of Do_Range_Check from the\n+      --  backend, we force the generation of a check on the result by\n+      --  setting the result type appropriately. Apply_Conversion_Checks\n+      --  will generate the required expansion.\n \n       when Attribute_Fixed_Value\n          | Attribute_Integer_Value\n@@ -3647,15 +3651,53 @@ package body Exp_Attr is\n            Make_Type_Conversion (Loc,\n              Subtype_Mark => New_Occurrence_Of (Entity (Pref), Loc),\n              Expression   => Relocate_Node (First (Exprs))));\n-         Set_Etype (N, Entity (Pref));\n+\n+         --  Indicate that the result of the conversion may require a\n+         --  range check (see below);\n+\n+         Set_Etype (N, Base_Type (Entity (Pref)));\n          Set_Analyzed (N);\n \n          --  Note: it might appear that a properly analyzed unchecked\n          --  conversion would be just fine here, but that's not the case,\n-         --  since the full range checks performed by the following call\n+         --  since the full range checks performed by the following code\n          --  are critical.\n+         --  Given that Fixed-point conversions are not further expanded\n+         --  to prevent the involvement of real type operations we have to\n+         --  construct two checks explicitly: one on the operand, and one\n+         --  on the result. This used to be done in part in the back-end,\n+         --  but for other targets (E.g. LLVM) it is preferable to create\n+         --  the tests in full in the front-end.\n+\n+         if Is_Fixed_Point_Type (Etype (N)) then\n+            declare\n+               Loc     : constant Source_Ptr := Sloc (N);\n+               Equiv_T : constant Entity_Id := Make_Temporary (Loc, 'T', N);\n+               Expr    : constant Node_Id := Expression (N);\n+               Fst     : constant Entity_Id := Root_Type (Etype (N));\n+               Decl    : Node_Id;\n \n-         Apply_Type_Conversion_Checks (N);\n+            begin\n+               Decl := Make_Full_Type_Declaration (Sloc (N),\n+                 Equiv_T,\n+                 Type_Definition =>\n+                    Make_Signed_Integer_Type_Definition (Loc,\n+                      Low_Bound => Make_Integer_Literal (Loc,\n+                        Intval => Corresponding_Integer_Value\n+                                    (Type_Low_Bound (Fst))),\n+                      High_Bound => Make_Integer_Literal (Loc,\n+                        Intval => Corresponding_Integer_Value\n+                                    (Type_High_Bound (Fst)))));\n+               Insert_Action (N, Decl);\n+\n+               --  Verify that the conversion is possible.\n+               Generate_Range_Check\n+                 (Expr, Equiv_T, CE_Overflow_Check_Failed);\n+\n+               --  and verify that the result is in range.\n+               Generate_Range_Check (N, Etype (N), CE_Range_Check_Failed);\n+            end;\n+         end if;\n \n       -----------\n       -- Floor --"}]}