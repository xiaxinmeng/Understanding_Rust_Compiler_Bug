{"sha": "f5b854f2307ead678a7a3b77a607b1e6ff5bd631", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjViODU0ZjIzMDdlYWQ2NzhhN2EzYjc3YTYwN2IxZTZmZjViZDYzMQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-05-27T05:16:57Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-05-27T05:16:57Z"}, "message": "trans-intrinsic.c (gfc_conv_associated): If pointer in first arguments has zero array length of zero string length...\n\n2006-05-27  Paul Thomas  <pault@gcc.gnu.org>\n\n\t* trans-intrinsic.c (gfc_conv_associated): If pointer in first\n\targuments has zero array length of zero string length, return\n\tfalse.\n\n2006-05-27  Paul Thomas  <pault@gcc.gnu.org>\n\n\t* gfortran.dg/associated_2.f90: New test.\n\nFrom-SVN: r114149", "tree": {"sha": "bffa25f196f3705035a9cceba7c18dd3f114483a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bffa25f196f3705035a9cceba7c18dd3f114483a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5b854f2307ead678a7a3b77a607b1e6ff5bd631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b854f2307ead678a7a3b77a607b1e6ff5bd631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b854f2307ead678a7a3b77a607b1e6ff5bd631", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b854f2307ead678a7a3b77a607b1e6ff5bd631/comments", "author": null, "committer": null, "parents": [{"sha": "cc4c889131f4b27d379add3ca15fb49b24bb45c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4c889131f4b27d379add3ca15fb49b24bb45c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc4c889131f4b27d379add3ca15fb49b24bb45c4"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "187831137f00e89f213db7b3b710930367732e85", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b854f2307ead678a7a3b77a607b1e6ff5bd631/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b854f2307ead678a7a3b77a607b1e6ff5bd631/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f5b854f2307ead678a7a3b77a607b1e6ff5bd631", "patch": "@@ -1,3 +1,9 @@\n+2006-05-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* trans-intrinsic.c (gfc_conv_associated): If pointer in first\n+\targuments has zero array length of zero string length, return\n+\tfalse.\n+\n 2006-05-26  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/27524"}, {"sha": "5db166b83d3d1ac25a5d62e2b8e28373f649693c", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b854f2307ead678a7a3b77a607b1e6ff5bd631/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b854f2307ead678a7a3b77a607b1e6ff5bd631/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=f5b854f2307ead678a7a3b77a607b1e6ff5bd631", "patch": "@@ -2813,6 +2813,8 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n   tree tmp2;\n   tree tmp;\n   tree args, fndecl;\n+  tree nonzero_charlen;\n+  tree nonzero_arraylen;\n   gfc_ss *ss1, *ss2;\n \n   gfc_init_se (&arg1se, NULL);\n@@ -2821,6 +2823,23 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n   arg2 = arg1->next;\n   ss1 = gfc_walk_expr (arg1->expr);\n \n+  nonzero_charlen = NULL_TREE;\n+  if (arg1->expr->ts.type == BT_CHARACTER)\n+    nonzero_charlen = build2 (NE_EXPR, boolean_type_node,\n+\t\t\t      arg1->expr->ts.cl->backend_decl,\n+\t\t\t      integer_zero_node);\n+\n+  nonzero_arraylen = NULL_TREE;\n+  if (ss1 != gfc_ss_terminator)\n+    {\n+      arg1se.descriptor_only = 1;\n+      gfc_conv_expr_lhs (&arg1se, arg1->expr);\n+      tmp = gfc_conv_descriptor_stride (arg1se.expr,\n+\t\t\tgfc_rank_cst[arg1->expr->rank - 1]);\n+      nonzero_arraylen = build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t tmp, integer_zero_node);\n+    }\n+\n   if (!arg2->expr)\n     {\n       /* No optional target.  */\n@@ -2874,6 +2893,13 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n           se->expr = build_function_call_expr (fndecl, args);\n         }\n      }\n+\n+  if (nonzero_charlen != NULL_TREE)\n+    se->expr = build2 (TRUTH_AND_EXPR, boolean_type_node,\n+\t\t       se->expr, nonzero_charlen);\n+  if (nonzero_arraylen != NULL_TREE)\n+    se->expr = build2 (TRUTH_AND_EXPR, boolean_type_node,\n+\t\t       se->expr, nonzero_arraylen);\n   se->expr = convert (gfc_typenode_for_spec (&expr->ts), se->expr);\n }\n "}, {"sha": "83b4d760b42314d01159e1aa8c8c2ab406c164f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b854f2307ead678a7a3b77a607b1e6ff5bd631/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b854f2307ead678a7a3b77a607b1e6ff5bd631/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5b854f2307ead678a7a3b77a607b1e6ff5bd631", "patch": "@@ -1,3 +1,7 @@\n+2006-05-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* gfortran.dg/associated_2.f90: New test.\n+\n 2006-05-26  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/27524"}, {"sha": "7ef955f0db61f3e95307d0e5d76dda64d4d3a541", "filename": "gcc/testsuite/gfortran.dg/associated_2.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b854f2307ead678a7a3b77a607b1e6ff5bd631/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b854f2307ead678a7a3b77a607b1e6ff5bd631/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_2.f90?ref=f5b854f2307ead678a7a3b77a607b1e6ff5bd631", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+! Tests the implementation of 13.14.13 of the f95 standard\n+! in respect of zero character and zero array length.\n+!\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+!\n+  call test1 ()\n+  call test2 ()\n+  call test3 (0)\n+  call test3 (1)\n+contains\n+  subroutine test1 ()\n+    integer, pointer, dimension(:, :, :)  :: a, b\n+    allocate (a(2,0,2))\n+    b => a\n+    if (associated (b)) call abort ()\n+    allocate (a(2,1,2))\n+    b => a\n+    if (.not.associated (b)) call abort ()\n+  end subroutine test1\n+  subroutine test2 ()\n+    integer, pointer, dimension(:, :, :)  :: a, b\n+    allocate (a(2,0,2))\n+    b => a\n+    if (associated (b, a)) call abort ()\n+    allocate (a(2,1,2))\n+    b => a\n+    if (.not.associated (b, a)) call abort ()\n+  end subroutine test2\n+  subroutine test3 (n)\n+    integer :: n\n+    character(len=n), pointer, dimension(:)  :: a, b\n+    allocate (a(2))\n+    b => a\n+    if (associated (b, a) .and. (n .eq. 0)) call abort ()\n+    if ((.not.associated (b, a))  .and. (n .ne. 0)) call abort ()\n+  end subroutine test3\n+end\n\\ No newline at end of file"}]}