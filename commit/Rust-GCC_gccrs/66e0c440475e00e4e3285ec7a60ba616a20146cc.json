{"sha": "66e0c440475e00e4e3285ec7a60ba616a20146cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZlMGM0NDA0NzVlMDBlNGUzMjg1ZWM3YTYwYmE2MTZhMjAxNDZjYw==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2004-01-12T20:10:19Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-01-12T20:10:19Z"}, "message": "re PR c++/13289 (ICE in regenerate_decl_from_template on recursive template)\n\n2004-01-12  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n\n        PR c++/13289\n        * pt.c (instantiate_decl): Set DECL_TEMPLATE_INSTANTIATED before\n        calling regenerate_decl_from_template.\n2004-01-12  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n\n        PR c++/13289\n        * g++.dg/template/instantiate6.C: New test.\n\nFrom-SVN: r75752", "tree": {"sha": "8439ef5aaf960c564248bf95832df80f5ccb251b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8439ef5aaf960c564248bf95832df80f5ccb251b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66e0c440475e00e4e3285ec7a60ba616a20146cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e0c440475e00e4e3285ec7a60ba616a20146cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e0c440475e00e4e3285ec7a60ba616a20146cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e0c440475e00e4e3285ec7a60ba616a20146cc/comments", "author": null, "committer": null, "parents": [{"sha": "ff2aaa93cca8eb386814327694def7ecc0831005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2aaa93cca8eb386814327694def7ecc0831005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2aaa93cca8eb386814327694def7ecc0831005"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "109dc83fb2fe8cc603fd10b728cacac98d8d5171", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e0c440475e00e4e3285ec7a60ba616a20146cc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e0c440475e00e4e3285ec7a60ba616a20146cc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=66e0c440475e00e4e3285ec7a60ba616a20146cc", "patch": "@@ -1,3 +1,9 @@\n+2004-01-12  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/13289\n+\t* pt.c (instantiate_decl): Set DECL_TEMPLATE_INSTANTIATED before\n+\tcalling regenerate_decl_from_template.\n+\n 2004-01-12  Scott Brumbaugh  <scottb.lists@verizon.net>\n \n \tPR c++/4100"}, {"sha": "81dd711e033770de8c683acc1f98aa6202bd4a4e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e0c440475e00e4e3285ec7a60ba616a20146cc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e0c440475e00e4e3285ec7a60ba616a20146cc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=66e0c440475e00e4e3285ec7a60ba616a20146cc", "patch": "@@ -11016,6 +11016,10 @@ instantiate_decl (tree d, int defer_ok)\n   if (need_push)\n     push_to_top_level ();\n \n+  /* Mark D as instantiated so that recursive calls to\n+     instantiate_decl do not try to instantiate it again.  */\n+  DECL_TEMPLATE_INSTANTIATED (d) = 1;\n+\n   /* Regenerate the declaration in case the template has been modified\n      by a subsequent redeclaration.  */\n   regenerate_decl_from_template (d, td);\n@@ -11052,13 +11056,14 @@ instantiate_decl (tree d, int defer_ok)\n \t     instantiation.  There, we cannot implicitly instantiate a\n \t     defined static data member in more than one translation\n \t     unit, so import_export_decl marks the declaration as\n-\t     external; we must rely on explicit instantiation.  */\n+\t     external; we must rely on explicit instantiation.\n+\n+             Reset instantiated marker to make sure that later\n+             explicit instantiation will be processed.  */\n+          DECL_TEMPLATE_INSTANTIATED (d) = 0;\n \t}\n       else\n \t{\n-\t  /* Mark D as instantiated so that recursive calls to\n-\t     instantiate_decl do not try to instantiate it again.  */\n-\t  DECL_TEMPLATE_INSTANTIATED (d) = 1;\n \t  /* This is done in analogous to `start_decl'.  It is\n \t     required for correct access checking.  */\n \t  push_nested_class (DECL_CONTEXT (d));"}, {"sha": "0c67ba101b01fa77241416753eac258a3e2985a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e0c440475e00e4e3285ec7a60ba616a20146cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e0c440475e00e4e3285ec7a60ba616a20146cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66e0c440475e00e4e3285ec7a60ba616a20146cc", "patch": "@@ -1,3 +1,8 @@\n+2004-01-12  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/13289\n+\t* g++.dg/template/instantiate6.C: New test.\n+\n 2004-01-12  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/11397"}, {"sha": "d5d712ee09122b4ab6b5e9615a00eb1e9836eca3", "filename": "gcc/testsuite/g++.dg/template/instantiate6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e0c440475e00e4e3285ec7a60ba616a20146cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e0c440475e00e4e3285ec7a60ba616a20146cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate6.C?ref=66e0c440475e00e4e3285ec7a60ba616a20146cc", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+\n+// Origin: gianni@mariani.ws\n+//       Wolfgang Bangerth <bangerth@ticam.utexas.edu>\n+\n+// PR c++/13289: ICE recursively instantiate static member data.\n+\n+template <int N> struct S { \n+    static const int C; \n+}; \n+ \n+template <int N> \n+const int S<N>::C = S<(N+1)%2>::C;\n+ \n+template struct S<1>;\n+"}]}