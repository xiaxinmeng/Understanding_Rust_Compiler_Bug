{"sha": "4e252e23d34932f13f39cc6544bf5c9379fa2a87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUyNTJlMjNkMzQ5MzJmMTNmMzljYzY1NDRiZjVjOTM3OWZhMmE4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-09T15:44:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-09T15:44:27Z"}, "message": "c++: Fix coroutines on targetm.cxx.cdtor_return_this targets [PR99459]\n\nThe r11-7528 build_co_await changes broke coroutines on arm*-linux-gnuabi,\n2780 ^FAIL.*coroutines/ in total.\nThe problem is that arm is targetm.cxx.cdtor_return_this target where\nboth ctors and dtors in the ABI return this pointer rather than\nvoid, and build_new_method_call_1 does:\n              else if (call != error_mark_node\n                       && DECL_DESTRUCTOR_P (cand->fn)\n                       && !VOID_TYPE_P (TREE_TYPE (call)))\n                /* An explicit call of the form \"x->~X()\" has type\n                   \"void\".  However, on platforms where destructors\n                   return \"this\" (i.e., those where\n                   targetm.cxx.cdtor_returns_this is true), such calls\n                   will appear to have a return value of pointer type\n                   to the low-level call machinery.  We do not want to\n                   change the low-level machinery, since we want to be\n                   able to optimize \"delete f()\" on such platforms as\n                   \"operator delete(~X(f()))\" (rather than generating\n                   \"t = f(), ~X(t), operator delete (t)\").  */\n                call = build_nop (void_type_node, call);\nThe new code in build_co_await relies on build_special_member_call\nreturned expression being a CALL_EXPR, but due to the build_nop\nin there it is a NOP_EXPR around the CALL_EXPR.  It can't be stripped\nwith STRIP_NOPS because void has different mode from the pointer mode.\n\n2021-03-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99459\n\t* coroutines.cc (build_co_await): Look through NOP_EXPRs in\n\tbuild_special_member_call return value to find the CALL_EXPR.\n\tSimplify.", "tree": {"sha": "1591749aad56a0b073503102d8d717b56dc8c702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1591749aad56a0b073503102d8d717b56dc8c702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e252e23d34932f13f39cc6544bf5c9379fa2a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e252e23d34932f13f39cc6544bf5c9379fa2a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e252e23d34932f13f39cc6544bf5c9379fa2a87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e252e23d34932f13f39cc6544bf5c9379fa2a87/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d0ba06f717bc27b9a05682e3986e8f20aa7050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d0ba06f717bc27b9a05682e3986e8f20aa7050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d0ba06f717bc27b9a05682e3986e8f20aa7050"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "c5aeb660ae8ef7b0ab26de4132bbfe5c85d6c876", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e252e23d34932f13f39cc6544bf5c9379fa2a87/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e252e23d34932f13f39cc6544bf5c9379fa2a87/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=4e252e23d34932f13f39cc6544bf5c9379fa2a87", "patch": "@@ -863,16 +863,17 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n \t     final awaiter, so check for a non-throwing DTOR where needed.  */\n \t  tree a_type = TREE_TYPE (a);\n \t  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (a_type))\n-\t    {\n-\t      tree dummy\n+\t    if (tree dummy\n \t\t= build_special_member_call (a, complete_dtor_identifier,\n \t\t\t\t\t     NULL, a_type, LOOKUP_NORMAL,\n-\t\t\t\t\t     tf_none);\n-\t      dummy = dummy ? TREE_OPERAND (CALL_EXPR_FN (dummy), 0)\n-\t\t\t    : NULL_TREE;\n-\t      if (dummy && coro_diagnose_throwing_fn (dummy))\n-\t\treturn error_mark_node;\n-\t    }\n+\t\t\t\t\t     tf_none))\n+\t      {\n+\t\tif (CONVERT_EXPR_P (dummy))\n+\t\t  dummy = TREE_OPERAND (dummy, 0);\n+\t\tdummy = TREE_OPERAND (CALL_EXPR_FN (dummy), 0);\n+\t\tif (coro_diagnose_throwing_fn (dummy))\n+\t\t  return error_mark_node;\n+\t      }\n \t}\n     }\n   else\n@@ -1026,16 +1027,17 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n       if (coro_diagnose_throwing_fn (awrs_func))\n \treturn error_mark_node;\n       if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (o_type))\n-\t{\n-\t  tree dummy\n+\tif (tree dummy\n \t    = build_special_member_call (e_proxy, complete_dtor_identifier,\n \t\t\t\t\t NULL, o_type, LOOKUP_NORMAL,\n-\t\t\t\t\t tf_none);\n-\t  dummy = dummy ? TREE_OPERAND (CALL_EXPR_FN (dummy), 0)\n-\t\t\t: NULL_TREE;\n-\t  if (dummy && coro_diagnose_throwing_fn (dummy))\n-\t    return error_mark_node;\n-\t}\n+\t\t\t\t\t tf_none))\n+\t  {\n+\t    if (CONVERT_EXPR_P (dummy))\n+\t      dummy = TREE_OPERAND (dummy, 0);\n+\t    dummy = TREE_OPERAND (CALL_EXPR_FN (dummy), 0);\n+\t    if (coro_diagnose_throwing_fn (dummy))\n+\t      return error_mark_node;\n+\t  }\n     }\n \n   /* We now have three call expressions, in terms of the promise, handle and"}]}