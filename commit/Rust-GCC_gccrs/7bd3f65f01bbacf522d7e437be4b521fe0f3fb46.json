{"sha": "7bd3f65f01bbacf522d7e437be4b521fe0f3fb46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkM2Y2NWYwMWJiYWNmNTIyZDdlNDM3YmU0YjUyMWZlMGYzZmI0Ng==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-16T21:15:00Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-16T21:15:00Z"}, "message": "sh.md: Delete mov related define_peephole patterns.\n\n\t* config/sh/sh.md: Delete mov related define_peephole patterns.\n\nFrom-SVN: r189550", "tree": {"sha": "9bc8d046c7cffee1299e2bef50711ab8a9c8eed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bc8d046c7cffee1299e2bef50711ab8a9c8eed4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bd3f65f01bbacf522d7e437be4b521fe0f3fb46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd3f65f01bbacf522d7e437be4b521fe0f3fb46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd3f65f01bbacf522d7e437be4b521fe0f3fb46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd3f65f01bbacf522d7e437be4b521fe0f3fb46/comments", "author": null, "committer": null, "parents": [{"sha": "c2092deb7f2a90a56c44db0439ef60309e1e2d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2092deb7f2a90a56c44db0439ef60309e1e2d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2092deb7f2a90a56c44db0439ef60309e1e2d75"}], "stats": {"total": 68, "additions": 4, "deletions": 64}, "files": [{"sha": "a983274f957f25b81e1d740a57e1121b6ebdadd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd3f65f01bbacf522d7e437be4b521fe0f3fb46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd3f65f01bbacf522d7e437be4b521fe0f3fb46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bd3f65f01bbacf522d7e437be4b521fe0f3fb46", "patch": "@@ -1,3 +1,7 @@\n+2012-07-16  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.md: Delete mov related define_peephole patterns.\n+\n 2012-07-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR c++/53919"}, {"sha": "ee0981efa911a0e1b26d25b71da094a9977764a6", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd3f65f01bbacf522d7e437be4b521fe0f3fb46/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd3f65f01bbacf522d7e437be4b521fe0f3fb46/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=7bd3f65f01bbacf522d7e437be4b521fe0f3fb46", "patch": "@@ -11800,70 +11800,6 @@ label:\n \t(mem:HI (plus:SI (match_dup 1) (match_dup 2))))]\n   \"\")\n \n-;; These convert sequences such as `mov #k,r0; add r15,r0; mov.l @r0,rn'\n-;; to `mov #k,r0; mov.l @(r0,r15),rn'.  These sequences are generated by\n-;; reload when the constant is too large for a reg+offset address.\n-\n-;; ??? We would get much better code if this was done in reload.  This would\n-;; require modifying find_reloads_address to recognize that if the constant\n-;; is out-of-range for an immediate add, then we get better code by reloading\n-;; the constant into a register than by reloading the sum into a register,\n-;; since the former is one instruction shorter if the address does not need\n-;; to be offsettable.  Unfortunately this does not work, because there is\n-;; only one register, r0, that can be used as an index register.  This register\n-;; is also the function return value register.  So, if we try to force reload\n-;; to use double-reg addresses, then we end up with some instructions that\n-;; need to use r0 twice.  The only way to fix this is to change the calling\n-;; convention so that r0 is not used to return values.\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (match_dup 0) (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (mem:SI (match_dup 0))\n-\t(match_operand:SI 2 \"general_movsrc_operand\" \"\"))]\n-  \"TARGET_SH1 && REGNO (operands[0]) == 0 && reg_unused_after (operands[0], insn)\"\n-  \"mov.l\t%2,@(%0,%1)\")\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (match_dup 0) (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (match_operand:SI 2 \"general_movdst_operand\" \"\")\n-\t(mem:SI (match_dup 0)))]\n-  \"TARGET_SH1 && REGNO (operands[0]) == 0 && reg_unused_after (operands[0], insn)\"\n-  \"mov.l\t@(%0,%1),%2\")\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (match_dup 0) (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (mem:HI (match_dup 0))\n-\t(match_operand:HI 2 \"general_movsrc_operand\" \"\"))]\n-  \"TARGET_SH1 && REGNO (operands[0]) == 0 && reg_unused_after (operands[0], insn)\"\n-  \"mov.w\t%2,@(%0,%1)\")\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (match_dup 0) (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (match_operand:HI 2 \"general_movdst_operand\" \"\")\n-\t(mem:HI (match_dup 0)))]\n-  \"TARGET_SH1 && REGNO (operands[0]) == 0 && reg_unused_after (operands[0], insn)\"\n-  \"mov.w\t@(%0,%1),%2\")\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (match_dup 0) (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (mem:QI (match_dup 0))\n-\t(match_operand:QI 2 \"general_movsrc_operand\" \"\"))]\n-  \"TARGET_SH1 && REGNO (operands[0]) == 0 && reg_unused_after (operands[0], insn)\"\n-  \"mov.b\t%2,@(%0,%1)\")\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (match_dup 0) (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (match_operand:QI 2 \"general_movdst_operand\" \"\")\n-\t(mem:QI (match_dup 0)))]\n-  \"TARGET_SH1 && REGNO (operands[0]) == 0 && reg_unused_after (operands[0], insn)\"\n-  \"mov.b\t@(%0,%1),%2\")\n-\n (define_peephole\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (match_dup 0) (match_operand:SI 1 \"register_operand\" \"r\")))"}]}