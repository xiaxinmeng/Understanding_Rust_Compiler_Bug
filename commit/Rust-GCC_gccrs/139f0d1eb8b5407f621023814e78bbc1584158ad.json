{"sha": "139f0d1eb8b5407f621023814e78bbc1584158ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM5ZjBkMWViOGI1NDA3ZjYyMTAyMzgxNGU3OGJiYzE1ODQxNThhZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@act-europe.fr", "date": "2003-11-10T10:25:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-11-10T10:25:21Z"}, "message": "Makefile.in, [...]: Remove build of gnat_wrapper and gnatpsta, no longer needed.\n\n\t* Makefile.in, Make-lang.in: Remove build of gnat_wrapper and gnatpsta,\n\tno longer needed.\n\n\t* gnatpsta.adb, gnat_wrapper.adb: Removed, no longer needed.\n\n\t* sysdep.c: Add handling of cygwin.\n\nFrom-SVN: r73412", "tree": {"sha": "b4b79d44e52bb37624a404e6b36d3dc4bc4cd63d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4b79d44e52bb37624a404e6b36d3dc4bc4cd63d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/139f0d1eb8b5407f621023814e78bbc1584158ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139f0d1eb8b5407f621023814e78bbc1584158ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/139f0d1eb8b5407f621023814e78bbc1584158ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139f0d1eb8b5407f621023814e78bbc1584158ad/comments", "author": null, "committer": null, "parents": [{"sha": "f3e4c05ca9387d2e7c46aa80b5cca15430eb04fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e4c05ca9387d2e7c46aa80b5cca15430eb04fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3e4c05ca9387d2e7c46aa80b5cca15430eb04fb"}], "stats": {"total": 547, "additions": 13, "deletions": 534}, "files": [{"sha": "b5fb857bbea48b585ee5641cfbbb18db8f30210f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139f0d1eb8b5407f621023814e78bbc1584158ad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139f0d1eb8b5407f621023814e78bbc1584158ad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=139f0d1eb8b5407f621023814e78bbc1584158ad", "patch": "@@ -1,3 +1,12 @@\n+2003-11-10  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\t* Makefile.in, Make-lang.in: Remove build of gnat_wrapper and gnatpsta,\n+\tno longer needed.\n+\n+\t* gnatpsta.adb, gnat_wrapper.adb: Removed, no longer needed.\n+\n+\t* sysdep.c: Add handling of cygwin.\n+\n 2003-11-10  GNAT Script  <nobody@gnat.com>\n \n \t* Make-lang.in: Makefile automatically updated"}, {"sha": "b5c234b1088fba29e18dc38a02b679ed759a046c", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139f0d1eb8b5407f621023814e78bbc1584158ad/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139f0d1eb8b5407f621023814e78bbc1584158ad/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=139f0d1eb8b5407f621023814e78bbc1584158ad", "patch": "@@ -403,10 +403,6 @@ ada.all.cross:\n \tthen \\\n \t   $(MV) gnatprep$(exeext)  gnatprep-cross$(exeext); \\\n \tfi\n-\t-if [ -f gnatpsta$(exeext) ] ; \\\n-\tthen \\\n-\t   $(MV) gnatpsta$(exeext)  gnatpsta-cross$(exeext); \\\n-\tfi\n \t-if [ -f gnatxref$(exeext) ] ; \\\n \tthen \\\n \t   $(MV) gnatxref$(exeext)  gnatxref-cross$(exeext); \\\n@@ -710,21 +706,6 @@ ada.install-common:\n \t  fi ; \\\n \tfi\n \t-if [ -f gnat1$(exeext) ] ; \\\n-\tthen \\\n-\t  if [ -f gnatpsta-cross$(exeext) ] ; \\\n-\t  then \\\n-\t    $(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatpsta$(exeext); \\\n-\t    $(INSTALL_PROGRAM) gnatpsta-cross$(exeext) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatpsta$(exeext); \\\n-\t    if [ -d $(DESTDIR)$(tooldir)/bin/. ] ; then \\\n-\t       rm -f $(DESTDIR)$(tooldir)/bin/gnatpsta$(exeext); \\\n-\t       $(INSTALL_PROGRAM) gnatpsta-cross$(exeext) $(DESTDIR)$(tooldir)/bin/gnatpsta$(exeext); \\\n-\t    fi; \\\n-\t  else \\\n-\t    $(RM) $(DESTDIR)$(bindir)/gnatpsta$(exeext); \\\n-\t    $(INSTALL_PROGRAM) gnatpsta$(exeext) $(DESTDIR)$(bindir)/gnatpsta$(exeext); \\\n-\t  fi ; \\\n-\tfi\n-\t-if [ -f gnat1$(exeext) ] ; \\\n \tthen \\\n \t  if [ -f gnatxref-cross$(exeext) ] ; \\\n \t  then \\\n@@ -857,7 +838,6 @@ ada.uninstall:\n \t-$(RM) $(DESTDIR)$(bindir)/gnatmem$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/gnatname$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/gnatprep$(exeext)\n-\t-$(RM) $(DESTDIR)$(bindir)/gnatpsta$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/gnatxref$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/gnatclean$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/gnatsym$(exeext)\n@@ -875,7 +855,6 @@ ada.uninstall:\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatmem$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatname$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatprep$(exeext)\n-\t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatpsta$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatxref$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatclean$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatsym$(exeext)\n@@ -893,7 +872,6 @@ ada.uninstall:\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatmem$(exeext)\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatname$(exeext)\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatprep$(exeext)\n-\t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatpsta$(exeext)\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatxref$(exeext)\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatclean$(exeext)\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatsym$(exeext)\n@@ -923,7 +901,6 @@ ada.distclean:\n \t-$(RM) gnatmem$(exeext)\n \t-$(RM) gnatname$(exeext)\n \t-$(RM) gnatprep$(exeext)\n-\t-$(RM) gnatpsta$(exeext)\n \t-$(RM) gnatfind$(exeext)\n \t-$(RM) gnatxref$(exeext)\n \t-$(RM) gnatclean$(exeext)"}, {"sha": "56d83a6238ed6f052d2eb00c118045d1019c6e07", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139f0d1eb8b5407f621023814e78bbc1584158ad/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139f0d1eb8b5407f621023814e78bbc1584158ad/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=139f0d1eb8b5407f621023814e78bbc1584158ad", "patch": "@@ -1320,7 +1320,6 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n   GMEM_LIB = gmemlib\n   PREFIX_OBJS = $(PREFIX_REAL_OBJS)\n   EXTRA_GNATTOOLS = ../../gnatdll$(exeext)\n-  GNAT_WRAPPER_TOOL = ../../gnat_wrapper$(exeext)\n   EXTRA_GNATMAKE_OBJS = mdll.o mdll-utl.o mdll-fil.o\n   EXTRA_GNATRTL_NONTASKING_OBJS = g-regist.o\n   soext = .dll\n@@ -1660,11 +1659,10 @@ gnattools2: ../stamp-tools\n \t  TOOLSCASE=native \\\n \t  ../../gnatchop$(exeext) ../../gnat$(exeext) ../../gnatkr$(exeext) \\\n \t  ../../gnatls$(exeext) ../../gnatprep$(exeext) \\\n-\t  ../../gnatpsta$(exeext) ../../gnatxref$(exeext) \\\n+\t  ../../gnatxref$(exeext) \\\n \t  ../../gnatfind$(exeext) ../../gnatname$(exeext) \\\n \t  ../../gnatclean$(exeext) \\\n-\t  ../../gprcmd$(exeext)   ../../gpr2make$(exeext) \\\n-\t  $(GNAT_WRAPPER_TOOL)\n+\t  ../../gprcmd$(exeext)   ../../gpr2make$(exeext)\n \n # These tools are only built for the native version.\n gnattools3: ../stamp-tools\n@@ -1717,12 +1715,6 @@ gnattools4: ../stamp-tools\n \t$(GNATLINK) -v gnatprep -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n \t\t    $(TOOLS_LIBS)\n \n-../../gnatpsta$(exeext): deftarg.o ../stamp-tools\n-#\t$(GNATMAKE) -c $(ADA_INCLUDES) gnatpsta --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n-#\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatpsta \n-#\t$(GNATLINK) -v gnatpsta -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\"\\\n-#                      ../targtyps.o deftarg.o $(TOOLS_LIBS)\n-\n ../../gnatxref$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatxref --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatxref \n@@ -1761,12 +1753,6 @@ endif\n \t$(GNATLINK) -v gnatdll -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n \t\t$(TOOLS_LIBS)\n \n-../../gnat_wrapper$(exeext): ../stamp-tools\n-\t$(GNATMAKE) -c -O2 -gnatpn $(ADA_INCLUDES) gnat_wrapper --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n-\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnat_wrapper\n-\t$(GNATLINK) -v gnat_wrapper -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t\t$(TOOLS_LIBS)\n-\n ../../gprcmd$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gprcmd --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gprcmd "}, {"sha": "189cdc46ea10679856427e55b202e0326e0ac657", "filename": "gcc/ada/gnat_wrapper.adb", "status": "removed", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e4c05ca9387d2e7c46aa80b5cca15430eb04fb/gcc%2Fada%2Fgnat_wrapper.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e4c05ca9387d2e7c46aa80b5cca15430eb04fb/gcc%2Fada%2Fgnat_wrapper.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_wrapper.adb?ref=f3e4c05ca9387d2e7c46aa80b5cca15430eb04fb", "patch": "@@ -1,121 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                         G N A T _ W R A P P E R                          --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 2002-2003 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  GNAT_Wrapper is to be used as the starter program for most of the GNAT\n---  executables. It sets up the working environment variables and calls the\n---  real executable which is to be found under the 'real' sub-directory.\n---\n---  This avoids using the registry on Windows which is tricky to setup to run\n---  multiple compilers (GNAT Pro release and wavefronts for example) at the\n---  same time.\n-\n-with Ada.Command_Line;          use Ada.Command_Line;\n-with GNAT.OS_Lib;               use GNAT.OS_Lib;\n-\n-procedure GNAT_Wrapper is\n-   DS : Character renames Directory_Separator;\n-   PS : Character renames Path_Separator;\n-\n-   procedure Split_Command;\n-   --  Parse Actual_Name and set K and L variables (see below).\n-\n-   Actual_Name : String_Access := new String'(Command_Name);\n-\n-   K : Natural;\n-   --  Index of the directory separator just before program name's first\n-   --  character.\n-\n-   L : Natural;\n-   --  Index of the last character of the GNATPRO install directory.\n-\n-   LD_LIBRARY_PATH : String_Access := Getenv (\"LD_LIBRARY_PATH\");\n-   PATH            : String_Access := Getenv (\"PATH\");\n-\n-   -------------------\n-   -- Split_Command --\n-   -------------------\n-\n-   procedure Split_Command is\n-   begin\n-      K := Actual_Name'Last;\n-      loop\n-         exit when K = 0\n-           or else Actual_Name (K) = '\\' or else Actual_Name (K) = '/';\n-         K := K - 1;\n-      end loop;\n-   end Split_Command;\n-\n-begin\n-   Split_Command;\n-\n-   if K = 0 then\n-      --  No path information found, locate the program on the path.\n-      declare\n-         Old : String_Access := Actual_Name;\n-      begin\n-         Actual_Name := Locate_Exec_On_Path (Actual_Name.all);\n-         Free (Old);\n-\n-         Split_Command;\n-      end;\n-   end if;\n-\n-   --  Skip 'bin' from directory above. GNAT binaries are always under\n-   --  <gnatpro>/bin directory.\n-\n-   L := K - 4;\n-\n-   declare\n-      Prog   : constant String := Actual_Name (K + 1 .. Actual_Name'Last);\n-      Dir    : constant String := Actual_Name (Actual_Name'First .. L - 1);\n-      Real   : constant String := Dir & DS & \".bin\";\n-      Bin    : constant String := Dir & DS & \"bin\";\n-      Args   : Argument_List (1 .. Argument_Count);\n-      Result : Integer;\n-\n-   begin\n-      Setenv (\"GCC_ROOT\", Dir);\n-      Setenv (\"GNAT_ROOT\", Dir);\n-      Setenv (\"BINUTILS_ROOT\", Dir);\n-      Setenv (\"LD_LIBRARY_PATH\", Dir & DS & \"lib\" & PS & LD_LIBRARY_PATH.all);\n-      Setenv (\"PATH\", Real & PS & Bin & PS & PATH.all);\n-\n-      --  Call the right executable under \"<dir>/.bin\"\n-\n-      for K in 1 .. Argument_Count loop\n-         Args (K) := new String'(Argument (K));\n-      end loop;\n-\n-      Normalize_Arguments (Args);\n-      Result := Spawn (Real & DS & Prog, Args);\n-\n-      for K in 1 .. Argument_Count loop\n-         Free (Args (K));\n-      end loop;\n-\n-      OS_Exit (Result);\n-   end;\n-end GNAT_Wrapper;"}, {"sha": "502445d355f64d5f254bd40e5c6a8ae40c0187ce", "filename": "gcc/ada/gnatpsta.adb", "status": "removed", "additions": 0, "deletions": 373, "changes": 373, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e4c05ca9387d2e7c46aa80b5cca15430eb04fb/gcc%2Fada%2Fgnatpsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e4c05ca9387d2e7c46aa80b5cca15430eb04fb/gcc%2Fada%2Fgnatpsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatpsta.adb?ref=f3e4c05ca9387d2e7c46aa80b5cca15430eb04fb", "patch": "@@ -1,373 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                          GNAT SYSTEM UTILITIES                           --\n---                                                                          --\n---                            G N A T P S T A                               --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1997-2003 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Program to print out listing of Standard package for the target (not\n---  the host) with all constants appearing explicitly. This is not really\n---  valid Ada, since one cannot really define new base types, but it is a\n---  helpful listing from a documentation point of view.\n-\n---  Note that special care has been taken to use the host parameters for\n---  integer and floating point sizes.\n-\n-with Ada.Text_IO; use Ada.Text_IO;\n-with Gnatvsn;\n-with Ttypef;      use Ttypef;\n-with Ttypes;      use Ttypes;\n-with Types;       use Types;\n-\n-procedure GnatPsta is\n-   pragma Ident (Gnatvsn.Gnat_Static_Version_String);\n-\n-   procedure P (Item : String) renames Ada.Text_IO.Put_Line;\n-\n-   procedure P_Int_Range   (Size : Pos; Put_First : Boolean := True);\n-   --  Prints the range of an integer based on its Size. If Put_First is\n-   --  False, then skip the first bound.\n-\n-   procedure P_Float_Range (Nb_Digits : Pos);\n-   --  Prints the maximum range of a Float whose 'Digits is given by Nb_Digits\n-\n-   -------------------\n-   -- P_Float_Range --\n-   -------------------\n-\n-   procedure P_Float_Range (Nb_Digits : Pos) is\n-   begin\n-      --  This routine assumes only IEEE floats.\n-      --  ??? Should the following be adapted for OpenVMS ?\n-\n-      case Nb_Digits is\n-         when IEEES_Digits =>\n-            P (\"     range \" & IEEES_First'Universal_Literal_String & \" .. \" &\n-                               IEEES_Last'Universal_Literal_String & \";\");\n-         when IEEEL_Digits =>\n-            P (\"     range \" & IEEEL_First'Universal_Literal_String & \" .. \" &\n-                               IEEEL_Last'Universal_Literal_String & \";\");\n-         when IEEEX_Digits =>\n-            P (\"     range \" & IEEEX_First'Universal_Literal_String & \" .. \" &\n-                               IEEEX_Last'Universal_Literal_String & \";\");\n-\n-         when others =>\n-            P (\";\");\n-      end case;\n-\n-      --  If one of the floating point types of the host computer has the\n-      --  same digits as the target float we are processing, then print out\n-      --  the float range using the host computer float type.\n-\n-      if Nb_Digits = Short_Float'Digits then\n-         P (\"     --    \" &\n-            Short_Float'First'Img & \" .. \" & Short_Float'Last'Img);\n-\n-      elsif Nb_Digits = Float'Digits then\n-         P (\"     --    \" &\n-            Float'First'Img & \" .. \" & Float'Last'Img);\n-\n-      elsif Nb_Digits = Long_Float'Digits then\n-         P (\"     --    \" &\n-            Long_Float'First'Img & \" .. \" & Long_Float'Last'Img);\n-\n-      elsif Nb_Digits = Long_Long_Float'Digits then\n-         P (\"     --    \" &\n-            Long_Long_Float'First'Img & \" .. \" & Long_Long_Float'Last'Img);\n-      end if;\n-\n-      New_Line;\n-   end P_Float_Range;\n-\n-   -----------------\n-   -- P_Int_Range --\n-   -----------------\n-\n-   procedure P_Int_Range (Size : Pos; Put_First : Boolean := True) is\n-   begin\n-      if Put_First then\n-         Put (\" is range -(2 **\" & Pos'Image (Size - 1) & \")\");\n-      end if;\n-      P (\" .. +(2 **\" & Pos'Image (Size - 1) & \" - 1);\");\n-   end P_Int_Range;\n-\n---  Start of processing for GnatPsta\n-\n-begin\n-   P (\"package Standard is\");\n-   P (\"pragma Pure(Standard);\");\n-   New_Line;\n-\n-   P (\"   type Boolean is (False, True);\");\n-   New_Line;\n-\n-   --  Integer types\n-\n-   Put (\"   type Integer\");\n-   P_Int_Range (Standard_Integer_Size);\n-   New_Line;\n-\n-   Put (\"   subtype Natural  is Integer range 0\");\n-   P_Int_Range (Standard_Integer_Size, Put_First => False);\n-\n-   Put (\"   subtype Positive is Integer range 1\");\n-   P_Int_Range (Standard_Integer_Size, Put_First => False);\n-   New_Line;\n-\n-   Put (\"   type Short_Short_Integer\");\n-   P_Int_Range (Standard_Short_Short_Integer_Size);\n-\n-   Put (\"   type Short_Integer      \");\n-   P_Int_Range (Standard_Short_Integer_Size);\n-\n-   Put (\"   type Long_Integer       \");\n-   P_Int_Range (Standard_Long_Integer_Size);\n-\n-   Put (\"   type Long_Long_Integer  \");\n-   P_Int_Range (Standard_Long_Long_Integer_Size);\n-   New_Line;\n-\n-   --  Floating point types\n-\n-   P (\"   type Short_Float     is digits\"\n-      & Standard_Short_Float_Digits'Img);\n-   P_Float_Range (Standard_Short_Float_Digits);\n-\n-   P (\"   type Float           is digits\"\n-      & Standard_Float_Digits'Img);\n-   P_Float_Range (Standard_Float_Digits);\n-\n-   P (\"   type Long_Float      is digits\"\n-      & Standard_Long_Float_Digits'Img);\n-   P_Float_Range (Standard_Long_Float_Digits);\n-\n-   P (\"   type Long_Long_Float is digits\"\n-      & Standard_Long_Long_Float_Digits'Img);\n-   P_Float_Range (Standard_Long_Long_Float_Digits);\n-\n-   P (\"   --  function \"\"*\"\" (Left : root_integer; Right : root_real)\");\n-   P (\"   --    return root_real;\");\n-   New_Line;\n-\n-   P (\"   --  function \"\"*\"\" (Left : root_real;    Right : root_integer)\");\n-   P (\"   --    return root_real;\");\n-   New_Line;\n-\n-   P (\"   --  function \"\"/\"\" (Left : root_real;    Right : root_integer)\");\n-   P (\"   --    return root_real;\");\n-   New_Line;\n-\n-   P (\"   --  function \"\"*\"\" (Left : universal_fixed; \" &\n-                                                \"Right : universal_fixed)\");\n-   P (\"   --    return universal_fixed;\");\n-   New_Line;\n-\n-   P (\"   --  function \"\"/\"\" (Left : universal_fixed; \" &\n-                                                \"Right : universal_fixed)\");\n-   P (\"   --    return universal_fixed;\");\n-   New_Line;\n-\n-   P (\"   --  The declaration of type Character is based on the standard\");\n-   P (\"   --  ISO 8859-1 character set.\");\n-   New_Line;\n-\n-   P (\"   --  There are no character literals corresponding to the positions\");\n-   P (\"   --  for control characters. They are indicated by lower case\");\n-   P (\"   --  identifiers in the following list.\");\n-   New_Line;\n-\n-   P (\"   --  Note: this type cannot be represented accurately in Ada\");\n-   New_Line;\n-\n-   P (\"   --  type Character is\");\n-   New_Line;\n-\n-   P (\"   --    (nul,  soh,  stx,  etx,     eot,  enq,  ack,  bel,\");\n-   P (\"   --     bs,   ht,   lf,   vt,      ff,   cr,   so,   si,\");\n-   New_Line;\n-\n-   P (\"   --     dle,  dc1,  dc2,  dc3,     dc4,  nak,  syn,  etb,\");\n-   P (\"   --     can,  em,   sub,  esc,     fs,   gs,   rs,   us,\");\n-   New_Line;\n-\n-   P (\"   --     ' ',  '!',  '\"\"', '#',     '$',  '%',  '&',  ''',\");\n-   P (\"   --     '(',  ')',  '*',  '+',     ',',  '-',  '.',  '/',\");\n-   New_Line;\n-\n-   P (\"   --     '0',  '1',  '2',  '3',     '4',  '5',  '6',  '7',\");\n-   P (\"   --     '8',  '9',  ':',  ';',     '<',  '=',  '>',  '?',\");\n-   New_Line;\n-\n-   P (\"   --     '@',  'A',  'B',  'C',     'D',  'E',  'F',  'G',\");\n-   P (\"   --     'H',  'I',  'J',  'K',     'L',  'M',  'N',  'O',\");\n-   New_Line;\n-\n-   P (\"   --     'P',  'Q',  'R',  'S',     'T',  'U',  'V',  'W',\");\n-   P (\"   --     'X',  'Y',  'Z',  '[',     '\\',  ']',  '^',  '_',\");\n-   New_Line;\n-\n-   P (\"   --     '`',  'a',  'b',  'c',     'd',  'e',  'f',  'g',\");\n-   P (\"   --     'h',  'i',  'j',  'k',     'l',  'm',  'n',  'o',\");\n-   New_Line;\n-\n-   P (\"   --     'p',  'q',  'r',  's',     't',  'u',  'v',  'w',\");\n-   P (\"   --     'x',  'y',  'z',  '{',     '|',  '}',  '~',  del,\");\n-   New_Line;\n-\n-   P (\"   --     reserved_128,     reserved_129,  bph,  nbh,\");\n-   P (\"   --     reserved_132,     nel,     ssa,  esa,\");\n-   New_Line;\n-\n-   P (\"   --     hts,  htj,  vts,  pld,     plu,  ri,   ss2,  ss3,\");\n-   New_Line;\n-\n-   P (\"   --     dcs,  pu1,  pu2,  sts,     cch,  mw,   spa,  epa,\");\n-   New_Line;\n-\n-   P (\"   --     sos, reserved_153, sci, csi,\");\n-   P (\"   --     st,   osc,  pm,   apc,\");\n-   New_Line;\n-\n-   P (\"   --   ... );\");\n-   New_Line;\n-\n-   P (\"   --  The declaration of type Wide_Character is based \" &\n-                                                        \"on the standard\");\n-   P (\"   --  ISO 10646 BMP character set.\");\n-   New_Line;\n-\n-   P (\"   --  Note: this type cannot be represented accurately in Ada\");\n-   New_Line;\n-\n-   P (\"   --  The first 256 positions have the same contents as \" &\n-                                                        \"type Character\");\n-   New_Line;\n-\n-   P (\"   --  type Wide_Character is (nul, soh ... FFFE, FFFF);\");\n-   New_Line;\n-\n-   P (\"   package ASCII is\");\n-   New_Line;\n-\n-   P (\"      --  Control characters:\");\n-   New_Line;\n-\n-   P (\"      NUL   : constant Character := Character'Val (16#00#);\");\n-   P (\"      SOH   : constant Character := Character'Val (16#01#);\");\n-   P (\"      STX   : constant Character := Character'Val (16#02#);\");\n-   P (\"      ETX   : constant Character := Character'Val (16#03#);\");\n-   P (\"      EOT   : constant Character := Character'Val (16#04#);\");\n-   P (\"      ENQ   : constant Character := Character'Val (16#05#);\");\n-   P (\"      ACK   : constant Character := Character'Val (16#06#);\");\n-   P (\"      BEL   : constant Character := Character'Val (16#07#);\");\n-   P (\"      BS    : constant Character := Character'Val (16#08#);\");\n-   P (\"      HT    : constant Character := Character'Val (16#09#);\");\n-   P (\"      LF    : constant Character := Character'Val (16#0A#);\");\n-   P (\"      VT    : constant Character := Character'Val (16#0B#);\");\n-   P (\"      FF    : constant Character := Character'Val (16#0C#);\");\n-   P (\"      CR    : constant Character := Character'Val (16#0D#);\");\n-   P (\"      SO    : constant Character := Character'Val (16#0E#);\");\n-   P (\"      SI    : constant Character := Character'Val (16#0F#);\");\n-   P (\"      DLE   : constant Character := Character'Val (16#10#);\");\n-   P (\"      DC1   : constant Character := Character'Val (16#11#);\");\n-   P (\"      DC2   : constant Character := Character'Val (16#12#);\");\n-   P (\"      DC3   : constant Character := Character'Val (16#13#);\");\n-   P (\"      DC4   : constant Character := Character'Val (16#14#);\");\n-   P (\"      NAK   : constant Character := Character'Val (16#15#);\");\n-   P (\"      SYN   : constant Character := Character'Val (16#16#);\");\n-   P (\"      ETB   : constant Character := Character'Val (16#17#);\");\n-   P (\"      CAN   : constant Character := Character'Val (16#18#);\");\n-   P (\"      EM    : constant Character := Character'Val (16#19#);\");\n-   P (\"      SUB   : constant Character := Character'Val (16#1A#);\");\n-   P (\"      ESC   : constant Character := Character'Val (16#1B#);\");\n-   P (\"      FS    : constant Character := Character'Val (16#1C#);\");\n-   P (\"      GS    : constant Character := Character'Val (16#1D#);\");\n-   P (\"      RS    : constant Character := Character'Val (16#1E#);\");\n-   P (\"      US    : constant Character := Character'Val (16#1F#);\");\n-   P (\"      DEL   : constant Character := Character'Val (16#7F#);\");\n-   New_Line;\n-\n-   P (\"      -- Other characters:\");\n-   New_Line;\n-\n-   P (\"      Exclam     : constant Character := '!';\");\n-   P (\"      Quotation  : constant Character := '\"\"';\");\n-   P (\"      Sharp      : constant Character := '#';\");\n-   P (\"      Dollar     : constant Character := '$';\");\n-   P (\"      Percent    : constant Character := '%';\");\n-   P (\"      Ampersand  : constant Character := '&';\");\n-   P (\"      Colon      : constant Character := ':';\");\n-   P (\"      Semicolon  : constant Character := ';';\");\n-   P (\"      Query      : constant Character := '?';\");\n-   P (\"      At_Sign    : constant Character := '@';\");\n-   P (\"      L_Bracket  : constant Character := '[';\");\n-   P (\"      Back_Slash : constant Character := '\\';\");\n-   P (\"      R_Bracket  : constant Character := ']';\");\n-   P (\"      Circumflex : constant Character := '^';\");\n-   P (\"      Underline  : constant Character := '_';\");\n-   P (\"      Grave      : constant Character := '`';\");\n-   P (\"      L_Brace    : constant Character := '{';\");\n-   P (\"      Bar        : constant Character := '|';\");\n-   P (\"      R_Brace    : constant Character := '}';\");\n-   P (\"      Tilde      : constant Character := '~';\");\n-   New_Line;\n-\n-   P (\"      -- Lower case letters:\");\n-   New_Line;\n-\n-   for C in Character range 'a' .. 'z' loop\n-      P (\"      LC_\" & Character'Val (Character'Pos (C) - 32) &\n-                  \" : constant Character := '\" & C & \"';\");\n-   end loop;\n-   New_Line;\n-\n-   P (\"   end ASCII;\");\n-   New_Line;\n-\n-   P (\"   type String is array (Positive range <>) of Character;\");\n-   P (\"   pragma Pack (String);\");\n-   New_Line;\n-\n-   P (\"   type Wide_String is array (Positive range <>) of Wide_Character;\");\n-   P (\"   pragma Pack (Wide_String);\");\n-   New_Line;\n-\n-   --  Here it's OK to use the Duration type of the host compiler since\n-   --  the implementation of Duration in GNAT is target independent.\n-\n-   P (\"   type Duration is delta\" &\n-            Duration'Image (Duration'Delta));\n-   P (\"     range -((2 **\" & Natural'Image (Duration'Size - 1) &\n-              \" - 1) *\" & Duration'Image (Duration'Delta) & \") ..\");\n-   P (\"           +((2 **\" & Natural'Image (Duration'Size - 1) &\n-              \" - 1) *\" & Duration'Image (Duration'Delta) & \");\");\n-   P (\"   for Duration'Small use\" & Duration'Image (Duration'Small) & \";\");\n-   New_Line;\n-\n-   P (\"   Constraint_Error : exception;\");\n-   P (\"   Program_Error    : exception;\");\n-   P (\"   Storage_Error    : exception;\");\n-   P (\"   Tasking_Error    : exception;\");\n-   New_Line;\n-\n-   P (\"end Standard;\");\n-end GnatPsta;"}, {"sha": "a0338b6058c8df1e6ce6df44ecba599190653284", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139f0d1eb8b5407f621023814e78bbc1584158ad/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139f0d1eb8b5407f621023814e78bbc1584158ad/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=139f0d1eb8b5407f621023814e78bbc1584158ad", "patch": "@@ -290,7 +290,8 @@ __gnat_ttyname (int filedes)\n #if defined (linux) || defined (sun) || defined (sgi) || defined (__EMX__) \\\n   || (defined (__osf__) && ! defined (__alpha_vxworks)) || defined (WINNT) \\\n   || defined (__MACHTEN__) || defined (hpux) || defined (_AIX) \\\n-  || (defined (__svr4__) && defined (i386)) || defined (__Lynx__)\n+  || (defined (__svr4__) && defined (i386)) || defined (__Lynx__) \\\n+  || defined (__CYGWIN__)\n \n #ifdef __MINGW32__\n #if OLD_MINGW"}]}