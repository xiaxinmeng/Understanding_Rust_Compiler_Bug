{"sha": "37c2d99f3f569350ebc0de43c10374b90086b832", "node_id": "C_kwDOANBUbNoAKDM3YzJkOTlmM2Y1NjkzNTBlYmMwZGU0M2MxMDM3NGI5MDA4NmI4MzI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-13T21:16:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-13T21:16:34Z"}, "message": "i386: Fix up *concat*_{5,6,7} patterns [PR108044]\n\nThe following patch fixes 2 issues with the *concat<half><mode>3_5 and\n*concat<mode><dwi>3_{6,7} patterns.\nOne is that if the destination is memory rather than register, then\nwe can't use movabsq and so can't support all the possible immediates.\nI see 3 possibilities to fix that.  One would be to use\nx86_64_hilo_int_operand predicate instead of const_scalar_int_operand\nand thus not match it at all during combine in such cases, but that\nunnecessarily pessimizes also the case when it is loaded into register\nwhere we can use movabsq.\nAnother one is what is implemented in the patch, use Wd constraint\nfor the integer on 64-bit if destination is memory and n otherwise.\nYet another option would be to add match_scratch to the pattern and use\nit with =X constraints except for the =o case for 64-bit non-Wd where it\nwould give a single DImode register (rather than 2).\n\nAnother thing is that if one half of the constant is\nix86_endbr_immediate_operand, then for -fcf-protection=branch we\nforce those constants into memory and that might not work properly\nwith -fpic.  So we should refuse to match with such constants.\nOT, seems for movabsq we don't check that and happily allow the endbr\npattern in the immediate.\n\n2022-12-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/108044\n\t* config/i386/i386.md (*concat<half><mode>3_5, *concat<mode><dwi>3_6,\n\t*concat<mode><dwi>3_7): Split alternative with =ro output constraint\n\tinto =r,o,o and use Wd input constraint for the last alternative which\n\tis enabled for TARGET_64BIT.  Reject ix86_endbr_immediate_operand\n\tin the input constant.\n\n\t* gcc.target/i386/pr108044-1.c: New test.\n\t* gcc.target/i386/pr108044-2.c: New test.\n\t* gcc.target/i386/pr108044-3.c: New test.\n\t* gcc.target/i386/pr108044-4.c: New test.", "tree": {"sha": "08217010a64dc2a14178eefd3bf02e2f032102da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08217010a64dc2a14178eefd3bf02e2f032102da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37c2d99f3f569350ebc0de43c10374b90086b832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c2d99f3f569350ebc0de43c10374b90086b832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37c2d99f3f569350ebc0de43c10374b90086b832", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c2d99f3f569350ebc0de43c10374b90086b832/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82afb6976411b0eca0c50f49cf889cce4df8919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82afb6976411b0eca0c50f49cf889cce4df8919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82afb6976411b0eca0c50f49cf889cce4df8919"}], "stats": {"total": 155, "additions": 140, "deletions": 15}, "files": [{"sha": "06267529245f298033a263011a20124e252a3f53", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c2d99f3f569350ebc0de43c10374b90086b832/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c2d99f3f569350ebc0de43c10374b90086b832/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=37c2d99f3f569350ebc0de43c10374b90086b832", "patch": "@@ -11470,19 +11470,24 @@\n })\n \n (define_insn_and_split \"*concat<half><mode>3_5\"\n-  [(set (match_operand:DWI 0 \"nonimmediate_operand\" \"=ro\")\n+  [(set (match_operand:DWI 0 \"nonimmediate_operand\" \"=r,o,o\")\n \t(any_or_plus:DWI\n-\t  (ashift:DWI (match_operand:DWI 1 \"register_operand\" \"r\")\n+\t  (ashift:DWI (match_operand:DWI 1 \"register_operand\" \"r,r,r\")\n \t\t      (match_operand:DWI 2 \"const_int_operand\"))\n-\t  (match_operand:DWI 3 \"const_scalar_int_operand\")))]\n+\t  (match_operand:DWI 3 \"const_scalar_int_operand\" \"n,n,Wd\")))]\n   \"INTVAL (operands[2]) == <MODE_SIZE> * BITS_PER_UNIT / 2\n    && (<MODE>mode == DImode\n        ? CONST_INT_P (operands[3])\n \t && (UINTVAL (operands[3]) & ~GET_MODE_MASK (SImode)) == 0\n        : CONST_INT_P (operands[3])\n        ? INTVAL (operands[3]) >= 0\n        : CONST_WIDE_INT_NUNITS (operands[3]) == 2\n-\t && CONST_WIDE_INT_ELT (operands[3], 1) == 0)\"\n+\t && CONST_WIDE_INT_ELT (operands[3], 1) == 0)\n+   && !(CONST_INT_P (operands[3])\n+\t? ix86_endbr_immediate_operand (operands[3], VOIDmode)\n+\t: ix86_endbr_immediate_operand (GEN_INT (CONST_WIDE_INT_ELT (operands[3],\n+\t\t\t\t\t\t\t\t     0)),\n+\t\t\t\t\tVOIDmode))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(clobber (const_int 0))]\n@@ -11491,45 +11496,56 @@\n   split_double_concat (<MODE>mode, operands[0], op3,\n \t\t       gen_lowpart (<HALF>mode, operands[1]));\n   DONE;\n-})\n+}\n+  [(set_attr \"isa\" \"*,nox64,x64\")])\n \n (define_insn_and_split \"*concat<mode><dwi>3_6\"\n-  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=r,o,o,r\")\n \t(any_or_plus:<DWI>\n \t  (ashift:<DWI>\n \t    (zero_extend:<DWI>\n-\t      (match_operand:DWIH 1 \"nonimmediate_operand\" \"r,m\"))\n+\t      (match_operand:DWIH 1 \"nonimmediate_operand\" \"r,r,r,m\"))\n \t    (match_operand:<DWI> 2 \"const_int_operand\"))\n-\t  (match_operand:<DWI> 3 \"const_scalar_int_operand\")))]\n+\t  (match_operand:<DWI> 3 \"const_scalar_int_operand\" \"n,n,Wd,n\")))]\n   \"INTVAL (operands[2]) == <MODE_SIZE> * BITS_PER_UNIT\n    && (<DWI>mode == DImode\n        ? CONST_INT_P (operands[3])\n \t && (UINTVAL (operands[3]) & ~GET_MODE_MASK (SImode)) == 0\n        : CONST_INT_P (operands[3])\n        ? INTVAL (operands[3]) >= 0\n        : CONST_WIDE_INT_NUNITS (operands[3]) == 2\n-\t && CONST_WIDE_INT_ELT (operands[3], 1) == 0)\"\n+\t && CONST_WIDE_INT_ELT (operands[3], 1) == 0)\n+   && !(CONST_INT_P (operands[3])\n+\t? ix86_endbr_immediate_operand (operands[3], VOIDmode)\n+\t: ix86_endbr_immediate_operand (GEN_INT (CONST_WIDE_INT_ELT (operands[3],\n+\t\t\t\t\t\t\t\t     0)),\n+\t\t\t\t\tVOIDmode))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(clobber (const_int 0))]\n {\n   rtx op3 = simplify_subreg (<MODE>mode, operands[3], <DWI>mode, 0);\n   split_double_concat (<DWI>mode, operands[0], op3, operands[1]);\n   DONE;\n-})\n+}\n+  [(set_attr \"isa\" \"*,nox64,x64,*\")])\n \n (define_insn_and_split \"*concat<mode><dwi>3_7\"\n-  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=r,o,o,r\")\n \t(any_or_plus:<DWI>\n \t  (zero_extend:<DWI>\n-\t    (match_operand:DWIH 1 \"nonimmediate_operand\" \"r,m\"))\n-\t  (match_operand:<DWI> 2 \"const_scalar_int_operand\")))]\n+\t    (match_operand:DWIH 1 \"nonimmediate_operand\" \"r,r,r,m\"))\n+\t  (match_operand:<DWI> 2 \"const_scalar_int_operand\" \"n,n,Wd,n\")))]\n   \"<DWI>mode == DImode\n    ? CONST_INT_P (operands[2])\n      && (UINTVAL (operands[2]) & GET_MODE_MASK (SImode)) == 0\n+     && !ix86_endbr_immediate_operand (operands[2], VOIDmode)\n    : CONST_WIDE_INT_P (operands[2])\n      && CONST_WIDE_INT_NUNITS (operands[2]) == 2\n-     && CONST_WIDE_INT_ELT (operands[2], 0) == 0\"\n+     && CONST_WIDE_INT_ELT (operands[2], 0) == 0\n+     && !ix86_endbr_immediate_operand (GEN_INT (CONST_WIDE_INT_ELT (operands[2],\n+\t\t\t\t\t\t\t\t    1)),\n+\t\t\t\t       VOIDmode)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(clobber (const_int 0))]\n@@ -11541,7 +11557,8 @@\n     op2 = gen_int_mode (CONST_WIDE_INT_ELT (operands[2], 1), <MODE>mode);\n   split_double_concat (<DWI>mode, operands[0], operands[1], op2);\n   DONE;\n-})\n+}\n+  [(set_attr \"isa\" \"*,nox64,x64,*\")])\n \f\n ;; Negation instructions\n "}, {"sha": "3fd32bc5bb1d2453e3a70a0b46ff13793f9fa0c2", "filename": "gcc/testsuite/gcc.target/i386/pr108044-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c2d99f3f569350ebc0de43c10374b90086b832/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c2d99f3f569350ebc0de43c10374b90086b832/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-1.c?ref=37c2d99f3f569350ebc0de43c10374b90086b832", "patch": "@@ -0,0 +1,33 @@\n+/* PR target/108044 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+static inline unsigned __int128\n+foo (unsigned long long x, unsigned long long y)\n+{\n+  return ((unsigned __int128) x << 64) | y;\n+}\n+\n+void\n+bar (unsigned __int128 *p, unsigned long long x)\n+{\n+  p[0] = foo (x, 0xdeadbeefcafebabeULL);\n+}\n+\n+void\n+baz (unsigned __int128 *p, unsigned long long x)\n+{\n+  p[0] = foo (0xdeadbeefcafebabeULL, x);\n+}\n+\n+void\n+qux (unsigned __int128 *p, unsigned long long x)\n+{\n+  p[0] = foo (x, 0xffffffffcafebabeULL);\n+}\n+\n+void\n+corge (unsigned __int128 *p, unsigned long long x)\n+{\n+  p[0] = foo (0xffffffffcafebabeULL, x);\n+}"}, {"sha": "0adb0dddf7a098487eb111e939c61e7763b5062b", "filename": "gcc/testsuite/gcc.target/i386/pr108044-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c2d99f3f569350ebc0de43c10374b90086b832/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c2d99f3f569350ebc0de43c10374b90086b832/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-2.c?ref=37c2d99f3f569350ebc0de43c10374b90086b832", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/108044 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2\" } */\n+\n+static inline unsigned long long\n+foo (unsigned int x, unsigned int y)\n+{\n+  return ((unsigned long long) x << 32) | y;\n+}\n+\n+void\n+bar (unsigned long long *p, unsigned int x)\n+{\n+  p[0] = foo (x, 0xcafebabeU);\n+}\n+\n+void\n+baz (unsigned long long *p, unsigned int x)\n+{\n+  p[0] = foo (0xcafebabeU, x);\n+}"}, {"sha": "70ba9f2f5700c31999932d230c93774347029459", "filename": "gcc/testsuite/gcc.target/i386/pr108044-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c2d99f3f569350ebc0de43c10374b90086b832/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c2d99f3f569350ebc0de43c10374b90086b832/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-3.c?ref=37c2d99f3f569350ebc0de43c10374b90086b832", "patch": "@@ -0,0 +1,33 @@\n+/* PR target/108044 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -fcf-protection=branch\" } */\n+\n+static inline unsigned __int128\n+foo (unsigned long long x, unsigned long long y)\n+{\n+  return ((unsigned __int128) x << 64) | y;\n+}\n+\n+unsigned __int128\n+bar (unsigned long long x)\n+{\n+  return foo (x, 0xfa1e0ff3ULL);\n+}\n+\n+unsigned __int128\n+baz (unsigned long long x)\n+{\n+  return foo (0xfa1e0ff3ULL, x);\n+}\n+\n+unsigned __int128\n+qux (unsigned long long x)\n+{\n+  return foo (x, 0xffbafa1e0ff3abdeULL);\n+}\n+\n+unsigned __int128\n+corge (unsigned long long x)\n+{\n+  return foo (0xffbafa1e0ff3abdeULL, x);\n+}"}, {"sha": "4880e249319bc97e2d2f09641c953bf72fb06326", "filename": "gcc/testsuite/gcc.target/i386/pr108044-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c2d99f3f569350ebc0de43c10374b90086b832/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c2d99f3f569350ebc0de43c10374b90086b832/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108044-4.c?ref=37c2d99f3f569350ebc0de43c10374b90086b832", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/108044 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -fcf-protection=branch\" } */\n+\n+static inline unsigned long long\n+foo (unsigned int x, unsigned int y)\n+{\n+  return ((unsigned long long) x << 32) | y;\n+}\n+\n+unsigned long long\n+bar (unsigned int x)\n+{\n+  return foo (x, 0xfa1e0ff3U);\n+}\n+\n+unsigned long long\n+baz (unsigned int x)\n+{\n+  return foo (0xfa1e0ff3U, x);\n+}"}]}