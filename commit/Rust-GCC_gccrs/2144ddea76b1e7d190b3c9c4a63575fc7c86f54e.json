{"sha": "2144ddea76b1e7d190b3c9c4a63575fc7c86f54e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0NGRkZWE3NmIxZTdkMTkwYjNjOWM0YTYzNTc1ZmM3Yzg2ZjU0ZQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2000-02-11T19:36:25Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-02-11T19:36:25Z"}, "message": "* gcc.c-torture/compile/20000211-1.c: New test.\n\nFrom-SVN: r31930", "tree": {"sha": "36365726b7a73c04a0a6732609ea4dfae8b98bcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36365726b7a73c04a0a6732609ea4dfae8b98bcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2144ddea76b1e7d190b3c9c4a63575fc7c86f54e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2144ddea76b1e7d190b3c9c4a63575fc7c86f54e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2144ddea76b1e7d190b3c9c4a63575fc7c86f54e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2144ddea76b1e7d190b3c9c4a63575fc7c86f54e/comments", "author": null, "committer": null, "parents": [{"sha": "144a5f9d4507713f644f15a5ba4795dec3663435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144a5f9d4507713f644f15a5ba4795dec3663435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144a5f9d4507713f644f15a5ba4795dec3663435"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "3a78d3b5c5bda9c7c48af7953c092c9fa319f8be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2144ddea76b1e7d190b3c9c4a63575fc7c86f54e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2144ddea76b1e7d190b3c9c4a63575fc7c86f54e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2144ddea76b1e7d190b3c9c4a63575fc7c86f54e", "patch": "@@ -1,3 +1,7 @@\n+Fri Feb 11 12:35:40 2000  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture/compile/20000211-1.c: New test.\n+\n 2000-02-09  Jonathan Larmour  <jlarmour@redhat.co.uk>\n \n \t* gcc.dg/special/ecos.exp: Use -static when testing --gc-sections"}, {"sha": "8d8a4074e0f910e0ef8740441b15a1c02a452162", "filename": "gcc/testsuite/gcc.c-torture/compile/20000211-1.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2144ddea76b1e7d190b3c9c4a63575fc7c86f54e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000211-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2144ddea76b1e7d190b3c9c4a63575fc7c86f54e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000211-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000211-1.c?ref=2144ddea76b1e7d190b3c9c4a63575fc7c86f54e", "patch": "@@ -0,0 +1,98 @@\n+typedef long unsigned int size_t;\n+typedef unsigned char Bufbyte;\n+typedef int Bytecount;\n+typedef int Charcount;\n+typedef struct lstream Lstream;\n+typedef int  Lisp_Object;\n+extern Lisp_Object Qnil;\n+extern inline  int\n+TRUE_LIST_P (Lisp_Object object)\n+{\n+  return ((  object  ) == (  Qnil ))  ;\n+}\n+struct Lisp_String\n+{\n+  Bytecount _size;\n+  Bufbyte *_data;\n+};\n+typedef enum lstream_buffering\n+{\n+  LSTREAM_LINE_BUFFERED,\n+} Lstream_buffering;\n+struct lstream\n+{\n+  Lstream_buffering buffering;  \n+  unsigned char *out_buffer;  \n+  size_t out_buffer_size;  \n+  size_t out_buffer_ind;  \n+  size_t byte_count;\n+  long flags;   \n+  char data[1];\n+};\n+typedef struct printf_spec printf_spec;\n+struct printf_spec\n+{\n+};\n+typedef union printf_arg printf_arg;\n+union printf_arg\n+{\n+};\n+typedef struct\n+{\n+   int cur;\n+} printf_spec_dynarr;\n+typedef struct\n+{\n+} printf_arg_dynarr;\n+static void\n+doprnt_1 (Lisp_Object stream, const  Bufbyte *string, Bytecount len,\n+\t  Charcount minlen, Charcount maxlen, int minus_flag, int zero_flag)\n+{\n+  Charcount cclen;\n+  Bufbyte pad;\n+  Lstream *lstr = ((  struct lstream  *) ((void *)((((    stream    ) & ((1UL << ((4   * 8 )  - 4 ) ) - 1UL) ) ) | 0x40000000 )) )  ;\n+  cclen = (  len ) ;\n+  if (zero_flag)\n+    pad = '0';\n+  pad = ' ';\n+#if 0\n+  if (minlen > cclen && !minus_flag)\n+#endif\n+    {\n+      int to_add = minlen - cclen;\n+      while (to_add > 0)\n+\t{\n+\t  (( lstr )->out_buffer_ind >= ( lstr )->out_buffer_size ?\tLstream_fputc ( lstr ,   pad ) :\t(( lstr )->out_buffer[( lstr )->out_buffer_ind++] =\t(unsigned char) (  pad ),\t( lstr )->byte_count++,\t( lstr )->buffering == LSTREAM_LINE_BUFFERED &&\t( lstr )->out_buffer[( lstr )->out_buffer_ind - 1] == '\\n' ?\tLstream_flush_out ( lstr ) : 0)) ;\n+\t  to_add--;\n+\t}\n+    }\n+  if (maxlen >= 0)\n+    len = (  ((( maxlen ) <= (  cclen )) ? ( maxlen ) : (  cclen ))  ) ;\n+  Lstream_write (lstr, string, len);\n+  if (minlen > cclen && minus_flag)\n+    {\n+      int to_add = minlen - cclen;\n+      while (to_add > 0)\n+\t{\n+\t  (( lstr )->out_buffer_ind >= ( lstr )->out_buffer_size ?\tLstream_fputc ( lstr ,   pad ) :\t(( lstr )->out_buffer[( lstr )->out_buffer_ind++] =\t(unsigned char) (  pad ),\t( lstr )->byte_count++,\t( lstr )->buffering == LSTREAM_LINE_BUFFERED &&\t( lstr )->out_buffer[( lstr )->out_buffer_ind - 1] == '\\n' ?\tLstream_flush_out ( lstr ) : 0)) ;\n+\t  to_add--;\n+\t}\n+    }\n+}\n+static Bytecount\n+emacs_doprnt_1 (Lisp_Object stream, const  Bufbyte *format_nonreloc,\n+\t\tLisp_Object format_reloc, Bytecount format_length,\n+\t\tint nargs,\n+\t\tconst  Lisp_Object *largs)\n+{\n+  int i;\n+  printf_spec_dynarr *specs = 0;\n+  format_nonreloc = (( ((  struct Lisp_String  *) ((void *)((((     format_reloc     ) & ((1UL << ((4   * 8 )  - 4 ) ) - 1UL) ) ) | 0x40000000 )) )   )->_data + 0)  ;\n+  format_length = (( ((  struct Lisp_String  *) ((void *)((((     format_reloc     ) & ((1UL << ((4   * 8 )  - 4 ) ) - 1UL) ) ) | 0x40000000 )) )   )->_size)  ;\n+  specs = parse_doprnt_spec (format_nonreloc, format_length);\n+  for (i = 0; i < (( specs )->cur) ; i++)\n+    {\n+      char ch;\n+      doprnt_1 (stream, (Bufbyte *) &ch, 1, 0, -1, 0, 0);\n+    }\n+}"}]}