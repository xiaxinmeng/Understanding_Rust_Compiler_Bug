{"sha": "fcb99e7b22ce96bd71076e16bff502cedb310e55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNiOTllN2IyMmNlOTZiZDcxMDc2ZTE2YmZmNTAyY2VkYjMxMGU1NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-09-23T07:15:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-09-23T07:15:37Z"}, "message": "re PR c/28706 (Compile failure with --combine and explicitly aligned structures)\n\n\tPR c/28706\n\tPR c/28712\n\t* tree.c (merge_attributes, attribute_list_contained): If both\n\tTREE_VALUEs are TREE_LISTs, use simple_cst_list_equal instead of\n\tsimple_cst_equal.\n\t* c-typeck.c (comptypes_internal): Don't consider aggregates\n\tin different TUs as compatible if there one set of attributes is\n\tnot a subset of the other type's attributes.\n\t(composite_type): Try harder not to create a new aggregate type.\n\n\t* gcc.dg/pr28706.c: New test.\n\t* gcc.dg/pr28712.c: New test.\n\nFrom-SVN: r117167", "tree": {"sha": "23d01a3bd7d49c49d7f4b60bd073b43567826b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23d01a3bd7d49c49d7f4b60bd073b43567826b34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcb99e7b22ce96bd71076e16bff502cedb310e55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb99e7b22ce96bd71076e16bff502cedb310e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcb99e7b22ce96bd71076e16bff502cedb310e55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb99e7b22ce96bd71076e16bff502cedb310e55/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a7c793f3ef153f68fec135b0f8bca78ec9da324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7c793f3ef153f68fec135b0f8bca78ec9da324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a7c793f3ef153f68fec135b0f8bca78ec9da324"}], "stats": {"total": 94, "additions": 89, "deletions": 5}, "files": [{"sha": "a62e378d102c9f01ea9ac70dc916809e7704397d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcb99e7b22ce96bd71076e16bff502cedb310e55", "patch": "@@ -1,3 +1,15 @@\n+2006-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/28706\n+\tPR c/28712\n+\t* tree.c (merge_attributes, attribute_list_contained): If both\n+\tTREE_VALUEs are TREE_LISTs, use simple_cst_list_equal instead of\n+\tsimple_cst_equal.\n+\t* c-typeck.c (comptypes_internal): Don't consider aggregates\n+\tin different TUs as compatible if there one set of attributes is\n+\tnot a subset of the other type's attributes.\n+\t(composite_type): Try harder not to create a new aggregate type.\n+\n 2006-09-22  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/i386/driver-i386.c: Always define host_detect_local_cpu."}, {"sha": "00537ac3f4c6ad08a726caf31c0ec1dcbb3df070", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=fcb99e7b22ce96bd71076e16bff502cedb310e55", "patch": "@@ -375,6 +375,19 @@ composite_type (tree t1, tree t2)\n \treturn build_type_attribute_variant (t1, attributes);\n       }\n \n+    case ENUMERAL_TYPE:\n+    case RECORD_TYPE:\n+    case UNION_TYPE:\n+      if (attributes != NULL)\n+\t{\n+\t  /* Try harder not to create a new aggregate type.  */\n+\t  if (attribute_list_equal (TYPE_ATTRIBUTES (t1), attributes))\n+\t    return t1;\n+\t  if (attribute_list_equal (TYPE_ATTRIBUTES (t2), attributes))\n+\t    return t2;\n+\t}\n+      return build_type_attribute_variant (t1, attributes);\n+\n     case FUNCTION_TYPE:\n       /* Function types: prefer the one that specified arg types.\n \t If both do, merge the arg types.  Also merge the return types.  */\n@@ -891,6 +904,13 @@ comptypes_internal (tree type1, tree type2)\n     case UNION_TYPE:\n       if (val != 1 && !same_translation_unit_p (t1, t2))\n \t{\n+\t  tree a1 = TYPE_ATTRIBUTES (t1);\n+\t  tree a2 = TYPE_ATTRIBUTES (t2);\n+\n+\t  if (! attribute_list_contained (a1, a2)\n+\t      && ! attribute_list_contained (a2, a1))\n+\t    break;\n+\n \t  if (attrval != 2)\n \t    return tagged_types_tu_compatible_p (t1, t2);\n \t  val = tagged_types_tu_compatible_p (t1, t2);"}, {"sha": "e6c4a117b31d59a607f1656c6d5df4ea0e3def7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fcb99e7b22ce96bd71076e16bff502cedb310e55", "patch": "@@ -1,3 +1,11 @@\n+2006-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/28706\n+\t* gcc.dg/pr28706.c: New test.\n+\n+\tPR c/28712\n+\t* gcc.dg/pr28712.c: New test.\n+\n 2006-09-22  Mike Stump  <mrs@apple.com>\n \n \t* obj-c++.dg/encode-3.mm: Fix for 64-bit support."}, {"sha": "4c185af41237efe14b1045ce53f21270ec7c4d7b", "filename": "gcc/testsuite/gcc.dg/pr28706.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28706.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28706.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28706.c?ref=fcb99e7b22ce96bd71076e16bff502cedb310e55", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/28706 */\n+/* { dg-do compile } */\n+/* { dg-options \"--combine\" } */\n+/* { dg-additional-sources \"pr28706.c\" } */\n+\n+struct A\n+{\n+  int i;\n+} __attribute__((aligned (sizeof (long int))));\n+\n+extern void foo (struct A *);\n+extern void foo (struct A *);"}, {"sha": "0bbb45314cf1e611a0b1a5651d2db2c1a57ef7b0", "filename": "gcc/testsuite/gcc.dg/pr28712.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28712.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28712.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28712.c?ref=fcb99e7b22ce96bd71076e16bff502cedb310e55", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/28712 */\n+/* { dg-do compile } */\n+/* { dg-options \"--combine\" } */\n+/* { dg-additional-sources \"pr28712.c pr28712.c\" } */\n+\n+struct A;\n+\n+extern struct A *a;\n+\n+struct A { } __attribute__((packed));\n+\n+struct B __attribute__((aligned (sizeof (int))));\n+\n+extern struct B *b;\n+\n+struct B { int i; } __attribute__((packed));"}, {"sha": "cfbfe1462b651cda82a10f56b800e8bf5c8273cb", "filename": "gcc/tree.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb99e7b22ce96bd71076e16bff502cedb310e55/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fcb99e7b22ce96bd71076e16bff502cedb310e55", "patch": "@@ -3554,7 +3554,17 @@ merge_attributes (tree a1, tree a2)\n \t\t   a = lookup_attribute (IDENTIFIER_POINTER (TREE_PURPOSE (a2)),\n \t\t\t\t\t TREE_CHAIN (a)))\n \t\t{\n-\t\t  if (simple_cst_equal (TREE_VALUE (a), TREE_VALUE (a2)) == 1)\n+\t\t  if (TREE_VALUE (a) != NULL\n+\t\t      && TREE_CODE (TREE_VALUE (a)) == TREE_LIST\n+\t\t      && TREE_VALUE (a2) != NULL\n+\t\t      && TREE_CODE (TREE_VALUE (a2)) == TREE_LIST)\n+\t\t    {\n+\t\t      if (simple_cst_list_equal (TREE_VALUE (a),\n+\t\t\t\t\t\t TREE_VALUE (a2)) == 1)\n+\t\t\tbreak;\n+\t\t    }\n+\t\t  else if (simple_cst_equal (TREE_VALUE (a),\n+\t\t\t\t\t     TREE_VALUE (a2)) == 1)\n \t\t    break;\n \t\t}\n \t      if (a == NULL_TREE)\n@@ -4374,15 +4384,21 @@ attribute_list_contained (tree l1, tree l2)\n \t   attr = lookup_attribute (IDENTIFIER_POINTER (TREE_PURPOSE (t2)),\n \t\t\t\t    TREE_CHAIN (attr)))\n \t{\n-\t  if (simple_cst_equal (TREE_VALUE (t2), TREE_VALUE (attr)) == 1)\n+\t  if (TREE_VALUE (t2) != NULL\n+\t      && TREE_CODE (TREE_VALUE (t2)) == TREE_LIST\n+\t      && TREE_VALUE (attr) != NULL\n+\t      && TREE_CODE (TREE_VALUE (attr)) == TREE_LIST)\n+\t    {\n+\t      if (simple_cst_list_equal (TREE_VALUE (t2),\n+\t\t\t\t\t TREE_VALUE (attr)) == 1)\n+\t\tbreak;\n+\t    }\n+\t  else if (simple_cst_equal (TREE_VALUE (t2), TREE_VALUE (attr)) == 1)\n \t    break;\n \t}\n \n       if (attr == 0)\n \treturn 0;\n-\n-      if (simple_cst_equal (TREE_VALUE (t2), TREE_VALUE (attr)) != 1)\n-\treturn 0;\n     }\n \n   return 1;"}]}