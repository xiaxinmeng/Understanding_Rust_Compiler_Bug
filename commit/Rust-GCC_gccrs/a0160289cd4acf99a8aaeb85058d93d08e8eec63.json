{"sha": "a0160289cd4acf99a8aaeb85058d93d08e8eec63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxNjAyODljZDRhY2Y5OWE4YWFlYjg1MDU4ZDkzZDA4ZThlZWM2Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-24T19:39:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-24T19:39:00Z"}, "message": "* config/mips/mips.md (*seq_[sd]i, *seq_[sd]i_mips16, *sne_[sd]i)\n\t(*sgt_[sd]i, *sgt_[sd]i_mips16, *sge_[sd]i, *slt_[sd]i)\n\t(*slt_[sd]i_mips16, *sle_[sd]i, *sle_[sd]i_mips16, *sgtu_[sd]i)\n\t(*sgtu_[sd]i_mips16, *sge_[sd]i, *sltu_[sd]i, *sltu_[sd]i_mips16)\n\t(*sleu_[sd]i, *sleu_[sd]i_mips16): Redefine using :GPR.\n\nFrom-SVN: r86508", "tree": {"sha": "e1ce8ad09279f62ffed12d3ab6acedb0edda24bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1ce8ad09279f62ffed12d3ab6acedb0edda24bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0160289cd4acf99a8aaeb85058d93d08e8eec63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0160289cd4acf99a8aaeb85058d93d08e8eec63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0160289cd4acf99a8aaeb85058d93d08e8eec63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0160289cd4acf99a8aaeb85058d93d08e8eec63/comments", "author": null, "committer": null, "parents": [{"sha": "2c4402f4d5e5294045c767d1581dfeaf4eda9603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4402f4d5e5294045c767d1581dfeaf4eda9603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c4402f4d5e5294045c767d1581dfeaf4eda9603"}], "stats": {"total": 367, "additions": 97, "deletions": 270}, "files": [{"sha": "45634deb2f50fb042c832b6a30cf79d18718b899", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0160289cd4acf99a8aaeb85058d93d08e8eec63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0160289cd4acf99a8aaeb85058d93d08e8eec63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0160289cd4acf99a8aaeb85058d93d08e8eec63", "patch": "@@ -1,3 +1,11 @@\n+2004-08-24  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (*seq_[sd]i, *seq_[sd]i_mips16, *sne_[sd]i)\n+\t(*sgt_[sd]i, *sgt_[sd]i_mips16, *sge_[sd]i, *slt_[sd]i)\n+\t(*slt_[sd]i_mips16, *sle_[sd]i, *sle_[sd]i_mips16, *sgtu_[sd]i)\n+\t(*sgtu_[sd]i_mips16, *sge_[sd]i, *sltu_[sd]i, *sltu_[sd]i_mips16)\n+\t(*sleu_[sd]i, *sleu_[sd]i_mips16): Redefine using :GPR.\n+\n 2004-08-24  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (cmpsi, cmpdi): Redefine using :GPR."}, {"sha": "fb7b15d915eca2cb6f11b754cea32bae37f5362d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 89, "deletions": 270, "changes": 359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0160289cd4acf99a8aaeb85058d93d08e8eec63/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0160289cd4acf99a8aaeb85058d93d08e8eec63/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=a0160289cd4acf99a8aaeb85058d93d08e8eec63", "patch": "@@ -5012,41 +5012,23 @@ beq\\t%2,%.,1b\\;\\\n   \"\"\n   { if (mips_emit_scc (EQ, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*seq_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(eq:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t       (const_int 0)))]\n+(define_insn \"*seq_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(eq:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t(const_int 0)))]\n   \"!TARGET_MIPS16\"\n   \"sltu\\t%0,%1,1\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*seq_si_mips16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n-\t(eq:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t       (const_int 0)))]\n+(define_insn \"*seq_<mode>_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=t\")\n+\t(eq:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t(const_int 0)))]\n   \"TARGET_MIPS16\"\n   \"sltu\\t%1,1\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*seq_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(eq:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (const_int 0)))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"sltu\\t%0,%1,1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*seq_di_mips16\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=t\")\n-\t(eq:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (const_int 0)))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-  \"sltu\\t%1,1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; \"sne\" uses sltu instructions in which the first operand is $0.\n ;; This isn't possible in mips16 code.\n@@ -5058,23 +5040,14 @@ beq\\t%2,%.,1b\\;\\\n   \"!TARGET_MIPS16\"\n   { if (mips_emit_scc (NE, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sne_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ne:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t       (const_int 0)))]\n+(define_insn \"*sne_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(ne:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t(const_int 0)))]\n   \"!TARGET_MIPS16\"\n   \"sltu\\t%0,%.,%1\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*sne_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ne:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (const_int 0)))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"sltu\\t%0,%.,%1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"sgt\"\n   [(set (match_operand:SI 0 \"register_operand\")\n@@ -5083,41 +5056,23 @@ beq\\t%2,%.,1b\\;\\\n   \"\"\n   { if (mips_emit_scc (GT, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sgt_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(gt:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t       (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")))]\n+(define_insn \"*sgt_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(gt:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t(match_operand:GPR 2 \"reg_or_0_operand\" \"dJ\")))]\n   \"!TARGET_MIPS16\"\n   \"slt\\t%0,%z2,%1\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*sgt_si_mips16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n-\t(gt:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t       (match_operand:SI 2 \"register_operand\" \"d\")))]\n+(define_insn \"*sgt_<mode>_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=t\")\n+\t(gt:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t(match_operand:GPR 2 \"register_operand\" \"d\")))]\n   \"TARGET_MIPS16\"\n   \"slt\\t%2,%1\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*sgt_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(gt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (match_operand:DI 2 \"reg_or_0_operand\" \"dJ\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"slt\\t%0,%z2,%1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*sgt_di_mips16\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=t\")\n-\t(gt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (match_operand:DI 2 \"register_operand\" \"d\")))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-  \"slt\\t%2,%1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"sge\"\n   [(set (match_operand:SI 0 \"register_operand\")\n@@ -5126,23 +5081,14 @@ beq\\t%2,%.,1b\\;\\\n   \"\"\n   { if (mips_emit_scc (GE, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sge_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ge:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t       (const_int 1)))]\n+(define_insn \"*sge_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(ge:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t(const_int 1)))]\n   \"!TARGET_MIPS16\"\n   \"slt\\t%0,%.,%1\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*sge_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ge:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (const_int 1)))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"slt\\t%0,%.,%1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"slt\"\n   [(set (match_operand:SI 0 \"register_operand\")\n@@ -5151,49 +5097,26 @@ beq\\t%2,%.,1b\\;\\\n   \"\"\n   { if (mips_emit_scc (LT, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*slt_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(lt:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t       (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+(define_insn \"*slt_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(lt:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t(match_operand:GPR 2 \"arith_operand\" \"dI\")))]\n   \"!TARGET_MIPS16\"\n   \"slt\\t%0,%1,%2\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*slt_si_mips16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=t,t\")\n-\t(lt:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n-\t       (match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n+(define_insn \"*slt_<mode>_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=t,t\")\n+\t(lt:GPR (match_operand:GPR 1 \"register_operand\" \"d,d\")\n+\t\t(match_operand:GPR 2 \"arith_operand\" \"d,I\")))]\n   \"TARGET_MIPS16\"\n   \"slt\\t%1,%2\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")\n-   (set_attr_alternative \"length\"\n-\t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))])])\n-\n-(define_insn \"*slt_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(lt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (match_operand:DI 2 \"arith_operand\" \"dI\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"slt\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*slt_di_mips16\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=t,t\")\n-\t(lt:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-\t       (match_operand:DI 2 \"arith_operand\" \"d,I\")))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-  \"slt\\t%1,%2\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n+\t\t (if_then_else (match_operand 2 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n@@ -5204,57 +5127,30 @@ beq\\t%2,%.,1b\\;\\\n   \"\"\n   { if (mips_emit_scc (LE, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sle_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(le:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t       (match_operand:SI 2 \"sle_operand\" \"\")))]\n+(define_insn \"*sle_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(le:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t(match_operand:GPR 2 \"sle_operand\" \"\")))]\n   \"!TARGET_MIPS16\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"slt\\t%0,%1,%2\";\n }\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*sle_si_mips16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n-\t(le:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t       (match_operand:SI 2 \"sle_operand\" \"\")))]\n+(define_insn \"*sle_<mode>_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=t\")\n+\t(le:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t(match_operand:GPR 2 \"sle_operand\" \"\")))]\n   \"TARGET_MIPS16\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"slt\\t%1,%2\";\n }\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")\n-   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n-\t\t\t\t      (const_int 4)\n-\t\t\t\t      (const_int 8)))])\n-\n-(define_insn \"*sle_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(le:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (match_operand:DI 2 \"sle_operand\" \"\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n-  return \"slt\\t%0,%1,%2\";\n-}\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*sle_di_mips16\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=t\")\n-\t(le:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (match_operand:DI 2 \"sle_operand\" \"\")))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n-  return \"slt\\t%1,%2\";\n-}\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")\n-   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"length\") (if_then_else (match_operand 2 \"m16_uimm8_m1_1\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n@@ -5265,41 +5161,23 @@ beq\\t%2,%.,1b\\;\\\n   \"\"\n   { if (mips_emit_scc (GTU, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sgtu_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(gtu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")))]\n+(define_insn \"*sgtu_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(gtu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t (match_operand:GPR 2 \"reg_or_0_operand\" \"dJ\")))]\n   \"!TARGET_MIPS16\"\n   \"sltu\\t%0,%z2,%1\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*sgtu_si_mips16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n-\t(gtu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:SI 2 \"register_operand\" \"d\")))]\n+(define_insn \"*sgtu_<mode>_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=t\")\n+\t(gtu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t (match_operand:GPR 2 \"register_operand\" \"d\")))]\n   \"TARGET_MIPS16\"\n   \"sltu\\t%2,%1\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*sgtu_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(gtu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"reg_or_0_operand\" \"dJ\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"sltu\\t%0,%z2,%1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*sgtu_di_mips16\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=t\")\n-\t(gtu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"d\")))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-  \"sltu\\t%2,%1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"sgeu\"\n   [(set (match_operand:SI 0 \"register_operand\")\n@@ -5308,23 +5186,14 @@ beq\\t%2,%.,1b\\;\\\n   \"\"\n   { if (mips_emit_scc (GEU, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sge_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(geu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t        (const_int 1)))]\n+(define_insn \"*sge_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(geu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t         (const_int 1)))]\n   \"!TARGET_MIPS16\"\n   \"sltu\\t%0,%.,%1\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*sge_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(geu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t        (const_int 1)))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"sltu\\t%0,%.,%1\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"sltu\"\n   [(set (match_operand:SI 0 \"register_operand\")\n@@ -5333,49 +5202,26 @@ beq\\t%2,%.,1b\\;\\\n   \"\"\n   { if (mips_emit_scc (LTU, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sltu_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ltu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+(define_insn \"*sltu_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(ltu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t (match_operand:GPR 2 \"arith_operand\" \"dI\")))]\n   \"!TARGET_MIPS16\"\n   \"sltu\\t%0,%1,%2\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*sltu_si_mips16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=t,t\")\n-\t(ltu:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n-\t\t(match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n+(define_insn \"*sltu_<mode>_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=t,t\")\n+\t(ltu:GPR (match_operand:GPR 1 \"register_operand\" \"d,d\")\n+\t\t (match_operand:GPR 2 \"arith_operand\" \"d,I\")))]\n   \"TARGET_MIPS16\"\n   \"sltu\\t%1,%2\"\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")\n-   (set_attr_alternative \"length\"\n-\t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))])])\n-\n-(define_insn \"*sltu_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ltu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"arith_operand\" \"dI\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"sltu\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*sltu_di_mips16\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=t,t\")\n-\t(ltu:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-\t\t(match_operand:DI 2 \"arith_operand\" \"d,I\")))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-  \"sltu\\t%1,%2\"\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n+\t\t (if_then_else (match_operand 2 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n@@ -5386,57 +5232,30 @@ beq\\t%2,%.,1b\\;\\\n   \"\"\n   { if (mips_emit_scc (LEU, operands[0])) DONE; else FAIL; })\n \n-(define_insn \"*sleu_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(leu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t        (match_operand:SI 2 \"sleu_operand\" \"\")))]\n+(define_insn \"*sleu_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(leu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t         (match_operand:GPR 2 \"sleu_operand\" \"\")))]\n   \"!TARGET_MIPS16\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"sltu\\t%0,%1,%2\";\n }\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*sleu_si_mips16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n-\t(leu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t        (match_operand:SI 2 \"sleu_operand\" \"\")))]\n+(define_insn \"*sleu_<mode>_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=t\")\n+\t(leu:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t         (match_operand:GPR 2 \"sleu_operand\" \"\")))]\n   \"TARGET_MIPS16\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"sltu\\t%1,%2\";\n }\n   [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"SI\")\n-   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n-\t\t\t\t      (const_int 4)\n-\t\t\t\t      (const_int 8)))])\n-\n-(define_insn \"*sleu_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(leu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t        (match_operand:DI 2 \"sleu_operand\" \"\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n-  return \"sltu\\t%0,%1,%2\";\n-}\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*sleu_di_mips16\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=t\")\n-\t(leu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t        (match_operand:DI 2 \"sleu_operand\" \"\")))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n-  return \"sltu\\t%1,%2\";\n-}\n-  [(set_attr \"type\" \"slt\")\n-   (set_attr \"mode\" \"DI\")\n-   (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"length\") (if_then_else (match_operand 2 \"m16_uimm8_m1_1\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \f"}]}