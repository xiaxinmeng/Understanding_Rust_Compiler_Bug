{"sha": "5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1YzVlMGYwN2M5Y2U3YmZmMDQ5OGEwMjhlOWFiYmRmNWE3NDE4Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-04-05T11:48:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-04-05T11:48:02Z"}, "message": "re PR target/78002 (gcc.target/aarch64/stack-checking.c ICEs with -mabi=ilp32)\n\n\tPR target/78002\n\t* config/aarch64/aarch64.c (aarch64_emit_probe_stack_range): Replace\n\tptr_mode with Pmode throughout.\n\t* config/aarch64/aarch64.md (probe_stack_range_<PTR:mode): Rename\n\tinto probe_stack_range and use DImode.\n\nFrom-SVN: r246702", "tree": {"sha": "130ea93fa8e110b6e54c263f725f59ae72c069cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/130ea93fa8e110b6e54c263f725f59ae72c069cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183/comments", "author": null, "committer": null, "parents": [{"sha": "d0ee17a526119f45b7f2a593fa54c82dfffe5629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ee17a526119f45b7f2a593fa54c82dfffe5629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ee17a526119f45b7f2a593fa54c82dfffe5629"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "873d0bcc3e71aaebb5077154f9f310f2251acfdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183", "patch": "@@ -1,3 +1,11 @@\n+2017-04-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/78002\n+\t* config/aarch64/aarch64.c (aarch64_emit_probe_stack_range): Replace\n+\tptr_mode with Pmode throughout.\n+\t* config/aarch64/aarch64.md (probe_stack_range_<PTR:mode): Rename\n+\tinto probe_stack_range and use DImode.\n+\n 2017-04-05  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \tPR target/79890"}, {"sha": "721ced1831a00748144889e11b032d1abeea4160", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183", "patch": "@@ -2610,7 +2610,7 @@ aarch64_libgcc_cmp_return_mode (void)\n static void\n aarch64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n {\n-  rtx reg1 = gen_rtx_REG (ptr_mode, PROBE_STACK_FIRST_REG);\n+  rtx reg1 = gen_rtx_REG (Pmode, PROBE_STACK_FIRST_REG);\n \n   /* See the same assertion on PROBE_INTERVAL above.  */\n   gcc_assert ((first % ARITH_FACTOR) == 0);\n@@ -2622,9 +2622,9 @@ aarch64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n       const HOST_WIDE_INT base = ROUND_UP (size, ARITH_FACTOR);\n \n       emit_set_insn (reg1,\n-\t\t     plus_constant (ptr_mode,\n+\t\t     plus_constant (Pmode,\n \t\t\t\t    stack_pointer_rtx, -(first + base)));\n-      emit_stack_probe (plus_constant (ptr_mode, reg1, base - size));\n+      emit_stack_probe (plus_constant (Pmode, reg1, base - size));\n     }\n \n   /* The run-time loop is made up of 8 insns in the generic case while the\n@@ -2634,7 +2634,7 @@ aarch64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n       HOST_WIDE_INT i, rem;\n \n       emit_set_insn (reg1,\n-\t\t     plus_constant (ptr_mode,\n+\t\t     plus_constant (Pmode,\n \t\t\t\t    stack_pointer_rtx,\n \t\t\t\t    -(first + PROBE_INTERVAL)));\n       emit_stack_probe (reg1);\n@@ -2645,7 +2645,7 @@ aarch64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n       for (i = 2 * PROBE_INTERVAL; i < size; i += PROBE_INTERVAL)\n \t{\n \t  emit_set_insn (reg1,\n-\t\t\t plus_constant (ptr_mode, reg1, -PROBE_INTERVAL));\n+\t\t\t plus_constant (Pmode, reg1, -PROBE_INTERVAL));\n \t  emit_stack_probe (reg1);\n \t}\n \n@@ -2654,11 +2654,11 @@ aarch64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n \t{\n \t  const HOST_WIDE_INT base = ROUND_UP (rem, ARITH_FACTOR);\n \n-\t  emit_set_insn (reg1, plus_constant (ptr_mode, reg1, -base));\n-\t  emit_stack_probe (plus_constant (ptr_mode, reg1, base - rem));\n+\t  emit_set_insn (reg1, plus_constant (Pmode, reg1, -base));\n+\t  emit_stack_probe (plus_constant (Pmode, reg1, base - rem));\n \t}\n       else\n-\temit_stack_probe (plus_constant (ptr_mode, reg1, -rem));\n+\temit_stack_probe (plus_constant (Pmode, reg1, -rem));\n     }\n \n   /* Otherwise, do the same as above, but in a loop.  Note that we must be\n@@ -2668,7 +2668,7 @@ aarch64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n      equality test for the loop condition.  */\n   else\n     {\n-      rtx reg2 = gen_rtx_REG (ptr_mode, PROBE_STACK_SECOND_REG);\n+      rtx reg2 = gen_rtx_REG (Pmode, PROBE_STACK_SECOND_REG);\n \n       /* Step 1: round SIZE to the previous multiple of the interval.  */\n \n@@ -2679,11 +2679,11 @@ aarch64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n \n       /* TEST_ADDR = SP + FIRST.  */\n       emit_set_insn (reg1,\n-\t\t     plus_constant (ptr_mode, stack_pointer_rtx, -first));\n+\t\t     plus_constant (Pmode, stack_pointer_rtx, -first));\n \n       /* LAST_ADDR = SP + FIRST + ROUNDED_SIZE.  */\n       emit_set_insn (reg2,\n-\t\t     plus_constant (ptr_mode, stack_pointer_rtx,\n+\t\t     plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t    -(first + rounded_size)));\n \n \n@@ -2699,10 +2699,7 @@ aarch64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n \t probes at FIRST + N * PROBE_INTERVAL for values of N from 1\n \t until it is equal to ROUNDED_SIZE.  */\n \n-      if (ptr_mode == DImode)\n-\temit_insn (gen_probe_stack_range_di (reg1, reg1, reg2));\n-      else\n-\temit_insn (gen_probe_stack_range_si (reg1, reg1, reg2));\n+      emit_insn (gen_probe_stack_range (reg1, reg1, reg2));\n \n \n       /* Step 4: probe at FIRST + SIZE if we cannot assert at compile-time\n@@ -2716,11 +2713,11 @@ aarch64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n \t    {\n \t      const HOST_WIDE_INT base = ROUND_UP (rem, ARITH_FACTOR);\n \n-\t      emit_set_insn (reg2, plus_constant (ptr_mode, reg2, -base));\n-\t      emit_stack_probe (plus_constant (ptr_mode, reg2, base - rem));\n+\t      emit_set_insn (reg2, plus_constant (Pmode, reg2, -base));\n+\t      emit_stack_probe (plus_constant (Pmode, reg2, base - rem));\n \t    }\n \t  else\n-\t    emit_stack_probe (plus_constant (ptr_mode, reg2, -rem));\n+\t    emit_stack_probe (plus_constant (Pmode, reg2, -rem));\n \t}\n     }\n "}, {"sha": "51368e29f2d1fd12f48a972bd81a08589a720e07", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=5f5c5e0f07c9ce7bff0498a028e9abbdf5a74183", "patch": "@@ -5412,11 +5412,11 @@\n    (set_attr \"type\" \"block\")]\n )\n \n-(define_insn \"probe_stack_range_<PTR:mode>\"\n-  [(set (match_operand:PTR 0 \"register_operand\" \"=r\")\n-\t(unspec_volatile:PTR [(match_operand:PTR 1 \"register_operand\" \"0\")\n-\t\t\t      (match_operand:PTR 2 \"register_operand\" \"r\")]\n-\t\t\t       UNSPECV_PROBE_STACK_RANGE))]\n+(define_insn \"probe_stack_range\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t\t     (match_operand:DI 2 \"register_operand\" \"r\")]\n+\t\t\t      UNSPECV_PROBE_STACK_RANGE))]\n   \"\"\n {\n   return aarch64_output_probe_stack_range (operands[0], operands[2]);"}]}