{"sha": "70c70369ce868fd8b049f710c01a899e502f6f68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBjNzAzNjljZTg2OGZkOGIwNDlmNzEwYzAxYTg5OWU1MDJmNmY2OA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-11-23T18:45:45Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-11-23T18:45:45Z"}, "message": "PR tree-optimization/87756 - missing unterminated argument warning using address of a constant character\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/87756\n\t* expr.c (string_constant): Synthesize a string literal from\n\tthe address of a constant character.\n\t* tree.c (build_string_literal): Add an argument.\n\t* tree.h (build_string_literal): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/87756\n\t* gcc.dg/builtin-memchr-2.c: New test.\n\t* gcc.dg/builtin-memchr-3.c: Same.\n\t* gcc.dg/warn-sprintf-no-nul-2.c: Same.\n\nFrom-SVN: r266418", "tree": {"sha": "e911138371a57dd5587cf3a3cc4e7882f5327607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e911138371a57dd5587cf3a3cc4e7882f5327607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70c70369ce868fd8b049f710c01a899e502f6f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c70369ce868fd8b049f710c01a899e502f6f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c70369ce868fd8b049f710c01a899e502f6f68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c70369ce868fd8b049f710c01a899e502f6f68/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db1d09b049a9388c481ff76aa00fe74734cce1c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1d09b049a9388c481ff76aa00fe74734cce1c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db1d09b049a9388c481ff76aa00fe74734cce1c8"}], "stats": {"total": 332, "additions": 315, "deletions": 17}, "files": [{"sha": "c377aa534ddf0fc4df71b7d55a63f4d671972098", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70c70369ce868fd8b049f710c01a899e502f6f68", "patch": "@@ -1,3 +1,11 @@\n+2018-11-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/87756\n+\t* expr.c (string_constant): Synthesize a string literal from\n+\tthe address of a constant character.\n+\t* tree.c (build_string_literal): Add an argument.\n+\t* tree.h (build_string_literal): Same.\n+\n 2018-11-23  Christoph Muellner  <christoph.muellner@theobroma-systems.com>\n \n         * config/aarch64/aarch64-cores.def: Define emag."}, {"sha": "021a04c5944e92557c09764211ea66da8e6ccd37", "filename": "gcc/expr.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=70c70369ce868fd8b049f710c01a899e502f6f68", "patch": "@@ -11484,18 +11484,40 @@ string_constant (tree arg, tree *ptr_offset, tree *mem_size, tree *decl)\n \toffset = off;\n     }\n \n-  if (!init || TREE_CODE (init) != STRING_CST)\n+  if (!init)\n     return NULL_TREE;\n \n+  *ptr_offset = offset;\n+\n+  tree eltype = TREE_TYPE (init);\n+  tree initsize = TYPE_SIZE_UNIT (eltype);\n   if (mem_size)\n-    *mem_size = TYPE_SIZE_UNIT (TREE_TYPE (init));\n+    *mem_size = initsize;\n+\n   if (decl)\n     *decl = array;\n \n-  gcc_checking_assert (tree_to_shwi (TYPE_SIZE_UNIT (TREE_TYPE (init)))\n-\t\t       >= TREE_STRING_LENGTH (init));\n+  if (TREE_CODE (init) == INTEGER_CST)\n+    {\n+      /* For a reference to (address of) a single constant character,\n+\t store the native representation of the character in CHARBUF.   */\n+      unsigned char charbuf[MAX_BITSIZE_MODE_ANY_MODE / BITS_PER_UNIT];\n+      int len = native_encode_expr (init, charbuf, sizeof charbuf, 0);\n+      if (len > 0)\n+\t{\n+\t  /* Construct a string literal with elements of ELTYPE and\n+\t     the representation above.  Then strip\n+\t     the ADDR_EXPR (ARRAY_REF (...)) around the STRING_CST.  */\n+\t  init = build_string_literal (len, (char *)charbuf, eltype);\n+\t  init = TREE_OPERAND (TREE_OPERAND (init, 0), 0);\n+\t}\n+    }\n+\n+  if (TREE_CODE (init) != STRING_CST)\n+    return NULL_TREE;\n+\n+  gcc_checking_assert (tree_to_shwi (initsize) >= TREE_STRING_LENGTH (init));\n \n-  *ptr_offset = offset;\n   return init;\n }\n \f"}, {"sha": "eba7f5ed3cd76b78abf49156dcbd8b23c1b629dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70c70369ce868fd8b049f710c01a899e502f6f68", "patch": "@@ -1,3 +1,10 @@\n+2018-11-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/87756\n+\t* gcc.dg/builtin-memchr-2.c: New test.\n+\t* gcc.dg/builtin-memchr-3.c: Same.\n+\t* gcc.dg/warn-sprintf-no-nul-2.c: Same.\n+\n 2018-11-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR testsuite/88098"}, {"sha": "65f9d9ca700e24591418e364d8f3379c302ee4da", "filename": "gcc/testsuite/gcc.dg/builtin-memchr-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr-2.c?ref=70c70369ce868fd8b049f710c01a899e502f6f68", "patch": "@@ -0,0 +1,55 @@\n+/* Verify that memchr calls with the address of a constant character\n+   are folded as expected even at -O0.\n+  { dg-do compile }\n+  { dg-options \"-O0 -Wall -fdump-tree-gimple\" } */\n+\n+typedef __SIZE_TYPE__  size_t;\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+extern void* memchr (const void*, int, size_t);\n+extern int printf (const char*, ...);\n+extern void abort (void);\n+\n+#define A(expr)\t\t\t\t\t\t\t\\\n+  ((expr)\t\t\t\t\t\t\t\\\n+   ? (void)0\t\t\t\t\t\t\t\\\n+   : (printf (\"assertion failed on line %i: %s\\n\",\t\t\\\n+\t\t\t__LINE__, #expr),\t\t\t\\\n+      abort ()))\n+\n+const char nul = 0;\n+const char cha = 'a';\n+\n+const struct\n+{\n+  char c;\n+} snul = { 0 },\n+  schb = { 'b' },\n+  sarr[] = {\n+  { 0 },\n+  { 'c' }\n+  };\n+\n+\n+void test_memchr_cst_char (void)\n+{\n+  A (&nul == memchr (&nul, 0, 1));\n+  A (!memchr (&nul, 'a', 1));\n+\n+  A (&cha == memchr (&cha, 'a', 1));\n+  A (!memchr (&cha, 0, 1));\n+\n+  A (&snul.c == memchr (&snul.c, 0, 1));\n+  A (!memchr (&snul.c, 'a', 1));\n+\n+  A (&schb.c == memchr (&schb.c, 'b', 1));\n+  A (!memchr (&schb.c, 0, 1));\n+\n+  A (&sarr[0].c == memchr (&sarr[0].c, 0, 1));\n+  A (!memchr (&sarr[0].c, 'a', 1));\n+\n+  A (&sarr[1].c == memchr (&sarr[1].c, 'c', 1));\n+  A (!memchr (&sarr[1].c, 0, 1));\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"optimized\" } } */"}, {"sha": "b891e536215ff5fd4f87fa0f7d833f2f2c940051", "filename": "gcc/testsuite/gcc.dg/builtin-memchr-3.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr-3.c?ref=70c70369ce868fd8b049f710c01a899e502f6f68", "patch": "@@ -0,0 +1,72 @@\n+/* Verify that memchr calls with a pointer to a constant character\n+   are folded as expected.\n+   { dg-do compile }\n+   { dg-options \"-O1 -Wall -fdump-tree-gimple\" } */\n+\n+typedef __SIZE_TYPE__  size_t;\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+extern void* memchr (const void*, int, size_t);\n+extern int printf (const char*, ...);\n+extern void abort (void);\n+\n+#define A(expr)\t\t\t\t\t\t\\\n+  ((expr)\t\t\t\t\t\t\\\n+   ? (void)0\t\t\t\t\t\t\\\n+   : (printf (\"assertion failed on line %i: %s\\n\",\t\\\n+\t      __LINE__, #expr),\t\t\t\t\\\n+      abort ()))\n+\n+const char nul = 0;\n+const char cha = 'a';\n+\n+const char* const pnul = &nul;\n+const char* const pcha = &cha;\n+\n+const struct\n+{\n+  char c;\n+} snul = { 0 },\n+  schb = { 'b' },\n+  sarr[] = {\n+  { 0 },\n+  { 'c' }\n+  };\n+\n+const char* const psarr0c = &sarr[0].c;\n+const char* const psarr1c = &sarr[1].c;\n+\n+void test_memchr_cst_char (void)\n+{\n+  A (&nul == memchr (&nul, 0, 1));\n+  A (!memchr (&nul, 'a', 1));\n+\n+  A (&cha == memchr (&cha, 'a', 1));\n+  A (!memchr (&cha, 0, 1));\n+\n+  A (&nul == memchr (pnul, 0, 1));\n+  A (!memchr (pnul, 'a', 1));\n+\n+  A (&cha == memchr (pcha, 'a', 1));\n+  A (!memchr (pcha, 0, 1));\n+\n+  A (&snul.c == memchr (&snul.c, 0, 1));\n+  A (!memchr (&snul.c, 'a', 1));\n+\n+  A (&schb.c == memchr (&schb.c, 'b', 1));\n+  A (!memchr (&schb.c, 0, 1));\n+\n+  A (&sarr[0].c == memchr (&sarr[0].c, 0, 1));\n+  A (!memchr (&sarr[0].c, 'a', 1));\n+\n+  A (&sarr[1].c == memchr (&sarr[1].c, 'c', 1));\n+  A (!memchr (&sarr[1].c, 0, 1));\n+\n+  A (&sarr[0].c == memchr (psarr0c, 0, 1));\n+  A (!memchr (psarr0c, 'a', 1));\n+\n+  A (&sarr[1].c == memchr (psarr1c, 'c', 1));\n+  A (!memchr (psarr1c, 0, 1));\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"optimized\" } } */"}, {"sha": "d3d776c03a897e6461fd25cc66eeb342278d02a7", "filename": "gcc/testsuite/gcc.dg/warn-sprintf-no-nul-2.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul-2.c?ref=70c70369ce868fd8b049f710c01a899e502f6f68", "patch": "@@ -0,0 +1,131 @@\n+/* PR tree-optimization/87756 - missing unterminated argument warning\n+   using address of a constant character\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+int sprintf (char*, const char*, ...);\n+\n+extern char* dest (void);\n+extern void sink (int, ...);\n+\n+#define D dest ()\n+#define T(expr)   sink (0, (expr))\n+\n+\n+const char cnul = '\\0';\n+const char cnonul = 'a';\n+const char str3[] = \"123\";\n+\n+const struct\n+{\n+  char a, b, s[3];\n+} s1 = { '\\0', 'b', \"123\" },\n+  s2[2] = {\n+  { '\\0', 'c', \"12\" },\n+  { 'd', '\\0', \"123\" }\n+  };\n+\n+void test_sprintf_s (void)\n+{\n+  T (sprintf (D, \"%s\", &cnul));\n+  T (sprintf (D, \"%s\", &cnonul));       /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.1s\", &cnonul));\n+  T (sprintf (D, \"%.2s\", &cnonul));     /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%s\", &s1.a));\n+  T (sprintf (D, \"%s\", &s1.b));         /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.1s\", &s1.b));\n+  T (sprintf (D, \"%.2s\", &s1.b));       /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%s\", s1.s));          /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.3s\", s1.s));\n+  T (sprintf (D, \"%.4s\", s1.s));        /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%.2s\", s1.s + 1));\n+  T (sprintf (D, \"%.3s\", s1.s + 1));    /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%s\", &s2[0].a));\n+  T (sprintf (D, \"%s\", &s2[0].b));      /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.1s\", &s2[0].b));\n+  T (sprintf (D, \"%.2s\", &s2[0].b));    /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%s\", s2[0].s));\n+  T (sprintf (D, \"%.3s\", s2[0].s));\n+  T (sprintf (D, \"%.4s\", s2[0].s));\n+\n+  T (sprintf (D, \"%.2s\", s2[0].s + 1));\n+  T (sprintf (D, \"%.3s\", s2[0].s + 1));\n+\n+  T (sprintf (D, \"%s\", &s2[1].a));      /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.1s\", &s2[1].a));\n+  T (sprintf (D, \"%.2s\", &s2[1].a));    /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%s\", &s2[1].b));\n+  T (sprintf (D, \"%s\", s2[1].s));       /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.3s\", s2[1].s));\n+  T (sprintf (D, \"%.4s\", s2[1].s));     /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%.2s\", s2[1].s + 1));\n+  T (sprintf (D, \"%.3s\", s2[1].s + 1)); /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%s\", &str3[3]));\n+  T (sprintf (D, \"%s\", &str3[4]));      /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+\n+const char wnul = '\\0';\n+const char wnonul = 'a';\n+const char wcs3[] = \"123\";\n+\n+const struct\n+{\n+  char a, b, s[3];\n+} w1 = { '\\0', 'b', \"123\" },\n+  w2[2] = {\n+  { '\\0', 'c', \"12\" },\n+  { 'd', '\\0', \"123\" }\n+  };\n+\n+void test_sprintf_ls (void)\n+{\n+  T (sprintf (D, \"%s\", &wnul));\n+  T (sprintf (D, \"%s\", &wnonul));       /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.1s\", &wnonul));\n+  T (sprintf (D, \"%.2s\", &wnonul));     /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%s\", &w1.a));\n+  T (sprintf (D, \"%s\", &w1.b));         /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.1s\", &w1.b));\n+  T (sprintf (D, \"%.2s\", &w1.b));       /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%s\", w1.s));          /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.3s\", w1.s));\n+  T (sprintf (D, \"%.4s\", w1.s));        /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%.2s\", w1.s + 1));\n+  T (sprintf (D, \"%.3s\", w1.s + 1));    /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%s\", &w2[0].a));\n+  T (sprintf (D, \"%s\", &w2[0].b));      /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.1s\", &w2[0].b));\n+  T (sprintf (D, \"%.2s\", &w2[0].b));    /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%s\", w2[0].s));\n+  T (sprintf (D, \"%.3s\", w2[0].s));\n+  T (sprintf (D, \"%.4s\", w2[0].s));\n+\n+  T (sprintf (D, \"%.2s\", w2[0].s + 1));\n+  T (sprintf (D, \"%.3s\", w2[0].s + 1));\n+\n+  T (sprintf (D, \"%s\", &w2[1].a));      /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.1s\", &w2[1].a));\n+  T (sprintf (D, \"%.2s\", &w2[1].a));    /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%s\", &w2[1].b));\n+  T (sprintf (D, \"%s\", w2[1].s));       /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.3s\", w2[1].s));\n+  T (sprintf (D, \"%.4s\", w2[1].s));     /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%.2s\", w2[1].s + 1));\n+  T (sprintf (D, \"%.3s\", w2[1].s + 1)); /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%s\", &wcs3[3]));\n+  T (sprintf (D, \"%s\", &wcs3[4]));      /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}"}, {"sha": "1e19a0bbdaccb16648ca6751b3b6f24bfcfe6d36", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=70c70369ce868fd8b049f710c01a899e502f6f68", "patch": "@@ -11517,25 +11517,28 @@ build_alloca_call_expr (tree size, unsigned int align, HOST_WIDE_INT max_size)\n     }\n }\n \n-/* Create a new constant string literal and return a char* pointer to it.\n-   The STRING_CST value is the LEN characters at STR.  */\n+/* Create a new constant string literal consisting of elements of type\n+   ELTYPE and return a tree node representing char* pointer to it as\n+   an ADDR_EXPR (ARRAY_REF (ELTYPE, ...)).  The STRING_CST value is\n+   the LEN bytes at STR (the representation of the string, which may\n+   be wide).  */\n+\n tree\n-build_string_literal (int len, const char *str)\n+build_string_literal (int len, const char *str,\n+\t\t      tree eltype /* = char_type_node */)\n {\n-  tree t, elem, index, type;\n-\n-  t = build_string (len, str);\n-  elem = build_type_variant (char_type_node, 1, 0);\n-  index = build_index_type (size_int (len - 1));\n-  type = build_array_type (elem, index);\n+  tree t = build_string (len, str);\n+  tree index = build_index_type (size_int (len - 1));\n+  eltype = build_type_variant (eltype, 1, 0);\n+  tree type = build_array_type (eltype, index);\n   TREE_TYPE (t) = type;\n   TREE_CONSTANT (t) = 1;\n   TREE_READONLY (t) = 1;\n   TREE_STATIC (t) = 1;\n \n-  type = build_pointer_type (elem);\n+  type = build_pointer_type (eltype);\n   t = build1 (ADDR_EXPR, type,\n-\t      build4 (ARRAY_REF, elem,\n+\t      build4 (ARRAY_REF, eltype,\n \t\t      t, integer_zero_node, NULL_TREE, NULL_TREE));\n   return t;\n }"}, {"sha": "0767ee80ad369f27a6f2087a2152cb4473806a6b", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c70369ce868fd8b049f710c01a899e502f6f68/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=70c70369ce868fd8b049f710c01a899e502f6f68", "patch": "@@ -4230,7 +4230,7 @@ extern tree build_call_expr_internal_loc_array (location_t, enum internal_fn,\n extern tree maybe_build_call_expr_loc (location_t, combined_fn, tree,\n \t\t\t\t       int, ...);\n extern tree build_alloca_call_expr (tree, unsigned int, HOST_WIDE_INT);\n-extern tree build_string_literal (int, const char *);\n+extern tree build_string_literal (int, const char *, tree = char_type_node);\n \n /* Construct various nodes representing data types.  */\n "}]}