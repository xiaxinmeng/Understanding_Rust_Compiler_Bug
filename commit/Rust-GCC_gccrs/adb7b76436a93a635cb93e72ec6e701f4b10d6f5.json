{"sha": "adb7b76436a93a635cb93e72ec6e701f4b10d6f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiN2I3NjQzNmE5M2E2MzVjYjkzZTcyZWM2ZTcwMWY0YjEwZDZmNQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2005-08-14T14:26:51Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2005-08-14T14:26:51Z"}, "message": "re PR target/23360 (-ffast-math startup broken on i686 (maybe Athlon-xp))\n\n2005-08-14  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/23360\n\t* config/i386/crtfastmath.c (set_fast_math): Check if DAZ is\n\tavailable for setting it.\n\nFrom-SVN: r103078", "tree": {"sha": "6f393d450b806a9d1902b1a360c610790fe9a589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f393d450b806a9d1902b1a360c610790fe9a589"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adb7b76436a93a635cb93e72ec6e701f4b10d6f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb7b76436a93a635cb93e72ec6e701f4b10d6f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb7b76436a93a635cb93e72ec6e701f4b10d6f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb7b76436a93a635cb93e72ec6e701f4b10d6f5/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f400bbb8f014c3259d65d03a119a49589c76348", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f400bbb8f014c3259d65d03a119a49589c76348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f400bbb8f014c3259d65d03a119a49589c76348"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "f112f1ba291e15c25dcf1bd5a3ebad305d017d09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb7b76436a93a635cb93e72ec6e701f4b10d6f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb7b76436a93a635cb93e72ec6e701f4b10d6f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adb7b76436a93a635cb93e72ec6e701f4b10d6f5", "patch": "@@ -1,3 +1,9 @@\n+2005-08-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/23360\n+\t* config/i386/crtfastmath.c (set_fast_math): Check if DAZ is\n+\tavailable for setting it.\n+\n 2005-08-14  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/23320"}, {"sha": "fdff24723ac80aa8c544950fd0aac18392bea2f3", "filename": "gcc/config/i386/crtfastmath.c", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb7b76436a93a635cb93e72ec6e701f4b10d6f5/gcc%2Fconfig%2Fi386%2Fcrtfastmath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb7b76436a93a635cb93e72ec6e701f4b10d6f5/gcc%2Fconfig%2Fi386%2Fcrtfastmath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcrtfastmath.c?ref=adb7b76436a93a635cb93e72ec6e701f4b10d6f5", "patch": "@@ -34,11 +34,15 @@\n #define MXCSR_DAZ (1 << 6)\t/* Enable denormals are zero mode */\n #define MXCSR_FTZ (1 << 15)\t/* Enable flush to zero mode */\n \n+#define FXSAVE\t(1 << 24)\n+#define SSE\t(1 << 25)\n+\n static void __attribute__((constructor))\n set_fast_math (void)\n {\n #ifndef __x86_64__\n-  /* SSE is the part of 64bit. Only need to check it for 32bit.  */\n+  /* All 64-bit targets have SSE and DAZ; only check them explicitly\n+     for 32-bit ones. */\n   unsigned int eax, ebx, ecx, edx;\n \n   /* See if we can use cpuid.  */\n@@ -62,11 +66,45 @@ set_fast_math (void)\n \t\t: \"=a\" (eax), \"=r\" (ebx), \"=c\" (ecx), \"=d\" (edx)\n \t\t: \"0\" (1));\n \n-  if (edx & (1 << 25))\n-#endif\n+  if (edx & SSE)\n     {\n       unsigned int mxcsr = __builtin_ia32_stmxcsr ();\n-      mxcsr |= MXCSR_DAZ | MXCSR_FTZ;\n+  \n+      mxcsr |= MXCSR_FTZ;\n+\n+      if (edx & FXSAVE)\n+\t{\n+\t  /* Check if DAZ is available.  */\n+\t  struct\n+\t    {\n+\t      unsigned short int cwd;\n+\t      unsigned short int swd;\n+\t      unsigned short int twd;\n+\t      unsigned short int fop;\n+\t      long int fip;\n+\t      long int fcs;\n+\t      long int foo;\n+\t      long int fos;\n+\t      long int mxcsr;\n+\t      long int mxcsr_mask;\n+\t      long int st_space[32];\n+\t      long int xmm_space[32];\n+\t      long int padding[56];\n+\t    } __attribute__ ((aligned (16))) fxsave;\n+\n+\t  __builtin_memset (&fxsave, 0, sizeof (fxsave));\n+\n+\t  asm volatile (\"fxsave %0\" : : \"m\" (fxsave));\n+\n+\t  if (fxsave.mxcsr_mask & MXCSR_DAZ)\n+\t    mxcsr |= MXCSR_DAZ;\n+\t}\n+\n       __builtin_ia32_ldmxcsr (mxcsr);\n     }\n+#else\n+  unsigned int mxcsr = __builtin_ia32_stmxcsr ();\n+  mxcsr |= MXCSR_DAZ | MXCSR_FTZ;\n+  __builtin_ia32_ldmxcsr (mxcsr);\n+#endif\n }"}]}