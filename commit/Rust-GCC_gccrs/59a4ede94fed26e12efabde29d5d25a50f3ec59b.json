{"sha": "59a4ede94fed26e12efabde29d5d25a50f3ec59b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlhNGVkZTk0ZmVkMjZlMTJlZmFiZGUyOWQ1ZDI1YTUwZjNlYzU5Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-18T10:49:48Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-18T10:49:48Z"}, "message": "name-lookup.c (find_local_binding): New, broken out of ...\n\n\t* name-lookup.c (find_local_binding): New, broken out of ...\n\t(lookup_name_innermost_nonclass_level_1): ... here.  Call it.\n\t(set_namespace_binding): Swap scope & name args.\n\t(namespace_binding_1): Likewise.\n\t(pushdecl_maybe_friend_1): Adjust set_namespace_binding call.\n\t(push_overloaded_decl_1): Likewise.\n\t(set_global_binding): Likewise.\n\t(get_namespace_binding): Adjust namespace_binding_1 call.\n\nFrom-SVN: r248191", "tree": {"sha": "aa9749aea986bd272ed1d4683763dbf8f0f4b5d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa9749aea986bd272ed1d4683763dbf8f0f4b5d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59a4ede94fed26e12efabde29d5d25a50f3ec59b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a4ede94fed26e12efabde29d5d25a50f3ec59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a4ede94fed26e12efabde29d5d25a50f3ec59b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a4ede94fed26e12efabde29d5d25a50f3ec59b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8985968cc416f890fc61acadb53433225fe4c66a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8985968cc416f890fc61acadb53433225fe4c66a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8985968cc416f890fc61acadb53433225fe4c66a"}], "stats": {"total": 82, "additions": 44, "deletions": 38}, "files": [{"sha": "3936877a09049c8199687a9bc77e5c10adb5494a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a4ede94fed26e12efabde29d5d25a50f3ec59b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a4ede94fed26e12efabde29d5d25a50f3ec59b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=59a4ede94fed26e12efabde29d5d25a50f3ec59b", "patch": "@@ -1,3 +1,14 @@\n+2017-05-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (find_local_binding): New, broken out of ...\n+\t(lookup_name_innermost_nonclass_level_1): ... here.  Call it.\n+\t(set_namespace_binding): Swap scope & name args.\n+\t(namespace_binding_1): Likewise.\n+\t(pushdecl_maybe_friend_1): Adjust set_namespace_binding call.\n+\t(push_overloaded_decl_1): Likewise.\n+\t(set_global_binding): Likewise.\n+\t(get_namespace_binding): Adjust namespace_binding_1 call.\n+\n 2017-05-17  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (default_hash_traits <lang_identifier *>): New"}, {"sha": "c94aeb56183f189c41d0e9c3fcbf26929447dc61", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 33, "deletions": 38, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a4ede94fed26e12efabde29d5d25a50f3ec59b/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a4ede94fed26e12efabde29d5d25a50f3ec59b/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=59a4ede94fed26e12efabde29d5d25a50f3ec59b", "patch": "@@ -37,7 +37,7 @@ static cxx_binding *cxx_binding_make (tree value, tree type);\n static cp_binding_level *innermost_nonclass_level (void);\n static void set_identifier_type_value_with_scope (tree id, tree decl,\n \t\t\t\t\t\t  cp_binding_level *b);\n-static void set_namespace_binding (tree name, tree scope, tree val);\n+static void set_namespace_binding (tree scope, tree name, tree val);\n \n /* The bindings for a particular name in a particular scope.  */\n \n@@ -99,6 +99,26 @@ add_decl_to_level (tree decl, cp_binding_level *b)\n     }\n }\n \n+/* Find the binding for NAME in the local binding level B.  */\n+\n+static cxx_binding *\n+find_local_binding (cp_binding_level *b, tree name)\n+{\n+  if (cxx_binding *binding = IDENTIFIER_BINDING (name))\n+    for (;; b = b->level_chain)\n+      {\n+\tif (binding->scope == b\n+\t    && !(VAR_P (binding->value)\n+\t\t && DECL_DEAD_FOR_LOCAL (binding->value)))\n+\t  return binding;\n+\n+\t/* Cleanup contours are transparent to the language.  */\n+\tif (b->kind != sk_cleanup)\n+\t  break;\n+      }\n+  return NULL;\n+}\n+\n /* [basic.lookup.koenig] */\n /* A nonzero return value in the functions below indicates an error.  */\n \n@@ -1778,7 +1798,7 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t\t  || TREE_CODE (x) == NAMESPACE_DECL\n \t\t  || TREE_CODE (x) == CONST_DECL\n \t\t  || TREE_CODE (x) == TEMPLATE_DECL))\n-\t    set_namespace_binding (name, current_namespace, x);\n+\t    set_namespace_binding (current_namespace, name, x);\n \n \t  /* If new decl is `static' and an `extern' was seen previously,\n \t     warn about it.  */\n@@ -2952,7 +2972,7 @@ push_overloaded_decl_1 (tree decl, int flags, bool is_friend)\n     new_binding = decl;\n \n   if (doing_global)\n-    set_namespace_binding (name, current_namespace, new_binding);\n+    set_namespace_binding (current_namespace, name, new_binding);\n   else\n     {\n       /* We only create an OVERLOAD if there was a previous binding at\n@@ -3964,7 +3984,7 @@ do_class_using_decl (tree scope, tree name)\n \n \n static tree\n-namespace_binding_1 (tree name, tree scope)\n+namespace_binding_1 (tree scope, tree name)\n {\n   cxx_binding *binding;\n \n@@ -3988,13 +4008,13 @@ get_namespace_binding (tree ns, tree name)\n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n   if (!ns)\n     ns = global_namespace;\n-  tree ret = namespace_binding_1 (name, ns);\n+  tree ret = namespace_binding_1 (ns, name);\n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n   return ret;\n }\n \n static void\n-set_namespace_binding (tree name, tree scope, tree val)\n+set_namespace_binding (tree scope, tree name, tree val)\n {\n   cxx_binding *b;\n \n@@ -4020,7 +4040,7 @@ set_global_binding (tree name, tree val)\n {\n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n \n-  set_namespace_binding (name, global_namespace, val);\n+  set_namespace_binding (global_namespace, name, val);\n \n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n }\n@@ -5760,39 +5780,14 @@ lookup_type_scope (tree name, tag_scope scope)\n static tree\n lookup_name_innermost_nonclass_level_1 (tree name)\n {\n-  cp_binding_level *b;\n-  tree t = NULL_TREE;\n-\n-  b = innermost_nonclass_level ();\n+  cp_binding_level *b = innermost_nonclass_level ();\n \n   if (b->kind == sk_namespace)\n-    {\n-      t = get_namespace_binding (current_namespace, name);\n-\n-      /* extern \"C\" function() */\n-      if (t != NULL_TREE && TREE_CODE (t) == TREE_LIST)\n-\tt = TREE_VALUE (t);\n-    }\n-  else if (IDENTIFIER_BINDING (name)\n-\t   && LOCAL_BINDING_P (IDENTIFIER_BINDING (name)))\n-    {\n-      cxx_binding *binding;\n-      binding = IDENTIFIER_BINDING (name);\n-      while (1)\n-\t{\n-\t  if (binding->scope == b\n-\t      && !(VAR_P (binding->value)\n-\t\t   && DECL_DEAD_FOR_LOCAL (binding->value)))\n-\t    return binding->value;\n-\n-\t  if (b->kind == sk_cleanup)\n-\t    b = b->level_chain;\n-\t  else\n-\t    break;\n-\t}\n-    }\n-\n-  return t;\n+    return namespace_binding_1 (current_namespace, name);\n+  else if (cxx_binding *binding = find_local_binding (b, name))\n+    return binding->value;\n+  else\n+    return NULL_TREE;\n }\n \n /* Wrapper for lookup_name_innermost_nonclass_level_1.  */"}]}