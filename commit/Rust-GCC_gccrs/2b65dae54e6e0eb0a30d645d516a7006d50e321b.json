{"sha": "2b65dae54e6e0eb0a30d645d516a7006d50e321b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI2NWRhZTU0ZTZlMGViMGEzMGQ2NDVkNTE2YTcwMDZkNTBlMzIxYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-07-17T08:04:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-07-17T08:04:25Z"}, "message": "re PR tree-optimization/28238 (verify_stmts failed (invalid operand to unary operator))\n\n2006-07-17  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/28238\n\t* tree-inline.c (copy_bb): Check if we produced valid\n\tgimple copying and substituting a stmt.  If not, gimplify\n\tit.\n\n\t* g++.dg/tree-ssa/pr28238.C: New testcase.\n\nFrom-SVN: r115517", "tree": {"sha": "0b1589a866d7d8f6ffa994b2f8e67db942d248ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b1589a866d7d8f6ffa994b2f8e67db942d248ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b65dae54e6e0eb0a30d645d516a7006d50e321b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b65dae54e6e0eb0a30d645d516a7006d50e321b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b65dae54e6e0eb0a30d645d516a7006d50e321b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b65dae54e6e0eb0a30d645d516a7006d50e321b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a50edcd0f5cca974fe82b27a1b109618afa1a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a50edcd0f5cca974fe82b27a1b109618afa1a05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a50edcd0f5cca974fe82b27a1b109618afa1a05"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "8c6048b7e0900d5ff0f707fc410b9604764bd840", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b65dae54e6e0eb0a30d645d516a7006d50e321b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b65dae54e6e0eb0a30d645d516a7006d50e321b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b65dae54e6e0eb0a30d645d516a7006d50e321b", "patch": "@@ -1,3 +1,10 @@\n+2006-07-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28238\n+\t* tree-inline.c (copy_bb): Check if we produced valid\n+\tgimple copying and substituting a stmt.  If not, gimplify\n+\tit.\n+\n 2006-07-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* optabs.c (maybe_encapsulate_block): New function extracted from..."}, {"sha": "9b08ae65f01b07d4097f451919a7ee76482801ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b65dae54e6e0eb0a30d645d516a7006d50e321b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b65dae54e6e0eb0a30d645d516a7006d50e321b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b65dae54e6e0eb0a30d645d516a7006d50e321b", "patch": "@@ -1,3 +1,8 @@\n+2006-07-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28238\n+\t* g++.dg/tree-ssa/pr28238.C: New testcase.\n+\n 2006-07-17  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/28250"}, {"sha": "97e388fbd321cb20dde5507e6f0dc7232befa63a", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr28238.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b65dae54e6e0eb0a30d645d516a7006d50e321b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr28238.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b65dae54e6e0eb0a30d645d516a7006d50e321b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr28238.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr28238.C?ref=2b65dae54e6e0eb0a30d645d516a7006d50e321b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct iterator{};\n+struct ByteIterator : iterator\n+{\n+        ByteIterator (){}\n+        int a[1024];\n+};\n+inline ByteIterator f ()\n+{\n+        return  ByteIterator ();\n+}\n+class ConfLexerCore\n+{\n+        ConfLexerCore ();\n+        ByteIterator m_matchStart;\n+};\n+ConfLexerCore::ConfLexerCore ()\n+: m_matchStart (f ())\n+{ }\n+"}, {"sha": "92d85a89b2b0c45ed7781d1a4298c25d1f562928", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b65dae54e6e0eb0a30d645d516a7006d50e321b/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b65dae54e6e0eb0a30d645d516a7006d50e321b/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=2b65dae54e6e0eb0a30d645d516a7006d50e321b", "patch": "@@ -704,6 +704,14 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale, int count_scal\n       if (stmt)\n \t{\n \t  tree call, decl;\n+\n+\t  /* With return slot optimization we can end up with\n+\t     non-gimple (foo *)&this->m, fix that here.  */\n+\t  if (TREE_CODE (stmt) == MODIFY_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (stmt, 1)) == NOP_EXPR\n+\t      && !is_gimple_val (TREE_OPERAND (TREE_OPERAND (stmt, 1), 0)))\n+\t    gimplify_stmt (&stmt);\n+\n           bsi_insert_after (&copy_bsi, stmt, BSI_NEW_STMT);\n \t  call = get_call_expr_in (stmt);\n \t  /* We're duplicating a CALL_EXPR.  Find any corresponding"}]}