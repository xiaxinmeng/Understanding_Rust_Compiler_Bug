{"sha": "cff5cdc83d920e0ea10209a764649c6abc011804", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmNWNkYzgzZDkyMGUwZWExMDIwOWE3NjQ2NDljNmFiYzAxMTgwNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-21T17:06:56Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-21T17:06:56Z"}, "message": "2003-06-21  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/File.java\n\t(static): Load javaio lib if existing (only in classpath).\n\t(File): Revised documentation to show the correct argument name.\n\t(createTempFile): Partly merged with classpath.\n\t(compareTo): Simplified.\n\t(lastModified): Throw exception if time < 0.\n\t(deleteOnExit): Revised documentation.\n\nFrom-SVN: r68310", "tree": {"sha": "e94ec9e16b029a498d6cf1390e66064b4a0ab438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e94ec9e16b029a498d6cf1390e66064b4a0ab438"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff5cdc83d920e0ea10209a764649c6abc011804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff5cdc83d920e0ea10209a764649c6abc011804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff5cdc83d920e0ea10209a764649c6abc011804", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff5cdc83d920e0ea10209a764649c6abc011804/comments", "author": null, "committer": null, "parents": [{"sha": "84cc377e7fada373402dc72c1bc2c7fea4b544f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84cc377e7fada373402dc72c1bc2c7fea4b544f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84cc377e7fada373402dc72c1bc2c7fea4b544f2"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "6d6ad1701ff25a996058bd72f051bde767576883", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff5cdc83d920e0ea10209a764649c6abc011804/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff5cdc83d920e0ea10209a764649c6abc011804/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cff5cdc83d920e0ea10209a764649c6abc011804", "patch": "@@ -1,3 +1,13 @@\n+2003-06-21  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/File.java\n+\t(static): Load javaio lib if existing (only in classpath).\n+\t(File): Revised documentation to show the correct argument name.\n+\t(createTempFile): Partly merged with classpath.\n+\t(compareTo): Simplified.\n+\t(lastModified): Throw exception if time < 0.\n+\t(deleteOnExit): Revised documentation.\n+\n 2003-06-21  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/PlainSocketImpl.java:"}, {"sha": "ba18a596c2a987f3894792e0ce7a8bee1a8069b8", "filename": "libjava/java/io/File.java", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff5cdc83d920e0ea10209a764649c6abc011804/libjava%2Fjava%2Fio%2FFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff5cdc83d920e0ea10209a764649c6abc011804/libjava%2Fjava%2Fio%2FFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFile.java?ref=cff5cdc83d920e0ea10209a764649c6abc011804", "patch": "@@ -40,6 +40,7 @@\n \n import java.net.MalformedURLException;\n import java.net.URL;\n+import gnu.classpath.Configuration;\n import gnu.gcj.runtime.FileDeleter;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n@@ -111,15 +112,19 @@ public class File implements Serializable, Comparable\n    */\n   public static final char pathSeparatorChar = pathSeparator.charAt(0);\n   \n-\n   static final String tmpdir = System.getProperty(\"java.io.tmpdir\");\n   static int maxPathLen;\n   static boolean caseSensitive;\n   static String dupSeparator = separator + separator;\n   \n   static\n   {\n-    init_native();\n+    if (Configuration.INIT_LOAD_LIBRARY)\n+      {\n+        System.loadLibrary (\"javaio\");\n+      }\n+    \n+    init_native ();\n   }\n   \n   // Native function called at class initialization. This should should\n@@ -345,7 +350,7 @@ private String normalizePath(String p)\n    * name.  If the directory path name ends in the separator string, another\n    * separator string will still be appended.\n    *\n-   * @param dirname The path to the directory the file resides in\n+   * @param dirPath The path to the directory the file resides in\n    * @param name The name of the file\n    */\n   public File (String dirPath, String name)\n@@ -711,7 +716,6 @@ public long length ()\n    * This native function actually produces the list of file in this\n    * directory\n    */\n-    \n   private final native Object[] performList (FilenameFilter filter,\n \t\t\t\t\t     FileFilter fileFilter,\n \t\t\t\t\t     Class result_type);\n@@ -984,21 +988,21 @@ public static File createTempFile (String prefix, String suffix,\n     // Grab the system temp directory if necessary\n     if (directory == null)\n       {\n-\tString dirname = tmpdir;\n-\tif (dirname == null)\n-\t  throw \n-\t    new IOException (\"Cannot determine system temporary directory\"); \n+        String dirname = tmpdir;\n+        if (dirname == null)\n+          throw new IOException (\"Cannot determine system temporary directory\"); \n \t\n-\tdirectory = new File (dirname);\n-\tif (!directory.exists ())\n-\t  throw new IOException (\"System temporary directory \" \n-\t\t\t\t + directory.getName() + \" does not exist.\");\n-\tif (!directory.isDirectory())\n-\t  throw new IOException (\"System temporary directory \" \n-\t\t\t\t + directory.getName() \n-\t\t\t\t + \" is not really a directory.\");\n+        directory = new File (dirname);\n+        if (!directory.exists ())\n+          throw new IOException (\"System temporary directory \"\n+                                 + directory.getName () + \" does not exist.\");\n+        if (!directory.isDirectory ())\n+          throw new IOException (\"System temporary directory \"\n+                                 + directory.getName ()\n+                                 + \" is not really a directory.\");\n       }\n \n+    // Now process the prefix and suffix.\n     if (prefix.length () < 3)\n       throw new IllegalArgumentException (\"Prefix too short: \" + prefix);\n \n@@ -1162,7 +1166,7 @@ public static File createTempFile (String prefix, String suffix)\n    *\n    * @since 1.2\n    */\n-  public int compareTo(File other)\n+  public int compareTo (File other)\n   {\n     if (caseSensitive)\n       return path.compareTo (other.path);\n@@ -1191,10 +1195,9 @@ public int compareTo(File other)\n    *\n    * @since 1.2\n    */\n-  public int compareTo(Object o)\n+  public int compareTo (Object obj)\n   {\n-    File other = (File) o;\n-    return compareTo (other);\n+    return compareTo ((File) obj);\n   }\n \n   /*\n@@ -1250,6 +1253,9 @@ public synchronized boolean renameTo (File dest)\n    */\n   public boolean setLastModified (long time) \n   {\n+    if (time < 0)\n+      throw new IllegalArgumentException(\"Negative modification time: \" + time);\n+\n     checkWrite ();\n     return performSetLastModified(time);\n   }\n@@ -1276,6 +1282,8 @@ private void checkRead ()\n    * Add this File to the set of files to be deleted upon normal\n    * termination.\n    *\n+   * @exception SecurityException If deleting of the file is not allowed\n+   *\n    * @since 1.2 \n    */\n   // FIXME: This should use the ShutdownHook API once we implement that."}]}