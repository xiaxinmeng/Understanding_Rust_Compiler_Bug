{"sha": "aa863dca8bcd4410c4281b468d34e73319c8449f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE4NjNkY2E4YmNkNDQxMGM0MjgxYjQ2OGQzNGU3MzMxOWM4NDQ5Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-12-02T18:53:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-12-02T18:53:41Z"}, "message": "basic_string.tcc (basic_string::append(const basic_string&, size_type, size_type), [...]): Fully qualify min() with std::.\n\n2002-12-02  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/basic_string.tcc\n\t(basic_string::append(const basic_string&, size_type,\n\tsize_type), basic_string::compare(size_type, size_type,\n\tconst basic_string&), basic_string::compare(size_type,\n\tsize_type, const basic_string&, size_type, size_type),\n\tbasic_string::compare(const _CharT*), basic_string::\n\tcompare(size_type, size_type, const _CharT*),\n\tbasic_string::compare(size_type, size_type, const _CharT*,\n\tsize_type), _S_string_copy(const basic_string&, _CharT*,\n\ttypename _Alloc::size_type)): Fully qualify min() with std::.\n\n2002-12-02  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/basic_string.tcc\n\t(basic_string::_S_construct(_InIter, _InIter, const _Alloc&,\n\tforward_iterator_tag)): Delay the declaration of __dnew,\n\tfully qualify distance() with std::.\n\t(basic_string::_M_replace_safe): Fully qualify distance()\n\twith std::.\n\nFrom-SVN: r59726", "tree": {"sha": "389247f9efc1bf3909190d090c3b3f98faa9454f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/389247f9efc1bf3909190d090c3b3f98faa9454f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa863dca8bcd4410c4281b468d34e73319c8449f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa863dca8bcd4410c4281b468d34e73319c8449f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa863dca8bcd4410c4281b468d34e73319c8449f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa863dca8bcd4410c4281b468d34e73319c8449f/comments", "author": null, "committer": null, "parents": [{"sha": "adc72fa6ce7c89cbf7f35d3b53c7067006517ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc72fa6ce7c89cbf7f35d3b53c7067006517ec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adc72fa6ce7c89cbf7f35d3b53c7067006517ec3"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "247de6bfc16ede4a1d9b97eaa0ad2560dc0efe40", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa863dca8bcd4410c4281b468d34e73319c8449f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa863dca8bcd4410c4281b468d34e73319c8449f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa863dca8bcd4410c4281b468d34e73319c8449f", "patch": "@@ -1,3 +1,25 @@\n+2002-12-02  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/basic_string.tcc\n+\t(basic_string::append(const basic_string&, size_type,\n+\tsize_type), basic_string::compare(size_type, size_type,\n+\tconst basic_string&), basic_string::compare(size_type,\n+\tsize_type, const basic_string&, size_type, size_type),\n+\tbasic_string::compare(const _CharT*), basic_string::\n+\tcompare(size_type, size_type, const _CharT*),\n+\tbasic_string::compare(size_type, size_type, const _CharT*,\n+\tsize_type), _S_string_copy(const basic_string&, _CharT*,\n+\ttypename _Alloc::size_type)): Fully qualify min() with std::.\n+\t\n+2002-12-02  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/basic_string.tcc\n+\t(basic_string::_S_construct(_InIter, _InIter, const _Alloc&,\n+\tforward_iterator_tag)): Delay the declaration of __dnew,\n+\tfully qualify distance() with std::.\n+\t(basic_string::_M_replace_safe): Fully qualify distance()\n+\twith std::.\n+\n 2002-11-28  Phil Edwards  <pme@gcc.gnu.org>\n \n \tPR libstdc++/8716"}, {"sha": "70dd991ea3eb80c98f7fee10a100702f36ea06f5", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa863dca8bcd4410c4281b468d34e73319c8449f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa863dca8bcd4410c4281b468d34e73319c8449f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=aa863dca8bcd4410c4281b468d34e73319c8449f", "patch": "@@ -137,14 +137,14 @@ namespace std\n       _S_construct(_InIter __beg, _InIter __end, const _Alloc& __a, \n \t\t   forward_iterator_tag)\n       {\n-\tsize_type __dnew = static_cast<size_type>(distance(__beg, __end));\n-\n \tif (__beg == __end && __a == _Alloc())\n \t  return _S_empty_rep()._M_refcopy();\n \n \t// NB: Not required, but considered best practice.\n \tif (__builtin_expect(__beg == _InIter(), 0))\n \t  __throw_logic_error(\"attempt to create string with null pointer\");\n+\n+\tsize_type __dnew = static_cast<size_type>(std::distance(__beg, __end));\n \t\n \t// Check for out_of_range and length_error exceptions.\n \t_Rep* __r = _Rep::_S_create(__dnew, __a);\n@@ -523,7 +523,7 @@ namespace std\n       _M_replace_safe(iterator __i1, iterator __i2, _ForwardIter __k1, \n \t\t      _ForwardIter __k2)\n       {\n-\tsize_type __dnew = static_cast<size_type>(distance(__k1, __k2));\n+\tsize_type __dnew = static_cast<size_type>(std::distance(__k1, __k2));\n \tsize_type __dold = __i2 - __i1;\n \tsize_type __dmax = this->max_size();\n \n@@ -578,7 +578,7 @@ namespace std\n       // Iff appending itself, string needs to pre-reserve the\n       // correct size so that _M_mutate does not clobber the\n       // iterators formed here.\n-      size_type __len = min(__str.size() - __pos, __n) + this->size();\n+      size_type __len = std::min(__str.size() - __pos, __n) + this->size();\n       if (__len > this->capacity())\n \tthis->reserve(__len);\n       return _M_replace_safe(_M_iend(), _M_iend(), __str._M_check(__pos),\n@@ -848,8 +848,8 @@ namespace std\n       if (__pos > __size)\n \t__throw_out_of_range(\"basic_string::compare\");\n       \n-      size_type __rsize= min(__size - __pos, __n);\n-      size_type __len = min(__rsize, __osize);\n+      size_type __rsize= std::min(__size - __pos, __n);\n+      size_type __len = std::min(__rsize, __osize);\n       int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);\n       if (!__r)\n \t__r = __rsize - __osize;\n@@ -867,9 +867,9 @@ namespace std\n       if (__pos1 > __size || __pos2 > __osize)\n \t__throw_out_of_range(\"basic_string::compare\");\n       \n-      size_type __rsize = min(__size - __pos1, __n1);\n-      size_type __rosize = min(__osize - __pos2, __n2);\n-      size_type __len = min(__rsize, __rosize);\n+      size_type __rsize = std::min(__size - __pos1, __n1);\n+      size_type __rosize = std::min(__osize - __pos2, __n2);\n+      size_type __len = std::min(__rsize, __rosize);\n       int __r = traits_type::compare(_M_data() + __pos1, \n \t\t\t\t     __str.data() + __pos2, __len);\n       if (!__r)\n@@ -885,7 +885,7 @@ namespace std\n     {\n       size_type __size = this->size();\n       size_type __osize = traits_type::length(__s);\n-      size_type __len = min(__size, __osize);\n+      size_type __len = std::min(__size, __osize);\n       int __r = traits_type::compare(_M_data(), __s, __len);\n       if (!__r)\n \t__r = __size - __osize;\n@@ -903,8 +903,8 @@ namespace std\n \t__throw_out_of_range(\"basic_string::compare\");\n       \n       size_type __osize = traits_type::length(__s);\n-      size_type __rsize = min(__size - __pos, __n1);\n-      size_type __len = min(__rsize, __osize);\n+      size_type __rsize = std::min(__size - __pos, __n1);\n+      size_type __len = std::min(__rsize, __osize);\n       int __r = traits_type::compare(_M_data() + __pos, __s, __len);\n       if (!__r)\n \t__r = __rsize - __osize;\n@@ -921,9 +921,9 @@ namespace std\n       if (__pos > __size)\n \t__throw_out_of_range(\"basic_string::compare\");\n       \n-      size_type __osize = min(traits_type::length(__s), __n2);\n-      size_type __rsize = min(__size - __pos, __n1);\n-      size_type __len = min(__rsize, __osize);\n+      size_type __osize = std::min(traits_type::length(__s), __n2);\n+      size_type __rsize = std::min(__size - __pos, __n1);\n+      size_type __len = std::min(__rsize, __osize);\n       int __r = traits_type::compare(_M_data() + __pos, __s, __len);\n       if (!__r)\n \t__r = __rsize - __osize;\n@@ -937,7 +937,7 @@ namespace std\n     {\n       typedef typename _Alloc::size_type size_type;\n       size_type __strsize = __str.size();\n-      size_type __bytes = min(__strsize, __bufsiz - 1);\n+      size_type __bytes = std::min(__strsize, __bufsiz - 1);\n       _Traits::copy(__buf, __str.data(), __bytes);\n       __buf[__bytes] = _CharT();\n     }"}]}