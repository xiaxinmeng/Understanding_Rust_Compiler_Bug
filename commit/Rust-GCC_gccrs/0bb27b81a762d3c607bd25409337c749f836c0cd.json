{"sha": "0bb27b81a762d3c607bd25409337c749f836c0cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJiMjdiODFhNzYyZDNjNjA3YmQyNTQwOTMzN2M3NDlmODM2YzBjZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-20T21:09:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-20T21:10:20Z"}, "message": "libgomp: Fix up GOMP_task on s390x\n\nOn Wed, Jan 20, 2021 at 05:04:39PM +0100, Florian Weimer wrote:\n> Sorry, this appears to cause OpenMP task state corruption in RPM.  We\n> have only seen this on s390x.\n\nHaven't actually verified it, but my suspection is that this is a caller\nstack corruption.\n\nWe play with fire with the GOMP_task API/ABI extensions, the GOMP_task\nfunction used to be:\nvoid\nGOMP_task (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n           long arg_size, long arg_align, bool if_clause, unsigned flags);\nand later:\nvoid\nGOMP_task (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n           long arg_size, long arg_align, bool if_clause, unsigned flags,\n           void **depend);\nand later:\nvoid\nGOMP_task (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n           long arg_size, long arg_align, bool if_clause, unsigned flags,\n           void **depend, int priority);\nand now:\nvoid\nGOMP_task (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n           long arg_size, long arg_align, bool if_clause, unsigned flags,\n           void **depend, int priority, void *detach)\nand which of those depend, priority and detach argument is present depends\non the bits in flags.\nI'm afraid the compiler just decided to spill the detach = NULL store in\n  if ((flags & GOMP_TASK_FLAG_DETACH) == 0)\n    detach = NULL;\non s390x into the argument stack slot.  Not a problem if the caller passes\nall those 10 arguments, but if not, can clobber random stack location.\n\nThis hack should fix it up.  Priority doesn't need changing, but I've\nchanged it anyway just to be safe.  With the patch none of the 3 arguments\nare ever modified, so I'd hope gcc doesn't decide to spill something\nunrelated there.\n\n2021-01-20  Jakub Jelinek  <jakub@redhat.com>\n\n\t* task.c (GOMP_task): Rename priority argument to priority_arg,\n\tadd priority automatic variable and modify that variable.  Instead of\n\tclearing detach argument when GOMP_TASK_FLAG_DETACH bit is not set,\n\tcheck flags for that bit.", "tree": {"sha": "b605fcecf20f301a4ababf25584cead89416eb82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b605fcecf20f301a4ababf25584cead89416eb82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bb27b81a762d3c607bd25409337c749f836c0cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb27b81a762d3c607bd25409337c749f836c0cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb27b81a762d3c607bd25409337c749f836c0cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb27b81a762d3c607bd25409337c749f836c0cd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911f797a9be2dc8ef59f5d5bd6d68baf650b8822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911f797a9be2dc8ef59f5d5bd6d68baf650b8822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911f797a9be2dc8ef59f5d5bd6d68baf650b8822"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "b242e7c8d20302891907ac76550ed891e5a9463a", "filename": "libgomp/task.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb27b81a762d3c607bd25409337c749f836c0cd/libgomp%2Ftask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb27b81a762d3c607bd25409337c749f836c0cd/libgomp%2Ftask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftask.c?ref=0bb27b81a762d3c607bd25409337c749f836c0cd", "patch": "@@ -354,10 +354,11 @@ task_fulfilled_p (struct gomp_task *task)\n void\n GOMP_task (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n \t   long arg_size, long arg_align, bool if_clause, unsigned flags,\n-\t   void **depend, int priority, void *detach)\n+\t   void **depend, int priority_arg, void *detach)\n {\n   struct gomp_thread *thr = gomp_thread ();\n   struct gomp_team *team = thr->ts.team;\n+  int priority = 0;\n \n #ifdef HAVE_BROKEN_POSIX_SEMAPHORES\n   /* If pthread_mutex_* is used for omp_*lock*, then each task must be\n@@ -385,13 +386,12 @@ GOMP_task (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n \t}\n     }\n \n-  if ((flags & GOMP_TASK_FLAG_PRIORITY) == 0)\n-    priority = 0;\n-  else if (priority > gomp_max_task_priority_var)\n-    priority = gomp_max_task_priority_var;\n-\n-  if ((flags & GOMP_TASK_FLAG_DETACH) == 0)\n-    detach = NULL;\n+  if (__builtin_expect ((flags & GOMP_TASK_FLAG_PRIORITY) != 0, 0))\n+    {\n+      priority = priority_arg;\n+      if (priority > gomp_max_task_priority_var)\n+\tpriority = gomp_max_task_priority_var;\n+    }\n \n   if (!if_clause || team == NULL\n       || (thr->task && thr->task->final_task)\n@@ -415,7 +415,7 @@ GOMP_task (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n \t\t\t|| (flags & GOMP_TASK_FLAG_FINAL);\n       task.priority = priority;\n \n-      if (detach)\n+      if ((flags & GOMP_TASK_FLAG_DETACH) != 0)\n \t{\n \t  task.detach = true;\n \t  gomp_sem_init (&task.completion_sem, 0);\n@@ -443,7 +443,7 @@ GOMP_task (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n       else\n \tfn (data);\n \n-      if (detach && !task_fulfilled_p (&task))\n+      if (task.detach && !task_fulfilled_p (&task))\n \tgomp_sem_wait (&task.completion_sem);\n \n       /* Access to \"children\" is normally done inside a task_lock\n@@ -484,7 +484,7 @@ GOMP_task (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n       task->kind = GOMP_TASK_UNDEFERRED;\n       task->in_tied_task = parent->in_tied_task;\n       task->taskgroup = taskgroup;\n-      if (detach)\n+      if ((flags & GOMP_TASK_FLAG_DETACH) != 0)\n \t{\n \t  task->detach = true;\n \t  gomp_sem_init (&task->completion_sem, 0);"}]}