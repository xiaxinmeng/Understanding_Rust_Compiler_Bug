{"sha": "75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhZWUwNzI2OTZhNzExZjNlNWIzYmQxYWIxZjJiMTBmZWY0YzdkZA==", "commit": {"author": {"name": "Keith Packard", "email": "keithp@keithp.com", "date": "2020-12-15T17:39:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-15T17:39:24Z"}, "message": "libstdc++: Support libc with stdio-only I/O in libstdc++\n\nThe current libstdc++ basic_file_stdio.cc code assumes a POSIX API\nunderneath the stdio implementation provided by the host libc. This\nmeans that the host must provide a fairly broad POSIX file API,\nincluding read, write, open, close, lseek and ioctl.\n\nThis patch changes basic_file_stdio.cc to only use basic ANSI-C stdio\nfunctions, allowing it to be used with libc implementations like\npicolibc which may not have a POSIX operating system underneath.\n\nThis is enabled by a new --enable-cstdio=stdio_pure configure option.\n\nAided-by: Jonathan Wakely <jwakely@redhat.com>\nSigned-off-by: Keith Packard <keithp@keithp.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_CSTDIO): Allow \"stdio_pure\"\n\toption and define _GLIBCXX_USE_PURE_STDIO when it is used. Also\n\tadd \"stdio_posix\" option as an alias for \"stdio\".\n\t* config/io/basic_file_stdio.cc [_GLIBCXX_USE_PURE_STDIO]: Only\n\tuse defined stdio entry points for all I/O operations, without\n\tdirect calls to underlying POSIX functions.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.", "tree": {"sha": "ae30db06f9813e22163964052877a38f044a95b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae30db06f9813e22163964052877a38f044a95b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd/comments", "author": {"login": "keith-packard", "id": 897096, "node_id": "MDQ6VXNlcjg5NzA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/897096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keith-packard", "html_url": "https://github.com/keith-packard", "followers_url": "https://api.github.com/users/keith-packard/followers", "following_url": "https://api.github.com/users/keith-packard/following{/other_user}", "gists_url": "https://api.github.com/users/keith-packard/gists{/gist_id}", "starred_url": "https://api.github.com/users/keith-packard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keith-packard/subscriptions", "organizations_url": "https://api.github.com/users/keith-packard/orgs", "repos_url": "https://api.github.com/users/keith-packard/repos", "events_url": "https://api.github.com/users/keith-packard/events{/privacy}", "received_events_url": "https://api.github.com/users/keith-packard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35317db051b9ce3eff7d4ad6d31de026447314f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35317db051b9ce3eff7d4ad6d31de026447314f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35317db051b9ce3eff7d4ad6d31de026447314f3"}], "stats": {"total": 86, "additions": 69, "deletions": 17}, "files": [{"sha": "df8be3bf805af53e1e33fb0cc1d0c85e44457878", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd", "patch": "@@ -2868,24 +2868,30 @@ AC_DEFUN([GLIBCXX_ENABLE_PARALLEL], [\n \n \n dnl\n-dnl Check for which I/O library to use:  stdio, or something specific.\n+dnl Check for which I/O library to use:  stdio and POSIX, or pure stdio.\n dnl\n-dnl Default is stdio.\n+dnl Default is stdio_posix.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_CSTDIO], [\n   AC_MSG_CHECKING([for underlying I/O to use])\n   GLIBCXX_ENABLE(cstdio,stdio,[[[=PACKAGE]]],\n-    [use target-specific I/O package], [permit stdio])\n+    [use target-specific I/O package], [permit stdio|stdio_posix|stdio_pure])\n \n-  # Now that libio has been removed, you can have any color you want as long\n-  # as it's black.  This is one big no-op until other packages are added, but\n-  # showing the framework never hurts.\n+  # The only available I/O model is based on stdio, via basic_file_stdio.\n+  # The default \"stdio\" is actually \"stdio + POSIX\" because it uses fdopen(3)\n+  # to get a file descriptor and then uses read(3) and write(3) with it.\n+  # The \"stdio_pure\" model doesn't use fdopen and only uses FILE* for I/O.\n   case ${enable_cstdio} in\n-    stdio)\n+    stdio*)\n       CSTDIO_H=config/io/c_io_stdio.h\n       BASIC_FILE_H=config/io/basic_file_stdio.h\n       BASIC_FILE_CC=config/io/basic_file_stdio.cc\n       AC_MSG_RESULT(stdio)\n+\n+      if test \"x$enable_cstdio\" = \"xstdio_pure\" ; then\n+\tAC_DEFINE(_GLIBCXX_USE_STDIO_PURE, 1,\n+\t\t  [Define to restrict std::__basic_file<> to stdio APIs.])\n+      fi\n       ;;\n   esac\n "}, {"sha": "5889f32922e3a9ee84827f6df2466bdaddf9f1f0", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd", "patch": "@@ -1044,6 +1044,9 @@\n /* Define if sendfile is available in <sys/sendfile.h>. */\n #undef _GLIBCXX_USE_SENDFILE\n \n+/* Define to restrict std::__basic_file<> to stdio APIs. */\n+#undef _GLIBCXX_USE_STDIO_PURE\n+\n /* Define if struct stat has timespec members. */\n #undef _GLIBCXX_USE_ST_MTIM\n "}, {"sha": "eedffb017b6f1854d40cfe842e956b3b0a8ce2e7", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd", "patch": "@@ -111,13 +111,21 @@ namespace\n \n   // Wrapper handling partial write.\n   static std::streamsize\n+#ifdef _GLIBCXX_USE_STDIO_PURE\n+  xwrite(FILE *__file, const char* __s, std::streamsize __n)\n+#else\n   xwrite(int __fd, const char* __s, std::streamsize __n)\n+#endif\n   {\n     std::streamsize __nleft = __n;\n \n     for (;;)\n       {\n+#ifdef _GLIBCXX_USE_STDIO_PURE\n+\tconst std::streamsize __ret = fwrite(__file, 1, __nleft, __file);\n+#else\n \tconst std::streamsize __ret = write(__fd, __s, __nleft);\n+#endif\n \tif (__ret == -1L && errno == EINTR)\n \t  continue;\n \tif (__ret == -1L)\n@@ -133,7 +141,7 @@ namespace\n     return __n - __nleft;\n   }\n \n-#ifdef _GLIBCXX_HAVE_WRITEV\n+#if defined(_GLIBCXX_HAVE_WRITEV) && !defined(_GLIBCXX_USE_STDIO_PURE)\n   // Wrapper handling partial writev.\n   static std::streamsize\n   xwritev(int __fd, const char* __s1, std::streamsize __n1,\n@@ -286,9 +294,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   __basic_file<char>::is_open() const throw ()\n   { return _M_cfile != 0; }\n \n+#ifndef _GLIBCCXX_USE_STDIO_PURE\n   int\n   __basic_file<char>::fd() throw ()\n   { return fileno(_M_cfile); }\n+#endif\n \n   __c_file*\n   __basic_file<char>::file() throw ()\n@@ -315,28 +325,46 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n     streamsize __ret;\n     do\n+#ifdef _GLIBCXX_USE_STDIO_PURE\n+      __ret = fread(__s, 1, __n, this->file());\n+#else\n       __ret = read(this->fd(), __s, __n);\n+#endif\n     while (__ret == -1L && errno == EINTR);\n     return __ret;\n   }\n \n   streamsize\n   __basic_file<char>::xsputn(const char* __s, streamsize __n)\n-  { return xwrite(this->fd(), __s, __n); }\n+  {\n+#ifdef _GLIBCXX_USE_STDIO_PURE\n+    return xwrite(this->file(), __s, __n);\n+#else\n+    return xwrite(this->fd(), __s, __n);\n+#endif\n+  }\n \n   streamsize\n   __basic_file<char>::xsputn_2(const char* __s1, streamsize __n1,\n \t\t\t       const char* __s2, streamsize __n2)\n   {\n     streamsize __ret = 0;\n-#ifdef _GLIBCXX_HAVE_WRITEV\n+#if defined(_GLIBCXX_HAVE_WRITEV) && !defined(_GLIBCXX_USE_STDIO_PURE)\n     __ret = xwritev(this->fd(), __s1, __n1, __s2, __n2);\n #else\n     if (__n1)\n+#ifdef _GLIBCXX_USE_STDIO_PURE\n+      __ret = xwrite(this->file(), __s1, __n1);\n+#else\n       __ret = xwrite(this->fd(), __s1, __n1);\n+#endif\n \n     if (__ret == __n1)\n+#ifdef _GLIBCXX_USE_STDIO_PURE\n+      __ret += xwrite(this->file(), __s2, __n2);\n+#else\n       __ret += xwrite(this->fd(), __s2, __n2);\n+#endif\n #endif\n     return __ret;\n   }\n@@ -350,7 +378,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     if (__off > numeric_limits<off_t>::max()\n \t|| __off < numeric_limits<off_t>::min())\n       return -1L;\n+#ifdef _GLIBCXX_USE_STDIO_PURE\n+    return fseek(this->file(), __off, __way);\n+#else\n     return lseek(this->fd(), __off, __way);\n+#endif\n #endif\n   }\n \n@@ -361,7 +393,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   streamsize\n   __basic_file<char>::showmanyc()\n   {\n-#ifndef _GLIBCXX_NO_IOCTL\n+#if !defined(_GLIBCXX_NO_IOCTL) && !defined(_GLIBCXX_USE_STDIO_PURE)\n #ifdef FIONREAD\n     // Pipes and sockets.\n     int __num = 0;\n@@ -371,7 +403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n #endif\n \n-#ifdef _GLIBCXX_HAVE_POLL\n+#if defined(_GLIBCXX_HAVE_POLL) && !defined(_GLIBCXX_USE_STDIO_PURE)\n     // Cheap test.\n     struct pollfd __pfd[1];\n     __pfd[0].fd = this->fd();\n@@ -395,8 +427,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct stat __buffer;\n     const int __err = fstat(this->fd(), &__buffer);\n     if (!__err && _GLIBCXX_ISREG(__buffer.st_mode))\n+#ifdef _GLIBCXX_USE_STDIO_PURE\n+      return __buffer.st_size - fseek(this->file(), 0, ios_base::cur);\n+#else\n       return __buffer.st_size - lseek(this->fd(), 0, ios_base::cur);\n #endif\n+#endif\n #endif\n     return 0;\n   }"}, {"sha": "7647a1821617fed04056478610b375bb3c58334a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=75aee072696a711f3e5b3bd1ab1f2b10fef4c7dd", "patch": "@@ -16376,7 +16376,7 @@ $as_echo_n \"checking for underlying I/O to use... \" >&6; }\n if test \"${enable_cstdio+set}\" = set; then :\n   enableval=$enable_cstdio;\n       case \"$enableval\" in\n-       stdio) ;;\n+       stdio|stdio_posix|stdio_pure) ;;\n        *) as_fn_error $? \"Unknown argument to enable/disable cstdio\" \"$LINENO\" 5 ;;\n \t  \t        esac\n \n@@ -16386,16 +16386,23 @@ fi\n \n \n \n-  # Now that libio has been removed, you can have any color you want as long\n-  # as it's black.  This is one big no-op until other packages are added, but\n-  # showing the framework never hurts.\n+  # The only available I/O model is based on stdio, via basic_file_stdio.\n+  # The default \"stdio\" is actually \"stdio + POSIX\" because it uses fdopen(3)\n+  # to get a file descriptor and then uses read(3) and write(3) with it.\n+  # The \"stdio_pure\" model doesn't use fdopen and only uses FILE* for I/O.\n   case ${enable_cstdio} in\n-    stdio)\n+    stdio*)\n       CSTDIO_H=config/io/c_io_stdio.h\n       BASIC_FILE_H=config/io/basic_file_stdio.h\n       BASIC_FILE_CC=config/io/basic_file_stdio.cc\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: stdio\" >&5\n $as_echo \"stdio\" >&6; }\n+\n+      if test \"x$enable_cstdio\" = \"xstdio_pure\" ; then\n+\n+$as_echo \"#define _GLIBCXX_USE_STDIO_PURE 1\" >>confdefs.h\n+\n+      fi\n       ;;\n   esac\n "}]}