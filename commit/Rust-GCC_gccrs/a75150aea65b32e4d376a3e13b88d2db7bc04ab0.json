{"sha": "a75150aea65b32e4d376a3e13b88d2db7bc04ab0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc1MTUwYWVhNjViMzJlNGQzNzZhM2UxM2I4OGQyZGI3YmMwNGFiMA==", "commit": {"author": {"name": "Chris Fairles", "email": "chris.fairles@gmail.com", "date": "2008-08-28T09:20:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-08-28T09:20:57Z"}, "message": "gthr-posix.h (__gthread_create, [...]): New functions.\n\n2008-08-28  Chris Fairles  <chris.fairles@gmail.com>\n\n        * gthr-posix.h (__gthread_create,  __gthread_join, __gthread_detach,\n\t__gthread_mutex_timed_lock, __gthread_recursive_mutex_timed_lock,\n\t__gthread_cond_signal, __gthread_cond_timedwait,\n\t__gthread_cond_timedwait_recursive): New functions.\n\t* gthr-posix.c (pthread_mutex_timedlock, pthread_cond_timedwait):\n\tLikewise.\n\t* gthr.h: Comment on defining __GTHREADS_CXX0X macro in conforming\n\tthread interfaces.\n\nFrom-SVN: r139704", "tree": {"sha": "0a423a203a6f7a1c8f373ea7dc554221dd2615db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a423a203a6f7a1c8f373ea7dc554221dd2615db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a75150aea65b32e4d376a3e13b88d2db7bc04ab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75150aea65b32e4d376a3e13b88d2db7bc04ab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a75150aea65b32e4d376a3e13b88d2db7bc04ab0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75150aea65b32e4d376a3e13b88d2db7bc04ab0/comments", "author": {"login": "chrisfearless", "id": 812000, "node_id": "MDQ6VXNlcjgxMjAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/812000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisfearless", "html_url": "https://github.com/chrisfearless", "followers_url": "https://api.github.com/users/chrisfearless/followers", "following_url": "https://api.github.com/users/chrisfearless/following{/other_user}", "gists_url": "https://api.github.com/users/chrisfearless/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisfearless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisfearless/subscriptions", "organizations_url": "https://api.github.com/users/chrisfearless/orgs", "repos_url": "https://api.github.com/users/chrisfearless/repos", "events_url": "https://api.github.com/users/chrisfearless/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisfearless/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b45fd7ad2610727101fd43d07cbd8db13ef171a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b45fd7ad2610727101fd43d07cbd8db13ef171a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b45fd7ad2610727101fd43d07cbd8db13ef171a"}], "stats": {"total": 200, "additions": 191, "deletions": 9}, "files": [{"sha": "6430e4f8fd0e8a93f71a405ff7e93e9145347648", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75150aea65b32e4d376a3e13b88d2db7bc04ab0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75150aea65b32e4d376a3e13b88d2db7bc04ab0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a75150aea65b32e4d376a3e13b88d2db7bc04ab0", "patch": "@@ -1,3 +1,14 @@\n+2008-08-28  Chris Fairles  <chris.fairles@gmail.com>\n+\n+        * gthr-posix.h (__gthread_create,  __gthread_join, __gthread_detach,\n+\t__gthread_mutex_timed_lock, __gthread_recursive_mutex_timed_lock,\n+\t__gthread_cond_signal, __gthread_cond_timedwait,\n+\t__gthread_cond_timedwait_recursive): New functions.\n+\t* gthr-posix.c (pthread_mutex_timedlock, pthread_cond_timedwait):\n+\tLikewise.\n+\t* gthr.h: Comment on defining __GTHREADS_CXX0X macro in conforming\n+\tthread interfaces.\n+\n 2008-08-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/37005"}, {"sha": "bfcd316de30631ff18edbb6410d8bd5ee5a4d0ff", "filename": "gcc/gthr-posix.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75150aea65b32e4d376a3e13b88d2db7bc04ab0/gcc%2Fgthr-posix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75150aea65b32e4d376a3e13b88d2db7bc04ab0/gcc%2Fgthr-posix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.c?ref=a75150aea65b32e4d376a3e13b88d2db7bc04ab0", "patch": "@@ -75,6 +75,24 @@ pthread_create (pthread_t *thread ATTRIBUTE_UNUSED,\n   return 0;\n }\n \n+int \n+pthread_join (pthread_t thread ATTRIBUTE_UNUSED, \n+\t      void **value_ptr ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+void\n+pthread_exit (void *value_ptr ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+int \n+pthread_detach (pthread_t thread ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n int\n pthread_cancel (pthread_t thread ATTRIBUTE_UNUSED)\n {\n@@ -93,6 +111,15 @@ pthread_mutex_trylock (pthread_mutex_t *mutex ATTRIBUTE_UNUSED)\n   return 0;\n }\n \n+#ifdef _POSIX_TIMEOUTS\n+int\n+pthread_mutex_timedlock (pthread_mutex_t *mutex ATTRIBUTE_UNUSED,\n+\t\t\t const struct timespec *abs_timeout ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+#endif /* _POSIX_TIMEOUTS */\n+\n int\n pthread_mutex_unlock (pthread_mutex_t *mutex ATTRIBUTE_UNUSED)\n {\n@@ -150,9 +177,12 @@ pthread_cond_wait (pthread_cond_t *cond ATTRIBUTE_UNUSED,\n   return 0;\n }\n \n-void\n-pthread_exit (void *value_ptr ATTRIBUTE_UNUSED)\n+int\n+pthread_cond_timedwait (pthread_cond_t *cond ATTRIBUTE_UNUSED, \r\n+\t\t\tpthread_mutex_t *mutex ATTRIBUTE_UNUSED, \n+\t\t\tconst struct timespec *abstime ATTRIBUTE_UNUSED)\n {\n+  return 0;\n }\n \n int\n@@ -173,6 +203,7 @@ pthread_self (void)\n {\n   return (pthread_t) 0;\n }\n+\n #ifdef _POSIX_PRIORITY_SCHEDULING\n #ifdef _POSIX_THREAD_PRIORITY_SCHEDULING\n int"}, {"sha": "e9612995cced4a9fd882ee5184aabec6ab515691", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 116, "deletions": 7, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75150aea65b32e4d376a3e13b88d2db7bc04ab0/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75150aea65b32e4d376a3e13b88d2db7bc04ab0/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=a75150aea65b32e4d376a3e13b88d2db7bc04ab0", "patch": "@@ -34,6 +34,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n    Easy, since the interface is just one-to-one mapping.  */\n \n #define __GTHREADS 1\n+#define __GTHREADS_CXX0X 1\n \n /* Some implementations of <pthread.h> require this to be defined.  */\n #if !defined(_REENTRANT) && defined(__osf__)\n@@ -43,11 +44,13 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include <pthread.h>\n #include <unistd.h>\n \n+typedef pthread_t __gthread_t;\n typedef pthread_key_t __gthread_key_t;\n typedef pthread_once_t __gthread_once_t;\n typedef pthread_mutex_t __gthread_mutex_t;\n typedef pthread_mutex_t __gthread_recursive_mutex_t;\n typedef pthread_cond_t __gthread_cond_t;\n+typedef struct timespec __gthread_time_t;\n \n /* POSIX like conditional variables are supported.  Please look at comments\n    in gthr.h for details. */\n@@ -63,6 +66,7 @@ typedef pthread_cond_t __gthread_cond_t;\n #define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION __gthread_recursive_mutex_init_function\n #endif\n #define __GTHREAD_COND_INIT PTHREAD_COND_INITIALIZER\n+#define __GTHREAD_TIME_INIT {0,0}\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n # ifndef __gthrw_pragma\n@@ -88,28 +92,56 @@ typedef pthread_cond_t __gthread_cond_t;\n __gthrw3(pthread_once)\n __gthrw3(pthread_getspecific)\n __gthrw3(pthread_setspecific)\n+\n __gthrw3(pthread_create)\n+__gthrw3(pthread_join)\n+__gthrw3(pthread_detach)\n+__gthrw3(pthread_equal)\n+__gthrw3(pthread_self)\n __gthrw3(pthread_cancel)\n+__gthrw3(sched_yield)\n+\n __gthrw3(pthread_mutex_lock)\n __gthrw3(pthread_mutex_trylock)\n+#ifdef _POSIX_TIMEOUTS\n+__gthrw3(pthread_mutex_timedlock)\n+#endif /* _POSIX_TIMEOUTS */\n __gthrw3(pthread_mutex_unlock)\n __gthrw3(pthread_mutex_init)\n __gthrw3(pthread_mutex_destroy)\n+\n __gthrw3(pthread_cond_broadcast)\n+__gthrw3(pthread_cond_signal)\n __gthrw3(pthread_cond_wait)\n+__gthrw3(pthread_cond_timedwait)\n+__gthrw3(pthread_cond_destroy)\n #else\n __gthrw(pthread_once)\n __gthrw(pthread_getspecific)\n __gthrw(pthread_setspecific)\n+\n __gthrw(pthread_create)\n+__gthrw(pthread_join)\n+__gthrw(pthread_equal)\n+__gthrw(pthread_self)\n+__gthrw(pthread_detach)\n __gthrw(pthread_cancel)\n+__gthrw(sched_yield)\n+\n __gthrw(pthread_mutex_lock)\n __gthrw(pthread_mutex_trylock)\n+#ifdef _POSIX_TIMEOUTS\n+__gthrw(pthread_mutex_timedlock)\n+#endif /* _POSIX_TIMEOUTS */\n __gthrw(pthread_mutex_unlock)\n __gthrw(pthread_mutex_init)\n __gthrw(pthread_mutex_destroy)\n+\n __gthrw(pthread_cond_broadcast)\n+__gthrw(pthread_cond_signal)\n __gthrw(pthread_cond_wait)\n+__gthrw(pthread_cond_timedwait)\n+__gthrw(pthread_cond_destroy)\n #endif\n \n __gthrw(pthread_key_create)\n@@ -122,25 +154,18 @@ __gthrw(pthread_mutexattr_destroy)\n #if defined(_LIBOBJC) || defined(_LIBOBJC_WEAK)\n /* Objective-C.  */\n #if defined(__osf__) && defined(_PTHREAD_USE_MANGLED_NAMES_)\n-__gthrw3(pthread_cond_destroy)\n __gthrw3(pthread_cond_init)\n-__gthrw3(pthread_cond_signal)\n __gthrw3(pthread_exit)\n-__gthrw3(pthread_self)\n #else\n-__gthrw(pthread_cond_destroy)\n __gthrw(pthread_cond_init)\n-__gthrw(pthread_cond_signal)\n __gthrw(pthread_exit)\n-__gthrw(pthread_self)\n #endif /* __osf__ && _PTHREAD_USE_MANGLED_NAMES_ */\n #ifdef _POSIX_PRIORITY_SCHEDULING\n #ifdef _POSIX_THREAD_PRIORITY_SCHEDULING\n __gthrw(sched_get_priority_max)\n __gthrw(sched_get_priority_min)\n #endif /* _POSIX_THREAD_PRIORITY_SCHEDULING */\n #endif /* _POSIX_PRIORITY_SCHEDULING */\n-__gthrw(sched_yield)\n __gthrw(pthread_attr_destroy)\n __gthrw(pthread_attr_init)\n __gthrw(pthread_attr_setdetachstate)\n@@ -646,6 +671,42 @@ __gthread_objc_condition_signal (objc_condition_t condition)\n \n #else /* _LIBOBJC */\n \n+static inline int\n+__gthread_create (__gthread_t *thread, void *(*func) (void*), void *args)\n+{\n+  return __gthrw_(pthread_create) (thread, NULL, func, args);\n+}\n+\n+static inline int\n+__gthread_join (__gthread_t thread, void **value_ptr)\n+{\n+  return __gthrw_(pthread_join) (thread, value_ptr);\n+}\n+\n+static inline int\n+__gthread_detach (__gthread_t thread)\n+{\n+  return __gthrw_(pthread_detach) (thread);\n+}\n+\n+static inline int\n+__gthread_equal (__gthread_t t1, __gthread_t t2)\n+{\n+  return __gthrw_(pthread_equal) (t1, t2);\n+}\n+\n+static inline __gthread_t\n+__gthread_self (void)\n+{\n+  return __gthrw_(pthread_self) ();\n+}\n+\n+static inline int\n+__gthread_yield (void)\n+{\n+  return __gthrw_(sched_yield) ();\n+}\n+\n static inline int\n __gthread_once (__gthread_once_t *once, void (*func) (void))\n {\n@@ -706,6 +767,18 @@ __gthread_mutex_trylock (__gthread_mutex_t *mutex)\n     return 0;\n }\n \n+#ifdef _POSIX_TIMEOUTS\n+static inline int\n+__gthread_mutex_timedlock (__gthread_mutex_t *mutex,\n+\t\t\t   const __gthread_time_t *abs_timeout)\n+{\n+  if (__gthread_active_p ())\n+    return __gthrw_(pthread_mutex_timedlock) (mutex, abs_timeout);\n+  else\n+    return 0;\n+}\n+#endif\n+\n static inline int\n __gthread_mutex_unlock (__gthread_mutex_t *mutex)\n {\n@@ -749,6 +822,15 @@ __gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *mutex)\n   return __gthread_mutex_trylock (mutex);\n }\n \n+#ifdef _POSIX_TIMEOUTS\n+static inline int\n+__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *mutex,\n+\t\t\t\t     const __gthread_time_t *abs_timeout)\n+{\n+  return __gthread_mutex_timedlock (mutex, abs_timeout);\n+}\n+#endif\n+\n static inline int\n __gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *mutex)\n {\n@@ -761,19 +843,46 @@ __gthread_cond_broadcast (__gthread_cond_t *cond)\n   return __gthrw_(pthread_cond_broadcast) (cond);\n }\n \n+static inline int\n+__gthread_cond_signal (__gthread_cond_t *cond)\n+{\n+  return __gthrw_(pthread_cond_signal) (cond);\n+}\n+\n static inline int\n __gthread_cond_wait (__gthread_cond_t *cond, __gthread_mutex_t *mutex)\n {\n   return __gthrw_(pthread_cond_wait) (cond, mutex);\n }\n \n+static inline int\n+__gthread_cond_timedwait (__gthread_cond_t *cond, __gthread_mutex_t *mutex,\n+\t\t\t  const __gthread_time_t *abs_timeout)\n+{\n+  return __gthrw_(pthread_cond_timedwait) (cond, mutex, abs_timeout);\n+}\n+\n static inline int\n __gthread_cond_wait_recursive (__gthread_cond_t *cond,\n \t\t\t       __gthread_recursive_mutex_t *mutex)\n {\n   return __gthread_cond_wait (cond, mutex);\n }\n \n+static inline int\n+__gthread_cond_timedwait_recursive (__gthread_cond_t *cond,\n+\t\t\t\t    __gthread_recursive_mutex_t *mutex,\n+\t\t\t\t    const __gthread_time_t *abs_timeout)\n+{\n+  return __gthread_cond_timedwait (cond, mutex, abs_timeout);\n+}\n+\n+static inline int\n+__gthread_cond_destroy (__gthread_cond_t* cond)\n+{\n+  return __gthrw_(pthread_cond_destroy) (cond);\n+}\n+\n #endif /* _LIBOBJC */\n \n #endif /* ! GCC_GTHR_POSIX_H */"}, {"sha": "d318256429a5b9d5b4d71b9e08d434b187df8463", "filename": "gcc/gthr.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75150aea65b32e4d376a3e13b88d2db7bc04ab0/gcc%2Fgthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75150aea65b32e4d376a3e13b88d2db7bc04ab0/gcc%2Fgthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr.h?ref=a75150aea65b32e4d376a3e13b88d2db7bc04ab0", "patch": "@@ -104,12 +104,43 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n    All functions returning int should return zero on success or the error\n    number.  If the operation is not supported, -1 is returned.\n \n+   If the following are also defined, you should \n+     #define __GTHREADS_CXX0X 1\n+   to enable the c++0x thread library. \n+ \n+   Types:\n+     __gthread_t\n+     __gthread_time_t\n+\n+   Interface:\n+     int __gthread_create (__gthread_t *thread, void *(*func) (void*), \n+                           void *args);\n+     int __gthread_join (__gthread_t thread, void **value_ptr);\n+     int __gthread_detach (__gthread_t thread);\n+     int __gthread_equal (__gthread_t t1, __gthread_t t2);\n+     __gthread_t __gthread_self (void);\n+     int __gthread_yield (void);\n+\n+     int __gthread_mutex_timedlock (__gthread_mutex_t *m,\n+                                    const __gthread_time_t *abs_timeout);\n+     int __gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *m,\n+                                          const __gthread_time_t *abs_time);\n+     \n+     int __gthread_cond_signal (__gthread_cond_t *cond);\n+     int __gthread_cond_timedwait (__gthread_cond_t *cond, \n+                                   __gthread_mutex_t *mutex,\n+                                   const __gthread_time_t *abs_timeout);\n+     int __gthread_cond_timedwait_recursive (__gthread_cond_t *cond,\n+                                             __gthread_recursive_mutex_t *mutex,\n+                                             const __gthread_time_t *abs_time)\n+\n    Currently supported threads packages are\n      TPF threads with -D__tpf__\n      POSIX/Unix98 threads with -D_PTHREADS\n      POSIX/Unix95 threads with -D_PTHREADS95\n      DCE threads with -D_DCE_THREADS\n      Solaris/UI threads with -D_SOLARIS_THREADS\n+   \n */\n \n /* Check first for thread specific defines.  */"}]}