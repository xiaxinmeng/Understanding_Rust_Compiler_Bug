{"sha": "47d591cf0055b52b71adb8e82e61002281b7035e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdkNTkxY2YwMDU1YjUyYjcxYWRiOGU4MmU2MTAwMjI4MWI3MDM1ZQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2018-11-11T01:33:53Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2018-11-11T01:33:53Z"}, "message": "re PR middle-end/65703 (-fdefer-pop documentation is confusing)\n\n2018-11-10  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR middle-end/65703\n\n\tgcc/\n\t* doc/invoke.texi (Optimize Options): Add @opindex entries\n\tfor the positive forms of -fno-xxx and -mno-xxx options\n\tthat were lacking them.\n\nFrom-SVN: r266008", "tree": {"sha": "e4b4ee8d879c8b4678e0d013dd8c6e8d05a19942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4b4ee8d879c8b4678e0d013dd8c6e8d05a19942"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47d591cf0055b52b71adb8e82e61002281b7035e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d591cf0055b52b71adb8e82e61002281b7035e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d591cf0055b52b71adb8e82e61002281b7035e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d591cf0055b52b71adb8e82e61002281b7035e/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b2034539328167f3b7913e5aedc6fec0272fc05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2034539328167f3b7913e5aedc6fec0272fc05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2034539328167f3b7913e5aedc6fec0272fc05"}], "stats": {"total": 116, "additions": 96, "deletions": 20}, "files": [{"sha": "1fef624834bee6ef90c8bc6d16c6c9ca19a1535c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d591cf0055b52b71adb8e82e61002281b7035e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d591cf0055b52b71adb8e82e61002281b7035e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47d591cf0055b52b71adb8e82e61002281b7035e", "patch": "@@ -1,3 +1,10 @@\n+2018-11-10  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR middle-end/65703\n+\t* doc/invoke.texi (Optimize Options): Add @opindex entries\n+\tfor the positive forms of -fno-xxx and -mno-xxx options\n+\tthat were lacking them.\n+\n 2018-11-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* combine.c (make_more_copies): Only make an intermediate copy if the"}, {"sha": "a144ed62de5ddfed44929ed93dea169a98a337c8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 89, "deletions": 20, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d591cf0055b52b71adb8e82e61002281b7035e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d591cf0055b52b71adb8e82e61002281b7035e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=47d591cf0055b52b71adb8e82e61002281b7035e", "patch": "@@ -2101,6 +2101,7 @@ supported for C as this construct is allowed by C++.\n \n @item -fno-asm\n @opindex fno-asm\n+@opindex fasm\n Do not recognize @code{asm}, @code{inline} or @code{typeof} as a\n keyword, so that code can use these words as identifiers.  You can use\n the keywords @code{__asm__}, @code{__inline__} and @code{__typeof__}\n@@ -2116,6 +2117,7 @@ switch only affects the @code{asm} and @code{typeof} keywords, since\n @item -fno-builtin\n @itemx -fno-builtin-@var{function}\n @opindex fno-builtin\n+@opindex fbuiltin\n @cindex built-in functions\n Don't recognize built-in functions that do not begin with\n @samp{__builtin_} as prefix.  @xref{Other Builtins,,Other built-in\n@@ -2439,6 +2441,7 @@ option is used for the warning.\n \n @item -fno-access-control\n @opindex fno-access-control\n+@opindex faccess-control\n Turn off all access checking.  This switch is mainly useful for working\n around bugs in the access control code.\n \n@@ -2512,6 +2515,7 @@ deprecated, and may be removed in a future version of G++.\n \n @item -fno-elide-constructors\n @opindex fno-elide-constructors\n+@opindex felide-constructors\n The C++ standard allows an implementation to omit creating a temporary\n that is only used to initialize another object of the same type.\n Specifying this option disables that optimization, and forces G++ to\n@@ -2523,6 +2527,7 @@ option still affects trivial member functions.\n \n @item -fno-enforce-eh-specs\n @opindex fno-enforce-eh-specs\n+@opindex fenforce-eh-specs\n Don't generate code to check for violation of exception specifications\n at run time.  This option violates the C++ standard, but may be useful\n for reducing code size in production builds, much like defining\n@@ -2556,25 +2561,29 @@ aliases, the default is @option{-fno-extern-tls-init}.\n \n @item -fno-gnu-keywords\n @opindex fno-gnu-keywords\n+@opindex fgnu-keywords\n Do not recognize @code{typeof} as a keyword, so that code can use this\n word as an identifier.  You can use the keyword @code{__typeof__} instead.\n This option is implied by the strict ISO C++ dialects: @option{-ansi},\n @option{-std=c++98}, @option{-std=c++11}, etc.\n \n @item -fno-implicit-templates\n @opindex fno-implicit-templates\n+@opindex fimplicit-templates\n Never emit code for non-inline templates that are instantiated\n implicitly (i.e.@: by use); only emit code for explicit instantiations.\n @xref{Template Instantiation}, for more information.\n \n @item -fno-implicit-inline-templates\n @opindex fno-implicit-inline-templates\n+@opindex fimplicit-inline-templates\n Don't emit code for implicit instantiations of inline templates, either.\n The default is to handle inlines differently so that compiles with and\n without optimization need the same set of explicit instantiations.\n \n @item -fno-implement-inlines\n @opindex fno-implement-inlines\n+@opindex fimplement-inlines\n To save space, do not emit out-of-line copies of inline functions\n controlled by @code{#pragma implementation}.  This causes linker\n errors if these functions are not inlined everywhere they are called.\n@@ -2601,6 +2610,7 @@ with fewer template parameters.  This flag is enabled by default for\n \n @item -fno-nonansi-builtins\n @opindex fno-nonansi-builtins\n+@opindex fnonansi-builtins\n Disable built-in declarations of functions that are not mandated by\n ANSI/ISO C@.  These include @code{ffs}, @code{alloca}, @code{_exit},\n @code{index}, @code{bzero}, @code{conjf}, and other related functions.\n@@ -2619,12 +2629,14 @@ to @code{terminate} rather than @code{unexpected}.\n \n @item -fno-operator-names\n @opindex fno-operator-names\n+@opindex foperator-names\n Do not treat the operator name keywords @code{and}, @code{bitand},\n @code{bitor}, @code{compl}, @code{not}, @code{or} and @code{xor} as\n synonyms as keywords.\n \n @item -fno-optional-diags\n @opindex fno-optional-diags\n+@opindex foptional-diags\n Disable diagnostics that the standard says a compiler does not need to\n issue.  Currently, the only such diagnostic issued by G++ is the one for\n a name having multiple meanings within a class.\n@@ -2637,6 +2649,7 @@ nonconforming code to compile.\n \n @item -fno-pretty-templates\n @opindex fno-pretty-templates\n+@opindex fpretty-templates\n When an error message refers to a specialization of a function\n template, the compiler normally prints the signature of the\n template followed by the template arguments and any typedefs or\n@@ -2656,6 +2669,7 @@ Instantiation}, for more information.\n \n @item -fno-rtti\n @opindex fno-rtti\n+@opindex frtti\n Disable generation of information about every class with virtual\n functions for use by the C++ run-time type identification features\n (@code{dynamic_cast} and @code{typeid}).  If you don't use those parts\n@@ -2712,6 +2726,7 @@ can run out of stack space before hitting 1024 in some situations.\n \n @item -fno-threadsafe-statics\n @opindex fno-threadsafe-statics\n+@opindex fthreadsafe-statics\n Do not emit the extra code to use the routines specified in the C++\n ABI for thread-safe initialization of local statics.  You can use this\n option to reduce code size slightly in code that doesn't need to be\n@@ -2727,6 +2742,7 @@ destructors, but only works if your C library supports\n \n @item -fno-use-cxa-get-exception-ptr\n @opindex fno-use-cxa-get-exception-ptr\n+@opindex fuse-cxa-get-exception-ptr\n Don't use the @code{__cxa_get_exception_ptr} runtime routine.  This\n causes @code{std::uncaught_exception} to be incorrect, but is necessary\n if the runtime routine is not available.\n@@ -2795,6 +2811,7 @@ violation of the ODR to define types with the same name differently.\n \n @item -fno-weak\n @opindex fno-weak\n+@opindex fweak\n Do not use weak symbol support, even if it is provided by the linker.\n By default, G++ uses weak symbols if they are available.  This\n option exists only for testing, and should not be used by end-users;\n@@ -3461,6 +3478,7 @@ used.\n \n @item -fno-nil-receivers\n @opindex fno-nil-receivers\n+@opindex fnil-receivers\n Assume that all Objective-C message dispatches (@code{[receiver\n message:arg]}) in this translation unit ensure that the receiver is\n not @code{nil}.  This allows for more efficient entry points in the\n@@ -3950,6 +3968,7 @@ This flag also affects the output of the\n \n @item -fno-show-column\n @opindex fno-show-column\n+@opindex fshow-column\n Do not print column numbers in diagnostics.  This may be necessary if\n diagnostics are being scanned by a program that does not understand the\n column numbers, such as @command{dejagnu}.\n@@ -8062,6 +8081,7 @@ optimizations to be performed is desired.\n @table @gcctabopt\n @item -fno-defer-pop\n @opindex fno-defer-pop\n+@opindex fdefer-pop\n For machines that must pop arguments after a function call, always pop \n the arguments as soon as each function returns.  \n At levels @option{-O1} and higher, @option{-fdefer-pop} is the default;\n@@ -8121,6 +8141,7 @@ Enabled at levels @option{-O2}, @option{-O3}.\n \n @item -fno-inline\n @opindex fno-inline\n+@opindex finline\n Do not expand any functions inline apart from those marked with\n the @code{always_inline} attribute.  This is the default when not\n optimizing.\n@@ -8217,6 +8238,7 @@ release to an another.\n \n @item -fno-keep-inline-dllexport\n @opindex fno-keep-inline-dllexport\n+@opindex fkeep-inline-dllexport\n This is a more fine-grained version of @option{-fkeep-inline-functions},\n which applies only to functions that are declared using the @code{dllexport}\n attribute or declspec.  @xref{Function Attributes,,Declaring Attributes of\n@@ -8283,6 +8305,7 @@ life-range analysis.  This option is effective only with\n \n @item -fno-branch-count-reg\n @opindex fno-branch-count-reg\n+@opindex fbranch-count-reg\n Disable the optimization pass that scans for opportunities to use \n ``decrement and branch'' instructions on a count register instead of\n instruction sequences that decrement a register, compare it against zero, and\n@@ -8296,6 +8319,7 @@ The default is @option{-fbranch-count-reg} at @option{-O1} and higher.\n \n @item -fno-function-cse\n @opindex fno-function-cse\n+@opindex ffunction-cse\n Do not put function addresses in registers; make each instruction that\n calls a constant function contain the function's address explicitly.\n \n@@ -8307,6 +8331,7 @@ The default is @option{-ffunction-cse}\n \n @item -fno-zero-initialized-in-bss\n @opindex fno-zero-initialized-in-bss\n+@opindex fzero-initialized-in-bss\n If the target supports a BSS section, GCC by default puts variables that\n are initialized to zero into BSS@.  This can save space in the resulting\n code.\n@@ -8543,6 +8568,7 @@ Enabled for Alpha, AArch64 and x86 at levels @option{-O2},\n \n @item -fno-lifetime-dse\n @opindex fno-lifetime-dse\n+@opindex flifetime-dse\n In C++ the value of an object is only affected by changes within its\n lifetime: when the constructor begins, the object has an indeterminate\n value, and any changes during the lifetime of the object are dead when\n@@ -8616,13 +8642,15 @@ This option is enabled at level @option{-O3} for some targets.\n \n @item -fno-ira-share-save-slots\n @opindex fno-ira-share-save-slots\n+@opindex fira-share-save-slots\n Disable sharing of stack slots used for saving call-used hard\n registers living through a call.  Each hard register gets a\n separate stack slot, and as a result function stack frames are\n larger.\n \n @item -fno-ira-share-spill-slots\n @opindex fno-ira-share-spill-slots\n+@opindex fira-share-spill-slots\n Disable sharing of stack slots allocated for pseudo-registers.  Each\n pseudo-register that does not get a hard register gets a separate\n stack slot, and as a result function stack frames are larger.\n@@ -8665,12 +8693,14 @@ Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -fno-sched-interblock\n @opindex fno-sched-interblock\n+@opindex fsched-interblock\n Disable instruction scheduling across basic blocks, which\n is normally enabled when scheduling before register allocation, i.e.@:\n with @option{-fschedule-insns} or at @option{-O2} or higher.\n \n @item -fno-sched-spec\n @opindex fno-sched-spec\n+@opindex fsched-spec\n Disable speculative motion of non-load instructions, which\n is normally enabled when scheduling before register allocation, i.e.@:\n with @option{-fschedule-insns} or at @option{-O2} or higher.\n@@ -9405,6 +9435,7 @@ Disabled at level @option{-Os}.\n \n @item -fno-printf-return-value\n @opindex fno-printf-return-value\n+@opindex fprintf-return-value\n Do not substitute constants for known return value of formatted output\n functions such as @code{sprintf}, @code{snprintf}, @code{vsprintf}, and\n @code{vsnprintf} (but not @code{printf} of @code{fprintf}).  This\n@@ -9431,7 +9462,9 @@ options.  The @option{-fprintf-return-value} option is enabled by default.\n @item -fno-peephole\n @itemx -fno-peephole2\n @opindex fno-peephole\n+@opindex fpeephole\n @opindex fno-peephole2\n+@opindex fpeephole2\n Disable any machine-specific peephole optimizations.  The difference\n between @option{-fno-peephole} and @option{-fno-peephole2} is in how they\n are implemented in the compiler; some targets use one, some use the\n@@ -9442,6 +9475,7 @@ other, a few use both.\n \n @item -fno-guess-branch-probability\n @opindex fno-guess-branch-probability\n+@opindex fguess-branch-probability\n Do not guess branch probabilities using heuristics.\n \n GCC uses heuristics to guess branch probabilities if they are\n@@ -9674,6 +9708,7 @@ Enabled by default.\n \n @item -fno-toplevel-reorder\n @opindex fno-toplevel-reorder\n+@opindex ftoplevel-reorder\n Do not reorder top-level functions, variables, and @code{asm}\n statements.  Output them in the same order that they appear in the\n input file.  When this option is used, unreferenced static variables\n@@ -10134,6 +10169,7 @@ that do not require the guarantees of these specifications.\n \n @item -fno-math-errno\n @opindex fno-math-errno\n+@opindex fmath-errno\n Do not set @code{errno} after calling math functions that are executed\n with a single instruction, e.g., @code{sqrt}.  A program that relies on\n IEEE exceptions for math error handling may want to use this flag\n@@ -10214,6 +10250,7 @@ The default is @option{-fno-finite-math-only}.\n \n @item -fno-signed-zeros\n @opindex fno-signed-zeros\n+@opindex fsigned-zeros\n Allow optimizations for floating-point arithmetic that ignore the\n signedness of zero.  IEEE arithmetic specifies the behavior of\n distinct +0.0 and @minus{}0.0 values, which then prohibits simplification\n@@ -10224,6 +10261,7 @@ The default is @option{-fsigned-zeros}.\n \n @item -fno-trapping-math\n @opindex fno-trapping-math\n+@opindex ftrapping-math\n Compile code assuming that floating-point operations cannot generate\n user-visible traps.  These traps include division by zero, overflow,\n underflow, inexact result and invalid operation.  This option requires\n@@ -10274,6 +10312,7 @@ disable all GCC optimizations that affect signaling NaN behavior.\n \n @item -fno-fp-int-builtin-inexact\n @opindex fno-fp-int-builtin-inexact\n+@opindex ffp-int-builtin-inexact\n Do not allow the built-in functions @code{ceil}, @code{floor},\n @code{round} and @code{trunc}, and their @code{float} and @code{long\n double} variants, to generate code that raises the ``inexact''\n@@ -13253,6 +13292,7 @@ unwinding from asynchronous events (such as debugger or garbage collector).\n \n @item -fno-gnu-unique\n @opindex fno-gnu-unique\n+@opindex fgnu-unique\n On systems with recent GNU assembler and C library, the C++ compiler\n uses the @code{STB_GNU_UNIQUE} binding to make sure that definitions\n of template static data members and static local variables in inline\n@@ -13324,6 +13364,7 @@ Use it to conform to a non-default application binary interface.\n \n @item -fno-common\n @opindex fno-common\n+@opindex fcommon\n @cindex tentative definitions\n In C code, this option controls the placement of global variables \n defined without an initializer, known as @dfn{tentative definitions} \n@@ -13353,6 +13394,7 @@ variable definitions this way.\n \n @item -fno-ident\n @opindex fno-ident\n+@opindex fident\n Ignore the @code{#ident} directive.\n \n @item -finhibit-size-directive\n@@ -13521,6 +13563,7 @@ for @option{-fpie} and 2 for @option{-fPIE}.\n \n @item -fno-plt\n @opindex fno-plt\n+@opindex fplt\n Do not use the PLT for external function calls in position-independent code.\n Instead, load the callee address at call sites from the GOT and branch to it.\n This leads to more efficient code by eliminating PLT stubs and exposing\n@@ -13538,6 +13581,7 @@ functions that are marked to not use the PLT to use the GOT instead.\n \n @item -fno-jump-tables\n @opindex fno-jump-tables\n+@opindex fjump-tables\n Do not use jump tables for switch statements even where it would be\n more efficient than other code generation strategies.  This option is\n of use in conjunction with @option{-fpic} or @option{-fPIC} for\n@@ -15429,6 +15473,7 @@ Emit @var{num} NOPs before every other generated instruction.\n \n @item -mno-soft-cmpsf\n @opindex mno-soft-cmpsf\n+@opindex msoft-cmpsf\n For single-precision floating-point comparisons, emit an @code{fsub} instruction\n and test the flags.  This is faster than a software comparison, but can\n get incorrect results in the presence of NaNs, or when two different small\n@@ -15452,6 +15497,7 @@ toolchain with the appropriate @option{--with-stack-offset=@var{num}} option.\n \n @item -mno-round-nearest\n @opindex mno-round-nearest\n+@opindex mround-nearest\n Make the scheduler assume that the rounding mode has been set to\n truncating.  The default is @option{-mround-nearest}.\n \n@@ -15511,19 +15557,23 @@ integer multiply, or integer multiply-and-accumulate.\n \n The default is @option{-mfp-mode=caller}\n \n-@item -mnosplit-lohi\n+@item -mno-split-lohi\n @itemx -mno-postinc\n @itemx -mno-postmodify\n-@opindex mnosplit-lohi\n+@opindex mno-split-lohi\n+@opindex msplit-lohi\n @opindex mno-postinc\n+@opindex mpostinc\n @opindex mno-postmodify\n+@opindex mpostmodify\n Code generation tweaks that disable, respectively, splitting of 32-bit\n loads, generation of post-increment addresses, and generation of\n post-modify addresses.  The defaults are @option{msplit-lohi},\n @option{-mpost-inc}, and @option{-mpost-modify}.\n \n @item -mnovect-double\n @opindex mno-vect-double\n+@opindex mvect-double\n Change the preferred SIMD mode to SImode.  The default is\n @option{-mvect-double}, which uses DImode as preferred SIMD mode.\n \n@@ -15687,6 +15737,7 @@ supported.  This is always enabled for @option{-mcpu=ARC700}.\n \n @item -mno-mpy\n @opindex mno-mpy\n+@opindex mmpy\n Do not generate @code{mpy}-family instructions for ARC700.  This option is\n deprecated.\n \n@@ -16055,6 +16106,7 @@ load/store operations.\n \n @item -mno-sdata\n @opindex mno-sdata\n+@opindex msdata\n Do not generate sdata references.  This is the default for tool chains\n built for @w{@code{arc-linux-uclibc}} and @w{@code{arceb-linux-uclibc}}\n targets.\n@@ -16066,6 +16118,7 @@ default.\n \n @item -mno-volatile-cache\n @opindex mno-volatile-cache\n+@opindex mvolatile-cache\n Enable cache bypass for volatile references.\n \n @end table\n@@ -16382,6 +16435,7 @@ configurations this option is meaningless.\n \n @item -mno-sched-prolog\n @opindex mno-sched-prolog\n+@opindex msched-prolog\n Prevent the reordering of instructions in the function prologue, or the\n merging of those instruction with the instructions in the function's\n body.  This means that all functions start with a recognizable set\n@@ -17775,6 +17829,7 @@ contain speculative loads after jump instructions. If this option is used,\n \n @item -mno-specld-anomaly\n @opindex mno-specld-anomaly\n+@opindex mspecld-anomaly\n Don't generate extra code to prevent speculative loads from occurring.\n \n @item -mcsync-anomaly\n@@ -17785,16 +17840,17 @@ If this option is used, @code{__WORKAROUND_SPECULATIVE_SYNCS} is defined.\n \n @item -mno-csync-anomaly\n @opindex mno-csync-anomaly\n+@opindex mcsync-anomaly\n Don't generate extra code to prevent CSYNC or SSYNC instructions from\n occurring too soon after a conditional branch.\n \n-@item -mlow-64k\n-@opindex mlow-64k\n+@item -mlow64k\n+@opindex mlow64k\n When enabled, the compiler is free to take advantage of the knowledge that\n the entire program fits into the low 64k of memory.\n \n-@item -mno-low-64k\n-@opindex mno-low-64k\n+@item -mno-low64k\n+@opindex mno-low64k\n Assume that the program is arbitrarily large.  This is the default.\n \n @item -mstack-check-l1\n@@ -17811,6 +17867,7 @@ With a @samp{bfin-elf} target, this option implies @option{-msim}.\n \n @item -mno-id-shared-library\n @opindex mno-id-shared-library\n+@opindex mid-shared-library\n Generate code that doesn't assume ID-based shared libraries are being used.\n This is the default.\n \n@@ -17823,6 +17880,7 @@ and calls.\n \n @item -mno-leaf-id-shared-library\n @opindex mno-leaf-id-shared-library\n+@opindex mleaf-id-shared-library\n Do not assume that the code being compiled won't link against any ID shared\n libraries.  Slower code is generated for jump and call insns.\n \n@@ -17842,6 +17900,7 @@ against the text section.\n \n @item -mno-sep-data\n @opindex mno-sep-data\n+@opindex msep-data\n Generate code that assumes that the data segment follows the text segment.\n This is the default.\n \n@@ -18022,6 +18081,7 @@ compare and test instructions before use of condition codes.\n \n @item -mno-side-effects\n @opindex mno-side-effects\n+@opindex mside-effects\n Do not emit instructions with side effects in addressing modes other than\n post-increment.\n \n@@ -19037,6 +19097,7 @@ Change ABI to use double word insns.\n \n @item -mno-dword\n @opindex mno-dword\n+@opindex mdword\n \n Do not use double word instructions.\n \n@@ -19278,6 +19339,7 @@ compiler-generated code.  It is enabled by default.\n \n @item -mno-optimize-membar\n @opindex mno-optimize-membar\n+@opindex moptimize-membar\n \n This switch disables the automatic removal of redundant @code{membar}\n instructions from the generated code.\n@@ -19384,6 +19446,7 @@ This option is valid only for H8S targets.\n \n @item -mno-exr\n @opindex mno-exr\n+@opindex mexr\n Extended registers are not stored on stack before execution of function \n with monitor attribute. Default option is @option{-mno-exr}. \n This option is valid only for H8S targets.\n@@ -19452,6 +19515,7 @@ rather obscure problems when compiling MIG generated code under MACH@.\n \n @item -mno-space-regs\n @opindex mno-space-regs\n+@opindex mspace-regs\n Generate code that assumes the target has no space registers.  This allows\n GCC to generate faster indirect calls and use unscaled index address modes.\n \n@@ -19555,6 +19619,7 @@ HP-UX GCC, i.e.@: configured with @samp{hppa*64*-*-hpux*}.\n \n @item -mlong-calls\n @opindex mno-long-calls\n+@opindex mlong-calls\n Generate code that uses long call sequences.  This ensures that a call\n is always able to reach linker generated stubs.  The default is to generate\n long calls only when the distance from the call site to the beginning\n@@ -19726,6 +19791,7 @@ using the maximum throughput algorithm.\n \n @item -mno-inline-int-divide\n @opindex mno-inline-int-divide\n+@opindex minline-int-divide\n Do not generate inline code for divides of integer values.\n \n @item -minline-sqrt-min-latency\n@@ -20388,10 +20454,7 @@ harmlessly ignored.)\n The @code{rtd} instruction is supported by the 68010, 68020, 68030,\n 68040, 68060 and CPU32 processors, but not by the 68000 or 5200.\n \n-@item -mno-rtd\n-@opindex mno-rtd\n-Do not use the calling conventions selected by @option{-mrtd}.\n-This is the default.\n+The default is @option{-mno-rtd}.\n \n @item -malign-int\n @itemx -mno-align-int\n@@ -22093,8 +22156,8 @@ Allow the compiler to generate @emph{Long Instruction Word}\n instructions if the target is the @samp{AM33} or later.  This is the\n default.  This option defines the preprocessor macro @code{__LIW__}.\n \n-@item -mnoliw\n-@opindex mnoliw\n+@item -mno-liw\n+@opindex mno-liw\n Do not allow the compiler to generate @emph{Long Instruction Word}\n instructions.  This option defines the preprocessor macro\n @code{__NO_LIW__}.\n@@ -22105,8 +22168,8 @@ Allow the compiler to generate the @emph{SETLB} and @emph{Lcc}\n instructions if the target is the @samp{AM33} or later.  This is the\n default.  This option defines the preprocessor macro @code{__SETLB__}.\n \n-@item -mnosetlb\n-@opindex mnosetlb\n+@item -mno-setlb\n+@opindex mno-setlb\n Do not allow the compiler to generate @emph{SETLB} or @emph{Lcc}\n instructions.  This option defines the preprocessor macro\n @code{__NO_SETLB__}.\n@@ -22297,27 +22360,27 @@ Generate conditional move instructions.\n Do not generate conditional move instructions.\n \n @item -mext-perf\n-@opindex mperf-ext\n+@opindex mext-perf\n Generate performance extension instructions.\n \n @item -mno-ext-perf\n-@opindex mno-perf-ext\n+@opindex mno-ext-perf\n Do not generate performance extension instructions.\n \n @item -mext-perf2\n-@opindex mperf-ext\n+@opindex mext-perf2\n Generate performance extension 2 instructions.\n \n @item -mno-ext-perf2\n-@opindex mno-perf-ext\n+@opindex mno-ext-perf2\n Do not generate performance extension 2 instructions.\n \n @item -mext-string\n-@opindex mperf-ext\n+@opindex mext-string\n Generate string extension instructions.\n \n @item -mno-ext-string\n-@opindex mno-perf-ext\n+@opindex mno-ext-string\n Do not generate string extension instructions.\n \n @item -mv3push\n@@ -27672,6 +27735,7 @@ register stack, some floating-point opcodes may be emitted even if\n \n @item -mno-fp-ret-in-387\n @opindex mno-fp-ret-in-387\n+@opindex mfp-ret-in-387\n Do not use the FPU registers for return values of functions.\n \n The usual calling convention has functions return values of types\n@@ -27684,6 +27748,7 @@ in ordinary CPU registers instead.\n \n @item -mno-fancy-math-387\n @opindex mno-fancy-math-387\n+@opindex mfancy-math-387\n Some 387 emulators do not support the @code{sin}, @code{cos} and\n @code{sqrt} instructions for the 387.  Specify this option to avoid\n generating those instructions.\n@@ -28506,6 +28571,7 @@ Here, @code{t5} takes up 2 bytes.\n \n @item -mno-align-stringops\n @opindex mno-align-stringops\n+@opindex malign-stringops\n Do not align the destination of inlined string operations.  This switch reduces\n code size and improves performance in case the destination is already aligned,\n but GCC doesn't know about it.\n@@ -28742,6 +28808,7 @@ psABI.  It requires the @option{-m32} option to be turned on.\n \n @item -mno-red-zone\n @opindex mno-red-zone\n+@opindex mred-zone\n Do not use a so-called ``red zone'' for x86-64 code.  The red zone is mandated\n by the x86-64 ABI; it is a 128-byte area beyond the location of the\n stack pointer that is not modified by signal or interrupt handlers\n@@ -28843,6 +28910,7 @@ appropriately.\n \n @item -fno-set-stack-executable\n @opindex fno-set-stack-executable\n+@opindex fset-stack-executable\n This option is available for MinGW targets. It specifies that\n the executable flag for the stack used by nested functions isn't\n set. This is necessary for binaries running in kernel mode of\n@@ -28851,6 +28919,7 @@ privileges, isn't available.\n \n @item -fwritable-relocated-rdata\n @opindex fno-writable-relocated-rdata\n+@opindex fwritable-relocated-rdata\n This option is available for MinGW and Cygwin targets.  It specifies\n that relocated-data in read-only section is put into the @code{.data}\n section.  This is a necessary for older runtimes not supporting"}]}