{"sha": "fdfcc44c12c212b296809cc19c81bc38508b3b27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmY2M0NGMxMmMyMTJiMjk2ODA5Y2MxOWM4MWJjMzg1MDhiM2IyNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-07T18:01:53Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-07T18:01:53Z"}, "message": "Makefile.in (tree.o): Depend on ggc.h.\n\n\t* Makefile.in (tree.o): Depend on ggc.h.\n\t* class.c (make_method_vec): Remove.\n\t(free_method_vec): Likewise.\n\t(free_method_vecs): Remove.\n\t(add_method): Don't use them.\n\t* cp-tree.def (PTRMEM_CST): Make it longer.\n\t(TEMPLATE_PARM_INDEX): Make it shorter.\n\t* cp-tree.h (BINDING_HAS_LEVEL_P): New macro.\n\t(template_parm_index): Remove RTL field.\n\t(ptrmem_cst): Add RTL field.\n\t(finish_function): Removed parameter.\n\t(process_next_inline): Change prototype.\n\t(init_cplus_unsave): Rename to init_tree.\n\t(binding_init): Remove.\n\t* decl.c (free_binding_nodes): Remove.\n\t(push_binding): Don't use them.  Set BINDING_HAS_LEVEL_P.\n\t(pop_binding): Don't use free_binding_nodes.\n\t(free_binding_vecs): Remove.\n\t(store_bindings): Don't use them.\n\t(pop_from_top_level): Likewise.\n\t(lookup_namespace_name): Simplify.\n\t(build_typename_type): Don't use obstack_free.\n\t(unqualified_namespace_lookup): Simplify.\n\t(lookup_name_real): Simplify.\n\t(start_function): Remove comment about leaks.\n\t(finish_function): Removed nested parameter.  Call\n\texpand_end_bindings even when building_stmt_tree.\n\tCall ggc_push_context and ggc_pop_context around\n\trest_of_compilation, if necessary.\n\t(mark_cp_function_context): Handle a NULL language-context.\n\t(lang_mark_false_label_stack): Fix typo.\n\t(lang_mark_tree): Handle CPLUS_BINDING, OVERLOAD,\n\tTEMPLATE_PARM_INDEX.  Handle the funny TYPE_LANG_SPECIFIC on\n\tpointer to method types.\n\t(lang_cleanup_tree): Use free to free TYPE_LANG_SPECIFIC.\n\t* decl2.c (finish_objects): Adjust call to finish_function.\n\t(finish_static_store_duration_function): Likewise.\n\t(do_nonmember_using_decl): Remove call to binding_init.\n\t* except.c (end_anon_func): Adjust call to finish_function.\n\t* lex.c (mark_impl_file_chain): New function.\n\t(init_parse): Call init_tree, not init_cplus_unsave.\n\tAdd GC roots.\n\t(cp_pramga_interface): Use xmalloc, not permalloc.\n\t(cp_pragma_implementation): Likewise.\n\t(begin_definition_of_inclass_inline): Simplify.\n\t(process_next_inline): Adjust prototype.\n\t(do_scoped_id): Don't call binding_init.\n\t(make_lang_type): Allocate TYPE_LANG_SPECIFIC with xmalloc.\n\t* method.c (emit_thunk): Adjust call to finish_function.\n\t(synthesize_method): Likewise.\n\t* parse.y (%union): Add a new `pi' variant.\n\t(PRE_PARSED_FUNCTION_DECL): Use it.\n\t(fn.defpen): Likewise.\n\t(fndef): Adjust call to finish_function.\n\t* pt.c (instantiate_decl): Likewise.\n\t* rtti.c (syntheisze_tinfo_fn): Likewise.\n\t* semantics.c (expand_body): Likewise.\n\t* tree.c: Include ggc.h.\n\t(mark_list_hash): New function.\n\t(binding_init): Remove.\n\t(init_cplus_unsave): Rename to ...\n\t(init_tree): This.  Add GC roots.\n\nFrom-SVN: r29173", "tree": {"sha": "c6f59091f29941e9ce40cb5dfc24075cd7f663eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6f59091f29941e9ce40cb5dfc24075cd7f663eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdfcc44c12c212b296809cc19c81bc38508b3b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfcc44c12c212b296809cc19c81bc38508b3b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdfcc44c12c212b296809cc19c81bc38508b3b27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfcc44c12c212b296809cc19c81bc38508b3b27/comments", "author": null, "committer": null, "parents": [{"sha": "87e3dbc92a1bb114bdde00fe8d541f7fc121e9d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e3dbc92a1bb114bdde00fe8d541f7fc121e9d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e3dbc92a1bb114bdde00fe8d541f7fc121e9d6"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "6e0fc826eebee91f32df3cc16b6000b451070487", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc44c12c212b296809cc19c81bc38508b3b27/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc44c12c212b296809cc19c81bc38508b3b27/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fdfcc44c12c212b296809cc19c81bc38508b3b27", "patch": "@@ -48,15 +48,15 @@\n \t(process_next_inline): Adjust prototype.\n \t(do_scoped_id): Don't call binding_init.\n \t(make_lang_type): Allocate TYPE_LANG_SPECIFIC with xmalloc.\n-\t(emit_thunk): Adjust call to finish_function.\n+\t* method.c (emit_thunk): Adjust call to finish_function.\n \t(synthesize_method): Likewise.\n \t* parse.y (%union): Add a new `pi' variant.\n \t(PRE_PARSED_FUNCTION_DECL): Use it.\n \t(fn.defpen): Likewise.\n \t(fndef): Adjust call to finish_function.\n-\t(instantiate_decl): Likewise.\n-\t(rtti.c): Likewise.\n-\t(semantics.c): Likewise.\n+\t* pt.c (instantiate_decl): Likewise.\n+\t* rtti.c (syntheisze_tinfo_fn): Likewise.\n+\t* semantics.c (expand_body): Likewise.\n \t* tree.c: Include ggc.h.\n \t(mark_list_hash): New function.\n \t(binding_init): Remove."}, {"sha": "7b74443b05b32af4f512d97e89e94ab464d74a1f", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc44c12c212b296809cc19c81bc38508b3b27/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc44c12c212b296809cc19c81bc38508b3b27/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=fdfcc44c12c212b296809cc19c81bc38508b3b27", "patch": "@@ -2147,7 +2147,7 @@ emit_thunk (thunk_fndecl)\n     t = build_call (function, TREE_TYPE (TREE_TYPE (function)), t);\n     c_expand_return (t);\n \n-    finish_function (lineno, 0, 0);\n+    finish_function (lineno, 0);\n \n     /* Don't let the backend defer this function.  */\n     if (DECL_DEFER_OUTPUT (thunk_fndecl))\n@@ -2388,7 +2388,7 @@ synthesize_method (fndecl)\n \t}\n     }\n \n-  finish_function (lineno, 0, nested);\n+  finish_function (lineno, 0);\n \n   extract_interface_info ();\n   if (! context)"}, {"sha": "f2487522ca6d1102c5569fe3c3d1e09c79820b86", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc44c12c212b296809cc19c81bc38508b3b27/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc44c12c212b296809cc19c81bc38508b3b27/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fdfcc44c12c212b296809cc19c81bc38508b3b27", "patch": "@@ -9730,7 +9730,7 @@ instantiate_decl (d)\n \n       /* Clean up.  */\n       pop_obstacks ();\n-      finish_function (lineno, 0, nested);\n+      finish_function (lineno, 0);\n       expanding_p = saved_expanding_p;\n \n       /* Now, generate RTL for the function.  */"}, {"sha": "c3ce3305e4b7b4b0d83e8305d56ec435cfcb352d", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc44c12c212b296809cc19c81bc38508b3b27/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc44c12c212b296809cc19c81bc38508b3b27/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=fdfcc44c12c212b296809cc19c81bc38508b3b27", "patch": "@@ -1173,5 +1173,5 @@ synthesize_tinfo_fn (fndecl)\n   tmp = build_indirect_ref (tmp, 0);\n   c_expand_return (tmp);\n   pop_momentary ();\n-  finish_function (lineno, 0, 0);\n+  finish_function (lineno, 0);\n }"}, {"sha": "d6099f38b8e5cbaae23f27ecbc94cecc51f54f66", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc44c12c212b296809cc19c81bc38508b3b27/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc44c12c212b296809cc19c81bc38508b3b27/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=fdfcc44c12c212b296809cc19c81bc38508b3b27", "patch": "@@ -2185,14 +2185,9 @@ expand_body (fn)\n      tree fn;\n {\n   int saved_expanding_p;\n-  int nested; \n   tree t;\n   tree try_block;\n \n-  /* Remember whether we're already processing a function definition\n-     so that we can tell finish_function.  */\n-  nested = in_function_p ();\n-\n   /* Let the compiler know that now is the time to really generate\n      actualy RTL.  */\n   saved_expanding_p = expanding_p;\n@@ -2248,7 +2243,7 @@ expand_body (fn)\n       finish_function_handler_sequence (NULL_TREE);\n     }\n \n-  finish_function (lineno, 0, nested);\n+  finish_function (lineno, 0);\n \n   /* Restore EXPANDING_P.  */\n   expanding_p = saved_expanding_p;"}]}