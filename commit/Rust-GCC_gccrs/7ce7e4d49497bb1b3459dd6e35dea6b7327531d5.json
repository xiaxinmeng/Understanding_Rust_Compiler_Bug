{"sha": "7ce7e4d49497bb1b3459dd6e35dea6b7327531d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlN2U0ZDQ5NDk3YmIxYjM0NTlkZDZlMzVkZWE2YjczMjc1MzFkNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-03-20T06:41:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-03-20T06:41:17Z"}, "message": "ipa-inline.c (can_inline_edge_p): Short circuit if inline_failed already is final.\n\n\n\t* ipa-inline.c (can_inline_edge_p): Short circuit if inline_failed\n\talready is final.\n\t(ipa_inline): Recompute inline_failed codes.\n\t* cif-code.def (FUNCTION_NOT_OPTIMIZED, REDEFINED_EXTERN_INLINE,\n\tUSES_COMDAT_LOCAL, ATTRIBUTE_MISMATCH, UNREACHABLE): Declare as \n\tCIF_FINAL_ERROR.\n\nFrom-SVN: r221530", "tree": {"sha": "aae13f8578d0f05cdbe59e21353a22070a4f17cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aae13f8578d0f05cdbe59e21353a22070a4f17cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5/comments", "author": null, "committer": null, "parents": [{"sha": "21e357f1f2ecbd7b6ab479d8f2836e251681194b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e357f1f2ecbd7b6ab479d8f2836e251681194b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e357f1f2ecbd7b6ab479d8f2836e251681194b"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "33369648c2f88c81e668640dcfecd3e3db941b4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ce7e4d49497bb1b3459dd6e35dea6b7327531d5", "patch": "@@ -1,3 +1,12 @@\n+2015-03-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline.c (can_inline_edge_p): Short circuit if inline_failed\n+\talready is final.\n+\t(ipa_inline): Recompute inline_failed codes.\n+\t* cif-code.def (FUNCTION_NOT_OPTIMIZED, REDEFINED_EXTERN_INLINE,\n+\tUSES_COMDAT_LOCAL, ATTRIBUTE_MISMATCH, UNREACHABLE): Declare as \n+\tCIF_FINAL_ERROR.\n+\n 2015-03-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/60851"}, {"sha": "202fddf75ee04448652ab6d60617ac0c4fab96da", "filename": "gcc/cif-code.def", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5/gcc%2Fcif-code.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5/gcc%2Fcif-code.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcif-code.def?ref=7ce7e4d49497bb1b3459dd6e35dea6b7327531d5", "patch": "@@ -39,15 +39,15 @@ DEFCIFCODE(FUNCTION_NOT_CONSIDERED, CIF_FINAL_NORMAL,\n \t   N_(\"function not considered for inlining\"))\n \n /* Caller is compiled with optimizations disabled.  */\n-DEFCIFCODE(FUNCTION_NOT_OPTIMIZED, CIF_FINAL_NORMAL,\n+DEFCIFCODE(FUNCTION_NOT_OPTIMIZED, CIF_FINAL_ERROR,\n \t   N_(\"caller is not optimized\"))\n \n /* Inlining failed owing to unavailable function body.  */\n DEFCIFCODE(BODY_NOT_AVAILABLE, CIF_FINAL_ERROR,\n \t   N_(\"function body not available\"))\n \n /* Extern inline function that has been redefined.  */\n-DEFCIFCODE(REDEFINED_EXTERN_INLINE, CIF_FINAL_NORMAL,\n+DEFCIFCODE(REDEFINED_EXTERN_INLINE, CIF_FINAL_ERROR,\n \t   N_(\"redefined extern inline functions are not considered for \"\n \t      \"inlining\"))\n \n@@ -87,10 +87,6 @@ DEFCIFCODE(UNLIKELY_CALL, CIF_FINAL_NORMAL,\n DEFCIFCODE(NOT_DECLARED_INLINED, CIF_FINAL_NORMAL,\n \t   N_(\"function not declared inline and code size would grow\"))\n \n-/* Inlining suppressed due to size optimization.  */\n-DEFCIFCODE(OPTIMIZING_FOR_SIZE, CIF_FINAL_NORMAL,\n-\t   N_(\"optimizing for size and code size would grow\"))\n-\n /* Caller and callee disagree on the arguments.  */\n DEFCIFCODE(MISMATCHED_ARGUMENTS, CIF_FINAL_ERROR,\n \t   N_(\"mismatched arguments\"))\n@@ -121,13 +117,13 @@ DEFCIFCODE(OPTIMIZATION_MISMATCH, CIF_FINAL_ERROR,\n \t   N_(\"optimization level attribute mismatch\"))\n \n /* We can't inline because the callee refers to comdat-local symbols.  */\n-DEFCIFCODE(USES_COMDAT_LOCAL, CIF_FINAL_NORMAL,\n+DEFCIFCODE(USES_COMDAT_LOCAL, CIF_FINAL_ERROR,\n \t   N_(\"callee refers to comdat-local symbols\"))\n \n /* We can't inline because of mismatched caller/callee attributes.  */\n-DEFCIFCODE(ATTRIBUTE_MISMATCH, CIF_FINAL_NORMAL,\n+DEFCIFCODE(ATTRIBUTE_MISMATCH, CIF_FINAL_ERROR,\n \t   N_(\"function attribute mismatch\"))\n \n /* We proved that the call is unreachable.  */\n-DEFCIFCODE(UNREACHABLE, CIF_FINAL_NORMAL,\n+DEFCIFCODE(UNREACHABLE, CIF_FINAL_ERROR,\n \t   N_(\"unreachable\"))"}, {"sha": "851ef3fa8e7c50750c711d5a53d5ba3e885ac88b", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=7ce7e4d49497bb1b3459dd6e35dea6b7327531d5", "patch": "@@ -312,6 +312,15 @@ static bool\n can_inline_edge_p (struct cgraph_edge *e, bool report,\n \t\t   bool disregard_limits = false, bool early = false)\n {\n+  gcc_checking_assert (e->inline_failed);\n+\n+  if (cgraph_inline_failed_type (e->inline_failed) == CIF_FINAL_ERROR)\n+    {\n+      if (report)\n+        report_inline_failed_reason (e);\n+      return false;\n+    }\n+\n   bool inlinable = true;\n   enum availability avail;\n   cgraph_node *callee = e->callee->ultimate_alias_target (&avail);\n@@ -323,9 +332,7 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n   struct function *caller_fun = caller->get_fun ();\n   struct function *callee_fun = callee ? callee->get_fun () : NULL;\n \n-  gcc_assert (e->inline_failed);\n-\n-  if (!callee || !callee->definition)\n+  if (!callee->definition)\n     {\n       e->inline_failed = CIF_BODY_NOT_AVAILABLE;\n       inlinable = false;\n@@ -363,8 +370,7 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n     }\n   /* TM pure functions should not be inlined into non-TM_pure\n      functions.  */\n-  else if (is_tm_pure (callee->decl)\n-\t   && !is_tm_pure (caller->decl))\n+  else if (is_tm_pure (callee->decl) && !is_tm_pure (caller->decl))\n     {\n       e->inline_failed = CIF_UNSPECIFIED;\n       inlinable = false;\n@@ -2289,7 +2295,22 @@ ipa_inline (void)\n   nnodes = ipa_reverse_postorder (order);\n \n   FOR_EACH_FUNCTION (node)\n-    node->aux = 0;\n+    {\n+      node->aux = 0;\n+\n+      /* Recompute the default reasons for inlining because they may have\n+\t changed during merging.  */\n+      if (in_lto_p)\n+\t{\n+\t  for (cgraph_edge *e = node->callees; e; e = e->next_callee)\n+\t    {\n+\t      gcc_assert (e->inline_failed);\n+\t      initialize_inline_failed (e);\n+\t    }\n+\t  for (cgraph_edge *e = node->indirect_calls; e; e = e->next_callee)\n+\t    initialize_inline_failed (e);\n+\t}\n+    }\n \n   if (dump_file)\n     fprintf (dump_file, \"\\nFlattening functions:\\n\");"}]}