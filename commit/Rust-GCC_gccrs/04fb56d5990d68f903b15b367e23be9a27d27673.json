{"sha": "04fb56d5990d68f903b15b367e23be9a27d27673", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRmYjU2ZDU5OTBkNjhmOTAzYjE1YjM2N2UyM2JlOWEyN2QyNzY3Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-11-05T00:18:51Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-11-05T00:18:51Z"}, "message": "arm.c (arm_handle_notshared_attribute): New function.\n\n\t* config/arm/arm.c (arm_handle_notshared_attribute): New function.\n\t* doc/extend.texi: Document \"notshared\" attribute.\n\n\t* testsuite/g++.dg/ext/visibility/symbian1.C: New test.\n\nFrom-SVN: r90099", "tree": {"sha": "2c7b87865b69a5a634daf74740d623e77960bef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c7b87865b69a5a634daf74740d623e77960bef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04fb56d5990d68f903b15b367e23be9a27d27673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04fb56d5990d68f903b15b367e23be9a27d27673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04fb56d5990d68f903b15b367e23be9a27d27673", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04fb56d5990d68f903b15b367e23be9a27d27673/comments", "author": null, "committer": null, "parents": [{"sha": "30a8b5f807de4e90d2420b1b36b79db174395be4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a8b5f807de4e90d2420b1b36b79db174395be4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a8b5f807de4e90d2420b1b36b79db174395be4"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "239dceccacf81a34d4b485b41b5b4a2814f07964", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fb56d5990d68f903b15b367e23be9a27d27673/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fb56d5990d68f903b15b367e23be9a27d27673/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04fb56d5990d68f903b15b367e23be9a27d27673", "patch": "@@ -1,3 +1,8 @@\n+2004-11-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_handle_notshared_attribute): New function.\n+\t* doc/extend.texi: Document \"notshared\" attribute.\n+\t\n 2004-11-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-phinodes.c (make_phi_node): Make it static."}, {"sha": "730877bdc2374086daec7354d4fec656b277d21e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fb56d5990d68f903b15b367e23be9a27d27673/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fb56d5990d68f903b15b367e23be9a27d27673/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=04fb56d5990d68f903b15b367e23be9a27d27673", "patch": "@@ -114,6 +114,7 @@ static unsigned long arm_isr_value (tree);\n static unsigned long arm_compute_func_type (void);\n static tree arm_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n static tree arm_handle_isr_attribute (tree *, tree, tree, int, bool *);\n+static tree arm_handle_notshared_attribute (tree *, tree, tree, int, bool *);\n static void arm_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void arm_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void thumb_output_function_prologue (FILE *, HOST_WIDE_INT);\n@@ -2589,6 +2590,7 @@ const struct attribute_spec arm_attribute_table[] =\n #elif TARGET_DLLIMPORT_DECL_ATTRIBUTES\n   { \"dllimport\",    0, 0, false, false, false, handle_dll_attribute },\n   { \"dllexport\",    0, 0, false, false, false, handle_dll_attribute },\n+  { \"notshared\",    0, 0, false, true, false, arm_handle_notshared_attribute },\n #endif\n   { NULL,           0, 0, false, false, false, NULL }\n };\n@@ -2668,6 +2670,29 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n   return NULL_TREE;\n }\n \n+/* Handle the \"notshared\" attribute.  This attribute is another way of\n+   requesting hidden visibility.  ARM's compiler supports\n+   \"__declspec(notshared)\"; we support the same thing via an\n+   attribute.  */\n+\n+static tree\n+arm_handle_notshared_attribute (tree *node, \n+\t\t\t\ttree name ATTRIBUTE_UNUSED, \n+\t\t\t\ttree args ATTRIBUTE_UNUSED, \n+\t\t\t\tint flags ATTRIBUTE_UNUSED, \n+\t\t\t\tbool *no_add_attrs)\n+{\n+  tree decl = TYPE_NAME (*node);\n+\n+  if (decl)\n+    {\n+      DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n+      DECL_VISIBILITY_SPECIFIED (decl) = 1;\n+      *no_add_attrs = false;\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Return 0 if the attributes for two types are incompatible, 1 if they\n    are compatible, and 2 if they are nearly compatible (which causes a\n    warning to be generated).  */"}, {"sha": "0e5e970e3984076e4cdb2969f3167e7d495ec185", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fb56d5990d68f903b15b367e23be9a27d27673/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fb56d5990d68f903b15b367e23be9a27d27673/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=04fb56d5990d68f903b15b367e23be9a27d27673", "patch": "@@ -3307,6 +3307,29 @@ declaration, the above program would abort when compiled with\n @option{-fstrict-aliasing}, which is on by default at @option{-O2} or\n above in recent GCC versions.\n \n+@subsection ARM Type Attributes\n+\n+On those ARM targets that support @code{dllimport} (such as Symbian\n+OS), you can use the @code{notshared} attribute to indicate that the \n+virtual table and other similar data for a class should not be\n+exported from a DLL.  For example:\n+\n+@smallexample\n+class __declspec(notshared) C @{\n+public:\n+  __declspec(dllimport) C(); \n+  virtual void f();\n+@}\n+\n+__declspec(dllexport)\n+C::C() @{@}\n+@end smallexample\n+\n+In this code, @code{C::C} is exported from the current DLL, but the\n+virtual table for @code{C} is not exported.  (You can use\n+@code{__attribute__} instead of @code{__declspec} if you prefer, but\n+most Symbian OS code uses @code{__declspec}.)\n+\n @subsection i386 Type Attributes\n \n Two attributes are currently defined for i386 configurations:"}, {"sha": "69f4038729a0e5cdd13cbbc02fa4864546b95e4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fb56d5990d68f903b15b367e23be9a27d27673/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fb56d5990d68f903b15b367e23be9a27d27673/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04fb56d5990d68f903b15b367e23be9a27d27673", "patch": "@@ -1,3 +1,7 @@\n+2004-11-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* testsuite/g++.dg/ext/visibility/symbian1.C: New test.\n+\t\n 2004-11-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/pragma-align.c (sixteen): Use 8-byte alignment"}, {"sha": "864ab2bb9eb5b8efa5c88fd9c121c6cc82c7e1da", "filename": "gcc/testsuite/g++.dg/ext/visibility/symbian1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fb56d5990d68f903b15b367e23be9a27d27673/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fsymbian1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fb56d5990d68f903b15b367e23be9a27d27673/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fsymbian1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fsymbian1.C?ref=04fb56d5990d68f903b15b367e23be9a27d27673", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile { target arm*-*-symbianelf* } }\n+// Class data should not be exported.\n+// { dg-final { scan-hidden \"_ZTV2K3\" } }\n+// But the constructor and destructor should be exported.\n+// { dg-final { scan-not-hidden \"_ZN2K3C2Ev\" } }\n+// { dg-final { scan-not-hidden \"_ZN2K3D0Ev\" } }\n+\n+class __declspec(notshared) K3 {\n+public:\n+  __declspec(dllimport) K3();\n+  __declspec(dllimport) virtual ~K3();\n+  virtual int m1();\n+};\n+\n+__declspec(dllexport)\n+  K3::K3(){}\n+\n+__declspec(dllexport)\n+  K3::~K3(){}\n+\n+int K3::m1() { return 1; }\n+"}]}