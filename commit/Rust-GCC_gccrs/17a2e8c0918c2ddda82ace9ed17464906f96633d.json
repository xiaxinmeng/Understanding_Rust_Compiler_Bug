{"sha": "17a2e8c0918c2ddda82ace9ed17464906f96633d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhMmU4YzA5MThjMmRkZGE4MmFjZTllZDE3NDY0OTA2Zjk2NjMzZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-05T14:35:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-05T14:35:46Z"}, "message": "i386: Schedule the only -O0 split pass on x86 after pro_and_epilogue/jump2 [PR92190]\n\nThe problem is that x86 is the only target that defines HAVE_ATTR_length and\ndoesn't schedule any splitting pass at -O0 after pro_and_epilogue.\n\nSo, either we go back to handling this during vzeroupper output\n(unconditionally, rather than flag_ipa_ra guarded), or we need to tweak the\nsplit* passes for x86.\n\nSeems there are 5 split passes, split1 is run unconditionally before reload,\nsplit2 is run for optimize > 0 or STACK_REGS (x86) after ra but before\nepilogue_completed, split3 is run before regstack for STACK_REGS and\noptimize and -fno-schedule-insns2, split4 is run before sched2 if sched2 is\nrun and split5 is run before shorten_branches if HAVE_ATTR_length and not\nSTACK_REGS.\n\n2020-02-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/92190\n\t* recog.c (pass_split_after_reload::gate): For STACK_REGS targets,\n\tdon't run when !optimize.\n\t(pass_split_before_regstack::gate): For STACK_REGS targets, run even\n\twhen !optimize.", "tree": {"sha": "f70ceb653262d53b6ac31f346bd290cd3041b644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f70ceb653262d53b6ac31f346bd290cd3041b644"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17a2e8c0918c2ddda82ace9ed17464906f96633d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a2e8c0918c2ddda82ace9ed17464906f96633d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a2e8c0918c2ddda82ace9ed17464906f96633d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a2e8c0918c2ddda82ace9ed17464906f96633d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9847df2c9573f1e4b948b5a7272c6aadf8e01c22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9847df2c9573f1e4b948b5a7272c6aadf8e01c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9847df2c9573f1e4b948b5a7272c6aadf8e01c22"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "cb4132f955e2aa8f8e8afabc016f9e6d3a94ab56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a2e8c0918c2ddda82ace9ed17464906f96633d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a2e8c0918c2ddda82ace9ed17464906f96633d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17a2e8c0918c2ddda82ace9ed17464906f96633d", "patch": "@@ -1,3 +1,11 @@\n+2020-02-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/92190\n+\t* recog.c (pass_split_after_reload::gate): For STACK_REGS targets,\n+\tdon't run when !optimize.\n+\t(pass_split_before_regstack::gate): For STACK_REGS targets, run even\n+\twhen !optimize.\n+\n 2020-02-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/90648"}, {"sha": "5790a58a91140e43d71e0cd714e50960199347de", "filename": "gcc/recog.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a2e8c0918c2ddda82ace9ed17464906f96633d/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a2e8c0918c2ddda82ace9ed17464906f96633d/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=17a2e8c0918c2ddda82ace9ed17464906f96633d", "patch": "@@ -3924,14 +3924,7 @@ class pass_split_after_reload : public rtl_opt_pass\n   virtual bool gate (function *)\n     {\n       /* If optimizing, then go ahead and split insns now.  */\n-      if (optimize > 0)\n-\treturn true;\n-\n-#ifdef STACK_REGS\n-      return true;\n-#else\n-      return false;\n-#endif\n+      return optimize > 0;\n     }\n \n   virtual unsigned int execute (function *)\n@@ -3991,12 +3984,12 @@ pass_split_before_regstack::gate (function *)\n      split until final which doesn't allow splitting\n      if HAVE_ATTR_length.  */\n # ifdef INSN_SCHEDULING\n-  return (optimize && !flag_schedule_insns_after_reload);\n+  return !optimize || !flag_schedule_insns_after_reload;\n # else\n-  return (optimize);\n+  return true;\n # endif\n #else\n-  return 0;\n+  return false;\n #endif\n }\n "}]}