{"sha": "380271569e5ecfeba8ac253513b03936fa08a601", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwMjcxNTY5ZTVlY2ZlYmE4YWMyNTM1MTNiMDM5MzZmYTA4YTYwMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-07-20T17:39:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-07-20T17:39:22Z"}, "message": "tree-object-size.c (addr_object_size): Handle unions with array in it as last field of structs in __bos (...\n\n\t* tree-object-size.c (addr_object_size): Handle unions with\n\tarray in it as last field of structs in __bos (, 1) as __bos (, 0).\n\n\t* gcc.dg/builtin-object-size-6.c: Adjust expected values. \n\t* gcc.dg/builtin-object-size-8.c: New test. \n\t* g++.dg/ext/builtin-object-size1.C: Adjust expected values.\n\t* g++.dg/ext/builtin-object-size2.C: Likewise.\n\nFrom-SVN: r149825", "tree": {"sha": "2667a59244c4fe3df2140a60b8878cc03a7811b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2667a59244c4fe3df2140a60b8878cc03a7811b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/380271569e5ecfeba8ac253513b03936fa08a601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380271569e5ecfeba8ac253513b03936fa08a601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380271569e5ecfeba8ac253513b03936fa08a601", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380271569e5ecfeba8ac253513b03936fa08a601/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e338758dd12b17eb04531917bca8790504ae2078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e338758dd12b17eb04531917bca8790504ae2078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e338758dd12b17eb04531917bca8790504ae2078"}], "stats": {"total": 250, "additions": 233, "deletions": 17}, "files": [{"sha": "6b658f3832e8e677ff42a7a7e824059d306f5524", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=380271569e5ecfeba8ac253513b03936fa08a601", "patch": "@@ -1,5 +1,8 @@\n 2009-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* tree-object-size.c (addr_object_size): Handle unions with\n+\tarray in it as last field of structs in __bos (, 1) as __bos (, 0).\n+\n \tPR tree-optimization/40792\n \t* tree.c (build_function_type_skip_args): Remove bogus assert.\n "}, {"sha": "0a473c526db06741bf14674db114064adca4f8a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=380271569e5ecfeba8ac253513b03936fa08a601", "patch": "@@ -1,5 +1,10 @@\n 2009-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.dg/builtin-object-size-6.c: Adjust expected values. \n+\t* gcc.dg/builtin-object-size-8.c: New test. \n+\t* g++.dg/ext/builtin-object-size1.C: Adjust expected values.\n+\t* g++.dg/ext/builtin-object-size2.C: Likewise.\n+\n \tPR tree-optimization/40792\n \t* gcc.dg/pr40792.c: New test.\n "}, {"sha": "8590a0bbebdc69ae6f4a1541e5b5c6de0789e9ca", "filename": "gcc/testsuite/g++.dg/ext/builtin-object-size1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size1.C?ref=380271569e5ecfeba8ac253513b03936fa08a601", "patch": "@@ -399,11 +399,11 @@ test8 (union F *f)\n {\n   if (__builtin_object_size (&f->d.c[3], 0) != (size_t) -1)\n     abort ();\n-  if (__builtin_object_size (&f->d.c[3], 1) != sizeof (f->d.c) - 3)\n+  if (__builtin_object_size (&f->d.c[3], 1) != (size_t) -1)\n     abort ();\n   if (__builtin_object_size (&f->d.c[3], 2) != 0)\n     abort ();\n-  if (__builtin_object_size (&f->d.c[3], 3) != sizeof (f->d.c) - 3)\n+  if (__builtin_object_size (&f->d.c[3], 3) != 0)\n     abort ();\n }\n "}, {"sha": "d79b1b83310bb5de5236d282c5a82672bf4d46f6", "filename": "gcc/testsuite/g++.dg/ext/builtin-object-size2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size2.C?ref=380271569e5ecfeba8ac253513b03936fa08a601", "patch": "@@ -402,11 +402,11 @@ test8 (union F *f)\n {\n   if (__builtin_object_size (&f->d.c[3], 0) != (size_t) -1)\n     abort ();\n-  if (__builtin_object_size (&f->d.c[3], 1) != sizeof (f->d.c) - 3)\n+  if (__builtin_object_size (&f->d.c[3], 1) != (size_t) -1)\n     abort ();\n   if (__builtin_object_size (&f->d.c[3], 2) != 0)\n     abort ();\n-  if (__builtin_object_size (&f->d.c[3], 3) != sizeof (f->d.c) - 3)\n+  if (__builtin_object_size (&f->d.c[3], 3) != 0)\n     abort ();\n }\n "}, {"sha": "c6887b854ace02dd9e50bdafbee1d1911729669b", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-6.c?ref=380271569e5ecfeba8ac253513b03936fa08a601", "patch": "@@ -399,11 +399,11 @@ test8 (union F *f)\n {\n   if (__builtin_object_size (&f->d.c[3], 0) != (size_t) -1)\n     abort ();\n-  if (__builtin_object_size (&f->d.c[3], 1) != sizeof (f->d.c) - 3)\n+  if (__builtin_object_size (&f->d.c[3], 1) != (size_t) -1)\n     abort ();\n   if (__builtin_object_size (&f->d.c[3], 2) != 0)\n     abort ();\n-  if (__builtin_object_size (&f->d.c[3], 3) != sizeof (f->d.c) - 3)\n+  if (__builtin_object_size (&f->d.c[3], 3) != 0)\n     abort ();\n }\n "}, {"sha": "f2d88f9d591eb08991687ebf2b5935f0643472c7", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-8.c", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-8.c?ref=380271569e5ecfeba8ac253513b03936fa08a601", "patch": "@@ -0,0 +1,200 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void *malloc (size_t);\n+extern void free (void *);\n+extern void abort (void);\n+\n+union A\n+{\n+  int a1;\n+  char a2[3];\n+};\n+\n+union B\n+{\n+  long long b1;\n+  union A b2;\n+};\n+\n+struct C\n+{\n+  int c1;\n+  union A c2;\n+};\n+\n+struct D\n+{\n+  int d1;\n+  union B d2;\n+};\n+\n+union E\n+{\n+  struct C e1;\n+  char e2[3];\n+};\n+\n+union F\n+{\n+  int f1;\n+  struct D f2;\n+};\n+\n+struct G\n+{\n+  union A g1;\n+  char g2;\n+};\n+\n+struct H\n+{\n+  int h1;\n+  union E h2;\n+};\n+\n+#define T(X, S0, S1) \\\n+  if (__builtin_object_size (X, 0) != (S0))\t\\\n+    abort ();\t\t\t\t\t\\\n+  if (__builtin_object_size (X, 1) != (S1))\t\\\n+    abort ();\t\t\t\t\t\\\n+  if (__builtin_object_size (X, 2) != (S0))\t\\\n+    abort ();\t\t\t\t\t\\\n+  if (__builtin_object_size (X, 3) != (S1))\t\\\n+    abort ()\n+#define TS(X, S0) T(&X, S0, sizeof (X))\n+#define TA(X, S0, S1) \\\n+  T(X, S0, S1); T(&X[0], S0, S1); T(&X[1], (S0) - 1, (S1) - 1)\n+#define TF(X, S0) TA(X, S0, S0)\n+\n+int\n+main (void)\n+{\n+  size_t s, o, o2;\n+\n+  s = sizeof (union A);\n+  o = 0;\n+  union A *a1 = malloc (s);\n+  union A *a2 = malloc (o + 212);\n+  TS (a1->a1, s);\n+  TF (a1->a2, s);\n+  s = o + 212;\n+  TS (a2->a1, s);\n+  TF (a2->a2, s);\n+  free (a2);\n+  free (a1);\n+\n+  s = sizeof (union B);\n+  o = 0;\n+  union B *b1 = malloc (s);\n+  union B *b2 = malloc (o + 212);\n+  TS (b1->b1, s);\n+  TS (b1->b2.a1, s);\n+  TF (b1->b2.a2, s);\n+  s = o + 212;\n+  TS (b2->b1, s);\n+  TS (b2->b2.a1, s);\n+  TF (b2->b2.a2, s);\n+  free (b2);\n+  free (b1);\n+\n+  s = sizeof (struct C);\n+  o = __builtin_offsetof (struct C, c2);\n+  struct C *c1 = malloc (s);\n+  struct C *c2 = malloc (o + 212);\n+  TS (c1->c1, s);\n+  TS (c1->c2.a1, s - o);\n+  TF (c1->c2.a2, s - o);\n+  s = o + 212;\n+  TS (c2->c1, s);\n+  TS (c2->c2.a1, s - o);\n+  TF (c2->c2.a2, s - o);\n+  free (c2);\n+  free (c1);\n+\n+  s = sizeof (struct D);\n+  o = __builtin_offsetof (struct D, d2);\n+  struct D *d1 = malloc (s);\n+  struct D *d2 = malloc (o + 212);\n+  TS (d1->d1, s);\n+  TS (d1->d2.b1, s - o);\n+  TS (d1->d2.b2.a1, s - o);\n+  TF (d1->d2.b2.a2, s - o);\n+  s = o + 212;\n+  TS (d2->d1, s);\n+  TS (d2->d2.b1, s - o);\n+  TS (d2->d2.b2.a1, s - o);\n+  TF (d2->d2.b2.a2, s - o);\n+  free (d2);\n+  free (d1);\n+\n+  s = sizeof (union E);\n+  o = __builtin_offsetof (union E, e1.c2);\n+  union E *e1 = malloc (s);\n+  union E *e2 = malloc (o + 212);\n+  TS (e1->e1.c1, s);\n+  TS (e1->e1.c2.a1, s - o);\n+  TF (e1->e1.c2.a2, s - o);\n+  TF (e1->e2, s);\n+  s = o + 212;\n+  TS (e2->e1.c1, s);\n+  TS (e2->e1.c2.a1, s - o);\n+  TF (e2->e1.c2.a2, s - o);\n+  TF (e2->e2, s);\n+  free (e2);\n+  free (e1);\n+\n+  s = sizeof (union F);\n+  o = __builtin_offsetof (union F, f2.d2);\n+  union F *f1 = malloc (s);\n+  union F *f2 = malloc (o + 212);\n+  TS (f1->f1, s);\n+  TS (f1->f2.d1, s);\n+  TS (f1->f2.d2.b1, s - o);\n+  TS (f1->f2.d2.b2.a1, s - o);\n+  TF (f1->f2.d2.b2.a2, s - o);\n+  s = o + 212;\n+  TS (f2->f1, s);\n+  TS (f2->f2.d1, s);\n+  TS (f2->f2.d2.b1, s - o);\n+  TS (f2->f2.d2.b2.a1, s - o);\n+  TF (f2->f2.d2.b2.a2, s - o);\n+  free (f2);\n+  free (f1);\n+\n+  s = sizeof (struct G);\n+  o = __builtin_offsetof (struct G, g2);\n+  struct G *g1 = malloc (s);\n+  struct G *g2 = malloc (o + 212);\n+  TS (g1->g1.a1, s);\n+  TA (g1->g1.a2, s, sizeof (g1->g1.a2));\n+  TS (g1->g2, s - o);\n+  s = o + 212;\n+  TS (g2->g1.a1, s);\n+  TA (g2->g1.a2, s, sizeof (g1->g1.a2));\n+  TS (g2->g2, s - o);\n+  free (g2);\n+  free (g1);\n+\n+  s = sizeof (struct H);\n+  o = __builtin_offsetof (struct H, h2);\n+  o2 = __builtin_offsetof (struct H, h2.e1.c2);\n+  struct H *h1 = malloc (s);\n+  struct H *h2 = malloc (o2 + 212);\n+  TS (h1->h1, s);\n+  TS (h1->h2.e1.c1, s - o);\n+  TS (h1->h2.e1.c2.a1, s - o2);\n+  TA (h1->h2.e1.c2.a2, s - o2, sizeof (h1->h2.e1.c2.a2));\n+  TF (h1->h2.e2, s - o);\n+  s = o2 + 212;\n+  TS (h2->h1, s);\n+  TS (h2->h2.e1.c1, s - o);\n+  TS (h2->h2.e1.c2.a1, s - o2);\n+  TA (h2->h2.e1.c2.a2, s - o2, sizeof (h2->h2.e1.c2.a2));\n+  TF (h2->h2.e2, s - o);\n+  free (h2);\n+  free (h1);\n+\n+  return 0;\n+}"}, {"sha": "5b9fe38e96bb776edaa7d9a361cd37df6882cb84", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380271569e5ecfeba8ac253513b03936fa08a601/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=380271569e5ecfeba8ac253513b03936fa08a601", "patch": "@@ -217,7 +217,7 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t\t && TREE_CODE (var) != IMAGPART_EXPR)\n \t    var = TREE_OPERAND (var, 0);\n \t  if (var != pt_var && TREE_CODE (var) == ARRAY_REF)\n-\t      var = TREE_OPERAND (var, 0);\n+\t    var = TREE_OPERAND (var, 0);\n \t  if (! TYPE_SIZE_UNIT (TREE_TYPE (var))\n \t      || ! host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (var)), 1)\n \t      || (pt_var_size\n@@ -262,8 +262,17 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t\t\tv = NULL_TREE;\n \t\t\tbreak;\n \t\t      }\n-\t\t    if (TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n-\t\t\t == RECORD_TYPE)\n+\t\t    while (v != pt_var && TREE_CODE (v) == COMPONENT_REF)\n+\t\t      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n+\t\t\t  != UNION_TYPE\n+\t\t\t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n+\t\t\t  != QUAL_UNION_TYPE)\n+\t\t\tbreak;\n+\t\t      else\n+\t\t\tv = TREE_OPERAND (v, 0);\n+\t\t    if (TREE_CODE (v) == COMPONENT_REF\n+\t\t\t&& TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n+\t\t\t   == RECORD_TYPE)\n \t\t      {\n \t\t\ttree fld_chain = TREE_CHAIN (TREE_OPERAND (v, 1));\n \t\t\tfor (; fld_chain; fld_chain = TREE_CHAIN (fld_chain))\n@@ -275,18 +284,17 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t\t\t    v = NULL_TREE;\n \t\t\t    break;\n \t\t\t  }\n+\t\t\tv = TREE_OPERAND (v, 0);\n \t\t      }\n-\n-\t\t    if (TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n-\t\t\t== RECORD_TYPE)\n-\t\t      v = TREE_OPERAND (v, 0);\n-\t\t    while (v && v != pt_var && TREE_CODE (v) == COMPONENT_REF)\n-\t\t      if (TREE_CODE (TREE_TYPE (v)) != UNION_TYPE\n-\t\t\t  && TREE_CODE (TREE_TYPE (v)) != QUAL_UNION_TYPE)\n+\t\t    while (v != pt_var && TREE_CODE (v) == COMPONENT_REF)\n+\t\t      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n+\t\t\t  != UNION_TYPE\n+\t\t\t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n+\t\t\t  != QUAL_UNION_TYPE)\n \t\t\tbreak;\n \t\t      else\n \t\t\tv = TREE_OPERAND (v, 0);\n-\t\t    if (v && v != pt_var)\n+\t\t    if (v != pt_var)\n \t\t      v = NULL_TREE;\n \t\t    else\n \t\t      v = pt_var;"}]}