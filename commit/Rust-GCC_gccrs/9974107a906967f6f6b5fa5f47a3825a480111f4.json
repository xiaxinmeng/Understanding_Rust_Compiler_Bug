{"sha": "9974107a906967f6f6b5fa5f47a3825a480111f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk3NDEwN2E5MDY5NjdmNmY2YjVmYTVmNDdhMzgyNWE0ODAxMTFmNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-10-05T17:45:36Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-10-05T17:45:36Z"}, "message": "Fix vect-shuffle-* test cases.\n\nFrom-SVN: r179566", "tree": {"sha": "4be661141aab431ec4281b3315b6008a3748ffbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4be661141aab431ec4281b3315b6008a3748ffbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9974107a906967f6f6b5fa5f47a3825a480111f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9974107a906967f6f6b5fa5f47a3825a480111f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9974107a906967f6f6b5fa5f47a3825a480111f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9974107a906967f6f6b5fa5f47a3825a480111f4/comments", "author": null, "committer": null, "parents": [{"sha": "ed3782301420219551300b2c80cd6f2d0792b51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3782301420219551300b2c80cd6f2d0792b51a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3782301420219551300b2c80cd6f2d0792b51a"}], "stats": {"total": 696, "additions": 482, "deletions": 214}, "files": [{"sha": "4ad91390b2ace614014fdd97a0b96199624497b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9974107a906967f6f6b5fa5f47a3825a480111f4", "patch": "@@ -1,3 +1,14 @@\n+2011-10-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.c-torture/execute/vect-shuffle-1.c: Rewrite.\n+\t* gcc.c-torture/execute/vect-shuffle-2.c: Rewrite.\n+\t* gcc.c-torture/execute/vect-shuffle-3.c: Rewrite.\n+\t* gcc.c-torture/execute/vect-shuffle-4.c: Rewrite.\n+\t* gcc.c-torture/execute/vect-shuffle-5.c: Rewrite.\n+\t* gcc.c-torture/execute/vect-shuffle-6.c: New test.\n+\t* gcc.c-torture/execute/vect-shuffle-7.c: New test.\n+\t* gcc.c-torture/execute/vect-shuffle-8.c: New test.\n+\n 2011-10-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/vect/vect.exp (VEC_CFLAGS): Move initialization after"}, {"sha": "3b836362003bb221c4a0eae60a66256a16c4bf48", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-1.c", "status": "modified", "additions": 60, "deletions": 38, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-1.c?ref=9974107a906967f6f6b5fa5f47a3825a480111f4", "patch": "@@ -1,46 +1,68 @@\n-#define vector(elcount, type)  \\\n-__attribute__((vector_size((elcount)*sizeof(type)))) type\n+#if __SIZEOF_INT__ == 4\n+typedef unsigned int V __attribute__((vector_size(16), may_alias));\n \n-#define vidx(type, vec, idx) (*(((type *) &(vec)) + idx))\n+struct S\n+{\n+  V in, mask, out;\n+};\n \n-#define shufcompare(type, count, vres, v0, mask) \\\n-do { \\\n-    int __i; \\\n-    for (__i = 0; __i < count; __i++) { \\\n-        if (vidx(type, vres, __i) != vidx(type, v0, vidx(type, mask, __i))) \\\n-            __builtin_abort (); \\\n-    } \\\n-} while (0)\n+struct S tests[] = {\n+  {\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+    { 0, 1, 2, 3 },\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+  },\n+  {\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+    { 0+1*4, 1+2*4, 2+3*4, 3+4*4 },\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+  },\n+  {\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+    { 3, 2, 1, 0 },\n+    { 0x44444444, 0x33333333, 0x22222222, 0x11111111 },\n+  },\n+  {\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+    { 0, 3, 2, 1 },\n+    { 0x11111111, 0x44444444, 0x33333333, 0x22222222 },\n+  },\n+  {\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+    { 0, 2, 1, 3 },\n+    { 0x11111111, 0x33333333, 0x22222222, 0x44444444 },\n+  },\n+  {\n+    { 0x11223344, 0x55667788, 0x99aabbcc, 0xddeeff00 },\n+    { 3, 1, 2, 0 },\n+    { 0xddeeff00, 0x55667788, 0x99aabbcc, 0x11223344 },\n+  },\n+  {\n+    { 0x11223344, 0x55667788, 0x99aabbcc, 0xddeeff00 },\n+    { 0, 0, 0, 0 },\n+    { 0x11223344, 0x11223344, 0x11223344, 0x11223344 },\n+  },\n+  {\n+    { 0x11223344, 0x55667788, 0x99aabbcc, 0xddeeff00 },\n+    { 1, 2, 1, 2 },\n+    { 0x55667788, 0x99aabbcc, 0x55667788, 0x99aabbcc },\n+  }\n+};\n \n+extern void abort(void);\n \n-int main (int argc, char *argv[]) {\n-    /*vector (8, short) v0 = {argc, 1,2,3,4,5,6,7};\n-    vector (8, short) v1 = {argc, 1,argc,3,4,5,argc,7};\n-    vector (8, short) v2;\n+int main()\n+{\n+  int i;\n \n-    vector (8, short) smask = {0,0,1,2,3,4,5,6};\n+  for (i = 0; i < sizeof(tests)/sizeof(tests[0]); ++i)\n+    {\n+      V r = __builtin_shuffle(tests[i].in, tests[i].mask);\n+      if (__builtin_memcmp(&r, &tests[i].out, sizeof(V)) != 0)\n+\tabort();\n+    }\n \n-    v2 = __builtin_shuffle (v0,  smask);\n-    shufcompare (short, 8, v2, v0, smask);\n-    v2 = __builtin_shuffle (v0, v1);\n-    shufcompare (short, 8, v2, v0, v1);\n-    v2 = __builtin_shuffle (smask, v0);\n-    shufcompare (short, 8, v2, smask, v0);*/\n-\n-    vector (4, int) i0 = {argc, 1,2,3};\n-    vector (4, int) i1 = {argc, 1, argc, 3};\n-    vector (4, int) i2;\n-\n-    vector (4, int) imask = {0,3,2,1};\n-\n-    /*i2 = __builtin_shuffle (i0, imask);\n-    shufcompare (int, 4, i2, i0, imask);*/\n-    i2 = __builtin_shuffle (i0, i1);\n-    shufcompare (int, 4, i2, i0, i1);\n-\n-    i2 = __builtin_shuffle (imask, i0);\n-    shufcompare (int, 4, i2, imask, i0);\n-\n-    return 0;\n+  return 0;\n }\n \n+#endif /* SIZEOF_INT */"}, {"sha": "68ae2256f15a3be74cd1f193c73652d9f67bb2ef", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-2.c", "status": "modified", "additions": 60, "deletions": 36, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-2.c?ref=9974107a906967f6f6b5fa5f47a3825a480111f4", "patch": "@@ -1,44 +1,68 @@\n-#define vector(elcount, type)  \\\n-__attribute__((vector_size((elcount)*sizeof(type)))) type\n+#if __SIZEOF_SHORT__ == 2\n+typedef unsigned short V __attribute__((vector_size(16), may_alias));\n \n-#define vidx(type, vec, idx) (*(((type *) &(vec)) + idx))\n+struct S\n+{\n+  V in, mask, out;\n+};\n \n-#define shuf2compare(type, count, vres, v0, v1, mask) \\\n-do { \\\n-    int __i; \\\n-    for (__i = 0; __i < count; __i++) { \\\n-        if (vidx(type, vres, __i) != ((vidx(type, mask, __i) < count) ? \\\n-                          vidx(type, v0, vidx(type, mask, __i)) :  \\\n-                          vidx(type, v1, (vidx(type, mask, __i) - count)))) \\\n-            __builtin_abort (); \\\n-        } \\\n-} while (0)\n+struct S tests[] = {\n+  {\n+    { 0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, 0x8888 },\n+    { 0, 1, 2, 3, 4, 5, 6, 7 },\n+    { 0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, 0x8888 },\n+  },\n+  {\n+    { 0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, 0x8888 },\n+    { 0x10, 0x21, 0x32, 0x43, 0x54, 0x65, 0x76, 0x87 },\n+    { 0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, 0x8888 },\n+  },\n+  {\n+    { 0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, 0x8888 },\n+    { 7, 6, 5, 4, 3, 2, 1, 0 },\n+    { 0x8888, 0x7777, 0x6666, 0x5555, 0x4444, 0x3333, 0x2222, 0x1111 },\n+  },\n+  {\n+    { 0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, 0x8888 },\n+    { 7, 0, 5, 3, 2, 4, 1, 6 },\n+    { 0x8888, 0x1111, 0x6666, 0x4444, 0x3333, 0x5555, 0x2222, 0x7777 },\n+  },\n+  {\n+    { 0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, 0x8888 },\n+    { 0, 2, 1, 3, 4, 6, 5, 7 },\n+    { 0x1111, 0x3333, 0x2222, 0x4444, 0x5555, 0x7777, 0x6666, 0x8888 },\n+  },\n+  {\n+    { 0x1122, 0x3344, 0x5566, 0x7788, 0x99aa, 0xbbcc, 0xddee, 0xff00 },\n+    { 3, 1, 2, 0, 7, 5, 6, 4 },\n+    { 0x7788, 0x3344, 0x5566, 0x1122, 0xff00, 0xbbcc, 0xddee, 0x99aa },\n+  },\n+  {\n+    { 0x1122, 0x3344, 0x5566, 0x7788, 0x99aa, 0xbbcc, 0xddee, 0xff00 },\n+    { 0, 0, 0, 0 },\n+    { 0x1122, 0x1122, 0x1122, 0x1122, 0x1122, 0x1122, 0x1122, 0x1122 },\n+  },\n+  {\n+    { 0x1122, 0x3344, 0x5566, 0x7788, 0x99aa, 0xbbcc, 0xddee, 0xff00 },\n+    { 1, 6, 1, 6, 1, 6, 1, 6 }, \n+    { 0x3344, 0xddee, 0x3344, 0xddee, 0x3344, 0xddee, 0x3344, 0xddee },\n+  }\n+};\n \n+extern void abort(void);\n \n-int main (int argc, char *argv[]) {\n-    vector (8, short) v0 = {5, 5,5,5,5,5,argc,7};\n-    vector (8, short) v1 = {argc, 1,8,8,4,9,argc,4};\n-    vector (8, short) v2;\n+int main()\n+{\n+  int i;\n \n-    //vector (8, short) mask = {1,2,5,4,3,6,7};\n+  for (i = 0; i < sizeof(tests)/sizeof(tests[0]); ++i)\n+    {\n+      V r = __builtin_shuffle(tests[i].in, tests[i].mask);\n+      if (memcmp(&r, &tests[i].out, sizeof(V)) != 0)\n+\tabort();\n+    }\n \n-    vector (8, short) mask0 = {0,2,3,1,4,5,6,7};\n-    vector (8, short) mask1 = {0,12,3,4,3,0,10,9};\n-\n-    vector (8, short) mask2 = {0,8,1,9,2,10,3,11};\n-\n-    v2 = __builtin_shuffle (v0, v1,  mask0);\n-    shuf2compare (short, 8, v2, v0, v1, mask0);\n-\n-    v2 = __builtin_shuffle (v0, v1,  mask1);\n-    shuf2compare (short, 8, v2, v0, v1, mask1);\n-\n-    v2 = __builtin_shuffle (v0, v1,  mask2);\n-    shuf2compare (short, 8, v2, v0, v1, mask2);\n-\n-    v2 = __builtin_shuffle (mask0, mask0,  v0);\n-    shuf2compare (short, 8, v2, mask0, mask0, v0);\n-\n-    return 0;\n+  return 0;\n }\n \n+#endif /* SIZEOF_SHORT */"}, {"sha": "96aee6509948f3dc9ef104730c3528783589d473", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-3.c", "status": "modified", "additions": 56, "deletions": 34, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-3.c?ref=9974107a906967f6f6b5fa5f47a3825a480111f4", "patch": "@@ -1,36 +1,58 @@\n-#define vector(elcount, type)  \\\n-__attribute__((vector_size((elcount)*sizeof(type)))) type\n-\n-#define vidx(type, vec, idx) (*(((type *) &(vec)) + idx))\n-\n-#define shufcompare(type, count, vres, v0, mask) \\\n-do { \\\n-    int __i; \\\n-    for (__i = 0; __i < count; __i++) { \\\n-        if (vidx(type, vres, __i) != vidx(type, v0, vidx(type, mask, __i))) \\\n-            __builtin_abort (); \\\n-    } \\\n-} while (0)\n-\n-vector (8, short) __attribute__ ((noinline))\n-f (vector (8, short) x, vector (8, short) mask) {\n-    return __builtin_shuffle (x, mask);\n-}\n-\n-\n-int main (int argc, char *argv[]) {\n-    vector (8, short) v0 = {argc, 1,2,3,4,5,6,7};\n-    vector (8, short) v1 = {argc, 1,argc,3,4,5,argc,7};\n-    vector (8, short) v2;\n-\n-    vector (8, short) mask = {0,0,1,2,3,4,5,6};\n-\n-    v2 = f (v0,  mask);\n-    shufcompare (short, 8, v2, v0, mask);\n-\n-    v2 = f (v0, v1);\n-    shufcompare (short, 8, v2, v0, v1);\n-\n-    return 0;\n+#if __SIZEOF_LONG_LONG__ == 8\n+typedef unsigned long long V __attribute__((vector_size(16), may_alias));\n+\n+struct S\n+{\n+  V in, mask, out;\n+};\n+\n+struct S tests[] = {\n+  {\n+    { 0x1111111111111111, 0x2222222222222222 },\n+    { 0, 1 },\n+    { 0x1111111111111111, 0x2222222222222222 },\n+  },\n+  {\n+    { 0x1111111111111111, 0x2222222222222222 },\n+    { 0x0102030405060700, 0xffeeddccbbaa99f1 },\n+    { 0x1111111111111111, 0x2222222222222222 },\n+  },\n+  {\n+    { 0x1111111111111111, 0x2222222222222222 },\n+    { 1, 0 },\n+    { 0x2222222222222222, 0x1111111111111111 },\n+  },\n+  {\n+    { 0x1111111111111111, 0x2222222222222222 },\n+    { 0, 0 },\n+    { 0x1111111111111111, 0x1111111111111111 },\n+  },\n+  {\n+    { 0x1122334455667788, 0x99aabbccddeeff00 },\n+    { 1, 1 },\n+    { 0x99aabbccddeeff00, 0x99aabbccddeeff00 },\n+  },\n+  {\n+    { 0x1122334455667788, 0x99aabbccddeeff00 },\n+    { 1, 0 },\n+    { 0x99aabbccddeeff00, 0x1122334455667788 },\n+  },\n+};\n+\n+extern void abort(void);\n+\n+int main()\n+{\n+  int i;\n+\n+  for (i = 0; i < sizeof(tests)/sizeof(tests[0]); ++i)\n+    {\n+      V r = __builtin_shuffle(tests[i].in, tests[i].mask);\n+      if (__builtin_memcmp(&r, &tests[i].out, sizeof(V)) != 0)\n+\tabort();\n+    }\n+\n+  return 0;\n }\n \n+#endif /* SIZEOF_LONG_LONG */"}, {"sha": "fa036eb0093dfa722e42528aa21de40feb867c12", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-4.c", "status": "modified", "additions": 50, "deletions": 49, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-4.c?ref=9974107a906967f6f6b5fa5f47a3825a480111f4", "patch": "@@ -1,50 +1,51 @@\n-#define vector(elcount, type)  \\\n-__attribute__((vector_size((elcount)*sizeof(type)))) type\n-\n-#define vidx(type, vec, idx) (*(((type *) &(vec)) + idx))\n-\n-#define shuf2compare(type, count, vres, v0, v1, mask) \\\n-do { \\\n-    int __i; \\\n-    for (__i = 0; __i < count; __i++) { \\\n-        if (vidx(type, vres, __i) != ((vidx(type, mask, __i) < count) ? \\\n-                          vidx(type, v0, vidx(type, mask, __i)) :  \\\n-                          vidx(type, v1, (vidx(type, mask, __i) - count)))) \\\n-            __builtin_abort (); \\\n-        } \\\n-} while (0)\n-\n-\n-vector (8, short) __attribute__ ((noinline))\n-f (vector (8, short) x, vector (8, short) y, vector (8, short) mask) {\n-    return __builtin_shuffle (x, y, mask);\n-}\n-\n-\n-\n-int main (int argc, char *argv[]) {\n-    vector (8, short) v0 = {argc, 1,2,3,4,5,6,7};\n-    vector (8, short) v1 = {argc, 1,argc,3,4,5,argc,7};\n-    vector (8, short) v2;\n-\n-    //vector (8, short) mask = {1,2,5,4,3,6,7};\n-\n-    vector (8, short) mask0 = {0,2,3,1,4,5,6,7};\n-    vector (8, short) mask1 = {0,12,3,4,3,0,10,9};\n-    vector (8, short) mask2 = {0,8,1,9,2,10,3,11};\n-\n-    v2 = f (v0, v1,  mask0);\n-    shuf2compare (short, 8, v2, v0, v1, mask0);\n-\n-    v2 = f (v0, v1,  mask1);\n-    shuf2compare (short, 8, v2, v0, v1, mask1);\n-\n-    v2 = f (v0, v1,  mask2);\n-    shuf2compare (short, 8, v2, v0, v1, mask2);\n-\n-    v2 = f (mask0, mask0,  v0);\n-    shuf2compare (short, 8, v2, mask0, mask0, v0);\n-\n-    return 0;\n+typedef unsigned char V __attribute__((vector_size(16), may_alias));\n+\n+struct S\n+{\n+  V in, mask, out;\n+};\n+\n+struct S tests[] = {\n+  {\n+    { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, },\n+    { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+  },\n+  {\n+    { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+    { 0x10, 0x21, 0x32, 0x43, 0x54, 0x65, 0x76, 0x87,\n+      0x98, 0xa9, 0xba, 0xcb, 0xdc, 0xed, 0xfe, 0xff },\n+    { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+  },\n+  {\n+    { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+    { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 },\n+    { 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 },\n+  },\n+  {\n+    { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+    { 0, 2, 4, 6, 8, 10, 12, 14, 1, 3, 5, 7, 9, 11, 13, 15 },\n+    { 1, 3, 5, 7, 9, 11, 13, 15, 2, 4, 6, 8, 10, 12, 14, 16 },\n+  },\n+  {\n+    { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 }, \n+    { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 }, \n+  },\n+};\n+\n+extern void abort(void);\n+\n+int main()\n+{\n+  int i;\n+\n+  for (i = 0; i < sizeof(tests)/sizeof(tests[0]); ++i)\n+    {\n+      V r = __builtin_shuffle(tests[i].in, tests[i].mask);\n+      if (memcmp(&r, &tests[i].out, sizeof(V)) != 0)\n+\tabort();\n+    }\n+\n+  return 0;\n }\n-"}, {"sha": "f07025d567ea33069b7141b258a15ea8d41ceb76", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-5.c", "status": "modified", "additions": 56, "deletions": 57, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-5.c?ref=9974107a906967f6f6b5fa5f47a3825a480111f4", "patch": "@@ -1,65 +1,64 @@\n-/* Test that different type variants are compatible within\n-   vector shuffling.  */\n+#if __SIZEOF_INT__ == 4\n+typedef unsigned int V __attribute__((vector_size(16), may_alias));\n \n-#define vector(elcount, type)  \\\n-__attribute__((vector_size((elcount)*sizeof(type)))) type\n+struct S\n+{\n+  V in1, in2, mask, out;\n+};\n \n-#define shufcompare(count, vres, v0, mask) \\\n-do { \\\n-    int __i; \\\n-    for (__i = 0; __i < count; __i++) { \\\n-        if (vres[__i] != v0[mask[__i]]) \\\n-            __builtin_abort (); \\\n-    } \\\n-} while (0)\n+struct S tests[] = {\n+  {\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+    { 0x55555555, 0x66666666, 0x77777777, 0x88888888 },\n+    { 0, 1, 2, 3 },\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+  },\n+  {\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+    { 0x55555555, 0x66666666, 0x77777777, 0x88888888 },\n+    { 4, 5, 6, 7 },\n+    { 0x55555555, 0x66666666, 0x77777777, 0x88888888 },\n+  },\n+  {\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+    { 0x55555555, 0x66666666, 0x77777777, 0x88888888 },\n+    { 0, 4, 1, 5 },\n+    { 0x11111111, 0x55555555, 0x22222222, 0x66666666 },\n+  },\n+  {\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+    { 0x55555555, 0x66666666, 0x77777777, 0x88888888 },\n+    { 0, 7, 4, 3 },\n+    { 0x11111111, 0x88888888, 0x55555555, 0x44444444 },\n+  },\n+  {\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+    { 0x55555555, 0x66666666, 0x77777777, 0x88888888 },\n+    { 0, 0, 0, 0 },\n+    { 0x11111111, 0x11111111, 0x11111111, 0x11111111 },\n+  },\n+  {\n+    { 0x11111111, 0x22222222, 0x33333333, 0x44444444 },\n+    { 0x55555555, 0x66666666, 0x77777777, 0x88888888 },\n+    { 7, 7, 7, 7 },\n+    { 0x88888888, 0x88888888, 0x88888888, 0x88888888 },\n+  },\n+};\n \n-#define test_compat_mask(res, vec, mask) \\\n-  res = __builtin_shuffle (vec, mask); \\\n-  shufcompare(4, res, vec, mask); \\\n-  res = __builtin_shuffle (vec, c ## mask); \\\n-  shufcompare(4, res, vec, c ##  mask); \\\n-  res = __builtin_shuffle (vec, r ## mask); \\\n-  shufcompare(4, res, vec, r ##  mask); \\\n-  res = __builtin_shuffle (vec, d ## mask); \\\n-  shufcompare(4, res, vec, d ##  mask); \\\n-  res = __builtin_shuffle (vec, dc ## mask); \\\n-  shufcompare(4, res, vec, dc ##  mask); \\\n+extern void abort(void);\n \n-#define test_compat_vec(res, vec, mask) \\\n-  test_compat_mask (res, vec, mask); \\\n-  test_compat_mask (res, c ## vec, mask); \\\n-  test_compat_mask (res, r ## vec, mask); \\\n-  test_compat_mask (res, d ## vec, mask); \\\n-  test_compat_mask (res, dc ## vec, mask);\n+int main()\n+{\n+  int i;\n \n-#define test_compat(res, vec, mask) \\\n-  test_compat_vec (res, vec, mask); \\\n-  test_compat_vec (d ## res, vec, mask); \\\n-  test_compat_vec (r ## res, vec, mask);\n+  for (i = 0; i < sizeof(tests)/sizeof(tests[0]); ++i)\n+    {\n+      V r = __builtin_shuffle(tests[i].in1, tests[i].in2, tests[i].mask);\n+      if (__builtin_memcmp(&r, &tests[i].out, sizeof(V)) != 0)\n+\tabort();\n+    }\n \n-typedef vector (4, int) v4si;\n-typedef const vector (4, int) v4sicst;\n-\n-int main (int argc, char *argv[]) {\n-    vector (4, int) vec = {argc, 1,2,3};\n-    const vector (4, int) cvec = {argc, 1,2,3};\n-    register vector (4, int) rvec = {argc, 1,2,3};\n-    v4si dvec = {argc, 1,2,3};\n-    v4sicst dcvec = {argc, 1,2,3};\n-\n-    vector (4, int) res;\n-    v4si dres;\n-    register vector (4, int) rres;\n-\n-    vector (4, int) mask = {0,3,2,1};\n-    const vector (4, int) cmask = {0,3,2,1};\n-    register vector (4, int) rmask = {0,3,2,1};\n-    v4si dmask = {0,3,2,1};\n-    v4sicst dcmask = {0,3,2,1};\n-\n-    test_compat (res, vec, mask);\n-\n-    return 0;\n+  return 0;\n }\n \n-\n+#endif /* SIZEOF_INT */"}, {"sha": "63eaf96900e3618f9e728b2053ba840b65986ab6", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-6.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-6.c?ref=9974107a906967f6f6b5fa5f47a3825a480111f4", "patch": "@@ -0,0 +1,64 @@\n+#if __SIZEOF_SHORT__ == 2\n+typedef unsigned short V __attribute__((vector_size(16), may_alias));\n+\n+struct S\n+{\n+  V in1, in2, mask, out;\n+};\n+\n+struct S tests[] = {\n+  {\n+    { 0x1010, 0x2121, 0x3232, 0x4343, 0x5454, 0x6565, 0x7676, 0x8787 },\n+    { 0x9898, 0xa9a9, 0xbaba, 0xcbcb, 0xdcdc, 0xeded, 0xfefe, 0x0f0f },\n+    { 0, 1, 2, 3, 4, 5, 6, 7 },\n+    { 0x1010, 0x2121, 0x3232, 0x4343, 0x5454, 0x6565, 0x7676, 0x8787 },\n+  },\n+  {\n+    { 0x1010, 0x2121, 0x3232, 0x4343, 0x5454, 0x6565, 0x7676, 0x8787 },\n+    { 0x9898, 0xa9a9, 0xbaba, 0xcbcb, 0xdcdc, 0xeded, 0xfefe, 0x0f0f },\n+    { 8, 9, 10, 11, 12, 13, 14, 15 },\n+    { 0x9898, 0xa9a9, 0xbaba, 0xcbcb, 0xdcdc, 0xeded, 0xfefe, 0x0f0f },\n+  },\n+  {\n+    { 0x1010, 0x2121, 0x3232, 0x4343, 0x5454, 0x6565, 0x7676, 0x8787 },\n+    { 0x9898, 0xa9a9, 0xbaba, 0xcbcb, 0xdcdc, 0xeded, 0xfefe, 0x0f0f },\n+    { 0, 8, 1, 9, 2, 10, 3, 11 },\n+    { 0x1010, 0x9898, 0x2121, 0xa9a9, 0x3232, 0xbaba, 0x4343, 0xcbcb },\n+  },\n+  {\n+    { 0x1010, 0x2121, 0x3232, 0x4343, 0x5454, 0x6565, 0x7676, 0x8787 },\n+    { 0x9898, 0xa9a9, 0xbaba, 0xcbcb, 0xdcdc, 0xeded, 0xfefe, 0x0f0f },\n+    { 0, 15, 4, 11, 12, 3, 7, 8 },\n+    { 0x1010, 0x0f0f, 0x5454, 0xcbcb, 0xdcdc, 0x4343, 0x8787, 0x9898 },\n+  },\n+  {\n+    { 0x1010, 0x2121, 0x3232, 0x4343, 0x5454, 0x6565, 0x7676, 0x8787 },\n+    { 0x9898, 0xa9a9, 0xbaba, 0xcbcb, 0xdcdc, 0xeded, 0xfefe, 0x0f0f },\n+    { 0, 0, 0, 0, 0, 0, 0, 0 },\n+    { 0x1010, 0x1010, 0x1010, 0x1010, 0x1010, 0x1010, 0x1010, 0x1010 },\n+  },\n+  {\n+    { 0x1010, 0x2121, 0x3232, 0x4343, 0x5454, 0x6565, 0x7676, 0x8787 },\n+    { 0x9898, 0xa9a9, 0xbaba, 0xcbcb, 0xdcdc, 0xeded, 0xfefe, 0x0f0f },\n+    { 14, 14, 14, 14, 14, 14, 14, 14 },\n+    { 0xfefe, 0xfefe, 0xfefe, 0xfefe, 0xfefe, 0xfefe, 0xfefe, 0xfefe },\n+  },\n+};\n+\n+extern void abort(void);\n+\n+int main()\n+{\n+  int i;\n+\n+  for (i = 0; i < sizeof(tests)/sizeof(tests[0]); ++i)\n+    {\n+      V r = __builtin_shuffle(tests[i].in1, tests[i].in2, tests[i].mask);\n+      if (__builtin_memcmp(&r, &tests[i].out, sizeof(V)) != 0)\n+\tabort();\n+    }\n+\n+  return 0;\n+}\n+\n+#endif /* SIZEOF_SHORT */"}, {"sha": "3336c6f7bd590a4cfe6412ca14e122a66ded9591", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-7.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-7.c?ref=9974107a906967f6f6b5fa5f47a3825a480111f4", "patch": "@@ -0,0 +1,70 @@\n+#if __SIZEOF_LONG_LONG__ == 8\n+typedef unsigned long long V __attribute__((vector_size(16), may_alias));\n+\n+struct S\n+{\n+  V in1, in2, mask, out;\n+};\n+\n+struct S tests[] = {\n+  {\n+    { 0x1112131415161718, 0x2122232425262728 },\n+    { 0x3132333435363738, 0x4142434445464748 },\n+    { 0, 1 },\n+    { 0x1112131415161718, 0x2122232425262728 },\n+  },\n+  {\n+    { 0x1112131415161718, 0x2122232425262728 },\n+    { 0x3132333435363738, 0x4142434445464748 },\n+    { 2, 3 },\n+    { 0x3132333435363738, 0x4142434445464748 },\n+  },\n+  {\n+    { 0x1112131415161718, 0x2122232425262728 },\n+    { 0x3132333435363738, 0x4142434445464748 },\n+    { 0, 2 },\n+    { 0x1112131415161718, 0x3132333435363738 },\n+  },\n+  {\n+    { 0x1112131415161718, 0x2122232425262728 },\n+    { 0x3132333435363738, 0x4142434445464748 },\n+    { 2, 1 },\n+    { 0x3132333435363738, 0x2122232425262728 },\n+  },\n+  {\n+    { 0x1112131415161718, 0x2122232425262728 },\n+    { 0x3132333435363738, 0x4142434445464748 },\n+    { 3, 0 },\n+    { 0x4142434445464748, 0x1112131415161718 },\n+  },\n+  {\n+    { 0x1112131415161718, 0x2122232425262728 },\n+    { 0x3132333435363738, 0x4142434445464748 },\n+    { 0, 0 },\n+    { 0x1112131415161718, 0x1112131415161718 },\n+  },\n+  {\n+    { 0x1112131415161718, 0x2122232425262728 },\n+    { 0x3132333435363738, 0x4142434445464748 },\n+    { 3, 3 },\n+    { 0x4142434445464748, 0x4142434445464748 },\n+  },\n+};\n+\n+extern void abort(void);\n+\n+int main()\n+{\n+  int i;\n+\n+  for (i = 0; i < sizeof(tests)/sizeof(tests[0]); ++i)\n+    {\n+      V r = __builtin_shuffle(tests[i].in1, tests[i].in2, tests[i].mask);\n+      if (__builtin_memcmp(&r, &tests[i].out, sizeof(V)) != 0)\n+\tabort();\n+    }\n+\n+  return 0;\n+}\n+\n+#endif /* SIZEOF_LONG_LONG */"}, {"sha": "f98e6ec99e24a910bb04baacfb0135c89d78dc6f", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-8.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9974107a906967f6f6b5fa5f47a3825a480111f4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-8.c?ref=9974107a906967f6f6b5fa5f47a3825a480111f4", "patch": "@@ -0,0 +1,55 @@\n+typedef unsigned char V __attribute__((vector_size(16), may_alias));\n+\n+struct S\n+{\n+  V in1, in2, mask, out;\n+};\n+\n+struct S tests[] = {\n+  {\n+    { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },\n+    { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 },\n+    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },\n+    { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },\n+  },\n+  {\n+    { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },\n+    { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 },\n+    { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 },\n+    { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 },\n+  },\n+  {\n+    { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },\n+    { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 },\n+    { 7, 6, 5, 4, 16, 17, 18, 19, 31, 30, 29, 28, 3, 2, 1, 0 },\n+    { 17, 16, 15, 14, 30, 31, 32, 33, 45, 44, 43, 42, 13, 12, 11, 10 },\n+  },\n+  {\n+    { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },\n+    { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 },\n+    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },\n+    { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },\n+  },\n+  {\n+    { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },\n+    { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 },\n+    { 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63 },\n+    { 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45 },\n+  },\n+};\n+\n+extern void abort(void);\n+\n+int main()\n+{\n+  int i;\n+\n+  for (i = 0; i < sizeof(tests)/sizeof(tests[0]); ++i)\n+    {\n+      V r = __builtin_shuffle(tests[i].in1, tests[i].in2, tests[i].mask);\n+      if (__builtin_memcmp(&r, &tests[i].out, sizeof(V)) != 0)\n+\tabort();\n+    }\n+\n+  return 0;\n+}"}]}