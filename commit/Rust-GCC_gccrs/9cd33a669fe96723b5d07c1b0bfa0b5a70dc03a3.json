{"sha": "9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNkMzNhNjY5ZmU5NjcyM2I1ZDA3YzFiMGJmYTBiNWE3MGRjMDNhMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-15T13:06:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-15T13:06:43Z"}, "message": "[multiple changes]\n\n2009-07-15  Robert Dewar  <dewar@adacore.com>\n\n\t* par_sco.adb (Traverse_Declarations_Or_Statements): Add processing for\n\tN_Label. Remove SCO table entry for entry point (not used).\n\n\t* par_sco.ads: Remove SCO entry point type (not used)\n\n\t* switch.adb: Minor code clean up.\n\n2009-07-15  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_dbug.ads (Base Record Types): Document enhanced encoding.\n\n2009-07-15  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnatls.adb: Minor reformatting\n\n\t* gnatcmd.adb: Minor code reorganization\n\n2009-07-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb (Component_May_Be_Bit_Aligned): Use underlying type to\n\tdetermine whether a component of a private type has a composite type.\n\nFrom-SVN: r149688", "tree": {"sha": "4820fcf687061774908146b6e2eb0f71c1669d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4820fcf687061774908146b6e2eb0f71c1669d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/comments", "author": null, "committer": null, "parents": [{"sha": "6eab5a95753e09c22158046f43129d6a1c194af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eab5a95753e09c22158046f43129d6a1c194af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eab5a95753e09c22158046f43129d6a1c194af5"}], "stats": {"total": 120, "additions": 68, "deletions": 52}, "files": [{"sha": "13cd1785a1b1a91809cabef5e840bf4a64c4e2f2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "patch": "@@ -1,3 +1,27 @@\n+2009-07-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par_sco.adb (Traverse_Declarations_Or_Statements): Add processing for\n+\tN_Label. Remove SCO table entry for entry point (not used).\n+\n+\t* par_sco.ads: Remove SCO entry point type (not used)\n+\n+\t* switch.adb: Minor code clean up.\n+\n+2009-07-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_dbug.ads (Base Record Types): Document enhanced encoding.\n+\n+2009-07-15  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnatls.adb: Minor reformatting\n+\n+\t* gnatcmd.adb: Minor code reorganization\n+\n+2009-07-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Component_May_Be_Bit_Aligned): Use underlying type to\n+\tdetermine whether a component of a private type has a composite type.\n+\n 2009-07-15  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch10.adb: Minor reformatting throughout"}, {"sha": "842456e714e3a413c1a3e018180b730e066d5da5", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "patch": "@@ -844,9 +844,11 @@ package Exp_Dbug is\n \n       --  Specifically, if this name is x, then we produce a record type named\n       --  x___XVS consisting of one field. The name of this field is that of\n-      --  the actual type being encoded, which we'll call y (the type of this\n-      --  single field is arbitrary). Both x and y may have corresponding\n-      --  ___XVE types.\n+      --  the actual type being encoded, which we'll call y. The type of this\n+      --  single field can be either an arbitrary non-reference type, e.g. an\n+      --  integer type, or a reference type; in the latter case, the referenced\n+      --  type is also the actual type being encoded y. Both x and y may have\n+      --  corresponding ___XVE types.\n \n       --  The size of the objects typed as x should be obtained from the\n       --  structure of x (and x___XVE, if applicable) as for ordinary types"}, {"sha": "1031050cee756492f822a0c17142d50cbed764f3", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "patch": "@@ -913,6 +913,7 @@ package body Exp_Util is\n    ----------------------------------\n \n    function Component_May_Be_Bit_Aligned (Comp : Entity_Id) return Boolean is\n+      UT : constant Entity_Id := Underlying_Type (Etype (Comp));\n    begin\n       --  If no component clause, then everything is fine, since the back end\n       --  never bit-misaligns by default, even if there is a pragma Packed for\n@@ -924,8 +925,8 @@ package body Exp_Util is\n \n       --  It is only array and record types that cause trouble\n \n-      if not Is_Record_Type (Etype (Comp))\n-        and then not Is_Array_Type (Etype (Comp))\n+      if not Is_Record_Type (UT)\n+        and then not Is_Array_Type (UT)\n       then\n          return False;\n \n@@ -934,8 +935,8 @@ package body Exp_Util is\n       --  back end can handle these cases correctly.\n \n       elsif Esize (Comp) <= 64\n-        and then (Is_Record_Type (Etype (Comp))\n-                   or else Is_Bit_Packed_Array (Etype (Comp)))\n+        and then (Is_Record_Type (UT)\n+                   or else Is_Bit_Packed_Array (UT))\n       then\n          return False;\n "}, {"sha": "f0e7e7494cb7016a1de0df0022b626c9a1b8194f", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "patch": "@@ -603,7 +603,7 @@ procedure GNATCmd is\n       if Project = No_Project then\n          return False;\n \n-      elsif All_Projects or Project = Root_Project then\n+      elsif All_Projects or else Project = Root_Project then\n          return True;\n \n       elsif The_Command = Metric then\n@@ -2074,7 +2074,7 @@ begin\n             Process_Link;\n          end if;\n \n-         if The_Command = Link or The_Command = Bind then\n+         if The_Command = Link or else The_Command = Bind then\n \n             --  For files that are specified as relative paths with directory\n             --  information, we convert them to absolute paths, with parent"}, {"sha": "1b7666f28388a3d84c2ae1c465b1cf16461772a6", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -185,19 +185,19 @@ procedure Gnatls is\n    function Image (Restriction : Restriction_Id) return String;\n    --  Returns the capitalized image of Restriction\n \n-   ---------------------------------------\n-   -- GLADE specific output subprograms --\n-   ---------------------------------------\n+   ------------------------------------------\n+   -- GNATDIST specific output subprograms --\n+   ------------------------------------------\n \n-   package GLADE is\n+   package GNATDIST is\n \n-      --  Any modification to this subunit requires a synchronization\n-      --  with the GLADE implementation.\n+      --  Any modification to this subunit requires a synchronization with\n+      --  GNATDIST sources.\n \n       procedure Output_ALI    (A : ALI_Id);\n       procedure Output_No_ALI (Afile : File_Name_Type);\n \n-   end GLADE;\n+   end GNATDIST;\n \n    -----------------\n    -- Add_Lib_Dir --\n@@ -347,7 +347,7 @@ procedure Gnatls is\n       Source_End := Source_Start - 1;\n \n       if Print_Source then\n-         Source_End   := Source_Start + Max_Src_Length;\n+         Source_End := Source_Start + Max_Src_Length;\n       end if;\n    end Find_General_Layout;\n \n@@ -392,11 +392,11 @@ procedure Gnatls is\n       end if;\n    end Find_Status;\n \n-   -----------\n-   -- GLADE --\n-   -----------\n+   --------------\n+   -- GNATDIST --\n+   --------------\n \n-   package body GLADE is\n+   package body GNATDIST is\n \n       N_Flags   : Natural;\n       N_Indents : Natural := 0;\n@@ -610,7 +610,7 @@ procedure Gnatls is\n \n             --  There is no full source name. This occurs for instance when a\n             --  withed unit has a spec file but no body file. This situation\n-            --  is not a problem for GLADE since the unit may be located on\n+            --  is not a problem for GNATDIST since the unit may be located on\n             --  a partition we do not want to build. However, we need to\n             --  locate the spec file and to find its full source name.\n             --  Replace the body file name with the spec file name used to\n@@ -794,7 +794,7 @@ procedure Gnatls is\n          N_Indents := N_Indents - 1;\n       end Output_With;\n \n-   end GLADE;\n+   end GNATDIST;\n \n    -----------\n    -- Image --\n@@ -1754,7 +1754,7 @@ begin\n \n       if Ali_File = No_File then\n          if Very_Verbose_Mode then\n-            GLADE.Output_No_ALI (Lib_File_Name (Main_File));\n+            GNATDIST.Output_No_ALI (Lib_File_Name (Main_File));\n \n          else\n             Write_Str (\"Can't find library info for \");\n@@ -1791,7 +1791,7 @@ begin\n \n    if Very_Verbose_Mode then\n       for A in ALIs.First .. ALIs.Last loop\n-         GLADE.Output_ALI (A);\n+         GNATDIST.Output_ALI (A);\n       end loop;\n \n       return;"}, {"sha": "663959de64df94e665381e89aedadf6dd244fec4", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "patch": "@@ -71,13 +71,6 @@ package body Par_SCO is\n    --      To   = ending sloc\n    --      Last = unused\n \n-   --    Entry\n-   --      C1   = 'Y'\n-   --      C2   = ' '\n-   --      From = starting sloc\n-   --      To   = ending sloc\n-   --      Last = unused\n-\n    --    Exit\n    --      C1   = 'T'\n    --      C2   = ' '\n@@ -659,9 +652,9 @@ package body Par_SCO is\n \n                case T.C1 is\n \n-                  --  Statements, entry, exit\n+                  --  Statements, exit\n \n-                  when 'S' | 'Y' | 'T' =>\n+                  when 'S' | 'T' =>\n                      Write_Info_Char (' ');\n                      Output_Range (T.From, T.To);\n \n@@ -907,6 +900,11 @@ package body Par_SCO is\n                   Sloc_Range (N, From, To);\n                   Set_Table_Entry ('T', ' ', From, To, False);\n \n+               --  Label (breaks statement sequence)\n+\n+               when N_Label =>\n+                  Set_Statement_Entry;\n+\n                --  Block statement\n \n                when N_Block_Statement =>"}, {"sha": "a977a11daa14333309219c321c34a1f62ffd3dd1", "filename": "gcc/ada/par_sco.ads", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fpar_sco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fpar_sco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.ads?ref=9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "patch": "@@ -98,15 +98,6 @@ package Par_SCO is\n \n    --      CS sloc-range\n \n-   --  Entry points\n-\n-   --    An entry point is a statement to which control may be passed other\n-   --    than by falling into the statement for above. Examples are the first\n-   --    statement of the body of a loop, and the statement following a label.\n-   --    The form of an entry point in the ALI file is:\n-\n-   --      CY sloc-range\n-\n    --  Exit points\n \n    --    An exit point is a statement that causes transfer of control. Examples"}, {"sha": "0c761b6d34ea5d45b478d4468f38bcf5c4304993", "filename": "gcc/ada/switch.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fswitch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3/gcc%2Fada%2Fswitch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch.adb?ref=9cd33a669fe96723b5d07c1b0bfa0b5a70dc03a3", "patch": "@@ -148,10 +148,10 @@ package body Switch is\n    begin\n       return Is_Switch (Switch_Chars)\n         and then\n-          (Switch_Chars (First .. Last) = \"-param\"        or else\n-           Switch_Chars (First .. Last) = \"dumpbase\"      or else\n-           Switch_Chars (First .. Last) = \"auxbase-strip\" or else\n-           Switch_Chars (First .. Last) = \"auxbase\");\n+          (Switch_Chars (First .. Last) = \"-param\"\n+           or else Switch_Chars (First .. Last) = \"dumpbase\"\n+           or else Switch_Chars (First .. Last) = \"auxbase-strip\"\n+           or else Switch_Chars (First .. Last) = \"auxbase\");\n    end Is_Internal_GCC_Switch;\n \n    ---------------\n@@ -169,15 +169,15 @@ package body Switch is\n    -----------------\n \n    function Switch_Last (Switch_Chars : String) return Natural is\n-      Last : constant Natural := Switch_Chars'Last;\n+      Last  : Natural := Switch_Chars'Last;\n    begin\n       if Last >= Switch_Chars'First\n         and then Switch_Chars (Last) = ASCII.NUL\n       then\n-         return Last - 1;\n-      else\n-         return Last;\n+         Last := Last - 1;\n       end if;\n+\n+      return Last;\n    end Switch_Last;\n \n    -----------------"}]}