{"sha": "84df082b3840bad65a6985f079e1b73f82cff90a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRkZjA4MmIzODQwYmFkNjVhNjk4NWYwNzllMWI3M2Y4MmNmZjkwYQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-29T08:06:21Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-29T08:06:21Z"}, "message": "cp-tree.h (UPT_TEMPLATE): Remove.\n\n\t* cp-tree.h (UPT_TEMPLATE): Remove.\n\t(UPT_PARMS): Likewise.\n\t(DECL_NEEDED_P): New macro.\n\t* decl2.c (finish_vtable_vardecl): Use it.\n\t(finish_objects): Don't crash with -fsyntax-only.\n\t(finish_file): Use DECL_NEEDED_P.  Don't prune vtables when\n\t-fsyntax-only.\n\t* pt.c (tsubst_friend_function): Remove FIXME that talks about\n\tobstacks.\n\t(tsubst_expr): Correct handling of function try-blocks.\n\t* semantics.c: Include flags.h.\n\t(expand_body): Don't do RTL generation if -fsyntax-only.\n\t* Makefile.in (semantics.o): Depends on flags.h.\n\nFrom-SVN: r29705", "tree": {"sha": "9fa287cf98288b0c4adce698783d2cc50a491ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fa287cf98288b0c4adce698783d2cc50a491ba6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84df082b3840bad65a6985f079e1b73f82cff90a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84df082b3840bad65a6985f079e1b73f82cff90a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84df082b3840bad65a6985f079e1b73f82cff90a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84df082b3840bad65a6985f079e1b73f82cff90a/comments", "author": null, "committer": null, "parents": [{"sha": "ddb34a29558e527d5822dbe2335a06884fb31d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb34a29558e527d5822dbe2335a06884fb31d84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb34a29558e527d5822dbe2335a06884fb31d84"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "784939d434e001820809e9d8c6c9df1ff619c82d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=84df082b3840bad65a6985f079e1b73f82cff90a", "patch": "@@ -1,3 +1,19 @@\n+1999-09-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (UPT_TEMPLATE): Remove.\n+\t(UPT_PARMS): Likewise.\n+\t(DECL_NEEDED_P): New macro.\n+\t* decl2.c (finish_vtable_vardecl): Use it.\n+\t(finish_objects): Don't crash with -fsyntax-only.\n+\t(finish_file): Use DECL_NEEDED_P.  Don't prune vtables when\n+\t-fsyntax-only.\n+\t* pt.c (tsubst_friend_function): Remove FIXME that talks about\n+\tobstacks.\n+\t(tsubst_expr): Correct handling of function try-blocks.\n+\t* semantics.c: Include flags.h.\n+\t(expand_body): Don't do RTL generation if -fsyntax-only.\n+\t* Makefile.in (semantics.o): Depends on flags.h.\n+\t\n 1999-09-28  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n         * pt.c (most_general_template): Adjust declaration."}, {"sha": "d731a5808cafa22db55a6c8e26a7e9004751158d", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=84df082b3840bad65a6985f079e1b73f82cff90a", "patch": "@@ -294,7 +294,8 @@ errfn.o : errfn.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h \\\n repo.o : repo.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h \\\n   $(srcdir)/../toplev.h $(srcdir)/../ggc.h\n semantics.o: semantics.c $(CONFIG_H) $(CXX_TREE_H) lex.h \\\n-  $(srcdir)/../except.h $(srcdir)/../system.h $(srcdir)/../toplev.h\n+  $(srcdir)/../except.h $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n+  $(srcdir)/../flags.h\n dump.o: dump.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h\n \n #\f"}, {"sha": "7920fdf5051fffc899acdb56285c3ae4cae9d14b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=84df082b3840bad65a6985f079e1b73f82cff90a", "patch": "@@ -2494,9 +2494,13 @@ extern int flag_new_for_scope;\n \n #define THUNK_DELTA(DECL) ((DECL)->decl.frame_size.i)\n \n-/* ...and for unexpanded-parameterized-type nodes.  */\n-#define UPT_TEMPLATE(NODE)      TREE_PURPOSE(TYPE_VALUES(NODE))\n-#define UPT_PARMS(NODE)         TREE_VALUE(TYPE_VALUES(NODE))\n+/* DECL_NEEDED_P holds of a declaration when we need to emit its\n+   definition.  This is true when the back-end tells us that\n+   the symbol has been referenced in the generated code.  If, however,\n+   we are not generating code, then it is also true when a symbol has\n+   just been used somewhere, even if it's not really needed.  */\n+#define DECL_NEEDED_P(DECL)\t\t\t\t  \\\n+  (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME ((DECL)))) \\\n \n /* An un-parsed default argument looks like an identifier.  */\n #define DEFARG_LENGTH(NODE)  (DEFAULT_ARG_CHECK(NODE)->identifier.length)"}, {"sha": "19868c300e5350baa80c745ba3610f53d3299d51", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=84df082b3840bad65a6985f079e1b73f82cff90a", "patch": "@@ -2556,7 +2556,7 @@ finish_vtable_vardecl (t, data)\n \n   if (! DECL_EXTERNAL (vars)\n       && (DECL_INTERFACE_KNOWN (vars) \n-\t  || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (vars))\n+\t  || DECL_NEEDED_P (vars)\n \t  || (hack_decl_function_context (vars) && TREE_USED (vars)))\n       && ! TREE_ASM_WRITTEN (vars))\n     {\n@@ -2600,9 +2600,14 @@ finish_vtable_vardecl (t, data)\n       if (flag_vtable_gc)\n \toutput_vtable_inherit (vars);\n \n+      /* Because we're only doing syntax-checking, we'll never end up\n+\t actually marking the variable as written.  */\n+      if (flag_syntax_only)\n+\tTREE_ASM_WRITTEN (vars) = 1;\n+\n       return 1;\n     }\n-  else if (! TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (vars)))\n+  else if (!DECL_NEEDED_P (vars))\n     /* We don't know what to do with this one yet.  */\n     return 0;\n \n@@ -2827,6 +2832,12 @@ finish_objects (method_type, initp, body)\n   fn = finish_function (lineno, 0);\n   expand_body (fn);\n \n+  /* When only doing semantic analysis, and no RTL generation, we\n+     can't call functions that directly emit assembly code; there is\n+     no assembly file in which to put the code.  */\n+  if (flag_syntax_only)\n+    return;\n+\n   fnname = XSTR (XEXP (DECL_RTL (fn), 0), 0);\n   if (initp == DEFAULT_INIT_PRIORITY)\n     {\n@@ -2835,7 +2846,6 @@ finish_objects (method_type, initp, body)\n       else\n \tassemble_destructor (fnname);\n     }\n-\n #if defined (ASM_OUTPUT_SECTION_NAME) && defined (ASM_OUTPUT_CONSTRUCTOR)\n   /* If we're using init priority we can't use assemble_*tor, but on ELF\n      targets we can stick the references into named sections for GNU ld\n@@ -3554,8 +3564,7 @@ finish_file ()\n       \n \t  if (DECL_NOT_REALLY_EXTERN (decl)\n \t      && DECL_INITIAL (decl)\n-\t      && (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n-\t\t  || !DECL_COMDAT (decl)))\n+\t      && (DECL_NEEDED_P (decl) || !DECL_COMDAT (decl)))\n \t    DECL_EXTERNAL (decl) = 0;\n \t}\n \n@@ -3603,8 +3612,10 @@ finish_file ()\n \n   /* Now delete from the chain of variables all virtual function tables.\n      We output them all ourselves, because each will be treated\n-     specially.  */\n-  walk_globals (vtable_decl_p, prune_vtable_vardecl, /*data=*/0);\n+     specially.  We don't do this if we're just doing semantic\n+     analysis, and not code-generation.  */\n+  if (!flag_syntax_only)\n+    walk_globals (vtable_decl_p, prune_vtable_vardecl, /*data=*/0);\n \n   /* Now, issue warnings about static, but not defined, functions,\n      etc., and emit debugging information.  */"}, {"sha": "dc5beabe89bd2c03a03431e1bde4ed4925548783", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=84df082b3840bad65a6985f079e1b73f82cff90a", "patch": "@@ -4549,8 +4549,6 @@ tsubst_friend_function (decl, args)\n \t\t\t\t    tsubst (DECL_TI_ARGS (decl),\n \t\t\t\t\t    args, /*complain=*/1, \n \t\t\t\t\t    NULL_TREE));\n-      /* FIXME: The decl we create via the next tsubst could be\n-\t created on a temporary obstack.  */\n       new_friend = tsubst (decl, args, /*complain=*/1, NULL_TREE);\n       tmpl = determine_specialization (template_id, new_friend,\n \t\t\t\t       &new_args, \n@@ -7466,7 +7464,10 @@ tsubst_expr (t, args, complain, in_decl)\n \t  handler = TRY_HANDLERS (t);\n \t  for (; handler; handler = TREE_CHAIN (handler))\n \t    tsubst_expr (handler, args, complain, in_decl);\n-\t  finish_handler_sequence (stmt);\n+\t  if (FN_TRY_BLOCK_P (t))\n+\t    finish_function_handler_sequence (stmt);\n+\t  else\n+\t    finish_handler_sequence (stmt);\n \t}\n       break;\n       "}, {"sha": "8300f6fd93fa2dbbfbac6375fd78b35a951ec79e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84df082b3840bad65a6985f079e1b73f82cff90a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=84df082b3840bad65a6985f079e1b73f82cff90a", "patch": "@@ -31,6 +31,7 @@\n #include \"except.h\"\n #include \"lex.h\"\n #include \"toplev.h\"\n+#include \"flags.h\"\n \n /* There routines provide a modular interface to perform many parsing\n    operations.  They may therefore be used during actual parsing, or\n@@ -2488,8 +2489,13 @@ expand_body (fn)\n \t  && uses_template_parms (DECL_TI_ARGS (fn))))\n     return;\n \n+  /* There's no reason to do any of the work here if we're only doing\n+     semantic analysis; this code just generates RTL.  */\n+  if (flag_syntax_only)\n+    return;\n+\n   /* Save the current file name and line number.  When we expand the\n-     body of the funciton, we'll set LINENO and INPUT_FILENAME so that\n+     body of the function, we'll set LINENO and INPUT_FILENAME so that\n      error-mesages come out in the right places.  */\n   saved_lineno = lineno;\n   saved_input_filename = input_filename;"}]}