{"sha": "313d38e359bfcd8b56c946233294061c66ae21dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEzZDM4ZTM1OWJmY2Q4YjU2Yzk0NjIzMzI5NDA2MWM2NmFlMjFkYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-13T09:48:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-13T09:48:35Z"}, "message": "gensupport.h (add_implicit_parallel): Declare.\n\ngcc/\n\t* gensupport.h (add_implicit_parallel): Declare.\n\t* genrecog.c (add_implicit_parallel): Move to...\n\t* gensupport.c (add_implicit_parallel): ...here.\n\t(process_one_cond_exec): Use it.\n\t* genemit.c (gen_insn): Likewise.\n\nFrom-SVN: r224454", "tree": {"sha": "73afaadfb9d218323d01fe93da665d1a87626ac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73afaadfb9d218323d01fe93da665d1a87626ac0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/313d38e359bfcd8b56c946233294061c66ae21dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313d38e359bfcd8b56c946233294061c66ae21dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/313d38e359bfcd8b56c946233294061c66ae21dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313d38e359bfcd8b56c946233294061c66ae21dc/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6860be9c89b7025c938f7a53c209478d3d84ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6860be9c89b7025c938f7a53c209478d3d84ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6860be9c89b7025c938f7a53c209478d3d84ca9"}], "stats": {"total": 104, "additions": 41, "deletions": 63}, "files": [{"sha": "903cc3f9efe9097be77dcf695631174ac30c9f8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313d38e359bfcd8b56c946233294061c66ae21dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313d38e359bfcd8b56c946233294061c66ae21dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=313d38e359bfcd8b56c946233294061c66ae21dc", "patch": "@@ -1,3 +1,11 @@\n+2015-06-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gensupport.h (add_implicit_parallel): Declare.\n+\t* genrecog.c (add_implicit_parallel): Move to...\n+\t* gensupport.c (add_implicit_parallel): ...here.\n+\t(process_one_cond_exec): Use it.\n+\t* genemit.c (gen_insn): Likewise.\n+\n 2015-06-13  Iain Sandoe  <iain@codesourcery.com>\n \n \tPR bootstrap/66448"}, {"sha": "b6df49cd959f3553daffb8f84d62bcba005a8d86", "filename": "gcc/genemit.c", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313d38e359bfcd8b56c946233294061c66ae21dc/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313d38e359bfcd8b56c946233294061c66ae21dc/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=313d38e359bfcd8b56c946233294061c66ae21dc", "patch": "@@ -378,27 +378,15 @@ gen_insn (rtx insn, int lineno)\n \n   /* Output code to construct and return the rtl for the instruction body.  */\n \n-  if (XVECLEN (insn, 1) == 1)\n-    {\n-      printf (\"  return \");\n-      gen_exp (XVECEXP (insn, 1, 0), DEFINE_INSN, NULL);\n-      printf (\";\\n}\\n\\n\");\n-    }\n-  else\n-    {\n-      char *used = XCNEWVEC (char, stats.num_generator_args);\n-\n-      printf (\"  return gen_rtx_PARALLEL (VOIDmode, gen_rtvec (%d\",\n-\t      XVECLEN (insn, 1));\n-\n-      for (i = 0; i < XVECLEN (insn, 1); i++)\n-\t{\n-\t  printf (\",\\n\\t\\t\");\n-\t  gen_exp (XVECEXP (insn, 1, i), DEFINE_INSN, used);\n-\t}\n-      printf (\"));\\n}\\n\\n\");\n-      XDELETEVEC (used);\n-    }\n+  rtx pattern = add_implicit_parallel (XVEC (insn, 1));\n+  /* ??? This is the traditional behavior, but seems suspect.  */\n+  char *used = (XVECLEN (insn, 1) == 1\n+\t\t? NULL\n+\t\t: XCNEWVEC (char, stats.num_generator_args));\n+  printf (\"  return \");\n+  gen_exp (pattern, DEFINE_INSN, used);\n+  printf (\";\\n}\\n\\n\");\n+  XDELETEVEC (used);\n }\n \f\n /* Generate the `gen_...' function for a DEFINE_EXPAND.  */"}, {"sha": "d8432283915aba9eddb8713301c288ecdf473bd5", "filename": "gcc/genrecog.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313d38e359bfcd8b56c946233294061c66ae21dc/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313d38e359bfcd8b56c946233294061c66ae21dc/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=313d38e359bfcd8b56c946233294061c66ae21dc", "patch": "@@ -5185,22 +5185,6 @@ print_subroutine_group (output_state *os, routine_type type, state *root)\n   print_subroutine (os, root, 0);\n }\n \n-/* Return the rtx pattern specified by the list of rtxes in a\n-   define_insn or define_split.  */\n-\n-static rtx\n-add_implicit_parallel (rtvec vec)\n-{\n-  if (GET_NUM_ELEM (vec) == 1)\n-    return RTVEC_ELT (vec, 0);\n-  else\n-    {\n-      rtx pattern = rtx_alloc (PARALLEL);\n-      XVEC (pattern, 0) = vec;\n-      return pattern;\n-    }\n-}\n-\n /* Return the rtx pattern for the list of rtxes in a define_peephole2.  */\n \n static rtx"}, {"sha": "dc73cf9ae17b73dc508879df6cf9edb603b89d00", "filename": "gcc/gensupport.c", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313d38e359bfcd8b56c946233294061c66ae21dc/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313d38e359bfcd8b56c946233294061c66ae21dc/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=313d38e359bfcd8b56c946233294061c66ae21dc", "patch": "@@ -142,6 +142,22 @@ gen_rtx_CONST_INT (machine_mode ARG_UNUSED (mode),\n   XWINT (rt, 0) = arg;\n   return rt;\n }\n+\n+/* Return the rtx pattern specified by the list of rtxes in a\n+   define_insn or define_split.  */\n+\n+rtx\n+add_implicit_parallel (rtvec vec)\n+{\n+  if (GET_NUM_ELEM (vec) == 1)\n+    return RTVEC_ELT (vec, 0);\n+  else\n+    {\n+      rtx pattern = rtx_alloc (PARALLEL);\n+      XVEC (pattern, 0) = vec;\n+      return pattern;\n+    }\n+}\n \f\n /* Predicate handling.\n \n@@ -1702,19 +1718,9 @@ process_one_cond_exec (struct queue_elem *ce_elem)\n       XSTR (insn, 0) = new_name;\n       pattern = rtx_alloc (COND_EXEC);\n       XEXP (pattern, 0) = pred;\n-      if (XVECLEN (insn, 1) == 1)\n-\t{\n-\t  XEXP (pattern, 1) = XVECEXP (insn, 1, 0);\n-\t  XVECEXP (insn, 1, 0) = pattern;\n-\t  PUT_NUM_ELEM (XVEC (insn, 1), 1);\n-\t}\n-      else\n-\t{\n-\t  XEXP (pattern, 1) = rtx_alloc (PARALLEL);\n-\t  XVEC (XEXP (pattern, 1), 0) = XVEC (insn, 1);\n-\t  XVEC (insn, 1) = rtvec_alloc (1);\n-\t  XVECEXP (insn, 1, 0) = pattern;\n-\t}\n+      XEXP (pattern, 1) = add_implicit_parallel (XVEC (insn, 1));\n+      XVEC (insn, 1) = rtvec_alloc (1);\n+      XVECEXP (insn, 1, 0) = pattern;\n \n        if (XVEC (ce_elem->data, 3) != NULL)\n \t{\n@@ -1759,19 +1765,10 @@ process_one_cond_exec (struct queue_elem *ce_elem)\n       /* Predicate the pattern matched by the split.  */\n       pattern = rtx_alloc (COND_EXEC);\n       XEXP (pattern, 0) = pred;\n-      if (XVECLEN (split, 0) == 1)\n-\t{\n-\t  XEXP (pattern, 1) = XVECEXP (split, 0, 0);\n-\t  XVECEXP (split, 0, 0) = pattern;\n-\t  PUT_NUM_ELEM (XVEC (split, 0), 1);\n-\t}\n-      else\n-\t{\n-\t  XEXP (pattern, 1) = rtx_alloc (PARALLEL);\n-\t  XVEC (XEXP (pattern, 1), 0) = XVEC (split, 0);\n-\t  XVEC (split, 0) = rtvec_alloc (1);\n-\t  XVECEXP (split, 0, 0) = pattern;\n-\t}\n+      XEXP (pattern, 1) = add_implicit_parallel (XVEC (split, 0));\n+      XVEC (split, 0) = rtvec_alloc (1);\n+      XVECEXP (split, 0, 0) = pattern;\n+\n       /* Predicate all of the insns generated by the split.  */\n       for (i = 0; i < XVECLEN (split, 2); i++)\n \t{"}, {"sha": "e2544353d932fde1e38417d4b01a1ecae80f09c8", "filename": "gcc/gensupport.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313d38e359bfcd8b56c946233294061c66ae21dc/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313d38e359bfcd8b56c946233294061c66ae21dc/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=313d38e359bfcd8b56c946233294061c66ae21dc", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n struct obstack;\n extern struct obstack *rtl_obstack;\n \n+extern rtx add_implicit_parallel (rtvec);\n extern bool init_rtx_reader_args_cb (int, char **, bool (*)(const char *));\n extern bool init_rtx_reader_args (int, char **);\n extern rtx read_md_rtx (int *, int *);"}]}