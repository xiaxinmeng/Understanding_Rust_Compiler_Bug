{"sha": "09fcc0c01d21bec1f7e1f40a4400c9248a2e5ca7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlmY2MwYzAxZDIxYmVjMWY3ZTFmNDBhNDQwMGM5MjQ4YTJlNWNhNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-06-10T23:18:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-06-10T23:18:44Z"}, "message": "ipa-inline-transform.c: Include function.h, cfg.h and basic-block.h\n\n\n\t* ipa-inline-transform.c: Include function.h, cfg.h and basic-block.h\n\t(mark_all_inlined_calls_cdtor): Fix formating.\n\t(inline_transform): Rescale profile before inlining.\n\nFrom-SVN: r249098", "tree": {"sha": "ca6b214b50302f2ecf5746397769ea8a6ca97ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca6b214b50302f2ecf5746397769ea8a6ca97ce0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09fcc0c01d21bec1f7e1f40a4400c9248a2e5ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fcc0c01d21bec1f7e1f40a4400c9248a2e5ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09fcc0c01d21bec1f7e1f40a4400c9248a2e5ca7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fcc0c01d21bec1f7e1f40a4400c9248a2e5ca7/comments", "author": null, "committer": null, "parents": [{"sha": "1511c8c005d91ff2af7010d852fe83bdde0fd3f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1511c8c005d91ff2af7010d852fe83bdde0fd3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1511c8c005d91ff2af7010d852fe83bdde0fd3f3"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "d35bd6d4fecfc6616d66cf697c3dd4281b17be82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fcc0c01d21bec1f7e1f40a4400c9248a2e5ca7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fcc0c01d21bec1f7e1f40a4400c9248a2e5ca7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09fcc0c01d21bec1f7e1f40a4400c9248a2e5ca7", "patch": "@@ -1,3 +1,9 @@\n+2017-06-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline-transform.c: Include function.h, cfg.h and basic-block.h\n+\t(mark_all_inlined_calls_cdtor): Fix formating.\n+\t(inline_transform): Rescale profile before inlining.\n+\n 2017-06-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.h (cgraph_edge::clone): Update prototype."}, {"sha": "9866a55e8b56579d11d2b16b90838ae1bfa2d2db", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fcc0c01d21bec1f7e1f40a4400c9248a2e5ca7/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fcc0c01d21bec1f7e1f40a4400c9248a2e5ca7/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=09fcc0c01d21bec1f7e1f40a4400c9248a2e5ca7", "patch": "@@ -44,6 +44,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-fnsummary.h\"\n #include \"ipa-inline.h\"\n #include \"tree-inline.h\"\n+#include \"function.h\"\n+#include \"cfg.h\"\n+#include \"basic-block.h\"\n \n int ncalls_inlined;\n int nfunctions_inlined;\n@@ -276,7 +279,7 @@ mark_all_inlined_calls_cdtor (cgraph_node *node)\n     {\n       cs->in_polymorphic_cdtor = true;\n       if (!cs->inline_failed)\n-    mark_all_inlined_calls_cdtor (cs->callee);\n+\tmark_all_inlined_calls_cdtor (cs->callee);\n     }\n   for (cgraph_edge *cs = node->indirect_calls; cs; cs = cs->next_callee)\n     cs->in_polymorphic_cdtor = true;\n@@ -661,7 +664,37 @@ inline_transform (struct cgraph_node *node)\n \n   timevar_push (TV_INTEGRATION);\n   if (node->callees && (opt_for_fn (node->decl, optimize) || has_inline))\n-    todo = optimize_inline_calls (current_function_decl);\n+    {\n+      profile_count num = node->count;\n+      profile_count den = ENTRY_BLOCK_PTR_FOR_FN (cfun)->count;\n+      bool scale = num.initialized_p ()\n+\t\t   && (den > 0 || num == profile_count::zero ())\n+\t\t   && !(num == den);\n+      if (scale)\n+\t{\n+\t  if (dump_file)\n+\t    {\n+\t      fprintf (dump_file, \"Applying count scale \");\n+\t      num.dump (dump_file);\n+\t      fprintf (dump_file, \"/\");\n+\t      den.dump (dump_file);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\n+\t  basic_block bb;\n+\t  FOR_ALL_BB_FN (bb, cfun)\n+\t    {\n+\t      bb->count = bb->count.apply_scale (num, den);\n+\t\n+\t      edge e;\n+\t      edge_iterator ei;\n+\t      FOR_EACH_EDGE (e, ei, bb->succs)\n+\t\te->count = e->count.apply_scale (num, den);\n+\t    }\n+\t  ENTRY_BLOCK_PTR_FOR_FN (cfun)->count = node->count;\n+\t}\n+      todo = optimize_inline_calls (current_function_decl);\n+   }\n   timevar_pop (TV_INTEGRATION);\n \n   cfun->always_inline_functions_inlined = true;"}]}