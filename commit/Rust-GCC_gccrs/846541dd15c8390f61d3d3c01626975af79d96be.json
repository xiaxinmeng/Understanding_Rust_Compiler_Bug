{"sha": "846541dd15c8390f61d3d3c01626975af79d96be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ2NTQxZGQxNWM4MzkwZjYxZDNkM2MwMTYyNjk3NWFmNzlkOTZiZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-29T12:12:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-29T12:12:43Z"}, "message": "PR libstdc++/87982 Fix generate_n and fill_n use of _Size parameter\n\nThe standard only requires that _Size can be converted to an integral\ntype, not that it can be used for arithmetic. Add a new set of\n__size_to_integer helper functions to do the conversion (which will be\nambiguous if there is no one conversion that is better than any others).\n\nAlso add tests for DR 426 which requires these algorithms and search_n\nto handle negative values of n.\n\n\tPR libstdc++/87982\n\t* include/bits/stl_algo.h (generate_n): Convert _Size parameter to\n\tan integral type.\n\t* include/bits/stl_algobase.h (__size_to_integer): New overloaded\n\tfunctions to convert a value to an integral type.\n\t(__fill_n_a, __fill_n_a): Assert that __n is already an integral type.\n\t(fill_n): Convert _Size parameter to an integral type.\n\t* testsuite/25_algorithms/fill_n/dr426.cc: New test.\n\t* testsuite/25_algorithms/generate_n/87982.cc: New test.\n\t* testsuite/25_algorithms/generate_n/dr426.cc: New test.\n\nFrom-SVN: r270646", "tree": {"sha": "acdd7472ab025aaa6f9568c19f2a8c0e154a506c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acdd7472ab025aaa6f9568c19f2a8c0e154a506c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/846541dd15c8390f61d3d3c01626975af79d96be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846541dd15c8390f61d3d3c01626975af79d96be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846541dd15c8390f61d3d3c01626975af79d96be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846541dd15c8390f61d3d3c01626975af79d96be/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca0ddb398fb6173eb97c5d70265e79b9ea2bdc9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0ddb398fb6173eb97c5d70265e79b9ea2bdc9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca0ddb398fb6173eb97c5d70265e79b9ea2bdc9d"}], "stats": {"total": 442, "additions": 430, "deletions": 12}, "files": [{"sha": "f9e5ee4467960e2e9305f7964c0b55185651abc8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=846541dd15c8390f61d3d3c01626975af79d96be", "patch": "@@ -1,3 +1,19 @@\n+2019-04-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/87982\n+\t* include/bits/stl_algo.h (generate_n): Convert _Size parameter to\n+\tan integral type.\n+\t* include/bits/stl_algobase.h (__size_to_integer): New overloaded\n+\tfunctions to convert a value to an integral type.\n+\t(__fill_n_a, __fill_n_a): Assert that __n is already an integral type.\n+\t(fill_n): Convert _Size parameter to an integral type.\n+\t* testsuite/25_algorithms/fill_n/87982.cc: New test.\n+\t* testsuite/25_algorithms/fill_n/87982_neg.cc: New test.\n+\t* testsuite/25_algorithms/fill_n/dr426.cc: New test.\n+\t* testsuite/25_algorithms/generate_n/87982.cc: New test.\n+\t* testsuite/25_algorithms/generate_n/87982_neg.cc: New test.\n+\t* testsuite/25_algorithms/generate_n/dr426.cc: New test.\n+\n 2019-04-28  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n \n \tAdding noexcept-specification on tuple constructors (LWG 2899)"}, {"sha": "ae9bb8f14b0a82af214ceb94f0bb5c2a3644da1d", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=846541dd15c8390f61d3d3c01626975af79d96be", "patch": "@@ -4433,9 +4433,11 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  Performs the assignment @c *i = @p __gen() for each @c i in the range\n    *  @p [__first,__first+__n).\n    *\n-   *  _GLIBCXX_RESOLVE_LIB_DEFECTS\n-   *  DR 865. More algorithms that throw away information\n+   * If @p __n is negative, the function does nothing.\n   */\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 865. More algorithms that throw away information\n+  // DR 426. search_n(), fill_n(), and generate_n() with negative n\n   template<typename _OutputIterator, typename _Size, typename _Generator>\n     _OutputIterator\n     generate_n(_OutputIterator __first, _Size __n, _Generator __gen)\n@@ -4445,7 +4447,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    // \"the type returned by a _Generator\"\n \t    __typeof__(__gen())>)\n \n-      for (__decltype(__n + 0) __niter = __n;\n+      typedef __decltype(std::__size_to_integer(__n)) _IntSize;\n+      for (_IntSize __niter = std::__size_to_integer(__n);\n \t   __niter > 0; --__niter, (void) ++__first)\n \t*__first = __gen();\n       return __first;"}, {"sha": "58bfb6c0f05d8396a35e3425bf3f977c8141b87e", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 66, "deletions": 9, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=846541dd15c8390f61d3d3c01626975af79d96be", "patch": "@@ -750,13 +750,65 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    __value);\n     }\n \n+  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:\n+  inline _GLIBCXX_CONSTEXPR int\n+  __size_to_integer(int __n) { return __n; }\n+  inline _GLIBCXX_CONSTEXPR unsigned\n+  __size_to_integer(unsigned __n) { return __n; }\n+  inline _GLIBCXX_CONSTEXPR long\n+  __size_to_integer(long __n) { return __n; }\n+  inline _GLIBCXX_CONSTEXPR unsigned long\n+  __size_to_integer(unsigned long __n) { return __n; }\n+  inline _GLIBCXX_CONSTEXPR long long\n+  __size_to_integer(long long __n) { return __n; }\n+  inline _GLIBCXX_CONSTEXPR unsigned long long\n+  __size_to_integer(unsigned long long __n) { return __n; }\n+\n+#if defined(__GLIBCXX_TYPE_INT_N_0)\n+  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0\n+  __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }\n+  inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0\n+  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_1)\n+  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1\n+  __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }\n+  inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1\n+  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_2)\n+  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2\n+  __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }\n+  inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2\n+  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+  inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3\n+  __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }\n+  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3\n+  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }\n+#endif\n+\n+  inline _GLIBCXX_CONSTEXPR long long\n+  __size_to_integer(float __n) { return __n; }\n+  inline _GLIBCXX_CONSTEXPR long long\n+  __size_to_integer(double __n) { return __n; }\n+  inline _GLIBCXX_CONSTEXPR long long\n+  __size_to_integer(long double __n) { return __n; }\n+#if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)\n+  inline _GLIBCXX_CONSTEXPR long long\n+  __size_to_integer(__float128 __n) { return __n; }\n+#endif\n+\n   template<typename _OutputIterator, typename _Size, typename _Tp>\n     inline typename\n     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type\n     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)\n     {\n-      for (__decltype(__n + 0) __niter = __n;\n-\t   __niter > 0; --__niter, (void) ++__first)\n+#if __cplusplus >= 201103L\n+      static_assert(is_integral<_Size>{}, \"fill_n must pass integral size\");\n+#endif\n+      for (; __n > 0; --__n, (void) ++__first)\n \t*__first = __value;\n       return __first;\n     }\n@@ -766,9 +818,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type\n     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)\n     {\n+#if __cplusplus >= 201103L\n+      static_assert(is_integral<_Size>{}, \"fill_n must pass integral size\");\n+#endif\n       const _Tp __tmp = __value;\n-      for (__decltype(__n + 0) __niter = __n;\n-\t   __niter > 0; --__niter, (void) ++__first)\n+      for (; __n > 0; --__n, (void) ++__first)\n \t*__first = __tmp;\n       return __first;\n     }\n@@ -792,21 +846,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    *  This function fills a range with copies of the same value.  For char\n    *  types filling contiguous areas of memory, this becomes an inline call\n-   *  to @c memset or @ wmemset.\n+   *  to @c memset or @c wmemset.\n    *\n-   *  _GLIBCXX_RESOLVE_LIB_DEFECTS\n-   *  DR 865. More algorithms that throw away information\n+   *  If @p __n is negative, the function does nothing.\n   */\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 865. More algorithms that throw away information\n+  // DR 426. search_n(), fill_n(), and generate_n() with negative n\n   template<typename _OI, typename _Size, typename _Tp>\n     inline _OI\n     fill_n(_OI __first, _Size __n, const _Tp& __value)\n     {\n       // concept requirements\n       __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)\n-      __glibcxx_requires_can_increment(__first, __n);\n \n       return std::__niter_wrap(__first,\n-\t\tstd::__fill_n_a(std::__niter_base(__first), __n, __value));\n+\t  std::__fill_n_a(std::__niter_base(__first),\n+\t\t\t  std::__size_to_integer(__n),\n+\t\t\t  __value));\n     }\n \n   template<bool _BoolType>"}, {"sha": "79bad889e88faa53d53b099bc2773b57317e0555", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/87982.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F87982.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F87982.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F87982.cc?ref=846541dd15c8390f61d3d3c01626975af79d96be", "patch": "@@ -0,0 +1,87 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+int a[4] = { 0, 1, 2, 3 };\n+int g;\n+enum E { e2 = 2 };\n+\n+struct Num\n+{\n+  char val;\n+\n+  operator char() const { return val; }\n+\n+private:\n+  void operator+() const;\n+  void operator+(int) const;\n+  void operator+(Num) const;\n+  void operator<(int) const;\n+  void operator>(int) const;\n+  void operator<=(int) const;\n+  void operator>=(int) const;\n+  void operator==(int) const;\n+  void operator!=(int) const;\n+};\n+\n+void\n+test01()\n+{\n+  int* p;\n+\n+  g = -1;\n+  p = std::fill_n(a, true, g); // bool as Size\n+  VERIFY( p == a+1 );\n+  VERIFY( a[0] == g );\n+  VERIFY( a[1] == 1 );\n+  VERIFY( a[2] == 2 );\n+  VERIFY( a[3] == 3 );\n+\n+  g = -2;\n+  p = std::fill_n(a, e2, g); // enumeration type as Size\n+  VERIFY( p == a+2 );\n+  VERIFY( a[0] == g );\n+  VERIFY( a[1] == g );\n+  VERIFY( a[2] == 2 );\n+  VERIFY( a[3] == 3 );\n+\n+  g = -3;\n+  p = std::fill_n(a, 3.5, g); // floating point type as Size\n+  VERIFY( p == a+3 );\n+  VERIFY( a[0] == g );\n+  VERIFY( a[1] == g );\n+  VERIFY( a[2] == g );\n+  VERIFY( a[3] == 3 );\n+\n+  g = -4;\n+  Num n = { 3 };\n+  p = std::fill_n(a, n, g); // non-scalar type as Size\n+  VERIFY( p == a+3 );\n+  VERIFY( a[0] == g );\n+  VERIFY( a[1] == g );\n+  VERIFY( a[2] == g );\n+  VERIFY( a[3] == 3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "fbd368d04aa2cdcd169ee99832b3ebc8a7f60ff8", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/87982_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F87982_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F87982_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F87982_neg.cc?ref=846541dd15c8390f61d3d3c01626975af79d96be", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+\n+// PR libstdc++/87982\n+\n+void test01()\n+{\n+  int a[2];\n+  std::fill_n(a, a+2, -1);\n+}\n+\n+// { dg-error \"no matching function\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"invalid conversion\" }"}, {"sha": "2a0a515d7405e6ec0b0eb0919c852afa9d9751fb", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/dr426.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdr426.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdr426.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2Fdr426.cc?ref=846541dd15c8390f61d3d3c01626975af79d96be", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// DR 426. search_n(), fill_n(), and generate_n() with negative n\n+\n+void\n+test01()\n+{\n+  int i = 99;\n+  std::fill_n(&i, 0, 13);\n+  VERIFY( i == 99 );\n+  std::fill_n(&i, -1, 13);\n+  VERIFY( i == 99 );\n+  std::fill_n(&i, -100, 13);\n+  VERIFY( i == 99 );\n+}\n+\n+struct X\n+{\n+  X() { }\n+  X(const X&) { throw 1; }\n+  X& operator=(const X&) { throw 1u; }\n+};\n+\n+void\n+test02()\n+{\n+  X x;\n+  std::fill_n(&x, 0, x);\n+  std::fill_n(&x, -1, x);\n+  std::fill_n(&x, -100, x);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "cc0780a6fd7425b805c248ddc2f54446e4138442", "filename": "libstdc++-v3/testsuite/25_algorithms/generate_n/87982.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F87982.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F87982.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F87982.cc?ref=846541dd15c8390f61d3d3c01626975af79d96be", "patch": "@@ -0,0 +1,88 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+int a[4] = { 0, 1, 2, 3 };\n+int g;\n+int gen() { return g; }\n+enum E { e2 = 2 };\n+\n+struct Num\n+{\n+  char val;\n+\n+  operator char() const { return val; }\n+\n+private:\n+  void operator+() const;\n+  void operator+(int) const;\n+  void operator+(Num) const;\n+  void operator<(int) const;\n+  void operator>(int) const;\n+  void operator<=(int) const;\n+  void operator>=(int) const;\n+  void operator==(int) const;\n+  void operator!=(int) const;\n+};\n+\n+void\n+test01()\n+{\n+  int* p;\n+\n+  g = -1;\n+  p = std::generate_n(a, true, &gen); // bool as Size\n+  VERIFY( p == a+1 );\n+  VERIFY( a[0] == g );\n+  VERIFY( a[1] == 1 );\n+  VERIFY( a[2] == 2 );\n+  VERIFY( a[3] == 3 );\n+\n+  g = -2;\n+  p = std::generate_n(a, e2, &gen); // enumeration type as Size\n+  VERIFY( p == a+2 );\n+  VERIFY( a[0] == g );\n+  VERIFY( a[1] == g );\n+  VERIFY( a[2] == 2 );\n+  VERIFY( a[3] == 3 );\n+\n+  g = -3;\n+  p = std::generate_n(a, 3.5, &gen); // floating point type as Size\n+  VERIFY( p == a+3 );\n+  VERIFY( a[0] == g );\n+  VERIFY( a[1] == g );\n+  VERIFY( a[2] == g );\n+  VERIFY( a[3] == 3 );\n+\n+  g = -4;\n+  Num n = { 3 };\n+  p = std::generate_n(a, n, &gen); // non-scalar type as Size\n+  VERIFY( p == a+3 );\n+  VERIFY( a[0] == g );\n+  VERIFY( a[1] == g );\n+  VERIFY( a[2] == g );\n+  VERIFY( a[3] == 3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "88134bdde88a12f98df0239bf1a9d9149a3cb65f", "filename": "libstdc++-v3/testsuite/25_algorithms/generate_n/87982_neg.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F87982_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F87982_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2F87982_neg.cc?ref=846541dd15c8390f61d3d3c01626975af79d96be", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+\n+// PR libstdc++/87982\n+\n+void test01()\n+{\n+  int gen();\n+  int a[2];\n+  std::generate_n(a, a+2, &gen);\n+}\n+\n+// { dg-error \"no matching function\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"invalid conversion\" }"}, {"sha": "87a132b38826bb8ad42040144ede110b40246c62", "filename": "libstdc++-v3/testsuite/25_algorithms/generate_n/dr426.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2Fdr426.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846541dd15c8390f61d3d3c01626975af79d96be/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2Fdr426.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fgenerate_n%2Fdr426.cc?ref=846541dd15c8390f61d3d3c01626975af79d96be", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// DR 426. search_n(), fill_n(), and generate_n() with negative n\n+\n+struct Gen\n+{\n+  int operator()() const { throw 1; }\n+};\n+\n+void\n+test01()\n+{\n+  int i = 99;\n+  std::generate_n(&i, 0, Gen());\n+  VERIFY( i == 99 );\n+  std::generate_n(&i, -1, Gen());\n+  VERIFY( i == 99 );\n+  std::generate_n(&i, -100, Gen());\n+  VERIFY( i == 99 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}