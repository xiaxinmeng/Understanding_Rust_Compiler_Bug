{"sha": "d42dc0ade04ceb5b186fec9cdbc2554251753583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQyZGMwYWRlMDRjZWI1YjE4NmZlYzljZGJjMjU1NDI1MTc1MzU4Mw==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2018-06-11T09:18:07Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-06-11T09:18:07Z"}, "message": "[Ada] Mark extended return of unconstrained type as never inlined\n\nCalls to subprograms whose body was an extended return of an unconstrained\ntype were marked as not inlined, while the subprogram itself was marked as\nalways inlined. This was inconsistent and could lead to crash in GNATprove.\nNow such subprograms are marked as not candidates for inlining.\n\nThis mostly impacts GNATprove, as it relates to frontend inlining which is\nnot used anymore in normal compilation.\n\n2018-06-11  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* inline.adb (Build_Body_To_Inline): Consider case of extended return\n\tof unconstrained type as one case where inlining is not supported.\n\t(Expand_Inlined_Call): Remove special case for body as extended return\n\tof unconstrained type.\n\nFrom-SVN: r261413", "tree": {"sha": "5a2b796ed08da66e41ee1774040e60cea304e044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a2b796ed08da66e41ee1774040e60cea304e044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d42dc0ade04ceb5b186fec9cdbc2554251753583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42dc0ade04ceb5b186fec9cdbc2554251753583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d42dc0ade04ceb5b186fec9cdbc2554251753583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42dc0ade04ceb5b186fec9cdbc2554251753583/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d05bdd90e646234d08ceb855f9b4ae06896f4337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05bdd90e646234d08ceb855f9b4ae06896f4337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d05bdd90e646234d08ceb855f9b4ae06896f4337"}], "stats": {"total": 77, "additions": 64, "deletions": 13}, "files": [{"sha": "c145d7216a184a96bf2ff40eb567f9845a0c3e79", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42dc0ade04ceb5b186fec9cdbc2554251753583/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42dc0ade04ceb5b186fec9cdbc2554251753583/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d42dc0ade04ceb5b186fec9cdbc2554251753583", "patch": "@@ -1,3 +1,10 @@\n+2018-06-11  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb (Build_Body_To_Inline): Consider case of extended return\n+\tof unconstrained type as one case where inlining is not supported.\n+\t(Expand_Inlined_Call): Remove special case for body as extended return\n+\tof unconstrained type.\n+\n 2018-06-11  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb (Analyze_Part_Of): Only allow Part_Of on non-generic"}, {"sha": "22fa01f9f1b49325ac1cb600a16e52fc9c5f3640", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42dc0ade04ceb5b186fec9cdbc2554251753583/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42dc0ade04ceb5b186fec9cdbc2554251753583/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=d42dc0ade04ceb5b186fec9cdbc2554251753583", "patch": "@@ -879,6 +879,10 @@ package body Inline is\n       Body_To_Analyze : Node_Id;\n       Max_Size        : constant := 10;\n \n+      function Has_Extended_Return return Boolean;\n+      --  This function returns True if the subprogram has an extended return\n+      --  statement.\n+\n       function Has_Pending_Instantiation return Boolean;\n       --  If some enclosing body contains instantiations that appear before\n       --  the corresponding generic body, the enclosing body has a freeze node\n@@ -899,6 +903,49 @@ package body Inline is\n       --  unconstrained type, the secondary stack is involved, and it\n       --  is not worth inlining.\n \n+      -------------------------\n+      -- Has_Extended_Return --\n+      -------------------------\n+\n+      function Has_Extended_Return return Boolean is\n+         Body_To_Inline : constant Node_Id := N;\n+\n+         function Check_Return (N : Node_Id) return Traverse_Result;\n+         --  Returns OK on node N if this is not an extended return statement\n+\n+         ------------------\n+         -- Check_Return --\n+         ------------------\n+\n+         function Check_Return (N : Node_Id) return Traverse_Result is\n+         begin\n+            case Nkind (N) is\n+               when N_Extended_Return_Statement =>\n+                  return Abandon;\n+\n+               --  Skip locally declared subprogram bodies inside the body to\n+               --  inline, as the return statements inside those do not count.\n+\n+               when N_Subprogram_Body =>\n+                  if N = Body_To_Inline then\n+                     return OK;\n+                  else\n+                     return Skip;\n+                  end if;\n+\n+               when others =>\n+                  return OK;\n+            end case;\n+         end Check_Return;\n+\n+         function Check_All_Returns is new Traverse_Func (Check_Return);\n+\n+      --  Start of processing for Has_Extended_Return\n+\n+      begin\n+         return Check_All_Returns (N) /= OK;\n+      end Has_Extended_Return;\n+\n       -------------------------------\n       -- Has_Pending_Instantiation --\n       -------------------------------\n@@ -1048,7 +1095,16 @@ package body Inline is\n         and then not Is_Access_Type (Etype (Spec_Id))\n         and then not Is_Constrained (Etype (Spec_Id))\n       then\n-         if not Has_Single_Return (N) then\n+         if not Has_Single_Return (N)\n+\n+           --  Skip inlining if the function returns an unconstrained type\n+           --  using an extended return statement since this part of the\n+           --  new inlining model which is not yet supported by the current\n+           --  implementation. ???\n+\n+           or else (Returns_Unconstrained_Type (Spec_Id)\n+                     and then Has_Extended_Return)\n+         then\n             Cannot_Inline\n               (\"cannot inline & (unconstrained return type)?\", N, Spec_Id);\n             return;\n@@ -2873,18 +2929,6 @@ package body Inline is\n \n       elsif Nkind (Orig_Bod) in N_Entity then\n          return;\n-\n-      --  Skip inlining if the function returns an unconstrained type using\n-      --  an extended return statement since this part of the new inlining\n-      --  model which is not yet supported by the current implementation. ???\n-\n-      elsif Is_Unc\n-        and then\n-          Nkind (First (Statements (Handled_Statement_Sequence (Orig_Bod)))) =\n-            N_Extended_Return_Statement\n-        and then not Back_End_Inlining\n-      then\n-         return;\n       end if;\n \n       if Nkind (Orig_Bod) = N_Defining_Identifier"}]}