{"sha": "fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE0NTExYzJmNGQzYmFjZjVlOWQ1Y2M1OTA3ZDM4MTIyMDQ5MjhiYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-01-25T09:05:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-01-25T09:05:47Z"}, "message": "re PR tree-optimization/69376 (wrong code at -Os and above on x86_64-linux-gnu)\n\n2016-01-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69376\n\t* tree-ssa-sccvn.h (struct vn_ssa_aux): Add range_info_anti_range_p\n\tflag.\n\t(VN_INFO_ANTI_RANGE_P): New inline.\n\t(VN_INFO_RANGE_TYPE): Likewise.\n\t* tree-ssa-sccvn.c (set_ssa_val_to): Also record and copy\n\tSSA_NAME_ANTI_RANGE_P.\n\t(free_scc_vn): Restore SSA_NAME_ANTI_RANGE_P.\n\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n\tProperly query VN_INFO_RANGE_TYPE.\n\n\t* gcc.dg/torture/pr69376.c: New testcase.\n\nFrom-SVN: r232786", "tree": {"sha": "56be12da035518715f8b8e86bbdfcc9e23eb4259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56be12da035518715f8b8e86bbdfcc9e23eb4259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ff1503c731680d9c4917f1ecb5ef7df20b7feb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff1503c731680d9c4917f1ecb5ef7df20b7feb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ff1503c731680d9c4917f1ecb5ef7df20b7feb2"}], "stats": {"total": 105, "additions": 101, "deletions": 4}, "files": [{"sha": "f102049cf2a9c2b349d102790a21d9676b9a269f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "patch": "@@ -1,3 +1,16 @@\n+2016-01-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69376\n+\t* tree-ssa-sccvn.h (struct vn_ssa_aux): Add range_info_anti_range_p\n+\tflag.\n+\t(VN_INFO_ANTI_RANGE_P): New inline.\n+\t(VN_INFO_RANGE_TYPE): Likewise.\n+\t* tree-ssa-sccvn.c (set_ssa_val_to): Also record and copy\n+\tSSA_NAME_ANTI_RANGE_P.\n+\t(free_scc_vn): Restore SSA_NAME_ANTI_RANGE_P.\n+\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n+\tProperly query VN_INFO_RANGE_TYPE.\n+\n 2016-01-25  Nick Clifton  <nickc@redhat.com>\n \n \tPR target/66655"}, {"sha": "70fb83fce75dd62d8792d2b144509e52b262277a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "patch": "@@ -1,3 +1,8 @@\n+2016-01-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69376\n+\t* gcc.dg/torture/pr69376.c: New testcase.\n+\n 2016-01-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/69397"}, {"sha": "e907e2215fd67716154e7e9626ab09c5cfc50c0a", "filename": "gcc/testsuite/gcc.dg/torture/pr69376.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69376.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69376.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69376.c?ref=fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n+\n+int printf (const char *, ...); \n+\n+unsigned a, c, *d, f;\n+char b, e;\n+short g;\n+\n+void\n+fn1 ()\n+{\n+  unsigned h = 4294967290;\n+  if (b >= 0)\n+    {\n+      h = b;\n+      c = b / 290;\n+      f = ~(c - (8 || h));\n+      if (f)\n+\tprintf (\"%d\\n\", 1);\n+      if (f)\n+\tprintf (\"%d\\n\", f);\n+      g = ~f;\n+      if (c < 3)\n+\t{\n+\t  int i = -h < ~c;\n+\t  unsigned j;\n+\t  if (i)\n+\t    j = h;\n+\t  h = -j * g;\n+\t}\n+      c = h;\n+    }\n+  unsigned k = ~h;\n+  char l = e || g;\n+  if (l < 1 || k < 7)\n+    *d = a;\n+}\n+\n+int\n+main ()\n+{\n+  fn1 ();\n+  return 0;\n+}"}, {"sha": "3570ee92a2baff95a214076e705a03bacf0a55d9", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "patch": "@@ -4047,7 +4047,7 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t\t       && ! VN_INFO_RANGE_INFO (sprime)\n \t\t       && b == sprime_b)\n \t\tduplicate_ssa_name_range_info (sprime,\n-\t\t\t\t\t       SSA_NAME_RANGE_TYPE (lhs),\n+\t\t\t\t\t       VN_INFO_RANGE_TYPE (lhs),\n \t\t\t\t\t       VN_INFO_RANGE_INFO (lhs));\n \t    }\n "}, {"sha": "726294e2c2c808b799167ee81cdab2a7c77c71ef", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "patch": "@@ -3139,15 +3139,24 @@ set_ssa_val_to (tree from, tree to)\n \t\t{\n \t\t  /* Save old info.  */\n \t\t  if (! VN_INFO (to)->info.range_info)\n-\t\t    VN_INFO (to)->info.range_info = SSA_NAME_RANGE_INFO (to);\n+\t\t    {\n+\t\t      VN_INFO (to)->info.range_info = SSA_NAME_RANGE_INFO (to);\n+\t\t      VN_INFO (to)->range_info_anti_range_p\n+\t\t\t= SSA_NAME_ANTI_RANGE_P (to);\n+\t\t    }\n \t\t  /* Use that from the dominator.  */\n \t\t  SSA_NAME_RANGE_INFO (to) = SSA_NAME_RANGE_INFO (from);\n+\t\t  SSA_NAME_ANTI_RANGE_P (to) = SSA_NAME_ANTI_RANGE_P (from);\n \t\t}\n \t      else\n \t\t{\n \t\t  /* Save old info.  */\n \t\t  if (! VN_INFO (to)->info.range_info)\n-\t\t    VN_INFO (to)->info.range_info = SSA_NAME_RANGE_INFO (to);\n+\t\t    {\n+\t\t      VN_INFO (to)->info.range_info = SSA_NAME_RANGE_INFO (to);\n+\t\t      VN_INFO (to)->range_info_anti_range_p\n+\t\t\t= SSA_NAME_ANTI_RANGE_P (to);\n+\t\t    }\n \t\t  /* Rather than allocating memory and unioning the info\n \t\t     just clear it.  */\n \t\t  SSA_NAME_RANGE_INFO (to) = NULL;\n@@ -4313,7 +4322,11 @@ free_scc_vn (void)\n \t    SSA_NAME_PTR_INFO (name) = VN_INFO (name)->info.ptr_info;\n \t  else if (INTEGRAL_TYPE_P (TREE_TYPE (name))\n \t\t   && VN_INFO (name)->info.range_info)\n-\t    SSA_NAME_RANGE_INFO (name) = VN_INFO (name)->info.range_info;\n+\t    {\n+\t      SSA_NAME_RANGE_INFO (name) = VN_INFO (name)->info.range_info;\n+\t      SSA_NAME_ANTI_RANGE_P (name)\n+\t\t= VN_INFO (name)->range_info_anti_range_p;\n+\t    }\n \t}\n     }\n   obstack_free (&vn_ssa_aux_obstack, NULL);"}, {"sha": "e8e710b0c55612e9057437733328ff6104ee114d", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4511c2f4d3bacf5e9d5cc5907d3812204928bb/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=fa4511c2f4d3bacf5e9d5cc5907d3812204928bb", "patch": "@@ -191,6 +191,9 @@ typedef struct vn_ssa_aux\n      insertion of such with EXPR as definition is required before\n      a use can be created of it.  */\n   unsigned needs_insertion : 1;\n+\n+  /* Whether range-info is anti-range.  */\n+  unsigned range_info_anti_range_p : 1;\n } *vn_ssa_aux_t;\n \n enum vn_lookup_kind { VN_NOWALK, VN_WALK, VN_WALKREWRITE };\n@@ -253,6 +256,24 @@ VN_INFO_RANGE_INFO (tree name)\n \t  : SSA_NAME_RANGE_INFO (name));\n }\n \n+/* Whether the original range info of NAME is an anti-range.  */\n+\n+inline bool\n+VN_INFO_ANTI_RANGE_P (tree name)\n+{\n+  return (VN_INFO (name)->info.range_info\n+\t  ? VN_INFO (name)->range_info_anti_range_p\n+\t  : SSA_NAME_ANTI_RANGE_P (name));\n+}\n+\n+/* Get at the original range info kind for NAME.  */\n+\n+inline value_range_type\n+VN_INFO_RANGE_TYPE (tree name)\n+{\n+  return VN_INFO_ANTI_RANGE_P (name) ? VR_ANTI_RANGE : VR_RANGE;\n+}\n+\n /* Get at the original pointer info for NAME.  */\n \n inline ptr_info_def *"}]}