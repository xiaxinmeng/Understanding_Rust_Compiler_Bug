{"sha": "5a5062b8dbc430e5f86cb207e540b4f1b0689def", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE1MDYyYjhkYmM0MzBlNWY4NmNiMjA3ZTU0MGI0ZjFiMDY4OWRlZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-07-23T17:14:31Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-07-23T17:14:31Z"}, "message": "c-ubsan.c (ubsan_instrument_division): Use unshare_expr throughout.\n\n\t* c-ubsan.c (ubsan_instrument_division): Use unshare_expr throughout.\n\t(ubsan_instrument_shift): Likewise.\n\nFrom-SVN: r226116", "tree": {"sha": "3db028682f88b8818a98ceaf020e40c9051dec15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3db028682f88b8818a98ceaf020e40c9051dec15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a5062b8dbc430e5f86cb207e540b4f1b0689def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5062b8dbc430e5f86cb207e540b4f1b0689def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a5062b8dbc430e5f86cb207e540b4f1b0689def", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5062b8dbc430e5f86cb207e540b4f1b0689def/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7eb9f42e3b0c7be1db3e48fbda9d3bb70a49454b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb9f42e3b0c7be1db3e48fbda9d3bb70a49454b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb9f42e3b0c7be1db3e48fbda9d3bb70a49454b"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "caedf8e22672a8a18910141fc96b487d0049c36e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5062b8dbc430e5f86cb207e540b4f1b0689def/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5062b8dbc430e5f86cb207e540b4f1b0689def/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5a5062b8dbc430e5f86cb207e540b4f1b0689def", "patch": "@@ -1,3 +1,8 @@\n+2015-07-23  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-ubsan.c (ubsan_instrument_division): Use unshare_expr throughout.\n+\t(ubsan_instrument_shift): Likewise.\n+\n 2015-07-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/66908"}, {"sha": "e0cce8467e4c235ccf54878836543cc4ea92fab0", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5062b8dbc430e5f86cb207e540b4f1b0689def/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5062b8dbc430e5f86cb207e540b4f1b0689def/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=5a5062b8dbc430e5f86cb207e540b4f1b0689def", "patch": "@@ -75,7 +75,7 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n       && !TYPE_UNSIGNED (type))\n     {\n       tree x;\n-      tt = fold_build2 (EQ_EXPR, boolean_type_node, op1,\n+      tt = fold_build2 (EQ_EXPR, boolean_type_node, unshare_expr (op1),\n \t\t\tbuild_int_cst (type, -1));\n       x = fold_build2 (EQ_EXPR, boolean_type_node, op0,\n \t\t       TYPE_MIN_VALUE (type));\n@@ -103,7 +103,7 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n \t  TREE_SIDE_EFFECTS (op0) = 1;\n \t}\n     }\n-  t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), op0, t);\n+  t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), unshare_expr (op0), t);\n   if (flag_sanitize_undefined_trap_on_error)\n     tt = build_call_expr_loc (loc, builtin_decl_explicit (BUILT_IN_TRAP), 0);\n   else\n@@ -117,6 +117,8 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n \t  ? BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW\n \t  : BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT;\n       tt = builtin_decl_explicit (bcode);\n+      op0 = unshare_expr (op0);\n+      op1 = unshare_expr (op1);\n       tt = build_call_expr_loc (loc, tt, 3, data, ubsan_encode_value (op0),\n \t\t\t\tubsan_encode_value (op1));\n     }\n@@ -152,7 +154,7 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n       && flag_isoc99)\n     {\n       tree x = fold_build2 (MINUS_EXPR, op1_utype, uprecm1,\n-\t\t\t    fold_convert (op1_utype, op1));\n+\t\t\t    fold_convert (op1_utype, unshare_expr (op1)));\n       tt = fold_convert_loc (loc, unsigned_type_for (type0), op0);\n       tt = fold_build2 (RSHIFT_EXPR, TREE_TYPE (tt), tt, x);\n       tt = fold_build2 (NE_EXPR, boolean_type_node, tt,\n@@ -167,12 +169,13 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n       && (cxx_dialect >= cxx11))\n     {\n       tree x = fold_build2 (MINUS_EXPR, op1_utype, uprecm1,\n-\t\t\t    fold_convert (op1_utype, op1));\n-      tt = fold_convert_loc (loc, unsigned_type_for (type0), op0);\n+\t\t\t    fold_convert (op1_utype, unshare_expr (op1)));\n+      tt = fold_convert_loc (loc, unsigned_type_for (type0),\n+\t\t\t     unshare_expr (op0));\n       tt = fold_build2 (RSHIFT_EXPR, TREE_TYPE (tt), tt, x);\n       tt = fold_build2 (GT_EXPR, boolean_type_node, tt,\n \t\t\tbuild_int_cst (TREE_TYPE (tt), 1));\n-      x = fold_build2 (LT_EXPR, boolean_type_node, op0,\n+      x = fold_build2 (LT_EXPR, boolean_type_node, unshare_expr (op0),\n \t\t       build_int_cst (type0, 0));\n       tt = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, x, tt);\n     }\n@@ -197,7 +200,7 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n \t  TREE_SIDE_EFFECTS (op0) = 1;\n \t}\n     }\n-  t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), op0, t);\n+  t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), unshare_expr (op0), t);\n   t = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, t,\n \t\t   tt ? tt : integer_zero_node);\n \n@@ -216,6 +219,8 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n \t  ? BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS\n \t  : BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT;\n       tt = builtin_decl_explicit (bcode);\n+      op0 = unshare_expr (op0);\n+      op1 = unshare_expr (op1);\n       tt = build_call_expr_loc (loc, tt, 3, data, ubsan_encode_value (op0),\n \t\t\t\tubsan_encode_value (op1));\n     }"}]}