{"sha": "81ba4f39eea9bdf0af7d8bc3e3c4314d27b5a824", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiYTRmMzllZWE5YmRmMGFmN2Q4YmMzZTNjNDMxNGQyN2I1YTgyNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-05-10T16:24:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-05-10T16:24:41Z"}, "message": "optabs.c (expand_compare_and_swap_loop): Don't clobber old value before comparing it for success.\n\n        * optabs.c (expand_compare_and_swap_loop): Don't clobber old value\n        before comparing it for success.\n\nFrom-SVN: r99525", "tree": {"sha": "6476d8f67b2ec37727a66a5c5fe4e31209e944c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6476d8f67b2ec37727a66a5c5fe4e31209e944c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81ba4f39eea9bdf0af7d8bc3e3c4314d27b5a824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ba4f39eea9bdf0af7d8bc3e3c4314d27b5a824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81ba4f39eea9bdf0af7d8bc3e3c4314d27b5a824", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ba4f39eea9bdf0af7d8bc3e3c4314d27b5a824/comments", "author": null, "committer": null, "parents": [{"sha": "8173eefc35d1368d28353f78e133701d3cde13ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8173eefc35d1368d28353f78e133701d3cde13ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8173eefc35d1368d28353f78e133701d3cde13ff"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "a5e907c6305e656b4b1e059da85e64f4d7474a2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ba4f39eea9bdf0af7d8bc3e3c4314d27b5a824/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ba4f39eea9bdf0af7d8bc3e3c4314d27b5a824/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81ba4f39eea9bdf0af7d8bc3e3c4314d27b5a824", "patch": "@@ -1,3 +1,8 @@\n+2005-05-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* optabs.c (expand_compare_and_swap_loop): Don't clobber old value\n+\tbefore comparing it for success.\n+\n 2005-05-10  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/sync.md (sync_add<I48MODE>): Fix arguments for"}, {"sha": "2955f7b3ad998f633392ae1dedbf9149deca0910", "filename": "gcc/optabs.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ba4f39eea9bdf0af7d8bc3e3c4314d27b5a824/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ba4f39eea9bdf0af7d8bc3e3c4314d27b5a824/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=81ba4f39eea9bdf0af7d8bc3e3c4314d27b5a824", "patch": "@@ -5625,24 +5625,27 @@ expand_compare_and_swap_loop (rtx mem, rtx old_reg, rtx new_reg, rtx seq)\n {\n   enum machine_mode mode = GET_MODE (mem);\n   enum insn_code icode;\n-  rtx label, subtarget;\n+  rtx label, cmp_reg, subtarget;\n \n   /* The loop we want to generate looks like\n \n-\told_reg = mem;\n+\tcmp_reg = mem;\n       label:\n+        old_reg = cmp_reg;\n \tseq;\n-\told_reg = compare-and-swap(mem, old_reg, new_reg)\n-\tif (old_reg != new_reg)\n+\tcmp_reg = compare-and-swap(mem, old_reg, new_reg)\n+\tif (cmp_reg != old_reg)\n \t  goto label;\n \n      Note that we only do the plain load from memory once.  Subsequent\n      iterations use the value loaded by the compare-and-swap pattern.  */\n \n   label = gen_label_rtx ();\n+  cmp_reg = gen_reg_rtx (mode);\n \n-  emit_move_insn (old_reg, mem);\n+  emit_move_insn (cmp_reg, mem);\n   emit_label (label);\n+  emit_move_insn (old_reg, cmp_reg);\n   if (seq)\n     emit_insn (seq);\n \n@@ -5654,9 +5657,12 @@ expand_compare_and_swap_loop (rtx mem, rtx old_reg, rtx new_reg, rtx seq)\n     {\n     default:\n       subtarget = expand_val_compare_and_swap_1 (mem, old_reg, new_reg,\n-\t\t\t\t\t\t old_reg, icode);\n+\t\t\t\t\t\t cmp_reg, icode);\n       if (subtarget != NULL_RTX)\n-\tbreak;\n+\t{\n+\t  gcc_assert (subtarget == cmp_reg);\n+\t  break;\n+\t}\n \n       /* FALLTHRU */\n     case CODE_FOR_nothing:\n@@ -5665,11 +5671,13 @@ expand_compare_and_swap_loop (rtx mem, rtx old_reg, rtx new_reg, rtx seq)\n \treturn false;\n \n       subtarget = expand_val_compare_and_swap_1 (mem, old_reg, new_reg,\n-\t\t\t\t\t\t old_reg, icode);\n+\t\t\t\t\t\t cmp_reg, icode);\n       if (subtarget == NULL_RTX)\n \treturn false;\n+      if (subtarget != cmp_reg)\n+\temit_move_insn (cmp_reg, subtarget);\n \n-      emit_cmp_insn (subtarget, old_reg, EQ, const0_rtx, mode, true);\n+      emit_cmp_insn (cmp_reg, old_reg, EQ, const0_rtx, mode, true);\n     }\n \n   /* ??? Mark this jump predicted not taken?  */"}]}