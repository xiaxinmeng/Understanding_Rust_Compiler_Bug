{"sha": "d522e7a2222a240910be4554bf202f21c1aa13e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUyMmU3YTIyMjJhMjQwOTEwYmU0NTU0YmYyMDJmMjFjMWFhMTNlOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-15T23:02:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-15T23:02:37Z"}, "message": "toplev.c (display_target_options): Avoid unused variable warning if TARGET_SWITCHES and TARGET_OPTIONS are both...\n\n\t* toplev.c (display_target_options): Avoid unused variable warning if\n\tTARGET_SWITCHES and TARGET_OPTIONS are both undefined.\n\t* config/mips/mips.c (mips_arch_string, mips_tune_string): Make static.\n\t(mips_isa_string, mips_abi_string, mips_fix_vr4130_string): Delete.\n\t(mips_isa): Initialize to MIPS_ABI_DEFAULT.\n\t(mips_isa_info): New variable.\n\t(mips_parse_cpu): Remove the first argument and leave the caller\n\tto report errors.\n\t(TARGET_HANDLE_OPTION): Override default.\n\t(mips_handle_option): New function.  Move option validation code from...\n\t(override_options): ...here.  Update calls to mips_parse_cpu.\n\t* config/mips/mips.h (mips_arch_string, mips_tune_string)\n\t(mips_isa_string, mips_abi_string, TARGET_OPTIONS)\n\t(SUBTARGET_TARGET_OPTIONS): Delete.\n\t* config/mips/mips.opt (mabi=, march=, mflush-func=, mips)\n\t(mno-flush-func, mtune=): New options.\n\nFrom-SVN: r96536", "tree": {"sha": "fa5a894d86cd3f32de044265e220a3ef414aec33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa5a894d86cd3f32de044265e220a3ef414aec33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d522e7a2222a240910be4554bf202f21c1aa13e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d522e7a2222a240910be4554bf202f21c1aa13e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d522e7a2222a240910be4554bf202f21c1aa13e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d522e7a2222a240910be4554bf202f21c1aa13e9/comments", "author": null, "committer": null, "parents": [{"sha": "cf1665b99c744e4f3608db9432a5dad941894d1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf1665b99c744e4f3608db9432a5dad941894d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf1665b99c744e4f3608db9432a5dad941894d1c"}], "stats": {"total": 204, "additions": 119, "deletions": 85}, "files": [{"sha": "4a1b3175ee05dfd6621bccc4b9d71227f343da13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522e7a2222a240910be4554bf202f21c1aa13e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522e7a2222a240910be4554bf202f21c1aa13e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d522e7a2222a240910be4554bf202f21c1aa13e9", "patch": "@@ -1,3 +1,22 @@\n+2005-03-15  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* toplev.c (display_target_options): Avoid unused variable warning if\n+\tTARGET_SWITCHES and TARGET_OPTIONS are both undefined.\n+\t* config/mips/mips.c (mips_arch_string, mips_tune_string): Make static.\n+\t(mips_isa_string, mips_abi_string, mips_fix_vr4130_string): Delete.\n+\t(mips_isa): Initialize to MIPS_ABI_DEFAULT.\n+\t(mips_isa_info): New variable.\n+\t(mips_parse_cpu): Remove the first argument and leave the caller\n+\tto report errors.\n+\t(TARGET_HANDLE_OPTION): Override default.\n+\t(mips_handle_option): New function.  Move option validation code from...\n+\t(override_options): ...here.  Update calls to mips_parse_cpu.\n+\t* config/mips/mips.h (mips_arch_string, mips_tune_string)\n+\t(mips_isa_string, mips_abi_string, TARGET_OPTIONS)\n+\t(SUBTARGET_TARGET_OPTIONS): Delete.\n+\t* config/mips/mips.opt (mabi=, march=, mflush-func=, mips)\n+\t(mno-flush-func, mtune=): New options.\n+\n 2005-03-15  Roger Sayle  <roger@eyesopen.com>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "2817e6733ded4473c36dfd3c3355bae2941105fc", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 72, "deletions": 60, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522e7a2222a240910be4554bf202f21c1aa13e9/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522e7a2222a240910be4554bf202f21c1aa13e9/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d522e7a2222a240910be4554bf202f21c1aa13e9", "patch": "@@ -264,6 +264,7 @@ static void mips_arg_info (const CUMULATIVE_ARGS *, enum machine_mode,\n static bool mips_get_unaligned_mem (rtx *, unsigned int, int, rtx *, rtx *);\n static void mips_set_architecture (const struct mips_cpu_info *);\n static void mips_set_tune (const struct mips_cpu_info *);\n+static bool mips_handle_option (size_t, const char *, int);\n static struct machine_function *mips_init_machine_status (void);\n static void print_operand_reloc (FILE *, rtx, const char **);\n #if TARGET_IRIX\n@@ -328,7 +329,7 @@ static void mips_avoid_hazards (void);\n static void mips_reorg (void);\n static bool mips_strict_matching_cpu_name_p (const char *, const char *);\n static bool mips_matching_cpu_name_p (const char *, const char *);\n-static const struct mips_cpu_info *mips_parse_cpu (const char *, const char *);\n+static const struct mips_cpu_info *mips_parse_cpu (const char *);\n static const struct mips_cpu_info *mips_cpu_info_from_isa (int);\n static bool mips_return_in_memory (tree, tree);\n static bool mips_strict_argument_naming (CUMULATIVE_ARGS *);\n@@ -547,24 +548,22 @@ const struct mips_cpu_info *mips_tune_info;\n int mips_isa;\n \n /* Which ABI to use.  */\n-int mips_abi;\n-\n-/* Strings to hold which cpu and instruction set architecture to use.  */\n-const char *mips_arch_string;   /* for -march=<xxx> */\n-const char *mips_tune_string;   /* for -mtune=<xxx> */\n-const char *mips_isa_string;\t/* for -mips{1,2,3,4} */\n-const char *mips_abi_string;\t/* for -mabi={32,n32,64,eabi} */\n+int mips_abi = MIPS_ABI_DEFAULT;\n \n /* Whether we are generating mips16 hard float code.  In mips16 mode\n    we always set TARGET_SOFT_FLOAT; this variable is nonzero if\n    -msoft-float was not specified by the user, which means that we\n    should arrange to call mips32 hard floating point code.  */\n int mips16_hard_float;\n \n-const char *mips_cache_flush_func = CACHE_FLUSH_FUNC;\n+/* The arguments passed to -march and -mtune.  */\n+static const char *mips_arch_string;\n+static const char *mips_tune_string;\n+\n+/* The architecture selected by -mipsN.  */\n+static const struct mips_cpu_info *mips_isa_info;\n \n-/* Holds string <X> if -mfix-vr4130<X> was passed on the command line.  */\n-const char *mips_fix_vr4130_string;\n+const char *mips_cache_flush_func = CACHE_FLUSH_FUNC;\n \n /* If TRUE, we split addresses into their high and low parts in the RTL.  */\n int mips_split_addresses;\n@@ -754,6 +753,8 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n    | TARGET_FP_EXCEPTIONS_DEFAULT\t\t\\\n    | MASK_CHECK_ZERO_DIV\t\t\t\\\n    | MASK_FUSED_MADD)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION mips_handle_option\n \n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL mips_function_ok_for_sibcall\n@@ -4191,6 +4192,52 @@ mips_set_tune (const struct mips_cpu_info *info)\n     }\n }\n \n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+mips_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    case OPT_mabi_:\n+      if (strcmp (arg, \"32\") == 0)\n+\tmips_abi = ABI_32;\n+      else if (strcmp (arg, \"o64\") == 0)\n+\tmips_abi = ABI_O64;\n+      else if (strcmp (arg, \"n32\") == 0)\n+\tmips_abi = ABI_N32;\n+      else if (strcmp (arg, \"64\") == 0)\n+\tmips_abi = ABI_64;\n+      else if (strcmp (arg, \"eabi\") == 0)\n+\tmips_abi = ABI_EABI;\n+      else\n+\treturn false;\n+      return true;\n+\n+    case OPT_march_:\n+      mips_arch_string = arg;\n+      return mips_parse_cpu (arg) != 0;\n+\n+    case OPT_mtune_:\n+      mips_tune_string = arg;\n+      return mips_parse_cpu (arg) != 0;\n+\n+    case OPT_mips:\n+      mips_isa_info = mips_parse_cpu (ACONCAT ((\"mips\", arg, NULL)));\n+      return mips_isa_info != 0;\n+\n+    case OPT_mflush_func_:\n+      mips_cache_flush_func = arg;\n+      return true;\n+\n+    case OPT_mno_flush_func:\n+      mips_cache_flush_func = NULL;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n \n /* Set up the threshold for data to go into the small data area, instead\n    of the normal data area, and detect any conflicts in the switches.  */\n@@ -4203,57 +4250,28 @@ override_options (void)\n \n   mips_section_threshold = g_switch_set ? g_switch_value : MIPS_DEFAULT_GVALUE;\n \n-  /* Interpret -mabi.  */\n-  mips_abi = MIPS_ABI_DEFAULT;\n-  if (mips_abi_string != 0)\n-    {\n-      if (strcmp (mips_abi_string, \"32\") == 0)\n-\tmips_abi = ABI_32;\n-      else if (strcmp (mips_abi_string, \"o64\") == 0)\n-\tmips_abi = ABI_O64;\n-      else if (strcmp (mips_abi_string, \"n32\") == 0)\n-\tmips_abi = ABI_N32;\n-      else if (strcmp (mips_abi_string, \"64\") == 0)\n-\tmips_abi = ABI_64;\n-      else if (strcmp (mips_abi_string, \"eabi\") == 0)\n-\tmips_abi = ABI_EABI;\n-      else\n-\tfatal_error (\"bad value (%s) for -mabi= switch\", mips_abi_string);\n-    }\n-\n   /* The following code determines the architecture and register size.\n      Similar code was added to GAS 2.14 (see tc-mips.c:md_after_parse_args()).\n      The GAS and GCC code should be kept in sync as much as possible.  */\n \n   if (mips_arch_string != 0)\n-    mips_set_architecture (mips_parse_cpu (\"-march\", mips_arch_string));\n+    mips_set_architecture (mips_parse_cpu (mips_arch_string));\n \n-  if (mips_isa_string != 0)\n+  if (mips_isa_info != 0)\n     {\n-      /* Handle -mipsN.  */\n-      char *whole_isa_str = concat (\"mips\", mips_isa_string, NULL);\n-      const struct mips_cpu_info *isa_info;\n-\n-      isa_info = mips_parse_cpu (\"-mips option\", whole_isa_str);\n-      free (whole_isa_str);\n-\n-      /* -march takes precedence over -mipsN, since it is more descriptive.\n-\t There's no harm in specifying both as long as the ISA levels\n-\t are the same.  */\n-      if (mips_arch_info != 0 && mips_isa != isa_info->isa)\n-\terror (\"-mips%s conflicts with the other architecture options, \"\n-\t       \"which specify a MIPS%d processor\",\n-\t       mips_isa_string, mips_isa);\n-\n-      /* Set architecture based on the given option.  */\n-      mips_set_architecture (isa_info);\n+      if (mips_arch_info == 0)\n+\tmips_set_architecture (mips_isa_info);\n+      else if (mips_arch_info->isa != mips_isa_info->isa)\n+\terror (\"-%s conflicts with the other architecture options, \"\n+\t       \"which specify a %s processor\",\n+\t       mips_isa_info->name,\n+\t       mips_cpu_info_from_isa (mips_arch_info->isa)->name);\n     }\n \n   if (mips_arch_info == 0)\n     {\n #ifdef MIPS_CPU_STRING_DEFAULT\n-      mips_set_architecture (mips_parse_cpu (\"default CPU\",\n-\t\t\t\t\t     MIPS_CPU_STRING_DEFAULT));\n+      mips_set_architecture (mips_parse_cpu (MIPS_CPU_STRING_DEFAULT));\n #else\n       mips_set_architecture (mips_cpu_info_from_isa (MIPS_ISA_DEFAULT));\n #endif\n@@ -4265,7 +4283,7 @@ override_options (void)\n \n   /* Optimize for mips_arch, unless -mtune selects a different processor.  */\n   if (mips_tune_string != 0)\n-    mips_set_tune (mips_parse_cpu (\"-mtune\", mips_tune_string));\n+    mips_set_tune (mips_parse_cpu (mips_tune_string));\n \n   if (mips_tune_info == 0)\n     mips_set_tune (mips_arch_info);\n@@ -4336,9 +4354,6 @@ override_options (void)\n   if (TARGET_INT64 && !TARGET_LONG64)\n     error (\"unsupported combination: %s\", \"-mint64 -mlong32\");\n \n-  if (mips_fix_vr4130_string && mips_fix_vr4130_string[0] != 0)\n-    error (\"unrecognized option %<-mfix-vr4130%s%>\", mips_fix_vr4130_string);\n-\n   if (MIPS_MARCH_CONTROLS_SOFT_FLOAT\n       && (target_flags_explicit & MASK_SOFT_FLOAT) == 0)\n     {\n@@ -9177,15 +9192,13 @@ mips_matching_cpu_name_p (const char *canonical, const char *given)\n }\n \n \n-/* Parse an option that takes the name of a processor as its argument.\n-   OPTION is the name of the option and CPU_STRING is the argument.\n-   Return the corresponding processor enumeration if the CPU_STRING is\n-   recognized, otherwise report an error and return null.\n+/* Return the mips_cpu_info entry for the processor or ISA given\n+   by CPU_STRING.  Return null if the string isn't recognised.\n \n    A similar function exists in GAS.  */\n \n static const struct mips_cpu_info *\n-mips_parse_cpu (const char *option, const char *cpu_string)\n+mips_parse_cpu (const char *cpu_string)\n {\n   const struct mips_cpu_info *p;\n   const char *s;\n@@ -9217,7 +9230,6 @@ mips_parse_cpu (const char *option, const char *cpu_string)\n     if (mips_matching_cpu_name_p (p->name, cpu_string))\n       return p;\n \n-  error (\"bad value (%s) for %s\", cpu_string, option);\n   return 0;\n }\n "}, {"sha": "9ef7081c637b8543fff9eb1f7870294cfd59154f", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522e7a2222a240910be4554bf202f21c1aa13e9/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522e7a2222a240910be4554bf202f21c1aa13e9/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d522e7a2222a240910be4554bf202f21c1aa13e9", "patch": "@@ -102,10 +102,6 @@ extern enum processor_type mips_tune;   /* which cpu to schedule for */\n extern int mips_isa;\t\t\t/* architectural level */\n extern int mips_abi;\t\t\t/* which ABI to use */\n extern int mips16_hard_float;\t\t/* mips16 without -msoft-float */\n-extern const char *mips_arch_string;    /* for -march=<xxx> */\n-extern const char *mips_tune_string;    /* for -mtune=<xxx> */\n-extern const char *mips_isa_string;\t/* for -mips{1,2,3,4} */\n-extern const char *mips_abi_string;\t/* for -mabi={32,n32,64} */\n extern const char *mips_cache_flush_func;/* for -mflush-func= and -mno-flush-func */\n extern const struct mips_cpu_info mips_cpu_info_table[];\n extern const struct mips_cpu_info *mips_arch_info;\n@@ -486,26 +482,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n #endif\n #endif\n \n-#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  SUBTARGET_TARGET_OPTIONS\t\t\t\t\t\t\\\n-  { \"tune=\",    &mips_tune_string,\t\t\t                \\\n-      N_(\"Specify CPU for scheduling purposes\"), 0},                    \\\n-  { \"arch=\",    &mips_arch_string,                                      \\\n-      N_(\"Specify CPU for code generation purposes\"), 0},               \\\n-  { \"abi=\", &mips_abi_string,\t\t\t\t\t\t\\\n-      N_(\"Specify an ABI\"), 0},\t\t\t\t\t\t\\\n-  { \"ips\",\t&mips_isa_string,\t\t\t\t\t\\\n-      N_(\"Specify a Standard MIPS ISA\"), 0},\t\t\t\t\\\n-  { \"no-flush-func\", &mips_cache_flush_func,\t\t\t\t\\\n-      N_(\"Don't call any cache flush functions\"), 0},\t\t\t\\\n-  { \"flush-func=\", &mips_cache_flush_func,\t\t\t\t\\\n-      N_(\"Specify cache flush function\"), 0},\t\t\t\t\\\n-}\n-\n-/* This is meant to be redefined in the host dependent files.  */\n-#define SUBTARGET_TARGET_OPTIONS\n-\n /* Support for a compile-time default CPU, et cetera.  The rules are:\n    --with-arch is ignored if -march is specified or a -mips is specified\n      (other than -mips16)."}, {"sha": "d512632df2a64791f889d674624a22f3473d5db0", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522e7a2222a240910be4554bf202f21c1aa13e9/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522e7a2222a240910be4554bf202f21c1aa13e9/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=d522e7a2222a240910be4554bf202f21c1aa13e9", "patch": "@@ -1,3 +1,7 @@\n+mabi=\n+Target RejectNegative Joined\n+-mabi=ABI\tGenerate code that conforms to the given ABI\n+\n mabicalls\n Target Report Mask(ABICALLS)\n Use SVR4-style PIC\n@@ -6,6 +10,10 @@ mad\n Target Report Var(TARGET_MAD)\n Use PMC-style 'mad' instructions\n \n+march=\n+Target RejectNegative Joined\n+-march=ISA\tGenerate code for the given ISA\n+\n mbranch-likely\n Target Report Mask(BRANCHLIKELY)\n Use Branch Likely instructions, overriding the architecture default\n@@ -84,6 +92,10 @@ mfp64\n Target Report RejectNegative Mask(FLOAT64)\n Use 64-bit floating-point registers\n \n+mflush-func=\n+Target RejectNegative Joined\n+-mflush-func=FUNC\tUse FUNC to flush the cache before calling stack trampolines\n+\n mfused-madd\n Target Report Mask(FUSED_MADD)\n Generate floating-point multiply-add instructions\n@@ -104,6 +116,10 @@ mint64\n Target Report RejectNegative Mask(INT64)\n Use a 64-bit int type\n \n+mips\n+Target RejectNegative Joined\n+-mipsN\tGenerate code for ISA level N\n+\n mips16\n Target Report RejectNegative Mask(MIPS16)\n Generate mips16 code\n@@ -132,6 +148,10 @@ mmips-tfile\n Target\n Use the mips-tfile postpass\n \n+mno-flush-func\n+Target RejectNegative\n+Do not use a cache-flushing function before calling stack trampolines\n+\n mno-mips16\n Target Report RejectNegative InverseMask(MIPS16)\n Generate normal-mode code\n@@ -160,6 +180,10 @@ msym32\n Target Report Var(TARGET_SYM32)\n Assume all symbols have 32-bit values\n \n+mtune=\n+Target RejectNegative Joined\n+-mtune=PROCESSOR\tOptimize the output for PROCESSOR\n+\n muninit-const-in-rodata\n Target Report Var(TARGET_UNINIT_CONST_IN_RODATA)\n Put uninitialized constants in ROM (needs -membedded-data)"}, {"sha": "855e04adeb2c2912790b268bf3ed7f2f602613ce", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d522e7a2222a240910be4554bf202f21c1aa13e9/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d522e7a2222a240910be4554bf202f21c1aa13e9/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d522e7a2222a240910be4554bf202f21c1aa13e9", "patch": "@@ -1067,7 +1067,10 @@ compile_file (void)\n void\n display_target_options (void)\n {\n-  int undoc, i;\n+  int undoc;\n+#if defined (TARGET_SWITCHES) || defined (TARGET_OPTIONS)\n+  int i;\n+#endif\n   unsigned int cli;\n   static bool displayed = false;\n "}]}