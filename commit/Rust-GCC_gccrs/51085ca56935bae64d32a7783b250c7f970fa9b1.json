{"sha": "51085ca56935bae64d32a7783b250c7f970fa9b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEwODVjYTU2OTM1YmFlNjRkMzJhNzc4M2IyNTBjN2Y5NzBmYTliMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-10-20T20:44:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-10-20T20:44:26Z"}, "message": "i386-protos.h (ix86_pre_reload_split): Declare.\n\n\t* config/i386/i386-protos.h (ix86_pre_reload_split): Declare.\n\t* config/i386/i386.c (ix86_pre_reload_split): New function.\n\t* config/i386/i386.md (*fix_trunc<mode>_i387_1, *add<mode>3_eq,\n\t*add<mode>3_ne, *add<mode>3_eq_0, *add<mode>3_ne_0, *add<mode>3_eq,\n\t*add<mode>3_ne, *add<mode>3_eq_1, *add<mode>3_eq_0, *add<mode>3_ne_0,\n\t*anddi3_doubleword, *andndi3_doubleword, *<code>di3_doubleword,\n\t*one_cmpldi2_doubleword, *ashl<dwi>3_doubleword_mask,\n\t*ashl<dwi>3_doubleword_mask_1, *ashl<mode>3_mask, *ashl<mode>3_mask_1,\n\t*<shift_insn><mode>3_mask, *<shift_insn><mode>3_mask_1,\n\t*<shift_insn><dwi>3_doubleword_mask,\n\t*<shift_insn><dwi>3_doubleword_mask_1, *<rotate_insn><mode>3_mask,\n\t*<rotate_insn><mode>3_mask_1, *<btsc><mode>_mask, *<btsc><mode>_mask_1,\n\t*btr<mode>_mask, *btr<mode>_mask_1, *jcc_bt<mode>, *jcc_bt<mode>_1,\n\t*jcc_bt<mode>_mask, *popcounthi2_1, frndintxf2_<rounding>,\n\t*fist<mode>2_<rounding>_1, *<code><mode>3_1, *<code>di3_doubleword):\n\tUse ix86_pre_reload_split instead of can_create_pseudo_p in condition.\n\t* config/i386/sse.md (*sse4_1_<code>v8qiv8hi2<mask_name>_2,\n\t*avx2_<code>v8qiv8si2<mask_name>_2,\n\t*sse4_1_<code>v4qiv4si2<mask_name>_2,\n\t*sse4_1_<code>v4hiv4si2<mask_name>_2,\n\t*avx512f_<code>v8qiv8di2<mask_name>_2,\n\t*avx2_<code>v4qiv4di2<mask_name>_2, *avx2_<code>v4hiv4di2<mask_name>_2,\n\t*sse4_1_<code>v2hiv2di2<mask_name>_2,\n\t*sse4_1_<code>v2siv2di2<mask_name>_2, sse4_2_pcmpestr,\n\tsse4_2_pcmpistr): Likewise.\n\nFrom-SVN: r277216", "tree": {"sha": "5f4abb00754f7e8e7ff2219341752962769f86fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f4abb00754f7e8e7ff2219341752962769f86fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51085ca56935bae64d32a7783b250c7f970fa9b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51085ca56935bae64d32a7783b250c7f970fa9b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51085ca56935bae64d32a7783b250c7f970fa9b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51085ca56935bae64d32a7783b250c7f970fa9b1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efbf0f1ed205adee3d5bd7267c977f2b39e6cac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efbf0f1ed205adee3d5bd7267c977f2b39e6cac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efbf0f1ed205adee3d5bd7267c977f2b39e6cac3"}], "stats": {"total": 135, "additions": 88, "deletions": 47}, "files": [{"sha": "6b9a57bb63287633992637355a6c513ab759e254", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51085ca56935bae64d32a7783b250c7f970fa9b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51085ca56935bae64d32a7783b250c7f970fa9b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51085ca56935bae64d32a7783b250c7f970fa9b1", "patch": "@@ -1,3 +1,31 @@\n+2019-10-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386-protos.h (ix86_pre_reload_split): Declare.\n+\t* config/i386/i386.c (ix86_pre_reload_split): New function.\n+\t* config/i386/i386.md (*fix_trunc<mode>_i387_1, *add<mode>3_eq,\n+\t*add<mode>3_ne, *add<mode>3_eq_0, *add<mode>3_ne_0, *add<mode>3_eq,\n+\t*add<mode>3_ne, *add<mode>3_eq_1, *add<mode>3_eq_0, *add<mode>3_ne_0,\n+\t*anddi3_doubleword, *andndi3_doubleword, *<code>di3_doubleword,\n+\t*one_cmpldi2_doubleword, *ashl<dwi>3_doubleword_mask,\n+\t*ashl<dwi>3_doubleword_mask_1, *ashl<mode>3_mask, *ashl<mode>3_mask_1,\n+\t*<shift_insn><mode>3_mask, *<shift_insn><mode>3_mask_1,\n+\t*<shift_insn><dwi>3_doubleword_mask,\n+\t*<shift_insn><dwi>3_doubleword_mask_1, *<rotate_insn><mode>3_mask,\n+\t*<rotate_insn><mode>3_mask_1, *<btsc><mode>_mask, *<btsc><mode>_mask_1,\n+\t*btr<mode>_mask, *btr<mode>_mask_1, *jcc_bt<mode>, *jcc_bt<mode>_1,\n+\t*jcc_bt<mode>_mask, *popcounthi2_1, frndintxf2_<rounding>,\n+\t*fist<mode>2_<rounding>_1, *<code><mode>3_1, *<code>di3_doubleword):\n+\tUse ix86_pre_reload_split instead of can_create_pseudo_p in condition.\n+\t* config/i386/sse.md (*sse4_1_<code>v8qiv8hi2<mask_name>_2,\n+\t*avx2_<code>v8qiv8si2<mask_name>_2,\n+\t*sse4_1_<code>v4qiv4si2<mask_name>_2,\n+\t*sse4_1_<code>v4hiv4si2<mask_name>_2,\n+\t*avx512f_<code>v8qiv8di2<mask_name>_2,\n+\t*avx2_<code>v4qiv4di2<mask_name>_2, *avx2_<code>v4hiv4di2<mask_name>_2,\n+\t*sse4_1_<code>v2hiv2di2<mask_name>_2,\n+\t*sse4_1_<code>v2siv2di2<mask_name>_2, sse4_2_pcmpestr,\n+\tsse4_2_pcmpistr): Likewise.\n+\n 2019-10-20  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (Configuration, --enable-objc-gc): hboehm.info"}, {"sha": "ced1780be23f6ea50a6fd1a190e18bf5ecc6eab1", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51085ca56935bae64d32a7783b250c7f970fa9b1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51085ca56935bae64d32a7783b250c7f970fa9b1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=51085ca56935bae64d32a7783b250c7f970fa9b1", "patch": "@@ -55,6 +55,7 @@ extern rtx standard_80387_constant_rtx (int);\n extern int standard_sse_constant_p (rtx, machine_mode);\n extern const char *standard_sse_constant_opcode (rtx_insn *, rtx *);\n extern bool ix86_standard_x87sse_constant_load_p (const rtx_insn *, rtx);\n+extern bool ix86_pre_reload_split (void);\n extern bool symbolic_reference_mentioned_p (rtx);\n extern bool extended_reg_mentioned_p (rtx);\n extern bool x86_extended_QIreg_mentioned_p (rtx_insn *);"}, {"sha": "5354cdba9dc16a75881ddde26470b8a213fd8333", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51085ca56935bae64d32a7783b250c7f970fa9b1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51085ca56935bae64d32a7783b250c7f970fa9b1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=51085ca56935bae64d32a7783b250c7f970fa9b1", "patch": "@@ -4894,6 +4894,18 @@ ix86_standard_x87sse_constant_load_p (const rtx_insn *insn, rtx dst)\n   return true;\n }\n \n+/* Predicate for pre-reload splitters with associated instructions,\n+   which can match any time before the split1 pass (usually combine),\n+   then are unconditionally split in that pass and should not be\n+   matched again afterwards.  */\n+\n+bool\n+ix86_pre_reload_split (void)\n+{\n+  return (can_create_pseudo_p ()\n+\t  && !(cfun->curr_properties & PROP_rtl_split_insns));\n+}\n+\n /* Returns true if OP contains a symbol reference */\n \n bool"}, {"sha": "5e0795953d843828febacb7cb2e7219b46c86b0f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51085ca56935bae64d32a7783b250c7f970fa9b1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51085ca56935bae64d32a7783b250c7f970fa9b1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=51085ca56935bae64d32a7783b250c7f970fa9b1", "patch": "@@ -4920,7 +4920,7 @@\n    && !TARGET_FISTTP\n    && !(SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n \t && (TARGET_64BIT || <MODE>mode != DImode))\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -6857,7 +6857,7 @@\n \t  (match_operand:SWI 2 \"<general_operand>\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -6881,7 +6881,7 @@\n    && (<MODE>mode != DImode\n        || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n    && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -6904,7 +6904,7 @@\n \t  (match_operand:SWI 1 \"<general_operand>\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_unary_operator_ok (PLUS, <MODE>mode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -6925,7 +6925,7 @@\n \t  (match_operand:SWI 1 \"<general_operand>\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_unary_operator_ok (PLUS, <MODE>mode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -6951,7 +6951,7 @@\n \t  (match_operand:SWI 2 \"<general_operand>\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -6976,7 +6976,7 @@\n    && (<MODE>mode != DImode\n        || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n    && ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -7005,7 +7005,7 @@\n    && (<MODE>mode != DImode\n        || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n    && ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -7028,7 +7028,7 @@\n \t  (eq:SWI (match_operand 2 \"int_nonimmediate_operand\") (const_int 0))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_unary_operator_ok (MINUS, <MODE>mode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -7049,7 +7049,7 @@\n \t  (ne:SWI (match_operand 2 \"int_nonimmediate_operand\") (const_int 0))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_unary_operator_ok (MINUS, <MODE>mode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -8621,7 +8621,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n    && ix86_binary_operator_ok (AND, DImode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -9076,7 +9076,7 @@\n \t  (match_operand:DI 2 \"nonimmediate_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\")\n \n (define_split\n@@ -9176,7 +9176,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n    && ix86_binary_operator_ok (<CODE>, DImode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -9898,7 +9898,7 @@\n \t(not:DI (match_operand:DI 1 \"nonimmediate_operand\")))]\n   \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n    && ix86_unary_operator_ok (NOT, DImode, operands)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -10032,7 +10032,7 @@\n \t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(INTVAL (operands[3]) & (<MODE_SIZE> * BITS_PER_UNIT)) == 0\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -10073,7 +10073,7 @@\n \t    (match_operand:QI 3 \"const_int_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(INTVAL (operands[3]) & (<MODE_SIZE> * BITS_PER_UNIT)) == 0\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -10228,7 +10228,7 @@\n   \"ix86_binary_operator_ok (ASHIFT, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -10250,7 +10250,7 @@\n   \"ix86_binary_operator_ok (ASHIFT, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -10748,7 +10748,7 @@\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -10770,7 +10770,7 @@\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -10791,7 +10791,7 @@\n \t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(INTVAL (operands[3]) & (<MODE_SIZE> * BITS_PER_UNIT)) == 0\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -10832,7 +10832,7 @@\n \t    (match_operand:QI 3 \"const_int_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(INTVAL (operands[3]) & (<MODE_SIZE> * BITS_PER_UNIT)) == 0\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -11298,7 +11298,7 @@\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -11319,7 +11319,7 @@\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -11622,7 +11622,7 @@\n   \"TARGET_USE_BT\n    && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -11647,7 +11647,7 @@\n   \"TARGET_USE_BT\n    && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -11687,7 +11687,7 @@\n   \"TARGET_USE_BT\n    && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -11712,7 +11712,7 @@\n   \"TARGET_USE_BT\n    && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n@@ -11897,7 +11897,7 @@\n \t  && INTVAL (operands[2])\n \t       >= (optimize_function_for_size_p (cfun) ? 8 : 32))\n        : !memory_operand (operands[1], <MODE>mode))\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CCC FLAGS_REG)\n@@ -11929,7 +11929,7 @@\n \t\t      (pc)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CCC FLAGS_REG)\n@@ -11965,7 +11965,7 @@\n   \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CCC FLAGS_REG)\n@@ -14058,7 +14058,7 @@\n \t  (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_POPCNT\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -16479,7 +16479,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_USE_FANCY_MATH_387\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math)\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -16582,7 +16582,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -17973,7 +17973,7 @@\n \t  (match_operand:MAXMIN_IMODE 2 \"nonimmediate_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(TARGET_64BIT || <MODE>mode != DImode) && TARGET_STV\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -18002,7 +18002,7 @@\n \t\t   (match_operand:DI 2 \"nonimmediate_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_STV && TARGET_AVX512VL\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)"}, {"sha": "403e91d4b176d5cc5c263f9f0cd72207d7cc92b4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51085ca56935bae64d32a7783b250c7f970fa9b1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51085ca56935bae64d32a7783b250c7f970fa9b1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=51085ca56935bae64d32a7783b250c7f970fa9b1", "patch": "@@ -17363,7 +17363,7 @@\n \t\t       (const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512bw_condition> && <mask_avx512vl_condition>\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -17420,7 +17420,7 @@\n \t\t       (const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n   \"TARGET_AVX2 && <mask_avx512vl_condition>\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -17469,7 +17469,7 @@\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -17535,7 +17535,7 @@\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -17579,7 +17579,7 @@\n \t\t       (const_int 2) (const_int 3)\n \t\t       (const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n-  \"TARGET_AVX512F && can_create_pseudo_p ()\"\n+  \"TARGET_AVX512F && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -17626,7 +17626,7 @@\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX2 && <mask_avx512vl_condition>\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -17693,7 +17693,7 @@\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX2 && <mask_avx512vl_condition>\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -17740,7 +17740,7 @@\n \t\t(const_int 1)) 0)\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -17804,7 +17804,7 @@\n \t\t(const_int 0)) 0)\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n@@ -18087,7 +18087,7 @@\n \t   (match_dup 6)]\n \t  UNSPEC_PCMPESTR))]\n   \"TARGET_SSE4_2\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]\n@@ -18223,7 +18223,7 @@\n \t   (match_dup 4)]\n \t  UNSPEC_PCMPISTR))]\n   \"TARGET_SSE4_2\n-   && can_create_pseudo_p ()\"\n+   && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(const_int 0)]"}]}