{"sha": "bd6758592b13f86328bb6ed590a2af3522e1caeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ2NzU4NTkyYjEzZjg2MzI4YmI2ZWQ1OTBhMmFmMzUyMmUxY2FlYg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.co.uk", "date": "2000-11-20T14:17:59Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2000-11-20T14:17:59Z"}, "message": "Fix sh problems at -O0\n\nFrom-SVN: r37582", "tree": {"sha": "ffd78a6403434fd015dbca7b4eae3e9773614b66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffd78a6403434fd015dbca7b4eae3e9773614b66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd6758592b13f86328bb6ed590a2af3522e1caeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6758592b13f86328bb6ed590a2af3522e1caeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd6758592b13f86328bb6ed590a2af3522e1caeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6758592b13f86328bb6ed590a2af3522e1caeb/comments", "author": null, "committer": null, "parents": [{"sha": "badc2279d9332e5850c428f651a0c3e9eef45f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/badc2279d9332e5850c428f651a0c3e9eef45f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/badc2279d9332e5850c428f651a0c3e9eef45f90"}], "stats": {"total": 51, "additions": 15, "deletions": 36}, "files": [{"sha": "a7c688a556407bfd5de6cde0b06f19ef74f0dbb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6758592b13f86328bb6ed590a2af3522e1caeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6758592b13f86328bb6ed590a2af3522e1caeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd6758592b13f86328bb6ed590a2af3522e1caeb", "patch": "@@ -1,3 +1,9 @@\n+2000-11-20  Bernd Schmidt  <bernds@redhat.co.uk>\n+\n+\t* toplev.c (rest_of_compilation): Run optimize_mode_switching even\n+\tif not optimizing.\n+\t* sh.c (emit_sf_insn, emit_df_insn): Just call emit_insn.\n+\n 2000-11-19  Richard Henderson  <rth@redhat.com>\n \n \t* crtstuff.c (force_to_data): Use array size 1 not 0."}, {"sha": "675920fdd13332c4bac8f84e1905169033cf25cc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6758592b13f86328bb6ed590a2af3522e1caeb/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6758592b13f86328bb6ed590a2af3522e1caeb/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=bd6758592b13f86328bb6ed590a2af3522e1caeb", "patch": "@@ -5014,38 +5014,14 @@ void\n emit_sf_insn (pat)\n      rtx pat;\n {\n-  rtx addr;\n-  /* When generating reload insns,  we must not create new registers.  FPSCR\n-     should already have the correct value, so do nothing to change it.  */\n-  if (! TARGET_FPU_SINGLE && ! reload_in_progress && optimize < 1)\n-    {\n-      addr = gen_reg_rtx (SImode);\n-      emit_insn (gen_fpu_switch0 (addr));\n-    }\n   emit_insn (pat);\n-  if (! TARGET_FPU_SINGLE && ! reload_in_progress && optimize < 1)\n-    {\n-      addr = gen_reg_rtx (SImode);\n-      emit_insn (gen_fpu_switch1 (addr));\n-    }\n }\n \n void\n emit_df_insn (pat)\n      rtx pat;\n {\n-  rtx addr;\n-  if (TARGET_FPU_SINGLE && ! reload_in_progress && optimize < 1)\n-    {\n-      addr = gen_reg_rtx (SImode);\n-      emit_insn (gen_fpu_switch0 (addr));\n-    }\n   emit_insn (pat);\n-  if (TARGET_FPU_SINGLE && ! reload_in_progress && optimize < 1)\n-    {\n-      addr = gen_reg_rtx (SImode);\n-      emit_insn (gen_fpu_switch1 (addr));\n-    }\n }\n \n void"}, {"sha": "536e496daed2d5995ef4a12658edd7318dce36e0", "filename": "gcc/toplev.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6758592b13f86328bb6ed590a2af3522e1caeb/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6758592b13f86328bb6ed590a2af3522e1caeb/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=bd6758592b13f86328bb6ed590a2af3522e1caeb", "patch": "@@ -3345,20 +3345,17 @@ rest_of_compilation (decl)\n     register_life_up_to_date = 0;\n \n #ifdef OPTIMIZE_MODE_SWITCHING\n-  if (optimize)\n-    {\n-      timevar_push (TV_GCSE);\n-\n-      if (optimize_mode_switching (NULL_PTR))\n-\t{\n-\t  /* We did work, and so had to regenerate global life information.\n-\t     Take advantage of this and don't re-recompute register life\n-\t     information below.  */\n-\t  register_life_up_to_date = 1;\n-\t}\n+  timevar_push (TV_GCSE);\n \n-      timevar_pop (TV_GCSE);\n+  if (optimize_mode_switching (NULL_PTR))\n+    {\n+      /* We did work, and so had to regenerate global life information.\n+\t Take advantage of this and don't re-recompute register life\n+\t information below.  */\n+      register_life_up_to_date = 1;\n     }\n+\n+  timevar_pop (TV_GCSE);\n #endif\n \n #ifdef INSN_SCHEDULING"}]}