{"sha": "75ddf8b0d235e6ee35ab1759f519e1bbc052e142", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVkZGY4YjBkMjM1ZTZlZTM1YWIxNzU5ZjUxOWUxYmJjMDUyZTE0Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-02T19:38:36Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-02T19:38:36Z"}, "message": "Add prototypes for static functions; delete forward declarations of non-static functions.\n\nAdd prototypes for static functions; delete forward declarations of\nnon-static functions.\n(initializer_constant_valid_p): Add missing parameter to recursive call.\n\nFrom-SVN: r6467", "tree": {"sha": "ec632cee9008a1e649e58ac067c03d891db75066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec632cee9008a1e649e58ac067c03d891db75066"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75ddf8b0d235e6ee35ab1759f519e1bbc052e142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ddf8b0d235e6ee35ab1759f519e1bbc052e142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ddf8b0d235e6ee35ab1759f519e1bbc052e142", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ddf8b0d235e6ee35ab1759f519e1bbc052e142/comments", "author": null, "committer": null, "parents": [{"sha": "9c10d25f5e53a68301de1680aee9d328bcfe96dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c10d25f5e53a68301de1680aee9d328bcfe96dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c10d25f5e53a68301de1680aee9d328bcfe96dc"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "5fbe53087c5e56e3aecb4d436ab4e72eafad4d81", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ddf8b0d235e6ee35ab1759f519e1bbc052e142/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ddf8b0d235e6ee35ab1759f519e1bbc052e142/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=75ddf8b0d235e6ee35ab1759f519e1bbc052e142", "patch": "@@ -40,29 +40,35 @@ static int missing_braces_mentioned;\n extern char *index ();\n extern char *rindex ();\n \n-int mark_addressable ();\n-static tree convert_for_assignment ();\n-static void warn_for_assignment ();\n-static int function_types_compatible_p ();\n-static int type_lists_compatible_p ();\n-int self_promoting_args_p ();\n-static int self_promoting_type_p ();\n-static int comp_target_types ();\n-static tree pointer_int_sum ();\n-static tree pointer_diff ();\n-static tree convert_sequence ();\n-static tree unary_complex_lvalue ();\n-static tree process_init_constructor ();\n-static tree convert_arguments ();\n-static char *get_spelling ();\n-static tree digest_init ();\n-static void pedantic_lvalue_warning ();\n-tree truthvalue_conversion ();\n-void incomplete_type_error ();\n-void readonly_warning ();\n-static tree internal_build_compound_expr ();\n-\n-void process_init_element ();\n+static tree quality_type\t\tPROTO((tree, tree));\n+static int comp_target_types\t\tPROTO((tree, tree));\n+static int function_types_compatible_p\tPROTO((tree, tree));\n+static int type_lists_compatible_p\tPROTO((tree, tree));\n+static int self_promoting_type_p\tPROTO((tree));\n+static tree decl_constant_value\t\tPROTO((tree));\n+static tree lookup_field\t\tPROTO((tree, tree, tree *));\n+static tree convert_arguments\t\tPROTO((tree, tree, tree, tree));\n+static tree pointer_int_sum\t\tPROTO((enum tree_code, tree, tree));\n+static tree pointer_diff\t\tPROTO((tree, tree));\n+static tree unary_complex_lvalue\tPROTO((enum tree_code, tree));\n+static void pedantic_lvalue_warning\tPROTO((enum tree_code));\n+static tree internal_build_compound_expr PROTO((tree, int));\n+static tree convert_for_assignment\tPROTO((tree, tree, char *, tree,\n+\t\t\t\t\t       tree, int));\n+static void warn_for_assignment\t\tPROTO((char *, char *, tree, int));\n+static tree valid_compound_expr_initializer PROTO((tree, tree));\n+static void push_string\t\t\tPROTO((char *));\n+static void push_member_name\t\tPROTO((tree));\n+static void push_array_bounds\t\tPROTO((int));\n+static int spelling_length\t\tPROTO((void));\n+static char *print_spelling\t\tPROTO((char *));\n+static char *get_spelling\t\tPROTO((char *));\n+static void warning_init\t\tPROTO((char *, char *,\n+\t\t\t\t\t       char *));\n+static tree digest_init\t\t\tPROTO((tree, tree, int, int));\n+static void check_init_type_bitfields\tPROTO((tree));\n+static void output_init_element\t\tPROTO((tree, tree, tree, int));\n+static void output_pending_init_elements PROTO((int));\n \f\n /* Do `exp = require_complete_type (exp);' to make sure exp\n    does not have an incomplete type.  (That includes void types.)  */\n@@ -4042,7 +4048,9 @@ initializer_constant_valid_p (value, endtype)\n     case CONSTRUCTOR:\n       if (TREE_CODE (TREE_TYPE (value)) == UNION_TYPE\n \t  && TREE_CONSTANT (value))\n-\treturn initializer_constant_valid_p (TREE_VALUE (CONSTRUCTOR_ELTS (value)));\n+\treturn\n+\t  initializer_constant_valid_p (TREE_VALUE (CONSTRUCTOR_ELTS (value)),\n+\t\t\t\t\tendtype);\n \t\n       return TREE_STATIC (value) ? null_pointer_node : 0;\n \n@@ -4693,10 +4701,6 @@ digest_init (type, init, require_constant, constructor_constant)\n \f\n /* Handle initializers that use braces.  */\n \n-static void output_init_element ();\n-static void output_pending_init_elements ();\n-static void check_init_type_bitfields ();\n-\n /* Type of object we are accumulating a constructor for.\n    This type is always a RECORD_TYPE, UNION_TYPE or ARRAY_TYPE.  */\n static tree constructor_type;"}]}