{"sha": "fef015a857bef16bfc6304fab250ad0195c4fb1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVmMDE1YTg1N2JlZjE2YmZjNjMwNGZhYjI1MGFkMDE5NWM0ZmIxYQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2009-06-23T12:10:06Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2009-06-23T12:10:06Z"}, "message": "tree-ssa-math-opts.c (find_bswap): Increase the search depth in order to match bswaps with signed source operands.\n\n2009-06-23  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* tree-ssa-math-opts.c (find_bswap): Increase the search depth in\n\torder to match bswaps with signed source operands.\n\n2009-06-23  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* gcc.dg/optimize-bswapsi-1.c: Add new bswap implementation.\n\t* gcc.dg/optimize-bswapdi-1.c: Likewise.\n\nFrom-SVN: r148848", "tree": {"sha": "5b3dc81258ae8c58b8f741a5606cce8a4b23b663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b3dc81258ae8c58b8f741a5606cce8a4b23b663"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fef015a857bef16bfc6304fab250ad0195c4fb1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef015a857bef16bfc6304fab250ad0195c4fb1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef015a857bef16bfc6304fab250ad0195c4fb1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef015a857bef16bfc6304fab250ad0195c4fb1a/comments", "author": null, "committer": null, "parents": [{"sha": "792569a94a163072c0da7c5aaa53a3a31c649888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/792569a94a163072c0da7c5aaa53a3a31c649888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/792569a94a163072c0da7c5aaa53a3a31c649888"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "73c0c3668122745e5ec3447b21fe665da9cb77c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef015a857bef16bfc6304fab250ad0195c4fb1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef015a857bef16bfc6304fab250ad0195c4fb1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fef015a857bef16bfc6304fab250ad0195c4fb1a", "patch": "@@ -1,3 +1,8 @@\n+2009-06-23  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* tree-ssa-math-opts.c (find_bswap): Increase the search depth in\n+\torder to match bswaps with signed source operands.\n+\n 2009-06-23  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* sdbout.c (sdbout_one_type): Fix braces in switch."}, {"sha": "7158684ca129d07d7da174a76fc12e0c61bb2267", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef015a857bef16bfc6304fab250ad0195c4fb1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef015a857bef16bfc6304fab250ad0195c4fb1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fef015a857bef16bfc6304fab250ad0195c4fb1a", "patch": "@@ -1,3 +1,8 @@\n+2009-06-23  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* gcc.dg/optimize-bswapsi-1.c: Add new bswap implementation.\n+\t* gcc.dg/optimize-bswapdi-1.c: Likewise.\n+\n 2009-06-22  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.target/mips/truncate-3.c: New test."}, {"sha": "449dc19f7652419c4a1a9331fff505b04cf34041", "filename": "gcc/testsuite/gcc.dg/optimize-bswapdi-1.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef015a857bef16bfc6304fab250ad0195c4fb1a/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef015a857bef16bfc6304fab250ad0195c4fb1a/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c?ref=fef015a857bef16bfc6304fab250ad0195c4fb1a", "patch": "@@ -24,5 +24,25 @@ swap64 (uint64_t in)\n   return __const_swab64 (in);\n }\n \n-/* { dg-final { scan-tree-dump-times \"64 bit bswap implementation found at\" 1 \"bswap\" } } */\n+/* This variant is currently used by libgcc.  The difference is that\n+   the bswap source and destination have a signed integer type which\n+   requires a slightly higher search depth in order to dive through\n+   the cast as well.  */\n+\n+typedef int DItype __attribute__ ((mode (DI)));\n+DItype\n+swap64_b (DItype u)\n+{\n+  return ((((u) & 0xff00000000000000ull) >> 56)\n+\t  | (((u) & 0x00ff000000000000ull) >> 40)\n+\t  | (((u) & 0x0000ff0000000000ull) >> 24)\n+\t  | (((u) & 0x000000ff00000000ull) >>  8)\n+\t  | (((u) & 0x00000000ff000000ull) <<  8)\n+\t  | (((u) & 0x0000000000ff0000ull) << 24)\n+\t  | (((u) & 0x000000000000ff00ull) << 40)\n+\t  | (((u) & 0x00000000000000ffull) << 56));\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"64 bit bswap implementation found at\" 2 \"bswap\" } } */\n /* { dg-final { cleanup-tree-dump \"bswap\" } } */"}, {"sha": "7b27b930838d901e8f62e0a116c95cdd969ea07e", "filename": "gcc/testsuite/gcc.dg/optimize-bswapsi-1.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef015a857bef16bfc6304fab250ad0195c4fb1a/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef015a857bef16bfc6304fab250ad0195c4fb1a/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c?ref=fef015a857bef16bfc6304fab250ad0195c4fb1a", "patch": "@@ -31,5 +31,21 @@ swap32_b (uint32_t in)\n   return a;\n }\n \n-/* { dg-final { scan-tree-dump-times \"32 bit bswap implementation found at\" 2 \"bswap\" } } */\n+/* This variant is currently used by libgcc.  The difference is that\n+   the bswap source and destination have a signed integer type which\n+   requires a slightly higher search depth in order to dive through\n+   the cast as well.  */\n+\n+typedef int SItype __attribute__ ((mode (SI)));\n+\n+SItype\n+swap32_c (SItype u)\n+{\n+  return ((((u) & 0xff000000) >> 24)\n+\t  | (((u) & 0x00ff0000) >>  8)\n+\t  | (((u) & 0x0000ff00) <<  8)\n+\t  | (((u) & 0x000000ff) << 24));\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"32 bit bswap implementation found at\" 3 \"bswap\" } } */\n /* { dg-final { cleanup-tree-dump \"bswap\" } } */"}, {"sha": "20ddbad5e55cd14d9f17d3f6682701a677a48c56", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef015a857bef16bfc6304fab250ad0195c4fb1a/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef015a857bef16bfc6304fab250ad0195c4fb1a/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=fef015a857bef16bfc6304fab250ad0195c4fb1a", "patch": "@@ -1125,9 +1125,14 @@ find_bswap (gimple stmt)\n   struct symbolic_number n;\n   tree source_expr;\n \n+  /* The last parameter determines the depth search limit.  It usually\n+     correlates directly to the number of bytes to be touched.  We\n+     increase that number by one here in order to also cover signed ->\n+     unsigned conversions of the src operand as can be seen in\n+     libgcc.  */\n   source_expr =  find_bswap_1 (stmt, &n,\n \t\t\t       TREE_INT_CST_LOW (\n-\t\t\t\t TYPE_SIZE_UNIT (gimple_expr_type (stmt))));\n+\t\t\t\t TYPE_SIZE_UNIT (gimple_expr_type (stmt))) + 1);\n \n   if (!source_expr)\n     return NULL_TREE;"}]}