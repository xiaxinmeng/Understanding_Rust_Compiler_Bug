{"sha": "0e00b68b77f4cc89684ed1b2364c71d175676acf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwMGI2OGI3N2Y0Y2M4OTY4NGVkMWIyMzY0YzcxZDE3NTY3NmFjZg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-09-25T17:04:45Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-09-25T17:04:45Z"}, "message": "c-common.c (format_char_info): Add flags2; update comments.\n\n\t* c-common.c (format_char_info): Add flags2; update comments.\n\t(print_char_table, scan_char_table, time_char_table): Split some\n\tflags out into flags2.\n\t(check_format_info): Use flags2 for those flags, for identifying\n\tthe initial character of a scanf scanset, and for identifying\n\tprintf formats where the '0' flag is ignored with precision.\n\nFrom-SVN: r36623", "tree": {"sha": "ae21d417c58e6d47adcec7ee9db25e70b0d222b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae21d417c58e6d47adcec7ee9db25e70b0d222b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e00b68b77f4cc89684ed1b2364c71d175676acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e00b68b77f4cc89684ed1b2364c71d175676acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e00b68b77f4cc89684ed1b2364c71d175676acf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e00b68b77f4cc89684ed1b2364c71d175676acf/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "047c1c922bc04add0a50710f9c2a816f61ccf8b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047c1c922bc04add0a50710f9c2a816f61ccf8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047c1c922bc04add0a50710f9c2a816f61ccf8b2"}], "stats": {"total": 140, "additions": 76, "deletions": 64}, "files": [{"sha": "0c08c8e0241019d87618326e1d6ca594a1b80f53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e00b68b77f4cc89684ed1b2364c71d175676acf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e00b68b77f4cc89684ed1b2364c71d175676acf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e00b68b77f4cc89684ed1b2364c71d175676acf", "patch": "@@ -1,3 +1,12 @@\n+2000-09-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (format_char_info): Add flags2; update comments.\n+\t(print_char_table, scan_char_table, time_char_table): Split some\n+\tflags out into flags2.\n+\t(check_format_info): Use flags2 for those flags, for identifying\n+\tthe initial character of a scanf scanset, and for identifying\n+\tprintf formats where the '0' flag is ignored with precision.\n+\n 2000-09-25  Hans-Peter Nilsson  <hp@axis.com>\n \n \tChanges below marked \"here\" add TABs on either or both sides,"}, {"sha": "4e630257f156554c7d2ae79641ae07be367ee75b", "filename": "gcc/c-common.c", "status": "modified", "additions": 67, "deletions": 64, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e00b68b77f4cc89684ed1b2364c71d175676acf/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e00b68b77f4cc89684ed1b2364c71d175676acf/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0e00b68b77f4cc89684ed1b2364c71d175676acf", "patch": "@@ -1293,16 +1293,21 @@ typedef struct\n   enum format_std_version std;\n   /* Types accepted for each length modifier.  */\n   format_type_detail types[FMT_LEN_MAX];\n-  /* List of other modifier characters allowed with these options.\n+  /* List of other modifier characters allowed with these specifiers.\n      This lists flags, and additionally \"w\" for width, \"p\" for precision,\n-     \"c\" for generic character pointers being allowed, \"a\" for scanf\n-     \"a\" allocation extension (not applicable in C99 mode), \"*\" for\n-     scanf suppression, \"2\" for strftime two digit year formats, \"3\"\n-     for strftime formats giving two digit years in some locales, \"E\"\n-     and \"O\" for those strftime modifiers, \"o\" if use of strftime \"O\"\n-     is a GNU extension beyond C99, and \"W\" if the argument is a\n-     pointer which is dereferenced and written into.  */\n+     \"a\" for scanf \"a\" allocation extension (not applicable in C99 mode),\n+     \"*\" for scanf suppression, and \"E\" and \"O\" for those strftime\n+     modifiers.  */\n   const char *flag_chars;\n+  /* List of additional flags describing these conversion specifiers.\n+     \"c\" for generic character pointers being allowed, \"2\" for strftime\n+     two digit year formats, \"3\" for strftime formats giving two digit\n+     years in some locales, \"o\" if use of strftime \"O\"\n+     is a GNU extension beyond C99, \"W\" if the argument is a pointer\n+     which is dereferenced and written into, \"i\" for printf integer\n+     formats where the '0' flag is ignored with precision, and \"[\"\n+     for the starting character of a scanf scanset.  */\n+  const char *flags2;\n } format_char_info;\n \n \n@@ -1437,70 +1442,70 @@ static const format_length_info scanf_length_specs[] =\n static const format_char_info print_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",  0, STD_C89, { T89_I,   T99_I,   T89_I,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"-wp0 +'I\" },\n-  { \"oxX\", 0, STD_C89, { T89_UI,  T99_UI,  T89_UI,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0#\"    },\n-  { \"u\",   0, STD_C89, { T89_UI,  T99_UI,  T89_UI,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0'I\"   },\n-  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\" },\n-  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\"  },\n-  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\"       },\n-  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wpc\"     },\n-  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wc\"      },\n-  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"W\"        },\n+  { \"di\",  0, STD_C89, { T89_I,   T99_I,   T89_I,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"-wp0 +'I\", \"i\" },\n+  { \"oxX\", 0, STD_C89, { T89_UI,  T99_UI,  T89_UI,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0#\",    \"i\" },\n+  { \"u\",   0, STD_C89, { T89_UI,  T99_UI,  T89_UI,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0'I\",   \"i\" },\n+  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\", \"\"  },\n+  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\",  \"\"  },\n+  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"\"  },\n+  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"c\" },\n+  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"c\" },\n+  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",         \"W\" },\n   /* C99 conversion specifiers.  */\n-  { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\" },\n-  { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\"  },\n+  { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\", \"\"  },\n+  { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\",  \"\"  },\n   /* X/Open conversion specifiers.  */\n-  { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\"       },\n-  { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\"      },\n+  { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"\"  },\n+  { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"\"  },\n   /* GNU conversion specifiers.  */\n-  { \"m\",   0, STD_EXT, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\"      },\n-  { NULL,  0, 0, NOLENGTHS, NULL }\n+  { \"m\",   0, STD_EXT, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"\"  },\n+  { NULL,  0, 0, NOLENGTHS, NULL, NULL }\n };\n \n static const format_char_info scan_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",    1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"*wW\"   },\n-  { \"ouxX\",  1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"*wW\"   },\n-  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*wW\"   },\n-  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*cwW\"  },\n-  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*acwW\" },\n-  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*acwW\" },\n-  { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*wW\"   },\n-  { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"W\"     },\n+  { \"di\",    1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"*w\",  \"W\"   },\n+  { \"ouxX\",  1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"*w\",  \"W\"   },\n+  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",  \"W\"   },\n+  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",  \"cW\"  },\n+  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\", \"cW\"  },\n+  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\", \"cW[\" },\n+  { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",  \"W\"   },\n+  { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",    \"W\"   },\n   /* C99 conversion specifiers.  */\n-  { \"FaA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*wW\"   },\n+  { \"FaA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",  \"W\"   },\n   /* X/Open conversion specifiers.  */\n-  { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*wW\"   },\n-  { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*awW\"  },\n-  { NULL, 0, 0, NOLENGTHS, NULL }\n+  { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",  \"W\"   },\n+  { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\", \"W\"   },\n+  { NULL, 0, 0, NOLENGTHS, NULL, NULL }\n };\n \n static format_char_info time_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"ABZab\",\t\t0, STD_C89, NOLENGTHS, \"^#\" },\n-  { \"cx\", \t\t0, STD_C89, NOLENGTHS, \"3E\" },\n-  { \"HIMSUWdmw\",\t0, STD_C89, NOLENGTHS, \"-_0Ow\" },\n-  { \"j\",\t\t0, STD_C89, NOLENGTHS, \"-_0Oow\" },\n-  { \"p\",\t\t0, STD_C89, NOLENGTHS, \"#\" },\n-  { \"X\",\t\t0, STD_C89, NOLENGTHS, \"E\" },\n-  { \"y\", \t\t0, STD_C89, NOLENGTHS, \"2EO-_0w\" },\n-  { \"Y\",\t\t0, STD_C89, NOLENGTHS, \"-_0EOow\" },\n-  { \"%\",\t\t0, STD_C89, NOLENGTHS, \"\" },\n+  { \"ABZab\",\t\t0, STD_C89, NOLENGTHS, \"^#\",     \"\"   },\n+  { \"cx\", \t\t0, STD_C89, NOLENGTHS, \"E\",      \"3\"  },\n+  { \"HIMSUWdmw\",\t0, STD_C89, NOLENGTHS, \"-_0Ow\",  \"\"   },\n+  { \"j\",\t\t0, STD_C89, NOLENGTHS, \"-_0Ow\",  \"o\"  },\n+  { \"p\",\t\t0, STD_C89, NOLENGTHS, \"#\",      \"\"   },\n+  { \"X\",\t\t0, STD_C89, NOLENGTHS, \"E\",      \"\"   },\n+  { \"y\", \t\t0, STD_C89, NOLENGTHS, \"EO-_0w\", \"2\"  },\n+  { \"Y\",\t\t0, STD_C89, NOLENGTHS, \"-_0EOw\", \"o\"  },\n+  { \"%\",\t\t0, STD_C89, NOLENGTHS, \"\",       \"\"   },\n   /* C99 conversion specifiers.  */\n-  { \"C\",\t\t0, STD_C99, NOLENGTHS, \"-_0EOow\" },\n-  { \"D\", \t\t0, STD_C99, NOLENGTHS, \"2\" },\n-  { \"eVu\",\t\t0, STD_C99, NOLENGTHS, \"-_0Ow\" },\n-  { \"FRTnrt\",\t\t0, STD_C99, NOLENGTHS, \"\" },\n-  { \"g\", \t\t0, STD_C99, NOLENGTHS, \"2Oo-_0w\" },\n-  { \"G\",\t\t0, STD_C99, NOLENGTHS, \"-_0Oow\" },\n-  { \"h\",\t\t0, STD_C99, NOLENGTHS, \"^#\" },\n-  { \"z\",\t\t0, STD_C99, NOLENGTHS, \"Oo\" },\n+  { \"C\",\t\t0, STD_C99, NOLENGTHS, \"-_0EOw\", \"o\"  },\n+  { \"D\", \t\t0, STD_C99, NOLENGTHS, \"\",       \"2\"  },\n+  { \"eVu\",\t\t0, STD_C99, NOLENGTHS, \"-_0Ow\",  \"\"   },\n+  { \"FRTnrt\",\t\t0, STD_C99, NOLENGTHS, \"\",       \"\"   },\n+  { \"g\", \t\t0, STD_C99, NOLENGTHS, \"O-_0w\",  \"2o\" },\n+  { \"G\",\t\t0, STD_C99, NOLENGTHS, \"-_0Ow\",  \"o\"  },\n+  { \"h\",\t\t0, STD_C99, NOLENGTHS, \"^#\",     \"\"   },\n+  { \"z\",\t\t0, STD_C99, NOLENGTHS, \"O\",      \"o\"  },\n   /* GNU conversion specifiers.  */\n-  { \"kls\",\t\t0, STD_EXT, NOLENGTHS, \"-_0Ow\" },\n-  { \"P\",\t\t0, STD_EXT, NOLENGTHS, \"\" },\n-  { NULL,\t\t0, 0, NOLENGTHS, NULL }\n+  { \"kls\",\t\t0, STD_EXT, NOLENGTHS, \"-_0Ow\",  \"\"   },\n+  { \"P\",\t\t0, STD_EXT, NOLENGTHS, \"\",       \"\"   },\n+  { NULL,\t\t0, 0, NOLENGTHS, NULL, NULL }\n };\n \n \n@@ -2424,7 +2429,7 @@ check_format_info (status, info, params)\n \t\t     format_char, fki->name);\n \t  if (index (flag_chars, 'O') != 0)\n \t    {\n-\t      if (index (fci->flag_chars, 'o') != 0)\n+\t      if (index (fci->flags2, 'o') != 0)\n \t\tstatus_warning (status, \"ISO C does not support `%%O%c'\", format_char);\n \t      else if (!flag_isoc99 && index (fci->flag_chars, 'O') != 0)\n \t\tstatus_warning (status, \"ISO C89 does not support `%%O%c'\", format_char);\n@@ -2434,11 +2439,11 @@ check_format_info (status, info, params)\n \t}\n       if (wide && index (fci->flag_chars, 'w') == 0)\n \tstatus_warning (status, \"width used with `%c' format\", format_char);\n-      if (index (fci->flag_chars, '3') != 0\n+      if (index (fci->flags2, '3') != 0\n \t  || (format_char == 'y' && index (flag_chars, 'E')))\n \tstatus_warning (status, \"`%%%c' yields only last 2 digits of year in some locales\",\n \t\t format_char);\n-      else if (index (fci->flag_chars, '2') != 0)\n+      else if (index (fci->flags2, '2') != 0)\n \tstatus_warning (status, \"`%%%c' yields only last 2 digits of year\", format_char);\n       if (precise && index (fci->flag_chars, 'p') == 0)\n \tstatus_warning (status, \"precision used with `%c' format\", format_char);\n@@ -2451,7 +2456,7 @@ check_format_info (status, info, params)\n       /* The a flag is a GNU extension.  */\n       else if (pedantic && aflag)\n \tstatus_warning (status, \"ISO C does not support the `a' flag\");\n-      if (info->format_type == scanf_format_type && format_char == '[')\n+      if (index (fci->flags2, '[') != 0)\n \t{\n \t  /* Skip over scan set, in case it happens to have '%' in it.  */\n \t  if (*format_chars == '^')\n@@ -2481,9 +2486,7 @@ check_format_info (status, info, params)\n       if (info->format_type == strftime_format_type)\n \tcontinue;\n       if (precise && index (flag_chars, '0') != 0\n-\t  && (format_char == 'd' || format_char == 'i'\n-\t      || format_char == 'o' || format_char == 'u'\n-\t      || format_char == 'x' || format_char == 'X'))\n+\t  && (index (fci->flags2, 'i') != 0))\n \tstatus_warning (status, \"`0' flag ignored with precision specifier and `%c' format\",\n \t\t format_char);\n       wanted_type = (fci->types[length_chars_val].type\n@@ -2558,10 +2561,10 @@ check_format_info (status, info, params)\n \t  main_wanted_type.wanted_type_name = wanted_type_name;\n \t  main_wanted_type.pointer_count = fci->pointer_count + aflag;\n \t  main_wanted_type.char_lenient_flag = 0;\n-\t  if (index (fci->flag_chars, 'c') != 0)\n+\t  if (index (fci->flags2, 'c') != 0)\n \t    main_wanted_type.char_lenient_flag = 1;\n \t  main_wanted_type.writing_in_flag = 0;\n-\t  if (index (fci->flag_chars, 'W') != 0)\n+\t  if (index (fci->flags2, 'W') != 0)\n \t    main_wanted_type.writing_in_flag = 1;\n \t  main_wanted_type.name = NULL;\n \t  main_wanted_type.param = cur_param;"}]}