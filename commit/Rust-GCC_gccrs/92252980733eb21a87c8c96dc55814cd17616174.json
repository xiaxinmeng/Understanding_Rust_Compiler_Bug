{"sha": "92252980733eb21a87c8c96dc55814cd17616174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIyNTI5ODA3MzNlYjIxYTg3YzhjOTZkYzU1ODE0Y2QxNzYxNjE3NA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-06-17T15:58:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T15:58:10Z"}, "message": "exp_intr.adb: Minor code reorganization (use UI_Max)\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_intr.adb: Minor code reorganization (use UI_Max)\n\t* sem_intr.adb: use underlying type to check legality.\n\t* einfo.adb (Known_Static_Esize): False for generic types\n\t(Known_Static_RM_Size): False for generic types\n\t* einfo.ads (Known_Static_Esize): False for generic types\n\t(Known_Static_RM_Size): False for generic types\n\nFrom-SVN: r160930", "tree": {"sha": "17e04a6cfb1782832e4258daf2be9a5dc664d8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17e04a6cfb1782832e4258daf2be9a5dc664d8da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92252980733eb21a87c8c96dc55814cd17616174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92252980733eb21a87c8c96dc55814cd17616174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92252980733eb21a87c8c96dc55814cd17616174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92252980733eb21a87c8c96dc55814cd17616174/comments", "author": null, "committer": null, "parents": [{"sha": "955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/955871d37fc3f6022ac6bd19dfd8a7134cbcdfac"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "275f1606266cfcd5fe3b53ea9e2eebf19e93ccf9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92252980733eb21a87c8c96dc55814cd17616174/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92252980733eb21a87c8c96dc55814cd17616174/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=92252980733eb21a87c8c96dc55814cd17616174", "patch": "@@ -1,3 +1,12 @@\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_intr.adb: Minor code reorganization (use UI_Max)\n+\t* sem_intr.adb: use underlying type to check legality.\n+\t* einfo.adb (Known_Static_Esize): False for generic types\n+\t(Known_Static_RM_Size): False for generic types\n+\t* einfo.ads (Known_Static_Esize): False for generic types\n+\t(Known_Static_RM_Size): False for generic types\n+\n 2010-06-17  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch4.ads: Minor code reorganization (specs in alpha order)."}, {"sha": "5a6e8dd5bc241e3de2a771e22c56b659c20073c1", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92252980733eb21a87c8c96dc55814cd17616174/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92252980733eb21a87c8c96dc55814cd17616174/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=92252980733eb21a87c8c96dc55814cd17616174", "patch": "@@ -5367,7 +5367,8 @@ package body Einfo is\n \n    function Known_Static_Esize                    (E : Entity_Id) return B is\n    begin\n-      return Uint12 (E) > Uint_0;\n+      return Uint12 (E) > Uint_0\n+        and then not Is_Generic_Type (E);\n    end Known_Static_Esize;\n \n    function Known_Static_Normalized_First_Bit     (E : Entity_Id) return B is\n@@ -5390,9 +5391,10 @@ package body Einfo is\n \n    function Known_Static_RM_Size                  (E : Entity_Id) return B is\n    begin\n-      return Uint13 (E) > Uint_0\n-        or else Is_Discrete_Type (E)\n-        or else Is_Fixed_Point_Type (E);\n+      return (Uint13 (E) > Uint_0\n+                or else Is_Discrete_Type (E)\n+                or else Is_Fixed_Point_Type (E))\n+        and then not Is_Generic_Type (E);\n    end Known_Static_RM_Size;\n \n    function Unknown_Alignment                     (E : Entity_Id) return B is"}, {"sha": "12a770fb956e9a0c6546e5f6df29dfa9051fa589", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92252980733eb21a87c8c96dc55814cd17616174/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92252980733eb21a87c8c96dc55814cd17616174/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=92252980733eb21a87c8c96dc55814cd17616174", "patch": "@@ -6188,6 +6188,13 @@ package Einfo is\n    --  value is always known static for discrete types (and no other types can\n    --  have an RM_Size value of zero).\n \n+   --  In two cases, Known_Static_Esize and Known_Static_RM_Size, there is one\n+   --  more consideration, which is that we always return false for generic\n+   --  types. Within a template, the size can look known, because of the fake\n+   --  size values we put in template types, but they are not really known and\n+   --  anyone testing if they are known within the template should get False as\n+   --  a result to prevent incorrect assumptions.\n+\n    function Known_Alignment                       (E : Entity_Id) return B;\n    function Known_Component_Bit_Offset            (E : Entity_Id) return B;\n    function Known_Component_Size                  (E : Entity_Id) return B;"}, {"sha": "09242c238477840488e92ad2fd48f6d9637ee613", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92252980733eb21a87c8c96dc55814cd17616174/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92252980733eb21a87c8c96dc55814cd17616174/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=92252980733eb21a87c8c96dc55814cd17616174", "patch": "@@ -122,29 +122,34 @@ package body Exp_Intr is\n       TR  : constant Entity_Id := Etype (N);\n       T3  : Entity_Id;\n       Res : Node_Id;\n-      Siz : Uint;\n+\n+      Siz : constant Uint := UI_Max (Esize (T1), Esize (T2));\n+      --  Maximum of operand sizes\n \n    begin\n-      if Esize (T1) > Esize (T2) then\n-         Siz := Esize (T1);\n-      else\n-         Siz := Esize (T2);\n-      end if;\n+      --  Use Unsigned_32 for sizes of 32 or below, else Unsigned_64\n \n       if Siz > 32 then\n          T3 := RTE (RE_Unsigned_64);\n       else\n          T3 := RTE (RE_Unsigned_32);\n       end if;\n \n+      --  Copy operator node, and reset type and entity fields, for\n+      --  subsequent reanalysis.\n+\n       Res := New_Copy (N);\n       Set_Etype (Res, Empty);\n       Set_Entity (Res, Empty);\n \n+      --  Convert operands to large enough intermediate type\n+\n       Set_Left_Opnd (Res,\n-         Unchecked_Convert_To (T3, Relocate_Node (Left_Opnd (N))));\n+        Unchecked_Convert_To (T3, Relocate_Node (Left_Opnd (N))));\n       Set_Right_Opnd (Res,\n-         Unchecked_Convert_To (T3, Relocate_Node (Right_Opnd (N))));\n+        Unchecked_Convert_To (T3, Relocate_Node (Right_Opnd (N))));\n+\n+      --  Analyze and resolve result formed by conversion to target type\n \n       Rewrite (N, Unchecked_Convert_To (TR, Res));\n       Analyze_And_Resolve (N, TR);"}, {"sha": "add170fcf2245f970b19ebb3da167a0588b562b9", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92252980733eb21a87c8c96dc55814cd17616174/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92252980733eb21a87c8c96dc55814cd17616174/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=92252980733eb21a87c8c96dc55814cd17616174", "patch": "@@ -285,7 +285,7 @@ package body Sem_Intr is\n          return;\n       end if;\n \n-      if not Is_Numeric_Type (T1) then\n+      if not Is_Numeric_Type (Underlying_Type (T1)) then\n          Errint (\"intrinsic operator can only apply to numeric types\", E, N);\n       end if;\n    end Check_Intrinsic_Operator;"}]}