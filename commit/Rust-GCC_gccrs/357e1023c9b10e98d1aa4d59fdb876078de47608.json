{"sha": "357e1023c9b10e98d1aa4d59fdb876078de47608", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3ZTEwMjNjOWIxMGU5OGQxYWE0ZDU5ZmRiODc2MDc4ZGU0NzYwOA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:03:39Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:03:39Z"}, "message": "[arm] Allow CPU and architecture extensions to be\n\n\nA follow up patch to this one will start to canonicalize options to\nsimplify generating multilib fragments.  This patch is enabling work\nfor that.  If we have extension options that duplicate other options\n(done principally for back-wards compatibility purposes) we need to\nensure that just one of them will be used consistently when generating\na canonical form of the user-specified options.  We do this by\nexplicitly noting when an option is defined as an alias of another.\n\nAnother aspect of canonicalization is to enforce a strict order in\nwhich the options are inspected, we do this by ensuring that no later\noption examined can be a subset of an earlier option (add and remove\noptions are treated separtely).\n\nIt's practically impossible to check all this in parsecpu.awk since\nthat premits use of C macros in the ISA features list, so instead we\nenforce the ordering with a selftest function in the compiler, which\nis only run when self tests are enabled (it's not something that will\nchange every day, so this should be sufficient).\n\n\t* config/arm/arm-protos.h (cpu_arch_extension): Add field to record\n\twhen an option is an alias of another.\n\t* config/arm/parsecpu.awk (optalias): New parser token.\n\t(gen_comm_data): Mark non-alias options as such.  Emit entries\n\tfor extension aliases.\n\t* config/arm/arm-cpus.in (armv5e): Make vfpv2 an alias.\n\t(armv5te, armv5tej, armv6, armv6j, armv6k, armv6z): Likewise.\n\t(armv6kz, armv6zk, armv6t2): Likewise.\n\t(armv7): Make vfpv3-d16 an alias.\n\t(armv7-a): Make vfpv3-d16, neon and neon-vfpv3 aliases.  Sort in\n\tcanonical order.\n\t(armv7ve): Make vfpv4-d16, neon-vfpv3 and neon-vfpv4 aliases.\n\tSort in canonical order.\n\t(armv8-a): Sort in canonical order.\n\t(armv8.1-a, armv8.2-a):  Likewise.\n\t(generic-armv7-a): Make neon and neon-vfpv3 aliases.  Sort in\n\tcanonical order.\n\t(cortex-a9): Sort in canonical order.\n\t* config/arm/arm.c (selftests.h): Include it.\n\t(arm_test_cpu_arch_data): New function.\n\t(arm_run_self_tests): New function.\n\t(TARGET_RUN_TARGET_SELFTESTS): Redefine.\n\t(targetm): Move declaration to the end of the file.\n\t* arm-cpu-cdata.h: Regenerated.\n\nFrom-SVN: r249289", "tree": {"sha": "81755f852a25bf94f37ee7836a53b764251a9246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81755f852a25bf94f37ee7836a53b764251a9246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/357e1023c9b10e98d1aa4d59fdb876078de47608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357e1023c9b10e98d1aa4d59fdb876078de47608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357e1023c9b10e98d1aa4d59fdb876078de47608", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357e1023c9b10e98d1aa4d59fdb876078de47608/comments", "author": null, "committer": null, "parents": [{"sha": "e53993efae201a6a65164a299e5305894ff1cb84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53993efae201a6a65164a299e5305894ff1cb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53993efae201a6a65164a299e5305894ff1cb84"}], "stats": {"total": 759, "additions": 462, "deletions": 297}, "files": [{"sha": "2764dda5aba6226725c0f81d010a8285f8d7e5b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=357e1023c9b10e98d1aa4d59fdb876078de47608", "patch": "@@ -1,3 +1,30 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm-protos.h (cpu_arch_extension): Add field to record\n+\twhen an option is an alias of another.\n+\t* config/arm/parsecpu.awk (optalias): New parser token.\n+\t(gen_comm_data): Mark non-alias options as such.  Emit entries\n+\tfor extension aliases.\n+\t* config/arm/arm-cpus.in (armv5e): Make vfpv2 an alias.\n+\t(armv5te, armv5tej, armv6, armv6j, armv6k, armv6z): Likewise.\n+\t(armv6kz, armv6zk, armv6t2): Likewise.\n+\t(armv7): Make vfpv3-d16 an alias.\n+\t(armv7-a): Make vfpv3-d16, neon and neon-vfpv3 aliases.\t Sort in\n+\tcanonical order.\n+\t(armv7ve): Make vfpv4-d16, neon-vfpv3 and neon-vfpv4 aliases.\n+\tSort in canonical order.\n+\t(armv8-a): Sort in canonical order.\n+\t(armv8.1-a, armv8.2-a):\t Likewise.\n+\t(generic-armv7-a): Make neon and neon-vfpv3 aliases.  Sort in\n+\tcanonical order.\n+\t(cortex-a9): Sort in canonical order.\n+\t* config/arm/arm.c (selftests.h): Include it.\n+\t(arm_test_cpu_arch_data): New function.\n+\t(arm_run_self_tests): New function.\n+\t(TARGET_RUN_TARGET_SELFTESTS): Redefine.\n+\t(targetm): Move declaration to the end of the file.\n+\t* arm-cpu-cdata.h: Regenerated.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm.h (TARGET_MODE_SPECS): Add additional parameter to"}, {"sha": "5034dbb720cf9667f43199894e4e648bb39ba5a9", "filename": "gcc/config/arm/arm-cpu-cdata.h", "status": "modified", "additions": 255, "deletions": 255, "changes": 510, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h?ref=357e1023c9b10e98d1aa4d59fdb876078de47608", "patch": "@@ -22,378 +22,378 @@\n \n static const cpu_arch_extension cpu_opttab_arm9e[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_arm946es[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_arm966es[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_arm968es[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_arm10e[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_arm1020e[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_arm1022e[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_arm926ejs[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_arm1026ejs[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_genericv7a[] = {\n   {\n-    \"simd\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"vfpv3\", false,\n-    { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n-  },\n-  {\n-    \"vfpv3-d16\", false,\n+    \"vfpv3-d16\", false, false,\n     { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv3-fp16\", false,\n-    { ISA_VFPv3,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n+    \"vfpv3\", false, false,\n+    { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n   },\n   {\n-    \"vfpv3-d16-fp16\", false,\n+    \"vfpv3-d16-fp16\", false, false,\n     { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n   },\n   {\n-    \"vfpv4\", false,\n-    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n+    \"vfpv3-fp16\", false, false,\n+    { ISA_VFPv3,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n   },\n   {\n-    \"vfpv4-d16\", false,\n+    \"vfpv4-d16\", false, false,\n     { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"neon\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+    \"vfpv4\", false, false,\n+    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n   },\n   {\n-    \"neon-vfpv3\", false,\n+    \"simd\", false, false,\n     { ISA_VFPv3,ISA_NEON, isa_nobit }\n   },\n   {\n-    \"neon-fp16\", false,\n+    \"neon-fp16\", false, false,\n     { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n   },\n   {\n-    \"neon-vfpv4\", false,\n+    \"neon-vfpv4\", false, false,\n     { ISA_VFPv4,ISA_NEON, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nosimd\", true, false,\n+    { ISA_ALL_SIMD, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nosimd\", true,\n-    { ISA_ALL_SIMD, isa_nobit }\n+    \"neon\", false, true, \n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  {\n+    \"neon-vfpv3\", false, true, \n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa5[] = {\n   {\n-    \"nosimd\", true,\n+    \"nosimd\", true, false,\n     { ISA_ALL_SIMD, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa7[] = {\n   {\n-    \"nosimd\", true,\n+    \"nosimd\", true, false,\n     { ISA_ALL_SIMD, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa8[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa9[] = {\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"nosimd\", true, false,\n+    { ISA_ALL_SIMD, isa_nobit }\n   },\n   {\n-    \"nosimd\", true,\n-    { ISA_ALL_SIMD, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa12[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa15[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa17[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexr5[] = {\n   {\n-    \"nofp.dp\", true,\n+    \"nofp.dp\", true, false,\n     { ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexr7[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexr8[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexm7[] = {\n   {\n-    \"nofp.dp\", true,\n+    \"nofp.dp\", true, false,\n     { ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexm4[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa15cortexa7[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa17cortexa7[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa32[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa35[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa53[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa57[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa72[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa73[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_exynosm1[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_xgene1[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa57cortexa53[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa72cortexa53[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa73cortexa35[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexa73cortexa53[] = {\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const cpu_arch_extension cpu_opttab_cortexm33[] = {\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n const cpu_option all_cores[] =\n@@ -1650,426 +1650,426 @@ const cpu_option all_cores[] =\n };\n static const struct cpu_arch_extension arch_opttab_armv5e[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"vfpv2\", false, true, \n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv5te[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"vfpv2\", false, true, \n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv5tej[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"vfpv2\", false, true, \n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv6[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"vfpv2\", false, true, \n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv6j[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"vfpv2\", false, true, \n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv6k[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"vfpv2\", false, true, \n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv6z[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"vfpv2\", false, true, \n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv6kz[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"vfpv2\", false, true, \n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv6zk[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"vfpv2\", false, true, \n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv6t2[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"vfpv2\", false, true, \n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv7[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv3-d16\", false,\n+    \"vfpv3-d16\", false, true, \n     { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv7_a[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv3-d16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv3\", false,\n+    \"vfpv3\", false, false,\n     { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n   },\n   {\n-    \"vfpv3-d16-fp16\", false,\n+    \"vfpv3-d16-fp16\", false, false,\n     { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n   },\n   {\n-    \"vfpv3-fp16\", false,\n+    \"vfpv3-fp16\", false, false,\n     { ISA_VFPv3,ISA_FP_DBL,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n   },\n   {\n-    \"vfpv4-d16\", false,\n+    \"vfpv4-d16\", false, false,\n     { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv4\", false,\n+    \"vfpv4\", false, false,\n     { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n   },\n   {\n-    \"simd\", false,\n+    \"simd\", false, false,\n     { ISA_VFPv3,ISA_NEON, isa_nobit }\n   },\n   {\n-    \"neon\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+    \"neon-fp16\", false, false,\n+    { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n   },\n   {\n-    \"neon-vfpv3\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+    \"neon-vfpv4\", false, false,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n   },\n   {\n-    \"neon-fp16\", false,\n-    { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n+    \"nosimd\", true, false,\n+    { ISA_ALL_SIMD, isa_nobit }\n   },\n   {\n-    \"neon-vfpv4\", false,\n-    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"vfpv3-d16\", false, true, \n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"nosimd\", true,\n-    { ISA_ALL_SIMD, isa_nobit }\n+    \"neon\", false, true, \n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  {\n+    \"neon-vfpv3\", false, true, \n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv7ve[] = {\n   {\n-    \"vfpv3-d16\", false,\n+    \"vfpv3-d16\", false, false,\n     { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv3\", false,\n+    \"vfpv3\", false, false,\n     { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n   },\n   {\n-    \"vfpv3-d16-fp16\", false,\n+    \"vfpv3-d16-fp16\", false, false,\n     { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n   },\n   {\n-    \"vfpv3-fp16\", false,\n+    \"vfpv3-fp16\", false, false,\n     { ISA_VFPv3,ISA_FP_DBL,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n   },\n   {\n-    \"vfpv4-d16\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"fp\", false,\n-    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv4\", false,\n+    \"vfpv4\", false, false,\n     { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n   },\n   {\n-    \"neon\", false,\n+    \"neon\", false, false,\n     { ISA_VFPv3,ISA_NEON, isa_nobit }\n   },\n   {\n-    \"neon-vfpv3\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"neon-fp16\", false,\n+    \"neon-fp16\", false, false,\n     { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n   },\n   {\n-    \"simd\", false,\n+    \"simd\", false, false,\n     { ISA_VFPv4,ISA_NEON, isa_nobit }\n   },\n   {\n-    \"neon-vfpv4\", false,\n-    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+    \"nosimd\", true, false,\n+    { ISA_ALL_SIMD, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"nosimd\", true,\n-    { ISA_ALL_SIMD, isa_nobit }\n+    \"vfpv4-d16\", false, true, \n+    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  {\n+    \"neon-vfpv3\", false, true, \n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv4\", false, true, \n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv7_r[] = {\n   {\n-    \"fp.sp\", false,\n+    \"fp.sp\", false, false,\n     { ISA_VFPv3, isa_nobit }\n   },\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"idiv\", false,\n+    \"idiv\", false, false,\n     { isa_bit_adiv, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n   {\n-    \"noidiv\", true,\n+    \"noidiv\", true, false,\n     { isa_bit_adiv, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv7e_m[] = {\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_VFPv4, isa_nobit }\n   },\n   {\n-    \"fpv5\", false,\n+    \"fpv5\", false, false,\n     { ISA_FPv5, isa_nobit }\n   },\n   {\n-    \"fp.dp\", false,\n+    \"fp.dp\", false, false,\n     { ISA_FPv5,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv8_a[] = {\n   {\n-    \"crc\", false,\n+    \"crc\", false, false,\n     { isa_bit_crc32, isa_nobit }\n   },\n   {\n-    \"simd\", false,\n+    \"simd\", false, false,\n     { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n   },\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"nocrypto\", true, false,\n+    { ISA_ALL_CRYPTO, isa_nobit }\n   },\n   {\n-    \"nocrypto\", true,\n-    { ISA_ALL_CRYPTO, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv8_1_a[] = {\n   {\n-    \"simd\", false,\n+    \"simd\", false, false,\n     { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n   },\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"nocrypto\", true, false,\n+    { ISA_ALL_CRYPTO, isa_nobit }\n   },\n   {\n-    \"nocrypto\", true,\n-    { ISA_ALL_CRYPTO, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv8_2_a[] = {\n   {\n-    \"simd\", false,\n+    \"simd\", false, false,\n     { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n   },\n   {\n-    \"fp16\", false,\n+    \"fp16\", false, false,\n     { isa_bit_fp16,ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n   },\n   {\n-    \"crypto\", false,\n+    \"crypto\", false, false,\n     { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n+    \"nocrypto\", true, false,\n+    { ISA_ALL_CRYPTO, isa_nobit }\n   },\n   {\n-    \"nocrypto\", true,\n-    { ISA_ALL_CRYPTO, isa_nobit }\n+    \"nofp\", true, false,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n static const struct cpu_arch_extension arch_opttab_armv8_m_main[] = {\n   {\n-    \"dsp\", false,\n+    \"dsp\", false, false,\n     { isa_bit_ARMv7em, isa_nobit }\n   },\n   {\n-    \"fp\", false,\n+    \"fp\", false, false,\n     { ISA_FPv5, isa_nobit }\n   },\n   {\n-    \"fp.dp\", false,\n+    \"fp.dp\", false, false,\n     { ISA_FPv5,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"nofp\", true,\n+    \"nofp\", true, false,\n     { ISA_ALL_FP, isa_nobit }\n   },\n-  { NULL, false, {isa_nobit}}\n+  { NULL, false, false, {isa_nobit}}\n };\n \n const arch_option all_architectures[] ="}, {"sha": "14e49ecead77525e2548f4db92f60f8f9d189558", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 40, "deletions": 37, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=357e1023c9b10e98d1aa4d59fdb876078de47608", "patch": "@@ -114,7 +114,7 @@ begin arch armv5e\n  base 5E\n  isa ARMv5e\n  option fp add VFPv2 FP_DBL\n- option vfpv2 add VFPv2 FP_DBL\n+ optalias vfpv2 fp\n  option nofp remove ALL_FP\n end arch armv5e\n \n@@ -124,7 +124,7 @@ begin arch armv5te\n  base 5TE\n  isa ARMv5te\n  option fp add VFPv2 FP_DBL\n- option vfpv2 add VFPv2 FP_DBL\n+ optalias vfpv2 fp\n  option nofp remove ALL_FP\n end arch armv5te\n \n@@ -134,7 +134,7 @@ begin arch armv5tej\n  base 5TEJ\n  isa ARMv5tej\n  option fp add VFPv2 FP_DBL\n- option vfpv2 add VFPv2 FP_DBL\n+ optalias vfpv2 fp\n  option nofp remove ALL_FP\n end arch armv5tej\n \n@@ -144,7 +144,7 @@ begin arch armv6\n  base 6\n  isa ARMv6\n  option fp add VFPv2 FP_DBL\n- option vfpv2 add VFPv2 FP_DBL\n+ optalias vfpv2 fp\n  option nofp remove ALL_FP\n end arch armv6\n \n@@ -154,7 +154,7 @@ begin arch armv6j\n  base 6J\n  isa ARMv6j\n  option fp add VFPv2 FP_DBL\n- option vfpv2 add VFPv2 FP_DBL\n+ optalias vfpv2 fp\n  option nofp remove ALL_FP\n end arch armv6j\n \n@@ -164,7 +164,7 @@ begin arch armv6k\n  base 6K\n  isa ARMv6k\n  option fp add VFPv2 FP_DBL\n- option vfpv2 add VFPv2 FP_DBL\n+ optalias vfpv2 fp\n  option nofp remove ALL_FP\n end arch armv6k\n \n@@ -174,7 +174,7 @@ begin arch armv6z\n  base 6Z\n  isa ARMv6z\n  option fp add VFPv2 FP_DBL\n- option vfpv2 add VFPv2 FP_DBL\n+ optalias vfpv2 fp\n  option nofp remove ALL_FP\n end arch armv6z\n \n@@ -184,7 +184,7 @@ begin arch armv6kz\n  base 6KZ\n  isa ARMv6kz\n  option fp add VFPv2 FP_DBL\n- option vfpv2 add VFPv2 FP_DBL\n+ optalias vfpv2 fp\n  option nofp remove ALL_FP\n end arch armv6kz\n \n@@ -194,7 +194,7 @@ begin arch armv6zk\n  base 6KZ\n  isa ARMv6kz\n  option fp add VFPv2 FP_DBL\n- option vfpv2 add VFPv2 FP_DBL\n+ optalias vfpv2 fp\n  option nofp remove ALL_FP\n end arch armv6zk\n \n@@ -204,7 +204,7 @@ begin arch armv6t2\n  base 6T2\n  isa ARMv6t2\n  option fp add VFPv2 FP_DBL\n- option vfpv2 add VFPv2 FP_DBL\n+ optalias vfpv2 fp\n  option nofp remove ALL_FP\n end arch armv6t2\n \n@@ -227,7 +227,7 @@ begin arch armv7\n  isa ARMv7\n # fp => VFPv3-d16 (only useful for the A+R profile subset).\n  option fp add VFPv3 FP_DBL\n- option vfpv3-d16 add VFPv3 FP_DBL\n+ optalias vfpv3-d16 fp\n end arch armv7\n \n begin arch armv7-a\n@@ -236,20 +236,20 @@ begin arch armv7-a\n  base 7A\n  isa ARMv7a\n # fp => VFPv3-d16, simd => neon-vfpv3\n- option fp             add VFPv3 FP_DBL\n- option vfpv3-d16      add VFPv3 FP_DBL\n- option vfpv3 \t       add VFPv3 FP_D32\n+ option fp\t       add VFPv3 FP_DBL\n+ optalias vfpv3-d16    fp\n+ option vfpv3\t       add VFPv3 FP_D32\n  option vfpv3-d16-fp16 add VFPv3 FP_DBL bit_fp16conv\n  option vfpv3-fp16     add VFPv3 FP_DBL FP_D32 bit_fp16conv\n  option vfpv4-d16      add VFPv4 FP_DBL\n- option vfpv4 \t       add VFPv4 FP_D32\n- option simd \t       add VFPv3 NEON\n- option neon \t       add VFPv3 NEON\n- option neon-vfpv3     add VFPv3 NEON\n+ option vfpv4\t       add VFPv4 FP_D32\n+ option simd\t       add VFPv3 NEON\n+ optalias neon\t       simd\n+ optalias neon-vfpv3   simd\n  option neon-fp16      add VFPv3 NEON bit_fp16conv\n  option neon-vfpv4     add VFPv4 NEON\n- option nofp \t    remove ALL_FP\n- option nosimd \t    remove ALL_SIMD\n+ option nosimd\t    remove ALL_SIMD\n+ option nofp\t    remove ALL_FP\n end arch armv7-a\n \n begin arch armv7ve\n@@ -262,16 +262,16 @@ begin arch armv7ve\n  option vfpv3 \t       add VFPv3 FP_D32\n  option vfpv3-d16-fp16 add VFPv3 FP_DBL bit_fp16conv\n  option vfpv3-fp16     add VFPv3 FP_DBL FP_D32 bit_fp16conv\n- option vfpv4-d16      add VFPv4 FP_DBL\n  option fp \t       add VFPv4 FP_DBL\n+ optalias vfpv4-d16    fp\n  option vfpv4 \t       add VFPv4 FP_D32\n  option neon \t       add VFPv3 NEON\n- option neon-vfpv3     add VFPv3 NEON\n+ optalias neon-vfpv3   neon\n  option neon-fp16      add VFPv3 NEON bit_fp16conv\n  option simd \t       add VFPv4 NEON\n- option neon-vfpv4     add VFPv4 NEON\n- option nofp \t    remove ALL_FP\n- option nosimd \t    remove ALL_SIMD\n+ optalias neon-vfpv4   simd\n+ option nosimd\t    remove ALL_SIMD\n+ option nofp\t    remove ALL_FP\n end arch armv7ve\n \n begin arch armv7-r\n@@ -316,8 +316,8 @@ begin arch armv8-a\n  option crc add bit_crc32\n  option simd add FP_ARMv8 NEON\n  option crypto add FP_ARMv8 CRYPTO\n- option nofp remove ALL_FP\n  option nocrypto remove ALL_CRYPTO\n+ option nofp remove ALL_FP\n end arch armv8-a\n \n begin arch armv8.1-a\n@@ -327,8 +327,8 @@ begin arch armv8.1-a\n  isa ARMv8_1a\n  option simd add FP_ARMv8 NEON\n  option crypto add FP_ARMv8 CRYPTO\n- option nofp remove ALL_FP\n  option nocrypto remove ALL_CRYPTO\n+ option nofp remove ALL_FP\n end arch armv8.1-a\n \n begin arch armv8.2-a\n@@ -339,8 +339,8 @@ begin arch armv8.2-a\n  option simd add FP_ARMv8 NEON\n  option fp16 add bit_fp16 FP_ARMv8 NEON\n  option crypto add FP_ARMv8 CRYPTO\n- option nofp remove ALL_FP\n  option nocrypto remove ALL_CRYPTO\n+ option nofp remove ALL_FP\n end arch armv8.2-a\n \n begin arch armv8-m.base\n@@ -385,14 +385,17 @@ end arch iwmmxt2\n #   [fpu <name>]\n #   [isa <additional-isa-flags-list>]\n #   [option <name> add|remove <isa-list>]*\n+#   [optalias <name> <optname>]*\n #   [costs <name>]\n # end cpu <name>\n #\n # If omitted, cname is formed from transforming the cpuname to convert\n # non-valid punctuation characters to '_'.\n # If specified, tune for specifies a CPU target to use for tuning this core.\n # isa flags are appended to those defined by the architecture.\n-\n+# Each add option must have a distinct feature set and each remove\n+# option must similarly have a distinct feature set.  Option aliases can be\n+# added with the optalias statement\n \n # V2/V2A Architecture Processors\n begin cpu arm2\n@@ -921,19 +924,19 @@ begin cpu generic-armv7-a\n  tune flags LDSCHED\n  architecture armv7-a\n  fpu vfpv3-d16\n- option simd add VFPv3 NEON\n- option vfpv3 add VFPv3 FP_D32\n  option vfpv3-d16 add VFPv3 FP_DBL\n- option vfpv3-fp16 add VFPv3 FP_D32 bit_fp16conv\n+ option vfpv3 add VFPv3 FP_D32\n  option vfpv3-d16-fp16 add VFPv3 FP_DBL bit_fp16conv\n- option vfpv4 add VFPv4 FP_D32\n+ option vfpv3-fp16 add VFPv3 FP_D32 bit_fp16conv\n  option vfpv4-d16 add VFPv4 FP_DBL\n- option neon add VFPv3 NEON\n- option neon-vfpv3 add VFPv3 NEON\n+ option vfpv4 add VFPv4 FP_D32\n+ option simd add VFPv3 NEON\n+ optalias neon simd\n+ optalias neon-vfpv3 simd\n  option neon-fp16 add VFPv3 NEON bit_fp16conv\n  option neon-vfpv4 add VFPv4 NEON\n- option nofp remove ALL_FP\n  option nosimd remove ALL_SIMD\n+ option nofp remove ALL_FP\n  costs cortex\n end cpu generic-armv7-a\n \n@@ -971,8 +974,8 @@ begin cpu cortex-a9\n  tune flags LDSCHED\n  architecture armv7-a\n  fpu neon-fp16\n- option nofp remove ALL_FP\n  option nosimd remove ALL_SIMD\n+ option nofp remove ALL_FP\n  costs cortex_a9\n end cpu cortex-a9\n "}, {"sha": "25210e2375aa4a3f367ea934f36d2215b7f91dd4", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=357e1023c9b10e98d1aa4d59fdb876078de47608", "patch": "@@ -478,8 +478,14 @@ extern struct arm_build_target arm_active_target;\n \n struct cpu_arch_extension\n {\n+  /* Feature name.  */\n   const char *const name;\n+  /* True if the option is negative (removes extensions).  */\n   bool remove;\n+  /* True if the option is an alias for another option with identical effect;\n+     the option will be ignored for canonicalization.  */\n+  bool alias;\n+  /* The modifier bits.  */\n   const enum isa_feature isa_bits[isa_num_bits];\n };\n "}, {"sha": "55ea22e75f472310683a96c1f3b5bd5f054731a6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=357e1023c9b10e98d1aa4d59fdb876078de47608", "patch": "@@ -65,6 +65,7 @@\n #include \"optabs-libfuncs.h\"\n #include \"gimplify.h\"\n #include \"gimple.h\"\n+#include \"selftest.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -774,7 +775,6 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_CUSTOM_FUNCTION_DESCRIPTORS\n #define TARGET_CUSTOM_FUNCTION_DESCRIPTORS 2\n \n-struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n static struct obstack minipool_obstack;\n@@ -31208,4 +31208,84 @@ arm_coproc_ldc_stc_legitimate_address (rtx op)\n     }\n   return false;\n }\n+\n+#if CHECKING_P\n+namespace selftest {\n+\n+/* Scan the static data tables generated by parsecpu.awk looking for\n+   potential issues with the data.  We primarily check for\n+   inconsistencies in the option extensions at present (extensions\n+   that duplicate others but aren't marked as aliases).  Furthermore,\n+   for correct canonicalization later options must never be a subset\n+   of an earlier option.  */\n+static void\n+arm_test_cpu_arch_data (void)\n+{\n+  const arch_option *arch;\n+  const cpu_option *cpu;\n+  auto_sbitmap isa1 (isa_num_bits);\n+  auto_sbitmap isa2 (isa_num_bits);\n+\n+  for (arch = all_architectures; arch->common.name != NULL; ++arch)\n+    {\n+      const cpu_arch_extension *ext1, *ext2;\n+\n+      if (arch->common.extensions == NULL)\n+\tcontinue;\n+\n+      for (ext1 = arch->common.extensions; ext1->name != NULL; ++ext1)\n+\t{\n+\t  if (ext1->alias)\n+\t    continue;\n+\n+\t  arm_initialize_isa (isa1, ext1->isa_bits);\n+\t  for (ext2 = ext1 + 1; ext2->name != NULL; ++ext2)\n+\t    {\n+\t      if (ext2->alias || ext1->remove != ext2->remove)\n+\t\tcontinue;\n+\n+\t      arm_initialize_isa (isa2, ext2->isa_bits);\n+\t      ASSERT_TRUE (!bitmap_subset_p (isa2, isa1));\n+\t    }\n+\t}\n+    }\n+\n+  for (cpu = all_cores; cpu->common.name != NULL; ++cpu)\n+    {\n+      const cpu_arch_extension *ext1, *ext2;\n+\n+      if (cpu->common.extensions == NULL)\n+\tcontinue;\n+\n+      for (ext1 = cpu->common.extensions; ext1->name != NULL; ++ext1)\n+\t{\n+\t  if (ext1->alias)\n+\t    continue;\n+\n+\t  arm_initialize_isa (isa1, ext1->isa_bits);\n+\t  for (ext2 = ext1 + 1; ext2->name != NULL; ++ext2)\n+\t    {\n+\t      if (ext2->alias || ext1->remove != ext2->remove)\n+\t\tcontinue;\n+\n+\t      arm_initialize_isa (isa2, ext2->isa_bits);\n+\t      ASSERT_TRUE (!bitmap_subset_p (isa2, isa1));\n+\t    }\n+\t}\n+    }\n+}\n+\n+static void\n+arm_run_selftests (void)\n+{\n+  arm_test_cpu_arch_data ();\n+}\n+} /* Namespace selftest.  */\n+\n+#undef TARGET_RUN_TARGET_SELFTESTS\n+#define TARGET_RUN_TARGET_SELFTESTS selftest::arm_run_selftests\n+#endif /* CHECKING_P */\n+\n+struct gcc_target targetm = TARGET_INITIALIZER;\n+\n #include \"gt-arm.h\""}, {"sha": "61e8bc24ea41aff5e5e9e05d7d9bf2f4bac808f7", "filename": "gcc/config/arm/parsecpu.awk", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357e1023c9b10e98d1aa4d59fdb876078de47608/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=357e1023c9b10e98d1aa4d59fdb876078de47608", "patch": "@@ -171,11 +171,28 @@ function gen_comm_data () {\n \t    for (opt = 1; opt <= nopts; opt++) {\n \t\tprint \"  {\"\n \t\tprint \"    \\\"\" opts[opt] \"\\\", \" \\\n-\t\t    cpu_opt_remove[cpus[n],opts[opt]] \",\"\n+\t\t    cpu_opt_remove[cpus[n],opts[opt]] \", false,\"\n \t\tprint \"    { \" cpu_opt_isa[cpus[n],opts[opt]] \", isa_nobit }\"\n \t\tprint \"  },\"\n \t    }\n-\t    print \"  { NULL, false, {isa_nobit}}\"\n+\t    if (cpus[n] in cpu_optaliases) {\n+\t\tnaliases = split (cpu_optaliases[cpus[n]], aliases)\n+\t\tfor (alias = 1; alias <= naliases; alias++) {\n+\t\t    if (! ((cpus[n], \\\n+\t\t\t    cpu_opt_alias[cpus[n],aliases[alias]]) in \\\n+\t\t\t   cpu_opt_isa)) {\n+\t\t\tfatal(\"Alias \" aliases[alias] \" target not defined \" \\\n+\t\t\t      \"for CPU \" cpus[n])\n+\t\t    }\n+\t\t    equiv=cpu_opt_alias[cpus[n],aliases[alias]]\n+\t\t    print \"  {\"\n+\t\t    print \"    \\\"\" aliases[alias] \"\\\", \" \\\n+\t\t\tcpu_opt_remove[cpus[n],equiv] \", true, \"\n+\t\t    print \"    { \" cpu_opt_isa[cpus[n],equiv] \", isa_nobit }\"\n+\t\t    print \"  },\"\n+\t\t}\n+\t    }\n+\t    print \"  { NULL, false, false, {isa_nobit}}\"\n \t    print \"};\\n\"\n \t}\n     }\n@@ -231,12 +248,31 @@ function gen_comm_data () {\n \t    for (opt = 1; opt <= nopts; opt++) {\n \t\tprint \"  {\"\n \t\tprint \"    \\\"\" opts[opt] \"\\\", \" \\\n-\t\t    arch_opt_remove[archs[n],opts[opt]] \",\"\n+\t\t    arch_opt_remove[archs[n],opts[opt]] \", false,\"\n \t\tprint \"    { \" arch_opt_isa[archs[n],opts[opt]] \", isa_nobit }\"\n \t\tprint \"  },\"\n \t    }\n-\t    print \"  { NULL, false, {isa_nobit}}\"\n+\t    if (archs[n] in arch_optaliases) {\n+\t\tnaliases = split (arch_optaliases[archs[n]], aliases)\n+\t\tfor (alias = 1; alias <= naliases; alias++) {\n+\t\t    if (! ((archs[n], \\\n+\t\t\t    arch_opt_alias[archs[n],aliases[alias]]) in \\\n+\t\t\t   arch_opt_isa)) {\n+\t\t\tfatal(\"Alias \" aliases[alias] \" target not defined \" \\\n+\t\t\t      \"for architecture \" archs[n])\n+\t\t    }\n+\t\t    equiv=arch_opt_alias[archs[n],aliases[alias]]\n+\t\t    print \"  {\"\n+\t\t    print \"    \\\"\" aliases[alias] \"\\\", \" \\\n+\t\t\tarch_opt_remove[archs[n],equiv] \", true, \"\n+\t\t    print \"    { \" arch_opt_isa[archs[n],equiv] \", isa_nobit }\"\n+\t\t    print \"  },\"\n+\t\t}\n+\t    }\n+\t    print \"  { NULL, false, false, {isa_nobit}}\"\n \t    print \"};\\n\"\n+\t} else if (archs[n] in arch_optaliases) {\n+\t    fatal(\"Architecture \" archs[n] \" has option aliases but no options\")\n \t}\n     }\n \n@@ -529,6 +565,19 @@ BEGIN {\n     parse_ok = 1\n }\n \n+/^[ \t]*optalias / {\n+    name=$2\n+    alias=$3\n+    if (cpu_name != \"\") {\n+\tcpu_optaliases[cpu_name] = cpu_optaliases[cpu_name] \" \" name\n+\tcpu_opt_alias[cpu_name,name] = alias\n+    } else if (arch_name != \"\") {\n+\tarch_optaliases[arch_name] = arch_optaliases[arch_name] \" \" name\n+\tarch_opt_alias[arch_name,name] = alias\n+    } else fatal(\"\\\"optalias\\\" outside of cpu or arch block\")\n+    parse_ok = 1\n+}\n+\n /^[ \t]*costs / {\n     if (cpu_name == \"\") fatal(\"\\\"costs\\\" outside of cpu block\")\n     cpu_cost[cpu_name] = $2"}]}