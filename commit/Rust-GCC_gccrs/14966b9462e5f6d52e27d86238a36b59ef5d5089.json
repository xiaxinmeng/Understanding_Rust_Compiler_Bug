{"sha": "14966b9462e5f6d52e27d86238a36b59ef5d5089", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ5NjZiOTQ2MmU1ZjZkNTJlMjdkODYyMzhhMzZiNTllZjVkNTA4OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-09-04T20:56:33Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-09-04T20:56:33Z"}, "message": "frv-protos.h (frv_init_builtins, [...]): Delete.\n\n\t* frv-protos.h (frv_init_builtins, frv_expand_builtin,\n\tfrv_select_section, frv_select_rtx_section,\n\tfrv_encode_section_info, frv_unique_section): Delete.\n\t* frv.c: Update for target hooks.\n\t* frv.h (STRIP_NAME_ENCODING, SLOW_ZERO_EXTEND, SELECT_SECTION,\n\tSELECT_RTX_SECTION, ENCODE_SECTION_INFO, UNIQUE_SECTION,\n\tEASY_DIV_EXPR, MD_INIT_BUILTINS, MD_EXPAND_BUILTIN): Delete.\n\nFrom-SVN: r56810", "tree": {"sha": "9c81a2751550b9bee5cc87f12390e71ca73bf7a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c81a2751550b9bee5cc87f12390e71ca73bf7a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14966b9462e5f6d52e27d86238a36b59ef5d5089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14966b9462e5f6d52e27d86238a36b59ef5d5089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14966b9462e5f6d52e27d86238a36b59ef5d5089", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14966b9462e5f6d52e27d86238a36b59ef5d5089/comments", "author": null, "committer": null, "parents": [{"sha": "c8bf1a1a914158643b5c953e672f7275766623f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bf1a1a914158643b5c953e672f7275766623f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8bf1a1a914158643b5c953e672f7275766623f6"}], "stats": {"total": 170, "additions": 60, "deletions": 110}, "files": [{"sha": "9c952be5ab701ceb407dd24d0db763d613bc141d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14966b9462e5f6d52e27d86238a36b59ef5d5089/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14966b9462e5f6d52e27d86238a36b59ef5d5089/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14966b9462e5f6d52e27d86238a36b59ef5d5089", "patch": "@@ -1,3 +1,13 @@\n+2002-09-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* frv-protos.h (frv_init_builtins, frv_expand_builtin,\n+\tfrv_select_section, frv_select_rtx_section,\n+\tfrv_encode_section_info, frv_unique_section): Delete.\n+\t* frv.c: Update for target hooks.\n+\t* frv.h (STRIP_NAME_ENCODING, SLOW_ZERO_EXTEND, SELECT_SECTION,\n+\tSELECT_RTX_SECTION, ENCODE_SECTION_INFO, UNIQUE_SECTION,\n+\tEASY_DIV_EXPR, MD_INIT_BUILTINS, MD_EXPAND_BUILTIN): Delete.\n+\n 2002-09-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ip2k-protos.h (function_prologue, function_epilogue,"}, {"sha": "c3f13f5772d4e25a461f97efadee5598ca904aee", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14966b9462e5f6d52e27d86238a36b59ef5d5089/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14966b9462e5f6d52e27d86238a36b59ef5d5089/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=14966b9462e5f6d52e27d86238a36b59ef5d5089", "patch": "@@ -69,9 +69,6 @@ extern rtx frv_legitimize_address\t\tPARAMS ((rtx, rtx,\n \t\t\t\t\t\t\t enum machine_mode));\n \n #ifdef TREE_CODE\n-extern void frv_init_builtins PARAMS ((void));\n-extern rtx frv_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n-\n extern void frv_init_cumulative_args\t\tPARAMS ((CUMULATIVE_ARGS *, tree,\n \t\t\t\t\t\t       rtx, int, int));\n \n@@ -174,16 +171,6 @@ extern int frv_register_move_cost\tPARAMS ((enum reg_class, enum reg_class));\n \n #ifdef TREE_CODE\n extern int frv_adjust_field_align\tPARAMS ((tree, int));\n-extern void frv_select_section\t\tPARAMS ((tree, int));\n-#endif\n-\n-#ifdef RTX_CODE\n-extern void frv_select_rtx_section\tPARAMS ((enum machine_mode, rtx));\n-#endif\n-\n-#ifdef TREE_CODE\n-extern void frv_encode_section_info\tPARAMS ((tree));\n-extern void frv_unique_section\t\tPARAMS ((tree, int));\n #endif\n \n extern void fixup_section\t\tPARAMS ((void));"}, {"sha": "0ef0afeca634a435b57c2eaa1e62e9d55846c864", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14966b9462e5f6d52e27d86238a36b59ef5d5089/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14966b9462e5f6d52e27d86238a36b59ef5d5089/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=14966b9462e5f6d52e27d86238a36b59ef5d5089", "patch": "@@ -274,6 +274,13 @@ static void frv_pack_insns\t\t\tPARAMS ((void));\n static void frv_function_prologue\t\tPARAMS ((FILE *, HOST_WIDE_INT));\n static void frv_function_epilogue\t\tPARAMS ((FILE *, HOST_WIDE_INT));\n static bool frv_assemble_integer\t\tPARAMS ((rtx, unsigned, int));\n+static const char * frv_strip_name_encoding\tPARAMS ((const char *));\n+static void frv_encode_section_info\t\tPARAMS ((tree, int));\n+static void frv_unique_section\t\t\tPARAMS ((tree, int));\n+static void frv_init_builtins\t\t\tPARAMS ((void));\n+static rtx frv_expand_builtin\t\t\tPARAMS ((tree, rtx, rtx, enum machine_mode, int));\n+static void frv_select_section\t\t\tPARAMS ((tree, int, unsigned HOST_WIDE_INT));\n+static void frv_select_rtx_section\t\tPARAMS ((enum machine_mode, rtx, unsigned HOST_WIDE_INT));\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n@@ -282,6 +289,20 @@ static bool frv_assemble_integer\t\tPARAMS ((rtx, unsigned, int));\n #define TARGET_ASM_FUNCTION_EPILOGUE frv_function_epilogue\n #undef  TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER frv_assemble_integer\n+#undef  TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING frv_strip_name_encoding\n+#undef  TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO frv_encode_section_info\n+#undef  TARGET_ASM_UNIQUE_SECTION\n+#define TARGET_ASM_UNIQUE_SECTION frv_unique_section\n+#undef TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS frv_init_builtins\n+#undef TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN frv_expand_builtin\n+#undef TARGET_ASM_SELECT_SECTION\n+#define TARGET_ASM_SELECT_SECTION frv_select_section\n+#undef TARGET_ASM_SELECT_RTX_SECTION\n+#define TARGET_ASM_SELECT_RTX_SECTION frv_select_rtx_section\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -620,10 +641,11 @@ frv_optimization_options (level, size)\n \n    Defined in svr4.h.  */\n \n-void\n-frv_select_section (decl, reloc)\n+static void\n+frv_select_section (decl, reloc, align)\n      tree decl;\n      int reloc;\n+     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n {\n   int size = int_size_in_bytes (TREE_TYPE (decl));\n \n@@ -676,10 +698,11 @@ frv_select_section (decl, reloc)\n \n    Defined in svr4.h.  */\n \n-void\n-frv_select_rtx_section (mode, op)\n+static void\n+frv_select_rtx_section (mode, op, align)\n      enum machine_mode mode;\n      rtx op ATTRIBUTE_UNUSED;\n+     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n {\n   int size = (int) GET_MODE_SIZE (mode);\n   if (size > 0 && size <= g_switch_value)\n@@ -713,10 +736,13 @@ frv_string_begins_with (name, prefix)\n \n */\n \n-void\n-frv_encode_section_info (decl)\n+static void\n+frv_encode_section_info (decl, first)\n      tree decl;\n+     int first;\n {\n+  if (first)\n+    return;\n   if (TREE_CODE (decl) == VAR_DECL)\n     {\n       int size = int_size_in_bytes (TREE_TYPE (decl));\n@@ -757,7 +783,7 @@ frv_encode_section_info (decl)\n     }\n }\n \n-void\n+static void\n frv_unique_section (decl, reloc)\n      tree decl;\n      int reloc;\n@@ -767,7 +793,7 @@ frv_unique_section (decl, reloc)\n   const char *name;\n   char *string;\n   const char *prefix;\n-  static const char *prefixes[4][2] =\n+  static const char *const prefixes[4][2] =\n     {\n       { \".text.\", \".gnu.linkonce.t.\" },\n       { \".rodata.\", \".gnu.linkonce.r.\" },\n@@ -777,15 +803,15 @@ frv_unique_section (decl, reloc)\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     sec = 0;\n-  else if (DECL_READONLY_SECTION (decl, reloc))\n+  else if (decl_readonly_section (decl, reloc))\n     sec = 1;\n   else if (SDATA_NAME_P (XSTR (XEXP (DECL_RTL (decl), 0), 0)))\n     sec = 3;\n   else\n     sec = 2;\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  STRIP_NAME_ENCODING (name, name);\n+  name = (* targetm.strip_name_encoding) (name);\n   prefix = prefixes[sec][DECL_ONE_ONLY (decl)];\n   len = strlen (name) + strlen (prefix);\n   string = alloca (len + 1);\n@@ -3480,7 +3506,7 @@ frv_regno_ok_for_base_p (regno, strict_p)\n    with suitable punctuation to prevent any ambiguity.  Allocate the new name\n    in `saveable_obstack'.  You will have to modify `ASM_OUTPUT_LABELREF' to\n    remove and decode the added text and output the name accordingly, and define\n-   `STRIP_NAME_ENCODING' to access the original name string.\n+   `(* targetm.strip_name_encoding)' to access the original name string.\n \n    You can check the information stored here into the `symbol_ref' in the\n    definitions of the macros `GO_IF_LEGITIMATE_ADDRESS' and\n@@ -8309,7 +8335,7 @@ frv_assemble_integer (value, size, aligned_p)\n \t      const char *p;\n \n \t      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCP\", label_num++);\n-\t      STRIP_NAME_ENCODING (p, buf);\n+\t      p = (* targetm.strip_name_encoding) (buf);\n \n \t      fprintf (asm_out_file, \"%s:\\n\", p);\n \t      fprintf (asm_out_file, \"%s\\n\", FIXUP_SECTION_ASM_OP);\n@@ -9087,7 +9113,7 @@ static struct builtin_description bdesc_voidacc[] =\n \n /* Initialize media builtins. */\n \n-void\n+static void\n frv_init_builtins ()\n {\n   tree endlink = void_list_node;\n@@ -9706,7 +9732,7 @@ frv_expand_mwtacc_builtin (icode, arglist)\n \n /* Expand builtins. */\n \n-rtx\n+static rtx\n frv_expand_builtin (exp, target, subtarget, mode, ignore)\n      tree exp;\n      rtx target;\n@@ -9854,3 +9880,12 @@ frv_expand_builtin (exp, target, subtarget, mode, ignore)\n     }\n   return 0;\n }\n+\n+static const char *\n+frv_strip_name_encoding (str)\n+     const char *str;\n+{\n+  while (*str == '*' || *str == SDATA_FLAG_CHAR)\n+    str++;\n+  return str;\n+}"}, {"sha": "a663c03b4d332903dde59a3c30c0dd9f43fdc3fe", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 83, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14966b9462e5f6d52e27d86238a36b59ef5d5089/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14966b9462e5f6d52e27d86238a36b59ef5d5089/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=14966b9462e5f6d52e27d86238a36b59ef5d5089", "patch": "@@ -2464,7 +2464,7 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n    with suitable punctuation to prevent any ambiguity.  Allocate the new name\n    in `saveable_obstack'.  You will have to modify `ASM_OUTPUT_LABELREF' to\n    remove and decode the added text and output the name accordingly, and define\n-   `STRIP_NAME_ENCODING' to access the original name string.\n+   `(* targetm.strip_name_encoding)' to access the original name string.\n \n    You can check the information stored here into the `symbol_ref' in the\n    definitions of the macros `GO_IF_LEGITIMATE_ADDRESS' and\n@@ -2722,17 +2722,6 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n    same word of the structure, but to different bytes.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* Define this macro if zero-extension (of a `char' or `short' to an `int') can\n-   be done faster if the destination is a register that is known to be zero.\n-\n-   If you define this macro, you must have instruction patterns that recognize\n-   RTL structures like this:\n-\n-        (set (strict_low_part (subreg:QI (reg:SI ...) 0)) ...)\n-\n-   and likewise for `HImode'.  */\n-#define SLOW_ZERO_EXTEND 0\n-\n /* Define this macro if it is as good or better to call a constant function\n    address than to call an address kept in a register.  */\n #define NO_FUNCTION_CSE\n@@ -2837,59 +2826,9 @@ fixup_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \n-/* A C statement or statements to switch to the appropriate section for output\n-   of EXP.  You can assume that EXP is either a `VAR_DECL' node or a constant\n-   of some sort.  RELOC indicates whether the initial value of EXP requires\n-   link-time relocations.  Select the section by calling `text_section' or one\n-   of the alternatives for other sections.\n-\n-   Do not define this macro if you put all read-only variables and constants in\n-   the read-only data section (usually the text section).\n-\n-   Defined in svr4.h.  */\n-#undef\tSELECT_SECTION\n-#define SELECT_SECTION(EXP, RELOC, ALIGN) frv_select_section ((EXP), (RELOC))\n-\n-/* A C statement or statements to switch to the appropriate section for output\n-   of RTX in mode MODE.  You can assume that RTX is some kind of constant in\n-   RTL.  The argument MODE is redundant except in the case of a `const_int'\n-   rtx.  Select the section by calling `text_section' or one of the\n-   alternatives for other sections.\n-\n-   Do not define this macro if you put all constants in the read-only data\n-   section.\n-\n-   Defined in svr4.h.  */\n-#undef\tSELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) frv_select_rtx_section (MODE, RTX)\n-\n #define SDATA_FLAG_CHAR '@'\n \n #define SDATA_NAME_P(NAME) (*(NAME) == SDATA_FLAG_CHAR)\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      if (FIRST)\t\t\t\t\\\n-        frv_encode_section_info (DECL);\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* Decode SYM_NAME and store the real name part in VAR, sans\n-   the characters that encode section info.  Define this macro if\n-   ENCODE_SECTION_INFO alters the symbol's name string.  */\n-\n-#define STRIP_NAME_ENCODING(VAR, SYMBOL_NAME)\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      const char * _name = (SYMBOL_NAME);\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      while (* _name == '*' || * _name == SDATA_FLAG_CHAR)\t\\\n-\t_name ++;\t\t\t\t\t\t\\\n-      (VAR) = _name;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n \f\n /* Position Independent Code.  */\n \n@@ -3366,12 +3305,6 @@ do {                                                                    \\\n    Defined in svr4.h.  */\n #undef  PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n-\n-/* This version of UNIQUE_SECTION overrides the one in elfos.h.  We\n-   need to check whether DECL is destined for the .sdata section.  */\n-\n-#undef  UNIQUE_SECTION\n-#define UNIQUE_SECTION(DECL,RELOC) frv_unique_section (DECL, RELOC)\n \f\n /* Miscellaneous Parameters.  */\n \n@@ -3494,14 +3427,6 @@ do {                                                                    \\\n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND\n \n-/* An alias for a tree code that is the easiest kind of division to compile\n-   code for in the general case.  It may be `TRUNC_DIV_EXPR', `FLOOR_DIV_EXPR',\n-   `CEIL_DIV_EXPR' or `ROUND_DIV_EXPR'.  These four division operators differ\n-   in how they round the result to an integer.  `EASY_DIV_EXPR' is used when it\n-   is permissible to use any of those kinds of division and the choice should\n-   be made on the basis of efficiency.  */\n-#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n-\n /* The maximum number of bytes that a single instruction can move quickly from\n    memory to memory.  */\n #define MOVE_MAX 8\n@@ -3726,13 +3651,6 @@ enum frv_builtins\n   FRV_BUILTIN_MHDSETH\n };\n \n-#define MD_INIT_BUILTINS do { \\\n-    frv_init_builtins (); \\\n-  } while (0)\n-\n-#define MD_EXPAND_BUILTIN(EXP, TARGET, SUBTARGET, MODE, IGNORE) \\\n-    frv_expand_builtin ((EXP), (TARGET), (SUBTARGET), (MODE), (IGNORE))\n-\n /* Enable prototypes on the call rtl functions.  */\n #define MD_CALL_PROTOTYPES 1\n "}]}