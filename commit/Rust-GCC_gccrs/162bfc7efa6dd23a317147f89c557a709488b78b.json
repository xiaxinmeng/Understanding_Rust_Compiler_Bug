{"sha": "162bfc7efa6dd23a317147f89c557a709488b78b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyYmZjN2VmYTZkZDIzYTMxNzE0N2Y4OWM1NTdhNzA5NDg4Yjc4Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-12T16:55:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-12T16:55:43Z"}, "message": "re PR rtl-optimization/36111 (GCC 4.4.0-20080501 failed to compile openmpi's malloc.c file.)\n\n\tPR rtl-optimization/36111\n\t* recog.c (validate_replace_rtx_1): Unshare new RTL expression\n\tthat was created for swappable operands.\n\ntestsuite/ChangeLog:\n\n\tPR rtl-optimization/36111\n\t* gcc.dg/pr36111.c: New test.\n\nFrom-SVN: r135221", "tree": {"sha": "3303ac6a9a00c9e80c196162984587a511547af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3303ac6a9a00c9e80c196162984587a511547af7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/162bfc7efa6dd23a317147f89c557a709488b78b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162bfc7efa6dd23a317147f89c557a709488b78b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162bfc7efa6dd23a317147f89c557a709488b78b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162bfc7efa6dd23a317147f89c557a709488b78b/comments", "author": null, "committer": null, "parents": [{"sha": "3d4e720adc67915aa603b23a9d61e393c9000a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4e720adc67915aa603b23a9d61e393c9000a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d4e720adc67915aa603b23a9d61e393c9000a91"}], "stats": {"total": 69, "additions": 49, "deletions": 20}, "files": [{"sha": "2d309c043631910a122c8e7f3bcaa09f6440c967", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bfc7efa6dd23a317147f89c557a709488b78b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bfc7efa6dd23a317147f89c557a709488b78b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=162bfc7efa6dd23a317147f89c557a709488b78b", "patch": "@@ -1,3 +1,9 @@\n+2008-05-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/36111\n+\t* recog.c (validate_replace_rtx_1): Unshare new RTL expression\n+\tthat was created for swappable operands.\n+\n 2008-05-12  Samuel Tardieu  <sam@rfc1149.net>\n \n \tPR ada/36001\n@@ -57,10 +63,10 @@\n 2008-05-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/36129\n-\t* tree-ssa-cpp.c: Include value-prof.h.\n+\t* tree-ssa-ccp.c: Include value-prof.h.\n \t(execute_fold_all_builtins): Call gimple_remove_stmt_histograms if\n \tbuilt-in function was folded to a constant.\n-\t* Makefile.in (tree-ssa-cpp.c): Depend on value-prof.h\n+\t* Makefile.in (tree-ssa-ccp.c): Depend on value-prof.h\n \n 2008-05-09  Jan Sjodin  <jan.sjodin@amd.com>\n \t    Sebastian Pop  <sebastian.pop@amd.com>\n@@ -114,7 +120,8 @@\n \t* convert.c (strip_float_extensions): Use CONVERT_EXPR_P.\n \t* tree-ssa-threadedge.c (simplify_control_stmt_condition): Likewise.\n \t* config/alpha/alpha.c (va_list_skip_additions): Likewise.\n-\t* c-common.c (c_alignof_expr, check_function_arguments_recurse): Likewise.\n+\t* c-common.c (c_alignof_expr, check_function_arguments_recurse):\n+\tLikewise.\n \t* tree-ssa.c (tree_ssa_useless_type_conversion): Likewise.\n \t* varasm.c (initializer_constant_valid_p, output_constant): Likewise.\n \t* tree-ssa-forwprop.c (get_prop_source_stmt, can_propagate_from)\n@@ -125,12 +132,14 @@\n \t* emit-rtl.c (component_ref_for_mem_expr)\n \t(set_mem_attributes_minus_bitpos): Likewise.\n \t* tree-ssa-phiopt.c (conditional_replacement): Likewise.\n-\t* gimplify.c (gimplify_conversion, goa_lhs_expr_p, gimplify_expr): Likewise.\n+\t* gimplify.c (gimplify_conversion, goa_lhs_expr_p, gimplify_expr):\n+\tLikewise.\n \t* c-typeck.c (default_function_array_conversion, build_indirect_ref)\n \t(build_function_call, pointer_diff, build_compound_expr)\n \t(c_finish_return): Likewise.\n \t* tree-vect-analyze.c (vect_determine_vectorization_factor): Likewise.\n-\t* matrix-reorg.c (get_inner_of_cast_expr, may_flatten_matrices_1): Likewise.\n+\t* matrix-reorg.c (get_inner_of_cast_expr, may_flatten_matrices_1):\n+\tLikewise.\n \t* tree-ssa-ifcombine.c (recognize_single_bit_test): Likewise.\n \t* expr.c (is_aligning_offset): Likewise.\n \t* tree-ssa-alias.c (is_escape_site): Likewise.\n@@ -150,22 +159,22 @@\n \t* tree.c (really_constant_p, get_unwidened): Likewise.\n \t* tree-ssa-loop-niter.c (expand_simple_operations): Likewise.\n \t* tree-ssa-loop-im.c (rewrite_bittest): Likewise.\n-\t* tree-vrp.c (register_edge_assert_for_2, register_edge_assert_for_1): Likewise.\n-\t* tree.h (STRIP_NOPS, STRIP_SIGN_NOPS, STRIP_TYPE_NOPS): Use CONVERT_EXPR_P.\n+\t* tree-vrp.c (register_edge_assert_for_2, register_edge_assert_for_1):\n+\tLikewise.\n+\t* tree.h (STRIP_NOPS, STRIP_SIGN_NOPS, STRIP_TYPE_NOPS): Use\n+\tCONVERT_EXPR_P.\n \t(CONVERT_EXPR_P): Define.\n \t(CASE_CONVERT): Define.\n \t\n 2008-05-08  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n \tPR middle-end/36117\n-\t* dce.c (deletable_insn_p): Do not delete calls if \n-\tdf_in_progress.\n-\t(delete_unmarked_insns): When deleting a call, call \n+\t* dce.c (deletable_insn_p): Do not delete calls if df_in_progress.\n+\t(delete_unmarked_insns): When deleting a call, call\n \tdelete_unreachable_blocks.\n \t* rtl.texi (RTL_CONST_CALL_P, RTL_PURE_CALL_P,\n-\tRTL_CONST_OR_PURE_CALL_P, RTL_LOOPING_CONST_OR_PURE_CALL_P): Fixed\n-\tdoc.\n-\t\n+\tRTL_CONST_OR_PURE_CALL_P, RTL_LOOPING_CONST_OR_PURE_CALL_P): Fixed doc.\n+\n 2008-05-08  Richard Guenther  <rguenther@suse.de>\n \n \t* doc/invoke.texi (-fdump-tree-salias): Remove documentation.\n@@ -353,8 +362,7 @@\n \t(add_to_addressable_set): Likewise.\n \t* tree-ssa.c (verify_ssa_name): Do not handle SFTs.\n \t* tree-tailcall.c (suitable_for_tail_opt_p): Likewise.\n-\t* tree-vect-transform.c (vect_create_data_ref_ptr): Do not\n-\tset subvars.\n+\t* tree-vect-transform.c (vect_create_data_ref_ptr): Do not set subvars.\n \t* tree.c (init_ttree): Remove STRUCT_FIELD_TAG initialization.\n \t(tree_code_size): Remove STRUCT_FIELD_TAG handling.\n \t(tree_node_structure): Likewise."}, {"sha": "91e4e999d6cc78baf3c422e21e1e1df3a91352e7", "filename": "gcc/recog.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bfc7efa6dd23a317147f89c557a709488b78b/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bfc7efa6dd23a317147f89c557a709488b78b/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=162bfc7efa6dd23a317147f89c557a709488b78b", "patch": "@@ -589,11 +589,11 @@ validate_replace_rtx_1 (rtx *loc, rtx from, rtx to, rtx object)\n   if (SWAPPABLE_OPERANDS_P (x)\n       && swap_commutative_operands_p (XEXP (x, 0), XEXP (x, 1)))\n     {\n-      validate_change (object, loc,\n-\t\t       gen_rtx_fmt_ee (COMMUTATIVE_ARITH_P (x) ? code\n-\t\t\t\t       : swap_condition (code),\n-\t\t\t\t       GET_MODE (x), XEXP (x, 1),\n-\t\t\t\t       XEXP (x, 0)), 1);\n+      validate_unshare_change (object, loc,\n+\t\t\t       gen_rtx_fmt_ee (COMMUTATIVE_ARITH_P (x) ? code\n+\t\t\t\t\t       : swap_condition (code),\n+\t\t\t\t\t       GET_MODE (x), XEXP (x, 1),\n+\t\t\t\t\t       XEXP (x, 0)), 1);\n       x = *loc;\n       code = GET_CODE (x);\n     }"}, {"sha": "e2624e44e418dc67d21b9bf5a01528fe0d133386", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bfc7efa6dd23a317147f89c557a709488b78b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bfc7efa6dd23a317147f89c557a709488b78b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=162bfc7efa6dd23a317147f89c557a709488b78b", "patch": "@@ -1,3 +1,8 @@\n+2008-05-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/36111\n+\t* gcc.dg/pr36111.c: New test.\n+\n 2008-05-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/36176"}, {"sha": "498c39e1be49dc7dcd74d3861bc352f293c09e8b", "filename": "gcc/testsuite/gcc.dg/pr36111.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bfc7efa6dd23a317147f89c557a709488b78b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bfc7efa6dd23a317147f89c557a709488b78b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36111.c?ref=162bfc7efa6dd23a317147f89c557a709488b78b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target fpic } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+\n+typedef struct {\n+  int lock;\n+  int pad0_;\n+} mutex_t;\n+\n+static mutex_t main_arena;\n+\n+void __malloc_check_init()\n+{\n+  for(;;)\n+    __asm__ __volatile__ (\"\": \"+m\"(main_arena.lock) );\n+}\n+"}]}