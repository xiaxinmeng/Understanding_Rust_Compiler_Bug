{"sha": "a29f4129cc1ee65f68dcaeb8dc1438f77bee2f2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5ZjQxMjljYzFlZTY1ZjY4ZGNhZWI4ZGMxNDM4Zjc3YmVlMmYyYw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1997-07-30T19:05:31Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1997-07-30T19:05:31Z"}, "message": "cplus-dem.c: Various changes to produce Java output when passed DMGL_JAVA.\n\n* cplus-dem.c:  Various changes to produce Java output when passed\nDMGL_JAVA.  Thus \"::\" becomes \".\" and \"JArray<Foo>\" becomes \"Foo[]\".\n(main):  Support --java and -j flags to set DMGL_JAVA.\n\nFrom-SVN: r14565", "tree": {"sha": "54649435a5183538bf617aa53f1ffaec539ce088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54649435a5183538bf617aa53f1ffaec539ce088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a29f4129cc1ee65f68dcaeb8dc1438f77bee2f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29f4129cc1ee65f68dcaeb8dc1438f77bee2f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a29f4129cc1ee65f68dcaeb8dc1438f77bee2f2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29f4129cc1ee65f68dcaeb8dc1438f77bee2f2c/comments", "author": null, "committer": null, "parents": [{"sha": "72fa4f0ad2cd1e0225f5618cdc5e421db3c21fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72fa4f0ad2cd1e0225f5618cdc5e421db3c21fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72fa4f0ad2cd1e0225f5618cdc5e421db3c21fab"}], "stats": {"total": 71, "additions": 47, "deletions": 24}, "files": [{"sha": "26fbe954afd8b3d68e68ceb476d9f99e1cfe625a", "filename": "gcc/cplus-dem.c", "status": "modified", "additions": 47, "deletions": 24, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29f4129cc1ee65f68dcaeb8dc1438f77bee2f2c/gcc%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29f4129cc1ee65f68dcaeb8dc1438f77bee2f2c/gcc%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcplus-dem.c?ref=a29f4129cc1ee65f68dcaeb8dc1438f77bee2f2c", "patch": "@@ -731,7 +731,7 @@ demangle_signature (work, mangled, declp)\n \t    {\n \t      remember_type (work, oldmangled, *mangled - oldmangled);\n \t    }\n-\t  string_append(&tname, \"::\");\n+\t  string_append(&tname, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n \t  string_prepends(declp, &tname);\n \t  if (work -> destructor & 1)\n \t    {\n@@ -857,6 +857,7 @@ demangle_template (work, mangled, tname, trawname)\n   const char *old_p;\n   const char *start;\n   int symbol_len;\n+  int is_java_array;\n   string temp;\n \n   (*mangled)++;\n@@ -868,9 +869,14 @@ demangle_template (work, mangled, tname, trawname)\n     }\n   if (trawname)\n     string_appendn (trawname, *mangled, r);\n-  string_appendn (tname, *mangled, r);\n+  is_java_array = (work -> options & DMGL_JAVA)\n+    && strncmp (*mangled, \"JArray1Z\", 8) == 0;\n+  if (! is_java_array)\n+    {\n+      string_appendn (tname, *mangled, r);\n+      string_append (tname, \"<\");\n+    }\n   *mangled += r;\n-  string_append (tname, \"<\");\n   /* get size of template parameter list */\n   if (!get_count (mangled, &r))\n     {\n@@ -1085,9 +1091,16 @@ demangle_template (work, mangled, tname, trawname)\n \t}\n       need_comma = 1;\n     }\n-  if (tname->p[-1] == '>')\n-    string_append (tname, \" \");\n-  string_append (tname, \">\");\n+  if (is_java_array)\n+    {\n+      string_append (tname, \"[]\");\n+    }\n+  else\n+    {\n+      if (tname->p[-1] == '>')\n+\tstring_append (tname, \" \");\n+      string_append (tname, \">\");\n+    }\n   \n   /*\n     if (work -> static_type)\n@@ -1242,7 +1255,7 @@ demangle_class (work, mangled, declp)\n \t      work -> constructor -= 1; \n \t    }\n \t}\n-      string_prepend (declp, \"::\");\n+      string_prepend (declp, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n       string_prepends (declp, &class_name);\n       success = 1;\n     }\n@@ -1532,7 +1545,8 @@ gnu_special (work, mangled, declp)\n \t    {\n \t      if (p != NULL)\n \t\t{\n-\t\t  string_append (declp, \"::\");\n+\t\t  string_append (declp,\n+\t\t\t\t (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n \t\t  (*mangled)++;\n \t\t}\n \t    }\n@@ -1569,7 +1583,7 @@ gnu_special (work, mangled, declp)\n \t  /* Consumed everything up to the cplus_marker, append the\n \t     variable name.  */\n \t  (*mangled)++;\n-\t  string_append (declp, \"::\");\n+\t  string_append (declp, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n \t  n = strlen (*mangled);\n \t  string_appendn (declp, *mangled, n);\n \t  (*mangled) += n;\n@@ -1828,7 +1842,7 @@ demangle_qualified (work, mangled, result, isfuncname, append)\n \t}\n       if (qualifiers > 0)\n         {\n-          string_appendn (&temp, \"::\", 2);\n+          string_append (&temp, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n         }\n     }\n \n@@ -1839,7 +1853,7 @@ demangle_qualified (work, mangled, result, isfuncname, append)\n \n   if (isfuncname && (work->constructor & 1 || work->destructor & 1))\n     {\n-      string_appendn (&temp, \"::\", 2);\n+      string_append (&temp, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n       if (work -> destructor & 1)\n \t{\n \t  string_append (&temp, \"~\");\n@@ -1858,7 +1872,7 @@ demangle_qualified (work, mangled, result, isfuncname, append)\n     {\n       if (!STRING_EMPTY (result))\n \t{\n-\t  string_appendn (&temp, \"::\", 2);\n+\t  string_append (&temp, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n \t}\n       string_prepends (result, &temp);\n     }\n@@ -1951,7 +1965,8 @@ do_type (work, mangled, result)\n \tcase 'P':\n \tcase 'p':\n \t  (*mangled)++;\n-\t  string_prepend (&decl, \"*\");\n+\t  if (! (work -> options & DMGL_JAVA))\n+\t    string_prepend (&decl, \"*\");\n \t  break;\n \n \t  /* A reference type */\n@@ -2033,7 +2048,7 @@ do_type (work, mangled, result)\n \t      }\n \n \t    string_append (&decl, \")\");\n-\t    string_prepend (&decl, \"::\");\n+\t    string_prepend (&decl, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n \t    if (isdigit (**mangled)) \n \t      {\n \t\tn = consume_count (mangled);\n@@ -2866,13 +2881,23 @@ string_prependn (p, s, n)\n \n #ifdef MAIN\n \n+#include \"getopt.h\"\n+\n+static char *program_name;\n+static char *program_version = VERSION;\n+static int flags = DMGL_PARAMS | DMGL_ANSI;\n+\n+static void demangle_it PARAMS ((char *));\n+static void usage PARAMS ((FILE *, int));\n+static void fatal PARAMS ((char *));\n+\n static void\n demangle_it (mangled_name)\n      char *mangled_name;\n {\n   char *result;\n \n-  result = cplus_demangle (mangled_name, DMGL_PARAMS | DMGL_ANSI);\n+  result = cplus_demangle (mangled_name, flags);\n   if (result == NULL)\n     {\n       printf (\"%s\\n\", mangled_name);\n@@ -2884,11 +2909,6 @@ demangle_it (mangled_name)\n     }\n }\n \n-#include \"getopt.h\"\n-\n-static char *program_name;\n-static char *program_version = VERSION;\n-\n static void\n usage (stream, status)\n      FILE *stream;\n@@ -2906,14 +2926,15 @@ Usage: %s [-_] [-n] [-s {gnu,lucid,arm}] [--strip-underscores]\\n\\\n char mbuffer[MBUF_SIZE];\n \n /* Defined in the automatically-generated underscore.c.  */\n-extern int prepends_underscore;\n+int prepends_underscore;\n \n int strip_underscore = 0;\n \n static struct option long_options[] = {\n   {\"strip-underscores\", no_argument, 0, '_'},\n   {\"format\", required_argument, 0, 's'},\n   {\"help\", no_argument, 0, 'h'},\n+  {\"java\", no_argument, 0, 'j'},\n   {\"no-strip-underscores\", no_argument, 0, 'n'},\n   {\"version\", no_argument, 0, 'v'},\n   {0, no_argument, 0, 0}\n@@ -2931,7 +2952,7 @@ main (argc, argv)\n \n   strip_underscore = prepends_underscore;\n \n-  while ((c = getopt_long (argc, argv, \"_ns:\", long_options, (int *) 0)) != EOF)\n+  while ((c = getopt_long (argc, argv, \"_nsj:\", long_options, (int *) 0)) != EOF)\n     {\n       switch (c)\n \t{\n@@ -2949,6 +2970,9 @@ main (argc, argv)\n \tcase '_':\n \t  strip_underscore = 1;\n \t  break;\n+\tcase 'j':\n+\t  flags |= DMGL_JAVA;\n+\t  break;\n \tcase 's':\n \t  if (strcmp (optarg, \"gnu\") == 0)\n \t    {\n@@ -3007,8 +3031,7 @@ main (argc, argv)\n \n \t      mbuffer[i] = 0;\n \t      \n-\t      result = cplus_demangle (mbuffer + skip_first,\n-\t\t\t\t       DMGL_PARAMS | DMGL_ANSI);\n+\t      result = cplus_demangle (mbuffer + skip_first, flags);\n \t      if (result)\n \t\t{\n \t\t  if (mbuffer[0] == '.')"}]}