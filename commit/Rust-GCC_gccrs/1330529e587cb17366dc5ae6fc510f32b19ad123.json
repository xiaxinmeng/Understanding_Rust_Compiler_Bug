{"sha": "1330529e587cb17366dc5ae6fc510f32b19ad123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMzMDUyOWU1ODdjYjE3MzY2ZGM1YWU2ZmM1MTBmMzJiMTlhZDEyMw==", "commit": {"author": {"name": "Greg McGary", "email": "greg@mcgary.org", "date": "2005-01-02T22:24:50Z"}, "committer": {"name": "Greg McGary", "email": "gkm@gcc.gnu.org", "date": "2005-01-02T22:24:50Z"}, "message": "mf-impl.h (uintptr_t): Get typedef via stdint.h or define explicitly.\n\n\t* mf-impl.h (uintptr_t): Get typedef via stdint.h or define explicitly.\n\t* mf-runtime.h: New file, replaces mf-runtime.h.in.\n\t* configure.ac (AC_CONFIG_FILES): mf-runtime.h is no longer generated.\n\t* Makefile.in: Ditto.\n\t* testsuite/lib/libmudflap.exp: Add -I${srcdir}/.. to get mf-runtime.h\n\t* testsuite/libmudflap.c/pass32-frag.c: s/uintptr_t/__mf_uintptr_t/\n\t* testsuite/libmudflap.c/fail36-frag.c: New test.\n\t* testsuite/libmudflap.c/fail37-frag.c: New test.\n\t* testsuite/libmudflap.c/fail38-frag.c: New test.\n\nFrom-SVN: r92815", "tree": {"sha": "a1789ecd62d4476eaac6bade96f7be70f76b84ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1789ecd62d4476eaac6bade96f7be70f76b84ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1330529e587cb17366dc5ae6fc510f32b19ad123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1330529e587cb17366dc5ae6fc510f32b19ad123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1330529e587cb17366dc5ae6fc510f32b19ad123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1330529e587cb17366dc5ae6fc510f32b19ad123/comments", "author": null, "committer": null, "parents": [{"sha": "97236777ce70b03149dfbf501969bf72840eda9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97236777ce70b03149dfbf501969bf72840eda9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97236777ce70b03149dfbf501969bf72840eda9d"}], "stats": {"total": 135, "additions": 107, "deletions": 28}, "files": [{"sha": "ace95ce6062b2ba5b04fd3bc5a9a5ebb0d9551e9", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=1330529e587cb17366dc5ae6fc510f32b19ad123", "patch": "@@ -1,3 +1,15 @@\n+2004-01-02  Greg McGary  <greg@mcgary.org>\n+\n+\t* mf-impl.h (uintptr_t): Get typedef via stdint.h or define explicitly.\n+\t* mf-runtime.h: New file, replaces mf-runtime.h.in.\n+\t* configure.ac (AC_CONFIG_FILES): mf-runtime.h is no longer generated.\n+\t* Makefile.in: Ditto.\n+\t* testsuite/lib/libmudflap.exp: Add -I${srcdir}/.. to get mf-runtime.h\n+\t* testsuite/libmudflap.c/pass32-frag.c: s/uintptr_t/__mf_uintptr_t/\n+\t* testsuite/libmudflap.c/fail36-frag.c: New test.\n+\t* testsuite/libmudflap.c/fail37-frag.c: New test.\n+\t* testsuite/libmudflap.c/fail38-frag.c: New test.\n+\n 2004-12-08  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* Makefile.am: Add ../config to ACLOCAL_AMFLAGS."}, {"sha": "b251f2a8ccce13c54a830565ce1da9f65a8ea1d6", "filename": "libmudflap/Makefile.in", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FMakefile.in?ref=1330529e587cb17366dc5ae6fc510f32b19ad123", "patch": "@@ -46,7 +46,7 @@ DIST_COMMON = $(am__configure_deps) $(include_HEADERS) \\\n \t$(srcdir)/../ltmain.sh $(srcdir)/../missing \\\n \t$(srcdir)/../mkinstalldirs $(srcdir)/Makefile.am \\\n \t$(srcdir)/Makefile.in $(srcdir)/config.h.in \\\n-\t$(srcdir)/mf-runtime.h.in $(top_srcdir)/configure ChangeLog\n+\t$(top_srcdir)/configure ChangeLog\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/gcc-version.m4 \\\n@@ -57,7 +57,6 @@ am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\\n  configure.lineno configure.status.lineno\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = config.h\n-CONFIG_CLEAN_FILES = mf-runtime.h\n am__vpath_adj_setup = srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`;\n am__vpath_adj = case $$p in \\\n     $(srcdir)/*) f=`echo \"$$p\" | sed \"s|^$$srcdirstrip/||\"`;; \\\n@@ -347,8 +346,6 @@ $(srcdir)/config.h.in: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)\n \n distclean-hdr:\n \t-rm -f config.h stamp-h1\n-mf-runtime.h: $(top_builddir)/config.status $(srcdir)/mf-runtime.h.in\n-\tcd $(top_builddir) && $(SHELL) ./config.status $@\n install-toolexeclibLTLIBRARIES: $(toolexeclib_LTLIBRARIES)\n \t@$(NORMAL_INSTALL)\n \ttest -z \"$(toolexeclibdir)\" || $(mkdir_p) \"$(DESTDIR)$(toolexeclibdir)\""}, {"sha": "6bcb2534ef4942284584c092fb8c591693451e5c", "filename": "libmudflap/configure", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure?ref=1330529e587cb17366dc5ae6fc510f32b19ad123", "patch": "@@ -6854,7 +6854,7 @@ else\n   multilib_arg=\n fi\n \n-                                        ac_config_files=\"$ac_config_files Makefile testsuite/Makefile testsuite/mfconfig.exp mf-runtime.h\"\n+                                        ac_config_files=\"$ac_config_files Makefile testsuite/Makefile testsuite/mfconfig.exp\"\n \n cat >confcache <<\\_ACEOF\n # This file is a shell script that caches the results of configure\n@@ -7433,7 +7433,6 @@ do\n   \"Makefile\" ) CONFIG_FILES=\"$CONFIG_FILES Makefile\" ;;\n   \"testsuite/Makefile\" ) CONFIG_FILES=\"$CONFIG_FILES testsuite/Makefile\" ;;\n   \"testsuite/mfconfig.exp\" ) CONFIG_FILES=\"$CONFIG_FILES testsuite/mfconfig.exp\" ;;\n-  \"mf-runtime.h\" ) CONFIG_FILES=\"$CONFIG_FILES mf-runtime.h\" ;;\n   \"default-1\" ) CONFIG_COMMANDS=\"$CONFIG_COMMANDS default-1\" ;;\n   \"depfiles\" ) CONFIG_COMMANDS=\"$CONFIG_COMMANDS depfiles\" ;;\n   \"config.h\" ) CONFIG_HEADERS=\"$CONFIG_HEADERS config.h\" ;;"}, {"sha": "6a771f6bc93cede658aebb4e2ca0689420f35070", "filename": "libmudflap/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure.ac?ref=1330529e587cb17366dc5ae6fc510f32b19ad123", "patch": "@@ -231,5 +231,5 @@ else\n   multilib_arg=\n fi\n \n-AC_CONFIG_FILES([Makefile testsuite/Makefile testsuite/mfconfig.exp mf-runtime.h])\n+AC_CONFIG_FILES([Makefile testsuite/Makefile testsuite/mfconfig.exp])\n AC_OUTPUT"}, {"sha": "ee582ea7bcea61fadaf5d3acc465a55def5e21aa", "filename": "libmudflap/mf-impl.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Fmf-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Fmf-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-impl.h?ref=1330529e587cb17366dc5ae6fc510f32b19ad123", "patch": "@@ -1,6 +1,6 @@\n /* Implementation header for mudflap runtime library.\n    Mudflap: narrow-pointer bounds-checking by tree rewriting.  \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.  \n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.  \n    Contributed by Frank Ch. Eigler <fche@redhat.com> \n    and Graydon Hoare <graydon@redhat.com>\n    \n@@ -43,6 +43,11 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #error \"Cannot build libmudflapth without pthread.h.\"\n #endif\n \n+#if HAVE_STDINT_H\n+#include <stdint.h>\n+#else\n+typedef __mf_uintptr_t uintptr_t;\n+#endif\n \n /* Private definitions related to mf-runtime.h  */\n "}, {"sha": "b008883c43f0c4eadc28e78f356401a77ee2a75e", "filename": "libmudflap/mf-runtime.h", "status": "renamed", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Fmf-runtime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Fmf-runtime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-runtime.h?ref=1330529e587cb17366dc5ae6fc510f32b19ad123", "patch": "@@ -3,17 +3,9 @@\n #ifndef MF_RUNTIME_H\n #define MF_RUNTIME_H\n \n-#if @MF_HAVE_STDINT_H@ /* autoconf HAVE_STDINT_H */\n-#include <stdint.h>\n-#endif\n-#include <sys/types.h>\n-#if ! @MF_HAVE_UINTPTR_T@\n-typedef unsigned long uintptr_t;\n-#define HAVE_UINTPTR_T 1\n-/* Define this here, in case an autoconf application was run\n-   without CFLAGS=-fmudflap but is being compiled with -fmudflap.  */\n-#endif\n-\n+typedef void *__mf_ptr_t;\n+typedef unsigned int __mf_uintptr_t __attribute__ ((__mode__ (__pointer__)));\n+typedef __SIZE_TYPE__ __mf_size_t;\n \n /* Global declarations used by instrumentation.  When _MUDFLAP is\n    defined, these have been auto-declared by the compiler and we\n@@ -22,9 +14,9 @@ typedef unsigned long uintptr_t;\n    library's, but the C++ front end has no mechanism for allowing\n    the re-definition of a structure type).  */\n #ifndef _MUDFLAP\n-struct __mf_cache { uintptr_t low; uintptr_t high; };\n+struct __mf_cache { __mf_uintptr_t low; __mf_uintptr_t high; };\n extern struct __mf_cache __mf_lookup_cache [];\n-extern uintptr_t __mf_lc_mask;\n+extern __mf_uintptr_t __mf_lc_mask;\n extern unsigned char __mf_lc_shift;\n #endif\n \n@@ -57,14 +49,14 @@ extern unsigned char __mf_lc_shift;\n extern \"C\" {\n #endif\n \n-extern void __mf_check (void *ptr, size_t sz, int type, const char *location)\n+extern void __mf_check (void *ptr, __mf_size_t sz, int type, const char *location)\n        __attribute((nothrow));\n-extern void __mf_register (void *ptr, size_t sz, int type, const char *name) \n+extern void __mf_register (void *ptr, __mf_size_t sz, int type, const char *name) \n        __attribute((nothrow));\n-extern void __mf_unregister (void *ptr, size_t sz, int type)\n+extern void __mf_unregister (void *ptr, __mf_size_t sz, int type)\n        __attribute((nothrow));\n-extern unsigned __mf_watch (void *ptr, size_t sz);\n-extern unsigned __mf_unwatch (void *ptr, size_t sz);\n+extern unsigned __mf_watch (void *ptr, __mf_size_t sz);\n+extern unsigned __mf_unwatch (void *ptr, __mf_size_t sz);\n extern void __mf_report ();\n extern int __mf_set_options (const char *opts);\n ", "previous_filename": "libmudflap/mf-runtime.h.in"}, {"sha": "4b80716ebbfd6d4aea52e6a4bc758d9b990c052a", "filename": "libmudflap/testsuite/lib/libmudflap.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp?ref=1330529e587cb17366dc5ae6fc510f32b19ad123", "patch": "@@ -83,7 +83,7 @@ proc libmudflap-init { language } {\n \n     set libs \"-L${blddir}/.libs\"\n     set cxxflags \"-ggdb3 -DDEBUG_ASSERT\"\n-    set includes \"-I${srcdir} -I..\"\n+    set includes \"-I${srcdir} -I${srcdir}/.. -I..\"\n \n     if {$language == \"c++\"} {\n         if {[file exists $cxxflags_file]} then {"}, {"sha": "af6851c1d237d05e34575e2af39857cfaabe9a45", "filename": "libmudflap/testsuite/libmudflap.c/fail36-frag.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail36-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail36-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail36-frag.c?ref=1330529e587cb17366dc5ae6fc510f32b19ad123", "patch": "@@ -0,0 +1,23 @@\n+#include <stdlib.h>\n+\n+struct k\n+{\n+  int p;\n+  struct {\n+    int m : 31;\n+  } q;\n+};\n+\n+int\n+main ()\n+{\n+  volatile struct k *l = malloc (sizeof (int)); /* make it only big enough for k.p */\n+  /* Confirm that we instrument this nested construct\n+     BIT_FIELD_REF(COMPONENT_REF(INDIRECT_REF)). */\n+  l->q.m = 5;\n+  return 0;\n+}\n+/* { dg-output \"mudflap violation 1.*\" } */\n+/* { dg-output \"Nearby object.*\" } */\n+/* { dg-output \"mudflap object.*\" } */\n+/* { dg-do run { xfail *-*-* } } */"}, {"sha": "41ce4b91e05c4b9d9cdbc9a33cea782b243b90c0", "filename": "libmudflap/testsuite/libmudflap.c/fail37-frag.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail37-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail37-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail37-frag.c?ref=1330529e587cb17366dc5ae6fc510f32b19ad123", "patch": "@@ -0,0 +1,22 @@\n+typedef struct\n+{\n+  short f : 3;\n+} small;\n+\n+struct\n+{\n+  int i;\n+  small s[4];\n+} x;\n+\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 5; i++)\n+    x.s[i].f = 0;\n+  exit (0);\n+}\n+/* { dg-output \"mudflap violation 1.*\" } */\n+/* { dg-output \"Nearby object.*\" } */\n+/* { dg-output \"mudflap object.* x.*\" } */\n+/* { dg-do run { xfail *-*-* } } */"}, {"sha": "9667e213418aa41ca59aef696973eacaa490160b", "filename": "libmudflap/testsuite/libmudflap.c/fail38-frag.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail38-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail38-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail38-frag.c?ref=1330529e587cb17366dc5ae6fc510f32b19ad123", "patch": "@@ -0,0 +1,29 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+int main ()\n+{\n+struct a {\n+  int x;\n+  int y;\n+  int z : 10;\n+};\n+\n+struct b {\n+  int x;\n+  int y;\n+};\n+\n+volatile struct b k;\n+volatile struct a *p;\n+\n+p = (struct a*) &k;\n+\n+p->z = 'q';\n+\n+return 0;\n+}\n+/* { dg-output \"mudflap violation 1.*\" } */\n+/* { dg-output \"Nearby object 1.*\" } */\n+/* { dg-output \"mudflap object.*.main. k.*\" } */\n+/* { dg-do run { xfail *-*-* } } */"}, {"sha": "384686423282891c26d88ce861403d75e8fc7ca4", "filename": "libmudflap/testsuite/libmudflap.c/pass32-frag.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass32-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330529e587cb17366dc5ae6fc510f32b19ad123/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass32-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass32-frag.c?ref=1330529e587cb17366dc5ae6fc510f32b19ad123", "patch": "@@ -13,6 +13,6 @@ int main ()\n {\n struct foo k;\n char *n = get_z (& k);\n-srand ((int)(uintptr_t) n); /* use the pointer value */\n+srand ((int)(__mf_uintptr_)t n); /* use the pointer value */\n return 0;\n }"}]}