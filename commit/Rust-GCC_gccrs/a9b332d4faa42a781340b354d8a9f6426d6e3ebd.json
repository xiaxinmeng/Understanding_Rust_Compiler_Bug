{"sha": "a9b332d4faa42a781340b354d8a9f6426d6e3ebd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTliMzMyZDRmYWE0MmE3ODEzNDBiMzU0ZDhhOWY2NDI2ZDZlM2ViZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-29T09:24:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-29T09:24:23Z"}, "message": "tree-vrp.c (get_value_range): Only set parameter default definitions to varying, leave others at undefined.\n\n2011-07-29  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vrp.c (get_value_range): Only set parameter default\n\tdefinitions to varying, leave others at undefined.\n\t(extract_range_from_binary_expr): Fix undefined handling.\n\t(vrp_visit_phi_node): Handle merged undefined state.\n\n\t* gcc.dg/uninit-suppress.c: Also disable VRP.\n\t* gcc.dg/uninit-suppress_2.c: Likewise.\n\nFrom-SVN: r176918", "tree": {"sha": "3ff702d99bd1b72a7e57dcb5000b12ec28ee85d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ff702d99bd1b72a7e57dcb5000b12ec28ee85d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9b332d4faa42a781340b354d8a9f6426d6e3ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b332d4faa42a781340b354d8a9f6426d6e3ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9b332d4faa42a781340b354d8a9f6426d6e3ebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b332d4faa42a781340b354d8a9f6426d6e3ebd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "a184cc27cc9f9b29b06c907333e3c8497f017d6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b332d4faa42a781340b354d8a9f6426d6e3ebd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b332d4faa42a781340b354d8a9f6426d6e3ebd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9b332d4faa42a781340b354d8a9f6426d6e3ebd", "patch": "@@ -1,3 +1,10 @@\n+2011-07-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (get_value_range): Only set parameter default\n+\tdefinitions to varying, leave others at undefined.\n+\t(extract_range_from_binary_expr): Fix undefined handling.\n+\t(vrp_visit_phi_node): Handle merged undefined state.\n+\n 2011-07-29  Wei Guozhi  <carrot@google.com>\n \n \tPR rtl-optimization/49799"}, {"sha": "6ba2c8de1db7d73166d7933f80a836637da1aae9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b332d4faa42a781340b354d8a9f6426d6e3ebd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b332d4faa42a781340b354d8a9f6426d6e3ebd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9b332d4faa42a781340b354d8a9f6426d6e3ebd", "patch": "@@ -1,3 +1,8 @@\n+2011-07-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/uninit-suppress.c: Also disable VRP.\n+\t* gcc.dg/uninit-suppress_2.c: Likewise.\n+\n 2011-07-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/49808"}, {"sha": "be3b4c1ab4fecc700f0e3646d7f8c26230c0e693", "filename": "gcc/testsuite/gcc.dg/uninit-suppress.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b332d4faa42a781340b354d8a9f6426d6e3ebd/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b332d4faa42a781340b354d8a9f6426d6e3ebd/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress.c?ref=a9b332d4faa42a781340b354d8a9f6426d6e3ebd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fno-tree-ccp -O2 -Wuninitialized -Wno-maybe-uninitialized\" } */\n+/* { dg-options \"-fno-tree-ccp -fno-tree-vrp -O2 -Wuninitialized -Wno-maybe-uninitialized\" } */\n void blah();\n int gflag;\n "}, {"sha": "e1497347336a74d3bc7e06f44abc351835be2290", "filename": "gcc/testsuite/gcc.dg/uninit-suppress_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b332d4faa42a781340b354d8a9f6426d6e3ebd/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b332d4faa42a781340b354d8a9f6426d6e3ebd/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress_2.c?ref=a9b332d4faa42a781340b354d8a9f6426d6e3ebd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fno-tree-ccp -O2 -Wuninitialized -Werror=uninitialized -Wno-error=maybe-uninitialized\" } */\n+/* { dg-options \"-fno-tree-ccp -fno-tree-vrp -O2 -Wuninitialized -Werror=uninitialized -Wno-error=maybe-uninitialized\" } */\n void blah();\n int gflag;\n "}, {"sha": "15331e1fcc69b04671d49c4b037619cc0be785a3", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b332d4faa42a781340b354d8a9f6426d6e3ebd/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b332d4faa42a781340b354d8a9f6426d6e3ebd/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a9b332d4faa42a781340b354d8a9f6426d6e3ebd", "patch": "@@ -692,16 +692,16 @@ get_value_range (const_tree var)\n   /* Defer allocating the equivalence set.  */\n   vr->equiv = NULL;\n \n-  /* If VAR is a default definition, the variable can take any value\n-     in VAR's type.  */\n+  /* If VAR is a default definition of a parameter, the variable can\n+     take any value in VAR's type.  */\n   sym = SSA_NAME_VAR (var);\n-  if (SSA_NAME_IS_DEFAULT_DEF (var))\n+  if (SSA_NAME_IS_DEFAULT_DEF (var)\n+      && TREE_CODE (sym) == PARM_DECL)\n     {\n       /* Try to use the \"nonnull\" attribute to create ~[0, 0]\n \t anti-ranges for pointers.  Note that this is only valid with\n \t default definitions of PARM_DECLs.  */\n-      if (TREE_CODE (sym) == PARM_DECL\n-\t  && POINTER_TYPE_P (TREE_TYPE (sym))\n+      if (POINTER_TYPE_P (TREE_TYPE (sym))\n \t  && nonnull_arg_p (sym))\n \tset_value_range_to_nonnull (vr, TREE_TYPE (sym));\n       else\n@@ -2225,12 +2225,20 @@ extract_range_from_binary_expr (value_range_t *vr,\n   else\n     set_value_range_to_varying (&vr1);\n \n-  /* If either range is UNDEFINED, so is the result.  */\n-  if (vr0.type == VR_UNDEFINED || vr1.type == VR_UNDEFINED)\n+  /* If both ranges are UNDEFINED, so is the result.  */\n+  if (vr0.type == VR_UNDEFINED && vr1.type == VR_UNDEFINED)\n     {\n       set_value_range_to_undefined (vr);\n       return;\n     }\n+  /* If one of the ranges is UNDEFINED drop it to VARYING for the following\n+     code.  At some point we may want to special-case operations that\n+     have UNDEFINED result for all or some value-ranges of the not UNDEFINED\n+     operand.  */\n+  else if (vr0.type == VR_UNDEFINED)\n+    set_value_range_to_varying (&vr0);\n+  else if (vr1.type == VR_UNDEFINED)\n+    set_value_range_to_varying (&vr1);\n \n   /* The type of the resulting value range defaults to VR0.TYPE.  */\n   type = vr0.type;\n@@ -6642,6 +6650,8 @@ vrp_visit_phi_node (gimple phi)\n \n   if (vr_result.type == VR_VARYING)\n     goto varying;\n+  else if (vr_result.type == VR_UNDEFINED)\n+    goto update_range;\n \n   old_edges = vr_phi_edge_counts[SSA_NAME_VERSION (lhs)];\n   vr_phi_edge_counts[SSA_NAME_VERSION (lhs)] = edges;\n@@ -6713,6 +6723,7 @@ vrp_visit_phi_node (gimple phi)\n \n   /* If the new range is different than the previous value, keep\n      iterating.  */\n+update_range:\n   if (update_value_range (lhs, &vr_result))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))"}]}