{"sha": "644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ0YjJlNGMwZGM2OTIxMmNhMTFlZDVkNThiZTVhODJiMWI3ZGNjOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-10-19T16:16:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-10-19T16:16:11Z"}, "message": "scoped_allocator (__outermost_alloc_traits): Define.\n\n\t* include/std/scoped_allocator (__outermost_alloc_traits): Define.\n\t(scoped_allocator_adaptor::destroy): Use it.\n\t(scoped_allocator_adaptor::construct): Likewise. Overload for\n\tpiecewise construction of std::pair objects.\n\t* testsuite/20_util/scoped_allocator/2.cc: New.\n\t* doc/xml/manual/status_cxx2011.xml: Update.\n\nFrom-SVN: r192613", "tree": {"sha": "bdbe8239924cc85bfa976c3d53861f0652ff8a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdbe8239924cc85bfa976c3d53861f0652ff8a62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e665269adab31f1d30a1e0295bd6f4204940b9b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e665269adab31f1d30a1e0295bd6f4204940b9b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e665269adab31f1d30a1e0295bd6f4204940b9b3"}], "stats": {"total": 433, "additions": 412, "deletions": 21}, "files": [{"sha": "27b9b893f341b26bdafe2e5816be735201039345", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8", "patch": "@@ -1,3 +1,12 @@\n+2012-10-19  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/scoped_allocator (__outermost_alloc_traits): Define.\n+\t(scoped_allocator_adaptor::destroy): Use it.\n+\t(scoped_allocator_adaptor::construct): Likewise. Overload for\n+\tpiecewise construction of std::pair objects.\n+\t* testsuite/20_util/scoped_allocator/2.cc: New.\n+\t* doc/xml/manual/status_cxx2011.xml: Update.\n+\n 2012-10-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/forward_list.h: Add C++11 allocator support."}, {"sha": "226eef99563e6553185833d3c680b0e4d5b4e9fa", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8", "patch": "@@ -1037,7 +1037,7 @@ particular release.\n       <entry>20.12.4</entry>\n       <entry>Scoped allocator adaptor members</entry>\n       <entry>Partial</entry>\n-      <entry>Missing std::pair piecewise construction.</entry>\n+      <entry>OUTERMOST is not recursive.</entry>\n     </row>\n     <row>\n       <entry>20.12.5</entry>"}, {"sha": "81365b64acebd639ef32aeb1bac4dfa2c22beada", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 94, "deletions": 20, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8", "patch": "@@ -74,7 +74,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : allocator_traits<_Alloc>::propagate_on_container_swap\n     { };\n \n-  \n+\n   template<typename _Alloc>\n     inline auto\n     __do_outermost(_Alloc& __a, _Alloc*) -> decltype(__a.outer_allocator())\n@@ -85,6 +85,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __do_outermost(_Alloc& __a, ...)\n     { return __a; }\n \n+  // TODO: make recursive (see note in 20.12.4/1)\n   template<typename _Alloc>\n     inline auto\n     __outermost(_Alloc& __a) -> decltype(__do_outermost(__a, &__a))\n@@ -190,15 +191,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_tie() const noexcept\n       { return std::tuple_cat(std::tie(outer_allocator()), _M_inner._M_tie()); }\n \n+      template<typename _Alloc>\n+\tusing __outermost_type = typename\n+\t  std::decay<decltype(__outermost(std::declval<_Alloc&>()))>::type;\n+\n+      template<typename _Alloc>\n+\tusing __outermost_alloc_traits\n+\t  = allocator_traits<__outermost_type<_Alloc>>;\n       \n       template<typename _Tp, typename... _Args>\n         void \n         _M_construct(__uses_alloc0, _Tp* __p, _Args&&... __args)\n         {\n-          auto& __outer = __outermost(*this);\n-\t  typedef typename std::decay<decltype(__outer)>::type __outer_type;\n-          typedef allocator_traits<__outer_type> __o_traits;\n-          __o_traits::construct(__outer, __p, std::forward<_Args>(__args)...);\n+\t  typedef __outermost_alloc_traits<scoped_allocator_adaptor> _O_traits;\n+\t  _O_traits::construct(__outermost(*this), __p,\n+\t\t\t       std::forward<_Args>(__args)...);\n         }\n \n       typedef __uses_alloc1<typename __inner_type::__type> __uses_alloc1_;\n@@ -208,22 +215,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         void \n         _M_construct(__uses_alloc1_, _Tp* __p, _Args&&... __args)\n         {\n-          auto& __outer = __outermost(*this);\n-\t  typedef typename std::decay<decltype(__outer)>::type __outer_type;\n-          typedef allocator_traits<__outer_type> __o_traits;\n-          __o_traits::construct(__outer, __p, allocator_arg, inner_allocator(),\n-                                std::forward<_Args>(__args)...);\n+\t  typedef __outermost_alloc_traits<scoped_allocator_adaptor> _O_traits;\n+\t  _O_traits::construct(__outermost(*this), __p,\n+\t\t\t       allocator_arg, inner_allocator(),\n+\t\t\t       std::forward<_Args>(__args)...);\n         }\n \n       template<typename _Tp, typename... _Args>\n         void \n         _M_construct(__uses_alloc2_, _Tp* __p, _Args&&... __args)\n         {\n-\t  auto& __outer = __outermost(*this);\n-\t  typedef typename std::decay<decltype(__outer)>::type __outer_type;\n-          typedef allocator_traits<__outer_type> __o_traits;\n-          __o_traits::construct(__outer, __p, std::forward<_Args>(__args)...,\n-                                inner_allocator());\n+\t  typedef __outermost_alloc_traits<scoped_allocator_adaptor> _O_traits;\n+\t  _O_traits::construct(__outermost(*this), __p,\n+\t\t\t       std::forward<_Args>(__args)...,\n+\t\t\t       inner_allocator());\n         }\n \n       template<typename _Alloc>\n@@ -338,15 +343,61 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           _M_construct(__use_tag, __p, std::forward<_Args>(__args)...);\n         }\n \n-      // TODO: construct pairs\n+      template<typename _T1, typename _T2, typename... _Args1,\n+\t       typename... _Args2>\n+\tvoid\n+\tconstruct(pair<_T1, _T2>* __p, piecewise_construct_t,\n+\t\t  tuple<_Args1...> __x, tuple<_Args2...> __y)\n+\t{\n+\t  auto& __inner = inner_allocator();\n+\t  auto __x_use_tag\n+\t    = __use_alloc<_T1, inner_allocator_type, _Args1...>(__inner);\n+\t  auto __y_use_tag\n+\t    = __use_alloc<_T2, inner_allocator_type, _Args2...>(__inner);\n+\t  typedef __outermost_alloc_traits<scoped_allocator_adaptor> _O_traits;\n+\t  _O_traits::construct(__outermost(*this), __p, piecewise_construct,\n+\t\t\t       _M_construct_p(__x_use_tag, __x),\n+\t\t\t       _M_construct_p(__y_use_tag, __y));\n+\t}\n+\n+      template<typename _T1, typename _T2>\n+\tvoid\n+\tconstruct(pair<_T1, _T2>* __p)\n+\t{ construct(__p, piecewise_construct, tuple<>(), tuple<>()); }\n+\n+      template<typename _T1, typename _T2, typename _U, typename _V>\n+\tvoid\n+\tconstruct(pair<_T1, _T2>* __p, _U&& __u, _V&& __v)\n+\t{\n+\t  construct(__p, piecewise_construct,\n+\t\t    std::forward_as_tuple(std::forward<_U>(__u)),\n+\t\t    std::forward_as_tuple(std::forward<_V>(__v)));\n+\t}\n+\n+      template<typename _T1, typename _T2, typename _U, typename _V>\n+\tvoid\n+\tconstruct(pair<_T1, _T2>* __p, const pair<_U, _V>& __x)\n+\t{\n+\t  construct(__p, piecewise_construct,\n+\t\t    std::forward_as_tuple(__x.first),\n+\t\t    std::forward_as_tuple(__x.second));\n+\t}\n+\n+      template<typename _T1, typename _T2, typename _U, typename _V>\n+\tvoid\n+\tconstruct(pair<_T1, _T2>* __p, pair<_U, _V>&& __x)\n+\t{\n+\t  construct(__p, piecewise_construct,\n+\t\t    std::forward_as_tuple(std::forward<_U>(__x.first)),\n+\t\t    std::forward_as_tuple(std::forward<_V>(__x.second)));\n+\t}\n \n       template<typename _Tp>\n         void destroy(_Tp* __p)\n         {\n-          auto& __outer = __outermost(*this);\n-\t  typedef typename std::decay<decltype(__outer)>::type __outer_type;\n-          allocator_traits<__outer_type>::destroy(__outer, __p);\n-        }\n+\t  typedef __outermost_alloc_traits<scoped_allocator_adaptor> _O_traits;\n+\t  _O_traits::destroy(__outermost(*this), __p);\n+\t}\n \n       scoped_allocator_adaptor\n       select_on_container_copy_construction() const\n@@ -360,6 +411,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const scoped_allocator_adaptor<_OutA1, _InA...>& __a,\n                  const scoped_allocator_adaptor<_OutA2, _InA...>& __b) noexcept;\n+\n+    private:\n+      template<typename _Tuple>\n+\t_Tuple&&\n+\t_M_construct_p(__uses_alloc0, _Tuple& __t)\n+\t{ return std::move(__t); }\n+\n+      template<typename... _Args>\n+\tstd::tuple<allocator_arg_t, inner_allocator_type&, _Args...>\n+\t_M_construct_p(__uses_alloc1_, std::tuple<_Args...>& __t)\n+\t{\n+\t  typedef std::tuple<allocator_arg_t, inner_allocator_type&> _Tuple;\n+\t  return std::tuple_cat(_Tuple(allocator_arg, inner_allocator()),\n+\t\t\t\tstd::move(__t));\n+\t}\n+\n+      template<typename... _Args>\n+\tstd::tuple<_Args..., inner_allocator_type&>\n+\t_M_construct_p(__uses_alloc2_, std::tuple<_Args...>& __t)\n+\t{\n+\t  typedef std::tuple<inner_allocator_type&> _Tuple;\n+\t  return std::tuple_cat(std::move(__t), _Tuple(inner_allocator()));\n+\t}\n     };\n \n   template <typename _OutA1, typename _OutA2, typename... _InA>"}, {"sha": "6bfa4d7e7075fc32ce58655c849abe49e1070a87", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/2.cc", "status": "added", "additions": 308, "deletions": 0, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F2.cc?ref=644b2e4c0dc69212ca11ed5d58be5a82b1b7dcc8", "patch": "@@ -0,0 +1,308 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <scoped_allocator>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+// 20.12.4 Scoped allocator adaptor members [allocator.adaptor.members]\n+//\n+// Test piecewise construction of std::pair by scoped_allocator_adaptor\n+\n+using __gnu_test::uneq_allocator;\n+using std::scoped_allocator_adaptor;\n+\n+// a DefaultConstructible and CopyConstructible type\n+struct def\n+{\n+  def() : id(999) { }\n+\n+  int id;\n+};\n+\n+// a CopyConstructible and non-DefaultConstructible type\n+struct copyable\n+{\n+  copyable(int id) : id(id) { }\n+\n+  // not constructed with an allocator so nothing to test\n+  bool verify() const { return true; }\n+\n+  int id;\n+};\n+\n+// a MoveConstructible and non-DefaultConstructible type\n+struct move_only\n+{\n+  move_only(int id) : id(id) { }\n+  move_only(move_only&&) = default;\n+\n+  // not constructed with an allocator so nothing to test\n+  bool verify() const { return true; }\n+\n+  int id;\n+};\n+\n+// a type for which std::uses_allocator is true\n+struct uses_alloc_post\n+{\n+  typedef uneq_allocator<uses_alloc_post> allocator_type;\n+\n+  uses_alloc_post(const allocator_type& alloc)\n+  : allocator_personality(alloc.get_personality()), id(999)\n+  { }\n+\n+  uses_alloc_post(copyable arg, const allocator_type& alloc)\n+  : allocator_personality(alloc.get_personality()), id(arg.id)\n+  { }\n+\n+  uses_alloc_post(move_only arg, const allocator_type& alloc)\n+  : allocator_personality(alloc.get_personality()), id(arg.id)\n+  { }\n+\n+  // allocator-extended copy ctor\n+  uses_alloc_post(const uses_alloc_post& other, const allocator_type& alloc)\n+  : allocator_personality(alloc.get_personality()), id(other.id)\n+  { }\n+\n+  // verify we were constructed with right allocator\n+  bool verify() const { return allocator_personality == id; }\n+\n+  int allocator_personality;\n+  int id;\n+};\n+\n+// a type for which std::uses_allocator is true\n+struct uses_alloc_pre : uses_alloc_post\n+{\n+  typedef uneq_allocator<uses_alloc_pre> allocator_type;\n+\n+  uses_alloc_pre(std::allocator_arg_t, const allocator_type& alloc)\n+  : uses_alloc_post(alloc)\n+  { }\n+\n+  uses_alloc_pre(std::allocator_arg_t, const allocator_type& alloc,\n+                 copyable arg)\n+  : uses_alloc_post(arg, alloc)\n+  { }\n+\n+  // allocator-extended copy ctor\n+  uses_alloc_pre(std::allocator_arg_t, const allocator_type& alloc,\n+                 const uses_alloc_pre& other)\n+  : uses_alloc_post(other, alloc)\n+  { }\n+\n+  uses_alloc_pre(std::allocator_arg_t, const allocator_type& alloc,\n+                 move_only arg)\n+  : uses_alloc_post(std::move(arg), alloc)\n+  { }\n+};\n+\n+template<typename A, typename B>\n+  void\n+  test_def()\n+  {\n+    bool test __attribute((unused)) = false;\n+\n+    typedef std::pair<A, B> test_type;\n+    typedef uneq_allocator<test_type> alloc_type;\n+    typedef scoped_allocator_adaptor<alloc_type, alloc_type> alloc_adaptor;\n+\n+    int inner_id = 2;\n+    alloc_adaptor a(-1, alloc_type(inner_id)); // outer=-1, inner=2\n+\n+    // all pair members that can be constructed with an allocator\n+    // should be constructed with the inner allocator, with personality==2\n+\n+    auto p = a.allocate(1);\n+\n+    // construct(pair<T1, T2>* p, piecewise_construct_t, tuple<...>, tuple<...>)\n+    std::tuple<> t;\n+    a.construct(p, std::piecewise_construct, t, t);\n+    VERIFY( p->first.id == 999 );\n+    VERIFY( p->second.id == 999 );\n+    a.destroy(p);\n+\n+    // construct(pair<T1, T2>* __p)\n+    a.construct(p);\n+    VERIFY( p->first.id == 999 );\n+    VERIFY( p->second.id == 999 );\n+    auto pp = *p;\n+    a.destroy(p);\n+\n+    // construct(pair<T1, T2>* p, const pair<U, V>& x)\n+    a.construct(p, pp);\n+    VERIFY( p->first.id == 999 );\n+    VERIFY( p->second.id == 999 );\n+    a.destroy(p);\n+\n+    // construct(pair<T1, T2>* p, pair<U, V>&& x)\n+    a.construct(p, std::move(pp));\n+    VERIFY( p->first.id == 999 );\n+    VERIFY( p->second.id == 999 );\n+    a.destroy(p);\n+\n+    a.deallocate(p, 1);\n+  }\n+\n+template<typename A, typename B>\n+  void\n+  test_copying()\n+  {\n+    bool test __attribute((unused)) = false;\n+\n+    typedef std::pair<A, B> test_type;\n+    typedef uneq_allocator<test_type> alloc_type;\n+    typedef scoped_allocator_adaptor<alloc_type, alloc_type> alloc_adaptor;\n+\n+    int inner_id = 2;\n+    alloc_adaptor a(-1, alloc_type(inner_id)); // outer=-1, inner=2\n+\n+    // all pair members that can be constructed with an allocator\n+    // should be constructed with the inner allocator, with personality==2\n+\n+    auto p = a.allocate(1);\n+\n+    // construct(pair<T1, T2>* p, piecewise_construct_t, tuple<...>, tuple<...>)\n+    auto t = std::make_tuple(copyable(inner_id));\n+    a.construct(p, std::piecewise_construct, t, t);\n+    VERIFY( p->first.verify() );\n+    VERIFY( p->second.verify() );\n+    a.destroy(p);\n+\n+    // construct(pair<T1, T2>* __p)\n+    // cannot test this overload using non-DefaultConstructible types\n+\n+    // construct(pair<T1, T2>* p, U&& x, V&& y)\n+    copyable c(inner_id);\n+    a.construct(p, c, c);\n+    VERIFY( p->first.verify() );\n+    VERIFY( p->second.verify() );\n+    auto pp = *p;\n+    a.destroy(p);\n+\n+    // construct(pair<T1, T2>* p, const pair<U, V>& x)\n+    a.construct(p, pp);\n+    VERIFY( p->first.verify() );\n+    VERIFY( p->second.verify() );\n+    a.destroy(p);\n+\n+    // construct(pair<T1, T2>* p, pair<U, V>&& x)\n+    a.construct(p, std::move(pp));\n+    VERIFY( p->first.verify() );\n+    VERIFY( p->second.verify() );\n+    a.destroy(p);\n+\n+    a.deallocate(p, 1);\n+  }\n+\n+template<typename A, typename B>\n+  void\n+  test_moving()\n+  {\n+    bool test __attribute((unused)) = false;\n+\n+    typedef std::pair<A, B> test_type;\n+    typedef uneq_allocator<test_type> alloc_type;\n+    typedef scoped_allocator_adaptor<alloc_type, alloc_type> alloc_adaptor;\n+\n+    int inner_id = 2;\n+    alloc_adaptor a(-1, alloc_type(inner_id)); // outer=-1, inner=2\n+\n+    // all pair members that can be constructed with an allocator\n+    // should be constructed with the inner allocator, with personality==2\n+\n+    auto p = a.allocate(1);\n+\n+    // construct(pair<T1, T2>* p, piecewise_construct_t, tuple<...>, tuple<...>)\n+    a.construct(p, std::piecewise_construct,\n+                std::make_tuple(move_only(inner_id)),\n+                std::make_tuple(move_only(inner_id)));\n+    VERIFY( p->first.verify() );\n+    VERIFY( p->second.verify() );\n+    a.destroy(p);\n+\n+    // construct(pair<T1, T2>* __p)\n+    // cannot test this overload using non-DefaultConstructible types\n+\n+    // construct(pair<T1, T2>* p, U&& x, V&& y)\n+    a.construct(p, move_only(inner_id), move_only(inner_id));\n+    VERIFY( p->first.verify() );\n+    VERIFY( p->second.verify() );\n+    a.destroy(p);\n+\n+    // construct(pair<T1, T2>* p, const pair<U, V>& x)\n+    // cannot test this overload using move-only types\n+\n+    // construct(pair<T1, T2>* p, pair<U, V>&& x)\n+    a.construct(p, std::make_pair(move_only(inner_id), move_only(inner_id)));\n+    VERIFY( p->first.verify() );\n+    VERIFY( p->second.verify() );\n+    a.destroy(p);\n+\n+    a.deallocate(p, 1);\n+  }\n+\n+void test01()\n+{\n+  test_def<def, def>();\n+  test_def<def, uses_alloc_pre>();\n+  test_def<def, uses_alloc_post>();\n+  test_def<uses_alloc_pre, def>();\n+  test_def<uses_alloc_pre, uses_alloc_pre>();\n+  test_def<uses_alloc_pre, uses_alloc_post>();\n+  test_def<uses_alloc_post, def>();\n+  test_def<uses_alloc_post, uses_alloc_pre>();\n+  test_def<uses_alloc_post, uses_alloc_post>();\n+}\n+\n+void test02()\n+{\n+  test_copying<copyable, copyable>();\n+  test_copying<copyable, uses_alloc_pre>();\n+  test_copying<copyable, uses_alloc_post>();\n+  test_copying<uses_alloc_pre, copyable>();\n+  test_copying<uses_alloc_pre, uses_alloc_pre>();\n+  test_copying<uses_alloc_pre, uses_alloc_post>();\n+  test_copying<uses_alloc_post, copyable>();\n+  test_copying<uses_alloc_post, uses_alloc_pre>();\n+  test_copying<uses_alloc_post, uses_alloc_post>();\n+}\n+\n+void test03()\n+{\n+  test_moving<move_only, move_only>();\n+  test_moving<move_only, uses_alloc_pre>();\n+  test_moving<move_only, uses_alloc_post>();\n+  test_moving<uses_alloc_pre, move_only>();\n+  test_moving<uses_alloc_pre, uses_alloc_pre>();\n+  test_moving<uses_alloc_pre, uses_alloc_post>();\n+  test_moving<uses_alloc_post, move_only>();\n+  test_moving<uses_alloc_post, uses_alloc_pre>();\n+  test_moving<uses_alloc_post, uses_alloc_post>();\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}