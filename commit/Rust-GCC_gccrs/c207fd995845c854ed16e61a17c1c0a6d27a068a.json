{"sha": "c207fd995845c854ed16e61a17c1c0a6d27a068a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIwN2ZkOTk1ODQ1Yzg1NGVkMTZlNjFhMTdjMWMwYTZkMjdhMDY4YQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2015-10-20T15:12:37Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2015-10-20T15:12:37Z"}, "message": "Properly handle -miamcu and -march=lakemont\n\n-miamcu specifies how parameters are passed to functions and how value\nis returned from a function.  Inside function,  we can use instructions\nsupported by -march=XXX.  -miamcu -march=haswell can generate x87, SSE\nand AVX instructions as long as the IA MCU psABI is followed.  But since\nLakemont processor doesn't support x87 instructions, we shouldn't\ngenerate x87 instructions with -march=lakemont.  This patch separates\ncode generation from -miamcu and makes -march=lakemont not to generate\nx87 instructions.\n\ngcc/\n\n\tPR target/67963\n\tPR target/67985\n\t* common/config/i386/i386-common.c (ix86_handle_option): Remove\n\tOPT_miamcu handling.\n\t* config/i386/i386.c (PTA_NO_80387): New macro.\n\t(processor_alias_table): Add PTA_NO_80387 to lakemont.\n\t(ix86_option_override_internal): Update MASK_80387 from\n\tPTA_NO_80387.  Don't warn x87/MMX/SSE/AVX for -miamcu.  Warn\n\tSSE math only if 80387 is supported.  Don't change\n\tMASK_FLOAT_RETURNS.\n\t(ix86_valid_target_attribute_tree): Enable FPMATH_387 only if\n\t80387 is supported.\n\t* config/i386/i386.h (TARGET_FLOAT_RETURNS_IN_80387): True only\n\tif TARGET_80387 is true and TARGET_IAMCU is false.\n\t(TARGET_FLOAT_RETURNS_IN_80387_P): True only if TARGET_80387_P\n\tis true and TARGET_IAMCU_P is false.\n\ngcc/testsuite/\n\n\tPR target/67963\n\tPR target/67985\n\t* gcc.target/i386/pr67963-1.c: New test.\n\t* gcc.target/i386/pr67963-2.c: Likewise.\n\t* gcc.target/i386/pr67963-3.c: Likewise.\n\t* gcc.target/i386/pr67985-1.c: Likewise.\n\t* gcc.target/i386/pr67985-2.c: Likewise.\n\t* gcc.target/i386/pr67985-3.c: Likewise.\n\nFrom-SVN: r229082", "tree": {"sha": "b76424fab18f2876ae7b035e65425e4945d7a305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b76424fab18f2876ae7b035e65425e4945d7a305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c207fd995845c854ed16e61a17c1c0a6d27a068a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c207fd995845c854ed16e61a17c1c0a6d27a068a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c207fd995845c854ed16e61a17c1c0a6d27a068a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c207fd995845c854ed16e61a17c1c0a6d27a068a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9597904945c7e1df731080b3c0c72e7dc1f7c2ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9597904945c7e1df731080b3c0c72e7dc1f7c2ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9597904945c7e1df731080b3c0c72e7dc1f7c2ea"}], "stats": {"total": 162, "additions": 123, "deletions": 39}, "files": [{"sha": "e3394723d7de1ec355bf5c1f286e2496d8e3daea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c207fd995845c854ed16e61a17c1c0a6d27a068a", "patch": "@@ -1,3 +1,22 @@\n+2015-10-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/67963\n+\tPR target/67985\n+\t* common/config/i386/i386-common.c (ix86_handle_option): Remove\n+\tOPT_miamcu handling.\n+\t* config/i386/i386.c (PTA_NO_80387): New macro.\n+\t(processor_alias_table): Add PTA_NO_80387 to lakemont.\n+\t(ix86_option_override_internal): Update MASK_80387 from\n+\tPTA_NO_80387.  Don't warn x87/MMX/SSE/AVX for -miamcu.  Warn\n+\tSSE math only if 80387 is supported.  Don't change\n+\tMASK_FLOAT_RETURNS.\n+\t(ix86_valid_target_attribute_tree): Enable FPMATH_387 only if\n+\t80387 is supported.\n+\t* config/i386/i386.h (TARGET_FLOAT_RETURNS_IN_80387): True only\n+\tif TARGET_80387 is true and TARGET_IAMCU is false.\n+\t(TARGET_FLOAT_RETURNS_IN_80387_P): True only if TARGET_80387_P\n+\tis true and TARGET_IAMCU_P is false.\n+\n 2015-10-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68017"}, {"sha": "0f8c3e1df04c9274640dfefd849f6fad9b9822c6", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=c207fd995845c854ed16e61a17c1c0a6d27a068a", "patch": "@@ -223,7 +223,7 @@ along with GCC; see the file COPYING3.  If not see\n \n bool\n ix86_handle_option (struct gcc_options *opts,\n-\t\t    struct gcc_options *opts_set,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t    const struct cl_decoded_option *decoded,\n \t\t    location_t loc)\n {\n@@ -232,20 +232,6 @@ ix86_handle_option (struct gcc_options *opts,\n \n   switch (code)\n     {\n-    case OPT_miamcu:\n-      if (value)\n-\t{\n-\t  /* Turn off x87/MMX/SSE/AVX codegen for -miamcu.  */\n-\t  opts->x_target_flags &= ~MASK_80387;\n-\t  opts_set->x_target_flags |= MASK_80387;\n-\t  opts->x_ix86_isa_flags &= ~(OPTION_MASK_ISA_MMX_UNSET\n-\t\t\t\t      | OPTION_MASK_ISA_SSE_UNSET);\n-\t  opts->x_ix86_isa_flags_explicit |= (OPTION_MASK_ISA_MMX_UNSET\n-\t\t\t\t\t      | OPTION_MASK_ISA_SSE_UNSET);\n-\n-\t}\n-      return true;\n-\n     case OPT_mmmx:\n       if (value)\n \t{"}, {"sha": "c800145fa3c8fefd42b9dad88ad32ff8bf56373a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c207fd995845c854ed16e61a17c1c0a6d27a068a", "patch": "@@ -4295,6 +4295,7 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_PCOMMIT\t\t(HOST_WIDE_INT_1 << 56)\n #define PTA_MWAITX\t\t(HOST_WIDE_INT_1 << 57)\n #define PTA_CLZERO\t\t(HOST_WIDE_INT_1 << 58)\n+#define PTA_NO_80387\t\t(HOST_WIDE_INT_1 << 59)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -4339,7 +4340,7 @@ ix86_option_override_internal (bool main_args_p,\n       {\"i486\", PROCESSOR_I486, CPU_NONE, 0},\n       {\"i586\", PROCESSOR_PENTIUM, CPU_PENTIUM, 0},\n       {\"pentium\", PROCESSOR_PENTIUM, CPU_PENTIUM, 0},\n-      {\"lakemont\", PROCESSOR_LAKEMONT, CPU_PENTIUM, 0},\n+      {\"lakemont\", PROCESSOR_LAKEMONT, CPU_PENTIUM, PTA_NO_80387},\n       {\"pentium-mmx\", PROCESSOR_PENTIUM, CPU_PENTIUM, PTA_MMX},\n       {\"winchip-c6\", PROCESSOR_I486, CPU_NONE, PTA_MMX},\n       {\"winchip2\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW | PTA_PRFCHW},\n@@ -4920,6 +4921,13 @@ ix86_option_override_internal (bool main_args_p,\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MWAITX))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MWAITX;\n \n+\tif (!(opts_set->x_target_flags & MASK_80387))\n+\t  {\n+\t    if (processor_alias_table[i].flags & PTA_NO_80387)\n+\t      opts->x_target_flags &= ~MASK_80387;\n+\t    else\n+\t      opts->x_target_flags |= MASK_80387;\n+\t  }\n \tbreak;\n       }\n \n@@ -4929,20 +4937,6 @@ ix86_option_override_internal (bool main_args_p,\n   if (TARGET_X32 && (ix86_isa_flags & OPTION_MASK_ISA_MPX))\n     error (\"Intel MPX does not support x32\");\n \n-  if (TARGET_IAMCU_P (opts->x_target_flags))\n-    {\n-      /* Verify that x87/MMX/SSE/AVX is off for -miamcu.  */\n-      if (TARGET_80387_P (opts->x_target_flags))\n-\tsorry (\"X87 FPU isn%'t supported in Intel MCU psABI\");\n-      else if ((opts->x_ix86_isa_flags & (OPTION_MASK_ISA_MMX\n-\t\t\t\t\t  | OPTION_MASK_ISA_SSE\n-\t\t\t\t\t  | OPTION_MASK_ISA_AVX)))\n-\tsorry (\"%s isn%'t supported in Intel MCU psABI\",\n-\t       TARGET_MMX_P (opts->x_ix86_isa_flags)\n-\t       ? \"MMX\"\n-\t       : TARGET_SSE_P (opts->x_ix86_isa_flags) ? \"SSE\" : \"AVX\");\n-    }\n-\n   if (!strcmp (opts->x_ix86_arch_string, \"generic\"))\n     error (\"generic CPU can be used only for %stune=%s %s\",\n \t   prefix, suffix, sw);\n@@ -5226,8 +5220,11 @@ ix86_option_override_internal (bool main_args_p,\n \t{\n \t  if (!TARGET_SSE_P (opts->x_ix86_isa_flags))\n \t    {\n-\t      warning (0, \"SSE instruction set disabled, using 387 arithmetics\");\n-\t      opts->x_ix86_fpmath = FPMATH_387;\n+\t      if (TARGET_80387_P (opts->x_target_flags))\n+\t\t{\n+\t\t  warning (0, \"SSE instruction set disabled, using 387 arithmetics\");\n+\t\t  opts->x_ix86_fpmath = FPMATH_387;\n+\t\t}\n \t    }\n \t  else if ((opts->x_ix86_fpmath & FPMATH_387)\n \t\t   && !TARGET_80387_P (opts->x_target_flags))\n@@ -5253,10 +5250,6 @@ ix86_option_override_internal (bool main_args_p,\n   else\n     opts->x_ix86_fpmath = TARGET_FPMATH_DEFAULT_P (opts->x_ix86_isa_flags);\n \n-  /* If the i387 is disabled, then do not return values in it. */\n-  if (!TARGET_80387_P (opts->x_target_flags))\n-    opts->x_target_flags &= ~MASK_FLOAT_RETURNS;\n-\n   /* Use external vectorized library in vectorizing intrinsics.  */\n   if (opts_set->x_ix86_veclibabi_type)\n     switch (opts->x_ix86_veclibabi_type)\n@@ -6155,7 +6148,11 @@ ix86_valid_target_attribute_tree (tree args,\n       else if (!TARGET_64BIT_P (opts->x_ix86_isa_flags)\n \t       && TARGET_SSE_P (opts->x_ix86_isa_flags))\n \t{\n-\t  opts->x_ix86_fpmath = (enum fpmath_unit) (FPMATH_SSE | FPMATH_387);\n+\t  if (TARGET_80387_P (opts->x_target_flags))\n+\t    opts->x_ix86_fpmath = (enum fpmath_unit) (FPMATH_SSE\n+\t\t\t\t\t\t      | FPMATH_387);\n+\t  else\n+\t    opts->x_ix86_fpmath = (enum fpmath_unit) FPMATH_SSE;\n \t  opts_set->x_ix86_fpmath = (enum fpmath_unit) 1;\n \t}\n "}, {"sha": "be96c75df77a9ca51e2c7df2d26529b8b2399168", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c207fd995845c854ed16e61a17c1c0a6d27a068a", "patch": "@@ -295,8 +295,12 @@ extern const struct processor_costs ix86_size_cost;\n   (TARGET_64BIT_P(x) && TARGET_SSE_P(x) ? FPMATH_SSE : FPMATH_387)\n #endif\n \n-#define TARGET_FLOAT_RETURNS_IN_80387 TARGET_FLOAT_RETURNS\n-#define TARGET_FLOAT_RETURNS_IN_80387_P(x) TARGET_FLOAT_RETURNS_P(x)\n+/* If the i387 is disabled or -miamcu is used , then do not return\n+   values in it. */\n+#define TARGET_FLOAT_RETURNS_IN_80387 \\\n+  (TARGET_FLOAT_RETURNS && TARGET_80387 && !TARGET_IAMCU)\n+#define TARGET_FLOAT_RETURNS_IN_80387_P(x) \\\n+  (TARGET_FLOAT_RETURNS_P(x) && TARGET_80387_P(x) && !TARGET_IAMCU_P(x))\n \n /* 64bit Sledgehammer mode.  For libgcc2 we make sure this is a\n    compile-time constant.  */"}, {"sha": "7d4c6f83276c40a4e7da049fe5803905232e4247", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c207fd995845c854ed16e61a17c1c0a6d27a068a", "patch": "@@ -1,3 +1,14 @@\n+2015-10-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/67963\n+\tPR target/67985\n+\t* gcc.target/i386/pr67963-1.c: New test.\n+\t* gcc.target/i386/pr67963-2.c: Likewise.\n+\t* gcc.target/i386/pr67963-3.c: Likewise.\n+\t* gcc.target/i386/pr67985-1.c: Likewise.\n+\t* gcc.target/i386/pr67985-2.c: Likewise.\n+\t* gcc.target/i386/pr67985-3.c: Likewise.\n+\n 2015-10-20  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/vdiv_f.c: Use __builtin_nan."}, {"sha": "1b6e596888ca77b7b5b2a5c0ef108bf1cb36634d", "filename": "gcc/testsuite/gcc.target/i386/pr67963-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67963-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67963-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67963-1.c?ref=c207fd995845c854ed16e61a17c1c0a6d27a068a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -march=lakemont\" } */\n+\n+float foo (void)\n+{\n+  return 0.0f;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldz\" } } */"}, {"sha": "76c929de12dcb9719695ea73ac0a3e07d452d51f", "filename": "gcc/testsuite/gcc.target/i386/pr67963-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67963-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67963-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67963-2.c?ref=c207fd995845c854ed16e61a17c1c0a6d27a068a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -march=pentium\" } */\n+\n+float\n+__attribute__((target(\"arch=lakemont\")))\n+foo (void)\n+{\n+  return 0.0f;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldz\" } } */"}, {"sha": "b8e1900f2948f48d8b5029ccffefa2e7cdb2d786", "filename": "gcc/testsuite/gcc.target/i386/pr67963-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67963-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67963-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67963-3.c?ref=c207fd995845c854ed16e61a17c1c0a6d27a068a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -march=lakemont\" } */\n+\n+float\n+__attribute__((target(\"arch=pentium\")))\n+foo (void)\n+{\n+  return 0.0f;\n+}\n+\n+/* { dg-final { scan-assembler \"fldz\" } } */"}, {"sha": "28d0f8694c98b3bd7e75d9b58bedbe7cd13c0598", "filename": "gcc/testsuite/gcc.target/i386/pr67985-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67985-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67985-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67985-1.c?ref=c207fd995845c854ed16e61a17c1c0a6d27a068a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -miamcu -msse2 -mfpmath=sse -mtune=generic\" } */\n+\n+float\n+foo (float x, float y)\n+{\n+  return x * y;\n+}\n+\n+/* { dg-final { scan-assembler \"mulss\" } } */\n+/* { dg-final { scan-assembler \"movd\\[ \\t\\]%xmm\\[0-7\\], %eax\" } } */"}, {"sha": "9c7a25ad177d3704e6cee1ddc03eec9684a484a6", "filename": "gcc/testsuite/gcc.target/i386/pr67985-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67985-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67985-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67985-2.c?ref=c207fd995845c854ed16e61a17c1c0a6d27a068a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -miamcu -msse2 -mfpmath=sse -mtune=generic\" } */\n+\n+float\n+__attribute__((target(\"arch=lakemont\")))\n+foo (float x, float y)\n+{\n+  return x * y;\n+}\n+\n+/* { dg-final { scan-assembler-not \"mulss\" } } */\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\].*, %eax\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]__mulsf3\" } } */"}, {"sha": "58c379c1c5a86acac34d4867f3481e2b3d4ea05f", "filename": "gcc/testsuite/gcc.target/i386/pr67985-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67985-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c207fd995845c854ed16e61a17c1c0a6d27a068a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67985-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67985-3.c?ref=c207fd995845c854ed16e61a17c1c0a6d27a068a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -miamcu -march=lakemont\" } */\n+\n+float\n+__attribute__((target(\"arch=haswell\")))\n+foo (float x, float y)\n+{\n+  return x * y;\n+}\n+\n+/* { dg-final { scan-assembler \"mulss\" } } */\n+/* { dg-final { scan-assembler \"movd\\[ \\t\\]%xmm\\[0-7\\], %eax\" } } */"}]}