{"sha": "43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNiM2Y1MmY0YTVjNmM2ZjAzMDM5YTA2ZGE2MDA2ZTFiNWM0NGYxNA==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-02-25T09:52:53Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-02-25T09:52:53Z"}, "message": "gcc/\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_PREFETCHWT1_SET),\n\t(OPTION_MASK_ISA_PREFETCHWT1_UNSET): New.\n\t(ix86_handle_option): Handle OPT_mprefetchwt1.\n\t* config/i386/cpuid.h (bit_PREFETCHWT1): New.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n\tPREFETCHWT1 CPUID.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n\tOPTION_MASK_ISA_PREFETCHWT1.\n\t* config/i386/i386.c (ix86_target_string): Handle mprefetchwt1.\n\t(PTA_PREFETCHWT1): New.\n\t(ix86_option_override_internal): Handle PTA_PREFETCHWT1.\n\t(ix86_valid_target_attribute_inner_p): Handle OPT_mprefetchwt1.\n\t* config/i386/i386.h (TARGET_PREFETCHWT1), (TARGET_PREFETCHWT1_P):\n\t  New.\n\t* config/i386/i386.md (prefetch): Check TARGET_PREFETCHWT1\n\t(*prefetch_avx512pf_<mode>_: Change into ...\n\t (*prefetch_prefetchwt1_<mode>: This.\n\t* config/i386/i386.opt (mprefetchwt1): New.\n\t* config/i386/xmmintrin.h (_mm_hint): Add _MM_HINT_ET1.\n\t(_mm_prefetch): Handle intent to write.\n\t* doc/invoke.texi (mprefetchwt1), (mno-prefetchwt1): Doccument.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx-1.c: Update __builtin_prefetch.\n\t* gcc.target/i386/prefetchwt1-1.c: New.\n\t* g++.dg/other/i386-2.C: Add new option.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/sse-12.c: Ditto.\n\t* gcc.target/i386/sse-13.c: Update __builtin_prefetch, add new option.\n\t* gcc.target/i386/sse-22.c: Add new option.\n\t* gcc.target/i386/sse-23.c: Update __builtin_prefetch, add new option.\n\nFrom-SVN: r208115", "tree": {"sha": "6431e557d4b5dcf90d78e8c027f9f808fae8d19d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6431e557d4b5dcf90d78e8c027f9f808fae8d19d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a51524153cfb5f66e050b9ccbb99a8c18f97dc1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51524153cfb5f66e050b9ccbb99a8c18f97dc1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51524153cfb5f66e050b9ccbb99a8c18f97dc1d"}], "stats": {"total": 134, "additions": 111, "deletions": 23}, "files": [{"sha": "0f3d80c6c3c420548a6460ef1214b30e6aa8dfe9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -1,3 +1,27 @@\n+2014-02-25  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_PREFETCHWT1_SET),\n+\t(OPTION_MASK_ISA_PREFETCHWT1_UNSET): New.\n+\t(ix86_handle_option): Handle OPT_mprefetchwt1.\n+\t* config/i386/cpuid.h (bit_PREFETCHWT1): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\tPREFETCHWT1 CPUID.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n+\tOPTION_MASK_ISA_PREFETCHWT1.\n+\t* config/i386/i386.c (ix86_target_string): Handle mprefetchwt1.\n+\t(PTA_PREFETCHWT1): New.\n+\t(ix86_option_override_internal): Handle PTA_PREFETCHWT1.\n+\t(ix86_valid_target_attribute_inner_p): Handle OPT_mprefetchwt1.\n+\t* config/i386/i386.h (TARGET_PREFETCHWT1), (TARGET_PREFETCHWT1_P):\n+\t  New.\n+\t* config/i386/i386.md (prefetch): Check TARGET_PREFETCHWT1\n+\t(*prefetch_avx512pf_<mode>_: Change into ...\n+\t (*prefetch_prefetchwt1_<mode>: This.\n+\t* config/i386/i386.opt (mprefetchwt1): New.\n+\t* config/i386/xmmintrin.h (_mm_hint): Add _MM_HINT_ET1.\n+\t(_mm_prefetch): Handle intent to write.\n+\t* doc/invoke.texi (mprefetchwt1), (mno-prefetchwt1): Doccument.\n+\n 2014-02-25  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/60291\n@@ -17,7 +41,7 @@\n \t(run_gcc): And pass them through.\n \n 2014-02-25  Andrey Belevantsev  <abel@ispras.ru>\n-\t\n+\n \t* sel-sched.c (calculate_new_fences): New parameter ptime.\n \tCalculate it as a maximum over all fence cycles.\n \t(sel_sched_region_2): Adjust the call to calculate_new_fences."}, {"sha": "a6ab5552ccedfef23a54fae4919e835dde0e5de9", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -69,6 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_SET OPTION_MASK_ISA_RDSEED\n #define OPTION_MASK_ISA_ADX_SET OPTION_MASK_ISA_ADX\n+#define OPTION_MASK_ISA_PREFETCHWT1_SET OPTION_MASK_ISA_PREFETCHWT1\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -154,6 +155,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_PRFCHW_UNSET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_UNSET OPTION_MASK_ISA_RDSEED\n #define OPTION_MASK_ISA_ADX_UNSET OPTION_MASK_ISA_ADX\n+#define OPTION_MASK_ISA_PREFETCHWT1_UNSET OPTION_MASK_ISA_PREFETCHWT1\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -757,6 +759,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mprefetchwt1:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PREFETCHWT1_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_PREFETCHWT1_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_PREFETCHWT1_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_PREFETCHWT1_UNSET;\n+\t}\n+      return true;\n+\n   /* Comes from final.c -- no real reason to change it.  */\n #define MAX_CODE_ALIGN 16\n "}, {"sha": "8c323ae3a70dcf884675d93b2cc66be18d212123", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -65,6 +65,7 @@\n #define bit_3DNOW\t(1 << 31)\n \n /* Extended Features (%eax == 7) */\n+/* %ebx */\n #define bit_FSGSBASE\t(1 << 0)\n #define bit_BMI\t(1 << 3)\n #define bit_HLE\t(1 << 4)\n@@ -79,6 +80,9 @@\n #define bit_AVX512CD\t(1 << 28)\n #define bit_SHA\t\t(1 << 29)\n \n+/* %ecx */\n+#define bit_PREFETCHWT1\t  (1 << 0)\n+\n /* Extended State Enumeration Sub-leaf (%eax == 13, %ecx == 1) */\n #define bit_XSAVEOPT\t(1 << 0)\n "}, {"sha": "1f5a11c9c088a169747262ae2943da777612161c", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -409,7 +409,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_rdseed = 0, has_prfchw = 0, has_adx = 0;\n   unsigned int has_osxsave = 0, has_fxsr = 0, has_xsave = 0, has_xsaveopt = 0;\n   unsigned int has_avx512er = 0, has_avx512pf = 0, has_avx512cd = 0;\n-  unsigned int has_avx512f = 0, has_sha = 0;\n+  unsigned int has_avx512f = 0, has_sha = 0, has_prefetchwt1 = 0;\n \n   bool arch;\n \n@@ -486,6 +486,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx512pf = ebx & bit_AVX512PF;\n       has_avx512cd = ebx & bit_AVX512CD;\n       has_sha = ebx & bit_SHA;\n+\n+      has_prefetchwt1 = ecx & bit_PREFETCHWT1;\n     }\n \n   if (max_level >= 13)\n@@ -883,14 +885,15 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *avx512er = has_avx512er ? \" -mavx512er\" : \" -mno-avx512er\";\n       const char *avx512cd = has_avx512cd ? \" -mavx512cd\" : \" -mno-avx512cd\";\n       const char *avx512pf = has_avx512pf ? \" -mavx512pf\" : \" -mno-avx512pf\";\n+      const char *prefetchwt1 = has_prefetchwt1 ? \" -mprefetchwt1\" : \" -mno-prefetchwt1\";\n \n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, bmi2,\n \t\t\ttbm, avx, avx2, sse4_2, sse4_1, lzcnt, rtm,\n \t\t\thle, rdrnd, f16c, fsgsbase, rdseed, prfchw, adx,\n \t\t\tfxsr, xsave, xsaveopt, avx512f, avx512er,\n-\t\t\tavx512cd, avx512pf, NULL);\n+\t\t\tavx512cd, avx512pf, prefetchwt1, NULL);\n     }\n \n done:"}, {"sha": "c9977bf2b0e9504a9cc3efea4d8fafc424dfb92f", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -387,6 +387,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__XSAVE__\");\n   if (isa_flag & OPTION_MASK_ISA_XSAVEOPT)\n     def_or_undef (parse_in, \"__XSAVEOPT__\");\n+  if (isa_flag & OPTION_MASK_ISA_PREFETCHWT1)\n+    def_or_undef (parse_in, \"__PREFETCHWT1__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE))\n     def_or_undef (parse_in, \"__SSE_MATH__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE2))"}, {"sha": "00773d860dd2ac2fcfebd4a5afbba8af45e105de", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -2622,6 +2622,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mrtm\",\t\tOPTION_MASK_ISA_RTM },\n     { \"-mxsave\",\tOPTION_MASK_ISA_XSAVE },\n     { \"-mxsaveopt\",\tOPTION_MASK_ISA_XSAVEOPT },\n+    { \"-mprefetchwt1\",\tOPTION_MASK_ISA_PREFETCHWT1 },\n   };\n \n   /* Flag options.  */\n@@ -3112,6 +3113,7 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_AVX512PF\t\t(HOST_WIDE_INT_1 << 42)\n #define PTA_AVX512CD\t\t(HOST_WIDE_INT_1 << 43)\n #define PTA_SHA\t\t\t(HOST_WIDE_INT_1 << 45)\n+#define PTA_PREFETCHWT1\t\t(HOST_WIDE_INT_1 << 46)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -3666,6 +3668,9 @@ ix86_option_override_internal (bool main_args_p,\n \tif (processor_alias_table[i].flags & PTA_AVX512CD\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512CD))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512CD;\n+\tif (processor_alias_table[i].flags & PTA_PREFETCHWT1\n+\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PREFETCHWT1))\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PREFETCHWT1;\n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n \n@@ -4547,6 +4552,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"fxsr\",\tOPT_mfxsr),\n     IX86_ATTR_ISA (\"xsave\",\tOPT_mxsave),\n     IX86_ATTR_ISA (\"xsaveopt\",\tOPT_mxsaveopt),\n+    IX86_ATTR_ISA (\"prefetchwt1\", OPT_mprefetchwt1),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "c80878b47c0473ea3506aaed7abd01cfbc1d8766", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -130,6 +130,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_XSAVE_P(x)\tTARGET_ISA_XSAVE_P(x)\n #define TARGET_XSAVEOPT\tTARGET_ISA_XSAVEOPT\n #define TARGET_XSAVEOPT_P(x)\tTARGET_ISA_XSAVEOPT_P(x)\n+#define TARGET_PREFETCHWT1\tTARGET_ISA_PREFETCHWT1\n+#define TARGET_PREFETCHWT1_P(x)\tTARGET_ISA_PREFETCHWT1_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)"}, {"sha": "b9f13206553c65c9236a906d94d5343574046352", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -17856,7 +17856,7 @@\n   [(prefetch (match_operand 0 \"address_operand\")\n \t     (match_operand:SI 1 \"const_int_operand\")\n \t     (match_operand:SI 2 \"const_int_operand\"))]\n-  \"TARGET_PREFETCH_SSE || TARGET_PRFCHW || TARGET_AVX512PF\"\n+  \"TARGET_PREFETCH_SSE || TARGET_PRFCHW || TARGET_PREFETCHWT1\"\n {\n   bool write = INTVAL (operands[1]) != 0;\n   int locality = INTVAL (operands[2]);\n@@ -17867,8 +17867,8 @@\n      supported by SSE counterpart or the SSE prefetch is not available\n      (K6 machines).  Otherwise use SSE prefetch as it allows specifying\n      of locality.  */\n-  if (TARGET_AVX512PF && write)\n-    operands[2] = const1_rtx;\n+  if (TARGET_PREFETCHWT1 && write)\n+    operands[2] = const2_rtx;\n   else if (TARGET_PRFCHW && (write || !TARGET_PREFETCH_SSE))\n     operands[2] = GEN_INT (3);\n   else\n@@ -17912,14 +17912,13 @@\n \t(symbol_ref \"memory_address_length (operands[0], false)\"))\n    (set_attr \"memory\" \"none\")])\n \n-(define_insn \"*prefetch_avx512pf_<mode>\"\n+(define_insn \"*prefetch_prefetchwt1_<mode>\"\n   [(prefetch (match_operand:P 0 \"address_operand\" \"p\")\n \t     (const_int 1)\n-\t     (const_int 1))]\n-  \"TARGET_AVX512PF\"\n+\t     (const_int 2))]\n+  \"TARGET_PREFETCHWT1\"\n   \"prefetchwt1\\t%a0\";\n   [(set_attr \"type\" \"sse\")\n-   (set_attr \"prefix\" \"evex\")\n    (set (attr \"length_address\")\n \t(symbol_ref \"memory_address_length (operands[0], false)\"))\n    (set_attr \"memory\" \"none\")])"}, {"sha": "0f463a238206284340941eb786cc177ab6b753e6", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -757,6 +757,10 @@ mf16c\n Target Report Mask(ISA_F16C) Var(ix86_isa_flags) Save\n Support F16C built-in functions and code generation\n \n+mprefetchwt1\n+Target Report Mask(ISA_PREFETCHWT1) Var(ix86_isa_flags) Save\n+Support PREFETCHWT1 built-in functions and code generation\n+\n mfentry\n Target Report Var(flag_fentry) Init(-1)\n Emit profiling counter call at function entry before prologue."}, {"sha": "9cefa2c50f7100ab331dad9b34ec12beaa66bd82", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -53,6 +53,8 @@ typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n /* Constants for use with _mm_prefetch.  */\n enum _mm_hint\n {\n+  /* _MM_HINT_ET is _MM_HINT_T with set 3rd bit.  */\n+  _MM_HINT_ET1 = 6,\n   _MM_HINT_T0 = 3,\n   _MM_HINT_T1 = 2,\n   _MM_HINT_T2 = 1,\n@@ -1191,11 +1193,11 @@ _m_psadbw (__m64 __A, __m64 __B)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_prefetch (const void *__P, enum _mm_hint __I)\n {\n-  __builtin_prefetch (__P, 0, __I);\n+  __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);\n }\n #else\n #define _mm_prefetch(P, I) \\\n-  __builtin_prefetch ((P), 0, (I))\n+  __builtin_prefetch ((P), ((I & 0x4) >> 2), (I & 0x3))\n #endif\n \n /* Stores the data in A to the address P without polluting the caches.  */"}, {"sha": "841bcd6becf1dd5c886ec9e171abd19ea74cf40e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -667,7 +667,7 @@ Objective-C and Objective-C++ Dialects}.\n -mvzeroupper -mprefer-avx128 @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -mavx2 -mavx512f -mavx512pf -mavx512er -mavx512cd -msha @gol\n--maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma @gol\n+-maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma -mprefetchwt1 @gol\n -msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n -mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mthreads @gol\n -mno-align-stringops  -minline-all-stringops @gol\n@@ -15265,6 +15265,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-f16c\n @itemx -mfma\n @itemx -mno-fma\n+@itemx -mprefetchwt1\n+@itemx -mno-prefetchwt1\n @itemx -msse4a\n @itemx -mno-sse4a\n @itemx -mfma4"}, {"sha": "0a4eee13c0da33ac4dd1c01a988c526b44f5a813", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -1,3 +1,14 @@\n+2014-02-25  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Update __builtin_prefetch.\n+\t* gcc.target/i386/prefetchwt1-1.c: New.\n+\t* g++.dg/other/i386-2.C: Add new option.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/sse-12.c: Ditto.\n+\t* gcc.target/i386/sse-13.c: Update __builtin_prefetch, add new option.\n+\t* gcc.target/i386/sse-22.c: Add new option.\n+\t* gcc.target/i386/sse-23.c: Update __builtin_prefetch, add new option.\n+\n 2014-02-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR libfortran/59313"}, {"sha": "2f8650a66b0f2b1e96e0d2ebfac7b6d4ef6731ac", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "df0bd279790c1080a9d3afc8aaa35733423ef560", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "12cfc68f912822d910865c3e4636f3a4819b2c0a", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -152,7 +152,7 @@\n #define __builtin_ia32_shufpd(A, B, N) __builtin_ia32_shufpd(A, B, 0)\n \n /* xmmintrin.h */\n-#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, A, _MM_HINT_NTA)\n+#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, 0, _MM_HINT_NTA)\n #define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n #define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n   __builtin_ia32_vec_set_v4hi(A, D, 0)"}, {"sha": "1b88516ede381ed0204729f9cb819b07ef47dd6c", "filename": "gcc/testsuite/gcc.target/i386/prefetchwt1-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchwt1-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchwt1-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchwt1-1.c?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mprefetchwt1 -O2\" } */\n+/* { dg-final { scan-assembler \"\\[ \\\\t\\]+prefetchwt1\\[ \\\\t\\]+\" } } */\n+\n+#include <x86intrin.h>\n+\n+void *p;\n+\n+void extern\n+prefetchw__test (void)\n+{\n+    _mm_prefetch (p, _MM_HINT_ET1);\n+}\n+"}, {"sha": "51de357cc97cf72d115a37d0162b57f52f166b0e", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "171e242382e000661db096bb789b14be9738c10c", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1\" } */\n \n #include <mm_malloc.h>\n \n@@ -138,7 +138,7 @@\n #define __builtin_ia32_shufpd(A, B, N) __builtin_ia32_shufpd(A, B, 0)\n \n /* xmmintrin.h */\n-#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, A, _MM_HINT_NTA)\n+#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, 0, _MM_HINT_NTA)\n #define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n #define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n   __builtin_ia32_vec_set_v4hi(A, D, 0)"}, {"sha": "10334a6bcac8ce535ab45fe2abfe33e0fd079dc9", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "51f04c230de602cf3f039cc921ddbd84fd30a337", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -99,7 +99,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They"}, {"sha": "5b24618ec74c0180169cb57c4265e40353579613", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b3f52f4a5c6c6f03039a06da6006e1b5c44f14/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=43b3f52f4a5c6c6f03039a06da6006e1b5c44f14", "patch": "@@ -90,7 +90,7 @@\n #define __builtin_ia32_shufpd(A, B, N) __builtin_ia32_shufpd(A, B, 0)\n \n /* xmmintrin.h */\n-#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, A, _MM_HINT_NTA)\n+#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, 0, _MM_HINT_NTA)\n #define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n #define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n   __builtin_ia32_vec_set_v4hi(A, D, 0)\n@@ -385,7 +385,7 @@\n /* shaintrin.h */\n #define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}