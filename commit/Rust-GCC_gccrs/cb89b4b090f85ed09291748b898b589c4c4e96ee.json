{"sha": "cb89b4b090f85ed09291748b898b589c4c4e96ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I4OWI0YjA5MGY4NWVkMDkyOTE3NDhiODk4YjU4OWM0YzRlOTZlZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-10-13T11:31:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-10-13T11:31:22Z"}, "message": "re PR tree-optimization/45982 (PTA does not track integers)\n\n2010-10-13  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/45982\n\t* tree-ssa-structalias.c (make_constraints_to): New function.\n\t(make_constraint_to): Implement in terms of make_constraints_to.\n\t(find_func_aliases): Properly make return values of pure/const\n\tfunctions escape if they assign to sth that is not a pointer.\n\n\t* gcc.dg/torture/pr45982.c: New testcase.\n\t* gcc.dg/tree-ssa/pr24287.c: Adjust.\n\t* gcc.dg/tree-ssa/pta-callused.c: Likewise.\n\t* gcc.dg/torture/pr39074-2.c: Likewise.\n\nFrom-SVN: r165418", "tree": {"sha": "d167a412f3467bad90305f5fa28608e706da4e32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d167a412f3467bad90305f5fa28608e706da4e32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb89b4b090f85ed09291748b898b589c4c4e96ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb89b4b090f85ed09291748b898b589c4c4e96ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb89b4b090f85ed09291748b898b589c4c4e96ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb89b4b090f85ed09291748b898b589c4c4e96ee/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72351fa31f66161bd2ce7fa996bc6b4fca3ad2ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72351fa31f66161bd2ce7fa996bc6b4fca3ad2ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72351fa31f66161bd2ce7fa996bc6b4fca3ad2ce"}], "stats": {"total": 88, "additions": 75, "deletions": 13}, "files": [{"sha": "ee15bde78943715a3666e72e74918d3e6e598ecf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb89b4b090f85ed09291748b898b589c4c4e96ee", "patch": "@@ -1,3 +1,11 @@\n+2010-10-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45982\n+\t* tree-ssa-structalias.c (make_constraints_to): New function.\n+\t(make_constraint_to): Implement in terms of make_constraints_to.\n+\t(find_func_aliases): Properly make return values of pure/const\n+\tfunctions escape if they assign to sth that is not a pointer.\n+\n 2010-10-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/45874"}, {"sha": "cd166147c0fd9f1e87e034f016b49b954fed626d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb89b4b090f85ed09291748b898b589c4c4e96ee", "patch": "@@ -1,3 +1,11 @@\n+2010-10-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45982\n+\t* gcc.dg/torture/pr45982.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr24287.c: Adjust.\n+\t* gcc.dg/tree-ssa/pta-callused.c: Likewise.\n+\t* gcc.dg/torture/pr39074-2.c: Likewise.\n+\n 2010-10-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/45874"}, {"sha": "0ca83120118e7e1f4740c069b4019c43e3f5e020", "filename": "gcc/testsuite/gcc.dg/torture/pr39074-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074-2.c?ref=cb89b4b090f85ed09291748b898b589c4c4e96ee", "patch": "@@ -30,5 +30,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"y.._., points-to vars: { i }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"y.._., points-to non-local, points-to escaped, points-to vars: { i }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "497b0a9807a846457212db4f1eb76c62c94e1435", "filename": "gcc/testsuite/gcc.dg/torture/pr45982.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr45982.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr45982.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr45982.c?ref=cb89b4b090f85ed09291748b898b589c4c4e96ee", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+\n+#include <stdint.h>\n+\n+extern void abort (void);\n+\n+uintptr_t __attribute__((pure,noinline,noclone))\n+foo (int *a)\n+{\n+  return (uintptr_t) a;\n+}\n+\n+void __attribute__((noinline,noclone))\n+bar (uintptr_t a)\n+{\n+  int *p = (int *)a;\n+  *p = 1;\n+}\n+\n+int main()\n+{\n+  int t = 0;\n+  bar (foo (&t));\n+  if (t != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "c264fbcb25c4fee8d8169aa3f4c79e1289a04c40", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr24287.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24287.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24287.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24287.c?ref=cb89b4b090f85ed09291748b898b589c4c4e96ee", "patch": "@@ -9,17 +9,21 @@ void link_error();\n int g(void)\n {\n   int t = 0, t1 = 2;\n+  /* ???  That's not true.  The pointers escape to the integer return\n+     value which we do not track in PTA.  */\n   int t2 = h(&t, &t1);\n   if (t != 0)\n     link_error ();\n   if (t1 != 2)\n     link_error ();\n+  /* ???  And it would finally escape here even if we did.  */\n   g1(t2);\n   if (t != 0)\n     link_error ();\n   if (t1 != 2)\n     link_error ();\n   return t2 == 2;\n }\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" } } */\n+/* We are allowed to optimize the first two link_error calls.  */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 2 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "add5c87615297b30399ce64e175b558ec4dd7834", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-callused.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-callused.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-callused.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-callused.c?ref=cb89b4b090f85ed09291748b898b589c4c4e96ee", "patch": "@@ -5,7 +5,7 @@ struct Foo {\n   int *p, *q;\n };\n \n-int foo (int ***x) __attribute__((pure));\n+int *foo (int ***x) __attribute__((pure));\n \n int bar (int b)\n {\n@@ -19,7 +19,7 @@ int bar (int b)\n     q = &f.p;\n   else\n     q = &f.q;\n-  return foo (&q);\n+  return *foo (&q);\n }\n \n /* { dg-final { scan-tree-dump \"CALLUSED = { f.* i q }\" \"alias\" } } */"}, {"sha": "707e31ca579ef43f2e50cf9063729703f33aed09", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb89b4b090f85ed09291748b898b589c4c4e96ee/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=cb89b4b090f85ed09291748b898b589c4c4e96ee", "patch": "@@ -3563,12 +3563,11 @@ do_structure_copy (tree lhsop, tree rhsop)\n   VEC_free (ce_s, heap, rhsc);\n }\n \n-/* Create a constraint ID = OP.  */\n+/* Create constraints ID = { rhsc }.  */\n \n static void\n-make_constraint_to (unsigned id, tree op)\n+make_constraints_to (unsigned id, VEC(ce_s, heap) *rhsc)\n {\n-  VEC(ce_s, heap) *rhsc = NULL;\n   struct constraint_expr *c;\n   struct constraint_expr includes;\n   unsigned int j;\n@@ -3577,9 +3576,18 @@ make_constraint_to (unsigned id, tree op)\n   includes.offset = 0;\n   includes.type = SCALAR;\n \n-  get_constraint_for_rhs (op, &rhsc);\n   FOR_EACH_VEC_ELT (ce_s, rhsc, j, c)\n     process_constraint (new_constraint (includes, *c));\n+}\n+\n+/* Create a constraint ID = OP.  */\n+\n+static void\n+make_constraint_to (unsigned id, tree op)\n+{\n+  VEC(ce_s, heap) *rhsc = NULL;\n+  get_constraint_for_rhs (op, &rhsc);\n+  make_constraints_to (id, rhsc);\n   VEC_free (ce_s, heap, rhsc);\n }\n \n@@ -4334,8 +4342,7 @@ find_func_aliases (gimple origt)\n \t     of global memory but not of escaped memory.  */\n \t  if (flags & (ECF_CONST|ECF_NOVOPS))\n \t    {\n-\t      if (gimple_call_lhs (t)\n-\t\t  && could_have_pointers (gimple_call_lhs (t)))\n+\t      if (gimple_call_lhs (t))\n \t\thandle_const_call (t, &rhsc);\n \t    }\n \t  /* Pure functions can return addresses in and of memory\n@@ -4345,9 +4352,17 @@ find_func_aliases (gimple origt)\n \t    handle_pure_call (t, &rhsc);\n \t  else\n \t    handle_rhs_call (t, &rhsc);\n-\t  if (gimple_call_lhs (t)\n-\t      && could_have_pointers (gimple_call_lhs (t)))\n-\t    handle_lhs_call (t, gimple_call_lhs (t), flags, rhsc, fndecl);\n+\t  if (gimple_call_lhs (t))\n+\t    {\n+\t      if (could_have_pointers (gimple_call_lhs (t)))\n+\t\thandle_lhs_call (t, gimple_call_lhs (t), flags, rhsc, fndecl);\n+\t      /* Similar to conversions a result that is not a pointer\n+\t\t is an escape point for any pointer the function might\n+\t\t return.  */\n+\t      else if (flags & (ECF_CONST|ECF_PURE\n+\t\t\t\t|ECF_NOVOPS|ECF_LOOPING_CONST_OR_PURE))\n+\t\tmake_constraints_to (escaped_id, rhsc);\n+\t    }\n \t  VEC_free (ce_s, heap, rhsc);\n \t}\n       else"}]}