{"sha": "eb3ae3e105091e44f38d0b33dae7f39f1aa555a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIzYWUzZTEwNTA5MWU0NGYzOGQwYjMzZGFlN2YzOWYxYWE1NTVhNg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2001-08-31T22:22:02Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-31T22:22:02Z"}, "message": "function.c: Remove all_functions.\n\n\t* function.c: Remove all_functions.  Make outer_function_chain\n\tstatic.\n\t(init_function_start): Don't add new function structure to\n\tall_functions.\n\t(find_function_data, push_function_context_to,\n\tpop_function_context_from, put_var_into_stack,\n\ttrampoline_address): Update for changed structure element names.\n\t(push_function_context_to): Disentangle.\n\t(free_after_compilation): Also free F.\n\t(expand_dummy_function_end): Don't free cfun here.\n\t(put_var_into_stack): Comment why we can't use find_function_data here.\n\t(fix_lexical_addr, trampoline_address, ): Use find_function_data.\n\t(mark_function_chain): Split into maybe_mark_struct_function and\n\tggc_mark_struct_function.  Export the latter.\n\t(init_function_once): Mark from cfun and outer_function_chain;\n\tnot all_functions.\n\n\t* function.h (struct function): Kill next_global.  Rename next\n\tto outer.  All users updated to match.\n\t(all_functions, outer_function_chain): Don't declare.\n\n\t* ggc-common.c (ggc_mark_trees): Mark DECL_SAVED_INSNS.\n\t* integrate.c (output_inline_function): Clear DECL_SAVED_INSNS,\n\tdon't touch f->inlinable, after calling rest_of_compilation.\n\n\t* tree.h: Forward-declare struct function.  Prototype\n\tggc_mark_struct_function.\n\nFrom-SVN: r45336", "tree": {"sha": "b77c444c6e27770af77c66f1472ba013d89ad831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b77c444c6e27770af77c66f1472ba013d89ad831"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/comments", "author": null, "committer": null, "parents": [{"sha": "7a95ae6b51b590a8b8b9ee06768204c5d6a4a90f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a95ae6b51b590a8b8b9ee06768204c5d6a4a90f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a95ae6b51b590a8b8b9ee06768204c5d6a4a90f"}], "stats": {"total": 170, "additions": 101, "deletions": 69}, "files": [{"sha": "77be0dc794fc624ec1a444d17e5ceaf51c211357", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb3ae3e105091e44f38d0b33dae7f39f1aa555a6", "patch": "@@ -1,3 +1,33 @@\n+2001-08-31  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* function.c: Remove all_functions.  Make outer_function_chain\n+\tstatic.\n+\t(init_function_start): Don't add new function structure to\n+\tall_functions.\n+\t(find_function_data, push_function_context_to,\n+\tpop_function_context_from, put_var_into_stack,\n+\ttrampoline_address): Update for changed structure element names.\n+\t(push_function_context_to): Disentangle.\n+\t(free_after_compilation): Also free F.\n+\t(expand_dummy_function_end): Don't free cfun here.\n+\t(put_var_into_stack): Comment why we can't use find_function_data here.\n+\t(fix_lexical_addr, trampoline_address, ): Use find_function_data.\n+\t(mark_function_chain): Split into maybe_mark_struct_function and\n+\tggc_mark_struct_function.  Export the latter.\n+\t(init_function_once): Mark from cfun and outer_function_chain;\n+\tnot all_functions.\n+\n+\t* function.h (struct function): Kill next_global.  Rename next\n+\tto outer.  All users updated to match.\n+\t(all_functions, outer_function_chain): Don't declare.\n+\n+\t* ggc-common.c (ggc_mark_trees): Mark DECL_SAVED_INSNS.\n+\t* integrate.c (output_inline_function): Clear DECL_SAVED_INSNS,\n+\tdon't touch f->inlinable, after calling rest_of_compilation.\n+\n+\t* tree.h: Forward-declare struct function.  Prototype\n+\tggc_mark_struct_function.\n+\n 2001-08-31  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.md (*andorhi3): Fix typos."}, {"sha": "07f9960cd2b9c09bb1463e3fcbf04d5a026fe733", "filename": "gcc/function.c", "status": "modified", "additions": 60, "deletions": 58, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=eb3ae3e105091e44f38d0b33dae7f39f1aa555a6", "patch": "@@ -145,9 +145,6 @@ tree inline_function_decl;\n /* The currently compiled function.  */\n struct function *cfun = 0;\n \n-/* Global list of all compiled functions.  */\n-struct function *all_functions = 0;\n-\n /* These arrays record the INSN_UIDs of the prologue and epilogue insns.  */\n static varray_type prologue;\n static varray_type epilogue;\n@@ -305,13 +302,13 @@ static int insns_for_mem_walk   PARAMS ((rtx *, void *));\n static void compute_insns_for_mem PARAMS ((rtx, rtx, struct hash_table *));\n static void mark_temp_slot PARAMS ((struct temp_slot *));\n static void mark_function_status PARAMS ((struct function *));\n-static void mark_function_chain PARAMS ((void *));\n+static void maybe_mark_struct_function PARAMS ((void *));\n static void prepare_function_start PARAMS ((void));\n static void do_clobber_return_reg PARAMS ((rtx, void *));\n static void do_use_return_reg PARAMS ((rtx, void *));\n \f\n /* Pointer to chain of `struct function' for containing functions.  */\n-struct function *outer_function_chain;\n+static struct function *outer_function_chain;\n \n /* Given a function decl for a containing function,\n    return the `struct function' for it.  */\n@@ -322,7 +319,7 @@ find_function_data (decl)\n {\n   struct function *p;\n \n-  for (p = outer_function_chain; p; p = p->next)\n+  for (p = outer_function_chain; p; p = p->outer)\n     if (p->decl == decl)\n       return p;\n \n@@ -339,21 +336,24 @@ void\n push_function_context_to (context)\n      tree context;\n {\n-  struct function *p, *context_data;\n+  struct function *p;\n \n   if (context)\n     {\n-      context_data = (context == current_function_decl\n-\t\t      ? cfun\n-\t\t      : find_function_data (context));\n-      context_data->contains_functions = 1;\n+      if (context == current_function_decl)\n+\tcfun->contains_functions = 1;\n+      else\n+\t{\n+\t  struct function *containing = find_function_data (context);\n+\t  containing->contains_functions = 1;\n+\t}\n     }\n \n   if (cfun == 0)\n     init_dummy_function_start ();\n   p = cfun;\n \n-  p->next = outer_function_chain;\n+  p->outer = outer_function_chain;\n   outer_function_chain = p;\n   p->fixup_var_refs_queue = 0;\n \n@@ -381,7 +381,7 @@ pop_function_context_from (context)\n   struct var_refs_queue *next;\n \n   cfun = p;\n-  outer_function_chain = p->next;\n+  outer_function_chain = p->outer;\n \n   current_function_decl = p->decl;\n   reg_renumber = 0;\n@@ -487,6 +487,8 @@ free_after_compilation (f)\n   f->original_decl_initial = NULL;\n   f->inl_last_parm_insn = NULL;\n   f->epilogue_delay_list = NULL;\n+\n+  free (f);\n }\n \f\n /* Allocate fixed slots in the stack frame of the current function.  */\n@@ -1346,10 +1348,13 @@ put_var_into_stack (decl)\n   /* Get the mode it's actually stored in.  */\n   promoted_mode = GET_MODE (reg);\n \n-  /* If this variable comes from an outer function,\n-     find that function's saved context.  */\n+  /* If this variable comes from an outer function, find that\n+     function's saved context.  Don't use find_function_data here,\n+     because it might not be in any active function.\n+     FIXME: Is that really supposed to happen?\n+     It does in ObjC at least.  */\n   if (context != current_function_decl && context != inline_function_decl)\n-    for (function = outer_function_chain; function; function = function->next)\n+    for (function = outer_function_chain; function; function = function->outer)\n       if (function->decl == context)\n \tbreak;\n \n@@ -5523,12 +5528,7 @@ fix_lexical_addr (addr, var)\n   if (context == current_function_decl || context == inline_function_decl)\n     return addr;\n \n-  for (fp = outer_function_chain; fp; fp = fp->next)\n-    if (fp->decl == context)\n-      break;\n-\n-  if (fp == 0)\n-    abort ();\n+  fp = find_function_data (context);\n \n   if (GET_CODE (addr) == ADDRESSOF && GET_CODE (XEXP (addr, 0)) == MEM)\n     addr = XEXP (XEXP (addr, 0), 0);\n@@ -5612,7 +5612,7 @@ trampoline_address (function)\n       return\n \tadjust_trampoline_addr (XEXP (RTL_EXPR_RTL (TREE_VALUE (link)), 0));\n \n-  for (fp = outer_function_chain; fp; fp = fp->next)\n+  for (fp = outer_function_chain; fp; fp = fp->outer)\n     for (link = fp->x_trampoline_list; link; link = TREE_CHAIN (link))\n       if (TREE_PURPOSE (link) == function)\n \t{\n@@ -5628,9 +5628,7 @@ trampoline_address (function)\n   fn_context = decl_function_context (function);\n   if (fn_context != current_function_decl\n       && fn_context != inline_function_decl)\n-    for (fp = outer_function_chain; fp; fp = fp->next)\n-      if (fp->decl == fn_context)\n-\tbreak;\n+    fp = find_function_data (fn_context);\n \n   /* Allocate run-time space for this trampoline\n      (usually in the defining function's stack frame).  */\n@@ -6227,10 +6225,6 @@ init_function_start (subr, filename, line)\n {\n   prepare_function_start ();\n \n-  /* Remember this function for later.  */\n-  cfun->next_global = all_functions;\n-  all_functions = cfun;\n-\n   current_function_name = (*decl_printable_name) (subr, 2);\n   cfun->decl = subr;\n \n@@ -6595,7 +6589,6 @@ expand_dummy_function_end ()\n \n   free_after_parsing (cfun);\n   free_after_compilation (cfun);\n-  free (cfun);\n   cfun = 0;\n }\n \n@@ -7672,45 +7665,54 @@ mark_function_status (p)\n   mark_hard_reg_initial_vals (p);\n }\n \n-/* Mark the function chain ARG (which is really a struct function **)\n-   for GC.  */\n-\n+/* Mark the struct function pointed to by *ARG for GC, if it is not\n+   NULL.  This is used to mark the current function and the outer\n+   function chain.  */\n static void\n-mark_function_chain (arg)\n+maybe_mark_struct_function (arg)\n      void *arg;\n {\n   struct function *f = *(struct function **) arg;\n \n-  for (; f; f = f->next_global)\n-    {\n-      ggc_mark_tree (f->decl);\n-\n-      mark_function_status (f);\n-      mark_eh_status (f->eh);\n-      mark_stmt_status (f->stmt);\n-      mark_expr_status (f->expr);\n-      mark_emit_status (f->emit);\n-      mark_varasm_status (f->varasm);\n-\n-      if (mark_machine_status)\n-\t(*mark_machine_status) (f);\n-      if (mark_lang_status)\n-\t(*mark_lang_status) (f);\n-\n-      if (f->original_arg_vector)\n-\tggc_mark_rtvec ((rtvec) f->original_arg_vector);\n-      if (f->original_decl_initial)\n-\tggc_mark_tree (f->original_decl_initial);\n-    }\n+  if (f == 0)\n+    return;\n+\n+  ggc_mark_struct_function (f);\n+}\n+\n+/* Mark a struct function * for GC.  This is called from ggc-common.c.  */\n+void\n+ggc_mark_struct_function (f)\n+     struct function *f;\n+{\n+  ggc_mark_tree (f->decl);\n+\n+  mark_function_status (f);\n+  mark_eh_status (f->eh);\n+  mark_stmt_status (f->stmt);\n+  mark_expr_status (f->expr);\n+  mark_emit_status (f->emit);\n+  mark_varasm_status (f->varasm);\n+\n+  if (mark_machine_status)\n+    (*mark_machine_status) (f);\n+  if (mark_lang_status)\n+    (*mark_lang_status) (f);\n+\n+  if (f->original_arg_vector)\n+    ggc_mark_rtvec ((rtvec) f->original_arg_vector);\n+  if (f->original_decl_initial)\n+    ggc_mark_tree (f->original_decl_initial);\n }\n \n /* Called once, at initialization, to initialize function.c.  */\n \n void\n init_function_once ()\n {\n-  ggc_add_root (&all_functions, 1, sizeof all_functions,\n-\t\tmark_function_chain);\n+  ggc_add_root (&cfun, 1, sizeof cfun, maybe_mark_struct_function);\n+  ggc_add_root (&outer_function_chain, 1, sizeof outer_function_chain,\n+\t\tmaybe_mark_struct_function);\n \n   VARRAY_INT_INIT (prologue, 0, \"prologue\");\n   VARRAY_INT_INIT (epilogue, 0, \"epilogue\");"}, {"sha": "ff8aeb975ec738d599fde261378c632495179696", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=eb3ae3e105091e44f38d0b33dae7f39f1aa555a6", "patch": "@@ -178,9 +178,6 @@ struct expr_status\n \n struct function\n {\n-  struct function *next_global;\n-  struct function *next;\n-\n   struct eh_status *eh;\n   struct stmt_status *stmt;\n   struct expr_status *expr;\n@@ -195,6 +192,9 @@ struct function\n   /* Points to the FUNCTION_DECL of this function. */\n   tree decl;\n \n+  /* Function containing this function, if any.  */\n+  struct function *outer;\n+\n   /* Number of bytes of args popped by function being compiled on its return.\n      Zero if no bytes are to be popped.\n      May affect compilation of return insn or of function epilogue.  */\n@@ -482,9 +482,6 @@ struct function\n /* The function currently being compiled.  */\n extern struct function *cfun;\n \n-/* A list of all functions we have compiled so far.  */\n-extern struct function *all_functions;\n-\n /* Nonzero if we've already converted virtual regs to hard regs.  */\n extern int virtuals_instantiated;\n \n@@ -553,9 +550,6 @@ extern tree inline_function_decl;\n    return the `struct function' for it.  */\n struct function *find_function_data PARAMS ((tree));\n \n-/* Pointer to chain of `struct function' for containing functions.  */\n-extern struct function *outer_function_chain;\n-\n /* Set NOTE_BLOCK for each block note in the current function.  */\n extern void identify_blocks PARAMS ((void));\n "}, {"sha": "9745001cae6d66881de66e68fe4f5471ac2e0881", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=eb3ae3e105091e44f38d0b33dae7f39f1aa555a6", "patch": "@@ -381,6 +381,8 @@ ggc_mark_trees ()\n \t  ggc_mark_tree (DECL_VINDEX (t));\n \t  if (DECL_ASSEMBLER_NAME_SET_P (t))\n \t    ggc_mark_tree (DECL_ASSEMBLER_NAME (t));\n+\t  if (TREE_CODE (t) == FUNCTION_DECL && DECL_SAVED_INSNS (t))\n+\t    ggc_mark_struct_function (DECL_SAVED_INSNS (t));\n \t  lang_mark_tree (t);\n \t  break;\n "}, {"sha": "232f5fe40def28c1a6f4e2ae6f52b643da0f7e91", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=eb3ae3e105091e44f38d0b33dae7f39f1aa555a6", "patch": "@@ -2902,9 +2902,10 @@ output_inline_function (fndecl)\n   /* Compile this function all the way down to assembly code.  */\n   rest_of_compilation (fndecl);\n \n-  /* We can't inline this anymore.  */\n-  f->inlinable = 0;\n+  /* We can't inline this anymore; rest_of_compilation destroyed the\n+     data structures describing the function.  */\n   DECL_INLINE (fndecl) = 0;\n+  DECL_SAVED_INSNS (fndecl) = 0;\n \n   cfun = old_cfun;\n   current_function_decl = old_cfun ? old_cfun->decl : 0;"}, {"sha": "cf6d24356499fad8b4a7ab092ce56e43b917059b", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb3ae3e105091e44f38d0b33dae7f39f1aa555a6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=eb3ae3e105091e44f38d0b33dae7f39f1aa555a6", "patch": "@@ -1682,6 +1682,8 @@ struct tree_type\n    argument's depth.  */\n #define DECL_POINTER_DEPTH(DECL) (DECL_CHECK (DECL)->decl.pointer_depth)\n \n+struct function;\n+\n struct tree_decl\n {\n   struct tree_common common;\n@@ -2803,6 +2805,7 @@ extern void push_function_context\tPARAMS ((void));\n extern void pop_function_context\tPARAMS ((void));\n extern void push_function_context_to\tPARAMS ((tree));\n extern void pop_function_context_from\tPARAMS ((tree));\n+extern void ggc_mark_struct_function\tPARAMS ((struct function *));\n \n /* In print-rtl.c */\n #ifdef BUFSIZ"}]}