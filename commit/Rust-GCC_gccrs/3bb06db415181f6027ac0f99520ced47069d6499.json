{"sha": "3bb06db415181f6027ac0f99520ced47069d6499", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiMDZkYjQxNTE4MWY2MDI3YWMwZjk5NTIwY2VkNDcwNjlkNjQ5OQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-07-13T18:46:25Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-07-13T18:46:25Z"}, "message": "tree.h (build_function_call_expr): Delete.\n\ngcc/\n\t* tree.h (build_function_call_expr): Delete.\n\t(build_call_expr_loc_array): New function.\n\t(build_call_expr_loc_vec): New function.\n\t* tree-flow.h (struct omp_region): Change type of ws_args field\n\tto a VEC.\n\t* builtins.c (build_function_call_expr): Delete.\n\t(build_call_expr_loc_array): New function.\n\t(build_call_expr_loc): Call it.  Use XALLOCAVEC.\n\t(build_call_expr): Likewise.\n\t(build_call_expr_loc_vec): New function.\n\t* cgraphunit.c (build_cdtor): Call build_call_expr instead of\n\tbuild_function_call_expr.\n\t* expr.c (emutls_var_address): Likewise.\n\t* varasm.c (emutls_common_1): Likewise.\n\t* omp-low.c (expand_omp_atomic_mutex): Likewise.\n\t(expand_omp_taskreg): Adjust for new type of region->ws_args.\n\t(get_ws_args_for): Return a VEC instead of a tree.\n\t(expand_parallel_call): Call build_call_expr_loc_vec instead of\n\tbuild_function_call_expr.\n\t* stor-layout.c (self_referential_size): Likewise.\n\ngcc/fortran/\n\t* trans-decl.c (build_entry_thunks): Call build_call_expr_loc_vec\n\tinstead of build_function_call_expr.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_sr_kind): Likewise.\n\nFrom-SVN: r162148", "tree": {"sha": "435ae90e4b6eed76766475f3f0c7083b8c6f6502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/435ae90e4b6eed76766475f3f0c7083b8c6f6502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bb06db415181f6027ac0f99520ced47069d6499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb06db415181f6027ac0f99520ced47069d6499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb06db415181f6027ac0f99520ced47069d6499", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb06db415181f6027ac0f99520ced47069d6499/comments", "author": null, "committer": null, "parents": [{"sha": "3f34855a08b426c05d3c462fd4563c649ad15476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f34855a08b426c05d3c462fd4563c649ad15476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f34855a08b426c05d3c462fd4563c649ad15476"}], "stats": {"total": 207, "additions": 118, "deletions": 89}, "files": [{"sha": "335eb21a5475f3b43a7031ebb6828036e273d4ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -1,3 +1,26 @@\n+2010-07-13  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* tree.h (build_function_call_expr): Delete.\n+\t(build_call_expr_loc_array): New function.\n+\t(build_call_expr_loc_vec): New function.\n+\t* tree-flow.h (struct omp_region): Change type of ws_args field\n+\tto a VEC.\n+\t* builtins.c (build_function_call_expr): Delete.\n+\t(build_call_expr_loc_array): New function.\n+\t(build_call_expr_loc): Call it.  Use XALLOCAVEC.\n+\t(build_call_expr): Likewise.\n+\t(build_call_expr_loc_vec): New function.\n+\t* cgraphunit.c (build_cdtor): Call build_call_expr instead of\n+\tbuild_function_call_expr.\n+\t* expr.c (emutls_var_address): Likewise.\n+\t* varasm.c (emutls_common_1): Likewise.\n+\t* omp-low.c (expand_omp_atomic_mutex): Likewise.\n+\t(expand_omp_taskreg): Adjust for new type of region->ws_args.\n+\t(get_ws_args_for): Return a VEC instead of a tree.\n+\t(expand_parallel_call): Call build_call_expr_loc_vec instead of\n+\tbuild_function_call_expr.\n+\t* stor-layout.c (self_referential_size): Likewise.\n+\n 2010-07-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/44701"}, {"sha": "b94e056bc65b1b58dd16fe955f4f19452107bbab", "filename": "gcc/builtins.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -10673,22 +10673,30 @@ fold_call_expr (location_t loc, tree exp, bool ignore)\n }\n \n /* Conveniently construct a function call expression.  FNDECL names the\n-    function to be called and ARGLIST is a TREE_LIST of arguments.  */\n+   function to be called and N arguments are passed in the array\n+   ARGARRAY.  */\n \n tree\n-build_function_call_expr (location_t loc, tree fndecl, tree arglist)\n+build_call_expr_loc_array (location_t loc, tree fndecl, int n, tree *argarray)\n {\n   tree fntype = TREE_TYPE (fndecl);\n   tree fn = build1 (ADDR_EXPR, build_pointer_type (fntype), fndecl);\n-  int n = list_length (arglist);\n-  tree *argarray = (tree *) alloca (n * sizeof (tree));\n-  int i;\n-\n-  for (i = 0; i < n; i++, arglist = TREE_CHAIN (arglist))\n-    argarray[i] = TREE_VALUE (arglist);\n+ \n   return fold_builtin_call_array (loc, TREE_TYPE (fntype), fn, n, argarray);\n }\n \n+/* Conveniently construct a function call expression.  FNDECL names the\n+   function to be called and the arguments are passed in the vector\n+   VEC.  */\n+\n+tree\n+build_call_expr_loc_vec (location_t loc, tree fndecl, VEC(tree,gc) *vec)\n+{\n+  return build_call_expr_loc_array (loc, fndecl, VEC_length (tree, vec),\n+\t\t\t\t    VEC_address (tree, vec));\n+}\n+\n+\n /* Conveniently construct a function call expression.  FNDECL names the\n    function to be called, N is the number of arguments, and the \"...\"\n    parameters are the argument expressions.  */\n@@ -10697,16 +10705,14 @@ tree\n build_call_expr_loc (location_t loc, tree fndecl, int n, ...)\n {\n   va_list ap;\n-  tree fntype = TREE_TYPE (fndecl);\n-  tree fn = build1 (ADDR_EXPR, build_pointer_type (fntype), fndecl);\n-  tree *argarray = (tree *) alloca (n * sizeof (tree));\n+  tree *argarray = XALLOCAVEC (tree, n);\n   int i;\n \n   va_start (ap, n);\n   for (i = 0; i < n; i++)\n     argarray[i] = va_arg (ap, tree);\n   va_end (ap);\n-  return fold_builtin_call_array (loc, TREE_TYPE (fntype), fn, n, argarray);\n+  return build_call_expr_loc_array (loc, fndecl, n, argarray);\n }\n \n /* Like build_call_expr_loc (UNKNOWN_LOCATION, ...).  Duplicated because\n@@ -10716,17 +10722,14 @@ tree\n build_call_expr (tree fndecl, int n, ...)\n {\n   va_list ap;\n-  tree fntype = TREE_TYPE (fndecl);\n-  tree fn = build1 (ADDR_EXPR, build_pointer_type (fntype), fndecl);\n-  tree *argarray = (tree *) alloca (n * sizeof (tree));\n+  tree *argarray = XALLOCAVEC (tree, n);\n   int i;\n \n   va_start (ap, n);\n   for (i = 0; i < n; i++)\n     argarray[i] = va_arg (ap, tree);\n   va_end (ap);\n-  return fold_builtin_call_array (UNKNOWN_LOCATION, TREE_TYPE (fntype),\n-\t\t\t\t  fn, n, argarray);\n+  return build_call_expr_loc_array (UNKNOWN_LOCATION, fndecl, n, argarray);\n }\n \n /* Construct a CALL_EXPR with type TYPE with FN as the function expression."}, {"sha": "f0d0a97141bfe1c0434841d46bd7cad7a07f0c1b", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -210,15 +210,15 @@ build_cdtor (bool ctor_p, tree *cdtors, size_t len)\n       do\n \t{\n \t  priority_type p;\n+\t  tree call;\n \t  fn = cdtors[i];\n \t  p = ctor_p ? DECL_INIT_PRIORITY (fn) : DECL_FINI_PRIORITY (fn);\n \t  if (!body)\n \t    priority = p;\n \t  else if (p != priority)\n \t    break;\n-\t  append_to_statement_list (build_function_call_expr (UNKNOWN_LOCATION,\n-\t\t\t\t\t\t\t      fn, 0),\n-\t\t\t\t    &body);\n+\t  call = build_call_expr (fn, 0);\n+\t  append_to_statement_list (call, &body);\n \t  ++i;\n \t}\n       while (i < len);"}, {"sha": "899d5b83ebbb06aec9cf70dd6ed0452f3e06f2e4", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -6827,8 +6827,7 @@ emutls_var_address (tree var)\n   tree emuvar = emutls_decl (var);\n   tree fn = built_in_decls [BUILT_IN_EMUTLS_GET_ADDRESS];\n   tree arg = build_fold_addr_expr_with_type (emuvar, ptr_type_node);\n-  tree arglist = build_tree_list (NULL_TREE, arg);\n-  tree call = build_function_call_expr (UNKNOWN_LOCATION, fn, arglist);\n+  tree call = build_call_expr (fn, 1, arg);\n   return fold_convert (build_pointer_type (TREE_TYPE (var)), call);\n }\n \f"}, {"sha": "6577f14d90bc885f9734110433c5482995bb2d8e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -1,3 +1,9 @@\n+2010-07-13  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* trans-decl.c (build_entry_thunks): Call build_call_expr_loc_vec\n+\tinstead of build_function_call_expr.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_sr_kind): Likewise.\n+\n 2010-07-13  Tobias Burnus  <burnus@net-b.de>\n \t    Daniel Franke  <franke.daniel@gmail.com>\n "}, {"sha": "2cc055d5d182c7e7c741e3a962ce11d0f9f6b0f5", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -1981,8 +1981,6 @@ build_entry_thunks (gfc_namespace * ns)\n   gfc_symbol *thunk_sym;\n   stmtblock_t body;\n   tree thunk_fndecl;\n-  tree args;\n-  tree string_args;\n   tree tmp;\n   locus old_loc;\n \n@@ -1992,6 +1990,9 @@ build_entry_thunks (gfc_namespace * ns)\n   gfc_get_backend_locus (&old_loc);\n   for (el = ns->entries; el; el = el->next)\n     {\n+      VEC(tree,gc) *args = NULL;\n+      VEC(tree,gc) *string_args = NULL;\n+\n       thunk_sym = el->sym;\n       \n       build_function_decl (thunk_sym);\n@@ -2005,18 +2006,16 @@ build_entry_thunks (gfc_namespace * ns)\n \n       /* Pass extra parameter identifying this entry point.  */\n       tmp = build_int_cst (gfc_array_index_type, el->id);\n-      args = tree_cons (NULL_TREE, tmp, NULL_TREE);\n-      string_args = NULL_TREE;\n+      VEC_safe_push (tree, gc, args, tmp);\n \n       if (thunk_sym->attr.function)\n \t{\n \t  if (gfc_return_by_reference (ns->proc_name))\n \t    {\n \t      tree ref = DECL_ARGUMENTS (current_function_decl);\n-\t      args = tree_cons (NULL_TREE, ref, args);\n+\t      VEC_safe_push (tree, gc, args, ref);\n \t      if (ns->proc_name->ts.type == BT_CHARACTER)\n-\t\targs = tree_cons (NULL_TREE, TREE_CHAIN (ref),\n-\t\t\t\t  args);\n+\t\tVEC_safe_push (tree, gc, args, TREE_CHAIN (ref));\n \t    }\n \t}\n \n@@ -2040,31 +2039,29 @@ build_entry_thunks (gfc_namespace * ns)\n \t    {\n \t      /* Pass the argument.  */\n \t      DECL_ARTIFICIAL (thunk_formal->sym->backend_decl) = 1;\n-\t      args = tree_cons (NULL_TREE, thunk_formal->sym->backend_decl,\n-\t\t\t\targs);\n+\t      VEC_safe_push (tree, gc, args, thunk_formal->sym->backend_decl);\n \t      if (formal->sym->ts.type == BT_CHARACTER)\n \t\t{\n \t\t  tmp = thunk_formal->sym->ts.u.cl->backend_decl;\n-\t\t  string_args = tree_cons (NULL_TREE, tmp, string_args);\n+\t\t  VEC_safe_push (tree, gc, string_args, tmp);\n \t\t}\n \t    }\n \t  else\n \t    {\n \t      /* Pass NULL for a missing argument.  */\n-\t      args = tree_cons (NULL_TREE, null_pointer_node, args);\n+\t      VEC_safe_push (tree, gc, args, null_pointer_node);\n \t      if (formal->sym->ts.type == BT_CHARACTER)\n \t\t{\n \t\t  tmp = build_int_cst (gfc_charlen_type_node, 0);\n-\t\t  string_args = tree_cons (NULL_TREE, tmp, string_args);\n+\t\t  VEC_safe_push (tree, gc, string_args, tmp);\n \t\t}\n \t    }\n \t}\n \n       /* Call the master function.  */\n-      args = nreverse (args);\n-      args = chainon (args, nreverse (string_args));\n+      VEC_safe_splice (tree, gc, args, string_args);\n       tmp = ns->proc_name->backend_decl;\n-      tmp = build_function_call_expr (input_location, tmp, args);\n+      tmp = build_call_expr_loc_vec (input_location, tmp, args);\n       if (ns->proc_name->attr.mixed_entry_master)\n \t{\n \t  tree union_decl, field;"}, {"sha": "de21168d15f99ee059a3c1be510733a84d6bdfe5", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -4621,10 +4621,10 @@ static void\n gfc_conv_intrinsic_sr_kind (gfc_se *se, gfc_expr *expr)\n {\n   gfc_actual_arglist *actual;\n-  tree args, type;\n+  tree type;\n   gfc_se argse;\n+  VEC(tree,gc) *args = NULL;\n \n-  args = NULL_TREE;\n   for (actual = expr->value.function.actual; actual; actual = actual->next)\n     {\n       gfc_init_se (&argse, se);\n@@ -4649,13 +4649,13 @@ gfc_conv_intrinsic_sr_kind (gfc_se *se, gfc_expr *expr)\n \n       gfc_add_block_to_block (&se->pre, &argse.pre);\n       gfc_add_block_to_block (&se->post, &argse.post);\n-      args = gfc_chainon_list (args, argse.expr);\n+      VEC_safe_push (tree, gc, args, argse.expr);\n     }\n \n   /* Convert it to the required type.  */\n   type = gfc_typenode_for_spec (&expr->ts);\n-  se->expr = build_function_call_expr (input_location,\n-\t\t\t\t       gfor_fndecl_sr_kind, args);\n+  se->expr = build_call_expr_loc_vec (input_location,\n+\t\t\t\t      gfor_fndecl_sr_kind, args);\n   se->expr = fold_convert (type, se->expr);\n }\n "}, {"sha": "7193c1f8abf0f5cd150ae2f8fafa85602806710f", "filename": "gcc/omp-low.c", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -555,34 +555,35 @@ workshare_safe_to_combine_p (basic_block ws_entry_bb)\n    parallel+workshare call.  WS_STMT is the workshare directive being\n    expanded.  */\n \n-static tree\n+static VEC(tree,gc) *\n get_ws_args_for (gimple ws_stmt)\n {\n   tree t;\n   location_t loc = gimple_location (ws_stmt);\n+  VEC(tree,gc) *ws_args;\n \n   if (gimple_code (ws_stmt) == GIMPLE_OMP_FOR)\n     {\n       struct omp_for_data fd;\n-      tree ws_args;\n \n       extract_omp_for_data (ws_stmt, &fd, NULL);\n \n-      ws_args = NULL_TREE;\n-      if (fd.chunk_size)\n-\t{\n-\t  t = fold_convert_loc (loc, long_integer_type_node, fd.chunk_size);\n-\t  ws_args = tree_cons (NULL, t, ws_args);\n-\t}\n+      ws_args = VEC_alloc (tree, gc, 3 + (fd.chunk_size != 0));\n \n-      t = fold_convert_loc (loc, long_integer_type_node, fd.loop.step);\n-      ws_args = tree_cons (NULL, t, ws_args);\n+      t = fold_convert_loc (loc, long_integer_type_node, fd.loop.n1);\n+      VEC_quick_push (tree, ws_args, t);\n \n       t = fold_convert_loc (loc, long_integer_type_node, fd.loop.n2);\n-      ws_args = tree_cons (NULL, t, ws_args);\n+      VEC_quick_push (tree, ws_args, t);\n \n-      t = fold_convert_loc (loc, long_integer_type_node, fd.loop.n1);\n-      ws_args = tree_cons (NULL, t, ws_args);\n+      t = fold_convert_loc (loc, long_integer_type_node, fd.loop.step);\n+      VEC_quick_push (tree, ws_args, t);\n+\n+      if (fd.chunk_size)\n+\t{\n+\t  t = fold_convert_loc (loc, long_integer_type_node, fd.chunk_size);\n+\t  VEC_quick_push (tree, ws_args, t);\n+\t}\n \n       return ws_args;\n     }\n@@ -593,8 +594,9 @@ get_ws_args_for (gimple ws_stmt)\n \t the exit of the sections region.  */\n       basic_block bb = single_succ (gimple_bb (ws_stmt));\n       t = build_int_cst (unsigned_type_node, EDGE_COUNT (bb->succs) - 1);\n-      t = tree_cons (NULL, t, NULL);\n-      return t;\n+      ws_args = VEC_alloc (tree, gc, 1);\n+      VEC_quick_push (tree, ws_args, t);\n+      return ws_args;\n     }\n \n   gcc_unreachable ();\n@@ -2899,13 +2901,14 @@ gimple_build_cond_empty (tree cond)\n \n static void\n expand_parallel_call (struct omp_region *region, basic_block bb,\n-\t\t      gimple entry_stmt, tree ws_args)\n+\t\t      gimple entry_stmt, VEC(tree,gc) *ws_args)\n {\n   tree t, t1, t2, val, cond, c, clauses;\n   gimple_stmt_iterator gsi;\n   gimple stmt;\n   int start_ix;\n   location_t clause_loc;\n+  VEC(tree,gc) *args;\n \n   clauses = gimple_omp_parallel_clauses (entry_stmt);\n \n@@ -3036,16 +3039,14 @@ expand_parallel_call (struct omp_region *region, basic_block bb,\n     t1 = build_fold_addr_expr (t);\n   t2 = build_fold_addr_expr (gimple_omp_parallel_child_fn (entry_stmt));\n \n-  if (ws_args)\n-    {\n-      tree args = tree_cons (NULL, t2,\n-\t\t\t     tree_cons (NULL, t1,\n-\t\t\t\t\ttree_cons (NULL, val, ws_args)));\n-      t = build_function_call_expr (UNKNOWN_LOCATION,\n-\t\t\t\t    built_in_decls[start_ix], args);\n-    }\n-  else\n-    t = build_call_expr (built_in_decls[start_ix], 3, t2, t1, val);\n+  args = VEC_alloc (tree, gc, 3 + VEC_length (tree, ws_args));\n+  VEC_quick_push (tree, args, t2);\n+  VEC_quick_push (tree, args, t1);\n+  VEC_quick_push (tree, args, val);\n+  VEC_splice (tree, args, ws_args);\n+\n+  t = build_call_expr_loc_vec (UNKNOWN_LOCATION,\n+\t\t\t       built_in_decls[start_ix], args);\n \n   force_gimple_operand_gsi (&gsi, t, true, NULL_TREE,\n \t\t\t    false, GSI_CONTINUE_LINKING);\n@@ -3332,11 +3333,12 @@ expand_omp_taskreg (struct omp_region *region)\n {\n   basic_block entry_bb, exit_bb, new_bb;\n   struct function *child_cfun;\n-  tree child_fn, block, t, ws_args;\n+  tree child_fn, block, t;\n   tree save_current;\n   gimple_stmt_iterator gsi;\n   gimple entry_stmt, stmt;\n   edge e;\n+  VEC(tree,gc) *ws_args;\n \n   entry_stmt = last_stmt (region->entry);\n   child_fn = gimple_omp_taskreg_child_fn (entry_stmt);\n@@ -3351,7 +3353,7 @@ expand_omp_taskreg (struct omp_region *region)\n   if (is_combined_parallel (region))\n     ws_args = region->ws_args;\n   else\n-    ws_args = NULL_TREE;\n+    ws_args = NULL;\n \n   if (child_cfun->cfg)\n     {\n@@ -5232,7 +5234,7 @@ expand_omp_atomic_mutex (basic_block load_bb, basic_block store_bb,\n   gcc_assert (gimple_code (gsi_stmt (si)) == GIMPLE_OMP_ATOMIC_LOAD);\n \n   t = built_in_decls[BUILT_IN_GOMP_ATOMIC_START];\n-  t = build_function_call_expr (UNKNOWN_LOCATION, t, 0);\n+  t = build_call_expr (t, 0);\n   force_gimple_operand_gsi (&si, t, true, NULL_TREE, true, GSI_SAME_STMT);\n \n   stmt = gimple_build_assign (loaded_val, build_simple_mem_ref (addr));\n@@ -5247,7 +5249,7 @@ expand_omp_atomic_mutex (basic_block load_bb, basic_block store_bb,\n   gsi_insert_before (&si, stmt, GSI_SAME_STMT);\n \n   t = built_in_decls[BUILT_IN_GOMP_ATOMIC_END];\n-  t = build_function_call_expr (UNKNOWN_LOCATION, t, 0);\n+  t = build_call_expr (t, 0);\n   force_gimple_operand_gsi (&si, t, true, NULL_TREE, true, GSI_SAME_STMT);\n   gsi_remove (&si, true);\n "}, {"sha": "8d3c7526737e7aa7f23a43d5f011cd0b786e8ffb", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -234,10 +234,11 @@ self_referential_size (tree size)\n {\n   static unsigned HOST_WIDE_INT fnno = 0;\n   VEC (tree, heap) *self_refs = NULL;\n-  tree param_type_list = NULL, param_decl_list = NULL, arg_list = NULL;\n+  tree param_type_list = NULL, param_decl_list = NULL;\n   tree t, ref, return_type, fntype, fnname, fndecl;\n   unsigned int i;\n   char buf[128];\n+  VEC(tree,gc) *args = NULL;\n \n   /* Do not factor out simple operations.  */\n   t = skip_simple_arithmetic (size);\n@@ -256,6 +257,7 @@ self_referential_size (tree size)\n \n   /* Build the parameter and argument lists in parallel; also\n      substitute the former for the latter in the expression.  */\n+  args = VEC_alloc (tree, gc, VEC_length (tree, self_refs));\n   for (i = 0; VEC_iterate (tree, self_refs, i, ref); i++)\n     {\n       tree subst, param_name, param_type, param_decl;\n@@ -291,7 +293,7 @@ self_referential_size (tree size)\n \n       param_type_list = tree_cons (NULL_TREE, param_type, param_type_list);\n       param_decl_list = chainon (param_decl, param_decl_list);\n-      arg_list = tree_cons (NULL_TREE, ref, arg_list);\n+      VEC_quick_push (tree, args, ref);\n     }\n \n   VEC_free (tree, heap, self_refs);\n@@ -302,7 +304,6 @@ self_referential_size (tree size)\n   /* The 3 lists have been created in reverse order.  */\n   param_type_list = nreverse (param_type_list);\n   param_decl_list = nreverse (param_decl_list);\n-  arg_list = nreverse (arg_list);\n \n   /* Build the function type.  */\n   return_type = TREE_TYPE (size);\n@@ -343,7 +344,7 @@ self_referential_size (tree size)\n   VEC_safe_push (tree, gc, size_functions, fndecl);\n \n   /* Replace the original expression with a call to the size function.  */\n-  return build_function_call_expr (UNKNOWN_LOCATION, fndecl, arg_list);\n+  return build_call_expr_loc_vec (input_location, fndecl, args);\n }\n \n /* Take, queue and compile all the size functions.  It is essential that"}, {"sha": "6b12d086a9f1b129c19e2de8086f637f5604fba7", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -368,7 +368,7 @@ struct omp_region\n   /* If this is a combined parallel+workshare region, this is a list\n      of additional arguments needed by the combined parallel+workshare\n      library call.  */\n-  tree ws_args;\n+  VEC(tree,gc) *ws_args;\n \n   /* The code for the omp directive of this region.  */\n   enum gimple_code type;"}, {"sha": "be70d2bb85098854edfecb817cbdae91959f2ef9", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -5023,8 +5023,9 @@ extern tree fold_builtin_strncpy_chk (location_t, tree, tree, tree, tree, tree);\n extern tree fold_builtin_snprintf_chk (location_t, tree, tree, enum built_in_function);\n extern bool fold_builtin_next_arg (tree, bool);\n extern enum built_in_function builtin_mathfn_code (const_tree);\n-extern tree build_function_call_expr (location_t, tree, tree);\n extern tree fold_builtin_call_array (location_t, tree, tree, int, tree *);\n+extern tree build_call_expr_loc_array (location_t, tree, int, tree *);\n+extern tree build_call_expr_loc_vec (location_t, tree, VEC(tree,gc) *);\n extern tree build_call_expr_loc (location_t, tree, int, ...);\n extern tree build_call_expr (tree, int, ...);\n extern tree mathfn_built_in (tree, enum built_in_function fn);"}, {"sha": "5fad5f0c571983660ce1f37ae42dd28f04fd9f1c", "filename": "gcc/varasm.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb06db415181f6027ac0f99520ced47069d6499/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3bb06db415181f6027ac0f99520ced47069d6499", "patch": "@@ -429,7 +429,7 @@ static int\n emutls_common_1 (void **loc, void *xstmts)\n {\n   struct tree_map *h = *(struct tree_map **) loc;\n-  tree args, x, *pstmts = (tree *) xstmts;\n+  tree x, *pstmts = (tree *) xstmts;\n   tree word_type_node;\n \n   if (! DECL_COMMON (h->base.from)\n@@ -443,17 +443,14 @@ emutls_common_1 (void **loc, void *xstmts)\n      do this and there is an initializer, -fanchor_section loses,\n      because it would be too late to ensure the template is\n      output.  */\n-  x = null_pointer_node;\n-  args = tree_cons (NULL, x, NULL);\n-  x = build_int_cst (word_type_node, DECL_ALIGN_UNIT (h->base.from));\n-  args = tree_cons (NULL, x, args);\n-  x = fold_convert (word_type_node, DECL_SIZE_UNIT (h->base.from));\n-  args = tree_cons (NULL, x, args);\n-  x = build_fold_addr_expr (h->to);\n-  args = tree_cons (NULL, x, args);\n-\n   x = built_in_decls[BUILT_IN_EMUTLS_REGISTER_COMMON];\n-  x = build_function_call_expr (UNKNOWN_LOCATION, x, args);\n+  x = build_call_expr (x, 4,\n+\t\t       build_fold_addr_expr (h->to),\n+\t\t       fold_convert (word_type_node,\n+\t\t\t\t     DECL_SIZE_UNIT (h->base.from)),\n+\t\t       build_int_cst (word_type_node,\n+\t\t\t\t      DECL_ALIGN_UNIT (h->base.from)),\n+\t\t       null_pointer_node);\n \n   append_to_statement_list (x, pstmts);\n   return 1;"}]}