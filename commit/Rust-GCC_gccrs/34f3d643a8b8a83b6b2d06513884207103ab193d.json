{"sha": "34f3d643a8b8a83b6b2d06513884207103ab193d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRmM2Q2NDNhOGI4YTgzYjZiMmQwNjUxMzg4NDIwNzEwM2FiMTkzZA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-11-29T16:29:05Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-11-29T16:29:05Z"}, "message": "re PR debug/46101 (ICE: in build_abbrev_table, at dwarf2out.c:10333 with -feliminate-dwarf2-dups -g)\n\nFix PR debug/46101\n\ngcc/\n\t* dwarf2out.c (lookup_type_die_strip_naming_typedef): New\n\tfunction.\n\t(scope_die_for, gen_type_die_for_member): Replace uses of\n\tlookup_type_die with use of lookup_type_die_strip_naming_typedef.\n\ngcc/testsuite/\n\t* g++.dg/debug/dwarf2/typedef5.C: New test\n\nFrom-SVN: r167246", "tree": {"sha": "7f5f6c6394af43677d14579fd0dec0020111c8a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f5f6c6394af43677d14579fd0dec0020111c8a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34f3d643a8b8a83b6b2d06513884207103ab193d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f3d643a8b8a83b6b2d06513884207103ab193d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f3d643a8b8a83b6b2d06513884207103ab193d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f3d643a8b8a83b6b2d06513884207103ab193d/comments", "author": null, "committer": null, "parents": [{"sha": "7607219dc3b38d63a26df4121f89e412fb8b4da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7607219dc3b38d63a26df4121f89e412fb8b4da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7607219dc3b38d63a26df4121f89e412fb8b4da2"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "09fc957b2266d2f0977d8da10364c9e4a2d29882", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f3d643a8b8a83b6b2d06513884207103ab193d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f3d643a8b8a83b6b2d06513884207103ab193d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34f3d643a8b8a83b6b2d06513884207103ab193d", "patch": "@@ -1,3 +1,11 @@\n+2010-11-29  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/46101\n+\t* dwarf2out.c (lookup_type_die_strip_naming_typedef): New\n+\tfunction.\n+    \t(scope_die_for, gen_type_die_for_member): Replace uses of\n+\tlookup_type_die with use of lookup_type_die_strip_naming_typedef.\n+\n 2010-11-29  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/darwin.c (darwin_mergeable_string_section): Remove blank line."}, {"sha": "7e788a44bcd7b869b13b3d1aeca80a45ac9c4a68", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f3d643a8b8a83b6b2d06513884207103ab193d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f3d643a8b8a83b6b2d06513884207103ab193d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=34f3d643a8b8a83b6b2d06513884207103ab193d", "patch": "@@ -6264,6 +6264,7 @@ static void remove_child_TAG (dw_die_ref, enum dwarf_tag);\n static void add_child_die (dw_die_ref, dw_die_ref);\n static dw_die_ref new_die (enum dwarf_tag, dw_die_ref, tree);\n static dw_die_ref lookup_type_die (tree);\n+static dw_die_ref lookup_type_die_strip_naming_typedef (tree);\n static void equate_type_number_to_die (tree, dw_die_ref);\n static hashval_t decl_die_table_hash (const void *);\n static int decl_die_table_eq (const void *, const void *);\n@@ -8033,6 +8034,27 @@ lookup_type_die (tree type)\n   return TYPE_SYMTAB_DIE (type);\n }\n \n+/* Like lookup_type_die, but if type is an anonymous type named by a\n+   typedef[1], return the DIE of the anonymous type instead the one of\n+   the naming typedef.  This is because in gen_typedef_die, we did\n+   equate the anonymous struct named by the typedef with the DIE of\n+   the naming typedef. So by default, lookup_type_die on an anonymous\n+   struct yields the DIE of the naming typedef.\n+\n+   [1]: Read the comment of is_naming_typedef_decl to learn about what\n+   a naming typedef is.  */\n+\n+static inline dw_die_ref\n+lookup_type_die_strip_naming_typedef (tree type)\n+{\n+  dw_die_ref die = lookup_type_die (type);\n+  if (TREE_CODE (type) == RECORD_TYPE\n+      && die->die_tag == DW_TAG_typedef\n+      && is_naming_typedef_decl (TYPE_NAME (type)))\n+    die = get_AT_ref (die, DW_AT_type);\n+  return die;\n+}\n+\n /* Equate a DIE to a given type specifier.  */\n \n static inline void\n@@ -17887,7 +17909,7 @@ scope_die_for (tree t, dw_die_ref context_die)\n \t    scope_die = comp_unit_die ();\n \t}\n       else\n-\tscope_die = lookup_type_die (containing_scope);\n+\tscope_die = lookup_type_die_strip_naming_typedef (containing_scope);\n     }\n   else\n     scope_die = context_die;\n@@ -18714,7 +18736,7 @@ gen_type_die_for_member (tree type, tree member, dw_die_ref context_die)\n       gcc_assert (!decl_ultimate_origin (member));\n \n       push_decl_scope (type);\n-      type_die = lookup_type_die (type);\n+      type_die = lookup_type_die_strip_naming_typedef (type);\n       if (TREE_CODE (member) == FUNCTION_DECL)\n \tgen_subprogram_die (member, type_die);\n       else if (TREE_CODE (member) == FIELD_DECL)"}, {"sha": "79a12a06ca405094179398a9b60ccc23b4ddfced", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f3d643a8b8a83b6b2d06513884207103ab193d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f3d643a8b8a83b6b2d06513884207103ab193d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34f3d643a8b8a83b6b2d06513884207103ab193d", "patch": "@@ -1,3 +1,8 @@\n+2010-11-29  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/46101\n+\t* g++.dg/debug/dwarf2/typedef5.C: New test\n+\n 2010-11-29  Iain Sandoe  <iains@gcc.gnu.org>\n \t    Mike Stump  <mrs@gcc.gnu.org>\n "}, {"sha": "d9d058c9c8cebcf12775f132cf8aba94a9227ad2", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/typedef5.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f3d643a8b8a83b6b2d06513884207103ab193d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftypedef5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f3d643a8b8a83b6b2d06513884207103ab193d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftypedef5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftypedef5.C?ref=34f3d643a8b8a83b6b2d06513884207103ab193d", "patch": "@@ -0,0 +1,10 @@\n+// Origin: PR debug/46101\n+// { dg-options \"-g -feliminate-dwarf2-dups\" }\n+// { dg-do compile }\n+\n+typedef struct\n+{\n+  virtual void f () { }\n+} A;\n+\n+A a;"}]}