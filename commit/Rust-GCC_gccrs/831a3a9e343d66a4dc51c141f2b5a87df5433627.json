{"sha": "831a3a9e343d66a4dc51c141f2b5a87df5433627", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMxYTNhOWUzNDNkNjZhNGRjNTFjMTQxZjJiNWE4N2RmNTQzMzYyNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-01-26T23:42:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-01-26T23:42:39Z"}, "message": "re PR target/64368 (Several libstdc++ test failures on non-linux platforms after r218964.)\n\n\tPR libstdc++/64368\n\t* config/locale/gnu/numeric_members.cc (numpunct<char>::~numpunct(),\n\tnumpunct<wchar_t>::~numpunct()): Do not set _M_data->_M_grouping.\n\t* src/c++11/cxx11-shim_facets.cc (numpunct_shim): Remove _M_grouping\n\tand use cache's _M_grouping field.\n\t(__numpunct_fill_cache): Likewise.\n\t(__moneypunct_fill_cache): Improve comments.\n\nFrom-SVN: r220143", "tree": {"sha": "8b24d20bd9c8aeceb722af8fe96b6b620d94be71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b24d20bd9c8aeceb722af8fe96b6b620d94be71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/831a3a9e343d66a4dc51c141f2b5a87df5433627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831a3a9e343d66a4dc51c141f2b5a87df5433627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/831a3a9e343d66a4dc51c141f2b5a87df5433627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831a3a9e343d66a4dc51c141f2b5a87df5433627/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26570a9b4bd111cd57f2148f4996e50c2ae812b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26570a9b4bd111cd57f2148f4996e50c2ae812b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26570a9b4bd111cd57f2148f4996e50c2ae812b1"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "4cdcd148abd66cfba732fd85515f42bd2c60fcbc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831a3a9e343d66a4dc51c141f2b5a87df5433627/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831a3a9e343d66a4dc51c141f2b5a87df5433627/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=831a3a9e343d66a4dc51c141f2b5a87df5433627", "patch": "@@ -1,3 +1,13 @@\n+2015-01-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/64368\n+\t* config/locale/gnu/numeric_members.cc (numpunct<char>::~numpunct(),\n+\tnumpunct<wchar_t>::~numpunct()): Do not set _M_data->_M_grouping.\n+\t* src/c++11/cxx11-shim_facets.cc (numpunct_shim): Remove _M_grouping\n+\tand use cache's _M_grouping field.\n+\t(__numpunct_fill_cache): Likewise.\n+\t(__moneypunct_fill_cache): Improve comments.\n+\n 2015-01-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/23_containers/set/operations/2.cc: Add test for"}, {"sha": "aab01f9c263c4da191d4603628ec9f3752fd5d1d", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831a3a9e343d66a4dc51c141f2b5a87df5433627/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831a3a9e343d66a4dc51c141f2b5a87df5433627/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=831a3a9e343d66a4dc51c141f2b5a87df5433627", "patch": "@@ -117,7 +117,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (_M_data->_M_grouping_size)\n \tdelete [] _M_data->_M_grouping;\n-      _M_data->_M_grouping = 0;\n       delete _M_data;\n     }\n    \n@@ -210,7 +209,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (_M_data->_M_grouping_size)\n \tdelete [] _M_data->_M_grouping;\n-      _M_data->_M_grouping = 0;\n       delete _M_data;\n     }\n  #endif"}, {"sha": "82bdf6f2ced3d4b319f493a0af4134dd66498d49", "filename": "libstdc++-v3/src/c++11/cxx11-shim_facets.cc", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831a3a9e343d66a4dc51c141f2b5a87df5433627/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831a3a9e343d66a4dc51c141f2b5a87df5433627/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc?ref=831a3a9e343d66a4dc51c141f2b5a87df5433627", "patch": "@@ -170,8 +170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename C>\n     void\n-    __numpunct_fill_cache(other_abi, const facet*, __numpunct_cache<C>*,\n-\t\t\t  const char*&, size_t&);\n+    __numpunct_fill_cache(other_abi, const facet*, __numpunct_cache<C>*);\n \n   template<typename C>\n     int\n@@ -235,24 +234,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tnumpunct_shim(const facet* f, __cache_type* c = new __cache_type)\n \t: std::numpunct<_CharT>(c), __shim(f), _M_cache(c)\n \t{\n-\t  __numpunct_fill_cache(other_abi{}, f, c, _M_grouping,\n-\t\t\t\t_M_grouping_size);\n+\t  __numpunct_fill_cache(other_abi{}, f, c);\n \t}\n \n-\t~numpunct_shim() { delete[] _M_grouping; }\n-\n-\tvirtual string\n-\tdo_grouping() const\n-\t{ return string(_M_grouping, _M_grouping_size); }\n+\t~numpunct_shim()\n+\t{\n+\t  // Stop GNU locale's ~numpunct() from freeing the cached string.\n+\t  _M_cache->_M_grouping_size = 0;\n+\t}\n \n-\t// No need to override other virtual functions, the base definitions\n+\t// No need to override any virtual functions, the base definitions\n \t// will return the cached data.\n \n \t__cache_type* _M_cache;\n-\t// numpunct uses __numpunct_cache<C>::_M_grouping for its own purposes\n-\t// so we can't store that in the cache\n-\tconst char* _M_grouping;\n-\tsize_t _M_grouping_size;\n       };\n \n     template<typename _CharT>\n@@ -348,7 +342,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t~moneypunct_shim()\n \t{\n-\t  // stop GNU locale's ~moneypunct() from freeing these strings\n+\t  // Stop GNU locale's ~moneypunct() from freeing the cached strings.\n \t  _M_cache->_M_grouping_size = 0;\n \t  _M_cache->_M_curr_symbol_size = 0;\n \t  _M_cache->_M_positive_sign_size = 0;\n@@ -497,37 +491,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Now define and instantiate the functions that will be called by the\n   // shim facets defined when this file is recompiled for the other ABI.\n \n+  // Cache the values returned by the numpunct facet f.\n+  // Sets c->_M_allocated so that the __numpunct_cache destructor will\n+  // delete[] the strings allocated by this function.\n   template<typename C>\n     void\n-    __numpunct_fill_cache(current_abi, const facet* f, __numpunct_cache<C>* c,\n-\t\t\t  const char*& grouping, size_t& grouping_size)\n+    __numpunct_fill_cache(current_abi, const facet* f, __numpunct_cache<C>* c)\n     {\n       auto* m = static_cast<const numpunct<C>*>(f);\n \n       c->_M_decimal_point = m->decimal_point();\n       c->_M_thousands_sep = m->thousands_sep();\n \n+      c->_M_grouping = nullptr;\n       c->_M_truename = nullptr;\n       c->_M_falsename = nullptr;\n       // set _M_allocated so that if any allocation fails the previously\n-      // allocated strings will be deleted in ~__numpunct_c()\n+      // allocated strings will be deleted in ~__numpunct_cache()\n       c->_M_allocated = true;\n \n+      c->_M_grouping_size = __copy(c->_M_grouping, m->grouping());\n       c->_M_truename_size = __copy(c->_M_truename, m->truename());\n       c->_M_falsename_size = __copy(c->_M_falsename, m->falsename());\n-      // Set grouping last as it is only deleted by ~numpunct_shim() which\n-      // won't run if this function throws an exception.\n-      grouping_size = __copy(grouping, m->grouping());\n     }\n \n   template void\n-  __numpunct_fill_cache(current_abi, const facet*, __numpunct_cache<char>*,\n-\t\t\tconst char*&, size_t&);\n+  __numpunct_fill_cache(current_abi, const facet*, __numpunct_cache<char>*);\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template void\n-  __numpunct_fill_cache(current_abi, const facet*, __numpunct_cache<wchar_t>*,\n-\t\t\tconst char*&, size_t&);\n+  __numpunct_fill_cache(current_abi, const facet*, __numpunct_cache<wchar_t>*);\n #endif\n \n   template<typename C>\n@@ -567,6 +560,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      const wchar_t*, const wchar_t*);\n #endif\n \n+  // Cache the values returned by the moneypunct facet, f.\n+  // Sets c->_M_allocated so that the __moneypunct_cache destructor will\n+  // delete[] the strings allocated by this function.\n   template<typename C, bool Intl>\n     void\n     __moneypunct_fill_cache(current_abi, const facet* f,\n@@ -582,8 +578,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       c->_M_curr_symbol = nullptr;\n       c->_M_positive_sign = nullptr;\n       c->_M_negative_sign = nullptr;\n-      // set _M_allocated so that if any allocation fails the previously\n-      // allocated strings will be deleted in ~__moneypunct_c()\n+      // Set _M_allocated so that if any allocation fails the previously\n+      // allocated strings will be deleted in ~__moneypunct_cache().\n       c->_M_allocated = true;\n \n       c->_M_grouping_size = __copy(c->_M_grouping, m->grouping());"}]}