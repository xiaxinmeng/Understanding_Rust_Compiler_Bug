{"sha": "2181e7141cf1f517868e4aa657ad04f95f37c258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE4MWU3MTQxY2YxZjUxNzg2OGU0YWE2NTdhZDA0Zjk1ZjM3YzI1OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-09T22:28:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-09T22:28:42Z"}, "message": "The \"main\" package is not special if -fgo-prefix is used.\n\nFrom-SVN: r169986", "tree": {"sha": "39400fa4c4e13e03ea013d1191c98c37bf44b3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39400fa4c4e13e03ea013d1191c98c37bf44b3a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2181e7141cf1f517868e4aa657ad04f95f37c258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2181e7141cf1f517868e4aa657ad04f95f37c258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2181e7141cf1f517868e4aa657ad04f95f37c258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2181e7141cf1f517868e4aa657ad04f95f37c258/comments", "author": null, "committer": null, "parents": [{"sha": "15167bbaa59ef9668501a4a224484efa2ff502c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15167bbaa59ef9668501a4a224484efa2ff502c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15167bbaa59ef9668501a4a224484efa2ff502c9"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "73f2503f20875804f746861065eacf468fc81a83", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2181e7141cf1f517868e4aa657ad04f95f37c258/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2181e7141cf1f517868e4aa657ad04f95f37c258/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=2181e7141cf1f517868e4aa657ad04f95f37c258", "patch": "@@ -161,7 +161,7 @@ Gogo::get_init_fn_name()\n   if (this->init_fn_name_.empty())\n     {\n       gcc_assert(this->package_ != NULL);\n-      if (this->package_name() == \"main\")\n+      if (this->is_main_package())\n \t{\n \t  // Use a name which the runtime knows.\n \t  this->init_fn_name_ = \"__go_init_main\";\n@@ -186,7 +186,7 @@ Gogo::get_init_fn_name()\n void\n Gogo::init_imports(tree* init_stmt_list)\n {\n-  gcc_assert(this->package_name() == \"main\");\n+  gcc_assert(this->is_main_package());\n \n   if (this->imported_init_fns_.empty())\n     return;\n@@ -384,7 +384,7 @@ Gogo::write_initialization_function(tree fndecl, tree init_stmt_list)\n {\n   // Make sure that we thought we needed an initialization function,\n   // as otherwise we will not have reported it in the export data.\n-  gcc_assert(this->package_name() == \"main\" || this->need_init_fn_);\n+  gcc_assert(this->is_main_package() || this->need_init_fn_);\n \n   if (fndecl == NULL_TREE)\n     fndecl = this->initialization_function_decl();\n@@ -648,7 +648,7 @@ Gogo::write_globals()\n   tree init_fndecl = NULL_TREE;\n   tree init_stmt_list = NULL_TREE;\n \n-  if (this->package_name() == \"main\")\n+  if (this->is_main_package())\n     this->init_imports(&init_stmt_list);\n \n   // A list of variable initializations.\n@@ -804,7 +804,7 @@ Gogo::write_globals()\n   // This will be called if this package is imported.\n   if (init_stmt_list != NULL_TREE\n       || this->need_init_fn_\n-      || this->package_name() == \"main\")\n+      || this->is_main_package())\n     this->write_initialization_function(init_fndecl, init_stmt_list);\n \n   // Pass everything back to the middle-end.\n@@ -1259,7 +1259,7 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no, tree id)\n \t\t   && !this->type_->is_method())\n \t    ;\n \t  else if (Gogo::unpack_hidden_name(no->name()) == \"main\"\n-\t\t   && gogo->package_name() == \"main\")\n+\t\t   && gogo->is_main_package())\n \t    TREE_PUBLIC(decl) = 1;\n \t  // Methods have to be public even if they are hidden because\n \t  // they can be pulled into type descriptors when using"}, {"sha": "aa66cf4d10986f53c93fbb40ba24c59705f19ad2", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2181e7141cf1f517868e4aa657ad04f95f37c258/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2181e7141cf1f517868e4aa657ad04f95f37c258/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=2181e7141cf1f517868e4aa657ad04f95f37c258", "patch": "@@ -33,6 +33,7 @@ Gogo::Gogo(int int_type_size, int pointer_size)\n     init_fn_name_(),\n     imported_init_fns_(),\n     unique_prefix_(),\n+    unique_prefix_specified_(false),\n     interface_types_()\n {\n   const source_location loc = BUILTINS_LOCATION;\n@@ -259,7 +260,7 @@ Gogo::set_package_name(const std::string& package_name,\n   // package name (e.g., P.x), but we no longer do.\n   // this->globals_->add_package(package_name, this->package_);\n \n-  if (package_name == \"main\")\n+  if (this->is_main_package())\n     {\n       // Declare \"main\" as a function which takes no parameters and\n       // returns no value.\n@@ -270,6 +271,15 @@ Gogo::set_package_name(const std::string& package_name,\n     }\n }\n \n+// Return whether this is the \"main\" package.  This is not true if\n+// -fgo-prefix was used.\n+\n+bool\n+Gogo::is_main_package() const\n+{\n+  return this->package_name() == \"main\" && !this->unique_prefix_specified_;\n+}\n+\n // Import a package.\n \n void\n@@ -2446,6 +2456,7 @@ Gogo::set_unique_prefix(const std::string& arg)\n {\n   gcc_assert(this->unique_prefix_.empty());\n   this->unique_prefix_ = arg;\n+  this->unique_prefix_specified_ = true;\n }\n \n // Work out the package priority.  It is one more than the maximum\n@@ -2477,7 +2488,7 @@ Gogo::do_exports()\n   exp.export_globals(this->package_name(),\n \t\t     this->unique_prefix(),\n \t\t     this->package_priority(),\n-\t\t     (this->need_init_fn_ && this->package_name() != \"main\"\n+\t\t     (this->need_init_fn_ && !this->is_main_package()\n \t\t      ? this->get_init_fn_name()\n \t\t      : \"\"),\n \t\t     this->imported_init_fns_,"}, {"sha": "57928d6600b194a55d4af8232b35e60be56f1e38", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2181e7141cf1f517868e4aa657ad04f95f37c258/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2181e7141cf1f517868e4aa657ad04f95f37c258/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=2181e7141cf1f517868e4aa657ad04f95f37c258", "patch": "@@ -112,6 +112,10 @@ class Gogo\n   void\n   set_package_name(const std::string&, source_location);\n \n+  // Return whether this is the \"main\" package.\n+  bool\n+  is_main_package() const;\n+\n   // If necessary, adjust the name to use for a hidden symbol.  We add\n   // a prefix of the package name, so that hidden symbols in different\n   // packages do not collide.\n@@ -653,6 +657,8 @@ class Gogo\n   std::set<Import_init> imported_init_fns_;\n   // The unique prefix used for all global symbols.\n   std::string unique_prefix_;\n+  // Whether an explicit unique prefix was set by -fgo-prefix.\n+  bool unique_prefix_specified_;\n   // A list of interface types defined while parsing.\n   std::vector<Interface_type*> interface_types_;\n };"}]}