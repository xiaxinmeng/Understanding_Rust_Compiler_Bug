{"sha": "dbfba41e95d1d93b17e907b7f516b52ed3a3c415", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJmYmE0MWU5NWQxZDkzYjE3ZTkwN2I3ZjUxNmI1MmVkM2EzYzQxNQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-02-21T17:45:56Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-02-21T17:45:56Z"}, "message": "PR c++/93753 - ICE on a flexible array followed by a member in an anonymous struct with an initializer\n\ngcc/cp/ChangeLog:\n\n\tPR gcov-profile/93753\n\t* class.c (check_flexarrays): Tighten up a test for potential members\n\tof anonymous structs or unions.\n\ngcc/testsuite/ChangeLog:\n\n\tPR gcov-profile/93753\n\t* g++.dg/ext/flexary36.C: New test.\n\t* g++.dg/lto/pr93166_0.C: Make struct with flexarray valid.", "tree": {"sha": "93af137ea1444ac1f140c538a9ed78a673edc692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93af137ea1444ac1f140c538a9ed78a673edc692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbfba41e95d1d93b17e907b7f516b52ed3a3c415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfba41e95d1d93b17e907b7f516b52ed3a3c415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbfba41e95d1d93b17e907b7f516b52ed3a3c415", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfba41e95d1d93b17e907b7f516b52ed3a3c415/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e58988061f4175896de11af0caf9bdd48c9b046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e58988061f4175896de11af0caf9bdd48c9b046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e58988061f4175896de11af0caf9bdd48c9b046"}], "stats": {"total": 139, "additions": 138, "deletions": 1}, "files": [{"sha": "a9c0f1a8ecfa925347cbfe1120ca0d31fa192c90", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfba41e95d1d93b17e907b7f516b52ed3a3c415/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfba41e95d1d93b17e907b7f516b52ed3a3c415/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dbfba41e95d1d93b17e907b7f516b52ed3a3c415", "patch": "@@ -1,3 +1,9 @@\n+2020-02-21  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR gcov-profile/93753\n+\t* class.c (check_flexarrays): Tighten up a test for potential members\n+\tof anonymous structs or unions.\n+\n 2020-02-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/93801"}, {"sha": "772134df5fc54918aa42e1ac9c70848ff0f27f21", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfba41e95d1d93b17e907b7f516b52ed3a3c415/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfba41e95d1d93b17e907b7f516b52ed3a3c415/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=dbfba41e95d1d93b17e907b7f516b52ed3a3c415", "patch": "@@ -7142,6 +7142,8 @@ check_flexarrays (tree t, flexmems_t *fmem /* = NULL */,\n   /* Is the type unnamed (and therefore a member of it potentially\n      an anonymous struct or union)?  */\n   bool maybe_anon_p = TYPE_UNNAMED_P (t);\n+  if (tree ctx = maybe_anon_p ? TYPE_CONTEXT (t) : NULL_TREE)\n+    maybe_anon_p = RECORD_OR_UNION_TYPE_P (ctx);\n \n   /* Search the members of the current (possibly derived) class, skipping\n      unnamed structs and unions since those could be anonymous.  */"}, {"sha": "fe9362434acc71b38428543abb4cc9fd5026b920", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfba41e95d1d93b17e907b7f516b52ed3a3c415/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfba41e95d1d93b17e907b7f516b52ed3a3c415/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dbfba41e95d1d93b17e907b7f516b52ed3a3c415", "patch": "@@ -1,3 +1,9 @@\n+2020-02-21  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR gcov-profile/93753\n+\t* g++.dg/ext/flexary36.C: New test.\n+\t* g++.dg/lto/pr93166_0.C: Make struct with flexarray valid.\n+\n 2020-02-21  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* gcc.target/arm/simd/vmmla_1.c: New test."}, {"sha": "5bb827cfd0e0143417a8c20a8f31aa4d17dfadd4", "filename": "gcc/testsuite/g++.dg/ext/flexary36.C", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfba41e95d1d93b17e907b7f516b52ed3a3c415/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfba41e95d1d93b17e907b7f516b52ed3a3c415/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary36.C?ref=dbfba41e95d1d93b17e907b7f516b52ed3a3c415", "patch": "@@ -0,0 +1,123 @@\n+/* PR c++/93753 - ICE on a flexible array followed by a member in\n+   an anonymous struct with an initializer\n+   { dg-do compile }\n+   { dg-options \"-Wall -Wno-unused-variable\" } */\n+\n+struct {\n+  int a[];          // { dg-error \"flexible array member '<unnamed struct>::a' not at end of 'struct<unnamed>'\" }\n+  int b;\n+} ax;\n+\n+struct {\n+  int a[];          // { dg-error \"flexible array member '<unnamed struct>::a' not at end of 'struct<unnamed>'\" }\n+  int b;\n+} bx = { };\n+\n+struct {\n+  int a[];          // { dg-error \"flexible array member '<unnamed struct>::a' not at end of 'struct<unnamed>'\" }\n+  int b;\n+} cx = { 0 };\n+\n+struct {\n+  int a[];          // { dg-error \"flexible array member '<unnamed struct>::a' not at end of 'struct<unnamed>'\" }\n+  int b;\n+} dx = { 1 };\n+\n+\n+union {\n+  int a[];          // { dg-error \"flexible array member in union\" }\n+  int b;\n+} du = { 1 };\n+\n+\n+struct A {\n+  int a[];          // { dg-error \"flexible array member 'A::a' not at end of 'struct A'\" }\n+  int b;\n+} a;\n+\n+struct B {\n+  int a[];          // { dg-error \"flexible array member 'B::a' not at end of 'struct B'\" }\n+  int b;\n+} b = { };\n+\n+struct C {\n+  int a[];          // { dg-error \"flexible array member 'C::a' not at end of 'struct C'\" }\n+  int b;\n+} c = { 0 };\n+\n+struct D {\n+  int a[];          // { dg-error \"flexible array member 'D::a' not at end of 'struct D'\" }\n+  int b;\n+} d = { 1 };\n+\n+\n+struct E {\n+  struct {\n+    int a[];        // { dg-error \" not at end \" }\n+    int b;\n+  } e = { 1 };      // { dg-error \"non-static initialization of a flexible array member\" }\n+};\n+\n+struct G {\n+  struct {\n+    int a[];        // { dg-error \" not at end \" }\n+    int b;\n+  };\n+} g = { 1 };        // { dg-error \"initialization of flexible array member in a nested context\" }\n+\n+struct H {\n+  int i;\n+  struct {\n+    int a[];        // { dg-error \" not at end \" }\n+    int b;\n+  };\n+} h = { 1 };\n+\n+namespace {\n+\n+struct {\n+  int a[];          // { dg-error \" not at end of \" }\n+  int b;\n+} ax;\n+\n+struct {\n+  int a[];          // { dg-error \" not at end \" }\n+  int b;\n+} bx = { };\n+\n+struct {\n+  int a[];          // { dg-error \" not at end \" }\n+  int b;\n+} cx = { 0 };\n+\n+struct {\n+  int a[];          // { dg-error \" not at end \" }\n+  int b;\n+} dx = { 1 };\n+\n+\n+struct A {\n+  int a[];          // { dg-error \" not at end of 'struct {anonymous}::A'\" }\n+  int b;\n+} a;\n+\n+struct B {\n+  int a[];          // { dg-error \" not at end of 'struct {anonymous}::B'\" }\n+  int b;\n+} b = { };\n+\n+struct C {\n+  int a[];          // { dg-error \" not at end of 'struct {anonymous}::C'\" }\n+  int b;\n+} c = { 0 };\n+\n+struct D {\n+  int a[];          // { dg-error \" not at end of 'struct {anonymous}::D'\" }\n+  int b;\n+} d = { 1 };\n+\n+}\n+\n+// { dg-prune-output \"unnamed type with no linkage used to declare variable\" }\n+// { dg-prune-output \"non-static data member initializers\" }\n+// { dg-prune-output \"extended initializer lists\" }"}, {"sha": "a83ba6e0400c90c6621c5a3b3c2d1f147810486d", "filename": "gcc/testsuite/g++.dg/lto/pr93166_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfba41e95d1d93b17e907b7f516b52ed3a3c415/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr93166_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfba41e95d1d93b17e907b7f516b52ed3a3c415/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr93166_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr93166_0.C?ref=dbfba41e95d1d93b17e907b7f516b52ed3a3c415", "patch": "@@ -109,7 +109,7 @@ public:\n   QSignalMapper *m_sortSignalMapper;\n };\n struct {\n-  int data[];\n+  int n, data[];\n } b;\n unsigned c[]{};\n void TreeView::qt_static_metacall(QObject *p1, QMetaObject::Call, int,"}]}