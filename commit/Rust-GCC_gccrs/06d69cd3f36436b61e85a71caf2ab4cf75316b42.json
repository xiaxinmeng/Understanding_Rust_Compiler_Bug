{"sha": "06d69cd3f36436b61e85a71caf2ab4cf75316b42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZkNjljZDNmMzY0MzZiNjFlODVhNzFjYWYyYWI0Y2Y3NTMxNmI0Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-14T07:41:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-14T07:41:21Z"}, "message": "alpha.h (PROMOTE_MODE): Don't promote vector types.\n\n        * config/alpha/alpha.h (PROMOTE_MODE): Don't promote vector types.\n        * config/alpha/alpha.c (function_value): Use PROMOTE_MODE.\n\nFrom-SVN: r85989", "tree": {"sha": "f65ee46abc8fdcc78833bb133081242356b6efb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f65ee46abc8fdcc78833bb133081242356b6efb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06d69cd3f36436b61e85a71caf2ab4cf75316b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d69cd3f36436b61e85a71caf2ab4cf75316b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d69cd3f36436b61e85a71caf2ab4cf75316b42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d69cd3f36436b61e85a71caf2ab4cf75316b42/comments", "author": null, "committer": null, "parents": [{"sha": "1c5192e40c0aa1c8e4f48d0ee0e5d303c72012b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5192e40c0aa1c8e4f48d0ee0e5d303c72012b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c5192e40c0aa1c8e4f48d0ee0e5d303c72012b4"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "21ae7f928e22d79a1130e13f9f1aefe36b92f884", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d69cd3f36436b61e85a71caf2ab4cf75316b42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d69cd3f36436b61e85a71caf2ab4cf75316b42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06d69cd3f36436b61e85a71caf2ab4cf75316b42", "patch": "@@ -1,3 +1,8 @@\n+2004-08-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.h (PROMOTE_MODE): Don't promote vector types.\n+\t* config/alpha/alpha.c (function_value): Use PROMOTE_MODE.\n+\n 2004-08-13  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.md (call_1, sibcall_1, call_1_rex64): Use Pmode"}, {"sha": "9238ab61d75bec7f59492f821e4f6afab93716f9", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d69cd3f36436b61e85a71caf2ab4cf75316b42/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d69cd3f36436b61e85a71caf2ab4cf75316b42/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=06d69cd3f36436b61e85a71caf2ab4cf75316b42", "patch": "@@ -5160,7 +5160,7 @@ rtx\n function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n \t\tenum machine_mode mode)\n {\n-  unsigned int regnum;\n+  unsigned int regnum, dummy;\n   enum mode_class class;\n \n #ifdef ENABLE_CHECKING\n@@ -5175,8 +5175,7 @@ function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n   switch (class)\n     {\n     case MODE_INT:\n-      /* Do the same thing as PROMOTE_MODE.  */\n-      mode = DImode;\n+      PROMOTE_MODE (mode, dummy, valtype);\n       /* FALLTHRU */\n \n     case MODE_COMPLEX_INT:"}, {"sha": "d2ab9332289ed7fa3144df215e13ed5f44570e0b", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d69cd3f36436b61e85a71caf2ab4cf75316b42/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d69cd3f36436b61e85a71caf2ab4cf75316b42/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=06d69cd3f36436b61e85a71caf2ab4cf75316b42", "patch": "@@ -471,16 +471,22 @@ extern const char *alpha_tls_size_string; /* For -mtls-size= */\n    type, but kept valid in the wider mode.  The signedness of the\n    extension may differ from that of the type.\n \n-   For Alpha, we always store objects in a full register.  32-bit objects\n-   are always sign-extended, but smaller objects retain their signedness.  */\n-\n-#define PROMOTE_MODE(MODE,UNSIGNEDP,TYPE)  \\\n-  if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n-      && GET_MODE_SIZE (MODE) < UNITS_PER_WORD)\t\\\n-    {\t\t\t\t\t\t\\\n-      if ((MODE) == SImode)\t\t\t\\\n-\t(UNSIGNEDP) = 0;\t\t\t\\\n-      (MODE) = DImode;\t\t\t\t\\\n+   For Alpha, we always store objects in a full register.  32-bit integers\n+   are always sign-extended, but smaller objects retain their signedness.\n+\n+   Note that small vector types can get mapped onto integer modes at the\n+   whim of not appearing in alpha-modes.def.  We never promoted these\n+   values before; don't do so now that we've trimed the set of modes to\n+   those actually implemented in the backend.  */\n+\n+#define PROMOTE_MODE(MODE,UNSIGNEDP,TYPE)\t\t\t\\\n+  if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\t\t\\\n+      && (TYPE == NULL || TREE_CODE (TYPE) != VECTOR_TYPE)\t\\\n+      && GET_MODE_SIZE (MODE) < UNITS_PER_WORD)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if ((MODE) == SImode)\t\t\t\t\t\\\n+\t(UNSIGNEDP) = 0;\t\t\t\t\t\\\n+      (MODE) = DImode;\t\t\t\t\t\t\\\n     }\n \n /* Define this if most significant bit is lowest numbered"}]}