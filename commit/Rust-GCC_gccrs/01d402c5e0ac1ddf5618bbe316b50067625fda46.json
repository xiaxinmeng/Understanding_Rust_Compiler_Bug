{"sha": "01d402c5e0ac1ddf5618bbe316b50067625fda46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFkNDAyYzVlMGFjMWRkZjU2MThiYmUzMTZiNTAwNjc2MjVmZGE0Ng==", "commit": {"author": {"name": "Eugene Rozenfeld", "email": "erozen@microsoft.com", "date": "2021-07-01T23:21:36Z"}, "committer": {"name": "Eugene Rozenfeld", "email": "erozen@microsoft.com", "date": "2021-07-02T06:30:14Z"}, "message": "Update gen_autofdo_event.py and gcc-auto-profile.\n\ngen_autofdo_event.py was stumbling on models with stepping so\nI updated the script to handle this case similar to the code in\nhttps://github.com/andikleen/pmu-tools/blob/c6a5f63aede19def8886d6a8b74d7a55c38ca947/event_download.py\n\nThe second change was to tolerate cases when the CPU supports PEBS but the\nperf command with /p fails. This can happen in, e.g., a virtual machine.\n\nI regenerated gcc-auto-profile using the updated script.\n\ncontrib/ChangeLog:\n\n\t* gen_autofdo_event.py: handle stepping, non-working PEBS\n\ngcc/ChangeLog:\n\n\t* config/i386/gcc-auto-profile: regenerate", "tree": {"sha": "4a0ba3dcc78f61fc407651554c59706cb36c98c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a0ba3dcc78f61fc407651554c59706cb36c98c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01d402c5e0ac1ddf5618bbe316b50067625fda46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d402c5e0ac1ddf5618bbe316b50067625fda46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d402c5e0ac1ddf5618bbe316b50067625fda46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d402c5e0ac1ddf5618bbe316b50067625fda46/comments", "author": {"login": "erozenfeld", "id": 10624223, "node_id": "MDQ6VXNlcjEwNjI0MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/10624223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erozenfeld", "html_url": "https://github.com/erozenfeld", "followers_url": "https://api.github.com/users/erozenfeld/followers", "following_url": "https://api.github.com/users/erozenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/erozenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/erozenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erozenfeld/subscriptions", "organizations_url": "https://api.github.com/users/erozenfeld/orgs", "repos_url": "https://api.github.com/users/erozenfeld/repos", "events_url": "https://api.github.com/users/erozenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/erozenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erozenfeld", "id": 10624223, "node_id": "MDQ6VXNlcjEwNjI0MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/10624223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erozenfeld", "html_url": "https://github.com/erozenfeld", "followers_url": "https://api.github.com/users/erozenfeld/followers", "following_url": "https://api.github.com/users/erozenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/erozenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/erozenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erozenfeld/subscriptions", "organizations_url": "https://api.github.com/users/erozenfeld/orgs", "repos_url": "https://api.github.com/users/erozenfeld/repos", "events_url": "https://api.github.com/users/erozenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/erozenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73494401241b183ca188954a035734fcc53d97de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73494401241b183ca188954a035734fcc53d97de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73494401241b183ca188954a035734fcc53d97de"}], "stats": {"total": 95, "additions": 71, "deletions": 24}, "files": [{"sha": "1eb6f1d6d85364382192910f7078143b0cf61690", "filename": "contrib/gen_autofdo_event.py", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d402c5e0ac1ddf5618bbe316b50067625fda46/contrib%2Fgen_autofdo_event.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d402c5e0ac1ddf5618bbe316b50067625fda46/contrib%2Fgen_autofdo_event.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgen_autofdo_event.py?ref=01d402c5e0ac1ddf5618bbe316b50067625fda46", "patch": "@@ -46,20 +46,29 @@\n \n eventmap = collections.defaultdict(list)\n \n-def get_cpu_str():\n-    with open('/proc/cpuinfo', 'r') as c:\n-        vendor, fam, model = None, None, None\n-        for j in c:\n-            n = j.split()\n-            if n[0] == 'vendor_id':\n-                vendor = n[2]\n-            elif n[0] == 'model' and n[1] == ':':\n-                model = int(n[2])\n-            elif n[0] == 'cpu' and n[1] == 'family':\n-                fam = int(n[3])\n-            if vendor and fam and model:\n-                return \"%s-%d-%X\" % (vendor, fam, model), model\n-    return None, None\n+def get_cpustr():\n+    cpuinfo = os.getenv(\"CPUINFO\")\n+    if cpuinfo is None:\n+        cpuinfo = '/proc/cpuinfo'\n+    f = open(cpuinfo, 'r')\n+    cpu = [None, None, None, None]\n+    for j in f:\n+        n = j.split()\n+        if n[0] == 'vendor_id':\n+            cpu[0] = n[2]\n+        elif n[0] == 'model' and n[1] == ':':\n+            cpu[2] = int(n[2])\n+        elif n[0] == 'cpu' and n[1] == 'family':\n+            cpu[1] = int(n[3])\n+        elif n[0] == 'stepping' and n[1] == ':':\n+            cpu[3] = int(n[2])\n+        if all(v is not None for v in cpu):\n+            break\n+    # stepping for SKX only\n+    stepping = cpu[0] == \"GenuineIntel\" and cpu[1] == 6 and cpu[2] == 0x55\n+    if stepping:\n+        return \"%s-%d-%X-%X\" % tuple(cpu)\n+    return \"%s-%d-%X\" % tuple(cpu)[:3]\n \n def find_event(eventurl, model):\n     print >>sys.stderr, \"Downloading\", eventurl\n@@ -81,7 +90,7 @@ def find_event(eventurl, model):\n     return found\n \n if not args.all:\n-    cpu, model = get_cpu_str()\n+    cpu = get_cpu_str()\n     if not cpu:\n         sys.exit(\"Unknown CPU type\")\n \n@@ -94,7 +103,8 @@ def find_event(eventurl, model):\n     n = j.rstrip().split(',')\n     if len(n) >= 4 and (args.all or n[0] == cpu) and n[3] == \"core\":\n         if args.all:\n-            vendor, fam, model = n[0].split(\"-\")\n+            components = n[0].split(\"-\")\n+            model = components[2]\n             model = int(model, 16)\n         cpufound += 1\n         found += find_event(baseurl + n[2], model)\n@@ -146,7 +156,17 @@ def find_event(eventurl, model):\n echo >&2 \"Unknown CPU. Run contrib/gen_autofdo_event.py --all --script to update script.\"\n \texit 1 ;;'''\n     print \"esac\"\n-    print 'exec perf record -e $E -b \"$@\"'\n+    print \"set -x\"\n+    print 'if ! perf record -e $E -b \"$@\" ; then'\n+    print '  # PEBS may not actually be working even if the processor supports it'\n+    print '  # (e.g., in a virtual machine). Trying to run without /p.'\n+    print '  set +x'\n+    print '  echo >&2 \"Retrying without /p.\"'\n+    print '  E=\"$(echo \"${E}\" | sed -e \\'s/\\/p/\\//\\')\"'\n+    print '  set -x'\n+    print '  exec perf record -e $E -b \"$@\"'\n+    print ' set +x'\n+    print 'fi'\n \n if cpufound == 0 and not args.all:\n     sys.exit('CPU %s not found' % cpu)"}, {"sha": "56f64cbff1f5cb2e19bf66a7d4cc100219378381", "filename": "gcc/config/i386/gcc-auto-profile", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d402c5e0ac1ddf5618bbe316b50067625fda46/gcc%2Fconfig%2Fi386%2Fgcc-auto-profile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d402c5e0ac1ddf5618bbe316b50067625fda46/gcc%2Fconfig%2Fi386%2Fgcc-auto-profile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgcc-auto-profile?ref=01d402c5e0ac1ddf5618bbe316b50067625fda46", "patch": "@@ -1,7 +1,7 @@\n #!/bin/sh\n-# profile workload for gcc profile feedback (autofdo) using Linux perf\n-# auto generated. to regenerate for new CPUs run\n-# contrib/gen_autofdo_event.py --shell --all in gcc source\n+# Profile workload for gcc profile feedback (autofdo) using Linux perf.\n+# Auto generated. To regenerate for new CPUs run\n+# contrib/gen_autofdo_event.py --script --all in gcc source\n \n # usages:\n # gcc-auto-profile program             (profile program and children)\n@@ -10,7 +10,7 @@\n # gcc-auto-profile --kernel -a sleep X (profile kernel)\n # gcc-auto-profile --all -a sleep X    (profile kernel and user space)\n \n-# identify branches taken event for CPU\n+# Identify branches taken event for CPU.\n #\n \n FLAGS=u\n@@ -37,7 +37,12 @@ case `egrep -q \"^cpu family\\s*: 6\" /proc/cpuinfo &&\n   egrep \"^model\\s*:\" /proc/cpuinfo | head -n1` in\n model*:\\ 55|\\\n model*:\\ 77|\\\n-model*:\\ 76) E=\"cpu/event=0xC4,umask=0xFE/p$FLAGS\" ;;\n+model*:\\ 76|\\\n+model*:\\ 92|\\\n+model*:\\ 95|\\\n+model*:\\ 87|\\\n+model*:\\ 133|\\\n+model*:\\ 122) E=\"cpu/event=0xC4,umask=0xFE/p$FLAGS\" ;;\n model*:\\ 42|\\\n model*:\\ 45|\\\n model*:\\ 58|\\\n@@ -48,9 +53,16 @@ model*:\\ 70|\\\n model*:\\ 63|\\\n model*:\\ 61|\\\n model*:\\ 71|\\\n+model*:\\ 79|\\\n model*:\\ 86|\\\n model*:\\ 78|\\\n-model*:\\ 94) E=\"cpu/event=0xC4,umask=0x20/p$FLAGS\" ;;\n+model*:\\ 94|\\\n+model*:\\ 142|\\\n+model*:\\ 158|\\\n+model*:\\ 165|\\\n+model*:\\ 166|\\\n+model*:\\ 85|\\\n+model*:\\ 85) E=\"cpu/event=0xC4,umask=0x20/p$FLAGS\" ;;\n model*:\\ 46|\\\n model*:\\ 30|\\\n model*:\\ 31|\\\n@@ -63,8 +75,23 @@ model*:\\ 38|\\\n model*:\\ 39|\\\n model*:\\ 54|\\\n model*:\\ 53) E=\"cpu/event=0x88,umask=0x41/p$FLAGS\" ;;\n+model*:\\ 126|\\\n+model*:\\ 140|\\\n+model*:\\ 141|\\\n+model*:\\ 106|\\\n+model*:\\ 108) E=\"cpu/event=0xc4,umask=0x20/p$FLAGS\" ;;\n *)\n echo >&2 \"Unknown CPU. Run contrib/gen_autofdo_event.py --all --script to update script.\"\n \texit 1 ;;\n esac\n-exec perf record -e $E -b \"$@\"\n+set -x\n+if ! perf record -e $E -b \"$@\" ; then\n+  # PEBS may not actually be working even if the processor supports it\n+  # (e.g., in a virtual machine). Trying to run without /p.\n+  set +x\n+  echo >&2 \"Retrying without /p.\"\n+  E=\"$(echo \"${E}\" | sed -e 's/\\/p/\\//')\"\n+  set -x\n+  exec perf record -e $E -b \"$@\"\n+ set +x\n+fi"}]}