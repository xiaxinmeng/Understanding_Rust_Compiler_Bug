{"sha": "2aa35c631298dc5e870cf7d44b069b4fc02b6dd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhMzVjNjMxMjk4ZGM1ZTg3MGNmN2Q0NGIwNjliNGZjMDJiNmRkMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-03-13T17:12:13Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-03-13T17:12:13Z"}, "message": "Add static constructor/destructor support to Windows NT\n\nFrom-SVN: r11524", "tree": {"sha": "af186fed6f970b152a84b4cb7ed75b61f301be2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af186fed6f970b152a84b4cb7ed75b61f301be2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3/comments", "author": null, "committer": null, "parents": [{"sha": "5bfaaedad796941281dc9e736c7f638c3f9f5690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bfaaedad796941281dc9e736c7f638c3f9f5690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bfaaedad796941281dc9e736c7f638c3f9f5690"}], "stats": {"total": 253, "additions": 217, "deletions": 36}, "files": [{"sha": "adca36d4fd757b2061b94720ce75245fa8e4f08a", "filename": "gcc/config/rs6000/cygwin32.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3/gcc%2Fconfig%2Frs6000%2Fcygwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3/gcc%2Fconfig%2Frs6000%2Fcygwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcygwin32.h?ref=2aa35c631298dc5e870cf7d44b069b4fc02b6dd3", "patch": "@@ -50,15 +50,16 @@ Boston, MA 02111-1307, USA. */\n \n \n #undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{!:crt0%O%s}\"\n+#define STARTFILE_SPEC \"crti%O%s %{!:crt0%O%s}\"\n+\n+#undef\tENDFILE_SPEC\n+#define\tENDFILE_SPEC \"crtn%O%s\"\n \n #define PTRDIFF_TYPE \"int\"\n #define WCHAR_UNSIGNED 1\n #define WCHAR_TYPE_SIZE 16\n #define WCHAR_TYPE \"short unsigned int\"\n \n-/* XXX set up stack probing */\n-\n #define DBX_DEBUGGING_INFO \n #undef SDB_DEBUGGING_INFO \n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG"}, {"sha": "67ca9564abff96b8c95633324d7fc66e03c5f588", "filename": "gcc/config/rs6000/nt-ci.asm", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3/gcc%2Fconfig%2Frs6000%2Fnt-ci.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3/gcc%2Fconfig%2Frs6000%2Fnt-ci.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fnt-ci.asm?ref=2aa35c631298dc5e870cf7d44b069b4fc02b6dd3", "patch": "@@ -0,0 +1,48 @@\n+# crti.s for Windows NT\n+\n+#   Copyright (C) 1996 Free Software Foundation, Inc.\n+#   Written By Michael Meissner\n+# \n+# This file is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published by the\n+# Free Software Foundation; either version 2, or (at your option) any\n+# later version.\n+# \n+# In addition to the permissions in the GNU General Public License, the\n+# Free Software Foundation gives you unlimited permission to link the\n+# compiled version of this file with other programs, and to distribute\n+# those programs without any restriction coming from the use of this\n+# file.  (The General Public License restrictions do apply in other\n+# respects; for example, they cover modification of the file, and\n+# distribution when not linked into another program.)\n+# \n+# This file is distributed in the hope that it will be useful, but\n+# WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+# \n+#    As a special exception, if you link this library with files\n+#    compiled with GCC to produce an executable, this does not cause\n+#    the resulting executable to be covered by the GNU General Public License.\n+#    This exception does not however invalidate any other reasons why\n+#    the executable file might be covered by the GNU General Public License.\n+# \n+\n+# This file just supplies labeled starting points for the static constructors\n+# and destructors.  It is linked in first before other modules.\n+ \n+\t.file\t\"crti.s\"\n+\t.ident\t\"GNU C crti.s\"\n+\n+\t.section .ctors,\"w\"\n+\t.globl\t__CTOR_LIST__\n+__CTOR_LIST__:\n+\n+\t.section .dtors,\"w\"\n+\t.globl\t__DTOR_LIST__\n+__DTOR_LIST__:"}, {"sha": "dd6daf29b2ecc934b8ba8e7fb1c3aba3787aa928", "filename": "gcc/config/rs6000/nt-cn.asm", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3/gcc%2Fconfig%2Frs6000%2Fnt-cn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3/gcc%2Fconfig%2Frs6000%2Fnt-cn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fnt-cn.asm?ref=2aa35c631298dc5e870cf7d44b069b4fc02b6dd3", "patch": "@@ -0,0 +1,48 @@\n+# crtn.s for Windows NT\n+\n+#   Copyright (C) 1996 Free Software Foundation, Inc.\n+#   Written By Michael Meissner\n+# \n+# This file is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published by the\n+# Free Software Foundation; either version 2, or (at your option) any\n+# later version.\n+# \n+# In addition to the permissions in the GNU General Public License, the\n+# Free Software Foundation gives you unlimited permission to link the\n+# compiled version of this file with other programs, and to distribute\n+# those programs without any restriction coming from the use of this\n+# file.  (The General Public License restrictions do apply in other\n+# respects; for example, they cover modification of the file, and\n+# distribution when not linked into another program.)\n+# \n+# This file is distributed in the hope that it will be useful, but\n+# WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+# \n+#    As a special exception, if you link this library with files\n+#    compiled with GCC to produce an executable, this does not cause\n+#    the resulting executable to be covered by the GNU General Public License.\n+#    This exception does not however invalidate any other reasons why\n+#    the executable file might be covered by the GNU General Public License.\n+# \n+\n+# This file just supplies labeled ending points for the static constructors\n+# and destructors.  It is linked in last after other modules.\n+ \n+\t.file\t\"crtn.s\"\n+\t.ident\t\"GNU C crtn.s\"\n+\n+\t.section .ctors,\"w\"\n+\t.globl\t__CTOR_END__\n+__CTOR_END__:\n+\n+\t.section .dtors,\"w\"\n+\t.globl\t__DTOR_END__\n+__DTOR_END__:"}, {"sha": "d87f090ab22599de3a23794a35fa681a972f373a", "filename": "gcc/config/rs6000/t-winnt", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3/gcc%2Fconfig%2Frs6000%2Ft-winnt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3/gcc%2Fconfig%2Frs6000%2Ft-winnt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-winnt?ref=2aa35c631298dc5e870cf7d44b069b4fc02b6dd3", "patch": "@@ -1,15 +1,13 @@\n # Do not build libgcc1.\n-LIBGCC1 =\n+LIBGCC = stmp-crt\n+INSTALL_LIBGCC = install-crt\n CROSS_LIBGCC1 =\n \n EXTRA_HEADERS = $(srcdir)/ginclude/ppc-asm.h\n \n-# At present, we don't have a cross linker, so turn this off\n-LIBGCC1_TEST = \n-\n # These are really part of libgcc1, but this will cause them to be\n # built correctly, so... [taken from t-sparclite]\n-LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c ntstack.s\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c ntstack.S\n \n dp-bit.c: $(srcdir)/config/fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n@@ -18,5 +16,41 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#define FLOAT' > fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n \n-ntstack.s: $(srcdir)/config/rs6000/ntstack.asm\n-\tcat $(srcdir)/config/rs6000/ntstack.asm > ntstack.s\n+ntstack.S: $(srcdir)/config/rs6000/ntstack.asm\n+\tcat $(srcdir)/config/rs6000/ntstack.asm > ntstack.S\n+\n+# For NT we build crti.o and crtn.o which serve to add begin and\n+# end labels for the static constructors and destructors.\n+\n+# Assemble startup files.\n+crti.s: $(srcdir)/config/rs6000/nt-ci.asm\n+\tcat $(srcdir)/config/rs6000/nt-ci.asm >crti.s\n+\n+crtn.s: $(srcdir)/config/rs6000/nt-cn.asm\n+\tcat $(srcdir)/config/rs6000/nt-cn.asm >crtn.s\n+\n+# Build multiple copies of crt{i,n}.o, one for each target switch.\n+stmp-crt: crti.s crtn.s $(GCC_PASSES) stmp-multilib config.status\n+\tfor i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \\\n+\t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n+\t  flags=`echo $$i | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`; \\\n+\t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n+\t    LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS) $${flags}\" \\\n+\t    dir=\"$${dir}\" stmp-crt-sub; \\\n+\t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\tdone\n+\ttouch stmp-crt\n+\n+# Subroutine of stmp-crt so make -n works.\n+stmp-crt-sub:\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -c -o $(dir)/crti.o crti.s\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -c -o $(dir)/crtn.o crtn.s\n+\n+# Install multiple versions of crt[in].o\n+install-crt: stmp-crt install-dir install-multilib\n+\tfor i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \\\n+\t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n+\t  rm -f $(libsubdir)/$${dir}/crt[in].o; \\\n+\t  $(INSTALL_DATA) $${dir}/crti.o $(libsubdir)/$${dir}/crti.o; \\\n+\t  $(INSTALL_DATA) $${dir}/crtn.o $(libsubdir)/$${dir}/crtn.o; \\\n+\tdone"}, {"sha": "1d3d473dd046d56ca2abbef1482ff8116d6170e4", "filename": "gcc/config/rs6000/win-nt.h", "status": "modified", "additions": 76, "deletions": 26, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3/gcc%2Fconfig%2Frs6000%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa35c631298dc5e870cf7d44b069b4fc02b6dd3/gcc%2Fconfig%2Frs6000%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fwin-nt.h?ref=2aa35c631298dc5e870cf7d44b069b4fc02b6dd3", "patch": "@@ -128,32 +128,6 @@ Boston, MA 02111-1307, USA.  */\n   output_file_directive (FILE, main_input_filename);\t\t\\\n }\n \n-/* Define the extra sections we need.  We define three: one is the read-only\n-   data section which is used for constants.  This is a csect whose name is\n-   derived from the name of the input file.  The second is for initialized\n-   global variables.  This is a csect whose name is that of the variable.\n-   The third is the TOC.  */\n-\n-#undef SELECT_SECTION\n-\n-#undef\tREADONLY_DATA_SECTION\n-#undef\tEXTRA_SECTIONS\n-#define EXTRA_SECTIONS toc\n-\n-/* Define the routines to implement these extra sections.  */\n-\n-#undef\tEXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\\\n-toc_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n-}\n-\n-\n-#undef SELECT_RTX_SECTION\n-#undef ASM_DECLARE_FUNCTION_NAME\n-\n \f\n /* This says how to output an assembler line\n    to define a global common symbol.  */\n@@ -250,6 +224,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n }\n \n \n+#undef\tASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE,NAME,DECL)\t\t\\\n {                                                               \\\n   if (TREE_PUBLIC (DECL))\t\t\t\t\t\\\n@@ -339,6 +314,81 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP \"\\t.section .bss\"\n \n+/* Define the extra sections we need.  We define a dummy TOC section,\n+   plus sections to hold the list of static constructors (.ctors) and\n+   destructors (.dtors).  */\n+\n+#undef\tREADONLY_DATA_SECTION\n+#undef\tEXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_toc, in_ctors, in_dtors\n+\n+/* Define the routines to implement these extra sections.  */\n+\n+#undef\tEXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  TOC_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n+\n+#define TOC_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+toc_section ()\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors\"\n+#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_ctors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors\"\n+#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_dtors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#undef SELECT_SECTION\n+#undef SELECT_RTX_SECTION\n+\n+/* Make sure __main gets called */\n+#define INVOKE__main 1\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#undef\tASM_OUTPUT_CONSTRUCTOR\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ctors_section ();\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t.ualong \");\t\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#undef\tASM_OUTPUT_DESTRUCTOR\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    dtors_section ();                   \t\t\t\t\\\n+    fprintf (FILE, \"\\t.ualong \");\t\t\t\t\t\\\n+    assemble_name (FILE, NAME);              \t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+\n /* Text to write out after a CALL that may be replaced by glue code by\n    the loader.  The motorola asm demands that, for dll support, a .znop\n    be issued after a bl instruction, and the symbol on the .znop is the"}]}