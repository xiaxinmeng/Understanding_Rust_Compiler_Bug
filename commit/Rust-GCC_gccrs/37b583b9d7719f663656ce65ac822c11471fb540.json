{"sha": "37b583b9d7719f663656ce65ac822c11471fb540", "node_id": "C_kwDOANBUbNoAKDM3YjU4M2I5ZDc3MTlmNjYzNjU2Y2U2NWFjODIyYzExNDcxZmI1NDA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-28T07:36:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-28T09:34:25Z"}, "message": "tree-optimization/104700 - adjust constant handling in PRE\n\nThe following refactors find_or_generate_expression to more properly\nhandle constant valued SSA names thereby simplifying the code and\navoiding ICEing after the last change to NARY processing.\n\n2022-02-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104700\n\t* tree-ssa-pre.cc (get_or_alloc_expr_for): Remove and inline\n\tinto ...\n\t(find_or_generate_expression): ... here, simplifying code.\n\n\t* gcc.dg/pr104700-2.c: New testcase.\n\t* gcc.dg/torture/pr104700-1.c: Likewise.", "tree": {"sha": "688009606fb37efc520d70c7b49e75c4154c1c64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/688009606fb37efc520d70c7b49e75c4154c1c64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b583b9d7719f663656ce65ac822c11471fb540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b583b9d7719f663656ce65ac822c11471fb540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b583b9d7719f663656ce65ac822c11471fb540", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b583b9d7719f663656ce65ac822c11471fb540/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f485b0ed7d06482d2f212ff0d9f5519a4f2c9a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f485b0ed7d06482d2f212ff0d9f5519a4f2c9a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f485b0ed7d06482d2f212ff0d9f5519a4f2c9a15"}], "stats": {"total": 85, "additions": 70, "deletions": 15}, "files": [{"sha": "e0759cca70f12946b888a548195c0bd0558f6b18", "filename": "gcc/testsuite/gcc.dg/pr104700-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b583b9d7719f663656ce65ac822c11471fb540/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104700-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b583b9d7719f663656ce65ac822c11471fb540/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104700-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104700-2.c?ref=37b583b9d7719f663656ce65ac822c11471fb540", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-ccp -fno-tree-dce -fno-tree-vrp\" } */\n+\n+int a, b;\n+int main() {\n+  int c = 2, d, e = 0;\n+  if (a)\n+    e = 2;\n+  int f, g = -(1L | (e && f && f & e));\n+  if (g)\n+  L:\n+    g = c;\n+  c = 0;\n+  d = e * g;\n+  if (d)\n+    goto L;\n+  while (e) {\n+    int i = (a && b) * i;\n+  }\n+  return 0;\n+}"}, {"sha": "7b864d6628b68d769650dff44b6327cc3f71cefb", "filename": "gcc/testsuite/gcc.dg/torture/pr104700-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b583b9d7719f663656ce65ac822c11471fb540/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104700-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b583b9d7719f663656ce65ac822c11471fb540/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104700-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104700-1.c?ref=37b583b9d7719f663656ce65ac822c11471fb540", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-pre\" } */\n+\n+int printf(const char *, ...);\n+int a, b, c = 2, d, e, *f, g;\n+void o() {\n+  unsigned h = 1;\n+  int j = -1, k, l = 1, m = 2, i;\n+  while (c < 2)\n+    ;\n+L1:\n+  k = h;\n+  h = -1;\n+  if (k < 2 && !c) {\n+    printf(\"%d\", k);\n+    goto L1;\n+  }\n+  if (!j)\n+    l = printf(\"0\");\n+  if (g)\n+    k = 0;\n+  if (a && k)\n+    goto L2;\n+  while (f) {\n+    m = a;\n+    d = i;\n+    i = e;\n+    f = &j;\n+  L2:\n+    if (d == l && !m)\n+      l = b;\n+  }\n+  unsigned *n[1] = {&h};\n+}\n+int main() {\n+  o();\n+  return 0;\n+}"}, {"sha": "ca034ff7153cb3615e61fc56cff3195db1592334", "filename": "gcc/tree-ssa-pre.cc", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b583b9d7719f663656ce65ac822c11471fb540/gcc%2Ftree-ssa-pre.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b583b9d7719f663656ce65ac822c11471fb540/gcc%2Ftree-ssa-pre.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.cc?ref=37b583b9d7719f663656ce65ac822c11471fb540", "patch": "@@ -1197,18 +1197,6 @@ get_or_alloc_expr_for_constant (tree constant)\n   return newexpr;\n }\n \n-/* Get or allocate a pre_expr for a piece of GIMPLE, and return it.\n-   Currently only supports constants and SSA_NAMES.  */\n-static pre_expr\n-get_or_alloc_expr_for (tree t)\n-{\n-  if (TREE_CODE (t) == SSA_NAME)\n-    return get_or_alloc_expr_for_name (t);\n-  else if (is_gimple_min_invariant (t))\n-    return get_or_alloc_expr_for_constant (t);\n-  gcc_unreachable ();\n-}\n-\n /* Return the folded version of T if T, when folded, is a gimple\n    min_invariant or an SSA name.  Otherwise, return T.  */\n \n@@ -2779,8 +2767,16 @@ create_component_ref_by_pieces (basic_block block, vn_reference_t ref,\n static tree\n find_or_generate_expression (basic_block block, tree op, gimple_seq *stmts)\n {\n-  pre_expr expr = get_or_alloc_expr_for (op);\n-  unsigned int lookfor = get_expr_value_id (expr);\n+  /* Constants are always leaders.  */\n+  if (is_gimple_min_invariant (op))\n+    return op;\n+\n+  gcc_assert (TREE_CODE (op) == SSA_NAME);\n+  vn_ssa_aux_t info = VN_INFO (op);\n+  unsigned int lookfor = info->value_id;\n+  if (value_id_constant_p (lookfor))\n+    return info->valnum;\n+\n   pre_expr leader = bitmap_find_leader (AVAIL_OUT (block), lookfor);\n   if (leader)\n     {\n@@ -2808,7 +2804,7 @@ find_or_generate_expression (basic_block block, tree op, gimple_seq *stmts)\n \t its operand values.  */\n       if (temp->kind == NARY)\n \treturn create_expression_by_pieces (block, temp, stmts,\n-\t\t\t\t\t    get_expr_type (expr));\n+\t\t\t\t\t    TREE_TYPE (op));\n     }\n \n   /* Defer.  */"}]}