{"sha": "07f49e855b50d06181b08aa2498e631be27e8055", "node_id": "C_kwDOANBUbNoAKDA3ZjQ5ZTg1NWI1MGQwNjE4MWIwOGFhMjQ5OGU2MzFiZTI3ZTgwNTU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-28T10:03:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-28T11:13:34Z"}, "message": "Use mark_block_for_update properly in insert_updated_phi_nodes_for\n\nThis makes sure to use mark_block_for_update when adding a block for\nrewriting in insert_updated_phi_nodes_for as otherwise stmt flags are not\ninitialized.\n\n2022-06-28  Richard Biener  <rguenther@suse.de>\n\n\t* tree-into-ssa.cc (insert_updated_phi_nodes_for): Use\n\tmark_block_for_update.\n\t(update_ssa): Adjust.", "tree": {"sha": "85c676da3e8967453f0a4a7f0605c7d6dcbbf0e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85c676da3e8967453f0a4a7f0605c7d6dcbbf0e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07f49e855b50d06181b08aa2498e631be27e8055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f49e855b50d06181b08aa2498e631be27e8055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f49e855b50d06181b08aa2498e631be27e8055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f49e855b50d06181b08aa2498e631be27e8055/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "198781144f33b0ef17dd2094580b5c77ad97d6e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198781144f33b0ef17dd2094580b5c77ad97d6e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/198781144f33b0ef17dd2094580b5c77ad97d6e8"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "f9655ce1a28fdb2d00ce54a71eeaa1a0091f320f", "filename": "gcc/tree-into-ssa.cc", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f49e855b50d06181b08aa2498e631be27e8055/gcc%2Ftree-into-ssa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f49e855b50d06181b08aa2498e631be27e8055/gcc%2Ftree-into-ssa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.cc?ref=07f49e855b50d06181b08aa2498e631be27e8055", "patch": "@@ -3109,7 +3109,7 @@ release_ssa_name_after_update_ssa (tree name)\n \n \n /* Insert new PHI nodes to replace VAR.  DFS contains dominance\n-   frontier information.  BLOCKS is the set of blocks to be updated.\n+   frontier information.\n \n    This is slightly different than the regular PHI insertion\n    algorithm.  The value of UPDATE_FLAGS controls how PHI nodes for\n@@ -3132,8 +3132,8 @@ release_ssa_name_after_update_ssa (tree name)\n      names is not pruned.  PHI nodes are inserted at every IDF block.  */\n \n static void\n-insert_updated_phi_nodes_for (tree var, bitmap_head *dfs, bitmap blocks,\n-                              unsigned update_flags)\n+insert_updated_phi_nodes_for (tree var, bitmap_head *dfs,\n+\t\t\t      unsigned update_flags)\n {\n   basic_block entry;\n   def_blocks *db;\n@@ -3197,16 +3197,16 @@ insert_updated_phi_nodes_for (tree var, bitmap_head *dfs, bitmap blocks,\n \n       /* FIXME, this is not needed if we are updating symbols.  We are\n \t already starting at the ENTRY block anyway.  */\n-      bitmap_ior_into (blocks, pruned_idf);\n       EXECUTE_IF_SET_IN_BITMAP (pruned_idf, 0, i, bi)\n \t{\n \t  edge e;\n \t  edge_iterator ei;\n \t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \n+\t  mark_block_for_update (bb);\n \t  FOR_EACH_EDGE (e, ei, bb->preds)\n \t    if (e->src->index >= 0)\n-\t      bitmap_set_bit (blocks, e->src->index);\n+\t      mark_block_for_update (e->src);\n \t}\n \n       insert_phi_nodes_for (var, pruned_idf, true);\n@@ -3475,14 +3475,12 @@ update_ssa (unsigned update_flags)\n \t  auto_sbitmap tmp (SBITMAP_SIZE (old_ssa_names));\n \t  bitmap_copy (tmp, old_ssa_names);\n \t  EXECUTE_IF_SET_IN_BITMAP (tmp, 0, i, sbi)\n-\t    insert_updated_phi_nodes_for (ssa_name (i), dfs, blocks_to_update,\n-\t                                  update_flags);\n+\t    insert_updated_phi_nodes_for (ssa_name (i), dfs, update_flags);\n \t}\n \n       symbols_to_rename.qsort (insert_updated_phi_nodes_compare_uids);\n       FOR_EACH_VEC_ELT (symbols_to_rename, i, sym)\n-\tinsert_updated_phi_nodes_for (sym, dfs, blocks_to_update,\n-\t                              update_flags);\n+\tinsert_updated_phi_nodes_for (sym, dfs, update_flags);\n \n       FOR_EACH_BB_FN (bb, cfun)\n \tbitmap_clear (&dfs[bb->index]);"}]}