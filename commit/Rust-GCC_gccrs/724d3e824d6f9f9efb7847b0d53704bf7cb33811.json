{"sha": "724d3e824d6f9f9efb7847b0d53704bf7cb33811", "node_id": "C_kwDOANBUbNoAKDcyNGQzZTgyNGQ2ZjlmOWVmYjc4NDdiMGQ1MzcwNGJmN2NiMzM4MTE", "commit": {"author": {"name": "Abdul Rafey", "email": "abdulrafeyq@gmail.com", "date": "2023-02-27T12:01:31Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-03-02T10:11:56Z"}, "message": "added support for printing HIR dump of functions, statements, arithematic/logical expressions and literals.\n\ngcc/rust/ChangeLog:\n\n\t* hir/rust-hir-dump.cc (Dump::go): support inner attrs, crate items and node mappings\n\t(Dump::visit): support functions, arith/logical exprs, let stmts and literals\n\nSigned-off-by: Abdul Rafey <abdulrafeyq@gmail.com>", "tree": {"sha": "876274d4bee345075df76b0c38014f557c3ed888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/876274d4bee345075df76b0c38014f557c3ed888"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/724d3e824d6f9f9efb7847b0d53704bf7cb33811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/724d3e824d6f9f9efb7847b0d53704bf7cb33811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/724d3e824d6f9f9efb7847b0d53704bf7cb33811", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/724d3e824d6f9f9efb7847b0d53704bf7cb33811/comments", "author": {"login": "00AR", "id": 96364226, "node_id": "U_kgDOBb5mwg", "avatar_url": "https://avatars.githubusercontent.com/u/96364226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/00AR", "html_url": "https://github.com/00AR", "followers_url": "https://api.github.com/users/00AR/followers", "following_url": "https://api.github.com/users/00AR/following{/other_user}", "gists_url": "https://api.github.com/users/00AR/gists{/gist_id}", "starred_url": "https://api.github.com/users/00AR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/00AR/subscriptions", "organizations_url": "https://api.github.com/users/00AR/orgs", "repos_url": "https://api.github.com/users/00AR/repos", "events_url": "https://api.github.com/users/00AR/events{/privacy}", "received_events_url": "https://api.github.com/users/00AR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d25dac7370289ef8e44f1f8370572aebac6e8e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d25dac7370289ef8e44f1f8370572aebac6e8e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d25dac7370289ef8e44f1f8370572aebac6e8e4"}], "stats": {"total": 271, "additions": 215, "deletions": 56}, "files": [{"sha": "d6b458b72d3ebb8c0d8a60ce1536c223d27f5d77", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 215, "deletions": 56, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724d3e824d6f9f9efb7847b0d53704bf7cb33811/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724d3e824d6f9f9efb7847b0d53704bf7cb33811/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=724d3e824d6f9f9efb7847b0d53704bf7cb33811", "patch": "@@ -26,31 +26,24 @@ Dump::Dump (std::ostream &stream) : stream (stream), indent (0) {}\n void\n Dump::go (HIR::Crate &crate)\n {\n-  stream << \"Crate\"\n-\t << \" \"\n-\t << \"{\" << std::endl;\n-  //\n-\n-  indent++;\n-  stream << std::string (indent, indent_char);\n-  stream << \"inner_attrs\"\n-\t << \":\"\n-\t << \" \"\n-\t << \"[\";\n-  for (auto &attr : crate.inner_attrs)\n-    stream << attr.as_string ();\n-  stream << \"]\"\n-\t << \",\" << std::endl;\n-  indent--;\n+  stream << \"Crate {\" << std::endl;\n+  // inner attributes\n+  if (!crate.inner_attrs.empty ())\n+    {\n+      indent++;\n+      stream << std::string (indent, indent_char);\n+      stream << \"inner_attrs: [\";\n+      for (auto &attr : crate.inner_attrs)\n+\tstream << attr.as_string ();\n+      stream << \"],\" << std::endl;\n+      indent--;\n+    }\n \n   indent++;\n   stream << std::string (indent, indent_char);\n   //\n \n-  stream << \"items\"\n-\t << \":\"\n-\t << \" \"\n-\t << \"[\";\n+  stream << \"items: [\";\n \n   stream << std::string (indent, indent_char);\n   for (const auto &item : crate.items)\n@@ -59,22 +52,17 @@ Dump::go (HIR::Crate &crate)\n       item->accept_vis (*this);\n     }\n   stream << std::string (indent, indent_char);\n-  stream << \"]\"\n-\t << \",\" << std::endl;\n+  stream << \"],\" << std::endl;\n   indent--;\n   //\n \n   indent++;\n   stream << std::string (indent, indent_char);\n-  stream << \"node_mappings\"\n-\t << \":\"\n-\t << \" \"\n-\t << \"[\";\n-  // TODO: print crate mapping attrs\n-  stream << \"]\" << std::endl;\n+  stream << \"node_mappings: \";\n+  stream << crate.get_mappings ().as_string ();\n   indent--;\n \n-  stream << \"}\" << std::endl;\n+  stream << \"\\n}\" << std::endl;\n }\n \n void\n@@ -108,11 +96,8 @@ Dump::visit (QualifiedPathInType &)\n void\n Dump::visit (LiteralExpr &literal_expr)\n {\n-  indent++;\n-  stream << std::string (indent, indent_char);\n-  stream << \"( \" + literal_expr.get_literal ().as_string () + \" (\"\n-\t      + literal_expr.get_mappings ().as_string () + \"))\";\n-  stream << \"\\n\";\n+  stream << literal_expr.get_literal ().as_string () << \" \"\n+\t << literal_expr.get_mappings ().as_string ();\n }\n void\n Dump::visit (BorrowExpr &)\n@@ -127,8 +112,56 @@ void\n Dump::visit (NegationExpr &)\n {}\n void\n-Dump::visit (ArithmeticOrLogicalExpr &)\n-{}\n+Dump::visit (ArithmeticOrLogicalExpr &aole)\n+{\n+  std::string operator_str;\n+  operator_str.reserve (1);\n+\n+  // which operator\n+  switch (aole.get_expr_type ())\n+    {\n+    case ArithmeticOrLogicalOperator::ADD:\n+      operator_str = \"+\";\n+      break;\n+    case ArithmeticOrLogicalOperator::SUBTRACT:\n+      operator_str = \"-\";\n+      break;\n+    case ArithmeticOrLogicalOperator::MULTIPLY:\n+      operator_str = \"*\";\n+      break;\n+    case ArithmeticOrLogicalOperator::DIVIDE:\n+      operator_str = \"/\";\n+      break;\n+    case ArithmeticOrLogicalOperator::MODULUS:\n+      operator_str = \"%\";\n+      break;\n+    case ArithmeticOrLogicalOperator::BITWISE_AND:\n+      operator_str = \"&\";\n+      break;\n+    case ArithmeticOrLogicalOperator::BITWISE_OR:\n+      operator_str = \"|\";\n+      break;\n+    case ArithmeticOrLogicalOperator::BITWISE_XOR:\n+      operator_str = \"^\";\n+      break;\n+    case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n+      operator_str = \"<<\";\n+      break;\n+    case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n+      operator_str = \">>\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+      break;\n+    }\n+\n+  aole.visit_lhs (*this);\n+  stream << \"\\n\";\n+  stream << std::string (indent, indent_char);\n+  stream << operator_str << \"\\n\";\n+  stream << std::string (indent, indent_char);\n+  aole.visit_rhs (*this);\n+}\n void\n Dump::visit (ComparisonExpr &)\n {}\n@@ -200,17 +233,34 @@ void\n Dump::visit (ClosureExpr &)\n {}\n void\n-Dump::visit (BlockExpr &)\n+Dump::visit (BlockExpr &block_expr)\n {\n-  stream << \"BlockExpr\"\n-\t << \":\"\n-\t << \" \"\n-\t << \"[\";\n+  stream << \"BlockExpr: [\";\n   indent++;\n-  // TODO: print statements\n-  // TODO: print tail expression if exists\n-  stream << \"]\";\n+  stream << std::endl;\n+  // TODO: inner attributes\n+\n+  // statements\n+  if (block_expr.has_statements ())\n+    {\n+      auto &stmts = block_expr.get_statements ();\n+      for (auto &stmt : stmts)\n+\t{\n+\t  stream << std::string (indent, indent_char);\n+\t  stream << \"Stmt: {\\n\";\n+\t  // stream << std::string (indent, indent_char);\n+\t  stmt->accept_vis (*this);\n+\t  stream << \"\\n\";\n+\t  stream << std::string (indent, indent_char);\n+\t  stream << \"}\\n\";\n+\t}\n+    }\n+\n+  // // TODO: print tail expression if exists\n+\n   indent--;\n+  stream << std::string (indent, indent_char);\n+  stream << \"]\";\n }\n \n void\n@@ -324,19 +374,87 @@ void\n Dump::visit (UseDeclaration &)\n {}\n void\n-Dump::visit (Function &)\n+Dump::visit (Function &func)\n {\n   indent++;\n   stream << std::string (indent, indent_char);\n-  stream << \"Function\"\n-\t << \" \";\n-  stream << \"{\" << std::endl;\n-  // TODO: print function params\n+  stream << \"Function {\" << std::endl;\n+  indent++;\n+\n+  // function name\n+  stream << std::string (indent, indent_char);\n+  stream << \"func_name: \";\n+  auto func_name = func.get_function_name ();\n+  stream << func_name;\n+  stream << \",\\n\";\n+\n+  // return type\n+  stream << std::string (indent, indent_char);\n+  stream << \"return_type: \";\n+  if (func.has_return_type ())\n+    {\n+      auto &ret_type = func.get_return_type ();\n+      stream << ret_type->as_string ();\n+      stream << \",\\n\";\n+    }\n+  else\n+    {\n+      stream << \"void,\\n\";\n+    }\n+\n+  // function params\n+  if (func.has_function_params ())\n+    {\n+      stream << std::string (indent, indent_char);\n+      stream << \"params: [\\n\";\n+      indent++;\n+      auto &func_params = func.get_function_params ();\n+      for (const auto &item : func_params)\n+\t{\n+\t  stream << std::string (indent, indent_char);\n+\t  stream << item.as_string ();\n+\t  stream << \",\\n\";\n+\t}\n+\n+      // parameter node mappings\n+      stream << std::string (indent, indent_char);\n+      stream << \"node_mappings: [\\n\";\n+      for (const auto &item : func_params)\n+\t{\n+\t  auto nmap = item.get_mappings ();\n+\t  indent++;\n+\t  stream << std::string (indent, indent_char);\n+\t  auto pname = item.param_name->as_string ();\n+\t  stream << pname << \": \";\n+\t  stream << nmap.as_string () << \",\\n\";\n+\t  indent--;\n+\t}\n+      stream << std::string (indent, indent_char);\n+      stream << \"],\";\n+      indent--;\n+      stream << \"\\n\";\n+      stream << std::string (indent, indent_char);\n+      stream << \"],\";\n+      stream << \"\\n\";\n+    }\n+\n+  // function body\n+  stream << std::string (indent, indent_char);\n+  auto &func_body = func.get_definition ();\n+  func_body->accept_vis (*this);\n+\n+  // func node mappings\n+  stream << \"\\n\";\n+  stream << std::string (indent, indent_char);\n+  stream << \"node_mappings: \";\n+  stream << func.get_impl_mappings ().as_string ();\n+  indent--;\n+  stream << \"\\n\";\n   stream << std::string (indent, indent_char);\n   stream << \"}\" << std::endl;\n   // TODO: get function definition and visit block\n \n-  stream << std::endl;\n+  // stream << std::endl;\n   indent--;\n }\n void\n@@ -402,8 +520,11 @@ void\n Dump::visit (LiteralPattern &)\n {}\n void\n-Dump::visit (IdentifierPattern &)\n-{}\n+Dump::visit (IdentifierPattern &ident)\n+{\n+  auto ident_name = ident.get_identifier ();\n+  stream << ident_name;\n+}\n void\n Dump::visit (WildcardPattern &)\n {}\n@@ -464,11 +585,49 @@ void\n Dump::visit (EmptyStmt &)\n {}\n void\n-Dump::visit (LetStmt &)\n-{}\n+Dump::visit (LetStmt &let_stmt)\n+{\n+  indent++;\n+  // TODO: outer attributes\n+  stream << std::string (indent, indent_char);\n+  stream << \"LetStmt: {\\n\";\n+  indent++;\n+  stream << std::string (indent, indent_char);\n+\n+  auto var_pattern = let_stmt.get_pattern ();\n+  stream << var_pattern->as_string ();\n+  // return type\n+  if (let_stmt.has_type ())\n+    {\n+      auto ret_type = let_stmt.get_type ();\n+      stream << \": \" << ret_type->as_string ();\n+    }\n+\n+  // init expr\n+  if (let_stmt.has_init_expr ())\n+    {\n+      stream << \" = Expr: {\\n \";\n+      indent++;\n+      stream << std::string (indent, indent_char);\n+      auto expr = let_stmt.get_init_expr ();\n+      expr->accept_vis (*this);\n+      stream << \"\\n\";\n+      stream << std::string (indent, indent_char);\n+      indent--;\n+      stream << \"}\\n\";\n+    }\n+  indent--;\n+  stream << std::string (indent, indent_char);\n+  stream << \"}\\n\";\n+\n+  indent--;\n+}\n void\n-Dump::visit (ExprStmtWithoutBlock &)\n-{}\n+Dump::visit (ExprStmtWithoutBlock &expr_stmt)\n+{\n+  auto expr = expr_stmt.get_expr ();\n+  expr->accept_vis (*this);\n+}\n void\n Dump::visit (ExprStmtWithBlock &)\n {}"}]}