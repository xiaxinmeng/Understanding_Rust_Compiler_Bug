{"sha": "c60ca7db2a2b90250208144231af8928acaf8adb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYwY2E3ZGIyYTJiOTAyNTAyMDgxNDQyMzFhZjg5MjhhY2FmOGFkYg==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T14:55:24Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T14:55:24Z"}, "message": "parse.y (obtain_incomplete_type): Don't wrap unknown types in TREE_LIST - just chain the POINTER_TYPEs together.\n\na\n\t* parse.y (obtain_incomplete_type):  Don't wrap unknown types\n\tin TREE_LIST - just chain the POINTER_TYPEs together.\n\t(resolve_class):  If type already resolved, return decl.\n\tAfter resolving, update TREE_TYPE(class_type), and name (if array).\n\t* parse.h (do_resolve_class), parse.y:  Make non-static.\n\t* class.c (maybe_layout_super_class):  Take this_class argument.\n\tDo do_resolve_class if necessary.\n\t(layout_class, layout_class_methods): Adjust calls appropriately.\n\t* parse.h (JDEP_TO_RESOLVE, JDEP_RESOLVED_DECL, JDEP_RESOLVED,\n\tJDEP_RESOLVED_P):  Redefined for new TREE_LIST-less convention.\n\t* typeck.c (build_java_array_type):  Don't call layout_class.\n\nFrom-SVN: r25325", "tree": {"sha": "045f793576f8b932d9d74e5de7fed877517ff217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/045f793576f8b932d9d74e5de7fed877517ff217"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c60ca7db2a2b90250208144231af8928acaf8adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60ca7db2a2b90250208144231af8928acaf8adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60ca7db2a2b90250208144231af8928acaf8adb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60ca7db2a2b90250208144231af8928acaf8adb/comments", "author": null, "committer": null, "parents": [{"sha": "78d21f929b421db5a72ffa7decf34b420c495ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d21f929b421db5a72ffa7decf34b420c495ecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78d21f929b421db5a72ffa7decf34b420c495ecb"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "8d99fd822500626a48bde838dd5601e1d4ebd13a", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60ca7db2a2b90250208144231af8928acaf8adb/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60ca7db2a2b90250208144231af8928acaf8adb/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=c60ca7db2a2b90250208144231af8928acaf8adb", "patch": "@@ -404,7 +404,12 @@ build_java_array_type (element_type, length)\n     TYPE_ALIGN (t) = TYPE_ALIGN (element_type);\n   pop_obstacks ();\n \n-  layout_class (t);\n+  /* We could layout_class, but that loads java.lang.Object prematurely.\n+   * This is called by the parser, and it is a bad idea to do load_class\n+   * in the middle of parsing, because of possible circularity problems. */\n+  push_super_field (t, object_type_node);\n+  layout_type (t);\n+\n   return t;\n }\n "}]}