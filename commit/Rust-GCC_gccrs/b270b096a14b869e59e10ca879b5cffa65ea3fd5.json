{"sha": "b270b096a14b869e59e10ca879b5cffa65ea3fd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI3MGIwOTZhMTRiODY5ZTU5ZTEwY2E4NzliNWNmZmE2NWVhM2ZkNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2014-01-10T21:34:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-01-10T21:34:37Z"}, "message": "re PR middle-end/58585 (ICE in ipa with virtual inheritance)\n\n\n\tPR ipa/58585\n\t* ipa-devirt.c (build_type_inheritance_graph): Also add types of vtables\n\tinto the type inheritance graph.\n\n\t* g++.dg/torture/pr58585.C: New testcase.\n\nFrom-SVN: r206543", "tree": {"sha": "a257114435a40ca9a3037d56f5138b40d8c8afa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a257114435a40ca9a3037d56f5138b40d8c8afa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b270b096a14b869e59e10ca879b5cffa65ea3fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b270b096a14b869e59e10ca879b5cffa65ea3fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b270b096a14b869e59e10ca879b5cffa65ea3fd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b270b096a14b869e59e10ca879b5cffa65ea3fd5/comments", "author": null, "committer": null, "parents": [{"sha": "0d6d7b9a20f3ed4370214a03f1ee26bdda4ad4e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d6d7b9a20f3ed4370214a03f1ee26bdda4ad4e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d6d7b9a20f3ed4370214a03f1ee26bdda4ad4e9"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "54d62608a9439612506a8a91cd8bc335c8c67955", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b270b096a14b869e59e10ca879b5cffa65ea3fd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b270b096a14b869e59e10ca879b5cffa65ea3fd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b270b096a14b869e59e10ca879b5cffa65ea3fd5", "patch": "@@ -1,3 +1,9 @@\n+2014-01-10  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/58585\n+\t* ipa-devirt.c (build_type_inheritance_graph): Also add types of vtables\n+\tinto the type inheritance graph.\n+\n 2014-01-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/59754"}, {"sha": "fb03dd2618d15f9d7bcc1fecebdfb3d275c31444", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b270b096a14b869e59e10ca879b5cffa65ea3fd5/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b270b096a14b869e59e10ca879b5cffa65ea3fd5/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=b270b096a14b869e59e10ca879b5cffa65ea3fd5", "patch": "@@ -542,7 +542,7 @@ method_class_type (tree t)\n void\n build_type_inheritance_graph (void)\n {\n-  struct cgraph_node *n;\n+  struct symtab_node *n;\n   FILE *inheritance_dump_file;\n   int flags;\n \n@@ -554,10 +554,37 @@ build_type_inheritance_graph (void)\n \n   /* We reconstruct the graph starting of types of all methods seen in the\n      the unit.  */\n-  FOR_EACH_FUNCTION (n)\n-    if (DECL_VIRTUAL_P (n->decl)\n+  FOR_EACH_SYMBOL (n)\n+    if (is_a <cgraph_node> (n)\n+\t&& DECL_VIRTUAL_P (n->decl)\n \t&& symtab_real_symbol_p (n))\n       get_odr_type (method_class_type (TREE_TYPE (n->decl)), true);\n+\n+    /* Look also for virtual tables of types that do not define any methods.\n+ \n+       We need it in a case where class B has virtual base of class A\n+       re-defining its virtual method and there is class C with no virtual\n+       methods with B as virtual base.\n+\n+       Here we output B's virtual method in two variant - for non-virtual\n+       and virtual inheritance.  B's virtual table has non-virtual version,\n+       while C's has virtual.\n+\n+       For this reason we need to know about C in order to include both\n+       variants of B.  More correctly, record_target_from_binfo should\n+       add both variants of the method when walking B, but we have no\n+       link in between them.\n+\n+       We rely on fact that either the method is exported and thus we\n+       assume it is called externally or C is in anonymous namespace and\n+       thus we will see the vtable.  */\n+\n+    else if (is_a <varpool_node> (n)\n+\t     && DECL_VIRTUAL_P (n->decl)\n+\t     && TREE_CODE (DECL_CONTEXT (n->decl)) == RECORD_TYPE\n+\t     && TYPE_BINFO (DECL_CONTEXT (n->decl))\n+\t     && polymorphic_type_binfo_p (TYPE_BINFO (DECL_CONTEXT (n->decl))))\n+      get_odr_type (DECL_CONTEXT (n->decl), true);\n   if (inheritance_dump_file)\n     {\n       dump_type_inheritance_graph (inheritance_dump_file);"}, {"sha": "4373d0ffcc29010a2dc01f51a1ffa374e5c7e8ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b270b096a14b869e59e10ca879b5cffa65ea3fd5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b270b096a14b869e59e10ca879b5cffa65ea3fd5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b270b096a14b869e59e10ca879b5cffa65ea3fd5", "patch": "@@ -1,3 +1,8 @@\n+2014-01-10  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/58585\n+\t* g++.dg/torture/pr58585.C: New testcase.\n+\n 2014-01-10  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.dg/pr46309.c: Disable for cris*-*-*."}, {"sha": "69fcf04ddc1b4bdde89ccec6fe86821f605c8c1f", "filename": "gcc/testsuite/g++.dg/torture/pr58585.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b270b096a14b869e59e10ca879b5cffa65ea3fd5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr58585.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b270b096a14b869e59e10ca879b5cffa65ea3fd5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr58585.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr58585.C?ref=b270b096a14b869e59e10ca879b5cffa65ea3fd5", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+// { dg-options \"-fpic\" { target fpic } }\n+struct A\n+{\n+  virtual void foo() {}\n+  void bar();\n+};\n+void A::bar() { foo(); }\n+\n+struct B : virtual A\n+{\n+  virtual void foo() {}\n+  char c;\n+};\n+\n+struct C : virtual B\n+{\n+  C();\n+};\n+C::C() { bar(); }"}]}