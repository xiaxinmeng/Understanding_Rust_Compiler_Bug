{"sha": "b9a55b135e5482e2484c27b6233ebf9132347ee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlhNTViMTM1ZTU0ODJlMjQ4NGMyN2I2MjMzZWJmOTEzMjM0N2VlNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-11-19T11:45:15Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-11-19T11:45:15Z"}, "message": "bootstrap-ubsan.mk (POSTSTAGE1_LDFLAGS): Add -ldl.\n\nconfig/\n\t* bootstrap-ubsan.mk (POSTSTAGE1_LDFLAGS): Add -ldl.\ngcc/c-family/\n\t* c-ubsan.c (ubsan_instrument_division): Adjust ubsan_create_data\n\tcall.\n\t(ubsan_instrument_shift): Likewise.\n\t(ubsan_instrument_vla): Likewise.\ngcc/\n\t* opts.c (common_handle_option): Add -fsanitize=null option.\n\tTurn off -fdelete-null-pointer-checks option when doing the\n\tNULL pointer checking.\n\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH): Add.\n\t* tree-pass.h (make_pass_ubsan): Declare.\n\t(make_pass_sanopt): Declare.\n\t* timevar.def (TV_TREE_UBSAN): New timevar.\n\t* passes.def: Add pass_sanopt and pass_ubsan.\n\t* ubsan.h (ubsan_null_ckind): New enum.\n\t(ubsan_mismatch_data): New struct.\n\t(ubsan_expand_null_ifn): Declare.\n\t(ubsan_create_data): Adjust declaration.\n\t(ubsan_type_descriptor): Likewise.\n\t* asan.c: Include \"ubsan.h\".\n\t(pass_data_sanopt): New pass.\n\t(execute_sanopt): New function.\n\t(gate_sanopt): Likewise.\n\t(make_pass_sanopt): Likewise.\n\t(class pass_sanopt): New class.\n\t* ubsan.c: Include tree-pass.h, gimple-ssa.h, gimple-walk.h,\n\tgimple-iterator.h and cfgloop.h. \n\t(PROB_VERY_UNLIKELY): Define.\n\t(tree_type_map_hash): New function.\n\t(ubsan_type_descriptor): Add new parameter.\n\tImprove type name generation.\n\t(ubsan_create_data): Add new parameter.  Add pointer data into\n\tubsan structure.\n\t(ubsan_expand_null_ifn): New function.\n\t(instrument_member_call): Likewise.\n\t(instrument_mem_ref): Likewise.\n\t(instrument_null): Likewise.\n\t(ubsan_pass): Likewise.\n\t(gate_ubsan): Likewise.\n\t(make_pass_ubsan): Likewise.\n\t(ubsan_instrument_unreachable): Adjust ubsan_create_data call.\n\t(class pass_ubsan): New class.\n\t(pass_data_ubsan): New pass.\n\t* flag-types.h (enum sanitize_code): Add SANITIZE_NULL.\n\t* internal-fn.c (expand_UBSAN_NULL): New function.\n\t* cgraphunit.c (varpool_finalize_decl): Call varpool_assemble_decl\n\teven when !flag_toplevel_reorder.\n\t* internal-fn.def (UBSAN_NULL): New.\ngcc/testsuite/\n\t* c-c++-common/ubsan/null-1.c: New test.\n\t* c-c++-common/ubsan/null-2.c: New test.\n\t* c-c++-common/ubsan/null-3.c: New test.\n\t* c-c++-common/ubsan/null-4.c: New test.\n\t* c-c++-common/ubsan/null-5.c: New test.\n\t* c-c++-common/ubsan/null-6.c: New test.\n\t* c-c++-common/ubsan/null-7.c: New test.\n\t* c-c++-common/ubsan/null-8.c: New test.\n\t* c-c++-common/ubsan/null-9.c: New test.\n\t* c-c++-common/ubsan/null-10.c: New test.\n\t* c-c++-common/ubsan/null-11.c: New test.\n\t* gcc.dg/ubsan/c99-shift-2.c: Adjust dg-output.\n\t* c-c++-common/ubsan/shift-1.c: Likewise.\n\t* c-c++-common/ubsan/div-by-zero-3.c: Likewise.\n\nFrom-SVN: r205021", "tree": {"sha": "db77baf539d04917436ff7f7ba9dee07996cc0d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db77baf539d04917436ff7f7ba9dee07996cc0d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9a55b135e5482e2484c27b6233ebf9132347ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a55b135e5482e2484c27b6233ebf9132347ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9a55b135e5482e2484c27b6233ebf9132347ee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a55b135e5482e2484c27b6233ebf9132347ee5/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a186c902152afe6410d96d708b7b92a46109f9d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a186c902152afe6410d96d708b7b92a46109f9d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a186c902152afe6410d96d708b7b92a46109f9d4"}], "stats": {"total": 757, "additions": 707, "deletions": 50}, "files": [{"sha": "313572db18a3e2c2eb60636fbb56df92b84414b2", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -1,3 +1,7 @@\n+2013-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* bootstrap-ubsan.mk (POSTSTAGE1_LDFLAGS): Add -ldl.\n+\n 2013-11-15  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* picflag.m4 (m68k-*-*): Use default PIC flag."}, {"sha": "0cd8b172b0fcefc94223f3f29af080eeab6cfc55", "filename": "config/bootstrap-ubsan.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/config%2Fbootstrap-ubsan.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/config%2Fbootstrap-ubsan.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fbootstrap-ubsan.mk?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -2,6 +2,6 @@\n \n STAGE2_CFLAGS += -fsanitize=undefined\n STAGE3_CFLAGS += -fsanitize=undefined\n-POSTSTAGE1_LDFLAGS += -fsanitize=undefined -static-libubsan -lpthread \\\n+POSTSTAGE1_LDFLAGS += -fsanitize=undefined -static-libubsan -lpthread -ldl \\\n \t\t      -B$$r/prev-$(TARGET_SUBDIR)/libsanitizer/ubsan/ \\\n \t\t      -B$$r/prev-$(TARGET_SUBDIR)/libsanitizer/ubsan/.libs"}, {"sha": "d1b78d1d5124eb8e66209d3d47c30cc52179a020", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -1,3 +1,48 @@\n+2013-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* opts.c (common_handle_option): Add -fsanitize=null option.\n+\tTurn off -fdelete-null-pointer-checks option when doing the\n+\tNULL pointer checking.\n+\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH): Add.\n+\t* tree-pass.h (make_pass_ubsan): Declare.\n+\t(make_pass_sanopt): Declare.\n+\t* timevar.def (TV_TREE_UBSAN): New timevar.\n+\t* passes.def: Add pass_sanopt and pass_ubsan.\n+\t* ubsan.h (ubsan_null_ckind): New enum.\n+\t(ubsan_mismatch_data): New struct.\n+\t(ubsan_expand_null_ifn): Declare.\n+\t(ubsan_create_data): Adjust declaration.\n+\t(ubsan_type_descriptor): Likewise.\n+\t* asan.c: Include \"ubsan.h\".\n+\t(pass_data_sanopt): New pass.\n+\t(execute_sanopt): New function.\n+\t(gate_sanopt): Likewise.\n+\t(make_pass_sanopt): Likewise.\n+\t(class pass_sanopt): New class.\n+\t* ubsan.c: Include tree-pass.h, gimple-ssa.h, gimple-walk.h,\n+\tgimple-iterator.h and cfgloop.h. \n+\t(PROB_VERY_UNLIKELY): Define.\n+\t(tree_type_map_hash): New function.\n+\t(ubsan_type_descriptor): Add new parameter.\n+\tImprove type name generation.\n+\t(ubsan_create_data): Add new parameter.  Add pointer data into\n+\tubsan structure.\n+\t(ubsan_expand_null_ifn): New function.\n+\t(instrument_member_call): Likewise.\n+\t(instrument_mem_ref): Likewise.\n+\t(instrument_null): Likewise.\n+\t(ubsan_pass): Likewise.\n+\t(gate_ubsan): Likewise.\n+\t(make_pass_ubsan): Likewise.\n+\t(ubsan_instrument_unreachable): Adjust ubsan_create_data call.\n+\t(class pass_ubsan): New class.\n+\t(pass_data_ubsan): New pass.\n+\t* flag-types.h (enum sanitize_code): Add SANITIZE_NULL.\n+\t* internal-fn.c (expand_UBSAN_NULL): New function.\n+\t* cgraphunit.c (varpool_finalize_decl): Call varpool_assemble_decl\n+\teven when !flag_toplevel_reorder.\n+\t* internal-fn.def (UBSAN_NULL): New.\n+\n 2013-11-19  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_create_indirect_edge): Use get_polymorphic_call_info."}, {"sha": "d940b2c0f438b8d67f7ebe5b021abfbb023341d4", "filename": "gcc/asan.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alloc-pool.h\"\n #include \"cfgloop.h\"\n #include \"gimple-builder.h\"\n+#include \"ubsan.h\"\n \n /* AddressSanitizer finds out-of-bounds and use-after-free bugs\n    with <2x slowdown on average.\n@@ -2370,4 +2371,87 @@ make_pass_asan_O0 (gcc::context *ctxt)\n   return new pass_asan_O0 (ctxt);\n }\n \n+/* Perform optimization of sanitize functions.  */\n+\n+static unsigned int\n+execute_sanopt (void)\n+{\n+  basic_block bb;\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      gimple_stmt_iterator gsi;\n+      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t{\n+\t  gimple stmt = gsi_stmt (gsi);\n+\n+\t  if (!is_gimple_call (stmt))\n+\t    continue;\n+\n+\t  if (gimple_call_internal_p (stmt))\n+\t    switch (gimple_call_internal_fn (stmt))\n+\t      {\n+\t      case IFN_UBSAN_NULL:\n+\t\tubsan_expand_null_ifn (gsi);\n+\t\tbreak;\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"Optimized\\n  \");\n+\t      print_gimple_stmt (dump_file, stmt, 0, dump_flags);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\t}\n+    }\n+  return 0;\n+}\n+\n+static bool\n+gate_sanopt (void)\n+{\n+  return flag_sanitize;\n+}\n+\n+namespace {\n+\n+const pass_data pass_data_sanopt =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"sanopt\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  true, /* has_gate */\n+  true, /* has_execute */\n+  TV_NONE, /* tv_id */\n+  ( PROP_ssa | PROP_cfg | PROP_gimple_leh ), /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  ( TODO_verify_flow | TODO_verify_stmts\n+    | TODO_update_ssa ), /* todo_flags_finish */\n+};\n+\n+class pass_sanopt : public gimple_opt_pass\n+{\n+public:\n+  pass_sanopt (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_sanopt, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  bool gate () { return gate_sanopt (); }\n+  unsigned int execute () { return execute_sanopt (); }\n+\n+}; // class pass_sanopt\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_sanopt (gcc::context *ctxt)\n+{\n+  return new pass_sanopt (ctxt);\n+}\n+\n #include \"gt-asan.h\""}, {"sha": "89c975db1c55be0204cf63713b764b42c00c45a4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -1,3 +1,10 @@\n+2013-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-ubsan.c (ubsan_instrument_division): Adjust ubsan_create_data\n+\tcall.\n+\t(ubsan_instrument_shift): Likewise.\n+\t(ubsan_instrument_vla): Likewise.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* c-common.c (convert_vector_to_pointer_for_subscript): Remove"}, {"sha": "7a09e7b9596005aa9f834985fbd0d6d978b0cf74", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -73,7 +73,8 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n      make sure it gets evaluated before the condition.  */\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), op0, t);\n   tree data = ubsan_create_data (\"__ubsan_overflow_data\",\n-\t\t\t\t loc, ubsan_type_descriptor (type),\n+\t\t\t\t loc, NULL,\n+\t\t\t\t ubsan_type_descriptor (type, false),\n \t\t\t\t NULL_TREE);\n   data = build_fold_addr_expr_loc (loc, data);\n   tt = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW);\n@@ -141,8 +142,10 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n      make sure it gets evaluated before the condition.  */\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), op0, t);\n   tree data = ubsan_create_data (\"__ubsan_shift_data\",\n-\t\t\t\t loc, ubsan_type_descriptor (type0),\n-\t\t\t\t ubsan_type_descriptor (type1), NULL_TREE);\n+\t\t\t\t loc, NULL,\n+\t\t\t\t ubsan_type_descriptor (type0, false),\n+\t\t\t\t ubsan_type_descriptor (type1, false),\n+\t\t\t\t NULL_TREE);\n \n   data = build_fold_addr_expr_loc (loc, data);\n \n@@ -166,7 +169,9 @@ ubsan_instrument_vla (location_t loc, tree size)\n \n   t = fold_build2 (LE_EXPR, boolean_type_node, size, build_int_cst (type, 0));\n   tree data = ubsan_create_data (\"__ubsan_vla_data\",\n-\t\t\t\t loc, ubsan_type_descriptor (type), NULL_TREE);\n+\t\t\t\t loc, NULL,\n+\t\t\t\t ubsan_type_descriptor (type, false),\n+\t\t\t\t NULL_TREE);\n   data = build_fold_addr_expr_loc (loc, data);\n   tt = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE);\n   tt = build_call_expr_loc (loc, tt, 2, data, ubsan_encode_value (size));"}, {"sha": "ce52115b99cd7734dc53f779d605704164266b03", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -829,7 +829,8 @@ varpool_finalize_decl (tree decl)\n     varpool_analyze_node (node);\n   /* Some frontends produce various interface variables after compilation\n      finished.  */\n-  if (cgraph_state == CGRAPH_STATE_FINISHED)\n+  if (cgraph_state == CGRAPH_STATE_FINISHED\n+      || (!flag_toplevel_reorder && cgraph_state == CGRAPH_STATE_EXPANSION))\n     varpool_assemble_decl (node);\n }\n "}, {"sha": "528c88a370c0b43e1a29798f5853bbc0d1b163f4", "filename": "gcc/flag-types.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -211,8 +211,9 @@ enum sanitize_code {\n   SANITIZE_DIVIDE = 1 << 3,\n   SANITIZE_UNREACHABLE = 1 << 4,\n   SANITIZE_VLA = 1 << 5,\n+  SANITIZE_NULL = 1 << 6,\n   SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE\n-\t\t       | SANITIZE_VLA\n+\t\t       | SANITIZE_VLA | SANITIZE_NULL\n };\n \n /* flag_vtable_verify initialization levels. */"}, {"sha": "a4cf1d5c627a3035d9ca0897f02c5bc1b47e0b09", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -139,6 +139,14 @@ expand_GOMP_SIMD_LAST_LANE (gimple stmt ATTRIBUTE_UNUSED)\n   gcc_unreachable ();\n }\n \n+/* This should get expanded in the sanopt pass.  */\n+\n+static void\n+expand_UBSAN_NULL (gimple stmt ATTRIBUTE_UNUSED)\n+{\n+  gcc_unreachable ();\n+}\n+\n /* Routines to expand each internal function, indexed by function number.\n    Each routine has the prototype:\n "}, {"sha": "7193874c811b94e44a0a5bdd440572ffb25d41f6", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -44,3 +44,4 @@ DEF_INTERNAL_FN (GOMP_SIMD_LANE, ECF_NOVOPS | ECF_LEAF | ECF_NOTHROW)\n DEF_INTERNAL_FN (GOMP_SIMD_VF, ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n DEF_INTERNAL_FN (GOMP_SIMD_LAST_LANE, ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n DEF_INTERNAL_FN (ANNOTATE,  ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n+DEF_INTERNAL_FN (UBSAN_NULL, ECF_LEAF | ECF_NOTHROW)"}, {"sha": "89cfe5c56cc7700d25ee6fcb661732e34e477c69", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -1446,6 +1446,7 @@ common_handle_option (struct gcc_options *opts,\n \t      { \"unreachable\", SANITIZE_UNREACHABLE,\n \t\tsizeof \"unreachable\" - 1 },\n \t      { \"vla-bound\", SANITIZE_VLA, sizeof \"vla-bound\" - 1 },\n+\t      { \"null\", SANITIZE_NULL, sizeof \"null\" - 1 },\n \t      { NULL, 0, 0 }\n \t    };\n \t    const char *comma;\n@@ -1487,6 +1488,10 @@ common_handle_option (struct gcc_options *opts,\n \t    p = comma + 1;\n \t  }\n \n+\t/* When instrumenting the pointers, we don't want to remove\n+\t   the null pointer checks.  */\n+\tif (flag_sanitize & SANITIZE_NULL)\n+\t  opts->x_flag_delete_null_pointer_checks = 0;\n \tbreak;\n       }\n "}, {"sha": "a9411fa0baaf135cced6614f7cb26e90ec3d8c8d", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_init_datastructures);\n \n       NEXT_PASS (pass_build_ssa);\n+      NEXT_PASS (pass_ubsan);\n       NEXT_PASS (pass_early_warn_uninitialized);\n       NEXT_PASS (pass_rebuild_cgraph_edges);\n       NEXT_PASS (pass_inline_parameters);\n@@ -304,6 +305,7 @@ along with GCC; see the file COPYING3.  If not see\n   NEXT_PASS (pass_lower_complex_O0);\n   NEXT_PASS (pass_asan_O0);\n   NEXT_PASS (pass_tsan_O0);\n+  NEXT_PASS (pass_sanopt);\n   NEXT_PASS (pass_cleanup_eh);\n   NEXT_PASS (pass_lower_resx);\n   NEXT_PASS (pass_nrv);"}, {"sha": "9c59778f9f474445a7a8f12b9af487b4f3a02ecd", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -301,3 +301,7 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE,\n \t\t      \"__ubsan_handle_vla_bound_not_positive\",\n \t\t      BT_FN_VOID_PTR_PTR,\n \t\t      ATTR_COLD_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH,\n+\t\t      \"__ubsan_handle_type_mismatch\",\n+\t\t      BT_FN_VOID_PTR_PTR,\n+\t\t      ATTR_COLD_NOTHROW_LEAF_LIST)"}, {"sha": "5666ad239c82eb456e5250dc2a589ea685044cad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -1,3 +1,20 @@\n+2013-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-c++-common/ubsan/null-1.c: New test.\n+\t* c-c++-common/ubsan/null-2.c: New test.\n+\t* c-c++-common/ubsan/null-3.c: New test.\n+\t* c-c++-common/ubsan/null-4.c: New test.\n+\t* c-c++-common/ubsan/null-5.c: New test.\n+\t* c-c++-common/ubsan/null-6.c: New test.\n+\t* c-c++-common/ubsan/null-7.c: New test.\n+\t* c-c++-common/ubsan/null-8.c: New test.\n+\t* c-c++-common/ubsan/null-9.c: New test.\n+\t* c-c++-common/ubsan/null-10.c: New test.\n+\t* c-c++-common/ubsan/null-11.c: New test.\n+\t* gcc.dg/ubsan/c99-shift-2.c: Adjust dg-output.\n+\t* c-c++-common/ubsan/shift-1.c: Likewise.\n+\t* c-c++-common/ubsan/div-by-zero-3.c: Likewise.\n+\n 2013-11-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/c11-complex-1.c: Use dg-add-options ieee."}, {"sha": "f3ee23bd0212e1cb5115d96c0bf819ba4ee1106a", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-3.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -16,6 +16,6 @@ main (void)\n   return 0;\n }\n \n-/* { dg-output \"division of -2147483648 by -1 cannot be represented in type int(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*division of -2147483648 by -1 cannot be represented in type int(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*division of -2147483648 by -1 cannot be represented in type int(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"division of -2147483648 by -1 cannot be represented in type 'int'(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*division of -2147483648 by -1 cannot be represented in type 'int'(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*division of -2147483648 by -1 cannot be represented in type 'int'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "887dfdcdb9ff5bd32cc42395a22edad0a7224d78", "filename": "gcc/testsuite/c-c++-common/ubsan/null-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-1.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+int\n+main (void)\n+{\n+  int *p = 0;\n+  return *p;\n+}\n+\n+/* { dg-output \"load of null pointer of type 'int'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "267ab1f321c7fd78560a51447bc593a5846d1f21", "filename": "gcc/testsuite/c-c++-common/ubsan/null-10.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-10.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+int\n+main (void)\n+{\n+  short *p = 0, *u;\n+  *(u + *p) = 23;\n+  return  0;\n+}\n+\n+/* { dg-output \"load of null pointer of type 'short int'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "83e65af7e86d4d7582918c5e0838756b92f48a03", "filename": "gcc/testsuite/c-c++-common/ubsan/null-11.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-11.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+struct S {\n+  int i;\n+};\n+\n+int\n+main (void)\n+{\n+  struct S **s = 0;\n+  return (*s)->i;\n+}\n+\n+/* { dg-output \"load of null pointer of type 'struct S \\\\*'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "c5303ea97a7a31e0325c2619c5c8905692ff5e26", "filename": "gcc/testsuite/c-c++-common/ubsan/null-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-2.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+int\n+main (void)\n+{\n+  int ***ppp = 0;\n+  return ***ppp;\n+}\n+\n+/* { dg-output \"load of null pointer of type 'int \\\\*\\\\*'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "0beb20cfbd0003777b132f6a700d18eacd1917da", "filename": "gcc/testsuite/c-c++-common/ubsan/null-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-3.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+int\n+foo (int *p)\n+{\n+  return *p;\n+}\n+\n+int\n+main (void)\n+{\n+  int **p = 0;\n+  return foo (*p);\n+}\n+\n+/* { dg-output \"load of null pointer of type 'int \\\\*'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "b5f03ed0b60b258217a7c3d22591832b56a56884", "filename": "gcc/testsuite/c-c++-common/ubsan/null-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-4.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+int\n+main (void)\n+{\n+  _Complex double *p = 0;\n+  if (p[0])\n+    return 42;\n+  return 0;\n+}\n+\n+/* { dg-output \"load of null pointer of type 'complex double'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "f6db4744446e74f49b2377086c5fe9eedd362124", "filename": "gcc/testsuite/c-c++-common/ubsan/null-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-5.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+typedef volatile const _Complex float *T;\n+\n+int\n+main (void)\n+{\n+  T t = 0;\n+  if (*t)\n+    return 42;\n+  return 0;\n+}\n+\n+/* { dg-output \"load of null pointer of type 'volatile const complex float'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "705635c0d84fa7464aabdf0d089c942d3b7ea15f", "filename": "gcc/testsuite/c-c++-common/ubsan/null-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-6.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+int\n+main (void)\n+{\n+  unsigned long int *p = 0;\n+  *p = 42;\n+  return 0;\n+}\n+\n+/* { dg-output \"store to null pointer of type 'long unsigned int'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "1d8216a3d2fa879f148a72e6dc878431c1e34f14", "filename": "gcc/testsuite/c-c++-common/ubsan/null-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-7.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+int *\n+gao (void)\n+{\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  return *gao ();\n+}\n+\n+/* { dg-output \"load of null pointer of type 'int'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "2cf3939ca5e4eec3a17f4a2ce8c77f651c9e7ece", "filename": "gcc/testsuite/c-c++-common/ubsan/null-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-8.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+struct S {\n+  int i;\n+};\n+\n+int\n+main (void)\n+{\n+  struct S *s = 0;\n+  return s->i;\n+}\n+\n+/* { dg-output \"member access within null pointer of type 'struct S'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "7fabbeca4c7f0294e5c72fbe29a69db00d7b05f7", "filename": "gcc/testsuite/c-c++-common/ubsan/null-9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnull-9.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=null -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+union U {\n+  int i;\n+};\n+\n+int\n+main (void)\n+{\n+  union U *u = 0;\n+  return u->i;\n+}\n+\n+/* { dg-output \"member access within null pointer of type 'union U'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "0928ff7a1027b245c46584d7f03edee708d0b3ef", "filename": "gcc/testsuite/c-c++-common/ubsan/shift-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-1.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -23,9 +23,9 @@ main (void)\n \n   return 0;\n }\n-/* { dg-output \"shift exponent 152 is too large for \\[^\\n\\r]*-bit type int(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*shift exponent 153 is too large for \\[^\\n\\r]*-bit type int(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*shift exponent 154 is too large for \\[^\\n\\r]*-bit type int(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*shift exponent 524 is too large for \\[^\\n\\r]*-bit type long long unsigned int(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*shift exponent 370 is too large for \\[^\\n\\r]*-bit type int(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*shift exponent 402 is too large for \\[^\\n\\r]*-bit type long int(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"shift exponent 152 is too large for \\[^\\n\\r]*-bit type 'int'(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 153 is too large for \\[^\\n\\r]*-bit type 'int'(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 154 is too large for \\[^\\n\\r]*-bit type 'int'(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 524 is too large for \\[^\\n\\r]*-bit type 'long long unsigned int'(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 370 is too large for \\[^\\n\\r]*-bit type 'int'(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 402 is too large for \\[^\\n\\r]*-bit type 'long int'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "c6662dc43bce000d5bdf06f3e9752a9f28f97645", "filename": "gcc/testsuite/gcc.dg/ubsan/c99-shift-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-2.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -7,4 +7,4 @@ main (void)\n   int a = 1;\n   a <<= 31;\n }\n-/* { dg-output \"left shift of 1 by 31 places cannot be represented in type int\" } */\n+/* { dg-output \"left shift of 1 by 31 places cannot be represented in type 'int'\" } */"}, {"sha": "dd590ec385c820f500c7f82e87306fa1061e9b9a", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -261,6 +261,7 @@ DEFTIMEVAR (TV_PLUGIN_INIT           , \"plugin initialization\")\n DEFTIMEVAR (TV_PLUGIN_RUN            , \"plugin execution\")\n DEFTIMEVAR (TV_GIMPLE_SLSR           , \"straight-line strength reduction\")\n DEFTIMEVAR (TV_VTABLE_VERIFICATION   , \"vtable verification\")\n+DEFTIMEVAR (TV_TREE_UBSAN            , \"tree ubsan\")\n \n /* Everything else in rest_of_compilation not included above.  */\n DEFTIMEVAR (TV_EARLY_LOCAL\t     , \"early local passes\")"}, {"sha": "02d71cd3961faa71889c21a05f3d775dba3bc98e", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -447,6 +447,8 @@ extern gimple_opt_pass *make_pass_split_functions (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_feedback_split_functions (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_strength_reduction (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_vtable_verify (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_ubsan (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_sanopt (gcc::context *ctxt);\n \n /* IPA Passes */\n extern simple_ipa_opt_pass *make_pass_ipa_lower_emutls (gcc::context *ctxt);"}, {"sha": "62894d9687e15d6e931cff15b42d4b69c1467157", "filename": "gcc/ubsan.c", "status": "modified", "additions": 310, "deletions": 31, "changes": 341, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -23,15 +23,23 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"cgraph.h\"\n+#include \"tree-pass.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-ssa.h\"\n+#include \"gimple-walk.h\"\n #include \"hashtab.h\"\n #include \"pointer-set.h\"\n #include \"output.h\"\n #include \"tm_p.h\"\n #include \"toplev.h\"\n+#include \"cfgloop.h\"\n #include \"ubsan.h\"\n #include \"c-family/c-common.h\"\n \n+/* From trans-mem.c.  */\n+#define PROB_VERY_UNLIKELY      (REG_BR_PROB_BASE / 2000 - 1)\n+\n /* Map from a tree to a VAR_DECL tree.  */\n \n struct GTY(()) tree_type_map {\n@@ -40,9 +48,16 @@ struct GTY(()) tree_type_map {\n };\n \n #define tree_type_map_eq tree_map_base_eq\n-#define tree_type_map_hash tree_map_base_hash\n #define tree_type_map_marked_p tree_map_base_marked_p\n \n+/* Hash from a tree in a tree_type_map.  */\n+\n+unsigned int\n+tree_type_map_hash (const void *item)\n+{\n+  return TYPE_UID (((const struct tree_type_map *)item)->type.from);\n+}\n+\n static GTY ((if_marked (\"tree_type_map_marked_p\"), param_is (struct tree_type_map)))\n      htab_t decl_tree_for_type;\n \n@@ -240,12 +255,14 @@ get_ubsan_type_info_for_type (tree type)\n }\n \n /* Helper routine that returns ADDR_EXPR of a VAR_DECL of a type\n-   descriptor.  It first looks into the pointer map; if not found,\n-   create the VAR_DECL, put it into the pointer map and return the\n-   ADDR_EXPR of it.  TYPE describes a particular type.  */\n+   descriptor.  It first looks into the hash table; if not found,\n+   create the VAR_DECL, put it into the hash table and return the\n+   ADDR_EXPR of it.  TYPE describes a particular type.  WANT_POINTER_TYPE_P\n+   means whether we are interested in the pointer type and not the pointer\n+   itself.  */\n \n tree\n-ubsan_type_descriptor (tree type)\n+ubsan_type_descriptor (tree type, bool want_pointer_type_p)\n {\n   /* See through any typedefs.  */\n   type = TYPE_MAIN_VARIANT (type);\n@@ -255,33 +272,73 @@ ubsan_type_descriptor (tree type)\n     return decl;\n \n   tree dtype = ubsan_type_descriptor_type ();\n-  const char *tname;\n+  tree type2 = type;\n+  const char *tname = NULL;\n+  char *pretty_name;\n+  unsigned char deref_depth = 0;\n   unsigned short tkind, tinfo;\n \n-  /* At least for INTEGER_TYPE/REAL_TYPE/COMPLEX_TYPE, this should work.\n-     For e.g. type_unsigned_for (type) or bit-fields, the TYPE_NAME\n-     would be NULL.  */\n-  if (TYPE_NAME (type) != NULL)\n+  /* Get the name of the type, or the name of the pointer type.  */\n+  if (want_pointer_type_p)\n+    {\n+      gcc_assert (POINTER_TYPE_P (type));\n+      type2 = TREE_TYPE (type);\n+\n+      /* Remove any '*' operators from TYPE.  */\n+      while (POINTER_TYPE_P (type2))\n+        deref_depth++, type2 = TREE_TYPE (type2);\n+\n+      if (TREE_CODE (type2) == METHOD_TYPE)\n+        type2 = TYPE_METHOD_BASETYPE (type2);\n+    }\n+\n+  if (TYPE_NAME (type2) != NULL)\n     {\n-      if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)\n-\ttname = IDENTIFIER_POINTER (TYPE_NAME (type));\n+      if (TREE_CODE (TYPE_NAME (type2)) == IDENTIFIER_NODE)\n+\ttname = IDENTIFIER_POINTER (TYPE_NAME (type2));\n       else\n-\ttname = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n+\ttname = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type2)));\n     }\n-  else\n+\n+  if (tname == NULL)\n+    /* We weren't able to determine the type name.  */\n     tname = \"<unknown>\";\n \n-  if (TREE_CODE (type) == INTEGER_TYPE)\n+  /* Decorate the type name with '', '*', \"struct\", or \"union\".  */\n+  pretty_name = (char *) alloca (strlen (tname) + 16 + deref_depth);\n+  if (want_pointer_type_p)\n     {\n-      /* For INTEGER_TYPE, this is 0x0000.  */\n-      tkind = 0x000;\n-      tinfo = get_ubsan_type_info_for_type (type);\n+      int pos = sprintf (pretty_name, \"'%s%s%s%s%s%s%s\",\n+\t\t\t TYPE_VOLATILE (type2) ? \"volatile \" : \"\",\n+\t\t\t TYPE_READONLY (type2) ? \"const \" : \"\",\n+\t\t\t TYPE_RESTRICT (type2) ? \"restrict \" : \"\",\n+\t\t\t TYPE_ATOMIC (type2) ? \"_Atomic \" : \"\",\n+\t\t\t TREE_CODE (type2) == RECORD_TYPE\n+\t\t\t ? \"struct \"\n+\t\t\t : TREE_CODE (type2) == UNION_TYPE\n+\t\t\t   ? \"union \" : \"\", tname,\n+\t\t\t deref_depth == 0 ? \"\" : \" \");\n+      while (deref_depth-- > 0)\n+        pretty_name[pos++] = '*';\n+      pretty_name[pos++] = '\\'';\n+      pretty_name[pos] = '\\0';\n     }\n-  else if (TREE_CODE (type) == REAL_TYPE)\n-    /* We don't have float support yet.  */\n-    gcc_unreachable ();\n   else\n-    gcc_unreachable ();\n+    sprintf (pretty_name, \"'%s'\", tname);\n+\n+  switch (TREE_CODE (type))\n+    {\n+    case INTEGER_TYPE:\n+      tkind = 0x0000;\n+      break;\n+    case REAL_TYPE:\n+      tkind = 0x0001;\n+      break;\n+    default:\n+      tkind = 0xffff;\n+      break;\n+    }\n+  tinfo = get_ubsan_type_info_for_type (type);\n \n   /* Create a new VAR_DECL of type descriptor.  */\n   char tmp_name[32];\n@@ -295,8 +352,8 @@ ubsan_type_descriptor (tree type)\n   DECL_IGNORED_P (decl) = 1;\n   DECL_EXTERNAL (decl) = 0;\n \n-  size_t len = strlen (tname);\n-  tree str = build_string (len + 1, tname);\n+  size_t len = strlen (pretty_name);\n+  tree str = build_string (len + 1, pretty_name);\n   TREE_TYPE (str) = build_array_type (char_type_node,\n \t\t\t\t      build_index_type (size_int (len)));\n   TREE_READONLY (str) = 1;\n@@ -311,7 +368,7 @@ ubsan_type_descriptor (tree type)\n   DECL_INITIAL (decl) = ctor;\n   rest_of_decl_compilation (decl, 1, 0);\n \n-  /* Save the address of the VAR_DECL into the pointer map.  */\n+  /* Save the address of the VAR_DECL into the hash table.  */\n   decl = build_fold_addr_expr (decl);\n   decl_for_type_insert (type, decl);\n \n@@ -320,10 +377,12 @@ ubsan_type_descriptor (tree type)\n \n /* Create a structure for the ubsan library.  NAME is a name of the new\n    structure.  The arguments in ... are of __ubsan_type_descriptor type\n-   and there are at most two of them.  */\n+   and there are at most two of them.  MISMATCH are data used by ubsan\n+   pointer checking.  */\n \n tree\n-ubsan_create_data (const char *name, location_t loc, ...)\n+ubsan_create_data (const char *name, location_t loc,\n+\t\t   const struct ubsan_mismatch_data *mismatch, ...)\n {\n   va_list args;\n   tree ret, t;\n@@ -346,23 +405,40 @@ ubsan_create_data (const char *name, location_t loc, ...)\n       i++;\n     }\n \n-  va_start (args, loc);\n+  va_start (args, mismatch);\n   for (t = va_arg (args, tree); t != NULL_TREE;\n        i++, t = va_arg (args, tree))\n     {\n       gcc_checking_assert (i < 3);\n-      /* Save the tree argument for later use.  */\n+      /* Save the tree arguments for later use.  */\n       vec_safe_push (saved_args, t);\n       fields[i] = build_decl (UNKNOWN_LOCATION, FIELD_DECL, NULL_TREE,\n \t\t\t      td_type);\n       DECL_CONTEXT (fields[i]) = ret;\n       if (i)\n \tDECL_CHAIN (fields[i - 1]) = fields[i];\n     }\n+  va_end (args);\n+\n+  if (mismatch != NULL)\n+    {\n+      /* We have to add two more decls.  */\n+      fields[i] = build_decl (UNKNOWN_LOCATION, FIELD_DECL, NULL_TREE,\n+\t\t\t\tpointer_sized_int_node);\n+      DECL_CONTEXT (fields[i]) = ret;\n+      DECL_CHAIN (fields[i - 1]) = fields[i];\n+      i++;\n+\n+      fields[i] = build_decl (UNKNOWN_LOCATION, FIELD_DECL, NULL_TREE,\n+\t\t\t      unsigned_char_type_node);\n+      DECL_CONTEXT (fields[i]) = ret;\n+      DECL_CHAIN (fields[i - 1]) = fields[i];\n+      i++;\n+    }\n+\n   TYPE_FIELDS (ret) = fields[0];\n   TYPE_NAME (ret) = get_identifier (name);\n   layout_type (ret);\n-  va_end (args);\n \n   /* Now, fill in the type.  */\n   char tmp_name[32];\n@@ -391,6 +467,13 @@ ubsan_create_data (const char *name, location_t loc, ...)\n       CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, t);\n     }\n \n+  if (mismatch != NULL)\n+    {\n+      /* Append the pointer data.  */\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, mismatch->align);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, mismatch->ckind);\n+    }\n+\n   TREE_CONSTANT (ctor) = 1;\n   TREE_STATIC (ctor) = 1;\n   DECL_INITIAL (var) = ctor;\n@@ -405,7 +488,8 @@ ubsan_create_data (const char *name, location_t loc, ...)\n tree\n ubsan_instrument_unreachable (location_t loc)\n {\n-  tree data = ubsan_create_data (\"__ubsan_unreachable_data\", loc, NULL_TREE);\n+  tree data = ubsan_create_data (\"__ubsan_unreachable_data\", loc, NULL,\n+\t\t\t\t NULL_TREE);\n   tree t = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE);\n   return build_call_expr_loc (loc, t, 1, build_fold_addr_expr_loc (loc, data));\n }\n@@ -420,4 +504,199 @@ is_ubsan_builtin_p (tree t)\n \t\t  \"__builtin___ubsan_\", 18) == 0;\n }\n \n+/* Expand UBSAN_NULL internal call.  */\n+\n+void\n+ubsan_expand_null_ifn (gimple_stmt_iterator gsi)\n+{\n+  gimple stmt = gsi_stmt (gsi);\n+  location_t loc = gimple_location (stmt);\n+  gcc_assert (gimple_call_num_args (stmt) == 2);\n+  tree ptr = gimple_call_arg (stmt, 0);\n+  tree ckind = gimple_call_arg (stmt, 1);\n+\n+  basic_block cur_bb = gsi_bb (gsi);\n+\n+  /* Split the original block holding the pointer dereference.  */\n+  edge e = split_block (cur_bb, stmt);\n+\n+  /* Get a hold on the 'condition block', the 'then block' and the\n+     'else block'.  */\n+  basic_block cond_bb = e->src;\n+  basic_block fallthru_bb = e->dest;\n+  basic_block then_bb = create_empty_bb (cond_bb);\n+  if (current_loops)\n+    {\n+      add_bb_to_loop (then_bb, cond_bb->loop_father);\n+      loops_state_set (LOOPS_NEED_FIXUP);\n+    }\n+\n+  /* Make an edge coming from the 'cond block' into the 'then block';\n+     this edge is unlikely taken, so set up the probability accordingly.  */\n+  e = make_edge (cond_bb, then_bb, EDGE_TRUE_VALUE);\n+  e->probability = PROB_VERY_UNLIKELY;\n+\n+  /* Connect 'then block' with the 'else block'.  This is needed\n+     as the ubsan routines we call in the 'then block' are not noreturn.\n+     The 'then block' only has one outcoming edge.  */\n+  make_single_succ_edge (then_bb, fallthru_bb, EDGE_FALLTHRU);\n+\n+  /* Set up the fallthrough basic block.  */\n+  e = find_edge (cond_bb, fallthru_bb);\n+  e->flags = EDGE_FALSE_VALUE;\n+  e->count = cond_bb->count;\n+  e->probability = REG_BR_PROB_BASE - PROB_VERY_UNLIKELY;\n+\n+  /* Update dominance info for the newly created then_bb; note that\n+     fallthru_bb's dominance info has already been updated by\n+     split_bock.  */\n+  if (dom_info_available_p (CDI_DOMINATORS))\n+    set_immediate_dominator (CDI_DOMINATORS, then_bb, cond_bb);\n+\n+  /* Put the ubsan builtin call into the newly created BB.  */\n+  tree fn = builtin_decl_implicit (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH);\n+  const struct ubsan_mismatch_data m\n+    = { build_zero_cst (pointer_sized_int_node), ckind };\n+  tree data = ubsan_create_data (\"__ubsan_null_data\",\n+\t\t\t\t loc, &m,\n+\t\t\t\t ubsan_type_descriptor (TREE_TYPE (ptr), true),\n+\t\t\t\t NULL_TREE);\n+  data = build_fold_addr_expr_loc (loc, data);\n+  gimple g = gimple_build_call (fn, 2, data,\n+\t\t\t\tbuild_zero_cst (pointer_sized_int_node));\n+  gimple_set_location (g, loc);\n+  gimple_stmt_iterator gsi2 = gsi_start_bb (then_bb);\n+  gsi_insert_after (&gsi2, g, GSI_NEW_STMT);\n+\n+  /* Unlink the UBSAN_NULLs vops before replacing it.  */\n+  unlink_stmt_vdef (stmt);\n+\n+  g = gimple_build_cond (EQ_EXPR, ptr, build_int_cst (TREE_TYPE (ptr), 0),\n+\t\t\t NULL_TREE, NULL_TREE);\n+  gimple_set_location (g, loc);\n+\n+  /* Replace the UBSAN_NULL with a GIMPLE_COND stmt.  */\n+  gsi_replace (&gsi, g, false);\n+}\n+\n+/* Instrument a member call.  We check whether 'this' is NULL.  */\n+\n+static void\n+instrument_member_call (gimple_stmt_iterator *iter)\n+{\n+  tree this_parm = gimple_call_arg (gsi_stmt (*iter), 0);\n+  tree kind = build_int_cst (unsigned_char_type_node, UBSAN_MEMBER_CALL);\n+  gimple g = gimple_build_call_internal (IFN_UBSAN_NULL, 2, this_parm, kind);\n+  gimple_set_location (g, gimple_location (gsi_stmt (*iter)));\n+  gsi_insert_before (iter, g, GSI_SAME_STMT);\n+}\n+\n+/* Instrument a memory reference.  T is the pointer, IS_LHS says\n+   whether the pointer is on the left hand side of the assignment.  */\n+\n+static void\n+instrument_mem_ref (tree t, gimple_stmt_iterator *iter, bool is_lhs)\n+{\n+  enum ubsan_null_ckind ikind = is_lhs ? UBSAN_STORE_OF : UBSAN_LOAD_OF;\n+  if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (TREE_TYPE (t))))\n+    ikind = UBSAN_MEMBER_ACCESS;\n+  tree kind = build_int_cst (unsigned_char_type_node, ikind);\n+  gimple g = gimple_build_call_internal (IFN_UBSAN_NULL, 2, t, kind);\n+  gimple_set_location (g, gimple_location (gsi_stmt (*iter)));\n+  gsi_insert_before (iter, g, GSI_SAME_STMT);\n+}\n+\n+/* Callback function for the pointer instrumentation.  */\n+\n+static tree\n+instrument_null (tree *tp, int * /*walk_subtree*/, void *data)\n+{\n+  tree t = *tp;\n+  const enum tree_code code = TREE_CODE (t);\n+  struct walk_stmt_info *wi = (struct walk_stmt_info *) data;\n+\n+  if (code == MEM_REF\n+      && TREE_CODE (TREE_OPERAND (t, 0)) == SSA_NAME)\n+    instrument_mem_ref (TREE_OPERAND (t, 0), &wi->gsi, wi->is_lhs);\n+  else if (code == ADDR_EXPR\n+\t   && POINTER_TYPE_P (TREE_TYPE (t))\n+\t   && TREE_CODE (TREE_TYPE (TREE_TYPE (t))) == METHOD_TYPE)\n+    instrument_member_call (&wi->gsi);\n+\n+  return NULL_TREE;\n+}\n+\n+/* Gate and execute functions for ubsan pass.  */\n+\n+static unsigned int\n+ubsan_pass (void)\n+{\n+  basic_block bb;\n+  gimple_stmt_iterator gsi;\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi);)\n+\t{\n+\t  struct walk_stmt_info wi;\n+\t  gimple stmt = gsi_stmt (gsi);\n+\t  if (is_gimple_debug (stmt))\n+\t    {\n+\t      gsi_next (&gsi);\n+\t      continue;\n+\t    }\n+\n+\t  memset (&wi, 0, sizeof (wi));\n+\t  wi.gsi = gsi;\n+\t  walk_gimple_op (stmt, instrument_null, &wi);\n+\t  gsi_next (&gsi);\n+\t}\n+    }\n+  return 0;\n+}\n+\n+static bool\n+gate_ubsan (void)\n+{\n+  return flag_sanitize & SANITIZE_NULL;\n+}\n+\n+namespace {\n+\n+const pass_data pass_data_ubsan =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"ubsan\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  true, /* has_gate */\n+  true, /* has_execute */\n+  TV_TREE_UBSAN, /* tv_id */\n+  ( PROP_cfg | PROP_ssa ), /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  TODO_update_ssa, /* todo_flags_finish */\n+};\n+\n+class pass_ubsan : public gimple_opt_pass\n+{\n+public:\n+  pass_ubsan (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_ubsan, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  bool gate () { return gate_ubsan (); }\n+  unsigned int execute () { return ubsan_pass (); }\n+\n+}; // class pass_ubsan\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_ubsan (gcc::context *ctxt)\n+{\n+  return new pass_ubsan (ctxt);\n+}\n+\n #include \"gt-ubsan.h\""}, {"sha": "666e5fe15abffb84b1c19c24d60df37aa212b3d2", "filename": "gcc/ubsan.h", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a55b135e5482e2484c27b6233ebf9132347ee5/gcc%2Fubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.h?ref=b9a55b135e5482e2484c27b6233ebf9132347ee5", "patch": "@@ -21,9 +21,26 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_UBSAN_H\n #define GCC_UBSAN_H\n \n+/* The various kinds of NULL pointer checks.  */\n+enum ubsan_null_ckind {\n+  UBSAN_LOAD_OF,\n+  UBSAN_STORE_OF,\n+  UBSAN_REF_BINDING,\n+  UBSAN_MEMBER_ACCESS,\n+  UBSAN_MEMBER_CALL\n+};\n+\n+/* An extra data used by ubsan pointer checking.  */\n+struct ubsan_mismatch_data {\n+  tree align;\n+  tree ckind;\n+};\n+\n+extern void ubsan_expand_null_ifn (gimple_stmt_iterator);\n extern tree ubsan_instrument_unreachable (location_t);\n-extern tree ubsan_create_data (const char *, location_t, ...);\n-extern tree ubsan_type_descriptor (tree);\n+extern tree ubsan_create_data (const char *, location_t,\n+\t\t\t       const struct ubsan_mismatch_data *, ...);\n+extern tree ubsan_type_descriptor (tree, bool);\n extern tree ubsan_encode_value (tree);\n extern bool is_ubsan_builtin_p (tree);\n "}]}