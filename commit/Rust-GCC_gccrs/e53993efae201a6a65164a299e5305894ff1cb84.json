{"sha": "e53993efae201a6a65164a299e5305894ff1cb84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzOTkzZWZhZTIwMWE2YTY1MTY0YTI5OWU1MzA1ODk0ZmYxY2I4NA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:03:30Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:03:30Z"}, "message": "[arm] Use standard option parsing code for detecting\n\n\nNow that the standard CPU and architecture option parsing code is\navailable in the driver we can use the main CPU and architecture data\ntables for driving the automatic enabling of Thumb code.\n\nDoing this requires that the driver script tell the parser whether or\nnot the target string is a CPU name or an architecture, but beyond\nthat it is just standard use of the new capabilities.\n\nWe do, however, now get some error checking if the target isn't\nrecognized, when previously we just ignored unknown targets and hoped\nthat a later pass would pick up on this.\n\n\t* config/arm/arm.h (TARGET_MODE_SPECS): Add additional parameter to\n\tcall to target_mode_check describing the type of option passed.\n\t* common/config/arm/arm-common.c (arm_arch_core_flag): Delete.\n\t(arm_target_thumb_only): Use arm_parse_arch_option_name or\n\tarm_parse_cpu_option_name to match parameters against list of\n\tavailable targets.\n\t* config/arm/parsecpu.awk (gen_comm_data): Don't generate\n\tarm_arch_core_flags data structure.\n\t* config/arm/arm-cpu_cdata.h: Regenerated.\n\nFrom-SVN: r249288", "tree": {"sha": "90a5ec606e0e1ad584c14dc5b1687f0dc36d95c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90a5ec606e0e1ad584c14dc5b1687f0dc36d95c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e53993efae201a6a65164a299e5305894ff1cb84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53993efae201a6a65164a299e5305894ff1cb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53993efae201a6a65164a299e5305894ff1cb84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53993efae201a6a65164a299e5305894ff1cb84/comments", "author": null, "committer": null, "parents": [{"sha": "435d12725b9d75e508c5508964d4b03cdcb80cb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435d12725b9d75e508c5508964d4b03cdcb80cb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435d12725b9d75e508c5508964d4b03cdcb80cb7"}], "stats": {"total": 1196, "additions": 60, "deletions": 1136}, "files": [{"sha": "9325207244a85758b689c3f0c8c6614552da4c7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53993efae201a6a65164a299e5305894ff1cb84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53993efae201a6a65164a299e5305894ff1cb84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e53993efae201a6a65164a299e5305894ff1cb84", "patch": "@@ -1,3 +1,15 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.h (TARGET_MODE_SPECS): Add additional parameter to\n+\tcall to target_mode_check describing the type of option passed.\n+\t* common/config/arm/arm-common.c (arm_arch_core_flag): Delete.\n+\t(arm_target_thumb_only): Use arm_parse_arch_option_name or\n+\tarm_parse_cpu_option_name to match parameters against list of\n+\tavailable targets.\n+\t* config/arm/parsecpu.awk (gen_comm_data): Don't generate\n+\tarm_arch_core_flags data structure.\n+\t* config/arm/arm-cpu_cdata.h: Regenerated.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* common/config/arm/arm-common.c (arm_initialize_isa): Moved here from"}, {"sha": "42f1ad49da59e2972d07c0ebe8490a5bcd2dd251", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53993efae201a6a65164a299e5305894ff1cb84/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53993efae201a6a65164a299e5305894ff1cb84/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=e53993efae201a6a65164a299e5305894ff1cb84", "patch": "@@ -143,12 +143,6 @@ arm_rewrite_march (int argc, const char **argv)\n   return arm_rewrite_selected_arch (argv[argc - 1]);\n }\n \n-struct arm_arch_core_flag\n-{\n-  const char *const name;\n-  const enum isa_feature isa_bits[isa_num_bits];\n-};\n-\n #include \"config/arm/arm-cpu-cdata.h\"\n \n /* Scan over a raw feature array BITS checking for BIT being present.\n@@ -167,26 +161,60 @@ check_isa_bits_for (const enum isa_feature* bits, enum isa_feature bit)\n \n /* Called by the driver to check whether the target denoted by current\n    command line options is a Thumb-only target.  ARGV is an array of\n-   -march and -mcpu values (ie. it contains the rhs after the equal\n-   sign) and we use the last one of them to make a decision.  The\n-   number of elements in ARGV is given in ARGC.  */\n+   tupples (normally only one) where the first element of the tupple\n+   is 'cpu' or 'arch' and the second is the option passed to the\n+   compiler for that.  An architecture tupple is always taken in\n+   preference to a cpu tupple and the last of each type always\n+   overrides any earlier setting.  */\n+\n const char *\n arm_target_thumb_only (int argc, const char **argv)\n {\n-  unsigned int opt;\n+  const char *arch = NULL;\n+  const char *cpu = NULL;\n+\n+  if (argc % 2 != 0)\n+    fatal_error (input_location,\n+\t\t \"%%:target_mode_check takes an even number of parameters\");\n \n-  if (argc)\n+  while (argc)\n     {\n-      for (opt = 0; opt < (ARRAY_SIZE (arm_arch_core_flags)); opt++)\n-\tif ((strcmp (argv[argc - 1], arm_arch_core_flags[opt].name) == 0)\n-\t    && !check_isa_bits_for (arm_arch_core_flags[opt].isa_bits,\n-\t\t\t\t    isa_bit_notm))\n-\t  return \"-mthumb\";\n+      if (strcmp (argv[0], \"arch\") == 0)\n+\tarch = argv[1];\n+      else if (strcmp (argv[0], \"cpu\") == 0)\n+\tcpu = argv[1];\n+      else\n+\tfatal_error (input_location,\n+\t\t     \"unrecognized option passed to %%:target_mode_check\");\n+      argc -= 2;\n+      argv += 2;\n+    }\n \n-      return NULL;\n+  /* No architecture, or CPU, has option extensions that change\n+     whether or not we have a Thumb-only device, so there is no need\n+     to scan any option extensions specified.  */\n+\n+  /* If the architecture is specified, that overrides any CPU setting.  */\n+  if (arch)\n+    {\n+      const arch_option *arch_opt\n+\t= arm_parse_arch_option_name (all_architectures, \"-march\", arch);\n+\n+      if (arch_opt && !check_isa_bits_for (arch_opt->common.isa_bits,\n+\t\t\t\t\t   isa_bit_notm))\n+\treturn \"-mthumb\";\n     }\n-  else\n-    return NULL;\n+  else if (cpu)\n+    {\n+      const cpu_option *cpu_opt\n+\t= arm_parse_cpu_option_name (all_cores, \"-mcpu\", cpu);\n+\n+      if (cpu_opt && !check_isa_bits_for (cpu_opt->common.isa_bits,\n+\t\t\t\t\t  isa_bit_notm))\n+\treturn \"-mthumb\";\n+    }\n+\n+  return NULL;\n }\n \n /* List the permitted CPU option names.  If TARGET is a near miss for an"}, {"sha": "6c674dacef1e643bd445d8cd1046f520d4a5053b", "filename": "gcc/config/arm/arm-cpu-cdata.h", "status": "modified", "additions": 0, "deletions": 1078, "changes": 1078, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53993efae201a6a65164a299e5305894ff1cb84/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53993efae201a6a65164a299e5305894ff1cb84/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h?ref=e53993efae201a6a65164a299e5305894ff1cb84", "patch": "@@ -348,22 +348,6 @@ static const cpu_arch_extension cpu_opttab_exynosm1[] = {\n   { NULL, false, {isa_nobit}}\n };\n \n-static const cpu_arch_extension cpu_opttab_falkor[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_qdf24xx[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n static const cpu_arch_extension cpu_opttab_xgene1[] = {\n   {\n     \"crypto\", false,\n@@ -1574,32 +1558,6 @@ const cpu_option all_cores[] =\n     },\n     TARGET_ARCH_armv8_a\n   },\n-  {\n-    {\n-      \"falkor\",\n-      cpu_opttab_falkor,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"qdf24xx\",\n-      cpu_opttab_qdf24xx,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n   {\n     {\n       \"xgene1\",\n@@ -2600,1039 +2558,3 @@ const arm_fpu_desc all_fpus[] =\n     }\n   },\n };\n-static const struct arm_arch_core_flag arm_arch_core_flags[] =\n-{\n-  {\n-    \"arm2\",\n-    {\n-      ISA_ARMv2,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm250\",\n-    {\n-      ISA_ARMv2,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm3\",\n-    {\n-      ISA_ARMv2,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm6\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm60\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm600\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm610\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm620\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm7\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm7d\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm7di\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm70\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm700\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm700i\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm710\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm720\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm710c\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm7100\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm7500\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm7500fe\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm7m\",\n-    {\n-      ISA_ARMv3m,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm7dm\",\n-    {\n-      ISA_ARMv3m,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm7dmi\",\n-    {\n-      ISA_ARMv3m,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm8\",\n-    {\n-      ISA_ARMv4,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm810\",\n-    {\n-      ISA_ARMv4,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"strongarm\",\n-    {\n-      ISA_ARMv4,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"strongarm110\",\n-    {\n-      ISA_ARMv4,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"strongarm1100\",\n-    {\n-      ISA_ARMv4,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"strongarm1110\",\n-    {\n-      ISA_ARMv4,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"fa526\",\n-    {\n-      ISA_ARMv4,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"fa626\",\n-    {\n-      ISA_ARMv4,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm7tdmi\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm7tdmi-s\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm710t\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm720t\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm740t\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm9\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm9tdmi\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm920\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm920t\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm922t\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm940t\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"ep9312\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm10tdmi\",\n-    {\n-      ISA_ARMv5t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm1020t\",\n-    {\n-      ISA_ARMv5t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm9e\",\n-    {\n-      ISA_ARMv5te,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm946e-s\",\n-    {\n-      ISA_ARMv5te,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm966e-s\",\n-    {\n-      ISA_ARMv5te,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm968e-s\",\n-    {\n-      ISA_ARMv5te,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm10e\",\n-    {\n-      ISA_ARMv5te,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm1020e\",\n-    {\n-      ISA_ARMv5te,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm1022e\",\n-    {\n-      ISA_ARMv5te,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"xscale\",\n-    {\n-      ISA_ARMv5te,\n-      isa_bit_xscale,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"iwmmxt\",\n-    {\n-      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"iwmmxt2\",\n-    {\n-      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"fa606te\",\n-    {\n-      ISA_ARMv5te,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"fa626te\",\n-    {\n-      ISA_ARMv5te,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"fmp626\",\n-    {\n-      ISA_ARMv5te,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"fa726te\",\n-    {\n-      ISA_ARMv5te,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm926ej-s\",\n-    {\n-      ISA_ARMv5tej,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm1026ej-s\",\n-    {\n-      ISA_ARMv5tej,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm1136j-s\",\n-    {\n-      ISA_ARMv6j,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm1136jf-s\",\n-    {\n-      ISA_ARMv6j,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm1176jz-s\",\n-    {\n-      ISA_ARMv6kz,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm1176jzf-s\",\n-    {\n-      ISA_ARMv6kz,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"mpcorenovfp\",\n-    {\n-      ISA_ARMv6k,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"mpcore\",\n-    {\n-      ISA_ARMv6k,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm1156t2-s\",\n-    {\n-      ISA_ARMv6t2,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"arm1156t2f-s\",\n-    {\n-      ISA_ARMv6t2,\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-m1\",\n-    {\n-      ISA_ARMv6m,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-m0\",\n-    {\n-      ISA_ARMv6m,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-m0plus\",\n-    {\n-      ISA_ARMv6m,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-m1.small-multiply\",\n-    {\n-      ISA_ARMv6m,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-m0.small-multiply\",\n-    {\n-      ISA_ARMv6m,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-m0plus.small-multiply\",\n-    {\n-      ISA_ARMv6m,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"generic-armv7-a\",\n-    {\n-      ISA_ARMv7a,\n-      ISA_VFPv3,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a5\",\n-    {\n-      ISA_ARMv7a,\n-      ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a7\",\n-    {\n-      ISA_ARMv7ve,\n-      ISA_VFPv4,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a8\",\n-    {\n-      ISA_ARMv7a,\n-      ISA_VFPv3,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a9\",\n-    {\n-      ISA_ARMv7a,\n-      ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a12\",\n-    {\n-      ISA_ARMv7ve,\n-      ISA_VFPv4,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a15\",\n-    {\n-      ISA_ARMv7ve,\n-      ISA_VFPv4,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a17\",\n-    {\n-      ISA_ARMv7ve,\n-      ISA_VFPv4,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-r4\",\n-    {\n-      ISA_ARMv7r,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-r4f\",\n-    {\n-      ISA_ARMv7r,\n-      ISA_VFPv3,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-r5\",\n-    {\n-      ISA_ARMv7r,\n-      ISA_VFPv3,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-r7\",\n-    {\n-      ISA_ARMv7r,\n-      ISA_VFPv3,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-r8\",\n-    {\n-      ISA_ARMv7r,\n-      ISA_VFPv3,ISA_FP_DBL,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-m7\",\n-    {\n-      ISA_ARMv7em,\n-      ISA_FPv5,ISA_FP_DBL,\n-      isa_quirk_no_volatile_ce,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-m4\",\n-    {\n-      ISA_ARMv7em,\n-      ISA_VFPv4,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-m3\",\n-    {\n-      ISA_ARMv7m,\n-      isa_quirk_cm3_ldrd,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"marvell-pj4\",\n-    {\n-      ISA_ARMv7a,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a15.cortex-a7\",\n-    {\n-      ISA_ARMv7ve,\n-      ISA_VFPv4,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a17.cortex-a7\",\n-    {\n-      ISA_ARMv7ve,\n-      ISA_VFPv4,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a32\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a35\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a53\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a57\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a72\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a73\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"exynos-m1\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"xgene1\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a57.cortex-a53\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a72.cortex-a53\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a73.cortex-a35\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-a73.cortex-a53\",\n-    {\n-      ISA_ARMv8a,\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-m23\",\n-    {\n-      ISA_ARMv8m_base,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"cortex-m33\",\n-    {\n-      ISA_ARMv8m_main,\n-      ISA_FPv5,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv2\",\n-    {\n-      ISA_ARMv2,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv2a\",\n-    {\n-      ISA_ARMv2,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv3\",\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv3m\",\n-    {\n-      ISA_ARMv3m,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv4\",\n-    {\n-      ISA_ARMv4,isa_bit_mode26,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv4t\",\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv5\",\n-    {\n-      ISA_ARMv5,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv5t\",\n-    {\n-      ISA_ARMv5t,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv5e\",\n-    {\n-      ISA_ARMv5e,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv5te\",\n-    {\n-      ISA_ARMv5te,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv5tej\",\n-    {\n-      ISA_ARMv5tej,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv6\",\n-    {\n-      ISA_ARMv6,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv6j\",\n-    {\n-      ISA_ARMv6j,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv6k\",\n-    {\n-      ISA_ARMv6k,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv6z\",\n-    {\n-      ISA_ARMv6z,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv6kz\",\n-    {\n-      ISA_ARMv6kz,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv6zk\",\n-    {\n-      ISA_ARMv6kz,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv6t2\",\n-    {\n-      ISA_ARMv6t2,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv6-m\",\n-    {\n-      ISA_ARMv6m,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv6s-m\",\n-    {\n-      ISA_ARMv6m,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv7\",\n-    {\n-      ISA_ARMv7,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv7-a\",\n-    {\n-      ISA_ARMv7a,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv7ve\",\n-    {\n-      ISA_ARMv7ve,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv7-r\",\n-    {\n-      ISA_ARMv7r,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv7-m\",\n-    {\n-      ISA_ARMv7m,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv7e-m\",\n-    {\n-      ISA_ARMv7em,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv8-a\",\n-    {\n-      ISA_ARMv8a,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv8.1-a\",\n-    {\n-      ISA_ARMv8_1a,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv8.2-a\",\n-    {\n-      ISA_ARMv8_2a,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv8-m.base\",\n-    {\n-      ISA_ARMv8m_base,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"armv8-m.main\",\n-    {\n-      ISA_ARMv8m_main,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"iwmmxt\",\n-    {\n-      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n-      isa_nobit\n-    },\n-  },\n-  {\n-    \"iwmmxt2\",\n-    {\n-      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n-      isa_nobit\n-    },\n-  },\n-};\n-"}, {"sha": "590755e3fa08f66b2dfb7c4097fc86e6755441ab", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53993efae201a6a65164a299e5305894ff1cb84/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53993efae201a6a65164a299e5305894ff1cb84/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e53993efae201a6a65164a299e5305894ff1cb84", "patch": "@@ -2262,7 +2262,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    - an array of -mcpu values if any is given;\n    - an empty array.  */\n #define TARGET_MODE_SPECS\t\t\t\t\t\t\\\n-  \" %{!marm:%{!mthumb:%:target_mode_check(%{march=*:%*;mcpu=*:%*;:})}}\"\n+  \" %{!marm:%{!mthumb:%:target_mode_check(%{march=*:arch %*;mcpu=*:cpu %*;:})}}\"\n \n #define DRIVER_SELF_SPECS MCPU_MTUNE_NATIVE_SPECS TARGET_MODE_SPECS\n #define TARGET_SUPPORTS_WIDE_INT 1"}, {"sha": "3d6ca4d36ba176a1134c8992aa48c6f5fc978af7", "filename": "gcc/config/arm/parsecpu.awk", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53993efae201a6a65164a299e5305894ff1cb84/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53993efae201a6a65164a299e5305894ff1cb84/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=e53993efae201a6a65164a299e5305894ff1cb84", "patch": "@@ -288,44 +288,6 @@ function gen_comm_data () {\n     }\n \n     print \"};\"\n-\n-    print \"static const struct arm_arch_core_flag arm_arch_core_flags[] =\"\n-    print \"{\"\n-\n-    ncpus = split (cpu_list, cpus)\n-\n-    for (n = 1; n <= ncpus; n++) {\n-\tprint \"  {\"\n-\tprint \"    \\\"\" cpus[n] \"\\\",\"\n-\t# Just truncate the architecture name at the beginning of the\n-\t# extensions.  We don't need any of those here (at present).\n-\tarch_name = cpu_arch[cpus[n]];\n-\tsub(\"+.*\", \"\", arch_name)\n-\tif (! (arch_name in arch_isa)) {\n-\t    fatal(\"unknown arch \" arch_name \" for cpu \" cpus[n])\n-\t}\n-\tprint \"    {\"\n-\tprint \"      \" arch_isa[arch_name] \",\"\n-\tif (cpus[n] in cpu_fpu)\tprint \"      \" fpu_isa[cpu_fpu[cpus[n]]] \",\"\n-\tif (cpus[n] in cpu_isa)\tprint \"      \" cpu_isa[cpus[n]] \",\"\n-\tprint \"      isa_nobit\"\n-\tprint \"    },\"\n-\tprint \"  },\"\n-    }\n-\n-    narchs = split (arch_list, archs)\n-\n-    for (n = 1; n <= narchs; n++) {\n-\tprint \"  {\"\n-\tprint \"    \\\"\" archs[n] \"\\\",\"\n-\tprint \"    {\"\n-\tprint \"      \" arch_isa[archs[n]] \",\"\n-\tprint \"      isa_nobit\"\n-\tprint \"    },\"\n-\tprint \"  },\"\n-    }\n-\n-    print \"};\\n\"\n }\n \n function gen_md () {"}]}