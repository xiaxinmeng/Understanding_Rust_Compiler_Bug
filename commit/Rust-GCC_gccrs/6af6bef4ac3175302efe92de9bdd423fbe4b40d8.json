{"sha": "6af6bef4ac3175302efe92de9bdd423fbe4b40d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmNmJlZjRhYzMxNzUzMDJlZmU5MmRlOWJkZDQyM2ZiZTRiNDBkOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-07-01T12:23:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-07-01T12:23:54Z"}, "message": "Implement N4502, the C++ Detection Idiom.\n\n\t* doc/xml/manual/status_cxx2017.xml: Update status table.\n\t* include/experimental/type_traits (void_t, is_detected,\n\tis_detected_v, detected_t, detected_or, detected_or_t,\n\tis_detected_exact, is_detected_exact_v, is_detected_convertible,\n\tis_detected_convertible_v): Define.\n\t* include/std/type_traits (__detector, __detected_or, __detected_or_t,\n\t__detected_or_t_): Define.\n\t* testsuite/experimental/type_traits/detection.cc: New.\n\nFrom-SVN: r225242", "tree": {"sha": "56ae96f2abe3a4119a2127c4349e216f5f957cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56ae96f2abe3a4119a2127c4349e216f5f957cda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6af6bef4ac3175302efe92de9bdd423fbe4b40d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af6bef4ac3175302efe92de9bdd423fbe4b40d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af6bef4ac3175302efe92de9bdd423fbe4b40d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af6bef4ac3175302efe92de9bdd423fbe4b40d8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9735e6ea8eda3f2707cbc46a153f2d271d62e09c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9735e6ea8eda3f2707cbc46a153f2d271d62e09c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9735e6ea8eda3f2707cbc46a153f2d271d62e09c"}], "stats": {"total": 187, "additions": 185, "deletions": 2}, "files": [{"sha": "e349937100cc41f4f472bfe1eedff4ef00ce2df0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af6bef4ac3175302efe92de9bdd423fbe4b40d8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af6bef4ac3175302efe92de9bdd423fbe4b40d8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6af6bef4ac3175302efe92de9bdd423fbe4b40d8", "patch": "@@ -1,3 +1,14 @@\n+2015-07-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2017.xml: Update status table.\n+\t* include/experimental/type_traits (void_t, is_detected,\n+\tis_detected_v, detected_t, detected_or, detected_or_t,\n+\tis_detected_exact, is_detected_exact_v, is_detected_convertible,\n+\tis_detected_convertible_v): Define.\n+\t* include/std/type_traits (__detector, __detected_or, __detected_or_t,\n+\t__detected_or_t_): Define.\n+\t* testsuite/experimental/type_traits/detection.cc: New.\n+\n 2015-06-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/Makefile.am (stamp-pdf-doxygen): Grep for LaTeX errors in log."}, {"sha": "07e2dbeac398cb03d740c80058b9d1b69125cc9c", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af6bef4ac3175302efe92de9bdd423fbe4b40d8/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af6bef4ac3175302efe92de9bdd423fbe4b40d8/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=6af6bef4ac3175302efe92de9bdd423fbe4b40d8", "patch": "@@ -328,14 +328,13 @@ not in any particular release.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4502.pdf\">\n \t  N4502\n \t</link>\n       </entry>\n       <entry> Support for the C++ Detection Idiom, V2 </entry>\n-      <entry>N</entry>\n+      <entry>Y</entry>\n       <entry>Library Fundamentals 2 TS</entry>\n     </row>\n "}, {"sha": "b0ed3b0fa664caedd25b22aa041c01609d90a119", "filename": "libstdc++-v3/include/experimental/type_traits", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af6bef4ac3175302efe92de9bdd423fbe4b40d8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af6bef4ac3175302efe92de9bdd423fbe4b40d8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits?ref=6af6bef4ac3175302efe92de9bdd423fbe4b40d8", "patch": "@@ -220,6 +220,59 @@ template <typename _From, typename _To>\n   // raw_invocation_type_t (still unimplemented)\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n+\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+#define __cpp_lib_experimental_detect 201505\n+\n+// [meta.detect]\n+\n+template<typename...> using void_t = void;\n+\n+struct nonesuch\n+{\n+  nonesuch() = delete;\n+  ~nonesuch() = delete;\n+  nonesuch(nonesuch const&) = delete;\n+  void operator=(nonesuch const&) = delete;\n+};\n+\n+template<template<typename...> class _Op, typename... _Args>\n+  using is_detected\n+    = typename std::__detector<nonesuch, void, _Op, _Args...>::value_t;\n+\n+template<template<typename...> class _Op, typename... _Args>\n+  constexpr bool is_detected_v = is_detected<_Op, _Args...>::value;\n+\n+template<template<typename...> class _Op, typename... _Args>\n+  using detected_t\n+    = typename std::__detector<nonesuch, void, _Op, _Args...>::type;\n+\n+template<typename _Default, template<typename...> class _Op, typename... _Args>\n+  using detected_or = std::__detected_or<_Default, _Op, _Args...>;\n+\n+template<typename _Default, template<typename...> class _Op, typename... _Args>\n+  using detected_or_t = typename detected_or<_Default, _Op, _Args...>::type;\n+\n+template<typename Expected, template<typename...> class _Op, typename... _Args>\n+  using is_detected_exact = is_same<Expected, detected_t<_Op, _Args...>>;\n+\n+template<typename Expected, template<typename...> class _Op, typename... _Args>\n+  constexpr bool is_detected_exact_v\n+    = is_detected_exact<Expected, _Op, _Args...>::value;\n+\n+template<typename _To, template<typename...> class _Op, typename... _Args>\n+  using is_detected_convertible\n+    = is_convertible<detected_t<_Op, _Args...>, _To>;\n+\n+template<typename _To, template<typename...> class _Op, typename... _Args>\n+  constexpr bool is_detected_convertible_v\n+    = is_detected_convertible<_To, _Op, _Args...>::value;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n } // namespace experimental\n } // namespace std\n "}, {"sha": "55ca9167b7b37ed45d75c27d57acba944c265310", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af6bef4ac3175302efe92de9bdd423fbe4b40d8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af6bef4ac3175302efe92de9bdd423fbe4b40d8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=6af6bef4ac3175302efe92de9bdd423fbe4b40d8", "patch": "@@ -2417,6 +2417,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename...> using void_t = void;\n #endif\n \n+  /// Implementation of the detection idiom (negative case).\n+  template<typename _Default, typename _AlwaysVoid,\n+\t   template<typename...> class _Op, typename... _Args>\n+    struct __detector\n+    {\n+      using value_t = false_type;\n+      using type = _Default;\n+    };\n+\n+  /// Implementation of the detection idiom (positive case).\n+  template<typename _Default, template<typename...> class _Op,\n+\t    typename... _Args>\n+    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>\n+    {\n+      using value_t = true_type;\n+      using type = _Op<_Args...>;\n+    };\n+\n+  // Detect whether _Op<_Args...> is a valid type, use _Default if not.\n+  template<typename _Default, template<typename...> class _Op,\n+\t   typename... _Args>\n+    using __detected_or = __detector<_Default, void, _Op, _Args...>;\n+\n+  // _Op<_Args...> if that is a valid type, otherwise _Default.\n+  template<typename _Default, template<typename...> class _Op,\n+\t   typename... _Args>\n+    using __detected_or_t\n+      = typename __detected_or<_Default, _Op, _Args...>::type;\n+\n+  // _Op<_Args...> if that is a valid type, otherwise _Default<_Args...>.\n+  template<template<typename...> class _Default,\n+\t   template<typename...> class _Op, typename... _Args>\n+    using __detected_or_t_ =\n+      __detected_or_t<_Default<_Args...>, _Op, _Args...>;\n+\n   /// @} group metaprogramming\n \n   /**"}, {"sha": "45d06921f05cc11f27bf5187cc584824a778098a", "filename": "libstdc++-v3/testsuite/experimental/type_traits/detection.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af6bef4ac3175302efe92de9bdd423fbe4b40d8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fdetection.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af6bef4ac3175302efe92de9bdd423fbe4b40d8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fdetection.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fdetection.cc?ref=6af6bef4ac3175302efe92de9bdd423fbe4b40d8", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+#include <experimental/type_traits>\n+\n+using std::declval;\n+using std::ptrdiff_t;\n+using std::experimental::is_detected;\n+using std::experimental::is_detected_exact;\n+using std::experimental::detected_or_t;\n+using std::experimental::is_same_v;\n+\n+// Examples taken from N4502\n+\n+// archetypal helper alias for a copy assignment operation:\n+template <class T>\n+using copy_assign_t = decltype(declval<T&>() = declval<T const &>());\n+\n+// plausible implementation for the is_assignable type trait:\n+template <class T>\n+  using is_copy_assignable = is_detected<copy_assign_t, T>;\n+\n+// plausible implementation for an augmented is_assignable type trait\n+// that also checks the return type:\n+template <class T>\n+  using is_canonical_copy_assignable = is_detected_exact<T&, copy_assign_t, T>;\n+\n+struct A { };\n+struct B { B& operator=(const B&); };\n+struct C { void operator=(const C&); };\n+struct D { D& operator=(D&); };\n+struct E { E& operator=(E&&); };\n+\n+static_assert( is_copy_assignable<A>::value,  \"A is copy assignable\" );\n+static_assert( is_copy_assignable<B>::value,  \"B is copy assignable\" );\n+static_assert( is_copy_assignable<C>::value,  \"C is copy assignable\" );\n+static_assert( !is_copy_assignable<D>::value, \"D is not copy assignable\" );\n+static_assert( !is_copy_assignable<E>::value,  \"E is not copy assignable\" );\n+\n+static_assert( is_canonical_copy_assignable<A>::value,\n+               \"A has canonical copy assignment\" );\n+static_assert( is_canonical_copy_assignable<B>::value,\n+               \"B has canonical copy assignment\" );\n+static_assert( !is_canonical_copy_assignable<C>::value,\n+               \"C does not have canonical copy assignment\" );\n+static_assert( !is_canonical_copy_assignable<D>::value,\n+               \"D does not have canonical copy assignment\" );\n+static_assert( !is_canonical_copy_assignable<E>::value,\n+               \"E does not have canonical copy assignment\" );\n+\n+// archetypal helper alias for a particular type member:\n+template <class T>\n+  using diff_t = typename T::difference_type;\n+// alias the type member, if it exists, otherwise alias ptrdiff_t:\n+template <class Ptr>\n+  using difference_type = detected_or_t<ptrdiff_t, diff_t, Ptr>;\n+\n+struct has { using difference_type = char; };\n+struct has_not { };\n+struct inherits : has { };\n+struct hides : private has { };\n+struct reveals : private has { using has::difference_type; };\n+\n+static_assert( is_same_v<difference_type<has>,      char>,      \"has\" );\n+static_assert( is_same_v<difference_type<has_not>,  ptrdiff_t>, \"has not\" );\n+static_assert( is_same_v<difference_type<inherits>, char>,      \"inherits\" );\n+static_assert( is_same_v<difference_type<hides>,    ptrdiff_t>, \"hides\" );\n+static_assert( is_same_v<difference_type<reveals>,  char>,      \"reveals\" );"}]}