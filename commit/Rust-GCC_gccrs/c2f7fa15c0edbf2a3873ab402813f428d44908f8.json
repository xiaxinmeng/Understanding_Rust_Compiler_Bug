{"sha": "c2f7fa15c0edbf2a3873ab402813f428d44908f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJmN2ZhMTVjMGVkYmYyYTM4NzNhYjQwMjgxM2Y0MjhkNDQ5MDhmOA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-06-30T12:17:52Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-06-30T12:17:52Z"}, "message": "coretypes.h (tls_model): Add TLS_MODEL_NONE as 0.\n\n\t* coretypes.h (tls_model): Add TLS_MODEL_NONE as 0.\n\t* tree.h (struct tree_decl): New field `tls_model'.\n\t(DECL_TLS_MODEL): New.\n\t(DECL_THREAD_LOCAL_P): Rename from DECL_THREAD_LOCAL, make it\n\ta predicate.\n\t* rtl.h (decl_default_tls_model): Add prototype for it.\n\t* varasm.c (decl_tls_model): Rewritten and renamed to ...\n\t(decl_default_tls_model): ... this.\n\t(default_encode_section_info): Use DECL_TLS_MODEL instead of\n\tdecl_tls_model.\n\t(assemble_variable): Replace DECL_THREAD_LOCAL with\n\tDECL_THREAD_LOCAL_P.\n\t(default_section_type_flags_1): Likewise.\n\t(categorize_decl_for_section): Likewise.\n\t* tree.c (staticp): Likewise.\n\t(recompute_tree_invarant_for_addr_expr): Likewise.\n\t* drawf2out (loc_descriptor_from_tree_1): Likewise.\n\t* c-decl.c (diagnose_mismatched_decls): Likewise.\n\twith DECL_THREAD_LOCAL_P.\n\t(start_decl): Likewise.\n\t* print-tree.c (print_node): Likewise.  Print the TLS model.\n\t(grokdeclarator): Set the default DECL_TLS_MODEL here.\n\t* c-common.c (handle_tls_model_attribute): Rewrite to set the\n\tTLS model up based on the attribute.  Never add the attribute\n\tto the decl's attributes list.\n\t* config/sparc/sol2.h (ASM_DECLARE_OBJECT_NAME): Replace\n\tDECL_THREAD_LOCAL with DECL_THREAD_LOCAL_P.\n\ncp/\n\t* decl.c (start_decl): Replace DECL_THREAD_LOCAL with\n\tDECL_THREAD_LOCAL_P.\n\t(cp_finish_decl): Likewise.\n\t(grokvardecl): Set the default DECL_TLS_MODEL here.\n\nFrom-SVN: r101465", "tree": {"sha": "816c741b3c00522d35a8c6d2c7612f26999ef518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/816c741b3c00522d35a8c6d2c7612f26999ef518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2f7fa15c0edbf2a3873ab402813f428d44908f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f7fa15c0edbf2a3873ab402813f428d44908f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2f7fa15c0edbf2a3873ab402813f428d44908f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f7fa15c0edbf2a3873ab402813f428d44908f8/comments", "author": null, "committer": null, "parents": [{"sha": "89632019a9e0a159df1bd6fcd76680257e846bd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89632019a9e0a159df1bd6fcd76680257e846bd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89632019a9e0a159df1bd6fcd76680257e846bd6"}], "stats": {"total": 194, "additions": 124, "deletions": 70}, "files": [{"sha": "4897a1e93518a05cf4ae42eaad8809a18b54c4ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -1,3 +1,33 @@\n+2005-06-30  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* coretypes.h (tls_model): Add TLS_MODEL_NONE as 0.\n+\t* tree.h (struct tree_decl): New field `tls_model'.\n+\t(DECL_TLS_MODEL): New.\n+\t(DECL_THREAD_LOCAL_P): Rename from DECL_THREAD_LOCAL, make it\n+\ta predicate.\n+\t* rtl.h (decl_default_tls_model): Add prototype for it.\n+\t* varasm.c (decl_tls_model): Rewritten and renamed to ...\n+\t(decl_default_tls_model): ... this.\n+\t(default_encode_section_info): Use DECL_TLS_MODEL instead of\n+\tdecl_tls_model.\n+\t(assemble_variable): Replace DECL_THREAD_LOCAL with\n+\tDECL_THREAD_LOCAL_P.\n+\t(default_section_type_flags_1): Likewise.\n+\t(categorize_decl_for_section): Likewise.\n+\t* tree.c (staticp): Likewise.\n+\t(recompute_tree_invarant_for_addr_expr): Likewise.\n+\t* drawf2out (loc_descriptor_from_tree_1): Likewise.\n+\t* c-decl.c (diagnose_mismatched_decls): Likewise.\n+\twith DECL_THREAD_LOCAL_P.\n+\t(start_decl): Likewise.\n+\t* print-tree.c (print_node): Likewise.  Print the TLS model.\n+\t(grokdeclarator): Set the default DECL_TLS_MODEL here.\n+\t* c-common.c (handle_tls_model_attribute): Rewrite to set the\n+\tTLS model up based on the attribute.  Never add the attribute\n+\tto the decl's attributes list.\n+\t* config/sparc/sol2.h (ASM_DECLARE_OBJECT_NAME): Replace\n+\tDECL_THREAD_LOCAL with DECL_THREAD_LOCAL_P.\n+\n 2005-06-30  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR testsuite/21967\n@@ -933,7 +963,7 @@\n \tconfig/sh/linux.h (FUNCTION_PROFILER): Constify a char*.\n \n 2005-06-20  Roger Sayle  <roger@eyesopen.com>\n-2005-06-20  Fariborz Jahanian <fjahanian@apple.com>\n+\t    Fariborz Jahanian <fjahanian@apple.com>\n \n \t* combine.c (simplify_set): Simplify setting of CC register\n \tby removing redundant compare with 0 on RHS."}, {"sha": "997fc717749709defa85031eb97322f0e2a2cc60", "filename": "gcc/c-common.c", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -4833,35 +4833,38 @@ static tree\n handle_tls_model_attribute (tree *node, tree name, tree args,\n \t\t\t    int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n+  tree id;\n   tree decl = *node;\n+  enum tls_model kind;\n \n-  if (!DECL_THREAD_LOCAL (decl))\n+  *no_add_attrs = true;\n+\n+  if (!DECL_THREAD_LOCAL_P (decl))\n     {\n       warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n-      *no_add_attrs = true;\n+      return NULL_TREE;\n     }\n-  else\n-    {\n-      tree id;\n \n-      id = TREE_VALUE (args);\n-      if (TREE_CODE (id) != STRING_CST)\n-\t{\n-\t  error (\"tls_model argument not a string\");\n-\t  *no_add_attrs = true;\n-\t  return NULL_TREE;\n-\t}\n-      if (strcmp (TREE_STRING_POINTER (id), \"local-exec\")\n-\t  && strcmp (TREE_STRING_POINTER (id), \"initial-exec\")\n-\t  && strcmp (TREE_STRING_POINTER (id), \"local-dynamic\")\n-\t  && strcmp (TREE_STRING_POINTER (id), \"global-dynamic\"))\n-\t{\n-\t  error (\"tls_model argument must be one of \\\"local-exec\\\", \\\"initial-exec\\\", \\\"local-dynamic\\\" or \\\"global-dynamic\\\"\");\n-\t  *no_add_attrs = true;\n-\t  return NULL_TREE;\n-\t}\n+  kind = DECL_TLS_MODEL (decl);\n+  id = TREE_VALUE (args);\n+  if (TREE_CODE (id) != STRING_CST)\n+    {\n+      error (\"tls_model argument not a string\");\n+      return NULL_TREE;\n     }\n \n+  if (!strcmp (TREE_STRING_POINTER (id), \"local-exec\"))\n+    kind = TLS_MODEL_LOCAL_EXEC;\n+  else if (!strcmp (TREE_STRING_POINTER (id), \"initial-exec\"))\n+    kind = TLS_MODEL_INITIAL_EXEC;\n+  else if (!strcmp (TREE_STRING_POINTER (id), \"local-dynamic\"))\n+    kind = optimize ? TLS_MODEL_LOCAL_DYNAMIC : TLS_MODEL_GLOBAL_DYNAMIC;\n+  else if (!strcmp (TREE_STRING_POINTER (id), \"global-dynamic\"))\n+    kind = TLS_MODEL_GLOBAL_DYNAMIC;\n+  else\n+    error (\"tls_model argument must be one of \\\"local-exec\\\", \\\"initial-exec\\\", \\\"local-dynamic\\\" or \\\"global-dynamic\\\"\");\n+\n+  DECL_TLS_MODEL (decl) = kind;\n   return NULL_TREE;\n }\n "}, {"sha": "667a28a17285401e0aff167509ce75755c686166", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -1384,9 +1384,9 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n     {\n       /* Only variables can be thread-local, and all declarations must\n \t agree on this property.  */\n-      if (DECL_THREAD_LOCAL (newdecl) != DECL_THREAD_LOCAL (olddecl))\n+      if (DECL_THREAD_LOCAL_P (newdecl) != DECL_THREAD_LOCAL_P (olddecl))\n \t{\n-\t  if (DECL_THREAD_LOCAL (newdecl))\n+\t  if (DECL_THREAD_LOCAL_P (newdecl))\n \t    error (\"%Jthread-local declaration of %qD follows \"\n \t\t   \"non-thread-local declaration\", newdecl, newdecl);\n \t  else\n@@ -3176,7 +3176,7 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n   if (TREE_CODE (decl) == VAR_DECL\n       && !initialized\n       && TREE_PUBLIC (decl)\n-      && !DECL_THREAD_LOCAL (decl)\n+      && !DECL_THREAD_LOCAL_P (decl)\n       && !flag_no_common)\n     DECL_COMMON (decl) = 1;\n \n@@ -4663,7 +4663,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \tif (threadp)\n \t  {\n \t    if (targetm.have_tls)\n-\t      DECL_THREAD_LOCAL (decl) = 1;\n+\t      DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n \t    else\n \t      /* A mere warning is sure to result in improper semantics\n \t\t at runtime.  Don't bother to allow this to compile.  */"}, {"sha": "4b3ee2d7f23435ecd3e3e5b5d652db1197351347", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -83,7 +83,7 @@ Boston, MA 02110-1301, USA.  */\n     {\t\t\t\t\t\t\t\t\\\n       HOST_WIDE_INT size;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n-      if (DECL_THREAD_LOCAL (DECL))\t\t\t\t\\\n+      if (DECL_THREAD_LOCAL_P (DECL))\t\t\t\t\\\n \tASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"tls_object\");\t\\\n       else\t\t\t\t\t\t\t\\\n \tASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\\"}, {"sha": "935f660217f20449f589644ee2df316b2cb27f51", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -54,7 +54,8 @@ struct cpp_reader;\n    or SYMBOL_REF.  This isn't used much, but both trees and RTL refer\n    to it, so it's here.  */\n enum tls_model {\n-  TLS_MODEL_GLOBAL_DYNAMIC = 1,\n+  TLS_MODEL_NONE,\n+  TLS_MODEL_GLOBAL_DYNAMIC,\n   TLS_MODEL_LOCAL_DYNAMIC,\n   TLS_MODEL_INITIAL_EXEC,\n   TLS_MODEL_LOCAL_EXEC"}, {"sha": "e7a5ca2388dd43889d06408e2326415f75f9e93e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -1,3 +1,10 @@\n+2005-06-30  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* decl.c (start_decl): Replace DECL_THREAD_LOCAL with\n+\tDECL_THREAD_LOCAL_P.\n+\t(cp_finish_decl): Likewise.\n+\t(grokvardecl): Set the default DECL_TLS_MODEL here.\n+\n 2005-06-28  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* cvt.c (ocp_convert): Use invalid_conversion hook."}, {"sha": "4379973448ee9daf61ba6d20765961ca1fdce102", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -3749,7 +3749,7 @@ start_decl (const cp_declarator *declarator,\n      produce errors about redefs; to do this we force variables into the\n      data segment.  */\n   DECL_COMMON (tem) = ((TREE_CODE (tem) != VAR_DECL\n-\t\t\t|| !DECL_THREAD_LOCAL (tem))\n+\t\t\t|| !DECL_THREAD_LOCAL_P (tem))\n \t\t       && (flag_conserve_space || ! TREE_PUBLIC (tem)));\n #endif\n \n@@ -4808,7 +4808,7 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n     {\n       /* Only PODs can have thread-local storage.  Other types may require\n \t various kinds of non-trivial initialization.  */\n-      if (DECL_THREAD_LOCAL (decl) && !pod_type_p (TREE_TYPE (decl)))\n+      if (DECL_THREAD_LOCAL_P (decl) && !pod_type_p (TREE_TYPE (decl)))\n \terror (\"%qD cannot be thread-local because it has non-POD type %qT\",\n \t       decl, TREE_TYPE (decl));\n       /* Convert the initializer to the type of DECL, if we have not\n@@ -4822,7 +4822,7 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n \t{\n \t  init = check_initializer (decl, init, flags, &cleanup);\n \t  /* Thread-local storage cannot be dynamically initialized.  */\n-\t  if (DECL_THREAD_LOCAL (decl) && init)\n+\t  if (DECL_THREAD_LOCAL_P (decl) && init)\n \t    {\n \t      error (\"%qD is thread-local and so cannot be dynamically \"\n \t\t     \"initialized\", decl);\n@@ -5884,7 +5884,7 @@ grokvardecl (tree type,\n   if (declspecs->specs[(int)ds_thread])\n     {\n       if (targetm.have_tls)\n-\tDECL_THREAD_LOCAL (decl) = 1;\n+\tDECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n       else\n \t/* A mere warning is sure to result in improper semantics\n \t   at runtime.  Don't bother to allow this to compile.  */"}, {"sha": "d16b809857de307d7602154cdd420dd89cc5d516", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -8951,7 +8951,7 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n       return loc_descriptor_from_tree_1 (TREE_OPERAND (loc, 0), 1);\n \n     case VAR_DECL:\n-      if (DECL_THREAD_LOCAL (loc))\n+      if (DECL_THREAD_LOCAL_P (loc))\n \t{\n \t  rtx rtl;\n "}, {"sha": "a5670e2f1b7c8b42471a44482989271b21d0b5f4", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -1009,7 +1009,7 @@ rest_of_handle_cse2 (void)\n   open_dump_file (DFI_cse2, current_function_decl);\n   if (dump_file)\n     dump_flow_info (dump_file);\n-  /* CFG is no longer maintained up-to-date.  */\n+\n   tem = cse_main (get_insns (), max_reg_num (), dump_file);\n \n   /* Run a pass to eliminate duplicated assignments to condition code"}, {"sha": "b251933da66604e59eb10297911ec3d06bb53a8e", "filename": "gcc/print-tree.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -357,8 +357,27 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n       if (TREE_CODE (node) == VAR_DECL && DECL_IN_TEXT_SECTION (node))\n \tfputs (\" in-text-section\", file);\n-      if (TREE_CODE (node) == VAR_DECL && DECL_THREAD_LOCAL (node))\n-\tfputs (\" thread-local\", file);\n+      if (TREE_CODE (node) == VAR_DECL && DECL_THREAD_LOCAL_P (node))\n+\t{\n+\t  enum tls_model kind = DECL_TLS_MODEL (node);\n+\t  switch (kind)\n+\t    {\n+\t      case TLS_MODEL_GLOBAL_DYNAMIC:\n+\t\tfputs (\" tls-global-dynamic\", file);\n+\t\tbreak;\n+\t      case TLS_MODEL_LOCAL_DYNAMIC:\n+\t\tfputs (\" tls-local-dynamic\", file);\n+\t\tbreak;\n+\t      case TLS_MODEL_INITIAL_EXEC:\n+\t\tfputs (\" tls-initial-exec\", file);\n+\t\tbreak;\n+\t      case TLS_MODEL_LOCAL_EXEC:\n+\t\tfputs (\" tls-local-exec\", file);\n+\t\tbreak;\n+\t      default:\n+\t\tgcc_unreachable ();\n+\t    }\n+\t}\n \n       if (TREE_CODE (node) == PARM_DECL && DECL_TRANSPARENT_UNION (node))\n \tfputs (\" transparent-union\", file);"}, {"sha": "92a15586f298a1cb5dabde9b9d82b6d470c16a2d", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -2089,7 +2089,8 @@ extern rtx emit_library_call_value (rtx, rtx, enum libcall_type,\n /* In varasm.c */\n extern int in_data_section (void);\n extern void init_varasm_once (void);\n-\n+extern enum tls_model decl_default_tls_model (tree);\n+  \n /* In rtl.c */\n extern void traverse_md_constants (int (*) (void **, void *), void *);\n struct md_constant { char *name, *value; };"}, {"sha": "9a747ac5c368f9f4904877390a9254353d8546cb", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -1652,7 +1652,7 @@ staticp (tree arg)\n \n     case VAR_DECL:\n       return ((TREE_STATIC (arg) || DECL_EXTERNAL (arg))\n-\t      && ! DECL_THREAD_LOCAL (arg)\n+\t      && ! DECL_THREAD_LOCAL_P (arg)\n \t      && ! DECL_NON_ADDR_CONST_P (arg)\n \t      ? arg : NULL);\n \n@@ -2480,7 +2480,8 @@ do { tree _node = (NODE); \\\n \t;\n       else if (decl_function_context (node) == current_function_decl\n \t       /* Addresses of thread-local variables are invariant.  */\n-\t       || (TREE_CODE (node) == VAR_DECL && DECL_THREAD_LOCAL (node)))\n+\t       || (TREE_CODE (node) == VAR_DECL\n+\t\t   && DECL_THREAD_LOCAL_P (node)))\n \ttc = false;\n       else\n \tti = tc = false;"}, {"sha": "802ab15ac263033b1ded701caa787f9d3264705c", "filename": "gcc/tree.h", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -2184,14 +2184,20 @@ extern void decl_debug_expr_insert (tree, tree);\n \n /* Nonzero means that the decl had its visibility specified rather than\n    being inferred.  */\n-#define DECL_VISIBILITY_SPECIFIED(NODE) (DECL_CHECK (NODE)->decl.visibility_specified)\n+#define DECL_VISIBILITY_SPECIFIED(NODE) \\\n+  (DECL_CHECK (NODE)->decl.visibility_specified)\n \n /* In a FUNCTION_DECL, nonzero if the function cannot be inlined.  */\n #define DECL_UNINLINABLE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.uninlinable)\n \n+/* In a VAR_DECL, the model to use if the data should be allocated from\n+   thread-local storage.  */\n+#define DECL_TLS_MODEL(NODE) (VAR_DECL_CHECK (NODE)->decl.tls_model)\n+\n /* In a VAR_DECL, nonzero if the data should be allocated from\n    thread-local storage.  */\n-#define DECL_THREAD_LOCAL(NODE) (VAR_DECL_CHECK (NODE)->decl.thread_local_flag)\n+#define DECL_THREAD_LOCAL_P(NODE) \\\n+  (VAR_DECL_CHECK (NODE)->decl.tls_model != TLS_MODEL_NONE)\n \n /* In a FUNCTION_DECL, the saved representation of the body of the\n    entire function.  */\n@@ -2385,6 +2391,8 @@ struct tree_decl GTY(())\n   location_t locus;\n   unsigned int uid;\n   tree size;\n+\n+  /* 32 bits: */\n   ENUM_BITFIELD(machine_mode) mode : 8;\n \n   unsigned external_flag : 1;\n@@ -2413,10 +2421,11 @@ struct tree_decl GTY(())\n   ENUM_BITFIELD(built_in_class) built_in_class : 2;\n   unsigned pure_flag : 1;\n \n+  /* 32 bits: */\n   unsigned non_addressable : 1;\n   unsigned user_align : 1;\n   unsigned uninlinable : 1;\n-  unsigned thread_local_flag : 1;\n+  unsigned gimple_reg_flag : 1;\n   unsigned declared_inline_flag : 1;\n   ENUM_BITFIELD(symbol_visibility) visibility : 2;\n   unsigned visibility_specified : 1;\n@@ -2438,8 +2447,9 @@ struct tree_decl GTY(())\n   unsigned seen_in_bind_expr : 1;\n   unsigned novops_flag : 1;\n   unsigned has_value_expr : 1;\n-  unsigned gimple_reg_flag : 1;\n-  /* 7 unused bits.  */\n+\n+  ENUM_BITFIELD(tls_model) tls_model : 3;\n+  /* 5 unused bits.  */\n \n   union tree_decl_u1 {\n     /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is"}, {"sha": "9e3183dd9d6447c23cfec1c2d55de99c98ca2ab2", "filename": "gcc/varasm.c", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f7fa15c0edbf2a3873ab402813f428d44908f8/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c2f7fa15c0edbf2a3873ab402813f428d44908f8", "patch": "@@ -1716,7 +1716,7 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n   if (DECL_SECTION_NAME (decl) || dont_output_data)\n     ;\n   /* We don't implement common thread-local data at present.  */\n-  else if (DECL_THREAD_LOCAL (decl))\n+  else if (DECL_THREAD_LOCAL_P (decl))\n     {\n       if (DECL_COMMON (decl))\n \tsorry (\"thread-local COMMON data not implemented\");\n@@ -4745,31 +4745,12 @@ init_varasm_once (void)\n   const_alias_set = new_alias_set ();\n }\n \n-static enum tls_model\n-decl_tls_model (tree decl)\n+enum tls_model\n+decl_default_tls_model (tree decl)\n {\n   enum tls_model kind;\n-  tree attr = lookup_attribute (\"tls_model\", DECL_ATTRIBUTES (decl));\n   bool is_local;\n \n-  if (attr)\n-    {\n-      attr = TREE_VALUE (TREE_VALUE (attr));\n-      gcc_assert (TREE_CODE (attr) == STRING_CST);\n-      \n-      if (!strcmp (TREE_STRING_POINTER (attr), \"local-exec\"))\n-\tkind = TLS_MODEL_LOCAL_EXEC;\n-      else if (!strcmp (TREE_STRING_POINTER (attr), \"initial-exec\"))\n-\tkind = TLS_MODEL_INITIAL_EXEC;\n-      else if (!strcmp (TREE_STRING_POINTER (attr), \"local-dynamic\"))\n-\tkind = optimize ? TLS_MODEL_LOCAL_DYNAMIC : TLS_MODEL_GLOBAL_DYNAMIC;\n-      else if (!strcmp (TREE_STRING_POINTER (attr), \"global-dynamic\"))\n-\tkind = TLS_MODEL_GLOBAL_DYNAMIC;\n-      else\n-\tgcc_unreachable ();\n-      return kind;\n-    }\n-\n   is_local = targetm.binds_local_p (decl);\n   if (!flag_shlib)\n     {\n@@ -4778,6 +4759,7 @@ decl_tls_model (tree decl)\n       else\n \tkind = TLS_MODEL_INITIAL_EXEC;\n     }\n+\n   /* Local dynamic is inefficient when we're not combining the\n      parts of the address.  */\n   else if (optimize && is_local)\n@@ -4828,7 +4810,7 @@ default_section_type_flags_1 (tree decl, const char *name, int reloc,\n   if (decl && DECL_ONE_ONLY (decl))\n     flags |= SECTION_LINKONCE;\n \n-  if (decl && TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n+  if (decl && TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL_P (decl))\n     flags |= SECTION_TLS | SECTION_WRITE;\n \n   if (strcmp (name, \".bss\") == 0\n@@ -5106,7 +5088,7 @@ categorize_decl_for_section (tree decl, int reloc, int shlib)\n     ret = SECCAT_RODATA;\n \n   /* There are no read-only thread-local sections.  */\n-  if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n+  if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL_P (decl))\n     {\n       /* Note that this would be *just* SECCAT_BSS, except that there's\n \t no concept of a read-only thread-local-data section.  */\n@@ -5370,8 +5352,8 @@ default_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n     flags |= SYMBOL_FLAG_FUNCTION;\n   if (targetm.binds_local_p (decl))\n     flags |= SYMBOL_FLAG_LOCAL;\n-  if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n-    flags |= decl_tls_model (decl) << SYMBOL_FLAG_TLS_SHIFT;\n+  if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL_P (decl))\n+    flags |= DECL_TLS_MODEL (decl) << SYMBOL_FLAG_TLS_SHIFT;\n   else if (targetm.in_small_data_p (decl))\n     flags |= SYMBOL_FLAG_SMALL;\n   /* ??? Why is DECL_EXTERNAL ever set for non-PUBLIC names?  Without"}]}