{"sha": "c416c52bcdb120db5e8c53a51bd78c4360daf79b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQxNmM1MmJjZGIxMjBkYjVlOGM1M2E1MWJkNzhjNDM2MGRhZjc5Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-04-30T15:23:16Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-04-30T15:23:16Z"}, "message": "c++ ICE with nested requirement as default tpl parm[PR94827]\n\nTemplate headers are not incrementally updated as we parse its parameters.\nWe maintain a dummy level until the closing > when we replace the dummy with\na real parameter set.  requires processing was expecting a properly populated\narg_vec in current_template_parms, and then creates a self-mapping of parameters\nfrom that.  But we don't need to do that, just teach map_arguments to look at\nTREE_VALUE when args is NULL.\n\n\t* constraint.cc (map_arguments): If ARGS is null, it's a\n\tself-mapping of parms.\n\t(finish_nested_requirement): Do not pass argified\n\tcurrent_template_parms to normalization.\n\t(tsubst_nested_requirement): Don't assert no template parms.", "tree": {"sha": "c37424a18d319249f3e06ede532edc9e53030167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c37424a18d319249f3e06ede532edc9e53030167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c416c52bcdb120db5e8c53a51bd78c4360daf79b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c416c52bcdb120db5e8c53a51bd78c4360daf79b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c416c52bcdb120db5e8c53a51bd78c4360daf79b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c416c52bcdb120db5e8c53a51bd78c4360daf79b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1983f4582bbe060b7da83578acb9ed653681fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1983f4582bbe060b7da83578acb9ed653681fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1983f4582bbe060b7da83578acb9ed653681fc8"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "3c57945cecfd84641dcb8f7ec26cb035b057a072", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c416c52bcdb120db5e8c53a51bd78c4360daf79b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c416c52bcdb120db5e8c53a51bd78c4360daf79b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c416c52bcdb120db5e8c53a51bd78c4360daf79b", "patch": "@@ -1,3 +1,13 @@\n+2020-04-30  Jason Merrill  <jason@redhat.com>\n+\t    Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/94827\n+\t* constraint.cc (map_arguments): If ARGS is null, it's a\n+\tself-mapping of parms.\n+\t(finish_nested_requirement): Do not pass argified\n+\tcurrent_template_parms to normalization.\n+\t(tsubst_nested_requirement): Don't assert no template parms.\n+\n 2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/94886"}, {"sha": "85513fecf4378966269e12bdbc998bee08092d83", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c416c52bcdb120db5e8c53a51bd78c4360daf79b/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c416c52bcdb120db5e8c53a51bd78c4360daf79b/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=c416c52bcdb120db5e8c53a51bd78c4360daf79b", "patch": "@@ -546,12 +546,16 @@ static tree\n map_arguments (tree parms, tree args)\n {\n   for (tree p = parms; p; p = TREE_CHAIN (p))\n-    {\n-      int level;\n-      int index;\n-      template_parm_level_and_index (TREE_VALUE (p), &level, &index);\n-      TREE_PURPOSE (p) = TMPL_ARG (args, level, index);\n-    }\n+    if (args)\n+      {\n+\tint level;\n+\tint index;\n+\ttemplate_parm_level_and_index (TREE_VALUE (p), &level, &index);\n+\tTREE_PURPOSE (p) = TMPL_ARG (args, level, index);\n+      }\n+    else\n+      TREE_PURPOSE (p) = TREE_VALUE (p);\n+\n   return parms;\n }\n \n@@ -2005,8 +2009,6 @@ tsubst_compound_requirement (tree t, tree args, subst_info info)\n static tree\n tsubst_nested_requirement (tree t, tree args, subst_info info)\n {\n-  gcc_assert (!uses_template_parms (args));\n-\n   /* Ensure that we're in an evaluation context prior to satisfaction.  */\n   tree norm = TREE_VALUE (TREE_TYPE (t));\n   tree result = satisfy_constraint (norm, args, info);\n@@ -2953,12 +2955,15 @@ finish_compound_requirement (location_t loc, tree expr, tree type, bool noexcept\n tree\n finish_nested_requirement (location_t loc, tree expr)\n {\n+  /* Currently open template headers have dummy arg vectors, so don't\n+     pass into normalization.  */\n+  tree norm = normalize_constraint_expression (expr, NULL_TREE, false);\n+  tree args = current_template_parms\n+    ? template_parms_to_args (current_template_parms) : NULL_TREE;\n+\n   /* Save the normalized constraint and complete set of normalization\n      arguments with the requirement.  We keep the complete set of arguments\n      around for re-normalization during diagnostics.  */\n-  tree args = current_template_parms\n-    ? template_parms_to_args (current_template_parms) : NULL_TREE;\n-  tree norm = normalize_constraint_expression (expr, args, false);\n   tree info = build_tree_list (args, norm);\n \n   /* Build the constraint, saving its normalization as its type.  */"}, {"sha": "f14ec2551a14fc36a3c1a3bd87c6a92ed77b21e8", "filename": "gcc/testsuite/g++.dg/concepts/pr94827.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c416c52bcdb120db5e8c53a51bd78c4360daf79b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr94827.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c416c52bcdb120db5e8c53a51bd78c4360daf79b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr94827.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr94827.C?ref=c416c52bcdb120db5e8c53a51bd78c4360daf79b", "patch": "@@ -0,0 +1,15 @@\n+// PR 94287 ICE looking inside open template-parm level\n+// { dg-do run { target c++17 } }\n+// { dg-options -fconcepts }\n+\n+template <typename T,\n+  bool X = requires { requires (sizeof(T)==1); } >\n+  int foo(T) { return X; }\n+\n+int main() {\n+  if (!foo('4'))\n+    return 1;\n+  if (foo (4))\n+    return 2;\n+  return 0;\n+}"}]}