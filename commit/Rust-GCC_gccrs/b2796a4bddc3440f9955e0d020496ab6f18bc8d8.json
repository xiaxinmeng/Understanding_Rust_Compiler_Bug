{"sha": "b2796a4bddc3440f9955e0d020496ab6f18bc8d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI3OTZhNGJkZGMzNDQwZjk5NTVlMGQwMjA0OTZhYjZmMThiYzhkOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-19T22:19:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-19T22:19:34Z"}, "message": "(find_comparison_args): Look for comparison operations if the second arg is 0 in any mode.\n\n(find_comparison_args): Look for comparison operations if the second arg is\n0 in any mode.\n(record_jump_cond): Don't make classes equivalent for floating-point equality\ncomparison.\n\nFrom-SVN: r1900", "tree": {"sha": "7006b5374dc940a56831671bafaffffd598ed995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7006b5374dc940a56831671bafaffffd598ed995"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2796a4bddc3440f9955e0d020496ab6f18bc8d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2796a4bddc3440f9955e0d020496ab6f18bc8d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2796a4bddc3440f9955e0d020496ab6f18bc8d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2796a4bddc3440f9955e0d020496ab6f18bc8d8/comments", "author": null, "committer": null, "parents": [{"sha": "7fe4336e989ab447811231573647ef15f871c093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe4336e989ab447811231573647ef15f871c093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe4336e989ab447811231573647ef15f871c093"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "24dbac63c5f75b56bb2966a86ea0215c2d4dc7c4", "filename": "gcc/cse.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2796a4bddc3440f9955e0d020496ab6f18bc8d8/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2796a4bddc3440f9955e0d020496ab6f18bc8d8/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=b2796a4bddc3440f9955e0d020496ab6f18bc8d8", "patch": "@@ -2639,7 +2639,7 @@ find_comparison_args (code, parg1, parg2)\n \n   /* If ARG2 is const0_rtx, see what ARG1 is equivalent to.  */\n \n-  while (arg2 == const0_rtx)\n+  while (arg2 == CONST0_RTX (GET_MODE (arg1)))\n     {\n       /* Set non-zero when we find something of interest.  */\n       rtx x = 0;\n@@ -5366,8 +5366,12 @@ record_jump_cond (code, mode, op0, op1, reversed_nonequality)\n   op1_elt = lookup (op1, op1_hash_code, mode);\n \n   /* If we aren't setting two things equal all we can do is save this\n-     comparison.  */\n-  if (code != EQ)\n+     comparison.   Similarly if this is floating-point.  In the latter\n+     case, OP1 might be zero and both -0.0 and 0.0 are equal to it.\n+     If we record the equality, we might inadvertently delete code\n+     whose intent was to change -0 to +0.  */\n+\n+  if (code != EQ || GET_MODE_CLASS (GET_MODE (op0)) == MODE_FLOAT)\n     {\n       /* If we reversed a floating-point comparison, if OP0 is not a\n \t register, or if OP1 is neither a register or constant, we can't"}]}