{"sha": "268127ceca311ea64ed5b67d544eea8b670f4507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY4MTI3Y2VjYTMxMWVhNjRlZDViNjdkNTQ0ZWVhOGI2NzBmNDUwNw==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2007-08-31T19:18:20Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2007-08-31T19:18:20Z"}, "message": "re PR c++/32597 (New operation with empty parameter pack does not value-initialize)\n\n2007-08-31 Douglas Gregor <doug.gregor@gmail.com>\n\n\tPR c++/32597\n\t* init.c (build_default_init): Make extern.\n\t* cp-tree.h (build_default_init): Declare here.\n\t* pt.c (tsubst_expr): When the instantiation of the initializer of\n\ta variable results in an empty list, default-initialize the\n\tvariable.\n\t(tsubst_copy_and_build): When the instantiation of the initializer\n\tin a new expression results in an empty initializer list,\n\tdefault-initialize it.\n\n2007-08-31 Douglas Gregor <doug.gregor@gmail.com>\n\n\tPR c++/32597\n\t* gcc/testsuite/g++.dg/cpp0x/variadic-new2.C: New.\n\t* gcc/testsuite/g++.dg/cpp0x/variadic-new.C: New.\n\nFrom-SVN: r128000", "tree": {"sha": "2f99d34ff51b2a0d4c2f5bf980a91ec2f1f8397d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f99d34ff51b2a0d4c2f5bf980a91ec2f1f8397d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/268127ceca311ea64ed5b67d544eea8b670f4507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268127ceca311ea64ed5b67d544eea8b670f4507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/268127ceca311ea64ed5b67d544eea8b670f4507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268127ceca311ea64ed5b67d544eea8b670f4507/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ab28be5966d14e3981692007b1c8aecfc7577d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab28be5966d14e3981692007b1c8aecfc7577d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab28be5966d14e3981692007b1c8aecfc7577d1"}], "stats": {"total": 108, "additions": 99, "deletions": 9}, "files": [{"sha": "558aa067a432a5ef7694c0c475550a8814c8b530", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=268127ceca311ea64ed5b67d544eea8b670f4507", "patch": "@@ -1,3 +1,15 @@\n+2007-08-31 Douglas Gregor <doug.gregor@gmail.com>\n+\n+\tPR c++/32597\n+\t* init.c (build_default_init): Make extern.\n+\t* cp-tree.h (build_default_init): Declare here.\n+\t* pt.c (tsubst_expr): When the instantiation of the initializer of\n+\ta variable results in an empty list, default-initialize the\n+\tvariable.\n+\t(tsubst_copy_and_build): When the instantiation of the initializer\n+\tin a new expression results in an empty initializer list,\n+\tdefault-initialize it.\n+\n 2007-08-31  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* mangle.c (write_type): Change mangling of rvalue reference from"}, {"sha": "71f401f247c47c6737f814adcf0adaeb1bdf9885", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=268127ceca311ea64ed5b67d544eea8b670f4507", "patch": "@@ -4345,6 +4345,7 @@ extern tree build_zero_init\t\t\t(tree, tree, bool);\n extern tree build_offset_ref\t\t\t(tree, tree, bool);\n extern tree build_new\t\t\t\t(tree, tree, tree, tree, int);\n extern tree build_vec_init\t\t\t(tree, tree, tree, bool, int);\n+extern tree build_default_init                  (tree, tree);\n extern tree build_delete\t\t\t(tree, tree,\n \t\t\t\t\t\t special_function_kind,\n \t\t\t\t\t\t int, int);"}, {"sha": "b46d687a903efdd6599a832b4eccb47941750b4c", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=268127ceca311ea64ed5b67d544eea8b670f4507", "patch": "@@ -51,7 +51,6 @@ static tree initializing_context (tree);\n static void expand_cleanup_for_base (tree, tree);\n static tree get_temp_regvar (tree, tree);\n static tree dfs_initialize_vtbl_ptrs (tree, void *);\n-static tree build_default_init (tree, tree);\n static tree build_dtor_call (tree, special_function_kind, int);\n static tree build_field_list (tree, tree, int *);\n static tree build_vtbl_address (tree);\n@@ -275,7 +274,7 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n    returns NULL_TREE; the caller is responsible for arranging for the\n    constructors to be called.  */\n \n-static tree\n+tree\n build_default_init (tree type, tree nelts)\n {\n   /* [dcl.init]:"}, {"sha": "68716f1ad679f353a2d31f2941334119209096aa", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=268127ceca311ea64ed5b67d544eea8b670f4507", "patch": "@@ -9885,7 +9885,23 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t\tinit = cp_fname_init (name, &TREE_TYPE (decl));\n \t\t      }\n \t\t    else\n-\t\t      init = RECUR (init);\n+\t\t      {\n+\t\t\ttree t = RECUR (init);\n+\n+\t\t\tif (init && !t)\n+\t\t\t  /* If we had an initializer but it\n+\t\t\t     instantiated to nothing,\n+\t\t\t     value-initialize the object.  This will\n+\t\t\t     only occur when the initializer was a\n+\t\t\t     pack expansion where the parameter packs\n+\t\t\t     used in that expansion were of length\n+\t\t\t     zero.  */\n+\t\t\t  init = build_default_init (TREE_TYPE (decl),\n+                                                     NULL_TREE);\n+\t\t\telse\n+\t\t\t  init = t;\n+\t\t      }\n+\n \t\t    finish_decl (decl, init, NULL_TREE);\n \t\t  }\n \t      }\n@@ -10489,12 +10505,25 @@ tsubst_copy_and_build (tree t,\n       return build_x_arrow (op1);\n \n     case NEW_EXPR:\n-      return build_new\n-\t(RECUR (TREE_OPERAND (t, 0)),\n-\t RECUR (TREE_OPERAND (t, 1)),\n-\t RECUR (TREE_OPERAND (t, 2)),\n-\t RECUR (TREE_OPERAND (t, 3)),\n-\t NEW_EXPR_USE_GLOBAL (t));\n+      {\n+\ttree init = RECUR (TREE_OPERAND (t, 3));\n+\n+\tif (TREE_OPERAND (t, 3) && !init)\n+\t  /* If there was an initializer in the the original tree, but\n+\t     it instantiated to an empty list, then we should pass on\n+\t     VOID_ZERO_NODE to tell build_new that it was an empty\n+\t     initializer () rather than no initializer.  This can only\n+\t     happen when the initializer is a pack expansion whose\n+\t     parameter packs are of length zero.  */\n+\t  init = void_zero_node;\n+\n+\treturn build_new\n+\t  (RECUR (TREE_OPERAND (t, 0)),\n+\t   RECUR (TREE_OPERAND (t, 1)),\n+\t   RECUR (TREE_OPERAND (t, 2)),\n+\t   init,\n+\t   NEW_EXPR_USE_GLOBAL (t));\n+      }\n \n     case DELETE_EXPR:\n      return delete_sanity"}, {"sha": "95c522f754388e4631e004a7e2f10a0f4c51dcb2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=268127ceca311ea64ed5b67d544eea8b670f4507", "patch": "@@ -1,3 +1,9 @@\n+2007-08-31 Douglas Gregor <doug.gregor@gmail.com>\n+\n+\tPR c++/32597\n+\t* gcc/testsuite/g++.dg/cpp0x/variadic-new2.C: New.\n+\t* gcc/testsuite/g++.dg/cpp0x/variadic-new.C: New.\n+\n 2007-08-31  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33232"}, {"sha": "869052774cf37e4f0366bc4a47d2ba59fae17aff", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-new.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-new.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-new.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-new.C?ref=268127ceca311ea64ed5b67d544eea8b670f4507", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do \"run\" }\n+// { dg-options \"-std=c++0x\" }\n+// Contributed by Peter Dimov\n+// PR c++/32597\n+#include <assert.h>\n+#include <new>\n+\n+int k = 5;\n+\n+template< class... Args > void f( Args... args )\n+{\n+   new( &k ) int( args... );\n+}\n+\n+int main()\n+{\n+   f();\n+   assert( k == 0 );\n+}"}, {"sha": "a40f96e110bdb4288e2970a685ea98394ea5ad44", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-new2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-new2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268127ceca311ea64ed5b67d544eea8b670f4507/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-new2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-new2.C?ref=268127ceca311ea64ed5b67d544eea8b670f4507", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do \"run\" }\n+// { dg-options \"-std=c++0x\" }\n+// PR c++/32597\n+#include <assert.h>\n+#include <new>\n+\n+template< class... Args > void f( Args... args )\n+{\n+  { \n+    int x = 17;\n+    (void)x;\n+  }\n+\n+  {\n+    int y(args...);\n+    assert(y == 0);\n+  }\n+\n+}\n+\n+int main()\n+{\n+   f();\n+}"}]}