{"sha": "eeff8d2c06afac42374bc74a8e138d4bf981fc52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVmZjhkMmMwNmFmYWM0MjM3NGJjNzRhOGUxMzhkNGJmOTgxZmM1Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-05-25T01:33:21Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-05-25T01:33:21Z"}, "message": "std_cstring.h: #define away all global functions we will redeclare in namespace `std'.\n\n\t* include/c_std/bin/std_cstring.h: #define away all global\n\tfunctions we will redeclare in namespace `std'.\n\t* libsupc++/eh_alloc.cc (__cxa_allocate_exception): Use\n\tstd::memset, instead of memset.\n\t* testsuite/19_diagnostics/stdexceptions.cc: Use `std::strcmp',\n\tnot plain `strcmp'.\n\t* testsuite/21_strings/c_strings.cc: Use `std::strcpy' instead of\n\tplain `strcpy'.\n\nFrom-SVN: r42555", "tree": {"sha": "ef1f1cecb0dd34e11de53e2848b9c3b5bd7348b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef1f1cecb0dd34e11de53e2848b9c3b5bd7348b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeff8d2c06afac42374bc74a8e138d4bf981fc52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeff8d2c06afac42374bc74a8e138d4bf981fc52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeff8d2c06afac42374bc74a8e138d4bf981fc52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeff8d2c06afac42374bc74a8e138d4bf981fc52/comments", "author": null, "committer": null, "parents": [{"sha": "f5aada264731ac00bd7afaa254cb0ed1b6b62917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5aada264731ac00bd7afaa254cb0ed1b6b62917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5aada264731ac00bd7afaa254cb0ed1b6b62917"}], "stats": {"total": 150, "additions": 118, "deletions": 32}, "files": [{"sha": "e0aada4558aa7f9eede75890844ce28331352f8f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeff8d2c06afac42374bc74a8e138d4bf981fc52/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeff8d2c06afac42374bc74a8e138d4bf981fc52/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eeff8d2c06afac42374bc74a8e138d4bf981fc52", "patch": "@@ -1,3 +1,14 @@\n+2001-05-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* include/c_std/bin/std_cstring.h: #define away all global\n+\tfunctions we will redeclare in namespace `std'.\n+\t* libsupc++/eh_alloc.cc (__cxa_allocate_exception): Use\n+\tstd::memset, instead of memset.\n+\t* testsuite/19_diagnostics/stdexceptions.cc: Use `std::strcmp',\n+\tnot plain `strcmp'.\n+\t* testsuite/21_strings/c_strings.cc: Use `std::strcpy' instead of\n+\tplain `strcpy'.\n+\t\n 2001-05-24  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tlibstdc++/2832"}, {"sha": "08c7b023ee3aceba9d9edc896554b1a9a8f43e6e", "filename": "libstdc++-v3/include/c_std/bits/std_cstring.h", "status": "modified", "additions": 100, "deletions": 25, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeff8d2c06afac42374bc74a8e138d4bf981fc52/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeff8d2c06afac42374bc74a8e138d4bf981fc52/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h?ref=eeff8d2c06afac42374bc74a8e138d4bf981fc52", "patch": "@@ -41,11 +41,28 @@\n \n \n // Need to mangle these \"C\" functions because C++ modifies their signature.\n-#define memchr  __glibcpp_memchr\n-#define strchr  __glibcpp_strchr\n+#define memcpy __glibcpp_memcpy\n+#define memmove __glibcpp_memmove\n+#define strcpy __glibcpp_strcpy\n+#define strncpy __glibcpp_strncpy\n+#define strcat __glibcpp_strcat\n+#define strncat __glibcpp_strncat\n+#define memcmp __glibcpp_memcmp\n+#define strcmp __glibcpp_strcmp\n+#define strcoll __glibcpp_strcoll\n+#define strncmp __glibcpp_strncmp\n+#define strxfrm __glibcpp_strxfrm\n+#define memchr __glibcpp_memchr\n+#define strchr __glibcpp_strchr\n+#define strcspn __glibcpp_strcspn\n #define strpbrk __glibcpp_strpbrk\n #define strrchr __glibcpp_strrchr\n-#define strstr  __glibcpp_strstr\n+#define strspn __glibcpp_strspn\n+#define strstr __glibcpp_strstr\n+#define strtok __glibcpp_strtok\n+#define memset __glibcpp_memset\n+#define strerror __glibcpp_strerror\n+#define strlen __glibcpp_strlen\n \n #pragma GCC system_header\n #include <string.h>\n@@ -76,53 +93,111 @@\n \n namespace std \n {\n-  extern \"C\" void* memcpy(void*, const void*, size_t); \n+  inline void*\n+  memcpy(void* __p1, const void* __p2, size_t __n)\n+  { return __builtin_memcpy(__p1, __p2, __n); }\n+\n   extern \"C\" void* memmove(void*, const void*, size_t); \n-  extern \"C\" char* strcpy(char*, const char*); \n-  extern \"C\" char* strncpy(char*, const char*, size_t); \n-  extern \"C\" char* strcat(char*, const char*); \n-  extern \"C\" char* strncat(char*, const char*, size_t); \n-  extern \"C\" int memcmp(const void*, const void*, size_t); \n-  extern \"C\" int strcmp(const char*, const char*); \n+\n+  inline char*\n+  strcpy(char* __s1, const char* __s2)\n+  { return __builtin_strcpy(__s1, __s2); }\n+\n+  inline char*\n+  strncpy(char* __s1, const char* __s2, size_t __n)\n+  { return __builtin_strncpy(__s1, __s2, __n); }\n+\n+  inline char*\n+  strcat(char* __s1, const char* __s2)\n+  { return __builtin_strcat(__s1, __s2); }\n+\n+  inline char*\n+  strncat(char* __s1, const char* __s2, size_t __n)\n+  { return __builtin_strncat(__s1, __s2, __n); }\n+\n+  inline int\n+  memcmp(const void* __p1, const void* __p2, size_t __n)\n+  { return __builtin_memcmp(__p1, __p2, __n); }\n+\n+  inline int\n+  strcmp(const char* __s1, const char* __s2)\n+  { return __builtin_strcmp(__s1, __s2); }\n+\n   extern \"C\" int strcoll(const char*, const char*); \n-  extern \"C\" int strncmp(const char*, const char*, size_t); \n+\n+  inline int\n+  strncmp(const char* __s1, const char* __s2, size_t __n)\n+  { return __builtin_strncmp(__s1, __s2, __n); }\n+\n   extern \"C\" size_t strxfrm(char*, const char*, size_t); \n   extern \"C\" const void* memchr(const void*, int, size_t); \n+\n   inline void*\n   memchr(void* __p, int __c, size_t __n)\n   {\n     return const_cast<void*>(memchr(const_cast<const void*>(__p), __c, __n));\n   }\n-  extern \"C\" const char* strchr(const char*, int); \n+\n+  inline const char*\n+  strchr(const char* __s1, int __n)\n+  { return const_cast<const char*>(__builtin_strchr(__s1, __n)); }\n+\n   inline char*\n   strchr(char* __s1, int __n)\n   {\n-    return const_cast<char*>(strchr(const_cast<const char*>(__s1), __n));\n+    return \n+      const_cast<char*>(__builtin_strchr(const_cast<const char*>(__s1), __n));\n   }\n-  extern \"C\" size_t strcspn(const char*, const char*); \n-  extern \"C\" const char* strpbrk(const char*, const char*); \n+\n+  inline size_t\n+  strcspn(const char* __s1, const char* __s2)\n+  { return __builtin_strcspn(__s1, __s2); }\n+\n+  inline const char*\n+  strpbrk(const char* __s1, const char* __s2)\n+  { return const_cast<char*>(__builtin_strpbrk(__s1, __s2)); }\n+\n   inline char*\n   strpbrk(char* __s1, const char* __s2)\n   {\n-    return const_cast<char*>(strpbrk(const_cast<const char*>(__s1), __s2));\n+    return const_cast<char*>\n+      (__builtin_strpbrk(const_cast<const char*>(__s1), __s2));\n   }\n-  extern \"C\" const char* strrchr(const char*, int); \n+\n+  inline const char*\n+  strrchr(const char* __s1, int __n)\n+  { return const_cast<char*>(__builtin_strrchr(__s1, __n)); }\n+\n   inline char*\n   strrchr(char* __s1, int __n)\n-  {\n-    return const_cast<char*>(strrchr(const_cast<const char*>(__s1), __n));\n-  }\n-  extern \"C\" size_t strspn(const char*, const char*); \n-  extern \"C\" const char* strstr(const char*, const char*); \n+  { return __builtin_strrchr(const_cast<const char*>(__s1), __n); }\n+\n+  inline size_t\n+  strspn(const char* __s1, const char* __s2)\n+  { return __builtin_strspn(__s1, __s2); }\n+\n+  inline const char*\n+  strstr(const char* __s1, const char* __s2)\n+  { return const_cast<char*>(__builtin_strstr (__s1, __s2)); }\n+\n   inline char*\n   strstr(char* __s1, const char* __s2)\n   {\n-    return const_cast<char*>(strstr(const_cast<const char*>(__s1), __s2));\n+    return (const_cast<char*>\n+\t    (__builtin_strstr(const_cast<const char*>(__s1), __s2)));\n   }\n+\n   extern \"C\" char* strtok(char*, const char*); \n-  extern \"C\" void* memset(void*, int, size_t); \n+\n+  inline void*\n+  memset(void* __p, int __c, size_t __n)\n+  { return __builtin_memset(__p, __c, __n); }\n+\n   extern \"C\" char* strerror(int); \n-  extern \"C\" size_t strlen(const char*);\n+\n+  inline size_t\n+  strlen(const char* __s)\n+  { return __builtin_strlen(__s); }\n }\n \n #endif"}, {"sha": "edfcb5e517e4ab800a248d4943c26f8801f1f3d7", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeff8d2c06afac42374bc74a8e138d4bf981fc52/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeff8d2c06afac42374bc74a8e138d4bf981fc52/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=eeff8d2c06afac42374bc74a8e138d4bf981fc52", "patch": "@@ -133,7 +133,7 @@ __cxa_allocate_exception(std::size_t thrown_size)\n \tstd::terminate ();\n     }\n \n-  memset (ret, 0, sizeof (__cxa_exception));\n+  std::memset (ret, 0, sizeof (__cxa_exception));\n \n   return (void *)((char *)ret + sizeof (__cxa_exception));\n }"}, {"sha": "de9663cb53f4e44cb6d2c0a3c3e8a96979634d77", "filename": "libstdc++-v3/testsuite/19_diagnostics/stdexceptions.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeff8d2c06afac42374bc74a8e138d4bf981fc52/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeff8d2c06afac42374bc74a8e138d4bf981fc52/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc?ref=eeff8d2c06afac42374bc74a8e138d4bf981fc52", "patch": "@@ -38,7 +38,7 @@ void test01()\n   // 2\n   // std::logic_error obj((std::string)strlit);\n \n-  VERIFY( strcmp(obj.what(), s.data()) == 0 );\n+  VERIFY( std::strcmp(obj.what(), s.data()) == 0 );\n }\n \n void test02()\n@@ -47,7 +47,7 @@ void test02()\n   std::string s(\"lack of sunlight error\");\n   std::domain_error x(s);\n   \n-  VERIFY( strcmp(x.what(), s.data()) == 0 );\n+  VERIFY( std::strcmp(x.what(), s.data()) == 0 );\n }\n \n // libstdc++/2089\n@@ -64,7 +64,7 @@ void test03()\n   try\n     { throw fuzzy_logic(); }\n   catch(const fuzzy_logic& obj)\n-    { VERIFY( strcmp(\"whoa\", obj.what()) == 0 ); }\n+    { VERIFY( std::strcmp(\"whoa\", obj.what()) == 0 ); }\n   catch(...)\n     { VERIFY( false ); }\n }\n@@ -93,7 +93,7 @@ void test04()\n     obj1 = obj2;\n   }\n   allocate_on_stack();\n-  VERIFY( strcmp(strlit1, obj1.what()) == 0 ); \n+  VERIFY( std::strcmp(strlit1, obj1.what()) == 0 ); \n \n   // block 02\n   {\n@@ -102,7 +102,7 @@ void test04()\n     obj1 = obj3;\n   }\n   allocate_on_stack();     \n-  VERIFY( strcmp(strlit2, obj1.what()) == 0 ); \n+  VERIFY( std::strcmp(strlit2, obj1.what()) == 0 ); \n }\n \n int main(void)"}, {"sha": "82f3f8fa6c037a6b3b589f98f479af592aa8c76f", "filename": "libstdc++-v3/testsuite/21_strings/c_strings.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeff8d2c06afac42374bc74a8e138d4bf981fc52/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeff8d2c06afac42374bc74a8e138d4bf981fc52/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings.cc?ref=eeff8d2c06afac42374bc74a8e138d4bf981fc52", "patch": "@@ -34,7 +34,7 @@ void test01()\n   const char* ccarray1 = \"san francisco roof garden inspectors\";\n   const char* ccarray2 = \"san francisco sunny-day park inspectors\";\n   char carray[30];\n-  strcpy(carray, ccarray1);\n+  std::strcpy(carray, ccarray1);\n   void* v = carray;\n   const void* cv = ccarray1;\n   "}]}