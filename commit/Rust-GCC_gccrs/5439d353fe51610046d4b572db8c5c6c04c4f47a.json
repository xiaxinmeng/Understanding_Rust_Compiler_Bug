{"sha": "5439d353fe51610046d4b572db8c5c6c04c4f47a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQzOWQzNTNmZTUxNjEwMDQ2ZDRiNTcyZGI4YzVjNmMwNGM0ZjQ3YQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-12T19:49:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-12T19:49:44Z"}, "message": "Merge #365\n\n365: add more path to collect live symbols r=tschwinge a=thomasyonug\n\nAddresses #363\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>", "tree": {"sha": "b0a44413df2f3c96b8da1cb4d0a7e043cafd7eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0a44413df2f3c96b8da1cb4d0a7e043cafd7eab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5439d353fe51610046d4b572db8c5c6c04c4f47a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdKRYCRBK7hj4Ov3rIwAAdHIIAGxy3mNp+1ZF8vgXjOjBAk6y\nF2HVHgiRrMi4WhzDMP7HxN68df1DNh7uoXMzNClXGduyJLEgw/oZPcBv+SphSXaC\nMSDC1tXzYFyLkvEvBe2wIEbAHJ3bF+QMJDHzjfOLSYdzzt/Ps7W+ro5v/TTIpkc9\nEQZ/ajNIvQF9FDtJ4ZJrwDQ6PAZ2pm4QF9eNDrltkpDhVTrGhINeuYKGSb8SBTWl\ndKR7MkV29wKhpequf/7L1X+75Cf4EhUh3qazTNn1deN3ZMQArsxZPxzSegq+nu0t\nvK4JU20LGv3A0K2c+u4IDRHqgspNJLIPOuhBZ2AbmrUV8B1jiR5hjAx9oL8YX28=\n=SpV7\n-----END PGP SIGNATURE-----\n", "payload": "tree b0a44413df2f3c96b8da1cb4d0a7e043cafd7eab\nparent edc4a9549145861a2e71c552f06e53c860e39d9a\nparent 5b9f4f94b83d8a02e119dcdf16eb870282a50d71\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618256984 +0000\ncommitter GitHub <noreply@github.com> 1618256984 +0000\n\nMerge #365\n\n365: add more path to collect live symbols r=tschwinge a=thomasyonug\n\nAddresses #363\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5439d353fe51610046d4b572db8c5c6c04c4f47a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5439d353fe51610046d4b572db8c5c6c04c4f47a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5439d353fe51610046d4b572db8c5c6c04c4f47a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edc4a9549145861a2e71c552f06e53c860e39d9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc4a9549145861a2e71c552f06e53c860e39d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc4a9549145861a2e71c552f06e53c860e39d9a"}, {"sha": "5b9f4f94b83d8a02e119dcdf16eb870282a50d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9f4f94b83d8a02e119dcdf16eb870282a50d71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b9f4f94b83d8a02e119dcdf16eb870282a50d71"}], "stats": {"total": 200, "additions": 164, "deletions": 36}, "files": [{"sha": "e65c1ebafce77dbe2a85c3ed1ddcffff772ed60b", "filename": "gcc/rust/analysis/rust-hir-liveness.cc", "status": "modified", "additions": 54, "deletions": 29, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.cc?ref=5439d353fe51610046d4b572db8c5c6c04c4f47a", "patch": "@@ -65,33 +65,29 @@ Liveness::Analysis (HIR::Crate &crate)\n void\n Liveness::go (HIR::Crate &crate)\n {\n+  CrateNum crateNum = crate.get_mappings ().get_crate_num ();\n   while (!worklist.empty ())\n     {\n       HirId hirId = worklist.back ();\n       worklist.pop_back ();\n       scannedSymbols.emplace (hirId);\n-      HIR::Item *item\n-\t= mappings->lookup_hir_item (crate.get_mappings ().get_crate_num (),\n-\t\t\t\t     hirId);\n-      if (item == nullptr)\n-\tcontinue;\n+      HIR::Item *item = mappings->lookup_hir_item (crateNum, hirId);\n       liveSymbols.emplace (hirId);\n-      item->accept_vis (*this);\n+      if (item != nullptr)\n+\t{\n+\t  item->accept_vis (*this);\n+\t}\n+      else\n+\t{ // the item maybe inside a trait impl\n+\t  HirId parent_impl_id = UNKNOWN_HIRID;\n+\t  HIR::InherentImplItem *implItem\n+\t    = mappings->lookup_hir_implitem (crateNum, hirId, &parent_impl_id);\n+\t  if (implItem != nullptr)\n+\t    implItem->accept_vis (*this);\n+\t}\n     }\n }\n \n-void\n-Liveness::visit (HIR::ExprStmtWithoutBlock &stmt)\n-{\n-  stmt.get_expr ()->accept_vis (*this);\n-}\n-\n-void\n-Liveness::visit (HIR::CallExpr &expr)\n-{\n-  expr.get_fnexpr ()->accept_vis (*this);\n-}\n-\n void\n Liveness::visit (HIR::PathInExpression &expr)\n {\n@@ -114,7 +110,7 @@ Liveness::visit (HIR::PathInExpression &expr)\n \t  rust_error_at (expr.get_locus (), \"reverse lookup failure\");\n \t  return;\n \t}\n-      if (scannedSymbols.find (ref) != scannedSymbols.end ())\n+      if (scannedSymbols.find (ref) == scannedSymbols.end ())\n \t{\n \t  worklist.push_back (ref);\n \t}\n@@ -123,18 +119,47 @@ Liveness::visit (HIR::PathInExpression &expr)\n }\n \n void\n-Liveness::visit (HIR::Function &function)\n+Liveness::visit (HIR::IdentifierExpr &expr)\n {\n-  function.get_definition ().get ()->accept_vis (*this);\n-}\n+  NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n \n-void\n-Liveness::visit (HIR::BlockExpr &expr)\n-{\n-  expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n-    s->accept_vis (*this);\n-    return true;\n-  });\n+  // then lookup the reference_node_id\n+  NodeId ref_node_id = UNKNOWN_NODEID;\n+  if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n+    {\n+      // these ref_node_ids will resolve to a pattern declaration but we are\n+      // interested in the definition that this refers to get the parent id\n+      Resolver::Definition def;\n+      if (!resolver->lookup_definition (ref_node_id, &def))\n+\t{\n+\t  rust_error_at (expr.get_locus (),\n+\t\t\t \"unknown reference for resolved name\");\n+\t  return;\n+\t}\n+      ref_node_id = def.parent;\n+    }\n+\n+  if (ref_node_id == UNKNOWN_NODEID)\n+    {\n+      rust_error_at (expr.get_locus (), \"unresolved node: %s\",\n+\t\t     expr.as_string ().c_str ());\n+      return;\n+    }\n+\n+  // node back to HIR\n+  HirId ref;\n+  if (!mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n+\t\t\t\t     ref_node_id, &ref))\n+    {\n+      rust_error_at (expr.get_locus (), \"reverse lookup failure\");\n+      return;\n+    }\n+\n+  if (scannedSymbols.find (ref) == scannedSymbols.end ())\n+    {\n+      worklist.push_back (ref);\n+    }\n+  liveSymbols.emplace (ref);\n }\n \n } // namespace Analysis"}, {"sha": "aa65991da9f2e6d152bfe71898b5ff487f1e6783", "filename": "gcc/rust/analysis/rust-hir-liveness.h", "status": "modified", "additions": 98, "deletions": 4, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.h?ref=5439d353fe51610046d4b572db8c5c6c04c4f47a", "patch": "@@ -36,11 +36,105 @@ class Liveness : public LivenessBase\n   static std::set<HirId> Analysis (HIR::Crate &crate);\n   void go (HIR::Crate &crate);\n \n-  void visit (HIR::ExprStmtWithoutBlock &stmt) override;\n-  void visit (HIR::CallExpr &expr) override;\n-  void visit (HIR::Function &function) override;\n-  void visit (HIR::BlockExpr &expr) override;\n   void visit (HIR::PathInExpression &expr) override;\n+  void visit (HIR::IdentifierExpr &expr) override;\n+\n+  void visit (HIR::BlockExpr &expr) override\n+  {\n+    expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n+      s->accept_vis (*this);\n+      return true;\n+    });\n+    if (expr.has_expr ())\n+      {\n+\texpr.get_final_expr ().get ()->accept_vis (*this);\n+      }\n+  }\n+  void visit (HIR::Function &function) override\n+  {\n+    function.get_definition ().get ()->accept_vis (*this);\n+  }\n+\n+  void visit (HIR::ExprStmtWithoutBlock &stmt) override\n+  {\n+    stmt.get_expr ()->accept_vis (*this);\n+  }\n+\n+  void visit (HIR::ExprStmtWithBlock &stmt) override\n+  {\n+    stmt.get_expr ()->accept_vis (*this);\n+  }\n+\n+  void visit (HIR::CallExpr &expr) override\n+  {\n+    expr.get_fnexpr ()->accept_vis (*this);\n+  }\n+\n+  void visit (HIR::ArithmeticOrLogicalExpr &expr) override\n+  {\n+    expr.visit_lhs (*this);\n+    expr.visit_rhs (*this);\n+  }\n+  void visit (HIR::ComparisonExpr &expr) override\n+  {\n+    expr.get_lhs ()->accept_vis (*this);\n+    expr.get_rhs ()->accept_vis (*this);\n+  }\n+  void visit (HIR::AssignmentExpr &expr) override\n+  {\n+    expr.visit_lhs (*this);\n+    expr.visit_rhs (*this);\n+  }\n+  void visit (HIR::Method &method) override\n+  {\n+    method.get_definition ().get ()->accept_vis (*this);\n+  }\n+  void visit (HIR::TraitItemFunc &item) override\n+  {\n+    item.get_block_expr ()->accept_vis (*this);\n+  }\n+  void visit (HIR::TraitItemMethod &item) override\n+  {\n+    item.get_block_expr ()->accept_vis (*this);\n+  }\n+  void visit (HIR::InherentImpl &impl) override\n+  {\n+    for (auto &&item : impl.get_impl_items ())\n+      {\n+\titem.get ()->accept_vis (*this);\n+      }\n+  }\n+  void visit (HIR::TraitImpl &impl) override\n+  {\n+    for (auto &&item : impl.get_impl_items ())\n+      {\n+\titem.get ()->accept_vis (*this);\n+      }\n+  }\n+  void visit (HIR::LetStmt &stmt) override\n+  {\n+    if (stmt.has_init_expr ())\n+      {\n+\tstmt.get_init_expr ()->accept_vis (*this);\n+      }\n+  }\n+\n+  void visit (HIR::StructExprStructFields &stct) override\n+  {\n+    stct.iterate ([&] (HIR::StructExprField *field) -> bool {\n+      field->accept_vis (*this);\n+      return true;\n+    });\n+    if (stct.has_struct_base ())\n+      {\n+\tstct.struct_base->base_struct.get ()->accept_vis (*this);\n+      }\n+  }\n+\n+  void visit (HIR::StructExprStructBase &stct) override\n+  {\n+    stct.get_struct_base ()->base_struct.get ()->accept_vis (*this);\n+  }\n \n private:\n   std::vector<HirId> worklist;"}, {"sha": "4c42245cb74d0e890f00b6af508148e36be722b8", "filename": "gcc/rust/analysis/rust-hir-scan-deadcode.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Frust%2Fanalysis%2Frust-hir-scan-deadcode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Frust%2Fanalysis%2Frust-hir-scan-deadcode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-hir-scan-deadcode.h?ref=5439d353fe51610046d4b572db8c5c6c04c4f47a", "patch": "@@ -49,7 +49,7 @@ class ScanDeadcode : public LivenessBase\n     if (live_symbols.find (hirId) == live_symbols.end ())\n       {\n \trust_warning_at (function.get_locus (), 0,\n-\t\t\t \"function is never used: `[%s]`\",\n+\t\t\t \"function is never used: `%s`\",\n \t\t\t function.get_function_name ().c_str ());\n \treturn;\n       }"}, {"sha": "1748c6ae7c8c254c1c9860785aeee11dbe3457c2", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=5439d353fe51610046d4b572db8c5c6c04c4f47a", "patch": "@@ -1635,6 +1635,7 @@ class StructExprStructBase : public StructExprStruct\n   {}\n \n   void accept_vis (HIRVisitor &vis) override;\n+  StructBase *get_struct_base () { return &struct_base; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather"}, {"sha": "ae22008f78272b11c045a66750cffd7df4682026", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=5439d353fe51610046d4b572db8c5c6c04c4f47a", "patch": "@@ -2506,6 +2506,8 @@ class TraitItemFunc : public TraitItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  BlockExpr *get_block_expr () { return block_expr.get (); }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemFunc *clone_trait_item_impl () const override\n@@ -2652,6 +2654,8 @@ class TraitItemMethod : public TraitItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  BlockExpr *get_block_expr () { return block_expr.get (); }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemMethod *clone_trait_item_impl () const override\n@@ -3130,6 +3134,10 @@ class TraitImpl : public Impl\n   TraitImpl &operator= (TraitImpl &&other) = default;\n \n   void accept_vis (HIRVisitor &vis) override;\n+  std::vector<std::unique_ptr<TraitImplItem> > &get_impl_items ()\n+  {\n+    return impl_items;\n+  };\n \n protected:\n   /* Use covariance to implement clone function as returning this object"}, {"sha": "c5ba0a96880fc30c06c770ad8c1d816c203138c3", "filename": "gcc/testsuite/rust.test/compile/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5439d353fe51610046d4b572db8c5c6c04c4f47a/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs?ref=5439d353fe51610046d4b572db8c5c6c04c4f47a", "patch": "@@ -1,9 +1,9 @@\n \n-fn bar() { // {dg-warning \"function is never used: `bar`\"}\n+fn bar() {\n     foo();\n }\n \n-fn foo() { // {dg-warning \"function is never used: `foo`\"}\n+fn foo() {\n     bar();\n }\n "}]}