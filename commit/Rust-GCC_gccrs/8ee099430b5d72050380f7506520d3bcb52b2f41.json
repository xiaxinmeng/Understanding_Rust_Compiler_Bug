{"sha": "8ee099430b5d72050380f7506520d3bcb52b2f41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVlMDk5NDMwYjVkNzIwNTAzODBmNzUwNjUyMGQzYmNiNTJiMmY0MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-14T16:46:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-14T16:46:06Z"}, "message": "P1236R1 - Signed integers are two's complement\n\n\tP1236R1 - Signed integers are two's complement\ngcc/cp/\n\t* constexpr.c (cxx_eval_check_shift_p): Disable the signed LSHIFT_EXPR\n\tchecks for c++2a.\ngcc/c-family/\n\t* c-warn.c (maybe_warn_shift_overflow): Don't warn for c++2a.\n\t* c-ubsan.c (ubsan_instrument_shift): Make signed shifts\n\twith in-range second operand well defined for -std=c++2a.\ngcc/\n\t* doc/invoke.texi (Wshift-overflow): Adjust documentation for\n\tc++2a.\ngcc/testsuite/\n\t* g++.dg/cpp2a/constexpr-shift1.C: New test.\n\t* g++.dg/warn/permissive-1.C (enum A, enum D): Don't expect\n\tdiagnostics here for c++2a.\n\t* g++.dg/cpp0x/constexpr-shift1.C (fn3, i3, fn4, i4): Don't expect\n\tdiagnostics here for c++2a.\n\t* g++.dg/cpp0x/constexpr-60049.C (f3, x3, y3): Likewise.\n\t* g++.dg/ubsan/cxx11-shift-1.C (main): Add some further tests.\n\t* g++.dg/ubsan/cxx11-shift-2.C (main): Likewise.\n\t* g++.dg/ubsan/cxx2a-shift-1.C: New test.\n\t* g++.dg/ubsan/cxx2a-shift-2.C: New test.\n\nFrom-SVN: r266153", "tree": {"sha": "5505cd75b39f643063ae805162831dbecc4def9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5505cd75b39f643063ae805162831dbecc4def9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ee099430b5d72050380f7506520d3bcb52b2f41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ee099430b5d72050380f7506520d3bcb52b2f41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ee099430b5d72050380f7506520d3bcb52b2f41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ee099430b5d72050380f7506520d3bcb52b2f41/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12763abc53bb8c4d9953992b003f4a59a59473ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12763abc53bb8c4d9953992b003f4a59a59473ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12763abc53bb8c4d9953992b003f4a59a59473ce"}], "stats": {"total": 145, "additions": 123, "deletions": 22}, "files": [{"sha": "fb28a7d585a76855a7158d835459e5581f813f46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -1,5 +1,9 @@\n 2018-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tP1236R1 - Signed integers are two's complement\n+\t* doc/invoke.texi (Wshift-overflow): Adjust documentation for\n+\tc++2a.\n+\n \tPR bootstrap/86739\n \t* hash-map.h (hash_map::iterator::reference_pair): New class.\n \t(hash_map::iterator::operator*): Return it rather than std::pair."}, {"sha": "eadad49615673c4bb3d6cce2d968a1d4fe95b710", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -1,5 +1,10 @@\n 2018-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tP1236R1 - Signed integers are two's complement\n+\t* c-warn.c (maybe_warn_shift_overflow): Don't warn for c++2a.\n+\t* c-ubsan.c (ubsan_instrument_shift): Make signed shifts\n+\twith in-range second operand well defined for -std=c++2a.\n+\n \tPR other/88007\n \t* c-common.c (parse_optimize_options): Allocate option string from\n \topts_obstack rather than as GC memory.  Move the allocation after"}, {"sha": "4ef2bd80cfedc952382186f3e4b699b3a4ffeb13", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -134,7 +134,10 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n   if (TYPE_OVERFLOW_WRAPS (type0)\n       || maybe_ne (GET_MODE_BITSIZE (TYPE_MODE (type0)),\n \t\t   TYPE_PRECISION (type0))\n-      || !sanitize_flags_p (SANITIZE_SHIFT_BASE))\n+      || !sanitize_flags_p (SANITIZE_SHIFT_BASE)\n+      /* In C++2a and later, shifts are well defined except when\n+\t the second operand is not within bounds.  */\n+      || cxx_dialect >= cxx2a)\n     ;\n \n   /* For signed x << y, in C99/C11, the following:"}, {"sha": "93c343a438428075b336435ba43f4b7517c9ca37", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -2286,6 +2286,8 @@ diagnose_mismatched_attributes (tree olddecl, tree newdecl)\n /* Warn if signed left shift overflows.  We don't warn\n    about left-shifting 1 into the sign bit in C++14; cf.\n    <http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3367.html#1457>\n+   and don't warn for C++2a at all, as signed left shifts never\n+   overflow.\n    LOC is a location of the shift; OP0 and OP1 are the operands.\n    Return true if an overflow is detected, false otherwise.  */\n \n@@ -2300,7 +2302,7 @@ maybe_warn_shift_overflow (location_t loc, tree op0, tree op1)\n   unsigned int prec0 = TYPE_PRECISION (type0);\n \n   /* Left-hand operand must be signed.  */\n-  if (TYPE_UNSIGNED (type0))\n+  if (TYPE_UNSIGNED (type0) || cxx_dialect >= cxx2a)\n     return false;\n \n   unsigned int min_prec = (wi::min_precision (wi::to_wide (op0), SIGNED)\n@@ -2309,7 +2311,7 @@ maybe_warn_shift_overflow (location_t loc, tree op0, tree op1)\n    * However, shifting 1 _out_ of the sign bit, as in\n    * INT_MIN << 1, is considered an overflow.\n    */\n-  if (!tree_int_cst_sign_bit(op0) && min_prec == prec0 + 1)\n+  if (!tree_int_cst_sign_bit (op0) && min_prec == prec0 + 1)\n     {\n       /* Never warn for C++14 onwards.  */\n       if (cxx_dialect >= cxx14)"}, {"sha": "ee5c2ce844622a2a432b28d5da14c383780179f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -1,3 +1,9 @@\n+2018-11-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP1236R1 - Signed integers are two's complement\n+\t* constexpr.c (cxx_eval_check_shift_p): Disable the signed LSHIFT_EXPR\n+\tchecks for c++2a.\n+\n 2018-11-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* call.c: Replace \"source_location\" with \"location_t\"."}, {"sha": "a50e186148d93edcb20740aa0a3472a6e5d2fa99", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -1920,9 +1920,14 @@ cxx_eval_check_shift_p (location_t loc, const constexpr_ctx *ctx,\n      if E1 has a signed type and non-negative value, and E1x2^E2 is\n      representable in the corresponding unsigned type of the result type,\n      then that value, converted to the result type, is the resulting value;\n-     otherwise, the behavior is undefined.  */\n-  if (code == LSHIFT_EXPR && !TYPE_UNSIGNED (lhstype)\n-      && (cxx_dialect >= cxx11))\n+     otherwise, the behavior is undefined.\n+     For C++2a:\n+     The value of E1 << E2 is the unique value congruent to E1 x 2^E2 modulo\n+     2^N, where N is the range exponent of the type of the result.  */\n+  if (code == LSHIFT_EXPR\n+      && !TYPE_UNSIGNED (lhstype)\n+      && cxx_dialect >= cxx11\n+      && cxx_dialect < cxx2a)\n     {\n       if (tree_int_cst_sgn (lhs) == -1)\n \t{"}, {"sha": "ea730b61c05dbff67972e0baef574713c32dcbfd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -5074,11 +5074,12 @@ This is the warning level of @option{-Wshift-overflow} and is enabled\n by default in C99 and C++11 modes (and newer).  This warning level does\n not warn about left-shifting 1 into the sign bit.  (However, in C, such\n an overflow is still rejected in contexts where an integer constant expression\n-is required.)\n+is required.)  No warning is emitted in C++2A mode (and newer), as signed left\n+shifts always wrap.\n \n @item -Wshift-overflow=2\n This warning level also warns about left-shifting 1 into the sign bit,\n-unless C++14 mode is active.\n+unless C++14 mode (or newer) is active.\n @end table\n \n @item -Wswitch"}, {"sha": "a94cb786840c0e0eca821a37602ae050c8a6dace", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -1,3 +1,17 @@\n+2018-11-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP1236R1 - Signed integers are two's complement\n+\t* g++.dg/cpp2a/constexpr-shift1.C: New test.\n+\t* g++.dg/warn/permissive-1.C (enum A, enum D): Don't expect\n+\tdiagnostics here for c++2a.\n+\t* g++.dg/cpp0x/constexpr-shift1.C (fn3, i3, fn4, i4): Don't expect\n+\tdiagnostics here for c++2a.\n+\t* g++.dg/cpp0x/constexpr-60049.C (f3, x3, y3): Likewise.\n+\t* g++.dg/ubsan/cxx11-shift-1.C (main): Add some further tests.\n+\t* g++.dg/ubsan/cxx11-shift-2.C (main): Likewise.\n+\t* g++.dg/ubsan/cxx2a-shift-1.C: New test.\n+\t* g++.dg/ubsan/cxx2a-shift-2.C: New test.\n+\n 2018-11-14  Jeff Law  <law@redhat.com>\n \n \t* gcc.c-torture/compile/20181114.c: New test."}, {"sha": "8400910f0512830487fa286cf69a4b3910406a9a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-60049.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-60049.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-60049.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-60049.C?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -5,20 +5,20 @@\n \n constexpr int f1 (int n) { return 1 << n; }   // { dg-error \"shift expression\" }\n constexpr int f2 (int n) { return 1 << n; }   // { dg-error \"shift expression\" }\n-constexpr int f3 (int n) { return n << 1; }   // { dg-error \"shift expression\" }\n+constexpr int f3 (int n) { return n << 1; }   // { dg-error \"shift expression\" \"\" { target c++17_down } }\n constexpr int f4 (int n) { return 1 >> n; }   // { dg-error \"shift expression\" }\n constexpr int f5 (int n) { return 1 >> n; }   // { dg-error \"shift expression\" }\n \n constexpr int X = __CHAR_BIT__ * sizeof (int) + 1;\n \n constexpr int x1 = f1 (X);    // { dg-message \"in .constexpr. expansion of\" }\n constexpr int x2 = f2 (-1);   // { dg-message \"in .constexpr. expansion of\" }\n-constexpr int x3 = f3 (-1);   // { dg-message \"in .constexpr. expansion of\" }\n+constexpr int x3 = f3 (-1);   // { dg-message \"in .constexpr. expansion of\" \"\" { target c++17_down } }\n constexpr int x4 = f4 (X);    // { dg-message \"in .constexpr. expansion of\" }\n constexpr int x5 = f5 (-1);   // { dg-message \"in .constexpr. expansion of\" }\n \n constexpr int y1 =  1 << X;   // { dg-error \"shift expression\" }\n constexpr int y2 =  1 << -1;  // { dg-error \"shift expression\" }\n-constexpr int y3 = -1 << 1;   // { dg-error \"shift expression\" }\n+constexpr int y3 = -1 << 1;   // { dg-error \"shift expression\" \"\" { target c++17_down } }\n constexpr int y4 =  1 >> X;   // { dg-error \"shift expression\" }\n constexpr int y5 =  1 >> -1;  // { dg-error \"shift expression\" }"}, {"sha": "c1cfb1eebdb4a3f521fc335ecb3edd6c70a282e7", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-shift1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -19,18 +19,18 @@ constexpr int i2 = fn2 (1, 200); // { dg-message \"in .constexpr. expansion of \"\n constexpr int\n fn3 (int i, int j)\n {\n-  return i << j; // { dg-error \"is negative\" }\n+  return i << j; // { dg-error \"is negative\" \"\" { target c++17_down } }\n }\n \n-constexpr int i3 = fn3 (-1, 2); // { dg-message \"in .constexpr. expansion of \" }\n+constexpr int i3 = fn3 (-1, 2); // { dg-message \"in .constexpr. expansion of \" \"\" { target c++17_down } }\n \n constexpr int\n fn4 (int i, int j)\n {\n-  return i << j; // { dg-error \"overflows\" }\n+  return i << j; // { dg-error \"overflows\" \"\" { target c++17_down } }\n }\n \n-constexpr int i4 = fn4 (__INT_MAX__, 2); // { dg-message \"in .constexpr. expansion of \" }\n+constexpr int i4 = fn4 (__INT_MAX__, 2); // { dg-message \"in .constexpr. expansion of \" \"\" { target c++17_down } }\n \n constexpr int\n fn5 (int i, int j)"}, {"sha": "abe15e721dbda7d6e5637ddb7224eea2f3cf84cf", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-shift1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-shift1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-shift1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-shift1.C?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile { target c++11 } }\n+\n+constexpr int a = -42 << 0;\t// { dg-error \"left operand of shift expression '\\\\(-42 << 0\\\\)' is negative\" \"\" { target c++17_down } }\n+constexpr int b = -42 << 1;\t// { dg-error \"left operand of shift expression '\\\\(-42 << 1\\\\)' is negative\" \"\" { target c++17_down } }\n+constexpr int c = -42 << (__SIZEOF_INT__ * __CHAR_BIT__ - 1);\t// { dg-error \"left operand of shift expression '\\\\(-42 << \\[0-9]*\\\\)' is negative\" \"\" { target c++17_down } }\n+\t\t\t\t// { dg-warning \"result of '\\\\(-42 << \\[0-9]*\\\\)' requires \\[0-9]* bits to represent, but 'int' only has \\[0-9]* bits\" \"\" { target c++17_down } .-1 }\n+constexpr int d = 42 << (__SIZEOF_INT__ * __CHAR_BIT__ - 1);\t// { dg-error \"shift expression '\\\\(42 << \\[0-9]*\\\\)' overflows\" \"\" { target c++17_down } }\n+\t\t\t\t// { dg-warning \"result of '\\\\(42 << \\[0-9]*\\\\)' requires \\[0-9]* bits to represent, but 'int' only has \\[0-9]* bits\" \"\" { target c++17_down } .-1 }\n+constexpr int e = 32 << (__SIZEOF_INT__ * __CHAR_BIT__ - 5);\t// { dg-error \"shift expression '\\\\(32 << \\[0-9]*\\\\)' overflows\" \"\" { target c++17_down } }\n+\t\t\t\t// { dg-warning \"result of '\\\\(32 << \\[0-9]*\\\\)' requires \\[0-9]* bits to represent, but 'int' only has \\[0-9]* bits\" \"\" { target c++17_down } .-1 }\n+constexpr int f = 32 << (__SIZEOF_INT__ * __CHAR_BIT__ - 6);\n+constexpr int g = -42U << 0;\n+constexpr int h = -42U << 1;\n+constexpr int i = -42U << (__SIZEOF_INT__ * __CHAR_BIT__ - 1);\n+constexpr int j = 42U << (__SIZEOF_INT__ * __CHAR_BIT__ - 1);\n+constexpr int k = 32U << (__SIZEOF_INT__ * __CHAR_BIT__ - 5);\n+constexpr int l = 32U << (__SIZEOF_INT__ * __CHAR_BIT__ - 6);\n+#if __cplusplus > 201703L\n+static_assert (a == g);\n+static_assert (b == h);\n+static_assert (c == i);\n+static_assert (d == j);\n+static_assert (e == k);\n+static_assert (f == l);\n+#endif"}, {"sha": "7e998885c9f63daea665ae8705ae4b710fa79b23", "filename": "gcc/testsuite/g++.dg/ubsan/cxx11-shift-1.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-1.C?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -2,9 +2,10 @@\n /* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover=shift -std=c++11\" } */\n \n int\n-main (void)\n+main ()\n {\n   int a = 1;\n-  a <<= 31;\n-  return 0;\n+  a <<= (__SIZEOF_INT__ * __CHAR_BIT__ - 1);\n+  a = 16;\n+  a <<= (__SIZEOF_INT__ * __CHAR_BIT__ - 5);\n }"}, {"sha": "d104ead41758ccd2d66d437cdab357811fcc5851", "filename": "gcc/testsuite/g++.dg/ubsan/cxx11-shift-2.C", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-2.C?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -2,9 +2,18 @@\n /* { dg-options \"-fsanitize=shift -w -std=c++11\" } */\n \n int\n-main (void)\n+main ()\n {\n   int a = -42;\n   a <<= 1;\n+  a = -43;\n+  a <<= 0;\n+  a = -44;\n+  a <<= (__SIZEOF_INT__ * __CHAR_BIT__ - 1);\n+  a = 32;\n+  a <<= (__SIZEOF_INT__ * __CHAR_BIT__ - 3);\n }\n-/* { dg-output \"left shift of negative value -42\" } */\n+/* { dg-output \"left shift of negative value -42.*\" } */\n+/* { dg-output \"left shift of negative value -43.*\" } */\n+/* { dg-output \"left shift of negative value -44.*\" } */\n+/* { dg-output \"left shift of 32 by \\[0-9]* places cannot be represented in type 'int'\" } */"}, {"sha": "2094cb1b6b4f40c76793f05cce55d807689d157d", "filename": "gcc/testsuite/g++.dg/ubsan/cxx2a-shift-1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx2a-shift-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx2a-shift-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx2a-shift-1.C?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover=shift -std=c++2a\" } */\n+\n+int\n+main ()\n+{\n+  int a = 1;\n+  a <<= 31;\n+  a = 16;\n+  a <<= (__SIZEOF_INT__ * __CHAR_BIT__ - 5);\n+}"}, {"sha": "5a5641068f7cf165ffdedc14746d6173ca8a3fe9", "filename": "gcc/testsuite/g++.dg/ubsan/cxx2a-shift-2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx2a-shift-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx2a-shift-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx2a-shift-2.C?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover=shift -std=c++2a\" } */\n+\n+int\n+main ()\n+{\n+  int a = -42;\n+  a <<= 1;\n+  a = -43;\n+  a <<= 0;\n+  a = -44;\n+  a <<= (__SIZEOF_INT__ * __CHAR_BIT__ - 1);\n+  a = 32;\n+  a <<= (__SIZEOF_INT__ * __CHAR_BIT__ - 3);\n+}"}, {"sha": "387af606b26a9c5dc5d94a5f85f500355258b7c7", "filename": "gcc/testsuite/g++.dg/warn/permissive-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpermissive-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee099430b5d72050380f7506520d3bcb52b2f41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpermissive-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpermissive-1.C?ref=8ee099430b5d72050380f7506520d3bcb52b2f41", "patch": "@@ -2,7 +2,7 @@\n // { dg-do compile { target int32 } }\n // { dg-options \"-fpermissive -Wno-shift-overflow -Wno-shift-count-overflow -Wno-shift-count-negative\" }\n \n-enum A { AA = -1 << 4 }; // { dg-warning \"operand of shift expression\" \"\" { target c++11 } }\n+enum A { AA = -1 << 4 }; // { dg-warning \"operand of shift expression\" \"\" { target { c++11 && c++17_down } } }\n enum B { BB = 1 << -4 }; // { dg-warning \"operand of shift expression\" }\n enum C { CC = 1 << __SIZEOF_INT__ * 4 * __CHAR_BIT__ - 4 }; // { dg-warning \"operand of shift expression\" }\n-enum D { DD = 10 << __SIZEOF_INT__ * __CHAR_BIT__ - 2 }; // { dg-warning \"shift expression\" \"\" { target c++11 } }\n+enum D { DD = 10 << __SIZEOF_INT__ * __CHAR_BIT__ - 2 }; // { dg-warning \"shift expression\" \"\" { target { c++11 && c++17_down } } }"}]}