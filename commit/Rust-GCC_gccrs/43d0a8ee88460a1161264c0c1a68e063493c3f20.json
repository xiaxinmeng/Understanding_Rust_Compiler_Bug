{"sha": "43d0a8ee88460a1161264c0c1a68e063493c3f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNkMGE4ZWU4ODQ2MGExMTYxMjY0YzBjMWE2OGUwNjM0OTNjM2YyMA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2018-05-14T16:10:19Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2018-05-14T16:10:19Z"}, "message": "Remove remaining uses of * in patterns\n\nRemove the remaining uses of '*' from aarch64.md.\nUsing '*' in alternatives is typically incorrect as it tells the register\nallocator to ignore those alternatives.  Also add a missing '?' so we\nprefer a floating point register for same-size int<->fp conversions.\n\n    gcc/\n\t* config/aarch64/aarch64.md (mov<mode>): Remove '*' in alternatives.\n\t(movsi_aarch64): Likewise.\n\t(load_pairsi): Likewise.\n\t(load_pairdi): Likewise.\n\t(store_pairsi): Likewise.\n\t(store_pairdi): Likewise.\n\t(load_pairsf): Likewise.\n\t(load_pairdf): Likewise.\n\t(store_pairsf): Likewise.\n\t(store_pairdf): Likewise.\n\t(zero_extend): Likewise.\n\t(trunc): Swap alternatives.\n\t(fcvt_target): Add '?' to prefer w over r.\n\n    testsuite/\n\t* gcc.target/aarch64/vmov_n_1.c: Update test.\n\t* gcc.target/aarch64/vfp-1.c: Update test.\n\nFrom-SVN: r260233", "tree": {"sha": "44e1246b59c6120267ce28e74973f7eff0bf4c47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44e1246b59c6120267ce28e74973f7eff0bf4c47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43d0a8ee88460a1161264c0c1a68e063493c3f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43d0a8ee88460a1161264c0c1a68e063493c3f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43d0a8ee88460a1161264c0c1a68e063493c3f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43d0a8ee88460a1161264c0c1a68e063493c3f20/comments", "author": null, "committer": null, "parents": [{"sha": "2717c64d76529901bb780ca1bd08a63fcf785cd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2717c64d76529901bb780ca1bd08a63fcf785cd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2717c64d76529901bb780ca1bd08a63fcf785cd7"}], "stats": {"total": 87, "additions": 54, "deletions": 33}, "files": [{"sha": "553c21e1370592691785ede3c602d4d17903339c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d0a8ee88460a1161264c0c1a68e063493c3f20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d0a8ee88460a1161264c0c1a68e063493c3f20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43d0a8ee88460a1161264c0c1a68e063493c3f20", "patch": "@@ -1,3 +1,19 @@\n+2018-05-14  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.md (mov<mode>): Remove '*' in alternatives.\n+\t(movsi_aarch64): Likewise.\n+\t(load_pairsi): Likewise.\n+\t(load_pairdi): Likewise.\n+\t(store_pairsi): Likewise.\n+\t(store_pairdi): Likewise.\n+\t(load_pairsf): Likewise.\n+\t(load_pairdf): Likewise.\n+\t(store_pairsf): Likewise.\n+\t(store_pairdf): Likewise.\n+\t(zero_extend): Likewise.\n+\t(trunc): Swap alternatives.\n+\t(fcvt_target): Add '?' to prefer w over r.\n+\n 2018-05-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85756"}, {"sha": "68ea71875c0271b71219439f611d9d9dd6387840", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d0a8ee88460a1161264c0c1a68e063493c3f20/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d0a8ee88460a1161264c0c1a68e063493c3f20/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=43d0a8ee88460a1161264c0c1a68e063493c3f20", "patch": "@@ -928,8 +928,8 @@\n )\n \n (define_insn \"*mov<mode>_aarch64\"\n-  [(set (match_operand:SHORT 0 \"nonimmediate_operand\" \"=r,r,   *w,r ,r,*w, m, m, r,*w,*w\")\n-\t(match_operand:SHORT 1 \"aarch64_mov_operand\"  \" r,M,D<hq>,Usv,m, m,rZ,*w,*w, r,*w\"))]\n+  [(set (match_operand:SHORT 0 \"nonimmediate_operand\" \"=r,r,    w,r  ,r,w, m,m,r,w,w\")\n+\t(match_operand:SHORT 1 \"aarch64_mov_operand\"  \" r,M,D<hq>,Usv,m,m,rZ,w,w,r,w\"))]\n   \"(register_operand (operands[0], <MODE>mode)\n     || aarch64_reg_or_zero (operands[1], <MODE>mode))\"\n {\n@@ -995,7 +995,7 @@\n \n (define_insn_and_split \"*movsi_aarch64\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r, r,w, m, m,  r,  r, w,r,w, w\")\n-\t(match_operand:SI 1 \"aarch64_mov_operand\"  \" r,r,k,M,n,Usv,m,m,rZ,*w,Usa,Ush,rZ,w,w,Ds\"))]\n+\t(match_operand:SI 1 \"aarch64_mov_operand\"  \" r,r,k,M,n,Usv,m,m,rZ,w,Usa,Ush,rZ,w,w,Ds\"))]\n   \"(register_operand (operands[0], SImode)\n     || aarch64_reg_or_zero (operands[1], SImode))\"\n   \"@\n@@ -1302,9 +1302,9 @@\n ;; Operands 1 and 3 are tied together by the final condition; so we allow\n ;; fairly lax checking on the second memory operation.\n (define_insn \"load_pairsi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,*w\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,w\")\n \t(match_operand:SI 1 \"aarch64_mem_pair_operand\" \"Ump,Ump\"))\n-   (set (match_operand:SI 2 \"register_operand\" \"=r,*w\")\n+   (set (match_operand:SI 2 \"register_operand\" \"=r,w\")\n \t(match_operand:SI 3 \"memory_operand\" \"m,m\"))]\n   \"rtx_equal_p (XEXP (operands[3], 0),\n \t\tplus_constant (Pmode,\n@@ -1318,9 +1318,9 @@\n )\n \n (define_insn \"load_pairdi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,*w\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,w\")\n \t(match_operand:DI 1 \"aarch64_mem_pair_operand\" \"Ump,Ump\"))\n-   (set (match_operand:DI 2 \"register_operand\" \"=r,*w\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=r,w\")\n \t(match_operand:DI 3 \"memory_operand\" \"m,m\"))]\n   \"rtx_equal_p (XEXP (operands[3], 0),\n \t\tplus_constant (Pmode,\n@@ -1338,9 +1338,9 @@\n ;; fairly lax checking on the second memory operation.\n (define_insn \"store_pairsi\"\n   [(set (match_operand:SI 0 \"aarch64_mem_pair_operand\" \"=Ump,Ump\")\n-\t(match_operand:SI 1 \"aarch64_reg_or_zero\" \"rZ,*w\"))\n+\t(match_operand:SI 1 \"aarch64_reg_or_zero\" \"rZ,w\"))\n    (set (match_operand:SI 2 \"memory_operand\" \"=m,m\")\n-\t(match_operand:SI 3 \"aarch64_reg_or_zero\" \"rZ,*w\"))]\n+\t(match_operand:SI 3 \"aarch64_reg_or_zero\" \"rZ,w\"))]\n   \"rtx_equal_p (XEXP (operands[2], 0),\n \t\tplus_constant (Pmode,\n \t\t\t       XEXP (operands[0], 0),\n@@ -1354,9 +1354,9 @@\n \n (define_insn \"store_pairdi\"\n   [(set (match_operand:DI 0 \"aarch64_mem_pair_operand\" \"=Ump,Ump\")\n-\t(match_operand:DI 1 \"aarch64_reg_or_zero\" \"rZ,*w\"))\n+\t(match_operand:DI 1 \"aarch64_reg_or_zero\" \"rZ,w\"))\n    (set (match_operand:DI 2 \"memory_operand\" \"=m,m\")\n-\t(match_operand:DI 3 \"aarch64_reg_or_zero\" \"rZ,*w\"))]\n+\t(match_operand:DI 3 \"aarch64_reg_or_zero\" \"rZ,w\"))]\n   \"rtx_equal_p (XEXP (operands[2], 0),\n \t\tplus_constant (Pmode,\n \t\t\t       XEXP (operands[0], 0),\n@@ -1371,9 +1371,9 @@\n ;; Operands 1 and 3 are tied together by the final condition; so we allow\n ;; fairly lax checking on the second memory operation.\n (define_insn \"load_pairsf\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=w,*r\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=w,r\")\n \t(match_operand:SF 1 \"aarch64_mem_pair_operand\" \"Ump,Ump\"))\n-   (set (match_operand:SF 2 \"register_operand\" \"=w,*r\")\n+   (set (match_operand:SF 2 \"register_operand\" \"=w,r\")\n \t(match_operand:SF 3 \"memory_operand\" \"m,m\"))]\n   \"rtx_equal_p (XEXP (operands[3], 0),\n \t\tplus_constant (Pmode,\n@@ -1387,9 +1387,9 @@\n )\n \n (define_insn \"load_pairdf\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=w,*r\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"=w,r\")\n \t(match_operand:DF 1 \"aarch64_mem_pair_operand\" \"Ump,Ump\"))\n-   (set (match_operand:DF 2 \"register_operand\" \"=w,*r\")\n+   (set (match_operand:DF 2 \"register_operand\" \"=w,r\")\n \t(match_operand:DF 3 \"memory_operand\" \"m,m\"))]\n   \"rtx_equal_p (XEXP (operands[3], 0),\n \t\tplus_constant (Pmode,\n@@ -1406,9 +1406,9 @@\n ;; fairly lax checking on the second memory operation.\n (define_insn \"store_pairsf\"\n   [(set (match_operand:SF 0 \"aarch64_mem_pair_operand\" \"=Ump,Ump\")\n-\t(match_operand:SF 1 \"aarch64_reg_or_fp_zero\" \"w,*rY\"))\n+\t(match_operand:SF 1 \"aarch64_reg_or_fp_zero\" \"w,rY\"))\n    (set (match_operand:SF 2 \"memory_operand\" \"=m,m\")\n-\t(match_operand:SF 3 \"aarch64_reg_or_fp_zero\" \"w,*rY\"))]\n+\t(match_operand:SF 3 \"aarch64_reg_or_fp_zero\" \"w,rY\"))]\n   \"rtx_equal_p (XEXP (operands[2], 0),\n \t\tplus_constant (Pmode,\n \t\t\t       XEXP (operands[0], 0),\n@@ -1422,9 +1422,9 @@\n \n (define_insn \"store_pairdf\"\n   [(set (match_operand:DF 0 \"aarch64_mem_pair_operand\" \"=Ump,Ump\")\n-\t(match_operand:DF 1 \"aarch64_reg_or_fp_zero\" \"w,*rY\"))\n+\t(match_operand:DF 1 \"aarch64_reg_or_fp_zero\" \"w,rY\"))\n    (set (match_operand:DF 2 \"memory_operand\" \"=m,m\")\n-\t(match_operand:DF 3 \"aarch64_reg_or_fp_zero\" \"w,*rY\"))]\n+\t(match_operand:DF 3 \"aarch64_reg_or_fp_zero\" \"w,rY\"))]\n   \"rtx_equal_p (XEXP (operands[2], 0),\n \t\tplus_constant (Pmode,\n \t\t\t       XEXP (operands[0], 0),\n@@ -1575,7 +1575,7 @@\n )\n \n (define_insn \"*zero_extend<SHORT:mode><GPI:mode>2_aarch64\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r,r,*w\")\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r,r,w\")\n         (zero_extend:GPI (match_operand:SHORT 1 \"nonimmediate_operand\" \"r,m,m\")))]\n   \"\"\n   \"@\n@@ -5083,13 +5083,13 @@\n ;; and making r = w more expensive\n \n (define_insn \"<optab>_trunc<fcvt_target><GPI:mode>2\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=?r,w\")\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=w,?r\")\n \t(FIXUORS:GPI (match_operand:<FCVT_TARGET> 1 \"register_operand\" \"w,w\")))]\n   \"TARGET_FLOAT\"\n   \"@\n-   fcvtz<su>\\t%<w>0, %<s>1\n-   fcvtz<su>\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"f_cvtf2i,neon_fp_to_int_s\")]\n+   fcvtz<su>\\t%<s>0, %<s>1\n+   fcvtz<su>\\t%<w>0, %<s>1\"\n+  [(set_attr \"type\" \"neon_fp_to_int_s,f_cvtf2i\")]\n )\n \n ;; Convert HF -> SI or DI\n@@ -5115,7 +5115,7 @@\n \n (define_insn \"<optab><fcvt_target><GPF:mode>2\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w,w\")\n-        (FLOATUORS:GPF (match_operand:<FCVT_TARGET> 1 \"register_operand\" \"w,r\")))]\n+        (FLOATUORS:GPF (match_operand:<FCVT_TARGET> 1 \"register_operand\" \"w,?r\")))]\n   \"TARGET_FLOAT\"\n   \"@\n    <su_optab>cvtf\\t%<GPF:s>0, %<s>1"}, {"sha": "259d578eb0a3993c0860c59960ccb6a7f37a30cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d0a8ee88460a1161264c0c1a68e063493c3f20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d0a8ee88460a1161264c0c1a68e063493c3f20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43d0a8ee88460a1161264c0c1a68e063493c3f20", "patch": "@@ -1,3 +1,8 @@\n+2018-05-14  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.target/aarch64/vmov_n_1.c: Update test.\n+\t* gcc.target/aarch64/vfp-1.c: Update test.\n+\n 2018-05-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85756"}, {"sha": "02609bb52bafd43803be29cf15225568f7713434", "filename": "gcc/testsuite/gcc.target/aarch64/vfp-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d0a8ee88460a1161264c0c1a68e063493c3f20/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d0a8ee88460a1161264c0c1a68e063493c3f20/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvfp-1.c?ref=43d0a8ee88460a1161264c0c1a68e063493c3f20", "patch": "@@ -32,7 +32,7 @@ void test_sf() {\n   /* { dg-final { scan-assembler \"fsqrt\\ts\\[0-9\\]*\" } } */\n   f1 = sqrtf (f1);\n   /* cmpsf */\n-  /* { dg-final { scan-assembler \"fcmp\\ts\\[0-9\\]*\" } } */\n+  /* { dg-final { scan-assembler \"fcmpe\\ts\\[0-9\\]*\" } } */\n   if (f1 < f2)\n     cond1 = 1;\n   else\n@@ -64,7 +64,7 @@ void test_df() {\n   /* { dg-final { scan-assembler \"fsqrt\\td\\[0-9\\]*\" } } */\n   d1 = sqrt (d1);\n   /* cmpdf */\n-  /* { dg-final { scan-assembler \"fcmp\\td\\[0-9\\]*\" } } */\n+  /* { dg-final { scan-assembler \"fcmpe\\td\\[0-9\\]*\" } } */\n   if (d1 < d2)\n     cond1 = 1;\n   else\n@@ -82,13 +82,13 @@ void test_convert () {\n   /* { dg-final { scan-assembler \"fcvt\\ts\\[0-9\\]*\" } } */\n   f1 = d1;\n   /* fixsfsi2 */\n-  /* { dg-final { scan-assembler \"fcvtzs\\tw\\[0-9\\], s\\[0-9\\]*\" } } */\n+  /* { dg-final { scan-assembler \"fcvtzs\\ts\\[0-9\\], s\\[0-9\\]*\" } } */\n   i1 = f1;\n   /* fixdfsi2 */\n   /* { dg-final { scan-assembler \"fcvtzs\\tw\\[0-9\\], d\\[0-9\\]*\" } } */\n   i1 = d1;\n   /* fixunsfsi2 */\n-  /* { dg-final { scan-assembler \"fcvtzu\\tw\\[0-9\\], s\\[0-9\\]*\" } } */\n+  /* { dg-final { scan-assembler \"fcvtzu\\ts\\[0-9\\], s\\[0-9\\]*\" } } */\n   u1 = f1;\n   /* fixunsdfsi2 */\n   /* { dg-final { scan-assembler \"fcvtzu\\tw\\[0-9\\], d\\[0-9\\]*\" } } */"}, {"sha": "528cb84402f891a80e676a1463fb0d87763f969d", "filename": "gcc/testsuite/gcc.target/aarch64/vmov_n_1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d0a8ee88460a1161264c0c1a68e063493c3f20/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmov_n_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d0a8ee88460a1161264c0c1a68e063493c3f20/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmov_n_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmov_n_1.c?ref=43d0a8ee88460a1161264c0c1a68e063493c3f20", "patch": "@@ -209,11 +209,11 @@ TESTFUNC (64, 16, p)\n \n OBSCURE_FUNC (64, 8, s)\n TESTFUNC (64, 8, s)\n-/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.8b, w\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.8b, w\\[0-9\\]+\" 1 } } */\n \n OBSCURE_FUNC (64, 16, s)\n TESTFUNC (64, 16, s)\n-/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.4h, w\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.4h, w\\[0-9\\]+\" 1 } } */\n \n OBSCURE_FUNC (64, 32, s)\n TESTFUNC (64, 32, s)\n@@ -265,11 +265,11 @@ TESTFUNC (128, 16, p)\n \n OBSCURE_FUNC (128, 8, s)\n TESTFUNC (128, 8, s)\n-/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.16b, w\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.16b, w\\[0-9\\]+\" 1 } } */\n \n OBSCURE_FUNC (128, 16, s)\n TESTFUNC (128, 16, s)\n-/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.8h, w\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"dup\\\\tv\\[0-9\\]+\\.8h, w\\[0-9\\]+\" 1 } } */\n \n OBSCURE_FUNC (128, 32, s)\n TESTFUNC (128, 32, s)"}]}