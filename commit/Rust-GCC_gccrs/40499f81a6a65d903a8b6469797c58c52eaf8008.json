{"sha": "40499f81a6a65d903a8b6469797c58c52eaf8008", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA0OTlmODFhNmE2NWQ5MDNhOGI2NDY5Nzk3YzU4YzUyZWFmODAwOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-03-09T18:14:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-03-09T18:14:43Z"}, "message": "PR c++/70105: Defer location expansion until diagnostic_show_locus\n\ngcc/ChangeLog:\n\tPR c/68473\n\tPR c++/70105\n\t* diagnostic-show-locus.c (layout_range::layout_range): Replace\n\tlocation_range param with three const expanded_locations * and a\n\tbool.\n\t(layout::layout): Replace call to\n\trich_location::lazily_expand_location with get_expanded_location.\n\tExtract the range and perform location expansion here, passing\n\tthe results to the layout_range ctor.\n\t* diagnostic.c (source_range::debug): Delete.\n\t* diagnostic.h (diagnostic_expand_location): Reimplement in terms\n\tof rich_location::get_expanded_location.\n\t* gcc-rich-location.c (get_range_for_expr): Delete.\n\t(gcc_rich_location::add_expr): Reimplement to avoid the\n\trich_location::add_range overload that took a location_range,\n\tpassing a location_t instead.\n\ngcc/testsuite/ChangeLog:\n\tPR c/68473\n\tPR c++/70105\n\t* gcc.dg/plugin/diagnostic_plugin_show_trees.c (show_tree):\n\tDrop range information from call to inform_at_rich_loc.\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c (add_range):\n\tNew.\n\t(test_show_locus): Replace calls to rich_location::add_range with\n\tcalls to add_range.  Rewrite the tests that used the now-defunct\n\trich_location ctor taking a source_range.  Simplify other tests\n\tby replacing calls to COMBINE_LOCATION_DATA with calls to\n\tmake_location.\n\nlibcpp/ChangeLog:\n\tPR c/68473\n\tPR c++/70105\n\t* include/line-map.h (source_range::debug): Delete.\n\t(struct location_range): Update comment.  Replace\n\texpanded_location fields \"m_start\", \"m_finish\", and \"m_caret\" with\n\ta source_location field: \"m_loc\".\n\t(class rich_location): Reword comment.\n\t(rich_location::get_loc): Reimplement in terms of a new overloaded\n\tvariant which takes an unsigned int.\n\t(rich_location::get_loc_addr): Delete.\n\t(rich_location::add_range): Drop params \"start\" and \"finish\" in\n\tfavor of param \"loc\".  Drop overloaded variants taking a\n\tsource_range or location_range *.\n\t(rich_location::lazily_expand_location): Delete in favor of...\n\t(rich_location::get_expanded_location): New decl.\n\t(rich_location::m_loc): Delete field.\n\t(rich_location::m_column_override): New field.\n\t* line-map.c (rich_location::rich_location):  Drop name of\n\tline_maps * param.  Update initializations for deletion of field\n\t\"m_loc\" and addition of field \"m_column_override\".  Reimplement\n\tbody as a call to add_range.  Delete overloaded variant taking a\n\tsource_range.\n\t(rich_location::get_loc): New function.\n\t(rich_location::lazily_expand_location): Delete in favor of...\n\t(rich_location::get_expanded_location): New function.\n\t(rich_location::override_column): Reimplement.\n\t(rich_location::add_range): Drop params \"start\" and \"finish\" in\n\tfavor of param \"loc\".  Eliminate location expansion in favor of\n\tsimply storing loc.  Drop overloaded variants taking a\n\tsource_range or location_range *.\n\t(rich_location::set_range): Eliminate location expansion.\n\nFrom-SVN: r234087", "tree": {"sha": "ba81cb8d930007773d9d7556e938bf62e095d82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba81cb8d930007773d9d7556e938bf62e095d82e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40499f81a6a65d903a8b6469797c58c52eaf8008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40499f81a6a65d903a8b6469797c58c52eaf8008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40499f81a6a65d903a8b6469797c58c52eaf8008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40499f81a6a65d903a8b6469797c58c52eaf8008/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9e336624a5f3d3845b9b4a070f29d074418bd73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9e336624a5f3d3845b9b4a070f29d074418bd73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9e336624a5f3d3845b9b4a070f29d074418bd73"}], "stats": {"total": 426, "additions": 200, "deletions": 226}, "files": [{"sha": "ee8e2088a5084a7ff509b07880b35275b3d3cee0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40499f81a6a65d903a8b6469797c58c52eaf8008", "patch": "@@ -1,3 +1,22 @@\n+2016-03-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/68473\n+\tPR c++/70105\n+\t* diagnostic-show-locus.c (layout_range::layout_range): Replace\n+\tlocation_range param with three const expanded_locations * and a\n+\tbool.\n+\t(layout::layout): Replace call to\n+\trich_location::lazily_expand_location with get_expanded_location.\n+\tExtract the range and perform location expansion here, passing\n+\tthe results to the layout_range ctor.\n+\t* diagnostic.c (source_range::debug): Delete.\n+\t* diagnostic.h (diagnostic_expand_location): Reimplement in terms\n+\tof rich_location::get_expanded_location.\n+\t* gcc-rich-location.c (get_range_for_expr): Delete.\n+\t(gcc_rich_location::add_expr): Reimplement to avoid the\n+\trich_location::add_range overload that took a location_range,\n+\tpassing a location_t instead.\n+\n 2016-03-09  Richard Biener  <rguenther@suse.de>\n \tJakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "a940f24465e9b1d49dd896cfd44e1ff6bf91f9e3", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=40499f81a6a65d903a8b6469797c58c52eaf8008", "patch": "@@ -117,7 +117,10 @@ class layout_point\n class layout_range\n {\n  public:\n-  layout_range (const location_range *loc_range);\n+  layout_range (const expanded_location *start_exploc,\n+\t\tconst expanded_location *finish_exploc,\n+\t\tbool show_caret_p,\n+\t\tconst expanded_location *caret_exploc);\n \n   bool contains_point (int row, int column) const;\n \n@@ -328,11 +331,14 @@ colorizer::finish_state (int state)\n    Initialize various layout_point fields from expanded_location\n    equivalents; we've already filtered on file.  */\n \n-layout_range::layout_range (const location_range *loc_range)\n-: m_start (loc_range->m_start),\n-  m_finish (loc_range->m_finish),\n-  m_show_caret_p (loc_range->m_show_caret_p),\n-  m_caret (loc_range->m_caret)\n+layout_range::layout_range (const expanded_location *start_exploc,\n+\t\t\t    const expanded_location *finish_exploc,\n+\t\t\t    bool show_caret_p,\n+\t\t\t    const expanded_location *caret_exploc)\n+: m_start (*start_exploc),\n+  m_finish (*finish_exploc),\n+  m_show_caret_p (show_caret_p),\n+  m_caret (*caret_exploc)\n {\n }\n \n@@ -473,7 +479,7 @@ layout::layout (diagnostic_context * context,\n : m_context (context),\n   m_pp (context->printer),\n   m_diagnostic_kind (diagnostic->kind),\n-  m_exploc (diagnostic->richloc->lazily_expand_location ()),\n+  m_exploc (diagnostic->richloc->get_expanded_location (0)),\n   m_colorizer (context, diagnostic),\n   m_colorize_source_p (context->colorize_source_p),\n   m_layout_ranges (rich_location::MAX_RANGES),\n@@ -487,25 +493,36 @@ layout::layout (diagnostic_context * context,\n \t Ignore any ranges that are awkward to handle.  */\n       const location_range *loc_range = richloc->get_range (idx);\n \n+      /* Split the \"range\" into caret and range information.  */\n+      source_range src_range = get_range_from_loc (line_table, loc_range->m_loc);\n+\n+      /* Expand the various locations.  */\n+      expanded_location start\n+\t= linemap_client_expand_location_to_spelling_point (src_range.m_start);\n+      expanded_location finish\n+\t= linemap_client_expand_location_to_spelling_point (src_range.m_finish);\n+      expanded_location caret\n+\t= linemap_client_expand_location_to_spelling_point (loc_range->m_loc);\n+\n       /* If any part of the range isn't in the same file as the primary\n \t location of this diagnostic, ignore the range.  */\n-      if (loc_range->m_start.file != m_exploc.file)\n+      if (start.file != m_exploc.file)\n \tcontinue;\n-      if (loc_range->m_finish.file != m_exploc.file)\n+      if (finish.file != m_exploc.file)\n \tcontinue;\n       if (loc_range->m_show_caret_p)\n-\tif (loc_range->m_caret.file != m_exploc.file)\n+\tif (caret.file != m_exploc.file)\n \t  continue;\n \n       /* Everything is now known to be in the correct source file,\n \t but it may require further sanitization.  */\n-      layout_range ri (loc_range);\n+      layout_range ri (&start, &finish, loc_range->m_show_caret_p, &caret);\n \n       /* If we have a range that finishes before it starts (perhaps\n \t from something built via macro expansion), printing the\n \t range is likely to be nonsensical.  Also, attempting to do so\n \t breaks assumptions within the printing code  (PR c/68473).  */\n-      if (loc_range->m_start.line > loc_range->m_finish.line)\n+      if (start.line > finish.line)\n \t{\n \t  /* Is this the primary location?  */\n \t  if (m_layout_ranges.length () == 0)"}, {"sha": "6a679cb45a4186a2fb9f26b1fad1e2420549c26e", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=40499f81a6a65d903a8b6469797c58c52eaf8008", "patch": "@@ -1338,17 +1338,3 @@ real_abort (void)\n {\n   abort ();\n }\n-\n-/* Display the given source_range instance, with MSG as a descriptive\n-   comment.  This issues a \"note\" diagnostic at the range.\n-\n-   This is declared within libcpp, but implemented here, since it\n-   makes use of the diagnostic-printing machinery.  */\n-\n-DEBUG_FUNCTION void\n-source_range::debug (const char *msg) const\n-{\n-  rich_location richloc (line_table, m_start);\n-  richloc.add_range (m_start, m_finish, false);\n-  inform_at_rich_loc (&richloc, \"%s\", msg);\n-}"}, {"sha": "ff5735770849b4a8bedaea52254013225e84d81a", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=40499f81a6a65d903a8b6469797c58c52eaf8008", "patch": "@@ -339,7 +339,7 @@ diagnostic_num_locations (const diagnostic_info * diagnostic)\n static inline expanded_location\n diagnostic_expand_location (const diagnostic_info * diagnostic, int which = 0)\n {\n-  return diagnostic->richloc->get_range (which)->m_caret;\n+  return diagnostic->richloc->get_expanded_location (which);\n }\n \n /* This is somehow the right-side margin of a caret line, that is, we"}, {"sha": "a03ce0ee5fa9d9071a6194280e85fe6e1d5b5c86", "filename": "gcc/gcc-rich-location.c", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Fgcc-rich-location.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Fgcc-rich-location.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-rich-location.c?ref=40499f81a6a65d903a8b6469797c58c52eaf8008", "patch": "@@ -41,39 +41,15 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cpplib.h\"\n #include \"diagnostic.h\"\n \n-/* Extract any source range information from EXPR and write it\n-   to *R.  */\n-\n-static bool\n-get_range_for_expr (tree expr, location_range *r)\n-{\n-  if (EXPR_HAS_RANGE (expr))\n-    {\n-      source_range sr = EXPR_LOCATION_RANGE (expr);\n-\n-      /* Do we have meaningful data?  */\n-      if (sr.m_start && sr.m_finish)\n-\t{\n-\t  r->m_start = expand_location (sr.m_start);\n-\t  r->m_finish = expand_location (sr.m_finish);\n-\t  return true;\n-\t}\n-    }\n-\n-  return false;\n-}\n-\n /* Add a range to the rich_location, covering expression EXPR. */\n \n void\n gcc_rich_location::add_expr (tree expr)\n {\n   gcc_assert (expr);\n \n-  location_range r;\n-  r.m_show_caret_p = false;\n-  if (get_range_for_expr (expr, &r))\n-    add_range (&r);\n+  if (CAN_HAVE_RANGE_P (expr))\n+    add_range (EXPR_LOCATION (expr), false);\n }\n \n /* If T is an expression, add a range for it to the rich_location.  */"}, {"sha": "014ee42f41d258b87e2570d3ec04fa44aea6d34c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40499f81a6a65d903a8b6469797c58c52eaf8008", "patch": "@@ -1,3 +1,17 @@\n+2016-03-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/68473\n+\tPR c++/70105\n+\t* gcc.dg/plugin/diagnostic_plugin_show_trees.c (show_tree):\n+\tDrop range information from call to inform_at_rich_loc.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c (add_range):\n+\tNew.\n+\t(test_show_locus): Replace calls to rich_location::add_range with\n+\tcalls to add_range.  Rewrite the tests that used the now-defunct\n+\trich_location ctor taking a source_range.  Simplify other tests\n+\tby replacing calls to COMBINE_LOCATION_DATA with calls to\n+\tmake_location.\n+\n 2016-03-09  Richard Biener  <rguenther@suse.de>\n \tJakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "f025f963e696f687209f95977628114d1923f2c7", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_show_trees.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c?ref=40499f81a6a65d903a8b6469797c58c52eaf8008", "patch": "@@ -52,13 +52,7 @@ show_tree (tree node)\n   enum tree_code code = TREE_CODE (node);\n \n   location_range *range = richloc.get_range (1);\n-  inform_at_rich_loc (&richloc,\n-\t\t      \"%s at range %i:%i-%i:%i\",\n-\t\t      get_tree_code_name (code),\n-\t\t      range->m_start.line,\n-\t\t      range->m_start.column,\n-\t\t      range->m_finish.line,\n-\t\t      range->m_finish.column);\n+  inform_at_rich_loc (&richloc, \"%s\", get_tree_code_name (code));\n \n   /* Recurse.  */\n   int min_idx = 0;"}, {"sha": "95078ce2f2b40639bda56194716efd0e02e44243", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 46, "deletions": 51, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40499f81a6a65d903a8b6469797c58c52eaf8008/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=40499f81a6a65d903a8b6469797c58c52eaf8008", "patch": "@@ -140,6 +140,15 @@ custom_diagnostic_finalizer (diagnostic_context *context,\n   pp_flush (context->printer);\n }\n \n+/* Add a location to RICHLOC with caret==start at START, ranging to FINISH.  */\n+\n+static void\n+add_range (rich_location *richloc, location_t start, location_t finish,\n+\t   bool show_caret_p)\n+{\n+  richloc->add_range (make_location (start, start, finish), show_caret_p);\n+}\n+\n /* Exercise the diagnostic machinery to emit various warnings,\n    for use by diagnostic-test-show-locus-*.c.\n \n@@ -165,53 +174,48 @@ test_show_locus (function *fun)\n     {\n       const int line = fnstart_line + 2;\n       rich_location richloc (line_table, get_loc (line, 15));\n-      richloc.add_range (get_loc (line, 10), get_loc (line, 14), false);\n-      richloc.add_range (get_loc (line, 16), get_loc (line, 16), false);\n+      add_range (&richloc, get_loc (line, 10), get_loc (line, 14), false);\n+      add_range (&richloc, get_loc (line, 16), get_loc (line, 16), false);\n       warning_at_rich_loc (&richloc, 0, \"test\");\n     }\n \n   if (0 == strcmp (fnname, \"test_simple_2\"))\n     {\n       const int line = fnstart_line + 2;\n       rich_location richloc (line_table, get_loc (line, 24));\n-      richloc.add_range (get_loc (line, 6),\n-\t\t\t get_loc (line, 22), false);\n-      richloc.add_range (get_loc (line, 26),\n-\t\t\t get_loc (line, 43), false);\n+      add_range (&richloc, get_loc (line, 6), get_loc (line, 22), false);\n+      add_range (&richloc, get_loc (line, 26), get_loc (line, 43), false);\n       warning_at_rich_loc (&richloc, 0, \"test\");\n     }\n \n   if (0 == strcmp (fnname, \"test_multiline\"))\n     {\n       const int line = fnstart_line + 2;\n       rich_location richloc (line_table, get_loc (line + 1, 7));\n-      richloc.add_range (get_loc (line, 7),\n-\t\t\t get_loc (line, 23), false);\n-      richloc.add_range (get_loc (line + 1, 9),\n-\t\t\t get_loc (line + 1, 26), false);\n+      add_range (&richloc, get_loc (line, 7), get_loc (line, 23), false);\n+      add_range (&richloc, get_loc (line + 1, 9), get_loc (line + 1, 26),\n+\t\t false);\n       warning_at_rich_loc (&richloc, 0, \"test\");\n     }\n \n   if (0 == strcmp (fnname, \"test_many_lines\"))\n     {\n       const int line = fnstart_line + 2;\n       rich_location richloc (line_table, get_loc (line + 5, 7));\n-      richloc.add_range (get_loc (line, 7),\n-\t\t\t get_loc (line + 4, 65), false);\n-      richloc.add_range (get_loc (line + 5, 9),\n-\t\t\t get_loc (line + 10, 61), false);\n+      add_range (&richloc, get_loc (line, 7), get_loc (line + 4, 65), false);\n+      add_range (&richloc, get_loc (line + 5, 9), get_loc (line + 10, 61),\n+\t\t false);\n       warning_at_rich_loc (&richloc, 0, \"test\");\n     }\n \n-  /* Example of a rich_location constructed directly from a\n-     source_range where the range is larger than one character.  */\n+  /* Example of a rich_location where the range is larger than\n+     one character.  */\n   if (0 == strcmp (fnname, \"test_richloc_from_proper_range\"))\n     {\n       const int line = fnstart_line + 2;\n-      source_range src_range;\n-      src_range.m_start = get_loc (line, 12);\n-      src_range.m_finish = get_loc (line, 16);\n-      rich_location richloc (src_range);\n+      location_t start = get_loc (line, 12);\n+      location_t finish = get_loc (line, 16);\n+      rich_location richloc (line_table, make_location (start, start, finish));\n       warning_at_rich_loc (&richloc, 0, \"test\");\n     }\n \n@@ -220,31 +224,19 @@ test_show_locus (function *fun)\n   if (0 == strcmp (fnname, \"test_caret_within_proper_range\"))\n     {\n       const int line = fnstart_line + 2;\n-      location_t caret = get_loc (line, 16);\n-      source_range src_range;\n-      src_range.m_start = get_loc (line, 12);\n-      src_range.m_finish = get_loc (line, 20);\n-      location_t combined_loc = COMBINE_LOCATION_DATA (line_table,\n-\t\t\t\t\t\t       caret,\n-\t\t\t\t\t\t       src_range,\n-\t\t\t\t\t\t       NULL);\n-      warning_at (combined_loc, 0, \"test\");\n+      warning_at (make_location (get_loc (line, 16), get_loc (line, 12),\n+\t\t\t\t get_loc (line, 20)),\n+\t\t  0, \"test\");\n     }\n \n   /* Example of a very wide line, where the information of interest\n      is beyond the width of the terminal (hardcoded above).  */\n   if (0 == strcmp (fnname, \"test_very_wide_line\"))\n     {\n       const int line = fnstart_line + 2;\n-      location_t caret = get_loc (line, 94);\n-      source_range src_range;\n-      src_range.m_start = get_loc (line, 90);\n-      src_range.m_finish = get_loc (line, 98);\n-      location_t combined_loc = COMBINE_LOCATION_DATA (line_table,\n-\t\t\t\t\t\t       caret,\n-\t\t\t\t\t\t       src_range,\n-\t\t\t\t\t\t       NULL);\n-      warning_at (combined_loc, 0, \"test\");\n+      warning_at (make_location (get_loc (line, 94), get_loc (line, 90),\n+\t\t\t\t get_loc (line, 98)),\n+\t\t  0, \"test\");\n     }\n \n   /* Example of multiple carets.  */\n@@ -254,7 +246,7 @@ test_show_locus (function *fun)\n       location_t caret_a = get_loc (line, 7);\n       location_t caret_b = get_loc (line, 11);\n       rich_location richloc (line_table, caret_a);\n-      richloc.add_range (caret_b, caret_b, true);\n+      add_range (&richloc, caret_b, caret_b, true);\n       global_dc->caret_chars[0] = 'A';\n       global_dc->caret_chars[1] = 'B';\n       warning_at_rich_loc (&richloc, 0, \"test\");\n@@ -266,33 +258,36 @@ test_show_locus (function *fun)\n   if (0 == strcmp (fnname, \"test_fixit_insert\"))\n     {\n       const int line = fnstart_line + 2;\n-      source_range src_range;\n-      src_range.m_start = get_loc (line, 19);\n-      src_range.m_finish = get_loc (line, 22);\n-      rich_location richloc (src_range);\n-      richloc.add_fixit_insert (src_range.m_start, \"{\");\n+      location_t start = get_loc (line, 19);\n+      location_t finish = get_loc (line, 22);\n+      rich_location richloc (line_table, make_location (start, start, finish));\n+      richloc.add_fixit_insert (start, \"{\");\n       richloc.add_fixit_insert (get_loc (line, 23), \"}\");\n       warning_at_rich_loc (&richloc, 0, \"example of insertion hints\");\n     }\n \n   if (0 == strcmp (fnname, \"test_fixit_remove\"))\n     {\n       const int line = fnstart_line + 2;\n+      location_t start = get_loc (line, 8);\n+      location_t finish = get_loc (line, 8);\n+      rich_location richloc (line_table, make_location (start, start, finish));\n       source_range src_range;\n-      src_range.m_start = get_loc (line, 8);\n-      src_range.m_finish = get_loc (line, 8);\n-      rich_location richloc (src_range);\n+      src_range.m_start = start;\n+      src_range.m_finish = finish;\n       richloc.add_fixit_remove (src_range);\n       warning_at_rich_loc (&richloc, 0, \"example of a removal hint\");\n     }\n \n   if (0 == strcmp (fnname, \"test_fixit_replace\"))\n     {\n       const int line = fnstart_line + 2;\n+      location_t start = get_loc (line, 2);\n+      location_t finish = get_loc (line, 19);\n+      rich_location richloc (line_table, make_location (start, start, finish));\n       source_range src_range;\n-      src_range.m_start = get_loc (line, 2);\n-      src_range.m_finish = get_loc (line, 19);\n-      rich_location richloc (src_range);\n+      src_range.m_start = start;\n+      src_range.m_finish = finish;\n       richloc.add_fixit_replace (src_range, \"gtk_widget_show_all\");\n       warning_at_rich_loc (&richloc, 0, \"example of a replacement hint\");\n     }\n@@ -310,7 +305,7 @@ test_show_locus (function *fun)\n       location_t caret_a = get_loc (line, 5);\n       location_t caret_b = get_loc (line - 1, 19);\n       rich_location richloc (line_table, caret_a);\n-      richloc.add_range (caret_b, caret_b, true);\n+      richloc.add_range (caret_b, true);\n       global_dc->caret_chars[0] = '1';\n       global_dc->caret_chars[1] = '2';\n       warning_at_rich_loc (&richloc, 0, \"test\");"}, {"sha": "d583e98a9033dda59eb3e04a87ac4639e28531ec", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40499f81a6a65d903a8b6469797c58c52eaf8008/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40499f81a6a65d903a8b6469797c58c52eaf8008/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=40499f81a6a65d903a8b6469797c58c52eaf8008", "patch": "@@ -1,3 +1,37 @@\n+2016-03-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/68473\n+\tPR c++/70105\n+\t* include/line-map.h (source_range::debug): Delete.\n+\t(struct location_range): Update comment.  Replace\n+\texpanded_location fields \"m_start\", \"m_finish\", and \"m_caret\" with\n+\ta source_location field: \"m_loc\".\n+\t(class rich_location): Reword comment.\n+\t(rich_location::get_loc): Reimplement in terms of a new overloaded\n+\tvariant which takes an unsigned int.\n+\t(rich_location::get_loc_addr): Delete.\n+\t(rich_location::add_range): Drop params \"start\" and \"finish\" in\n+\tfavor of param \"loc\".  Drop overloaded variants taking a\n+\tsource_range or location_range *.\n+\t(rich_location::lazily_expand_location): Delete in favor of...\n+\t(rich_location::get_expanded_location): New decl.\n+\t(rich_location::m_loc): Delete field.\n+\t(rich_location::m_column_override): New field.\n+\t* line-map.c (rich_location::rich_location):  Drop name of\n+\tline_maps * param.  Update initializations for deletion of field\n+\t\"m_loc\" and addition of field \"m_column_override\".  Reimplement\n+\tbody as a call to add_range.  Delete overloaded variant taking a\n+\tsource_range.\n+\t(rich_location::get_loc): New function.\n+\t(rich_location::lazily_expand_location): Delete in favor of...\n+\t(rich_location::get_expanded_location): New function.\n+\t(rich_location::override_column): Reimplement.\n+\t(rich_location::add_range): Drop params \"start\" and \"finish\" in\n+\tfavor of param \"loc\".  Eliminate location expansion in favor of\n+\tsimply storing loc.  Drop overloaded variants taking a\n+\tsource_range or location_range *.\n+\t(rich_location::set_range): Eliminate location expansion.\n+\n 2016-02-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR preprocessor/69985"}, {"sha": "13cc6f81a9f57ea845e7359c36a0d20765fa6452", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40499f81a6a65d903a8b6469797c58c52eaf8008/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40499f81a6a65d903a8b6469797c58c52eaf8008/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=40499f81a6a65d903a8b6469797c58c52eaf8008", "patch": "@@ -273,20 +273,6 @@ struct GTY(()) source_range\n   source_location m_start;\n   source_location m_finish;\n \n-  /* Display this source_range instance, with MSG as a descriptive\n-     comment.  This issues a \"note\" diagnostic at the range, using\n-     gcc's diagnostic machinery.\n-\n-     This is declared here, but is implemented within gcc/diagnostic.c,\n-     since it makes use of gcc's diagnostic-printing machinery.  This\n-     is a slight layering violation, but this is sufficiently useful\n-     for debugging that it's worth it.\n-\n-     This declaration would have a DEBUG_FUNCTION annotation, but that\n-     is implemented in gcc/system.h and thus is not available here in\n-     libcpp.  */\n-  void debug (const char *msg) const;\n-\n   /* We avoid using constructors, since various structs that\n      don't yet have constructors will embed instances of\n      source_range.  */\n@@ -1249,13 +1235,12 @@ typedef struct\n \n    i.e. \"3:1:\" in GCC corresponds to \"(3, 0)\" in Emacs.  */\n \n-/* Ranges are closed\n-   m_start is the first location within the range, and\n-   m_finish is the last location within the range.  */\n+/* A location within a rich_location: a caret&range, with\n+   the caret potentially flagged for display.  */\n+\n struct location_range\n {\n-  expanded_location m_start;\n-  expanded_location m_finish;\n+  source_location m_loc;\n \n   /* Should a caret be drawn for this range?  Typically this is\n      true for the 0th range, and false for subsequent ranges,\n@@ -1267,7 +1252,6 @@ struct location_range\n \n      where \"1\" and \"2\" are notionally carets.  */\n   bool m_show_caret_p;\n-  expanded_location m_caret;\n };\n \n class fixit_hint;\n@@ -1276,9 +1260,10 @@ class fixit_hint;\n   class fixit_replace;\n \n /* A \"rich\" source code location, for use when printing diagnostics.\n-   A rich_location has one or more ranges, each optionally with\n-   a caret.   Typically the zeroth range has a caret; other ranges\n-   sometimes have carets.\n+   A rich_location has one or more carets&ranges, where the carets\n+   are optional.  These are referred to as \"ranges\" from here.\n+   Typically the zeroth range has a caret; other ranges sometimes\n+   have carets.\n \n    The \"primary\" location of a rich_location is the caret of range 0,\n    used for determining the line/column when printing diagnostic\n@@ -1361,19 +1346,11 @@ class rich_location\n   ~rich_location ();\n \n   /* Accessors.  */\n-  source_location get_loc () const { return m_loc; }\n-\n-  source_location *get_loc_addr () { return &m_loc; }\n-\n-  void\n-  add_range (source_location start, source_location finish,\n-\t     bool show_caret_p);\n-\n-  void\n-  add_range (source_range src_range, bool show_caret_p);\n+  source_location get_loc () const { return get_loc (0); }\n+  source_location get_loc (unsigned int idx) const;\n \n   void\n-  add_range (location_range *src_range);\n+  add_range (source_location loc,  bool show_caret_p);\n \n   void\n   set_range (line_maps *set, unsigned int idx, source_location loc,\n@@ -1387,7 +1364,7 @@ class rich_location\n     return &m_ranges[idx];\n   }\n \n-  expanded_location lazily_expand_location ();\n+  expanded_location get_expanded_location (unsigned int idx);\n \n   void\n   override_column (int column);\n@@ -1412,11 +1389,11 @@ class rich_location\n   static const int MAX_FIXIT_HINTS = 2;\n \n protected:\n-  source_location m_loc;\n-\n   unsigned int m_num_ranges;\n   location_range m_ranges[MAX_RANGES];\n \n+  int m_column_override;\n+\n   bool m_have_expanded_location;\n   expanded_location m_expanded_location;\n "}, {"sha": "de6eafcbe9b43886dce9bd85fbdaca7be4b73a5c", "filename": "libcpp/line-map.c", "status": "modified", "additions": 40, "deletions": 78, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40499f81a6a65d903a8b6469797c58c52eaf8008/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40499f81a6a65d903a8b6469797c58c52eaf8008/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=40499f81a6a65d903a8b6469797c58c52eaf8008", "patch": "@@ -1993,29 +1993,13 @@ source_range::intersects_line_p (const char *file, int line) const\n \n /* Construct a rich_location with location LOC as its initial range.  */\n \n-rich_location::rich_location (line_maps *set, source_location loc) :\n-  m_loc (loc),\n+rich_location::rich_location (line_maps */*set*/, source_location loc) :\n   m_num_ranges (0),\n+  m_column_override (0),\n   m_have_expanded_location (false),\n   m_num_fixit_hints (0)\n {\n-  /* Set up the 0th range, extracting any range from LOC.  */\n-  source_range src_range = get_range_from_loc (set, loc);\n-  add_range (src_range, true);\n-  m_ranges[0].m_caret = lazily_expand_location ();\n-}\n-\n-/* Construct a rich_location with source_range SRC_RANGE as its\n-   initial range.  */\n-\n-rich_location::rich_location (source_range src_range)\n-: m_loc (src_range.m_start),\n-  m_num_ranges (0),\n-  m_have_expanded_location (false),\n-  m_num_fixit_hints (0)\n-{\n-  /* Set up the 0th range: */\n-  add_range (src_range, true);\n+  add_range (loc, true);\n }\n \n /* The destructor for class rich_location.  */\n@@ -2026,73 +2010,62 @@ rich_location::~rich_location ()\n     delete m_fixit_hints[i];\n }\n \n+/* Get location IDX within this rich_location.  */\n+\n+source_location\n+rich_location::get_loc (unsigned int idx) const\n+{\n+  linemap_assert (idx < m_num_ranges);\n+  return m_ranges[idx].m_loc;\n+}\n+\n+/* Expand location IDX within this rich_location.  */\n /* Get an expanded_location for this rich_location's primary\n    location.  */\n \n expanded_location\n-rich_location::lazily_expand_location ()\n+rich_location::get_expanded_location (unsigned int idx)\n {\n-  if (!m_have_expanded_location)\n-    {\n-      m_expanded_location\n-\t= linemap_client_expand_location_to_spelling_point (m_loc);\n-      m_have_expanded_location = true;\n-    }\n-\n-  return m_expanded_location;\n+  if (idx == 0)\n+   {\n+     /* Cache the expansion of the primary location.  */\n+     if (!m_have_expanded_location)\n+       {\n+\t  m_expanded_location\n+\t    = linemap_client_expand_location_to_spelling_point (get_loc (0));\n+\t  if (m_column_override)\n+\t    m_expanded_location.column = m_column_override;\n+\t  m_have_expanded_location = true;\n+       }\n+\n+     return m_expanded_location;\n+   }\n+  else\n+    return linemap_client_expand_location_to_spelling_point (get_loc (idx));\n }\n \n-/* Set the column of the primary location.  This can only be called for\n-   rich_location instances for which the primary location has\n-   caret==start==finish.  */\n+/* Set the column of the primary location, with 0 meaning\n+   \"don't override it\".  */\n \n void\n rich_location::override_column (int column)\n {\n-  lazily_expand_location ();\n-  gcc_assert (m_ranges[0].m_show_caret_p);\n-  gcc_assert (m_ranges[0].m_caret.column == m_expanded_location.column);\n-  gcc_assert (m_ranges[0].m_start.column == m_expanded_location.column);\n-  gcc_assert (m_ranges[0].m_finish.column == m_expanded_location.column);\n-  m_expanded_location.column = column;\n-  m_ranges[0].m_caret.column = column;\n-  m_ranges[0].m_start.column = column;\n-  m_ranges[0].m_finish.column = column;\n+  m_column_override = column;\n+  m_have_expanded_location = false;\n }\n \n /* Add the given range.  */\n \n void\n-rich_location::add_range (source_location start, source_location finish,\n-\t\t\t  bool show_caret_p)\n+rich_location::add_range (source_location loc, bool show_caret_p)\n {\n   linemap_assert (m_num_ranges < MAX_RANGES);\n \n   location_range *range = &m_ranges[m_num_ranges++];\n-  range->m_start = linemap_client_expand_location_to_spelling_point (start);\n-  range->m_finish = linemap_client_expand_location_to_spelling_point (finish);\n-  range->m_caret = range->m_start;\n+  range->m_loc = loc;\n   range->m_show_caret_p = show_caret_p;\n }\n \n-/* Add the given range.  */\n-\n-void\n-rich_location::add_range (source_range src_range, bool show_caret_p)\n-{\n-  linemap_assert (m_num_ranges < MAX_RANGES);\n-\n-  add_range (src_range.m_start, src_range.m_finish, show_caret_p);\n-}\n-\n-void\n-rich_location::add_range (location_range *src_range)\n-{\n-  linemap_assert (m_num_ranges < MAX_RANGES);\n-\n-  m_ranges[m_num_ranges++] = *src_range;\n-}\n-\n /* Add or overwrite the location given by IDX, setting its location to LOC,\n    and setting its \"should my caret be printed\" flag to SHOW_CARET_P.\n \n@@ -2107,7 +2080,7 @@ rich_location::add_range (location_range *src_range)\n    - the \"%C\" and \"%L\" format codes in the Fortran frontend.  */\n \n void\n-rich_location::set_range (line_maps *set, unsigned int idx,\n+rich_location::set_range (line_maps * /*set*/, unsigned int idx,\n \t\t\t  source_location loc, bool show_caret_p)\n {\n   linemap_assert (idx < MAX_RANGES);\n@@ -2116,28 +2089,17 @@ rich_location::set_range (line_maps *set, unsigned int idx,\n      on the end of the array.  */\n   linemap_assert (idx <= m_num_ranges);\n \n-  source_range src_range = get_range_from_loc (set, loc);\n-\n   location_range *locrange = &m_ranges[idx];\n-  locrange->m_start\n-    = linemap_client_expand_location_to_spelling_point (src_range.m_start);\n-  locrange->m_finish\n-    = linemap_client_expand_location_to_spelling_point (src_range.m_finish);\n-\n+  locrange->m_loc = loc;\n   locrange->m_show_caret_p = show_caret_p;\n-  locrange->m_caret\n-    = linemap_client_expand_location_to_spelling_point (loc);\n \n   /* Are we adding a range onto the end?  */\n   if (idx == m_num_ranges)\n     m_num_ranges = idx + 1;\n \n   if (idx == 0)\n-    {\n-      m_loc = loc;\n-      /* Mark any cached value here as dirty.  */\n-      m_have_expanded_location = false;\n-    }\n+    /* Mark any cached value here as dirty.  */\n+    m_have_expanded_location = false;\n }\n \n /* Add a fixit-hint, suggesting insertion of NEW_CONTENT"}]}