{"sha": "252dde64c31fa99a74b09058caad0292f9a5ea8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUyZGRlNjRjMzFmYTk5YTc0YjA5MDU4Y2FhZDAyOTJmOWE1ZWE4Zg==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-04-09T12:40:59Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-04-09T12:40:59Z"}, "message": "configure.in: Switch to modern style for AC_INIT, AC_OUTPUT.\n\n\t* configure.in: Switch to modern style for AC_INIT, AC_OUTPUT.\n\tSort file into sections.  Remove dnl where appropriate.  Fix\n\tother style issues.\n\t* configure: Regenerate.\n\nFrom-SVN: r80551", "tree": {"sha": "5045153399338d3bc46805090f552370ea3a3a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5045153399338d3bc46805090f552370ea3a3a31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/252dde64c31fa99a74b09058caad0292f9a5ea8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252dde64c31fa99a74b09058caad0292f9a5ea8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/252dde64c31fa99a74b09058caad0292f9a5ea8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252dde64c31fa99a74b09058caad0292f9a5ea8f/comments", "author": null, "committer": null, "parents": [{"sha": "5a0599745173d0aef23f4a3b7df54fd0bd96fd7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0599745173d0aef23f4a3b7df54fd0bd96fd7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0599745173d0aef23f4a3b7df54fd0bd96fd7d"}], "stats": {"total": 346, "additions": 203, "deletions": 143}, "files": [{"sha": "18e634c34bde3748491b9214748cbab108d8e1c2", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252dde64c31fa99a74b09058caad0292f9a5ea8f/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252dde64c31fa99a74b09058caad0292f9a5ea8f/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=252dde64c31fa99a74b09058caad0292f9a5ea8f", "patch": "@@ -1,5 +1,10 @@\n 2004-04-09  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n+\t* configure.in: Switch to modern style for AC_INIT, AC_OUTPUT.\n+\tSort file into sections.  Remove dnl where appropriate.  Fix\n+\tother style issues.\n+\t* configure: Regenerate.\n+\n \t* configure.in: Replace old AC_PROG_CC hack with new one.\n \tDefine toplevel_srcdir in terms of srcdir, not top_srcdir (there\n \tare no subdirectory output files, so this is fine).  Change prereq"}, {"sha": "14ced42343bf29b20a151e6d121920fb04f3e804", "filename": "libobjc/configure", "status": "modified", "additions": 122, "deletions": 92, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252dde64c31fa99a74b09058caad0292f9a5ea8f/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252dde64c31fa99a74b09058caad0292f9a5ea8f/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=252dde64c31fa99a74b09058caad0292f9a5ea8f", "patch": "@@ -309,7 +309,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS VERSION toplevel_srcdir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical glibcpp_builddir glibcpp_srcdir CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA gcc_version gcc_version_trigger glibcpp_toolexecdir glibcpp_toolexeclibdir glibcpp_prefixdir LN_S STRIP ac_ct_STRIP LIBTOOL SET_MAKE CPP EGREP GTHREAD_FLAGS OBJC_BOEHM_GC LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS VERSION OBJC_BOEHM_GC toplevel_srcdir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical glibcpp_builddir glibcpp_srcdir gcc_version gcc_version_trigger glibcpp_toolexecdir glibcpp_toolexeclibdir glibcpp_prefixdir CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA LN_S STRIP ac_ct_STRIP LIBTOOL SET_MAKE CPP EGREP GTHREAD_FLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -847,12 +847,12 @@ Optional Features:\n   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n   --enable-multilib       build hella library versions (default)\n   --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory\n+  --enable-objc-gc       enable the use of Boehm's garbage collector with\n+                          the GNU Objective-C runtime.\n   --enable-shared=PKGS  build shared libraries default=no\n   --enable-static=PKGS  build static libraries default=yes\n   --enable-fast-install=PKGS  optimize for fast installation default=yes\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n-  --enable-objc-gc       enable the use of Boehm's garbage collector with\n-                          the GNU Objective-C runtime.\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -1310,10 +1310,13 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+\n           ac_config_headers=\"$ac_config_headers config.h\"\n \n \n+# We need the following definitions because AC_PROG_LIBTOOL relies on them\n PACKAGE=libobjc\n+# Version is pulled out to make it a bit easier to change using sed.\n VERSION=1:0:0\n \n \n@@ -1323,6 +1326,11 @@ VERSION=1:0:0\n # exported.\n ORIGINAL_LD_FOR_MULTILIBS=$LD\n \n+# -------\n+# Options\n+# -------\n+\n+# Default to --enable-multilib\n # Check whether --enable-multilib or --disable-multilib was given.\n if test \"${enable_multilib+set}\" = set; then\n   enableval=\"$enable_multilib\"\n@@ -1336,6 +1344,55 @@ echo \"$as_me: error: bad value ${enableval} for multilib option\" >&2;}\n else\n   multilib=yes\n fi;\n+\n+# We use these options to decide which functions to include.\n+\n+# Check whether --with-target-subdir or --without-target-subdir was given.\n+if test \"${with_target_subdir+set}\" = set; then\n+  withval=\"$with_target_subdir\"\n+\n+fi;\n+\n+# Check whether --with-cross-host or --without-cross-host was given.\n+if test \"${with_cross_host+set}\" = set; then\n+  withval=\"$with_cross_host\"\n+\n+fi;\n+\n+echo \"$as_me:$LINENO: checking for --enable-version-specific-runtime-libs\" >&5\n+echo $ECHO_N \"checking for --enable-version-specific-runtime-libs... $ECHO_C\" >&6\n+# Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n+if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n+  enableval=\"$enable_version_specific_runtime_libs\"\n+  case \"$enableval\" in\n+ yes) version_specific_libs=yes ;;\n+ no)  version_specific_libs=no ;;\n+ *)   { { echo \"$as_me:$LINENO: error: Unknown argument to enable/disable version-specific libs\" >&5\n+echo \"$as_me: error: Unknown argument to enable/disable version-specific libs\" >&2;}\n+   { (exit 1); exit 1; }; };;\n+ esac\n+else\n+  version_specific_libs=no\n+fi;\n+echo \"$as_me:$LINENO: result: $version_specific_libs\" >&5\n+echo \"${ECHO_T}$version_specific_libs\" >&6\n+\n+# Check whether --enable-objc-gc or --disable-objc-gc was given.\n+if test \"${enable_objc_gc+set}\" = set; then\n+  enableval=\"$enable_objc_gc\"\n+  case $enable_objc_gc in\n+  no) OBJC_BOEHM_GC='' ;;\n+  *) OBJC_BOEHM_GC=libobjc_gc.la ;;\n+esac\n+else\n+  OBJC_BOEHM_GC=''\n+fi;\n+\n+\n+# -----------\n+# Directories\n+# -----------\n+\n # When building with srcdir == objdir, links to the source files will\n # be created in directories within the target_subdir.  We have to\n # adjust toplevel_srcdir accordingly, so that configure finds\n@@ -1487,25 +1544,54 @@ esac\n # drives. Thus the use of PWDCMD: set it to 'pawd' or 'amq -w' if using amd.\n glibcpp_builddir=`${PWDCMD-pwd}`\n case $srcdir in\n-\\\\/$* | ?:\\\\/*) glibcpp_srcdir=${srcdir} ;;\n-*) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n+  \\\\/$* | ?:\\\\/*) glibcpp_srcdir=${srcdir} ;;\n+  *) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n esac\n \n \n \n-# We use these options to decide which functions to include.\n+# Process the option \"--enable-version-specific-runtime-libs\"\n+gcc_version_trigger=${srcdir}/../gcc/version.c\n+gcc_version_full=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\\\"\\([^ \\\"]*\\)[ \\\"].*/\\1/'`\n+gcc_version=`echo ${gcc_version_full} | sed -e 's/\\(^ *\\) .*/\\1/'`\n \n-# Check whether --with-target-subdir or --without-target-subdir was given.\n-if test \"${with_target_subdir+set}\" = set; then\n-  withval=\"$with_target_subdir\"\n \n-fi;\n \n-# Check whether --with-cross-host or --without-cross-host was given.\n-if test \"${with_cross_host+set}\" = set; then\n-  withval=\"$with_cross_host\"\n+# Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir\n+case ${version_specific_libs} in\n+  yes)\n+    # Need the gcc compiler version to know where to install libraries\n+    # and header files if --enable-version-specific-runtime-libs option\n+    # is selected.\n+    glibcpp_toolexecdir='$(libdir)/gcc/$(target_noncanonical)'\n+    glibcpp_toolexeclibdir='$(toolexecdir)/'${gcc_version}'$(MULTISUBDIR)'\n+    ;;\n+  no)\n+    if test -n \"$with_cross_host\" &&\n+       test x\"$with_cross_host\" != x\"no\"; then\n+      glibcpp_toolexecdir='$(exec_prefix)/$(target_noncanonical)'\n+      glibcpp_toolexeclibdir='$(toolexecdir)/lib'\n+    else\n+      # Install a library built with a cross compiler in tooldir, not libdir.\n+      glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_noncanonical)'\n+      glibcpp_toolexeclibdir='$(libdir)'\n+    fi\n+    multi_os_directory=`$CC -print-multi-os-directory`\n+    case $multi_os_directory in\n+      .) ;; # Avoid trailing /.\n+      *) glibcpp_toolexeclibdir=$glibcpp_toolexeclibdir/$multi_os_directory ;;\n+    esac\n+    ;;\n+esac\n \n-fi;\n+\n+\n+glibcpp_prefixdir=${prefix}\n+\n+\n+# --------\n+# Programs\n+# --------\n \n \n ac_ext=c\n@@ -2785,65 +2871,6 @@ test -z \"$INSTALL_SCRIPT\" && INSTALL_SCRIPT='${INSTALL}'\n test -z \"$INSTALL_DATA\" && INSTALL_DATA='${INSTALL} -m 644'\n \n \n-# Process the option \"--enable-version-specific-runtime-libs\"\n-echo \"$as_me:$LINENO: checking for --enable-version-specific-runtime-libs\" >&5\n-echo $ECHO_N \"checking for --enable-version-specific-runtime-libs... $ECHO_C\" >&6\n-# Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n-if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n-  enableval=\"$enable_version_specific_runtime_libs\"\n-  case \"$enableval\" in\n- yes) version_specific_libs=yes ;;\n- no)  version_specific_libs=no ;;\n- *)   { { echo \"$as_me:$LINENO: error: Unknown argument to enable/disable version-specific libs\" >&5\n-echo \"$as_me: error: Unknown argument to enable/disable version-specific libs\" >&2;}\n-   { (exit 1); exit 1; }; };;\n- esac\n-else\n-  version_specific_libs=no\n-fi;\n-# Option set, now we can test it.\n-echo \"$as_me:$LINENO: result: $version_specific_libs\" >&5\n-echo \"${ECHO_T}$version_specific_libs\" >&6\n-\n-gcc_version_trigger=${srcdir}/../gcc/version.c\n-gcc_version_full=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\\\"\\([^ \\\"]*\\)[ \\\"].*/\\1/'`\n-gcc_version=`echo ${gcc_version_full} | sed -e 's/\\(^ *\\) .*/\\1/'`\n-\n-\n-\n-# Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir\n-case ${version_specific_libs} in\n-  yes)\n-    # Need the gcc compiler version to know where to install libraries\n-    # and header files if --enable-version-specific-runtime-libs option\n-    # is selected.\n-    glibcpp_toolexecdir='$(libdir)/gcc/$(target_noncanonical)'\n-    glibcpp_toolexeclibdir='$(toolexecdir)/'${gcc_version}'$(MULTISUBDIR)'\n-    ;;\n-  no)\n-    if test -n \"$with_cross_host\" &&\n-       test x\"$with_cross_host\" != x\"no\"; then\n-      glibcpp_toolexecdir='$(exec_prefix)/$(target_noncanonical)'\n-      glibcpp_toolexeclibdir='$(toolexecdir)/lib'\n-    else\n-      # Install a library built with a cross compiler in tooldir, not libdir.\n-      glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_noncanonical)'\n-      glibcpp_toolexeclibdir='$(libdir)'\n-    fi\n-    multi_os_directory=`$CC -print-multi-os-directory`\n-    case $multi_os_directory in\n-      .) ;; # Avoid trailing /.\n-      *) glibcpp_toolexeclibdir=$glibcpp_toolexeclibdir/$multi_os_directory ;;\n-    esac\n-    ;;\n-esac\n-\n-\n-\n-glibcpp_prefixdir=${prefix}\n-\n-\n-\n # Disable shared libs by default\n # Check whether --enable-shared or --disable-shared was given.\n if test \"${enable_shared+set}\" = set; then\n@@ -3590,7 +3617,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 3593 \"configure\"' > conftest.$ac_ext\n+  echo '#line 3620 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -3911,6 +3938,10 @@ echo \"${ECHO_T}no\" >&6\n fi\n \n \n+# -------\n+# Headers\n+# -------\n+\n # Sanity check for the cross-compilation case:\n ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n@@ -4868,6 +4899,10 @@ fi\n done\n \n \n+# -----------\n+# Miscellanea\n+# -----------\n+\n # Determine CFLAGS for gthread.\n # FIXME: the current implementation is dependent on the 'r' variable\n # passed down from the top level\n@@ -4890,21 +4925,16 @@ echo \"${ECHO_T}$objc_cv_gthread_flags\" >&6\n GTHREAD_FLAGS=$objc_cv_gthread_flags\n \n \n-# Check whether --enable-objc-gc or --disable-objc-gc was given.\n-if test \"${enable_objc_gc+set}\" = set; then\n-  enableval=\"$enable_objc_gc\"\n-  case $enable_objc_gc in\n-  no) OBJC_BOEHM_GC='' ;;\n-  *) OBJC_BOEHM_GC=libobjc_gc.la ;;\n-esac\n-else\n-  OBJC_BOEHM_GC=''\n-fi;\n-\n+# ------\n+# Output\n+# ------\n \n-# We need multilib support, but only if configuring for the target.\n           ac_config_files=\"$ac_config_files Makefile\"\n+\n+\n           ac_config_commands=\"$ac_config_commands default\"\n+\n+\n cat >confcache <<\\_ACEOF\n # This file is a shell script that caches the results of configure\n # tests run on this system so they can be shared between configure\n@@ -5538,6 +5568,7 @@ s,@ECHO_N@,$ECHO_N,;t t\n s,@ECHO_T@,$ECHO_T,;t t\n s,@LIBS@,$LIBS,;t t\n s,@VERSION@,$VERSION,;t t\n+s,@OBJC_BOEHM_GC@,$OBJC_BOEHM_GC,;t t\n s,@toplevel_srcdir@,$toplevel_srcdir,;t t\n s,@build@,$build,;t t\n s,@build_cpu@,$build_cpu,;t t\n@@ -5554,6 +5585,11 @@ s,@target_os@,$target_os,;t t\n s,@target_noncanonical@,$target_noncanonical,;t t\n s,@glibcpp_builddir@,$glibcpp_builddir,;t t\n s,@glibcpp_srcdir@,$glibcpp_srcdir,;t t\n+s,@gcc_version@,$gcc_version,;t t\n+s,@gcc_version_trigger@,$gcc_version_trigger,;t t\n+s,@glibcpp_toolexecdir@,$glibcpp_toolexecdir,;t t\n+s,@glibcpp_toolexeclibdir@,$glibcpp_toolexeclibdir,;t t\n+s,@glibcpp_prefixdir@,$glibcpp_prefixdir,;t t\n s,@CC@,$CC,;t t\n s,@CFLAGS@,$CFLAGS,;t t\n s,@LDFLAGS@,$LDFLAGS,;t t\n@@ -5570,11 +5606,6 @@ s,@ac_ct_RANLIB@,$ac_ct_RANLIB,;t t\n s,@INSTALL_PROGRAM@,$INSTALL_PROGRAM,;t t\n s,@INSTALL_SCRIPT@,$INSTALL_SCRIPT,;t t\n s,@INSTALL_DATA@,$INSTALL_DATA,;t t\n-s,@gcc_version@,$gcc_version,;t t\n-s,@gcc_version_trigger@,$gcc_version_trigger,;t t\n-s,@glibcpp_toolexecdir@,$glibcpp_toolexecdir,;t t\n-s,@glibcpp_toolexeclibdir@,$glibcpp_toolexeclibdir,;t t\n-s,@glibcpp_prefixdir@,$glibcpp_prefixdir,;t t\n s,@LN_S@,$LN_S,;t t\n s,@STRIP@,$STRIP,;t t\n s,@ac_ct_STRIP@,$ac_ct_STRIP,;t t\n@@ -5583,7 +5614,6 @@ s,@SET_MAKE@,$SET_MAKE,;t t\n s,@CPP@,$CPP,;t t\n s,@EGREP@,$EGREP,;t t\n s,@GTHREAD_FLAGS@,$GTHREAD_FLAGS,;t t\n-s,@OBJC_BOEHM_GC@,$OBJC_BOEHM_GC,;t t\n s,@LIBOBJS@,$LIBOBJS,;t t\n s,@LTLIBOBJS@,$LTLIBOBJS,;t t\n CEOF"}, {"sha": "a8613d8b4f025a856cca965a032cca5816295d81", "filename": "libobjc/configure.in", "status": "modified", "additions": 76, "deletions": 51, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252dde64c31fa99a74b09058caad0292f9a5ea8f/libobjc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252dde64c31fa99a74b09058caad0292f9a5ea8f/libobjc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure.in?ref=252dde64c31fa99a74b09058caad0292f9a5ea8f", "patch": "@@ -21,12 +21,13 @@\n #02111-1307, USA.\n \n AC_PREREQ(2.59)\n-AC_INIT(objc/objc.h)\n+AC_INIT\n+AC_CONFIG_SRCDIR([objc/objc.h])\n AC_CONFIG_HEADER(config.h)\n \n-dnl We need the following definitions because AC_PROG_LIBTOOL relies on them\n+# We need the following definitions because AC_PROG_LIBTOOL relies on them\n PACKAGE=libobjc\n-dnl Version is pulled out to make it a bit easier to change using sed.\n+# Version is pulled out to make it a bit easier to change using sed.\n VERSION=1:0:0\n AC_SUBST(VERSION)\n \n@@ -36,14 +37,51 @@ AC_SUBST(VERSION)\n # exported.\n ORIGINAL_LD_FOR_MULTILIBS=$LD\n \n-dnl Default to --enable-multilib\n+# -------\n+# Options\n+# -------\n+\n+# Default to --enable-multilib\n AC_ARG_ENABLE(multilib,\n   [  --enable-multilib       build hella library versions (default)],\n   [case \"${enableval}\" in\n     yes) multilib=yes ;;\n     no)  multilib=no ;;\n     *)   AC_MSG_ERROR(bad value ${enableval} for multilib option) ;;\n-   esac], [multilib=yes])dnl\n+   esac],\n+  [multilib=yes])\n+\n+# We use these options to decide which functions to include.\n+AC_ARG_WITH(target-subdir,\n+[  --with-target-subdir=SUBDIR\n+                           configuring in a subdirectory])\n+AC_ARG_WITH(cross-host,\n+[  --with-cross-host=HOST  configuring with a cross compiler])\n+\n+AC_MSG_CHECKING([for --enable-version-specific-runtime-libs])\n+AC_ARG_ENABLE(version-specific-runtime-libs,\n+[  --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory ],\n+[case \"$enableval\" in\n+ yes) version_specific_libs=yes ;;\n+ no)  version_specific_libs=no ;;\n+ *)   AC_MSG_ERROR([Unknown argument to enable/disable version-specific libs]);;\n+ esac],\n+[version_specific_libs=no])\n+AC_MSG_RESULT($version_specific_libs)\n+\n+AC_ARG_ENABLE(objc-gc,\n+[  --enable-objc-gc       enable the use of Boehm's garbage collector with\n+                          the GNU Objective-C runtime.],\n+[case $enable_objc_gc in\n+  no) OBJC_BOEHM_GC='' ;;\n+  *) OBJC_BOEHM_GC=libobjc_gc.la ;;\n+esac],\n+[OBJC_BOEHM_GC=''])\n+AC_SUBST(OBJC_BOEHM_GC)\n+\n+# -----------\n+# Directories\n+# -----------\n \n # When building with srcdir == objdir, links to the source files will\n # be created in directories within the target_subdir.  We have to\n@@ -77,40 +115,13 @@ AC_SUBST(target_noncanonical)\n # drives. Thus the use of PWDCMD: set it to 'pawd' or 'amq -w' if using amd.\n glibcpp_builddir=`${PWDCMD-pwd}`\n case $srcdir in\n-[\\\\/$]* | ?:[\\\\/]*) glibcpp_srcdir=${srcdir} ;;\n-*) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n+  [\\\\/$]* | ?:[\\\\/]*) glibcpp_srcdir=${srcdir} ;;\n+  *) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n esac\n AC_SUBST(glibcpp_builddir)\n AC_SUBST(glibcpp_srcdir)\n \n-# We use these options to decide which functions to include.\n-AC_ARG_WITH(target-subdir,\n-[  --with-target-subdir=SUBDIR\n-                           configuring in a subdirectory])\n-AC_ARG_WITH(cross-host,\n-[  --with-cross-host=HOST  configuring with a cross compiler])\n-\n-GCC_NO_EXECUTABLES\n-AC_PROG_CC\n-\n-AC_CHECK_TOOL(AS, as)\n-AC_CHECK_TOOL(AR, ar)\n-AC_CHECK_TOOL(RANLIB, ranlib, :)\n-AC_PROG_INSTALL\n-\n # Process the option \"--enable-version-specific-runtime-libs\"\n-AC_MSG_CHECKING([for --enable-version-specific-runtime-libs])\n-AC_ARG_ENABLE(version-specific-runtime-libs,\n-[  --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory ],\n-[case \"$enableval\" in\n- yes) version_specific_libs=yes ;;\n- no)  version_specific_libs=no ;;\n- *)   AC_MSG_ERROR([Unknown argument to enable/disable version-specific libs]);;\n- esac],\n-[version_specific_libs=no])\n-# Option set, now we can test it.\n-AC_MSG_RESULT($version_specific_libs)\n-\n gcc_version_trigger=${srcdir}/../gcc/version.c\n gcc_version_full=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\\\"\\([[^ \\\"]]*\\)[[ \\\"]].*/\\1/'`\n gcc_version=`echo ${gcc_version_full} | sed -e 's/\\([^ ]*\\) .*/\\1/'`\n@@ -149,7 +160,17 @@ AC_SUBST(glibcpp_toolexeclibdir)\n glibcpp_prefixdir=${prefix}\n AC_SUBST(glibcpp_prefixdir)\n \n-dnl Checks for programs.\n+# --------\n+# Programs\n+# --------\n+\n+GCC_NO_EXECUTABLES\n+AC_PROG_CC\n+\n+AC_CHECK_TOOL(AS, as)\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib, :)\n+AC_PROG_INSTALL\n \n # Disable shared libs by default\n AC_DISABLE_SHARED\n@@ -160,7 +181,10 @@ AC_PROG_LIBTOOL\n \n AC_PROG_MAKE_SET\n \n-dnl Checks for header files.\n+# -------\n+# Headers\n+# -------\n+\n # Sanity check for the cross-compilation case:\n AC_CHECK_HEADER(stdio.h,:,\n   [AC_MSG_ERROR([Can't find stdio.h.\n@@ -173,6 +197,10 @@ AC_HEADER_STDC\n \n AC_CHECK_HEADERS(sched.h)\n \n+# -----------\n+# Miscellanea\n+# -----------\n+\n # Determine CFLAGS for gthread.\n # FIXME: the current implementation is dependent on the 'r' variable\n # passed down from the top level\n@@ -186,28 +214,23 @@ fi])\n GTHREAD_FLAGS=$objc_cv_gthread_flags\n AC_SUBST(GTHREAD_FLAGS)\n \n-AC_ARG_ENABLE(objc-gc,\n-[  --enable-objc-gc       enable the use of Boehm's garbage collector with\n-                          the GNU Objective-C runtime.],\n-[case $enable_objc_gc in\n-  no) OBJC_BOEHM_GC='' ;;\n-  *) OBJC_BOEHM_GC=libobjc_gc.la ;;\n-esac],\n-[OBJC_BOEHM_GC=''])\n-AC_SUBST(OBJC_BOEHM_GC)\n+# ------\n+# Output\n+# ------\n \n-# We need multilib support, but only if configuring for the target.\n-AC_OUTPUT(Makefile,\n- [test -z \"$CONFIG_HEADERS\" || echo timestamp > stamp-h\n+AC_CONFIG_FILES([Makefile])\n+\n+AC_CONFIG_COMMANDS([default],\n+[[test -z \"$CONFIG_HEADERS\" || echo timestamp > stamp-h\n if test -n \"$CONFIG_FILES\"; then\n   if test -n \"${with_target_subdir}\"; then\n     # FIXME: We shouldn't need to set ac_file\n     ac_file=Makefile\n     LD=\"${ORIGINAL_LD_FOR_MULTILIBS}\"\n     . ${toplevel_srcdir}/config-ml.in\n   fi\n-fi],\n-srcdir=${srcdir}\n+fi]],\n+[[srcdir=${srcdir}\n host=${host}\n target=${target}\n with_target_subdir=${with_target_subdir}\n@@ -216,4 +239,6 @@ ac_configure_args=\"--enable-multilib ${ac_configure_args}\"\n toplevel_srcdir=${toplevel_srcdir}\n CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n ORIGINAL_LD_FOR_MULTILIBS=\"${ORIGINAL_LD_FOR_MULTILIBS}\"\n-)\n+]])\n+\n+AC_OUTPUT"}]}