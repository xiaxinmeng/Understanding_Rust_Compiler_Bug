{"sha": "def15641da84fb82adfeb946c6d714683148e6e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmMTU2NDFkYTg0ZmI4MmFkZmViOTQ2YzZkNzE0NjgzMTQ4ZTZlMw==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2018-09-26T09:20:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-09-26T09:20:05Z"}, "message": "[Ada] Fix inheritance of representation items defined as aspects\n\nWhen a representation item is defined by a pragma or attribute\ndefinition clause, the entity it applies to is that of the Name of the\nrepresentation item. But when it is defined by an aspect definition, the\nentity is directly denoted by the Entity attribute of the represenation\nitem. The circuitry that inherits representation items for derived types\nor subtypes must account for these two possible cases.\n\n2018-09-26  Thomas Quinot  <quinot@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb (Inherit_Aspects_At_Freeze_Point): For a\n\trepresentation item that is an N_Aspect_Definition, retrieve the\n\tentity it applies to using the Entity attribute.\n\ngcc/testsuite/\n\n\t* gnat.dg/sso13.adb: New testcase.\n\nFrom-SVN: r264636", "tree": {"sha": "03afa6c40302957d55a36ab4791afc3234c1e4ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03afa6c40302957d55a36ab4791afc3234c1e4ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/def15641da84fb82adfeb946c6d714683148e6e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def15641da84fb82adfeb946c6d714683148e6e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def15641da84fb82adfeb946c6d714683148e6e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def15641da84fb82adfeb946c6d714683148e6e3/comments", "author": null, "committer": null, "parents": [{"sha": "0ebf09ed046391377af708ab2471403d3affdddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ebf09ed046391377af708ab2471403d3affdddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ebf09ed046391377af708ab2471403d3affdddd"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "38354ec10f2f24d745734b4dda82fa9aa40ec8e1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def15641da84fb82adfeb946c6d714683148e6e3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def15641da84fb82adfeb946c6d714683148e6e3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=def15641da84fb82adfeb946c6d714683148e6e3", "patch": "@@ -1,3 +1,9 @@\n+2018-09-26  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch13.adb (Inherit_Aspects_At_Freeze_Point): For a\n+\trepresentation item that is an N_Aspect_Definition, retrieve the\n+\tentity it applies to using the Entity attribute.\n+\n 2018-09-26  Justin Squirek  <squirek@adacore.com>\n \n \t* sem_ch8.adb (Analyze_Subprogram_Renaming): Add extra condition"}, {"sha": "b999be630347944c6b69978bfc77ecf1df9d1de9", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def15641da84fb82adfeb946c6d714683148e6e3/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def15641da84fb82adfeb946c6d714683148e6e3/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=def15641da84fb82adfeb946c6d714683148e6e3", "patch": "@@ -11446,6 +11446,26 @@ package body Sem_Ch13 is\n       --  specification node whose correponding pragma (if any) is present in\n       --  the Rep Item chain of the entity it has been specified to.\n \n+      function Rep_Item_Entity (Rep_Item : Node_Id) return Entity_Id;\n+      --  Return the entity for which Rep_Item is specified\n+\n+      ---------------------\n+      -- Rep_Item_Entity --\n+      ---------------------\n+\n+      function Rep_Item_Entity (Rep_Item : Node_Id) return Entity_Id is\n+      begin\n+         if Nkind (Rep_Item) = N_Aspect_Specification then\n+            return Entity (Rep_Item);\n+\n+         else\n+            pragma Assert (Nkind_In (Rep_Item,\n+                                     N_Pragma,\n+                                     N_Attribute_Definition_Clause));\n+            return Entity (Name (Rep_Item));\n+         end if;\n+      end Rep_Item_Entity;\n+\n       --------------------------------------------------\n       -- Is_Pragma_Or_Corr_Pragma_Present_In_Rep_Item --\n       --------------------------------------------------\n@@ -11650,8 +11670,8 @@ package body Sem_Ch13 is\n                  and then Has_Rep_Item (Typ, Name_Bit_Order)\n                then\n                   Set_Reverse_Bit_Order (Bas_Typ,\n-                    Reverse_Bit_Order (Entity (Name\n-                      (Get_Rep_Item (Typ, Name_Bit_Order)))));\n+                    Reverse_Bit_Order (Rep_Item_Entity\n+                      (Get_Rep_Item (Typ, Name_Bit_Order))));\n                end if;\n             end if;\n "}, {"sha": "c96126cb14e3b08be749112aa178885ab8f8402f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def15641da84fb82adfeb946c6d714683148e6e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def15641da84fb82adfeb946c6d714683148e6e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=def15641da84fb82adfeb946c6d714683148e6e3", "patch": "@@ -1,3 +1,7 @@\n+2018-09-26  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat.dg/sso13.adb: New testcase.\n+\n 2018-09-26  Justin Squirek  <squirek@adacore.com>\n \n \t* gnat.dg/warn16.adb: New testcase."}, {"sha": "26ef7624f06bf58d1bb069d265c7b3c5bfc19641", "filename": "gcc/testsuite/gnat.dg/sso13.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def15641da84fb82adfeb946c6d714683148e6e3/gcc%2Ftestsuite%2Fgnat.dg%2Fsso13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def15641da84fb82adfeb946c6d714683148e6e3/gcc%2Ftestsuite%2Fgnat.dg%2Fsso13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsso13.adb?ref=def15641da84fb82adfeb946c6d714683148e6e3", "patch": "@@ -0,0 +1,24 @@\n+--  { dg-do compile }\n+\n+with System;\n+\n+procedure SSO13 is\n+   type Pulse_Buffer_Type is abstract tagged null record\n+    with Bit_Order => System.High_Order_First,\n+         Scalar_Storage_order =>System.High_order_First;  --  { dg-warning \"scalar storage order specified but no component clause\" }\n+   type Pulse_Train_Type is abstract new Pulse_Buffer_Type with null record;\n+   type WO_Pulse_Train_Type is new Pulse_Train_Type with null record;\n+   type WO_Confirmation_Pulse_Train_Type is new WO_Pulse_Train_Type with record\n+      null;\n+   end record;\n+\n+   type Update_Dwell_Type is abstract tagged null record\n+     with Bit_Order => System.High_Order_First,\n+          Scalar_Storage_order =>System.High_order_First;  --  { dg-warning \"scalar storage order specified but no component clause\" }\n+   type Confirmation_Dwell_Type is new Update_Dwell_Type with\n+   record\n+      Pulses : aliased WO_Pulse_Train_Type; -- (Location of Error #1)\n+   end record;\n+begin\n+   null;\n+end;"}]}