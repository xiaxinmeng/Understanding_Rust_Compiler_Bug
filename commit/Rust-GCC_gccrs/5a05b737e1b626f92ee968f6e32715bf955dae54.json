{"sha": "5a05b737e1b626f92ee968f6e32715bf955dae54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwNWI3MzdlMWI2MjZmOTJlZTk2OGY2ZTMyNzE1YmY5NTVkYWU1NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-09-30T20:03:55Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-09-30T20:03:55Z"}, "message": "diagnostic-show-locus.c: rework handling of multiple labels\n\nThis patch improves the handling of large numbers of labels within a\nrich_location: previously, overlapping labels could lead to an assertion\nfailure within layout::print_any_labels.  Also, the labels were printed\nin reverse order of insertion into the rich_location.\n\nThis patch moves the determination of whether a vertical bar should\nbe printed for a line_label into the\n  'Figure out how many \"label lines\" we need, and which\n   one each label is printed in.'\nstep of layout::print_any_labels, rather than doing it as the lines\nare printed.  It also flips the sort order, so that labels at the\nsame line/column are printed in order of insertion into the\nrich_location.\n\nI haven't run into these issues with our existing diagnostics, but it\naffects a patch kit I'm working on that makes more extensive use of\nlabels.\n\ngcc/ChangeLog:\n\t* diagnostic-show-locus.c (line_label::line_label): Initialize\n\tm_has_vbar.\n\t(line_label::comparator): Reverse the sort order by m_state_idx,\n\tso that when the list is walked backwards the labels appear in\n\torder of insertion into the rich_location.\n\t(line_label::m_has_vbar): New field.\n\t(layout::print_any_labels): When dealing with multiple labels at\n\tthe same line and column, only print vertical bars for the one\n\twith the highest label_line.\n\t(selftest::test_one_liner_labels): Update test for multiple labels\n\tto expect the labels to be in the order of insertion into the\n\trich_location.  Add a test for many such labels, where the column\n\tnumbers are out-of-order relative to the insertion order.\n\nFrom-SVN: r276371", "tree": {"sha": "714cd83c7f54b55c831205be869d3c3dd488b5e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/714cd83c7f54b55c831205be869d3c3dd488b5e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a05b737e1b626f92ee968f6e32715bf955dae54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a05b737e1b626f92ee968f6e32715bf955dae54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a05b737e1b626f92ee968f6e32715bf955dae54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a05b737e1b626f92ee968f6e32715bf955dae54/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f00786128f190a4ad7a0819a84026cd8be19ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f00786128f190a4ad7a0819a84026cd8be19ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f00786128f190a4ad7a0819a84026cd8be19ad4"}], "stats": {"total": 91, "additions": 78, "deletions": 13}, "files": [{"sha": "5c3e3e1a0c7283dee32f5554a62ba016c1a15481", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a05b737e1b626f92ee968f6e32715bf955dae54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a05b737e1b626f92ee968f6e32715bf955dae54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a05b737e1b626f92ee968f6e32715bf955dae54", "patch": "@@ -1,3 +1,19 @@\n+2019-09-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c (line_label::line_label): Initialize\n+\tm_has_vbar.\n+\t(line_label::comparator): Reverse the sort order by m_state_idx,\n+\tso that when the list is walked backwards the labels appear in\n+\torder of insertion into the rich_location.\n+\t(line_label::m_has_vbar): New field.\n+\t(layout::print_any_labels): When dealing with multiple labels at\n+\tthe same line and column, only print vertical bars for the one\n+\twith the highest label_line.\n+\t(selftest::test_one_liner_labels): Update test for multiple labels\n+\tto expect the labels to be in the order of insertion into the\n+\trich_location.  Add a test for many such labels, where the column\n+\tnumbers are out-of-order relative to the insertion order.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/i386/i386.h (ix86_frame::expensive_p): New field."}, {"sha": "6612cbb6a9311520db4b246f41d6212b00ccdb9e", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 62, "deletions": 13, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a05b737e1b626f92ee968f6e32715bf955dae54/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a05b737e1b626f92ee968f6e32715bf955dae54/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=5a05b737e1b626f92ee968f6e32715bf955dae54", "patch": "@@ -1416,7 +1416,7 @@ class line_label\n   line_label (int state_idx, int column, label_text text)\n   : m_state_idx (state_idx), m_column (column),\n     m_text (text), m_length (strlen (text.m_buffer)),\n-    m_label_line (0)\n+    m_label_line (0), m_has_vbar (true)\n   {}\n \n   /* Sorting is primarily by column, then by state index.  */\n@@ -1427,14 +1427,18 @@ class line_label\n     int column_cmp = compare (ll1->m_column, ll2->m_column);\n     if (column_cmp)\n       return column_cmp;\n-    return compare (ll1->m_state_idx, ll2->m_state_idx);\n+    /* Order by reverse state index, so that labels are printed\n+       in order of insertion into the rich_location when the\n+       sorted list is walked backwards.  */\n+    return -compare (ll1->m_state_idx, ll2->m_state_idx);\n   }\n \n   int m_state_idx;\n   int m_column;\n   label_text m_text;\n   size_t m_length;\n   int m_label_line;\n+  bool m_has_vbar;\n };\n \n /* Print any labels in this row.  */\n@@ -1511,8 +1515,8 @@ layout::print_any_labels (linenum_type row)\n        foo + bar\n            ^               : label line 0\n            |               : label line 1\n-           label 1         : label line 2\n-           label 0         : label line 3.  */\n+           label 0         : label line 2\n+           label 1         : label line 3.  */\n \n   int max_label_line = 1;\n   {\n@@ -1522,7 +1526,15 @@ layout::print_any_labels (linenum_type row)\n       {\n \t/* Would this label \"touch\" or overlap the next label?  */\n \tif (label->m_column + label->m_length >= (size_t)next_column)\n-\t  max_label_line++;\n+\t  {\n+\t    max_label_line++;\n+\n+\t    /* If we've already seen labels with the same column, suppress the\n+\t       vertical bar for subsequent ones in this backwards iteration;\n+\t       hence only the one with the highest label_line has m_has_vbar set.  */\n+\t    if (label->m_column == next_column)\n+\t      label->m_has_vbar = false;\n+\t  }\n \n \tlabel->m_label_line = max_label_line;\n \tnext_column = label->m_column;\n@@ -1533,10 +1545,6 @@ layout::print_any_labels (linenum_type row)\n      either a vertical bar ('|') for the labels that are lower down, or the\n      labels themselves once we've reached their line.  */\n   {\n-    /* Keep track of in which column we last printed a vertical bar.\n-       This allows us to suppress duplicate vertical bars for the case\n-       where multiple labels are on one column.  */\n-    int last_vbar = 0;\n     for (int label_line = 0; label_line <= max_label_line; label_line++)\n       {\n \tstart_annotation_line ();\n@@ -1558,14 +1566,13 @@ layout::print_any_labels (linenum_type row)\n \t\tm_colorizer.set_normal_text ();\n \t\tcolumn += label->m_length;\n \t      }\n-\t    else if (label->m_column != last_vbar)\n+\t    else if (label->m_has_vbar)\n \t      {\n \t\tgcc_assert (column <= label->m_column);\n \t\tmove_to_column (&column, label->m_column, true);\n \t\tm_colorizer.set_range (label->m_state_idx);\n \t\tpp_character (m_pp, '|');\n \t\tm_colorizer.set_normal_text ();\n-\t\tlast_vbar = column;\n \t\tcolumn++;\n \t      }\n \t  }\n@@ -2783,9 +2790,51 @@ test_one_liner_labels ()\n \t\t  \" foo = bar.field;\\n\"\n \t\t  \"       ^~~\\n\"\n \t\t  \"       |\\n\"\n-\t\t  \"       label 2\\n\"\n+\t\t  \"       label 0\\n\"\n \t\t  \"       label 1\\n\"\n-\t\t  \"       label 0\\n\",\n+\t\t  \"       label 2\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n+\n+  /* Example of out-of-order ranges (thus requiring a sort), where\n+     they overlap, and there are multiple ranges on the same point.  */\n+  {\n+    text_range_label label_0a (\"label 0a\");\n+    text_range_label label_1a (\"label 1a\");\n+    text_range_label label_2a (\"label 2a\");\n+    text_range_label label_0b (\"label 0b\");\n+    text_range_label label_1b (\"label 1b\");\n+    text_range_label label_2b (\"label 2b\");\n+    text_range_label label_0c (\"label 0c\");\n+    text_range_label label_1c (\"label 1c\");\n+    text_range_label label_2c (\"label 2c\");\n+    gcc_rich_location richloc (field, &label_0a);\n+    richloc.add_range (bar, SHOW_RANGE_WITHOUT_CARET, &label_1a);\n+    richloc.add_range (foo, SHOW_RANGE_WITHOUT_CARET, &label_2a);\n+\n+    richloc.add_range (field, SHOW_RANGE_WITHOUT_CARET, &label_0b);\n+    richloc.add_range (bar, SHOW_RANGE_WITHOUT_CARET, &label_1b);\n+    richloc.add_range (foo, SHOW_RANGE_WITHOUT_CARET, &label_2b);\n+\n+    richloc.add_range (field, SHOW_RANGE_WITHOUT_CARET, &label_0c);\n+    richloc.add_range (bar, SHOW_RANGE_WITHOUT_CARET, &label_1c);\n+    richloc.add_range (foo, SHOW_RANGE_WITHOUT_CARET, &label_2c);\n+\n+    test_diagnostic_context dc;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \" foo = bar.field;\\n\"\n+\t\t  \" ~~~   ~~~ ^~~~~\\n\"\n+\t\t  \" |     |   |\\n\"\n+\t\t  \" |     |   label 0a\\n\"\n+\t\t  \" |     |   label 0b\\n\"\n+\t\t  \" |     |   label 0c\\n\"\n+\t\t  \" |     label 1a\\n\"\n+\t\t  \" |     label 1b\\n\"\n+\t\t  \" |     label 1c\\n\"\n+\t\t  \" label 2a\\n\"\n+\t\t  \" label 2b\\n\"\n+\t\t  \" label 2c\\n\",\n \t\t  pp_formatted_text (dc.printer));\n   }\n "}]}