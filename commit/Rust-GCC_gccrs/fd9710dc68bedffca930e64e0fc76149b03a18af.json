{"sha": "fd9710dc68bedffca930e64e0fc76149b03a18af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5NzEwZGM2OGJlZGZmY2E5MzBlNjRlMGZjNzYxNDliMDNhMThhZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-02-19T14:25:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-02-19T14:25:47Z"}, "message": "re PR ipa/60243 (IPA is slow on large cgraph tree)\n\n2014-02-19  Richard Biener  <rguenther@suse.de>\n\n\tPR ipa/60243\n\t* tree-inline.c (estimate_num_insns): Avoid calling cgraph_get_node\n\tfor all calls.\n\nFrom-SVN: r207899", "tree": {"sha": "5e332191e23241952251cf6cf2e5e16847ac2287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e332191e23241952251cf6cf2e5e16847ac2287"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd9710dc68bedffca930e64e0fc76149b03a18af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9710dc68bedffca930e64e0fc76149b03a18af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9710dc68bedffca930e64e0fc76149b03a18af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9710dc68bedffca930e64e0fc76149b03a18af/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73cc5f919288ae57c546d400eb77d29da763b82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73cc5f919288ae57c546d400eb77d29da763b82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73cc5f919288ae57c546d400eb77d29da763b82e"}], "stats": {"total": 73, "additions": 41, "deletions": 32}, "files": [{"sha": "a71885409b37888cb92b67ae886c565da426c6ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9710dc68bedffca930e64e0fc76149b03a18af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9710dc68bedffca930e64e0fc76149b03a18af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd9710dc68bedffca930e64e0fc76149b03a18af", "patch": "@@ -1,3 +1,9 @@\n+2014-02-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/60243\n+\t* tree-inline.c (estimate_num_insns): Avoid calling cgraph_get_node\n+\tfor all calls.\n+\n 2014-02-19  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/60243"}, {"sha": "fc830977f88326e1f59da1f5104ff704c0475754", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9710dc68bedffca930e64e0fc76149b03a18af/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9710dc68bedffca930e64e0fc76149b03a18af/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=fd9710dc68bedffca930e64e0fc76149b03a18af", "patch": "@@ -3824,46 +3824,49 @@ estimate_num_insns (gimple stmt, eni_weights *weights)\n     case GIMPLE_CALL:\n       {\n \ttree decl;\n-\tstruct cgraph_node *node = NULL;\n \n-\t/* Do not special case builtins where we see the body.\n-\t   This just confuse inliner.  */\n \tif (gimple_call_internal_p (stmt))\n \t  return 0;\n-\telse if (!(decl = gimple_call_fndecl (stmt))\n-\t\t || !(node = cgraph_get_node (decl))\n-\t\t || node->definition)\n-\t  ;\n-\t/* For buitins that are likely expanded to nothing or\n-\t   inlined do not account operand costs.  */\n-\telse if (is_simple_builtin (decl))\n-\t  return 0;\n-\telse if (is_inexpensive_builtin (decl))\n-\t  return weights->target_builtin_call_cost;\n-\telse if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n+\telse if ((decl = gimple_call_fndecl (stmt))\n+\t\t && DECL_BUILT_IN (decl))\n \t  {\n-\t    /* We canonicalize x * x to pow (x, 2.0) with -ffast-math, so\n-\t       specialize the cheap expansion we do here.\n-\t       ???  This asks for a more general solution.  */\n-\t    switch (DECL_FUNCTION_CODE (decl))\n+\t    /* Do not special case builtins where we see the body.\n+\t       This just confuse inliner.  */\n+\t    struct cgraph_node *node;\n+\t    if (!(node = cgraph_get_node (decl))\n+\t\t|| node->definition)\n+\t      ;\n+\t    /* For buitins that are likely expanded to nothing or\n+\t       inlined do not account operand costs.  */\n+\t    else if (is_simple_builtin (decl))\n+\t      return 0;\n+\t    else if (is_inexpensive_builtin (decl))\n+\t      return weights->target_builtin_call_cost;\n+\t    else if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n \t      {\n-\t\tcase BUILT_IN_POW:\n-\t\tcase BUILT_IN_POWF:\n-\t\tcase BUILT_IN_POWL:\n-\t\t  if (TREE_CODE (gimple_call_arg (stmt, 1)) == REAL_CST\n-\t\t      && REAL_VALUES_EQUAL\n-\t\t\t   (TREE_REAL_CST (gimple_call_arg (stmt, 1)), dconst2))\n-\t\t    return estimate_operator_cost (MULT_EXPR, weights,\n-\t\t\t\t\t\t   gimple_call_arg (stmt, 0),\n-\t\t\t\t\t\t   gimple_call_arg (stmt, 0));\n-\t\t  break;\n-\n-\t\tdefault:\n-\t\t  break;\n+\t\t/* We canonicalize x * x to pow (x, 2.0) with -ffast-math, so\n+\t\t   specialize the cheap expansion we do here.\n+\t\t   ???  This asks for a more general solution.  */\n+\t\tswitch (DECL_FUNCTION_CODE (decl))\n+\t\t  {\n+\t\t    case BUILT_IN_POW:\n+\t\t    case BUILT_IN_POWF:\n+\t\t    case BUILT_IN_POWL:\n+\t\t      if (TREE_CODE (gimple_call_arg (stmt, 1)) == REAL_CST\n+\t\t\t  && REAL_VALUES_EQUAL\n+\t\t\t  (TREE_REAL_CST (gimple_call_arg (stmt, 1)), dconst2))\n+\t\t\treturn estimate_operator_cost\n+\t\t\t    (MULT_EXPR, weights, gimple_call_arg (stmt, 0),\n+\t\t\t     gimple_call_arg (stmt, 0));\n+\t\t      break;\n+\n+\t\t    default:\n+\t\t      break;\n+\t\t  }\n \t      }\n \t  }\n \n-\tcost = node ? weights->call_cost : weights->indirect_call_cost;\n+\tcost = decl ? weights->call_cost : weights->indirect_call_cost;\n \tif (gimple_call_lhs (stmt))\n \t  cost += estimate_move_cost (TREE_TYPE (gimple_call_lhs (stmt)));\n \tfor (i = 0; i < gimple_call_num_args (stmt); i++)"}]}