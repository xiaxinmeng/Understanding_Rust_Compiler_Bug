{"sha": "f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJjYjZlNjRjOTIwYmIyZjRlOGExY2U5Y2IzMDAzODViNTMzNDllZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-06-20T19:07:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-06-20T19:07:37Z"}, "message": "decl.c (grokfndecl): Add const cp_decl_specifier_seq* parameter...\n\n/cp\n2018-06-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokfndecl): Add const cp_decl_specifier_seq* parameter;\n\ttidy handling of a null location_t argument; use proper location\n\tinformation in a few additional error messages.\n\t(grokdeclarator): Update calls.\n\n/testsuite\n2018-06-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/template/friend65.C: New.\n\t* g++.dg/cpp0x/main1.C: Likewise.\n\t* g++.dg/other/main2.C: Likewise.\n\t* g++.dg/other/main3.C: Likewise.\n\t* g++.dg/template/friend42.C: Test location too.\n\t* g++.dg/concepts/decl-diagnose.C: Likewise.\n\t* g++.dg/warn/main-2.C: Update.\n\nFrom-SVN: r261816", "tree": {"sha": "889831642faaa4526b1397f33ff7336f063a13ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/889831642faaa4526b1397f33ff7336f063a13ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/comments", "author": null, "committer": null, "parents": [{"sha": "829c6349e96c5bfa8603aaef8858b38e237a2f33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829c6349e96c5bfa8603aaef8858b38e237a2f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/829c6349e96c5bfa8603aaef8858b38e237a2f33"}], "stats": {"total": 78, "additions": 56, "deletions": 22}, "files": [{"sha": "b567d60d129f51004cd6d430b3e75984c620637e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "patch": "@@ -1,3 +1,10 @@\n+2018-06-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grokfndecl): Add const cp_decl_specifier_seq* parameter;\n+\ttidy handling of a null location_t argument; use proper location\n+\tinformation in a few additional error messages.\n+\t(grokdeclarator): Update calls.\n+\n 2018-06-20  Chung-Lin Tang <cltang@codesourcery.com>\n \t    Thomas Schwinge <thomas@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "b763b257c337cda266b59e820bf207f0733b1405", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "patch": "@@ -8588,6 +8588,7 @@ grokfndecl (tree ctype,\n \t    tree declarator,\n \t    tree parms,\n \t    tree orig_declarator,\n+\t    const cp_decl_specifier_seq *declspecs,\n \t    tree decl_reqs,\n \t    int virtualp,\n \t    enum overload_flags flags,\n@@ -8611,19 +8612,22 @@ grokfndecl (tree ctype,\n   int staticp = ctype && TREE_CODE (type) == FUNCTION_TYPE;\n   tree t;\n \n+  if (location == UNKNOWN_LOCATION)\n+    location = input_location;\n+\n   // Was the concept specifier present?\n   bool concept_p = inlinep & 4;\n \n   // Concept declarations must have a corresponding definition.\n   if (concept_p && !funcdef_flag)\n     {\n-      error (\"concept %qD has no definition\", declarator);\n+      error_at (location, \"concept %qD has no definition\", declarator);\n       return NULL_TREE;\n     }\n \n   type = build_cp_fntype_variant (type, rqual, raises, late_return_type_p);\n \n-  decl = build_lang_decl (FUNCTION_DECL, declarator, type);\n+  decl = build_lang_decl_loc (location, FUNCTION_DECL, declarator, type);\n \n   /* Set the constraints on the declaration. */\n   if (flag_concepts)\n@@ -8640,11 +8644,6 @@ grokfndecl (tree ctype,\n       set_constraints (decl, ci);\n     }\n \n-  /* If we have an explicit location, use it, otherwise use whatever\n-     build_lang_decl used (probably input_location).  */\n-  if (location != UNKNOWN_LOCATION)\n-    DECL_SOURCE_LOCATION (decl) = location;\n-\n   if (TREE_CODE (type) == METHOD_TYPE)\n     {\n       tree parm = build_this_parm (decl, type, quals);\n@@ -8713,17 +8712,19 @@ grokfndecl (tree ctype,\n \t    if (TREE_PURPOSE (t)\n \t\t&& TREE_CODE (TREE_PURPOSE (t)) == DEFAULT_ARG)\n \t    {\n-\t      error (\"default arguments are not allowed in declaration \"\n-\t\t     \"of friend template specialization %qD\",\n-\t\t     decl);\n+\t      error_at (defarg_location (TREE_PURPOSE (t)),\n+\t\t\t\"default arguments are not allowed in declaration \"\n+\t\t\t\"of friend template specialization %qD\",\n+\t\t\tdecl);\n \t      return NULL_TREE;\n \t    }\n \n \t  if (inlinep & 1)\n \t    {\n-\t      error (\"%<inline%> is not allowed in declaration of friend \"\n-\t\t     \"template specialization %qD\",\n-\t\t     decl);\n+\t      error_at (declspecs->locations[ds_inline],\n+\t\t\t\"%<inline%> is not allowed in declaration of friend \"\n+\t\t\t\"template specialization %qD\",\n+\t\t\tdecl);\n \t      return NULL_TREE;\n \t    }\n \t}\n@@ -8770,13 +8771,15 @@ grokfndecl (tree ctype,\n   if (ctype == NULL_TREE && DECL_MAIN_P (decl))\n     {\n       if (PROCESSING_REAL_TEMPLATE_DECL_P())\n-\terror (\"cannot declare %<::main%> to be a template\");\n+\terror_at (location, \"cannot declare %<::main%> to be a template\");\n       if (inlinep & 1)\n-\terror (\"cannot declare %<::main%> to be inline\");\n+\terror_at (declspecs->locations[ds_inline],\n+\t\t  \"cannot declare %<::main%> to be inline\");\n       if (inlinep & 2)\n-\terror (\"cannot declare %<::main%> to be %<constexpr%>\");\n+\terror_at (declspecs->locations[ds_constexpr],\n+\t\t  \"cannot declare %<::main%> to be %<constexpr%>\");\n       if (!publicp)\n-\terror (\"cannot declare %<::main%> to be static\");\n+\terror_at (location, \"cannot declare %<::main%> to be static\");\n       inlinep = 0;\n       publicp = 1;\n     }\n@@ -8989,7 +8992,8 @@ grokfndecl (tree ctype,\n \t{\n \t  tree oldtypeargs = TYPE_ARG_TYPES (TREE_TYPE (decl));\n \t  tree newtype;\n-\t  error (\"%<::main%> must return %<int%>\");\n+\t  error_at (declspecs->locations[ds_type_spec],\n+\t\t    \"%<::main%> must return %<int%>\");\n \t  newtype = build_function_type (integer_type_node, oldtypeargs);\n \t  TREE_TYPE (decl) = newtype;\n \t}\n@@ -12145,6 +12149,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t       ? unqualified_id : dname,\n \t\t\t       parms,\n \t\t\t       unqualified_id,\n+\t\t\t       declspecs,\n \t\t\t       reqs,\n \t\t\t       virtualp, flags, memfn_quals, rqual, raises,\n \t\t\t       friendp ? -1 : 0, friendp, publicp,\n@@ -12389,6 +12394,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t   || storage_class != sc_static);\n \n \tdecl = grokfndecl (ctype, type, original_name, parms, unqualified_id,\n+\t\t\t   declspecs,\n                            reqs, virtualp, flags, memfn_quals, rqual, raises,\n \t\t\t   1, friendp,\n \t\t\t   publicp,"}, {"sha": "800919666984ac4b6540a9cd2ff56fc4c8a903ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "patch": "@@ -1,3 +1,13 @@\n+2018-06-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/template/friend65.C: New.\n+\t* g++.dg/cpp0x/main1.C: Likewise.\n+\t* g++.dg/other/main2.C: Likewise.\n+\t* g++.dg/other/main3.C: Likewise.\n+\t* g++.dg/template/friend42.C: Test location too.\n+\t* g++.dg/concepts/decl-diagnose.C: Likewise.\n+\t* g++.dg/warn/main-2.C: Update.\n+\n 2018-06-20  Chung-Lin Tang <cltang@codesourcery.com>\n \t    Thomas Schwinge <thomas@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "caf6b2e5e3fd09519e3153dccbc63cfb54cd51c5", "filename": "gcc/testsuite/g++.dg/concepts/decl-diagnose.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C?ref=f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "patch": "@@ -6,7 +6,7 @@ void f(concept int); // { dg-error \"a parameter cannot be declared 'concept'\" }\n \n template<typename T>\n concept int f2() { return 0; } // { dg-error \"return type\" }\n-concept bool f3(); // { dg-error \"no definition\" }\n+concept bool f3(); // { dg-error \"14:concept .f3. has no definition\" }\n \n struct X\n {"}, {"sha": "4667c428243c5ece534d222adee356ac90e562c5", "filename": "gcc/testsuite/g++.dg/cpp0x/main1.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmain1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmain1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmain1.C?ref=f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "patch": "@@ -0,0 +1,3 @@\n+// { dg-do compile { target c++11 } }\n+\n+constexpr int main();  // { dg-error \"1:cannot declare .::main. to be .constexpr.\" }"}, {"sha": "11fa09b9b1053cc06f559c777845dfaa1ef0bbcb", "filename": "gcc/testsuite/g++.dg/other/main2.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmain2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmain2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmain2.C?ref=f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "patch": "@@ -0,0 +1 @@\n+float main();  // { dg-error \"1:.::main. must return .int.\" }"}, {"sha": "febd6fdcc7cbe0567107634a518756357252c210", "filename": "gcc/testsuite/g++.dg/other/main3.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmain3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmain3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmain3.C?ref=f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "patch": "@@ -0,0 +1 @@\n+inline int main();  // { dg-error \"1:cannot declare .::main. to be inline\" }"}, {"sha": "3b6ad5a413377fb41064bb3e9a37632eb7619e05", "filename": "gcc/testsuite/g++.dg/template/friend42.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend42.C?ref=f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "patch": "@@ -4,5 +4,5 @@ template <class T> void foo (int);\n \n template <class T>\n class Q {\n-  friend void foo<T> (int = 3); // { dg-error \"default argument\" }\n+  friend void foo<T> (int = 3); // { dg-error \"27:default arguments are not allowed in declaration of friend\" }\n };"}, {"sha": "8fa56542762465676928f7d1478dafca34ea5799", "filename": "gcc/testsuite/g++.dg/template/friend65.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend65.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend65.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend65.C?ref=f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "patch": "@@ -0,0 +1,6 @@\n+template <class T> void foo (int);\n+\n+template <class T>\n+class Q {\n+  friend inline void foo<T> (int); // { dg-error \"10:.inline. is not allowed in declaration of friend\" }\n+};"}, {"sha": "6a46ff9bca666bdf801a4f1945e09c849f1bb258", "filename": "gcc/testsuite/g++.dg/warn/main-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmain-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmain-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmain-2.C?ref=f2cb6e64c920bb2f4e8a1ce9cb300385b53349ed", "patch": "@@ -7,8 +7,8 @@\n \n void f1();  \n   \n-void\n-main()  /* { dg-error \"must return\" } */\n+void  /* { dg-error \"1:.\\:\\:main. must return .int.\" } */\n+main()\n {     \n   f1();  \n }  "}]}