{"sha": "0af8d957d5911fc7659b4174cfc2213289bbed23", "node_id": "C_kwDOANBUbNoAKDBhZjhkOTU3ZDU5MTFmYzc2NTliNDE3NGNmYzIyMTMyODliYmVkMjM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-10-06T09:48:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-10-06T12:20:04Z"}, "message": "middle-end/107115 - avoid bogus redundant store removal during RTL expansion\n\nThe following preserves the (premature) redundant store removal\ndone in store_expr by appropriately guarding it with\nmems_same_for_tbaa_p.  The testcase added needs scheduling disabled\nfor now since there's a similar bug there still present.\n\n\tPR middle-end/107115\n\t* expr.cc (store_expr): Check mems_same_for_tbaa_p before\n\teliding a seemingly redundant store.\n\n\t* gcc.dg/torture/pr107115.c: New testcase.", "tree": {"sha": "be8272ebd4ca393c1ff8014695c2ab64e440641a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be8272ebd4ca393c1ff8014695c2ab64e440641a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0af8d957d5911fc7659b4174cfc2213289bbed23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af8d957d5911fc7659b4174cfc2213289bbed23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0af8d957d5911fc7659b4174cfc2213289bbed23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af8d957d5911fc7659b4174cfc2213289bbed23/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b93ac3f2fb68a2da0d42fd692fe59533f7a84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b93ac3f2fb68a2da0d42fd692fe59533f7a84f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b93ac3f2fb68a2da0d42fd692fe59533f7a84f"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "ba627f176a784faf7caca94a61f49f5c6cbd315c", "filename": "gcc/expr.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af8d957d5911fc7659b4174cfc2213289bbed23/gcc%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af8d957d5911fc7659b4174cfc2213289bbed23/gcc%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.cc?ref=0af8d957d5911fc7659b4174cfc2213289bbed23", "patch": "@@ -6207,7 +6207,9 @@ store_expr (tree exp, rtx target, int call_param_p,\n \n   if ((! rtx_equal_p (temp, target)\n        || (temp != target && (side_effects_p (temp)\n-\t\t\t      || side_effects_p (target))))\n+\t\t\t      || side_effects_p (target)\n+\t\t\t      || (MEM_P (temp)\n+\t\t\t\t  && !mems_same_for_tbaa_p (temp, target)))))\n       && TREE_CODE (exp) != ERROR_MARK\n       /* If store_expr stores a DECL whose DECL_RTL(exp) == TARGET,\n \t but TARGET is not valid memory reference, TEMP will differ"}, {"sha": "5f7b6ff01e19f8914f3b45cb1d40dd1f52ca943b", "filename": "gcc/testsuite/gcc.dg/torture/pr107115.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af8d957d5911fc7659b4174cfc2213289bbed23/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr107115.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af8d957d5911fc7659b4174cfc2213289bbed23/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr107115.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr107115.c?ref=0af8d957d5911fc7659b4174cfc2213289bbed23", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* PR/107115 */\n+/* { dg-additional-options \"-fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include <stdlib.h>\n+\n+void test1(long *p1)\n+{\n+  p1[0] = 1;\n+}\n+long test2(long long *p2, int index1, int index2)\n+{\n+  p2[index1] = 2;\n+  return p2[index2];\n+}\n+long test3(long *p3, int index2, long value)\n+{\n+  p3[index2] = 3;\n+  p3[index2] = value;\n+  return p3[0];\n+}\n+long test4(void *p4, int index1, int index2)\n+{\n+  test1(p4);\n+  long temp = test2(p4, index1, index2);\n+  return test3(p4, index2, temp);\n+}\n+long (*volatile vtest)(void *, int, int) = test4;\n+int main(void)\n+{\n+  void *pp = malloc(sizeof (long) + sizeof(long long));\n+  if (!pp) abort();\n+  long result = vtest(pp, 0, 0);\n+  if (*(long *)pp != 2 || result != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}