{"sha": "82e3a826871effc7093852a9181f641c693ae94f", "node_id": "C_kwDOANBUbNoAKDgyZTNhODI2ODcxZWZmYzcwOTM4NTJhOTE4MWY2NDFjNjkzYWU5NGY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-07T19:33:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T11:20:25Z"}, "message": "libstdc++: Restore debug checks in uniform container erasure functions\n\nThis partially reverts commit 561078480ffb5adb68577276c6b23e4ee7b39272.\n\nIf we avoid all debug mode checks when erasing elements then we fail to\ninvalidate safe iterators to the removed elements. This reverts the\nrecent changes in r12-4083 and r12-4233, restoring the debug checking.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/deque (erase, erase_if): Revert changes\n\tto avoid debug mode overhead.\n\t* include/experimental/map (erase, erase_if): Likewise.\n\t* include/experimental/set (erase, erase_if): Likewise.\n\t* include/experimental/unordered_map (erase, erase_if):\n\tLikewise.\n\t* include/experimental/unordered_set (erase, erase_if):\n\tLikewise.\n\t* include/experimental/vector (erase, erase_if): Likewise.\n\t* include/std/deque (erase, erase_if): Likewise.\n\t* include/std/map (erase, erase_if): Likewise.\n\t* include/std/set (erase, erase_if): Likewise.\n\t* include/std/unordered_map (erase, erase_if): Likewise.\n\t* include/std/unordered_set (erase, erase_if): Likewise.\n\t* include/std/vector (erase, erase_if): Likewise.", "tree": {"sha": "59fad51566da7e89bf11f80a2622546f5b5de2eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59fad51566da7e89bf11f80a2622546f5b5de2eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82e3a826871effc7093852a9181f641c693ae94f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e3a826871effc7093852a9181f641c693ae94f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e3a826871effc7093852a9181f641c693ae94f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e3a826871effc7093852a9181f641c693ae94f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcc13d6fc31441b5672b68a5e3b247687724218f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc13d6fc31441b5672b68a5e3b247687724218f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc13d6fc31441b5672b68a5e3b247687724218f"}], "stats": {"total": 148, "additions": 45, "deletions": 103}, "files": [{"sha": "a76fb659bbf67f2064ed508f0790d127fdbebd24", "filename": "libstdc++-v3/include/experimental/deque", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -50,16 +50,16 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(deque<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n-      _GLIBCXX_STD_C::deque<_Tp, _Alloc>& __c = __cont;\n-      __c.erase(std::remove_if(__c.begin(), __c.end(), __pred), __c.end());\n+      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n+\t\t   __cont.end());\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n     inline void\n     erase(deque<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n-      _GLIBCXX_STD_C::deque<_Tp, _Alloc>& __c = __cont;\n-      __c.erase(std::remove(__c.begin(), __c.end(), __value), __c.end());\n+      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n+\t\t   __cont.end());\n     }\n \n   namespace pmr {"}, {"sha": "0c0f42222f5697f392bd94ae6aec623fb667b453", "filename": "libstdc++-v3/include/experimental/map", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -50,19 +50,13 @@ inline namespace fundamentals_v2\n \t   typename _Predicate>\n     inline void\n     erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Alloc>& __c = __cont;\n-      std::__detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Alloc>& __c = __cont;\n-      std::__detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   namespace pmr {\n     template<typename _Key, typename _Tp, typename _Compare = less<_Key>>"}, {"sha": "c3f5433e995c3c62cb7966a0f4181e7142818831", "filename": "libstdc++-v3/include/experimental/set", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -50,19 +50,13 @@ inline namespace fundamentals_v2\n \t   typename _Predicate>\n     inline void\n     erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>& __c = __cont;\n-      std::__detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>& __c = __cont;\n-      std::__detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   namespace pmr {\n     template<typename _Key, typename _Compare = less<_Key>>"}, {"sha": "0b915ab13e5bd148f6b93fcd6beba8eb7abf59ec", "filename": "libstdc++-v3/include/experimental/unordered_map", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -51,22 +51,14 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __c\n-\t= __cont;\n-      std::__detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n \t   typename _Alloc, typename _Predicate>\n     inline void\n     erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __c\n-\t= __cont;\n-      std::__detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   namespace pmr {\n     template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,"}, {"sha": "87db4464401eb1407f283d566a2a6797069a2f23", "filename": "libstdc++-v3/include/experimental/unordered_set", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -51,21 +51,14 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::unordered_set<_Key, _Hash, _CPred, _Alloc>& __c = __cont;\n-      std::__detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __c\n-\t= __cont;\n-      std::__detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { std::__detail::__erase_nodes_if(__cont, __pred); }\n \n   namespace pmr {\n     template<typename _Key, typename _Hash = hash<_Key>,"}, {"sha": "a14aedf33640889f433de21eb9c4dd4e55bb8d12", "filename": "libstdc++-v3/include/experimental/vector", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -52,16 +52,16 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(vector<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n-      _GLIBCXX_STD_C::vector<_Tp, _Alloc>& __c = __cont;\n-      __c.erase(std::remove_if(__c.begin(), __c.end(), __pred), __c.end());\n+      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n+\t\t   __cont.end());\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n     inline void\n     erase(vector<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n-      _GLIBCXX_STD_C::vector<_Tp, _Alloc>& __c = __cont;\n-      __c.erase(std::remove(__c.begin(), __c.end(), __value), __c.end());\n+      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n+\t\t   __cont.end());\n     }\n \n   namespace pmr {"}, {"sha": "473479c44ac8e7157fa557c31aa24e21e4af6489", "filename": "libstdc++-v3/include/std/deque", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -95,28 +95,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename deque<_Tp, _Alloc>::size_type\n     erase_if(deque<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n-      _GLIBCXX_STD_C::deque<_Tp, _Alloc>& __c = __cont;\n       using namespace __gnu_cxx;\n-      const auto __osz = __c.size();\n-      const auto __end = __c.end();\n-      auto __removed = std::__remove_if(__c.begin(), __end,\n+      const auto __osz = __cont.size();\n+      const auto __end = __cont.end();\n+      auto __removed = std::__remove_if(__cont.begin(), __end,\n \t\t\t\t\t__ops::__pred_iter(std::ref(__pred)));\n-      __c.erase(__removed, __end);\n-      return __osz - __c.size();\n+      __cont.erase(__removed, __end);\n+      return __osz - __cont.size();\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n     inline typename deque<_Tp, _Alloc>::size_type\n     erase(deque<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n-      _GLIBCXX_STD_C::deque<_Tp, _Alloc>& __c = __cont;\n       using namespace __gnu_cxx;\n-      const auto __osz = __c.size();\n-      const auto __end = __c.end();\n-      auto __removed = std::__remove_if(__c.begin(), __end,\n+      const auto __osz = __cont.size();\n+      const auto __end = __cont.end();\n+      auto __removed = std::__remove_if(__cont.begin(), __end,\n \t\t\t\t\t__ops::__iter_equals_val(__value));\n-      __c.erase(__removed, __end);\n-      return __osz - __c.size();\n+      __cont.erase(__removed, __end);\n+      return __osz - __cont.size();\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "44bd44b5922a44cd4e1c971ee8633578ad878c6a", "filename": "libstdc++-v3/include/std/map", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -95,19 +95,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Predicate>\n     inline typename map<_Key, _Tp, _Compare, _Alloc>::size_type\n     erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Alloc>& __c = __cont;\n-      return __detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline typename multimap<_Key, _Tp, _Compare, _Alloc>::size_type\n     erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Alloc>& __c = __cont;\n-      return __detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "f1e1864937a0b4b8cf5d5a60878d9c4090ed4064", "filename": "libstdc++-v3/include/std/set", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -91,19 +91,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Predicate>\n     inline typename set<_Key, _Compare, _Alloc>::size_type\n     erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>& __c = __cont;\n-      return __detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline typename multiset<_Key, _Compare, _Alloc>::size_type\n     erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>& __c = __cont;\n-      return __detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "e6715069362d700ff9138e24de0fddae911a117a", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -83,23 +83,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __c\n-\t= __cont;\n-      return __detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n \t   typename _Alloc, typename _Predicate>\n     inline typename unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>::\n \t\t    size_type\n     erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __c\n-\t= __cont;\n-      return __detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "1ad93d0031b2c6a84077846549356559e3da757a", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -83,21 +83,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename unordered_set<_Key, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::unordered_set<_Key, _Hash, _CPred, _Alloc>& __c = __cont;\n-      return __detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n \n   template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n \t   typename _Predicate>\n     inline typename unordered_multiset<_Key, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    {\n-      _GLIBCXX_STD_C::unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __c\n-\t= __cont;\n-      return __detail::__erase_nodes_if(__c, __pred);\n-    }\n+    { return __detail::__erase_nodes_if(__cont, __pred); }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "096511c05b20101aa6ddcacfbcd3e66f419190ab", "filename": "libstdc++-v3/include/std/vector", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e3a826871effc7093852a9181f641c693ae94f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector?ref=82e3a826871effc7093852a9181f641c693ae94f", "patch": "@@ -105,28 +105,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename vector<_Tp, _Alloc>::size_type\n     erase_if(vector<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n-      _GLIBCXX_STD_C::vector<_Tp, _Alloc>& __c = __cont;\n       using namespace __gnu_cxx;\n-      const auto __osz = __c.size();\n-      const auto __end = __c.end();\n-      auto __removed(std::__remove_if(__c.begin(), __end,\n-\t\t\t\t      __ops::__pred_iter(std::ref(__pred))));\n-      __c.erase(__removed, __end);\n-      return __osz - __c.size();\n+      const auto __osz = __cont.size();\n+      const auto __end = __cont.end();\n+      auto __removed = std::__remove_if(__cont.begin(), __end,\n+\t\t\t\t\t__ops::__pred_iter(std::ref(__pred)));\n+      __cont.erase(__removed, __end);\n+      return __osz - __cont.size();\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n     inline typename vector<_Tp, _Alloc>::size_type\n     erase(vector<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n-      _GLIBCXX_STD_C::vector<_Tp, _Alloc>& __c = __cont;\n       using namespace __gnu_cxx;\n-      const auto __osz = __c.size();\n-      const auto __end = __c.end();\n-      auto __removed = std::__remove_if(__c.begin(), __end,\n+      const auto __osz = __cont.size();\n+      const auto __end = __cont.end();\n+      auto __removed = std::__remove_if(__cont.begin(), __end,\n \t\t\t\t\t__ops::__iter_equals_val(__value));\n-      __c.erase(__removed, __end);\n-      return __osz - __c.size();\n+      __cont.erase(__removed, __end);\n+      return __osz - __cont.size();\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}]}