{"sha": "2b356e689c334ca4765a9ffd95a76cf715447200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIzNTZlNjg5YzMzNGNhNDc2NWE5ZmZkOTVhNzZjZjcxNTQ0NzIwMA==", "commit": {"author": {"name": "Samuel Thibault", "email": "samuel.thibault@gnu.org", "date": "2020-12-21T14:36:30Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-01-13T10:54:54Z"}, "message": "hurd: libgcc unwinding over signal trampolines with SIGINFO\n\nWhen the application sets SA_SIGINFO, the signal trampoline parameters\nare different to follow POSIX.\n\n\tlibgcc/\n\t* config/i386/gnu-unwind.h (x86_gnu_fallback_frame_state): Add the\n\tposix siginfo case to struct handler_args. Detect between legacy\n\tand siginfo from the second parameter, which is a small sigcode in\n\tthe legacy case, and a pointer in the siginfo case.", "tree": {"sha": "5afae744550bc303e038c2047349ebe97a2daf6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5afae744550bc303e038c2047349ebe97a2daf6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b356e689c334ca4765a9ffd95a76cf715447200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b356e689c334ca4765a9ffd95a76cf715447200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b356e689c334ca4765a9ffd95a76cf715447200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b356e689c334ca4765a9ffd95a76cf715447200/comments", "author": {"login": "sthibaul", "id": 5405051, "node_id": "MDQ6VXNlcjU0MDUwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/5405051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sthibaul", "html_url": "https://github.com/sthibaul", "followers_url": "https://api.github.com/users/sthibaul/followers", "following_url": "https://api.github.com/users/sthibaul/following{/other_user}", "gists_url": "https://api.github.com/users/sthibaul/gists{/gist_id}", "starred_url": "https://api.github.com/users/sthibaul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sthibaul/subscriptions", "organizations_url": "https://api.github.com/users/sthibaul/orgs", "repos_url": "https://api.github.com/users/sthibaul/repos", "events_url": "https://api.github.com/users/sthibaul/events{/privacy}", "received_events_url": "https://api.github.com/users/sthibaul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d1e2b54c6b9cf13f021176ba37d24cc4dc2fe1"}], "stats": {"total": 60, "additions": 47, "deletions": 13}, "files": [{"sha": "0632348d4cd79b8fa866a76f5471b31242c20402", "filename": "libgcc/config/i386/gnu-unwind.h", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b356e689c334ca4765a9ffd95a76cf715447200/libgcc%2Fconfig%2Fi386%2Fgnu-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b356e689c334ca4765a9ffd95a76cf715447200/libgcc%2Fconfig%2Fi386%2Fgnu-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fgnu-unwind.h?ref=2b356e689c334ca4765a9ffd95a76cf715447200", "patch": "@@ -38,10 +38,21 @@ x86_gnu_fallback_frame_state\n {\n   struct handler_args {\n     int signo;\n-    int sigcode;\n-    struct sigcontext *scp;\n+    union\n+      {\n+\tstruct\n+\t  {\n+\t    long int sigcode;\n+\t    struct sigcontext *scp;\n+\t  } legacy;\n+\tstruct\n+\t  {\n+\t    siginfo_t *siginfop;\n+\t    ucontext_t *uctxp;\n+\t  } posix;\n+      };\n   } *handler_args;\n-  struct sigcontext *scp;\n+  long int sigcode;\n   unsigned long usp;\n \n /*\n@@ -75,29 +86,52 @@ x86_gnu_fallback_frame_state\n     return _URC_END_OF_STACK;\n \n   handler_args = context->cfa;\n-  scp = handler_args->scp;\n-  usp = scp->sc_uesp;\n+  sigcode = handler_args->legacy.sigcode;\n+  if (sigcode >= -16 && sigcode < 4096)\n+    {\n+      /* This cannot be a SIGINFO pointer, assume legacy.  */\n+      struct sigcontext *scp = handler_args->legacy.scp;\n+      usp = scp->sc_uesp;\n+\n+      fs->regs.reg[0].loc.offset = (unsigned long)&scp->sc_eax - usp;\n+      fs->regs.reg[1].loc.offset = (unsigned long)&scp->sc_ecx - usp;\n+      fs->regs.reg[2].loc.offset = (unsigned long)&scp->sc_edx - usp;\n+      fs->regs.reg[3].loc.offset = (unsigned long)&scp->sc_ebx - usp;\n+      fs->regs.reg[5].loc.offset = (unsigned long)&scp->sc_ebp - usp;\n+      fs->regs.reg[6].loc.offset = (unsigned long)&scp->sc_esi - usp;\n+      fs->regs.reg[7].loc.offset = (unsigned long)&scp->sc_edi - usp;\n+      fs->regs.reg[8].loc.offset = (unsigned long)&scp->sc_eip - usp;\n+    }\n+  else\n+    {\n+      /* This is not a valid sigcode, assume SIGINFO.  */\n+      ucontext_t *uctxp = handler_args->posix.uctxp;\n+      gregset_t *gregset = &uctxp->uc_mcontext.gregs;\n+      usp = (*gregset)[REG_UESP];\n+\n+      fs->regs.reg[0].loc.offset = (unsigned long)&(*gregset)[REG_EAX] - usp;\n+      fs->regs.reg[1].loc.offset = (unsigned long)&(*gregset)[REG_ECX] - usp;\n+      fs->regs.reg[2].loc.offset = (unsigned long)&(*gregset)[REG_EDX] - usp;\n+      fs->regs.reg[3].loc.offset = (unsigned long)&(*gregset)[REG_EBX] - usp;\n+      fs->regs.reg[5].loc.offset = (unsigned long)&(*gregset)[REG_EBP] - usp;\n+      fs->regs.reg[6].loc.offset = (unsigned long)&(*gregset)[REG_ESI] - usp;\n+      fs->regs.reg[7].loc.offset = (unsigned long)&(*gregset)[REG_EDI] - usp;\n+      fs->regs.reg[8].loc.offset = (unsigned long)&(*gregset)[REG_EIP] - usp;\n+    }\n \n   fs->regs.cfa_how = CFA_REG_OFFSET;\n   fs->regs.cfa_reg = 4;\n   fs->regs.cfa_offset = usp - (unsigned long) context->cfa;\n \n   fs->regs.reg[0].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[0].loc.offset = (unsigned long)&scp->sc_eax - usp;\n   fs->regs.reg[1].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[1].loc.offset = (unsigned long)&scp->sc_ecx - usp;\n   fs->regs.reg[2].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[2].loc.offset = (unsigned long)&scp->sc_edx - usp;\n   fs->regs.reg[3].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[3].loc.offset = (unsigned long)&scp->sc_ebx - usp;\n   fs->regs.reg[5].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[5].loc.offset = (unsigned long)&scp->sc_ebp - usp;\n   fs->regs.reg[6].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[6].loc.offset = (unsigned long)&scp->sc_esi - usp;\n   fs->regs.reg[7].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[7].loc.offset = (unsigned long)&scp->sc_edi - usp;\n   fs->regs.reg[8].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[8].loc.offset = (unsigned long)&scp->sc_eip - usp;\n+\n   fs->retaddr_column = 8;\n   fs->signal_frame = 1;\n "}]}