{"sha": "78f2f08ac8f22a0ad412a2abf5225b5fe3176bcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhmMmYwOGFjOGYyMmEwYWQ0MTJhMmFiZjUyMjViNWZlMzE3NmJjZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-03T18:15:54Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-03T18:23:44Z"}, "message": "c++: Refactor clone copying\n\nThis patch sets copy_fndecl_with_name to always inform\nrest_of_decl_compilation that it is not a top-level decl (it's a\nmember function).  I also refactor build_cdtor_clones to conditionally\ndo the method vector updating.  That happens to be a better interface\nfor modules to use.\n\n\tgcc/cp/\n\t* class.c (copy_fndecl_with_name):  Always not top level.\n\t(build_cdtor_clones): Add update_methods parm, use it to\n\tconditionally update the method vec.  Return void\n\t(clone_cdtor): Adjust.\n\t(clone_constructors_and_destructors): Adjust comment.", "tree": {"sha": "687582b6c3faedb709af4dcbacba3e1b417f1c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/687582b6c3faedb709af4dcbacba3e1b417f1c26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78f2f08ac8f22a0ad412a2abf5225b5fe3176bcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f2f08ac8f22a0ad412a2abf5225b5fe3176bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78f2f08ac8f22a0ad412a2abf5225b5fe3176bcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f2f08ac8f22a0ad412a2abf5225b5fe3176bcf/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4a0e873be8a6c2787c13bd29c0b2a5df332adeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a0e873be8a6c2787c13bd29c0b2a5df332adeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a0e873be8a6c2787c13bd29c0b2a5df332adeb"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "c03737294eb7eafd085c4d60fd80da463e0cbe5e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f2f08ac8f22a0ad412a2abf5225b5fe3176bcf/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f2f08ac8f22a0ad412a2abf5225b5fe3176bcf/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=78f2f08ac8f22a0ad412a2abf5225b5fe3176bcf", "patch": "@@ -4838,7 +4838,10 @@ copy_fndecl_with_name (tree fn, tree name, tree_code code,\n \n   /* Create the RTL for this function.  */\n   SET_DECL_RTL (clone, NULL);\n-  rest_of_decl_compilation (clone, namespace_bindings_p (), at_eof);\n+\n+  /* Regardless of the current scope, this is a member function, so\n+     not at namespace scope.  */\n+  rest_of_decl_compilation (clone, /*top_level=*/0, at_eof);\n \n   return clone;\n }\n@@ -4898,8 +4901,9 @@ build_clone (tree fn, tree name, bool need_vtt_parm_p,\n /* Build the clones of FN, return the number of clones built.  These\n    will be inserted onto DECL_CHAIN of FN.  */\n \n-static unsigned\n-build_cdtor_clones (tree fn, bool needs_vtt_p, bool base_omits_inherited_p)\n+static void\n+build_cdtor_clones (tree fn, bool needs_vtt_p, bool base_omits_inherited_p,\n+\t\t    bool update_methods)\n {\n   unsigned count = 0;\n \n@@ -4935,7 +4939,16 @@ build_cdtor_clones (tree fn, bool needs_vtt_p, bool base_omits_inherited_p)\n       count += 2;\n     }\n \n-  return count;\n+  /* The original is now an abstract function that is never\n+     emitted.  */\n+  DECL_ABSTRACT_P (fn) = true;\n+\n+  if (update_methods)\n+    for (tree clone = fn; count--;)\n+      {\n+\tclone = DECL_CHAIN (clone);\n+\tadd_method (DECL_CONTEXT (clone), clone, false);\n+      }\n }\n \n /* Produce declarations for all appropriate clones of FN.  If\n@@ -4958,17 +4971,7 @@ clone_cdtor (tree fn, bool update_methods)\n   bool base_omits_inherited = (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (fn)\n \t\t\t       && base_ctor_omit_inherited_parms (fn));\n \n-  unsigned count = build_cdtor_clones (fn, vtt, base_omits_inherited);\n-\n-  /* Note that this is an abstract function that is never emitted.  */\n-  DECL_ABSTRACT_P (fn) = true;\n-\n-  if (update_methods)\n-    for (tree clone = fn; count--;)\n-      {\n-\tclone = DECL_CHAIN (clone);\n-\tadd_method (DECL_CONTEXT (clone), clone, false);\n-      }\n+  build_cdtor_clones (fn, vtt, base_omits_inherited, update_methods);\n }\n \n /* DECL is an in charge constructor, which is being defined. This will\n@@ -5055,8 +5058,8 @@ adjust_clone_args (tree decl)\n static void\n clone_constructors_and_destructors (tree t)\n {\n-  /* While constructors can be via a using declaration, at this point\n-     we no longer need to know that.  */\n+  /* We do not need to propagate the usingness to the clone, at this\n+     point that is not needed.  */\n   for (ovl_iterator iter (CLASSTYPE_CONSTRUCTORS (t)); iter; ++iter)\n     clone_cdtor (*iter, /*update_methods=*/true);\n "}]}