{"sha": "9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQzNjNhNTZhOGZmNjU4N2Y4ZDMyZWEzODBiNTVmZWE3N2VhNWYxMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-03-19T01:35:01Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-03-19T01:35:01Z"}, "message": "c-common.c (pointer_int_sum): Do not complain about using pointers to pointers-to-members.\n\n\t* c-common.c (pointer_int_sum): Do not complain about using\n\tpointers to pointers-to-members.\n\n\t* call.c (build_conditional_expr): Do not call force_rvalue for\n\toperands of void_type when the conditional expression itself has\n\tvoid type.\n\t* name-lookup.c (pushdecl): Don't consider a declaration of a\n\tfunction named \"main\" to be an overload of a type named \"main\".\n\t* parser.c (cp_parser_template_name): Perform name lookup when the\n\ttemplate name is proceeded by \"template\" if the qualifying scope\n\tis non-dependent.\n\t* typeck.c (composite_pointer_type_r): Correctly handle\n\tpointer-to-member types.\n\t(build_const_cast): Likewise.\n\n\t* g++.dg/expr/cond5.C: New test.\n\t* g++.dg/expr/constcast1.C: Likewise.\n\t* g++.dg/expr/ptrmem2.C: Likewise.\n\t* g++.dg/expr/ptrmem3.C: Likewise.\n\t* g++.dg/lookup/main1.C: Likewise.\n\t* g++.dg/template/lookup6.C: Likewise.\n\nFrom-SVN: r79663", "tree": {"sha": "ff8a9efb7d2b4a67b0c26125354dd012254824f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff8a9efb7d2b4a67b0c26125354dd012254824f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/comments", "author": null, "committer": null, "parents": [{"sha": "c3690d79a8c861f10b77954379e03dd96807a409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3690d79a8c861f10b77954379e03dd96807a409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3690d79a8c861f10b77954379e03dd96807a409"}], "stats": {"total": 77, "additions": 64, "deletions": 13}, "files": [{"sha": "c33d57b545747aa2b54656de13174755376441f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "patch": "@@ -1,3 +1,8 @@\n+2004-03-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-common.c (pointer_int_sum): Do not complain about using\n+\tpointers to pointers-to-members.\n+\n 2004-03-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* system.h (MD_ASM_CLOBBERS): Move to \"Old target macros that"}, {"sha": "49c9ccf613cd31c4f5728b5f03667a6ced411bb8", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "patch": "@@ -2484,12 +2484,6 @@ pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n \tpedwarn (\"pointer to member function used in arithmetic\");\n       size_exp = integer_one_node;\n     }\n-  else if (TREE_CODE (TREE_TYPE (result_type)) == OFFSET_TYPE)\n-    {\n-      if (pedantic || warn_pointer_arith)\n-\tpedwarn (\"pointer to a member used in arithmetic\");\n-      size_exp = integer_one_node;\n-    }\n   else\n     size_exp = size_in_bytes (TREE_TYPE (result_type));\n "}, {"sha": "1052abed8af927bb8e93fefeb42b0416f8649d44", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "patch": "@@ -1,3 +1,17 @@\n+2004-03-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* call.c (build_conditional_expr): Do not call force_rvalue for\n+\toperands of void_type when the conditional expression itself has\n+\tvoid type.\n+\t* name-lookup.c (pushdecl): Don't consider a declaration of a\n+\tfunction named \"main\" to be an overload of a type named \"main\".\n+\t* parser.c (cp_parser_template_name): Perform name lookup when the\n+\ttemplate name is proceeded by \"template\" if the qualifying scope\n+\tis non-dependent.\n+\t* typeck.c (composite_pointer_type_r): Correctly handle\n+\tpointer-to-member types.\n+\t(build_const_cast): Likewise.\n+\n 2004-03-18  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* cp-tree.def (TEMPLATE_TYPE_PARM, TYPEOF_TYPE): Update comments."}, {"sha": "7a3039bd3b81c8e1ae3d9807c30cb79d98edced8", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "patch": "@@ -3178,18 +3178,24 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3)\n \t   type of the other and is an rvalue.\n \n \t --Both the second and the third operands have type void; the\n-\t   result is of type void and is an rvalue.  */\n+\t   result is of type void and is an rvalue.  \n+\n+         We must avoid calling force_rvalue for expressions of type\n+\t \"void\" because it will complain that their value is being\n+\t used.   */\n       if (TREE_CODE (arg2) == THROW_EXPR \n \t  && TREE_CODE (arg3) != THROW_EXPR)\n \t{\n-\t  arg3 = force_rvalue (arg3);\n+\t  if (!VOID_TYPE_P (arg3_type))\n+\t    arg3 = force_rvalue (arg3);\n \t  arg3_type = TREE_TYPE (arg3);\n \t  result_type = arg3_type;\n \t}\n       else if (TREE_CODE (arg2) != THROW_EXPR \n \t       && TREE_CODE (arg3) == THROW_EXPR)\n \t{\n-\t  arg2 = force_rvalue (arg2);\n+\t  if (!VOID_TYPE_P (arg2_type))\n+\t    arg2 = force_rvalue (arg2);\n \t  arg2_type = TREE_TYPE (arg2);\n \t  result_type = arg2_type;\n \t}"}, {"sha": "15896821282d28f4484bb47ac4743dae59453ee7", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "patch": "@@ -706,7 +706,7 @@ pushdecl (tree x)\n \n \t\t  POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, t);\n \t\t}\n-\t      else if (DECL_MAIN_P (x))\n+\t      else if (DECL_MAIN_P (x) && TREE_CODE (t) == FUNCTION_DECL)\n \t\t{\n \t\t  /* A redeclaration of main, but not a duplicate of the\n \t\t     previous one."}, {"sha": "0dc63cd8d27885d2cfd3278933a0212453fc586a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "patch": "@@ -8203,7 +8203,15 @@ cp_parser_template_name (cp_parser* parser,\n \t    *is_identifier = true;\n \t  return identifier;\n \t}\n-      if (template_keyword_p)\n+\n+      /* If the \"template\" keyword is present, then there is generally\n+\t no point in doing name-lookup, so we just return IDENTIFIER.\n+\t But, if the qualifying scope is non-dependent then we can\n+\t (and must) do name-lookup normally.  */\n+      if (template_keyword_p\n+\t  && (!parser->scope\n+\t      || (TYPE_P (parser->scope) \n+\t\t  && dependent_type_p (parser->scope))))\n \treturn identifier;\n     }\n "}, {"sha": "e353d3f57aca545d1f001a3ea79c56790b6efdb4", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "patch": "@@ -443,7 +443,6 @@ composite_pointer_type_r (tree t1, tree t2, const char* location)\n   result_type = cp_build_qualified_type (result_type,\n \t\t\t\t\t (cp_type_quals (pointee1)\n \t\t\t\t\t  | cp_type_quals (pointee2)));\n-  result_type = build_pointer_type (result_type);\n   /* If the original types were pointers to members, so is the\n      result.  */\n   if (TYPE_PTR_TO_MEMBER_P (t1))\n@@ -456,6 +455,8 @@ composite_pointer_type_r (tree t1, tree t2, const char* location)\n       result_type = build_ptrmem_type (TYPE_PTRMEM_CLASS_TYPE (t1),\n \t\t\t\t       result_type);\n     }\n+  else\n+    result_type = build_pointer_type (result_type);\n \n   /* Merge the attributes.  */\n   attributes = (*targetm.merge_type_attributes) (t1, t2);\n@@ -4726,7 +4727,7 @@ build_const_cast (tree type, tree expr)\n       return t;\n     }\n \n-  if (!POINTER_TYPE_P (type))\n+  if (!POINTER_TYPE_P (type) && !TYPE_PTRMEM_P (type))\n     error (\"invalid use of const_cast with type `%T', which is not a pointer, reference, nor a pointer-to-data-member type\", type);\n   else if (TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE)\n     {"}, {"sha": "be760c89c87ca21d3bd9c54c9dba2ef79f65b37c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "patch": "@@ -1,3 +1,12 @@\n+2004-03-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/expr/cond5.C: New test.\n+\t* g++.dg/expr/constcast1.C: Likewise.\n+\t* g++.dg/expr/ptrmem2.C: Likewise.\n+\t* g++.dg/expr/ptrmem3.C: Likewise.\n+\t* g++.dg/lookup/main1.C: Likewise.\n+\t* g++.dg/template/lookup6.C: Likewise.\n+\n 2004-03-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc.dg/local1.c: New test."}, {"sha": "1de834235a6dfdc38c2db4eda870512395526e48", "filename": "gcc/testsuite/g++.dg/lookup/main1.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmain1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmain1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmain1.C?ref=9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "patch": "@@ -0,0 +1,3 @@\n+struct main {};\n+\n+int main () {}"}, {"sha": "2ca6dcc7547d428bb0d0c5406a8b71ecab8afdb3", "filename": "gcc/testsuite/g++.dg/template/lookup6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d363a56a8ff6587f8d32ea380b55fea77ea5f13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup6.C?ref=9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "patch": "@@ -0,0 +1,11 @@\n+struct S\n+{\n+  template<typename T> static void g();\n+};\n+\n+template<typename T>\n+void f() { return S::template g<T>(); }\n+\n+void g() {\n+  f<int>();\n+}"}]}