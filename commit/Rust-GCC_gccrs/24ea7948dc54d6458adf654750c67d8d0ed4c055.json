{"sha": "24ea7948dc54d6458adf654750c67d8d0ed4c055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRlYTc5NDhkYzU0ZDY0NThhZGY2NTQ3NTBjNjdkOGQwZWQ0YzA1NQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2003-10-29T01:28:09Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-29T01:28:09Z"}, "message": "ia64.c (cmptf_libfunc): New static.\n\n\t* config/ia64/ia64.c (cmptf_libfunc): New static.\n\t(ia64_expand_compare): Add logic to open-code calls to\n\t_U_Qfcmp for TFmode comparisons.\n\t(ia64_hpux_init_libfuncs): Initialize cmptf_libfunc.\n\tSet libfuncs for TFmode eq/ne/gt/ge/lt/gt to 0; these should\n\tnever be generated anymore.\n\t* config/ia64/ia64.md (cmptf): New expander.\n\nFrom-SVN: r73028", "tree": {"sha": "18ee97a45e6e621740dd8e3b0fcfd007028453ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18ee97a45e6e621740dd8e3b0fcfd007028453ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24ea7948dc54d6458adf654750c67d8d0ed4c055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ea7948dc54d6458adf654750c67d8d0ed4c055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ea7948dc54d6458adf654750c67d8d0ed4c055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ea7948dc54d6458adf654750c67d8d0ed4c055/comments", "author": null, "committer": null, "parents": [{"sha": "b38ba46301ac50a5c0d8c93953aa150d748bff8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38ba46301ac50a5c0d8c93953aa150d748bff8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b38ba46301ac50a5c0d8c93953aa150d748bff8b"}], "stats": {"total": 92, "additions": 86, "deletions": 6}, "files": [{"sha": "b5823a992d1f0cc1ab760860e54193825c8a02b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ea7948dc54d6458adf654750c67d8d0ed4c055/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ea7948dc54d6458adf654750c67d8d0ed4c055/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24ea7948dc54d6458adf654750c67d8d0ed4c055", "patch": "@@ -1,3 +1,13 @@\n+2003-10-28  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/ia64/ia64.c (cmptf_libfunc): New static.\n+\t(ia64_expand_compare): Add logic to open-code calls to\n+\t_U_Qfcmp for TFmode comparisons.\n+\t(ia64_hpux_init_libfuncs): Initialize cmptf_libfunc.\n+\tSet libfuncs for TFmode eq/ne/gt/ge/lt/gt to 0; these should\n+\tnever be generated anymore.\n+\t* config/ia64/ia64.md (cmptf): New expander.\n+\n 2003-10-28  Zack Weinberg  <zack@codesourcery.com>\n \n \t* ia64.md (UNSPEC_SETF_EXP,UNSPEC_FR_SQRT_RECIP_APPROX): New constants."}, {"sha": "f4945709d105f65db617bfcfdf037bc3f11128c4", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ea7948dc54d6458adf654750c67d8d0ed4c055/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ea7948dc54d6458adf654750c67d8d0ed4c055/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=24ea7948dc54d6458adf654750c67d8d0ed4c055", "patch": "@@ -1465,6 +1465,8 @@ spill_xfmode_operand (rtx in, int force)\n /* Emit comparison instruction if necessary, returning the expression\n    that holds the compare result in the proper mode.  */\n \n+static GTY(()) rtx cmptf_libfunc;\n+\n rtx\n ia64_expand_compare (enum rtx_code code, enum machine_mode mode)\n {\n@@ -1480,6 +1482,59 @@ ia64_expand_compare (enum rtx_code code, enum machine_mode mode)\n       else\n \tabort ();\n     }\n+  /* HPUX TFmode compare requires a library call to _U_Qfcmp, which takes a\n+     magic number as its third argument, that indicates what to do.\n+     The return value is an integer to be compared against zero.  */\n+  else if (TARGET_HPUX && GET_MODE (op0) == TFmode)\n+    {\n+      enum qfcmp_magic {\n+\tQCMP_INV = 1,\t/* Raise FP_INVALID on SNaN as a side effect.  */\n+\tQCMP_UNORD = 2,\n+\tQCMP_EQ = 4,\n+\tQCMP_LT = 8,\n+\tQCMP_GT = 16\n+      } magic;\n+      enum rtx_code ncode;\n+      rtx ret, insns;\n+      if (GET_MODE (op1) != TFmode)\n+\tabort ();\n+      switch (code)\n+\t{\n+\t  /* 1 = equal, 0 = not equal.  Equality operators do\n+\t     not raise FP_INVALID when given an SNaN operand.  */\n+\tcase EQ:        magic = QCMP_EQ;                  ncode = NE; break;\n+\tcase NE:        magic = QCMP_EQ;                  ncode = EQ; break;\n+\t  /* isunordered() from C99.  */\n+\tcase UNORDERED: magic = QCMP_UNORD;               ncode = NE; break;\n+\t  /* Relational operators raise FP_INVALID when given\n+\t     an SNaN operand.  */\n+\tcase LT:        magic = QCMP_LT        |QCMP_INV; ncode = NE; break;\n+\tcase LE:        magic = QCMP_LT|QCMP_EQ|QCMP_INV; ncode = NE; break;\n+\tcase GT:        magic = QCMP_GT        |QCMP_INV; ncode = NE; break;\n+\tcase GE:        magic = QCMP_GT|QCMP_EQ|QCMP_INV; ncode = NE; break;\n+\t  /* FUTURE: Implement UNEQ, UNLT, UNLE, UNGT, UNGE, LTGT.\n+\t     Expanders for buneq etc. weuld have to be added to ia64.md\n+\t     for this to be useful.  */\n+\tdefault: abort ();\n+\t}\n+\n+      start_sequence ();\n+\n+      ret = emit_library_call_value (cmptf_libfunc, 0, LCT_CONST, DImode, 3,\n+\t\t\t\t     op0, TFmode, op1, TFmode,\n+\t\t\t\t     GEN_INT (magic), DImode);\n+      cmp = gen_reg_rtx (BImode);\n+      emit_insn (gen_rtx_SET (VOIDmode, cmp,\n+\t\t\t      gen_rtx_fmt_ee (ncode, BImode,\n+\t\t\t\t\t      ret, const0_rtx)));\n+\n+      insns = get_insns ();\n+      end_sequence ();\n+\n+      emit_libcall_block (insns, cmp, cmp,\n+\t\t\t  gen_rtx_fmt_ee (code, BImode, op0, op1));\n+      code = NE;\n+    }\n   else\n     {\n       cmp = gen_reg_rtx (BImode);\n@@ -8338,12 +8393,16 @@ ia64_hpux_init_libfuncs (void)\n   set_optab_libfunc (abs_optab, TFmode, \"_U_Qfabs\");\n   set_optab_libfunc (neg_optab, TFmode, \"_U_Qfneg\");\n \n-  set_optab_libfunc (eq_optab, TFmode, \"_U_Qfeq\");\n-  set_optab_libfunc (ne_optab, TFmode, \"_U_Qfne\");\n-  set_optab_libfunc (gt_optab, TFmode, \"_U_Qfgt\");\n-  set_optab_libfunc (ge_optab, TFmode, \"_U_Qfge\");\n-  set_optab_libfunc (lt_optab, TFmode, \"_U_Qflt\");\n-  set_optab_libfunc (le_optab, TFmode, \"_U_Qfle\");\n+  /* ia64_expand_compare uses this.  */\n+  cmptf_libfunc = init_one_libfunc (\"_U_Qfcmp\");\n+\n+  /* These should never be used.  */\n+  set_optab_libfunc (eq_optab, TFmode, 0);\n+  set_optab_libfunc (ne_optab, TFmode, 0);\n+  set_optab_libfunc (gt_optab, TFmode, 0);\n+  set_optab_libfunc (ge_optab, TFmode, 0);\n+  set_optab_libfunc (lt_optab, TFmode, 0);\n+  set_optab_libfunc (le_optab, TFmode, 0);\n \n   set_conv_libfunc (sext_optab,   TFmode, SFmode, \"_U_Qfcnvff_sgl_to_quad\");\n   set_conv_libfunc (sext_optab,   TFmode, DFmode, \"_U_Qfcnvff_dbl_to_quad\");"}, {"sha": "ddaff6ec7a9e2aeeb1d7178023cc9203d0493c1c", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ea7948dc54d6458adf654750c67d8d0ed4c055/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ea7948dc54d6458adf654750c67d8d0ed4c055/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=24ea7948dc54d6458adf654750c67d8d0ed4c055", "patch": "@@ -4484,6 +4484,17 @@\n   DONE;\n })\n \n+(define_expand \"cmptf\"\n+  [(set (cc0)\n+        (compare (match_operand:TF 0 \"gr_register_operand\" \"\")\n+  \t\t (match_operand:TF 1 \"gr_register_operand\" \"\")))]\n+  \"TARGET_HPUX\"\n+{\n+  ia64_compare_op0 = operands[0];\n+  ia64_compare_op1 = operands[1];\n+  DONE;\n+})\n+\n (define_insn \"*cmpsi_normal\"\n   [(set (match_operand:BI 0 \"register_operand\" \"=c\")\n \t(match_operator:BI 1 \"normal_comparison_operator\""}]}