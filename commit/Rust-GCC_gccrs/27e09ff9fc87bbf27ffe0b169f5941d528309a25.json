{"sha": "27e09ff9fc87bbf27ffe0b169f5941d528309a25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdlMDlmZjlmYzg3YmJmMjdmZmUwYjE2OWY1OTQxZDUyODMwOWEyNQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-30T22:02:09Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-30T22:02:09Z"}, "message": "In gcc/objc/: 2010-12-30 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2010-12-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc-act.c (objc_types_are_equivalent): Fixed comparing protocol\n\tlists.  Check them two-ways to fix comparisons when one protocol\n\timplements the other one, or when one list contains duplicated\n\tprotocols.\n\nIn gcc/testsuite/:\n2010-12-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/method-conflict-3.m: New.\n\t* objc.dg/method-conflict-4.m: New.\t\n\t* obj-c++.dg/method-conflict-3.m: New.\t\n\t* obj-c++.dg/method-conflict-4.mm: New.\n\nFrom-SVN: r168356", "tree": {"sha": "2b68cee452716cd6590c101e2bf623f31cc5738c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b68cee452716cd6590c101e2bf623f31cc5738c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27e09ff9fc87bbf27ffe0b169f5941d528309a25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e09ff9fc87bbf27ffe0b169f5941d528309a25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e09ff9fc87bbf27ffe0b169f5941d528309a25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e09ff9fc87bbf27ffe0b169f5941d528309a25/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8abf21313f8b26d07bc6772348096360df984e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8abf21313f8b26d07bc6772348096360df984e26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8abf21313f8b26d07bc6772348096360df984e26"}], "stats": {"total": 271, "additions": 264, "deletions": 7}, "files": [{"sha": "3edb54edb823dabb7226ddf9f378b471ffd55964", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=27e09ff9fc87bbf27ffe0b169f5941d528309a25", "patch": "@@ -1,3 +1,10 @@\n+2010-12-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (objc_types_are_equivalent): Fixed comparing protocol\n+\tlists.  Check them two-ways to fix comparisons when one protocol\n+\timplements the other one, or when one list contains duplicated\n+\tprotocols.\n+\n 2010-12-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (objc_add_method): When emitting an error because a"}, {"sha": "a37f3d91457cbf84539e0782b2e65ef7a5517951", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=27e09ff9fc87bbf27ffe0b169f5941d528309a25", "patch": "@@ -11925,9 +11925,8 @@ start_method_def (tree method)\n   really_start_method (objc_method_context, parm_info);\n }\n \n-/* Return 1 if TYPE1 is equivalent to TYPE2\n-   for purposes of method overloading.  */\n-\n+/* Return 1 if TYPE1 is equivalent to TYPE2 for purposes of method\n+   overloading.  */\n static int\n objc_types_are_equivalent (tree type1, tree type2)\n {\n@@ -11941,21 +11940,42 @@ objc_types_are_equivalent (tree type1, tree type2)\n   if (TYPE_MAIN_VARIANT (type1) != TYPE_MAIN_VARIANT (type2))\n     return 0;\n \n+  /* Compare the protocol lists.  */\n   type1 = (TYPE_HAS_OBJC_INFO (type1)\n \t   ? TYPE_OBJC_PROTOCOL_LIST (type1)\n \t   : NULL_TREE);\n   type2 = (TYPE_HAS_OBJC_INFO (type2)\n \t   ? TYPE_OBJC_PROTOCOL_LIST (type2)\n \t   : NULL_TREE);\n \n-  if (list_length (type1) == list_length (type2))\n+  /* If there are no protocols (most common case), the types are\n+     identical.  */\n+  if (type1 == NULL_TREE && type2 == NULL_TREE)\n+    return 1;\n+  \n+  /* If one has protocols, and the other one hasn't, they are not\n+     identical.  */\n+  if ((type1 == NULL_TREE && type2 != NULL_TREE)\n+      || (type1 != NULL_TREE && type2 == NULL_TREE))\n+    return 0;\n+  else\n     {\n-      for (; type2; type2 = TREE_CHAIN (type2))\n-\tif (!lookup_protocol_in_reflist (type1, TREE_VALUE (type2)))\n+      /* Else, both have protocols, and we need to do the full\n+\t comparison.  It is possible that either type1 or type2\n+\t contain some duplicate protocols in the list, so we can't\n+\t even just compare list_length as a first check.  */\n+      tree t;\n+\n+      for (t = type2; t; t = TREE_CHAIN (t))\n+\tif (!lookup_protocol_in_reflist (type1, TREE_VALUE (t)))\n+\t  return 0;\n+      \n+      for (t = type1; t; t = TREE_CHAIN (t))\n+\tif (!lookup_protocol_in_reflist (type2, TREE_VALUE (t)))\n \t  return 0;\n+      \n       return 1;\n     }\n-  return 0;\n }\n \n /* Return 1 if TYPE1 has the same size and alignment as TYPE2.  */"}, {"sha": "26bcf8c83b2ac9008592d9ae2052423a738279b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27e09ff9fc87bbf27ffe0b169f5941d528309a25", "patch": "@@ -1,3 +1,10 @@\n+2010-12-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/method-conflict-3.m: New.\n+\t* objc.dg/method-conflict-4.m: New.\t\n+\t* obj-c++.dg/method-conflict-3.m: New.\t\n+\t* obj-c++.dg/method-conflict-4.mm: New.\n+\n 2010-12-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n \t\n \t* objc.dg/class-extension-3.m: Updated."}, {"sha": "d4b6fbfd52670afdf960a51c554a8b8f21da1e2c", "filename": "gcc/testsuite/obj-c++.dg/method-conflict-3.mm", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-3.mm?ref=27e09ff9fc87bbf27ffe0b169f5941d528309a25", "patch": "@@ -0,0 +1,65 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, December 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that the compiler can correctly compare protocols in types of\n+   method signatures.  */\n+\n+@protocol A, B, C;\n+\n+@interface MyClass\n+- (void) method1: (id)x;\n+- (void) method1: (id)x; /* Ok */\n+\n+- (void) method2: (id <A>)x;\n+- (void) method2: (id <A>)x; /* Ok */\n+\n+- (void) method3: (id <A, B>)x;\n+- (void) method3: (id <A, B>)x; /* Ok */\n+\n+- (void) method4: (id <A, B>)x;\n+- (void) method4: (id <A, B, B>)x; /* Ok */\n+\n+- (void) method5: (id <A, A, B>)x;\n+- (void) method5: (id <A, B, B>)x; /* Ok */\n+\n+- (void) method6: (id <A, A, B, B, C, C>)x;\n+- (void) method6: (id <C, A, B>)x; /* Ok */\n+\n+- (void) method7: (id)x; /* { dg-warning \"previous declaration\" } */\n+- (void) method7: (id <A>)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) method8: (id <A>)x; /* { dg-warning \"previous declaration\" } */\n+- (void) method8: (id)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) method9: (id <A>)x; /* { dg-warning \"previous declaration\" } */\n+- (void) method9: (id <B>)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) methodA: (id <A>)x; /* { dg-warning \"previous declaration\" } */\n+- (void) methodA: (id <A, B>)x; /* { dg-error \"duplicate declaration\" } */\n+\n+/* FIXME: Bug in the testsuite - the following are done Ok by the compiler, but\n+   the testsuite barfs so we have to comment out the tests.  */\n+/* - (void) methodB: (id <A, B>)x; dg-warning \"previous declaration\" */\n+/* - (void) methodB: (id <A>)x; dg-error \"duplicate declaration\" */\n+\n+/* - (void) methodC: (id <A, B, C>)x;  dg-warning \"previous declaration\"  */\n+/* - (void) methodC: (id <A, B>)x;  dg-error \"duplicate declaration\"  */\n+\n+/* - (void) methodD: (id <A, B, C>)x;  dg-warning \"previous declaration\"  */\n+/* - (void) methodD: (id <A, B, A>)x;  dg-error \"duplicate declaration\"  */\n+\n+/* - (void) methodE: (MyClass <A, B, C> *)x;  dg-warning \"previous declaration\"  */\n+/* - (void) methodE: (MyClass <A, B, A> *)x;  dg-error \"duplicate declaration\"  */\n+\n+- (void) methodF: (MyClass <A, B, A> *)x;\n+- (void) methodF: (MyClass <A, B, A> *)x; /* Ok */\n+\n+/* - (void) methodG: (MyClass *)x;   dg-warning \"previous declaration\"  */\n+/* - (void) methodG: (MyClass <A, B, C> *)x;  dg-error \"duplicate declaration\"  */\n+\n+/* - (void) methodH: (MyClass <A, C>*)x;  dg-warning \"previous declaration\"  */\n+/* - (void) methodH: (MyClass *)x;  dg-error \"duplicate declaration\"  */\n+\n+@end"}, {"sha": "103134116e2957e3792412d864f50fff59118767", "filename": "gcc/testsuite/obj-c++.dg/method-conflict-4.mm", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-4.mm?ref=27e09ff9fc87bbf27ffe0b169f5941d528309a25", "patch": "@@ -0,0 +1,48 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, December 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that the compiler can correctly compare protocols in types of\n+   method signatures.  In this test we look at protocols implementing\n+   other protocols.  The fact that one protocol implements another one\n+   doesn't mean that they are identical.  */\n+\n+@protocol A\n+- (void) doSomething;\n+@end\n+\n+@protocol B <A>\n+- (void) doSomethingElse;\n+@end\n+\n+@protocol C <A>\n+- (void) doYetSomethingElse;\n+@end\n+\n+@interface MyClass2\n+- (void) aMethod: (id <A>)x;  /* { dg-error \"previous declaration\" } */\n+- (void) aMethod: (id <B>)x;  /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) bMethod: (id <B>)x;  /* { dg-error \"previous declaration\" } */\n+- (void) bMethod: (id <A>)x;  /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) cMethod: (id <A, B>)x;\n+- (void) cMethod: (id <B>)x;  /* Ok - because if you implement B, then you also implement A, so <B> == <A, B> */\n+\n+- (void) dMethod: (id <A, B>)x;\n+- (void) dMethod: (id <B, A>)x; /* Ok */\n+\n+/* FIXME: The compiler works, but the testsuite produces errors anyway.  */\n+/* - (void) eMethod: (id <A>)x;   dg-error \"previous declaration\"  */\n+/* - (void) eMethod: (id <B, C>)x;   dg-error \"duplicate declaration\"  */\n+\n+/*- (void) fMethod: (id <B, C>)x;   dg-error \"previous declaration\"  */\n+/*- (void) fMethod: (id <A>)x;   dg-error \"duplicate declaration\"  */\n+\n+/* - (void) gMethod: (id <A>)x;   dg-error \"previous declaration\" */\n+/* - (void) gMethod: (id <A, B, C>)x;   dg-error \"duplicate declaration\" */\n+\n+/* - (void) hMethod: (id <A, B, C>)x;   dg-error \"previous declaration\" */\n+/* - (void) hMethod: (id <A>)x;   dg-error \"duplicate declaration\" */\n+@end"}, {"sha": "cc4d2631fa271f0b494577192a4f39b15be88502", "filename": "gcc/testsuite/objc.dg/method-conflict-3.m", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-conflict-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-conflict-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-conflict-3.m?ref=27e09ff9fc87bbf27ffe0b169f5941d528309a25", "patch": "@@ -0,0 +1,63 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, December 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that the compiler can correctly compare protocols in types of\n+   method signatures.  */\n+\n+@protocol A, B, C;\n+\n+@interface MyClass\n+- (void) method1: (id)x;\n+- (void) method1: (id)x; /* Ok */\n+\n+- (void) method2: (id <A>)x;\n+- (void) method2: (id <A>)x; /* Ok */\n+\n+- (void) method3: (id <A, B>)x;\n+- (void) method3: (id <A, B>)x; /* Ok */\n+\n+- (void) method4: (id <A, B>)x;\n+- (void) method4: (id <A, B, B>)x; /* Ok */\n+\n+- (void) method5: (id <A, A, B>)x;\n+- (void) method5: (id <A, B, B>)x; /* Ok */\n+\n+- (void) method6: (id <A, A, B, B, C, C>)x;\n+- (void) method6: (id <C, A, B>)x; /* Ok */\n+\n+- (void) method7: (id)x; /* { dg-message \"previous declaration\" } */\n+- (void) method7: (id <A>)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) method8: (id <A>)x; /* { dg-message \"previous declaration\" } */\n+- (void) method8: (id)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) method9: (id <A>)x; /* { dg-message \"previous declaration\" } */\n+- (void) method9: (id <B>)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) methodA: (id <A>)x; /* { dg-message \"previous declaration\" } */\n+- (void) methodA: (id <A, B>)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) methodB: (id <A, B>)x; /* { dg-message \"previous declaration\" } */\n+- (void) methodB: (id <A>)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) methodC: (id <A, B, C>)x; /* { dg-message \"previous declaration\" } */\n+- (void) methodC: (id <A, B>)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) methodD: (id <A, B, C>)x; /* { dg-message \"previous declaration\" } */\n+- (void) methodD: (id <A, B, A>)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) methodE: (MyClass <A, B, C> *)x; /* { dg-message \"previous declaration\" } */\n+- (void) methodE: (MyClass <A, B, A> *)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) methodF: (MyClass <A, B, A> *)x;\n+- (void) methodF: (MyClass <A, B, A> *)x; /* Ok */\n+\n+- (void) methodG: (MyClass *)x;  /* { dg-message \"previous declaration\" } */\n+- (void) methodG: (MyClass <A, B, C> *)x; /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) methodH: (MyClass <A, C>*)x;  /* { dg-message \"previous declaration\" } */\n+- (void) methodH: (MyClass *)x; /* { dg-error \"duplicate declaration\" } */\n+\n+@end"}, {"sha": "a0c278294d83c3c2f15b0299494de3fd535f47bb", "filename": "gcc/testsuite/objc.dg/method-conflict-4.m", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-conflict-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e09ff9fc87bbf27ffe0b169f5941d528309a25/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-conflict-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-conflict-4.m?ref=27e09ff9fc87bbf27ffe0b169f5941d528309a25", "patch": "@@ -0,0 +1,47 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, December 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that the compiler can correctly compare protocols in types of\n+   method signatures.  In this test we look at protocols implementing\n+   other protocols.  The fact that one protocol implements another one\n+   doesn't mean that they are identical.  */\n+\n+@protocol A\n+- (void) doSomething;\n+@end\n+\n+@protocol B <A>\n+- (void) doSomethingElse;\n+@end\n+\n+@protocol C <A>\n+- (void) doYetSomethingElse;\n+@end\n+\n+@interface MyClass2\n+- (void) aMethod: (id <A>)x;  /* { dg-message \"previous declaration\" } */\n+- (void) aMethod: (id <B>)x;  /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) bMethod: (id <B>)x;  /* { dg-message \"previous declaration\" } */\n+- (void) bMethod: (id <A>)x;  /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) cMethod: (id <A, B>)x;\n+- (void) cMethod: (id <B>)x;  /* Ok - because if you implement B, then you also implement A, so <B> == <A, B> */\n+\n+- (void) dMethod: (id <A, B>)x;\n+- (void) dMethod: (id <B, A>)x; /* Ok */\n+\n+- (void) eMethod: (id <A>)x;  /* { dg-message \"previous declaration\" } */\n+- (void) eMethod: (id <B, C>)x;  /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) fMethod: (id <B, C>)x;  /* { dg-message \"previous declaration\" } */\n+- (void) fMethod: (id <A>)x;  /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) gMethod: (id <A>)x;  /* { dg-message \"previous declaration\" } */\n+- (void) gMethod: (id <A, B, C>)x;  /* { dg-error \"duplicate declaration\" } */\n+\n+- (void) hMethod: (id <A, B, C>)x;  /* { dg-message \"previous declaration\" } */\n+- (void) hMethod: (id <A>)x;  /* { dg-error \"duplicate declaration\" } */\n+@end"}]}