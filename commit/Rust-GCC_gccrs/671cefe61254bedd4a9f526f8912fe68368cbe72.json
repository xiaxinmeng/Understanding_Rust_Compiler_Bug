{"sha": "671cefe61254bedd4a9f526f8912fe68368cbe72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcxY2VmZTYxMjU0YmVkZDRhOWY1MjZmODkxMmZlNjgzNjhjYmU3Mg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-12-18T17:27:03Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-12-19T19:33:03Z"}, "message": "When compiling a block it might reference a GIMPLE node that is not\nresolved yet. Such as:\n\nfn main() -> i32 { call() }\nfn call() -> i32 { return 1; }\n\nThe compilation pass acts on the first function main and detects the other\nnode call is not compiled yet we can go resolve it. This is a toplevel\nitem since it has a local_def_id and therefore it has a NULL enclosing\nscope for the block.\n\nFixes #72", "tree": {"sha": "305dcbbfb8e5e8336dafd02699f8a4f87c19df27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/305dcbbfb8e5e8336dafd02699f8a4f87c19df27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/671cefe61254bedd4a9f526f8912fe68368cbe72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671cefe61254bedd4a9f526f8912fe68368cbe72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/671cefe61254bedd4a9f526f8912fe68368cbe72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671cefe61254bedd4a9f526f8912fe68368cbe72/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a10d1f15969f94c3d3bc836db1d75dd0f914aa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a10d1f15969f94c3d3bc836db1d75dd0f914aa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a10d1f15969f94c3d3bc836db1d75dd0f914aa9"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "f131a89ab84d9051680fb40d30a93c91f29c5d89", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671cefe61254bedd4a9f526f8912fe68368cbe72/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671cefe61254bedd4a9f526f8912fe68368cbe72/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=671cefe61254bedd4a9f526f8912fe68368cbe72", "patch": "@@ -48,11 +48,7 @@ class CompileItem : public HIRCompileBase\n       {\n \t// has this been added to the list then it must be finished\n \tif (ctx->function_completed (lookup))\n-\t  {\n-\t    printf (\"returning early the function [%s] is completed!\\n\",\n-\t\t    function.as_string ().c_str ());\n-\t    return;\n-\t  }\n+\t  return;\n       }\n \n     TyTy::TyBase *fnType;\n@@ -123,9 +119,12 @@ class CompileItem : public HIRCompileBase\n       return true;\n     });\n \n-    Bblock *enclosing_scope = ctx->peek_enclosing_scope ();\n-    HIR::BlockExpr *function_body = function.function_body.get ();\n+    bool toplevel_item\n+      = function.get_mappings ().get_local_defid () != UNKNOWN_LOCAL_DEFID;\n+    Bblock *enclosing_scope\n+      = toplevel_item ? NULL : ctx->peek_enclosing_scope ();\n \n+    HIR::BlockExpr *function_body = function.function_body.get ();\n     Location start_location = function_body->get_locus ();\n     Location end_location = function_body->get_closing_locus ();\n "}, {"sha": "c5c646db1e3ce44f0e7db7d30e28f475e956c89a", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671cefe61254bedd4a9f526f8912fe68368cbe72/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671cefe61254bedd4a9f526f8912fe68368cbe72/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=671cefe61254bedd4a9f526f8912fe68368cbe72", "patch": "@@ -36,10 +36,6 @@ ResolvePath::visit (HIR::PathInExpression &expr)\n       return;\n     }\n \n-  printf (\"PATHIN have ast node id %u ref %u for expr [%s]\\n\",\n-\t  expr.get_mappings ().get_nodeid (), ref_node_id,\n-\t  expr.as_string ().c_str ());\n-\n   HirId ref;\n   if (!ctx->get_mappings ()->lookup_node_to_hir (\n \texpr.get_mappings ().get_crate_num (), ref_node_id, &ref))\n@@ -52,9 +48,6 @@ ResolvePath::visit (HIR::PathInExpression &expr)\n   Bfunction *fn;\n   if (!ctx->lookup_function_decl (ref, &fn))\n     {\n-      printf (\n-\t\"path failed to lookup function attempting to forward resolve!\\n\");\n-\n       // this might fail because its a forward decl so we can attempt to\n       // resolve it now\n       HIR::Item *resolved_item = ctx->get_mappings ()->lookup_hir_item ("}, {"sha": "a69c07eac43032ee04398d267e8c57ba6575ec59", "filename": "gcc/testsuite/rust.test/compilable/forward_decl_1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671cefe61254bedd4a9f526f8912fe68368cbe72/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fforward_decl_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671cefe61254bedd4a9f526f8912fe68368cbe72/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fforward_decl_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fforward_decl_1.rs?ref=671cefe61254bedd4a9f526f8912fe68368cbe72", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let mut an_integer = 5;\n+    an_integer = test(1) + 3;\n+\n+    let call_test = test(1);\n+}\n+\n+fn test(x: i32) -> i32 {\n+    return x + 1;\n+}"}]}