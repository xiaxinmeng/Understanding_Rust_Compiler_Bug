{"sha": "36a60e48f4eac678cdcf0c59c0f01b9f58c7d900", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZhNjBlNDhmNGVhYzY3OGNkY2YwYzU5YzBmMDFiOWY1OGM3ZDkwMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-10-30T13:13:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-10-30T13:13:35Z"}, "message": "match.pd: Implement more patterns that simplify to a single value.\n\n2014-10-30  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd: Implement more patterns that simplify to a single value.\n\t* fold-const.c (fold_binary_loc): Remove them here.\n\t* tree-ssa-forwprop.c (simplify_bitwise_binary): Likewise.\n\t(fwprop_ssa_val): Remove restriction on single uses.\n\nFrom-SVN: r216933", "tree": {"sha": "503ff6868c680195720861d2ad6beb4789e69889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/503ff6868c680195720861d2ad6beb4789e69889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6327f612fd6631094742bdb4e4999a48bd376382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6327f612fd6631094742bdb4e4999a48bd376382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6327f612fd6631094742bdb4e4999a48bd376382"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "a123f9599fe05d0d85287339c013ffafd33a4249", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36a60e48f4eac678cdcf0c59c0f01b9f58c7d900", "patch": "@@ -1,3 +1,10 @@\n+2014-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd: Implement more patterns that simplify to a single value.\n+\t* fold-const.c (fold_binary_loc): Remove them here.\n+\t* tree-ssa-forwprop.c (simplify_bitwise_binary): Likewise.\n+\t(fwprop_ssa_val): Remove restriction on single uses.\n+\n 2014-10-30  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config/avr/driver-avr.c (avr_set_current_device): Remove."}, {"sha": "625829545478e81a30f682eb1319bd14a47252a3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=36a60e48f4eac678cdcf0c59c0f01b9f58c7d900", "patch": "@@ -11089,9 +11089,6 @@ fold_binary_loc (location_t loc,\n \n     case BIT_IOR_EXPR:\n     bit_ior:\n-      if (operand_equal_p (arg0, arg1, 0))\n-\treturn non_lvalue_loc (loc, fold_convert_loc (loc, type, arg0));\n-\n       /* ~X | X is -1.  */\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n@@ -11227,9 +11224,6 @@ fold_binary_loc (location_t loc,\n       goto bit_rotate;\n \n     case BIT_XOR_EXPR:\n-      if (integer_all_onesp (arg1))\n-\treturn fold_build1_loc (loc, BIT_NOT_EXPR, type, op0);\n-\n       /* ~X ^ X is -1.  */\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n@@ -11384,11 +11378,6 @@ fold_binary_loc (location_t loc,\n       goto bit_rotate;\n \n     case BIT_AND_EXPR:\n-      if (integer_all_onesp (arg1))\n-\treturn non_lvalue_loc (loc, fold_convert_loc (loc, type, arg0));\n-      if (operand_equal_p (arg0, arg1, 0))\n-\treturn non_lvalue_loc (loc, fold_convert_loc (loc, type, arg0));\n-\n       /* ~X & X, (X == 0) & X, and !X & X are always zero.  */\n       if ((TREE_CODE (arg0) == BIT_NOT_EXPR\n \t   || TREE_CODE (arg0) == TRUTH_NOT_EXPR"}, {"sha": "2057dccba46f164ff0c0a7e7b97e5a66ba0af31a", "filename": "gcc/match.pd", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=36a60e48f4eac678cdcf0c59c0f01b9f58c7d900", "patch": "@@ -31,7 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n \n \n /* Simplifications of operations with one constant operand and\n-   simplifications to constants.  */\n+   simplifications to constants or single values.  */\n \n (for op (plus pointer_plus minus bit_ior bit_xor)\n   (simplify\n@@ -88,6 +88,22 @@ along with GCC; see the file COPYING3.  If not see\n   (bit_xor @0 @0)\n   { build_zero_cst (type); })\n \n+/* Canonicalize X ^ ~0 to ~X.  */\n+(simplify\n+  (bit_xor @0 integer_all_onesp@1)\n+  (bit_not @0))\n+\n+/* x & ~0 -> x  */\n+(simplify\n+ (bit_and @0 integer_all_onesp)\n+  (non_lvalue @0))\n+\n+/* x & x -> x,  x | x -> x  */\n+(for bitop (bit_and bit_ior)\n+ (simplify\n+  (bitop @0 @0)\n+  (non_lvalue @0)))\n+\n \n /* Simplifications of conversions.  */\n "}, {"sha": "d67a4b648afc9b4869ed7860a3b99fc7b3ebe346", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a60e48f4eac678cdcf0c59c0f01b9f58c7d900/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=36a60e48f4eac678cdcf0c59c0f01b9f58c7d900", "patch": "@@ -2097,16 +2097,6 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n       return true;\n     }\n \n-  /* Canonicalize X ^ ~0 to ~X.  */\n-  if (code == BIT_XOR_EXPR\n-      && integer_all_onesp (arg2))\n-    {\n-      gimple_assign_set_rhs_with_ops (gsi, BIT_NOT_EXPR, arg1, NULL_TREE);\n-      gcc_assert (gsi_stmt (*gsi) == stmt);\n-      update_stmt (stmt);\n-      return true;\n-    }\n-\n   /* Try simple folding for X op !X, and X op X.  */\n   res = simplify_bitwise_binary_1 (code, TREE_TYPE (arg1), arg1, arg2);\n   if (res != NULL_TREE)\n@@ -3554,11 +3544,9 @@ fwprop_ssa_val (tree name)\n       if (val)\n \tname = val;\n     }\n-  /* If NAME is not the only use signal we don't want to continue\n-     matching into its definition.  */\n-  if (TREE_CODE (name) == SSA_NAME\n-      && !has_single_use (name))\n-    return NULL_TREE;\n+  /* We continue matching along SSA use-def edges for SSA names\n+     that are not single-use.  Currently there are no patterns\n+     that would cause any issues with that.  */\n   return name;\n }\n "}]}