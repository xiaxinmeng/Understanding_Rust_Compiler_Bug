{"sha": "cd4b47a9f7db20197bbe25cb60c9a8d8ef46de71", "node_id": "C_kwDOANBUbNoAKGNkNGI0N2E5ZjdkYjIwMTk3YmJlMjVjYjYwYzlhOGQ4ZWY0NmRlNzE", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-11-19T17:01:21Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-22T12:34:51Z"}, "message": "ada: Fix recent assertion failure on GPR2\n\nIt's the compiler trying to load the nonexistent body of a generic package\nwhen trying to inline a call to an expression function of this package that\nhas a pre or post-condition (hence the need for -gnata to trigger the ICE).\n\ngcc/ada/\n\n\t* contracts.adb (Build_Subprogram_Contract_Wrapper): Do not fiddle\n\twith the Was_Expression_Function flag. Move a few lines around.", "tree": {"sha": "5d29d3c79dbb4a2cc0b80bee4ccb5d0cc1900963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d29d3c79dbb4a2cc0b80bee4ccb5d0cc1900963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd4b47a9f7db20197bbe25cb60c9a8d8ef46de71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4b47a9f7db20197bbe25cb60c9a8d8ef46de71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd4b47a9f7db20197bbe25cb60c9a8d8ef46de71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4b47a9f7db20197bbe25cb60c9a8d8ef46de71/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4faee8d02ec5d65bf418612f7181823eb08c078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4faee8d02ec5d65bf418612f7181823eb08c078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4faee8d02ec5d65bf418612f7181823eb08c078"}], "stats": {"total": 18, "additions": 4, "deletions": 14}, "files": [{"sha": "6f474eb2944917a8523fcc0aaf895b64b7fe8cf5", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4b47a9f7db20197bbe25cb60c9a8d8ef46de71/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4b47a9f7db20197bbe25cb60c9a8d8ef46de71/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=cd4b47a9f7db20197bbe25cb60c9a8d8ef46de71", "patch": "@@ -1691,6 +1691,10 @@ package body Contracts is\n       Set_Debug_Info_Needed  (Wrapper_Id);\n       Set_Wrapped_Statements (Subp_Id, Wrapper_Id);\n \n+      Set_Has_Pragma_Inline (Wrapper_Id, Has_Pragma_Inline (Subp_Id));\n+      Set_Has_Pragma_Inline_Always\n+        (Wrapper_Id, Has_Pragma_Inline_Always (Subp_Id));\n+\n       --  Create specification and declaration for the wrapper\n \n       if No (Ret_Type) or else Ret_Type = Standard_Void_Type then\n@@ -1719,20 +1723,6 @@ package body Contracts is\n         Make_Handled_Sequence_Of_Statements (Loc,\n           End_Label  => Make_Identifier (Loc, Chars (Wrapper_Id))));\n \n-      --  Move certain flags which are relevant to the body\n-\n-      --  Wouldn't a better way be to perform some sort of copy of Body_Decl\n-      --  for Wrapper_Body be less error-prone ???\n-\n-      if Was_Expression_Function (Body_Decl) then\n-         Set_Was_Expression_Function (Body_Decl, False);\n-         Set_Was_Expression_Function (Wrapper_Body);\n-      end if;\n-\n-      Set_Has_Pragma_Inline (Wrapper_Id, Has_Pragma_Inline (Subp_Id));\n-      Set_Has_Pragma_Inline_Always\n-        (Wrapper_Id, Has_Pragma_Inline_Always (Subp_Id));\n-\n       --  Prepend a call to the wrapper when the subprogram is a procedure\n \n       if No (Ret_Type) or else Ret_Type = Standard_Void_Type then"}]}