{"sha": "4cb7482c3ae0a089a988a648c562e0c7f2ecbe98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNiNzQ4MmMzYWUwYTA4OWE5ODhhNjQ4YzU2MmUwYzdmMmVjYmU5OA==", "commit": {"author": {"name": "Matthew Green", "email": "mrg@eterna.com.au", "date": "2002-02-19T17:43:25Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-02-19T17:43:25Z"}, "message": "config.gcc (sparc-*-netbsdelf*): Enable target.\n\n2002-02-19  matthew green  <mrg@eterna.com.au>\n\n* config.gcc (sparc-*-netbsdelf*): Enable target.\n(sparc64-*-netbsd*): New target.\n* config/sparc/netbsd-elf.h: New file.\n* config/sparc/t-netbsd64: New file.\n\nFrom-SVN: r49870", "tree": {"sha": "417f06459027ac8d063e2aebce789b0443281577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/417f06459027ac8d063e2aebce789b0443281577"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98/comments", "author": {"login": "mrgtwentythree", "id": 61165273, "node_id": "MDQ6VXNlcjYxMTY1Mjcz", "avatar_url": "https://avatars.githubusercontent.com/u/61165273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrgtwentythree", "html_url": "https://github.com/mrgtwentythree", "followers_url": "https://api.github.com/users/mrgtwentythree/followers", "following_url": "https://api.github.com/users/mrgtwentythree/following{/other_user}", "gists_url": "https://api.github.com/users/mrgtwentythree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrgtwentythree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrgtwentythree/subscriptions", "organizations_url": "https://api.github.com/users/mrgtwentythree/orgs", "repos_url": "https://api.github.com/users/mrgtwentythree/repos", "events_url": "https://api.github.com/users/mrgtwentythree/events{/privacy}", "received_events_url": "https://api.github.com/users/mrgtwentythree/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2df3a718da195deeb988d15f540f522b9e4a54cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df3a718da195deeb988d15f540f522b9e4a54cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df3a718da195deeb988d15f540f522b9e4a54cb"}], "stats": {"total": 357, "additions": 356, "deletions": 1}, "files": [{"sha": "b87e206abd3a1c4e6b8413cb37f23b7eef618725", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cb7482c3ae0a089a988a648c562e0c7f2ecbe98", "patch": "@@ -1,3 +1,10 @@\n+2002-02-19  matthew green  <mrg@eterna.com.au>\n+\n+\t* config.gcc (sparc-*-netbsdelf*): Enable target.\n+\t(sparc64-*-netbsd*): New target.\n+\t* config/sparc/netbsd-elf.h: New file.\n+\t* config/sparc/t-netbsd64: New file.\n+\n 2002-02-19  Gaute B Strokkenes <gs234@cam.ac.uk>\n \n \t* doc/rtl.texi (Flags, MEM_SCALAR_P): Fix typo."}, {"sha": "a7a9922905eddb1d6aeb4e8e87207b60e6cb95f1", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4cb7482c3ae0a089a988a648c562e0c7f2ecbe98", "patch": "@@ -2982,7 +2982,7 @@ sparc-*-aout*)\n \ttm_file=\"sparc/sparc.h aoutos.h sparc/aout.h libgloss.h\"\n \t;;\n sparc-*-netbsdelf*)\n-\techo \"GCC does not yet support the ${machine} target\"; exit 1\n+\ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h netbsd.h netbsd-elf.h sparc/netbsd-elf.h\"\n \t;;\n sparc-*-netbsd*)\n \ttm_file=\"${tm_file} sparc/aout.h netbsd.h netbsd-aout.h sparc/netbsd.h\"\n@@ -3243,6 +3243,12 @@ sparc64-*-linux*)\t\t# 64-bit Sparc's running GNU/Linux\n \tfi\n \tfloat_format=sparc\n \t;;\n+sparc64-*-netbsd*)\n+\ttmake_file=\"${tmake_file} sparc/t-netbsd64\"\n+\ttm_file=\"sparc/biarch64.h ${tm_file}\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h netbsd.h netbsd-elf.h sparc/netbsd-elf.h\"\n+\tfloat_format=sparc\n+\t;;\n strongarm-*-elf*)\n \ttm_file=\"arm/strongarm-elf.h dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h\"\n \ttmake_file=arm/t-strongarm-elf"}, {"sha": "280ec3896d74f397110694a125c96306636cf9a6", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "added", "additions": 336, "deletions": 0, "changes": 336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=4cb7482c3ae0a089a988a648c562e0c7f2ecbe98", "patch": "@@ -0,0 +1,336 @@\n+/* Definitions of target machine for GNU compiler, for ELF on NetBSD/sparc\n+   and NetBSD/sparc64.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Matthew Green (mrg@eterna.com.au).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Make sure these are undefined.  */\n+#undef MD_EXEC_PREFIX\n+#undef MD_STARTFILE_PREFIX\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-D__sparc__ -D__NetBSD__ -D__ELF__ \\\n+-Asystem=unix -Asystem=NetBSD\"\n+\n+/* CPP defines used for 64 bit code.  */\n+#undef CPP_SUBTARGET_SPEC64\n+#define CPP_SUBTARGET_SPEC64 \\\n+  \"-D__sparc64__ -D__arch64__ -D__sparc_v9__ %{posix:-D_POSIX_SOURCE}\"\n+\n+/* CPP defines used for 32 bit code.  */\n+#undef CPP_SUBTARGET_SPEC32\n+#define CPP_SUBTARGET_SPEC32 \"-D__sparc %{posix:-D_POSIX_SOURCE}\"\n+\n+/* SIZE_TYPE and PTRDIFF_TYPE are wrong from sparc/sparc.h.  */\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"long unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+\n+/* This is the char to use for continuation (in case we need to turn\n+   continuation back on).  */\n+#undef DBX_CONTIN_CHAR\n+#define DBX_CONTIN_CHAR '?'\n+\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(REGNO) \\\n+  (TARGET_FLAT && REGNO == HARD_FRAME_POINTER_REGNUM ? 31 : REGNO)\n+\n+/* This is how to output a definition of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#undef  ASM_OUTPUT_INTERNAL_LABEL\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \".L%s%d:\\n\", PREFIX, NUM)\n+\n+/* This is how to output a reference to an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#undef  ASM_OUTPUT_INTERNAL_LABELREF\n+#define ASM_OUTPUT_INTERNAL_LABELREF(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \".L%s%d\", PREFIX, NUM)\n+\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#undef  ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n+  sprintf ((LABEL), \"*.L%s%ld\", (PREFIX), (long)(NUM))\n+\n+#undef USER_LABEL_PREFIX\n+#define USER_LABEL_PREFIX \"\"\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"%{fpic:-K PIC} %{fPIC:-K PIC} %{V} %{v:%{!V:-V}} \\\n+%{mlittle-endian:-EL} \\\n+%(asm_cpu) %(asm_arch) %(asm_relax)\"\n+\n+#undef STDC_0_IN_SYSTEM_HEADERS\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (%s)\", TARGET_NAME);\n+\n+/*\n+ * Clean up afterwards generic SPARC ELF configuration.\n+ */\n+\n+#undef TRANSFER_FROM_TRAMPOLINE\n+#define TRANSFER_FROM_TRAMPOLINE\n+\n+/* FIXME: Aren't these supposed to be available for SPARC ELF?  */\n+#undef MULDI3_LIBCALL\n+#undef DIVDI3_LIBCALL\n+#undef UDIVDI3_LIBCALL\n+#undef MODDI3_LIBCALL\n+#undef UMODDI3_LIBCALL\n+#undef INIT_SUBTARGET_OPTABS  \n+#define INIT_SUBTARGET_OPTABS  \n+\n+/* Below here exists the merged NetBSD/sparc & NetBSD/sparc64 compiler\n+   description, allowing one to build 32 bit or 64 bit applications\n+   on either.  We define the sparc & sparc64 versions of things,\n+   occasionally a neutral version (should be the same as \"netbsd-elf.h\")\n+   and then based on SPARC_BI_ARCH, DEFAULT_ARCH32_P, and TARGET_CPU_DEFAULT,\n+   we choose the correct version.  */\n+\n+/* We use the default NetBSD ELF STARTFILE_SPEC and ENDFILE_SPEC\n+   definitions, even for the SPARC_BI_ARCH compiler, because NetBSD does\n+   not have a default place to find these libraries..  */\n+\n+/* Name the port(s).  */\n+#define TARGET_NAME64     \"NetBSD/sparc64 ELF\"\n+#define TARGET_NAME32     \"NetBSD/sparc ELF\"\n+\n+/* TARGET_CPU_DEFAULT is set in Makefile.in.  We test for 64-bit default\n+   platform here.  */\n+\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_v9 \\\n+ || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc\n+/* A 64 bit v9 compiler with stack-bias,\n+   in a Medium/Low code model environment.  */\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT \\\n+  (MASK_V9 + MASK_PTR64 + MASK_64BIT /* + MASK_HARD_QUAD */ \\\n+ + MASK_STACK_BIAS + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU \\\n+ + MASK_LONG_DOUBLE_128)\n+\n+#undef SPARC_DEFAULT_CMODEL\n+#define SPARC_DEFAULT_CMODEL CM_MEDANY\n+\n+#endif\n+\n+/* CC1_SPEC for NetBSD/sparc.  */\n+#define CC1_SPEC32 \\\n+ \"%{sun4:} %{target:} \\\n+  %{mcypress:-mcpu=cypress} \\\n+  %{msparclite:-mcpu=sparclite} %{mf930:-mcpu=f930} %{mf934:-mcpu=f934} \\\n+  %{mv8:-mcpu=v8} %{msupersparc:-mcpu=supersparc} \\\n+  %{m64: \\\n+    -mptr64 -mstack-bias -mno-v8plus -mlong-double-128 \\\n+    %{!mcpu*: \\\n+      %{!mcypress: \\\n+        %{!msparclite: \\\n+\t  %{!mf930: \\\n+\t    %{!mf934: \\\n+\t      %{!mv8*: \\\n+\t        %{!msupersparc:-mcpu=ultrasparc}}}}}}} \\\n+    %{!mno-vis:%{!mcpu=v9:-mvis}} \\\n+    %{p:-mcmodel=medlow} \\\n+    %{pg:-mcmodel=medlow}}\"\n+\n+#define CC1_SPEC64 \\\n+ \"%{sun4:} %{target:} \\\n+  %{mcypress:-mcpu=cypress} \\\n+  %{msparclite:-mcpu=sparclite} %{mf930:-mcpu=f930} %{mf934:-mcpu=f934} \\\n+  %{mv8:-mcpu=v8} %{msupersparc:-mcpu=supersparc} \\\n+  %{m32: \\\n+    -mptr32 -mno-stack-bias \\\n+    %{!mlong-double-128:-mlong-double-64} \\\n+    %{!mcpu*: \\\n+      %{!mcypress: \\\n+\t%{!msparclite: \\\n+\t  %{!mf930: \\\n+\t    %{!mf934: \\\n+\t      %{!mv8*: \\\n+\t\t%{!msupersparc:-mcpu=cypress}}}}}}}} \\\n+  %{!m32: \\\n+    %{p:-mcmodel=medlow} \\\n+    %{pg:-mcmodel=medlow}}\"\n+\n+/* Make sure we use the right output format.  Pick a default and then\n+   make sure -m32/-m64 switch to the right one.  */\n+\n+#define LINK_ARCH32_SPEC \\\n+ \"%-m elf32_sparc \\\n+  %{assert*} %{R*} %{V} %{v:%{!V:-V}} \\\n+  %{shared:-shared} \\\n+  %{!shared: \\\n+    -dp \\\n+    %{!nostdlib:%{!r*:%{!e*:-e __start}}} \\\n+    %{!static: \\\n+      -dy %{rdynamic:-export-dynamic} \\\n+      %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}} \\\n+    %{static:-static}}\"\n+\n+#define LINK_ARCH64_SPEC \\\n+ \"%-m elf64_sparc \\\n+  %{assert*} %{R*} %{V} %{v:%{!V:-V}} \\\n+  %{shared:-shared} \\\n+  %{!shared: \\\n+    -dp \\\n+    %{!nostdlib:%{!r*:%{!e*:-e __start}}} \\\n+    %{!static: \\\n+      -dy %{rdynamic:-export-dynamic} \\\n+      %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}} \\\n+    %{static:-static}}\"\n+\n+#define LINK_ARCH_SPEC \"\\\n+%{m32:%(link_arch32)} \\\n+%{m64:%(link_arch64)} \\\n+%{!m32:%{!m64:%(link_arch_default)}} \\\n+\"\n+\n+#if DEFAULT_ARCH32_P\n+#define LINK_ARCH_DEFAULT_SPEC LINK_ARCH32_SPEC\n+#else\n+#define LINK_ARCH_DEFAULT_SPEC LINK_ARCH64_SPEC\n+#endif\n+\n+/* What extra spec entries do we need?  */\n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS \\\n+  { \"link_arch32\",\t\tLINK_ARCH32_SPEC }, \\\n+  { \"link_arch64\",\t\tLINK_ARCH64_SPEC }, \\\n+  { \"link_arch_default\",\tLINK_ARCH_DEFAULT_SPEC }, \\\n+  { \"link_arch\",\t\tLINK_ARCH_SPEC }, \\\n+  { \"cpp_subtarget_spec32\",\tCPP_SUBTARGET_SPEC32 }, \\\n+  { \"cpp_subtarget_spec64\",\tCPP_SUBTARGET_SPEC64 },\n+\n+\n+/* What extra switches do we need?  */\n+#undef  SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \\\n+  {\"long-double-64\", -MASK_LONG_DOUBLE_128, N_(\"Use 64 bit long doubles\") }, \\\n+  {\"long-double-128\", MASK_LONG_DOUBLE_128, N_(\"Use 128 bit long doubles\") },\n+\n+\n+/* Build a compiler that supports -m32 and -m64?  */\n+\n+#ifdef SPARC_BI_ARCH\n+\n+#undef LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n+\n+#undef MAX_LONG_DOUBLE_TYPE_SIZE\n+#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n+\n+#if defined(__arch64__) || defined(__LONG_DOUBLE_128__)\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n+#else\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n+#endif\n+\n+#undef  CC1_SPEC\n+#if DEFAULT_ARCH32_P\n+#define CC1_SPEC CC1_SPEC32\n+#else\n+#define CC1_SPEC CC1_SPEC64\n+#endif\n+\n+#if DEFAULT_ARCH32_P\n+#define MULTILIB_DEFAULTS { \"m32\" }\n+#else\n+#define MULTILIB_DEFAULTS { \"m64\" }\n+#endif\n+\n+#undef CPP_SUBTARGET_SPEC\n+#if DEFAULT_ARCH32_P\n+#define CPP_SUBTARGET_SPEC \\\n+  \"%{m64:%(cpp_subtarget_spec64)}%{!m64:%(cpp_subtarget_spec32)}\"\n+#else\n+#define CPP_SUBTARGET_SPEC \\\n+  \"%{!m32:%(cpp_subtarget_spec64)}%{m32:%(cpp_subtarget_spec32)}\"\n+#endif\n+\n+/* Restore this from sparc/sparc.h, netbsd.h changes it.  */\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%(cpp_cpu) %(cpp_arch) %(cpp_endian) %(cpp_subtarget)\"\n+\n+/* Name the port. */\n+#undef TARGET_NAME\n+#define TARGET_NAME     (DEFAULT_ARCH32_P ? TARGET_NAME32 : TARGET_NAME64)\n+\n+#else\t/* SPARC_BI_ARCH */\n+\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_v9 \\\n+ || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc\n+\n+#undef LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE 128\n+\n+#undef MAX_LONG_DOUBLE_TYPE_SIZE\n+#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n+\n+#undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n+\n+#undef  CC1_SPEC\n+#define CC1_SPEC CC1_SPEC64\n+\n+#undef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC CPP_SUBTARGET_SPEC64\n+\n+#undef TARGET_NAME\n+#define TARGET_NAME     TARGET_NAME64\n+\n+#else\t/* TARGET_CPU_DEFAULT == TARGET_CPU_v9 \\\n+\t|| TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc */\n+\n+/* A 32-bit only compiler.  NetBSD don't support 128 bit `long double'\n+   for 32-bit code, unlike Solaris.  */\n+\n+#undef LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE 64\n+\n+#undef MAX_LONG_DOUBLE_TYPE_SIZE\n+#define MAX_LONG_DOUBLE_TYPE_SIZE 64\n+\n+#undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n+\n+#undef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC CPP_SUBTARGET_SPEC32\n+\n+#undef  CC1_SPEC\n+#define CC1_SPEC CC1_SPEC32\n+\n+#undef TARGET_NAME\n+#define TARGET_NAME     TARGET_NAME32\n+\n+#endif\t/* TARGET_CPU_DEFAULT == TARGET_CPU_v9 \\\n+\t|| TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc */\n+\n+#endif\t/* SPARC_BI_ARCH */"}, {"sha": "1292b86367fe17354b7f7763a81a52d93a85f57c", "filename": "gcc/config/sparc/t-netbsd64", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98/gcc%2Fconfig%2Fsparc%2Ft-netbsd64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb7482c3ae0a089a988a648c562e0c7f2ecbe98/gcc%2Fconfig%2Fsparc%2Ft-netbsd64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-netbsd64?ref=4cb7482c3ae0a089a988a648c562e0c7f2ecbe98", "patch": "@@ -0,0 +1,6 @@\n+MULTILIB_OPTIONS = m32/m64\n+MULTILIB_DIRNAMES = 32 64\n+MULTILIB_MATCHES =\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}]}