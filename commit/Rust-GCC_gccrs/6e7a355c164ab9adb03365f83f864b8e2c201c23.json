{"sha": "6e7a355c164ab9adb03365f83f864b8e2c201c23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU3YTM1NWMxNjRhYjlhZGIwMzM2NWY4M2Y4NjRiOGUyYzIwMWMyMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-10-18T22:45:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-10-18T22:45:01Z"}, "message": "re PR middle-end/18045 (signed integer remainder for power of 2 broken)\n\n\tPR middle-end/18045\n\t* expmed.c (expand_smod_pow2): Handle modes whose size\n\tis greater than that of HOST_WIDE_INT.\n\nFrom-SVN: r89253", "tree": {"sha": "b0c124b89ea7d242ab3f64d6e1c138f7212d1c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0c124b89ea7d242ab3f64d6e1c138f7212d1c0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e7a355c164ab9adb03365f83f864b8e2c201c23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e7a355c164ab9adb03365f83f864b8e2c201c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e7a355c164ab9adb03365f83f864b8e2c201c23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e7a355c164ab9adb03365f83f864b8e2c201c23/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4de696663ca16f677477d6a74de68b690bf66e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4de696663ca16f677477d6a74de68b690bf66e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4de696663ca16f677477d6a74de68b690bf66e0"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "02a42e4cdbfc251e853f8a5d10e7cba6d6c3cb9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7a355c164ab9adb03365f83f864b8e2c201c23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7a355c164ab9adb03365f83f864b8e2c201c23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e7a355c164ab9adb03365f83f864b8e2c201c23", "patch": "@@ -1,3 +1,9 @@\n+2004-10-18  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR middle-end/18045\n+\t* expmed.c (expand_smod_pow2): Handle modes whose size\n+\tis greater than that of HOST_WIDE_INT.\n+\n 2004-10-18  Ziemowit Laski  <zlaski@apple.com>\n \n \t* c-parse.in (reservedwords): Add OBJC_TYPE_QUAL as alternative."}, {"sha": "2601361f60ea8a456c08a88b7ce454d188a98375", "filename": "gcc/expmed.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7a355c164ab9adb03365f83f864b8e2c201c23/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7a355c164ab9adb03365f83f864b8e2c201c23/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=6e7a355c164ab9adb03365f83f864b8e2c201c23", "patch": "@@ -3193,7 +3193,7 @@ expand_mult_highpart (enum machine_mode mode, rtx op0,\n static rtx\n expand_smod_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n {\n-  unsigned HOST_WIDE_INT mask;\n+  unsigned HOST_WIDE_INT masklow, maskhigh;\n   rtx result, temp, shift, label;\n   int logd;\n \n@@ -3209,14 +3209,14 @@ expand_smod_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n       if (signmask)\n \t{\n \t  signmask = force_reg (mode, signmask);\n-\t  mask = ((HOST_WIDE_INT) 1 << logd) - 1;\n+\t  masklow = ((HOST_WIDE_INT) 1 << logd) - 1;\n \t  shift = GEN_INT (GET_MODE_BITSIZE (mode) - logd);\n \n \t  /* Use the rtx_cost of a LSHIFTRT instruction to determine\n \t     which instruction sequence to use.  If logical right shifts\n \t     are expensive the use 2 XORs, 2 SUBs and an AND, otherwise\n \t     use a LSHIFTRT, 1 ADD, 1 SUB and an AND.  */\n-\t     \n+\n \t  temp = gen_rtx_LSHIFTRT (mode, result, shift);\n \t  if (lshr_optab->handlers[mode].insn_code == CODE_FOR_nothing\n \t      || rtx_cost (temp, SET) > COSTS_N_INSNS (2))\n@@ -3225,7 +3225,7 @@ expand_smod_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n \t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n \t      temp = expand_binop (mode, sub_optab, temp, signmask,\n \t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n-\t      temp = expand_binop (mode, and_optab, temp, GEN_INT (mask),\n+\t      temp = expand_binop (mode, and_optab, temp, GEN_INT (masklow),\n \t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n \t      temp = expand_binop (mode, xor_optab, temp, signmask,\n \t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n@@ -3240,7 +3240,7 @@ expand_smod_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n \n \t      temp = expand_binop (mode, add_optab, op0, signmask,\n \t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n-\t      temp = expand_binop (mode, and_optab, temp, GEN_INT (mask),\n+\t      temp = expand_binop (mode, and_optab, temp, GEN_INT (masklow),\n \t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n \t      temp = expand_binop (mode, sub_optab, temp, signmask,\n \t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n@@ -3254,11 +3254,19 @@ expand_smod_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n      can avoid an explicit compare operation in the following comparison\n      against zero.  */\n \n-  mask = (HOST_WIDE_INT) -1 << (GET_MODE_BITSIZE (mode) - 1)\n-\t | (((HOST_WIDE_INT) 1 << logd) - 1);\n+  masklow = ((HOST_WIDE_INT) 1 << logd) - 1;\n+  if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n+    {\n+      masklow |= (HOST_WIDE_INT) -1 << (GET_MODE_BITSIZE (mode) - 1);\n+      maskhigh = -1;\n+    }\n+  else\n+    maskhigh = (HOST_WIDE_INT) -1\n+\t\t << (GET_MODE_BITSIZE (mode) - HOST_BITS_PER_WIDE_INT - 1);\n \n-  temp = expand_binop (mode, and_optab, op0, GEN_INT (mask), result,\n-\t\t       1, OPTAB_LIB_WIDEN);\n+  temp = expand_binop (mode, and_optab, op0,\n+\t\t       immed_double_const (masklow, maskhigh, mode),\n+\t\t       result, 1, OPTAB_LIB_WIDEN);\n   if (temp != result)\n     emit_move_insn (result, temp);\n \n@@ -3267,9 +3275,11 @@ expand_smod_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n \n   temp = expand_binop (mode, sub_optab, result, const1_rtx, result,\n \t\t       0, OPTAB_LIB_WIDEN);\n-  mask = (HOST_WIDE_INT) -1 << logd;\n-  temp = expand_binop (mode, ior_optab, temp, GEN_INT (mask), result,\n-\t\t       1, OPTAB_LIB_WIDEN);\n+  masklow = (HOST_WIDE_INT) -1 << logd;\n+  maskhigh = -1;\n+  temp = expand_binop (mode, ior_optab, temp,\n+\t\t       immed_double_const (masklow, maskhigh, mode),\n+\t\t       result, 1, OPTAB_LIB_WIDEN);\n   temp = expand_binop (mode, add_optab, temp, const1_rtx, result,\n \t\t       0, OPTAB_LIB_WIDEN);\n   if (temp != result)"}, {"sha": "0254a749d12803dcebb2dc2b2261b97185a87294", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7a355c164ab9adb03365f83f864b8e2c201c23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7a355c164ab9adb03365f83f864b8e2c201c23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e7a355c164ab9adb03365f83f864b8e2c201c23", "patch": "@@ -1,3 +1,7 @@\n+2004-10-18  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/smod-1.c: New test.\n+\n 2004-10-18  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc.dg/method-14.m: New test."}, {"sha": "18c43ee5df48446feaa8e6c3c0c00ef7940eff22", "filename": "gcc/testsuite/gcc.dg/smod-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7a355c164ab9adb03365f83f864b8e2c201c23/gcc%2Ftestsuite%2Fgcc.dg%2Fsmod-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7a355c164ab9adb03365f83f864b8e2c201c23/gcc%2Ftestsuite%2Fgcc.dg%2Fsmod-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsmod-1.c?ref=6e7a355c164ab9adb03365f83f864b8e2c201c23", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/18045 */\n+/* Contributed by Eric Botcazou <ebotcazou@libertysurf.fr> */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+/* { dg-options \"-std=c99 -mtune=i486\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <limits.h>\n+\n+extern void abort(void);\n+\n+long long smod16(long long x)\n+{\n+  return x % 16;\n+}\n+\n+int main(void)\n+{\n+#if LLONG_MAX > 2147483647L\n+  if (smod16 (0xFFFFFFFF) != 0xF)\n+    abort ();\n+#endif\n+\n+  return 0;\n+}"}]}