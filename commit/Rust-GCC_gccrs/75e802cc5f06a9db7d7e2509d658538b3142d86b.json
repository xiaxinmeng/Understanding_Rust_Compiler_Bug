{"sha": "75e802cc5f06a9db7d7e2509d658538b3142d86b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVlODAyY2M1ZjA2YTlkYjdkN2UyNTA5ZDY1ODUzOGIzMTQyZDg2Yg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-18T13:58:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-18T13:58:47Z"}, "message": "tree.c (upper_bound_in_type): Build properly canonicalized INTEGER_CSTs.\n\n2011-04-18  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.c (upper_bound_in_type): Build properly canonicalized\n\tINTEGER_CSTs.\n\t(lower_bound_in_type): Likewise.\n\nFrom-SVN: r172645", "tree": {"sha": "28a9745323155c7dca610704660532e04a391173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28a9745323155c7dca610704660532e04a391173"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75e802cc5f06a9db7d7e2509d658538b3142d86b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e802cc5f06a9db7d7e2509d658538b3142d86b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75e802cc5f06a9db7d7e2509d658538b3142d86b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e802cc5f06a9db7d7e2509d658538b3142d86b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b45a007ef93933c0c70c37cb87bf6097db68a32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b45a007ef93933c0c70c37cb87bf6097db68a32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b45a007ef93933c0c70c37cb87bf6097db68a32"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "8e6dda63e25082c30014e1177dbd34fe0a2fea5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e802cc5f06a9db7d7e2509d658538b3142d86b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e802cc5f06a9db7d7e2509d658538b3142d86b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75e802cc5f06a9db7d7e2509d658538b3142d86b", "patch": "@@ -1,3 +1,9 @@\n+2011-04-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (upper_bound_in_type): Build properly canonicalized\n+\tINTEGER_CSTs.\n+\t(lower_bound_in_type): Likewise.\n+\n 2011-04-18  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple.h (gimple_call_addr_fndecl): New function."}, {"sha": "57e8e684ad6a1e55826ff0b51f8e38cbed63e45d", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75e802cc5f06a9db7d7e2509d658538b3142d86b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75e802cc5f06a9db7d7e2509d658538b3142d86b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=75e802cc5f06a9db7d7e2509d658538b3142d86b", "patch": "@@ -9964,7 +9964,7 @@ signed_type_for (tree type)\n tree\n upper_bound_in_type (tree outer, tree inner)\n {\n-  unsigned HOST_WIDE_INT lo, hi;\n+  double_int high;\n   unsigned int det = 0;\n   unsigned oprec = TYPE_PRECISION (outer);\n   unsigned iprec = TYPE_PRECISION (inner);\n@@ -10011,18 +10011,18 @@ upper_bound_in_type (tree outer, tree inner)\n   /* Compute 2^^prec - 1.  */\n   if (prec <= HOST_BITS_PER_WIDE_INT)\n     {\n-      hi = 0;\n-      lo = ((~(unsigned HOST_WIDE_INT) 0)\n+      high.high = 0;\n+      high.low = ((~(unsigned HOST_WIDE_INT) 0)\n \t    >> (HOST_BITS_PER_WIDE_INT - prec));\n     }\n   else\n     {\n-      hi = ((~(unsigned HOST_WIDE_INT) 0)\n+      high.high = ((~(unsigned HOST_WIDE_INT) 0)\n \t    >> (2 * HOST_BITS_PER_WIDE_INT - prec));\n-      lo = ~(unsigned HOST_WIDE_INT) 0;\n+      high.low = ~(unsigned HOST_WIDE_INT) 0;\n     }\n \n-  return build_int_cst_wide (outer, lo, hi);\n+  return double_int_to_tree (outer, high);\n }\n \n /* Returns the smallest value obtainable by casting something in INNER type to\n@@ -10031,7 +10031,7 @@ upper_bound_in_type (tree outer, tree inner)\n tree\n lower_bound_in_type (tree outer, tree inner)\n {\n-  unsigned HOST_WIDE_INT lo, hi;\n+  double_int low;\n   unsigned oprec = TYPE_PRECISION (outer);\n   unsigned iprec = TYPE_PRECISION (inner);\n \n@@ -10042,7 +10042,7 @@ lower_bound_in_type (tree outer, tree inner)\n \t contains all values of INNER type.  In particular, both INNER\n \t and OUTER types have zero in common.  */\n       || (oprec > iprec && TYPE_UNSIGNED (inner)))\n-    lo = hi = 0;\n+    low.low = low.high = 0;\n   else\n     {\n       /* If we are widening a signed type to another signed type, we\n@@ -10053,18 +10053,18 @@ lower_bound_in_type (tree outer, tree inner)\n \n       if (prec <= HOST_BITS_PER_WIDE_INT)\n \t{\n-\t  hi = ~(unsigned HOST_WIDE_INT) 0;\n-\t  lo = (~(unsigned HOST_WIDE_INT) 0) << (prec - 1);\n+\t  low.high = ~(unsigned HOST_WIDE_INT) 0;\n+\t  low.low = (~(unsigned HOST_WIDE_INT) 0) << (prec - 1);\n \t}\n       else\n \t{\n-\t  hi = ((~(unsigned HOST_WIDE_INT) 0)\n+\t  low.high = ((~(unsigned HOST_WIDE_INT) 0)\n \t\t<< (prec - HOST_BITS_PER_WIDE_INT - 1));\n-\t  lo = 0;\n+\t  low.low = 0;\n \t}\n     }\n \n-  return build_int_cst_wide (outer, lo, hi);\n+  return double_int_to_tree (outer, low);\n }\n \n /* Return nonzero if two operands that are suitable for PHI nodes are"}]}