{"sha": "55e042407ef307764cb9d5a4a06954518e2112b4", "node_id": "C_kwDOANBUbNoAKDU1ZTA0MjQwN2VmMzA3NzY0Y2I5ZDVhNGEwNjk1NDUxOGUyMTEyYjQ", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-08T02:52:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-08T02:52:30Z"}, "message": "analyzer: fix \"when 'strchr' returns non-NULL\" message\n\nTweak analyzer handling of strchr, so that we show the\n  when 'strchr' returns non-NULL\nmessage for that execution path.\n\ngcc/analyzer/ChangeLog:\n\t* region-model-impl-calls.cc (region_model::impl_call_strchr):\n\tMove to on_call_post.  Handle both outcomes using bifurcation,\n\trather than just the \"not found\" case.\n\t* region-model.cc (region_model::on_call_pre): Move\n\tBUILT_IN_STRCHR and \"strchr\" to...\n\t(region_model::on_call_post): ...here.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/strchr-1.c (test_literal): Detect writing to a\n\tstring literal.  Verify that we emit the \"when '__builtin_strchr'\n\treturns non-NULL\" message.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "fecc03105e1383aaa8137ac98dbcc2d397b2da01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fecc03105e1383aaa8137ac98dbcc2d397b2da01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55e042407ef307764cb9d5a4a06954518e2112b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e042407ef307764cb9d5a4a06954518e2112b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e042407ef307764cb9d5a4a06954518e2112b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e042407ef307764cb9d5a4a06954518e2112b4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d0326943ee4eb87309faca28ee0ed13346dd70a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0326943ee4eb87309faca28ee0ed13346dd70a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d0326943ee4eb87309faca28ee0ed13346dd70a"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "46dbbb53bdc0e741d8069aa65f6d2054e72eb6af", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e042407ef307764cb9d5a4a06954518e2112b4/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e042407ef307764cb9d5a4a06954518e2112b4/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=55e042407ef307764cb9d5a4a06954518e2112b4", "patch": "@@ -1013,7 +1013,7 @@ region_model::impl_call_realloc (const call_details &cd)\n     }\n }\n \n-/* Handle the on_call_pre part of \"strchr\" and \"__builtin_strchr\".  */\n+/* Handle the on_call_post part of \"strchr\" and \"__builtin_strchr\".  */\n \n void\n region_model::impl_call_strchr (const call_details &cd)\n@@ -1075,13 +1075,13 @@ region_model::impl_call_strchr (const call_details &cd)\n     bool m_found;\n   };\n \n-  /* Bifurcate state, creating a \"not found\" out-edge.  */\n+  /* Body of region_model::impl_call_strchr.  */\n   if (cd.get_ctxt ())\n-    cd.get_ctxt ()->bifurcate (make_unique<strchr_call_info> (cd, false));\n-\n-  /* The \"unbifurcated\" state is the \"found\" case.  */\n-  strchr_call_info found (cd, true);\n-  found.update_model (this, NULL, cd.get_ctxt ());\n+    {\n+      cd.get_ctxt ()->bifurcate (make_unique<strchr_call_info> (cd, false));\n+      cd.get_ctxt ()->bifurcate (make_unique<strchr_call_info> (cd, true));\n+      cd.get_ctxt ()->terminate_path ();\n+    }\n }\n \n /* Handle the on_call_pre part of \"strcpy\" and \"__builtin_strcpy_chk\".  */"}, {"sha": "e182d2e0e1a295591d8a1471513657fb935cf647", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e042407ef307764cb9d5a4a06954518e2112b4/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e042407ef307764cb9d5a4a06954518e2112b4/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=55e042407ef307764cb9d5a4a06954518e2112b4", "patch": "@@ -2223,7 +2223,7 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t  case BUILT_IN_REALLOC:\n \t    return false;\n \t  case BUILT_IN_STRCHR:\n-\t    impl_call_strchr (cd);\n+\t    /* Handle in \"on_call_post\".  */\n \t    return false;\n \t  case BUILT_IN_STRCPY:\n \t  case BUILT_IN_STRCPY_CHK:\n@@ -2341,7 +2341,7 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n       else if (is_named_call_p (callee_fndecl, \"strchr\", call, 2)\n \t       && POINTER_TYPE_P (cd.get_arg_type (0)))\n \t{\n-\t  impl_call_strchr (cd);\n+\t  /* Handle in \"on_call_post\".  */\n \t  return false;\n \t}\n       else if (is_named_call_p (callee_fndecl, \"strlen\", call, 1)\n@@ -2418,6 +2418,12 @@ region_model::on_call_post (const gcall *call,\n \t  impl_call_pipe (cd);\n \t  return;\n \t}\n+      else if (is_named_call_p (callee_fndecl, \"strchr\", call, 2)\n+\t       && POINTER_TYPE_P (cd.get_arg_type (0)))\n+\t{\n+\t  impl_call_strchr (cd);\n+\t  return;\n+\t}\n       /* Was this fndecl referenced by\n \t __attribute__((malloc(FOO)))?  */\n       if (lookup_attribute (\"*dealloc\", DECL_ATTRIBUTES (callee_fndecl)))\n@@ -2435,6 +2441,10 @@ region_model::on_call_post (const gcall *call,\n \t    impl_call_realloc (cd);\n \t    return;\n \n+\t  case BUILT_IN_STRCHR:\n+\t    impl_call_strchr (cd);\n+\t    return;\n+\n \t  case BUILT_IN_VA_END:\n \t    impl_call_va_end (cd);\n \t    return;"}, {"sha": "bfa48916ca25e5e964faf89b6178fcf2bef8735c", "filename": "gcc/testsuite/gcc.dg/analyzer/strchr-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e042407ef307764cb9d5a4a06954518e2112b4/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrchr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e042407ef307764cb9d5a4a06954518e2112b4/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrchr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrchr-1.c?ref=55e042407ef307764cb9d5a4a06954518e2112b4", "patch": "@@ -3,12 +3,13 @@\n \n const char* test_literal (int x)\n {\n-  char *p = __builtin_strchr (\"123\", x);\n+  char *p = __builtin_strchr (\"123\", x); /* { dg-message \"when '__builtin_strchr' returns non-NULL\" } */\n   if (p)\n     {\n       __analyzer_eval (*p == x); /* { dg-message \"UNKNOWN\" } */\n       /* TODO: this ought to be TRUE, but it's unclear that it's\n \t worth stashing this constraint.  */\n+      *p = 'A'; /* { dg-warning \"write to string literal\" } */\n     }\n   return p;\n }"}]}