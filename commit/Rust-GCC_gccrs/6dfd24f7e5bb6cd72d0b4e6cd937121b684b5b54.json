{"sha": "6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRmZDI0ZjdlNWJiNmNkNzJkMGI0ZTZjZDkzNzEyMWI2ODRiNWI1NA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-09-16T21:30:05Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-09-16T21:30:05Z"}, "message": "re PR fortran/43665 (INTENT(IN) etc. optimization of calls: function annotations for noclobber/noescape arguments)\n\n2010-09-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43665\n        * trans-types.c (create_fn_spec): New function.\n        (gfc_get_function_type): Call it.\n\n2010-09-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43665\n        * gfortran.dg/cray_pointers_2.f90: Disable inlining to avoid\n        optimizations.\n        * gfortran.dg/intent_optimize_1.f90: New test.\n\nFrom-SVN: r164348", "tree": {"sha": "3f2c27ed734d016912132a5900dc8ad026f96ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f2c27ed734d016912132a5900dc8ad026f96ed6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3df2256e7526fc21a65332b7b72502758d27a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3df2256e7526fc21a65332b7b72502758d27a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3df2256e7526fc21a65332b7b72502758d27a7b"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "966287d91a0d0686e4b73f418b850c64dc64f570", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54", "patch": "@@ -1,3 +1,9 @@\n+2010-09-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43665\n+\t* trans-types.c (create_fn_spec): New function.\n+\t(gfc_get_function_type): Call it.\n+\n 2010-09-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gfortran.h (walk_code_fn_t, walk_expr_fn_t): New types."}, {"sha": "7933a941d94f016c2036d1e656af8d124a01d6a2", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54", "patch": "@@ -2279,6 +2279,53 @@ gfc_get_mixed_entry_union (gfc_namespace *ns)\n   return type;\n }\n \f\n+/* Create a \"fn spec\" based on the formal arguments;\n+   cf. create_function_arglist.  */\n+\n+static tree\n+create_fn_spec (gfc_symbol *sym, tree fntype)\n+{\n+  char spec[150];\n+  size_t spec_len;\n+  gfc_formal_arglist *f;\n+  tree tmp;\n+\n+  memset (&spec, 0, sizeof (spec));\n+  spec[0] = '.';\n+  spec_len = 1;\n+\n+  if (sym->attr.entry_master)\n+    spec[spec_len++] = 'R';\n+  if (gfc_return_by_reference (sym))\n+    {\n+      gfc_symbol *result = sym->result ? sym->result : sym;\n+\n+      if (result->attr.pointer || sym->attr.proc_pointer)\n+\tspec[spec_len++] = '.';\n+      else\n+\tspec[spec_len++] = 'w';\n+      if (sym->ts.type == BT_CHARACTER)\n+\tspec[spec_len++] = 'R';\n+    }\n+\n+  for (f = sym->formal; f; f = f->next)\n+    if (spec_len < sizeof (spec))\n+      {\n+\tif (!f->sym || f->sym->attr.pointer || f->sym->attr.target\n+\t    || f->sym->attr.external || f->sym->attr.cray_pointer)\n+\t  spec[spec_len++] = '.';\n+\telse if (f->sym->attr.intent == INTENT_IN)\n+\t  spec[spec_len++] = 'r';\n+\telse if (f->sym)\n+\t  spec[spec_len++] = 'w';\n+      }\n+\n+  tmp = build_tree_list (NULL_TREE, build_string (spec_len, spec));\n+  tmp = tree_cons (get_identifier (\"fn spec\"), tmp, TYPE_ATTRIBUTES (fntype));\n+  return build_type_attribute_variant (fntype, tmp);\n+}\n+\n+\n tree\n gfc_get_function_type (gfc_symbol * sym)\n {\n@@ -2420,6 +2467,7 @@ gfc_get_function_type (gfc_symbol * sym)\n     type = gfc_sym_type (sym);\n \n   type = build_function_type (type, typelist);\n+  type = create_fn_spec (sym, type);\n \n   return type;\n }"}, {"sha": "96955e0440c193b3e87a2370cd04b72032f71692", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54", "patch": "@@ -1,3 +1,10 @@\n+2010-09-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43665\n+\t* gfortran.dg/cray_pointers_2.f90: Disable inlining to avoid\n+\toptimizations.\n+\t* gfortran.dg/intent_optimize_1.f90: New test.\n+\n 2010-09-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/divmod-1.c: New."}, {"sha": "8584f33ab526a1d7a48228c10a96c39bddc814cd", "filename": "gcc/testsuite/gfortran.dg/cray_pointers_2.f90", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_2.f90?ref=6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54", "patch": "@@ -1,6 +1,11 @@\n ! { dg-do run }\n-! { dg-options \"-fcray-pointer -fbounds-check\" }\n+! { dg-options \"-fcray-pointer -fbounds-check -fno-inline\" }\n+!\n ! Series of routines for testing a Cray pointer implementation\n+!\n+! Note: Some of the test cases violate Fortran's alias rules;\n+! the \"-fno-inline option\" for now prevents failures.\n+!\n program craytest\n   common /errors/errors(400)\n   common /foo/foo ! To prevent optimizations"}, {"sha": "dbe0128d7f0d16ee5769283df8ca2f51c8c0c71c", "filename": "gcc/testsuite/gfortran.dg/intent_optimize_1.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_optimize_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_optimize_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_optimize_1.f90?ref=6dfd24f7e5bb6cd72d0b4e6cd937121b684b5b54", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-optimized\" }\n+!\n+! Check whether the \"does_not_exist\" subroutine has been\n+! optimized away, i.e. check that \"foo\"'s intent(IN) gets\n+! honoured.\n+!\n+! PR fortran/43665\n+!\n+interface\n+  subroutine foo(x)\n+    integer, intent(in) :: x\n+  end subroutine foo\n+end interface\n+\n+integer :: y\n+\n+y = 5\n+call foo(y)\n+if (y /= 5) call does_not_exist ()\n+end\n+\n+! { dg-final { scan-tree-dump-times \"does_not_exist\" 0 \"optimized\" } }\n+! { dg-final { cleanup-tree-dump \"optimized\" } }"}]}