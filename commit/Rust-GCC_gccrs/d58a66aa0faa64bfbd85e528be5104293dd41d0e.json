{"sha": "d58a66aa0faa64bfbd85e528be5104293dd41d0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU4YTY2YWEwZmFhNjRiZmJkODVlNTI4YmU1MTA0MjkzZGQ0MWQwZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-22T08:16:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-22T08:16:18Z"}, "message": "i386: Use xor to write zero to memory with -Os even for more than 4 stores [PR11877]\n\n> > 2021-06-20  Roger Sayle  <roger@nextmovesoftware.com>\n> >\n> > gcc/ChangeLog\n> >         PR target/11877\n> >         * config/i386/i386.md: New define_peephole2s to shrink writing\n> >         1, 2 or 4 consecutive zeros to memory when optimizing for size.\n\nIt unfortunately doesn't extend well to larger memory clearing.\nConsider e.g.\nvoid\nfoo (int *p)\n{\n  p[0] = 0;\n  p[7] = 0;\n  p[23] = 0;\n  p[41] = 0;\n  p[48] = 0;\n  p[59] = 0;\n  p[69] = 0;\n  p[78] = 0;\n  p[83] = 0;\n  p[89] = 0;\n  p[98] = 0;\n  p[121] = 0;\n  p[132] = 0;\n  p[143] = 0;\n  p[154] = 0;\n}\nwhere with the patch we emit:\n        xorl    %eax, %eax\n        xorl    %edx, %edx\n        xorl    %ecx, %ecx\n        xorl    %esi, %esi\n        xorl    %r8d, %r8d\n        movl    %eax, (%rdi)\n        movl    %eax, 28(%rdi)\n        movl    %eax, 92(%rdi)\n        movl    %eax, 164(%rdi)\n        movl    %edx, 192(%rdi)\n        movl    %edx, 236(%rdi)\n        movl    %edx, 276(%rdi)\n        movl    %edx, 312(%rdi)\n        movl    %ecx, 332(%rdi)\n        movl    %ecx, 356(%rdi)\n        movl    %ecx, 392(%rdi)\n        movl    %ecx, 484(%rdi)\n        movl    %esi, 528(%rdi)\n        movl    %esi, 572(%rdi)\n        movl    %r8d, 616(%rdi)\nHere is an incremental patch that emits:\n        xorl    %eax, %eax\n        movl    %eax, (%rdi)\n        movl    %eax, 28(%rdi)\n        movl    %eax, 92(%rdi)\n        movl    %eax, 164(%rdi)\n        movl    %eax, 192(%rdi)\n        movl    %eax, 236(%rdi)\n        movl    %eax, 276(%rdi)\n        movl    %eax, 312(%rdi)\n        movl    %eax, 332(%rdi)\n        movl    %eax, 356(%rdi)\n        movl    %eax, 392(%rdi)\n        movl    %eax, 484(%rdi)\n        movl    %eax, 528(%rdi)\n        movl    %eax, 572(%rdi)\n        movl    %eax, 616(%rdi)\ninstead.\n\n2021-06-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/11877\n\t* config/i386/i386-protos.h (ix86_last_zero_store_uid): Declare.\n\t* config/i386/i386-expand.c (ix86_last_zero_store_uid): New variable.\n\t* config/i386/i386.c (ix86_expand_prologue): Clear it.\n\t* config/i386/i386.md (peephole2s for 1/2/4 stores of const0_rtx):\n\tRemove \"\" from match_operand.  Emit new insns using emit_move_insn and\n\tset ix86_last_zero_store_uid to INSN_UID of the last store.\n\tAdd peephole2s for 1/2/4 stores of const0_rtx following previous\n\tsuccessful peep2s.\n\n\t* gcc.target/i386/pr11877-2.c: New test.", "tree": {"sha": "6fc9cfbd153b56755b0ea19894f86690070a0ba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fc9cfbd153b56755b0ea19894f86690070a0ba1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d58a66aa0faa64bfbd85e528be5104293dd41d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58a66aa0faa64bfbd85e528be5104293dd41d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58a66aa0faa64bfbd85e528be5104293dd41d0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58a66aa0faa64bfbd85e528be5104293dd41d0e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "706533c339277128abc697ff50acf945b8614ba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/706533c339277128abc697ff50acf945b8614ba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/706533c339277128abc697ff50acf945b8614ba1"}], "stats": {"total": 118, "additions": 104, "deletions": 14}, "files": [{"sha": "2986b49065c6f513c97030e92c287a44c4299f39", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58a66aa0faa64bfbd85e528be5104293dd41d0e/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58a66aa0faa64bfbd85e528be5104293dd41d0e/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=d58a66aa0faa64bfbd85e528be5104293dd41d0e", "patch": "@@ -1316,6 +1316,9 @@ find_nearest_reg_def (rtx_insn *insn, int regno1, int regno2)\n   return false;\n }\n \n+/* INSN_UID of the last insn emitted by zero store peephole2s.  */\n+int ix86_last_zero_store_uid;\n+\n /* Split lea instructions into a sequence of instructions\n    which are executed on ALU to avoid AGU stalls.\n    It is assumed that it is allowed to clobber flags register"}, {"sha": "1d05206675e50ed645530865b1df5102c2e625ab", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58a66aa0faa64bfbd85e528be5104293dd41d0e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58a66aa0faa64bfbd85e528be5104293dd41d0e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=d58a66aa0faa64bfbd85e528be5104293dd41d0e", "patch": "@@ -111,6 +111,7 @@ extern bool ix86_use_lea_for_mov (rtx_insn *, rtx[]);\n extern bool ix86_avoid_lea_for_addr (rtx_insn *, rtx[]);\n extern void ix86_split_lea_for_addr (rtx_insn *, rtx[], machine_mode);\n extern bool ix86_lea_for_add_ok (rtx_insn *, rtx[]);\n+extern int ix86_last_zero_store_uid;\n extern bool ix86_vec_interleave_v2df_operator_ok (rtx operands[3], bool high);\n extern bool ix86_dep_by_shift_count (const_rtx set_insn, const_rtx use_insn);\n extern bool ix86_agi_dependent (rtx_insn *set_insn, rtx_insn *use_insn);"}, {"sha": "3d5883b8d0eec269e694f491062e99f3f967728e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58a66aa0faa64bfbd85e528be5104293dd41d0e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58a66aa0faa64bfbd85e528be5104293dd41d0e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d58a66aa0faa64bfbd85e528be5104293dd41d0e", "patch": "@@ -8196,6 +8196,7 @@ ix86_expand_prologue (void)\n   bool save_stub_call_needed;\n   rtx static_chain = NULL_RTX;\n \n+  ix86_last_zero_store_uid = 0;\n   if (ix86_function_naked (current_function_decl))\n     {\n       if (flag_stack_usage_info)"}, {"sha": "700c158a432291373ed31da85326278c82ad4923", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 73, "deletions": 14, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58a66aa0faa64bfbd85e528be5104293dd41d0e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58a66aa0faa64bfbd85e528be5104293dd41d0e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d58a66aa0faa64bfbd85e528be5104293dd41d0e", "patch": "@@ -19360,37 +19360,96 @@\n ;; When optimizing for size, zeroing memory should use a register.\n (define_peephole2\n   [(match_scratch:SWI48 0 \"r\")\n-   (set (match_operand:SWI48 1 \"memory_operand\" \"\") (const_int 0))\n-   (set (match_operand:SWI48 2 \"memory_operand\" \"\") (const_int 0))\n-   (set (match_operand:SWI48 3 \"memory_operand\" \"\") (const_int 0))\n-   (set (match_operand:SWI48 4 \"memory_operand\" \"\") (const_int 0))]\n+   (set (match_operand:SWI48 1 \"memory_operand\") (const_int 0))\n+   (set (match_operand:SWI48 2 \"memory_operand\") (const_int 0))\n+   (set (match_operand:SWI48 3 \"memory_operand\") (const_int 0))\n+   (set (match_operand:SWI48 4 \"memory_operand\") (const_int 0))]\n   \"optimize_insn_for_size_p () && peep2_regno_dead_p (0, FLAGS_REG)\"\n-  [(set (match_dup 1) (match_dup 0))\n-   (set (match_dup 2) (match_dup 0))\n-   (set (match_dup 3) (match_dup 0))\n-   (set (match_dup 4) (match_dup 0))]\n+  [(const_int 0)]\n {\n   ix86_expand_clear (operands[0]);\n+  emit_move_insn (operands[1], operands[0]);\n+  emit_move_insn (operands[2], operands[0]);\n+  emit_move_insn (operands[3], operands[0]);\n+  ix86_last_zero_store_uid\n+    = INSN_UID (emit_move_insn (operands[4], operands[0]));\n+  DONE;\n })\n \n (define_peephole2\n   [(match_scratch:SWI48 0 \"r\")\n-   (set (match_operand:SWI48 1 \"memory_operand\" \"\") (const_int 0))\n-   (set (match_operand:SWI48 2 \"memory_operand\" \"\") (const_int 0))]\n+   (set (match_operand:SWI48 1 \"memory_operand\") (const_int 0))\n+   (set (match_operand:SWI48 2 \"memory_operand\") (const_int 0))]\n   \"optimize_insn_for_size_p () && peep2_regno_dead_p (0, FLAGS_REG)\"\n-  [(set (match_dup 1) (match_dup 0))\n-   (set (match_dup 2) (match_dup 0))]\n+  [(const_int 0)]\n {\n   ix86_expand_clear (operands[0]);\n+  emit_move_insn (operands[1], operands[0]);\n+  ix86_last_zero_store_uid\n+    = INSN_UID (emit_move_insn (operands[2], operands[0]));\n+  DONE;\n })\n \n (define_peephole2\n   [(match_scratch:SWI48 0 \"r\")\n-   (set (match_operand:SWI48 1 \"memory_operand\" \"\") (const_int 0))]\n+   (set (match_operand:SWI48 1 \"memory_operand\") (const_int 0))]\n   \"optimize_insn_for_size_p () && peep2_regno_dead_p (0, FLAGS_REG)\"\n-  [(set (match_dup 1) (match_dup 0))]\n+  [(const_int 0)]\n {\n   ix86_expand_clear (operands[0]);\n+  ix86_last_zero_store_uid\n+    = INSN_UID (emit_move_insn (operands[1], operands[0]));\n+  DONE;\n+})\n+\n+(define_peephole2\n+  [(set (match_operand:SWI48 5 \"memory_operand\")\n+\t(match_operand:SWI48 0 \"general_reg_operand\"))\n+   (set (match_operand:SWI48 1 \"memory_operand\") (const_int 0))\n+   (set (match_operand:SWI48 2 \"memory_operand\") (const_int 0))\n+   (set (match_operand:SWI48 3 \"memory_operand\") (const_int 0))\n+   (set (match_operand:SWI48 4 \"memory_operand\") (const_int 0))]\n+  \"optimize_insn_for_size_p ()\n+   && INSN_UID (peep2_next_insn (0)) == ix86_last_zero_store_uid\"\n+  [(const_int 0)]\n+{\n+  emit_move_insn (operands[5], operands[0]);\n+  emit_move_insn (operands[1], operands[0]);\n+  emit_move_insn (operands[2], operands[0]);\n+  emit_move_insn (operands[3], operands[0]);\n+  ix86_last_zero_store_uid\n+    = INSN_UID (emit_move_insn (operands[4], operands[0]));\n+  DONE;\n+})\n+\n+(define_peephole2\n+  [(set (match_operand:SWI48 3 \"memory_operand\")\n+\t(match_operand:SWI48 0 \"general_reg_operand\"))\n+   (set (match_operand:SWI48 1 \"memory_operand\") (const_int 0))\n+   (set (match_operand:SWI48 2 \"memory_operand\") (const_int 0))]\n+  \"optimize_insn_for_size_p ()\n+   && INSN_UID (peep2_next_insn (0)) == ix86_last_zero_store_uid\"\n+  [(const_int 0)]\n+{\n+  emit_move_insn (operands[3], operands[0]);\n+  emit_move_insn (operands[1], operands[0]);\n+  ix86_last_zero_store_uid\n+    = INSN_UID (emit_move_insn (operands[2], operands[0]));\n+  DONE;\n+})\n+\n+(define_peephole2\n+  [(set (match_operand:SWI48 2 \"memory_operand\")\n+\t(match_operand:SWI48 0 \"general_reg_operand\"))\n+   (set (match_operand:SWI48 1 \"memory_operand\") (const_int 0))]\n+  \"optimize_insn_for_size_p ()\n+   && INSN_UID (peep2_next_insn (0)) == ix86_last_zero_store_uid\"\n+  [(const_int 0)]\n+{\n+  emit_move_insn (operands[2], operands[0]);\n+  ix86_last_zero_store_uid\n+    = INSN_UID (emit_move_insn (operands[1], operands[0]));\n+  DONE;\n })\n \n ;; Reload dislikes loading constants directly into class_likely_spilled"}, {"sha": "4782dd2f79949dc3f81b8b6e722032152bc30a9e", "filename": "gcc/testsuite/gcc.target/i386/pr11877-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58a66aa0faa64bfbd85e528be5104293dd41d0e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr11877-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58a66aa0faa64bfbd85e528be5104293dd41d0e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr11877-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr11877-2.c?ref=d58a66aa0faa64bfbd85e528be5104293dd41d0e", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/11877 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+void\n+foo (int *p)\n+{\n+  p[0] = 0;\n+  p[7] = 0;\n+  p[23] = 0;\n+  p[41] = 0;\n+  p[48] = 0;\n+  p[59] = 0;\n+  p[69] = 0;\n+  p[78] = 0;\n+  p[83] = 0;\n+  p[89] = 0;\n+  p[98] = 0;\n+  p[121] = 0;\n+  p[132] = 0;\n+  p[143] = 0;\n+  p[154] = 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"xorl\\[ \\t\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$0,\" } } */"}]}