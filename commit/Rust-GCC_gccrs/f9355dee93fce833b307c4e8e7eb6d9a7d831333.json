{"sha": "f9355dee93fce833b307c4e8e7eb6d9a7d831333", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkzNTVkZWU5M2ZjZTgzM2IzMDdjNGU4ZTdlYjZkOWE3ZDgzMTMzMw==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-17T15:44:52Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-17T15:44:52Z"}, "message": "[ARM][GCC][5/2x]: MVE intrinsics with binary operands.\n\nThis patch supports following MVE ACLE intrinsics with binary operands.\n\nvqmovntq_u16, vqmovnbq_u16, vmulltq_poly_p8, vmullbq_poly_p8, vmovntq_u16, vmovnbq_u16, vmlaldavxq_u16, vmlaldavq_u16, vqmovuntq_s16, vqmovunbq_s16, vshlltq_n_u8, vshllbq_n_u8, vorrq_n_u16, vbicq_n_u16, vcmpneq_n_f16, vcmpneq_f16, vcmpltq_n_f16, vcmpltq_f16, vcmpleq_n_f16, vcmpleq_f16, vcmpgtq_n_f16, vcmpgtq_f16, vcmpgeq_n_f16, vcmpgeq_f16, vcmpeqq_n_f16, vcmpeqq_f16, vsubq_f16, vqmovntq_s16, vqmovnbq_s16, vqdmulltq_s16, vqdmulltq_n_s16, vqdmullbq_s16, vqdmullbq_n_s16, vorrq_f16, vornq_f16, vmulq_n_f16, vmulq_f16, vmovntq_s16, vmovnbq_s16, vmlsldavxq_s16, vmlsldavq_s16, vmlaldavxq_s16, vmlaldavq_s16, vminnmvq_f16, vminnmq_f16, vminnmavq_f16, vminnmaq_f16, vmaxnmvq_f16, vmaxnmq_f16, vmaxnmavq_f16, vmaxnmaq_f16, veorq_f16, vcmulq_rot90_f16, vcmulq_rot270_f16, vcmulq_rot180_f16, vcmulq_f16, vcaddq_rot90_f16, vcaddq_rot270_f16, vbicq_f16, vandq_f16, vaddq_n_f16, vabdq_f16, vshlltq_n_s8, vshllbq_n_s8, vorrq_n_s16, vbicq_n_s16, vqmovntq_u32, vqmovnbq_u32, vmulltq_poly_p16, vmullbq_poly_p16, vmovntq_u32, vmovnbq_u32, vmlaldavxq_u32, vmlaldavq_u32, vqmovuntq_s32, vqmovunbq_s32, vshlltq_n_u16, vshllbq_n_u16, vorrq_n_u32, vbicq_n_u32, vcmpneq_n_f32, vcmpneq_f32, vcmpltq_n_f32, vcmpltq_f32, vcmpleq_n_f32, vcmpleq_f32, vcmpgtq_n_f32, vcmpgtq_f32, vcmpgeq_n_f32, vcmpgeq_f32, vcmpeqq_n_f32, vcmpeqq_f32, vsubq_f32, vqmovntq_s32, vqmovnbq_s32, vqdmulltq_s32, vqdmulltq_n_s32, vqdmullbq_s32, vqdmullbq_n_s32, vorrq_f32, vornq_f32, vmulq_n_f32, vmulq_f32, vmovntq_s32, vmovnbq_s32, vmlsldavxq_s32, vmlsldavq_s32, vmlaldavxq_s32, vmlaldavq_s32, vminnmvq_f32, vminnmq_f32, vminnmavq_f32, vminnmaq_f32, vmaxnmvq_f32, vmaxnmq_f32, vmaxnmavq_f32, vmaxnmaq_f32, veorq_f32, vcmulq_rot90_f32, vcmulq_rot270_f32, vcmulq_rot180_f32, vcmulq_f32, vcaddq_rot90_f32, vcaddq_rot270_f32, vbicq_f32, vandq_f32, vaddq_n_f32, vabdq_f32, vshlltq_n_s16, vshllbq_n_s16, vorrq_n_s32, vbicq_n_s32, vrmlaldavhq_u32, vctp8q_m, vctp64q_m, vctp32q_m, vctp16q_m, vaddlvaq_u32, vrmlsldavhxq_s32, vrmlsldavhq_s32, vrmlaldavhxq_s32, vrmlaldavhq_s32, vcvttq_f16_f32, vcvtbq_f16_f32, vaddlvaq_s32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\nThe above intrinsics are defined using the already defined builtin qualifiers BINOP_NONE_NONE_IMM, BINOP_NONE_NONE_NONE, BINOP_UNONE_NONE_NONE, BINOP_UNONE_UNONE_IMM, BINOP_UNONE_UNONE_NONE, BINOP_UNONE_UNONE_UNONE.\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vqmovntq_u16): Define macro.\n\t(vqmovnbq_u16): Likewise.\n\t(vmulltq_poly_p8): Likewise.\n\t(vmullbq_poly_p8): Likewise.\n\t(vmovntq_u16): Likewise.\n\t(vmovnbq_u16): Likewise.\n\t(vmlaldavxq_u16): Likewise.\n\t(vmlaldavq_u16): Likewise.\n\t(vqmovuntq_s16): Likewise.\n\t(vqmovunbq_s16): Likewise.\n\t(vshlltq_n_u8): Likewise.\n\t(vshllbq_n_u8): Likewise.\n\t(vorrq_n_u16): Likewise.\n\t(vbicq_n_u16): Likewise.\n\t(vcmpneq_n_f16): Likewise.\n\t(vcmpneq_f16): Likewise.\n\t(vcmpltq_n_f16): Likewise.\n\t(vcmpltq_f16): Likewise.\n\t(vcmpleq_n_f16): Likewise.\n\t(vcmpleq_f16): Likewise.\n\t(vcmpgtq_n_f16): Likewise.\n\t(vcmpgtq_f16): Likewise.\n\t(vcmpgeq_n_f16): Likewise.\n\t(vcmpgeq_f16): Likewise.\n\t(vcmpeqq_n_f16): Likewise.\n\t(vcmpeqq_f16): Likewise.\n\t(vsubq_f16): Likewise.\n\t(vqmovntq_s16): Likewise.\n\t(vqmovnbq_s16): Likewise.\n\t(vqdmulltq_s16): Likewise.\n\t(vqdmulltq_n_s16): Likewise.\n\t(vqdmullbq_s16): Likewise.\n\t(vqdmullbq_n_s16): Likewise.\n\t(vorrq_f16): Likewise.\n\t(vornq_f16): Likewise.\n\t(vmulq_n_f16): Likewise.\n\t(vmulq_f16): Likewise.\n\t(vmovntq_s16): Likewise.\n\t(vmovnbq_s16): Likewise.\n\t(vmlsldavxq_s16): Likewise.\n\t(vmlsldavq_s16): Likewise.\n\t(vmlaldavxq_s16): Likewise.\n\t(vmlaldavq_s16): Likewise.\n\t(vminnmvq_f16): Likewise.\n\t(vminnmq_f16): Likewise.\n\t(vminnmavq_f16): Likewise.\n\t(vminnmaq_f16): Likewise.\n\t(vmaxnmvq_f16): Likewise.\n\t(vmaxnmq_f16): Likewise.\n\t(vmaxnmavq_f16): Likewise.\n\t(vmaxnmaq_f16): Likewise.\n\t(veorq_f16): Likewise.\n\t(vcmulq_rot90_f16): Likewise.\n\t(vcmulq_rot270_f16): Likewise.\n\t(vcmulq_rot180_f16): Likewise.\n\t(vcmulq_f16): Likewise.\n\t(vcaddq_rot90_f16): Likewise.\n\t(vcaddq_rot270_f16): Likewise.\n\t(vbicq_f16): Likewise.\n\t(vandq_f16): Likewise.\n\t(vaddq_n_f16): Likewise.\n\t(vabdq_f16): Likewise.\n\t(vshlltq_n_s8): Likewise.\n\t(vshllbq_n_s8): Likewise.\n\t(vorrq_n_s16): Likewise.\n\t(vbicq_n_s16): Likewise.\n\t(vqmovntq_u32): Likewise.\n\t(vqmovnbq_u32): Likewise.\n\t(vmulltq_poly_p16): Likewise.\n\t(vmullbq_poly_p16): Likewise.\n\t(vmovntq_u32): Likewise.\n\t(vmovnbq_u32): Likewise.\n\t(vmlaldavxq_u32): Likewise.\n\t(vmlaldavq_u32): Likewise.\n\t(vqmovuntq_s32): Likewise.\n\t(vqmovunbq_s32): Likewise.\n\t(vshlltq_n_u16): Likewise.\n\t(vshllbq_n_u16): Likewise.\n\t(vorrq_n_u32): Likewise.\n\t(vbicq_n_u32): Likewise.\n\t(vcmpneq_n_f32): Likewise.\n\t(vcmpneq_f32): Likewise.\n\t(vcmpltq_n_f32): Likewise.\n\t(vcmpltq_f32): Likewise.\n\t(vcmpleq_n_f32): Likewise.\n\t(vcmpleq_f32): Likewise.\n\t(vcmpgtq_n_f32): Likewise.\n\t(vcmpgtq_f32): Likewise.\n\t(vcmpgeq_n_f32): Likewise.\n\t(vcmpgeq_f32): Likewise.\n\t(vcmpeqq_n_f32): Likewise.\n\t(vcmpeqq_f32): Likewise.\n\t(vsubq_f32): Likewise.\n\t(vqmovntq_s32): Likewise.\n\t(vqmovnbq_s32): Likewise.\n\t(vqdmulltq_s32): Likewise.\n\t(vqdmulltq_n_s32): Likewise.\n\t(vqdmullbq_s32): Likewise.\n\t(vqdmullbq_n_s32): Likewise.\n\t(vorrq_f32): Likewise.\n\t(vornq_f32): Likewise.\n\t(vmulq_n_f32): Likewise.\n\t(vmulq_f32): Likewise.\n\t(vmovntq_s32): Likewise.\n\t(vmovnbq_s32): Likewise.\n\t(vmlsldavxq_s32): Likewise.\n\t(vmlsldavq_s32): Likewise.\n\t(vmlaldavxq_s32): Likewise.\n\t(vmlaldavq_s32): Likewise.\n\t(vminnmvq_f32): Likewise.\n\t(vminnmq_f32): Likewise.\n\t(vminnmavq_f32): Likewise.\n\t(vminnmaq_f32): Likewise.\n\t(vmaxnmvq_f32): Likewise.\n\t(vmaxnmq_f32): Likewise.\n\t(vmaxnmavq_f32): Likewise.\n\t(vmaxnmaq_f32): Likewise.\n\t(veorq_f32): Likewise.\n\t(vcmulq_rot90_f32): Likewise.\n\t(vcmulq_rot270_f32): Likewise.\n\t(vcmulq_rot180_f32): Likewise.\n\t(vcmulq_f32): Likewise.\n\t(vcaddq_rot90_f32): Likewise.\n\t(vcaddq_rot270_f32): Likewise.\n\t(vbicq_f32): Likewise.\n\t(vandq_f32): Likewise.\n\t(vaddq_n_f32): Likewise.\n\t(vabdq_f32): Likewise.\n\t(vshlltq_n_s16): Likewise.\n\t(vshllbq_n_s16): Likewise.\n\t(vorrq_n_s32): Likewise.\n\t(vbicq_n_s32): Likewise.\n\t(vrmlaldavhq_u32): Likewise.\n\t(vctp8q_m): Likewise.\n\t(vctp64q_m): Likewise.\n\t(vctp32q_m): Likewise.\n\t(vctp16q_m): Likewise.\n\t(vaddlvaq_u32): Likewise.\n\t(vrmlsldavhxq_s32): Likewise.\n\t(vrmlsldavhq_s32): Likewise.\n\t(vrmlaldavhxq_s32): Likewise.\n\t(vrmlaldavhq_s32): Likewise.\n\t(vcvttq_f16_f32): Likewise.\n\t(vcvtbq_f16_f32): Likewise.\n\t(vaddlvaq_s32): Likewise.\n\t(__arm_vqmovntq_u16): Define intrinsic.\n\t(__arm_vqmovnbq_u16): Likewise.\n\t(__arm_vmulltq_poly_p8): Likewise.\n\t(__arm_vmullbq_poly_p8): Likewise.\n\t(__arm_vmovntq_u16): Likewise.\n\t(__arm_vmovnbq_u16): Likewise.\n\t(__arm_vmlaldavxq_u16): Likewise.\n\t(__arm_vmlaldavq_u16): Likewise.\n\t(__arm_vqmovuntq_s16): Likewise.\n\t(__arm_vqmovunbq_s16): Likewise.\n\t(__arm_vshlltq_n_u8): Likewise.\n\t(__arm_vshllbq_n_u8): Likewise.\n\t(__arm_vorrq_n_u16): Likewise.\n\t(__arm_vbicq_n_u16): Likewise.\n\t(__arm_vcmpneq_n_f16): Likewise.\n\t(__arm_vcmpneq_f16): Likewise.\n\t(__arm_vcmpltq_n_f16): Likewise.\n\t(__arm_vcmpltq_f16): Likewise.\n\t(__arm_vcmpleq_n_f16): Likewise.\n\t(__arm_vcmpleq_f16): Likewise.\n\t(__arm_vcmpgtq_n_f16): Likewise.\n\t(__arm_vcmpgtq_f16): Likewise.\n\t(__arm_vcmpgeq_n_f16): Likewise.\n\t(__arm_vcmpgeq_f16): Likewise.\n\t(__arm_vcmpeqq_n_f16): Likewise.\n\t(__arm_vcmpeqq_f16): Likewise.\n\t(__arm_vsubq_f16): Likewise.\n\t(__arm_vqmovntq_s16): Likewise.\n\t(__arm_vqmovnbq_s16): Likewise.\n\t(__arm_vqdmulltq_s16): Likewise.\n\t(__arm_vqdmulltq_n_s16): Likewise.\n\t(__arm_vqdmullbq_s16): Likewise.\n\t(__arm_vqdmullbq_n_s16): Likewise.\n\t(__arm_vorrq_f16): Likewise.\n\t(__arm_vornq_f16): Likewise.\n\t(__arm_vmulq_n_f16): Likewise.\n\t(__arm_vmulq_f16): Likewise.\n\t(__arm_vmovntq_s16): Likewise.\n\t(__arm_vmovnbq_s16): Likewise.\n\t(__arm_vmlsldavxq_s16): Likewise.\n\t(__arm_vmlsldavq_s16): Likewise.\n\t(__arm_vmlaldavxq_s16): Likewise.\n\t(__arm_vmlaldavq_s16): Likewise.\n\t(__arm_vminnmvq_f16): Likewise.\n\t(__arm_vminnmq_f16): Likewise.\n\t(__arm_vminnmavq_f16): Likewise.\n\t(__arm_vminnmaq_f16): Likewise.\n\t(__arm_vmaxnmvq_f16): Likewise.\n\t(__arm_vmaxnmq_f16): Likewise.\n\t(__arm_vmaxnmavq_f16): Likewise.\n\t(__arm_vmaxnmaq_f16): Likewise.\n\t(__arm_veorq_f16): Likewise.\n\t(__arm_vcmulq_rot90_f16): Likewise.\n\t(__arm_vcmulq_rot270_f16): Likewise.\n\t(__arm_vcmulq_rot180_f16): Likewise.\n\t(__arm_vcmulq_f16): Likewise.\n\t(__arm_vcaddq_rot90_f16): Likewise.\n\t(__arm_vcaddq_rot270_f16): Likewise.\n\t(__arm_vbicq_f16): Likewise.\n\t(__arm_vandq_f16): Likewise.\n\t(__arm_vaddq_n_f16): Likewise.\n\t(__arm_vabdq_f16): Likewise.\n\t(__arm_vshlltq_n_s8): Likewise.\n\t(__arm_vshllbq_n_s8): Likewise.\n\t(__arm_vorrq_n_s16): Likewise.\n\t(__arm_vbicq_n_s16): Likewise.\n\t(__arm_vqmovntq_u32): Likewise.\n\t(__arm_vqmovnbq_u32): Likewise.\n\t(__arm_vmulltq_poly_p16): Likewise.\n\t(__arm_vmullbq_poly_p16): Likewise.\n\t(__arm_vmovntq_u32): Likewise.\n\t(__arm_vmovnbq_u32): Likewise.\n\t(__arm_vmlaldavxq_u32): Likewise.\n\t(__arm_vmlaldavq_u32): Likewise.\n\t(__arm_vqmovuntq_s32): Likewise.\n\t(__arm_vqmovunbq_s32): Likewise.\n\t(__arm_vshlltq_n_u16): Likewise.\n\t(__arm_vshllbq_n_u16): Likewise.\n\t(__arm_vorrq_n_u32): Likewise.\n\t(__arm_vbicq_n_u32): Likewise.\n\t(__arm_vcmpneq_n_f32): Likewise.\n\t(__arm_vcmpneq_f32): Likewise.\n\t(__arm_vcmpltq_n_f32): Likewise.\n\t(__arm_vcmpltq_f32): Likewise.\n\t(__arm_vcmpleq_n_f32): Likewise.\n\t(__arm_vcmpleq_f32): Likewise.\n\t(__arm_vcmpgtq_n_f32): Likewise.\n\t(__arm_vcmpgtq_f32): Likewise.\n\t(__arm_vcmpgeq_n_f32): Likewise.\n\t(__arm_vcmpgeq_f32): Likewise.\n\t(__arm_vcmpeqq_n_f32): Likewise.\n\t(__arm_vcmpeqq_f32): Likewise.\n\t(__arm_vsubq_f32): Likewise.\n\t(__arm_vqmovntq_s32): Likewise.\n\t(__arm_vqmovnbq_s32): Likewise.\n\t(__arm_vqdmulltq_s32): Likewise.\n\t(__arm_vqdmulltq_n_s32): Likewise.\n\t(__arm_vqdmullbq_s32): Likewise.\n\t(__arm_vqdmullbq_n_s32): Likewise.\n\t(__arm_vorrq_f32): Likewise.\n\t(__arm_vornq_f32): Likewise.\n\t(__arm_vmulq_n_f32): Likewise.\n\t(__arm_vmulq_f32): Likewise.\n\t(__arm_vmovntq_s32): Likewise.\n\t(__arm_vmovnbq_s32): Likewise.\n\t(__arm_vmlsldavxq_s32): Likewise.\n\t(__arm_vmlsldavq_s32): Likewise.\n\t(__arm_vmlaldavxq_s32): Likewise.\n\t(__arm_vmlaldavq_s32): Likewise.\n\t(__arm_vminnmvq_f32): Likewise.\n\t(__arm_vminnmq_f32): Likewise.\n\t(__arm_vminnmavq_f32): Likewise.\n\t(__arm_vminnmaq_f32): Likewise.\n\t(__arm_vmaxnmvq_f32): Likewise.\n\t(__arm_vmaxnmq_f32): Likewise.\n\t(__arm_vmaxnmavq_f32): Likewise.\n\t(__arm_vmaxnmaq_f32): Likewise.\n\t(__arm_veorq_f32): Likewise.\n\t(__arm_vcmulq_rot90_f32): Likewise.\n\t(__arm_vcmulq_rot270_f32): Likewise.\n\t(__arm_vcmulq_rot180_f32): Likewise.\n\t(__arm_vcmulq_f32): Likewise.\n\t(__arm_vcaddq_rot90_f32): Likewise.\n\t(__arm_vcaddq_rot270_f32): Likewise.\n\t(__arm_vbicq_f32): Likewise.\n\t(__arm_vandq_f32): Likewise.\n\t(__arm_vaddq_n_f32): Likewise.\n\t(__arm_vabdq_f32): Likewise.\n\t(__arm_vshlltq_n_s16): Likewise.\n\t(__arm_vshllbq_n_s16): Likewise.\n\t(__arm_vorrq_n_s32): Likewise.\n\t(__arm_vbicq_n_s32): Likewise.\n\t(__arm_vrmlaldavhq_u32): Likewise.\n\t(__arm_vctp8q_m): Likewise.\n\t(__arm_vctp64q_m): Likewise.\n\t(__arm_vctp32q_m): Likewise.\n\t(__arm_vctp16q_m): Likewise.\n\t(__arm_vaddlvaq_u32): Likewise.\n\t(__arm_vrmlsldavhxq_s32): Likewise.\n\t(__arm_vrmlsldavhq_s32): Likewise.\n\t(__arm_vrmlaldavhxq_s32): Likewise.\n\t(__arm_vrmlaldavhq_s32): Likewise.\n\t(__arm_vcvttq_f16_f32): Likewise.\n\t(__arm_vcvtbq_f16_f32): Likewise.\n\t(__arm_vaddlvaq_s32): Likewise.\n\t(vst4q): Define polymorphic variant.\n\t(vrndxq): Likewise.\n\t(vrndq): Likewise.\n\t(vrndpq): Likewise.\n\t(vrndnq): Likewise.\n\t(vrndmq): Likewise.\n\t(vrndaq): Likewise.\n\t(vrev64q): Likewise.\n\t(vnegq): Likewise.\n\t(vdupq_n): Likewise.\n\t(vabsq): Likewise.\n\t(vrev32q): Likewise.\n\t(vcvtbq_f32): Likewise.\n\t(vcvttq_f32): Likewise.\n\t(vcvtq): Likewise.\n\t(vsubq_n): Likewise.\n\t(vbrsrq_n): Likewise.\n\t(vcvtq_n): Likewise.\n\t(vsubq): Likewise.\n\t(vorrq): Likewise.\n\t(vabdq): Likewise.\n\t(vaddq_n): Likewise.\n\t(vandq): Likewise.\n\t(vbicq): Likewise.\n\t(vornq): Likewise.\n\t(vmulq_n): Likewise.\n\t(vmulq): Likewise.\n\t(vcaddq_rot270): Likewise.\n\t(vcmpeqq_n): Likewise.\n\t(vcmpeqq): Likewise.\n\t(vcaddq_rot90): Likewise.\n\t(vcmpgeq_n): Likewise.\n\t(vcmpgeq): Likewise.\n\t(vcmpgtq_n): Likewise.\n\t(vcmpgtq): Likewise.\n\t(vcmpgtq): Likewise.\n\t(vcmpleq_n): Likewise.\n\t(vcmpleq_n): Likewise.\n\t(vcmpleq): Likewise.\n\t(vcmpleq): Likewise.\n\t(vcmpltq_n): Likewise.\n\t(vcmpltq_n): Likewise.\n\t(vcmpltq): Likewise.\n\t(vcmpltq): Likewise.\n\t(vcmpneq_n): Likewise.\n\t(vcmpneq_n): Likewise.\n\t(vcmpneq): Likewise.\n\t(vcmpneq): Likewise.\n\t(vcmulq): Likewise.\n\t(vcmulq): Likewise.\n\t(vcmulq_rot180): Likewise.\n\t(vcmulq_rot180): Likewise.\n\t(vcmulq_rot270): Likewise.\n\t(vcmulq_rot270): Likewise.\n\t(vcmulq_rot90): Likewise.\n\t(vcmulq_rot90): Likewise.\n\t(veorq): Likewise.\n\t(veorq): Likewise.\n\t(vmaxnmaq): Likewise.\n\t(vmaxnmaq): Likewise.\n\t(vmaxnmavq): Likewise.\n\t(vmaxnmavq): Likewise.\n\t(vmaxnmq): Likewise.\n\t(vmaxnmq): Likewise.\n\t(vmaxnmvq): Likewise.\n\t(vmaxnmvq): Likewise.\n\t(vminnmaq): Likewise.\n\t(vminnmaq): Likewise.\n\t(vminnmavq): Likewise.\n\t(vminnmavq): Likewise.\n\t(vminnmq): Likewise.\n\t(vminnmq): Likewise.\n\t(vminnmvq): Likewise.\n\t(vminnmvq): Likewise.\n\t(vbicq_n): Likewise.\n\t(vqmovntq): Likewise.\n\t(vqmovntq): Likewise.\n\t(vqmovnbq): Likewise.\n\t(vqmovnbq): Likewise.\n\t(vmulltq_poly): Likewise.\n\t(vmulltq_poly): Likewise.\n\t(vmullbq_poly): Likewise.\n\t(vmullbq_poly): Likewise.\n\t(vmovntq): Likewise.\n\t(vmovntq): Likewise.\n\t(vmovnbq): Likewise.\n\t(vmovnbq): Likewise.\n\t(vmlaldavxq): Likewise.\n\t(vmlaldavxq): Likewise.\n\t(vqmovuntq): Likewise.\n\t(vqmovuntq): Likewise.\n\t(vshlltq_n): Likewise.\n\t(vshlltq_n): Likewise.\n\t(vshllbq_n): Likewise.\n\t(vshllbq_n): Likewise.\n\t(vorrq_n): Likewise.\n\t(vorrq_n): Likewise.\n\t(vmlaldavq): Likewise.\n\t(vmlaldavq): Likewise.\n\t(vqmovunbq): Likewise.\n\t(vqmovunbq): Likewise.\n\t(vqdmulltq_n): Likewise.\n\t(vqdmulltq_n): Likewise.\n\t(vqdmulltq): Likewise.\n\t(vqdmulltq): Likewise.\n\t(vqdmullbq_n): Likewise.\n\t(vqdmullbq_n): Likewise.\n\t(vqdmullbq): Likewise.\n\t(vqdmullbq): Likewise.\n\t(vaddlvaq): Likewise.\n\t(vaddlvaq): Likewise.\n\t(vrmlaldavhq): Likewise.\n\t(vrmlaldavhq): Likewise.\n\t(vrmlaldavhxq): Likewise.\n\t(vrmlaldavhxq): Likewise.\n\t(vrmlsldavhq): Likewise.\n\t(vrmlsldavhq): Likewise.\n\t(vrmlsldavhxq): Likewise.\n\t(vrmlsldavhxq): Likewise.\n\t(vmlsldavxq): Likewise.\n\t(vmlsldavxq): Likewise.\n\t(vmlsldavq): Likewise.\n\t(vmlsldavq): Likewise.\n\t* config/arm/arm_mve_builtins.def (BINOP_NONE_NONE_IMM): Use it.\n\t(BINOP_NONE_NONE_NONE): Likewise.\n\t(BINOP_UNONE_NONE_NONE): Likewise.\n\t(BINOP_UNONE_UNONE_IMM): Likewise.\n\t(BINOP_UNONE_UNONE_NONE): Likewise.\n\t(BINOP_UNONE_UNONE_UNONE): Likewise.\n\t* config/arm/mve.md (mve_vabdq_f<mode>): Define RTL pattern.\n\t(mve_vaddlvaq_<supf>v4si): Likewise.\n\t(mve_vaddq_n_f<mode>): Likewise.\n\t(mve_vandq_f<mode>): Likewise.\n\t(mve_vbicq_f<mode>): Likewise.\n\t(mve_vbicq_n_<supf><mode>): Likewise.\n\t(mve_vcaddq_rot270_f<mode>): Likewise.\n\t(mve_vcaddq_rot90_f<mode>): Likewise.\n\t(mve_vcmpeqq_f<mode>): Likewise.\n\t(mve_vcmpeqq_n_f<mode>): Likewise.\n\t(mve_vcmpgeq_f<mode>): Likewise.\n\t(mve_vcmpgeq_n_f<mode>): Likewise.\n\t(mve_vcmpgtq_f<mode>): Likewise.\n\t(mve_vcmpgtq_n_f<mode>): Likewise.\n\t(mve_vcmpleq_f<mode>): Likewise.\n\t(mve_vcmpleq_n_f<mode>): Likewise.\n\t(mve_vcmpltq_f<mode>): Likewise.\n\t(mve_vcmpltq_n_f<mode>): Likewise.\n\t(mve_vcmpneq_f<mode>): Likewise.\n\t(mve_vcmpneq_n_f<mode>): Likewise.\n\t(mve_vcmulq_f<mode>): Likewise.\n\t(mve_vcmulq_rot180_f<mode>): Likewise.\n\t(mve_vcmulq_rot270_f<mode>): Likewise.\n\t(mve_vcmulq_rot90_f<mode>): Likewise.\n\t(mve_vctp<mode1>q_mhi): Likewise.\n\t(mve_vcvtbq_f16_f32v8hf): Likewise.\n\t(mve_vcvttq_f16_f32v8hf): Likewise.\n\t(mve_veorq_f<mode>): Likewise.\n\t(mve_vmaxnmaq_f<mode>): Likewise.\n\t(mve_vmaxnmavq_f<mode>): Likewise.\n\t(mve_vmaxnmq_f<mode>): Likewise.\n\t(mve_vmaxnmvq_f<mode>): Likewise.\n\t(mve_vminnmaq_f<mode>): Likewise.\n\t(mve_vminnmavq_f<mode>): Likewise.\n\t(mve_vminnmq_f<mode>): Likewise.\n\t(mve_vminnmvq_f<mode>): Likewise.\n\t(mve_vmlaldavq_<supf><mode>): Likewise.\n\t(mve_vmlaldavxq_<supf><mode>): Likewise.\n\t(mve_vmlsldavq_s<mode>): Likewise.\n\t(mve_vmlsldavxq_s<mode>): Likewise.\n\t(mve_vmovnbq_<supf><mode>): Likewise.\n\t(mve_vmovntq_<supf><mode>): Likewise.\n\t(mve_vmulq_f<mode>): Likewise.\n\t(mve_vmulq_n_f<mode>): Likewise.\n\t(mve_vornq_f<mode>): Likewise.\n\t(mve_vorrq_f<mode>): Likewise.\n\t(mve_vorrq_n_<supf><mode>): Likewise.\n\t(mve_vqdmullbq_n_s<mode>): Likewise.\n\t(mve_vqdmullbq_s<mode>): Likewise.\n\t(mve_vqdmulltq_n_s<mode>): Likewise.\n\t(mve_vqdmulltq_s<mode>): Likewise.\n\t(mve_vqmovnbq_<supf><mode>): Likewise.\n\t(mve_vqmovntq_<supf><mode>): Likewise.\n\t(mve_vqmovunbq_s<mode>): Likewise.\n\t(mve_vqmovuntq_s<mode>): Likewise.\n\t(mve_vrmlaldavhxq_sv4si): Likewise.\n\t(mve_vrmlsldavhq_sv4si): Likewise.\n\t(mve_vrmlsldavhxq_sv4si): Likewise.\n\t(mve_vshllbq_n_<supf><mode>): Likewise.\n\t(mve_vshlltq_n_<supf><mode>): Likewise.\n\t(mve_vsubq_f<mode>): Likewise.\n\t(mve_vmulltq_poly_p<mode>): Likewise.\n\t(mve_vmullbq_poly_p<mode>): Likewise.\n\t(mve_vrmlaldavhq_<supf>v4si): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vabdq_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vabdq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp16q_m.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp32q_m.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp64q_m.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp8q_m.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtbq_f16_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvttq_f16_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_p8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_p8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovunbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovunbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovuntq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovuntq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_f32.c: Likewise.", "tree": {"sha": "dcd2529c07a816c26d589873a01786e8eaf8c39d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcd2529c07a816c26d589873a01786e8eaf8c39d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9355dee93fce833b307c4e8e7eb6d9a7d831333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9355dee93fce833b307c4e8e7eb6d9a7d831333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9355dee93fce833b307c4e8e7eb6d9a7d831333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9355dee93fce833b307c4e8e7eb6d9a7d831333/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33203b4c27d09b22b6cb4cc90970867eba2cda3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33203b4c27d09b22b6cb4cc90970867eba2cda3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33203b4c27d09b22b6cb4cc90970867eba2cda3f"}], "stats": {"total": 8583, "additions": 7691, "deletions": 892}, "files": [{"sha": "af2a867bb60f04a43458a29069a22eca26f2f1a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 488, "deletions": 0, "changes": 488, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -1,3 +1,491 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vqmovntq_u16): Define macro.\n+\t(vqmovnbq_u16): Likewise.\n+\t(vmulltq_poly_p8): Likewise.\n+\t(vmullbq_poly_p8): Likewise.\n+\t(vmovntq_u16): Likewise.\n+\t(vmovnbq_u16): Likewise.\n+\t(vmlaldavxq_u16): Likewise.\n+\t(vmlaldavq_u16): Likewise.\n+\t(vqmovuntq_s16): Likewise.\n+\t(vqmovunbq_s16): Likewise.\n+\t(vshlltq_n_u8): Likewise.\n+\t(vshllbq_n_u8): Likewise.\n+\t(vorrq_n_u16): Likewise.\n+\t(vbicq_n_u16): Likewise.\n+\t(vcmpneq_n_f16): Likewise.\n+\t(vcmpneq_f16): Likewise.\n+\t(vcmpltq_n_f16): Likewise.\n+\t(vcmpltq_f16): Likewise.\n+\t(vcmpleq_n_f16): Likewise.\n+\t(vcmpleq_f16): Likewise.\n+\t(vcmpgtq_n_f16): Likewise.\n+\t(vcmpgtq_f16): Likewise.\n+\t(vcmpgeq_n_f16): Likewise.\n+\t(vcmpgeq_f16): Likewise.\n+\t(vcmpeqq_n_f16): Likewise.\n+\t(vcmpeqq_f16): Likewise.\n+\t(vsubq_f16): Likewise.\n+\t(vqmovntq_s16): Likewise.\n+\t(vqmovnbq_s16): Likewise.\n+\t(vqdmulltq_s16): Likewise.\n+\t(vqdmulltq_n_s16): Likewise.\n+\t(vqdmullbq_s16): Likewise.\n+\t(vqdmullbq_n_s16): Likewise.\n+\t(vorrq_f16): Likewise.\n+\t(vornq_f16): Likewise.\n+\t(vmulq_n_f16): Likewise.\n+\t(vmulq_f16): Likewise.\n+\t(vmovntq_s16): Likewise.\n+\t(vmovnbq_s16): Likewise.\n+\t(vmlsldavxq_s16): Likewise.\n+\t(vmlsldavq_s16): Likewise.\n+\t(vmlaldavxq_s16): Likewise.\n+\t(vmlaldavq_s16): Likewise.\n+\t(vminnmvq_f16): Likewise.\n+\t(vminnmq_f16): Likewise.\n+\t(vminnmavq_f16): Likewise.\n+\t(vminnmaq_f16): Likewise.\n+\t(vmaxnmvq_f16): Likewise.\n+\t(vmaxnmq_f16): Likewise.\n+\t(vmaxnmavq_f16): Likewise.\n+\t(vmaxnmaq_f16): Likewise.\n+\t(veorq_f16): Likewise.\n+\t(vcmulq_rot90_f16): Likewise.\n+\t(vcmulq_rot270_f16): Likewise.\n+\t(vcmulq_rot180_f16): Likewise.\n+\t(vcmulq_f16): Likewise.\n+\t(vcaddq_rot90_f16): Likewise.\n+\t(vcaddq_rot270_f16): Likewise.\n+\t(vbicq_f16): Likewise.\n+\t(vandq_f16): Likewise.\n+\t(vaddq_n_f16): Likewise.\n+\t(vabdq_f16): Likewise.\n+\t(vshlltq_n_s8): Likewise.\n+\t(vshllbq_n_s8): Likewise.\n+\t(vorrq_n_s16): Likewise.\n+\t(vbicq_n_s16): Likewise.\n+\t(vqmovntq_u32): Likewise.\n+\t(vqmovnbq_u32): Likewise.\n+\t(vmulltq_poly_p16): Likewise.\n+\t(vmullbq_poly_p16): Likewise.\n+\t(vmovntq_u32): Likewise.\n+\t(vmovnbq_u32): Likewise.\n+\t(vmlaldavxq_u32): Likewise.\n+\t(vmlaldavq_u32): Likewise.\n+\t(vqmovuntq_s32): Likewise.\n+\t(vqmovunbq_s32): Likewise.\n+\t(vshlltq_n_u16): Likewise.\n+\t(vshllbq_n_u16): Likewise.\n+\t(vorrq_n_u32): Likewise.\n+\t(vbicq_n_u32): Likewise.\n+\t(vcmpneq_n_f32): Likewise.\n+\t(vcmpneq_f32): Likewise.\n+\t(vcmpltq_n_f32): Likewise.\n+\t(vcmpltq_f32): Likewise.\n+\t(vcmpleq_n_f32): Likewise.\n+\t(vcmpleq_f32): Likewise.\n+\t(vcmpgtq_n_f32): Likewise.\n+\t(vcmpgtq_f32): Likewise.\n+\t(vcmpgeq_n_f32): Likewise.\n+\t(vcmpgeq_f32): Likewise.\n+\t(vcmpeqq_n_f32): Likewise.\n+\t(vcmpeqq_f32): Likewise.\n+\t(vsubq_f32): Likewise.\n+\t(vqmovntq_s32): Likewise.\n+\t(vqmovnbq_s32): Likewise.\n+\t(vqdmulltq_s32): Likewise.\n+\t(vqdmulltq_n_s32): Likewise.\n+\t(vqdmullbq_s32): Likewise.\n+\t(vqdmullbq_n_s32): Likewise.\n+\t(vorrq_f32): Likewise.\n+\t(vornq_f32): Likewise.\n+\t(vmulq_n_f32): Likewise.\n+\t(vmulq_f32): Likewise.\n+\t(vmovntq_s32): Likewise.\n+\t(vmovnbq_s32): Likewise.\n+\t(vmlsldavxq_s32): Likewise.\n+\t(vmlsldavq_s32): Likewise.\n+\t(vmlaldavxq_s32): Likewise.\n+\t(vmlaldavq_s32): Likewise.\n+\t(vminnmvq_f32): Likewise.\n+\t(vminnmq_f32): Likewise.\n+\t(vminnmavq_f32): Likewise.\n+\t(vminnmaq_f32): Likewise.\n+\t(vmaxnmvq_f32): Likewise.\n+\t(vmaxnmq_f32): Likewise.\n+\t(vmaxnmavq_f32): Likewise.\n+\t(vmaxnmaq_f32): Likewise.\n+\t(veorq_f32): Likewise.\n+\t(vcmulq_rot90_f32): Likewise.\n+\t(vcmulq_rot270_f32): Likewise.\n+\t(vcmulq_rot180_f32): Likewise.\n+\t(vcmulq_f32): Likewise.\n+\t(vcaddq_rot90_f32): Likewise.\n+\t(vcaddq_rot270_f32): Likewise.\n+\t(vbicq_f32): Likewise.\n+\t(vandq_f32): Likewise.\n+\t(vaddq_n_f32): Likewise.\n+\t(vabdq_f32): Likewise.\n+\t(vshlltq_n_s16): Likewise.\n+\t(vshllbq_n_s16): Likewise.\n+\t(vorrq_n_s32): Likewise.\n+\t(vbicq_n_s32): Likewise.\n+\t(vrmlaldavhq_u32): Likewise.\n+\t(vctp8q_m): Likewise.\n+\t(vctp64q_m): Likewise.\n+\t(vctp32q_m): Likewise.\n+\t(vctp16q_m): Likewise.\n+\t(vaddlvaq_u32): Likewise.\n+\t(vrmlsldavhxq_s32): Likewise.\n+\t(vrmlsldavhq_s32): Likewise.\n+\t(vrmlaldavhxq_s32): Likewise.\n+\t(vrmlaldavhq_s32): Likewise.\n+\t(vcvttq_f16_f32): Likewise.\n+\t(vcvtbq_f16_f32): Likewise.\n+\t(vaddlvaq_s32): Likewise.\n+\t(__arm_vqmovntq_u16): Define intrinsic.\n+\t(__arm_vqmovnbq_u16): Likewise.\n+\t(__arm_vmulltq_poly_p8): Likewise.\n+\t(__arm_vmullbq_poly_p8): Likewise.\n+\t(__arm_vmovntq_u16): Likewise.\n+\t(__arm_vmovnbq_u16): Likewise.\n+\t(__arm_vmlaldavxq_u16): Likewise.\n+\t(__arm_vmlaldavq_u16): Likewise.\n+\t(__arm_vqmovuntq_s16): Likewise.\n+\t(__arm_vqmovunbq_s16): Likewise.\n+\t(__arm_vshlltq_n_u8): Likewise.\n+\t(__arm_vshllbq_n_u8): Likewise.\n+\t(__arm_vorrq_n_u16): Likewise.\n+\t(__arm_vbicq_n_u16): Likewise.\n+\t(__arm_vcmpneq_n_f16): Likewise.\n+\t(__arm_vcmpneq_f16): Likewise.\n+\t(__arm_vcmpltq_n_f16): Likewise.\n+\t(__arm_vcmpltq_f16): Likewise.\n+\t(__arm_vcmpleq_n_f16): Likewise.\n+\t(__arm_vcmpleq_f16): Likewise.\n+\t(__arm_vcmpgtq_n_f16): Likewise.\n+\t(__arm_vcmpgtq_f16): Likewise.\n+\t(__arm_vcmpgeq_n_f16): Likewise.\n+\t(__arm_vcmpgeq_f16): Likewise.\n+\t(__arm_vcmpeqq_n_f16): Likewise.\n+\t(__arm_vcmpeqq_f16): Likewise.\n+\t(__arm_vsubq_f16): Likewise.\n+\t(__arm_vqmovntq_s16): Likewise.\n+\t(__arm_vqmovnbq_s16): Likewise.\n+\t(__arm_vqdmulltq_s16): Likewise.\n+\t(__arm_vqdmulltq_n_s16): Likewise.\n+\t(__arm_vqdmullbq_s16): Likewise.\n+\t(__arm_vqdmullbq_n_s16): Likewise.\n+\t(__arm_vorrq_f16): Likewise.\n+\t(__arm_vornq_f16): Likewise.\n+\t(__arm_vmulq_n_f16): Likewise.\n+\t(__arm_vmulq_f16): Likewise.\n+\t(__arm_vmovntq_s16): Likewise.\n+\t(__arm_vmovnbq_s16): Likewise.\n+\t(__arm_vmlsldavxq_s16): Likewise.\n+\t(__arm_vmlsldavq_s16): Likewise.\n+\t(__arm_vmlaldavxq_s16): Likewise.\n+\t(__arm_vmlaldavq_s16): Likewise.\n+\t(__arm_vminnmvq_f16): Likewise.\n+\t(__arm_vminnmq_f16): Likewise.\n+\t(__arm_vminnmavq_f16): Likewise.\n+\t(__arm_vminnmaq_f16): Likewise.\n+\t(__arm_vmaxnmvq_f16): Likewise.\n+\t(__arm_vmaxnmq_f16): Likewise.\n+\t(__arm_vmaxnmavq_f16): Likewise.\n+\t(__arm_vmaxnmaq_f16): Likewise.\n+\t(__arm_veorq_f16): Likewise.\n+\t(__arm_vcmulq_rot90_f16): Likewise.\n+\t(__arm_vcmulq_rot270_f16): Likewise.\n+\t(__arm_vcmulq_rot180_f16): Likewise.\n+\t(__arm_vcmulq_f16): Likewise.\n+\t(__arm_vcaddq_rot90_f16): Likewise.\n+\t(__arm_vcaddq_rot270_f16): Likewise.\n+\t(__arm_vbicq_f16): Likewise.\n+\t(__arm_vandq_f16): Likewise.\n+\t(__arm_vaddq_n_f16): Likewise.\n+\t(__arm_vabdq_f16): Likewise.\n+\t(__arm_vshlltq_n_s8): Likewise.\n+\t(__arm_vshllbq_n_s8): Likewise.\n+\t(__arm_vorrq_n_s16): Likewise.\n+\t(__arm_vbicq_n_s16): Likewise.\n+\t(__arm_vqmovntq_u32): Likewise.\n+\t(__arm_vqmovnbq_u32): Likewise.\n+\t(__arm_vmulltq_poly_p16): Likewise.\n+\t(__arm_vmullbq_poly_p16): Likewise.\n+\t(__arm_vmovntq_u32): Likewise.\n+\t(__arm_vmovnbq_u32): Likewise.\n+\t(__arm_vmlaldavxq_u32): Likewise.\n+\t(__arm_vmlaldavq_u32): Likewise.\n+\t(__arm_vqmovuntq_s32): Likewise.\n+\t(__arm_vqmovunbq_s32): Likewise.\n+\t(__arm_vshlltq_n_u16): Likewise.\n+\t(__arm_vshllbq_n_u16): Likewise.\n+\t(__arm_vorrq_n_u32): Likewise.\n+\t(__arm_vbicq_n_u32): Likewise.\n+\t(__arm_vcmpneq_n_f32): Likewise.\n+\t(__arm_vcmpneq_f32): Likewise.\n+\t(__arm_vcmpltq_n_f32): Likewise.\n+\t(__arm_vcmpltq_f32): Likewise.\n+\t(__arm_vcmpleq_n_f32): Likewise.\n+\t(__arm_vcmpleq_f32): Likewise.\n+\t(__arm_vcmpgtq_n_f32): Likewise.\n+\t(__arm_vcmpgtq_f32): Likewise.\n+\t(__arm_vcmpgeq_n_f32): Likewise.\n+\t(__arm_vcmpgeq_f32): Likewise.\n+\t(__arm_vcmpeqq_n_f32): Likewise.\n+\t(__arm_vcmpeqq_f32): Likewise.\n+\t(__arm_vsubq_f32): Likewise.\n+\t(__arm_vqmovntq_s32): Likewise.\n+\t(__arm_vqmovnbq_s32): Likewise.\n+\t(__arm_vqdmulltq_s32): Likewise.\n+\t(__arm_vqdmulltq_n_s32): Likewise.\n+\t(__arm_vqdmullbq_s32): Likewise.\n+\t(__arm_vqdmullbq_n_s32): Likewise.\n+\t(__arm_vorrq_f32): Likewise.\n+\t(__arm_vornq_f32): Likewise.\n+\t(__arm_vmulq_n_f32): Likewise.\n+\t(__arm_vmulq_f32): Likewise.\n+\t(__arm_vmovntq_s32): Likewise.\n+\t(__arm_vmovnbq_s32): Likewise.\n+\t(__arm_vmlsldavxq_s32): Likewise.\n+\t(__arm_vmlsldavq_s32): Likewise.\n+\t(__arm_vmlaldavxq_s32): Likewise.\n+\t(__arm_vmlaldavq_s32): Likewise.\n+\t(__arm_vminnmvq_f32): Likewise.\n+\t(__arm_vminnmq_f32): Likewise.\n+\t(__arm_vminnmavq_f32): Likewise.\n+\t(__arm_vminnmaq_f32): Likewise.\n+\t(__arm_vmaxnmvq_f32): Likewise.\n+\t(__arm_vmaxnmq_f32): Likewise.\n+\t(__arm_vmaxnmavq_f32): Likewise.\n+\t(__arm_vmaxnmaq_f32): Likewise.\n+\t(__arm_veorq_f32): Likewise.\n+\t(__arm_vcmulq_rot90_f32): Likewise.\n+\t(__arm_vcmulq_rot270_f32): Likewise.\n+\t(__arm_vcmulq_rot180_f32): Likewise.\n+\t(__arm_vcmulq_f32): Likewise.\n+\t(__arm_vcaddq_rot90_f32): Likewise.\n+\t(__arm_vcaddq_rot270_f32): Likewise.\n+\t(__arm_vbicq_f32): Likewise.\n+\t(__arm_vandq_f32): Likewise.\n+\t(__arm_vaddq_n_f32): Likewise.\n+\t(__arm_vabdq_f32): Likewise.\n+\t(__arm_vshlltq_n_s16): Likewise.\n+\t(__arm_vshllbq_n_s16): Likewise.\n+\t(__arm_vorrq_n_s32): Likewise.\n+\t(__arm_vbicq_n_s32): Likewise.\n+\t(__arm_vrmlaldavhq_u32): Likewise.\n+\t(__arm_vctp8q_m): Likewise.\n+\t(__arm_vctp64q_m): Likewise.\n+\t(__arm_vctp32q_m): Likewise.\n+\t(__arm_vctp16q_m): Likewise.\n+\t(__arm_vaddlvaq_u32): Likewise.\n+\t(__arm_vrmlsldavhxq_s32): Likewise.\n+\t(__arm_vrmlsldavhq_s32): Likewise.\n+\t(__arm_vrmlaldavhxq_s32): Likewise.\n+\t(__arm_vrmlaldavhq_s32): Likewise.\n+\t(__arm_vcvttq_f16_f32): Likewise.\n+\t(__arm_vcvtbq_f16_f32): Likewise.\n+\t(__arm_vaddlvaq_s32): Likewise.\n+\t(vst4q): Define polymorphic variant.\n+\t(vrndxq): Likewise.\n+\t(vrndq): Likewise.\n+\t(vrndpq): Likewise.\n+\t(vrndnq): Likewise.\n+\t(vrndmq): Likewise.\n+\t(vrndaq): Likewise.\n+\t(vrev64q): Likewise.\n+\t(vnegq): Likewise.\n+\t(vdupq_n): Likewise.\n+\t(vabsq): Likewise.\n+\t(vrev32q): Likewise.\n+\t(vcvtbq_f32): Likewise.\n+\t(vcvttq_f32): Likewise.\n+\t(vcvtq): Likewise.\n+\t(vsubq_n): Likewise.\n+\t(vbrsrq_n): Likewise.\n+\t(vcvtq_n): Likewise.\n+\t(vsubq): Likewise.\n+\t(vorrq): Likewise.\n+\t(vabdq): Likewise.\n+\t(vaddq_n): Likewise.\n+\t(vandq): Likewise.\n+\t(vbicq): Likewise.\n+\t(vornq): Likewise.\n+\t(vmulq_n): Likewise.\n+\t(vmulq): Likewise.\n+\t(vcaddq_rot270): Likewise.\n+\t(vcmpeqq_n): Likewise.\n+\t(vcmpeqq): Likewise.\n+\t(vcaddq_rot90): Likewise.\n+\t(vcmpgeq_n): Likewise.\n+\t(vcmpgeq): Likewise.\n+\t(vcmpgtq_n): Likewise.\n+\t(vcmpgtq): Likewise.\n+\t(vcmpgtq): Likewise.\n+\t(vcmpleq_n): Likewise.\n+\t(vcmpleq_n): Likewise.\n+\t(vcmpleq): Likewise.\n+\t(vcmpleq): Likewise.\n+\t(vcmpltq_n): Likewise.\n+\t(vcmpltq_n): Likewise.\n+\t(vcmpltq): Likewise.\n+\t(vcmpltq): Likewise.\n+\t(vcmpneq_n): Likewise.\n+\t(vcmpneq_n): Likewise.\n+\t(vcmpneq): Likewise.\n+\t(vcmpneq): Likewise.\n+\t(vcmulq): Likewise.\n+\t(vcmulq): Likewise.\n+\t(vcmulq_rot180): Likewise.\n+\t(vcmulq_rot180): Likewise.\n+\t(vcmulq_rot270): Likewise.\n+\t(vcmulq_rot270): Likewise.\n+\t(vcmulq_rot90): Likewise.\n+\t(vcmulq_rot90): Likewise.\n+\t(veorq): Likewise.\n+\t(veorq): Likewise.\n+\t(vmaxnmaq): Likewise.\n+\t(vmaxnmaq): Likewise.\n+\t(vmaxnmavq): Likewise.\n+\t(vmaxnmavq): Likewise.\n+\t(vmaxnmq): Likewise.\n+\t(vmaxnmq): Likewise.\n+\t(vmaxnmvq): Likewise.\n+\t(vmaxnmvq): Likewise.\n+\t(vminnmaq): Likewise.\n+\t(vminnmaq): Likewise.\n+\t(vminnmavq): Likewise.\n+\t(vminnmavq): Likewise.\n+\t(vminnmq): Likewise.\n+\t(vminnmq): Likewise.\n+\t(vminnmvq): Likewise.\n+\t(vminnmvq): Likewise.\n+\t(vbicq_n): Likewise.\n+\t(vqmovntq): Likewise.\n+\t(vqmovntq): Likewise.\n+\t(vqmovnbq): Likewise.\n+\t(vqmovnbq): Likewise.\n+\t(vmulltq_poly): Likewise.\n+\t(vmulltq_poly): Likewise.\n+\t(vmullbq_poly): Likewise.\n+\t(vmullbq_poly): Likewise.\n+\t(vmovntq): Likewise.\n+\t(vmovntq): Likewise.\n+\t(vmovnbq): Likewise.\n+\t(vmovnbq): Likewise.\n+\t(vmlaldavxq): Likewise.\n+\t(vmlaldavxq): Likewise.\n+\t(vqmovuntq): Likewise.\n+\t(vqmovuntq): Likewise.\n+\t(vshlltq_n): Likewise.\n+\t(vshlltq_n): Likewise.\n+\t(vshllbq_n): Likewise.\n+\t(vshllbq_n): Likewise.\n+\t(vorrq_n): Likewise.\n+\t(vorrq_n): Likewise.\n+\t(vmlaldavq): Likewise.\n+\t(vmlaldavq): Likewise.\n+\t(vqmovunbq): Likewise.\n+\t(vqmovunbq): Likewise.\n+\t(vqdmulltq_n): Likewise.\n+\t(vqdmulltq_n): Likewise.\n+\t(vqdmulltq): Likewise.\n+\t(vqdmulltq): Likewise.\n+\t(vqdmullbq_n): Likewise.\n+\t(vqdmullbq_n): Likewise.\n+\t(vqdmullbq): Likewise.\n+\t(vqdmullbq): Likewise.\n+\t(vaddlvaq): Likewise.\n+\t(vaddlvaq): Likewise.\n+\t(vrmlaldavhq): Likewise.\n+\t(vrmlaldavhq): Likewise.\n+\t(vrmlaldavhxq): Likewise.\n+\t(vrmlaldavhxq): Likewise.\n+\t(vrmlsldavhq): Likewise.\n+\t(vrmlsldavhq): Likewise.\n+\t(vrmlsldavhxq): Likewise.\n+\t(vrmlsldavhxq): Likewise.\n+\t(vmlsldavxq): Likewise.\n+\t(vmlsldavxq): Likewise.\n+\t(vmlsldavq): Likewise.\n+\t(vmlsldavq): Likewise.\n+\t* config/arm/arm_mve_builtins.def (BINOP_NONE_NONE_IMM): Use it.\n+\t(BINOP_NONE_NONE_NONE): Likewise.\n+\t(BINOP_UNONE_NONE_NONE): Likewise.\n+\t(BINOP_UNONE_UNONE_IMM): Likewise.\n+\t(BINOP_UNONE_UNONE_NONE): Likewise.\n+\t(BINOP_UNONE_UNONE_UNONE): Likewise.\n+\t* config/arm/mve.md (mve_vabdq_f<mode>): Define RTL pattern.\n+\t(mve_vaddlvaq_<supf>v4si): Likewise.\n+\t(mve_vaddq_n_f<mode>): Likewise.\n+\t(mve_vandq_f<mode>): Likewise.\n+\t(mve_vbicq_f<mode>): Likewise.\n+\t(mve_vbicq_n_<supf><mode>): Likewise.\n+\t(mve_vcaddq_rot270_f<mode>): Likewise.\n+\t(mve_vcaddq_rot90_f<mode>): Likewise.\n+\t(mve_vcmpeqq_f<mode>): Likewise.\n+\t(mve_vcmpeqq_n_f<mode>): Likewise.\n+\t(mve_vcmpgeq_f<mode>): Likewise.\n+\t(mve_vcmpgeq_n_f<mode>): Likewise.\n+\t(mve_vcmpgtq_f<mode>): Likewise.\n+\t(mve_vcmpgtq_n_f<mode>): Likewise.\n+\t(mve_vcmpleq_f<mode>): Likewise.\n+\t(mve_vcmpleq_n_f<mode>): Likewise.\n+\t(mve_vcmpltq_f<mode>): Likewise.\n+\t(mve_vcmpltq_n_f<mode>): Likewise.\n+\t(mve_vcmpneq_f<mode>): Likewise.\n+\t(mve_vcmpneq_n_f<mode>): Likewise.\n+\t(mve_vcmulq_f<mode>): Likewise.\n+\t(mve_vcmulq_rot180_f<mode>): Likewise.\n+\t(mve_vcmulq_rot270_f<mode>): Likewise.\n+\t(mve_vcmulq_rot90_f<mode>): Likewise.\n+\t(mve_vctp<mode1>q_mhi): Likewise.\n+\t(mve_vcvtbq_f16_f32v8hf): Likewise.\n+\t(mve_vcvttq_f16_f32v8hf): Likewise.\n+\t(mve_veorq_f<mode>): Likewise.\n+\t(mve_vmaxnmaq_f<mode>): Likewise.\n+\t(mve_vmaxnmavq_f<mode>): Likewise.\n+\t(mve_vmaxnmq_f<mode>): Likewise.\n+\t(mve_vmaxnmvq_f<mode>): Likewise.\n+\t(mve_vminnmaq_f<mode>): Likewise.\n+\t(mve_vminnmavq_f<mode>): Likewise.\n+\t(mve_vminnmq_f<mode>): Likewise.\n+\t(mve_vminnmvq_f<mode>): Likewise.\n+\t(mve_vmlaldavq_<supf><mode>): Likewise.\n+\t(mve_vmlaldavxq_<supf><mode>): Likewise.\n+\t(mve_vmlsldavq_s<mode>): Likewise.\n+\t(mve_vmlsldavxq_s<mode>): Likewise.\n+\t(mve_vmovnbq_<supf><mode>): Likewise.\n+\t(mve_vmovntq_<supf><mode>): Likewise.\n+\t(mve_vmulq_f<mode>): Likewise.\n+\t(mve_vmulq_n_f<mode>): Likewise.\n+\t(mve_vornq_f<mode>): Likewise.\n+\t(mve_vorrq_f<mode>): Likewise.\n+\t(mve_vorrq_n_<supf><mode>): Likewise.\n+\t(mve_vqdmullbq_n_s<mode>): Likewise.\n+\t(mve_vqdmullbq_s<mode>): Likewise.\n+\t(mve_vqdmulltq_n_s<mode>): Likewise.\n+\t(mve_vqdmulltq_s<mode>): Likewise.\n+\t(mve_vqmovnbq_<supf><mode>): Likewise.\n+\t(mve_vqmovntq_<supf><mode>): Likewise.\n+\t(mve_vqmovunbq_s<mode>): Likewise.\n+\t(mve_vqmovuntq_s<mode>): Likewise.\n+\t(mve_vrmlaldavhxq_sv4si): Likewise.\n+\t(mve_vrmlsldavhq_sv4si): Likewise.\n+\t(mve_vrmlsldavhxq_sv4si): Likewise.\n+\t(mve_vshllbq_n_<supf><mode>): Likewise.\n+\t(mve_vshlltq_n_<supf><mode>): Likewise.\n+\t(mve_vsubq_f<mode>): Likewise.\n+\t(mve_vmulltq_poly_p<mode>): Likewise.\n+\t(mve_vmullbq_poly_p<mode>): Likewise.\n+\t(mve_vrmlaldavhq_<supf>v4si): Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "db5e472e819ea45ba8998d1f6fe80a82bff19f61", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 2643, "deletions": 636, "changes": 3279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333"}, {"sha": "7129b99bc990c30b06c6f5413a84bfe100ebfebe", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 273, "deletions": 195, "changes": 468, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -18,198 +18,276 @@\n     along with GCC; see the file COPYING3.  If not see\n     <http://www.gnu.org/licenses/>.  */\n \n-VAR5 (STORE1, vst4q, v16qi, v8hi, v4si, v8hf, v4sf)\n-VAR2 (UNOP_NONE_NONE, vrndxq_f, v8hf, v4sf)\n-VAR2 (UNOP_NONE_NONE, vrndq_f, v8hf, v4sf)\n-VAR2 (UNOP_NONE_NONE, vrndpq_f, v8hf, v4sf)\n-VAR2 (UNOP_NONE_NONE, vrndnq_f, v8hf, v4sf)\n-VAR2 (UNOP_NONE_NONE, vrndmq_f, v8hf, v4sf)\n-VAR2 (UNOP_NONE_NONE, vrndaq_f, v8hf, v4sf)\n-VAR2 (UNOP_NONE_NONE, vrev64q_f, v8hf, v4sf)\n-VAR2 (UNOP_NONE_NONE, vnegq_f, v8hf, v4sf)\n-VAR2 (UNOP_NONE_NONE, vdupq_n_f, v8hf, v4sf)\n-VAR2 (UNOP_NONE_NONE, vabsq_f, v8hf, v4sf)\n-VAR1 (UNOP_NONE_NONE, vrev32q_f, v8hf)\n-VAR1 (UNOP_NONE_NONE, vcvttq_f32_f16, v4sf)\n-VAR1 (UNOP_NONE_NONE, vcvtbq_f32_f16, v4sf)\n-VAR2 (UNOP_NONE_SNONE, vcvtq_to_f_s, v8hf, v4sf)\n-VAR2 (UNOP_NONE_UNONE, vcvtq_to_f_u, v8hf, v4sf)\n-VAR3 (UNOP_SNONE_SNONE, vrev64q_s, v16qi, v8hi, v4si)\n-VAR3 (UNOP_SNONE_SNONE, vqnegq_s, v16qi, v8hi, v4si)\n-VAR3 (UNOP_SNONE_SNONE, vqabsq_s, v16qi, v8hi, v4si)\n-VAR3 (UNOP_SNONE_SNONE, vnegq_s, v16qi, v8hi, v4si)\n-VAR3 (UNOP_SNONE_SNONE, vmvnq_s, v16qi, v8hi, v4si)\n-VAR3 (UNOP_SNONE_SNONE, vdupq_n_s, v16qi, v8hi, v4si)\n-VAR3 (UNOP_SNONE_SNONE, vclzq_s, v16qi, v8hi, v4si)\n-VAR3 (UNOP_SNONE_SNONE, vclsq_s, v16qi, v8hi, v4si)\n-VAR3 (UNOP_SNONE_SNONE, vaddvq_s, v16qi, v8hi, v4si)\n-VAR3 (UNOP_SNONE_SNONE, vabsq_s, v16qi, v8hi, v4si)\n-VAR2 (UNOP_SNONE_SNONE, vrev32q_s, v16qi, v8hi)\n-VAR2 (UNOP_SNONE_SNONE, vmovltq_s, v16qi, v8hi)\n-VAR2 (UNOP_SNONE_SNONE, vmovlbq_s, v16qi, v8hi)\n-VAR2 (UNOP_SNONE_NONE, vcvtq_from_f_s, v8hi, v4si)\n-VAR2 (UNOP_SNONE_NONE, vcvtpq_s, v8hi, v4si)\n-VAR2 (UNOP_SNONE_NONE, vcvtnq_s, v8hi, v4si)\n-VAR2 (UNOP_SNONE_NONE, vcvtmq_s, v8hi, v4si)\n-VAR2 (UNOP_SNONE_NONE, vcvtaq_s, v8hi, v4si)\n-VAR2 (UNOP_SNONE_IMM, vmvnq_n_s, v8hi, v4si)\n-VAR1 (UNOP_SNONE_SNONE, vrev16q_s, v16qi)\n-VAR1 (UNOP_SNONE_SNONE, vaddlvq_s, v4si)\n-VAR3 (UNOP_UNONE_UNONE, vrev64q_u, v16qi, v8hi, v4si)\n-VAR3 (UNOP_UNONE_UNONE, vmvnq_u, v16qi, v8hi, v4si)\n-VAR3 (UNOP_UNONE_UNONE, vdupq_n_u, v16qi, v8hi, v4si)\n-VAR3 (UNOP_UNONE_UNONE, vclzq_u, v16qi, v8hi, v4si)\n-VAR3 (UNOP_UNONE_UNONE, vaddvq_u, v16qi, v8hi, v4si)\n-VAR2 (UNOP_UNONE_UNONE, vrev32q_u, v16qi, v8hi)\n-VAR2 (UNOP_UNONE_UNONE, vmovltq_u, v16qi, v8hi)\n-VAR2 (UNOP_UNONE_UNONE, vmovlbq_u, v16qi, v8hi)\n-VAR2 (UNOP_UNONE_NONE, vcvtq_from_f_u, v8hi, v4si)\n-VAR2 (UNOP_UNONE_NONE, vcvtpq_u, v8hi, v4si)\n-VAR2 (UNOP_UNONE_NONE, vcvtnq_u, v8hi, v4si)\n-VAR2 (UNOP_UNONE_NONE, vcvtmq_u, v8hi, v4si)\n-VAR2 (UNOP_UNONE_NONE, vcvtaq_u, v8hi, v4si)\n-VAR2 (UNOP_UNONE_IMM, vmvnq_n_u, v8hi, v4si)\n-VAR1 (UNOP_UNONE_UNONE, vrev16q_u, v16qi)\n-VAR1 (UNOP_UNONE_UNONE, vaddlvq_u, v4si)\n-VAR1 (UNOP_UNONE_UNONE, vctp16q, hi)\n-VAR1 (UNOP_UNONE_UNONE, vctp32q, hi)\n-VAR1 (UNOP_UNONE_UNONE, vctp64q, hi)\n-VAR1 (UNOP_UNONE_UNONE, vctp8q, hi)\n-VAR1 (UNOP_UNONE_UNONE, vpnot, hi)\n-VAR2 (BINOP_NONE_NONE_NONE, vsubq_n_f, v8hf, v4sf)\n-VAR2 (BINOP_NONE_NONE_NONE, vbrsrq_n_f, v8hf, v4sf)\n-VAR2 (BINOP_NONE_NONE_IMM, vcvtq_n_to_f_s, v8hf, v4sf)\n-VAR2 (BINOP_NONE_UNONE_IMM, vcvtq_n_to_f_u, v8hf, v4sf)\n-VAR2 (BINOP_NONE_UNONE_UNONE, vcreateq_f, v8hf, v4sf)\n-VAR2 (BINOP_UNONE_NONE_IMM, vcvtq_n_from_f_u, v8hi, v4si)\n-VAR2 (BINOP_NONE_NONE_IMM, vcvtq_n_from_f_s, v8hi, v4si)\n-VAR4 (BINOP_UNONE_UNONE_UNONE, vcreateq_u, v16qi, v8hi, v4si, v2di)\n-VAR4 (BINOP_NONE_UNONE_UNONE, vcreateq_s, v16qi, v8hi, v4si, v2di)\n-VAR3 (BINOP_UNONE_UNONE_IMM, vshrq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_IMM, vshrq_n_s, v16qi, v8hi, v4si)\n-VAR1 (BINOP_NONE_NONE_UNONE, vaddlvq_p_s, v4si)\n-VAR1 (BINOP_UNONE_UNONE_UNONE, vaddlvq_p_u, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpneq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vshlq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vshlq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vsubq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vsubq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vrmulhq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vrhaddq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vqsubq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vqsubq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vqaddq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vqaddq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vorrq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vornq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vmulq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vmulq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vmulltq_int_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vmullbq_int_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vmulhq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vmladavq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vminvq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vminq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vmaxvq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vmaxq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vhsubq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vhsubq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vhaddq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vhaddq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, veorq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpneq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpeqq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpeqq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcaddq_rot90_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcaddq_rot270_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vbicq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vandq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vaddvq_p_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vaddvaq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vaddq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vabdq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vshlq_r_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vrshlq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vrshlq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vqshlq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vqshlq_r_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vqrshlq_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vqrshlq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vminavq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vminaq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vmaxavq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vmaxaq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_NONE, vbrsrq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_IMM, vshlq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_IMM, vrshrq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_IMM, vqshlq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_NONE_IMM, vqshluq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_UNONE, vaddvq_p_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vsubq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vsubq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vshlq_r_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vrshlq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vrshlq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vrmulhq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vrhaddq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqsubq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqsubq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqshlq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqshlq_r_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqrshlq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqrshlq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqrdmulhq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqrdmulhq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqdmulhq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqdmulhq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqaddq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vqaddq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vorrq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vornq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vmulq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vmulq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vmulltq_int_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vmullbq_int_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vmulhq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vmlsdavxq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vmlsdavq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vmladavxq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vmladavq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vminvq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vminq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vmaxvq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vmaxq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vhsubq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vhsubq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vhcaddq_rot90_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vhcaddq_rot270_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vhaddq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vhaddq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, veorq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vcaddq_rot90_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vcaddq_rot270_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vbrsrq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vbicq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vandq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vaddvaq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vaddq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vabdq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_IMM, vshlq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_IMM, vrshrq_n_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_IMM, vqshlq_n_s, v16qi, v8hi, v4si)\n+VAR5(STORE1, vst4q, v16qi, v8hi, v4si, v8hf, v4sf)\n+VAR2(UNOP_NONE_NONE, vrndxq_f, v8hf, v4sf)\n+VAR2(UNOP_NONE_NONE, vrndq_f, v8hf, v4sf)\n+VAR2(UNOP_NONE_NONE, vrndpq_f, v8hf, v4sf)\n+VAR2(UNOP_NONE_NONE, vrndnq_f, v8hf, v4sf)\n+VAR2(UNOP_NONE_NONE, vrndmq_f, v8hf, v4sf)\n+VAR2(UNOP_NONE_NONE, vrndaq_f, v8hf, v4sf)\n+VAR2(UNOP_NONE_NONE, vrev64q_f, v8hf, v4sf)\n+VAR2(UNOP_NONE_NONE, vnegq_f, v8hf, v4sf)\n+VAR2(UNOP_NONE_NONE, vdupq_n_f, v8hf, v4sf)\n+VAR2(UNOP_NONE_NONE, vabsq_f, v8hf, v4sf)\n+VAR1(UNOP_NONE_NONE, vrev32q_f, v8hf)\n+VAR1(UNOP_NONE_NONE, vcvttq_f32_f16, v4sf)\n+VAR1(UNOP_NONE_NONE, vcvtbq_f32_f16, v4sf)\n+VAR2(UNOP_NONE_SNONE, vcvtq_to_f_s, v8hf, v4sf)\n+VAR2(UNOP_NONE_UNONE, vcvtq_to_f_u, v8hf, v4sf)\n+VAR3(UNOP_SNONE_SNONE, vrev64q_s, v16qi, v8hi, v4si)\n+VAR3(UNOP_SNONE_SNONE, vqnegq_s, v16qi, v8hi, v4si)\n+VAR3(UNOP_SNONE_SNONE, vqabsq_s, v16qi, v8hi, v4si)\n+VAR3(UNOP_SNONE_SNONE, vnegq_s, v16qi, v8hi, v4si)\n+VAR3(UNOP_SNONE_SNONE, vmvnq_s, v16qi, v8hi, v4si)\n+VAR3(UNOP_SNONE_SNONE, vdupq_n_s, v16qi, v8hi, v4si)\n+VAR3(UNOP_SNONE_SNONE, vclzq_s, v16qi, v8hi, v4si)\n+VAR3(UNOP_SNONE_SNONE, vclsq_s, v16qi, v8hi, v4si)\n+VAR3(UNOP_SNONE_SNONE, vaddvq_s, v16qi, v8hi, v4si)\n+VAR3(UNOP_SNONE_SNONE, vabsq_s, v16qi, v8hi, v4si)\n+VAR2(UNOP_SNONE_SNONE, vrev32q_s, v16qi, v8hi)\n+VAR2(UNOP_SNONE_SNONE, vmovltq_s, v16qi, v8hi)\n+VAR2(UNOP_SNONE_SNONE, vmovlbq_s, v16qi, v8hi)\n+VAR2(UNOP_SNONE_NONE, vcvtq_from_f_s, v8hi, v4si)\n+VAR2(UNOP_SNONE_NONE, vcvtpq_s, v8hi, v4si)\n+VAR2(UNOP_SNONE_NONE, vcvtnq_s, v8hi, v4si)\n+VAR2(UNOP_SNONE_NONE, vcvtmq_s, v8hi, v4si)\n+VAR2(UNOP_SNONE_NONE, vcvtaq_s, v8hi, v4si)\n+VAR2(UNOP_SNONE_IMM, vmvnq_n_s, v8hi, v4si)\n+VAR1(UNOP_SNONE_SNONE, vrev16q_s, v16qi)\n+VAR1(UNOP_SNONE_SNONE, vaddlvq_s, v4si)\n+VAR3(UNOP_UNONE_UNONE, vrev64q_u, v16qi, v8hi, v4si)\n+VAR3(UNOP_UNONE_UNONE, vmvnq_u, v16qi, v8hi, v4si)\n+VAR3(UNOP_UNONE_UNONE, vdupq_n_u, v16qi, v8hi, v4si)\n+VAR3(UNOP_UNONE_UNONE, vclzq_u, v16qi, v8hi, v4si)\n+VAR3(UNOP_UNONE_UNONE, vaddvq_u, v16qi, v8hi, v4si)\n+VAR2(UNOP_UNONE_UNONE, vrev32q_u, v16qi, v8hi)\n+VAR2(UNOP_UNONE_UNONE, vmovltq_u, v16qi, v8hi)\n+VAR2(UNOP_UNONE_UNONE, vmovlbq_u, v16qi, v8hi)\n+VAR2(UNOP_UNONE_NONE, vcvtq_from_f_u, v8hi, v4si)\n+VAR2(UNOP_UNONE_NONE, vcvtpq_u, v8hi, v4si)\n+VAR2(UNOP_UNONE_NONE, vcvtnq_u, v8hi, v4si)\n+VAR2(UNOP_UNONE_NONE, vcvtmq_u, v8hi, v4si)\n+VAR2(UNOP_UNONE_NONE, vcvtaq_u, v8hi, v4si)\n+VAR2(UNOP_UNONE_IMM, vmvnq_n_u, v8hi, v4si)\n+VAR1(UNOP_UNONE_UNONE, vrev16q_u, v16qi)\n+VAR1(UNOP_UNONE_UNONE, vaddlvq_u, v4si)\n+VAR1(UNOP_UNONE_UNONE, vctp16q, hi)\n+VAR1(UNOP_UNONE_UNONE, vctp32q, hi)\n+VAR1(UNOP_UNONE_UNONE, vctp64q, hi)\n+VAR1(UNOP_UNONE_UNONE, vctp8q, hi)\n+VAR1(UNOP_UNONE_UNONE, vpnot, hi)\n+VAR2(BINOP_NONE_NONE_NONE, vsubq_n_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vbrsrq_n_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_IMM, vcvtq_n_to_f_s, v8hf, v4sf)\n+VAR2(BINOP_NONE_UNONE_IMM, vcvtq_n_to_f_u, v8hf, v4sf)\n+VAR2(BINOP_NONE_UNONE_UNONE, vcreateq_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_IMM, vcvtq_n_from_f_u, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_IMM, vcvtq_n_from_f_s, v8hi, v4si)\n+VAR4(BINOP_UNONE_UNONE_UNONE, vcreateq_u, v16qi, v8hi, v4si, v2di)\n+VAR4(BINOP_NONE_UNONE_UNONE, vcreateq_s, v16qi, v8hi, v4si, v2di)\n+VAR3(BINOP_UNONE_UNONE_IMM, vshrq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_IMM, vshrq_n_s, v16qi, v8hi, v4si)\n+VAR1(BINOP_NONE_NONE_UNONE, vaddlvq_p_s, v4si)\n+VAR1(BINOP_UNONE_UNONE_UNONE, vaddlvq_p_u, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpneq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vcmpneq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vshlq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vshlq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vsubq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vsubq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vrmulhq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vrhaddq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vqsubq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vqsubq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vqaddq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vqaddq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vorrq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vornq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vmulq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vmulq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vmulltq_int_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vmullbq_int_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vmulhq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vmladavq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vminvq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vminq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vmaxvq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vmaxq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vhsubq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vhsubq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vhaddq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vhaddq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, veorq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vcmpneq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vcmphiq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vcmphiq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vcmpeqq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vcmpeqq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vcmpcsq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vcmpcsq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vcaddq_rot90_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vcaddq_rot270_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vbicq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vandq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vaddvq_p_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vaddvaq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vaddq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_UNONE, vabdq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vshlq_r_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vrshlq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vrshlq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vqshlq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vqshlq_r_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vqrshlq_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vqrshlq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vminavq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vminaq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vmaxavq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vmaxaq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_NONE, vbrsrq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_IMM, vshlq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_IMM, vrshrq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_UNONE_IMM, vqshlq_n_u, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpneq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpltq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpltq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpleq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpleq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpgtq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpgtq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpgeq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpgeq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpeqq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_NONE, vcmpeqq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_UNONE_NONE_IMM, vqshluq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_UNONE, vaddvq_p_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vsubq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vsubq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vshlq_r_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vrshlq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vrshlq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vrmulhq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vrhaddq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqsubq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqsubq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqshlq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqshlq_r_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqrshlq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqrshlq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqrdmulhq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqrdmulhq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqdmulhq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqdmulhq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqaddq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vqaddq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vorrq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vornq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vmulq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vmulq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vmulltq_int_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vmullbq_int_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vmulhq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vmlsdavxq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vmlsdavq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vmladavxq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vmladavq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vminvq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vminq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vmaxvq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vmaxq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vhsubq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vhsubq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vhcaddq_rot90_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vhcaddq_rot270_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vhaddq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vhaddq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, veorq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vcaddq_rot90_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vcaddq_rot270_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vbrsrq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vbicq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vandq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vaddvaq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vaddq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_NONE, vabdq_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_IMM, vshlq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_IMM, vrshrq_n_s, v16qi, v8hi, v4si)\n+VAR3(BINOP_NONE_NONE_IMM, vqshlq_n_s, v16qi, v8hi, v4si)\n+VAR2(BINOP_UNONE_UNONE_UNONE, vqmovntq_u, v8hi, v4si)\n+VAR2(BINOP_UNONE_UNONE_UNONE, vqmovnbq_u, v8hi, v4si)\n+VAR2(BINOP_UNONE_UNONE_UNONE, vmulltq_poly_p, v16qi, v8hi)\n+VAR2(BINOP_UNONE_UNONE_UNONE, vmullbq_poly_p, v16qi, v8hi)\n+VAR2(BINOP_UNONE_UNONE_UNONE, vmovntq_u, v8hi, v4si)\n+VAR2(BINOP_UNONE_UNONE_UNONE, vmovnbq_u, v8hi, v4si)\n+VAR2(BINOP_UNONE_UNONE_UNONE, vmlaldavq_u, v8hi, v4si)\n+VAR2(BINOP_UNONE_UNONE_NONE, vqmovuntq_s, v8hi, v4si)\n+VAR2(BINOP_UNONE_UNONE_NONE, vqmovunbq_s, v8hi, v4si)\n+VAR2(BINOP_UNONE_UNONE_IMM, vshlltq_n_u, v16qi, v8hi)\n+VAR2(BINOP_UNONE_UNONE_IMM, vshllbq_n_u, v16qi, v8hi)\n+VAR2(BINOP_UNONE_UNONE_IMM, vorrq_n_u, v8hi, v4si)\n+VAR2(BINOP_UNONE_UNONE_IMM, vbicq_n_u, v8hi, v4si)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpneq_n_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpneq_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpltq_n_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpltq_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpleq_n_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpleq_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpgtq_n_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpgtq_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpgeq_n_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpgeq_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpeqq_n_f, v8hf, v4sf)\n+VAR2(BINOP_UNONE_NONE_NONE, vcmpeqq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vsubq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vqmovntq_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vqmovnbq_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vqdmulltq_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vqdmulltq_n_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vqdmullbq_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vqdmullbq_n_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vorrq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vornq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vmulq_n_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vmulq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vmovntq_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vmovnbq_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vmlsldavxq_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vmlsldavq_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vmlaldavxq_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vmlaldavq_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_NONE, vminnmvq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vminnmq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vminnmavq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vminnmaq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vmaxnmvq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vmaxnmq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vmaxnmavq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vmaxnmaq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, veorq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vcmulq_rot90_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vcmulq_rot270_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vcmulq_rot180_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vcmulq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vcaddq_rot90_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vcaddq_rot270_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vbicq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vandq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vaddq_n_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_NONE, vabdq_f, v8hf, v4sf)\n+VAR2(BINOP_NONE_NONE_IMM, vshlltq_n_s, v16qi, v8hi)\n+VAR2(BINOP_NONE_NONE_IMM, vshllbq_n_s, v16qi, v8hi)\n+VAR2(BINOP_NONE_NONE_IMM, vorrq_n_s, v8hi, v4si)\n+VAR2(BINOP_NONE_NONE_IMM, vbicq_n_s, v8hi, v4si)\n+VAR1(BINOP_UNONE_UNONE_UNONE, vrmlaldavhq_u, v4si)\n+VAR1(BINOP_UNONE_UNONE_UNONE, vctp8q_m, hi)\n+VAR1(BINOP_UNONE_UNONE_UNONE, vctp64q_m, hi)\n+VAR1(BINOP_UNONE_UNONE_UNONE, vctp32q_m, hi)\n+VAR1(BINOP_UNONE_UNONE_UNONE, vctp16q_m, hi)\n+VAR1(BINOP_UNONE_UNONE_UNONE, vaddlvaq_u, v4si)\n+VAR1(BINOP_NONE_NONE_NONE, vrmlsldavhxq_s, v4si)\n+VAR1(BINOP_NONE_NONE_NONE, vrmlsldavhq_s, v4si)\n+VAR1(BINOP_NONE_NONE_NONE, vrmlaldavhxq_s, v4si)\n+VAR1(BINOP_NONE_NONE_NONE, vrmlaldavhq_s, v4si)\n+VAR1(BINOP_NONE_NONE_NONE, vcvttq_f16_f32, v8hf)\n+VAR1(BINOP_NONE_NONE_NONE, vcvtbq_f16_f32, v8hf)\n+VAR1(BINOP_NONE_NONE_NONE, vaddlvaq_s, v4si)"}, {"sha": "24fb8167d6af36d377c220fe22b590644b346f25", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1004, "deletions": 4, "changes": 1008, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -66,7 +66,26 @@\n \t\t\t VMLADAVXQ_S VMLSDAVQ_S VMLSDAVXQ_S VQDMULHQ_N_S\n \t\t\t VQDMULHQ_S VQRDMULHQ_N_S VQRDMULHQ_S VQSHLUQ_N_S\n \t\t\t VCMPCSQ_N_U VCMPCSQ_U VCMPHIQ_N_U VCMPHIQ_U VABDQ_M_S\n-\t\t\t VABDQ_M_U])\n+\t\t\t VABDQ_M_U VABDQ_F VADDQ_N_F VANDQ_F VBICQ_F\n+\t\t\t VCADDQ_ROT270_F VCADDQ_ROT90_F VCMPEQQ_F VCMPEQQ_N_F\n+\t\t\t VCMPGEQ_F VCMPGEQ_N_F VCMPGTQ_F VCMPGTQ_N_F VCMPLEQ_F\n+\t\t\t VCMPLEQ_N_F VCMPLTQ_F VCMPLTQ_N_F VCMPNEQ_F VCMPNEQ_N_F\n+\t\t\t VCMULQ_F VCMULQ_ROT180_F VCMULQ_ROT270_F VCMULQ_ROT90_F\n+\t\t\t VEORQ_F VMAXNMAQ_F VMAXNMAVQ_F VMAXNMQ_F VMAXNMVQ_F\n+\t\t\t VMINNMAQ_F VMINNMAVQ_F VMINNMQ_F VMINNMVQ_F VMULQ_F\n+\t\t\t VMULQ_N_F VORNQ_F VORRQ_F VSUBQ_F VADDLVAQ_U\n+\t\t\t VADDLVAQ_S VBICQ_N_U VBICQ_N_S VCTP8Q_M VCTP16Q_M\n+\t\t\t VCTP32Q_M VCTP64Q_M VCVTBQ_F16_F32 VCVTTQ_F16_F32\n+\t\t\t VMLALDAVQ_U VMLALDAVXQ_U VMLALDAVXQ_S VMLALDAVQ_S\n+\t\t\t VMLSLDAVQ_S VMLSLDAVXQ_S VMOVNBQ_U VMOVNBQ_S\n+\t\t\t VMOVNTQ_U VMOVNTQ_S VORRQ_N_S VORRQ_N_U VQDMULLBQ_N_S\n+\t\t\t VQDMULLBQ_S VQDMULLTQ_N_S VQDMULLTQ_S VQMOVNBQ_U\n+\t\t\t VQMOVNBQ_S VQMOVUNBQ_S VQMOVUNTQ_S VRMLALDAVHXQ_S\n+\t\t\t VRMLSLDAVHQ_S VRMLSLDAVHXQ_S VSHLLBQ_S\n+\t\t\t VSHLLBQ_U VSHLLTQ_U VSHLLTQ_S VQMOVNTQ_U VQMOVNTQ_S\n+\t\t\t VSHLLBQ_N_S VSHLLBQ_N_U VSHLLTQ_N_U VSHLLTQ_N_S\n+\t\t\t VRMLALDAVHQ_U VRMLALDAVHQ_S VMULLTQ_POLY_P\n+\t\t\t VMULLBQ_POLY_P])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -119,10 +138,19 @@\n \t\t       (VSHLQ_N_S \"s\") (VSHLQ_N_U \"u\") (VSHLQ_R_S \"s\")\n \t\t       (VSHLQ_R_U \"u\") (VSUBQ_N_S \"s\") (VSUBQ_N_U \"u\")\n \t\t       (VSUBQ_S \"s\") (VSUBQ_U \"u\") (VADDVAQ_S \"s\")\n-\t\t       (VADDVAQ_U \"u\")])\n+\t\t       (VADDVAQ_U \"u\") (VADDLVAQ_S \"s\") (VADDLVAQ_U \"u\")\n+\t\t       (VBICQ_N_S \"s\") (VBICQ_N_U \"u\") (VMLALDAVQ_U \"u\")\n+\t\t       (VMLALDAVQ_S \"s\") (VMLALDAVXQ_U \"u\") (VMLALDAVXQ_S \"s\")\n+\t\t       (VMOVNBQ_U \"u\") (VMOVNBQ_S \"s\") (VMOVNTQ_U \"u\")\n+\t\t       (VMOVNTQ_S \"s\") (VORRQ_N_S \"s\") (VORRQ_N_U \"u\")\n+\t\t       (VQMOVNBQ_U \"u\") (VQMOVNBQ_S \"s\") (VQMOVNTQ_S \"s\")\n+\t\t       (VQMOVNTQ_U \"u\") (VSHLLBQ_N_U \"u\") (VSHLLBQ_N_S \"s\")\n+\t\t       (VSHLLTQ_N_U \"u\") (VSHLLTQ_N_S \"s\") (VRMLALDAVHQ_U \"u\")\n+\t\t       (VRMLALDAVHQ_S \"s\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n-\t\t\t(VCTP64Q \"64\")])\n+\t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n+\t\t\t(VCTP32Q_M \"32\") (VCTP64Q_M \"64\")])\n (define_mode_attr MVE_pred2 [(V16QI \"mve_imm_8\") (V8HI \"mve_imm_16\")\n \t\t\t     (V4SI \"mve_imm_32\")])\n (define_mode_attr MVE_constraint2 [(V16QI \"Rb\") (V8HI \"Rd\") (V4SI \"Rf\")])\n@@ -146,6 +174,7 @@\n (define_int_iterator VCVTMQ [VCVTMQ_S VCVTMQ_U])\n (define_int_iterator VADDLVQ [VADDLVQ_U VADDLVQ_S])\n (define_int_iterator VCTPQ [VCTP8Q VCTP16Q VCTP32Q VCTP64Q])\n+(define_int_iterator VCTPQ_M [VCTP8Q_M VCTP16Q_M VCTP32Q_M VCTP64Q_M])\n (define_int_iterator VCVTQ_N_TO_F [VCVTQ_N_TO_F_S VCVTQ_N_TO_F_U])\n (define_int_iterator VCREATEQ [VCREATEQ_U VCREATEQ_S])\n (define_int_iterator VSHRQ_N [VSHRQ_N_S VSHRQ_N_U])\n@@ -200,7 +229,18 @@\n (define_int_iterator VSHLQ_R [VSHLQ_R_S VSHLQ_R_U])\n (define_int_iterator VSUBQ [VSUBQ_S VSUBQ_U])\n (define_int_iterator VSUBQ_N [VSUBQ_N_S VSUBQ_N_U])\n-\n+(define_int_iterator VADDLVAQ [VADDLVAQ_S VADDLVAQ_U])\n+(define_int_iterator VBICQ_N [VBICQ_N_S VBICQ_N_U])\n+(define_int_iterator VMLALDAVQ [VMLALDAVQ_U VMLALDAVQ_S])\n+(define_int_iterator VMLALDAVXQ [VMLALDAVXQ_U VMLALDAVXQ_S])\n+(define_int_iterator VMOVNBQ [VMOVNBQ_U VMOVNBQ_S])\n+(define_int_iterator VMOVNTQ [VMOVNTQ_S VMOVNTQ_U])\n+(define_int_iterator VORRQ_N [VORRQ_N_U VORRQ_N_S])\n+(define_int_iterator VQMOVNBQ [VQMOVNBQ_U VQMOVNBQ_S])\n+(define_int_iterator VQMOVNTQ [VQMOVNTQ_U VQMOVNTQ_S])\n+(define_int_iterator VSHLLBQ_N [VSHLLBQ_N_S VSHLLBQ_N_U])\n+(define_int_iterator VSHLLTQ_N [VSHLLTQ_N_U VSHLLTQ_N_S])\n+(define_int_iterator VRMLALDAVHQ [VRMLALDAVHQ_U VRMLALDAVHQ_S])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -2057,3 +2097,963 @@\n   \"vsub.i%#<V_sz_elem>\\t%q0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+\n+;;\n+;; [vabdq_f])\n+;;\n+(define_insn \"mve_vabdq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VABDQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vabd.f%#<V_sz_elem>\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vaddlvaq_s vaddlvaq_u])\n+;;\n+(define_insn \"mve_vaddlvaq_<supf>v4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t    (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VADDLVAQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vaddlva.<supf>32 %Q0, %R0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vaddq_n_f])\n+;;\n+(define_insn \"mve_vaddq_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VADDQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vadd.f%#<V_sz_elem>\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vandq_f])\n+;;\n+(define_insn \"mve_vandq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VANDQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vand %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vbicq_f])\n+;;\n+(define_insn \"mve_vbicq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VBICQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vbic %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vbicq_n_s, vbicq_n_u])\n+;;\n+(define_insn \"mve_vbicq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t VBICQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vbic.i%#<V_sz_elem>\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcaddq_rot270_f])\n+;;\n+(define_insn \"mve_vcaddq_rot270_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCADDQ_ROT270_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcadd.f%#<V_sz_elem>\t%q0, %q1, %q2, #270\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcaddq_rot90_f])\n+;;\n+(define_insn \"mve_vcaddq_rot90_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCADDQ_ROT90_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcadd.f%#<V_sz_elem>\t%q0, %q1, %q2, #90\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpeqq_f])\n+;;\n+(define_insn \"mve_vcmpeqq_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCMPEQQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\teq, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpeqq_n_f])\n+;;\n+(define_insn \"mve_vcmpeqq_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPEQQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\teq, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpgeq_f])\n+;;\n+(define_insn \"mve_vcmpgeq_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCMPGEQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\tge, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpgeq_n_f])\n+;;\n+(define_insn \"mve_vcmpgeq_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPGEQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\tge, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpgtq_f])\n+;;\n+(define_insn \"mve_vcmpgtq_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCMPGTQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\tgt, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpgtq_n_f])\n+;;\n+(define_insn \"mve_vcmpgtq_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPGTQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\tgt, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpleq_f])\n+;;\n+(define_insn \"mve_vcmpleq_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCMPLEQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\tle, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpleq_n_f])\n+;;\n+(define_insn \"mve_vcmpleq_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPLEQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\tle, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpltq_f])\n+;;\n+(define_insn \"mve_vcmpltq_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCMPLTQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\tlt, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpltq_n_f])\n+;;\n+(define_insn \"mve_vcmpltq_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPLTQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\tlt, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpneq_f])\n+;;\n+(define_insn \"mve_vcmpneq_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCMPNEQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\tne, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpneq_n_f])\n+;;\n+(define_insn \"mve_vcmpneq_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPNEQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmp.f%#<V_sz_elem>\tne, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmulq_f])\n+;;\n+(define_insn \"mve_vcmulq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCMULQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmul.f%#<V_sz_elem>\t%q0, %q1, %q2, #0\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmulq_rot180_f])\n+;;\n+(define_insn \"mve_vcmulq_rot180_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCMULQ_ROT180_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmul.f%#<V_sz_elem>\t%q0, %q1, %q2, #180\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmulq_rot270_f])\n+;;\n+(define_insn \"mve_vcmulq_rot270_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCMULQ_ROT270_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmul.f%#<V_sz_elem>\t%q0, %q1, %q2, #270\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmulq_rot90_f])\n+;;\n+(define_insn \"mve_vcmulq_rot90_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VCMULQ_ROT90_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmul.f%#<V_sz_elem>\t%q0, %q1, %q2, #90\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vctp8q_m vctp16q_m vctp32q_m vctp64q_m])\n+;;\n+(define_insn \"mve_vctp<mode1>q_mhi\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t    (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VCTPQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vctpt.<mode1> %1\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcvtbq_f16_f32])\n+;;\n+(define_insn \"mve_vcvtbq_f16_f32v8hf\"\n+  [\n+   (set (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V8HF [(match_operand:V8HF 1 \"s_register_operand\" \"0\")\n+\t\t      (match_operand:V4SF 2 \"s_register_operand\" \"w\")]\n+\t VCVTBQ_F16_F32))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvtb.f16.f32 %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcvttq_f16_f32])\n+;;\n+(define_insn \"mve_vcvttq_f16_f32v8hf\"\n+  [\n+   (set (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V8HF [(match_operand:V8HF 1 \"s_register_operand\" \"0\")\n+\t\t      (match_operand:V4SF 2 \"s_register_operand\" \"w\")]\n+\t VCVTTQ_F16_F32))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvtt.f16.f32 %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [veorq_f])\n+;;\n+(define_insn \"mve_veorq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VEORQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"veor %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmaxnmaq_f])\n+;;\n+(define_insn \"mve_vmaxnmaq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VMAXNMAQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vmaxnma.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmaxnmavq_f])\n+;;\n+(define_insn \"mve_vmaxnmavq_f<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t\t  (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VMAXNMAVQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vmaxnmav.f%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmaxnmq_f])\n+;;\n+(define_insn \"mve_vmaxnmq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VMAXNMQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vmaxnm.f%#<V_sz_elem>\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmaxnmvq_f])\n+;;\n+(define_insn \"mve_vmaxnmvq_f<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t\t  (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VMAXNMVQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vmaxnmv.f%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vminnmaq_f])\n+;;\n+(define_insn \"mve_vminnmaq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VMINNMAQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vminnma.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vminnmavq_f])\n+;;\n+(define_insn \"mve_vminnmavq_f<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t\t  (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VMINNMAVQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vminnmav.f%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vminnmq_f])\n+;;\n+(define_insn \"mve_vminnmq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VMINNMQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vminnm.f%#<V_sz_elem>\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vminnmvq_f])\n+;;\n+(define_insn \"mve_vminnmvq_f<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t\t  (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VMINNMVQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vminnmv.f%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlaldavq_u, vmlaldavq_s])\n+;;\n+(define_insn \"mve_vmlaldavq_<supf><mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VMLALDAVQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlaldav.<supf>%#<V_sz_elem>\t%Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlaldavxq_s])\n+;;\n+(define_insn \"mve_vmlaldavxq_s<mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VMLALDAVXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlaldavx.s%#<V_sz_elem> %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlsldavq_s])\n+;;\n+(define_insn \"mve_vmlsldavq_s<mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VMLSLDAVQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlsldav.s%#<V_sz_elem> %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlsldavxq_s])\n+;;\n+(define_insn \"mve_vmlsldavxq_s<mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VMLSLDAVXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlsldavx.s%#<V_sz_elem> %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmovnbq_u, vmovnbq_s])\n+;;\n+(define_insn \"mve_vmovnbq_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t\t\t (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VMOVNBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmovnb.i%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmovntq_s, vmovntq_u])\n+;;\n+(define_insn \"mve_vmovntq_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t\t\t (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VMOVNTQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmovnt.i%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmulq_f])\n+;;\n+(define_insn \"mve_vmulq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VMULQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vmul.f%#<V_sz_elem>\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmulq_n_f])\n+;;\n+(define_insn \"mve_vmulq_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VMULQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vmul.f%#<V_sz_elem>\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vornq_f])\n+;;\n+(define_insn \"mve_vornq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VORNQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vorn %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vorrq_f])\n+;;\n+(define_insn \"mve_vorrq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VORRQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vorr %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vorrq_n_u, vorrq_n_s])\n+;;\n+(define_insn \"mve_vorrq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t VORRQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vorr.i%#<V_sz_elem>\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqdmullbq_n_s])\n+;;\n+(define_insn \"mve_vqdmullbq_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VQDMULLBQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmullb.s%#<V_sz_elem>\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqdmullbq_s])\n+;;\n+(define_insn \"mve_vqdmullbq_s<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VQDMULLBQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmullb.s%#<V_sz_elem>\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqdmulltq_n_s])\n+;;\n+(define_insn \"mve_vqdmulltq_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VQDMULLTQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmullt.s%#<V_sz_elem>\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqdmulltq_s])\n+;;\n+(define_insn \"mve_vqdmulltq_s<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VQDMULLTQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmullt.s%#<V_sz_elem>\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqmovnbq_u, vqmovnbq_s])\n+;;\n+(define_insn \"mve_vqmovnbq_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t\t\t (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VQMOVNBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqmovnb.<supf>%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqmovntq_u, vqmovntq_s])\n+;;\n+(define_insn \"mve_vqmovntq_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t\t\t (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VQMOVNTQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqmovnt.<supf>%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqmovunbq_s])\n+;;\n+(define_insn \"mve_vqmovunbq_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t\t\t (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VQMOVUNBQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqmovunb.s%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqmovuntq_s])\n+;;\n+(define_insn \"mve_vqmovuntq_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t\t\t (match_operand:MVE_5 2 \"s_register_operand\" \"w\")]\n+\t VQMOVUNTQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqmovunt.s%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrmlaldavhxq_s])\n+;;\n+(define_insn \"mve_vrmlaldavhxq_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VRMLALDAVHXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrmlaldavhx.s32 %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrmlsldavhq_s])\n+;;\n+(define_insn \"mve_vrmlsldavhq_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VRMLSLDAVHQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrmlsldavh.s32\\t%Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrmlsldavhxq_s])\n+;;\n+(define_insn \"mve_vrmlsldavhxq_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VRMLSLDAVHXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrmlsldavhx.s32\\t%Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vshllbq_n_s, vshllbq_n_u])\n+;;\n+(define_insn \"mve_vshllbq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_3 1 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t VSHLLBQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vshllb.<supf>%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vshlltq_n_u, vshlltq_n_s])\n+;;\n+(define_insn \"mve_vshlltq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_3 1 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t VSHLLTQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vshllt.<supf>%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vsubq_f])\n+;;\n+(define_insn \"mve_vsubq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n+\t VSUBQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vsub.f%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmulltq_poly_p])\n+;;\n+(define_insn \"mve_vmulltq_poly_p<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_3 1 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:MVE_3 2 \"s_register_operand\" \"w\")]\n+\t VMULLTQ_POLY_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmullt.p%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmullbq_poly_p])\n+;;\n+(define_insn \"mve_vmullbq_poly_p<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_3 1 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:MVE_3 2 \"s_register_operand\" \"w\")]\n+\t VMULLBQ_POLY_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmullb.p%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrmlaldavhq_u vrmlaldavhq_s])\n+;;\n+(define_insn \"mve_vrmlaldavhq_<supf>v4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VRMLALDAVHQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrmlaldavh.<supf>32 %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])"}, {"sha": "5cc2c04dc13360fb583f83c1a8e2ca886885ca7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -1,3 +1,153 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vabdq_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddlvaq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddlvaq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vctp16q_m.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vctp32q_m.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vctp64q_m.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vctp8q_m.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtbq_f16_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvttq_f16_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmaq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmaq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovnbq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovnbq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovnbq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovnbq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovntq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovntq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovntq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovntq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_p8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_p8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmullbq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmullbq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmullbq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmullbq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulltq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulltq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulltq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulltq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovnbq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovnbq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovnbq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovnbq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovntq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovntq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovntq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovntq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovunbq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovunbq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovuntq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovuntq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlsldavhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlsldavhxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_f32.c: Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "b653833d14e7e25272bb34b915edc9ed11c0f9a6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vabdq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vabdq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.f16\"  }  } */"}, {"sha": "c62cbc5c851293a9dc6438c3640803242f09d434", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vabdq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vabdq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.f32\"  }  } */"}, {"sha": "af890f85bddfead0552faa31805d41a8c12897c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvaq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b)\n+{\n+  return vaddlvaq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlva.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b)\n+{\n+  return vaddlvaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlva.s32\"  }  } */"}, {"sha": "6dd14bb1ba834803e80cc3b8da581ec18c846317", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvaq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint64_t a, uint32x4_t b)\n+{\n+  return vaddlvaq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlva.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint64_t a, uint32x4_t b)\n+{\n+  return vaddlvaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlva.u32\"  }  } */"}, {"sha": "f0783c5484e808b352af1342417657a32e729064", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16_t b)\n+{\n+  return vaddq_n_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.f16\"  }  } */"}, {"sha": "80ea7a4269b7d55d5b63852831802488f6e82165", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32_t b)\n+{\n+  return vaddq_n_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.f32\"  }  } */"}, {"sha": "39feba43fe4a96f29b67b314223154222c7d8c97", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vandq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vandq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */"}, {"sha": "41e91683a0b1155b314570501852f67e4739ec00", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vandq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vandq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */"}, {"sha": "7f62d4a744e02cbc0642573053e3beaf6a0048b3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vbicq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vbicq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */"}, {"sha": "022278e594072dce8343ef2e8219d2217e9dee6c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vbicq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vbicq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */"}, {"sha": "00d7ad9e08d1f81e42d3039fa2705079d2f97d64", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_n_s16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vbicq_n_s16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic.i16\"  }  } */"}, {"sha": "747675d45c84499c7236aa86943d1d2acde8c5a1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_n_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vbicq_n_s32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic.i32\"  }  } */"}, {"sha": "ac542fa5f3498fbe0b7c50c1956b09539a649ecb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_n_u16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a)\n+{\n+  return vbicq_n_u16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic.i16\"  }  } */"}, {"sha": "3326e7af64ce320665aef5b9c23ca8a7bfd34c3d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_n_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a)\n+{\n+  return vbicq_n_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic.i32\"  }  } */"}, {"sha": "b53fda739095d11add1dd1f7ae9c08b948e48c76", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcaddq_rot270_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcaddq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.f16\"  }  } */"}, {"sha": "6410ee6944f7912a2240c1b2dc43c5997bf2254d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcaddq_rot270_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcaddq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.f32\"  }  } */"}, {"sha": "d3b7a90115a633d5c5075a88d1f4392d21c2f9c0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcaddq_rot90_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcaddq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.f16\"  }  } */"}, {"sha": "b588b58a43198f114079ae9fa17f4b62c0f1bafa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcaddq_rot90_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcaddq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.f32\"  }  } */"}, {"sha": "fcc45491af64fb04017883ccc89f8815422bb1e9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpeqq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "b90bdf605ab6fc2d82172ea2e32655ad23089292", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpeqq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "8a35c0146cf3f2c17dc49eb6141a1cb668e11605", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b)\n+{\n+  return vcmpeqq_n_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpeqq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "28b0fbc7bd08eeab9b178f9fa51dd40965f9c745", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b)\n+{\n+  return vcmpeqq_n_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpeqq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "a71993a770d4648fec760989de1968ca1679cdf3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpgeq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpgeq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "0499b4e29ba403cbdbb53339d2a13fabc709746f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpgeq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpgeq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "98e0e610b7420acb9dae9c21962f0eccabb9f2c2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b)\n+{\n+  return vcmpgeq_n_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpgeq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "1e522a0483d493902a0fe77e8fb1f23f4314ac77", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b)\n+{\n+  return vcmpgeq_n_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpgeq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "76baa4eb0840763c7385646bd0fb8ed23e33abbc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpgtq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpgtq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "593babb0bf2a8f24d95435200a753cdf7b444bab", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpgtq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpgtq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "57d3838182254787a2524fc5f97ad30107af7913", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b)\n+{\n+  return vcmpgtq_n_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpgtq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "305972e73063c0733d58b18dff22206f8b99be38", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b)\n+{\n+  return vcmpgtq_n_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpgtq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "30e9fc550a543451ef3c0a607a4f55ef4c4a83a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpleq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpleq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "0be1ac613a089ab0e0d1185ebb6fdc6d092333ba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpleq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpleq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "7ec4e0e295d418244aa24e2f954861dd890a56ed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b)\n+{\n+  return vcmpleq_n_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpleq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "274dc7e283f08a4e1bdfd67ccea9358cbacee9c5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b)\n+{\n+  return vcmpleq_n_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpleq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "00800f7173a21e0b991a4f8e9e0bbfeea8bd9df7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpltq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "3aeeea18b0ce38397682b07ae0e8e870e6ad689a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpltq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "0e51876955f02a28546b943a3cfccfa4692f280a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b)\n+{\n+  return vcmpltq_n_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpltq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "5f7cf8a52041862f70c786a13b8453838edc5873", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b)\n+{\n+  return vcmpltq_n_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpltq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "f34e2364b46000a0c2bb54f7f9e8755008bb93b3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpneq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "697b3121091b029c26a4c25db0dbd79fa04bc9ad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpneq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "dfa0af7978f0d654e2b1e4ba87391aea9c599b21", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b)\n+{\n+  return vcmpneq_n_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpneq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */"}, {"sha": "806546c7ca98ed8b20ca927e568ff60b46950373", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b)\n+{\n+  return vcmpneq_n_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpneq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */"}, {"sha": "c2628eb01d2d4dd12a30ff3bde8c33507a1f9d72", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcmulq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcmulq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f16\"  }  } */"}, {"sha": "86601e0602e3c10945bbba7311e22a7e104846ce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcmulq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcmulq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f32\"  }  } */"}, {"sha": "621a5c0a7aceb09385b9ebe30294d4833c8a9bde", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot180_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcmulq_rot180_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcmulq_rot180 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f16\"  }  } */"}, {"sha": "1984f8ad2a20e7cce9b56ae6c2ae3e0c70e63a15", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot180_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcmulq_rot180_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcmulq_rot180 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f32\"  }  } */"}, {"sha": "f1b52d74156b628b9b6f39012d08408f1fde3f2e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot270_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcmulq_rot270_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcmulq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f16\"  }  } */"}, {"sha": "ab1c8eac512f26448b450217daefa9a42e95c060", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot270_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcmulq_rot270_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcmulq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f32\"  }  } */"}, {"sha": "5ea6c4a2912a5d459a81c4976f1810a16d04b427", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot90_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vcmulq_rot90_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vcmulq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f16\"  }  } */"}, {"sha": "576507624defd11028656a1ff41979fe30eea3da", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot90_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vcmulq_rot90_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vcmulq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmul.f32\"  }  } */"}, {"sha": "f33257774eec52a58ccfecceaed0061144f87589", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vctp16q_m.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp16q_m.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp16q_m.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp16q_m.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32_t a, mve_pred16_t p)\n+{\n+  return vctp16q_m (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vctpt.16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32_t a, mve_pred16_t p)\n+{\n+  return vctp16q_m (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f1260f85806f160781427645876f6e22edc456e4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vctp32q_m.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp32q_m.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp32q_m.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp32q_m.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32_t a, mve_pred16_t p)\n+{\n+  return vctp32q_m (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vctpt.32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32_t a, mve_pred16_t p)\n+{\n+  return vctp32q_m (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "976289c6d2f348b1d0d3919cf425f02d1ac43dbc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vctp64q_m.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp64q_m.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp64q_m.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp64q_m.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32_t a, mve_pred16_t p)\n+{\n+  return vctp64q_m (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vctpt.64\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32_t a, mve_pred16_t p)\n+{\n+  return vctp64q_m (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "56b48f159062b7c4429fd3c553d5608a6f7bba58", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vctp8q_m.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp8q_m.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp8q_m.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp8q_m.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32_t a, mve_pred16_t p)\n+{\n+  return vctp8q_m (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vctpt.8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32_t a, mve_pred16_t p)\n+{\n+  return vctp8q_m (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cc6322209f394575525da4b2295108b574bb62bc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtbq_f16_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_f16_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_f16_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_f16_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float32x4_t b)\n+{\n+  return vcvtbq_f16_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtb.f16.f32\"  }  } */"}, {"sha": "8d34e7c1daf495eb541918c8e55c0284f5b108a3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvttq_f16_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_f16_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_f16_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_f16_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float32x4_t b)\n+{\n+  return vcvttq_f16_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtt.f16.f32\"  }  } */"}, {"sha": "e9398d0e4f35063cf9b65db0cff105e2add9dd07", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return veorq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return veorq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */"}, {"sha": "0a7ca68f3969661affb2cf8cc9a7acefe940c453", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return veorq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return veorq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */"}, {"sha": "3e63f187eb3fef753d9b97cfe5cc9f713c45b9aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a, int16_t b)\n int16x8_t\n foo1 (int16x8_t a, int16_t b)\n {\n-  return vhaddq_n (a, b);\n+  return vhaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhadd.s16\"  }  } */"}, {"sha": "1ca4a6ff4eb92820e3649973c97182a945579914", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a, int32_t b)\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n-  return vhaddq_n (a, b);\n+  return vhaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhadd.s32\"  }  } */"}, {"sha": "721b3c768b663270083cd039837fe944f913ad8e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int8x16_t a, int8_t b)\n int8x16_t\n foo1 (int8x16_t a, int8_t b)\n {\n-  return vhaddq_n (a, b);\n+  return vhaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhadd.s8\"  }  } */"}, {"sha": "50ca937eee493bd0324f009cedb2075e50e7a304", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint16x8_t a, uint16_t b)\n uint16x8_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n-  return vhaddq_n (a, b);\n+  return vhaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhadd.u16\"  }  } */"}, {"sha": "f522f94415a453ffefb1e582f280c150ffbb1054", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_u32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint32x4_t a, uint32_t b)\n uint32x4_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n-  return vhaddq_n (a, b);\n+  return vhaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhadd.u32\"  }  } */"}, {"sha": "8367bdefb49abb1c7de73acb08251937e990ecec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_u8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint8x16_t a, uint8_t b)\n uint8x16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n-  return vhaddq_n (a, b);\n+  return vhaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhadd.u8\"  }  } */"}, {"sha": "654e4e57f4e10631ac2c403794f09a8c6684f477", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a, int16_t b)\n int16x8_t\n foo1 (int16x8_t a, int16_t b)\n {\n-  return vhsubq_n (a, b);\n+  return vhsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhsub.s16\"  }  } */"}, {"sha": "bea83676991f11a3b269d99966a2afc9ef1a3e90", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a, int32_t b)\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n-  return vhsubq_n (a, b);\n+  return vhsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhsub.s32\"  }  } */"}, {"sha": "35209c3a67843ded43a99a0b152cc61ee7c4e050", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int8x16_t a, int8_t b)\n int8x16_t\n foo1 (int8x16_t a, int8_t b)\n {\n-  return vhsubq_n (a, b);\n+  return vhsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhsub.s8\"  }  } */"}, {"sha": "0d79078e247d717abc599f6a6a8ddf0710eb0aa7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint16x8_t a, uint16_t b)\n uint16x8_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n-  return vhsubq_n (a, b);\n+  return vhsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhsub.u16\"  }  } */"}, {"sha": "95797d3cc89e887973099d75d23887ae80ad3307", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_u32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint32x4_t a, uint32_t b)\n uint32x4_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n-  return vhsubq_n (a, b);\n+  return vhsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhsub.u32\"  }  } */"}, {"sha": "2965a3190c623d1d6a7acd98839e660ffdf74b17", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_u8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint8x16_t a, uint8_t b)\n uint8x16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n-  return vhsubq_n (a, b);\n+  return vhsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vhsub.u8\"  }  } */"}, {"sha": "424e9e64b370604ae8270f79f44548a004f7496a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmaq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vmaxnmaq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnma.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vmaxnmaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnma.f16\"  }  } */"}, {"sha": "35b960cdb439e8dfe306caf289a0da3a67d1a27f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmaq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vmaxnmaq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnma.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vmaxnmaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnma.f32\"  }  } */"}, {"sha": "bcbf659527ce1a94e861b2bbe923d95888d84703", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16_t\n+foo (float16_t a, float16x8_t b)\n+{\n+  return vmaxnmavq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmav.f16\"  }  } */\n+\n+float16_t\n+foo1 (float16_t a, float16x8_t b)\n+{\n+  return vmaxnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmav.f16\"  }  } */"}, {"sha": "dc88ef89859c7627311c208badcf0d7e570affeb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32_t\n+foo (float32_t a, float32x4_t b)\n+{\n+  return vmaxnmavq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmav.f32\"  }  } */\n+\n+float32_t\n+foo1 (float32_t a, float32x4_t b)\n+{\n+  return vmaxnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmav.f32\"  }  } */"}, {"sha": "9c136b86ef04a3459bb70cab9a7762130de7dd50", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vmaxnmq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnm.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vmaxnmq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnm.f16\"  }  } */"}, {"sha": "86222d2e930a1bf477b81985299bcce54b27975a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vmaxnmq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnm.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vmaxnmq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnm.f32\"  }  } */"}, {"sha": "4f6ce2c001bdd3fc60ec904466efe8e287845869", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16_t\n+foo (float16_t a, float16x8_t b)\n+{\n+  return vmaxnmvq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmv.f16\"  }  } */\n+\n+float16_t\n+foo1 (float16_t a, float16x8_t b)\n+{\n+  return vmaxnmvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmv.f16\"  }  } */"}, {"sha": "5206bc24ef4c1e8d824228af2790747ac44fc57a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32_t\n+foo (float32_t a, float32x4_t b)\n+{\n+  return vmaxnmvq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmv.f32\"  }  } */\n+\n+float32_t\n+foo1 (float32_t a, float32x4_t b)\n+{\n+  return vmaxnmvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmv.f32\"  }  } */"}, {"sha": "ea2ab72d98534608245252a32337da582a716b3c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmaq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vminnmaq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnma.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vminnmaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnma.f16\"  }  } */"}, {"sha": "14ed06eb169ea2026cca57fba54f57b3fbfc9350", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmaq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vminnmaq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnma.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vminnmaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnma.f32\"  }  } */"}, {"sha": "e89076e289ccec1f4ccb4d07c55c6484d881373c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16_t\n+foo (float16_t a, float16x8_t b)\n+{\n+  return vminnmavq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmav.f16\"  }  } */\n+\n+float16_t\n+foo1 (float16_t a, float16x8_t b)\n+{\n+  return vminnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmav.f16\"  }  } */"}, {"sha": "d06c1a44cbdfd2fa5c4f044d027a1f3a6254526b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32_t\n+foo (float32_t a, float32x4_t b)\n+{\n+  return vminnmavq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmav.f32\"  }  } */\n+\n+float32_t\n+foo1 (float32_t a, float32x4_t b)\n+{\n+  return vminnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmav.f32\"  }  } */"}, {"sha": "f7c051ea31f8bc2508223758132344031b9643e2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vminnmq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnm.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vminnmq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnm.f16\"  }  } */"}, {"sha": "7f1d843cc6e59dd79d125e0fbb000d3cae9a9ace", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vminnmq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnm.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vminnmq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnm.f32\"  }  } */"}, {"sha": "c0307b5d5955b789280a08f141101b1c934e1bed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16_t\n+foo (float16_t a, float16x8_t b)\n+{\n+  return vminnmvq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmv.f16\"  }  } */\n+\n+float16_t\n+foo1 (float16_t a, float16x8_t b)\n+{\n+  return vminnmvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmv.f16\"  }  } */"}, {"sha": "da7a861f9be6ba9a88866aa634703f8da4a5fec7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32_t\n+foo (float32_t a, float32x4_t b)\n+{\n+  return vminnmvq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmv.f32\"  }  } */\n+\n+float32_t\n+foo1 (float32_t a, float32x4_t b)\n+{\n+  return vminnmvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmv.f32\"  }  } */"}, {"sha": "f456d3b8cc117ae077ee02327158a44625de3e23", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmlaldavq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldav.s16\"  }  } */\n+\n+int64_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmlaldavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldav.s16\"  }  } */"}, {"sha": "8453d9d4dc85162e302ef207e53ad12cde7eb254", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmlaldavq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldav.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmlaldavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldav.s32\"  }  } */"}, {"sha": "e4c1f3201cb76a52d87d41cedd13addf18a6266b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmlaldavq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldav.u16\"  }  } */\n+\n+uint64_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmlaldavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldav.u16\"  }  } */"}, {"sha": "3c4ff648e853d88bf9868662908266a6133fafa8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmlaldavq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldav.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmlaldavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldav.u32\"  }  } */"}, {"sha": "a7268d98eda3776ed65978dc453e84bd44bf1ee4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmlaldavxq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavx.s16\"  }  } */\n+\n+int64_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmlaldavxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavx.s16\"  }  } */"}, {"sha": "fe0a178d2cb6d38ece6d759a4d388a0dc92accdd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmlaldavxq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavx.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmlaldavxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavx.s32\"  }  } */"}, {"sha": "1215b36d3de937757cde007adc63744754c4f361", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmlsldavq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldav.s16\"  }  } */\n+\n+int64_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmlsldavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldav.s16\"  }  } */"}, {"sha": "e42a8a21f5a5c53679825807a9460afe78aa4a89", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmlsldavq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldav.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmlsldavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldav.s32\"  }  } */"}, {"sha": "5a18fdfe24694927fc617c0480ebf7b05e03175c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmlsldavxq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavx.s16\"  }  } */\n+\n+int64_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmlsldavxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavx.s16\"  }  } */"}, {"sha": "5d807a1ea5c16fadcffce65d322077f73d7e1fc0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmlsldavxq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavx.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmlsldavxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavx.s32\"  }  } */"}, {"sha": "01aa74af9b627740f664ca85180b3a7b185428bf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovnbq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vmovnbq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnb.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vmovnbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnb.i16\"  }  } */"}, {"sha": "c7e2c23392216970ecd72acb3d30197d6af3c804", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovnbq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vmovnbq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnb.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vmovnbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnb.i32\"  }  } */"}, {"sha": "198b21199ea80a26f5cc8791f84679deee5e1382", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovnbq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vmovnbq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnb.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vmovnbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnb.i16\"  }  } */"}, {"sha": "d5b3162951a7a3e9a39135728d69a1a53a810980", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovnbq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vmovnbq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnb.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vmovnbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnb.i32\"  }  } */"}, {"sha": "07ab33449415c9a0b4715c45bc1b551099d152f3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovntq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vmovntq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnt.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vmovntq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnt.i16\"  }  } */"}, {"sha": "4d2cc3142e3f0008bab6d92bedfab1a7c2a1ed54", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovntq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vmovntq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnt.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vmovntq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnt.i32\"  }  } */"}, {"sha": "d3da58256824b797effa6d0640cee69fa8b158f2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovntq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vmovntq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnt.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vmovntq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnt.i16\"  }  } */"}, {"sha": "e62154b4b24158256241823f50b915d85a3c5977", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovntq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vmovntq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnt.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vmovntq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmovnt.i32\"  }  } */"}, {"sha": "091806313364c301ac76abe96b524199c8fffb03", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_poly_p16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_p16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_p16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_p16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmullbq_poly_p16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.p16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmullbq_poly (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.p16\"  }  } */"}, {"sha": "088b3190ac79afa48b93dcd833b26be16dd0c66a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_poly_p8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_p8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmullbq_poly_p8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.p8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmullbq_poly (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.p8\"  }  } */"}, {"sha": "368b73ac87f7ed26f03f45903153dc97bdd4f647", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_poly_p16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_p16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_p16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_p16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmulltq_poly_p16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.p16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmulltq_poly (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.p16\"  }  } */"}, {"sha": "861b7cda4e3cdf01dc379de94d99a55471b2f955", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_poly_p8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_p8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmulltq_poly_p8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.p8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmulltq_poly (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.p8\"  }  } */"}, {"sha": "845dd82eacc7aa83c69042bc6df5295faf343b17", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vmulq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vmulq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.f16\"  }  } */"}, {"sha": "515a30dda15166ed9ba9a7989006d081f9d14740", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vmulq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vmulq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.f32\"  }  } */"}, {"sha": "1d9891685da4eb64758fb37b1721d151d0e8981b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16_t b)\n+{\n+  return vmulq_n_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vmulq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.f16\"  }  } */"}, {"sha": "dd75efc36a2a2f10fed5665180773724f0089797", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32_t b)\n+{\n+  return vmulq_n_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vmulq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.f32\"  }  } */"}, {"sha": "50d34e5c14c4bd367790976de92c85c1761ba5c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vornq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vornq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */"}, {"sha": "70e998aff2175cd8f22402ceb4063aa521cdf5d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vornq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vornq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */"}, {"sha": "c19d62280d65ef43873a4aea8c3c60347b9520f2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vorrq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vorrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */"}, {"sha": "f547583909513641cb5382cc08f40765cb4519ac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vorrq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vorrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */"}, {"sha": "4eca75738181156074d5fb1a739a6c544d0a5d57", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_n_s16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vorrq_n_s16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr.i16\"  }  } */"}, {"sha": "037c719b310e562af852eb757a3ec063557f45f4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_n_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vorrq_n_s32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr.i32\"  }  } */"}, {"sha": "2384e6228f80027fd6fa4a8d513d147ad58d5d2e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_n_u16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a)\n+{\n+  return vorrq_n_u16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr.i16\"  }  } */"}, {"sha": "0468657617ca58427fd8d15c69ba0986de89aff3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_n_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_n_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a)\n+{\n+  return vorrq_n_u32 (a, 44);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr.i32\"  }  } */"}, {"sha": "5203f35dc9b6380c9fc9b9e2242b7f039fbec052", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a, int16_t b)\n int16x8_t\n foo1 (int16x8_t a, int16_t b)\n {\n-  return vqaddq_n (a, b);\n+  return vqaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqadd.s16\"  }  } */"}, {"sha": "e55608a521f154e243155e40018541e872d679b9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a, int32_t b)\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n-  return vqaddq_n (a, b);\n+  return vqaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqadd.s32\"  }  } */"}, {"sha": "c894da25e22890092c7ffa99240a439e76c26e25", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int8x16_t a, int8_t b)\n int8x16_t\n foo1 (int8x16_t a, int8_t b)\n {\n-  return vqaddq_n (a, b);\n+  return vqaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqadd.s8\"  }  } */"}, {"sha": "39b12548c7e5320adb239c8164b0fbca38fca6bf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint16x8_t a, uint16_t b)\n uint16x8_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n-  return vqaddq_n (a, b);\n+  return vqaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqadd.u16\"  }  } */"}, {"sha": "ec622cd78fdebc12bd70afdcd92a30f7a7c0643a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_u32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint32x4_t a, uint32_t b)\n uint32x4_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n-  return vqaddq_n (a, b);\n+  return vqaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqadd.u32\"  }  } */"}, {"sha": "723c14b5c8c1f958728e32bcfb32d73d2cf9d85d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_u8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint8x16_t a, uint8_t b)\n uint8x16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n-  return vqaddq_n (a, b);\n+  return vqaddq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqadd.u8\"  }  } */"}, {"sha": "fa27947801d4d0e533a99a5cdf1c66d479372e29", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_n_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a, int16_t b)\n int16x8_t\n foo1 (int16x8_t a, int16_t b)\n {\n-  return vqdmulhq_n (a, b);\n+  return vqdmulhq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqdmulh.s16\"  }  } */"}, {"sha": "58dc56654d5695cac48be3e51afb61d904757c98", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_n_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a, int32_t b)\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n-  return vqdmulhq_n (a, b);\n+  return vqdmulhq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqdmulh.s32\"  }  } */"}, {"sha": "73ea78d6899e51d893e1cb765816abff7c908c4b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_n_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int8x16_t a, int8_t b)\n int8x16_t\n foo1 (int8x16_t a, int8_t b)\n {\n-  return vqdmulhq_n (a, b);\n+  return vqdmulhq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqdmulh.s8\"  }  } */"}, {"sha": "4f6131151fe30fc0540b85faec252ce6eed1b713", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmullbq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vqdmullbq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullb.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vqdmullbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullb.s16\"  }  } */"}, {"sha": "478b84d39fe63b5b9ed2884a0fba4ce2ebd69e7f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmullbq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vqdmullbq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullb.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vqdmullbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullb.s32\"  }  } */"}, {"sha": "f9886169fea1075b5f0ec99f6a654e34ec86e609", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmullbq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vqdmullbq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullb.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vqdmullbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullb.s16\"  }  } */"}, {"sha": "06baf2b315b8d0c7d6932faa4a3517893145ed09", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmullbq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vqdmullbq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullb.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vqdmullbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullb.s32\"  }  } */"}, {"sha": "143bd1e2290ba0870a2a6c38f42fc3365d9e3e63", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulltq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vqdmulltq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vqdmulltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullt.s16\"  }  } */"}, {"sha": "60130218c822b3f404b26be32bb1996e6b746d0b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulltq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vqdmulltq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullt.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vqdmulltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullt.s32\"  }  } */"}, {"sha": "f8ad2429791ffa358bdfdf7f3b718b46dfe7a525", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulltq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vqdmulltq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vqdmulltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullt.s16\"  }  } */"}, {"sha": "c50a9dd5eb4330a454deb6bdabd96a5794303707", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulltq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vqdmulltq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullt.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vqdmulltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmullt.s32\"  }  } */"}, {"sha": "0d9b25ad925676422ad941a3dccb3063183e6057", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovnbq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vqmovnbq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnb.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vqmovnbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnb.s16\"  }  } */"}, {"sha": "91eedba12434b31380d9d1049f313f5a9f85915a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovnbq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vqmovnbq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnb.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vqmovnbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnb.s32\"  }  } */"}, {"sha": "86aed4fa9c37bc529f451f73f5e56fbf6af7cd06", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovnbq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqmovnbq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnb.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqmovnbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnb.u16\"  }  } */"}, {"sha": "a1e92e8f8d9bdd7f5a9ccbae9c3e98ecaf5f8ef0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovnbq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqmovnbq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnb.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqmovnbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnb.u32\"  }  } */"}, {"sha": "cb8549b437db7c22b02321f81389afac7b02c26f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovntq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vqmovntq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnt.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vqmovntq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnt.s16\"  }  } */"}, {"sha": "476000d62ec9baf4c939d1aded49c233eb1f6115", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovntq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vqmovntq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnt.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vqmovntq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnt.s32\"  }  } */"}, {"sha": "ec98d9983b882dc99e602ba11319ee9cae6a314f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovntq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqmovntq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnt.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqmovntq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnt.u16\"  }  } */"}, {"sha": "20a4fa94522a861bcb2dd431cb61d042c7cf3ea5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovntq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqmovntq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnt.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqmovntq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovnt.u32\"  }  } */"}, {"sha": "2486c5aaba656fef6ec3540cce8f2c52be7002fb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovunbq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b)\n+{\n+  return vqmovunbq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovunb.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b)\n+{\n+  return vqmovunbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovunb.s16\"  }  } */"}, {"sha": "aa72dcae600657eb47e1ba313441d333adc88a0b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovunbq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b)\n+{\n+  return vqmovunbq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovunb.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b)\n+{\n+  return vqmovunbq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovunb.s32\"  }  } */"}, {"sha": "27a60f898ccf3920c7560e1d6d0ffac4fed33069", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovuntq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b)\n+{\n+  return vqmovuntq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovunt.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b)\n+{\n+  return vqmovuntq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovunt.s16\"  }  } */"}, {"sha": "8abc08acf4580010b8329dbf739c5f298e8dd4fb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovuntq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b)\n+{\n+  return vqmovuntq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovunt.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b)\n+{\n+  return vqmovuntq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqmovunt.s32\"  }  } */"}, {"sha": "edfc03bf641f35fc6262099de6d9aeecc29a759e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a, int16_t b)\n int16x8_t\n foo1 (int16x8_t a, int16_t b)\n {\n-  return vqrdmulhq_n (a, b);\n+  return vqrdmulhq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqrdmulh.s16\"  }  } */"}, {"sha": "7bd8f8d999b223515b5e76fca0dfff11ac38d0f4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a, int32_t b)\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n-  return vqrdmulhq_n (a, b);\n+  return vqrdmulhq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqrdmulh.s32\"  }  } */"}, {"sha": "f62ad06d05d3c8f736db186dd7ff7611821dc92a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int8x16_t a, int8_t b)\n int8x16_t\n foo1 (int8x16_t a, int8_t b)\n {\n-  return vqrdmulhq_n (a, b);\n+  return vqrdmulhq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqrdmulh.s8\"  }  } */"}, {"sha": "4f07c302f35647bf7e26af5cd846ea8971239c5b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a, int32_t b)\n int16x8_t\n foo1 (int16x8_t a, int32_t b)\n {\n-  return vqrshlq_n (a, b);\n+  return vqrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqrshl.s16\"  }  } */"}, {"sha": "8eb13a064e5dcff94e62832c67f7420f87aafd8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a, int32_t b)\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n-  return vqrshlq_n (a, b);\n+  return vqrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqrshl.s32\"  }  } */"}, {"sha": "efbd2d751f262bef6bd036b88efd829acf7025e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int8x16_t a, int32_t b)\n int8x16_t\n foo1 (int8x16_t a, int32_t b)\n {\n-  return vqrshlq_n (a, b);\n+  return vqrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqrshl.s8\"  }  } */"}, {"sha": "74a7a3b1f2bbcefc74ce1b14bc55b75c1eb2d289", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint16x8_t a, int32_t b)\n uint16x8_t\n foo1 (uint16x8_t a, int32_t b)\n {\n-  return vqrshlq_n (a, b);\n+  return vqrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqrshl.u16\"  }  } */"}, {"sha": "f6a714b3411fbe54f48ac426ac22d1264fe45a58", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_u32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint32x4_t a, int32_t b)\n uint32x4_t\n foo1 (uint32x4_t a, int32_t b)\n {\n-  return vqrshlq_n (a, b);\n+  return vqrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqrshl.u32\"  }  } */"}, {"sha": "5a71f4cef5423200c110e82bdb9d30b20df31a0a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_u8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint8x16_t a, int32_t b)\n uint8x16_t\n foo1 (uint8x16_t a, int32_t b)\n {\n-  return vqrshlq_n (a, b);\n+  return vqrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqrshl.u8\"  }  } */"}, {"sha": "1b84675bf55d36942f14c42024a9c374467cd495", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshluq_n_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a)\n uint16x8_t\n foo1 (int16x8_t a)\n {\n-  return vqshluq_n (a, 7);\n+  return vqshluq (a, 7);\n }\n \n /* { dg-final { scan-assembler \"vqshlu.s16\"  }  } */"}, {"sha": "87215465b182b0e5ce12a619b5d5d0ef7443e4c2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshluq_n_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a)\n uint32x4_t\n foo1 (int32x4_t a)\n {\n-  return vqshluq_n (a, 7);\n+  return vqshluq (a, 7);\n }\n \n /* { dg-final { scan-assembler \"vqshlu.s32\"  }  } */"}, {"sha": "f9e28bedc36374db05c72c6ca37e39092d3d9e40", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshluq_n_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int8x16_t a)\n uint8x16_t\n foo1 (int8x16_t a)\n {\n-  return vqshluq_n (a, 7);\n+  return vqshluq (a, 7);\n }\n \n /* { dg-final { scan-assembler \"vqshlu.s8\"  }  } */"}, {"sha": "cf66a17474604f7a6c37b481c14941f4e024fb0d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_n_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a, int16_t b)\n int16x8_t\n foo1 (int16x8_t a, int16_t b)\n {\n-  return vqsubq_n (a, b);\n+  return vqsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqsub.s16\"  }  } */"}, {"sha": "bab7c542040a26542660df4e3fa84df5ae23a31d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_n_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a, int32_t b)\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n-  return vqsubq_n (a, b);\n+  return vqsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqsub.s32\"  }  } */"}, {"sha": "62cbb96491055fdd8d68f280f131d43965e7a411", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_n_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int8x16_t a, int8_t b)\n int8x16_t\n foo1 (int8x16_t a, int8_t b)\n {\n-  return vqsubq_n (a, b);\n+  return vqsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqsub.s8\"  }  } */"}, {"sha": "f38fe6ce7765066e8b2fe540e2a47470da106ae7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_n_u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint16x8_t a, uint16_t b)\n uint16x8_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n-  return vqsubq_n (a, b);\n+  return vqsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqsub.u16\"  }  } */"}, {"sha": "e40bb8aed2ec8fbc4cd3e14f646e343cd3a0fe2b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_n_u32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint32x4_t a, uint32_t b)\n uint32x4_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n-  return vqsubq_n (a, b);\n+  return vqsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqsub.u32\"  }  } */"}, {"sha": "02305b477b26d536a1dabd66d835e25f5c9a1c38", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_n_u8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_n_u8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint8x16_t a, uint8_t b)\n uint8x16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n-  return vqsubq_n (a, b);\n+  return vqsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vqsub.u8\"  }  } */"}, {"sha": "bdcc4efcb9a7aa7bda06f29214d445b581f532e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vrmlaldavhq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavh.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vrmlaldavhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavh.s32\"  }  } */"}, {"sha": "5decdf288ad60446f3a1528ec03a3b2f0460d903", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vrmlaldavhq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavh.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vrmlaldavhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavh.u32\"  }  } */"}, {"sha": "c9e84a5f910edf686333811e2cd0f618f13ac961", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhxq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vrmlaldavhxq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhx.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vrmlaldavhxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhx.s32\"  }  } */"}, {"sha": "ffcc1a87a1fe87c4374e0f47fda729fbf02ed560", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlsldavhq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vrmlsldavhq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavh.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vrmlsldavhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavh.s32\"  }  } */"}, {"sha": "c6abc90be109294438a14da3f6bc0a06b6010f8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlsldavhxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhxq_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vrmlsldavhxq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavhx.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vrmlsldavhxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavhx.s32\"  }  } */"}, {"sha": "a81e2bad33abc7fedb83a1a1be26d17076139c28", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_n_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a, int32_t b)\n int16x8_t\n foo1 (int16x8_t a, int32_t b)\n {\n-  return vrshlq_n (a, b);\n+  return vrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vrshl.s16\"  }  } */"}, {"sha": "82a77dbcfc9ea9ec1cff2c12c63ee7be1c50b5a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_n_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a, int32_t b)\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n-  return vrshlq_n (a, b);\n+  return vrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vrshl.s32\"  }  } */"}, {"sha": "63bc48ed0fc2b19afac510296ed483e764c17e6a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_n_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int8x16_t a, int32_t b)\n int8x16_t\n foo1 (int8x16_t a, int32_t b)\n {\n-  return vrshlq_n (a, b);\n+  return vrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vrshl.s8\"  }  } */"}, {"sha": "3c6b3b712aacb1bac4a22df6dcf06032a48acf9a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_n_u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint16x8_t a, int32_t b)\n uint16x8_t\n foo1 (uint16x8_t a, int32_t b)\n {\n-  return vrshlq_n (a, b);\n+  return vrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vrshl.u16\"  }  } */"}, {"sha": "9bbab4e70dc8a78c5a006dc39a2152ee9d547826", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_n_u32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint32x4_t a, int32_t b)\n uint32x4_t\n foo1 (uint32x4_t a, int32_t b)\n {\n-  return vrshlq_n (a, b);\n+  return vrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vrshl.u32\"  }  } */"}, {"sha": "aa0cfc920d1195d5fec0940f97cb41de5d44ab29", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_n_u8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_n_u8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint8x16_t a, int32_t b)\n uint8x16_t\n foo1 (uint8x16_t a, int32_t b)\n {\n-  return vrshlq_n (a, b);\n+  return vrshlq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vrshl.u8\"  }  } */"}, {"sha": "f7874c055153e8e21ced4de3610b6926b56eb8cf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_n_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int16x8_t a)\n int16x8_t\n foo1 (int16x8_t a)\n {\n-  return vrshrq_n (a, 16);\n+  return vrshrq (a, 16);\n }\n \n /* { dg-final { scan-assembler \"vrshr.s16\"  }  } */"}, {"sha": "3a1258a38c6fff949b3242af536220b8d185f802", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_n_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int32x4_t a)\n int32x4_t\n foo1 (int32x4_t a)\n {\n-  return vrshrq_n (a, 32);\n+  return vrshrq (a, 32);\n }\n \n /* { dg-final { scan-assembler \"vrshr.s32\"  }  } */"}, {"sha": "ecb766ce8f05d49cc2f71ef68a39018b2a3c5b6e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_n_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (int8x16_t a)\n int8x16_t\n foo1 (int8x16_t a)\n {\n-  return vrshrq_n (a, 8);\n+  return vrshrq (a, 8);\n }\n \n /* { dg-final { scan-assembler \"vrshr.s8\"  }  } */"}, {"sha": "d77ea969e27b9ef45c50cd7fd023c9d98b6f0448", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_n_u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint16x8_t a)\n uint16x8_t\n foo1 (uint16x8_t a)\n {\n-  return vrshrq_n (a, 16);\n+  return vrshrq (a, 16);\n }\n \n /* { dg-final { scan-assembler \"vrshr.u16\"  }  } */"}, {"sha": "c0c41eb3ad5e5f6a12e97fb375cea7dadfd0a70a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_n_u32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint32x4_t a)\n uint32x4_t\n foo1 (uint32x4_t a)\n {\n-  return vrshrq_n (a, 32);\n+  return vrshrq (a, 32);\n }\n \n /* { dg-final { scan-assembler \"vrshr.u32\"  }  } */"}, {"sha": "2e3cf7b54e43951ed87bfc432b01103fa2497b5f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_n_u8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_n_u8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -16,7 +16,7 @@ foo (uint8x16_t a)\n uint8x16_t\n foo1 (uint8x16_t a)\n {\n-  return vrshrq_n (a, 8);\n+  return vrshrq (a, 8);\n }\n \n /* { dg-final { scan-assembler \"vrshr.u8\"  }  } */"}, {"sha": "8797de00cf3ac82dbbd5758da88f0d657ec87867", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshllbq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a)\n+{\n+  return vshllbq_n_s16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllb.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a)\n+{\n+  return vshllbq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllb.s16\"  }  } */"}, {"sha": "9d0b57e437881c78e0e6c32d72b975d29b89e479", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshllbq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8x16_t a)\n+{\n+  return vshllbq_n_s8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllb.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int8x16_t a)\n+{\n+  return vshllbq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllb.s8\"  }  } */"}, {"sha": "24f4f7fcf60b1913b179fe18aa46ac52431dfb8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshllbq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a)\n+{\n+  return vshllbq_n_u16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllb.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a)\n+{\n+  return vshllbq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllb.u16\"  }  } */"}, {"sha": "153da94f1010c74d22f0f29f98e84e4424366e79", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshllbq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_n_u8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a)\n+{\n+  return vshllbq_n_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllb.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a)\n+{\n+  return vshllbq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllb.u8\"  }  } */"}, {"sha": "6db513a73754dcbd2fbe99cbbb05e83b44d5a148", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlltq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a)\n+{\n+  return vshlltq_n_s16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a)\n+{\n+  return vshlltq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllt.s16\"  }  } */"}, {"sha": "aec31c68831351daa312f5caba9f934626739df5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlltq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8x16_t a)\n+{\n+  return vshlltq_n_s8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int8x16_t a)\n+{\n+  return vshlltq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllt.s8\"  }  } */"}, {"sha": "df633d1e9f212864b71c861ad6446b0ce7486e5d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlltq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a)\n+{\n+  return vshlltq_n_u16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a)\n+{\n+  return vshlltq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllt.u16\"  }  } */"}, {"sha": "ed6dd288c24d4ac2378f6335b410cfe7271136b1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlltq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_n_u8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a)\n+{\n+  return vshlltq_n_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a)\n+{\n+  return vshlltq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshllt.u8\"  }  } */"}, {"sha": "646690c16b5a8076f4b2aa1d8e664f1fe89e1bb1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_f16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vsubq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vsub.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vsubq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vsub.f16\"  }  } */"}, {"sha": "f011a7562a0b93bda0fdd1709576024379407b7d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_f32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vsubq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vsub.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vsubq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vsub.f32\"  }  } */"}, {"sha": "ae32f24a58eabcc817b69936eed9a91b9e6baa5e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_n_s16.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_s16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -2,6 +2,7 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n \n@@ -16,7 +17,7 @@ foo (int16x8_t a, int16_t b)\n int16x8_t\n foo1 (int16x8_t a, int16_t b)\n {\n-  return vsubq_n (a, b);\n+  return vsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vsub.i16\"  }  } */"}, {"sha": "1114b0212ee3a658aa3e40fae1c0fb3936324b94", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_n_s32.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_s32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -2,6 +2,7 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n \n@@ -16,7 +17,7 @@ foo (int32x4_t a, int32_t b)\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n-  return vsubq_n (a, b);\n+  return vsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vsub.i32\"  }  } */"}, {"sha": "6cc8aabdae2299f75af00060d4eb348a1a6b5440", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_n_s8.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_s8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -2,6 +2,7 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n \n@@ -16,7 +17,7 @@ foo (int8x16_t a, int8_t b)\n int8x16_t\n foo1 (int8x16_t a, int8_t b)\n {\n-  return vsubq_n (a, b);\n+  return vsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vsub.i8\"  }  } */"}, {"sha": "449fe238d22a904ee677a3dcb79402ed828d7984", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_n_u16.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_u16.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -2,6 +2,7 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n \n@@ -16,7 +17,7 @@ foo (uint16x8_t a, uint16_t b)\n uint16x8_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n-  return vsubq_n (a, b);\n+  return vsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vsub.i16\"  }  } */"}, {"sha": "842a0df8272f54d0002a29e26117643f0bf3f5ac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_n_u32.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_u32.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -2,6 +2,7 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n \n@@ -16,7 +17,7 @@ foo (uint32x4_t a, uint32_t b)\n uint32x4_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n-  return vsubq_n (a, b);\n+  return vsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vsub.i32\"  }  } */"}, {"sha": "48067f33ff206b7d6420b351323bc9dfe062af0d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_n_u8.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9355dee93fce833b307c4e8e7eb6d9a7d831333/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_u8.c?ref=f9355dee93fce833b307c4e8e7eb6d9a7d831333", "patch": "@@ -2,6 +2,7 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n \n@@ -16,7 +17,7 @@ foo (uint8x16_t a, uint8_t b)\n uint8x16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n-  return vsubq_n (a, b);\n+  return vsubq (a, b);\n }\n \n /* { dg-final { scan-assembler \"vsub.i8\"  }  } */"}]}