{"sha": "abdea447250e994c2de95a68cbc79d312cc54863", "node_id": "C_kwDOANBUbNoAKGFiZGVhNDQ3MjUwZTk5NGMyZGU5NWE2OGNiYzc5ZDMxMmNjNTQ4NjM", "commit": {"author": {"name": "Arsen Arsenovi\u0107", "email": "arsen@aarsen.me", "date": "2022-10-20T15:49:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-06T14:23:46Z"}, "message": "libstdc++: Enable building libstdc++.{a,so} when !HOSTED\n\nThis enables us to provide symbols for placeholders and numeric limits,\nand allows users to mess about with linker flags less.\n\nlibstdc++-v3/ChangeLog:\n\n\t* Makefile.am [!_GLIBCXX_HOSTED]: Enable src/ subdirectory.\n\t* Makefile.in: Regenerate.\n\t* src/Makefile.am [!_GLIBCXX_HOSTED]: Omit compatibility files.\n\tThere's no history to be compatible with.\n\t* src/c++11/Makefile.am [!_GLIBCXX_HOSTED]: Omit hosted-only\n\tsource files from the build.\n\t* src/c++17/Makefile.am [!_GLIBCXX_HOSTED]: Likewise.\n\t* src/c++20/Makefile.am [!_GLIBCXX_HOSTED]: Likewise.\n\t* src/c++98/Makefile.am [!_GLIBCXX_HOSTED]: Likewise.\n\t* src/Makefile.in: Regenerate.\n\t* src/c++11/Makefile.in: Regenerate.\n\t* src/c++17/Makefile.in: Regenerate.\n\t* src/c++20/Makefile.in: Regenerate.\n\t* src/c++98/Makefile.in: Regenerate.\n\nReviewed-by: Jonathan Wakely <jwakely@redhat.com>", "tree": {"sha": "540978ae5c0cded064ebd4c27e9f4aae8f3fc2bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/540978ae5c0cded064ebd4c27e9f4aae8f3fc2bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abdea447250e994c2de95a68cbc79d312cc54863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdea447250e994c2de95a68cbc79d312cc54863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abdea447250e994c2de95a68cbc79d312cc54863", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdea447250e994c2de95a68cbc79d312cc54863/comments", "author": {"login": "ArsenArsen", "id": 7805050, "node_id": "MDQ6VXNlcjc4MDUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7805050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArsenArsen", "html_url": "https://github.com/ArsenArsen", "followers_url": "https://api.github.com/users/ArsenArsen/followers", "following_url": "https://api.github.com/users/ArsenArsen/following{/other_user}", "gists_url": "https://api.github.com/users/ArsenArsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArsenArsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArsenArsen/subscriptions", "organizations_url": "https://api.github.com/users/ArsenArsen/orgs", "repos_url": "https://api.github.com/users/ArsenArsen/repos", "events_url": "https://api.github.com/users/ArsenArsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ArsenArsen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb8e29a5fd9cee09110a3a70c2b3645670ab65ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb8e29a5fd9cee09110a3a70c2b3645670ab65ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb8e29a5fd9cee09110a3a70c2b3645670ab65ee"}], "stats": {"total": 105, "additions": 77, "deletions": 28}, "files": [{"sha": "5fbf393bfdf63b7095236bce610988405d93bb12", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -24,11 +24,11 @@ include $(top_srcdir)/fragment.am\n \n if GLIBCXX_HOSTED\n ## Note that python must come after src.\n-  hosted_source = src doc po testsuite python\n+  hosted_source = doc po testsuite python\n endif\n \n ## Keep this list sync'd with acinclude.m4:GLIBCXX_CONFIGURE.\n-SUBDIRS = include libsupc++ $(hosted_source)\n+SUBDIRS = include libsupc++ src $(hosted_source)\n \n ACLOCAL_AMFLAGS = -I . -I .. -I ../config\n "}, {"sha": "500c0d752821d3a2416018eb99761d66aad57293", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -420,8 +420,8 @@ WARN_CXXFLAGS = \\\n \n # -I/-D flags to pass when compiling.\n AM_CPPFLAGS = $(GLIBCXX_INCLUDES) $(CPPFLAGS)\n-@GLIBCXX_HOSTED_TRUE@hosted_source = src doc po testsuite python\n-SUBDIRS = include libsupc++ $(hosted_source)\n+@GLIBCXX_HOSTED_TRUE@hosted_source = doc po testsuite python\n+SUBDIRS = include libsupc++ src $(hosted_source)\n ACLOCAL_AMFLAGS = -I . -I .. -I ../config\n @BUILD_XML_FALSE@STAMP_XML = \n "}, {"sha": "8cbf34a19e8ad21b2225f3ed378af76e8d4b8f76", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -128,7 +128,13 @@ cxx11_sources = \\\n \t${cxx0x_compat_sources} \\\n \t${ldbl_alt128_compat_sources}\n \n+if GLIBCXX_HOSTED\n libstdc___la_SOURCES = $(cxx98_sources) $(cxx11_sources)\n+else\n+# When freestanding, there's currently no compatibility to preserve.  Should\n+# that change, any compatibility sources can be added here.\n+libstdc___la_SOURCES =\n+endif\n \n libstdc___la_LIBADD = \\\n \t$(GLIBCXX_LIBS) \\"}, {"sha": "10fd9aa0dafcd8313a1ddf2f7c08f13dd1f223f8", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -162,7 +162,8 @@ am__objects_2 = compatibility.lo compatibility-debug_list.lo \\\n @GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\tcompatibility-ldbl-alt128.lo \\\n @GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(am__objects_4)\n am__objects_6 = $(am__objects_3) $(am__objects_5)\n-am_libstdc___la_OBJECTS = $(am__objects_2) $(am__objects_6)\n+@GLIBCXX_HOSTED_TRUE@am_libstdc___la_OBJECTS = $(am__objects_2) \\\n+@GLIBCXX_HOSTED_TRUE@\t$(am__objects_6)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n @VTV_CYGMIN_FALSE@am_libstdc___la_rpath = -rpath $(toolexeclibdir)\n @VTV_CYGMIN_TRUE@am_libstdc___la_rpath = -rpath $(toolexeclibdir)\n@@ -539,7 +540,10 @@ cxx11_sources = \\\n \t${cxx0x_compat_sources} \\\n \t${ldbl_alt128_compat_sources}\n \n-libstdc___la_SOURCES = $(cxx98_sources) $(cxx11_sources)\n+# When freestanding, there's currently no compatibility to preserve.  Should\n+# that change, any compatibility sources can be added here.\n+@GLIBCXX_HOSTED_FALSE@libstdc___la_SOURCES = \n+@GLIBCXX_HOSTED_TRUE@libstdc___la_SOURCES = $(cxx98_sources) $(cxx11_sources)\n libstdc___la_LIBADD = \\\n \t$(GLIBCXX_LIBS) \\\n \t$(top_builddir)/libsupc++/libsupc++convenience.la \\"}, {"sha": "682be1669a41e1ae06cb74d119612f5b39f95470", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -51,6 +51,10 @@ else\n cxx11_abi_sources =\n endif\n \n+sources_freestanding = \\\n+\tlimits.cc \\\n+\tplaceholders.cc\n+\n sources = \\\n \tchrono.cc \\\n \tcodecvt.cc \\\n@@ -66,9 +70,7 @@ sources = \\\n \thashtable_c++0x.cc \\\n \tios.cc \\\n \tios_errcat.cc \\\n-\tlimits.cc \\\n \tmutex.cc \\\n-\tplaceholders.cc \\\n \trandom.cc \\\n \tregex.cc  \\\n \tshared_ptr.cc \\\n@@ -118,7 +120,15 @@ endif\n \n vpath % $(top_srcdir)/src/c++11\n \n-libc__11convenience_la_SOURCES = $(sources)  $(inst_sources)\n+if !GLIBCXX_HOSTED\n+libc__11convenience_la_SOURCES = $(sources_freestanding)\n+else\n+libc__11convenience_la_SOURCES = \\\n+\t$(sources_freestanding) \\\n+\t$(sources) \\\n+\t$(inst_sources)\n+endif\n+\n \n # Use special rules for the hashtable.cc file so that all\n # the generated template functions are also instantiated."}, {"sha": "e7a09fe324697309faf9df8f109eb3882455515f", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -121,26 +121,26 @@ CONFIG_CLEAN_FILES =\n CONFIG_CLEAN_VPATH_FILES =\n LTLIBRARIES = $(noinst_LTLIBRARIES)\n libc__11convenience_la_LIBADD =\n-@ENABLE_DUAL_ABI_TRUE@am__objects_1 = cow-locale_init.lo \\\n+am__objects_1 = limits.lo placeholders.lo\n+@ENABLE_DUAL_ABI_TRUE@am__objects_2 = cow-locale_init.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-shim_facets.lo cxx11-hash_tr1.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcxx11-ios_failure.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcxx11-shim_facets.lo cxx11-stdexcept.lo\n-am__objects_2 = ctype_configure_char.lo ctype_members.lo\n-am__objects_3 = chrono.lo codecvt.lo condition_variable.lo \\\n+am__objects_3 = ctype_configure_char.lo ctype_members.lo\n+am__objects_4 = chrono.lo codecvt.lo condition_variable.lo \\\n \tcow-stdexcept.lo ctype.lo debug.lo functexcept.lo \\\n \tfunctional.lo futex.lo future.lo hash_c++0x.lo \\\n-\thashtable_c++0x.lo ios.lo ios_errcat.lo limits.lo mutex.lo \\\n-\tplaceholders.lo random.lo regex.lo shared_ptr.lo \\\n-\tsnprintf_lite.lo system_error.lo thread.lo $(am__objects_1) \\\n-\t$(am__objects_2)\n-@ENABLE_DUAL_ABI_TRUE@am__objects_4 = cow-fstream-inst.lo \\\n+\thashtable_c++0x.lo ios.lo ios_errcat.lo mutex.lo random.lo \\\n+\tregex.lo shared_ptr.lo snprintf_lite.lo system_error.lo \\\n+\tthread.lo $(am__objects_2) $(am__objects_3)\n+@ENABLE_DUAL_ABI_TRUE@am__objects_5 = cow-fstream-inst.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-sstream-inst.lo cow-string-inst.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-string-io-inst.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-wstring-inst.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-wstring-io-inst.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcxx11-locale-inst.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcxx11-wlocale-inst.lo sso_string.lo\n-@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_5 = $(am__objects_4) \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_6 = $(am__objects_5) \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\text11-inst.lo fstream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tios-inst.lo iostream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tistream-inst.lo locale-inst.lo \\\n@@ -149,7 +149,11 @@ am__objects_3 = chrono.lo codecvt.lo condition_variable.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-io-inst.lo wlocale-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-io-inst.lo\n-am_libc__11convenience_la_OBJECTS = $(am__objects_3) $(am__objects_5)\n+@GLIBCXX_HOSTED_FALSE@am_libc__11convenience_la_OBJECTS =  \\\n+@GLIBCXX_HOSTED_FALSE@\t$(am__objects_1)\n+@GLIBCXX_HOSTED_TRUE@am_libc__11convenience_la_OBJECTS =  \\\n+@GLIBCXX_HOSTED_TRUE@\t$(am__objects_1) $(am__objects_4) \\\n+@GLIBCXX_HOSTED_TRUE@\t$(am__objects_6)\n libc__11convenience_la_OBJECTS = $(am_libc__11convenience_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n@@ -466,6 +470,10 @@ host_sources = \\\n @ENABLE_DUAL_ABI_TRUE@\tcxx11-shim_facets.cc \\\n @ENABLE_DUAL_ABI_TRUE@\tcxx11-stdexcept.cc\n \n+sources_freestanding = \\\n+\tlimits.cc \\\n+\tplaceholders.cc\n+\n sources = \\\n \tchrono.cc \\\n \tcodecvt.cc \\\n@@ -481,9 +489,7 @@ sources = \\\n \thashtable_c++0x.cc \\\n \tios.cc \\\n \tios_errcat.cc \\\n-\tlimits.cc \\\n \tmutex.cc \\\n-\tplaceholders.cc \\\n \trandom.cc \\\n \tregex.cc  \\\n \tshared_ptr.cc \\\n@@ -526,7 +532,12 @@ sources = \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-io-inst.cc\n \n-libc__11convenience_la_SOURCES = $(sources)  $(inst_sources)\n+@GLIBCXX_HOSTED_FALSE@libc__11convenience_la_SOURCES = $(sources_freestanding)\n+@GLIBCXX_HOSTED_TRUE@libc__11convenience_la_SOURCES = \\\n+@GLIBCXX_HOSTED_TRUE@\t$(sources_freestanding) \\\n+@GLIBCXX_HOSTED_TRUE@\t$(sources) \\\n+@GLIBCXX_HOSTED_TRUE@\t$(inst_sources)\n+\n \n # Rewrite the type info for __ios_failure.\n @ENABLE_DUAL_ABI_TRUE@rewrite_ios_failure_typeinfo = sed -e '/^_*_ZTISt13__ios_failure:/,/_ZTVN10__cxxabiv120__si_class_type_infoE/s/_ZTVN10__cxxabiv120__si_class_type_infoE/_ZTVSt19__iosfail_type_info/'"}, {"sha": "30e693a54df4102f60f0504a28d6dad3dae63bb3", "filename": "libstdc++-v3/src/c++17/Makefile.am", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -60,7 +60,11 @@ sources = \\\n \n vpath % $(top_srcdir)/src/c++17\n \n+if GLIBCXX_HOSTED\n libc__17convenience_la_SOURCES = $(sources)  $(inst_sources)\n+else\n+libc__17convenience_la_SOURCES =\n+endif\n \n if GLIBCXX_LDBL_ALT128_COMPAT\n floating_from_chars.lo: floating_from_chars.cc"}, {"sha": "fe5c9ffce5f3c02149f2302f10893125ef7cd51d", "filename": "libstdc++-v3/src/c++17/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -128,7 +128,8 @@ am__objects_2 = floating_from_chars.lo floating_to_chars.lo fs_dir.lo \\\n @ENABLE_DUAL_ABI_TRUE@am__objects_3 = cow-string-inst.lo\n @ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_4 = ostream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-inst.lo $(am__objects_3)\n-am_libc__17convenience_la_OBJECTS = $(am__objects_2) $(am__objects_4)\n+@GLIBCXX_HOSTED_TRUE@am_libc__17convenience_la_OBJECTS =  \\\n+@GLIBCXX_HOSTED_TRUE@\t$(am__objects_2) $(am__objects_4)\n libc__17convenience_la_OBJECTS = $(am_libc__17convenience_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n@@ -455,7 +456,8 @@ sources = \\\n \tmemory_resource.cc \\\n \t$(extra_fs_sources)\n \n-libc__17convenience_la_SOURCES = $(sources)  $(inst_sources)\n+@GLIBCXX_HOSTED_FALSE@libc__17convenience_la_SOURCES = \n+@GLIBCXX_HOSTED_TRUE@libc__17convenience_la_SOURCES = $(sources)  $(inst_sources)\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually"}, {"sha": "0bc8a7b832a9698d5730883d79ac79e6e6f4425e", "filename": "libstdc++-v3/src/c++20/Makefile.am", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.am?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -53,7 +53,11 @@ tzdb.o: tzdb.cc tzdata.zi.h\n \t$(CXXCOMPILE) -I. -c $<\n endif\n \n+if GLIBCXX_HOSTED\n libc__20convenience_la_SOURCES = $(sources)  $(inst_sources)\n+else\n+libc__20convenience_la_SOURCES =\n+endif\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually"}, {"sha": "23aba3d62d4e11ddbbe09330d72fde131e930542", "filename": "libstdc++-v3/src/c++20/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -123,7 +123,8 @@ LTLIBRARIES = $(noinst_LTLIBRARIES)\n libc__20convenience_la_LIBADD =\n am__objects_1 = tzdb.lo\n @ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_2 = sstream-inst.lo\n-am_libc__20convenience_la_OBJECTS = $(am__objects_1) $(am__objects_2)\n+@GLIBCXX_HOSTED_TRUE@am_libc__20convenience_la_OBJECTS =  \\\n+@GLIBCXX_HOSTED_TRUE@\t$(am__objects_1) $(am__objects_2)\n libc__20convenience_la_OBJECTS = $(am_libc__20convenience_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n@@ -432,7 +433,8 @@ headers =\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tsstream-inst.cc\n \n sources = tzdb.cc\n-libc__20convenience_la_SOURCES = $(sources)  $(inst_sources)\n+@GLIBCXX_HOSTED_FALSE@libc__20convenience_la_SOURCES = \n+@GLIBCXX_HOSTED_TRUE@libc__20convenience_la_SOURCES = $(sources)  $(inst_sources)\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually"}, {"sha": "284ffda3443523bfe6dd5e2d1fb553e1543ec42e", "filename": "libstdc++-v3/src/c++98/Makefile.am", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -148,7 +148,11 @@ sources = \\\n \n vpath % $(top_srcdir)/src/c++98\n \n+if GLIBCXX_HOSTED\n libc__98convenience_la_SOURCES = $(sources)\n+else\n+libc__98convenience_la_SOURCES =\n+endif\n \n # Use special rules to compile with -fimplicit-templates.\n c++locale.lo: c++locale.cc"}, {"sha": "a100df77a6d87d16d11e4a127a3c219762e0c2ab", "filename": "libstdc++-v3/src/c++98/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdea447250e994c2de95a68cbc79d312cc54863/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in?ref=abdea447250e994c2de95a68cbc79d312cc54863", "patch": "@@ -144,7 +144,8 @@ am__objects_7 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n \tstdexcept.lo strstream.lo tree.lo istream.lo istream-string.lo \\\n \tstreambuf.lo valarray.lo $(am__objects_1) $(am__objects_3) \\\n \t$(am__objects_6)\n-am_libc__98convenience_la_OBJECTS = $(am__objects_7)\n+@GLIBCXX_HOSTED_TRUE@am_libc__98convenience_la_OBJECTS =  \\\n+@GLIBCXX_HOSTED_TRUE@\t$(am__objects_7)\n libc__98convenience_la_OBJECTS = $(am_libc__98convenience_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n@@ -521,7 +522,8 @@ sources = \\\n \t${host_sources} \\\n \t${host_sources_extra}\n \n-libc__98convenience_la_SOURCES = $(sources)\n+@GLIBCXX_HOSTED_FALSE@libc__98convenience_la_SOURCES = \n+@GLIBCXX_HOSTED_TRUE@libc__98convenience_la_SOURCES = $(sources)\n @ENABLE_DUAL_ABI_TRUE@GLIBCXX_ABI_FLAGS = -D_GLIBCXX_USE_CXX11_ABI=@glibcxx_cxx98_abi@\n \n # Use special rules for the deprecated source files so that they find"}]}