{"sha": "16f104b32ce13a42aa288b39694a714ad256917a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZmMTA0YjMyY2UxM2E0MmFhMjg4YjM5Njk0YTcxNGFkMjU2OTE3YQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cambridge.redhat.com", "date": "2001-06-11T16:58:56Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2001-06-11T16:58:56Z"}, "message": "Fix compile time warnings\n\nFrom-SVN: r43199", "tree": {"sha": "df53bafa92de7ee7fbfb49a8720a46b706f089d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df53bafa92de7ee7fbfb49a8720a46b706f089d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16f104b32ce13a42aa288b39694a714ad256917a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f104b32ce13a42aa288b39694a714ad256917a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f104b32ce13a42aa288b39694a714ad256917a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f104b32ce13a42aa288b39694a714ad256917a/comments", "author": null, "committer": null, "parents": [{"sha": "d4a6cf38611a467ea5e7ca4488dae217059bdc65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a6cf38611a467ea5e7ca4488dae217059bdc65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a6cf38611a467ea5e7ca4488dae217059bdc65"}], "stats": {"total": 76, "additions": 43, "deletions": 33}, "files": [{"sha": "fd65dd5569d7c3ed879d8463702f07776bddced5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f104b32ce13a42aa288b39694a714ad256917a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f104b32ce13a42aa288b39694a714ad256917a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16f104b32ce13a42aa288b39694a714ad256917a", "patch": "@@ -1,3 +1,21 @@\n+2001-06-11  Nick Clifton  <nickc@cambridge.redhat.com>\n+\n+\t* config/m32r/m32r.md (movstrsi_internal): Do not expect a\n+\treturn string from m32r_output_block_move.\n+        * config/m32r/m32r-protos.h: Make m32r_output_block_move a\n+\tvoid function.\n+        * config/m32r/m32r.h (INT32_P): Rename to UNIT32_P and remove\n+\tinteger overflow.\n+        (ROUND_ADVANCE): Remove signed/unsigned conflict.\n+        * config/m32r/m32r.c: Declare prototypes for static functions.\n+        (move_src_operand): Replace INT32_P with UINT32_P.\n+        (function_arg_partial_nregs): Fixed signed/unsigned conflict\n+\tin initialisation of 'size'.\n+        (m32r_sched_reord): Remove redundant declarations of 'code'.\n+        (m32r_output_block_move): Change to a void function.\n+        (m32r_encode_section_info): Cast return of\n+\tTREE_STRING_POINTER to avoid compile time warning.\n+\n 2001-06-11  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/osf5.h (TARGET_LD_BUGGY_LDGP): New."}, {"sha": "f3eda8359d42498b5e073a71bd3fa71519e8e1d1", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f104b32ce13a42aa288b39694a714ad256917a/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f104b32ce13a42aa288b39694a714ad256917a/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=16f104b32ce13a42aa288b39694a714ad256917a", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for m32r.c functions used in the md file & elsewhere.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -60,7 +60,7 @@ extern int    m32r_address_code\t\t\tPARAMS ((rtx));\n extern void   m32r_initialize_trampoline\tPARAMS ((rtx, rtx, rtx));\n extern int    zero_and_one\t\t\tPARAMS ((rtx, rtx));\n extern char * emit_cond_move\t\t\tPARAMS ((rtx *, rtx));\n-extern char * m32r_output_block_move \t\tPARAMS ((rtx, rtx *));\n+extern void   m32r_output_block_move \t\tPARAMS ((rtx, rtx *));\n extern void   m32r_expand_block_move \t\tPARAMS ((rtx *));\n extern void   m32r_print_operand\t\tPARAMS ((FILE *, rtx, int));\n extern void   m32r_print_operand_address\tPARAMS ((FILE *, rtx));"}, {"sha": "5bb2d5691b6bad767102249d4dc3d27e8002fd1d", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f104b32ce13a42aa288b39694a714ad256917a/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f104b32ce13a42aa288b39694a714ad256917a/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=16f104b32ce13a42aa288b39694a714ad256917a", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the Mitsubishi M32R cpu.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"recog.h\"\n #include \"toplev.h\"\n+#include \"ggc.h\"\n #include \"m32r-protos.h\"\n \n /* Save the operands last given to a compare for use when we\n@@ -55,7 +56,9 @@ enum m32r_sdata m32r_sdata;\n int m32r_sched_odd_word_p;\n \n /* Forward declaration.  */\n-static void init_reg_tables\t\t\tPARAMS ((void));\n+static void  init_reg_tables\t\t\tPARAMS ((void));\n+static void  block_move_call\t\t\tPARAMS ((rtx, rtx, rtx));\n+static int   m32r_is_insn\t\t\tPARAMS ((rtx));\n \n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n \n@@ -372,7 +375,7 @@ m32r_encode_section_info (decl)\n       if (TREE_CODE_CLASS (TREE_CODE (decl)) == 'd'\n \t  && DECL_SECTION_NAME (decl) != NULL_TREE)\n \t{\n-\t  char *name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+\t  char *name = (char *) TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n \t  if (! strcmp (name, \".sdata\") || ! strcmp (name, \".sbss\"))\n \t    {\n #if 0 /* ??? There's no reason to disallow this, is there?  */\n@@ -436,6 +439,7 @@ m32r_encode_section_info (decl)\n       const char *str = XSTR (XEXP (rtl, 0), 0);\n       int len = strlen (str);\n       char *newstr = ggc_alloc (len + 2);\n+\n       strcpy (newstr + 1, str);\n       *newstr = prefix;\n       XSTR (XEXP (rtl, 0), 0) = newstr;\n@@ -744,7 +748,7 @@ move_src_operand (op, mode)\n \t loadable with one insn, and split the rest into two.  The instances\n \t where this would help should be rare and the current way is\n \t simpler.  */\n-      return INT32_P (INTVAL (op));\n+      return UINT32_P (INTVAL (op));\n     case LABEL_REF :\n       return TARGET_ADDR24;\n     case CONST_DOUBLE :\n@@ -1345,9 +1349,11 @@ function_arg_partial_nregs (cum, mode, type, named)\n      int named ATTRIBUTE_UNUSED;\n {\n   int ret;\n-  int size = (((mode == BLKmode && type)\n-\t       ? int_size_in_bytes (type)\n-\t       : GET_MODE_SIZE (mode)) + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n+  unsigned int size =\n+    (((mode == BLKmode && type)\n+      ? (unsigned int) int_size_in_bytes (type)\n+      : GET_MODE_SIZE (mode)) + UNITS_PER_WORD - 1)\n+    / UNITS_PER_WORD;\n \n   if (*cum >= M32R_MAX_PARM_REGS)\n     ret = 0;\n@@ -1559,7 +1565,6 @@ m32r_sched_reorder (stream, verbose, ready, n_ready)\n       for (i = n_ready-1; i >= 0; i--)\n \t{\n \t  rtx insn = ready[i];\n-\t  enum rtx_code code;\n \n \t  if (! m32r_is_insn (insn))\n \t    {\n@@ -1615,7 +1620,6 @@ m32r_sched_reorder (stream, verbose, ready, n_ready)\n \t  for (i = 0; i < n_ready; i++)\n \t    {\n \t      rtx insn = ready[i];\n-\t      enum rtx_code code;\n \n \t      fprintf (stream, \" %d\", INSN_UID (ready[i]));\n \n@@ -2608,12 +2612,12 @@ emit_cond_move (operands, insn)\n     }\n \n   sprintf (buffer, \"mvfc %s, cbr\", dest);\n-  \n+\n   /* If the true value was '0' then we need to invert the results of the move.  */\n   if (INTVAL (operands [2]) == 0)\n     sprintf (buffer + strlen (buffer), \"\\n\\txor3 %s, %s, #1\",\n \t     dest, dest);\n-  \n+\n   return buffer;\n }\n \n@@ -2777,7 +2781,7 @@ m32r_expand_block_move (operands)\n    operands[3] is a temp register.\n    operands[4] is a temp register.  */\n \n-char *\n+void\n m32r_output_block_move (insn, operands)\n      rtx insn ATTRIBUTE_UNUSED;\n      rtx operands[];\n@@ -2891,8 +2895,6 @@ m32r_output_block_move (insn, operands)\n \n       first_time = 0;\n     }\n-\n-  return \"\";\n }\n \n /* Return true if op is an integer constant, less than or equal to"}, {"sha": "45983022bd614c9944ec2a6960efe66a1ce1f175", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f104b32ce13a42aa288b39694a714ad256917a/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f104b32ce13a42aa288b39694a714ad256917a/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=16f104b32ce13a42aa288b39694a714ad256917a", "patch": "@@ -753,15 +753,13 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define INT8_P(X) ((X) >= -0x80 && (X) <= 0x7f)\n #define INT16_P(X) ((X) >= -0x8000 && (X) <= 0x7fff)\n #define CMP_INT16_P(X) ((X) >= -0x7fff && (X) <= 0x8000)\n-#define UINT16_P(X) (((unsigned HOST_WIDE_INT)(X)) <= 0xffff)\n #define UPPER16_P(X) (((X) & 0xffff) == 0\t\t\t\t\\\n \t\t      && ((X) >> 16) >= -0x8000\t\t\t\t\\\n \t\t      && ((X) >> 16) <= 0x7fff)\n-#define UINT24_P(X) (((unsigned HOST_WIDE_INT) (X)) < 0x1000000)\n-#define INT32_P(X) (((X) >= -(HOST_WIDE_INT) 0x80000000\t\t\t\\\n-\t\t     && (X) <= (HOST_WIDE_INT) 0x7fffffff)\t\t\\\n-\t\t    || (unsigned HOST_WIDE_INT) (X) <= 0xffffffff)\n-#define UINT5_P(X) ((X) >= 0 && (X) < 32)\n+#define UINT16_P(X) (((unsigned HOST_WIDE_INT) (X)) <= 0x0000ffff)\n+#define UINT24_P(X) (((unsigned HOST_WIDE_INT) (X)) <= 0x00ffffff)\n+#define UINT32_P(X) (((unsigned HOST_WIDE_INT) (X)) <= 0xffffffff)\n+#define UINT5_P(X)  ((X) >= 0 && (X) < 32)\n #define INVERTED_SIGNED_8BIT(VAL) ((VAL) >= -127 && (VAL) <= 128)\n \n #define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\t\\\n@@ -1046,19 +1044,11 @@ M32R_STACK_ALIGN (current_function_outgoing_args_size)\n /* Round arg MODE/TYPE up to the next word boundary.  */\n #define ROUND_ADVANCE_ARG(MODE, TYPE) \\\n   ((MODE) == BLKmode\t\t\t\t\\\n-   ? ROUND_ADVANCE (int_size_in_bytes (TYPE))\t\\\n+   ? ROUND_ADVANCE ((unsigned int) int_size_in_bytes (TYPE))\t\\\n    : ROUND_ADVANCE (GET_MODE_SIZE (MODE)))\n \n /* Round CUM up to the necessary point for argument MODE/TYPE.  */\n-#if 0\n-#define ROUND_ADVANCE_CUM(CUM, MODE, TYPE) \\\n-((((MODE) == BLKmode ? TYPE_ALIGN (TYPE) : GET_MODE_BITSIZE (MODE)) \\\n-  > BITS_PER_WORD)\t\\\n- ? ((CUM) + 1 & ~1)\t\\\n- : (CUM))\n-#else\n #define ROUND_ADVANCE_CUM(CUM, MODE, TYPE) (CUM)\n-#endif\n \n /* Return boolean indicating arg of type TYPE and mode MODE will be passed in\n    a reg.  This includes arguments that have to be passed by reference as the"}, {"sha": "e692b2c60127a152af4bb30946ee34a4339c84c8", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f104b32ce13a42aa288b39694a714ad256917a/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f104b32ce13a42aa288b39694a714ad256917a/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=16f104b32ce13a42aa288b39694a714ad256917a", "patch": "@@ -1,5 +1,5 @@\n ;; Machine description of the Mitsubishi M32R cpu for GNU C compiler\n-;; Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+;; Copyright (C) 1996, 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -2498,6 +2498,6 @@\n    (clobber (match_scratch:SI 3 \"=&r\"))\t\t\t\t;; temp 1\n    (clobber (match_scratch:SI 4 \"=&r\"))]\t\t\t;; temp 2\n   \"\"\n-  \"* return m32r_output_block_move (insn, operands);\"\n+  \"* m32r_output_block_move (insn, operands); return \\\"\\\"; \"\n   [(set_attr \"type\"\t\"store8\")\n    (set_attr \"length\"\t\"72\")]) ;; Maximum"}]}