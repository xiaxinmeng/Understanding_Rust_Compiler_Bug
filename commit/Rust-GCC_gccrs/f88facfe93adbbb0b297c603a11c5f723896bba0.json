{"sha": "f88facfe93adbbb0b297c603a11c5f723896bba0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg4ZmFjZmU5M2FkYmJiMGIyOTdjNjAzYTExYzVmNzIzODk2YmJhMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-08-20T15:19:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-08-20T15:19:16Z"}, "message": "utils.c (convert): In the padded case...\n\n\t* gcc-interface/utils.c (convert): In the padded case, do the final\n\tconversion as an unchecked conversion if the underlying types are\n\tarray types with variable size.\n\nFrom-SVN: r150965", "tree": {"sha": "e50017bcca506b95542b806785adc714348c64c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e50017bcca506b95542b806785adc714348c64c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f88facfe93adbbb0b297c603a11c5f723896bba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f88facfe93adbbb0b297c603a11c5f723896bba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f88facfe93adbbb0b297c603a11c5f723896bba0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f88facfe93adbbb0b297c603a11c5f723896bba0/comments", "author": null, "committer": null, "parents": [{"sha": "167f281ea66916a195bc4b7072714a305b0a123c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167f281ea66916a195bc4b7072714a305b0a123c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167f281ea66916a195bc4b7072714a305b0a123c"}], "stats": {"total": 95, "additions": 78, "deletions": 17}, "files": [{"sha": "b01d1fafb02feedd02ed819641e14e5bcea71faf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88facfe93adbbb0b297c603a11c5f723896bba0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88facfe93adbbb0b297c603a11c5f723896bba0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f88facfe93adbbb0b297c603a11c5f723896bba0", "patch": "@@ -1,8 +1,14 @@\n+2009-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (convert): In the padded case, do the final\n+\tconversion as an unchecked conversion if the underlying types are\n+\tarray types with variable size.\n+\n 2009-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (SET_TYPE_RM_VALUE): Mark the expression\n \tas visited.\n-\t* gcc-interface/misc (gnat_get_subrange_bounds): Always return the\n+\t* gcc-interface/misc.c (gnat_get_subrange_bounds): Always return the\n \tbounds.\n \t* gcc-interface/trans.c (add_decl_expr): Do not mark gigi-specific\n \tfields."}, {"sha": "f209dcc8bdb1d54c6c73871a4e2c9fcc27123334", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88facfe93adbbb0b297c603a11c5f723896bba0/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88facfe93adbbb0b297c603a11c5f723896bba0/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=f88facfe93adbbb0b297c603a11c5f723896bba0", "patch": "@@ -3810,13 +3810,13 @@ convert (tree type, tree expr)\n \t\t  == TYPE_NAME (TREE_TYPE (TYPE_FIELDS (etype)))))\n     ;\n \n-  /* If the output type has padding, convert to the inner type and\n-     make a constructor to build the record.  */\n+  /* If the output type has padding, convert to the inner type and make a\n+     constructor to build the record, unless a variable size is involved.  */\n   else if (code == RECORD_TYPE && TYPE_IS_PADDING_P (type))\n     {\n       /* If we previously converted from another type and our type is\n \t of variable size, remove the conversion to avoid the need for\n-\t variable-size temporaries.  Likewise for a conversion between\n+\t variable-sized temporaries.  Likewise for a conversion between\n \t original and packable version.  */\n       if (TREE_CODE (expr) == VIEW_CONVERT_EXPR\n \t  && (!TREE_CONSTANT (TYPE_SIZE (type))\n@@ -3827,7 +3827,7 @@ convert (tree type, tree expr)\n \n       /* If we are just removing the padding from expr, convert the original\n \t object if we have variable size in order to avoid the need for some\n-\t variable-size temporaries.  Likewise if the padding is a mere variant\n+\t variable-sized temporaries.  Likewise if the padding is a variant\n \t of the other, so we avoid a pointless unpad/repad sequence.  */\n       if (TREE_CODE (expr) == COMPONENT_REF\n \t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0))) == RECORD_TYPE\n@@ -3841,20 +3841,32 @@ convert (tree type, tree expr)\n \treturn convert (type, TREE_OPERAND (expr, 0));\n \n       /* If the result type is a padded type with a self-referentially-sized\n-\t field and the expression type is a record, do this as an\n-\t unchecked conversion.  */\n-      else if (TREE_CODE (etype) == RECORD_TYPE\n-\t       && CONTAINS_PLACEHOLDER_P (DECL_SIZE (TYPE_FIELDS (type))))\n+\t field and the expression type is a record, do this as an unchecked\n+\t conversion.  */\n+      if (TREE_CODE (etype) == RECORD_TYPE\n+\t  && CONTAINS_PLACEHOLDER_P (DECL_SIZE (TYPE_FIELDS (type))))\n \treturn unchecked_convert (type, expr, false);\n \n-      else\n-\treturn\n-\t  gnat_build_constructor (type,\n-\t\t\t     tree_cons (TYPE_FIELDS (type),\n-\t\t\t\t\tconvert (TREE_TYPE\n-\t\t\t\t\t\t (TYPE_FIELDS (type)),\n-\t\t\t\t\t\t expr),\n-\t\t\t\t\tNULL_TREE));\n+      /* If we are converting between array types with variable size, do the\n+\t final conversion as an unchecked conversion, again to avoid the need\n+\t for some variable-sized temporaries.  If valid, this conversion is\n+\t very likely purely technical and without real effects.  */\n+      if (TREE_CODE (etype) == ARRAY_TYPE\n+\t  && TREE_CODE (TREE_TYPE (TYPE_FIELDS (type))) == ARRAY_TYPE\n+\t  && !TREE_CONSTANT (TYPE_SIZE (etype))\n+\t  && !TREE_CONSTANT (TYPE_SIZE (type)))\n+\treturn unchecked_convert (type,\n+\t\t\t\t  convert (TREE_TYPE (TYPE_FIELDS (type)),\n+\t\t\t\t\t   expr),\n+\t\t\t\t  false);\n+\n+      return\n+\tgnat_build_constructor (type,\n+\t\t\t\ttree_cons (TYPE_FIELDS (type),\n+\t\t\t\t\t   convert (TREE_TYPE\n+\t\t\t\t\t\t    (TYPE_FIELDS (type)),\n+\t\t\t\t\t\t    expr),\n+\t\t\t\t\t   NULL_TREE));\n     }\n \n   /* If the input type has padding, remove it and convert to the output type."}, {"sha": "c341ae8903c4edc814ebc333021f42b792f0d78f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88facfe93adbbb0b297c603a11c5f723896bba0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88facfe93adbbb0b297c603a11c5f723896bba0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f88facfe93adbbb0b297c603a11c5f723896bba0", "patch": "@@ -1,3 +1,8 @@\n+2009-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/slice6.adb: New test.\n+\t* gnat.dg/slice6_pkg.ads: New helper.\n+\n 2009-08-20  Michael Matz  <matz@suse.de>\n \n \tPR fortran/41126"}, {"sha": "8d96bbf8cf3de0f937111596edde0df4659a6bd0", "filename": "gcc/testsuite/gnat.dg/slice6.adb", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88facfe93adbbb0b297c603a11c5f723896bba0/gcc%2Ftestsuite%2Fgnat.dg%2Fslice6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88facfe93adbbb0b297c603a11c5f723896bba0/gcc%2Ftestsuite%2Fgnat.dg%2Fslice6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fslice6.adb?ref=f88facfe93adbbb0b297c603a11c5f723896bba0", "patch": "@@ -0,0 +1,23 @@\n+-- { dg-do compile }\r\n+-- { dg-options \"-gnatws\" }\r\n+\r\n+with Slice6_Pkg; use Slice6_Pkg;\r\n+\r\n+procedure Slice6 is\r\n+\r\n+  procedure Send (V_LENGTH : SHORT_INTEGER) is\r\n+\r\n+    V : Integer;\r\n+\r\n+    V_BLOCK : T_BLOCK (1 .. 4096);\r\n+    for V_BLOCK use at V'Address;\r\n+\r\n+    V_MSG : T_MSG ;\r\n+\r\n+  begin\r\n+    V_MSG := (V_LENGTH, 1, V_BLOCK (1 .. V_LENGTH));\r\n+  end;\r\n+\r\n+begin\r\n+  null;\r\n+end;\r"}, {"sha": "3154c2959a66cf3e6479227c3ba970eb7764ffda", "filename": "gcc/testsuite/gnat.dg/slice6_pkg.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88facfe93adbbb0b297c603a11c5f723896bba0/gcc%2Ftestsuite%2Fgnat.dg%2Fslice6_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88facfe93adbbb0b297c603a11c5f723896bba0/gcc%2Ftestsuite%2Fgnat.dg%2Fslice6_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fslice6_pkg.ads?ref=f88facfe93adbbb0b297c603a11c5f723896bba0", "patch": "@@ -0,0 +1,15 @@\n+package Slice6_Pkg is\r\n+\r\n+  subtype LENGTH_RANGE is SHORT_INTEGER range 0 .. 8184;\r\n+\r\n+  type T_BLOCK is array (SHORT_INTEGER range <>) of SHORT_SHORT_INTEGER;\r\n+  for T_BLOCK'alignment use 4;\r\n+\r\n+  type T_MSG (V_LENGTH : LENGTH_RANGE := 0) is\r\n+    record\r\n+      HEADER : Integer;\r\n+      DATAS  : T_BLOCK (1 .. V_LENGTH) := (others => 0);\r\n+    end record;\r\n+  for T_MSG'alignment use 4;\r\n+\r\n+end Slice6_Pkg;\r"}]}