{"sha": "cd471b26ca3923f6ca39105c0efe166248ec0425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q0NzFiMjZjYTM5MjNmNmNhMzkxMDVjMGVmZTE2NjI0OGVjMDQyNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-03-13T08:12:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-03-13T08:12:07Z"}, "message": "re PR middle-end/84831 (Invalid memory read in parse_output_constraint)\n\n\tPR middle-end/84831\n\t* stmt.c (parse_output_constraint): If the CONSTRAINT_LEN (*p, p)\n\tcharacters starting at p contain '\\0' character, don't look beyond\n\tthat.\n\nFrom-SVN: r258478", "tree": {"sha": "2156fd4967a528df8a83ab807dd54ad5c85273dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2156fd4967a528df8a83ab807dd54ad5c85273dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd471b26ca3923f6ca39105c0efe166248ec0425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd471b26ca3923f6ca39105c0efe166248ec0425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd471b26ca3923f6ca39105c0efe166248ec0425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd471b26ca3923f6ca39105c0efe166248ec0425/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee6e1303781ca90a35e962c52fe0f6f83a0bc10e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6e1303781ca90a35e962c52fe0f6f83a0bc10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6e1303781ca90a35e962c52fe0f6f83a0bc10e"}], "stats": {"total": 109, "additions": 60, "deletions": 49}, "files": [{"sha": "077dcef3f203a6bc86759ab41e60475b6b5fab2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd471b26ca3923f6ca39105c0efe166248ec0425/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd471b26ca3923f6ca39105c0efe166248ec0425/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd471b26ca3923f6ca39105c0efe166248ec0425", "patch": "@@ -1,5 +1,10 @@\n 2018-03-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/84831\n+\t* stmt.c (parse_output_constraint): If the CONSTRAINT_LEN (*p, p)\n+\tcharacters starting at p contain '\\0' character, don't look beyond\n+\tthat.\n+\n \tPR target/84827\n \t* config/i386/i386.md (round<mode>2): For 387 fancy math, disable\n \tpattern if -ftrapping-math -fno-fp-int-builtin-inexact."}, {"sha": "9493dccf734b9e668231ce47ca0978d4b84f22e1", "filename": "gcc/stmt.c", "status": "modified", "additions": 55, "deletions": 49, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd471b26ca3923f6ca39105c0efe166248ec0425/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd471b26ca3923f6ca39105c0efe166248ec0425/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=cd471b26ca3923f6ca39105c0efe166248ec0425", "patch": "@@ -247,62 +247,68 @@ parse_output_constraint (const char **constraint_p, int operand_num,\n     }\n \n   /* Loop through the constraint string.  */\n-  for (p = constraint + 1; *p; p += CONSTRAINT_LEN (*p, p))\n-    switch (*p)\n-      {\n-      case '+':\n-      case '=':\n-\terror (\"operand constraint contains incorrectly positioned \"\n-\t       \"%<+%> or %<=%>\");\n-\treturn false;\n+  for (p = constraint + 1; *p; )\n+    {\n+      switch (*p)\n+\t{\n+\tcase '+':\n+\tcase '=':\n+\t  error (\"operand constraint contains incorrectly positioned \"\n+\t\t \"%<+%> or %<=%>\");\n+\t  return false;\n+\n+\tcase '%':\n+\t  if (operand_num + 1 == ninputs + noutputs)\n+\t    {\n+\t      error (\"%<%%%> constraint used with last operand\");\n+\t      return false;\n+\t    }\n+\t  break;\n \n-      case '%':\n-\tif (operand_num + 1 == ninputs + noutputs)\n-\t  {\n-\t    error (\"%<%%%> constraint used with last operand\");\n-\t    return false;\n-\t  }\n-\tbreak;\n+\tcase '?':  case '!':  case '*':  case '&':  case '#':\n+\tcase '$':  case '^':\n+\tcase 'E':  case 'F':  case 'G':  case 'H':\n+\tcase 's':  case 'i':  case 'n':\n+\tcase 'I':  case 'J':  case 'K':  case 'L':  case 'M':\n+\tcase 'N':  case 'O':  case 'P':  case ',':\n+\t  break;\n \n-      case '?':  case '!':  case '*':  case '&':  case '#':\n-      case '$':  case '^':\n-      case 'E':  case 'F':  case 'G':  case 'H':\n-      case 's':  case 'i':  case 'n':\n-      case 'I':  case 'J':  case 'K':  case 'L':  case 'M':\n-      case 'N':  case 'O':  case 'P':  case ',':\n-\tbreak;\n+\tcase '0':  case '1':  case '2':  case '3':  case '4':\n+\tcase '5':  case '6':  case '7':  case '8':  case '9':\n+\tcase '[':\n+\t  error (\"matching constraint not valid in output operand\");\n+\t  return false;\n \n-      case '0':  case '1':  case '2':  case '3':  case '4':\n-      case '5':  case '6':  case '7':  case '8':  case '9':\n-      case '[':\n-\terror (\"matching constraint not valid in output operand\");\n-\treturn false;\n+\tcase '<':  case '>':\n+\t  /* ??? Before flow, auto inc/dec insns are not supposed to exist,\n+\t     excepting those that expand_call created.  So match memory\n+\t     and hope.  */\n+\t  *allows_mem = true;\n+\t  break;\n \n-      case '<':  case '>':\n-\t/* ??? Before flow, auto inc/dec insns are not supposed to exist,\n-\t   excepting those that expand_call created.  So match memory\n-\t   and hope.  */\n-\t*allows_mem = true;\n-\tbreak;\n+\tcase 'g':  case 'X':\n+\t  *allows_reg = true;\n+\t  *allows_mem = true;\n+\t  break;\n \n-      case 'g':  case 'X':\n-\t*allows_reg = true;\n-\t*allows_mem = true;\n-\tbreak;\n+\tdefault:\n+\t  if (!ISALPHA (*p))\n+\t    break;\n+\t  enum constraint_num cn = lookup_constraint (p);\n+\t  if (reg_class_for_constraint (cn) != NO_REGS\n+\t      || insn_extra_address_constraint (cn))\n+\t    *allows_reg = true;\n+\t  else if (insn_extra_memory_constraint (cn))\n+\t    *allows_mem = true;\n+\t  else\n+\t    insn_extra_constraint_allows_reg_mem (cn, allows_reg, allows_mem);\n+\t  break;\n+\t}\n \n-      default:\n-\tif (!ISALPHA (*p))\n+      for (size_t len = CONSTRAINT_LEN (*p, p); len; len--, p++)\n+\tif (*p == '\\0')\n \t  break;\n-\tenum constraint_num cn = lookup_constraint (p);\n-\tif (reg_class_for_constraint (cn) != NO_REGS\n-\t    || insn_extra_address_constraint (cn))\n-\t  *allows_reg = true;\n-\telse if (insn_extra_memory_constraint (cn))\n-\t  *allows_mem = true;\n-\telse\n-\t  insn_extra_constraint_allows_reg_mem (cn, allows_reg, allows_mem);\n-\tbreak;\n-      }\n+    }\n \n   return true;\n }"}]}