{"sha": "5e9ad288eb6fb366142b166e7985d16727b398e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU5YWQyODhlYjZmYjM2NjE0MmIxNjZlNzk4NWQxNjcyN2IzOThlMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-20T18:41:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-20T18:42:02Z"}, "message": "libstdc++: Make incrementable<__int128> satisfied in strict mode\n\nThis adds specializations of std::incrementable_traits so that 128-bit\nintegers are always considered incrementable (and therefore usable with\nstd::ranges::iota_view) even when they don't satisfy std::integral.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/iterator_concepts.h [__STRICT_ANSI__]\n\t(incrementable_traits<__int128>): Define specialization.\n\t(incrementable_traits<unsigned __int128>): Likewise.\n\t* testsuite/std/ranges/iota/96042.cc: Test iota_view with\n\t__int128.", "tree": {"sha": "1e33902007eeb2e36356927ce6de9ddef61e2deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e33902007eeb2e36356927ce6de9ddef61e2deb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e9ad288eb6fb366142b166e7985d16727b398e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9ad288eb6fb366142b166e7985d16727b398e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9ad288eb6fb366142b166e7985d16727b398e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9ad288eb6fb366142b166e7985d16727b398e1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "300ef2fcc10e98359d14654be23bbb84a5d141e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300ef2fcc10e98359d14654be23bbb84a5d141e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/300ef2fcc10e98359d14654be23bbb84a5d141e1"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "bd6660c5f22262ac1704ced98a229cd5023176e8", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9ad288eb6fb366142b166e7985d16727b398e1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9ad288eb6fb366142b166e7985d16727b398e1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=5e9ad288eb6fb366142b166e7985d16727b398e1", "patch": "@@ -173,6 +173,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t= make_signed_t<decltype(std::declval<_Tp>() - std::declval<_Tp>())>;\n     };\n \n+#if defined __STRICT_ANSI__ && defined __SIZEOF_INT128__\n+  // __int128 is incrementable even if !integral<__int128>\n+  template<>\n+    struct incrementable_traits<__int128>\n+    { using difference_type = __int128; };\n+\n+  template<>\n+    struct incrementable_traits<unsigned __int128>\n+    { using difference_type = __int128; };\n+#endif\n+\n   namespace __detail\n   {\n     // An iterator such that iterator_traits<_Iter> names a specialization"}, {"sha": "911663bc41396d1c42b3cf4f29176ccdff3c3bb0", "filename": "libstdc++-v3/testsuite/std/ranges/iota/96042.cc", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9ad288eb6fb366142b166e7985d16727b398e1/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F96042.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9ad288eb6fb366142b166e7985d16727b398e1/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F96042.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F96042.cc?ref=5e9ad288eb6fb366142b166e7985d16727b398e1", "patch": "@@ -24,8 +24,33 @@ void\n test01()\n {\n   // PR libstdc++/96042\n-  using V = std::ranges::iota_view<long long, int>;\n+  using V = std::ranges::iota_view<long long, long long>;\n+\n+  // In strict -std=c++20 mode there is no integer wider than long long,\n+  // so V's difference type is an integer-class type, [iterator.concept.winc].\n+  // In practice this is either __int128 or __detail::__max_diff_type.\n   using D = std::ranges::range_difference_t<V>;\n+  // Ensure that numeric_limits is correctly specialized for the type.\n+  using L = std::numeric_limits<D>;\n+  static_assert( L::is_specialized );\n+  static_assert( L::is_signed );\n+  static_assert( L::is_integer );\n+  static_assert( L::is_exact );\n+  static_assert( L::digits > std::numeric_limits<long long>::digits );\n+  static_assert( L::digits10 == static_cast<int>(L::digits * 0.30103) );\n+  static_assert( L::min() == (D(1) << L::digits) );\n+  static_assert( L::max() == ~L::min() );\n+  static_assert( L::lowest() == L::min() );\n+}\n+\n+#ifdef __SIZEOF_INT128__\n+void\n+test02()\n+{\n+  // When the target supports __int128 it can be used in iota_view\n+  // even in strict mode where !integral<__int128>.\n+  using V = std::ranges::iota_view<__int128, __int128>;\n+  using D = std::ranges::range_difference_t<V>; // __detail::__max_diff_type\n   using L = std::numeric_limits<D>;\n   static_assert( L::is_specialized );\n   static_assert( L::is_signed );\n@@ -37,3 +62,4 @@ test01()\n   static_assert( L::max() == ~L::min() );\n   static_assert( L::lowest() == L::min() );\n }\n+#endif"}]}