{"sha": "2a3b37c3b9f09fe9b020294debf96d0298d7be70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEzYjM3YzNiOWYwOWZlOWIwMjAyOTRkZWJmOTZkMDI5OGQ3YmU3MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-15T18:33:34Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-15T18:33:34Z"}, "message": "Use a different identity function for Types in hash tables.\n\nFrom-SVN: r167866", "tree": {"sha": "63e39518d3c29bec2a2d94d2d7b26548e014c0b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63e39518d3c29bec2a2d94d2d7b26548e014c0b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a3b37c3b9f09fe9b020294debf96d0298d7be70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3b37c3b9f09fe9b020294debf96d0298d7be70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a3b37c3b9f09fe9b020294debf96d0298d7be70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3b37c3b9f09fe9b020294debf96d0298d7be70/comments", "author": null, "committer": null, "parents": [{"sha": "140806fa55ed4c8feaadd1628bb733af777b4faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140806fa55ed4c8feaadd1628bb733af777b4faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/140806fa55ed4c8feaadd1628bb733af777b4faf"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "1579f179aa766c923b568c05dfbd8b5ec3bece5d", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3b37c3b9f09fe9b020294debf96d0298d7be70/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3b37c3b9f09fe9b020294debf96d0298d7be70/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=2a3b37c3b9f09fe9b020294debf96d0298d7be70", "patch": "@@ -393,6 +393,38 @@ Type::are_identical(const Type* t1, const Type* t2, std::string* reason)\n     }\n }\n \n+// Return true if two types are identical when it comes to storing\n+// them in a hash table.  This differs from Type::are_identical with\n+// regard to how we handle error types.  We want to treat error types\n+// as identical to other types when it comes to reporting\n+// compatibility errors, but we want to treat them as different when\n+// it comes to storing them in a hash table.\n+\n+bool\n+Type::are_identical_for_hash_table(const Type* t1, const Type *t2)\n+{\n+  if (t1 == NULL || t2 == NULL)\n+    return t1 == t2;\n+\n+  t1 = t1->forwarded();\n+  t2 = t2->forwarded();\n+\n+  if (t1 == t2)\n+    return true;\n+\n+  // Undefined forward declarations are only equal to themselves.\n+  if (t1->forward_declaration_type() != NULL\n+      || t2->forward_declaration_type() != NULL)\n+    return false;\n+\n+  // The error type is only equal to the error type.\n+  if (t1->is_error_type() || t2->is_error_type())\n+    return t1->is_error_type() && t2->is_error_type();\n+\n+  // Otherwise we can use the usual identity check.\n+  return Type::are_identical(t1, t2, NULL);\n+}\n+\n // Return true if it's OK to have a binary operation with types LHS\n // and RHS.  This is not used for shifts or comparisons.\n \n@@ -810,14 +842,6 @@ Type::get_tree(Gogo* gogo)\n \n   tree t = this->get_tree_without_hash(gogo);\n \n-  // Don't store errors in the hash table.  This type might be a\n-  // pointer to an error type or something like that.  Since error\n-  // types are identical to everything else, that could cause us to\n-  // return error_mark_node for pointers to any type, which will then\n-  // confuse us later.\n-  if (t == error_mark_node)\n-    return error_mark_node;\n-\n   if (ins.first->second == NULL_TREE)\n     ins.first->second = t;\n   else"}, {"sha": "43a2708547c28b85c9dbbab0271b30e1f3008cff", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3b37c3b9f09fe9b020294debf96d0298d7be70/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3b37c3b9f09fe9b020294debf96d0298d7be70/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=2a3b37c3b9f09fe9b020294debf96d0298d7be70", "patch": "@@ -508,6 +508,12 @@ class Type\n   static bool\n   are_identical(const Type* lhs, const Type* rhs, std::string* reason);\n \n+  // Return true if two types are identical when it comes to putting\n+  // them in a hash table.  This differs from are_identical only in\n+  // how error types are handled.\n+  static bool\n+  are_identical_for_hash_table(const Type*, const Type*);\n+\n   // Return true if two types are compatible for use in a binary\n   // operation, other than a shift, comparison, or channel send.  This\n   // is an equivalence relation.\n@@ -1104,7 +1110,7 @@ class Type_identical\n  public:\n   bool\n   operator()(const Type* t1, const Type* t2) const\n-  { return Type::are_identical(t1, t2, NULL); }\n+  { return Type::are_identical_for_hash_table(t1, t2); }\n };\n \n // An identifier with a type."}]}