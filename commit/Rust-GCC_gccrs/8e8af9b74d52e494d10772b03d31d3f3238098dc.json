{"sha": "8e8af9b74d52e494d10772b03d31d3f3238098dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU4YWY5Yjc0ZDUyZTQ5NGQxMDc3MmIwM2QzMWQzZjMyMzgwOThkYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-09-27T17:24:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-09-27T17:24:03Z"}, "message": "fwprop.c (forward_propagate_and_simplify): After checking reg/subreg combinations, check whether the modes are the same.\n\ngcc/\n\t* fwprop.c (forward_propagate_and_simplify): After checking\n\treg/subreg combinations, check whether the modes are the same.\n\nFrom-SVN: r179287", "tree": {"sha": "39f60f475b6218eda95f7ba7195de7c72769f089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39f60f475b6218eda95f7ba7195de7c72769f089"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e8af9b74d52e494d10772b03d31d3f3238098dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e8af9b74d52e494d10772b03d31d3f3238098dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e8af9b74d52e494d10772b03d31d3f3238098dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e8af9b74d52e494d10772b03d31d3f3238098dc/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a744996112debc8f21fc2770dfb001059e01d2e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a744996112debc8f21fc2770dfb001059e01d2e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a744996112debc8f21fc2770dfb001059e01d2e1"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "ab85f50774dc42928844c6dd16b433ceb17c1bde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8af9b74d52e494d10772b03d31d3f3238098dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8af9b74d52e494d10772b03d31d3f3238098dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e8af9b74d52e494d10772b03d31d3f3238098dc", "patch": "@@ -1,3 +1,8 @@\n+2011-09-27  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* fwprop.c (forward_propagate_and_simplify): After checking\n+\treg/subreg combinations, check whether the modes are the same.\n+\n 2011-09-27  Bernd Schmidt  <bernds@codesourcery.com>\n \t    Richard Sandiford  <rdsandiford@googlemail.com>\n "}, {"sha": "5368d187f4b4941029bea124c1cc58a1b1d175d6", "filename": "gcc/fwprop.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e8af9b74d52e494d10772b03d31d3f3238098dc/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e8af9b74d52e494d10772b03d31d3f3238098dc/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=8e8af9b74d52e494d10772b03d31d3f3238098dc", "patch": "@@ -1232,21 +1232,24 @@ forward_propagate_and_simplify (df_ref use, rtx def_insn, rtx def_set)\n \n   /* If def and use are subreg, check if they match.  */\n   reg = DF_REF_REG (use);\n-  if (GET_CODE (reg) == SUBREG\n-      && GET_CODE (SET_DEST (def_set)) == SUBREG\n-      && (SUBREG_BYTE (SET_DEST (def_set)) != SUBREG_BYTE (reg)\n-\t  || GET_MODE (SET_DEST (def_set)) != GET_MODE (reg)))\n-    return false;\n-\n+  if (GET_CODE (reg) == SUBREG && GET_CODE (SET_DEST (def_set)) == SUBREG)\n+    {\n+      if (SUBREG_BYTE (SET_DEST (def_set)) != SUBREG_BYTE (reg))\n+\treturn false;\n+    }\n   /* Check if the def had a subreg, but the use has the whole reg.  */\n-  if (REG_P (reg) && GET_CODE (SET_DEST (def_set)) == SUBREG)\n+  else if (REG_P (reg) && GET_CODE (SET_DEST (def_set)) == SUBREG)\n     return false;\n-\n   /* Check if the use has a subreg, but the def had the whole reg.  Unlike the\n      previous case, the optimization is possible and often useful indeed.  */\n-  if (GET_CODE (reg) == SUBREG && REG_P (SET_DEST (def_set)))\n+  else if (GET_CODE (reg) == SUBREG && REG_P (SET_DEST (def_set)))\n     reg = SUBREG_REG (reg);\n \n+  /* Make sure that we can treat REG as having the same mode as the\n+     source of DEF_SET.  */\n+  if (GET_MODE (SET_DEST (def_set)) != GET_MODE (reg))\n+    return false;\n+\n   /* Check if the substitution is valid (last, because it's the most\n      expensive check!).  */\n   src = SET_SRC (def_set);"}]}