{"sha": "241e1a89ac6d89bf869d82fac96c6fe1759edec7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxZTFhODlhYzZkODliZjg2OWQ4MmZhYzk2YzZmZTE3NTllZGVjNw==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1995-12-16T03:04:10Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1995-12-16T03:04:10Z"}, "message": "(TARGET_CPU_DEFAULT, PROCESSOR_*, TARGET_*,DOUBLE_WITH_ADD,BIT_TEST}): New macros.\n\nFrom-SVN: r10740", "tree": {"sha": "8e227ef490dd07a705cd457a2d89d756d3bb518c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e227ef490dd07a705cd457a2d89d756d3bb518c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/241e1a89ac6d89bf869d82fac96c6fe1759edec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241e1a89ac6d89bf869d82fac96c6fe1759edec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241e1a89ac6d89bf869d82fac96c6fe1759edec7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241e1a89ac6d89bf869d82fac96c6fe1759edec7/comments", "author": null, "committer": null, "parents": [{"sha": "f8e7d8e7c7381c0f134e9094b660865ac961a761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e7d8e7c7381c0f134e9094b660865ac961a761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e7d8e7c7381c0f134e9094b660865ac961a761"}], "stats": {"total": 86, "additions": 72, "deletions": 14}, "files": [{"sha": "14814eebbf7ca3e0a5665f34a3cc7bec69d965bd", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 72, "deletions": 14, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241e1a89ac6d89bf869d82fac96c6fe1759edec7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241e1a89ac6d89bf869d82fac96c6fe1759edec7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=241e1a89ac6d89bf869d82fac96c6fe1759edec7", "patch": "@@ -127,21 +127,25 @@ extern int target_flags;\n \n /* Hack macros for tuning code generation */\n #define TARGET_MOVE\t((target_flags & MASK_NO_MOVE) == 0)\t/* Don't generate memory->memory */\n-\n-/* Specific hardware switches */\n-#define TARGET_486\t(target_flags & MASK_486)\t/* 80486DX, 80486SX, 80486DX[24] */\n-#define TARGET_386\t(!TARGET_486) \t\t\t/* 80386 */\n+#define TARGET_LEAVE (ix86_cpu == PROCESSOR_I386)\n+#define TARGET_386_ALIGNMENT (ix86_cpu == PROCESSOR_I386)\n+#define TARGET_PUSH_MEMORY (ix86_cpu == PROCESSOR_I386)\n+#define TARGET_ZERO_EXTEND_WITH_AND (ix86_cpu != PROCESSOR_I386)\n+#define TARGET_DOUBLE_WITH_ADD (ix86_cpu != PROCESSOR_I386)\n+#define TARGET_BIT_TEST (ix86_cpu == PROCESSOR_I386)\n \n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n { { \"80387\",\t\t\t MASK_80387 },\t\t\t\t\\\n   { \"no-80387\",\t\t\t-MASK_80387 },\t\t\t\t\\\n   { \"hard-float\",\t\t MASK_80387 },\t\t\t\t\\\n   { \"soft-float\",\t\t-MASK_80387 },\t\t\t\t\\\n   { \"no-soft-float\",\t\t MASK_80387 },\t\t\t\t\\\n-  { \"386\",\t\t\t-MASK_486 },\t\t\t\t\\\n-  { \"no-386\",\t\t\t MASK_486 },\t\t\t\t\\\n-  { \"486\",\t\t\t MASK_486 },\t\t\t\t\\\n-  { \"no-486\",\t\t\t-MASK_486 },\t\t\t\t\\\n+  { \"386\",\t\t\t 0 },\t\t\t\t\t\\\n+  { \"no-386\",\t\t\t 0 },\t\t\t\t\t\\\n+  { \"486\",\t\t\t 0 },\t\t\t\t\t\\\n+  { \"no-486\",\t\t\t 0 },\t\t\t\t\t\\\n+  { \"pentium\",\t\t\t 0 },\t\t\t\t\t\\\n+  { \"pentiumpro\",\t\t 0 },\t\t\t\t\t\\\n   { \"rtd\",\t\t\t MASK_RTD },\t\t\t\t\\\n   { \"no-rtd\",\t\t\t-MASK_RTD },\t\t\t\t\\\n   { \"align-double\",\t\t MASK_ALIGN_DOUBLE },\t\t\t\\\n@@ -163,7 +167,45 @@ extern int target_flags;\n   { \"debug-arg\",\t\t MASK_DEBUG_ARG },\t\t\t\\\n   { \"no-debug-arg\",\t\t-MASK_DEBUG_ARG },\t\t\t\\\n   SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n-  { \"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT}}\n+  { \"\", TARGET_DEFAULT}}\n+\n+/* Processor type.  */\n+enum processor_type\n+ {PROCESSOR_I386,\t\t\t/* 80386 */\n+  PROCESSOR_I486,\t\t\t/* 80486DX, 80486SX, 80486DX[24] */\n+  PROCESSOR_PENTIUM,\n+  PROCESSOR_PENTIUMPRO};\n+\n+#define PROCESSOR_I386_STRING \"i386\"\n+#define PROCESSOR_I486_STRING \"i486\"\n+#define PROCESSOR_I586_STRING \"i586\"\n+#define PROCESSOR_PENTIUM_STRING \"pentium\"\n+#define PROCESSOR_I686_STRING \"i686\"\n+#define PROCESSOR_PENTIUMPRO_STRING \"pentiumpro\"\n+\n+extern enum processor_type ix86_cpu;\n+\n+/* Define generic processor types based upon current deployment.  */\n+#define PROCESSOR_COMMON  PROCESSOR_I386\n+#define PROCESSOR_COMMON_STRING PROCESSOR_I386_STRING\n+\n+/* Define the default processor.  This is overridden by other tm.h files.  */\n+#define PROCESSOR_DEFAULT \\\n+  ((enum processor_type) TARGET_CPU_DEFAULT == PROCESSOR_I486) \\\n+\t\t\t \t\t     ? PROCESSOR_I486  \\\n+  : ((enum processor_type) TARGET_CPU_DEFAULT == PROCESSOR_PENTIUM) \\\n+\t\t\t\t\t       ? PROCESSOR_PENTIUM  \\\n+  : ((enum processor_type) TARGET_CPU_DEFAULT == PROCESSOR_PENTIUMPRO) \\\n+\t\t\t\t\t       ? PROCESSOR_PENTIUMPRO  \\\n+  : PROCESSOR_I386\n+#define PROCESSOR_DEFAULT_STRING \\\n+  ((enum processor_type) TARGET_CPU_DEFAULT == PROCESSOR_I486) \\\n+\t\t\t \t\t     ? PROCESSOR_I486_STRING  \\\n+  : ((enum processor_type) TARGET_CPU_DEFAULT == PROCESSOR_PENTIUM) \\\n+\t\t\t\t\t       ? PROCESSOR_PENTIUM_STRING  \\\n+  : ((enum processor_type) TARGET_CPU_DEFAULT == PROCESSOR_PENTIUMPRO) \\\n+\t\t\t\t\t       ? PROCESSOR_PENTIUMPRO_STRING  \\\n+  : PROCESSOR_I386_STRING\n \n /* This macro is similar to `TARGET_SWITCHES' but defines names of\n    command options that have values.  Its definition is an\n@@ -175,7 +217,9 @@ extern int target_flags;\n    option if the fixed part matches.  The actual option name is made\n    by appending `-m' to the specified name.  */\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n-{ { \"reg-alloc=\",\t&i386_reg_alloc_order },\t\t\t\\\n+{ { \"cpu=\",\t\t&ix86_cpu_string},\t\t\t\t\\\n+  { \"arch=\",\t\t&ix86_isa_string},\t\t\t\t\\\n+  { \"reg-alloc=\",\t&i386_reg_alloc_order },\t\t\t\\\n   { \"regparm=\",\t\t&i386_regparm_string },\t\t\t\t\\\n   { \"align-loops=\",\t&i386_align_loops_string },\t\t\t\\\n   { \"align-jumps=\",\t&i386_align_jumps_string },\t\t\t\\\n@@ -198,6 +242,20 @@ extern int target_flags;\n #define SUBTARGET_SWITCHES\n #define SUBTARGET_OPTIONS\n \n+/* Specs for the compiler proper */\n+\n+#ifndef CC1_SPEC\n+#define CC1_SPEC \"\\\n+%{!mcpu*: \\\n+%{m386:-mcpu=i386} \\\n+%{mno-486:-mcpu=i386} \\\n+%{mno-pentium:-mcpu=i386} \\\n+%{mno-pentiumpro:-mcpu=i386} \\\n+%{m486:-mcpu=i486} \\\n+%{mno-386:-mcpu=i486} \\\n+%{mpentium:-mcpu=pentium} \\\n+%{mpentiumpro:-mcpu=pentiumpro}}\"\n+#endif\n \f\n /* target machine storage layout */\n \n@@ -431,9 +489,7 @@ extern int target_flags;\n    registers is expensive.  */\n \n #define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\t\t\\\n-  (((FLOAT_CLASS_P (CLASS1) && ! FLOAT_CLASS_P (CLASS2))\t\t\\\n-    || (! FLOAT_CLASS_P (CLASS1) && FLOAT_CLASS_P (CLASS2))) ? 10\t\\\n-   : 2)\n+  ((FLOAT_CLASS_P (CLASS1) == FLOAT_CLASS_P (CLASS2)) ? 2 : 10)\n \n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */\n@@ -1384,7 +1440,7 @@ while (0)\n /* Define if shifts truncate the shift count\n    which implies one can omit a sign-extension or zero-extension\n    of a shift count.  */\n-/* One i386, shifts do truncate the count.  But bit opcodes don't. */\n+/* On i386, shifts do truncate the count.  But bit opcodes don't. */\n \n /* #define SHIFT_COUNT_TRUNCATED */\n \n@@ -1904,6 +1960,8 @@ extern void clear_386_stack_locals ();\n extern struct rtx_def *assign_386_stack_local ();\n \n /* Variables in i386.c */\n+extern char *ix86_cpu_string;\t\t\t/* for -mcpu=<xxx> */\n+extern char *ix86_isa_string;\t\t\t/* for -mcpu=<xxx> */\n extern char *i386_reg_alloc_order;\t\t/* register allocation order */\n extern char *i386_regparm_string;\t\t/* # registers to use to pass args */\n extern char *i386_align_loops_string;\t\t/* power of two alignment for loops */"}]}