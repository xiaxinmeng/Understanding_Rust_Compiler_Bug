{"sha": "0cd99be7377980b537d5b3a5c1b2903f6b114d9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkOTliZTczNzc5ODBiNTM3ZDViM2E1YzFiMjkwM2Y2YjExNGQ5Yg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2001-04-26T02:02:05Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-04-26T02:02:05Z"}, "message": "re PR libgcj/2237 (serialization doesn't throw exception on failure)\n\n\tFix PR libgcj/2237:\n\t* java/io/ObjectStreamClass.java (setClass): Calculate\n\tserialVersionUID for local class and compare it against the UID\n\tfrom the Object Stream. Throw InvalidClassException upon mismatch.\n\t(setUID): Renamed to...\n\t(getClassUID): this. Return the calculated class UID rather than\n\tsetting uid field directly.\n\t(getDefinedSUID): Removed.\n\t* java/io/ObjectInputStream.java (resolveClass): Use the\n\tthree-argument Class.forName().\n\t* java/io/InvalidClassException (toString): Don't include classname in\n\tresult if it is null.\n\nFrom-SVN: r41567", "tree": {"sha": "6e9ae6e83b7184ea72086b949cfcbb9f8a4c3a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e9ae6e83b7184ea72086b949cfcbb9f8a4c3a3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cd99be7377980b537d5b3a5c1b2903f6b114d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd99be7377980b537d5b3a5c1b2903f6b114d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd99be7377980b537d5b3a5c1b2903f6b114d9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd99be7377980b537d5b3a5c1b2903f6b114d9b/comments", "author": null, "committer": null, "parents": [{"sha": "7b518b39532eb29e51d8e1a81794ed1c59fdff86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b518b39532eb29e51d8e1a81794ed1c59fdff86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b518b39532eb29e51d8e1a81794ed1c59fdff86"}], "stats": {"total": 211, "additions": 90, "deletions": 121}, "files": [{"sha": "fa53ee11bfc92783ad3a7be9f48cce9c883f2cea", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd99be7377980b537d5b3a5c1b2903f6b114d9b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd99be7377980b537d5b3a5c1b2903f6b114d9b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0cd99be7377980b537d5b3a5c1b2903f6b114d9b", "patch": "@@ -1,9 +1,24 @@\n+2001-04-25  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\tFix PR libgcj/2237:\n+\t* java/io/ObjectStreamClass.java (setClass): Calculate \n+\tserialVersionUID for local class and compare it against the UID\n+\tfrom the Object Stream. Throw InvalidClassException upon mismatch.\n+\t(setUID): Renamed to...\n+\t(getClassUID): this. Return the calculated class UID rather than \n+\tsetting uid field directly.\n+\t(getDefinedSUID): Removed.\n+\t* java/io/ObjectInputStream.java (resolveClass): Use the \n+\tthree-argument Class.forName(). \n+\t* java/io/InvalidClassException (toString): Don't include classname in\n+\tresult if it is null.\n+\n 2001-04-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* java/net/natInetAddress.cc (java::net::InetAddress::aton):\n \tWrap use of inet_pton in HAVE_INET6.\n \n-2001-04-25  Bryce McKinlay  <bryce@albatross.co.nz>\n+2001-04-25  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \tjava.security merge and ClassLoader compliance fixes.\n "}, {"sha": "1b50bec44f55ba8e20ae35b458d565f93266d499", "filename": "libjava/java/io/InvalidClassException.java", "status": "modified", "additions": 39, "deletions": 62, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd99be7377980b537d5b3a5c1b2903f6b114d9b/libjava%2Fjava%2Fio%2FInvalidClassException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd99be7377980b537d5b3a5c1b2903f6b114d9b/libjava%2Fjava%2Fio%2FInvalidClassException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInvalidClassException.java?ref=0cd99be7377980b537d5b3a5c1b2903f6b114d9b", "patch": "@@ -44,67 +44,44 @@\n   */\n public class InvalidClassException extends ObjectStreamException\n {\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * The name of the class which encountered the error.\n-  */\n-public String classname;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Create a new InvalidClassException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-InvalidClassException(String message)\n-{\n-  super(message);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Create a new InvalidClassException with a descriptive error message \n-  * String, and the name of the class that caused the problem.\n-  * \n-  * @param classname The number of bytes tranferred before the interruption\n-  * @param message The descriptive error message\n-  */\n-public\n-InvalidClassException(String classname, String message)\n-{\n-  super(message);\n-  this.classname = classname;\n+  /**\n+    * The name of the class which encountered the error.\n+    */\n+  public String classname;\n+\n+  /**\n+    * Create a new InvalidClassException with a descriptive error message String\n+    *\n+    * @param message The descriptive error message\n+    */\n+  public InvalidClassException(String message)\n+  {\n+    super(message);\n+  }\n+\n+  /**\n+    * Create a new InvalidClassException with a descriptive error message \n+    * String, and the name of the class that caused the problem.\n+    * \n+    * @param classname The number of bytes tranferred before the interruption\n+    * @param message The descriptive error message\n+    */\n+  public InvalidClassException(String classname, String message)\n+  {\n+    super(message);\n+    this.classname = classname;\n+  }\n+\n+  /**\n+    * Returns the descriptive error message for this exception.  It will\n+    * include the class name that caused the problem if known.  This method\n+    * overrides Throwable.getMessage()\n+    *\n+    * @return A descriptive error message\n+    */\n+  public String getMessage()\n+  {\n+    return super.getMessage() + (classname == null ? \"\" : \": \" + classname);\n+  }\n }\n \n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * Returns the descriptive error message for this exception.  It will\n-  * include the class name that caused the problem if known.  This method\n-  * overrides Throwable.getMessage()\n-  *\n-  * @return A descriptive error message\n-  */\n-public String\n-getMessage()\n-{\n-  return(super.getMessage() + \": \" + classname);\n-}\n-\n-} // class InvalidClassException\n-"}, {"sha": "e607975aacb59d4e92c92a23d7359627c962bfa4", "filename": "libjava/java/io/ObjectInputStream.java", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd99be7377980b537d5b3a5c1b2903f6b114d9b/libjava%2Fjava%2Fio%2FObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd99be7377980b537d5b3a5c1b2903f6b114d9b/libjava%2Fjava%2Fio%2FObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputStream.java?ref=0cd99be7377980b537d5b3a5c1b2903f6b114d9b", "patch": "@@ -199,8 +199,8 @@ public final Object readObject () throws ClassNotFoundException, IOException\n \t\t\t\t   (class_name));\n \t}\n \n-\tsetBlockDataMode (true);\n-\tosc.setClass (resolveClass (osc));\n+\tClass cl = resolveClass (osc);\n+\tosc.setClass (cl);\n \tsetBlockDataMode (false);\n \n \tif (this.realInputStream.readByte () != TC_ENDBLOCKDATA)\n@@ -487,28 +487,16 @@ it is used to load the class associated with <code>osc</code>,\n   protected Class resolveClass (ObjectStreamClass osc)\n     throws ClassNotFoundException, IOException\n   {\n-//    DEBUGln (\"Resolving \" + osc);\n-\n     SecurityManager sm = System.getSecurityManager ();\n \n-    if (sm == null)\n-      sm = new SecurityManager () {};\n-\n+    // FIXME: currentClassLoader doesn't yet do anything useful. We need\n+    // to call forName() with the classloader of the class which called \n+    // readObject(). See SecurityManager.getClassContext().\n     ClassLoader cl = currentClassLoader (sm);\n \n-    if (cl == null)\n-    {\n-//      DEBUGln (\"No class loader found\");\n-      return Class.forName (osc.getName ());\n-    }\n-    else\n-    {\n-//      DEBUGln (\"Using \" + cl);\n-      return cl.loadClass (osc.getName ());\n-    }\n+    return Class.forName (osc.getName (), true, cl);\n   }\n \n-\n   /**\n      Allows subclasses to resolve objects that are read from the\n      stream with other objects to be returned in their place.  This"}, {"sha": "193032981efa0dc7fb3d6f763a6cc546255e6cd7", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 29, "deletions": 40, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd99be7377980b537d5b3a5c1b2903f6b114d9b/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd99be7377980b537d5b3a5c1b2903f6b114d9b/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=0cd99be7377980b537d5b3a5c1b2903f6b114d9b", "patch": "@@ -246,13 +246,27 @@ int getFlags ()\n     this.fields = fields;\n   }\n \n-\n-  void setClass (Class clazz)\n+  void setClass (Class cl) throws InvalidClassException\n   {\n-    this.clazz = clazz;\n+    this.clazz = cl;\n+    long class_uid = getClassUID (cl);\n+    if (uid == 0)\n+      {\n+       uid = class_uid;\n+       return;\n+      }\n+    \n+    // Check that the actual UID of the resolved class matches the UID from \n+    // the stream.    \n+    if (uid != class_uid)\n+      {\n+       String msg = cl + \n+\t \": Local class not compatible: stream serialVersionUID=\"\n+\t + uid + \", local serialVersionUID=\" + class_uid;\n+       throw new InvalidClassException (msg);\n+      }\n   }\n \n-\n   void setSuperclass (ObjectStreamClass osc)\n   {\n     superClass = osc;\n@@ -308,7 +322,7 @@ private ObjectStreamClass (Class cl)\n     name = cl.getName ();\n     setFlags (cl);\n     setFields (cl);\n-    setUID (cl);\n+    uid = getClassUID (cl);\n     superClass = lookup (cl.getSuperclass ());\n   }\n \n@@ -396,24 +410,24 @@ private void setFields (Class cl)\n     calculateOffsets ();\n   }\n \n-  // Sets uid to be serial version UID defined by class, or if that\n+  // Returns the serial version UID defined by class, or if that\n   // isn't present, calculates value of serial version UID.\n-  private void setUID (Class cl)\n+  private long getClassUID (Class cl)\n   {\n     try\n     {\n       Field suid = cl.getDeclaredField (\"serialVersionUID\");\n       int modifiers = suid.getModifiers ();\n \n-      if (Modifier.isStatic (modifiers)\n-\t  && Modifier.isFinal (modifiers))\n-      {\n-\tuid = getDefinedSUID (cl);\n-\treturn;\n-      }\n+      if (Modifier.isStatic (modifiers) && Modifier.isFinal (modifiers))\n+\treturn suid.getLong (null);\t  \n     }\n     catch (NoSuchFieldException ignore)\n-    {}\n+    {\n+    }\n+    catch (IllegalAccessException ignore)\n+    {\n+    }\n \n     // cl didn't define serialVersionUID, so we have to compute it\n     try\n@@ -534,7 +548,7 @@ private void setUID (Class cl)\n       for (int i=0; i < len; i++)\n \tresult += (long)(sha[i] & 0xFF) << (8 * i);\n \n-      uid = result;\n+      return result;\n     }\n     catch (NoSuchAlgorithmException e)\n     {\n@@ -547,31 +561,6 @@ private void setUID (Class cl)\n     }\n   }\n \n-\n-  // Returns the value of CLAZZ's final static long field named\n-  // `serialVersionUID'.\n-  private long getDefinedSUID (Class clazz)\n-  {\n-    long l = 0;\n-    try\n-      {\n-\t// Use getDeclaredField rather than getField, since serialVersionUID\n-\t// may not be public AND we only want the serialVersionUID of this\n-\t// class, not a superclass or interface.\n-\tField f = clazz.getDeclaredField (\"serialVersionUID\");\n-\tl = f.getLong (null);\n-      }\n-    catch (java.lang.NoSuchFieldException e)\n-      {\n-      }\n-\n-    catch (java.lang.IllegalAccessException e)\n-      {\n-      }\n-\n-    return l;\n-  }\n-\n   // Returns the value of CLAZZ's private static final field named\n   // `serialPersistentFields'.\n   private ObjectStreamField[] getSerialPersistentFields (Class clazz)"}]}