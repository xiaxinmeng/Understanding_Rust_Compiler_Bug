{"sha": "650fe7323c11e5e116e34d88028909b1221e2cc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwZmU3MzIzYzExZTVlMTE2ZTM0ZDg4MDI4OTA5YjEyMjFlMmNjOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-11-17T17:47:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-11-17T17:47:36Z"}, "message": "predict.c (determine_unlikely_bbs): Set cgraph node count to 0 when entry block was promoted unlikely.\n\n\n\t* predict.c (determine_unlikely_bbs): Set cgraph node count to 0\n\twhen entry block was promoted unlikely.\n\t(estimate_bb_frequencies): Increase frequency scale.\n\t* profile-count.h (profile_count): Export precision info.\n\t* gcc.dg/tree-ssa/dump-2.c: Fixup template for profile precision\n\tchanges.\n\t* gcc.dg/tree-ssa/pr77445-2.c: Fixup template for profile precision\n\tchanges.\n\nFrom-SVN: r254888", "tree": {"sha": "c5efcdde9c45c7831beb37712307f991d8211360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5efcdde9c45c7831beb37712307f991d8211360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/650fe7323c11e5e116e34d88028909b1221e2cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650fe7323c11e5e116e34d88028909b1221e2cc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650fe7323c11e5e116e34d88028909b1221e2cc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650fe7323c11e5e116e34d88028909b1221e2cc8/comments", "author": null, "committer": null, "parents": [{"sha": "db16c1841a09f60bbdf2bb825e7e790a437f83c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db16c1841a09f60bbdf2bb825e7e790a437f83c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db16c1841a09f60bbdf2bb825e7e790a437f83c7"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "3864ff2fa05afdffc60358ae756a1f4830deab0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=650fe7323c11e5e116e34d88028909b1221e2cc8", "patch": "@@ -1,3 +1,10 @@\n+2017-11-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* predict.c (determine_unlikely_bbs): Set cgraph node count to 0\n+\twhen entry block was promoted unlikely.\n+\t(estimate_bb_frequencies): Increase frequency scale.\n+\t* profile-count.h (profile_count): Export precision info.\n+\n 2017-11-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-tailcall.c (eliminate_tail_call): Be more careful about not"}, {"sha": "7e40f7773f198225a5c691270823619f82058b0c", "filename": "gcc/predict.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=650fe7323c11e5e116e34d88028909b1221e2cc8", "patch": "@@ -3542,6 +3542,8 @@ determine_unlikely_bbs ()\n \t\t\tbb->index, e->dest->index);\n \t     e->probability = profile_probability::never ();\n \t   }\n+  if (ENTRY_BLOCK_PTR_FOR_FN (cfun)->count == profile_count::zero ())\n+    cgraph_node::get (current_function_decl)->count = profile_count::zero ();\n }\n \n /* Estimate and propagate basic block frequencies using the given branch\n@@ -3565,7 +3567,11 @@ estimate_bb_frequencies (bool force)\n         {\n \t  real_values_initialized = 1;\n \t  real_br_prob_base = REG_BR_PROB_BASE;\n-\t  real_bb_freq_max = BB_FREQ_MAX;\n+\t  /* Scaling frequencies up to maximal profile count may result in\n+\t     frequent overflows especially when inlining loops.\n+\t     Small scalling results in unnecesary precision loss.  Stay in\n+\t     the half of the (exponential) range.  */\n+\t  real_bb_freq_max = (uint64_t)1 << (profile_count::n_bits / 2);\n \t  real_one_half = sreal (1, -1);\n \t  real_inv_br_prob_base = sreal (1) / real_br_prob_base;\n \t  real_almost_one = sreal (1) - real_inv_br_prob_base;\n@@ -3610,6 +3616,8 @@ estimate_bb_frequencies (bool force)\n \t  freq_max = BLOCK_INFO (bb)->frequency;\n \n       freq_max = real_bb_freq_max / freq_max;\n+      if (freq_max < 16)\n+\tfreq_max = 16;\n       cfun->cfg->count_max = profile_count::uninitialized ();\n       FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR_FOR_FN (cfun), NULL, next_bb)\n \t{"}, {"sha": "66a217d39fdca76bdd1c42382d59a023a628179a", "filename": "gcc/profile-count.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=650fe7323c11e5e116e34d88028909b1221e2cc8", "patch": "@@ -605,11 +605,13 @@ class sreal;\n \n class GTY(()) profile_count\n {\n+public:\n   /* Use 62bit to hold basic block counters.  Should be at least\n      64bit.  Although a counter cannot be negative, we use a signed\n      type to hold various extra stages.  */\n \n   static const int n_bits = 61;\n+private:\n   static const uint64_t max_count = ((uint64_t) 1 << n_bits) - 2;\n   static const uint64_t uninitialized_count = ((uint64_t) 1 << n_bits) - 1;\n "}, {"sha": "149ed11a502c2ae2d2d16ebe5b6740d5b22c6a5d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=650fe7323c11e5e116e34d88028909b1221e2cc8", "patch": "@@ -1,3 +1,10 @@\n+2017-11-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/tree-ssa/dump-2.c: Fixup template for profile precision\n+\tchanges.\n+\t* gcc.dg/tree-ssa/pr77445-2.c: Fixup template for profile precision\n+\tchanges.\n+\n 2017-11-17  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/pr82836.C: Fix for c++17."}, {"sha": "a1ab635906b9d80d40b2a6c23b06ccb0f6b283be", "filename": "gcc/testsuite/gcc.dg/tree-ssa/dump-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-2.c?ref=650fe7323c11e5e116e34d88028909b1221e2cc8", "patch": "@@ -6,4 +6,4 @@ int f(void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"<bb \\[0-9\\]> \\\\\\[local count: 10000\\\\\\]:\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"<bb \\[0-9\\]> \\\\\\[local count: \" \"optimized\" } } */"}, {"sha": "eecfc4b195a9b9698e60a24aa66983d360da6f7a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr77445-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fe7323c11e5e116e34d88028909b1221e2cc8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c?ref=650fe7323c11e5e116e34d88028909b1221e2cc8", "patch": "@@ -120,7 +120,7 @@ enum STATES FMS( u8 **in , u32 *transitions) {\n    profile estimation stage. But the number of inconsistencies should not\n    increase much.  */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 1\\[1-9\\]\" \"thread1\" } } */\n-/* { dg-final { scan-tree-dump-times \"Invalid sum\" 2 \"thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum\" 3 \"thread1\" } } */\n /* { dg-final { scan-tree-dump-not \"not considered\" \"thread1\" } } */\n /* { dg-final { scan-tree-dump-not \"not considered\" \"thread2\" } } */\n /* { dg-final { scan-tree-dump-not \"not considered\" \"thread3\" } } */"}]}