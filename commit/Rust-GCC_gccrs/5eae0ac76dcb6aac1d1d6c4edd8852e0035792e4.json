{"sha": "5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVhZTBhYzc2ZGNiNmFhYzFkMWQ2YzRlZGQ4ODUyZTAwMzU3OTJlNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-04-28T14:52:45Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-04-28T17:26:22Z"}, "message": "analyzer: fix ICE copying struct [PR 94816]\n\nPR analyzer/94816 reports an ICE when attempting to copy a struct\ncontaining a field for which add_region_for_type for fails (on\nan OFFSET_TYPE): the region for the src field comes from\nmake_region_for_unexpected_tree_code which gives it a NULL type, and\nthen the copy calls add_region_for_type which unconditionally\ndereferences the NULL type.\n\nThis patch fixes the ICE by checking for NULL types in\nadd_region_for_type.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/94816\n\t* engine.cc (impl_region_model_context::on_unexpected_tree_code):\n\tHandle NULL tree.\n\t* region-model.cc (region_model::add_region_for_type): Handle\n\tNULL type.\n\t* region-model.h\n\t(test_region_model_context::on_unexpected_tree_code): Handle NULL\n\ttree.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/94816\n\t* g++.dg/analyzer/pr94816.C: New test.", "tree": {"sha": "ba5b675ec69939002165d48396d71a2b871701f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba5b675ec69939002165d48396d71a2b871701f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e8e1a6d97cc44d47992e40198490f780fbbfd5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8e1a6d97cc44d47992e40198490f780fbbfd5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8e1a6d97cc44d47992e40198490f780fbbfd5a"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "5cd736385aa75bed519ea3a6239c4bb43928b9ff", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4", "patch": "@@ -1,3 +1,14 @@\n+2020-04-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94816\n+\t* engine.cc (impl_region_model_context::on_unexpected_tree_code):\n+\tHandle NULL tree.\n+\t* region-model.cc (region_model::add_region_for_type): Handle\n+\tNULL type.\n+\t* region-model.h\n+\t(test_region_model_context::on_unexpected_tree_code): Handle NULL\n+\ttree.\n+\n 2020-04-28  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/94447"}, {"sha": "c73d493a3d87a3de959c3aa8441b783a0ccaa900", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4", "patch": "@@ -699,7 +699,7 @@ impl_region_model_context::on_unexpected_tree_code (tree t,\n   logger * const logger = get_logger ();\n   if (logger)\n     logger->log (\"unhandled tree code: %qs in %qs at %s:%i\",\n-\t\t get_tree_code_name (TREE_CODE (t)),\n+\t\t t ? get_tree_code_name (TREE_CODE (t)) : \"(null)\",\n \t\t loc.get_impl_location ().m_function,\n \t\t loc.get_impl_location ().m_file,\n \t\t loc.get_impl_location ().m_line);"}, {"sha": "0794be9a5831f6ab07db6abe79f61602c6e45fb4", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4", "patch": "@@ -6448,10 +6448,13 @@ region_id\n region_model::add_region_for_type (region_id parent_rid, tree type,\n \t\t\t\t   region_model_context *ctxt)\n {\n-  gcc_assert (TYPE_P (type));\n+  if (type)\n+    {\n+      gcc_assert (TYPE_P (type));\n \n-  if (region *new_region = make_region_for_type (parent_rid, type))\n-    return add_region (new_region);\n+      if (region *new_region = make_region_for_type (parent_rid, type))\n+\treturn add_region (new_region);\n+    }\n \n   /* If we can't handle TYPE, return a placeholder region, and stop\n      exploring this path.  */"}, {"sha": "6d427c4c654c79c858d5f042921efa0f15a57863", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4", "patch": "@@ -2205,7 +2205,7 @@ class test_region_model_context : public noop_region_model_context\n     FINAL OVERRIDE\n   {\n     internal_error (\"unhandled tree code: %qs\",\n-\t\t    get_tree_code_name (TREE_CODE (t)));\n+\t\t    t ? get_tree_code_name (TREE_CODE (t)) : \"(null)\");\n   }\n \n private:"}, {"sha": "74755cb23a02fd632d95a3b590c991b0a5e38d29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4", "patch": "@@ -1,3 +1,8 @@\n+2020-04-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94816\n+\t* g++.dg/analyzer/pr94816.C: New test.\n+\n 2020-04-28  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/94447"}, {"sha": "e241a44e376b910ff15f52feb4b6d39737fca776", "filename": "gcc/testsuite/g++.dg/analyzer/pr94816.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr94816.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr94816.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr94816.C?ref=5eae0ac76dcb6aac1d1d6c4edd8852e0035792e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-additional-options \"-O\" } */\n+\n+struct jr;\n+\n+struct ch {\n+  int jr::*rx;\n+};\n+\n+ch\n+ad ()\n+{\n+  return ch ();\n+}"}]}