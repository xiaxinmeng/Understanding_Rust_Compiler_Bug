{"sha": "0da4824836328ffcc9a5d96a242756bad602d2fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRhNDgyNDgzNjMyOGZmY2M5YTVkOTZhMjQyNzU2YmFkNjAyZDJmYw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-11-19T21:02:17Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-11-19T21:02:17Z"}, "message": "2018-11-19  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/ext/throw_allocator.h\n\t(annotate_base::insert(void*, size_t)): Use insert result to check for\n\tdouble insert attempt.\n\t(annotate_base::insert_construct(void*)): Likewise.\n\t(annotate_base::check_allocated(void*, size_t)): Return found iterator.\n\t(annotate_base::erase(void*, size_t)): Use latter method returned\n\titerator.\n\t(annotate_base::check_constructed(void*, size_t)): Return found iterator.\n\t(annotate_base::erase_construct(void*)): Use latter method returned\n\titerator.\n\nFrom-SVN: r266284", "tree": {"sha": "0647881410ad463038b7f0cc47f985738d8979b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0647881410ad463038b7f0cc47f985738d8979b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0da4824836328ffcc9a5d96a242756bad602d2fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da4824836328ffcc9a5d96a242756bad602d2fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da4824836328ffcc9a5d96a242756bad602d2fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da4824836328ffcc9a5d96a242756bad602d2fc/comments", "author": null, "committer": null, "parents": [{"sha": "4b0f04fba5fab30f28b55107ccddfbe7e1243743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b0f04fba5fab30f28b55107ccddfbe7e1243743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b0f04fba5fab30f28b55107ccddfbe7e1243743"}], "stats": {"total": 77, "additions": 44, "deletions": 33}, "files": [{"sha": "bfc9319fdd39c0c70b02ef69cafa7a3b7ea6724f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da4824836328ffcc9a5d96a242756bad602d2fc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da4824836328ffcc9a5d96a242756bad602d2fc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0da4824836328ffcc9a5d96a242756bad602d2fc", "patch": "@@ -1,3 +1,16 @@\n+2018-11-19  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/ext/throw_allocator.h\n+\t(annotate_base::insert(void*, size_t)): Use insert result to check for\n+\tdouble insert attempt.\n+\t(annotate_base::insert_construct(void*)): Likewise.\n+\t(annotate_base::check_allocated(void*, size_t)): Return found iterator.\n+\t(annotate_base::erase(void*, size_t)): Use latter method returned\n+\titerator.\n+\t(annotate_base::check_constructed(void*, size_t)): Return found iterator.\n+\t(annotate_base::erase_construct(void*)): Use latter method returned\n+\titerator.\n+\n 2018-11-19  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/87855\n@@ -32,7 +45,7 @@\n \tof the asymptotic series (nu is the Bessel order).\n \t* testsuite/tr1/5_numerical_facilities/special_functions/\n \t09_cyl_bessel_j/check_value.cc: Add tests at nu=100, 1000<=x<=2000.\n-\t* testsuite/tr1/5_numerical_facilities/special_functions/\t\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n \t11_cyl_neumann/check_value.cc: Ditto.\n \t* testsuite/special_functions/08_cyl_bessel_j/check_value.cc: Ditto.\n \t* testsuite/special_functions/10_cyl_neumann/check_value.cc: Ditto."}, {"sha": "3a5670e345441a03f8b4df99d3ed620902ade5c1", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da4824836328ffcc9a5d96a242756bad602d2fc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da4824836328ffcc9a5d96a242756bad602d2fc/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=0da4824836328ffcc9a5d96a242756bad602d2fc", "patch": "@@ -87,6 +87,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   struct annotate_base\n   {\n+  private:\n+    typedef std::pair<size_t, size_t>\t\tdata_type;\n+    typedef std::map<void*, data_type>\t\tmap_alloc_type;\n+    typedef map_alloc_type::value_type\t\tentry_type;\n+    typedef map_alloc_type::const_iterator\tconst_iterator;\n+    typedef map_alloc_type::const_reference\tconst_reference;\n+#if __cplusplus >= 201103L\n+    typedef std::map<void*, size_t>\t\tmap_construct_type;\n+#endif\n+\n+  public:\n     annotate_base()\n     {\n       label();\n@@ -104,31 +115,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     insert(void* p, size_t size)\n     {\n+      entry_type entry = make_entry(p, size);\n       if (!p)\n \t{\n \t  std::string error(\"annotate_base::insert null insert!\\n\");\n-\t  log_to_string(error, make_entry(p, size));\n+\t  log_to_string(error, entry);\n \t  std::__throw_logic_error(error.c_str());\n \t}\n \n-      const_iterator found = map_alloc().find(p);\n-      if (found != map_alloc().end())\n+      std::pair<map_alloc_type::iterator, bool> inserted\n+\t= map_alloc().insert(entry);\n+      if (!inserted.second)\n \t{\n \t  std::string error(\"annotate_base::insert double insert!\\n\");\n-\t  log_to_string(error, make_entry(p, size));\n-\t  log_to_string(error, *found);\n+\t  log_to_string(error, entry);\n+\t  log_to_string(error, *inserted.first);\n \t  std::__throw_logic_error(error.c_str());\n \t}\n-\n-      map_alloc().insert(make_entry(p, size));\n     }\n \n     void\n     erase(void* p, size_t size)\n-    {\n-      check_allocated(p, size);\n-      map_alloc().erase(p);\n-    }\n+    { map_alloc().erase(check_allocated(p, size)); }\n \n #if __cplusplus >= 201103L\n     void\n@@ -140,31 +148,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  std::__throw_logic_error(error.c_str());\n \t}\n \n-      auto found = map_construct().find(p);\n-      if (found != map_construct().end())\n+      auto inserted = map_construct().insert(std::make_pair(p, get_label()));\n+      if (!inserted.second)\n \t{\n \t  std::string error(\"annotate_base::insert_construct double insert!\\n\");\n \t  log_to_string(error, std::make_pair(p, get_label()));\n-\t  log_to_string(error, *found);\n+\t  log_to_string(error, *inserted.first);\n \t  std::__throw_logic_error(error.c_str());\n \t}\n-\n-      map_construct().insert(std::make_pair(p, get_label()));\n     }\n \n     void\n     erase_construct(void* p)\n-    {\n-      check_constructed(p);\n-      map_construct().erase(p);\n-    }\n+    { map_construct().erase(check_constructed(p)); }\n #endif\n \n     // See if a particular address and allocation size has been saved.\n-    inline void\n+    inline map_alloc_type::iterator\n     check_allocated(void* p, size_t size)\n     {\n-      const_iterator found = map_alloc().find(p);\n+      map_alloc_type::iterator found = map_alloc().find(p);\n       if (found == map_alloc().end())\n \t{\n \t  std::string error(\"annotate_base::check_allocated by value \"\n@@ -181,6 +184,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  log_to_string(error, *found);\n \t  std::__throw_logic_error(error.c_str());\n \t}\n+\n+      return found;\n     }\n \n     // See if a given label has been allocated.\n@@ -256,7 +261,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n #if __cplusplus >= 201103L\n-    inline void\n+    inline map_construct_type::iterator\n     check_constructed(void* p)\n     {\n       auto found = map_construct().find(p);\n@@ -267,6 +272,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  log_to_string(error, std::make_pair(p, get_label()));\n \t  std::__throw_logic_error(error.c_str());\n \t}\n+\n+      return found;\n     }\n \n     inline void\n@@ -292,15 +299,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   private:\n-    typedef std::pair<size_t, size_t>\t\tdata_type;\n-    typedef std::map<void*, data_type> \t\tmap_alloc_type;\n-    typedef map_alloc_type::value_type \t\tentry_type;\n-    typedef map_alloc_type::const_iterator \t\tconst_iterator;\n-    typedef map_alloc_type::const_reference \t\tconst_reference;\n-#if __cplusplus >= 201103L\n-    typedef std::map<void*, size_t>\t\tmap_construct_type;\n-#endif\n-\n     friend std::ostream&\n     operator<<(std::ostream&, const annotate_base&);\n "}]}