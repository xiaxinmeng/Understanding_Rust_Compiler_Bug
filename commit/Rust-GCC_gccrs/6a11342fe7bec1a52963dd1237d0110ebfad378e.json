{"sha": "6a11342fe7bec1a52963dd1237d0110ebfad378e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmExMTM0MmZlN2JlYzFhNTI5NjNkZDEyMzdkMDExMGViZmFkMzc4ZQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-11-06T15:26:27Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-11-06T15:26:27Z"}, "message": "(force_to_mode): Fix typo in fix to last change.\n\nFrom-SVN: r10564", "tree": {"sha": "017ecf993a9e437184ee946e216f074600224733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/017ecf993a9e437184ee946e216f074600224733"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a11342fe7bec1a52963dd1237d0110ebfad378e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a11342fe7bec1a52963dd1237d0110ebfad378e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a11342fe7bec1a52963dd1237d0110ebfad378e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a11342fe7bec1a52963dd1237d0110ebfad378e/comments", "author": null, "committer": null, "parents": [{"sha": "f95b90019459a5b519fecf7c1a6411d1570be3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f95b90019459a5b519fecf7c1a6411d1570be3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f95b90019459a5b519fecf7c1a6411d1570be3a3"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "9d13e52b0dc5b3062080bd4a23aefd8f6ec14414", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a11342fe7bec1a52963dd1237d0110ebfad378e/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a11342fe7bec1a52963dd1237d0110ebfad378e/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6a11342fe7bec1a52963dd1237d0110ebfad378e", "patch": "@@ -6039,7 +6039,7 @@ force_to_mode (x, mode, mask, reg, just_select)\n \t     represent a mask for all its bits in a single scalar.\n \t     But we only care about the lower bits, so calculate these.  */\n \n-\t  if (GET_MODE_BITSIZE (GET_MODE (x)) > HOST_BITS_PER_WIDE_INT))\n+\t  if (GET_MODE_BITSIZE (GET_MODE (x)) > HOST_BITS_PER_WIDE_INT)\n \t    {\n \t      nonzero = ~(HOST_WIDE_INT)0;\n "}]}