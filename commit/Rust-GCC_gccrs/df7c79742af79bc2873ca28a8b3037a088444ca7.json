{"sha": "df7c79742af79bc2873ca28a8b3037a088444ca7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY3Yzc5NzQyYWY3OWJjMjg3M2NhMjhhOGIzMDM3YTA4ODQ0NGNhNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-06-28T07:14:57Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-06-28T07:14:57Z"}, "message": "Fix clustering algorithm in switch expansion.\n\n2018-06-28  Martin Liska  <mliska@suse.cz>\n\n\t* tree-switch-conversion.c (jump_table_cluster::find_jump_tables):\n        Add new checking assert to catch invalid state.\n\t(jump_table_cluster::can_be_handled): Handle single case\n        clusters.\n\t(jump_table_cluster::is_beneficial): Bail out for such case.\n\t(bit_test_cluster::find_bit_tests):\n        Add new checking assert to catch invalid state.\n\t(bit_test_cluster::can_be_handled): Handle single case\n        clusters.\n\t(bit_test_cluster::is_beneficial): Bail out for such case.\n\t(switch_decision_tree::analyze_switch_statement):\n        Fix comment.\n2018-06-28  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/tree-ssa/switch-1.c: New test.\n\nFrom-SVN: r262211", "tree": {"sha": "d5a6e4444e56568e59909022661c11a5e58bbaea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5a6e4444e56568e59909022661c11a5e58bbaea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df7c79742af79bc2873ca28a8b3037a088444ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7c79742af79bc2873ca28a8b3037a088444ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df7c79742af79bc2873ca28a8b3037a088444ca7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7c79742af79bc2873ca28a8b3037a088444ca7/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d86c7648fb9643640d8c82be19d49927aa488768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86c7648fb9643640d8c82be19d49927aa488768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d86c7648fb9643640d8c82be19d49927aa488768"}], "stats": {"total": 156, "additions": 154, "deletions": 2}, "files": [{"sha": "926f8bcac390cd56f38a868ab8e624a47977a421", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7c79742af79bc2873ca28a8b3037a088444ca7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7c79742af79bc2873ca28a8b3037a088444ca7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df7c79742af79bc2873ca28a8b3037a088444ca7", "patch": "@@ -1,3 +1,18 @@\n+2018-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-switch-conversion.c (jump_table_cluster::find_jump_tables):\n+        Add new checking assert to catch invalid state.\n+\t(jump_table_cluster::can_be_handled): Handle single case\n+        clusters.\n+\t(jump_table_cluster::is_beneficial): Bail out for such case.\n+\t(bit_test_cluster::find_bit_tests):\n+        Add new checking assert to catch invalid state.\n+\t(bit_test_cluster::can_be_handled): Handle single case\n+        clusters.\n+\t(bit_test_cluster::is_beneficial): Bail out for such case.\n+\t(switch_decision_tree::analyze_switch_statement):\n+        Fix comment.\n+\n 2018-06-28  Martin Liska  <mliska@suse.cz>\n \n \t* common.opt: Introduce -completion option."}, {"sha": "4c3c92744c191bfe6774397d643bce514bd47365", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7c79742af79bc2873ca28a8b3037a088444ca7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7c79742af79bc2873ca28a8b3037a088444ca7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df7c79742af79bc2873ca28a8b3037a088444ca7", "patch": "@@ -1,3 +1,7 @@\n+2018-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/switch-1.c: New test.\n+\n 2018-06-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/debug15.adb: New test."}, {"sha": "149687ca2bbbf58fa84a9ea397f2564f02a62cf3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/switch-1.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7c79742af79bc2873ca28a8b3037a088444ca7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fswitch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7c79742af79bc2873ca28a8b3037a088444ca7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fswitch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fswitch-1.c?ref=df7c79742af79bc2873ca28a8b3037a088444ca7", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-do compile { target { { x86_64-*-* aarch64-*-* ia64-*-* powerpc64-*-* } && lp64 } } } */\n+/* { dg-options \"-O2 -fdump-tree-switchlower1 --param case-values-threshold=4\" } */\n+\n+int global;\n+\n+int foo (int x)\n+{\n+  switch (x) {\n+    case 0:\n+    case 10:\n+    case 1000:\n+    case 1010:\n+    case 1025 ... 1030:\n+      return 1;\n+    default:\n+      return 0;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump \";; GIMPLE switch case clusters: 0 10 BT:1000-1030\" \"switchlower1\" } } */\n+\n+int foo2 (int x)\n+{\n+  switch (x) {\n+    case -100:\n+    case 100:\n+    case 1000:\n+    case 10000:\n+    case 100000:\n+      return 1;\n+    default:\n+      return 0;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump \";; GIMPLE switch case clusters: -100 100 1000 10000 100000\" \"switchlower1\" } } */\n+\n+int foo3 (int x)\n+{\n+  switch (x) {\n+    case 0:\n+    case 10:\n+    case 20:\n+      global += 1;\n+      return 3;\n+    case 30:\n+    case 33 ... 55:\n+    case 57:\n+      return 4;\n+    case 60 ... 62:\n+      return 1;\n+    default:\n+      return 0;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump \";; GIMPLE switch case clusters: JT:0-62\" \"switchlower1\" } } */\n+\n+int foo4 (int x)\n+{\n+  switch (x) {\n+    case -100:\n+    case 10:\n+    case 20:\n+      global += 1;\n+      return 3;\n+    case 30:\n+    case 33 ... 55:\n+    case 57:\n+      return 4;\n+    case 60 ... 62:\n+      return 1;\n+    case 600 ... 700:\n+      return 12;\n+    default:\n+      return 0;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump \";; GIMPLE switch case clusters: -100 JT:10-62 600-700\" \"switchlower1\" } } */\n+\n+int foo5 (int x)\n+{\n+  switch (x) {\n+    case 10:\n+    case 20:\n+      global += 1;\n+      return 3;\n+    case 30:\n+    case 33 ... 55:\n+    case 57:\n+      return 4;\n+    case 60 ... 62:\n+      return 1;\n+    case 600 ... 700:\n+      return 12;\n+    case 1000 ... 1010:\n+    case 1012:\n+      return 333;\n+    case 1019:\n+    case 1021:\n+      return 9;\n+    case 111111:\n+      return 3;\n+    default:\n+      return 0;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump \";; GIMPLE switch case clusters: JT:10-62 600-700 JT:1000-1021 111111\" \"switchlower1\" } } */"}, {"sha": "ddd8cba7b98376f169ce9feb3f3edbf038753e4f", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7c79742af79bc2873ca28a8b3037a088444ca7/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7c79742af79bc2873ca28a8b3037a088444ca7/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=df7c79742af79bc2873ca28a8b3037a088444ca7", "patch": "@@ -1121,6 +1121,8 @@ jump_table_cluster::find_jump_tables (vec<cluster *> &clusters)\n \t      && can_be_handled (clusters, j, i - 1))\n \t    min[i] = min_cluster_item (min[j].m_count + 1, j, s);\n \t}\n+\n+      gcc_checking_assert (min[i].m_count != INT_MAX);\n     }\n \n   /* No result.  */\n@@ -1172,8 +1174,13 @@ jump_table_cluster::can_be_handled (const vec<cluster *> &clusters,\n   if (!flag_jump_tables)\n     return false;\n \n-  unsigned HOST_WIDE_INT max_ratio = optimize_insn_for_size_p () ? 3 : 8;\n+  /* For algorithm correctness, jump table for a single case must return\n+     true.  We bail out in is_beneficial if it's called just for\n+     a single case.  */\n+  if (start == end)\n+    return true;\n \n+  unsigned HOST_WIDE_INT max_ratio = optimize_insn_for_size_p () ? 3 : 8;\n   unsigned HOST_WIDE_INT range = get_range (clusters[start]->get_low (),\n \t\t\t\t\t    clusters[end]->get_high ());\n   /* Check overflow.  */\n@@ -1197,6 +1204,10 @@ bool\n jump_table_cluster::is_beneficial (const vec<cluster *> &,\n \t\t\t\t   unsigned start, unsigned end)\n {\n+  /* Single case bail out.  */\n+  if (start == end)\n+    return false;\n+\n   return end - start + 1 >= case_values_threshold ();\n }\n \n@@ -1226,6 +1237,8 @@ bit_test_cluster::find_bit_tests (vec<cluster *> &clusters)\n \t      && can_be_handled (clusters, j, i - 1))\n \t    min[i] = min_cluster_item (min[j].m_count + 1, j, INT_MAX);\n \t}\n+\n+      gcc_checking_assert (min[i].m_count != INT_MAX);\n     }\n \n   /* No result.  */\n@@ -1277,6 +1290,12 @@ bool\n bit_test_cluster::can_be_handled (const vec<cluster *> &clusters,\n \t\t\t\t  unsigned start, unsigned end)\n {\n+  /* For algorithm correctness, bit test for a single case must return\n+     true.  We bail out in is_beneficial if it's called just for\n+     a single case.  */\n+  if (start == end)\n+    return true;\n+\n   unsigned HOST_WIDE_INT range = get_range (clusters[start]->get_low (),\n \t\t\t\t\t    clusters[end]->get_high ());\n   auto_bitmap dest_bbs;\n@@ -1308,6 +1327,10 @@ bool\n bit_test_cluster::is_beneficial (const vec<cluster *> &clusters,\n \t\t\t\t unsigned start, unsigned end)\n {\n+  /* Single case bail out.  */\n+  if (start == end)\n+    return false;\n+\n   auto_bitmap dest_bbs;\n \n   for (unsigned i = start; i <= end; i++)\n@@ -1599,7 +1622,7 @@ switch_decision_tree::analyze_switch_statement ()\n   /* Find jump table clusters.  */\n   vec<cluster *> output = jump_table_cluster::find_jump_tables (clusters);\n \n-  /* Find jump table clusters.  */\n+  /* Find bit test clusters.  */\n   vec<cluster *> output2;\n   auto_vec<cluster *> tmp;\n   output2.create (1);"}]}