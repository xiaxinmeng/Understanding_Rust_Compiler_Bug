{"sha": "e1de1560216d6b5d287db5a0add0247063f36413", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkZTE1NjAyMTZkNmI1ZDI4N2RiNWEwYWRkMDI0NzA2M2YzNjQxMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-10-18T18:45:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-10-18T18:45:16Z"}, "message": "rtl.h (rtl_size): Declare.\n\n\t* rtl.h (rtl_size): Declare.\n\t(rtunion): Remove rtwint.\n\t(rtx_def): Replace 'fld' with a union of an rtunion or a HOST_WIDE_INT.\n\t(RTX_HDR_SIZE, RTX_SIZE): New macros.\n\t(RTL_CHECK1): Adjust for new rtx_def layout.\n\t(RTL_CHECK2, RTL_CHECKC1, RTL_CHECKC2): Likewise.\n\t(XWINT, XCWINT): Likewise.  Access the rtx structure directly.\n\t(X0WINT): Remove.\n\t(X0ANY): New macro.\n\t* rtl.def: Adjust comments for new rtx_def layout.\n\t* ggc.h (ggc_alloc_rtx): Take the rtx code as argument, not the\n\tnumber of slots.\n\t* rtl.c (rtx_size): New array.\n\t(rtx_alloc): Adjust call to ggc_alloc_rtx.  Use RTX_HDR_SIZE.\n\t(copy_rtx): Use RTX_HDR_SIZE.  Adjust for new rtx_def layout.\n\t(shallow_copy_rtx): Adjust call to ggc_alloc_rtx.  Use RTX_SIZE.\n\t* integrate.c (copy_rtx_and_substitute): Use X0ANY to copy '0' fields.\n\t* emit-rtl.c (copy_most_rtx): Likewise.\n\t(copy_rtx_if_shared): Use RTX_SIZE.\n\t(copy_insn_1): Use RTX_HDR_SIZE.  Adjust for new rtx_def layout.\n\t* gengenrtl.c (gendef): Adjust ggc_alloc_rtx call.  Use RTX_HDR_SIZE.\n\t* gengtype.c (write_rtx_next): Use RTX_HDR_SIZE.\n\t(adjust_field_rtx_def): Expect \"rtx_def\" to be a union rather than\n\tan array.  Adjust output for new rtx_def layout.\n\t* ggc-page.c (RTL_SIZE): Use RTX_HDR_SIZE.\n\t* reload1.c (eliminate_regs): Use RTX_SIZE.\n\t* rtlanal.c (loc_mentioned_in_p): Adjust for new rtx_def layout.\n\t* gdbinit.in (pi): Likewise.\n\nFrom-SVN: r72647", "tree": {"sha": "91b7d116f9e6b75c28d6f4aed91f37ed9b955621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91b7d116f9e6b75c28d6f4aed91f37ed9b955621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1de1560216d6b5d287db5a0add0247063f36413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1de1560216d6b5d287db5a0add0247063f36413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1de1560216d6b5d287db5a0add0247063f36413", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1de1560216d6b5d287db5a0add0247063f36413/comments", "author": null, "committer": null, "parents": [{"sha": "8a2b3848ff373b6333ee44b38133d864b7c0dcfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a2b3848ff373b6333ee44b38133d864b7c0dcfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a2b3848ff373b6333ee44b38133d864b7c0dcfa"}], "stats": {"total": 174, "additions": 115, "deletions": 59}, "files": [{"sha": "17ffdb632013d23071dbaca71036a600cba7698b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -1,3 +1,34 @@\n+2003-10-18  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* rtl.h (rtl_size): Declare.\n+\t(rtunion): Remove rtwint.\n+\t(rtx_def): Replace 'fld' with a union of an rtunion or a HOST_WIDE_INT.\n+\t(RTX_HDR_SIZE, RTX_SIZE): New macros.\n+\t(RTL_CHECK1): Adjust for new rtx_def layout.\n+\t(RTL_CHECK2, RTL_CHECKC1, RTL_CHECKC2): Likewise.\n+\t(XWINT, XCWINT): Likewise.  Access the rtx structure directly.\n+\t(X0WINT): Remove.\n+\t(X0ANY): New macro.\n+\t* rtl.def: Adjust comments for new rtx_def layout.\n+\t* ggc.h (ggc_alloc_rtx): Take the rtx code as argument, not the\n+\tnumber of slots.\n+\t* rtl.c (rtx_size): New array.\n+\t(rtx_alloc): Adjust call to ggc_alloc_rtx.  Use RTX_HDR_SIZE.\n+\t(copy_rtx): Use RTX_HDR_SIZE.  Adjust for new rtx_def layout.\n+\t(shallow_copy_rtx): Adjust call to ggc_alloc_rtx.  Use RTX_SIZE.\n+\t* integrate.c (copy_rtx_and_substitute): Use X0ANY to copy '0' fields.\n+\t* emit-rtl.c (copy_most_rtx): Likewise.\n+\t(copy_rtx_if_shared): Use RTX_SIZE.\n+\t(copy_insn_1): Use RTX_HDR_SIZE.  Adjust for new rtx_def layout.\n+\t* gengenrtl.c (gendef): Adjust ggc_alloc_rtx call.  Use RTX_HDR_SIZE.\n+\t* gengtype.c (write_rtx_next): Use RTX_HDR_SIZE.\n+\t(adjust_field_rtx_def): Expect \"rtx_def\" to be a union rather than\n+\tan array.  Adjust output for new rtx_def layout.\n+\t* ggc-page.c (RTL_SIZE): Use RTX_HDR_SIZE.\n+\t* reload1.c (eliminate_regs): Use RTX_SIZE.\n+\t* rtlanal.c (loc_mentioned_in_p): Adjust for new rtx_def layout.\n+\t* gdbinit.in (pi): Likewise.\n+\n 2003-10-18  Jan Hubicka  <jh@suse.cz>\n \n \t* integrate.c (copy_decl_for_inlining): Fix copying of copies."}, {"sha": "1f355e8a4005c160341e192b5c4603d4c8b5c0c1", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -2629,8 +2629,7 @@ copy_most_rtx (rtx orig, rtx may_share)\n \t  break;\n \n \tcase '0':\n-\t  /* Copy this through the wide int field; that's safest.  */\n-\t  X0WINT (copy, i) = X0WINT (orig, i);\n+\t  X0ANY (copy, i) = X0ANY (orig, i);\n \t  break;\n \n \tdefault:\n@@ -2717,9 +2716,7 @@ copy_rtx_if_shared (rtx orig)\n       rtx copy;\n \n       copy = rtx_alloc (code);\n-      memcpy (copy, x,\n-\t     (sizeof (*copy) - sizeof (copy->fld)\n-\t      + sizeof (copy->fld[0]) * GET_RTX_LENGTH (code)));\n+      memcpy (copy, x, RTX_SIZE (code));\n       x = copy;\n       copied = 1;\n     }\n@@ -5110,7 +5107,7 @@ copy_insn_1 (rtx orig)\n      all fields need copying, and then clear the fields that should\n      not be copied.  That is the sensible default behavior, and forces\n      us to explicitly document why we are *not* copying a flag.  */\n-  memcpy (copy, orig, sizeof (struct rtx_def) - sizeof (rtunion));\n+  memcpy (copy, orig, RTX_HDR_SIZE);\n \n   /* We do not copy the USED flag, which is used as a mark bit during\n      walks over the RTL.  */\n@@ -5128,7 +5125,7 @@ copy_insn_1 (rtx orig)\n \n   for (i = 0; i < GET_RTX_LENGTH (GET_CODE (copy)); i++)\n     {\n-      copy->fld[i] = orig->fld[i];\n+      copy->u.fld[i] = orig->u.fld[i];\n       switch (*format_ptr++)\n \t{\n \tcase 'e':"}, {"sha": "ccc6504dda785b5e93627ac6485fb649d7523cd4", "filename": "gcc/gdbinit.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fgdbinit.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fgdbinit.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbinit.in?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -79,7 +79,7 @@ Print the rtx-code and machine mode of the rtx that is $.\n end\n \n define pi\n-print $.fld[0].rtx@7\n+print $.u.fld[0].rtx@7\n end\n \n document pi"}, {"sha": "39f1dc26853f0af88fc510e0a5c6886e7c85cf39", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -268,9 +268,9 @@ gendef (const char *format)\n      the memory and initializes it.  */\n   puts (\"{\");\n   puts (\"  rtx rt;\");\n-  printf (\"  rt = ggc_alloc_rtx (%d);\\n\", (int) strlen (format));\n+  puts (\"  rt = ggc_alloc_rtx (code);\\n\");\n \n-  puts (\"  memset (rt, 0, sizeof (struct rtx_def) - sizeof (rtunion));\\n\");\n+  puts (\"  memset (rt, 0, RTX_HDR_SIZE);\\n\");\n   puts (\"  PUT_CODE (rt, code);\");\n   puts (\"  PUT_MODE (rt, mode);\");\n "}, {"sha": "c663a8a3add194f76dd2f2759ec7cff84016981c", "filename": "gcc/gengtype.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -371,7 +371,7 @@ write_rtx_next (void)\n       oprintf (f, \"  0,\\n\");\n     else\n       oprintf (f,\n-\t       \"  offsetof (struct rtx_def, fld) + %d * sizeof (rtunion),\\n\",\n+\t       \"  RTX_HDR_SIZE + %d * sizeof (rtunion),\\n\",\n \t       rtx_next_new[i]);\n   oprintf (f, \"};\\n\");\n }\n@@ -395,10 +395,10 @@ adjust_field_rtx_def (type_p t, options_p opt ATTRIBUTE_UNUSED)\n #undef DEF_RTL_EXPR\n   };\n \n-  if (t->kind != TYPE_ARRAY)\n+  if (t->kind != TYPE_UNION)\n     {\n       error_at_line (&lexer_line,\n-\t\t     \"special `rtx_def' must be applied to an array\");\n+\t\t     \"special `rtx_def' must be applied to a union\");\n       return &string_type;\n     }\n \n@@ -578,7 +578,7 @@ adjust_field_rtx_def (type_p t, options_p opt ATTRIBUTE_UNUSED)\n \t  subfields = xmalloc (sizeof (*subfields));\n \t  subfields->next = old_subf;\n \t  subfields->type = t;\n-\t  subfields->name = xasprintf (\"[%lu].%s\", (unsigned long)aindex,\n+\t  subfields->name = xasprintf (\".fld[%lu].%s\", (unsigned long)aindex,\n \t\t\t\t       subname);\n \t  subfields->line.file = __FILE__;\n \t  subfields->line.line = __LINE__;"}, {"sha": "71268ca34dace757fd1fea2b9dfb956af7533cb4", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -171,7 +171,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define NUM_EXTRA_ORDERS ARRAY_SIZE (extra_order_size_table)\n \n #define RTL_SIZE(NSLOTS) \\\n-  (sizeof (struct rtx_def) + ((NSLOTS) - 1) * sizeof (rtunion))\n+  (RTX_HDR_SIZE + (NSLOTS) * sizeof (rtunion))\n \n #define TREE_EXP_SIZE(OPS) \\\n   (sizeof (struct tree_exp) + ((OPS) - 1) * sizeof (tree))"}, {"sha": "153b29ebd3644773bdb13637c30b11e6eb13fc4a", "filename": "gcc/ggc.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -199,9 +199,7 @@ extern void *ggc_realloc (void *, size_t);\n /* Like ggc_alloc_cleared, but performs a multiplication.  */\n extern void *ggc_calloc (size_t, size_t);\n \n-#define ggc_alloc_rtx(NSLOTS)\t\t\t\t\t\t  \\\n-  ((rtx) ggc_alloc (sizeof (struct rtx_def)\t\t\t\t  \\\n-\t\t    + ((NSLOTS) - 1) * sizeof (rtunion)))\n+#define ggc_alloc_rtx(CODE) ((rtx) ggc_alloc (RTX_SIZE (CODE)))\n \n #define ggc_alloc_rtvec(NELT)\t\t\t\t\t\t  \\\n   ((rtvec) ggc_alloc (sizeof (struct rtvec_def)\t\t\t\t  \\"}, {"sha": "37a73265e6a439c35ee1bb8ec7fb936089f71a13", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -2341,8 +2341,7 @@ copy_rtx_and_substitute (rtx orig, struct inline_remap *map, int for_lhs)\n       switch (*format_ptr++)\n \t{\n \tcase '0':\n-\t  /* Copy this through the wide int field; that's safest.  */\n-\t  X0WINT (copy, i) = X0WINT (orig, i);\n+\t  X0ANY (copy, i) = X0ANY (orig, i);\n \t  break;\n \n \tcase 'e':"}, {"sha": "ecab52b68ee1a6e3059d8d5af858f001c6bb3d5d", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -2570,9 +2570,7 @@ eliminate_regs (rtx x, enum machine_mode mem_mode, rtx insn)\n \t  if (new != XEXP (x, i) && ! copied)\n \t    {\n \t      rtx new_x = rtx_alloc (code);\n-\t      memcpy (new_x, x,\n-\t\t      (sizeof (*new_x) - sizeof (new_x->fld)\n-\t\t       + sizeof (new_x->fld[0]) * GET_RTX_LENGTH (code)));\n+\t      memcpy (new_x, x, RTX_SIZE (code));\n \t      x = new_x;\n \t      copied = 1;\n \t    }\n@@ -2591,10 +2589,7 @@ eliminate_regs (rtx x, enum machine_mode mem_mode, rtx insn)\n \t\t  if (! copied)\n \t\t    {\n \t\t      rtx new_x = rtx_alloc (code);\n-\t\t      memcpy (new_x, x,\n-\t\t\t      (sizeof (*new_x) - sizeof (new_x->fld)\n-\t\t\t       + (sizeof (new_x->fld[0])\n-\t\t\t\t  * GET_RTX_LENGTH (code))));\n+\t\t      memcpy (new_x, x, RTX_SIZE (code));\n \t\t      x = new_x;\n \t\t      copied = 1;\n \t\t    }"}, {"sha": "72ff89f6acefee882fe4f4167f17b3d274eec4d6", "filename": "gcc/rtl.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -96,6 +96,18 @@ const char rtx_class[NUM_RTX_CODE] = {\n #undef DEF_RTL_EXPR\n };\n \n+/* Indexed by rtx code, gives the size of the rtx in bytes.  */\n+\n+const unsigned char rtx_size[NUM_RTX_CODE] = {\n+#define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS)\t\t\t\t\\\n+  ((ENUM) == CONST_INT || (ENUM) == CONST_DOUBLE\t\t\t\\\n+   ? RTX_HDR_SIZE + (sizeof FORMAT - 1) * sizeof (HOST_WIDE_INT)\t\\\n+   : RTX_HDR_SIZE + (sizeof FORMAT - 1) * sizeof (rtunion)),\n+\n+#include \"rtl.def\"\n+#undef DEF_RTL_EXPR\n+};\n+\n /* Names for kinds of NOTEs and REG_NOTEs.  */\n \n const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS] =\n@@ -150,15 +162,14 @@ rtx\n rtx_alloc (RTX_CODE code)\n {\n   rtx rt;\n-  int n = GET_RTX_LENGTH (code);\n \n-  rt = ggc_alloc_rtx (n);\n+  rt = ggc_alloc_rtx (code);\n \n   /* We want to clear everything up to the FLD array.  Normally, this\n      is one int, but we don't want to assume that and it isn't very\n      portable anyway; this is.  */\n \n-  memset (rt, 0, sizeof (struct rtx_def) - sizeof (rtunion));\n+  memset (rt, 0, RTX_HDR_SIZE);\n   PUT_CODE (rt, code);\n   return rt;\n }\n@@ -218,7 +229,7 @@ copy_rtx (rtx orig)\n      all fields need copying, and then clear the fields that should\n      not be copied.  That is the sensible default behavior, and forces\n      us to explicitly document why we are *not* copying a flag.  */\n-  memcpy (copy, orig, sizeof (struct rtx_def) - sizeof (rtunion));\n+  memcpy (copy, orig, RTX_HDR_SIZE);\n \n   /* We do not copy the USED flag, which is used as a mark bit during\n      walks over the RTL.  */\n@@ -234,7 +245,7 @@ copy_rtx (rtx orig)\n \n   for (i = 0; i < GET_RTX_LENGTH (GET_CODE (copy)); i++)\n     {\n-      copy->fld[i] = orig->fld[i];\n+      copy->u.fld[i] = orig->u.fld[i];\n       switch (*format_ptr++)\n \t{\n \tcase 'e':\n@@ -276,13 +287,10 @@ copy_rtx (rtx orig)\n rtx\n shallow_copy_rtx (rtx orig)\n {\n-  RTX_CODE code = GET_CODE (orig);\n-  size_t n = GET_RTX_LENGTH (code);\n-  rtx copy = ggc_alloc_rtx (n);\n-\n-  memcpy (copy, orig,\n-\t  sizeof (struct rtx_def) + sizeof (rtunion) * (n - 1));\n+  rtx copy;\n \n+  copy = ggc_alloc_rtx (GET_CODE (orig));\n+  memcpy (copy, orig, RTX_SIZE (GET_CODE (orig)));\n   return copy;\n }\n \f"}, {"sha": "a7de17beea548e674cf0a3e9f267ec84e75408f8", "filename": "gcc/rtl.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -39,7 +39,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    These names are stored in rtx_name[].\n    By convention these are the internal (field 1) names in lower_case.\n \n-   3.  The print format, and type of each rtx->fld[] (field) in this rtx.\n+   3.  The print format, and type of each rtx->u.fld[] (field) in this rtx.\n    These formats are stored in rtx_format[].\n    The meaning of the formats is documented in front of this array in rtl.c\n    \n@@ -598,22 +598,22 @@ DEF_RTL_EXPR (ATTR_FLAG, \"attr_flag\", \"s\", 'x')\n    All formats must start with \"iuu\" to handle the chain.\n    Each insn expression holds an rtl instruction and its semantics\n    during back-end processing.\n-   See macros's in \"rtl.h\" for the meaning of each rtx->fld[].\n+   See macros's in \"rtl.h\" for the meaning of each rtx->u.fld[].\n \n    ---------------------------------------------------------------------- */\n \n /* An instruction that cannot jump.  */\n DEF_RTL_EXPR(INSN, \"insn\", \"iuuBieiee\", 'i')\n \n /* An instruction that can possibly jump.\n-   Fields ( rtx->fld[] ) have exact same meaning as INSN's.  */\n+   Fields ( rtx->u.fld[] ) have exact same meaning as INSN's.  */\n DEF_RTL_EXPR(JUMP_INSN, \"jump_insn\", \"iuuBieiee0\", 'i')\n \n /* An instruction that can possibly call a subroutine\n    but which will not change which instruction comes next\n    in the current function.\n-   Field ( rtx->fld[9] ) is CALL_INSN_FUNCTION_USAGE.\n-   All other fields ( rtx->fld[] ) have exact same meaning as INSN's.  */\n+   Field ( rtx->u.fld[9] ) is CALL_INSN_FUNCTION_USAGE.\n+   All other fields ( rtx->u.fld[] ) have exact same meaning as INSN's.  */\n DEF_RTL_EXPR(CALL_INSN, \"call_insn\", \"iuuBieieee\", 'i')\n \n /* A marker that indicates that control will not flow through.  */"}, {"sha": "8967193d51f2c7933b30a45a21df4925de53acdd", "filename": "gcc/rtl.h", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -64,6 +64,7 @@ extern const char * const rtx_format[NUM_RTX_CODE];\n extern const char rtx_class[NUM_RTX_CODE];\n #define GET_RTX_CLASS(CODE)\t\t(rtx_class[(int) (CODE)])\n \n+extern const unsigned char rtx_size[NUM_RTX_CODE];\n extern const unsigned char rtx_next[NUM_RTX_CODE];\n \f\n /* The flags and bitfields of an ADDR_DIFF_VEC.  BASE is the base label\n@@ -117,7 +118,6 @@ typedef struct reg_attrs GTY(())\n \n union rtunion_def\n {\n-  HOST_WIDE_INT rtwint;\n   int rtint;\n   unsigned int rtuint;\n   const char *rtstr;\n@@ -215,10 +215,18 @@ struct rtx_def GTY((chain_next (\"RTX_NEXT (&%h)\"),\n   /* The first element of the operands of this rtx.\n      The number of operands and their types are controlled\n      by the `code' field, according to rtl.def.  */\n-  rtunion GTY ((special (\"rtx_def\"),\n-\t\tdesc (\"GET_CODE (&%0)\"))) fld[1];\n+  union u {\n+    rtunion fld[1];\n+    HOST_WIDE_INT hwint[1];\n+  } GTY ((special (\"rtx_def\"), desc (\"GET_CODE (&%0)\"))) u;\n };\n \n+/* The size in bytes of an rtx header (code, mode and flags).  */\n+#define RTX_HDR_SIZE offsetof (struct rtx_def, u)\n+\n+/* The size in bytes of an rtx with code CODE.  */\n+#define RTX_SIZE(CODE) rtx_size[CODE]\n+\n #define NULL_RTX (rtx) 0\n \n /* The \"next\" and \"previous\" RTX, relative to this one.  */\n@@ -303,7 +311,7 @@ struct rtvec_def GTY(()) {\n      if (GET_RTX_FORMAT(_code)[_n] != C1)\t\t\t\t\\\n        rtl_check_failed_type1 (_rtx, _n, C1, __FILE__, __LINE__,\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n-     &_rtx->fld[_n]; }))\n+     &_rtx->u.fld[_n]; }))\n \n #define RTL_CHECK2(RTX, N, C1, C2) __extension__\t\t\t\\\n (*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n@@ -315,22 +323,22 @@ struct rtvec_def GTY(()) {\n \t && GET_RTX_FORMAT(_code)[_n] != C2)\t\t\t\t\\\n        rtl_check_failed_type2 (_rtx, _n, C1, C2, __FILE__, __LINE__,\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n-     &_rtx->fld[_n]; }))\n+     &_rtx->u.fld[_n]; }))\n \n #define RTL_CHECKC1(RTX, N, C) __extension__\t\t\t\t\\\n (*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n      if (GET_CODE (_rtx) != (C))\t\t\t\t\t\\\n        rtl_check_failed_code1 (_rtx, (C), __FILE__, __LINE__,\t\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n-     &_rtx->fld[_n]; }))\n+     &_rtx->u.fld[_n]; }))\n \n #define RTL_CHECKC2(RTX, N, C1, C2) __extension__\t\t\t\\\n (*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n      const enum rtx_code _code = GET_CODE (_rtx);\t\t\t\\\n      if (_code != (C1) && _code != (C2))\t\t\t\t\\\n        rtl_check_failed_code2 (_rtx, (C1), (C2), __FILE__, __LINE__,\t\\\n \t\t\t       __FUNCTION__); \\\n-     &_rtx->fld[_n]; }))\n+     &_rtx->u.fld[_n]; }))\n \n #define RTVEC_ELT(RTVEC, I) __extension__\t\t\t\t\\\n (*({ rtvec const _rtvec = (RTVEC); const int _i = (I);\t\t\t\\\n@@ -339,6 +347,24 @@ struct rtvec_def GTY(()) {\n \t\t\t\t  __FUNCTION__);\t\t\t\\\n      &_rtvec->elem[_i]; }))\n \n+#define XWINT(RTX, N) __extension__\t\t\t\t\t\\\n+(*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n+     const enum rtx_code _code = GET_CODE (_rtx);\t\t\t\\\n+     if (_n < 0 || _n >= GET_RTX_LENGTH (_code))\t\t\t\\\n+       rtl_check_failed_bounds (_rtx, _n, __FILE__, __LINE__,\t\t\\\n+\t\t\t\t__FUNCTION__);\t\t\t\t\\\n+     if (GET_RTX_FORMAT(_code)[_n] != 'w')\t\t\t\t\\\n+       rtl_check_failed_type1 (_rtx, _n, 'w', __FILE__, __LINE__,\t\\\n+\t\t\t       __FUNCTION__);\t\t\t\t\\\n+     &_rtx->u.hwint[_n]; }))\n+\n+#define XCWINT(RTX, N, C) __extension__\t\t\t\t\t\\\n+(*({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+     if (GET_CODE (_rtx) != (C))\t\t\t\t\t\\\n+       rtl_check_failed_code1 (_rtx, (C), __FILE__, __LINE__,\t\t\\\n+\t\t\t       __FUNCTION__);\t\t\t\t\\\n+     &_rtx->u.hwint[N]; }))\n+\n extern void rtl_check_failed_bounds (rtx, int, const char *, int,\n \t\t\t\t     const char *)\n     ATTRIBUTE_NORETURN;\n@@ -360,11 +386,13 @@ extern void rtvec_check_failed_bounds (rtvec, int, const char *, int,\n \n #else   /* not ENABLE_RTL_CHECKING */\n \n-#define RTL_CHECK1(RTX, N, C1)      ((RTX)->fld[N])\n-#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->fld[N])\n-#define RTL_CHECKC1(RTX, N, C)\t    ((RTX)->fld[N])\n-#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->fld[N])\n+#define RTL_CHECK1(RTX, N, C1)      ((RTX)->u.fld[N])\n+#define RTL_CHECK2(RTX, N, C1, C2)  ((RTX)->u.fld[N])\n+#define RTL_CHECKC1(RTX, N, C)\t    ((RTX)->u.fld[N])\n+#define RTL_CHECKC2(RTX, N, C1, C2) ((RTX)->u.fld[N])\n #define RTVEC_ELT(RTVEC, I)\t    ((RTVEC)->elem[I])\n+#define XWINT(RTX, N)\t\t    ((RTX)->u.hwint[N])\n+#define XCWINT(RTX, N, C)\t    ((RTX)->u.hwint[N])\n \n #endif\n \n@@ -475,7 +503,6 @@ do {\t\t\t\t\\\n   _rtx->volatil = 0;\t\t\\\n } while (0)\n \n-#define XWINT(RTX, N)\t(RTL_CHECK1 (RTX, N, 'w').rtwint)\n #define XINT(RTX, N)\t(RTL_CHECK2 (RTX, N, 'i', 'n').rtint)\n #define XSTR(RTX, N)\t(RTL_CHECK2 (RTX, N, 's', 'S').rtstr)\n #define XEXP(RTX, N)\t(RTL_CHECK2 (RTX, N, 'e', 'u').rtx)\n@@ -489,10 +516,9 @@ do {\t\t\t\t\\\n #define XVECEXP(RTX, N, M)\tRTVEC_ELT (XVEC (RTX, N), M)\n #define XVECLEN(RTX, N)\t\tGET_NUM_ELEM (XVEC (RTX, N))\n \n-/* These are like XWINT, etc. except that they expect a '0' field instead\n+/* These are like XINT, etc. except that they expect a '0' field instead\n    of the normal type code.  */\n \n-#define X0WINT(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rtwint)\n #define X0INT(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rtint)\n #define X0UINT(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rtuint)\n #define X0STR(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rtstr)\n@@ -507,7 +533,9 @@ do {\t\t\t\t\\\n #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rtmem)\n #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rtreg)\n \n-#define XCWINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rtwint)\n+/* Access a '0' field with any type.  */\n+#define X0ANY(RTX, N)\t   RTL_CHECK1 (RTX, N, '0')\n+\n #define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rtint)\n #define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rtuint)\n #define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rtstr)"}, {"sha": "0a0d4d4a51a42125e8b807eb05127a78fbfae817", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1de1560216d6b5d287db5a0add0247063f36413/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=e1de1560216d6b5d287db5a0add0247063f36413", "patch": "@@ -3167,7 +3167,7 @@ loc_mentioned_in_p (rtx *loc, rtx in)\n \n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {\n-      if (loc == &in->fld[i].rtx)\n+      if (loc == &in->u.fld[i].rtx)\n \treturn 1;\n       if (fmt[i] == 'e')\n \t{"}]}