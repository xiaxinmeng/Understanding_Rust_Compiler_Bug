{"sha": "ae8f39886b954f37941a72c8e020604f27fff14f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU4ZjM5ODg2Yjk1NGYzNzk0MWE3MmM4ZTAyMDYwNGYyN2ZmZjE0Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-04-30T09:07:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-30T09:07:28Z"}, "message": "re PR tree-optimization/89475 (Teach ccp about __builtin_bswap{16,32,64})\n\n\tPR tree-optimization/89475\n\t* tree-ssa-ccp.c (evaluate_stmt): Handle BUILT_IN_BSWAP{16,32,64}\n\tcalls.\n\n\t* gcc.dg/tree-ssa/pr89475.c: New test.\n\nFrom-SVN: r270680", "tree": {"sha": "8dd1432a5e1d3918188ec8346088c0016de57f5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dd1432a5e1d3918188ec8346088c0016de57f5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae8f39886b954f37941a72c8e020604f27fff14f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8f39886b954f37941a72c8e020604f27fff14f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae8f39886b954f37941a72c8e020604f27fff14f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8f39886b954f37941a72c8e020604f27fff14f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "379637d5e2d6965cb842a0fe29a9442f1322544d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/379637d5e2d6965cb842a0fe29a9442f1322544d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/379637d5e2d6965cb842a0fe29a9442f1322544d"}], "stats": {"total": 197, "additions": 190, "deletions": 7}, "files": [{"sha": "ff570068b43e8c5b8931a2027fdcc8579e3bba01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8f39886b954f37941a72c8e020604f27fff14f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8f39886b954f37941a72c8e020604f27fff14f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae8f39886b954f37941a72c8e020604f27fff14f", "patch": "@@ -1,3 +1,9 @@\n+2019-04-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/89475\n+\t* tree-ssa-ccp.c (evaluate_stmt): Handle BUILT_IN_BSWAP{16,32,64}\n+\tcalls.\n+\n 2019-04-30  Martin Liska  <mliska@suse.cz>\n \n \tPR translation/90274"}, {"sha": "5fdff6e902e06debb9d75aab68461cbcb6565f16", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8f39886b954f37941a72c8e020604f27fff14f/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8f39886b954f37941a72c8e020604f27fff14f/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=ae8f39886b954f37941a72c8e020604f27fff14f", "patch": "@@ -1615,13 +1615,31 @@ encode_tree_to_bitpos (tree expr, unsigned char *ptr, int bitlen, int bitpos,\n \t\t       unsigned int total_bytes)\n {\n   unsigned int first_byte = bitpos / BITS_PER_UNIT;\n-  tree tmp_int = expr;\n   bool sub_byte_op_p = ((bitlen % BITS_PER_UNIT)\n \t\t\t|| (bitpos % BITS_PER_UNIT)\n \t\t\t|| !int_mode_for_size (bitlen, 0).exists ());\n+  bool empty_ctor_p\n+    = (TREE_CODE (expr) == CONSTRUCTOR\n+       && CONSTRUCTOR_NELTS (expr) == 0\n+       && TYPE_SIZE_UNIT (TREE_TYPE (expr))\n+\t\t       && tree_fits_uhwi_p (TYPE_SIZE_UNIT (TREE_TYPE (expr))));\n \n   if (!sub_byte_op_p)\n-    return native_encode_expr (tmp_int, ptr + first_byte, total_bytes) != 0;\n+    {\n+      if (first_byte >= total_bytes)\n+\treturn false;\n+      total_bytes -= first_byte;\n+      if (empty_ctor_p)\n+\t{\n+\t  unsigned HOST_WIDE_INT rhs_bytes\n+\t    = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (expr)));\n+\t  if (rhs_bytes > total_bytes)\n+\t    return false;\n+\t  memset (ptr + first_byte, '\\0', rhs_bytes);\n+\t  return true;\n+\t}\n+      return native_encode_expr (expr, ptr + first_byte, total_bytes) != 0;\n+    }\n \n   /* LITTLE-ENDIAN\n      We are writing a non byte-sized quantity or at a position that is not\n@@ -1667,14 +1685,29 @@ encode_tree_to_bitpos (tree expr, unsigned char *ptr, int bitlen, int bitpos,\n \n   /* We must be dealing with fixed-size data at this point, since the\n      total size is also fixed.  */\n-  fixed_size_mode mode = as_a <fixed_size_mode> (TYPE_MODE (TREE_TYPE (expr)));\n+  unsigned int byte_size;\n+  if (empty_ctor_p)\n+    {\n+      unsigned HOST_WIDE_INT rhs_bytes\n+\t= tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (expr)));\n+      if (rhs_bytes > total_bytes)\n+\treturn false;\n+      byte_size = rhs_bytes;\n+    }\n+  else\n+    {\n+      fixed_size_mode mode\n+\t= as_a <fixed_size_mode> (TYPE_MODE (TREE_TYPE (expr)));\n+      byte_size = GET_MODE_SIZE (mode);\n+    }\n   /* Allocate an extra byte so that we have space to shift into.  */\n-  unsigned int byte_size = GET_MODE_SIZE (mode) + 1;\n+  byte_size++;\n   unsigned char *tmpbuf = XALLOCAVEC (unsigned char, byte_size);\n   memset (tmpbuf, '\\0', byte_size);\n   /* The store detection code should only have allowed constants that are\n-     accepted by native_encode_expr.  */\n-  if (native_encode_expr (expr, tmpbuf, byte_size - 1) == 0)\n+     accepted by native_encode_expr or empty ctors.  */\n+  if (!empty_ctor_p\n+      && native_encode_expr (expr, tmpbuf, byte_size - 1) == 0)\n     gcc_unreachable ();\n \n   /* The native_encode_expr machinery uses TYPE_MODE to determine how many\n@@ -4164,7 +4197,8 @@ lhs_valid_for_store_merging_p (tree lhs)\n   tree_code code = TREE_CODE (lhs);\n \n   if (code == ARRAY_REF || code == ARRAY_RANGE_REF || code == MEM_REF\n-      || code == COMPONENT_REF || code == BIT_FIELD_REF)\n+      || code == COMPONENT_REF || code == BIT_FIELD_REF\n+      || DECL_P (lhs))\n     return true;\n \n   return false;\n@@ -4178,6 +4212,11 @@ static bool\n rhs_valid_for_store_merging_p (tree rhs)\n {\n   unsigned HOST_WIDE_INT size;\n+  if (TREE_CODE (rhs) == CONSTRUCTOR\n+      && CONSTRUCTOR_NELTS (rhs) == 0\n+      && TYPE_SIZE_UNIT (TREE_TYPE (rhs))\n+      && tree_fits_uhwi_p (TYPE_SIZE_UNIT (TREE_TYPE (rhs))))\n+    return true;\n   return (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (rhs))).is_constant (&size)\n \t  && native_encode_expr (rhs, NULL, size) != 0);\n }"}, {"sha": "b1f258583154828099b7a1be5bfcb9721e754cb1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8f39886b954f37941a72c8e020604f27fff14f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8f39886b954f37941a72c8e020604f27fff14f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae8f39886b954f37941a72c8e020604f27fff14f", "patch": "@@ -1,3 +1,8 @@\n+2019-04-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/89475\n+\t* gcc.dg/tree-ssa/pr89475.c: New test.\n+\n 2019-04-30  Bin Cheng  <bin.cheng@linux.alibaba.com>\n \n \tPR tree-optimization/90240"}, {"sha": "4a84bea4eeddd02a7b17a4b860e8508b909a692e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89475.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8f39886b954f37941a72c8e020604f27fff14f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89475.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8f39886b954f37941a72c8e020604f27fff14f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89475.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89475.c?ref=ae8f39886b954f37941a72c8e020604f27fff14f", "patch": "@@ -0,0 +1,104 @@\n+/* PR tree-optimization/89475 */\n+/* { dg-do compile { target { ilp32 || lp64 } } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error \" \"optimized\" } } */\n+\n+void link_error (void);\n+\n+unsigned short\n+f0 (unsigned short x)\n+{\n+  x &= 0xaa55;\n+  x = __builtin_bswap16 (x);\n+  if (x & 0xaa55)\n+    link_error ();\n+  return x;\n+}\n+\n+unsigned short\n+f1 (unsigned short x)\n+{\n+  x &= 0x55aa;\n+  x = __builtin_bswap16 (x);\n+  if (x & 0x55aa)\n+    link_error ();\n+  return x;\n+}\n+\n+unsigned int\n+f2 (unsigned int x)\n+{\n+  x &= 0x55aa5aa5U;\n+  x = __builtin_bswap32 (x);\n+  if (x & 0x5aa555aaU)\n+    link_error ();\n+  return x;\n+}\n+\n+unsigned long long int\n+f3 (unsigned long long int x)\n+{\n+  x &= 0x55aa5aa544cc2211ULL;\n+  x = __builtin_bswap64 (x);\n+  if (x & 0xeedd33bb5aa555aaULL)\n+    link_error ();\n+  return x;\n+}\n+\n+unsigned short\n+f4 (unsigned short x)\n+{\n+  x = __builtin_bswap32 (x);\n+  if (x != 0)\n+    link_error ();\n+  return x;\n+}\n+\n+unsigned int\n+f5 (unsigned int x)\n+{\n+  x = __builtin_bswap64 (x);\n+  if (x != 0)\n+    link_error ();\n+  return x;\n+}\n+\n+unsigned short\n+f6 (unsigned short x)\n+{\n+  x |= 0xaa55;\n+  x = __builtin_bswap16 (x);\n+  if ((x | 0xaa55) != 0xffff)\n+    link_error ();\n+  return x;\n+}\n+\n+unsigned short\n+f7 (unsigned short x)\n+{\n+  x |= 0x55aa;\n+  x = __builtin_bswap16 (x);\n+  if ((x | 0x55aa) != 0xffff)\n+    link_error ();\n+  return x;\n+}\n+\n+unsigned int\n+f8 (unsigned int x)\n+{\n+  x |= 0x55aa5aa5U;\n+  x = __builtin_bswap32 (x);\n+  if ((x | 0x5aa555aaU) != 0xffffffffU)\n+    link_error ();\n+  return x;\n+}\n+\n+unsigned long long int\n+f9 (unsigned long long int x)\n+{\n+  x |= 0x55aa5aa544cc2211ULL;\n+  x = __builtin_bswap64 (x);\n+  if ((x | 0xeedd33bb5aa555aaULL) != 0xffffffffffffffffULL)\n+    link_error ();\n+  return x;\n+}"}, {"sha": "51b9d9f53d23d812ebd9f6fef031b981f00d7187", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8f39886b954f37941a72c8e020604f27fff14f/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8f39886b954f37941a72c8e020604f27fff14f/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ae8f39886b954f37941a72c8e020604f27fff14f", "patch": "@@ -1960,6 +1960,35 @@ evaluate_stmt (gimple *stmt)\n \t\tbreak;\n \t      }\n \n+\t    case BUILT_IN_BSWAP16:\n+\t    case BUILT_IN_BSWAP32:\n+\t    case BUILT_IN_BSWAP64:\n+\t      val = get_value_for_expr (gimple_call_arg (stmt, 0), true);\n+\t      if (val.lattice_val == UNDEFINED)\n+\t\tbreak;\n+\t      else if (val.lattice_val == CONSTANT\n+\t\t       && val.value\n+\t\t       && TREE_CODE (val.value) == INTEGER_CST)\n+\t\t{\n+\t\t  tree type = TREE_TYPE (gimple_call_lhs (stmt));\n+\t\t  int prec = TYPE_PRECISION (type);\n+\t\t  wide_int wval = wi::to_wide (val.value);\n+\t\t  val.value\n+\t\t    = wide_int_to_tree (type,\n+\t\t\t\t\twide_int::from (wval, prec,\n+\t\t\t\t\t\t\tUNSIGNED).bswap ());\n+\t\t  val.mask\n+\t\t    = widest_int::from (wide_int::from (val.mask, prec,\n+\t\t\t\t\t\t\tUNSIGNED).bswap (),\n+\t\t\t\t\tUNSIGNED);\n+\t\t  if (wi::sext (val.mask, prec) != -1)\n+\t\t    break;\n+\t\t}\n+\t      val.lattice_val = VARYING;\n+\t      val.value = NULL_TREE;\n+\t      val.mask = -1;\n+\t      break;\n+\n \t    default:;\n \t    }\n \t}"}]}