{"sha": "be46043e07689050ba4522e907db618d26fc1bb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU0NjA0M2UwNzY4OTA1MGJhNDUyMmU5MDdkYjYxOGQyNmZjMWJiOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-23T09:55:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-23T09:55:28Z"}, "message": "Make some std::variant helper functions noexcept\n\n\t* include/std/variant (__detail::__variant::__ref_cast): Remove\n\tunused function.\n\t(__detail::__variant::_Uninitialized::_M_get)\n\t(__detail::__variant::__get)\n\t(__gen_vtable_impl::__element_by_index_or_cookie): Add noexcept.\n\nFrom-SVN: r270501", "tree": {"sha": "2687b11793b28f4651c103d28b723b9b26bb2bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2687b11793b28f4651c103d28b723b9b26bb2bb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be46043e07689050ba4522e907db618d26fc1bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be46043e07689050ba4522e907db618d26fc1bb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be46043e07689050ba4522e907db618d26fc1bb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be46043e07689050ba4522e907db618d26fc1bb8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b5689aa6c285429368b8bc9eef2b186162ff78d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b5689aa6c285429368b8bc9eef2b186162ff78d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b5689aa6c285429368b8bc9eef2b186162ff78d"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "9dad28f502a874bce4528a8602081bb38d276e34", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be46043e07689050ba4522e907db618d26fc1bb8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be46043e07689050ba4522e907db618d26fc1bb8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=be46043e07689050ba4522e907db618d26fc1bb8", "patch": "@@ -1,3 +1,11 @@\n+2019-04-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (__detail::__variant::__ref_cast): Remove\n+\tunused function.\n+\t(__detail::__variant::_Uninitialized::_M_get)\n+\t(__detail::__variant::__get)\n+\t(__gen_vtable_impl::__element_by_index_or_cookie): Add noexcept.\n+\n 2019-04-21  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* testsuite/17_intro/headers/c++1998/charset.cc: Skip for Darwin8"}, {"sha": "08378eee81618d5e3ab06242700779f407c181ac", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be46043e07689050ba4522e907db618d26fc1bb8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be46043e07689050ba4522e907db618d26fc1bb8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=be46043e07689050ba4522e907db618d26fc1bb8", "patch": "@@ -203,16 +203,16 @@ namespace __variant\n \t: _M_storage(std::forward<_Args>(__args)...)\n \t{ }\n \n-      constexpr const _Type& _M_get() const &\n+      constexpr const _Type& _M_get() const & noexcept\n       { return _M_storage; }\n \n-      constexpr _Type& _M_get() &\n+      constexpr _Type& _M_get() & noexcept\n       { return _M_storage; }\n \n-      constexpr const _Type&& _M_get() const &&\n+      constexpr const _Type&& _M_get() const && noexcept\n       { return std::move(_M_storage); }\n \n-      constexpr _Type&& _M_get() &&\n+      constexpr _Type&& _M_get() && noexcept\n       { return std::move(_M_storage); }\n \n       _Type _M_storage;\n@@ -229,41 +229,38 @@ namespace __variant\n \t    _Type(std::forward<_Args>(__args)...);\n \t}\n \n-      const _Type& _M_get() const &\n+      const _Type& _M_get() const & noexcept\n       { return *_M_storage._M_ptr(); }\n \n-      _Type& _M_get() &\n+      _Type& _M_get() & noexcept\n       { return *_M_storage._M_ptr(); }\n \n-      const _Type&& _M_get() const &&\n+      const _Type&& _M_get() const && noexcept\n       { return std::move(*_M_storage._M_ptr()); }\n \n-      _Type&& _M_get() &&\n+      _Type&& _M_get() && noexcept\n       { return std::move(*_M_storage._M_ptr()); }\n \n       __gnu_cxx::__aligned_membuf<_Type> _M_storage;\n     };\n \n-  template<typename _Ref>\n-    _Ref __ref_cast(void* __ptr)\n-    {\n-      return static_cast<_Ref>(*static_cast<remove_reference_t<_Ref>*>(__ptr));\n-    }\n-\n   template<typename _Union>\n-    constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u)\n+    constexpr decltype(auto)\n+    __get(in_place_index_t<0>, _Union&& __u) noexcept\n     { return std::forward<_Union>(__u)._M_first._M_get(); }\n \n   template<size_t _Np, typename _Union>\n-    constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u)\n+    constexpr decltype(auto)\n+    __get(in_place_index_t<_Np>, _Union&& __u) noexcept\n     {\n       return __variant::__get(in_place_index<_Np-1>,\n \t\t\t      std::forward<_Union>(__u)._M_rest);\n     }\n \n   // Returns the typed storage for __v.\n   template<size_t _Np, typename _Variant>\n-    constexpr decltype(auto) __get(_Variant&& __v)\n+    constexpr decltype(auto)\n+    __get(_Variant&& __v) noexcept\n     {\n       return __variant::__get(std::in_place_index<_Np>,\n \t\t\t      std::forward<_Variant>(__v)._M_u);\n@@ -981,7 +978,7 @@ namespace __variant\n \n       template<size_t __index, typename _Variant>\n \tstatic constexpr decltype(auto)\n-\t__element_by_index_or_cookie(_Variant&& __var)\n+\t__element_by_index_or_cookie(_Variant&& __var) noexcept\n         {\n \t  if constexpr (__index != variant_npos)\n \t    return __variant::__get<__index>(std::forward<_Variant>(__var));\n@@ -1166,8 +1163,7 @@ namespace __variant\n \n   template<typename _Tp, typename... _Types>\n     constexpr add_pointer_t<const _Tp>\n-    get_if(const variant<_Types...>* __ptr)\n-    noexcept\n+    get_if(const variant<_Types...>* __ptr) noexcept\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");"}]}