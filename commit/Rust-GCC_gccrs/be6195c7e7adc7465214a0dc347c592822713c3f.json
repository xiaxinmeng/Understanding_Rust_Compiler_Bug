{"sha": "be6195c7e7adc7465214a0dc347c592822713c3f", "node_id": "C_kwDOANBUbNoAKGJlNjE5NWM3ZTdhZGM3NDY1MjE0YTBkYzM0N2M1OTI4MjI3MTNjM2Y", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-17T07:44:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-17T07:44:19Z"}, "message": "gdbhooks: Update gdbhooks.py for recent tree_code_type changes [PR108634]\n\nOn Mon, Mar 13, 2023 at 04:15:12PM -0400, Jason Merrill wrote:\n> The r13-6577 change to use tree_code_type_tmpl in earlier C++ dialects broke\n> gdbhooks, which expects tree_code_type to always be available.  I considered\n> trying to make gdbhooks more robust, but it seemed simpler to define\n> tree_code_type as a reference to the template.\n\nAs I said earlier, I think it is better to tweak gdbhooks.\n\nThe following patch does that, I've tested it now both with gcc 12 and\nolder gcc as system compiler and the patch fixed the latter while keeping\nthe former working as before.\n\n2023-03-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR plugins/108634\n\t* gdbhooks.py (TreePrinter.to_string): Wrap\n\tgdb.parse_and_eval('tree_code_type') in a try block, parse\n\tand eval 'tree_code_type_tmpl<0>::tree_code_type' instead if it\n\traises exception.  Update comments for the recent tree_code_type\n\tchanges.", "tree": {"sha": "da95dd607832c51979c0238b452453aae718c4e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da95dd607832c51979c0238b452453aae718c4e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be6195c7e7adc7465214a0dc347c592822713c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6195c7e7adc7465214a0dc347c592822713c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6195c7e7adc7465214a0dc347c592822713c3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6195c7e7adc7465214a0dc347c592822713c3f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "328477f6ee82d27fa6bb09617644d409be300688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328477f6ee82d27fa6bb09617644d409be300688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328477f6ee82d27fa6bb09617644d409be300688"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "80280225644d3fd11688bca9a797e1721a4cc35d", "filename": "gcc/gdbhooks.py", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6195c7e7adc7465214a0dc347c592822713c3f/gcc%2Fgdbhooks.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6195c7e7adc7465214a0dc347c592822713c3f/gcc%2Fgdbhooks.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbhooks.py?ref=be6195c7e7adc7465214a0dc347c592822713c3f", "patch": "@@ -220,13 +220,23 @@ def to_string (self):\n \n         val_TREE_CODE = self.node.TREE_CODE()\n \n-        # extern const enum tree_code_class tree_code_type[];\n+        # constexpr inline enum tree_code_class tree_code_type[] = { ... };\n         # #define TREE_CODE_CLASS(CODE)\ttree_code_type[(int) (CODE)]\n+        # or\n+        # template <int N>\n+        # struct tree_code_type_tmpl {\n+        # static constexpr enum tree_code_class tree_code_type[] = { ... };\n+        # }; };\n+        # #define TREE_CODE_CLASS(CODE) \\\n+        # tree_code_type_tmpl <0>::tree_code_type[(int) (CODE)]\n \n         if val_TREE_CODE == 0xa5a5:\n             return '<ggc_freed 0x%x>' % intptr(self.gdbval)\n \n-        val_tree_code_type = gdb.parse_and_eval('tree_code_type')\n+        try:\n+            val_tree_code_type = gdb.parse_and_eval('tree_code_type')\n+        except:\n+            val_tree_code_type = gdb.parse_and_eval('tree_code_type_tmpl<0>::tree_code_type')\n         val_tclass = val_tree_code_type[val_TREE_CODE]\n \n         val_tree_code_name = gdb.parse_and_eval('tree_code_name')"}]}