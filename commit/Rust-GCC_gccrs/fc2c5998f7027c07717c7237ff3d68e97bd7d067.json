{"sha": "fc2c5998f7027c07717c7237ff3d68e97bd7d067", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyYzU5OThmNzAyN2MwNzcxN2M3MjM3ZmYzZDY4ZTk3YmQ3ZDA2Nw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-02-17T05:19:50Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-02-17T05:19:50Z"}, "message": "re PR libfortran/47567 (Wrong output for small absolute values with F editing)\n\n2011-02-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/47567\n\t* io/list_read.c (read_logical): Check for end of line before calling\n\teat_line. (read_integer): Likewise. (parse_real): Don't unget the\n\tseparator. Check for end of line before calling\teat_line.\n\t(read_complex): Allow line-end before and after parenthesis and comma.\n\tCheck for end of line before calling eat_line. (read_real): Check for\n\tend of line before calling eat_line.\n\nFrom-SVN: r170239", "tree": {"sha": "f87711fb887cbf2edcd329c147ad7dc9b65f68cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f87711fb887cbf2edcd329c147ad7dc9b65f68cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc2c5998f7027c07717c7237ff3d68e97bd7d067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2c5998f7027c07717c7237ff3d68e97bd7d067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc2c5998f7027c07717c7237ff3d68e97bd7d067", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2c5998f7027c07717c7237ff3d68e97bd7d067/comments", "author": null, "committer": null, "parents": [{"sha": "18b08cb9ebcf0bc9d462c27b8e358028b662deec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b08cb9ebcf0bc9d462c27b8e358028b662deec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b08cb9ebcf0bc9d462c27b8e358028b662deec"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "7371e8e2be1e6b14459bb9436d79212bed88711a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2c5998f7027c07717c7237ff3d68e97bd7d067/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2c5998f7027c07717c7237ff3d68e97bd7d067/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=fc2c5998f7027c07717c7237ff3d68e97bd7d067", "patch": "@@ -1,3 +1,13 @@\n+2011-02-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/47567\n+\t* io/list_read.c (read_logical): Check for end of line before calling\n+\teat_line. (read_integer): Likewise. (parse_real): Don't unget the\n+\tseparator. Check for end of line before calling\teat_line.\n+\t(read_complex): Allow line-end before and after parenthesis and comma.\n+\tCheck for end of line before calling eat_line. (read_real): Check for\n+\tend of line before calling eat_line.\n+\n 2011-02-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libfortran/47757"}, {"sha": "9d797cc270d260a3483c4a796ddc90a865c04b1d", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2c5998f7027c07717c7237ff3d68e97bd7d067/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2c5998f7027c07717c7237ff3d68e97bd7d067/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=fc2c5998f7027c07717c7237ff3d68e97bd7d067", "patch": "@@ -768,7 +768,7 @@ read_logical (st_parameter_dt *dtp, int length)\n       hit_eof (dtp);\n       return;\n     }\n-  else\n+  else if (c != '\\n')\n     eat_line (dtp);\n   sprintf (message, \"Bad logical value while reading item %d\",\n \t      dtp->u.p.item_count);\n@@ -906,7 +906,7 @@ read_integer (st_parameter_dt *dtp, int length)\n       hit_eof (dtp);\n       return;\n     }\n-  else\n+  else if (c != '\\n')\n     eat_line (dtp);\n   sprintf (message, \"Bad integer for item %d in list input\",\n \t      dtp->u.p.item_count);\n@@ -1104,6 +1104,7 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n \n   if ((c = next_char (dtp)) == EOF)\n     goto bad;\n+    \n   if (c == '-' || c == '+')\n     {\n       push_char (dtp, c);\n@@ -1162,7 +1163,6 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n \t  goto exp2;\n \n \tCASE_SEPARATORS:\n-\t  unget_char (dtp, c);\n \t  goto done;\n \n \tdefault:\n@@ -1273,7 +1273,7 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n       hit_eof (dtp);\n       return 1;\n     }\n-  else\n+  else if (c != '\\n')\n     eat_line (dtp);\n   sprintf (message, \"Bad floating point number for item %d\",\n \t      dtp->u.p.item_count);\n@@ -1310,34 +1310,48 @@ read_complex (st_parameter_dt *dtp, void * dest, int kind, size_t size)\n       goto bad_complex;\n     }\n \n+eol_1:\n   eat_spaces (dtp);\n+  c = next_char (dtp);\n+  if (c == '\\n' || c== '\\r')\n+    goto eol_1;\n+  else\n+    unget_char (dtp, c);\n+\n   if (parse_real (dtp, dest, kind))\n     return;\n \n-eol_1:\n+eol_2:\n   eat_spaces (dtp);\n   c = next_char (dtp);\n   if (c == '\\n' || c== '\\r')\n-    goto eol_1;\n+    goto eol_2;\n   else\n     unget_char (dtp, c);\n \n   if (next_char (dtp)\n       !=  (dtp->u.p.current_unit->decimal_status == DECIMAL_POINT ? ',' : ';'))\n     goto bad_complex;\n \n-eol_2:\n+eol_3:\n   eat_spaces (dtp);\n   c = next_char (dtp);\n   if (c == '\\n' || c== '\\r')\n-    goto eol_2;\n+    goto eol_3;\n   else\n     unget_char (dtp, c);\n \n   if (parse_real (dtp, dest + size / 2, kind))\n     return;\n-\n+    \n+eol_4:\n   eat_spaces (dtp);\n+  c = next_char (dtp);\n+  if (c == '\\n' || c== '\\r')\n+    goto eol_4;\n+  else\n+    unget_char (dtp, c);\n+\n   if (next_char (dtp) != ')')\n     goto bad_complex;\n \n@@ -1363,7 +1377,7 @@ read_complex (st_parameter_dt *dtp, void * dest, int kind, size_t size)\n       hit_eof (dtp);\n       return;\n     }\n-  else    \n+  else if (c != '\\n')   \n     eat_line (dtp);\n   sprintf (message, \"Bad complex value in item %d of list input\",\n \t      dtp->u.p.item_count);\n@@ -1726,8 +1740,9 @@ read_real (st_parameter_dt *dtp, void * dest, int length)\n       hit_eof (dtp);\n       return;\n     }\n-  else\n+  else if (c != '\\n')\n     eat_line (dtp);\n+\n   sprintf (message, \"Bad real number in item %d of list input\",\n \t      dtp->u.p.item_count);\n   generate_error (&dtp->common, LIBERROR_READ_VALUE, message);"}]}