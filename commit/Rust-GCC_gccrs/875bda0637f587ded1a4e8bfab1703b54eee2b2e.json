{"sha": "875bda0637f587ded1a4e8bfab1703b54eee2b2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc1YmRhMDYzN2Y1ODdkZWQxYTRlOGJmYWIxNzAzYjU0ZWVlMmIyZQ==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-02-26T08:56:00Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-01T10:42:27Z"}, "message": "Modify AST and HIR code to use the new enums", "tree": {"sha": "c51272f4fab9e605a774d85352af10e3466b1ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c51272f4fab9e605a774d85352af10e3466b1ac8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/875bda0637f587ded1a4e8bfab1703b54eee2b2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875bda0637f587ded1a4e8bfab1703b54eee2b2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/875bda0637f587ded1a4e8bfab1703b54eee2b2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875bda0637f587ded1a4e8bfab1703b54eee2b2e/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b857e339dd144e3405a9a5a6f3275a2e56b2f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b857e339dd144e3405a9a5a6f3275a2e56b2f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b857e339dd144e3405a9a5a6f3275a2e56b2f54"}], "stats": {"total": 160, "additions": 85, "deletions": 75}, "files": [{"sha": "69d1e6e847ef026d1131c845ed623a745187a2db", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875bda0637f587ded1a4e8bfab1703b54eee2b2e/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875bda0637f587ded1a4e8bfab1703b54eee2b2e/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=875bda0637f587ded1a4e8bfab1703b54eee2b2e", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rust-diagnostics.h\"\n #include \"rust-ast-visitor.h\"\n #include \"rust-session-manager.h\"\n+#include \"operator.h\"\n \n /* Compilation unit used for various AST-related functions that would make\n  * the headers too long if they were defined inline and don't receive any\n@@ -1602,12 +1603,12 @@ NegationExpr::as_string () const\n   // TODO: rewrite formula to allow outer attributes\n   std::string str;\n \n-  switch (negation_type)\n+  switch (expr_type)\n     {\n-    case NEGATE:\n+    case NegationOperator::NEGATE:\n       str = \"-\";\n       break;\n-    case NOT:\n+    case NegationOperator::NOT:\n       str = \"!\";\n       break;\n     default:\n@@ -1682,22 +1683,22 @@ ComparisonExpr::as_string () const\n \n   switch (expr_type)\n     {\n-    case EQUAL:\n+    case ComparisonOperator::EQUAL:\n       str += \" == \";\n       break;\n-    case NOT_EQUAL:\n+    case ComparisonOperator::NOT_EQUAL:\n       str += \" != \";\n       break;\n-    case GREATER_THAN:\n+    case ComparisonOperator::GREATER_THAN:\n       str += \" > \";\n       break;\n-    case LESS_THAN:\n+    case ComparisonOperator::LESS_THAN:\n       str += \" < \";\n       break;\n-    case GREATER_OR_EQUAL:\n+    case ComparisonOperator::GREATER_OR_EQUAL:\n       str += \" >= \";\n       break;\n-    case LESS_OR_EQUAL:\n+    case ComparisonOperator::LESS_OR_EQUAL:\n       str += \" <= \";\n       break;\n     default:\n@@ -1770,10 +1771,10 @@ LazyBooleanExpr::as_string () const\n \n   switch (expr_type)\n     {\n-    case LOGICAL_OR:\n+    case LazyBooleanOperator::LOGICAL_OR:\n       str += \" || \";\n       break;\n-    case LOGICAL_AND:\n+    case LazyBooleanOperator::LOGICAL_AND:\n       str += \" && \";\n       break;\n     default:\n@@ -1944,34 +1945,34 @@ CompoundAssignmentExpr::as_string () const\n   // get operator string\n   switch (expr_type)\n     {\n-    case ADD:\n+    case CompoundAssignmentOperator::ADD:\n       operator_str = \"+\";\n       break;\n-    case SUBTRACT:\n+    case CompoundAssignmentOperator::SUBTRACT:\n       operator_str = \"-\";\n       break;\n-    case MULTIPLY:\n+    case CompoundAssignmentOperator::MULTIPLY:\n       operator_str = \"*\";\n       break;\n-    case DIVIDE:\n+    case CompoundAssignmentOperator::DIVIDE:\n       operator_str = \"/\";\n       break;\n-    case MODULUS:\n+    case CompoundAssignmentOperator::MODULUS:\n       operator_str = \"%\";\n       break;\n-    case BITWISE_AND:\n+    case CompoundAssignmentOperator::BITWISE_AND:\n       operator_str = \"&\";\n       break;\n-    case BITWISE_OR:\n+    case CompoundAssignmentOperator::BITWISE_OR:\n       operator_str = \"|\";\n       break;\n-    case BITWISE_XOR:\n+    case CompoundAssignmentOperator::BITWISE_XOR:\n       operator_str = \"^\";\n       break;\n-    case LEFT_SHIFT:\n+    case CompoundAssignmentOperator::LEFT_SHIFT:\n       operator_str = \"<<\";\n       break;\n-    case RIGHT_SHIFT:\n+    case CompoundAssignmentOperator::RIGHT_SHIFT:\n       operator_str = \">>\";\n       break;\n     default:\n@@ -2005,34 +2006,34 @@ ArithmeticOrLogicalExpr::as_string () const\n   // get operator string\n   switch (expr_type)\n     {\n-    case ADD:\n+    case ArithmeticOrLogicalOperator::ADD:\n       operator_str = \"+\";\n       break;\n-    case SUBTRACT:\n+    case ArithmeticOrLogicalOperator::SUBTRACT:\n       operator_str = \"-\";\n       break;\n-    case MULTIPLY:\n+    case ArithmeticOrLogicalOperator::MULTIPLY:\n       operator_str = \"*\";\n       break;\n-    case DIVIDE:\n+    case ArithmeticOrLogicalOperator::DIVIDE:\n       operator_str = \"/\";\n       break;\n-    case MODULUS:\n+    case ArithmeticOrLogicalOperator::MODULUS:\n       operator_str = \"%\";\n       break;\n-    case BITWISE_AND:\n+    case ArithmeticOrLogicalOperator::BITWISE_AND:\n       operator_str = \"&\";\n       break;\n-    case BITWISE_OR:\n+    case ArithmeticOrLogicalOperator::BITWISE_OR:\n       operator_str = \"|\";\n       break;\n-    case BITWISE_XOR:\n+    case ArithmeticOrLogicalOperator::BITWISE_XOR:\n       operator_str = \"^\";\n       break;\n-    case LEFT_SHIFT:\n+    case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n       operator_str = \"<<\";\n       break;\n-    case RIGHT_SHIFT:\n+    case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n       operator_str = \">>\";\n       break;\n     default:"}, {"sha": "3de14cc35ac4a3260209f102627ffeba6e0e7004", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875bda0637f587ded1a4e8bfab1703b54eee2b2e/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875bda0637f587ded1a4e8bfab1703b54eee2b2e/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=875bda0637f587ded1a4e8bfab1703b54eee2b2e", "patch": "@@ -366,9 +366,10 @@ class ErrorPropagationExpr : public OperatorExpr\n // Unary prefix - or ! negation or NOT operators.\n class NegationExpr : public OperatorExpr\n {\n-private:\n+public:\n   using ExprType = NegationOperator;\n \n+private:\n   /* Note: overload negation via std::ops::Neg and not via std::ops::Not\n    * Negation only works for signed integer and floating-point types, NOT only\n    * works for boolean and integer types (via bitwise NOT) */\n@@ -408,9 +409,10 @@ class NegationExpr : public OperatorExpr\n // Infix binary operators. +, -, *, /, %, &, |, ^, <<, >>\n class ArithmeticOrLogicalExpr : public OperatorExpr\n {\n-private:\n+public:\n   using ExprType = ArithmeticOrLogicalOperator;\n \n+private:\n   // Note: overloading trait specified in comments\n   ExprType expr_type;\n \n@@ -483,9 +485,10 @@ class ArithmeticOrLogicalExpr : public OperatorExpr\n // Infix binary comparison operators. ==, !=, <, <=, >, >=\n class ComparisonExpr : public OperatorExpr\n {\n-private:\n-  using ExprType = ComparisionOperator;\n+public:\n+  using ExprType = ComparisonOperator;\n \n+private:\n   // Note: overloading trait specified in comments\n   ExprType expr_type;\n \n@@ -559,9 +562,10 @@ class ComparisonExpr : public OperatorExpr\n // Infix binary lazy boolean logical operators && and ||.\n class LazyBooleanExpr : public OperatorExpr\n {\n-private:\n+public:\n   using ExprType = LazyBooleanOperator;\n \n+private:\n   ExprType expr_type;\n \n   std::unique_ptr<Expr> right_expr;\n@@ -760,9 +764,10 @@ class AssignmentExpr : public OperatorExpr\n  * expressions. */\n class CompoundAssignmentExpr : public OperatorExpr\n {\n-private:\n+public:\n   using ExprType = CompoundAssignmentOperator;\n \n+private:\n   // Note: overloading trait specified in comments\n   ExprType expr_type;\n   std::unique_ptr<Expr> right_expr;"}, {"sha": "d8f13bf4149f7daa8dc3bd2fc17196917619202a", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875bda0637f587ded1a4e8bfab1703b54eee2b2e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875bda0637f587ded1a4e8bfab1703b54eee2b2e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=875bda0637f587ded1a4e8bfab1703b54eee2b2e", "patch": "@@ -356,9 +356,10 @@ class ErrorPropagationExpr : public OperatorExpr\n // Unary prefix - or ! negation or NOT operators.\n class NegationExpr : public OperatorExpr\n {\n-private:\n+public:\n   using ExprType = NegationOperator;\n \n+private:\n   /* Note: overload negation via std::ops::Neg and not via std::ops::Not\n    * Negation only works for signed integer and floating-point types, NOT only\n    * works for boolean and integer types (via bitwise NOT) */\n@@ -401,9 +402,10 @@ class NegationExpr : public OperatorExpr\n // Infix binary operators. +, -, *, /, %, &, |, ^, <<, >>\n class ArithmeticOrLogicalExpr : public OperatorExpr\n {\n-private:\n+public:\n   using ExprType = ArithmeticOrLogicalOperator;\n \n+private:\n   // Note: overloading trait specified in comments\n   ExprType expr_type;\n \n@@ -474,9 +476,10 @@ class ArithmeticOrLogicalExpr : public OperatorExpr\n // Infix binary comparison operators. ==, !=, <, <=, >, >=\n class ComparisonExpr : public OperatorExpr\n {\n-private:\n+public:\n   using ExprType = ComparisonOperator;\n \n+private:\n   // Note: overloading trait specified in comments\n   ExprType expr_type;\n \n@@ -548,9 +551,10 @@ class ComparisonExpr : public OperatorExpr\n // Infix binary lazy boolean logical operators && and ||.\n class LazyBooleanExpr : public OperatorExpr\n {\n-private:\n+public:\n   using ExprType = LazyBooleanOperator;\n \n+private:\n   ExprType expr_type;\n \n   std::unique_ptr<Expr> right_expr;"}, {"sha": "3ced5370be04b804e81e471ee53c084165f50fa3", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875bda0637f587ded1a4e8bfab1703b54eee2b2e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875bda0637f587ded1a4e8bfab1703b54eee2b2e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=875bda0637f587ded1a4e8bfab1703b54eee2b2e", "patch": "@@ -1685,12 +1685,12 @@ NegationExpr::as_string () const\n {\n   std::string str;\n \n-  switch (negation_type)\n+  switch (expr_type)\n     {\n-    case NEGATE:\n+        case NegationOperator::NEGATE:\n       str = \"-\";\n       break;\n-    case NOT:\n+        case NegationOperator::NOT:\n       str = \"!\";\n       break;\n     default:\n@@ -1748,22 +1748,22 @@ ComparisonExpr::as_string () const\n \n   switch (expr_type)\n     {\n-    case EQUAL:\n+        case ComparisonOperator::EQUAL:\n       str += \" == \";\n       break;\n-    case NOT_EQUAL:\n+        case ComparisonOperator::NOT_EQUAL:\n       str += \" != \";\n       break;\n-    case GREATER_THAN:\n+        case ComparisonOperator::GREATER_THAN:\n       str += \" > \";\n       break;\n-    case LESS_THAN:\n+        case ComparisonOperator::LESS_THAN:\n       str += \" < \";\n       break;\n-    case GREATER_OR_EQUAL:\n+        case ComparisonOperator::GREATER_OR_EQUAL:\n       str += \" >= \";\n       break;\n-    case LESS_OR_EQUAL:\n+        case ComparisonOperator::LESS_OR_EQUAL:\n       str += \" <= \";\n       break;\n     default:\n@@ -1832,10 +1832,10 @@ LazyBooleanExpr::as_string () const\n \n   switch (expr_type)\n     {\n-    case LOGICAL_OR:\n+        case LazyBooleanOperator::LOGICAL_OR:\n       str += \" || \";\n       break;\n-    case LOGICAL_AND:\n+        case LazyBooleanOperator::LOGICAL_AND:\n       str += \" && \";\n       break;\n     default:\n@@ -2000,34 +2000,34 @@ ArithmeticOrLogicalExpr::as_string () const\n   // get operator string\n   switch (expr_type)\n     {\n-    case ADD:\n+        case ArithmeticOrLogicalOperator::ADD:\n       operator_str = \"+\";\n       break;\n-    case SUBTRACT:\n+        case ArithmeticOrLogicalOperator::SUBTRACT:\n       operator_str = \"-\";\n       break;\n-    case MULTIPLY:\n+        case ArithmeticOrLogicalOperator::MULTIPLY:\n       operator_str = \"*\";\n       break;\n-    case DIVIDE:\n+        case ArithmeticOrLogicalOperator::DIVIDE:\n       operator_str = \"/\";\n       break;\n-    case MODULUS:\n+        case ArithmeticOrLogicalOperator::MODULUS:\n       operator_str = \"%\";\n       break;\n-    case BITWISE_AND:\n+        case ArithmeticOrLogicalOperator::BITWISE_AND:\n       operator_str = \"&\";\n       break;\n-    case BITWISE_OR:\n+        case ArithmeticOrLogicalOperator::BITWISE_OR:\n       operator_str = \"|\";\n       break;\n-    case BITWISE_XOR:\n+        case ArithmeticOrLogicalOperator::BITWISE_XOR:\n       operator_str = \"^\";\n       break;\n-    case LEFT_SHIFT:\n+        case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n       operator_str = \"<<\";\n       break;\n-    case RIGHT_SHIFT:\n+        case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n       operator_str = \">>\";\n       break;\n     default:"}, {"sha": "b72b3088bcfcc7e99fdf6359611c21e65c1c0887", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875bda0637f587ded1a4e8bfab1703b54eee2b2e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875bda0637f587ded1a4e8bfab1703b54eee2b2e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=875bda0637f587ded1a4e8bfab1703b54eee2b2e", "patch": "@@ -524,9 +524,9 @@ class TypeCheckExpr : public TypeCheckBase\n     auto negated_expr_ty = TypeCheckExpr::Resolve (expr.get_expr (), false);\n \n     // https://doc.rust-lang.org/reference/expressions/operator-expr.html#negation-operators\n-    switch (expr.get_negation_type ())\n+    switch (expr.get_expr_type ())\n       {\n-\tcase HIR::NegationExpr::NegationType::NEGATE: {\n+\tcase NegationOperator::NEGATE: {\n \t  bool valid\n \t    = (negated_expr_ty->get_kind () == TyTy::TypeKind::INT)\n \t      || (negated_expr_ty->get_kind () == TyTy::TypeKind::UINT)\n@@ -546,7 +546,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t}\n \tbreak;\n \n-\tcase HIR::NegationExpr::NegationType::NOT: {\n+\tcase NegationOperator::NOT: {\n \t  bool valid\n \t    = (negated_expr_ty->get_kind () == TyTy::TypeKind::BOOL)\n \t      || (negated_expr_ty->get_kind () == TyTy::TypeKind::INT)\n@@ -913,11 +913,11 @@ class TypeCheckExpr : public TypeCheckBase\n     // this will change later when traits are added\n     switch (expr_type)\n       {\n-      case HIR::ArithmeticOrLogicalExpr::ADD:\n-      case HIR::ArithmeticOrLogicalExpr::SUBTRACT:\n-      case HIR::ArithmeticOrLogicalExpr::MULTIPLY:\n-      case HIR::ArithmeticOrLogicalExpr::DIVIDE:\n-      case HIR::ArithmeticOrLogicalExpr::MODULUS:\n+      case ArithmeticOrLogicalOperator::ADD:\n+      case ArithmeticOrLogicalOperator::SUBTRACT:\n+      case ArithmeticOrLogicalOperator::MULTIPLY:\n+      case ArithmeticOrLogicalOperator::DIVIDE:\n+      case ArithmeticOrLogicalOperator::MODULUS:\n \treturn (type->get_kind () == TyTy::TypeKind::INT)\n \t       || (type->get_kind () == TyTy::TypeKind::UINT)\n \t       || (type->get_kind () == TyTy::TypeKind::FLOAT)\n@@ -929,9 +929,9 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t       == TyTy::InferType::FLOAT));\n \n \t// integers or bools\n-      case HIR::ArithmeticOrLogicalExpr::BITWISE_AND:\n-      case HIR::ArithmeticOrLogicalExpr::BITWISE_OR:\n-      case HIR::ArithmeticOrLogicalExpr::BITWISE_XOR:\n+      case ArithmeticOrLogicalOperator::BITWISE_AND:\n+      case ArithmeticOrLogicalOperator::BITWISE_OR:\n+      case ArithmeticOrLogicalOperator::BITWISE_XOR:\n \treturn (type->get_kind () == TyTy::TypeKind::INT)\n \t       || (type->get_kind () == TyTy::TypeKind::UINT)\n \t       || (type->get_kind () == TyTy::TypeKind::BOOL)\n@@ -940,8 +940,8 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t       == TyTy::InferType::INTEGRAL));\n \n \t// integers only\n-      case HIR::ArithmeticOrLogicalExpr::LEFT_SHIFT:\n-      case HIR::ArithmeticOrLogicalExpr::RIGHT_SHIFT:\n+      case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n+      case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n \treturn (type->get_kind () == TyTy::TypeKind::INT)\n \t       || (type->get_kind () == TyTy::TypeKind::UINT)\n \t       || (type->get_kind () == TyTy::TypeKind::INFER"}]}