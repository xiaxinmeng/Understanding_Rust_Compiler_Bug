{"sha": "fc7563ecb0c86c8bb261652297fb27152c7b4aca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3NTYzZWNiMGM4NmM4YmIyNjE2NTIyOTdmYjI3MTUyYzdiNGFjYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-02-07T19:18:35Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-02-07T19:18:35Z"}, "message": "natFile.cc (_access): Don't stack-allocate buffer.\n\n\t* java/io/natFile.cc (_access): Don't stack-allocate buffer.\n\tSize buffer based on real size of string.\n\t(_stat): Likewise.\n\t(attr): Likewise.\n\t(getCanonicalPath): Likewise.\n\t(performList): Likewise.\n\t(performMkdir): Likewise.\n\t(performSetReadOnly): Likewise.\n\t(unixroot): Removed.\n\t(performRenameTo): Likewise.\n\t(performSetLastModified): Likewise.\n\t(performCreate): Likewise.\n\t(performDelete): Likewise.\n\t(performListRoots): Always return new array.\n\nFrom-SVN: r49584", "tree": {"sha": "6be707a712e1e6e4eed9c7f220ef78ec45fad871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6be707a712e1e6e4eed9c7f220ef78ec45fad871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc7563ecb0c86c8bb261652297fb27152c7b4aca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7563ecb0c86c8bb261652297fb27152c7b4aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc7563ecb0c86c8bb261652297fb27152c7b4aca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7563ecb0c86c8bb261652297fb27152c7b4aca/comments", "author": null, "committer": null, "parents": [{"sha": "73272ce6089d2c44aee23abf515f7d8be808e51d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73272ce6089d2c44aee23abf515f7d8be808e51d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73272ce6089d2c44aee23abf515f7d8be808e51d"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "ea1677d2ce9accaca1059665c782c1b13400b2c0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7563ecb0c86c8bb261652297fb27152c7b4aca/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7563ecb0c86c8bb261652297fb27152c7b4aca/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fc7563ecb0c86c8bb261652297fb27152c7b4aca", "patch": "@@ -1,5 +1,20 @@\n 2002-02-07  Tom Tromey  <tromey@redhat.com>\n \n+\t* java/io/natFile.cc (_access): Don't stack-allocate buffer.\n+\tSize buffer based on real size of string.\n+\t(_stat): Likewise.\n+\t(attr): Likewise.\n+\t(getCanonicalPath): Likewise.\n+\t(performList): Likewise.\n+\t(performMkdir): Likewise.\n+\t(performSetReadOnly): Likewise.\n+\t(unixroot): Removed.\n+\t(performRenameTo): Likewise.\n+\t(performSetLastModified): Likewise.\n+\t(performCreate): Likewise.\n+\t(performDelete): Likewise.\n+\t(performListRoots): Always return new array.\n+\n \t* prims.cc (_Jv_CreateJavaVM): Call _Jv_platform_initialize.\n \t* win32.cc (win32_exception_handler): Now static.\n \t* include/win32.h (_Jv_platform_initialize): Declare."}, {"sha": "82fab1c3acdde36025d04f1dea6f4e52b6bd49f5", "filename": "libjava/java/io/natFile.cc", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7563ecb0c86c8bb261652297fb27152c7b4aca/libjava%2Fjava%2Fio%2FnatFile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7563ecb0c86c8bb261652297fb27152c7b4aca/libjava%2Fjava%2Fio%2FnatFile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFile.cc?ref=fc7563ecb0c86c8bb261652297fb27152c7b4aca", "patch": "@@ -39,7 +39,7 @@ details.  */\n jboolean\n java::io::File::_access (jint query)\n {\n-  char buf[MAXPATHLEN];\n+  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n   JvAssert (query == READ || query == WRITE || query == EXISTS);\n@@ -60,7 +60,7 @@ java::io::File::_access (jint query)\n jboolean\n java::io::File::_stat (jint query)\n {\n-  char buf[MAXPATHLEN];\n+  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -83,7 +83,7 @@ java::io::File::_stat (jint query)\n jlong\n java::io::File::attr (jint query)\n {\n-  char buf[MAXPATHLEN];\n+  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -104,7 +104,8 @@ java::io::File::attr (jint query)\n jstring\n java::io::File::getCanonicalPath (void)\n {\n-  char buf[MAXPATHLEN], buf2[MAXPATHLEN];\n+  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char buf2[MAXPATHLEN];\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -134,15 +135,14 @@ java::io::File::performList (java::io::FilenameFilter *filter,\n   /* Some systems have dirent.h, but no directory reading functions like\n      opendir.  */\n #if defined(HAVE_DIRENT_H) && defined(HAVE_OPENDIR)\n-  char buf[MAXPATHLEN];\n+  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n   DIR *dir = opendir (buf);\n   if (! dir)\n     return NULL;\n \n-\n   java::util::ArrayList *list = new java::util::ArrayList ();\n   struct dirent *d;\n #ifdef HAVE_READDIR_R\n@@ -162,7 +162,7 @@ java::io::File::performList (java::io::FilenameFilter *filter,\n       jstring name = JvNewStringUTF (d->d_name);\n       if (filter && ! filter->accept(this, name))\n \tcontinue;\n-      \n+\n       if (result_type == &java::io::File::class$)\n         {\n \t  java::io::File *file = new java::io::File (this, name);\n@@ -188,7 +188,7 @@ java::io::File::performList (java::io::FilenameFilter *filter,\n jboolean\n java::io::File::performMkdir (void)\n {\n-  char buf[MAXPATHLEN];\n+  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -202,7 +202,7 @@ java::io::File::performMkdir (void)\n jboolean\n java::io::File::performSetReadOnly (void)\n {\n-  char buf[MAXPATHLEN];\n+  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -219,28 +219,24 @@ java::io::File::performSetReadOnly (void)\n #endif\n }\n \n-static JArray<java::io::File *> *unixroot;\n-\n JArray< ::java::io::File *>*\n java::io::File::performListRoots ()\n {\n-  if (unixroot == NULL)\n-    {\n-      ::java::io::File *f = new ::java::io::File (JvNewStringLatin1 (\"/\"));\n-      unixroot = reinterpret_cast <JArray<java::io::File *>*> \n-\t\t   (JvNewObjectArray (1, &java::io::File::class$, f));\n-      elements (unixroot) [0] = f;\n-    }\n+  ::java::io::File *f = new ::java::io::File (JvNewStringLatin1 (\"/\"));\n+  JArray<java::io::File *> *unixroot\n+    = reinterpret_cast <JArray<java::io::File *>*> \n+          (JvNewObjectArray (1, &java::io::File::class$, f));\n+  elements (unixroot) [0] = f;\n   return unixroot;\n }\n \n jboolean\n java::io::File::performRenameTo (File *dest)\n {\n-  char buf[MAXPATHLEN];\n+  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n-  char buf2[MAXPATHLEN];\n+  char *buf2 = (char *) _Jv_AllocBytes (JvGetStringUTFLength (dest->path) + 1);\n   total = JvGetStringUTFRegion (dest->path, 0, dest->path->length(), buf2);\n   buf2[total] = '\\0';\n \n@@ -257,7 +253,7 @@ java::io::File::performSetLastModified (jlong time)\n #ifdef HAVE_UTIME\n   utimbuf tb;\n \n-  char buf[MAXPATHLEN];\n+  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n   \n@@ -272,7 +268,7 @@ java::io::File::performSetLastModified (jlong time)\n jboolean\n java::io::File::performCreate (void)\n {\n-  char buf[MAXPATHLEN];\n+  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -294,7 +290,7 @@ java::io::File::performCreate (void)\n jboolean\n java::io::File::performDelete (void)\n {\n-  char buf[MAXPATHLEN];\n+  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n "}]}