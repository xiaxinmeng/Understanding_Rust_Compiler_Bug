{"sha": "e9a6449215a18a8d68e97e96776410fca4777099", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlhNjQ0OTIxNWExOGE4ZDY4ZTk3ZTk2Nzc2NDEwZmNhNDc3NzA5OQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-10-23T00:12:36Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-10-23T00:12:36Z"}, "message": "basic_string.h (operator\"\"s): Remove space between quotes and literal identifier.\n\n2013-10-22  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* include/bits/basic_string.h (operator\"\"s): Remove space between quotes\n\tand literal identifier.\n\t* include/std/chrono (operator\"\"h, operator\"\"min, operator\"\"s,\n\toperator\"\"ms, operator\"\"us, operator\"\"ns): Ditto.\n\nFrom-SVN: r203941", "tree": {"sha": "cc678f5888ddd1cfaa4daf246400cb082bce5a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc678f5888ddd1cfaa4daf246400cb082bce5a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9a6449215a18a8d68e97e96776410fca4777099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a6449215a18a8d68e97e96776410fca4777099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a6449215a18a8d68e97e96776410fca4777099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a6449215a18a8d68e97e96776410fca4777099/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae5543e66213b694f07474cc98fba9d4c5b0defc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5543e66213b694f07474cc98fba9d4c5b0defc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5543e66213b694f07474cc98fba9d4c5b0defc"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "b287bf1a7cb64bb6fe509c639df19121943944ec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a6449215a18a8d68e97e96776410fca4777099/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a6449215a18a8d68e97e96776410fca4777099/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e9a6449215a18a8d68e97e96776410fca4777099", "patch": "@@ -1,3 +1,10 @@\n+2013-10-22  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/bits/basic_string.h (operator\"\"s): Remove space between quotes\n+\tand literal identifier.\n+\t* include/std/chrono (operator\"\"h, operator\"\"min, operator\"\"s,\n+\toperator\"\"ms, operator\"\"us, operator\"\"ns): Ditto.\n+\n 2013-10-22  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement N3779 - User-defined Literals for std::complex,"}, {"sha": "2d3edf80103103ec00e5215347822c162b99540f", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a6449215a18a8d68e97e96776410fca4777099/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a6449215a18a8d68e97e96776410fca4777099/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=e9a6449215a18a8d68e97e96776410fca4777099", "patch": "@@ -3130,22 +3130,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n \n     inline basic_string<char>\n-    operator\"\" s(const char* __str, size_t __len)\n+    operator\"\"s(const char* __str, size_t __len)\n     { return basic_string<char>{__str, __len}; }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n     inline basic_string<wchar_t>\n-    operator\"\" s(const wchar_t* __str, size_t __len)\n+    operator\"\"s(const wchar_t* __str, size_t __len)\n     { return basic_string<wchar_t>{__str, __len}; }\n #endif\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n     inline basic_string<char16_t>\n-    operator\"\" s(const char16_t* __str, size_t __len)\n+    operator\"\"s(const char16_t* __str, size_t __len)\n     { return basic_string<char16_t>{__str, __len}; }\n \n     inline basic_string<char32_t>\n-    operator\"\" s(const char32_t* __str, size_t __len)\n+    operator\"\"s(const char32_t* __str, size_t __len)\n     { return basic_string<char32_t>{__str, __len}; }\n #endif\n "}, {"sha": "deeb460433d92b22d488144acfda3a4fd95491d4", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a6449215a18a8d68e97e96776410fca4777099/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a6449215a18a8d68e97e96776410fca4777099/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=e9a6449215a18a8d68e97e96776410fca4777099", "patch": "@@ -810,89 +810,89 @@ _GLIBCXX_END_NAMESPACE_VERSION\n     } // __select_type\n \n     constexpr chrono::duration<long double, ratio<3600,1>>\n-    operator\"\" h(long double __hours)\n+    operator\"\"h(long double __hours)\n     { return chrono::duration<long double, ratio<3600,1>>{__hours}; }\n \n     template <char... _Digits>\n       constexpr typename\n       __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t     chrono::hours>::type\n-      operator\"\" h()\n+      operator\"\"h()\n       {\n \treturn __select_type::_Select_type<\n \t\t\t  __select_int::_Select_int<_Digits...>::value,\n \t\t\t  chrono::hours>::value;\n       }\n \n     constexpr chrono::duration<long double, ratio<60,1>>\n-    operator\"\" min(long double __mins)\n+    operator\"\"min(long double __mins)\n     { return chrono::duration<long double, ratio<60,1>>{__mins}; }\n \n     template <char... _Digits>\n       constexpr typename\n       __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t     chrono::minutes>::type\n-      operator\"\" min()\n+      operator\"\"min()\n       {\n \treturn __select_type::_Select_type<\n \t\t\t  __select_int::_Select_int<_Digits...>::value,\n \t\t\t  chrono::minutes>::value;\n       }\n \n     constexpr chrono::duration<long double>\n-    operator\"\" s(long double __secs)\n+    operator\"\"s(long double __secs)\n     { return chrono::duration<long double>{__secs}; }\n \n     template <char... _Digits>\n       constexpr typename\n       __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t     chrono::seconds>::type\n-      operator\"\" s()\n+      operator\"\"s()\n       {\n \treturn __select_type::_Select_type<\n \t\t\t  __select_int::_Select_int<_Digits...>::value,\n \t\t\t  chrono::seconds>::value;\n       }\n \n     constexpr chrono::duration<long double, milli>\n-    operator\"\" ms(long double __msecs)\n+    operator\"\"ms(long double __msecs)\n     { return chrono::duration<long double, milli>{__msecs}; }\n \n     template <char... _Digits>\n       constexpr typename\n       __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t     chrono::milliseconds>::type\n-      operator\"\" ms()\n+      operator\"\"ms()\n       {\n \treturn __select_type::_Select_type<\n \t\t\t  __select_int::_Select_int<_Digits...>::value,\n \t\t\t  chrono::milliseconds>::value;\n       }\n \n     constexpr chrono::duration<long double, micro>\n-    operator\"\" us(long double __usecs)\n+    operator\"\"us(long double __usecs)\n     { return chrono::duration<long double, micro>{__usecs}; }\n \n     template <char... _Digits>\n       constexpr typename\n       __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t     chrono::microseconds>::type\n-      operator\"\" us()\n+      operator\"\"us()\n       {\n \treturn __select_type::_Select_type<\n \t\t\t  __select_int::_Select_int<_Digits...>::value,\n \t\t\t  chrono::microseconds>::value;\n       }\n \n     constexpr chrono::duration<long double, nano>\n-    operator\"\" ns(long double __nsecs)\n+    operator\"\"ns(long double __nsecs)\n     { return chrono::duration<long double, nano>{__nsecs}; }\n \n     template <char... _Digits>\n       constexpr typename\n       __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t     chrono::nanoseconds>::type\n-      operator\"\" ns()\n+      operator\"\"ns()\n       {\n \treturn __select_type::_Select_type<\n \t\t\t  __select_int::_Select_int<_Digits...>::value,"}]}