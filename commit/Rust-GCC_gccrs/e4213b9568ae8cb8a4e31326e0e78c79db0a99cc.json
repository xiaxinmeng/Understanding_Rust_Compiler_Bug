{"sha": "e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "node_id": "C_kwDOANBUbNoAKGU0MjEzYjk1NjhhZThjYjhhNGUzMTMyNmUwZTc4Yzc5ZGIwYTk5Y2M", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-13T15:45:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-13T15:45:24Z"}, "message": "Merge #1248\n\n1248: Support RangePatterns in matches r=dafaust a=dafaust\n\nAdd name resolution, lowering, type checking and compilation for `RangePattern`s in matches.\r\n\n\nCo-authored-by: David Faust <david.faust@oracle.com>", "tree": {"sha": "95fa5b04afbe6b66a3faece7399782c8305dab11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95fa5b04afbe6b66a3faece7399782c8305dab11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJifn0UCRBK7hj4Ov3rIwAAmKIIALFFH+NtpF+RytHrkf00s+iF\nWhZ4U96nDSj70QG7gVmL/YpZpInKr4NHY7K86hrFz6kUgcyNtF9tn2HMJ9Jkqmkj\n+ybl7LynZyVdrQeXxx+zTwe+kZQ8nhLirrukUXrkIfgfC7MpUU2NjDFNMe7L2/a0\nwVg1Tmqie9g39aZOSavYFSqmy/MyQGn+sZYegipcax+rxGUnMw/wLV2Jox+fqb03\nbYGpzt0+NpNPApMYKBosywl3TKw+uWshKoZ8LvExgPJpAvpVMpuouopsl1BD86el\n3zOJTrldnv+PxZDx1cbZHeN6bOW9J9bHJJopwZWjDhH6ihj8SRJ8m2e657yUVvM=\n=dNfL\n-----END PGP SIGNATURE-----\n", "payload": "tree 95fa5b04afbe6b66a3faece7399782c8305dab11\nparent d4434b511a4e650e95c7a1de6810d8748c5d8a70\nparent b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1652456724 +0000\ncommitter GitHub <noreply@github.com> 1652456724 +0000\n\nMerge #1248\n\n1248: Support RangePatterns in matches r=dafaust a=dafaust\n\nAdd name resolution, lowering, type checking and compilation for `RangePattern`s in matches.\r\n\n\nCo-authored-by: David Faust <david.faust@oracle.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4434b511a4e650e95c7a1de6810d8748c5d8a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4434b511a4e650e95c7a1de6810d8748c5d8a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4434b511a4e650e95c7a1de6810d8748c5d8a70"}, {"sha": "b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8"}], "stats": {"total": 394, "additions": 393, "deletions": 1}, "files": [{"sha": "247af5dbe05f569fd76d4efa5af50823966222c7", "filename": "gcc/rust/ast/rust-pattern.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fast%2Frust-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fast%2Frust-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-pattern.h?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -195,6 +195,13 @@ class WildcardPattern : public Pattern\n class RangePatternBound\n {\n public:\n+  enum RangePatternBoundType\n+  {\n+    LITERAL,\n+    PATH,\n+    QUALPATH\n+  };\n+\n   virtual ~RangePatternBound () {}\n \n   // Unique pointer custom clone function\n@@ -208,6 +215,8 @@ class RangePatternBound\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n+  virtual RangePatternBoundType get_bound_type () const = 0;\n+\n protected:\n   // pure virtual as RangePatternBound is abstract\n   virtual RangePatternBound *clone_range_pattern_bound_impl () const = 0;\n@@ -234,10 +243,19 @@ class RangePatternBoundLiteral : public RangePatternBound\n \n   std::string as_string () const override;\n \n+  Literal get_literal () const { return literal; }\n+\n+  bool get_has_minus () const { return has_minus; }\n+\n   Location get_locus () const { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  RangePatternBoundType get_bound_type () const override\n+  {\n+    return RangePatternBoundType::LITERAL;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -268,6 +286,11 @@ class RangePatternBoundPath : public RangePatternBound\n   PathInExpression &get_path () { return path; }\n   const PathInExpression &get_path () const { return path; }\n \n+  RangePatternBoundType get_bound_type () const override\n+  {\n+    return RangePatternBoundType::PATH;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -300,6 +323,11 @@ class RangePatternBoundQualPath : public RangePatternBound\n   QualifiedPathInExpression &get_qualified_path () { return path; }\n   const QualifiedPathInExpression &get_qualified_path () const { return path; }\n \n+  RangePatternBoundType get_bound_type () const override\n+  {\n+    return RangePatternBoundType::QUALPATH;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "aefa4eb08bbf36e87aa0677defa0fe5d9718d9dc", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -105,6 +105,64 @@ CompilePatternCaseLabelExpr::visit (HIR::LiteralPattern &pattern)\n   case_label_expr = build_case_label (lit, NULL_TREE, associated_case_label);\n }\n \n+static tree\n+compile_range_pattern_bound (HIR::RangePatternBound *bound,\n+\t\t\t     Analysis::NodeMapping mappings, Location locus,\n+\t\t\t     Context *ctx)\n+{\n+  tree result = NULL_TREE;\n+  switch (bound->get_bound_type ())\n+    {\n+      case HIR::RangePatternBound::RangePatternBoundType::LITERAL: {\n+\tHIR::RangePatternBoundLiteral &ref\n+\t  = *static_cast<HIR::RangePatternBoundLiteral *> (bound);\n+\n+\tHIR::LiteralExpr *litexpr\n+\t  = new HIR::LiteralExpr (mappings, ref.get_literal (), locus,\n+\t\t\t\t  std::vector<AST::Attribute> ());\n+\n+\tresult = CompileExpr::Compile (litexpr, ctx);\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::PATH: {\n+\tHIR::RangePatternBoundPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundPath *> (bound);\n+\n+\tresult = ResolvePathRef::Compile (ref.get_path (), ctx);\n+\n+\t// If the path resolves to a const expression, fold it.\n+\tresult = ConstCtx::fold (result);\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::QUALPATH: {\n+\tHIR::RangePatternBoundQualPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundQualPath *> (bound);\n+\n+\tresult = ResolvePathRef::Compile (ref.get_qualified_path (), ctx);\n+\n+\t// If the path resolves to a const expression, fold it.\n+\tresult = ConstCtx::fold (result);\n+      }\n+    }\n+\n+  return result;\n+}\n+\n+void\n+CompilePatternCaseLabelExpr::visit (HIR::RangePattern &pattern)\n+{\n+  tree upper = compile_range_pattern_bound (pattern.get_upper_bound ().get (),\n+\t\t\t\t\t    pattern.get_pattern_mappings (),\n+\t\t\t\t\t    pattern.get_locus (), ctx);\n+  tree lower = compile_range_pattern_bound (pattern.get_lower_bound ().get (),\n+\t\t\t\t\t    pattern.get_pattern_mappings (),\n+\t\t\t\t\t    pattern.get_locus (), ctx);\n+\n+  case_label_expr = build_case_label (lower, upper, associated_case_label);\n+}\n+\n // setup the bindings\n \n void"}, {"sha": "0eb5d61249b2cf06a0f2dbf5bbbe3fb591adfe3c", "filename": "gcc/rust/backend/rust-compile-pattern.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -37,13 +37,13 @@ class CompilePatternCaseLabelExpr : public HIRCompileBase,\n   void visit (HIR::StructPattern &pattern) override;\n   void visit (HIR::TupleStructPattern &pattern) override;\n   void visit (HIR::WildcardPattern &pattern) override;\n+  void visit (HIR::RangePattern &pattern) override;\n \n   // Empty visit for unused Pattern HIR nodes.\n   void visit (HIR::GroupedPattern &) override {}\n   void visit (HIR::IdentifierPattern &) override {}\n   void visit (HIR::LiteralPattern &) override;\n   void visit (HIR::QualifiedPathInExpression &) override {}\n-  void visit (HIR::RangePattern &) override {}\n   void visit (HIR::ReferencePattern &) override {}\n   void visit (HIR::SlicePattern &) override {}\n   void visit (HIR::TuplePattern &) override {}"}, {"sha": "7afe75cd0cab51a6866a82b1615f948589a15702", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -950,6 +950,51 @@ ASTLoweringBase::lower_tuple_pattern_ranged (\n \t\t\t\t      std::move (upper_patterns)));\n }\n \n+std::unique_ptr<HIR::RangePatternBound>\n+ASTLoweringBase::lower_range_pattern_bound (AST::RangePatternBound *bound)\n+{\n+  std::unique_ptr<HIR::RangePatternBound> hir_bound = nullptr;\n+  switch (bound->get_bound_type ())\n+    {\n+      case AST::RangePatternBound::RangePatternBoundType::LITERAL: {\n+\tAST::RangePatternBoundLiteral &ref\n+\t  = *static_cast<AST::RangePatternBoundLiteral *> (bound);\n+\n+\tHIR::Literal literal = lower_literal (ref.get_literal ());\n+\n+\thir_bound = std::unique_ptr<HIR::RangePatternBound> (\n+\t  new HIR::RangePatternBoundLiteral (literal, ref.get_locus (),\n+\t\t\t\t\t     ref.get_has_minus ()));\n+      }\n+      break;\n+      case AST::RangePatternBound::RangePatternBoundType::PATH: {\n+\tAST::RangePatternBoundPath &ref\n+\t  = *static_cast<AST::RangePatternBoundPath *> (bound);\n+\n+\tHIR::PathInExpression *path\n+\t  = ASTLowerPathInExpression::translate (&ref.get_path ());\n+\n+\thir_bound = std::unique_ptr<HIR::RangePatternBound> (\n+\t  new HIR::RangePatternBoundPath (*path));\n+      }\n+      break;\n+      case AST::RangePatternBound::RangePatternBoundType::QUALPATH: {\n+\tAST::RangePatternBoundQualPath &ref\n+\t  = *static_cast<AST::RangePatternBoundQualPath *> (bound);\n+\n+\tHIR::QualifiedPathInExpression *qualpath\n+\t  = ASTLowerQualPathInExpression::translate (\n+\t    &ref.get_qualified_path ());\n+\n+\thir_bound = std::unique_ptr<HIR::RangePatternBound> (\n+\t  new HIR::RangePatternBoundQualPath (*qualpath));\n+      }\n+      break;\n+    }\n+\n+  return hir_bound;\n+}\n+\n HIR::Literal\n ASTLoweringBase::lower_literal (const AST::Literal &literal)\n {"}, {"sha": "7e3eee134a1fd179830e13c097df95a24143b6e3", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -282,6 +282,9 @@ class ASTLoweringBase : public AST::ASTVisitor\n   std::unique_ptr<TuplePatternItems>\n   lower_tuple_pattern_ranged (AST::TuplePatternItemsRanged &pattern);\n \n+  std::unique_ptr<HIR::RangePatternBound>\n+  lower_range_pattern_bound (AST::RangePatternBound *bound);\n+\n   HIR::Literal lower_literal (const AST::Literal &literal);\n };\n "}, {"sha": "1c08bf1b197e961e7d5f48fed4dd71e2672e9d60", "filename": "gcc/rust/hir/rust-ast-lower-pattern.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -208,5 +208,23 @@ ASTLoweringPattern::visit (AST::LiteralPattern &pattern)\n     = new HIR::LiteralPattern (mapping, std::move (l), pattern.get_locus ());\n }\n \n+void\n+ASTLoweringPattern::visit (AST::RangePattern &pattern)\n+{\n+  auto upper_bound\n+    = lower_range_pattern_bound (pattern.get_upper_bound ().get ());\n+  auto lower_bound\n+    = lower_range_pattern_bound (pattern.get_lower_bound ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, pattern.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::RangePattern (mapping, std::move (lower_bound),\n+\t\t\t     std::move (upper_bound), pattern.get_locus ());\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "dfd3dc07e69e534199904d77e60521d6bd6d7b8b", "filename": "gcc/rust/hir/rust-ast-lower-pattern.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -62,6 +62,8 @@ class ASTLoweringPattern : public ASTLoweringBase\n \n   void visit (AST::LiteralPattern &pattern) override;\n \n+  void visit (AST::RangePattern &pattern) override;\n+\n private:\n   ASTLoweringPattern () : translated (nullptr) {}\n "}, {"sha": "7129b5a36849961fa68989e741aa898fd1612093", "filename": "gcc/rust/hir/tree/rust-hir-pattern.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -197,6 +197,13 @@ class WildcardPattern : public Pattern\n class RangePatternBound\n {\n public:\n+  enum RangePatternBoundType\n+  {\n+    LITERAL,\n+    PATH,\n+    QUALPATH\n+  };\n+\n   virtual ~RangePatternBound () {}\n \n   // Unique pointer custom clone function\n@@ -210,6 +217,8 @@ class RangePatternBound\n \n   virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n+  virtual RangePatternBoundType get_bound_type () const = 0;\n+\n protected:\n   // pure virtual as RangePatternBound is abstract\n   virtual RangePatternBound *clone_range_pattern_bound_impl () const = 0;\n@@ -238,8 +247,15 @@ class RangePatternBoundLiteral : public RangePatternBound\n \n   Location get_locus () const { return locus; }\n \n+  Literal get_literal () const { return literal; }\n+\n   void accept_vis (HIRFullVisitor &vis) override;\n \n+  RangePatternBoundType get_bound_type () const override\n+  {\n+    return RangePatternBoundType::LITERAL;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -264,8 +280,16 @@ class RangePatternBoundPath : public RangePatternBound\n \n   Location get_locus () const { return path.get_locus (); }\n \n+  PathInExpression &get_path () { return path; }\n+  const PathInExpression &get_path () const { return path; }\n+\n   void accept_vis (HIRFullVisitor &vis) override;\n \n+  RangePatternBoundType get_bound_type () const override\n+  {\n+    return RangePatternBoundType::PATH;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -294,6 +318,14 @@ class RangePatternBoundQualPath : public RangePatternBound\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n+  QualifiedPathInExpression &get_qualified_path () { return path; }\n+  const QualifiedPathInExpression &get_qualified_path () const { return path; }\n+\n+  RangePatternBoundType get_bound_type () const override\n+  {\n+    return RangePatternBoundType::QUALPATH;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -368,6 +400,18 @@ class RangePattern : public Pattern\n     return PatternType::RANGE;\n   }\n \n+  std::unique_ptr<RangePatternBound> &get_lower_bound ()\n+  {\n+    rust_assert (lower != nullptr);\n+    return lower;\n+  }\n+\n+  std::unique_ptr<RangePatternBound> &get_upper_bound ()\n+  {\n+    rust_assert (upper != nullptr);\n+    return upper;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "dc2cca41fef15437f23167ad2d701eab06d0acfd", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -131,5 +131,39 @@ PatternDeclaration::visit (AST::TuplePattern &pattern)\n     }\n }\n \n+static void\n+resolve_range_pattern_bound (AST::RangePatternBound *bound, NodeId parent)\n+{\n+  switch (bound->get_bound_type ())\n+    {\n+    case AST::RangePatternBound::RangePatternBoundType::LITERAL:\n+      // Nothing to resolve for a literal.\n+      break;\n+\n+      case AST::RangePatternBound::RangePatternBoundType::PATH: {\n+\tAST::RangePatternBoundPath &ref\n+\t  = *static_cast<AST::RangePatternBoundPath *> (bound);\n+\n+\tResolvePath::go (&ref.get_path (), parent);\n+      }\n+      break;\n+\n+      case AST::RangePatternBound::RangePatternBoundType::QUALPATH: {\n+\tAST::RangePatternBoundQualPath &ref\n+\t  = *static_cast<AST::RangePatternBoundQualPath *> (bound);\n+\n+\tResolvePath::go (&ref.get_qualified_path (), parent);\n+      }\n+      break;\n+    }\n+}\n+\n+void\n+PatternDeclaration::visit (AST::RangePattern &pattern)\n+{\n+  resolve_range_pattern_bound (pattern.get_upper_bound ().get (), parent);\n+  resolve_range_pattern_bound (pattern.get_lower_bound ().get (), parent);\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "dfb05d3a4af88db954263e6e8ef95efc668b7cad", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -103,6 +103,8 @@ class PatternDeclaration : public ResolverBase\n \n   void visit (AST::TuplePattern &pattern) override;\n \n+  void visit (AST::RangePattern &pattern) override;\n+\n private:\n   PatternDeclaration (NodeId parent) : ResolverBase (parent) {}\n };"}, {"sha": "bceafde38a7edb2429a37ccc286cc4144ebb707b", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -273,5 +273,82 @@ TypeCheckPattern::visit (HIR::LiteralPattern &pattern)\n \t\t\t     pattern.get_literal (), pattern.get_locus ());\n }\n \n+void\n+TypeCheckPattern::visit (HIR::RangePattern &pattern)\n+{\n+  // Resolve the upper and lower bounds, and ensure they are compatible types\n+  TyTy::BaseType *upper = nullptr, *lower = nullptr;\n+\n+  // TODO: It would be nice to factor this out into a helper since the logic for\n+  // both bounds is exactly the same...\n+  switch (pattern.get_upper_bound ()->get_bound_type ())\n+    {\n+      case HIR::RangePatternBound::RangePatternBoundType::LITERAL: {\n+\tHIR::RangePatternBoundLiteral &ref\n+\t  = *static_cast<HIR::RangePatternBoundLiteral *> (\n+\t    pattern.get_upper_bound ().get ());\n+\n+\tHIR::Literal lit = ref.get_literal ();\n+\n+\tupper = resolve_literal (pattern.get_pattern_mappings (), lit,\n+\t\t\t\t pattern.get_locus ());\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::PATH: {\n+\tHIR::RangePatternBoundPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundPath *> (\n+\t    pattern.get_upper_bound ().get ());\n+\n+\tupper = TypeCheckExpr::Resolve (&ref.get_path (), false);\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::QUALPATH: {\n+\tHIR::RangePatternBoundQualPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundQualPath *> (\n+\t    pattern.get_upper_bound ().get ());\n+\n+\tupper = TypeCheckExpr::Resolve (&ref.get_qualified_path (), false);\n+      }\n+      break;\n+    }\n+\n+  switch (pattern.get_lower_bound ()->get_bound_type ())\n+    {\n+      case HIR::RangePatternBound::RangePatternBoundType::LITERAL: {\n+\tHIR::RangePatternBoundLiteral &ref\n+\t  = *static_cast<HIR::RangePatternBoundLiteral *> (\n+\t    pattern.get_lower_bound ().get ());\n+\n+\tHIR::Literal lit = ref.get_literal ();\n+\n+\tlower = resolve_literal (pattern.get_pattern_mappings (), lit,\n+\t\t\t\t pattern.get_locus ());\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::PATH: {\n+\tHIR::RangePatternBoundPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundPath *> (\n+\t    pattern.get_lower_bound ().get ());\n+\n+\tlower = TypeCheckExpr::Resolve (&ref.get_path (), false);\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::QUALPATH: {\n+\tHIR::RangePatternBoundQualPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundQualPath *> (\n+\t    pattern.get_lower_bound ().get ());\n+\n+\tlower = TypeCheckExpr::Resolve (&ref.get_qualified_path (), false);\n+      }\n+      break;\n+    }\n+\n+  infered = upper->unify (lower);\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "03c4977d572bdb30c835994732e76275bc3e44bd", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -56,11 +56,18 @@ class TypeCheckPattern : public TypeCheckBase\n \n   void visit (HIR::LiteralPattern &pattern) override;\n \n+  void visit (HIR::RangePattern &pattern) override;\n+\n private:\n   TypeCheckPattern (TyTy::BaseType *parent)\n     : TypeCheckBase (), parent (parent), infered (nullptr)\n   {}\n \n+  static TyTy::BaseType *\n+  typecheck_range_pattern_bound (HIR::RangePatternBound *bound,\n+\t\t\t\t Analysis::NodeMapping mappings,\n+\t\t\t\t Location locus);\n+\n   TyTy::BaseType *parent;\n   TyTy::BaseType *infered;\n };"}, {"sha": "8fe8f4c766f42e57916f4fbd34e3acdfee19afff", "filename": "gcc/testsuite/rust/execute/torture/match_range1.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -0,0 +1,34 @@\n+// { dg-output \"zero to END_RANGE\\nzero to END_RANGE\\nelse\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+const END_RANGE: i32 = 15;\n+\n+fn foo (x: i32) {\n+    match x {\n+        0..=END_RANGE => {\n+            let a = \"zero to END_RANGE\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        _ => {\n+            let a = \"else\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+    }\n+}\n+\n+fn main () -> i32 {\n+\n+    foo (11);\n+    foo (15);\n+    foo (21);\n+\n+    0\n+}"}, {"sha": "82980c2f0c5931169b4feb351b67265aeeccd38b", "filename": "gcc/testsuite/rust/execute/torture/match_range2.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4213b9568ae8cb8a4e31326e0e78c79db0a99cc/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs?ref=e4213b9568ae8cb8a4e31326e0e78c79db0a99cc", "patch": "@@ -0,0 +1,40 @@\n+// { dg-output \"lowercase\\nuppercase\\nother\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+const BIG_A: char = 'A';\n+const BIG_Z: char = 'Z';\n+\n+fn bar (x: char) {\n+    match x {\n+\n+        'a'..='z' => {\n+            let a = \"lowercase\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+        BIG_A..=BIG_Z => {\n+            let a = \"uppercase\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+        _ => {\n+            let a = \"other\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+    }\n+}\n+\n+fn main () -> i32 {\n+    bar ('b');\n+    bar ('X');\n+    bar ('!');\n+\n+    0\n+}"}]}