{"sha": "54178a01107b911813609693dd8d91968ac06819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQxNzhhMDExMDdiOTExODEzNjA5NjkzZGQ4ZDkxOTY4YWMwNjgxOQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-03-01T05:51:08Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-03-01T05:51:08Z"}, "message": "Fix liveness analysis in lra for spilled-into hard regs\n\n2018-03-01  Tom de Vries  <tom@codesourcery.com>\n\n\tPR rtl-optimization/83327\n\t* lra-int.h (hard_regs_spilled_into): Declare.\n\t* lra.c (hard_regs_spilled_into): Define.\n\t(init_reg_info): Init hard_regs_spilled_into.\n\t* lra-spills.c (assign_spill_hard_regs): Update hard_regs_spilled_into.\n\t* lra-lives.c (make_hard_regno_born, make_hard_regno_dead)\n\t(process_bb_lives): Handle hard_regs_spilled_into.\n\t(lra_create_live_ranges_1): Before doing liveness propagation, clear\n\tregs in all_hard_regs_bitmap if set in hard_regs_spilled_into.\n\nFrom-SVN: r258093", "tree": {"sha": "d07c5b1a1c94714f4b24f7a5d327eefc320c6bf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d07c5b1a1c94714f4b24f7a5d327eefc320c6bf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54178a01107b911813609693dd8d91968ac06819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54178a01107b911813609693dd8d91968ac06819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54178a01107b911813609693dd8d91968ac06819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54178a01107b911813609693dd8d91968ac06819/comments", "author": null, "committer": null, "parents": [{"sha": "7540ea866ad77094e6f77023558378ce9b196fd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7540ea866ad77094e6f77023558378ce9b196fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7540ea866ad77094e6f77023558378ce9b196fd5"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "0a07f4b0a92151d9136fae096dee59451951a94e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54178a01107b911813609693dd8d91968ac06819/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54178a01107b911813609693dd8d91968ac06819/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54178a01107b911813609693dd8d91968ac06819", "patch": "@@ -1,3 +1,15 @@\n+2018-03-01  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR rtl-optimization/83327\n+\t* lra-int.h (hard_regs_spilled_into): Declare.\n+\t* lra.c (hard_regs_spilled_into): Define.\n+\t(init_reg_info): Init hard_regs_spilled_into.\n+\t* lra-spills.c (assign_spill_hard_regs): Update hard_regs_spilled_into.\n+\t* lra-lives.c (make_hard_regno_born, make_hard_regno_dead)\n+\t(process_bb_lives): Handle hard_regs_spilled_into.\n+\t(lra_create_live_ranges_1): Before doing liveness propagation, clear\n+\tregs in all_hard_regs_bitmap if set in hard_regs_spilled_into.\n+\n 2018-02-28  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config.gcc (powerpc-ibm-aix7.1.*): New stanza."}, {"sha": "509e29ec4b864f20ff9c114d5cadc17d3cf5997c", "filename": "gcc/lra-int.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54178a01107b911813609693dd8d91968ac06819/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54178a01107b911813609693dd8d91968ac06819/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=54178a01107b911813609693dd8d91968ac06819", "patch": "@@ -122,6 +122,8 @@ struct lra_reg\n /* References to the common info about each register.  */\n extern struct lra_reg *lra_reg_info;\n \n+extern HARD_REG_SET hard_regs_spilled_into;\n+\n /* Static info about each insn operand (common for all insns with the\n    same ICODE).\t Warning: if the structure definition is changed, the\n    initializer for debug_operand_data in lra.c should be changed"}, {"sha": "588bc09cb8e61b2d33320990c7efa3d8ae8672a0", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54178a01107b911813609693dd8d91968ac06819/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54178a01107b911813609693dd8d91968ac06819/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=54178a01107b911813609693dd8d91968ac06819", "patch": "@@ -246,7 +246,7 @@ make_hard_regno_born (int regno, bool check_pic_pseudo_p ATTRIBUTE_UNUSED)\n \t|| i != REGNO (pic_offset_table_rtx))\n #endif\n       SET_HARD_REG_BIT (lra_reg_info[i].conflict_hard_regs, regno);\n-  if (fixed_regs[regno])\n+  if (fixed_regs[regno] || TEST_HARD_REG_BIT (hard_regs_spilled_into, regno))\n     bitmap_set_bit (bb_gen_pseudos, regno);\n }\n \n@@ -260,7 +260,7 @@ make_hard_regno_dead (int regno)\n     return;\n   sparseset_set_bit (start_dying, regno);\n   CLEAR_HARD_REG_BIT (hard_regs_live, regno);\n-  if (fixed_regs[regno])\n+  if (fixed_regs[regno] || TEST_HARD_REG_BIT (hard_regs_spilled_into, regno))\n     {\n       bitmap_clear_bit (bb_gen_pseudos, regno);\n       bitmap_set_bit (bb_killed_pseudos, regno);\n@@ -1062,6 +1062,25 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \tcheck_pseudos_live_through_calls (j, last_call_used_reg_set);\n     }\n \n+  for (i = 0; i < FIRST_PSEUDO_REGISTER; ++i)\n+    {\n+      if (!TEST_HARD_REG_BIT (hard_regs_live, i))\n+\tcontinue;\n+\n+      if (!TEST_HARD_REG_BIT (hard_regs_spilled_into, i))\n+\tcontinue;\n+\n+      if (bitmap_bit_p (df_get_live_in (bb), i))\n+\tcontinue;\n+\n+      live_change_p = true;\n+      if (lra_dump_file)\n+\tfprintf (lra_dump_file,\n+\t\t \"  hard reg r%d is added to live at bb%d start\\n\", i,\n+\t\t bb->index);\n+      bitmap_set_bit (df_get_live_in (bb), i);\n+    }\n+\n   if (need_curr_point_incr)\n     next_program_point (curr_point, freq);\n \n@@ -1331,6 +1350,11 @@ lra_create_live_ranges_1 (bool all_p, bool dead_insn_p)\n \t}\n       /* As we did not change CFG since LRA start we can use\n \t DF-infrastructure solver to solve live data flow problem.  */\n+      for (int i = 0; i < FIRST_PSEUDO_REGISTER; ++i)\n+\t{\n+\t  if (TEST_HARD_REG_BIT (hard_regs_spilled_into, i))\n+\t    bitmap_clear_bit (&all_hard_regs_bitmap, i);\n+\t}\n       df_simple_dataflow\n \t(DF_BACKWARD, NULL, live_con_fun_0, live_con_fun_n,\n \t live_trans_fun, &all_blocks,"}, {"sha": "33caf9f4564953c9e0bdc78ee00fcfbfa7aa2ed1", "filename": "gcc/lra-spills.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54178a01107b911813609693dd8d91968ac06819/gcc%2Flra-spills.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54178a01107b911813609693dd8d91968ac06819/gcc%2Flra-spills.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-spills.c?ref=54178a01107b911813609693dd8d91968ac06819", "patch": "@@ -294,6 +294,8 @@ assign_spill_hard_regs (int *pseudo_regnos, int n)\n \t}\n       if (lra_dump_file != NULL)\n \tfprintf (lra_dump_file, \"  Spill r%d into hr%d\\n\", regno, hard_regno);\n+      add_to_hard_reg_set (&hard_regs_spilled_into,\n+\t\t\t   lra_reg_info[regno].biggest_mode, hard_regno);\n       /* Update reserved_hard_regs.  */\n       for (r = lra_reg_info[regno].live_ranges; r != NULL; r = r->next)\n \tfor (p = r->start; p <= r->finish; p++)"}, {"sha": "a64d8f1a3011eca2686fb210bcde77e658f3daee", "filename": "gcc/lra.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54178a01107b911813609693dd8d91968ac06819/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54178a01107b911813609693dd8d91968ac06819/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=54178a01107b911813609693dd8d91968ac06819", "patch": "@@ -1289,6 +1289,8 @@ static int reg_info_size;\n /* Common info about each register.  */\n struct lra_reg *lra_reg_info;\n \n+HARD_REG_SET hard_regs_spilled_into;\n+\n /* Last register value.\t */\n static int last_reg_value;\n \n@@ -1338,6 +1340,7 @@ init_reg_info (void)\n   for (i = 0; i < reg_info_size; i++)\n     initialize_lra_reg_info_element (i);\n   copy_vec.truncate (0);\n+  CLEAR_HARD_REG_SET (hard_regs_spilled_into);\n }\n \n "}]}