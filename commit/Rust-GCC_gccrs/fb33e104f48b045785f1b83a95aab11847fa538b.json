{"sha": "fb33e104f48b045785f1b83a95aab11847fa538b", "node_id": "C_kwDOANBUbNoAKGZiMzNlMTA0ZjQ4YjA0NTc4NWYxYjgzYTk1YWFiMTE4NDdmYTUzOGI", "commit": {"author": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-12-13T08:25:55Z"}, "committer": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-12-16T02:34:02Z"}, "message": "Fix intrin name in Intel CMPccXADD\n\nWe usually use only one \"_\" but not two \"__\" as prefix in intrin.\n\nThis patch aims to fix the intrin name for CMPccXADD.\n\ngcc/ChangeLog:\n\n\t* config/i386/cmpccxaddintrin.h\n\t(__cmpccxadd_epi32): Rename to _cmpccxadd_epi32.\n\t(__cmpccxadd_epi64): Rename to _cmpccxadd_epi64.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/cmpccxadd-1.c: Fix intrin name.\n\t* gcc.target/i386/cmpccxadd-2.c: Ditto.", "tree": {"sha": "b390b38abd58225a0202a960b779352e11bdb13f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b390b38abd58225a0202a960b779352e11bdb13f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb33e104f48b045785f1b83a95aab11847fa538b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb33e104f48b045785f1b83a95aab11847fa538b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb33e104f48b045785f1b83a95aab11847fa538b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb33e104f48b045785f1b83a95aab11847fa538b/comments", "author": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8f767b2c00ac9c1634c7fee59372b1e1e6d5bc0"}], "stats": {"total": 136, "additions": 68, "deletions": 68}, "files": [{"sha": "11fce1f5e5046332901f71435a95fe77409f52d8", "filename": "gcc/config/i386/cmpccxaddintrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb33e104f48b045785f1b83a95aab11847fa538b/gcc%2Fconfig%2Fi386%2Fcmpccxaddintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb33e104f48b045785f1b83a95aab11847fa538b/gcc%2Fconfig%2Fi386%2Fcmpccxaddintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcmpccxaddintrin.h?ref=fb33e104f48b045785f1b83a95aab11847fa538b", "patch": "@@ -58,23 +58,23 @@ typedef enum {\n #ifdef __OPTIMIZE__\n extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__cmpccxadd_epi32 (int *__A, int __B, int __C, const _CMPCCX_ENUM __D)\n+_cmpccxadd_epi32 (int *__A, int __B, int __C, const _CMPCCX_ENUM __D)\n {\n   return __builtin_ia32_cmpccxadd (__A, __B, __C, __D);\n }\n \n extern __inline long long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__cmpccxadd_epi64 (long long *__A, long long __B, long long __C,\n+_cmpccxadd_epi64 (long long *__A, long long __B, long long __C,\n \t\t   const _CMPCCX_ENUM __D)\n {\n   return __builtin_ia32_cmpccxadd64 (__A, __B, __C, __D);\n }\n #else\n-#define __cmpccxadd_epi32(A,B,C,D) \\\n+#define _cmpccxadd_epi32(A,B,C,D) \\\n   __builtin_ia32_cmpccxadd ((int *) (A), (int) (B), (int) (C), \\\n \t\t\t    (_CMPCCX_ENUM) (D))\n-#define __cmpccxadd_epi64(A,B,C,D) \\\n+#define _cmpccxadd_epi64(A,B,C,D) \\\n   __builtin_ia32_cmpccxadd64 ((long long *) (A), (long long) (B), \\\n \t\t\t      (long long) (C), (_CMPCCX_ENUM) (D))\n #endif"}, {"sha": "537b79b8d2d4cd1e1c34f6869ad425d447e928a0", "filename": "gcc/testsuite/gcc.target/i386/cmpccxadd-1.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb33e104f48b045785f1b83a95aab11847fa538b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb33e104f48b045785f1b83a95aab11847fa538b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-1.c?ref=fb33e104f48b045785f1b83a95aab11847fa538b", "patch": "@@ -26,36 +26,36 @@ long long e, f;\n void extern\n cmpccxadd_test(void)\n {\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_O);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_O);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NO);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NO);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_B);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_B);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NB);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NB);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_Z);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_Z);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NZ);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NZ);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_BE);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_BE);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NBE);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NBE);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_S);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_S);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NS);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NS);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_P);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_P);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NP);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NP);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_L);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_L);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NL);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NL);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_LE);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_LE);\n-  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NLE);\n-  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NLE);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_O);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_O);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_NO);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_NO);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_B);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_B);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_NB);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_NB);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_Z);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_Z);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_NZ);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_NZ);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_BE);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_BE);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_NBE);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_NBE);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_S);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_S);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_NS);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_NS);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_P);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_P);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_NP);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_NP);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_L);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_L);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_NL);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_NL);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_LE);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_LE);\n+  b = _cmpccxadd_epi32 (a, b, c, _CMPCCX_NLE);\n+  e = _cmpccxadd_epi64 (d, e, f, _CMPCCX_NLE);\n }"}, {"sha": "5e897b12c66e0b510cf6e262fffcd22b1b83ca01", "filename": "gcc/testsuite/gcc.target/i386/cmpccxadd-2.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb33e104f48b045785f1b83a95aab11847fa538b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb33e104f48b045785f1b83a95aab11847fa538b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-2.c?ref=fb33e104f48b045785f1b83a95aab11847fa538b", "patch": "@@ -92,39 +92,39 @@ main()\n     _srcdest2_64[i] = srcdest1_64[i];\n   }\n \n-  res[0] = __cmpccxadd_epi32 (&srcdest1[0], srcdest2[0], src3[0], _CMPCCX_O);\n-  res[1] = __cmpccxadd_epi32 (&srcdest1[1], srcdest2[1], src3[1], _CMPCCX_NO);\n-  res[2] = __cmpccxadd_epi32 (&srcdest1[2], srcdest2[2], src3[2], _CMPCCX_B);\n-  res[3] = __cmpccxadd_epi32 (&srcdest1[3], srcdest2[3], src3[3], _CMPCCX_NB);\n-  res[4] = __cmpccxadd_epi32 (&srcdest1[4], srcdest2[4], src3[4], _CMPCCX_Z);\n-  res[5] = __cmpccxadd_epi32 (&srcdest1[5], srcdest2[5], src3[5], _CMPCCX_NZ);\n-  res[6] = __cmpccxadd_epi32 (&srcdest1[6], srcdest2[6], src3[6], _CMPCCX_BE);\n-  res[7] = __cmpccxadd_epi32 (&srcdest1[7], srcdest2[7], src3[7], _CMPCCX_NBE);\n-  res[8] = __cmpccxadd_epi32 (&srcdest1[8], srcdest2[8], src3[8], _CMPCCX_S);\n-  res[9] = __cmpccxadd_epi32 (&srcdest1[9], srcdest2[9], src3[9], _CMPCCX_NS);\n-  res[10] = __cmpccxadd_epi32 (&srcdest1[10], srcdest2[10], src3[10], _CMPCCX_P);\n-  res[11] = __cmpccxadd_epi32 (&srcdest1[11], srcdest2[11], src3[11], _CMPCCX_NP);\n-  res[12] = __cmpccxadd_epi32 (&srcdest1[12], srcdest2[12], src3[12], _CMPCCX_L);\n-  res[13] = __cmpccxadd_epi32 (&srcdest1[13], srcdest2[13], src3[13], _CMPCCX_NL);\n-  res[14] = __cmpccxadd_epi32 (&srcdest1[14], srcdest2[14], src3[14], _CMPCCX_LE);\n-  res[15] = __cmpccxadd_epi32 (&srcdest1[15], srcdest2[15], src3[15], _CMPCCX_NLE);\n+  res[0] = _cmpccxadd_epi32 (&srcdest1[0], srcdest2[0], src3[0], _CMPCCX_O);\n+  res[1] = _cmpccxadd_epi32 (&srcdest1[1], srcdest2[1], src3[1], _CMPCCX_NO);\n+  res[2] = _cmpccxadd_epi32 (&srcdest1[2], srcdest2[2], src3[2], _CMPCCX_B);\n+  res[3] = _cmpccxadd_epi32 (&srcdest1[3], srcdest2[3], src3[3], _CMPCCX_NB);\n+  res[4] = _cmpccxadd_epi32 (&srcdest1[4], srcdest2[4], src3[4], _CMPCCX_Z);\n+  res[5] = _cmpccxadd_epi32 (&srcdest1[5], srcdest2[5], src3[5], _CMPCCX_NZ);\n+  res[6] = _cmpccxadd_epi32 (&srcdest1[6], srcdest2[6], src3[6], _CMPCCX_BE);\n+  res[7] = _cmpccxadd_epi32 (&srcdest1[7], srcdest2[7], src3[7], _CMPCCX_NBE);\n+  res[8] = _cmpccxadd_epi32 (&srcdest1[8], srcdest2[8], src3[8], _CMPCCX_S);\n+  res[9] = _cmpccxadd_epi32 (&srcdest1[9], srcdest2[9], src3[9], _CMPCCX_NS);\n+  res[10] = _cmpccxadd_epi32 (&srcdest1[10], srcdest2[10], src3[10], _CMPCCX_P);\n+  res[11] = _cmpccxadd_epi32 (&srcdest1[11], srcdest2[11], src3[11], _CMPCCX_NP);\n+  res[12] = _cmpccxadd_epi32 (&srcdest1[12], srcdest2[12], src3[12], _CMPCCX_L);\n+  res[13] = _cmpccxadd_epi32 (&srcdest1[13], srcdest2[13], src3[13], _CMPCCX_NL);\n+  res[14] = _cmpccxadd_epi32 (&srcdest1[14], srcdest2[14], src3[14], _CMPCCX_LE);\n+  res[15] = _cmpccxadd_epi32 (&srcdest1[15], srcdest2[15], src3[15], _CMPCCX_NLE);\n \n-  res_64[0] = __cmpccxadd_epi64 (&srcdest1_64[0], srcdest2_64[0], src3_64[0], _CMPCCX_O);\n-  res_64[1] = __cmpccxadd_epi64 (&srcdest1_64[1], srcdest2_64[1], src3_64[1], _CMPCCX_NO);\n-  res_64[2] = __cmpccxadd_epi64 (&srcdest1_64[2], srcdest2_64[2], src3_64[2], _CMPCCX_B);\n-  res_64[3] = __cmpccxadd_epi64 (&srcdest1_64[3], srcdest2_64[3], src3_64[3], _CMPCCX_NB);\n-  res_64[4] = __cmpccxadd_epi64 (&srcdest1_64[4], srcdest2_64[4], src3_64[4], _CMPCCX_Z);\n-  res_64[5] = __cmpccxadd_epi64 (&srcdest1_64[5], srcdest2_64[5], src3_64[5], _CMPCCX_NZ);\n-  res_64[6] = __cmpccxadd_epi64 (&srcdest1_64[6], srcdest2_64[6], src3_64[6], _CMPCCX_BE);\n-  res_64[7] = __cmpccxadd_epi64 (&srcdest1_64[7], srcdest2_64[7], src3_64[7], _CMPCCX_NBE);\n-  res_64[8] = __cmpccxadd_epi64 (&srcdest1_64[8], srcdest2_64[8], src3_64[8], _CMPCCX_S);\n-  res_64[9] = __cmpccxadd_epi64 (&srcdest1_64[9], srcdest2_64[9], src3_64[9], _CMPCCX_NS);\n-  res_64[10] = __cmpccxadd_epi64 (&srcdest1_64[10], srcdest2_64[10], src3_64[10], _CMPCCX_P);\n-  res_64[11] = __cmpccxadd_epi64 (&srcdest1_64[11], srcdest2_64[11], src3_64[11], _CMPCCX_NP);\n-  res_64[12] = __cmpccxadd_epi64 (&srcdest1_64[12], srcdest2_64[12], src3_64[12], _CMPCCX_L);\n-  res_64[13] = __cmpccxadd_epi64 (&srcdest1_64[13], srcdest2_64[13], src3_64[13], _CMPCCX_NL);\n-  res_64[14] = __cmpccxadd_epi64 (&srcdest1_64[14], srcdest2_64[14], src3_64[14], _CMPCCX_LE);\n-  res_64[15] = __cmpccxadd_epi64 (&srcdest1_64[15], srcdest2_64[15], src3_64[15], _CMPCCX_NLE);\n+  res_64[0] = _cmpccxadd_epi64 (&srcdest1_64[0], srcdest2_64[0], src3_64[0], _CMPCCX_O);\n+  res_64[1] = _cmpccxadd_epi64 (&srcdest1_64[1], srcdest2_64[1], src3_64[1], _CMPCCX_NO);\n+  res_64[2] = _cmpccxadd_epi64 (&srcdest1_64[2], srcdest2_64[2], src3_64[2], _CMPCCX_B);\n+  res_64[3] = _cmpccxadd_epi64 (&srcdest1_64[3], srcdest2_64[3], src3_64[3], _CMPCCX_NB);\n+  res_64[4] = _cmpccxadd_epi64 (&srcdest1_64[4], srcdest2_64[4], src3_64[4], _CMPCCX_Z);\n+  res_64[5] = _cmpccxadd_epi64 (&srcdest1_64[5], srcdest2_64[5], src3_64[5], _CMPCCX_NZ);\n+  res_64[6] = _cmpccxadd_epi64 (&srcdest1_64[6], srcdest2_64[6], src3_64[6], _CMPCCX_BE);\n+  res_64[7] = _cmpccxadd_epi64 (&srcdest1_64[7], srcdest2_64[7], src3_64[7], _CMPCCX_NBE);\n+  res_64[8] = _cmpccxadd_epi64 (&srcdest1_64[8], srcdest2_64[8], src3_64[8], _CMPCCX_S);\n+  res_64[9] = _cmpccxadd_epi64 (&srcdest1_64[9], srcdest2_64[9], src3_64[9], _CMPCCX_NS);\n+  res_64[10] = _cmpccxadd_epi64 (&srcdest1_64[10], srcdest2_64[10], src3_64[10], _CMPCCX_P);\n+  res_64[11] = _cmpccxadd_epi64 (&srcdest1_64[11], srcdest2_64[11], src3_64[11], _CMPCCX_NP);\n+  res_64[12] = _cmpccxadd_epi64 (&srcdest1_64[12], srcdest2_64[12], src3_64[12], _CMPCCX_L);\n+  res_64[13] = _cmpccxadd_epi64 (&srcdest1_64[13], srcdest2_64[13], src3_64[13], _CMPCCX_NL);\n+  res_64[14] = _cmpccxadd_epi64 (&srcdest1_64[14], srcdest2_64[14], src3_64[14], _CMPCCX_LE);\n+  res_64[15] = _cmpccxadd_epi64 (&srcdest1_64[15], srcdest2_64[15], src3_64[15], _CMPCCX_NLE);\n \n   for (int i = 0; i < 16; i++)\n   {"}]}