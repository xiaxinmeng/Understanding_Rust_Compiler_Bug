{"sha": "f644a018e3452a41cb4ce49cb47179845a63b546", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0NGEwMThlMzQ1MmE0MWNiNGNlNDljYjQ3MTc5ODQ1YTYzYjU0Ng==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2013-12-10T06:31:41Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2013-12-10T06:31:41Z"}, "message": "re PR tree-optimization/41488 (IVOpts cannot coalesce multiple induction variables)\n\n\n\tPR tree-optimization/41488\n\t* tree-ssa-loop-ivopts.c (add_old_iv_candidates): Don't add cand\n\tfor PEELED_CHREC kind IV.\n\t* tree-scalar-evolution.c: Include necessary header files.\n\t(peeled_chrec_map, simplify_peeled_chrec): New.\n\t(analyze_evolution_in_loop): New static variable.\n\tCall simplify_peeled_chrec.\n\t(scev_initialize): Initialize peeled_chrec_map.\n\t(scev_reset, scev_finalize): Reset and release peeled_chrec_map.\n\n\tPR tree-optimization/41488\n\t* gcc.dg/tree-ssa/scev-7.c: New test.\n\t* gcc.dg/pr41488.c: New test.\n\nFrom-SVN: r205848", "tree": {"sha": "d09b43ffc879c38e2b20679506d9a4707fdd5ea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d09b43ffc879c38e2b20679506d9a4707fdd5ea0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f644a018e3452a41cb4ce49cb47179845a63b546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f644a018e3452a41cb4ce49cb47179845a63b546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f644a018e3452a41cb4ce49cb47179845a63b546", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f644a018e3452a41cb4ce49cb47179845a63b546/comments", "author": null, "committer": null, "parents": [{"sha": "3a4efce7c246b190ef35a8ce1f108f572274521f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4efce7c246b190ef35a8ce1f108f572274521f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4efce7c246b190ef35a8ce1f108f572274521f"}], "stats": {"total": 162, "additions": 156, "deletions": 6}, "files": [{"sha": "27c9cd710111e40696d860b46aac047a48b9e844", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f644a018e3452a41cb4ce49cb47179845a63b546", "patch": "@@ -1,3 +1,15 @@\n+2013-12-10  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/41488\n+\t* tree-ssa-loop-ivopts.c (add_old_iv_candidates): Don't add cand\n+\tfor PEELED_CHREC kind IV.\n+\t* tree-scalar-evolution.c: Include necessary header files.\n+\t(peeled_chrec_map, simplify_peeled_chrec): New.\n+\t(analyze_evolution_in_loop): New static variable.\n+\tCall simplify_peeled_chrec.\n+\t(scev_initialize): Initialize peeled_chrec_map.\n+\t(scev_reset, scev_finalize): Reset and release peeled_chrec_map.\n+\n 2013-12-09  Andrew Pinski  <apinski@cavium.com>\n \n \t* config/aarch64/t-aarch64 (MULTILIB_OPTIONS): Fix definition so"}, {"sha": "3b1ca7844e6e074fa4d95bf7c2c85a49ab54acd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f644a018e3452a41cb4ce49cb47179845a63b546", "patch": "@@ -1,3 +1,9 @@\n+2013-12-10  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/41488\n+\t* gcc.dg/tree-ssa/scev-7.c: New test.\n+\t* gcc.dg/pr41488.c: New test.\n+\n 2013-12-09  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/55715"}, {"sha": "c4bc42832b3676f7bcd216e229ea575811ffad81", "filename": "gcc/testsuite/gcc.dg/pr41488.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c?ref=f644a018e3452a41cb4ce49cb47179845a63b546", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-sccp-scev\" } */\n+\n+struct struct_t\n+{\n+  int* data;\n+};\n+\n+void foo (struct struct_t* sp, int start, int end)\n+{\n+  int i;\n+\n+  for (i = 0; i+start < end; i++)\n+    sp->data[i+start] = 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC\" 1 \"sccp\" } } */\n+/* { dg-final { cleanup-tree-dump \"sccp\" } } */"}, {"sha": "d6ceb208258cdec32da17f6519c10c10b6a6a066", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c?ref=f644a018e3452a41cb4ce49cb47179845a63b546", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-sccp-scev\" } */\n+\n+struct struct_t\n+{\n+  int* data;\n+};\n+\n+void foo (struct struct_t* sp, int start, int end)\n+{\n+  int i;\n+\n+  for (i = 1000; i+start > end; i--)\n+    sp->data[i+start] = 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC\" 1 \"sccp\" } } */\n+/* { dg-final { cleanup-tree-dump \"sccp\" } } */"}, {"sha": "f114653a5fa626e32cedc035a518e6ad4e4b7b29", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 89, "deletions": 1, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=f644a018e3452a41cb4ce49cb47179845a63b546", "patch": "@@ -280,6 +280,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\"\n+#include \"pointer-set.h\"\n+#include \"tree-affine.h\"\n #include \"tree-scalar-evolution.h\"\n #include \"dumpfile.h\"\n #include \"params.h\"\n@@ -1380,6 +1382,66 @@ follow_ssa_edge (struct loop *loop, gimple def, gimple halting_phi,\n }\n \n \f\n+/* Pointer map used when simplifying PEELED_CHREC into POLYNOMIAL_CHREC.  */\n+static pointer_map_t *peeled_chrec_map;\n+\n+/* Simplify PEELED_CHREC represented by (init_cond, arg) in LOOP.\n+   Handle below case and return the corresponding POLYNOMIAL_CHREC:\n+\n+   # i_17 = PHI <i_13(5), 0(3)>\n+   # _20 = PHI <_5(5), start_4(D)(3)>\n+   ...\n+   i_13 = i_17 + 1;\n+   _5 = start_4(D) + i_13;\n+\n+   Though variable _20 appears as a PEELED_CHREC in the form of\n+   (start_4, _5)_LOOP, it's a POLYNOMIAL_CHREC like {start_4, 1}_LOOP.\n+\n+   See PR41488.  */\n+\n+static tree\n+simplify_peeled_chrec (struct loop *loop, tree arg, tree init_cond)\n+{\n+  aff_tree aff1, aff2;\n+  tree ev, left, right, type, step_val;\n+\n+  ev = instantiate_parameters (loop, analyze_scalar_evolution (loop, arg));\n+  if (ev == NULL_TREE || TREE_CODE (ev) != POLYNOMIAL_CHREC)\n+    return chrec_dont_know;\n+\n+  left = CHREC_LEFT (ev);\n+  right = CHREC_RIGHT (ev);\n+  type = TREE_TYPE (left);\n+  step_val = chrec_fold_plus (type, init_cond, right);\n+\n+  /* Transform (init, {left, right}_LOOP)_LOOP to {init, right}_LOOP\n+     if \"left\" equals to \"init + right\".  */\n+  if (operand_equal_p (left, step_val, 0))\n+    {\n+      if (dump_file && (dump_flags & TDF_SCEV))\n+\tfprintf (dump_file, \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC.\\n\");\n+\n+      return build_polynomial_chrec (loop->num, init_cond, right);\n+    }\n+\n+  /* Try harder to check if they are equal.  */\n+  tree_to_aff_combination_expand (left, type, &aff1, &peeled_chrec_map);\n+  tree_to_aff_combination_expand (step_val, type, &aff2, &peeled_chrec_map);\n+  aff_combination_scale (&aff2, double_int_minus_one);\n+  aff_combination_add (&aff1, &aff2);\n+  left = fold_convert (type, aff_combination_to_tree (&aff1));\n+\n+  /* Transform (init, {left, right}_LOOP)_LOOP to {init, right}_LOOP\n+     if \"left\" equals to \"init + right\".  */\n+  if (operand_equal_p (left, integer_zero_node, 0))\n+    {\n+      if (dump_file && (dump_flags & TDF_SCEV))\n+\tfprintf (dump_file, \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC.\\n\");\n+\n+      return build_polynomial_chrec (loop->num, init_cond, right);\n+    }\n+  return chrec_dont_know;\n+}\n \n /* Given a LOOP_PHI_NODE, this function determines the evolution\n    function from LOOP_PHI_NODE to LOOP_PHI_NODE in the loop.  */\n@@ -1392,6 +1454,7 @@ analyze_evolution_in_loop (gimple loop_phi_node,\n   tree evolution_function = chrec_not_analyzed_yet;\n   struct loop *loop = loop_containing_stmt (loop_phi_node);\n   basic_block bb;\n+  static bool simplify_peeled_chrec_p = true;\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n@@ -1442,7 +1505,19 @@ analyze_evolution_in_loop (gimple loop_phi_node,\n \t all the other iterations it has the value of ARG.\n \t For the moment, PEELED_CHREC nodes are not built.  */\n       if (res != t_true)\n-\tev_fn = chrec_dont_know;\n+\t{\n+\t  ev_fn = chrec_dont_know;\n+\t  /* Try to recognize POLYNOMIAL_CHREC which appears in\n+\t     the form of PEELED_CHREC, but guard the process with\n+\t     a bool variable to keep the analyzer from infinite\n+\t     recurrence for real PEELED_RECs.  */\n+\t  if (simplify_peeled_chrec_p && TREE_CODE (arg) == SSA_NAME)\n+\t    {\n+\t      simplify_peeled_chrec_p = false;\n+\t      ev_fn = simplify_peeled_chrec (loop, arg, init_cond);\n+\t      simplify_peeled_chrec_p = true;\n+\t    }\n+\t}\n \n       /* When there are multiple back edges of the loop (which in fact never\n \t happens currently, but nevertheless), merge their evolutions.  */\n@@ -3086,6 +3161,8 @@ scev_initialize (void)\n \n   initialize_scalar_evolutions_analyzer ();\n \n+  peeled_chrec_map = pointer_map_create ();\n+\n   FOR_EACH_LOOP (loop, 0)\n     {\n       loop->nb_iterations = NULL_TREE;\n@@ -3122,6 +3199,12 @@ scev_reset (void)\n \n   scev_reset_htab ();\n \n+  if (peeled_chrec_map)\n+    {\n+      pointer_map_destroy (peeled_chrec_map);\n+      peeled_chrec_map = NULL;\n+    }\n+\n   if (!current_loops)\n     return;\n \n@@ -3209,6 +3292,11 @@ scev_finalize (void)\n     return;\n   htab_delete (scalar_evolution_info);\n   scalar_evolution_info = NULL;\n+  if (peeled_chrec_map)\n+    {\n+      pointer_map_destroy (peeled_chrec_map);\n+      peeled_chrec_map = NULL;\n+    }\n }\n \n /* Returns true if the expression EXPR is considered to be too expensive"}, {"sha": "24c9ceca8f4e5c26fc83c1fa9e6bb47865e69c41", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f644a018e3452a41cb4ce49cb47179845a63b546/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=f644a018e3452a41cb4ce49cb47179845a63b546", "patch": "@@ -2526,11 +2526,19 @@ add_old_iv_candidates (struct ivopts_data *data, struct iv *iv)\n       /* Additionally record the possibility of leaving the original iv\n \t untouched.  */\n       def = PHI_ARG_DEF_FROM_EDGE (phi, loop_latch_edge (data->current_loop));\n-      cand = add_candidate_1 (data,\n-\t\t\t      iv->base, iv->step, true, IP_ORIGINAL, NULL,\n-\t\t\t      SSA_NAME_DEF_STMT (def));\n-      cand->var_before = iv->ssa_name;\n-      cand->var_after = def;\n+      /* Don't add candidate if it's from another PHI node because\n+\t  it's an affine iv appearing in the form of PEELED_CHREC.  */\n+      phi = SSA_NAME_DEF_STMT (def);\n+      if (gimple_code (phi) != GIMPLE_PHI)\n+\t{\n+\t  cand = add_candidate_1 (data,\n+\t\t\t\t  iv->base, iv->step, true, IP_ORIGINAL, NULL,\n+\t\t\t\t  SSA_NAME_DEF_STMT (def));\n+\t  cand->var_before = iv->ssa_name;\n+\t  cand->var_after = def;\n+\t}\n+      else\n+\tgcc_assert (gimple_bb (phi) == data->current_loop->header);\n     }\n }\n "}]}