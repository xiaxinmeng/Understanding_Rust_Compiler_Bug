{"sha": "29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmMGU5NTVjOTdkYTAwMmI1YWRiNGU4YzlkZmQyZWE5NzA5ZTIwNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-08-02T17:01:46Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-08-02T17:38:19Z"}, "message": "x86: Update piecewise move and store\n\nWe can use TImode/OImode/XImode integers for piecewise move and store.\n\n1. Define MAX_MOVE_MAX to 64, which is the constant maximum number of\nbytes that a single instruction can move quickly between memory and\nregisters or between two memory locations.\n2. Define MOVE_MAX to the maximum number of bytes we can move from memory\nto memory in one reasonably fast instruction.  The difference between\nMAX_MOVE_MAX and MOVE_MAX is that MAX_MOVE_MAX must be a constant,\nindependent of compiler options, since it is used in reload.h to define\nstruct target_reload and MOVE_MAX can vary, depending on compiler options.\n3. When vector register is used for piecewise move and store, we don't\nincrease stack_alignment_needed since vector register spill isn't\nrequired for piecewise move and store.  Since stack_realign_needed is\nset to true by checking stack_alignment_estimated set by pseudo vector\nregister usage, we also need to check stack_realign_needed to eliminate\nframe pointer.\n\ngcc/\n\n\t* config/i386/i386.c (ix86_finalize_stack_frame_flags): Also\n\tcheck stack_realign_needed for stack realignment.\n\t(ix86_legitimate_constant_p): Always allow CONST_WIDE_INT smaller\n\tthan the largest integer supported by vector register.\n\t* config/i386/i386.h (MAX_MOVE_MAX): New.  Set to 64.\n\t(MOVE_MAX): Set to bytes of the largest integer supported by\n\tvector register.\n\t(STORE_MAX_PIECES): New.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/pr90773-1.c: Adjust to expect movq for 32-bit.\n\t* gcc.target/i386/pr90773-4.c: Also run for 32-bit.\n\t* gcc.target/i386/pr90773-15.c: Likewise.\n\t* gcc.target/i386/pr90773-16.c: Likewise.\n\t* gcc.target/i386/pr90773-17.c: Likewise.\n\t* gcc.target/i386/pr90773-24.c: Likewise.\n\t* gcc.target/i386/pr90773-25.c: Likewise.\n\t* gcc.target/i386/pr100865-1.c: Likewise.\n\t* gcc.target/i386/pr100865-2.c: Likewise.\n\t* gcc.target/i386/pr100865-3.c: Likewise.\n\t* gcc.target/i386/pr90773-14.c: Also run for 32-bit and expect\n\tXMM movd to store 4 bytes.\n\t* gcc.target/i386/pr100865-4a.c: Also run for 32-bit and expect\n\tYMM registers.\n\t* gcc.target/i386/pr100865-4b.c: Likewise.\n\t* gcc.target/i386/pr100865-10a.c: Expect YMM registers.\n\t* gcc.target/i386/pr100865-10b.c: Likewise.", "tree": {"sha": "739aa72e30ea996caad29089e8813e39bd0fabc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/739aa72e30ea996caad29089e8813e39bd0fabc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f4c3943f795fda33df648d2196b678bada1ba81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4c3943f795fda33df648d2196b678bada1ba81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f4c3943f795fda33df648d2196b678bada1ba81"}], "stats": {"total": 130, "additions": 79, "deletions": 51}, "files": [{"sha": "842eb0e6786b45c6e38e203f3f8fa74e36fca0e1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -7953,8 +7953,17 @@ ix86_finalize_stack_frame_flags (void)\n      assumed stack realignment might be needed or -fno-omit-frame-pointer\n      is used, but in the end nothing that needed the stack alignment had\n      been spilled nor stack access, clear frame_pointer_needed and say we\n-     don't need stack realignment.  */\n-  if ((stack_realign || (!flag_omit_frame_pointer && optimize))\n+     don't need stack realignment.\n+\n+     When vector register is used for piecewise move and store, we don't\n+     increase stack_alignment_needed as there is no register spill for\n+     piecewise move and store.  Since stack_realign_needed is set to true\n+     by checking stack_alignment_estimated which is updated by pseudo\n+     vector register usage, we also need to check stack_realign_needed to\n+     eliminate frame pointer.  */\n+  if ((stack_realign\n+       || (!flag_omit_frame_pointer && optimize)\n+       || crtl->stack_realign_needed)\n       && frame_pointer_needed\n       && crtl->is_leaf\n       && crtl->sp_is_unchanging\n@@ -10418,7 +10427,13 @@ ix86_legitimate_constant_p (machine_mode mode, rtx x)\n \t  /* FALLTHRU */\n \tcase E_OImode:\n \tcase E_XImode:\n-\t  if (!standard_sse_constant_p (x, mode))\n+\t  if (!standard_sse_constant_p (x, mode)\n+\t      && GET_MODE_SIZE (TARGET_AVX512F\n+\t\t\t\t? XImode\n+\t\t\t\t: (TARGET_AVX\n+\t\t\t\t   ? OImode\n+\t\t\t\t   : (TARGET_SSE2\n+\t\t\t\t      ? TImode : DImode))) < GET_MODE_SIZE (mode))\n \t    return false;\n \tdefault:\n \t  break;"}, {"sha": "bed9cd9da18936cdc9a9b683ada810507b0c95d6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1757,24 +1757,41 @@ typedef struct ix86_args {\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n \n-/* Max number of bytes we can move from memory to memory\n-   in one reasonably fast instruction.  */\n-#define MOVE_MAX 16\n-\n-/* MOVE_MAX_PIECES is the number of bytes at a time which we can\n-   move efficiently, as opposed to  MOVE_MAX which is the maximum\n-   number of bytes we can move with a single instruction.\n-\n-   ??? We should use TImode in 32-bit mode and use OImode or XImode\n-   if they are available.  But since by_pieces_ninsns determines the\n-   widest mode with MAX_FIXED_MODE_SIZE, we can only use TImode in\n-   64-bit mode.  */\n-#define MOVE_MAX_PIECES \\\n-  ((TARGET_64BIT \\\n-    && TARGET_SSE2 \\\n-    && TARGET_SSE_UNALIGNED_LOAD_OPTIMAL \\\n-    && TARGET_SSE_UNALIGNED_STORE_OPTIMAL) \\\n-   ? GET_MODE_SIZE (TImode) : UNITS_PER_WORD)\n+/* The constant maximum number of bytes that a single instruction can\n+   move quickly between memory and registers or between two memory\n+   locations.  */\n+#define MAX_MOVE_MAX 64\n+\n+/* Max number of bytes we can move from memory to memory in one\n+   reasonably fast instruction, as opposed to MOVE_MAX_PIECES which\n+   is the number of bytes at a time which we can move efficiently.\n+   MOVE_MAX_PIECES defaults to MOVE_MAX.  */\n+\n+#define MOVE_MAX \\\n+  ((TARGET_AVX512F && !TARGET_PREFER_AVX256) \\\n+   ? 64 \\\n+   : ((TARGET_AVX \\\n+       && !TARGET_PREFER_AVX128 \\\n+       && !TARGET_AVX256_SPLIT_UNALIGNED_LOAD \\\n+       && !TARGET_AVX256_SPLIT_UNALIGNED_STORE) \\\n+      ? 32 \\\n+      : ((TARGET_SSE2 \\\n+\t  && TARGET_SSE_UNALIGNED_LOAD_OPTIMAL \\\n+\t  && TARGET_SSE_UNALIGNED_STORE_OPTIMAL) \\\n+\t ? 16 : UNITS_PER_WORD)))\n+\n+/* STORE_MAX_PIECES is the number of bytes at a time that we can\n+   store efficiently.  */\n+#define STORE_MAX_PIECES \\\n+  ((TARGET_AVX512F && !TARGET_PREFER_AVX256) \\\n+   ? 64 \\\n+   : ((TARGET_AVX \\\n+       && !TARGET_PREFER_AVX128 \\\n+       && !TARGET_AVX256_SPLIT_UNALIGNED_STORE) \\\n+      ? 32 \\\n+      : ((TARGET_SSE2 \\\n+\t  && TARGET_SSE_UNALIGNED_STORE_OPTIMAL) \\\n+\t ? 16 : UNITS_PER_WORD)))\n \n /* If a memory-to-memory move would take MOVE_RATIO or more simple\n    move-instruction pairs, we will do a cpymem or libcall instead."}, {"sha": "949dd5c337a98b35192f45385cc60788e30c5d31", "filename": "gcc/testsuite/gcc.target/i386/pr100865-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-1.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -march=x86-64\" } */\n \n extern char *dst;"}, {"sha": "98b6dfb16f330b7b4300f50146e082f39c380d80", "filename": "gcc/testsuite/gcc.target/i386/pr100865-10a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10a.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -29,5 +29,5 @@ foo (void)\n     array[i] = MK_CONST128_BROADCAST (0x1f);\n }\n \n-/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 8 } } */"}, {"sha": "e5616d8d258791514788239663b78c7f93078c25", "filename": "gcc/testsuite/gcc.target/i386/pr100865-10b.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-10b.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -3,5 +3,5 @@\n \n #include \"pr100865-10a.c\"\n \n-/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovdqa\\[\\\\t \\]%xmm\\[0-9\\]+, \" 16 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[\\\\t \\]%ymm\\[0-9\\]+, \" 8 } } */"}, {"sha": "f3ea7753abe8bfc9fc8c2326bb08d095570990e4", "filename": "gcc/testsuite/gcc.target/i386/pr100865-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-2.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake\" } */\n \n extern char *dst;"}, {"sha": "714c43e12c9b45bf4ed21ed80adf3326483e9b90", "filename": "gcc/testsuite/gcc.target/i386/pr100865-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-3.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake-avx512\" } */\n \n extern char *dst;"}, {"sha": "365487337aee241469f9be10d32f550cf068b455", "filename": "gcc/testsuite/gcc.target/i386/pr100865-4a.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4a.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake\" } */\n \n extern char array[64];\n@@ -11,6 +11,6 @@ foo (void)\n     array[i] = -45;\n }\n \n-/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%xmm\\[0-9\\]+, %xmm\\[0-9\\]+\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%xmm\\[0-9\\]+, \" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%xmm\\[0-9\\]+, %ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[\\\\t \\]%ymm\\[0-9\\]+, \" 2 } } */\n /* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "8e8a7eaaaff3531fcb98b7800b8595f6c5e38e9c", "filename": "gcc/testsuite/gcc.target/i386/pr100865-4b.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100865-4b.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,9 +1,9 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake-avx512\" } */\n \n #include \"pr100865-4a.c\"\n \n-/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %xmm\\[0-9\\]+\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovdqu8\\[\\\\t \\]%xmm\\[0-9\\]+, \" 4 } } */\n-/* { dg-final { scan-assembler-not \"vpbroadcastb\\[\\\\t \\]+%xmm\\[0-9\\]+, %xmm\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%(?:r|e)\\[^\\n\\]*, %ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[\\\\t \\]%ymm\\[0-9\\]+, \" 2 } } */\n+/* { dg-final { scan-assembler-not \"vpbroadcastb\\[\\\\t \\]+%xmm\\[0-9\\]+, %ymm\\[0-9\\]+\" } } */\n /* { dg-final { scan-assembler-not \"vmovdqa\" } } */"}, {"sha": "4fd5a40d99dab5088448297ade17744ce949177f", "filename": "gcc/testsuite/gcc.target/i386/pr90773-1.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-1.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mtune=generic\" } */\n+/* { dg-options \"-O2 -msse2 -mtune=generic\" } */\n \n extern char *dst, *src;\n \n@@ -9,9 +9,5 @@ foo (void)\n   __builtin_memcpy (dst, src, 15);\n }\n \n-/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]+7\\\\(%\\[\\^,\\]+\\\\),\" 1 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n-/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+4\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n-/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+8\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n-/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]+11\\\\(%\\[\\^,\\]+\\\\),\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]+\\\\(%\\[\\^,\\]+\\\\),\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]+7\\\\(%\\[\\^,\\]+\\\\),\" 1 } } */"}, {"sha": "96ee5cb08c1f5bd08298e2b9d47f8b441eda6dd4", "filename": "gcc/testsuite/gcc.target/i386/pr90773-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-14.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -mno-avx -msse2 -mtune=generic\" } */\n \n extern char *dst;"}, {"sha": "403cdb248a20dfd3a2bed0acedc4b20bca7bcc1c", "filename": "gcc/testsuite/gcc.target/i386/pr90773-15.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-15.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake-avx512\" } */\n \n extern char *dst;\n@@ -9,6 +9,6 @@ foo (int c)\n   __builtin_memset (dst, c, 17);\n }\n \n-/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%edi, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[\\\\t \\]+%.*, %xmm\\[0-9\\]+\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu8\\[\\\\t \\]+%xmm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"movb\\[\\\\t \\]+%dil, 16\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movb\\[\\\\t \\]+%.*, 16\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "bb0aadbc77e94ac2244c82fe4dccc6d4c0469a7f", "filename": "gcc/testsuite/gcc.target/i386/pr90773-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-16.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake-avx512\" } */\n \n extern char *dst;"}, {"sha": "73d5d5abaeeebab9155244b68a36c9ad814da996", "filename": "gcc/testsuite/gcc.target/i386/pr90773-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-17.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake-avx512\" } */\n \n extern char *dst;"}, {"sha": "71f1fd8c4df69a3970fd99966d79d91a42766e06", "filename": "gcc/testsuite/gcc.target/i386/pr90773-24.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-24.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -march=x86-64\" } */\n \n struct S"}, {"sha": "ad19a88c8837951ce60da8e61197e01fc8c18409", "filename": "gcc/testsuite/gcc.target/i386/pr90773-25.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-25.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -march=x86-64\" } */\n \n struct S"}, {"sha": "ee4c04678d11e234009b41d694a19aa30221b7e9", "filename": "gcc/testsuite/gcc.target/i386/pr90773-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f0e955c97da002b5adb4e8c9dfd2ea9709e207/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-4.c?ref=29f0e955c97da002b5adb4e8c9dfd2ea9709e207", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -mno-avx -msse2 -mtune=generic\" } */\n \n extern char *dst;"}]}