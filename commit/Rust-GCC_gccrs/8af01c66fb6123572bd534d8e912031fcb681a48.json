{"sha": "8af01c66fb6123572bd534d8e912031fcb681a48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFmMDFjNjZmYjYxMjM1NzJiZDUzNGQ4ZTkxMjAzMWZjYjY4MWE0OA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-05-25T22:25:35Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-05-25T22:25:35Z"}, "message": "re PR tree-optimization/71272 (internal compiler error: in operator[], through tree-ssa-threadupdate.c:1981)\n\n\tPR tree-optimization/71272\n\t* tree-ssa-threadbackward.c (convert_and_register_jump_thread_path):\n\tUpdate comments.  Add test for empty path.\n\n\tPR tree-optimization/71272\n\t* gcc.c-torture/compile/pr71272.c: new test.\n\nFrom-SVN: r236755", "tree": {"sha": "ac833108d5e1e510a99e9d9fdce8a634ecf5b6d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac833108d5e1e510a99e9d9fdce8a634ecf5b6d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8af01c66fb6123572bd534d8e912031fcb681a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af01c66fb6123572bd534d8e912031fcb681a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8af01c66fb6123572bd534d8e912031fcb681a48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af01c66fb6123572bd534d8e912031fcb681a48/comments", "author": null, "committer": null, "parents": [{"sha": "f9d6ce734db62ab7ff8ab4826a9313bf417e0a81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d6ce734db62ab7ff8ab4826a9313bf417e0a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d6ce734db62ab7ff8ab4826a9313bf417e0a81"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "a3c4d902bec71d57a4d25aff9789ff252b55b66c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8af01c66fb6123572bd534d8e912031fcb681a48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8af01c66fb6123572bd534d8e912031fcb681a48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8af01c66fb6123572bd534d8e912031fcb681a48", "patch": "@@ -1,3 +1,9 @@\n+2016-05-25  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/71272\n+\t* tree-ssa-threadbackward.c (convert_and_register_jump_thread_path):\n+\tUpdate comments.  Add test for empty path.\n+\n 2016-05-25  Bill Seurer  <seurer@linux.vnet.ibm.com>\n \n \t* config/rs6000/altivec.h (vec_cmpne): Add #define for vec_cmpne."}, {"sha": "61c064f9867d1d944eb24e8a8f102131db31d758", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8af01c66fb6123572bd534d8e912031fcb681a48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8af01c66fb6123572bd534d8e912031fcb681a48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8af01c66fb6123572bd534d8e912031fcb681a48", "patch": "@@ -1,3 +1,8 @@\n+2016-05-25  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/71272\n+\t* gcc.c-torture/compile/pr71272.c: new test.\n+\n 2016-05-25  Bill Seurer  <seurer@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vec-cmpne.c: New test."}, {"sha": "22f14981afbc6953eab0a9b2557d3e9a57625223", "filename": "gcc/testsuite/gcc.c-torture/compile/pr71272.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8af01c66fb6123572bd534d8e912031fcb681a48/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr71272.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8af01c66fb6123572bd534d8e912031fcb681a48/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr71272.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr71272.c?ref=8af01c66fb6123572bd534d8e912031fcb681a48", "patch": "@@ -0,0 +1,33 @@\n+int a, b, c, d;\n+\n+int\n+f1 (int p1, int p2)\n+{\n+  return p1 - p2;\n+}\n+\n+void\n+f2 (short p1, short p2)\n+{\n+  for (;;)\n+    {\n+      if (5 < (1 ^ p2))\n+        for (; a;)\n+          for (;;)\n+            {\n+              b = 0xE7BC92A3EDA01CD8 < (d = p2) || (0, 0);\n+              break;\n+            }\n+      if (p1)\n+        break;\n+      p2 = 5;\n+    }\n+}\n+\n+void\n+f3 (int x)\n+{\n+  int tmp = -2L;\n+  c = f1 (90, x != 10);\n+  f2 (c, tmp);\n+}"}, {"sha": "636b67da42d520b1eab342f57dc94a4d49175bbc", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8af01c66fb6123572bd534d8e912031fcb681a48/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8af01c66fb6123572bd534d8e912031fcb681a48/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=8af01c66fb6123572bd534d8e912031fcb681a48", "patch": "@@ -373,6 +373,10 @@ convert_and_register_jump_thread_path (vec<basic_block, va_gc> *&path,\n     {\n       basic_block bb1 = (*path)[path->length () - j - 1];\n       basic_block bb2 = (*path)[path->length () - j - 2];\n+\n+      /* This can happen when we have an SSA_NAME as a PHI argument and\n+\t its initialization block is the head of the PHI argument's\n+\t edge.  */\n       if (bb1 == bb2)\n \tcontinue;\n \n@@ -382,6 +386,22 @@ convert_and_register_jump_thread_path (vec<basic_block, va_gc> *&path,\n       jump_thread_path->safe_push (x);\n     }\n \n+  /* As a consequence of the test for duplicate blocks in the path\n+     above, we can get a path with no blocks.  This happens if a\n+     conditional can be fully evaluated at compile time using just\n+     defining statements in the same block as the test.\n+\n+     When we no longer push the block associated with a PHI argument\n+     onto the stack, then this as well as the test in the loop above\n+     can be removed.  */\n+  if (jump_thread_path->length () == 0)\n+    {\n+      jump_thread_path->release ();\n+      delete jump_thread_path;\n+      path->pop ();\n+      return;\n+    }\n+\n   /* Add the edge taken when the control variable has value ARG.  */\n   jump_thread_edge *x\n     = new jump_thread_edge (taken_edge, EDGE_NO_COPY_SRC_BLOCK);"}]}