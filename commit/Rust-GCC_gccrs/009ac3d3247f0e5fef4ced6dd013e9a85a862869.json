{"sha": "009ac3d3247f0e5fef4ced6dd013e9a85a862869", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5YWMzZDMyNDdmMGU1ZmVmNGNlZDZkZDAxM2U5YTg1YTg2Mjg2OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-18T16:52:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-18T16:52:10Z"}, "message": "h8300.c (ok_for_bclr): Take a HOST_WIDE_INT.\n\n        * config/h8300/h8300.c (ok_for_bclr): Take a HOST_WIDE_INT.\n        (small_power_of_two): Likewise; use exact_log2.\n        (adds_subs_operand, one_insn_adds_subs_operand): Remove.\n        (output_adds_subs): Remove.\n        (two_insn_adds_subs_operand): New.\n        (split_adds_subs): New.\n        * config/h8300/h8300-protos.h: Update.\n        * config/h8300/h8300.h (CONST_OK_FOR_J): Cast to uns HOST_WIDE_INT.\n        (CONST_OK_FOR_L): Match strict adds operands.\n        (CONST_OK_FOR_N): Match struct subs operands.\n        * config/h8300/h8300.md (adds_subs insns): Remove.\n        (addhi patterns): Output adds/subs directly.\n        (addsi_h8300h): Likewise.\n        (addhi/addsi splitters): New.  Decompose two_insn_adds_subs_operand.\n\nFrom-SVN: r33985", "tree": {"sha": "640b5dd34c0e9f73452632e57a3eb2fa942ecdd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/640b5dd34c0e9f73452632e57a3eb2fa942ecdd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/009ac3d3247f0e5fef4ced6dd013e9a85a862869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009ac3d3247f0e5fef4ced6dd013e9a85a862869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009ac3d3247f0e5fef4ced6dd013e9a85a862869", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009ac3d3247f0e5fef4ced6dd013e9a85a862869/comments", "author": null, "committer": null, "parents": [{"sha": "15dad1d9085624c3bce83e0fa0d9b2764f65bccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15dad1d9085624c3bce83e0fa0d9b2764f65bccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15dad1d9085624c3bce83e0fa0d9b2764f65bccb"}], "stats": {"total": 325, "additions": 133, "deletions": 192}, "files": [{"sha": "0788cdfee9db9764247628df52cde54da9ed27ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ac3d3247f0e5fef4ced6dd013e9a85a862869/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ac3d3247f0e5fef4ced6dd013e9a85a862869/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=009ac3d3247f0e5fef4ced6dd013e9a85a862869", "patch": "@@ -1,3 +1,20 @@\n+2000-05-18  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/h8300/h8300.c (ok_for_bclr): Take a HOST_WIDE_INT.\n+\t(small_power_of_two): Likewise; use exact_log2.\n+\t(adds_subs_operand, one_insn_adds_subs_operand): Remove.\n+\t(output_adds_subs): Remove.\n+\t(two_insn_adds_subs_operand): New.\n+\t(split_adds_subs): New.\n+\t* config/h8300/h8300-protos.h: Update.\n+\t* config/h8300/h8300.h (CONST_OK_FOR_J): Cast to uns HOST_WIDE_INT.\n+\t(CONST_OK_FOR_L): Match strict adds operands.\n+\t(CONST_OK_FOR_N): Match struct subs operands.\n+\t* config/h8300/h8300.md (adds_subs insns): Remove.\n+\t(addhi patterns): Output adds/subs directly.\n+\t(addsi_h8300h): Likewise.\n+\t(addhi/addsi splitters): New.  Decompose two_insn_adds_subs_operand.\n+\n 2000-05-18  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cppexp.c (parse_assertion): New."}, {"sha": "147e8995ad3a9efef7b78c2d30ac5505a6af5bc9", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ac3d3247f0e5fef4ced6dd013e9a85a862869/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ac3d3247f0e5fef4ced6dd013e9a85a862869/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=009ac3d3247f0e5fef4ced6dd013e9a85a862869", "patch": "@@ -36,14 +36,14 @@ extern void notice_update_cc PARAMS ((rtx, rtx));\n extern int expand_a_shift PARAMS ((enum machine_mode, int, rtx[]));\n extern int fix_bit_operand PARAMS ((rtx *, int, enum rtx_code));\n extern int h8300_adjust_insn_length PARAMS ((rtx, int));\n+extern void split_adds_subs PARAMS ((enum machine_mode, rtx[]));\n \n extern int general_operand_src PARAMS ((rtx, enum machine_mode));\n extern int general_operand_dst PARAMS ((rtx, enum machine_mode));\n extern int o_operand PARAMS ((rtx, enum machine_mode));\n extern int p_operand PARAMS ((rtx, enum machine_mode));\n extern int call_insn_operand PARAMS ((rtx, enum machine_mode));\n-extern int adds_subs_operand PARAMS ((rtx, enum machine_mode));\n-extern int one_insn_adds_subs_operand PARAMS ((rtx, enum machine_mode));\n+extern int two_insn_adds_subs_operand PARAMS ((rtx, enum machine_mode));\n extern int small_call_insn_operand PARAMS ((rtx, enum machine_mode));\n extern int jump_address_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_operand PARAMS ((rtx, enum machine_mode));\n@@ -70,6 +70,6 @@ extern void function_prologue PARAMS ((FILE *, int));\n extern void function_epilogue PARAMS ((FILE *, int));\n extern void asm_file_start PARAMS ((FILE *));\n extern void asm_file_end PARAMS ((FILE *));\n-extern int ok_for_bclr PARAMS ((int));\n-extern int small_power_of_two PARAMS ((int));\n+extern int ok_for_bclr PARAMS ((HOST_WIDE_INT));\n+extern int small_power_of_two PARAMS ((HOST_WIDE_INT));\n extern int initial_offset PARAMS ((int, int));"}, {"sha": "9425cbf6bcac7fe6f05622ed219d36872c12b8ab", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 63, "deletions": 97, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ac3d3247f0e5fef4ced6dd013e9a85a862869/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ac3d3247f0e5fef4ced6dd013e9a85a862869/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=009ac3d3247f0e5fef4ced6dd013e9a85a862869", "patch": "@@ -542,29 +542,10 @@ asm_file_end (file)\n \n int\n small_power_of_two (value)\n-     int value;\n+     HOST_WIDE_INT value;\n {\n-  switch (value)\n-    {\n-    case 1:\n-    case 2:\n-    case 4:\n-    case 8:\n-    case 16:\n-    case 32:\n-    case 64:\n-    case 128:\n-    case 256:\n-    case 512:\n-    case 1024:\n-    case 2048:\n-    case 4096:\n-    case 8192:\n-    case 16384:\n-    case 32768:\n-      return 1;\n-    }\n-  return 0;\n+  int power = exact_log2 (value);\n+  return power >= 0 && power <= 15;\n }\n \n /* Return true if VALUE is a valid constant for constraint 'O', which\n@@ -573,7 +554,7 @@ small_power_of_two (value)\n \n int\n ok_for_bclr (value)\n-     int value;\n+     HOST_WIDE_INT value;\n {\n   return small_power_of_two ((~value) & 0xff);\n }\n@@ -645,107 +626,92 @@ call_insn_operand (op, mode)\n }\n \n int\n-adds_subs_operand (op, mode)\n+two_insn_adds_subs_operand (op, mode)\n      rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == CONST_INT)\n     {\n-      if (INTVAL (op) <= 4 && INTVAL (op) >= 0)\n-\treturn 1;\n-      if (INTVAL (op) >= -4 && INTVAL (op) <= 0)\n-\treturn 1;\n-      if ((TARGET_H8300H || TARGET_H8300S)\n-\t  && INTVAL (op) != 7\n-\t  && (INTVAL (op) <= 8 && INTVAL (op) >= 0))\n-\treturn 1;\n-      if ((TARGET_H8300H || TARGET_H8300S)\n-\t  && INTVAL (op) != -7\n-\t  && (INTVAL (op) >= -8 && INTVAL (op) <= 0))\n-\treturn 1;\n-    }\n-  return 0;\n-}\n+      HOST_WIDE_INT value = INTVAL (op);\n \n-/* Return nonzero if op is an adds/subs operand which only requires\n-   one insn to implement.  It is assumed that OP is already an adds/subs\n-   operand.  */\n-int\n-one_insn_adds_subs_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-{\n-  int val = INTVAL (op);\n+      if (TARGET_H8300H || TARGET_H8300S)\n+\t{\n+\t  if (value >= -8 && value < -4 && value != -7)\n+\t    return 1;\n+\t  if (value > 4 && value <= 8 && value != 7)\n+\t    return 1;\n+\t}\n+      else\n+\t{\n+\t  if (value == -4 || value == -3 || value == 3 || value == 4)\n+\t    return 1;\n+\t}\n+    }\n \n-  if (val == 1 || val == -1\n-      || val == 2 || val == -2\n-      || ((TARGET_H8300H || TARGET_H8300S)\n-\t  && (val == 4 || val == -4)))\n-    return 1;\n   return 0;\n }\n \n-const char *\n-output_adds_subs (operands)\n+/* Split an add of a small constant into two adds/subs insns.  */\n+\n+void\n+split_adds_subs (mode, operands)\n+     enum machine_mode mode;\n      rtx *operands;\n {\n-  int val = INTVAL (operands[2]);\n+  HOST_WIDE_INT val = INTVAL (operands[1]);\n+  rtx reg = operands[0];\n+  rtx tmp;\n \n-  /* First get the value into the range -4..4 inclusive.\n-\n-     The only way it can be out of this range is when TARGET_H8300H\n-     or TARGET_H8300S is true, thus it is safe to use adds #4 and subs #4.  */\n-  if (val > 4)\n+  /* Take care of +/- 4 for H8300H and H8300S.  */\n+  if (TARGET_H8300H || TARGET_H8300S)\n     {\n-      output_asm_insn (\"adds #4,%A0\", operands);\n-      val -= 4;\n-    }\n+      /* Get the value in range of +/- 4.  */\n+      if (val > 4)\n+\t{\n+\t  tmp = gen_rtx_PLUS (mode, reg, GEN_INT (4));\n+\t  emit_insn (gen_rtx_SET (VOIDmode, reg, tmp));\n+\t  val -= 4;\n+\t}\n+      else if (val < -4)\n+\t{\n+\t  tmp = gen_rtx_PLUS (mode, reg, GEN_INT (-4));\n+\t  emit_insn (gen_rtx_SET (VOIDmode, reg, tmp));\n+\t  val += 4;\n+\t}\n \n-  if (val < -4)\n-    {\n-      output_asm_insn (\"subs #4,%A0\", operands);\n-      val += 4;\n+      if (val == 4 || val == -4)\n+\t{\n+\t  tmp = gen_rtx_PLUS (mode, reg, GEN_INT (val));\n+\t  emit_insn (gen_rtx_SET (VOIDmode, reg, tmp));\n+\t  return;\n+\t}\n     }\n \n-  /* Handle case were val == 4 or val == -4 and we're compiling\n-     for TARGET_H8300H or TARGET_H8300S.  */\n-  if ((TARGET_H8300H || TARGET_H8300S)\n-      && val == 4)\n-    return \"adds #4,%A0\";\n-\n-  if ((TARGET_H8300H || TARGET_H8300S)\n-      && val == -4)\n-    return \"subs #4,%A0\";\n-\n+  /* Get the value in range of +/- 2.  */\n   if (val > 2)\n     {\n-      output_asm_insn (\"adds #2,%A0\", operands);\n+      tmp = gen_rtx_PLUS (mode, reg, GEN_INT (2));\n+      emit_insn (gen_rtx_SET (VOIDmode, reg, tmp));\n       val -= 2;\n     }\n-\n-  if (val < -2)\n+  else if (val < -2)\n     {\n-      output_asm_insn (\"subs #2,%A0\", operands);\n+      tmp = gen_rtx_PLUS (mode, reg, GEN_INT (-2));\n+      emit_insn (gen_rtx_SET (VOIDmode, reg, tmp));\n       val += 2;\n     }\n \n-  /* val should be one or two now.  */\n-  if (val == 2)\n-    return \"adds #2,%A0\";\n-\n-  if (val == -2)\n-    return \"subs #2,%A0\";\n-\n-  /* val should be one now.  */\n-  if (val == 1)\n-    return \"adds #1,%A0\";\n-\n-  if (val == -1)\n-    return \"subs #1,%A0\";\n-\n   /* If not optimizing, we might be asked to add 0.  */\n   if (val == 0)\n-    return \"\";\n+    return;\n+\n+  /* We should have one or two now.  */\n+  if (val >= -2 && val <= 2)\n+    {\n+      tmp = gen_rtx_PLUS (mode, reg, GEN_INT (val));\n+      emit_insn (gen_rtx_SET (VOIDmode, reg, tmp));\n+      return;\n+    }\n \n   /* In theory, this can't happen.  */\n   abort ();"}, {"sha": "7fdedf8e3cd344aca981eecd6f862a07693ffee0", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ac3d3247f0e5fef4ced6dd013e9a85a862869/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ac3d3247f0e5fef4ced6dd013e9a85a862869/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=009ac3d3247f0e5fef4ced6dd013e9a85a862869", "patch": "@@ -399,11 +399,17 @@ enum reg_class {\n    Return 1 if VALUE is in the range specified by C.  */\n \n #define CONST_OK_FOR_I(VALUE) ((VALUE) == 0)\n-#define CONST_OK_FOR_J(VALUE) ((unsigned) (VALUE) < 256)\n-#define CONST_OK_FOR_K(VALUE) (((VALUE) == 1) || (VALUE) == 2)\n-#define CONST_OK_FOR_L(VALUE) (((VALUE) == -1) || (VALUE) == -2)\n-#define CONST_OK_FOR_M(VALUE) (((VALUE) == 3) || (VALUE) == 4)\n-#define CONST_OK_FOR_N(VALUE) (((VALUE) == -3) || (VALUE) == -4)\n+#define CONST_OK_FOR_J(VALUE) ((unsigned HOST_WIDE_INT) (VALUE) < 256)\n+#define CONST_OK_FOR_K(VALUE) ((VALUE) == 1 || (VALUE) == 2)\n+#define CONST_OK_FOR_L(VALUE) \\\n+  (TARGET_H8300H || TARGET_H8300S \\\n+   ? (VALUE) == 1 || (VALUE) == 2 || (VALUE) == 4 \\\n+   : (VALUE) == 1 || (VALUE) == 2)\n+#define CONST_OK_FOR_M(VALUE) ((VALUE) == 3 || (VALUE) == 4)\n+#define CONST_OK_FOR_N(VALUE) \\\n+  (TARGET_H8300H || TARGET_H8300S \\\n+   ? (VALUE) == -1 || (VALUE) == -2 || (VALUE) == -4 \\\n+   : (VALUE) == -1 || (VALUE) == -2)\n #define CONST_OK_FOR_O(VALUE) (ok_for_bclr (VALUE))\n #define CONST_OK_FOR_P(VALUE) (small_power_of_two (VALUE))\n \n@@ -415,7 +421,7 @@ enum reg_class {\n    (C) == 'M' ? CONST_OK_FOR_M (VALUE) : \\\n    (C) == 'N' ? CONST_OK_FOR_N (VALUE) : \\\n    (C) == 'O' ? CONST_OK_FOR_O (VALUE) : \\\n-   (C) == 'P' ? CONST_OK_FOR_P(VALUE) : \\\n+   (C) == 'P' ? CONST_OK_FOR_P (VALUE) : \\\n    0)\n \n /* Similar, but for floating constants, and defining letters G and H."}, {"sha": "eeabdeeb3d93a18a9c1737f531fad13d68d25b96", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 37, "deletions": 85, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ac3d3247f0e5fef4ced6dd013e9a85a862869/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ac3d3247f0e5fef4ced6dd013e9a85a862869/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=009ac3d3247f0e5fef4ced6dd013e9a85a862869", "patch": "@@ -614,43 +614,40 @@\n   \"\"\n   \"\")\n \n-;; Specialized version using adds/subs.  This must come before\n-;; the more general patterns below.\n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0\")\n-\t\t (match_operand:HI 2 \"adds_subs_operand\" \"n\")))]\n-  \"\"\n-  \"* return output_adds_subs (operands);\"\n-  [(set_attr \"cc\" \"none_0hit\")\n-   (set (attr \"length\")\n-        (if_then_else (ne (match_operand:HI 2 \"one_insn_adds_subs_operand\" \"\")\n-\t\t\t  (const_int 0))\n-\t\t      (const_int 2)\n-\t\t      (const_int 4)))])\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=&r,r,&r\")\n-\t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,g\")\n-\t\t (match_operand:HI 2 \"nonmemory_operand\" \"n,r,r\")))]\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,&r\")\n+\t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,g\")\n+\t\t (match_operand:HI 2 \"nonmemory_operand\" \"L,N,n,r,r\")))]\n   \"TARGET_H8300\"\n   \"@\n+   adds\t%2,%A0\n+   subs\t%2,%A0\n    add.b\t%s2,%s0\\;addx\t%t2,%t0 \n    add.w\t%T2,%T0\n    mov.w        %T1,%T0\\;add.w  %T2,%T0\"\n-  [(set_attr \"length\" \"4,2,6\")\n-   (set_attr \"cc\" \"clobber,set_zn,set_zn\")])\n+  [(set_attr \"length\" \"2,2,4,2,6\")\n+   (set_attr \"cc\" \"none_0hit,none_0hit,clobber,set_zn,set_zn\")])\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0\")\n-\t\t (match_operand:HI 2 \"nonmemory_operand\" \"n,r\")))]\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r\")\n+\t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0\")\n+\t\t (match_operand:HI 2 \"nonmemory_operand\" \"L,N,n,r\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"@\n+   adds\t%2,%A0\n+   subs\t%2,%A0\n    add.w\t%T2,%T0\n    add.w\t%T2,%T0\"\n-  [(set_attr \"length\" \"4,2\")\n-   (set_attr \"cc\" \"set_zn,set_zn\")])\n+  [(set_attr \"length\" \"2,2,4,2\")\n+   (set_attr \"cc\" \"none_0hit,none_0hit,set_zn,set_zn\")])\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(plus:HI (match_dup 0)\n+\t\t (match_operand:HI 1 \"two_insn_adds_subs_operand\" \"\")))]\n+  \"\"\n+  [(const_int 0)]\n+  \"split_adds_subs (HImode, operands); DONE;\")\n \n (define_expand \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -659,21 +656,6 @@\n   \"\"\n   \"\")\n \n-;; Specialized version using adds/subs.  This must come before\n-;; the more general patterns below.\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n-\t\t (match_operand:SI 2 \"adds_subs_operand\" \"n\")))]\n-  \"TARGET_H8300H || TARGET_H8300S\"\n-  \"* return output_adds_subs (operands);\"\n-  [(set_attr \"cc\" \"none_0hit\")\n-   (set (attr \"length\")\n-        (if_then_else (ne (match_operand:HI 2 \"one_insn_adds_subs_operand\" \"\")\n-\t\t\t  (const_int 0))\n-\t\t      (const_int 2)\n-\t\t      (const_int 4)))])\n-\n (define_insn \"addsi_h8300\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,&r\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,r\")\n@@ -687,15 +669,25 @@\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"addsi_h8300h\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"i,r\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0\")\n+\t\t (match_operand:SI 2 \"nonmemory_operand\" \"L,N,i,r\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"@\n+   adds\t%2,%A0\n+   subs\t%2,%A0\n    add.l\t%S2,%S0\n    add.l\t%S2,%S0\"\n-  [(set_attr \"length\" \"6,2\")\n-   (set_attr \"cc\" \"set_zn,set_zn\")])\n+  [(set_attr \"length\" \"2,2,6,2\")\n+   (set_attr \"cc\" \"none_0hit,none_0hit,set_zn,set_zn\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(plus:SI (match_dup 0)\n+\t\t (match_operand:SI 1 \"two_insn_adds_subs_operand\" \"\")))]\n+  \"TARGET_H8300H || TARGET_H8300S\"\n+  [(const_int 0)]\n+  \"split_adds_subs (SImode, operands); DONE;\")\n \n ;; ----------------------------------------------------------------------\n ;; SUBTRACT INSTRUCTIONS\n@@ -719,26 +711,6 @@\n   \"\"\n   \"\")\n \n-;; Specialized version using adds/subs.  This must come before\n-;; the more general patterns below.  This may not be needed\n-;; due to instruction canonicalization.\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(minus:HI (match_operand:HI 1 \"register_operand\" \"r\")\n-\t\t  (match_operand:HI 2 \"adds_subs_operand\" \"n\")))]\n-  \"\"\n-  \"*\n-{\n-  operands[2] = GEN_INT (-INTVAL (operands[2]));\n-  return output_adds_subs (operands);\n-}\"\n-  [(set_attr \"cc\" \"none_0hit\")\n-   (set (attr \"length\")\n-        (if_then_else (ne (match_operand:HI 2 \"one_insn_adds_subs_operand\" \"\")\n-\t\t\t  (const_int 0))\n-\t\t      (const_int 2)\n-\t\t      (const_int 4)))])\n-\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,&r\")\n \t(minus:HI (match_operand:HI 1 \"general_operand\" \"0,0\")\n@@ -777,26 +749,6 @@\n   [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"clobber\")])\n \n-;; Specialized version using adds/subs.  This must come before\n-;; the more general patterns below.  This may not be needed\n-;; due to instruction canonicalization.\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(minus:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t  (match_operand:SI 2 \"adds_subs_operand\" \"n\")))]\n-  \"TARGET_H8300H || TARGET_H8300S\"\n-  \"*\n-{\n-  operands[2] = GEN_INT (-INTVAL (operands[2]));\n-  return output_adds_subs (operands);\n-}\"\n-  [(set_attr \"cc\" \"none_0hit\")\n-   (set (attr \"length\")\n-        (if_then_else (ne (match_operand:HI 2 \"one_insn_adds_subs_operand\" \"\")\n-\t\t\t  (const_int 0))\n-\t\t      (const_int 2)\n-\t\t      (const_int 4)))])\n-\n (define_insn \"subsi3_h8300h\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(minus:SI (match_operand:SI 1 \"general_operand\" \"0,0\")"}]}