{"sha": "671aa708d903a497bde36f771b2af6b0d4c0fbe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcxYWE3MDhkOTAzYTQ5N2JkZTM2Zjc3MWIyYWY2YjBkNGMwZmJlMw==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2002-12-28T06:57:50Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2002-12-28T06:57:50Z"}, "message": "configure.in: Convert to autoconf script.\n\n(toplev)\n\t* configure.in: Convert to autoconf script.  Blow away lots\n\tof now-redundant Makefile fragments.\n\t* configure: Generate using Autoconf.\n\t* Makefile.tpl: Rewrite to reflect autoconfiscation.\n\t* Makefile.in: Regenerate.\n(config)\n\t* acx.m4: New.\n\t* mh-a68bsd, mh-aix386, mh-apollo68, mh-delta88, mh-hp300,\n\tmh-hpux, mh-hpux8, mh-irix5, mh-irix6, mh-ncrsvr43, mh-openedition,\n\tmh-riscos, mh-sysv: Delete.\n\t* mh-cxux, mh-dgux386, mh-interix, mh-lynxrs6k, mh-ncr3000,\n\tmh-necv4, mh-sco, mh-solaris, mh-sysv4, mh-sysv5, mt-v810: Simplify.\n\nFrom-SVN: r60558", "tree": {"sha": "eabe71655a9d4325ad5004da39f7d32851872fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eabe71655a9d4325ad5004da39f7d32851872fee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/671aa708d903a497bde36f771b2af6b0d4c0fbe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671aa708d903a497bde36f771b2af6b0d4c0fbe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/671aa708d903a497bde36f771b2af6b0d4c0fbe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671aa708d903a497bde36f771b2af6b0d4c0fbe3/comments", "author": null, "committer": null, "parents": [{"sha": "dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe5a36e9576498d7aa9555e138b21f6ba9ee214"}], "stats": {"total": 5828, "additions": 4350, "deletions": 1478}, "files": [{"sha": "2f0d21a4d9a8b40b21c6356c5e6943bf13d5be1b", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,3 +1,11 @@\n+2002-12-28  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* configure.in: Convert to autoconf script.  Blow away lots\n+\tof now-redundant Makefile fragments.\n+\t* configure: Generate using Autoconf.\n+\t* Makefile.tpl: Rewrite to reflect autoconfiscation.\n+\t* Makefile.in: Regenerate.\n+\n 2002-12-27  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* configure: Fix stupid bug where RANLIB was mistakenly included."}, {"sha": "aea1381ab87e4cd26f934c3688f6b3a3fcdb7d39", "filename": "Makefile.in", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -369,6 +369,10 @@ all: all.normal\n .PHONY: all\n \n #### host and target specific makefile fragments come in here.\n+@target_makefile_frag@\n+@alphaieee_frag@\n+@ospace_frag@\n+@host_makefile_frag@\n ###\n \n # Flags to pass down to all sub-makes.\n@@ -1086,7 +1090,7 @@ local-clean:\n \n local-distclean:\n \t-rm -f Makefile config.status config.cache mh-frag mt-frag\n-\t-rm -f multilib.out multilib.ts multilib.tmp\n+\t-rm -f multilib.out multilib.ts multilib.tmp maybedep.tmp serdep.tmp\n \t-if [ \"$(TARGET_SUBDIR)\" != \".\" ]; then \\\n \t  rm -rf $(TARGET_SUBDIR); \\\n \telse true; fi\n@@ -7694,14 +7698,13 @@ multilib.ts: maybe-all-gcc\n $(srcdir)/Makefile.in: # $(srcdir)/Makefile.tpl $(srcdir)/Makefile.def\n \tcd $(srcdir) && autogen Makefile.def\n \n-# with the gnu make, this is done automatically.\n-\n-host_makefile_frag=@host_makefile_frag@\n-target_makefile_frag=@target_makefile_frag@\n-\n-Makefile: Makefile.in configure.in $(host_makefile_frag) $(target_makefile_frag) $(gcc_version_trigger)\n-\t$(SHELL) ./config.status\n+# Rebuilding Makefile.\n+Makefile: Makefile.in configure $(gcc_version_trigger)\n+\t$(SHELL) ./config.status --recheck\n \n+# Rebuilding configure.\n+configure: configure.in\n+\tcd $(srcdir) && autoconf\n #\n \n .NOEXPORT:"}, {"sha": "ce1ef743b634284fba1fa6cdc45a3139ee99fde7", "filename": "Makefile.tpl", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -372,6 +372,10 @@ all: all.normal\n .PHONY: all\n \n #### host and target specific makefile fragments come in here.\n+@target_makefile_frag@\n+@alphaieee_frag@\n+@ospace_frag@\n+@host_makefile_frag@\n ###\n \n # Flags to pass down to all sub-makes.\n@@ -643,7 +647,7 @@ local-clean:\n \n local-distclean:\n \t-rm -f Makefile config.status config.cache mh-frag mt-frag\n-\t-rm -f multilib.out multilib.ts multilib.tmp\n+\t-rm -f multilib.out multilib.ts multilib.tmp maybedep.tmp serdep.tmp\n \t-if [ \"$(TARGET_SUBDIR)\" != \".\" ]; then \\\n \t  rm -rf $(TARGET_SUBDIR); \\\n \telse true; fi\n@@ -1413,14 +1417,13 @@ multilib.ts: maybe-all-gcc\n $(srcdir)/Makefile.in: # $(srcdir)/Makefile.tpl $(srcdir)/Makefile.def\n \tcd $(srcdir) && autogen Makefile.def\n \n-# with the gnu make, this is done automatically.\n-\n-host_makefile_frag=@host_makefile_frag@\n-target_makefile_frag=@target_makefile_frag@\n-\n-Makefile: Makefile.in configure.in $(host_makefile_frag) $(target_makefile_frag) $(gcc_version_trigger)\n-\t$(SHELL) ./config.status\n+# Rebuilding Makefile.\n+Makefile: Makefile.in configure $(gcc_version_trigger)\n+\t$(SHELL) ./config.status --recheck\n \n+# Rebuilding configure.\n+configure: configure.in\n+\tcd $(srcdir) && autoconf\n #\n \n .NOEXPORT:"}, {"sha": "dd742ba0b72af95169f61a09cf63b1a3f4fee373", "filename": "config/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,3 +1,12 @@\n+2002-12-28  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* acx.m4: New.\n+\t* mh-a68bsd, mh-aix386, mh-apollo68, mh-delta88, mh-hp300,\n+\tmh-hpux, mh-hpux8, mh-irix5, mh-irix6, mh-ncrsvr43, mh-openedition,\n+\tmh-riscos, mh-sysv: Delete.\n+\t* mh-cxux, mh-dgux386, mh-interix, mh-lynxrs6k, mh-ncr3000,\n+\tmh-necv4, mh-sco, mh-solaris, mh-sysv4, mh-sysv5, mt-v810: Simplify.\n+\n 2002-12-16  Christopher Faylor  <cgf@redhat.com>\n \n \t* mh-cygwin: Don't build libtermcap if it doesn't exist."}, {"sha": "36bc9bec93c20bed0ba7705ce6cb98ac8c3ad9e3", "filename": "config/acx.m4", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Facx.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Facx.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Facx.m4?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -0,0 +1,83 @@\n+# Autoconf M4 include file defining utility macros for complex Canadian\n+# cross builds.\n+\n+####\n+# _NCN_TOOL_PREFIXES:  Some stuff that oughtta be done in AC_CANONICAL_SYSTEM \n+# or AC_INIT.\n+# These demand that AC_CANONICAL_SYSTEM be called beforehand.\n+AC_DEFUN([_NCN_TOOL_PREFIXES],\n+[ncn_tool_prefix=\n+test -n \"$host_alias\" && ncn_tool_prefix=$host_alias-\n+ncn_target_tool_prefix=\n+test -n \"$target_alias\" && ncn_target_tool_prefix=$target_alias-\n+]) []dnl # _NCN_TOOL_PREFIXES\n+\n+####\n+# NCN_CHECK_TARGET_TOOL(variable, prog-to-check-for,[value-if-not-found],[path])\n+# Like AC_CHECK_TOOL, but tries a prefix of the target, not the host.\n+# Code is pretty much lifted from autoconf2.53.\n+\n+AC_DEFUN([NCN_CHECK_TARGET_TOOL],\n+[AC_REQUIRE([_NCN_TOOL_PREFIXES]) []dnl\n+if test -n \"$ncn_target_tool_prefix\"; then\n+  AC_CHECK_PROG([$1], [${ncn_target_tool_prefix}$2], \n+                [${ncn_target_tool_prefix}$2], , [$4])\n+fi\n+if test -z \"$ac_cv_prog_$1\" ; then\n+  ncn_ct_$1=$$1\n+  AC_CHECK_PROG([ncn_ct_$1], [$2], [$2], [$3], [$4])\n+  $1=$ncn_ct_$1\n+else\n+  $1=\"$ac_cv_prog_$1\"\n+fi\n+]) []dnl # NCN_CHECK_TARGET_TOOL\n+\n+\n+####\n+# NCN_STRICT_CHECK_TOOL(variable, prog-to-check-for,[value-if-not-found],[path])\n+# Like AC_CHECK_TOOL, but requires the prefix if build!=host.\n+\n+AC_DEFUN([NCN_STRICT_CHECK_TOOL],\n+[AC_REQUIRE([_NCN_TOOL_PREFIXES]) []dnl\n+if test -n \"$ncn_tool_prefix\"; then\n+  AC_CHECK_PROG([$1], [${ncn_tool_prefix}$2], \n+                [${ncn_tool_prefix}$2], , [$4])\n+fi\n+if test -z \"$ac_cv_prog_$1\" ; then\n+  if test $build = $host ; then\n+    ncn_ct_$1=$$1\n+    AC_CHECK_PROG([ncn_ct_$1], [$2], [$2], [$3], [$4]) \n+    $1=$ncn_ct_$1\n+  else\n+    $1=\"$3\"\n+  fi\n+else\n+  $1=\"$ac_cv_prog_$1\"\n+fi\n+]) []dnl # NCN_STRICT_CHECK_TOOL\n+\n+\n+####\n+# NCN_STRICT_CHECK_TARGET_TOOL(variable, prog-to-check-for,[value-if-not-found],[path])\n+# Like NCN_CHECK_TARGET_TOOL, but requires the prefix if build!=target.\n+\n+AC_DEFUN([NCN_STRICT_CHECK_TARGET_TOOL],\n+[AC_REQUIRE([_NCN_TOOL_PREFIXES]) []dnl\n+if test -n \"$ncn_target_tool_prefix\"; then\n+  AC_CHECK_PROG([$1], [${ncn_target_tool_prefix}$2], \n+                [${ncn_target_tool_prefix}$2], , [$4])\n+fi\n+if test -z \"$ac_cv_prog_$1\" ; then\n+  if test $build = $target ; then\n+    ncn_ct_$1=$$1\n+    AC_CHECK_PROG([ncn_ct_$1], [$2], [$2], [$3], [$4]) \n+    $1=$ncn_ct_$1\n+  else\n+    $1=\"$3\"\n+  fi\n+else\n+  $1=\"$ac_cv_prog_$1\"\n+fi\n+]) []dnl # NCN_STRICT_CHECK_TARGET_TOOL\n+\n+"}, {"sha": "2fe28d0a4e21781b14cef4d4e55f6e0853b60fcf", "filename": "config/mh-a68bsd", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-a68bsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-a68bsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-a68bsd?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1,2 +0,0 @@\n-RANLIB=true\n-BISON=yacc"}, {"sha": "4accd1cddfbe5dddad27e5b1cfd6179b530e1f8d", "filename": "config/mh-aix386", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-aix386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-aix386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-aix386?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1 +0,0 @@\n-RANLIB = @:"}, {"sha": "eb102d5501089914ca357aa07ba38857cdea7977", "filename": "config/mh-apollo68", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-apollo68", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-apollo68", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-apollo68?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1 +0,0 @@\n-RANLIB=true"}, {"sha": "8680654fff81849b081429965c6221759f8a1be8", "filename": "config/mh-cxux", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-cxux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-cxux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-cxux?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,7 +1,5 @@\n # Configuration for Harris CX/UX 7 (and maybe 6), based on sysv4 configuration.\n \n-RANLIB = true\n-\n # The l flag generates a warning from the SVR4 archiver, remove it.\n AR_FLAGS = cq\n "}, {"sha": "bc9c45302d556234360d44c62e9861411cd7acdc", "filename": "config/mh-delta88", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-delta88", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-delta88", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-delta88?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1,4 +0,0 @@\n-RANLIB = true\n-\n-\n-"}, {"sha": "b2d2a057b4c9bea2e0b4b0a6dbd9bc8a6c3fecf8", "filename": "config/mh-dgux386", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-dgux386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-dgux386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-dgux386?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,6 +1,3 @@\n-# from mh-sysv4\n-RANLIB = true\n-\n # The l flag generates a warning from the SVR4 archiver, remove it.\n AR_FLAGS = cr\n "}, {"sha": "17a69a6c89f616030c70814e45c699ecfadb9f0d", "filename": "config/mh-hp300", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-hp300", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-hp300", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-hp300?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1,3 +0,0 @@\n-# If \"ar\" in $PATH is GNU ar, the symbol table may need rebuilding.\n-# If it's HP/UX ar, this should be harmless.\n-RANLIB = ar ts"}, {"sha": "40030020773ac0f4d974f743003a44a20e9f7e2d", "filename": "config/mh-hpux", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-hpux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-hpux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-hpux?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1 +0,0 @@\n-RANLIB = true"}, {"sha": "40030020773ac0f4d974f743003a44a20e9f7e2d", "filename": "config/mh-hpux8", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-hpux8", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-hpux8", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-hpux8?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1 +0,0 @@\n-RANLIB = true"}, {"sha": "67dff5c44326d33abbb8a01cdbce86a33624a735", "filename": "config/mh-interix", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-interix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-interix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-interix?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,6 +1,5 @@\n # The shell may not be in /bin. \n SHELL = sh\n-RANLIB = true\n \n # We also need to override LIBGCC2_DEBUG_CFLAGS so libgcc2 will be\n # built without debugging information"}, {"sha": "0019ee4308ee4f2f1363ccca6cc8c1553a148544", "filename": "config/mh-irix5", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-irix5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-irix5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-irix5?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1,2 +0,0 @@\n-# Makefile changes for SGI's running IRIX-5.x.\n-RANLIB = true"}, {"sha": "bf6d8dc73d78438f75ed6f9d7273bebf36da73ce", "filename": "config/mh-irix6", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-irix6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-irix6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-irix6?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1,2 +0,0 @@\n-# Makefile changes for SGI's running IRIX-6.x.\n-RANLIB = true"}, {"sha": "fac1b973a6018bc8d6e1616ed4a95b10c302f118", "filename": "config/mh-lynxrs6k", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-lynxrs6k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-lynxrs6k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-lynxrs6k?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,5 +1,2 @@\n-# LynxOS running on the rs6000 doesn't have ranlib\n-RANLIB = true\n-\n # /bin/sh is too buggy, so use /bin/bash instead.\n SHELL = /bin/bash"}, {"sha": "7c6ee12739b99427192ae9dfaa31f4526e8e1b90", "filename": "config/mh-ncr3000", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-ncr3000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-ncr3000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-ncr3000?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,6 +1,4 @@\n # Host configuration file for an NCR 3000 (i486/SVR4) system.\n \n-RANLIB = true\n-\n # The l flag generates a warning from the SVR4 archiver, remove it.\n AR_FLAGS = cq"}, {"sha": "5446d77abf97508df560d56a72d01eddcd62409c", "filename": "config/mh-ncrsvr43", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-ncrsvr43", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-ncrsvr43", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-ncrsvr43?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1,3 +0,0 @@\n-# Host configuration file for an NCR 3000 (i486/SVR43) system.\n-\n-RANLIB = true"}, {"sha": "d71805e052aa7afed2e73827d624c18eadd2c74a", "filename": "config/mh-necv4", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-necv4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-necv4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-necv4?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,6 +1,4 @@\n # Host Makefile fragment for NEC MIPS SVR4.\n \n-RANLIB = true\n-\n # NEC -lX11 needs some other libraries.\n X11_EXTRA_LIBS = -lsocket -lnsl"}, {"sha": "40030020773ac0f4d974f743003a44a20e9f7e2d", "filename": "config/mh-openedition", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-openedition", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-openedition", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-openedition?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1 +0,0 @@\n-RANLIB = true"}, {"sha": "07588c76f1f64b695c9df3c79ec245d8ab33c6a7", "filename": "config/mh-riscos", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-riscos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-riscos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-riscos?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1,3 +0,0 @@\n-# This is for a MIPS running RISC/os 4.52C.\n-\n-RANLIB = true"}, {"sha": "bf5a807b0e71b9e78e976ae86d01db5f1e50e458", "filename": "config/mh-sco", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-sco", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-sco", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-sco?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,4 +1,3 @@\n-RANLIB = true\n # You may need this if you don't have bison.\n # BISON = yacc -Sm10400\n "}, {"sha": "6e8f296a4ea2fa9ed01b95d9820cbb6ff6c8e86d", "filename": "config/mh-solaris", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-solaris", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-solaris", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-solaris?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,5 +1,2 @@\n # Makefile changes for Suns running Solaris 2\n-\n-RANLIB = true\n-\n X11_EXTRA_LIBS = -lnsl -lsocket"}, {"sha": "40030020773ac0f4d974f743003a44a20e9f7e2d", "filename": "config/mh-sysv", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-sysv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe5a36e9576498d7aa9555e138b21f6ba9ee214/config%2Fmh-sysv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-sysv?ref=dfe5a36e9576498d7aa9555e138b21f6ba9ee214", "patch": "@@ -1 +0,0 @@\n-RANLIB = true"}, {"sha": "2e9374c7f96ad6a7fa5b3f6863fb1ca01ef92337", "filename": "config/mh-sysv4", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-sysv4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-sysv4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-sysv4?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,5 +1,3 @@\n-RANLIB = true\n-\n # The l flag generates a warning from the SVR4 archiver, remove it.\n AR_FLAGS = cr\n "}, {"sha": "2e9374c7f96ad6a7fa5b3f6863fb1ca01ef92337", "filename": "config/mh-sysv5", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-sysv5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmh-sysv5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-sysv5?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,5 +1,3 @@\n-RANLIB = true\n-\n # The l flag generates a warning from the SVR4 archiver, remove it.\n AR_FLAGS = cr\n "}, {"sha": "f5714f89e8a44a2ce354d81f48308f95f4250e44", "filename": "config/mt-v810", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmt-v810", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/config%2Fmt-v810", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmt-v810?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,4 +1,3 @@\n CC_FOR_TARGET = ca732 -ansi\n AS_FOR_TARGET = as732\n AR_FOR_TARGET = ar732\n-RANLIB_FOR_TARGET = true"}, {"sha": "875264f185765a9d5e375e28a7aee8c7a355a98a", "filename": "configure", "status": "modified", "additions": 3691, "deletions": 1197, "changes": 4888, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3"}, {"sha": "6d73ebd4859101d865ba78c762fce6901281e235", "filename": "configure.in", "status": "modified", "additions": 537, "deletions": 218, "changes": 755, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671aa708d903a497bde36f771b2af6b0d4c0fbe3/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671aa708d903a497bde36f771b2af6b0d4c0fbe3/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=671aa708d903a497bde36f771b2af6b0d4c0fbe3", "patch": "@@ -1,19 +1,3 @@\n-#! /bin/bash\n-##############################################################################\n-\n-## This file is a shell script fragment that supplies the information\n-## necessary to tailor a template configure script into the configure\n-## script appropriate for this directory.  For more information, check\n-## any existing configure script.  \n-\n-## Be warned, there are two types of configure.in files.  There are those\n-## used by Autoconf, which are macros which are expanded into a configure\n-## script by autoconf.  The other sort, of which this is one, is executed\n-## by Cygnus configure.  \n-\n-## For more information on these two systems, check out the documentation\n-## for 'Autoconf' (autoconf.texi) and 'Configure' (configure.texi).  \n-\n #   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n #   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n #\n@@ -32,29 +16,114 @@\n # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n ##############################################################################\n+### WARNING: this file contains embedded tabs.  Do not run untabify on this file.\n+\n+AC_INIT(move-if-change)\n+AC_CANONICAL_SYSTEM\n+AC_ARG_PROGRAM\n+\n+sinclude(config/acx.m4)\n+\n+# clear some things potentially inherited from environment.\n+\n+enable_threads=no\n+enable_shared=no\n+enable_libstdcxx_v3=yes\n+floating_point=default\n+gas=default\n+x11=default\n+\n+### we might need to use some other shell than /bin/sh for running subshells\n+### If we are on Windows, search for the shell.  This will permit people\n+### to not have /bin/sh, but to be able to see /SOME/PATH/sh configure\n+### without also having to set CONFIG_SHELL.  This code will work when\n+### using bash, which sets OSTYPE.\n+case \"${OSTYPE}\" in\n+*win32*)\n+  if test x${CONFIG_SHELL} = x ; then\n+    if test ! -f /bin/sh ; then\n+      if test x${SHELL} != x && test -f ${SHELL} ; then\n+\tCONFIG_SHELL=${SHELL}\n+\texport CONFIG_SHELL\n+      else\n+\tfor prog in sh sh.exe bash bash.exe; do\n+\t  IFS=\"${IFS=\t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+\t  for dir in $PATH; do\n+\t    test -z \"$dir\" && dir=.\n+\t    if test -f $dir/$prog; then\n+\t      CONFIG_SHELL=$dir/$prog\n+\t      export CONFIG_SHELL\n+\t      break\n+\t    fi\n+\t  done\n+\t  IFS=\"$save_ifs\"\n+\t  test -n \"${CONFIG_SHELL}\" && break\n+\tdone\n+      fi\n+    fi\n+  fi\n+  ;;\n+esac\n+\n+config_shell=${CONFIG_SHELL-/bin/sh}\n+\n+## this is a little touchy and won't always work, but...\n+##\n+## if the argv[[0]] starts with a slash then it is an absolute name that can (and\n+## must) be used as is.\n+##\n+## otherwise, if argv[[0]] has no slash in it, we can assume that it is on the\n+## path.  Since PATH might include \".\" we also add `pwd` to the end of PATH.\n+##\n+\n+progname=$0\n+# if PWD already has a value, it is probably wrong.\n+if test -n \"$PWD\" ; then PWD=`${PWDCMD-pwd}`; fi\n+\n+case \"${progname}\" in\n+/* | [[A-Za-z]]:[[\\\\/]]* ) ;;\n+*/*) ;;\n+*)\n+        PATH=$PATH:${PWD=`${PWDCMD-pwd}`} ; export PATH\n+        ;;\n+esac\n+\n+# Export original configure arguments for use by sub-configures.\n+TOPLEVEL_CONFIGURE_ARGUMENTS=\"$progname $@\"\n+export TOPLEVEL_CONFIGURE_ARGUMENTS\n+\n+moveifchange=${srcdir}/move-if-change\n+\n+# Set srcdir to \".\" if that's what it is.\n+# This is important for multilib support.\n+pwd=`${PWDCMD-pwd}`\n+srcpwd=`cd ${srcdir} ; ${PWDCMD-pwd}`\n+if test \"${pwd}\" = \"${srcpwd}\" ; then\n+  srcdir=.\n+fi\n+\n+topsrcdir=$srcpwd\n \n extra_host_args=\n # Define the trigger file to make sure configure will re-run whenever\n # the gcc version number changes.\n-if [ \"${with_gcc_version_trigger+set}\" = set ]; then\n-    gcc_version_trigger=\"$with_gcc_version_trigger\"\n-    gcc_version=`grep version_string ${with_gcc_version_trigger} | sed -e 's/.*\\\"\\([^ \\\"]*\\)[ \\\"].*/\\1/'`\n+if test \"${with_gcc_version_trigger+set}\" = set ; then\n+  gcc_version_trigger=\"$with_gcc_version_trigger\"\n+  gcc_version=`grep version_string ${with_gcc_version_trigger} | sed -e 's/.*\\\"\\([[^ \\\"]]*\\)[[ \\\"]].*/\\1/'`\n else\n-    # If gcc's sources are available, define the trigger file.\n-    if [ -f ${topsrcdir}/gcc/version.c ] ; then\n-\tgcc_version_trigger=${topsrcdir}/gcc/version.c\n-\tgcc_version=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\\\"\\([^ \\\"]*\\)[ \\\"].*/\\1/'`\n-\tcase \"$arguments\" in\n-\t  *--with-gcc-version-trigger=$gcc_version_trigger* )\n-\t    ;;\n-\t  * )\n-\t    # Add to all subconfigure arguments: build, host, and target.\n-\t    arguments=\"--with-gcc-version-trigger=$gcc_version_trigger $arguments\"\n-\t    ;;\n-\tesac\n-\t# This will be redundant when we start all subconfigures from the Makefile.\n-\textra_host_args=\"--with-gcc-version-trigger=$gcc_version_trigger $extra_host_args\"\n-    fi\n+  # If gcc's sources are available, define the trigger file.\n+  if test -f ${topsrcdir}/gcc/version.c ; then\n+    gcc_version_trigger=${topsrcdir}/gcc/version.c\n+    gcc_version=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\\\"\\([[^ \\\"]]*\\)[[ \\\"]].*/\\1/'`\n+    case \"$ac_configure_args\" in\n+      *--with-gcc-version-trigger=$gcc_version_trigger* )\n+        ;;\n+      * )\n+        # Add to all subconfigure arguments: build, host, and target.\n+        ac_configure_args=\"--with-gcc-version-trigger=$gcc_version_trigger $ac_configure_args\"\n+        ;;\n+    esac\n+  fi\n fi\n \n ### To add a new directory to the tree, first choose whether it is a target\n@@ -124,18 +193,11 @@ target_configdirs=`echo ${target_libs} ${target_tools}`\n \n ################################################################################\n \n-srctrigger=move-if-change\n srcname=\"gnu development package\"\n \n # This gets set non-empty for some net releases of packages.\n appdirs=\"\"\n \n-# per-host:\n-\n-# There is no longer anything interesting in the per-host section.\n-\n-# per-target:\n-\n # Define is_cross_compiler to save on calls to 'test'.\n is_cross_compiler=\n if test x\"${host}\" = x\"${target}\" ; then\n@@ -243,17 +305,17 @@ case \"${host}\" in\n   hppa*64*-*-*)\n     noconfigdirs=\"$noconfigdirs byacc\"\n     ;;\n-  i[3456]86-*-vsta)\n+  i[[3456]]86-*-vsta)\n     noconfigdirs=\"tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl itcl tix db snavigator gnuserv gettext\"\n     ;;\n-  i[3456]86-*-go32* | i[3456]86-*-msdosdjgpp*)\n+  i[[3456]]86-*-go32* | i[[3456]]86-*-msdosdjgpp*)\n     noconfigdirs=\"tcl tk expect dejagnu send-pr uudecode guile itcl tix db snavigator gnuserv libffi\"\n \t;;\n-  i[3456]86-*-mingw32*)\n+  i[[3456]]86-*-mingw32*)\n     # noconfigdirs=\"tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr uudecode dejagnu diff guile perl itcl tix db snavigator gnuserv\"\n      noconfigdirs=\"expect dejagnu autoconf automake send-pr rcs guile perl texinfo libtool\"\n \t;;\n-  i[3456]86-*-beos*)\n+  i[[3456]]86-*-beos*)\n      noconfigdirs=\"$noconfigdirs tk itcl tix libgui gdb\"\n      ;;\n   *-*-cygwin*)\n@@ -293,7 +355,7 @@ case \"${target}\" in\n   *-*-chorusos)\n     noconfigdirs=\"$noconfigdirs target-newlib target-libgloss ${libgcj}\"\n     ;;\n-  *-*-freebsd[12] | *-*-freebsd[12].* | *-*-freebsd*aout*)\n+  *-*-freebsd[[12]] | *-*-freebsd[[12]].* | *-*-freebsd*aout*)\n     noconfigdirs=\"$noconfigdirs target-newlib target-libgloss ${libgcj}\"\n     ;;\n   *-*-netbsd*)\n@@ -448,13 +510,13 @@ case \"${target}\" in\n     # No gdb or ld support yet.\n     noconfigdirs=\"$noconfigdirs tix readline mmalloc libgui itcl gdb ld\"\n     ;;\n-  i[3456]86-*-coff | i[3456]86-*-elf)\n+  i[[3456]]86-*-coff | i[[3456]]86-*-elf)\n     noconfigdirs=\"$noconfigdirs ${libgcj}\"\n     ;;\n-  i[34567]86-*-freebsd*)\n+  i[[34567]]86-*-freebsd*)\n     noconfigdirs=\"$noconfigdirs target-newlib target-libgloss\"\n     ;;\n-  i[3456]86-*-linux*)\n+  i[[3456]]86-*-linux*)\n     # The GCC port for glibc1 has no MD_FALLBACK_FRAME_STATE_FOR, so let's\n     # not build java stuff by default.\n     case \"${target}\" in\n@@ -473,13 +535,13 @@ case \"${target}\" in\n     # if the --with-newlib option has been given, because otherwise\n     # 'target-newlib' will appear in skipdirs.\n     ;;\n-  i[3456]86-*-mingw32*)\n+  i[[3456]]86-*-mingw32*)\n     target_configdirs=\"$target_configdirs target-mingw\"\n     noconfigdirs=\"$noconfigdirs expect target-libgloss ${libgcj}\"\n \n     # Can't build gdb for mingw32 if not native.\n     case \"${host}\" in\n-      i[3456]86-*-mingw32) ;; # keep gdb tcl tk expect etc.\n+      i[[3456]]86-*-mingw32) ;; # keep gdb tcl tk expect etc.\n       *) noconfigdirs=\"$noconfigdirs gdb tcl tk expect itcl tix db snavigator gnuserv\"\n          ;;\n     esac\n@@ -497,24 +559,24 @@ case \"${target}\" in\n          ;;\n     esac\n     ;;    \n-  i[3456]86-*-pe)\n+  i[[3456]]86-*-pe)\n     noconfigdirs=\"$noconfigdirs ${libstdcxx_version} target-libgloss ${libgcj}\"\n     ;;\n-  i[3456]86-*-sco3.2v5*)\n+  i[[3456]]86-*-sco3.2v5*)\n     # The linker does not yet know about weak symbols in COFF,\n     # and is not configured to handle mixed ELF and COFF.\n     noconfigdirs=\"$noconfigdirs ld target-libgloss ${libgcj}\"\n     ;;\n-  i[3456]86-*-sco*)\n+  i[[3456]]86-*-sco*)\n     noconfigdirs=\"$noconfigdirs gprof target-libgloss ${libgcj}\"\n     ;;\n-  i[3456]86-*-solaris2*)\n+  i[[3456]]86-*-solaris2*)\n     noconfigdirs=\"$noconfigdirs target-libgloss\"\n     ;;\n-  i[3456]86-*-sysv4*)\n+  i[[3456]]86-*-sysv4*)\n     noconfigdirs=\"$noconfigdirs target-libgloss ${libgcj}\"\n     ;;\n-  i[3456]86-*-beos*)\n+  i[[3456]]86-*-beos*)\n      noconfigdirs=\"$noconfigdirs gdb target-newlib target-libgloss ${libgcj}\"\n      ;;\n   m68hc11-*-*|m6811-*-*|m68hc12-*-*|m6812-*-*)\n@@ -612,9 +674,9 @@ case \"${target}\" in\n     ;;\n   sh-*-*)\n     case \"${host}\" in\n-      i[3456]86-*-vsta) ;; # don't add gprof back in\n-      i[3456]86-*-go32*) ;; # don't add gprof back in\n-      i[3456]86-*-msdosdjgpp*) ;; # don't add gprof back in\n+      i[[3456]]86-*-vsta) ;; # don't add gprof back in\n+      i[[3456]]86-*-go32*) ;; # don't add gprof back in\n+      i[[3456]]86-*-msdosdjgpp*) ;; # don't add gprof back in\n       *) skipdirs=`echo \" ${skipdirs} \" | sed -e 's/ gprof / /'` ;;\n     esac\n     noconfigdirs=\"$noconfigdirs target-libgloss ${libgcj}\"\n@@ -700,7 +762,7 @@ else\n \t\texit 1\n \tfi\n fi\n-enable_languages=`echo \"${enable_languages}\" | sed -e 's/[ \t,][ \t,]*/,/g' -e 's/,$//'`\n+enable_languages=`echo \"${enable_languages}\" | sed -e 's/[[ \t,]][[ \t,]]*/,/g' -e 's/,$//'`\n \n # First scan to see if an enabled language requires some other language.\n # We assume that a given config-lang.in will list all the language\n@@ -712,11 +774,11 @@ do\n        ;;\n     # The odd quoting in the next line works around\n     # an apparent bug in bash 1.12 on linux.\n-    ${srcdir}/gcc/[*]/config-lang.in)\n+    ${srcdir}/gcc/[[*]]/config-lang.in)\n        ;;\n     *)\n-       lang_alias=`sed -n -e 's,^language=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^language=\\([^ \t]*\\).*$,\\1,p' $lang`\n-       this_lang_requires=`sed -n -e 's,^lang_requires=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^lang_requires=\\([^ \t]*\\).*$,\\1,p' $lang`\n+       lang_alias=`sed -n -e 's,^language=[['\"'\"'\"'\"]]\\(.*\\)[[\"'\"'\"'\"']].*$,\\1,p' -e 's,^language=\\([[^ \t]]*\\).*$,\\1,p' $lang`\n+       this_lang_requires=`sed -n -e 's,^lang_requires=[['\"'\"'\"'\"]]\\(.*\\)[[\"'\"'\"'\"']].*$,\\1,p' -e 's,^lang_requires=\\([[^ \t]]*\\).*$,\\1,p' $lang`\n        for other in $this_lang_requires\n        do\n \t  case ,${enable_languages}, in\n@@ -741,12 +803,12 @@ do\n \t..) ;;\n \t# The odd quoting in the next line works around\n \t# an apparent bug in bash 1.12 on linux.\n-\t${srcdir}/gcc/[*]/config-lang.in) ;;\n+\t${srcdir}/gcc/[[*]]/config-lang.in) ;;\n \t*)\n-\t  lang_alias=`sed -n -e 's,^language=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^language=\\([^ \t]*\\).*$,\\1,p' $lang`\n-\t  this_lang_libs=`sed -n -e 's,^target_libs=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^target_libs=\\([^ \t]*\\).*$,\\1,p' $lang`\n-\t  this_lang_dirs=`sed -n -e 's,^lang_dirs=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^lang_dirs=\\([^ \t]*\\).*$,\\1,p' $lang`\n-\t  build_by_default=`sed -n -e 's,^build_by_default=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^build_by_default=\\([^ \t]*\\).*$,\\1,p' $lang`\n+\t  lang_alias=`sed -n -e 's,^language=[['\"'\"'\"'\"]]\\(.*\\)[[\"'\"'\"'\"']].*$,\\1,p' -e 's,^language=\\([[^ \t]]*\\).*$,\\1,p' $lang`\n+\t  this_lang_libs=`sed -n -e 's,^target_libs=[['\"'\"'\"'\"]]\\(.*\\)[[\"'\"'\"'\"']].*$,\\1,p' -e 's,^target_libs=\\([[^ \t]]*\\).*$,\\1,p' $lang`\n+\t  this_lang_dirs=`sed -n -e 's,^lang_dirs=[['\"'\"'\"'\"]]\\(.*\\)[[\"'\"'\"'\"']].*$,\\1,p' -e 's,^lang_dirs=\\([[^ \t]]*\\).*$,\\1,p' $lang`\n+\t  build_by_default=`sed -n -e 's,^build_by_default=[['\"'\"'\"'\"]]\\(.*\\)[[\"'\"'\"'\"']].*$,\\1,p' -e 's,^build_by_default=\\([[^ \t]]*\\).*$,\\1,p' $lang`\n \t  if test \"x$lang_alias\" = x\n \t  then\n \t\techo \"$lang doesn't set \\$language.\" 1>&2\n@@ -958,16 +1020,18 @@ done\n \n # Work in distributions that contain no compiler tools, like Autoconf.\n tentative_cc=\"\"\n+host_makefile_frag=/dev/null\n if test -d ${srcdir}/config ; then\n case \"${host}\" in\n   m68k-hp-hpux*)\n     # Avoid \"too much defining\" errors from HPUX compiler.\n     tentative_cc=\"cc -Wp,-H256000\"\n-    host_makefile_frag=\"config/mh-hp300\"\n+    # If \"ar\" in $PATH is GNU ar, the symbol table may need rebuilding.\n+    # If it's HP/UX ar, this should be harmless.\n+    RANLIB=\"ar ts\"\n     ;;\n   m68k-apollo-sysv*)\n     tentative_cc=\"cc -A ansi -A runtype,any -A systype,any -U__STDC__ -DUSG\"\n-    host_makefile_frag=\"config/mh-apollo68\"\n     ;;\n   m68k-apollo-bsd*)\n     #None of the Apollo compilers can compile gas or binutils.  The preprocessor\n@@ -976,8 +1040,8 @@ case \"${host}\" in\n     # the apollo compiler\" (the preferred version of GCC could be called cc,\n     # or whatever), but I'm not sure leaving CC as cc is any better...\n     #CC=cc -A ansi -A runtype,any -A systype,any -U__STDC__ -DNO_STDARG\n+    # Used to have BISON=yacc.\n     tentative_cc=gcc\n-    host_makefile_frag=\"config/mh-a68bsd\"\n     ;;\n   m88k-dg-dgux*)\n     tentative_cc=\"gcc -Wall -ansi -D__using_DGUX\"\n@@ -989,7 +1053,6 @@ case \"${host}\" in\n     host_makefile_frag=\"config/mh-cxux\"\n     ;;\n   m88k-motorola-sysv*)\n-    host_makefile_frag=\"config/mh-delta88\"\n     ;;\n   mips*-dec-ultrix*)\n     tentative_cc=\"cc -Wf,-XNg1000\"\n@@ -1000,21 +1063,12 @@ case \"${host}\" in\n     tentative_cc=\"cc -ZXNd=5000 -ZXNg=1000\"\n     host_makefile_frag=\"config/mh-necv4\"\n     ;;\n-  mips*-sgi-irix6*)\n-    host_makefile_frag=\"config/mh-irix6\"\n-    ;;\n-  mips*-sgi-irix5*)\n-    host_makefile_frag=\"config/mh-irix5\"\n-    ;;\n   mips*-sgi-irix4*)\n     # Tell compiler to use K&R C.  We can't compile under the SGI Ansi\n     # environment.  Also bump switch table size so that cp-parse will\n     # compile.  Bump string length limit so linker builds.\n     tentative_cc=\"cc -cckr -Wf,-XNg1500 -Wf,-XNk1000 -Wf,-XNh2000 -Wf,-XNl8192\"\n     ;;\n-  mips*-sgi-irix3*)\n-    host_makefile_frag=\"config/mh-sysv\"\n-    ;;\n   mips*-*-sysv4*)\n     host_makefile_frag=\"config/mh-sysv4\"\n     ;;\n@@ -1032,26 +1086,23 @@ case \"${host}\" in\n     # This is not part of CFLAGS because perhaps not all C compilers have this\n     # option.\n     tentative_cc=\"cc -systype sysv\"\n-    host_makefile_frag=\"config/mh-riscos\"\n     ;;\n   i370-ibm-opened*)\n     tentative_cc=\"c89\"\n-    host_makefile_frag=\"config/mh-openedition\"\n     ;;\n-  i[3456]86-*-sysv5*)\n+  i[[3456]]86-*-sysv5*)\n     host_makefile_frag=\"config/mh-sysv5\"\n     ;;\n-  i[3456]86-*-dgux*)\n+  i[[3456]]86-*-dgux*)\n     tentative_cc=\"gcc -Wall -ansi -D__using_DGUX\"\n     host_makefile_frag=\"config/mh-dgux386\"\n     ;;\n-  i[3456]86-ncr-sysv4.3*)\n+  i[[3456]]86-ncr-sysv4.3*)\n     # The MetaWare compiler will generate a copyright message unless you\n     # turn it off by adding the -Hnocopyr flag.\n     tentative_cc=\"cc -Hnocopyr\"\n-    host_makefile_frag=\"config/mh-ncrsvr43\"\n     ;;\n-  i[3456]86-ncr-sysv4*)\n+  i[[3456]]86-ncr-sysv4*)\n     # for an NCR 3000 (i486/SVR4) system.\n     # The NCR 3000 ships with a MetaWare compiler installed as /bin/cc.\n     # This compiler not only emits obnoxious copyright messages every time\n@@ -1060,28 +1111,21 @@ case \"${host}\" in\n     tentative_cc=\"/usr/ccs/ATT/cc\"\n     host_makefile_frag=\"config/mh-ncr3000\"\n     ;;\n-  i[3456]86-*-sco3.2v5*)\n-    host_makefile_frag=\"config/mh-sysv\"\n+  i[[3456]]86-*-sco3.2v5*)\n     ;;\n-  i[3456]86-*-sco*)\n+  i[[3456]]86-*-sco*)\n     # The native C compiler botches some simple uses of const.  Unfortunately,\n     # it doesn't defined anything like \"__sco__\" for us to test for in ansidecl.h.\n     tentative_cc=\"cc -Dconst=\"\n     host_makefile_frag=\"config/mh-sco\"\n     ;;\n-  i[3456]86-*-udk*)\n+  i[[3456]]86-*-udk*)\n     host_makefile_frag=\"config/mh-sysv5\"\n     ;;\n-  i[3456]86-*-isc*)\n-    host_makefile_frag=\"config/mh-sysv\"\n-    ;;\n-  i[3456]86-*-solaris2*)\n+  i[[3456]]86-*-solaris2*)\n     host_makefile_frag=\"config/mh-sysv4\"\n     ;;\n-  i[3456]86-*-aix*)\n-    host_makefile_frag=\"config/mh-aix386\"\n-    ;;\n-  i[3456]86-*-msdosdjgpp*)\n+  i[[3456]]86-*-msdosdjgpp*)\n     host_makefile_frag=\"config/mh-djgpp\"\n     ;;\n   *-cygwin*)\n@@ -1105,17 +1149,11 @@ case \"${host}\" in\n     # without overflowing the jump tables (-J says to use a 32 bit table)\n     tentative_cc=\"cc -J\"\n     ;;\n-  *-hp-hpux[78]*)\n-    tentative_cc=\"cc -Wp,-H256000\"\n-    host_makefile_frag=\"config/mh-hpux8\"\n-    ;;\n   *-hp-hpux*)\n     tentative_cc=\"cc -Wp,-H256000\"\n-    host_makefile_frag=\"config/mh-hpux\"\n     ;;\n   *-*-hiux*)\n     tentative_cc=\"cc -Wp,-H256000\"\n-    host_makefile_frag=\"config/mh-hpux\"\n     ;;\n   rs6000-*-lynxos*)\n     # /bin/cc is less than useful for our purposes.  Always use GCC\n@@ -1129,26 +1167,15 @@ case \"${host}\" in\n   *-*-sysv4*)\n     host_makefile_frag=\"config/mh-sysv4\"\n     ;;\n-  *-*-sysv*)\n-    host_makefile_frag=\"config/mh-sysv\"\n-    ;;\n esac\n fi\n \n-rm -f mh-frag\n-if test -n \"${host_makefile_frag}\" ; then\n-  for f in ${host_makefile_frag}\n-  do\n-    cat ${srcdir}/$f >> mh-frag\n-  done\n-  host_makefile_frag=mh-frag\n-fi\n-\n extra_arflags_for_target=\n extra_nmflags_for_target=\n extra_ranlibflags_for_target=\n+target_makefile_frag=/dev/null\n case \"${target}\" in\n-  i[3456]86-*-netware*)\n+  i[[3456]]86-*-netware*)\n     target_makefile_frag=\"config/mt-netware\"\n     ;;\n   powerpc-*-netware*)\n@@ -1157,7 +1184,7 @@ case \"${target}\" in\n   *-*-linux*)\n     target_makefile_frag=\"config/mt-linux\"\n     ;;\n-  *-*-aix4.[3456789]* | *-*-aix[56789].*)\n+  *-*-aix4.[[3456789]]* | *-*-aix[[56789]].*)\n     # nm and ar from AIX 4.3 and above require -X32_64 flag to all ar and nm \n     # commands to handle both 32-bit and 64-bit objects.  These flags are\n     # harmless if we're using GNU nm or ar.\n@@ -1173,7 +1200,7 @@ case \"${target}\" in\n     ;;\n esac\n \n-alphaieee_frag=\n+alphaieee_frag=/dev/null\n case $target in\n   alpha*-*-*)\n     # This just makes sure to use the -mieee option to build target libs.\n@@ -1185,7 +1212,7 @@ esac\n # If --enable-target-optspace always use -Os instead of -O2 to build\n # the target libraries, similarly if it is not specified, use -Os\n # on selected platforms.\n-ospace_frag=\n+ospace_frag=/dev/null\n case \"${enable_target_optspace}:${target}\" in\n   yes:*)\n     ospace_frag=\"config/mt-ospace\"\n@@ -1203,15 +1230,6 @@ case \"${enable_target_optspace}:${target}\" in\n     ;;\n esac\n \n-rm -f mt-frag\n-if test -n \"${target_makefile_frag}${alphaieee_frag}${ospace_frag}\" ; then\n-  for f in ${target_makefile_frag} ${alphaieee_frag} ${ospace_frag}\n-  do\n-    cat ${srcdir}/$f >> mt-frag\n-  done\n-  target_makefile_frag=mt-frag\n-fi\n-\n # Set with_gnu_as and with_gnu_ld as appropriate.\n #\n # This is done by determining whether or not the appropriate directory\n@@ -1288,9 +1306,6 @@ case \"${host}\" in\n     ;;\n esac\n \n-# This will go away when we start subconfigures from the Makefile.\n-withoptions=\"${withoptions} ${extra_host_args}\"\n-\n # If we aren't going to be using gcc, see if we can extract a definition\n # of CC from the fragment.\n # Actually, use the 'pre-extracted' version above.\n@@ -1310,7 +1325,255 @@ if test -z \"${CC}\" && test \"${build}\" = \"${host}\" ; then\n   fi\n fi\n \n-# post-target:\n+# Some systems (e.g., one of the i386-aix systems the gas testers are\n+# using) don't handle \"\\$\" correctly, so don't use it here.\n+tooldir='$(exec_prefix)'/${target_alias}\n+build_tooldir=${tooldir}\n+\n+# Generate a default definition for YACC.  This is used if the makefile can't\n+# locate bison or byacc in objdir.\n+\n+for prog in 'bison -y' byacc yacc\n+do\n+  set dummy $prog; tmp=$2\n+  IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+  for dir in $PATH; do\n+    test -z \"$dir\" && dir=.\n+    if test -f $dir/$tmp; then\n+      DEFAULT_YACC=\"$prog\"\n+      break\n+    fi\n+  done\n+  IFS=\"$save_ifs\"\n+\n+  test -n \"$DEFAULT_YACC\" && break\n+done\n+\n+# Generate a default definition for M4.  This is used if the makefile can't\n+# locate m4 in objdir.\n+\n+for prog in gm4 gnum4 m4\n+do\n+  set dummy $prog; tmp=$2\n+  IFS=\"${IFS=   }\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+  for dir in $PATH; do\n+    test -z \"$dir\" && dir=.\n+    if test -f $dir/$tmp; then\n+      DEFAULT_M4=\"$prog\"\n+      break\n+    fi\n+  done\n+  IFS=\"$save_ifs\"\n+\n+  test -n \"$DEFAULT_M4\" && break\n+done\n+\n+# Generate a default definition for LEX.  This is used if the makefile can't\n+# locate flex in objdir.\n+\n+for prog in flex lex\n+do\n+  set dummy $prog; tmp=$2\n+  IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+  for dir in $PATH; do\n+    test -z \"$dir\" && dir=.\n+    if test -f $dir/$tmp; then\n+      DEFAULT_LEX=\"$prog\"\n+      break\n+    fi\n+  done\n+  IFS=\"$save_ifs\"\n+\n+  test -n \"$DEFAULT_LEX\" && break\n+done\n+\n+if test \"${build}\" != \"${host}\" ; then\n+  # If we are doing a Canadian Cross, in which the host and build systems\n+  # are not the same, we set reasonable default values for the tools.\n+\n+  BISON=${BISON-bison}\n+  CC=${CC-${host_alias}-gcc}\n+  CFLAGS=${CFLAGS-\"-g -O2\"}\n+  CXX=${CXX-${host_alias}-c++}\n+  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n+  CC_FOR_BUILD=${CC_FOR_BUILD-gcc}\n+  CC_FOR_TARGET=${CC_FOR_TARGET-${target_alias}-gcc}\n+  CXX_FOR_TARGET=${CXX_FOR_TARGET-${target_alias}-c++}\n+  GCJ_FOR_TARGET=${GCJ_FOR_TARGET-${target_alias}-gcj}\n+  GCC_FOR_TARGET=${GCC_FOR_TARGET-${CC_FOR_TARGET-${target_alias}-gcc}}\n+  BUILD_PREFIX=${build_alias}-\n+  BUILD_PREFIX_1=${build_alias}-\n+  MAKEINFO=${MAKEINFO-makeinfo}\n+\n+  if test -z \"${YACC}\" ; then\n+    IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+    for dir in $PATH; do\n+      test -z \"$dir\" && dir=.\n+      if test -f $dir/bison; then\n+\tYACC=\"bison -y\"\n+\tbreak\n+      fi\n+      if test -f $dir/byacc; then\n+\tYACC=byacc\n+\tbreak\n+      fi\n+      if test -f $dir/yacc; then\n+\tYACC=yacc\n+\tbreak\n+      fi\n+    done\n+    IFS=\"$save_ifs\"\n+    if test -z \"${YACC}\" ; then\n+      YACC=\"bison -y\"\n+    fi\n+  fi\n+\n+  if test -z \"${LEX}\" ; then\n+    IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+    for dir in $PATH; do\n+      test -z \"$dir\" && dir=.\n+      if test -f $dir/flex; then\n+\tLEX=flex\n+\tbreak\n+      fi\n+      if test -f $dir/lex; then\n+\tLEX=lex\n+\tbreak\n+      fi\n+    done\n+    IFS=\"$save_ifs\"\n+    LEX=${LEX-flex}\n+  fi\n+\n+else\n+  # Set reasonable default values for some tools even if not Canadian.\n+  # Of course, these are different reasonable default values, originally\n+  # specified directly in the Makefile.\n+  # We don't export, so that autoconf can do its job.\n+  # Note that all these settings are above the fragment inclusion point\n+  # in Makefile.in, so can still be overridden by fragments.\n+  # This is all going to change when we autoconfiscate...\n+\n+  BISON=\"\\$(USUAL_BISON)\"\n+  CC_FOR_BUILD=\"\\$(CC)\"\n+  GCC_FOR_TARGET=\"\\$(USUAL_GCC_FOR_TARGET)\"\n+  BUILD_PREFIX=\n+  BUILD_PREFIX_1=loser-\n+  MAKEINFO=\"\\$(USUAL_MAKEINFO)\"\n+  LEX=\"\\$(USUAL_LEX)\"\n+  YACC=\"\\$(USUAL_YACC)\"\n+\n+  # If CC is still not set, try to get gcc.\n+  if test -z \"${CC}\" ; then\n+    IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+    for dir in $PATH; do\n+      test -z \"$dir\" && dir=.\n+      if test -f $dir/gcc; then\n+\tCC=\"gcc\"\n+\techo 'void f(){}' > conftest.c\n+\tif test -z \"`${CC} -g -c conftest.c 2>&1`\"; then\n+\t  CFLAGS=${CFLAGS-\"-g -O2\"}\n+\t  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n+\telse\n+\t  CFLAGS=${CFLAGS-\"-O2\"}\n+\t  CXXFLAGS=${CXXFLAGS-\"-O2\"}\n+\tfi\n+\trm -f conftest*\n+\tbreak\n+      fi\n+    done\n+    IFS=\"$save_ifs\"\n+    CC=${CC-cc}\n+  else\n+    if test -z \"${CFLAGS}\"; then\n+      # Here CC is set but CFLAGS is not.  Use a quick hack to use -O2 if CC\n+      # is set to a version of gcc.\n+      case \"${CC}\" in\n+      *gcc)\n+\techo 'void f(){}' > conftest.c\n+\tif test -z \"`${CC} -g -c conftest.c 2>&1`\"; then\n+\t  CFLAGS=${CFLAGS-\"-g -O2\"}\n+\t  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n+\telse\n+\t  CFLAGS=${CFLAGS-\"-O2\"}\n+\t  CXXFLAGS=${CXXFLAGS-\"-O2\"}\n+\tfi\n+\trm -f conftest*\n+\t;;\n+      esac\n+    fi\n+  fi\n+\n+  CXX=${CXX-\"c++\"}\n+  CFLAGS=${CFLAGS-\"-g\"}\n+  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n+fi\n+\n+# FIXME Should this be done recursively ??? (Useful for e.g. gdbtest)\n+# Set up the list of links to be made.\n+# ${links} is the list of link names, and ${files} is the list of names to link to.\n+\n+# Make the links.\n+configlinks=\"${links}\"\n+if test -r ./config.status  ; then\n+  mv -f ./config.status ./config.back\n+fi\n+while test -n \"${files}\" ; do\n+  # set file to car of files, files to cdr of files\n+  set ${files}; file=$1; shift; files=$*\n+  set ${links}; link=$1; shift; links=$*\n+\n+  if test ! -r ${srcdir}/${file} ; then\n+    if test ! -r ${file} ; then\n+      echo '***' \"${progname}: cannot create a link \\\"${link}\\\",\" 1>&2\n+      echo '***' \"since the file \\\"${srcdir}/${file}\\\" does not exist.\" 1>&2\n+      exit 1\n+    else\n+      srcfile=${file}\n+    fi\n+  else\n+    srcfile=${srcdir}/${file}\n+  fi\n+\n+  ${remove} -f ${link}\n+  # Make a symlink if possible, otherwise try a hard link\n+  if ${symbolic_link} ${srcfile} ${link} >/dev/null 2>&1 ; then\n+    true\n+  else\n+    # We need to re-remove the file because Lynx leaves a \n+    # very strange directory there when it fails an NFS symlink.\n+    ${remove} -r -f ${link}\n+    ${hard_link} ${srcfile} ${link}\n+  fi\n+  if test ! -r ${link} ; then\n+    echo '***' \"${progname}: unable to link \\\"${link}\\\" to \\\"${srcfile}\\\".\" 1>&2\n+    exit 1\n+  fi\n+\n+  echo \"Linked \\\"${link}\\\" to \\\"${srcfile}\\\".\"\n+done\n+\n+# Create a .gdbinit file which runs the one in srcdir\n+# and tells GDB to look there for source files.\n+\n+if test -r ${srcdir}/.gdbinit ; then\n+  case ${srcdir} in\n+    .) ;;\n+    *) cat > ./.gdbinit <<EOF\n+# ${NO_EDIT}\n+dir ${srcdir}\n+dir .\n+source ${srcdir}/.gdbinit\n+EOF\n+    ;;\n+  esac\n+fi\n+\n+# record if we want runtime library stuff installed in libsubdir.\n+# Blank means no.\n+if test -z \"${enable_version_specific_runtime_libs}\"; then\n+  enable_version_specific_runtime_libs=no\n+fi\n \n # Make sure that the compiler is able to generate an executable.  If it\n # can't, we are probably in trouble.  We don't care whether we can run the\n@@ -1338,7 +1601,7 @@ rm -f conftest*\n case \"${host}\" in\n   sparc-sun-solaris2*)\n       CCBASE=\"`echo ${CC-cc} | sed 's/ .*$//'`\"\n-      if test \"`type $CCBASE | sed 's/^[^/]*//'`\" = \"/usr/ucb/cc\" ; then\n+      if test \"`type $CCBASE | sed 's/^[[^/]]*//'`\" = \"/usr/ucb/cc\" ; then\n           could_use=\n           test -d /opt/SUNWspro/bin && could_use=\"/opt/SUNWspro/bin\"\n           if test -d /opt/cygnus/bin ; then\n@@ -1369,18 +1632,12 @@ if test \"${shared}\" = \"yes\" ; then\n else\n   SET_LIB_PATH=\n fi\n-sed -e \"s/@SET_LIB_PATH@/${SET_LIB_PATH}/\" Makefile > Makefile.tem\n-rm -f Makefile\n-mv -f Makefile.tem Makefile\n \n \n case \"${host}\" in\n   *-*-hpux*) RPATH_ENVVAR=SHLIB_PATH ;;\n   *) RPATH_ENVVAR=LD_LIBRARY_PATH ;;\n esac\n-sed -e \"s/@RPATH_ENVVAR@/${RPATH_ENVVAR}/\" Makefile > Makefile.tem\n-rm -f Makefile\n-mv -f Makefile.tem Makefile\n \n # Record target_configdirs and the configure arguments for target and\n # build configuration in Makefile.\n@@ -1443,11 +1700,8 @@ for item in ${all_build_modules} ${all_host_modules} ${all_target_modules} \\\n \t; do\n   echo \"maybe-${item}: ${item}\" >> maybedep.tmp\n done\n-sed -e '/@maybe_dependencies@/r maybedep.tmp' \\\n-    -e 's/@maybe_dependencies@//' Makefile > Makefile.tem\n-rm -f Makefile\n-mv -f Makefile.tem Makefile\n-rm -f maybedep.tmp\n+maybe_dependencies=maybedep.tmp\n+AC_SUBST_FILE(maybe_dependencies)\n \n # Create the serialization dependencies.  This uses a temporary file.\n \n@@ -1478,21 +1732,18 @@ for item in ${target_configdirs} ; do\n   esac\n   olditem=${item}\n done\n-sed -e '/@serialization_dependencies@/r serdep.tmp' \\\n-    -e 's/@serialization_dependencies@//' Makefile > Makefile.tem\n-rm -f Makefile\n-mv -f Makefile.tem Makefile\n-rm -f serdep.tmp\n+serialization_dependencies=serdep.tmp\n+AC_SUBST_FILE(serialization_dependencies)\n \n # Base args.  Strip norecursion, cache-file, srcdir, host, build, target.\n # These are the ones we might not want to pass down to subconfigures.\n-baseargs=`echo \"${arguments}\" | \\\n-\tsed -e 's/--no[^ \t]*//' \\\n-\t    -e 's/--cache[a-z-]*=[^ \t]*//' \\\n-\t    -e 's/--sr[a-z-]*=[^ \t]*//' \\\n-\t    -e 's/--ho[a-z-]*=[^ \t]*//' \\\n-\t    -e 's/--bu[a-z-]*=[^ \t]*//' \\\n-\t    -e 's/--ta[a-z-]*=[^ \t]*//'`\n+baseargs=`echo \"${ac_configure_args}\" | \\\n+\tsed -e 's/--no[[^ \t]]*//' \\\n+\t    -e 's/--cache[[a-z-]]*=[[^ \t]]*//' \\\n+\t    -e 's/--sr[[a-z-]]*=[[^ \t]]*//' \\\n+\t    -e 's/--ho[[a-z-]]*=[[^ \t]]*//' \\\n+\t    -e 's/--bu[[a-z-]]*=[[^ \t]]*//' \\\n+\t    -e 's/--ta[[a-z-]]*=[[^ \t]]*//'`\n \n # For the build-side libraries, we just need to pretend we're native,\n # and not use the same cache file.  Multilibs are neither needed nor\n@@ -1503,7 +1754,7 @@ build_configargs=\"--cache-file=../config.cache --build=${build_alias} --host=${b\n case \"${cache_file}\" in\n \"\") # empty\n   cache_file_option=\"\" ;;\n-/* | [A-Za-z]:[\\\\/]* ) # absolute path\n+/* | [[A-Za-z]]:[[\\\\/]]* ) # absolute path\n   cache_file_option=\"--cache-file=${cache_file}\" ;;\n *) # relative path\n   cache_file_option=\"--cache-file=../${cache_file}\" ;;\n@@ -1599,7 +1850,7 @@ case \" $target_configdirs \" in\n    fi\n \n    case \"${target}-${is_cross_compiler}\" in\n-   i[3456]86-*-linux*-no)\n+   i[[3456]]86-*-linux*-no)\n       # Here host == target, so we don't need to build gcc,\n       # so we don't want to discard standard headers.\n       FLAGS_FOR_TARGET=`echo \" $FLAGS_FOR_TARGET \" | sed -e 's/ -nostdinc / /'`\n@@ -1640,12 +1891,7 @@ elif test \"$host\" = \"$target\"; then\n else\n   CC_FOR_TARGET=`echo gcc | sed -e 's/x/x/' ${program_transform_name}`\n fi\n-# On Canadian crosses, configure reads CC_FOR_TARGET from Makefile,\n-# if Makefile exists.  Prevent $(FLAGS_FOR_TARGET) from being duplicated.\n-case $CC_FOR_TARGET in\n-*' $(FLAGS_FOR_TARGET)') ;;\n-*) CC_FOR_TARGET=$CC_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;\n-esac\n+CC_FOR_TARGET=$CC_FOR_TARGET' $(FLAGS_FOR_TARGET)'\n \n if test \"x${GCJ_FOR_TARGET+set}\" = xset; then\n   :\n@@ -1656,10 +1902,7 @@ elif test \"$host\" = \"$target\"; then\n else\n   GCJ_FOR_TARGET=`echo gcj | sed -e 's/x/x/' ${program_transform_name}`\n fi\n-case $GCJ_FOR_TARGET in\n-*' $(FLAGS_FOR_TARGET)') ;;\n-*) GCJ_FOR_TARGET=$GCJ_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;\n-esac\n+GCJ_FOR_TARGET=$GCJ_FOR_TARGET' $(FLAGS_FOR_TARGET)'\n \n # Don't use libstdc++-v3's flags to configure/build itself.\n libstdcxx_flags='`test ! -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/testsuite_flags || $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/testsuite_flags --build-includes` -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs'\n@@ -1682,26 +1925,20 @@ else\n   CXX_FOR_TARGET=`echo c++ | sed -e 's/x/x/' ${program_transform_name}`\n   RAW_CXX_FOR_TARGET=${CXX_FOR_TARGET}\n fi\n-case $CXX_FOR_TARGET in\n-*' $(FLAGS_FOR_TARGET)') ;;\n-*) CXX_FOR_TARGET=$CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;\n-esac\n-case $RAW_CXX_FOR_TARGET in\n-*' $(FLAGS_FOR_TARGET)') ;;\n-*) RAW_CXX_FOR_TARGET=$RAW_CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;\n-esac\n+CXX_FOR_TARGET=$CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)'\n+RAW_CXX_FOR_TARGET=$RAW_CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)'\n \n-qCXX_FOR_TARGET=`echo \"$CXX_FOR_TARGET\" | sed 's,[&%],\\\\\\&,g'`\n-qRAW_CXX_FOR_TARGET=`echo \"$RAW_CXX_FOR_TARGET\" | sed 's,[&%],\\\\\\&,g'`\n+qCXX_FOR_TARGET=`echo \"$CXX_FOR_TARGET\" | sed 's,[[&%]],\\\\\\&,g'`\n+qRAW_CXX_FOR_TARGET=`echo \"$RAW_CXX_FOR_TARGET\" | sed 's,[[&%]],\\\\\\&,g'`\n \n # We want to defer the evaluation of `cmd`s and shell variables in\n # CXX_FOR_TARGET when recursing in the top-level Makefile, such as for\n # bootstrap.  We'll enclose CXX_FOR_TARGET_FOR_RECURSIVE_MAKE in single\n # quotes, but we still have to duplicate `$'s so that shell variables\n # can be expanded by the nested make as shell variables, not as make\n # macros.\n-qqCXX_FOR_TARGET=`echo \"$qCXX_FOR_TARGET\" | sed -e 's,[$][$],$$$$,g'`\n-qqRAW_CXX_FOR_TARGET=`echo \"$qRAW_CXX_FOR_TARGET\" | sed -e 's,[$][$],$$$$,g'`\n+qqCXX_FOR_TARGET=`echo \"$qCXX_FOR_TARGET\" | sed -e 's,[[$]][[$]],$$$$,g'`\n+qqRAW_CXX_FOR_TARGET=`echo \"$qRAW_CXX_FOR_TARGET\" | sed -e 's,[[$]][[$]],$$$$,g'`\n \n # Wrap CC_FOR_TARGET and friends, for certain types of builds.\n CC_FOR_TARGET=\"\\$(STAGE_CC_WRAPPER) ${CC_FOR_TARGET}\"\n@@ -1711,38 +1948,120 @@ RAW_CXX_FOR_TARGET=\"\\$(STAGE_CC_WRAPPER) ${qRAW_CXX_FOR_TARGET}\"\n CXX_FOR_TARGET_FOR_RECURSIVE_MAKE=\"\\$(STAGE_CC_WRAPPER) ${qqCXX_FOR_TARGET}\"\n RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE=\"\\$(STAGE_CC_WRAPPER) ${qqRAW_CXX_FOR_TARGET}\"\n \n-sedtemp=sed.$$\n-cat >$sedtemp <<EOF\n-s%@GDB_TK@%${GDB_TK}%\n-s%@configure_build_modules@%${configure_build_modules}%\n-s%@all_build_modules@%${all_build_modules}%\n-s%@configure_host_modules@%${configure_host_modules}%\n-s%@all_host_modules@%${all_host_modules}%\n-s%@check_host_modules@%${check_host_modules}%\n-s%@install_host_modules@%${install_host_modules}%\n-s%@install_host_modules_nogcc@%${install_host_modules_nogcc}%\n-s%@configure_target_modules@%${configure_target_modules}%\n-s%@all_target_modules@%${all_target_modules}%\n-s%@check_target_modules@%${check_target_modules}%\n-s%@install_target_modules@%${install_target_modules}%\n-s:@target_configdirs@:${target_configdirs}:\n-s%@target_configargs@%${target_configargs}%\n-s%@FLAGS_FOR_TARGET@%${FLAGS_FOR_TARGET}%\n-s%@CC_FOR_TARGET@%${CC_FOR_TARGET}%\n-s%@GCJ_FOR_TARGET@%${GCJ_FOR_TARGET}%\n-s%@CXX_FOR_TARGET@%${CXX_FOR_TARGET}%\n-s%@RAW_CXX_FOR_TARGET@%${RAW_CXX_FOR_TARGET}%\n-s%@CXX_FOR_TARGET_FOR_RECURSIVE_MAKE@%${CXX_FOR_TARGET_FOR_RECURSIVE_MAKE}%\n-s%@RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE@%${RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE}%\n-s%@target_subdir@%${target_subdir}%\n-s%@build_subdir@%${build_subdir}%\n-s%@build_configargs@%${build_configargs}%\n-s%@gxx_include_dir@%${gxx_include_dir}%\n-s%@libstdcxx_incdir@%${libstdcxx_incdir}%\n-s%@host_configargs@%${host_configargs}%\n-EOF\n-sed -f $sedtemp Makefile > Makefile.tem\n-rm -f Makefile $sedtemp\n-mv -f Makefile.tem Makefile\n+# Makefile fragments.\n+host_makefile_frag=${srcdir}/${host_makefile_frag}\n+target_makefile_frag=${srcdir}/${target_makefile_frag}\n+alphaieee_frag=${srcdir}/${alphaieee_frag}\n+ospace_frag=${srcdir}/${ospace_frag}\n+AC_SUBST_FILE(host_makefile_frag)\n+AC_SUBST_FILE(target_makefile_frag)\n+AC_SUBST_FILE(alphaieee_frag)\n+AC_SUBST_FILE(ospace_frag)\n+\n+# Miscellanea: directories, flags, etc.\n+AC_SUBST(SET_LIB_PATH)\n+AC_SUBST(RPATH_ENVVAR)\n+AC_SUBST(BUILD_PREFIX)\n+AC_SUBST(BUILD_PREFIX_1)\n+AC_SUBST(configlinks)\n+AC_SUBST(enable_shared)\n+AC_SUBST(enable_threads)\n+AC_SUBST(enable_version_specific_runtime_libs)\n+AC_SUBST(gcc_version_trigger)\n+AC_SUBST(gcc_version)\n+AC_SUBST(tooldir)\n+AC_SUBST(build_tooldir)\n+AC_SUBST(GDB_TK)\n+AC_SUBST(gxx_include_dir)\n+AC_SUBST(libstdcxx_incdir)\n+\n+# Build module lists & subconfigure args.\n+AC_SUBST(build_subdir)\n+AC_SUBST(build_configargs)\n+AC_SUBST(configure_build_modules)\n+AC_SUBST(all_build_modules)\n+\n+# Host module lists & subconfigure args.\n+AC_SUBST(host_configargs)\n+AC_SUBST(configdirs)\n+AC_SUBST(configure_host_modules)\n+AC_SUBST(all_host_modules)\n+AC_SUBST(check_host_modules)\n+AC_SUBST(install_host_modules)\n+AC_SUBST(install_host_modules_nogcc)\n+\n+# Target module lists & subconfigure args.\n+AC_SUBST(target_subdir)\n+AC_SUBST(target_configargs)\n+AC_SUBST(target_configdirs)\n+AC_SUBST(configure_target_modules)\n+AC_SUBST(all_target_modules)\n+AC_SUBST(check_target_modules)\n+AC_SUBST(install_target_modules)\n+\n+# Build tools.\n+AC_SUBST(BISON)\n+AC_SUBST(CC_FOR_BUILD)\n+AC_SUBST(LEX)\n+AC_SUBST(MAKEINFO)\n+AC_SUBST(YACC)\n+AC_SUBST(config_shell)\n+\n+# Host tools.\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(AS, as)\n+AC_CHECK_TOOL(DLLTOOL, dlltool)\n+AC_CHECK_TOOL(LD, ld)\n+AC_CHECK_TOOL(NM, nm)\n+AC_CHECK_TOOL(RANLIB, ranlib, :)\n+AC_CHECK_TOOL(WINDRES, windres)\n+AC_CHECK_TOOL(OBJCOPY, objcopy)\n+AC_CHECK_TOOL(OBJDUMP, objdump)\n+AC_SUBST(CC)\n+AC_SUBST(CXX)\n+AC_SUBST(CFLAGS)\n+AC_SUBST(CXXFLAGS)\n+AC_SUBST(DEFAULT_YACC)\n+AC_SUBST(DEFAULT_LEX)\n+AC_SUBST(DEFAULT_M4)\n+\n+# Target tools.\n+NCN_CHECK_TARGET_TOOL(AR_FOR_TARGET, ar)\n+NCN_CHECK_TARGET_TOOL(AS_FOR_TARGET, as)\n+NCN_CHECK_TARGET_TOOL(DLLTOOL_FOR_TARGET, dlltool)\n+NCN_CHECK_TARGET_TOOL(LD_FOR_TARGET, ld)\n+NCN_CHECK_TARGET_TOOL(NM_FOR_TARGET, nm)\n+NCN_CHECK_TARGET_TOOL(RANLIB_FOR_TARGET, ranlib, :)\n+NCN_CHECK_TARGET_TOOL(WINDRES_FOR_TARGET, windres)\n+\n+AC_SUBST(GCC_FOR_TARGET)\n+AC_SUBST(FLAGS_FOR_TARGET)\n+AC_SUBST(CC_FOR_TARGET)\n+AC_SUBST(GCJ_FOR_TARGET)\n+AC_SUBST(CXX_FOR_TARGET)\n+AC_SUBST(RAW_CXX_FOR_TARGET)\n+AC_SUBST(CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)\n+AC_SUBST(RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)\n+\n+# Fix up target tools.\n+if test \"x${build}\" = \"x${host}\" ; then\n+  # In this case, the newly built tools can and should be used,\n+  # so we override the results of the autoconf tests.\n+  # This should really only happen when the tools are actually being built,\n+  # but that's a further refinement.  The new build scheme, where\n+  # tools are built into a structure paralleling where they're installed,\n+  # should also eliminate all of this cleanly.\n+  AR_FOR_TARGET=\"\\$(USUAL_AR_FOR_TARGET)\"\n+  AS_FOR_TARGET=\"\\$(USUAL_AS_FOR_TARGET)\"\n+  DLLTOOL_FOR_TARGET=\"\\$(USUAL_DLLTOOL_FOR_TARGET)\"\n+  LD_FOR_TARGET=\"\\$(USUAL_LD_FOR_TARGET)\"\n+  NM_FOR_TARGET=\"\\$(USUAL_NM_FOR_TARGET)\"\n+  RANLIB_FOR_TARGET=\"\\$(USUAL_RANLIB_FOR_TARGET)\"\n+  WINDRES_FOR_TARGET=\"\\$(USUAL_WINDRES_FOR_TARGET)\"\n+fi\n+# Certain tools may need extra flags.\n+AR_FOR_TARGET=${AR_FOR_TARGET}${extra_arflags_for_target}\n+RANLIB_FOR_TARGET=${RANLIB_FOR_TARGET}${extra_ranlibflags_for_target}\n+NM_FOR_TARGET=${NM_FOR_TARGET}${extra_nmflags_for_target}\n \n-#\n+AC_OUTPUT(Makefile)"}]}