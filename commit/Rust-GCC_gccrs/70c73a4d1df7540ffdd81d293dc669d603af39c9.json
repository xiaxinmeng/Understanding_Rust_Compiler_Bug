{"sha": "70c73a4d1df7540ffdd81d293dc669d603af39c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBjNzNhNGQxZGY3NTQwZmZkZDgxZDI5M2RjNjY5ZDYwM2FmMzljOQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-11-13T13:52:47Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-13T13:52:47Z"}, "message": "AlreadyConnectedException.java: Removed unneeded import.\n\n2002-11-13  Michael Koch <konqueror@gmx.de>\n\n\t* java/nio/channels/AlreadyConnectedException.java:\n\tRemoved unneeded import.\n\t(AlreadyConnectedException): Documentation added.\n\t* java/nio/channels/Pipe.java\n\t(SinkChannel.SinkChannel): Documentation added.\n\t(SinkChannel.validOps): New method.\n\t(SourceChannel.SourceChannel): Documentation added.\n\t(SourceChannel.validOps): New method.\n\t(Pipe): Documentation added.\n\t(open): Documentation added.\n\t(SinkChannel.channel): Documentation added.\n\t(SourceChannel.channel): Documentation added.\n\t* java/nio/channel/SelectableChannel.java\n\t(SelectableChannel): Documentation added.\n\t(blockingLock): Documentation added.\n\t(configureBlocking):Documentation added.\n\t(isBlocking):Documentation added.\n\t(isRegistered):Documentation added.\n\t(keyFor):Documentation added.\n\t(provider):Documentation added.\n\t(register): Documentation added.\n\t(validOps): Documentation added.\n\t* jaba/nio/channels/SelectionKey.java\n\t(SelectionKey): Documentation added.\n\t(attach): Documentation added.\n\t(attachment): Documentation added.\n\t(isAcceptable): Documentation added.\n\t(isConnetable): Documentation added.\n\t(isReadable): Documentation added.\n\t(isWritable): Documentation added.\n\t(cancel): Documentation added.\n\t(channel): Documentation added.\n\t(interestOps): Documentation added.\n\t(isValid): Documentation added.\n\t(readyOps): Documentation added.\n\t(selector): Documentation added.\n\t* jaba/nio/channels/Selector.java\n\t(Selector): Documentation added.\n\t(open): Documentation added.\n\t(close): Documentation added.\n\t(isOpen): Documentation added.\n\t(keys): Documentation added.\n\t(provider): Documentation added.\n\t(select): Documentation added.\n\t(selectedKeys): Documentation added.\n\t(selectNow): Documentation added.\n\t(wakeup): Documentation added.\n\t* java/nio/channels/spi/AbstractInterruptibleChannel.java\n\t(AbstractInterruptibleChannel): Documentation added.\n\t(opened): Default to true;\n\t(begin): Documentation added.\n\t(close): Set opened to false, documentation added.\n\t(isOpen): Documentation added.\n\t* java/nio/channels/spi/AbstractSelectionKey.java\n\t(AbstractSelectionKey): Documentation added.\n\t(cancel): Documentation added.\n\t(isValid): Documentation added.\n\t* java/nio/channels/spi/AbstractSelector.java\n\t(AbstractSelector): Documentation added.\n\t(begin): Documentation added.\n\t(close): Documentation added.\n\t(isOpen): Documentation added.\n\t(deregister): Documentation added.\n\t(end): Documentation added.\n\t(provider): Documentation added.\n\t(implCloseSelector): Documentation added.\n\t(register): Documentation added.\n\t* java/nio/channels/spi/SelectorProvider.java\n\t(SelectorProvider): Documentation added.\n\t(openDatagramChannel): Documentation added.\n\t(openPipe): Documentation added.\n\t(openSelector): Documentation added.\n\t(openServerSocketChannel): Documentation added.\n\t(openSocketChannel): Documentation added.\n\t(provider): Documentation added.\n\nFrom-SVN: r59077", "tree": {"sha": "9b377b960cff154ae1145cebd66544324b612d05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b377b960cff154ae1145cebd66544324b612d05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70c73a4d1df7540ffdd81d293dc669d603af39c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c73a4d1df7540ffdd81d293dc669d603af39c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c73a4d1df7540ffdd81d293dc669d603af39c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c73a4d1df7540ffdd81d293dc669d603af39c9/comments", "author": null, "committer": null, "parents": [{"sha": "e6179f45962b735f577d455f124e4f866e6a6918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6179f45962b735f577d455f124e4f866e6a6918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6179f45962b735f577d455f124e4f866e6a6918"}], "stats": {"total": 579, "additions": 445, "deletions": 134}, "files": [{"sha": "034d8aeb7157426512cdf736456cec4aa1e04b1d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=70c73a4d1df7540ffdd81d293dc669d603af39c9", "patch": "@@ -1,3 +1,81 @@\n+2002-11-13  Michael Koch <konqueror@gmx.de>\n+\n+\t* java/nio/channels/AlreadyConnectedException.java:\n+\tRemoved unneeded import.\n+\t(AlreadyConnectedException): Documentation added.\n+\t* java/nio/channels/Pipe.java\n+\t(SinkChannel.SinkChannel): Documentation added.\n+\t(SinkChannel.validOps): New method.\n+\t(SourceChannel.SourceChannel): Documentation added.\n+\t(SourceChannel.validOps): New method.\n+\t(Pipe): Documentation added.\n+\t(open): Documentation added.\n+\t(SinkChannel.channel): Documentation added.\n+\t(SourceChannel.channel): Documentation added.\n+\t* java/nio/channel/SelectableChannel.java\n+\t(SelectableChannel): Documentation added.\n+\t(blockingLock): Documentation added.\n+\t(configureBlocking):Documentation added.\n+\t(isBlocking):Documentation added.\n+\t(isRegistered):Documentation added.\n+\t(keyFor):Documentation added.\n+\t(provider):Documentation added.\n+\t(register): Documentation added.\n+\t(validOps): Documentation added.\n+\t* jaba/nio/channels/SelectionKey.java\n+\t(SelectionKey): Documentation added.\n+\t(attach): Documentation added.\n+\t(attachment): Documentation added.\n+\t(isAcceptable): Documentation added.\n+\t(isConnetable): Documentation added.\n+\t(isReadable): Documentation added.\n+\t(isWritable): Documentation added.\n+\t(cancel): Documentation added.\n+\t(channel): Documentation added.\n+\t(interestOps): Documentation added.\n+\t(isValid): Documentation added.\n+\t(readyOps): Documentation added.\n+\t(selector): Documentation added.\n+\t* jaba/nio/channels/Selector.java\n+\t(Selector): Documentation added.\n+\t(open): Documentation added.\n+\t(close): Documentation added.\n+\t(isOpen): Documentation added.\n+\t(keys): Documentation added.\n+\t(provider): Documentation added.\n+\t(select): Documentation added.\n+\t(selectedKeys): Documentation added.\n+\t(selectNow): Documentation added.\n+\t(wakeup): Documentation added.\n+\t* java/nio/channels/spi/AbstractInterruptibleChannel.java\n+\t(AbstractInterruptibleChannel): Documentation added.\n+\t(opened): Default to true;\n+\t(begin): Documentation added.\n+\t(close): Set opened to false, documentation added.\n+\t(isOpen): Documentation added.\n+\t* java/nio/channels/spi/AbstractSelectionKey.java\n+\t(AbstractSelectionKey): Documentation added.\n+\t(cancel): Documentation added.\n+\t(isValid): Documentation added.\n+\t* java/nio/channels/spi/AbstractSelector.java\n+\t(AbstractSelector): Documentation added.\n+\t(begin): Documentation added.\n+\t(close): Documentation added.\n+\t(isOpen): Documentation added.\n+\t(deregister): Documentation added.\n+\t(end): Documentation added.\n+\t(provider): Documentation added.\n+\t(implCloseSelector): Documentation added.\n+\t(register): Documentation added.\n+\t* java/nio/channels/spi/SelectorProvider.java\n+\t(SelectorProvider): Documentation added.\n+\t(openDatagramChannel): Documentation added.\n+\t(openPipe): Documentation added.\n+\t(openSelector): Documentation added.\n+\t(openServerSocketChannel): Documentation added.\n+\t(openSocketChannel): Documentation added.\n+\t(provider): Documentation added.\n+\n 2002-11-12  Michael Koch <konqueror@gmx.de>\n \n \t* java/nio/Buffer.java: Implemented."}, {"sha": "740fdbc0ddd9692fc3edeb106aeef5da5ac3191d", "filename": "libjava/java/nio/channels/AlreadyConnectedException.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2FAlreadyConnectedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2FAlreadyConnectedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FAlreadyConnectedException.java?ref=70c73a4d1df7540ffdd81d293dc669d603af39c9", "patch": "@@ -37,11 +37,11 @@\n \n package java.nio.channels;\n \n-import java.io.*;\n-\n-\n public class AlreadyConnectedException extends IllegalStateException\n {\n+  /**\n+   * Creates the exception\n+   */\n   public AlreadyConnectedException()\n   {\n   }"}, {"sha": "22f3d156f6807cd37573e6c420a36bd75e2d8cf8", "filename": "libjava/java/nio/channels/Pipe.java", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2FPipe.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2FPipe.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FPipe.java?ref=70c73a4d1df7540ffdd81d293dc669d603af39c9", "patch": "@@ -40,40 +40,82 @@\n import java.nio.channels.spi.AbstractSelectableChannel;\n import java.nio.channels.spi.SelectorProvider;\n \n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n public abstract class Pipe\n {\n   public abstract static class SinkChannel\n     extends AbstractSelectableChannel\n     implements WritableByteChannel, GatheringByteChannel\n   {\n-    protected SinkChannel(SelectorProvider provider)\n+    /**\n+     * Initializes the channel.\n+     */\n+    protected SinkChannel (SelectorProvider provider)\n     {\n       super (provider);\n     }\n+\n+    /**\n+     * Returns an operation set that is valid on this channel.\n+     *\n+     * The only valid operation on this channel is @see SelectionKey.OP_WRITE.\n+     */\n+    public final int validOps ()\n+    {\n+      return SelectionKey.OP_WRITE;\n+    }\n   }\n \n   public abstract static class SourceChannel\n     extends AbstractSelectableChannel\n     implements ReadableByteChannel, ScatteringByteChannel\n   {\n-    protected SourceChannel(SelectorProvider provider)\n+    /**\n+     * Initializes the channel.\n+     */\n+    protected SourceChannel (SelectorProvider provider)\n     {\n       super (provider);\n     }\n+\n+    /**\n+     * Returns an operation set that is valid on this channel.\n+     *\n+     * The only valid operation on this channel is @see SelectionKey.OP_READ.\n+     */\n+    public final int validOps ()\n+    {\n+      return SelectionKey.OP_READ;\n+    }\n   }\n-    \n+\n+  /**\n+   * Initializes the pipe.\n+   */\n   protected Pipe()\n   {\n   }\n \n   /**\n+   * Opens a pipe.\n+   * \n    * @exception IOException If an error occurs\n    */\n   public static Pipe open()\n   {\n-    return null;\n+    return SelectorProvider.provider ().openPipe();\n   }\n-    \n+\n+  /**\n+   * Returns a pipe's sink channel.\n+   */\n   public abstract Pipe.SinkChannel sink();\n+\n+  /**\n+   * Returns a pipe's source channel\n+   */\n   public abstract Pipe.SourceChannel source();   \n }"}, {"sha": "2bc5cc47e3525037abfdfd69432b97ae77c97bba", "filename": "libjava/java/nio/channels/SelectableChannel.java", "status": "modified", "additions": 74, "deletions": 25, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2FSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2FSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSelectableChannel.java?ref=70c73a4d1df7540ffdd81d293dc669d603af39c9", "patch": "@@ -40,50 +40,99 @@\n import java.nio.channels.spi.AbstractInterruptibleChannel;\n import java.nio.channels.spi.SelectorProvider;\n \n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n public abstract class SelectableChannel\n   extends AbstractInterruptibleChannel\n {\n-  protected SelectableChannel()\n+  /**\n+   * Initializes the channel.\n+   */\n+  protected SelectableChannel ()\n   {\n   }\n-  \n-  public abstract  Object blockingLock();\n+ \n+  /**\n+   * Returns the lock of this channel.\n+   */\n+  public abstract Object blockingLock ();\n \n   /**\n-   * @exception ClosedChannelException FIXME\n-   * @exception IllegalBlockingModeException FIXME\n-   * @exception IOException FIXME\n+   * Adjusts this channel's blocking mode.\n+   * \n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IllegalBlockingModeException If block is true and this channel\n+   * is registered with one or more selectors.\n+   * @exception IOException If an error occurs.\n    */\n-  public abstract  SelectableChannel configureBlocking(boolean block);\n+  public abstract SelectableChannel configureBlocking (boolean block);\n   \n-  public abstract  boolean isBlocking();\n+  /**\n+   * Tells whether this channel is blocking or not.\n+   */\n+  public abstract boolean isBlocking ();\n   \n-  public abstract  boolean isRegistered();\n+  /**\n+   * Tells whether or not this channel is currently registered with\n+   * any selectors.\n+   */\n+  public abstract boolean isRegistered ();\n   \n-  public abstract  SelectionKey keyFor(Selector sel);\n+  /**\n+   * Retrieves the key representing the channel's registration with\n+   * the given selector.\n+   */\n+  public abstract SelectionKey keyFor (Selector sel);\n   \n-  public abstract  SelectorProvider provider();\n+  /**\n+   * Returns the provider that created this channel.\n+   */\n+  public abstract SelectorProvider provider ();\n   \n   /**\n-   * @exception CancelledKeyException FIXME\n-   * @exception ClosedChannelException FIXME\n-   * @exception IllegalArgumentException FIXME\n-   * @exception IllegalBlockingModeException FIXME\n-   * @exception IllegalSelectorException FIXME\n+   * Registers this channel with the given selector,\n+   * returning a selection key.\n+   * \n+   * @exception CancelledKeyException If this channel is currently registered\n+   * with the given selector but the corresponding key has already been cancelled\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IllegalArgumentException If a bit in ops does not correspond\n+   * to an operation that is supported by this channel, that is, if\n+   * set &amp; ~validOps() != 0.\n+   * @exception IllegalBlockingModeException If block is true and this channel\n+   * is registered with one or more selectors.\n+   * @exception IllegalSelectorException If this channel was not created by\n+   * the same provider as the given selector.\n    */\n-  public final SelectionKey register(Selector sel, int ops) throws java.nio.channels.ClosedChannelException\n+  public final SelectionKey register (Selector sel, int ops)\n+    throws ClosedChannelException\n   {\n-    return register(sel, ops, null);\n+    return register (sel, ops, null);\n   }\n   \n   /**\n-   * @exception CancelledKeyException FIXME\n-   * @exception ClosedChannelException FIXME\n-   * @exception IllegalArgumentException FIXME\n-   * @exception IllegalBlockingModeException FIXME\n-   * @exception IllegalSelectorException FIXME\n+   * Registers this channel with the given selector,\n+   * returning a selection key.\n+   *\n+   * @exception CancelledKeyException If this channel is currently registered\n+   * with the given selector but the corresponding key has already been\n+   * cancelled.\n+   * @exception ClosedChannelException If this channel is closed.\n+   * @exception IllegalArgumentException If a bit in ops does not correspond\n+   * to an operation that is supported by this channel, that is, if\n+   * set &amp; ~validOps() != 0.\n+   * @exception IllegalBlockingModeException If block is true and this channel\n+   * is registered with one or more selectors.\n+   * @exception IllegalSelectorException If this channel was not created by\n+   * the same provider as the given selector.\n    */\n-  public abstract  SelectionKey register(Selector sel, int ops, Object att) throws java.nio.channels.ClosedChannelException;\n+  public abstract SelectionKey register (Selector sel, int ops, Object att)\n+    throws ClosedChannelException;\n   \n-  public abstract  int validOps();  \n+  /**\n+   * Returns a set of valid operations on this channel.\n+   */\n+  public abstract int validOps();\n }"}, {"sha": "8d06a301143fae67eec8d473c6a962e47d053181", "filename": "libjava/java/nio/channels/SelectionKey.java", "status": "modified", "additions": 74, "deletions": 30, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2FSelectionKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2FSelectionKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSelectionKey.java?ref=70c73a4d1df7540ffdd81d293dc669d603af39c9", "patch": "@@ -37,6 +37,10 @@\n \n package java.nio.channels;\n \n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n public abstract class SelectionKey\n {\n   public static final int OP_ACCEPT  = 1<<0;\n@@ -45,76 +49,116 @@\n   public static final int OP_WRITE   = 1<<3;\n     \n   Object attached;\n-    \n-  protected SelectionKey()\n+   \n+  /**\n+   * Initializes the selection key.\n+   */\n+  protected SelectionKey ()\n   {\n   }\n \n-  public final Object attach(Object obj)\n+  /**\n+   * Attaches obj to the key and returns the old attached object.\n+   */\n+  public final Object attach (Object obj)\n   {\n     Object old = attached;\n     attached = obj;\n     return old;\n   }\n-    \n-  public final Object attachment()\n+   \n+  /**\n+   * Returns the object attached to the key.\n+   */\n+  public final Object attachment ()\n   {\n     return attached;\n   }    \n \n   /**\n-   * @exception CancelledKeyException FIXME\n+   * Tests if the channel attached to this key is ready to accept\n+   * a new socket connection.\n+   * \n+   * @exception CancelledKeyException If this key has been cancelled\n    */\n-  public final boolean isAcceptable()\n+  public final boolean isAcceptable ()\n   { \n-    return (readyOps() & OP_ACCEPT) != 0;\n+    return (readyOps () & OP_ACCEPT) != 0;\n   }\n \n   /**\n-   * @exception CancelledKeyException FIXME\n+   * Tests whether this key's channel has either finished,\n+   * or failed to finish, its socket-connection operation.\n+   * \n+   * @exception CancelledKeyException If this key has been cancelled\n    */\n-  public final boolean isConnectable()\n+  public final boolean isConnectable ()\n   {\n-    return (readyOps() & OP_CONNECT) != 0;  \n+    return (readyOps () & OP_CONNECT) != 0;  \n   }        \n   \n   /**\n-   * @exception CancelledKeyException FIXME\n+   * Tests if the channel attached to the key is readable.\n+   * \n+   * @exception CancelledKeyException If this key has been cancelled\n    */\n-  public final boolean isReadable()\n+  public final boolean isReadable ()\n   {\n-    return (readyOps() & OP_READ) != 0; \n+    return (readyOps () & OP_READ) != 0; \n   }\n   \n   /**\n-   * @exception CancelledKeyException FIXME\n+   * Tests if the channel attached to the key is writable.\n+   *\n+   * @exception CancelledKeyException If this key has been cancelled\n    */\n-  public final boolean isWritable()\n+  public final boolean isWritable ()\n   {\n-    return (readyOps() & OP_WRITE) != 0;\n+    return (readyOps () & OP_WRITE) != 0;\n   }\n \n-  public abstract void cancel(); \n-  \n-  public abstract SelectableChannel channel();\n-  \n   /**\n-   * @exception CancelledKeyException FIXME\n+   * Requests that the registration of this key's channel with\n+   * its selector be cancelled.\n    */\n-  public abstract int interestOps();\n+  public abstract void cancel (); \n+ \n+  /**\n+   * return the channel attached to the key.\n+   */\n+  public abstract SelectableChannel channel ();\n   \n   /**\n-   * @exception CancelledKeyException FIXME\n-   * @exception IllegalArgumentException FIXME\n+   * Returns the key's interest set.\n+   * \n+   * @exception CancelledKeyException If this key has been cancelled\n    */\n-  public abstract SelectionKey interestOps(int ops);\n+  public abstract int interestOps ();\n   \n-  public abstract boolean isValid();\n+  /**\n+   * Sets this key's interest set to the given value.\n+   * \n+   * @exception CancelledKeyException If this key has been cancelled\n+   * @exception IllegalArgumentException If a bit in the set does not\n+   * correspond to an operation that is supported by this key's channel,\n+   * that is, if set &amp; ~(channel().validOps()) != 0\n+   */\n+  public abstract SelectionKey interestOps (int ops);\n  \n   /**\n-   * @exception CancelledKeyException FIXME\n+   * Tells whether or not this key is valid.\n    */\n-  public abstract int readyOps();\n+  public abstract boolean isValid ();\n+ \n+  /**\n+   * Retrieves this key's ready-operation set.\n+   * \n+   * @exception CancelledKeyException If this key has been cancelled\n+   */\n+  public abstract int readyOps ();\n   \n-  public abstract Selector selector();\n+  /**\n+   * Returns the selector for which this key was created.\n+   */\n+  public abstract Selector selector ();\n }"}, {"sha": "a71280753d6559433495247c4a5e47cea9153e91", "filename": "libjava/java/nio/channels/Selector.java", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2FSelector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2FSelector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSelector.java?ref=70c73a4d1df7540ffdd81d293dc669d603af39c9", "patch": "@@ -37,60 +37,97 @@\n \n package java.nio.channels;\n \n-import java.util.Set;\n+import java.io.IOException;\n import java.nio.channels.spi.SelectorProvider;\n+import java.util.Set;\n \n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n public abstract class Selector\n {\n+  /**\n+   * Initializes the selector.\n+   */\n   protected Selector()\n   {\n   }\n  \n   /**\n+   * Opens a selector.\n+   * \n    * @exception IOException If an error occurs\n    */\n-  public static Selector open()\n+  public static Selector open ()\n   {\n-\treturn SelectorProvider.provider().openSelector();\n+    return SelectorProvider.provider ().openSelector ();\n   }\n \n   /**\n+   * Closes the selector.\n+   * \n    * @exception IOException If an error occurs\n    */\n-  public abstract void close();\n-  \n-  public abstract boolean isOpen();\n+  public abstract void close () throws IOException;\n   \n   /**\n-   * @exception ClosedSelectorException FIXME\n+   * Tells whether the selector is open or not.\n    */\n-  public abstract Set keys();\n+  public abstract boolean isOpen ();\n   \n-  public abstract SelectorProvider provider();\n+  /**\n+   * Returns this selector's key set.\n+   * \n+   * @exception ClosedSelectorException If this selector is closed.\n+   */\n+  public abstract Set keys ();\n+ \n+  /**\n+   * Returns the SelectorProvider that created the selector.\n+   */\n+  public abstract SelectorProvider provider ();\n   \n   /**\n-   * @exception ClosedSelectorException FIXME\n+   * Selects a set of keys whose corresponding channels are ready\n+   * for I/O operations.\n+   * \n+   * @exception ClosedSelectorException If this selector is closed.\n    * @exception IOException If an error occurs\n    */\n-  public abstract int select();\n+  public abstract int select () throws IOException;\n   \n   /**\n-   * @exception ClosedSelectorException FIXME\n-   * @exception IllegalArgumentException FIXME\n+   * Selects a set of keys whose corresponding channels are ready\n+   * for I/O operations.\n+   *\n+   * @param timeout The timeout to use.\n+   * \n+   * @exception ClosedSelectorException If this selector is closed.\n+   * @exception IllegalArgumentException If the timeout value is negative.\n    * @exception IOException If an error occurs\n    */\n-  public abstract int select(long timeout);\n+  public abstract int select (long timeout) throws IOException;\n   \n   /**\n-   * @exception ClosedSelectorException FIXME\n+   * Returns this selector's selected-key set.\n+   * \n+   * @exception ClosedSelectorException If this selector is closed.\n    */\n-  public abstract Set selectedKeys();\n+  public abstract Set selectedKeys ();\n   \n   /**\n-   * @exception ClosedSelectorException FIXME\n+   * Selects a set of keys whose corresponding channels are ready\n+   * for I/O operations.\n+   * \n+   * @exception ClosedSelectorException If this selector is closed.\n    * @exception IOException If an error occurs\n    */\n-  public abstract int selectNow();\n+  public abstract int selectNow () throws IOException;\n   \n-  public abstract Selector wakeup();\n+  /**\n+   * Causes the first selection operation that has not yet returned to\n+   * return immediately.\n+   */\n+  public abstract Selector wakeup ();\n }"}, {"sha": "855087b5f0738e56af8bba1ac506ce202e78958c", "filename": "libjava/java/nio/channels/spi/AbstractInterruptibleChannel.java", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractInterruptibleChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractInterruptibleChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractInterruptibleChannel.java?ref=70c73a4d1df7540ffdd81d293dc669d603af39c9", "patch": "@@ -41,47 +41,64 @@\n import java.nio.channels.Channel;\n import java.nio.channels.InterruptibleChannel;\n \n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n public abstract class AbstractInterruptibleChannel\n   implements Channel, InterruptibleChannel\n {\n-  boolean opened = false;\n+  boolean opened = true;\n \n-  protected AbstractInterruptibleChannel()\n+  /**\n+   * Initializes the channel.\n+   */\n+  protected AbstractInterruptibleChannel ()\n   {\n   }\n \n-  protected final void begin()\n+  /**\n+   * Marks the beginning of an I/O operation that might block indefinitely.\n+   */\n+  protected final void begin ()\n   {\n-    // Marks the beginning of an I/O operation that might block indefinitely.\n   }\n     \n   /**\n+   * Closes the channel.\n+   * \n    * @exception IOException If an error occurs\n    */\n-  public final void close() throws IOException\n+  public final void close () throws IOException\n   {\n-    // Closes this channel.\n-    implCloseChannel();\n+    opened = false;\n+    implCloseChannel ();\n   }\n \n   /**\n-   * @exception AsynchronousCloseException FIXME\n-   * @exception ClosedByInterruptException FIXME\n+   * Marks the end of an I/O operation that might block indefinitely.\n+   * \n+   * @exception AsynchronousCloseException If the channel was asynchronously\n+   * closed.\n+   * @exception ClosedByInterruptException If the thread blocked in the\n+   * I/O operation was interrupted.\n    */\n-  protected final void end(boolean completed)\n+  protected final void end (boolean completed)\n   {\n-    // Marks the end of an I/O operation that might block indefinitely.\n   }   \n \n   /**\n+   * Closes the channel.\n+   * \n    * @exception IOException If an error occurs\n    */\n-  protected abstract void implCloseChannel() throws IOException;\n+  protected abstract void implCloseChannel () throws IOException;\n \n-  public final boolean isOpen()\n+  /**\n+   * Tells whether or not this channel is open.\n+   */\n+  public final boolean isOpen ()\n   {\n-    // Tells whether or not this channel is open.\n     return opened;\n   }\n }\n-"}, {"sha": "01ea4f33fc21969a99590512fc5e15727e987bdc", "filename": "libjava/java/nio/channels/spi/AbstractSelectionKey.java", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java?ref=70c73a4d1df7540ffdd81d293dc669d603af39c9", "patch": "@@ -39,28 +39,37 @@\n \n import java.nio.channels.SelectionKey;\n \n+/**\n+ * @since 1.4\n+ */\n public abstract class AbstractSelectionKey\n   extends SelectionKey\n {\n   boolean ok = true;\n \n+  /**\n+   * Initializes the key.\n+   */\n   protected AbstractSelectionKey ()\n   {\n   }\n- \n+\n+  /**\n+   * Cancels this key.\n+   */\n   public final void cancel ()\n   {\n     if (ok)\n-      {\n-        selector ().selectedKeys ().add (this);\n-      }\n+      selector ().selectedKeys ().add (this);\n     \n     ok = false;\n   }\n \n+  /**\n+   * Tells whether this key is valid or not.\n+   */\n   public final boolean isValid ()\n   {\n     return ok;\n   }\n }\n-"}, {"sha": "fc0aeca32d91f78f913299a9bef0c423fd659226", "filename": "libjava/java/nio/channels/spi/AbstractSelector.java", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java?ref=70c73a4d1df7540ffdd81d293dc669d603af39c9", "patch": "@@ -37,64 +37,78 @@\n \n package java.nio.channels.spi;\n \n+import java.io.IOException;\n import java.nio.channels.SelectionKey;\n import java.nio.channels.Selector;\n import java.util.List;\n import java.util.Set;\n \n public abstract class AbstractSelector extends Selector\n {\n-  boolean closed = true;\n+  boolean closed = false;\n   SelectorProvider provider;\n \n-  protected AbstractSelector(SelectorProvider provider)\n+  /**\n+   * Initializes the slector.\n+   */\n+  protected AbstractSelector (SelectorProvider provider)\n   {\n     this.provider = provider;\n   }\n  \n-  protected final void begin()\n+  /**\n+   * Marks the beginning of an I/O operation that might block indefinitely.\n+   */\n+  protected final void begin ()\n   {\n   }\n \n   /**\n+   * Closes the channel.\n+   * \n    * @exception IOException If an error occurs\n    */\n-  public final void close()\n+  public final void close () throws IOException\n   {\n     if (closed)\n       return;\n+    \n     closed = true;\n-    implCloseSelector();\n+    implCloseSelector ();\n   }\n \n-  protected final void deregister(AbstractSelectionKey key)\n+  /**\n+   * Tells whether this channel is open or not.\n+   */\n+  public final boolean isOpen ()\n   {\n-    cancelledKeys().remove(key);\n+    return ! closed;\n   }\n-    \n-  protected final void end()\n+\n+  protected final void deregister (AbstractSelectionKey key)\n   {\n+    cancelledKeys ().remove (key);\n   }\n     \n-  public final boolean isOpen()\n+  protected final void end()\n   {\n-    return ! closed;\n   }\n     \n-  public final SelectorProvider provider()\n+  public final SelectorProvider provider ()\n   {\n     return provider;\n   }\n-    \n+\n   protected final Set cancelledKeys()\n   {\n     return null;\n   }\n-  \n+\n   /**\n-   * @exception IOException If an error occurs\n+   * Closes the channel.\n    */\n-  protected abstract void implCloseSelector();\t\n-  \n-  protected abstract SelectionKey register(AbstractSelectableChannel ch, int ops, Object att);   \n+  protected abstract void implCloseSelector () throws IOException;\n+\n+  protected abstract SelectionKey register (AbstractSelectableChannel ch,\n+                                            int ops, Object att);   \n }"}, {"sha": "06017f76edb3d7976b38d90c4c1165908869fc6c", "filename": "libjava/java/nio/channels/spi/SelectorProvider.java", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c73a4d1df7540ffdd81d293dc669d603af39c9/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java?ref=70c73a4d1df7540ffdd81d293dc669d603af39c9", "patch": "@@ -1,4 +1,4 @@\n-/* SelectorProvider.java -- \n+/* SelectorProvider.java\n    Copyright (C) 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -37,46 +37,67 @@\n \n package java.nio.channels.spi;\n \n+/* import gnu.java.nio.channels.SelectorProviderImpl; */\n import java.nio.channels.DatagramChannel;\n import java.nio.channels.Pipe;\n import java.nio.channels.ServerSocketChannel;\n import java.nio.channels.SocketChannel;\n \n /**\n+ * @author Michael Koch\n  * @since 1.4\n  */\n public abstract class SelectorProvider\n {\n   static SelectorProvider pr;\n     \n   /**\n-   * Creates the <code>SelectorProvider<code> object\n+   * Initializes the selector provider.\n    *\n    * @exception SecurityException If a security manager has been installed and\n-   * it denies RuntimePermission(\"selectorProvider\")\n+   * it denies @see RuntimePermission (\"selectorProvider\").\n    */\n-  protected SelectorProvider()\n+  protected SelectorProvider ()\n   {\n     SecurityManager sm = System.getSecurityManager ();\n     if (sm != null)\n       sm.checkPermission (new RuntimePermission (\"selectorProvider\"));\n   }\n-    \n-  public abstract  DatagramChannel openDatagramChannel();\n-\n-  public abstract  Pipe openPipe();\n   \n-  public abstract  AbstractSelector openSelector();\n+  /**\n+   * Opens a datagram channel.\n+   */\n+  public abstract DatagramChannel openDatagramChannel ();\n+  \n+  /**\n+   * Opens a pipe.\n+   */\n+  public abstract Pipe openPipe ();\n+  \n+  /**\n+   * Opens a selector.\n+   */\n+  public abstract AbstractSelector openSelector ();\n   \n-  public abstract  ServerSocketChannel openServerSocketChannel();\n+  /**\n+   * Opens a server socket channel.\n+   */\n+  public abstract ServerSocketChannel openServerSocketChannel ();\n   \n-  public abstract  SocketChannel openSocketChannel();\n-   \n   /**\n-   * Returns the global <code>SelectorProvider</code> object\n+   * Opens a socket channel.\n    */\n-  public static SelectorProvider provider()\n+  public abstract SocketChannel openSocketChannel ();\n+    \n+  /**\n+   * Returns the system-wide default selector provider for this invocation\n+   * of the Java virtual machine.\n+   */\n+  public static SelectorProvider provider ()\n   {\n+/*    if (pr == null) */\n+/*      pr = new SelectorProviderImpl (); */\n+    \n     return pr;\n   }\n }"}]}