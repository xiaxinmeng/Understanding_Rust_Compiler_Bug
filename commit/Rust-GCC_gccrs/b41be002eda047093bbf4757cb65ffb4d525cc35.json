{"sha": "b41be002eda047093bbf4757cb65ffb4d525cc35", "node_id": "C_kwDOANBUbNoAKGI0MWJlMDAyZWRhMDQ3MDkzYmJmNDc1N2NiNjVmZmI0ZDUyNWNjMzU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-26T17:22:10Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-26T17:22:10Z"}, "message": "ivopts: Improve code generated for very simple loops.\n\nThis patch tidies up the code that GCC generates for simple loops,\nby selecting/generating a simpler loop bound expression in ivopts.\nThe original motivation came from looking at the following loop (from\ngcc.target/i386/pr90178.c)\n\nint *find_ptr (int* mem, int sz, int val)\n{\n  for (int i = 0; i < sz; i++)\n    if (mem[i] == val)\n      return &mem[i];\n  return 0;\n}\n\nwhich GCC currently compiles to:\n\nfind_ptr:\n        movq    %rdi, %rax\n        testl   %esi, %esi\n        jle     .L4\n        leal    -1(%rsi), %ecx\n        leaq    4(%rdi,%rcx,4), %rcx\n        jmp     .L3\n.L7:    addq    $4, %rax\n        cmpq    %rcx, %rax\n        je      .L4\n.L3:    cmpl    %edx, (%rax)\n        jne     .L7\n        ret\n.L4:    xorl    %eax, %eax\n        ret\n\nNotice the relatively complex leal/leaq instructions, that result\nfrom ivopts using the following expression for the loop bound:\ninv_expr 2:     ((unsigned long) ((unsigned int) sz_8(D) + 4294967295)\n\t\t* 4 + (unsigned long) mem_9(D)) + 4\n\nwhich results from NITERS being (unsigned int) sz_8(D) + 4294967295,\ni.e. (sz - 1), and the logic in cand_value_at determining the bound\nas BASE + NITERS*STEP at the start of the final iteration and as\nBASE + NITERS*STEP + STEP at the end of the final iteration.\n\nIdeally, we'd like the middle-end optimizers to simplify\nBASE + NITERS*STEP + STEP as BASE + (NITERS+1)*STEP, especially\nwhen NITERS already has the form BOUND-1, but with type conversions\nand possible overflow to worry about, the above \"inv_expr 2\" is the\nbest that can be done by fold (without additional context information).\n\nThis patch improves ivopts' cand_value_at by instead of using just\nthe tree expression for NITERS, passing the data structure that\nexplains how that expression was derived.  This allows us to peek\nunder the surface to check that NITERS+1 doesn't overflow, and in\nthis patch to use the SSA_NAME already holding the required value.\n\nIn the motivating loop above, inv_expr 2 now becomes:\n(unsigned long) sz_8(D) * 4 + (unsigned long) mem_9(D)\n\nAnd as a result, on x86_64 we now generate:\n\nfind_ptr:\n        movq    %rdi, %rax\n        testl   %esi, %esi\n        jle     .L4\n        movslq  %esi, %rsi\n        leaq    (%rdi,%rsi,4), %rcx\n        jmp     .L3\n.L7:    addq    $4, %rax\n        cmpq    %rcx, %rax\n        je      .L4\n.L3:    cmpl    %edx, (%rax)\n        jne     .L7\n        ret\n.L4:    xorl    %eax, %eax\n        ret\n\nThis improvement required one minor tweak to GCC's testsuite for\ngcc.dg/wrapped-binop-simplify.c, where we again generate better\ncode, and therefore no longer find as many optimization opportunities\nin later passes (vrp2).\n\nPreviously:\n\nvoid v1 (unsigned long *in, unsigned long *out, unsigned int n)\n{\n  int i;\n  for (i = 0; i < n; i++) {\n    out[i] = in[i];\n  }\n}\n\non x86_64 generated:\nv1:\ttestl   %edx, %edx\n        je      .L1\n        movl    %edx, %edx\n        xorl    %eax, %eax\n.L3:\tmovq    (%rdi,%rax,8), %rcx\n        movq    %rcx, (%rsi,%rax,8)\n        addq    $1, %rax\n        cmpq    %rax, %rdx\n        jne     .L3\n.L1:\tret\n\nand now instead generates:\nv1:\ttestl   %edx, %edx\n        je      .L1\n        movl    %edx, %edx\n        xorl    %eax, %eax\n        leaq    0(,%rdx,8), %rcx\n.L3:\tmovq    (%rdi,%rax), %rdx\n        movq    %rdx, (%rsi,%rax)\n        addq    $8, %rax\n        cmpq    %rax, %rcx\n        jne     .L3\n.L1:\tret\n\n2021-11-26  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* tree-ssa-loop-ivopts.c (cand_value_at): Take a class\n\ttree_niter_desc* argument instead of just a tree for NITER.\n\tIf we require the iv candidate value at the end of the final\n\tloop iteration, try using the original loop bound as the\n\tNITER for sufficiently simple loops.\n\t(may_eliminate_iv): Update (only) call to cand_value_at.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/wrapped-binop-simplify.c: Update expected test result.\n\t* gcc.dg/tree-ssa/ivopts-5.c: New test case.\n\t* gcc.dg/tree-ssa/ivopts-6.c: New test case.\n\t* gcc.dg/tree-ssa/ivopts-7.c: New test case.\n\t* gcc.dg/tree-ssa/ivopts-8.c: New test case.\n\t* gcc.dg/tree-ssa/ivopts-9.c: New test case.", "tree": {"sha": "0763139a76a5ff2083d805b6dc8628fa8209f642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0763139a76a5ff2083d805b6dc8628fa8209f642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b41be002eda047093bbf4757cb65ffb4d525cc35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41be002eda047093bbf4757cb65ffb4d525cc35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41be002eda047093bbf4757cb65ffb4d525cc35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41be002eda047093bbf4757cb65ffb4d525cc35/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "665f726b8a151a2685cd1804dc2ee147eb0cd0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665f726b8a151a2685cd1804dc2ee147eb0cd0eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665f726b8a151a2685cd1804dc2ee147eb0cd0eb"}], "stats": {"total": 113, "additions": 106, "deletions": 7}, "files": [{"sha": "a6af497f4bf7f1ef6c64e09b87931225287d78e0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopts-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-5.c?ref=b41be002eda047093bbf4757cb65ffb4d525cc35", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -fdump-tree-ivopts-details\" } */\n+\n+int*\n+foo (int* mem, int sz, int val)\n+{\n+  int i;\n+  for (i = 0; i < sz; i++)\n+    if (mem[i] == val) \n+      return &mem[i];\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"inv_expr \\[0-9\\]: \\\\t\\\\(unsigned long\\\\) sz_\\[0-9\\]\\\\(D\\\\) \\\\* 4 \\\\+ \\\\(unsigned long\\\\) mem_\\[0-9\\]\\\\(D\\\\)\" \"ivopts\" } } */"}, {"sha": "8383154f99f2559873ef5b3a8fa8119cf679782f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopts-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-6.c?ref=b41be002eda047093bbf4757cb65ffb4d525cc35", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -fdump-tree-ivopts-details\" } */\n+\n+int*\n+foo (int* mem, int sz, int val)\n+{\n+  int i;\n+  for (i = 0; i != sz; i++)\n+    if (mem[i] == val) \n+      return &mem[i];\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"inv_expr \\[0-9\\]: \\\\t\\\\(unsigned long\\\\) sz_\\[0-9\\]\\\\(D\\\\) \\\\* 4 \\\\+ \\\\(unsigned long\\\\) mem_\\[0-9\\]\\\\(D\\\\)\" \"ivopts\" } } */"}, {"sha": "44f5603d4f5b8da6c759e8732503638131b0fca8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopts-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-7.c?ref=b41be002eda047093bbf4757cb65ffb4d525cc35", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -fdump-tree-ivopts-details\" } */\n+\n+int*\n+foo (int* mem, int beg, int end, int val)\n+{\n+  int i;\n+  for (i = beg; i < end; i++)\n+    if (mem[i] == val) \n+      return &mem[i];\n+  return 0;\n+}\n+/* { dg-final { scan-tree-dump \"inv_expr \\[0-9\\]: \\\\t\\\\(unsigned long\\\\) \\\\(\\\\(unsigned int\\\\) end_\\[0-9\\]\\\\(D\\\\) - \\\\(unsigned int\\\\) beg_\\[0-9\\]\\\\(D\\\\)\\\\)\" \"ivopts\" } } */\n+"}, {"sha": "9e89a036a065ad0d3a60b267a5a8ee09f3971a07", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopts-8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-8.c?ref=b41be002eda047093bbf4757cb65ffb4d525cc35", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ivopts-details\" } */\n+\n+int*\n+foo (int* mem, char sz, int val)\n+{\n+  char i;\n+  for (i = 0; i < sz; i++)\n+    if (mem[i] == val) \n+      return &mem[i];\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"inv_expr \\[0-9\\]: \\\\t\\\\(unsigned long\\\\) sz_\\[0-9\\]*\\\\(D\\\\) \\\\* 4 \\\\+ \\\\(unsigned long\\\\) mem_\\[0-9\\]*\\\\(D\\\\)\" \"ivopts\" } } */"}, {"sha": "22b4a12c2b62a42184ba81ef74c2c2cddf4319ba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopts-9.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-9.c?ref=b41be002eda047093bbf4757cb65ffb4d525cc35", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ivopts-details\" } */\n+\n+int*\n+foo (int* mem, unsigned char sz, int val)\n+{\n+  unsigned char i;\n+  for (i = 0; i < sz; i++)\n+    if (mem[i] == val) \n+      return &mem[i];\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"inv_expr \\[0-9\\]: \\\\t\\\\(unsigned long\\\\) sz_\\[0-9\\]\\\\(D\\\\) \\\\* 4 \\\\+ \\\\(unsigned long\\\\) mem_\\[0-9\\]\\\\(D\\\\)\" \"ivopts\" } } */"}, {"sha": "706eed84b8b5d2c28956ec6c6b81afb969aeda1c", "filename": "gcc/testsuite/gcc.dg/wrapped-binop-simplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Fwrapped-binop-simplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftestsuite%2Fgcc.dg%2Fwrapped-binop-simplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwrapped-binop-simplify.c?ref=b41be002eda047093bbf4757cb65ffb4d525cc35", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target { { i?86-*-* x86_64-*-* s390*-*-* } && lp64 } } } */\n /* { dg-options \"-O2 -fdump-tree-vrp2-details\" } */\n-/* { dg-final { scan-tree-dump-times \"gimple_simplified to\" 4 \"vrp2\" } } */\n+/* { dg-final { scan-tree-dump-times \"gimple_simplified to\" 1 \"vrp2\" } } */\n \n void v1 (unsigned long *in, unsigned long *out, unsigned int n)\n {"}, {"sha": "067f823828fe445bc2a9c9b8d1e9a1634990b66e", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41be002eda047093bbf4757cb65ffb4d525cc35/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=b41be002eda047093bbf4757cb65ffb4d525cc35", "patch": "@@ -5030,28 +5030,57 @@ determine_group_iv_cost_address (struct ivopts_data *data,\n   return !sum_cost.infinite_cost_p ();\n }\n \n-/* Computes value of candidate CAND at position AT in iteration NITER, and\n-   stores it to VAL.  */\n+/* Computes value of candidate CAND at position AT in iteration DESC->NITER,\n+   and stores it to VAL.  */\n \n static void\n-cand_value_at (class loop *loop, struct iv_cand *cand, gimple *at, tree niter,\n-\t       aff_tree *val)\n+cand_value_at (class loop *loop, struct iv_cand *cand, gimple *at,\n+\t       class tree_niter_desc *desc, aff_tree *val)\n {\n   aff_tree step, delta, nit;\n   struct iv *iv = cand->iv;\n   tree type = TREE_TYPE (iv->base);\n+  tree niter = desc->niter;\n+  bool after_adjust = stmt_after_increment (loop, cand, at);\n   tree steptype;\n+\n   if (POINTER_TYPE_P (type))\n     steptype = sizetype;\n   else\n     steptype = unsigned_type_for (type);\n \n+  /* If AFTER_ADJUST is required, the code below generates the equivalent\n+     of BASE + NITER * STEP + STEP, when ideally we'd prefer the expression\n+     BASE + (NITER + 1) * STEP, especially when NITER is often of the form\n+     SSA_NAME - 1.  Unfortunately, guaranteeing that adding 1 to NITER\n+     doesn't overflow is tricky, so we peek inside the TREE_NITER_DESC\n+     class for common idioms that we know are safe.  */\n+  if (after_adjust\n+      && desc->control.no_overflow\n+      && integer_onep (desc->control.step)\n+      && (desc->cmp == LT_EXPR\n+\t  || desc->cmp == NE_EXPR)\n+      && TREE_CODE (desc->bound) == SSA_NAME)\n+    {\n+      if (integer_onep (desc->control.base))\n+\t{\n+\t  niter = desc->bound;\n+\t  after_adjust = false;\n+\t}\n+      else if (TREE_CODE (niter) == MINUS_EXPR\n+\t       && integer_onep (TREE_OPERAND (niter, 1)))\n+\t{\n+\t  niter = TREE_OPERAND (niter, 0);\n+\t  after_adjust = false;\n+\t}\n+    }\n+\n   tree_to_aff_combination (iv->step, TREE_TYPE (iv->step), &step);\n   aff_combination_convert (&step, steptype);\n   tree_to_aff_combination (niter, TREE_TYPE (niter), &nit);\n   aff_combination_convert (&nit, steptype);\n   aff_combination_mult (&nit, &step, &delta);\n-  if (stmt_after_increment (loop, cand, at))\n+  if (after_adjust)\n     aff_combination_add (&delta, &step);\n \n   tree_to_aff_combination (iv->base, type, val);\n@@ -5402,7 +5431,7 @@ may_eliminate_iv (struct ivopts_data *data,\n       return true;\n     }\n \n-  cand_value_at (loop, cand, use->stmt, desc->niter, &bnd);\n+  cand_value_at (loop, cand, use->stmt, desc, &bnd);\n \n   *bound = fold_convert (TREE_TYPE (cand->iv->base),\n \t\t\t aff_combination_to_tree (&bnd));"}]}