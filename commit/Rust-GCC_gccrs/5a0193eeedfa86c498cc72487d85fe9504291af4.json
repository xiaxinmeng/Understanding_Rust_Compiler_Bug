{"sha": "5a0193eeedfa86c498cc72487d85fe9504291af4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwMTkzZWVlZGZhODZjNDk4Y2M3MjQ4N2Q4NWZlOTUwNDI5MWFmNA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-09T17:40:30Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-09T17:40:30Z"}, "message": "re PR fortran/37836 (ICE in gfc_trans_auto_array_allocation)\n\n2008-11-09  Paul Thomas  <pault@gcc.gnu.org>\n\n        PR fortran/37836\n        * intrinsic.c (add_functions): Reference gfc_simplify._minval\n\tand gfc_simplify_maxval.\n\t* intrinsic.h : Add prototypes for gfc_simplify._minval and\n\tgfc_simplify_maxval.\n\t* simplify.c (min_max_choose): New function extracted from\n\tsimplify_min_max.\n\t(simplify_min_max): Call it.\n\t(simplify_minval_maxval, gfc_simplify_minval,\n\tgfc_simplify_maxval): New functions.\n\n2008-11-09  Paul Thomas  <pault@gcc.gnu.org>\n\n        PR fortran/37836\n        * gfortran.dg/minmaxval_1.f90: New test.\n\nFrom-SVN: r141717", "tree": {"sha": "4f1d95345e9597d6a7590ef5062e474745d2549b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f1d95345e9597d6a7590ef5062e474745d2549b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a0193eeedfa86c498cc72487d85fe9504291af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0193eeedfa86c498cc72487d85fe9504291af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0193eeedfa86c498cc72487d85fe9504291af4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0193eeedfa86c498cc72487d85fe9504291af4/comments", "author": null, "committer": null, "parents": [{"sha": "82d3b03a3baf4681f3d4139fbc37c7e6cc92847f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d3b03a3baf4681f3d4139fbc37c7e6cc92847f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82d3b03a3baf4681f3d4139fbc37c7e6cc92847f"}], "stats": {"total": 230, "additions": 175, "deletions": 55}, "files": [{"sha": "efa4678f30e04deee71cc83339d356624e693adf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5a0193eeedfa86c498cc72487d85fe9504291af4", "patch": "@@ -1,3 +1,16 @@\n+2008-11-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+        PR fortran/37836\n+        * intrinsic.c (add_functions): Reference gfc_simplify._minval\n+\tand gfc_simplify_maxval.\n+\t* intrinsic.h : Add prototypes for gfc_simplify._minval and\n+\tgfc_simplify_maxval.\n+\t* simplify.c (min_max_choose): New function extracted from\n+\tsimplify_min_max.\n+\t(simplify_min_max): Call it.\n+\t(simplify_minval_maxval, gfc_simplify_minval,\n+\tgfc_simplify_maxval): New functions.\n+\n 2008-11-04  Paul Thomas  <pault@gcc.gnu.org>\n \n         PR fortran/37597"}, {"sha": "f5bfcf996e68f83fcae9febb726b3922ed7f5d01", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=5a0193eeedfa86c498cc72487d85fe9504291af4", "patch": "@@ -1957,7 +1957,7 @@ add_functions (void)\n   make_generic (\"maxloc\", GFC_ISYM_MAXLOC, GFC_STD_F95);\n \n   add_sym_3red (\"maxval\", GFC_ISYM_MAXVAL, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n-\t\tgfc_check_minval_maxval, NULL, gfc_resolve_maxval,\n+\t\tgfc_check_minval_maxval, gfc_simplify_maxval, gfc_resolve_maxval,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n \n@@ -2023,7 +2023,7 @@ add_functions (void)\n   make_generic (\"minloc\", GFC_ISYM_MINLOC, GFC_STD_F95);\n \n   add_sym_3red (\"minval\", GFC_ISYM_MINVAL, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n-\t\tgfc_check_minval_maxval, NULL, gfc_resolve_minval,\n+\t\tgfc_check_minval_maxval, gfc_simplify_minval, gfc_resolve_minval,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n "}, {"sha": "0e0bd3a3493861d32ebd9b31c4bbd3213dd2015e", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=5a0193eeedfa86c498cc72487d85fe9504291af4", "patch": "@@ -271,7 +271,9 @@ gfc_expr *gfc_simplify_log (gfc_expr *);\n gfc_expr *gfc_simplify_log10 (gfc_expr *);\n gfc_expr *gfc_simplify_logical (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_min (gfc_expr *);\n+gfc_expr *gfc_simplify_minval (gfc_expr *, gfc_expr*, gfc_expr*);\n gfc_expr *gfc_simplify_max (gfc_expr *);\n+gfc_expr *gfc_simplify_maxval (gfc_expr *, gfc_expr*, gfc_expr*);\n gfc_expr *gfc_simplify_maxexponent (gfc_expr *);\n gfc_expr *gfc_simplify_minexponent (gfc_expr *);\n gfc_expr *gfc_simplify_mod (gfc_expr *, gfc_expr *);"}, {"sha": "34105bc4d3562b4312f12c074fc619f66eff44c9", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 124, "deletions": 53, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=5a0193eeedfa86c498cc72487d85fe9504291af4", "patch": "@@ -2619,6 +2619,66 @@ gfc_simplify_logical (gfc_expr *e, gfc_expr *k)\n }\n \n \n+/* Selects bewteen current value and extremum for simplify_min_max\n+   and simplify_minval_maxval.  */\n+static void\n+min_max_choose (gfc_expr *arg, gfc_expr *extremum, int sign)\n+{\n+  switch (arg->ts.type)\n+    {\n+      case BT_INTEGER:\n+\tif (mpz_cmp (arg->value.integer,\n+\t\t\textremum->value.integer) * sign > 0)\n+\tmpz_set (extremum->value.integer, arg->value.integer);\n+\tbreak;\n+\n+      case BT_REAL:\n+\t/* We need to use mpfr_min and mpfr_max to treat NaN properly.  */\n+\tif (sign > 0)\n+\t  mpfr_max (extremum->value.real, extremum->value.real,\n+\t\t      arg->value.real, GFC_RND_MODE);\n+\telse\n+\t  mpfr_min (extremum->value.real, extremum->value.real,\n+\t\t      arg->value.real, GFC_RND_MODE);\n+\tbreak;\n+\n+      case BT_CHARACTER:\n+#define LENGTH(x) ((x)->value.character.length)\n+#define STRING(x) ((x)->value.character.string)\n+\tif (LENGTH(extremum) < LENGTH(arg))\n+\t  {\n+\t    gfc_char_t *tmp = STRING(extremum);\n+\n+\t    STRING(extremum) = gfc_get_wide_string (LENGTH(arg) + 1);\n+\t    memcpy (STRING(extremum), tmp,\n+\t\t      LENGTH(extremum) * sizeof (gfc_char_t));\n+\t    gfc_wide_memset (&STRING(extremum)[LENGTH(extremum)], ' ',\n+\t\t\t       LENGTH(arg) - LENGTH(extremum));\n+\t    STRING(extremum)[LENGTH(arg)] = '\\0';  /* For debugger  */\n+\t    LENGTH(extremum) = LENGTH(arg);\n+\t    gfc_free (tmp);\n+\t  }\n+\n+\tif (gfc_compare_string (arg, extremum) * sign > 0)\n+\t  {\n+\t    gfc_free (STRING(extremum));\n+\t    STRING(extremum) = gfc_get_wide_string (LENGTH(extremum) + 1);\n+\t    memcpy (STRING(extremum), STRING(arg),\n+\t\t      LENGTH(arg) * sizeof (gfc_char_t));\n+\t    gfc_wide_memset (&STRING(extremum)[LENGTH(arg)], ' ',\n+\t\t\t       LENGTH(extremum) - LENGTH(arg));\n+\t    STRING(extremum)[LENGTH(extremum)] = '\\0';  /* For debugger  */\n+\t  }\n+#undef LENGTH\n+#undef STRING\n+\tbreak;\n+\t      \n+      default:\n+\tgfc_internal_error (\"simplify_min_max(): Bad type in arglist\");\n+    }\n+}\n+\n+\n /* This function is special since MAX() can take any number of\n    arguments.  The simplified expression is a rewritten version of the\n    argument list containing at most one constant element.  Other\n@@ -2649,59 +2709,7 @@ simplify_min_max (gfc_expr *expr, int sign)\n \t  continue;\n \t}\n \n-      switch (arg->expr->ts.type)\n-\t{\n-\tcase BT_INTEGER:\n-\t  if (mpz_cmp (arg->expr->value.integer,\n-\t\t       extremum->expr->value.integer) * sign > 0)\n-\t    mpz_set (extremum->expr->value.integer, arg->expr->value.integer);\n-\t  break;\n-\n-\tcase BT_REAL:\n-\t  /* We need to use mpfr_min and mpfr_max to treat NaN properly.  */\n-\t  if (sign > 0)\n-\t    mpfr_max (extremum->expr->value.real, extremum->expr->value.real,\n-\t\t      arg->expr->value.real, GFC_RND_MODE);\n-\t  else\n-\t    mpfr_min (extremum->expr->value.real, extremum->expr->value.real,\n-\t\t      arg->expr->value.real, GFC_RND_MODE);\n-\t  break;\n-\n-\tcase BT_CHARACTER:\n-#define LENGTH(x) ((x)->expr->value.character.length)\n-#define STRING(x) ((x)->expr->value.character.string)\n-\t  if (LENGTH(extremum) < LENGTH(arg))\n-\t    {\n-\t      gfc_char_t *tmp = STRING(extremum);\n-\n-\t      STRING(extremum) = gfc_get_wide_string (LENGTH(arg) + 1);\n-\t      memcpy (STRING(extremum), tmp,\n-\t\t      LENGTH(extremum) * sizeof (gfc_char_t));\n-\t      gfc_wide_memset (&STRING(extremum)[LENGTH(extremum)], ' ',\n-\t\t\t       LENGTH(arg) - LENGTH(extremum));\n-\t      STRING(extremum)[LENGTH(arg)] = '\\0';  /* For debugger  */\n-\t      LENGTH(extremum) = LENGTH(arg);\n-\t      gfc_free (tmp);\n-\t    }\n-\n-\t  if (gfc_compare_string (arg->expr, extremum->expr) * sign > 0)\n-\t    {\n-\t      gfc_free (STRING(extremum));\n-\t      STRING(extremum) = gfc_get_wide_string (LENGTH(extremum) + 1);\n-\t      memcpy (STRING(extremum), STRING(arg),\n-\t\t      LENGTH(arg) * sizeof (gfc_char_t));\n-\t      gfc_wide_memset (&STRING(extremum)[LENGTH(arg)], ' ',\n-\t\t\t       LENGTH(extremum) - LENGTH(arg));\n-\t      STRING(extremum)[LENGTH(extremum)] = '\\0';  /* For debugger  */\n-\t    }\n-#undef LENGTH\n-#undef STRING\n-\t  break;\n-\t      \n-\n-\tdefault:\n-\t  gfc_internal_error (\"simplify_min_max(): Bad type in arglist\");\n-\t}\n+      min_max_choose (arg->expr, extremum->expr, sign);\n \n       /* Delete the extra constant argument.  */\n       if (last == NULL)\n@@ -2746,6 +2754,69 @@ gfc_simplify_max (gfc_expr *e)\n }\n \n \n+/* This is a simplified version of simplify_min_max to provide\n+   simplification of minval and maxval for a vector.  */\n+\n+static gfc_expr *\n+simplify_minval_maxval (gfc_expr *expr, int sign)\n+{\n+  gfc_constructor *ctr, *extremum;\n+  gfc_intrinsic_sym * specific;\n+\n+  extremum = NULL;\n+  specific = expr->value.function.isym;\n+\n+  ctr = expr->value.constructor;\n+\n+  for (; ctr; ctr = ctr->next)\n+    {\n+      if (ctr->expr->expr_type != EXPR_CONSTANT)\n+\treturn NULL;\n+\n+      if (extremum == NULL)\n+\t{\n+\t  extremum = ctr;\n+\t  continue;\n+\t}\n+\n+      min_max_choose (ctr->expr, extremum->expr, sign);\n+     }\n+\n+  if (extremum == NULL)\n+    return NULL;\n+\n+  /* Convert to the correct type and kind.  */\n+  if (expr->ts.type != BT_UNKNOWN) \n+    return gfc_convert_constant (extremum->expr,\n+\texpr->ts.type, expr->ts.kind);\n+\n+  if (specific->ts.type != BT_UNKNOWN) \n+    return gfc_convert_constant (extremum->expr,\n+\tspecific->ts.type, specific->ts.kind); \n+ \n+  return gfc_copy_expr (extremum->expr);\n+}\n+\n+\n+gfc_expr *\n+gfc_simplify_minval (gfc_expr *array, gfc_expr* dim, gfc_expr *mask)\n+{\n+  if (array->expr_type != EXPR_ARRAY || array->rank != 1 || dim || mask)\n+    return NULL;\n+  \n+  return simplify_minval_maxval (array, -1);\n+}\n+\n+\n+gfc_expr *\n+gfc_simplify_maxval (gfc_expr *array, gfc_expr* dim, gfc_expr *mask)\n+{\n+  if (array->expr_type != EXPR_ARRAY || array->rank != 1 || dim || mask)\n+    return NULL;\n+  return simplify_minval_maxval (array, 1);\n+}\n+\n+\n gfc_expr *\n gfc_simplify_maxexponent (gfc_expr *x)\n {"}, {"sha": "5c1b974971e55fc7a84e34a3282f90967b5beed7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a0193eeedfa86c498cc72487d85fe9504291af4", "patch": "@@ -1,3 +1,8 @@\n+2008-11-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+        PR fortran/37836\n+        * gfortran.dg/minmaxval_1.f90: New test.\n+\n 2008-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/loop_boolean.adb: New test."}, {"sha": "bb16d2e5f0fd17538823e26844c472ccf53399ff", "filename": "gcc/testsuite/gfortran.dg/minmaxval_1.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxval_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0193eeedfa86c498cc72487d85fe9504291af4/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxval_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxval_1.f90?ref=5a0193eeedfa86c498cc72487d85fe9504291af4", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+! Tests the fix for PR37836 in which the specification expressions for\n+! y were not simplified because there was no simplifier for minval and\n+! maxval.\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+!\n+! nint(exp(3.0)) is equal to 20 :-)\n+!\n+      function fun4a()\n+         integer fun4a\n+         real y(minval([25, nint(exp(3.0)), 15]))\n+\n+        fun4a = size (y, 1)\n+       end function fun4a\n+\n+      function fun4b()\n+         integer fun4b\n+         real y(maxval([25, nint(exp(3.0)), 15]))\n+         save\n+\n+         fun4b = size (y, 1)\n+      end function fun4b\n+\n+      EXTERNAL fun4a, fun4b\n+      integer fun4a, fun4b\n+      if (fun4a () .ne. 15) call abort \n+      if (fun4b () .ne. 25) call abort \n+      end"}]}