{"sha": "e3949961fb3341f3c445a7ddd1537068440b268e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM5NDk5NjFmYjMzNDFmM2M0NDVhN2RkZDE1MzcwNjg0NDBiMjY4ZQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-04-18T08:08:47Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-04-18T08:08:47Z"}, "message": "re PR tree-optimization/26821 (ice in varasm.c with certain flags)\n\n2006-04-18  Paolo Bonzini  <bonzini@gnu.org>\n\n        PR tree-optimization/26821\n        * tree-ssa-math-opts.c (get_constant_one): New.\n        (insert_reciprocals): Use it.\n\nFrom-SVN: r113025", "tree": {"sha": "7ddbd6a82296f6aef5984bd9f4df28dfddae3be7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ddbd6a82296f6aef5984bd9f4df28dfddae3be7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3949961fb3341f3c445a7ddd1537068440b268e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3949961fb3341f3c445a7ddd1537068440b268e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3949961fb3341f3c445a7ddd1537068440b268e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3949961fb3341f3c445a7ddd1537068440b268e/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "231816e717b890fea61702c50840df004e97e4fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231816e717b890fea61702c50840df004e97e4fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231816e717b890fea61702c50840df004e97e4fd"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "2d26302bd4eae48bbeae674b35eed1546a970134", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3949961fb3341f3c445a7ddd1537068440b268e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3949961fb3341f3c445a7ddd1537068440b268e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3949961fb3341f3c445a7ddd1537068440b268e", "patch": "@@ -1,3 +1,9 @@\n+2006-04-18  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        PR tree-optimization/26821\n+        * tree-ssa-math-opts.c (get_constant_one): New.\n+        (insert_reciprocals): Use it.\n+\n 2006-04-17  Geoffrey Keating  <geoffk@apple.com>\n \n \t* dwarf2out.c (free_AT): Delete."}, {"sha": "89af9843fefa9497daf428bf85c9bdc387480a9b", "filename": "gcc/testsuite/gcc.dg/vect/vect-recip.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3949961fb3341f3c445a7ddd1537068440b268e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-recip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3949961fb3341f3c445a7ddd1537068440b268e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-recip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-recip.c?ref=e3949961fb3341f3c445a7ddd1537068440b268e", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+\n+void f(float *__restrict__ qa, float *__restrict__ qb,\n+       float *__restrict__ qc, float *__restrict__ rtrms)\n+{\n+  int i;\n+  static float qam[600];\n+  static float qbm[600];\n+  static float qcm[600];\n+  for(i=0;i<600;i++)\n+  {\n+    float a = rtrms[i];\n+    qam[i] = qa[i]/a;\n+    qbm[i] = qb[i]/a;\n+    qcm[i] = qc[i]/a;\n+  }\n+}"}, {"sha": "4d02894eb29f5f7864b041a0393823b7426eed32", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3949961fb3341f3c445a7ddd1537068440b268e/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3949961fb3341f3c445a7ddd1537068440b268e/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=e3949961fb3341f3c445a7ddd1537068440b268e", "patch": "@@ -279,6 +279,35 @@ is_division_by (tree use_stmt, tree def)\n \t && TREE_OPERAND (TREE_OPERAND (use_stmt, 1), 1) == def;\n }\n \n+/* Return the LHS of a RDIV_EXPR that computes a reciprocal in type TYPE.  */\n+static tree\n+get_constant_one (tree type)\n+{\n+  tree scalar, cst;\n+  int i;\n+\n+  gcc_assert (FLOAT_TYPE_P (type));\n+  switch (TREE_CODE (type))\n+    {\n+    case REAL_TYPE:\n+      return build_real (type, dconst1);\n+\n+    case VECTOR_TYPE:\n+      scalar = build_real (TREE_TYPE (type), dconst1);\n+\n+      /* Create 'vect_cst_ = {cst,cst,...,cst}'  */\n+      cst = NULL_TREE;\n+      for (i = TYPE_VECTOR_SUBPARTS (type); --i >= 0; )\n+        cst = tree_cons (NULL_TREE, scalar, cst);\n+\n+      return build_vector (type, cst);\n+\n+    default:\n+      /* Complex operations have been split already.  */\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Walk the subset of the dominator tree rooted at OCC, setting the\n    RECIP_DEF field to a definition of 1.0 / DEF that can be used in\n    the given basic block.  The field may be left NULL, of course,\n@@ -304,8 +333,8 @@ insert_reciprocals (block_stmt_iterator *def_bsi, struct occurrence *occ,\n       type = TREE_TYPE (def);\n       recip_def = make_rename_temp (type, \"reciptmp\");\n       new_stmt = build2 (MODIFY_EXPR, void_type_node, recip_def,\n-\t\t         fold_build2 (RDIV_EXPR, type,\n-\t\t\t\t      build_real (type, dconst1), def));\n+\t\t         fold_build2 (RDIV_EXPR, type, get_constant_one (type),\n+\t\t\t\t      def));\n   \n   \n       if (occ->bb_has_division)"}]}