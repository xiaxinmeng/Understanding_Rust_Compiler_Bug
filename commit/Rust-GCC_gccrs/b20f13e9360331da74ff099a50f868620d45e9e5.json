{"sha": "b20f13e9360331da74ff099a50f868620d45e9e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIwZjEzZTkzNjAzMzFkYTc0ZmYwOTlhNTBmODY4NjIwZDQ1ZTllNQ==", "commit": {"author": {"name": "Matt Thomas", "email": "matt@3am-software.com", "date": "2005-04-27T15:30:46Z"}, "committer": {"name": "Matt Thomas", "email": "matt@gcc.gnu.org", "date": "2005-04-27T15:30:46Z"}, "message": "vax.c (vax_rtx_costs): Whitespace cleanup.\n\n2005-04-27  Matt Thomas <matt@3am-software.com>\n            Jan-Benedict Glaw <jbglaw@microdata-pos.de>\n\n\t* config/vax/vax.c (vax_rtx_costs): Whitespace cleanup.\n\t(vax_output_mi_thunk): Ditto.\n\t(vax_notice_cc_update): Ditto.\n\t(INDEX_REGISTER_P): Add trailing \\.\n\t(BASE_REGISTER_P): Add trailing \\.\n\t(legitimate_address_p): Whitespace cleanup.  Remove trailing \\.\n\nCo-Authored-By: Jan-Benedict Glaw <jbglaw@microdata-pos.de>\n\nFrom-SVN: r98835", "tree": {"sha": "72cc2bc179cc8fb5328e313bd9e64e195da9bef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72cc2bc179cc8fb5328e313bd9e64e195da9bef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b20f13e9360331da74ff099a50f868620d45e9e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20f13e9360331da74ff099a50f868620d45e9e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20f13e9360331da74ff099a50f868620d45e9e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20f13e9360331da74ff099a50f868620d45e9e5/comments", "author": null, "committer": null, "parents": [{"sha": "81d4bb2f1774c06b66bd093f16dd545c74aaa924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d4bb2f1774c06b66bd093f16dd545c74aaa924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d4bb2f1774c06b66bd093f16dd545c74aaa924"}], "stats": {"total": 56, "additions": 20, "deletions": 36}, "files": [{"sha": "ec6c009bc0de3c2d24c3ff1548e64c36e676fca2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20f13e9360331da74ff099a50f868620d45e9e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20f13e9360331da74ff099a50f868620d45e9e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b20f13e9360331da74ff099a50f868620d45e9e5", "patch": "@@ -1,3 +1,13 @@\n+2005-04-27  Matt Thomas <matt@3am-software.com>\n+            Jan-Benedict Glaw <jbglaw@microdata-pos.de>\n+\n+\t* config/vax/vax.c (vax_rtx_costs): Whitespace cleanup.\n+\t(vax_output_mi_thunk): Ditto.\n+\t(vax_notice_cc_update): Ditto.\n+\t(INDEX_REGISTER_P): Add trailing \\.\n+\t(BASE_REGISTER_P): Add trailing \\.\n+\t(legitimate_address_p): Whitespace cleanup.  Remove trailing \\.\n+\n 2005-04-27  Richard Guenther  <rguenth@gcc.gnu.org>\n \n \t* tree-ssa-propagate.c (set_rhs): Check operand of\n@@ -80,38 +90,17 @@\n \t(INDEX_REGISTER_P): New.\n \t(BASE_REGISTER_P): New.\n \t(indirectable_constant_address_p): New.  Adapted from\n-<<<<<<< ChangeLog\n-\tINDIRECTABLE_CONSTANT_ADDRESS_P in vax.h.\n-\tUse SYMBOL_REF_LOCAL_P.\n-=======\n \tINDIRECTABLE_CONSTANT_ADDRESS_P in vax.h. Use SYMBOL_REF_LOCAL_P.\n->>>>>>> 2.8478\n \t(indirectable_address_p): New.  Adapted from\n \tINDIRECTABLE_ADDRESS_P in vax.h.\n \t(nonindexed_address_p): New.  Adapted from\n-<<<<<<< ChangeLog\n-\tGO_IF_NONINDEXED_ADDRESS in vax.h.\n-\t(index_temp_p): New.  Adapted from\n-\tINDEX_TERM_P in vax.h.\n-\t(reg_plus_index_p): New.  Adapted from\n-\tGO_IF_REG_PLUS_INDEX in vax.h.\n-=======\n \tGO_IF_NONINDEXED_ADDRESS in vax.h.\n \t(index_temp_p): New.  Adapted from INDEX_TERM_P in vax.h.\n \t(reg_plus_index_p): New.  Adapted from GO_IF_REG_PLUS_INDEX in vax.h.\n->>>>>>> 2.8478\n \t(legitimate_address_p): New.  Adapted from\n-<<<<<<< ChangeLog\n-\tGO_IF_LEGITIMATE_ADDRESS in vax.h\n-=======\n \tGO_IF_LEGITIMATE_ADDRESS in vax.h.\n->>>>>>> 2.8478\n \t(vax_mode_dependent_address_p): New.  Adapted from\n-<<<<<<< ChangeLog\n-\tGO_IF_MODE_DEPENDENT_ADDRESS in vax.h\n-=======\n \tGO_IF_MODE_DEPENDENT_ADDRESS in vax.h.\n->>>>>>> 2.8478\n \t* config/vax/vax.h (CONSTANT_ADDRESS_P): Use\n \tlegitimate_constant_address_p.\n \t(CONSTANT_P): Use legitimate_constant_p.\n@@ -120,13 +109,8 @@\n \t(GO_IF_NONINDEXED_ADDRESS): Removed.\n \t(INDEX_TEMP_P): Removed.\n \t(GO_IF_REG_PLUS_INDEX): Removed.\n-<<<<<<< ChangeLog\n-\t(GO_IF_LEGITIMATE_ADDRESS): Use legitimate_address_p.\n-\tTwo definitions, depending on whether REG_OK_STRICT is defined.\n-=======\n \t(GO_IF_LEGITIMATE_ADDRESS): Use legitimate_address_p. Two\n \tdefinitions, depending on whether REG_OK_STRICT is defined.\n->>>>>>> 2.8478\n \t(GO_IF_MODE_DEPENDENT_ADDRESS): Use vax_mode_dependent_address_p.\n \tTwo definitions, depending on whether REG_OK_STRICT is defined.\n \t* config/vax/vax-protos.h (legitimate_constant_address_p): Prototype"}, {"sha": "18a1e01176c5870145c70b7d2a7b12baf2a4f47e", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20f13e9360331da74ff099a50f868620d45e9e5/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20f13e9360331da74ff099a50f868620d45e9e5/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=b20f13e9360331da74ff099a50f868620d45e9e5", "patch": "@@ -587,7 +587,7 @@ vax_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t\t      && (unsigned HOST_WIDE_INT)-CONST_DOUBLE_LOW (x) < 64))\n \t\t ? 2 : 5;\n       return true;\n- \n+\n     case POST_INC:\n       *total = 2;\n       return true;\t\t/* Implies register operand.  */\n@@ -815,16 +815,16 @@ vax_rtx_costs (rtx x, int code, int outer_code, int *total)\n \n static void\n vax_output_mi_thunk (FILE * file,\n-                     tree thunk ATTRIBUTE_UNUSED, \n+                     tree thunk ATTRIBUTE_UNUSED,\n                      HOST_WIDE_INT delta,\n                      HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n                      tree function)\n {\n   fprintf (file, \"\\t.word 0x0ffc\\n\\taddl2 $\" HOST_WIDE_INT_PRINT_DEC, delta);\n   asm_fprintf (file, \",4(%Rap)\\n\");\n-  fprintf (file, \"\\tjmp \");\t\t\t\t\t\t\n-  assemble_name (file,  XSTR (XEXP (DECL_RTL (function), 0), 0));\t\n-  fprintf (file, \"+2\\n\");\t\t\t\t\t\t\n+  fprintf (file, \"\\tjmp \");\n+  assemble_name (file,  XSTR (XEXP (DECL_RTL (function), 0), 0));\n+  fprintf (file, \"+2\\n\");\n }\n \f\n static rtx\n@@ -857,7 +857,7 @@ vax_notice_update_cc (rtx exp, rtx insn ATTRIBUTE_UNUSED)\n \t    {\n \t    case NEG:\n \t      if (GET_MODE_CLASS (GET_MODE (exp)) == MODE_FLOAT)\n-\t \tbreak;\n+\t\tbreak;\n \t    case AND:\n \t    case IOR:\n \t    case XOR:\n@@ -1123,12 +1123,12 @@ legitimate_constant_p (rtx x ATTRIBUTE_UNUSED)\n \n /* Nonzero if X is a hard reg that can be used as an index\n    or, if not strict, if it is a pseudo reg.  */\n-#define\tINDEX_REGISTER_P(X, STRICT)\n+#define\tINDEX_REGISTER_P(X, STRICT) \\\n (GET_CODE (X) == REG && (!(STRICT) || REGNO_OK_FOR_INDEX_P (REGNO (X))))\n \n /* Nonzero if X is a hard reg that can be used as a base reg\n    or, if not strict, if it is a pseudo reg.  */\n-#define\tBASE_REGISTER_P(X, STRICT)\n+#define\tBASE_REGISTER_P(X, STRICT) \\\n (GET_CODE (X) == REG && (!(STRICT) || REGNO_OK_FOR_BASE_P (REGNO (X))))\n \n #ifdef NO_EXTERNAL_INDIRECT_ADDRESS\n@@ -1283,7 +1283,7 @@ legitimate_address_p (enum machine_mode mode, rtx x, int strict)\n       && nonindexed_address_p (xfoo0, strict))\n     return 1;\n \n-  /* Handle offset(reg)[index] with offset added outermost */\t\\\n+  /* Handle offset(reg)[index] with offset added outermost */\n \n   if (indirectable_constant_address_p (xfoo0)\n       && (BASE_REGISTER_P (xfoo1, strict)\n@@ -1296,7 +1296,7 @@ legitimate_address_p (enum machine_mode mode, rtx x, int strict)\n     return 1;\n \n   return 0;\n-} \n+}\n \n /* Return 1 if x (a legitimate address expression) has an effect that\n    depends on the machine mode it is used for.  On the VAX, the predecrement"}]}