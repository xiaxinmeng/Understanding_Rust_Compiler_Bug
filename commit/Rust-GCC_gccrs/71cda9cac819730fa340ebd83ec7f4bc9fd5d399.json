{"sha": "71cda9cac819730fa340ebd83ec7f4bc9fd5d399", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFjZGE5Y2FjODE5NzMwZmEzNDBlYmQ4M2VjN2Y0YmM5ZmQ1ZDM5OQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2015-09-04T22:17:11Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2015-09-04T22:17:11Z"}, "message": "PR 53379 Print backtrace on error termination.\n\n2015-09-05  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/53379\n\t* libgfortran.h (exit_error): New prototype.\n\t* runtime/error.c (exit_error): New function.\n\t(os_error): Call exit_error instead of exit.\n\t(runtime_error): Likewise.\n\t(runtime_error_at): Likewise.\n\t(internal_error): Likewise.\n\t(generate_error): Likewise.\n\t(notify_std): Likewise.\n\t* runtime/stop.c (error_stop_string): Likewise.\n\t(error_stop_numeric): Likewise.\n\nFrom-SVN: r227503", "tree": {"sha": "1e86b9612c9e453b6de4ddded336603afe52274f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e86b9612c9e453b6de4ddded336603afe52274f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71cda9cac819730fa340ebd83ec7f4bc9fd5d399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cda9cac819730fa340ebd83ec7f4bc9fd5d399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71cda9cac819730fa340ebd83ec7f4bc9fd5d399", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cda9cac819730fa340ebd83ec7f4bc9fd5d399/comments", "author": null, "committer": null, "parents": [{"sha": "5e229618cd309e8eab48f52f1ae63ea71a88be23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e229618cd309e8eab48f52f1ae63ea71a88be23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e229618cd309e8eab48f52f1ae63ea71a88be23"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "8b4c27cbc95cb10dd5fd8c8ef6e94ba5ef2b2058", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cda9cac819730fa340ebd83ec7f4bc9fd5d399/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cda9cac819730fa340ebd83ec7f4bc9fd5d399/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=71cda9cac819730fa340ebd83ec7f4bc9fd5d399", "patch": "@@ -1,3 +1,17 @@\n+2015-09-05  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/53379\n+\t* libgfortran.h (exit_error): New prototype.\n+\t* runtime/error.c (exit_error): New function.\n+\t(os_error): Call exit_error instead of exit.\n+\t(runtime_error): Likewise.\n+\t(runtime_error_at): Likewise.\n+\t(internal_error): Likewise.\n+\t(generate_error): Likewise.\n+\t(notify_std): Likewise.\n+\t* runtime/stop.c (error_stop_string): Likewise.\n+\t(error_stop_numeric): Likewise.\n+\n 2015-09-04  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* io/unix.h (delete_file): Remove prototype."}, {"sha": "81240e591b8e0fa1a7ad6a4914d8993be5d10c2d", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cda9cac819730fa340ebd83ec7f4bc9fd5d399/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cda9cac819730fa340ebd83ec7f4bc9fd5d399/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=71cda9cac819730fa340ebd83ec7f4bc9fd5d399", "patch": "@@ -675,6 +675,9 @@ internal_proto(show_backtrace);\n extern _Noreturn void sys_abort (void);\n internal_proto(sys_abort);\n \n+extern _Noreturn void exit_error (int);\n+internal_proto(exit_error);\n+\n extern ssize_t estr_write (const char *);\n internal_proto(estr_write);\n "}, {"sha": "d357edb460db398ebe1e8282fc2bce5c70856914", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cda9cac819730fa340ebd83ec7f4bc9fd5d399/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cda9cac819730fa340ebd83ec7f4bc9fd5d399/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=71cda9cac819730fa340ebd83ec7f4bc9fd5d399", "patch": "@@ -74,15 +74,17 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n    2.3.5 also explains how co-images synchronize during termination.\n \n-   In libgfortran we have two ways of ending a program. exit(code) is\n-   a normal exit; calling exit() also causes open units to be\n-   closed. No backtrace or core dump is needed here. When something\n-   goes wrong, we have sys_abort() which tries to print the backtrace\n-   if -fbacktrace is enabled, and then dumps core; whether a core file\n-   is generated is system dependent. When aborting, we don't flush and\n-   close open units, as program memory might be corrupted and we'd\n-   rather risk losing dirty data in the buffers rather than corrupting\n-   files on disk.\n+   In libgfortran we have three ways of ending a program. exit(code)\n+   is a normal exit; calling exit() also causes open units to be\n+   closed. No backtrace or core dump is needed here.  For error\n+   termination, we have exit_error(status), which prints a backtrace\n+   if backtracing is enabled, then exits.  Finally, when something\n+   goes terribly wrong, we have sys_abort() which tries to print the\n+   backtrace if -fbacktrace is enabled, and then dumps core; whether a\n+   core file is generated is system dependent. When aborting, we don't\n+   flush and close open units, as program memory might be corrupted\n+   and we'd rather risk losing dirty data in the buffers rather than\n+   corrupting files on disk.\n \n */\n \n@@ -181,6 +183,23 @@ sys_abort (void)\n }\n \n \n+/* Exit in case of error termination. If backtracing is enabled, print\n+   backtrace, then exit.  */\n+\n+void\n+exit_error (int status)\n+{\n+  if (options.backtrace == 1\n+      || (options.backtrace == -1 && compile_options.backtrace == 1))\n+    {\n+      estr_write (\"\\nError termination. Backtrace:\\n\");\n+      show_backtrace (false);\n+    }\n+  exit (status);\n+}\n+\n+\n+\n /* gfc_xtoa()-- Integer to hexadecimal conversion.  */\n \n const char *\n@@ -326,7 +345,7 @@ os_error (const char *message)\n   estr_write (\"\\n\");\n   estr_write (message);\n   estr_write (\"\\n\");\n-  exit (1);\n+  exit_error (1);\n }\n iexport(os_error);\n \n@@ -345,7 +364,7 @@ runtime_error (const char *message, ...)\n   st_vprintf (message, ap);\n   va_end (ap);\n   estr_write (\"\\n\");\n-  exit (2);\n+  exit_error (2);\n }\n iexport(runtime_error);\n \n@@ -364,7 +383,7 @@ runtime_error_at (const char *where, const char *message, ...)\n   st_vprintf (message, ap);\n   va_end (ap);\n   estr_write (\"\\n\");\n-  exit (2);\n+  exit_error (2);\n }\n iexport(runtime_error_at);\n \n@@ -402,7 +421,7 @@ internal_error (st_parameter_common *cmp, const char *message)\n      because hopefully it doesn't happen too often).  */\n   stupid_function_name_for_static_linking();\n \n-  exit (3);\n+ exit_error (3);\n }\n \n \n@@ -574,7 +593,7 @@ generate_error (st_parameter_common *cmp, int family, const char *message)\n   estr_write (\"Fortran runtime error: \");\n   estr_write (message);\n   estr_write (\"\\n\");\n-  exit (2);\n+  exit_error (2);\n }\n iexport(generate_error);\n \n@@ -636,7 +655,7 @@ notify_std (st_parameter_common *cmp, int std, const char * message)\n       estr_write (\"Fortran runtime error: \");\n       estr_write (message);\n       estr_write (\"\\n\");\n-      exit (2);\n+      exit_error (2);\n     }\n   else\n     {"}, {"sha": "8b8a41f72742745e5d84f20cd7b78541a19ddcb4", "filename": "libgfortran/runtime/stop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cda9cac819730fa340ebd83ec7f4bc9fd5d399/libgfortran%2Fruntime%2Fstop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cda9cac819730fa340ebd83ec7f4bc9fd5d399/libgfortran%2Fruntime%2Fstop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstop.c?ref=71cda9cac819730fa340ebd83ec7f4bc9fd5d399", "patch": "@@ -145,7 +145,7 @@ error_stop_string (const char *string, GFC_INTEGER_4 len)\n   (void) write (STDERR_FILENO, string, len);\n   estr_write (\"\\n\");\n \n-  exit (1);\n+  exit_error (1);\n }\n \n \n@@ -159,5 +159,5 @@ error_stop_numeric (GFC_INTEGER_4 code)\n {\n   report_exception ();\n   st_printf (\"ERROR STOP %d\\n\", (int) code);\n-  exit (code);\n+  exit_error (code);\n }"}]}