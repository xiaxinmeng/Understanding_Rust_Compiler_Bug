{"sha": "17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdiOTgyNjk5ZjgxN2E2ZGM1YjFiOGYxM2EwZjQzZWFmODcxOGVhZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2006-10-25T06:36:49Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-10-25T06:36:49Z"}, "message": "optabs.h (enum optab_index): Rename OTI_drem to OTI_remainder.\n\n        * optabs.h (enum optab_index): Rename OTI_drem to OTI_remainder.\n        (remainder_optab): Define corresponding macro.\n        (drem_optab): Remove.\n        * optabs.c (init_optabs): Initialize remainder_optab.  Remove\n        drem_optab initialization.\n        * genopinit.c (optabs): Implement remainder_optab using\n        remainder?f3 patterns.  Remove drem_optab.\n        * builtins.c (expand_builtin_mathfn_2): Handle\n        BUILT_IN_REMAINDER{,F,L} using remainder_optab.\n        (expand_builtin): Expand BUILT_IN_REMAINDER{,F,L} using\n        expand_builtin_mathfn_2.\n\n        (expand_builtin) [BUILT_IN_FMOD, BUILT_IN_DREM]: Do not\n        depend on flag_unsafe_math_optimizations.\n\n        * config/i386/i386.md (\"remaindersf3\", \"remainderdf3\")\n        (\"remainderxf3\"): Renamed from \"drem{s,d,x}f3\" expanders.\n        Do not depend on flag_unsafe_math_optimizations.  Use\n        truncxf?f expander instead of truncxf?f_i387_noop.\n\n        (\"fpremxf4\", \"fprem1xf4\"): Do not depend on\n        flag_unsafe_math_optimizations.\n        (\"fmodsf3\", \"fmoddf3\", \"fmodxf3\"): Do not depend on\n        flag_unsafe_math_optimizations.  Use truncxf?f expander\n        instead of truncxf?f_i387_noop.\n\n        * doc/md.texi (fmod, remainder): Document standard named pattern.\n\ntestsuite/ChangeLog:\n\n        * gcc.dg/builtins-40.c: Also check remainder(), remainderf()\n        and remainderl() built-in functions.  Remove -ffast-math from\n        dg-options.\n\nFrom-SVN: r118024", "tree": {"sha": "649288ab8cb4c7a07e2984f5f7ec06cb008a3a4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/649288ab8cb4c7a07e2984f5f7ec06cb008a3a4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/comments", "author": null, "committer": null, "parents": [{"sha": "942d7821790f4341cfacc5b704f9344cc9c2efc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942d7821790f4341cfacc5b704f9344cc9c2efc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942d7821790f4341cfacc5b704f9344cc9c2efc9"}], "stats": {"total": 156, "additions": 114, "deletions": 42}, "files": [{"sha": "905863120330910345d3f9952b726357a4bede5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "patch": "@@ -1,3 +1,33 @@\n+2006-10-25  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* optabs.h (enum optab_index): Rename OTI_drem to OTI_remainder.\n+\t(remainder_optab): Define corresponding macro.\n+\t(drem_optab): Remove.\n+\t* optabs.c (init_optabs): Initialize remainder_optab.  Remove\n+\tdrem_optab initialization.\n+\t* genopinit.c (optabs): Implement remainder_optab using\n+\tremainder?f3 patterns.  Remove drem_optab.\n+\t* builtins.c (expand_builtin_mathfn_2): Handle\n+\tBUILT_IN_REMAINDER{,F,L} using remainder_optab.\n+\t(expand_builtin): Expand BUILT_IN_REMAINDER{,F,L} using\n+\texpand_builtin_mathfn_2.\n+\n+\t(expand_builtin) [BUILT_IN_FMOD, BUILT_IN_DREM]: Do not\n+\tdepend on flag_unsafe_math_optimizations.\n+\n+\t* config/i386/i386.md (\"remaindersf3\", \"remainderdf3\")\n+\t(\"remainderxf3\"): Renamed from \"drem{s,d,x}f3\" expanders.\n+\tDo not depend on flag_unsafe_math_optimizations.  Use\n+\ttruncxf?f expander instead of truncxf?f_i387_noop.\n+\n+\t(\"fpremxf4\", \"fprem1xf4\"): Do not depend on\n+\tflag_unsafe_math_optimizations.\n+\t(\"fmodsf3\", \"fmoddf3\", \"fmodxf3\"): Do not depend on\n+\tflag_unsafe_math_optimizations.  Use truncxf?f expander\n+\tinstead of truncxf?f_i387_noop.\n+\n+\t* doc/md.texi (fmod, remainder): Document standard named pattern.\n+\n 2006-10-24  Richard Sandiford  <richard@codesourcery.com>\n \t    David Daney  <ddaney@avtrex.com>\n "}, {"sha": "6955cda2a834b4dc5990b5c6ed92ac46fe5a8645", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "patch": "@@ -1975,8 +1975,9 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n       builtin_optab = ldexp_optab; break;\n     CASE_FLT_FN (BUILT_IN_FMOD):\n       builtin_optab = fmod_optab; break;\n+    CASE_FLT_FN (BUILT_IN_REMAINDER):\n     CASE_FLT_FN (BUILT_IN_DREM):\n-      builtin_optab = drem_optab; break;\n+      builtin_optab = remainder_optab; break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -5796,10 +5797,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \n     CASE_FLT_FN (BUILT_IN_ATAN2):\n     CASE_FLT_FN (BUILT_IN_LDEXP):\n-    CASE_FLT_FN (BUILT_IN_FMOD):\n-    CASE_FLT_FN (BUILT_IN_DREM):\n       if (! flag_unsafe_math_optimizations)\n \tbreak;\n+\n+    CASE_FLT_FN (BUILT_IN_FMOD):\n+    CASE_FLT_FN (BUILT_IN_REMAINDER):\n+    CASE_FLT_FN (BUILT_IN_DREM):\n       target = expand_builtin_mathfn_2 (exp, target, subtarget);\n       if (target)\n \treturn target;"}, {"sha": "aadf2ff8f85f60a2a4910ed5a035e14a59aceac8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "patch": "@@ -15610,8 +15610,7 @@\n \t\t   UNSPEC_FPREM_U))\n    (set (reg:CCFP FPSR_REG)\n \t(unspec:CCFP [(const_int 0)] UNSPEC_NOP))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n+  \"TARGET_USE_FANCY_MATH_387\"\n   \"fprem\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n@@ -15621,8 +15620,7 @@\n    (use (match_operand:SF 1 \"register_operand\" \"\"))\n    (use (match_operand:SF 2 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n+   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\"\n {\n   rtx label = gen_label_rtx ();\n \n@@ -15637,7 +15635,7 @@\n   emit_insn (gen_fpremxf4 (op1, op2, op1, op2));\n   ix86_emit_fp_unordered_jump (label);\n \n-  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op1));\n+  emit_insn (gen_truncxfsf2 (operands[0], op1));\n   DONE;\n })\n \n@@ -15646,8 +15644,7 @@\n    (use (match_operand:DF 1 \"register_operand\" \"\"))\n    (use (match_operand:DF 2 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n+   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\"\n {\n   rtx label = gen_label_rtx ();\n \n@@ -15662,16 +15659,15 @@\n   emit_insn (gen_fpremxf4 (op1, op2, op1, op2));\n   ix86_emit_fp_unordered_jump (label);\n \n-  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op1));\n+  emit_insn (gen_truncxfdf2 (operands[0], op1));\n   DONE;\n })\n \n (define_expand \"fmodxf3\"\n   [(use (match_operand:XF 0 \"register_operand\" \"\"))\n    (use (match_operand:XF 1 \"register_operand\" \"\"))\n    (use (match_operand:XF 2 \"register_operand\" \"\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n+  \"TARGET_USE_FANCY_MATH_387\"\n {\n   rtx label = gen_label_rtx ();\n \n@@ -15695,19 +15691,17 @@\n \t\t   UNSPEC_FPREM1_U))\n    (set (reg:CCFP FPSR_REG)\n \t(unspec:CCFP [(const_int 0)] UNSPEC_NOP))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n+  \"TARGET_USE_FANCY_MATH_387\"\n   \"fprem1\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n \n-(define_expand \"dremsf3\"\n+(define_expand \"remaindersf3\"\n   [(use (match_operand:SF 0 \"register_operand\" \"\"))\n    (use (match_operand:SF 1 \"register_operand\" \"\"))\n    (use (match_operand:SF 2 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n+   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\"\n {\n   rtx label = gen_label_rtx ();\n \n@@ -15722,17 +15716,16 @@\n   emit_insn (gen_fprem1xf4 (op1, op2, op1, op2));\n   ix86_emit_fp_unordered_jump (label);\n \n-  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op1));\n+  emit_insn (gen_truncxfsf2 (operands[0], op1));\n   DONE;\n })\n \n-(define_expand \"dremdf3\"\n+(define_expand \"remainderdf3\"\n   [(use (match_operand:DF 0 \"register_operand\" \"\"))\n    (use (match_operand:DF 1 \"register_operand\" \"\"))\n    (use (match_operand:DF 2 \"register_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n+   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\"\n {\n   rtx label = gen_label_rtx ();\n \n@@ -15747,16 +15740,15 @@\n   emit_insn (gen_fprem1xf4 (op1, op2, op1, op2));\n   ix86_emit_fp_unordered_jump (label);\n \n-  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op1));\n+  emit_insn (gen_truncxfdf2 (operands[0], op1));\n   DONE;\n })\n \n-(define_expand \"dremxf3\"\n+(define_expand \"remainderxf3\"\n   [(use (match_operand:XF 0 \"register_operand\" \"\"))\n    (use (match_operand:XF 1 \"register_operand\" \"\"))\n    (use (match_operand:XF 2 \"register_operand\" \"\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n+  \"TARGET_USE_FANCY_MATH_387\"\n {\n   rtx label = gen_label_rtx ();\n "}, {"sha": "a05f9d04a9ead5e3129be51764869620f480ea07", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "patch": "@@ -3569,6 +3569,26 @@ corresponds to the C data type @code{double} and the @code{sqrtf}\n built-in function uses the mode which corresponds to the C data\n type @code{float}.\n \n+@cindex @code{fmod@var{m}3} instruction pattern\n+@item @samp{fmod@var{m}3}\n+Store the remainder of dividing operand 1 by operand 2 into\n+operand 0, rounded towards zero to an integer.\n+\n+The @code{fmod} built-in function of C always uses the mode which\n+corresponds to the C data type @code{double} and the @code{fmodf}\n+built-in function uses the mode which corresponds to the C data\n+type @code{float}.\n+\n+@cindex @code{remainder@var{m}3} instruction pattern\n+@item @samp{remainder@var{m}3}\n+Store the remainder of dividing operand 1 by operand 2 into\n+operand 0, rounded to the nearest integer.\n+\n+The @code{remainder} built-in function of C always uses the mode\n+which corresponds to the C data type @code{double} and the\n+@code{remainderf} built-in function uses the mode which corresponds\n+to the C data type @code{float}.\n+\n @cindex @code{cos@var{m}2} instruction pattern\n @item @samp{cos@var{m}2}\n Store the cosine of operand 1 into operand 0."}, {"sha": "4f7bd46595c24eda7ead0cc26cd9a65a00e1b13a", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "patch": "@@ -93,7 +93,7 @@ static const char * const optabs[] =\n   \"smod_optab->handlers[$A].insn_code = CODE_FOR_$(mod$a3$)\",\n   \"umod_optab->handlers[$A].insn_code = CODE_FOR_$(umod$a3$)\",\n   \"fmod_optab->handlers[$A].insn_code = CODE_FOR_$(fmod$a3$)\",\n-  \"drem_optab->handlers[$A].insn_code = CODE_FOR_$(drem$a3$)\",\n+  \"remainder_optab->handlers[$A].insn_code = CODE_FOR_$(remainder$a3$)\",\n   \"ftrunc_optab->handlers[$A].insn_code = CODE_FOR_$(ftrunc$F$a2$)\",\n   \"and_optab->handlers[$A].insn_code = CODE_FOR_$(and$a3$)\",\n   \"ior_optab->handlers[$A].insn_code = CODE_FOR_$(ior$a3$)\","}, {"sha": "12fd34e5da21de2c9a2afc74eed909c0069423f9", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "patch": "@@ -5212,7 +5212,7 @@ init_optabs (void)\n   smod_optab = init_optab (MOD);\n   umod_optab = init_optab (UMOD);\n   fmod_optab = init_optab (UNKNOWN);\n-  drem_optab = init_optab (UNKNOWN);\n+  remainder_optab = init_optab (UNKNOWN);\n   ftrunc_optab = init_optab (UNKNOWN);\n   and_optab = init_optab (AND);\n   ior_optab = init_optab (IOR);"}, {"sha": "69dcbe11b91ec84c91bc631ca0d8c10bb354815b", "filename": "gcc/optabs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "patch": "@@ -98,7 +98,7 @@ enum optab_index\n   OTI_umod,\n   /* Floating point remainder functions */\n   OTI_fmod,\n-  OTI_drem,\n+  OTI_remainder,\n   /* Convert float to integer in float fmt */\n   OTI_ftrunc,\n \n@@ -289,7 +289,7 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define smod_optab (optab_table[OTI_smod])\n #define umod_optab (optab_table[OTI_umod])\n #define fmod_optab (optab_table[OTI_fmod])\n-#define drem_optab (optab_table[OTI_drem])\n+#define remainder_optab (optab_table[OTI_remainder])\n #define ftrunc_optab (optab_table[OTI_ftrunc])\n #define and_optab (optab_table[OTI_and])\n #define ior_optab (optab_table[OTI_ior])"}, {"sha": "264d5992d394375069c67c93e700c0c6ecf0b294", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "patch": "@@ -1,3 +1,9 @@\n+2006-10-25  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* gcc.dg/builtins-40.c: Also check remainder(), remainderf()\n+\tand remainderl() built-in functions.  Remove -ffast-math from\n+\tdg-options.\n+\n 2006-10-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-math-2.c: Add checks for asin, acos,"}, {"sha": "982175a3a6b631224a5c500cda5e33367821d50d", "filename": "gcc/testsuite/gcc.dg/builtins-40.c", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b982699f817a6dc5b1b8f13a0f43eaf8718ead/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-40.c?ref=17b982699f817a6dc5b1b8f13a0f43eaf8718ead", "patch": "@@ -1,18 +1,24 @@\n /* Copyright (C) 2004 Free Software Foundation.\n \n-   Check that fmod, fmodf, fmodl, drem, dremf and dreml\n+   Check that fmod, fmodf, fmodl, drem, dremf, dreml,\n+   remainder, remainderf and remainderl\n    built-in functions compile.\n \n    Written by Uros Bizjak, 5th May 2004.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ffast-math\" } */\n+/* { dg-options \"-O2\" } */\n \n extern double fmod(double, double);\n-extern double drem(double, double);\n extern float fmodf(float, float);\n-extern float dremf(float, float);\n extern long double fmodl(long double, long double);\n+\n+extern double remainder(double, double);\n+extern float remainderf(float, float);\n+extern long double remainderl(long double, long double);\n+\n+extern double drem(double, double);\n+extern float dremf(float, float);\n extern long double dreml(long double, long double);\n \n \n@@ -21,27 +27,42 @@ double test1(double x, double y)\n   return fmod(x, y);\n }\n \n-double test2(double x, double y)\n+float test1f(float x, float y)\n {\n-  return drem(x, y);\n+  return fmodf(x, y);\n }\n \n-float test1f(float x, float y)\n+long double test1l(long double x, long double y)\n {\n-  return fmodf(x, y);\n+  return fmodl(x, y);\n }\n \n-float test2f(float x, float y)\n+double test2(double x, double y)\n {\n-  return dremf(x, y);\n+  return remainder(x, y);\n }\n \n-long double test1l(long double x, long double y)\n+float test2f(float x, float y)\n {\n-  return fmodl(x, y);\n+  return remainderf(x, y);\n }\n \n long double test2l(long double x, long double y)\n+{\n+  return remainderl(x, y);\n+}\n+\n+double test3(double x, double y)\n+{\n+  return drem(x, y);\n+}\n+\n+float test3f(float x, float y)\n+{\n+  return dremf(x, y);\n+}\n+\n+long double test3l(long double x, long double y)\n {\n   return dreml(x, y);\n }"}]}