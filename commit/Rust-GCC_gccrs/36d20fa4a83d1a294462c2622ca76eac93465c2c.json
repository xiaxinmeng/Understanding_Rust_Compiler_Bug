{"sha": "36d20fa4a83d1a294462c2622ca76eac93465c2c", "node_id": "C_kwDOANBUbNoAKDM2ZDIwZmE0YTgzZDFhMjk0NDYyYzI2MjJjYTc2ZWFjOTM0NjVjMmM", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-14T23:07:50Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-14T23:07:50Z"}, "message": "preprocessor: C2x identifier rules\n\nC2x has, like C++, adopted rules for identifiers based directly on an\nunversioned normative reference to Unicode.  Make libcpp follow those\nrules for c2x / gnu2x standards (this involves bringing back a flag\nseparate from the C++ one for whether to use these identifier rules,\nbut this time enabled for all C++ language versions since that was the\nconclusion adopted for C++ identifier handling).\n\nThere is one change here that affects C++.  I believe the new\nnormative requirement for NFC only applies to identifiers, not to the\nuse of identifier-continue characters in pp-numbers, where there is no\nsuch requirement and so the diagnostic ought to be a warning not a\npedwarn in pp-numbers, and that this is the case for both C and C++.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\nlibcpp/\n\t* charset.cc (ucn_valid_in_identifier): Check xid_identifiers not\n\tcplusplus to determine whether to use CXX23 and NXX23 flags.\n\t* include/cpplib.h (struct cpp_options): Add xid_identifiers.\n\t* init.cc (struct lang_flags, lang_defaults): Add xid_identifiers.\n\t(cpp_set_lang): Set xid_identifiers.\n\t* lex.cc (warn_about_normalization): Add parameter identifier.\n\tOnly pedwarn about non-NFC for identifiers, not pp-numbers.\n\t(_cpp_lex_direct): Update calls to warn_about_normalization.\n\ngcc/testsuite/\n\t* gcc.dg/cpp/c2x-ucnid-1-utf8.c, gcc.dg/cpp/c2x-ucnid-1.c: New\n\ttests.", "tree": {"sha": "f2ce724a425779a555362f80d7d418a7318f836d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2ce724a425779a555362f80d7d418a7318f836d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36d20fa4a83d1a294462c2622ca76eac93465c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d20fa4a83d1a294462c2622ca76eac93465c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d20fa4a83d1a294462c2622ca76eac93465c2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d20fa4a83d1a294462c2622ca76eac93465c2c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89f20c9ae4641f9b2e87e47f7dab3dc197faa0aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f20c9ae4641f9b2e87e47f7dab3dc197faa0aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f20c9ae4641f9b2e87e47f7dab3dc197faa0aa"}], "stats": {"total": 99, "additions": 66, "deletions": 33}, "files": [{"sha": "55d228195632c529ae0bbcdeef749d24af3907d6", "filename": "gcc/testsuite/gcc.dg/cpp/c2x-ucnid-1-utf8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d20fa4a83d1a294462c2622ca76eac93465c2c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-ucnid-1-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d20fa4a83d1a294462c2622ca76eac93465c2c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-ucnid-1-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-ucnid-1-utf8.c?ref=36d20fa4a83d1a294462c2622ca76eac93465c2c", "patch": "@@ -0,0 +1,13 @@\n+/* Test C2x (= Unicode) rules for characters in identifiers.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+\u00a8\n+\n+/* The requirement for NFC only applies in identifiers, not pp-numbers.  */\n+\n+A\u0300 /* { dg-error \"not in NFC\" } */\n+\u00ffA\u0300 /* { dg-error \"not in NFC\" } */\n+\n+0A\u0300 /* { dg-warning \"not in NFC\" } */\n+.1A\u0300 /* { dg-warning \"not in NFC\" } */"}, {"sha": "f9fdbea6ecedeedb09259ffd8d9273d21aaa914c", "filename": "gcc/testsuite/gcc.dg/cpp/c2x-ucnid-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d20fa4a83d1a294462c2622ca76eac93465c2c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-ucnid-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d20fa4a83d1a294462c2622ca76eac93465c2c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-ucnid-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-ucnid-1.c?ref=36d20fa4a83d1a294462c2622ca76eac93465c2c", "patch": "@@ -0,0 +1,13 @@\n+/* Test C2x (= Unicode) rules for characters in identifiers.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+\\u00A8 /* { dg-error \"is not valid in an identifier\" } */\n+\n+/* The requirement for NFC only applies in identifiers, not pp-numbers.  */\n+\n+A\\u0300 /* { dg-error \"not in NFC\" } */\n+\\u00ffA\\u0300 /* { dg-error \"not in NFC\" } */\n+\n+0A\\u0300 /* { dg-warning \"not in NFC\" } */\n+.1A\\u0300 /* { dg-warning \"not in NFC\" } */"}, {"sha": "12a398e7527d293356ded9eb45eb83c9f6b0dafd", "filename": "libcpp/charset.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d20fa4a83d1a294462c2622ca76eac93465c2c/libcpp%2Fcharset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d20fa4a83d1a294462c2622ca76eac93465c2c/libcpp%2Fcharset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.cc?ref=36d20fa4a83d1a294462c2622ca76eac93465c2c", "patch": "@@ -1291,7 +1291,7 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c,\n   valid_flags = C99 | CXX | C11 | CXX23;\n   if (CPP_PEDANTIC (pfile))\n     {\n-      if (CPP_OPTION (pfile, cplusplus))\n+      if (CPP_OPTION (pfile, xid_identifiers))\n \tvalid_flags = CXX23;\n       else if (CPP_OPTION (pfile, c11_identifiers))\n \tvalid_flags = C11;\n@@ -1355,7 +1355,7 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c,\n       return 2;\n     }\n \n-  if (CPP_OPTION (pfile, cplusplus))\n+  if (CPP_OPTION (pfile, xid_identifiers))\n     invalid_start_flags = NXX23;\n   else if (CPP_OPTION (pfile, c11_identifiers))\n     invalid_start_flags = N11;"}, {"sha": "d5ef12a30ead7cf13045cee0b911f94e9c62ec26", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d20fa4a83d1a294462c2622ca76eac93465c2c/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d20fa4a83d1a294462c2622ca76eac93465c2c/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=36d20fa4a83d1a294462c2622ca76eac93465c2c", "patch": "@@ -496,6 +496,10 @@ struct cpp_options\n      in C11.  */\n   unsigned char c11_identifiers;\n \n+  /* Nonzero means extended identifiers allow the characters specified\n+     by Unicode XID_Start and XID_Continue properties.  */\n+  unsigned char xid_identifiers;\n+\n   /* Nonzero for C++ 2014 Standard binary constants.  */\n   unsigned char binary_constants;\n "}, {"sha": "5f34e3515d2fb82899033b3d089abcce645cf375", "filename": "libcpp/init.cc", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d20fa4a83d1a294462c2622ca76eac93465c2c/libcpp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d20fa4a83d1a294462c2622ca76eac93465c2c/libcpp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.cc?ref=36d20fa4a83d1a294462c2622ca76eac93465c2c", "patch": "@@ -82,6 +82,7 @@ struct lang_flags\n   char extended_numbers;\n   char extended_identifiers;\n   char c11_identifiers;\n+  char xid_identifiers;\n   char std;\n   char digraphs;\n   char uliterals;\n@@ -102,31 +103,31 @@ struct lang_flags\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp szlit elifdef warndir delim trufal */\n-  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n-  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n-  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n-  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n-  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    1,     1,     0,   1,      1,   1,     1,   0,   1,      1,      0,    1 },\n-  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n-  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n-  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n-  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n-  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n-  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    1,     1,     0,   1,      0,   1,     1,   0,   1,      1,      0,    1 },\n-  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    1 },\n-  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0,      0,    1 },\n-  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    1 },\n-  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0,      0,    1 },\n-  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0,   0,   0,      0,      0,    1 },\n-  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0,   0,   0,      0,      0,    1 },\n-  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0,    1 },\n-  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0,   0,   0,      0,      0,    1 },\n-  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0,    1 },\n-  /* CXX20    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0,    1 },\n-  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      1,      1,    1 },\n-  /* CXX23    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      1,      1,    1 },\n-  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0,   0,   0,      0,      0,    0 }\n+{ /*              c99 c++ xnum xid c11 xidid std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp szlit elifdef warndir delim trufal */\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,    0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n+  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,    0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n+  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,    0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n+  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,    0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    0 },\n+  /* GNUC2X   */  { 1,  0,  1,  1,  1,  1,    0,  1,   1,   1,   0,    1,     1,     0,   1,      1,   1,     1,   0,   1,      1,      0,    1 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  0,    1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  0,    1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n+  /* STDC99   */  { 1,  0,  1,  1,  0,  0,    1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n+  /* STDC11   */  { 1,  0,  1,  1,  1,  0,    1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n+  /* STDC17   */  { 1,  0,  1,  1,  1,  0,    1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,    1,  1,   1,   0,   0,    1,     1,     0,   1,      0,   1,     1,   0,   1,      1,      0,    1 },\n+  /* GNUCXX   */  { 0,  1,  1,  1,  0,  1,    0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* CXX98    */  { 0,  1,  0,  1,  0,  1,    1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0,      0,    1 },\n+  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* CXX11    */  { 1,  1,  0,  1,  1,  1,    1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0,      0,    1 },\n+  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* CXX14    */  { 1,  1,  0,  1,  1,  1,    1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0,   0,   0,      0,      0,    1 },\n+  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* CXX17    */  { 1,  1,  1,  1,  1,  1,    1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0,   0,   0,      0,      0,    1 },\n+  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* CXX20    */  { 1,  1,  1,  1,  1,  1,    1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0,      0,      0,    1 },\n+  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      1,      1,    1 },\n+  /* CXX23    */  { 1,  1,  1,  1,  1,  1,    1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1,      1,      1,    1 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,    0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0,   0,   0,      0,      0,    0 }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -142,6 +143,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, extended_numbers)\t\t = l->extended_numbers;\n   CPP_OPTION (pfile, extended_identifiers)\t = l->extended_identifiers;\n   CPP_OPTION (pfile, c11_identifiers)\t\t = l->c11_identifiers;\n+  CPP_OPTION (pfile, xid_identifiers)\t\t = l->xid_identifiers;\n   CPP_OPTION (pfile, std)\t\t\t = l->std;\n   CPP_OPTION (pfile, digraphs)\t\t\t = l->digraphs;\n   CPP_OPTION (pfile, uliterals)\t\t\t = l->uliterals;"}, {"sha": "cc12a52d28295f847faf93f4d5a6c67ef7213af7", "filename": "libcpp/lex.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d20fa4a83d1a294462c2622ca76eac93465c2c/libcpp%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d20fa4a83d1a294462c2622ca76eac93465c2c/libcpp%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.cc?ref=36d20fa4a83d1a294462c2622ca76eac93465c2c", "patch": "@@ -2007,7 +2007,8 @@ name_p (cpp_reader *pfile, const cpp_string *string)\n static void\n warn_about_normalization (cpp_reader *pfile, \n \t\t\t  const cpp_token *token,\n-\t\t\t  const struct normalize_state *s)\n+\t\t\t  const struct normalize_state *s,\n+\t\t\t  bool identifier)\n {\n   if (CPP_OPTION (pfile, warn_normalize) < NORMALIZE_STATE_RESULT (s)\n       && !pfile->state.skipping)\n@@ -2043,7 +2044,7 @@ warn_about_normalization (cpp_reader *pfile,\n       if (NORMALIZE_STATE_RESULT (s) == normalized_C)\n \tcpp_warning_at (pfile, CPP_W_NORMALIZE, &rich_loc,\n \t\t\t\"`%.*s' is not in NFKC\", (int) sz, buf);\n-      else if (CPP_OPTION (pfile, cplusplus))\n+      else if (identifier && CPP_OPTION (pfile, xid_identifiers))\n \tcpp_pedwarning_at (pfile, CPP_W_NORMALIZE, &rich_loc,\n \t\t\t\t  \"`%.*s' is not in NFC\", (int) sz, buf);\n       else\n@@ -3839,7 +3840,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \tstruct normalize_state nst = INITIAL_NORMALIZE_STATE;\n \tresult->type = CPP_NUMBER;\n \tlex_number (pfile, &result->val.str, &nst);\n-\twarn_about_normalization (pfile, result, &nst);\n+\twarn_about_normalization (pfile, result, &nst, false);\n \tbreak;\n       }\n \n@@ -3888,7 +3889,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \tresult->val.node.node = lex_identifier (pfile, buffer->cur - 1, false,\n \t\t\t\t\t\t&nst,\n \t\t\t\t\t\t&result->val.node.spelling);\n-\twarn_about_normalization (pfile, result, &nst);\n+\twarn_about_normalization (pfile, result, &nst, true);\n       }\n \n       /* Convert named operators to their proper types.  */\n@@ -4101,7 +4102,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t  struct normalize_state nst = INITIAL_NORMALIZE_STATE;\n \t  result->type = CPP_NUMBER;\n \t  lex_number (pfile, &result->val.str, &nst);\n-\t  warn_about_normalization (pfile, result, &nst);\n+\t  warn_about_normalization (pfile, result, &nst, false);\n \t}\n       else if (*buffer->cur == '.' && buffer->cur[1] == '.')\n \tbuffer->cur += 2, result->type = CPP_ELLIPSIS;\n@@ -4192,7 +4193,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t    result->type = CPP_NAME;\n \t    result->val.node.node = lex_identifier (pfile, base, true, &nst,\n \t\t\t\t\t\t    &result->val.node.spelling);\n-\t    warn_about_normalization (pfile, result, &nst);\n+\t    warn_about_normalization (pfile, result, &nst, true);\n \t    break;\n \t  }\n "}]}