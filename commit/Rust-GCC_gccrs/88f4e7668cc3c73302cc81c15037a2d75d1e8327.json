{"sha": "88f4e7668cc3c73302cc81c15037a2d75d1e8327", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhmNGU3NjY4Y2MzYzczMzAyY2M4MWMxNTAzN2EyZDc1ZDFlODMyNw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2017-07-04T08:41:39Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2017-07-04T08:41:39Z"}, "message": "vxworks.h (PTRDIFF_TYPE, SIZE_TYPE): Restore unconditional basic definitions.\n\n2017-07-04  Olivier Hainque  <hainque@adacore.com>\n\n\t* config/vxworks.h (PTRDIFF_TYPE, SIZE_TYPE): Restore\n\tunconditional basic definitions.\n\t(VXWORKS_LIBS_RTP): Likewise, prefixed by VXWORKS_SYSCALL_LIBS_RTP,\n\tempty by default.\n\t* config/i386/vxworks.h (PTRDIFF_TYPE, SIZE_TYPE): Redefine,\n\taccounting for 64bit ABIs using cpu specific macros available for\n\tthis purpose.\n\t(VXWORKS_SYSCALL_LIBS_RTP): Likewise.\n\nFrom-SVN: r249950", "tree": {"sha": "57bc0d6ed7b4b05f5ffabd04057a81a1049672fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57bc0d6ed7b4b05f5ffabd04057a81a1049672fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88f4e7668cc3c73302cc81c15037a2d75d1e8327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f4e7668cc3c73302cc81c15037a2d75d1e8327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f4e7668cc3c73302cc81c15037a2d75d1e8327", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f4e7668cc3c73302cc81c15037a2d75d1e8327/comments", "author": null, "committer": null, "parents": [{"sha": "7a1238d110b4f70634148cd0745a61e5bdbaa9e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1238d110b4f70634148cd0745a61e5bdbaa9e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1238d110b4f70634148cd0745a61e5bdbaa9e5"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "6095f723850f8145677ecaede447d3fa9f2a5df1", "filename": "gcc/config/i386/vxworks.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f4e7668cc3c73302cc81c15037a2d75d1e8327/gcc%2Fconfig%2Fi386%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f4e7668cc3c73302cc81c15037a2d75d1e8327/gcc%2Fconfig%2Fi386%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvxworks.h?ref=88f4e7668cc3c73302cc81c15037a2d75d1e8327", "patch": "@@ -35,6 +35,17 @@ along with GCC; see the file COPYING3.  If not see\n #define DBX_REGISTER_NUMBER(n) \\\n   (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n \n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE (TARGET_LP64 ? \"long int\" : \"int\")\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE (TARGET_LP64 ? \"long unsigned int\" : \"unsigned int\")\n+\n+#if TARGET_64BIT_DEFAULT\n+#undef VXWORKS_SYSCALL_LIBS_RTP\n+#define VXWORKS_SYSCALL_LIBS_RTP \"-lsyscall\"\n+#endif\n+\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\"}, {"sha": "62149d45e21290631a0a7de84522935155ce0a84", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f4e7668cc3c73302cc81c15037a2d75d1e8327/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f4e7668cc3c73302cc81c15037a2d75d1e8327/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=88f4e7668cc3c73302cc81c15037a2d75d1e8327", "patch": "@@ -68,13 +68,13 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n /* The references to __init and __fini will be satisfied by\n-   libc_internal.a.  */\n+   libc_internal.a, and some versions of VxWorks rely on explicit\n+   extra libraries for system calls.  */\n \n-#if TARGET_64BIT_DEFAULT\n-#define VXWORKS_LIBS_RTP \"-lsyscall -lc -lgcc -lc_internal -lnet -ldsi\"\n-#else\n-#define VXWORKS_LIBS_RTP \"-lc -lgcc -lc_internal -lnet -ldsi\"\n-#endif\n+#define VXWORKS_SYSCALL_LIBS_RTP\n+\n+#define VXWORKS_LIBS_RTP \\\n+  VXWORKS_SYSCALL_LIBS_RTP \" -lc -lgcc -lc_internal -lnet -ldsi\"\n \n /* On Vx6 and previous, the libraries to pick up depends on the architecture,\n    so cannot be defined for all archs at once.  On Vx7, a VSB is always needed\n@@ -160,10 +160,10 @@ extern void vxworks_asm_out_destructor (rtx symbol, int priority);\n #define VXWORKS_GOTT_INDEX \"__GOTT_INDEX__\"\n \n #undef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE (TARGET_LP64 ? \"long int\" : \"int\")\n+#define PTRDIFF_TYPE \"int\"\n \n #undef SIZE_TYPE\n-#define SIZE_TYPE (TARGET_LP64 ? \"long unsigned int\" : \"unsigned int\")\n+#define SIZE_TYPE \"unsigned int\"\n \n #undef TARGET_LIBC_HAS_FUNCTION\n #define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function"}]}