{"sha": "1725d05d199fc256844040d2900d5ee206c9d289", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcyNWQwNWQxOTlmYzI1Njg0NDA0MGQyOTAwZDVlZTIwNmM5ZDI4OQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-10-10T22:08:58Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-10-10T22:08:58Z"}, "message": "Make any's copy assignment operator exception-safe,\n\ndon't copy the underlying value when any is moved,\nmake in_place constructors explicit.\n* include/std/any (any(in_place_type_t<_ValueType>, _Args&&...)):\nMake explicit.\n(any(in_place_type_t<_ValueType>, initializer_list<_Up>, _Args&&...)):\nLikewise.\n(operator=(const any&)): Make strongly exception-safe.\n(operator=(any&&)): reset() unconditionally in the case where\nrhs has a value.\n(operator=(_ValueType&&)): Indent the return type.\n(_Manager_internal<_Tp>::_S_manage): Move in _Op_xfer, don't copy.\n* testsuite/20_util/any/assign/2.cc: Adjust.\n* testsuite/20_util/any/assign/exception.cc: New.\n* testsuite/20_util/any/cons/2.cc: Adjust.\n* testsuite/20_util/any/cons/explicit.cc: New.\n* testsuite/20_util/any/misc/any_cast_neg.cc: Ajust.\n\nFrom-SVN: r240951", "tree": {"sha": "c60362f3d076a1ba42ebcccf84d7b65f06bfa9e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c60362f3d076a1ba42ebcccf84d7b65f06bfa9e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1725d05d199fc256844040d2900d5ee206c9d289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1725d05d199fc256844040d2900d5ee206c9d289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1725d05d199fc256844040d2900d5ee206c9d289", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1725d05d199fc256844040d2900d5ee206c9d289/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "496f8eead85efa20e9b17bca6039dde2b46f08c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/496f8eead85efa20e9b17bca6039dde2b46f08c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/496f8eead85efa20e9b17bca6039dde2b46f08c4"}], "stats": {"total": 252, "additions": 223, "deletions": 29}, "files": [{"sha": "411474c7ebb093035daa4d6e6bf35643a8ccc6cd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1725d05d199fc256844040d2900d5ee206c9d289", "patch": "@@ -1,3 +1,23 @@\n+2016-10-10  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tMake any's copy assignment operator exception-safe,\n+\tdon't copy the underlying value when any is moved,\n+\tmake in_place constructors explicit.\n+\t* include/std/any (any(in_place_type_t<_ValueType>, _Args&&...)):\n+\tMake explicit.\n+\t(any(in_place_type_t<_ValueType>, initializer_list<_Up>, _Args&&...)):\n+\tLikewise.\n+\t(operator=(const any&)): Make strongly exception-safe.\n+\t(operator=(any&&)): reset() unconditionally in the case where\n+\trhs has a value.\n+\t(operator=(_ValueType&&)): Indent the return type.\n+\t(_Manager_internal<_Tp>::_S_manage): Move in _Op_xfer, don't copy.\n+\t* testsuite/20_util/any/assign/2.cc: Adjust.\n+\t* testsuite/20_util/any/assign/exception.cc: New.\n+\t* testsuite/20_util/any/cons/2.cc: Adjust.\n+\t* testsuite/20_util/any/cons/explicit.cc: New.\n+\t* testsuite/20_util/any/misc/any_cast_neg.cc: Ajust.\n+\n 2016-10-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/appendix_contributing.xml (contrib.organization):"}, {"sha": "45a2145179b21435ed300633b2ba99b4fea5eb2d", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=1725d05d199fc256844040d2900d5ee206c9d289", "patch": "@@ -179,6 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      typename _Tp = _Decay<_ValueType>,\n \t      typename _Mgr = _Manager<_Tp>,\n               __any_constructible_t<_Tp, _Args&&...> = false>\n+      explicit\n       any(in_place_type_t<_ValueType>, _Args&&... __args)\n       : _M_manager(&_Mgr::_S_manage)\n       {\n@@ -192,6 +193,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      typename _Mgr = _Manager<_Tp>,\n               __any_constructible_t<_Tp, initializer_list<_Up>,\n \t\t\t\t    _Args&&...> = false>\n+      explicit\n       any(in_place_type_t<_ValueType>,\n \t  initializer_list<_Up> __il, _Args&&... __args)\n       : _M_manager(&_Mgr::_S_manage)\n@@ -207,16 +209,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /// Copy the state of another object.\n     any& operator=(const any& __rhs)\n     {\n-      if (!__rhs.has_value())\n-\treset();\n-      else if (this != &__rhs)\n-\t{\n-\t  if (has_value())\n-\t    _M_manager(_Op_destroy, this, nullptr);\n-\t  _Arg __arg;\n-\t  __arg._M_any = this;\n-\t  __rhs._M_manager(_Op_clone, &__rhs, &__arg);\n-\t}\n+      *this = any(__rhs);\n       return *this;\n     }\n \n@@ -231,8 +224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treset();\n       else if (this != &__rhs)\n \t{\n-\t  if (has_value())\n-\t    _M_manager(_Op_destroy, this, nullptr);\n+\t  reset();\n \t  _Arg __arg;\n \t  __arg._M_any = this;\n \t  __rhs._M_manager(_Op_xfer, &__rhs, &__arg);\n@@ -243,7 +235,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /// Store a copy of @p __rhs as the contained object.\n     template<typename _ValueType,\n \t     typename _Tp = _Decay<_ValueType>>\n-    enable_if_t<is_copy_constructible<_Tp>::value, any&>\n+      enable_if_t<is_copy_constructible<_Tp>::value, any&>\n       operator=(_ValueType&& __rhs)\n       {\n \t*this = any(std::forward<_ValueType>(__rhs));\n@@ -556,7 +548,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__ptr->~_Tp();\n \tbreak;\n       case _Op_xfer:\n-\t::new(&__arg->_M_any->_M_storage._M_buffer) _Tp(*__ptr);\n+\t::new(&__arg->_M_any->_M_storage._M_buffer) _Tp\n+\t  (std::move(*const_cast<_Tp*>(__ptr)));\n \t__ptr->~_Tp();\n \t__arg->_M_any->_M_manager = __any->_M_manager;\n \tconst_cast<any*>(__any)->_M_manager = nullptr;"}, {"sha": "28f06a080ffdddb6fb4b188881116e1301559565", "filename": "libstdc++-v3/testsuite/20_util/any/assign/2.cc", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F2.cc?ref=1725d05d199fc256844040d2900d5ee206c9d289", "patch": "@@ -24,28 +24,69 @@\n using std::any;\n using std::any_cast;\n \n+bool moved = false;\n+bool copied = false;\n+\n struct X\n {\n-  bool moved = false;\n-  bool moved_from = false;\n   X() = default;\n-  X(const X&) = default;\n-  X(X&& x) : moved(true) { x.moved_from = true; }\n+  X(const X&) { copied = true; }\n+  X(X&& x) { moved = true; }\n+};\n+\n+struct X2\n+{\n+  X2() = default;\n+  X2(const X2&) { copied = true; }\n+  X2(X2&& x) noexcept { moved = true; }\n };\n \n void test01()\n {\n+  moved = false;\n   X x;\n   any a1;\n   a1 = x;\n-  VERIFY(x.moved_from == false);\n+  VERIFY(moved == false);\n   any a2;\n+  copied = false;\n   a2 = std::move(x);\n-  VERIFY(x.moved_from == true);\n-  VERIFY(any_cast<X&>(a2).moved == true );\n+  VERIFY(moved == true);\n+  VERIFY(copied == false);\n+}\n+\n+void test02()\n+{\n+  moved = false;\n+  X x;\n+  any a1;\n+  a1 = x;\n+  VERIFY(moved == false);\n+  any a2;\n+  copied = false;\n+  a2 = std::move(a1);\n+  VERIFY(moved == false);\n+  VERIFY(copied == false);\n+}\n+\n+void test03()\n+{\n+  moved = false;\n+  X2 x;\n+  any a1;\n+  a1 = x;\n+  VERIFY(copied && moved);\n+  any a2;\n+  moved = false;\n+  copied = false;\n+  a2 = std::move(a1);\n+  VERIFY(moved == true);\n+  VERIFY(copied == false);\n }\n \n int main()\n {\n   test01();\n+  test02();\n+  test03();\n }"}, {"sha": "11a1a55ce80bdb82ba66920150d0540da02cd4a4", "filename": "libstdc++-v3/testsuite/20_util/any/assign/exception.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Fexception.cc?ref=1725d05d199fc256844040d2900d5ee206c9d289", "patch": "@@ -0,0 +1,77 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+using std::any;\n+\n+bool should_throw = false;\n+struct Bad\n+{\n+  Bad() = default;\n+  Bad(const Bad&) {if (should_throw) throw 666;}\n+};\n+\n+struct Bad2\n+{\n+  Bad2() = default;\n+  Bad2(const Bad2&) {if (should_throw) throw 666;}\n+  Bad2(Bad2&&) noexcept {}\n+};\n+\n+int del_count = 0;\n+struct Good \n+{\n+  Good() = default;\n+  Good(const Good&) = default;\n+  Good(Good&&) = default;\n+  ~Good() {++del_count;}\n+};\n+\n+int main()\n+{\n+    std::any a1 = Good();\n+    del_count = 0;\n+    try {\n+        Bad b;\n+        std::any a2 = b;\n+        should_throw = true;\n+        a1 = a2;\n+    } catch (...) {\n+        auto x = std::any_cast<Good>(a1);\n+        assert(del_count == 0);\n+        assert(a1.has_value());\n+        std::any_cast<Good>(a1);\n+    }\n+    std::any a3 = Good();\n+    del_count = 0;\n+    try {\n+        Bad2 b;\n+        std::any a4 = b;\n+        should_throw = true;\n+        a3 = a4;\n+    } catch (...) {\n+        auto x = std::any_cast<Good>(a1);\n+        assert(del_count == 0);\n+        assert(a1.has_value());\n+        std::any_cast<Good>(a1);\n+    }\n+}"}, {"sha": "be410cd2f541421bff230ab471ac989548377f66", "filename": "libstdc++-v3/testsuite/20_util/any/cons/2.cc", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F2.cc?ref=1725d05d199fc256844040d2900d5ee206c9d289", "patch": "@@ -24,26 +24,59 @@\n using std::any;\n using std::any_cast;\n \n+bool moved = false;\n+bool copied = false;\n+\n struct X\n {\n-  bool moved = false;\n-  bool moved_from = false;\n   X() = default;\n-  X(const X&) = default;\n-  X(X&& x) : moved(true) { x.moved_from = true; }\n+  X(const X&) { copied = true; }\n+  X(X&& x) { moved = true; }\n+};\n+\n+struct X2\n+{\n+  X2() = default;\n+  X2(const X2&) { copied = true; }\n+  X2(X2&& x) noexcept { moved = true; }\n };\n \n void test01()\n {\n+  moved = false;\n   X x;\n   any a1(x);\n-  VERIFY(x.moved_from == false);\n+  VERIFY(moved == false);\n   any a2(std::move(x));\n-  VERIFY(x.moved_from == true);\n-  VERIFY(any_cast<X&>(a2).moved == true );\n+  VERIFY(moved == true);\n+}\n+\n+void test02()\n+{\n+  moved = false;\n+  X x;\n+  any a1(x);\n+  VERIFY(moved == false);\n+  copied = false;\n+  any a2(std::move(a1));\n+  VERIFY(copied == false);\n+}\n+\n+void test03()\n+{\n+  moved = false;\n+  X2 x;\n+  any a1(x);\n+  VERIFY(moved == false);\n+  copied = false;\n+  any a2(std::move(a1));\n+  VERIFY(copied == false);\n+  VERIFY(moved == true);\n }\n \n int main()\n {\n   test01();\n+  test02();\n+  test03();\n }"}, {"sha": "61d50359a34e2b366317bba289ae890b9d30026c", "filename": "libstdc++-v3/testsuite/20_util/any/cons/explicit.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fexplicit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fexplicit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fexplicit.cc?ref=1725d05d199fc256844040d2900d5ee206c9d289", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+#include <vector>\n+\n+int main()\n+{\n+  std::any a = {std::in_place<int>, 42}; // { dg-error \"converting\" }\n+  std::any a2 =\n+    {std::in_place<std::vector<int>>, {42, 666}}; // { dg-error \"converting\" }  \n+}"}, {"sha": "8b306665f391c5755ee7f206f09603fa3fb16e45", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1725d05d199fc256844040d2900d5ee206c9d289/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=1725d05d199fc256844040d2900d5ee206c9d289", "patch": "@@ -26,5 +26,5 @@ void test01()\n   using std::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 440 }\n+  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 432 }\n }"}]}