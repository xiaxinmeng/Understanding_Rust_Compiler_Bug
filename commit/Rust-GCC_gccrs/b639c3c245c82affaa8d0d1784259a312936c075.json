{"sha": "b639c3c245c82affaa8d0d1784259a312936c075", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYzOWMzYzI0NWM4MmFmZmFhOGQwZDE3ODQyNTlhMzEyOTM2YzA3NQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2007-02-20T23:11:43Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2007-02-20T23:11:43Z"}, "message": "invoke.texi (RS/6000 and PowerPC Options): Add -mcmpb and -mdfp.\n\n\t* doc/invoke.texi (RS/6000 and PowerPC Options): Add -mcmpb and -mdfp.\n\t* configure.ac (HAVE_GAS_CMPB): Check for assembler support of the\n\tcmpb instruction.\n\t(HAVE_GAS_DFP): Check for assembler support of decimal floating\n\tpoint instructions.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/rs6000/rs6000.opt (mcmpb, mdfp): New.\n\t* config/rs6000/rs6000.c (rs6000_override_options): Add CMPB and DFP\n\tmasks to power6 and power6x and to POWERPC_MASKS.\n\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n\t_ARCH_PWR6.\n\t* config/rs6000/rs6000.h: Check assembler support for CMPB and DFP.\n\t* config/rs6000/sysv4.opt (mprototype): Use variable, not mask.\n\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS):\n\tAccess PROTOTYPE as variable, not mask.\n\nFrom-SVN: r122179", "tree": {"sha": "efb29cd2b4a4e9481050182b5b8b3e7c9903b4ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efb29cd2b4a4e9481050182b5b8b3e7c9903b4ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b639c3c245c82affaa8d0d1784259a312936c075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b639c3c245c82affaa8d0d1784259a312936c075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b639c3c245c82affaa8d0d1784259a312936c075", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b639c3c245c82affaa8d0d1784259a312936c075/comments", "author": null, "committer": null, "parents": [{"sha": "7cd689bcf045c55b1786cdbc84c9f63a07070a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd689bcf045c55b1786cdbc84c9f63a07070a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cd689bcf045c55b1786cdbc84c9f63a07070a58"}], "stats": {"total": 405, "additions": 291, "deletions": 114}, "files": [{"sha": "40ab3ecfb4d7893162f3d0663bb794883b9f23c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b639c3c245c82affaa8d0d1784259a312936c075", "patch": "@@ -1,3 +1,22 @@\n+2007-02-20  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Add -mcmpb and -mdfp.\n+\t* configure.ac (HAVE_GAS_CMPB): Check for assembler support of the\n+\tcmpb instruction.\n+\t(HAVE_GAS_DFP): Check for assembler support of decimal floating\n+\tpoint instructions.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/rs6000/rs6000.opt (mcmpb, mdfp): New.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Add CMPB and DFP\n+\tmasks to power6 and power6x and to POWERPC_MASKS.\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n+\t_ARCH_PWR6.\n+\t* config/rs6000/rs6000.h: Check assembler support for CMPB and DFP.\n+\t* config/rs6000/sysv4.opt (mprototype): Use variable, not mask.\n+\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS):\n+\tAccess PROTOTYPE as variable, not mask.\n+\n 2007-02-20  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* rtl.h (remove_reg_equal_equiv_notes): New prototype."}, {"sha": "275327d46e7d4fb9d35ad39c7a97208030c562b3", "filename": "gcc/config.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=b639c3c245c82affaa8d0d1784259a312936c075", "patch": "@@ -160,6 +160,18 @@\n #endif\n \n \n+/* Define if your assembler supports cmpb. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_CMPB\n+#endif\n+\n+\n+/* Define if your assembler supports DFP instructions. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_DFP\n+#endif\n+\n+\n /* Define if your assembler supports dwarf2 .file/.loc directives, and\n    preserves file table indices exactly as given. */\n #ifndef USED_FOR_TARGET"}, {"sha": "8937dcd7b72e5f7cbcaea4f5675a3afb96ce193c", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=b639c3c245c82affaa8d0d1784259a312936c075", "patch": "@@ -98,9 +98,9 @@ extern int dot_symbols;\n \t      target_flags &= ~MASK_EABI;\t\t\t\\\n \t      error (INVALID_64BIT, \"eabi\");\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n-\t  if (target_flags & MASK_PROTOTYPE)\t\t\t\\\n+\t  if (TARGET_PROTOTYPE)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      target_flags &= ~MASK_PROTOTYPE;\t\t\t\\\n+\t      TARGET_PROTOTYPE = 0;\t\t\t\t\\\n \t      error (INVALID_64BIT, \"prototype\");\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  if ((target_flags & MASK_POWERPC64) == 0)\t\t\\"}, {"sha": "fa215fcbc919ca79cc235b3789b001f94da78657", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=b639c3c245c82affaa8d0d1784259a312936c075", "patch": "@@ -106,6 +106,8 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n     builtin_define (\"_ARCH_PWR5\");\n   if (TARGET_FPRND)\n     builtin_define (\"_ARCH_PWR5X\");\n+  if (TARGET_CMPB)\n+    builtin_define (\"_ARCH_PWR6\");\n   if (TARGET_MFPGPR)\n     builtin_define (\"_ARCH_PWR6X\");\n   if (! TARGET_POWER && ! TARGET_POWER2 && ! TARGET_POWERPC)"}, {"sha": "7a61d6c4b6f7d68438141c4f09b6d3d3d20c7c6e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b639c3c245c82affaa8d0d1784259a312936c075", "patch": "@@ -1323,10 +1323,10 @@ rs6000_override_options (const char *default_cpu)\n \t  | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND},\n  \t {\"power6\", PROCESSOR_POWER6,\n \t  POWERPC_7400_MASK | MASK_POWERPC64 | MASK_MFCRF | MASK_POPCNTB\n-\t  | MASK_FPRND},\n+\t  | MASK_FPRND | MASK_CMPB | MASK_DFP },\n \t {\"power6x\", PROCESSOR_POWER6,\n \t  POWERPC_7400_MASK | MASK_POWERPC64 | MASK_MFCRF | MASK_POPCNTB\n-\t  | MASK_FPRND | MASK_MFPGPR},\n+\t  | MASK_FPRND | MASK_CMPB | MASK_MFPGPR | MASK_DFP },\n \t {\"powerpc\", PROCESSOR_POWERPC, POWERPC_BASE_MASK},\n \t {\"powerpc64\", PROCESSOR_POWERPC64,\n \t  POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},\n@@ -1353,7 +1353,7 @@ rs6000_override_options (const char *default_cpu)\n     POWERPC_MASKS = (POWERPC_BASE_MASK | MASK_PPC_GPOPT | MASK_STRICT_ALIGN\n \t\t     | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_ALTIVEC\n \t\t     | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND | MASK_MULHW\n-\t\t     | MASK_DLMZB | MASK_MFPGPR)\n+\t\t     | MASK_DLMZB | MASK_CMPB | MASK_MFPGPR | MASK_DFP)\n   };\n \n   rs6000_init_hard_regno_mode_ok ();"}, {"sha": "386a7c1d3592eb06625ae4d8de9bee259a5cedac", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=b639c3c245c82affaa8d0d1784259a312936c075", "patch": "@@ -164,6 +164,14 @@\n #define TARGET_FPRND 0\n #endif\n \n+/* Define TARGET_CMPB if the target assembler does not support the\n+   cmpb instruction.  */\n+\n+#ifndef HAVE_AS_CMPB\n+#undef  TARGET_CMPB\n+#define TARGET_CMPB 0\n+#endif\n+\n /* Define TARGET_MFPGPR if the target assembler does not support the\n    mffpr and mftgpr instructions. */\n \n@@ -172,6 +180,13 @@\n #define TARGET_MFPGPR 0\n #endif\n \n+/* Define TARGET_DFP if the target assembler does not support decimal\n+   floating point instructions.  */\n+#ifndef HAVE_AS_DFP\n+#undef  TARGET_DFP\n+#define TARGET_DFP 0\n+#endif\n+\n #ifndef TARGET_SECURE_PLT\n #define TARGET_SECURE_PLT 0\n #endif"}, {"sha": "f7091f508699e90bda8ae7c8b4be1f654c68f6bc", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=b639c3c245c82affaa8d0d1784259a312936c075", "patch": "@@ -1,6 +1,6 @@\n ; Options for the rs6000 port of the compiler\n ;\n-; Copyright (C) 2005 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n ; Contributed by Aldy Hernandez <aldy@quesejoda.com>.\n ;\n ; This file is part of GCC.\n@@ -64,6 +64,10 @@ mfprnd\n Target Report Mask(FPRND)\n Use PowerPC V2.02 floating point rounding instructions\n \n+mcmpb\n+Target Report Mask(CMPB)\n+Use PowerPC V2.05 compare bytes instruction\n+\n mmfpgpr\n Target Report Mask(MFPGPR)\n Use extended PowerPC V2.05 move floating point to/from GPR instructions\n@@ -72,6 +76,10 @@ maltivec\n Target Report Mask(ALTIVEC)\n Use AltiVec instructions\n \n+mdfp\n+Target Report Mask(DFP)\n+Use decimal floating point instructions\n+\n mmulhw\n Target Report Mask(MULHW)\n Use 4xx half-word multiply instructions"}, {"sha": "bcdfd4855868706ac11160ef43c05f3555affab3", "filename": "gcc/config/rs6000/sysv4.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.opt?ref=b639c3c245c82affaa8d0d1784259a312936c075", "patch": "@@ -75,7 +75,7 @@ Target RejectNegative\n no description yet\n \n mprototype\n-Target Mask(PROTOTYPE)\n+Target Var(TARGET_PROTOTYPE)\n Assume all variable arg functions are prototyped\n \n ;; FIXME: Does nothing."}, {"sha": "a2abfccbbc1853a695e9a0914882d1932cb1a7aa", "filename": "gcc/configure", "status": "modified", "additions": 184, "deletions": 106, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=b639c3c245c82affaa8d0d1784259a312936c075", "patch": "@@ -10559,18 +10559,27 @@ fi;\n \n \n \n-    lib_includedir=UNSET\n-  lib_libdir=UNSET\n \n+    use_additional=yes\n+\n+  acl_save_prefix=\"$prefix\"\n+  prefix=\"$acl_final_prefix\"\n+  acl_save_exec_prefix=\"$exec_prefix\"\n+  exec_prefix=\"$acl_final_exec_prefix\"\n+\n+    eval additional_includedir=\\\"$includedir\\\"\n+    eval additional_libdir=\\\"$libdir\\\"\n+\n+  exec_prefix=\"$acl_save_exec_prefix\"\n+  prefix=\"$acl_save_prefix\"\n \n \n # Check whether --with-libiconv-prefix or --without-libiconv-prefix was given.\n if test \"${with_libiconv_prefix+set}\" = set; then\n   withval=\"$with_libiconv_prefix\"\n \n     if test \"X$withval\" = \"Xno\"; then\n-      lib_includedir=\"NONE\"\n-      lib_libdir=\"NONE\"\n+      use_additional=no\n     else\n       if test \"X$withval\" = \"X\"; then\n \n@@ -10579,36 +10588,19 @@ if test \"${with_libiconv_prefix+set}\" = set; then\n   acl_save_exec_prefix=\"$exec_prefix\"\n   exec_prefix=\"$acl_final_exec_prefix\"\n \n-          eval lib_includedir=\\\"$includedir\\\"\n-          eval lib_libdir=\\\"$libdir\\\"\n+          eval additional_includedir=\\\"$includedir\\\"\n+          eval additional_libdir=\\\"$libdir\\\"\n \n   exec_prefix=\"$acl_save_exec_prefix\"\n   prefix=\"$acl_save_prefix\"\n \n       else\n-        lib_includedir=\"$withval/include\"\n-        lib_libdir=\"$withval/lib\"\n+        additional_includedir=\"$withval/include\"\n+        additional_libdir=\"$withval/lib\"\n       fi\n     fi\n \n fi;\n-\n-\n-  acl_save_prefix=\"$prefix\"\n-  prefix=\"$acl_final_prefix\"\n-  acl_save_exec_prefix=\"$exec_prefix\"\n-  exec_prefix=\"$acl_final_exec_prefix\"\n-\n-    test $lib_includedir = UNSET && eval lib_includedir=\\\"$includedir\\\"\n-    test $lib_libdir = UNSET && eval lib_libdir=\\\"$libdir\\\"\n-\n-  exec_prefix=\"$acl_save_exec_prefix\"\n-  prefix=\"$acl_save_prefix\"\n-\n-\n-\n-\n-\n       LIBICONV=\n   LTLIBICONV=\n   INCICONV=\n@@ -10645,19 +10637,19 @@ fi;\n           found_la=\n           found_so=\n           found_a=\n-          if test \"$lib_libdir\" != NONE; then\n-            if test -n \"$shlibext\" && test -f \"$lib_libdir/lib$name.$shlibext\"; then\n-              found_dir=\"$lib_libdir\"\n-              found_so=\"$lib_libdir/lib$name.$shlibext\"\n-              if test -f \"$lib_libdir/lib$name.la\"; then\n-                found_la=\"$lib_libdir/lib$name.la\"\n+          if test $use_additional = yes; then\n+            if test -n \"$shlibext\" && test -f \"$additional_libdir/lib$name.$shlibext\"; then\n+              found_dir=\"$additional_libdir\"\n+              found_so=\"$additional_libdir/lib$name.$shlibext\"\n+              if test -f \"$additional_libdir/lib$name.la\"; then\n+                found_la=\"$additional_libdir/lib$name.la\"\n               fi\n             else\n-              if test -f \"$lib_libdir/lib$name.$libext\"; then\n-                found_dir=\"$lib_libdir\"\n-                found_a=\"$lib_libdir/lib$name.$libext\"\n-                if test -f \"$lib_libdir/lib$name.la\"; then\n-                  found_la=\"$lib_libdir/lib$name.la\"\n+              if test -f \"$additional_libdir/lib$name.$libext\"; then\n+                found_dir=\"$additional_libdir\"\n+                found_a=\"$additional_libdir/lib$name.$libext\"\n+                if test -f \"$additional_libdir/lib$name.la\"; then\n+                  found_la=\"$additional_libdir/lib$name.la\"\n                 fi\n               fi\n             fi\n@@ -10766,11 +10758,6 @@ fi;\n             fi\n                         additional_includedir=\n             case \"$found_dir\" in\n-              \"$lib_libdir\")\n-                if test \"$lib_includedir\" != NONE; then\n-                  additional_includedir=\"$lib_includedir\"\n-                fi\n-                ;;\n               */lib | */lib/)\n                 basedir=`echo \"X$found_dir\" | sed -e 's,^X,,' -e 's,/lib/*$,,'`\n                 additional_includedir=\"$basedir/include\"\n@@ -10955,7 +10942,6 @@ fi;\n \n \n \n-\n           am_save_CPPFLAGS=\"$CPPFLAGS\"\n \n   for element in $INCICONV; do\n@@ -15602,6 +15588,98 @@ LCF0:\n \taddis 11,30,_GLOBAL_OFFSET_TABLE_-.LCF0@ha';;\n     esac\n \n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr6\"\n+\t.csect .text[PR]\n+\tcmpb 3,4,5';;\n+      *) conftest_s='\t.machine power6\n+\t.text\n+\tcmpb 3,4,5';;\n+    esac\n+\n+    echo \"$as_me:$LINENO: checking assembler for compare bytes support\" >&5\n+echo $ECHO_N \"checking assembler for compare bytes support... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_powerpc_cmpb+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_powerpc_cmpb=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 9 \\* 1000 \\) + 99 \\) \\* 1000 + 0`\n+  then gcc_cv_as_powerpc_cmpb=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as -a32 -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_powerpc_cmpb=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_powerpc_cmpb\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_powerpc_cmpb\" >&6\n+if test $gcc_cv_as_powerpc_cmpb = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_CMPB 1\n+_ACEOF\n+\n+fi\n+\n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr6\"\n+\t.csect .text[PR]\n+\tdadd 1,3';;\n+      *) conftest_s='\t.machine power6\n+\t.text\n+\tdadd 1,3';;\n+    esac\n+\n+    echo \"$as_me:$LINENO: checking assembler for decimal float support\" >&5\n+echo $ECHO_N \"checking assembler for decimal float support... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_powerpc_dfp+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_powerpc_dfp=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 9 \\* 1000 \\) + 99 \\) \\* 1000 + 0`\n+  then gcc_cv_as_powerpc_dfp=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as -a32 -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_powerpc_dfp=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_powerpc_dfp\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_powerpc_dfp\" >&6\n+if test $gcc_cv_as_powerpc_dfp = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_DFP 1\n+_ACEOF\n+\n+fi\n+\n     echo \"$as_me:$LINENO: checking assembler for rel16 relocs\" >&5\n echo $ECHO_N \"checking assembler for rel16 relocs... $ECHO_C\" >&6\n if test \"${gcc_cv_as_powerpc_rel16+set}\" = set; then\n@@ -16014,70 +16092,70 @@ echo \"${ECHO_T}$gcc_cv_ld_pie\" >&6\n echo \"$as_me:$LINENO: checking linker EH-compatible garbage collection of sections\" >&5\n echo $ECHO_N \"checking linker EH-compatible garbage collection of sections... $ECHO_C\" >&6\n gcc_cv_ld_eh_gc_sections=no\n-#if test $in_tree_ld = yes ; then\n-#  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 17 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n-#     && test $in_tree_ld_is_elf = yes; then\n-#    gcc_cv_ld_eh_gc_sections=yes\n-#  fi\n-#elif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x ; then\n-#  cat > conftest.s <<EOF\n-#\t.section\t.text\n-#.globl _start\n-#        .type _start, @function\n-#_start:\n-#\t.long foo\n-#\t.size _start, .-_start\n-#\t.section\t.text.foo,\"ax\",@progbits\n-#\t.type foo, @function\n-#foo:\n-#\t.long 0\n-#\t.size foo, .-foo\n-#\t.section\t.gcc_except_table.foo,\"a\",@progbits\n-#.L0:\n-#\t.long 0\n-#\t.section\t.eh_frame,\"a\",@progbits\n-#\t.long .L0\n-#EOF\n-#  if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n-#    if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \\\n-#\t | grep \"gc-sections option ignored\" > /dev/null; then\n-#      gcc_cv_ld_eh_gc_sections=no\n-#    elif $gcc_cv_objdump -h conftest | grep gcc_except_table > /dev/null; then\n-#      gcc_cv_ld_eh_gc_sections=yes\n-#      # If no COMDAT groups, the compiler will emit .gnu.linkonce.t. sections.\n-#      if test x$gcc_cv_as_comdat_group != xyes; then\n-#\tgcc_cv_ld_eh_gc_sections=no\n-#\tcat > conftest.s <<EOF\n-#\t.section\t.text\n-#.globl _start\n-#        .type _start, @function\n-#_start:\n-#\t.long foo\n-#\t.size _start, .-_start\n-#\t.section\t.gnu.linkonce.t.foo,\"ax\",@progbits\n-#\t.type foo, @function\n-#foo:\n-#\t.long 0\n-#\t.size foo, .-foo\n-#\t.section\t.gcc_except_table.foo,\"a\",@progbits\n-#.L0:\n-#\t.long 0\n-#\t.section\t.eh_frame,\"a\",@progbits\n-#\t.long .L0\n-#EOF\n-#\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n-#\t  if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \\\n-#\t       | grep \"gc-sections option ignored\" > /dev/null; then\n-#\t    gcc_cv_ld_eh_gc_sections=no\n-#\t  elif $gcc_cv_objdump -h conftest | grep gcc_except_table > /dev/null; then\n-#\t    gcc_cv_ld_eh_gc_sections=yes\n-#\t  fi\n-#\tfi\n-#      fi\n-#    fi\n-#  fi\n-#  rm -f conftest.s conftest.o conftest\n-#fi\n+if test $in_tree_ld = yes ; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 17 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+     && test $in_tree_ld_is_elf = yes; then\n+    gcc_cv_ld_eh_gc_sections=yes\n+  fi\n+elif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x ; then\n+  cat > conftest.s <<EOF\n+\t.section\t.text\n+.globl _start\n+        .type _start, @function\n+_start:\n+\t.long foo\n+\t.size _start, .-_start\n+\t.section\t.text.foo,\"ax\",@progbits\n+\t.type foo, @function\n+foo:\n+\t.long 0\n+\t.size foo, .-foo\n+\t.section\t.gcc_except_table.foo,\"a\",@progbits\n+.L0:\n+\t.long 0\n+\t.section\t.eh_frame,\"a\",@progbits\n+\t.long .L0\n+EOF\n+  if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+    if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \\\n+\t | grep \"gc-sections option ignored\" > /dev/null; then\n+      gcc_cv_ld_eh_gc_sections=no\n+    elif $gcc_cv_objdump -h conftest | grep gcc_except_table > /dev/null; then\n+      gcc_cv_ld_eh_gc_sections=yes\n+      # If no COMDAT groups, the compiler will emit .gnu.linkonce.t. sections.\n+      if test x$gcc_cv_as_comdat_group != xyes; then\n+\tgcc_cv_ld_eh_gc_sections=no\n+\tcat > conftest.s <<EOF\n+\t.section\t.text\n+.globl _start\n+        .type _start, @function\n+_start:\n+\t.long foo\n+\t.size _start, .-_start\n+\t.section\t.gnu.linkonce.t.foo,\"ax\",@progbits\n+\t.type foo, @function\n+foo:\n+\t.long 0\n+\t.size foo, .-foo\n+\t.section\t.gcc_except_table.foo,\"a\",@progbits\n+.L0:\n+\t.long 0\n+\t.section\t.eh_frame,\"a\",@progbits\n+\t.long .L0\n+EOF\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t  if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \\\n+\t       | grep \"gc-sections option ignored\" > /dev/null; then\n+\t    gcc_cv_ld_eh_gc_sections=no\n+\t  elif $gcc_cv_objdump -h conftest | grep gcc_except_table > /dev/null; then\n+\t    gcc_cv_ld_eh_gc_sections=yes\n+\t  fi\n+\tfi\n+      fi\n+    fi\n+  fi\n+  rm -f conftest.s conftest.o conftest\n+fi\n case \"$target\" in\n   hppa*-*-linux*)\n     # ??? This apparently exposes a binutils bug with PC-relative relocations."}, {"sha": "db9a0c3d02f815941bb0e01be8d4eeb5b057ac9f", "filename": "gcc/configure.ac", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=b639c3c245c82affaa8d0d1784259a312936c075", "patch": "@@ -2925,6 +2925,36 @@ LCF0:\n \taddis 11,30,_GLOBAL_OFFSET_TABLE_-.LCF0@ha';;\n     esac\n \n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr6\"\n+\t.csect .text[[PR]]\n+\tcmpb 3,4,5';;\n+      *) conftest_s='\t.machine power6\n+\t.text\n+\tcmpb 3,4,5';;\n+    esac\n+\n+    gcc_GAS_CHECK_FEATURE([compare bytes support],\n+      gcc_cv_as_powerpc_cmpb, [9,99,0], -a32,\n+      [$conftest_s],,\n+      [AC_DEFINE(HAVE_AS_CMPB, 1,\n+\t  [Define if your assembler supports cmpb.])])\n+\n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr6\"\n+\t.csect .text[[PR]]\n+\tdadd 1,3';;\n+      *) conftest_s='\t.machine power6\n+\t.text\n+\tdadd 1,3';;\n+    esac\n+\n+    gcc_GAS_CHECK_FEATURE([decimal float support],\n+      gcc_cv_as_powerpc_dfp, [9,99,0], -a32,\n+      [$conftest_s],,\n+      [AC_DEFINE(HAVE_AS_DFP, 1,\n+\t  [Define if your assembler supports DFP instructions.])])\n+\n     gcc_GAS_CHECK_FEATURE([rel16 relocs],\n       gcc_cv_as_powerpc_rel16, [2,17,0], -a32,\n       [$conftest_s],,"}, {"sha": "a6bcd721cf358887fb8d4e1c4d83b758f3f0375d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b639c3c245c82affaa8d0d1784259a312936c075/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b639c3c245c82affaa8d0d1784259a312936c075", "patch": "@@ -664,7 +664,7 @@ See RS/6000 and PowerPC Options.\n -mpowerpc-gpopt  -mno-powerpc-gpopt @gol\n -mpowerpc-gfxopt  -mno-powerpc-gfxopt @gol\n -mmfcrf  -mno-mfcrf  -mpopcntb  -mno-popcntb  -mfprnd  -mno-fprnd @gol\n--mmfpgpr -mno-mfpgpr @gol\n+-mcmpb -mno-cmpb -mmfpgpr -mno-mfpgpr -mdfp -mno-dfp @gol\n -mnew-mnemonics  -mold-mnemonics @gol\n -mfull-toc   -mminimal-toc  -mno-fp-in-toc  -mno-sum-in-toc @gol\n -m64  -m32  -mxl-compat  -mno-xl-compat  -mpe @gol\n@@ -11799,8 +11799,12 @@ These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @itemx -mno-popcntb\n @itemx -mfprnd\n @itemx -mno-fprnd\n+@itemx -mcmpb\n+@itemx -mno-cmpb\n @itemx -mmfpgpr\n @itemx -mno-mfpgpr\n+@itemx -mdfp\n+@itemx -mno-dfp\n @opindex mpower\n @opindex mno-power\n @opindex mpower2\n@@ -11819,8 +11823,12 @@ These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @opindex mno-popcntb\n @opindex mfprnd\n @opindex mno-fprnd\n+@opindex mcmpb\n+@opindex mno-cmpb\n @opindex mmfpgpr\n @opindex mno-mfpgpr\n+@opindex mdfp\n+@opindex mno-dfp\n GCC supports two related instruction set architectures for the\n RS/6000 and PowerPC@.  The @dfn{POWER} instruction set are those\n instructions supported by the @samp{rios} chip set used in the original\n@@ -11865,10 +11873,15 @@ architecture.\n The @option{-mfprnd} option allows GCC to generate the FP round to\n integer instructions implemented on the POWER5+ processor and other\n processors that support the PowerPC V2.03 architecture.\n+The @option{-mcmpb} option allows GCC to generate the compare bytes\n+instruction implemented on the POWER6 processor and other processors\n+that support the PowerPC V2.05 architecture.\n The @option{-mmfpgpr} option allows GCC to generate the FP move to/from\n general purpose register instructions implemented on the POWER6X\n processor and other processors that support the extended PowerPC V2.05\n architecture.\n+The @option{-mdfp} option allows GCC to generate the decimal floating\n+point instructions implemented on some POWER processors.\n \n The @option{-mpowerpc64} option allows GCC to generate the additional\n 64-bit instructions that are found in the full PowerPC64 architecture"}]}