{"sha": "21667997d04bcb29297deba5da41c9b446cd6a1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2Njc5OTdkMDRiY2IyOTI5N2RlYmE1ZGE0MWM5YjQ0NmNkNmExYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-08-18T19:24:41Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-08-18T19:24:41Z"}, "message": "i386.md (*add<mode>_1): Split insn to lea.\n\n\t* config/i386/i386.md (*add<mode>_1) <TYPE_LEA>: Split insn to lea.\n\t<default>:  Swap operands 1 and 2 for alternative 2 to use existing\n\tcode to output insn mnemonic.  Fix comment.\n\t(*addsi_1_zext): Add r-r-0 alternative 1.\n\t<TYPE_LEA>: Split insn to lea.\n\t<default>: Handle alternative 1.\n\t(*addhi_1_lea): Add r-r-0 alternative 2.  Use cond RTX instead of\n\tmulti-level if_then_else RTX to set \"type\" attribute.\n\t<default>: Handle alternative 2.\n\t(*addqi_1_lea): Add q-q-0 alternative 2 and r-r-0 alternative 4.\n\tUse cond RTX instead of multi-level if_then_else RTX to set\n\t\"type\" attribute.\n\t<default>: Handle alternatives 2 and 4.\n\t(lea splitters): Update calls to ix86_lea_for_add_ok.\n\n\t* config/i386/i386.c (ix86_lea_for_add_ok): Remove unused \"code\"\n\targument.\n\t* config/i386/i386-protos.h (ix86_lea_for_add_ok): Update prototype.\n\nFrom-SVN: r163351", "tree": {"sha": "bcc7a37aa06b87ee0a07f8e664cfecc06f26434f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcc7a37aa06b87ee0a07f8e664cfecc06f26434f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21667997d04bcb29297deba5da41c9b446cd6a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21667997d04bcb29297deba5da41c9b446cd6a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21667997d04bcb29297deba5da41c9b446cd6a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21667997d04bcb29297deba5da41c9b446cd6a1c/comments", "author": null, "committer": null, "parents": [{"sha": "9a18b99ba9d3dbae4af239450459d358fade312b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a18b99ba9d3dbae4af239450459d358fade312b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a18b99ba9d3dbae4af239450459d358fade312b"}], "stats": {"total": 137, "additions": 91, "deletions": 46}, "files": [{"sha": "83ab94bbcf5d5b611b26dd259a3eedd2d59ad2fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21667997d04bcb29297deba5da41c9b446cd6a1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21667997d04bcb29297deba5da41c9b446cd6a1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21667997d04bcb29297deba5da41c9b446cd6a1c", "patch": "@@ -1,3 +1,24 @@\n+2010-08-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*add<mode>_1) <TYPE_LEA>: Split insn to lea.\n+\t<default>:  Swap operands 1 and 2 for alternative 2 to use existing\n+\tcode to output insn mnemonic.  Fix comment.\n+\t(*addsi_1_zext): Add r-r-0 alternative 1.\n+\t<TYPE_LEA>: Split insn to lea.\n+\t<default>: Handle alternative 1.\n+\t(*addhi_1_lea): Add r-r-0 alternative 2.  Use cond RTX instead of\n+\tmulti-level if_then_else RTX to set \"type\" attribute.\n+\t<default>: Handle alternative 2.\n+\t(*addqi_1_lea): Add q-q-0 alternative 2 and r-r-0 alternative 4.\n+\tUse cond RTX instead of multi-level if_then_else RTX to set\n+\t\"type\" attribute.\n+\t<default>: Handle alternatives 2 and 4.\n+\t(lea splitters): Update calls to ix86_lea_for_add_ok.\n+\n+\t* config/i386/i386.c (ix86_lea_for_add_ok): Remove unused \"code\"\n+\targument.\n+\t* config/i386/i386-protos.h (ix86_lea_for_add_ok): Update prototype.\n+\n 2010-08-18  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-uninit.c (find_uninit_use): Disregard debug stmts,\n@@ -12,7 +33,7 @@\n 2010-08-18  Yao Qi  <yao@codesourcery.com>\n \n \tPR target/45094\n-\t* config/arm/arm.c (output_move_double): Fix typo generating \n+\t* config/arm/arm.c (output_move_double): Fix typo generating\n \tinstructions ('ldr'->'str').\n \n 2010-08-18  Maxim Kuvyrkov  <maxim@codesourcery.com>\n@@ -66,21 +87,19 @@\n \t* config/i386/i386.c (ix86_lea_for_add_ok): For !TARGET_OPT_AGU\n \tor optimizing for size, always avoid lea if possible.\n \n-\t* config/i386/i386.md (*add<mode>_1): Always avoid lea if\n-\tpossible.\n+\t* config/i386/i386.md (*add<mode>_1): Always avoid lea if possible.\n \n 2010-08-17  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* unwind-dw2-fde-darwin.c (_darwin10_Unwind_FindEnclosingFunction):\n-\tDunmmy function with NULL return unless the target is \n+\tDunmmy function with NULL return unless the target is\n \tOSX >= 10.6 (Darwin10).\n-\t\n+\n 2010-08-17  Jack Howarth <howarth@bromo.med.uc.edu>\n \n \t* gcc.c (spec_function): Add remove-outfile.\n \t(remove_outfile_spec_function): New function.\n-\t* config/darwin.h (LINK_SPEC): Add removal of\n-\t-ldl, -lm and -lpthread.\n+\t* config/darwin.h (LINK_SPEC): Add removal of -ldl, -lm and -lpthread.\n \t* invoke.texi (replace-outfile): Document.\n \n 2010-08-17  Uros Bizjak  <ubizjak@gmail.com>\n@@ -105,8 +124,7 @@\n \n 2010-08-17  Richard Guenther  <rguenther@suse.de>\n \n-\t* fold-const.c (fold_comparison): Strip nops inside\n-\tPOINTER_PLUS_EXPR.\n+\t* fold-const.c (fold_comparison): Strip nops inside POINTER_PLUS_EXPR.\n \n 2010-08-17  Shujing Zhao  <pearly.zhao@oracle.com>\n "}, {"sha": "de6b961fd7b3245c943ce9bfa3c45825d2ade638", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21667997d04bcb29297deba5da41c9b446cd6a1c/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21667997d04bcb29297deba5da41c9b446cd6a1c/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=21667997d04bcb29297deba5da41c9b446cd6a1c", "patch": "@@ -86,7 +86,7 @@ extern void ix86_fixup_binary_operands_no_copy (enum rtx_code,\n extern void ix86_expand_binary_operator (enum rtx_code,\n \t\t\t\t\t enum machine_mode, rtx[]);\n extern int ix86_binary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);\n-extern bool ix86_lea_for_add_ok (enum rtx_code, rtx, rtx[]);\n+extern bool ix86_lea_for_add_ok (rtx, rtx[]);\n extern bool ix86_vec_interleave_v2df_operator_ok (rtx operands[3], bool high);\n extern bool ix86_dep_by_shift_count (const_rtx set_insn, const_rtx use_insn);\n extern bool ix86_agi_dependent (rtx set_insn, rtx use_insn);"}, {"sha": "c90d5767935122fc546d7a28b080aaa94b3157f1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21667997d04bcb29297deba5da41c9b446cd6a1c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21667997d04bcb29297deba5da41c9b446cd6a1c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=21667997d04bcb29297deba5da41c9b446cd6a1c", "patch": "@@ -14808,8 +14808,7 @@ distance_agu_use (unsigned int regno0, rtx insn)\n    used soon, LEA is better and otherwise ADD is better.  */\n \n bool\n-ix86_lea_for_add_ok (enum rtx_code code ATTRIBUTE_UNUSED,\n-                     rtx insn, rtx operands[])\n+ix86_lea_for_add_ok (rtx insn, rtx operands[])\n {\n   unsigned int regno0 = true_regnum (operands[0]);\n   unsigned int regno1 = true_regnum (operands[1]);"}, {"sha": "8d61bb61cbe5220ecb903461763a9cd13b550c26", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 62, "deletions": 34, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21667997d04bcb29297deba5da41c9b446cd6a1c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21667997d04bcb29297deba5da41c9b446cd6a1c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=21667997d04bcb29297deba5da41c9b446cd6a1c", "patch": "@@ -5799,8 +5799,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_LEA:\n-      operands[2] = SET_SRC (XVECEXP (PATTERN (insn), 0, 0));\n-      return \"lea{<imodesuffix>}\\t{%a2, %0|%0, %a2}\";\n+      return \"#\";\n \n     case TYPE_INCDEC:\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n@@ -5813,11 +5812,13 @@\n \t}\n \n     default:\n-      /* This alternative was added for TARGET_OPT_AGU to use add as\n-\t much as possible.  But add is also faster than lea for\n-\t !TARGET_OPT_AGU.  */\n+      /* For most processors, ADD is faster than LEA.  This alternative\n+\t was added to use ADD as much as possible.  */\n       if (which_alternative == 2)\n-        return \"add{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+\t{\n+\t  rtx tmp;\n+\t  tmp = operands[1], operands[1] = operands[2], operands[2] = tmp;\n+\t}\n         \n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], <MODE>mode))\n@@ -5847,18 +5848,17 @@\n ;; patterns constructed from addsi_1 to match.\n \n (define_insn \"*addsi_1_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n \t(zero_extend:DI\n-\t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,r\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"g,li\"))))\n+\t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,r,r\")\n+\t\t   (match_operand:SI 2 \"general_operand\" \"g,0,li\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, SImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_LEA:\n-      operands[2] = XEXP (SET_SRC (XVECEXP (PATTERN (insn), 0, 0)), 0);\n-      return \"lea{l}\\t{%a2, %k0|%k0, %a2}\";\n+      return \"#\";\n \n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n@@ -5870,14 +5870,22 @@\n \t}\n \n     default:\n+      /* For most processors, ADD is faster than LEA.  This alternative\n+\t was added to use ADD as much as possible.  */\n+      if (which_alternative == 1)\n+\t{\n+\t  rtx tmp;\n+\t  tmp = operands[1], operands[1] = operands[2], operands[2] = tmp;\n+\t}\n+\n       if (x86_maybe_negate_const_int (&operands[2], SImode))\n         return \"sub{l}\\t{%2, %k0|%k0, %2}\";\n \n       return \"add{l}\\t{%2, %k0|%k0, %2}\";\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"1\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n \t      (const_string \"lea\")\n \t    (match_operand:SI 2 \"incdec_operand\" \"\")\n \t      (const_string \"incdec\")\n@@ -5932,9 +5940,9 @@\n ;; for PII, and in fact harmful because of partial register stalls.\n \n (define_insn \"*addhi_1_lea\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r,r\")\n-\t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,r\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"rn,rm,ln\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm,r,r\")\n+\t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,r,r\")\n+\t\t (match_operand:HI 2 \"general_operand\" \"rmn,rn,0,ln\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL\n    && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n@@ -5955,6 +5963,14 @@\n \t}\n \n     default:\n+      /* For most processors, ADD is faster than LEA.  This alternative\n+\t was added to use ADD as much as possible.  */\n+      if (which_alternative == 2)\n+\t{\n+\t  rtx tmp;\n+\t  tmp = operands[1], operands[1] = operands[2], operands[2] = tmp;\n+\t}\n+\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], HImode))\n \treturn \"sub{w}\\t{%2, %0|%0, %2}\";\n@@ -5963,18 +5979,20 @@\n     }\n }\n   [(set (attr \"type\")\n-     (if_then_else (eq_attr \"alternative\" \"2\")\n-\t(const_string \"lea\")\n-\t(if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n-\t   (const_string \"incdec\")\n-\t   (const_string \"alu\"))))\n+     (cond [(eq_attr \"alternative\" \"3\")\n+              (const_string \"lea\")\n+\t    (match_operand:HI 2 \"incdec_operand\" \"\")\n+\t      (const_string \"incdec\")\n+\t   ]\n+\t   (const_string \"alu\")))\n    (set (attr \"length_immediate\")\n       (if_then_else\n \t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n \t(const_string \"1\")\n \t(const_string \"*\")))\n-   (set_attr \"mode\" \"HI,HI,SI\")])\n+   (set_attr \"mode\" \"HI,HI,HI,SI\")])\n \n+;; %%% Potential partial reg stall on alternative 2.  What to do?\n (define_insn \"*addqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r\")\n \t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n@@ -6020,16 +6038,17 @@\n \t(const_string \"*\")))\n    (set_attr \"mode\" \"QI,QI,SI\")])\n \n-;; %%% Potential partial reg stall on alternative 2.  What to do?\n+;; %%% Potential partial reg stall on alternatives 3 and 4.  What to do?\n (define_insn \"*addqi_1_lea\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,r\")\n-\t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,r\")\n-\t\t (match_operand:QI 2 \"general_operand\" \"qn,qmn,rn,ln\")))\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm,q,r,r,r\")\n+\t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,q,0,r,r\")\n+\t\t (match_operand:QI 2 \"general_operand\" \"qmn,qn,0,rn,0,ln\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL\n    && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n {\n-  int widen = (which_alternative == 2);\n+  int widen = (which_alternative == 3 || which_alternative == 4);\n+\n   switch (get_attr_type (insn))\n     {\n     case TYPE_LEA:\n@@ -6046,6 +6065,14 @@\n \t}\n \n     default:\n+      /* For most processors, ADD is faster than LEA.  These alternatives\n+\t were added to use ADD as much as possible.  */\n+      if (which_alternative == 2 || which_alternative == 4)\n+\t{\n+\t  rtx tmp;\n+\t  tmp = operands[1], operands[1] = operands[2], operands[2] = tmp;\n+\t}\n+\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], QImode))\n \t{\n@@ -6061,17 +6088,18 @@\n     }\n }\n   [(set (attr \"type\")\n-     (if_then_else (eq_attr \"alternative\" \"3\")\n-\t(const_string \"lea\")\n-\t(if_then_else (match_operand:QI 2 \"incdec_operand\" \"\")\n-\t   (const_string \"incdec\")\n-\t   (const_string \"alu\"))))\n+     (cond [(eq_attr \"alternative\" \"5\")\n+              (const_string \"lea\")\n+\t    (match_operand:QI 2 \"incdec_operand\" \"\")\n+\t      (const_string \"incdec\")\n+\t   ]\n+\t   (const_string \"alu\")))\n    (set (attr \"length_immediate\")\n       (if_then_else\n \t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n \t(const_string \"1\")\n \t(const_string \"*\")))\n-   (set_attr \"mode\" \"QI,QI,SI,SI\")])\n+   (set_attr \"mode\" \"QI,QI,QI,SI,SI,SI\")])\n \n (define_insn \"*addqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n@@ -6658,7 +6686,7 @@\n \t\t (match_operand:DI 2 \"x86_64_nonmemory_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && reload_completed \n-   && ix86_lea_for_add_ok (PLUS, insn, operands)\"\n+   && ix86_lea_for_add_ok (insn, operands)\"\n   [(set (match_dup 0)\n \t(plus:DI (match_dup 1)\n \t\t (match_dup 2)))]\n@@ -6670,7 +6698,7 @@\n \t(plus (match_operand 1 \"register_operand\" \"\")\n               (match_operand 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed && ix86_lea_for_add_ok (PLUS, insn, operands)\" \n+  \"reload_completed && ix86_lea_for_add_ok (insn, operands)\" \n   [(const_int 0)]\n {\n   rtx pat;"}]}