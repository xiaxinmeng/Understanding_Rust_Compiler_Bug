{"sha": "453a246bb4d4bd13e1a5d245b9f38923abbfc94e", "node_id": "C_kwDOANBUbNoAKDQ1M2EyNDZiYjRkNGJkMTNlMWE1ZDI0NWI5ZjM4OTIzYWJiZmM5NGU", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-20T14:52:09Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:31Z"}, "message": "libproc_macro: Implement Display for Literal\n\nImplement the Display trait on rust internal Literal structure.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/bridge/literal.rs: Implement Display.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "853b7c6c6c775615e7ce17cec85c1cd2725f976f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/853b7c6c6c775615e7ce17cec85c1cd2725f976f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/453a246bb4d4bd13e1a5d245b9f38923abbfc94e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453a246bb4d4bd13e1a5d245b9f38923abbfc94e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453a246bb4d4bd13e1a5d245b9f38923abbfc94e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453a246bb4d4bd13e1a5d245b9f38923abbfc94e/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "541c0f009c6c21223942ca7f3157976701f7db8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541c0f009c6c21223942ca7f3157976701f7db8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/541c0f009c6c21223942ca7f3157976701f7db8c"}], "stats": {"total": 117, "additions": 116, "deletions": 1}, "files": [{"sha": "6f7bb512378339c581feb6ebe97aae8c130ca97a", "filename": "librust/proc_macro/rust/bridge/literal.rs", "status": "modified", "additions": 116, "deletions": 1, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453a246bb4d4bd13e1a5d245b9f38923abbfc94e/librust%2Fproc_macro%2Frust%2Fbridge%2Fliteral.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453a246bb4d4bd13e1a5d245b9f38923abbfc94e/librust%2Fproc_macro%2Frust%2Fbridge%2Fliteral.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge%2Fliteral.rs?ref=453a246bb4d4bd13e1a5d245b9f38923abbfc94e", "patch": "@@ -1,6 +1,7 @@\n use bridge::span::Span;\n-use std::convert::TryInto;\n+use std::convert::{TryFrom, TryInto};\n use std::ffi::c_uchar;\n+use std::fmt;\n \n extern \"C\" {\n     fn Literal__drop(literal: *const Literal);\n@@ -210,3 +211,117 @@ impl Drop for Literal {\n         }\n     }\n }\n+\n+impl fmt::Display for Literal {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Literal::String { data, size } => {\n+                let slice =\n+                    unsafe { std::slice::from_raw_parts(*data, (*size).try_into().unwrap()) };\n+                f.write_str(\"\\\"\")?;\n+                f.write_str(std::str::from_utf8(slice).unwrap())?;\n+                f.write_str(\"\\\"\")?;\n+            }\n+            Literal::ByteString { data, size } => {\n+                f.write_str(\"b\\\"\")?;\n+                let slice =\n+                    unsafe { std::slice::from_raw_parts(*data, (*size).try_into().unwrap()) };\n+                for &byte in slice {\n+                    if byte != b'\"' && byte >= b' ' && byte <= b'z' {\n+                        char::try_from(byte).unwrap().fmt(f)?;\n+                    } else {\n+                        write!(f, \"\\\\x{byte:02x}\")?;\n+                    }\n+                }\n+                f.write_str(\"b\\\"\")?;\n+            }\n+            Literal::Char(val) => {\n+                let ch: char = (*val).try_into().unwrap();\n+                match ch {\n+                    '\\'' => f.write_str(\"'\\\\''\")?,\n+                    '\\0' => f.write_str(\"'\\\\0'\")?,\n+                    '\\n' => f.write_str(\"'\\\\n'\")?,\n+                    ' '..='z' => write!(f, \"'{ch}'\")?,\n+                    _ => write!(f, \"'\\\\u{val:x}'\")?,\n+                }\n+            }\n+            Literal::Unsigned(val, suffixed) => match val {\n+                Unsigned::Unsigned8(val) => {\n+                    val.fmt(f)?;\n+                    if *suffixed {\n+                        f.write_str(\"u8\")?;\n+                    }\n+                }\n+                Unsigned::Unsigned16(val) => {\n+                    val.fmt(f)?;\n+                    if *suffixed {\n+                        f.write_str(\"u16\")?;\n+                    }\n+                }\n+                Unsigned::Unsigned32(val) => {\n+                    val.fmt(f)?;\n+                    if *suffixed {\n+                        f.write_str(\"u32\")?;\n+                    }\n+                }\n+                Unsigned::Unsigned64(val) => {\n+                    val.fmt(f)?;\n+                    if *suffixed {\n+                        f.write_str(\"u64\")?;\n+                    }\n+                }\n+            },\n+            Literal::Signed(val, suffixed) => match val {\n+                Signed::Signed8(val) => {\n+                    val.fmt(f)?;\n+                    if *suffixed {\n+                        f.write_str(\"i8\")?;\n+                    }\n+                }\n+                Signed::Signed16(val) => {\n+                    val.fmt(f)?;\n+                    if *suffixed {\n+                        f.write_str(\"i16\")?;\n+                    }\n+                }\n+                Signed::Signed32(val) => {\n+                    val.fmt(f)?;\n+                    if *suffixed {\n+                        f.write_str(\"i32\")?;\n+                    }\n+                }\n+                Signed::Signed64(val) => {\n+                    val.fmt(f)?;\n+                    if *suffixed {\n+                        f.write_str(\"i64\")?;\n+                    }\n+                }\n+            },\n+            Literal::Usize(val, suffixed) => {\n+                val.fmt(f)?;\n+                if *suffixed {\n+                    f.write_str(\"usize\")?;\n+                }\n+            }\n+            Literal::ISize(val, suffixed) => {\n+                val.fmt(f)?;\n+                if *suffixed {\n+                    f.write_str(\"isize\")?;\n+                }\n+            }\n+            Literal::Float32(val, suffixed) => {\n+                val.fmt(f)?;\n+                if *suffixed {\n+                    f.write_str(\"f32\")?;\n+                }\n+            }\n+            Literal::Float64(val, suffixed) => {\n+                val.fmt(f)?;\n+                if *suffixed {\n+                    f.write_str(\"f64\")?;\n+                }\n+            }\n+        }\n+        Ok(())\n+    }\n+}"}]}