{"sha": "c30587c0200f52f8845a5aea21bd7bef6cbe0bf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMwNTg3YzAyMDBmNTJmODg0NWE1YWVhMjFiZDdiZWY2Y2JlMGJmNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-15T10:09:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-15T10:09:10Z"}, "message": "re PR fortran/92094 (ice in vect_transform_stmt at tree-vect-stmts.c:10921)\n\n2019-10-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92094\n\t* tree-vect-loop.c (vectorizable_reduction): For nested cycles\n\tdo not adjust the reduction definition def type.\n\t* tree-vect-stmts.c (vect_transform_stmt): Verify the scalar stmt\n\tdefines the latch argument of the PHI.\n\n\t* gfortran.dg/pr92094.f90: New testcase.\n\nFrom-SVN: r276987", "tree": {"sha": "30bc1414aafb9c90a81b1222e2bf97e040fec114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30bc1414aafb9c90a81b1222e2bf97e040fec114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c4d6d1c29b62d97014d30848ee542e309dbe9c"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "6e16ee81e5397ff69ae31c00e6b5c366c7dd9420", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c30587c0200f52f8845a5aea21bd7bef6cbe0bf4", "patch": "@@ -1,3 +1,11 @@\n+2019-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92094\n+\t* tree-vect-loop.c (vectorizable_reduction): For nested cycles\n+\tdo not adjust the reduction definition def type.\n+\t* tree-vect-stmts.c (vect_transform_stmt): Verify the scalar stmt\n+\tdefines the latch argument of the PHI.\n+\n 2019-10-15  Hongyu Wang  <hongtao.wang@intel.com>\n \n \tPR target/92035"}, {"sha": "7fbb8dd64e85f9efeaa3bfa466403f113c3d3d44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c30587c0200f52f8845a5aea21bd7bef6cbe0bf4", "patch": "@@ -1,3 +1,8 @@\n+2019-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92094\n+\t* gfortran.dg/pr92094.f90: New testcase.\n+\n 2019-10-15  Hongyu Wang  <hongyu.wang@intel.com>\n \n \tPR target/92035"}, {"sha": "6793391af24b92af8a6c9e91314e9d533cbe6602", "filename": "gcc/testsuite/gfortran.dg/pr92094.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr92094.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr92094.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr92094.f90?ref=c30587c0200f52f8845a5aea21bd7bef6cbe0bf4", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+! { dg-options \"-O3\" }\n+      subroutine hesfcn(n, x, h, ldh)\n+      integer n,ldh\n+      double precision x(n), h(ldh)\n+\n+      integer i,j,k,kj\n+      double precision th,u1,u2,v2\n+ \n+      kj = 0\n+      do 770 j = 1, n\n+         kj = kj - j\n+         do 760 k = 1, j\n+            kj = kj + 1\n+            v2 = 2 * x(k) - 1\n+            u1 = 0\n+            u2 = 2\n+            do 750 i = 1, n\n+               h(kj) = h(kj) + u2\n+               th = 4 * v2 + u2 - u1\n+               u1 = u2\n+               u2 = th\n+               th = v2 - 1\n+  750       continue\n+  760    continue\n+  770 continue\n+\n+      end"}, {"sha": "455251070d081d11f5301f7178dc2d62f2f2bb0e", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=c30587c0200f52f8845a5aea21bd7bef6cbe0bf4", "patch": "@@ -5742,20 +5742,9 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n   if (STMT_VINFO_DEF_TYPE (stmt_info) == vect_nested_cycle)\n     {\n       if (is_a <gphi *> (stmt_info->stmt))\n-\t{\n-\t  /* Analysis for double-reduction is done on the outer\n-\t     loop PHI, nested cycles have no further restrictions.  */\n-\t  STMT_VINFO_TYPE (stmt_info) = cycle_phi_info_type;\n-\t  /* For nested cycles we want to let regular vectorizable_*\n-\t     routines handle code-generation.  */\n-\t  if (STMT_VINFO_DEF_TYPE (reduc_info) != vect_double_reduction_def)\n-\t    {\n-\t      stmt_info = STMT_VINFO_REDUC_DEF (stmt_info);\n-\t      STMT_VINFO_DEF_TYPE (stmt_info) = vect_internal_def;\n-\t      STMT_VINFO_DEF_TYPE (vect_stmt_to_vectorize (stmt_info))\n-\t\t= vect_internal_def;\n-\t    }\n-\t}\n+\t/* Analysis for double-reduction is done on the outer\n+\t   loop PHI, nested cycles have no further restrictions.  */\n+\tSTMT_VINFO_TYPE (stmt_info) = cycle_phi_info_type;\n       else\n \tSTMT_VINFO_TYPE (stmt_info) = reduc_vec_info_type;\n       return true;"}, {"sha": "ff9863f290f281a88f6a74a90f267815430a7e05", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c30587c0200f52f8845a5aea21bd7bef6cbe0bf4/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=c30587c0200f52f8845a5aea21bd7bef6cbe0bf4", "patch": "@@ -10906,13 +10906,16 @@ vect_transform_stmt (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       && STMT_VINFO_REDUC_TYPE (reduc_info) != EXTRACT_LAST_REDUCTION)\n     {\n       gphi *phi;\n+      edge e;\n       if (!slp_node\n \t  && (phi = dyn_cast <gphi *>\n \t\t      (STMT_VINFO_REDUC_DEF (orig_stmt_info)->stmt))\n \t  && dominated_by_p (CDI_DOMINATORS,\n-\t\t\t     gimple_bb (orig_stmt_info->stmt), gimple_bb (phi)))\n+\t\t\t     gimple_bb (orig_stmt_info->stmt), gimple_bb (phi))\n+\t  && (e = loop_latch_edge (gimple_bb (phi)->loop_father))\n+\t  && (PHI_ARG_DEF_FROM_EDGE (phi, e)\n+\t      == gimple_get_lhs (orig_stmt_info->stmt)))\n \t{\n-\t  edge e = loop_latch_edge (gimple_bb (phi)->loop_father);\n \t  stmt_vec_info phi_info\n \t    = STMT_VINFO_VEC_STMT (STMT_VINFO_REDUC_DEF (orig_stmt_info));\n \t  stmt_vec_info vec_stmt = STMT_VINFO_VEC_STMT (stmt_info);\n@@ -10932,7 +10935,7 @@ vect_transform_stmt (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t{\n \t  slp_tree phi_node = slp_node_instance->reduc_phis;\n \t  gphi *phi = as_a <gphi *> (SLP_TREE_SCALAR_STMTS (phi_node)[0]->stmt);\n-\t  edge e = loop_latch_edge (gimple_bb (phi)->loop_father);\n+\t  e = loop_latch_edge (gimple_bb (phi)->loop_father);\n \t  gcc_assert (SLP_TREE_VEC_STMTS (phi_node).length ()\n \t\t      == SLP_TREE_VEC_STMTS (slp_node).length ());\n \t  for (unsigned i = 0; i < SLP_TREE_VEC_STMTS (phi_node).length (); ++i)"}]}