{"sha": "f9487002a446cc5f4c777a77afe7c6eaecfec4d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk0ODcwMDJhNDQ2Y2M1ZjRjNzc3YTc3YWZlN2M2ZWFlY2ZlYzRkMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-11-20T01:47:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-11-20T01:47:10Z"}, "message": "re PR c++/36631 (attribute always_inline  ->  sorry, unimplemented: recursive inlining)\n\n\tPR c++/36631\n\t* gimplify.c (gimplify_call_expr): Defer most of the cannot inline\n\tchecking until GIMPLE lowering.\n\t* gimple-low.c (check_call_args): New function.\n\t(lower_stmt) <case GIMPLE_CALL>: Call it.\n\n\t* g++.dg/template/call5.C: New test.\n\nFrom-SVN: r142033", "tree": {"sha": "67fbdcdd6803ec41d3748836df422ebc60868bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67fbdcdd6803ec41d3748836df422ebc60868bcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9487002a446cc5f4c777a77afe7c6eaecfec4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9487002a446cc5f4c777a77afe7c6eaecfec4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9487002a446cc5f4c777a77afe7c6eaecfec4d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9487002a446cc5f4c777a77afe7c6eaecfec4d0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "104320132fba35748d61446776c5577645025025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104320132fba35748d61446776c5577645025025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/104320132fba35748d61446776c5577645025025"}], "stats": {"total": 154, "additions": 111, "deletions": 43}, "files": [{"sha": "48757a5f1554dc51890c85bd4dc239b9ee939d00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9487002a446cc5f4c777a77afe7c6eaecfec4d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9487002a446cc5f4c777a77afe7c6eaecfec4d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9487002a446cc5f4c777a77afe7c6eaecfec4d0", "patch": "@@ -1,3 +1,11 @@\n+2008-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/36631\n+\t* gimplify.c (gimplify_call_expr): Defer most of the cannot inline\n+\tchecking until GIMPLE lowering.\n+\t* gimple-low.c (check_call_args): New function.\n+\t(lower_stmt) <case GIMPLE_CALL>: Call it.\n+\n 2008-11-19  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* config/mips/mips.c (mips_gimplify_va_arg_expr): Use -rsize"}, {"sha": "fecc667f6b9f4e6776b2d3fcdcd4efc044b4b2fc", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9487002a446cc5f4c777a77afe7c6eaecfec4d0/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9487002a446cc5f4c777a77afe7c6eaecfec4d0/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=f9487002a446cc5f4c777a77afe7c6eaecfec4d0", "patch": "@@ -1,6 +1,7 @@\n /* GIMPLE lowering pass.  Converts High GIMPLE into Low GIMPLE.\n \n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -218,6 +219,80 @@ struct gimple_opt_pass pass_lower_cf =\n };\n \n \n+/* Verify if the type of the argument matches that of the function\n+   declaration.  If we cannot verify this or there is a mismatch,\n+   mark the call expression so it doesn't get inlined later.  */\n+\n+static void\n+check_call_args (gimple stmt)\n+{\n+  tree fndecl, parms, p;\n+  unsigned int i, nargs;\n+\n+  if (gimple_call_cannot_inline_p (stmt))\n+    return;\n+\n+  nargs = gimple_call_num_args (stmt);\n+\n+  /* Get argument types for verification.  */\n+  fndecl = gimple_call_fndecl (stmt);\n+  parms = NULL_TREE;\n+  if (fndecl)\n+    parms = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n+  else if (POINTER_TYPE_P (TREE_TYPE (gimple_call_fn (stmt))))\n+    parms = TYPE_ARG_TYPES (TREE_TYPE (TREE_TYPE (gimple_call_fn (stmt))));\n+\n+  /* Verify if the type of the argument matches that of the function\n+     declaration.  If we cannot verify this or there is a mismatch,\n+     mark the call expression so it doesn't get inlined later.  */\n+  if (fndecl && DECL_ARGUMENTS (fndecl))\n+    {\n+      for (i = 0, p = DECL_ARGUMENTS (fndecl);\n+\t   i < nargs;\n+\t   i++, p = TREE_CHAIN (p))\n+\t{\n+\t  /* We cannot distinguish a varargs function from the case\n+\t     of excess parameters, still deferring the inlining decision\n+\t     to the callee is possible.  */\n+\t  if (!p)\n+\t    break;\n+\t  if (p == error_mark_node\n+\t      || gimple_call_arg (stmt, i) == error_mark_node\n+\t      || !fold_convertible_p (DECL_ARG_TYPE (p),\n+\t\t\t\t      gimple_call_arg (stmt, i)))\n+\t    {\n+\t      gimple_call_set_cannot_inline (stmt, true);\n+\t      break;\n+\t    }\n+\t}\n+    }\n+  else if (parms)\n+    {\n+      for (i = 0, p = parms; i < nargs; i++, p = TREE_CHAIN (p))\n+\t{\n+\t  /* If this is a varargs function defer inlining decision\n+\t     to callee.  */\n+\t  if (!p)\n+\t    break;\n+\t  if (TREE_VALUE (p) == error_mark_node\n+\t      || gimple_call_arg (stmt, i) == error_mark_node\n+\t      || TREE_CODE (TREE_VALUE (p)) == VOID_TYPE\n+\t      || !fold_convertible_p (TREE_VALUE (p),\n+\t\t\t\t      gimple_call_arg (stmt, i)))\n+\t    {\n+\t      gimple_call_set_cannot_inline (stmt, true);\n+\t      break;\n+\t    }\n+\t}\n+    }\n+  else\n+    {\n+      if (nargs != 0)\n+\tgimple_call_set_cannot_inline (stmt, true);\n+    }\n+}\n+\n+\n /* Lower sequence SEQ.  Unlike gimplification the statements are not relowered\n    when they are changed -- if this has to be done, the lowering routine must\n    do it explicitly.  DATA is passed through the recursion.  */\n@@ -320,6 +395,7 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n \t    lower_builtin_setjmp (gsi);\n \t    return;\n \t  }\n+\tcheck_call_args (stmt);\n       }\n       break;\n "}, {"sha": "20003137554ba61ce7c0367e0587794d7bb0fb4d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9487002a446cc5f4c777a77afe7c6eaecfec4d0/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9487002a446cc5f4c777a77afe7c6eaecfec4d0/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f9487002a446cc5f4c777a77afe7c6eaecfec4d0", "patch": "@@ -2352,56 +2352,18 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n   else if (POINTER_TYPE_P (TREE_TYPE (CALL_EXPR_FN (*expr_p))))\n     parms = TYPE_ARG_TYPES (TREE_TYPE (TREE_TYPE (CALL_EXPR_FN (*expr_p))));\n \n-  /* Verify if the type of the argument matches that of the function\n-     declaration.  If we cannot verify this or there is a mismatch,\n-     mark the call expression so it doesn't get inlined later.  */\n   if (fndecl && DECL_ARGUMENTS (fndecl))\n-    {\n-      for (i = 0, p = DECL_ARGUMENTS (fndecl);\n-\t   i < nargs;\n-\t   i++, p = TREE_CHAIN (p))\n-\t{\n-\t  /* We cannot distinguish a varargs function from the case\n-\t     of excess parameters, still deferring the inlining decision\n-\t     to the callee is possible.  */\n-\t  if (!p)\n-\t    break;\n-\t  if (p == error_mark_node\n-\t      || CALL_EXPR_ARG (*expr_p, i) == error_mark_node\n-\t      || !fold_convertible_p (DECL_ARG_TYPE (p),\n-\t\t\t\t      CALL_EXPR_ARG (*expr_p, i)))\n-\t    {\n-\t      CALL_CANNOT_INLINE_P (*expr_p) = 1;\n-\t      break;\n-\t    }\n-\t}\n-    }\n+    p = DECL_ARGUMENTS (fndecl);\n   else if (parms)\n-    {\n-      for (i = 0, p = parms; i < nargs; i++, p = TREE_CHAIN (p))\n-\t{\n-\t  /* If this is a varargs function defer inlining decision\n-\t     to callee.  */\n-\t  if (!p)\n-\t    break;\n-\t  if (TREE_VALUE (p) == error_mark_node\n-\t      || CALL_EXPR_ARG (*expr_p, i) == error_mark_node\n-\t      || TREE_CODE (TREE_VALUE (p)) == VOID_TYPE\n-\t      || !fold_convertible_p (TREE_VALUE (p),\n-\t\t\t\t      CALL_EXPR_ARG (*expr_p, i)))\n-\t    {\n-\t      CALL_CANNOT_INLINE_P (*expr_p) = 1;\n-\t      break;\n-\t    }\n-\t}\n-    }\n+    p = parms;\n   else\n     {\n       if (nargs != 0)\n \tCALL_CANNOT_INLINE_P (*expr_p) = 1;\n-      i = 0;\n       p = NULL_TREE;\n     }\n+  for (i = 0; i < nargs && p; i++, p = TREE_CHAIN (p))\n+    ;\n \n   /* If the last argument is __builtin_va_arg_pack () and it is not\n      passed as a named argument, decrease the number of CALL_EXPR"}, {"sha": "1f0774f06b301f2899ff368d5d9aa986462febb8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9487002a446cc5f4c777a77afe7c6eaecfec4d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9487002a446cc5f4c777a77afe7c6eaecfec4d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9487002a446cc5f4c777a77afe7c6eaecfec4d0", "patch": "@@ -1,3 +1,8 @@\n+2008-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/36631\n+\t* g++.dg/template/call5.C: New test.\n+\n 2008-11-19  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.c-torture/compile/20081119-1.c: New test."}, {"sha": "55cf2ddac97e02e0c489b3920504b7d8d5811cbd", "filename": "gcc/testsuite/g++.dg/template/call5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9487002a446cc5f4c777a77afe7c6eaecfec4d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9487002a446cc5f4c777a77afe7c6eaecfec4d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall5.C?ref=f9487002a446cc5f4c777a77afe7c6eaecfec4d0", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/36631\n+// { dg-options \"-O0\" }\n+\n+template <typename T> struct B\n+{\n+  struct C\n+  {\n+    __attribute__ ((always_inline)) C (C const &c) {}\n+  };\n+  void __attribute__ ((always_inline)) g (C c) {}\n+};\n+\n+void\n+trigger (B <int> b, B <int>::C c)\n+{\n+  b.g (c);\n+}"}]}