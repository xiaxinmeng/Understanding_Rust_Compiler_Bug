{"sha": "19e51b409e89cb13f388bf2442e3d00b904dddde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTllNTFiNDA5ZTg5Y2IxM2YzODhiZjI0NDJlM2QwMGI5MDRkZGRkZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-01-13T19:14:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-13T19:14:03Z"}, "message": "re PR tree-optimization/59387 (wrong code (hangs) at -Os on x86_64-linux-gnu)\n\n\tPR tree-optimization/59387\n\t* tree-scalar-evolution.c: Include gimple-fold.h and gimplify-me.h.\n\t(scev_const_prop): If folded_casts and type has undefined overflow,\n\tuse force_gimple_operand instead of force_gimple_operand_gsi and\n\tfor each added stmt if it is assign with\n\tarith_code_with_undefined_signed_overflow, call\n\trewrite_to_defined_overflow.\n\t* tree-ssa-loop-im.c: Don't include gimplify-me.h, include\n\tgimple-fold.h instead.\n\t(arith_code_with_undefined_signed_overflow,\n\trewrite_to_defined_overflow): Moved to ...\n\t* gimple-fold.c (arith_code_with_undefined_signed_overflow,\n\trewrite_to_defined_overflow): ... here.  No longer static.\n\tInclude gimplify-me.h.\n\t* gimple-fold.h (arith_code_with_undefined_signed_overflow,\n\trewrite_to_defined_overflow): New prototypes.\n\n\t* gcc.c-torture/execute/pr59387.c: New test.\n\nFrom-SVN: r206583", "tree": {"sha": "3287f7d4ff23c203c29bc715bc7a4141b0081b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3287f7d4ff23c203c29bc715bc7a4141b0081b4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19e51b409e89cb13f388bf2442e3d00b904dddde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e51b409e89cb13f388bf2442e3d00b904dddde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19e51b409e89cb13f388bf2442e3d00b904dddde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e51b409e89cb13f388bf2442e3d00b904dddde/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd794ed4c2424b3381a5fb09c6f08e53ae919a8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd794ed4c2424b3381a5fb09c6f08e53ae919a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd794ed4c2424b3381a5fb09c6f08e53ae919a8a"}], "stats": {"total": 194, "additions": 126, "deletions": 68}, "files": [{"sha": "4f040a72cb32954517e9356b46614c03672d1d45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19e51b409e89cb13f388bf2442e3d00b904dddde", "patch": "@@ -1,3 +1,22 @@\n+2014-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/59387\n+\t* tree-scalar-evolution.c: Include gimple-fold.h and gimplify-me.h.\n+\t(scev_const_prop): If folded_casts and type has undefined overflow,\n+\tuse force_gimple_operand instead of force_gimple_operand_gsi and\n+\tfor each added stmt if it is assign with\n+\tarith_code_with_undefined_signed_overflow, call\n+\trewrite_to_defined_overflow.\n+\t* tree-ssa-loop-im.c: Don't include gimplify-me.h, include\n+\tgimple-fold.h instead.\n+\t(arith_code_with_undefined_signed_overflow,\n+\trewrite_to_defined_overflow): Moved to ...\n+\t* gimple-fold.c (arith_code_with_undefined_signed_overflow,\n+\trewrite_to_defined_overflow): ... here.  No longer static.\n+\tInclude gimplify-me.h.\n+\t* gimple-fold.h (arith_code_with_undefined_signed_overflow,\n+\trewrite_to_defined_overflow): New prototypes.\n+\n 2014-01-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.h (MAX_CONDITIONAL_EXECUTE): Fix typo in description."}, {"sha": "5dc27e172d9227e924a10281789ef015616d83cd", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=19e51b409e89cb13f388bf2442e3d00b904dddde", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"tree-ssa-address.h\"\n #include \"langhooks.h\"\n+#include \"gimplify-me.h\"\n \n /* Return true when DECL can be referenced from current unit.\n    FROM_DECL (if non-null) specify constructor of variable DECL was taken from.\n@@ -3548,3 +3549,64 @@ gimple_fold_indirect_ref (tree t)\n \n   return NULL_TREE;\n }\n+\n+/* Return true if CODE is an operation that when operating on signed\n+   integer types involves undefined behavior on overflow and the\n+   operation can be expressed with unsigned arithmetic.  */\n+\n+bool\n+arith_code_with_undefined_signed_overflow (tree_code code)\n+{\n+  switch (code)\n+    {\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+    case MULT_EXPR:\n+    case NEGATE_EXPR:\n+    case POINTER_PLUS_EXPR:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+/* Rewrite STMT, an assignment with a signed integer or pointer arithmetic\n+   operation that can be transformed to unsigned arithmetic by converting\n+   its operand, carrying out the operation in the corresponding unsigned\n+   type and converting the result back to the original type.\n+\n+   Returns a sequence of statements that replace STMT and also contain\n+   a modified form of STMT itself.  */\n+\n+gimple_seq\n+rewrite_to_defined_overflow (gimple stmt)\n+{\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"rewriting stmt with undefined signed \"\n+\t       \"overflow \");\n+      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n+    }\n+\n+  tree lhs = gimple_assign_lhs (stmt);\n+  tree type = unsigned_type_for (TREE_TYPE (lhs));\n+  gimple_seq stmts = NULL;\n+  for (unsigned i = 1; i < gimple_num_ops (stmt); ++i)\n+    {\n+      gimple_seq stmts2 = NULL;\n+      gimple_set_op (stmt, i,\n+\t\t     force_gimple_operand (fold_convert (type,\n+\t\t\t\t\t\t\t gimple_op (stmt, i)),\n+\t\t\t\t\t   &stmts2, true, NULL_TREE));\n+      gimple_seq_add_seq (&stmts, stmts2);\n+    }\n+  gimple_assign_set_lhs (stmt, make_ssa_name (type, stmt));\n+  if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR)\n+    gimple_assign_set_rhs_code (stmt, PLUS_EXPR);\n+  gimple_seq_add_stmt (&stmts, stmt);\n+  gimple cvt = gimple_build_assign_with_ops\n+      (NOP_EXPR, lhs, gimple_assign_lhs (stmt), NULL_TREE);\n+  gimple_seq_add_stmt (&stmts, cvt);\n+\n+  return stmts;\n+}"}, {"sha": "886cd02c4dd35cedad931659d524017e67af2d68", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=19e51b409e89cb13f388bf2442e3d00b904dddde", "patch": "@@ -40,5 +40,7 @@ extern tree fold_const_aggregate_ref (tree);\n extern tree gimple_get_virt_method_for_binfo (HOST_WIDE_INT, tree);\n extern bool gimple_val_nonnegative_real_p (tree);\n extern tree gimple_fold_indirect_ref (tree);\n+extern bool arith_code_with_undefined_signed_overflow (tree_code);\n+extern gimple_seq rewrite_to_defined_overflow (gimple);\n \n #endif  /* GCC_GIMPLE_FOLD_H */"}, {"sha": "459e36590055426d7c341c9f71d6891e3a16abc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19e51b409e89cb13f388bf2442e3d00b904dddde", "patch": "@@ -1,3 +1,8 @@\n+2014-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/59387\n+\t* gcc.c-torture/execute/pr59387.c: New test.\n+\n 2014-01-13  Richard Biener  <rguenther@suse.de>\n \n \t* g++.dg/lto/lto.exp: Do check_effective_target_lto check before"}, {"sha": "f1ddc24b1a2c654ac09909d28a9114dd6faba79f", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=19e51b409e89cb13f388bf2442e3d00b904dddde", "patch": "@@ -286,6 +286,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"params.h\"\n #include \"tree-ssa-propagate.h\"\n+#include \"gimple-fold.h\"\n+#include \"gimplify-me.h\"\n \n static tree analyze_scalar_evolution_1 (struct loop *, tree, tree);\n static tree analyze_scalar_evolution_for_address_of (struct loop *loop,\n@@ -3409,7 +3411,7 @@ scev_const_prop (void)\n     {\n       edge exit;\n       tree def, rslt, niter;\n-      gimple_stmt_iterator bsi;\n+      gimple_stmt_iterator gsi;\n \n       /* If we do not know exact number of iterations of the loop, we cannot\n \t replace the final value.  */\n@@ -3424,7 +3426,7 @@ scev_const_prop (void)\n       /* Ensure that it is possible to insert new statements somewhere.  */\n       if (!single_pred_p (exit->dest))\n \tsplit_loop_exit_edge (exit);\n-      bsi = gsi_after_labels (exit->dest);\n+      gsi = gsi_after_labels (exit->dest);\n \n       ex_loop = superloop_at_depth (loop,\n \t\t\t\t    loop_depth (exit->dest->loop_father) + 1);\n@@ -3447,7 +3449,9 @@ scev_const_prop (void)\n \t      continue;\n \t    }\n \n-\t  def = analyze_scalar_evolution_in_loop (ex_loop, loop, def, NULL);\n+\t  bool folded_casts;\n+\t  def = analyze_scalar_evolution_in_loop (ex_loop, loop, def,\n+\t\t\t\t\t\t  &folded_casts);\n \t  def = compute_overall_effect_of_inner_loop (ex_loop, def);\n \t  if (!tree_does_not_contain_chrecs (def)\n \t      || chrec_contains_symbols_defined_in_loop (def, ex_loop->num)\n@@ -3485,10 +3489,37 @@ scev_const_prop (void)\n \t  def = unshare_expr (def);\n \t  remove_phi_node (&psi, false);\n \n-\t  def = force_gimple_operand_gsi (&bsi, def, false, NULL_TREE,\n-      \t\t\t\t\t  true, GSI_SAME_STMT);\n+\t  /* If def's type has undefined overflow and there were folded\n+\t     casts, rewrite all stmts added for def into arithmetics\n+\t     with defined overflow behavior.  */\n+\t  if (folded_casts && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (def)))\n+\t    {\n+\t      gimple_seq stmts;\n+\t      gimple_stmt_iterator gsi2;\n+\t      def = force_gimple_operand (def, &stmts, true, NULL_TREE);\n+\t      gsi2 = gsi_start (stmts);\n+\t      while (!gsi_end_p (gsi2))\n+\t\t{\n+\t\t  gimple stmt = gsi_stmt (gsi2);\n+\t\t  gimple_stmt_iterator gsi3 = gsi2;\n+\t\t  gsi_next (&gsi2);\n+\t\t  gsi_remove (&gsi3, false);\n+\t\t  if (is_gimple_assign (stmt)\n+\t\t      && arith_code_with_undefined_signed_overflow\n+\t\t\t\t\t(gimple_assign_rhs_code (stmt)))\n+\t\t    gsi_insert_seq_before (&gsi,\n+\t\t\t\t\t   rewrite_to_defined_overflow (stmt),\n+\t\t\t\t\t   GSI_SAME_STMT);\n+\t\t  else\n+\t\t    gsi_insert_before (&gsi, stmt, GSI_SAME_STMT);\n+\t\t}\n+\t    }\n+\t  else\n+\t    def = force_gimple_operand_gsi (&gsi, def, false, NULL_TREE,\n+\t\t\t\t\t    true, GSI_SAME_STMT);\n+\n \t  ass = gimple_build_assign (rslt, def);\n-\t  gsi_insert_before (&bsi, ass, GSI_SAME_STMT);\n+\t  gsi_insert_before (&gsi, ass, GSI_SAME_STMT);\n \t  if (dump_file)\n \t    {\n \t      print_gimple_stmt (dump_file, ass, 0, 0);"}, {"sha": "c5455025b6c5473ea11a2abbde9c26cb83f610e6", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 62, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e51b409e89cb13f388bf2442e3d00b904dddde/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=19e51b409e89cb13f388bf2442e3d00b904dddde", "patch": "@@ -35,7 +35,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n-#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\"\n@@ -53,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-affine.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"trans-mem.h\"\n+#include \"gimple-fold.h\"\n \n /* TODO:  Support for predicated code motion.  I.e.\n \n@@ -1135,67 +1135,6 @@ class move_computations_dom_walker : public dom_walker\n   unsigned int todo_;\n };\n \n-/* Return true if CODE is an operation that when operating on signed\n-   integer types involves undefined behavior on overflow and the\n-   operation can be expressed with unsigned arithmetic.  */\n-\n-static bool\n-arith_code_with_undefined_signed_overflow (tree_code code)\n-{\n-  switch (code)\n-    {\n-    case PLUS_EXPR:\n-    case MINUS_EXPR:\n-    case MULT_EXPR:\n-    case NEGATE_EXPR:\n-    case POINTER_PLUS_EXPR:\n-      return true;\n-    default:\n-      return false;\n-    }\n-}\n-\n-/* Rewrite STMT, an assignment with a signed integer or pointer arithmetic\n-   operation that can be transformed to unsigned arithmetic by converting\n-   its operand, carrying out the operation in the corresponding unsigned\n-   type and converting the result back to the original type.\n-\n-   Returns a sequence of statements that replace STMT and also contain\n-   a modified form of STMT itself.  */\n-\n-static gimple_seq\n-rewrite_to_defined_overflow (gimple stmt)\n-{\n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    {\n-      fprintf (dump_file, \"rewriting stmt with undefined signed \"\n-\t       \"overflow \");\n-      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n-    }\n-\n-  tree lhs = gimple_assign_lhs (stmt);\n-  tree type = unsigned_type_for (TREE_TYPE (lhs));\n-  gimple_seq stmts = NULL;\n-  for (unsigned i = 1; i < gimple_num_ops (stmt); ++i)\n-    {\n-      gimple_seq stmts2 = NULL;\n-      gimple_set_op (stmt, i,\n-\t\t     force_gimple_operand (fold_convert (type,\n-\t\t\t\t\t\t\t gimple_op (stmt, i)),\n-\t\t\t\t\t   &stmts2, true, NULL_TREE));\n-      gimple_seq_add_seq (&stmts, stmts2);\n-    }\n-  gimple_assign_set_lhs (stmt, make_ssa_name (type, stmt));\n-  if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR)\n-    gimple_assign_set_rhs_code (stmt, PLUS_EXPR);\n-  gimple_seq_add_stmt (&stmts, stmt);\n-  gimple cvt = gimple_build_assign_with_ops\n-      (NOP_EXPR, lhs, gimple_assign_lhs (stmt), NULL_TREE);\n-  gimple_seq_add_stmt (&stmts, cvt);\n-\n-  return stmts;\n-}\n-\n /* Hoist the statements in basic block BB out of the loops prescribed by\n    data stored in LIM_DATA structures associated with each statement.  Callback\n    for walk_dominator_tree.  */"}]}