{"sha": "e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkYTMwYjJlZjJiNzNlOTM2ZWU3ODIxYWFkNWE0ZWE0NGZiZGYxNg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2006-10-31T18:10:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:10:46Z"}, "message": "sinfo.ads, sinfo.adb (Set_Synchronized_Present, [...]): Add Formal_Derived_Type_Definition and Private_Extension_Declaration to the...\n\n2006-10-31  Robert Dewar  <dewar@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\t    Bob Duff  <duff@adacore.com>\n\n\t* sinfo.ads, sinfo.adb (Set_Synchronized_Present,\n\tSynchronized_Present): Add Formal_Derived_Type_Definition and\n\tPrivate_Extension_Declaration to the list of assertions.\n\t(Is_Entry_Barrier_Function): New flag\n\t(Has_Self_Reference): New flag on aggregates, to indicate that they\n\tcontain a reference to the enclosing type, inserted through a default\n\tinitialization.\n\t(Next_Rep_Item): Move from Node4 to Node5.\n\t(Entity): Add this field for N_Attribute_Definition_Clause.\n\t(Comes_From_Extended_Return_Statement): New flag on N_Return_Statement\n\t(N_Return_Object_Declaration): Remove this node kind. We now use\n\tN_Object_Declaration instead.\n\t(Actual_Designated_Subtype): Move to a different place to make room in\n\tN_Extended_Return_Statement.\n\t(Procedure_To_Call): Move to a different place to make room in\n\tN_Extended_Return_Statement.\n\t(Return_Type): Removed this field to make room in return statements\n\t(both kinds).\n\t(Return_Statement_Entity): New field in return statements, in part to\n\treplace Return_Type, and in part to support the fact that return\n\tstatements are now pushed on the scope stack during semantic analysis.\n\t(Return_Object_Declarations): New field to support extended return\n\tstatements.\n\t(N_Extended_Return_Statement): New node for extended_return_statement\n\tnonterminal.\n\t(N_Return_Object_Declaration): New node for part of\n\textended_return_statement nonterminal. Needed because all the necessary\n\tfields won't fit in N_Extended_Return_Statement.\n\tGeneric_associations now carry the Box_Present flag, to indicate a\n\tdefault for an actual in a partially parametrized formal package.\n\n        * snames.h, snames.ads, snames.adb: Add definition for Validity_Check\n\t(Preset_Names): Add entries for Priority_Specific_Dispatching pragma\n\tand for the new predefined dispatching policies: EDF_Across_Priorities,\n\tNon_Preemptive_Within_Priorities, and Round_Robin_Within_Priorities.\n\tIntroduce new name Stub_Type for implementation defined attribute.\n\tAdd pragma Preelaborable_Initialization\n\tAdd entry for Priority attribute.\n\tAdd Pragma_Wide_Character_Encoding\n\t(Get_Convention_Name): Given a convention id, this function returns the\n\tcorresponding name id from the names table.\n\nFrom-SVN: r118313", "tree": {"sha": "a3384478cd6b26fdaaa9b54008e863f70fe01c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3384478cd6b26fdaaa9b54008e863f70fe01c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16/comments", "author": null, "committer": null, "parents": [{"sha": "9b0986f8589f13684a6899875f8c73f42aab775a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b0986f8589f13684a6899875f8c73f42aab775a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b0986f8589f13684a6899875f8c73f42aab775a"}], "stats": {"total": 3589, "additions": 2701, "deletions": 888}, "files": [{"sha": "c99463158b08a1f155d1c26a3b56bd376e89923e", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 113, "deletions": 22, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -122,6 +122,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Component_Definition\n+        or else NT (N).Nkind = N_Formal_Object_Declaration\n         or else NT (N).Nkind = N_Object_Renaming_Declaration);\n       return Node3 (N);\n    end Access_Definition;\n@@ -181,7 +182,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind = N_Explicit_Dereference\n         or else NT (N).Nkind = N_Free_Statement);\n-      return Node2 (N);\n+      return Node4 (N);\n    end Actual_Designated_Subtype;\n \n    function Aggregate_Bounds\n@@ -325,14 +326,16 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Component_Association\n         or else NT (N).Nkind = N_Formal_Abstract_Subprogram_Declaration\n         or else NT (N).Nkind = N_Formal_Concrete_Subprogram_Declaration\n-        or else NT (N).Nkind = N_Formal_Package_Declaration);\n+        or else NT (N).Nkind = N_Formal_Package_Declaration\n+        or else NT (N).Nkind = N_Generic_Association);\n       return Flag15 (N);\n    end Box_Present;\n \n    function By_Ref\n       (N : Node_Id) return Boolean is\n    begin\n       pragma Assert (False\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Return_Statement);\n       return Flag5 (N);\n    end By_Ref;\n@@ -377,6 +380,14 @@ package body Sinfo is\n       return List1 (N);\n    end Choices;\n \n+   function Comes_From_Extended_Return_Statement\n+     (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Return_Statement);\n+      return Flag18 (N);\n+   end Comes_From_Extended_Return_Statement;\n+\n    function Compile_Time_Known_Aggregate\n       (N : Node_Id) return Boolean is\n    begin\n@@ -630,6 +641,7 @@ package body Sinfo is\n       (N : Node_Id) return Node_Id is\n    begin\n       pragma Assert (False\n+        or else NT (N).Nkind = N_Formal_Object_Declaration\n         or else NT (N).Nkind = N_Parameter_Specification);\n       return Node5 (N);\n    end Default_Expression;\n@@ -878,6 +890,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Assignment_Statement\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Function_Call\n         or else NT (N).Nkind = N_Procedure_Call_Statement\n         or else NT (N).Nkind = N_Return_Statement\n@@ -989,7 +1002,8 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind in N_Has_Entity\n-        or else NT (N).Nkind = N_Freeze_Entity);\n+        or else NT (N).Nkind = N_Freeze_Entity\n+        or else NT (N).Nkind = N_Attribute_Definition_Clause);\n       return Node4 (N);\n    end Entity;\n \n@@ -1128,7 +1142,6 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Discriminant_Association\n         or else NT (N).Nkind = N_Discriminant_Specification\n         or else NT (N).Nkind = N_Exception_Declaration\n-        or else NT (N).Nkind = N_Formal_Object_Declaration\n         or else NT (N).Nkind = N_Free_Statement\n         or else NT (N).Nkind = N_Mod_Clause\n         or else NT (N).Nkind = N_Modular_Type_Definition\n@@ -1292,6 +1305,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Accept_Statement\n         or else NT (N).Nkind = N_Block_Statement\n         or else NT (N).Nkind = N_Entry_Body\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Package_Body\n         or else NT (N).Nkind = N_Subprogram_Body\n         or else NT (N).Nkind = N_Task_Body);\n@@ -1357,6 +1371,15 @@ package body Sinfo is\n       return Flag11 (N);\n    end Has_Private_View;\n \n+   function Has_Self_Reference\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Aggregate\n+        or else NT (N).Nkind = N_Extension_Aggregate);\n+      return Flag13 (N);\n+   end Has_Self_Reference;\n+\n    function Has_Storage_Size_Pragma\n       (N : Node_Id) return Boolean is\n    begin\n@@ -1523,6 +1546,14 @@ package body Sinfo is\n       return Flag16 (N);\n    end Is_Controlling_Actual;\n \n+   function Is_Entry_Barrier_Function\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Subprogram_Body);\n+      return Flag8 (N);\n+   end Is_Entry_Barrier_Function;\n+\n    function Is_In_Discriminant_Check\n       (N : Node_Id) return Boolean is\n    begin\n@@ -1866,7 +1897,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Enumeration_Representation_Clause\n         or else NT (N).Nkind = N_Pragma\n         or else NT (N).Nkind = N_Record_Representation_Clause);\n-      return Node4 (N);\n+      return Node5 (N);\n    end Next_Rep_Item;\n \n    function Next_Use_Clause\n@@ -1942,8 +1973,10 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Component_Definition\n         or else NT (N).Nkind = N_Derived_Type_Definition\n         or else NT (N).Nkind = N_Discriminant_Specification\n+        or else NT (N).Nkind = N_Formal_Object_Declaration\n         or else NT (N).Nkind = N_Function_Specification\n         or else NT (N).Nkind = N_Object_Declaration\n+        or else NT (N).Nkind = N_Object_Renaming_Declaration\n         or else NT (N).Nkind = N_Parameter_Specification\n         or else NT (N).Nkind = N_Subtype_Declaration);\n       return Flag11 (N);\n@@ -2167,9 +2200,10 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Allocator\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Free_Statement\n         or else NT (N).Nkind = N_Return_Statement);\n-      return Node4 (N);\n+      return Node2 (N);\n    end Procedure_To_Call;\n \n    function Proper_Body\n@@ -2280,13 +2314,22 @@ package body Sinfo is\n       return Node4 (N);\n    end Result_Definition;\n \n-   function Return_Type\n-      (N : Node_Id) return Node_Id is\n+   function Return_Object_Declarations\n+     (N : Node_Id) return List_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Extended_Return_Statement);\n+      return List3 (N);\n+   end Return_Object_Declarations;\n+\n+   function Return_Statement_Entity\n+     (N : Node_Id) return Node_Id is\n    begin\n       pragma Assert (False\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Return_Statement);\n-      return Node2 (N);\n-   end Return_Type;\n+      return Node5 (N);\n+   end Return_Statement_Entity;\n \n    function Reverse_Present\n       (N : Node_Id) return Boolean is\n@@ -2421,6 +2464,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Allocator\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Free_Statement\n         or else NT (N).Nkind = N_Return_Statement);\n       return Node1 (N);\n@@ -2476,6 +2520,8 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Derived_Type_Definition\n+        or else NT (N).Nkind = N_Formal_Derived_Type_Definition\n+        or else NT (N).Nkind = N_Private_Extension_Declaration\n         or else NT (N).Nkind = N_Record_Definition);\n       return Flag7 (N);\n    end Synchronized_Present;\n@@ -2718,6 +2764,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Component_Definition\n+        or else NT (N).Nkind = N_Formal_Object_Declaration\n         or else NT (N).Nkind = N_Object_Renaming_Declaration);\n       Set_Node3_With_Parent (N, Val);\n    end Set_Access_Definition;\n@@ -2777,7 +2824,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind = N_Explicit_Dereference\n         or else NT (N).Nkind = N_Free_Statement);\n-      Set_Node2 (N, Val);\n+      Set_Node4 (N, Val);\n    end Set_Actual_Designated_Subtype;\n \n    procedure Set_Aggregate_Bounds\n@@ -2921,14 +2968,16 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Component_Association\n         or else NT (N).Nkind = N_Formal_Abstract_Subprogram_Declaration\n         or else NT (N).Nkind = N_Formal_Concrete_Subprogram_Declaration\n-        or else NT (N).Nkind = N_Formal_Package_Declaration);\n+        or else NT (N).Nkind = N_Formal_Package_Declaration\n+        or else NT (N).Nkind = N_Generic_Association);\n       Set_Flag15 (N, Val);\n    end Set_Box_Present;\n \n    procedure Set_By_Ref\n       (N : Node_Id; Val : Boolean := True) is\n    begin\n       pragma Assert (False\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Return_Statement);\n       Set_Flag5 (N, Val);\n    end Set_By_Ref;\n@@ -2973,6 +3022,14 @@ package body Sinfo is\n       Set_List1_With_Parent (N, Val);\n    end Set_Choices;\n \n+   procedure Set_Comes_From_Extended_Return_Statement\n+     (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Return_Statement);\n+      Set_Flag18 (N, Val);\n+   end Set_Comes_From_Extended_Return_Statement;\n+\n    procedure Set_Compile_Time_Known_Aggregate\n       (N : Node_Id; Val : Boolean := True) is\n    begin\n@@ -3226,6 +3283,7 @@ package body Sinfo is\n       (N : Node_Id; Val : Node_Id) is\n    begin\n       pragma Assert (False\n+        or else NT (N).Nkind = N_Formal_Object_Declaration\n         or else NT (N).Nkind = N_Parameter_Specification);\n       Set_Node5 (N, Val); -- semantic field, no parent set\n    end Set_Default_Expression;\n@@ -3474,6 +3532,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Assignment_Statement\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Function_Call\n         or else NT (N).Nkind = N_Procedure_Call_Statement\n         or else NT (N).Nkind = N_Return_Statement\n@@ -3585,7 +3644,8 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind in N_Has_Entity\n-        or else NT (N).Nkind = N_Freeze_Entity);\n+        or else NT (N).Nkind = N_Freeze_Entity\n+        or else NT (N).Nkind = N_Attribute_Definition_Clause);\n       Set_Node4 (N, Val); -- semantic field, no parent set\n    end Set_Entity;\n \n@@ -3715,7 +3775,6 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Discriminant_Association\n         or else NT (N).Nkind = N_Discriminant_Specification\n         or else NT (N).Nkind = N_Exception_Declaration\n-        or else NT (N).Nkind = N_Formal_Object_Declaration\n         or else NT (N).Nkind = N_Free_Statement\n         or else NT (N).Nkind = N_Mod_Clause\n         or else NT (N).Nkind = N_Modular_Type_Definition\n@@ -3879,6 +3938,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Accept_Statement\n         or else NT (N).Nkind = N_Block_Statement\n         or else NT (N).Nkind = N_Entry_Body\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Package_Body\n         or else NT (N).Nkind = N_Subprogram_Body\n         or else NT (N).Nkind = N_Task_Body);\n@@ -3944,6 +4004,15 @@ package body Sinfo is\n       Set_Flag11 (N, Val);\n    end Set_Has_Private_View;\n \n+   procedure Set_Has_Self_Reference\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Aggregate\n+        or else NT (N).Nkind = N_Extension_Aggregate);\n+      Set_Flag13 (N, Val);\n+   end Set_Has_Self_Reference;\n+\n    procedure Set_Has_Storage_Size_Pragma\n       (N : Node_Id; Val : Boolean := True) is\n    begin\n@@ -4110,6 +4179,14 @@ package body Sinfo is\n       Set_Flag16 (N, Val);\n    end Set_Is_Controlling_Actual;\n \n+   procedure Set_Is_Entry_Barrier_Function\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Subprogram_Body);\n+      Set_Flag8 (N, Val);\n+   end Set_Is_Entry_Barrier_Function;\n+\n    procedure Set_Is_In_Discriminant_Check\n       (N : Node_Id; Val : Boolean := True) is\n    begin\n@@ -4453,7 +4530,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Enumeration_Representation_Clause\n         or else NT (N).Nkind = N_Pragma\n         or else NT (N).Nkind = N_Record_Representation_Clause);\n-      Set_Node4 (N, Val); -- semantic field, no parent set\n+      Set_Node5 (N, Val); -- semantic field, no parent set\n    end Set_Next_Rep_Item;\n \n    procedure Set_Next_Use_Clause\n@@ -4529,8 +4606,10 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Component_Definition\n         or else NT (N).Nkind = N_Derived_Type_Definition\n         or else NT (N).Nkind = N_Discriminant_Specification\n+        or else NT (N).Nkind = N_Formal_Object_Declaration\n         or else NT (N).Nkind = N_Function_Specification\n         or else NT (N).Nkind = N_Object_Declaration\n+        or else NT (N).Nkind = N_Object_Renaming_Declaration\n         or else NT (N).Nkind = N_Parameter_Specification\n         or else NT (N).Nkind = N_Subtype_Declaration);\n       Set_Flag11 (N, Val);\n@@ -4754,9 +4833,10 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Allocator\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Free_Statement\n         or else NT (N).Nkind = N_Return_Statement);\n-      Set_Node4 (N, Val); -- semantic field, no parent set\n+      Set_Node2 (N, Val); -- semantic field, no parent set\n    end Set_Procedure_To_Call;\n \n    procedure Set_Proper_Body\n@@ -4867,13 +4947,22 @@ package body Sinfo is\n       Set_Node4_With_Parent (N, Val);\n    end Set_Result_Definition;\n \n-   procedure Set_Return_Type\n-      (N : Node_Id; Val : Node_Id) is\n+   procedure Set_Return_Object_Declarations\n+     (N : Node_Id; Val : List_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Extended_Return_Statement);\n+      Set_List3_With_Parent (N, Val);\n+   end Set_Return_Object_Declarations;\n+\n+   procedure Set_Return_Statement_Entity\n+     (N : Node_Id; Val : Node_Id) is\n    begin\n       pragma Assert (False\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Return_Statement);\n-      Set_Node2 (N, Val); -- semantic field, no parent set\n-   end Set_Return_Type;\n+      Set_Node5 (N, Val); -- semantic field, no parent set\n+   end Set_Return_Statement_Entity;\n \n    procedure Set_Reverse_Present\n       (N : Node_Id; Val : Boolean := True) is\n@@ -5008,6 +5097,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Allocator\n+        or else NT (N).Nkind = N_Extended_Return_Statement\n         or else NT (N).Nkind = N_Free_Statement\n         or else NT (N).Nkind = N_Return_Statement);\n       Set_Node1 (N, Val); -- semantic field, no parent set\n@@ -5063,6 +5153,8 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Derived_Type_Definition\n+        or else NT (N).Nkind = N_Formal_Derived_Type_Definition\n+        or else NT (N).Nkind = N_Private_Extension_Declaration\n         or else NT (N).Nkind = N_Record_Definition);\n       Set_Flag7 (N, Val);\n    end Set_Synchronized_Present;\n@@ -5268,7 +5360,6 @@ package body Sinfo is\n \n    function End_Location (N : Node_Id) return Source_Ptr is\n       L : constant Uint := End_Span (N);\n-\n    begin\n       if L = No_Uint then\n          return No_Location;"}, {"sha": "13fe0fae6c18c7b22b72c5de99f4ca5ad26692f5", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1759, "deletions": 102, "changes": 1861, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16", "patch": "@@ -35,8 +35,7 @@\n --  package provides a basic tree structure. Sinfo describes how this structure\n --  is used to represent the syntax of an Ada program.\n \n---  Note: the grammar used here is taken from Version 5.95 of the RM, dated\n---  November 1994. The grammar in the RM is followed very closely in the tree\n+--  The grammar in the RM is followed very closely in the tree\n --  design, and is repeated as part of this source file.\n \n --  The tree contains not only the full syntactic representation of the\n@@ -46,9 +45,8 @@\n --  would normally be regarded as the symbol table information. In addition a\n --  number of the tree nodes contain semantic information.\n \n---  WARNING: There is a C version of this package. Any changes to this source\n---  file must be properly reflected in this C header file sinfo.h which is\n---  created automatically from sinfo.ads using xsinfo.adb.\n+--  WARNING: Several files are automatically generated from this package.\n+--  See below for details.\n \n with Types;  use Types;\n with Uintp;  use Uintp;\n@@ -77,7 +75,7 @@ package Sinfo is\n    --  fields.\n \n    --  In addition, if any of the standard expression fields is changed, then\n-   --  the utiliy program which creates the Treeprs spec (in file treeprs.ads)\n+   --  the utility program which creates the Treeprs spec (in file treeprs.ads)\n    --  must be updated appropriately, since it special cases expression fields.\n \n    --  If a new tree node is added, then the following changes are made\n@@ -104,8 +102,8 @@ package Sinfo is\n    --     utility reads sinfo.ads and sinfo.adb and generates a report to\n    --     standard output.\n \n-   --    Run XSinfo to create a-sinfo.h, the corresponding C header. This\n-   --     utility reads sinfo.ads and generates a-sinfo.h. Note that it does\n+   --    Run XSinfo to create sinfo.h, the corresponding C header. This\n+   --     utility reads sinfo.ads and generates sinfo.h. Note that it does\n    --     not need to read sinfo.adb, since the contents of the body are\n    --     algorithmically determinable from the spec.\n \n@@ -119,6 +117,9 @@ package Sinfo is\n    --     spec of the Nmake package which contains functions for constructing\n    --     nodes.\n \n+   --  All of the above steps except CSinfo are done automatically by the\n+   --  build scripts when you do a full bootstrap.\n+\n    --  Note: sometime we could write a utility that actually generated the body\n    --  of sinfo from the spec instead of simply checking it, since, as noted\n    --  above, the contents of the body can be determined from the spec.\n@@ -539,7 +540,7 @@ package Sinfo is\n    --    unit node at the library level for such a subprogram (see further\n    --    description in spec of Lib package).\n \n-   --  Actual_Designated_Subtype (Node2-Sem)\n+   --  Actual_Designated_Subtype (Node4-Sem)\n    --    Present in N_Free_Statement and N_Explicit_Dereference nodes. If gigi\n    --    needs to known the dynamic constrained subtype of the designated\n    --    object, this attribute is set to that type. This is done for\n@@ -626,10 +627,11 @@ package Sinfo is\n    --    permitted (in Ada 83 or Ada 95).\n \n    --  By_Ref (Flag5-Sem)\n-   --    A flag present in the N_Return_Statement_Node. It is set when the\n-   --    returned expression is already allocated on the secondary stack and\n-   --    thus the result is passed by reference rather than copied another\n-   --    time.\n+   --    A flag present in N_Return_Statement and\n+   --    N_Extended_Return_Statement.\n+   --    It is set when the returned expression is already allocated on the\n+   --    secondary stack and thus the result is passed by reference rather\n+   --    than copied another time.\n \n    --  Check_Address_Alignment (Flag11-Sem)\n    --    A flag present in N_Attribute_Definition clause for a 'Address\n@@ -640,6 +642,11 @@ package Sinfo is\n    --    attribute definition clause is given, rather than testing this at the\n    --    freeze point.\n \n+   --  Comes_From_Extended_Return_Statement (Flag18-Sem)\n+   --    Present in N_Return_Statement nodes.  True if this node was\n+   --    constructed as part of the expansion of an\n+   --    N_Extended_Return_Statement.\n+\n    --  Compile_Time_Known_Aggregate (Flag18-Sem)\n    --    Present in N_Aggregate nodes. Set for aggregates which can be fully\n    --    evaluated at compile time without raising constraint error. Such\n@@ -686,11 +693,11 @@ package Sinfo is\n    --    node for the body itself).\n \n    --  Corresponding_Formal_Spec (Node3-Sem)\n-   --  This field is set in subprogram renaming declarations, where it points\n-   --  to the defining entity for a formal subprogram in the case where the\n-   --  renaming corresponds to a generic formal subprogram association in an\n-   --  instantiation. The field is Empty if the renaming does not correspond\n-   --  to such a formal association.\n+   --    This field is set in subprogram renaming declarations, where it points\n+   --    to the defining entity for a formal subprogram in the case where the\n+   --    renaming corresponds to a generic formal subprogram association in an\n+   --    instantiation. The field is Empty if the renaming does not correspond\n+   --    to such a formal association.\n \n    --  Corresponding_Generic_Association (Node5-Sem)\n    --    This field is defined for object declarations and object renaming\n@@ -838,7 +845,8 @@ package Sinfo is\n \n    --  Do_Tag_Check (Flag13-Sem)\n    --    This flag is set on an N_Assignment_Statement, N_Function_Call,\n-   --    N_Procedure_Call_Statement, N_Type_Conversion or N_Return_Statememt\n+   --    N_Procedure_Call_Statement, N_Type_Conversion,\n+   --    N_Return_Statement, or N_Extended_Return_Statement\n    --    node to indicate that the tag check can be suppressed. It is not\n    --    yet decided how this flag is used (TBD ???).\n \n@@ -899,7 +907,13 @@ package Sinfo is\n    --    which is used during generic processing (see Sem_Ch12 for details).\n    --    Note also that in generic templates, this means that the Entity field\n    --    does not always point to an Entity. Since the back end is expected to\n-   --    ignore generic templates, this is harmless.\n+   --    ignore generic templates, this is harmless. Note that this field also\n+   --    appears in N_Attribute_Definition_Clause nodes. It is used only for\n+   --    stream attributes definition clauses. In this case, it denotes a\n+   --    (possibly dummy) subprogram entity that is conceptually declared at\n+   --    the point of the clause. Thus the visibility of the attribute\n+   --    definition clause (in the sense of 8.3(23) as amended by AI-195) can\n+   --    be checked by testing the visibility of that subprogram.\n \n    --  Entity_Or_Associated_Node (Node4-Sem)\n    --    A synonym for both Entity and Associated_Node. Used by convention in\n@@ -1002,7 +1016,7 @@ package Sinfo is\n    --    ali file.\n \n    --  Generic_Parent (Node5-Sem)\n-   --    Generic_parent is defined on declaration nodes that are instances. The\n+   --    Generic_Parent is defined on declaration nodes that are instances. The\n    --    value of Generic_Parent is the generic entity from which the instance\n    --    is obtained. Generic_Parent is also defined for the renaming\n    --    declarations and object declarations created for the actuals in an\n@@ -1048,6 +1062,12 @@ package Sinfo is\n    --    declarations if the visibility at instantiation is different from the\n    --    visibility at generic definition.\n \n+   --  Has_Self_Reference (Flag13-Sem)\n+   --    Present in N_Aggregate and N_Extension_Aggregate. Indicates that one\n+   --    of the expressions contains an access attribute reference to the\n+   --    enclosing type. Such a self-reference can only appear in default-\n+   --    initialized aggregate for a record type.\n+\n    --  Has_Storage_Size_Pragma (Flag5-Sem)\n    --    A flag present in an N_Task_Definition node to flag the presence of a\n    --    Storage_Size pragma.\n@@ -1107,6 +1127,11 @@ package Sinfo is\n    --    a dispatching call. It is off in all other cases. See Sem_Disp for\n    --    details of its use.\n \n+   --  Is_Entry_Barrier_Function (Flag8-Sem)\n+   --    This flag is set in an N_Subprogram_Body node which is the expansion\n+   --    of an entry barrier from a protected entry body. It is used for the\n+   --    circuitry checking for incorrect use of Current_Task.\n+\n    --  Is_In_Discriminant_Check (Flag11-Sem)\n    --    This flag is present in a selected component, and is used to indicate\n    --    that the reference occurs within a discriminant check. The\n@@ -1270,7 +1295,7 @@ package Sinfo is\n    --    points to the explicit actual parameter itself, not to the\n    --    N_Parameter_Association node (its parent).\n \n-   --  Next_Rep_Item (Node4-Sem)\n+   --  Next_Rep_Item (Node5-Sem)\n    --    Present in pragma nodes and attribute definition nodes. Used to link\n    --    representation items that apply to an entity. See description of\n    --    First_Rep_Item field in Einfo for full details.\n@@ -1389,11 +1414,12 @@ package Sinfo is\n    --    legality or semantics of program, only on the displayed output. This\n    --    is used to clarify output from the packed array cases.\n \n-   --  Procedure_To_Call (Node4-Sem)\n-   --    Present in N_Allocator, N_Free_Statement, and N_Return_Statement\n-   --    nodes. References the entity for the declaration of the procedure to\n-   --    be called to accomplish the required operation (i.e. for the Allocate\n-   --    procedure in the case of N_Allocator and N_Return_Statement (for\n+   --  Procedure_To_Call (Node2-Sem)\n+   --    Present in N_Allocator, N_Free_Statement, N_Return_Statement,\n+   --    and N_Extended_Return_Statement nodes. References the entity for the\n+   --    declaration of the procedure to be called to accomplish the required\n+   --    operation (i.e. for the Allocate procedure in the case of N_Allocator\n+   --    and N_Return_Statement and N_Extended_Return_Statement (for\n    --    allocating the return value), and for the Deallocate procedure in the\n    --    case of N_Free_Statement.\n \n@@ -1415,10 +1441,16 @@ package Sinfo is\n    --    to indicate that a use is redundant (and therefore need not be undone\n    --    on scope exit).\n \n-   --  Return_Type (Node2-Sem)\n-   --    Present in N_Return_Statement node. For a procedure, this is set to\n-   --    Standard_Void_Type. For a function it references the entity for the\n-   --    returned type.\n+   --  Return_Statement_Entity (Node5-Sem)\n+   --    Present in N_Return_Statement and N_Extended_Return_Statement.\n+   --    Points to an E_Return_Statement representing the return statement.\n+\n+   --  Return_Object_Declarations (List3)\n+   --    Present in N_Extended_Return_Statement.\n+   --    Points to a list initially containing a single\n+   --    N_Object_Declaration representing the return object.\n+   --    We use a list (instead of just a pointer to the object decl)\n+   --    because Analyze wants to insert extra actions on this list.\n \n    --  Rounded_Result (Flag18-Sem)\n    --    Present in N_Type_Conversion, N_Op_Divide and N_Op_Multiply nodes.\n@@ -1460,7 +1492,8 @@ package Sinfo is\n    --    Static_Processing_OK flag set.\n \n    --  Storage_Pool (Node1-Sem)\n-   --    Present in N_Allocator, N_Free_Statement and N_Return_Statement nodes.\n+   --    Present in N_Allocator, N_Free_Statement, N_Return_Statement,\n+   --    and N_Extended_Return_Statement nodes.\n    --    References the entity for the storage pool to be used for the allocate\n    --    or free call or for the allocation of the returned value from a\n    --    function. Empty indicates that the global default default pool is to\n@@ -1769,7 +1802,7 @@ package Sinfo is\n       --  Chars (Name1) identifier name from pragma identifier\n       --  Pragma_Argument_Associations (List2) (set to No_List if none)\n       --  Debug_Statement (Node3) (set to Empty if not Debug, Assert)\n-      --  Next_Rep_Item (Node4-Sem)\n+      --  Next_Rep_Item (Node5-Sem)\n \n       --  Note: we should have a section on what pragmas are passed on to\n       --  the back end to be processed. This section should note that pragma\n@@ -2060,8 +2093,8 @@ package Sinfo is\n       --    [abstract] [limited] new [NULL_EXCLUSION] parent_SUBTYPE_INDICATION\n       --    [[and INTERFACE_LIST] RECORD_EXTENSION_PART]\n \n-   --  Note: ABSTRACT, LIMITED and record extension part are not permitted\n-   --  in Ada 83 mode\n+      --  Note: ABSTRACT, LIMITED and record extension part are not permitted\n+      --  in Ada 83 mode\n \n       --  Note: a record extension part is required if ABSTRACT is present\n \n@@ -2078,9 +2111,9 @@ package Sinfo is\n       --  Interface_List (List2) (set to No_List if none)\n       --  Interface_Present (Flag16) set in abstract interfaces\n \n-   --  Note: Task_Present, Protected_Present, Synchronized_Present,\n-   --        Interface_List, and Interface_Present are used for abstract\n-   --        interfaces (see comments for INTERFACE_TYPE_DEFINITION).\n+      --  Note: Task_Present, Protected_Present, Synchronized_Present,\n+      --        Interface_List, and Interface_Present are used for abstract\n+      --        interfaces (see comments for INTERFACE_TYPE_DEFINITION).\n \n       ---------------------------\n       -- 3.5  Range Constraint --\n@@ -2847,7 +2880,7 @@ package Sinfo is\n       --  N_Explicit_Dereference\n       --  Sloc points to ALL\n       --  Prefix (Node3)\n-      --  Actual_Designated_Subtype (Node2-Sem)\n+      --  Actual_Designated_Subtype (Node4-Sem)\n       --  plus fields for expression\n \n       -------------------------------\n@@ -3057,6 +3090,7 @@ package Sinfo is\n       --  Static_Processing_OK (Flag4-Sem)\n       --  Compile_Time_Known_Aggregate (Flag18-Sem)\n       --  Expansion_Delayed (Flag11-Sem)\n+      --  Has_Self_Reference (Flag13-Sem)\n       --  plus fields for expression\n \n       --  Note: this structure is used for both record and array aggregates\n@@ -3067,12 +3101,15 @@ package Sinfo is\n       --  syntax. In particular, for a record aggregate, the expressions\n       --  field will be set if there are positional associations.\n \n+      --  Note: N_Aggregate is not used for all aggregates; in particular,\n+      --  there is a separate node kind for extension aggregates.\n+\n       --  Note: gigi/gcc can handle array aggregates correctly providing that\n       --  they are entirely positional, and the array subtype involved has a\n       --  known at compile time length and is not bit packed, or a convention\n       --  Fortran array with more than one dimension. If these conditions\n       --  are not met, then the front end must translate the aggregate into\n-      --  an appropriate set  of assignments into a temporary.\n+      --  an appropriate set of assignments into a temporary.\n \n       --  Note: for the record aggregate case, gigi/gcc can handle all cases\n       --  of record aggregates, including those for packed, and rep-claused\n@@ -3143,6 +3180,7 @@ package Sinfo is\n       --  Component_Associations (List2) (set to No_List if none)\n       --  Null_Record_Present (Flag17)\n       --  Expansion_Delayed (Flag11-Sem)\n+      --  Has_Self_Reference (Flag13-Sem)\n       --  plus fields for expression\n \n       --------------------------\n@@ -3563,7 +3601,7 @@ package Sinfo is\n       --  Expression (Node3) subtype indication or qualified expression\n       --  Null_Exclusion_Present (Flag11)\n       --  Storage_Pool (Node1-Sem)\n-      --  Procedure_To_Call (Node4-Sem)\n+      --  Procedure_To_Call (Node2-Sem)\n       --  No_Initialization (Flag13-Sem)\n       --  Do_Storage_Check (Flag17-Sem)\n       --  plus fields for expression\n@@ -3598,22 +3636,23 @@ package Sinfo is\n       -- 5.1  Simple Statement --\n       ---------------------------\n \n-      --  SIMPLE_STATEMENT ::=      NULL_STATEMENT\n-      --  | ASSIGNMENT_STATEMENT  | EXIT_STATEMENT\n-      --  | GOTO_STATEMENT        | PROCEDURE_CALL_STATEMENT\n-      --  | RETURN_STATEMENT      | ENTRY_CALL_STATEMENT\n-      --  | REQUEUE_STATEMENT     | DELAY_STATEMENT\n-      --  | ABORT_STATEMENT       | RAISE_STATEMENT\n+      --  SIMPLE_STATEMENT ::=        NULL_STATEMENT\n+      --  | ASSIGNMENT_STATEMENT    | EXIT_STATEMENT\n+      --  | GOTO_STATEMENT          | PROCEDURE_CALL_STATEMENT\n+      --  | SIMPLE_RETURN_STATEMENT | ENTRY_CALL_STATEMENT\n+      --  | REQUEUE_STATEMENT       | DELAY_STATEMENT\n+      --  | ABORT_STATEMENT         | RAISE_STATEMENT\n       --  | CODE_STATEMENT\n \n       -----------------------------\n       -- 5.1  Compound Statement --\n       -----------------------------\n \n       --  COMPOUND_STATEMENT ::=\n-      --    IF_STATEMENT         | CASE_STATEMENT\n-      --  | LOOP_STATEMENT       | BLOCK_STATEMENT\n-      --  | ACCEPT_STATEMENT     | SELECT_STATEMENT\n+      --    IF_STATEMENT              | CASE_STATEMENT\n+      --  | LOOP_STATEMENT            | BLOCK_STATEMENT\n+      --  | EXTENDED_RETURN_STATEMENT\n+      --  | ACCEPT_STATEMENT          | SELECT_STATEMENT\n \n       -------------------------\n       -- 5.1  Null Statement --\n@@ -4129,6 +4168,7 @@ package Sinfo is\n       --  Do_Storage_Check (Flag17-Sem)\n       --  Has_Priority_Pragma (Flag6-Sem)\n       --  Is_Protected_Subprogram_Body (Flag7-Sem)\n+      --  Is_Entry_Barrier_Function (Flag8-Sem)\n       --  Is_Task_Master (Flag5-Sem)\n       --  Was_Originally_Stub (Flag13-Sem)\n \n@@ -4210,8 +4250,7 @@ package Sinfo is\n \n       --  N_Parameter_Association\n       --  Sloc points to formal parameter\n-      --  Selector_Name (Node2) (always non-Empty, since this node is\n-      --   only used if a formal parameter selector name is present)\n+      --  Selector_Name (Node2) (always non-Empty)\n       --  Explicit_Actual_Parameter (Node3)\n       --  Next_Named_Actual (Node4-Sem)\n \n@@ -4225,19 +4264,65 @@ package Sinfo is\n       -- 6.5  Return Statement --\n       ---------------------------\n \n-      --  RETURN_STATEMENT ::= return [EXPRESSION];\n+      --  RETURN_STATEMENT ::= return [EXPRESSION]; -- Ada 95\n+\n+      --  In Ada 2005, we have:\n+\n+      --  SIMPLE_RETURN_STATEMENT ::= return [EXPRESSION];\n+\n+      --  EXTENDED_RETURN_STATEMENT ::=\n+      --    return DEFINING_IDENTIFIER : [aliased] RETURN_SUBTYPE_INDICATION\n+      --                                           [:= EXPRESSION] [do\n+      --      HANDLED_SEQUENCE_OF_STATEMENTS\n+      --    end return];\n+\n+      --  RETURN_SUBTYPE_INDICATION ::= SUBTYPE_INDICATION | ACCESS_DEFINITION\n+\n+      --  So in Ada 2005, RETURN_STATEMENT is no longer a nonterminal\n \n       --  N_Return_Statement\n       --  Sloc points to RETURN\n+      --  Return_Statement_Entity (Node5-Sem)\n       --  Expression (Node3) (set to Empty if no expression present)\n       --  Storage_Pool (Node1-Sem)\n-      --  Procedure_To_Call (Node4-Sem)\n+      --  Procedure_To_Call (Node2-Sem)\n+      --  Do_Tag_Check (Flag13-Sem)\n+      --  By_Ref (Flag5-Sem)\n+      --  Comes_From_Extended_Return_Statement (Flag18-Sem)\n+\n+      --  ???N_Return_Statement represents a simple_return_statement,\n+      --  and should be renamed to N_Simple_Return_Statement.\n+\n+      --  Note: Return_Statement_Entity points to an E_Return_Statement\n+\n+      --  If a range check is required, then Do_Range_Check is set on the\n+      --  Expression. The check is against the return subtype of the function.\n+\n+      --  N_Extended_Return_Statement\n+      --  Sloc points to RETURN\n+      --  Return_Statement_Entity (Node5-Sem)\n+      --  Return_Object_Declarations (List3)\n+      --  Handled_Statement_Sequence (Node4) (set to Empty if not present)\n+      --  Storage_Pool (Node1-Sem)\n+      --  Procedure_To_Call (Node2-Sem)\n       --  Do_Tag_Check (Flag13-Sem)\n-      --  Return_Type (Node2-Sem)\n       --  By_Ref (Flag5-Sem)\n \n-      --  Note: if a range check is required, then Do_Range_Check is set\n-      --  on the Expression. The range check is against Return_Type.\n+      --  Note: Return_Statement_Entity points to an E_Return_Statement.\n+      --  Note that Return_Object_Declarations is a list containing the\n+      --  N_Object_Declaration -- see comment on this field above.\n+      --  The declared object will have Is_Return_Object = True.\n+      --  There is no such syntactic category as return_object_declaration\n+      --  in the RM. Return_Object_Declarations represents this portion of\n+      --  the syntax for EXTENDED_RETURN_STATEMENT:\n+      --      DEFINING_IDENTIFIER : [aliased] RETURN_SUBTYPE_INDICATION\n+      --                                      [:= EXPRESSION]\n+\n+      --  There are two entities associated with an extended_return_statement:\n+      --  the Return_Statement_Entity represents the statement itself, and the\n+      --  Defining_Identifier of the Object_Declaration in\n+      --  Return_Object_Declarations represents the object being\n+      --  returned. N_Return_Statement has only the former.\n \n       ------------------------------\n       -- 7.1  Package Declaration --\n@@ -4327,11 +4412,12 @@ package Sinfo is\n \n       --  PRIVATE_EXTENSION_DECLARATION ::=\n       --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART] is\n-      --      [abstract] [limited] new ancestor_SUBTYPE_INDICATION\n-      --      [and INTERFACE_LIST] with private;\n+      --      [abstract] [limited | synchronized]\n+      --        new ancestor_SUBTYPE_INDICATION [and INTERFACE_LIST]\n+      --           with private;\n \n-   --  Note: LIMITED, and private extension declarations are not allowed\n-   --        in Ada 83 mode.\n+      --  Note: LIMITED, and private extension declarations are not allowed\n+      --        in Ada 83 mode.\n \n       --  N_Private_Extension_Declaration\n       --  Sloc points to TYPE\n@@ -4341,6 +4427,7 @@ package Sinfo is\n       --  Unknown_Discriminants_Present (Flag13) set if (<>) discriminant\n       --  Abstract_Present (Flag4)\n       --  Limited_Present (Flag17)\n+      --  Synchronized_Present (Flag7)\n       --  Subtype_Indication (Node5)\n       --  Interface_List (List2) (set to No_List if none)\n \n@@ -4392,8 +4479,10 @@ package Sinfo is\n       --------------------------------------\n \n       --  OBJECT_RENAMING_DECLARATION ::=\n-      --    DEFINING_IDENTIFIER : SUBTYPE_MARK renames object_NAME;\n-      --  | DEFINING_IDENTIFIER : ACCESS_DEFINITION renames object_NAME;\n+      --    DEFINING_IDENTIFIER :\n+      --      [NULL_EXCLUSION] SUBTYPE_MARK renames object_NAME;\n+      --  | DEFINING_IDENTIFIER :\n+      --      ACCESS_DEFINITION renames object_NAME;\n \n       --  Note: Access_Definition is an optional field that gives support to\n       --  Ada 2005 (AI-230). The parser generates nodes that have either the\n@@ -4402,6 +4491,7 @@ package Sinfo is\n       --  N_Object_Renaming_Declaration\n       --  Sloc points to first identifier\n       --  Defining_Identifier (Node1)\n+      --  Null_Exclusion_Present (Flag11) (set to False if not present)\n       --  Subtype_Mark (Node4) (set to Empty if not present)\n       --  Access_Definition (Node3) (set to Empty if not present)\n       --  Name (Node2)\n@@ -5589,18 +5679,23 @@ package Sinfo is\n \n       --  GENERIC_ASSOCIATION ::=\n       --    [generic_formal_parameter_SELECTOR_NAME =>]\n-      --      EXPLICIT_GENERIC_ACTUAL_PARAMETER\n \n       --  Note: unlike the procedure call case, a generic association node\n       --  is generated for every association, even if no formal is present.\n       --  In this case the parser will leave the Selector_Name field set\n       --  to Empty, to be filled in later by the semantic pass.\n \n+      --  In Ada 2005, a formal may be associated with a box, if the\n+      --  association is part of the list of actuals for a formal package.\n+      --  If the association is given by  OTHERS => <>, the association is\n+      --  an N_Others_Choice.\n+\n       --  N_Generic_Association\n       --  Sloc points to first token of generic association\n       --  Selector_Name (Node2) (set to Empty if no formal\n       --   parameter selector name)\n-      --  Explicit_Generic_Actual_Parameter (Node1)\n+      --  Explicit_Generic_Actual_Parameter (Node1) (Empty if box present)\n+      --  Box_Present (Flag15) (for formal_package associations with a box)\n \n       ---------------------------------------------\n       -- 12.3  Explicit Generic Actual Parameter --\n@@ -5616,7 +5711,9 @@ package Sinfo is\n \n       --  FORMAL_OBJECT_DECLARATION ::=\n       --    DEFINING_IDENTIFIER_LIST :\n-      --      MODE SUBTYPE_MARK [:= DEFAULT_EXPRESSION];\n+      --      MODE [NULL_EXCLUSION] SUBTYPE_MARK [:= DEFAULT_EXPRESSION];\n+      --  | DEFINING_IDENTIFIER_LIST :\n+      --      MODE ACCESS_DEFINITION [:= DEFAULT_EXPRESSION];\n \n       --  Although the syntax allows multiple identifiers in the list, the\n       --  semantics is as though successive declarations were given with\n@@ -5631,8 +5728,10 @@ package Sinfo is\n       --  Defining_Identifier (Node1)\n       --  In_Present (Flag15)\n       --  Out_Present (Flag17)\n-      --  Subtype_Mark (Node4)\n-      --  Expression (Node3) (set to Empty if no default expression)\n+      --  Null_Exclusion_Present (Flag11) (set to False if not present)\n+      --  Subtype_Mark (Node4) (set to Empty if not present)\n+      --  Access_Definition (Node3) (set to Empty if not present)\n+      --  Default_Expression (Node5) (set to Empty if no default expression)\n       --  More_Ids (Flag5) (set to False if no more identifiers in list)\n       --  Prev_Ids (Flag6) (set to False if no previous identifiers in list)\n \n@@ -5689,7 +5788,7 @@ package Sinfo is\n       --------------------------------------------\n \n       --  FORMAL_DERIVED_TYPE_DEFINITION ::=\n-      --    [abstract] [limited]\n+      --    [abstract] [limited | synchronized]\n       --       new SUBTYPE_MARK [[and INTERFACE_LIST] with private]\n       --  Note: this construct is not allowed in Ada 83 mode\n \n@@ -5699,6 +5798,7 @@ package Sinfo is\n       --  Private_Present (Flag15)\n       --  Abstract_Present (Flag4)\n       --  Limited_Present (Flag17)\n+      --  Synchronized_Present (Flag7)\n       --  Interface_List (List2) (set to No_List if none)\n \n       ---------------------------------------------\n@@ -5857,11 +5957,21 @@ package Sinfo is\n       --------------------------------------\n \n       --  FORMAL_PACKAGE_ACTUAL_PART ::=\n-      --    (<>) | [GENERIC_ACTUAL_PART]\n+      --    ([OTHERS] => <>)\n+      --    | [GENERIC_ACTUAL_PART]\n+      --    (FORMAL_PACKAGE_ASSOCIATION {. FORMAL_PACKAGE_ASSOCIATION}\n+\n+      --  FORMAL_PACKAGE_ASSOCIATION ::=\n+      --   GENERIC_ASSOCIATION\n+      --  | GENERIC_FORMAL_PARAMETER_SELECTOR_NAME => <>\n+\n+      --  There is no explicit node in the tree for a formal package actual\n+      --  part. Instead the information appears in the parent node (i.e. the\n+      --  formal package declaration node itself).\n \n-      --  There is no explicit node in the tree for a formal package\n-      --  actual part. Instead the information appears in the parent node\n-      --  (i.e. the formal package declaration node itself).\n+      --  There is no explicit node for a formal package association. All of\n+      --  them are represented either by a generic association, possibly with\n+      --  Box_Present, or by an N_Others_Choice.\n \n       ---------------------------------\n       -- 13.1  Representation clause --\n@@ -5924,7 +6034,8 @@ package Sinfo is\n       --  Name (Node2) the local name\n       --  Chars (Name1) the identifier name from the attribute designator\n       --  Expression (Node3) the expression or name\n-      --  Next_Rep_Item (Node4-Sem)\n+      --  Entity (Node4-Sem)\n+      --  Next_Rep_Item (Node5-Sem)\n       --  From_At_Mod (Flag4-Sem)\n       --  Check_Address_Alignment (Flag11-Sem)\n \n@@ -5941,7 +6052,7 @@ package Sinfo is\n       --  Sloc points to FOR\n       --  Identifier (Node1) direct name\n       --  Array_Aggregate (Node3)\n-      --  Next_Rep_Item (Node4-Sem)\n+      --  Next_Rep_Item (Node5-Sem)\n \n       ---------------------------------\n       -- 13.4  Enumeration aggregate --\n@@ -5969,7 +6080,7 @@ package Sinfo is\n       --  Identifier (Node1) direct name\n       --  Mod_Clause (Node2) (set to Empty if no mod clause present)\n       --  Component_Clauses (List3)\n-      --  Next_Rep_Item (Node4-Sem)\n+      --  Next_Rep_Item (Node5-Sem)\n \n       ------------------------------\n       -- 13.5.1  Component clause --\n@@ -6014,15 +6125,11 @@ package Sinfo is\n \n       --    Asm_Insn'(Asm (...));\n \n-      --      or\n-\n-      --    Asm_Insn'(Asm_Volatile (...))\n-\n-      --  See package System.Machine_Code in file s-maccod.ads for details\n-      --  on the allowed parameters to Asm[_Volatile]. There are two ways\n-      --  this node can arise, as a code statement, in which case the\n-      --  expression is the qualified expression, or as a result of the\n-      --  expansion of an intrinsic call to the Asm or Asm_Input procedure.\n+      --  See package System.Machine_Code in file s-maccod.ads for details on\n+      --  the allowed parameters to Asm. There are two ways this node can\n+      --  arise, as a code statement, in which case the expression is the\n+      --  qualified expression, or as a result of the expansion of an intrinsic\n+      --  call to the Asm or Asm_Input procedure.\n \n       --  N_Code_Statement\n       --  Sloc points to first token of the expression\n@@ -6241,8 +6348,8 @@ package Sinfo is\n       --  Sloc is copied from the unchecked deallocation call\n       --  Expression (Node3) argument to unchecked deallocation call\n       --  Storage_Pool (Node1-Sem)\n-      --  Procedure_To_Call (Node4-Sem)\n-      --  Actual_Designated_Subtype (Node2-Sem)\n+      --  Procedure_To_Call (Node2-Sem)\n+      --  Actual_Designated_Subtype (Node4-Sem)\n \n       --  Note: in the case where a debug source file is generated, the Sloc\n       --  for this node points to the FREE keyword in the Sprint file output.\n@@ -6640,7 +6747,7 @@ package Sinfo is\n       N_Op_Subtract,\n \n       --  N_Binary_Op, N_Op, N_Subexpr, N_Has_Treat_Fixed_As_Integer\n-      --  N_Has_Etype, N_Has_Chars, N_Has_Entity\n+      --  N_Has_Etype, N_Has_Chars, N_Has_Entity, N_Multiplying_Operator\n \n       N_Op_Divide,\n       N_Op_Mod,\n@@ -6689,16 +6796,21 @@ package Sinfo is\n \n       N_Attribute_Reference,\n \n+      --  N_Subexpr, N_Has_Etype, N_Membership_Test\n+\n+      N_In,\n+      N_Not_In,\n+\n       --  N_Subexpr, N_Has_Etype\n \n       N_And_Then,\n       N_Conditional_Expression,\n       N_Explicit_Dereference,\n       N_Function_Call,\n-      N_In,\n+\n       N_Indexed_Component,\n       N_Integer_Literal,\n-      N_Not_In,\n+\n       N_Null,\n       N_Or_Else,\n       N_Procedure_Call_Statement,\n@@ -6843,6 +6955,7 @@ package Sinfo is\n       N_Raise_Statement,\n       N_Requeue_Statement,\n       N_Return_Statement,\n+      N_Extended_Return_Statement,\n       N_Selective_Accept,\n       N_Timed_Entry_Call,\n \n@@ -7006,6 +7119,10 @@ package Sinfo is\n       N_Op_Divide ..\n       N_Op_Rem;\n \n+   subtype N_Multiplying_Operator is Node_Kind range\n+      N_Op_Divide ..\n+      N_Op_Rem;\n+\n    subtype N_Later_Decl_Item is Node_Kind range\n      N_Task_Type_Declaration ..\n      N_Generic_Subprogram_Declaration;\n@@ -7018,6 +7135,10 @@ package Sinfo is\n    --  N_Protected_Body, which is a bit peculiar, but harmless since\n    --  this cannot appear in Ada 83 mode anyway.\n \n+   subtype N_Membership_Test is Node_Kind range\n+      N_In ..\n+      N_Not_In;\n+\n    subtype N_Op is Node_Kind range\n      N_Op_Add ..\n      N_Op_Plus;\n@@ -7135,7 +7256,7 @@ package Sinfo is\n      (N : Node_Id) return Boolean;    -- Flag4\n \n    function Actual_Designated_Subtype\n-     (N : Node_Id) return Node_Id;    -- Node2\n+     (N : Node_Id) return Node_Id;    -- Node4\n \n    function Aggregate_Bounds\n      (N : Node_Id) return Node_Id;    -- Node3\n@@ -7206,6 +7327,9 @@ package Sinfo is\n    function Choices\n      (N : Node_Id) return List_Id;    -- List1\n \n+   function Comes_From_Extended_Return_Statement\n+     (N : Node_Id) return Boolean;    -- Flag18\n+\n    function Compile_Time_Known_Aggregate\n      (N : Node_Id) return Boolean;    -- Flag18\n \n@@ -7509,6 +7633,9 @@ package Sinfo is\n    function Has_Private_View\n      (N : Node_Id) return Boolean;    -- Flag11\n \n+   function Has_Self_Reference\n+     (N : Node_Id) return Boolean;    -- Flag13\n+\n    function Has_Storage_Size_Pragma\n      (N : Node_Id) return Boolean;    -- Flag5\n \n@@ -7563,6 +7690,9 @@ package Sinfo is\n    function Is_Controlling_Actual\n      (N : Node_Id) return Boolean;    -- Flag16\n \n+   function Is_Entry_Barrier_Function\n+     (N : Node_Id) return Boolean;    -- Flag8\n+\n    function Is_In_Discriminant_Check\n      (N : Node_Id) return Boolean;    -- Flag11\n \n@@ -7666,7 +7796,7 @@ package Sinfo is\n      (N : Node_Id) return Node_Id;    -- Node4\n \n    function Next_Rep_Item\n-     (N : Node_Id) return Node_Id;    -- Node4\n+     (N : Node_Id) return Node_Id;    -- Node5\n \n    function Next_Use_Clause\n      (N : Node_Id) return Node_Id;    -- Node3\n@@ -7756,7 +7886,7 @@ package Sinfo is\n      (N : Node_Id) return Boolean;    -- Flag15\n \n    function Procedure_To_Call\n-     (N : Node_Id) return Node_Id;    -- Node4\n+     (N : Node_Id) return Node_Id;    -- Node2\n \n    function Proper_Body\n      (N : Node_Id) return Node_Id;    -- Node1\n@@ -7794,8 +7924,11 @@ package Sinfo is\n    function Result_Definition\n      (N : Node_Id) return Node_Id;    -- Node4\n \n-   function Return_Type\n-     (N : Node_Id) return Node_Id;    -- Node2\n+   function Return_Object_Declarations\n+     (N : Node_Id) return List_Id;    -- List3\n+\n+   function Return_Statement_Entity\n+     (N : Node_Id) return Node_Id;    -- Node5\n \n    function Reverse_Present\n      (N : Node_Id) return Boolean;    -- Flag15\n@@ -7957,7 +8090,7 @@ package Sinfo is\n      (N : Node_Id; Val : Boolean := True);    -- Flag4\n \n    procedure Set_Actual_Designated_Subtype\n-     (N : Node_Id; Val : Node_Id);            -- Node2\n+     (N : Node_Id; Val : Node_Id);            -- Node4\n \n    procedure Set_Aggregate_Bounds\n      (N : Node_Id; Val : Node_Id);            -- Node3\n@@ -8028,6 +8161,9 @@ package Sinfo is\n    procedure Set_Choices\n      (N : Node_Id; Val : List_Id);            -- List1\n \n+   procedure Set_Comes_From_Extended_Return_Statement\n+     (N : Node_Id; Val : Boolean := True);    -- Flag18\n+\n    procedure Set_Compile_Time_Known_Aggregate\n      (N : Node_Id; Val : Boolean := True);    -- Flag18\n \n@@ -8328,6 +8464,9 @@ package Sinfo is\n    procedure Set_Has_Private_View\n      (N : Node_Id; Val : Boolean := True);    -- Flag11\n \n+   procedure Set_Has_Self_Reference\n+     (N : Node_Id; Val : Boolean := True);    -- Flag13\n+\n    procedure Set_Has_Storage_Size_Pragma\n      (N : Node_Id; Val : Boolean := True);    -- Flag5\n \n@@ -8382,6 +8521,9 @@ package Sinfo is\n    procedure Set_Is_Controlling_Actual\n      (N : Node_Id; Val : Boolean := True);    -- Flag16\n \n+   procedure Set_Is_Entry_Barrier_Function\n+     (N : Node_Id; Val : Boolean := True);    -- Flag8\n+\n    procedure Set_Is_In_Discriminant_Check\n      (N : Node_Id; Val : Boolean := True);    -- Flag11\n \n@@ -8485,7 +8627,7 @@ package Sinfo is\n      (N : Node_Id; Val : Node_Id);            -- Node4\n \n    procedure Set_Next_Rep_Item\n-     (N : Node_Id; Val : Node_Id);            -- Node4\n+     (N : Node_Id; Val : Node_Id);            -- Node5\n \n    procedure Set_Next_Use_Clause\n      (N : Node_Id; Val : Node_Id);            -- Node3\n@@ -8575,7 +8717,7 @@ package Sinfo is\n      (N : Node_Id; Val : Boolean := True);    -- Flag15\n \n    procedure Set_Procedure_To_Call\n-     (N : Node_Id; Val : Node_Id);            -- Node4\n+     (N : Node_Id; Val : Node_Id);            -- Node2\n \n    procedure Set_Proper_Body\n      (N : Node_Id; Val : Node_Id);            -- Node1\n@@ -8613,8 +8755,11 @@ package Sinfo is\n    procedure Set_Result_Definition\n      (N : Node_Id; Val : Node_Id);            -- Node4\n \n-   procedure Set_Return_Type\n-     (N : Node_Id; Val : Node_Id);            -- Node2\n+   procedure Set_Return_Object_Declarations\n+     (N : Node_Id; Val : List_Id);            -- List3\n+\n+   procedure Set_Return_Statement_Entity\n+     (N : Node_Id; Val : Node_Id);            -- Node5\n \n    procedure Set_Reverse_Present\n      (N : Node_Id; Val : Boolean := True);    -- Flag15\n@@ -8753,6 +8898,1511 @@ package Sinfo is\n    --  other words, End_Span is set to the difference between S and\n    --  Sloc (N), the starting location.\n \n+   -----------------------------\n+   -- Syntactic Parent Tables --\n+   -----------------------------\n+\n+   --  These tables show for each node, and for each of the five fields,\n+   --  whether the corresponding field is syntactic (True) or semantic (False).\n+   --  Unused entries are also set to False.\n+\n+   subtype Field_Num is Natural range 1 .. 5;\n+\n+   Is_Syntactic_Field : constant array (Node_Kind, Field_Num) of Boolean := (\n+\n+   --  Following entries can be built automatically from the sinfo sources\n+   --  using the makeisf utility (currently this program is in spitbol).\n+\n+     N_Identifier =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => False,   --  Original_Discriminant (Node2-Sem)\n+        3 => False,   --  unused\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Integer_Literal =>\n+       (1 => False,   --  unused\n+        2 => False,   --  Original_Entity (Node2-Sem)\n+        3 => True,    --  Intval (Uint3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Real_Literal =>\n+       (1 => False,   --  unused\n+        2 => False,   --  Original_Entity (Node2-Sem)\n+        3 => True,    --  Realval (Ureal3)\n+        4 => False,   --  Corresponding_Integer_Value (Uint4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Character_Literal =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Char_Literal_Value (Uint2)\n+        3 => False,   --  unused\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_String_Literal =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Strval (Str3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Pragma =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Pragma_Argument_Associations (List2)\n+        3 => True,    --  Debug_Statement (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Next_Rep_Item (Node5-Sem)\n+\n+     N_Pragma_Argument_Association =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Defining_Identifier =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => False,   --  Next_Entity (Node2-Sem)\n+        3 => False,   --  Scope (Node3-Sem)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Full_Type_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Type_Definition (Node3)\n+        4 => True,    --  Discriminant_Specifications (List4)\n+        5 => False),  --  unused\n+\n+     N_Subtype_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  Generic_Parent_Type (Node4-Sem)\n+        5 => True),   --  Subtype_Indication (Node5)\n+\n+     N_Subtype_Indication =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Constraint (Node3)\n+        4 => True,    --  Subtype_Mark (Node4)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Object_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  Handler_List_Entry (Node2-Sem)\n+        3 => True,    --  Expression (Node3)\n+        4 => True,    --  Object_Definition (Node4)\n+        5 => False),  --  Corresponding_Generic_Association (Node5-Sem)\n+\n+     N_Number_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Derived_Type_Definition =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Interface_List (List2)\n+        3 => True,    --  Record_Extension_Part (Node3)\n+        4 => False,   --  unused\n+        5 => True),   --  Subtype_Indication (Node5)\n+\n+     N_Range_Constraint =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => True,    --  Range_Expression (Node4)\n+        5 => False),  --  unused\n+\n+     N_Range =>\n+       (1 => True,    --  Low_Bound (Node1)\n+        2 => True,    --  High_Bound (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Enumeration_Type_Definition =>\n+       (1 => True,    --  Literals (List1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => True,    --  End_Label (Node4)\n+        5 => False),  --  unused\n+\n+     N_Defining_Character_Literal =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => False,   --  Next_Entity (Node2-Sem)\n+        3 => False,   --  Scope (Node3-Sem)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Signed_Integer_Type_Definition =>\n+       (1 => True,    --  Low_Bound (Node1)\n+        2 => True,    --  High_Bound (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Modular_Type_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Floating_Point_Definition =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Digits_Expression (Node2)\n+        3 => False,   --  unused\n+        4 => True,    --  Real_Range_Specification (Node4)\n+        5 => False),  --  unused\n+\n+     N_Real_Range_Specification =>\n+       (1 => True,    --  Low_Bound (Node1)\n+        2 => True,    --  High_Bound (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Ordinary_Fixed_Point_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Delta_Expression (Node3)\n+        4 => True,    --  Real_Range_Specification (Node4)\n+        5 => False),  --  unused\n+\n+     N_Decimal_Fixed_Point_Definition =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Digits_Expression (Node2)\n+        3 => True,    --  Delta_Expression (Node3)\n+        4 => True,    --  Real_Range_Specification (Node4)\n+        5 => False),  --  unused\n+\n+     N_Digits_Constraint =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Digits_Expression (Node2)\n+        3 => False,   --  unused\n+        4 => True,    --  Range_Constraint (Node4)\n+        5 => False),  --  unused\n+\n+     N_Unconstrained_Array_Definition =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Subtype_Marks (List2)\n+        3 => False,   --  unused\n+        4 => True,    --  Component_Definition (Node4)\n+        5 => False),  --  unused\n+\n+     N_Constrained_Array_Definition =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Discrete_Subtype_Definitions (List2)\n+        3 => False,   --  unused\n+        4 => True,    --  Component_Definition (Node4)\n+        5 => False),  --  unused\n+\n+     N_Component_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Access_Definition (Node3)\n+        4 => False,   --  unused\n+        5 => True),   --  Subtype_Indication (Node5)\n+\n+     N_Discriminant_Specification =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => True),   --  Discriminant_Type (Node5)\n+\n+     N_Index_Or_Discriminant_Constraint =>\n+       (1 => True,    --  Constraints (List1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Discriminant_Association =>\n+       (1 => True,    --  Selector_Names (List1)\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Record_Definition =>\n+       (1 => True,    --  Component_List (Node1)\n+        2 => True,    --  Interface_List (List2)\n+        3 => False,   --  unused\n+        4 => True,    --  End_Label (Node4)\n+        5 => False),  --  unused\n+\n+     N_Component_List =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Component_Items (List3)\n+        4 => True,    --  Variant_Part (Node4)\n+        5 => False),  --  unused\n+\n+     N_Component_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => True,    --  Component_Definition (Node4)\n+        5 => False),  --  unused\n+\n+     N_Variant_Part =>\n+       (1 => True,    --  Variants (List1)\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Variant =>\n+       (1 => True,    --  Component_List (Node1)\n+        2 => False,   --  Enclosing_Variant (Node2-Sem)\n+        3 => False,   --  Present_Expr (Uint3-Sem)\n+        4 => True,    --  Discrete_Choices (List4)\n+        5 => False),  --  Dcheck_Function (Node5-Sem)\n+\n+     N_Others_Choice =>\n+       (1 => False,   --  Others_Discrete_Choices (List1-Sem)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Access_To_Object_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => True),   --  Subtype_Indication (Node5)\n+\n+     N_Access_Function_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Parameter_Specifications (List3)\n+        4 => True,    --  Result_Definition (Node4)\n+        5 => False),  --  unused\n+\n+     N_Access_Procedure_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Parameter_Specifications (List3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Access_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Access_To_Subprogram_Definition (Node3)\n+        4 => True,    --  Subtype_Mark (Node4)\n+        5 => False),  --  unused\n+\n+     N_Incomplete_Type_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => True,    --  Discriminant_Specifications (List4)\n+        5 => False),  --  unused\n+\n+     N_Explicit_Dereference =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Prefix (Node3)\n+        4 => False,   --  Actual_Designated_Subtype (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Indexed_Component =>\n+       (1 => True,    --  Expressions (List1)\n+        2 => False,   --  unused\n+        3 => True,    --  Prefix (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Slice =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Prefix (Node3)\n+        4 => True,    --  Discrete_Range (Node4)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Selected_Component =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Selector_Name (Node2)\n+        3 => True,    --  Prefix (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Attribute_Reference =>\n+       (1 => True,    --  Expressions (List1)\n+        2 => True,    --  Attribute_Name (Name2)\n+        3 => True,    --  Prefix (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Aggregate =>\n+       (1 => True,    --  Expressions (List1)\n+        2 => True,    --  Component_Associations (List2)\n+        3 => False,   --  Aggregate_Bounds (Node3-Sem)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Component_Association =>\n+       (1 => True,    --  Choices (List1)\n+        2 => False,   --  Loop_Actions (List2-Sem)\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Extension_Aggregate =>\n+       (1 => True,    --  Expressions (List1)\n+        2 => True,    --  Component_Associations (List2)\n+        3 => True,    --  Ancestor_Part (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Null =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_And_Then =>\n+       (1 => False,   --  Actions (List1-Sem)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Or_Else =>\n+       (1 => False,   --  Actions (List1-Sem)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_In =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Not_In =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_And =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Or =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Xor =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Eq =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Ne =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Lt =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Le =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Gt =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Ge =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Add =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Subtract =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Concat =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Multiply =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Divide =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Mod =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Rem =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Expon =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Plus =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => False,   --  unused\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Minus =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => False,   --  unused\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Abs =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => False,   --  unused\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Not =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => False,   --  unused\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Type_Conversion =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => True,    --  Subtype_Mark (Node4)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Qualified_Expression =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => True,    --  Subtype_Mark (Node4)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Allocator =>\n+       (1 => False,   --  Storage_Pool (Node1-Sem)\n+        2 => False,   --  Procedure_To_Call (Node2-Sem)\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Null_Statement =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Label =>\n+       (1 => True,    --  Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Assignment_Statement =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Name (Node2)\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_If_Statement =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => True,    --  Then_Statements (List2)\n+        3 => True,    --  Elsif_Parts (List3)\n+        4 => True,    --  Else_Statements (List4)\n+        5 => True),   --  End_Span (Uint5)\n+\n+     N_Elsif_Part =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => True,    --  Then_Statements (List2)\n+        3 => False,   --  Condition_Actions (List3-Sem)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Case_Statement =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => True,    --  Alternatives (List4)\n+        5 => True),   --  End_Span (Uint5)\n+\n+     N_Case_Statement_Alternative =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Statements (List3)\n+        4 => True,    --  Discrete_Choices (List4)\n+        5 => False),  --  unused\n+\n+     N_Loop_Statement =>\n+       (1 => True,    --  Identifier (Node1)\n+        2 => True,    --  Iteration_Scheme (Node2)\n+        3 => True,    --  Statements (List3)\n+        4 => True,    --  End_Label (Node4)\n+        5 => False),  --  unused\n+\n+     N_Iteration_Scheme =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  Condition_Actions (List3-Sem)\n+        4 => True,    --  Loop_Parameter_Specification (Node4)\n+        5 => False),  --  unused\n+\n+     N_Loop_Parameter_Specification =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => True,    --  Discrete_Subtype_Definition (Node4)\n+        5 => False),  --  unused\n+\n+     N_Block_Statement =>\n+       (1 => True,    --  Identifier (Node1)\n+        2 => True,    --  Declarations (List2)\n+        3 => False,   --  Activation_Chain_Entity (Node3-Sem)\n+        4 => True,    --  Handled_Statement_Sequence (Node4)\n+        5 => False),  --  unused\n+\n+     N_Exit_Statement =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Goto_Statement =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Subprogram_Declaration =>\n+       (1 => True,    --  Specification (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  Body_To_Inline (Node3-Sem)\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  Corresponding_Body (Node5-Sem)\n+\n+     N_Abstract_Subprogram_Declaration =>\n+       (1 => True,    --  Specification (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Function_Specification =>\n+       (1 => True,    --  Defining_Unit_Name (Node1)\n+        2 => False,   --  Elaboration_Boolean (Node2-Sem)\n+        3 => True,    --  Parameter_Specifications (List3)\n+        4 => True,    --  Result_Definition (Node4)\n+        5 => False),  --  Generic_Parent (Node5-Sem)\n+\n+     N_Procedure_Specification =>\n+       (1 => True,    --  Defining_Unit_Name (Node1)\n+        2 => False,   --  Elaboration_Boolean (Node2-Sem)\n+        3 => True,    --  Parameter_Specifications (List3)\n+        4 => False,   --  unused\n+        5 => False),  --  Generic_Parent (Node5-Sem)\n+\n+     N_Designator =>\n+       (1 => True,    --  Identifier (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Defining_Program_Unit_Name =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Operator_Symbol =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => False,   --  unused\n+        3 => True,    --  Strval (Str3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Defining_Operator_Symbol =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => False,   --  Next_Entity (Node2-Sem)\n+        3 => False,   --  Scope (Node3-Sem)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Parameter_Specification =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Parameter_Type (Node2)\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Default_Expression (Node5-Sem)\n+\n+     N_Subprogram_Body =>\n+       (1 => True,    --  Specification (Node1)\n+        2 => True,    --  Declarations (List2)\n+        3 => False,   --  Activation_Chain_Entity (Node3-Sem)\n+        4 => True,    --  Handled_Statement_Sequence (Node4)\n+        5 => False),  --  Corresponding_Spec (Node5-Sem)\n+\n+     N_Procedure_Call_Statement =>\n+       (1 => False,   --  Controlling_Argument (Node1-Sem)\n+        2 => True,    --  Name (Node2)\n+        3 => True,    --  Parameter_Associations (List3)\n+        4 => False,   --  First_Named_Actual (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Function_Call =>\n+       (1 => False,   --  Controlling_Argument (Node1-Sem)\n+        2 => True,    --  Name (Node2)\n+        3 => True,    --  Parameter_Associations (List3)\n+        4 => False,   --  First_Named_Actual (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Parameter_Association =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Selector_Name (Node2)\n+        3 => True,    --  Explicit_Actual_Parameter (Node3)\n+        4 => False,   --  Next_Named_Actual (Node4-Sem)\n+        5 => False),  --  unused\n+\n+     N_Return_Statement =>\n+       (1 => False,   --  Storage_Pool (Node1-Sem)\n+        2 => False,   --  Procedure_To_Call (Node2-Sem)\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Return_Statement_Entity (Node5-Sem)\n+\n+     N_Extended_Return_Statement =>\n+       (1 => False,   --  Storage_Pool (Node1-Sem)\n+        2 => False,   --  Procedure_To_Call (Node2-Sem)\n+        3 => True,    --  Return_Object_Declarations (List3)\n+        4 => True,    --  Handled_Statement_Sequence (Node4)\n+        5 => False),  --  Return_Statement_Entity (Node5-Sem)\n+\n+     N_Package_Declaration =>\n+       (1 => True,    --  Specification (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  Activation_Chain_Entity (Node3-Sem)\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  Corresponding_Body (Node5-Sem)\n+\n+     N_Package_Specification =>\n+       (1 => True,    --  Defining_Unit_Name (Node1)\n+        2 => True,    --  Visible_Declarations (List2)\n+        3 => True,    --  Private_Declarations (List3)\n+        4 => True,    --  End_Label (Node4)\n+        5 => False),  --  Generic_Parent (Node5-Sem)\n+\n+     N_Package_Body =>\n+       (1 => True,    --  Defining_Unit_Name (Node1)\n+        2 => True,    --  Declarations (List2)\n+        3 => False,   --  unused\n+        4 => True,    --  Handled_Statement_Sequence (Node4)\n+        5 => False),  --  Corresponding_Spec (Node5-Sem)\n+\n+     N_Private_Type_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => True,    --  Discriminant_Specifications (List4)\n+        5 => False),  --  unused\n+\n+     N_Private_Extension_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Interface_List (List2)\n+        3 => False,   --  unused\n+        4 => True,    --  Discriminant_Specifications (List4)\n+        5 => True),   --  Subtype_Indication (Node5)\n+\n+     N_Use_Package_Clause =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Names (List2)\n+        3 => False,   --  Next_Use_Clause (Node3-Sem)\n+        4 => False,   --  Hidden_By_Use_Clause (Elist4-Sem)\n+        5 => False),  --  unused\n+\n+     N_Use_Type_Clause =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Subtype_Marks (List2)\n+        3 => False,   --  Next_Use_Clause (Node3-Sem)\n+        4 => False,   --  Hidden_By_Use_Clause (Elist4-Sem)\n+        5 => False),  --  unused\n+\n+     N_Object_Renaming_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => True,    --  Access_Definition (Node3)\n+        4 => True,    --  Subtype_Mark (Node4)\n+        5 => False),  --  Corresponding_Generic_Association (Node5-Sem)\n+\n+     N_Exception_Renaming_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Package_Renaming_Declaration =>\n+       (1 => True,    --  Defining_Unit_Name (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  unused\n+\n+     N_Subprogram_Renaming_Declaration =>\n+       (1 => True,    --  Specification (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  Corresponding_Formal_Spec (Node3-Sem)\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  Corresponding_Spec (Node5-Sem)\n+\n+     N_Generic_Package_Renaming_Declaration =>\n+       (1 => True,    --  Defining_Unit_Name (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  unused\n+\n+     N_Generic_Procedure_Renaming_Declaration =>\n+       (1 => True,    --  Defining_Unit_Name (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  unused\n+\n+     N_Generic_Function_Renaming_Declaration =>\n+       (1 => True,    --  Defining_Unit_Name (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  unused\n+\n+     N_Task_Type_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Interface_List (List2)\n+        3 => True,    --  Task_Definition (Node3)\n+        4 => True,    --  Discriminant_Specifications (List4)\n+        5 => False),  --  Corresponding_Body (Node5-Sem)\n+\n+     N_Single_Task_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Interface_List (List2)\n+        3 => True,    --  Task_Definition (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Task_Definition =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Visible_Declarations (List2)\n+        3 => True,    --  Private_Declarations (List3)\n+        4 => True,    --  End_Label (Node4)\n+        5 => False),  --  unused\n+\n+     N_Task_Body =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Declarations (List2)\n+        3 => False,   --  Activation_Chain_Entity (Node3-Sem)\n+        4 => True,    --  Handled_Statement_Sequence (Node4)\n+        5 => False),  --  Corresponding_Spec (Node5-Sem)\n+\n+     N_Protected_Type_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Interface_List (List2)\n+        3 => True,    --  Protected_Definition (Node3)\n+        4 => True,    --  Discriminant_Specifications (List4)\n+        5 => False),  --  Corresponding_Body (Node5-Sem)\n+\n+     N_Single_Protected_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Interface_List (List2)\n+        3 => True,    --  Protected_Definition (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Protected_Definition =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Visible_Declarations (List2)\n+        3 => True,    --  Private_Declarations (List3)\n+        4 => True,    --  End_Label (Node4)\n+        5 => False),  --  unused\n+\n+     N_Protected_Body =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Declarations (List2)\n+        3 => False,   --  unused\n+        4 => True,    --  End_Label (Node4)\n+        5 => False),  --  Corresponding_Spec (Node5-Sem)\n+\n+     N_Entry_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Parameter_Specifications (List3)\n+        4 => True,    --  Discrete_Subtype_Definition (Node4)\n+        5 => False),  --  Corresponding_Body (Node5-Sem)\n+\n+     N_Accept_Statement =>\n+       (1 => True,    --  Entry_Direct_Name (Node1)\n+        2 => True,    --  Declarations (List2)\n+        3 => True,    --  Parameter_Specifications (List3)\n+        4 => True,    --  Handled_Statement_Sequence (Node4)\n+        5 => True),   --  Entry_Index (Node5)\n+\n+     N_Entry_Body =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Declarations (List2)\n+        3 => False,   --  Activation_Chain_Entity (Node3-Sem)\n+        4 => True,    --  Handled_Statement_Sequence (Node4)\n+        5 => True),   --  Entry_Body_Formal_Part (Node5)\n+\n+     N_Entry_Body_Formal_Part =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Parameter_Specifications (List3)\n+        4 => True,    --  Entry_Index_Specification (Node4)\n+        5 => False),  --  unused\n+\n+     N_Entry_Index_Specification =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => True,    --  Discrete_Subtype_Definition (Node4)\n+        5 => False),  --  unused\n+\n+     N_Entry_Call_Statement =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Name (Node2)\n+        3 => True,    --  Parameter_Associations (List3)\n+        4 => False,   --  First_Named_Actual (Node4-Sem)\n+        5 => False),  --  unused\n+\n+     N_Requeue_Statement =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Delay_Until_Statement =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Delay_Relative_Statement =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Selective_Accept =>\n+       (1 => True,    --  Select_Alternatives (List1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => True,    --  Else_Statements (List4)\n+        5 => False),  --  unused\n+\n+     N_Accept_Alternative =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => True,    --  Accept_Statement (Node2)\n+        3 => True,    --  Statements (List3)\n+        4 => True,    --  Pragmas_Before (List4)\n+        5 => False),  --  Accept_Handler_Records (List5-Sem)\n+\n+     N_Delay_Alternative =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => True,    --  Delay_Statement (Node2)\n+        3 => True,    --  Statements (List3)\n+        4 => True,    --  Pragmas_Before (List4)\n+        5 => False),  --  unused\n+\n+     N_Terminate_Alternative =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => True,    --  Pragmas_Before (List4)\n+        5 => True),   --  Pragmas_After (List5)\n+\n+     N_Timed_Entry_Call =>\n+       (1 => True,    --  Entry_Call_Alternative (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => True,    --  Delay_Alternative (Node4)\n+        5 => False),  --  unused\n+\n+     N_Entry_Call_Alternative =>\n+       (1 => True,    --  Entry_Call_Statement (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Statements (List3)\n+        4 => True,    --  Pragmas_Before (List4)\n+        5 => False),  --  unused\n+\n+     N_Conditional_Entry_Call =>\n+       (1 => True,    --  Entry_Call_Alternative (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => True,    --  Else_Statements (List4)\n+        5 => False),  --  unused\n+\n+     N_Asynchronous_Select =>\n+       (1 => True,    --  Triggering_Alternative (Node1)\n+        2 => True,    --  Abortable_Part (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Triggering_Alternative =>\n+       (1 => True,    --  Triggering_Statement (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Statements (List3)\n+        4 => True,    --  Pragmas_Before (List4)\n+        5 => False),  --  unused\n+\n+     N_Abortable_Part =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Statements (List3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Abort_Statement =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Names (List2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Compilation_Unit =>\n+       (1 => True,    --  Context_Items (List1)\n+        2 => True,    --  Unit (Node2)\n+        3 => False,   --  First_Inlined_Subprogram (Node3-Sem)\n+        4 => False,   --  Library_Unit (Node4-Sem)\n+        5 => True),   --  Aux_Decls_Node (Node5)\n+\n+     N_Compilation_Unit_Aux =>\n+       (1 => True,    --  Actions (List1)\n+        2 => True,    --  Declarations (List2)\n+        3 => False,   --  unused\n+        4 => True,    --  Config_Pragmas (List4)\n+        5 => True),   --  Pragmas_After (List5)\n+\n+     N_With_Clause =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  Library_Unit (Node4-Sem)\n+        5 => False),  --  Corresponding_Spec (Node5-Sem)\n+\n+     N_With_Type_Clause =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Subprogram_Body_Stub =>\n+       (1 => True,    --  Specification (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  Library_Unit (Node4-Sem)\n+        5 => False),  --  Corresponding_Body (Node5-Sem)\n+\n+     N_Package_Body_Stub =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  Library_Unit (Node4-Sem)\n+        5 => False),  --  Corresponding_Body (Node5-Sem)\n+\n+     N_Task_Body_Stub =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  Library_Unit (Node4-Sem)\n+        5 => False),  --  Corresponding_Body (Node5-Sem)\n+\n+     N_Protected_Body_Stub =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  Library_Unit (Node4-Sem)\n+        5 => False),  --  Corresponding_Body (Node5-Sem)\n+\n+     N_Subunit =>\n+       (1 => True,    --  Proper_Body (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => False,   --  Corresponding_Stub (Node3-Sem)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Exception_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  Expression (Node3-Sem)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Handled_Sequence_Of_Statements =>\n+       (1 => True,    --  At_End_Proc (Node1)\n+        2 => False,   --  First_Real_Statement (Node2-Sem)\n+        3 => True,    --  Statements (List3)\n+        4 => True,    --  End_Label (Node4)\n+        5 => True),   --  Exception_Handlers (List5)\n+\n+     N_Exception_Handler =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Choice_Parameter (Node2)\n+        3 => True,    --  Statements (List3)\n+        4 => True,    --  Exception_Choices (List4)\n+        5 => False),  --  unused\n+\n+     N_Raise_Statement =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Name (Node2)\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Generic_Subprogram_Declaration =>\n+       (1 => True,    --  Specification (Node1)\n+        2 => True,    --  Generic_Formal_Declarations (List2)\n+        3 => False,   --  unused\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  Corresponding_Body (Node5-Sem)\n+\n+     N_Generic_Package_Declaration =>\n+       (1 => True,    --  Specification (Node1)\n+        2 => True,    --  Generic_Formal_Declarations (List2)\n+        3 => False,   --  Activation_Chain_Entity (Node3-Sem)\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  Corresponding_Body (Node5-Sem)\n+\n+     N_Package_Instantiation =>\n+       (1 => True,    --  Defining_Unit_Name (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => True,    --  Generic_Associations (List3)\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  Instance_Spec (Node5-Sem)\n+\n+     N_Procedure_Instantiation =>\n+       (1 => True,    --  Defining_Unit_Name (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => True,    --  Generic_Associations (List3)\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  Instance_Spec (Node5-Sem)\n+\n+     N_Function_Instantiation =>\n+       (1 => True,    --  Defining_Unit_Name (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => True,    --  Generic_Associations (List3)\n+        4 => False,   --  Parent_Spec (Node4-Sem)\n+        5 => False),  --  Instance_Spec (Node5-Sem)\n+\n+     N_Generic_Association =>\n+       (1 => True,    --  Explicit_Generic_Actual_Parameter (Node1)\n+        2 => True,    --  Selector_Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Formal_Object_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Access_Definition (Node3)\n+        4 => True,    --  Subtype_Mark (Node4)\n+        5 => True),   --  Default_Expression (Node5)\n+\n+     N_Formal_Type_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Formal_Type_Definition (Node3)\n+        4 => True,    --  Discriminant_Specifications (List4)\n+        5 => False),  --  unused\n+\n+     N_Formal_Private_Type_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Formal_Derived_Type_Definition =>\n+       (1 => False,   --  unused\n+        2 => True,    --  Interface_List (List2)\n+        3 => False,   --  unused\n+        4 => True,    --  Subtype_Mark (Node4)\n+        5 => False),  --  unused\n+\n+     N_Formal_Discrete_Type_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Formal_Signed_Integer_Type_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Formal_Modular_Type_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Formal_Floating_Point_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Formal_Ordinary_Fixed_Point_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Formal_Decimal_Fixed_Point_Definition =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Formal_Concrete_Subprogram_Declaration =>\n+       (1 => True,    --  Specification (Node1)\n+        2 => True,    --  Default_Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Formal_Abstract_Subprogram_Declaration =>\n+       (1 => True,    --  Specification (Node1)\n+        2 => True,    --  Default_Name (Node2)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Formal_Package_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => True,    --  Name (Node2)\n+        3 => True,    --  Generic_Associations (List3)\n+        4 => False,   --  unused\n+        5 => False),  --  Instance_Spec (Node5-Sem)\n+\n+     N_Attribute_Definition_Clause =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Name (Node2)\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Next_Rep_Item (Node5-Sem)\n+\n+     N_Enumeration_Representation_Clause =>\n+       (1 => True,    --  Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Array_Aggregate (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Next_Rep_Item (Node5-Sem)\n+\n+     N_Record_Representation_Clause =>\n+       (1 => True,    --  Identifier (Node1)\n+        2 => True,    --  Mod_Clause (Node2)\n+        3 => True,    --  Component_Clauses (List3)\n+        4 => False,   --  unused\n+        5 => False),  --  Next_Rep_Item (Node5-Sem)\n+\n+     N_Component_Clause =>\n+       (1 => True,    --  Component_Name (Node1)\n+        2 => True,    --  Position (Node2)\n+        3 => True,    --  First_Bit (Node3)\n+        4 => True,    --  Last_Bit (Node4)\n+        5 => False),  --  unused\n+\n+     N_Code_Statement =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Op_Rotate_Left =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Rotate_Right =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Shift_Left =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Shift_Right_Arithmetic =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Op_Shift_Right =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Left_Opnd (Node2)\n+        3 => True,    --  Right_Opnd (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Delta_Constraint =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Delta_Expression (Node3)\n+        4 => True,    --  Range_Constraint (Node4)\n+        5 => False),  --  unused\n+\n+     N_At_Clause =>\n+       (1 => True,    --  Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Mod_Clause =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => True,    --  Pragmas_Before (List4)\n+        5 => False),  --  unused\n+\n+     N_Conditional_Expression =>\n+       (1 => True,    --  Expressions (List1)\n+        2 => False,   --  Then_Actions (List2-Sem)\n+        3 => False,   --  Else_Actions (List3-Sem)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Expanded_Name =>\n+       (1 => True,    --  Chars (Name1)\n+        2 => True,    --  Selector_Name (Node2)\n+        3 => True,    --  Prefix (Node3)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Free_Statement =>\n+       (1 => False,   --  Storage_Pool (Node1-Sem)\n+        2 => False,   --  Procedure_To_Call (Node2-Sem)\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  Actual_Designated_Subtype (Node4-Sem)\n+        5 => False),  --  unused\n+\n+     N_Freeze_Entity =>\n+       (1 => True,    --  Actions (List1)\n+        2 => False,   --  Access_Types_To_Process (Elist2-Sem)\n+        3 => False,   --  TSS_Elist (Elist3-Sem)\n+        4 => False,   --  Entity (Node4-Sem)\n+        5 => False),  --  First_Subtype_Link (Node5-Sem)\n+\n+     N_Implicit_Label_Declaration =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  Label_Construct (Node2-Sem)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Itype_Reference =>\n+       (1 => False,   --  Itype (Node1-Sem)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Raise_Constraint_Error =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Reason (Uint3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Raise_Program_Error =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Reason (Uint3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Raise_Storage_Error =>\n+       (1 => True,    --  Condition (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Reason (Uint3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Reference =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Prefix (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Subprogram_Info =>\n+       (1 => True,    --  Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Unchecked_Expression =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Unchecked_Type_Conversion =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => True,    --  Subtype_Mark (Node4)\n+        5 => False),  --  Etype (Node5-Sem)\n+\n+     N_Validate_Unchecked_Conversion =>\n+       (1 => False,   --  Source_Type (Node1-Sem)\n+        2 => False,   --  Target_Type (Node2-Sem)\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+   --  End of inserted output from makeisf program\n+\n+   --  Entries for Empty, Error and Unused. Even thought these have a Chars\n+   --  field for debugging purposes, they are not really syntactic fields, so\n+   --  we mark all fields as unused.\n+\n+     N_Empty =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Error =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Unused_At_Start =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n+     N_Unused_At_End =>\n+       (1 => False,   --  unused\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False)); --  unused\n+\n    --------------------\n    -- Inline Pragmas --\n    --------------------\n@@ -8793,6 +10443,7 @@ package Sinfo is\n    pragma Inline (Check_Address_Alignment);\n    pragma Inline (Choice_Parameter);\n    pragma Inline (Choices);\n+   pragma Inline (Comes_From_Extended_Return_Statement);\n    pragma Inline (Compile_Time_Known_Aggregate);\n    pragma Inline (Component_Associations);\n    pragma Inline (Component_Clauses);\n@@ -8912,12 +10563,14 @@ package Sinfo is\n    pragma Inline (Is_Component_Left_Opnd);\n    pragma Inline (Is_Component_Right_Opnd);\n    pragma Inline (Is_Controlling_Actual);\n+   pragma Inline (Is_Entry_Barrier_Function);\n    pragma Inline (Is_In_Discriminant_Check);\n    pragma Inline (Is_Machine_Number);\n    pragma Inline (Is_Null_Loop);\n    pragma Inline (Is_Overloaded);\n    pragma Inline (Is_Power_Of_2_For_Shift);\n    pragma Inline (Is_Protected_Subprogram_Body);\n+   pragma Inline (Has_Self_Reference);\n    pragma Inline (Is_Static_Expression);\n    pragma Inline (Is_Subprogram_Descriptor);\n    pragma Inline (Is_Task_Allocation_Block);\n@@ -8989,7 +10642,8 @@ package Sinfo is\n    pragma Inline (Record_Extension_Part);\n    pragma Inline (Redundant_Use);\n    pragma Inline (Result_Definition);\n-   pragma Inline (Return_Type);\n+   pragma Inline (Return_Object_Declarations);\n+   pragma Inline (Return_Statement_Entity);\n    pragma Inline (Reverse_Present);\n    pragma Inline (Right_Opnd);\n    pragma Inline (Rounded_Result);\n@@ -9064,6 +10718,7 @@ package Sinfo is\n    pragma Inline (Set_Check_Address_Alignment);\n    pragma Inline (Set_Choice_Parameter);\n    pragma Inline (Set_Choices);\n+   pragma Inline (Set_Comes_From_Extended_Return_Statement);\n    pragma Inline (Set_Compile_Time_Known_Aggregate);\n    pragma Inline (Set_Component_Associations);\n    pragma Inline (Set_Component_Clauses);\n@@ -9182,12 +10837,14 @@ package Sinfo is\n    pragma Inline (Set_Is_Component_Left_Opnd);\n    pragma Inline (Set_Is_Component_Right_Opnd);\n    pragma Inline (Set_Is_Controlling_Actual);\n+   pragma Inline (Set_Is_Entry_Barrier_Function);\n    pragma Inline (Set_Is_In_Discriminant_Check);\n    pragma Inline (Set_Is_Machine_Number);\n    pragma Inline (Set_Is_Null_Loop);\n    pragma Inline (Set_Is_Overloaded);\n    pragma Inline (Set_Is_Power_Of_2_For_Shift);\n    pragma Inline (Set_Is_Protected_Subprogram_Body);\n+   pragma Inline (Set_Has_Self_Reference);\n    pragma Inline (Set_Is_Static_Expression);\n    pragma Inline (Set_Is_Subprogram_Descriptor);\n    pragma Inline (Set_Is_Task_Allocation_Block);\n@@ -9258,7 +10915,7 @@ package Sinfo is\n    pragma Inline (Set_Record_Extension_Part);\n    pragma Inline (Set_Redundant_Use);\n    pragma Inline (Set_Result_Definition);\n-   pragma Inline (Set_Return_Type);\n+   pragma Inline (Set_Return_Object_Declarations);\n    pragma Inline (Set_Reverse_Present);\n    pragma Inline (Set_Right_Opnd);\n    pragma Inline (Set_Rounded_Result);"}, {"sha": "96ae94a043f721aaacd66c923f8ec55b7cbb10df", "filename": "gcc/ada/snames.adb", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16", "patch": "@@ -201,6 +201,7 @@ package body Snames is\n      \"normalize_scalars#\" &\n      \"polling#\" &\n      \"persistent_bss#\" &\n+     \"priority_specific_dispatching#\" &\n      \"profile#\" &\n      \"profile_warnings#\" &\n      \"propagate_exceptions#\" &\n@@ -221,6 +222,7 @@ package body Snames is\n      \"use_vads_size#\" &\n      \"validity_checks#\" &\n      \"warnings#\" &\n+     \"wide_character_encoding#\" &\n      \"abort_defer#\" &\n      \"all_calls_remote#\" &\n      \"annotate#\" &\n@@ -287,9 +289,9 @@ package body Snames is\n      \"pack#\" &\n      \"page#\" &\n      \"passive#\" &\n+     \"preelaborable_initialization#\" &\n      \"preelaborate#\" &\n      \"preelaborate_05#\" &\n-     \"priority#\" &\n      \"psect_object#\" &\n      \"pure#\" &\n      \"pure_05#\" &\n@@ -482,6 +484,7 @@ package body Snames is\n      \"pool_address#\" &\n      \"pos#\" &\n      \"position#\" &\n+     \"priority#\" &\n      \"range#\" &\n      \"range_length#\" &\n      \"round#\" &\n@@ -548,13 +551,18 @@ package body Snames is\n      \"storage_pool#\" &\n      \"base#\" &\n      \"class#\" &\n+     \"stub_type#\" &\n      \"ceiling_locking#\" &\n      \"inheritance_locking#\" &\n      \"fifo_queuing#\" &\n      \"priority_queuing#\" &\n+     \"edf_across_priorities#\" &\n      \"fifo_within_priorities#\" &\n+     \"non_preemptive_within_priorities#\" &\n+     \"round_robin_within_priorities#\" &\n      \"access_check#\" &\n      \"accessibility_check#\" &\n+     \"alignment_check#\" &\n      \"discriminant_check#\" &\n      \"division_check#\" &\n      \"elaboration_check#\" &\n@@ -564,6 +572,7 @@ package body Snames is\n      \"range_check#\" &\n      \"storage_check#\" &\n      \"tag_check#\" &\n+     \"validity_check#\" &\n      \"all_checks#\" &\n      \"abort#\" &\n      \"abs#\" &\n@@ -852,6 +861,28 @@ package body Snames is\n       end case;\n    end Get_Convention_Id;\n \n+   -------------------------\n+   -- Get_Convention_Name --\n+   -------------------------\n+\n+   function Get_Convention_Name (C : Convention_Id) return Name_Id is\n+   begin\n+      case C is\n+         when Convention_Ada       => return Name_Ada;\n+         when Convention_Assembler => return Name_Assembler;\n+         when Convention_C         => return Name_C;\n+         when Convention_COBOL     => return Name_COBOL;\n+         when Convention_CPP       => return Name_CPP;\n+         when Convention_Entry     => return Name_Entry;\n+         when Convention_Fortran   => return Name_Fortran;\n+         when Convention_Intrinsic => return Name_Intrinsic;\n+         when Convention_Java      => return Name_Java;\n+         when Convention_Protected => return Name_Protected;\n+         when Convention_Stdcall   => return Name_Stdcall;\n+         when Convention_Stubbed   => return Name_Stubbed;\n+      end case;\n+   end Get_Convention_Name;\n+\n    ---------------------------\n    -- Get_Locking_Policy_Id --\n    ---------------------------\n@@ -871,6 +902,8 @@ package body Snames is\n          return Pragma_AST_Entry;\n       elsif N = Name_Interface then\n          return Pragma_Interface;\n+      elsif N = Name_Priority then\n+         return Pragma_Priority;\n       elsif N = Name_Storage_Size then\n          return Pragma_Storage_Size;\n       elsif N = Name_Storage_Unit then\n@@ -1057,6 +1090,7 @@ package body Snames is\n       return N in First_Pragma_Name .. Last_Pragma_Name\n         or else N = Name_AST_Entry\n         or else N = Name_Interface\n+        or else N = Name_Priority\n         or else N = Name_Storage_Size\n         or else N = Name_Storage_Unit;\n    end Is_Pragma_Name;"}, {"sha": "0c6af6eed3889d086c31fb75f29b57a988a3c468", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 601, "deletions": 575, "changes": 1176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16", "patch": "@@ -362,115 +362,124 @@ package Snames is\n    Name_Normalize_Scalars              : constant Name_Id := N + 140;\n    Name_Polling                        : constant Name_Id := N + 141; -- GNAT\n    Name_Persistent_BSS                 : constant Name_Id := N + 142; -- GNAT\n-   Name_Profile                        : constant Name_Id := N + 143; -- Ada 05\n-   Name_Profile_Warnings               : constant Name_Id := N + 144; -- GNAT\n-   Name_Propagate_Exceptions           : constant Name_Id := N + 145; -- GNAT\n-   Name_Queuing_Policy                 : constant Name_Id := N + 146;\n-   Name_Ravenscar                      : constant Name_Id := N + 147; -- Ada 05\n-   Name_Restricted_Run_Time            : constant Name_Id := N + 148; -- GNAT\n-   Name_Restrictions                   : constant Name_Id := N + 149;\n-   Name_Restriction_Warnings           : constant Name_Id := N + 150; -- GNAT\n-   Name_Reviewable                     : constant Name_Id := N + 151;\n-   Name_Source_File_Name               : constant Name_Id := N + 152; -- GNAT\n-   Name_Source_File_Name_Project       : constant Name_Id := N + 153; -- GNAT\n-   Name_Style_Checks                   : constant Name_Id := N + 154; -- GNAT\n-   Name_Suppress                       : constant Name_Id := N + 155;\n-   Name_Suppress_Exception_Locations   : constant Name_Id := N + 156; -- GNAT\n-   Name_Task_Dispatching_Policy        : constant Name_Id := N + 157;\n-   Name_Universal_Data                 : constant Name_Id := N + 158; -- AAMP\n-   Name_Unsuppress                     : constant Name_Id := N + 159; -- GNAT\n-   Name_Use_VADS_Size                  : constant Name_Id := N + 160; -- GNAT\n-   Name_Validity_Checks                : constant Name_Id := N + 161; -- GNAT\n-   Name_Warnings                       : constant Name_Id := N + 162; -- GNAT\n-   Last_Configuration_Pragma_Name      : constant Name_Id := N + 162;\n+   Name_Priority_Specific_Dispatching  : constant Name_Id := N + 143; -- Ada 05\n+   Name_Profile                        : constant Name_Id := N + 144; -- Ada 05\n+   Name_Profile_Warnings               : constant Name_Id := N + 145; -- GNAT\n+   Name_Propagate_Exceptions           : constant Name_Id := N + 146; -- GNAT\n+   Name_Queuing_Policy                 : constant Name_Id := N + 147;\n+   Name_Ravenscar                      : constant Name_Id := N + 148; -- Ada 05\n+   Name_Restricted_Run_Time            : constant Name_Id := N + 149; -- GNAT\n+   Name_Restrictions                   : constant Name_Id := N + 150;\n+   Name_Restriction_Warnings           : constant Name_Id := N + 151; -- GNAT\n+   Name_Reviewable                     : constant Name_Id := N + 152;\n+   Name_Source_File_Name               : constant Name_Id := N + 153; -- GNAT\n+   Name_Source_File_Name_Project       : constant Name_Id := N + 154; -- GNAT\n+   Name_Style_Checks                   : constant Name_Id := N + 155; -- GNAT\n+   Name_Suppress                       : constant Name_Id := N + 156;\n+   Name_Suppress_Exception_Locations   : constant Name_Id := N + 157; -- GNAT\n+   Name_Task_Dispatching_Policy        : constant Name_Id := N + 158;\n+   Name_Universal_Data                 : constant Name_Id := N + 159; -- AAMP\n+   Name_Unsuppress                     : constant Name_Id := N + 160; -- GNAT\n+   Name_Use_VADS_Size                  : constant Name_Id := N + 161; -- GNAT\n+   Name_Validity_Checks                : constant Name_Id := N + 162; -- GNAT\n+   Name_Warnings                       : constant Name_Id := N + 163; -- GNAT\n+   Name_Wide_Character_Encoding        : constant Name_Id := N + 164; -- GNAT\n+   Last_Configuration_Pragma_Name      : constant Name_Id := N + 164;\n \n    --  Remaining pragma names\n \n-   Name_Abort_Defer                    : constant Name_Id := N + 163; -- GNAT\n-   Name_All_Calls_Remote               : constant Name_Id := N + 164;\n-   Name_Annotate                       : constant Name_Id := N + 165; -- GNAT\n+   Name_Abort_Defer                    : constant Name_Id := N + 165; -- GNAT\n+   Name_All_Calls_Remote               : constant Name_Id := N + 166;\n+   Name_Annotate                       : constant Name_Id := N + 167; -- GNAT\n \n    --  Note: AST_Entry is not in this list because its name matches the\n    --  name of the corresponding attribute. However, it is included in the\n-   --  definition of the type Attribute_Id, and the functions Get_Pragma_Id\n+   --  definition of the type Pragma_Id, and the functions Get_Pragma_Id\n    --  and Check_Pragma_Id correctly recognize and process Name_AST_Entry.\n    --  AST_Entry is a VMS specific pragma.\n \n-   Name_Assert                         : constant Name_Id := N + 166; -- Ada 05\n-   Name_Asynchronous                   : constant Name_Id := N + 167;\n-   Name_Atomic                         : constant Name_Id := N + 168;\n-   Name_Atomic_Components              : constant Name_Id := N + 169;\n-   Name_Attach_Handler                 : constant Name_Id := N + 170;\n-   Name_Comment                        : constant Name_Id := N + 171; -- GNAT\n-   Name_Common_Object                  : constant Name_Id := N + 172; -- GNAT\n-   Name_Complete_Representation        : constant Name_Id := N + 173; -- GNAT\n-   Name_Complex_Representation         : constant Name_Id := N + 174; -- GNAT\n-   Name_Controlled                     : constant Name_Id := N + 175;\n-   Name_Convention                     : constant Name_Id := N + 176;\n-   Name_CPP_Class                      : constant Name_Id := N + 177; -- GNAT\n-   Name_CPP_Constructor                : constant Name_Id := N + 178; -- GNAT\n-   Name_CPP_Virtual                    : constant Name_Id := N + 179; -- GNAT\n-   Name_CPP_Vtable                     : constant Name_Id := N + 180; -- GNAT\n-   Name_Debug                          : constant Name_Id := N + 181; -- GNAT\n-   Name_Elaborate                      : constant Name_Id := N + 182; -- Ada 83\n-   Name_Elaborate_All                  : constant Name_Id := N + 183;\n-   Name_Elaborate_Body                 : constant Name_Id := N + 184;\n-   Name_Export                         : constant Name_Id := N + 185;\n-   Name_Export_Exception               : constant Name_Id := N + 186; -- VMS\n-   Name_Export_Function                : constant Name_Id := N + 187; -- GNAT\n-   Name_Export_Object                  : constant Name_Id := N + 188; -- GNAT\n-   Name_Export_Procedure               : constant Name_Id := N + 189; -- GNAT\n-   Name_Export_Value                   : constant Name_Id := N + 190; -- GNAT\n-   Name_Export_Valued_Procedure        : constant Name_Id := N + 191; -- GNAT\n-   Name_External                       : constant Name_Id := N + 192; -- GNAT\n-   Name_Finalize_Storage_Only          : constant Name_Id := N + 193; -- GNAT\n-   Name_Ident                          : constant Name_Id := N + 194; -- VMS\n-   Name_Import                         : constant Name_Id := N + 195;\n-   Name_Import_Exception               : constant Name_Id := N + 196; -- VMS\n-   Name_Import_Function                : constant Name_Id := N + 197; -- GNAT\n-   Name_Import_Object                  : constant Name_Id := N + 198; -- GNAT\n-   Name_Import_Procedure               : constant Name_Id := N + 199; -- GNAT\n-   Name_Import_Valued_Procedure        : constant Name_Id := N + 200; -- GNAT\n-   Name_Inline                         : constant Name_Id := N + 201;\n-   Name_Inline_Always                  : constant Name_Id := N + 202; -- GNAT\n-   Name_Inline_Generic                 : constant Name_Id := N + 203; -- GNAT\n-   Name_Inspection_Point               : constant Name_Id := N + 204;\n-   Name_Interface_Name                 : constant Name_Id := N + 205; -- GNAT\n-   Name_Interrupt_Handler              : constant Name_Id := N + 206;\n-   Name_Interrupt_Priority             : constant Name_Id := N + 207;\n-   Name_Java_Constructor               : constant Name_Id := N + 208; -- GNAT\n-   Name_Java_Interface                 : constant Name_Id := N + 209; -- GNAT\n-   Name_Keep_Names                     : constant Name_Id := N + 210; -- GNAT\n-   Name_Link_With                      : constant Name_Id := N + 211; -- GNAT\n-   Name_Linker_Alias                   : constant Name_Id := N + 212; -- GNAT\n-   Name_Linker_Constructor             : constant Name_Id := N + 213; -- GNAT\n-   Name_Linker_Destructor              : constant Name_Id := N + 214; -- GNAT\n-   Name_Linker_Options                 : constant Name_Id := N + 215;\n-   Name_Linker_Section                 : constant Name_Id := N + 216; -- GNAT\n-   Name_List                           : constant Name_Id := N + 217;\n-   Name_Machine_Attribute              : constant Name_Id := N + 218; -- GNAT\n-   Name_Main                           : constant Name_Id := N + 219; -- GNAT\n-   Name_Main_Storage                   : constant Name_Id := N + 220; -- GNAT\n-   Name_Memory_Size                    : constant Name_Id := N + 221; -- Ada 83\n-   Name_No_Return                      : constant Name_Id := N + 222; -- GNAT\n-   Name_Obsolescent                    : constant Name_Id := N + 223; -- GNAT\n-   Name_Optimize                       : constant Name_Id := N + 224;\n-   Name_Optional_Overriding            : constant Name_Id := N + 225; -- Ada 05\n-   Name_Pack                           : constant Name_Id := N + 226;\n-   Name_Page                           : constant Name_Id := N + 227;\n-   Name_Passive                        : constant Name_Id := N + 228; -- GNAT\n-   Name_Preelaborate                   : constant Name_Id := N + 229;\n-   Name_Preelaborate_05                : constant Name_Id := N + 230; -- GNAT\n-   Name_Priority                       : constant Name_Id := N + 231;\n-   Name_Psect_Object                   : constant Name_Id := N + 232; -- VMS\n-   Name_Pure                           : constant Name_Id := N + 233;\n-   Name_Pure_05                        : constant Name_Id := N + 234; -- GNAT\n-   Name_Pure_Function                  : constant Name_Id := N + 235; -- GNAT\n-   Name_Remote_Call_Interface          : constant Name_Id := N + 236;\n-   Name_Remote_Types                   : constant Name_Id := N + 237;\n-   Name_Share_Generic                  : constant Name_Id := N + 238; -- GNAT\n-   Name_Shared                         : constant Name_Id := N + 239; -- Ada 83\n-   Name_Shared_Passive                 : constant Name_Id := N + 240;\n+   Name_Assert                         : constant Name_Id := N + 168; -- Ada 05\n+   Name_Asynchronous                   : constant Name_Id := N + 169;\n+   Name_Atomic                         : constant Name_Id := N + 170;\n+   Name_Atomic_Components              : constant Name_Id := N + 171;\n+   Name_Attach_Handler                 : constant Name_Id := N + 172;\n+   Name_Comment                        : constant Name_Id := N + 173; -- GNAT\n+   Name_Common_Object                  : constant Name_Id := N + 174; -- GNAT\n+   Name_Complete_Representation        : constant Name_Id := N + 175; -- GNAT\n+   Name_Complex_Representation         : constant Name_Id := N + 176; -- GNAT\n+   Name_Controlled                     : constant Name_Id := N + 177;\n+   Name_Convention                     : constant Name_Id := N + 178;\n+   Name_CPP_Class                      : constant Name_Id := N + 179; -- GNAT\n+   Name_CPP_Constructor                : constant Name_Id := N + 180; -- GNAT\n+   Name_CPP_Virtual                    : constant Name_Id := N + 181; -- GNAT\n+   Name_CPP_Vtable                     : constant Name_Id := N + 182; -- GNAT\n+   Name_Debug                          : constant Name_Id := N + 183; -- GNAT\n+   Name_Elaborate                      : constant Name_Id := N + 184; -- Ada 83\n+   Name_Elaborate_All                  : constant Name_Id := N + 185;\n+   Name_Elaborate_Body                 : constant Name_Id := N + 186;\n+   Name_Export                         : constant Name_Id := N + 187;\n+   Name_Export_Exception               : constant Name_Id := N + 188; -- VMS\n+   Name_Export_Function                : constant Name_Id := N + 189; -- GNAT\n+   Name_Export_Object                  : constant Name_Id := N + 190; -- GNAT\n+   Name_Export_Procedure               : constant Name_Id := N + 191; -- GNAT\n+   Name_Export_Value                   : constant Name_Id := N + 192; -- GNAT\n+   Name_Export_Valued_Procedure        : constant Name_Id := N + 193; -- GNAT\n+   Name_External                       : constant Name_Id := N + 194; -- GNAT\n+   Name_Finalize_Storage_Only          : constant Name_Id := N + 195; -- GNAT\n+   Name_Ident                          : constant Name_Id := N + 196; -- VMS\n+   Name_Import                         : constant Name_Id := N + 197;\n+   Name_Import_Exception               : constant Name_Id := N + 198; -- VMS\n+   Name_Import_Function                : constant Name_Id := N + 199; -- GNAT\n+   Name_Import_Object                  : constant Name_Id := N + 200; -- GNAT\n+   Name_Import_Procedure               : constant Name_Id := N + 201; -- GNAT\n+   Name_Import_Valued_Procedure        : constant Name_Id := N + 202; -- GNAT\n+   Name_Inline                         : constant Name_Id := N + 203;\n+   Name_Inline_Always                  : constant Name_Id := N + 204; -- GNAT\n+   Name_Inline_Generic                 : constant Name_Id := N + 205; -- GNAT\n+   Name_Inspection_Point               : constant Name_Id := N + 206;\n+   Name_Interface_Name                 : constant Name_Id := N + 207; -- GNAT\n+   Name_Interrupt_Handler              : constant Name_Id := N + 208;\n+   Name_Interrupt_Priority             : constant Name_Id := N + 209;\n+   Name_Java_Constructor               : constant Name_Id := N + 210; -- GNAT\n+   Name_Java_Interface                 : constant Name_Id := N + 211; -- GNAT\n+   Name_Keep_Names                     : constant Name_Id := N + 212; -- GNAT\n+   Name_Link_With                      : constant Name_Id := N + 213; -- GNAT\n+   Name_Linker_Alias                   : constant Name_Id := N + 214; -- GNAT\n+   Name_Linker_Constructor             : constant Name_Id := N + 215; -- GNAT\n+   Name_Linker_Destructor              : constant Name_Id := N + 216; -- GNAT\n+   Name_Linker_Options                 : constant Name_Id := N + 217;\n+   Name_Linker_Section                 : constant Name_Id := N + 218; -- GNAT\n+   Name_List                           : constant Name_Id := N + 219;\n+   Name_Machine_Attribute              : constant Name_Id := N + 220; -- GNAT\n+   Name_Main                           : constant Name_Id := N + 221; -- GNAT\n+   Name_Main_Storage                   : constant Name_Id := N + 222; -- GNAT\n+   Name_Memory_Size                    : constant Name_Id := N + 223; -- Ada 83\n+   Name_No_Return                      : constant Name_Id := N + 224; -- GNAT\n+   Name_Obsolescent                    : constant Name_Id := N + 225; -- GNAT\n+   Name_Optimize                       : constant Name_Id := N + 226;\n+   Name_Optional_Overriding            : constant Name_Id := N + 227; -- Ada 05\n+   Name_Pack                           : constant Name_Id := N + 228;\n+   Name_Page                           : constant Name_Id := N + 229;\n+   Name_Passive                        : constant Name_Id := N + 230; -- GNAT\n+   Name_Preelaborable_Initialization   : constant Name_Id := N + 231; -- Ada 05\n+   Name_Preelaborate                   : constant Name_Id := N + 232;\n+   Name_Preelaborate_05                : constant Name_Id := N + 233; -- GNAT\n+\n+   --  Note: Priority is not in this list because its name matches the\n+   --  name of the corresponding attribute. However, it is included in the\n+   --  definition of the type Pragma_Id, and the functions Get_Pragma_Id\n+   --  and Check_Pragma_Id correctly recognize and process Priority.\n+   --  Priority is a standard Ada 95 pragma.\n+\n+   Name_Psect_Object                   : constant Name_Id := N + 234; -- VMS\n+   Name_Pure                           : constant Name_Id := N + 235;\n+   Name_Pure_05                        : constant Name_Id := N + 236; -- GNAT\n+   Name_Pure_Function                  : constant Name_Id := N + 237; -- GNAT\n+   Name_Remote_Call_Interface          : constant Name_Id := N + 238;\n+   Name_Remote_Types                   : constant Name_Id := N + 239;\n+   Name_Share_Generic                  : constant Name_Id := N + 240; -- GNAT\n+   Name_Shared                         : constant Name_Id := N + 241; -- Ada 83\n+   Name_Shared_Passive                 : constant Name_Id := N + 242;\n \n    --  Note: Storage_Size is not in this list because its name matches the\n    --  name of the corresponding attribute. However, it is included in the\n@@ -480,27 +489,27 @@ package Snames is\n    --  Note: Storage_Unit is also omitted from the list because of a clash\n    --  with an attribute name, and is treated similarly.\n \n-   Name_Source_Reference               : constant Name_Id := N + 241; -- GNAT\n-   Name_Stream_Convert                 : constant Name_Id := N + 242; -- GNAT\n-   Name_Subtitle                       : constant Name_Id := N + 243; -- GNAT\n-   Name_Suppress_All                   : constant Name_Id := N + 244; -- GNAT\n-   Name_Suppress_Debug_Info            : constant Name_Id := N + 245; -- GNAT\n-   Name_Suppress_Initialization        : constant Name_Id := N + 246; -- GNAT\n-   Name_System_Name                    : constant Name_Id := N + 247; -- Ada 83\n-   Name_Task_Info                      : constant Name_Id := N + 248; -- GNAT\n-   Name_Task_Name                      : constant Name_Id := N + 249; -- GNAT\n-   Name_Task_Storage                   : constant Name_Id := N + 250; -- VMS\n-   Name_Thread_Body                    : constant Name_Id := N + 251; -- GNAT\n-   Name_Time_Slice                     : constant Name_Id := N + 252; -- GNAT\n-   Name_Title                          : constant Name_Id := N + 253; -- GNAT\n-   Name_Unchecked_Union                : constant Name_Id := N + 254; -- GNAT\n-   Name_Unimplemented_Unit             : constant Name_Id := N + 255; -- GNAT\n-   Name_Unreferenced                   : constant Name_Id := N + 256; -- GNAT\n-   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 257; -- GNAT\n-   Name_Volatile                       : constant Name_Id := N + 258;\n-   Name_Volatile_Components            : constant Name_Id := N + 259;\n-   Name_Weak_External                  : constant Name_Id := N + 260; -- GNAT\n-   Last_Pragma_Name                    : constant Name_Id := N + 260;\n+   Name_Source_Reference               : constant Name_Id := N + 243; -- GNAT\n+   Name_Stream_Convert                 : constant Name_Id := N + 244; -- GNAT\n+   Name_Subtitle                       : constant Name_Id := N + 245; -- GNAT\n+   Name_Suppress_All                   : constant Name_Id := N + 246; -- GNAT\n+   Name_Suppress_Debug_Info            : constant Name_Id := N + 247; -- GNAT\n+   Name_Suppress_Initialization        : constant Name_Id := N + 248; -- GNAT\n+   Name_System_Name                    : constant Name_Id := N + 249; -- Ada 83\n+   Name_Task_Info                      : constant Name_Id := N + 250; -- GNAT\n+   Name_Task_Name                      : constant Name_Id := N + 251; -- GNAT\n+   Name_Task_Storage                   : constant Name_Id := N + 252; -- VMS\n+   Name_Thread_Body                    : constant Name_Id := N + 253; -- GNAT\n+   Name_Time_Slice                     : constant Name_Id := N + 254; -- GNAT\n+   Name_Title                          : constant Name_Id := N + 255; -- GNAT\n+   Name_Unchecked_Union                : constant Name_Id := N + 256; -- GNAT\n+   Name_Unimplemented_Unit             : constant Name_Id := N + 257; -- GNAT\n+   Name_Unreferenced                   : constant Name_Id := N + 258; -- GNAT\n+   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 259; -- GNAT\n+   Name_Volatile                       : constant Name_Id := N + 260;\n+   Name_Volatile_Components            : constant Name_Id := N + 261;\n+   Name_Weak_External                  : constant Name_Id := N + 262; -- GNAT\n+   Last_Pragma_Name                    : constant Name_Id := N + 262;\n \n    --  Language convention names for pragma Convention/Export/Import/Interface\n    --  Note that Name_C is not included in this list, since it was already\n@@ -511,114 +520,114 @@ package Snames is\n    --  Entry and Protected, this is because these conventions cannot be\n    --  specified by a pragma.\n \n-   First_Convention_Name               : constant Name_Id := N + 261;\n-   Name_Ada                            : constant Name_Id := N + 261;\n-   Name_Assembler                      : constant Name_Id := N + 262;\n-   Name_COBOL                          : constant Name_Id := N + 263;\n-   Name_CPP                            : constant Name_Id := N + 264;\n-   Name_Fortran                        : constant Name_Id := N + 265;\n-   Name_Intrinsic                      : constant Name_Id := N + 266;\n-   Name_Java                           : constant Name_Id := N + 267;\n-   Name_Stdcall                        : constant Name_Id := N + 268;\n-   Name_Stubbed                        : constant Name_Id := N + 269;\n-   Last_Convention_Name                : constant Name_Id := N + 269;\n+   First_Convention_Name               : constant Name_Id := N + 263;\n+   Name_Ada                            : constant Name_Id := N + 263;\n+   Name_Assembler                      : constant Name_Id := N + 264;\n+   Name_COBOL                          : constant Name_Id := N + 265;\n+   Name_CPP                            : constant Name_Id := N + 266;\n+   Name_Fortran                        : constant Name_Id := N + 267;\n+   Name_Intrinsic                      : constant Name_Id := N + 268;\n+   Name_Java                           : constant Name_Id := N + 269;\n+   Name_Stdcall                        : constant Name_Id := N + 270;\n+   Name_Stubbed                        : constant Name_Id := N + 271;\n+   Last_Convention_Name                : constant Name_Id := N + 271;\n \n    --  The following names are preset as synonyms for Assembler\n \n-   Name_Asm                            : constant Name_Id := N + 270;\n-   Name_Assembly                       : constant Name_Id := N + 271;\n+   Name_Asm                            : constant Name_Id := N + 272;\n+   Name_Assembly                       : constant Name_Id := N + 273;\n \n    --  The following names are preset as synonyms for C\n \n-   Name_Default                        : constant Name_Id := N + 272;\n+   Name_Default                        : constant Name_Id := N + 274;\n    --  Name_Exernal (previously defined as pragma)\n \n    --  The following names are present as synonyms for Stdcall\n \n-   Name_DLL                            : constant Name_Id := N + 273;\n-   Name_Win32                          : constant Name_Id := N + 274;\n+   Name_DLL                            : constant Name_Id := N + 275;\n+   Name_Win32                          : constant Name_Id := N + 276;\n \n    --  Other special names used in processing pragmas\n \n-   Name_As_Is                          : constant Name_Id := N + 275;\n-   Name_Attribute_Name                 : constant Name_Id := N + 276;\n-   Name_Body_File_Name                 : constant Name_Id := N + 277;\n-   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 278;\n-   Name_Check                          : constant Name_Id := N + 279;\n-   Name_Casing                         : constant Name_Id := N + 280;\n-   Name_Code                           : constant Name_Id := N + 281;\n-   Name_Component                      : constant Name_Id := N + 282;\n-   Name_Component_Size_4               : constant Name_Id := N + 283;\n-   Name_Copy                           : constant Name_Id := N + 284;\n-   Name_D_Float                        : constant Name_Id := N + 285;\n-   Name_Descriptor                     : constant Name_Id := N + 286;\n-   Name_Dot_Replacement                : constant Name_Id := N + 287;\n-   Name_Dynamic                        : constant Name_Id := N + 288;\n-   Name_Entity                         : constant Name_Id := N + 289;\n-   Name_Entry_Count                    : constant Name_Id := N + 290;\n-   Name_External_Name                  : constant Name_Id := N + 291;\n-   Name_First_Optional_Parameter       : constant Name_Id := N + 292;\n-   Name_Form                           : constant Name_Id := N + 293;\n-   Name_G_Float                        : constant Name_Id := N + 294;\n-   Name_Gcc                            : constant Name_Id := N + 295;\n-   Name_Gnat                           : constant Name_Id := N + 296;\n-   Name_GPL                            : constant Name_Id := N + 297;\n-   Name_IEEE_Float                     : constant Name_Id := N + 298;\n-   Name_Ignore                         : constant Name_Id := N + 299;\n-   Name_Info                           : constant Name_Id := N + 300;\n-   Name_Internal                       : constant Name_Id := N + 301;\n-   Name_Link_Name                      : constant Name_Id := N + 302;\n-   Name_Lowercase                      : constant Name_Id := N + 303;\n-   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 304;\n-   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 305;\n-   Name_Max_Size                       : constant Name_Id := N + 306;\n-   Name_Mechanism                      : constant Name_Id := N + 307;\n-   Name_Message                        : constant Name_Id := N + 308;\n-   Name_Mixedcase                      : constant Name_Id := N + 309;\n-   Name_Modified_GPL                   : constant Name_Id := N + 310;\n-   Name_Name                           : constant Name_Id := N + 311;\n-   Name_NCA                            : constant Name_Id := N + 312;\n-   Name_No                             : constant Name_Id := N + 313;\n-   Name_No_Dependence                  : constant Name_Id := N + 314;\n-   Name_No_Dynamic_Attachment          : constant Name_Id := N + 315;\n-   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 316;\n-   Name_No_Requeue                     : constant Name_Id := N + 317;\n-   Name_No_Requeue_Statements          : constant Name_Id := N + 318;\n-   Name_No_Task_Attributes             : constant Name_Id := N + 319;\n-   Name_No_Task_Attributes_Package     : constant Name_Id := N + 320;\n-   Name_On                             : constant Name_Id := N + 321;\n-   Name_Parameter_Types                : constant Name_Id := N + 322;\n-   Name_Reference                      : constant Name_Id := N + 323;\n-   Name_Restricted                     : constant Name_Id := N + 324;\n-   Name_Result_Mechanism               : constant Name_Id := N + 325;\n-   Name_Result_Type                    : constant Name_Id := N + 326;\n-   Name_Runtime                        : constant Name_Id := N + 327;\n-   Name_SB                             : constant Name_Id := N + 328;\n-   Name_Secondary_Stack_Size           : constant Name_Id := N + 329;\n-   Name_Section                        : constant Name_Id := N + 330;\n-   Name_Semaphore                      : constant Name_Id := N + 331;\n-   Name_Simple_Barriers                : constant Name_Id := N + 332;\n-   Name_Spec_File_Name                 : constant Name_Id := N + 333;\n-   Name_State                          : constant Name_Id := N + 334;\n-   Name_Static                         : constant Name_Id := N + 335;\n-   Name_Stack_Size                     : constant Name_Id := N + 336;\n-   Name_Subunit_File_Name              : constant Name_Id := N + 337;\n-   Name_Task_Stack_Size_Default        : constant Name_Id := N + 338;\n-   Name_Task_Type                      : constant Name_Id := N + 339;\n-   Name_Time_Slicing_Enabled           : constant Name_Id := N + 340;\n-   Name_Top_Guard                      : constant Name_Id := N + 341;\n-   Name_UBA                            : constant Name_Id := N + 342;\n-   Name_UBS                            : constant Name_Id := N + 343;\n-   Name_UBSB                           : constant Name_Id := N + 344;\n-   Name_Unit_Name                      : constant Name_Id := N + 345;\n-   Name_Unknown                        : constant Name_Id := N + 346;\n-   Name_Unrestricted                   : constant Name_Id := N + 347;\n-   Name_Uppercase                      : constant Name_Id := N + 348;\n-   Name_User                           : constant Name_Id := N + 349;\n-   Name_VAX_Float                      : constant Name_Id := N + 350;\n-   Name_VMS                            : constant Name_Id := N + 351;\n-   Name_Vtable_Ptr                     : constant Name_Id := N + 352;\n-   Name_Working_Storage                : constant Name_Id := N + 353;\n+   Name_As_Is                          : constant Name_Id := N + 277;\n+   Name_Attribute_Name                 : constant Name_Id := N + 278;\n+   Name_Body_File_Name                 : constant Name_Id := N + 279;\n+   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 280;\n+   Name_Check                          : constant Name_Id := N + 281;\n+   Name_Casing                         : constant Name_Id := N + 282;\n+   Name_Code                           : constant Name_Id := N + 283;\n+   Name_Component                      : constant Name_Id := N + 284;\n+   Name_Component_Size_4               : constant Name_Id := N + 285;\n+   Name_Copy                           : constant Name_Id := N + 286;\n+   Name_D_Float                        : constant Name_Id := N + 287;\n+   Name_Descriptor                     : constant Name_Id := N + 288;\n+   Name_Dot_Replacement                : constant Name_Id := N + 289;\n+   Name_Dynamic                        : constant Name_Id := N + 290;\n+   Name_Entity                         : constant Name_Id := N + 291;\n+   Name_Entry_Count                    : constant Name_Id := N + 292;\n+   Name_External_Name                  : constant Name_Id := N + 293;\n+   Name_First_Optional_Parameter       : constant Name_Id := N + 294;\n+   Name_Form                           : constant Name_Id := N + 295;\n+   Name_G_Float                        : constant Name_Id := N + 296;\n+   Name_Gcc                            : constant Name_Id := N + 297;\n+   Name_Gnat                           : constant Name_Id := N + 298;\n+   Name_GPL                            : constant Name_Id := N + 299;\n+   Name_IEEE_Float                     : constant Name_Id := N + 300;\n+   Name_Ignore                         : constant Name_Id := N + 301;\n+   Name_Info                           : constant Name_Id := N + 302;\n+   Name_Internal                       : constant Name_Id := N + 303;\n+   Name_Link_Name                      : constant Name_Id := N + 304;\n+   Name_Lowercase                      : constant Name_Id := N + 305;\n+   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 306;\n+   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 307;\n+   Name_Max_Size                       : constant Name_Id := N + 308;\n+   Name_Mechanism                      : constant Name_Id := N + 309;\n+   Name_Message                        : constant Name_Id := N + 310;\n+   Name_Mixedcase                      : constant Name_Id := N + 311;\n+   Name_Modified_GPL                   : constant Name_Id := N + 312;\n+   Name_Name                           : constant Name_Id := N + 313;\n+   Name_NCA                            : constant Name_Id := N + 314;\n+   Name_No                             : constant Name_Id := N + 315;\n+   Name_No_Dependence                  : constant Name_Id := N + 316;\n+   Name_No_Dynamic_Attachment          : constant Name_Id := N + 317;\n+   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 318;\n+   Name_No_Requeue                     : constant Name_Id := N + 319;\n+   Name_No_Requeue_Statements          : constant Name_Id := N + 320;\n+   Name_No_Task_Attributes             : constant Name_Id := N + 321;\n+   Name_No_Task_Attributes_Package     : constant Name_Id := N + 322;\n+   Name_On                             : constant Name_Id := N + 323;\n+   Name_Parameter_Types                : constant Name_Id := N + 324;\n+   Name_Reference                      : constant Name_Id := N + 325;\n+   Name_Restricted                     : constant Name_Id := N + 326;\n+   Name_Result_Mechanism               : constant Name_Id := N + 327;\n+   Name_Result_Type                    : constant Name_Id := N + 328;\n+   Name_Runtime                        : constant Name_Id := N + 329;\n+   Name_SB                             : constant Name_Id := N + 330;\n+   Name_Secondary_Stack_Size           : constant Name_Id := N + 331;\n+   Name_Section                        : constant Name_Id := N + 332;\n+   Name_Semaphore                      : constant Name_Id := N + 333;\n+   Name_Simple_Barriers                : constant Name_Id := N + 334;\n+   Name_Spec_File_Name                 : constant Name_Id := N + 335;\n+   Name_State                          : constant Name_Id := N + 336;\n+   Name_Static                         : constant Name_Id := N + 337;\n+   Name_Stack_Size                     : constant Name_Id := N + 338;\n+   Name_Subunit_File_Name              : constant Name_Id := N + 339;\n+   Name_Task_Stack_Size_Default        : constant Name_Id := N + 340;\n+   Name_Task_Type                      : constant Name_Id := N + 341;\n+   Name_Time_Slicing_Enabled           : constant Name_Id := N + 342;\n+   Name_Top_Guard                      : constant Name_Id := N + 343;\n+   Name_UBA                            : constant Name_Id := N + 344;\n+   Name_UBS                            : constant Name_Id := N + 345;\n+   Name_UBSB                           : constant Name_Id := N + 346;\n+   Name_Unit_Name                      : constant Name_Id := N + 347;\n+   Name_Unknown                        : constant Name_Id := N + 348;\n+   Name_Unrestricted                   : constant Name_Id := N + 349;\n+   Name_Uppercase                      : constant Name_Id := N + 350;\n+   Name_User                           : constant Name_Id := N + 351;\n+   Name_VAX_Float                      : constant Name_Id := N + 352;\n+   Name_VMS                            : constant Name_Id := N + 353;\n+   Name_Vtable_Ptr                     : constant Name_Id := N + 354;\n+   Name_Working_Storage                : constant Name_Id := N + 355;\n \n    --  Names of recognized attributes. The entries with the comment \"Ada 83\"\n    --  are attributes that are defined in Ada 83, but not in Ada 95. These\n@@ -632,433 +641,440 @@ package Snames is\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n-   First_Attribute_Name                : constant Name_Id := N + 354;\n-   Name_Abort_Signal                   : constant Name_Id := N + 354; -- GNAT\n-   Name_Access                         : constant Name_Id := N + 355;\n-   Name_Address                        : constant Name_Id := N + 356;\n-   Name_Address_Size                   : constant Name_Id := N + 357; -- GNAT\n-   Name_Aft                            : constant Name_Id := N + 358;\n-   Name_Alignment                      : constant Name_Id := N + 359;\n-   Name_Asm_Input                      : constant Name_Id := N + 360; -- GNAT\n-   Name_Asm_Output                     : constant Name_Id := N + 361; -- GNAT\n-   Name_AST_Entry                      : constant Name_Id := N + 362; -- VMS\n-   Name_Bit                            : constant Name_Id := N + 363; -- GNAT\n-   Name_Bit_Order                      : constant Name_Id := N + 364;\n-   Name_Bit_Position                   : constant Name_Id := N + 365; -- GNAT\n-   Name_Body_Version                   : constant Name_Id := N + 366;\n-   Name_Callable                       : constant Name_Id := N + 367;\n-   Name_Caller                         : constant Name_Id := N + 368;\n-   Name_Code_Address                   : constant Name_Id := N + 369; -- GNAT\n-   Name_Component_Size                 : constant Name_Id := N + 370;\n-   Name_Compose                        : constant Name_Id := N + 371;\n-   Name_Constrained                    : constant Name_Id := N + 372;\n-   Name_Count                          : constant Name_Id := N + 373;\n-   Name_Default_Bit_Order              : constant Name_Id := N + 374; -- GNAT\n-   Name_Definite                       : constant Name_Id := N + 375;\n-   Name_Delta                          : constant Name_Id := N + 376;\n-   Name_Denorm                         : constant Name_Id := N + 377;\n-   Name_Digits                         : constant Name_Id := N + 378;\n-   Name_Elaborated                     : constant Name_Id := N + 379; -- GNAT\n-   Name_Emax                           : constant Name_Id := N + 380; -- Ada 83\n-   Name_Enum_Rep                       : constant Name_Id := N + 381; -- GNAT\n-   Name_Epsilon                        : constant Name_Id := N + 382; -- Ada 83\n-   Name_Exponent                       : constant Name_Id := N + 383;\n-   Name_External_Tag                   : constant Name_Id := N + 384;\n-   Name_First                          : constant Name_Id := N + 385;\n-   Name_First_Bit                      : constant Name_Id := N + 386;\n-   Name_Fixed_Value                    : constant Name_Id := N + 387; -- GNAT\n-   Name_Fore                           : constant Name_Id := N + 388;\n-   Name_Has_Access_Values              : constant Name_Id := N + 389; -- GNAT\n-   Name_Has_Discriminants              : constant Name_Id := N + 390; -- GNAT\n-   Name_Identity                       : constant Name_Id := N + 391;\n-   Name_Img                            : constant Name_Id := N + 392; -- GNAT\n-   Name_Integer_Value                  : constant Name_Id := N + 393; -- GNAT\n-   Name_Large                          : constant Name_Id := N + 394; -- Ada 83\n-   Name_Last                           : constant Name_Id := N + 395;\n-   Name_Last_Bit                       : constant Name_Id := N + 396;\n-   Name_Leading_Part                   : constant Name_Id := N + 397;\n-   Name_Length                         : constant Name_Id := N + 398;\n-   Name_Machine_Emax                   : constant Name_Id := N + 399;\n-   Name_Machine_Emin                   : constant Name_Id := N + 400;\n-   Name_Machine_Mantissa               : constant Name_Id := N + 401;\n-   Name_Machine_Overflows              : constant Name_Id := N + 402;\n-   Name_Machine_Radix                  : constant Name_Id := N + 403;\n-   Name_Machine_Rounding               : constant Name_Id := N + 404; -- Ada 05\n-   Name_Machine_Rounds                 : constant Name_Id := N + 405;\n-   Name_Machine_Size                   : constant Name_Id := N + 406; -- GNAT\n-   Name_Mantissa                       : constant Name_Id := N + 407; -- Ada 83\n-   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 408;\n-   Name_Maximum_Alignment              : constant Name_Id := N + 409; -- GNAT\n-   Name_Mechanism_Code                 : constant Name_Id := N + 410; -- GNAT\n-   Name_Mod                            : constant Name_Id := N + 411;\n-   Name_Model_Emin                     : constant Name_Id := N + 412;\n-   Name_Model_Epsilon                  : constant Name_Id := N + 413;\n-   Name_Model_Mantissa                 : constant Name_Id := N + 414;\n-   Name_Model_Small                    : constant Name_Id := N + 415;\n-   Name_Modulus                        : constant Name_Id := N + 416;\n-   Name_Null_Parameter                 : constant Name_Id := N + 417; -- GNAT\n-   Name_Object_Size                    : constant Name_Id := N + 418; -- GNAT\n-   Name_Partition_ID                   : constant Name_Id := N + 419;\n-   Name_Passed_By_Reference            : constant Name_Id := N + 420; -- GNAT\n-   Name_Pool_Address                   : constant Name_Id := N + 421;\n-   Name_Pos                            : constant Name_Id := N + 422;\n-   Name_Position                       : constant Name_Id := N + 423;\n-   Name_Range                          : constant Name_Id := N + 424;\n-   Name_Range_Length                   : constant Name_Id := N + 425; -- GNAT\n-   Name_Round                          : constant Name_Id := N + 426;\n-   Name_Safe_Emax                      : constant Name_Id := N + 427; -- Ada 83\n-   Name_Safe_First                     : constant Name_Id := N + 428;\n-   Name_Safe_Large                     : constant Name_Id := N + 429; -- Ada 83\n-   Name_Safe_Last                      : constant Name_Id := N + 430;\n-   Name_Safe_Small                     : constant Name_Id := N + 431; -- Ada 83\n-   Name_Scale                          : constant Name_Id := N + 432;\n-   Name_Scaling                        : constant Name_Id := N + 433;\n-   Name_Signed_Zeros                   : constant Name_Id := N + 434;\n-   Name_Size                           : constant Name_Id := N + 435;\n-   Name_Small                          : constant Name_Id := N + 436;\n-   Name_Storage_Size                   : constant Name_Id := N + 437;\n-   Name_Storage_Unit                   : constant Name_Id := N + 438; -- GNAT\n-   Name_Stream_Size                    : constant Name_Id := N + 439; -- Ada 05\n-   Name_Tag                            : constant Name_Id := N + 440;\n-   Name_Target_Name                    : constant Name_Id := N + 441; -- GNAT\n-   Name_Terminated                     : constant Name_Id := N + 442;\n-   Name_To_Address                     : constant Name_Id := N + 443; -- GNAT\n-   Name_Type_Class                     : constant Name_Id := N + 444; -- GNAT\n-   Name_UET_Address                    : constant Name_Id := N + 445; -- GNAT\n-   Name_Unbiased_Rounding              : constant Name_Id := N + 446;\n-   Name_Unchecked_Access               : constant Name_Id := N + 447;\n-   Name_Unconstrained_Array            : constant Name_Id := N + 448;\n-   Name_Universal_Literal_String       : constant Name_Id := N + 449; -- GNAT\n-   Name_Unrestricted_Access            : constant Name_Id := N + 450; -- GNAT\n-   Name_VADS_Size                      : constant Name_Id := N + 451; -- GNAT\n-   Name_Val                            : constant Name_Id := N + 452;\n-   Name_Valid                          : constant Name_Id := N + 453;\n-   Name_Value_Size                     : constant Name_Id := N + 454; -- GNAT\n-   Name_Version                        : constant Name_Id := N + 455;\n-   Name_Wchar_T_Size                   : constant Name_Id := N + 456; -- GNAT\n-   Name_Wide_Wide_Width                : constant Name_Id := N + 457; -- Ada 05\n-   Name_Wide_Width                     : constant Name_Id := N + 458;\n-   Name_Width                          : constant Name_Id := N + 459;\n-   Name_Word_Size                      : constant Name_Id := N + 460; -- GNAT\n+   First_Attribute_Name                : constant Name_Id := N + 356;\n+   Name_Abort_Signal                   : constant Name_Id := N + 356; -- GNAT\n+   Name_Access                         : constant Name_Id := N + 357;\n+   Name_Address                        : constant Name_Id := N + 358;\n+   Name_Address_Size                   : constant Name_Id := N + 359; -- GNAT\n+   Name_Aft                            : constant Name_Id := N + 360;\n+   Name_Alignment                      : constant Name_Id := N + 361;\n+   Name_Asm_Input                      : constant Name_Id := N + 362; -- GNAT\n+   Name_Asm_Output                     : constant Name_Id := N + 363; -- GNAT\n+   Name_AST_Entry                      : constant Name_Id := N + 364; -- VMS\n+   Name_Bit                            : constant Name_Id := N + 365; -- GNAT\n+   Name_Bit_Order                      : constant Name_Id := N + 366;\n+   Name_Bit_Position                   : constant Name_Id := N + 367; -- GNAT\n+   Name_Body_Version                   : constant Name_Id := N + 368;\n+   Name_Callable                       : constant Name_Id := N + 369;\n+   Name_Caller                         : constant Name_Id := N + 370;\n+   Name_Code_Address                   : constant Name_Id := N + 371; -- GNAT\n+   Name_Component_Size                 : constant Name_Id := N + 372;\n+   Name_Compose                        : constant Name_Id := N + 373;\n+   Name_Constrained                    : constant Name_Id := N + 374;\n+   Name_Count                          : constant Name_Id := N + 375;\n+   Name_Default_Bit_Order              : constant Name_Id := N + 376; -- GNAT\n+   Name_Definite                       : constant Name_Id := N + 377;\n+   Name_Delta                          : constant Name_Id := N + 378;\n+   Name_Denorm                         : constant Name_Id := N + 379;\n+   Name_Digits                         : constant Name_Id := N + 380;\n+   Name_Elaborated                     : constant Name_Id := N + 381; -- GNAT\n+   Name_Emax                           : constant Name_Id := N + 382; -- Ada 83\n+   Name_Enum_Rep                       : constant Name_Id := N + 383; -- GNAT\n+   Name_Epsilon                        : constant Name_Id := N + 384; -- Ada 83\n+   Name_Exponent                       : constant Name_Id := N + 385;\n+   Name_External_Tag                   : constant Name_Id := N + 386;\n+   Name_First                          : constant Name_Id := N + 387;\n+   Name_First_Bit                      : constant Name_Id := N + 388;\n+   Name_Fixed_Value                    : constant Name_Id := N + 389; -- GNAT\n+   Name_Fore                           : constant Name_Id := N + 390;\n+   Name_Has_Access_Values              : constant Name_Id := N + 391; -- GNAT\n+   Name_Has_Discriminants              : constant Name_Id := N + 392; -- GNAT\n+   Name_Identity                       : constant Name_Id := N + 393;\n+   Name_Img                            : constant Name_Id := N + 394; -- GNAT\n+   Name_Integer_Value                  : constant Name_Id := N + 395; -- GNAT\n+   Name_Large                          : constant Name_Id := N + 396; -- Ada 83\n+   Name_Last                           : constant Name_Id := N + 397;\n+   Name_Last_Bit                       : constant Name_Id := N + 398;\n+   Name_Leading_Part                   : constant Name_Id := N + 399;\n+   Name_Length                         : constant Name_Id := N + 400;\n+   Name_Machine_Emax                   : constant Name_Id := N + 401;\n+   Name_Machine_Emin                   : constant Name_Id := N + 402;\n+   Name_Machine_Mantissa               : constant Name_Id := N + 403;\n+   Name_Machine_Overflows              : constant Name_Id := N + 404;\n+   Name_Machine_Radix                  : constant Name_Id := N + 405;\n+   Name_Machine_Rounding               : constant Name_Id := N + 406; -- Ada 05\n+   Name_Machine_Rounds                 : constant Name_Id := N + 407;\n+   Name_Machine_Size                   : constant Name_Id := N + 408; -- GNAT\n+   Name_Mantissa                       : constant Name_Id := N + 409; -- Ada 83\n+   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 410;\n+   Name_Maximum_Alignment              : constant Name_Id := N + 411; -- GNAT\n+   Name_Mechanism_Code                 : constant Name_Id := N + 412; -- GNAT\n+   Name_Mod                            : constant Name_Id := N + 413;\n+   Name_Model_Emin                     : constant Name_Id := N + 414;\n+   Name_Model_Epsilon                  : constant Name_Id := N + 415;\n+   Name_Model_Mantissa                 : constant Name_Id := N + 416;\n+   Name_Model_Small                    : constant Name_Id := N + 417;\n+   Name_Modulus                        : constant Name_Id := N + 418;\n+   Name_Null_Parameter                 : constant Name_Id := N + 419; -- GNAT\n+   Name_Object_Size                    : constant Name_Id := N + 420; -- GNAT\n+   Name_Partition_ID                   : constant Name_Id := N + 421;\n+   Name_Passed_By_Reference            : constant Name_Id := N + 422; -- GNAT\n+   Name_Pool_Address                   : constant Name_Id := N + 423;\n+   Name_Pos                            : constant Name_Id := N + 424;\n+   Name_Position                       : constant Name_Id := N + 425;\n+   Name_Priority                       : constant Name_Id := N + 426; -- Ada 05\n+   Name_Range                          : constant Name_Id := N + 427;\n+   Name_Range_Length                   : constant Name_Id := N + 428; -- GNAT\n+   Name_Round                          : constant Name_Id := N + 429;\n+   Name_Safe_Emax                      : constant Name_Id := N + 430; -- Ada 83\n+   Name_Safe_First                     : constant Name_Id := N + 431;\n+   Name_Safe_Large                     : constant Name_Id := N + 432; -- Ada 83\n+   Name_Safe_Last                      : constant Name_Id := N + 433;\n+   Name_Safe_Small                     : constant Name_Id := N + 434; -- Ada 83\n+   Name_Scale                          : constant Name_Id := N + 435;\n+   Name_Scaling                        : constant Name_Id := N + 436;\n+   Name_Signed_Zeros                   : constant Name_Id := N + 437;\n+   Name_Size                           : constant Name_Id := N + 438;\n+   Name_Small                          : constant Name_Id := N + 439;\n+   Name_Storage_Size                   : constant Name_Id := N + 440;\n+   Name_Storage_Unit                   : constant Name_Id := N + 441; -- GNAT\n+   Name_Stream_Size                    : constant Name_Id := N + 442; -- Ada 05\n+   Name_Tag                            : constant Name_Id := N + 443;\n+   Name_Target_Name                    : constant Name_Id := N + 444; -- GNAT\n+   Name_Terminated                     : constant Name_Id := N + 445;\n+   Name_To_Address                     : constant Name_Id := N + 446; -- GNAT\n+   Name_Type_Class                     : constant Name_Id := N + 447; -- GNAT\n+   Name_UET_Address                    : constant Name_Id := N + 448; -- GNAT\n+   Name_Unbiased_Rounding              : constant Name_Id := N + 449;\n+   Name_Unchecked_Access               : constant Name_Id := N + 450;\n+   Name_Unconstrained_Array            : constant Name_Id := N + 451;\n+   Name_Universal_Literal_String       : constant Name_Id := N + 452; -- GNAT\n+   Name_Unrestricted_Access            : constant Name_Id := N + 453; -- GNAT\n+   Name_VADS_Size                      : constant Name_Id := N + 454; -- GNAT\n+   Name_Val                            : constant Name_Id := N + 455;\n+   Name_Valid                          : constant Name_Id := N + 456;\n+   Name_Value_Size                     : constant Name_Id := N + 457; -- GNAT\n+   Name_Version                        : constant Name_Id := N + 458;\n+   Name_Wchar_T_Size                   : constant Name_Id := N + 459; -- GNAT\n+   Name_Wide_Wide_Width                : constant Name_Id := N + 460; -- Ada 05\n+   Name_Wide_Width                     : constant Name_Id := N + 461;\n+   Name_Width                          : constant Name_Id := N + 462;\n+   Name_Word_Size                      : constant Name_Id := N + 463; -- GNAT\n \n    --  Attributes that designate attributes returning renamable functions,\n    --  i.e. functions that return other than a universal value and that\n    --  have non-universal arguments.\n \n-   First_Renamable_Function_Attribute  : constant Name_Id := N + 461;\n-   Name_Adjacent                       : constant Name_Id := N + 461;\n-   Name_Ceiling                        : constant Name_Id := N + 462;\n-   Name_Copy_Sign                      : constant Name_Id := N + 463;\n-   Name_Floor                          : constant Name_Id := N + 464;\n-   Name_Fraction                       : constant Name_Id := N + 465;\n-   Name_Image                          : constant Name_Id := N + 466;\n-   Name_Input                          : constant Name_Id := N + 467;\n-   Name_Machine                        : constant Name_Id := N + 468;\n-   Name_Max                            : constant Name_Id := N + 469;\n-   Name_Min                            : constant Name_Id := N + 470;\n-   Name_Model                          : constant Name_Id := N + 471;\n-   Name_Pred                           : constant Name_Id := N + 472;\n-   Name_Remainder                      : constant Name_Id := N + 473;\n-   Name_Rounding                       : constant Name_Id := N + 474;\n-   Name_Succ                           : constant Name_Id := N + 475;\n-   Name_Truncation                     : constant Name_Id := N + 476;\n-   Name_Value                          : constant Name_Id := N + 477;\n-   Name_Wide_Image                     : constant Name_Id := N + 478;\n-   Name_Wide_Wide_Image                : constant Name_Id := N + 479;\n-   Name_Wide_Value                     : constant Name_Id := N + 480;\n-   Name_Wide_Wide_Value                : constant Name_Id := N + 481;\n-   Last_Renamable_Function_Attribute   : constant Name_Id := N + 481;\n+   First_Renamable_Function_Attribute  : constant Name_Id := N + 464;\n+   Name_Adjacent                       : constant Name_Id := N + 464;\n+   Name_Ceiling                        : constant Name_Id := N + 465;\n+   Name_Copy_Sign                      : constant Name_Id := N + 466;\n+   Name_Floor                          : constant Name_Id := N + 467;\n+   Name_Fraction                       : constant Name_Id := N + 468;\n+   Name_Image                          : constant Name_Id := N + 469;\n+   Name_Input                          : constant Name_Id := N + 470;\n+   Name_Machine                        : constant Name_Id := N + 471;\n+   Name_Max                            : constant Name_Id := N + 472;\n+   Name_Min                            : constant Name_Id := N + 473;\n+   Name_Model                          : constant Name_Id := N + 474;\n+   Name_Pred                           : constant Name_Id := N + 475;\n+   Name_Remainder                      : constant Name_Id := N + 476;\n+   Name_Rounding                       : constant Name_Id := N + 477;\n+   Name_Succ                           : constant Name_Id := N + 478;\n+   Name_Truncation                     : constant Name_Id := N + 479;\n+   Name_Value                          : constant Name_Id := N + 480;\n+   Name_Wide_Image                     : constant Name_Id := N + 481;\n+   Name_Wide_Wide_Image                : constant Name_Id := N + 482;\n+   Name_Wide_Value                     : constant Name_Id := N + 483;\n+   Name_Wide_Wide_Value                : constant Name_Id := N + 484;\n+   Last_Renamable_Function_Attribute   : constant Name_Id := N + 484;\n \n    --  Attributes that designate procedures\n \n-   First_Procedure_Attribute           : constant Name_Id := N + 482;\n-   Name_Output                         : constant Name_Id := N + 482;\n-   Name_Read                           : constant Name_Id := N + 483;\n-   Name_Write                          : constant Name_Id := N + 484;\n-   Last_Procedure_Attribute            : constant Name_Id := N + 484;\n+   First_Procedure_Attribute           : constant Name_Id := N + 485;\n+   Name_Output                         : constant Name_Id := N + 485;\n+   Name_Read                           : constant Name_Id := N + 486;\n+   Name_Write                          : constant Name_Id := N + 487;\n+   Last_Procedure_Attribute            : constant Name_Id := N + 487;\n \n    --  Remaining attributes are ones that return entities\n \n-   First_Entity_Attribute_Name         : constant Name_Id := N + 485;\n-   Name_Elab_Body                      : constant Name_Id := N + 485; -- GNAT\n-   Name_Elab_Spec                      : constant Name_Id := N + 486; -- GNAT\n-   Name_Storage_Pool                   : constant Name_Id := N + 487;\n+   First_Entity_Attribute_Name         : constant Name_Id := N + 488;\n+   Name_Elab_Body                      : constant Name_Id := N + 488; -- GNAT\n+   Name_Elab_Spec                      : constant Name_Id := N + 489; -- GNAT\n+   Name_Storage_Pool                   : constant Name_Id := N + 490;\n \n    --  These attributes are the ones that return types\n \n-   First_Type_Attribute_Name           : constant Name_Id := N + 488;\n-   Name_Base                           : constant Name_Id := N + 488;\n-   Name_Class                          : constant Name_Id := N + 489;\n-   Last_Type_Attribute_Name            : constant Name_Id := N + 489;\n-   Last_Entity_Attribute_Name          : constant Name_Id := N + 489;\n-   Last_Attribute_Name                 : constant Name_Id := N + 489;\n+   First_Type_Attribute_Name           : constant Name_Id := N + 491;\n+   Name_Base                           : constant Name_Id := N + 491;\n+   Name_Class                          : constant Name_Id := N + 492;\n+   Name_Stub_Type                      : constant Name_Id := N + 493;\n+   Last_Type_Attribute_Name            : constant Name_Id := N + 493;\n+   Last_Entity_Attribute_Name          : constant Name_Id := N + 493;\n+   Last_Attribute_Name                 : constant Name_Id := N + 493;\n \n    --  Names of recognized locking policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. C for Ceiling_Locking). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Locking_Policy_Name           : constant Name_Id := N + 490;\n-   Name_Ceiling_Locking                : constant Name_Id := N + 490;\n-   Name_Inheritance_Locking            : constant Name_Id := N + 491;\n-   Last_Locking_Policy_Name            : constant Name_Id := N + 491;\n+   First_Locking_Policy_Name           : constant Name_Id := N + 494;\n+   Name_Ceiling_Locking                : constant Name_Id := N + 494;\n+   Name_Inheritance_Locking            : constant Name_Id := N + 495;\n+   Last_Locking_Policy_Name            : constant Name_Id := N + 495;\n \n    --  Names of recognized queuing policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Queuing). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Queuing_Policy_Name           : constant Name_Id := N + 492;\n-   Name_FIFO_Queuing                   : constant Name_Id := N + 492;\n-   Name_Priority_Queuing               : constant Name_Id := N + 493;\n-   Last_Queuing_Policy_Name            : constant Name_Id := N + 493;\n+   First_Queuing_Policy_Name           : constant Name_Id := N + 496;\n+   Name_FIFO_Queuing                   : constant Name_Id := N + 496;\n+   Name_Priority_Queuing               : constant Name_Id := N + 497;\n+   Last_Queuing_Policy_Name            : constant Name_Id := N + 497;\n \n    --  Names of recognized task dispatching policy identifiers\n \n    --  Note: policies are identified by the first character of the\n-   --  name (e.g. F for FIFO_WIthinn_Priorities). If new policy names\n+   --  name (e.g. F for FIFO_Within_Priorities). If new policy names\n    --  are added, the first character must be distinct.\n \n-   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 494;\n-   Name_FIFO_Within_Priorities         : constant Name_Id := N + 494;\n-   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 494;\n+   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 498;\n+   Name_EDF_Across_Priorities          : constant Name_Id := N + 498;\n+   Name_FIFO_Within_Priorities         : constant Name_Id := N + 499;\n+   Name_Non_Preemptive_Within_Priorities : constant Name_Id := N + 500;\n+   Name_Round_Robin_Within_Priorities  : constant Name_Id := N + 501;\n+   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 501;\n \n    --  Names of recognized checks for pragma Suppress\n \n-   First_Check_Name                    : constant Name_Id := N + 495;\n-   Name_Access_Check                   : constant Name_Id := N + 495;\n-   Name_Accessibility_Check            : constant Name_Id := N + 496;\n-   Name_Discriminant_Check             : constant Name_Id := N + 497;\n-   Name_Division_Check                 : constant Name_Id := N + 498;\n-   Name_Elaboration_Check              : constant Name_Id := N + 499;\n-   Name_Index_Check                    : constant Name_Id := N + 500;\n-   Name_Length_Check                   : constant Name_Id := N + 501;\n-   Name_Overflow_Check                 : constant Name_Id := N + 502;\n-   Name_Range_Check                    : constant Name_Id := N + 503;\n-   Name_Storage_Check                  : constant Name_Id := N + 504;\n-   Name_Tag_Check                      : constant Name_Id := N + 505;\n-   Name_All_Checks                     : constant Name_Id := N + 506;\n-   Last_Check_Name                     : constant Name_Id := N + 506;\n+   First_Check_Name                    : constant Name_Id := N + 502;\n+   Name_Access_Check                   : constant Name_Id := N + 502;\n+   Name_Accessibility_Check            : constant Name_Id := N + 503;\n+   Name_Alignment_Check                : constant Name_Id := N + 504;\n+   Name_Discriminant_Check             : constant Name_Id := N + 505;\n+   Name_Division_Check                 : constant Name_Id := N + 506;\n+   Name_Elaboration_Check              : constant Name_Id := N + 507;\n+   Name_Index_Check                    : constant Name_Id := N + 508;\n+   Name_Length_Check                   : constant Name_Id := N + 509;\n+   Name_Overflow_Check                 : constant Name_Id := N + 510;\n+   Name_Range_Check                    : constant Name_Id := N + 511;\n+   Name_Storage_Check                  : constant Name_Id := N + 512;\n+   Name_Tag_Check                      : constant Name_Id := N + 513;\n+   Name_Validity_Check                 : constant Name_Id := N + 514;\n+   Name_All_Checks                     : constant Name_Id := N + 515;\n+   Last_Check_Name                     : constant Name_Id := N + 515;\n \n    --  Names corresponding to reserved keywords, excluding those already\n    --  declared in the attribute list (Access, Delta, Digits, Mod, Range).\n \n-   Name_Abort                          : constant Name_Id := N + 507;\n-   Name_Abs                            : constant Name_Id := N + 508;\n-   Name_Accept                         : constant Name_Id := N + 509;\n-   Name_And                            : constant Name_Id := N + 510;\n-   Name_All                            : constant Name_Id := N + 511;\n-   Name_Array                          : constant Name_Id := N + 512;\n-   Name_At                             : constant Name_Id := N + 513;\n-   Name_Begin                          : constant Name_Id := N + 514;\n-   Name_Body                           : constant Name_Id := N + 515;\n-   Name_Case                           : constant Name_Id := N + 516;\n-   Name_Constant                       : constant Name_Id := N + 517;\n-   Name_Declare                        : constant Name_Id := N + 518;\n-   Name_Delay                          : constant Name_Id := N + 519;\n-   Name_Do                             : constant Name_Id := N + 520;\n-   Name_Else                           : constant Name_Id := N + 521;\n-   Name_Elsif                          : constant Name_Id := N + 522;\n-   Name_End                            : constant Name_Id := N + 523;\n-   Name_Entry                          : constant Name_Id := N + 524;\n-   Name_Exception                      : constant Name_Id := N + 525;\n-   Name_Exit                           : constant Name_Id := N + 526;\n-   Name_For                            : constant Name_Id := N + 527;\n-   Name_Function                       : constant Name_Id := N + 528;\n-   Name_Generic                        : constant Name_Id := N + 529;\n-   Name_Goto                           : constant Name_Id := N + 530;\n-   Name_If                             : constant Name_Id := N + 531;\n-   Name_In                             : constant Name_Id := N + 532;\n-   Name_Is                             : constant Name_Id := N + 533;\n-   Name_Limited                        : constant Name_Id := N + 534;\n-   Name_Loop                           : constant Name_Id := N + 535;\n-   Name_New                            : constant Name_Id := N + 536;\n-   Name_Not                            : constant Name_Id := N + 537;\n-   Name_Null                           : constant Name_Id := N + 538;\n-   Name_Of                             : constant Name_Id := N + 539;\n-   Name_Or                             : constant Name_Id := N + 540;\n-   Name_Others                         : constant Name_Id := N + 541;\n-   Name_Out                            : constant Name_Id := N + 542;\n-   Name_Package                        : constant Name_Id := N + 543;\n-   Name_Pragma                         : constant Name_Id := N + 544;\n-   Name_Private                        : constant Name_Id := N + 545;\n-   Name_Procedure                      : constant Name_Id := N + 546;\n-   Name_Raise                          : constant Name_Id := N + 547;\n-   Name_Record                         : constant Name_Id := N + 548;\n-   Name_Rem                            : constant Name_Id := N + 549;\n-   Name_Renames                        : constant Name_Id := N + 550;\n-   Name_Return                         : constant Name_Id := N + 551;\n-   Name_Reverse                        : constant Name_Id := N + 552;\n-   Name_Select                         : constant Name_Id := N + 553;\n-   Name_Separate                       : constant Name_Id := N + 554;\n-   Name_Subtype                        : constant Name_Id := N + 555;\n-   Name_Task                           : constant Name_Id := N + 556;\n-   Name_Terminate                      : constant Name_Id := N + 557;\n-   Name_Then                           : constant Name_Id := N + 558;\n-   Name_Type                           : constant Name_Id := N + 559;\n-   Name_Use                            : constant Name_Id := N + 560;\n-   Name_When                           : constant Name_Id := N + 561;\n-   Name_While                          : constant Name_Id := N + 562;\n-   Name_With                           : constant Name_Id := N + 563;\n-   Name_Xor                            : constant Name_Id := N + 564;\n+   Name_Abort                          : constant Name_Id := N + 516;\n+   Name_Abs                            : constant Name_Id := N + 517;\n+   Name_Accept                         : constant Name_Id := N + 518;\n+   Name_And                            : constant Name_Id := N + 519;\n+   Name_All                            : constant Name_Id := N + 520;\n+   Name_Array                          : constant Name_Id := N + 521;\n+   Name_At                             : constant Name_Id := N + 522;\n+   Name_Begin                          : constant Name_Id := N + 523;\n+   Name_Body                           : constant Name_Id := N + 524;\n+   Name_Case                           : constant Name_Id := N + 525;\n+   Name_Constant                       : constant Name_Id := N + 526;\n+   Name_Declare                        : constant Name_Id := N + 527;\n+   Name_Delay                          : constant Name_Id := N + 528;\n+   Name_Do                             : constant Name_Id := N + 529;\n+   Name_Else                           : constant Name_Id := N + 530;\n+   Name_Elsif                          : constant Name_Id := N + 531;\n+   Name_End                            : constant Name_Id := N + 532;\n+   Name_Entry                          : constant Name_Id := N + 533;\n+   Name_Exception                      : constant Name_Id := N + 534;\n+   Name_Exit                           : constant Name_Id := N + 535;\n+   Name_For                            : constant Name_Id := N + 536;\n+   Name_Function                       : constant Name_Id := N + 537;\n+   Name_Generic                        : constant Name_Id := N + 538;\n+   Name_Goto                           : constant Name_Id := N + 539;\n+   Name_If                             : constant Name_Id := N + 540;\n+   Name_In                             : constant Name_Id := N + 541;\n+   Name_Is                             : constant Name_Id := N + 542;\n+   Name_Limited                        : constant Name_Id := N + 543;\n+   Name_Loop                           : constant Name_Id := N + 544;\n+   Name_New                            : constant Name_Id := N + 545;\n+   Name_Not                            : constant Name_Id := N + 546;\n+   Name_Null                           : constant Name_Id := N + 547;\n+   Name_Of                             : constant Name_Id := N + 548;\n+   Name_Or                             : constant Name_Id := N + 549;\n+   Name_Others                         : constant Name_Id := N + 550;\n+   Name_Out                            : constant Name_Id := N + 551;\n+   Name_Package                        : constant Name_Id := N + 552;\n+   Name_Pragma                         : constant Name_Id := N + 553;\n+   Name_Private                        : constant Name_Id := N + 554;\n+   Name_Procedure                      : constant Name_Id := N + 555;\n+   Name_Raise                          : constant Name_Id := N + 556;\n+   Name_Record                         : constant Name_Id := N + 557;\n+   Name_Rem                            : constant Name_Id := N + 558;\n+   Name_Renames                        : constant Name_Id := N + 559;\n+   Name_Return                         : constant Name_Id := N + 560;\n+   Name_Reverse                        : constant Name_Id := N + 561;\n+   Name_Select                         : constant Name_Id := N + 562;\n+   Name_Separate                       : constant Name_Id := N + 563;\n+   Name_Subtype                        : constant Name_Id := N + 564;\n+   Name_Task                           : constant Name_Id := N + 565;\n+   Name_Terminate                      : constant Name_Id := N + 566;\n+   Name_Then                           : constant Name_Id := N + 567;\n+   Name_Type                           : constant Name_Id := N + 568;\n+   Name_Use                            : constant Name_Id := N + 569;\n+   Name_When                           : constant Name_Id := N + 570;\n+   Name_While                          : constant Name_Id := N + 571;\n+   Name_With                           : constant Name_Id := N + 572;\n+   Name_Xor                            : constant Name_Id := N + 573;\n \n    --  Names of intrinsic subprograms\n \n    --  Note: Asm is missing from this list, since Asm is a legitimate\n    --  convention name. So is To_Adress, which is a GNAT attribute.\n \n-   First_Intrinsic_Name                 : constant Name_Id := N + 565;\n-   Name_Divide                          : constant Name_Id := N + 565;\n-   Name_Enclosing_Entity                : constant Name_Id := N + 566;\n-   Name_Exception_Information           : constant Name_Id := N + 567;\n-   Name_Exception_Message               : constant Name_Id := N + 568;\n-   Name_Exception_Name                  : constant Name_Id := N + 569;\n-   Name_File                            : constant Name_Id := N + 570;\n-   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 571;\n-   Name_Import_Address                  : constant Name_Id := N + 572;\n-   Name_Import_Largest_Value            : constant Name_Id := N + 573;\n-   Name_Import_Value                    : constant Name_Id := N + 574;\n-   Name_Is_Negative                     : constant Name_Id := N + 575;\n-   Name_Line                            : constant Name_Id := N + 576;\n-   Name_Rotate_Left                     : constant Name_Id := N + 577;\n-   Name_Rotate_Right                    : constant Name_Id := N + 578;\n-   Name_Shift_Left                      : constant Name_Id := N + 579;\n-   Name_Shift_Right                     : constant Name_Id := N + 580;\n-   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 581;\n-   Name_Source_Location                 : constant Name_Id := N + 582;\n-   Name_Unchecked_Conversion            : constant Name_Id := N + 583;\n-   Name_Unchecked_Deallocation          : constant Name_Id := N + 584;\n-   Name_To_Pointer                      : constant Name_Id := N + 585;\n-   Last_Intrinsic_Name                  : constant Name_Id := N + 585;\n+   First_Intrinsic_Name                 : constant Name_Id := N + 574;\n+   Name_Divide                          : constant Name_Id := N + 574;\n+   Name_Enclosing_Entity                : constant Name_Id := N + 575;\n+   Name_Exception_Information           : constant Name_Id := N + 576;\n+   Name_Exception_Message               : constant Name_Id := N + 577;\n+   Name_Exception_Name                  : constant Name_Id := N + 578;\n+   Name_File                            : constant Name_Id := N + 579;\n+   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 580;\n+   Name_Import_Address                  : constant Name_Id := N + 581;\n+   Name_Import_Largest_Value            : constant Name_Id := N + 582;\n+   Name_Import_Value                    : constant Name_Id := N + 583;\n+   Name_Is_Negative                     : constant Name_Id := N + 584;\n+   Name_Line                            : constant Name_Id := N + 585;\n+   Name_Rotate_Left                     : constant Name_Id := N + 586;\n+   Name_Rotate_Right                    : constant Name_Id := N + 587;\n+   Name_Shift_Left                      : constant Name_Id := N + 588;\n+   Name_Shift_Right                     : constant Name_Id := N + 589;\n+   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 590;\n+   Name_Source_Location                 : constant Name_Id := N + 591;\n+   Name_Unchecked_Conversion            : constant Name_Id := N + 592;\n+   Name_Unchecked_Deallocation          : constant Name_Id := N + 593;\n+   Name_To_Pointer                      : constant Name_Id := N + 594;\n+   Last_Intrinsic_Name                  : constant Name_Id := N + 594;\n \n    --  Names used in processing intrinsic calls\n \n-   Name_Free                           : constant Name_Id := N + 586;\n+   Name_Free                           : constant Name_Id := N + 595;\n \n    --  Reserved words used only in Ada 95\n \n-   First_95_Reserved_Word              : constant Name_Id := N + 587;\n-   Name_Abstract                       : constant Name_Id := N + 587;\n-   Name_Aliased                        : constant Name_Id := N + 588;\n-   Name_Protected                      : constant Name_Id := N + 589;\n-   Name_Until                          : constant Name_Id := N + 590;\n-   Name_Requeue                        : constant Name_Id := N + 591;\n-   Name_Tagged                         : constant Name_Id := N + 592;\n-   Last_95_Reserved_Word               : constant Name_Id := N + 592;\n+   First_95_Reserved_Word              : constant Name_Id := N + 596;\n+   Name_Abstract                       : constant Name_Id := N + 596;\n+   Name_Aliased                        : constant Name_Id := N + 597;\n+   Name_Protected                      : constant Name_Id := N + 598;\n+   Name_Until                          : constant Name_Id := N + 599;\n+   Name_Requeue                        : constant Name_Id := N + 600;\n+   Name_Tagged                         : constant Name_Id := N + 601;\n+   Last_95_Reserved_Word               : constant Name_Id := N + 601;\n \n    subtype Ada_95_Reserved_Words is\n      Name_Id range First_95_Reserved_Word .. Last_95_Reserved_Word;\n \n    --  Miscellaneous names used in semantic checking\n \n-   Name_Raise_Exception                : constant Name_Id := N + 593;\n+   Name_Raise_Exception                : constant Name_Id := N + 602;\n \n    --  Additional reserved words and identifiers used in GNAT Project Files\n    --  Note that Name_External is already previously declared\n \n-   Name_Ada_Roots                      : constant Name_Id := N + 594;\n-   Name_Archive_Builder                : constant Name_Id := N + 595;\n-   Name_Archive_Indexer                : constant Name_Id := N + 596;\n-   Name_Binder                         : constant Name_Id := N + 597;\n-   Name_Binder_Driver                  : constant Name_Id := N + 598;\n-   Name_Body_Suffix                    : constant Name_Id := N + 599;\n-   Name_Builder                        : constant Name_Id := N + 600;\n-   Name_Compiler                       : constant Name_Id := N + 601;\n-   Name_Compiler_Driver                : constant Name_Id := N + 602;\n-   Name_Compiler_Kind                  : constant Name_Id := N + 603;\n-   Name_Compiler_Pic_Option            : constant Name_Id := N + 604;\n-   Name_Compute_Dependency             : constant Name_Id := N + 605;\n-   Name_Config_Body_File_Name          : constant Name_Id := N + 606;\n-   Name_Config_Body_File_Name_Pattern  : constant Name_Id := N + 607;\n-   Name_Config_File_Switches           : constant Name_Id := N + 608;\n-   Name_Config_File_Unique             : constant Name_Id := N + 609;\n-   Name_Config_Spec_File_Name          : constant Name_Id := N + 610;\n-   Name_Config_Spec_File_Name_Pattern  : constant Name_Id := N + 611;\n-   Name_Cross_Reference                : constant Name_Id := N + 612;\n-   Name_Default_Builder_Switches       : constant Name_Id := N + 613;\n-   Name_Default_Global_Compiler_Switches : constant Name_Id := N + 614;\n-   Name_Default_Language               : constant Name_Id := N + 615;\n-   Name_Default_Linker                 : constant Name_Id := N + 616;\n-   Name_Default_Switches               : constant Name_Id := N + 617;\n-   Name_Dependency_File_Kind           : constant Name_Id := N + 618;\n-   Name_Dependency_Option              : constant Name_Id := N + 619;\n-   Name_Exec_Dir                       : constant Name_Id := N + 620;\n-   Name_Executable                     : constant Name_Id := N + 621;\n-   Name_Executable_Suffix              : constant Name_Id := N + 622;\n-   Name_Extends                        : constant Name_Id := N + 623;\n-   Name_Externally_Built               : constant Name_Id := N + 624;\n-   Name_Finder                         : constant Name_Id := N + 625;\n-   Name_Global_Compiler_Switches       : constant Name_Id := N + 626;\n-   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 627;\n-   Name_Gnatls                         : constant Name_Id := N + 628;\n-   Name_Gnatstub                       : constant Name_Id := N + 629;\n-   Name_Implementation                 : constant Name_Id := N + 630;\n-   Name_Implementation_Exceptions      : constant Name_Id := N + 631;\n-   Name_Implementation_Suffix          : constant Name_Id := N + 632;\n-   Name_Include_Option                 : constant Name_Id := N + 633;\n-   Name_Include_Path                   : constant Name_Id := N + 634;\n-   Name_Include_Path_File              : constant Name_Id := N + 635;\n-   Name_Language_Kind                  : constant Name_Id := N + 636;\n-   Name_Language_Processing            : constant Name_Id := N + 637;\n-   Name_Languages                      : constant Name_Id := N + 638;\n-   Name_Library_Ali_Dir                : constant Name_Id := N + 639;\n-   Name_Library_Dir                    : constant Name_Id := N + 640;\n-   Name_Library_Auto_Init              : constant Name_Id := N + 641;\n-   Name_Library_GCC                    : constant Name_Id := N + 642;\n-   Name_Library_Interface              : constant Name_Id := N + 643;\n-   Name_Library_Kind                   : constant Name_Id := N + 644;\n-   Name_Library_Name                   : constant Name_Id := N + 645;\n-   Name_Library_Options                : constant Name_Id := N + 646;\n-   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 647;\n-   Name_Library_Src_Dir                : constant Name_Id := N + 648;\n-   Name_Library_Symbol_File            : constant Name_Id := N + 649;\n-   Name_Library_Symbol_Policy          : constant Name_Id := N + 650;\n-   Name_Library_Version                : constant Name_Id := N + 651;\n-   Name_Linker                         : constant Name_Id := N + 652;\n-   Name_Linker_Executable_Option       : constant Name_Id := N + 653;\n-   Name_Linker_Lib_Dir_Option          : constant Name_Id := N + 654;\n-   Name_Linker_Lib_Name_Option         : constant Name_Id := N + 655;\n-   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 656;\n-   Name_Locally_Removed_Files          : constant Name_Id := N + 657;\n-   Name_Mapping_File_Switches          : constant Name_Id := N + 658;\n-   Name_Metrics                        : constant Name_Id := N + 659;\n-   Name_Naming                         : constant Name_Id := N + 660;\n-   Name_Object_Dir                     : constant Name_Id := N + 661;\n-   Name_Pretty_Printer                 : constant Name_Id := N + 662;\n-   Name_Project                        : constant Name_Id := N + 663;\n-   Name_Roots                          : constant Name_Id := N + 664;\n-   Name_Runtime_Project                : constant Name_Id := N + 665;\n-   Name_Separate_Suffix                : constant Name_Id := N + 666;\n-   Name_Source_Dirs                    : constant Name_Id := N + 667;\n-   Name_Source_Files                   : constant Name_Id := N + 668;\n-   Name_Source_List_File               : constant Name_Id := N + 669;\n-   Name_Spec                           : constant Name_Id := N + 670;\n-   Name_Spec_Suffix                    : constant Name_Id := N + 671;\n-   Name_Specification                  : constant Name_Id := N + 672;\n-   Name_Specification_Exceptions       : constant Name_Id := N + 673;\n-   Name_Specification_Suffix           : constant Name_Id := N + 674;\n-   Name_Switches                       : constant Name_Id := N + 675;\n+   Name_Ada_Roots                      : constant Name_Id := N + 603;\n+   Name_Archive_Builder                : constant Name_Id := N + 604;\n+   Name_Archive_Indexer                : constant Name_Id := N + 605;\n+   Name_Binder                         : constant Name_Id := N + 606;\n+   Name_Binder_Driver                  : constant Name_Id := N + 607;\n+   Name_Body_Suffix                    : constant Name_Id := N + 608;\n+   Name_Builder                        : constant Name_Id := N + 609;\n+   Name_Compiler                       : constant Name_Id := N + 610;\n+   Name_Compiler_Driver                : constant Name_Id := N + 611;\n+   Name_Compiler_Kind                  : constant Name_Id := N + 612;\n+   Name_Compiler_Pic_Option            : constant Name_Id := N + 613;\n+   Name_Compute_Dependency             : constant Name_Id := N + 614;\n+   Name_Config_Body_File_Name          : constant Name_Id := N + 615;\n+   Name_Config_Body_File_Name_Pattern  : constant Name_Id := N + 616;\n+   Name_Config_File_Switches           : constant Name_Id := N + 617;\n+   Name_Config_File_Unique             : constant Name_Id := N + 618;\n+   Name_Config_Spec_File_Name          : constant Name_Id := N + 619;\n+   Name_Config_Spec_File_Name_Pattern  : constant Name_Id := N + 620;\n+   Name_Cross_Reference                : constant Name_Id := N + 621;\n+   Name_Default_Builder_Switches       : constant Name_Id := N + 622;\n+   Name_Default_Global_Compiler_Switches : constant Name_Id := N + 623;\n+   Name_Default_Language               : constant Name_Id := N + 624;\n+   Name_Default_Linker                 : constant Name_Id := N + 625;\n+   Name_Default_Switches               : constant Name_Id := N + 626;\n+   Name_Dependency_File_Kind           : constant Name_Id := N + 627;\n+   Name_Dependency_Option              : constant Name_Id := N + 628;\n+   Name_Exec_Dir                       : constant Name_Id := N + 629;\n+   Name_Executable                     : constant Name_Id := N + 630;\n+   Name_Executable_Suffix              : constant Name_Id := N + 631;\n+   Name_Extends                        : constant Name_Id := N + 632;\n+   Name_Externally_Built               : constant Name_Id := N + 633;\n+   Name_Finder                         : constant Name_Id := N + 634;\n+   Name_Global_Compiler_Switches       : constant Name_Id := N + 635;\n+   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 636;\n+   Name_Gnatls                         : constant Name_Id := N + 637;\n+   Name_Gnatstub                       : constant Name_Id := N + 638;\n+   Name_Implementation                 : constant Name_Id := N + 639;\n+   Name_Implementation_Exceptions      : constant Name_Id := N + 640;\n+   Name_Implementation_Suffix          : constant Name_Id := N + 641;\n+   Name_Include_Option                 : constant Name_Id := N + 642;\n+   Name_Include_Path                   : constant Name_Id := N + 643;\n+   Name_Include_Path_File              : constant Name_Id := N + 644;\n+   Name_Language_Kind                  : constant Name_Id := N + 645;\n+   Name_Language_Processing            : constant Name_Id := N + 646;\n+   Name_Languages                      : constant Name_Id := N + 647;\n+   Name_Library_Ali_Dir                : constant Name_Id := N + 648;\n+   Name_Library_Dir                    : constant Name_Id := N + 649;\n+   Name_Library_Auto_Init              : constant Name_Id := N + 650;\n+   Name_Library_GCC                    : constant Name_Id := N + 651;\n+   Name_Library_Interface              : constant Name_Id := N + 652;\n+   Name_Library_Kind                   : constant Name_Id := N + 653;\n+   Name_Library_Name                   : constant Name_Id := N + 654;\n+   Name_Library_Options                : constant Name_Id := N + 655;\n+   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 656;\n+   Name_Library_Src_Dir                : constant Name_Id := N + 657;\n+   Name_Library_Symbol_File            : constant Name_Id := N + 658;\n+   Name_Library_Symbol_Policy          : constant Name_Id := N + 659;\n+   Name_Library_Version                : constant Name_Id := N + 660;\n+   Name_Linker                         : constant Name_Id := N + 661;\n+   Name_Linker_Executable_Option       : constant Name_Id := N + 662;\n+   Name_Linker_Lib_Dir_Option          : constant Name_Id := N + 663;\n+   Name_Linker_Lib_Name_Option         : constant Name_Id := N + 664;\n+   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 665;\n+   Name_Locally_Removed_Files          : constant Name_Id := N + 666;\n+   Name_Mapping_File_Switches          : constant Name_Id := N + 667;\n+   Name_Metrics                        : constant Name_Id := N + 668;\n+   Name_Naming                         : constant Name_Id := N + 669;\n+   Name_Object_Dir                     : constant Name_Id := N + 670;\n+   Name_Pretty_Printer                 : constant Name_Id := N + 671;\n+   Name_Project                        : constant Name_Id := N + 672;\n+   Name_Roots                          : constant Name_Id := N + 673;\n+   Name_Runtime_Project                : constant Name_Id := N + 674;\n+   Name_Separate_Suffix                : constant Name_Id := N + 675;\n+   Name_Source_Dirs                    : constant Name_Id := N + 676;\n+   Name_Source_Files                   : constant Name_Id := N + 677;\n+   Name_Source_List_File               : constant Name_Id := N + 678;\n+   Name_Spec                           : constant Name_Id := N + 679;\n+   Name_Spec_Suffix                    : constant Name_Id := N + 680;\n+   Name_Specification                  : constant Name_Id := N + 681;\n+   Name_Specification_Exceptions       : constant Name_Id := N + 682;\n+   Name_Specification_Suffix           : constant Name_Id := N + 683;\n+   Name_Switches                       : constant Name_Id := N + 684;\n \n    --  Other miscellaneous names used in front end\n \n-   Name_Unaligned_Valid                : constant Name_Id := N + 676;\n+   Name_Unaligned_Valid                : constant Name_Id := N + 685;\n \n    --  Ada 2005 reserved words\n \n-   First_2005_Reserved_Word            : constant Name_Id := N + 677;\n-   Name_Interface                      : constant Name_Id := N + 677;\n-   Name_Overriding                     : constant Name_Id := N + 678;\n-   Name_Synchronized                   : constant Name_Id := N + 679;\n-   Last_2005_Reserved_Word             : constant Name_Id := N + 679;\n+   First_2005_Reserved_Word            : constant Name_Id := N + 686;\n+   Name_Interface                      : constant Name_Id := N + 686;\n+   Name_Overriding                     : constant Name_Id := N + 687;\n+   Name_Synchronized                   : constant Name_Id := N + 688;\n+   Last_2005_Reserved_Word             : constant Name_Id := N + 688;\n \n    subtype Ada_2005_Reserved_Words is\n      Name_Id range First_2005_Reserved_Word .. Last_2005_Reserved_Word;\n \n    --  Mark last defined name for consistency check in Snames body\n \n-   Last_Predefined_Name                : constant Name_Id := N + 679;\n+   Last_Predefined_Name                : constant Name_Id := N + 688;\n \n    ---------------------------------------\n    -- Subtypes Defining Name Categories --\n@@ -1145,6 +1161,7 @@ package Snames is\n       Attribute_Pool_Address,\n       Attribute_Pos,\n       Attribute_Position,\n+      Attribute_Priority,\n       Attribute_Range,\n       Attribute_Range_Length,\n       Attribute_Round,\n@@ -1222,7 +1239,8 @@ package Snames is\n       --  Type attributes\n \n       Attribute_Base,\n-      Attribute_Class);\n+      Attribute_Class,\n+      Attribute_Stub_Type);\n \n    ------------------------------------\n    -- Convention Name ID Definitions --\n@@ -1304,6 +1322,7 @@ package Snames is\n       Pragma_Normalize_Scalars,\n       Pragma_Polling,\n       Pragma_Persistent_BSS,\n+      Pragma_Priority_Specific_Dispatching,\n       Pragma_Profile,\n       Pragma_Profile_Warnings,\n       Pragma_Propagate_Exceptions,\n@@ -1324,6 +1343,7 @@ package Snames is\n       Pragma_Use_VADS_Size,\n       Pragma_Validity_Checks,\n       Pragma_Warnings,\n+      Pragma_Wide_Character_Encoding,\n \n       --  Remaining (non-configuration) pragmas\n \n@@ -1393,9 +1413,9 @@ package Snames is\n       Pragma_Pack,\n       Pragma_Page,\n       Pragma_Passive,\n+      Pragma_Preelaborable_Initialization,\n       Pragma_Preelaborate,\n       Pragma_Preelaborate_05,\n-      Pragma_Priority,\n       Pragma_Psect_Object,\n       Pragma_Pure,\n       Pragma_Pure_05,\n@@ -1432,6 +1452,7 @@ package Snames is\n \n       Pragma_AST_Entry,\n       Pragma_Interface,\n+      Pragma_Priority,\n       Pragma_Storage_Size,\n       Pragma_Storage_Unit,\n \n@@ -1510,9 +1531,9 @@ package Snames is\n \n    function Is_Pragma_Name (N : Name_Id) return Boolean;\n    --  Test to see if the name N is the name of a recognized pragma. Note\n-   --  that pragmas AST_Entry, Storage_Size, and Storage_Unit are recognized\n-   --  as pragmas by this function even though their names are separate from\n-   --  the other pragma names.\n+   --  that pragmas AST_Entry, Priority, Storage_Size, and Storage_Unit are\n+   --  recognized as pragmas by this function even though their names are\n+   --  separate from the other pragma names.\n \n    function Is_Queuing_Policy_Name (N : Name_Id) return Boolean;\n    --  Test to see if the name N is the name of a recognized queuing policy\n@@ -1530,6 +1551,10 @@ package Snames is\n    --  to call this function with a name that is not the name of a convention,\n    --  or one previously given in a call to Record_Convention_Identifier.\n \n+   function Get_Convention_Name (C : Convention_Id) return Name_Id;\n+   --  Returns the name of language convention correspoding to given\n+   --  convention id.\n+\n    function Get_Check_Id (N : Name_Id) return Check_Id;\n    --  Returns Id of suppress check corresponding to given name. It is an error\n    --  to call this function with a name that is not the name of a check.\n@@ -1542,8 +1567,9 @@ package Snames is\n    --  Returns Id of pragma corresponding to given name. Returns Unknown_Pragma\n    --  if N is not a name of a known (Ada defined or GNAT-specific) pragma.\n    --  Note that the function also works correctly for names of pragmas that\n-   --  are not in the main list of pragma Names (AST_Entry, Storage_Size, and\n-   --  Storage_Unit (e.g. Name_Storage_Size returns Pragma_Storage_Size).\n+   --  are not included in the main list of pragma Names (AST_Entry, Priority,\n+   --  Storage_Size, and Storage_Unit (e.g. Name_Storage_Size returns\n+   --  Pragma_Storage_Size).\n \n    function Get_Queuing_Policy_Id (N : Name_Id) return Queuing_Policy_Id;\n    --  Returns Id of queuing policy corresponding to given name. It is an error"}, {"sha": "bfe35b64d5c40e897efceefe2390c74aff535b16", "filename": "gcc/ada/snames.h", "status": "modified", "additions": 193, "deletions": 188, "changes": 381, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16/gcc%2Fada%2Fsnames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16/gcc%2Fada%2Fsnames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.h?ref=e3da30b2ef2b73e936ee7821aad5a4ea44fbdf16", "patch": "@@ -115,72 +115,74 @@ extern unsigned char Get_Attribute_Id (int);\n #define  Attr_Pool_Address                  67\n #define  Attr_Pos                           68\n #define  Attr_Position                      69\n-#define  Attr_Range                         70\n-#define  Attr_Range_Length                  71\n-#define  Attr_Round                         72\n-#define  Attr_Safe_Emax                     73\n-#define  Attr_Safe_First                    74\n-#define  Attr_Safe_Large                    75\n-#define  Attr_Safe_Last                     76\n-#define  Attr_Safe_Small                    77\n-#define  Attr_Scale                         78\n-#define  Attr_Scaling                       79\n-#define  Attr_Signed_Zeros                  80\n-#define  Attr_Size                          81\n-#define  Attr_Small                         82\n-#define  Attr_Storage_Size                  83\n-#define  Attr_Storage_Unit                  84\n-#define  Attr_Stream_Size                   85\n-#define  Attr_Tag                           86\n-#define  Attr_Target_Name                   87\n-#define  Attr_Terminated                    88\n-#define  Attr_To_Address                    89\n-#define  Attr_Type_Class                    90\n-#define  Attr_UET_Address                   91\n-#define  Attr_Unbiased_Rounding             92\n-#define  Attr_Unchecked_Access              93\n-#define  Attr_Unconstrained_Array           94\n-#define  Attr_Universal_Literal_String      95\n-#define  Attr_Unrestricted_Access           96\n-#define  Attr_VADS_Size                     97\n-#define  Attr_Val                           98\n-#define  Attr_Valid                         99\n-#define  Attr_Value_Size                    100\n-#define  Attr_Version                       101\n-#define  Attr_Wchar_T_Size                  102\n-#define  Attr_Wide_Wide_Width               103\n-#define  Attr_Wide_Width                    104\n-#define  Attr_Width                         105\n-#define  Attr_Word_Size                     106\n-#define  Attr_Adjacent                      107\n-#define  Attr_Ceiling                       108\n-#define  Attr_Copy_Sign                     109\n-#define  Attr_Floor                         110\n-#define  Attr_Fraction                      111\n-#define  Attr_Image                         112\n-#define  Attr_Input                         113\n-#define  Attr_Machine                       114\n-#define  Attr_Max                           115\n-#define  Attr_Min                           116\n-#define  Attr_Model                         117\n-#define  Attr_Pred                          118\n-#define  Attr_Remainder                     119\n-#define  Attr_Rounding                      120\n-#define  Attr_Succ                          121\n-#define  Attr_Truncation                    122\n-#define  Attr_Value                         123\n-#define  Attr_Wide_Image                    124\n-#define  Attr_Wide_Wide_Image               125\n-#define  Attr_Wide_Value                    126\n-#define  Attr_Wide_Wide_Value               127\n-#define  Attr_Output                        128\n-#define  Attr_Read                          129\n-#define  Attr_Write                         130\n-#define  Attr_Elab_Body                     131\n-#define  Attr_Elab_Spec                     132\n-#define  Attr_Storage_Pool                  133\n-#define  Attr_Base                          134\n-#define  Attr_Class                         135\n+#define  Attr_Priority                      70\n+#define  Attr_Range                         71\n+#define  Attr_Range_Length                  72\n+#define  Attr_Round                         73\n+#define  Attr_Safe_Emax                     74\n+#define  Attr_Safe_First                    75\n+#define  Attr_Safe_Large                    76\n+#define  Attr_Safe_Last                     77\n+#define  Attr_Safe_Small                    78\n+#define  Attr_Scale                         79\n+#define  Attr_Scaling                       80\n+#define  Attr_Signed_Zeros                  81\n+#define  Attr_Size                          82\n+#define  Attr_Small                         83\n+#define  Attr_Storage_Size                  84\n+#define  Attr_Storage_Unit                  85\n+#define  Attr_Stream_Size                   86\n+#define  Attr_Tag                           87\n+#define  Attr_Target_Name                   88\n+#define  Attr_Terminated                    89\n+#define  Attr_To_Address                    90\n+#define  Attr_Type_Class                    91\n+#define  Attr_UET_Address                   92\n+#define  Attr_Unbiased_Rounding             93\n+#define  Attr_Unchecked_Access              94\n+#define  Attr_Unconstrained_Array           95\n+#define  Attr_Universal_Literal_String      96\n+#define  Attr_Unrestricted_Access           97\n+#define  Attr_VADS_Size                     98\n+#define  Attr_Val                           99\n+#define  Attr_Valid                         100\n+#define  Attr_Value_Size                    101\n+#define  Attr_Version                       102\n+#define  Attr_Wchar_T_Size                  103\n+#define  Attr_Wide_Wide_Width               104\n+#define  Attr_Wide_Width                    105\n+#define  Attr_Width                         106\n+#define  Attr_Word_Size                     107\n+#define  Attr_Adjacent                      108\n+#define  Attr_Ceiling                       109\n+#define  Attr_Copy_Sign                     110\n+#define  Attr_Floor                         111\n+#define  Attr_Fraction                      112\n+#define  Attr_Image                         113\n+#define  Attr_Input                         114\n+#define  Attr_Machine                       115\n+#define  Attr_Max                           116\n+#define  Attr_Min                           117\n+#define  Attr_Model                         118\n+#define  Attr_Pred                          119\n+#define  Attr_Remainder                     120\n+#define  Attr_Rounding                      121\n+#define  Attr_Succ                          122\n+#define  Attr_Truncation                    123\n+#define  Attr_Value                         124\n+#define  Attr_Wide_Image                    125\n+#define  Attr_Wide_Wide_Image               126\n+#define  Attr_Wide_Value                    127\n+#define  Attr_Wide_Wide_Value               128\n+#define  Attr_Output                        129\n+#define  Attr_Read                          130\n+#define  Attr_Write                         131\n+#define  Attr_Elab_Body                     132\n+#define  Attr_Elab_Spec                     133\n+#define  Attr_Storage_Pool                  134\n+#define  Attr_Base                          135\n+#define  Attr_Class                         136\n+#define  Attr_Stub_Type                     137\n \n /* Define the numeric values for the conventions.  */\n \n@@ -241,127 +243,130 @@ extern unsigned char Get_Pragma_Id (int);\n #define  Pragma_Normalize_Scalars             26\n #define  Pragma_Polling                       27\n #define  Pragma_Persistent_BSS                28\n-#define  Pragma_Profile                       29\n-#define  Pragma_Profile_Warnings              30\n-#define  Pragma_Propagate_Exceptions          31\n-#define  Pragma_Queuing_Policy                32\n-#define  Pragma_Ravenscar                     33\n-#define  Pragma_Restricted_Run_Time           34\n-#define  Pragma_Restrictions                  35\n-#define  Pragma_Restriction_Warnings          36\n-#define  Pragma_Reviewable                    37\n-#define  Pragma_Source_File_Name              38\n-#define  Pragma_Source_File_Name_Project      39\n-#define  Pragma_Style_Checks                  40\n-#define  Pragma_Suppress                      41\n-#define  Pragma_Suppress_Exception_Locations  42\n-#define  Pragma_Task_Dispatching_Policy       43\n-#define  Pragma_Universal_Data                44\n-#define  Pragma_Unsuppress                    45\n-#define  Pragma_Use_VADS_Size                 46\n-#define  Pragma_Validity_Checks               47\n-#define  Pragma_Warnings                      48\n-#define  Pragma_Abort_Defer                   49\n-#define  Pragma_All_Calls_Remote              50\n-#define  Pragma_Annotate                      51\n-#define  Pragma_Assert                        52\n-#define  Pragma_Asynchronous                  53\n-#define  Pragma_Atomic                        54\n-#define  Pragma_Atomic_Components             55\n-#define  Pragma_Attach_Handler                56\n-#define  Pragma_Comment                       57\n-#define  Pragma_Common_Object                 58\n-#define  Pragma_Complete_Representation       59\n-#define  Pragma_Complex_Representation        60\n-#define  Pragma_Controlled                    61\n-#define  Pragma_Convention                    62\n-#define  Pragma_CPP_Class                     63\n-#define  Pragma_CPP_Constructor               64\n-#define  Pragma_CPP_Virtual                   65\n-#define  Pragma_CPP_Vtable                    66\n-#define  Pragma_Debug                         67\n-#define  Pragma_Elaborate                     68\n-#define  Pragma_Elaborate_All                 69\n-#define  Pragma_Elaborate_Body                70\n-#define  Pragma_Export                        71\n-#define  Pragma_Export_Exception              72\n-#define  Pragma_Export_Function               73\n-#define  Pragma_Export_Object                 74\n-#define  Pragma_Export_Procedure              75\n-#define  Pragma_Export_Value                  76\n-#define  Pragma_Export_Valued_Procedure       77\n-#define  Pragma_External                      78\n-#define  Pragma_Finalize_Storage_Only         79\n-#define  Pragma_Ident                         80\n-#define  Pragma_Import                        81\n-#define  Pragma_Import_Exception              82\n-#define  Pragma_Import_Function               83\n-#define  Pragma_Import_Object                 84\n-#define  Pragma_Import_Procedure              85\n-#define  Pragma_Import_Valued_Procedure       86\n-#define  Pragma_Inline                        87\n-#define  Pragma_Inline_Always                 88\n-#define  Pragma_Inline_Generic                89\n-#define  Pragma_Inspection_Point              90\n-#define  Pragma_Interface_Name                91\n-#define  Pragma_Interrupt_Handler             92\n-#define  Pragma_Interrupt_Priority            93\n-#define  Pragma_Java_Constructor              94\n-#define  Pragma_Java_Interface                95\n-#define  Pragma_Keep_Names                    96\n-#define  Pragma_Link_With                     97\n-#define  Pragma_Linker_Alias                  98\n-#define  Pragma_Linker_Constructor            99\n-#define  Pragma_Linker_Destructor             100\n-#define  Pragma_Linker_Options                101\n-#define  Pragma_Linker_Section                102\n-#define  Pragma_List                          103\n-#define  Pragma_Machine_Attribute             104\n-#define  Pragma_Main                          105\n-#define  Pragma_Main_Storage                  106\n-#define  Pragma_Memory_Size                   107\n-#define  Pragma_No_Return                     108\n-#define  Pragma_Obsolescent                   109\n-#define  Pragma_Optimize                      110\n-#define  Pragma_Optional_Overriding           111\n-#define  Pragma_Pack                          112\n-#define  Pragma_Page                          113\n-#define  Pragma_Passive                       114\n-#define  Pragma_Preelaborate                  115\n-#define  Pragma_Preelaborate_05               116\n-#define  Pragma_Priority                      117\n-#define  Pragma_Psect_Object                  118\n-#define  Pragma_Pure                          119\n-#define  Pragma_Pure_05                       120\n-#define  Pragma_Pure_Function                 121\n-#define  Pragma_Remote_Call_Interface         122\n-#define  Pragma_Remote_Types                  123\n-#define  Pragma_Share_Generic                 124\n-#define  Pragma_Shared                        125\n-#define  Pragma_Shared_Passive                126\n-#define  Pragma_Source_Reference              127\n-#define  Pragma_Stream_Convert                128\n-#define  Pragma_Subtitle                      129\n-#define  Pragma_Suppress_All                  130\n-#define  Pragma_Suppress_Debug_Info           131\n-#define  Pragma_Suppress_Initialization       132\n-#define  Pragma_System_Name                   133\n-#define  Pragma_Task_Info                     134\n-#define  Pragma_Task_Name                     135\n-#define  Pragma_Task_Storage                  136\n-#define  Pragma_Thread_Body                   137\n-#define  Pragma_Time_Slice                    138\n-#define  Pragma_Title                         139\n-#define  Pragma_Unchecked_Union               140\n-#define  Pragma_Unimplemented_Unit            141\n-#define  Pragma_Unreferenced                  142\n-#define  Pragma_Unreserve_All_Interrupts      143\n-#define  Pragma_Volatile                      144\n-#define  Pragma_Volatile_Components           145\n-#define  Pragma_Weak_External                 146\n-#define  Pragma_AST_Entry                     147\n-#define  Pragma_Interface                     148\n-#define  Pragma_Storage_Size                  149\n-#define  Pragma_Storage_Unit                  150\n+#define  Pragma_Priority_Specific_Dispatching 29\n+#define  Pragma_Profile                       30\n+#define  Pragma_Profile_Warnings              31\n+#define  Pragma_Propagate_Exceptions          32\n+#define  Pragma_Queuing_Policy                33\n+#define  Pragma_Ravenscar                     34\n+#define  Pragma_Restricted_Run_Time           35\n+#define  Pragma_Restrictions                  36\n+#define  Pragma_Restriction_Warnings          37\n+#define  Pragma_Reviewable                    38\n+#define  Pragma_Source_File_Name              39\n+#define  Pragma_Source_File_Name_Project      40\n+#define  Pragma_Style_Checks                  41\n+#define  Pragma_Suppress                      42\n+#define  Pragma_Suppress_Exception_Locations  43\n+#define  Pragma_Task_Dispatching_Policy       44\n+#define  Pragma_Universal_Data                45\n+#define  Pragma_Unsuppress                    46\n+#define  Pragma_Use_VADS_Size                 47\n+#define  Pragma_Validity_Checks               48\n+#define  Pragma_Warnings                      49\n+#define  Pragma_Wide_Character_Encoding       50\n+#define  Pragma_Abort_Defer                   51\n+#define  Pragma_All_Calls_Remote              52\n+#define  Pragma_Annotate                      53\n+#define  Pragma_Assert                        54\n+#define  Pragma_Asynchronous                  55\n+#define  Pragma_Atomic                        56\n+#define  Pragma_Atomic_Components             57\n+#define  Pragma_Attach_Handler                58\n+#define  Pragma_Comment                       59\n+#define  Pragma_Common_Object                 60\n+#define  Pragma_Complete_Representation       61\n+#define  Pragma_Complex_Representation        62\n+#define  Pragma_Controlled                    63\n+#define  Pragma_Convention                    64\n+#define  Pragma_CPP_Class                     65\n+#define  Pragma_CPP_Constructor               66\n+#define  Pragma_CPP_Virtual                   67\n+#define  Pragma_CPP_Vtable                    68\n+#define  Pragma_Debug                         69\n+#define  Pragma_Elaborate                     70\n+#define  Pragma_Elaborate_All                 71\n+#define  Pragma_Elaborate_Body                72\n+#define  Pragma_Export                        73\n+#define  Pragma_Export_Exception              74\n+#define  Pragma_Export_Function               75\n+#define  Pragma_Export_Object                 76\n+#define  Pragma_Export_Procedure              77\n+#define  Pragma_Export_Value                  78\n+#define  Pragma_Export_Valued_Procedure       79\n+#define  Pragma_External                      80\n+#define  Pragma_Finalize_Storage_Only         81\n+#define  Pragma_Ident                         82\n+#define  Pragma_Import                        83\n+#define  Pragma_Import_Exception              84\n+#define  Pragma_Import_Function               85\n+#define  Pragma_Import_Object                 86\n+#define  Pragma_Import_Procedure              87\n+#define  Pragma_Import_Valued_Procedure       88\n+#define  Pragma_Inline                        89\n+#define  Pragma_Inline_Always                 90\n+#define  Pragma_Inline_Generic                91\n+#define  Pragma_Inspection_Point              92\n+#define  Pragma_Interface_Name                93\n+#define  Pragma_Interrupt_Handler             94\n+#define  Pragma_Interrupt_Priority            95\n+#define  Pragma_Java_Constructor              96\n+#define  Pragma_Java_Interface                97\n+#define  Pragma_Keep_Names                    98\n+#define  Pragma_Link_With                     99\n+#define  Pragma_Linker_Alias                  100\n+#define  Pragma_Linker_Constructor            101\n+#define  Pragma_Linker_Destructor             102\n+#define  Pragma_Linker_Options                103\n+#define  Pragma_Linker_Section                104\n+#define  Pragma_List                          105\n+#define  Pragma_Machine_Attribute             106\n+#define  Pragma_Main                          107\n+#define  Pragma_Main_Storage                  108\n+#define  Pragma_Memory_Size                   109\n+#define  Pragma_No_Return                     110\n+#define  Pragma_Obsolescent                   111\n+#define  Pragma_Optimize                      112\n+#define  Pragma_Optional_Overriding           113\n+#define  Pragma_Pack                          114\n+#define  Pragma_Page                          115\n+#define  Pragma_Passive                       116\n+#define  Pragma_Preelaborable_Initialization  117\n+#define  Pragma_Preelaborate                  118\n+#define  Pragma_Preelaborate_05               119\n+#define  Pragma_Psect_Object                  120\n+#define  Pragma_Pure                          121\n+#define  Pragma_Pure_05                       122\n+#define  Pragma_Pure_Function                 123\n+#define  Pragma_Remote_Call_Interface         124\n+#define  Pragma_Remote_Types                  125\n+#define  Pragma_Share_Generic                 126\n+#define  Pragma_Shared                        127\n+#define  Pragma_Shared_Passive                128\n+#define  Pragma_Source_Reference              129\n+#define  Pragma_Stream_Convert                130\n+#define  Pragma_Subtitle                      131\n+#define  Pragma_Suppress_All                  132\n+#define  Pragma_Suppress_Debug_Info           133\n+#define  Pragma_Suppress_Initialization       134\n+#define  Pragma_System_Name                   135\n+#define  Pragma_Task_Info                     136\n+#define  Pragma_Task_Name                     137\n+#define  Pragma_Task_Storage                  138\n+#define  Pragma_Thread_Body                   139\n+#define  Pragma_Time_Slice                    140\n+#define  Pragma_Title                         141\n+#define  Pragma_Unchecked_Union               142\n+#define  Pragma_Unimplemented_Unit            143\n+#define  Pragma_Unreferenced                  144\n+#define  Pragma_Unreserve_All_Interrupts      145\n+#define  Pragma_Volatile                      146\n+#define  Pragma_Volatile_Components           147\n+#define  Pragma_Weak_External                 148\n+#define  Pragma_AST_Entry                     149\n+#define  Pragma_Interface                     150\n+#define  Pragma_Priority                      151\n+#define  Pragma_Storage_Size                  152\n+#define  Pragma_Storage_Unit                  153\n \n /* End of snames.h (C version of Snames package spec) */"}]}