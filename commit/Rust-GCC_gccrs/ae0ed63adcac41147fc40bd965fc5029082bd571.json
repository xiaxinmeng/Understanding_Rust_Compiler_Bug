{"sha": "ae0ed63adcac41147fc40bd965fc5029082bd571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUwZWQ2M2FkY2FjNDExNDdmYzQwYmQ5NjVmYzUwMjkwODJiZDU3MQ==", "commit": {"author": {"name": "Jan van Male", "email": "jan.vanmale@fenk.wau.nl", "date": "2001-07-10T10:38:10Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-07-10T10:38:10Z"}, "message": "regmove.c (replace_in_call_usage): Fix warnings.\n\n2001-07-10  Jan van Male  <jan.vanmale@fenk.wau.nl>\n\t* regmove.c (replace_in_call_usage): Fix warnings.\n\t* sched-deps.c (add_dependence): Fix warnings.\n\t* simplify-rtx.c (simplify_subreg): Likewise.\n\tReturn NULL_RTX instead of NULL.\n\n\t* reg-stack.c (emit_swap_insn): Eliminate warnings.\n\t(subst_asm_stack_regs): Likewise.\n\n\t* combine.c (num_sign_bit_copies): Cast bitwidth to int to avoid\n\twarnings.\n\n\t* dwarf2out.c (output_call_frame_info): Declare i as int.\n\t(build_abbrev_table): Declare n_alloc as int.\n\t(dwarf2out_finish): Initialize die.\n\t* except.c: Declare sjlj_funcdef_number as unsigned.\n\t(connect_post_landing_pads): Declare j as unsigned.\n\t(convert_to_eh_region_ranges): Initialize call_site.\n\t(output_function_exception_table): Initialize tt_format_size.\n\t* expr.c (move_by_pieces_1): Initialize to1.\n\t(store_constructor): Initialize minelt and maxelt.\n\t* flow.c (mark_regs_live_at_end): Declare i as unsigned.\n\t* function.c (instantiate_decls): Avoid signed/unsigned warning.\n\n\t* c-decl.c (combine_parm_decls): Unused, remove.\n\t* c-tree.h: Remove prototype for combine_parm_decls.\n\n\t* reload.c (push_reload): Fix warning.\n\t(regno_clobbered_p): Likewise.\n\t* reload1.c (replace_pseudos_in_call_usage): Likewise.\n\t(reload_combine): Likewise.\n\n\t* bitmap.c: Rename bitmap_zero to bitmap_zero_bits to fix warnings.\n\t* bitmap.h: Rename bitmap_zero to bitmap_zero_bits to fix\n\twarnings.\n\t* bitmap.c (bitmap_operation): Change user.\n\t* bitmap.h (EXECUTE_IF_AND_COMPL_IN_BITMAP): Likewise.\nFor cp/:\n2001-07-10  Jan van Male  <jan.vanmale@fenk.wau.nl>\n\n\t* call.c (build_op_delete_call): Initialize fn.\n\t(convert_like_real): Delete conditional.\n\t(joust): Initialize *w and *l.\n\t* class.c: Add prototype for binfo_ctor_vtable.\n\t(get_primary_binfo): Initialize result.\n\t* init.c (build_java_class_ref): Initialize name.\n\n\t* typeck.c (unary_complex_lvalue): Do not duplicate the\n\targument to modify, pre-, or post-increment when used as an\n\tlvalue and when the argument has side-effects.\n\nFor ch/:\n2001-07-10  Jan van Male  <jan.vanmale@fenk.wau.nl>\n\n\t* ch-tree.h: Remove prototype for combine_parm_decls, unused\n\tfunction.\n\nFrom-SVN: r43893", "tree": {"sha": "ad12dd2a1d25ac756c1fd1eb5332e8573ccbd174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad12dd2a1d25ac756c1fd1eb5332e8573ccbd174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae0ed63adcac41147fc40bd965fc5029082bd571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0ed63adcac41147fc40bd965fc5029082bd571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae0ed63adcac41147fc40bd965fc5029082bd571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0ed63adcac41147fc40bd965fc5029082bd571/comments", "author": null, "committer": null, "parents": [{"sha": "1a74aab130d2886f81abcf230d0cb30abab09701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a74aab130d2886f81abcf230d0cb30abab09701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a74aab130d2886f81abcf230d0cb30abab09701"}], "stats": {"total": 260, "additions": 62, "deletions": 198}, "files": [{"sha": "055024e36676ac8d6606f70d6d5e9ef399805f83", "filename": "gcc/bitmap.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -1,5 +1,5 @@\n /* Functions to support general ended bitmaps.\n-   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -38,7 +38,7 @@ static int bitmap_obstack_init = FALSE;\n #endif\n \n /* Global data */\n-bitmap_element bitmap_zero;\t\t/* An element of all zero bits. */\n+bitmap_element bitmap_zero_bits;\t/* An element of all zero bits. */\n bitmap_element *bitmap_free;\t\t/* Freelist of bitmap elements. */\n \n static void bitmap_element_free\t\tPARAMS ((bitmap, bitmap_element *));\n@@ -572,14 +572,14 @@ bitmap_operation (to, from1, from2, operation)\n \t{\n \t  indx = indx1;\n \t  from1_tmp = from1_ptr;\n-\t  from2_tmp = &bitmap_zero;\n+\t  from2_tmp = &bitmap_zero_bits;\n \t  from1_ptr = from1_ptr->next;\n \t  indx1 = (from1_ptr) ? from1_ptr->indx : HIGHEST_INDEX;\n \t}\n       else\n \t{\n \t  indx = indx2;\n-\t  from1_tmp = &bitmap_zero;\n+\t  from1_tmp = &bitmap_zero_bits;\n \t  from2_tmp = from2_ptr;\n \t  from2_ptr = from2_ptr->next;\n \t  indx2 = (from2_ptr) ? from2_ptr->indx : HIGHEST_INDEX;"}, {"sha": "42b5493c2871cf49f5070bf97be2ae16ed782045", "filename": "gcc/bitmap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -1,5 +1,5 @@\n /* Functions to support general ended bitmaps.\n-   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -66,7 +66,7 @@ enum bitmap_bits {\n \n /* Global data */\n extern bitmap_element *bitmap_free;\t/* Freelist of bitmap elements */\n-extern bitmap_element bitmap_zero;\t/* Zero bitmap element */\n+extern bitmap_element bitmap_zero_bits;\t/* Zero bitmap element */\n \n /* Clear a bitmap by freeing up the linked list.  */\n extern void bitmap_clear PARAMS ((bitmap));\n@@ -247,7 +247,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \tptr2_ = ptr2_->next;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       tmp2_ = ((ptr2_ != 0 && ptr2_->indx == ptr1_->indx)\t\t\\\n-\t       ? ptr2_ : &bitmap_zero); \t\t\t\t\\\n+\t       ? ptr2_ : &bitmap_zero_bits); \t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       for (; word_num_ < BITMAP_ELEMENT_WORDS; word_num_++)\t\t\\\n \t{\t\t\t\t\t\t\t\t\\"}, {"sha": "dc100db5ad4ae6bbf9a2c6158be8508bee9930d1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 143, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -6569,149 +6569,6 @@ store_parm_decls ()\n   cfun->x_dont_save_pending_sizes_p = 1;\n }\n \f\n-/* SPECPARMS is an identifier list--a chain of TREE_LIST nodes\n-   each with a parm name as the TREE_VALUE.  A null pointer as TREE_VALUE\n-   stands for an ellipsis in the identifier list.\n-\n-   PARMLIST is the data returned by get_parm_info for the\n-   parmlist that follows the semicolon.\n-\n-   We return a value of the same sort that get_parm_info returns,\n-   except that it describes the combination of identifiers and parmlist.  */\n-\n-tree\n-combine_parm_decls (specparms, parmlist, void_at_end)\n-     tree specparms, parmlist;\n-     int void_at_end;\n-{\n-  register tree fndecl = current_function_decl;\n-  register tree parm;\n-\n-  tree parmdecls = TREE_PURPOSE (parmlist);\n-\n-  /* This is a chain of any other decls that came in among the parm\n-     declarations.  They were separated already by get_parm_info,\n-     so we just need to keep them separate.  */\n-  tree nonparms = TREE_VALUE (parmlist);\n-\n-  tree types = 0;\n-\n-  for (parm = parmdecls; parm; parm = TREE_CHAIN (parm))\n-    DECL_WEAK (parm) = 0;\n-\n-  for (parm = specparms; parm; parm = TREE_CHAIN (parm))\n-    {\n-      register tree tail, found = NULL;\n-\n-      /* See if any of the parmdecls specifies this parm by name.  */\n-      for (tail = parmdecls; tail; tail = TREE_CHAIN (tail))\n-\tif (DECL_NAME (tail) == TREE_VALUE (parm))\n-\t  {\n-\t    found = tail;\n-\t    break;\n-\t  }\n-\n-      /* If declaration already marked, we have a duplicate name.\n-\t Complain, and don't use this decl twice.   */\n-      if (found && DECL_WEAK (found))\n-\t{\n-\t  error_with_decl (found, \"multiple parameters named `%s'\");\n-\t  found = 0;\n-\t}\n-\n-      /* If the declaration says \"void\", complain and ignore it.  */\n-      if (found && VOID_TYPE_P (TREE_TYPE (found)))\n-\t{\n-\t  error_with_decl (found, \"parameter `%s' declared void\");\n-\t  TREE_TYPE (found) = integer_type_node;\n-\t  DECL_ARG_TYPE (found) = integer_type_node;\n-\t  layout_decl (found, 0);\n-\t}\n-\n-      /* Traditionally, a parm declared float is actually a double.  */\n-      if (found && flag_traditional\n-\t  && TYPE_MAIN_VARIANT (TREE_TYPE (found)) == float_type_node)\n-\t{\n-\t  TREE_TYPE (found) = double_type_node;\n-\t  DECL_ARG_TYPE (found) = double_type_node;\n-\t  layout_decl (found, 0);\n-\t}\n-\n-      /* If no declaration found, default to int.  */\n-      if (!found)\n-\t{\n-\t  found = build_decl (PARM_DECL, TREE_VALUE (parm),\n-\t\t\t      integer_type_node);\n-\t  DECL_ARG_TYPE (found) = TREE_TYPE (found);\n-\t  DECL_SOURCE_LINE (found) = DECL_SOURCE_LINE (fndecl);\n-\t  DECL_SOURCE_FILE (found) = DECL_SOURCE_FILE (fndecl);\n-\t  error_with_decl (found, \"type of parameter `%s' is not declared\");\n-\t  pushdecl (found);\n-\t}\n-\n-      TREE_PURPOSE (parm) = found;\n-\n-      /* Mark this decl as \"already found\".  */\n-      DECL_WEAK (found) = 1;\n-    }\n-\n-  /* Complain about any actual PARM_DECLs not matched with any names.  */\n-\n-  for (parm = parmdecls; parm;)\n-    {\n-      tree next = TREE_CHAIN (parm);\n-      TREE_CHAIN (parm) = 0;\n-\n-      /* Complain about args with incomplete types.  */\n-      if (!COMPLETE_TYPE_P (TREE_TYPE (parm)))\n-\t{\n-\t  error_with_decl (parm, \"parameter `%s' has incomplete type\");\n-\t  TREE_TYPE (parm) = error_mark_node;\n-\t}\n-\n-      if (! DECL_WEAK (parm))\n-\t{\n-\t  error_with_decl (parm,\n-\t\t\t   \"declaration for parameter `%s' but no such parameter\");\n-\t  /* Pretend the parameter was not missing.\n-\t     This gets us to a standard state and minimizes\n-\t     further error messages.  */\n-\t  specparms\n-\t    = chainon (specparms,\n-\t\t       tree_cons (parm, NULL_TREE, NULL_TREE));\n-\t}\n-\n-      parm = next;\n-    }\n-\n-  /* Chain the declarations together in the order of the list of names.\n-     At the same time, build up a list of their types, in reverse order.  */\n-\n-  parm = specparms;\n-  parmdecls = 0;\n-  {\n-    register tree last;\n-    for (last = 0; parm; parm = TREE_CHAIN (parm))\n-      if (TREE_PURPOSE (parm))\n-\t{\n-\t  if (last == 0)\n-\t    parmdecls = TREE_PURPOSE (parm);\n-\t  else\n-\t    TREE_CHAIN (last) = TREE_PURPOSE (parm);\n-\t  last = TREE_PURPOSE (parm);\n-\t  TREE_CHAIN (last) = 0;\n-\n-\t  types = tree_cons (NULL_TREE, TREE_TYPE (parm), types);\n-\t}\n-  }\n-\n-  if (void_at_end)\n-    return tree_cons (parmdecls, nonparms,\n-\t\t      nreverse (tree_cons (NULL_TREE, void_type_node, types)));\n-\n-  return tree_cons (parmdecls, nonparms, nreverse (types));\n-}\n-\f\n /* Finish up a function declaration and compile that function\n    all the way to assembler language output.  The free the storage\n    for the function definition."}, {"sha": "9b0c2d63c1bd52899584c9a8a99001aa793ec13c", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for C parsing and type checking.\n    Copyright (C) 1987, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -168,7 +168,6 @@ extern void c_mark_varargs                      PARAMS ((void));\n extern void check_for_loop_decls                PARAMS ((void));\n extern tree check_identifier                    PARAMS ((tree, tree));\n extern void clear_parm_order                    PARAMS ((void));\n-extern tree combine_parm_decls                  PARAMS ((tree, tree, int));\n extern int  complete_array_type                 PARAMS ((tree, tree, int));\n extern void declare_parm_level                  PARAMS ((int));\n extern tree define_label                        PARAMS ((const char *, int,"}, {"sha": "62aae2c9f2d24df0e75ff8e7a22597cd616f969a", "filename": "gcc/ch/ch-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fch%2Fch-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fch%2Fch-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.h?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for CHILL parsing and type checking.\n    Copyright (C) 1992, 1993, 1994, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -669,7 +669,6 @@ extern tree c_build_type_variant                PARAMS ((tree, int, int));\n extern int  c_decode_option                     PARAMS ((int, char **));\n extern void c_mark_varargs                      PARAMS ((void));\n extern void clear_parm_order                    PARAMS ((void));\n-extern tree combine_parm_decls                  PARAMS ((tree, tree, int));\n extern int  complete_array_type                 PARAMS ((tree, tree, int));\n extern void declare_parm_level                  PARAMS ((int));\n extern tree define_label                        PARAMS ((const char *, int, tree));"}, {"sha": "6972d85fc09425e8e0a6edd5287fe5d35d2baa93", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -8463,7 +8463,8 @@ num_sign_bit_copies (x, mode)\n \t of sign bit copies, we can just subtract that amount from the\n \t number.  */\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t  && INTVAL (XEXP (x, 1)) >= 0 && INTVAL (XEXP (x, 1)) < bitwidth)\n+\t  && INTVAL (XEXP (x, 1)) >= 0\n+\t  && INTVAL (XEXP (x, 1)) < (int) bitwidth)\n \t{\n \t  num0 = num_sign_bit_copies (XEXP (x, 0), mode);\n \t  return MAX (1, num0 - (code == ROTATE ? INTVAL (XEXP (x, 1))\n@@ -8595,15 +8596,15 @@ num_sign_bit_copies (x, mode)\n       num0 = num_sign_bit_copies (XEXP (x, 0), mode);\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT\n \t  && INTVAL (XEXP (x, 1)) > 0)\n-\tnum0 = MIN (bitwidth, num0 + INTVAL (XEXP (x, 1)));\n+\tnum0 = MIN ((int) bitwidth, num0 + INTVAL (XEXP (x, 1)));\n \n       return num0;\n \n     case ASHIFT:\n       /* Left shifts destroy copies.  */\n       if (GET_CODE (XEXP (x, 1)) != CONST_INT\n \t  || INTVAL (XEXP (x, 1)) < 0\n-\t  || INTVAL (XEXP (x, 1)) >= bitwidth)\n+\t  || INTVAL (XEXP (x, 1)) >= (int) bitwidth)\n \treturn 1;\n \n       num0 = num_sign_bit_copies (XEXP (x, 0), mode);"}, {"sha": "7cfbd96f8cf01bdffabfea80c03478488dc43cb9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -3555,7 +3555,8 @@ build_op_delete_call (code, addr, size, flags, placement)\n      tree addr, size, placement;\n      int flags;\n {\n-  tree fn, fns, fnname, fntype, argtypes, args, type;\n+  tree fn = NULL_TREE;\n+  tree fns, fnname, fntype, argtypes, args, type;\n   int pass;\n \n   if (addr == error_mark_node)\n@@ -3871,8 +3872,7 @@ convert_like_real (convs, expr, fn, argnum, inner)\n       /* Copy-initialization where the cv-unqualified version of the source\n \t type is the same class as, or a derived class of, the class of the\n \t destination [is treated as direct-initialization].  [dcl.init] */\n-      if (fn)\n-\tsavew = warningcount, savee = errorcount;\n+      savew = warningcount, savee = errorcount;\n       expr = build_new_method_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t    build_tree_list (NULL_TREE, expr),\n \t\t\t\t    TYPE_BINFO (totype),\n@@ -5425,7 +5425,7 @@ joust (cand1, cand2, warn)\n   if (!pedantic)\n     {\n       int rank1 = IDENTITY_RANK, rank2 = IDENTITY_RANK;\n-      struct z_candidate *w, *l;\n+      struct z_candidate *w = 0, *l = 0;\n \n       for (i = 0; i < len; ++i)\n \t{"}, {"sha": "fac4a3891a9534cbf9bf8a17f0674f0ba75244ce", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -202,6 +202,7 @@ static void update_vtable_entry_for_fn PARAMS ((tree, tree, tree, tree *));\n static tree copy_virtuals PARAMS ((tree));\n static void build_ctor_vtbl_group PARAMS ((tree, tree));\n static void build_vtt PARAMS ((tree));\n+static tree binfo_ctor_vtable PARAMS ((tree));\n static tree *build_vtt_inits PARAMS ((tree, tree, tree *, tree *));\n static tree dfs_build_secondary_vptr_vtt_inits PARAMS ((tree, void *));\n static tree dfs_ctor_vtable_bases_queue_p PARAMS ((tree, void *data));\n@@ -6796,7 +6797,7 @@ get_primary_binfo (binfo)\n      tree binfo;\n {\n   tree primary_base;\n-  tree result;\n+  tree result = NULL_TREE;\n   tree virtuals;\n   \n   primary_base = CLASSTYPE_PRIMARY_BINFO (BINFO_TYPE (binfo));"}, {"sha": "d2b2b05f8879b3c3902e4dd256367e6bbf567370", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -2200,7 +2200,7 @@ tree\n build_java_class_ref (type)\n      tree type;\n {\n-  tree name, class_decl;\n+  tree name = NULL_TREE, class_decl;\n   static tree CL_suffix = NULL_TREE;\n   if (CL_suffix == NULL_TREE)\n     CL_suffix = get_identifier(\"class$\");"}, {"sha": "f5b508c55ed9f30bcb963ecd5a90c3a35d16a7a3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -1716,7 +1716,7 @@ static void\n output_call_frame_info (for_eh)\n      int for_eh;\n {\n-  register unsigned long i;\n+  register unsigned int i;\n   register dw_fde_ref fde;\n   register dw_cfi_ref cfi;\n   char l1[20], l2[20];\n@@ -5507,7 +5507,7 @@ build_abbrev_table (die)\n      register dw_die_ref die;\n {\n   register unsigned long abbrev_id;\n-  register unsigned long n_alloc;\n+  register unsigned int n_alloc;\n   register dw_die_ref c;\n   register dw_attr_ref d_attr, a_attr;\n \n@@ -11450,7 +11450,7 @@ void\n dwarf2out_finish ()\n {\n   limbo_die_node *node, *next_node;\n-  dw_die_ref die;\n+  dw_die_ref die = 0;\n \n   /* Traverse the limbo die list, and add parent/child links.  The only\n      dies without parents that should be here are concrete instances of"}, {"sha": "db961fb1f2d9409ae461c2617dbd4353d3f93d5c", "filename": "gcc/except.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -100,7 +100,7 @@ tree (*lang_eh_runtime_type) PARAMS ((tree));\n rtx exception_handler_labels;\n \n static int call_site_base;\n-static int sjlj_funcdef_number;\n+static unsigned int sjlj_funcdef_number;\n static htab_t type_to_runtime_map;\n \n /* Describe the SjLj_Function_Context structure.  */\n@@ -1855,7 +1855,8 @@ connect_post_landing_pads ()\n static void\n dw2_build_landing_pads ()\n {\n-  int i, j;\n+  int i;\n+  unsigned int j;\n \n   for (i = cfun->eh->last_region_number; i > 0; --i)\n     {\n@@ -3233,7 +3234,7 @@ convert_to_eh_region_ranges ()\n   rtx last_action_insn = NULL_RTX;\n   rtx last_landing_pad = NULL_RTX;\n   rtx first_no_action_insn = NULL_RTX;\n-  int call_site;\n+  int call_site = 0;\n \n   if (USING_SJLJ_EXCEPTIONS || cfun->eh->region_tree == NULL)\n     return;\n@@ -3504,7 +3505,7 @@ output_function_exception_table ()\n #endif\n   int have_tt_data;\n   int funcdef_number;\n-  int tt_format_size;\n+  int tt_format_size = 0;\n \n   /* Not all functions need anything.  */\n   if (! cfun->uses_eh_lsda)"}, {"sha": "a6712826a330cef467a7dd0be9797723821bee23", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -1566,7 +1566,7 @@ move_by_pieces_1 (genfun, mode, data)\n      struct move_by_pieces *data;\n {\n   unsigned int size = GET_MODE_SIZE (mode);\n-  rtx to1, from1;\n+  rtx to1 = NULL_RTX, from1;\n \n   while (data->len >= size)\n     {\n@@ -4699,8 +4699,8 @@ store_constructor (exp, target, align, cleared, size)\n       tree elttype = TREE_TYPE (type);\n       int const_bounds_p = (host_integerp (TYPE_MIN_VALUE (domain), 0)\n \t\t\t    && host_integerp (TYPE_MAX_VALUE (domain), 0));\n-      HOST_WIDE_INT minelt;\n-      HOST_WIDE_INT maxelt;\n+      HOST_WIDE_INT minelt = 0;\n+      HOST_WIDE_INT maxelt = 0;\n \n       /* If we have constant bounds for the range of the type, get them.  */\n       if (const_bounds_p)"}, {"sha": "ba1b99c23f9edc0770c61c12c5828919ffd6f88f", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -3773,7 +3773,7 @@ static void\n mark_regs_live_at_end (set)\n      regset set;\n {\n-  int i;\n+  unsigned int i;\n \n   /* If exiting needs the right stack value, consider the stack pointer\n      live at the end of the function.  */"}, {"sha": "14c4513a3fa0d3c8cbc783a37915669ee9f02fde", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -3564,13 +3564,15 @@ instantiate_decls (fndecl, valid_only)\n   for (decl = DECL_ARGUMENTS (fndecl); decl; decl = TREE_CHAIN (decl))\n     {\n       HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (decl));\n+      HOST_WIDE_INT size_rtl;\n \n       instantiate_decl (DECL_RTL (decl), size, valid_only);\n \n       /* If the parameter was promoted, then the incoming RTL mode may be\n \t larger than the declared type size.  We must use the larger of\n \t the two sizes.  */\n-      size = MAX (GET_MODE_SIZE (GET_MODE (DECL_INCOMING_RTL (decl))), size);\n+      size_rtl = GET_MODE_SIZE (GET_MODE (DECL_INCOMING_RTL (decl)));\n+      size = MAX (size_rtl, size);\n       instantiate_decl (DECL_INCOMING_RTL (decl), size, valid_only);\n     }\n "}, {"sha": "c2337606bba14bfaa5f62b365965140e92fb9273", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -1026,14 +1026,15 @@ emit_swap_insn (insn, regstack, reg)\n \t swap with, omit the swap.  */\n \n       if (GET_CODE (i1dest) == REG && REGNO (i1dest) == FIRST_STACK_REG\n-\t  && GET_CODE (i1src) == REG && REGNO (i1src) == hard_regno - 1\n+\t  && GET_CODE (i1src) == REG\n+\t  && REGNO (i1src) == (unsigned) hard_regno - 1\n \t  && find_regno_note (i1, REG_DEAD, FIRST_STACK_REG) == NULL_RTX)\n \treturn;\n \n       /* If the previous insn wrote to the reg we are to swap with,\n \t omit the swap.  */\n \n-      if (GET_CODE (i1dest) == REG && REGNO (i1dest) == hard_regno\n+      if (GET_CODE (i1dest) == REG && REGNO (i1dest) == (unsigned) hard_regno\n \t  && GET_CODE (i1src) == REG && REGNO (i1src) == FIRST_STACK_REG\n \t  && find_regno_note (i1, REG_DEAD, FIRST_STACK_REG) == NULL_RTX)\n \treturn;\n@@ -1969,7 +1970,7 @@ subst_asm_stack_regs (insn, regstack)\n \tif (regno < 0)\n \t  abort ();\n \n-\tif (regno != REGNO (recog_data.operand[i]))\n+\tif ((unsigned int) regno != REGNO (recog_data.operand[i]))\n \t  {\n \t    /* recog_data.operand[i] is not in the right place.  Find\n \t       it and swap it with whatever is already in I's place.\n@@ -2071,7 +2072,7 @@ subst_asm_stack_regs (insn, regstack)\n \n       for (j = 0; j < n_outputs; j++)\n \tif (STACK_REG_P (recog_data.operand[j])\n-\t    && REGNO (recog_data.operand[j]) == i)\n+\t    && REGNO (recog_data.operand[j]) == (unsigned) i)\n \t  {\n \t    regstack->reg[++regstack->top] = i;\n \t    SET_HARD_REG_BIT (regstack->reg_set, i);"}, {"sha": "7e4914335121f3bca10facd17d65e485dee851d7", "filename": "gcc/regmove.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -72,7 +72,7 @@ static void flags_set_1 PARAMS ((rtx, rtx, void *));\n \n static int try_auto_increment PARAMS ((rtx, rtx, rtx, rtx, HOST_WIDE_INT, int));\n static int find_matches PARAMS ((rtx, struct match *));\n-static void replace_in_call_usage PARAMS ((rtx *, int, rtx, rtx));\n+static void replace_in_call_usage PARAMS ((rtx *, unsigned int, rtx, rtx));\n static int fixup_match_1 PARAMS ((rtx, rtx, rtx, rtx, rtx, int, int, int, FILE *))\n ;\n static int reg_is_remote_constant_p PARAMS ((rtx, rtx, rtx));\n@@ -1619,7 +1619,7 @@ find_matches (insn, matchp)\n static void\n replace_in_call_usage (loc, dst_reg, src, insn)\n      rtx *loc;\n-     int dst_reg;\n+     unsigned int dst_reg;\n      rtx src;\n      rtx insn;\n {"}, {"sha": "03e5d21e00b815da764067df22b8f484320538fd", "filename": "gcc/reload.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -1039,7 +1039,7 @@ push_reload (in, out, inloc, outloc, class,\n \t order as the reloads.  Thus if the outer reload is also of type\n \t RELOAD_OTHER, we are guaranteed that this inner reload will be\n \t output before the outer reload.  */\n-      push_reload (SUBREG_REG (in), NULL_RTX, &SUBREG_REG (in), NULL_RTX,\n+      push_reload (SUBREG_REG (in), NULL_RTX, &SUBREG_REG (in), (rtx *)0,\n \t\t   in_class, VOIDmode, VOIDmode, 0, 0, opnum, type);\n       dont_remove_subreg = 1;\n     }\n@@ -6698,14 +6698,14 @@ regno_clobbered_p (regno, insn, mode, sets)\n      enum machine_mode mode;\n      int sets;\n {\n-  int nregs = HARD_REGNO_NREGS (regno, mode);\n-  int endregno = regno + nregs;\n+  unsigned int nregs = HARD_REGNO_NREGS (regno, mode);\n+  unsigned int endregno = regno + nregs;\n \n   if ((GET_CODE (PATTERN (insn)) == CLOBBER\n        || (sets && GET_CODE (PATTERN (insn)) == SET))\n       && GET_CODE (XEXP (PATTERN (insn), 0)) == REG)\n     {\n-      int test = REGNO (XEXP (PATTERN (insn), 0));\n+      unsigned int test = REGNO (XEXP (PATTERN (insn), 0));\n \n       return test >= regno && test < endregno;\n     }\n@@ -6721,7 +6721,7 @@ regno_clobbered_p (regno, insn, mode, sets)\n \t       || (sets && GET_CODE (PATTERN (insn)) == SET))\n \t      && GET_CODE (XEXP (elt, 0)) == REG)\n \t    {\n-\t      int test = REGNO (XEXP (elt, 0));\n+\t      unsigned int test = REGNO (XEXP (elt, 0));\n \t      \n \t      if (test >= regno && test < endregno)\n \t\treturn 1;"}, {"sha": "1423e6ed0d758f5d5e90d7713fcdddf47c98754a", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -601,7 +601,7 @@ replace_pseudos_in_call_usage (loc, mem_mode, usage)\n   code = GET_CODE (x);\n   if (code == REG)\n     {\n-      int regno = REGNO (x);\n+      unsigned int regno = REGNO (x);\n \n       if (regno < FIRST_PSEUDO_REGISTER)\n \treturn;\n@@ -8585,7 +8585,8 @@ static void\n reload_combine ()\n {\n   rtx insn, set;\n-  int first_index_reg = -1, last_index_reg;\n+  int first_index_reg = -1;\n+  int last_index_reg = 0;\n   int i;\n   unsigned int r;\n   int last_label_ruid;\n@@ -8816,7 +8817,7 @@ reload_combine ()\n \t      rtx usage_rtx = XEXP (XEXP (link, 0), 0);\n \t      if (GET_CODE (usage_rtx) == REG)\n \t        {\n-\t\t  int i;\n+\t\t  unsigned int i;\n \t\t  unsigned int start_reg = REGNO (usage_rtx);\n \t\t  unsigned int num_regs =\n \t\t\tHARD_REGNO_NREGS (start_reg, GET_MODE (usage_rtx));"}, {"sha": "f7439344546744d81dfcf6dcdcd42a28a9859443", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -1,7 +1,7 @@\n /* Instruction scheduling pass.  This file computes dependencies between\n    instructions.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) Enhanced by,\n    and currently maintained by, Jim Wilson (wilson@cygnus.com)\n \n@@ -197,7 +197,6 @@ add_dependence (insn, elem, dep_type)\n {\n   rtx link, next;\n   int present_p;\n-  enum reg_note present_dep_type;\n   rtx cond1, cond2;\n \n   /* Don't depend an insn on itself.  */\n@@ -271,10 +270,13 @@ add_dependence (insn, elem, dep_type)\n      dramatically for some code.  */\n   if (true_dependency_cache != NULL)\n     {\n+      enum reg_note present_dep_type = 0;\n+\n       if (anti_dependency_cache == NULL || output_dependency_cache == NULL)\n \tabort ();\n       if (TEST_BIT (true_dependency_cache[INSN_LUID (insn)], INSN_LUID (elem)))\n-\tpresent_dep_type = 0;\n+\t/* Do nothing (present_set_type is already 0).  */\n+\t;\n       else if (TEST_BIT (anti_dependency_cache[INSN_LUID (insn)],\n \t\t\t INSN_LUID (elem)))\n \tpresent_dep_type = REG_DEP_ANTI;"}, {"sha": "b21066ed3cffb3468e576f871f14a87ee24212ba", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0ed63adcac41147fc40bd965fc5029082bd571/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=ae0ed63adcac41147fc40bd965fc5029082bd571", "patch": "@@ -2196,7 +2196,7 @@ simplify_subreg (outermode, op, innermode, byte)\n   if (CONSTANT_P (op))\n     {\n       int offset, part;\n-      unsigned HOST_WIDE_INT val;\n+      unsigned HOST_WIDE_INT val = 0;\n \n       /* ??? This code is partly redundant with code bellow, but can handle\n \t the subregs of floats and similar corner cases.\n@@ -2231,7 +2231,7 @@ simplify_subreg (outermode, op, innermode, byte)\n \n \t  /* We can't handle this case yet.  */\n \t  if (GET_MODE_BITSIZE (outermode) >= HOST_BITS_PER_WIDE_INT)\n-\t    return NULL;\n+\t    return NULL_RTX;\n \n \t  part = offset >= HOST_BITS_PER_WIDE_INT;\n \t  if ((BITS_PER_WORD > HOST_BITS_PER_WIDE_INT\n@@ -2253,7 +2253,7 @@ simplify_subreg (outermode, op, innermode, byte)\n \n \t  /* We don't handle synthetizing of non-integral constants yet.  */\n \t  if (GET_MODE_CLASS (outermode) != MODE_INT)\n-\t    return NULL;\n+\t    return NULL_RTX;\n \n \t  if (BYTES_BIG_ENDIAN || WORDS_BIG_ENDIAN)\n \t    {\n@@ -2322,8 +2322,8 @@ simplify_subreg (outermode, op, innermode, byte)\n \t    return NULL_RTX;\n \t  /* Bail out in case resulting subreg would be incorrect.  */\n \t  if (final_offset % GET_MODE_SIZE (outermode)\n-\t      || final_offset >= GET_MODE_SIZE (innermostmode))\n-\t    return NULL;\n+\t      || (unsigned) final_offset >= GET_MODE_SIZE (innermostmode))\n+\t    return NULL_RTX;\n \t}\n       else\n \t{\n@@ -2339,7 +2339,7 @@ simplify_subreg (outermode, op, innermode, byte)\n \t  if (offset == final_offset)\n \t    final_offset = 0;\n \t  else\n-\t    return NULL;\n+\t    return NULL_RTX;\n \t}\n \n       /* Recurse for futher possible simplifications.  */"}]}