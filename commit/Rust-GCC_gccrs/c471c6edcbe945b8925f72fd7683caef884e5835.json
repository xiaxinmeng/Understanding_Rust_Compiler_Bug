{"sha": "c471c6edcbe945b8925f72fd7683caef884e5835", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3MWM2ZWRjYmU5NDViODkyNWY3MmZkNzY4M2NhZWY4ODRlNTgzNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-07-06T14:17:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-07-06T14:17:24Z"}, "message": "diagnostics: fix end-points of ranges within macros (PR c++/79300)\n\ngcc/ChangeLog:\n\tPR c++/79300\n\t* diagnostic-show-locus.c (layout::layout): Use start and finish\n\tspelling location for the start and finish of each range.\n\t* genmatch.c (linemap_client_expand_location_to_spelling_point):\n\tAdd unused aspect param.\n\t* input.c (expand_location_1): Add \"aspect\" param, and use it\n\tto access the correct part of the location.\n\t(expand_location): Pass LOCATION_ASPECT_CARET to new param of\n\texpand_location_1.\n\t(expand_location_to_spelling_point): Likewise.\n\t(linemap_client_expand_location_to_spelling_point): Add \"aspect\"\n\tparam, and pass it to expand_location_1.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/79300\n\t* c-c++-common/Wmisleading-indentation-3.c (fn_14): Update\n\texpected underlining within macro expansion.\n\t* c-c++-common/pr70264.c: Likewise.\n\t* g++.dg/plugin/diagnostic-test-expressions-1.C\n\t(test_within_macro_1): New test.\n\t(test_within_macro_2): Likewise.\n\t(test_within_macro_3): Likewise.\n\t(test_within_macro_4): Likewise.\n\t* gcc.dg/format/diagnostic-ranges.c (test_macro_3): Update\n\texpected underlining within macro expansion.\n\t(test_macro_4): Likewise.\n\t* gcc.dg/plugin/diagnostic-test-expressions-1.c\n\t(test_within_macro_1): New test.\n\t(test_within_macro_2): Likewise.\n\t(test_within_macro_3): Likewise.\n\t(test_within_macro_4): Likewise.\n\t* gcc.dg/spellcheck-fields-2.c (test_macro): Update expected\n\tunderlining within macro expansion.\n\nlibcpp/ChangeLog:\n\tPR c++/79300\n\t* include/line-map.h (enum location_aspect): New enum.\n\t(linemap_client_expand_location_to_spelling_point): Add\n\tenum location_aspect param.\n\t* line-map.c (rich_location::get_expanded_location): Update for\n\tnew param of linemap_client_expand_location_to_spelling_point.\n\t(rich_location::maybe_add_fixit): Likewise.\n\t(fixit_hint::affects_line_p): Likewise.\n\nFrom-SVN: r250022", "tree": {"sha": "3ff3a35cba1a15d75b13502857d21a4e5d17cb92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ff3a35cba1a15d75b13502857d21a4e5d17cb92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c471c6edcbe945b8925f72fd7683caef884e5835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c471c6edcbe945b8925f72fd7683caef884e5835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c471c6edcbe945b8925f72fd7683caef884e5835", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c471c6edcbe945b8925f72fd7683caef884e5835/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32aaf6ef10bf77d8300c0774dcc9bfcc8ed595c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32aaf6ef10bf77d8300c0774dcc9bfcc8ed595c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32aaf6ef10bf77d8300c0774dcc9bfcc8ed595c2"}], "stats": {"total": 309, "additions": 284, "deletions": 25}, "files": [{"sha": "14d34098a2b873324c726e82e3c5aa088416f4d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -1,3 +1,18 @@\n+2017-07-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/79300\n+\t* diagnostic-show-locus.c (layout::layout): Use start and finish\n+\tspelling location for the start and finish of each range.\n+\t* genmatch.c (linemap_client_expand_location_to_spelling_point):\n+\tAdd unused aspect param.\n+\t* input.c (expand_location_1): Add \"aspect\" param, and use it\n+\tto access the correct part of the location.\n+\t(expand_location): Pass LOCATION_ASPECT_CARET to new param of\n+\texpand_location_1.\n+\t(expand_location_to_spelling_point): Likewise.\n+\t(linemap_client_expand_location_to_spelling_point): Add \"aspect\"\n+\tparam, and pass it to expand_location_1.\n+\n 2017-07-06  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \t* config/i386/avx512fintrin.h (_mm_mask_getexp_round_ss,"}, {"sha": "8a4fd5f17dc8a4e41c91f85d4ebb6333faae23dc", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -788,11 +788,14 @@ layout::layout (diagnostic_context * context,\n \n       /* Expand the various locations.  */\n       expanded_location start\n-\t= linemap_client_expand_location_to_spelling_point (src_range.m_start);\n+\t= linemap_client_expand_location_to_spelling_point\n+\t    (src_range.m_start, LOCATION_ASPECT_START);\n       expanded_location finish\n-\t= linemap_client_expand_location_to_spelling_point (src_range.m_finish);\n+\t= linemap_client_expand_location_to_spelling_point\n+\t    (src_range.m_finish, LOCATION_ASPECT_FINISH);\n       expanded_location caret\n-\t= linemap_client_expand_location_to_spelling_point (loc_range->m_loc);\n+\t= linemap_client_expand_location_to_spelling_point\n+\t    (loc_range->m_loc, LOCATION_ASPECT_CARET);\n \n       /* If any part of the range isn't in the same file as the primary\n \t location of this diagnostic, ignore the range.  */"}, {"sha": "7045bb9103c24340ff0330edec8f66ada6b3e503", "filename": "gcc/genmatch.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -61,7 +61,8 @@ static struct line_maps *line_table;\n    This is the implementation for genmatch.  */\n \n expanded_location\n-linemap_client_expand_location_to_spelling_point (source_location loc)\n+linemap_client_expand_location_to_spelling_point (source_location loc,\n+\t\t\t\t\t\t  enum location_aspect)\n {\n   const struct line_map_ordinary *map;\n   loc = linemap_resolve_location (line_table, loc, LRK_SPELLING_LOCATION, &map);"}, {"sha": "0480eb24ec01b51c8353258db8c3cf59e6b66931", "filename": "gcc/input.c", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -147,11 +147,14 @@ static const size_t fcache_line_record_size = 100;\n    associated line/column) in the context of a macro expansion, the\n    returned location is the first one (while unwinding the macro\n    location towards its expansion point) that is in real source\n-   code.  */\n+   code.\n+\n+   ASPECT controls which part of the location to use.  */\n \n static expanded_location\n expand_location_1 (source_location loc,\n-\t\t   bool expansion_point_p)\n+\t\t   bool expansion_point_p,\n+\t\t   enum location_aspect aspect)\n {\n   expanded_location xloc;\n   const line_map_ordinary *map;\n@@ -181,8 +184,36 @@ expand_location_1 (source_location loc,\n \t\t\t\t\t\t\t  loc, NULL);\n \t  lrk = LRK_SPELLING_LOCATION;\n \t}\n-      loc = linemap_resolve_location (line_table, loc,\n-\t\t\t\t      lrk, &map);\n+      loc = linemap_resolve_location (line_table, loc, lrk, &map);\n+\n+      /* loc is now either in an ordinary map, or is a reserved location.\n+\t If it is a compound location, the caret is in a spelling location,\n+\t but the start/finish might still be a virtual location.\n+\t Depending of what the caller asked for, we may need to recurse\n+\t one level in order to resolve any virtual locations in the\n+\t end-points.  */\n+      switch (aspect)\n+\t{\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t  /* Fall through.  */\n+\tcase LOCATION_ASPECT_CARET:\n+\t  break;\n+\tcase LOCATION_ASPECT_START:\n+\t  {\n+\t    source_location start = get_start (loc);\n+\t    if (start != loc)\n+\t      return expand_location_1 (start, expansion_point_p, aspect);\n+\t  }\n+\t  break;\n+\tcase LOCATION_ASPECT_FINISH:\n+\t  {\n+\t    source_location finish = get_finish (loc);\n+\t    if (finish != loc)\n+\t      return expand_location_1 (finish, expansion_point_p, aspect);\n+\t  }\n+\t  break;\n+\t}\n       xloc = linemap_expand_location (line_table, map, loc);\n     }\n \n@@ -773,7 +804,8 @@ is_location_from_builtin_token (source_location loc)\n expanded_location\n expand_location (source_location loc)\n {\n-  return expand_location_1 (loc, /*expansion_point_p=*/true);\n+  return expand_location_1 (loc, /*expansion_point_p=*/true,\n+\t\t\t    LOCATION_ASPECT_CARET);\n }\n \n /* Expand the source location LOC into a human readable location.  If\n@@ -785,7 +817,8 @@ expand_location (source_location loc)\n expanded_location\n expand_location_to_spelling_point (source_location loc)\n {\n-  return expand_location_1 (loc, /*expansion_point_p=*/false);\n+  return expand_location_1 (loc, /*expansion_point_p=*/false,\n+\t\t\t    LOCATION_ASPECT_CARET);\n }\n \n /* The rich_location class within libcpp requires a way to expand\n@@ -795,12 +828,13 @@ expand_location_to_spelling_point (source_location loc)\n    to do this.\n \n    This is the implementation for libcommon.a (all host binaries),\n-   which simply calls into expand_location_to_spelling_point.  */\n+   which simply calls into expand_location_1.  */\n \n expanded_location\n-linemap_client_expand_location_to_spelling_point (source_location loc)\n+linemap_client_expand_location_to_spelling_point (source_location loc,\n+\t\t\t\t\t\t  enum location_aspect aspect)\n {\n-  return expand_location_to_spelling_point (loc);\n+  return expand_location_1 (loc, /*expansion_point_p=*/false, aspect);\n }\n \n "}, {"sha": "910f30284a8a60d79bf6bf8d1cdd88d047b71729", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -1,3 +1,25 @@\n+2017-07-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/79300\n+\t* c-c++-common/Wmisleading-indentation-3.c (fn_14): Update\n+\texpected underlining within macro expansion.\n+\t* c-c++-common/pr70264.c: Likewise.\n+\t* g++.dg/plugin/diagnostic-test-expressions-1.C\n+\t(test_within_macro_1): New test.\n+\t(test_within_macro_2): Likewise.\n+\t(test_within_macro_3): Likewise.\n+\t(test_within_macro_4): Likewise.\n+\t* gcc.dg/format/diagnostic-ranges.c (test_macro_3): Update\n+\texpected underlining within macro expansion.\n+\t(test_macro_4): Likewise.\n+\t* gcc.dg/plugin/diagnostic-test-expressions-1.c\n+\t(test_within_macro_1): New test.\n+\t(test_within_macro_2): Likewise.\n+\t(test_within_macro_3): Likewise.\n+\t(test_within_macro_4): Likewise.\n+\t* gcc.dg/spellcheck-fields-2.c (test_macro): Update expected\n+\tunderlining within macro expansion.\n+\n 2017-07-06  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \t* gcc.target/i386/avx512f-vgetexpsd-1.c (_mm_mask_getexp_sd,"}, {"sha": "870ba720c5f143aa3fb1040ee61e04b801a558b9", "filename": "gcc/testsuite/c-c++-common/Wmisleading-indentation-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation-3.c?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -68,7 +68,7 @@ void fn_14 (void)\n \n /* { dg-begin-multiline-output \"\" }\n    for ((VAR) = (START); (VAR) < (STOP); (VAR++))\n-   ^\n+   ^~~\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n    FOR_EACH (i, 0, 10)"}, {"sha": "c446942d0b8d2ff42fac62fe1ac1a20dba0e971f", "filename": "gcc/testsuite/c-c++-common/pr70264.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr70264.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr70264.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr70264.c?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -5,7 +5,7 @@ X\n \n /* { dg-begin-multiline-output \"\" }\n  #define X __LINE__\n-           ^\n+           ^~~~~~~~\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n  X"}, {"sha": "a145dfea28ccd9eab44cb39c399831e1d7e60af4", "filename": "gcc/testsuite/g++.dg/plugin/diagnostic-test-expressions-1.C", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -880,3 +880,81 @@ void test_typeid (int i)\n                                ~~~~~~~~~~~~^~~\n    { dg-end-multiline-output \"\" } */\n }\n+\n+/* Various tests of locations involving macros.  */\n+\n+void test_within_macro_1 (int lhs, int rhs)\n+{\n+#define MACRO_1(EXPR) EXPR\n+\n+  __emit_expression_range (0, MACRO_1 (lhs == rhs));\n+\n+/* { dg-warning \"range\" \"\" { target *-*-* } .-2 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, MACRO_1 (lhs == rhs));\n+                                        ~~~~^~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define MACRO_1(EXPR) EXPR\n+                       ^~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+#undef MACRO_1\n+}\n+\n+void test_within_macro_2 (int lhs, int rhs)\n+{\n+#define MACRO_2(EXPR) EXPR\n+\n+  __emit_expression_range (0, MACRO_2 (MACRO_2 (lhs == rhs)));\n+\n+/* { dg-warning \"range\" \"\" { target *-*-* } .-2 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, MACRO_2 (MACRO_2 (lhs == rhs)));\n+                                                 ~~~~^~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, MACRO_2 (MACRO_2 (lhs == rhs)));\n+                                        ^~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define MACRO_2(EXPR) EXPR\n+                       ^~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+#undef MACRO_2\n+}\n+\n+void test_within_macro_3 (int lhs, int rhs)\n+{\n+#define MACRO_3(EXPR) EXPR\n+\n+  __emit_expression_range (0, MACRO_3 (lhs) == MACRO_3 (rhs));\n+\n+/* { dg-warning \"range\" \"\" { target *-*-* } .-2 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, MACRO_3 (lhs) == MACRO_3 (rhs));\n+                                             ^\n+   { dg-end-multiline-output \"\" } */\n+\n+#undef MACRO_3\n+}\n+\n+void test_within_macro_4 (int lhs, int rhs)\n+{\n+#define MACRO_4(EXPR) EXPR\n+\n+  __emit_expression_range (0, MACRO_4 (MACRO_4 (lhs) == MACRO_4 (rhs)));\n+\n+/* { dg-warning \"range\" \"\" { target *-*-* } .-2 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, MACRO_4 (MACRO_4 (lhs) == MACRO_4 (rhs)));\n+                                                      ^\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define MACRO_4(EXPR) EXPR\n+                       ^~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+#undef MACRO_4\n+}"}, {"sha": "8cce5b38c9f56d2b8b01ffdf51d421bca2732bac", "filename": "gcc/testsuite/gcc.dg/format/diagnostic-ranges.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -278,7 +278,7 @@ void test_macro_3 (const char *msg)\n   printf(FMT_STRING, msg);  /* { dg-message \"10: in expansion of macro 'FMT_STRING\" } */\n /* { dg-begin-multiline-output \"\" }\n  #define FMT_STRING \"hello %i world\"\n-                    ^\n+                    ^~~~~~~~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n    printf(FMT_STRING, msg);\n@@ -293,7 +293,7 @@ void test_macro_4 (const char *msg)\n   printf(FMT_STRING \"\\n\", msg);  /* { dg-message \"10: in expansion of macro 'FMT_STRING\" } */\n /* { dg-begin-multiline-output \"\" }\n  #define FMT_STRING \"hello %i world\"\n-                    ^\n+                    ^~~~~~~~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n    printf(FMT_STRING \"\\n\", msg);"}, {"sha": "03b780421076b5d1306feccd7e13cfc8b6115109", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-expressions-1.c", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -708,3 +708,82 @@ baz\");\n  ~~~~                           \n    { dg-end-multiline-output \"\" } */\n }\n+\n+/* Various tests of locations involving macros.  */\n+\n+void test_within_macro_1 (int lhs, int rhs)\n+{\n+#define MACRO_1(EXPR) EXPR\n+\n+  __emit_expression_range (0, MACRO_1 (lhs == rhs));\n+\n+/* { dg-warning \"range\" \"\" { target *-*-* } .-2 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, MACRO_1 (lhs == rhs));\n+                                        ~~~~^~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define MACRO_1(EXPR) EXPR\n+                       ^~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+#undef MACRO_1\n+}\n+\n+void test_within_macro_2 (int lhs, int rhs)\n+{\n+#define MACRO_2(EXPR) EXPR\n+\n+  __emit_expression_range (0, MACRO_2 (MACRO_2 (lhs == rhs)));\n+\n+/* { dg-warning \"range\" \"\" { target *-*-* } .-2 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, MACRO_2 (MACRO_2 (lhs == rhs)));\n+                                                 ~~~~^~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, MACRO_2 (MACRO_2 (lhs == rhs)));\n+                                        ^~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define MACRO_2(EXPR) EXPR\n+                       ^~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+#undef MACRO_2\n+}\n+\n+void test_within_macro_3 (int lhs, int rhs)\n+{\n+#define MACRO_3(EXPR) EXPR\n+\n+  __emit_expression_range (0, MACRO_3 (lhs) == MACRO_3 (rhs));\n+\n+/* { dg-warning \"range\" \"\" { target *-*-* } .-2 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, MACRO_3 (lhs) == MACRO_3 (rhs));\n+                                             ^\n+   { dg-end-multiline-output \"\" } */\n+\n+#undef MACRO_3\n+}\n+\n+void test_within_macro_4 (int lhs, int rhs)\n+{\n+#define MACRO_4(EXPR) EXPR\n+\n+  __emit_expression_range (0, MACRO_4 (MACRO_4 (lhs) == MACRO_4 (rhs)));\n+\n+/* { dg-warning \"range\" \"\" { target *-*-* } .-2 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, MACRO_4 (MACRO_4 (lhs) == MACRO_4 (rhs)));\n+                                                      ^\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define MACRO_4(EXPR) EXPR\n+                       ^~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+#undef MACRO_4\n+}\n+"}, {"sha": "76684f71c80c8a60271ed082dbc4b9f18d0eb140", "filename": "gcc/testsuite/gcc.dg/spellcheck-fields-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-fields-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-fields-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-fields-2.c?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -28,7 +28,7 @@ int test_macro (union u *ptr)\n \n /* { dg-begin-multiline-output \"\" }\n  #define FIELD colour\n-               ^\n+               ^~~~~~\n    { dg-end-multiline-output \"\" } */\n \n /* { dg-begin-multiline-output \"\" }"}, {"sha": "d080b0168766b65b19088ef3ac04d62183ccb79e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -1,3 +1,14 @@\n+2017-07-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/79300\n+\t* include/line-map.h (enum location_aspect): New enum.\n+\t(linemap_client_expand_location_to_spelling_point): Add\n+\tenum location_aspect param.\n+\t* line-map.c (rich_location::get_expanded_location): Update for\n+\tnew param of linemap_client_expand_location_to_spelling_point.\n+\t(rich_location::maybe_add_fixit): Likewise.\n+\t(fixit_hint::affects_line_p): Likewise.\n+\n 2017-06-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* line-map.c (location_adhoc_data_update): Perform addition in"}, {"sha": "e6960410c00d36b0962afa130ae5cba9fc9dbbed", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -1905,13 +1905,23 @@ void linemap_dump (FILE *, struct line_maps *, unsigned, bool);\n    specifies how many macro maps to dump.  */\n void line_table_dump (FILE *, struct line_maps *, unsigned int, unsigned int);\n \n+/* An enum for distinguishing the various parts within a source_location.  */\n+\n+enum location_aspect\n+{\n+  LOCATION_ASPECT_CARET,\n+  LOCATION_ASPECT_START,\n+  LOCATION_ASPECT_FINISH\n+};\n+\n /* The rich_location class requires a way to expand source_location instances.\n    We would directly use expand_location_to_spelling_point, which is\n    implemented in gcc/input.c, but we also need to use it for rich_location\n    within genmatch.c.\n    Hence we require client code of libcpp to implement the following\n    symbol.  */\n extern expanded_location\n-linemap_client_expand_location_to_spelling_point (source_location );\n+linemap_client_expand_location_to_spelling_point (source_location,\n+\t\t\t\t\t\t  enum location_aspect);\n \n #endif /* !LIBCPP_LINE_MAP_H  */"}, {"sha": "3b65a464647f550c2fc3ddac8ef4a125cd0f32cb", "filename": "libcpp/line-map.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471c6edcbe945b8925f72fd7683caef884e5835/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471c6edcbe945b8925f72fd7683caef884e5835/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=c471c6edcbe945b8925f72fd7683caef884e5835", "patch": "@@ -2066,7 +2066,8 @@ rich_location::get_expanded_location (unsigned int idx)\n      if (!m_have_expanded_location)\n        {\n \t  m_expanded_location\n-\t    = linemap_client_expand_location_to_spelling_point (get_loc (0));\n+\t    = linemap_client_expand_location_to_spelling_point\n+\t\t(get_loc (0), LOCATION_ASPECT_CARET);\n \t  if (m_column_override)\n \t    m_expanded_location.column = m_column_override;\n \t  m_have_expanded_location = true;\n@@ -2075,7 +2076,8 @@ rich_location::get_expanded_location (unsigned int idx)\n      return m_expanded_location;\n    }\n   else\n-    return linemap_client_expand_location_to_spelling_point (get_loc (idx));\n+    return linemap_client_expand_location_to_spelling_point\n+\t     (get_loc (idx), LOCATION_ASPECT_CARET);\n }\n \n /* Set the column of the primary location, with 0 meaning\n@@ -2331,9 +2333,11 @@ rich_location::maybe_add_fixit (source_location start,\n   /* Only allow fix-it hints that affect a single line in one file.\n      Compare the end-points.  */\n   expanded_location exploc_start\n-    = linemap_client_expand_location_to_spelling_point (start);\n+    = linemap_client_expand_location_to_spelling_point (start,\n+\t\t\t\t\t\t\tLOCATION_ASPECT_START);\n   expanded_location exploc_next_loc\n-    = linemap_client_expand_location_to_spelling_point (next_loc);\n+    = linemap_client_expand_location_to_spelling_point (next_loc,\n+\t\t\t\t\t\t\tLOCATION_ASPECT_START);\n   /* They must be within the same file...  */\n   if (exploc_start.file != exploc_next_loc.file)\n     {\n@@ -2407,13 +2411,15 @@ bool\n fixit_hint::affects_line_p (const char *file, int line) const\n {\n   expanded_location exploc_start\n-    = linemap_client_expand_location_to_spelling_point (m_start);\n+    = linemap_client_expand_location_to_spelling_point (m_start,\n+\t\t\t\t\t\t\tLOCATION_ASPECT_START);\n   if (file != exploc_start.file)\n     return false;\n   if (line < exploc_start.line)\n       return false;\n   expanded_location exploc_next_loc\n-    = linemap_client_expand_location_to_spelling_point (m_next_loc);\n+    = linemap_client_expand_location_to_spelling_point (m_next_loc,\n+\t\t\t\t\t\t\tLOCATION_ASPECT_START);\n   if (file != exploc_next_loc.file)\n     return false;\n   if (line > exploc_next_loc.line)"}]}