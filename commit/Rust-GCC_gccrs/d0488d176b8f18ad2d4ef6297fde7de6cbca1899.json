{"sha": "d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0ODhkMTc2YjhmMThhZDJkNGVmNjI5N2ZkZTdkZTZjYmNhMTg5OQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2008-09-17T00:06:57Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2008-09-17T00:06:57Z"}, "message": "re PR testsuite/25241 ([C++] DejaGNU does not distinguish between errors and warnings)\n\n\tPR testsuite/25241\n\t* testsuite/g++.dg/charset/attribute2.c: Replace dg-error with\n\tdg-warning or vice versa.\n\t* testsuite/g++.dg/conversion/dr195.C: Ditto.\n\t* testsuite/g++.dg/cpp0x/variadic60.C: Ditto.\n\t* testsuite/g++.dg/expr/cast2.C: Ditto.\n\t* testsuite/g++.dg/ext/anon-struct4.C: Ditto.\n\t* testsuite/g++.dg/ext/member-attr.C: Ditto.\n\t* testsuite/g++.dg/ext/utf-array.C: Ditto.\n\t* testsuite/g++.dg/ext/utf-array-short-wchar.C: Ditto.\n\t* testsuite/g++.dg/ext/utf-typedef-cxx0x.C: Ditto.\n\t* testsuite/g++.dg/ext/visibility/redecl1.C: Ditto.\n\t* testsuite/g++.dg/ext/visibility/warn4.C: Ditto.\n\t* testsuite/g++.dg/parse/defarg11.C: Ditto.\n\t* testsuite/g++.dg/template/error17.C: Ditto.\n\t* testsuite/g++.dg/warn/pedantic2.C: Ditto.\n\t* testsuite/g++.dg/warn/pr21983.C: Ditto.\n\t* testsuite/g++.dg/warn/return-reference2.C: Ditto.\n\t* testsuite/g++.old-deja/g++.bob/inherit1.C: Ditto.\n\t* testsuite/g++.old-deja/g++.brendan/crash13.C: Ditto.\n\t* testsuite/g++.old-deja/g++.brendan/crash17.C: Ditto.\n\t* testsuite/g++.old-deja/g++.brendan/crash52.C: Ditto.\n\t* testsuite/g++.old-deja/g++.brendan/crash55.C: Ditto.\n\t* testsuite/g++.old-deja/g++.brendan/enum7.C: Ditto.\n\t* testsuite/g++.old-deja/g++.brendan/operators4.C: Ditto.\n\t* testsuite/g++.old-deja/g++.brendan/template17.C: Ditto.\n\t* testsuite/g++.old-deja/g++.brendan/warnings1.C: Ditto.\n\t* testsuite/g++.old-deja/g++.bugs/900205_03.C: Ditto.\n\t* testsuite/g++.old-deja/g++.bugs/900227_01.C: Ditto.\n\t* testsuite/g++.old-deja/g++.ext/arrnew.C: Ditto.\n\t* testsuite/g++.old-deja/g++.ext/attrib4.C: Ditto.\n\t* testsuite/g++.old-deja/g++.jason/cond.C: Ditto.\n\t* testsuite/g++.old-deja/g++.jason/operator.C: Ditto.\n\t* testsuite/g++.old-deja/g++.jason/report.C: Ditto.\n\t* testsuite/g++.old-deja/g++.law/friend5.C: Ditto.\n\t* testsuite/g++.old-deja/g++.law/temps1.C: Ditto.\n\t* testsuite/g++.old-deja/g++.law/union4.C: Ditto.\n\t* testsuite/g++.old-deja/g++.martin/pure1.C: Ditto.\n\t* testsuite/g++.old-deja/g++.mike/empty.C: Ditto.\n\t* testsuite/g++.old-deja/g++.mike/for2.C: Ditto.\n\t* testsuite/g++.old-deja/g++.mike/misc9.C: Ditto.\n\t* testsuite/g++.old-deja/g++.mike/p10769b.C: Ditto.\n\t* testsuite/g++.old-deja/g++.mike/p2855.C: Ditto.\n\t* testsuite/g++.old-deja/g++.mike/p3060c.C: Ditto.\n\t* testsuite/g++.old-deja/g++.mike/p700.C: Ditto.\n\t* testsuite/g++.old-deja/g++.mike/p9732c.C: Ditto.\n\t* testsuite/g++.old-deja/g++.mike/pmf6.C: Ditto.\n\t* testsuite/g++.old-deja/g++.mike/warn1.C: Ditto.\n\t* testsuite/g++.old-deja/g++.mike/warn5.C: Ditto.\n\t* testsuite/g++.old-deja/g++.niklas/t141.C: Ditto.\n\t* testsuite/g++.old-deja/g++.other/cast6.C: Ditto.\n\t* testsuite/g++.old-deja/g++.other/cond5.C: Ditto.\n\t* testsuite/g++.old-deja/g++.other/conv8.C: Ditto.\n\t* testsuite/g++.old-deja/g++.other/decl5.C: Ditto.\n\t* testsuite/g++.old-deja/g++.other/delete2.C: Ditto.\n\t* testsuite/g++.old-deja/g++.other/delete4.C: Ditto.\n\t* testsuite/g++.old-deja/g++.other/linkage1.C: Ditto.\n\t* testsuite/g++.old-deja/g++.other/ptrmem8.C: Ditto.\n\t* testsuite/g++.old-deja/g++.other/typename1.C: Ditto.\n\t* testsuite/g++.old-deja/g++.pt/typename14.C: Ditto.\n\t* testsuite/g++.old-deja/g++.pt/typename4.C: Ditto.\n\t* testsuite/g++.old-deja/g++.pt/typename5.C: Ditto.\n\t* testsuite/g++.old-deja/g++.pt/typename7.C: Ditto.\n\nFrom-SVN: r140405", "tree": {"sha": "179d8ff47c5a8e0ff3f0cea5036226b4f518cb53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/179d8ff47c5a8e0ff3f0cea5036226b4f518cb53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/comments", "author": null, "committer": null, "parents": [{"sha": "1edd1a831747f2aa772b8cc6cf476965112b2bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1edd1a831747f2aa772b8cc6cf476965112b2bff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1edd1a831747f2aa772b8cc6cf476965112b2bff"}], "stats": {"total": 429, "additions": 259, "deletions": 170}, "files": [{"sha": "849db2e2df6626a83c32e95e9dc5ad9b0e248e5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -1,3 +1,69 @@\n+2008-09-16  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR testsuite/25241\n+\t* testsuite/g++.dg/charset/attribute2.c: Replace dg-error with\n+\tdg-warning or vice versa.\n+\t* testsuite/g++.dg/conversion/dr195.C: Ditto.\n+\t* testsuite/g++.dg/cpp0x/variadic60.C: Ditto.\n+\t* testsuite/g++.dg/expr/cast2.C: Ditto.\n+\t* testsuite/g++.dg/ext/anon-struct4.C: Ditto.\n+\t* testsuite/g++.dg/ext/member-attr.C: Ditto.\n+\t* testsuite/g++.dg/ext/utf-array.C: Ditto.\n+\t* testsuite/g++.dg/ext/utf-array-short-wchar.C: Ditto.\n+\t* testsuite/g++.dg/ext/utf-typedef-cxx0x.C: Ditto.\n+\t* testsuite/g++.dg/ext/visibility/redecl1.C: Ditto.\n+\t* testsuite/g++.dg/ext/visibility/warn4.C: Ditto.\n+\t* testsuite/g++.dg/parse/defarg11.C: Ditto.\n+\t* testsuite/g++.dg/template/error17.C: Ditto.\n+\t* testsuite/g++.dg/warn/pedantic2.C: Ditto.\n+\t* testsuite/g++.dg/warn/pr21983.C: Ditto.\n+\t* testsuite/g++.dg/warn/return-reference2.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.bob/inherit1.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.brendan/crash13.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.brendan/crash17.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.brendan/crash52.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.brendan/crash55.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.brendan/enum7.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.brendan/operators4.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.brendan/template17.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.brendan/warnings1.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.bugs/900205_03.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.bugs/900227_01.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.ext/arrnew.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.ext/attrib4.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.jason/cond.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.jason/operator.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.jason/report.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.law/friend5.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.law/temps1.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.law/union4.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.martin/pure1.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.mike/empty.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.mike/for2.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.mike/misc9.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.mike/p10769b.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.mike/p2855.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.mike/p3060c.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.mike/p700.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.mike/p9732c.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.mike/pmf6.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.mike/warn1.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.mike/warn5.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.niklas/t141.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.other/cast6.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.other/cond5.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.other/conv8.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.other/decl5.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.other/delete2.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.other/delete4.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.other/linkage1.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.other/ptrmem8.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.other/typename1.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.pt/typename14.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.pt/typename4.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.pt/typename5.C: Ditto.\n+\t* testsuite/g++.old-deja/g++.pt/typename7.C: Ditto.\n+\n 2008-09-16  Jakub Jelinek  <jakub@redhat.com>\n \t    Adam Nemet  <anemet@caviumnetworks.com>\n "}, {"sha": "a67b7ac8775c7fdf3f4c95c8c907b0444aff384e", "filename": "gcc/testsuite/g++.dg/charset/attribute2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fattribute2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fattribute2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fattribute2.c?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -4,5 +4,5 @@\n /* { dg-do compile }\n    { dg-require-iconv \"IBM1047\" }\n */\n-int foo __attribute__ ((walrus)); /* { dg-error \"walrus\" \"ignored\" } */\n+int foo __attribute__ ((walrus)); /* { dg-warning \"walrus\" \"ignored\" } */\n char x[] = \"foobar\";"}, {"sha": "8502c1578b69c3b98cf2dd74993999f686b3e6d8", "filename": "gcc/testsuite/g++.dg/conversion/dr195.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -22,8 +22,8 @@ void foo ()\n   pv = reinterpret_cast <PV>(pf); // { dg-warning \"casting between\" \"\" }\n \n   /* the following two might or might not be ok with 195.  */\n-  pf = reinterpret_cast <PF>(po); // { dg-error \"casting between\" \"\" }\n-  po = reinterpret_cast <PO>(pf); // { dg-error \"casting between\" \"\" }\n+  pf = reinterpret_cast <PF>(po); // { dg-warning \"casting between\" \"\" }\n+  po = reinterpret_cast <PO>(pf); // { dg-warning \"casting between\" \"\" }\n \n   /* These will never be ok, as they are implicit.  */\n   pv = pf; // { dg-error \"invalid conversion\" \"\" }"}, {"sha": "b86711ff66bcb7cea46f8bd8fa41257e04d95826", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic60.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic60.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic60.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic60.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -1 +1 @@\n-template<typename... Args> class tuple; // { dg-warning \"variadic templates\" }\n+template<typename... Args> class tuple; // { dg-error \"variadic templates\" }"}, {"sha": "1ccda2b4804bc9ba64ec3bd3129a5a9a024a6320", "filename": "gcc/testsuite/g++.dg/expr/cast2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast2.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -1,5 +1,5 @@\n void (*p)();\n \n void f() {\n-  (void *)p; // { dg-error \"\" }\n+  (void *)p; // { dg-warning \"forbids cast\" }\n }"}, {"sha": "4f0fcd12b77f3f1d78f2386763a1a7246cc61bc2", "filename": "gcc/testsuite/g++.dg/ext/anon-struct4.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -1,3 +1,4 @@\n // PR c++/14401\n \n-struct { struct { int& i ; } bar ; } foo ; // { dg-error \"\" }\n+struct { struct { int& i ; } bar ; } foo ; // { dg-error \"uninitialized\" \"uninit\" }\n+// { dg-warning \"anonymous\" \"anon\" { target *-*-* } 3 }"}, {"sha": "2a7e18bf5bfe519f2c18a1ead82036c646968d1f", "filename": "gcc/testsuite/g++.dg/ext/member-attr.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmember-attr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmember-attr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmember-attr.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -9,6 +9,6 @@\n \n class T {\n   public:\n-    __attribute__ ((garbage1)) void member1(int) {} /* { dg-error \"'garbage1' attribute directive ignored\" \"\" } */\n-    void __attribute__ ((garbage2)) member2(int) {} /* { dg-error \"'garbage2' attribute directive ignored\" \"\" } */\n+    __attribute__ ((garbage1)) void member1(int) {} /* { dg-warning \"'garbage1' attribute directive ignored\" \"\" } */\n+    void __attribute__ ((garbage2)) member2(int) {} /* { dg-warning \"'garbage2' attribute directive ignored\" \"\" } */\n };"}, {"sha": "a549f6973827fe4d2100baa2376f454cd489d6f2", "filename": "gcc/testsuite/g++.dg/ext/utf-array-short-wchar.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -13,9 +13,9 @@ const char16_t\ts16_1[]\t= u\"ab\";\n const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n \n-const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char16_t\ts16_6[2] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_6[2] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n const char16_t\ts16_7[3] = u\"ab\";\n const char16_t\ts16_8[4] = u\"ab\";\n \n@@ -24,9 +24,9 @@ const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n const char32_t\ts32_2[]\t= U\"ab\";\n const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n \n-const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n const char32_t\ts32_7[3] = U\"ab\";\n const char32_t\ts32_8[4] = U\"ab\";\n "}, {"sha": "6a14f79e5f13f91b76e02eddcf5a7bb5a52ceaec", "filename": "gcc/testsuite/g++.dg/ext/utf-array.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -13,9 +13,9 @@ const char16_t\ts16_1[]\t= u\"ab\";\n const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n \n-const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char16_t\ts16_6[2] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char16_t\ts16_6[2] = u\"ab\";\t/* { dg-error \"chars is too long\" } */\n const char16_t\ts16_7[3] = u\"ab\";\n const char16_t\ts16_8[4] = u\"ab\";\n \n@@ -24,9 +24,9 @@ const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n const char32_t\ts32_2[]\t= U\"ab\";\n const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n \n-const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n+const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-error \"chars is too long\" } */\n const char32_t\ts32_7[3] = U\"ab\";\n const char32_t\ts32_8[4] = U\"ab\";\n "}, {"sha": "641e836e4198b7c1394e577e501940449ea27276", "filename": "gcc/testsuite/g++.dg/ext/utf-typedef-cxx0x.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-typedef-cxx0x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-typedef-cxx0x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-typedef-cxx0x.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n-/* Ensure that a typedef to char16_t/char32_t issues a warning in c++0x. */\n+/* Ensure that a typedef to char16_t/char32_t issues an error in c++0x. */\n /* { dg-do compile } */\n /* { dg-options \"-std=c++0x\" } */\n \n-typedef short unsigned int\tchar16_t; /* { dg-warning \"redeclaration\" } */\n-typedef unsigned int\t\tchar32_t; /* { dg-warning \"redeclaration\" } */\n+typedef short unsigned int\tchar16_t; /* { dg-error \"redeclaration\" } */\n+typedef unsigned int\t\tchar32_t; /* { dg-error \"redeclaration\" } */"}, {"sha": "b53335ef583aca5196ed85a10094bc2504b827ff", "filename": "gcc/testsuite/g++.dg/ext/visibility/redecl1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fredecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fredecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fredecl1.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -1,7 +1,7 @@\n // Test that we complain about redeclaration with different visibility\n \n struct __attribute((visibility(\"hidden\"))) B;\n-struct __attribute((visibility(\"default\"))) B;\t// { dg-warning \"visibility\" }\n+struct __attribute((visibility(\"default\"))) B;\t// { dg-error \"visibility\" }\n \n __attribute ((visibility (\"hidden\"))) void f();\t// { dg-warning \"previous\" }\n __attribute ((visibility (\"default\"))) void f(); // { dg-warning \"visibility\" }"}, {"sha": "33e6f678592a0c3bbaa298304d14f13a473c92a4", "filename": "gcc/testsuite/g++.dg/ext/visibility/warn4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn4.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -1,4 +1,4 @@\n-// Error if we try to give an instantiation visibility after it's already\n+// Warn if we try to give an instantiation visibility after it's already\n // been instantiated.\n \n // { dg-require-visibility \"\" }\n@@ -7,4 +7,4 @@ template <class T> struct A { void f (T); };\n template <class T> void A<T>::f (T) { }\n \n A<double> ad;\n-template struct __attribute ((visibility (\"hidden\"))) A<double>; // { dg-error \"already defined\" }\n+template struct __attribute ((visibility (\"hidden\"))) A<double>; // { dg-warning \"already defined\" }"}, {"sha": "60199c2e20c9af3784bd71653fcb9eb6c57492dc", "filename": "gcc/testsuite/g++.dg/parse/defarg11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg11.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -4,6 +4,6 @@\n class foo {\n public:\n   void operator& (int = 1);  // { dg-error \"default argument\" }\n-  void operator++ (int = 2); // { dg-error \"default argument\" }\n-  void operator-- (int = 3); // { dg-error \"default argument\" }\n+  void operator++ (int = 2); // { dg-warning \"default argument\" }\n+  void operator-- (int = 3); // { dg-warning \"default argument\" }\n };"}, {"sha": "f34234da79f621d00a9708c9e3620fd173f68337", "filename": "gcc/testsuite/g++.dg/template/error17.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -4,5 +4,7 @@ template <typename T>\n void\n foo()\n {\n-  union { struct { }; }; // { dg-error \"\" }\n+  union { struct { }; }; // { dg-error \"prohibits anonymous struct\" \"anon\" }\n+  // { dg-error \"not inside\" \"not inside\" { target *-*-* } 7 }\n+  // { dg-warning \"no members\" \"no members\" { target *-*-* } 7 }\n }"}, {"sha": "6c834162c1b63598098978495b78b0625f937272", "filename": "gcc/testsuite/g++.dg/warn/pedantic2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpedantic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpedantic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpedantic2.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -5,6 +5,6 @@ class foo\n   foo() {};\n   void bar() {};\n \n-  foo(int) {};;  // { dg-error \"extra\" }\n-  void bar(int) {};;  // { dg-error \"extra\" }\n+  foo(int) {};;  // { dg-warning \"extra\" }\n+  void bar(int) {};;  // { dg-warning \"extra\" }\n };"}, {"sha": "0108169ea31833cc48a3bfe2762c6af1eccab86e", "filename": "gcc/testsuite/g++.dg/warn/pr21983.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr21983.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr21983.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr21983.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -4,4 +4,4 @@\n struct B { virtual void foo () = 0; };\n struct D1 : public virtual B { virtual void foo () {} };\n struct D2 : public virtual B { virtual void foo () {} };\n-struct D : public D1, public D2 { };\t// { dg-warning \"no unique final overrider\" }\n+struct D : public D1, public D2 { };\t// { dg-error \"no unique final overrider\" }"}, {"sha": "190266215a1eb2a917942249332ceadf23e7091c", "filename": "gcc/testsuite/g++.dg/warn/return-reference2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Freturn-reference2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Freturn-reference2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Freturn-reference2.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -10,12 +10,12 @@ public:\n \n int &f()\n {\n-  A a;\t\t\t\t// { dg-error \"local\" }\n+  A a;\t\t\t\t// { dg-warning \"local\" }\n   return a.second;\n }\n \n int &g()\n {\n-  int ar[42];\t\t\t// { dg-error \"local\" }\n+  int ar[42];\t\t\t// { dg-warning \"local\" }\n   return ar[20];\n }"}, {"sha": "e75190ba130d70b029b9548208cfa7504659213e", "filename": "gcc/testsuite/g++.old-deja/g++.bob/inherit1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit1.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -11,7 +11,8 @@ public:\n \n class B : public A {\n public:\n-    char* m1 () { C::m1(); return \"\"; } // { dg-error \"\" } \n+    char* m1 () { C::m1(); return \"\"; } // { dg-error \"cannot call\" } \n+    // { dg-warning \"deprecated\" \"depr\" { target *-*-* } 14 }\n };\n \n int main () {"}, {"sha": "c1f0b7dfc7575f56495e194a69cbb0dc7de0260c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash13.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -31,7 +31,7 @@ gen_op Spul_U_axis()\n {\n   gen_op U1;\n   U1 = Fe();\n-} // { dg-error \"\" } reaches end of non-void function\n+} // { dg-warning \"no return\" } reaches end of non-void function\n \n int\n main () {}"}, {"sha": "ecbceabcecea9a6f2c3fbd02e37d3beafa6e8434", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash17.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -30,6 +30,6 @@ class GnWidget : public GnObject {\n     virtual ~GnWidget();\n };\n \n-class GnOptionGroup : public GnObject, public GnWidget {// { dg-error \"\" }  warning\n+class GnOptionGroup : public GnObject, public GnWidget {// { dg-warning \"inaccessible\" }\n };\n "}, {"sha": "6db818aa102278f2965a36bbc1db221d8b5faec1", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash52.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash52.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -5,9 +5,9 @@\n \n class A {\n public:\n-  friend A f(A &a);// { dg-error \"\" }  ambiguates.*\n+  friend A f(A &a);// { dg-error \"ambiguates\" }\n };\n \n-A &f(A &a) {// { dg-error \"\" }  new decl.*\n+A &f(A &a) {// { dg-error \"new decl\" }\n   std::cout << \"Blah\\n\";\n-} // { dg-error \"no return statement\" }\n+} // { dg-warning \"no return statement\" }"}, {"sha": "8295962411a39133f4506ea4b737a8c3881eec1e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash55.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash55.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -4,7 +4,7 @@\n \n       int& f(int x)  // { dg-error \"new declaration\" }\n       {\n-          int local; // { dg-error \"reference to local\" }\n+          int local; // { dg-warning \"reference to local\" }\n \n           local = x+2;\n       "}, {"sha": "980c8ea80dbbcb0c2f53ed961fb2075b94ef79d1", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum7.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -3,5 +3,5 @@\n enum color { red, green, blue, orange, brown };\n \n struct s {\n-      enum color      field:2; // { dg-error \"\" } too small\n+      enum color      field:2; // { dg-warning \"too small\" }\n };"}, {"sha": "6408815cdc236cf5c417017c6a78fafd8d716a9b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/operators4.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Foperators4.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -54,11 +54,11 @@ int main ()\n \tif (test3 (vp))\n \t\treturn fail ();\n \tptr_to_method_of_char p2 = &base::method;\n-\tvp = (void*) p2; // { dg-error \"\" } \n+\tvp = (void*) p2; // { dg-warning \"converting\" } \n \tif (test4 (vp))\n \t\treturn fail ();\n \tptr_to_method_of_float p3 = &base::method;\n-\tvp = (void*) p3; // { dg-error \"\" } \n+\tvp = (void*) p3; // { dg-warning \"converting\" } \n \tif (test5 (vp))\n \t\treturn fail ();\n \n@@ -83,15 +83,15 @@ int test3 (void* vp)\n int test4 (void* vp)\n {\n \tchar ch = 'x';\n-\tptr_to_method_of_char p = (ptr_to_method_of_char) vp; // { dg-error \"\" } bad type conversion\n+\tptr_to_method_of_char p = (ptr_to_method_of_char) vp; // { dg-error \"invalid cast\" } bad type conversion\n \n \treturn ((base_ptr->*p)(ch) !=  9904);\n }\n \n int test5 (void* vp)\n {\n \tfloat flt = 9.9;\n-\tptr_to_method_of_float p = (ptr_to_method_of_float) vp; // { dg-error \"\" } bad type conversion\n+\tptr_to_method_of_float p = (ptr_to_method_of_float) vp; // { dg-error \"invalid cast\" } bad type conversion\n \n \tif ((base_ptr->*p)(flt) !=  9905) {\n \t\treturn 1;"}, {"sha": "5f2d45f1cc8539b29a68879d5f11a770ff9b8577", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template17.C", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate17.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -8,5 +8,8 @@ public:\n     static unsigned sequence_number;\n };\n \n-const Regex NDAMName<'L'>::pattern(\"^[Ll](.*)$\",   1);// { dg-error \"\" }  type/value.*\n-unsigned NDAMName<'L'>::sequence_number = 0;// { dg-error \"\" }  type/value\n+const Regex NDAMName<'L'>::pattern(\"^[Ll](.*)$\",   1);// { dg-error \"type/value mismatch\" \"mismatch\" }\n+// { dg-error \"expected a type\" \"expected\" { target *-*-* } 11 }\n+// { dg-warning \"deprecated\" \"depr\" { target *-*-* } 11 }\n+unsigned NDAMName<'L'>::sequence_number = 0;// { dg-error \"type/value mismatch\" \"mismatch\" }\n+// { dg-error \"expected a type\" \"exp\" { target *-*-* } 14 }"}, {"sha": "155910021b71aa2ecbcbb484dbe3291ad30afdb0", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/warnings1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fwarnings1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fwarnings1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fwarnings1.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -2,6 +2,6 @@\n // { dg-options \"-Wctor-dtor-privacy\" }\n // GROUPS passed warnings\n // there should be a warning about foo only defining private methods\n-class foo { // { dg-error \"\" } .*\n+class foo { // { dg-warning \"private\" }\n   int bar();\n };"}, {"sha": "a460526544646b6753739874222cb97bd6795f19", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900205_03.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_03.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -18,18 +18,18 @@\n struct struct00 { };\n \n int global_function_0 () {\n-}\t\t\t\t\t// { dg-error \"\" } \n+}\t\t\t\t\t// { dg-warning \"no return\" } \n \n struct00 global_function_1 () {\n-}\t\t\t\t\t// { dg-error \"\" } \n+}\t\t\t\t\t// { dg-warning \"no return\" } \n \n struct struct0 {\n \n   int struct0_member_function_0 () {\n-  }\t\t\t\t\t// { dg-error \"\" } \n+  }\t\t\t\t\t// { dg-warning \"no return\" } \n \n   struct0 struct0_member_function_1 () {\n-  }\t\t\t\t\t// { dg-error \"\" } \n+  }\t\t\t\t\t// { dg-warning \"no return\" } \n };\n \n struct struct1 {\n@@ -41,9 +41,9 @@ struct struct1 {\n };\n \n int struct1_member_function_0 () {\n-}\t\t\t\t\t// { dg-error \"\" } \n+}\t\t\t\t\t// { dg-warning \"no return\" } \n \n struct1 struct1::struct1_member_function_1 () {\n-}\t\t\t\t        // { dg-error \"\" } \n+}\t\t\t\t        // { dg-warning \"no return\" } \n \n int main () { return 0; }"}, {"sha": "2bd4f3d76c25028d248492579530472d9879e834", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900227_01.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -33,7 +33,9 @@\n \n int main ();\n \n-short s = (short) &main;\t// { dg-warning \"\" \"\" { xfail h8*-*-* xstormy16-*-* } } small integer \n-char c = (char) &main;\t\t// { dg-warning \"\" } small integer\n+short s = (short) &main;\t// { dg-error \"taking address\" \"addr\" { xfail h8*-*-* xstormy16-*-* } }\n+// { dg-error \"loses precision\" \"lose\" { xfail h8*-*-* xstormy16-*-* } 36 }\n+char c = (char) &main;\t\t// { dg-error \"taking address\" }\n+// { dg-error \"loses precision\" \"lose\" { target *-*-* } 38 }\n \n int main () { return 0; }"}, {"sha": "ea3f420147028c9ba8b6a83fc5642b4ef3180f1a", "filename": "gcc/testsuite/g++.old-deja/g++.ext/arrnew.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -3,5 +3,6 @@\n // PRMS Id: 4992\n \n int *f(){\n-  return new int[1] = { 1 };   // { dg-error \"\" } removed\n+  return new int[1] = { 1 };   // { dg-error \"lvalue\" \"err\" }\n+  // { dg-warning \"extended init\" \"warn\" { target *-*-* } 6 }\n }"}, {"sha": "5c2f03e4ba1645c241b95f064435dac72e519c2f", "filename": "gcc/testsuite/g++.old-deja/g++.ext/attrib4.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fattrib4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fattrib4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fattrib4.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -7,18 +7,18 @@\n #define PF __attribute__ ((format (printf, 1, 2)))\n \n struct A {\n-  static PF void f (char *, ...);\n-  friend PF void g (char *, ...);\n+  static PF void f (const char *, ...);\n+  static PF void g (const char *, ...) { }\n   static void test ();\n };\n \n-void PF h (char *, ...);\n-void PF k (char *, ...) { }\n+void PF h (const char *, ...);\n+void PF k (const char *, ...) { }\n \n void A::test ()\n {\n-  f (\"%f\", 42);\t\t\t// { dg-warning \"\" } \n-  g (\"%f\", 42);\t\t\t// { dg-warning \"\" } \n-  h (\"%f\", 42);\t\t\t// { dg-warning \"\" } \n-  k (\"%f\", 42);\t\t\t// { dg-warning \"\" } \n+  f (\"%f\", 42);\t\t\t// { dg-warning \"argument 2\" }\n+  g (\"%f\", 42);\t\t\t// { dg-warning \"argument 2\" }\n+  h (\"%f\", 42);\t\t\t// { dg-warning \"argument 2\" }\n+  k (\"%f\", 42);\t\t\t// { dg-warning \"argument 2\" }\n }"}, {"sha": "eaddcd68a0a0f735727c7aa29cf4452ace505413", "filename": "gcc/testsuite/g++.old-deja/g++.jason/cond.C", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -17,14 +17,14 @@ int main()\n       char j;\n     }\n \n-  while (int i = 0)\t\t// { dg-error \"\" }\n+  while (int i = 0)\t\t// { dg-error \"previously\" }\n     {\n-      int i;\t\t\t// { dg-error \"\" }\n+      int i;\t\t\t// { dg-error \"redeclaration\" }\n     }\n \n-  for (; int i = 0; )\t\t// { dg-error \"\" }\n+  for (; int i = 0; )\t\t// { dg-error \"previously\" }\n     {\n-      int i;\t\t\t// { dg-error \"\" }\n+      int i;\t\t\t// { dg-error \"redeclaration\" }\n     }\n \n   switch (int i = 0)\t\t// { dg-error \"\" \"\" { xfail *-*-* } } \n@@ -33,23 +33,26 @@ int main()\n       int i;\t\t\t// { dg-error \"\" \"\" { xfail *-*-* } } \n     }\n \n-  if (struct A { operator int () { return 1; } } *foo = new A) // { dg-error \"\" } \n+  if (struct A { operator int () { return 1; } } *foo = new A) // { dg-error \"defined\" } \n     ;\n \n-  A bar;\t\t\t// { dg-error \"\" } \n+  A bar;\t\t\t// { dg-error \"not declared\" \"decl\" } \n+  // { dg-error \"expected\" \"exp\" { target *-*-* } 39 }\n   \n-  if (enum A { one, two, three } foo = one) // { dg-error \"\" } \n+  if (enum A { one, two, three } foo = one) // { dg-error \"defined\" \"def\" } \n+  // { dg-error \"declared\" \"decl\" { target *-*-* } 42 }\n     ;\n \n   struct B { operator int () { return 2; } };\n \n   if (struct B * foo = new B)\n     ;\n \n-  if (int f () = 1)\t\t// { dg-error \"\" } \n+  if (int f () = 1)\t\t// { dg-warning \"extern\" \"extern\" } \n+  // { dg-error \"is initialized like a variable\" \"var\" { target *-*-* } 51 }\n     ;\n   \n-  if (int a[2] = {1, 2})\t// { dg-error \"\" } \n+  if (int a[2] = {1, 2})\t// { dg-error \"extended init\" } \n     ;\n \n }"}, {"sha": "78031577172fb41f8d3410c870f8e212a49d9e44", "filename": "gcc/testsuite/g++.old-deja/g++.jason/operator.C", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -5,11 +5,11 @@\n typedef __SIZE_TYPE__ size_t;\n \n struct A {\n-  int operator?:(int a, int b);\t   // { dg-warning \"\" } \n-  static int operator()(int a);\t   // { dg-error \"\" } must be nonstatic\n-  static int operator+(A,A);\t   // { dg-error \"\" } must be nonstatic\n-  int operator+(int a, int b = 1); // { dg-error \"\" } two errors on this line\n-  int operator++(char);\t\t   // { dg-error \"\" } must take 'int'\n+  int operator?:(int a, int b);\t   // { dg-error \"expected type-specifier\" } \n+  static int operator()(int a);\t   // { dg-error \"must be a nonstatic member\" }\n+  static int operator+(A,A);\t   // { dg-error \"either a non-static member\" } \n+  int operator+(int a, int b = 1); // { dg-error \"either zero or one\" }\n+  int operator++(char);\t\t   // { dg-error \"must take 'int'\" } \n   void operator delete (void *);   \n   void operator delete (void *, unsigned long);\t\n };\n@@ -23,9 +23,10 @@ struct B {\n   B * operator->();\n };\n \n-int operator-(int a, int b);\t// { dg-error \"\" } no class argument\n+int operator-(int a, int b);\t// { dg-error \"argument of class or\" }\n \n-void * operator new (A a);\t// { dg-error \"\" } invalid first argument\n-void operator delete (A a);\t// { dg-error \"\" } ditto\n+void * operator new (A a);\t// { dg-error \"first parameter\" }\n+void operator delete (A a);\t// { dg-error \"first parameter\" }\n \n-char * operator char * (int);\t// { dg-error \"\" } return value, nonmember\n+char * operator char * (int);\t// { dg-error \"return type\" \"ret\" }\n+// { dg-error \"nonstatic member function\" \"mem\" { target *-*-* } 31 }"}, {"sha": "e1079cfb0aaf0a0d76af841aec0d01df3327adf3", "filename": "gcc/testsuite/g++.old-deja/g++.jason/report.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -56,7 +56,7 @@ bar2 baz (X::Y y)\t        // { dg-error \"\" } in this context\n   bar2 wa [5];\n   wa[0] = baz(f);\n   undef2 (1); // { dg-error \"\" } implicit declaration\n-}\t\t\t\t// { dg-error \"no return statement\" }\n+}\t\t\t\t// { dg-warning \"no return statement\" }\n \n int ninny ()\n {\n@@ -71,4 +71,4 @@ int ninny ()\n int darg (char X::*p)\n {\n    undef3 (1); // { dg-error \"\" } implicit declaration\n-}\t\t\t\t// { dg-error \"no return statement\" }\n+}\t\t\t\t// { dg-warning \"no return statement\" }"}, {"sha": "0a55ce4cb10b2f87b5b636e317023633f385c6fe", "filename": "gcc/testsuite/g++.old-deja/g++.law/friend5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ffriend5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ffriend5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ffriend5.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -16,10 +16,10 @@\n         int good_friend(int)\n         {\n             obj.parts = 0;\n-        } // { dg-error \"\" } non-void\n+        } // { dg-warning \"non-void\" }\n \n         int bad_friend()\n         {\n             obj.parts = 0;\n-        } // { dg-error \"\" } non-void\n+        } // { dg-warning \"non-void\" }\n "}, {"sha": "cd0bc876e8777e1ecb32304124c4b3e599ccba1c", "filename": "gcc/testsuite/g++.old-deja/g++.law/temps1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -15,4 +15,5 @@ struct cookie\n   cookie ( foo * x) { v=x; }\n };\n \n-cookie cat(&foo(\"apabepa\"));// { dg-error \"\" } .*\n+cookie cat(&foo(\"apabepa\"));// { dg-warning \"deprecated conversion\" \"dep\" }\n+// { dg-warning \"taking address of temporary\" \"add\" { target *-*-* } 18 }"}, {"sha": "f48ceeea267f757c2a7516d22415c6abcd4ac3a3", "filename": "gcc/testsuite/g++.old-deja/g++.law/union4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Funion4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Funion4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Funion4.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -10,4 +10,4 @@ static union {\n         struct SS {\n                 int ss;\n         };\n-};// { dg-error \"\" } .*\n+};// { dg-warning \"no members\" }"}, {"sha": "f19ff0ab742985278bfb2935ee801e2df94b4a40", "filename": "gcc/testsuite/g++.old-deja/g++.martin/pure1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fpure1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fpure1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fpure1.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -3,6 +3,6 @@ class A\n {\n   public:\n     virtual void f(void) = 0; // pure virtual function.\n-     A() {f();}               // { dg-error \"\" } called in a constructor\n-    ~A() {f();}               // { dg-error \"\" } called in a destructor\n+     A() {f();}               // { dg-warning \"const\" } called in a constructor\n+    ~A() {f();}               // { dg-warning \"destr\" } called in a destructor\n };"}, {"sha": "c36942e320026ed83c887142bc58ac414bd4a9c0", "filename": "gcc/testsuite/g++.old-deja/g++.mike/empty.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fempty.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fempty.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fempty.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -3,10 +3,10 @@\n #define NOPE\n \n void foo() {\n-  while (1); /* { dg-error \"suggest a space before \" } */\n+  while (1); /* { dg-warning \"suggest a space before \" } */\n     {\n     }\n-  for (;;); /* { dg-error \"suggest a space before \" } */\n+  for (;;); /* { dg-warning \"suggest a space before \" } */\n     {\n     }\n   while (1)"}, {"sha": "42e6baa55c5f0e5f7e818cece64c2c16fa4a9ea3", "filename": "gcc/testsuite/g++.old-deja/g++.mike/for2.C", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Ffor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Ffor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Ffor2.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -3,17 +3,20 @@\n void foo() {\n   for (class C {};;)\n     ;\n-  C c;\t\t// { dg-error \"\" } \n+  C c;\t\t// { dg-error \"declared\" \"decl\" } \n+  // { dg-error \"expected\" \"exp\" { target *-*-* } 6 }\n }\n \n void bar() {\n   for (enum E {num};;)\n     ;\n-  E e;\t\t// { dg-error \"\" } \n+  E e;\t\t// { dg-error \"declared\" \"decl\" } \n+  // { dg-error \"expected\" \"exp\" { target *-*-* } 13 }\n }\n \n void bee () {\n   int i = 0;\n-  for (int fun() = 0; i != 2; ++i) {\t// { dg-error \"\" } \n+  for (int fun() = 0; i != 2; ++i) {\t// { dg-warning \"extern\" \"extern\" }\n+  // { dg-error \"initialized\" \"init\" { target *-*-* } 19 }\n   }\n }"}, {"sha": "3d8858cf64a248a348d6552bac5d2e4d7c7b9462", "filename": "gcc/testsuite/g++.old-deja/g++.mike/misc9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fmisc9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fmisc9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fmisc9.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -3,11 +3,11 @@\n // GROUPS passed qualifiers\n class bee {\n  public:\n-  int bee::bar;\t\t// { dg-warning \"\" } there is an extra bee:: here\n+  int bee::bar;\t\t// { dg-error \"extra\" } there is an extra bee:: here\n };\n \n class foo {\n  public:\n-  int bee::bar;\t\t// { dg-error \"\" } you cannot do this\n+  int bee::bar;\t\t// { dg-error \"not derived\" } you cannot do this\n     int me();\n };"}, {"sha": "9210a452ad6f7acece67cac1a89c96eeaee3c2fe", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p10769b.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -17,10 +17,11 @@ public:\n \n void A::main() {\n   void (B::*mPtrB)(B*);\n-  (*(void (*)(A*))PMF2PF(mPtrB))(&b);\t// { dg-error \"\" } \n+  (*(void (*)(A*))PMF2PF(mPtrB))(&b);\t// { dg-error \"argument passing\" } \n+  // { dg-warning \"convert\" \"warn\" { target *-*-* } 20 }\n }\n \n int main() {\n   void (A::*mPtr)() = &A::f1a;\n-  (*(void (*)(A*))PMF2PF(mPtr))(&a);\t// { dg-error \"\" } \n+  (*(void (*)(A*))PMF2PF(mPtr))(&a);\t// { dg-warning \"convert\" } \n }"}, {"sha": "3f269d276d0aa3a93cf29e4ec5864abd79a7b7d4", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p2855.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2855.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2855.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2855.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -16,6 +16,6 @@ Ctest::operator const char *() const\n int main()\n {\n   Ctest obj;\n-  char* temp = (char *)obj;\t\t// { dg-warning \"\" } \n+  char* temp = (char *)obj;\t\t// { dg-error \"invalid cast\" } \n   temp[0] = '\\0';\n }"}, {"sha": "8d9bd2e4496515a72382da3eceae376fd601c1a6", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p3060c.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp3060c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp3060c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp3060c.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -11,7 +11,7 @@ class Foo\n   operator int ();\n };\n \n-int Foo::operator int() { return x; } // { dg-warning \"\" } can't specify return type\n+int Foo::operator int() { return x; } // { dg-error \"return\" } can't specify return type\n \n Foo foo(10, 11);\n "}, {"sha": "1fef5c855499d9c2d258ee552c7b6ba745f831ed", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p700.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -223,7 +223,7 @@ inline  void  Int::operator >>=(const int b)\n { rep >>= b;  ; }\n \n \n-inline  int& operator  = (int& a,  const Int &   b)\t// { dg-warning \"\" } \n+inline  int& operator  = (int& a,  const Int &   b)\t// { dg-error \"\" } \n { a = b.Int::val(); return a;}\n inline  int& operator += (int& a,  const Int &   b)\n { a += b.Int::val(); return a; }\n@@ -562,7 +562,7 @@ inline  void  Char::operator >>=(const char b)\n { rep >>= b;  ; }\n \n \n-inline  char& operator  = (char& a,  const Char &   b)\t// { dg-warning \"\" } \n+inline  char& operator  = (char& a,  const Char &   b)\t// { dg-error \"\" } \n { a = b.Char::val(); return a;}\n inline  char& operator += (char& a,  const Char &   b)\n { a += b.Char::val(); return a; }"}, {"sha": "9239a0978ec992daec42668c9a2c2d67bede6c86", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p9732c.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp9732c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp9732c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp9732c.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -2,4 +2,4 @@\n // prms-id: 9732\n \n struct foo {};\n-foo& x() { return foo(); }\t// { dg-warning \"\" } \n+foo& x() { return foo(); }\t// { dg-error \"invalid init\" } "}, {"sha": "7ff34d0498448b95ba6128cf3854ba0de01b4a3e", "filename": "gcc/testsuite/g++.old-deja/g++.mike/pmf6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fpmf6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fpmf6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fpmf6.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -5,9 +5,9 @@ class S {\n public:\n   void (S::*pmf)();\n   void foo() {\n-    pmf();\t\t\t// { dg-warning \"\" } \n+    pmf();\t\t\t// { dg-error \"pointer-to-member\" } \n   }\n   static void foo1(S* sp) {\n-    (sp->pmf)();\t\t// { dg-error \"\" } \n+    (sp->pmf)();\t\t// { dg-error \"pointer-to-member\" } \n   }\n };"}, {"sha": "52059cbf95385e18f113409606cd4c49b0087e2b", "filename": "gcc/testsuite/g++.old-deja/g++.mike/warn1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fwarn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fwarn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fwarn1.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -9,6 +9,6 @@ int *pp=&i;\n void foo() { }\n int main()\n {\n- charptr(*pp)++;\t// { dg-warning \"\" } \n+ charptr(*pp)++;\t// { dg-error \"lvalue\" } \n  return 0;\n }"}, {"sha": "af94d53b380bbd62b325a5e5d8cf65d71e327fbf", "filename": "gcc/testsuite/g++.old-deja/g++.mike/warn5.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fwarn5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fwarn5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fwarn5.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -12,10 +12,10 @@ struct A {\n \n typedef void (A::*pmf)();\n \n-static int mememe = &A::foo - &A::bar;\t// { dg-warning \"\" } \n-pmf b = &A::foo-1;\t// { dg-warning \"\" } \n+static int mememe = &A::foo - &A::bar;\t// { dg-error \"invalid operands\" } \n+pmf b = &A::foo-1;\t// { dg-error \"invalid operands\" } \n \n int main() {\n     double y;\n-    y=X(Y-Z);   // { dg-warning \"\" } \n+    y=X(Y-Z);   // { dg-error \"pointer to a function\" } \n }"}, {"sha": "08e105161cf90b4b3964305b6b19091e5f95a7ff", "filename": "gcc/testsuite/g++.old-deja/g++.niklas/t141.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft141.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft141.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft141.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -2,5 +2,5 @@\n // { dg-options \"-Wshadow\" }\n // GROUPS passed niklas scoping ARM\n class X { X (int); };\n-void X (int);// { dg-error \"\" } .*hides constructor.*\n+void X (int);// { dg-warning \"hides constructor\" }\n void f () { X (1); }"}, {"sha": "4bf90fab52c77e8201c3331726d110b9497ce90b", "filename": "gcc/testsuite/g++.old-deja/g++.other/cast6.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast6.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -41,16 +41,16 @@ int main ()\n {\n   {\n     foofPtr fp = &foo::b;\n-    barfPtr bp = static_cast <barfPtr> (fp);    // { dg-error \"\" } invalid static_cast\n-    foofPtr fp2 = static_cast <foofPtr> (bp);   // { dg-error \"\" } invalid static_cast\n-    foofPtr fp3 = bp;                           // { dg-error \"\" } cannot convert\n-    fp3 = (foofPtr)bp;                          // { dg-warning \"\" } via virtual base\n+    barfPtr bp = static_cast <barfPtr> (fp);    // { dg-error \"via virtual base\" } invalid static_cast\n+    foofPtr fp2 = static_cast <foofPtr> (bp);   // { dg-error \"via virtual base\" } invalid static_cast\n+    foofPtr fp3 = bp;                           // { dg-error \"via virtual base\" } cannot convert\n+    fp3 = (foofPtr)bp;                          // { dg-error \"via virtual base\" } via virtual base\n     \n     foomPtr fmp = &foo::m;\n-    barmPtr bmp = static_cast <barmPtr> (fmp);  // { dg-error \"\" } invalid static_cast\n-    foomPtr fmp2 = static_cast <foomPtr> (bmp); // { dg-error \"\" } invalid static_cast\n-    foomPtr fmp3 = bmp;                         // { dg-error \"\" } cannot convert\n-    fmp3 = (foomPtr)bmp;                        // { dg-warning \"\" } via virtual base\n+    barmPtr bmp = static_cast <barmPtr> (fmp);  // { dg-error \"via virtual base\" } invalid static_cast\n+    foomPtr fmp2 = static_cast <foomPtr> (bmp); // { dg-error \"via virtual base\" } invalid static_cast\n+    foomPtr fmp3 = bmp;                         // { dg-error \"via virtual base\" } cannot convert\n+    fmp3 = (foomPtr)bmp;                        // { dg-error \"via virtual base\" } via virtual base\n   }\n   \n   return 0;"}, {"sha": "994ea6d95228a8dd0b9a01d667d90d1fc44310c6", "filename": "gcc/testsuite/g++.old-deja/g++.other/cond5.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond5.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -22,9 +22,9 @@ void fn(int i)\n   double d;\n   int j;\n \n-  j = (i ? e1 : e2);    // { dg-warning \"\" } mismatch\n-  d = (i ? e1 : 1.0);   // { dg-warning \"\" } mismatch\n-  d = (i ? 1.0 : e2);   // { dg-warning \"\" } mismatch\n+  j = (i ? e1 : e2);    // { dg-warning \"mismatch\" }\n+  d = (i ? e1 : 1.0);   // { dg-warning \"non-enumeral\" }\n+  d = (i ? 1.0 : e2);   // { dg-warning \"non-enumeral\" }\n   E1 e = (i ? e1 : e1); // ok\n   j = (i ? 1 : e2);     // ok\n   j = (i ? e1 : 1);     // ok\n@@ -35,11 +35,11 @@ void fn(int i)\n   (i ? throw X() : throw X());  // ok, void\n   \n   (i ? i : j) = 1; // ok, int &\n-  (i ? throw X() : j) = 1;    // { dg-error \"\" } non lvalue\n-  (i ? j : throw X()) = 1;    // { dg-error \"\" } non lvalue\n-  (i ? throw X() : throw X()) = 1;  // { dg-error \"\" } invalid use of void\n+  (i ? throw X() : j) = 1;    // { dg-error \"lvalue\" }\n+  (i ? j : throw X()) = 1;    // { dg-error \"lvalue\" }\n+  (i ? throw X() : throw X()) = 1;  // { dg-error \"lvalue\" }\n   \n-  (i ? (void)1 : i++);        // { dg-warning \"\" } not a throw\n-  (i ? i++ : (void)1);        // { dg-warning \"\" } not a throw\n+  (i ? (void)1 : i++);        // { dg-error \"throw-expression\" }\n+  (i ? i++ : (void)1);        // { dg-error \"throw-expression\" }\n   \n }"}, {"sha": "205ad43828060821532078ca3b379e97d3f9b2a6", "filename": "gcc/testsuite/g++.old-deja/g++.other/conv8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fconv8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fconv8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fconv8.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -27,5 +27,5 @@ void foo::a()\n {\n     typedef void(foo::*t)();\n     t c = & foo::b;\n-    d = (T) c;\t\t\t// { dg-warning \"\" } pointer to member cast\n+    d = (T) c;\t\t\t// { dg-error \"pointer to member\" }\n }"}, {"sha": "d13f7b1d0af3f8a6c4881a7524790d4deae4e731", "filename": "gcc/testsuite/g++.old-deja/g++.other/decl5.C", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -8,40 +8,41 @@\n \n \n struct A {\n-  int A::fn();        // { dg-warning \"\" } extra qualification\n-  int A::m;           // { dg-warning \"\" } extra qualification\n+  int A::fn();        // { dg-error \"extra qualification\" } \n+  int A::m;           // { dg-error \"extra qualification\" } \n   struct e;\n-  struct A::e {int i;}; // { dg-warning \"\" } extra qualification\n-  struct A::expand {  // { dg-warning \"\" } extra qualification\n+  struct A::e {int i;}; // { dg-error \"extra qualification\" \"qual\" } \n+  // { dg-error \"anonymous struct\" \"anon\" { target *-*-* } 14 }\n+  struct A::expand {  // { dg-error \"qualified name\" } \n   int m;\n   };\n   struct Z;\n-  expand me;          // { dg-error \"error: 'expand' does not name a type\" }\n+  expand me;          // { dg-error \"'expand' does not name a type\" }\n   void foo(struct A::e);\n-  void foo(struct A::z);  // { dg-warning \"\" } extra qualification\n+  void foo(struct A::z);  // { dg-error \"does not name a type\" }\n };\n \n struct Q;\n struct B {\n-  struct A::fink {    // { dg-error \"\" } no such member\n+  struct A::fink {    // { dg-error \"does not name a class before\" }\n   int m;\n   };\n-  struct A::Z {       // { dg-error \"\" } A::Z not a member of B\n+  struct A::Z {       // { dg-error \"does not enclose\" } A::Z not a member of B\n     int m;\n   };\n   int m;\n   int n;\n-  struct ::Q {        // { dg-error \"\" } ::Q not a member of B\n+  struct ::Q {        // { dg-error \"global qual\" } ::Q not a member of B\n     int m;\n   };\n-  int A::fn() {       // { dg-error \"\" } A::fn not a member of B\n+  int A::fn() {       // { dg-error \"cannot define member\" } A::fn not a member of B\n     return 0;\n   }\n   void fn(struct ::Q &);\n-  void foo(struct A::y);  // { dg-error \"\" } no such member\n+  void foo(struct A::y);  // { dg-error \"does not name a type\" } no such member\n };\n \n-struct ::C {          // { dg-warning \"\" } extra qualification\n+struct ::C {          // { dg-error \"invalid before\" } extra qualification\n   int i;\n };\n \n@@ -52,26 +53,26 @@ namespace N {\n \n namespace NMS\n {\n-  void NMS::fn();     // { dg-warning \"\" \"\" } extra qualification\n-  int NMS::i;         // { dg-warning \"\" \"\" } extra qualification\n-  struct NMS::D {     // { dg-warning \"\" } extra qualification\n+  void NMS::fn();     // { dg-error \"explicit qual\" }\n+  int NMS::i;         // { dg-error \"explicit qual\" }\n+  struct NMS::D {     // { dg-error \"does not name a class\" }\n     int i;\n   };\n-  struct N::E {       // { dg-error \"\" } no such type\n+  struct N::E {       // { dg-error \"does not name a class\" } no such type\n     int i;\n   };\n-  struct ::F {        // { dg-error \"\" } no such type\n+  struct ::F {        // { dg-error \"global qual\" } no such type\n     int i;\n   };\n-  int N::fn() {       // { dg-error \"\" } N::fn not a member of NMS\n+  int N::fn() {       // { dg-error \"namespace\" } N::fn not a member of NMS\n     return 0;\n   }\n-  struct N::F {       // { dg-error \"\" } N::F not a member of NMS\n+  struct N::F {       // { dg-error \"namespace\" } N::F not a member of NMS\n     int i;\n   };\n }\n \n-NMS::D thing;         // { dg-error \"error: 'D' in namespace 'NMS' does not name a type\" }\n+NMS::D thing;         // { dg-error \"'D' in namespace 'NMS' does not name a type\" }\n void NMS::fn()\n {\n   i = 3;"}, {"sha": "1d0554f2d95b00e64b8d3681048e197b5b1d9dba", "filename": "gcc/testsuite/g++.old-deja/g++.other/delete2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete2.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -8,6 +8,6 @@ void bar(foo a) {\n   delete a; // should be accepted\n   delete[] a; // should be accepted\n   char b[1];\n-  delete b; // { dg-error \"\" } expecting pointer type\n-  delete[] b; // { dg-error \"\" } expecting pointer type\n+  delete b; // { dg-warning \"deleting array\" } expecting pointer type\n+  delete[] b; // { dg-warning \"deleting array\" } expecting pointer type\n }"}, {"sha": "0971eb98260738759b3dbaee3abc376832eaef7c", "filename": "gcc/testsuite/g++.old-deja/g++.other/delete4.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete4.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -13,22 +13,22 @@ typedef __SIZE_TYPE__ size_t;\n \n void *operator new(size_t)\n {\n-  return 0; // { dg-error \"\" } cannot return NULL\n+  return 0; // { dg-warning \"NULL\" } cannot return NULL\n }\n void *operator new[](size_t)\n {\n-  return 0; // { dg-error \"\" } cannot return NULL\n+  return 0; // { dg-warning \"NULL\" } cannot return NULL\n }\n \n struct X\n {\n   void *operator new(size_t)\n   {\n-    return 0; // { dg-error \"\" } cannot return NULL\n+    return 0; // { dg-warning \"NULL\" } cannot return NULL\n   }\n   void *operator new[](size_t)\n   {\n-    return 0; // { dg-error \"\" } cannot return NULL\n+    return 0; // { dg-warning \"NULL\" } cannot return NULL\n   }\n };\n "}, {"sha": "e9b5a9d2aa32f96d6dba8a3f0c8a0277e83a7a0e", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -4,12 +4,12 @@ typedef struct {\n } *p;\n \n void f (p) { }\t\t\t// { dg-error \"uses anonymous type\" }\n-p q;\t\t\t\t// { dg-error \"uses anonymous type\" } \n+p q;\t\t\t\t// { dg-warning \"uses anonymous type\" } \n \n int main()\n {\n-  extern p j;\t\t\t// { dg-error \"uses anonymous type\" }\n+  extern p j;\t\t\t// { dg-warning \"uses anonymous type\" }\n   struct A { int j; };\n-  extern A a;\t\t\t// { dg-error \"uses local type\" }\n+  extern A a;\t\t\t// { dg-warning \"uses local type\" }\n   extern void f (A);\t\t// { dg-error \"uses local type\" }\n }"}, {"sha": "aff6ffac0872370be825ea809fce4895b158d071", "filename": "gcc/testsuite/g++.old-deja/g++.other/ptrmem8.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem8.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -35,8 +35,8 @@ typedef int foo::*foomPtr;\n int main ()\n {\n   foofPtr fp = &foo::b;\n-  barfPtr bp = (barfPtr)fp;         // { dg-warning \"\" } pointer to member\n-  foofPtr fp2 = (foofPtr)bp;        // { dg-warning \"\" } pointer to member\n+  barfPtr bp = (barfPtr)fp;         // { dg-error \"pointer to member\" }\n+  foofPtr fp2 = (foofPtr)bp;        // { dg-error \"pointer to member\" } \n   \n   if (fp2 != fp)\n     return 1;\n@@ -51,8 +51,8 @@ int main ()\n   fobj.m = 78;\n   \n   foomPtr fmp = &foo::m;\n-  barmPtr bmp = (barmPtr)fmp;          // { dg-warning \"\" } pointer to member\n-  foomPtr fmp2 = (foomPtr)bmp;         // { dg-warning \"\" } pointer to member\n+  barmPtr bmp = (barmPtr)fmp;          // { dg-error \"pointer to member\" } \n+  foomPtr fmp2 = (foomPtr)bmp;         // { dg-error \"pointer to member\" } \n   bar *bptr = &fobj;\n   \n   if (fmp != fmp2)"}, {"sha": "43d13522fe70f43ed2c07ca48e8f5bc7d4291eb3", "filename": "gcc/testsuite/g++.old-deja/g++.other/typename1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -13,5 +13,5 @@ public:\n template<class T>\n void f()\n {\n-  Vector<T>::iterator i = 0; // { dg-warning \"\" } missing typename\n+  Vector<T>::iterator i = 0; // { dg-error \"expected\" } missing typename\n }"}, {"sha": "2e3938329bea9fa7666ed884d1b892e615ff4d68", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename14.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -10,6 +10,6 @@ template <class T>\n struct S : public B<T>\n {\n   struct I {\n-    void f(X x);   // { dg-warning \"\" } implicit typename\n+    void f(X x);   // { dg-error \"'X' has not been declared\" } implicit typename\n   };\n };"}, {"sha": "286795cb643a31bbb8a64e7b084bc54d58049459", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -17,10 +17,10 @@ struct B : public A<U>\n template <class U>\n struct C : public B<U>\n {\n-  A_Type Func(); // { dg-warning \"\" } implicit typename\n+  A_Type Func(); // { dg-error \"does not name a type\" } implicit typename\n };\n \n \n template <class U>\n-C<U>::A_Type C<U>::Func() { // { dg-warning \"\" } implicit typename\n+C<U>::A_Type C<U>::Func() { // { dg-error \"expected\" } implicit typename\n }"}, {"sha": "bf3acc9910fa4c0a76c9cb8e110888a47af118fa", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename5.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -17,10 +17,11 @@ struct B : public A<U>\n template <class U>\n struct C : public B<U>\n {\n-  void Func(A_Type);  // { dg-warning \"\" } implicit typename\n+  void Func(A_Type);  // { dg-error \"has not been declared\" } implicit typename\n };\n \n \n template <class U>\n-void C<U>::Func(A_Type) { // { dg-warning \"\" } implicit typename\n+void C<U>::Func(A_Type) { // { dg-error \"declared void\" \"void\" } implicit typename\n+// { dg-error \"not declared\" \"decl\" { target *-*-* } 25 }\n }"}, {"sha": "9bdc4b20c48c994f1f292eb2b68af2fbda87e6eb", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename7.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0488d176b8f18ad2d4ef6297fde7de6cbca1899/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename7.C?ref=d0488d176b8f18ad2d4ef6297fde7de6cbca1899", "patch": "@@ -15,6 +15,8 @@ template <class T>\n struct D : public A <C <T> > {\n   void f ()\n     {\n-      B* new_entries = (B *) 0;  // { dg-warning \"\" } implicit typename\n+      B* new_entries = (B *) 0;  // { dg-error \"'B' was not declared in this scope\" \"B\" }\n+      // { dg-error \"'new_entries' was not declared in this scope\" \"new_entries\" { target *-*-* } 18 }\n+      // { dg-error \"expected\" \"exp\" { target *-*-* } 18 }\n     }\n };"}]}