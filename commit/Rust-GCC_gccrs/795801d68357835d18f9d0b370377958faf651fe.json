{"sha": "795801d68357835d18f9d0b370377958faf651fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk1ODAxZDY4MzU3ODM1ZDE4ZjlkMGIzNzAzNzc5NThmYWY2NTFmZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-01-10T02:54:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-01-10T02:54:39Z"}, "message": "re PR c++/55878 (--enable-checking=yes rejection of typeid)\n\n\tPR c++/55878\n\t* rtti.c (build_typeid, get_typeid): Add complain parm.\n\t(get_tinfo_decl_dynamic): Likewise.\n\t* cp-tree.h, parser.c, pt.c: Adjust.\n\nFrom-SVN: r195075", "tree": {"sha": "cb323b109ef5c42b7199508f80fc9532307154ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb323b109ef5c42b7199508f80fc9532307154ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/795801d68357835d18f9d0b370377958faf651fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795801d68357835d18f9d0b370377958faf651fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/795801d68357835d18f9d0b370377958faf651fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795801d68357835d18f9d0b370377958faf651fe/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f557e0e1b0c7c193fa566fa9128365fa4f6eab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f557e0e1b0c7c193fa566fa9128365fa4f6eab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f557e0e1b0c7c193fa566fa9128365fa4f6eab8"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "eba897fe83df64f7f2a8041f2140dbb3459532d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795801d68357835d18f9d0b370377958faf651fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795801d68357835d18f9d0b370377958faf651fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=795801d68357835d18f9d0b370377958faf651fe", "patch": "@@ -1,5 +1,10 @@\n 2013-01-09  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/55878\n+\t* rtti.c (build_typeid, get_typeid): Add complain parm.\n+\t(get_tinfo_decl_dynamic): Likewise.\n+\t* cp-tree.h, parser.c, pt.c: Adjust.\n+\n \tPR c++/55893\n \t* decl.c (cp_finish_decl): Clear TREE_READONLY if the variable\n \tneeds destruction."}, {"sha": "5482923fd3c0899dc055183c45dfecd62c94a340", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795801d68357835d18f9d0b370377958faf651fe/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795801d68357835d18f9d0b370377958faf651fe/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=795801d68357835d18f9d0b370377958faf651fe", "patch": "@@ -5476,9 +5476,9 @@ extern void finish_repo\t\t\t\t(void);\n extern GTY(()) vec<tree, va_gc> *unemitted_tinfo_decls;\n \n extern void init_rtti_processing\t\t(void);\n-extern tree build_typeid\t\t\t(tree);\n+extern tree build_typeid\t\t\t(tree, tsubst_flags_t);\n extern tree get_tinfo_decl\t\t\t(tree);\n-extern tree get_typeid\t\t\t\t(tree);\n+extern tree get_typeid\t\t\t\t(tree, tsubst_flags_t);\n extern tree build_headof\t\t\t(tree);\n extern tree build_dynamic_cast\t\t\t(tree, tree, tsubst_flags_t);\n extern void emit_support_tinfos\t\t\t(void);"}, {"sha": "36e9342d0fc37ff186b6eb89360773042ef3340d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795801d68357835d18f9d0b370377958faf651fe/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795801d68357835d18f9d0b370377958faf651fe/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=795801d68357835d18f9d0b370377958faf651fe", "patch": "@@ -5473,7 +5473,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \tcp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n \t/* If all went well, simply lookup the type-id.  */\n \tif (cp_parser_parse_definitely (parser))\n-\t  postfix_expression = get_typeid (type);\n+\t  postfix_expression = get_typeid (type, tf_warning_or_error);\n \t/* Otherwise, fall back to the expression variant.  */\n \telse\n \t  {\n@@ -5482,7 +5482,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t    /* Look for an expression.  */\n \t    expression = cp_parser_expression (parser, /*cast_p=*/false, & idk);\n \t    /* Compute its typeid.  */\n-\t    postfix_expression = build_typeid (expression);\n+\t    postfix_expression = build_typeid (expression, tf_warning_or_error);\n \t    /* Look for the `)' token.  */\n \t    cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n \t  }"}, {"sha": "6d78dd2b90f8ebae8f5a25bf234e7b170f2835c0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795801d68357835d18f9d0b370377958faf651fe/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795801d68357835d18f9d0b370377958faf651fe/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=795801d68357835d18f9d0b370377958faf651fe", "patch": "@@ -14223,12 +14223,12 @@ tsubst_copy_and_build (tree t,\n \tif (TYPE_P (operand_0))\n \t  {\n \t    operand_0 = tsubst (operand_0, args, complain, in_decl);\n-\t    RETURN (get_typeid (operand_0));\n+\t    RETURN (get_typeid (operand_0, complain));\n \t  }\n \telse\n \t  {\n \t    operand_0 = RECUR (operand_0);\n-\t    RETURN (build_typeid (operand_0));\n+\t    RETURN (build_typeid (operand_0, complain));\n \t  }\n       }\n "}, {"sha": "77fd0460a5009417ec3d1e1e9aca5233fb0136bc", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795801d68357835d18f9d0b370377958faf651fe/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795801d68357835d18f9d0b370377958faf651fe/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=795801d68357835d18f9d0b370377958faf651fe", "patch": "@@ -108,7 +108,6 @@ static tree tinfo_name (tree, bool);\n static tree build_dynamic_cast_1 (tree, tree, tsubst_flags_t);\n static tree throw_bad_cast (void);\n static tree throw_bad_typeid (void);\n-static tree get_tinfo_decl_dynamic (tree);\n static tree get_tinfo_ptr (tree);\n static bool typeid_ok_p (void);\n static int qualifier_flags (tree);\n@@ -238,7 +237,7 @@ throw_bad_typeid (void)\n    otherwise return the static type of the expression.  */\n \n static tree\n-get_tinfo_decl_dynamic (tree exp)\n+get_tinfo_decl_dynamic (tree exp, tsubst_flags_t complain)\n {\n   tree type;\n   tree t;\n@@ -257,7 +256,7 @@ get_tinfo_decl_dynamic (tree exp)\n   /* For UNKNOWN_TYPEs call complete_type_or_else to get diagnostics.  */\n   if (CLASS_TYPE_P (type) || type == unknown_type_node\n       || type == init_list_type_node)\n-    type = complete_type_or_else (type, exp);\n+    type = complete_type_or_maybe_complain (type, exp, complain);\n \n   if (!type)\n     return error_mark_node;\n@@ -278,7 +277,7 @@ get_tinfo_decl_dynamic (tree exp)\n     /* Otherwise return the type_info for the static type of the expr.  */\n     t = get_tinfo_ptr (TYPE_MAIN_VARIANT (type));\n \n-  return cp_build_indirect_ref (t, RO_NULL, tf_warning_or_error);\n+  return cp_build_indirect_ref (t, RO_NULL, complain);\n }\n \n static bool\n@@ -316,7 +315,7 @@ typeid_ok_p (void)\n    an lvalue of type \"const std::type_info\".  */\n \n tree\n-build_typeid (tree exp)\n+build_typeid (tree exp, tsubst_flags_t complain)\n {\n   tree cond = NULL_TREE, initial_expr = exp;\n   int nonnull = 0;\n@@ -340,10 +339,10 @@ build_typeid (tree exp)\n       exp = mark_lvalue_use (exp);\n       exp = stabilize_reference (exp);\n       cond = cp_convert (boolean_type_node, TREE_OPERAND (exp, 0),\n-\t\t\t tf_warning_or_error);\n+\t\t\t complain);\n     }\n \n-  exp = get_tinfo_decl_dynamic (exp);\n+  exp = get_tinfo_decl_dynamic (exp, complain);\n \n   if (exp == error_mark_node)\n     return error_mark_node;\n@@ -469,7 +468,7 @@ get_tinfo_ptr (tree type)\n /* Return the type_info object for TYPE.  */\n \n tree\n-get_typeid (tree type)\n+get_typeid (tree type, tsubst_flags_t complain)\n {\n   if (type == error_mark_node || !typeid_ok_p ())\n     return error_mark_node;\n@@ -489,13 +488,12 @@ get_typeid (tree type)\n   /* For UNKNOWN_TYPEs call complete_type_or_else to get diagnostics.  */\n   if (CLASS_TYPE_P (type) || type == unknown_type_node\n       || type == init_list_type_node)\n-    type = complete_type_or_else (type, NULL_TREE);\n+    type = complete_type_or_maybe_complain (type, NULL_TREE, complain);\n \n   if (!type)\n     return error_mark_node;\n \n-  return cp_build_indirect_ref (get_tinfo_ptr (type), RO_NULL, \n-                                tf_warning_or_error);\n+  return cp_build_indirect_ref (get_tinfo_ptr (type), RO_NULL, complain);\n }\n \n /* Check whether TEST is null before returning RESULT.  If TEST is used in"}, {"sha": "6df5f71ff780e8501ed0bad4ecd6dc14f5bd0d7f", "filename": "gcc/testsuite/g++.dg/template/typeid1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795801d68357835d18f9d0b370377958faf651fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypeid1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795801d68357835d18f9d0b370377958faf651fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypeid1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypeid1.C?ref=795801d68357835d18f9d0b370377958faf651fe", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/55878\n+\n+#include <typeinfo>\n+\n+struct S;\n+\n+template <typename T>\n+static bool fn (S *s)\n+{\n+  return typeid (*s) == typeid (T);\n+}\n+\n+struct S\n+{\n+};\n+\n+bool x = fn<S> (__null);"}]}