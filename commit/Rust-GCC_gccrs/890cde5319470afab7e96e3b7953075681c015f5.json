{"sha": "890cde5319470afab7e96e3b7953075681c015f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkwY2RlNTMxOTQ3MGFmYWI3ZTk2ZTNiNzk1MzA3NTY4MWMwMTVmNQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-09-19T08:13:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-19T08:13:20Z"}, "message": "[Ada] Crash on predicate in full view in a generic unit\n\nThis patch fixes a compiler abort on a dynamic predicate applied to the\nfull view of a type in a generic package declaration, when the\nexpression for the predicate is a conditionql expression that contains\nreferences to components of the full view of the type.\n\n2019-09-19  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb (Check_Aspect_At_End_Of_Declarations): Simplify\n\thandling of expressions in predicates when the context is a\n\tgeneric unit.\n\ngcc/testsuite/\n\n\t* gnat.dg/predicate14.adb, gnat.dg/predicate14.ads: New\n\ttestcase.\n\nFrom-SVN: r275939", "tree": {"sha": "60fde4523f7cb6c05caebbd1cc2f664e7ba1b76c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60fde4523f7cb6c05caebbd1cc2f664e7ba1b76c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/890cde5319470afab7e96e3b7953075681c015f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/890cde5319470afab7e96e3b7953075681c015f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/890cde5319470afab7e96e3b7953075681c015f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/890cde5319470afab7e96e3b7953075681c015f5/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f56add9cb032cb4b22abbb33a7b867bfcbbc5f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56add9cb032cb4b22abbb33a7b867bfcbbc5f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f56add9cb032cb4b22abbb33a7b867bfcbbc5f0d"}], "stats": {"total": 103, "additions": 95, "deletions": 8}, "files": [{"sha": "2caf52da59dc3888cf666662729b953c6f7f2f05", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890cde5319470afab7e96e3b7953075681c015f5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890cde5319470afab7e96e3b7953075681c015f5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=890cde5319470afab7e96e3b7953075681c015f5", "patch": "@@ -1,3 +1,9 @@\n+2019-09-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Aspect_At_End_Of_Declarations): Simplify\n+\thandling of expressions in predicates when the context is a\n+\tgeneric unit.\n+\n 2019-09-19  Bob Duff  <duff@adacore.com>\n \n \t* sem_attr.adb (Resolve_Attribute): Make sure the secondary"}, {"sha": "354d068117a85f7a8d9c5d5aaa55e56e4797b032", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890cde5319470afab7e96e3b7953075681c015f5/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890cde5319470afab7e96e3b7953075681c015f5/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=890cde5319470afab7e96e3b7953075681c015f5", "patch": "@@ -9374,17 +9374,22 @@ package body Sem_Ch13 is\n \n       else\n          --  In a generic context freeze nodes are not always generated, so\n-         --  analyze the expression now. If the aspect is for a type, this\n-         --  makes its potential components accessible.\n+         --  analyze the expression now. If the aspect is for a type, we must\n+         --  also make its potential components accessible.\n \n          if not Analyzed (Freeze_Expr) and then Inside_A_Generic then\n             if A_Id = Aspect_Dynamic_Predicate\n               or else A_Id = Aspect_Predicate\n-              or else A_Id = Aspect_Priority\n             then\n                Push_Type (Ent);\n-               Preanalyze_Spec_Expression (Freeze_Expr, T);\n+               Preanalyze_Spec_Expression (Freeze_Expr, Standard_Boolean);\n+               Pop_Type (Ent);\n+\n+            elsif A_Id = Aspect_Priority then\n+               Push_Type (Ent);\n+               Preanalyze_Spec_Expression (Freeze_Expr, Any_Integer);\n                Pop_Type (Ent);\n+\n             else\n                Preanalyze (Freeze_Expr);\n             end if;\n@@ -9395,12 +9400,23 @@ package body Sem_Ch13 is\n \n          Set_Parent (End_Decl_Expr, ASN);\n \n-         --  In a generic context the aspect expressions have not been\n-         --  preanalyzed, so do it now. There are no conformance checks\n-         --  to perform in this case.\n+         --  In a generic context the original  aspect expressions have not\n+         --  been preanalyzed, so do it now. There are no conformance checks\n+         --  to perform in this case. As before, we have to make components\n+         --  visible for aspects that may reference them.\n \n          if No (T) then\n-            Check_Aspect_At_Freeze_Point (ASN);\n+            if A_Id = Aspect_Dynamic_Predicate\n+              or else A_Id = Aspect_Predicate\n+              or else A_Id = Aspect_Priority\n+            then\n+               Push_Type (Ent);\n+               Check_Aspect_At_Freeze_Point (ASN);\n+               Pop_Type (Ent);\n+\n+            else\n+               Check_Aspect_At_Freeze_Point (ASN);\n+            end if;\n             return;\n \n          --  The default values attributes may be defined in the private part,"}, {"sha": "7cde63d60b90ca875bc2f4de1a8aa760060d14c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890cde5319470afab7e96e3b7953075681c015f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890cde5319470afab7e96e3b7953075681c015f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=890cde5319470afab7e96e3b7953075681c015f5", "patch": "@@ -1,3 +1,8 @@\n+2019-09-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/predicate14.adb, gnat.dg/predicate14.ads: New\n+\ttestcase.\n+\n 2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/generic_inst13.adb,"}, {"sha": "3caf7a4412d0ddb7565e27607b77744b919cd823", "filename": "gcc/testsuite/gnat.dg/predicate14.adb", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890cde5319470afab7e96e3b7953075681c015f5/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate14.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890cde5319470afab7e96e3b7953075681c015f5/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate14.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate14.adb?ref=890cde5319470afab7e96e3b7953075681c015f5", "patch": "@@ -0,0 +1,4 @@\n+--  { dg-do compile }\n+package body Predicate14 is\n+    procedure Dummy is null;\n+end Predicate14;"}, {"sha": "9ed6c86270f207a8789dc1fcd8eba9348092c8e2", "filename": "gcc/testsuite/gnat.dg/predicate14.ads", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890cde5319470afab7e96e3b7953075681c015f5/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate14.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890cde5319470afab7e96e3b7953075681c015f5/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate14.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate14.ads?ref=890cde5319470afab7e96e3b7953075681c015f5", "patch": "@@ -0,0 +1,56 @@\n+generic\n+package Predicate14 with\n+  SPARK_Mode\n+is\n+\n+   type Field_Type is (F_Initial, F_Payload, F_Final);\n+\n+   type State_Type is (S_Valid, S_Invalid);\n+\n+   type Cursor_Type (State : State_Type := S_Invalid) is private;\n+\n+   type Cursors_Type is array (Field_Type) of Cursor_Type;\n+\n+   type Context_Type is private;\n+\n+   type Result_Type (Field : Field_Type := F_Initial) is\n+      record\n+         case Field is\n+            when F_Initial | F_Final =>\n+               null;\n+            when F_Payload =>\n+               Value : Integer;\n+         end case;\n+      end record;\n+\n+   function Valid_Context (Context : Context_Type) return Boolean;\n+\n+private\n+\n+   function Valid_Type (Result : Result_Type) return Boolean is\n+     (Result.Field = F_Initial);\n+\n+   type Cursor_Type (State : State_Type := S_Invalid) is\n+      record\n+         case State is\n+            when S_Valid =>\n+               Value : Result_Type;\n+            when S_Invalid =>\n+               null;\n+         end case;\n+      end record\n+      with Dynamic_Predicate =>\n+          (if State = S_Valid then Valid_Type (Value));\n+\n+   type Context_Type is\n+      record\n+         Field : Field_Type := F_Initial;\n+         Cursors : Cursors_Type := (others => (State => S_Invalid));\n+      end record;\n+\n+   function Valid_Context (Context : Context_Type) return Boolean is\n+     (for all F in Context.Cursors'Range =>\n+         (Context.Cursors (F).Value.Field = F));\n+\n+   procedure Dummy;\n+end Predicate14;\n\\ No newline at end of file"}]}