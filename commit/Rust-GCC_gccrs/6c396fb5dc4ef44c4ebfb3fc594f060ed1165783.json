{"sha": "6c396fb5dc4ef44c4ebfb3fc594f060ed1165783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzOTZmYjVkYzRlZjQ0YzRlYmZiM2ZjNTk0ZjA2MGVkMTE2NTc4Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-22T19:02:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-22T19:02:13Z"}, "message": "(handle_braces, check_live_switch): Refine previous change.\n\nFrom-SVN: r7139", "tree": {"sha": "99bfe983762f221138a2337f8d0f2c66a134ab84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99bfe983762f221138a2337f8d0f2c66a134ab84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c396fb5dc4ef44c4ebfb3fc594f060ed1165783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c396fb5dc4ef44c4ebfb3fc594f060ed1165783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c396fb5dc4ef44c4ebfb3fc594f060ed1165783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c396fb5dc4ef44c4ebfb3fc594f060ed1165783/comments", "author": null, "committer": null, "parents": [{"sha": "88622e34a3ab403ecc6cca6cde6c8bb300191247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88622e34a3ab403ecc6cca6cde6c8bb300191247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88622e34a3ab403ecc6cca6cde6c8bb300191247"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "9388a3b047e4907c0c9502daba534e599a971186", "filename": "gcc/gcc.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c396fb5dc4ef44c4ebfb3fc594f060ed1165783/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c396fb5dc4ef44c4ebfb3fc594f060ed1165783/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6c396fb5dc4ef44c4ebfb3fc594f060ed1165783", "patch": "@@ -335,10 +335,11 @@ The conditional text X in a %{S:X} or %{!S:X} construct may contain\n other nested % constructs or spaces, or even newlines.  They are\n processed as usual, as described above.\n \n-The -O, -f, -m, and -w switches are handled specifically in these\n+The -O, -f, -m, and -W switches are handled specifically in these\n constructs.  If another value of -O or the negated form of a -f, -m, or\n -W switch is found later in the command line, the earlier switch\n-value is ignored.\n+value is ignored, except with {S*} where S is just one letter; this\n+passes all matching options.\n \n The character | is used to indicate that a command should be piped to\n the following command, but only if -pipe is specified.\n@@ -3634,7 +3635,7 @@ handle_braces (p)\n \n \t      for (i = 0; i < n_switches; i++)\n \t\tif (!strncmp (switches[i].part1, filter, hard_match_len)\n-\t\t    && check_live_switch (i, hard_match_len))\n+\t\t    && check_live_switch (i, -1))\n \t\t  {\n \t\t    do_spec_1 (string, 0, &switches[i].part1[hard_match_len]);\n \t\t    /* Pass any arguments this switch has.  */\n@@ -3667,7 +3668,7 @@ handle_braces (p)\n \t    {\n \t      if (!strncmp (switches[i].part1, filter, p - filter)\n \t\t  && switches[i].part1[p - filter] == 0\n-\t\t  && check_live_switch (i, p - filter))\n+\t\t  && check_live_switch (i, -1))\n \t\t{\n \t\t  present = 1;\n \t\t  break;\n@@ -3701,26 +3702,26 @@ handle_braces (p)\n   return q;\n }\n \f\n-/* Return 0 if switch number SWITCHNUM is obsoleted by a later switch\n-   on the command line.  LENGTH is the length of the switch name we\n-   are to compare for.  Otherwise return zero.\n+/* Return 0 iff switch number SWITCHNUM is obsoleted by a later switch\n+   on the command line.  PREFIX_LENGTH is the length of XXX in an {XXX*}\n+   spec, or -1 if either exact match or %* is used.\n \n    A -O switch is obsoleted by a later -O switch.  A -f, -m, or -W switch\n    whose value does not begin with \"no-\" is obsoleted by the same value\n    with the \"no-\", similarly for a switch with the \"no-\" prefix.  */\n \n static int\n-check_live_switch (switchnum, length)\n+check_live_switch (switchnum, prefix_length)\n      int switchnum;\n-     int length;\n+     int prefix_length;\n {\n   char *name = switches[switchnum].part1;\n   int i;\n \n-  /* If we just have a single letter and it isn't \"O\", a negating\n+  /* In the common case of {<at-most-one-letter>*}, a negating\n      switch would always match, so ignore that case.  We will just\n      send the conflicting switches to the compiler phase.  */\n-  if (length == 1 && name[0] != 'O')\n+  if (prefix_length >= 0 && prefix_length <= 1)\n     return 1;\n \n   /* If we already processed this switch and determined if it was\n@@ -3732,7 +3733,6 @@ check_live_switch (switchnum, length)\n   switch (*name)\n     {\n     case 'O':\n-      if (length == 1)\n \tfor (i = switchnum + 1; i < n_switches; i++)\n \t  if (switches[i].part1[0] == 'O')\n \t    {\n@@ -3743,7 +3743,7 @@ check_live_switch (switchnum, length)\n       break;\n \n     case 'W':  case 'f':  case 'm':\n-      if (length > 4 && ! strncmp (name + 1, \"no-\", 3))\n+      if (! strncmp (name + 1, \"no-\", 3))\n \t{\n \t  /* We have Xno-YYY, search for XYYY. */\n \t  for (i = switchnum + 1; i < n_switches; i++)"}]}