{"sha": "20dcda98ed376cb61c74b2c71656f99c671ec9ce", "node_id": "C_kwDOANBUbNoAKDIwZGNkYTk4ZWQzNzZjYjYxYzc0YjJjNzE2NTZmOTljNjcxZWM5Y2U", "commit": {"author": {"name": "prathamesh.kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2021-10-18T10:14:06Z"}, "committer": {"name": "prathamesh.kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2021-10-18T10:14:06Z"}, "message": "[sve] PR93183 - Add support for conditional neg.\n\ngcc/ChangeLog:\n\tPR target/93183\n\t* gimple-match-head.c (try_conditional_simplification): Add case for single operand.\n\t* internal-fn.def: Add entry for COND_NEG internal function.\n\t* internal-fn.c (FOR_EACH_CODE_MAPPING): Add entry for\n\tNEGATE_EXPR, COND_NEG mapping.\n\t* optabs.def: Add entry for cond_neg_optab.\n\t* match.pd (UNCOND_UNARY, COND_UNARY): New operator lists.\n\t(vec_cond COND (foo A) B) -> (IFN_COND_FOO COND A B): New pattern.\n\t(vec_cond COND B (foo A)) -> (IFN_COND_FOO ~COND A B): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR target/93183\n\t* gcc.target/aarch64/sve/cond_unary_4.c: Adjust.\n\t* gcc.target/aarch64/sve/pr93183.c: New test.", "tree": {"sha": "7efcc5eb630088ec552f3e562ce4ee8ab625dca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7efcc5eb630088ec552f3e562ce4ee8ab625dca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20dcda98ed376cb61c74b2c71656f99c671ec9ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20dcda98ed376cb61c74b2c71656f99c671ec9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20dcda98ed376cb61c74b2c71656f99c671ec9ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20dcda98ed376cb61c74b2c71656f99c671ec9ce/comments", "author": null, "committer": null, "parents": [{"sha": "85ce673378e7091ce603b033fac213a9d0d1f83a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ce673378e7091ce603b033fac213a9d0d1f83a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ce673378e7091ce603b033fac213a9d0d1f83a"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "9d88b2f85514c109b94e960169e6b04af18bd78f", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=20dcda98ed376cb61c74b2c71656f99c671ec9ce", "patch": "@@ -870,6 +870,10 @@ try_conditional_simplification (internal_fn ifn, gimple_match_op *res_op,\n   memcpy (cond_op.ops, res_op->ops + 1, (num_ops - 1) * sizeof *cond_op.ops);\n   switch (num_ops - 2)\n     {\n+    case 1:\n+      if (!gimple_resimplify1 (seq, &cond_op, valueize))\n+\treturn false;\n+      break;\n     case 2:\n       if (!gimple_resimplify2 (seq, &cond_op, valueize))\n \treturn false;"}, {"sha": "9e10da0ad5ccc8d4873e157d2fc8e3fbeac4bf74", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=20dcda98ed376cb61c74b2c71656f99c671ec9ce", "patch": "@@ -3909,7 +3909,8 @@ static void (*const internal_fn_expanders[]) (internal_fn, gcall *) = {\n   T (BIT_IOR_EXPR, IFN_COND_IOR) \\\n   T (BIT_XOR_EXPR, IFN_COND_XOR) \\\n   T (LSHIFT_EXPR, IFN_COND_SHL) \\\n-  T (RSHIFT_EXPR, IFN_COND_SHR)\n+  T (RSHIFT_EXPR, IFN_COND_SHR) \\\n+  T (NEGATE_EXPR, IFN_COND_NEG)\n \n /* Return a function that only performs CODE when a certain condition is met\n    and that uses a given fallback value otherwise.  For example, if CODE is"}, {"sha": "bb13c6cce1bf55633760bc14980402f1f0ac1689", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=20dcda98ed376cb61c74b2c71656f99c671ec9ce", "patch": "@@ -204,6 +204,8 @@ DEF_INTERNAL_OPTAB_FN (COND_FMS, ECF_CONST, cond_fms, cond_ternary)\n DEF_INTERNAL_OPTAB_FN (COND_FNMA, ECF_CONST, cond_fnma, cond_ternary)\n DEF_INTERNAL_OPTAB_FN (COND_FNMS, ECF_CONST, cond_fnms, cond_ternary)\n \n+DEF_INTERNAL_OPTAB_FN (COND_NEG, ECF_CONST, cond_neg, cond_unary)\n+\n DEF_INTERNAL_OPTAB_FN (RSQRT, ECF_CONST, rsqrt, unary)\n \n DEF_INTERNAL_OPTAB_FN (REDUC_PLUS, ECF_CONST | ECF_NOTHROW,"}, {"sha": "3ff15bc0de5aba45ade94ca6e47e01fad9a2a314", "filename": "gcc/match.pd", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=20dcda98ed376cb61c74b2c71656f99c671ec9ce", "patch": "@@ -78,6 +78,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (CEIL)\n DEFINE_INT_AND_FLOAT_ROUND_FN (ROUND)\n DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n+/* Unary operations and their associated IFN_COND_* function.  */\n+(define_operator_list UNCOND_UNARY\n+  negate)\n+(define_operator_list COND_UNARY\n+  IFN_COND_NEG)\n+\n /* Binary operations and their associated IFN_COND_* function.  */\n (define_operator_list UNCOND_BINARY\n   plus minus\n@@ -7075,6 +7081,32 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t\t\t\t\t  false, prec)); })\n \t\t     { build_zero_cst (TREE_TYPE (@0)); }))))))))\n \n+#if GIMPLE\n+\n+/* Simplify:\n+     a = op a1\n+     r = cond ? a : b\n+     --> r = .COND_FN (cond, a, b)\n+and,\n+    a = op a1\n+    r = cond ? b : a\n+    --> r = .COND_FN (~cond, b, a).  */\n+\n+(for uncond_op (UNCOND_UNARY)\n+     cond_op (COND_UNARY)\n+ (simplify\n+  (vec_cond @0 (view_convert? (uncond_op@3 @1)) @2)\n+   (with { tree op_type = TREE_TYPE (@3); }\n+    (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n+        && is_truth_type_for (op_type, TREE_TYPE (@0)))\n+     (cond_op @0 @1 @2))))\n+ (simplify\n+  (vec_cond @0 @1 (view_convert? (uncond_op@3 @2)))\n+   (with { tree op_type = TREE_TYPE (@3); }\n+    (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n+        && is_truth_type_for (op_type, TREE_TYPE (@0)))\n+     (cond_op (bit_not @0) @2 @1)))))\n+\n /* Simplify:\n \n      a = a1 op a2\n@@ -7093,7 +7125,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    conditional internal functions must support the same comparisons\n    inside and outside a VEC_COND_EXPR.  */\n \n-#if GIMPLE\n (for uncond_op (UNCOND_BINARY)\n      cond_op (COND_BINARY)\n  (simplify"}, {"sha": "b889ad2e5a08613db51d16d072080ac6cb48404f", "filename": "gcc/optabs.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=20dcda98ed376cb61c74b2c71656f99c671ec9ce", "patch": "@@ -245,6 +245,7 @@ OPTAB_D (cond_fma_optab, \"cond_fma$a\")\n OPTAB_D (cond_fms_optab, \"cond_fms$a\")\n OPTAB_D (cond_fnma_optab, \"cond_fnma$a\")\n OPTAB_D (cond_fnms_optab, \"cond_fnms$a\")\n+OPTAB_D (cond_neg_optab, \"cond_neg$a\")\n OPTAB_D (cmov_optab, \"cmov$a6\")\n OPTAB_D (cstore_optab, \"cstore$a4\")\n OPTAB_D (ctrap_optab, \"ctrap$a4\")"}, {"sha": "a491f8990881881e44f6f9414165ee6b4a371960", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_4.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4.c?ref=20dcda98ed376cb61c74b2c71656f99c671ec9ce", "patch": "@@ -56,7 +56,11 @@ TEST_ALL (DEF_LOOP)\n    we're relying on combine to merge a SEL and an arithmetic operation,\n    and the SEL doesn't allow the \"false\" value to be zero when the \"true\"\n    value is a register.  */\n-/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 14 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 7 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z, z[0-9]+\\.b} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d} 2 } } */\n \n /* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n /* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "2f92224cecb081fd726cd6677353220e5d0a6808", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr93183.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr93183.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dcda98ed376cb61c74b2c71656f99c671ec9ce/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr93183.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr93183.c?ref=20dcda98ed376cb61c74b2c71656f99c671ec9ce", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mcpu=generic+sve\" } */\n+\n+typedef unsigned char uint8_t;\n+\n+static inline uint8_t\n+x264_clip_uint8(uint8_t x)\n+{\n+  uint8_t t = -x;\n+  uint8_t t1 = x & ~63; \n+  return (t1 != 0) ? t : x; \n+}\n+\n+void\n+mc_weight(uint8_t *restrict dst, uint8_t *restrict src, int n)\n+{\n+  for (int x = 0; x < n*16; x++)\n+    dst[x] = x264_clip_uint8(src[x]);\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tsel} } } */"}]}