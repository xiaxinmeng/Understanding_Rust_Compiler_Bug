{"sha": "e4ff7948ef80c82423decf251dcc2689efbb0a75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmZjc5NDhlZjgwYzgyNDIzZGVjZjI1MWRjYzI2ODllZmJiMGE3NQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2016-12-30T21:22:33Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2016-12-30T21:22:33Z"}, "message": "cppopts.texi: Reorder table entries to put the most commonly-used options first and debug...\n\n2016-12-30  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/cppopts.texi: Reorder table entries to put the most \n\tcommonly-used options first and debug options last.\n\nFrom-SVN: r243984", "tree": {"sha": "cff7404f21e5a33322e2bd00f2e2d73c7f698642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cff7404f21e5a33322e2bd00f2e2d73c7f698642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4ff7948ef80c82423decf251dcc2689efbb0a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ff7948ef80c82423decf251dcc2689efbb0a75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ff7948ef80c82423decf251dcc2689efbb0a75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ff7948ef80c82423decf251dcc2689efbb0a75/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38381536cff46e4964f92b102dff30bb84353142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38381536cff46e4964f92b102dff30bb84353142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38381536cff46e4964f92b102dff30bb84353142"}], "stats": {"total": 285, "additions": 145, "deletions": 140}, "files": [{"sha": "56123f6ad18ddb7f53f23e055692239b03187ba6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff7948ef80c82423decf251dcc2689efbb0a75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff7948ef80c82423decf251dcc2689efbb0a75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4ff7948ef80c82423decf251dcc2689efbb0a75", "patch": "@@ -1,3 +1,8 @@\n+2016-12-30  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/cppopts.texi: Reorder table entries to put the most \n+\tcommonly-used options first and debug options last.\n+\n 2016-12-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*testqi_ext_3): Merge insn pattern and"}, {"sha": "4588eb4fcd5c18826425d8b3e788204181c13f5b", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 140, "deletions": 140, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff7948ef80c82423decf251dcc2689efbb0a75/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff7948ef80c82423decf251dcc2689efbb0a75/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=e4ff7948ef80c82423decf251dcc2689efbb0a75", "patch": "@@ -39,6 +39,28 @@ are given on the command line.  All @option{-imacros @var{file}} and\n Cancel any previous definition of @var{name}, either built in or\n provided with a @option{-D} option.\n \n+@item -include @var{file}\n+@opindex include\n+Process @var{file} as if @code{#include \"file\"} appeared as the first\n+line of the primary source file.  However, the first directory searched\n+for @var{file} is the preprocessor's working directory @emph{instead of}\n+the directory containing the main source file.  If not found there, it\n+is searched for in the remainder of the @code{#include \"@dots{}\"} search\n+chain as normal.\n+\n+If multiple @option{-include} options are given, the files are included\n+in the order they appear on the command line.\n+\n+@item -imacros @var{file}\n+@opindex imacros\n+Exactly like @option{-include}, except that any output produced by\n+scanning @var{file} is thrown away.  Macros it defines remain defined.\n+This allows you to acquire all the macros from a header without also\n+processing its declarations.\n+\n+All files specified by @option{-imacros} are processed before all files\n+specified by @option{-include}.\n+\n @item -undef\n @opindex undef\n Do not predefine any system-specific or GCC-specific macros.  The\n@@ -177,57 +199,21 @@ a dependency output file as a side-effect of the compilation process.\n Like @option{-MD} except mention only user header files, not system\n header files.\n \n-@ifclear cppmanual\n-@item -fpch-deps\n-@opindex fpch-deps\n-When using precompiled headers (@pxref{Precompiled Headers}), this flag\n-will cause the dependency-output flags to also list the files from the\n-precompiled header's dependencies.  If not specified only the\n-precompiled header would be listed and not the files that were used to\n-create it because those files are not consulted when a precompiled\n-header is used.\n-\n-@item -fpch-preprocess\n-@opindex fpch-preprocess\n-This option allows use of a precompiled header (@pxref{Precompiled\n-Headers}) together with @option{-E}.  It inserts a special @code{#pragma},\n-@code{#pragma GCC pch_preprocess \"@var{filename}\"} in the output to mark\n-the place where the precompiled header was found, and its @var{filename}.\n-When @option{-fpreprocessed} is in use, GCC recognizes this @code{#pragma}\n-and loads the PCH@.\n+@item -fpreprocessed\n+@opindex fpreprocessed\n+Indicate to the preprocessor that the input file has already been\n+preprocessed.  This suppresses things like macro expansion, trigraph\n+conversion, escaped newline splicing, and processing of most directives.\n+The preprocessor still recognizes and removes comments, so that you can\n+pass a file preprocessed with @option{-C} to the compiler without\n+problems.  In this mode the integrated preprocessor is little more than\n+a tokenizer for the front ends.\n \n-This option is off by default, because the resulting preprocessed output\n-is only really suitable as input to GCC@.  It is switched on by\n+@option{-fpreprocessed} is implicit if the input file has one of the\n+extensions @samp{.i}, @samp{.ii} or @samp{.mi}.  These are the\n+extensions that GCC uses for preprocessed files created by\n @option{-save-temps}.\n \n-You should not write this @code{#pragma} in your own code, but it is\n-safe to edit the filename if the PCH file is available in a different\n-location.  The filename may be absolute or it may be relative to GCC's\n-current directory.\n-@end ifclear\n-\n-@item -include @var{file}\n-@opindex include\n-Process @var{file} as if @code{#include \"file\"} appeared as the first\n-line of the primary source file.  However, the first directory searched\n-for @var{file} is the preprocessor's working directory @emph{instead of}\n-the directory containing the main source file.  If not found there, it\n-is searched for in the remainder of the @code{#include \"@dots{}\"} search\n-chain as normal.\n-\n-If multiple @option{-include} options are given, the files are included\n-in the order they appear on the command line.\n-\n-@item -imacros @var{file}\n-@opindex imacros\n-Exactly like @option{-include}, except that any output produced by\n-scanning @var{file} is thrown away.  Macros it defines remain defined.\n-This allows you to acquire all the macros from a header without also\n-processing its declarations.\n-\n-All files specified by @option{-imacros} are processed before all files\n-specified by @option{-include}.\n-\n @item -fdirectives-only\n @opindex fdirectives-only\n When preprocessing, handle directives, but do not expand macros.\n@@ -267,41 +253,13 @@ enabled by default for C99 (and later C standard versions) and C++.\n @opindex fno-canonical-system-headers\n When preprocessing, do not shorten system header paths with canonicalization.\n \n-@item -fpreprocessed\n-@opindex fpreprocessed\n-Indicate to the preprocessor that the input file has already been\n-preprocessed.  This suppresses things like macro expansion, trigraph\n-conversion, escaped newline splicing, and processing of most directives.\n-The preprocessor still recognizes and removes comments, so that you can\n-pass a file preprocessed with @option{-C} to the compiler without\n-problems.  In this mode the integrated preprocessor is little more than\n-a tokenizer for the front ends.\n-\n-@option{-fpreprocessed} is implicit if the input file has one of the\n-extensions @samp{.i}, @samp{.ii} or @samp{.mi}.  These are the\n-extensions that GCC uses for preprocessed files created by\n-@option{-save-temps}.\n-\n @item -ftabstop=@var{width}\n @opindex ftabstop\n Set the distance between tab stops.  This helps the preprocessor report\n correct column numbers in warnings or errors, even if tabs appear on the\n line.  If the value is less than 1 or greater than 100, the option is\n ignored.  The default is 8.\n \n-@item -fdebug-cpp\n-@opindex fdebug-cpp\n-This option is only useful for debugging GCC.  When used with\n-@option{-E}, dumps debugging information about location maps.  Every\n-token in the output is preceded by the dump of the map its location\n-belongs to.  The dump of the map holding the location of a token would\n-be:\n-@smallexample\n-@{@samp{P}:@file{/file/path};@samp{F}:@file{/includer/path};@samp{L}:@var{line_num};@samp{C}:@var{col_num};@samp{S}:@var{system_header_p};@samp{M}:@var{map_address};@samp{E}:@var{macro_expansion_p},@samp{loc}:@var{location}@}\n-@end smallexample\n-\n-When used without @option{-E}, this option has no effect.\n-\n @item -ftrack-macro-expansion@r{[}=@var{level}@r{]}\n @opindex ftrack-macro-expansion\n Track locations of tokens across macro expansions. This allows the\n@@ -350,6 +308,35 @@ or this command-line option.  Currently the command-line option takes\n precedence if there's a conflict.  @var{charset} can be any encoding\n supported by the system's @code{iconv} library routine.\n \n+@ifclear cppmanual\n+@item -fpch-deps\n+@opindex fpch-deps\n+When using precompiled headers (@pxref{Precompiled Headers}), this flag\n+will cause the dependency-output flags to also list the files from the\n+precompiled header's dependencies.  If not specified only the\n+precompiled header would be listed and not the files that were used to\n+create it because those files are not consulted when a precompiled\n+header is used.\n+\n+@item -fpch-preprocess\n+@opindex fpch-preprocess\n+This option allows use of a precompiled header (@pxref{Precompiled\n+Headers}) together with @option{-E}.  It inserts a special @code{#pragma},\n+@code{#pragma GCC pch_preprocess \"@var{filename}\"} in the output to mark\n+the place where the precompiled header was found, and its @var{filename}.\n+When @option{-fpreprocessed} is in use, GCC recognizes this @code{#pragma}\n+and loads the PCH@.\n+\n+This option is off by default, because the resulting preprocessed output\n+is only really suitable as input to GCC@.  It is switched on by\n+@option{-save-temps}.\n+\n+You should not write this @code{#pragma} in your own code, but it is\n+safe to edit the filename if the PCH file is available in a different\n+location.  The filename may be absolute or it may be relative to GCC's\n+current directory.\n+@end ifclear\n+\n @item -fworking-directory\n @opindex fworking-directory\n @opindex fno-working-directory\n@@ -380,70 +367,6 @@ it does not use shell special characters.\n Cancel an assertion with the predicate @var{predicate} and answer\n @var{answer}.\n \n-@item -dCHARS\n-@var{CHARS} is a sequence of one or more of the following characters,\n-and must not be preceded by a space.  Other characters are interpreted\n-by the compiler proper, or reserved for future versions of GCC, and so\n-are silently ignored.  If you specify characters whose behavior\n-conflicts, the result is undefined.\n-\n-@table @samp\n-@item M\n-@opindex dM\n-Instead of the normal output, generate a list of @samp{#define}\n-directives for all the macros defined during the execution of the\n-preprocessor, including predefined macros.  This gives you a way of\n-finding out what is predefined in your version of the preprocessor.\n-Assuming you have no file @file{foo.h}, the command\n-\n-@smallexample\n-touch foo.h; cpp -dM foo.h\n-@end smallexample\n-\n-@noindent\n-will show all the predefined macros.\n-\n-@ifclear cppmanual\n-If you use @option{-dM} without the @option{-E} option, @option{-dM} is\n-interpreted as a synonym for @option{-fdump-rtl-mach}.\n-@xref{Developer Options, , ,gcc}.\n-@end ifclear\n-\n-@item D\n-@opindex dD\n-Like @samp{M} except in two respects: it does @emph{not} include the\n-predefined macros, and it outputs @emph{both} the @samp{#define}\n-directives and the result of preprocessing.  Both kinds of output go to\n-the standard output file.\n-\n-@item N\n-@opindex dN\n-Like @samp{D}, but emit only the macro names, not their expansions.\n-\n-@item I\n-@opindex dI\n-Output @samp{#include} directives in addition to the result of\n-preprocessing.\n-\n-@item U\n-@opindex dU\n-Like @samp{D} except that only macros that are expanded, or whose\n-definedness is tested in preprocessor directives, are output; the\n-output is delayed until the use or test of the macro; and\n-@samp{#undef} directives are also output for macros tested but\n-undefined at the time.\n-@end table\n-\n-@item -P\n-@opindex P\n-Inhibit generation of linemarkers in the output from the preprocessor.\n-This might be useful when running the preprocessor on something that is\n-not C code, and will be sent to a program which might be confused by the\n-linemarkers.\n-@ifset cppmanual\n-@xref{Preprocessor Output}.\n-@end ifset\n-\n @item -C\n @opindex C\n Do not discard comments.  All comments are passed through to the output\n@@ -469,6 +392,16 @@ the source line.\n \n The @option{-CC} option is generally used to support lint comments.\n \n+@item -P\n+@opindex P\n+Inhibit generation of linemarkers in the output from the preprocessor.\n+This might be useful when running the preprocessor on something that is\n+not C code, and will be sent to a program which might be confused by the\n+linemarkers.\n+@ifset cppmanual\n+@xref{Preprocessor Output}.\n+@end ifset\n+\n @cindex traditional C language\n @cindex C language, traditional\n @item -traditional\n@@ -526,3 +459,70 @@ activities.  Each name is indented to show how deep in the\n printed, even if they are found to be invalid; an invalid precompiled\n header file is printed with @samp{...x} and a valid one with @samp{...!} .\n \n+@item -dCHARS\n+@var{CHARS} is a sequence of one or more of the following characters,\n+and must not be preceded by a space.  Other characters are interpreted\n+by the compiler proper, or reserved for future versions of GCC, and so\n+are silently ignored.  If you specify characters whose behavior\n+conflicts, the result is undefined.\n+\n+@table @samp\n+@item M\n+@opindex dM\n+Instead of the normal output, generate a list of @samp{#define}\n+directives for all the macros defined during the execution of the\n+preprocessor, including predefined macros.  This gives you a way of\n+finding out what is predefined in your version of the preprocessor.\n+Assuming you have no file @file{foo.h}, the command\n+\n+@smallexample\n+touch foo.h; cpp -dM foo.h\n+@end smallexample\n+\n+@noindent\n+will show all the predefined macros.\n+\n+@ifclear cppmanual\n+If you use @option{-dM} without the @option{-E} option, @option{-dM} is\n+interpreted as a synonym for @option{-fdump-rtl-mach}.\n+@xref{Developer Options, , ,gcc}.\n+@end ifclear\n+\n+@item D\n+@opindex dD\n+Like @samp{M} except in two respects: it does @emph{not} include the\n+predefined macros, and it outputs @emph{both} the @samp{#define}\n+directives and the result of preprocessing.  Both kinds of output go to\n+the standard output file.\n+\n+@item N\n+@opindex dN\n+Like @samp{D}, but emit only the macro names, not their expansions.\n+\n+@item I\n+@opindex dI\n+Output @samp{#include} directives in addition to the result of\n+preprocessing.\n+\n+@item U\n+@opindex dU\n+Like @samp{D} except that only macros that are expanded, or whose\n+definedness is tested in preprocessor directives, are output; the\n+output is delayed until the use or test of the macro; and\n+@samp{#undef} directives are also output for macros tested but\n+undefined at the time.\n+@end table\n+\n+@item -fdebug-cpp\n+@opindex fdebug-cpp\n+This option is only useful for debugging GCC.  When used with\n+@option{-E}, dumps debugging information about location maps.  Every\n+token in the output is preceded by the dump of the map its location\n+belongs to.  The dump of the map holding the location of a token would\n+be:\n+@smallexample\n+@{@samp{P}:@file{/file/path};@samp{F}:@file{/includer/path};@samp{L}:@var{line_num};@samp{C}:@var{col_num};@samp{S}:@var{system_header_p};@samp{M}:@var{map_address};@samp{E}:@var{macro_expansion_p},@samp{loc}:@var{location}@}\n+@end smallexample\n+\n+When used without @option{-E}, this option has no effect.\n+"}]}