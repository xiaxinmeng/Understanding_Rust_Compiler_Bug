{"sha": "c536a6a77a19a895e51e5e5167d266bd8ce61001", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUzNmE2YTc3YTE5YTg5NWU1MWU1ZTUxNjdkMjY2YmQ4Y2U2MTAwMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-08-28T09:03:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-08-28T09:03:59Z"}, "message": "tree.h (DECL_DISREGARD_INLINE_LIMITS): New.\n\n2007-08-28  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (DECL_DISREGARD_INLINE_LIMITS): New.\n\t(struct tree_function_decl): Make function_code a bitfield.\n\tAdd disregard_inline_limits flag.\n\t* cgraphunit.c (cgraph_process_new_functions): Check\n\tDECL_DISREGARD_INLINE_LIMITS instead of disregard_inline_limits_p.\n\t(cgraph_preserve_function_body_p): Likewise.\n\t* ipa-inline.c (compute_inline_parameters): Likewise.\n\t* c-decl.c (finish_function): Set DECL_DISREGARD_INLINE_LIMITS\n\tfor GNU C extern inline functions.\n\t(merge_decls): Merge DECL_DISREGARD_INLINE_LIMITS.\n\t* tree-inline.c (disregard_inline_limits_p): Remove.\n\t* tree-inline.h (disregard_inline_limits_p): Likewise.\n\t* c-common.c (handle_always_inline_attribute): Set\n\tDECL_DISREGARD_INLINE_LIMITS.\n\t* langhooks.c (add_builtin_function): Verify the function code\n\tfits in the bitfield.\n\n\tcp/\n\t* decl.c (duplicate_decls): Merge DECL_DISREGARD_INLINE_LIMITS.\n\nFrom-SVN: r127851", "tree": {"sha": "011fca32e4efb23ba0a1e1758ff407cd0dc46ae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/011fca32e4efb23ba0a1e1758ff407cd0dc46ae8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c536a6a77a19a895e51e5e5167d266bd8ce61001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c536a6a77a19a895e51e5e5167d266bd8ce61001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c536a6a77a19a895e51e5e5167d266bd8ce61001", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c536a6a77a19a895e51e5e5167d266bd8ce61001/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44d5230cc3b623e04e46b2674fbf971743e55057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d5230cc3b623e04e46b2674fbf971743e55057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44d5230cc3b623e04e46b2674fbf971743e55057"}], "stats": {"total": 90, "additions": 65, "deletions": 25}, "files": [{"sha": "8f8cc2d2302d185194eb3610d1f08958c5305eb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c536a6a77a19a895e51e5e5167d266bd8ce61001", "patch": "@@ -1,3 +1,22 @@\n+2007-08-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (DECL_DISREGARD_INLINE_LIMITS): New.\n+\t(struct tree_function_decl): Make function_code a bitfield.\n+\tAdd disregard_inline_limits flag.\n+\t* cgraphunit.c (cgraph_process_new_functions): Check\n+\tDECL_DISREGARD_INLINE_LIMITS instead of disregard_inline_limits_p.\n+\t(cgraph_preserve_function_body_p): Likewise.\n+\t* ipa-inline.c (compute_inline_parameters): Likewise.\n+\t* c-decl.c (finish_function): Set DECL_DISREGARD_INLINE_LIMITS\n+\tfor GNU C extern inline functions.\n+\t(merge_decls): Merge DECL_DISREGARD_INLINE_LIMITS.\n+\t* tree-inline.c (disregard_inline_limits_p): Remove.\n+\t* tree-inline.h (disregard_inline_limits_p): Likewise.\n+\t* c-common.c (handle_always_inline_attribute): Set\n+\tDECL_DISREGARD_INLINE_LIMITS.\n+\t* langhooks.c (add_builtin_function): Verify the function code\n+\tfits in the bitfield.\n+\n 2007-08-28  Mircea Namolaru  <namolaru@il.ibm.com>\n             Vladimir Yanovsky  <yanov@il.ibm.com>\n             Revital Eres  <eres@il.ibm.com>"}, {"sha": "8e4ae22271b9bf4a9e749056d98b66e6915b3c7d", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c536a6a77a19a895e51e5e5167d266bd8ce61001", "patch": "@@ -4864,8 +4864,9 @@ handle_always_inline_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     {\n-      /* Do nothing else, just set the attribute.  We'll get at\n-\t it later with lookup_attribute.  */\n+      /* Set the attribute and mark it for disregarding inline\n+\t limits.  */\n+      DECL_DISREGARD_INLINE_LIMITS (*node) = 1;\n     }\n   else\n     {"}, {"sha": "714cf62ba03ea553355363c84e60cfe5ed32b90d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c536a6a77a19a895e51e5e5167d266bd8ce61001", "patch": "@@ -1819,6 +1819,11 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \n \t  DECL_UNINLINABLE (newdecl) = DECL_UNINLINABLE (olddecl)\n \t    = (DECL_UNINLINABLE (newdecl) || DECL_UNINLINABLE (olddecl));\n+\n+\t  DECL_DISREGARD_INLINE_LIMITS (newdecl)\n+\t    = DECL_DISREGARD_INLINE_LIMITS (olddecl)\n+\t    = (DECL_DISREGARD_INLINE_LIMITS (newdecl)\n+\t       || DECL_DISREGARD_INLINE_LIMITS (olddecl));\n \t}\n \n       if (DECL_BUILT_IN (olddecl))\n@@ -6771,6 +6776,11 @@ finish_function (void)\n   /* Finalize the ELF visibility for the function.  */\n   c_determine_visibility (fndecl);\n \n+  /* For GNU C extern inline functions disregard inline limits.  */\n+  if (DECL_EXTERNAL (fndecl) \n+      && DECL_DECLARED_INLINE_P (fndecl))\n+    DECL_DISREGARD_INLINE_LIMITS (fndecl) = 1;\n+\n   /* Genericize before inlining.  Delay genericizing nested functions\n      until their parent function is genericized.  Since finalizing\n      requires GENERIC, delay that as well.  */"}, {"sha": "accb6477d688c9b3306661f88551bbf3ffa80e7e", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c536a6a77a19a895e51e5e5167d266bd8ce61001", "patch": "@@ -381,7 +381,7 @@ cgraph_process_new_functions (void)\n \t  node->local.self_insns = estimate_num_insns (fndecl,\n \t\t\t\t\t\t       &eni_inlining_weights);\n \t  node->local.disregard_inline_limits\n-\t    |= disregard_inline_limits_p (fndecl);\n+\t    |= DECL_DISREGARD_INLINE_LIMITS (fndecl);\n \t  /* Inlining characteristics are maintained by the\n \t     cgraph_mark_inline.  */\n \t  node->global.insns = node->local.self_insns;\n@@ -1252,7 +1252,7 @@ cgraph_preserve_function_body_p (tree decl)\n   struct cgraph_node *node;\n   if (!cgraph_global_info_ready)\n     return (flag_really_no_inline\n-\t    ? disregard_inline_limits_p (decl)\n+\t    ? DECL_DISREGARD_INLINE_LIMITS (decl)\n \t    : DECL_INLINE (decl));\n   /* Look if there is any clone around.  */\n   for (node = cgraph_node (decl); node; node = node->next_clone)"}, {"sha": "a6222faae7a85f780e6b85ab0dcbb6e0fa71a4f2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c536a6a77a19a895e51e5e5167d266bd8ce61001", "patch": "@@ -1,3 +1,7 @@\n+2007-08-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* decl.c (duplicate_decls): Merge DECL_DISREGARD_INLINE_LIMITS.\n+\n 2007-08-28  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \t\n \t* error.c (dump_expr): Handle COMPLEX_CST."}, {"sha": "fdccb3542ad0281334b3d7abcc4d82888045521f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c536a6a77a19a895e51e5e5167d266bd8ce61001", "patch": "@@ -1954,6 +1954,11 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \n \t  DECL_UNINLINABLE (newdecl) = DECL_UNINLINABLE (olddecl)\n \t    = (DECL_UNINLINABLE (newdecl) || DECL_UNINLINABLE (olddecl));\n+\n+\t  DECL_DISREGARD_INLINE_LIMITS (newdecl)\n+\t    = DECL_DISREGARD_INLINE_LIMITS (olddecl)\n+\t    = (DECL_DISREGARD_INLINE_LIMITS (newdecl)\n+\t       || DECL_DISREGARD_INLINE_LIMITS (olddecl));\n \t}\n \n       /* Preserve abstractness on cloned [cd]tors.  */"}, {"sha": "647ec9faded353765b303b1fe8fa4634b96799ae", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=c536a6a77a19a895e51e5e5167d266bd8ce61001", "patch": "@@ -1529,7 +1529,7 @@ compute_inline_parameters (void)\n \t\t\t\t\t       &eni_inlining_weights);\n   if (node->local.inlinable && !node->local.disregard_inline_limits)\n     node->local.disregard_inline_limits\n-      = disregard_inline_limits_p (current_function_decl);\n+      = DECL_DISREGARD_INLINE_LIMITS (current_function_decl);\n   if (flag_really_no_inline && !node->local.disregard_inline_limits)\n     node->local.inlinable = 0;\n   /* Inlining characteristics are maintained by the cgraph_mark_inline.  */"}, {"sha": "b8e7aaacc272917f973afdc0a7aa1160b3e10ce3", "filename": "gcc/langhooks.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=c536a6a77a19a895e51e5e5167d266bd8ce61001", "patch": "@@ -480,6 +480,9 @@ add_builtin_function (const char *name,\n   TREE_PUBLIC (decl)         = 1;\n   DECL_EXTERNAL (decl)       = 1;\n   DECL_BUILT_IN_CLASS (decl) = cl;\n+\n+  DECL_FUNCTION_CODE (decl)  = -1;\n+  gcc_assert (DECL_FUNCTION_CODE (decl) >= function_code);\n   DECL_FUNCTION_CODE (decl)  = function_code;\n \n   if (library_name)"}, {"sha": "b2b959097cd1b8d5522429dcd625268faf26ead2", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c536a6a77a19a895e51e5e5167d266bd8ce61001", "patch": "@@ -1936,20 +1936,6 @@ inlinable_function_p (tree fn)\n   return inlinable;\n }\n \n-/* Return true if we shall disregard inlining limits for the function\n-   FN during inlining.  */\n-\n-bool\n-disregard_inline_limits_p (tree fn)\n-{\n-  /* GNU extern inline functions are supposed to be cheap.  */\n-  if (DECL_DECLARED_INLINE_P (fn)\n-      && DECL_EXTERNAL (fn))\n-    return true;\n-\n-  return lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) != NULL_TREE;\n-}\n-\n /* Estimate the cost of a memory move.  Use machine dependent\n    word size and take possible memcpy call into account.  */\n "}, {"sha": "200a9a68fc3664957a8b6d188728165b190cb883", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=c536a6a77a19a895e51e5e5167d266bd8ce61001", "patch": "@@ -130,7 +130,6 @@ extern void insert_decl_map (copy_body_data *, tree, tree);\n \n unsigned int optimize_inline_calls (tree);\n bool tree_inlinable_function_p (tree);\n-bool disregard_inline_limits_p (tree);\n tree copy_tree_r (tree *, int *, void *);\n void clone_body (tree, tree, void *);\n void save_body (tree, tree *, tree *);"}, {"sha": "b3a5955ed8e8f770356c555afe40887828ce1986", "filename": "gcc/tree.h", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536a6a77a19a895e51e5e5167d266bd8ce61001/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c536a6a77a19a895e51e5e5167d266bd8ce61001", "patch": "@@ -3273,6 +3273,13 @@ struct tree_decl_non_common GTY(())\n #define DECL_DECLARED_INLINE_P(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.declared_inline_flag)\n \n+/* Nonzero in a FUNCTION_DECL that should be always inlined by the inliner\n+   disregarding size and cost heuristics.  This is equivalent to using\n+   the always_inline attribute without the required diagnostics if the\n+   function cannot be inlined.  */\n+#define DECL_DISREGARD_INLINE_LIMITS(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.disregard_inline_limits)\n+\n /* For FUNCTION_DECL, this holds a pointer to a structure (\"struct function\")\n    that describes the status of this function.  */\n #define DECL_STRUCT_FUNCTION(NODE) (FUNCTION_DECL_CHECK (NODE)->function_decl.f)\n@@ -3299,27 +3306,33 @@ struct tree_function_decl GTY(())\n {\n   struct tree_decl_non_common common;\n \n+  struct function *f;\n+\n   /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is\n-     DECL_FUNCTION_CODE.  Otherwise unused.  */\n-  enum built_in_function function_code;\n+     DECL_FUNCTION_CODE.  Otherwise unused.\n+     ???  The bitfield needs to be able to hold all target function\n+\t  codes as well.  */\n+  ENUM_BITFIELD(built_in_function) function_code : 10;\n+  ENUM_BITFIELD(built_in_class) built_in_class : 2;\n \n   unsigned static_ctor_flag : 1;\n   unsigned static_dtor_flag : 1;\n   unsigned uninlinable : 1;\n   unsigned possibly_inlined : 1;\n+\n   unsigned novops_flag : 1;\n   unsigned returns_twice_flag : 1;\n   unsigned malloc_flag : 1;\n   unsigned pure_flag : 1;\n-\n   unsigned declared_inline_flag : 1;\n   unsigned regdecl_flag : 1;\n   unsigned inline_flag : 1;\n   unsigned no_instrument_function_entry_exit : 1;\n+\n   unsigned no_limit_stack : 1;\n-  ENUM_BITFIELD(built_in_class) built_in_class : 2;\n+  unsigned disregard_inline_limits : 1;\n \n-  struct function *f;\n+  /* 6 bits left */\n };\n \n /* For a TYPE_DECL, holds the \"original\" type.  (TREE_TYPE has the copy.) */"}]}