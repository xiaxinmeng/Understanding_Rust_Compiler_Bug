{"sha": "317d98872b3c9173d4a9f82693bbdcc84cdeb03c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE3ZDk4ODcyYjNjOTE3M2Q0YTlmODI2OTNiYmRjYzg0Y2RlYjAzYw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-04-27T14:38:10Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-04-27T14:38:10Z"}, "message": "[rtlanal.c] Convert conditional compilation on WORD_REGISTER_OPERATIONS\n\n\t* rtlanal.c (nonzero_bits1): Convert preprocessor check\n\tfor WORD_REGISTER_OPERATIONS to runtime check.\n\nFrom-SVN: r235512", "tree": {"sha": "b70dc1bae57d8dd8a731c09733e5c72bd0c35a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b70dc1bae57d8dd8a731c09733e5c72bd0c35a6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/317d98872b3c9173d4a9f82693bbdcc84cdeb03c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317d98872b3c9173d4a9f82693bbdcc84cdeb03c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/317d98872b3c9173d4a9f82693bbdcc84cdeb03c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317d98872b3c9173d4a9f82693bbdcc84cdeb03c/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72ed2b9c767f9dc230b97a5cde0d43d36d06ba40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ed2b9c767f9dc230b97a5cde0d43d36d06ba40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ed2b9c767f9dc230b97a5cde0d43d36d06ba40"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "c97041a3afd1d08d62a5c1056344be4b4a04e2cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317d98872b3c9173d4a9f82693bbdcc84cdeb03c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317d98872b3c9173d4a9f82693bbdcc84cdeb03c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=317d98872b3c9173d4a9f82693bbdcc84cdeb03c", "patch": "@@ -1,3 +1,8 @@\n+2016-04-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* rtlanal.c (nonzero_bits1): Convert preprocessor check\n+\tfor WORD_REGISTER_OPERATIONS to runtime check.\n+\n 2016-04-27  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/70760"}, {"sha": "0b6e1e0e38d18f76a92ddbd43c45f938b0144fe8", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317d98872b3c9173d4a9f82693bbdcc84cdeb03c/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317d98872b3c9173d4a9f82693bbdcc84cdeb03c/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=317d98872b3c9173d4a9f82693bbdcc84cdeb03c", "patch": "@@ -4584,13 +4584,14 @@ nonzero_bits1 (const_rtx x, machine_mode mode, const_rtx known_x,\n \t  nonzero &= cached_nonzero_bits (SUBREG_REG (x), mode,\n \t\t\t\t\t  known_x, known_mode, known_ret);\n \n-#if WORD_REGISTER_OPERATIONS && defined (LOAD_EXTEND_OP)\n+#ifdef LOAD_EXTEND_OP\n \t  /* If this is a typical RISC machine, we only have to worry\n \t     about the way loads are extended.  */\n-\t  if ((LOAD_EXTEND_OP (inner_mode) == SIGN_EXTEND\n-\t       ? val_signbit_known_set_p (inner_mode, nonzero)\n-\t       : LOAD_EXTEND_OP (inner_mode) != ZERO_EXTEND)\n-\t      || !MEM_P (SUBREG_REG (x)))\n+\t  if (WORD_REGISTER_OPERATIONS\n+\t      && ((LOAD_EXTEND_OP (inner_mode) == SIGN_EXTEND\n+\t\t     ? val_signbit_known_set_p (inner_mode, nonzero)\n+\t\t     : LOAD_EXTEND_OP (inner_mode) != ZERO_EXTEND)\n+\t\t   || !MEM_P (SUBREG_REG (x))))\n #endif\n \t    {\n \t      /* On many CISC machines, accessing an object in a wider mode"}]}