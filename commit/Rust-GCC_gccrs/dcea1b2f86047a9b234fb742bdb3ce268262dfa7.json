{"sha": "dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNlYTFiMmY4NjA0N2E5YjIzNGZiNzQyYmRiM2NlMjY4MjYyZGZhNw==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2009-12-11T21:08:39Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2009-12-11T21:08:39Z"}, "message": "re PR fortran/40290 (Spurious warning on REAL*COMPLEX with -Wconversion)\n\n2009-12-11  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/40290\n        * expr.c (gfc_type_convert_binary): Added warn-on-conversion flag,\n        passed on to gfc_convert_type_warn() instead of gfc_convert_type();\n        enabled warnings on all callers but ...\n        * arith.c (eval_intrinsic): Disabled warnings on implicit type\n        conversion.\n        * gfortran.h gfc_type_convert_binary): Adjusted prototype.\n\nFrom-SVN: r155179", "tree": {"sha": "3c1409b090284617f01f8d1a0ed5716730972e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c1409b090284617f01f8d1a0ed5716730972e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77cb940117db0b1873ccb4587b74499a0c1c4b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77cb940117db0b1873ccb4587b74499a0c1c4b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77cb940117db0b1873ccb4587b74499a0c1c4b73"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "21c615483ede7fb4220ba0f1ee56e5c2d9c4f392", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "patch": "@@ -1,3 +1,13 @@\n+2009-12-11  Daniel Franke  <franke.daniel@gmail.com>\n+\n+        PR fortran/40290\n+        * expr.c (gfc_type_convert_binary): Added warn-on-conversion flag,\n+        passed on to gfc_convert_type_warn() instead of gfc_convert_type();\n+        enabled warnings on all callers but ...\n+        * arith.c (eval_intrinsic): Disabled warnings on implicit type\n+        conversion.\n+        * gfortran.h gfc_type_convert_binary): Adjusted prototype.\n+\n 2009-12-11 Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42335"}, {"sha": "674b2462a4924a258e2dcc8be23db46f60afdf5d", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "patch": "@@ -1577,7 +1577,7 @@ eval_intrinsic (gfc_intrinsic_op op,\n       temp.value.op.op1 = op1;\n       temp.value.op.op2 = op2;\n \n-      gfc_type_convert_binary (&temp);\n+      gfc_type_convert_binary (&temp, 0);\n \n       if (op == INTRINSIC_EQ || op == INTRINSIC_NE\n \t  || op == INTRINSIC_GE || op == INTRINSIC_GT"}, {"sha": "35918a69f9def5d9ad4e9d625456e929324a7724", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "patch": "@@ -653,15 +653,16 @@ gfc_build_conversion (gfc_expr *e)\n \n /* Given an expression node with some sort of numeric binary\n    expression, insert type conversions required to make the operands\n-   have the same type.\n+   have the same type. Conversion warnings are disabled if wconversion\n+   is set to 0.\n \n    The exception is that the operands of an exponential don't have to\n    have the same type.  If possible, the base is promoted to the type\n    of the exponent.  For example, 1**2.3 becomes 1.0**2.3, but\n    1.0**2 stays as it is.  */\n \n void\n-gfc_type_convert_binary (gfc_expr *e)\n+gfc_type_convert_binary (gfc_expr *e, int wconversion)\n {\n   gfc_expr *op1, *op2;\n \n@@ -685,9 +686,9 @@ gfc_type_convert_binary (gfc_expr *e)\n \t}\n \n       if (op1->ts.kind > op2->ts.kind)\n-\tgfc_convert_type (op2, &op1->ts, 2);\n+\tgfc_convert_type_warn (op2, &op1->ts, 2, wconversion);\n       else\n-\tgfc_convert_type (op1, &op2->ts, 2);\n+\tgfc_convert_type_warn (op1, &op2->ts, 2, wconversion);\n \n       e->ts = op1->ts;\n       goto done;\n@@ -702,14 +703,14 @@ gfc_type_convert_binary (gfc_expr *e)\n       if (e->value.op.op == INTRINSIC_POWER)\n \tgoto done;\n \n-      gfc_convert_type (e->value.op.op2, &e->ts, 2);\n+      gfc_convert_type_warn (e->value.op.op2, &e->ts, 2, wconversion);\n       goto done;\n     }\n \n   if (op1->ts.type == BT_INTEGER)\n     {\n       e->ts = op2->ts;\n-      gfc_convert_type (e->value.op.op1, &e->ts, 2);\n+      gfc_convert_type_warn (e->value.op.op1, &e->ts, 2, wconversion);\n       goto done;\n     }\n \n@@ -720,9 +721,9 @@ gfc_type_convert_binary (gfc_expr *e)\n   else\n     e->ts.kind = op2->ts.kind;\n   if (op1->ts.type != BT_COMPLEX || op1->ts.kind != e->ts.kind)\n-    gfc_convert_type (e->value.op.op1, &e->ts, 2);\n+    gfc_convert_type_warn (e->value.op.op1, &e->ts, 2, wconversion);\n   if (op2->ts.type != BT_COMPLEX || op2->ts.kind != e->ts.kind)\n-    gfc_convert_type (e->value.op.op2, &e->ts, 2);\n+    gfc_convert_type_warn (e->value.op.op2, &e->ts, 2, wconversion);\n \n done:\n   return;"}, {"sha": "9ea5ad17b267fd26e33479862a8e9900d569269f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "patch": "@@ -2588,7 +2588,7 @@ bool is_subref_array (gfc_expr *);\n void gfc_add_component_ref (gfc_expr *, const char *);\n gfc_expr *gfc_build_conversion (gfc_expr *);\n void gfc_free_ref_list (gfc_ref *);\n-void gfc_type_convert_binary (gfc_expr *);\n+void gfc_type_convert_binary (gfc_expr *, int);\n int gfc_is_constant_expr (gfc_expr *);\n gfc_try gfc_simplify_expr (gfc_expr *, int);\n int gfc_has_vector_index (gfc_expr *);"}, {"sha": "e2089b26907a428e25f2c6c75b4345854a865572", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "patch": "@@ -702,7 +702,7 @@ gfc_resolve_dot_product (gfc_expr *f, gfc_expr *a, gfc_expr *b)\n   temp.value.op.op = INTRINSIC_NONE;\n   temp.value.op.op1 = a;\n   temp.value.op.op2 = b;\n-  gfc_type_convert_binary (&temp);\n+  gfc_type_convert_binary (&temp, 1);\n   f->ts = temp.ts;\n   f->value.function.name\n     = gfc_get_string (PREFIX (\"dot_product_%c%d\"),\n@@ -1380,7 +1380,7 @@ gfc_resolve_matmul (gfc_expr *f, gfc_expr *a, gfc_expr *b)\n       temp.value.op.op = INTRINSIC_NONE;\n       temp.value.op.op1 = a;\n       temp.value.op.op2 = b;\n-      gfc_type_convert_binary (&temp);\n+      gfc_type_convert_binary (&temp, 1);\n       f->ts = temp.ts;\n     }\n "}, {"sha": "00bd44135299916093f71585569ed64404770ecb", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcea1b2f86047a9b234fb742bdb3ce268262dfa7/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "patch": "@@ -3320,7 +3320,7 @@ resolve_operator (gfc_expr *e)\n     case INTRINSIC_POWER:\n       if (gfc_numeric_ts (&op1->ts) && gfc_numeric_ts (&op2->ts))\n \t{\n-\t  gfc_type_convert_binary (e);\n+\t  gfc_type_convert_binary (e, 1);\n \t  break;\n \t}\n \n@@ -3407,7 +3407,7 @@ resolve_operator (gfc_expr *e)\n \n       if (gfc_numeric_ts (&op1->ts) && gfc_numeric_ts (&op2->ts))\n \t{\n-\t  gfc_type_convert_binary (e);\n+\t  gfc_type_convert_binary (e, 1);\n \n \t  e->ts.type = BT_LOGICAL;\n \t  e->ts.kind = gfc_default_logical_kind;"}]}