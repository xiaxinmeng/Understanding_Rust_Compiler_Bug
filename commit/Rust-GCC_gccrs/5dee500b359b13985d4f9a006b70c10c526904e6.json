{"sha": "5dee500b359b13985d4f9a006b70c10c526904e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRlZTUwMGIzNTliMTM5ODVkNGY5YTAwNmI3MGMxMGM1MjY5MDRlNg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-16T17:33:03Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-16T17:33:03Z"}, "message": "[ARM][GCC][3/x]: MVE ACLE intrinsics framework patch.\n\nThis patch is part of MVE ACLE intrinsics framework.\n\nThe patch supports the use of emulation for the single-precision arithmetic\noperations for MVE. This changes are to support the MVE ACLE intrinsics which\noperates on vector floating point arithmetic operations.\n\nPlease refer to Arm reference manual [1] for more details.\n[1] https://developer.arm.com/docs/ddi0553/latest\n\n2020-03-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t        Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm.c (arm_libcall_uses_aapcs_base): Modify function to add\n\temulator calls for dobule precision arithmetic operations for MVE.\n\n2020-03-16  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/mve_libcall1.c: New test.\n\t* gcc.target/arm/mve/intrinsics/mve_libcall2.c: Likewise.", "tree": {"sha": "6b49f5943714df19b8c4d9c60b10a0acbff8e9b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b49f5943714df19b8c4d9c60b10a0acbff8e9b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dee500b359b13985d4f9a006b70c10c526904e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dee500b359b13985d4f9a006b70c10c526904e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dee500b359b13985d4f9a006b70c10c526904e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dee500b359b13985d4f9a006b70c10c526904e6/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7be0832b54669b39dfb56bd91c783dd91aad766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7be0832b54669b39dfb56bd91c783dd91aad766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7be0832b54669b39dfb56bd91c783dd91aad766"}], "stats": {"total": 167, "additions": 164, "deletions": 3}, "files": [{"sha": "03ac0d439dac7cbd49ddd5f947045eb496125fe1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dee500b359b13985d4f9a006b70c10c526904e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dee500b359b13985d4f9a006b70c10c526904e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dee500b359b13985d4f9a006b70c10c526904e6", "patch": "@@ -1,3 +1,9 @@\n+2020-03-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm.c (arm_libcall_uses_aapcs_base): Modify function to add\n+\temulator calls for dobule precision arithmetic operations for MVE.\n+\n 2020-03-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "b3dfa285f016268714002b0217964c81e0a4840e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dee500b359b13985d4f9a006b70c10c526904e6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dee500b359b13985d4f9a006b70c10c526904e6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5dee500b359b13985d4f9a006b70c10c526904e6", "patch": "@@ -5754,9 +5754,25 @@ arm_libcall_uses_aapcs_base (const_rtx libcall)\n       /* Values from double-precision helper functions are returned in core\n \t registers if the selected core only supports single-precision\n \t arithmetic, even if we are using the hard-float ABI.  The same is\n-\t true for single-precision helpers, but we will never be using the\n-\t hard-float ABI on a CPU which doesn't support single-precision\n-\t operations in hardware.  */\n+\t true for single-precision helpers except in case of MVE, because in\n+\t MVE we will be using the hard-float ABI on a CPU which doesn't support\n+\t single-precision operations in hardware.  In MVE the following check\n+\t enables use of emulation for the single-precision arithmetic\n+\t operations.  */\n+      if (TARGET_HAVE_MVE)\n+\t{\n+\t  add_libcall (libcall_htab, optab_libfunc (add_optab, SFmode));\n+\t  add_libcall (libcall_htab, optab_libfunc (sdiv_optab, SFmode));\n+\t  add_libcall (libcall_htab, optab_libfunc (smul_optab, SFmode));\n+\t  add_libcall (libcall_htab, optab_libfunc (neg_optab, SFmode));\n+\t  add_libcall (libcall_htab, optab_libfunc (sub_optab, SFmode));\n+\t  add_libcall (libcall_htab, optab_libfunc (eq_optab, SFmode));\n+\t  add_libcall (libcall_htab, optab_libfunc (lt_optab, SFmode));\n+\t  add_libcall (libcall_htab, optab_libfunc (le_optab, SFmode));\n+\t  add_libcall (libcall_htab, optab_libfunc (ge_optab, SFmode));\n+\t  add_libcall (libcall_htab, optab_libfunc (gt_optab, SFmode));\n+\t  add_libcall (libcall_htab, optab_libfunc (unord_optab, SFmode));\n+\t}\n       add_libcall (libcall_htab, optab_libfunc (add_optab, DFmode));\n       add_libcall (libcall_htab, optab_libfunc (sdiv_optab, DFmode));\n       add_libcall (libcall_htab, optab_libfunc (smul_optab, DFmode));"}, {"sha": "36449f1c7a864c03d2ab3819498e8828677d55e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dee500b359b13985d4f9a006b70c10c526904e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dee500b359b13985d4f9a006b70c10c526904e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5dee500b359b13985d4f9a006b70c10c526904e6", "patch": "@@ -1,3 +1,8 @@\n+2020-03-16  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/mve_libcall1.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/mve_libcall2.c: Likewise.\n+\n 2020-03-16  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/mve_fp_fpu1.c: New test."}, {"sha": "7c38d3102d26d8d7f6358258018a993df8298b4d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_libcall1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dee500b359b13985d4f9a006b70c10c526904e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_libcall1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dee500b359b13985d4f9a006b70c10c526904e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_libcall1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_libcall1.c?ref=5dee500b359b13985d4f9a006b70c10c526904e6", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -mthumb -mfpu=auto\" } */\n+\n+float\n+foo (float a, float b, float c)\n+{\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bl\\\\t__aeabi_fadd\" 2 } } */\n+\n+float\n+foo1 (float a, float b, float c)\n+{\n+  return a - b - c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bl\\\\t__aeabi_fsub\" 2 } } */\n+\n+float\n+foo2 (float a, float b, float c)\n+{\n+  return a * b * c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bl\\\\t__aeabi_fmul\" 2 } } */\n+\n+float\n+foo3 (float b, float c)\n+{\n+  return b / c;\n+}\n+\n+/* { dg-final { scan-assembler \"bl\\\\t__aeabi_fdiv\" }  } */\n+\n+int\n+foo4 (float b, float c)\n+{\n+  return b < c;\n+}\n+\n+/* { dg-final { scan-assembler \"bl\\\\t__aeabi_fcmplt\" }  } */\n+\n+int\n+foo5 (float b, float c)\n+{\n+  return b > c;\n+}\n+\n+/* { dg-final { scan-assembler \"bl\\\\t__aeabi_fcmpgt\" }  } */\n+\n+int\n+foo6 (float b, float c)\n+{\n+  return b != c;\n+}\n+\n+/* { dg-final { scan-assembler \"bl\\\\t__aeabi_fcmpeq\" }  } */\n+\n+int\n+foo7 (float b, float c)\n+{\n+  return b == c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bl\\\\t__aeabi_fcmpeq\" 2 } } */"}, {"sha": "773c8449edbe467dcdfcee260a9a04e2d4a5b0e7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_libcall2.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dee500b359b13985d4f9a006b70c10c526904e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_libcall2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dee500b359b13985d4f9a006b70c10c526904e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_libcall2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_libcall2.c?ref=5dee500b359b13985d4f9a006b70c10c526904e6", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -mthumb -mfpu=auto\" } */\n+\n+double\n+foo (double a, double b, double c)\n+{\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bl\\\\t__aeabi_dadd\" 2 } } */\n+\n+double\n+foo1 (double a, double b, double c)\n+{\n+  return a - b - c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bl\\\\t__aeabi_dsub\" 2 } } */\n+\n+double\n+foo2 (double a, double b, double c)\n+{\n+  return a * b * c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bl\\\\t__aeabi_dmul\" 2 } } */\n+\n+double\n+foo3 (double b, double c)\n+{\n+  return b / c;\n+}\n+\n+/* { dg-final { scan-assembler \"bl\\\\t__aeabi_ddiv\" }  } */\n+\n+int\n+foo4 (double b, double c)\n+{\n+  return b < c;\n+}\n+\n+/* { dg-final { scan-assembler \"bl\\\\t__aeabi_dcmplt\" }  } */\n+\n+int\n+foo5 (double b, double c)\n+{\n+  return b > c;\n+}\n+\n+/* { dg-final { scan-assembler \"bl\\\\t__aeabi_dcmpgt\" }  } */\n+\n+int\n+foo6 (double b, double c)\n+{\n+  return b != c;\n+}\n+\n+/* { dg-final { scan-assembler \"bl\\\\t__aeabi_dcmpeq\" }  } */\n+\n+int\n+foo7 (double b, double c)\n+{\n+  return b == c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bl\\\\t__aeabi_dcmpeq\" 2 } } */"}]}