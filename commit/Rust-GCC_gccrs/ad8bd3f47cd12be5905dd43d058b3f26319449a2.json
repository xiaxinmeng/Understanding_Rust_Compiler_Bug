{"sha": "ad8bd3f47cd12be5905dd43d058b3f26319449a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ4YmQzZjQ3Y2QxMmJlNTkwNWRkNDNkMDU4YjNmMjYzMTk0NDlhMg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-07-29T14:09:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T14:09:38Z"}, "message": "lib-xref.adb (Output_Refs, [...]): For a derived array type...\n\n2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-xref.adb (Output_Refs, Check_Type_Reference): For a\n\tderived array type, add information about component type, which\n\twas previously missing in ali file.\n\t* gnat_rm.texi: Add documentation for Atomic_Always_Lock_Free.\n\nFrom-SVN: r213198", "tree": {"sha": "2b403545e88cd224334d0259b7f2cfa2d959d5db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b403545e88cd224334d0259b7f2cfa2d959d5db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad8bd3f47cd12be5905dd43d058b3f26319449a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad8bd3f47cd12be5905dd43d058b3f26319449a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad8bd3f47cd12be5905dd43d058b3f26319449a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad8bd3f47cd12be5905dd43d058b3f26319449a2/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "422e02cfdf696450410b69d0c6491102ebc2970e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422e02cfdf696450410b69d0c6491102ebc2970e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/422e02cfdf696450410b69d0c6491102ebc2970e"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "71009dc976f01e07e7bf314595b9838e6ec56be7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad8bd3f47cd12be5905dd43d058b3f26319449a2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad8bd3f47cd12be5905dd43d058b3f26319449a2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ad8bd3f47cd12be5905dd43d058b3f26319449a2", "patch": "@@ -1,3 +1,10 @@\n+2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-xref.adb (Output_Refs, Check_Type_Reference): For a\n+\tderived array type, add information about component type, which\n+\twas previously missing in ali file.\n+\t* gnat_rm.texi: Add documentation for Atomic_Always_Lock_Free.\n+\n 2014-07-29  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_ch3.adb (Constrain_Corresponding_Record): For the case"}, {"sha": "c53ed275c9d18d1e93502200aa8316caaebd946b", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad8bd3f47cd12be5905dd43d058b3f26319449a2/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad8bd3f47cd12be5905dd43d058b3f26319449a2/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=ad8bd3f47cd12be5905dd43d058b3f26319449a2", "patch": "@@ -347,9 +347,7 @@ Implementation Defined Attributes\n * Attribute Bit_Position::\n * Attribute Code_Address::\n * Attribute Compiler_Version::\n-* Attribute Constant_Indexing::\n * Attribute Default_Bit_Order::\n-* Attribute Default_Iterator::\n * Attribute Descriptor_Size::\n * Attribute Elaborated::\n * Attribute Elab_Body::\n@@ -370,7 +368,6 @@ Implementation Defined Attributes\n * Attribute Integer_Value::\n * Attribute Invalid_Value::\n * Attribute Iterable::\n-* Attribute Iterator_Element::\n * Attribute Large::\n * Attribute Library_Level::\n * Attribute Lock_Free::\n@@ -8560,9 +8557,7 @@ consideration, you should minimize the use of these attributes.\n * Attribute Bit_Position::\n * Attribute Code_Address::\n * Attribute Compiler_Version::\n-* Attribute Constant_Indexing::\n * Attribute Default_Bit_Order::\n-* Attribute Default_Iterator::\n * Attribute Descriptor_Size::\n * Attribute Elaborated::\n * Attribute Elab_Body::\n@@ -8582,7 +8577,6 @@ consideration, you should minimize the use of these attributes.\n * Attribute Implicit_Dereference::\n * Attribute Integer_Value::\n * Attribute Invalid_Value::\n-* Attribute Iterator_Element::\n * Attribute Iterable::\n * Attribute Large::\n * Attribute Library_Level::\n@@ -8697,7 +8691,11 @@ Language Reference Manual}, section 9.12a.\n @unnumberedsec Attribute Atomic_Always_Lock_Free\n @findex Atomic_Always_Lock_Free\n @noindent\n-PLEASE ADD DOCUMENTATION HERE???\n+\n+The prefix of the @code{Atomic_Always_Lock_Free} attribute is a type.\n+The result is a Boolean value which is True if the type has discriminants,\n+and False otherwise.  The result indicate whether atomic operations are\n+supported by the target for the given type.\n \n @node Attribute Bit\n @unnumberedsec Attribute Bit\n@@ -8795,12 +8793,6 @@ prefix) yields a static string identifying the version of the compiler\n being used to compile the unit containing the attribute reference. A\n typical result would be something like \"@value{EDITION} @value{gnat_version} (20090221)\".\n \n-@node Attribute Constant_Indexing\n-@unnumberedsec Attribute Constant_Indexing\n-@findex Constant_Indexing\n-@noindent\n-PLEASE ADD DOCUMENTATION HERE???\n-\n @node Attribute Default_Bit_Order\n @unnumberedsec Attribute Default_Bit_Order\n @cindex Big endian\n@@ -8813,12 +8805,6 @@ as a @code{Pos} value (0 for @code{High_Order_First}, 1 for\n @code{Low_Order_First}).  This is used to construct the definition of\n @code{Default_Bit_Order} in package @code{System}.\n \n-@node Attribute Default_Iterator\n-@unnumberedsec Attribute Default_Iterator\n-@findex Default_Iterator\n-@noindent\n-PLEASE ADD DOCUMENTATION HERE???\n-\n @node Attribute Descriptor_Size\n @unnumberedsec Attribute Descriptor_Size\n @cindex Descriptor\n@@ -9125,12 +9111,6 @@ uninitialized value of the type if pragma Initialize_Scalars is used,\n including the ability to modify the value with the binder -Sxx flag and\n relevant environment variables at run time.\n \n-@node Attribute Iterator_Element\n-@unnumberedsec Attribute Iterator_Element\n-@findex Iterator_Element\n-@noindent\n-PLEASE ADD DOCUMENTATION HERE???\n-\n @node Attribute Iterable\n @unnumberedsec Attribute Iterable\n @findex Iterable"}, {"sha": "8cc8e2f6b83b42c3508d9dccb325ee0b720d1bab", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad8bd3f47cd12be5905dd43d058b3f26319449a2/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad8bd3f47cd12be5905dd43d058b3f26319449a2/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=ad8bd3f47cd12be5905dd43d058b3f26319449a2", "patch": "@@ -1893,12 +1893,18 @@ package body Lib.Xref is\n \n                procedure Check_Type_Reference\n                  (Ent            : Entity_Id;\n-                  List_Interface : Boolean);\n+                  List_Interface : Boolean;\n+                  Is_Component   : Boolean := False);\n                --  Find whether there is a meaningful type reference for\n                --  Ent, and display it accordingly. If List_Interface is\n                --  true, then Ent is a progenitor interface of the current\n                --  type entity being listed. In that case list it as is,\n-               --  without looking for a type reference for it.\n+               --  without looking for a type reference for it. Flag is also\n+               --  used for index types of an array type, where the caller\n+               --  supplies the intended type reference. Is_Component serves\n+               --  the same purpose, to display the component type of a\n+               --  derived array type, for which only the parent type has\n+               --  ben displayed so far.\n \n                procedure Output_Instantiation_Refs (Loc : Source_Ptr);\n                --  Recursive procedure to output instantiation references for\n@@ -1915,7 +1921,8 @@ package body Lib.Xref is\n \n                procedure Check_Type_Reference\n                  (Ent            : Entity_Id;\n-                  List_Interface : Boolean)\n+                  List_Interface : Boolean;\n+                  Is_Component   : Boolean := False)\n                is\n                begin\n                   if List_Interface then\n@@ -1927,6 +1934,13 @@ package body Lib.Xref is\n                      Left  := '<';\n                      Right := '>';\n \n+                  --  The following is not documented in lib-xref.ads ???\n+\n+                  elsif Is_Component then\n+                     Tref  := Ent;\n+                     Left  := '(';\n+                     Right := ')';\n+\n                   else\n                      Get_Type_Reference (Ent, Tref, Left, Right);\n                   end if;\n@@ -2515,8 +2529,21 @@ package body Lib.Xref is\n \n                      if Is_Array_Type (XE.Key.Ent) then\n                         declare\n+                           A_Typ : constant Entity_Id := XE.Key.Ent;\n                            Indx : Node_Id;\n+\n                         begin\n+                           --  If this is a derived array type, we have\n+                           --  output the parent type, so add the component\n+                           --  type now.\n+\n+                           if Is_Derived_Type (A_Typ) then\n+                              Check_Type_Reference\n+                                (Component_Type (A_Typ), False, True);\n+                           end if;\n+\n+                           --  Add references to index types.\n+\n                            Indx := First_Index (XE.Key.Ent);\n                            while Present (Indx) loop\n                               Check_Type_Reference"}]}