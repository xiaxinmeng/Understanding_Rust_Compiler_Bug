{"sha": "78fd2726cafeb9e0cf377e5fb2102d09d91779d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhmZDI3MjZjYWZlYjllMGNmMzc3ZTVmYjIxMDJkMDlkOTE3NzlkNQ==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-10-21T21:18:27Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-10-21T21:18:27Z"}, "message": "a scalar depending on vdefs in the current region is not invariant\n\nWhen a scalar is defined in function of an array reference in the current scop,\nit does variate.  Graphite cannot represent the condition in scop-11.c, as a[*]\nvariates in the current region, and it is not an affine condition:\n\n  for (j = 0; j <= 20; j++)\n    a[j] = b + i;\n\n  if (a[12] == 23)\n    b = 3;\n  else\n    b = 1;\n\n  for (j = 0; j <= 20; j++)\n    a[j] = b + i;\n\n\t* graphite-scop-detection.c (parameter_index_in_region): Update call to\n\tinvariant_in_sese_p_rec.\n\t* graphite-sese-to-poly.c (extract_affine): Same.\n\t* sese.c (invariant_in_sese_p_rec): Pass in an extra parameter has_vdefs.\n\t(scalar_evolution_in_region): Return chrec_dont_know when the scalar variable\n\tdepends on virtual definitions in the current region.\n\t* sese.h (invariant_in_sese_p_rec): Update declaration.\n\ntestsuite/\n\t* gcc.dg/graphite/scop-11.c: Update pattern.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r229151", "tree": {"sha": "edc739b54786c480775bcdd4ce45e801f6224ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edc739b54786c480775bcdd4ce45e801f6224ec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78fd2726cafeb9e0cf377e5fb2102d09d91779d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fd2726cafeb9e0cf377e5fb2102d09d91779d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78fd2726cafeb9e0cf377e5fb2102d09d91779d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b76e7fef8246b7bb6f209b8ce0768d437b7b4a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b76e7fef8246b7bb6f209b8ce0768d437b7b4a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b76e7fef8246b7bb6f209b8ce0768d437b7b4a0"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "c49cd6fd448207fa4da702811f74a570f97660c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78fd2726cafeb9e0cf377e5fb2102d09d91779d5", "patch": "@@ -1,3 +1,14 @@\n+2015-10-21  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-scop-detection.c (parameter_index_in_region): Update call to\n+\tinvariant_in_sese_p_rec.\n+\t* graphite-sese-to-poly.c (extract_affine): Same.\n+\t* sese.c (invariant_in_sese_p_rec): Pass in an extra parameter has_vdefs.\n+\t(scalar_evolution_in_region): Return chrec_dont_know when the scalar variable\n+\tdepends on virtual definitions in the current region.\n+\t* sese.h (invariant_in_sese_p_rec): Update declaration.\n+\n 2015-10-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "a95ec576d425969d825ec834d9c12e45cdfdbe87", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=78fd2726cafeb9e0cf377e5fb2102d09d91779d5", "patch": "@@ -1521,7 +1521,7 @@ parameter_index_in_region (tree name, sese_info_p region)\n   if (TREE_CODE (TREE_TYPE (name)) != INTEGER_TYPE)\n     return -1;\n \n-  if (!invariant_in_sese_p_rec (name, region->region))\n+  if (!invariant_in_sese_p_rec (name, region->region, NULL))\n     return -1;\n \n   i = parameter_index_in_region_1 (name, region);"}, {"sha": "c06d9debf555e8c2a67d4dd7d516b0b143943058", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=78fd2726cafeb9e0cf377e5fb2102d09d91779d5", "patch": "@@ -540,7 +540,7 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n \n     case SSA_NAME:\n       gcc_assert (-1 != parameter_index_in_region_1 (e, s->scop_info)\n-\t\t  || !invariant_in_sese_p_rec (e, s->scop_info->region));\n+\t\t  || !invariant_in_sese_p_rec (e, s->scop_info->region, NULL));\n       res = extract_affine_name (s, e, space);\n       break;\n "}, {"sha": "797dea5f35e8fb4f7958aed5cc0cc038ab1e102d", "filename": "gcc/sese.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=78fd2726cafeb9e0cf377e5fb2102d09d91779d5", "patch": "@@ -787,10 +787,11 @@ set_ifsese_condition (ifsese if_region, tree condition)\n }\n \n /* Return true when T is defined outside REGION or when no definitions are\n-   variant in REGION.  */\n+   variant in REGION.  When HAS_VDEFS is a valid pointer, sets HAS_VDEFS to true\n+   when T depends on memory that may change in REGION.  */\n \n bool\n-invariant_in_sese_p_rec (tree t, sese_l &region)\n+invariant_in_sese_p_rec (tree t, sese_l &region, bool *has_vdefs)\n {\n   ssa_op_iter iter;\n   use_operand_p use_p;\n@@ -805,11 +806,15 @@ invariant_in_sese_p_rec (tree t, sese_l &region)\n \n   /* VDEF is variant when it is in the region.  */\n   if (gimple_vdef (stmt))\n-    return false;\n+    {\n+      if (has_vdefs)\n+\t*has_vdefs = true;\n+      return false;\n+    }\n \n   /* A VUSE may or may not be variant following the VDEFs.  */\n   if (tree vuse = gimple_vuse (stmt))\n-    return invariant_in_sese_p_rec (vuse, region);\n+    return invariant_in_sese_p_rec (vuse, region, has_vdefs);\n \n   FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_USE)\n     {\n@@ -818,7 +823,7 @@ invariant_in_sese_p_rec (tree t, sese_l &region)\n       if (!defined_in_sese_p (use, region))\n \tcontinue;\n \n-      if (!invariant_in_sese_p_rec (use, region))\n+      if (!invariant_in_sese_p_rec (use, region, has_vdefs))\n \treturn false;\n     }\n \n@@ -856,8 +861,13 @@ scalar_evolution_in_region (sese_l &region, loop_p loop, tree t)\n       return t;\n     }\n \n-  if (invariant_in_sese_p_rec (t, region))\n+  bool has_vdefs = false;\n+  if (invariant_in_sese_p_rec (t, region, &has_vdefs))\n     return t;\n \n+  /* T variates in REGION.  */\n+  if (has_vdefs)\n+    return chrec_dont_know;\n+\n   return instantiate_scev (before, loop, t);\n }"}, {"sha": "d2ad9bde04b88145f5a329c0bd79f2d3d87cbfce", "filename": "gcc/sese.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=78fd2726cafeb9e0cf377e5fb2102d09d91779d5", "patch": "@@ -84,7 +84,7 @@ extern edge copy_bb_and_scalar_dependences (basic_block, sese_info_p, edge,\n \t\t\t\t\t    vec<tree> , bool *);\n extern struct loop *outermost_loop_in_sese (sese_l &, basic_block);\n extern tree scalar_evolution_in_region (sese_l &, loop_p, tree);\n-extern bool invariant_in_sese_p_rec (tree, sese_l &);\n+extern bool invariant_in_sese_p_rec (tree, sese_l &, bool *);\n \n /* Check that SESE contains LOOP.  */\n "}, {"sha": "cda024d8b27213f521efef2390493fceca266536", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78fd2726cafeb9e0cf377e5fb2102d09d91779d5", "patch": "@@ -1,3 +1,8 @@\n+2015-10-21  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* gcc.dg/graphite/scop-11.c: Update pattern.\n+\n 2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/67056"}, {"sha": "6362003bc308ab75e68f9d39a85e0b59b56cfc2e", "filename": "gcc/testsuite/gcc.dg/graphite/scop-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fd2726cafeb9e0cf377e5fb2102d09d91779d5/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-11.c?ref=78fd2726cafeb9e0cf377e5fb2102d09d91779d5", "patch": "@@ -19,4 +19,4 @@ int toto (int i, int b)\n   return a[b];\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 0\" 1 \"graphite\"} } */"}]}