{"sha": "4b8c2c4ba3566f8dd6d256e4b93321410782a0b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI4YzJjNGJhMzU2NmY4ZGQ2ZDI1NmU0YjkzMzIxNDEwNzgyYTBiNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-02-17T17:41:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-08T07:51:10Z"}, "message": "[Ada] AI12-0228 Properties of qualified expressions used as names\n\n2020-06-08  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch8.adb (Analyze_Object_Renaming): Update Get_Object_Name\n\tto go through N_Qualified_Expression and N_Type_Conversion.  Fix\n\tanother case of wrong usage of E_Anonymous_Access_Type instead\n\tof Anonymous_Access_Kind.\n\t* sem_util.adb (Is_Dependent_Component_Of_Mutable_Object): Work\n\ton the original node.\n\t(Is_Aliased_View): Take into account N_Qualified_Expression.", "tree": {"sha": "aaf437ff87e097d88686df3196640419c85f94fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaf437ff87e097d88686df3196640419c85f94fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b8c2c4ba3566f8dd6d256e4b93321410782a0b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8c2c4ba3566f8dd6d256e4b93321410782a0b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8c2c4ba3566f8dd6d256e4b93321410782a0b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8c2c4ba3566f8dd6d256e4b93321410782a0b4/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eda13a49e566270f04323dbec11b2e86d3ddccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eda13a49e566270f04323dbec11b2e86d3ddccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eda13a49e566270f04323dbec11b2e86d3ddccc"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "4d9b5ba08b6cf18cbe945999686acedc341dacd1", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8c2c4ba3566f8dd6d256e4b93321410782a0b4/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8c2c4ba3566f8dd6d256e4b93321410782a0b4/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=4b8c2c4ba3566f8dd6d256e4b93321410782a0b4", "patch": "@@ -844,18 +844,23 @@ package body Sem_Ch8 is\n       begin\n          Obj_Nam := Nod;\n          while Present (Obj_Nam) loop\n-            if Nkind_In (Obj_Nam, N_Attribute_Reference,\n-                                  N_Explicit_Dereference,\n-                                  N_Indexed_Component,\n-                                  N_Slice)\n-            then\n-               Obj_Nam := Prefix (Obj_Nam);\n+            case Nkind (Obj_Nam) is\n+               when N_Attribute_Reference\n+                  | N_Explicit_Dereference\n+                  | N_Indexed_Component\n+                  | N_Slice\n+               =>\n+                  Obj_Nam := Prefix (Obj_Nam);\n \n-            elsif Nkind (Obj_Nam) = N_Selected_Component then\n-               Obj_Nam := Selector_Name (Obj_Nam);\n-            else\n-               exit;\n-            end if;\n+               when N_Selected_Component =>\n+                  Obj_Nam := Selector_Name (Obj_Nam);\n+\n+               when N_Qualified_Expression | N_Type_Conversion =>\n+                  Obj_Nam := Expression (Obj_Nam);\n+\n+               when others =>\n+                  exit;\n+            end case;\n          end loop;\n \n          return Obj_Nam;\n@@ -1046,8 +1051,8 @@ package body Sem_Ch8 is\n \n          if Nkind (Nam) = N_Type_Conversion\n            and then not Comes_From_Source (Nam)\n-           and then Ekind (Etype (Expression (Nam))) = E_Anonymous_Access_Type\n-           and then Ekind (T) /= E_Anonymous_Access_Type\n+           and then Ekind (Etype (Expression (Nam))) in Anonymous_Access_Kind\n+           and then Ekind (T) not in Anonymous_Access_Kind\n          then\n             Wrong_Type (Expression (Nam), T); -- Should we give better error???\n          end if;"}, {"sha": "f359fa27f5622644236bee74fd504acc4d1fc12a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8c2c4ba3566f8dd6d256e4b93321410782a0b4/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8c2c4ba3566f8dd6d256e4b93321410782a0b4/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4b8c2c4ba3566f8dd6d256e4b93321410782a0b4", "patch": "@@ -13736,6 +13736,13 @@ package body Sem_Util is\n          return Is_Tagged_Type (Etype (Obj))\n            and then Is_Aliased_View (Expression (Obj));\n \n+      --  Ada 202x AI12-0228\n+\n+      elsif Nkind (Obj) = N_Qualified_Expression\n+        and then Ada_Version >= Ada_2012\n+      then\n+         return Is_Aliased_View (Expression (Obj));\n+\n       elsif Nkind (Obj) = N_Explicit_Dereference then\n          return Nkind (Original_Node (Obj)) /= N_Function_Call;\n \n@@ -14582,6 +14589,8 @@ package body Sem_Util is\n          Deref := Prefix (Deref);\n       end loop;\n \n+      Deref := Original_Node (Deref);\n+\n       --  If the prefix is a qualified expression of a variable, then function\n       --  Is_Variable will return False for that because a qualified expression\n       --  denotes a constant view, so we need to get the name being qualified\n@@ -14599,9 +14608,11 @@ package body Sem_Util is\n \n       if Is_Variable (Object)\n         or else Is_Variable (Deref)\n-        or else (Ada_Version >= Ada_2005\n-                  and then (Nkind (Deref) = N_Explicit_Dereference\n-                             or else Is_Access_Type (Etype (Deref))))\n+        or else\n+          (Ada_Version >= Ada_2005\n+            and then (Nkind (Deref) = N_Explicit_Dereference\n+                       or else (Present (Etype (Deref))\n+                                 and then Is_Access_Type (Etype (Deref)))))\n       then\n          if Nkind (Object) = N_Selected_Component then\n "}]}