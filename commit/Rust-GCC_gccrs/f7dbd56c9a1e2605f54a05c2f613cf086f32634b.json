{"sha": "f7dbd56c9a1e2605f54a05c2f613cf086f32634b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdkYmQ1NmM5YTFlMjYwNWY1NGEwNWMyZjYxM2NmMDg2ZjMyNjM0Yg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-05-31T22:14:37Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-05-31T22:14:37Z"}, "message": "InflaterInputStream.java: Merged more with Classpath version.\n\n2004-06-01  Michael Koch  <konqueror@gmx.de>\n\n\t* java/util/zip/InflaterInputStream.java: Merged more with Classpath\n\tversion.\n\t* java/util/zip/ZipOutputStream.java (): Renamed enum to e to removed\n\tJava 1.5 keyword usage.\n\nFrom-SVN: r82509", "tree": {"sha": "25e3c5d1249b2ac0165fd08171d87997a7d4fca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25e3c5d1249b2ac0165fd08171d87997a7d4fca4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7dbd56c9a1e2605f54a05c2f613cf086f32634b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7dbd56c9a1e2605f54a05c2f613cf086f32634b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7dbd56c9a1e2605f54a05c2f613cf086f32634b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7dbd56c9a1e2605f54a05c2f613cf086f32634b/comments", "author": null, "committer": null, "parents": [{"sha": "ec3e68358fa934bd54bf6c93af37360b30dfff70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3e68358fa934bd54bf6c93af37360b30dfff70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec3e68358fa934bd54bf6c93af37360b30dfff70"}], "stats": {"total": 99, "additions": 72, "deletions": 27}, "files": [{"sha": "d0b99bf9087fd68df67343a24306fe37bc96c0bc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7dbd56c9a1e2605f54a05c2f613cf086f32634b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7dbd56c9a1e2605f54a05c2f613cf086f32634b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f7dbd56c9a1e2605f54a05c2f613cf086f32634b", "patch": "@@ -1,3 +1,10 @@\n+2004-06-01  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/util/zip/InflaterInputStream.java: Merged more with Classpath\n+\tversion.\n+\t* java/util/zip/ZipOutputStream.java (): Renamed enum to e to removed\n+\tJava 1.5 keyword usage.\n+\n 2004-05-31  Olga Rodimina  <rodimina@redhat.com>\n \n \t* javax/swing/plaf/basic/BasicMenuUI.java:"}, {"sha": "9fac83fc6dc3ac926ce02795203670cac4de5c7b", "filename": "libjava/java/util/zip/InflaterInputStream.java", "status": "modified", "additions": 62, "deletions": 24, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7dbd56c9a1e2605f54a05c2f613cf086f32634b/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7dbd56c9a1e2605f54a05c2f613cf086f32634b/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java?ref=f7dbd56c9a1e2605f54a05c2f613cf086f32634b", "patch": "@@ -1,5 +1,6 @@\n /* InflaterInputStream.java - Input stream filter for decompressing\n-   Copyright (C) 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -54,7 +55,20 @@\n  */\n public class InflaterInputStream extends FilterInputStream\n {\n+  /**\n+   * Decompressor for this filter \n+   */\n+  protected Inflater inf;\n+\n+  /**\n+   * Byte array used as a buffer \n+   */\n+  protected byte[] buf;\n \n+  /**\n+   * Size of buffer   \n+   */\n+  protected int len;\n \n   protected void fill () throws IOException\n   {\n@@ -63,26 +77,45 @@ protected void fill () throws IOException\n       inf.setInput(buf, 0, len);\n   }\n \n-  public InflaterInputStream (InputStream in)\n+  /**\n+   * Create an InflaterInputStream with the default decompresseor\n+   * and a default buffer size.\n+   *\n+   * @param in the InputStream to read bytes from\n+   */\n+  public InflaterInputStream(InputStream in) \n   {\n     this (in, new Inflater (), 512);\n   }\n \n-  public InflaterInputStream (InputStream in, Inflater infl)\n+  /**\n+   * Create an InflaterInputStream with the specified decompresseor\n+   * and a default buffer size.\n+   *\n+   * @param in the InputStream to read bytes from\n+   * @param inf the decompressor used to decompress data read from in\n+   */\n+  public InflaterInputStream(InputStream in, Inflater inf) \n   {\n-    this (in, infl, 512);\n+    this (in, inf, 512);\n   }\n \n-  public InflaterInputStream (InputStream in, Inflater inf, int size)\n+  /**\n+   * Create an InflaterInputStream with the specified decompresseor\n+   * and a specified buffer size.\n+   *\n+   * @param in the InputStream to read bytes from\n+   * @param inf the decompressor used to decompress data read from in\n+   * @param size size of the buffer to use\n+   */\n+  public InflaterInputStream(InputStream in, Inflater inf, int size) \n   {\n-    super (in);\n+    super(in);\n \n     if (in == null)\n       throw new NullPointerException (\"in may not be null\");\n-\n     if (inf == null)\n       throw new NullPointerException (\"inf may not be null\");\n-    \n     if (size < 0)\n       throw new IllegalArgumentException (\"size may not be negative\");\n     \n@@ -99,7 +132,15 @@ public int read () throws IOException\n     return r;\n   }\n \n-  public int read (byte[] buf, int off, int len) throws IOException\n+\n+  /**\n+   * Decompresses data into the byte array\n+   *\n+   * @param b the array to read and decompress data into\n+   * @param off the offset indicating where the data should be placed\n+   * @param len the number of bytes to decompress\n+   */\n+  public int read(byte[] b, int off, int len) throws IOException\n   {\n     if (inf == null)\n       throw new IOException (\"stream closed\");\n@@ -113,9 +154,10 @@ public int read (byte[] buf, int off, int len) throws IOException\n       {\n \tif (inf.needsInput())\n \t  fill ();\n+\t\n \ttry\n \t  {\n-\t    count = inf.inflate(buf, off, len);\t\n+\t    count = inf.inflate(b, off, len);\n \t    if (count == 0)\n \t      {\n \t\tif (this.len == -1)\n@@ -126,10 +168,10 @@ public int read (byte[] buf, int off, int len) throws IOException\n \t\tif (inf.needsDictionary())\n \t\t  throw new ZipException (\"Inflater needs Dictionary\");\n \t      }\n-\t  }\n-\tcatch (DataFormatException dfe)\n+\t  } \n+\tcatch (DataFormatException dfe) \n \t  {\n-\t    throw new ZipException (dfe.getMessage());\n+\t    throw new ZipException(dfe.getMessage());\n \t  }\n       }\n     return count;\n@@ -150,7 +192,12 @@ public int available () throws IOException\n     return inf.finished () ? 0 : 1;\n   }\n \n-  public long skip (long n) throws IOException\n+  /**\n+   * Skip specified number of bytes of uncompressed data\n+   *\n+   * @param n number of bytes to skip\n+   */\n+  public long skip(long n) throws IOException\n   {\n     if (inf == null)\n       throw new IOException (\"stream closed\");\n@@ -173,14 +220,5 @@ public long skip (long n) throws IOException\n       }\n \n     return s;\n-  }\n-\n-  // Buffer for delivering uncompressed data to inflater.\n-  protected byte[] buf;\n-\n-  // Inflater used to decompress data.\n-  protected Inflater inf;\n-\n-  // Number of read bytes in buf.\n-  protected int len;\n+ }\n }"}, {"sha": "9c3a2c81908a33ee093c63b3bac9f2347279c3df", "filename": "libjava/java/util/zip/ZipOutputStream.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7dbd56c9a1e2605f54a05c2f613cf086f32634b/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7dbd56c9a1e2605f54a05c2f613cf086f32634b/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java?ref=f7dbd56c9a1e2605f54a05c2f613cf086f32634b", "patch": "@@ -338,10 +338,10 @@ public void finish() throws IOException\n     int numEntries = 0;\n     int sizeEntries = 0;\n     \n-    Enumeration enum = entries.elements();\n-    while (enum.hasMoreElements())\n+    Enumeration e = entries.elements();\n+    while (e.hasMoreElements())\n       {\n-\tZipEntry entry = (ZipEntry) enum.nextElement();\n+\tZipEntry entry = (ZipEntry) e.nextElement();\n \t\n \tint method = entry.getMethod();\n \twriteLeInt(CENSIG);"}]}