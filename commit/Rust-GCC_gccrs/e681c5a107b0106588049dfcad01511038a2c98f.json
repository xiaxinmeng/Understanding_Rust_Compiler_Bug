{"sha": "e681c5a107b0106588049dfcad01511038a2c98f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY4MWM1YTEwN2IwMTA2NTg4MDQ5ZGZjYWQwMTUxMTAzOGEyYzk4Zg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-02T23:35:04Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-02T23:35:04Z"}, "message": "Add some braces for clarity.\n\nFrom-SVN: r3414", "tree": {"sha": "485001488c3cdf3ef92fc4928875d86d9c87d1ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/485001488c3cdf3ef92fc4928875d86d9c87d1ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e681c5a107b0106588049dfcad01511038a2c98f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e681c5a107b0106588049dfcad01511038a2c98f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e681c5a107b0106588049dfcad01511038a2c98f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e681c5a107b0106588049dfcad01511038a2c98f/comments", "author": null, "committer": null, "parents": [{"sha": "98e4b83582e4e46f1df1562472fbfc1511e6f698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e4b83582e4e46f1df1562472fbfc1511e6f698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e4b83582e4e46f1df1562472fbfc1511e6f698"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "da21fe8e3094d3c83a9e335d3664edb547196f97", "filename": "gcc/c-decl.c", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e681c5a107b0106588049dfcad01511038a2c98f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e681c5a107b0106588049dfcad01511038a2c98f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e681c5a107b0106588049dfcad01511038a2c98f", "patch": "@@ -3310,10 +3310,12 @@ finish_decl (decl, init, asmspec_tree)\n \n       if ((DECL_EXTERNAL (decl) || TREE_STATIC (decl))\n \t  && DECL_SIZE (decl) != 0)\n-\tif (TREE_CODE (DECL_SIZE (decl)) == INTEGER_CST)\n-\t  constant_expression_warning (DECL_SIZE (decl));\n-\telse\n-\t  error_with_decl (decl, \"storage size of `%s' isn't constant\");\n+\t{\n+\t  if (TREE_CODE (DECL_SIZE (decl)) == INTEGER_CST)\n+\t    constant_expression_warning (DECL_SIZE (decl));\n+\t  else\n+\t    error_with_decl (decl, \"storage size of `%s' isn't constant\");\n+\t}\n     }\n \n   /* Output the assembler code and/or RTL code for variables and functions,\n@@ -4901,13 +4903,15 @@ finish_struct (t, fieldlist)\n       if (DECL_INITIAL (x))\n \tSTRIP_NOPS (DECL_INITIAL (x));\n       if (DECL_INITIAL (x))\n-\tif (TREE_CODE (DECL_INITIAL (x)) == INTEGER_CST)\n-\t  constant_expression_warning (DECL_INITIAL (x));\n-\telse\n-\t  {\n-\t    error_with_decl (x, \"bit-field `%s' width not an integer constant\");\n-\t    DECL_INITIAL (x) = NULL;\n-\t  }\n+\t{\n+\t  if (TREE_CODE (DECL_INITIAL (x)) == INTEGER_CST)\n+\t    constant_expression_warning (DECL_INITIAL (x));\n+\t  else\n+\t    {\n+\t      error_with_decl (x, \"bit-field `%s' width not an integer constant\");\n+\t      DECL_INITIAL (x) = NULL;\n+\t    }\n+\t}\n \n       /* Detect invalid bit-field type.  */\n       if (DECL_INITIAL (x)\n@@ -5316,14 +5320,16 @@ build_enumerator (name, value)\n     STRIP_TYPE_NOPS (value);\n \n   if (value != 0)\n-    if (TREE_CODE (value) == INTEGER_CST)\n-      constant_expression_warning (value);\n-    else\n-      {\n-\terror (\"enumerator value for `%s' not integer constant\",\n-\t       IDENTIFIER_POINTER (name));\n-\tvalue = 0;\n-      }\n+    {\n+      if (TREE_CODE (value) == INTEGER_CST)\n+\tconstant_expression_warning (value);\n+      else\n+\t{\n+\t  error (\"enumerator value for `%s' not integer constant\",\n+\t\t IDENTIFIER_POINTER (name));\n+\t  value = 0;\n+\t}\n+    }\n \n   /* Default based on previous value.  */\n   /* It should no longer be possible to have NON_LVALUE_EXPR"}]}