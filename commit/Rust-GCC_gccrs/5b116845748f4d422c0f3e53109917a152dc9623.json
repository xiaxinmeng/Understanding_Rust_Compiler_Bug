{"sha": "5b116845748f4d422c0f3e53109917a152dc9623", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIxMTY4NDU3NDhmNGQ0MjJjMGYzZTUzMTA5OTE3YTE1MmRjOTYyMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-26T18:36:38Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-26T18:36:38Z"}, "message": "ChangeLog: Fix whitespace.\n\n        * ChangeLog: Fix whitespace.\n        * testsute/ChangeLog: Ditto.\n\nFrom-SVN: r192856", "tree": {"sha": "43276921f6691a57355269fb0d81208168cd9f06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43276921f6691a57355269fb0d81208168cd9f06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b116845748f4d422c0f3e53109917a152dc9623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b116845748f4d422c0f3e53109917a152dc9623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b116845748f4d422c0f3e53109917a152dc9623", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b116845748f4d422c0f3e53109917a152dc9623/comments", "author": null, "committer": null, "parents": [{"sha": "eff6ca85db9b9e7f488a7c04084412e34855503c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff6ca85db9b9e7f488a7c04084412e34855503c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff6ca85db9b9e7f488a7c04084412e34855503c"}], "stats": {"total": 66, "additions": 26, "deletions": 40}, "files": [{"sha": "1f63b2e6dcdb8d5f70a7a3f3e0eaed1e137d44ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b116845748f4d422c0f3e53109917a152dc9623/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b116845748f4d422c0f3e53109917a152dc9623/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b116845748f4d422c0f3e53109917a152dc9623", "patch": "@@ -221,8 +221,7 @@\n 2012-10-25  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimize/54980\n-\t* tree-ssa-loop-ivcanon.c (constant_after_peeling): Fix\n-\tobvious typo.\n+\t* tree-ssa-loop-ivcanon.c (constant_after_peeling): Fix obvious typo.\n \t(loop_edge_to_cancel): Be sure that the edge is from an conditional\n \tso we can cancel it.\n \n@@ -336,8 +335,7 @@\n 2012-10-23  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/constraints.md (\"T\", \"W\"): Change\n-\tdefinitions to use define_memory_constraint.  Do not match\n-\t'reg'.\n+\tdefinitions to use define_memory_constraint.  Do not match 'reg'.\n \t* config/sparc/sparc.c (memory_ok_for_ldd): Remove all non-MEM\n \thandling code, update comment.\n \n@@ -450,7 +448,7 @@\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \t    Richard Earnshaw  <rearnsha@arm.com>\n \t    Sofiane Naci  <sofiane.naci@arm.com>\n-\t    Stephen Thomas  <stephen,thomas@arm.com>\n+\t    Stephen Thomas  <stephen.thomas@arm.com>\n \t    Tejas Belagod  <tejas.belagod@arm.com>\n \t    Yufeng Zhang  <yufeng.zhang@arm.com>\n \n@@ -504,9 +502,8 @@\n \t* tree-ssa-operands.h (struct def_optype_d, def_optype_p): Remove.\n \t(ssa_operands.free_defs): Remove.\n \t(DEF_OP_PTR, DEF_OP): Remove.\n-\t(struct ssa_operand_iterator_d): Remove 'defs', add 'flags'\n-\tmembers, rename 'phi_stmt' to 'stmt', 'phi_i' to 'i' and 'num_phi'\n-\tto 'numops'.\n+\t(struct ssa_operand_iterator_d): Remove 'defs', add 'flags' members,\n+\trename 'phi_stmt' to 'stmt', 'phi_i' to 'i' and 'num_phi' to 'numops'.\n \t* gimple.h (gimple_statement_with_ops.def_ops): Remove.\n \t(gimple_def_ops, gimple_set_def_ops): Remove.\n \t(gimple_vdef_op): Don't take const gimple, adjust.\n@@ -539,22 +536,19 @@\n \n 2012-10-23  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n-\t* config/arm/arm.c (offset_ok_for_ldrd_strd): Return false for\n-\tThumb1.\n+\t* config/arm/arm.c (offset_ok_for_ldrd_strd): Return false for Thumb1.\n \n 2012-10-23  Vladimir Makarov  <vmakarov@redhat.com>\n \n-\t* dbxout.c (dbxout_symbol_location): Pass new argument to\n-\talter_subreg.\n+\t* dbxout.c (dbxout_symbol_location): Pass new argument to alter_subreg.\n \t* dwarf2out.c: Include ira.h and lra.h.\n \t(based_loc_descr, compute_frame_pointer_to_fb_displacement): Use\n \tlra_eliminate_regs for LRA instead of eliminate_regs.\n \t* expr.c (emit_move_insn_1): Pass an additional argument to\n \temit_move_via_integer.  Use emit_move_via_integer for LRA only if\n \tthe insn is recognized.\n \t* emit-rtl.c (gen_rtx_REG): Add lra_in_progress.\n-\t(validate_subreg): Don't check offset for LRA and floating point\n-\tmodes.\n+\t(validate_subreg): Don't check offset for LRA and floating point modes.\n \t* final.c (final_scan_insn, cleanup_subreg_operands): Pass new\n \targument to alter_subreg.\n \t(walk_alter_subreg, output_operand): Ditto.\n@@ -590,7 +584,7 @@\n \tand ira_reg_equiv_const.  Call ira_setup_eliminable_regset with a\n \tnew argument.  Don't flatten IRA IRA for LRA.  Don't reassign\n \tconflict allocnos for LRA. Call finish_reg_equiv.\n-        (do_reload): Prepare code for LRA call.  Call LRA.\n+\t(do_reload): Prepare code for LRA call.  Call LRA.\n \t* ira.h (ira_use_lra_p): New external.\n \t(struct target_ira): Add members x_ira_class_subset_p\n \tx_ira_reg_class_subset, and x_ira_reg_classes_intersect_p.\n@@ -607,8 +601,7 @@\n \t(generate_edge_moves, change_loop) Use ira_equiv_no_lvalue_p.\n \t(emit_move_list): Simplify code.  Call\n \tira_update_equiv_info_by_shuffle_insn.  Use ira_reg_equiv instead\n-\tof ira_reg_equiv_invariant_p and ira_reg_equiv_const.  Change\n-\tassert.\n+\tof ira_reg_equiv_invariant_p and ira_reg_equiv_const.  Change assert.\n \t* ira-int.h (struct target_ira_int): Remove x_ira_class_subset_p\n \tand x_ira_reg_classes_intersect_p.\n \t(ira_class_subset_p, ira_reg_classes_intersect_p): Remove.\n@@ -631,13 +624,11 @@\n \t* lra-lives.c: Ditto.\n \t* lra-spills.c: Ditto.\n \t* Makefile.in (LRA_INT_H): New.\n-\t(OBJS): Add lra.o, lra-assigns.o, lra-coalesce.o,\n-\tlra-constraints.o, lra-eliminations.o, lra-lives.o, and\n-\tlra-spills.o.\n+\t(OBJS): Add lra.o, lra-assigns.o, lra-coalesce.o, lra-constraints.o,\n+\tlra-eliminations.o, lra-lives.o, and lra-spills.o.\n \t(dwarf2out.o): Add dependence on ira.h and lra.h.\n \t(ira.o): Add dependence on lra.h.\n-\t(lra.o, lra-assigns.o, lra-coalesce.o, lra-constraints.o): New\n-\tentries.\n+\t(lra.o, lra-assigns.o, lra-coalesce.o, lra-constraints.o): New entries.\n \t(lra-eliminations.o, lra-lives.o, lra-spills.o): Ditto.\n \t* output.h (alter_subreg): Add new argument.\n \t* rtlanal.c (simplify_subreg_regno): Permit mode changes for LRA.\n@@ -646,8 +637,7 @@\n \tFLOAT_MODE subregs for LRA.\n \t(scratch_operand): Accept pseudos for LRA.\n \t* rtl.h (lra_in_progress): New external.\n-\t(debug_bb_n_slim, debug_bb_slim, print_value_slim): New\n-\tprototypes.\n+\t(debug_bb_n_slim, debug_bb_slim, print_value_slim): New prototypes.\n \t(debug_rtl_slim, debug_insn_slim): Ditto.\n \t* sdbout.c (sdbout_symbol): Pass new argument to alter_subreg.\n \t* sched-vis.c (print_value_slim): New.\n@@ -668,7 +658,7 @@\n \t(default_different_addr_displacement_p): Ditto.\n \t* timevar.def (TV_LRA, TV_LRA_ELIMINATE, TV_LRA_INHERITANCE): New.\n \t(TV_LRA_CREATE_LIVE_RANGES, TV_LRA_ASSIGN, TV_LRA_COALESCE): New.\n-\t* config/arm/arm.c (load_multiple_sequence): Pass new argument to\u001bOB\n+\t* config/arm/arm.c (load_multiple_sequence): Pass new argument to\n \talter_subreg.\n \t(store_multiple_sequence): Ditto.\n \t* config/i386/i386.h (enum ix86_tune_indices): Add\n@@ -680,8 +670,7 @@\n \t(ix86_secondary_reload): Add NON_Q_REGS, SIREG, DIREG.\n \t(inline_secondary_memory_needed): Change assert.\n \t(ix86_spill_class): New function.\n-\t(TARGET_LRA_P, TARGET_REGISTER_BANK, TARGET_SPILL_CLASS): New\n-\tmacros.\n+\t(TARGET_LRA_P, TARGET_REGISTER_BANK, TARGET_SPILL_CLASS): New macros.\n \t* config/m68k/m68k.c (emit_move_sequence): Pass new argument to\n \talter_subreg.\n \t* config/m32r/m32r.c (gen_split_move_double): Ditto.\n@@ -790,13 +779,14 @@\n 2012-10-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/55008\n-\t* gimple-ssa-strength-reduction.c (find_basis_for_candidate): Don't\n-\tallow a candidate to be a basis for itself under another interpretation.\n+\t* gimple-ssa-strength-reduction.c (find_basis_for_candidate):\n+\tDon't allow a candidate to be a basis for itself under another\n+\tinterpretation.\n \n 2012-10-22  Sharad Singhai  <singhai@google.com>\n \n \t* dumpfile.c (dump_phase_enabled_p): Renamed dump_enabled_p. Update\n-        all callers.\n+\tall callers.\n \t(dump_enabled_p): A new function to check if any of the dump files\n \tis available.\n \t(dump_kind_p): Remove check for current_function_decl. Add check for"}, {"sha": "46750117ef36d5b33777b6b002ec5b573dde5433", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b116845748f4d422c0f3e53109917a152dc9623/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b116845748f4d422c0f3e53109917a152dc9623/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b116845748f4d422c0f3e53109917a152dc9623", "patch": "@@ -309,8 +309,7 @@\n \tgcc.dg/cpp/cmdlne-dU-17.c, gcc.dg/cpp/cmdlne-dU-18.c,\n \tgcc.dg/cpp/cmdlne-dU-19.c, gcc.dg/cpp/cmdlne-dU-20.c,\n \tgcc.dg/cpp/cmdlne-dU-21.c, gcc.dg/cpp/cmdlne-dU-22.c,\n-\tgcc.dg/cpp/mi5.c, gcc.dg/cpp/multiline.c: Add -nostdinc to\n-\tdg-options.\n+\tgcc.dg/cpp/mi5.c, gcc.dg/cpp/multiline.c: Add -nostdinc to dg-options.\n \n 2012-10-23  Marc Glisse  <marc.glisse@inria.fr>\n \n@@ -383,8 +382,8 @@\n \n 2012-10-19  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n-\t* lib/target-supports.exp (check_effective_target_arm_prefer_ldrd_strd):\n-\tNew procedure.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_prefer_ldrd_strd): New procedure.\n \n 2012-10-19  Richard Guenther  <rguenther@suse.de>\n \n@@ -432,10 +431,8 @@\n \n \t* gcc.target/arm/ftest-armv8a-arm.c: New testcase.\n \t* gcc.target/arm/ftest-armv8a-thumb.c: Likewise.\n-\t* gcc.target/arm/ftest-support-arm.h (feature_matrix): Add\n-\tARMv8-A row.\n-\t* gcc.target/arm/ftest-support-thumb.h (feature_matrix):\n-\tLikewise.\n+\t* gcc.target/arm/ftest-support-arm.h (feature_matrix): Add ARMv8-A row.\n+\t* gcc.target/arm/ftest-support-thumb.h (feature_matrix): Likewise.\n \t* gcc.target/arm/ftest-support.h (architecture): Add ARMv8-A.\n \t* lib/target-supports.exp: Add ARMv8-A architecture expectation.\n \n@@ -637,8 +634,7 @@\n \t* gcc.dg/vect/pr48765.c: Skip for conflicting options, don't\n \tspecify -m64.\n \n-\t* gcc.target/arm/div64-unwinding.c: Skip, don't xfail, for\n-\tGNU/Linux.\n+\t* gcc.target/arm/div64-unwinding.c: Skip, don't xfail, for GNU/Linux.\n \n \t* lib/target-supports.exp (check_effective_target_arm_hard_vfp_ok):\n \tReturn 0 if already specifying -mfloat-abi other than hard."}]}