{"sha": "4143af330f1079ad839fdf495c9b7bc34ac3e849", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0M2FmMzMwZjEwNzlhZDgzOWZkZjQ5NWM5YjdiYzM0YWMzZTg0OQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-07-26T18:12:16Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-07-26T18:12:16Z"}, "message": "cp-tree.h (ncp_convert): Rename to perform_implicit_conversion.\n\n\t* cp-tree.h (ncp_convert): Rename to perform_implicit_conversion.\n\t* call.c: All uses changed.\n\t* typeck.c: Likewise.\n\nFrom-SVN: r28272", "tree": {"sha": "73f88ab8a11ff16dd144b5342ed7b5c1fe187b10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73f88ab8a11ff16dd144b5342ed7b5c1fe187b10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4143af330f1079ad839fdf495c9b7bc34ac3e849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4143af330f1079ad839fdf495c9b7bc34ac3e849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4143af330f1079ad839fdf495c9b7bc34ac3e849", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4143af330f1079ad839fdf495c9b7bc34ac3e849/comments", "author": null, "committer": null, "parents": [{"sha": "8bc6495183d4589a68cae00c343b7f1477baf624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc6495183d4589a68cae00c343b7f1477baf624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc6495183d4589a68cae00c343b7f1477baf624"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "3e836d84ec8e1a2b3b1ab40afaeb8e0b3acae9d2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4143af330f1079ad839fdf495c9b7bc34ac3e849/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4143af330f1079ad839fdf495c9b7bc34ac3e849/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4143af330f1079ad839fdf495c9b7bc34ac3e849", "patch": "@@ -1,3 +1,9 @@\n+1999-07-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (ncp_convert): Rename to perform_implicit_conversion.\n+\t* call.c: All uses changed.\n+\t* typeck.c: Likewise.\n+\n 1999-07-26  Nathan Sidwell  <nathan@acm.org>\n \n \t* exception.cc (__cplus_type_matcher): Match __eh_matcher"}, {"sha": "1d9e83745d45fcb64fa525f46655311214f3c48f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4143af330f1079ad839fdf495c9b7bc34ac3e849/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4143af330f1079ad839fdf495c9b7bc34ac3e849/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4143af330f1079ad839fdf495c9b7bc34ac3e849", "patch": "@@ -2977,8 +2977,8 @@ build_conditional_expr (arg1, arg2, arg3)\n       /* In this case, there is always a common type.  */\n       result_type = type_after_usual_arithmetic_conversions (arg2_type, \n \t\t\t\t\t\t\t     arg3_type);\n-      arg2 = ncp_convert (result_type, arg2);\n-      arg3 = ncp_convert (result_type, arg3);\n+      arg2 = perform_implicit_conversion (result_type, arg2);\n+      arg3 = perform_implicit_conversion (result_type, arg3);\n     }\n   /* [expr.cond]\n \n@@ -3009,8 +3009,8 @@ build_conditional_expr (arg1, arg2, arg3)\n     {\n       result_type = composite_pointer_type (arg2_type, arg3_type, arg2,\n \t\t\t\t\t    arg3, \"conditional expression\");\n-      arg2 = ncp_convert (result_type, arg2);\n-      arg3 = ncp_convert (result_type, arg3);\n+      arg2 = perform_implicit_conversion (result_type, arg2);\n+      arg3 = perform_implicit_conversion (result_type, arg3);\n     }\n \n   if (!result_type)\n@@ -5060,13 +5060,17 @@ tourney (candidates)\n   return champ;\n }\n \n+/* Returns non-zero if things of type FROM can be converted to TO.  */\n+\n int\n can_convert (to, from)\n      tree to, from;\n {\n   return can_convert_arg (to, from, NULL_TREE);\n }\n \n+/* Returns non-zero if ARG (of type FROM) can be converted to TO.  */\n+\n int\n can_convert_arg (to, from, arg)\n      tree to, from, arg;\n@@ -5075,8 +5079,10 @@ can_convert_arg (to, from, arg)\n   return (t && ! ICS_BAD_FLAG (t));\n }\n \n+/* Convert EXPR to TYPE.  Return the converted expression.  */\n+\n tree\n-ncp_convert (type, expr)\n+perform_implicit_conversion (type, expr)\n      tree type;\n      tree expr;\n {"}, {"sha": "3852721ed46191ee9220fd70194382de4fcd0b5d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4143af330f1079ad839fdf495c9b7bc34ac3e849/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4143af330f1079ad839fdf495c9b7bc34ac3e849/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4143af330f1079ad839fdf495c9b7bc34ac3e849", "patch": "@@ -2785,7 +2785,7 @@ extern tree convert_arg_to_ellipsis             PROTO((tree));\n extern int is_properly_derived_from             PROTO((tree, tree));\n extern tree initialize_reference                PROTO((tree, tree));\n extern tree strip_top_quals                     PROTO((tree));\n-extern tree ncp_convert                         PROTO((tree, tree));\n+extern tree perform_implicit_conversion         PROTO((tree, tree));\n \n /* in class.c */\n extern tree build_vbase_path\t\t\tPROTO((enum tree_code, tree, tree, tree, int));"}, {"sha": "506fa9c1217e637eba1521bddfdace0005c222b3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4143af330f1079ad839fdf495c9b7bc34ac3e849/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4143af330f1079ad839fdf495c9b7bc34ac3e849/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4143af330f1079ad839fdf495c9b7bc34ac3e849", "patch": "@@ -6526,7 +6526,7 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n \t\t  errtype);\n       return error_mark_node;\n     }\n-  return ncp_convert (strip_top_quals (type), rhs);\n+  return perform_implicit_conversion (strip_top_quals (type), rhs);\n }\n \n /* Convert RHS to be of type TYPE."}]}