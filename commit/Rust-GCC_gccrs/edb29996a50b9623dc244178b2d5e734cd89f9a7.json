{"sha": "edb29996a50b9623dc244178b2d5e734cd89f9a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRiMjk5OTZhNTBiOTYyM2RjMjQ0MTc4YjJkNWU3MzRjZDg5ZjlhNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-11-10T20:38:15Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-11-10T20:38:15Z"}, "message": "re PR rtl-optimization/33172 (Optimizer fails to elid away unreferenced static function)\n\n\n\tPR tree-optimize/33172\n\tPR tree-optimize/43411\n\t* gcc.dg/tree-ssa/pr33172.c: New testcase.\n\t* g++.dg/tree-ssa/pr43411.C: New testcase.\n\nFrom-SVN: r166557", "tree": {"sha": "64f6222556a8e2a45968b0123ac66c51da1fd078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64f6222556a8e2a45968b0123ac66c51da1fd078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edb29996a50b9623dc244178b2d5e734cd89f9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edb29996a50b9623dc244178b2d5e734cd89f9a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edb29996a50b9623dc244178b2d5e734cd89f9a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edb29996a50b9623dc244178b2d5e734cd89f9a7/comments", "author": null, "committer": null, "parents": [{"sha": "b6173d509c440524e53e9b38ef78f364e169c8f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6173d509c440524e53e9b38ef78f364e169c8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6173d509c440524e53e9b38ef78f364e169c8f6"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "0d711956ced75bc764d1c54833f41a578bcd0324", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb29996a50b9623dc244178b2d5e734cd89f9a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb29996a50b9623dc244178b2d5e734cd89f9a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=edb29996a50b9623dc244178b2d5e734cd89f9a7", "patch": "@@ -1,3 +1,10 @@\n+2010-11-10  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimize/33172\n+\tPR tree-optimize/43411\n+\t* gcc.dg/tree-ssa/pr33172.c: New testcase.\n+\t* g++.dg/tree-ssa/pr43411.C: New testcase.\n+\n 2010-11-10  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimize/46228"}, {"sha": "fcf13587fe4f3d7c15e761ae909a1ac625cab25a", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr43411.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb29996a50b9623dc244178b2d5e734cd89f9a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr43411.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb29996a50b9623dc244178b2d5e734cd89f9a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr43411.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr43411.C?ref=edb29996a50b9623dc244178b2d5e734cd89f9a7", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+class P { public: virtual int val() { return 123; } };\n+class Psub : public P { };\n+\n+extern int sink1, sink2;\n+\n+void test() {\n+    Psub p;\n+    P &pRef = p;\n+    sink1 = p.val();\n+    sink2 = pRef.val();\n+}\n+\n+\n+inline int v(P &p) { return p.val(); }\n+\n+void testInlineP() {\n+    P p;\n+    sink1 = v(p);\n+}\n+\n+void testInlinePsub() {\n+    Psub p;\n+    sink1 = v(p);\n+}\n+\n+// { dg-final { scan-tree-dump-not \"OBJ_TYPE_REF\" \"optimized\" } }\n+// { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "17a40d4a33d659cdc6e6a49722a6977be2ea900b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr33172.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb29996a50b9623dc244178b2d5e734cd89f9a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33172.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb29996a50b9623dc244178b2d5e734cd89f9a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33172.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33172.c?ref=edb29996a50b9623dc244178b2d5e734cd89f9a7", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct abc {\n+    void (*abc_call)(void);\n+};\n+\n+/*\n+ * Use only any one of the three definitions below at a time:\n+ *\n+ * 1. nothing optimized away. Good.\n+ * 2. call_func() _not_ optimized away, but struct xyz is. gcc disappoints.\n+ * 3. both call_func() and struct xyz optimized away. Nice.\n+ */\n+\n+/* 1 */\n+/*extern int do_register(struct abc *xyz);*/\n+\n+/* 2 */\n+static inline int do_register(struct abc *xyz)\n+{\n+    return 0;\n+}\n+\n+/* 3 */\n+/*#define do_register(xyz)    do { (void)(xyz); } while (0)*/\n+\n+static void call_func(void)\n+{\n+}\n+\n+static struct abc xyz = {\n+    .abc_call = call_func,\n+};\n+\n+void func(void)\n+{\n+    do_register(&xyz);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"call_func\" \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}