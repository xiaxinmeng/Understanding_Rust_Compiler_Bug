{"sha": "f5afd9e924c198f8a01a92bb40ff48be87525ab1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhZmQ5ZTkyNGMxOThmOGEwMWE5MmJiNDBmZjQ4YmU4NzUyNWFiMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-07-07T19:55:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-07-07T19:55:29Z"}, "message": "sibcall.c (uses_addressof): Add INMEM argument...\n\n\t* sibcall.c (uses_addressof): Add INMEM argument, check for\n\tcurrent_function_internal_arg_pointer outside of MEM rtxs in addition\n\tto ADDRESSOFs.\n\t(sequence_uses_addressof): Update caller.\n\n\t* gcc.c-torture/execute/20000706-1.c: New test.\n\t* gcc.c-torture/execute/20000706-2.c: New test.\n\t* gcc.c-torture/execute/20000706-3.c: New test.\n\t* gcc.c-torture/execute/20000706-4.c: New test.\n\t* gcc.c-torture/execute/20000706-5.c: New test.\n\nFrom-SVN: r34906", "tree": {"sha": "fdedd15c9880042d1b946a1ccf10f032757ff7b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdedd15c9880042d1b946a1ccf10f032757ff7b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5afd9e924c198f8a01a92bb40ff48be87525ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5afd9e924c198f8a01a92bb40ff48be87525ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5afd9e924c198f8a01a92bb40ff48be87525ab1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5afd9e924c198f8a01a92bb40ff48be87525ab1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09bb5d9a8fe32a154567ecbbab1c65f96ce075ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09bb5d9a8fe32a154567ecbbab1c65f96ce075ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09bb5d9a8fe32a154567ecbbab1c65f96ce075ee"}], "stats": {"total": 188, "additions": 178, "deletions": 10}, "files": [{"sha": "41df73bce62a7ab7490a4597ca4ac760ac984a18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5afd9e924c198f8a01a92bb40ff48be87525ab1", "patch": "@@ -1,3 +1,10 @@\n+2000-07-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* sibcall.c (uses_addressof): Add INMEM argument, check for\n+\tcurrent_function_internal_arg_pointer outside of MEM rtxs in addition\n+\tto ADDRESSOFs.\n+\t(sequence_uses_addressof): Update caller.\n+\n 2000-07-07  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* tradcpp.c (initialize_builtins): Honor NO_BUILTIN_SIZE_TYPE"}, {"sha": "120b6410db21018b7a7d415d172597b66be10fe3", "filename": "gcc/sibcall.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=f5afd9e924c198f8a01a92bb40ff48be87525ab1", "patch": "@@ -37,7 +37,7 @@ static rtx skip_copy_to_return_value\tPARAMS ((rtx, rtx, rtx));\n static rtx skip_use_of_return_value\tPARAMS ((rtx, enum rtx_code));\n static rtx skip_stack_adjustment\tPARAMS ((rtx));\n static rtx skip_jump_insn\t\tPARAMS ((rtx));\n-static int uses_addressof\t\tPARAMS ((rtx));\n+static int uses_addressof\t\tPARAMS ((rtx, int));\n static int sequence_uses_addressof\tPARAMS ((rtx));\n static void purge_reg_equiv_notes\tPARAMS ((void));\n \n@@ -235,12 +235,18 @@ skip_jump_insn (orig_insn)\n   return orig_insn;\n }\n \n-/* Scan the rtx X for an ADDRESSOF expressions.  Return nonzero if an ADDRESSOF\n-   expresion is found, else return zero.  */\n+/* Scan the rtx X for ADDRESSOF expressions or\n+   current_function_internal_arg_pointer registers.\n+   INMEM argument should be 1 if we're looking at inner part of some\n+   MEM expression, otherwise 0.\n+   Return nonzero if an ADDRESSOF expresion is found or if\n+   current_function_internal_arg_pointer is found outside of some MEM\n+   expression, else return zero.  */\n \n static int\n-uses_addressof (x)\n+uses_addressof (x, inmem)\n      rtx x;\n+     int inmem;\n {\n   RTX_CODE code;\n   int i, j;\n@@ -254,28 +260,36 @@ uses_addressof (x)\n   if (code == ADDRESSOF)\n     return 1;\n \n+  if (x == current_function_internal_arg_pointer && ! inmem)\n+    return 1;\n+\n+  if (code == MEM)\n+    return uses_addressof (XEXP (x, 0), 1);\n+\n   /* Scan all subexpressions. */\n   fmt = GET_RTX_FORMAT (code);\n   for (i = 0; i < GET_RTX_LENGTH (code); i++, fmt++)\n     {\n       if (*fmt == 'e')\n \t{\n-\t  if (uses_addressof (XEXP (x, i)))\n+\t  if (uses_addressof (XEXP (x, i), inmem))\n \t    return 1;\n \t}\n       else if (*fmt == 'E')\n \t{\n \t  for (j = 0; j < XVECLEN (x, i); j++)\n-\t    if (uses_addressof (XVECEXP (x, i, j)))\n+\t    if (uses_addressof (XVECEXP (x, i, j), inmem))\n \t      return 1;\n \t}\n     }\n   return 0;\n }\n \n /* Scan the sequence of insns in SEQ to see if any have an ADDRESSOF\n-   rtl expression.  If an ADDRESSOF expression is found, return nonzero,\n-   else return zero.\n+   rtl expression or current_function_internal_arg_pointer occurences\n+   not enclosed within a MEM.  If an ADDRESSOF expression or\n+   current_function_internal_arg_pointer is found, return nonzero, otherwise\n+   return zero.\n \n    This function handles CALL_PLACEHOLDERs which contain multiple sequences\n    of insns.  */\n@@ -304,8 +318,8 @@ sequence_uses_addressof (seq)\n \t\t&& sequence_uses_addressof (XEXP (PATTERN (insn), 2)))\n \t      return 1;\n \t  }\n-\telse if (uses_addressof (PATTERN (insn))\n-\t\t || (REG_NOTES (insn) && uses_addressof (REG_NOTES (insn))))\n+\telse if (uses_addressof (PATTERN (insn), 0)\n+\t\t || (REG_NOTES (insn) && uses_addressof (REG_NOTES (insn), 0)))\n \t  return 1;\n       }\n   return 0;"}, {"sha": "e50a96c720a785ef23004b031ee362b6093910a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5afd9e924c198f8a01a92bb40ff48be87525ab1", "patch": "@@ -1,3 +1,11 @@\n+2000-07-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/20000706-1.c: New test.\n+\t* gcc.c-torture/execute/20000706-2.c: New test.\n+\t* gcc.c-torture/execute/20000706-3.c: New test.\n+\t* gcc.c-torture/execute/20000706-4.c: New test.\n+\t* gcc.c-torture/execute/20000706-5.c: New test.\n+\n 2000-07-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.pt/instantiate7.C: New test."}, {"sha": "e8eb28581ffd66feabe06e351052096f1e7d548a", "filename": "gcc/testsuite/gcc.c-torture/execute/20000706-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-1.c?ref=f5afd9e924c198f8a01a92bb40ff48be87525ab1", "patch": "@@ -0,0 +1,31 @@\n+extern void abort(void);\n+extern void exit(int);\n+\n+struct baz {\n+  int a, b, c, d, e;\n+};\n+\n+void bar(struct baz *x, int f, int g, int h, int i, int j)\n+{\n+  if (x->a != 1 || x->b != 2 || x->c != 3 || x->d != 4 || x->e != 5 ||\n+      f != 6 || g != 7 || h != 8 || i != 9 || j != 10)\n+    abort();\n+}\n+\n+void foo(struct baz x, char **y)\n+{\n+  bar(&x,6,7,8,9,10);\n+}\n+\n+int main()\n+{\n+  struct baz x;\n+\n+  x.a = 1;\n+  x.b = 2;\n+  x.c = 3;\n+  x.d = 4;\n+  x.e = 5;\n+  foo(x,(char **)0);\n+  exit(0);\n+}"}, {"sha": "faf2137111a82abe0a381b98e177aa057298a388", "filename": "gcc/testsuite/gcc.c-torture/execute/20000706-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-2.c?ref=f5afd9e924c198f8a01a92bb40ff48be87525ab1", "patch": "@@ -0,0 +1,31 @@\n+extern void abort(void);\n+extern void exit(int);\n+\n+struct baz {\n+  int a, b, c, d, e;\n+};\n+\n+void bar(struct baz *x, int f, int g, int h, int i, int j)\n+{\n+  if (x->a != 1 || x->b != 2 || x->c != 3 || x->d != 4 || x->e != 5 ||\n+      f != 6 || g != 7 || h != 8 || i != 9 || j != 10)\n+    abort();\n+}\n+\n+void foo(char *z, struct baz x, char *y)\n+{\n+  bar(&x,6,7,8,9,10);\n+}\n+\n+int main()\n+{\n+  struct baz x;\n+\n+  x.a = 1;\n+  x.b = 2;\n+  x.c = 3;\n+  x.d = 4;\n+  x.e = 5;\n+  foo((char *)0,x,(char *)0);\n+  exit(0);\n+}"}, {"sha": "b5758d9abb01ffc77572d042477a85ec6227864b", "filename": "gcc/testsuite/gcc.c-torture/execute/20000706-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-3.c?ref=f5afd9e924c198f8a01a92bb40ff48be87525ab1", "patch": "@@ -0,0 +1,27 @@\n+extern void abort(void);\n+extern void exit(int);\n+\n+int c;\n+\n+void baz(int *p)\n+{\n+  c = *p;\n+}\n+\n+void bar(int b)\n+{\n+  if (c != 1 || b != 2)\n+    abort();\n+}\n+\n+void foo(int a, int b)\n+{\n+  baz(&a);\n+  bar(b);\n+}\n+\n+int main()\n+{\n+  foo(1, 2);\n+  exit(0);\n+}"}, {"sha": "01cc879c34a6606bd632b2a0d35da2fe7fb28aa0", "filename": "gcc/testsuite/gcc.c-torture/execute/20000706-4.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-4.c?ref=f5afd9e924c198f8a01a92bb40ff48be87525ab1", "patch": "@@ -0,0 +1,22 @@\n+extern void abort(void);\n+extern void exit(int);\n+\n+int *c;\n+\n+void bar(int b)\n+{\n+  if (*c != 1 || b != 2)\n+    abort();\n+}\n+\n+void foo(int a, int b)\n+{\n+  c = &a;\n+  bar(b);\n+}\n+\n+int main()\n+{\n+  foo(1, 2);\n+  exit(0);\n+}"}, {"sha": "18756f29ddc3e66382bb41fb400d5a90fff99356", "filename": "gcc/testsuite/gcc.c-torture/execute/20000706-5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5afd9e924c198f8a01a92bb40ff48be87525ab1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000706-5.c?ref=f5afd9e924c198f8a01a92bb40ff48be87525ab1", "patch": "@@ -0,0 +1,28 @@\n+extern void abort(void);\n+extern void exit(int);\n+\n+struct baz { int a, b, c; };\n+\n+struct baz *c;\n+\n+void bar(int b)\n+{\n+  if (c->a != 1 || c->b != 2 || c->c != 3 || b != 4)\n+    abort();\n+}\n+\n+void foo(struct baz a, int b)\n+{\n+  c = &a;\n+  bar(b);\n+}\n+\n+int main()\n+{\n+  struct baz a;\n+  a.a = 1;\n+  a.b = 2;\n+  a.c = 3;\n+  foo(a, 4);\n+  exit(0);\n+}"}]}