{"sha": "bdbe5b8d8d619546938f0db3631f82dc944bc0ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRiZTViOGQ4ZDYxOTU0NjkzOGYwZGIzNjMxZjgyZGM5NDRiYzBlZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-31T00:15:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-31T00:15:19Z"}, "message": "ia64.c (group_barrier_needed_p): Special case prologue_allocate_stack.\n\n        * config/ia64/ia64.c (group_barrier_needed_p): Special case\n        prologue_allocate_stack.\n        (ia64_single_set): Use insn codes for recognition of special\n        cases, not rtl matching.\n        * config/ia64/ia64.md (prologue_allocate_stack): Op 3 is in-out.\n\n\t* gcc.c-torture/compile/20020330-1.c: New.\n\nFrom-SVN: r51615", "tree": {"sha": "d185d6c7d62af9f76c31adac33c3469286614f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d185d6c7d62af9f76c31adac33c3469286614f64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdbe5b8d8d619546938f0db3631f82dc944bc0ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbe5b8d8d619546938f0db3631f82dc944bc0ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdbe5b8d8d619546938f0db3631f82dc944bc0ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbe5b8d8d619546938f0db3631f82dc944bc0ef/comments", "author": null, "committer": null, "parents": [{"sha": "4ab95d826743404ec341f82a89cf40d06adcf0b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ab95d826743404ec341f82a89cf40d06adcf0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ab95d826743404ec341f82a89cf40d06adcf0b9"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "21c516c59ddf86b07c549b40f72712b109b6b4af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbe5b8d8d619546938f0db3631f82dc944bc0ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbe5b8d8d619546938f0db3631f82dc944bc0ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdbe5b8d8d619546938f0db3631f82dc944bc0ef", "patch": "@@ -1,3 +1,12 @@\n+2002-03-30  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/5446\n+\t* config/ia64/ia64.c (group_barrier_needed_p): Special case\n+\tprologue_allocate_stack.\n+\t(ia64_single_set): Use insn codes for recognition of special\n+\tcases, not rtl matching.\n+\t* config/ia64/ia64.md (prologue_allocate_stack): Op 3 is in-out.\n+\n Sat Mar 30 23:48:41 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgbuild.c (find_basic_blocks_1): Clear aux for blocks."}, {"sha": "74cbf813ca40057c94d678cbe2c6e72cc3b2d8ef", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbe5b8d8d619546938f0db3631f82dc944bc0ef/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbe5b8d8d619546938f0db3631f82dc944bc0ef/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=bdbe5b8d8d619546938f0db3631f82dc944bc0ef", "patch": "@@ -4764,6 +4764,7 @@ group_barrier_needed_p (insn)\n \t  /* We play dependency tricks with the epilogue in order\n \t     to get proper schedules.  Undo this for dv analysis.  */\n \tcase CODE_FOR_epilogue_deallocate_stack:\n+\tcase CODE_FOR_prologue_allocate_stack:\n \t  pat = XVECEXP (pat, 0, 0);\n \t  break;\n \n@@ -5235,21 +5236,22 @@ ia64_single_set (insn)\n     x = COND_EXEC_CODE (x);\n   if (GET_CODE (x) == SET)\n     return x;\n-  ret = single_set_2 (insn, x);\n-  if (ret == NULL && GET_CODE (x) == PARALLEL)\n-    {\n-      /* Special case here prologue_allocate_stack and\n-\t epilogue_deallocate_stack.  Although it is not a classical\n-\t single set, the second set is there just to protect it\n-\t from moving past FP-relative stack accesses.  */\n-      if (XVECLEN (x, 0) == 2\n-\t  && GET_CODE (XVECEXP (x, 0, 0)) == SET\n-\t  && GET_CODE (XVECEXP (x, 0, 1)) == SET\n-\t  && GET_CODE (SET_DEST (XVECEXP (x, 0, 1))) == REG\n-\t  && SET_DEST (XVECEXP (x, 0, 1)) == SET_SRC (XVECEXP (x, 0, 1))\n-\t  && ia64_safe_itanium_class (insn) == ITANIUM_CLASS_IALU)\n-\tret = XVECEXP (x, 0, 0);\n+\n+  /* Special case here prologue_allocate_stack and epilogue_deallocate_stack.\n+     Although they are not classical single set, the second set is there just\n+     to protect it from moving past FP-relative stack accesses.  */\n+  switch (recog_memoized (insn))\n+    {\n+    case CODE_FOR_prologue_allocate_stack:\n+    case CODE_FOR_epilogue_deallocate_stack:\n+      ret = XVECEXP (x, 0, 0);\n+      break;\n+\n+    default:\n+      ret = single_set_2 (insn, x);\n+      break;\n     }\n+\n   return ret;\n }\n "}, {"sha": "a7d7dcaab74de9b1e4f68935904bcf55cf38c37a", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbe5b8d8d619546938f0db3631f82dc944bc0ef/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbe5b8d8d619546938f0db3631f82dc944bc0ef/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=bdbe5b8d8d619546938f0db3631f82dc944bc0ef", "patch": "@@ -4848,7 +4848,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"%r,r,a\")\n \t\t (match_operand:DI 2 \"gr_reg_or_22bit_operand\" \"r,I,J\")))\n-   (set (match_operand:DI 3 \"register_operand\" \"=r,r,r\")\n+   (set (match_operand:DI 3 \"register_operand\" \"+r,r,r\")\n \t(match_dup 3))]\n   \"\"\n   \"@"}, {"sha": "cac7099127f2632b328a8c3bceafbccd2d19346d", "filename": "gcc/testsuite/gcc.c-torture/compile/20020330-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbe5b8d8d619546938f0db3631f82dc944bc0ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020330-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbe5b8d8d619546938f0db3631f82dc944bc0ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020330-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020330-1.c?ref=bdbe5b8d8d619546938f0db3631f82dc944bc0ef", "patch": "@@ -0,0 +1,27 @@\n+/* PR 5446 */\n+/* This testcase is similar to gcc.c-torture/compile/20011219-1.c except\n+   with parts of it omitted, causing an ICE with -O3 on IA-64.  */\n+\n+void * baz (unsigned long);\n+static inline double **\n+bar (long w, long x, long y, long z)\n+{\n+  long i, a = x - w + 1, b = z - y + 1;\n+  double **m = (double **) baz (sizeof (double *) * (a + 1));\n+\n+  m += 1;\n+  m -= w;\n+  m[w] = (double *) baz (sizeof (double) * (a * b + 1));\n+  for (i = w + 1; i <= x; i++)\n+    m[i] = m[i - 1] + b;\n+  return m;\n+}\n+\n+void\n+foo (double w[], int x, double y[], double z[])\n+{\n+  int i;\n+  double **a;\n+\n+  a = bar (1, 50, 1, 50);\n+}"}]}