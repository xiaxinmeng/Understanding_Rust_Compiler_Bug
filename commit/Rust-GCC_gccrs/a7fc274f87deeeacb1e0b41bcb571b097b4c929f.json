{"sha": "a7fc274f87deeeacb1e0b41bcb571b097b4c929f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdmYzI3NGY4N2RlZWVhY2IxZTBiNDFiY2I1NzFiMDk3YjRjOTI5Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-18T07:52:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-18T07:52:22Z"}, "message": "tree.c (decl_value_expr_lookup): Revert latest change.\n\n\t* tree.c (decl_value_expr_lookup): Revert latest change.\n\t(decl_value_expr_insert): Likewise.\nfortran/\n\t* trans-decl.c (gfc_get_fake_result_decl): Revert latest change.\n\nFrom-SVN: r261696", "tree": {"sha": "1ff97e1950b442ad666448813af413b19951033b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ff97e1950b442ad666448813af413b19951033b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7fc274f87deeeacb1e0b41bcb571b097b4c929f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7fc274f87deeeacb1e0b41bcb571b097b4c929f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7fc274f87deeeacb1e0b41bcb571b097b4c929f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7fc274f87deeeacb1e0b41bcb571b097b4c929f/comments", "author": null, "committer": null, "parents": [{"sha": "3b4f040822af5b7dd6a03573f53f51a89a57b578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4f040822af5b7dd6a03573f53f51a89a57b578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b4f040822af5b7dd6a03573f53f51a89a57b578"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "13e5c1047c422a9afcebe490503c161264ca366a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7fc274f87deeeacb1e0b41bcb571b097b4c929f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7fc274f87deeeacb1e0b41bcb571b097b4c929f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7fc274f87deeeacb1e0b41bcb571b097b4c929f", "patch": "@@ -1,3 +1,8 @@\n+2018-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.c (decl_value_expr_lookup): Revert latest change.\n+\t(decl_value_expr_insert): Likewise.\n+\n 2018-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimplify.c (nonlocal_vlas): Delete."}, {"sha": "0ea7a51fb40c6af2efc4f4b8b8ff1d5fc8ea3b36", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7fc274f87deeeacb1e0b41bcb571b097b4c929f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7fc274f87deeeacb1e0b41bcb571b097b4c929f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a7fc274f87deeeacb1e0b41bcb571b097b4c929f", "patch": "@@ -1,3 +1,7 @@\n+2018-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* trans-decl.c (gfc_get_fake_result_decl): Revert latest change.\n+\n 2018-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* trans-decl.c (nonlocal_dummy_decl_pset): Delete."}, {"sha": "254768c5828838f526a4d3926037d1d4e34a435d", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7fc274f87deeeacb1e0b41bcb571b097b4c929f/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7fc274f87deeeacb1e0b41bcb571b097b4c929f/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=a7fc274f87deeeacb1e0b41bcb571b097b4c929f", "patch": "@@ -2908,32 +2908,34 @@ gfc_get_fake_result_decl (gfc_symbol * sym, int parent_flag)\n       && sym->ns->proc_name->attr.entry_master\n       && sym != sym->ns->proc_name)\n     {\n-      tree t = NULL, var, field;\n+      tree t = NULL, var;\n       if (this_fake_result_decl != NULL)\n \tfor (t = TREE_CHAIN (this_fake_result_decl); t; t = TREE_CHAIN (t))\n \t  if (strcmp (IDENTIFIER_POINTER (TREE_PURPOSE (t)), sym->name) == 0)\n \t    break;\n       if (t)\n \treturn TREE_VALUE (t);\n-\n       decl = gfc_get_fake_result_decl (sym->ns->proc_name, parent_flag);\n \n       if (parent_flag)\n \tthis_fake_result_decl = parent_fake_result_decl;\n       else\n \tthis_fake_result_decl = current_fake_result_decl;\n \n-      if (!sym->ns->proc_name->attr.mixed_entry_master)\n-\treturn decl;\n+      if (decl && sym->ns->proc_name->attr.mixed_entry_master)\n+\t{\n+\t  tree field;\n \n-      for (field = TYPE_FIELDS (TREE_TYPE (decl));\n-\t   field; field = DECL_CHAIN (field))\n-\tif (strcmp (IDENTIFIER_POINTER (DECL_NAME (field)), sym->name) == 0)\n-\t  break;\n+\t  for (field = TYPE_FIELDS (TREE_TYPE (decl));\n+\t       field; field = DECL_CHAIN (field))\n+\t    if (strcmp (IDENTIFIER_POINTER (DECL_NAME (field)),\n+\t\tsym->name) == 0)\n+\t      break;\n \n-      gcc_assert (field != NULL_TREE);\n-      decl = fold_build3_loc (input_location, COMPONENT_REF,\n-\t\t\t      TREE_TYPE (field), decl, field, NULL_TREE);\n+\t  gcc_assert (field != NULL_TREE);\n+\t  decl = fold_build3_loc (input_location, COMPONENT_REF,\n+\t\t\t\t  TREE_TYPE (field), decl, field, NULL_TREE);\n+\t}\n \n       var = create_tmp_var_raw (TREE_TYPE (decl), sym->name);\n       if (parent_flag)"}, {"sha": "2d3b26ed66b29df68bab3835b4a7dea8a3116ebf", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7fc274f87deeeacb1e0b41bcb571b097b4c929f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7fc274f87deeeacb1e0b41bcb571b097b4c929f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a7fc274f87deeeacb1e0b41bcb571b097b4c929f", "patch": "@@ -6337,15 +6337,7 @@ decl_value_expr_lookup (tree from)\n \n   h = value_expr_for_decl->find_with_hash (&in, DECL_UID (from));\n   if (h)\n-    {\n-      /* Chains of value expressions may run afoul of garbage collection.  */\n-      gcc_checking_assert (!(h->to\n-\t\t\t     && (TREE_CODE (h->to) == PARM_DECL\n-\t\t\t\t || TREE_CODE (h->to) == VAR_DECL)\n-\t\t\t     && DECL_HAS_VALUE_EXPR_P (h->to)));\n-      return h->to;\n-    }\n-\n+    return h->to;\n   return NULL_TREE;\n }\n \n@@ -6356,12 +6348,6 @@ decl_value_expr_insert (tree from, tree to)\n {\n   struct tree_decl_map *h;\n \n-  /* Chains of value expressions may run afoul of garbage collection.  */\n-  gcc_checking_assert (!(to\n-\t\t\t && (TREE_CODE (to) == PARM_DECL\n-\t\t\t     || TREE_CODE (to) == VAR_DECL)\n-\t\t\t && DECL_HAS_VALUE_EXPR_P (to)));\n-\n   h = ggc_alloc<tree_decl_map> ();\n   h->base.from = from;\n   h->to = to;"}]}