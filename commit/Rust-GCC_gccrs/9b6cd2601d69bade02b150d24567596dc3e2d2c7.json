{"sha": "9b6cd2601d69bade02b150d24567596dc3e2d2c7", "node_id": "C_kwDOANBUbNoAKDliNmNkMjYwMWQ2OWJhZGUwMmIxNTBkMjQ1Njc1OTZkYzNlMmQyYzc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-11-30T08:27:23Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-05T13:52:09Z"}, "message": "rename variable which holds bootstrap flag", "tree": {"sha": "bfd5d4b39d09db7b361eb0aa5ac6f7bca95a99a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfd5d4b39d09db7b361eb0aa5ac6f7bca95a99a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b6cd2601d69bade02b150d24567596dc3e2d2c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6cd2601d69bade02b150d24567596dc3e2d2c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b6cd2601d69bade02b150d24567596dc3e2d2c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6cd2601d69bade02b150d24567596dc3e2d2c7/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef9788471008be413a9c545a9500f6287af32ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9788471008be413a9c545a9500f6287af32ad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef9788471008be413a9c545a9500f6287af32ad1"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "f2234e3c6c1781b9bc6f46f7b34e92050285df2e", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6cd2601d69bade02b150d24567596dc3e2d2c7/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6cd2601d69bade02b150d24567596dc3e2d2c7/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=9b6cd2601d69bade02b150d24567596dc3e2d2c7", "patch": "@@ -51,9 +51,9 @@ GCCRS_D_OBJS = \\\n \n RUST_CXXFLAGS = $(CXXFLAGS)\n \n-# If the file exists, we're bootstrapping\n+# If the file exists, we're bootstrapping. Set a specific flag for the session manager.\n ifneq ($(wildcard ../stage_current)),)\n-RUST_CXXFLAGS += -DRUST_RELEASE\n+SESSION_FLAGS = -DRUST_BOOTSTRAP_BUILD\n endif\n \n gccrs$(exeext): $(GCCRS_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)\n@@ -173,7 +173,7 @@ rust_OBJS = $(RUST_ALL_OBJS) rust/rustspec.o\n \n # The compiler itself is called rust1 (formerly grs1)\n rust1$(exeext): $(RUST_ALL_OBJS) attribs.o $(BACKEND) $(LIBDEPS)\n-\t+$(LLINKER) $(RUST_CXXFLAGS) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n+\t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t      $(RUST_ALL_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n \n # Build hooks.\n@@ -336,7 +336,7 @@ RUST_INCLUDES = -I $(srcdir)/rust \\\n CFLAGS-rust/rust-lang.o += $(RUST_INCLUDES)\n CFLAGS-rust/rust-lex.o += $(RUST_INCLUDES)\n CFLAGS-rust/rust-parse.o += $(RUST_INCLUDES)\n-CFLAGS-rust/rust-session-manager.o += $(RUST_INCLUDES) $(RUST_CXXFLAGS)\n+CFLAGS-rust/rust-session-manager.o += $(RUST_INCLUDES) $(SESSION_FLAGS)\n \n # build all rust/lex files in rust folder, add cross-folder includes\n rust/%.o: rust/lex/%.cc"}, {"sha": "78dc3a01ccb209cc817dca87a92628d0e8fdf211", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6cd2601d69bade02b150d24567596dc3e2d2c7/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6cd2601d69bade02b150d24567596dc3e2d2c7/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=9b6cd2601d69bade02b150d24567596dc3e2d2c7", "patch": "@@ -427,7 +427,8 @@ Session::handle_crate_name (const AST::Crate &parsed_crate)\n void\n Session::compile_crate (const char *filename)\n {\n-#ifdef RUST_RELEASE\n+#ifdef RUST_BOOTSTRAP_BUILD\n+  // Do not emit the fatal error or require the flag for dev builds\n   if (!flag_rust_experimental)\n     rust_fatal_error (\n       Location (), \"%s\","}]}