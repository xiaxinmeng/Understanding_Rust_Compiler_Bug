{"sha": "b5764229c1ea7ef49d480eca3c13ee460da45a56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU3NjQyMjljMWVhN2VmNDlkNDgwZWNhM2MxM2VlNDYwZGE0NWE1Ng==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2018-09-02T15:18:30Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-09-02T15:18:30Z"}, "message": "c-common.c (braced_list_to_string): Remove eval parameter.\n\n\t* c-common.c (braced_list_to_string): Remove eval parameter.\n\tAdd some more checks.  Always create zero-terminated STRING_CST.\n\t* c-common.h (braced_list_to_string): Adjust prototype.\n\n\t* c-decl.c (finish_decl): Call braced_list_to_string here ...\n\t* c-parser.c (c_parser_declaration_or_fndef): ... instead of here.\n\n\t* decl.c (eval_check_narrowing): Remove.\n\t(check_initializer): Move call to braced_list_to_string from here ...\n\t* typeck2.c (store_init_value): ... to here.\n\t(digest_init_r): Remove handing of signed/unsigned char strings.\n\n\t* c-c++-common/array-init.c: New test.\n\t* g++.dg/init/string2.C: Remove xfail.\n\nFrom-SVN: r264042", "tree": {"sha": "c7acad98ebfa1677eaab8a2c4024707a021dc363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7acad98ebfa1677eaab8a2c4024707a021dc363"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5764229c1ea7ef49d480eca3c13ee460da45a56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5764229c1ea7ef49d480eca3c13ee460da45a56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5764229c1ea7ef49d480eca3c13ee460da45a56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5764229c1ea7ef49d480eca3c13ee460da45a56/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b101633fa6b8d7f47943857587c6f83c277482f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b101633fa6b8d7f47943857587c6f83c277482f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b101633fa6b8d7f47943857587c6f83c277482f7"}], "stats": {"total": 158, "additions": 72, "deletions": 86}, "files": [{"sha": "4129f244cd54d60f2b6b73ea177f70e4ba5913b3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -1,3 +1,9 @@\n+2018-09-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-common.c (braced_list_to_string): Remove eval parameter.\n+\tAdd some more checks.  Always create zero-terminated STRING_CST.\n+\t* c-common.h (braced_list_to_string): Adjust prototype.\n+\n 2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR 87091"}, {"sha": "13ed65cb0127a1479849f6b3eae9621c7c6f7f0f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 30, "deletions": 37, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -8542,39 +8542,28 @@ maybe_add_include_fixit (rich_location *richloc, const char *header,\n }\n \n /* Attempt to convert a braced array initializer list CTOR for array\n-   TYPE into a STRING_CST for convenience and efficiency.  When non-null,\n-   use EVAL to attempt to evalue constants (used by C++).  Return\n-   the converted string on success or null on failure.  */\n+   TYPE into a STRING_CST for convenience and efficiency.  Return\n+   the converted string on success or the original ctor on failure.  */\n \n tree\n-braced_list_to_string (tree type, tree ctor, tree (*eval)(tree, tree))\n+braced_list_to_string (tree type, tree ctor)\n {\n-  unsigned HOST_WIDE_INT nelts = CONSTRUCTOR_NELTS (ctor);\n+  if (!tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n+    return ctor;\n \n   /* If the array has an explicit bound, use it to constrain the size\n      of the string.  If it doesn't, be sure to create a string that's\n      as long as implied by the index of the last zero specified via\n      a designator, as in:\n        const char a[] = { [7] = 0 };  */\n-  unsigned HOST_WIDE_INT maxelts = HOST_WIDE_INT_M1U;\n-  if (tree size = TYPE_SIZE_UNIT (type))\n-    {\n-      if (tree_fits_uhwi_p (size))\n-\t{\n-\t  maxelts = tree_to_uhwi (size);\n-\t  maxelts /= tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (type)));\n+  unsigned HOST_WIDE_INT maxelts = tree_to_uhwi (TYPE_SIZE_UNIT (type));\n+  maxelts /= tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (type)));\n \n-\t  /* Avoid converting initializers for zero-length arrays.  */\n-\t  if (!maxelts)\n-\t    return NULL_TREE;\n-\t}\n-    }\n-  else if (!nelts)\n-    /* Avoid handling the undefined/erroneous case of an empty\n-       initializer for an arrays with unspecified bound.  */\n-    return NULL_TREE;\n+  /* Avoid converting initializers for zero-length arrays.  */\n+  if (!maxelts)\n+    return ctor;\n \n-  tree eltype = TREE_TYPE (type);\n+  unsigned HOST_WIDE_INT nelts = CONSTRUCTOR_NELTS (ctor);\n \n   auto_vec<char> str;\n   str.reserve (nelts + 1);\n@@ -8584,50 +8573,54 @@ braced_list_to_string (tree type, tree ctor, tree (*eval)(tree, tree))\n \n   FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), i, index, value)\n     {\n-      unsigned HOST_WIDE_INT idx = index ? tree_to_uhwi (index) : i;\n+      unsigned HOST_WIDE_INT idx = i;\n+      if (index)\n+\t{\n+\t  if (!tree_fits_uhwi_p (index))\n+\t    return ctor;\n+\t  idx = tree_to_uhwi (index);\n+\t}\n \n       /* auto_vec is limited to UINT_MAX elements.  */\n       if (idx > UINT_MAX)\n-\treturn NULL_TREE;\n+\treturn ctor;\n \n-      /* Attempt to evaluate constants.  */\n-      if (eval)\n-\tvalue = eval (eltype, value);\n-\n-      /* Avoid non-constant initializers.  */\n+     /* Avoid non-constant initializers.  */\n      if (!tree_fits_shwi_p (value))\n-\treturn NULL_TREE;\n+\treturn ctor;\n \n       /* Skip over embedded nuls except the last one (initializer\n \t elements are in ascending order of indices).  */\n       HOST_WIDE_INT val = tree_to_shwi (value);\n       if (!val && i + 1 < nelts)\n \tcontinue;\n \n+      if (idx < str.length())\n+\treturn ctor;\n+\n       /* Bail if the CTOR has a block of more than 256 embedded nuls\n \t due to implicitly initialized elements.  */\n       unsigned nchars = (idx - str.length ()) + 1;\n       if (nchars > 256)\n-\treturn NULL_TREE;\n+\treturn ctor;\n \n       if (nchars > 1)\n \t{\n \t  str.reserve (idx);\n \t  str.quick_grow_cleared (idx);\n \t}\n \n-      if (idx > maxelts)\n-\treturn NULL_TREE;\n+      if (idx >= maxelts)\n+\treturn ctor;\n \n       str.safe_insert (idx, val);\n     }\n \n-  if (!nelts)\n-    /* Append a nul for the empty initializer { }.  */\n+  /* Append a nul string termination.  */\n+  if (str.length () < maxelts)\n     str.safe_push (0);\n \n-  /* Build a STRING_CST with the same type as the array, which\n-     may be an array of unknown bound.  */\n+  /* Build a STRING_CST with the same type as the array.  */\n   tree res = build_string (str.length (), str.begin ());\n   TREE_TYPE (res) = type;\n   return res;"}, {"sha": "cc168e22c6bed1697cd350a6a9856b5df918c4b2", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -1331,7 +1331,7 @@ extern void maybe_add_include_fixit (rich_location *, const char *, bool);\n extern void maybe_suggest_missing_token_insertion (rich_location *richloc,\n \t\t\t\t\t\t   enum cpp_ttype token_type,\n \t\t\t\t\t\t   location_t prev_token_loc);\n-extern tree braced_list_to_string (tree, tree, tree (*)(tree, tree) = NULL);\n+extern tree braced_list_to_string (tree, tree);\n \n #if CHECKING_P\n namespace selftest {"}, {"sha": "5c18f6307f80e0e37a17e856a1d4e7d6c9e4d902", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -1,3 +1,8 @@\n+2018-09-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-decl.c (finish_decl): Call braced_list_to_string here ...\n+\t* c-parser.c (c_parser_declaration_or_fndef): ... instead of here.\n+\n 2018-08-30  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* gimple-parser.c (c_parser_gimple_binary_expression): Accept infix"}, {"sha": "fd08d72b11f484c246bfdbbd42d4ee31298c74b0", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -5031,6 +5031,12 @@ finish_decl (tree decl, location_t init_loc, tree init,\n       relayout_decl (decl);\n     }\n \n+  if (TREE_CODE (type) == ARRAY_TYPE\n+      && TYPE_STRING_FLAG (TREE_TYPE (type))\n+      && DECL_INITIAL (decl)\n+      && TREE_CODE (DECL_INITIAL (decl)) == CONSTRUCTOR)\n+    DECL_INITIAL (decl) = braced_list_to_string (type, DECL_INITIAL (decl));\n+\n   if (VAR_P (decl))\n     {\n       if (init && TREE_CODE (init) == CONSTRUCTOR)"}, {"sha": "69ed5ae9d2fffd3323b1022dd2aa5bca54714b39", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -2127,15 +2127,6 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t      if (d != error_mark_node)\n \t\t{\n \t\t  maybe_warn_string_init (init_loc, TREE_TYPE (d), init);\n-\n-\t\t  /* Try to convert a string CONSTRUCTOR into a STRING_CST.  */\n-\t\t  tree valtype = TREE_TYPE (init.value);\n-\t\t  if (TREE_CODE (init.value) == CONSTRUCTOR\n-\t\t      && TREE_CODE (valtype) == ARRAY_TYPE\n-\t\t      && TYPE_STRING_FLAG (TREE_TYPE (valtype)))\n-\t\t    if (tree str = braced_list_to_string (valtype, init.value))\n-\t\t      init.value = str;\n-\n \t\t  finish_decl (d, init_loc, init.value,\n \t\t\t       init.original_type, asm_name);\n \t\t}"}, {"sha": "cec14d5d53f93144fdfe63c14b7edafc631e2728", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -1,3 +1,10 @@\n+2018-09-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* decl.c (eval_check_narrowing): Remove.\n+\t(check_initializer): Move call to braced_list_to_string from here ...\n+\t* typeck2.c (store_init_value): ... to here.\n+\t(digest_init_r): Remove handing of signed/unsigned char strings.\n+\n 2018-08-31  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/87155"}, {"sha": "5962c19fbe4be374cf6cf05b2a0898100bed5bcc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -6283,30 +6283,6 @@ build_aggr_init_full_exprs (tree decl, tree init, int flags)\n   return build_aggr_init (decl, init, flags, tf_warning_or_error);\n }\n \n-/* Attempt to determine the constant VALUE of integral type and convert\n-   it to TYPE, issuing narrowing warnings/errors as necessary.  Return\n-   the constant result or null on failure.  Callback for\n-   braced_list_to_string.  */\n-\n-static tree\n-eval_check_narrowing (tree type, tree value)\n-{\n-  if (tree valtype = TREE_TYPE (value))\n-    {\n-      if (TREE_CODE (valtype) != INTEGER_TYPE)\n-\treturn NULL_TREE;\n-    }\n-  else\n-    return NULL_TREE;\n-\n-  value = scalar_constant_value (value);\n-  if (!value)\n-    return NULL_TREE;\n-\n-  check_narrowing (type, value, tf_warning_or_error);\n-  return value;\n-}\n-\n /* Verify INIT (the initializer for DECL), and record the\n    initialization in DECL_INITIAL, if appropriate.  CLEANUP is as for\n    grok_reference_init.\n@@ -6422,17 +6398,7 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t    }\n \t  else\n \t    {\n-\t      /* Try to convert a string CONSTRUCTOR into a STRING_CST.  */\n-\t      tree valtype = TREE_TYPE (decl);\n-\t      if (TREE_CODE (valtype) == ARRAY_TYPE\n-\t\t  && TYPE_STRING_FLAG (TREE_TYPE (valtype))\n-\t\t  && BRACE_ENCLOSED_INITIALIZER_P (init))\n-\t\tif (tree str = braced_list_to_string (valtype, init,\n-\t\t\t\t\t\t      eval_check_narrowing))\n-\t\t  init = str;\n-\n-\t      if (TREE_CODE (init) != STRING_CST)\n-\t\tinit = reshape_init (type, init, tf_warning_or_error);\n+\t      init = reshape_init (type, init, tf_warning_or_error);\n \t      flags |= LOOKUP_NO_NARROWING;\n \t    }\n \t}"}, {"sha": "7cd0a7ef4b48035cd737cd7439e7945514e4d8e4", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -807,6 +807,11 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n     /* Digest the specified initializer into an expression.  */\n     value = digest_init_flags (type, init, flags, tf_warning_or_error);\n \n+  if (TREE_CODE (type) == ARRAY_TYPE\n+      && TYPE_STRING_FLAG (TREE_TYPE (type))\n+      && TREE_CODE (value) == CONSTRUCTOR)\n+    value = braced_list_to_string (type, value);\n+\n   value = extend_ref_init_temps (decl, value, cleanups);\n \n   /* In C++11 constant expression is a semantic, not syntactic, property.\n@@ -1058,9 +1063,7 @@ digest_init_r (tree type, tree init, int nested, int flags,\n \n \t  if (TYPE_PRECISION (typ1) == BITS_PER_UNIT)\n \t    {\n-\t      if (char_type != char_type_node\n-\t\t  && char_type != signed_char_type_node\n-\t\t  && char_type != unsigned_char_type_node)\n+\t      if (char_type != char_type_node)\n \t\t{\n \t\t  if (complain & tf_error)\n \t\t    error_at (loc, \"char-array initialized from wide string\");"}, {"sha": "c192dcc3611943d9102d359d7ab50e2eb775ed39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -1,3 +1,8 @@\n+2018-09-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-c++-common/array-init.c: New test.\n+\t* g++.dg/init/string2.C: Remove selector.\n+\n 2018-09-01  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/87074"}, {"sha": "0624e70898713eab32b0d0b97aa11e996083f91a", "filename": "gcc/testsuite/c-c++-common/array-init.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Farray-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Farray-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Farray-init.c?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-prune-output \"sorry, unimplemented: non-trivial designated initializers not supported\" } */\n+\n+char x[] = { [-1] = 1, 2, 3 }; /* { dg-error \"array index in initializer exceeds array bounds\" \"\" { target c } } */"}, {"sha": "19ae6b4ef1ced986d4c61e23d52efd96687e74a1", "filename": "gcc/testsuite/g++.dg/init/string2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5764229c1ea7ef49d480eca3c13ee460da45a56/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring2.C?ref=b5764229c1ea7ef49d480eca3c13ee460da45a56", "patch": "@@ -54,7 +54,7 @@ template <class T>\n int tmplen ()\n {\n   static const T\n-    a[] = { 1, 2, 333, 0 };         // { dg-warning \"\\\\\\[\\(-Wnarrowing|-Woverflow\\)\" \"\" { target { ! c++98_only } } }\n+    a[] = { 1, 2, 333, 0 };         // { dg-warning \"\\\\\\[\\(-Wnarrowing|-Woverflow\\)\" }\n   return __builtin_strlen (a);\n }\n "}]}