{"sha": "e04c614e09867345ee8ac03390cc75c5f2f1de1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA0YzYxNGUwOTg2NzM0NWVlOGFjMDMzOTBjYzc1YzVmMmYxZGUxZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-04-08T03:44:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-04-08T03:44:48Z"}, "message": "re PR c++/34691 (Default argument checking not performed after overload resolution with C linkage)\n\n\tPR c++/34691\n\t* name-lookup.c\t(merge_functions): Keep multiple extern \"C\" functions.\n\t* call.c (joust): Complain about mismatched default arguments\n\tin extern \"C\" functions.\n\t* class.c (resolve_address_of_overloaded_function): Handle multiple\n\textern \"C\" functions.\n\t* pt.c (resolve_overloaded_unification): Likewise.\n\nFrom-SVN: r145709", "tree": {"sha": "4b4b914d985e7a40bf89923f3bc3cb2b64094be0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b4b914d985e7a40bf89923f3bc3cb2b64094be0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e04c614e09867345ee8ac03390cc75c5f2f1de1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e04c614e09867345ee8ac03390cc75c5f2f1de1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e04c614e09867345ee8ac03390cc75c5f2f1de1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e04c614e09867345ee8ac03390cc75c5f2f1de1e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee618c17faa664adb1b84395199cd62de3b91185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee618c17faa664adb1b84395199cd62de3b91185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee618c17faa664adb1b84395199cd62de3b91185"}], "stats": {"total": 142, "additions": 117, "deletions": 25}, "files": [{"sha": "264fea46725656d8ac1828d08098daefa7281b5c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e04c614e09867345ee8ac03390cc75c5f2f1de1e", "patch": "@@ -1,3 +1,13 @@\n+2009-04-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/34691\n+\t* name-lookup.c\t(merge_functions): Keep multiple extern \"C\" functions.\n+\t* call.c (joust): Complain about mismatched default arguments\n+\tin extern \"C\" functions.\n+\t* class.c (resolve_address_of_overloaded_function): Handle multiple\n+\textern \"C\" functions.\n+\t* pt.c (resolve_overloaded_unification): Likewise.\n+\n 2009-04-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/25185"}, {"sha": "c942712cbec7db8d46d6b3c2611d4cb3953dbf3a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e04c614e09867345ee8ac03390cc75c5f2f1de1e", "patch": "@@ -6787,11 +6787,53 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn)\n \t}\n     }\n \n-  /* If the two functions are the same (this can happen with declarations\n-     in multiple scopes and arg-dependent lookup), arbitrarily choose one.  */\n+  /* If the two function declarations represent the same function (this can\n+     happen with declarations in multiple scopes and arg-dependent lookup),\n+     arbitrarily choose one.  But first make sure the default args we're\n+     using match.  */\n   if (DECL_P (cand1->fn) && DECL_P (cand2->fn)\n       && equal_functions (cand1->fn, cand2->fn))\n-    return 1;\n+    {\n+      tree parms1 = TYPE_ARG_TYPES (TREE_TYPE (cand1->fn));\n+      tree parms2 = TYPE_ARG_TYPES (TREE_TYPE (cand2->fn));\n+\n+      gcc_assert (!DECL_CONSTRUCTOR_P (cand1->fn));\n+\n+      for (i = 0; i < len; ++i)\n+\t{\n+\t  parms1 = TREE_CHAIN (parms1);\n+\t  parms2 = TREE_CHAIN (parms2);\n+\t}\n+\n+      if (off1)\n+\tparms1 = TREE_CHAIN (parms1);\n+      else if (off2)\n+\tparms2 = TREE_CHAIN (parms2);\n+\n+      for (; parms1; ++i)\n+\t{\n+\t  if (!cp_tree_equal (TREE_PURPOSE (parms1),\n+\t\t\t      TREE_PURPOSE (parms2)))\n+\t    {\n+\t      if (warn)\n+\t\t{\n+\t\t  permerror (input_location, \"default argument mismatch in \"\n+\t\t\t     \"overload resolution\");\n+\t\t  inform (input_location,\n+\t\t\t  \" candidate 1: %q+#F\", cand1->fn);\n+\t\t  inform (input_location,\n+\t\t\t  \" candidate 2: %q+#F\", cand2->fn);\n+\t\t}\n+\t      else\n+\t\tadd_warning (cand1, cand2);\n+\t      break;\n+\t    }\n+\t  parms1 = TREE_CHAIN (parms1);\n+\t  parms2 = TREE_CHAIN (parms2);\n+\t}\n+\n+      return 1;\n+    }\n \n tweak:\n "}, {"sha": "1a96384bf409cf5b323c740229af467e2459997f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e04c614e09867345ee8ac03390cc75c5f2f1de1e", "patch": "@@ -6164,25 +6164,33 @@ resolve_address_of_overloaded_function (tree target_type,\n     }\n   else if (TREE_CHAIN (matches))\n     {\n-      /* There were too many matches.  */\n+      /* There were too many matches.  First check if they're all\n+\t the same function.  */\n+      tree match;\n \n-      if (flags & tf_error)\n+      fn = TREE_PURPOSE (matches);\n+      for (match = TREE_CHAIN (matches); match; match = TREE_CHAIN (match))\n+\tif (!decls_match (fn, TREE_PURPOSE (matches)))\n+\t  break;\n+\n+      if (match)\n \t{\n-\t  tree match;\n+\t  if (flags & tf_error)\n+\t    {\n+\t      error (\"converting overloaded function %qD to type %q#T is ambiguous\",\n+\t\t     DECL_NAME (OVL_FUNCTION (overload)),\n+\t\t     target_type);\n \n-\t  error (\"converting overloaded function %qD to type %q#T is ambiguous\",\n-\t\t    DECL_NAME (OVL_FUNCTION (overload)),\n-\t\t    target_type);\n+\t      /* Since print_candidates expects the functions in the\n+\t\t TREE_VALUE slot, we flip them here.  */\n+\t      for (match = matches; match; match = TREE_CHAIN (match))\n+\t\tTREE_VALUE (match) = TREE_PURPOSE (match);\n \n-\t  /* Since print_candidates expects the functions in the\n-\t     TREE_VALUE slot, we flip them here.  */\n-\t  for (match = matches; match; match = TREE_CHAIN (match))\n-\t    TREE_VALUE (match) = TREE_PURPOSE (match);\n+\t      print_candidates (matches);\n+\t    }\n \n-\t  print_candidates (matches);\n+\t  return error_mark_node;\n \t}\n-\n-      return error_mark_node;\n     }\n \n   /* Good, exactly one match.  Now, convert it to the correct type.  */"}, {"sha": "2eebb79f278ee841106ee0ae9b509fcee306b5b6", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=e04c614e09867345ee8ac03390cc75c5f2f1de1e", "patch": "@@ -3607,10 +3607,9 @@ merge_functions (tree s1, tree s2)\n \t  /* If the function from S2 is already in S1, there is no\n \t     need to add it again.  For `extern \"C\"' functions, we\n \t     might have two FUNCTION_DECLs for the same function, in\n-\t     different namespaces; again, we only need one of them.  */\n-\t  if (fn1 == fn2\n-\t      || (DECL_EXTERN_C_P (fn1) && DECL_EXTERN_C_P (fn2)\n-\t\t  && DECL_NAME (fn1) == DECL_NAME (fn2)))\n+\t     different namespaces, but let's leave them in in case\n+\t     they have different default arguments.  */\n+\t  if (fn1 == fn2)\n \t    break;\n \t}\n "}, {"sha": "8dd35795a125f28cf19290a7cacce028effde097", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e04c614e09867345ee8ac03390cc75c5f2f1de1e", "patch": "@@ -12679,6 +12679,7 @@ resolve_overloaded_unification (tree tparms,\n {\n   tree tempargs = copy_node (targs);\n   int good = 0;\n+  tree goodfn = NULL_TREE;\n   bool addr_p;\n \n   if (TREE_CODE (arg) == ADDR_EXPR)\n@@ -12724,8 +12725,13 @@ resolve_overloaded_unification (tree tparms,\n \t  if (subargs)\n \t    {\n \t      elem = tsubst (TREE_TYPE (fn), subargs, tf_none, NULL_TREE);\n-\t      good += try_one_overload (tparms, targs, tempargs, parm,\n-\t\t\t\t\telem, strict, sub_strict, addr_p);\n+\t      if (try_one_overload (tparms, targs, tempargs, parm,\n+\t\t\t\t    elem, strict, sub_strict, addr_p)\n+\t\t  && (!goodfn || !decls_match (goodfn, elem)))\n+\t\t{\n+\t\t  goodfn = elem;\n+\t\t  ++good;\n+\t\t}\n \t    }\n \t  --processing_template_decl;\n \t}\n@@ -12738,9 +12744,14 @@ resolve_overloaded_unification (tree tparms,\n     return false;\n   else\n     for (; arg; arg = OVL_NEXT (arg))\n-      good += try_one_overload (tparms, targs, tempargs, parm,\n-\t\t\t\tTREE_TYPE (OVL_CURRENT (arg)),\n-\t\t\t\tstrict, sub_strict, addr_p);\n+      if (try_one_overload (tparms, targs, tempargs, parm,\n+\t\t\t    TREE_TYPE (OVL_CURRENT (arg)),\n+\t\t\t    strict, sub_strict, addr_p)\n+\t  && (!goodfn || !decls_match (goodfn, OVL_CURRENT (arg))))\n+\t{\n+\t  goodfn = OVL_CURRENT (arg);\n+\t  ++good;\n+\t}\n \n   /* [temp.deduct.type] A template-argument can be deduced from a pointer\n      to function or pointer to member function argument if the set of"}, {"sha": "a0fee86c2fa898828c73ce894ad2cf6a0d0c6bda", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e04c614e09867345ee8ac03390cc75c5f2f1de1e", "patch": "@@ -1,3 +1,8 @@\n+2009-04-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/34691\n+\t* g++.dg/overload/extern-C-1.C: New.\n+\n 2009-04-07  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR testsuite/39325"}, {"sha": "839a0b49ae29eab6b0ca34d959cc6217bfcb5aa5", "filename": "gcc/testsuite/g++.dg/overload/extern-C-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fextern-C-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04c614e09867345ee8ac03390cc75c5f2f1de1e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fextern-C-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fextern-C-1.C?ref=e04c614e09867345ee8ac03390cc75c5f2f1de1e", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/34691\n+\n+namespace A {\n+  extern \"C\" void f(int = 5);\t// { dg-message \"= 5\" }\n+}\n+namespace B {\n+  extern \"C\" void f(int = 4);\t// { dg-message \"= 4\" }\n+}\n+\n+using A::f;\n+using B::f;\n+int main() {\n+  void (*fp)(int) = f;\t\t// OK\n+  f(3);\t\t\t\t// OK\n+  f();\t\t\t\t// { dg-error \"default argument mismatch\" }\n+}\n+"}]}