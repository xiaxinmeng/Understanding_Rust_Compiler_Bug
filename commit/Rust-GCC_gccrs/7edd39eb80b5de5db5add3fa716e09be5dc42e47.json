{"sha": "7edd39eb80b5de5db5add3fa716e09be5dc42e47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VkZDM5ZWI4MGI1ZGU1ZGI1YWRkM2ZhNzE2ZTA5YmU1ZGM0MmU0Nw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-28T13:57:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-28T13:57:46Z"}, "message": "(unroll_loop): When preconditioning...\n\n(unroll_loop): When preconditioning, output code to execute loop once\nif initial value is greater than or equal to final value.\n\nFrom-SVN: r10188", "tree": {"sha": "6d9bb870bd6633e92f9f2b6864d11a0933fcfa28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d9bb870bd6633e92f9f2b6864d11a0933fcfa28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7edd39eb80b5de5db5add3fa716e09be5dc42e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edd39eb80b5de5db5add3fa716e09be5dc42e47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7edd39eb80b5de5db5add3fa716e09be5dc42e47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edd39eb80b5de5db5add3fa716e09be5dc42e47/comments", "author": null, "committer": null, "parents": [{"sha": "185496bb2b6bd071b15c42c681b0c3d60390bce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/185496bb2b6bd071b15c42c681b0c3d60390bce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/185496bb2b6bd071b15c42c681b0c3d60390bce0"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "083f0ab831e482b3ab64abba3710dc673c31987a", "filename": "gcc/unroll.c", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd39eb80b5de5db5add3fa716e09be5dc42e47/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd39eb80b5de5db5add3fa716e09be5dc42e47/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=7edd39eb80b5de5db5add3fa716e09be5dc42e47", "patch": "@@ -853,6 +853,19 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \t  for (i = 0; i < unroll_number; i++)\n \t    labels[i] = gen_label_rtx ();\n \n+\t  /* Check for the case where the initial value is greater than or equal\n+\t     to the final value.  In that case, we want to execute exactly\n+\t     one loop iteration.  The code below will fail for this case.  */\n+\n+\t  emit_cmp_insn (initial_value, final_value, neg_inc ? LE : GE,\n+\t\t\t NULL_RTX, mode, 0, 0);\n+\t  if (neg_inc)\n+\t    emit_jump_insn (gen_ble (labels[1]));\n+\t  else\n+\t    emit_jump_insn (gen_bge (labels[1]));\n+\t  JUMP_LABEL (get_last_insn ()) = labels[1];\n+\t  LABEL_NUSES (labels[1])++;\n+\n \t  /* Assuming the unroll_number is 4, and the increment is 2, then\n \t     for a negative increment:\tfor a positive increment:\n \t     diff = 0,1   precond 0\tdiff = 0,7   precond 0\n@@ -869,18 +882,28 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \t  for (i = 0; i < unroll_number - 1; i++)\n \t    {\n \t      int cmp_const;\n+\t      enum rtx_code cmp_code;\n \n \t      /* For negative increments, must invert the constant compared\n \t\t against, except when comparing against zero.  */\n \t      if (i == 0)\n-\t\tcmp_const = 0;\n+\t\t{\n+\t\t  cmp_const = 0;\n+\t\t  cmp_code = EQ;\n+\t\t}\n \t      else if (neg_inc)\n-\t\tcmp_const = unroll_number - i;\n+\t\t{\n+\t\t  cmp_const = unroll_number - i;\n+\t\t  cmp_code = GE;\n+\t\t}\n \t      else\n-\t\tcmp_const = i;\n+\t\t{\n+\t\t  cmp_const = i;\n+\t\t  cmp_code = LE;\n+\t\t}\n \n \t      emit_cmp_insn (diff, GEN_INT (abs_inc * cmp_const),\n-\t\t\t     EQ, NULL_RTX, mode, 0, 0);\n+\t\t\t     cmp_code, NULL_RTX, mode, 0, 0);\n \n \t      if (i == 0)\n \t\temit_jump_insn (gen_beq (labels[i]));\n@@ -904,13 +927,20 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \t  if (abs_inc != 1)\n \t    {\n \t      int cmp_const;\n+\t      enum rtx_code cmp_code;\n \n \t      if (neg_inc)\n-\t\tcmp_const = abs_inc - 1;\n+\t\t{\n+\t\t  cmp_const = abs_inc - 1;\n+\t\t  cmp_code = LE;\n+\t\t}\n \t      else\n-\t\tcmp_const = abs_inc * (unroll_number - 1) + 1;\n+\t\t{\n+\t\t  cmp_const = abs_inc * (unroll_number - 1) + 1;\n+\t\t  cmp_code = GE;\n+\t\t}\n \n-\t      emit_cmp_insn (diff, GEN_INT (cmp_const), EQ, NULL_RTX,\n+\t      emit_cmp_insn (diff, GEN_INT (cmp_const), cmp_code, NULL_RTX,\n \t\t\t     mode, 0, 0);\n \n \t      if (neg_inc)"}]}