{"sha": "a77842bdf959270baae1ec9f7d82a3217a083a56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc3ODQyYmRmOTU5MjcwYmFhZTFlYzlmN2Q4MmEzMjE3YTA4M2E1Ng==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2005-03-18T11:49:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-18T11:49:26Z"}, "message": "exp_dist.adb (Get_PCS_Name): Move from Exp_Dist body to Sem_Dist spec...\n\n2005-03-17  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_dist.adb (Get_PCS_Name): Move from Exp_Dist body to Sem_Dist\n\tspec, to make this predicate available to other units.\n\n\t* rtsfind.adb (Check_RPC): Use Sem_Dist.Get_PCS_Name instead of\n\treimplementing it.\n\n\t* sem_ch8.adb: Disable expansion of remote access-to-subprogram types\n\twhen no distribution runtime library is available.\n\n\t* sem_res.adb, sem_dist.adb: Disable expansion of remote\n\taccess-to-subprogram types when no distribution runtime library is\n\tavailable.\n\t(Get_PCS_Name): Move from Exp_Dist body to Sem_Dist spec, to make this\n\tpredicate available to other units.\n\n\t* sem_dist.ads (Get_PCS_Name): Move from Exp_Dist body to Sem_Dist\n\tspec, to make this predicate available to other units.\n\nFrom-SVN: r96668", "tree": {"sha": "7cb890101cd69f15c9c050917024b75c2e82a801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cb890101cd69f15c9c050917024b75c2e82a801"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a77842bdf959270baae1ec9f7d82a3217a083a56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a77842bdf959270baae1ec9f7d82a3217a083a56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a77842bdf959270baae1ec9f7d82a3217a083a56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a77842bdf959270baae1ec9f7d82a3217a083a56/comments", "author": null, "committer": null, "parents": [{"sha": "2ccf2fb35ea3eda056496c378fc5d07d363e0407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ccf2fb35ea3eda056496c378fc5d07d363e0407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ccf2fb35ea3eda056496c378fc5d07d363e0407"}], "stats": {"total": 238, "additions": 122, "deletions": 116}, "files": [{"sha": "f8f34b43752e5b100b7ba89acbe8532f1998a0ff", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=a77842bdf959270baae1ec9f7d82a3217a083a56", "patch": "@@ -152,11 +152,6 @@ package body Exp_Dist is\n    pragma Warnings (Off, Get_Subprogram_Id);\n    --  One homonym only is unreferenced (specific to the GARLIC version)\n \n-   function Get_PCS_Name return PCS_Names;\n-   --  Return the name of a literal of type\n-   --    System.Partition_Interface.DSA_Implementation_Type\n-   --  indicating what PCS is currently in use.\n-\n    procedure Add_RAS_Dereference_TSS (N : Node_Id);\n    --  Add a subprogram body for RAS Dereference TSS\n \n@@ -4785,18 +4780,6 @@ package body Exp_Dist is\n                Selector_Name => Make_Identifier (Loc, Selector_Name));\n    end Make_Selected_Component;\n \n-   ------------------\n-   -- Get_PCS_Name --\n-   ------------------\n-\n-   function Get_PCS_Name return PCS_Names is\n-      PCS_Name : constant PCS_Names :=\n-                   Chars (Entity (Expression\n-                                    (Parent (RTE (RE_DSA_Implementation)))));\n-   begin\n-      return PCS_Name;\n-   end Get_PCS_Name;\n-\n    -----------------------\n    -- Get_Subprogram_Id --\n    -----------------------"}, {"sha": "cfe0850b768e82c5a991c5afb52ed181e2326c5b", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=a77842bdf959270baae1ec9f7d82a3217a083a56", "patch": "@@ -43,6 +43,7 @@ with Opt;      use Opt;\n with Restrict; use Restrict;\n with Sem;      use Sem;\n with Sem_Ch7;  use Sem_Ch7;\n+with Sem_Dist; use Sem_Dist;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Stand;    use Stand;\n@@ -838,20 +839,12 @@ package body Rtsfind is\n                      E = RE_Params_Stream_Type\n                        or else\n                      E = RE_Request_Access)\n+           and then Get_PCS_Name = Name_No_DSA\n          then\n-            declare\n-               DSA_Implementation : constant Entity_Id :=\n-                                      RTE (RE_DSA_Implementation);\n-            begin\n-               if Chars (Entity (Expression\n-                                  (Parent (DSA_Implementation)))) = Name_No_DSA\n-               then\n-                  Set_Standard_Error;\n-                  Write_Str (\"distribution feature not supported\");\n-                  Write_Eol;\n-                  raise Unrecoverable_Error;\n-               end if;\n-            end;\n+            Set_Standard_Error;\n+            Write_Str (\"distribution feature not supported\");\n+            Write_Eol;\n+            raise Unrecoverable_Error;\n          end if;\n       end Check_RPC;\n "}, {"sha": "5f8de03efc17d15dc0ef83569dead3a0f71f983d", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=a77842bdf959270baae1ec9f7d82a3217a083a56", "patch": "@@ -50,6 +50,7 @@ with Sem_Ch4;  use Sem_Ch4;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch12; use Sem_Ch12;\n with Sem_Disp; use Sem_Disp;\n+with Sem_Dist; use Sem_Dist;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n with Sem_Type; use Sem_Type;\n@@ -3235,6 +3236,7 @@ package body Sem_Ch8 is\n          if Comes_From_Source (N)\n            and then Is_Remote_Access_To_Subprogram_Type (E)\n            and then Expander_Active\n+           and then Get_PCS_Name /= Name_No_DSA\n          then\n             Rewrite (N,\n               New_Occurrence_Of (Equivalent_Type (E), Sloc (N)));\n@@ -3540,7 +3542,7 @@ package body Sem_Ch8 is\n                              and then Chars (P) = Chars (Selector)\n                            then\n                               Id := S;\n-                              goto found;\n+                              goto Found;\n                            end if;\n                         end if;\n \n@@ -3610,10 +3612,16 @@ package body Sem_Ch8 is\n          end if;\n       end if;\n \n-      <<found>>\n+      <<Found>>\n       if Comes_From_Source (N)\n         and then Is_Remote_Access_To_Subprogram_Type (Id)\n+        and then Present (Equivalent_Type (Id))\n       then\n+         --  If we are not actually generating distribution code (i.e.\n+         --  the current PCS is the dummy non-distributed version), then\n+         --  the Equivalent_Type will be missing, and Id should be treated\n+         --  as a regular access-to-subprogram type.\n+\n          Id := Equivalent_Type (Id);\n          Set_Chars (Selector, Chars (Id));\n       end if;"}, {"sha": "188190f05afee28f8a1b262690d2f6e8e7398284", "filename": "gcc/ada/sem_dist.adb", "status": "modified", "additions": 44, "deletions": 27, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Fsem_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Fsem_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dist.adb?ref=a77842bdf959270baae1ec9f7d82a3217a083a56", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -199,6 +199,18 @@ package body Sem_Dist is\n       return End_String;\n    end Full_Qualified_Name;\n \n+   ------------------\n+   -- Get_PCS_Name --\n+   ------------------\n+\n+   function Get_PCS_Name return PCS_Names is\n+      PCS_Name : constant PCS_Names :=\n+                   Chars (Entity (Expression\n+                                    (Parent (RTE (RE_DSA_Implementation)))));\n+   begin\n+      return PCS_Name;\n+   end Get_PCS_Name;\n+\n    ------------------------\n    -- Is_All_Remote_Call --\n    ------------------------\n@@ -341,7 +353,7 @@ package body Sem_Dist is\n \n       Remote_Subp := Entity (Prefix (N));\n \n-      if not Expander_Active then\n+      if not Expander_Active or else Get_PCS_Name = Name_No_DSA then\n          return;\n       end if;\n \n@@ -429,6 +441,33 @@ package body Sem_Dist is\n       Fat_Type_Decl  : Node_Id;\n \n    begin\n+      Is_Degenerate := False;\n+      Parameter := First (Parameter_Specifications (Type_Def));\n+      while Present (Parameter) loop\n+         if Nkind (Parameter_Type (Parameter)) = N_Access_Definition then\n+            Error_Msg_N (\"formal parameter& has anonymous access type?\",\n+              Defining_Identifier (Parameter));\n+            Is_Degenerate := True;\n+            exit;\n+         end if;\n+\n+         Next (Parameter);\n+      end loop;\n+\n+      if Is_Degenerate then\n+         Error_Msg_NE (\n+           \"remote access-to-subprogram type& can only be null?\",\n+           Defining_Identifier (Parameter), User_Type);\n+         --  The only legal value for a RAS with a formal parameter of an\n+         --  anonymous access type is null, because it cannot be\n+         --  subtype-Conformant with any legal remote subprogram declaration.\n+         --  In this case, we cannot generate a corresponding primitive\n+         --  operation.\n+      end if;\n+\n+      if Get_PCS_Name = Name_No_DSA then\n+         return;\n+      end if;\n \n       --  The tagged private type, primitive operation and RACW\n       --  type associated with a RAS need to all be declared in\n@@ -457,29 +496,7 @@ package body Sem_Dist is\n               Null_Present     => True,\n               Component_List   => Empty)));\n \n-      Is_Degenerate := False;\n-      Parameter := First (Parameter_Specifications (Type_Def));\n-      Parameters : while Present (Parameter) loop\n-         if Nkind (Parameter_Type (Parameter)) = N_Access_Definition then\n-            Error_Msg_N (\"formal parameter& has anonymous access type?\",\n-              Defining_Identifier (Parameter));\n-            Is_Degenerate := True;\n-            exit Parameters;\n-         end if;\n-         Next (Parameter);\n-      end loop Parameters;\n-\n-      if Is_Degenerate then\n-         Error_Msg_NE (\n-           \"remote access-to-subprogram type& can only be null?\",\n-           Defining_Identifier (Parameter), User_Type);\n-         --  The only legal value for a RAS with a formal parameter of an\n-         --  anonymous access type is null, because it cannot be\n-         --  subtype-Conformant with any legal remote subprogram declaration.\n-         --  In this case, we cannot generate a corresponding primitive\n-         --  operation.\n-\n-      else\n+      if not Is_Degenerate then\n          Append_To (Vis_Decls,\n            Make_Abstract_Subprogram_Declaration (Loc,\n              Specification => Build_RAS_Primitive_Specification (\n@@ -595,7 +612,7 @@ package body Sem_Dist is\n          return;\n       end if;\n \n-      if not Expander_Active then\n+      if not Expander_Active or else Get_PCS_Name = Name_No_DSA then\n          return;\n       end if;\n \n@@ -685,7 +702,7 @@ package body Sem_Dist is\n       Target_Type : Entity_Id;\n \n    begin\n-      if not Expander_Active then\n+      if not Expander_Active or else Get_PCS_Name = Name_No_DSA then\n          return False;\n \n       elsif Ekind (Typ) = E_Access_Subprogram_Type"}, {"sha": "f6f59084730f54c08a3429c55044e6753e955c2c", "filename": "gcc/ada/sem_dist.ads", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Fsem_dist.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Fsem_dist.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dist.ads?ref=a77842bdf959270baae1ec9f7d82a3217a083a56", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,15 +26,20 @@\n \n --  Semantic processing for distribution annex facilities\n \n-with Types; use Types;\n+with Snames; use Snames;\n+with Types;  use Types;\n \n package Sem_Dist is\n \n+   function Get_PCS_Name return PCS_Names;\n+   --  Return the name of a literal of type System.Partition_Interface.\n+   --  DSA_Implementation_Type indicating what PCS is currently in use.\n+\n    procedure Add_Stub_Constructs (N : Node_Id);\n    --  Create the stubs constructs for a remote call interface package\n-   --  specification or body or for a shared passive specification. For\n-   --  caller stubs, expansion takes place directly in the specification and\n-   --  no additional compilation unit is created.\n+   --  specification or body or for a shared passive specification. For caller\n+   --  stubs, expansion takes place directly in the specification and no\n+   --  additional compilation unit is created.\n \n    function Build_RAS_Primitive_Specification\n      (Subp_Spec          : Node_Id;\n@@ -59,35 +64,33 @@ package Sem_Dist is\n    --  whose return type is New_Type.\n \n    procedure Process_Remote_AST_Declaration (N : Node_Id);\n-   --  Given N, an access to subprogram type declaration node in RCI or\n-   --  remote types unit, build a new record (fat pointer) type declaration\n-   --  using the old Defining_Identifier of N and a link to the old\n-   --  declaration node N whose Defining_Identifier is changed.\n-   --  We also construct declarations of two subprograms in the unit\n-   --  specification which handle remote access to subprogram type\n-   --  (fat pointer) dereference and the unit receiver that handles\n-   --  remote calls (from remote access to subprogram type values.)\n+   --  Given N, an access to subprogram type declaration node in RCI or remote\n+   --  types unit, build a new record (fat pointer) type declaration using the\n+   --  old Defining_Identifier of N and a link to the old declaration node N\n+   --  whose Defining_Identifier is changed. We also construct declarations of\n+   --  two subprograms in the unit specification which handle remote access to\n+   --  subprogram type (fat pointer) dereference and the unit receiver that\n+   --  handles remote calls (from remote access to subprogram type values.)\n \n    function Remote_AST_E_Dereference (P : Node_Id) return Boolean;\n    --  If the prefix of an explicit dereference is a record type that\n-   --  represent the fat pointer for an Remote access to subprogram, in\n-   --  the context of a call, rewrite the enclosing call node into a\n-   --  remote call, the first actual of which is the fat pointer. Return\n-   --  true if the context is correct and the transformation took place.\n+   --  represent the fat pointer for an Remote access to subprogram, in the\n+   --  context of a call, rewrite the enclosing call node into remote call,\n+   --  the first actual of which is the fat pointer. Return true if the\n+   --  context is correct and the transformation took place.\n \n    function Remote_AST_I_Dereference (P : Node_Id) return Boolean;\n    --  If P is a record type that represents the fat pointer for a remote\n-   --  access to subprogram, and P is the prefix of a call, insert an\n-   --  explicit dereference and perform the transformation described for\n-   --  the previous function.\n+   --  access to subprogram, and P is the prefix of a call, insert an explicit\n+   --  dereference and perform the transformation described for the previous\n+   --  function.\n \n    function Remote_AST_Null_Value\n      (N   : Node_Id;\n       Typ : Entity_Id) return Boolean;\n-   --  If N is a null value and Typ a remote access to subprogram type,\n-   --  this function will check if null needs to be replaced with an\n-   --  aggregate and will return True in this case. Otherwise, it will\n-   --  return False.\n+   --  If N is a null value and Typ a remote access to subprogram type, this\n+   --  function will check if null needs to be replaced with an aggregate and\n+   --  will return True in this case. Otherwise, it will return False.\n \n    function Package_Specification_Of_Scope (E : Entity_Id) return Node_Id;\n    --  Return the N_Package_Specification corresponding to a scope E"}, {"sha": "90ee6f56c7cb6638d885e1e10090474fb3f68f9f", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77842bdf959270baae1ec9f7d82a3217a083a56/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a77842bdf959270baae1ec9f7d82a3217a083a56", "patch": "@@ -168,7 +168,7 @@ package body Sem_Res is\n    --  by other node rewriting procedures.\n \n    procedure Resolve_Actuals (N : Node_Id; Nam : Entity_Id);\n-   --  Resolve actuals of call, and add default expressions for missing ones.\n+   --  Resolve actuals of call, and add default expressions for missing ones\n \n    procedure Resolve_Entry_Call (N : Node_Id; Typ : Entity_Id);\n    --  Called from Resolve_Call, when the prefix denotes an entry or element\n@@ -182,7 +182,7 @@ package body Sem_Res is\n    --  to the corresponding predefined operator, with suitable conversions.\n \n    procedure Resolve_Intrinsic_Unary_Operator (N : Node_Id; Typ : Entity_Id);\n-   --  Ditto, for unary operators (only arithmetic ones).\n+   --  Ditto, for unary operators (only arithmetic ones)\n \n    procedure Rewrite_Operator_As_Call (N : Node_Id; Nam : Entity_Id);\n    --  If an operator node resolves to a call to a user-defined operator,\n@@ -371,14 +371,14 @@ package body Sem_Res is\n       D    : Node_Id;\n \n    begin\n-      --  Any use in a default expression is legal.\n+      --  Any use in a default expression is legal\n \n       if In_Default_Expression then\n          null;\n \n       elsif Nkind (PN) = N_Range then\n \n-         --  Discriminant cannot be used to constrain a scalar type.\n+         --  Discriminant cannot be used to constrain a scalar type\n \n          P := Parent (PN);\n \n@@ -1320,7 +1320,7 @@ package body Sem_Res is\n       Full_Analysis := Save_Full_Analysis;\n    end Pre_Analyze_And_Resolve;\n \n-   --  Version without context type.\n+   --  Version without context type\n \n    procedure Pre_Analyze_And_Resolve (N : Node_Id) is\n       Save_Full_Analysis : constant Boolean := Full_Analysis;\n@@ -1534,17 +1534,9 @@ package body Sem_Res is\n             Is_Remote : Boolean := True;\n \n          begin\n-            --  Check that Typ is a fat pointer with a reference to a RAS as\n-            --  original access type.\n+            --  Check that Typ is a remote access-to-subprogram type\n \n-            if\n-              (Ekind (Typ) = E_Access_Subprogram_Type\n-                 and then Present (Equivalent_Type (Typ)))\n-              or else\n-                (Ekind (Typ) = E_Record_Type\n-                   and then Present (Corresponding_Remote_Type (Typ)))\n-\n-            then\n+            if Is_Remote_Access_To_Subprogram_Type (Typ) then\n                --  Prefix (N) must statically denote a remote subprogram\n                --  declared in a package specification.\n \n@@ -1581,6 +1573,7 @@ package body Sem_Res is\n                     or else Attr = Attribute_Unchecked_Access\n                     or else Attr = Attribute_Unrestricted_Access)\n                  and then Expander_Active\n+                 and then Get_PCS_Name /= Name_No_DSA\n                then\n                   Check_Subtype_Conformant\n                     (New_Id  => Entity (Prefix (N)),\n@@ -2020,7 +2013,7 @@ package body Sem_Res is\n \n                      elsif Nkind (Name (N)) = N_Selected_Component then\n \n-                        --  Protected operation: retrieve operation name.\n+                        --  Protected operation: retrieve operation name\n \n                         Subp_Name := Selector_Name (Name (N));\n                      else\n@@ -2411,7 +2404,7 @@ package body Sem_Res is\n             else\n                Set_Parent (Actval, N);\n \n-               --  See note above concerning aggregates.\n+               --  See note above concerning aggregates\n \n                if Nkind (Actval) = N_Aggregate\n                  and then Has_Discriminants (Etype (Actval))\n@@ -3131,13 +3124,13 @@ package body Sem_Res is\n          elsif Etype (N) = T\n            and then B_Typ /= Universal_Fixed\n          then\n-            --  Not a mixed-mode operation. Resolve with context.\n+            --  Not a mixed-mode operation, resolve with context\n \n             Resolve (N, B_Typ);\n \n          elsif Etype (N) = Any_Fixed then\n \n-            --  N may itself be a mixed-mode operation, so use context type.\n+            --  N may itself be a mixed-mode operation, so use context type\n \n             Resolve (N, B_Typ);\n \n@@ -4512,15 +4505,15 @@ package body Sem_Res is\n \n       if Nkind (Entry_Name) = N_Selected_Component then\n \n-         --  Simple entry call.\n+         --  Simple entry call\n \n          Nam := Entity (Selector_Name (Entry_Name));\n          Obj := Prefix (Entry_Name);\n          Was_Over := Is_Overloaded (Selector_Name (Entry_Name));\n \n       else pragma Assert (Nkind (Entry_Name) = N_Indexed_Component);\n \n-         --  Call to member of entry family.\n+         --  Call to member of entry family\n \n          Nam := Entity (Selector_Name (Prefix (Entry_Name)));\n          Obj := Prefix (Prefix (Entry_Name));\n@@ -4941,7 +4934,7 @@ package body Sem_Res is\n          Array_Type := Designated_Type (Array_Type);\n       end if;\n \n-      --  If name was overloaded, set component type correctly now.\n+      --  If name was overloaded, set component type correctly now\n \n       Set_Etype (N, Component_Type (Array_Type));\n \n@@ -5247,7 +5240,7 @@ package body Sem_Res is\n          return;\n       end if;\n \n-      --  The null literal takes its type from the context.\n+      --  The null literal takes its type from the context\n \n       Set_Etype (N, Typ);\n    end Resolve_Null;\n@@ -6347,11 +6340,14 @@ package body Sem_Res is\n            and then (Etype (Right_Opnd (Operand)) = Universal_Real\n                      or else Etype (Left_Opnd (Operand)) = Universal_Real)\n          then\n+            --  Return if expression is ambiguous\n+\n             if Unique_Fixed_Point_Type (N) = Any_Type then\n-               return;    --  expression is ambiguous.\n-            else\n-               --  If nothing else, the available fixed type is Duration.\n+               return;\n \n+            --  If nothing else, the available fixed type is Duration\n+\n+            else\n                Set_Etype (Operand, Standard_Duration);\n             end if;\n \n@@ -6548,7 +6544,7 @@ package body Sem_Res is\n       Opnd_Type : constant Entity_Id := Etype (Operand);\n \n    begin\n-      --  Resolve operand using its own type.\n+      --  Resolve operand using its own type\n \n       Resolve (Operand, Opnd_Type);\n       Eval_Unchecked_Conversion (N);\n@@ -6770,7 +6766,11 @@ package body Sem_Res is\n       Scop : Entity_Id;\n \n       procedure Fixed_Point_Error;\n-      --  If true ambiguity, give details.\n+      --  If true ambiguity, give details\n+\n+      -----------------------\n+      -- Fixed_Point_Error --\n+      -----------------------\n \n       procedure Fixed_Point_Error is\n       begin\n@@ -6779,6 +6779,8 @@ package body Sem_Res is\n          Error_Msg_NE (\"\\possible interpretation as}\", N, T2);\n       end Fixed_Point_Error;\n \n+   --  Start of processing for Unique_Fixed_Point_Type\n+\n    begin\n       --  The operations on Duration are visible, so Duration is always a\n       --  possible interpretation.\n@@ -6810,7 +6812,7 @@ package body Sem_Res is\n          Scop := Scope (Scop);\n       end loop;\n \n-      --  Look for visible fixed type declarations in the context.\n+      --  Look for visible fixed type declarations in the context\n \n       Item := First (Context_Items (Cunit (Current_Sem_Unit)));\n       while Present (Item) loop\n@@ -6896,15 +6898,15 @@ package body Sem_Res is\n          Opnd_Type   : Entity_Id) return Boolean\n       is\n       begin\n-         --  Upward conversions are allowed (RM 4.6(22)).\n+         --  Upward conversions are allowed (RM 4.6(22))\n \n          if Covers (Target_Type, Opnd_Type)\n            or else Is_Ancestor (Target_Type, Opnd_Type)\n          then\n             return True;\n \n-         --  Downward conversion are allowed if the operand is\n-         --  is class-wide (RM 4.6(23)).\n+         --  Downward conversion are allowed if the operand is class-wide\n+         --  (RM 4.6(23)).\n \n          elsif Is_Class_Wide_Type (Opnd_Type)\n               and then Covers (Opnd_Type, Target_Type)\n@@ -7285,7 +7287,7 @@ package body Sem_Res is\n       elsif Is_Tagged_Type (Target_Type) then\n          return Valid_Tagged_Conversion (Target_Type, Opnd_Type);\n \n-      --  Types derived from the same root type are convertible.\n+      --  Types derived from the same root type are convertible\n \n       elsif Root_Type (Target_Type) = Root_Type (Opnd_Type) then\n          return True;"}]}