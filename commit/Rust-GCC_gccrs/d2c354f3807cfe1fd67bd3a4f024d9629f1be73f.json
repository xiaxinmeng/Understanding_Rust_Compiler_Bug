{"sha": "d2c354f3807cfe1fd67bd3a4f024d9629f1be73f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJjMzU0ZjM4MDdjZmUxZmQ2N2JkM2E0ZjAyNGQ5NjI5ZjFiZTczZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-10-23T20:35:13Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-10-23T20:35:13Z"}, "message": "documentation.html: Add a pointer to the doxygen style guide.\n\n\n2003-10-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* docs/html/documentation.html: Add a pointer to the doxygen style\n\tguide.\n\t* docs/html/17_intro/TODO: Update.\n\t* docs/html/test.html: Add instructions for running a subset of\n\ttests, update.\n\nFrom-SVN: r72867", "tree": {"sha": "074ee601e93ed412aaa454032a03a216dd0eaf80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/074ee601e93ed412aaa454032a03a216dd0eaf80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f/comments", "author": null, "committer": null, "parents": [{"sha": "57f542b35518b587c90b5baf2d75dda1258feb3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f542b35518b587c90b5baf2d75dda1258feb3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57f542b35518b587c90b5baf2d75dda1258feb3e"}], "stats": {"total": 198, "additions": 136, "deletions": 62}, "files": [{"sha": "287b9ab955477f9c01ec8fe0cb7df9eef513f0ce", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d2c354f3807cfe1fd67bd3a4f024d9629f1be73f", "patch": "@@ -1,3 +1,11 @@\n+2003-10-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* docs/html/documentation.html: Add a pointer to the doxygen style\n+\tguide.\n+\t* docs/html/17_intro/TODO: Update.\n+\t* docs/html/test.html: Add instructions for running a subset of\n+\ttests, update.\n+\n 2003-10-23  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (money_get<>::do_get(...,"}, {"sha": "47ea3cd6fb27fd2a4334a069689e613a3554edcd", "filename": "libstdc++-v3/docs/html/17_intro/TODO", "status": "modified", "additions": 120, "deletions": 61, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FTODO", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FTODO", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FTODO?ref=d2c354f3807cfe1fd67bd3a4f024d9629f1be73f", "patch": "@@ -1,62 +1,133 @@\n-- audit for places where __builtin_expect can be used.\n+std::allocator\n \n-- coordinate with \"C\" library people the \"C\" compatibility headers.\n-  Explain why an ISO-14882-conformant solution is hopeless, with the current\n-  twisted morass of \"C\" headers.\n+  - switch to mt_allocator with --enable-threads=posix. \n \n-- do more doxygen manpages\n+  - Try to figure out a way to switch allocators in a more elegant\n+    manner, and make the default allocator configurable.\n+\n+  - persistent allocator\n+\n+  - global/extern allocator\n+\n+std::string \n+\n+  - re-design for multi-paradigm, meta string class solution incorporating COW\n+    vs. deep copy issues, MT scalability\n+    See Andrei Alexandrescu, June 2001, C/C++ Users Journal\n+    \"Generic<Programming>: A Policy-Based basic_string Implementation\"\n+    http://www.cuj.com/documents/s=7994/cujcexp1906alexandr/\n+\n+  - operator!= and utility/rel_ops operators need to be made safe with\n+    string and vector iterator classes. basic_string::reverse_iterator may\n+    be implemented incorrectly, or need things like\n+    operator==(__normal_iterator, const char*&), and swap(vector)\n+\n+  - 'do the right thing' ctor fixing needs to be done for string. This\n+    is still subject to some debate on the library issues list, so I\n+    suggest punting till the dust clears.\n+\n+  - fix template members of basic_string<> to overload iterators and\n+    non-iterators properly.  (This is the infamous hack as in vector<> etc\n+    23.1.1 para 10.)\n+\n+std::locale  \n+\n+  - implement __convert_to_v and __convert_from_v without \"C\" library\n+    functions and and LANG environment variable dependencies.\n+\n+  - use localedata to implement generic named (non-MT-safe) locales?\n+    Figure out a way to use ICU data, like libjava? Need a generic locale\n+    model that does something besides the \"C\" locale.\n+\n+  - make locale::classic() separate from named locale code. This will\n+    improve the static linkage situation, but will require new\n+    initialization code.\n+\n+  - Jerry(?)/Paolo(?) work on __float_to_char.\n+\n+  - minimize ctype convertion in data facets, see numpunct/num_put/num_get\n+\n+  - finish caching data facets and using the caches\n+\n+std::basic_filebuf, 27_io\n+\n+  - wfilebuf, get variable-encoding working and tested, including\n+    positioning and seeking.\n+\n+  - wfilebuf testsuite\n+\n+  - look ahead for unbuffered io, so know when multiple putc's can be\n+    coalesced.\n+\n+  - unlocked __basic_file + new mutext class\n+\n+  - optimized the sentries for istream/ostream\n+\n+  - v2 vs. v3 speed\n+\n+  - add optimization hooks (esp. whitespace eating) to streambuf\n+  - add _M_begin() and _M_end() to streambuf\n+  - add algorithm specializations for [io]streambuf_iterator (copy find etc.)\n+\n+testsuite\n \n-- implement __convert_to_v and __convert_from_v without \"C\" library\n-functions and and LANG environment variable dependencies.\n+  - valgrind hooks into make check so can tell memory leakage\n+    Some commentary on the valgrind users list\n \n-- use localedata to implement generic named (non-MT-safe) locales?\n-Figure out a way to use ICU data, like libjava?\n+  - add hooks for qmtest for visual diffs \n \n-- tuning for executable size, compilation speed, startup allocation,\n-executable speed.\n+  - automatic testing of interactive tests\n \n-- benchmarking addition to the testsuite that does the above.\n+  - diffing generated output files\n \n-- implement testing for symbol versioning for ELF targets.\n+  - make check-abi needs to have full symbol checking. Scope the LSB\n+    testsuite, see what's going on with the typeinfo etc. bits.\n \n-- review streambuf, filebuf, stringbuf to optimize data member\n-placement.  Do pback bits need to be in streambuf? How about\n-_M_set_indeterminate, etc?\n+  - provide testsuites for numerics.\n+\n+  - try to do a better job of ABI testing, with instantiations of all\n+    standard-specified types checked, not just exported symbols.\n+\n+g++/binutils\n+\n+  - compression for wide versions of basic types\n+\n+- get Apple's debug mode, or something with equivalent functionality, in.\n+\n+- audit for places where __builtin_expect can be used.\n+\n+- relocations, work on getting these down\n+\n+- issues with __builtin_memcpy and std::copy from Jerry Quinn\n+  http://gcc.gnu.org/ml/libstdc++/2003-02/msg00076.html\n+\n+- fix dependency tracking for includes (.h, .tcc) during build process.\n+\n+- coordinate with \"C\" library people the \"C\" compatibility headers.\n \n - Think about naming all member data and member functions consistently\n-as per\n-funtions: _M_verb_adverb\n-data: _M_noun_adjective\n+  as per\n+  funtions: _M_verb_adverb\n+  data: _M_noun_adjective\n+\n+- A C++STYLE guide that deals with nested namespaces, and that\n+everybody can live with.\n \n - exception specifications need to be reviewed for all parts of the\n-library support and utility areas, particularly <new>. \n+library support and utility areas, particularly <new>. Part of this is\n+a standards issue, where the 27_io bugs/standard is really in an odd\n+spot.\n+\n+- C-related issues WRT to io and filepos, mbstate_t. Seeking in wide\n+streams. May need to define operators for mbstate_t so that\n+'mbstate_t& == mbstate_t' is something that can be done.\n \n - scoping/linking issues WRT to C structs need to be worked out. See\n Nathan's commentary on cantrip, http://www.cantrip.org/cheaders.html\n \n-- triglyphs/ciso646: and, and_eq, bitand, bitor, compl, not, not_eq,\n-or, or_eq, xor, xor_eq, true && 45, true and false, true or 45, etc.\n-(bool and int), etc.\n-\n-- operator!= and utility/rel_ops operators need to be made safe with\n-string and vector iterator classes. basic_string::reverse_iterator may\n-be implemented incorrectly, or need things like\n-operator==(__normal_iterator, const char*&), and swap(vector)\n-\n - auto_ptr: seems to be some disagreement on what is\n standards-conformant behavior, specially on conversion operators.\n \n-- header optimizations to keep compile times reasonable are most\n-certainly detracting from full conformance, as many templatized\n-definitions are squired away and pre-instantiated, so that the\n-compiler doesn't have to parse them. Areas effected: valarray, string,\n-all of iostreams and locales.\n-\n-- C-related issues WRT to libio and filepos, mbstate_t. Need to\n-straighten this stuff out with the glibc-2.2 libio. Also may need to\n-define operators for mbstate_t so that 'mbstate_t& == mbstate_t' is\n-something that can be done.\n-\n - looks like deque::get_allocator not standards conformant or deque\n allocator non-standard.\n \n@@ -67,47 +138,35 @@ needs to be drawn throughout the entire STL implementation.\n \n - priority_queue conversions may be non-conformant\n \n-- 'do the right thing' ctor fixing needs to be done for string. This\n-is still subject to some debate on the library issues list, so I\n-suggest punting till the dust clears.\n-\n - Protect valarray::result_type (not Standard) and make it work with\n   the various helper classes.\n \n - Make sure `valarray<bool> & == _Expr<_BinClos<logical_or,_ValArray,_ValArray,double,double>,bool>' \n   is defined\n \n-- known issues WRT to io and corner cases with the buffers. This is\n-still subject to interpretation, and I think the current\n-implementation is credible.\n-\n - All of the Library working group closed issues need to be\n addressed. Some of them proposed resolutions are already in the v-3\n-sources, with macro-guards.\n+sources, with macro-guards. Also, same with the TR.\n \n - add deprecated features from Annex D\n   - add #ifdef wrappers for all of them, including in each\n     C <xxx.h> header\n   - replace typedef'd non-deprecated types with more type-safe equivalents.\n \n-- add optimization hooks (esp. whitespace eating) to streambuf\n-  - add _M_begin() and _M_end() to streambuf\n-  - add algorithm specializations for [io]streambuf_iterator (copy find etc.)\n-\n-- fix template members of basic_string<> to overload iterators and\n-  non-iterators properly.  (This is the infamous hack as in vector<> etc\n-  23.1.1 para 10.)\n-\n-- write filebuf for wide characters\n-\n - add feature-test macros for non-standard extensions\n \n-- create MT abstraction layer\n+- create MT abstraction layer for atomicity to pthreads.\n \n - add MT support for locale, string, istream, ostream\n \n-- provide testsuites for numerics.\n+- need to think about doing a .texi or DocBook manual, instead of all\n+these HTML pages. In addition, it would be nice to have a full manual,\n+instead of a lot of ad-hoc pages. Weaknesses include numerics, locale,\n+and io.\n \n - add FAQ entries -- improve the install instructions\n \n - add HOWTO entries\n+\n+- do more doxygen manpages\n+"}, {"sha": "4ed22d5957661597a3a6b94d1eee213996edaa1b", "filename": "libstdc++-v3/docs/html/documentation.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html?ref=d2c354f3807cfe1fd67bd3a4f024d9629f1be73f", "patch": "@@ -245,6 +245,8 @@ <h2><a name=\"5\">Contributor-Specific Information</a></h2>\n        - names to avoid because of potential collisions</li>\n    <li><a href=\"17_intro/C++STYLE\">C++STYLE</a>\n        - coding style by example</li>\n+   <li> In the libstdc++-v3/docs/doxygen directory, see guide.html, a\n+       doxygen markup style guide</li>\n    <li><a href=\"17_intro/CHECKLIST\">CHECKLIST</a>\n        - a list of required features and their status.</li>\n    <li><a href=\"17_intro/DESIGN\">DESIGN</a>"}, {"sha": "07d585fdc2397b3309c0d924e77e9c09585fffc6", "filename": "libstdc++-v3/docs/html/test.html", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ftest.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c354f3807cfe1fd67bd3a4f024d9629f1be73f/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ftest.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ftest.html?ref=d2c354f3807cfe1fd67bd3a4f024d9629f1be73f", "patch": "@@ -126,7 +126,7 @@ <h2><a name=\"org\">Testsuite organization and naming conventions</a></h2>\n       All new tests should be written with the policy of one test\n       case, one file in mind. At some point the entire testsuite will\n       be converted: the current status is that the 21_string,\n-      22_locale, 27_io, and demangle directories have all been\n+      22_locale, 23_containers, 27_io, and demangle directories have all been\n       transitioned.\n    </p>\n \n@@ -486,6 +486,11 @@ <h2><a name=\"check\">Options for running the tests</a></h2>\n make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=arm-sim\"\n </pre>\n    \n+  <p> To run a subset of the library tests, simply edit the generated\n+  file, <em>testsuite_files </em>, to include only the files that are\n+  desired instead of all available test cases.\n+  </p>\n+\n    <p> In addition, there are some testing options that are mostly of\n    interest to library maintainers and system integrators. As such,\n    these tests may not work on all cpu and host combinations, and must"}]}