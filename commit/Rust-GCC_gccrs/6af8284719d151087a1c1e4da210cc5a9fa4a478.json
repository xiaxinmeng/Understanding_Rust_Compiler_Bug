{"sha": "6af8284719d151087a1c1e4da210cc5a9fa4a478", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmODI4NDcxOWQxNTEwODdhMWMxZTRkYTIxMGNjNWE5ZmE0YTQ3OA==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-07-27T14:28:50Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-07-29T11:55:17Z"}, "message": "Fortran  : Don't warn for LOGICAL kind conversion PR96319\n\nLOGICAL values will always fit regardless of kind so there\nis no need for warnings.\n\n2020-07-29  Mark Eggleston  <markeggleston@gcc.gnu.org>\n\ngcc/fortran/\n\n\tPR fortran/96319\n\t* intrinsic.c (gfc_convert_type_warn):  Add check for\n\tLOGICAL type so that warnings are not output.\n\n2020-07-29  Mark Eggleston  <markeggleston@gcc.gnu.org>\n\ngcc/testsuite/\n\n\tPR fortran/96319\n\t* gfortran.dg/pr96319.f90: New test.", "tree": {"sha": "877e0db577ad1ac46478d4cff20c6b6d9e7dfdc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/877e0db577ad1ac46478d4cff20c6b6d9e7dfdc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6af8284719d151087a1c1e4da210cc5a9fa4a478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af8284719d151087a1c1e4da210cc5a9fa4a478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af8284719d151087a1c1e4da210cc5a9fa4a478", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af8284719d151087a1c1e4da210cc5a9fa4a478/comments", "author": null, "committer": null, "parents": [{"sha": "2b2f3867c09c8977268b8ffbd646ac242188b335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2f3867c09c8977268b8ffbd646ac242188b335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2f3867c09c8977268b8ffbd646ac242188b335"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "ef33587a774c8d3ec2edf2f2a10419259f22110e", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af8284719d151087a1c1e4da210cc5a9fa4a478/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af8284719d151087a1c1e4da210cc5a9fa4a478/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=6af8284719d151087a1c1e4da210cc5a9fa4a478", "patch": "@@ -5245,8 +5245,10 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag,\n \t{\n \t  /* Larger kinds can hold values of smaller kinds without problems.\n \t     Hence, only warn if target kind is smaller than the source\n-\t     kind - or if -Wconversion-extra is specified.  */\n-\t  if (expr->expr_type != EXPR_CONSTANT)\n+\t     kind - or if -Wconversion-extra is specified.  LOGICAL values\n+\t     will always fit regardless of kind so ignore conversion.  */\n+\t  if (expr->expr_type != EXPR_CONSTANT\n+\t      && ts->type != BT_LOGICAL)\n \t    {\n \t      if (warn_conversion && from_ts.kind > ts->kind)\n \t\tgfc_warning_now (OPT_Wconversion, \"Possible change of value in \""}, {"sha": "6d8d3b476ebadb525d3393be67de60c55e182dd9", "filename": "gcc/testsuite/gfortran.dg/pr96319.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af8284719d151087a1c1e4da210cc5a9fa4a478/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96319.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af8284719d151087a1c1e4da210cc5a9fa4a478/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96319.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96319.f90?ref=6af8284719d151087a1c1e4da210cc5a9fa4a478", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! { dg-options \"-Wconversion -Wconversion-extra\" }\n+\n+program test\n+  LOGICAL(1) :: a\n+  logical(4) :: t = .true.\n+  logical(4) :: b\n+  logical(1) :: f = .false.\n+  a = t\n+  b = f\n+end program test\n+"}]}