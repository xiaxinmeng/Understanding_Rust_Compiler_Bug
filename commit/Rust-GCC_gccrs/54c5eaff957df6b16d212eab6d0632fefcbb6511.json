{"sha": "54c5eaff957df6b16d212eab6d0632fefcbb6511", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRjNWVhZmY5NTdkZjZiMTZkMjEyZWFiNmQwNjMyZmVmY2JiNjUxMQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-01-16T16:50:03Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-16T16:50:03Z"}, "message": "* java/awt/Label.java: Merged with Classpath.\n\nFrom-SVN: r48913", "tree": {"sha": "872183ad0bfa9063b323a7ec870e0f9741b3f779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/872183ad0bfa9063b323a7ec870e0f9741b3f779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54c5eaff957df6b16d212eab6d0632fefcbb6511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c5eaff957df6b16d212eab6d0632fefcbb6511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c5eaff957df6b16d212eab6d0632fefcbb6511", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c5eaff957df6b16d212eab6d0632fefcbb6511/comments", "author": null, "committer": null, "parents": [{"sha": "2e99323f30f30680a3b3a69f9c84d9ba136e0ac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e99323f30f30680a3b3a69f9c84d9ba136e0ac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e99323f30f30680a3b3a69f9c84d9ba136e0ac4"}], "stats": {"total": 303, "additions": 226, "deletions": 77}, "files": [{"sha": "ddb89b4ced8a5996afc2d19d6bdff7ed2b0b35ec", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c5eaff957df6b16d212eab6d0632fefcbb6511/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c5eaff957df6b16d212eab6d0632fefcbb6511/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=54c5eaff957df6b16d212eab6d0632fefcbb6511", "patch": "@@ -1,3 +1,7 @@\n+2002-01-16  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/awt/Label.java: Merged with Classpath.\n+\n 2002-01-15  Tom Tromey  <tromey@redhat.com>\n \n \t* java/awt/AWTPermission.java: Updated copyright."}, {"sha": "637348a3324e80ef3f89129bdd3b85d09d7d0c18", "filename": "libjava/java/awt/Label.java", "status": "modified", "additions": 222, "deletions": 77, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c5eaff957df6b16d212eab6d0632fefcbb6511/libjava%2Fjava%2Fawt%2FLabel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c5eaff957df6b16d212eab6d0632fefcbb6511/libjava%2Fjava%2Fawt%2FLabel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FLabel.java?ref=54c5eaff957df6b16d212eab6d0632fefcbb6511", "patch": "@@ -1,88 +1,233 @@\n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* Label.java -- Java label widget\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n \n package java.awt;\n-import java.awt.peer.ComponentPeer;\n+\n import java.awt.peer.LabelPeer;\n+import java.awt.peer.ComponentPeer;\n+\n+/**\n+  * This component is used for displaying simple text strings that cannot\n+  * be edited.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  */\n+public class Label extends Component implements java.io.Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+/**\n+  * Alignment constant aligning the text to the left of its window.\n+  */\n+public static final int LEFT = 0;\n+\n+/**\n+  * Alignment constant aligning the text in the center of its window.\n+  */\n+public static final int CENTER = 1;\n+\n+/**\n+  * Alignment constant aligning the text to the right of its window.\n+  */\n+public static final int RIGHT = 2;\n+\n+// Serialization version constant:\n+private static final long serialVersionUID = 3094126758329070636L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * @serial Indicates the alignment of the text within this label's window.\n+  * This is one of the constants in this class.  The default value is \n+  * <code>LEFT</code>.\n+  */\n+private int alignment;\n+\n+/**\n+  * @serial The text displayed in the label\n+  */\n+private String text;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>Label</code> with no text.\n+  */\n+public\n+Label()\n+{\n+  this(\"\", LEFT);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Label</code> with the specified\n+  * text that is aligned to the left.\n+  *\n+  * @param text The text of the label.\n+  */\n+public\n+Label(String text)\n+{\n+  this(text, LEFT);\n+}\n+\n+/*************************************************************************/\n \n /**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date April 12, 2000\n+  * Initializes a new instance of <code>Label</code> with the specified\n+  * text and alignment.\n+  *\n+  * @param text The text of the label.\n+  * @param alignment The desired alignment for the text in this label,\n+  * which must be one of <code>LEFT</code>, <code>CENTER</code>, or\n+  * <code>RIGHT</code>.\n+  */\n+public\n+Label(String text, int alignment)\n+{\n+  setAlignment (alignment);\n+  setText (text);\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n  */\n \n-public class Label extends Component\n+/**\n+  * Returns the constant indicating the alignment of the text in this\n+  * label.  The value returned will be one of the alignment constants\n+  * from this class.\n+  *\n+  * @return The alignment of the text in the label.\n+  */\n+public int\n+getAlignment()\n+{\n+  return(alignment);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the text alignment of this label to the specified value.\n+  *\n+  * @param alignment The desired alignment for the text in this label,\n+  * which must be one of <code>LEFT</code>, <code>CENTER</code>, or\n+  * <code>RIGHT</code>.\n+  */\n+public synchronized void\n+setAlignment(int alignment)\n+{\n+  if (alignment != CENTER && alignment != LEFT && alignment != RIGHT)\n+    throw new IllegalArgumentException (\"invalid alignment: \" + alignment);\n+  this.alignment = alignment;\n+  if (peer != null)\n+    {\n+      LabelPeer lp = (LabelPeer) peer;\n+      lp.setAlignment (alignment);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the text displayed in this label.\n+  *\n+  * @return The text for this label.\n+  */\n+public String\n+getText()\n+{\n+  return(text);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the text in this label to the specified value.\n+  *\n+  * @param text The new text for this label.\n+  */\n+public synchronized void\n+setText(String text)\n+{\n+  this.text = text;\n+\n+  if (peer != null)\n+    {\n+      LabelPeer lp = (LabelPeer) peer;\n+      lp.setText (text);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Notifies this lable that it has been added to a container, causing\n+  * the peer to be created.  This method is called internally by the AWT\n+  * system.\n+  */\n+public void\n+addNotify()\n {\n-  public static final int CENTER = 1;\n-  public static final int LEFT = 0;\n-  public static final int RIGHT = 2;\n-\n-  public Label ()\n-  {\n-    this (\"\", LEFT);\n-  }\n-\n-  public Label (String text)\n-  {\n-    this (text, LEFT);\n-  }\n-\n-  public Label (String text, int alignment)\n-  {\n-    if (alignment != CENTER && alignment != LEFT && alignment != RIGHT)\n-      throw new IllegalArgumentException ();\n-    this.text = text;\n-    this.alignment = alignment;\n-  }\n-\n-  public void addNotify ()\n-  {\n-    if (peer == null)\n-      peer = getToolkit ().createLabel (this);\n-    super.addNotify ();\n-  }\n-\n-  public int getAlignment ()\n-  {\n-    return alignment;\n-  }\n-\n-  public String getText ()\n-  {\n-    return text;\n-  }\n-\n-  protected String paramString ()\n-  {\n-    return \"Label[\" + alignment + \",\" + text + \"]\";\n-  }\n-\n-  public void setAlignment (int alignment)\n-  {\n-    if (alignment != CENTER && alignment != LEFT && alignment != RIGHT)\n-      throw new IllegalArgumentException ();\n-    this.alignment = alignment;\n-    if (peer != null)\n-      {\n-\tLabelPeer lp = (LabelPeer) peer;\n-\tlp.setAlignment (alignment);\n-      }\n-  }\n-\n-  public void setText (String text)\n-  {\n-    this.text = text;\n-    if (peer != null)\n-      {\n-\tLabelPeer lp = (LabelPeer) peer;\n-\tlp.setText (text);\n-      }\n-  }\n-\n-  private String text;\n-  private int alignment;\n+  if (peer == null)\n+    peer = getToolkit ().createLabel (this);\n+  super.addNotify ();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a parameter string useful for debugging.\n+  *\n+  * @param A debugging string.\n+  */\n+protected String\n+paramString()\n+{\n+  return(getClass().getName() + \"(text=\" + getText() + \",alignment=\" +\n+         getAlignment() + \")\");\n+}\n+\n+} // class Label\n+"}]}