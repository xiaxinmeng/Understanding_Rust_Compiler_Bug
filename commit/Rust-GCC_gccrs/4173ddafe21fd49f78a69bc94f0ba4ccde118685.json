{"sha": "4173ddafe21fd49f78a69bc94f0ba4ccde118685", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE3M2RkYWZlMjFmZDQ5Zjc4YTY5YmM5NGYwYmE0Y2NkZTExODY4NQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-02-24T22:20:14Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-02-24T22:20:14Z"}, "message": "arc: Fixes for RTL checking\n\n\n\t* config/arc/arc.c (arc_ccfsm_advance): Only take the PATTERN of\n\tthis_insn if it is an INSN or JUMP_INSN.\n\t(force_offsettable): Look at base, not at addr.\n\t* config/arc/predicates.md (brcc_nolimm_operator): Don't call INTVAL\n\ton things that aren' necessarily CONST_INTs.\n\nFrom-SVN: r245720", "tree": {"sha": "7bc401d180e27fa625214dac8c8bc7af6214a92b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bc401d180e27fa625214dac8c8bc7af6214a92b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4173ddafe21fd49f78a69bc94f0ba4ccde118685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4173ddafe21fd49f78a69bc94f0ba4ccde118685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4173ddafe21fd49f78a69bc94f0ba4ccde118685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4173ddafe21fd49f78a69bc94f0ba4ccde118685/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4227c9adf01d5ada5eb7c868aa104167c2a01983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4227c9adf01d5ada5eb7c868aa104167c2a01983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4227c9adf01d5ada5eb7c868aa104167c2a01983"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "d8766e277279e1471ae4446873c7a5547b156639", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4173ddafe21fd49f78a69bc94f0ba4ccde118685/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4173ddafe21fd49f78a69bc94f0ba4ccde118685/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4173ddafe21fd49f78a69bc94f0ba4ccde118685", "patch": "@@ -1,3 +1,11 @@\n+2017-02-24  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/arc/arc.c (arc_ccfsm_advance): Only take the PATTERN of\n+\tthis_insn if it is an INSN or JUMP_INSN.\n+\t(force_offsettable): Look at base, not at addr.\n+\t* config/arc/predicates.md (brcc_nolimm_operator): Don't call INTVAL\n+\ton things that aren't necessarily CONST_INTs.\n+\n 2017-02-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* doc/invoke.texi (x86 Options, -mfpmath=sse): Mention that"}, {"sha": "4c99f1ddcafb840e0dcdbb3b43ab19ffaf7cb581", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4173ddafe21fd49f78a69bc94f0ba4ccde118685/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4173ddafe21fd49f78a69bc94f0ba4ccde118685/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=4173ddafe21fd49f78a69bc94f0ba4ccde118685", "patch": "@@ -3832,8 +3832,6 @@ arc_ccfsm_advance (rtx_insn *insn, struct arc_ccfsm *state)\n \t      break;\n \t    }\n \n-\t  scanbody = PATTERN (this_insn);\n-\n \t  switch (GET_CODE (this_insn))\n \t    {\n \t    case CODE_LABEL:\n@@ -3868,6 +3866,8 @@ arc_ccfsm_advance (rtx_insn *insn, struct arc_ccfsm *state)\n \t      break;\n \n \t    case JUMP_INSN:\n+\t      scanbody = PATTERN (this_insn);\n+\n \t      /* If this is an unconditional branch to the same label, succeed.\n \t\t If it is to another label, do nothing.  If it is conditional,\n \t\t fail.  */\n@@ -3902,6 +3902,8 @@ arc_ccfsm_advance (rtx_insn *insn, struct arc_ccfsm *state)\n \t      break;\n \n \t    case INSN:\n+\t      scanbody = PATTERN (this_insn);\n+\n \t      /* We can only do this with insns that can use the condition\n \t\t codes (and don't set them).  */\n \t      if (GET_CODE (scanbody) == SET\n@@ -7401,7 +7403,7 @@ force_offsettable (rtx addr, HOST_WIDE_INT size, bool reuse)\n     }\n   if (!REG_P (base)\n       || (REGNO (base) != STACK_POINTER_REGNUM\n-\t  && REGNO_PTR_FRAME_P (REGNO (addr)))\n+\t  && REGNO_PTR_FRAME_P (REGNO (base)))\n       || !CONST_INT_P (offs) || !SMALL_INT (INTVAL (offs))\n       || !SMALL_INT (INTVAL (offs) + size))\n     {"}, {"sha": "0dec736be5f0585ccfb845b4dbb0fa0d940a3d7e", "filename": "gcc/config/arc/predicates.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4173ddafe21fd49f78a69bc94f0ba4ccde118685/gcc%2Fconfig%2Farc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4173ddafe21fd49f78a69bc94f0ba4ccde118685/gcc%2Fconfig%2Farc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fpredicates.md?ref=4173ddafe21fd49f78a69bc94f0ba4ccde118685", "patch": "@@ -458,8 +458,10 @@\n (define_predicate \"brcc_nolimm_operator\"\n   (ior (match_test \"REG_P (XEXP (op, 1))\")\n        (and (match_code \"eq, ne, lt, ge, ltu, geu\")\n+\t    (match_test \"CONST_INT_P (XEXP (op, 1))\")\n \t    (match_test \"u6_immediate_operand (XEXP (op, 1), SImode)\"))\n        (and (match_code \"le, gt, leu, gtu\")\n+\t    (match_test \"CONST_INT_P (XEXP (op, 1))\")\n \t    (match_test \"UNSIGNED_INT6 (INTVAL (XEXP (op, 1)) + 1)\"))))\n \n ;; Return TRUE if this is the condition code register, if we aren't given"}]}