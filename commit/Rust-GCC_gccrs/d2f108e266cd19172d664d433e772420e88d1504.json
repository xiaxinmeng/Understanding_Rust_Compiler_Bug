{"sha": "d2f108e266cd19172d664d433e772420e88d1504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJmMTA4ZTI2NmNkMTkxNzJkNjY0ZDQzM2U3NzI0MjBlODhkMTUwNA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-05-24T11:57:40Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-05-24T11:57:40Z"}, "message": "Merge JDK 1.4 java.security changes from classpath.\n\n       * java/security/AccessControlException.java: Merge from Classpath.\n       * java/security/AccessController.java: Likewise.\n       * java/security/AllPermission.java: Likewise.\n       * java/security/BasicPermission.java: Likewise.\n       * java/security/Certificate.java: Likewise.\n       * java/security/CodeSource.java: Likewise.\n       * java/security/DigestException.java: Likewise.\n       * java/security/DigestOutputStream.java: Likewise.\n       * java/security/DomainCombiner.java: Likewise.\n       * java/security/GeneralSecurityException.java: Likewise.\n       * java/security/Guard.java: Likewise.\n       * java/security/GuardedObject.java: Likewise.\n       * java/security/InvalidAlgorithmParameterException.java: Likewise.\n       * java/security/InvalidKeyException.java: Likewise.\n       * java/security/InvalidParameterException.java: Likewise.\n       * java/security/Key.java: Likewise.\n       * java/security/KeyException.java: Likewise.\n       * java/security/KeyManagementException.java: Likewise.\n       * java/security/KeyStoreException.java: Likewise.\n       * java/security/MessageDigest.java: Likewise.\n       * java/security/NoSuchAlgorithmException.java: Likewise.\n       * java/security/NoSuchProviderException.java: Likewise.\n       * java/security/Permission.java: Likewise.\n       * java/security/PermissionCollection.java: Likewise.\n       * java/security/Permissions.java: Likewise.\n       * java/security/Policy.java: Likewise.\n       * java/security/Principal.java: Likewise.\n       * java/security/PrivateKey.java: Likewise.\n       * java/security/PrivilegedAction.java: Likewise.\n       * java/security/PrivilegedActionException.java: Likewise.\n       * java/security/PrivilegedExceptionAction.java: Likewise.\n       * java/security/ProtectionDomain.java: Likewise.\n       * java/security/ProviderException.java: Likewise.\n       * java/security/PublicKey.java: Likewise.\n       * java/security/SecureClassLoader.java: Likewise.\n       * java/security/SecurityPermission.java: Likewise.\n       * java/security/SignatureException.java: Likewise.\n       * java/security/UnrecoverableKeyException.java: Likewise.\n       * java/security/UnresolvedPermission.java: Likewise.\n       * java/security/acl/AclNotFoundException.java: Likewise.\n       * java/security/acl/LastOwnerException.java: Likewise.\n       * java/security/acl/NotOwnerException.java: Likewise.\n       * java/security/cert/CRLException.java: Likewise.\n       * java/security/cert/CertificateEncodingException.java: Likewise.\n       * java/security/cert/CertificateException.java: Likewise.\n       * java/security/cert/CertificateExpiredException.java: Likewise.\n       * java/security/cert/CertificateFactory.java: Likewise.\n       * java/security/cert/CertificateNotYetValidException.java: Likewise.\n       * java/security/cert/CertificateParsingException.java: Likewise.\n       * java/security/spec/InvalidKeySpecException.java: Likewise.\n       * java/security/spec/InvalidParameterSpecException.java: Likewise.\n\n       * java/security/cert/CertPath.java: New file.\n       * java/security/cert/CertPathBuilderException.java: New file.\n       * java/security/cert/CertPathValidatorException.java: New file.\n       * java/security/cert/CertStoreException.java: New file.\n\n       * Makefile.am: Add new CertPath classes.\n       * Makefile.in: Rebuilt.\n\n       * gnu/java/util/EmptyEnumeration: New file from classpath.\n\nFrom-SVN: r53837", "tree": {"sha": "187144ec8bafd5099db53104f17f94e9a6db61c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/187144ec8bafd5099db53104f17f94e9a6db61c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2f108e266cd19172d664d433e772420e88d1504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f108e266cd19172d664d433e772420e88d1504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2f108e266cd19172d664d433e772420e88d1504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f108e266cd19172d664d433e772420e88d1504/comments", "author": null, "committer": null, "parents": [{"sha": "4fbecd29448860f20975d7aceecc14e843ef0eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbecd29448860f20975d7aceecc14e843ef0eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fbecd29448860f20975d7aceecc14e843ef0eec"}], "stats": {"total": 4093, "additions": 2769, "deletions": 1324}, "files": [{"sha": "93b6364806808f6302109dfe83d4d50ee55c54a6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,6 +1,73 @@\n+2002-05-24  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\tMerge JDK 1.4 java.security changes from classpath.\n+\n+\t* java/security/AccessControlException.java: Merge from Classpath.\n+\t* java/security/AccessController.java: Likewise.\n+\t* java/security/AllPermission.java: Likewise.\n+\t* java/security/BasicPermission.java: Likewise.\n+\t* java/security/Certificate.java: Likewise.\n+\t* java/security/CodeSource.java: Likewise.\n+\t* java/security/DigestException.java: Likewise.\n+\t* java/security/DigestOutputStream.java: Likewise.\n+\t* java/security/DomainCombiner.java: Likewise.\n+\t* java/security/GeneralSecurityException.java: Likewise.\n+\t* java/security/Guard.java: Likewise.\n+\t* java/security/GuardedObject.java: Likewise.\n+\t* java/security/InvalidAlgorithmParameterException.java: Likewise.\n+\t* java/security/InvalidKeyException.java: Likewise.\n+\t* java/security/InvalidParameterException.java: Likewise.\n+\t* java/security/Key.java: Likewise.\n+\t* java/security/KeyException.java: Likewise.\n+\t* java/security/KeyManagementException.java: Likewise.\n+\t* java/security/KeyStoreException.java: Likewise.\n+\t* java/security/MessageDigest.java: Likewise.\n+\t* java/security/NoSuchAlgorithmException.java: Likewise.\n+\t* java/security/NoSuchProviderException.java: Likewise.\n+\t* java/security/Permission.java: Likewise.\n+\t* java/security/PermissionCollection.java: Likewise.\n+\t* java/security/Permissions.java: Likewise.\n+\t* java/security/Policy.java: Likewise.\n+\t* java/security/Principal.java: Likewise.\n+\t* java/security/PrivateKey.java: Likewise.\n+\t* java/security/PrivilegedAction.java: Likewise.\n+\t* java/security/PrivilegedActionException.java: Likewise.\n+\t* java/security/PrivilegedExceptionAction.java: Likewise.\n+\t* java/security/ProtectionDomain.java: Likewise.\n+\t* java/security/ProviderException.java: Likewise.\n+\t* java/security/PublicKey.java: Likewise.\n+\t* java/security/SecureClassLoader.java: Likewise.\n+\t* java/security/SecurityPermission.java: Likewise.\n+\t* java/security/SignatureException.java: Likewise.\n+\t* java/security/UnrecoverableKeyException.java: Likewise.\n+\t* java/security/UnresolvedPermission.java: Likewise.\n+\t* java/security/acl/AclNotFoundException.java: Likewise.\n+\t* java/security/acl/LastOwnerException.java: Likewise.\n+\t* java/security/acl/NotOwnerException.java: Likewise.\n+\t* java/security/cert/CRLException.java: Likewise.\n+\t* java/security/cert/CertificateEncodingException.java: Likewise.\n+\t* java/security/cert/CertificateException.java: Likewise.\n+\t* java/security/cert/CertificateExpiredException.java: Likewise.\n+\t* java/security/cert/CertificateFactory.java: Likewise.\n+\t* java/security/cert/CertificateNotYetValidException.java: Likewise.\n+\t* java/security/cert/CertificateParsingException.java: Likewise.\n+\t* java/security/spec/InvalidKeySpecException.java: Likewise.\n+\t* java/security/spec/InvalidParameterSpecException.java: Likewise.\n+\n+\t* java/security/cert/CertPath.java: New file.\n+\t* java/security/cert/CertPathBuilderException.java: New file.\n+\t* java/security/cert/CertPathValidatorException.java: New file.\n+\t* java/security/cert/CertStoreException.java: New file.\n+\n+\t* Makefile.am: Add new CertPath classes.\n+\t* Makefile.in: Rebuilt.\n+\n+        * gnu/java/util/EmptyEnumeration.java: New file from classpath.\n+\n 2002-05-24  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \tMerge JDK 1.4 exception chaining support from classpath.\n+\n \t* java/lang/Throwable.java: Merge 1.4 support from classpath.\n \t(stackTraceBytes): Rename from stackTrace.\n \t* java/lang/Exception.java: Merge from classpath."}, {"sha": "a959fdbba5e61ec0fe51ecaac6ee375dcfe9b042", "filename": "libjava/Makefile.am", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1422,6 +1422,7 @@ gnu/java/text/LineBreakIterator.java \\\n gnu/java/text/SentenceBreakIterator.java \\\n gnu/java/text/WordBreakIterator.java \\\n gnu/java/util/DoubleEnumeration.java \\\n+gnu/java/util/EmptyEnumeration.java \\\n java/lang/ref/PhantomReference.java \\\n java/lang/ref/Reference.java \\\n java/lang/ref/ReferenceQueue.java \\\n@@ -1558,6 +1559,10 @@ java/security/cert/CertificateFactory.java \\\n java/security/cert/CertificateFactorySpi.java \\\n java/security/cert/CertificateNotYetValidException.java \\\n java/security/cert/CertificateParsingException.java \\\n+java/security/cert/CertPath.java \\\n+java/security/cert/CertPathBuilderException.java \\\n+java/security/cert/CertPathValidatorException.java \\\n+java/security/cert/CertStoreException.java \\\n java/security/cert/X509CRL.java \\\n java/security/cert/X509CRLEntry.java \\\n java/security/cert/X509Certificate.java \\"}, {"sha": "6c4a9001a8476025e202ee1e2288703af3da0f6c", "filename": "libjava/Makefile.in", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1184,6 +1184,7 @@ gnu/java/text/LineBreakIterator.java \\\n gnu/java/text/SentenceBreakIterator.java \\\n gnu/java/text/WordBreakIterator.java \\\n gnu/java/util/DoubleEnumeration.java \\\n+gnu/java/util/EmptyEnumeration.java \\\n java/lang/ref/PhantomReference.java \\\n java/lang/ref/Reference.java \\\n java/lang/ref/ReferenceQueue.java \\\n@@ -1320,6 +1321,10 @@ java/security/cert/CertificateFactory.java \\\n java/security/cert/CertificateFactorySpi.java \\\n java/security/cert/CertificateNotYetValidException.java \\\n java/security/cert/CertificateParsingException.java \\\n+java/security/cert/CertPath.java \\\n+java/security/cert/CertPathBuilderException.java \\\n+java/security/cert/CertPathValidatorException.java \\\n+java/security/cert/CertStoreException.java \\\n java/security/cert/X509CRL.java \\\n java/security/cert/X509CRLEntry.java \\\n java/security/cert/X509Certificate.java \\\n@@ -2018,7 +2023,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/text/LineBreakIterator.P \\\n .deps/gnu/java/text/SentenceBreakIterator.P \\\n .deps/gnu/java/text/WordBreakIterator.P \\\n-.deps/gnu/java/util/DoubleEnumeration.P .deps/interpret.P \\\n+.deps/gnu/java/util/DoubleEnumeration.P \\\n+.deps/gnu/java/util/EmptyEnumeration.P .deps/interpret.P \\\n .deps/java/applet/Applet.P .deps/java/applet/AppletContext.P \\\n .deps/java/applet/AppletStub.P .deps/java/applet/AudioClip.P \\\n .deps/java/awt/AWTError.P .deps/java/awt/AWTEvent.P \\\n@@ -2454,6 +2460,10 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/security/acl/NotOwnerException.P \\\n .deps/java/security/acl/Owner.P .deps/java/security/acl/Permission.P \\\n .deps/java/security/cert/CRL.P .deps/java/security/cert/CRLException.P \\\n+.deps/java/security/cert/CertPath.P \\\n+.deps/java/security/cert/CertPathBuilderException.P \\\n+.deps/java/security/cert/CertPathValidatorException.P \\\n+.deps/java/security/cert/CertStoreException.P \\\n .deps/java/security/cert/Certificate.P \\\n .deps/java/security/cert/CertificateEncodingException.P \\\n .deps/java/security/cert/CertificateException.P \\"}, {"sha": "4e80499c8a447f917342bcff398956a00420b2ca", "filename": "libjava/gnu/java/util/EmptyEnumeration.java", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fgnu%2Fjava%2Futil%2FEmptyEnumeration.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fgnu%2Fjava%2Futil%2FEmptyEnumeration.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Futil%2FEmptyEnumeration.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -0,0 +1,96 @@\n+/* EmptyEnumeration.java -- a constant empty enumeration\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.util;\n+\n+import java.io.Serializable;\n+import java.util.Enumeration;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * This is a helper class that produces an empty Enumerations. There is only\n+ * one instance of this class that can be used whenever one needs a\n+ * non-null but empty enumeration. Using this class prevents multiple\n+ * small objects and inner classes. <code>getInstance()</code> returns\n+ * the only instance of this class. It can be shared by multiple objects and\n+ * threads.\n+ *\n+ * @author Mark Wielaard (mark@klomp.org)\n+ */\n+public final class EmptyEnumeration implements Enumeration, Serializable\n+{\n+  /** The only instance of this class */\n+  private static final EmptyEnumeration instance = new EmptyEnumeration();\n+\n+  /**\n+   * Private constructor that creates a new empty Enumeration.\n+   */\n+  private EmptyEnumeration()\n+  {\n+  }\n+\n+  /**\n+   * Returns the only instance of this class.\n+   * It can be shared by multiple objects and threads.\n+   *\n+   * @return the common empty enumeration\n+   */\n+  public static EmptyEnumeration getInstance()\n+  {\n+    return instance;\n+  }\n+\n+  /**\n+   * Returns false, since there are no elements.\n+   *\n+   * @return false\n+   */\n+  public boolean hasMoreElements()\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Always throws <code>NoSuchElementException</code>, since it is empty.\n+   *\n+   * @throws NoSuchElementException this is empty\n+   */\n+  public Object nextElement()\n+  {\n+    throw new NoSuchElementException();\n+  }\n+}"}, {"sha": "ff8b5a93fb3e4ea401bfaed69d44257e53de95c7", "filename": "libjava/java/security/AccessControlException.java", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FAccessControlException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FAccessControlException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAccessControlException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* AccessControlException.java -- Permission is denied\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,38 +39,44 @@\n \n /**\n  * This exception is thrown when the <code>AccessController</code> denies\n- * an attempt to perform an operation.\n+ * an attempt to perform an operation. This often keeps track of the\n+ * permission that was not granted.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @see AccessController\n+ * @status updated to 1.4\n  */\n public class AccessControlException extends SecurityException\n {\n   /**\n-   * The <code>Permission</code> associated with this exception\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 5138225684096988535L;\n+\n+  /**\n+   * The <code>Permission</code> associated with this exception.\n+   *\n+   * @serial the permission\n    */\n-  private Permission perm;\n+  private final Permission perm;\n \n   /**\n-   * This method initializes a new instance of <code>AccessControlException</code>\n-   * with a descriptive error message.  There will be no <code>Permission</code>\n-   * object associated with this exception.\n+   * Create a new instance with a descriptive error message, and a null\n+   * <code>Permission</code> object.\n    *\n-   * @param msg The descriptive error message\n+   * @param msg the descriptive error message\n    */\n   public AccessControlException(String msg)\n   {\n-    super(msg);\n+    this(msg, null);\n   }\n \n   /**\n-   * This method initializes a new instance of <code>AccessControlException</code>\n-   * with a descriptive error message and an instance of <code>Permission</code>\n-   * that is the permission that caused the exception to be thrown.\n+   * Create a new instance with a descriptive error message and an associated\n+   * <code>Permission</code> object.\n    *\n-   * @param msg The descriptive error message\n-   * @param perm The <code>Permission</code> object that caused this exception.\n+   * @param msg the descriptive error message\n+   * @param perm the permission that caused this\n    */\n   public AccessControlException(String msg, Permission perm)\n   {\n@@ -82,10 +88,10 @@ public AccessControlException(String msg, Permission perm)\n    * This method returns the <code>Permission</code> object that caused\n    * this exception to be thrown.\n    *\n-   * @return The requested <code>Permission</code> object, or <code>null</code> if none is available.\n+   * @return the denied permission, or null\n    */\n   public Permission getPermission()\n   {\n-    return (perm);\n+    return perm;\n   }\n }"}, {"sha": "41ca1cec5fb4f29c467736899126262223cb26b4", "filename": "libjava/java/security/AccessController.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FAccessController.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FAccessController.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAccessController.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -43,7 +43,7 @@\n  * through the <code>checkPermission()</code> method.\n  * Manipulates the access control context for code that needs to be executed\n  * the protection domain of the calling class (by explicitly ignoring the\n- * context of the calling code) in the <code>doPriviliged()</code> methods.\n+ * context of the calling code) in the <code>doPrivileged()</code> methods.\n  * And provides a <code>getContext()</code> method which gives the access\n  * control context of the current thread that can be used for checking\n  * permissions at a later time and/or in another thread.\n@@ -131,7 +131,7 @@ public static Object doPrivileged(PrivilegedAction action,\n    * @param action the <code>PrivilegedExceptionAction</code> whose\n    * <code>run()</code> should be be called.\n    * @returns the result of the <code>action.run()</code> method.\n-   * @exception PriviligedActionException wrapped around any exception that\n+   * @exception PrivilegedActionException wrapped around any exception that\n    * is thrown in the <code>run()</code> method.\n    */\n   public static Object doPrivileged(PrivilegedExceptionAction action)\n@@ -163,7 +163,7 @@ public static Object doPrivileged(PrivilegedExceptionAction action)\n    * @param context the <code>AccessControlContext</code> whose protection\n    * domains should be added to the protection domain of the calling class.\n    * @returns the result of the <code>action.run()</code> method.\n-   * @exception PriviligedActionException wrapped around any exception that\n+   * @exception PrivilegedActionException wrapped around any exception that\n    * is thrown in the <code>run()</code> method.\n    */\n   public static Object doPrivileged(PrivilegedExceptionAction action,"}, {"sha": "4473fa11cb97ad7b304c32de6e5aa6270806ee94", "filename": "libjava/java/security/AllPermission.java", "status": "modified", "additions": 99, "deletions": 37, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FAllPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FAllPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAllPermission.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* AllPermission.java -- Permission to do anything\n-   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,98 +37,160 @@\n \n package java.security;\n \n+import java.util.Enumeration;\n+import java.util.Collections;\n+import gnu.java.util.EmptyEnumeration;\n+\n /**\n  * This class is a permission that implies all other permissions.  Granting\n  * this permission effectively grants all others.  Extreme caution should\n  * be exercised in granting this permission.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see AccessController\n+ * @see Permissions\n+ * @see SecurityManager\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public final class AllPermission extends Permission\n {\n   /**\n-   * This method initializes a new instance of <code>AllPermission</code>.  It\n-   * performs no actions.\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -2916474571451318075L;\n+\n+  /**\n+   * Create a new AllPermission object.\n    */\n   public AllPermission()\n   {\n-    super(\"all\");\n+    super(\"*\");\n   }\n \n   /**\n-   * This method initializes a new instance of <code>AllPermission</code>.  The\n-   * arguments passed to this method are used to set internal field for the\n-   * permission name.  However, these are not used in \n-   * determining the actual permissions granted.  This class always will\n-   * return <code>true</code> in its implies method.\n+   * Create a new AllPermission object. The parameters are ignored, as all\n+   * permission implies ALL PERMISSION.\n    *\n-   * @param name The name of this permission.\n-   * @param actions The action list for this permission - ignored in this class.\n+   * @param name ignored\n+   * @param actions ignored\n    */\n   public AllPermission(String name, String actions)\n   {\n-    super(name);\n+    super(\"*\");\n   }\n \n   /**\n    * This method always returns <code>true</code> to indicate that this\n    * permission always implies that any other permission is also granted.\n    *\n-   * @param perm The <code>Permission</code> to test against - ignored in this class.\n-   *\n-   * @return Always returns <code>true</code>\n+   * @param perm ignored\n+   * @return true, the permission is implied\n    */\n   public boolean implies(Permission perm)\n   {\n-    return (true);\n+    return true;\n   }\n \n   /**\n-   * This method tests this class for equality against another <code>Object</code>.\n-   * This will return <code>true</code> if and only if the specified \n-   * <code>Object</code> is an instance of <code>AllPermission</code>.\n+   * Checks an object for equality. All AllPermissions are equal.\n    *\n-   * @param obj The <code>Object</code> to test for equality to this object\n+   * @param obj the <code>Object</code> to test for equality\n    */\n   public boolean equals(Object obj)\n   {\n-    if (obj instanceof AllPermission)\n-      return (true);\n-\n-    return (false);\n+    return obj instanceof AllPermission;\n   }\n \n   /**\n-   * This method returns a hash code for this object.\n+   * This method returns a hash code for this object. This returns 1.\n    *\n-   * @return A hash value for this object.\n+   * @return a hash value for this object\n    */\n   public int hashCode()\n   {\n-    return (System.identityHashCode(this));\n+    return 1;\n   }\n \n   /**\n    * This method returns the list of actions associated with this object.\n    * This will always be the empty string (\"\") for this class.\n    *\n-   * @return The action list.\n+   * @return the action list\n    */\n   public String getActions()\n   {\n-    return (\"\");\n+    return \"\";\n   }\n \n   /**\n-   * This method returns a new instance of <code>PermissionCollection</code>\n-   * suitable for holding instance of <code>AllPermission</code>.\n+   * Returns a PermissionCollection which can hold AllPermission.\n    *\n-   * @return A new <code>PermissionCollection</code>.\n+   * @return a permission collection\n    */\n   public PermissionCollection newPermissionCollection()\n   {\n-    return (null);\n+    return new AllPermissionCollection();\n+  }\n+} // class AllPermission\n+\n+/**\n+ * Implements AllPermission.newPermissionCollection, and obeys serialization\n+ * of JDK.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ */\n+final class AllPermissionCollection extends PermissionCollection\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -4023755556366636806L;\n+\n+  /**\n+   * Whether an AllPermission has been added to the collection.\n+   *\n+   * @serial if all permission is in the collection yet\n+   */\n+  private boolean all_allowed;\n+\n+  /**\n+   * Add an AllPermission.\n+   *\n+   * @param perm the permission to add\n+   * @throws IllegalArgumentException if perm is not an AllPermission\n+   * @throws SecurityException if the collection is read-only\n+   */\n+  public void add(Permission perm)\n+  {\n+    if (isReadOnly())\n+      throw new SecurityException();\n+    if (! (perm instanceof AllPermission))\n+      throw new IllegalArgumentException();\n+    all_allowed = true;\n+  }\n+\n+  /**\n+   * Returns true if this collection implies a permission.\n+   *\n+   * @param perm the permission to check\n+   * @return true if this collection contains an AllPermission\n+   */\n+  public boolean implies(Permission perm)\n+  {\n+    return all_allowed;\n+  }\n+\n+  /**\n+   * Returns an enumeration of the elements in the collection.\n+   *\n+   * @return the elements in the collection\n+   */\n+  public Enumeration elements()\n+  {\n+    return all_allowed\n+      ? Collections.enumeration(Collections.singleton(new AllPermission()))\n+      : EmptyEnumeration.getInstance();\n   }\n-}\n+} // class AllPermissionCollection"}, {"sha": "25630fb798b5dd08c5190e8819d755b58fb4cb12", "filename": "libjava/java/security/BasicPermission.java", "status": "modified", "additions": 179, "deletions": 130, "changes": 309, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FBasicPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FBasicPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FBasicPermission.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* BasicPermission.java -- Implements a simple named permission.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+/* BasicPermission.java -- implements a simple named permission\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -44,90 +44,94 @@\n /**\n  * This class implements a simple model for named permissions without an\n  * associated action list.  That is, either the named permission is granted\n- * or it is not.  \n- * <p>\n- * It also supports trailing wildcards to allow the\n- * easy granting of permissions in a hierarchical fashion.  (For example,\n- * the name \"org.gnu.*\" might grant all permissions under the \"org.gnu\"\n- * permissions hierarchy).  The only valid wildcard character is a '*'\n- * which matches anything.  It must be the rightmost element in the\n- * permission name and must follow a '.' or else the Permission name must\n- * consist of only a '*'.  Any other occurrence of a '*' is not valid.\n- * <p>\n- * This class ignores the action list.  Subclasses can choose to implement\n- * actions on top of this class if desired.\n+ * or it is not.\n+ *\n+ * <p>It also supports trailing wildcards to allow the easy granting of\n+ * permissions in a hierarchical fashion.  (For example, the name \"org.gnu.*\"\n+ * might grant all permissions under the \"org.gnu\" permissions hierarchy).\n+ * The only valid wildcard character is a '*' which matches anything. It\n+ * must be the rightmost element in the permission name and must follow a\n+ * '.' or else the Permission name must consist of only a '*'. Any other\n+ * occurrence of a '*' is not valid.\n  *\n- * @version 0.1\n+ * <p>This class ignores the action list.  Subclasses can choose to implement\n+ * actions on top of this class if desired.\n  *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Permission\n+ * @see Permissions\n+ * @see PermissionCollection\n+ * @see RuntimePermission\n+ * @see SecurityPermission\n+ * @see PropertyPermission\n+ * @see AWTPermission\n+ * @see NetPermission\n+ * @see SecurityManager\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public abstract class BasicPermission extends java.security.Permission\n   implements Serializable\n-  // FIXME extends with fully qualified classname as workaround for gcj 3.0.4\n+  // FIXME extends with fully qualified classname is workaround for gcj 3.0.4.\n {\n   /**\n-   * This method initializes a new instance of <code>BasicPermission</code>\n-   * with the specified name.  If the name contains an illegal wildcard\n-   * character, an exception is thrown.\n-   *\n-   * @param name The name of this permission.\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 6279438298436773498L;\n+\n+  /**\n+   * Create a new instance with the specified permission name. If the name\n+   * is empty, or contains an illegal wildcard character, an exception is\n+   * thrown.\n    *\n-   * @exception IllegalArgumentException If the name contains an invalid wildcard character\n-   * @exception NullPointerException If the name is null\n+   * @param name the name of this permission\n+   * @throws NullPointerException if name is null\n+   * @throws IllegalArgumentException if name is invalid\n    */\n-  public BasicPermission(String name) \n-    throws IllegalArgumentException, NullPointerException\n+  public BasicPermission(String name)\n   {\n     super(name);\n-\n     if (name.indexOf(\"*\") != -1)\n       {\n-\tif (!name.endsWith(\".*\") && !name.equals(\"*\"))\n-\t  throw new IllegalArgumentException(\"Bad wildcard: \" + name);\n-\n-\tif (name.indexOf(\"*\") != name.lastIndexOf(\"*\"))\n-\t  throw new IllegalArgumentException(\"Bad wildcard: \" + name);\n+        if ((! name.endsWith(\".*\") && ! name.equals(\"*\"))\n+            || name.indexOf(\"*\") != name.lastIndexOf(\"*\"))\n+          throw new IllegalArgumentException(\"Bad wildcard: \" + name);\n       }\n+    if (\"\".equals(name))\n+      throw new IllegalArgumentException(\"Empty name\");\n   }\n \n   /**\n-   * This method initializes a new instance of <code>BasicPermission</code>\n-   * with the specified name.  If the name contains an illegal wildcard\n-   * character, an exception is thrown.  The action list passed to this\n-   * form of the constructor is ignored.\n-   *\n-   * @param name The name of this permission.\n-   * @param actions The list of actions for this permission - ignored in this class.\n+   * Create a new instance with the specified permission name. If the name\n+   * is empty, or contains an illegal wildcard character, an exception is\n+   * thrown. The actions parameter is ignored.\n    *\n-   * @exception IllegalArgumentException If the name contains an invalid wildcard character\n-   * @exception NullPointerException If the name is null\n+   * @param name the name of this permission\n+   * @param actions ignored\n+   * @throws NullPointerException if name is null\n+   * @throws IllegalArgumentException if name is invalid\n    */\n-  public BasicPermission(String name, String actions) \n-    throws IllegalArgumentException, NullPointerException\n+  public BasicPermission(String name, String actions)\n   {\n-    // ignore actions\n     this(name);\n   }\n \n   /**\n-   * This method tests to see if the specified permission is implied by \n-   * this permission.  This will be true if the following conditions are met:\n-   * <p>\n-   * <ul>\n-   * <li>The specified object is an instance of <code>BasicPermission</code>, \n-   * or a subclass.\n-   * <li>The name of the specified permission is identical to this permission's\n-   * name or the name of the specified permission satisfies a wildcard match \n-   * on this permission.\n+   * This method tests to see if the specified permission is implied by this\n+   * permission.  This will be true if the following conditions are met:<ul>\n+   * <li>The specified object is an instance of the same class as this\n+   * object.</li>\n+   * <li>The name of the specified permission is implied by this permission's\n+   * name based on wildcard matching. For example, \"a.*\" implies \"a.b\".</li>\n    * </ul>\n    *\n-   * @param perm The <code>Permission</code> object to test against.\n-   *\n-   * @return <code>true</code> if the specified permission is implied by this one or <code>false</code> otherwise.\n+   * @param perm the <code>Permission</code> object to test against\n+   * @return true if the specified permission is implied\n    */\n   public boolean implies(Permission perm)\n   {\n-    if (!(perm instanceof BasicPermission))\n+    if (! getClass().isInstance(perm))\n       return false;\n \n     String otherName = perm.getName();\n@@ -137,124 +141,169 @@ public boolean implies(Permission perm)\n       return true;\n \n     int last = name.length() - 1;\n-    if (name.charAt(last) == '*'\n-\t&& otherName.startsWith(name.substring(0, last)))\n-      return true;\n-\n-    return false;\n+    return name.charAt(last) == '*'\n+      && otherName.startsWith(name.substring(0, last));\n   }\n \n   /**\n    * This method tests to see if this object is equal to the specified\n    * <code>Object</code>.  This will be true if and only if the specified\n-   * object meets the following conditions:\n-   * <p>\n-   * <ul>\n-   * <li>It is an instance of <code>BasicPermission</code>, or a subclass.\n-   * <li>It has the same name as this permission.\n+   * object meets the following conditions:<ul>\n+   * <li>It is an instance of the same class as this.</li>\n+   * <li>It has the same name as this permission.</li>\n    * </ul>\n    *\n-   * @param obj The <code>Object</code> to test for equality against this object\n-   *\n-   * @return <code>true</code> if the specified <code>Object</code> is equal to this object or <code>false</code> otherwise.\n+   * @param obj the <code>Object</code> to test for equality\n+   * @return true if obj is semantically equal to this\n    */\n   public boolean equals(Object obj)\n   {\n-    if (!(obj instanceof BasicPermission))\n-      return (false);\n-\n-    if (!getName().equals(((BasicPermission) obj).getName()))\n-      return (false);\n-\n-    return (true);\n+    return getClass().isInstance(obj)\n+      && getName().equals(((BasicPermission) obj).getName());\n   }\n \n   /**\n    * This method returns a hash code for this permission object.  The hash\n    * code returned is the value returned by calling the <code>hashCode</code>\n    * method on the <code>String</code> that is the name of this permission.\n    *\n-   * @return A hash value for this object\n+   * @return a hash value for this object\n    */\n   public int hashCode()\n   {\n-    return (getName().hashCode());\n+    return getName().hashCode();\n   }\n \n   /**\n-   * This method returns a list of the actions associated with this \n+   * This method returns a list of the actions associated with this\n    * permission.  This method always returns the empty string (\"\") since\n    * this class ignores actions.\n    *\n-   * @return The action list.\n+   * @return the action list\n    */\n   public String getActions()\n   {\n-    return (\"\");\n+    return \"\";\n   }\n \n   /**\n    * This method returns an instance of <code>PermissionCollection</code>\n-   * suitable for storing <code>BasicPermission</code> objects.  This returns\n-   * be a sub class of <code>PermissionCollection</code>\n-   * that allows for an efficient and consistent implementation of\n-   * the <code>implies</code> method.  The collection doesn't handle subclasses\n-   * of BasicPermission correctly; they must override this method. \n+   * suitable for storing <code>BasicPermission</code> objects.  The\n+   * collection returned can only store objects of the same type as this.\n+   * Subclasses which use actions must override this method; but a class with\n+   * no actions will work fine with this.\n    *\n-   * @return A new empty <code>PermissionCollection</code> object.\n+   * @return a new empty <code>PermissionCollection</code> object\n    */\n   public PermissionCollection newPermissionCollection()\n   {\n-    return new PermissionCollection()\n-    {\n-      Hashtable permissions = new Hashtable();\n-      boolean allAllowed = false;\n-\n-      public void add(Permission permission)\n-      {\n-\tif (isReadOnly())\n-\t  throw new IllegalStateException(\"readonly\");\n+    return new BasicPermissionCollection(getClass());\n+  }\n+} // class BasicPermission\n \n-\tBasicPermission bp = (BasicPermission) permission;\n-\tString name = bp.getName();\n-\tif (name.equals(\"*\"))\n-\t  allAllowed = true;\n-\tpermissions.put(name, bp);\n-      }\n+/**\n+ * Implements AllPermission.newPermissionCollection, and obeys serialization\n+ * of JDK.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ */\n+final class BasicPermissionCollection extends PermissionCollection\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 739301742472979399L;\n \n-      public boolean implies(Permission permission)\n-      {\n-\tif (!(permission instanceof BasicPermission))\n-\t  return false;\n+  /**\n+   * The permissions in the collection.\n+   *\n+   * @serial a hash mapping name to permissions, all of type permClass\n+   */\n+  private final Hashtable permissions = new Hashtable();\n \n-\tif (allAllowed)\n-\t  return true;\n+  /**\n+   * If \"*\" is in the collection.\n+   *\n+   * @serial true if a permission named \"*\" is in the collection\n+   */\n+  private boolean all_allowed;\n \n-\tBasicPermission toImply = (BasicPermission) permission;\n-\tString name = toImply.getName();\n-\tif (name.equals(\"*\"))\n-\t  return false;\n+  /**\n+   * The runtime class which all entries in the table must belong to.\n+   *\n+   * @serial the limiting subclass of this collection\n+   */\n+  private final Class permClass;\n \n-\tint prefixLength = name.length();\n-\tif (name.endsWith(\"*\"))\n-\t  prefixLength -= 2;\n+  /**\n+   * Construct a collection over the given runtime class.\n+   *\n+   * @param c the class\n+   */\n+  BasicPermissionCollection(Class c)\n+  {\n+    permClass = c;\n+  }\n \n-\twhile (true)\n-\t  {\n-\t    if (permissions.get(name) != null)\n-\t      return true;\n+  /**\n+   * Add a Permission. It must be of the same type as the permission which\n+   * created this collection.\n+   *\n+   * @param perm the permission to add\n+   * @throws IllegalArgumentException if perm is not the correct type\n+   * @throws SecurityException if the collection is read-only\n+   */\n+  public void add(Permission perm)\n+  {\n+    if (isReadOnly())\n+      throw new SecurityException(\"readonly\");\n+    if (! permClass.isInstance(perm))\n+      throw new IllegalArgumentException(\"Expecting instance of \" + permClass);\n+    BasicPermission bp = (BasicPermission) perm;\n+    String name = bp.getName();\n+    if (name.equals(\"*\"))\n+      all_allowed = true;\n+    permissions.put(name, bp);\n+  }\n \n-\t    prefixLength = name.lastIndexOf('.', prefixLength);\n-\t    if (prefixLength < 0)\n-\t      return false;\n-\t    name = name.substring(0, prefixLength + 1) + '*';\n-\t  }\n-      }\n+  /**\n+   * Returns true if this collection implies the given permission.\n+   *\n+   * @param permission the permission to check\n+   * @return true if it is implied by this\n+   */\n+  public boolean implies(Permission permission)\n+  {\n+    if (! permClass.isInstance(permission))\n+      return false;\n+    if (all_allowed)\n+      return true;\n+    BasicPermission toImply = (BasicPermission) permission;\n+    String name = toImply.getName();\n+    if (name.equals(\"*\"))\n+      return false;\n+    int prefixLength = name.length();\n+    if (name.endsWith(\"*\"))\n+      prefixLength -= 2;\n \n-      public Enumeration elements()\n+    while (true)\n       {\n-\treturn permissions.elements();\n+        if (permissions.get(name) != null)\n+          return true;\n+        prefixLength = name.lastIndexOf('.', prefixLength);\n+        if (prefixLength < 0)\n+          return false;\n+        name = name.substring(0, prefixLength + 1) + '*';\n       }\n-    };\n   }\n-}\n+\n+  /**\n+   * Enumerate over the collection.\n+   *\n+   * @return an enumeration of the collection contents\n+   */\n+  public Enumeration elements()\n+  {\n+    return permissions.elements();\n+  }\n+} // class BasicPermissionCollection"}, {"sha": "f37d919a73341cb761b7c6035eb1dbd4abd89202", "filename": "libjava/java/security/Certificate.java", "status": "modified", "additions": 45, "deletions": 39, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FCertificate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FCertificate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FCertificate.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* Certificate.java -- Interface for modeling digital certificates\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* Certificate.java -- deprecated interface for modeling digital certificates\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -42,84 +42,90 @@\n import java.io.IOException;\n \n /**\n- * This interface models a digital certificate which verifies the \n+ * This interface models a digital certificate which verifies the\n  * authenticity of a party.  This class simply allows certificate\n  * information to be queried, it does not guarantee that the certificate\n  * is valid.\n- * <p>\n- * This class is deprecated in favor of the new java.security.cert package.\n- * It exists for backward compatibility only.\n- * \n- * @deprecated\n  *\n- * @version 0.0\n+ * <p>This class is deprecated in favor of the new java.security.cert package.\n+ * It exists for backward compatibility only.\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @since 1.1\n+ * @deprecated use {@link java.security.cert} instead\n+ * @status updated to 1.4\n  */\n public interface Certificate\n {\n-\n   /**\n    * This method returns the <code>Principal</code> that is guaranteeing\n    * this certificate.\n    *\n-   * @return The <code>Principal</code> guaranteeing the certificate\n+   * @return the <code>Principal</code> guaranteeing the certificate\n+   * @deprecated this entire interface is deprecated\n    */\n-  public abstract Principal getGuarantor();\n+  Principal getGuarantor();\n \n   /**\n    * This method returns the <code>Principal</code> being guaranteed by\n    * this certificate.\n    *\n-   * @return The <code>Principal</code> guaranteed by this certificate.\n+   * @return the <code>Principal</code> guaranteed by this certificate\n+   * @deprecated this entire interface is deprecated\n    */\n-  public abstract Principal getPrincipal();\n+  Principal getPrincipal();\n \n   /**\n    * This method returns the public key for the <code>Principal</code> that\n    * is being guaranteed.\n    *\n-   * @return The <code>PublicKey</code> of the <code>Principal</code> being guaranteed\n+   * @return the <code>PublicKey</code> of the Principal being guaranteed\n+   * @deprecated this entire interface is deprecated\n    */\n-  public abstract PublicKey getPublicKey();\n-\n-  /**\n-   * This method returns the encoding format of the certificate (e.g., \"PGP\",\n-   * \"X.509\").  This format is used by the <code>encode</code. and\n-   * <code>decode</code> methods.\n-   *\n-   * @return The encoding format being used\n-   */\n-  public abstract String getFormat();\n+  PublicKey getPublicKey();\n \n   /**\n    * This method writes the certificate to an <code>OutputStream</code> in\n    * a format that can be understood by the <code>decode</code> method.\n    *\n-   * @param out The <code>OutputStream</code> to write to.\n-   *\n-   * @exception KeyException If there is a problem with the internals of this certificate\n-   * @exception IOException If an error occurs writing to the stream.\n+   * @param out the <code>OutputStream</code> to write to\n+   * @throws KeyException if there is a problem with the certificate\n+   * @throws IOException if an error occurs writing to the stream\n+   * @see #decode(InputStream)\n+   * @see #getFormat()\n+   * @deprecated this entire interface is deprecated\n    */\n-  public abstract void\n-    encode(OutputStream out) throws KeyException, IOException;\n+  void encode(OutputStream out) throws KeyException, IOException;\n \n   /**\n    * This method reads an encoded certificate from an <code>InputStream</code>.\n    *\n-   * @param in The <code>InputStream</code> to read from.\n+   * @param in the <code>InputStream</code> to read from\n+   * @throws KeyException if there is a problem with the certificate data\n+   * @throws IOException if an error occurs reading from the stream\n+   * @see #encode(OutputStream)\n+   * @see #getFormat()\n+   * @deprecated this entire interface is deprecated\n+   */\n+  void decode(InputStream in) throws KeyException, IOException;\n+\n+  /**\n+   * This method returns the encoding format of the certificate (e.g., \"PGP\",\n+   * \"X.509\").  This format is used by the <code>encode</code> and\n+   * <code>decode</code> methods.\n    *\n-   * @param KeyException If there is a problem with the certificate data\n-   * @param IOException If an error occurs reading from the stream.\n+   * @return the encoding format being used\n+   * @deprecated this entire interface is deprecated\n    */\n-  public abstract void\n-    decode(InputStream in) throws KeyException, IOException;\n+  String getFormat();\n \n   /**\n    * This method returns a <code>String</code> representation of the contents\n    * of this certificate.\n    *\n-   * @param detail <code>true</code> to provided detailed information about this certificate, <code>false</code> otherwise\n+   * @param detail true to provided more detailed information\n+   * @return the string representation\n+   * @deprecated this entire interface is deprecated\n    */\n-  public abstract String toString(boolean detail);\n-}\n+  String toString(boolean detail);\n+} // interface Certificate"}, {"sha": "36ee734efd38f342a788dd516a282c19bbdd13e2", "filename": "libjava/java/security/CodeSource.java", "status": "modified", "additions": 223, "deletions": 203, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FCodeSource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FCodeSource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FCodeSource.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* CodeSource.java -- Code location and certifcates\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,56 +35,102 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.net.URL;\n import java.net.SocketPermission;\n+// Note that this overrides Certificate in this package.\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.CertificateException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n \n /**\n  * This class represents a location from which code is loaded (as\n- * represented by a URL) and the list of certificates that are used to\n+ * represented by a URL), and the list of certificates that are used to\n  * check the signatures of signed code loaded from this source.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public class CodeSource implements Serializable\n {\n-  private static final String linesep = System.getProperty(\"line.separator\");\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 4977541819976013951L;\n \n   /**\n    * This is the URL that represents the code base from which code will\n    * be loaded.\n+   *\n+   * @serial the code location\n    */\n-  private URL location;\n+  private final URL location;\n+\n+  /** The set of certificates for this code base. */\n+  private transient HashSet certs;\n \n   /**\n-   * This is the list of certificates for this code base\n+   * This creates a new instance of <code>CodeSource</code> that loads code\n+   * from the specified URL location and which uses the specified certificates\n+   * for verifying signatures.\n+   *\n+   * @param location the location from which code will be loaded\n+   * @param certs the list of certificates\n    */\n-  // What is the serialized form of this?\n-  private java.security.cert.Certificate[] certs;\n+  public CodeSource(URL location, Certificate[] certs)\n+  {\n+    this.location = location;\n+    if (certs != null)\n+      this.certs = new HashSet(Arrays.asList(certs));\n+  }\n \n   /**\n-   * This method initializes a new instance of <code>CodeSource</code> that\n-   * loads code from the specified URL location and which uses the \n-   * specified certificates for verifying signatures.\n+   * This method returns a hash value for this object.\n    *\n-   * @param location The location from which code will be loaded\n-   * @param certs The list of certificates used for verifying signatures on code from this source\n+   * @return a hash value for this object\n    */\n-  public CodeSource(URL location, java.security.cert.Certificate[] certs)\n+  public int hashCode()\n   {\n-    this.location = location;\n-    this.certs = certs;\n+    return (location == null ? 0 : location.hashCode())\n+      ^ (certs == null ? 0 : certs.hashCode());\n+  }\n+\n+  /**\n+   * This method tests the specified <code>Object</code> for equality with\n+   * this object.  This will be true if and only if the locations are equal\n+   * and the certificate sets are identical (ignoring order).\n+   *\n+   * @param obj the <code>Object</code> to test against\n+   * @return true if the specified object is equal to this one\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (! (obj instanceof CodeSource))\n+      return false;\n+    CodeSource cs = (CodeSource) obj;\n+    return (certs == null ? cs.certs == null : certs.equals(cs.certs))\n+      && (location == null ? cs.location == null\n+          : location.equals(cs.location));\n   }\n \n   /**\n    * This method returns the URL specifying the location from which code\n    * will be loaded under this <code>CodeSource</code>.\n    *\n-   * @return The code location for this <code>CodeSource</code>.\n+   * @return the code location for this <code>CodeSource</code>\n    */\n   public final URL getLocation()\n   {\n@@ -93,235 +139,209 @@ public final URL getLocation()\n \n   /**\n    * This method returns the list of digital certificates that can be used\n-   * to verify the signatures of code loaded under this <code>CodeSource</code>.\n+   * to verify the signatures of code loaded under this\n+   * <code>CodeSource</code>.\n    *\n-   * @return The certifcate list for this <code>CodeSource</code>.\n+   * @return the certifcate list for this <code>CodeSource</code>\n    */\n-  public final java.security.cert.Certificate[] getCertificates()\n+  public final Certificate[] getCertificates()\n   {\n-    return certs;\n+    if (certs == null)\n+      return null;\n+    Certificate[] c = new Certificate[certs.size()];\n+    certs.toArray(c);\n+    return c;\n   }\n \n   /**\n-   * This method tests to see if a specified <code>CodeSource</code> is \n+   * This method tests to see if a specified <code>CodeSource</code> is\n    * implied by this object.  Effectively, to meet this test, the specified\n-   * object must have all the certifcates this object has (but may have \n-   * more) and must have a location that is a subset of this object's.  In order\n+   * object must have all the certifcates this object has (but may have more),\n+   * and must have a location that is a subset of this object's.  In order\n    * for this object to imply the specified object, the following must be\n-   * true:\n-   * <p>\n-   * <ol>\n-   * <li>The specified <code>CodeSource</code> must not be <code>null</code>.\n-   * <li>If the specified <code>CodeSource</code> has a certificate list, \n-   * all of that object's certificates must be present in the certificate\n-   * list of this object.\n+   * true:<ol>\n+   * <li><em>codesource</em> must not be <code>null</code>.</li>\n+   * <li>If <em>codesource</em> has a certificate list, all of it's\n+   *     certificates must be present in the certificate list of this\n+   *     code source.</li>\n    * <li>If this object does not have a <code>null</code> location, then\n-   * the following addtional tests must be passed.\n-   * <ol>\n-   * <li>The specified <code>CodeSource</code> must not have a <code>null</code> location.\n-   * <li>The specified <code>CodeSource</code>'s location must be equal to\n-   * this object's location, or<br>\n-   * <ul>\n-   * <li>The specifiec <code>CodeSource</code>'s location protocol, port, \n-   * and ref (aka, anchor) must equal this objects, and\n-   * <li>The specified <code>CodeSource</code>'s location host must imply this\n-   * object's location host, as determined by contructing \n-   * <code>SocketPermission</code> objects from each with no action list and\n-   * using that classes's <code>implies</code> method. And,\n-   * <li>If this object's location file ends with a '/', then the specified\n-   * object's location file must start with this object's location file.\n-   * Otherwise, the specified object's location file must start with this\n-   * object's location file with the '/' character appended to it.\n-   * </ul>\n-   * </ol>\n+   *     the following addtional tests must be passed.<ol>\n+   *     <li><em>codesource</em> must not have a <code>null</code>\n+   *         location.</li>\n+   *     <li><em>codesource</em>'s location must be equal to this object's\n+   *         location, or<br><ul>\n+   *         <li><em>codesource</em>'s location protocol, port, and ref (aka,\n+   *             anchor) must equal this objects</li>\n+   *         <li><em>codesource</em>'s location host must imply this object's\n+   *             location host, as determined by contructing\n+   *             <code>SocketPermission</code> objects from each with no\n+   *             action list and using that classes's <code>implies</code>\n+   *             method</li>\n+   *         <li>If this object's location file ends with a '/', then the\n+   *             specified object's location file must start with this\n+   *             object's location file. Otherwise, the specified object's\n+   *             location file must start with this object's location file\n+   *             with the '/' character appended to it.</li>\n+   *         </ul></li>\n+   *     </ol>\n    * </ol>\n    *\n-   * @param cs The <code>CodeSource</code> to test against this object\n+   * <p>For example, each of these locations imply the location\n+   * \"http://java.sun.com/classes/foo.jar\":<ul>\n+   * <pre>\n+   * http:\n+   * http://*.sun.com/classes/*\n+   * http://java.sun.com/classes/-\n+   * http://java.sun.com/classes/foo.jar\n+   * </pre>\n+   * Note that the code source with null location and null certificates implies\n+   * all other code sources.\n    *\n-   * @return <code>true</code> if this specified <code>CodeSource</code> is specified by this object, <code>false</code> otherwise.\n+   * @param cs the <code>CodeSource</code> to test against this object\n+   * @return true if this specified <code>CodeSource</code> is implied\n    */\n   public boolean implies(CodeSource cs)\n   {\n     if (cs == null)\n       return false;\n-\n-    // First check the certificate list\n-    java.security.cert.Certificate[] their_certs = cs.getCertificates();\n-    java.security.cert.Certificate[] our_certs = getCertificates();\n-\n-    if (our_certs != null)\n-      {\n-\tif (their_certs == null)\n-\t  return false;\n-\n-\tfor (int i = 0; i < our_certs.length; i++)\n-\t  {\n-\t    int j;\n-\t    for (j = 0; j < their_certs.length; j++)\n-\t      if (our_certs[i].equals(their_certs[j]))\n-\t\tbreak;\n-\n-\t    if (j == their_certs.length)\n-\t      return false;\n-\t  }\n-      }\n-\n-    // Next check the location\n-    URL their_loc = getLocation();\n-    URL our_loc = getLocation();\n-\n-    if (our_loc == null)\n-      return true;\n-    else if (their_loc == null)\n+    // First check the certificate list.\n+    if (certs != null && (cs.certs == null || ! certs.containsAll(cs.certs)))\n       return false;\n-\n-    if (!our_loc.getProtocol().equals(their_loc.getProtocol()))\n+    // Next check the location.\n+    if (location == null)\n+      return true;\n+    if (cs.location == null\n+        || ! location.getProtocol().equals(cs.location.getProtocol())\n+        || (location.getPort() != -1\n+            && location.getPort() != cs.location.getPort())\n+        || (location.getRef() != null\n+            && ! location.getRef().equals(cs.location.getRef())))\n       return false;\n-\n-    if (our_loc.getPort() != -1)\n-      if (our_loc.getPort() != their_loc.getPort())\n-\treturn false;\n-\n-    if (our_loc.getRef() != null)\n-      if (!our_loc.getRef().equals(their_loc.getRef()))\n-\treturn false;\n-\n-    // See javadoc comments for what we are doing here.\n-    if (our_loc.getHost() != null)\n+    if (location.getHost() != null)\n       {\n-\tString their_host = their_loc.getHost();\n-\tif (their_host == null)\n-\t  return false;\n-\n-\tSocketPermission our_sockperm =\n-\t  new SocketPermission(our_loc.getHost(), \"accept\");\n-\tSocketPermission their_sockperm =\n-\t  new SocketPermission(their_host, \"accept\");\n-\n-\tif (!our_sockperm.implies(their_sockperm))\n-\t  return false;\n+        String their_host = cs.location.getHost();\n+        if (their_host == null)\n+          return false;\n+        SocketPermission our_sockperm =\n+          new SocketPermission(location.getHost(), \"accept\");\n+        SocketPermission their_sockperm =\n+          new SocketPermission(their_host, \"accept\");\n+        if (! our_sockperm.implies(their_sockperm))\n+          return false;\n       }\n-\n-    String our_file = our_loc.getFile();\n+    String our_file = location.getFile();\n     if (our_file != null)\n       {\n-\tif (!our_file.endsWith(\"/\"))\n-\t  our_file = our_file + \"/\";\n-\n-\tString their_file = their_loc.getFile();\n-\tif (their_file == null)\n-\t  return false;\n-\n-\tif (!their_file.startsWith(our_file))\n-\t  return false;\n+        if (! our_file.endsWith(\"/\"))\n+          our_file += \"/\";\n+        String their_file = cs.location.getFile();\n+        if (their_file == null\n+            || ! their_file.startsWith(our_file))\n+          return false;\n       }\n-\n     return true;\n   }\n \n   /**\n-   * This method tests the specified <code>Object</code> for equality with\n-   * this object.  This will be true if and only if:\n-   * <p>\n-   * <ul>\n-   * <li>The specified object is not <code>null</code>.\n-   * <li>The specified object is an instance of <code>CodeSource</code>.\n-   * <li>The specified object's location is the same as this object's.\n-   * <li>The specified object's certificate list contains the exact same\n-   * entries as the object's.  Note that the order of the certificate lists\n-   * is not significant.\n-   * </ul>\n-   *\n-   * @param obj The <code>Object</code> to test against.\n+   * This method returns a <code>String</code> that represents this object.\n+   * The result is in the format <code>\"(\" + getLocation()</code> followed\n+   * by a space separated list of certificates (or \"<no certificates>\"),\n+   * followed by <code>\")\"</code>.\n    *\n-   * @return <code>true</code> if the specified object is equal to this one, <code>false</code> otherwise.\n+   * @return a <code>String</code> for this object\n    */\n-  public boolean equals(Object obj)\n+  public String toString()\n   {\n-    if (obj == null)\n-      return false;\n-\n-    if (!(obj instanceof CodeSource))\n-      return false;\n-\n-    CodeSource cs = (CodeSource) obj;\n-\n-    // First check the certificate list\n-    java.security.cert.Certificate[] their_certs = cs.getCertificates();\n-    java.security.cert.Certificate[] our_certs = getCertificates();\n-\n-    if ((our_certs == null) && (their_certs != null))\n-      return false;\n-    else if ((our_certs != null) && (their_certs == null))\n-      return false;\n-\n-    if (our_certs != null)\n+    StringBuffer sb = new StringBuffer(\"(\").append(location);\n+    if (certs == null || certs.isEmpty())\n+      sb.append(\" <no certificates>\");\n+    else\n       {\n-\tif (our_certs.length != their_certs.length)\n-\t  return false;\n-\n-\tfor (int i = 0; i < our_certs.length; i++)\n-\t  {\n-\t    int j;\n-\t    for (j = 0; j < their_certs.length; j++)\n-\t      if (our_certs[i].equals(their_certs[j]))\n-\t\tbreak;\n-\n-\t    if (j == their_certs.length)\n-\t      return false;\n-\t  }\n+        Iterator iter = certs.iterator();\n+        for (int i = certs.size(); --i >= 0; )\n+          sb.append(' ').append(iter.next());\n       }\n-\n-    // Now the location\n-    URL their_loc = cs.getLocation();\n-    URL our_loc = getLocation();\n-\n-    if ((our_loc == null) && (their_loc != null))\n-      return false;\n-\n-    if (!our_loc.equals(their_loc))\n-      return false;\n-\n-    return true;\n+    return sb.append(\")\").toString();\n   }\n \n   /**\n-   * This method returns a hash value for this object.\n+   * Reads this object from a serialization stream.\n    *\n-   * @return A hash value for this object.\n+   * @param s the input stream\n+   * @throws IOException if reading fails\n+   * @throws ClassNotFoundException if deserialization fails\n+   * @serialData this reads the location, then expects an int indicating the\n+   *             number of certificates. Each certificate is a String type\n+   *             followed by an int encoding length, then a byte[] encoding\n    */\n-  public int hashCode()\n+  private void readObject(ObjectInputStream s)\n+    throws IOException, ClassNotFoundException\n   {\n-    URL location = getLocation();\n-    if (location == null)\n-      return System.identityHashCode(this);\n-\n-    return location.hashCode();\n+    s.defaultReadObject();\n+    int count = s.readInt();\n+    certs = new HashSet();\n+    while (--count >= 0)\n+      {\n+        String type = (String) s.readObject();\n+        int bytes = s.readInt();\n+        byte[] encoded = new byte[bytes];\n+        for (int i = 0; i < bytes; i++)\n+          encoded[i] = s.readByte();\n+        ByteArrayInputStream stream = new ByteArrayInputStream(encoded);\n+        try\n+          {\n+            CertificateFactory factory = CertificateFactory.getInstance(type);\n+            certs.add(factory.generateCertificate(stream));\n+          }\n+        catch (CertificateException e)\n+          {\n+            // XXX Should we ignore this certificate?\n+          }\n+      }\n   }\n \n   /**\n-   * This method returns a <code>String</code> that represents this object.\n-   * This <code>String</code> will contain the object's hash code, location,\n-   * and certificate list.\n+   * Writes this object to a serialization stream.\n    *\n-   * @return A <code>String</code> for this object\n+   * @param s the output stream\n+   * @throws IOException if writing fails\n+   * @serialData this writes the location, then writes an int indicating the\n+   *             number of certificates. Each certificate is a String type\n+   *             followed by an int encoding length, then a byte[] encoding\n    */\n-  public String toString()\n+  private void writeObject(ObjectOutputStream s) throws IOException\n   {\n-    StringBuffer sb = new StringBuffer(\"\");\n-\n-    sb.append(super.toString() + \" (\" + linesep);\n-    sb.append(\"Location: \" + getLocation() + linesep);\n-\n-    java.security.cert.Certificate[] certs = getCertificates();\n+    s.defaultWriteObject();\n     if (certs == null)\n-      sb.append(\"<none>\" + linesep);\n+      s.writeInt(0);\n     else\n-      for (int i = 0; i < certs.length; i++)\n-\tsb.append(certs[i] + linesep);\n-\n-    sb.append(\")\" + linesep);\n-\n-    return sb.toString();\n+      {\n+        int count = certs.size();\n+        s.writeInt(count);\n+        Iterator iter = certs.iterator();\n+        while (--count >= 0)\n+          {\n+            Certificate c = (Certificate) iter.next();\n+            s.writeObject(c.getType());\n+            byte[] encoded;\n+            try\n+              {\n+                encoded = c.getEncoded();\n+              }\n+            catch (CertificateEncodingException e)\n+              {\n+                // XXX Should we ignore this certificate?\n+                encoded = null;\n+              }\n+            if (encoded == null)\n+              s.writeInt(0);\n+            else\n+              {\n+                s.writeInt(encoded.length);\n+                for (int i = 0; i < encoded.length; i++)\n+                  s.writeByte(encoded[i]);\n+              }\n+          }\n+      }\n   }\n-}\n+} // class CodeSource"}, {"sha": "f5c8d627de67986b1342ef4e0e1db3515f4f0f17", "filename": "libjava/java/security/DigestException.java", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FDigestException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FDigestException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDigestException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* DigestException.java -- A generic message digest exception\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,29 +38,30 @@\n package java.security;\n \n /**\n- * This exception indicates that a generic message digest exception has \n+ * This exception indicates that a generic message digest exception has\n  * occurred.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @status updated to 1.4\n  */\n public class DigestException extends GeneralSecurityException\n {\n   /**\n-   * This method initializes a new <code>DigestException</code> with no\n-   * descriptive message.\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 5821450303093652515L;\n+\n+  /**\n+   * Create a new instance with no descriptive message.\n    */\n   public DigestException()\n   {\n-    super();\n   }\n \n   /**\n-   * This method initializes a new instance of <code>DigestException</code>\n-   * with a descriptive error message.\n+   * Create a new instance with a descriptive error message.\n    *\n-   * @param msg The descriptive message\n+   * @param msg the descriptive message\n    */\n   public DigestException(String msg)\n   {"}, {"sha": "e191e4a6398f209afcf9faf854eea9e48ec2be07", "filename": "libjava/java/security/DigestOutputStream.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FDigestOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FDigestOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDigestOutputStream.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -112,7 +112,7 @@ public void write(int b) throws IOException\n     if (state)\n       digest.update((byte) b);\n \n-    super.write(b);\n+    out.write(b);\n   }\n \n   /**\n@@ -131,7 +131,7 @@ public void write(byte[]b, int off, int len) throws IOException\n     if (state)\n       digest.update(b, off, len);\n \n-    super.write(b, off, len);\n+    out.write(b, off, len);\n   }\n \n   /**"}, {"sha": "5d5397a5568323e6d55ad37532094b53819df21b", "filename": "libjava/java/security/DomainCombiner.java", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FDomainCombiner.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FDomainCombiner.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDomainCombiner.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* DomainCombiner.java - Combines ProtectionDomains\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+/* DomainCombiner.java -- Combines ProtectionDomains\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,27 +38,30 @@\n package java.security;\n \n /**\n-   A public interface used to combine two ProtectionDomains in a new\n-   ProtectionDomain and update the current Protection Domains\n-   associated with the current AccessControllerContext.\n-\n-   It can add, subtract, or update ProtectionDomains or possibly\n-   remove duplicates or any possible complex action but just not add\n-   ones that do not already exist in either array.\n-\n-   @since JDK 1.3\n-   @author Mark Benvenuto \n+ * A public interface used to combine two ProtectionDomains in a new\n+ * ProtectionDomain and update the current Protection Domains\n+ * associated with the current AccessControlContext.\n+ *\n+ * It can add, subtract, or update ProtectionDomains or possibly\n+ * remove duplicates or any possible complex action but just not add\n+ * ones that do not already exist in either array.\n+ *\n+ * @author Mark Benvenuto\n+ * @see AccessControlContext\n+ * @see AccessController\n+ * @since 1.3\n+ * @status updated to 1.4\n  */\n public interface DomainCombiner\n {\n   /**\n-     Combines the current ProtectionDomains of the Thread with new\n-     ProtectionDomains.\n-\n-     @param currentDomains - the ProtectionDomains for the current thread.\n-     @param assignedDomains - ProtectionsDomains to add\n-     @returns a new array of all the ProtectionDomains \n+   * Combines the current ProtectionDomains of the Thread with new\n+   * ProtectionDomains.\n+   *\n+   * @param currentDomains - the ProtectionDomains for the current thread.\n+   * @param assignedDomains - ProtectionsDomains to add\n+   * @return a new array of all the ProtectionDomains\n    */\n-  public ProtectionDomain[] combine(ProtectionDomain[]currentDomains,\n-\t\t\t\t    ProtectionDomain[]assignedDomains);\n-}\n+  ProtectionDomain[] combine(ProtectionDomain[] currentDomains,\n+                             ProtectionDomain[] assignedDomains);\n+} // interface DomainCombiner"}, {"sha": "d1db3c5d6fb3f7938b6e4248302ec2172ab488ac", "filename": "libjava/java/security/GeneralSecurityException.java", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FGeneralSecurityException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FGeneralSecurityException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FGeneralSecurityException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* GeneralSecurityException.java -- Common superclass of security exceptions\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,31 +41,32 @@\n  * This class is the common superclass of all security exceptions.  All\n  * exceptions in java.security extend this class with the exception (no\n  * pun intended) of <code>AccessControlException</code> and \n- * <code>CertificateException</code> which extend <code>SecurityException</code>\n- * and <code>ProviderException</code> which extens <code>RuntimeException</code>.\n- * and <code>InvalidParamterException</code> which extends\n- * <code>IllegalArgumentException</code>.\n+ * <code>CertificateException</code> (which extend\n+ * <code>SecurityException</code>), <code>ProviderException</code>\n+ * (<code>RuntimeException</code>), and <code>InvalidParamterException</code>\n+ * (<code>IllegalArgumentException</code>).\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @status updated to 1.4\n  */\n public class GeneralSecurityException extends Exception\n {\n   /**\n-   * This method initializes a new instance of <code>GeneralSecurityException</code> \n-   * with no descriptive error message.\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 894798122053539237L;\n+\n+  /**\n+   * Create a new instance with no descriptive error message.\n    */\n   public GeneralSecurityException()\n   {\n-    super();\n   }\n \n   /**\n-   * This method initializes a new instance of <code>GeneralSecurityException</code>\n-   * with a descriptive error message.\n+   * Create a new instance with a descriptive error message.\n    *\n-   * @param msg The descriptive error message.\n+   * @param msg the descriptive error message\n    */\n   public GeneralSecurityException(String msg)\n   {"}, {"sha": "2654ba70c04d3ca6cf86a22e358b6f8ca4c12845", "filename": "libjava/java/security/Guard.java", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FGuard.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FGuard.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FGuard.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* Guard.java -- Check access to a guarded object\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,21 +41,20 @@\n  * This interface specifies a mechanism for querying whether or not\n  * access is allowed to a guarded object.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @see GuardedObject\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public interface Guard\n {\n   /**\n    * This method tests whether or not access is allowed to the specified\n-   * guarded object.  Access is allowed if this method returns silently.  If\n+   * guarded object. Access is allowed if this method returns silently. If\n    * access is denied, an exception is generated.\n    *\n-   * @param obj The <code>Object</code> to test\n-   *\n-   * @exception SecurityException If access to the object is denied.\n+   * @param obj the <code>Object</code> to test\n+   * @throws SecurityException if access to the object is denied\n    */\n-  public abstract void checkGuard(Object obj) throws SecurityException;\n-\n-}\n+  void checkGuard(Object obj);\n+} // interface Guard"}, {"sha": "f07d81142e46192087507f30d5e4642e41e229bf", "filename": "libjava/java/security/GuardedObject.java", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FGuardedObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FGuardedObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FGuardedObject.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* GuardedObject.java -- An object protected by a Guard\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,38 +38,50 @@\n package java.security;\n \n import java.io.Serializable;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n \n /**\n  * This class is an object that is guarded by a <code>Guard</code> object.\n- * The object that is being guarded is retrieved by a call to the only \n+ * The object that is being guarded is retrieved by a call to the only\n  * method in this class - <code>getObject</code>.  That method returns the\n- * guarded <code>Object</code> after first checking with the \n+ * guarded <code>Object</code> after first checking with the\n  * <code>Guard</code>.  If the <code>Guard</code> disallows access, an\n  * exception will be thrown.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public class GuardedObject implements Serializable\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -5240450096227834308L;\n+\n   /**\n    * This is the Guard that is protecting the object.\n+   *\n+   * @serial the guard\n    */\n-  private Guard guard;\n+  private final Guard guard;\n \n   /**\n    * This is the object that is being guarded.\n+   *\n+   * @serial the protected object\n    */\n-  private Object object;\n+  private final Object object;\n \n   /**\n    * This method initializes a new instance of <code>GuardedObject</code>\n    * that protects the specified <code>Object</code> using the specified\n-   * <code>Guard</code>\n+   * <code>Guard</code>. A null guard means there are no restrictions on\n+   * accessing the object.\n    *\n-   * @param object The <code>Object</code> to guard\n-   * @param guard The <code>Guard</code> that is protecting the object.\n+   * @param object the <code>Object</code> to guard\n+   * @param guard the <code>Guard</code> that is protecting the object\n    */\n   public GuardedObject(Object object, Guard guard)\n   {\n@@ -78,18 +90,31 @@ public GuardedObject(Object object, Guard guard)\n   }\n \n   /**\n-   * This method first call the <code>checkGuard</code> method on the \n-   * <code>Guard</code> object protecting the guarded object.  If the \n+   * This method first call the <code>checkGuard</code> method on the\n+   * <code>Guard</code> object protecting the guarded object.  If the\n    * <code>Guard</code> disallows access, an exception is thrown, otherwise\n    * the <code>Object</code> is returned.\n    *\n    * @return The object being guarded\n+   * @throws SecurityException if access is denied\n+   */\n+  public Object getObject()\n+  {\n+    if (guard != null)\n+      guard.checkGuard(object);\n+    return object;\n+  }\n+\n+  /**\n+   * Ensures that serialization is legal, by checking the guard.\n    *\n-   * @exception SecurityException If the <code>Guard</code> disallows access to the object.\n+   * @param s the stream to write to\n+   * @throws IOException if the underlying stream fails\n    */\n-  public Object getObject() throws SecurityException\n+  private void writeObject(ObjectOutputStream s) throws IOException\n   {\n-    guard.checkGuard(object);\n-    return (object);\n+    if (guard != null)\n+      guard.checkGuard(object);\n+    s.defaultWriteObject();\n   }\n-}\n+} // class GuardedObject"}, {"sha": "40f953079bef92f3b8cede21ba3078e6e78a8b6c", "filename": "libjava/java/security/InvalidAlgorithmParameterException.java", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FInvalidAlgorithmParameterException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FInvalidAlgorithmParameterException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FInvalidAlgorithmParameterException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,6 @@\n-/* InvalidAlgorithmParameterException.java\n-   Copyright (C) 2000  Free Software Foundation, Inc.\n+/* InvalidAlgorithmParameterException.java -- an invalid parameter to a\n+   security algorithm\n+   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,23 +39,33 @@\n package java.security;\n \n /**\n+ * Thrown for an invalid security algorithm parameter.\n+ *\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 2, 2000.\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n-\n-/**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n-\n-// JDK1.2\n-public class InvalidAlgorithmParameterException extends GeneralSecurityException\n+public class InvalidAlgorithmParameterException\n+  extends GeneralSecurityException\n {\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = 2864672297499471472L;\n+\n+  /**\n+   * Construct an exception with no message.\n+   */\n   public InvalidAlgorithmParameterException()\n   {\n     super();\n   }\n \n+  /**\n+   * Construct an exception with a message.\n+   *\n+   * @param msg the message\n+   */\n   public InvalidAlgorithmParameterException(String msg)\n   {\n     super(msg);"}, {"sha": "373e8625a6802c778e440cd5d6d84992de8c1324", "filename": "libjava/java/security/InvalidKeyException.java", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FInvalidKeyException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FInvalidKeyException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FInvalidKeyException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* InvalidKeyException -- thrown for an invalid key\n+   Copyright (C) 2000, 2002 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -37,22 +38,30 @@\n package java.security;\n \n /**\n+ * Thrown for an invalid key.\n+ *\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n+ * @status updated to 1.4\n  */\n-\n-/**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n-\n public class InvalidKeyException extends KeyException\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 5698479920593359816L;\n+\n+  /**\n+   * Construct an exception with no message.\n+   */\n   public InvalidKeyException()\n   {\n-    super();\n   }\n \n+  /**\n+   * Construct an exception with a message.\n+   *\n+   * @param msg the message\n+   */\n   public InvalidKeyException(String msg)\n   {\n     super(msg);"}, {"sha": "220899197fa8dfbbc3310b7e030c264c7582d9be", "filename": "libjava/java/security/InvalidParameterException.java", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FInvalidParameterException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FInvalidParameterException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FInvalidParameterException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* InvalidParameterException.java -- an invalid parameter in the JCA/JCE engine\n+   Copyright (C) 2000, 2002 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -37,22 +38,31 @@\n package java.security;\n \n /**\n+ * Thrown when an invalid parameter is passed to a method of the JCA/JCE\n+ * engine classes.\n+ *\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n+ * @status updated to 1.4\n  */\n-\n-/**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n-\n public class InvalidParameterException extends IllegalArgumentException\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -857968536935667808L;\n+\n+  /**\n+   * Construct an exception with no message.\n+   */\n   public InvalidParameterException()\n   {\n-    super();\n   }\n \n+  /**\n+   * Construct an exception with a message.\n+   *\n+   * @param msg the message\n+   */\n   public InvalidParameterException(String msg)\n   {\n     super(msg);"}, {"sha": "ff23a05e20895f9ece5ce75f83c59ec3e64aeec8", "filename": "libjava/java/security/Key.java", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKey.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* Key.java -- A abstract representation of a digital key\n-   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -43,44 +43,52 @@\n  * This interfaces models the base characteristics that all keys must\n  * have.  These are:  a key algorithm, an encoded form, and a format used\n  * to encode the key.  Specific key types inherit from this interface.\n- * <p>\n  * Note that since this interface extends <code>Serializable</code>, all\n- * keys may be serialized.\n+ * keys may be serialized. Keys are generally obtained through key generators,\n+ * including {@link KeyFactory}.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @see PublicKey\n+ * @see PrivateKey\n+ * @see KeyPair\n+ * @see KeyPairGenerator\n+ * @see KeyFactory\n+ * @see KeySpec\n+ * @see Identity\n+ * @see Signer\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public interface Key extends Serializable\n {\n- /**\n+  /**\n    * The verion identifier used for serialization.\n    */\n-  public static final long serialVersionUID = 6603384152749567654L;\n+  long serialVersionUID = 6603384152749567654L;\n \n   /**\n    * This method returns the name of the algorithm for this key.  This is a\n    * <code>String</code> such as \"RSA\".\n    *\n-   * @return The name of the algorithm in use\n+   * @return the name of the algorithm in use\n    */\n-  public abstract String getAlgorithm();\n+  String getAlgorithm();\n \n   /**\n    * This method returns the name of the encoding format for this key.  This\n    * is the name of the ASN.1 data format used for this key, such as\n    * \"X.509\" or \"PKCS#8\".  This method returns <code>null</code> if this key\n    * does not have an encoding format.\n    *\n-   * @return The name of the encoding format for this key, or <code>null</code> if there is no such format.\n+   * @return the name of the encoding format for this key, or null\n    */\n-  public abstract String getFormat();\n+  String getFormat();\n \n   /**\n    * This method returns the encoded form of the key.  If this key does not\n-   * support encoding, this method returns <code>null</code>\n+   * support encoding, this method returns <code>null</code>.\n    *\n-   * @return The encoded form of the key, or <code>null</code> if no encoded form is available.\n+   * @return the encoded form of the key, or null\n    */\n-  public abstract byte[] getEncoded();\n-}\n+  byte[] getEncoded();\n+} // interface Key"}, {"sha": "3b7d3886e151e62af6ce0a4bbcdd20069ca1f540", "filename": "libjava/java/security/KeyException.java", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FKeyException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FKeyException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* KeyException.java -- Thrown when there is a problem with a key\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -40,26 +40,30 @@\n /**\n  * This exception is thrown when there is a problem with a key.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @see Key\n+ * @status updated to 1.4\n  */\n public class KeyException extends GeneralSecurityException\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -7483676942812432108L;\n+\n   /**\n    * This method initializes a new instance of <code>KeyException</code>\n    * with no descriptive message.\n    */\n   public KeyException()\n   {\n-    super();\n   }\n \n   /**\n    * This method initializes a new instance of <code>KeyException</code>\n    * with a descriptive message.\n    *\n-   * @param msg The descriptive message.\n+   * @param msg the descriptive message\n    */\n   public KeyException(String msg)\n   {"}, {"sha": "52c2786294f4613bec146f909fcd89e17d4b00a3", "filename": "libjava/java/security/KeyManagementException.java", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FKeyManagementException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FKeyManagementException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyManagementException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* KeyManagementException.java -- What it says\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* KeyManagementException.java -- an exception in key management\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,29 +38,31 @@\n package java.security;\n \n /**\n-   * This exception is thrown whenever a problem related to the management of\n-   * security keys is encountered.\n-   *\n-   * @version 0.0\n-   *\n-   * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * This exception is thrown whenever a problem related to the management of\n+ * security keys is encountered.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @see Key\n+ * @status updated to 1.4\n  */\n public class KeyManagementException extends KeyException\n {\n   /**\n-   * This method initializes a new instance of <code>KeyManagementException</code>\n-   * with no descriptive error message.\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 947674216157062695L;\n+\n+  /**\n+   * Create a new instance with no descriptive error message.\n    */\n   public KeyManagementException()\n   {\n-    super();\n   }\n \n   /**\n-   * This method initializes a new instance of <code>KeyManagementException</code>\n-   * with a descriptive error message.\n+   * Create a new instance with a descriptive error message.\n    *\n-   * @param msg The descriptive error message\n+   * @param msg the descriptive error message\n    */\n   public KeyManagementException(String msg)\n   {"}, {"sha": "369587a59847ac02f0cbaef1658edfc48fcc792f", "filename": "libjava/java/security/KeyStoreException.java", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FKeyStoreException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FKeyStoreException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyStoreException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* KeyStoreException.java -- Indicates a problem with the key store\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -40,26 +40,28 @@\n /**\n  * Indicates a problem with the key store.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n public class KeyStoreException extends GeneralSecurityException\n {\n   /**\n-   * This method initializes a new <code>KeyStoreException</code> with no\n-   * detailed error message.\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = -1119353179322377262L;\n+\n+  /**\n+   * Create a new instance detailed error message.\n    */\n   public KeyStoreException()\n   {\n-    super();\n   }\n \n   /**\n-   * This method initializes a new <code>KeyStoreException</code> with a\n-   * detailed error message.\n+   * Create a new instance with a detailed error message.\n    *\n-   * @param msg The descriptive error message.\n+   * @param msg the descriptive error message\n    */\n   public KeyStoreException(String msg)\n   {"}, {"sha": "be9dfd0896ba21b4ea1d0d7affa4529df5cc2677", "filename": "libjava/java/security/MessageDigest.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FMessageDigest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FMessageDigest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FMessageDigest.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -170,7 +170,7 @@ public void update(byte input)\n    */\n   public void update(byte[]input, int offset, int len)\n   {\n-    engineUpdate(input, 0, input.length);\n+    engineUpdate(input, offset, len);\n   }\n \n   /**"}, {"sha": "31e00537a50e6b6bdd5a42f2aa458d53f8d13360", "filename": "libjava/java/security/NoSuchAlgorithmException.java", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FNoSuchAlgorithmException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FNoSuchAlgorithmException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FNoSuchAlgorithmException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* NoSuchAlgorithmException.java -- What it says\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* NoSuchAlgorithmException.java -- an algorithm was not available\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,26 +41,27 @@\n  * This exception is thrown when the requested security algorithm is\n  * not available\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @status updated to 1.4\n  */\n public class NoSuchAlgorithmException extends GeneralSecurityException\n {\n   /**\n-   * This method initializes a new instance of <code>NoSuchAlgorithmException</code>\n-   * with no descriptive error message.\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -7443947487218346562L;\n+\n+  /**\n+   * Create a new instance with no descriptive error message.\n    */\n   public NoSuchAlgorithmException()\n   {\n-    super();\n   }\n \n   /**\n-   * This method initializes a new instance of <code>NoSuchAlgorithmException</code>\n-   * with a descriptive error message.\n+   * Create a new instance with a descriptive error message.\n    *\n-   * @param msg The descriptive error message\n+   * @param msg the descriptive error message\n    */\n   public NoSuchAlgorithmException(String msg)\n   {"}, {"sha": "546b2dc6190bfd746015958ca342f81be4df3489", "filename": "libjava/java/security/NoSuchProviderException.java", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FNoSuchProviderException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FNoSuchProviderException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FNoSuchProviderException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* NoSuchProviderException.java -- What it says\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* NoSuchProviderException.java -- thrown when a provider is not found\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,26 +41,27 @@\n  * This exception is thrown when the requested security provider is\n  * not available.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @status updated to 1.4\n  */\n public class NoSuchProviderException extends GeneralSecurityException\n {\n   /**\n-   * This method initializes a new instance of <code>NoSuchProviderException</code>\n-   * with no descriptive error message.\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 8488111756688534474L;\n+\n+  /**\n+   * Create a new instance with no descriptive error message.\n    */\n   public NoSuchProviderException()\n   {\n-    super();\n   }\n \n   /**\n-   * This method initializes a new instance of <code>NoSuchProviderException</code>\n-   * with a descriptive error message.\n+   * Create a new instance with a descriptive error message.\n    *\n-   * @param msg The descriptive error message.\n+   * @param msg the descriptive error message\n    */\n   public NoSuchProviderException(String msg)\n   {"}, {"sha": "58702da2c0c23831e52d93d4400116cb43cd8c32", "filename": "libjava/java/security/Permission.java", "status": "modified", "additions": 74, "deletions": 52, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPermission.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* Permission.java -- The superclass for all permission objects\n-   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,7 +41,7 @@\n \n /**\n  * This class is the abstract superclass of all classes that implement\n- * the concept of a permission.  A permission consists of a permission name \n+ * the concept of a permission.  A permission consists of a permission name\n  * and optionally a list of actions that relate to the permission.  The\n  * actual meaning of the name of the permission is defined only in the\n  * context of a subclass.  It may name a resource to which access permissions\n@@ -51,115 +51,137 @@\n  * actions associated with them.  That is, you either have the permission\n  * or you don't.\n  *\n- * The most important method in this class is <code>implies</code>.  This\n+ * <p>The most important method in this class is <code>implies</code>.  This\n  * checks whether if one has this permission, then the specified\n  * permission is also implied.  As a conceptual example, consider the\n  * permissions \"Read All Files\" and \"Read File foo\".  The permission\n  * \"Read All Files\" implies that the caller has permission to read the\n  * file foo.\n  *\n- * <code>Permission</code>'s are not dynamic objects.  Once created, a \n- * <code>Permission</code>'s name and action list cannot be changed.\n+ * <p><code>Permission</code>'s must be immutable - do not change their\n+ * state after creation.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @see Permissions\n+ * @see PermissionCollection\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public abstract class Permission implements Guard, Serializable\n {\n   /**\n-   * This is the name assigned to this permission object.\n+   * Compatible with JDK 1.1+.\n    */\n-  private String name;\t\t// Taken from the serializable form information\n+  private static final long serialVersionUID = -5636570222231596674L;\n \n   /**\n-   * This method initializes a new instance of <code>Permission</code> to\n-   * have the specified name.\n+   * This is the name assigned to this permission object.\n+   *\n+   * @serial the name of the permission\n    */\n-  public Permission(String name)\n-  {\n-    this.name = name;\n-  }\n+  private String name;\n \n   /**\n-   * This method returns the name of this <code>Permission</code>\n+   * Create an instance with the specified name.\n    *\n-   * @return The name of this <code>Permission</code>\n+   * @param name the permission name\n    */\n-  public final String getName()\n+  public Permission(String name)\n   {\n-    return (name);\n+    this.name = name;\n   }\n \n-  /**\n-   * This method returns the list of actions for this <code>Permission</code>\n-   * as a <code>String</code>.\n-   *\n-   * @return The action list for this <code>Permission</code>.\n-   */\n-  public abstract String getActions();\n-\n   /**\n    * This method implements the <code>Guard</code> interface for this class.\n-   * It calls the <code>checkPermission</code> method in \n+   * It calls the <code>checkPermission</code> method in\n    * <code>SecurityManager</code> with this <code>Permission</code> as its\n    * argument.  This method returns silently if the security check succeeds\n    * or throws an exception if it fails.\n    *\n-   * @param obj The <code>Object</code> being guarded - ignored by this class\n-   *\n-   * @exception SecurityException If the security check fails\n+   * @param obj the <code>Object</code> being guarded - ignored by this class\n+   * @throws SecurityException if the security check fails\n+   * @see GuardedObject\n+   * @see SecurityManager#checkPermission(Permission)\n    */\n-  public void checkGuard(Object obj) throws SecurityException\n+  public void checkGuard(Object obj)\n   {\n     SecurityManager sm = System.getSecurityManager();\n     if (sm != null)\n       sm.checkPermission(this);\n   }\n \n-  /**\n-   * Check to see if this object equals OBJ.\n-   */\n-  public abstract boolean equals (Object obj);\n-\n   /**\n    * This method tests whether this <code>Permission</code> implies that the\n    * specified <code>Permission</code> is also granted.\n    *\n-   * @param perm The <code>Permission</code> to test against\n-   *\n-   * @return <code>true</code> if the specified <code>Permission</code> is implied by this one, <code>false</code> otherwise.\n+   * @param perm the <code>Permission</code> to test against\n+   * @return true if perm is implied by this\n    */\n   public abstract boolean implies(Permission perm);\n \n   /**\n-   * This method returns a hash code for this <code>Permission</code>.\n+   * Check to see if this object equals obj. Use <code>implies</code>, rather\n+   * than <code>equals</code>, when making access control decisions.\n    *\n-   * @return A hash value.\n+   * @param obj the object to compare to\n+   */\n+  public abstract boolean equals(Object obj);\n+\n+  /**\n+   * This method returns a hash code for this <code>Permission</code>. It\n+   * must satisfy the contract of <code>Object.hashCode</code>: it must be\n+   * the same for all objects that equals considers to be the same.\n+   *\n+   * @return a hash value\n    */\n   public abstract int hashCode();\n \n   /**\n-   * This method returns a <code>String</code> representation of this\n-   * <code>Permission</code> object.\n+   * Get the name of this <code>Permission</code>.\n    *\n-   * @return This object as a <code>String</code>.\n+   * @return the name\n    */\n-  public String toString()\n+  public final String getName()\n   {\n-    return (\"'\\\"\" + getClass().getName() + \"\\\" \\\"\" + getName() +\n-\t    \"\\\"\" + \" \\\"\" + getActions() + \"\\\")'\");\n+    return name;\n   }\n \n+  /**\n+   * This method returns the list of actions for this <code>Permission</code>\n+   * as a <code>String</code>. The string should be in canonical order, for\n+   * example, both <code>new FilePermission(f, \"write,read\")</code> and\n+   * <code>new FilePermission(f, \"read,write\")</code> have the action list\n+   * \"read,write\".\n+   *\n+   * @return the action list for this <code>Permission</code>\n+   */\n+  public abstract String getActions();\n+\n   /**\n    * This method returns an empty <code>PermissionCollection</code> object\n    * that can store permissions of this type, or <code>null</code> if no\n-   * such collection is defined.\n+   * such collection is defined. Subclasses must override this to provide\n+   * an appropriate collection when one is needed to accurately calculate\n+   * <code>implies</code>.\n    *\n-   * @return A new <code>PermissionCollection</code>\n+   * @return a new <code>PermissionCollection</code>\n    */\n   public PermissionCollection newPermissionCollection()\n   {\n     return null;\n   }\n-}\n+\n+  /**\n+   * This method returns a <code>String</code> representation of this\n+   * <code>Permission</code> object. This is in the format:\n+   * <code>'(' + getClass().getName() + ' ' + getName() + ' ' + getActions\n+   * + ')'</code>.\n+   *\n+   * @return this object as a <code>String</code>\n+   */\n+  public String toString()\n+  {\n+    return '(' + getClass().getName() + ' ' + getName() + ' '\n+      + getActions() + ')';\n+  }\n+} // class Permission"}, {"sha": "703767ed9a9bfba95099b4d78c80482299153080", "filename": "libjava/java/security/PermissionCollection.java", "status": "modified", "additions": 83, "deletions": 91, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPermissionCollection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPermissionCollection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPermissionCollection.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* PermissionCollection.java -- A collection of permission objects\n-   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -40,136 +40,128 @@\n import java.io.Serializable;\n import java.util.Enumeration;\n \n+/**\n+ * This class models a group of Java permissions.  It has convenient\n+ * methods for determining whether or not a given permission is implied\n+ * by any of the permissions in this collection.\n+ *\n+ * <p>Some care must be taken in storing permissions.  First, a collection of\n+ * the appropriate type must be created.  This is done by calling the\n+ * <code>newPermissionCollection</code> method on an object of the\n+ * permission class you wish to add to the collection.  If this method\n+ * returns <code>null</code>, any type of <code>PermissionCollection</code>\n+ * can be used to store permissions of that type.  However, if a\n+ * <code>PermissionCollection</code> collection object is returned, that\n+ * type must be used.\n+ *\n+ * <p>A <code>PermissionCollection</code> returned by the\n+ * <code>newPermissionCollection</code> method in a subclass of\n+ * <code>Permission</code> is a homogeneous collection.  It only will\n+ * hold permissions of one specified type - instances of the class that\n+ * created it.  Not all <code>PermissionCollection</code> subclasses\n+ * have to hold permissions of only one type however.  For example,\n+ * the <code>Permissions</code> class holds permissions of many types.\n+ *\n+ * <p>Since the <code>newPermissionCollection</code> in <code>Permission</code>\n+ * itself returns <code>null</code>, by default a permission can be stored\n+ * in any type of collection unless it overrides that method to create its\n+ * own collection type.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Permission\n+ * @see Permissions\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public abstract class PermissionCollection implements Serializable\n+{\n   /**\n-   * This class models a group of Java permissions.  It has convenient\n-   * methods for determining whether or not a given permission is implied\n-   * by any of the permissions in this collection.\n-   * <p>\n-   * Some care must be taken in storing permissions.  First, a collection of\n-   * the appropriate type must be created.  This is done by calling the\n-   * <code>newPermissionCollection</code> method on an object of the \n-   * permission class you wish to add to the collection.  If this method\n-   * returns <code>null</code>, any type of <code>PermissionCollection</code>\n-   * can be used to store permissions of that type.  However, if a\n-   * <code>PermissionCollection</code> collection object is returned, that\n-   * type must be used.  \n-   * <p>\n-   * The <code>PermissionCollection</code>'s returned\n-   * by the <code>newPermissionCollection</code> instance in a subclass of\n-   * <code>Permission</code> is a homogeneous collection.  It only will \n-   * hold permissions of one specified type - instances of the class that\n-   * created it.  Not all <code>PermissionCollection</code> subclasses\n-   * have to hold permissions of only one type however.  For example,\n-   * the <code>Permissions</code> class holds permissions of many types.\n-   * <p>\n-   * Since the <code>newPermissionCollection</code> in <code>Permission</code>\n-   * itself returns <code>null</code>, by default a permission can be stored\n-   * in any type of collection unless it overrides that method to create its\n-   * own collection type.\n-   *\n-   * @version 0.0\n-   *\n-   * @author Aaron M. Renn (arenn@urbanophile.com)\n+   * Compatible with JDK 1.1+.\n    */\n-public abstract class PermissionCollection\n-  extends Object\n-  implements Serializable\n-{\n-  private static final String linesep = null;\n-\n-  static\n-  {\n-    String linesep = System.getProperty(\"line.separator\");\n-    if (linesep == null);\n-      linesep = \"\\n\";\n-  }\n+  private static final long serialVersionUID = -6727011328946861783L;\n \n   /**\n    * Indicates whether or not this collection is read only.\n+   *\n+   * @serial if the collection is read-only\n    */\n   private boolean readOnly;\n \n   /**\n-   * This method initializes a new instance of <code>PermissionCollection</code>.\n-   * This is provided only as a default constructor and does nothing in this\n-   * class.\n+   * Create a new collection.\n    */\n   public PermissionCollection()\n   {\n   }\n \n   /**\n-   * This method tests whether or not this <code>PermissionCollection</code>\n-   * object is read only.\n+   * This method adds a new <code>Permission</code> object to the collection.\n+   *\n+   * @param perm the <code>Permission</code> to add\n    *\n-   * @return <code>true</code> if this collection is read only, <code>false</code> otherwise\n+   * @throws SecurityException if the collection is marked read only\n+   * @throws IllegalArgumentException if perm is of the wrong type\n    */\n-  public boolean isReadOnly()\n-  {\n-    return (readOnly);\n-  }\n+  public abstract void add(Permission perm);\n \n   /**\n-   * This method sets this <code>PermissionCollection</code> object to be\n-   * read only.  No further permissions can be added to it after calling this\n-   * method.\n-   */\n-  public void setReadOnly()\n-  {\n-    readOnly = true;\n-  }\n-\n- /**\n-   * This method adds a new <code>Permission</code> object to the collection.\n-   *\n-   * @param perm The <code>Permission</code> to add.\n+   * This method tests whether the specified <code>Permission</code> object is\n+   * implied by this collection of <code>Permission</code> objects.\n    *\n-   * @exception SecurityException If the collection is marked read only.\n-   * @exception IllegalArgumentException If a permission of the specified type cannot be added\n+   * @param perm the <code>Permission</code> object to test\n+   * @return true if the collection implies perm\n    */\n-  public abstract void\n-    add(Permission perm) throws SecurityException, IllegalArgumentException;\n+  public abstract boolean implies(Permission perm);\n \n   /**\n    * This method returns an <code>Enumeration</code> of all the objects in\n    * this collection.\n    *\n-   * @return An <code>Enumeration</code> of this collection's objects.\n+   * @return an <code>Enumeration</code> of this collection's objects\n    */\n   public abstract Enumeration elements();\n \n   /**\n-   * This method tests whether the specified <code>Permission</code> object is\n-   * implied by this collection of <code>Permission</code> objects.\n-   *\n-   * @param perm The <code>Permission</code> object to test.\n+   * This method sets this <code>PermissionCollection</code> object to be\n+   * read only.  No further permissions can be added to it after calling this\n+   * method.\n+   */\n+  public void setReadOnly()\n+  {\n+    readOnly = true;\n+  }\n+\n+  /**\n+   * This method tests whether or not this <code>PermissionCollection</code>\n+   * object is read only.\n    *\n-   * @return <code>true</code> if the specified <code>Permission</code> is implied by this collection, <code>false</code> otherwise.\n+   * @return true if this collection is read only\n    */\n-  public abstract boolean implies(Permission perm);\n+  public boolean isReadOnly()\n+  {\n+    return readOnly;\n+  }\n \n   /**\n    * This method returns a <code>String</code> representation of this\n-   * collection.  It will print the class name and has code in the same\n-   * manner as <code>Object.toString()</code> then print a listing of all\n-   * the <code>Permission</code> objects contained.\n+   * collection.  It is formed by:\n+   * <pre>\n+   * super.toString()\" (\\n\"\n+   *   // enumerate all permissions, one per line\n+   * \")\\n\"\n+   * </pre>\n    *\n-   * @return A <code>String</code> representing this object.\n+   * @return a <code>String</code> representing this object\n    */\n   public String toString()\n   {\n-    StringBuffer sb = new StringBuffer(\"\");\n+    StringBuffer sb = new StringBuffer(super.toString());\n \n-    sb.append(super.toString() + \" (\" + linesep);\n+    sb.append(\" (\\n\");\n     Enumeration e = elements();\n     while (e.hasMoreElements())\n-      {\n-\tObject obj = e.nextElement();\n-\tif (obj instanceof Permission)\n-\t  sb.append(((Permission) obj).toString() + linesep);\n-      }\n-\n-    sb.append(\")\" + linesep);\n-    return (sb.toString());\n+      sb.append(' ').append(e.nextElement()).append('\\n');\n+    return sb.append(\")\\n\").toString();\n   }\n-}\n+} // class PermissionCollection"}, {"sha": "11343f4784be0f6b19a114d2a46d477246925599", "filename": "libjava/java/security/Permissions.java", "status": "modified", "additions": 117, "deletions": 144, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPermissions.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPermissions.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPermissions.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* Permissions.java -- A collection of permission collections\n-   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n+/* Permissions.java -- a collection of permission collections\n+   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -43,32 +43,40 @@\n import java.util.NoSuchElementException;\n \n /**\n- * This class is a heterogeneous collection of permissions.  It is \n+ * This class is a heterogeneous collection of permissions.  It is\n  * organized as a collection of <code>PermissionCollection</code>'s stored\n  * in a hashtable.  Each individual <code>PermissionCollection</code>\n- * contains permissions of a single type.  If a specific type of \n+ * contains permissions of a single type.  If a specific type of\n  * <code>Permission</code> does not provide a collection type to use\n  * via its <code>newPermissionCollection</code> method, then a default\n  * collection type which stores its permissions in a hash table will be\n  * used.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.1\n  */\n-public final class Permissions\n-  extends PermissionCollection\n+public final class Permissions extends PermissionCollection\n   implements Serializable\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 4858622370623524688L;\n+\n   /**\n    * Holds instances of <code>AllPermission</code>.\n+   *\n+   * @serial the permission collection for AllPermission\n    */\n   private PermissionCollection allPermission;\n \n   /**\n    * This is the <code>Hashtable</code> that contains our collections.\n+   *\n+   * @serial maps Class to PermissionCollection\n    */\n-  Hashtable perms = new Hashtable();\n+  private final Hashtable perms = new Hashtable();\n \n   /**\n    * This method initializes a new instance of <code>Permissions</code>.\n@@ -82,83 +90,63 @@ public Permissions()\n    * will be stored in a <code>PermissionCollection</code> of the appropriate\n    * type, as determined by calling <code>newPermissionCollection</code> on\n    * the specified permission (if an appropriate collection does not already\n-   * exist).  If this object does not specify a particular type of collection,\n-   * a default collection which stores in permissions in a hash table will\n+   * exist). If this object does not specify a particular type of collection,\n+   * a default collection, which stores in permissions in a hash table, will\n    * be used.\n    *\n-   * @param perm The <code>Permission</code> object to be added to this collection.\n-   *\n-   * @exception SecurityException If this collection is marked as read only.\n-   * @exception IllegalArgumentException If the specified <code>Permission</code> cannot be added to this collection\n+   * @param perm the <code>Permission</code> to add\n+   * @throws SecurityException if this collection is marked as read only\n    */\n   public void add(Permission perm)\n-    throws SecurityException, IllegalArgumentException\n   {\n     if (isReadOnly())\n       throw new SecurityException(\"PermissionCollection is read only\");\n-\n     if (perm instanceof AllPermission)\n       {\n-\tif (allPermission == null)\n-\t  {\n-\t    allPermission = new\n-\t      DefaultPermissionCollection(\"java.security.AllPermission\");\n-\n-\t    perms.put(\"java.security.AllPermission\", allPermission);\n-\t  }\n+        if (allPermission == null)\n+          {\n+            allPermission = perm.newPermissionCollection();\n+            allPermission.add(perm);\n+            perms.put(perm.getClass(), allPermission);\n+          }\n       }\n     else\n       {\n-\tObject obj = perms.get(perm.getClass().getName());\n-\tif (obj != null)\n-\t  {\n-\t    if (!(obj instanceof PermissionCollection))\n-\t      throw new RuntimeException(\"Internal error in Permissions\");\n-\n-\t    ((PermissionCollection) obj).add(perm);\n-\t  }\n-\telse\n-\t  {\n-\t    PermissionCollection pc = perm.newPermissionCollection();\n-\t    if (pc == null)\n-\t      pc = new DefaultPermissionCollection(perm.getClass().getName());\n-\n-\t    pc.add(perm);\n-\n-\t    perms.put(perm.getClass().getName(), pc);\n-\t  }\n+        PermissionCollection pc\n+          = (PermissionCollection) perms.get(perm.getClass());\n+        if (pc == null)\n+          {\n+            pc = perm.newPermissionCollection();\n+            if (pc == null)\n+              pc = new PermissionsHash();\n+            perms.put(perm.getClass(), pc);\n+          }\n+        pc.add(perm);\n       }\n   }\n \n   /**\n    * This method tests whether or not the specified <code>Permission</code>\n    * is implied by this <code>PermissionCollection</code>.\n    *\n-   * @param perm The <code>Permission</code> to test.\n-   *\n-   * @return <code>true</code> if the specified permission is implied by this <code>PermissionCollection</code>, or <code>false</code> otherwise.\n+   * @param perm the <code>Permission</code> to test\n+   * @return true if the specified permission is implied by this\n    */\n   public boolean implies(Permission perm)\n   {\n     if (allPermission != null)\n-      return (true);\n-\n-    Object obj = perms.get(perm.getClass().getName());\n-    if (obj == null)\n-      return (false);\n-\n-    if (!(obj instanceof PermissionCollection))\n-      return (false);\n-\n-    return (((PermissionCollection) obj).implies(perm));\n+      return true;\n+    PermissionCollection pc\n+      = (PermissionCollection) perms.get(perm.getClass());\n+    return pc == null ? false : pc.implies(perm);\n   }\n \n   /**\n    * This method returns an <code>Enumeration</code> which contains a\n    * list of all <code>Permission</code> objects contained in this\n    * collection.\n    *\n-   * @return An <code>Enumeration</code> of this collection's elements.\n+   * @return an <code>Enumeration</code> of this collection's elements\n    */\n   public Enumeration elements()\n   {\n@@ -169,102 +157,87 @@ public Enumeration elements()\n \n       public boolean hasMoreElements()\n       {\n-\tif (sub_enum == null)\n-\t  if (main_enum == null)\n-\t    return (false);\n-\t  else\n-\t    {\n-\t      if (!main_enum.hasMoreElements())\n-\t\treturn (false);\n-\t      else\n-\t\t{\n-\t\t  try\n-\t\t    {\n-\t\t      PermissionCollection pc =\n-\t\t\t(PermissionCollection) main_enum.nextElement();\n-\t\t      sub_enum = pc.elements();\n-\t\t    }\n-\t\t  catch (NoSuchElementException e)\n-\t\t    {\n-\t\t      return (false);\n-\t\t    }\n-\t\t}\n-\t    }\n-\telse if (!sub_enum.hasMoreElements())\n-\t  {\n-\t    sub_enum = null;\n-\t    return (hasMoreElements());\n-\t  }\n-\n-\treturn (true);\n+        if (sub_enum == null)\n+          {\n+            if (main_enum == null)\n+              return false;\n+            if (! main_enum.hasMoreElements())\n+              {\n+                main_enum = null;\n+                return false;\n+              }\n+            PermissionCollection pc =\n+              (PermissionCollection) main_enum.nextElement();\n+            sub_enum = pc.elements();\n+          }\n+        if (! sub_enum.hasMoreElements())\n+          {\n+            sub_enum = null;\n+            return hasMoreElements();\n+          }\n+        return true;\n       }\n \n-      public Object nextElement() throws NoSuchElementException\n+      public Object nextElement()\n       {\n-\tif (!hasMoreElements())\n-\t  throw new NoSuchElementException();\n-\n-\treturn (sub_enum.nextElement());\n+        if (! hasMoreElements())\n+          throw new NoSuchElementException();\n+        return sub_enum.nextElement();\n       }\n     };\n   }\n-  \n-  static class DefaultPermissionCollection extends PermissionCollection\n-    implements Serializable\n-  {\n-\n-    // Type of Permission we can store\n-    private Class permcls;\n-\n-    // Hashtable where we store permissions.\n-    private Hashtable perms = new Hashtable();\n-\n-    DefaultPermissionCollection(String permtype) throws IllegalArgumentException\n-    {\n-      try\n-\t{\n-\t  permcls = Class.forName(permtype);\n-\t}\n-      catch(ClassNotFoundException e)\n-\t{\n-\t  throw new IllegalArgumentException(e.getMessage());\n-\t}\n-    }\n-\n-    public void add(Permission perm) \n-      throws SecurityException, IllegalArgumentException\n-    {\n-      if (isReadOnly())\n-\tthrow new SecurityException(\"PermissionCollection is read only\");\n-\n-      if (!permcls.isInstance(perm))\n-\tthrow new IllegalArgumentException(\"Wrong permission type: \" + \n-                                \t   perm.getClass().getName());\n-\n-      if (perms.get(perm.getName()) != null)\n-\tthrow new IllegalArgumentException(\"Duplicate permission: \" +\n-                                \t   perm.getName());\n-\n-      perms.put(perm.getName(), perm);\n-    }\n+} // class Permissions\n \n-    public boolean implies(Permission perm)\n-    {\n-      Object obj = perms.get(perm.getName());\n-      if (obj == null)\n-\treturn(false);\n+/**\n+ * Implements the permission collection for all permissions without one of\n+ * their own, and obeys serialization of JDK.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ */\n+class PermissionsHash extends PermissionCollection\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -8491988220802933440L;\n \n-      if (!(obj instanceof Permission))\n-\treturn(false);\n+  /**\n+   * Hashtable where we store permissions.\n+   *\n+   * @serial the stored permissions, both as key and value\n+   */\n+  private final Hashtable perms = new Hashtable();\n \n-      Permission p = (Permission)obj;\n+  /**\n+   * Add a permission. We don't need to check for read-only, as this\n+   * collection is never exposed outside of Permissions, which has already\n+   * done that check.\n+   *\n+   * @param perm the permission to add\n+   */\n+  public void add(Permission perm)\n+  {\n+    perms.put(perm, perm);\n+  }\n \n-      return(p.implies(perm));\n-    }\n+  /**\n+   * Returns true if perm is in the collection.\n+   *\n+   * @param perm the permission to check\n+   * @return true if it is implied\n+   */\n+  public boolean implies(Permission perm)\n+  {\n+    return perms.get(perm) != null;\n+  }\n \n-    public Enumeration elements()\n-    {\n-      return(perms.elements());\n-    }\n+  /**\n+   * Return the elements.\n+   *\n+   * @return the elements\n+   */\n+  public Enumeration elements()\n+  {\n+    return perms.elements();\n   }\n-}\n+} // class Permissions"}, {"sha": "126c084f6fa9f6fb119b6f8240e492b2f0294c2e", "filename": "libjava/java/security/Policy.java", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPolicy.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -85,9 +85,23 @@ initializes itself with information from this class on the\n   // FIXME: The class name of the Policy provider should really be sourced \n   // from the \"java.security\" configuration file. For now, just hard-code \n   // a stub implementation.\n-  static private Policy currentPolicy \n-    = new gnu.java.security.provider.DefaultPolicy();\n-\n+  static private Policy currentPolicy = null;\n+  static \n+  {\n+    String pp = System.getProperty (\"policy.provider\");\n+    if (pp != null)\n+      try\n+\t{\n+\t  currentPolicy = (Policy)Class.forName(pp).newInstance();\n+\t} \n+      catch (Exception _) \n+\t{\n+\t  currentPolicy = null;\n+\t}\n+    if (currentPolicy == null)\n+      currentPolicy = new gnu.java.security.provider.DefaultPolicy();\n+  }\n+  \n   /**\n      Constructs a new Policy class.\n    */"}, {"sha": "2ac69b2c5633837f231911c681f8a1ca24a5313e", "filename": "libjava/java/security/Principal.java", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPrincipal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPrincipal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrincipal.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* Principal.java -- A security entity\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,48 +35,51 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n /**\n-   * This interface models an entity (such as a user or a certificate authority)\n-   * for the purposes of applying the Java security model.\n-   *\n-   * @version 0.0\n-   *\n-   * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * This interface models an entity (such as a user or a certificate authority)\n+ * for the purposes of applying the Java security model.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @see X509Certificate\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public interface Principal\n {\n   /**\n-   * This method returns a <code>String</code> that names this \n-   * <code>Principal</code>.\n+   * This method tests another <code>Principal</code> object for equality\n+   * with this one.\n    *\n-   * @return The name of this <code>Principal</code>.\n+   * @param obj the Object to test for equality\n+   * @return true if the specified <code>Principal</code> is equal\n    */\n-  public abstract String getName();\n+  boolean equals(Object obj);\n \n   /**\n-   * This method tests another <code>Principal</code> object for equality\n-   * with this one.\n-   * \n-   * @param obj The <code>Object</code> (which is a <code>Principal</code>) to test for equality against.\n+   * This method returns a <code>String</code> representation of this\n+   * <code>Principal</code>.\n    *\n-   * @return <code>true</code> if the specified <code>Principal</code> is equal to this one, <code>false</code> otherwise.\n+   * @return this <code>Principal</code> represented as a <code>String</code>\n    */\n-  public abstract boolean equals(Object obj);\n+  String toString();\n \n   /**\n    * This method returns a hash code value for this <code>Principal</code>.\n+   * Remember the contract of hashCode - two objects which compare as\n+   * equals() must have the same hashCode().\n    *\n-   * @return A hash value\n+   * @return a hash value\n    */\n-  public abstract int hashCode();\n+  int hashCode();\n \n   /**\n-   * This method returns a <code>String</code> representation of this\n+   * This method returns a <code>String</code> that names this\n    * <code>Principal</code>.\n    *\n-   * @return This <code>Principal</code> represented as a <code>String</code>.\n+   * @return the name of this <code>Principal</code>\n    */\n-  public abstract String toString();\n-}\n+  String getName();\n+} // interface Principal"}, {"sha": "feae3f9169340cc66f1a073bc8020b67e0efd6ac", "filename": "libjava/java/security/PrivateKey.java", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrivateKey.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* PrivateKey.java -- \"Super-interface\" for all private keys\n-   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n+/* PrivateKey.java -- tagging interface for all private keys\n+   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,13 +39,24 @@\n package java.security;\n \n /**\n-   * This interface specified no methods.  In simply provides a common\n-   * super-interface for all algorithm specific private key values.\n-   *\n-   * @version 0.0\n-   *\n-   * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * This interface specified no methods.  In simply provides a common\n+ * super-interface for all algorithm specific private key values.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @see Key\n+ * @see PublicKey\n+ * @see Certificate\n+ * @see Signature#initVerify(PublicKey)\n+ * @see DSAPrivateKey\n+ * @see RSAPrivateKey\n+ * @see RSAPrivateCrtKey\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public interface PrivateKey extends Key\n {\n-}\n+  /**\n+   * The verion identifier used for serialization.\n+   */\n+  long serialVersionUID = 6034044314589513430L;\n+} // interface PrivateKey"}, {"sha": "108c7aeb506aba75fa50b8be3432cac4749e4949", "filename": "libjava/java/security/PrivilegedAction.java", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPrivilegedAction.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPrivilegedAction.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrivilegedAction.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* PrivilegedAction.java -- Perform a privileged action\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,14 +38,16 @@\n package java.security;\n \n /**\n- * This interface specifes a single <code>run</code> method that \n- * executes a privileged operation.  This method is called by \n+ * This interface specifes a single <code>run</code> method that\n+ * executes a privileged operation.  This method is called by\n  * <code>AccessController.doPrivileged()</code> after that method\n  * activiates the required privileges.\n  *\n- * @version 0.0\n- *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @see AccessController\n+ * @see PrivilegedExceptionAction\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public interface PrivilegedAction\n {\n@@ -55,6 +57,8 @@\n    * <code>AccessController.doPrivileged()</code>.\n    *\n    * @return obj An implementation dependent return value\n+   * @see AccessController#doPrivileged(PrivilegedAction)\n+   * @see AccessController#doPrivileged(PrivilegedAction, AccessControlContext)\n    */\n-  public abstract Object run();\n-}\n+  Object run();\n+} // interface PrivilegedAction"}, {"sha": "633a872cfe5560b8e8ec0089eb45bb0bc08c1b3f", "filename": "libjava/java/security/PrivilegedActionException.java", "status": "modified", "additions": 35, "deletions": 39, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPrivilegedActionException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPrivilegedActionException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrivilegedActionException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,6 +1,5 @@\n-/* PrivilegedActionException.java -- An exception occurred in a \n-   privileged action.\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* PrivilegedActionException.java -- wrap an exception in a privileged action\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,76 +37,73 @@\n \n package java.security;\n \n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n /**\n  * This exception is thrown when an exception is thrown during a\n- * privileged action being performed with the \n- * <code>AccessController.doPrivileged()</code> method.  It wrappers the\n+ * privileged action being performed with the\n+ * <code>AccessController.doPrivileged()</code> method.  It wraps the\n  * actual exception thrown in the privileged code.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see PrivilegedExceptionAction\n+ * @see AccessController#doPrivileged(PrivilegedExceptionAction)\n+ * @see AccessController#doPrivileged(PrivilegedExceptionAction, AccessControlContext)\n+ * @status updated to 1.4\n  */\n public class PrivilegedActionException extends Exception\n {\n-\n   /**\n-   * This is the actual exception that occurred\n+   * Compatible with JDK 1.1+.\n    */\n-  private Exception e;\n+  private static final long serialVersionUID = 4724086851538908602L;\n \n   /**\n-   * This method initializes a new instance of <code>PrivilegedActionException</code>\n-   * that wrappers the specified <code>Exception</code>.\n+   * This is the actual exception that occurred.\n    *\n-   * @param e The <code>Exception</code> to wrapper\n+   * @serial the wrapped exception\n    */\n-  public PrivilegedActionException(Exception e)\n-  {\n-    this.e = e;\n-  }\n+  private Exception exception;\n \n   /**\n-   * This method returns the underlying <code>Exception</code> that caused\n-   * this exception to be raised.\n+   * Create a new instance that wraps the specified <code>Exception</code>.\n    *\n-   * @return The wrappered <code>Exception</code>.\n+   * @param e the <code>Exception</code> to wrap\n    */\n-  public Exception getException()\n+  public PrivilegedActionException(Exception e)\n   {\n-    return (e);\n+    super(e);\n+    exception = e;\n   }\n \n   /**\n-   * This method prints the stack trace of the wrappered exception.\n+   * Get the underlying <code>Exception</code> that caused this one. This\n+   * is a legacy method, the preferred way is {@link #getCause()}.\n+   *\n+   * @return the cause\n    */\n-  public void printStackTrace()\n+  public Exception getException()\n   {\n-    e.printStackTrace();\n+    return exception;\n   }\n \n   /**\n-   * This method prints the stack trace of the wrappered exception to the\n-   * specified <code>PrintStream</code>.\n+   * Gets the cause of this exception.\n    *\n-   * @param ps The <code>PrintStream</code> to print the stack trace to.\n+   * @return the cause\n+   * @since 1.4\n    */\n-  public void printStackTrace(PrintStream ps)\n+  public Throwable getCause()\n   {\n-    e.printStackTrace(ps);\n+    return exception;\n   }\n \n   /**\n-   * This method prints the stack trace of the wrappered exception to the\n-   * specified <code>PrintWriter</code>.\n+   * Convert this to a String.\n    *\n-   * @param pw The <code>PrintWriter</code> to print the stack trace to.\n+   * @return the string representation\n    */\n-  public void printStackTrace(PrintWriter pw)\n+  public String toString()\n   {\n-    e.printStackTrace(pw);\n+    return super.toString();\n   }\n }"}, {"sha": "b376c6c4457450fd1d891ce0a1d8228a5ace12af", "filename": "libjava/java/security/PrivilegedExceptionAction.java", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPrivilegedExceptionAction.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPrivilegedExceptionAction.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrivilegedExceptionAction.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* PrivilegedExceptionAction.java -- Perform a privileged operation\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,15 +38,15 @@\n package java.security;\n \n /**\n- * This interface defines a method that is called by \n+ * This interface defines a method that is called by\n  * <code>AccessController.doPrivileged()</code> in order to perform a\n  * privileged operation with higher privileges enabled.  This interface\n  * differs from <code>PrivilegedAction</code> in that the <code>run</code>\n  * method in this interface may throw a checked exception.\n  *\n- * @version 0.0\n- *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public interface PrivilegedExceptionAction\n {\n@@ -55,9 +55,11 @@\n    * successfully complete.  It is called when a section of code invokes\n    * <code>AccessController.doPrivileged()</code>.\n    *\n-   * @return obj An implementation defined return value.\n-   *\n-   * @exception Exception An implementation specific exception.\n+   * @return obj An implementation defined return value\n+   * @throws Exception An implementation specific exception\n+   * @see AccessController#doPrivileged(PrivilegedExceptionAction)\n+   * @see AccessController#doPrivileged(PrivilegedExceptionAction,\n+   *                                    AccessControlContext)\n    */\n-  public abstract Object run() throws Exception;\n-}\n+  Object run() throws Exception;\n+} // interface PrivilegedExceptionAction"}, {"sha": "35d6d73a7d8f8fd2fb1214f1d442f77e47f77ec3", "filename": "libjava/java/security/ProtectionDomain.java", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FProtectionDomain.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FProtectionDomain.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FProtectionDomain.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -132,12 +132,14 @@ public boolean implies(Permission perm)\n   public String toString()\n   {\n     StringBuffer sb = new StringBuffer(\"\");\n-\n-    sb.append(super.toString() + \" (\" + linesep);\n-    sb.append(code_source.toString());\n-    sb.append(perms.toString());\n-    sb.append(\")\" + linesep);\n-\n+    sb.append(\"ProtectionDomain (\" + linesep);\n+    if (code_source == null)\n+      sb.append(\"CodeSource:null\" + linesep);\n+    else\n+      sb.append(code_source + linesep);\n+    sb.append(perms);\n+    sb.append(linesep + \")\" + linesep);\n+    \n     return sb.toString();\n   }\n }"}, {"sha": "eac3eb064c89725a5cc7685afbae45a5806ffcef", "filename": "libjava/java/security/ProviderException.java", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FProviderException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FProviderException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FProviderException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* ProviderException.java -- Generic security provider runtime exception\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,26 +41,27 @@\n  * This exception indicates that a runtime problem was encounterd with\n  * a security provider. \n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @status updated to 1.4\n  */\n public class ProviderException extends RuntimeException\n {\n   /**\n-   * This method initializes a new instance of <code>ProviderException</code>\n-   * with no descriptive error message.\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 5256023526693665674L;\n+\n+  /**\n+   * Create an instance with no descriptive error message.\n    */\n   public ProviderException()\n   {\n-    super();\n   }\n \n   /**\n-   * This method initializes a new instance of <code>ProviderException</code>\n-   * with a descriptive error message.\n+   * Create an instance with a descriptive error message.\n    *\n-   * @param msg The descriptive error message.\n+   * @param msg the descriptive error message\n    */\n   public ProviderException(String msg)\n   {"}, {"sha": "de4a5762383ce6591fc824954f456f87bec03624", "filename": "libjava/java/security/PublicKey.java", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPublicKey.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* PublicKey.java -- \"Super-interface\" for all public keys\n-   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n+/* PublicKey.java -- tagging interface for all public keys\n+   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,10 +41,20 @@\n  * This interface specified no methods.  In simply provides a common\n  * super-interface for all algorithm specific public key values.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @see Key\n+ * @see PrivateKey\n+ * @see Certificate\n+ * @see Signature#initVerify(PublicKey)\n+ * @see DSAPublicKey\n+ * @see RSAPublicKey\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public interface PublicKey extends Key\n {\n-}\n+  /**\n+   * The verion identifier used for serialization.\n+   */\n+  long serialVersionUID = 7187392471159151072L;\n+} // interface PublicKey"}, {"sha": "9a4e672f70a13b5abd686caad2d81230edc2ec88", "filename": "libjava/java/security/SecureClassLoader.java", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -51,12 +51,16 @@ public class SecureClassLoader extends ClassLoader\n   protected SecureClassLoader(ClassLoader parent)\n   {\n     super(parent);\n-    // FIXME: What else?\n+    SecurityManager sm = System.getSecurityManager();\n+    if(sm != null)\n+      sm.checkCreateClassLoader();\n   }\n \n   protected SecureClassLoader()\n   {\n-    // FIXME: What do we need to do here?\n+    SecurityManager sm = System.getSecurityManager();\n+    if(sm != null)\n+      sm.checkCreateClassLoader();\n   }\n \n   /** "}, {"sha": "a9982d4c3f8f86f77705fab8b43e4598fa51a7fe", "filename": "libjava/java/security/SecurityPermission.java", "status": "modified", "additions": 118, "deletions": 49, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FSecurityPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FSecurityPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecurityPermission.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* SecurityPermission.java -- Class for named security permissions\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,72 +38,141 @@\n package java.security;\n \n /**\n- * This class provides a mechanism for specified named permissions \n+ * This class provides a mechanism for specified named permissions\n  * related to the Java security framework.  These permissions have no\n- * associated actions list.  They are either granted or no granted.\n- * <p>\n- * The list of valid permission names is:\n- * <p><ul>\n- * <li>getPolicy - Allows retrieval of the system security policy.\n- * <li>setPolicy - Allows the security policy to be changed.\n- * <li>getProperty.&lt;key&gt; - Allows retrieval of the value of the named\n- * property or all properties if &lt;key&gt is a '*'.\n- * <li>setProperty.&lt;key&gt; - Allows changing of the value of the named\n- * property or all properties if &lt;key&gt is a '*'.\n- * <li>insertProvider.&lt;key&gt; - Allows the named provider to be added,\n- * or any provide if the key is '*'.\n- * <li>removeProvider.&lt;key&gt; - Allows the named provider to be removed,\n- * or any provide if the key is '*'.\n- * <li>setSystemScope - Allows the system identity scope to be set.\n- * <li>setIdentityPublicKey - Allows the public key of an Identity to be set.\n- * <li>SetIdentityInfo - Allows the description of an Identity to be set.\n- * <li>addIdentityCertificate - Allows a certificate to be set for the public\n- * key of an identity.\n- * <li>removeIdentityCertificate - Allows a certificate to be removed from the \n- * public key of an identity.\n- * <li>clearProviderProperties.&lt;key%gt; - Allows the properties of the\n- * named provider to be cleared, or all providers if key is '*'.\n- * <li>putProviderProperty.&lt;key%gt; - Allows the properties of the\n- * named provider to be changed, or all providers if key is '*'.\n- * <li>removeProviderProperty.&lt;key%gt; - Allows the properties of the\n- * named provider to be deleted, or all providers if key is '*'.\n- * <li>getSignerPrivateKey - Allows the retrieval of the private key for\n- * a signer.\n- * <li>setSignerKeyPair - Allows the public and private key of a Signer to\n- * be changed.\n- * </ul>\n- * <p>\n- * There is some degree of security risk in granting any of these permissions.\n- * Some of them can completely compromise system security.  Please exercise\n- * extreme caution in granting these permissions.\n+ * associated actions list.  They are either granted or not granted.\n  *\n- * @version 0.0\n+ * <p>The list of valid permission names is:<br>\n+ * <table border=1>\n+ * <tr><th>Permission Name</th><th>Permission Allows</th><th>Risks</th</tr>\n+ * <tr>\n+ *   <td><code>createAccessControlContext</code></td>\n+ *   <td>Allows creation of an AccessControlContext</td>\n+ *   <td>The new control context can have a rogue DomainCombiner, leading\n+ *       to a privacy leak</td></tr>\n+ * <tr>\n+ *   <td><code>getDomainCombiner</code></td>\n+ *   <td>Get a DomainCombiner from an AccessControlContext</td>\n+ *   <td>Access to a DomainCombiner can lead to a privacy leak</td></tr>\n+ * <tr>\n+ *   <td><code>getPolicy</code></td>\n+ *   <td>Allows retrieval of the system security policy</td>\n+ *   <td>Malicious code can use information from the policy to better plan\n+ *       an attack</td></tr>\n+ * <tr>\n+ *   <td><code>setPolicy</code></td>\n+ *   <td>Allows the security policy to be changed</td>\n+ *   <td>Malicious code can give itself any permission it wants</td></tr>\n+ * <tr>\n+ *   <td><code>getProperty.</code><em>key</em></td>\n+ *   <td>Retrieve the property specified by the key</td>\n+ *   <td>Malicious code can use information from the property to better plan\n+ *       an attack</td></tr>\n+ * <tr>\n+ *   <td><code>setProperty.</code><em>key</em></td>\n+ *   <td>Allows changing of the value of all properties implied by key</td>\n+ *   <td>Malicious code can insert rogue classes to steal keys or recreate\n+ *       the security policy with whatever permissions it desires</td></tr>\n+ * <tr>\n+ *   <td><code>insertProvider.</code><em>key</em></td>\n+ *   <td>Allows the named provider to be added</td>\n+ *   <td>Malicious code can insert rogue providers that steal data</td></tr>\n+ * <tr>\n+ *   <td><code>removeProvider.</code><em>key</em></td>\n+ *   <td>Allows the named provider to be removed</td>\n+ *   <td>A missing provider can cripple code that relies on it</td></tr>\n+ * <tr>\n+ *   <td><code>setSystemScope</code></td>\n+ *   <td>Allows the system identity scope to be set</td>\n+ *   <td>Malicious code can add certificates not available in the original\n+ *       identity scope, to gain more permissions</td></tr>\n+ * <tr>\n+ *   <td><code>setIdentityPublicKey</code></td>\n+ *   <td>Allows the public key of an Identity to be set</td>\n+ *   <td>Malicious code can install its own key to gain permissions not\n+ *       allowed by the original identity scope</td></tr>\n+ * <tr>\n+ *   <td><code>SetIdentityInfo</code></td>\n+ *   <td>Allows the description of an Identity to be set</td>\n+ *   <td>Malicious code can spoof users into trusting a fake identity</td></tr>\n+ * <tr>\n+ *   <td><code>addIdentityCertificate</code></td>\n+ *   <td>Allows a certificate to be set for the public key of an identity</td>\n+ *   <td>The public key can become trusted to a wider audience than originally\n+ *       intended</td></tr>\n+ * <tr>\n+ *   <td><code>removeIdentityCertificate</code></td>\n+ *   <td>Allows removal of a certificate from an identity's public key</td>\n+ *   <td>The public key can become less trusted than it should be</td></tr>\n+ * <tr>\n+ *   <td><code>printIdentity</code></td>\n+ *   <td>View the name of the identity and scope, and whether they are\n+ *       trusted</td>\n+ *   <td>The scope may include a filename, which provides an entry point for\n+ *       further security breaches</td></tr>\n+ * <tr>\n+ *   <td><code>clearProviderProperties.</code><em>key</em></td>\n+ *   <td>Allows the properties of the named provider to be cleared</td>\n+ *   <td>This can disable parts of the program which depend on finding the\n+ *       provider</td></tr>\n+ * <tr>\n+ *   <td><code>putProviderProperty.</code><em>key</em></td>\n+ *   <td>Allows the properties of the named provider to be changed</td>\n+ *   <td>Malicious code can replace the implementation of a provider</td></tr>\n+ * <tr>\n+ *   <td><code>removeProviderProperty.</code><em>key</em></td>\n+ *   <td>Allows the properties of the named provider to be deleted</td>\n+ *   <td>This can disable parts of the program which depend on finding the\n+ *       provider</td></tr>\n+ * <tr>\n+ *   <td><code>getSignerPrivateKey</code></td>\n+ *   <td>Allows the retrieval of the private key for a signer</td>\n+ *   <td>Anyone that can access the private key can claim to be the\n+ *       Signer</td></tr>\n+ * <tr>\n+ *   <td><code>setSignerKeyPair</code></td>\n+ *   <td>Allows the public and private key of a Signer to be changed</td>\n+ *   <td>The replacement might be a weaker encryption, or the attacker\n+ *       can use knowledge of the replaced key to decrypt an entire\n+ *       communication session</td></tr>\n+ * </table>\n+ *\n+ * <p>There is some degree of security risk in granting any of these\n+ * permissions. Some of them can completely compromise system security.\n+ * Please exercise extreme caution in granting these permissions.\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @see Permission\n+ * @see SecurityManager\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public final class SecurityPermission extends BasicPermission\n {\n   /**\n-   * This method initializes a new instance of <code>SecurityPermission</code>\n-   * to have the specified name.\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 5236109936224050470L;\n+\n+  /**\n+   * Create a new instance with the specified name.\n    *\n-   * @param name The name to assign to this permission.\n+   * @param name the name to assign to this permission\n    */\n   public SecurityPermission(String name)\n   {\n     super(name);\n   }\n \n   /**\n-   * This method initializes a new instance of <code>SecurityPermission</code>\n-   * to have the specified name.  The actions parameter is ignored in this\n-   * class.\n+   * Create a new instance with the specified name. As SecurityPermission\n+   * carries no actions, the second parameter is ignored.\n    *\n-   * @param name The name to assign to this permission.\n-   * @param actions The action list for this permission - ignored.\n+   * @param name the name to assign to this permission\n+   * @param actions ignored\n    */\n   public SecurityPermission(String name, String actions)\n   {\n-    super(name, actions);\n+    super(name);\n   }\n-}\n+} // class SecurityPermission"}, {"sha": "8762b0683ccbad36059409654f258292d2f600d3", "filename": "libjava/java/security/SignatureException.java", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FSignatureException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FSignatureException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSignatureException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* SignatureException.java -- Generic error in signature\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,24 +41,27 @@\n  * This exception is thrown when a problem is encountered with a\n  * digital signature.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @status updated to 1.4\n  */\n public class SignatureException extends GeneralSecurityException\n {\n   /**\n-   * This method initializes a new instance of <code>SignatureException</code>\n-   * with no descriptive error message.\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 7509989324975124438L;\n+\n+  /**\n+   * Create an instance with no descriptive error message.\n    */\n   public SignatureException()\n   {\n-    super();\n   }\n \n   /**\n-   * This method initializes a new instance of <code>SignatureException</code>\n-   * with a descriptive error message.\n+   * Create an instance with a descriptive error message.\n+   *\n+   * @param msg the message\n    */\n   public SignatureException(String msg)\n   {"}, {"sha": "3e93153ad7d29525d546081e45c227c80687575c", "filename": "libjava/java/security/UnrecoverableKeyException.java", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FUnrecoverableKeyException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FUnrecoverableKeyException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FUnrecoverableKeyException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* UnrecoverableKeyException.java -- Cannot recover a key from the key store\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,26 +41,28 @@\n  * This exception is thrown when a key cannot be recovered from the key\n  * store.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n public class UnrecoverableKeyException extends GeneralSecurityException\n {\n   /**\n-   * This method initializes a new instance of <code>UnrecoverableKeyException</code>\n-   * with no descriptive error message.\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = 7275063078190151277L;\n+\n+  /**\n+   * Create an instance with no descriptive error message.\n    */\n   public UnrecoverableKeyException()\n   {\n-    super();\n   }\n \n   /**\n-   * This method initializes a new instance of <code>UnrecoverableKeyException</code>\n-   * with a descriptive error message.\n+   * Create an instance with a descriptive error message.\n    *\n-   * @param msg The descriptive error message.\n+   * @param msg the descriptive error message\n    */\n   public UnrecoverableKeyException(String msg)\n   {"}, {"sha": "954b562c773546dd94b71ccac139198d0a30ad8d", "filename": "libjava/java/security/UnresolvedPermission.java", "status": "modified", "additions": 187, "deletions": 83, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FUnresolvedPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2FUnresolvedPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FUnresolvedPermission.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* UnresolvedPermission.java -- Placeholder for unresolved permissions.\n-   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n+/* UnresolvedPermission.java -- Placeholder for unresolved permissions\n+   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,162 +38,266 @@\n package java.security;\n \n import java.io.Serializable;\n-// All uses of Certificate in this file refer to this class.\n+// All uses of Certificate in this file refer to the one in the listed\n+// package, not this one.\n import java.security.cert.Certificate;\n+import java.util.Arrays;\n+import java.util.Hashtable;\n+import java.util.Vector;\n+import java.util.Enumeration;\n+import java.util.NoSuchElementException;\n \n /**\n  * This class is used to hold instances of all permissions that cannot\n- * be resolved to available permission classes when the security \n+ * be resolved to available permission classes when the security\n  * <code>Policy</code> object is instantiated.  This may happen when the\n  * necessary security class has not yet been downloaded from the network.\n- * <p>\n- * Instances of this class are re-resolved when <code>AccessController</code>\n- * check is done.  At that time, a scan is made of all existing\n- * <code>UnresolvedPermission</code> objects and they are converted to\n- * objects of the appropriate permission type if the class for that type\n- * is then available.\n  *\n- * @version 0.0\n+ * <p>Instances of this class are re-resolved when\n+ * <code>AccessController</code> check is done.  At that time, a scan is\n+ * made of all existing <code>UnresolvedPermission</code> objects and they\n+ * are converted to objects of the appropriate permission type if the class\n+ * for that type is then available.\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @see Permission\n+ * @see Permissions\n+ * @see PermissionCollection\n+ * @see Policy\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-public final class UnresolvedPermission\n-  extends Permission\n-  implements Serializable\n+public final class UnresolvedPermission extends Permission\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -4821973115467008846L;\n \n   /**\n-   * The list of actions associated with this permission object\n+   * The list of actions associated with this permission object.\n+   *\n+   * @serial the permission actions\n    */\n-  private String actions;\n+  private final String actions;\n \n   /**\n-   * The list of <code>Certificates</code> associated with this object\n+   * The list of <code>Certificates</code> associated with this object.\n    */\n-  private Certificate[] certs;\n+  private final transient Certificate[] certs;\n \n   /**\n    * The name of the class this object should be resolved to.\n+   *\n+   * @serial the fully-qualified classname of the resolved type\n    */\n-  private String type;\n+  // Package visible for use by UnresolvedPermissionCollection.\n+  final String type;\n \n   /**\n-   * This method initializes a new instance of <code>UnresolvedPermission</code>\n-   * with all the information necessary to resolve it to an instance of the\n-   * proper class at a future time.\n+   * The name of the permission.\n    *\n-   * @param type The name of the desired class this permission should be resolved to\n-   * @param name The name of this permission\n-   * @param actions The action list for this permission\n-   * @param certs The list of certificates this permission's class was signed with\n+   * @serial the permission name\n+   */\n+  private final String name;\n+\n+  /**\n+   * Create a new instance with all the information necessary to resolve it\n+   * to an instance of the proper class at a future time.\n+   *\n+   * @param type the fully-qualified name of the class of this permission\n+   * @param name the name of this permission\n+   * @param actions the action list for this permission\n+   * @param certs the list of certificates that sign this permission\n    */\n   public UnresolvedPermission(String type, String name, String actions,\n-\t\t\t      Certificate[] certs)\n+                              Certificate[] certs)\n   {\n     super(name);\n-\n+    this.name = name;\n     this.type = type;\n     this.actions = actions;\n     this.certs = certs;\n   }\n \n-  /**\n-   * This method returns the list of actions associated with this\n-   * permission.\n-   *\n-   * @return The action list\n-   */\n-  public String getActions()\n-  {\n-    return (actions);\n-  }\n-\n   /**\n    * This method returns <code>false</code> always to indicate that this\n-   * permission does not imply the specified permission.  An \n+   * permission does not imply the specified permission.  An\n    * <code>UnresolvedPermission</code> never grants any permissions.\n    *\n-   * @param perm The <code>Permission</code> object to test against - ignored by this class\n-   *\n-   * @return <code>false</code> to indicate this permission does not imply the specified permission.\n+   * @param perm the <code>Permission</code> object to test\n+   * @return false; until a permission is resolved, it implies nothing\n    */\n   public boolean implies(Permission perm)\n   {\n-    return (false);\n+    return false;\n   }\n \n   /**\n    * This method tests this permission for equality against the specified\n-   * <code>Object</code>.  This will be true if and only if the following\n-   * conditions are met:\n-   * <p>\n-   * <ul>\n-   * <li>The specified <code>Object</code> is an instance of \n-   * <code>UnresolvedPermission</code>, or a subclass.\n+   * <code>Object</code>. This will be true if and only if the following\n+   * conditions are met:<ul>\n+   * <li>The specified <code>Object</code> is an UnresolvedPermission</li>\n    * <li>The specified permission has the same type (i.e., desired class name)\n-   * as this permission.\n-   * <li>The specified permission has the same name as this one.\n-   * <li>The specified permissoin has the same action list as this one.\n-   * <li>The specified permission has the same certificate list as this one.\n+   *     as this permission.</li>\n+   * <li>The specified permission has the same name as this one.</li>\n+   * <li>The specified permissoin has the same action list as this one.</li>\n+   * <li>The specified permission has the same certificate list as this\n+   *     one.</li>\n    * </ul>\n    *\n-   * @param obj The <code>Object</code> to test for equality\n-   *\n-   * @return <code>true</code> if the specified object is equal to this one, <code>false</code> otherwise.\n+   * @param obj the <code>Object</code> to test for equality\n+   * @return true if the specified object is equal to this one\n    */\n   public boolean equals(Object obj)\n   {\n-    if (!(obj instanceof UnresolvedPermission))\n+    if (! (obj instanceof UnresolvedPermission))\n       return (false);\n-\n     UnresolvedPermission up = (UnresolvedPermission) obj;\n-\n-    if (!getName().equals(up.getName()))\n-      return (false);\n-\n-    if (!getActions().equals(up.getActions()))\n-      return (false);\n-\n-    if (!type.equals(up.type))\n-      return (false);\n-\n-    if (!certs.equals(up.certs))\n-      return (false);\n-\n-    return (true);\n+    return up.name.equals(name) && up.actions.equals(actions)\n+      && up.type.equals(type) && Arrays.equals(up.certs, certs);\n   }\n \n   /**\n-   * Returns a hash code value for this object.\n+   * Returns a hash code value for this object. Following the lead of\n+   * Permission, this returns the hashcode of the permission name.\n    *\n    * @return A hash value\n    */\n   public int hashCode()\n   {\n-    return (System.identityHashCode(this));\n+    return name.hashCode();\n+  }\n+\n+  /**\n+   * This method returns the list of actions associated with this\n+   * permission.\n+   *\n+   * @return the action list\n+   */\n+  public String getActions()\n+  {\n+    return actions;\n   }\n \n   /**\n    * This method returns a <code>String</code> representation of this\n    * class.  The format is: '(unresolved \"ClassName \"name\" \"actions\")'\n    *\n-   * @return A <code>String</code> representation of this object\n+   * @return  <code>String</code> representation of this object\n    */\n   public String toString()\n   {\n-    return \"(unresolved \" + type + \" \" + getName() + \" \" + getActions() + \")\";\n+    return \"(unresolved \" + type + ' ' + name + ' ' + actions + ')';\n   }\n \n   /**\n    * This class returns a <code>PermissionCollection</code> object that can\n-   * be used to store instances of <code>UnresolvedPermission</code>.  If\n-   * <code>null</code> is returned, the caller is free to use any desired\n-   * <code>PermissionCollection</code>.\n+   * be used to store instances of <code>UnresolvedPermission</code>.\n    *\n-   * @return A new <code>PermissionCollection</code>.\n+   * @return a new <code>PermissionCollection</code>\n    */\n   public PermissionCollection newPermissionCollection()\n   {\n-    return (null);\n+    return new UnresolvedPermissionCollection();\n+  }\n+} // class UnresolvedPermission\n+\n+/**\n+ * Implements the permission collection for unresolved permissions, and\n+ * obeys serialization of JDK.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ */\n+class UnresolvedPermissionCollection extends PermissionCollection\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -7176153071733132400L;\n+\n+  /**\n+   * Hashtable where we store permissions.\n+   *\n+   * @serial map of typename to a Vector of permissions (you'd think Sun\n+   *         would document this better!)\n+   */\n+  private final Hashtable permissions = new Hashtable();\n+\n+  /**\n+   * Add a permission.\n+   *\n+   * @param perm the permission to add\n+   * @throws IllegalArgumentException if perm is not an UnresolvedPermission\n+   * @throws SecurityException if the collection is read-only\n+   */\n+  public void add(Permission perm)\n+  {\n+    if (isReadOnly())\n+      throw new SecurityException();\n+    if (! (perm instanceof UnresolvedPermission))\n+      throw new IllegalArgumentException();\n+    UnresolvedPermission up = (UnresolvedPermission) perm;\n+    Vector v = (Vector) permissions.get(up.type);\n+    if (v == null)\n+      {\n+        v = new Vector();\n+        permissions.put(up.type, v);\n+      }\n+    v.add(up);\n+  }\n+\n+  /**\n+   * Returns true if perm is implied by the collection.\n+   *\n+   * @param perm the permission to check\n+   * @return false; unresolved permissions imply nothing\n+   */\n+  public boolean implies(Permission perm)\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Return the elements.\n+   *\n+   * @return the elements\n+   */\n+  public Enumeration elements()\n+  {\n+    return new Enumeration()\n+    {\n+      Enumeration main_enum = permissions.elements();\n+      Enumeration sub_enum;\n+\n+      public boolean hasMoreElements()\n+      {\n+        if (sub_enum == null)\n+          {\n+            if (main_enum == null)\n+              return false;\n+            if (! main_enum.hasMoreElements())\n+              {\n+                main_enum = null;\n+                return false;\n+              }\n+            Vector v = (Vector) main_enum.nextElement();\n+            sub_enum = v.elements();\n+          }\n+        if (! sub_enum.hasMoreElements())\n+          {\n+            sub_enum = null;\n+            return hasMoreElements();\n+          }\n+        return true;\n+      }\n+\n+      public Object nextElement()\n+      {\n+        if (! hasMoreElements())\n+          throw new NoSuchElementException();\n+        return sub_enum.nextElement();\n+      }\n+    };\n   }\n-}\n+} // class UnresolvedPermissionCollection"}, {"sha": "a843fac1761ec2f541e274d98760939b7bf801ae", "filename": "libjava/java/security/acl/AclNotFoundException.java", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Facl%2FAclNotFoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Facl%2FAclNotFoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FAclNotFoundException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* AclNotFoundException.java -- What it says\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* AclNotFoundException.java -- thrown when an ACL is not found\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,17 +41,20 @@\n  * This exception is thrown when a requested access control list (ACL) is\n  * not found.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @status updated to 1.4\n  */\n public class AclNotFoundException extends Exception\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 5684295034092681791L;\n+\n   /**\n    * Initializes a new instance of this class with no descriptive message\n    */\n   public AclNotFoundException()\n   {\n-    super();\n   }\n }"}, {"sha": "be2815192fbff9664b2a1d4ff18d8d4f00d1d4d8", "filename": "libjava/java/security/acl/LastOwnerException.java", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Facl%2FLastOwnerException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Facl%2FLastOwnerException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FLastOwnerException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* LastOwnerException.java -- User attempted to delete last ACL owner\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,18 +41,22 @@\n  * This exception is thrown when an attempt is made to delete the last owner\n  * of an access control list (ACL)\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @see Owner#deleteOwner(java.security.Principal, java.security.Principal)\n+ * @status updated to 1.4\n  */\n-public class LastOwnerException extends java.lang.Exception\n+public class LastOwnerException extends Exception\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -5141997548211140359L;\n+\n   /**\n    * Initialize a new instance of <code>LastOwnerException</code> that does\n    * not have a log message.\n    */\n   public LastOwnerException()\n   {\n-    super();\n   }\n }"}, {"sha": "8b2739d9cc479c329cabae5747e085b035bb15cd", "filename": "libjava/java/security/acl/NotOwnerException.java", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Facl%2FNotOwnerException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Facl%2FNotOwnerException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FNotOwnerException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n /* NotOwnerException.java -- Attempt to modify an unowned ACL\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -42,19 +42,21 @@\n  * the caller to be the owner of the access control list (ACL) when the caller\n  * is in fact not the owner of the ACL.\n  *\n- * @version 0.0\n- *\n- * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @status updated to 1.4\n  */\n-public class NotOwnerException extends java.lang.Exception\n+public class NotOwnerException extends Exception\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -5555597911163362399L;\n \n   /**\n    * Initializes a new instance of <code>NotOwnerException</code> that does\n    * not have a descriptive message.\n    */\n   public NotOwnerException()\n   {\n-    super();\n   }\n }"}, {"sha": "be20d1b6c5b4f441f367354360904851aeba5745", "filename": "libjava/java/security/cert/CRLException.java", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCRLException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCRLException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCRLException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,13 +1,13 @@\n-/* CRLException.java --- Certificate Revocation List Exception\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+/* CRLException.java -- Certificate Revocation List Exception\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,34 +37,37 @@\n \n \n package java.security.cert;\n+\n import java.security.GeneralSecurityException;\n \n /**\n-   Exception for a Certificate Revocation List.\n-\n-   @since JDK 1.2\n-\n-   @author Mark Benvenuto\n+ * Exception for a Certificate Revocation List.\n+ *\n+ * @author Mark Benvenuto\n+ * @since 1.2\n+ * @status updated to 1.4\n */\n public class CRLException extends GeneralSecurityException\n {\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = -6694728944094197147L;\n \n   /**\n-     Constructs an CRLExceptionwithout a message string.\n-  */\n+   * Constructs an CRLExceptionwithout a message string.\n+   */\n   public CRLException()\n   {\n-    super();\n   }\n \n   /**\n-     Constructs an CRLException with a message string.\n-\n-     @param msg A message to display with exception\n-  */\n+   * Constructs an CRLException with a message string.\n+   *\n+   * @param msg a message to display with exception\n+   */\n   public CRLException(String msg)\n   {\n-    super( msg );\n+    super(msg);\n   }\n-\n }"}, {"sha": "53f42e752deef1e27af79af5d1d215e557f50960", "filename": "libjava/java/security/cert/CertPath.java", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPath.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -0,0 +1,252 @@\n+/* CertPath.java -- a sequence of certificates\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.security.cert;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.NotSerializableException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * This class represents an immutable sequence, or path, of security\n+ * certificates. The path type must match the type of each certificate in the\n+ * path, or in other words, for all instances of cert in a certpath object,\n+ * <code>cert.getType().equals(certpath.getType())</code> will return true.\n+ *\n+ * <p>Since this class is immutable, it is thread-safe. During serialization,\n+ * the path is consolidated into a {@link CertPathRep}, which preserves the\n+ * data regardless of the underlying implementation of the path.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.4\n+ * @status updated to 1.4\n+ */\n+public abstract class CertPath implements Serializable\n+{\n+  /**\n+   * The serialized representation of a path.\n+   *\n+   * @author Eric Blake <ebb9@email.byu.edu>\n+   */\n+  protected static class CertPathRep implements Serializable\n+  {\n+    /**\n+     * Compatible with JDK 1.4+.\n+     */\n+    private static final long serialVersionUID = 3015633072427920915L;\n+\n+    /**\n+     * The certificate type.\n+     *\n+     * @serial the type of the certificate path\n+     */\n+    private final String type;\n+\n+    /**\n+     * The encoded form of the path.\n+     *\n+     * @serial the encoded form\n+     */\n+    private final byte[] data;\n+\n+    /**\n+     * Create the new serial representation.\n+     *\n+     * @param type the path type\n+     * @param data the encoded path data\n+     */\n+    protected CertPathRep(String type, byte[] data)\n+    {\n+      this.type = type;\n+      this.data = data;\n+    }\n+\n+    /**\n+     * Decode the data into an actual {@link CertPath} upon deserialization.\n+     *\n+     * @return the replacement object\n+     * @throws ObjectStreamException if replacement fails\n+     */\n+    protected Object readResolve() throws ObjectStreamException\n+    {\n+      try\n+        {\n+          return CertificateFactory.getInstance(type)\n+            .generateCertPath(new ByteArrayInputStream(data));\n+        }\n+      catch (CertificateException e)\n+        {\n+          throw (ObjectStreamException)\n+            new NotSerializableException(\"java.security.cert.CertPath: \"\n+                                         + type).initCause(e);\n+        }\n+    }\n+  } // class CertPathRep\n+\n+  /**\n+   * Compatible with JDK 1.4+.\n+   */\n+  private static final long serialVersionUID = 6068470306649138683L;\n+\n+  /**\n+   * The path type.\n+   *\n+   * @serial the type of all certificates in this path\n+   */\n+  private final String type;\n+\n+  /**\n+   * Create a certificate path with the given type. Most code should use\n+   * {@link CertificateFactory} to create CertPaths.\n+   *\n+   * @param type the type of the path\n+   */\n+  protected CertPath(String type)\n+  {\n+    this.type = type;\n+  }\n+\n+  /**\n+   * Get the (non-null) type of all certificates in the path.\n+   *\n+   * @return the path certificate type\n+   */\n+  public String getType()\n+  {\n+    return type;\n+  }\n+\n+  /**\n+   * Get an immutable iterator over the path encodings (all String names),\n+   * starting with the default encoding. The iterator will throw an\n+   * <code>UnsupportedOperationException</code> if an attempt is made to\n+   * remove items from the list.\n+   *\n+   * @return the iterator of supported encodings in the path\n+   */\n+  public abstract Iterator getEncodings();\n+\n+  /**\n+   * Compares this path to another for semantic equality. To be equal, both\n+   * must be instances of CertPath, with the same type, and identical\n+   * certificate lists. Overriding classes must not change this behavior.\n+   *\n+   * @param o the object to compare to\n+   * @return true if the two are equal\n+   */\n+  public boolean equals(Object o)\n+  {\n+    if (! (o instanceof CertPath))\n+      return false;\n+    CertPath cp = (CertPath) o;\n+    return type.equals(cp.type)\n+      && getCertificates().equals(cp.getCertificates());\n+  }\n+\n+  /**\n+   * Returns the hashcode of this certificate path. This is defined as:<br>\n+   * <code>31 * getType().hashCode() + getCertificates().hashCode()</code>.\n+   *\n+   * @return the hashcode\n+   */\n+  public int hashCode()\n+  {\n+    return 31 * type.hashCode() + getCertificates().hashCode();\n+  }\n+\n+  public String toString()\n+  {\n+    List l = getCertificates();\n+    int size = l.size();\n+    int i = 0;\n+    StringBuffer result = new StringBuffer(type);\n+    result.append(\" Cert Path: length = \").append(size).append(\".\\n[\\n\");\n+    while (--size >= 0)\n+      result.append(l.get(i++)).append('\\n');\n+    return result.append(\"\\n]\").toString();\n+  }\n+\n+  /**\n+   * Returns the encoded form of this path, via the default encoding.\n+   *\n+   * @return the encoded form\n+   * @throws CertificateEncodingException if encoding fails\n+   */\n+  public abstract byte[] getEncoded() throws CertificateEncodingException;\n+\n+  /**\n+   * Returns the encoded form of this path, via the specified encoding.\n+   *\n+   * @param encoding the encoding to use\n+   * @return the encoded form\n+   * @throws CertificateEncodingException if encoding fails or does not exist\n+   */\n+  public abstract byte[] getEncoded(String encoding)\n+    throws CertificateEncodingException;\n+\n+  /**\n+   * Returns the immutable, thread-safe list of certificates in this path.\n+   *\n+   * @return the list of certificates, non-null but possibly empty\n+   */\n+  public abstract List getCertificates();\n+\n+  /**\n+   * Serializes the path in its encoded form, to ensure reserialization with\n+   * the appropriate factory object without worrying about list implementation.\n+   * The result will always be an instance of {@link CertPathRep}.\n+   *\n+   * @return the replacement object\n+   * @throws ObjectStreamException if the replacement creation fails\n+   */\n+  protected Object writeReplace() throws ObjectStreamException\n+  {\n+    try\n+      {\n+        return new CertPathRep(type, getEncoded());\n+      }\n+    catch (CertificateEncodingException e)\n+      {\n+        throw (ObjectStreamException)\n+          new NotSerializableException(\"java.security.cert.CertPath: \"\n+                                       + type).initCause(e);\n+      }\n+  }\n+} // class CertPath"}, {"sha": "7cfdb79e536d3c8f9327d631555682b74a4ff0cd", "filename": "libjava/java/security/cert/CertPathBuilderException.java", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathBuilderException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathBuilderException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathBuilderException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -0,0 +1,159 @@\n+/* CertPathBuilderException.java -- wraps an exception during certificate\n+   path building\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.security.cert;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.security.GeneralSecurityException;\n+\n+/**\n+ * Indicates a problem while using a <code>CertPathBuilder</code>, wrapping\n+ * the lower exception. This class is not thread-safe.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see CertPathBuilder\n+ * @since 1.4\n+ * @status updated to 1.4\n+*/\n+public class CertPathBuilderException extends GeneralSecurityException\n+{\n+  /**\n+   * Compatible with JDK 1.4+.\n+   */\n+  private static final long serialVersionUID = 5316471420178794402L;\n+\n+  /**\n+   * Create an exception without a message. The cause may be initialized.\n+   */\n+  public CertPathBuilderException()\n+  {\n+  }\n+\n+  /**\n+   * Create an exception with a message. The cause may be initialized.\n+   *\n+   * @param msg a message to display with exception\n+   */\n+  public CertPathBuilderException(String msg)\n+  {\n+    super(msg);\n+  }\n+\n+  /**\n+   * Create an exception with a cause. The message will be\n+   * <code>cause == null ? null : cause.toString()</code>.\n+   *\n+   * @param cause the cause\n+   */\n+  public CertPathBuilderException(Throwable cause)\n+  {\n+    this(cause == null ? null : cause.toString(), cause);\n+  }\n+\n+  /**\n+   * Create an exception with a cause and a message.\n+   *\n+   * @param msg the message\n+   * @param cause the cause\n+   */\n+  public CertPathBuilderException(String msg, Throwable cause)\n+  {\n+    super(msg);\n+    initCause(cause);\n+  }\n+\n+  /**\n+   * Get the detail message.\n+   *\n+   * @return the detail message\n+   */\n+  public String getMessage()\n+  {\n+    return super.getMessage();\n+  }\n+\n+  /**\n+   * Get the cause, null if unknown.\n+   *\n+   * @return the cause\n+   */\n+  public Throwable getCause()\n+  {\n+    return super.getCause();\n+  }\n+\n+  /**\n+   * Convert this to a string, including its cause.\n+   *\n+   * @return the string conversion\n+   */\n+  public String toString()\n+  {\n+    return super.toString();\n+  }\n+\n+  /**\n+   * Print the stack trace to <code>System.err</code>.\n+   */\n+  public void printStackTrace()\n+  {\n+    super.printStackTrace();\n+  }\n+\n+  /**\n+   * Print the stack trace to a stream.\n+   *\n+   * @param stream the stream\n+   */\n+  public void printStackTrace(PrintStream stream)\n+  {\n+    super.printStackTrace(stream);\n+  }\n+\n+  /**\n+   * Print the stack trace to a stream.\n+   *\n+   * @param stream the stream\n+   */\n+  public void printStackTrace(PrintWriter stream)\n+  {\n+    super.printStackTrace(stream);\n+  }\n+}"}, {"sha": "e7b40b8d3d6614b1f77639efe21656610356f3ee", "filename": "libjava/java/security/cert/CertPathValidatorException.java", "status": "added", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathValidatorException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathValidatorException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathValidatorException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -0,0 +1,226 @@\n+/* CertPathValidatorException.java -- wraps an exception during validation\n+   of a CertPath\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.security.cert;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.security.GeneralSecurityException;\n+\n+/**\n+ * Indicates a problem while validating a certification path. In addition,\n+ * it can store the path an index in that path that caused the problem. This\n+ * class is not thread-safe.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see CertPathValidator\n+ * @since 1.4\n+ * @status updated to 1.4\n+*/\n+public class CertPathValidatorException extends GeneralSecurityException\n+{\n+  /**\n+   * Compatible with JDK 1.4+.\n+   */\n+  private static final long serialVersionUID = -3083180014971893139L;\n+\n+  /**\n+   * The index of the certificate path that failed, or -1.\n+   *\n+   * @serial the failed index\n+   */\n+  private final int index;\n+\n+  /**\n+   * The <code>CertPath</code> that failed.\n+   *\n+   * @serial the object being validated at time of failure\n+   */\n+  private final CertPath certPath;\n+\n+  /**\n+   * Create an exception without a message. The cause may be initialized. The\n+   * index is set to -1 and the failed CertPath object to null.\n+   */\n+  public CertPathValidatorException()\n+  {\n+    this((String) null);\n+  }\n+\n+  /**\n+   * Create an exception with a message. The cause may be initialized. The\n+   * index is set to -1 and the failed CertPath object to null.\n+   *\n+   * @param msg a message to display with exception\n+   */\n+  public CertPathValidatorException(String msg)\n+  {\n+    super(msg);\n+    index = -1;\n+    certPath = null;\n+  }\n+\n+  /**\n+   * Create an exception with a cause. The message will be\n+   * <code>cause == null ? null : cause.toString()</code>. The index is set\n+   * to -1 and the failed CertPath object to null.\n+   *\n+   * @param cause the cause\n+   */\n+  public CertPathValidatorException(Throwable cause)\n+  {\n+    this(cause == null ? null : cause.toString(), cause, null, -1);\n+  }\n+\n+  /**\n+   * Create an exception with a cause and a message. The index is set to -1\n+   * and the failed CertPath object to null.\n+   *\n+   * @param msg the message\n+   * @param cause the cause\n+   */\n+  public CertPathValidatorException(String msg, Throwable cause)\n+  {\n+    this(msg, cause, null, -1);\n+  }\n+\n+  /**\n+   * Create an exception with a cause, message, failed object, and index of\n+   * failure in that CertPath.\n+   *\n+   * @param msg the message\n+   * @param cause the cause\n+   * @param certPath the path that was being validated, or null\n+   * @param index the index of the path, or -1\n+   * @throws IndexOutOfBoundsException if index is &lt; -1 or\n+   *         &gt; certPath.getCertificates().size()\n+   * @throws IllegalArgumentException if certPath is null but index != -1\n+   */\n+  public CertPathValidatorException(String msg, Throwable cause,\n+                                    CertPath certPath, int index)\n+  {\n+    super(msg);\n+    initCause(cause);\n+    if (index < -1 || (certPath != null\n+                       && index >= certPath.getCertificates().size()))\n+      throw new IndexOutOfBoundsException();\n+    if ((certPath == null) != (index == -1))\n+      throw new IllegalArgumentException();\n+    this.certPath = certPath;\n+    this.index = index;\n+  }\n+\n+  /**\n+   * Get the detail message.\n+   *\n+   * @return the detail message\n+   */\n+  public String getMessage()\n+  {\n+    return super.getMessage();\n+  }\n+\n+  /**\n+   * Get the certificate path that had the failure, or null.\n+   *\n+   * @return the culprit path\n+   */\n+  public CertPath getCertPath()\n+  {\n+    return certPath;\n+  }\n+\n+  /**\n+   * Get the index that failed, or -1.\n+   *\n+   * @return the colprit index\n+   */\n+  public int getIndex()\n+  {\n+    return index;\n+  }\n+\n+  /**\n+   * Get the cause, null if unknown.\n+   *\n+   * @return the cause\n+   */\n+  public Throwable getCause()\n+  {\n+    return super.getCause();\n+  }\n+\n+  /**\n+   * Convert this to a string, including its cause.\n+   *\n+   * @return the string conversion\n+   */\n+  public String toString()\n+  {\n+    return super.toString();\n+  }\n+\n+  /**\n+   * Print the stack trace to <code>System.err</code>.\n+   */\n+  public void printStackTrace()\n+  {\n+    super.printStackTrace();\n+  }\n+\n+  /**\n+   * Print the stack trace to a stream.\n+   *\n+   * @param stream the stream\n+   */\n+  public void printStackTrace(PrintStream stream)\n+  {\n+    super.printStackTrace(stream);\n+  }\n+\n+  /**\n+   * Print the stack trace to a stream.\n+   *\n+   * @param stream the stream\n+   */\n+  public void printStackTrace(PrintWriter stream)\n+  {\n+    super.printStackTrace(stream);\n+  }\n+}"}, {"sha": "7d7bd148e9a3af01db30de55dad8e77ecea8bf7c", "filename": "libjava/java/security/cert/CertStoreException.java", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertStoreException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertStoreException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertStoreException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -0,0 +1,159 @@\n+/* CertStoreException.java -- wraps an exception during certificate storage\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.security.cert;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.security.GeneralSecurityException;\n+\n+/**\n+ * Indicates a problem while retrieving certificates and CRLs from\n+ * <code>CertStore</code>, wrapping the lower exception. This class is not\n+ * thread-safe.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see CertStore\n+ * @since 1.4\n+ * @status updated to 1.4\n+*/\n+public class CertStoreException extends GeneralSecurityException\n+{\n+  /**\n+   * Compatible with JDK 1.4+.\n+   */\n+  private static final long serialVersionUID = 2395296107471573245L;\n+\n+  /**\n+   * Create an exception without a message. The cause may be initialized.\n+   */\n+  public CertStoreException()\n+  {\n+  }\n+\n+  /**\n+   * Create an exception with a message. The cause may be initialized.\n+   *\n+   * @param msg a message to display with exception\n+   */\n+  public CertStoreException(String msg)\n+  {\n+    super(msg);\n+  }\n+\n+  /**\n+   * Create an exception with a cause. The message will be\n+   * <code>cause == null ? null : cause.toString()</code>.\n+   *\n+   * @param cause the cause\n+   */\n+  public CertStoreException(Throwable cause)\n+  {\n+    this(cause == null ? null : cause.toString(), cause);\n+  }\n+\n+  /**\n+   * Create an exception with a cause and a message.\n+   *\n+   * @param msg the message\n+   * @param cause the cause\n+   */\n+  public CertStoreException(String msg, Throwable cause)\n+  {\n+    super(msg);\n+    initCause(cause);\n+  }\n+\n+  /**\n+   * Get the detail message.\n+   *\n+   * @return the detail message\n+   */\n+  public String getMessage()\n+  {\n+    return super.getMessage();\n+  }\n+\n+  /**\n+   * Get the cause, null if unknown.\n+   *\n+   * @return the cause\n+   */\n+  public Throwable getCause()\n+  {\n+    return super.getCause();\n+  }\n+\n+  /**\n+   * Convert this to a string, including its cause.\n+   *\n+   * @return the string conversion\n+   */\n+  public String toString()\n+  {\n+    return super.toString();\n+  }\n+\n+  /**\n+   * Print the stack trace to <code>System.err</code>.\n+   */\n+  public void printStackTrace()\n+  {\n+    super.printStackTrace();\n+  }\n+\n+  /**\n+   * Print the stack trace to a stream.\n+   *\n+   * @param stream the stream\n+   */\n+  public void printStackTrace(PrintStream stream)\n+  {\n+    super.printStackTrace(stream);\n+  }\n+\n+  /**\n+   * Print the stack trace to a stream.\n+   *\n+   * @param stream the stream\n+   */\n+  public void printStackTrace(PrintWriter stream)\n+  {\n+    super.printStackTrace(stream);\n+  }\n+}"}, {"sha": "a7730098f7bbe2af6af9464efca160e8f93ef7b7", "filename": "libjava/java/security/cert/CertificateEncodingException.java", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateEncodingException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateEncodingException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateEncodingException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,13 +1,13 @@\n-/* CertificateEncodingException.java --- Certificate Encoding Exception\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+/* CertificateEncodingException.java -- Certificate Encoding Exception\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,31 +39,33 @@\n package java.security.cert;\n \n /**\n-\tException for a Certificate Encoding.\n-\n-\t@since JDK 1.2\n-\n-\t@author Mark Benvenuto\n-*/\n+ * Exception for a Certificate Encoding.\n+ *\n+ * @author Mark Benvenuto\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n public class CertificateEncodingException extends CertificateException\n {\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = 6219492851589449162L;\n \n   /**\n-     Constructs an CertificateEncodingException without a message string.\n-  */\n+   * Constructs an exception without a message string.\n+   */\n   public CertificateEncodingException()\n   {\n-    super();\n   }\n \n   /**\n-     Constructs an CertificateEncodingException with a message string.\n-\n-     @param msg A message to display with exception\n-  */\n+   * Constructs an exception with a message string.\n+   *\n+   * @param msg A message to display with exception\n+   */\n   public CertificateEncodingException(String msg)\n   {\n-    super( msg );\n+    super(msg);\n   }\n-\n }"}, {"sha": "d833834a13a927dc09f670f6efb5b426859565ac", "filename": "libjava/java/security/cert/CertificateException.java", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,13 +1,13 @@\n-/* CertificateException.java --- Certificate Exception\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+/* CertificateException.java -- Certificate Exception\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,34 +37,38 @@\n \n \n package java.security.cert;\n+\n import java.security.GeneralSecurityException;\n \n /**\n-\tException for a Certificate.\n-\n-\t@since JDK 1.2\n-\n-\t@author Mark Benvenuto\n-*/\n+ * Exception for a Certificate.\n+ *\n+ * @author Mark Benvenuto\n+ * @see Certificate\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n public class CertificateException extends GeneralSecurityException\n {\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = 3192535253797119798L;\n \n   /**\n-     Constructs an CertificateException without a message string.\n-  */\n+   * Constructs an exception without a message string.\n+   */\n   public CertificateException()\n   {\n-    super();\n   }\n \n   /**\n-     Constructs an CertificateException with a message string.\n-\n-     @param msg A message to display with exception\n-  */\n+   * Constructs an exception with a message string.\n+   *\n+   * @param msg a message to display with exception\n+   */\n   public CertificateException(String msg)\n   {\n-    super( msg );\n+    super(msg);\n   }\n-\n }"}, {"sha": "6d23508656c908e299383d45a1815db575928d57", "filename": "libjava/java/security/cert/CertificateExpiredException.java", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateExpiredException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateExpiredException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateExpiredException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,13 +1,13 @@\n /* CertificateExpiredException.java --- Certificate Expired Exception\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,31 +39,33 @@\n package java.security.cert;\n \n /**\n-   Exception for a Certificate Expiring.\n-   \n-   @since JDK 1.2\n-   \n-   @author Mark Benvenuto\n-*/\n+ * Exception for a Certificate Expiring.\n+ *\n+ * @author Mark Benvenuto\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n public class CertificateExpiredException extends CertificateException\n {\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = 9071001339691533771L;\n \n   /**\n-     Constructs an CertificateExpiredException without a message string.\n-  */\n+   * Constructs an exception without a message string.\n+   */\n   public CertificateExpiredException()\n   {\n-    super();\n   }\n \n   /**\n-     Constructs an CertificateExpiredException with a message string.\n-\n-     @param msg A message to display with exception\n-  */\n+   * Constructs an exception with a message string.\n+   *\n+   * @param msg a message to display with exception\n+   */\n   public CertificateExpiredException(String msg)\n   {\n-    super( msg );\n+    super(msg);\n   }\n-\n }"}, {"sha": "4318862ec9c91011ccf4e7f778f369d0921096a6", "filename": "libjava/java/security/cert/CertificateFactory.java", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateFactory.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,5 +1,5 @@\n-/* CertificateFactory.java --- Certificate Factory Class\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+/* CertificateFactory.java -- Certificate Factory Class\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -52,9 +52,9 @@\n    java.security.cert.X509Certificate class, and CRLs of the \n    java.security.cert.X509CRL class. \n    \n-   @since JDK 1.2\n-\n    @author Mark Benvenuto\n+   @since JDK 1.2\n+   @status still missing full 1.4 support\n */\n public class CertificateFactory\n {\n@@ -267,4 +267,9 @@ public final Collection generateCRLs(InputStream inStream)\n     return certFacSpi.engineGenerateCRLs( inStream );\n   }\n \n-}\n+  public final CertPath generateCertPath(InputStream inStream)\n+    throws CertificateException\n+  {\n+    throw new CertificateException(\"not implemented\");\n+  }\n+} // class CertificateFactory"}, {"sha": "d831265a98ae36a0118a5cf8b9af2f8020dee96f", "filename": "libjava/java/security/cert/CertificateNotYetValidException.java", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateNotYetValidException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateNotYetValidException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateNotYetValidException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,13 +1,13 @@\n-/* CertificateNotYetValidException.java --- Certificate Not Yet Valid Exception\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+/* CertificateNotYetValidException.java -- Certificate Not Yet Valid Exception\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,31 +39,33 @@\n package java.security.cert;\n \n /**\n-   Exception for a Certificate being not yet valid.\n-   \n-   @since JDK 1.2\n-   \n-   @author Mark Benvenuto\n+ * Exception for a Certificate that is not yet valid.\n+ *\n+ * @author Mark Benvenuto\n+ * @since 1.2\n+ * @status updated to 1.4\n */\n public class CertificateNotYetValidException extends CertificateException\n {\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = 4355919900041064702L;\n \n   /**\n-     Constructs an CertificateNotYetValidException without a message string.\n-  */\n+   * Constructs an exception without a message string.\n+   */\n   public CertificateNotYetValidException()\n   {\n-    super();\n   }\n \n   /**\n-     Constructs an CertificateNotYetValidException with a message string.\n-\n-     @param msg A message to display with exception\n-  */\n+   * Constructs an exception with a message string.\n+   *\n+   * @param msg A message to display with exception\n+   */\n   public CertificateNotYetValidException(String msg)\n   {\n-    super( msg );\n+    super(msg);\n   }\n-\n }"}, {"sha": "adc8935d2a7a9440f0c54064b73cea3f0510e3bc", "filename": "libjava/java/security/cert/CertificateParsingException.java", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateParsingException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateParsingException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateParsingException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,13 +1,13 @@\n-/* CertificateParsingException.java --- Certificate Parsing Exception\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+/* CertificateParsingException.java -- Certificate Parsing Exception\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,31 +39,33 @@\n package java.security.cert;\n \n /**\n-   Exception for a Certificate Parsing.\n-   \n-   @since JDK 1.2\n-   \n-   @author Mark Benvenuto\n+ * Exception for parsing a DER-encoded Certificate.\n+ *\n+ * @author Mark Benvenuto\n+ * @since 1.2\n+ * @status updated to 1.4\n */\n public class CertificateParsingException extends CertificateException\n {\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = -7989222416793322029L;\n \n   /**\n-     Constructs an CertificateParsingException without a message string.\n-  */\n+   * Constructs an exception without a message string.\n+   */\n   public CertificateParsingException()\n   {\n-    super();\n   }\n \n   /**\n-     Constructs an CertificateParsingException with a message string.\n-\n-     @param msg A message to display with exception\n-  */\n+   * Constructs an exception with a message string.\n+   *\n+   * @param msg a message to display with exception\n+   */\n   public CertificateParsingException(String msg)\n   {\n-    super( msg );\n+    super(msg);\n   }\n-\n }"}, {"sha": "d64e3f66e90f1bf99c991e3bc494af73de7e5b5f", "filename": "libjava/java/security/spec/InvalidKeySpecException.java", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidKeySpecException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidKeySpecException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidKeySpecException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,13 +1,13 @@\n-/* InvalidKeySpecException.java --- Invalid KeySpec Exception\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+/* InvalidKeySpecException.java -- invalid KeySpec Exception\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,34 +37,38 @@\n \n \n package java.security.spec;\n+\n import java.security.GeneralSecurityException;\n \n /**\n-\tException for an invalid key specification.\n-\n-\t@since JDK 1.2\n-\n-\t@author Mark Benvenuto\n-*/\n-public class InvalidKeySpecException extends GeneralSecurityException \n+ * Exception for an invalid key specification.\n+ *\n+ * @author Mark Benvenuto\n+ * @see KeySpec\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n+public class InvalidKeySpecException extends GeneralSecurityException\n {\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = 3546139293998810778L;\n \n   /**\n-     Constructs an InvalidKeySpecException without a message string.\n-  */\n-  public InvalidKeySpecException() \n+   * Constructs an InvalidKeySpecException without a message string.\n+   */\n+  public InvalidKeySpecException()\n   {\n-    super();\n   }\n \n   /**\n-     Constructs an InvalidKeySpecException with a message string.\n-\n-     @param msg A message to display with exception\n-  */\n+   * Constructs an InvalidKeySpecException with a message string.\n+   *\n+   * @param msg a message to display with exception\n+   */\n   public InvalidKeySpecException(String msg)\n   {\n-    super( msg );\n+    super(msg);\n   }\n-\n }"}, {"sha": "7b8aca602701a01a1c537fed7c5f6f1ef6537529", "filename": "libjava/java/security/spec/InvalidParameterSpecException.java", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidParameterSpecException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f108e266cd19172d664d433e772420e88d1504/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidParameterSpecException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidParameterSpecException.java?ref=d2f108e266cd19172d664d433e772420e88d1504", "patch": "@@ -1,13 +1,13 @@\n-/* InvalidParameterSpecException.java --- Invalid ParameterSpec Exception\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+/* InvalidParameterSpecException.java --- invalid ParameterSpec Exception\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,34 +37,40 @@\n \n \n package java.security.spec;\n+\n import java.security.GeneralSecurityException;\n \n /**\n-\tException for an invalid algorithm specification.\n-\n-\t@since JDK 1.2\n-\n-\t@author Mark Benvenuto\n+ * Exception for an invalid algorithm specification.\n+ *\n+ * @author Mark Benvenuto\n+ * @see AlogorithmParameters\n+ * @see AlogorithmParameterSpec\n+ * @see DSAParameterSpec\n+ * @since 1.2\n+ * @status updated to 1.4\n */\n public class InvalidParameterSpecException extends GeneralSecurityException\n {\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = -970468769593399342L;\n \n   /**\n-     Constructs an InvalidParameterSpecException without a message string.\n-  */\n+   * Constructs an InvalidParameterSpecException without a message string.\n+   */\n   public InvalidParameterSpecException() \n   {\n-    super();\n   }\n \n   /**\n-     Constructs an InvalidParameterSpecException with a message string.\n-\n-     @param msg A message to display with exception\n-  */\n-  public InvalidParameterSpecException(String msg) \n+   * Constructs an InvalidParameterSpecException with a message string.\n+   *\n+   * @param msg a message to display with exception\n+   */\n+  public InvalidParameterSpecException(String msg)\n   {\n-    super( msg );\n+    super(msg);\n   }\n-\n }"}]}