{"sha": "bde8c97ca7279a6dd3b0082e0573f9cd01587476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRlOGM5N2NhNzI3OWE2ZGQzYjAwODJlMDU3M2Y5Y2QwMTU4NzQ3Ng==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-02-19T21:26:34Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-02-19T21:26:34Z"}, "message": "mips.exp: Comment !CPU in the isa* pseudo-options.\n\n\t* gcc.target/mips/mips.exp: Comment !CPU in the isa* pseudo-options.\n\t(mips-dg-options): When matching isa* pseudo-options make\n\t'value' optional and accept ! entries.  Use $spec instead of\n\t$isa_spec in the isa pseudo-option error message.  Only\n\tperform the ISA-range check when 'value' is set.  If arch is\n\tmatching any CPU in the ! entries switch to its generic ISA.\n\t* gcc.target/mips/branch-1.c: Pass isa=!octeon.\n\t* gcc.target/mips/dmult-1.c: Pass isa=64!octeon rather than\n\t-mips64.\n\nFrom-SVN: r144306", "tree": {"sha": "eda700ee05668667744a9ae6ce1ddd1544389d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eda700ee05668667744a9ae6ce1ddd1544389d18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bde8c97ca7279a6dd3b0082e0573f9cd01587476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde8c97ca7279a6dd3b0082e0573f9cd01587476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde8c97ca7279a6dd3b0082e0573f9cd01587476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde8c97ca7279a6dd3b0082e0573f9cd01587476/comments", "author": null, "committer": null, "parents": [{"sha": "098126222904e77a0e986d46baa99c5f91f53812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098126222904e77a0e986d46baa99c5f91f53812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098126222904e77a0e986d46baa99c5f91f53812"}], "stats": {"total": 99, "additions": 72, "deletions": 27}, "files": [{"sha": "38d67d57638b4b63e80ca2c438159e4d28dfa419", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde8c97ca7279a6dd3b0082e0573f9cd01587476/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde8c97ca7279a6dd3b0082e0573f9cd01587476/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bde8c97ca7279a6dd3b0082e0573f9cd01587476", "patch": "@@ -1,3 +1,15 @@\n+2009-02-19  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/mips.exp: Comment !CPU in the isa* pseudo-options.\n+\t(mips-dg-options): When matching isa* pseudo-options make\n+\t'value' optional and accept ! entries.  Use $spec instead of\n+\t$isa_spec in the isa pseudo-option error message.  Only\n+\tperform the ISA-range check when 'value' is set.  If arch is\n+\tmatching any CPU in the ! entries switch to its generic ISA.\n+\t* gcc.target/mips/branch-1.c: Pass isa=!octeon.\n+\t* gcc.target/mips/dmult-1.c: Pass isa=64!octeon rather than\n+\t-mips64.\n+\n 2009-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/39175"}, {"sha": "b70b2640f8c2552389a99901f5e3131301c07d45", "filename": "gcc/testsuite/gcc.target/mips/branch-1.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde8c97ca7279a6dd3b0082e0573f9cd01587476/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde8c97ca7279a6dd3b0082e0573f9cd01587476/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-1.c?ref=bde8c97ca7279a6dd3b0082e0573f9cd01587476", "patch": "@@ -1,6 +1,8 @@\n-/* We should implement these \"if\" statements using an \"andi\" instruction\n-   followed by a branch on zero.  */\n-/* { dg-options \"-O2\" } */\n+/* Octeon targets should use \"bbit\" instructions for these \"if\" statements,\n+   but we test for \"bbit\" elsewhere.  On other targets, we should implement\n+   the \"if\" statements using an \"andi\" instruction followed by a branch\n+   on zero.  */\n+/* { dg-options \"-O2 isa=!octeon\" } */\n \n void bar (void);\n NOMIPS16 void f1 (int x) { if (x & 4) bar (); }"}, {"sha": "6d4120435b7ee706acb4e0d1df795853f2a07f40", "filename": "gcc/testsuite/gcc.target/mips/dmult-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde8c97ca7279a6dd3b0082e0573f9cd01587476/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde8c97ca7279a6dd3b0082e0573f9cd01587476/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c?ref=bde8c97ca7279a6dd3b0082e0573f9cd01587476", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mips64 -mgp64\" } */\n+/* { dg-options \"isa=64!octeon -mgp64\" } */\n /* { dg-final { scan-assembler \"\\tdmult\\t\" } } */\n /* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n /* { dg-final { scan-assembler-not \"\\tdmul\\t\" } } */"}, {"sha": "40d50d5532067c84ccfb565d027dbee5cf774dd0", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 54, "deletions": 23, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde8c97ca7279a6dd3b0082e0573f9cd01587476/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde8c97ca7279a6dd3b0082e0573f9cd01587476/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=bde8c97ca7279a6dd3b0082e0573f9cd01587476", "patch": "@@ -135,10 +135,18 @@\n #\tthe value of the __mips_isa_rev macro, or 0 if it isn't defined.\n #\n # For example, \"isa_rev>=1\" selects a MIPS32 or MIPS64 processor,\n-# \"isa=4\" selects a MIPS IV processor, and so on.  There are also\n-# the following special pseudo-options:\n+# \"isa=4\" selects a MIPS IV processor, and so on.\n #\n-#   isa=loongson:\n+# If certain processor-specific extensions are not applicable to the\n+# test you can list them as !CPU in the isa or isa_rev options.  For\n+# example, isa=64!octeon enforces MIPS64 while avoiding octeon.  You\n+# can also use ! without an ISA value.  For example\n+# isa=!octeon!loongson2e disables octeon and loongson2e if otherwise\n+# you would compile for one of them.\n+#\n+# There are also the following special pseudo-options:\n+#\n+#   isa=loongson\n #\tselect a Loongson processor\n #\n #   addressing=absolute\n@@ -173,6 +181,9 @@\n #\toptions.  For example, if the feature is present on revision 2\n #\tprocessors and above, try to use \"isa_rev>=2\" instead of\n #\t\"-mips32r2\" or \"-mips64r2\".\n+#\n+#   (6) If you need to disable processor-specific extensions use\n+#\tisa=!CPU instead of forcing a generic ISA.\n \n # Exit immediately if this isn't a MIPS target.\n if ![istarget mips*-*-*] {\n@@ -825,29 +836,49 @@ proc mips-dg-options { args } {\n \t\tset arch \"-march=loongson2f\"\n \t    }\n \t} else {\n-\t    if { ![regexp {^(isa(?:|_rev))(=|<=|>=)([0-9]+)$} $spec \\\n-\t\t       dummy prop relation value] } {\n-\t\terror \"Unrecognized isa specification: $isa_spec\"\n+\t    # With ! and = the ISA value is optional.\n+\t    if { ![regexp {^(isa(?:|_rev))(=|<=|>=)([0-9]*)((?:![^!]+)*)$} \\\n+\t\t       $spec dummy prop relation value nocpus]\n+\t\t || ($value eq \"\"\n+\t\t     && ($relation ne \"=\"\n+\t\t\t || $nocpus eq \"\"))} {\n+\t\terror \"Unrecognized isa specification: $spec\"\n \t    }\n-\t    set current [mips_arch_info $arch $prop]\n-\t    if { ($current < $value && ![string equal $relation \"<=\"])\n-\t\t || ($current > $value && ![string equal $relation \">=\"])\n-\t\t || ([mips_have_test_option_p options \"-mgp64\"]\n-\t\t     && [mips_32bit_arch_p $arch]) } {\n-\t\t# The current setting is out of range; it cannot\n-\t\t# possibly be used.  Find a replacement that can.\n-\t\tif { [string equal $prop \"isa\"] } {\n-\t\t    set arch \"-mips$value\"\n-\t\t} elseif { $value == 0 } {\n-\t\t    set arch \"-mips4\"\n-\t\t} else {\n-\t\t    if { [mips_have_option_p options \"-mgp32\"] } {\n-\t\t\tset arch \"-mips32\"\n+\t    if { $value ne \"\" } {\n+\t\tset current [mips_arch_info $arch $prop]\n+\t\tif { ($current < $value && ![string equal $relation \"<=\"])\n+\t\t     || ($current > $value && ![string equal $relation \">=\"])\n+\t\t     || ([mips_have_test_option_p options \"-mgp64\"]\n+\t\t\t && [mips_32bit_arch_p $arch]) } {\n+\t\t    # The current setting is out of range; it cannot\n+\t\t    # possibly be used.  Find a replacement that can.\n+\t\t    if { [string equal $prop \"isa\"] } {\n+\t\t\tset arch \"-mips$value\"\n+\t\t    } elseif { $value == 0 } {\n+\t\t\tset arch \"-mips4\"\n \t\t    } else {\n-\t\t\tset arch \"-mips64\"\n+\t\t\tif { [mips_have_option_p options \"-mgp32\"] } {\n+\t\t\t    set arch \"-mips32\"\n+\t\t\t} else {\n+\t\t\t    set arch \"-mips64\"\n+\t\t\t}\n+\t\t\tif { $value > 1 } {\n+\t\t\t    append arch \"r$value\"\n+\t\t\t}\n \t\t    }\n-\t\t    if { $value > 1 } {\n-\t\t\tappend arch \"r$value\"\n+\t\t}\n+\t    }\n+\t    # If we haven't switched to a generic ISA based on the\n+\t    # isa* value, do it here if the processor-specific\n+\t    # extension is not allowed.\n+\t    if { $nocpus ne \"\"\n+\t\t && $arch eq [mips_option mips_base_options arch] } {\n+\t\tset cpu [regsub -- {-march=} $arch \"\"]\n+\t\tif { [regexp \"!$cpu!\" \"$nocpus!\"] } {\n+\t\t    set isa_rev [mips_arch_info $arch isa_rev]\n+\t\t    set arch \"-mips[mips_arch_info $arch isa]\"\t\t\n+\t\t    if { $isa_rev > 1 } {\n+\t\t\tappend arch \"r$isa_rev\"\n \t\t    }\n \t\t}\n \t    }"}]}