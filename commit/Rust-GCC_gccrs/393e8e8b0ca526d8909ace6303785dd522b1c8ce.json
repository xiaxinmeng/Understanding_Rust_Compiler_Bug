{"sha": "393e8e8b0ca526d8909ace6303785dd522b1c8ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzZThlOGIwY2E1MjZkODkwOWFjZTYzMDM3ODVkZDUyMmIxYzhjZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-01-23T21:01:08Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-01-23T21:01:08Z"}, "message": "re PR c/59846 (Imprecise column number for -Wtype-limits)\n\n\tPR c/59846\nc-family/\n\t* c-common.c (shorten_compare): Add location_t parameter.\n\t* c-common.h (shorten_binary_op): Adjust declaration.\ncp/\n\t* typeck.c (cp_build_binary_op): Pass location to shorten_compare.\nc/\n\t* c-typeck.c (parser_build_binary_op): Use location instead of\n\tinput_location.\n\t(build_binary_op): Pass location to shorten_compare.\ntestsuite/\n\t* gcc.dg/pr59846.c: New test.\n\nFrom-SVN: r207008", "tree": {"sha": "98eae88584be77108a2375e808287ccd88b48a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98eae88584be77108a2375e808287ccd88b48a78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/393e8e8b0ca526d8909ace6303785dd522b1c8ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393e8e8b0ca526d8909ace6303785dd522b1c8ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/393e8e8b0ca526d8909ace6303785dd522b1c8ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393e8e8b0ca526d8909ace6303785dd522b1c8ce/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e23f2967868d307d367385411a5e61e6de2c02b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e23f2967868d307d367385411a5e61e6de2c02b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e23f2967868d307d367385411a5e61e6de2c02b"}], "stats": {"total": 84, "additions": 75, "deletions": 9}, "files": [{"sha": "34c166041c079ef5a9a3c265e6bafb69d3d67f48", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=393e8e8b0ca526d8909ace6303785dd522b1c8ce", "patch": "@@ -1,3 +1,9 @@\n+2014-01-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59846\n+\t* c-common.c (shorten_compare): Add location_t parameter.\n+\t* c-common.h (shorten_binary_op): Adjust declaration.\n+\n 2014-01-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/58346"}, {"sha": "86cec72a173804556df5250b5a0477310a84a4c9", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=393e8e8b0ca526d8909ace6303785dd522b1c8ce", "patch": "@@ -3974,13 +3974,15 @@ expr_original_type (tree expr)\n    of build_binary_op: OP0_PTR is &OP0, OP1_PTR is &OP1,\n    RESTYPE_PTR is &RESULT_TYPE and RESCODE_PTR is &RESULTCODE.\n \n+   LOC is the location of the comparison.\n+\n    If this function returns nonzero, it means that the comparison has\n    a constant value.  What this function returns is an expression for\n    that value.  */\n \n tree\n-shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n-\t\t enum tree_code *rescode_ptr)\n+shorten_compare (location_t loc, tree *op0_ptr, tree *op1_ptr,\n+\t\t tree *restype_ptr, enum tree_code *rescode_ptr)\n {\n   tree type;\n   tree op0 = *op0_ptr;\n@@ -3989,7 +3991,6 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n   int real1, real2;\n   tree primop0, primop1;\n   enum tree_code code = *rescode_ptr;\n-  location_t loc = EXPR_LOC_OR_LOC (op0, input_location);\n \n   /* Throw away any conversions to wider types\n      already present in the operands.  */"}, {"sha": "d7077fd7f94522d987762e45aba56365c3a767fa", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=393e8e8b0ca526d8909ace6303785dd522b1c8ce", "patch": "@@ -800,7 +800,8 @@ extern tree shorten_binary_op (tree result_type, tree op0, tree op1, bool bitwis\n /* Subroutine of build_binary_op, used for comparison operations.\n    See if the operands have both been converted from subword integer types\n    and, if so, perhaps change them both back to their original type.  */\n-extern tree shorten_compare (tree *, tree *, tree *, enum tree_code *);\n+extern tree shorten_compare (location_t, tree *, tree *, tree *,\n+\t\t\t     enum tree_code *);\n \n extern tree pointer_int_sum (location_t, enum tree_code, tree, tree,\n \t\t\t     bool = true);"}, {"sha": "834c4202fe2f97365125cdc071c08775cba0a16c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=393e8e8b0ca526d8909ace6303785dd522b1c8ce", "patch": "@@ -1,3 +1,10 @@\n+2014-01-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59846\n+\t* c-typeck.c (parser_build_binary_op): Use location instead of\n+\tinput_location.\n+\t(build_binary_op): Pass location to shorten_compare.\n+\n 2014-01-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/58346"}, {"sha": "f71bea4abe652234a11e6a88ee0a3448d5390e02", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=393e8e8b0ca526d8909ace6303785dd522b1c8ce", "patch": "@@ -3388,11 +3388,11 @@ parser_build_binary_op (location_t location, enum tree_code code,\n   /* Check for cases such as x+y<<z which users are likely\n      to misinterpret.  */\n   if (warn_parentheses)\n-    warn_about_parentheses (input_location, code,\n-\t\t\t    code1, arg1.value, code2, arg2.value);\n+    warn_about_parentheses (location, code, code1, arg1.value, code2,\n+\t\t\t    arg2.value);\n \n   if (warn_logical_op)\n-    warn_logical_operator (input_location, code, TREE_TYPE (result.value),\n+    warn_logical_operator (location, code, TREE_TYPE (result.value),\n \t\t\t   code1, arg1.value, code2, arg2.value);\n \n   /* Warn about comparisons against string literals, with the exception\n@@ -10891,7 +10891,8 @@ build_binary_op (location_t location, enum tree_code code,\n \t  tree xop0 = op0, xop1 = op1, xresult_type = result_type;\n \t  enum tree_code xresultcode = resultcode;\n \t  tree val\n-\t    = shorten_compare (&xop0, &xop1, &xresult_type, &xresultcode);\n+\t    = shorten_compare (location, &xop0, &xop1, &xresult_type,\n+\t\t\t       &xresultcode);\n \n \t  if (val != 0)\n \t    {"}, {"sha": "e6631700d18c1b27837fda3334dedb75233f438e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=393e8e8b0ca526d8909ace6303785dd522b1c8ce", "patch": "@@ -1,3 +1,8 @@\n+2014-01-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59846\n+\t* typeck.c (cp_build_binary_op): Pass location to shorten_compare.\n+\n 2014-01-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/58346"}, {"sha": "f40f3095b38921ab0080426691f33f888c7ab142", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=393e8e8b0ca526d8909ace6303785dd522b1c8ce", "patch": "@@ -4838,7 +4838,8 @@ cp_build_binary_op (location_t location,\n \t  tree xop0 = op0, xop1 = op1, xresult_type = result_type;\n \t  enum tree_code xresultcode = resultcode;\n \t  tree val\n-\t    = shorten_compare (&xop0, &xop1, &xresult_type, &xresultcode);\n+\t    = shorten_compare (location, &xop0, &xop1, &xresult_type,\n+\t\t\t       &xresultcode);\n \t  if (val != 0)\n \t    return cp_convert (boolean_type_node, val, complain);\n \t  op0 = xop0, op1 = xop1;"}, {"sha": "47352e1d26e68f3dc46b56d06e2caebe39ba2f99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=393e8e8b0ca526d8909ace6303785dd522b1c8ce", "patch": "@@ -1,3 +1,8 @@\n+2014-01-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59846\n+\t* gcc.dg/pr59846.c: New test.\n+\n 2014-01-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/58346"}, {"sha": "e002fba3fe47ce6222171672a983d59688690cf4", "filename": "gcc/testsuite/gcc.dg/pr59846.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59846.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393e8e8b0ca526d8909ace6303785dd522b1c8ce/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59846.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59846.c?ref=393e8e8b0ca526d8909ace6303785dd522b1c8ce", "patch": "@@ -0,0 +1,39 @@\n+/* PR c/59846 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wlogical-op -Wtype-limits\" } */\n+\n+_Bool\n+fn1 (unsigned int p)\n+{\n+  return 0UL > p; /* { dg-warning \"14:comparison is always false due to limited range of data type\" } */\n+}\n+\n+_Bool\n+fn2 (unsigned int p)\n+{\n+  return 0UL <= p; /* { dg-warning \"14:comparison is always true due to limited range of data type\" } */\n+}\n+\n+_Bool\n+fn3 (unsigned int p)\n+{\n+  return p >= 0U; /* { dg-warning \"12:comparison of unsigned expression >= 0 is always true\" } */\n+}\n+\n+_Bool\n+fn4 (unsigned int p)\n+{\n+  return p < 0U; /* { dg-warning \"12:comparison of unsigned expression < 0 is always false\" } */\n+}\n+\n+_Bool\n+fn5 (_Bool p)\n+{\n+  return p || !p; /* { dg-warning \"12:logical\" } */\n+}\n+\n+_Bool\n+fn6 (_Bool p)\n+{\n+  return p && !p; /* { dg-warning \"12:logical\" } */\n+}"}]}