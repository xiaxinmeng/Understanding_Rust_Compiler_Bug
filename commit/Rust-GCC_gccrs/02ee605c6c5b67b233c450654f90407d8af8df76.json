{"sha": "02ee605c6c5b67b233c450654f90407d8af8df76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJlZTYwNWM2YzViNjdiMjMzYzQ1MDY1NGY5MDQwN2Q4YWY4ZGY3Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-09-28T18:16:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-09-28T18:16:54Z"}, "message": "builtins.c (get_builtin_sync_mode): New.\n\n        * builtins.c (get_builtin_sync_mode): New.\n        (expand_builtin_sync_operation): Pass in mode argument.\n        (expand_builtin_compare_and_swap): Likewise.\n        (expand_builtin_lock_test_and_set): Likewise.\n        (expand_builtin_lock_release): Likewise.\n        (expand_builtin): Update to match.\n\nFrom-SVN: r104741", "tree": {"sha": "2ac4def1b89a45effbdfbd51880993503c660fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ac4def1b89a45effbdfbd51880993503c660fa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ee605c6c5b67b233c450654f90407d8af8df76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ee605c6c5b67b233c450654f90407d8af8df76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ee605c6c5b67b233c450654f90407d8af8df76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ee605c6c5b67b233c450654f90407d8af8df76/comments", "author": null, "committer": null, "parents": [{"sha": "7d866c52c5ae7ff55669c2f053554e67929736a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d866c52c5ae7ff55669c2f053554e67929736a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d866c52c5ae7ff55669c2f053554e67929736a2"}], "stats": {"total": 95, "additions": 65, "deletions": 30}, "files": [{"sha": "67db2cb47c75fa559aa4839083e5937bfb75d359", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ee605c6c5b67b233c450654f90407d8af8df76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ee605c6c5b67b233c450654f90407d8af8df76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02ee605c6c5b67b233c450654f90407d8af8df76", "patch": "@@ -1,3 +1,12 @@\n+2005-09-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (get_builtin_sync_mode): New.\n+\t(expand_builtin_sync_operation): Pass in mode argument.\n+\t(expand_builtin_compare_and_swap): Likewise.\n+\t(expand_builtin_lock_test_and_set): Likewise.\n+\t(expand_builtin_lock_release): Likewise.\n+\t(expand_builtin): Update to match.\n+\n 2005-09-28  Nick Clifton  <nickc@redhat.com>\n \n \t* config/v850/v850.h (GO_IF_LEGITIMATE_ADDRESS): Tidy up"}, {"sha": "12ae9d9f549d7e4bf22e5944c9033e2a4a2e1be7", "filename": "gcc/builtins.c", "status": "modified", "additions": 56, "deletions": 30, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ee605c6c5b67b233c450654f90407d8af8df76/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ee605c6c5b67b233c450654f90407d8af8df76/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=02ee605c6c5b67b233c450654f90407d8af8df76", "patch": "@@ -5388,6 +5388,20 @@ expand_builtin_fork_or_exec (tree fn, tree arglist, rtx target, int ignore)\n }\n \n \f\n+/* Reconstitute a mode for a __sync intrinsic operation.  Since the type of\n+   the pointer in these functions is void*, the tree optimizers may remove\n+   casts.  The mode computed in expand_builtin isn't reliable either, due\n+   to __sync_bool_compare_and_swap.\n+\n+   FCODE_DIFF should be fcode - base, where base is the FOO_1 code for the\n+   group of builtins.  This gives us log2 of the mode size.  */\n+\n+static inline enum machine_mode\n+get_builtin_sync_mode (int fcode_diff)\n+{\n+  return mode_for_size (BITS_PER_UNIT << fcode_diff, MODE_INT, 1);\n+}\n+\n /* Expand the __sync_xxx_and_fetch and __sync_fetch_and_xxx intrinsics.\n    ARGLIST is the operands list to the function.  CODE is the rtx code \n    that corresponds to the arithmetic or logical operation from the name;\n@@ -5397,15 +5411,14 @@ expand_builtin_fork_or_exec (tree fn, tree arglist, rtx target, int ignore)\n    the result of the operation at all.  */\n \n static rtx\n-expand_builtin_sync_operation (tree arglist, enum rtx_code code, bool after,\n+expand_builtin_sync_operation (enum machine_mode mode, tree arglist,\n+\t\t\t       enum rtx_code code, bool after,\n \t\t\t       rtx target, bool ignore)\n {\n-  enum machine_mode mode;\n   rtx addr, val, mem;\n \n   /* Expand the operands.  */\n   addr = expand_expr (TREE_VALUE (arglist), NULL, Pmode, EXPAND_SUM);\n-  mode = TYPE_MODE (TREE_TYPE (TREE_TYPE (TREE_VALUE (arglist))));\n \n   arglist = TREE_CHAIN (arglist);\n   val = expand_expr (TREE_VALUE (arglist), NULL, mode, EXPAND_NORMAL);\n@@ -5428,14 +5441,13 @@ expand_builtin_sync_operation (tree arglist, enum rtx_code code, bool after,\n    results; this is NOT optional if IS_BOOL is true.  */\n \n static rtx\n-expand_builtin_compare_and_swap (tree arglist, bool is_bool, rtx target)\n+expand_builtin_compare_and_swap (enum machine_mode mode, tree arglist,\n+\t\t\t\t bool is_bool, rtx target)\n {\n-  enum machine_mode mode;\n   rtx addr, old_val, new_val, mem;\n \n   /* Expand the operands.  */\n   addr = expand_expr (TREE_VALUE (arglist), NULL, Pmode, EXPAND_SUM);\n-  mode = TYPE_MODE (TREE_TYPE (TREE_TYPE (TREE_VALUE (arglist))));\n \n   arglist = TREE_CHAIN (arglist);\n   old_val = expand_expr (TREE_VALUE (arglist), NULL, mode, EXPAND_NORMAL);\n@@ -5462,14 +5474,13 @@ expand_builtin_compare_and_swap (tree arglist, bool is_bool, rtx target)\n    place for us to store the results.  */\n \n static rtx\n-expand_builtin_lock_test_and_set (tree arglist, rtx target)\n+expand_builtin_lock_test_and_set (enum machine_mode mode, tree arglist,\n+\t\t\t\t  rtx target)\n {\n-  enum machine_mode mode;\n   rtx addr, val, mem;\n \n   /* Expand the operands.  */\n   addr = expand_expr (TREE_VALUE (arglist), NULL, Pmode, EXPAND_NORMAL);\n-  mode = TYPE_MODE (TREE_TYPE (TREE_TYPE (TREE_VALUE (arglist))));\n \n   arglist = TREE_CHAIN (arglist);\n   val = expand_expr (TREE_VALUE (arglist), NULL, mode, EXPAND_NORMAL);\n@@ -5509,16 +5520,14 @@ expand_builtin_synchronize (void)\n    to the function.  */\n \n static void\n-expand_builtin_lock_release (tree arglist)\n+expand_builtin_lock_release (enum machine_mode mode, tree arglist)\n {\n-  enum machine_mode mode;\n   enum insn_code icode;\n-  rtx addr, val, mem, insn;\n+  rtx addr, mem, insn;\n+  rtx val = const0_rtx;\n \n   /* Expand the operands.  */\n   addr = expand_expr (TREE_VALUE (arglist), NULL, Pmode, EXPAND_NORMAL);\n-  mode = TYPE_MODE (TREE_TYPE (TREE_TYPE (TREE_VALUE (arglist))));\n-  val = const0_rtx;\n \n   /* Note that we explicitly do not want any alias information for this\n      memory, so that we kill all other live memories.  Otherwise we don't\n@@ -6207,7 +6216,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_FETCH_AND_ADD_2:\n     case BUILT_IN_FETCH_AND_ADD_4:\n     case BUILT_IN_FETCH_AND_ADD_8:\n-      target = expand_builtin_sync_operation (arglist, PLUS,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_FETCH_AND_ADD_1);\n+      target = expand_builtin_sync_operation (mode, arglist, PLUS,\n \t\t\t\t\t      false, target, ignore);\n       if (target)\n \treturn target;\n@@ -6217,7 +6227,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_FETCH_AND_SUB_2:\n     case BUILT_IN_FETCH_AND_SUB_4:\n     case BUILT_IN_FETCH_AND_SUB_8:\n-      target = expand_builtin_sync_operation (arglist, MINUS,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_FETCH_AND_SUB_1);\n+      target = expand_builtin_sync_operation (mode, arglist, MINUS,\n \t\t\t\t\t      false, target, ignore);\n       if (target)\n \treturn target;\n@@ -6227,7 +6238,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_FETCH_AND_OR_2:\n     case BUILT_IN_FETCH_AND_OR_4:\n     case BUILT_IN_FETCH_AND_OR_8:\n-      target = expand_builtin_sync_operation (arglist, IOR,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_FETCH_AND_OR_1);\n+      target = expand_builtin_sync_operation (mode, arglist, IOR,\n \t\t\t\t\t      false, target, ignore);\n       if (target)\n \treturn target;\n@@ -6237,7 +6249,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_FETCH_AND_AND_2:\n     case BUILT_IN_FETCH_AND_AND_4:\n     case BUILT_IN_FETCH_AND_AND_8:\n-      target = expand_builtin_sync_operation (arglist, AND,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_FETCH_AND_AND_1);\n+      target = expand_builtin_sync_operation (mode, arglist, AND,\n \t\t\t\t\t      false, target, ignore);\n       if (target)\n \treturn target;\n@@ -6247,7 +6260,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_FETCH_AND_XOR_2:\n     case BUILT_IN_FETCH_AND_XOR_4:\n     case BUILT_IN_FETCH_AND_XOR_8:\n-      target = expand_builtin_sync_operation (arglist, XOR,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_FETCH_AND_XOR_1);\n+      target = expand_builtin_sync_operation (mode, arglist, XOR,\n \t\t\t\t\t      false, target, ignore);\n       if (target)\n \treturn target;\n@@ -6257,7 +6271,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_FETCH_AND_NAND_2:\n     case BUILT_IN_FETCH_AND_NAND_4:\n     case BUILT_IN_FETCH_AND_NAND_8:\n-      target = expand_builtin_sync_operation (arglist, NOT,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_FETCH_AND_NAND_1);\n+      target = expand_builtin_sync_operation (mode, arglist, NOT,\n \t\t\t\t\t      false, target, ignore);\n       if (target)\n \treturn target;\n@@ -6267,7 +6282,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_ADD_AND_FETCH_2:\n     case BUILT_IN_ADD_AND_FETCH_4:\n     case BUILT_IN_ADD_AND_FETCH_8:\n-      target = expand_builtin_sync_operation (arglist, PLUS,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_ADD_AND_FETCH_1);\n+      target = expand_builtin_sync_operation (mode, arglist, PLUS,\n \t\t\t\t\t      true, target, ignore);\n       if (target)\n \treturn target;\n@@ -6277,7 +6293,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_SUB_AND_FETCH_2:\n     case BUILT_IN_SUB_AND_FETCH_4:\n     case BUILT_IN_SUB_AND_FETCH_8:\n-      target = expand_builtin_sync_operation (arglist, MINUS,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_SUB_AND_FETCH_1);\n+      target = expand_builtin_sync_operation (mode, arglist, MINUS,\n \t\t\t\t\t      true, target, ignore);\n       if (target)\n \treturn target;\n@@ -6287,7 +6304,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_OR_AND_FETCH_2:\n     case BUILT_IN_OR_AND_FETCH_4:\n     case BUILT_IN_OR_AND_FETCH_8:\n-      target = expand_builtin_sync_operation (arglist, IOR,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_OR_AND_FETCH_1);\n+      target = expand_builtin_sync_operation (mode, arglist, IOR,\n \t\t\t\t\t      true, target, ignore);\n       if (target)\n \treturn target;\n@@ -6297,7 +6315,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_AND_AND_FETCH_2:\n     case BUILT_IN_AND_AND_FETCH_4:\n     case BUILT_IN_AND_AND_FETCH_8:\n-      target = expand_builtin_sync_operation (arglist, AND,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_AND_AND_FETCH_1);\n+      target = expand_builtin_sync_operation (mode, arglist, AND,\n \t\t\t\t\t      true, target, ignore);\n       if (target)\n \treturn target;\n@@ -6307,7 +6326,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_XOR_AND_FETCH_2:\n     case BUILT_IN_XOR_AND_FETCH_4:\n     case BUILT_IN_XOR_AND_FETCH_8:\n-      target = expand_builtin_sync_operation (arglist, XOR,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_XOR_AND_FETCH_1);\n+      target = expand_builtin_sync_operation (mode, arglist, XOR,\n \t\t\t\t\t      true, target, ignore);\n       if (target)\n \treturn target;\n@@ -6317,7 +6337,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_NAND_AND_FETCH_2:\n     case BUILT_IN_NAND_AND_FETCH_4:\n     case BUILT_IN_NAND_AND_FETCH_8:\n-      target = expand_builtin_sync_operation (arglist, NOT,\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_NAND_AND_FETCH_1);\n+      target = expand_builtin_sync_operation (mode, arglist, NOT,\n \t\t\t\t\t      true, target, ignore);\n       if (target)\n \treturn target;\n@@ -6331,7 +6352,9 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \tmode = TYPE_MODE (boolean_type_node);\n       if (!target || !register_operand (target, mode))\n \ttarget = gen_reg_rtx (mode);\n-      target = expand_builtin_compare_and_swap (arglist, true, target);\n+\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_BOOL_COMPARE_AND_SWAP_1);\n+      target = expand_builtin_compare_and_swap (mode, arglist, true, target);\n       if (target)\n \treturn target;\n       break;\n@@ -6340,7 +6363,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_VAL_COMPARE_AND_SWAP_2:\n     case BUILT_IN_VAL_COMPARE_AND_SWAP_4:\n     case BUILT_IN_VAL_COMPARE_AND_SWAP_8:\n-      target = expand_builtin_compare_and_swap (arglist, false, target);\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_VAL_COMPARE_AND_SWAP_1);\n+      target = expand_builtin_compare_and_swap (mode, arglist, false, target);\n       if (target)\n \treturn target;\n       break;\n@@ -6349,7 +6373,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_LOCK_TEST_AND_SET_2:\n     case BUILT_IN_LOCK_TEST_AND_SET_4:\n     case BUILT_IN_LOCK_TEST_AND_SET_8:\n-      target = expand_builtin_lock_test_and_set (arglist, target);\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_LOCK_TEST_AND_SET_1);\n+      target = expand_builtin_lock_test_and_set (mode, arglist, target);\n       if (target)\n \treturn target;\n       break;\n@@ -6358,7 +6383,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_LOCK_RELEASE_2:\n     case BUILT_IN_LOCK_RELEASE_4:\n     case BUILT_IN_LOCK_RELEASE_8:\n-      expand_builtin_lock_release (arglist);\n+      mode = get_builtin_sync_mode (fcode - BUILT_IN_LOCK_RELEASE_1);\n+      expand_builtin_lock_release (mode, arglist);\n       return const0_rtx;\n \n     case BUILT_IN_SYNCHRONIZE:"}]}