{"sha": "ea497bb84cf1e43948fd78d1d4a985182a91c0cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0OTdiYjg0Y2YxZTQzOTQ4ZmQ3OGQxZDRhOTg1MTgyYTkxYzBjZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-27T22:43:05Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-27T22:43:05Z"}, "message": "domwalk.c (walk_dominator_tree, [...]): Use VEC instead of VARRAY.\n\n\t* domwalk.c (walk_dominator_tree, init_walk_dominator_tree,\n\tfini_walk_dominator_tree): Use VEC instead of VARRAY.\n\t* domwalk.h (dom_walk_data): Change the type of\n\tblock_data_stack and free_block_data to VEC(void_p,heap)*.\n\t* tree-ssa-dse.c (dse_initialize_block_local_data,\n\tdse_optimize_stmt, dse_record_phis, dse_finalize_block): Use\n\tVEC instead of VARRAY.\n\nFrom-SVN: r100281", "tree": {"sha": "ab37166fa7754a17e6a22604189228ad8879627f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab37166fa7754a17e6a22604189228ad8879627f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea497bb84cf1e43948fd78d1d4a985182a91c0cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea497bb84cf1e43948fd78d1d4a985182a91c0cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea497bb84cf1e43948fd78d1d4a985182a91c0cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea497bb84cf1e43948fd78d1d4a985182a91c0cd/comments", "author": null, "committer": null, "parents": [{"sha": "4aab792de6d092becf03e1d23f74a1ec2047fc27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aab792de6d092becf03e1d23f74a1ec2047fc27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aab792de6d092becf03e1d23f74a1ec2047fc27"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "b46c46d65064cb6da9fcb783427a3388034a069f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea497bb84cf1e43948fd78d1d4a985182a91c0cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea497bb84cf1e43948fd78d1d4a985182a91c0cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea497bb84cf1e43948fd78d1d4a985182a91c0cd", "patch": "@@ -29,6 +29,14 @@\n \t* tree.h: Move the prototype of threaded_through_blocks to\n \ttree-flow.h.\n \n+\t* domwalk.c (walk_dominator_tree, init_walk_dominator_tree,\n+\tfini_walk_dominator_tree): Use VEC instead of VARRAY.\n+\t* domwalk.h (dom_walk_data): Change the type of\n+\tblock_data_stack and free_block_data to VEC(void_p,heap)*.\n+\t* tree-ssa-dse.c (dse_initialize_block_local_data,\n+\tdse_optimize_stmt, dse_record_phis, dse_finalize_block): Use\n+\tVEC instead of VARRAY.\n+\n 2005-05-27  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c: Include tree-gimple.h"}, {"sha": "389dac23e4dbd54a0fd09f3021857d49031ed7aa", "filename": "gcc/domwalk.c", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea497bb84cf1e43948fd78d1d4a985182a91c0cd/gcc%2Fdomwalk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea497bb84cf1e43948fd78d1d4a985182a91c0cd/gcc%2Fdomwalk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.c?ref=ea497bb84cf1e43948fd78d1d4a985182a91c0cd", "patch": "@@ -161,10 +161,9 @@ walk_dominator_tree (struct dom_walk_data *walk_data, basic_block bb)\n \n       /* First get some local data, reusing any local data pointer we may\n \t have saved.  */\n-      if (VARRAY_ACTIVE_SIZE (walk_data->free_block_data) > 0)\n+      if (VEC_length (void_p, walk_data->free_block_data) > 0)\n \t{\n-\t  bd = VARRAY_TOP_GENERIC_PTR (walk_data->free_block_data);\n-\t  VARRAY_POP (walk_data->free_block_data);\n+\t  bd = VEC_pop (void_p, walk_data->free_block_data);\n \t  recycled = 1;\n \t}\n       else\n@@ -174,7 +173,7 @@ walk_dominator_tree (struct dom_walk_data *walk_data, basic_block bb)\n \t}\n \n       /* Push the local data into the local data stack.  */\n-      VARRAY_PUSH_GENERIC_PTR (walk_data->block_data_stack, bd);\n+      VEC_safe_push (void_p, heap, walk_data->block_data_stack, bd);\n \n       /* Call the initializer.  */\n       walk_data->initialize_block_local_data (walk_data, bb, recycled);\n@@ -237,37 +236,29 @@ walk_dominator_tree (struct dom_walk_data *walk_data, basic_block bb)\n   if (walk_data->initialize_block_local_data)\n     {\n       /* And save the block data so that we can re-use it.  */\n-      VARRAY_PUSH_GENERIC_PTR (walk_data->free_block_data, bd);\n+      VEC_safe_push (void_p, heap, walk_data->free_block_data, bd);\n \n       /* And finally pop the record off the block local data stack.  */\n-      VARRAY_POP (walk_data->block_data_stack);\n+      VEC_pop (void_p, walk_data->block_data_stack);\n     }\n }\n \n void\n init_walk_dominator_tree (struct dom_walk_data *walk_data)\n {\n-  if (walk_data->initialize_block_local_data)\n-    {\n-      VARRAY_GENERIC_PTR_INIT (walk_data->free_block_data, 2, \"freelist \");\n-      VARRAY_GENERIC_PTR_INIT (walk_data->block_data_stack, 2, \"block_data\");\n-    }\n-  else\n-    {\n-      walk_data->free_block_data = NULL;\n-      walk_data->block_data_stack = NULL;\n-    }\n+  walk_data->free_block_data = NULL;\n+  walk_data->block_data_stack = NULL;\n }\n \n void\n fini_walk_dominator_tree (struct dom_walk_data *walk_data)\n {\n   if (walk_data->initialize_block_local_data)\n     {\n-      while (VARRAY_ACTIVE_SIZE (walk_data->free_block_data) > 0)\n-\t{\n-\t  free (VARRAY_TOP_GENERIC_PTR (walk_data->free_block_data));\n-\t  VARRAY_POP (walk_data->free_block_data);\n-\t}\n+      while (VEC_length (void_p, walk_data->free_block_data) > 0)\n+\tfree (VEC_pop (void_p, walk_data->free_block_data));\n     }\n+\n+  VEC_free (void_p, heap, walk_data->free_block_data);\n+  VEC_free (void_p, heap, walk_data->block_data_stack);\n }"}, {"sha": "ba0624ef160bdb159ba100b856615ca448359dcb", "filename": "gcc/domwalk.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea497bb84cf1e43948fd78d1d4a985182a91c0cd/gcc%2Fdomwalk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea497bb84cf1e43948fd78d1d4a985182a91c0cd/gcc%2Fdomwalk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.h?ref=ea497bb84cf1e43948fd78d1d4a985182a91c0cd", "patch": "@@ -19,6 +19,10 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+typedef void *void_p;\n+DEF_VEC_P(void_p);\n+DEF_VEC_ALLOC_P(void_p,heap);\n+\n /* This is the main data structure for the dominator walker.  It provides\n    the callback hooks as well as a convenient place to hang block local\n    data and pass-global data.  */\n@@ -94,7 +98,7 @@ struct dom_walk_data\n   /* Stack of any data we need to keep on a per-block basis.\n \n      If you have no local data, then BLOCK_DATA_STACK will be NULL.  */\n-  varray_type block_data_stack;\n+  VEC(void_p,heap) *block_data_stack;\n \n   /* Size of the block local data.   If this is zero, then it is assumed\n      you have no local data and thus no BLOCK_DATA_STACK as well.  */\n@@ -104,7 +108,7 @@ struct dom_walk_data\n      information/data outside domwalk.c.  */\n \n   /* Stack of available block local structures.  */\n-  varray_type free_block_data;\n+  VEC(void_p,heap) *free_block_data;\n \n   /* Interesting blocks to process.  If this field is not NULL, this\n      set is used to determine which blocks to walk.  If we encounter"}, {"sha": "e2d063f03ffb057b6f670d6d33e81c919e206e83", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea497bb84cf1e43948fd78d1d4a985182a91c0cd/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea497bb84cf1e43948fd78d1d4a985182a91c0cd/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=ea497bb84cf1e43948fd78d1d4a985182a91c0cd", "patch": "@@ -135,7 +135,7 @@ dse_initialize_block_local_data (struct dom_walk_data *walk_data,\n \t\t\t\t bool recycled)\n {\n   struct dse_block_local_data *bd\n-    = VARRAY_TOP_GENERIC_PTR (walk_data->block_data_stack);\n+    = VEC_last (void_p, walk_data->block_data_stack);\n \n   /* If we are given a recycled block local data structure, ensure any\n      bitmap associated with the block is cleared.  */\n@@ -163,7 +163,7 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n \t\t   block_stmt_iterator bsi)\n {\n   struct dse_block_local_data *bd\n-    = VARRAY_TOP_GENERIC_PTR (walk_data->block_data_stack);\n+    = VEC_last (void_p, walk_data->block_data_stack);\n   struct dse_global_data *dse_gd = walk_data->global_data;\n   tree stmt = bsi_stmt (bsi);\n   stmt_ann_t ann = stmt_ann (stmt);\n@@ -298,7 +298,7 @@ static void\n dse_record_phis (struct dom_walk_data *walk_data, basic_block bb)\n {\n   struct dse_block_local_data *bd\n-    = VARRAY_TOP_GENERIC_PTR (walk_data->block_data_stack);\n+    = VEC_last (void_p, walk_data->block_data_stack);\n   struct dse_global_data *dse_gd = walk_data->global_data;\n   tree phi;\n \n@@ -314,7 +314,7 @@ dse_finalize_block (struct dom_walk_data *walk_data,\n \t\t    basic_block bb ATTRIBUTE_UNUSED)\n {\n   struct dse_block_local_data *bd\n-    = VARRAY_TOP_GENERIC_PTR (walk_data->block_data_stack);\n+    = VEC_last (void_p, walk_data->block_data_stack);\n   struct dse_global_data *dse_gd = walk_data->global_data;\n   bitmap stores = dse_gd->stores;\n   unsigned int i;"}]}