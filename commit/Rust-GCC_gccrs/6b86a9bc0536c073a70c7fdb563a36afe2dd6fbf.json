{"sha": "6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI4NmE5YmMwNTM2YzA3M2E3MGM3ZmRiNTYzYTM2YWZlMmRkNmZiZg==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2006-03-30T16:30:26Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2006-03-30T16:30:26Z"}, "message": "re PR fortran/25031 ([4.1 only] Allocatable array can be reallocated.)\n\n2006-03-30  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR fortran/25031\n\t* runtime/memory.c (allocate_array):  If stat is present and\n\tthe variable is already allocated, free the variable, do\n\tthe allocation and set stat.\n\t(allocate_array_64):  Likewise.  Whitespace fix.\n\n2006-03-30  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR fortran/25031\n\t* gfortran.dg/multiple_allocation_1.f90:  Check that the\n\tsize has changed after a re-allocation with stat.\n\nFrom-SVN: r112539", "tree": {"sha": "ccefb2ba3589b346ff9e82de690b49f0e7f063c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccefb2ba3589b346ff9e82de690b49f0e7f063c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf/comments", "author": null, "committer": null, "parents": [{"sha": "c7ec5472672f0e68687081caa28ffb196e9c37a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ec5472672f0e68687081caa28ffb196e9c37a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ec5472672f0e68687081caa28ffb196e9c37a1"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "018e11c93d0513509977cb55bccedcd4d13ba354", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf", "patch": "@@ -1,3 +1,9 @@\n+2006-03-30  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/25031\n+\t* gfortran.dg/multiple_allocation_1.f90:  Check that the\n+\tsize has changed after a re-allocation with stat.\n+\n 2006-03-30  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.target/i386/sselibm-1.c: Adjust for libgcc-math partial"}, {"sha": "2b913734e478f170f823f562761792b9b7f553cf", "filename": "gcc/testsuite/gfortran.dg/multiple_allocation_1.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf/gcc%2Ftestsuite%2Fgfortran.dg%2Fmultiple_allocation_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf/gcc%2Ftestsuite%2Fgfortran.dg%2Fmultiple_allocation_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmultiple_allocation_1.f90?ref=6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf", "patch": "@@ -8,10 +8,11 @@ program alloc_test\n   integer, pointer :: b(:)\n \n   allocate(a(4))\n-  ! This should set the stat code without changing the size\n-  allocate(a(4),stat=i)\n+  ! This should set the stat code and change the size.\n+  allocate(a(3),stat=i)\n   if (i == 0) call abort\n   if (.not. allocated(a)) call abort\n+  if (size(a) /= 3) call abort\n   ! It's OK to allocate pointers twice (even though this causes\n   ! a memory leak)\n   allocate(b(4))"}, {"sha": "d082c073e6470b92fb527f288c5bf43405ce8882", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf", "patch": "@@ -1,3 +1,11 @@\n+2006-03-30  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/25031\n+\t* runtime/memory.c (allocate_array):  If stat is present and\n+\tthe variable is already allocated, free the variable, do\n+\tthe allocation and set stat.\n+\t(allocate_array_64):  Likewise.  Whitespace fix.\n+\n 2006-03-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/26880"}, {"sha": "db55a552168e322dd1134016f5be90b6f9012514", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=6b86a9bc0536c073a70c7fdb563a36afe2dd6fbf", "patch": "@@ -249,7 +249,12 @@ allocate_array (void **mem, GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n       return;\n     }\n   if (stat)\n-    *stat = ERROR_ALLOCATION;\n+    {\n+      free (*mem);\n+      allocate (mem, size, stat);\n+      *stat = ERROR_ALLOCATION;\n+      return;\n+    }\n   else\n     runtime_error (\"Attempting to allocate already allocated array.\");\n \n@@ -272,10 +277,15 @@ allocate64_array (void **mem, GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n       return;\n     }\n   if (stat)\n-    *stat = ERROR_ALLOCATION;\n+    {\n+      free (*mem);\n+      allocate (mem, size, stat);\n+      *stat = ERROR_ALLOCATION;\n+      return;\n+    }\n   else\n     runtime_error (\"Attempting to allocate already allocated array.\");\n-  \n+\n   return;\n }\n "}]}