{"sha": "abd7712f91c99690f8b0046ea168b2782afbac69", "node_id": "C_kwDOANBUbNoAKGFiZDc3MTJmOTFjOTk2OTBmOGIwMDQ2ZWExNjhiMjc4MmFmYmFjNjk", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-01T02:07:25Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-03T19:00:11Z"}, "message": "c++: Fix for decltype(auto) and parenthesized expr [PR103403]\n\nIn r11-4758, I tried to fix this problem:\n\n  int &&i = 0;\n  decltype(auto) j = i; // should behave like int &&j = i; error\n\nwherein do_auto_deduction was getting confused with a REFERENCE_REF_P\nand it didn't realize its operand was a name, not an expression, and\ndeduced the wrong type.\n\nUnfortunately that fix broke this:\n\n  int&& r = 1;\n  decltype(auto) rr = (r);\n\nwhere 'rr' should be 'int &' since '(r)' is an expression, not a name.  But\nbecause I stripped the INDIRECT_REF with the r11-4758 change, we deduced\n'rr's type as if decltype had gotten a name, resulting in 'int &&'.\n\nI suspect I thought that the REF_PARENTHESIZED_P check when setting\n'bool id' in do_auto_deduction would handle the (r) case, but that's not\nthe case; while the documentation for REF_PARENTHESIZED_P specifically says\nit can be set in INDIRECT_REF, we don't actually do so.\n\nThis patch sets REF_PARENTHESIZED_P even on REFERENCE_REF_P, so that\ndo_auto_deduction can use it.\n\nIt also removes code in maybe_undo_parenthesized_ref that I think is\ndead -- and we don't hit it while running dg.exp.  To adduce more data,\nit also looks dead here:\nhttps://splichal.eu/lcov/gcc/cp/semantics.c.gcov.html\n(It's dead since r9-1417.)\n\nAlso add a fixed test for c++/81176.\n\n\tPR c++/103403\n\ngcc/cp/ChangeLog:\n\n\t* cp-gimplify.c (cp_fold): Don't recurse if maybe_undo_parenthesized_ref\n\tdoesn't change its argument.\n\t* pt.c (do_auto_deduction): Don't strip REFERENCE_REF_P trees if they\n\tare REF_PARENTHESIZED_P.  Use stripped_init when checking for\n\tid-expression.\n\t* semantics.c (force_paren_expr): Set REF_PARENTHESIZED_P on\n\tREFERENCE_REF_P trees too.\n\t(maybe_undo_parenthesized_ref): Remove dead code.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/decltype-auto2.C: New test.\n\t* g++.dg/cpp1y/decltype-auto3.C: New test.\n\t* g++.dg/cpp1y/decltype-auto4.C: New test.\n\t* g++.dg/cpp1z/decomp-decltype1.C: New test.", "tree": {"sha": "32781ae10e31ad4c1aa96d98a625db25580b5968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32781ae10e31ad4c1aa96d98a625db25580b5968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abd7712f91c99690f8b0046ea168b2782afbac69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd7712f91c99690f8b0046ea168b2782afbac69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd7712f91c99690f8b0046ea168b2782afbac69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd7712f91c99690f8b0046ea168b2782afbac69/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9"}], "stats": {"total": 153, "additions": 133, "deletions": 20}, "files": [{"sha": "e3ede02a48ebb0815c42b1b4758c0499b4aca0e6", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=abd7712f91c99690f8b0046ea168b2782afbac69", "patch": "@@ -2421,7 +2421,8 @@ cp_fold (tree x)\n       if (REF_PARENTHESIZED_P (x))\n \t{\n \t  tree p = maybe_undo_parenthesized_ref (x);\n-\t  return cp_fold (p);\n+\t  if (p != x)\n+\t    return cp_fold (p);\n \t}\n       goto unary;\n "}, {"sha": "d3efc6ea23805251dafc25aca1842e2003a5fdb4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=abd7712f91c99690f8b0046ea168b2782afbac69", "patch": "@@ -29889,13 +29889,18 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n     }\n   else if (AUTO_IS_DECLTYPE (auto_node))\n     {\n+      /* Figure out if INIT is an unparenthesized id-expression or an\n+\t unparenthesized class member access.  */\n       tree stripped_init = tree_strip_any_location_wrapper (init);\n-      if (REFERENCE_REF_P (stripped_init))\n+      /* We need to be able to tell '(r)' and 'r' apart (when it's of\n+\t reference type).  Only the latter is an id-expression.  */\n+      if (REFERENCE_REF_P (stripped_init)\n+\t  && !REF_PARENTHESIZED_P (stripped_init))\n \tstripped_init = TREE_OPERAND (stripped_init, 0);\n-      bool id = (DECL_P (stripped_init)\n-\t\t || ((TREE_CODE (init) == COMPONENT_REF\n-\t\t      || TREE_CODE (init) == SCOPE_REF)\n-\t\t     && !REF_PARENTHESIZED_P (init)));\n+      const bool id = (DECL_P (stripped_init)\n+\t\t       || ((TREE_CODE (stripped_init) == COMPONENT_REF\n+\t\t\t    || TREE_CODE (stripped_init) == SCOPE_REF)\n+\t\t\t   && !REF_PARENTHESIZED_P (stripped_init)));\n       tree deduced = finish_decltype_type (init, id, complain);\n       deduced = canonicalize_type_argument (deduced, complain);\n       if (deduced == error_mark_node)"}, {"sha": "edba4b60e1090c0c737be6eb3183c639df60a446", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=abd7712f91c99690f8b0046ea168b2782afbac69", "patch": "@@ -2049,7 +2049,8 @@ force_paren_expr (tree expr, bool even_uneval)\n     return expr;\n \n   if (TREE_CODE (expr) == COMPONENT_REF\n-      || TREE_CODE (expr) == SCOPE_REF)\n+      || TREE_CODE (expr) == SCOPE_REF\n+      || REFERENCE_REF_P (expr))\n     REF_PARENTHESIZED_P (expr) = true;\n   else if (DECL_P (tree_strip_any_location_wrapper (expr)))\n     {\n@@ -2072,19 +2073,8 @@ maybe_undo_parenthesized_ref (tree t)\n   if (cxx_dialect < cxx14)\n     return t;\n \n-  if (INDIRECT_REF_P (t) && REF_PARENTHESIZED_P (t))\n-    {\n-      t = TREE_OPERAND (t, 0);\n-      while (TREE_CODE (t) == NON_LVALUE_EXPR\n-\t     || TREE_CODE (t) == NOP_EXPR)\n-\tt = TREE_OPERAND (t, 0);\n-\n-      gcc_assert (TREE_CODE (t) == ADDR_EXPR\n-\t\t  || TREE_CODE (t) == STATIC_CAST_EXPR);\n-      t = TREE_OPERAND (t, 0);\n-    }\n-  else if ((TREE_CODE (t) == PAREN_EXPR || TREE_CODE (t) == VIEW_CONVERT_EXPR)\n-\t     && REF_PARENTHESIZED_P (t))\n+  if ((TREE_CODE (t) == PAREN_EXPR || TREE_CODE (t) == VIEW_CONVERT_EXPR)\n+      && REF_PARENTHESIZED_P (t))\n     t = TREE_OPERAND (t, 0);\n \n   return t;"}, {"sha": "56e011e36f4622f1b47371c69f8cb687751a2c0e", "filename": "gcc/testsuite/g++.dg/cpp1y/decltype-auto2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto2.C?ref=abd7712f91c99690f8b0046ea168b2782afbac69", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/103403\n+// { dg-do compile { target c++14 } }\n+\n+template<typename T>\n+auto constexpr RtoL1(T&& r) -> decltype(auto) {\n+    return (r);\n+};\n+int main() {\n+    int t;\n+    int x{3};\n+    decltype (RtoL1(x+0)) y = t;\n+}"}, {"sha": "914e87f5b79c34c706ecb2aab1547ed7291d9fe4", "filename": "gcc/testsuite/g++.dg/cpp1y/decltype-auto3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto3.C?ref=abd7712f91c99690f8b0046ea168b2782afbac69", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/103403\n+// { dg-do compile { target c++14 } }\n+\n+int main()\n+{\n+  int i = 1;\n+  int&& r = 1;\n+    \n+  decltype(auto) ri = (i);\n+  decltype(auto) rr = (r);\n+  decltype((r)) rr2 = (r);\n+}"}, {"sha": "9765857efb199958223f8db6bcb9f256fc06d67c", "filename": "gcc/testsuite/g++.dg/cpp1y/decltype-auto4.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto4.C?ref=abd7712f91c99690f8b0046ea168b2782afbac69", "patch": "@@ -0,0 +1,65 @@\n+// PR c++/103403\n+// { dg-do compile { target c++14 } }\n+\n+struct false_type { static constexpr bool value = false; };\n+struct true_type { static constexpr bool value = true; };\n+template<class T, class U>\n+struct is_same : false_type {}; \n+template<class T>\n+struct is_same<T, T> : true_type {};\n+\n+int fn ();\n+int &ref ();\n+int &&rref ();\n+\n+struct S {\n+  int i;\n+  int &r = i;\n+};\n+\n+void\n+ids ()\n+{\n+  const S *s = new S();\n+  int i;\n+  int &ir = i;\n+  decltype(auto) r1 = s->i;\n+  static_assert (is_same<decltype(r1), int>::value, \"\");\n+  decltype(auto) r2 = s->r;\n+  static_assert (is_same<decltype(r2), int&>::value, \"\");\n+  decltype(auto) r3 = i;\n+  static_assert (is_same<decltype(r3), int>::value, \"\");\n+  decltype(auto) r4 = ir;\n+  static_assert (is_same<decltype(r4), int&>::value, \"\");\n+}\n+\n+void\n+nonids ()\n+{\n+  const S *s = new S();\n+  int i;\n+  int &ir = i;\n+  int &&irr = 42;\n+  decltype(auto) r1 = fn ();\n+  static_assert (is_same<decltype(r1), int>::value, \"\"); \n+  decltype(auto) r2 = (fn ());\n+  static_assert (is_same<decltype(r2), int>::value, \"\"); \n+  decltype(auto) r3 = ref ();\n+  static_assert (is_same<decltype(r3), int&>::value, \"\"); \n+  decltype(auto) r4 = (ref ());\n+  static_assert (is_same<decltype(r4), int&>::value, \"\"); \n+  decltype(auto) r5 = rref ();\n+  static_assert (is_same<decltype(r5), int&&>::value, \"\"); \n+  decltype(auto) r6 = (rref ());\n+  static_assert (is_same<decltype(r6), int&&>::value, \"\"); \n+  decltype(auto) r8 = (s->i);\n+  static_assert (is_same<decltype(r8), const int&>::value, \"\");\n+  decltype(auto) r9 = (s->r);\n+  static_assert (is_same<decltype(r9), int&>::value, \"\");\n+  decltype(auto) r10 = (i);\n+  static_assert (is_same<decltype(r10), int&>::value, \"\");\n+  decltype(auto) r11 = (ir);\n+  static_assert (is_same<decltype(r11), int&>::value, \"\");\n+  decltype(auto) r12 = (irr);\n+  static_assert (is_same<decltype(r12), int&>::value, \"\");\n+}"}, {"sha": "e8ca0fc0beeb91ff770bf7d1081a6d0df29b241d", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp-decltype1.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-decltype1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd7712f91c99690f8b0046ea168b2782afbac69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-decltype1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-decltype1.C?ref=abd7712f91c99690f8b0046ea168b2782afbac69", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/81176\n+// { dg-do compile { target c++17 } }\n+\n+namespace std {\n+  template<typename T> struct tuple_size;\n+  template<int, typename> struct tuple_element;\n+}\n+\n+struct A {\n+  int i;\n+  template <int I> int& get() { return i; }\n+};\n+\n+template<> struct std::tuple_size<A> { static const int value = 2; };\n+template<int I> struct std::tuple_element<I,A> { using type = int; };\n+\n+template <class,class> struct same_type;\n+template <class T> struct same_type<T,T> {};\n+\n+void\n+foo (A x)\n+{\n+  auto [ a, b ] = x;\n+  decltype(auto) c = a;\n+  same_type<decltype(a), int>{};\n+  same_type<decltype(c), int>{};\n+}\n+"}]}