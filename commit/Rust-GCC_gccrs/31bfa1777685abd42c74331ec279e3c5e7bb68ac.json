{"sha": "31bfa1777685abd42c74331ec279e3c5e7bb68ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFiZmExNzc3Njg1YWJkNDJjNzQzMzFlYzI3OWUzYzVlN2JiNjhhYw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-07-20T00:09:31Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-07-20T00:09:31Z"}, "message": "backport: basic_string.h: Qualify symbols with 'template'.\n\n2001-07-19  Phil Edwards  <pme@sources.redhat.com>\n            Mark Mitchell <mark@codesourcery.com>\n\n\tMerge from cp-parser-branch.\n\t* include/bits/basic_string.h:  Qualify symbols with 'template'.\n\t* include/bits/basic_string.tcc:  Likewise.\n\t* include/bits/fstream.tcc:  Likewise.\n\t* include/bits/istream.tcc:  Likewise.\n\t* include/bits/sstream.tcc:  Likewise.\n\t* include/bits/std_istream.h:  Likewise.\n\t* include/bits/stl_iterator.h:  Likewise.\n\t* include/bits/streambuf.tcc:  Likewise.\n\t* src/gen-num-limits.cc:  Add 'template<>' to specializations.\n\t* src/locale.cc:  Likewise.\n\nCo-Authored-By: Mark Mitchell <mark@codesourcery.com>\n\nFrom-SVN: r44167", "tree": {"sha": "5ccb62458c8900c4c55b27e622ef80847920a23d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ccb62458c8900c4c55b27e622ef80847920a23d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31bfa1777685abd42c74331ec279e3c5e7bb68ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31bfa1777685abd42c74331ec279e3c5e7bb68ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31bfa1777685abd42c74331ec279e3c5e7bb68ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31bfa1777685abd42c74331ec279e3c5e7bb68ac/comments", "author": null, "committer": null, "parents": [{"sha": "6dd12198d088c1e749b67c9e9a92352b2639265a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd12198d088c1e749b67c9e9a92352b2639265a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dd12198d088c1e749b67c9e9a92352b2639265a"}], "stats": {"total": 142, "additions": 97, "deletions": 45}, "files": [{"sha": "761abcff8a3e5695ecde06a8fe732516da0b01d6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=31bfa1777685abd42c74331ec279e3c5e7bb68ac", "patch": "@@ -1,3 +1,18 @@\n+2001-07-19  Phil Edwards  <pme@sources.redhat.com>\n+            Mark Mitchell <mark@codesourcery.com>\n+\n+\tMerge from cp-parser-branch.\n+\t* include/bits/basic_string.h:  Qualify symbols with 'template'.\n+\t* include/bits/basic_string.tcc:  Likewise.\n+\t* include/bits/fstream.tcc:  Likewise.\n+\t* include/bits/istream.tcc:  Likewise.\n+\t* include/bits/sstream.tcc:  Likewise.\n+\t* include/bits/std_istream.h:  Likewise.\n+\t* include/bits/stl_iterator.h:  Likewise.\n+\t* include/bits/streambuf.tcc:  Likewise.\n+\t* src/gen-num-limits.cc:  Add 'template<>' to specializations.\n+\t* src/locale.cc:  Likewise.\n+\n 2001-07-19  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \t    Bert De Knuydt <Bert.Deknuydt@esat.kuleuven.ac.be>\n "}, {"sha": "dc62a542e5e03c920ac992d4079be48a55da8551", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=31bfa1777685abd42c74331ec279e3c5e7bb68ac", "patch": "@@ -118,7 +118,7 @@ namespace std\n       struct _Rep\n       {\n \t// Types:\n-\ttypedef typename _Alloc::rebind<char>::other _Raw_bytes_alloc;\n+\ttypedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;\n \n \t// (Public) Data members: \n "}, {"sha": "faa88a2e6934f8ccc6efda7f23d37ada0b52ea77", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=31bfa1777685abd42c74331ec279e3c5e7bb68ac", "patch": "@@ -354,7 +354,7 @@ namespace std\n #endif\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::_Rep*\n+    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*\n     basic_string<_CharT, _Traits, _Alloc>::_Rep::\n     _S_create(size_t __capacity, const _Alloc& __alloc)\n     {\n@@ -571,7 +571,7 @@ namespace std\n     }\n   \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     copy(_CharT* __s, size_type __n, size_type __pos) const\n     {\n@@ -587,7 +587,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n@@ -601,7 +601,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find(_CharT __c, size_type __pos) const\n     {\n@@ -620,7 +620,7 @@ namespace std\n \n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     rfind(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n@@ -640,7 +640,7 @@ namespace std\n     }\n   \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     rfind(_CharT __c, size_type __pos) const\n     {\n@@ -659,7 +659,7 @@ namespace std\n     }\n   \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n@@ -673,7 +673,7 @@ namespace std\n     }\n  \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n@@ -693,7 +693,7 @@ namespace std\n     }\n   \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n@@ -705,7 +705,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_first_not_of(_CharT __c, size_type __pos) const\n     {\n@@ -717,7 +717,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n@@ -737,7 +737,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>::size_type\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_last_not_of(_CharT __c, size_type __pos) const\n     {"}, {"sha": "54c70463d649db8db54fc1acd78573094e60c1a1", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=31bfa1777685abd42c74331ec279e3c5e7bb68ac", "patch": "@@ -139,7 +139,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits>\n-    basic_filebuf<_CharT, _Traits>::__filebuf_type* \n+    typename basic_filebuf<_CharT, _Traits>::__filebuf_type* \n     basic_filebuf<_CharT, _Traits>::\n     open(const char* __s, ios_base::openmode __mode)\n     {\n@@ -166,7 +166,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits>\n-    basic_filebuf<_CharT, _Traits>::__filebuf_type* \n+    typename basic_filebuf<_CharT, _Traits>::__filebuf_type* \n     basic_filebuf<_CharT, _Traits>::\n     close()\n     {\n@@ -232,7 +232,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits>\n-    basic_filebuf<_CharT, _Traits>::int_type \n+    typename basic_filebuf<_CharT, _Traits>::int_type \n     basic_filebuf<_CharT, _Traits>::\n     underflow()\n     {\n@@ -303,7 +303,7 @@ namespace std\n     }\n   \n   template<typename _CharT, typename _Traits>\n-    basic_filebuf<_CharT, _Traits>::int_type \n+    typename basic_filebuf<_CharT, _Traits>::int_type \n     basic_filebuf<_CharT, _Traits>::\n     pbackfail(int_type __i)\n     {\n@@ -371,7 +371,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits>\n-    basic_filebuf<_CharT, _Traits>::int_type \n+    typename basic_filebuf<_CharT, _Traits>::int_type \n     basic_filebuf<_CharT, _Traits>::\n     overflow(int_type __c)\n     {\n@@ -396,7 +396,7 @@ namespace std\n     }\n   \n   template<typename _CharT, typename _Traits>\n-    basic_filebuf<_CharT, _Traits>::int_type \n+    typename basic_filebuf<_CharT, _Traits>::int_type \n     basic_filebuf<_CharT, _Traits>::\n     _M_really_overflow(int_type __c)\n     {\n@@ -475,7 +475,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits>\n-    basic_filebuf<_CharT, _Traits>::__streambuf_type* \n+    typename basic_filebuf<_CharT, _Traits>::__streambuf_type* \n     basic_filebuf<_CharT, _Traits>::\n     setbuf(char_type* __s, streamsize __n)\n     {\n@@ -503,7 +503,7 @@ namespace std\n     }\n   \n   template<typename _CharT, typename _Traits>\n-    basic_filebuf<_CharT, _Traits>::pos_type\n+    typename basic_filebuf<_CharT, _Traits>::pos_type\n     basic_filebuf<_CharT, _Traits>::\n     seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)\n     {\n@@ -559,7 +559,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits>\n-    basic_filebuf<_CharT, _Traits>::pos_type\n+    typename basic_filebuf<_CharT, _Traits>::pos_type\n     basic_filebuf<_CharT, _Traits>::\n     seekpos(pos_type __pos, ios_base::openmode __mode)\n     {"}, {"sha": "a2df71f944065d51d07803230d5b9788b40042f7", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=31bfa1777685abd42c74331ec279e3c5e7bb68ac", "patch": "@@ -465,7 +465,7 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>::int_type\n+    typename basic_istream<_CharT, _Traits>::int_type\n     basic_istream<_CharT, _Traits>::\n     get(void)\n     {\n@@ -720,7 +720,7 @@ namespace std\n     }\n   \n   template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>::int_type\n+    typename basic_istream<_CharT, _Traits>::int_type\n     basic_istream<_CharT, _Traits>::\n     peek(void)\n     {"}, {"sha": "2a03ff0de58ff71c7fb7f91e7f6e2ce9b826ee09", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=31bfa1777685abd42c74331ec279e3c5e7bb68ac", "patch": "@@ -40,7 +40,7 @@ namespace std\n {\n \n   template <class _CharT, class _Traits, class _Alloc>\n-    basic_stringbuf<_CharT, _Traits, _Alloc>::int_type \n+    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type \n     basic_stringbuf<_CharT, _Traits, _Alloc>::\n     pbackfail(int_type __c)\n     {\n@@ -74,7 +74,7 @@ namespace std\n     }\n   \n   template <class _CharT, class _Traits, class _Alloc>\n-    basic_stringbuf<_CharT, _Traits, _Alloc>::int_type \n+    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type \n     basic_stringbuf<_CharT, _Traits, _Alloc>::\n     overflow(int_type __c)\n     {\n@@ -114,7 +114,7 @@ namespace std\n     }\n \n   template <class _CharT, class _Traits, class _Alloc>\n-    basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type\n+    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type\n     basic_stringbuf<_CharT, _Traits, _Alloc>::\n     seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)\n     {\n@@ -172,7 +172,7 @@ namespace std\n     }\n \n   template <class _CharT, class _Traits, class _Alloc>\n-    basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type\n+    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type\n     basic_stringbuf<_CharT, _Traits, _Alloc>::\n     seekpos(pos_type __sp, ios_base::openmode __mode)\n     {"}, {"sha": "c4e6a9f9b3e37831b3c7093775e2692a2f13a403", "filename": "libstdc++-v3/include/bits/std_istream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h?ref=31bfa1777685abd42c74331ec279e3c5e7bb68ac", "patch": "@@ -217,7 +217,7 @@ namespace std\n       typedef _Traits \t\t\t\t\ttraits_type;\n       typedef basic_streambuf<_CharT, _Traits> \t\t__streambuf_type;\n       typedef basic_istream<_CharT, _Traits> \t\t__istream_type;\n-      typedef __istream_type::__ctype_type \t\t__ctype_type;\n+      typedef typename __istream_type::__ctype_type \t__ctype_type;\n       typedef typename _Traits::int_type\t\t__int_type;\n \n       explicit "}, {"sha": "a68613babd98af003c24f99a543e7a39ceb1ab3b", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=31bfa1777685abd42c74331ec279e3c5e7bb68ac", "patch": "@@ -442,7 +442,7 @@ namespace std\n \n   template<typename _Iterator, typename _Container>\n   inline __normal_iterator<_Iterator, _Container>\n-  operator+(__normal_iterator<_Iterator, _Container>::difference_type __n,\n+  operator+(typename __normal_iterator<_Iterator, _Container>::difference_type __n,\n \t    const __normal_iterator<_Iterator, _Container>& __i)\n   { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }\n } // namespace std"}, {"sha": "d928379918a4f335c3276939a3ce412a0101c9d1", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=31bfa1777685abd42c74331ec279e3c5e7bb68ac", "patch": "@@ -37,7 +37,7 @@\n namespace std {\n \n   template<typename _CharT, typename _Traits>\n-    basic_streambuf<_CharT, _Traits>::int_type\n+    typename basic_streambuf<_CharT, _Traits>::int_type\n     basic_streambuf<_CharT, _Traits>::\n     sbumpc()\n     {\n@@ -54,7 +54,7 @@ namespace std {\n     }\n \n   template<typename _CharT, typename _Traits>\n-    basic_streambuf<_CharT, _Traits>::int_type\n+    typename basic_streambuf<_CharT, _Traits>::int_type\n     basic_streambuf<_CharT, _Traits>::\n     sputbackc(char_type __c) \n     {\n@@ -72,7 +72,7 @@ namespace std {\n     }\n   \n   template<typename _CharT, typename _Traits>\n-    basic_streambuf<_CharT, _Traits>::int_type\n+    typename basic_streambuf<_CharT, _Traits>::int_type\n     basic_streambuf<_CharT, _Traits>::\n     sungetc()\n     {\n@@ -93,7 +93,7 @@ namespace std {\n   // buffers will still be valid. (This happens if setp is used to set\n   // the internal buffer to say some externally-allocated sequence.)\n   template<typename _CharT, typename _Traits>\n-    basic_streambuf<_CharT, _Traits>::int_type\n+    typename basic_streambuf<_CharT, _Traits>::int_type\n     basic_streambuf<_CharT, _Traits>::\n     sputc(char_type __c)\n     {"}, {"sha": "d5e37b7ecc44c5b28d35394cb38ddde08d61480e", "filename": "libstdc++-v3/src/gen-num-limits.cc", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc?ref=31bfa1777685abd42c74331ec279e3c5e7bb68ac", "patch": "@@ -206,7 +206,9 @@ template<typename T>\n   };\n \n #define DEFINED_TYPE_NAME(T)                                            \\\n+template<>                                                              \\\n const char type_name_trait< T >::type_name[] = #T;                      \\\n+template<>                                                              \\\n const char type_name_trait< T >::trait_name[] = \"numeric_limits<\" #T \">\";\n \n DEFINED_TYPE_NAME(bool);\n@@ -279,7 +281,9 @@ template<typename T>\n const bool predicate<T>::is_exact = true;\n \n #define SPECIALIZE_EXACTNESS(T)\t\t\t\t\t\t\\\n+template<>                                                              \\\n const bool predicate< T >::is_integer = false;\t\t\t\t\\\n+template<>                                                              \\\n const bool predicate< T >::is_exact = false\n \n SPECIALIZE_EXACTNESS(float);\n@@ -311,6 +315,7 @@ template<typename T>\n const bool predicate<T>::is_iec559 = false;\n \n #define SPECIALIZE_IEC559(T)\t\t\t\t\t\t\\\n+template<>                                                              \\\n const bool predicate< T >::is_iec559 = true\n \n SPECIALIZE_IEC559(bool);\n@@ -349,7 +354,9 @@ template<typename T>\n \n #define DEFINE_EXTREMA(T, m, M)  DO_DEFINE_EXTREMA(T, m, M)\n #define DO_DEFINE_EXTREMA(T, m, M)\t\t\t\t\t\\\n+template<>                                                              \\\n const char value< T >::min[] = #m;\t\t\t\t\t\\\n+template<>                                                              \\\n const char value< T >::max[] = #M\n \n DEFINE_EXTREMA(bool, false, true);\n@@ -386,8 +393,10 @@ const int value<T>::digits =\n template<typename T>\n const int value<T>::radix = 2;\n \n-#define SPECIALIZE_DIGITS(T, D, D10)\t\t\t\t\t\\\n-const int value< T >::digits = D;\t\t\t\t\t\\\n+#define SPECIALIZE_DIGITS(T, D, D10)\t\t\\\n+template<>\t\t\t\t\t\\\n+const int value< T >::digits = D;\t\t\\\n+template<>\t\t\t\t\t\\\n const int value< T >::digits10 = D10\n \n SPECIALIZE_DIGITS(float, FLT_MANT_DIG, FLT_DIG);\n@@ -397,7 +406,9 @@ SPECIALIZE_DIGITS(long double, LDBL_MANT_DIG, LDBL_DIG);\n #undef SPECIALIZE_DIGITS\n \n \n-#define SPECIALIZE_RADIX(T, R) const int value< T >::radix = R\n+#define SPECIALIZE_RADIX(T, R)\t\t\t\\\n+template<>\t\t\t\t\t\\\n+const int value< T >::radix = R\n \n SPECIALIZE_RADIX(float, FLT_RADIX);\n SPECIALIZE_RADIX(double, FLT_RADIX);\n@@ -418,7 +429,9 @@ const char value<T>::epsilon[] = \"0\";\n #endif\n \n #define SPECIALIZE_EPSILON(T, E) DO_SPECIALIZE_EPSILON(T, E)\n-#define DO_SPECIALIZE_EPSILON(T, E) const char value< T >::epsilon[] = #E\n+#define DO_SPECIALIZE_EPSILON(T, E)\t\t\\\n+template<> \t\t\t\t\t\\\n+const char value< T >::epsilon[] = #E\n \n // unsophisticated, gross method\n #if 1\n@@ -457,7 +470,9 @@ template<typename T>\n const char value<T>::round_error[] = \"0\";\n #endif\n \n-#define SPECIALIZE_ROUND_ERROR(T, R) const char value< T >::round_error[] = #R\n+#define SPECIALIZE_ROUND_ERROR(T, R) \t\t\\\n+template<>\t\t\t\t\t\\\n+const char value< T >::round_error[] = #R\n // unsophisticated, gross method\n #if 1\n SPECIALIZE_ROUND_ERROR(bool, 0);\n@@ -494,10 +509,14 @@ const int value<T>::max_exponent = 0;\n template<typename T>\n const int value<T>::max_exponent10 = 0;\n \n-#define SPECIALIZE_EXPONENTS(T, m, m10, M, M10)\t\t\t\t\\\n-const int value< T >::min_exponent = m;\t\t\t\t\t\\\n-const int value< T >::min_exponent10 = m10;\t\t\t\t\\\n-const int value< T >::max_exponent = M;\t\t\t\t\t\\\n+#define SPECIALIZE_EXPONENTS(T, m, m10, M, M10)\t\\\n+template<>\t\t\t\t\t\\\n+const int value< T >::min_exponent = m;\t\t\\\n+template<>\t\t\t\t\t\\\n+const int value< T >::min_exponent10 = m10;\t\\\n+template<>\t\t\t\t\t\\\n+const int value< T >::max_exponent = M;\t\t\\\n+template<>\t\t\t\t\t\\\n const int value< T >::max_exponent10 = M10\n \n SPECIALIZE_EXPONENTS(float, FLT_MIN_EXP, FLT_MIN_10_EXP,"}, {"sha": "dfd49d1626fb596c1596b1034d686b275a2a8bad", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfa1777685abd42c74331ec279e3c5e7bb68ac/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=31bfa1777685abd42c74331ec279e3c5e7bb68ac", "patch": "@@ -603,6 +603,7 @@ namespace std\n     return __hi;\n   }\n \n+  template<>\n   ctype_byname<char>::ctype_byname(const char* /*__s*/, size_t __refs)\n   : ctype<char>(new mask[table_size], true, __refs)\n   { }\n@@ -1002,11 +1003,14 @@ namespace std\n     return __incl_prec;\n   }\n \n+  template <>\n   collate<char>::collate(size_t __refs)\n   : locale::facet(__refs) { }\n   \n+  template<>\n   collate<char>::~collate() { }\n   \n+  template<>\n   int \n   collate<char>::do_compare(const char* __lo1, const char* __hi1, \n \t\t\t    const char* __lo2, const char* __hi2) const\n@@ -1022,11 +1026,13 @@ namespace std\n       return 0;\n   }\n   \n+  template<>\n   string\n   collate<char>::\n   do_transform(const char* __lo, const char* __hi) const\n   { return string(__lo, __hi - __lo); }\n   \n+  template<>\n   long\n   collate<char>::\n   do_hash(const char* __lo, const char* __hi) const\n@@ -1037,18 +1043,22 @@ namespace std\n \t\t   (__val >> (numeric_limits<unsigned long>::digits - 1)));\n     return __val;\n   }\n-  \n+\n+  template<>  \n   collate_byname<char>::collate_byname(const char* /*__s*/, size_t __refs)\n   : collate<char>(__refs) { }\n \n+  template<>\n   moneypunct_byname<char, false>::moneypunct_byname(const char* /*__s*/, \n \t\t\t\t\t\t    size_t __refs)\n   : moneypunct<char, false>(__refs) { }\n   \n+  template<>\n   moneypunct_byname<char, true>::moneypunct_byname(const char* /*__s*/, \n \t\t\t\t\t\t   size_t __refs)\n   : moneypunct<char, true>(__refs) { }\n   \n+  template<>\n   messages_byname<char>::\n   messages_byname(const char* /*__s*/, size_t __refs)\n   : messages<char>(__refs) { }\n@@ -1205,40 +1215,48 @@ namespace std\n     return __hi;\n   }\n \n+  template<>\n   ctype_byname<wchar_t>::\n   ctype_byname(const char* /*__s*/, size_t __refs)\n   : ctype<wchar_t>(__refs) { }\n \n+  template<>\n   collate<wchar_t>::\n   collate(size_t __refs): locale::facet(__refs) { }\n   \n+  template<>\n   collate<wchar_t>::\n   ~collate() { }\n \n+  template<>\n   int \n   collate<wchar_t>::\n   do_compare(const wchar_t* /*__lo1*/, const wchar_t* /*__hi1*/,\n \t     const wchar_t* /*__lo2*/, const wchar_t* /*__hi2*/) const\n   {\n     return 0; // XXX not done\n   }\n-  \n+\n+  template<>  \n   wstring collate<wchar_t>::\n   do_transform(const wchar_t* /*__lo*/, const wchar_t* /*__hi*/) const\n   {\n     return wstring(); // XXX not done\n   }\n   \n+  template<>\n   long collate<wchar_t>::\n   do_hash(const wchar_t* /*__lo*/, const wchar_t* /*__hi*/) const\n   {\n     return 0; // XXX not done\n   }\n \n+  template<>\n   collate_byname<wchar_t>::\n   collate_byname(const char* /*__s*/, size_t __refs)\n   : collate<wchar_t> (__refs) { }\n   \n+  template<>\n   messages_byname<wchar_t>::\n   messages_byname(const char* /*__s*/, size_t __refs)\n   : messages<wchar_t> (__refs) { }"}]}