{"sha": "0a56ad627e91edd29d348813c4fd15c57e1c930a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE1NmFkNjI3ZTkxZWRkMjlkMzQ4ODEzYzRmZDE1YzU3ZTFjOTMwYQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-02-05T23:31:30Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-02-05T23:31:30Z"}, "message": "(legitimate_address_p): Accept either REG or SUBREG where\na register is valid in an address.\n\nFrom-SVN: r3425", "tree": {"sha": "cd2669beab38e50851768748e9d1f4fc39397975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd2669beab38e50851768748e9d1f4fc39397975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a56ad627e91edd29d348813c4fd15c57e1c930a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a56ad627e91edd29d348813c4fd15c57e1c930a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a56ad627e91edd29d348813c4fd15c57e1c930a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a56ad627e91edd29d348813c4fd15c57e1c930a/comments", "author": null, "committer": null, "parents": [{"sha": "2e4f4529094b990c5cc9e97133ff78d515615b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4f4529094b990c5cc9e97133ff78d515615b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e4f4529094b990c5cc9e97133ff78d515615b81"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "0c435d316bb1f1c988bf5c47b28b10b2dda953d4", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a56ad627e91edd29d348813c4fd15c57e1c930a/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a56ad627e91edd29d348813c4fd15c57e1c930a/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=0a56ad627e91edd29d348813c4fd15c57e1c930a", "patch": "@@ -1552,15 +1552,33 @@ i960_print_operand_addr (file, addr)\n    convert common non-canonical forms to canonical form so that they will\n    be recognized.  */\n \n+/* These two macros allow us to accept either a REG or a SUBREG anyplace\n+   where a register is valid.  */\n+\n+#define RTX_OK_FOR_BASE_P(X, STRICT)\t\t\t\t\t\\\n+  ((GET_CODE (X) == REG\t\t\t\t\t\t\t\\\n+    && (STRICT ? REG_OK_FOR_BASE_P_STRICT (X) : REG_OK_FOR_BASE_P (X)))\t\\\n+   || (GET_CODE (X) == SUBREG\t\t\t\t\t\t\\\n+       && GET_CODE (SUBREG_REG (X)) == REG\t\t\t\t\\\n+       && (STRICT ? REG_OK_FOR_BASE_P_STRICT (SUBREG_REG (X))\t\t\\\n+\t   : REG_OK_FOR_BASE_P (SUBREG_REG (X)))))\n+\n+#define RTX_OK_FOR_INDEX_P(X, STRICT)\t\t\t\t\t\\\n+  ((GET_CODE (X) == REG\t\t\t\t\t\t\t\\\n+    && (STRICT ? REG_OK_FOR_INDEX_P_STRICT (X) : REG_OK_FOR_INDEX_P (X)))\\\n+   || (GET_CODE (X) == SUBREG\t\t\t\t\t\t\\\n+       && GET_CODE (SUBREG_REG (X)) == REG\t\t\t\t\\\n+       && (STRICT ? REG_OK_FOR_INDEX_P_STRICT (SUBREG_REG (X))\t\t\\\n+\t   : REG_OK_FOR_INDEX_P (SUBREG_REG (X)))))\n+\n int\n legitimate_address_p (mode, addr, strict)\n      enum machine_mode mode;\n      register rtx addr;\n      int strict;\n {\n-  if (GET_CODE (addr) == REG)\n-    return (strict ? REG_OK_FOR_BASE_P_STRICT (addr)\n-\t    : REG_OK_FOR_BASE_P (addr));\n+  if (RTX_OK_FOR_BASE_P (addr, strict))\n+    return 1;\n   else if (CONSTANT_P (addr))\n     return 1;\n   else if (GET_CODE (addr) == PLUS)\n@@ -1573,15 +1591,10 @@ legitimate_address_p (mode, addr, strict)\n       op0 = XEXP (addr, 0);\n       op1 = XEXP (addr, 1);\n \n-      if (GET_CODE (op0) == REG)\n+      if (RTX_OK_FOR_BASE_P (op0, strict))\n \t{\n-\t  if (! (strict ? REG_OK_FOR_BASE_P_STRICT (op0)\n-\t\t : REG_OK_FOR_BASE_P (op0)))\n-\t    return 0;\n-\n-\t  if (GET_CODE (op1) == REG)\n-\t    return (strict ? REG_OK_FOR_INDEX_P_STRICT (op1)\n-\t\t    : REG_OK_FOR_INDEX_P (op1));\n+\t  if (RTX_OK_FOR_INDEX_P (op1, strict))\n+\t    return 1;\n \t  else if (CONSTANT_P (op1))\n \t    return 1;\n \t  else\n@@ -1591,29 +1604,21 @@ legitimate_address_p (mode, addr, strict)\n \t{\n \t  if (GET_CODE (XEXP (op0, 0)) == MULT)\n \t    {\n-\t      if (! (GET_CODE (XEXP (XEXP (op0, 0), 0)) == REG\n-\t\t     && (strict ? REG_OK_FOR_INDEX_P_STRICT (XEXP (XEXP (op0, 0), 0))\n-\t\t\t : REG_OK_FOR_INDEX_P (XEXP (XEXP (op0, 0), 0)))\n+\t      if (! (RTX_OK_FOR_INDEX_P (XEXP (XEXP (op0, 0), 0), strict)\n \t\t     && SCALE_TERM_P (XEXP (XEXP (op0, 0), 1))))\n \t\treturn 0;\n \n-\t      if (GET_CODE (XEXP (op0, 1)) == REG)\n-\t\treturn ((strict ? REG_OK_FOR_BASE_P_STRICT (XEXP (op0, 1))\n-\t\t\t : REG_OK_FOR_BASE_P (XEXP (op0, 1)))\n-\t\t\t&& CONSTANT_P (op1));\n+\t      if (RTX_OK_FOR_BASE_P (XEXP (op0, 1), strict)\n+\t\t  && CONSTANT_P (op1))\n+\t\treturn 1;\n \t      else\n \t\treturn 0;\n \t    }\n-\t  else if (GET_CODE (XEXP (op0, 0)) == REG)\n+\t  else if (RTX_OK_FOR_BASE_P (XEXP (op0, 0), strict))\n \t    {\n-\t      if (! (strict ? REG_OK_FOR_BASE_P_STRICT (XEXP (op0, 0))\n-\t\t     : REG_OK_FOR_BASE_P (XEXP (op0, 0))))\n-\t\treturn 0;\n-\n-\t      if (GET_CODE (XEXP (op0, 1)) == REG)\n-\t\treturn ((strict ? REG_OK_FOR_INDEX_P_STRICT (XEXP (op0, 1))\n-\t\t\t : REG_OK_FOR_INDEX_P (XEXP (op0, 1)))\n-\t\t\t&& CONSTANT_P (op1));\n+\t      if (RTX_OK_FOR_INDEX_P (XEXP (op0, 1), strict)\n+\t\t  && CONSTANT_P (op1))\n+\t\treturn 1;\n \t      else\n \t\treturn 0;\n \t    }\n@@ -1622,15 +1627,12 @@ legitimate_address_p (mode, addr, strict)\n \t}\n       else if (GET_CODE (op0) == MULT)\n \t{\n-\t  if (! (GET_CODE (XEXP (op0, 0)) == REG\n-\t\t && (strict ? REG_OK_FOR_INDEX_P_STRICT (XEXP (op0, 0))\n-\t\t     : REG_OK_FOR_INDEX_P (XEXP (op0, 0)))\n+\t  if (! (RTX_OK_FOR_INDEX_P (XEXP (op0, 0), strict)\n \t\t && SCALE_TERM_P (XEXP (op0, 1))))\n \t    return 0;\n \n-\t  if (GET_CODE (op1) == REG)\n-\t    return (strict ? REG_OK_FOR_BASE_P_STRICT (op1)\n-\t\t    : REG_OK_FOR_BASE_P (op1));\n+\t  if (RTX_OK_FOR_BASE_P (op1, strict))\n+\t    return 1;\n \t  else if (CONSTANT_P (op1))\n \t    return 1;\n \t  else\n@@ -1644,9 +1646,7 @@ legitimate_address_p (mode, addr, strict)\n       if (! TARGET_COMPLEX_ADDR && ! reload_completed)\n \treturn 0;\n \n-      return (GET_CODE (XEXP (addr, 0)) == REG\n-\t      && (strict ? REG_OK_FOR_INDEX_P_STRICT (XEXP (addr, 0))\n-\t\t  : REG_OK_FOR_INDEX_P (XEXP (addr, 0)))\n+      return (RTX_OK_FOR_INDEX_P (XEXP (addr, 0), strict)\n \t      && SCALE_TERM_P (XEXP (addr, 1)));\n     }\n   else"}]}