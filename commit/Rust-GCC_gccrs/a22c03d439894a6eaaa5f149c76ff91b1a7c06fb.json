{"sha": "a22c03d439894a6eaaa5f149c76ff91b1a7c06fb", "node_id": "C_kwDOANBUbNoAKGEyMmMwM2Q0Mzk4OTRhNmVhYWE1ZjE0OWM3NmZmOTFiMWE3YzA2ZmI", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-08T18:35:59Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:50Z"}, "message": "aarch64: Use type-qualified builtins for [R]SHRN[2] Neon intrinsics\n\nDeclare unsigned type-qualified builtins and use them for [R]SHRN[2]\nNeon intrinsics. This removes the need for casts in arm_neon.h.\n\ngcc/ChangeLog:\n\n2021-11-08  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Declare type-\n\tqualified builtins for [R]SHRN[2].\n\t* config/aarch64/arm_neon.h (vshrn_n_u16): Use type-qualified\n\tbuiltin and remove casts.\n\t(vshrn_n_u32): Likewise.\n\t(vshrn_n_u64): Likewise.\n\t(vrshrn_high_n_u16): Likewise.\n\t(vrshrn_high_n_u32): Likewise.\n\t(vrshrn_high_n_u64): Likewise.\n\t(vrshrn_n_u16): Likewise.\n\t(vrshrn_n_u32): Likewise.\n\t(vrshrn_n_u64): Likewise.\n\t(vshrn_high_n_u16): Likewise.\n\t(vshrn_high_n_u32): Likewise.\n\t(vshrn_high_n_u64): Likewise.", "tree": {"sha": "3c341e8051d9473e9696f1ccf576ee50416bc749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c341e8051d9473e9696f1ccf576ee50416bc749"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a22c03d439894a6eaaa5f149c76ff91b1a7c06fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a22c03d439894a6eaaa5f149c76ff91b1a7c06fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a22c03d439894a6eaaa5f149c76ff91b1a7c06fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a22c03d439894a6eaaa5f149c76ff91b1a7c06fb/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "439906c61d0fbbfbbfaa93a287c41871e66322d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439906c61d0fbbfbbfaa93a287c41871e66322d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/439906c61d0fbbfbbfaa93a287c41871e66322d1"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "42dfc4cf35464d000f66c9b5afe8a32ece881c1d", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22c03d439894a6eaaa5f149c76ff91b1a7c06fb/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22c03d439894a6eaaa5f149c76ff91b1a7c06fb/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=a22c03d439894a6eaaa5f149c76ff91b1a7c06fb", "patch": "@@ -253,15 +253,19 @@\n \n   /* Implemented by aarch64_shrn<mode>\".  */\n   BUILTIN_VQN (SHIFTIMM, shrn, 0, NONE)\n+  BUILTIN_VQN (USHIFTIMM, shrn, 0, NONE)\n \n   /* Implemented by aarch64_shrn2<mode>.  */\n-  BUILTIN_VQN (SHIFTACC, shrn2, 0, NONE)\n+  BUILTIN_VQN (SHIFT2IMM, shrn2, 0, NONE)\n+  BUILTIN_VQN (USHIFT2IMM, shrn2, 0, NONE)\n \n   /* Implemented by aarch64_rshrn<mode>\".  */\n   BUILTIN_VQN (SHIFTIMM, rshrn, 0, NONE)\n+  BUILTIN_VQN (USHIFTIMM, rshrn, 0, NONE)\n \n   /* Implemented by aarch64_rshrn2<mode>.  */\n-  BUILTIN_VQN (SHIFTACC, rshrn2, 0, NONE)\n+  BUILTIN_VQN (SHIFT2IMM, rshrn2, 0, NONE)\n+  BUILTIN_VQN (USHIFT2IMM, rshrn2, 0, NONE)\n \n   /* Implemented by aarch64_<su>mlsl<mode>.  */\n   BUILTIN_VD_BHSI (TERNOP, smlsl, 0, NONE)"}, {"sha": "944b9662ed7fdae5750668c6279aeb6d2185fb6b", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22c03d439894a6eaaa5f149c76ff91b1a7c06fb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22c03d439894a6eaaa5f149c76ff91b1a7c06fb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=a22c03d439894a6eaaa5f149c76ff91b1a7c06fb", "patch": "@@ -7606,21 +7606,21 @@ __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshrn_n_u16 (uint16x8_t __a, const int __b)\n {\n-  return (uint8x8_t)__builtin_aarch64_shrnv8hi ((int16x8_t)__a, __b);\n+  return __builtin_aarch64_shrnv8hi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshrn_n_u32 (uint32x4_t __a, const int __b)\n {\n-  return (uint16x4_t)__builtin_aarch64_shrnv4si ((int32x4_t)__a, __b);\n+  return __builtin_aarch64_shrnv4si_uus (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshrn_n_u64 (uint64x2_t __a, const int __b)\n {\n-  return (uint32x2_t)__builtin_aarch64_shrnv2di ((int64x2_t)__a, __b);\n+  return __builtin_aarch64_shrnv2di_uus (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n@@ -8387,24 +8387,21 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrshrn_high_n_u16 (uint8x8_t __a, uint16x8_t __b, const int __c)\n {\n-  return (uint8x16_t) __builtin_aarch64_rshrn2v8hi ((int8x8_t) __a,\n-\t\t\t\t\t\t    (int16x8_t) __b, __c);\n+  return __builtin_aarch64_rshrn2v8hi_uuus (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrshrn_high_n_u32 (uint16x4_t __a, uint32x4_t __b, const int __c)\n {\n-  return (uint16x8_t) __builtin_aarch64_rshrn2v4si ((int16x4_t) __a,\n-\t\t\t\t\t\t    (int32x4_t) __b, __c);\n+  return __builtin_aarch64_rshrn2v4si_uuus (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrshrn_high_n_u64 (uint32x2_t __a, uint64x2_t __b, const int __c)\n {\n-  return (uint32x4_t) __builtin_aarch64_rshrn2v2di ((int32x2_t)__a,\n-\t\t\t\t\t\t    (int64x2_t)__b, __c);\n+  return __builtin_aarch64_rshrn2v2di_uuus (__a, __b, __c);\n }\n \n __extension__ extern __inline int8x8_t\n@@ -8432,21 +8429,21 @@ __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrshrn_n_u16 (uint16x8_t __a, const int __b)\n {\n-  return (uint8x8_t) __builtin_aarch64_rshrnv8hi ((int16x8_t) __a, __b);\n+  return __builtin_aarch64_rshrnv8hi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrshrn_n_u32 (uint32x4_t __a, const int __b)\n {\n-  return (uint16x4_t) __builtin_aarch64_rshrnv4si ((int32x4_t) __a, __b);\n+  return __builtin_aarch64_rshrnv4si_uus (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrshrn_n_u64 (uint64x2_t __a, const int __b)\n {\n-  return (uint32x2_t) __builtin_aarch64_rshrnv2di ((int64x2_t) __a, __b);\n+  return __builtin_aarch64_rshrnv2di_uus (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n@@ -8488,24 +8485,21 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshrn_high_n_u16 (uint8x8_t __a, uint16x8_t __b, const int __c)\n {\n-  return (uint8x16_t)\n-    __builtin_aarch64_shrn2v8hi ((int8x8_t) __a, (int16x8_t) __b, __c);\n+  return __builtin_aarch64_shrn2v8hi_uuus (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshrn_high_n_u32 (uint16x4_t __a, uint32x4_t __b, const int __c)\n {\n-  return (uint16x8_t)\n-    __builtin_aarch64_shrn2v4si ((int16x4_t) __a, (int32x4_t) __b, __c);\n+  return __builtin_aarch64_shrn2v4si_uuus (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshrn_high_n_u64 (uint32x2_t __a, uint64x2_t __b, const int __c)\n {\n-  return (uint32x4_t)\n-    __builtin_aarch64_shrn2v2di ((int32x2_t) __a, (int64x2_t) __b, __c);\n+  return __builtin_aarch64_shrn2v2di_uuus (__a, __b, __c);\n }\n \n __extension__ extern __inline poly8x8_t"}]}