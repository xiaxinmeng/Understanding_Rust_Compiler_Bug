{"sha": "a9afa21655ee5b5e8894ca50b17393602daf9efd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlhZmEyMTY1NWVlNWI1ZTg4OTRjYTUwYjE3MzkzNjAyZGFmOWVmZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2013-06-06T21:47:04Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2013-06-06T21:47:04Z"}, "message": "p8vector-builtin-1.c: New test to test power8 builtin functions.\n\n2013-06-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\t    Pat Haugen <pthaugen@us.ibm.com>\n\t    Peter Bergner <bergner@vnet.ibm.com>\n\n\t* gcc.target/powerpc/p8vector-builtin-1.c: New test to test\n\tpower8 builtin functions.\n\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-2.c: Likewise.\n\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-3.c: Likewise.\n\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-4.c: Likewise.\n\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-5.c: Likewise.\n\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-6.c: Likewise.\n\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-7.c: Likewise.\n\t* gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-1.c: New\n\ttests to test power8 auto-vectorization.\n\t* gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-2.c: Likewise.\n\t* gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-3.c: Likewise.\n\t* gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-4.c: Likewise.\n\t* gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-5.c: Likewise.\n\n\nCo-Authored-By: Pat Haugen <pthaugen@us.ibm.com>\nCo-Authored-By: Peter Bergner <bergner@vnet.ibm.com>\n\nFrom-SVN: r199768", "tree": {"sha": "3af08d4942180138ac862170c67f2a375818f816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3af08d4942180138ac862170c67f2a375818f816"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9afa21655ee5b5e8894ca50b17393602daf9efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9afa21655ee5b5e8894ca50b17393602daf9efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9afa21655ee5b5e8894ca50b17393602daf9efd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9afa21655ee5b5e8894ca50b17393602daf9efd/comments", "author": null, "committer": null, "parents": [{"sha": "0bd62dcaa3400167c9cfdb192bcba0555488e4b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd62dcaa3400167c9cfdb192bcba0555488e4b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd62dcaa3400167c9cfdb192bcba0555488e4b9"}], "stats": {"total": 1199, "additions": 1199, "deletions": 0}, "files": [{"sha": "6e045ee8428dfc97e2f5b7261f1bdbdcd8ea570c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -2,6 +2,21 @@\n \t    Pat Haugen <pthaugen@us.ibm.com>\n \t    Peter Bergner <bergner@vnet.ibm.com>\n \n+\t* gcc.target/powerpc/p8vector-builtin-1.c: New test to test\n+\tpower8 builtin functions.\n+\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-2.c: Likewise.\n+\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-3.c: Likewise.\n+\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-4.c: Likewise.\n+\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-5.c: Likewise.\n+\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-6.c: Likewise.\n+\t* gcc/testsuite/gcc.target/powerpc/p8vector-builtin-7.c: Likewise.\n+\t* gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-1.c: New\n+\ttests to test power8 auto-vectorization.\n+\t* gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-2.c: Likewise.\n+\t* gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-3.c: Likewise.\n+\t* gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-4.c: Likewise.\n+\t* gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-5.c: Likewise.\n+\n \t* gcc.target/powerpc/crypto-builtin-1.c: Use effective target\n \tpowerpc_p8vector_ok instead of powerpc_vsx_ok.\n "}, {"sha": "6fd3acc2a9dba35d40c50491b852c1edfc299b40", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-1.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2 -ftree-vectorize -fvect-cost-model -fno-unroll-loops -fno-unroll-all-loops\" } */\n+\n+#ifndef TYPE\n+#define TYPE long long\n+#endif\n+\n+#ifndef SIGN_TYPE\n+#define SIGN_TYPE signed TYPE\n+#endif\n+\n+#ifndef UNS_TYPE\n+#define UNS_TYPE unsigned TYPE\n+#endif\n+\n+typedef vector SIGN_TYPE v_sign;\n+typedef vector UNS_TYPE  v_uns;\n+\n+v_sign sign_add (v_sign a, v_sign b)\n+{\n+  return a + b;\n+}\n+\n+v_sign sign_sub (v_sign a, v_sign b)\n+{\n+  return a - b;\n+}\n+\n+v_sign sign_shift_left (v_sign a, v_sign b)\n+{\n+  return a << b;\n+}\n+\n+v_sign sign_shift_right (v_sign a, v_sign b)\n+{\n+  return a >> b;\n+}\n+\n+v_uns uns_add (v_uns a, v_uns b)\n+{\n+  return a + b;\n+}\n+\n+v_uns uns_sub (v_uns a, v_uns b)\n+{\n+  return a - b;\n+}\n+\n+v_uns uns_shift_left (v_uns a, v_uns b)\n+{\n+  return a << b;\n+}\n+\n+v_uns uns_shift_right (v_uns a, v_uns b)\n+{\n+  return a >> b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddudm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsubudm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsld\"    2 } } */\n+/* { dg-final { scan-assembler-times \"vsrad\"   1 } } */\n+/* { dg-final { scan-assembler-times \"vsrd\"    1 } } */"}, {"sha": "412040bfa057d123d78a9102aba2148840d5786a", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-2.c", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-2.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,204 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2 -ftree-vectorize -fvect-cost-model -fno-unroll-loops -fno-unroll-all-loops\" } */\n+\n+#include <altivec.h>\n+\n+typedef vector long long\t\tv_sign;\n+typedef vector unsigned long long\tv_uns;\n+typedef vector bool long long\t\tv_bool;\n+\n+v_sign sign_add_1 (v_sign a, v_sign b)\n+{\n+  return __builtin_altivec_vaddudm (a, b);\n+}\n+\n+v_sign sign_add_2 (v_sign a, v_sign b)\n+{\n+  return vec_add (a, b);\n+}\n+\n+v_sign sign_add_3 (v_sign a, v_sign b)\n+{\n+  return vec_vaddudm (a, b);\n+}\n+\n+v_sign sign_sub_1 (v_sign a, v_sign b)\n+{\n+  return __builtin_altivec_vsubudm (a, b);\n+}\n+\n+v_sign sign_sub_2 (v_sign a, v_sign b)\n+{\n+  return vec_sub (a, b);\n+}\n+\n+\n+v_sign sign_sub_3 (v_sign a, v_sign b)\n+{\n+  return vec_vsubudm (a, b);\n+}\n+\n+v_sign sign_min_1 (v_sign a, v_sign b)\n+{\n+  return __builtin_altivec_vminsd (a, b);\n+}\n+\n+v_sign sign_min_2 (v_sign a, v_sign b)\n+{\n+  return vec_min (a, b);\n+}\n+\n+v_sign sign_min_3 (v_sign a, v_sign b)\n+{\n+  return vec_vminsd (a, b);\n+}\n+\n+v_sign sign_max_1 (v_sign a, v_sign b)\n+{\n+  return __builtin_altivec_vmaxsd (a, b);\n+}\n+\n+v_sign sign_max_2 (v_sign a, v_sign b)\n+{\n+  return vec_max (a, b);\n+}\n+\n+v_sign sign_max_3 (v_sign a, v_sign b)\n+{\n+  return vec_vmaxsd (a, b);\n+}\n+\n+v_sign sign_abs (v_sign a)\n+{\n+  return vec_abs (a);\t\t/* xor, vsubudm, vmaxsd.  */\n+}\n+\n+v_bool sign_eq (v_sign a, v_sign b)\n+{\n+  return vec_cmpeq (a, b);\n+}\n+\n+v_bool sign_lt (v_sign a, v_sign b)\n+{\n+  return vec_cmplt (a, b);\n+}\n+\n+v_uns uns_add_2 (v_uns a, v_uns b)\n+{\n+  return vec_add (a, b);\n+}\n+\n+v_uns uns_add_3 (v_uns a, v_uns b)\n+{\n+  return vec_vaddudm (a, b);\n+}\n+\n+v_uns uns_sub_2 (v_uns a, v_uns b)\n+{\n+  return vec_sub (a, b);\n+}\n+\n+v_uns uns_sub_3 (v_uns a, v_uns b)\n+{\n+  return vec_vsubudm (a, b);\n+}\n+\n+v_uns uns_min_2 (v_uns a, v_uns b)\n+{\n+  return vec_min (a, b);\n+}\n+\n+v_uns uns_min_3 (v_uns a, v_uns b)\n+{\n+  return vec_vminud (a, b);\n+}\n+\n+v_uns uns_max_2 (v_uns a, v_uns b)\n+{\n+  return vec_max (a, b);\n+}\n+\n+v_uns uns_max_3 (v_uns a, v_uns b)\n+{\n+  return vec_vmaxud (a, b);\n+}\n+\n+v_bool uns_eq (v_uns a, v_uns b)\n+{\n+  return vec_cmpeq (a, b);\n+}\n+\n+v_bool uns_lt (v_uns a, v_uns b)\n+{\n+  return vec_cmplt (a, b);\n+}\n+\n+v_sign sign_rl_1 (v_sign a, v_sign b)\n+{\n+  return __builtin_altivec_vrld (a, b);\n+}\n+\n+v_sign sign_rl_2 (v_sign a, v_uns b)\n+{\n+  return vec_rl (a, b);\n+}\n+\n+v_uns uns_rl_2 (v_uns a, v_uns b)\n+{\n+  return vec_rl (a, b);\n+}\n+\n+v_sign sign_sl_1 (v_sign a, v_sign b)\n+{\n+  return __builtin_altivec_vsld (a, b);\n+}\n+\n+v_sign sign_sl_2 (v_sign a, v_uns b)\n+{\n+  return vec_sl (a, b);\n+}\n+\n+v_sign sign_sl_3 (v_sign a, v_uns b)\n+{\n+  return vec_vsld (a, b);\n+}\n+\n+v_uns uns_sl_2 (v_uns a, v_uns b)\n+{\n+  return vec_sl (a, b);\n+}\n+\n+v_uns uns_sl_3 (v_uns a, v_uns b)\n+{\n+  return vec_vsld (a, b);\n+}\n+\n+v_sign sign_sra_1 (v_sign a, v_sign b)\n+{\n+  return __builtin_altivec_vsrad (a, b);\n+}\n+\n+v_sign sign_sra_2 (v_sign a, v_uns b)\n+{\n+  return vec_sra (a, b);\n+}\n+\n+v_sign sign_sra_3 (v_sign a, v_uns b)\n+{\n+  return vec_vsrad (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddudm\" \t5 } } */\n+/* { dg-final { scan-assembler-times \"vsubudm\" \t6 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\"  \t4 } } */\n+/* { dg-final { scan-assembler-times \"vminsd\"  \t3 } } */\n+/* { dg-final { scan-assembler-times \"vmaxud\"  \t2 } } */\n+/* { dg-final { scan-assembler-times \"vminud\"  \t2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpequd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtud\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrld\"     3 } } */\n+/* { dg-final { scan-assembler-times \"vsld\"     5 } } */\n+/* { dg-final { scan-assembler-times \"vsrad\"    3 } } */"}, {"sha": "b3f725f2d9607e6445e5b486c727fe9acbd97f69", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-3.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-3.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,104 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O3 -ftree-vectorize -fvect-cost-model\" } */\n+\n+#include <altivec.h>\n+\n+typedef vector long long\t\tvll_sign;\n+typedef vector unsigned long long\tvll_uns;\n+typedef vector bool long long\t\tvll_bool;\n+\n+typedef vector int\t\t\tvi_sign;\n+typedef vector unsigned int\t\tvi_uns;\n+typedef vector bool int\t\t\tvi_bool;\n+\n+typedef vector short\t\t\tvs_sign;\n+typedef vector unsigned short\t\tvs_uns;\n+typedef vector bool short\t\tvs_bool;\n+\n+typedef vector signed char\t\tvc_sign;\n+typedef vector unsigned char\t\tvc_uns;\n+typedef vector bool char\t\tvc_bool;\n+\n+\n+vi_sign vi_pack_1 (vll_sign a, vll_sign b)\n+{\n+  return __builtin_altivec_vpkudum (a, b);\n+}\n+\n+vi_sign vi_pack_2 (vll_sign a, vll_sign b)\n+{\n+  return vec_pack (a, b);\n+}\n+\n+vi_sign vi_pack_3 (vll_sign a, vll_sign b)\n+{\n+  return vec_vpkudum (a, b);\n+}\n+\n+vs_sign vs_pack_1 (vi_sign a, vi_sign b)\n+{\n+  return __builtin_altivec_vpkuwum (a, b);\n+}\n+\n+vs_sign vs_pack_2 (vi_sign a, vi_sign b)\n+{\n+  return vec_pack (a, b);\n+}\n+\n+vs_sign vs_pack_3 (vi_sign a, vi_sign b)\n+{\n+  return vec_vpkuwum (a, b);\n+}\n+\n+vc_sign vc_pack_1 (vs_sign a, vs_sign b)\n+{\n+  return __builtin_altivec_vpkuhum (a, b);\n+}\n+\n+vc_sign vc_pack_2 (vs_sign a, vs_sign b)\n+{\n+  return vec_pack (a, b);\n+}\n+\n+vc_sign vc_pack_3 (vs_sign a, vs_sign b)\n+{\n+  return vec_vpkuhum (a, b);\n+}\n+\n+vll_sign vll_unpack_hi_1 (vi_sign a)\n+{\n+  return __builtin_altivec_vupkhsw (a);\n+}\n+\n+vll_sign vll_unpack_hi_2 (vi_sign a)\n+{\n+  return vec_unpackh (a);\n+}\n+\n+vll_sign vll_unpack_hi_3 (vi_sign a)\n+{\n+  return __builtin_vec_vupkhsw (a);\n+}\n+\n+vll_sign vll_unpack_lo_1 (vi_sign a)\n+{\n+  return vec_vupklsw (a);\n+}\n+\n+vll_sign vll_unpack_lo_2 (vi_sign a)\n+{\n+  return vec_unpackl (a);\n+}\n+\n+vll_sign vll_unpack_lo_3 (vi_sign a)\n+{\n+  return vec_vupklsw (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpkudum\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpkuwum\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpkuhum\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vupklsw\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vupkhsw\" 3 } } */"}, {"sha": "518a6aa5e64c80e0812c406f1d54c0c23243bd02", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-4.c", "status": "added", "additions": 249, "deletions": 0, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-4.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,249 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O3 -ftree-vectorize -fvect-cost-model\" } */\n+\n+#include <altivec.h>\n+\n+typedef vector long long\t\tvll_sign;\n+typedef vector unsigned long long\tvll_uns;\n+typedef vector bool long long\t\tvll_bool;\n+\n+typedef vector int\t\t\tvi_sign;\n+typedef vector unsigned int\t\tvi_uns;\n+typedef vector bool int\t\t\tvi_bool;\n+\n+typedef vector short\t\t\tvs_sign;\n+typedef vector unsigned short\t\tvs_uns;\n+typedef vector bool short\t\tvs_bool;\n+\n+typedef vector signed char\t\tvc_sign;\n+typedef vector unsigned char\t\tvc_uns;\n+typedef vector bool char\t\tvc_bool;\n+\n+vll_sign vll_clz_1 (vll_sign a)\n+{\n+  return __builtin_altivec_vclzd (a);\n+}\n+\n+vll_sign vll_clz_2 (vll_sign a)\n+{\n+  return vec_vclz (a);\n+}\n+\n+vll_sign vll_clz_3 (vll_sign a)\n+{\n+  return vec_vclzd (a);\n+}\n+\n+vll_uns vll_clz_4 (vll_uns a)\n+{\n+  return vec_vclz (a);\n+}\n+\n+vll_uns vll_clz_5 (vll_uns a)\n+{\n+  return vec_vclzd (a);\n+}\n+\n+vi_sign vi_clz_1 (vi_sign a)\n+{\n+  return __builtin_altivec_vclzw (a);\n+}\n+\n+vi_sign vi_clz_2 (vi_sign a)\n+{\n+  return vec_vclz (a);\n+}\n+\n+vi_sign vi_clz_3 (vi_sign a)\n+{\n+  return vec_vclzw (a);\n+}\n+\n+vi_uns vi_clz_4 (vi_uns a)\n+{\n+  return vec_vclz (a);\n+}\n+\n+vi_uns vi_clz_5 (vi_uns a)\n+{\n+  return vec_vclzw (a);\n+}\n+\n+vs_sign vs_clz_1 (vs_sign a)\n+{\n+  return __builtin_altivec_vclzh (a);\n+}\n+\n+vs_sign vs_clz_2 (vs_sign a)\n+{\n+  return vec_vclz (a);\n+}\n+\n+vs_sign vs_clz_3 (vs_sign a)\n+{\n+  return vec_vclzh (a);\n+}\n+\n+vs_uns vs_clz_4 (vs_uns a)\n+{\n+  return vec_vclz (a);\n+}\n+\n+vs_uns vs_clz_5 (vs_uns a)\n+{\n+  return vec_vclzh (a);\n+}\n+\n+vc_sign vc_clz_1 (vc_sign a)\n+{\n+  return __builtin_altivec_vclzb (a);\n+}\n+\n+vc_sign vc_clz_2 (vc_sign a)\n+{\n+  return vec_vclz (a);\n+}\n+\n+vc_sign vc_clz_3 (vc_sign a)\n+{\n+  return vec_vclzb (a);\n+}\n+\n+vc_uns vc_clz_4 (vc_uns a)\n+{\n+  return vec_vclz (a);\n+}\n+\n+vc_uns vc_clz_5 (vc_uns a)\n+{\n+  return vec_vclzb (a);\n+}\n+\n+vll_sign vll_popcnt_1 (vll_sign a)\n+{\n+  return __builtin_altivec_vpopcntd (a);\n+}\n+\n+vll_sign vll_popcnt_2 (vll_sign a)\n+{\n+  return vec_vpopcnt (a);\n+}\n+\n+vll_sign vll_popcnt_3 (vll_sign a)\n+{\n+  return vec_vpopcntd (a);\n+}\n+\n+vll_uns vll_popcnt_4 (vll_uns a)\n+{\n+  return vec_vpopcnt (a);\n+}\n+\n+vll_uns vll_popcnt_5 (vll_uns a)\n+{\n+  return vec_vpopcntd (a);\n+}\n+\n+vi_sign vi_popcnt_1 (vi_sign a)\n+{\n+  return __builtin_altivec_vpopcntw (a);\n+}\n+\n+vi_sign vi_popcnt_2 (vi_sign a)\n+{\n+  return vec_vpopcnt (a);\n+}\n+\n+vi_sign vi_popcnt_3 (vi_sign a)\n+{\n+  return vec_vpopcntw (a);\n+}\n+\n+vi_uns vi_popcnt_4 (vi_uns a)\n+{\n+  return vec_vpopcnt (a);\n+}\n+\n+vi_uns vi_popcnt_5 (vi_uns a)\n+{\n+  return vec_vpopcntw (a);\n+}\n+\n+vs_sign vs_popcnt_1 (vs_sign a)\n+{\n+  return __builtin_altivec_vpopcnth (a);\n+}\n+\n+vs_sign vs_popcnt_2 (vs_sign a)\n+{\n+  return vec_vpopcnt (a);\n+}\n+\n+vs_sign vs_popcnt_3 (vs_sign a)\n+{\n+  return vec_vpopcnth (a);\n+}\n+\n+vs_uns vs_popcnt_4 (vs_uns a)\n+{\n+  return vec_vpopcnt (a);\n+}\n+\n+vs_uns vs_popcnt_5 (vs_uns a)\n+{\n+  return vec_vpopcnth (a);\n+}\n+\n+vc_sign vc_popcnt_1 (vc_sign a)\n+{\n+  return __builtin_altivec_vpopcntb (a);\n+}\n+\n+vc_sign vc_popcnt_2 (vc_sign a)\n+{\n+  return vec_vpopcnt (a);\n+}\n+\n+vc_sign vc_popcnt_3 (vc_sign a)\n+{\n+  return vec_vpopcntb (a);\n+}\n+\n+vc_uns vc_popcnt_4 (vc_uns a)\n+{\n+  return vec_vpopcnt (a);\n+}\n+\n+vc_uns vc_popcnt_5 (vc_uns a)\n+{\n+  return vec_vpopcntb (a);\n+}\n+\n+vc_uns vc_gbb_1 (vc_uns a)\n+{\n+  return __builtin_altivec_vgbbd (a);\n+}\n+\n+vc_sign vc_gbb_2 (vc_sign a)\n+{\n+  return vec_vgbbd (a);\n+}\n+\n+vc_uns vc_gbb_3 (vc_uns a)\n+{\n+  return vec_vgbbd (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vclzd\" \t5 } } */\n+/* { dg-final { scan-assembler-times \"vclzw\" \t5 } } */\n+/* { dg-final { scan-assembler-times \"vclzh\" \t5 } } */\n+/* { dg-final { scan-assembler-times \"vclzb\" \t5 } } */\n+\n+/* { dg-final { scan-assembler-times \"vpopcntd\" 5 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\" 5 } } */\n+/* { dg-final { scan-assembler-times \"vpopcnth\" 5 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\" 5 } } */\n+\n+/* { dg-final { scan-assembler-times \"vgbbd\"    3 } } */"}, {"sha": "2e64551ff680366785c182335b98bbee2f71d4c0", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-5.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-5.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2 -ftree-vectorize -fvect-cost-model -fno-unroll-loops -fno-unroll-all-loops\" } */\n+\n+#include <altivec.h>\n+\n+#ifndef SIZE\n+#define SIZE 1024\n+#endif\n+\n+#ifndef ALIGN\n+#define ALIGN 32\n+#endif\n+\n+#ifndef ATTR_ALIGN\n+#define ATTR_ALIGN __attribute__((__aligned__(ALIGN)))\n+#endif\n+\n+#define DOIT(TYPE, PREFIX)\t\t\t\t\t\t\\\n+TYPE PREFIX ## _eqv_builtin (TYPE a, TYPE b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return vec_eqv (a, b);\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+TYPE PREFIX ## _eqv_arith (TYPE a, TYPE b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return ~(a ^ b);\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+TYPE PREFIX ## _nand_builtin (TYPE a, TYPE b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return vec_nand (a, b);\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+TYPE PREFIX ## _nand_arith1 (TYPE a, TYPE b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return ~(a & b);\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+TYPE PREFIX ## _nand_arith2 (TYPE a, TYPE b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return (~a) | (~b);\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+TYPE PREFIX ## _orc_builtin (TYPE a, TYPE b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return vec_orc (a, b);\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+TYPE PREFIX ## _orc_arith1 (TYPE a, TYPE b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return (~ a) | b;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+TYPE PREFIX ## _orc_arith2 (TYPE a, TYPE b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return a | (~ b);\t\t\t\t\t\t\t\\\n+}\n+\n+#define DOIT_FLOAT(TYPE, PREFIX)\t\t\t\t\t\\\n+TYPE PREFIX ## _eqv_builtin (TYPE a, TYPE b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return vec_eqv (a, b);\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+TYPE PREFIX ## _nand_builtin (TYPE a, TYPE b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return vec_nand (a, b);\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+TYPE PREFIX ## _orc_builtin (TYPE a, TYPE b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return vec_orc (a, b);\t\t\t\t\t\t\\\n+}\n+\n+typedef vector signed char\t\tsign_char_vec;\n+typedef vector short\t\t\tsign_short_vec;\n+typedef vector int\t\t\tsign_int_vec;\n+typedef vector long long\t\tsign_llong_vec;\n+\n+typedef vector unsigned char\t\tuns_char_vec;\n+typedef vector unsigned short\t\tuns_short_vec;\n+typedef vector unsigned int\t\tuns_int_vec;\n+typedef vector unsigned long long\tuns_llong_vec;\n+\n+typedef vector float\t\t\tfloat_vec;\n+typedef vector double\t\t\tdouble_vec;\n+\n+DOIT(sign_char_vec,\tsign_char)\n+DOIT(sign_short_vec,\tsign_short)\n+DOIT(sign_int_vec,\tsign_int)\n+DOIT(sign_llong_vec,\tsign_llong)\n+\n+DOIT(uns_char_vec,\tuns_char)\n+DOIT(uns_short_vec,\tuns_short)\n+DOIT(uns_int_vec,\tuns_int)\n+DOIT(uns_llong_vec,\tuns_llong)\n+\n+DOIT_FLOAT(float_vec,\tfloat)\n+DOIT_FLOAT(double_vec,\tdouble)\n+\n+/* { dg-final { scan-assembler-times \"xxleqv\"  18 } } */\n+/* { dg-final { scan-assembler-times \"xxlnand\" 26 } } */\n+/* { dg-final { scan-assembler-times \"xxlorc\"  26 } } */"}, {"sha": "8b81781c6a4aaf49c63fa74f61d545a919654281", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-6.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n+\n+vector float dbl_to_float_p8 (double x) { return __builtin_vsx_xscvdpspn (x); }\n+double float_to_dbl_p8 (vector float x) { return __builtin_vsx_xscvspdpn (x); }\n+\n+/* { dg-final { scan-assembler \"xscvdpspn\" } } */\n+/* { dg-final { scan-assembler \"xscvspdpn\" } } */"}, {"sha": "45a300fb9444e90689dd7e093634b3d319126d3f", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-7.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-7.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n+\n+#include <altivec.h>\n+\n+typedef vector int\t\tv_sign;\n+typedef vector unsigned int\tv_uns;\n+\n+v_sign even_sign (v_sign a, v_sign b)\n+{\n+  return vec_vmrgew (a, b);\n+}\n+\n+v_uns even_uns (v_uns a, v_uns b)\n+{\n+  return vec_vmrgew (a, b);\n+}\n+\n+v_sign odd_sign (v_sign a, v_sign b)\n+{\n+  return vec_vmrgow (a, b);\n+}\n+\n+v_uns odd_uns (v_uns a, v_uns b)\n+{\n+  return vec_vmrgow (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmrgew\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmrgow\" 2 } } */"}, {"sha": "9a975bd6fe2ed646ad1496d8c6893c09b381e9de", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-1.c", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-1.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,200 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2 -ftree-vectorize -fvect-cost-model -fno-unroll-loops -fno-unroll-all-loops\" } */\n+\n+#ifndef SIZE\n+#define SIZE 1024\n+#endif\n+\n+#ifndef ALIGN\n+#define ALIGN 32\n+#endif\n+\n+#ifndef TYPE\n+#define TYPE long long\n+#endif\n+\n+#ifndef SIGN_TYPE\n+#define SIGN_TYPE signed TYPE\n+#endif\n+\n+#ifndef UNS_TYPE\n+#define UNS_TYPE unsigned TYPE\n+#endif\n+\n+#define ALIGN_ATTR __attribute__((__aligned__(ALIGN)))\n+\n+SIGN_TYPE\tsa[SIZE] ALIGN_ATTR;\n+SIGN_TYPE\tsb[SIZE] ALIGN_ATTR;\n+SIGN_TYPE\tsc[SIZE] ALIGN_ATTR;\n+\n+UNS_TYPE\tua[SIZE] ALIGN_ATTR;\n+UNS_TYPE\tub[SIZE] ALIGN_ATTR;\n+UNS_TYPE\tuc[SIZE] ALIGN_ATTR;\n+\n+void\n+sign_add (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = sb[i] + sc[i];\n+}\n+\n+void\n+sign_sub (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = sb[i] - sc[i];\n+}\n+\n+void\n+sign_shift_left (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = sb[i] << sc[i];\n+}\n+\n+void\n+sign_shift_right (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = sb[i] >> sc[i];\n+}\n+\n+void\n+sign_max (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = (sb[i] > sc[i]) ? sb[i] : sc[i];\n+}\n+\n+void\n+sign_min (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = (sb[i] < sc[i]) ? sb[i] : sc[i];\n+}\n+\n+void\n+sign_abs (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = (sb[i] < 0) ? -sb[i] : sb[i];\t/* xor, vsubudm, vmaxsd.  */\n+}\n+\n+void\n+sign_eq (SIGN_TYPE val1, SIGN_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = (sb[i] == sc[i]) ? val1 : val2;\n+}\n+\n+void\n+sign_lt (SIGN_TYPE val1, SIGN_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = (sb[i] < sc[i]) ? val1 : val2;\n+}\n+\n+void\n+uns_add (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = ub[i] + uc[i];\n+}\n+\n+void\n+uns_sub (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = ub[i] - uc[i];\n+}\n+\n+void\n+uns_shift_left (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = ub[i] << uc[i];\n+}\n+\n+void\n+uns_shift_right (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = ub[i] >> uc[i];\n+}\n+\n+void\n+uns_max (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = (ub[i] > uc[i]) ? ub[i] : uc[i];\n+}\n+\n+void\n+uns_min (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = (ub[i] < uc[i]) ? ub[i] : uc[i];\n+}\n+\n+void\n+uns_eq (UNS_TYPE val1, UNS_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = (ub[i] == uc[i]) ? val1 : val2;\n+}\n+\n+void\n+uns_lt (UNS_TYPE val1, UNS_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = (ub[i] < uc[i]) ? val1 : val2;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vaddudm\\[\\t \\]\"  2 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vsubudm\\[\\t \\]\"  3 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vmaxsd\\[\\t \\]\"   2 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vmaxud\\[\\t \\]\"   1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vminsd\\[\\t \\]\"   1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vminud\\[\\t \\]\"   1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vsld\\[\\t \\]\"     2 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vsrad\\[\\t \\]\"    1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vsrd\\[\\t \\]\"     1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vcmpequd\\[\\t \\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vcmpgtsd\\[\\t \\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]vcmpgtud\\[\\t \\]\" 1 } } */"}, {"sha": "8feba0a13473a4d21e6cdde9e2b050e3a2addcff", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-2.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2 -ftree-vectorize -fvect-cost-model\" } */\n+\n+#include <stddef.h>\n+\n+#ifndef SIZE\n+#define SIZE 1024\n+#endif\n+\n+#ifndef ALIGN\n+#define ALIGN 32\n+#endif\n+\n+#define ALIGN_ATTR __attribute__((__aligned__(ALIGN)))\n+\n+long long sign_ll[SIZE]\tALIGN_ATTR;\n+int\t  sign_i [SIZE]\tALIGN_ATTR;\n+\n+void copy_int_to_long_long (void)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sign_ll[i] = sign_i[i];\n+}\n+\n+/* { dg-final { scan-assembler \"vupkhsw\" } } */\n+/* { dg-final { scan-assembler \"vupklsw\" } } */"}, {"sha": "570f2e5991c2fc5ecbf41e79bad5e34d75930385", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-3.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2 -ftree-vectorize -fvect-cost-model\" } */\n+\n+#include <stddef.h>\n+\n+#ifndef SIZE\n+#define SIZE 1024\n+#endif\n+\n+#ifndef ALIGN\n+#define ALIGN 32\n+#endif\n+\n+#define ALIGN_ATTR __attribute__((__aligned__(ALIGN)))\n+\n+long long sign_ll[SIZE]\tALIGN_ATTR;\n+int\t  sign_i [SIZE]\tALIGN_ATTR;\n+\n+void copy_long_long_to_int (void)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sign_i[i] = sign_ll[i];\n+}\n+\n+/* { dg-final { scan-assembler \"vpkudum\" } } */"}, {"sha": "90df88680514c8b0c6baeb6481807cbbf796f0ae", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-4.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-4.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2 -ftree-vectorize -fvect-cost-model -fno-unroll-loops -fno-unroll-all-loops\" } */\n+\n+#ifndef SIZE\n+#define SIZE 1024\n+#endif\n+\n+#ifndef ALIGN\n+#define ALIGN 32\n+#endif\n+\n+#define ALIGN_ATTR __attribute__((__aligned__(ALIGN)))\n+\n+#define DO_BUILTIN(PREFIX, TYPE, CLZ, POPCNT)\t\t\t\t\\\n+TYPE PREFIX ## _a[SIZE] ALIGN_ATTR;\t\t\t\t\t\\\n+TYPE PREFIX ## _b[SIZE] ALIGN_ATTR;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+PREFIX ## _clz (void)\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  unsigned long i;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < SIZE; i++)\t\t\t\t\t\t\\\n+    PREFIX ## _a[i] = CLZ (PREFIX ## _b[i]);\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+PREFIX ## _popcnt (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  unsigned long i;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < SIZE; i++)\t\t\t\t\t\t\\\n+    PREFIX ## _a[i] = POPCNT (PREFIX ## _b[i]);\t\t\t\t\\\n+}\n+\n+#if !defined(DO_LONG_LONG) && !defined(DO_LONG) && !defined(DO_INT) && !defined(DO_SHORT) && !defined(DO_CHAR)\n+#define DO_INT 1\n+#endif\n+\n+#if DO_LONG_LONG\n+/* At the moment, only int is auto vectorized.  */\n+DO_BUILTIN (sll, long long,\t\t__builtin_clzll, __builtin_popcountll)\n+DO_BUILTIN (ull, unsigned long long,\t__builtin_clzll, __builtin_popcountll)\n+#endif\n+\n+#if defined(_ARCH_PPC64) && DO_LONG\n+DO_BUILTIN (sl,  long,\t\t\t__builtin_clzl,  __builtin_popcountl)\n+DO_BUILTIN (ul,  unsigned long,\t\t__builtin_clzl,  __builtin_popcountl)\n+#endif\n+\n+#if DO_INT\n+DO_BUILTIN (si,  int,\t\t\t__builtin_clz,   __builtin_popcount)\n+DO_BUILTIN (ui,  unsigned int,\t\t__builtin_clz,   __builtin_popcount)\n+#endif\n+\n+#if DO_SHORT\n+DO_BUILTIN (ss,  short,\t\t\t__builtin_clz,   __builtin_popcount)\n+DO_BUILTIN (us,  unsigned short,\t__builtin_clz,   __builtin_popcount)\n+#endif\n+\n+#if DO_CHAR\n+DO_BUILTIN (sc,  signed char,\t\t__builtin_clz,   __builtin_popcount)\n+DO_BUILTIN (uc,  unsigned char,\t\t__builtin_clz,   __builtin_popcount)\n+#endif\n+\n+/* { dg-final { scan-assembler-times \"vclzw\"     2 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\"  2 } } */"}, {"sha": "17563bf477a78080b4e6460b01a01a7022f4db19", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-vectorize-5.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9afa21655ee5b5e8894ca50b17393602daf9efd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-vectorize-5.c?ref=a9afa21655ee5b5e8894ca50b17393602daf9efd", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2 -ftree-vectorize -fvect-cost-model -fno-unroll-loops -fno-unroll-all-loops\" } */\n+\n+#ifndef SIZE\n+#define SIZE 1024\n+#endif\n+\n+#ifndef ALIGN\n+#define ALIGN 32\n+#endif\n+\n+#ifndef ATTR_ALIGN\n+#define ATTR_ALIGN __attribute__((__aligned__(ALIGN)))\n+#endif\n+\n+#ifndef TYPE\n+#define TYPE unsigned int\n+#endif\n+\n+TYPE in1  [SIZE] ATTR_ALIGN;\n+TYPE in2  [SIZE] ATTR_ALIGN;\n+TYPE eqv  [SIZE] ATTR_ALIGN;\n+TYPE nand1[SIZE] ATTR_ALIGN;\n+TYPE nand2[SIZE] ATTR_ALIGN;\n+TYPE orc1 [SIZE] ATTR_ALIGN;\n+TYPE orc2 [SIZE] ATTR_ALIGN;\n+\n+void\n+do_eqv (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      eqv[i] = ~(in1[i] ^ in2[i]);\n+    }\n+}\n+\n+void\n+do_nand1 (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      nand1[i] = ~(in1[i] & in2[i]);\n+    }\n+}\n+\n+void\n+do_nand2 (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      nand2[i] = (~in1[i]) | (~in2[i]);\n+    }\n+}\n+\n+void\n+do_orc1 (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      orc1[i] = (~in1[i]) | in2[i];\n+    }\n+}\n+\n+void\n+do_orc2 (void)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      orc1[i] = in1[i] | (~in2[i]);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxleqv\"  1 } } */\n+/* { dg-final { scan-assembler-times \"xxlnand\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xxlorc\"  2 } } */"}]}