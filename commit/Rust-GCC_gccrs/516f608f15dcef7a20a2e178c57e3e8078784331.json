{"sha": "516f608f15dcef7a20a2e178c57e3e8078784331", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE2ZjYwOGYxNWRjZWY3YTIwYTJlMTc4YzU3ZTNlODA3ODc4NDMzMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-01T10:36:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-01T10:36:43Z"}, "message": "[multiple changes]\n\n2011-09-01  Robert Dewar  <dewar@adacore.com>\n\n\t* a-cbprqu.adb, a-cbprqu.ads, a-cuprqu.adb, a-cuprqu.ads,\n\ta-cbsyqu.adb, a-cbsyqu.ads: Minor reformatting.\n\n2011-09-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb: Conditionalize aliasing predicates to Ada2012.\n\n2011-09-01  Jose Ruiz  <ruiz@adacore.com>\n\n\t* aspects.ads (Aspect_Id, Aspect_Argument, Aspect_Names): Add the CPU\n\taspect.\n\t* aspects.adb (Canonical_Aspect): Add entry for the CPU aspect.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Analyze the CPU aspect\n\tin a similar way as we do for the Priority or Dispatching_Domain aspect.\n\t* s-mudido-affinity.adb (Dispatching_Domain_Tasks,\n\tDispatching_Domains_Frozen): Move this local data to package\n\tSystem.Tasking because with the CPU aspect we need to have access\n\tto this data when creating the task in System.Tasking.Stages.Create_Task\n\t* s-taskin.ads (Dispatching_Domain_Tasks, Dispatching_Domains_Frozen):\n\tMove these variables from the body of\n\tSystem.Multiprocessors.Dispatching_Domains because with the CPU aspect\n\twe need to have access to this data when creating the task in\n\tSystem.Tasking.Stages.Create_Task.\n\t* s-taskin.adb (Initialize): Signal the allocation of the environment\n\ttask to a CPU, if any, so that we know whether the CPU can be\n\ttransferred to a different dispatching domain.\n\t* s-tassta.adb (Create_Task): Check whether the CPU to which this task\n\tis being allocated belongs to the dispatching domain where the task\n\tlives. Signal the allocation of the task to a CPU, if any, so that we\n\tknow whether the CPU can be transferred to a different dispatching\n\tdomain.\n\nFrom-SVN: r178400", "tree": {"sha": "c14fd51fc3ca9f529580faf85a8e07628662b3cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c14fd51fc3ca9f529580faf85a8e07628662b3cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/516f608f15dcef7a20a2e178c57e3e8078784331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516f608f15dcef7a20a2e178c57e3e8078784331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516f608f15dcef7a20a2e178c57e3e8078784331", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516f608f15dcef7a20a2e178c57e3e8078784331/comments", "author": null, "committer": null, "parents": [{"sha": "2d42e8812ef4954cd42ac861090c16ac27c3ac7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d42e8812ef4954cd42ac861090c16ac27c3ac7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d42e8812ef4954cd42ac861090c16ac27c3ac7e"}], "stats": {"total": 206, "additions": 165, "deletions": 41}, "files": [{"sha": "b8dea0dcd1ac981c6538b12bb51f5e1127e1f4a5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -1,3 +1,37 @@\n+2011-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-cbprqu.adb, a-cbprqu.ads, a-cuprqu.adb, a-cuprqu.ads,\n+\ta-cbsyqu.adb, a-cbsyqu.ads: Minor reformatting.\n+\n+2011-09-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb: Conditionalize aliasing predicates to Ada2012.\n+\n+2011-09-01  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* aspects.ads (Aspect_Id, Aspect_Argument, Aspect_Names): Add the CPU\n+\taspect.\n+\t* aspects.adb (Canonical_Aspect): Add entry for the CPU aspect.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Analyze the CPU aspect\n+\tin a similar way as we do for the Priority or Dispatching_Domain aspect.\n+\t* s-mudido-affinity.adb (Dispatching_Domain_Tasks,\n+\tDispatching_Domains_Frozen): Move this local data to package\n+\tSystem.Tasking because with the CPU aspect we need to have access\n+\tto this data when creating the task in System.Tasking.Stages.Create_Task\n+\t* s-taskin.ads (Dispatching_Domain_Tasks, Dispatching_Domains_Frozen):\n+\tMove these variables from the body of\n+\tSystem.Multiprocessors.Dispatching_Domains because with the CPU aspect\n+\twe need to have access to this data when creating the task in\n+\tSystem.Tasking.Stages.Create_Task.\n+\t* s-taskin.adb (Initialize): Signal the allocation of the environment\n+\ttask to a CPU, if any, so that we know whether the CPU can be\n+\ttransferred to a different dispatching domain.\n+\t* s-tassta.adb (Create_Task): Check whether the CPU to which this task\n+\tis being allocated belongs to the dispatching domain where the task\n+\tlives. Signal the allocation of the task to a CPU, if any, so that we\n+\tknow whether the CPU can be transferred to a different dispatching\n+\tdomain.\n+\n 2011-09-01  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_attr.adb, sem_attr.adb, snames.ads-tmpl: Implementation of"}, {"sha": "ca04912800583e92339d35dcb44cd2cba150d583", "filename": "gcc/ada/a-cbprqu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cbprqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cbprqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbprqu.adb?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT LIBRARY COMPONENTS                          --\n --                                                                          --\n---               ADA.CONTAINERS.BOUNDED_PRIORITY_QUEUES                     --\n+--                  ADA.CONTAINERS.BOUNDED_PRIORITY_QUEUES                  --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --"}, {"sha": "9caef3482c27f158d7d205bfbcc3c2d0a80cc445", "filename": "gcc/ada/a-cbprqu.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cbprqu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cbprqu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbprqu.ads?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT LIBRARY COMPONENTS                          --\n --                                                                          --\n---               ADA.CONTAINERS.BOUNDED_PRIORITY_QUEUES                     --\n+--                  ADA.CONTAINERS.BOUNDED_PRIORITY_QUEUES                  --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n@@ -32,6 +32,7 @@\n ------------------------------------------------------------------------------\n \n with System;\n+\n with Ada.Containers.Synchronized_Queue_Interfaces;\n with Ada.Containers.Bounded_Doubly_Linked_Lists;\n "}, {"sha": "cb2cbc5d4f78907077f2fa8fc56da7a044d66c7f", "filename": "gcc/ada/a-cbsyqu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cbsyqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cbsyqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbsyqu.adb?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT LIBRARY COMPONENTS                          --\n --                                                                          --\n---               ADA.CONTAINERS.BOUNDED_SYNCHRONIZED_QUEUES                 --\n+--                ADA.CONTAINERS.BOUNDED_SYNCHRONIZED_QUEUES                --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --"}, {"sha": "26e86bc1801c0796c88ceca3557cf9cf11713dd4", "filename": "gcc/ada/a-cbsyqu.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cbsyqu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cbsyqu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbsyqu.ads?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT LIBRARY COMPONENTS                          --\n --                                                                          --\n---               ADA.CONTAINERS.BOUNDED_SYNCHRONIZED_QUEUES                 --\n+--                ADA.CONTAINERS.BOUNDED_SYNCHRONIZED_QUEUES                --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --"}, {"sha": "c1da3ee49cffd8aea069d79bd09237f6cacfb864", "filename": "gcc/ada/a-cuprqu.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cuprqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cuprqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cuprqu.adb?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT LIBRARY COMPONENTS                          --\n --                                                                          --\n---               ADA.CONTAINERS.UNBOUNDED_PRIORITY_QUEUES                   --\n+--                 ADA.CONTAINERS.UNBOUNDED_PRIORITY_QUEUES                 --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n@@ -124,7 +124,6 @@ package body Ada.Containers.Unbounded_Priority_Queues is\n \n       procedure Finalize (List : in out List_Type) is\n          X : Node_Access;\n-\n       begin\n          while List.First /= null loop\n             X := List.First;"}, {"sha": "ac5b19e5373a96f31a371823a9ed9642d42447f1", "filename": "gcc/ada/a-cuprqu.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cuprqu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fa-cuprqu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cuprqu.ads?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT LIBRARY COMPONENTS                          --\n --                                                                          --\n---               ADA.CONTAINERS.UNBOUNDED_PRIORITY_QUEUES                   --\n+--                 ADA.CONTAINERS.UNBOUNDED_PRIORITY_QUEUES                 --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --"}, {"sha": "48a1c89e700f675fff06182a3ff166310bde27da", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -219,6 +219,7 @@ package body Aspects is\n     Aspect_Bit_Order                    => Aspect_Bit_Order,\n     Aspect_Component_Size               => Aspect_Component_Size,\n     Aspect_Constant_Indexing            => Aspect_Constant_Indexing,\n+    Aspect_CPU                          => Aspect_CPU,\n     Aspect_Default_Component_Value      => Aspect_Default_Component_Value,\n     Aspect_Default_Iterator             => Aspect_Default_Iterator,\n     Aspect_Default_Value                => Aspect_Default_Value,"}, {"sha": "fc110d6ba95f6ed847b1fbbcf28ef32cd372716f", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -50,6 +50,7 @@ package Aspects is\n       Aspect_Bit_Order,\n       Aspect_Component_Size,\n       Aspect_Constant_Indexing,\n+      Aspect_CPU,\n       Aspect_Default_Component_Value,\n       Aspect_Default_Iterator,\n       Aspect_Default_Value,\n@@ -188,6 +189,7 @@ package Aspects is\n                         Aspect_Bit_Order               => Expression,\n                         Aspect_Component_Size          => Expression,\n                         Aspect_Constant_Indexing       => Name,\n+                        Aspect_CPU                     => Expression,\n                         Aspect_Default_Component_Value => Expression,\n                         Aspect_Default_Iterator        => Name,\n                         Aspect_Default_Value           => Expression,\n@@ -248,6 +250,7 @@ package Aspects is\n      Aspect_Compiler_Unit                => Name_Compiler_Unit,\n      Aspect_Component_Size               => Name_Component_Size,\n      Aspect_Constant_Indexing            => Name_Constant_Indexing,\n+     Aspect_CPU                          => Name_CPU,\n      Aspect_Default_Iterator             => Name_Default_Iterator,\n      Aspect_Default_Value                => Name_Default_Value,\n      Aspect_Default_Component_Value      => Name_Default_Component_Value,"}, {"sha": "35239b87c50f9658938738d19b13fbf17658001e", "filename": "gcc/ada/s-mudido-affinity.adb", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fs-mudido-affinity.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fs-mudido-affinity.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mudido-affinity.adb?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -41,21 +41,6 @@ package body System.Multiprocessors.Dispatching_Domains is\n \n    package ST renames System.Tasking;\n \n-   ----------------\n-   -- Local data --\n-   ----------------\n-\n-   Dispatching_Domain_Tasks : array (CPU'First .. Number_Of_CPUs) of Natural :=\n-                                (others => 0);\n-   --  We need to store whether there are tasks allocated to concrete\n-   --  processors in the default system dispatching domain because we need to\n-   --  check it before creating a new dispatching domain.\n-   --  ??? Tasks allocated with pragma CPU are not taken into account here.\n-\n-   Dispatching_Domains_Frozen : Boolean := False;\n-   --  True when the main procedure has been called. Hence, no new dispatching\n-   --  domains can be created when this flag is True.\n-\n    -----------------------\n    -- Local subprograms --\n    -----------------------\n@@ -132,6 +117,7 @@ package body System.Multiprocessors.Dispatching_Domains is\n    function Create (First, Last : CPU) return Dispatching_Domain is\n       use type System.Tasking.Dispatching_Domain;\n       use type System.Tasking.Dispatching_Domain_Access;\n+      use type System.Tasking.Array_Allocated_Tasks;\n       use type System.Tasking.Task_Id;\n \n       Valid_System_Domain : constant Boolean :=\n@@ -177,7 +163,7 @@ package body System.Multiprocessors.Dispatching_Domains is\n            \"CPU range not currently in System_Dispatching_Domain\";\n \n       elsif\n-        Dispatching_Domain_Tasks (First .. Last) /= (First .. Last => 0)\n+        ST.Dispatching_Domain_Tasks (First .. Last) /= (First .. Last => 0)\n       then\n          raise Dispatching_Domain_Error with \"CPU range has tasks assigned\";\n \n@@ -189,7 +175,7 @@ package body System.Multiprocessors.Dispatching_Domains is\n          raise Dispatching_Domain_Error with\n            \"only the environment task can create dispatching domains\";\n \n-      elsif Dispatching_Domains_Frozen then\n+      elsif ST.Dispatching_Domains_Frozen then\n          raise Dispatching_Domain_Error with\n            \"cannot create dispatching domain after call to main program\";\n       end if;\n@@ -253,7 +239,7 @@ package body System.Multiprocessors.Dispatching_Domains is\n    begin\n       --  Signal the end of the elaboration code\n \n-      Dispatching_Domains_Frozen := True;\n+      ST.Dispatching_Domains_Frozen := True;\n    end Freeze_Dispatching_Domains;\n \n    -------------\n@@ -370,23 +356,23 @@ package body System.Multiprocessors.Dispatching_Domains is\n       --  Change the number of tasks attached to a given task in the system\n       --  domain if needed.\n \n-      if not Dispatching_Domains_Frozen\n+      if not ST.Dispatching_Domains_Frozen\n         and then (Domain = null or else Domain = ST.System_Domain)\n       then\n          --  Reduce the number of tasks attached to the CPU from which this\n          --  task is being moved, if needed.\n \n          if Source_CPU /= Not_A_Specific_CPU then\n-            Dispatching_Domain_Tasks (Source_CPU) :=\n-              Dispatching_Domain_Tasks (Source_CPU) - 1;\n+            ST.Dispatching_Domain_Tasks (Source_CPU) :=\n+              ST.Dispatching_Domain_Tasks (Source_CPU) - 1;\n          end if;\n \n          --  Increase the number of tasks attached to the CPU to which this\n          --  task is being moved, if needed.\n \n          if CPU /= Not_A_Specific_CPU then\n-            Dispatching_Domain_Tasks (CPU) :=\n-              Dispatching_Domain_Tasks (CPU) + 1;\n+            ST.Dispatching_Domain_Tasks (CPU) :=\n+              ST.Dispatching_Domain_Tasks (CPU) + 1;\n          end if;\n       end if;\n "}, {"sha": "17af0620b1467c3d9b950878ac4ffdc8a5aaf382", "filename": "gcc/ada/s-taskin.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -189,6 +189,8 @@ package body System.Tasking is\n       Base_CPU      : System.Multiprocessors.CPU_Range;\n       Success       : Boolean;\n \n+      use type System.Multiprocessors.CPU_Range;\n+\n    begin\n       if Initialized then\n          return;\n@@ -233,9 +235,20 @@ package body System.Tasking is\n \n       T.Common.Domain := System_Domain;\n \n-      --  ??? If we want to handle the interaction between pragma CPU and\n-      --  dispatching domains we would need to signal that this task is being\n-      --  allocated to a processor.\n+      Dispatching_Domain_Tasks :=\n+        new Array_Allocated_Tasks'\n+          (Multiprocessors.CPU'First .. Multiprocessors.Number_Of_CPUs => 0);\n+\n+      --  Signal that this task is being allocated to a processor\n+\n+      if Base_CPU /= System.Multiprocessors.Not_A_Specific_CPU then\n+\n+         --  Increase the number of tasks attached to the CPU to which this\n+         --  task is allocated.\n+\n+         Dispatching_Domain_Tasks (Base_CPU) :=\n+           Dispatching_Domain_Tasks (Base_CPU) + 1;\n+      end if;\n \n       --  Only initialize the first element since others are not relevant\n       --  in ravenscar mode. Rest of the initialization is done in Init_RTS."}, {"sha": "6200d208547670ab712e10111646c619f0847005", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -394,7 +394,43 @@ package System.Tasking is\n    type Dispatching_Domain_Access is access Dispatching_Domain;\n \n    System_Domain : Dispatching_Domain_Access;\n-   --  All processors belong to default system dispatching domain at start up\n+   --  All processors belong to default system dispatching domain at start up.\n+   --  We use a pointer which creates the actual variable for the reasons\n+   --  explained bellow in Dispatching_Domain_Tasks.\n+\n+   Dispatching_Domains_Frozen : Boolean := False;\n+   --  True when the main procedure has been called. Hence, no new dispatching\n+   --  domains can be created when this flag is True.\n+\n+   type Array_Allocated_Tasks is\n+     array (System.Multiprocessors.CPU range <>) of Natural;\n+   --  At start-up time, we need to store the number of tasks attached to\n+   --  concrete processors within the system domain (we can only create\n+   --  dispatching domains with processors belonging to the system domain and\n+   --  without tasks allocated).\n+\n+   type Array_Allocated_Tasks_Access is access Array_Allocated_Tasks;\n+\n+   Dispatching_Domain_Tasks : Array_Allocated_Tasks_Access;\n+   --  We need to store whether there are tasks allocated to concrete\n+   --  processors in the default system dispatching domain because we need to\n+   --  check it before creating a new dispatching domain. Two comments about\n+   --  the reason why we use a pointer here and not in package\n+   --  Dispatching_Domains.\n+   --  1) We use an array created dynamically in procedure Initialize which is\n+   --  called at the beginning of the initialization of the run-time library.\n+   --  Declaring a static array here in the spec would not work across\n+   --  different installations because it would get the value of Number_Of_CPUs\n+   --  from the machine where the run-time library is built, and not from the\n+   --  machine where the application is executed. That is the reason why we\n+   --  create the array (CPU'First .. Number_Of_CPUs) at execution time in the\n+   --  procedure body, ensuring that the function Number_Of_CPUs is executed at\n+   --  execution time (the same trick as we use for System_Domain).\n+   --  2) We have moved this declaration from package Dispatching_Domains\n+   --  because when we use a pragma CPU, the affinity is passed through the\n+   --  call to Create_Task. Hence, at this point, we may need to update the\n+   --  number of tasks associated to the processor, but we do not want to force\n+   --  a dependency from this package on Dispatching_Domains.\n \n    ------------------------------------\n    -- Task related other definitions --"}, {"sha": "3711ce30d8bcecce1bd00717f42e4e033548da06", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -493,6 +493,8 @@ package body System.Tasking.Stages is\n       Len           : Natural;\n       Base_CPU      : System.Multiprocessors.CPU_Range;\n \n+      use type System.Multiprocessors.CPU_Range;\n+\n       pragma Unreferenced (Relative_Deadline);\n       --  EDF scheduling is not supported by any of the target platforms so\n       --  this parameter is not passed any further.\n@@ -540,10 +542,6 @@ package body System.Tasking.Stages is\n             else System.Multiprocessors.CPU_Range (CPU));\n       end if;\n \n-      --  ??? If we want to handle the interaction between pragma CPU and\n-      --  dispatching domains we would need to signal that this task is being\n-      --  allocated to a processor.\n-\n       --  Find parent P of new Task, via master level number\n \n       P := Self_ID;\n@@ -658,6 +656,36 @@ package body System.Tasking.Stages is\n       Unlock (Self_ID);\n       Unlock_RTS;\n \n+      --  The CPU associated to the task (if any) must belong to the\n+      --  dispatching domain.\n+\n+      if Base_CPU /= System.Multiprocessors.Not_A_Specific_CPU and then\n+        (Base_CPU not in T.Common.Domain'Range\n+         or else not T.Common.Domain (Base_CPU))\n+      then\n+         Initialization.Undefer_Abort_Nestable (Self_ID);\n+         raise Tasking_Error with \"CPU not in dispatching domain\";\n+      end if;\n+\n+      --  In order to handle the interaction between pragma CPU and\n+      --  dispatching domains we need to signal that this task is being\n+      --  allocated to a processor. This is needed only for tasks belonging to\n+      --  the system domain (the creation of new dispatching domains can only\n+      --  take processors from the system domain) and only before the\n+      --  environment task calls the main procedure (dispatching domains cannot\n+      --  be created after this).\n+\n+      if Base_CPU /= System.Multiprocessors.Not_A_Specific_CPU\n+        and then T.Common.Domain = System.Tasking.System_Domain\n+        and then not System.Tasking.Dispatching_Domains_Frozen\n+      then\n+         --  Increase the number of tasks attached to the CPU to which this\n+         --  task is being moved.\n+\n+         Dispatching_Domain_Tasks (Base_CPU) :=\n+           Dispatching_Domain_Tasks (Base_CPU) + 1;\n+      end if;\n+\n       --  Note: we should not call 'new' while holding locks since new\n       --  may use locks (e.g. RTS_Lock under Windows) itself and cause a\n       --  deadlock."}, {"sha": "26fdcfaa936574b4e12ad282d095afc0a6796036", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -3883,6 +3883,12 @@ package body Sem_Attr is\n       ----------------------\n \n       when Attribute_Overlaps_Storage =>\n+         if Ada_Version < Ada_2012 then\n+            Error_Msg_N\n+              (\"attribute Overlaps_Storage is an Ada 2012 feature\", N);\n+            Error_Msg_N\n+              (\"\\unit must be compiled with -gnat2012 switch\", N);\n+         end if;\n          Check_E1;\n \n          --  Both arguments must be objects of any type\n@@ -4374,6 +4380,13 @@ package body Sem_Attr is\n       ------------------\n \n       when Attribute_Same_Storage =>\n+         if Ada_Version < Ada_2012 then\n+            Error_Msg_N\n+              (\"attribute Same_Storage is an Ada 2012 feature\", N);\n+            Error_Msg_N\n+              (\"\\unit must be compiled with -gnat2012 switch\", N);\n+         end if;\n+\n          Check_E1;\n \n          --  The arguments must be objects of any type"}, {"sha": "0eb4ed799f6fd095d3e1c7664dc79252795be0af", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f608f15dcef7a20a2e178c57e3e8078784331/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=516f608f15dcef7a20a2e178c57e3e8078784331", "patch": "@@ -1151,7 +1151,8 @@ package body Sem_Ch13 is\n \n                when Aspect_Priority           |\n                     Aspect_Interrupt_Priority |\n-                    Aspect_Dispatching_Domain =>\n+                    Aspect_Dispatching_Domain |\n+                    Aspect_CPU                  =>\n                   declare\n                      Pname : Name_Id;\n                   begin\n@@ -1161,6 +1162,9 @@ package body Sem_Ch13 is\n                      elsif A_Id = Aspect_Interrupt_Priority then\n                         Pname := Name_Interrupt_Priority;\n \n+                     elsif A_Id = Aspect_CPU then\n+                        Pname := Name_CPU;\n+\n                      else\n                         Pname := Name_Dispatching_Domain;\n                      end if;\n@@ -1495,11 +1499,13 @@ package body Sem_Ch13 is\n \n                      --  For Priority aspects, insert into the task or\n                      --  protected definition, which we need to create if it's\n-                     --  not there.\n+                     --  not there. The same applies to CPU and\n+                     --  Dispatching_Domain but only to tasks.\n \n                      when Aspect_Priority           |\n                           Aspect_Interrupt_Priority |\n-                          Aspect_Dispatching_Domain =>\n+                          Aspect_Dispatching_Domain |\n+                          Aspect_CPU                  =>\n                         declare\n                            T : Node_Id; -- the type declaration\n                            L : List_Id; -- list of decls of task/protected\n@@ -1514,6 +1520,7 @@ package body Sem_Ch13 is\n \n                            if Nkind (T) = N_Protected_Type_Declaration\n                              and then A_Id /= Aspect_Dispatching_Domain\n+                             and then A_Id /= Aspect_CPU\n                            then\n                               pragma Assert\n                                 (Present (Protected_Definition (T)));\n@@ -5890,6 +5897,9 @@ package body Sem_Ch13 is\n          when Aspect_Bit_Order =>\n             T := RTE (RE_Bit_Order);\n \n+         when Aspect_CPU =>\n+            T := RTE (RE_CPU_Range);\n+\n          when Aspect_Dispatching_Domain =>\n             T := RTE (RE_Dispatching_Domain);\n "}]}