{"sha": "5030111533de53f866bff85cd045085e717c7bf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAzMDExMTUzM2RlNTNmODY2YmZmODVjZDA0NTA4NWU3MTdjN2JmNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-03T13:45:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-03T13:45:22Z"}, "message": "genmatch.c (simplify::for_subst_vec): New member.\n\n2015-08-03  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (simplify::for_subst_vec): New member.\n\t(binary_ok): New helper for for lowering.\n\t(lower_for): Delay substituting operators into result expressions\n\tif we can merge the results eventually again.\n\t(capture_info::walk_result): Adjust for user_id appearing as\n\tresult expression operator.\n\t(expr::gen_transform): Likewise.\n\t(dt_simplify::gen_1): Likewise.\n\t(dt_simplify::gen): Pass not substituted operators to tail\n\tfunctions or initialize local variable with it.\n\t(decision_tree::gen): Adjust function signature.\n\t* match.pd: Fix tests against global code and add default\n\tcases to switch stmts.\n\nFrom-SVN: r226505", "tree": {"sha": "029b574d3fb17e189fbbcf47afaffe0e7a816102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/029b574d3fb17e189fbbcf47afaffe0e7a816102"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5030111533de53f866bff85cd045085e717c7bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5030111533de53f866bff85cd045085e717c7bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5030111533de53f866bff85cd045085e717c7bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5030111533de53f866bff85cd045085e717c7bf6/comments", "author": null, "committer": null, "parents": [{"sha": "d4b71b95fe4842753bc3b695862d2dc160ff2313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b71b95fe4842753bc3b695862d2dc160ff2313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b71b95fe4842753bc3b695862d2dc160ff2313"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "913a1493b5db33cbaa105a2a8a24620ad772e7d1", "filename": "gcc/match.pd", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5030111533de53f866bff85cd045085e717c7bf6/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5030111533de53f866bff85cd045085e717c7bf6/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5030111533de53f866bff85cd045085e717c7bf6", "patch": "@@ -945,7 +945,7 @@ along with GCC; see the file COPYING3.  If not see\n      (if (low >= prec)\n       (if (op == LROTATE_EXPR || op == RROTATE_EXPR)\n        (op @0 { build_int_cst (TREE_TYPE (@1), low % prec); })\n-       (if (TYPE_UNSIGNED (type) || code == LSHIFT_EXPR)\n+       (if (TYPE_UNSIGNED (type) || op == LSHIFT_EXPR)\n         { build_zero_cst (type); }\n         (op @0 { build_int_cst (TREE_TYPE (@1), prec - 1); })))\n       (op @0 { build_int_cst (TREE_TYPE (@1), low); })))))))\n@@ -1955,7 +1955,7 @@ along with GCC; see the file COPYING3.  If not see\n   (cmp @0 REAL_CST@1)\n   (if (REAL_VALUE_ISNAN (TREE_REAL_CST (@1))\n        && (cmp != LTGT_EXPR || ! flag_trapping_math))\n-   { constant_boolean_node (cmp == ORDERED_EXPR || code == LTGT_EXPR\n+   { constant_boolean_node (cmp == ORDERED_EXPR || cmp == LTGT_EXPR\n \t\t\t    ? false : true, type); })))\n \n /* bool_var != 0 becomes bool_var.  */\n@@ -2020,6 +2020,8 @@ along with GCC; see the file COPYING3.  If not see\n \t   x = build_real (type, dconst10);\n \t }\n          break;\n+       default:\n+\t gcc_unreachable ();\n        }\n      }\n     (mult (logs { x; }) @0))))\n@@ -2042,6 +2044,8 @@ along with GCC; see the file COPYING3.  If not see\n          x = build_real (type, real_value_truncate (TYPE_MODE (type),\n \t\t\t\t\t\t    dconst_third ()));\n          break;\n+       default:\n+\t gcc_unreachable ();\n        }\n      }\n     (mult { x; } (logs @0)))))"}]}