{"sha": "163f23d21e5f2faee08163f2dcb363042b53ee1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYzZjIzZDIxZTVmMmZhZWUwODE2M2YyZGNiMzYzMDQyYjUzZWUxZQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-11-07T11:52:05Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-11-07T11:52:05Z"}, "message": "IBM Z: Add pattern for load truth value of comparison into reg\n\nThe RTXs used to express an overflow condition check in add/sub/mul are\ntoo complex for if conversion.  However, there is code in\nnoce_emit_store_flag which generates a simple CC compare as the base\nfor using a conditional load.  All we have to do is to provide a\npattern to store the truth value of a CC compare into a GPR.\n\nDone with the attached patch.\n\n2019-11-07  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/s390.md (\"*cstorecc<mode>_z13\"): New insn_and_split\n\tpattern.\n\ngcc/testsuite/ChangeLog:\n\n2019-11-07  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/addsub-signed-overflow-1.c: Expect lochi\n\tinstructions to be used.\n\t* gcc.target/s390/addsub-signed-overflow-2.c: Likewise.\n\t* gcc.target/s390/mul-signed-overflow-1.c: Likewise.\n\t* gcc.target/s390/mul-signed-overflow-2.c: Likewise.\n\t* gcc.target/s390/vector/vec-scalar-cmp-1.c: Check for 32 and 64\n\tbit variant of lochi.  Swap the values for the lochi's.\n\t* gcc.target/s390/zvector/vec-cmp-1.c: Likewise.\n\nFrom-SVN: r277922", "tree": {"sha": "68c4a0ec3465a30ea31b298198f65c037e7d9dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68c4a0ec3465a30ea31b298198f65c037e7d9dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/163f23d21e5f2faee08163f2dcb363042b53ee1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/163f23d21e5f2faee08163f2dcb363042b53ee1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/163f23d21e5f2faee08163f2dcb363042b53ee1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/163f23d21e5f2faee08163f2dcb363042b53ee1e/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "084d390246c2172853f9e12ce04aef23cba79590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084d390246c2172853f9e12ce04aef23cba79590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084d390246c2172853f9e12ce04aef23cba79590"}], "stats": {"total": 129, "additions": 99, "deletions": 30}, "files": [{"sha": "aba47075c0a2e8cd0160a584285a8fbe6db7cb34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=163f23d21e5f2faee08163f2dcb363042b53ee1e", "patch": "@@ -1,3 +1,8 @@\n+2019-11-07  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.md (\"*cstorecc<mode>_z13\"): New insn_and_split\n+\tpattern.\n+\n 2019-11-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92405"}, {"sha": "c1d73d5ca428324ffe36e271e82bacc56ae0efce", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=163f23d21e5f2faee08163f2dcb363042b53ee1e", "patch": "@@ -6810,6 +6810,21 @@\n     [(set (match_dup 0) (ashiftrt:SI (match_dup 0) (const_int 28)))\n      (clobber (reg:CC CC_REGNUM))])])\n \n+; Such patterns get directly emitted by noce_emit_store_flag.\n+(define_insn_and_split \"*cstorecc<mode>_z13\"\n+  [(set (match_operand:GPR  0 \"register_operand\"                \"=&d\")\n+\t(match_operator:GPR 1 \"s390_comparison\"\n+\t\t\t    [(match_operand 2 \"cc_reg_operand\"    \"c\")\n+\t\t\t     (match_operand 3 \"const_int_operand\"  \"\")]))]\n+  \"TARGET_Z13\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 0) (const_int 0))\n+   (set (match_dup 0)\n+\t(if_then_else:GPR\n+\t (match_op_dup 1 [(match_dup 2) (match_dup 3)])\n+\t (const_int 1)\n+\t (match_dup 0)))])\n \n ;;\n ;; - Conditional move instructions (introduced with z196)"}, {"sha": "b42b78b4d3928c28fd8a985fcce7064b97cc6e37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=163f23d21e5f2faee08163f2dcb363042b53ee1e", "patch": "@@ -1,3 +1,14 @@\n+2019-11-07  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/addsub-signed-overflow-1.c: Expect lochi\n+\tinstructions to be used.\n+\t* gcc.target/s390/addsub-signed-overflow-2.c: Likewise.\n+\t* gcc.target/s390/mul-signed-overflow-1.c: Likewise.\n+\t* gcc.target/s390/mul-signed-overflow-2.c: Likewise.\n+\t* gcc.target/s390/vector/vec-scalar-cmp-1.c: Check for 32 and 64\n+\tbit variant of lochi.  Swap the values for the lochi's.\n+\t* gcc.target/s390/zvector/vec-cmp-1.c: Likewise.\n+\n 2019-11-07  Martin Jambor  <mjambor@suse.cz>\n \n \tPR lto/70929"}, {"sha": "143220d554149d620ecc7c1bedc4d085cdbf4e59", "filename": "gcc/testsuite/gcc.target/s390/addsub-signed-overflow-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-1.c?ref=163f23d21e5f2faee08163f2dcb363042b53ee1e", "patch": "@@ -79,3 +79,5 @@ main ()\n /* { dg-final { scan-assembler-not \"\\trisbg\" { target { lp64 } } } } */\n /* Just one for the ret != 6 comparison.  */\n /* { dg-final { scan-assembler-times \"ci\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tlochio\\t\" 6 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tlocghio\\t\" 6 { target lp64 } } } */"}, {"sha": "798e489cece5603ab8903b9d3d27787a495f05b4", "filename": "gcc/testsuite/gcc.target/s390/addsub-signed-overflow-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Faddsub-signed-overflow-2.c?ref=163f23d21e5f2faee08163f2dcb363042b53ee1e", "patch": "@@ -78,3 +78,5 @@ main ()\n /* { dg-final { scan-assembler-not \"\\trisbg\" { target { lp64 } } } } */\n /* Just one for the ret != 3 comparison.  */\n /* { dg-final { scan-assembler-times \"ci\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tlochio\\t\" 6 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tlocghio\\t\" 6 { target lp64 } } } */"}, {"sha": "fdf56d6e69550c6f3757fcbfe36a0b0b4a0d7ac5", "filename": "gcc/testsuite/gcc.target/s390/mul-signed-overflow-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmul-signed-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmul-signed-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmul-signed-overflow-1.c?ref=163f23d21e5f2faee08163f2dcb363042b53ee1e", "patch": "@@ -54,3 +54,5 @@ main ()\n /* { dg-final { scan-assembler-not \"\\trisbg\" { target { lp64 } } } } */\n /* Just one for the ret != 3 comparison.  */\n /* { dg-final { scan-assembler-times \"ci\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tlochio\\t\" 3 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tlocghio\\t\" 3 { target lp64 } } } */"}, {"sha": "d0088188aa26b8446e9ab277991b1f4b0426a370", "filename": "gcc/testsuite/gcc.target/s390/mul-signed-overflow-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmul-signed-overflow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmul-signed-overflow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmul-signed-overflow-2.c?ref=163f23d21e5f2faee08163f2dcb363042b53ee1e", "patch": "@@ -54,3 +54,5 @@ main ()\n /* { dg-final { scan-assembler-not \"\\trisbg\" { target { lp64 } } } } */\n /* Just one for the ret != 3 comparison.  */\n /* { dg-final { scan-assembler-times \"ci\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tlochio\\t\" 3 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tlocghio\\t\" 3 { target lp64 } } } */"}, {"sha": "03db4e0854fd87d41d99f4e52a11ba93aa33da76", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-scalar-cmp-1.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-scalar-cmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-scalar-cmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-scalar-cmp-1.c?ref=163f23d21e5f2faee08163f2dcb363042b53ee1e", "patch": "@@ -12,7 +12,8 @@ eq (double a, double b)\n   return a == b;\n }\n \n-/* { dg-final { scan-assembler \"eq:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochine\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"eq:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochie\\t%r2,1\" { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler \"eq:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlocghie\\t%r2,1\" { target lp64 } } } */\n \n int\n ne (double a, double b)\n@@ -23,7 +24,8 @@ ne (double a, double b)\n   return a != b;\n }\n \n-/* { dg-final { scan-assembler \"ne:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochie\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"ne:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochine\\t%r2,1\" { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler \"ne:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlocghine\\t%r2,1\" { target lp64 } } } */\n \n int\n gt (double a, double b)\n@@ -34,7 +36,8 @@ gt (double a, double b)\n   return a > b;\n }\n \n-/* { dg-final { scan-assembler \"gt:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinh\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"gt:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochih\\t%r2,1\" { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler \"gt:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlocghih\\t%r2,1\" { target lp64 } } } */\n \n int\n ge (double a, double b)\n@@ -45,7 +48,8 @@ ge (double a, double b)\n   return a >= b;\n }\n \n-/* { dg-final { scan-assembler \"ge:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinhe\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"ge:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochihe\\t%r2,1\" { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler \"ge:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlocghihe\\t%r2,1\" { target lp64 } } } */\n \n int\n lt (double a, double b)\n@@ -56,7 +60,8 @@ lt (double a, double b)\n   return a < b;\n }\n \n-/* { dg-final { scan-assembler \"lt:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinl\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"lt:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochil\\t%r2,1\" { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler \"lt:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlocghil\\t%r2,1\" { target lp64 } } } */\n \n int\n le (double a, double b)\n@@ -67,4 +72,5 @@ le (double a, double b)\n   return a <= b;\n }\n \n-/* { dg-final { scan-assembler \"le:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinle\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"le:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochile\\t%r2,1\" { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler \"le:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlocghile\\t%r2,1\" { target lp64 } } } */"}, {"sha": "7cd6d809ac930c44d3a82e74f8fa780c293f216d", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-cmp-1.c", "status": "modified", "additions": 48, "deletions": 24, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163f23d21e5f2faee08163f2dcb363042b53ee1e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-1.c?ref=163f23d21e5f2faee08163f2dcb363042b53ee1e", "patch": "@@ -8,166 +8,190 @@ all_eq_double (vector double a, vector double b)\n {\n \treturn vec_all_eq (a, b);\n }\n-/* { dg-final { scan-assembler-times all_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochie\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghie\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n all_ne_double (vector double a, vector double b)\n {\n \treturn vec_all_ne (a, b);\n }\n-/* { dg-final { scan-assembler-times all_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochile\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochinle\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghinle\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n all_gt_double (vector double a, vector double b)\n {\n \treturn vec_all_gt (a, b);\n }\n-/* { dg-final { scan-assembler-times all_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochie\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghie\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n all_lt_double (vector double a, vector double b)\n {\n \treturn vec_all_lt (a, b);\n }\n-/* { dg-final { scan-assembler-times all_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,0\\n\\tlochie\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlghi\\t%r2,0\\n\\tlocghie\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n all_ge_double (vector double a, vector double b)\n {\n \treturn vec_all_ge (a, b);\n }\n-/* { dg-final { scan-assembler-times all_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochie\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghie\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n all_le_double (vector double a, vector double b)\n {\n \treturn vec_all_le (a, b);\n }\n-/* { dg-final { scan-assembler-times all_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,0\\n\\tlochie\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlghi\\t%r2,0\\n\\tlocghie\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_eq_double (vector double a, vector double b)\n {\n \treturn vec_any_eq (a, b);\n }\n-/* { dg-final { scan-assembler-times any_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochinle\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochile\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghile\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_ne_double (vector double a, vector double b)\n {\n \treturn vec_any_ne (a, b);\n }\n-/* { dg-final { scan-assembler-times any_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochie\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochine\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghine\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_gt_double (vector double a, vector double b)\n {\n \treturn vec_any_gt (a, b);\n }\n-/* { dg-final { scan-assembler-times any_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochinle\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochile\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghile\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_lt_double (vector double a, vector double b)\n {\n \treturn vec_any_lt (a, b);\n }\n-/* { dg-final { scan-assembler-times any_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,1\\n\\tlochinle\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,0\\n\\tlochile\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlghi\\t%r2,0\\n\\tlocghile\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_ge_double (vector double a, vector double b)\n {\n \treturn vec_any_ge (a, b);\n }\n-/* { dg-final { scan-assembler-times any_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochinle\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochile\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghile\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_le_double (vector double a, vector double b)\n {\n \treturn vec_any_le (a, b);\n }\n-/* { dg-final { scan-assembler-times any_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,1\\n\\tlochinle\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,0\\n\\tlochile\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlghi\\t%r2,0\\n\\tlocghile\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n all_eq_int (vector int a, vector int b)\n {\n \treturn vec_all_eq (a, b);\n }\n-/* { dg-final { scan-assembler-times all_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochie\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghie\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n all_ne_int (vector int a, vector int b)\n {\n \treturn vec_all_ne (a, b);\n }\n-/* { dg-final { scan-assembler-times all_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochile\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochinle\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghinle\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n all_gt_int (vector int a, vector int b)\n {\n \treturn vec_all_gt (a, b);\n }\n-/* { dg-final { scan-assembler-times all_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochie\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghie\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n all_lt_int (vector int a, vector int b)\n {\n \treturn vec_all_lt (a, b);\n }\n-/* { dg-final { scan-assembler-times all_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,0\\n\\tlochie\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlghi\\t%r2,0\\n\\tlocghie\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n all_ge_int (vector int a, vector int b)\n {\n \treturn vec_all_ge (a, b);\n }\n-/* { dg-final { scan-assembler-times all_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,1\\n\\tlochile\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,0\\n\\tlochinle\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlghi\\t%r2,0\\n\\tlocghinle\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n all_le_int (vector int a, vector int b)\n {\n \treturn vec_all_le (a, b);\n }\n-/* { dg-final { scan-assembler-times all_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochile\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times all_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochinle\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times all_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghinle\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_eq_int (vector int a, vector int b)\n {\n \treturn vec_any_eq (a, b);\n }\n-/* { dg-final { scan-assembler-times any_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochinle\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochile\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghile\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_ne_int (vector int a, vector int b)\n {\n \treturn vec_any_ne (a, b);\n }\n-/* { dg-final { scan-assembler-times any_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochie\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochine\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghine\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_gt_int (vector int a, vector int b)\n {\n \treturn vec_any_gt (a, b);\n }\n-/* { dg-final { scan-assembler-times any_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochinle\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochile\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghile\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_lt_int (vector int a, vector int b)\n {\n \treturn vec_any_lt (a, b);\n }\n-/* { dg-final { scan-assembler-times any_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,1\\n\\tlochinle\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,0\\n\\tlochile\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlghi\\t%r2,0\\n\\tlocghile\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_ge_int (vector int a, vector int b)\n {\n \treturn vec_any_ge (a, b);\n }\n-/* { dg-final { scan-assembler-times any_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,1\\n\\tlochie\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlhi\\t%r2,0\\n\\tlochine\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tlghi\\t%r2,0\\n\\tlocghine\\t%r2,1 1 { target lp64 } } } */\n \n int __attribute__((noinline,noclone))\n any_le_int (vector int a, vector int b)\n {\n \treturn vec_any_le (a, b);\n }\n-/* { dg-final { scan-assembler-times any_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,1\\n\\tlochie\\t%r2,0 1 } } */\n+/* { dg-final { scan-assembler-times any_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlhi\\t%r2,0\\n\\tlochine\\t%r2,1 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times any_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tlghi\\t%r2,0\\n\\tlocghine\\t%r2,1 1 { target lp64 } } } */\n "}]}