{"sha": "ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E3N2I5ZTEyM2YyYTg4OTkwOWRhMmU3YjZjYjZjNWRkODNhN2ZmYw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-02-13T05:38:39Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-02-13T05:38:39Z"}, "message": "dbg_mlc.c (GC_debug_generic_malloc): Removed.\n\n\t* dbg_mlc.c (GC_debug_generic_malloc): Removed.\n\n\t* sparc_mach_dep.S: Rename from sparc_mach_dep.s as it is a\n\tpreprocessor file.\n\t* mips_sgi_mach_dep.S: Likewise.\n\t* Makefile.am: Update for above changes.\n\t* Makefile.in: Rebuilt.\n\nFrom-SVN: r49720", "tree": {"sha": "79f2aaa7627d8e3d1e0b25a205cabcf95160d735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79f2aaa7627d8e3d1e0b25a205cabcf95160d735"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/comments", "author": null, "committer": null, "parents": [{"sha": "0ec4e2a87f7a535d82c608aaa80a30f79a91130a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec4e2a87f7a535d82c608aaa80a30f79a91130a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec4e2a87f7a535d82c608aaa80a30f79a91130a"}], "stats": {"total": 155, "additions": 122, "deletions": 33}, "files": [{"sha": "a4fe942c62a6180b44a0bdd28cdb9abf9bbec9d5", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "patch": "@@ -1,3 +1,13 @@\n+2002-02-13  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* dbg_mlc.c (GC_debug_generic_malloc): Removed.\n+\t\n+\t* sparc_mach_dep.S: Rename from sparc_mach_dep.s as it is a \n+\tpreprocessor file.\n+\t* mips_sgi_mach_dep.S: Likewise.\n+\t* Makefile.am: Update for above changes.\n+\t* Makefile.in: Rebuilt.\n+\n 2002-02-12  Richard Henderson  <rth@redhat.com>\n \n \t* configure.in: Re-apply 2001-06-26 configure change."}, {"sha": "2876ece464b16eb62bc1a8ba129c94925ccdafa3", "filename": "boehm-gc/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.am?ref=ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "patch": "@@ -39,8 +39,8 @@ libgcjgc_la_DEPENDENCIES = @addobjs@\n libgcjgc_la_LDFLAGS = -version-info 1:1:0 -rpath $(toolexeclibdir)\n \n EXTRA_libgcjgc_la_SOURCES = alpha_mach_dep.s \\\n-mips_sgi_mach_dep.s mips_ultrix_mach_dep.s powerpc_macosx_mach_dep.s \\\n-rs6000_mach_dep.s sparc_mach_dep.s sparc_netbsd_mach_dep.s \\\n+mips_sgi_mach_dep.S mips_ultrix_mach_dep.s powerpc_macosx_mach_dep.s \\\n+rs6000_mach_dep.s sparc_mach_dep.S sparc_netbsd_mach_dep.s \\\n sparc_sunos4_mach_dep.s ia64_save_regs_in_stack.s\n \n AM_CXXFLAGS = @GC_CFLAGS@"}, {"sha": "740883c444479b52dba7891f425d92368e34a65d", "filename": "boehm-gc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.in?ref=ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "patch": "@@ -124,8 +124,8 @@ libgcjgc_la_DEPENDENCIES = @addobjs@\n libgcjgc_la_LDFLAGS = -version-info 1:1:0 -rpath $(toolexeclibdir)\n \n EXTRA_libgcjgc_la_SOURCES = alpha_mach_dep.s \\\n-mips_sgi_mach_dep.s mips_ultrix_mach_dep.s powerpc_macosx_mach_dep.s \\\n-rs6000_mach_dep.s sparc_mach_dep.s sparc_netbsd_mach_dep.s \\\n+mips_sgi_mach_dep.S mips_ultrix_mach_dep.s powerpc_macosx_mach_dep.s \\\n+rs6000_mach_dep.s sparc_mach_dep.S sparc_netbsd_mach_dep.s \\\n sparc_sunos4_mach_dep.s ia64_save_regs_in_stack.s\n \n "}, {"sha": "57de3dab28c59b151492f9dc2699885dcf190518", "filename": "boehm-gc/dbg_mlc.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2Fdbg_mlc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2Fdbg_mlc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fdbg_mlc.c?ref=ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "patch": "@@ -429,35 +429,6 @@ void GC_start_debugging()\n     return (GC_store_debug_info(result, (word)lb, s, (word)i));\n }\n \n-# ifdef __STDC__\n-    GC_PTR GC_debug_generic_malloc(size_t lb, int k, GC_EXTRA_PARAMS)\n-# else\n-    GC_PTR GC_debug_malloc(lb, k, s, i)\n-    size_t lb;\n-    int k;\n-    char * s;\n-    int i;\n-#   ifdef GC_ADD_CALLER\n-\t--> GC_ADD_CALLER not implemented for K&R C\n-#   endif\n-# endif\n-{\n-    GC_PTR result = GC_generic_malloc(lb + DEBUG_BYTES, k);\n-    \n-    if (result == 0) {\n-        GC_err_printf1(\"GC_debug_malloc(%ld) returning NIL (\",\n-        \t       (unsigned long) lb);\n-        GC_err_puts(s);\n-        GC_err_printf1(\":%ld)\\n\", (unsigned long)i);\n-        return(0);\n-    }\n-    if (!GC_debugging_started) {\n-    \tGC_start_debugging();\n-    }\n-    ADD_CALL_CHAIN(result, ra);\n-    return (GC_store_debug_info(result, (word)lb, s, (word)i));\n-}\n-\n # ifdef DBG_HDRS_ALL\n /* \n  * An allocation function for internal use."}, {"sha": "bae9b5ebfe4117be1c262d8239eb14cbce5eb2ad", "filename": "boehm-gc/mips_sgi_mach_dep.S", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2Fmips_sgi_mach_dep.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2Fmips_sgi_mach_dep.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fmips_sgi_mach_dep.S?ref=ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "patch": "@@ -0,0 +1,41 @@\n+#include <sys/regdef.h>\n+#include <sys/asm.h>\n+\n+# define call_push(x)     move    $4,x;    jal     GC_push_one\n+\n+    .option pic2\n+    .text\n+/* Mark from machine registers that are saved by C compiler */\n+#   define FRAMESZ 32\n+#   define RAOFF FRAMESZ-SZREG\n+#   define GPOFF FRAMESZ-(2*SZREG)\n+    NESTED(GC_push_regs, FRAMESZ, ra)\n+    .mask 0x80000000,-SZREG\t# inform debugger of saved ra loc\n+    move \tt0,gp\n+    SETUP_GPX(t8)\n+    PTR_SUBU\tsp,FRAMESZ\n+#   ifdef SETUP_GP64\n+      SETUP_GP64(GPOFF, GC_push_regs)\n+#   endif\n+    SAVE_GP(GPOFF)\n+    REG_S \tra,RAOFF(sp)\n+#   if (_MIPS_SIM == _MIPS_SIM_ABI32)\n+    \tcall_push($2)\n+    \tcall_push($3)\n+#   endif\n+    call_push($16)\n+    call_push($17)\n+    call_push($18)\n+    call_push($19)\n+    call_push($20)\n+    call_push($21)\n+    call_push($22)\n+    call_push($23)\n+    call_push($30)\n+    REG_L\tra,RAOFF(sp)\n+#   ifdef RESTORE_GP64\n+      RESTORE_GP64\n+#   endif\n+    PTR_ADDU\tsp,FRAMESZ\n+    j\t\tra\n+    .end    GC_push_regs"}, {"sha": "9f3a4b0a99d8e82b9d428ddcd2d33bef985c1561", "filename": "boehm-gc/sparc_mach_dep.S", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2Fsparc_mach_dep.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc/boehm-gc%2Fsparc_mach_dep.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fsparc_mach_dep.S?ref=ca77b9e123f2a889909da2e7b6cb6c5dd83a7ffc", "patch": "@@ -0,0 +1,67 @@\n+!\tSPARCompiler 3.0 and later apparently no longer handles\n+!\tasm outside functions.  So we need a separate .s file\n+!\tThis is only set up for SunOS 5, not SunOS 4.\n+!\tAssumes this is called before the stack contents are\n+!\texamined.\n+\n+\t.seg \t\"text\"\n+\t.globl\tGC_save_regs_in_stack\n+\t.globl \tGC_push_regs\n+GC_save_regs_in_stack:\n+GC_push_regs:\n+#if defined(__arch64__) || defined(__sparcv9)\n+\tsave\t%sp,-128,%sp\n+\tflushw\n+\tret\n+\t  restore %sp,2047+128,%o0\n+#else /* 32 bit SPARC */\n+\tta\t0x3   ! ST_FLUSH_WINDOWS\n+\tmov\t%sp,%o0\n+\tretl\n+\tnop\n+#endif /* 32 bit SPARC */\n+.GC_save_regs_in_stack_end:\n+\t.size GC_save_regs_in_stack,.GC_save_regs_in_stack_end-GC_save_regs_in_stack\n+\t\n+\n+\t.globl\tGC_clear_stack_inner\n+GC_clear_stack_inner:\n+#if defined(__arch64__) || defined(__sparcv9)\n+\tmov %sp,%o2\t\t! Save sp\n+\tadd %sp,2047-8,%o3\t! p = sp+bias-8\n+\tadd %o1,-2047-192,%sp\t! Move sp out of the way,\n+  \t\t\t\t! so that traps still work.\n+  \t\t\t\t! Includes some extra words\n+  \t\t\t\t! so we can be sloppy below.\n+loop:\n+\tstx %g0,[%o3]\t\t! *(long *)p = 0\n+\tcmp %o3,%o1\n+\tbgu,pt %xcc, loop\t! if (p > limit) goto loop\n+          asm(\"add %o3,-8,%o3\t! p -= 8 (delay slot)\n+\tretl\n+    \t  mov %o2,%sp\t\t! Restore sp., delay slot\t\n+#else  /* 32 bit SPARC */\n+\tmov\t%sp,%o2\t\t! Save sp\n+\tadd\t%sp,-8,%o3\t! p = sp-8\n+\tclr\t%g1\t\t! [g0,g1] = 0\n+\tadd\t%o1,-0x60,%sp\t! Move sp out of the way,\n+\t\t\t\t! so that traps still work.\n+\t\t\t\t! Includes some extra words\n+\t\t\t\t! so we can be sloppy below.\n+loop:\n+\tstd\t%g0,[%o3]\t! *(long long *)p = 0\n+\tcmp\t%o3,%o1\n+\tbgu\tloop\t\t! if (p > limit) goto loop\n+\t  add\t%o3,-8,%o3\t! p -= 8 (delay slot)\n+\tretl\n+\t  mov\t%o2,%sp\t\t! Restore sp., delay slot\n+#endif  /* 32 bit SPARC */\n+.GC_clear_stack_inner_end:\n+      \t.size GC_clear_stack_inner,.GC_clear_stack_inner_end-GC_clear_stack_inner\n+\n+\t\n+\t\t\n+\t\t\n+\t\t\n+\t\t\n+\t"}]}