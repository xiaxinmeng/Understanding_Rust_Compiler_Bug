{"sha": "a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFmMzAwYzBmMTljMTdlMGIxN2ZlODAxN2JjM2NiNzlmMjMzMzdiZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-23T02:05:19Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-23T02:05:19Z"}, "message": "ChangeLog.0, [...]: Fix spelling errors.\n\n\t* ChangeLog.0, ChangeLog.2, ChangeLog.3, ChangeLog.4, ChangeLog,\n\tFSFChangeLog.10, c-decl.c, cppfiles.c, cppinit.c, cpplex.c,\n\tcpplib.c, cppmain.c, cse.c, df.c, diagnostic.c, dominance.c,\n\tdwarf2out.c, dwarfout.c, emit-rtl.c, errors.c, except.c, except.h,\n\texplow.c, function.c, gcse.c, genrecog.c, predict.c, regmove.c,\n\tsched-rgn.c, ssa-ccp.c, stmt.c, toplev.c: Fix spelling errors.\n\nFrom-SVN: r47279", "tree": {"sha": "827acc65803788d44d036826826c0366d5c3edc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/827acc65803788d44d036826826c0366d5c3edc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "754d92990a56ddb0319ecd360eed752684423f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754d92990a56ddb0319ecd360eed752684423f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754d92990a56ddb0319ecd360eed752684423f0a"}], "stats": {"total": 173, "additions": 90, "deletions": 83}, "files": [{"sha": "e497f5c87b47c53f4d51313f21158f8abc1f6636", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -1,5 +1,12 @@\n 2001-11-23  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n+\t* ChangeLog.0, ChangeLog.2, ChangeLog.3, ChangeLog.4, ChangeLog,\n+\tFSFChangeLog.10, c-decl.c, cppfiles.c, cppinit.c, cpplex.c,\n+\tcpplib.c, cppmain.c, cse.c, df.c, diagnostic.c, dominance.c,\n+\tdwarf2out.c, dwarfout.c, emit-rtl.c, errors.c, except.c, except.h,\n+\texplow.c, function.c, gcse.c, genrecog.c, predict.c, regmove.c,\n+\tsched-rgn.c, ssa-ccp.c, stmt.c, toplev.c: Fix spelling errors.\n+\n \t* predict.c, reg-stack.c: Fix spelling errors.\n \n 2001-10-09  Andrew Haley  <aph@redhat.com>\n@@ -1108,7 +1115,7 @@ Wed Nov 14 14:17:05 CET 2001  Jan Hubicka  <jh@suse.cz>\n \t* output.h (alter_subreg): Update prototype.\n \t* sdbout.c (sdbout_symbol): Update call of alter_subreg.\n \t* simplify-rtx.c (simplify_subreg): Copy ORIGINAL_REGNO.\n-\t* Makefile.in (final.o): Add depdendancy on expr.h\n+\t* Makefile.in (final.o): Add dependency on expr.h\n \n Wed Nov 14 06:37:54 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n@@ -1591,7 +1598,7 @@ Sat Nov 10 08:50:50 2001  Jeffrey A Law  (law@cygnus.com)\n \t* config/ia64/hpux.h (TARGET_VERSION): Likewise.\n \t* config/ia64/linux.h (TARGET_VERSION): Likewise.\n \t(FUNCTION_PROFILER): Remove.\n-\t* config/ia64/ia64.h (FUNCTION_PROFILER): Update defintion using the\n+\t* config/ia64/ia64.h (FUNCTION_PROFILER): Update definition using the\n \tversion in config/ia64/linux.h.\n \t* config/ia64/freebsd.h: New file.\n \t* config/freebsd.h: Tidy up.\n@@ -2347,7 +2354,7 @@ Tue Nov  6 09:21:34 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n Mon Nov  5 16:15:25 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n-\t* Makefile.in (bb-reoder.o): Add dependency on cfglayout.h;\n+\t* Makefile.in (bb-reorder.o): Add dependency on cfglayout.h;\n \tremove unneeded dependencies;\n \t(cfglayout.o): New.\n \t* cfglayout.c, cfglayout.h: New files; break out from ...\n@@ -7398,7 +7405,7 @@ Tue Sep 11 11:37:52 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t* cppinit.c (cpp_create_reader): Set up the token runs.\n \t* cpplex.c (lex_directive, lex_token, next_tokenrun): New.\n \t(lex_token): New internalised version of _cpp_lex_token.  Don't\n-\thandle directives or the multiple include opimisation here any\n+\thandle directives or the multiple include optimization here any\n \tmore.  Simply lex a token.\n \t* cpplib.c (run_directive): Clear bol.\n \t(_cpp_pop_buffer): Set bol.\n@@ -7528,7 +7535,7 @@ Mon Sep 10 14:21:26 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(make_reorder_chain_1): Do not use BB indexes.\n \t(label_for_bb): Likewise; set BB for new insn.\n \t(emit_jump_to_block_after): Likewise.\n-\t(fixup_reoder_chain): Sanity check that all basic blocks\n+\t(fixup_reorder_chain): Sanity check that all basic blocks\n \tare chained; verify newly created insn chain; remove\n \tundocnitional jump simplifying; Do not use BB indexes;\n \tproperly initialize count and frequency information;\n@@ -9396,7 +9403,7 @@ Mon Aug 20 01:44:50 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \tUpdate all callers.\n \n \t* final.c (end_final): Abort profile block generation if we\n-\thavn't layed it out properly.\n+\thaven't layed it out properly.\n \t* output.h (assemble_eh_integer): Remove stale decl.\n \t* varasm.c (assemble_zeros): Tidy; use assemble_integer.\n \t(min_align): New.\n@@ -9658,7 +9665,7 @@ Wed Aug 15 14:24:22 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(propagate_freq): Use EDGE_DFS_BACK to detect irreducible regions.\n \t(estimate_bb_frequencies): Call mark_dfs_back_edges.\n \n-\t* i386.c (ix86_agi_depdendant): Lea causes AGI only on the Pentium\n+\t* i386.c (ix86_agi_dependant): Lea causes AGI only on the Pentium\n \t(ix86_adjust_cost): Teach scheduler that latency to load operand can\n \tbe masked.\n "}, {"sha": "5cd3fdb47d958a4b95ef90fb7efeb17c43a2843e", "filename": "gcc/ChangeLog.0", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FChangeLog.0", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FChangeLog.0", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.0?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -1185,7 +1185,7 @@ Thu Jun 25 15:08:16 1998  Mark Mitchell  <mark@markmitchell.com>\n \t* c-common.c (c_get_alias_set): New function.\n \t* c-decl.c (init_decl_processing): Set lang_get_alias_set.\n \n-\t* expr.c (protect_from_queue): Propogage alias sets.\n+\t* expr.c (protect_from_queue): Propagate alias sets.\n \t(expand_assignment): Calculate alias set for new MEMs.\n \t(expand_expr): Likewise.\n \t* function.c (put_var_into_stack): Likewise."}, {"sha": "95138e6bda3393fa6862c29458516a3008038f93", "filename": "gcc/ChangeLog.2", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.2?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -821,7 +821,7 @@ Tue Dec 14 12:07:29 MET 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \t* regclass.c  (record_reg_classes): Do not do the copying preferrencing\n \twhen source does not die.\n \n-\t* regclass.c (record_reg_classes): Handle INOUT operands propertly.\n+\t* regclass.c (record_reg_classes): Handle INOUT operands properly.\n \n 1999-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -3199,9 +3199,9 @@ Wed Nov  3 14:51:59 1999  Mark P. Mitchell  <mark@codesourcery.com>\n \t* rtl.h (renumber_insns): New function.\n \t(remove_unnecessary_notes): Likewise.\n \t* emit-rtl.c (renumber_insns): Define.\n-\t(remove_unncessary_notes): Likewise.\n+\t(remove_unnecessary_notes): Likewise.\n \t* toplev.c (rest_of_compilation): Remove dead code.\n-\tUse renumber_insns and remove_unncessary_notes.\n+\tUse renumber_insns and remove_unnecessary_notes.\n \n \t* gcse.c (struct null_pointer_info): New type.\n \t(get_bitmap_width): New function.\n@@ -5729,7 +5729,7 @@ Sat Oct  9 12:18:16 1999  Richard Henderson  <rth@cygnus.com>\n \t(life_analysis): Give life_analysis_1 PROP flags.\n \t(verify_wide_reg_1, verify_wide_reg): New.\n \t(verify_local_live_at_start): New.\n-\t(update_life_info): Rewrite to call into propogate_block.\n+\t(update_life_info): Rewrite to call into propagate_block.\n \t(mark_reg): New.\n \t(mark_regs_live_at_end): After reload, if epilogue as rtl,\n \talways mark stack pointer.  Conditionally mark PIC register.\n@@ -10985,7 +10985,7 @@ Tue Aug 10 17:19:02 1999  Jim Wilson  <wilson@cygnus.com>\n \n Tue Aug 10 10:47:42 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n \n-\t* except.h (eh_nesting_info): Add new structure defintion.\n+\t* except.h (eh_nesting_info): Add new structure definition.\n \t(init_eh_nesting_info, free_eh_nesting_info): Add function prototypes.\n \t(reachable_handlers, update_rethrow_references): Add function\n \tprototypes.\n@@ -14401,7 +14401,7 @@ Thu May 20 10:00:42 1999  Stephen L Moshier  <moshier@world.std.com>\n \n Thu May 20 09:58:57 1999  Jan Hubicka <hubicka@freesoft.cz>\n \n-\t* function.c (assign_stack_local): Align stack slot propertly.\n+\t* function.c (assign_stack_local): Align stack slot properly.\n \t(assign_outer_stack_local): Likewise.\n \n Thu May 20 10:38:43 1999  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "5cbfcaada1ded6cefd2534e9dea1c9735bd2455b", "filename": "gcc/ChangeLog.3", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FChangeLog.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FChangeLog.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.3?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -220,8 +220,8 @@ Tue Jun 27 12:14:12 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t(attribute pent_pair): Compute using pent_prefix.\n \t(all insn patterns): Set mode,modrm and immediate_length attributes where\n \tneeded.\n-\t(cmpsi patterns): Compute sizes propertly for test instruction.\n-\t(movsi, movhi patterns): Compute sizes propertly for eax shortcuts.\n+\t(cmpsi patterns): Compute sizes properly for test instruction.\n+\t(movsi, movhi patterns): Compute sizes properly for eax shortcuts.\n \t(movstricthi_xor, movstrictqi_xor): New patterns.\n \t(andsi/andhi): Use splitters to generate xor instructions.\n \t(xorqi_ext_1): New pattern.\n@@ -5186,7 +5186,7 @@ Sat Apr 29 01:18:45 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n Sat Apr 29 01:15:27 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n-\t* calls.c (calls_function_1):  Propertly handle TREE_LIST expressions;\n+\t* calls.c (calls_function_1):  Properly handle TREE_LIST expressions;\n \tuse special_function_p to detect alloca.\n \n Fri Apr 28 16:30:33 2000  Marc Espie <espie@cvs.openbsd.org>\n@@ -6789,7 +6789,7 @@ Wed Apr 12 15:54:11 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t!HAVE_cmpstrsi, do libcall when gen_strcmpsi fails.\n \n \t* calls.c (expand_call): Do NO_DEFER_POP unconditionally once\n-\tstack is propertly aligned; add sanity checking for aligned\n+\tstack is properly aligned; add sanity checking for aligned\n \tstack pointer.\n \t(expand_library_call_value_1): Add sanity checking for aligned\n \tstack pointer.\n@@ -8325,7 +8325,7 @@ Mon Apr  3 00:02:59 2000  Brad Lucier <lucier@math.purdue.edu>\n \t* toplev.c (rtl_dump, jump_opt_dump, etc): Remove.\n \t(struct dump_file_info, enum dump_file_index, dump_file): New.\n \t(open_dump_file): Take a dump_file_index not a suffix, and a decl\n-\tnot a string.  Clean out file if we havn't yet done so.  Do nothing\n+\tnot a string.  Clean out file if we haven't yet done so.  Do nothing\n \tif the dump isn't enabled.\n \t(close_dump_file): Do nothing if the dump isn't open.  Dump\n \tgraph data if requested.\n@@ -9649,7 +9649,7 @@ Sun Mar 19 13:27:30 2000  Hans-Peter Nilsson  <hp@axis.com>\n \n 2000-03-18  Mark Mitchell  <mark@codesourcery.com>\n \n-\t* emit-rtl.c (remove_unncessary_notes): Check that all\n+\t* emit-rtl.c (remove_unnecessary_notes): Check that all\n \tNOTE_INSN_BLOCK_BEG and NOTE_INSN_BLOCK_END notes have an\n \tassociated NOTE_BLOCK.\n \t* function.h (identify_blocks): Update comments.\n@@ -11942,7 +11942,7 @@ Sat Mar  4 11:32:30 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* stmt.c (is_body_block): Move...\n \t* dwarfout.c, dwarf2out.c: ...from here.\n \t* tree.h: Declare it.\n-\t* emit-rtl.c (remove_unncessary_notes): Don't remove the body block.\n+\t* emit-rtl.c (remove_unnecessary_notes): Don't remove the body block.\n \t* final.c (final_start_function): Do call remove_unnecessary_notes\n \twhen scheduling.\n \n@@ -11990,7 +11990,7 @@ Sat Mar  4 11:32:30 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tremove_unnecessary_notes.\n \t(debug_ignore_block): New fn.\n \t* toplev.h: Declare it.\n-\t* emit-rtl.c (remove_unncessary_notes): Call it.\n+\t* emit-rtl.c (remove_unnecessary_notes): Call it.\n \t* dwarf2out.c (dwarf2out_ignore_block): New fn.\n \t* dwarf2out.h: Declare it.\n \t* final.c (final_start_function): Don't call remove_unnecessary_notes\n@@ -12408,7 +12408,7 @@ Mon Feb 28 11:34:43 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n 2000-02-27  Mark Mitchell  <mark@codesourcery.com>\n \n-\t* emit-rtl.c (remove_unncessary_notes): Remove notes for empty\n+\t* emit-rtl.c (remove_unnecessary_notes): Remove notes for empty\n \tblocks.\n \t* final.c (next_block_index): Remove.\n \t(max_block_depth): Likewise.\n@@ -13327,7 +13327,7 @@ Sat Feb 12 01:44:26 MET 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* config/arm/arm.c (arm_init_cumulative_args); New function:\n \tInitlaise the CUMULATIE_ARGS strcuture for a function\n-\tdefintion.\n+\tdefinition.\n \t(arm_function_arg): New function: Determine where to place a\n \tfunction's argument.  Also handles deciding the function's\n \tcall cookie."}, {"sha": "129c1f9f5c5b27d6b2d086ec18f6e104d28a4b0e", "filename": "gcc/ChangeLog.4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FChangeLog.4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FChangeLog.4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.4?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -4104,7 +4104,7 @@ Sat Nov 11 18:41:20 2000  Mark P Mitchell  <mark@codesourcery.com>\n \t(cpp_get_token): Handle empty macro expansions.  Don't worry\n \tabout CPP_PLACEMARKERs.\n \t(_cpp_create_definition): Empty macros are now empty.\n-\t(cpp_macro_defintion): Don't special case empty macros.\n+\t(cpp_macro_definition): Don't special case empty macros.\n \t* scan-decls.c: Don't bother with CPP_PLACEMARKERs.\n \t* c-lex.c: Similarly.\n \n@@ -10131,7 +10131,7 @@ Tue Aug 29 22:29:58 2000  Denis Chertykov  <denisc@overta.ru> & Marek Michalkiew\n \t(adjust_insn_length): Use output_movsisf, output_movqi,\n \toutput_movhi for insn length adjusting.\n \t(reg_unused_after): Use dead_or_set_p.\n-\t(preferred_reload_class): Now havn't any restriction.\n+\t(preferred_reload_class): Now haven't any restriction.\n \t(reg_was_0): New function.\n \t(io_address_p): Likewise.\n \t(const_int_pow2_p): Likewise."}, {"sha": "0fea5530d8c09b3c3454c76d0d08504be6242ec1", "filename": "gcc/FSFChangeLog.10", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FFSFChangeLog.10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2FFSFChangeLog.10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.10?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -4184,7 +4184,7 @@ Thu Nov 30 12:27:22 1995  Michael Meissner  <meissner@tiktok.cygnus.com>\n \t(ASM_SPEC): Pass appropriate -mxxx switches to the assembler based\n \ton the -mcpu=xxx options.\n \t(ASM_OUTPUT_INT): Move here from eabi.h.\n-\t(ENCODE_SECTION_INFO): If -mcall-{nt,aixdesc} add approriate magic\n+\t(ENCODE_SECTION_INFO): If -mcall-{nt,aixdesc} add appropriate magic\n \tso function name has two or one leading periods.\n \t(ASM_OUTPUT_SOURCE_LINE): Delete, use version in svr4.h.\n \t(trampoline macros): Call trampoline functions in rs6000.c."}, {"sha": "94d1ca0a957a04d271af2710e995202f0d44a900", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -6808,7 +6808,7 @@ c_expand_body (fndecl, nested_p, can_defer_p)\n              function could not be deferred.  */\n \t  && defer_fn (fndecl))\n \t{\n-\t  /* Let the back-end know that this funtion exists.  */\n+\t  /* Let the back-end know that this function exists.  */\n \t  (*debug_hooks->deferred_inline_function) (fndecl);\n           timevar_pop (TV_INTEGRATION);\n \t  return;"}, {"sha": "1fb357d642acee6d8dea183525841878482d07a7", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -648,7 +648,7 @@ handle_missing_header (pfile, fname, angle_brackets)\n      we can still produce correct output.  Otherwise, we can't produce\n      correct output, because there may be dependencies we need inside\n      the missing file, and we don't know what directory this missing\n-     file exists in.  FIXME: Use a future cpp_diagnotic_with_errno ()\n+     file exists in.  FIXME: Use a future cpp_diagnostic_with_errno ()\n      for both of these cases.  */\n   else if (CPP_PRINT_DEPS (pfile) && ! print_dep)\n     cpp_warning (pfile, \"%s: %s\", fname, xstrerror (errno));"}, {"sha": "2d873a0e6ada4d4834f453f71345b944dcf96619", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -1112,7 +1112,7 @@ cpp_finish (pfile)\n {\n   /* cpplex.c leaves the final buffer on the stack.  This it so that\n      it returns an unending stream of CPP_EOFs to the client.  If we\n-     popped the buffer, we'd derefence a NULL buffer pointer and\n+     popped the buffer, we'd dereference a NULL buffer pointer and\n      segfault.  It's nice to allow the client to do worry-free excess\n      cpp_get_token calls.  */\n   while (pfile->buffer)"}, {"sha": "924863f1fcac4660d920b3f10c49a02cab83792e", "filename": "gcc/cpplex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -292,7 +292,7 @@ skip_block_comment (pfile)\n \t    break;\n \n \t  /* Warn about potential nested comments, but not if the '/'\n-\t     comes immediately before the true comment delimeter.\n+\t     comes immediately before the true comment delimiter.\n \t     Don't bother to get it right across escaped newlines.  */\n \t  if (CPP_OPTION (pfile, warn_comments)\n \t      && buffer->cur + 1 < buffer->rlimit\n@@ -817,7 +817,7 @@ _cpp_temp_token (pfile)\n \n /* Lex a token into RESULT (external interface).  Takes care of issues\n    like directive handling, token lookahead, multiple include\n-   opimisation and skipping.  */\n+   optimization and skipping.  */\n const cpp_token *\n _cpp_lex_token (pfile)\n      cpp_reader *pfile;"}, {"sha": "324c7b21c4d861bf44876f025029cc1c85e35681", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -352,7 +352,7 @@ _cpp_handle_directive (pfile, indented)\n \t does not cause '#define foo bar' to get executed when\n \t compiled with -save-temps, we recognize directives in\n \t -fpreprocessed mode only if the # is in column 1.  cppmacro.c\n-\t puts a space in fron of any '#' at the start of a macro.  */\n+\t puts a space in front of any '#' at the start of a macro.  */\n       if (CPP_OPTION (pfile, preprocessed)\n \t  && (indented || !(dir->flags & IN_I)))\n \t{\n@@ -790,7 +790,7 @@ do_line (pfile)\n \n /* Arrange the file_change callback.  pfile->line has changed to\n    FILE_LINE of TO_FILE, for reason REASON.  SYSP is 1 for a system\n-   header, 2 for a sytem header that needs to be extern \"C\" protected,\n+   header, 2 for a system header that needs to be extern \"C\" protected,\n    and zero otherwise.  */\n void\n _cpp_do_file_change (pfile, reason, to_file, file_line, sysp)"}, {"sha": "20a4a6d0e6cd31389f1424decfb355d0fa01e795", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -76,7 +76,7 @@ main (argc, argv)\n {\n   general_init (argv[0]);\n \n-  /* Contruct a reader with default language GNU C89.  */\n+  /* Construct a reader with default language GNU C89.  */\n   pfile = cpp_create_reader (CLK_GNUC89);\n   options = cpp_get_options (pfile);\n   "}, {"sha": "54afcdd9ef0e4176b190f631adb7886cb0a14312", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -728,7 +728,7 @@ approx_reg_cost_1 (xp, data)\n \n /* Return an estimate of the cost of the registers used in an rtx.\n    This is mostly the number of different REG expressions in the rtx;\n-   however for some excecptions like fixed registers we use a cost of\n+   however for some exceptions like fixed registers we use a cost of\n    0.  If any other hard register reference occurs, return MAX_COST.  */\n \n static int\n@@ -905,7 +905,7 @@ rtx_cost (x, outer_code)\n }\n \f\n /* Return cost of address expression X.\n-   Expect that X is propertly formed address reference.  */\n+   Expect that X is properly formed address reference.  */\n \n int\n address_cost (x, mode)\n@@ -4132,7 +4132,7 @@ fold_rtx (x, insn)\n \t     CONST_INT, see if we can find a register equivalent to the\n \t     positive constant.  Make a MINUS if so.  Don't do this for\n \t     a non-negative constant since we might then alternate between\n-\t     chosing positive and negative constants.  Having the positive\n+\t     choosing positive and negative constants.  Having the positive\n \t     constant previously-used is the more common case.  Be sure\n \t     the resulting constant is non-negative; if const_arg1 were\n \t     the smallest negative number this would overflow: depending"}, {"sha": "9bd0ad2dc1ec0731df5c13061fc591fb99d2d52c", "filename": "gcc/df.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -954,8 +954,8 @@ df_def_record_1 (df, x, bb, insn)\n \t || GET_CODE (dst) == SIGN_EXTRACT\n \t || read_modify_subreg_p (dst))\n     {\n-      /* Strict low part allways contains SUBREG, but we don't want to make\n-\t it appear outside, as whole register is allways considered.  */\n+      /* Strict low part always contains SUBREG, but we don't want to make\n+\t it appear outside, as whole register is always considered.  */\n       if (GET_CODE (dst) == STRICT_LOW_PART)\n \t{\n \t  loc = &XEXP (dst, 0);\n@@ -1334,7 +1334,7 @@ df_bb_reg_def_chain_create (df, bb)\n   /* Perhaps the defs should be sorted using a depth first search\n      of the CFG (or possibly a breadth first search).  We currently\n      scan the basic blocks in reverse order so that the first defs\n-     apprear at the start of the chain.  */\n+     appear at the start of the chain.  */\n \n   for (insn = bb->end; insn && insn != PREV_INSN (bb->head);\n        insn = PREV_INSN (insn))\n@@ -2531,7 +2531,7 @@ df_insn_mem_replace (df, bb, insn, mem, reg)\n   args.replacement = reg;\n   args.modified = 0;\n \n-  /* Seach and replace all matching mems within insn.  */\n+  /* Search and replace all matching mems within insn.  */\n   for_each_rtx (&insn, df_rtx_mem_replace, &args);\n \n   if (args.modified)"}, {"sha": "417e8b31f38c9d18c214f2d0ef0d87c0495811a7", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -175,7 +175,7 @@ diagnostic_initialize (context)\n   diagnostic_finalizer (context) = default_diagnostic_finalizer;\n }\n \n-/* Returns true if BUFFER is in line-wrappind mode.  */\n+/* Returns true if BUFFER is in line-wrapping mode.  */\n \n int\n output_is_line_wrapping (buffer)\n@@ -202,7 +202,7 @@ set_real_maximum_length (buffer)\n {\n   /* If we're told not to wrap lines then do the obvious thing.  In case\n    we'll emit prefix only once per diagnostic message, it is appropriate\n-  not to increase unncessarily the line-length cut-off.  */\n+  not to increase unnecessarily the line-length cut-off.  */\n   if (! output_is_line_wrapping (buffer)\n       || diagnostic_prefixing_rule (buffer) == DIAGNOSTICS_SHOW_PREFIX_ONCE\n       || diagnostic_prefixing_rule (buffer) == DIAGNOSTICS_SHOW_PREFIX_NEVER)\n@@ -547,7 +547,7 @@ wrap_text (buffer, start, end)\n   \n   while (start != end)\n     {\n-      /* Dump anything bodered by whitespaces.  */ \n+      /* Dump anything bordered by whitespaces.  */ \n       {\n         const char *p = start;\n         while (p != end && *p != ' ' && *p != '\\n')\n@@ -752,7 +752,7 @@ vbuild_message_string (msg, ap)\n }\n \n /*  Return a malloc'd string containing MSG formatted a la\n-    printf.  The caller is reponsible for freeing the memory.  */\n+    printf.  The caller is responsible for freeing the memory.  */\n \n static char *\n build_message_string VPARAMS ((const char *msg, ...))\n@@ -1296,7 +1296,7 @@ diagnostic_finish (buffer)\n   fflush (output_buffer_attached_stream (buffer));\n }\n \n-/* Helper subroutine of output_verbatim and verbatim. Do the approriate\n+/* Helper subroutine of output_verbatim and verbatim. Do the appropriate\n    settings needed by BUFFER for a verbatim formatting.  */\n \n static void"}, {"sha": "8bfd09dd3bc5bf2a7bf82e5d12ba5b7b658ff3fe", "filename": "gcc/dominance.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -28,7 +28,7 @@\n    block I(X), called the immediate dominator of X, which is the parent of X\n    in the dominator tree.\n \n-   The algorithm computes this dominator tree implicitely by computing for\n+   The algorithm computes this dominator tree implicitly by computing for\n    each block its immediate dominator.  We use tree balancing and path\n    compression, so its the O(e*a(e,v)) variant, where a(e,v) is the very\n    slowly growing functional inverse of the Ackerman function.  */\n@@ -89,7 +89,7 @@ struct dom_info\n      number of that node in DFS order counted from 1.  This is an index\n      into most of the other arrays in this structure.  */\n   TBB *dfs_order;\n-  /* If x is the DFS-index of a node which correspondends with an basic block,\n+  /* If x is the DFS-index of a node which corresponds with an basic block,\n      dfs_to_bb[x] is that basic block.  Note, that in our structure there are\n      more nodes that basic blocks, so only dfs_to_bb[dfs_order[bb->index]]==bb\n      is true for every basic block bb, but not the opposite.  */\n@@ -523,7 +523,7 @@ calc_idoms (di, reverse)\n       v--;\n     }\n \n-  /* Explicitely define the dominators.  */\n+  /* Explicitly define the dominators.  */\n   di->dom[1] = 0;\n   for (v = 2; v <= di->nodes; v++)\n     if (di->dom[v] != di->key[v])"}, {"sha": "e5573bbd6382b0faf733e32bfe6e468db274201a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -3004,7 +3004,7 @@ get_cfa_from_loc_descr (cfa, loc)\n \t  cfa->offset = ptr->dw_loc_oprnd1.v.val_unsigned;\n \t  break;\n \tdefault:\n-\t  internal_error (\"DW_LOC_OP %s not implememnted\\n\",\n+\t  internal_error (\"DW_LOC_OP %s not implemented\\n\",\n \t\t\t  dwarf_stack_op_name (ptr->dw_loc_opc));\n \t}\n     }\n@@ -3224,7 +3224,7 @@ extern int flag_traditional;\n    This value was chosen to give a reasonable range of values.  */\n #define DWARF_LINE_BASE  -10\n \n-/* First special line opcde - leave room for the standard opcodes.  */\n+/* First special line opcode - leave room for the standard opcodes.  */\n #define DWARF_LINE_OPCODE_BASE  10\n \n /* Range of line offsets in a special line info. opcode.  */\n@@ -4752,7 +4752,7 @@ get_AT (die, attr_kind)\n \n /* Return the \"low pc\" attribute value, typically associated with\n    a subprogram DIE.  Return null if the \"low pc\" attribute is\n-   either not prsent, or if it cannot be represented as an\n+   either not present, or if it cannot be represented as an\n    assembler label identifier.  */\n \n static inline const char *\n@@ -4765,7 +4765,7 @@ get_AT_low_pc (die)\n \n /* Return the \"high pc\" attribute value, typically associated with\n    a subprogram DIE.  Return null if the \"high pc\" attribute is\n-   either not prsent, or if it cannot be represented as an\n+   either not present, or if it cannot be represented as an\n    assembler label identifier.  */\n \n static inline const char *"}, {"sha": "3edaf351906493eca1d09759e7b2efc8d13ecae6", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -1354,7 +1354,7 @@ static void retry_incomplete_types\tPARAMS ((void));\n    NOT issue a trailing newline. We define ASM_OUTPUT_DWARF_STRING_NEWLINE\n    based on whether ASM_OUTPUT_DWARF_STRING is defined or not. If it is\n    defined, we call it, then issue the line feed. If not, we supply a\n-   default defintion of calling ASM_OUTPUT_ASCII */\n+   default definition of calling ASM_OUTPUT_ASCII */\n \n #ifndef ASM_OUTPUT_DWARF_STRING\n #define ASM_OUTPUT_DWARF_STRING_NEWLINE(FILE,P) \\\n@@ -1912,7 +1912,7 @@ fundamental_type_code (type)\n \t    const char *const name =\n \t      IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n \n-\t    /* Note that here we can run afowl of a serious bug in \"classic\"\n+\t    /* Note that here we can run afoul of a serious bug in \"classic\"\n \t       svr4 SDB debuggers.  They don't seem to understand the\n \t       FT_ext_prec_float type (even though they should).  */\n \n@@ -1934,7 +1934,7 @@ fundamental_type_code (type)\n \tif (TYPE_PRECISION (type) == FLOAT_TYPE_SIZE)\n \t  return FT_float;\n \n-\t/* Note that here we can run afowl of a serious bug in \"classic\"\n+\t/* Note that here we can run afoul of a serious bug in \"classic\"\n \t   svr4 SDB debuggers.  They don't seem to understand the\n \t   FT_ext_prec_float type (even though they should).  */\n \n@@ -5613,7 +5613,7 @@ output_decl (decl, containing_scope)\n \n     case PARM_DECL:\n      /* Force out the type of this formal, if it was not forced out yet.\n-\tNote that here we can run afowl of a bug in \"classic\" svr4 SDB.\n+\tNote that here we can run afoul of a bug in \"classic\" svr4 SDB.\n \tIt should be able to grok the presence of type DIEs within a list\n \tof TAG_formal_parameter DIEs, but it doesn't.  */\n \n@@ -5717,7 +5717,7 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n \t future (i.e. later on within the current translation unit).\n \t So here we just ignore all file-scope function declarations\n \t which are not also definitions.  If and when the debugger needs\n-\t to know something about these functions, it wil have to hunt\n+\t to know something about these functions, it will have to hunt\n \t around and find the DWARF information associated with the\n \t *definition* of the function.\n "}, {"sha": "5e344b5d973ee81cfce1a60d627a4517e0da0936", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -1336,7 +1336,7 @@ constant_subword (op, offset, mode)\n \t ??? This is a potential portability problem and should\n \t be fixed at some point.\n \n-\t We must excercise caution with the sign bit.  By definition there\n+\t We must exercise caution with the sign bit.  By definition there\n \t are 32 significant bits in K; there may be more in a HOST_WIDE_INT.\n \t Consider a host with a 32-bit long and a 64-bit HOST_WIDE_INT.\n \t So we explicitly mask and sign-extend as necessary.  */\n@@ -2837,7 +2837,7 @@ try_split (pat, trial, last)\n \t\t    && !find_reg_note (insn, REG_BR_PROB, 0))\n \t\t  {\n \t\t    /* We can preserve the REG_BR_PROB notes only if exactly\n-\t\t       one jump is created, otherwise the machinde description\n+\t\t       one jump is created, otherwise the machine description\n \t\t       is responsible for this step using\n \t\t       split_branch_probability variable.  */\n \t\t    if (njumps != 1)\n@@ -3087,7 +3087,7 @@ add_insn_after (insn, after)\n     {\n       set_block_for_insn (insn, bb);\n       /* Should not happen as first in the BB is always\n-\t eigther NOTE or LABEL.  */\n+\t either NOTE or LABEL.  */\n       if (bb->end == after\n \t  /* Avoid clobbering of structure when creating new BB.  */\n \t  && GET_CODE (insn) != BARRIER\n@@ -3154,7 +3154,7 @@ add_insn_before (insn, before)\n     {\n       set_block_for_insn (insn, bb);\n       /* Should not happen as first in the BB is always\n-\t eigther NOTE or LABEl.  */\n+\t either NOTE or LABEl.  */\n       if (bb->head == insn\n \t  /* Avoid clobbering of structure when creating new BB.  */\n \t  && GET_CODE (insn) != BARRIER\n@@ -4668,7 +4668,7 @@ init_emit_once (line_numbers)\n #ifdef INIT_EXPANDERS\n   /* This is to initialize {init|mark|free}_machine_status before the first\n      call to push_function_context_to.  This is needed by the Chill front\n-     end which calls push_function_context_to before the first cal to\n+     end which calls push_function_context_to before the first call to\n      init_function_start.  */\n   INIT_EXPANDERS;\n #endif"}, {"sha": "f3a3e9b76e70cba9566dec660ad955a791b138f0", "filename": "gcc/errors.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -100,7 +100,7 @@ internal_error VPARAMS ((const char *format, ...))\n    shares no directory elements with the pathname of __FILE__.  This\n    is used by fancy_abort() to print `Internal compiler error in expr.c'\n    instead of `Internal compiler error in ../../GCC/gcc/expr.c'.  This\n-   version if for the gen* programs and so neededn't handle subdirectories.  */\n+   version if for the gen* programs and so needn't handle subdirectories.  */\n \n const char *\n trim_filename (name)"}, {"sha": "cc7177d0a27969c68302f977d18d16a9cde53371", "filename": "gcc/except.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -679,7 +679,7 @@ expand_eh_region_end ()\n   struct eh_region *cur_region = cfun->eh->cur_region;\n   rtx note;\n \n-  /* Create a nute marking the end of this region.  */\n+  /* Create a note marking the end of this region.  */\n   note = emit_note (NULL, NOTE_INSN_EH_REGION_END);\n   NOTE_EH_HANDLER (note) = cur_region->region_number;\n \n@@ -715,7 +715,7 @@ expand_eh_region_end_cleanup (handler)\n   emit_label (region->label);\n \n   /* Give the language a chance to specify an action to be taken if an\n-     exception is thrown that would propogate out of the HANDLER.  */\n+     exception is thrown that would propagate out of the HANDLER.  */\n   protect_cleanup_actions \n     = (lang_protect_cleanup_actions \n        ? (*lang_protect_cleanup_actions) () \n@@ -1559,7 +1559,7 @@ lookup_type_for_runtime (type)\n   slot = (tree *) htab_find_slot_with_hash (type_to_runtime_map, type,\n \t\t\t\t\t    TYPE_HASH (type), NO_INSERT);\n \n-  /* We should have always inserrted the data earlier.  */\n+  /* We should have always inserted the data earlier.  */\n   return TREE_VALUE (*slot);\n }\n \n@@ -1784,7 +1784,7 @@ build_post_landing_pads ()\n \t       all the way up the chain until blocked by a cleanup.  */\n \t  /* ??? Outer try regions can share landing pads with inner\n \t     try regions if the types are completely non-overlapping,\n-\t     and there are no interveaning cleanups.  */\n+\t     and there are no intervening cleanups.  */\n \n \t  region->post_landing_pad = gen_label_rtx ();\n \n@@ -3243,7 +3243,7 @@ collect_one_action_chain (ar_hash, region)\n       /* Process the associated catch regions in reverse order.\n \t If there's a catch-all handler, then we don't need to\n \t search outer regions.  Use a magic -3 value to record\n-\t that we havn't done the outer search.  */\n+\t that we haven't done the outer search.  */\n       next = -3;\n       for (c = region->u.try.last_catch; c ; c = c->u.catch.prev_catch)\n \t{"}, {"sha": "6af9891d8b8213586f4e646561e9467b92de15ac", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -149,7 +149,7 @@ extern void sjlj_emit_function_exit_after\tPARAMS ((rtx));\n \n \n /* If non-NULL, this is a function that returns an expression to be\n-   executed if an unhandled exception is propogated out of a cleanup\n+   executed if an unhandled exception is propagated out of a cleanup\n    region.  For example, in C++, an exception thrown by a destructor\n    during stack unwinding is required to result in a call to\n    `std::terminate', so the C++ version of this function returns a"}, {"sha": "4d12f00aa1baff89f3957038677f3e84b1407dbc", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -1287,7 +1287,7 @@ allocate_dynamic_stack_space (size, target, known_align)\n   do_pending_stack_adjust ();\n \n  /* We ought to be called always on the toplevel and stack ought to be aligned\n-    propertly.  */\n+    properly.  */\n   if (stack_pointer_delta % (PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT))\n     abort ();\n "}, {"sha": "c17a04ae25104342c002daa8fbd36651e0cd4955", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -6802,7 +6802,7 @@ expand_function_end (filename, line, end_bindings)\n   emit_line_note_force (filename, line);\n \n   /* Before the return label (if any), clobber the return\n-     registers so that they are not propogated live to the rest of\n+     registers so that they are not propagated live to the rest of\n      the function.  This can only happen with functions that drop\n      through; if there had been a return statement, there would\n      have either been a return rtx, or a jump to the return label."}, {"sha": "a9d113f8ef07bfe2ca15229dca209539b475961c", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -2177,7 +2177,7 @@ hash_scan_set (pat, insn, set_p)\n \t  /* Don't GCSE if it has attached REG_EQUIV note.\n \t     At this point this only function parameters should have\n \t     REG_EQUIV notes and if the argument slot is used somewhere\n-\t     explicitely, it means address of parameter has been taken,\n+\t     explicitly, it means address of parameter has been taken,\n \t     so we should not extend the lifetime of the pseudo.  */\n \t  && ((note = find_reg_note (insn, REG_EQUIV, NULL_RTX)) == 0\n \t      || GET_CODE (XEXP (note, 0)) != MEM))"}, {"sha": "fe1a42bbc5425ff40959978a0271e9c49b2ea378", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -1665,7 +1665,7 @@ find_afterward (head, real_afterward)\n {\n   struct decision *p, *q, *afterward;\n \n-  /* We can't propogate alternatives across subroutine boundaries.\n+  /* We can't propagate alternatives across subroutine boundaries.\n      This is not incorrect, merely a minor optimization loss.  */\n \n   p = head->first;"}, {"sha": "516cfbcc1c57e3eab26d4b3cb82f604e0e787742", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -556,7 +556,7 @@ expected_value_to_br_prob ()\n \t  continue;\n \n \tcase JUMP_INSN:\n-\t  /* Look for simple conditional branches.  If we havn't got an\n+\t  /* Look for simple conditional branches.  If we haven't got an\n \t     expected value yet, no point going further.  */\n \t  if (GET_CODE (insn) != JUMP_INSN || ev == NULL_RTX)\n \t    continue;"}, {"sha": "31b935500e3bf3442b87b763b5370b2c7b50b326", "filename": "gcc/regmove.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -2086,7 +2086,7 @@ stable_and_no_regs_but_for_p (x, src, dst)\n }\n \f\n /* Track stack adjustments and stack memory references.  Attempt to\n-   reduce the number of stack adjustments by back-propogating across\n+   reduce the number of stack adjustments by back-propagating across\n    the memory references.\n \n    This is intended primarily for use with targets that do not define\n@@ -2096,7 +2096,7 @@ stable_and_no_regs_but_for_p (x, src, dst)\n    (e.g. x86 fp regs) which would ordinarily have to be implemented\n    as a sub/mov pair due to restrictions in calls.c.\n \n-   Propogation stops when any of the insns that need adjusting are\n+   Propagation stops when any of the insns that need adjusting are\n    (a) no longer valid because we've exceeded their range, (b) a\n    non-trivial push instruction, or (c) a call instruction.\n "}, {"sha": "cc3fc9ae05e1d9dbffd8a43675e9937203206518", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -2058,7 +2058,7 @@ init_ready_list (ready)\n \t      {\n \t\trtx next;\n \n-\t\t/* Note that we havn't squirreled away the notes for\n+\t\t/* Note that we haven't squirreled away the notes for\n \t\t   blocks other than the current.  So if this is a\n \t\t   speculative insn, NEXT might otherwise be a note.  */\n \t\tnext = next_nonnote_insn (insn);"}, {"sha": "ba275c370c4d16768e6b3470357175f6d6a1fa0f", "filename": "gcc/ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-ccp.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -237,7 +237,7 @@ defs_to_varying (insn)\n     }\n }\n \n-/* Go through the expression, call the approriate evaluation routines\n+/* Go through the expression, call the appropriate evaluation routines\n    to attempt cprop */\n static void\n visit_expression (insn, block)"}, {"sha": "7c185e700b5ea7f021e4a5e6c09c0831a753ec07", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -3037,7 +3037,7 @@ expand_null_return ()\n \n   /* If this function was declared to return a value, but we\n      didn't, clobber the return registers so that they are not\n-     propogated live to the rest of the function.  */\n+     propagated live to the rest of the function.  */\n   clobber_return_register ();\n \n   expand_null_return_1 (last_insn);"}, {"sha": "bb7eedfda592b7a441594abad463eefb59a5b524", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f300c0f19c17e0b17fe8017bc3cb79f23337bd/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a1f300c0f19c17e0b17fe8017bc3cb79f23337bd", "patch": "@@ -4588,7 +4588,7 @@ general_init (argv0)\n }\n \f\n /* Parse command line options and set default flag values, called\n-   after language-independent option-independent intialization.  Do\n+   after language-independent option-independent initialization.  Do\n    minimal options processing.  Outputting diagnostics is OK, but GC\n    and identifier hashtables etc. are not initialized yet.  */\n static void\n@@ -4988,7 +4988,7 @@ lang_independent_init ()\n   decl_printable_name = decl_name;\n   lang_expand_expr = (lang_expand_expr_t) do_abort;\n \n-  /* Set the language-dependent identifer size.  */\n+  /* Set the language-dependent identifier size.  */\n   tree_code_length[(int) IDENTIFIER_NODE]\n     = ((lang_hooks.identifier_size - sizeof (struct tree_common))\n        / sizeof (tree));"}]}