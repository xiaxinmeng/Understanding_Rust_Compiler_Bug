{"sha": "03acd8b6429e22068330dce5abf129291d3f26de", "node_id": "C_kwDOANBUbNoAKDAzYWNkOGI2NDI5ZTIyMDY4MzMwZGNlNWFiZjEyOTI5MWQzZjI2ZGU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-15T16:32:26Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-15T16:32:26Z"}, "message": "PR tree-optimization/71343: Optimize (X<<C)&(Y<<C) as (X&Y)<<C.\n\nThis patch is the first part of a solution to PR tree-optimization/71343,\na missed-optimization enhancement request where GCC fails to see that\n(a<<2)+(b<<2) == a*4+b*4.\n\nThis piece is that (X<<C) op (Y<<C) can be simplified to (X op Y) << C,\nfor many binary operators, including AND, IOR, XOR, and (if overflow\nisn't an issue) PLUS and MINUS.  Likewise, the right shifts (both logical\nand arithmetic) and bit-wise logical operators can be simplified in a\nsimilar fashion.  These all reduce the number of GIMPLE binary operations\nfrom 3 to 2, by combining/eliminating a shift operation.\n\n2022-08-15  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\tPR tree-optimization/71343\n\t* match.pd (op (lshift @0 @1) (lshift @2 @1)): Optimize the\n\texpression (X<<C) + (Y<<C) to (X+Y)<<C for multiple operators.\n\t(op (rshift @0 @1) (rshift @2 @1)): Likewise, simplify (X>>C)^(Y>>C)\n\tto (X^Y)>>C for binary logical operators, AND, IOR and XOR.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/71343\n\t* gcc.dg/pr71343-1.c: New test case.", "tree": {"sha": "13582c7a6f978a641fa653a6b108f86f41b9b47f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13582c7a6f978a641fa653a6b108f86f41b9b47f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03acd8b6429e22068330dce5abf129291d3f26de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03acd8b6429e22068330dce5abf129291d3f26de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03acd8b6429e22068330dce5abf129291d3f26de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03acd8b6429e22068330dce5abf129291d3f26de/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2d189985d1f9fa09802c4a14856d442786f4bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d189985d1f9fa09802c4a14856d442786f4bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d189985d1f9fa09802c4a14856d442786f4bf8"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "e7d10f427a94303378d4c28350059bd9fcb690d8", "filename": "gcc/match.pd", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03acd8b6429e22068330dce5abf129291d3f26de/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03acd8b6429e22068330dce5abf129291d3f26de/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=03acd8b6429e22068330dce5abf129291d3f26de", "patch": "@@ -982,6 +982,26 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n    (lshift @0 @2)))\n \n+/* Shifts by constants distribute over several binary operations,\n+   hence (X << C) + (Y << C) can be simplified to (X + Y) << C.  */\n+(for op (plus minus)\n+  (simplify\n+    (op (lshift:s @0 @1) (lshift:s @2 @1))\n+    (if (INTEGRAL_TYPE_P (type)\n+\t && TYPE_OVERFLOW_WRAPS (type)\n+\t && !TYPE_SATURATING (type))\n+      (lshift (op @0 @2) @1))))\n+\n+(for op (bit_and bit_ior bit_xor)\n+  (simplify\n+    (op (lshift:s @0 @1) (lshift:s @2 @1))\n+    (if (INTEGRAL_TYPE_P (type))\n+      (lshift (op @0 @2) @1)))\n+  (simplify\n+    (op (rshift:s @0 @1) (rshift:s @2 @1))\n+    (if (INTEGRAL_TYPE_P (type))\n+      (rshift (op @0 @2) @1))))\n+\n /* Fold (1 << (C - x)) where C = precision(type) - 1\n    into ((1 << C) >> x). */\n (simplify"}, {"sha": "146f5fcd69653617b96ced011295a9f8c710ad14", "filename": "gcc/testsuite/gcc.dg/pr71343-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03acd8b6429e22068330dce5abf129291d3f26de/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71343-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03acd8b6429e22068330dce5abf129291d3f26de/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71343-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71343-1.c?ref=03acd8b6429e22068330dce5abf129291d3f26de", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+unsigned int foo_plus(unsigned int a, unsigned int b)\n+{\n+  return (a << 2) + (b << 2);\n+}\n+\n+unsigned int foo_and(unsigned int a, unsigned int b)\n+{\n+  return (a << 2) & (b << 2);\n+}\n+\n+unsigned int foo_ior(unsigned int a, unsigned int b)\n+{\n+  return (a << 2) | (b << 2);\n+}\n+\n+unsigned int foo_xor(unsigned int a, unsigned int b)\n+{\n+  return (a << 2) ^ (b << 2);\n+}\n+\n+unsigned int bar_and(unsigned int a, unsigned int b)\n+{\n+  return (a >> 2) & (b >> 2);\n+}\n+\n+unsigned int bar_ior(unsigned int a, unsigned int b)\n+{\n+  return (a >> 2) | (b >> 2);\n+}\n+\n+unsigned int bar_xor(unsigned int a, unsigned int b)\n+{\n+  return (a >> 2) ^ (b >> 2);\n+}\n+\n+int baz_and(int a, int b)\n+{\n+  return (a >> 2) & (b >> 2);\n+}\n+\n+int baz_ior(int a, int b)\n+{\n+  return (a >> 2) | (b >> 2);\n+}\n+\n+int baz_xor(int a, int b)\n+{\n+  return (a >> 2) ^ (b >> 2);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" << \" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" >> \" 6 \"optimized\" } } */\n+"}]}