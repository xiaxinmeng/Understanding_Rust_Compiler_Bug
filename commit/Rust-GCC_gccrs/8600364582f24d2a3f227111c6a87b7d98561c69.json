{"sha": "8600364582f24d2a3f227111c6a87b7d98561c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwMDM2NDU4MmYyNGQyYTNmMjI3MTExYzZhODdiN2Q5ODU2MWM2OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-07T13:18:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-07T13:18:35Z"}, "message": "Make IPA predicate::size a poly_int64\n\nThis patch changes the IPA predicate::size field from a HOST_WIDE_INT\nto a poly_int64.\n\n2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* data-streamer.h (streamer_write_poly_uint64): Declare.\n\t(streamer_read_poly_uint64): Likewise.\n\t* data-streamer-in.c (streamer_read_poly_uint64): New function.\n\t* data-streamer-out.c (streamer_write_poly_uint64): Likewise.\n\t* ipa-predicate.h (condition::size): Turn into a poly_int64.\n\t(add_condition): Take a poly_int64 size.\n\t* ipa-predicate.c (add_condition): Likewise.\n\t* ipa-prop.h (ipa_load_from_parm_agg): Take a poly_int64 size pointer.\n\t* ipa-prop.c (ipa_load_from_parm_agg): Likewise.\n\t(ipcp_modif_dom_walker::before_dom_children): Update accordingly.\n\t* ipa-fnsummary.c (evaluate_conditions_for_known_args): Handle\n\tcondition::size as a poly_int64.\n\t(unmodified_parm_1): Take a poly_int64 size pointer.\n\t(unmodified_parm): Likewise.\n\t(unmodified_parm_or_parm_agg_item): Likewise.\n\t(set_cond_stmt_execution_predicate): Update accordingly.\n\t(set_switch_stmt_execution_predicate): Likewise.\n\t(will_be_nonconstant_expr_predicate): Likewise.\n\t(will_be_nonconstant_predicate): Likewise.\n\t(inline_read_section): Stream condition::size as a poly_int.\n\t(ipa_fn_summary_write): Likewise.\n\nFrom-SVN: r274162", "tree": {"sha": "e1cd0535b1274de714311e9eaa23ef8742633eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1cd0535b1274de714311e9eaa23ef8742633eee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8600364582f24d2a3f227111c6a87b7d98561c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8600364582f24d2a3f227111c6a87b7d98561c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8600364582f24d2a3f227111c6a87b7d98561c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8600364582f24d2a3f227111c6a87b7d98561c69/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12bbb1f78e610e665077f6ed58013b4c9f57741b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bbb1f78e610e665077f6ed58013b4c9f57741b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12bbb1f78e610e665077f6ed58013b4c9f57741b"}], "stats": {"total": 90, "additions": 69, "deletions": 21}, "files": [{"sha": "a4b0c35f4ba36bd3aa430ee5cf5426cccd37bbe3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8600364582f24d2a3f227111c6a87b7d98561c69", "patch": "@@ -1,3 +1,27 @@\n+2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* data-streamer.h (streamer_write_poly_uint64): Declare.\n+\t(streamer_read_poly_uint64): Likewise.\n+\t* data-streamer-in.c (streamer_read_poly_uint64): New function.\n+\t* data-streamer-out.c (streamer_write_poly_uint64): Likewise.\n+\t* ipa-predicate.h (condition::size): Turn into a poly_int64.\n+\t(add_condition): Take a poly_int64 size.\n+\t* ipa-predicate.c (add_condition): Likewise.\n+\t* ipa-prop.h (ipa_load_from_parm_agg): Take a poly_int64 size pointer.\n+\t* ipa-prop.c (ipa_load_from_parm_agg): Likewise.\n+\t(ipcp_modif_dom_walker::before_dom_children): Update accordingly.\n+\t* ipa-fnsummary.c (evaluate_conditions_for_known_args): Handle\n+\tcondition::size as a poly_int64.\n+\t(unmodified_parm_1): Take a poly_int64 size pointer.\n+\t(unmodified_parm): Likewise.\n+\t(unmodified_parm_or_parm_agg_item): Likewise.\n+\t(set_cond_stmt_execution_predicate): Update accordingly.\n+\t(set_switch_stmt_execution_predicate): Likewise.\n+\t(will_be_nonconstant_expr_predicate): Likewise.\n+\t(will_be_nonconstant_predicate): Likewise.\n+\t(inline_read_section): Stream condition::size as a poly_int.\n+\t(ipa_fn_summary_write): Likewise.\n+\n 2019-08-07  Martin Liska  <mliska@suse.cz>\n \n \t* fold-const.c (twoval_comparison_p): Replace int"}, {"sha": "d9742d5334f1a81ae0c16d1f861c78e8d51d2dcd", "filename": "gcc/data-streamer-in.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fdata-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fdata-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer-in.c?ref=8600364582f24d2a3f227111c6a87b7d98561c69", "patch": "@@ -175,6 +175,17 @@ streamer_read_hwi (class lto_input_block *ib)\n     }\n }\n \n+/* Read a poly_uint64 from IB.  */\n+\n+poly_uint64\n+streamer_read_poly_uint64 (class lto_input_block *ib)\n+{\n+  poly_uint64 res;\n+  for (unsigned int i = 0; i < NUM_POLY_INT_COEFFS; ++i)\n+    res.coeffs[i] = streamer_read_uhwi (ib);\n+  return res;\n+}\n+\n /* Read gcov_type value from IB.  */\n \n gcov_type"}, {"sha": "54d080ea8d90d976e9c60b07086a6221aa57c335", "filename": "gcc/data-streamer-out.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fdata-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fdata-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer-out.c?ref=8600364582f24d2a3f227111c6a87b7d98561c69", "patch": "@@ -220,6 +220,15 @@ streamer_write_hwi (struct output_block *ob, HOST_WIDE_INT work)\n   streamer_write_hwi_stream (ob->main_stream, work);\n }\n \n+/* Write a poly_uint64 value WORK to OB->main_stream.  */\n+\n+void\n+streamer_write_poly_uint64 (struct output_block *ob, poly_uint64 work)\n+{\n+  for (int i = 0; i < NUM_POLY_INT_COEFFS; ++i)\n+    streamer_write_uhwi_stream (ob->main_stream, work.coeffs[i]);\n+}\n+\n /* Write a gcov counter value WORK to OB->main_stream.  */\n \n void"}, {"sha": "c1b150138628bcda71894745463c193a28a8a550", "filename": "gcc/data-streamer.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fdata-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fdata-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer.h?ref=8600364582f24d2a3f227111c6a87b7d98561c69", "patch": "@@ -53,6 +53,7 @@ HOST_WIDE_INT bp_unpack_var_len_int (struct bitpack_d *);\n void streamer_write_zero (struct output_block *);\n void streamer_write_uhwi (struct output_block *, unsigned HOST_WIDE_INT);\n void streamer_write_hwi (struct output_block *, HOST_WIDE_INT);\n+void streamer_write_poly_uint64 (struct output_block *, poly_uint64);\n void streamer_write_gcov_count (struct output_block *, gcov_type);\n void streamer_write_string (struct output_block *, struct lto_output_stream *,\n \t\t\t    const char *, bool);\n@@ -82,6 +83,7 @@ const char *bp_unpack_indexed_string (class data_in *, struct bitpack_d *,\n const char *bp_unpack_string (class data_in *, struct bitpack_d *);\n unsigned HOST_WIDE_INT streamer_read_uhwi (class lto_input_block *);\n HOST_WIDE_INT streamer_read_hwi (class lto_input_block *);\n+poly_uint64 streamer_read_poly_uint64 (class lto_input_block *);\n gcov_type streamer_read_gcov_count (class lto_input_block *);\n wide_int streamer_read_wide_int (class lto_input_block *);\n widest_int streamer_read_widest_int (class lto_input_block *);"}, {"sha": "278bf606661970aaa33e6a6240d71f7a42161ae5", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=8600364582f24d2a3f227111c6a87b7d98561c69", "patch": "@@ -382,7 +382,7 @@ evaluate_conditions_for_known_args (struct cgraph_node *node,\n \t  continue;\n \t}\n \n-      if (tree_to_shwi (TYPE_SIZE (TREE_TYPE (val))) != c->size)\n+      if (maybe_ne (tree_to_poly_int64 (TYPE_SIZE (TREE_TYPE (val))), c->size))\n \t{\n \t  clause |= 1 << (i + predicate::first_dynamic_condition);\n \t  nonspec_clause |= 1 << (i + predicate::first_dynamic_condition);\n@@ -922,15 +922,15 @@ mark_modified (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef ATTRIBUTE_UNUSED,\n \n static tree\n unmodified_parm_1 (ipa_func_body_info *fbi, gimple *stmt, tree op,\n-\t\t   HOST_WIDE_INT *size_p)\n+\t\t   poly_int64 *size_p)\n {\n   /* SSA_NAME referring to parm default def?  */\n   if (TREE_CODE (op) == SSA_NAME\n       && SSA_NAME_IS_DEFAULT_DEF (op)\n       && TREE_CODE (SSA_NAME_VAR (op)) == PARM_DECL)\n     {\n       if (size_p)\n-\t*size_p = tree_to_shwi (TYPE_SIZE (TREE_TYPE (op)));\n+\t*size_p = tree_to_poly_int64 (TYPE_SIZE (TREE_TYPE (op)));\n       return SSA_NAME_VAR (op);\n     }\n   /* Non-SSA parm reference?  */\n@@ -951,7 +951,7 @@ unmodified_parm_1 (ipa_func_body_info *fbi, gimple *stmt, tree op,\n       if (!modified)\n \t{\n \t  if (size_p)\n-\t    *size_p = tree_to_shwi (TYPE_SIZE (TREE_TYPE (op)));\n+\t    *size_p = tree_to_poly_int64 (TYPE_SIZE (TREE_TYPE (op)));\n \t  return op;\n \t}\n     }\n@@ -965,7 +965,7 @@ unmodified_parm_1 (ipa_func_body_info *fbi, gimple *stmt, tree op,\n \n static tree\n unmodified_parm (ipa_func_body_info *fbi, gimple *stmt, tree op,\n-\t\t HOST_WIDE_INT *size_p)\n+\t\t poly_int64 *size_p)\n {\n   tree res = unmodified_parm_1 (fbi, stmt, op, size_p);\n   if (res)\n@@ -990,7 +990,7 @@ unmodified_parm (ipa_func_body_info *fbi, gimple *stmt, tree op,\n static bool\n unmodified_parm_or_parm_agg_item (struct ipa_func_body_info *fbi,\n \t\t\t\t  gimple *stmt, tree op, int *index_p,\n-\t\t\t\t  HOST_WIDE_INT *size_p,\n+\t\t\t\t  poly_int64 *size_p,\n \t\t\t\t  struct agg_position_info *aggpos)\n {\n   tree res = unmodified_parm_1 (fbi, stmt, op, size_p);\n@@ -1169,7 +1169,7 @@ set_cond_stmt_execution_predicate (struct ipa_func_body_info *fbi,\n   gimple *last;\n   tree op;\n   int index;\n-  HOST_WIDE_INT size;\n+  poly_int64 size;\n   struct agg_position_info aggpos;\n   enum tree_code code, inverted_code;\n   edge e;\n@@ -1254,7 +1254,7 @@ set_switch_stmt_execution_predicate (struct ipa_func_body_info *fbi,\n   gimple *lastg;\n   tree op;\n   int index;\n-  HOST_WIDE_INT size;\n+  poly_int64 size;\n   struct agg_position_info aggpos;\n   edge e;\n   edge_iterator ei;\n@@ -1393,7 +1393,7 @@ will_be_nonconstant_expr_predicate (ipa_func_body_info *fbi,\n {\n   tree parm;\n   int index;\n-  HOST_WIDE_INT size;\n+  poly_int64 size;\n \n   while (UNARY_CLASS_P (expr))\n     expr = TREE_OPERAND (expr, 0);\n@@ -1468,7 +1468,7 @@ will_be_nonconstant_predicate (struct ipa_func_body_info *fbi,\n   predicate op_non_const;\n   bool is_load;\n   int base_index;\n-  HOST_WIDE_INT size;\n+  poly_int64 size;\n   struct agg_position_info aggpos;\n \n   /* What statments might be optimized away\n@@ -1524,7 +1524,7 @@ will_be_nonconstant_predicate (struct ipa_func_body_info *fbi,\n     op_non_const = false;\n   FOR_EACH_SSA_TREE_OPERAND (use, stmt, iter, SSA_OP_USE)\n     {\n-      HOST_WIDE_INT size;\n+      poly_int64 size;\n       tree parm = unmodified_parm (fbi, stmt, use, &size);\n       int index;\n \n@@ -3292,7 +3292,7 @@ inline_read_section (struct lto_file_decl_data *file_data, const char *data,\n \t{\n \t  struct condition c;\n \t  c.operand_num = streamer_read_uhwi (&ib);\n-\t  c.size = streamer_read_uhwi (&ib);\n+\t  c.size = streamer_read_poly_uint64 (&ib);\n \t  c.code = (enum tree_code) streamer_read_uhwi (&ib);\n \t  c.val = stream_read_tree (&ib, data_in);\n \t  bp = streamer_read_bitpack (&ib);\n@@ -3446,7 +3446,7 @@ ipa_fn_summary_write (void)\n \t  for (i = 0; vec_safe_iterate (info->conds, i, &c); i++)\n \t    {\n \t      streamer_write_uhwi (ob, c->operand_num);\n-\t      streamer_write_uhwi (ob, c->size);\n+\t      streamer_write_poly_uint64 (ob, c->size);\n \t      streamer_write_uhwi (ob, c->code);\n \t      stream_write_tree (ob, c->val, true);\n \t      bp = bitpack_create (ob->main_stream);"}, {"sha": "775f82bce9f45144b728b9d08a5883efbe9dacf9", "filename": "gcc/ipa-predicate.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fipa-predicate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fipa-predicate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-predicate.c?ref=8600364582f24d2a3f227111c6a87b7d98561c69", "patch": "@@ -523,7 +523,7 @@ predicate::stream_out (struct output_block *ob)\n \n predicate\n add_condition (class ipa_fn_summary *summary, int operand_num,\n-\t       HOST_WIDE_INT size, struct agg_position_info *aggpos,\n+\t       poly_int64 size, struct agg_position_info *aggpos,\n \t       enum tree_code code, tree val)\n {\n   int i;\n@@ -549,7 +549,7 @@ add_condition (class ipa_fn_summary *summary, int operand_num,\n   for (i = 0; vec_safe_iterate (summary->conds, i, &c); i++)\n     {\n       if (c->operand_num == operand_num\n-\t  && c->size == size\n+\t  && maybe_ne (c->size, size)\n \t  && c->code == code\n \t  && c->val == val\n \t  && c->agg_contents == agg_contents"}, {"sha": "237306dc9fe5b837e7687517b14602fdc4a919ba", "filename": "gcc/ipa-predicate.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fipa-predicate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fipa-predicate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-predicate.h?ref=8600364582f24d2a3f227111c6a87b7d98561c69", "patch": "@@ -31,7 +31,7 @@ struct GTY(()) condition\n      loaded.  */\n   HOST_WIDE_INT offset;\n   /* Size of the access reading the data (or the PARM_DECL SSA_NAME).  */\n-  HOST_WIDE_INT size;\n+  poly_int64 size;\n   tree val;\n   int operand_num;\n   ENUM_BITFIELD(tree_code) code : 16;\n@@ -228,5 +228,5 @@ class predicate\n \n void dump_condition (FILE *f, conditions conditions, int cond);\n predicate add_condition (class ipa_fn_summary *summary, int operand_num,\n-\t\t\t HOST_WIDE_INT size, struct agg_position_info *aggpos,\n+\t\t\t poly_int64 size, struct agg_position_info *aggpos,\n \t\t\t enum tree_code code, tree val);"}, {"sha": "ce669f800839217478cf2b90316240784ae6b483", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=8600364582f24d2a3f227111c6a87b7d98561c69", "patch": "@@ -1059,7 +1059,7 @@ bool\n ipa_load_from_parm_agg (struct ipa_func_body_info *fbi,\n \t\t\tvec<ipa_param_descriptor, va_gc> *descriptors,\n \t\t\tgimple *stmt, tree op, int *index_p,\n-\t\t\tHOST_WIDE_INT *offset_p, HOST_WIDE_INT *size_p,\n+\t\t\tHOST_WIDE_INT *offset_p, poly_int64 *size_p,\n \t\t\tbool *by_ref_p, bool *guaranteed_unmodified)\n {\n   int index;\n@@ -4917,7 +4917,8 @@ ipcp_modif_dom_walker::before_dom_children (basic_block bb)\n       struct ipa_agg_replacement_value *v;\n       gimple *stmt = gsi_stmt (gsi);\n       tree rhs, val, t;\n-      HOST_WIDE_INT offset, size;\n+      HOST_WIDE_INT offset;\n+      poly_int64 size;\n       int index;\n       bool by_ref, vce;\n \n@@ -4952,7 +4953,8 @@ ipcp_modif_dom_walker::before_dom_children (basic_block bb)\n \t  break;\n       if (!v\n \t  || v->by_ref != by_ref\n-\t  || tree_to_shwi (TYPE_SIZE (TREE_TYPE (v->value))) != size)\n+\t  || maybe_ne (tree_to_poly_int64 (TYPE_SIZE (TREE_TYPE (v->value))),\n+\t\t       size))\n \tcontinue;\n \n       gcc_checking_assert (is_gimple_ip_invariant (v->value));"}, {"sha": "30948fb8854001c969a4ed12da32eda593f50c86", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8600364582f24d2a3f227111c6a87b7d98561c69/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=8600364582f24d2a3f227111c6a87b7d98561c69", "patch": "@@ -763,7 +763,7 @@ tree ipa_find_agg_cst_for_param (struct ipa_agg_jump_function *agg, tree scalar,\n bool ipa_load_from_parm_agg (struct ipa_func_body_info *fbi,\n \t\t\t     vec<ipa_param_descriptor, va_gc> *descriptors,\n \t\t\t     gimple *stmt, tree op, int *index_p,\n-\t\t\t     HOST_WIDE_INT *offset_p, HOST_WIDE_INT *size_p,\n+\t\t\t     HOST_WIDE_INT *offset_p, poly_int64 *size_p,\n \t\t\t     bool *by_ref, bool *guaranteed_unmodified = NULL);\n \n /* Debugging interface.  */"}]}