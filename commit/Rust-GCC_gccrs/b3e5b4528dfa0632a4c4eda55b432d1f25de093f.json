{"sha": "b3e5b4528dfa0632a4c4eda55b432d1f25de093f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNlNWI0NTI4ZGZhMDYzMmE0YzRlZGE1NWI0MzJkMWYyNWRlMDkzZg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-14T19:45:11Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-14T19:45:11Z"}, "message": "re PR libgcj/2429 (java.text.MessageFormat should usefully set text on exceptions)\n\n2004-01-14  Michael Koch  <konqueror@gmx.de>\n\n\t* java/text/MessageFormat.java:\n\tAdded descriptions to exceptions.\n\tThis fixes PR libgcj/2429.\n\nFrom-SVN: r75877", "tree": {"sha": "5f05ab7cbeacdb2c3681cf55a771c99199019791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f05ab7cbeacdb2c3681cf55a771c99199019791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3e5b4528dfa0632a4c4eda55b432d1f25de093f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e5b4528dfa0632a4c4eda55b432d1f25de093f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e5b4528dfa0632a4c4eda55b432d1f25de093f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e5b4528dfa0632a4c4eda55b432d1f25de093f/comments", "author": null, "committer": null, "parents": [{"sha": "47f62b27c8605658db7658421ef56b8d020ed4fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f62b27c8605658db7658421ef56b8d020ed4fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f62b27c8605658db7658421ef56b8d020ed4fb"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "6481570d7e1dcbc9a4d14324526901c165aae5fa", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3e5b4528dfa0632a4c4eda55b432d1f25de093f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3e5b4528dfa0632a4c4eda55b432d1f25de093f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b3e5b4528dfa0632a4c4eda55b432d1f25de093f", "patch": "@@ -1,3 +1,9 @@\n+2004-01-14  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/text/MessageFormat.java:\n+\tAdded descriptions to exceptions.\n+\tThis fixes PR libgcj/2429.\n+\n 2004-01-13  Fernando Nasser  <fnasser@redhat.com>\n \n \t* java/awt/EventQueue.java (isDispatchThread): Do check on top of stack."}, {"sha": "7bb7760c90e0973bd002edac0e0aa3b5e26c9fa5", "filename": "libjava/java/text/MessageFormat.java", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3e5b4528dfa0632a4c4eda55b432d1f25de093f/libjava%2Fjava%2Ftext%2FMessageFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3e5b4528dfa0632a4c4eda55b432d1f25de093f/libjava%2Fjava%2Ftext%2FMessageFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FMessageFormat.java?ref=b3e5b4528dfa0632a4c4eda55b432d1f25de093f", "patch": "@@ -170,7 +170,7 @@ else if (c == '\\'' && index + 1 < max\n \telse if (c == '{')\n \t  break;\n \telse if (c == '}')\n-\t  throw new IllegalArgumentException ();\n+\t  throw new IllegalArgumentException(\"Found '}' without '{'\");\n \telse\n \t  buffer.append(c);\n       }\n@@ -245,7 +245,7 @@ private static final int scanFormat (String pat, int index,\n       }\n     catch (NumberFormatException nfx)\n       {\n-\tthrow new IllegalArgumentException ();\n+\tthrow new IllegalArgumentException(\"Failed to parse integer string\");\n       }\n \n     // Extract the element format.\n@@ -264,7 +264,7 @@ private static final int scanFormat (String pat, int index,\n \n     // Advance past the last terminator.\n     if (index >= max || pat.charAt(index) != '}')\n-      throw new IllegalArgumentException ();\n+      throw new IllegalArgumentException(\"Missing '}' at end of message format\");\n     ++index;\n \n     // Now fetch trailing string.\n@@ -349,7 +349,8 @@ public final StringBuffer format (Object arguments[], StringBuffer appendBuf,\n     for (int i = 0; i < elements.length; ++i)\n       {\n \tif (elements[i].argNumber >= arguments.length)\n-\t  throw new IllegalArgumentException ();\n+\t  throw new IllegalArgumentException(\"Not enough arguments given\");\n+\n \tObject thisArg = arguments[elements[i].argNumber];\n \n \tFormat formatter = null;\n@@ -359,7 +360,8 @@ else if (elements[i].format != null)\n \t  {\n \t    if (elements[i].formatClass != null\n \t\t&& ! elements[i].formatClass.isInstance(thisArg))\n-\t      throw new IllegalArgumentException ();\n+\t      throw new IllegalArgumentException(\"Wrong format class\");\n+\t    \n \t    formatter = elements[i].format;\n \t  }\n \telse if (thisArg instanceof Number)\n@@ -596,7 +598,8 @@ public void setFormat (int variableNum, Format newFormat)\n   public void setFormats (Format[] newFormats)\n   {\n     if (newFormats.length < elements.length)\n-      throw new IllegalArgumentException ();\n+      throw new IllegalArgumentException(\"Not enough format objects\");\n+\n     int len = Math.min(newFormats.length, elements.length);\n     for (int i = 0; i < len; ++i)\n       elements[i].setFormat = newFormats[i];"}]}