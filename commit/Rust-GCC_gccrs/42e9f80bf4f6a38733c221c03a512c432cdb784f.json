{"sha": "42e9f80bf4f6a38733c221c03a512c432cdb784f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJlOWY4MGJmNGY2YTM4NzMzYzIyMWMwM2E1MTJjNDMyY2RiNzg0Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-11T19:39:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-11T19:41:15Z"}, "message": "c++: Better diagnostic in converted const expr.\n\nThis improves the diagnostic from\n\nerror: could not convert \u2018((A<>*)(void)0)->A<>::e\u2019 from\n       \u2018<unresolved overloaded function type>\u2019 to \u2018bool\u2019\n\nto\n\nerror: cannot convert \u2018A<>::e\u2019 from type \u2018void (A<>::)()\u2019 to type \u2018bool\u2019\n\ngcc/cp/ChangeLog\n2020-05-11  Jason Merrill  <jason@redhat.com>\n\n\t* call.c (implicit_conversion_error): Split out from...\n\t(perform_implicit_conversion_flags): ...here.\n\t(build_converted_constant_expr_internal): Use it.", "tree": {"sha": "4d97c0e9a64f2b380606b163b844722295161983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d97c0e9a64f2b380606b163b844722295161983"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42e9f80bf4f6a38733c221c03a512c432cdb784f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e9f80bf4f6a38733c221c03a512c432cdb784f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e9f80bf4f6a38733c221c03a512c432cdb784f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e9f80bf4f6a38733c221c03a512c432cdb784f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f981395c220c9afd73be138294946e085e64af78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f981395c220c9afd73be138294946e085e64af78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f981395c220c9afd73be138294946e085e64af78"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "f2814c3b037a0d7d387180c3065740532db759cd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=42e9f80bf4f6a38733c221c03a512c432cdb784f", "patch": "@@ -1,3 +1,9 @@\n+2020-05-11  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (implicit_conversion_error): Split out from...\n+\t(perform_implicit_conversion_flags): ...here.\n+\t(build_converted_constant_expr_internal): Use it.\n+\n 2020-05-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/90748"}, {"sha": "85d670f52f90ad6b9cb64f7e04b9bff3bf19fcc9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=42e9f80bf4f6a38733c221c03a512c432cdb784f", "patch": "@@ -4282,6 +4282,28 @@ build_user_type_conversion (tree totype, tree expr, int flags,\n   return ret;\n }\n \n+/* Give a helpful diagnostic when implicit_conversion fails.  */\n+\n+static void\n+implicit_conversion_error (location_t loc, tree type, tree expr)\n+{\n+  tsubst_flags_t complain = tf_warning_or_error;\n+\n+  /* If expr has unknown type, then it is an overloaded function.\n+     Call instantiate_type to get good error messages.  */\n+  if (TREE_TYPE (expr) == unknown_type_node)\n+    instantiate_type (type, expr, complain);\n+  else if (invalid_nonstatic_memfn_p (loc, expr, complain))\n+    /* We gave an error.  */;\n+  else\n+    {\n+      range_label_for_type_mismatch label (TREE_TYPE (expr), type);\n+      gcc_rich_location rich_loc (loc, &label);\n+      error_at (&rich_loc, \"could not convert %qE from %qH to %qI\",\n+\t\texpr, TREE_TYPE (expr), type);\n+    }\n+}\n+\n /* Worker for build_converted_constant_expr.  */\n \n static tree\n@@ -4397,8 +4419,7 @@ build_converted_constant_expr_internal (tree type, tree expr,\n   else\n     {\n       if (complain & tf_error)\n-\terror_at (loc, \"could not convert %qE from %qH to %qI\", expr,\n-\t\t  TREE_TYPE (expr), type);\n+\timplicit_conversion_error (loc, type, expr);\n       expr = error_mark_node;\n     }\n \n@@ -11845,21 +11866,7 @@ perform_implicit_conversion_flags (tree type, tree expr,\n   if (!conv)\n     {\n       if (complain & tf_error)\n-\t{\n-\t  /* If expr has unknown type, then it is an overloaded function.\n-\t     Call instantiate_type to get good error messages.  */\n-\t  if (TREE_TYPE (expr) == unknown_type_node)\n-\t    instantiate_type (type, expr, complain);\n-\t  else if (invalid_nonstatic_memfn_p (loc, expr, complain))\n-\t    /* We gave an error.  */;\n-\t  else\n-\t    {\n-\t      range_label_for_type_mismatch label (TREE_TYPE (expr), type);\n-\t      gcc_rich_location rich_loc (loc, &label);\n-\t      error_at (&rich_loc, \"could not convert %qE from %qH to %qI\",\n-\t\t\texpr, TREE_TYPE (expr), type);\n-\t    }\n-\t}\n+\timplicit_conversion_error (loc, type, expr);\n       expr = error_mark_node;\n     }\n   else if (processing_template_decl && conv->kind != ck_identity)"}, {"sha": "1075c69a491dffa6c69b2b175748702fa96a6d5d", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept30.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept30.C?ref=42e9f80bf4f6a38733c221c03a512c432cdb784f", "patch": "@@ -5,7 +5,7 @@\n template<typename A>\n struct F {\n   template<typename B>\n-  void f() noexcept(&F::template f<B>) {} // { dg-error \"exception specification|convert\" }\n+  void f() noexcept(&F::template f<B>) {} // { dg-error \"exception specification|convert|resolve\" }\n };\n \n int main () {"}, {"sha": "0a145e030a52ac1104fe6e59ca65060991fff7d3", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept58.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept58.C?ref=42e9f80bf4f6a38733c221c03a512c432cdb784f", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/90748\n+// { dg-do compile { target c++11 } }\n+\n+template <class ...> class A\n+{\n+  void e ();\n+  bool f (int() noexcept(e));\t// { dg-error \"::e\" }\n+};\n+A<> b;"}, {"sha": "7da6623612a4a7aae4c342674b6014ddfe0333b7", "filename": "gcc/testsuite/g++.dg/template/crash87.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash87.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash87.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash87.C?ref=42e9f80bf4f6a38733c221c03a512c432cdb784f", "patch": "@@ -17,7 +17,7 @@ template <bool name>\n class BUG2 : BUG\n {\n public:\n- typedef BUG1_5<name> ptr; // { dg-error \"convert\" }\n+ typedef BUG1_5<name> ptr; // { dg-error \"BUG::name\" }\n };\n \n int main()"}, {"sha": "4d6b323ed64ae830200b6b530bb72d7e890b0f63", "filename": "gcc/testsuite/g++.dg/template/nontype13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e9f80bf4f6a38733c221c03a512c432cdb784f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype13.C?ref=42e9f80bf4f6a38733c221c03a512c432cdb784f", "patch": "@@ -11,7 +11,7 @@ struct Dummy\n   template<bool B>\n   void tester()\n   {\n-    bar<evil>()(); // { dg-error \"constant|template|convert\" }\n+    bar<evil>()(); // { dg-error \"constant|template|convert|member function\" }\n   }\n   template<bool B>\n   struct bar"}]}