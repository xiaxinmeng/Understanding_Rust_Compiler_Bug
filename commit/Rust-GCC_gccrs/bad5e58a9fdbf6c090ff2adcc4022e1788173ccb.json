{"sha": "bad5e58a9fdbf6c090ff2adcc4022e1788173ccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkNWU1OGE5ZmRiZjZjMDkwZmYyYWRjYzQwMjJlMTc4ODE3M2NjYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-09T15:26:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-09T15:26:51Z"}, "message": "[AArch64] Simplify WHILERW and WHILEWR definition\n\nI'd made WHILERW and WHILEWR use separate patterns from the SVE\nWHILE instructions, but they're similar enough that we can use\na single pattern.  This means that we also get the flag-related\npatterns \"for free\".\n\n2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_WHILE): Add UNSPEC_WHILERW\n\tand UNSPEC_WHILEWR.\n\t(while_optab_cmp): Handle them.\n\t* config/aarch64/aarch64-sve.md\n\t(*while_<while_optab_cmp><GPI:mode><PRED_ALL:mode>_ptest): Make public\n\tand add a \"@\" marker.\n\t* config/aarch64/aarch64-sve2.md (check_<raw_war>_ptrs<mode>): Use it\n\tinstead of gen_aarch64_sve2_while_ptest.\n\t(@aarch64_sve2_while<cmp_op><GPI:mode><PRED_ALL:mode>_ptest): Delete.\n\nFrom-SVN: r280054", "tree": {"sha": "8dd55be94c1fb057ab8243754321476a09c89109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dd55be94c1fb057ab8243754321476a09c89109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ad9571b172cd98099b477cba4efdd92c85bd222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad9571b172cd98099b477cba4efdd92c85bd222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad9571b172cd98099b477cba4efdd92c85bd222"}], "stats": {"total": 50, "additions": 22, "deletions": 28}, "files": [{"sha": "121146d855c2e4a0d3a658321e415bd3726a5ce2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bad5e58a9fdbf6c090ff2adcc4022e1788173ccb", "patch": "@@ -1,3 +1,15 @@\n+2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_WHILE): Add UNSPEC_WHILERW\n+\tand UNSPEC_WHILEWR.\n+\t(while_optab_cmp): Handle them.\n+\t* config/aarch64/aarch64-sve.md\n+\t(*while_<while_optab_cmp><GPI:mode><PRED_ALL:mode>_ptest): Make public\n+\tand add a \"@\" marker.\n+\t* config/aarch64/aarch64-sve2.md (check_<raw_war>_ptrs<mode>): Use it\n+\tinstead of gen_aarch64_sve2_while_ptest.\n+\t(@aarch64_sve2_while<cmp_op><GPI:mode><PRED_ALL:mode>_ptest): Delete.\n+\n 2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.md (UNSPEC_WHILE_LE): Rename to..."}, {"sha": "fcb674f2c498ff18bdf440c13d5ac97411222bf1", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=bad5e58a9fdbf6c090ff2adcc4022e1788173ccb", "patch": "@@ -6839,6 +6839,8 @@\n ;; - WHILELO\n ;; - WHILELS\n ;; - WHILELT\n+;; - WHILERW (SVE2)\n+;; - WHILEWR (SVE2)\n ;; -------------------------------------------------------------------------\n \n ;; Set element I of the result if (cmp (plus operand1 J) operand2) is\n@@ -6883,7 +6885,7 @@\n )\n \n ;; Same, but handle the case in which only the flags result is useful.\n-(define_insn_and_rewrite \"*while_<while_optab_cmp><GPI:mode><PRED_ALL:mode>_ptest\"\n+(define_insn_and_rewrite \"@while_<while_optab_cmp><GPI:mode><PRED_ALL:mode>_ptest\"\n   [(set (reg:CC_NZC CC_REGNUM)\n \t(unspec:CC_NZC\n \t  [(match_operand 3)"}, {"sha": "349d0c4df827de3dcd4c548615068629b2f8db7a", "filename": "gcc/config/aarch64/aarch64-sve2.md", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md?ref=bad5e58a9fdbf6c090ff2adcc4022e1788173ccb", "patch": "@@ -353,7 +353,7 @@\n \n   /* Emit a WHILERW or WHILEWR, setting the condition codes based on\n      the result.  */\n-  emit_insn (gen_aarch64_sve2_while_ptest\n+  emit_insn (gen_while_ptest\n \t     (<SVE2_WHILE_PTR:unspec>, <MODE>mode, pred_mode,\n \t      gen_rtx_SCRATCH (pred_mode), operands[1], operands[2],\n \t      CONSTM1_RTX (VNx16BImode), CONSTM1_RTX (pred_mode)));\n@@ -365,27 +365,3 @@\n   emit_insn (gen_aarch64_cstore<mode> (operands[0], cmp, cc_reg));\n   DONE;\n })\n-\n-;; A WHILERW or WHILEWR in which only the flags result is interesting.\n-(define_insn_and_rewrite \"@aarch64_sve2_while<cmp_op><GPI:mode><PRED_ALL:mode>_ptest\"\n-  [(set (reg:CC_NZC CC_REGNUM)\n-\t(unspec:CC_NZC\n-\t  [(match_operand 3)\n-\t   (match_operand 4)\n-\t   (const_int SVE_KNOWN_PTRUE)\n-\t   (unspec:PRED_ALL\n-\t     [(match_operand:GPI 1 \"register_operand\" \"r\")\n-\t      (match_operand:GPI 2 \"register_operand\" \"r\")]\n-\t     SVE2_WHILE_PTR)]\n-\t  UNSPEC_PTEST))\n-   (clobber (match_scratch:PRED_ALL 0 \"=Upa\"))]\n-  \"TARGET_SVE2\"\n-  \"while<cmp_op>\\t%0.<PRED_ALL:Vetype>, %x1, %x2\"\n-  ;; Force the compiler to drop the unused predicate operand, so that we\n-  ;; don't have an unnecessary PTRUE.\n-  \"&& (!CONSTANT_P (operands[3]) || !CONSTANT_P (operands[4]))\"\n-  {\n-    operands[3] = CONSTM1_RTX (VNx16BImode);\n-    operands[4] = CONSTM1_RTX (<PRED_ALL:MODE>mode);\n-  }\n-)"}, {"sha": "c6b71a6e17a967d23861ce781088dd1bf9998c2d", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad5e58a9fdbf6c090ff2adcc4022e1788173ccb/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=bad5e58a9fdbf6c090ff2adcc4022e1788173ccb", "patch": "@@ -2083,7 +2083,9 @@\n \t\t\t\t\t   UNSPEC_FCMLA180 UNSPEC_FCMLA270])\n \n (define_int_iterator SVE_WHILE [UNSPEC_WHILELE UNSPEC_WHILELO\n-\t\t\t\tUNSPEC_WHILELS UNSPEC_WHILELT])\n+\t\t\t\tUNSPEC_WHILELS UNSPEC_WHILELT\n+\t\t\t\t(UNSPEC_WHILERW \"TARGET_SVE2\")\n+\t\t\t\t(UNSPEC_WHILEWR \"TARGET_SVE2\")])\n \n (define_int_iterator SVE2_WHILE_PTR [UNSPEC_WHILERW UNSPEC_WHILEWR])\n \n@@ -2496,7 +2498,9 @@\n (define_int_attr while_optab_cmp [(UNSPEC_WHILELE \"le\")\n \t\t\t\t  (UNSPEC_WHILELO \"ult\")\n \t\t\t\t  (UNSPEC_WHILELS \"ule\")\n-\t\t\t\t  (UNSPEC_WHILELT \"lt\")])\n+\t\t\t\t  (UNSPEC_WHILELT \"lt\")\n+\t\t\t\t  (UNSPEC_WHILERW \"rw\")\n+\t\t\t\t  (UNSPEC_WHILEWR \"wr\")])\n \n (define_int_attr raw_war [(UNSPEC_WHILERW \"raw\")\n \t\t\t  (UNSPEC_WHILEWR \"war\")])"}]}