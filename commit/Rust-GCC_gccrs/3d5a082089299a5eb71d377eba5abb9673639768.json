{"sha": "3d5a082089299a5eb71d377eba5abb9673639768", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q1YTA4MjA4OTI5OWE1ZWI3MWQzNzdlYmE1YWJiOTY3MzYzOTc2OA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-04-27T10:26:39Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-04-27T10:26:39Z"}, "message": "sh.c (sh_expand_prologue, [...]): If TARGET_DOUBLE_ALIGN, preserve 64 bit stack alignment.\n\n        * sh.c (sh_expand_prologue, sh_expand_epilogue):\n        If TARGET_DOUBLE_ALIGN, preserve 64 bit stack alignment.\n        * sh.h (STACK_BOUNDARY): Likewise.\n\nFrom-SVN: r19430", "tree": {"sha": "f32a9f1b36e8b31f588d8a9103bde6556099a10d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f32a9f1b36e8b31f588d8a9103bde6556099a10d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d5a082089299a5eb71d377eba5abb9673639768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d5a082089299a5eb71d377eba5abb9673639768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d5a082089299a5eb71d377eba5abb9673639768", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d5a082089299a5eb71d377eba5abb9673639768/comments", "author": null, "committer": null, "parents": [{"sha": "515d3c17839c92e67876331a2439ac48206cb4ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515d3c17839c92e67876331a2439ac48206cb4ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515d3c17839c92e67876331a2439ac48206cb4ea"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "0390e7a58b88f11bd81afa1d77b5ed054302a72a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d5a082089299a5eb71d377eba5abb9673639768/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d5a082089299a5eb71d377eba5abb9673639768/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d5a082089299a5eb71d377eba5abb9673639768", "patch": "@@ -1,3 +1,9 @@\n+Mon Apr 27 18:23:51 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+        * sh.c (sh_expand_prologue, sh_expand_epilogue):\n+        If TARGET_DOUBLE_ALIGN, preserve 64 bit stack alignment.\n+        * sh.h (STACK_BOUNDARY): Likewise.\n+\n Mon Apr 27 17:22:48 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* sh.h (LEGITIMIZE_RELOAD_ADDRESS): Define."}, {"sha": "03f6b8a5f5a6a985eac4adbf00e4f81fa2bcc1c4", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d5a082089299a5eb71d377eba5abb9673639768/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d5a082089299a5eb71d377eba5abb9673639768/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=3d5a082089299a5eb71d377eba5abb9673639768", "patch": "@@ -3467,6 +3467,7 @@ sh_expand_prologue ()\n   int live_regs_mask;\n   int d, i;\n   int live_regs_mask2;\n+  int double_align = 0;\n \n   /* We have pretend args if we had an object sent partially in registers\n      and partially on the stack, e.g. a large structure.  */\n@@ -3505,7 +3506,11 @@ sh_expand_prologue ()\n   live_regs_mask = calc_live_regs (&d, &live_regs_mask2);\n   push_regs (live_regs_mask, live_regs_mask2);\n \n-  output_stack_adjust (-get_frame_size (), stack_pointer_rtx, 3);\n+  if (TARGET_ALIGN_DOUBLE && d & 1)\n+    double_align = 4;\n+\n+  output_stack_adjust (-get_frame_size () - double_align,\n+\t\t       stack_pointer_rtx, 3);\n \n   if (frame_pointer_needed)\n     emit_insn (gen_movsi (frame_pointer_rtx, stack_pointer_rtx));\n@@ -3518,10 +3523,16 @@ sh_expand_epilogue ()\n   int d, i;\n \n   int live_regs_mask2;\n+  int frame_size = get_frame_size ();\n+\n+  live_regs_mask = calc_live_regs (&d, &live_regs_mask2);\n+\n+  if (TARGET_ALIGN_DOUBLE && d & 1)\n+    frame_size += 4;\n \n   if (frame_pointer_needed)\n     {\n-      output_stack_adjust (get_frame_size (), frame_pointer_rtx, 7);\n+      output_stack_adjust (frame_size, frame_pointer_rtx, 7);\n \n       /* We must avoid moving the stack pointer adjustment past code\n \t which reads from the local frame, else an interrupt could\n@@ -3530,14 +3541,14 @@ sh_expand_epilogue ()\n       emit_insn (gen_blockage ());\n       emit_insn (gen_movsi (stack_pointer_rtx, frame_pointer_rtx));\n     }\n-  else if (get_frame_size ())\n+  else if (frame_size)\n     {\n       /* We must avoid moving the stack pointer adjustment past code\n \t which reads from the local frame, else an interrupt could\n \t occur after the SP adjustment and clobber data in the local\n \t frame.  */\n       emit_insn (gen_blockage ());\n-      output_stack_adjust (get_frame_size (), stack_pointer_rtx, 7);\n+      output_stack_adjust (frame_size, stack_pointer_rtx, 7);\n     }\n \n   /* Pop all the registers.  */"}, {"sha": "dce9acb1acdbe24eb600abd762a7eb382ce71638", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d5a082089299a5eb71d377eba5abb9673639768/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d5a082089299a5eb71d377eba5abb9673639768/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=3d5a082089299a5eb71d377eba5abb9673639768", "patch": "@@ -231,7 +231,7 @@ do {\t\t\t\t\t\t\t\t\\\n #define PARM_BOUNDARY  \t32\n \n /* Boundary (in *bits*) on which stack pointer should be aligned.  */\n-#define STACK_BOUNDARY  32\n+#define STACK_BOUNDARY  BIGGEST_ALIGNMENT\n \n /* The log (base 2) of the cache line size, in bytes.  Processors prior to\n    SH3 have no actual cache, but they fetch code in chunks of 4 bytes.  */"}, {"sha": "a7c9c2ea48bec13b0ecb73d2ebc45d48de95f4b3", "filename": "gcc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d5a082089299a5eb71d377eba5abb9673639768/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d5a082089299a5eb71d377eba5abb9673639768/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=3d5a082089299a5eb71d377eba5abb9673639768", "patch": "@@ -371,7 +371,7 @@ in the following sections.\n -mrelax  -mh -ms -mint32  -malign-300\n \n @emph{SH Options}\n--m1  -m2  -m3  -m3e  -mb  -ml  -mrelax\n+-m1  -m2  -m3  -m3e  -mb  -ml  -mdalign -mrelax\n \n @emph{System V Options}\n -Qy  -Qn  -YP,@var{paths}  -Ym,@var{dir}\n@@ -5373,6 +5373,11 @@ Compile code for the processor in big endian mode.\n @item -ml\n Compile code for the processor in little endian mode.\n \n+@item -mdalign\n+Align doubles at 64 bit boundaries.  Note that this changes the calling\n+conventions, and thus some functions from the standard C library will\n+not work unless you recompile it first with -mdalign.\n+\n @item -mrelax\n Shorten some address references at link time, when possible; uses the\n linker option @samp{-relax}."}]}