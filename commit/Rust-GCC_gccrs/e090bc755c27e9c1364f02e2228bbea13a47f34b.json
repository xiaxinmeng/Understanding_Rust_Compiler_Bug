{"sha": "e090bc755c27e9c1364f02e2228bbea13a47f34b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA5MGJjNzU1YzI3ZTljMTM2NGYwMmUyMjI4YmJlYTEzYTQ3ZjM0Yg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-06-06T10:45:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:45:10Z"}, "message": "sem_elab.adb (Check_A_Call): Specialize elaboration warnings on elaboration model\n\n2007-04-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_elab.adb (Check_A_Call): Specialize elaboration warnings on\n\telaboration model\n\t(Check_A_Call): Add check for entry call which was causing blowup\n\nFrom-SVN: r125454", "tree": {"sha": "4569330292f1252ae7b202f0b87a0d7db344a58f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4569330292f1252ae7b202f0b87a0d7db344a58f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e090bc755c27e9c1364f02e2228bbea13a47f34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e090bc755c27e9c1364f02e2228bbea13a47f34b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e090bc755c27e9c1364f02e2228bbea13a47f34b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e090bc755c27e9c1364f02e2228bbea13a47f34b/comments", "author": null, "committer": null, "parents": [{"sha": "f377c995c321326e3ec619bc4aea45fc27ce8281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f377c995c321326e3ec619bc4aea45fc27ce8281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f377c995c321326e3ec619bc4aea45fc27ce8281"}], "stats": {"total": 91, "additions": 65, "deletions": 26}, "files": [{"sha": "bae6a9fd96e681e1c0e44089ebfaa0cc93ff69b5", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 65, "deletions": 26, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e090bc755c27e9c1364f02e2228bbea13a47f34b/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e090bc755c27e9c1364f02e2228bbea13a47f34b/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=e090bc755c27e9c1364f02e2228bbea13a47f34b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -849,38 +849,77 @@ package body Sem_Elab is\n            and then Elab_Warnings\n            and then Generate_Warnings\n          then\n-            if Inst_Case then\n-               Error_Msg_NE\n-                 (\"instantiation of& may raise Program_Error?\", N, Ent);\n+            Generate_Elab_Warnings : declare\n+               procedure Elab_Warning\n+                 (Msg_D : String;\n+                  Msg_S : String;\n+                  Ent   : Node_Or_Entity_Id);\n+               --  Generate a call to Error_Msg_NE with parameters Msg_D or\n+               --  Msg_S (for dynamic or static elaboration model), N and Ent.\n+\n+               ------------------\n+               -- Elab_Warning --\n+               ------------------\n+\n+               procedure Elab_Warning\n+                 (Msg_D : String;\n+                  Msg_S : String;\n+                  Ent   : Node_Or_Entity_Id)\n+               is\n+               begin\n+                  if Dynamic_Elaboration_Checks then\n+                     Error_Msg_NE (Msg_D, N, Ent);\n+                  else\n+                     Error_Msg_NE (Msg_S, N, Ent);\n+                  end if;\n+               end Elab_Warning;\n \n-            else\n-               if Is_Init_Proc (Entity (Name (N)))\n-                 and then Comes_From_Source (Ent)\n-               then\n-                  Error_Msg_NE\n-                    (\"implicit call to & may raise Program_Error?\", N, Ent);\n+            --  Start of processing for Generate_Elab_Warnings\n+\n+            begin\n+               if Inst_Case then\n+                  Elab_Warning\n+                    (\"instantiation of& may raise Program_Error?\",\n+                     \"instantiation of& during elaboration?\", Ent);\n \n                else\n-                  Error_Msg_NE\n-                    (\"call to & may raise Program_Error?\", N, Ent);\n+                  if Nkind (Name (N)) in N_Has_Entity\n+                    and then Is_Init_Proc (Entity (Name (N)))\n+                    and then Comes_From_Source (Ent)\n+                  then\n+                     Elab_Warning\n+                       (\"implicit call to & may raise Program_Error?\",\n+                        \"implicit call to & during elaboration?\",\n+                        Ent);\n+\n+                  else\n+                     Elab_Warning\n+                       (\"call to & may raise Program_Error?\",\n+                        \"call to & during elaboration?\",\n+                        Ent);\n+                  end if;\n                end if;\n-            end if;\n \n-            Error_Msg_Qual_Level := Nat'Last;\n+               Error_Msg_Qual_Level := Nat'Last;\n \n-            if Nkind (N) in N_Subprogram_Instantiation then\n-               Error_Msg_NE\n-                 (\"\\missing pragma Elaborate for&?\", N, W_Scope);\n-            else\n-               Error_Msg_NE\n-                 (\"\\missing pragma Elaborate_All for&?\", N, W_Scope);\n-            end if;\n+               if Nkind (N) in N_Subprogram_Instantiation then\n+                  Elab_Warning\n+                    (\"\\missing pragma Elaborate for&?\",\n+                     \"\\implicit pragma Elaborate for& generated?\",\n+                     W_Scope);\n+               else\n+                  Elab_Warning\n+                    (\"\\missing pragma Elaborate_All for&?\",\n+                     \"\\implicit pragma Elaborate_All for & generated?\",\n+                     W_Scope);\n+               end if;\n+            end Generate_Elab_Warnings;\n \n             Error_Msg_Qual_Level := 0;\n             Output_Calls (N);\n \n-            --  Set flag to prevent further warnings for same unit\n-            --  unless in All_Errors_Mode.\n+            --  Set flag to prevent further warnings for same unit unless in\n+            --  All_Errors_Mode.\n \n             if not All_Errors_Mode and not Dynamic_Elaboration_Checks then\n                Set_Suppress_Elaboration_Warnings (W_Scope, True);\n@@ -1695,7 +1734,7 @@ package body Sem_Elab is\n          Expander_Mode_Save_And_Set (True);\n \n          for J in Delay_Check.First .. Delay_Check.Last loop\n-            New_Scope (Delay_Check.Table (J).Curscop);\n+            Push_Scope (Delay_Check.Table (J).Curscop);\n             From_Elab_Code := Delay_Check.Table (J).From_Elab_Code;\n \n             Check_Internal_Call_Continue (\n@@ -2114,7 +2153,7 @@ package body Sem_Elab is\n \n                begin\n                   Set_Elaboration_Entity (E, Ent);\n-                  New_Scope (Scope (E));\n+                  Push_Scope (Scope (E));\n \n                   Insert_Action (Declaration_Node (E),\n                     Make_Object_Declaration (Loce,\n@@ -3017,7 +3056,7 @@ package body Sem_Elab is\n          declare\n             Spec : constant Node_Id := Specification (N);\n          begin\n-            New_Scope (Defining_Unit_Name (Spec));\n+            Push_Scope (Defining_Unit_Name (Spec));\n             Supply_Bodies (Visible_Declarations (Spec));\n             Supply_Bodies (Private_Declarations (Spec));\n             Pop_Scope;"}]}