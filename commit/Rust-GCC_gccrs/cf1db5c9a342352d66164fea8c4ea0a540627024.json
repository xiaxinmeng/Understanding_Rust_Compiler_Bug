{"sha": "cf1db5c9a342352d66164fea8c4ea0a540627024", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YxZGI1YzlhMzQyMzUyZDY2MTY0ZmVhOGM0ZWEwYTU0MDYyNzAyNA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-02-12T10:04:42Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-02-14T08:20:43Z"}, "message": "Intrinsic macro of vpshr* and vpshl* lack a closing parenthesis which would cause failure in O0.\n\n2020-02-14 Hongtao Liu  <hongtao.liu@intel.com>\n\ngcc/\n\tPR target/93724\n\t* config/i386/avx512vbmi2intrin.h\n\t(_mm512_shrdi_epi16, _mm512_mask_shrdi_epi16,\n\t_mm512_maskz_shrdi_epi16, _mm512_shrdi_epi32,\n\t_mm512_mask_shrdi_epi32, _mm512_maskz_shrdi_epi32,\n\t_m512_shrdi_epi64, _m512_mask_shrdi_epi64,\n\t_m512_maskz_shrdi_epi64, _mm512_shldi_epi16,\n\t_mm512_mask_shldi_epi16, _mm512_maskz_shldi_epi16,\n\t_mm512_shldi_epi32, _mm512_mask_shldi_epi32,\n\t_mm512_maskz_shldi_epi32, _mm512_shldi_epi64,\n\t_mm512_mask_shldi_epi64, _mm512_maskz_shldi_epi64): Fix typo\n\tof lacking a closing parenthesis.\n\t* config/i386/avx512vbmi2vlintrin.h\n\t(_mm256_shrdi_epi16, _mm256_mask_shrdi_epi16,\n\t_mm256_maskz_shrdi_epi16, _mm256_shrdi_epi32,\n\t_mm256_mask_shrdi_epi32, _mm256_maskz_shrdi_epi32,\n\t_m256_shrdi_epi64, _m256_mask_shrdi_epi64,\n\t_m256_maskz_shrdi_epi64, _mm256_shldi_epi16,\n\t_mm256_mask_shldi_epi16, _mm256_maskz_shldi_epi16,\n\t_mm256_shldi_epi32, _mm256_mask_shldi_epi32,\n\t_mm256_maskz_shldi_epi32, _mm256_shldi_epi64,\n\t_mm256_mask_shldi_epi64, _mm256_maskz_shldi_epi64,\n\t_mm_shrdi_epi16, _mm_mask_shrdi_epi16,\n\t_mm_maskz_shrdi_epi16, _mm_shrdi_epi32,\n\t_mm_mask_shrdi_epi32, _mm_maskz_shrdi_epi32,\n\t_mm_shrdi_epi64, _mm_mask_shrdi_epi64,\n\t_m_maskz_shrdi_epi64, _mm_shldi_epi16,\n\t_mm_mask_shldi_epi16, _mm_maskz_shldi_epi16,\n\t_mm_shldi_epi32, _mm_mask_shldi_epi32,\n\t_mm_maskz_shldi_epi32, _mm_shldi_epi64,\n\t_mm_mask_shldi_epi64, _mm_maskz_shldi_epi64): Ditto.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512vbmi2-vpshld-1.c: New test.\n\t* gcc.target/i386/avx512vbmi2-vpshrd-1.c: Ditto.\n\t* gcc.target/i386/sse-12.c: Add -mavx512vbmi2.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add -mavx512vbmi2 and tests.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "b337c07d61edd2aec72b375656d2b5088317d1d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b337c07d61edd2aec72b375656d2b5088317d1d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf1db5c9a342352d66164fea8c4ea0a540627024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf1db5c9a342352d66164fea8c4ea0a540627024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf1db5c9a342352d66164fea8c4ea0a540627024", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf1db5c9a342352d66164fea8c4ea0a540627024/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e235031d490e8ed2aa0bc229694975493fd58977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e235031d490e8ed2aa0bc229694975493fd58977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e235031d490e8ed2aa0bc229694975493fd58977"}], "stats": {"total": 449, "additions": 352, "deletions": 97}, "files": [{"sha": "5114d4d79f59d8f35cc701b29c4c3232399b3ecd", "filename": "gcc/config/i386/avx512vbmi2intrin.h", "status": "modified", "additions": 59, "deletions": 31, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h?ref=cf1db5c9a342352d66164fea8c4ea0a540627024", "patch": "@@ -151,50 +151,68 @@ _mm512_maskz_shldi_epi64 (__mmask8 __A, __m512i __B, __m512i __C, int __D)\n #else\n #define _mm512_shrdi_epi16(A, B, C) \\\n   ((__m512i) __builtin_ia32_vpshrd_v32hi ((__v32hi)(__m512i)(A), \\\n-\t\t\t\t\t\t(__v32hi)(__m512i)(B),(int)(C))\n+\t\t\t\t\t  (__v32hi)(__m512i)(B),(int)(C)))\n #define _mm512_shrdi_epi32(A, B, C) \\\n   ((__m512i) __builtin_ia32_vpshrd_v16si ((__v16si)(__m512i)(A), \\\n-\t(__v16si)(__m512i)(B),(int)(C))\n+\t\t\t\t\t  (__v16si)(__m512i)(B),(int)(C)))\n #define _mm512_mask_shrdi_epi32(A, B, C, D, E) \\\n   ((__m512i) __builtin_ia32_vpshrd_v16si_mask ((__v16si)(__m512i)(C), \\\n-\t(__v16si)(__m512i)(D), (int)(E), (__v16si)(__m512i)(A),(__mmask16)(B))\n+\t\t\t\t\t       (__v16si)(__m512i)(D), \\\n+\t\t\t\t\t       (int)(E),\t\t\\\n+\t\t\t\t\t       (__v16si)(__m512i)(A),\t\\\n+\t\t\t\t\t       (__mmask16)(B)))\n #define _mm512_maskz_shrdi_epi32(A, B, C, D) \\\n-  ((__m512i) __builtin_ia32_vpshrd_v16si_mask ((__v16si)(__m512i)(B), \\\n-\t(__v16si)(__m512i)(C),(int)(D), \\\n-\t(__v16si)(__m512i)_mm512_setzero_si512 (), (__mmask16)(A))\n+  ((__m512i) \\\n+   __builtin_ia32_vpshrd_v16si_mask ((__v16si)(__m512i)(B),\t\t\\\n+\t\t\t\t     (__v16si)(__m512i)(C),(int)(D),\t\\\n+\t\t\t\t     (__v16si)(__m512i)_mm512_setzero_si512 (), \\\n+\t\t\t\t     (__mmask16)(A)))\n #define _mm512_shrdi_epi64(A, B, C) \\\n   ((__m512i) __builtin_ia32_vpshrd_v8di ((__v8di)(__m512i)(A), \\\n-\t(__v8di)(__m512i)(B),(int)(C))\n+\t\t\t\t\t (__v8di)(__m512i)(B),(int)(C)))\n #define _mm512_mask_shrdi_epi64(A, B, C, D, E) \\\n   ((__m512i) __builtin_ia32_vpshrd_v8di_mask ((__v8di)(__m512i)(C), \\\n-\t(__v8di)(__m512i)(D), (int)(E), (__v8di)(__m512i)(A),(__mmask8)(B))\n+\t\t\t\t\t      (__v8di)(__m512i)(D), (int)(E), \\\n+\t\t\t\t\t      (__v8di)(__m512i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm512_maskz_shrdi_epi64(A, B, C, D) \\\n-  ((__m512i) __builtin_ia32_vpshrd_v8di_mask ((__v8di)(__m512i)(B), \\\n-\t(__v8di)(__m512i)(C),(int)(D), \\\n-\t(__v8di)(__m512i)_mm512_setzero_si512 (), (__mmask8)(A))\n+  ((__m512i) \\\n+   __builtin_ia32_vpshrd_v8di_mask ((__v8di)(__m512i)(B),\t\t\\\n+\t\t\t\t    (__v8di)(__m512i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v8di)(__m512i)_mm512_setzero_si512 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #define _mm512_shldi_epi16(A, B, C) \\\n   ((__m512i) __builtin_ia32_vpshld_v32hi ((__v32hi)(__m512i)(A), \\\n-\t\t\t\t\t\t(__v32hi)(__m512i)(B),(int)(C))\n+\t\t\t\t\t  (__v32hi)(__m512i)(B),(int)(C)))\n #define _mm512_shldi_epi32(A, B, C) \\\n-  ((__m512i) __builtin_ia32_vpshld_v16si ((__v16si)(__m512i)(A), \t\\\n-\t\t\t\t(__v16si)(__m512i)(B),(int)(C))\n+  ((__m512i) __builtin_ia32_vpshld_v16si ((__v16si)(__m512i)(A),\t\\\n+\t\t\t\t\t  (__v16si)(__m512i)(B),(int)(C)))\n #define _mm512_mask_shldi_epi32(A, B, C, D, E) \\\n   ((__m512i) __builtin_ia32_vpshld_v16si_mask ((__v16si)(__m512i)(C), \\\n-\t(__v16si)(__m512i)(D), (int)(E), (__v16si)(__m512i)(A),(__mmask16)(B))\n+\t\t\t\t\t       (__v16si)(__m512i)(D), \\\n+\t\t\t\t\t       (int)(E),\t\t\\\n+\t\t\t\t\t       (__v16si)(__m512i)(A), \\\n+\t\t\t\t\t       (__mmask16)(B)))\n #define _mm512_maskz_shldi_epi32(A, B, C, D) \\\n-  ((__m512i) __builtin_ia32_vpshld_v16si_mask ((__v16si)(__m512i)(B), \\\n-\t(__v16si)(__m512i)(C),(int)(D), \\\n-\t(__v16si)(__m512i)_mm512_setzero_si512 (), (__mmask16)(A))\n+  ((__m512i) \\\n+   __builtin_ia32_vpshld_v16si_mask ((__v16si)(__m512i)(B),\t\t\\\n+\t\t\t\t     (__v16si)(__m512i)(C),(int)(D),\t\\\n+\t\t\t\t     (__v16si)(__m512i)_mm512_setzero_si512 (), \\\n+\t\t\t\t     (__mmask16)(A)))\n #define _mm512_shldi_epi64(A, B, C) \\\n   ((__m512i) __builtin_ia32_vpshld_v8di ((__v8di)(__m512i)(A), \\\n-\t(__v8di)(__m512i)(B),(int)(C))\n+\t\t\t\t\t (__v8di)(__m512i)(B), (int)(C)))\n #define _mm512_mask_shldi_epi64(A, B, C, D, E) \\\n   ((__m512i) __builtin_ia32_vpshld_v8di_mask ((__v8di)(__m512i)(C), \\\n-\t(__v8di)(__m512i)(D), (int)(E), (__v8di)(__m512i)(A),(__mmask8)(B))\n+\t\t\t\t\t      (__v8di)(__m512i)(D), (int)(E), \\\n+\t\t\t\t\t      (__v8di)(__m512i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm512_maskz_shldi_epi64(A, B, C, D) \\\n-  ((__m512i) __builtin_ia32_vpshld_v8di_mask ((__v8di)(__m512i)(B), \\\n-\t(__v8di)(__m512i)(C),(int)(D), \\\n-\t(__v8di)(__m512i)_mm512_setzero_si512 (), (__mmask8)(A))\n+  ((__m512i) \\\n+   __builtin_ia32_vpshld_v8di_mask ((__v8di)(__m512i)(B),\t\t\\\n+\t\t\t\t    (__v8di)(__m512i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v8di)(__m512i)_mm512_setzero_si512 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #endif\n \n extern __inline __m512i\n@@ -474,18 +492,28 @@ _mm512_maskz_shldi_epi16 (__mmask32 __A, __m512i __B, __m512i __C, int __D)\n #else\n #define _mm512_mask_shrdi_epi16(A, B, C, D, E) \\\n   ((__m512i) __builtin_ia32_vpshrd_v32hi_mask ((__v32hi)(__m512i)(C), \\\n-\t(__v32hi)(__m512i)(D), (int)(E), (__v32hi)(__m512i)(A),(__mmask32)(B))\n+\t\t\t\t\t       (__v32hi)(__m512i)(D), \\\n+\t\t\t\t\t       (int)(E),\t\t\\\n+\t\t\t\t\t       (__v32hi)(__m512i)(A),\t\\\n+\t\t\t\t\t       (__mmask32)(B)))\n #define _mm512_maskz_shrdi_epi16(A, B, C, D) \\\n-  ((__m512i) __builtin_ia32_vpshrd_v32hi_mask ((__v32hi)(__m512i)(B), \\\n-\t(__v32hi)(__m512i)(C),(int)(D), \\\n-\t(__v32hi)(__m512i)_mm512_setzero_si512 (), (__mmask32)(A))\n+  ((__m512i) \\\n+   __builtin_ia32_vpshrd_v32hi_mask ((__v32hi)(__m512i)(B),\t\t\\\n+\t\t\t\t     (__v32hi)(__m512i)(C),(int)(D),\t\\\n+\t\t\t\t     (__v32hi)(__m512i)_mm512_setzero_si512 (), \\\n+\t\t\t\t     (__mmask32)(A)))\n #define _mm512_mask_shldi_epi16(A, B, C, D, E) \\\n   ((__m512i) __builtin_ia32_vpshld_v32hi_mask ((__v32hi)(__m512i)(C), \\\n-\t(__v32hi)(__m512i)(D), (int)(E), (__v32hi)(__m512i)(A),(__mmask32)(B))\n+\t\t\t\t\t       (__v32hi)(__m512i)(D), \\\n+\t\t\t\t\t       (int)(E), \\\n+\t\t\t\t\t       (__v32hi)(__m512i)(A),\t\\\n+\t\t\t\t\t       (__mmask32)(B)))\n #define _mm512_maskz_shldi_epi16(A, B, C, D) \\\n-  ((__m512i) __builtin_ia32_vpshld_v32hi_mask ((__v32hi)(__m512i)(B),   \\\n-\t(__v32hi)(__m512i)(C),(int)(D), \t\t\t\t\\\n-\t(__v32hi)(__m512i)_mm512_setzero_si512 (), (__mmask32)(A))\n+  ((__m512i) \\\n+   __builtin_ia32_vpshld_v32hi_mask ((__v32hi)(__m512i)(B),\t\t\\\n+\t\t\t\t     (__v32hi)(__m512i)(C),(int)(D),\t\\\n+\t\t\t\t     (__v32hi)(__m512i)_mm512_setzero_si512 (), \\\n+\t\t\t\t     (__mmask32)(A)))\n #endif\n \n extern __inline __m512i"}, {"sha": "3ab44ae4d418a29f58e90c7fe73b5eead119100a", "filename": "gcc/config/i386/avx512vbmi2vlintrin.h", "status": "modified", "additions": 112, "deletions": 61, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h?ref=cf1db5c9a342352d66164fea8c4ea0a540627024", "patch": "@@ -498,124 +498,175 @@ _mm_shldi_epi64 (__m128i __A, __m128i __B, int __C)\n #else\n #define _mm256_shrdi_epi16(A, B, C) \\\n   ((__m256i) __builtin_ia32_vpshrd_v16hi ((__v16hi)(__m256i)(A), \\\n-\t(__v16hi)(__m256i)(B),(int)(C))\n+\t\t\t\t\t  (__v16hi)(__m256i)(B),(int)(C)))\n #define _mm256_mask_shrdi_epi16(A, B, C, D, E) \\\n   ((__m256i) __builtin_ia32_vpshrd_v16hi_mask ((__v16hi)(__m256i)(C), \\\n-\t(__v16hi)(__m256i)(D), (int)(E), (__v16hi)(__m256i)(A),(__mmask16)(B))\n+\t\t\t\t\t       (__v16hi)(__m256i)(D), \\\n+\t\t\t\t\t       (int)(E),\t\t\\\n+\t\t\t\t\t       (__v16hi)(__m256i)(A), \\\n+\t\t\t\t\t       (__mmask16)(B)))\n #define _mm256_maskz_shrdi_epi16(A, B, C, D) \\\n-  ((__m256i) __builtin_ia32_vpshrd_v16hi_mask ((__v16hi)(__m256i)(B), \\\n-\t(__v16hi)(__m256i)(C),(int)(D), \\\n-\t(__v16hi)(__m256i)_mm256_setzero_si256 (), (__mmask16)(A))\n+  ((__m256i) \\\n+   __builtin_ia32_vpshrd_v16hi_mask ((__v16hi)(__m256i)(B),\t\t\\\n+\t\t\t\t     (__v16hi)(__m256i)(C),(int)(D),\t\\\n+\t\t\t\t     (__v16hi)(__m256i)_mm256_setzero_si256 (), \\\n+\t\t\t\t     (__mmask16)(A)))\n #define _mm256_shrdi_epi32(A, B, C) \\\n   ((__m256i) __builtin_ia32_vpshrd_v8si ((__v8si)(__m256i)(A), \\\n-\t(__v8si)(__m256i)(B),(int)(C))\n+\t\t\t\t\t (__v8si)(__m256i)(B),(int)(C)))\n #define _mm256_mask_shrdi_epi32(A, B, C, D, E) \\\n   ((__m256i) __builtin_ia32_vpshrd_v8si_mask ((__v8si)(__m256i)(C), \\\n-\t(__v8si)(__m256i)(D), (int)(E), (__v8si)(__m256i)(A),(__mmask8)(B))\n+\t\t\t\t\t      (__v8si)(__m256i)(D), \\\n+\t\t\t\t\t      (int)(E), \\\n+\t\t\t\t\t      (__v8si)(__m256i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm256_maskz_shrdi_epi32(A, B, C, D) \\\n-  ((__m256i) __builtin_ia32_vpshrd_v8si_mask ((__v8si)(__m256i)(B), \\\n-\t(__v8si)(__m256i)(C),(int)(D), \\\n-\t(__v8si)(__m256i)_mm256_setzero_si256 (), (__mmask8)(A))\n+  ((__m256i) \\\n+   __builtin_ia32_vpshrd_v8si_mask ((__v8si)(__m256i)(B),\t\t\\\n+\t\t\t\t    (__v8si)(__m256i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v8si)(__m256i)_mm256_setzero_si256 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #define _mm256_shrdi_epi64(A, B, C) \\\n   ((__m256i) __builtin_ia32_vpshrd_v4di ((__v4di)(__m256i)(A), \\\n-\t(__v4di)(__m256i)(B),(int)(C))\n+\t\t\t\t\t (__v4di)(__m256i)(B),(int)(C)))\n #define _mm256_mask_shrdi_epi64(A, B, C, D, E) \\\n   ((__m256i) __builtin_ia32_vpshrd_v4di_mask ((__v4di)(__m256i)(C), \\\n-\t(__v4di)(__m256i)(D), (int)(E), (__v4di)(__m256i)(A),(__mmask8)(B))\n+\t\t\t\t\t      (__v4di)(__m256i)(D), (int)(E), \\\n+\t\t\t\t\t      (__v4di)(__m256i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm256_maskz_shrdi_epi64(A, B, C, D) \\\n-  ((__m256i) __builtin_ia32_vpshrd_v4di_mask ((__v4di)(__m256i)(B), \\\n-\t(__v4di)(__m256i)(C),(int)(D), \\\n-\t(__v4di)(__m256i)_mm256_setzero_si256 (), (__mmask8)(A))\n+  ((__m256i) \\\n+   __builtin_ia32_vpshrd_v4di_mask ((__v4di)(__m256i)(B),\t\t\\\n+\t\t\t\t    (__v4di)(__m256i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v4di)(__m256i)_mm256_setzero_si256 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #define _mm_shrdi_epi16(A, B, C) \\\n   ((__m128i) __builtin_ia32_vpshrd_v8hi ((__v8hi)(__m128i)(A), \\\n-\t(__v8hi)(__m128i)(B),(int)(C))\n+\t\t\t\t\t (__v8hi)(__m128i)(B),(int)(C)))\n #define _mm_mask_shrdi_epi16(A, B, C, D, E) \\\n   ((__m128i) __builtin_ia32_vpshrd_v8hi_mask ((__v8hi)(__m128i)(C), \\\n-\t(__v8hi)(__m128i)(D), (int)(E), (__v8hi)(__m128i)(A),(__mmask8)(B))\n+\t\t\t\t\t      (__v8hi)(__m128i)(D), (int)(E), \\\n+\t\t\t\t\t      (__v8hi)(__m128i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm_maskz_shrdi_epi16(A, B, C, D) \\\n-  ((__m128i) __builtin_ia32_vpshrd_v8hi_mask ((__v8hi)(__m128i)(B), \\\n-\t(__v8hi)(__m128i)(C),(int)(D), \\\n-\t(__v8hi)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n+  ((__m128i) \\\n+   __builtin_ia32_vpshrd_v8hi_mask ((__v8hi)(__m128i)(B),\t\t\\\n+\t\t\t\t    (__v8hi)(__m128i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v8hi)(__m128i)_mm_setzero_si128 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #define _mm_shrdi_epi32(A, B, C) \\\n   ((__m128i) __builtin_ia32_vpshrd_v4si ((__v4si)(__m128i)(A), \\\n-\t(__v4si)(__m128i)(B),(int)(C))\n+\t\t\t\t\t (__v4si)(__m128i)(B),(int)(C)))\n #define _mm_mask_shrdi_epi32(A, B, C, D, E) \\\n-  ((__m128i) __builtin_ia32_vpshrd_v4si_mask ((__v4si)(__m128i)(C), \\\n-\t(__v4si)(__m128i)(D), (int)(E), (__v4si)(__m128i)(A),(__mmask8)(B))\n+  ((__m128i) __builtin_ia32_vpshrd_v4si_mask ((__v4si)(__m128i)(C),\t\\\n+\t\t\t\t\t      (__v4si)(__m128i)(D), (int)(E), \\\n+\t\t\t\t\t      (__v4si)(__m128i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm_maskz_shrdi_epi32(A, B, C, D) \\\n-  ((__m128i) __builtin_ia32_vpshrd_v4si_mask ((__v4si)(__m128i)(B), \\\n-\t(__v4si)(__m128i)(C),(int)(D), \\\n-\t(__v4si)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n+  ((__m128i) \\\n+   __builtin_ia32_vpshrd_v4si_mask ((__v4si)(__m128i)(B),\t\t\\\n+\t\t\t\t    (__v4si)(__m128i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v4si)(__m128i)_mm_setzero_si128 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #define _mm_shrdi_epi64(A, B, C) \\\n   ((__m128i) __builtin_ia32_vpshrd_v2di ((__v2di)(__m128i)(A), \\\n-\t(__v2di)(__m128i)(B),(int)(C))\n+\t\t\t\t\t (__v2di)(__m128i)(B),(int)(C)))\n #define _mm_mask_shrdi_epi64(A, B, C, D, E) \\\n   ((__m128i) __builtin_ia32_vpshrd_v2di_mask ((__v2di)(__m128i)(C), \\\n-\t(__v2di)(__m128i)(D), (int)(E), (__v2di)(__m128i)(A),(__mmask8)(B))\n+\t\t\t\t\t      (__v2di)(__m128i)(D), (int)(E), \\\n+\t\t\t\t\t      (__v2di)(__m128i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm_maskz_shrdi_epi64(A, B, C, D) \\\n-  ((__m128i) __builtin_ia32_vpshrd_v2di_mask ((__v2di)(__m128i)(B), \\\n-\t(__v2di)(__m128i)(C),(int)(D), \\\n-\t(__v2di)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n+  ((__m128i) \\\n+   __builtin_ia32_vpshrd_v2di_mask ((__v2di)(__m128i)(B),\t\t\\\n+\t\t\t\t    (__v2di)(__m128i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v2di)(__m128i)_mm_setzero_si128 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #define _mm256_shldi_epi16(A, B, C) \\\n   ((__m256i) __builtin_ia32_vpshld_v16hi ((__v16hi)(__m256i)(A), \\\n-\t\t\t\t\t\t(__v16hi)(__m256i)(B),(int)(C))\n+\t\t\t\t\t  (__v16hi)(__m256i)(B),(int)(C)))\n #define _mm256_mask_shldi_epi16(A, B, C, D, E) \\\n   ((__m256i) __builtin_ia32_vpshld_v16hi_mask ((__v16hi)(__m256i)(C), \\\n-\t(__v16hi)(__m256i)(D), (int)(E), (__v16hi)(__m256i)(A),(__mmask16)(B))\n+\t\t\t\t\t       (__v16hi)(__m256i)(D), \\\n+\t\t\t\t\t       (int)(E),\t\t\\\n+\t\t\t\t\t       (__v16hi)(__m256i)(A), \\\n+\t\t\t\t\t       (__mmask16)(B)))\n #define _mm256_maskz_shldi_epi16(A, B, C, D) \\\n-  ((__m256i) __builtin_ia32_vpshld_v16hi_mask ((__v16hi)(__m256i)(B), \\\n-\t(__v16hi)(__m256i)(C),(int)(D), \\\n-\t(__v16hi)(__m256i)_mm256_setzero_si256 (), (__mmask16)(A))\n+  ((__m256i) \\\n+   __builtin_ia32_vpshld_v16hi_mask ((__v16hi)(__m256i)(B),\t\t\\\n+\t\t\t\t     (__v16hi)(__m256i)(C),(int)(D),\t\\\n+\t\t\t\t     (__v16hi)(__m256i)_mm256_setzero_si256 (), \\\n+\t\t\t\t     (__mmask16)(A)))\n #define _mm256_shldi_epi32(A, B, C) \\\n   ((__m256i) __builtin_ia32_vpshld_v8si ((__v8si)(__m256i)(A), \\\n-\t(__v8si)(__m256i)(B),(int)(C))\n+\t\t\t\t\t (__v8si)(__m256i)(B),(int)(C)))\n #define _mm256_mask_shldi_epi32(A, B, C, D, E) \\\n   ((__m256i) __builtin_ia32_vpshld_v8si_mask ((__v8si)(__m256i)(C), \\\n-\t(__v8si)(__m256i)(D), (int)(E), (__v8si)(__m256i)(A),(__mmask8)(B))\n+\t\t\t\t\t      (__v8si)(__m256i)(D), (int)(E), \\\n+\t\t\t\t\t      (__v8si)(__m256i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm256_maskz_shldi_epi32(A, B, C, D) \\\n-  ((__m256i) __builtin_ia32_vpshld_v8si_mask ((__v8si)(__m256i)(B), \\\n-\t(__v8si)(__m256i)(C),(int)(D), \\\n-\t(__v8si)(__m256i)_mm256_setzero_si256 (), (__mmask8)(A))\n+  ((__m256i) \\\n+   __builtin_ia32_vpshld_v8si_mask ((__v8si)(__m256i)(B),\t\t\\\n+\t\t\t\t    (__v8si)(__m256i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v8si)(__m256i)_mm256_setzero_si256 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #define _mm256_shldi_epi64(A, B, C) \\\n   ((__m256i) __builtin_ia32_vpshld_v4di ((__v4di)(__m256i)(A), \\\n-\t(__v4di)(__m256i)(B),(int)(C))\n+\t\t\t\t\t (__v4di)(__m256i)(B),(int)(C)))\n #define _mm256_mask_shldi_epi64(A, B, C, D, E) \\\n   ((__m256i) __builtin_ia32_vpshld_v4di_mask ((__v4di)(__m256i)(C), \\\n-\t(__v4di)(__m256i)(D), (int)(E), (__v4di)(__m256i)(A),(__mmask8)(B))\n+\t\t\t\t\t      (__v4di)(__m256i)(D), (int)(E), \\\n+\t\t\t\t\t      (__v4di)(__m256i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm256_maskz_shldi_epi64(A, B, C, D) \\\n-  ((__m256i) __builtin_ia32_vpshld_v4di_mask ((__v4di)(__m256i)(B), \\\n-\t(__v4di)(__m256i)(C),(int)(D), \\\n-\t(__v4di)(__m256i)_mm256_setzero_si256 (), (__mmask8)(A))\n+  ((__m256i) \\\n+   __builtin_ia32_vpshld_v4di_mask ((__v4di)(__m256i)(B),\t\t\\\n+\t\t\t\t    (__v4di)(__m256i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v4di)(__m256i)_mm256_setzero_si256 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #define _mm_shldi_epi16(A, B, C) \\\n   ((__m128i) __builtin_ia32_vpshld_v8hi ((__v8hi)(__m128i)(A), \\\n-\t(__v8hi)(__m128i)(B),(int)(C))\n+\t\t\t\t\t (__v8hi)(__m128i)(B),(int)(C)))\n #define _mm_mask_shldi_epi16(A, B, C, D, E) \\\n   ((__m128i) __builtin_ia32_vpshld_v8hi_mask ((__v8hi)(__m128i)(C), \\\n-\t(__v8hi)(__m128i)(D), (int)(E), (__v8hi)(__m128i)(A),(__mmask8)(B))\n+\t\t\t\t\t      (__v8hi)(__m128i)(D), (int)(E), \\\n+\t\t\t\t\t      (__v8hi)(__m128i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm_maskz_shldi_epi16(A, B, C, D) \\\n-  ((__m128i) __builtin_ia32_vpshld_v8hi_mask ((__v8hi)(__m128i)(B), \\\n-\t(__v8hi)(__m128i)(C),(int)(D), \\\n-\t(__v8hi)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n+  ((__m128i) \\\n+   __builtin_ia32_vpshld_v8hi_mask ((__v8hi)(__m128i)(B),\t\t\\\n+\t\t\t\t    (__v8hi)(__m128i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v8hi)(__m128i)_mm_setzero_si128 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #define _mm_shldi_epi32(A, B, C) \\\n   ((__m128i) __builtin_ia32_vpshld_v4si ((__v4si)(__m128i)(A), \\\n-\t(__v4si)(__m128i)(B),(int)(C))\n+\t\t\t\t\t (__v4si)(__m128i)(B),(int)(C)))\n #define _mm_mask_shldi_epi32(A, B, C, D, E) \\\n   ((__m128i) __builtin_ia32_vpshld_v4si_mask ((__v4si)(__m128i)(C), \\\n-\t(__v4si)(__m128i)(D), (int)(E), (__v4si)(__m128i)(A),(__mmask8)(B))\n+\t\t\t\t\t      (__v4si)(__m128i)(D), (int)(E), \\\n+\t\t\t\t\t      (__v4si)(__m128i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm_maskz_shldi_epi32(A, B, C, D) \\\n-  ((__m128i) __builtin_ia32_vpshld_v4si_mask ((__v4si)(__m128i)(B), \\\n-\t(__v4si)(__m128i)(C),(int)(D), \\\n-\t(__v4si)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n+  ((__m128i) \\\n+   __builtin_ia32_vpshld_v4si_mask ((__v4si)(__m128i)(B),\t\t\\\n+\t\t\t\t    (__v4si)(__m128i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v4si)(__m128i)_mm_setzero_si128 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #define _mm_shldi_epi64(A, B, C) \\\n   ((__m128i) __builtin_ia32_vpshld_v2di ((__v2di)(__m128i)(A), \\\n-\t(__v2di)(__m128i)(B),(int)(C))\n+\t\t\t\t\t (__v2di)(__m128i)(B),(int)(C)))\n #define _mm_mask_shldi_epi64(A, B, C, D, E) \\\n   ((__m128i) __builtin_ia32_vpshld_v2di_mask ((__v2di)(__m128i)(C), \\\n-\t(__v2di)(__m128i)(D), (int)(E), (__v2di)(__m128i)(A),(__mmask8)(B))\n+\t\t\t\t\t      (__v2di)(__m128i)(D), (int)(E), \\\n+\t\t\t\t\t      (__v2di)(__m128i)(A), \\\n+\t\t\t\t\t      (__mmask8)(B)))\n #define _mm_maskz_shldi_epi64(A, B, C, D) \\\n-  ((__m128i) __builtin_ia32_vpshld_v2di_mask ((__v2di)(__m128i)(B), \\\n-\t(__v2di)(__m128i)(C),(int)(D), \\\n-\t(__v2di)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n+  ((__m128i) \\\n+   __builtin_ia32_vpshld_v2di_mask ((__v2di)(__m128i)(B),\t\t\\\n+\t\t\t\t    (__v2di)(__m128i)(C),(int)(D),\t\\\n+\t\t\t\t    (__v2di)(__m128i)_mm_setzero_si128 (), \\\n+\t\t\t\t    (__mmask8)(A)))\n #endif\n \n extern __inline __m256i"}, {"sha": "0b29923b7217b59856f68ab6b1e55cea8ecbd136", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi2-vpshld-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi2-vpshld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi2-vpshld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi2-vpshld-1.c?ref=cf1db5c9a342352d66164fea8c4ea0a540627024", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vbmi2 -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x,y;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_shldi_epi16 (x, y, 3);\n+  x = _mm512_maskz_shldi_epi16 (m32, x, y, 3);\n+  x = _mm512_mask_shldi_epi16 (x, m32, y, x, 3);\n+\n+  x = _mm512_shldi_epi32 (x, y, 3);\n+  x = _mm512_maskz_shldi_epi32 (m16, x, y, 3);\n+  x = _mm512_mask_shldi_epi32 (x, m16, y, x, 3);\n+\n+  x = _mm512_shldi_epi64 (x, y, 3);\n+  x = _mm512_maskz_shldi_epi64 (m8, x, y, 3);\n+  x = _mm512_mask_shldi_epi64 (x, m8, y, x, 3);\n+}"}, {"sha": "bb4de7852443d30db75d49db2270efcf7aeaa6ba", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi2-vpshrd-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi2-vpshrd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi2-vpshrd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi2-vpshrd-1.c?ref=cf1db5c9a342352d66164fea8c4ea0a540627024", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vbmi2 -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpshrdw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x,y;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_shrdi_epi16 (x, y, 3);\n+  x = _mm512_maskz_shrdi_epi16 (m32, x, y, 3);\n+  x = _mm512_mask_shrdi_epi16 (x, m32, y, x, 3);\n+\n+  x = _mm512_shrdi_epi32 (x, y, 3);\n+  x = _mm512_maskz_shrdi_epi32 (m16, x, y, 3);\n+  x = _mm512_mask_shrdi_epi32 (x, m16, y, x, 3);\n+\n+  x = _mm512_shrdi_epi64 (x, y, 3);\n+  x = _mm512_maskz_shrdi_epi64 (m8, x, y, 3);\n+  x = _mm512_mask_shrdi_epi64 (x, m8, y, x, 3);\n+}"}, {"sha": "6be531d88bf77d67d28062d1a58a106965c674f9", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=cf1db5c9a342352d66164fea8c4ea0a540627024", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "c2b192d72f65d4bb58cd5288f934bbfd9557ee1f", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=cf1db5c9a342352d66164fea8c4ea0a540627024", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "0d2b8b3cba085515b06aac07c70073f91e1616b1", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=cf1db5c9a342352d66164fea8c4ea0a540627024", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>\n@@ -315,6 +315,24 @@ test_2 (_mm_sqrt_round_sd, __m128d, __m128d, __m128d, 9)\n test_2 (_mm_sqrt_round_ss, __m128, __m128, __m128, 9)\n test_2 (_mm_sub_round_sd, __m128d, __m128d, __m128d, 9)\n test_2 (_mm_sub_round_ss, __m128, __m128, __m128, 9)\n+test_2 (_mm512_shrdi_epi16, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_shrdi_epi32, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_shrdi_epi64, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm256_shrdi_epi16, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm256_shrdi_epi32, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm256_shrdi_epi64, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm_shrdi_epi16, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_shrdi_epi32, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_shrdi_epi64, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm512_shldi_epi16, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_shldi_epi32, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_shldi_epi64, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm256_shldi_epi16, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm256_shldi_epi32, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm256_shldi_epi64, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm_shldi_epi16, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_shldi_epi32, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_shldi_epi64, __m128i, __m128i, __m128i, 1)\n test_2x (_mm512_cmp_round_pd_mask, __mmask8, __m512d, __m512d, 1, 8)\n test_2x (_mm512_cmp_round_ps_mask, __mmask16, __m512, __m512, 1, 8)\n test_2x (_mm512_maskz_roundscale_round_pd, __m512d, __mmask8, __m512d, 1, 8)\n@@ -434,6 +452,24 @@ test_3 (_mm_fnmsub_round_sd, __m128d, __m128d, __m128d, __m128d, 9)\n test_3 (_mm_fnmsub_round_ss, __m128, __m128, __m128, __m128, 9)\n test_3 (_mm_mask_cmp_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1)\n test_3 (_mm_mask_cmp_ss_mask, __mmask8, __mmask8, __m128, __m128, 1)\n+test_3 (_mm512_maskz_shrdi_epi16, __m512i, __mmask32, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_shrdi_epi32, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_shrdi_epi64, __m512i, __mmask8,  __m512i,__m512i, 1)\n+test_3 (_mm256_maskz_shrdi_epi16, __m256i, __mmask16, __m256i, __m256i, 1)\n+test_3 (_mm256_maskz_shrdi_epi32, __m256i, __mmask8,  __m256i,__m256i, 1)\n+test_3 (_mm256_maskz_shrdi_epi64, __m256i, __mmask8,  __m256i,__m256i, 1)\n+test_3 (_mm_maskz_shrdi_epi16, __m128i, __mmask8,  __m128i, __m128i, 1)\n+test_3 (_mm_maskz_shrdi_epi32, __m128i, __mmask8,  __m128i, __m128i, 1)\n+test_3 (_mm_maskz_shrdi_epi64, __m128i, __mmask8,  __m128i, __m128i, 1)\n+test_3 (_mm512_maskz_shldi_epi16, __m512i, __mmask32, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_shldi_epi32, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_shldi_epi64, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_3 (_mm256_maskz_shldi_epi16, __m256i, __mmask16, __m256i, __m256i, 1)\n+test_3 (_mm256_maskz_shldi_epi32, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_3 (_mm256_maskz_shldi_epi64, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_3 (_mm_maskz_shldi_epi16, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_3 (_mm_maskz_shldi_epi32, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_3 (_mm_maskz_shldi_epi64, __m128i, __mmask8, __m128i, __m128i, 1)\n test_3v (_mm512_i32scatter_epi32, void *, __m512i, __m512i, 1)\n test_3v (_mm512_i32scatter_epi64, void *, __m256i, __m512i, 1)\n test_3v (_mm512_i32scatter_pd, void *, __m256i, __m512d, 1)\n@@ -558,6 +594,24 @@ test_4 (_mm_mask3_fnmsub_round_sd, __m128d, __m128d, __m128d, __m128d, __mmask8,\n test_4 (_mm_mask3_fnmsub_round_ss, __m128, __m128, __m128, __m128, __mmask8, 9)\n test_4 (_mm_maskz_fnmsub_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128d, 9)\n test_4 (_mm_maskz_fnmsub_round_ss, __m128, __mmask8, __m128, __m128, __m128, 9)\n+test_4 (_mm512_mask_shrdi_epi16, __m512i, __m512i, __mmask32, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_shrdi_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_shrdi_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_4 (_mm256_mask_shrdi_epi16, __m256i, __m256i, __mmask16, __m256i, __m256i, 1)\n+test_4 (_mm256_mask_shrdi_epi32, __m256i, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_4 (_mm256_mask_shrdi_epi64, __m256i, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_4 (_mm_mask_shrdi_epi16, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_4 (_mm_mask_shrdi_epi32, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_4 (_mm_mask_shrdi_epi64, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_4 (_mm512_mask_shldi_epi16, __m512i, __m512i, __mmask32, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_shldi_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_shldi_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_4 (_mm256_mask_shldi_epi16, __m256i, __m256i, __mmask16, __m256i, __m256i, 1)\n+test_4 (_mm256_mask_shldi_epi32, __m256i, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_4 (_mm256_mask_shldi_epi64, __m256i, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_4 (_mm_mask_shldi_epi16, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_4 (_mm_mask_shldi_epi32, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_4 (_mm_mask_shldi_epi64, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n test_4v (_mm512_mask_i32scatter_epi32, void *, __mmask16, __m512i, __m512i, 1)\n test_4v (_mm512_mask_i32scatter_epi64, void *, __mmask8, __m256i, __m512i, 1)\n test_4v (_mm512_mask_i32scatter_pd, void *, __mmask8, __m256i, __m512d, 1)"}, {"sha": "9be7f2d5a582e6cc59edb50ab0bcd5277ec14555", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1db5c9a342352d66164fea8c4ea0a540627024/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=cf1db5c9a342352d66164fea8c4ea0a540627024", "patch": "@@ -102,7 +102,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -219,7 +219,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)\n@@ -438,6 +438,24 @@ test_2 (_mm512_sub_round_pd, __m512d, __m512d, __m512d, 9)\n test_2 (_mm512_sub_round_ps, __m512, __m512, __m512, 9)\n test_2 (_mm_cmp_sd_mask, __mmask8, __m128d, __m128d, 1)\n test_2 (_mm_cmp_ss_mask, __mmask8, __m128, __m128, 1)\n+test_2 (_mm512_shrdi_epi16, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_shrdi_epi32, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_shrdi_epi64, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm256_shrdi_epi16, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm256_shrdi_epi32, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm256_shrdi_epi64, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm_shrdi_epi16, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_shrdi_epi32, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_shrdi_epi64, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm512_shldi_epi16, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_shldi_epi32, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm512_shldi_epi64, __m512i, __m512i, __m512i, 1)\n+test_2 (_mm256_shldi_epi16, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm256_shldi_epi32, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm256_shldi_epi64, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm_shldi_epi16, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_shldi_epi32, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_shldi_epi64, __m128i, __m128i, __m128i, 1)\n #ifdef __x86_64__\n test_2 (_mm_cvt_roundi64_sd, __m128d, __m128d, long long, 9)\n test_2 (_mm_cvt_roundi64_ss, __m128, __m128, long long, 9)\n@@ -544,6 +562,24 @@ test_3 (_mm512_ternarylogic_epi32, __m512i, __m512i, __m512i, __m512i, 1)\n test_3 (_mm512_ternarylogic_epi64, __m512i, __m512i, __m512i, __m512i, 1)\n test_3 (_mm_mask_cmp_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1)\n test_3 (_mm_mask_cmp_ss_mask, __mmask8, __mmask8, __m128, __m128, 1)\n+test_3 (_mm512_maskz_shrdi_epi16, __m512i, __mmask32, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_shrdi_epi32, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_shrdi_epi64, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_3 (_mm256_maskz_shrdi_epi16, __m256i, __mmask16, __m256i, __m256i, 1)\n+test_3 (_mm256_maskz_shrdi_epi32, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_3 (_mm256_maskz_shrdi_epi64, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_3 (_mm_maskz_shrdi_epi16, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_3 (_mm_maskz_shrdi_epi32, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_3 (_mm_maskz_shrdi_epi64, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_3 (_mm512_maskz_shldi_epi16, __m512i, __mmask32, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_shldi_epi32, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_3 (_mm512_maskz_shldi_epi64, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_3 (_mm256_maskz_shldi_epi16, __m256i, __mmask16, __m256i, __m256i, 1)\n+test_3 (_mm256_maskz_shldi_epi32, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_3 (_mm256_maskz_shldi_epi64, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_3 (_mm_maskz_shldi_epi16, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_3 (_mm_maskz_shldi_epi32, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_3 (_mm_maskz_shldi_epi64, __m128i, __mmask8, __m128i, __m128i, 1)\n test_3v (_mm512_i32scatter_epi32, void *, __m512i, __m512i, 1)\n test_3v (_mm512_i32scatter_epi64, void *, __m256i, __m512i, 1)\n test_3v (_mm512_i32scatter_pd, void *, __m256i, __m512d, 1)\n@@ -658,6 +694,24 @@ test_4 (_mm_mask3_fnmsub_round_sd, __m128d, __m128d, __m128d, __m128d, __mmask8,\n test_4 (_mm_mask3_fnmsub_round_ss, __m128, __m128, __m128, __m128, __mmask8, 9)\n test_4 (_mm_maskz_fnmsub_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128d, 9)\n test_4 (_mm_maskz_fnmsub_round_ss, __m128, __mmask8, __m128, __m128, __m128, 9)\n+test_4 (_mm512_mask_shrdi_epi16, __m512i, __m512i, __mmask32, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_shrdi_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_shrdi_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_4 (_mm256_mask_shrdi_epi16, __m256i, __m256i, __mmask16, __m256i, __m256i, 1)\n+test_4 (_mm256_mask_shrdi_epi32, __m256i, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_4 (_mm256_mask_shrdi_epi64, __m256i, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_4 (_mm_mask_shrdi_epi16, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_4 (_mm_mask_shrdi_epi32, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_4 (_mm_mask_shrdi_epi64, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_4 (_mm512_mask_shldi_epi16, __m512i, __m512i, __mmask32, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_shldi_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n+test_4 (_mm512_mask_shldi_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n+test_4 (_mm256_mask_shldi_epi16, __m256i, __m256i, __mmask16, __m256i, __m256i, 1)\n+test_4 (_mm256_mask_shldi_epi32, __m256i, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_4 (_mm256_mask_shldi_epi64, __m256i, __m256i, __mmask8, __m256i, __m256i, 1)\n+test_4 (_mm_mask_shldi_epi16, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_4 (_mm_mask_shldi_epi32, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_4 (_mm_mask_shldi_epi64, __m128i, __m128i, __mmask8, __m128i, __m128i, 1)\n test_4v (_mm512_mask_i32scatter_epi32, void *, __mmask16, __m512i, __m512i, 1)\n test_4v (_mm512_mask_i32scatter_epi64, void *, __mmask8, __m256i, __m512i, 1)\n test_4v (_mm512_mask_i32scatter_pd, void *, __mmask8, __m256i, __m512d, 1)"}]}