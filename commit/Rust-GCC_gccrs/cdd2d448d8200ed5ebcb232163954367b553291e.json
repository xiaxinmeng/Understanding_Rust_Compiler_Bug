{"sha": "cdd2d448d8200ed5ebcb232163954367b553291e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkMmQ0NDhkODIwMGVkNWViY2IyMzIxNjM5NTQzNjdiNTUzMjkxZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-05T18:36:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-05T19:09:22Z"}, "message": "libstdc++: Fix constraints on std::optional comparisons [PR 96269]\n\nThe relational operators for std::optional were using the wrong types\nin the declval expressions used to constrain them. Instead of using\nconst lvalues they were using non-const rvalues, which meant that a type\nmight satisfy the constraints but then give an error when the function\nbody was instantiated.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/96269\n\t* include/std/optional (operator==, operator!=, operator<)\n\t(operator>, operator<=, operator>=): Fix types used in\n\tSFINAE constraints.\n\t* testsuite/20_util/optional/relops/96269.cc: New test.", "tree": {"sha": "513dc26b087c5b85ce1b2d58c07134bb11cb911a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/513dc26b087c5b85ce1b2d58c07134bb11cb911a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdd2d448d8200ed5ebcb232163954367b553291e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd2d448d8200ed5ebcb232163954367b553291e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd2d448d8200ed5ebcb232163954367b553291e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd2d448d8200ed5ebcb232163954367b553291e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10508db867934264bbc2578f1f454c19fa558fd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10508db867934264bbc2578f1f454c19fa558fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10508db867934264bbc2578f1f454c19fa558fd3"}], "stats": {"total": 142, "additions": 124, "deletions": 18}, "files": [{"sha": "5ea5b39d0e692a6af6e4c8dc739c8c83ab8e628d", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 48, "deletions": 18, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd2d448d8200ed5ebcb232163954367b553291e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd2d448d8200ed5ebcb232163954367b553291e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=cdd2d448d8200ed5ebcb232163954367b553291e", "patch": "@@ -1002,11 +1002,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using __optional_relop_t =\n       enable_if_t<is_convertible<_Tp, bool>::value, bool>;\n \n+  template<typename _Tp, typename _Up>\n+    using __optional_eq_t = __optional_relop_t<\n+      decltype(std::declval<const _Tp&>() == std::declval<const _Up&>())\n+      >;\n+\n+  template<typename _Tp, typename _Up>\n+    using __optional_ne_t = __optional_relop_t<\n+      decltype(std::declval<const _Tp&>() != std::declval<const _Up&>())\n+      >;\n+\n+  template<typename _Tp, typename _Up>\n+    using __optional_lt_t = __optional_relop_t<\n+      decltype(std::declval<const _Tp&>() < std::declval<const _Up&>())\n+      >;\n+\n+  template<typename _Tp, typename _Up>\n+    using __optional_gt_t = __optional_relop_t<\n+      decltype(std::declval<const _Tp&>() > std::declval<const _Up&>())\n+      >;\n+\n+  template<typename _Tp, typename _Up>\n+    using __optional_le_t = __optional_relop_t<\n+      decltype(std::declval<const _Tp&>() <= std::declval<const _Up&>())\n+      >;\n+\n+  template<typename _Tp, typename _Up>\n+    using __optional_ge_t = __optional_relop_t<\n+      decltype(std::declval<const _Tp&>() >= std::declval<const _Up&>())\n+      >;\n+\n   // Comparisons between optional values.\n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator==(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>\n+    -> __optional_eq_t<_Tp, _Up>\n     {\n       return static_cast<bool>(__lhs) == static_cast<bool>(__rhs)\n \t     && (!__lhs || *__lhs == *__rhs);\n@@ -1015,7 +1045,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator!=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>\n+    -> __optional_ne_t<_Tp, _Up>\n     {\n       return static_cast<bool>(__lhs) != static_cast<bool>(__rhs)\n \t|| (static_cast<bool>(__lhs) && *__lhs != *__rhs);\n@@ -1024,31 +1054,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator<(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>\n+    -> __optional_lt_t<_Tp, _Up>\n     {\n       return static_cast<bool>(__rhs) && (!__lhs || *__lhs < *__rhs);\n     }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator>(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>\n+    -> __optional_gt_t<_Tp, _Up>\n     {\n       return static_cast<bool>(__lhs) && (!__rhs || *__lhs > *__rhs);\n     }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator<=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>\n+    -> __optional_le_t<_Tp, _Up>\n     {\n       return !__lhs || (static_cast<bool>(__rhs) && *__lhs <= *__rhs);\n     }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator>=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>\n+    -> __optional_ge_t<_Tp, _Up>\n     {\n       return !__rhs || (static_cast<bool>(__lhs) && *__lhs >= *__rhs);\n     }\n@@ -1134,73 +1164,73 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator==(const optional<_Tp>& __lhs, const _Up& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>\n+    -> __optional_eq_t<_Tp, _Up>\n     { return __lhs && *__lhs == __rhs; }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator==(const _Up& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Up>() == declval<_Tp>())>\n+    -> __optional_eq_t<_Up, _Tp>\n     { return __rhs && __lhs == *__rhs; }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator!=(const optional<_Tp>& __lhs, const _Up& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>\n+    -> __optional_ne_t<_Tp, _Up>\n     { return !__lhs || *__lhs != __rhs; }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator!=(const _Up& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Up>() != declval<_Tp>())>\n+    -> __optional_ne_t<_Up, _Tp>\n     { return !__rhs || __lhs != *__rhs; }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator<(const optional<_Tp>& __lhs, const _Up& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>\n+    -> __optional_lt_t<_Tp, _Up>\n     { return !__lhs || *__lhs < __rhs; }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator<(const _Up& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Up>() < declval<_Tp>())>\n+    -> __optional_lt_t<_Up, _Tp>\n     { return __rhs && __lhs < *__rhs; }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator>(const optional<_Tp>& __lhs, const _Up& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>\n+    -> __optional_gt_t<_Tp, _Up>\n     { return __lhs && *__lhs > __rhs; }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator>(const _Up& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Up>() > declval<_Tp>())>\n+    -> __optional_gt_t<_Up, _Tp>\n     { return !__rhs || __lhs > *__rhs; }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator<=(const optional<_Tp>& __lhs, const _Up& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>\n+    -> __optional_le_t<_Tp, _Up>\n     { return !__lhs || *__lhs <= __rhs; }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator<=(const _Up& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Up>() <= declval<_Tp>())>\n+    -> __optional_le_t<_Up, _Tp>\n     { return __rhs && __lhs <= *__rhs; }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator>=(const optional<_Tp>& __lhs, const _Up& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>\n+    -> __optional_ge_t<_Tp, _Up>\n     { return __lhs && *__lhs >= __rhs; }\n \n   template<typename _Tp, typename _Up>\n     constexpr auto\n     operator>=(const _Up& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Up>() >= declval<_Tp>())>\n+    -> __optional_ge_t<_Up, _Tp>\n     { return !__rhs || __lhs >= *__rhs; }\n \n #ifdef __cpp_lib_three_way_comparison"}, {"sha": "2054d3643c666684282f4a0694c26accf2125b01", "filename": "libstdc++-v3/testsuite/20_util/optional/relops/96269.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd2d448d8200ed5ebcb232163954367b553291e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2F96269.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd2d448d8200ed5ebcb232163954367b553291e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2F96269.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2F96269.cc?ref=cdd2d448d8200ed5ebcb232163954367b553291e", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <optional>\n+\n+struct X\n+{\n+  template <typename T>\n+    bool operator==(const T&) /* not const */ { return false; }\n+\n+  template <typename T>\n+    bool operator!=(const T&) /* not const */ { return false; }\n+\n+  template <typename T>\n+    bool operator<(const T&) /* not const */ { return false; }\n+\n+  template <typename T>\n+    bool operator>(const T&) /* not const */ { return false; }\n+\n+  template <typename T>\n+    bool operator<=(const T&) /* not const */ { return false; }\n+\n+  template <typename T>\n+    bool operator>=(const T&) /* not const */ { return false; }\n+};\n+\n+void test01()\n+{\n+  // PR 96269 optional comparison with nullopt fails\n+  std::optional<X> x;\n+  bool eq [[maybe_unused]] = std::nullopt == x;\n+\n+  bool ne [[maybe_unused]] = std::nullopt != x;\n+  bool lt [[maybe_unused]] = std::nullopt <  x;\n+  bool gt [[maybe_unused]] = std::nullopt >  x;\n+  bool le [[maybe_unused]] = std::nullopt <= x;\n+  bool ge [[maybe_unused]] = std::nullopt >= x;\n+}\n+\n+template<typename T>\n+  concept optional_lt_cmp\n+    = requires(std::optional<T> o, T t) { { o < t } -> std::same_as<bool>; };\n+\n+template<typename T>\n+  concept optional_gt_cmp\n+    = requires(std::optional<T> o, T t) { { o > t } -> std::same_as<bool>; };\n+\n+template<typename T>\n+  concept optional_le_cmp\n+    = requires(std::optional<T> o, T t) { { o <= t } -> std::same_as<bool>; };\n+\n+template<typename T>\n+  concept optional_ge_cmp\n+    = requires(std::optional<T> o, T t) { { o >= t } -> std::same_as<bool>; };\n+\n+static_assert( ! optional_lt_cmp<X> );\n+static_assert( ! optional_gt_cmp<X> );\n+static_assert( ! optional_le_cmp<X> );\n+static_assert( ! optional_ge_cmp<X> );"}]}