{"sha": "f11ee281f7aedc2224eb2f9e1986ff3c836e3c82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjExZWUyODFmN2FlZGMyMjI0ZWIyZjllMTk4NmZmM2M4MzZlM2M4Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-01-04T14:02:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-01-04T14:02:14Z"}, "message": "class.c (update_vtable_entry_for_fn): Set delta to zero for a lost primary.\n\n        * class.c (update_vtable_entry_for_fn): Set delta to zero for a\n        lost primary.\n\n        * class.c (build_vtbl_initializer): Check for a lost primary\n        before calculating the vtable entry to throw away.\n\nFrom-SVN: r48535", "tree": {"sha": "464103ba2e9556a58f5dd477c227d3004e040c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/464103ba2e9556a58f5dd477c227d3004e040c7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f11ee281f7aedc2224eb2f9e1986ff3c836e3c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11ee281f7aedc2224eb2f9e1986ff3c836e3c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11ee281f7aedc2224eb2f9e1986ff3c836e3c82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11ee281f7aedc2224eb2f9e1986ff3c836e3c82/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b4795cc415c68a24d8439a81a2f05e7e3628415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4795cc415c68a24d8439a81a2f05e7e3628415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4795cc415c68a24d8439a81a2f05e7e3628415"}], "stats": {"total": 121, "additions": 71, "deletions": 50}, "files": [{"sha": "591a882ef1559e26a7dcfbe306f6249970b97281", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11ee281f7aedc2224eb2f9e1986ff3c836e3c82/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11ee281f7aedc2224eb2f9e1986ff3c836e3c82/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f11ee281f7aedc2224eb2f9e1986ff3c836e3c82", "patch": "@@ -1,3 +1,11 @@\n+2002-01-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* class.c (update_vtable_entry_for_fn): Set delta to zero for a\n+\tlost primary.\n+\n+\t* class.c (build_vtbl_initializer): Check for a lost primary\n+\tbefore calculating the vtable entry to throw away.\n+\n 2002-01-02  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (expand_body): Call outlining_inline_function when"}, {"sha": "98325af3636d81e6d1f9f52b7f23b4974a17c2d4", "filename": "gcc/cp/class.c", "status": "modified", "additions": 63, "deletions": 50, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11ee281f7aedc2224eb2f9e1986ff3c836e3c82/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11ee281f7aedc2224eb2f9e1986ff3c836e3c82/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=f11ee281f7aedc2224eb2f9e1986ff3c836e3c82", "patch": "@@ -2494,6 +2494,7 @@ update_vtable_entry_for_fn (t, binfo, fn, virtuals)\n   tree delta;\n   tree virtual_base;\n   tree first_defn;\n+  bool lost = false;\n \n   /* Find the nearest primary base (possibly binfo itself) which defines\n      this function; this is the class the caller will convert to when\n@@ -2502,6 +2503,10 @@ update_vtable_entry_for_fn (t, binfo, fn, virtuals)\n     {\n       if (look_for_overrides_here (BINFO_TYPE (b), fn))\n \tbreak;\n+\n+      /* The nearest definition is from a lost primary.  */\n+      if (BINFO_LOST_PRIMARY_P (b))\n+\tlost = true;\n     }\n   first_defn = b;\n \n@@ -2514,9 +2519,9 @@ update_vtable_entry_for_fn (t, binfo, fn, virtuals)\n      the final overrider, and not to an intermediate virtual base.  */\n   virtual_base = NULL_TREE;\n \n-  /* We will convert to an intermediate virtual base first, and then\n+  /* See if we can convert to an intermediate virtual base first, and then\n      use the vcall offset located there to finish the conversion.  */\n-  while (b)\n+  for (; b; b = BINFO_INHERITANCE_CHAIN (b))\n     {\n       /* If we find the final overrider, then we can stop\n \t walking.  */\n@@ -2529,8 +2534,6 @@ update_vtable_entry_for_fn (t, binfo, fn, virtuals)\n \t declaring base (first_defn) and the final overrider.  */\n       if (!virtual_base && TREE_VIA_VIRTUAL (b))\n \tvirtual_base = b;\n-\n-      b = BINFO_INHERITANCE_CHAIN (b);\n     }\n \n   /* Compute the constant adjustment to the `this' pointer.  The\n@@ -2542,6 +2545,12 @@ update_vtable_entry_for_fn (t, binfo, fn, virtuals)\n        the nearest virtual base.  */\n     delta = size_diffop (BINFO_OFFSET (virtual_base),\n \t\t\t BINFO_OFFSET (first_defn));\n+  else if (lost)\n+    /* If the nearest definition is in a lost primary, we don't need an\n+       entry in our vtable.  Except possibly in a constructor vtable,\n+       if we happen to get our primary back.  In that case, the offset\n+       will be zero, as it will be a primary base.  */\n+    delta = size_zero_node;\n   else\n     {\n       /* The `this' pointer needs to be adjusted from pointing to\n@@ -7502,62 +7511,66 @@ build_vtbl_initializer (binfo, orig_binfo, t, rtti_binfo, non_fn_entries_p)\n       tree vcall_index;\n       tree fn;\n       tree pfn;\n-      tree init;\n+      tree init = NULL_TREE;\n       \n-      /* Pull the offset for `this', and the function to call, out of\n-\t the list.  */\n-      delta = BV_DELTA (v);\n-\n-      if (BV_USE_VCALL_INDEX_P (v))\n-\t{\n-\t  vcall_index = BV_VCALL_INDEX (v);\n-\t  my_friendly_assert (vcall_index != NULL_TREE, 20000621);\n-\t}\n-      else\n-        vcall_index = NULL_TREE;\n-\n       fn = BV_FN (v);\n-      my_friendly_assert (TREE_CODE (delta) == INTEGER_CST, 19990727);\n-      my_friendly_assert (TREE_CODE (fn) == FUNCTION_DECL, 19990727);\n-\n-      /* You can't call an abstract virtual function; it's abstract.\n-\t So, we replace these functions with __pure_virtual.  */\n-      if (DECL_PURE_VIRTUAL_P (fn))\n-\tfn = abort_fndecl;\n-\n-      /* Take the address of the function, considering it to be of an\n-\t appropriate generic type.  */\n-      pfn = build1 (ADDR_EXPR, vfunc_ptr_type_node, fn);\n-      /* The address of a function can't change.  */\n-      TREE_CONSTANT (pfn) = 1;\n-\n-      /* Enter it in the vtable.  */\n-      init = build_vtable_entry (delta, vcall_index, pfn);\n \n       /* If the only definition of this function signature along our\n \t primary base chain is from a lost primary, this vtable slot will\n \t never be used, so just zero it out.  This is important to avoid\n \t requiring extra thunks which cannot be generated with the function.\n \n-\t We could also handle this in update_vtable_entry_for_fn; doing it\n-\t here means we zero out unused slots in ctor vtables as well,\n-\t rather than filling them with erroneous values (though harmless,\n-\t apart from relocation costs).  */\n-      if (fn != abort_fndecl)\n-\tfor (b = binfo; ; b = get_primary_binfo (b))\n-\t  {\n-\t    /* We found a defn before a lost primary; go ahead as normal.  */\n-\t    if (look_for_overrides_here (BINFO_TYPE (b), fn))\n+\t We first check this in update_vtable_entry_for_fn, so we handle\n+\t restored primary bases properly; we also need to do it here so we\n+\t zero out unused slots in ctor vtables, rather than filling themff\n+\t with erroneous values (though harmless, apart from relocation\n+\t costs).  */\n+      for (b = binfo; ; b = get_primary_binfo (b))\n+\t{\n+\t  /* We found a defn before a lost primary; go ahead as normal.  */\n+\t  if (look_for_overrides_here (BINFO_TYPE (b), fn))\n+\t    break;\n+\n+\t  /* The nearest definition is from a lost primary; clear the\n+\t     slot.  */\n+\t  if (BINFO_LOST_PRIMARY_P (b))\n+\t    {\n+\t      init = size_zero_node;\n \t      break;\n+\t    }\n+\t}\n \n-\t    /* The nearest definition is from a lost primary; clear the\n-\t       slot.  */\n-\t    if (BINFO_LOST_PRIMARY_P (b))\n-\t      {\n-\t\tinit = size_zero_node;\n-\t\tbreak;\n-\t      }\n-\t  }\n+      if (! init)\n+\t{\n+\t  /* Pull the offset for `this', and the function to call, out of\n+\t     the list.  */\n+\t  delta = BV_DELTA (v);\n+\n+\t  if (BV_USE_VCALL_INDEX_P (v))\n+\t    {\n+\t      vcall_index = BV_VCALL_INDEX (v);\n+\t      my_friendly_assert (vcall_index != NULL_TREE, 20000621);\n+\t    }\n+\t  else\n+\t    vcall_index = NULL_TREE;\n+\n+\t  my_friendly_assert (TREE_CODE (delta) == INTEGER_CST, 19990727);\n+\t  my_friendly_assert (TREE_CODE (fn) == FUNCTION_DECL, 19990727);\n+\n+\t  /* You can't call an abstract virtual function; it's abstract.\n+\t     So, we replace these functions with __pure_virtual.  */\n+\t  if (DECL_PURE_VIRTUAL_P (fn))\n+\t    fn = abort_fndecl;\n+\n+\t  /* Take the address of the function, considering it to be of an\n+\t     appropriate generic type.  */\n+\t  pfn = build1 (ADDR_EXPR, vfunc_ptr_type_node, fn);\n+\t  /* The address of a function can't change.  */\n+\t  TREE_CONSTANT (pfn) = 1;\n+\n+\t  /* Enter it in the vtable.  */\n+\t  init = build_vtable_entry (delta, vcall_index, pfn);\n+\t}\n \n       /* And add it to the chain of initializers.  */\n       if (TARGET_VTABLE_USES_DESCRIPTORS)"}]}