{"sha": "1b70aaad4c090c90d69c514138a8c157af930b57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI3MGFhYWQ0YzA5MGM5MGQ2OWM1MTQxMzhhOGMxNTdhZjkzMGI1Nw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2016-07-28T17:48:54Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2016-07-28T17:48:54Z"}, "message": "re PR fortran/71859 (ICE on same variable/subroutine name (verify_gimple failed))\n\n2016-07-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/71859\n\t* check.c(numeric_check): Prevent ICE.  Issue error for invalid\n\tsubroutine as an actual argument when numeric argument is expected.\n\n2016-07-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/71859\n\t* gfortran.dg/pr71859.f90: New test.\n\t* gfortran.dg/intrinsic_numeric_arg.f: Update error message.\n\t* gfortran.dg/coarray_collectives_1.f90: Ditto.\n\nFrom-SVN: r238825", "tree": {"sha": "495433b2b5b20e6c292bc4b9a9e31ba6559041cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/495433b2b5b20e6c292bc4b9a9e31ba6559041cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b70aaad4c090c90d69c514138a8c157af930b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b70aaad4c090c90d69c514138a8c157af930b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b70aaad4c090c90d69c514138a8c157af930b57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b70aaad4c090c90d69c514138a8c157af930b57/comments", "author": null, "committer": null, "parents": [{"sha": "717a7673782bff840ea538efd9fb1e2e8d2b816a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717a7673782bff840ea538efd9fb1e2e8d2b816a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/717a7673782bff840ea538efd9fb1e2e8d2b816a"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "a5c29686014742dbf11c8bbcfbae511c0820cf3d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1b70aaad4c090c90d69c514138a8c157af930b57", "patch": "@@ -1,3 +1,9 @@\n+2016-07-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/71859\n+\t* check.c(numeric_check): Prevent ICE.  Issue error for invalid\n+\tsubroutine as an actual argument when numeric argument is expected.\n+\n 2016-07-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n \t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n "}, {"sha": "085ac40c870e0594dc8479a431252c6d409ba3d9", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=1b70aaad4c090c90d69c514138a8c157af930b57", "patch": "@@ -72,6 +72,11 @@ type_check (gfc_expr *e, int n, bt type)\n static bool\n numeric_check (gfc_expr *e, int n)\n {\n+  /* Users sometime use a subroutine designator as an actual argument to\n+     an intrinsic subprogram that expects an argument with a numeric type.  */\n+  if (e->symtree && e->symtree->n.sym->attr.subroutine)\n+    goto error;\n+\n   if (gfc_numeric_ts (&e->ts))\n     return true;\n \n@@ -86,7 +91,9 @@ numeric_check (gfc_expr *e, int n)\n       return true;\n     }\n \n-  gfc_error (\"%qs argument of %qs intrinsic at %L must be a numeric type\",\n+error:\n+\n+  gfc_error (\"%qs argument of %qs intrinsic at %L must have a numeric type\",\n \t     gfc_current_intrinsic_arg[n]->name, gfc_current_intrinsic,\n \t     &e->where);\n "}, {"sha": "c9746c6ad06bfc2c893525030866c98eb3ccd8f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b70aaad4c090c90d69c514138a8c157af930b57", "patch": "@@ -1,3 +1,10 @@\n+2016-07-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/71859\n+\t* gfortran.dg/pr71859.f90: New test.\n+\t* gfortran.dg/intrinsic_numeric_arg.f: Update error message.\n+\t* gfortran.dg/coarray_collectives_1.f90: Ditto.\n+\n 2016-07-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/71883"}, {"sha": "cdb3993e58742165725cf21da2537c74f9cf4a63", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_1.f90?ref=1b70aaad4c090c90d69c514138a8c157af930b57", "patch": "@@ -14,7 +14,7 @@ program test\n   integer(8) :: i8\n   character(len=19, kind=4) :: msg4\n \n-  call co_sum(\"abc\") ! { dg-error \"must be a numeric type\" }\n+  call co_sum(\"abc\") ! { dg-error \"must have a numeric type\" }\n   call co_max(cmplx(1.0,0.0)) ! { dg-error \"shall be of type integer, real or character\" }\n   call co_min(cmplx(0.0,1.0)) ! { dg-error \"shall be of type integer, real or character\" }\n "}, {"sha": "445c39ef297960a4c23d1955f267ad9ec23fd475", "filename": "gcc/testsuite/gfortran.dg/intrinsic_numeric_arg.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_numeric_arg.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_numeric_arg.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_numeric_arg.f?ref=1b70aaad4c090c90d69c514138a8c157af930b57", "patch": "@@ -4,6 +4,6 @@\n        LOGICAL Z\n        CHARACTER A\n        REAL R\n-       R = ABS(Z) !  { dg-error \" must be a numeric type\" }\n-       R = ABS(A) !  { dg-error \" must be a numeric type\" }\n+       R = ABS(Z) !  { dg-error \" must have a numeric type\" }\n+       R = ABS(A) !  { dg-error \" must have a numeric type\" }\n        END"}, {"sha": "0dc617786ce176e80b4843a8da6bc45e550b36d2", "filename": "gcc/testsuite/gfortran.dg/pr71859.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71859.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b70aaad4c090c90d69c514138a8c157af930b57/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71859.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71859.f90?ref=1b70aaad4c090c90d69c514138a8c157af930b57", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do compile }\n+program p\n+   call s(1)\n+   x = abs(s)  ! { dg-error \"must have a numeric type\" }\n+end\n+subroutine s(n)\n+   print *, n\n+end"}]}