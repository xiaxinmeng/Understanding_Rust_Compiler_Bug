{"sha": "41804a5be02d8d811e5189a9cca9060f41cea765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE4MDRhNWJlMDJkOGQ4MTFlNTE4OWE5Y2NhOTA2MGY0MWNlYTc2NQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-09-28T19:51:38Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-09-28T19:51:38Z"}, "message": "re PR fortran/40569 (F2008: Support COMPILER_OPTIONS() / COMPILER_VERSION())\n\ngcc/\n2010-09-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/40569\n        PR fortran/40568\n        * toplev.h (save_decoded_options, save_decoded_options_count):\n        New global variables.\n        * toplev.c (save_decoded_options, save_decoded_options_count):\n        export variables.\n\ngcc/fortran/\n2010-09-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/40569\n        PR fortran/40568\n        * intrinsic.c (add_functions): Make compiler_version and\n        compiler_options CLASS_INQUIRY.\n        * gfortran.h (gfc_get_option_string): New prototype.\n        * intrinsic.texi (COMPILER_VERSION, COMPILER_OPTIONS):\n        Add documentation.\n        (C_SIZEOF): Mark as inquiry function of ISO_C_BINDING.\n        (ISO_FORTRAN_ENV): Refer to COMPILER_VERSION and COMPILER_OPTIONS.\n        (ISO_C_BINDING): Refer to C_SIZEOF.\n        * options.c (gfc_get_option_string): New function.\n        * simplify.c (gfc_simplify_compiler_options): Use it.\n        (gfc_simplify_compiler_version): Include compiler name.\n\nFrom-SVN: r164698", "tree": {"sha": "f3feddbb7172dda121a8dcfbdba67d925fe2b5df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3feddbb7172dda121a8dcfbdba67d925fe2b5df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41804a5be02d8d811e5189a9cca9060f41cea765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41804a5be02d8d811e5189a9cca9060f41cea765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41804a5be02d8d811e5189a9cca9060f41cea765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41804a5be02d8d811e5189a9cca9060f41cea765/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "770a498aeea017024d45dded87022d3f05bb27c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770a498aeea017024d45dded87022d3f05bb27c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770a498aeea017024d45dded87022d3f05bb27c9"}], "stats": {"total": 235, "additions": 222, "deletions": 13}, "files": [{"sha": "440c257943d818aa92587367d52687f846c8e320", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41804a5be02d8d811e5189a9cca9060f41cea765", "patch": "@@ -1,3 +1,12 @@\n+2010-09-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/40569\n+\tPR fortran/40568\n+\t* toplev.h (save_decoded_options, save_decoded_options_count):\n+\tNew global variables.\n+\t* toplev.c (save_decoded_options, save_decoded_options_count):\n+\texport variables.\n+\n 2010-09-28  Ian Lance Taylor  <iant@google.com>\n \n \t* config/i386/i386.c (ix86_supports_split_stack): Test"}, {"sha": "ef7257d1e4e9f80238a7f74467264dae3ecba605", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=41804a5be02d8d811e5189a9cca9060f41cea765", "patch": "@@ -1,3 +1,19 @@\n+2010-09-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/40569\n+\tPR fortran/40568\n+\t* intrinsic.c (add_functions): Make compiler_version and\n+\tcompiler_options CLASS_INQUIRY.\n+\t* gfortran.h (gfc_get_option_string): New prototype.\n+\t* intrinsic.texi (COMPILER_VERSION, COMPILER_OPTIONS):\n+\tAdd documentation.\n+\t(C_SIZEOF): Mark as inquiry function of ISO_C_BINDING.\n+\t(ISO_FORTRAN_ENV): Refer to COMPILER_VERSION and COMPILER_OPTIONS.\n+\t(ISO_C_BINDING): Refer to C_SIZEOF.\n+\t* options.c (gfc_get_option_string): New function.\n+\t* simplify.c (gfc_simplify_compiler_options): Use it.\n+\t(gfc_simplify_compiler_version): Include compiler name.\n+\n 2010-09-28  Jan Hubicka  <jh@suse.cz>\n \n \t* f95-lang.c (gfc_define_builtin): Make leaf."}, {"sha": "c42be85783a896269cb10335e7ccf791568e75f9", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=41804a5be02d8d811e5189a9cca9060f41cea765", "patch": "@@ -2403,6 +2403,7 @@ void gfc_init_options (unsigned int,\n bool gfc_handle_option (size_t, const char *, int, int,\n \t\t\tconst struct cl_option_handlers *);\n bool gfc_post_options (const char **);\n+char *gfc_get_option_string (void);\n \n /* f95-lang.c */\n void gfc_maybe_initialize_eh (void);"}, {"sha": "436afb70a7a375a55906c69f34336487111afa9e", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=41804a5be02d8d811e5189a9cca9060f41cea765", "patch": "@@ -2644,13 +2644,13 @@ add_functions (void)\n   make_from_module();\n \n   /* COMPILER_OPTIONS and COMPILER_VERSION are part of ISO_FORTRAN_ENV.  */  \n-  add_sym_0 (\"compiler_options\", GFC_ISYM_COMPILER_OPTIONS, CLASS_IMPURE,\n-\t     ACTUAL_NO, BT_CHARACTER, 1, GFC_STD_F2008,\n+  add_sym_0 (\"compiler_options\", GFC_ISYM_COMPILER_OPTIONS, CLASS_INQUIRY,\n+\t     ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_F2008,\n \t     NULL, gfc_simplify_compiler_options, NULL);\n   make_from_module();\n \n-  add_sym_0 (\"compiler_version\", GFC_ISYM_COMPILER_VERSION, CLASS_IMPURE,\n-\t     ACTUAL_NO, BT_CHARACTER, 1, GFC_STD_F2008,\n+  add_sym_0 (\"compiler_version\", GFC_ISYM_COMPILER_VERSION, CLASS_INQUIRY,\n+\t     ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_F2008,\n \t     NULL, gfc_simplify_compiler_version, NULL);\n   make_from_module();\n "}, {"sha": "09f52782ab9c080fe5c8065cfb906832978eccb0", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 94, "deletions": 2, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=41804a5be02d8d811e5189a9cca9060f41cea765", "patch": "@@ -86,6 +86,8 @@ Some basic guidelines for editing this document:\n * @code{CMPLX}:         CMPLX,     Complex conversion function\n * @code{COMMAND_ARGUMENT_COUNT}: COMMAND_ARGUMENT_COUNT, Get number of command line arguments\n * @code{COMPLEX}:       COMPLEX,   Complex conversion function\n+* @code{COMPILER_VERSION}: COMPILER_VERSION, Compiler version string\n+* @code{COMPILER_OPTIONS}: COMPILER_OPTIONS, Options passed to the compiler\n * @code{CONJG}:         CONJG,     Complex conjugate function\n * @code{COS}:           COS,       Cosine function\n * @code{COSH}:          COSH,      Hyperbolic cosine function\n@@ -2363,7 +2365,7 @@ expression @code{X} occupies.\n Fortran 2008\n \n @item @emph{Class}:\n-Intrinsic function\n+Inquiry function of the module @code{ISO_C_BINDING}\n \n @item @emph{Syntax}:\n @code{N = C_SIZEOF(X)}\n@@ -2375,7 +2377,7 @@ Intrinsic function\n \n @item @emph{Return value}:\n The return value is of type integer and of the system-dependent kind\n-@var{C_SIZE_T} (from the @var{ISO_C_BINDING} module). Its value is the\n+@code{C_SIZE_T} (from the @code{ISO_C_BINDING} module). Its value is the\n number of bytes occupied by the argument.  If the argument has the\n @code{POINTER} attribute, the number of bytes of the storage area pointed\n to is returned.  If the argument is of a derived type with @code{POINTER}\n@@ -2719,6 +2721,92 @@ end program test_command_argument_count\n \n \n \n+@node COMPILER_OPTIONS\n+@section @code{COMPILER_OPTIONS} --- Options passed to the compiler\n+@fnindex COMPILER_OPTIONS\n+@cindex flags inquiry function\n+@cindex options inquiry function\n+@cindex compiler flags inquiry function\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{COMPILER_OPTIONS()} returns a string with the options used for\n+compiling.\n+\n+@item @emph{Standard}:\n+Fortran 2008\n+\n+@item @emph{Class}:\n+Inquiry function of the module @code{ISO_FORTRAN_ENV}\n+\n+@item @emph{Syntax}:\n+@code{STR = COMPILER_OPTIONS()}\n+\n+@item @emph{Arguments}:\n+None.\n+\n+@item @emph{Return value}:\n+The return value is a default-kind string with system-dependent length.\n+It contains the compiler flags used to compile the file, which called\n+the @code{COMPILER_OPTIONS} intrinsic.\n+\n+@item @emph{Example}:\n+@smallexample\n+   use iso_fortran_env\n+   print '(4a)', 'This file was compiled by ', &\n+                 compiler_version(), ' using the the options ', &\n+                 compiler_options()\n+   end\n+@end smallexample\n+\n+@item @emph{See also}:\n+@ref{COMPILER_VERSION}, @ref{ISO_FORTRAN_ENV}\n+@end table\n+\n+\n+\n+@node COMPILER_VERSION\n+@section @code{COMPILER_VERSION} --- Compiler version string\n+@fnindex COMPILER_VERSION\n+@cindex compiler, name and version\n+@cindex version of the compiler\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{COMPILER_VERSION()} returns a string with the name and the\n+version of the compiler.\n+\n+@item @emph{Standard}:\n+Fortran 2008\n+\n+@item @emph{Class}:\n+Inquiry function of the module @code{ISO_FORTRAN_ENV}\n+\n+@item @emph{Syntax}:\n+@code{STR = COMPILER_VERSION()}\n+\n+@item @emph{Arguments}:\n+None.\n+\n+@item @emph{Return value}:\n+The return value is a default-kind string with system-dependent length.\n+It contains the name of the compiler and its version number.\n+\n+@item @emph{Example}:\n+@smallexample\n+   use iso_fortran_env\n+   print '(4a)', 'This file was compiled by ', &\n+                 compiler_version(), ' using the the options ', &\n+                 compiler_options()\n+   end\n+@end smallexample\n+\n+@item @emph{See also}:\n+@ref{COMPILER_OPTIONS}, @ref{ISO_FORTRAN_ENV}\n+@end table\n+\n+\n+\n @node COMPLEX\n @section @code{COMPLEX} --- Complex conversion function\n @fnindex COMPLEX\n@@ -12685,6 +12773,9 @@ Scalar default-integer constant used as STAT= return value by @code{UNLOCK} to\n denote that the lock variable is unlocked. (Fortran 2008 or later.)\n @end table\n \n+The module also provides the following intrinsic procedures:\n+@ref{COMPILER_OPTIONS} and @ref{COMPILER_VERSION}.\n+\n \n \n @node ISO_C_BINDING\n@@ -12704,6 +12795,7 @@ manual.\n @item @code{C_F_PROCPOINTER}\n @item @code{C_FUNLOC}\n @item @code{C_LOC}\n+@item @code{C_SIZEOF}\n @end table\n @c TODO: Vertical spacing between C_FUNLOC and C_LOC wrong in PDF,\n @c don't really know why."}, {"sha": "f7f76f49a7dfbdb369c4098f437c79b7fb1a93e6", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=41804a5be02d8d811e5189a9cca9060f41cea765", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"intl.h\"\n #include \"opts.h\"\n+#include \"toplev.h\"  /* For save_decoded_options.  */\n #include \"options.h\"\n #include \"params.h\"\n #include \"tree-inline.h\"\n@@ -966,3 +967,79 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n \n   return result;\n }\n+\n+\n+/* Return a string with the options passed to the compiler; used for\n+   Fortran's compiler_options() intrinsic.  */\n+\n+char *\n+gfc_get_option_string (void)\n+{\n+  unsigned j;\n+  size_t len, pos;\n+  char *result;\n+\n+  /* Determine required string length.  */\n+\n+  len = 0;\n+  for (j = 1; j < save_decoded_options_count; j++)\n+    {\n+      switch (save_decoded_options[j].opt_index)\n+        {\n+        case OPT_o:\n+        case OPT_d:\n+        case OPT_dumpbase:\n+        case OPT_dumpdir:\n+        case OPT_auxbase:\n+        case OPT_quiet:\n+        case OPT_version:\n+        case OPT_fintrinsic_modules_path:\n+          /* Ignore these.  */\n+          break;\n+\tdefault:\n+\t  /* Ignore file names. */\n+\t  if (save_decoded_options[j].orig_option_with_args_text[0] == '-')\n+\t    len += 1\n+\t\t + strlen (save_decoded_options[j].orig_option_with_args_text);\n+        }\n+    }\n+\n+  result = (char *) gfc_getmem (len);\n+\n+  pos = 0; \n+  for (j = 1; j < save_decoded_options_count; j++)\n+    {\n+      switch (save_decoded_options[j].opt_index)\n+        {\n+        case OPT_o:\n+        case OPT_d:\n+        case OPT_dumpbase:\n+        case OPT_dumpdir:\n+        case OPT_auxbase:\n+        case OPT_quiet:\n+        case OPT_version:\n+        case OPT_fintrinsic_modules_path:\n+          /* Ignore these.  */\n+\t  continue;\n+\n+        case OPT_cpp_:\n+\t  /* Use \"-cpp\" rather than \"-cpp=<temporary file>\".  */\n+\t  len = 4;\n+\t  break;\n+\n+        default:\n+\t  /* Ignore file names. */\n+\t  if (save_decoded_options[j].orig_option_with_args_text[0] != '-')\n+\t    continue;\n+\n+\t  len = strlen (save_decoded_options[j].orig_option_with_args_text);\n+        }\n+\n+      memcpy (&result[pos], save_decoded_options[j].orig_option_with_args_text, len);\n+      pos += len;\n+      result[pos++] = ' ';\n+    }\n+\n+  result[--pos] = '\\0';\n+  return result;\n+}"}, {"sha": "cdefcb51533f9a49316eb3fb8cf4a637cf86ab15", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=41804a5be02d8d811e5189a9cca9060f41cea765", "patch": "@@ -6739,16 +6739,26 @@ gfc_convert_char_constant (gfc_expr *e, bt type ATTRIBUTE_UNUSED, int kind)\n gfc_expr *\n gfc_simplify_compiler_options (void)\n {\n-  /* FIXME: PR40569 - return the proper compiler arguments.  */\n-  return gfc_get_character_expr (gfc_default_character_kind,\n-                                &gfc_current_locus, \"\", 0);\n+  char *str;\n+  gfc_expr *result;\n+\n+  str = gfc_get_option_string ();\n+  result = gfc_get_character_expr (gfc_default_character_kind,\n+\t\t\t\t   &gfc_current_locus, str, strlen (str));\n+  gfc_free (str);\n+  return result;\n }\n \n \n gfc_expr *\n gfc_simplify_compiler_version (void)\n {\n+  char *buffer;\n+  size_t len;\n+\n+  len = strlen (\"GCC version \") + strlen (version_string) + 1;\n+  buffer = (char*) alloca (len);\n+  snprintf (buffer, len, \"GCC version %s\", version_string);\n   return gfc_get_character_expr (gfc_default_character_kind,\n-                                &gfc_current_locus, version_string,\n-                                strlen (version_string));\n+                                &gfc_current_locus, buffer, len);\n }"}, {"sha": "cf12b2facc190213a29a2bc74d952f11f341962a", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=41804a5be02d8d811e5189a9cca9060f41cea765", "patch": "@@ -127,8 +127,8 @@ static bool no_backend;\n #define MAX_LINE 75\n \n /* Decoded options, and number of such options.  */\n-static struct cl_decoded_option *save_decoded_options;\n-static unsigned int save_decoded_options_count;\n+struct cl_decoded_option *save_decoded_options;\n+unsigned int save_decoded_options_count;\n \n /* Name of top-level original source file (what was input to cpp).\n    This comes from the #-command at the beginning of the actual input."}, {"sha": "c72f4681fbf0d1a33f026a1f801941243108e591", "filename": "gcc/toplev.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41804a5be02d8d811e5189a9cca9060f41cea765/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=41804a5be02d8d811e5189a9cca9060f41cea765", "patch": "@@ -29,6 +29,10 @@ along with GCC; see the file COPYING3.  If not see\n #define skip_leading_substring(whole,  part) \\\n    (strncmp (whole, part, strlen (part)) ? NULL : whole + strlen (part))\n \n+/* Decoded options, and number of such options.  */\n+extern struct cl_decoded_option *save_decoded_options;\n+extern unsigned int save_decoded_options_count;\n+\n extern int toplev_main (int, char **);\n extern void strip_off_ending (char *, int);\n extern void rest_of_decl_compilation (tree, int, int);"}]}