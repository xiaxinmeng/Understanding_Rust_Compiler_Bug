{"sha": "0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU0N2ZmNWNkZGU4OWYzZTg5NjEwYWNlMzg2NTllMGE4ZmMzN2FkMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-27T13:39:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-27T13:39:44Z"}, "message": "[multiple changes]\n\n2009-07-27  Robert Dewar  <dewar@adacore.com>\n\n\t* g-sse.ads: Minor reformatting\n\n2009-07-27  Arnaud Charlet  <charlet@adacore.com>\n\n\t* xref_lib.adb (Add_Xref_File_Internal, Find_ALI_Files): Add support for\n\talternate ali extension.\n\t* xr_tabls.adb (ALI_File_Name, Get_File, Set_Unvisited): Take into\n\taccount Osint.ALI_Suffix.\n\t* osint.ads (ALI_Suffix): Make visible.\n\t* gnatfind.adb (Gnatfind): Add support for --ext= switch.\n\t* gnat_ugn.texi: Document new gnatfind --ext= switch.\n\n2009-07-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem.adb (Walk_Library_Items): If main unit is an instance body, do\n\tits spec first.\n\n2009-07-27  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Expand_Dispatching_Call): Generate the SCIL node after\n\tthe dispatching call has is expanded.\n\nFrom-SVN: r150115", "tree": {"sha": "70ae878d3c8f06266dfec8f1f1ef0595588a0748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ae878d3c8f06266dfec8f1f1ef0595588a0748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/comments", "author": null, "committer": null, "parents": [{"sha": "648abd762939ddd5e44d965f19b222d45062d425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/648abd762939ddd5e44d965f19b222d45062d425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/648abd762939ddd5e44d965f19b222d45062d425"}], "stats": {"total": 205, "additions": 146, "deletions": 59}, "files": [{"sha": "ca9285d03307da2fd199db662b07d2d666a11cd8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "patch": "@@ -1,3 +1,27 @@\n+2009-07-27  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-sse.ads: Minor reformatting\n+\n+2009-07-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* xref_lib.adb (Add_Xref_File_Internal, Find_ALI_Files): Add support for\n+\talternate ali extension.\n+\t* xr_tabls.adb (ALI_File_Name, Get_File, Set_Unvisited): Take into\n+\taccount Osint.ALI_Suffix.\n+\t* osint.ads (ALI_Suffix): Make visible.\n+\t* gnatfind.adb (Gnatfind): Add support for --ext= switch.\n+\t* gnat_ugn.texi: Document new gnatfind --ext= switch.\n+\n+2009-07-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem.adb (Walk_Library_Items): If main unit is an instance body, do\n+\tits spec first.\n+\n+2009-07-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Dispatching_Call): Generate the SCIL node after\n+\tthe dispatching call has is expanded.\n+\n 2009-07-27  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_attr.adb (Expand_Attribute_Reference, case 'Valid): Reset the"}, {"sha": "010e6bf9e101bd32a99fd1fceb0e1d9d44658b33", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "patch": "@@ -643,17 +643,6 @@ package body Exp_Disp is\n          Typ := Non_Limited_View (Typ);\n       end if;\n \n-      --  Generate the SCIL node for this dispatching call\n-\n-      if Generate_SCIL then\n-         Insert_Action (Call_Node,\n-           New_SCIL_Node\n-             (SN_Kind      => Dispatching_Call,\n-              Related_Node => Call_Node,\n-              Entity       => Typ,\n-              Target_Prim  => Subp));\n-      end if;\n-\n       if not Is_Limited_Type (Typ) then\n          Eq_Prim_Op := Find_Prim_Op (Typ, Name_Op_Eq);\n       end if;\n@@ -877,6 +866,17 @@ package body Exp_Disp is\n       --  to avoid the generation of spurious warnings under ZFP run-time.\n \n       Analyze_And_Resolve (Call_Node, Call_Typ, Suppress => All_Checks);\n+\n+      --  Generate the SCIL node for this dispatching call\n+\n+      if Generate_SCIL then\n+         Insert_Action (Call_Node,\n+           New_SCIL_Node\n+             (SN_Kind      => Dispatching_Call,\n+              Related_Node => Call_Node,\n+              Entity       => Typ,\n+              Target_Prim  => Subp));\n+      end if;\n    end Expand_Dispatching_Call;\n \n    ---------------------------------"}, {"sha": "04eb6d5a914b611e677497a8cad824c43ad02897", "filename": "gcc/ada/g-sse.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fg-sse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fg-sse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sse.ads?ref=0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "patch": "@@ -30,8 +30,8 @@\n ------------------------------------------------------------------------------\n \n --  This package is the root of a set aimed at offering Ada bindings to a\n---  subset of the Intel(r) Streaming SIMD Extensions with GNAT. The purpose is\n---  to allow access from Ada to the SSE facilities defined in the Intel(r)\n+--  subset of the Intel(r) Streaming SIMD Extensions with GNAT. The purpose\n+--  is to allow access from Ada to the SSE facilities defined in the Intel(r)\n --  compiler manuals, in particular in the Intrinsics Reference of the C++\n --  Compiler User's Guide, available from http://www.intel.com.\n "}, {"sha": "e18a16cccb2794639f2d9982bd9d040ac38640da", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "patch": "@@ -15590,6 +15590,13 @@ Do not look for sources in the system default directory.\n @cindex @option{-nostdlib} (@command{gnatfind})\n Do not look for library files in the system default directory.\n \n+@item --ext=@var{extension}\n+@cindex @option{--ext} (@command{gnatfind})\n+Specify an alternate ali file extension. The default is @code{ali} and other\n+extensions (e.g. @code{sli} for SPARK library files) may be specified via this\n+switch. Note that if this switch overrides the default, which means that only\n+the new extension will be considered.\n+\n @item --RTS=@var{rts-path}\n @cindex @option{--RTS} (@command{gnatfind})\n Specifies the default location of the runtime library. Same meaning as the"}, {"sha": "45bc5ee200540b41fc274ca5c564a816ed6f1f37", "filename": "gcc/ada/gnatfind.adb", "status": "modified", "additions": 65, "deletions": 34, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fgnatfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fgnatfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatfind.adb?ref=0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -64,6 +64,9 @@ procedure Gnatfind is\n    RTS_Specified : String_Access := null;\n    --  Used to detect multiple use of --RTS= switch\n \n+   EXT_Specified : String_Access := null;\n+   --  Used to detect multiple use of --ext= switch\n+\n    procedure Parse_Cmd_Line;\n    --  Parse every switch on the command line\n \n@@ -95,7 +98,7 @@ procedure Gnatfind is\n       loop\n          case\n            GNAT.Command_Line.Getopt\n-             (\"a aI: aO: d e f g h I: nostdinc nostdlib p: r s t -RTS=\")\n+             (\"a aI: aO: d e f g h I: nostdinc nostdlib p: r s t -RTS= -ext=\")\n          is\n             when ASCII.NUL =>\n                exit;\n@@ -155,44 +158,71 @@ procedure Gnatfind is\n             --  Only switch starting with -- recognized is --RTS\n \n             when '-'    =>\n-               --  Check that it is the first time we see this switch\n-\n-               if RTS_Specified = null then\n-                  RTS_Specified := new String'(GNAT.Command_Line.Parameter);\n-\n-               elsif RTS_Specified.all /= GNAT.Command_Line.Parameter then\n-                  Osint.Fail (\"--RTS cannot be specified multiple times\");\n-               end if;\n \n-               Opt.No_Stdinc := True;\n-               Opt.RTS_Switch := True;\n+               if GNAT.Command_Line.Full_Switch = \"-RTS\" then\n+                  --  Check that it is the first time we see this switch\n \n-               declare\n-                  Src_Path_Name : constant String_Ptr :=\n-                                    Get_RTS_Search_Dir\n-                                      (GNAT.Command_Line.Parameter, Include);\n-                  Lib_Path_Name : constant String_Ptr :=\n-                                    Get_RTS_Search_Dir\n-                                      (GNAT.Command_Line.Parameter, Objects);\n-\n-               begin\n-                  if Src_Path_Name /= null and then Lib_Path_Name /= null then\n-                     Add_Search_Dirs (Src_Path_Name, Include);\n-                     Add_Search_Dirs (Lib_Path_Name, Objects);\n+                  if RTS_Specified = null then\n+                     RTS_Specified := new String'(GNAT.Command_Line.Parameter);\n \n-                  elsif Src_Path_Name = null and then Lib_Path_Name = null then\n-                     Osint.Fail (\"RTS path not valid: missing \" &\n-                                 \"adainclude and adalib directories\");\n+                  elsif RTS_Specified.all /= GNAT.Command_Line.Parameter then\n+                     Osint.Fail (\"--RTS cannot be specified multiple times\");\n+                  end if;\n \n-                  elsif Src_Path_Name = null then\n-                     Osint.Fail (\"RTS path not valid: missing \" &\n-                                 \"adainclude directory\");\n+                  Opt.No_Stdinc := True;\n+                  Opt.RTS_Switch := True;\n+\n+                  declare\n+                     Src_Path_Name : constant String_Ptr :=\n+                                       Get_RTS_Search_Dir\n+                                         (GNAT.Command_Line.Parameter,\n+                                          Include);\n+                     Lib_Path_Name : constant String_Ptr :=\n+                                       Get_RTS_Search_Dir\n+                                         (GNAT.Command_Line.Parameter,\n+                                          Objects);\n+\n+                  begin\n+                     if Src_Path_Name /= null\n+                       and then Lib_Path_Name /= null\n+                     then\n+                        Add_Search_Dirs (Src_Path_Name, Include);\n+                        Add_Search_Dirs (Lib_Path_Name, Objects);\n+\n+                     elsif Src_Path_Name = null\n+                       and then Lib_Path_Name = null\n+                     then\n+                        Osint.Fail (\"RTS path not valid: missing \" &\n+                                      \"adainclude and adalib directories\");\n+\n+                     elsif Src_Path_Name = null then\n+                        Osint.Fail (\"RTS path not valid: missing \" &\n+                                      \"adainclude directory\");\n+\n+                     elsif Lib_Path_Name = null then\n+                        Osint.Fail (\"RTS path not valid: missing \" &\n+                                      \"adalib directory\");\n+                     end if;\n+                  end;\n+               elsif GNAT.Command_Line.Full_Switch = \"-ext\" then\n+                  --  Check that it is the first time we see this switch\n+\n+                  if EXT_Specified = null then\n+                     EXT_Specified := new String'(GNAT.Command_Line.Parameter);\n+\n+                  elsif EXT_Specified.all /= GNAT.Command_Line.Parameter then\n+                     Osint.Fail (\"--ext cannot be specified multiple times\");\n+                  end if;\n \n-                  elsif Lib_Path_Name = null then\n-                     Osint.Fail (\"RTS path not valid: missing \" &\n-                                 \"adalib directory\");\n+                  if EXT_Specified'Length\n+                    = Osint.ALI_Default_Suffix'Length\n+                  then\n+                     Osint.ALI_Suffix := EXT_Specified.all'Access;\n+                  else\n+                     Osint.Fail (\"--ext argument must have 3 characters\");\n                   end if;\n-               end;\n+\n+               end if;\n \n             when others =>\n                Write_Usage;\n@@ -281,6 +311,7 @@ procedure Gnatfind is\n                 & \" directory\");\n       Put_Line (\"   -nostdlib Don't look for library files in the system\"\n                 & \" default directory\");\n+      Put_Line (\"   --ext=xxx Specify alternate ali file extension\");\n       Put_Line (\"   --RTS=dir specify the default source and object search\"\n                 & \" path\");\n       Put_Line (\"   -p file   Use file as the default project file\");"}, {"sha": "5ddda479efbbed911c95c65d11e1b0b9bb7d8248", "filename": "gcc/ada/osint.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fosint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fosint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.ads?ref=0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "patch": "@@ -571,11 +571,12 @@ package Osint is\n    pragma Import (C, Len_Arg, \"__gnat_len_arg\");\n    --  Get length of argument\n \n-private\n-\n-   ALI_Suffix : constant String_Ptr := new String'(\"ali\");\n+   ALI_Default_Suffix : constant String_Ptr := new String'(\"ali\");\n+   ALI_Suffix : String_Ptr := ALI_Default_Suffix;\n    --  The suffix used for the library files (also known as ALI files)\n \n+private\n+\n    Current_Main : File_Name_Type := No_File;\n    --  Used to save a simple file name between calls to Next_Main_Source and\n    --  Read_Source_File. If the file name argument to Read_Source_File is"}, {"sha": "6f68bdd81ce1a49f48d75dc598f870b27f1c98ad", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "patch": "@@ -1762,7 +1762,7 @@ package body Sem is\n             if Nkind (Item) = N_Package_Declaration then\n                Body_Unit := Library_Unit (CU);\n \n-            elsif Nkind (Item) = N_Package_Body then\n+            elsif Nkind_In (Item, N_Package_Body, N_Subprogram_Body) then\n                Body_Unit := CU;\n             end if;\n \n@@ -1860,7 +1860,26 @@ package body Sem is\n \n       if not Done (Main_Unit) then\n          Do_Main := True;\n-         Do_Unit_And_Dependents (Cunit (Main_Unit), Unit (Cunit (Main_Unit)));\n+\n+         declare\n+            Main_CU : constant Node_Id := Cunit (Main_Unit);\n+\n+         begin\n+\n+            --  If the main unit is an instantiation, the body appears\n+            --  before the instance spec, which is added later to the\n+            --  unit list. Do the spec if present, body will follow.\n+\n+            if Nkind (Original_Node (Unit (Main_CU)))\n+            in N_Generic_Instantiation\n+              and then Present (Library_Unit (Main_CU))\n+            then\n+               Do_Unit_And_Dependents\n+              (Library_Unit (Main_CU), Unit (Library_Unit (Main_CU)));\n+            else\n+               Do_Unit_And_Dependents (Main_CU, Unit (Main_CU));\n+            end if;\n+         end;\n       end if;\n \n       if Debug_Unit_Walk then"}, {"sha": "30a4ecc55a4e5390e660a15a23e0620ee0e95734", "filename": "gcc/ada/xr_tabls.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fxr_tabls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fxr_tabls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxr_tabls.adb?ref=0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -495,9 +495,10 @@ package body Xr_Tabls is\n \n    begin\n       if Index /= 0 then\n-         return Ada_File_Name (Ada_File_Name'First .. Index) & \"ali\";\n+         return Ada_File_Name (Ada_File_Name'First .. Index)\n+           & Osint.ALI_Suffix.all;\n       else\n-         return Ada_File_Name & \".ali\";\n+         return Ada_File_Name & \".\" & Osint.ALI_Suffix.all;\n       end if;\n    end ALI_File_Name;\n \n@@ -823,7 +824,9 @@ package body Xr_Tabls is\n       end if;\n \n       if File.Dir = null then\n-         if Ada.Strings.Fixed.Tail (File.File.all, 3) = \"ali\" then\n+         if Ada.Strings.Fixed.Tail (File.File.all, 3)\n+           = Osint.ALI_Suffix.all\n+         then\n             Tmp := Locate_Regular_File\n               (Internal_Strip (File.File.all), Directories.Obj_Dir);\n          else\n@@ -1392,7 +1395,7 @@ package body Xr_Tabls is\n       --  least for gnatxref, and probably for gnatfind as well\n \n       if F'Length > 4\n-        and then F (F'Last - 3 .. F'Last) = \".ali\"\n+        and then F (F'Last - 3 .. F'Last) = \".\" & Osint.ALI_Suffix.all\n       then\n          Unvisited_Files := new Unvisited_Files_Record'\n            (File => File_Ref,"}, {"sha": "475f15e38165ef517389369850fcf9a4bae40788", "filename": "gcc/ada/xref_lib.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fxref_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e47ff5cdde89f3e89610ace38659e0a8fc37ad1/gcc%2Fada%2Fxref_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxref_lib.adb?ref=0e47ff5cdde89f3e89610ace38659e0a8fc37ad1", "patch": "@@ -308,7 +308,7 @@ package body Xref_Lib is\n          --  Case where we have an ALI file, accept it even though this is\n          --  not official usage, since the intention is obvious\n \n-         if Tail (File, 4) = \".ali\" then\n+         if Tail (File, 4) = \".\" & Osint.ALI_Suffix.all then\n             File_Ref := Add_To_Xref_File\n                           (File, Visited => False, Emit_Warning => True);\n \n@@ -466,7 +466,9 @@ package body Xref_Lib is\n                   return;\n                end if;\n \n-            elsif Last > 4 and then Dir_Ent (Last - 3 .. Last) = \".ali\" then\n+            elsif Last > 4\n+              and then Dir_Ent (Last - 3 .. Last) = \".\" & Osint.ALI_Suffix.all\n+            then\n                File_Ref :=\n                  Add_To_Xref_File (Dir_Ent (1 .. Last), Visited => False);\n             end if;"}]}