{"sha": "d07548f9cab534c99961c42222c92fa1201fc368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA3NTQ4ZjljYWI1MzRjOTk5NjFjNDIyMjJjOTJmYTEyMDFmYzM2OA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-03-03T18:32:22Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-03-03T18:32:22Z"}, "message": "* interpret.cc (do_allocate_static_fields): Added comment.\n\nFrom-SVN: r111683", "tree": {"sha": "52487c80f51b4a4bece252841cdfab7adad1fd42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52487c80f51b4a4bece252841cdfab7adad1fd42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d07548f9cab534c99961c42222c92fa1201fc368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07548f9cab534c99961c42222c92fa1201fc368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d07548f9cab534c99961c42222c92fa1201fc368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07548f9cab534c99961c42222c92fa1201fc368/comments", "author": null, "committer": null, "parents": [{"sha": "65ad7c6394a21ac825bda9f71ff75b8a4a9e759e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65ad7c6394a21ac825bda9f71ff75b8a4a9e759e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65ad7c6394a21ac825bda9f71ff75b8a4a9e759e"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "87b0ef6dbdeb8666c10c2a9b4bcc1d8a864f2059", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07548f9cab534c99961c42222c92fa1201fc368/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07548f9cab534c99961c42222c92fa1201fc368/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d07548f9cab534c99961c42222c92fa1201fc368", "patch": "@@ -1,3 +1,7 @@\n+2006-03-03  Tom Tromey  <tromey@redhat.com>\n+\n+\t* interpret.cc (do_allocate_static_fields): Added comment.\n+\n 2006-03-01  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/24321:"}, {"sha": "0e6fbc847cfc0e34140ce867f5ca1710fe5ad9ae", "filename": "libjava/interpret.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07548f9cab534c99961c42222c92fa1201fc368/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07548f9cab534c99961c42222c92fa1201fc368/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=d07548f9cab534c99961c42222c92fa1201fc368", "patch": "@@ -3882,7 +3882,17 @@ _Jv_InterpreterEngine::do_allocate_static_fields (jclass klass,\n   _Jv_InterpClass *iclass = (_Jv_InterpClass *) klass->aux_info;\n \n   // Splitting the allocations here lets us scan reference fields and\n-  // avoid scanning non-reference fields.\n+  // avoid scanning non-reference fields.  How reference fields are\n+  // scanned is a bit tricky: we allocate using _Jv_AllocRawObj, which\n+  // means that this memory will be scanned conservatively (same\n+  // difference, since we know all the contents here are pointers).\n+  // Then we put pointers into this memory into the 'fields'\n+  // structure.  Most of these are interior pointers, which is ok (but\n+  // even so the pointer to the first reference field will be used and\n+  // that is not an interior pointer).  The 'fields' array is also\n+  // allocated with _Jv_AllocRawObj (see defineclass.cc), so it will\n+  // be scanned.  A pointer to this array is held by Class and thus\n+  // seen by the collector.\n   char *reference_fields = (char *) _Jv_AllocRawObj (pointer_size);\n   char *non_reference_fields = (char *) _Jv_AllocBytes (other_size);\n "}]}