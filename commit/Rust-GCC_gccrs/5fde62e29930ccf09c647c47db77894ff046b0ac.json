{"sha": "5fde62e29930ccf09c647c47db77894ff046b0ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZkZTYyZTI5OTMwY2NmMDljNjQ3YzQ3ZGI3Nzg5NGZmMDQ2YjBhYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-07-04T21:58:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-07-04T21:58:35Z"}, "message": "re PR c++/38634 (ICE with wrong number of template parameters)\n\n/cp\n2013-07-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/38634\n\t* decl.c (start_preparsed_function): Return a bool, false if\n\tpush_template_decl fails.\n\t(start_function): Adjust.\n\t* cp-tree.h: Update.\n\n/testsuite\n2013-07-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/38634\n\t* g++.dg/template/crash116.C: New.\n\nFrom-SVN: r200682", "tree": {"sha": "c58498a40d74bafba92fba29b471baa953295b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c58498a40d74bafba92fba29b471baa953295b4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fde62e29930ccf09c647c47db77894ff046b0ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fde62e29930ccf09c647c47db77894ff046b0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fde62e29930ccf09c647c47db77894ff046b0ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fde62e29930ccf09c647c47db77894ff046b0ac/comments", "author": null, "committer": null, "parents": [{"sha": "1d77bc548ad22e5a82ab8f885ea045f3fdfabd24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d77bc548ad22e5a82ab8f885ea045f3fdfabd24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d77bc548ad22e5a82ab8f885ea045f3fdfabd24"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "3a0ba58f7438be58f9b9ce46122064a0c6d0e263", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde62e29930ccf09c647c47db77894ff046b0ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde62e29930ccf09c647c47db77894ff046b0ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5fde62e29930ccf09c647c47db77894ff046b0ac", "patch": "@@ -1,3 +1,11 @@\n+2013-07-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/38634\n+\t* decl.c (start_preparsed_function): Return a bool, false if\n+\tpush_template_decl fails.\n+\t(start_function): Adjust.\n+\t* cp-tree.h: Update.\n+\n 2013-07-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/57771"}, {"sha": "1b0b2435c53d7f6008253fea21316c061ba6745c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde62e29930ccf09c647c47db77894ff046b0ac/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde62e29930ccf09c647c47db77894ff046b0ac/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5fde62e29930ccf09c647c47db77894ff046b0ac", "patch": "@@ -5206,8 +5206,9 @@ extern void finish_enum_value_list\t\t(tree);\n extern void finish_enum\t\t\t\t(tree);\n extern void build_enumerator\t\t\t(tree, tree, tree, location_t);\n extern tree lookup_enumerator\t\t\t(tree, tree);\n-extern void start_preparsed_function\t\t(tree, tree, int);\n-extern int start_function\t\t\t(cp_decl_specifier_seq *, const cp_declarator *, tree);\n+extern bool start_preparsed_function\t\t(tree, tree, int);\n+extern bool start_function\t\t\t(cp_decl_specifier_seq *,\n+\t\t\t\t\t\t const cp_declarator *, tree);\n extern tree begin_function_body\t\t\t(void);\n extern void finish_function_body\t\t(tree);\n extern tree outer_curly_brace_block\t\t(tree);"}, {"sha": "54bede00bb1d88881eb20cccf78cb5e75d999baa", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde62e29930ccf09c647c47db77894ff046b0ac/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde62e29930ccf09c647c47db77894ff046b0ac/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5fde62e29930ccf09c647c47db77894ff046b0ac", "patch": "@@ -12993,7 +12993,7 @@ check_function_type (tree decl, tree current_function_parms)\n    error_mark_node if the function has never been defined, or\n    a BLOCK if the function has been defined somewhere.  */\n \n-void\n+bool\n start_preparsed_function (tree decl1, tree attrs, int flags)\n {\n   tree ctype = NULL_TREE;\n@@ -13090,10 +13090,14 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n      by push_nested_class.)  */\n   if (processing_template_decl)\n     {\n-      /* FIXME: Handle error_mark_node more gracefully.  */\n       tree newdecl1 = push_template_decl (decl1);\n-      if (newdecl1 != error_mark_node)\n-\tdecl1 = newdecl1;\n+      if (newdecl1 == error_mark_node)\n+\t{\n+\t  if (ctype || DECL_STATIC_FUNCTION_P (decl1))\n+\t    pop_nested_class ();\n+\t  return false;\n+\t}\n+      decl1 = newdecl1;\n     }\n \n   /* We are now in the scope of the function being defined.  */\n@@ -13204,7 +13208,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   /* This function may already have been parsed, in which case just\n      return; our caller will skip over the body without parsing.  */\n   if (DECL_INITIAL (decl1) != error_mark_node)\n-    return;\n+    return true;\n \n   /* Initialize RTL machinery.  We cannot do this until\n      CURRENT_FUNCTION_DECL and DECL_RESULT are set up.  We do this\n@@ -13366,17 +13370,19 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   start_fname_decls ();\n \n   store_parm_decls (current_function_parms);\n+\n+  return true;\n }\n \n \n /* Like start_preparsed_function, except that instead of a\n    FUNCTION_DECL, this function takes DECLSPECS and DECLARATOR.\n \n-   Returns 1 on success.  If the DECLARATOR is not suitable for a function\n-   (it defines a datum instead), we return 0, which tells\n-   yyparse to report a parse error.  */\n+   Returns true on success.  If the DECLARATOR is not suitable\n+   for a function, we return false, which tells the parser to\n+   skip the entire function.  */\n \n-int\n+bool\n start_function (cp_decl_specifier_seq *declspecs,\n \t\tconst cp_declarator *declarator,\n \t\ttree attrs)\n@@ -13385,13 +13391,13 @@ start_function (cp_decl_specifier_seq *declspecs,\n \n   decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, 1, &attrs);\n   if (decl1 == error_mark_node)\n-    return 0;\n+    return false;\n   /* If the declarator is not suitable for a function definition,\n      cause a syntax error.  */\n   if (decl1 == NULL_TREE || TREE_CODE (decl1) != FUNCTION_DECL)\n     {\n       error (\"invalid function declaration\");\n-      return 0;\n+      return false;\n     }\n \n   if (DECL_MAIN_P (decl1))\n@@ -13400,9 +13406,7 @@ start_function (cp_decl_specifier_seq *declspecs,\n     gcc_assert (same_type_p (TREE_TYPE (TREE_TYPE (decl1)),\n \t\t\t     integer_type_node));\n \n-  start_preparsed_function (decl1, attrs, /*flags=*/SF_DEFAULT);\n-\n-  return 1;\n+  return start_preparsed_function (decl1, attrs, /*flags=*/SF_DEFAULT);\n }\n \f\n /* Returns true iff an EH_SPEC_BLOCK should be created in the body of"}, {"sha": "09599ffb5de5d9e42c3d3d3b1f83d45bfd4252c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde62e29930ccf09c647c47db77894ff046b0ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde62e29930ccf09c647c47db77894ff046b0ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fde62e29930ccf09c647c47db77894ff046b0ac", "patch": "@@ -1,3 +1,8 @@\n+2013-07-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/38634\n+\t* g++.dg/template/crash116.C: New.\n+\n 2013-07-04  Joern Rennecke <joern.rennecke@embecosm.com>\n \n \t* gcc.dg/tree-ssa/vrp66.c: Make conditional on { target { ! int16 } } ."}, {"sha": "d26c591ef4310d47936026ba1f7211714f3ee007", "filename": "gcc/testsuite/g++.dg/template/crash116.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde62e29930ccf09c647c47db77894ff046b0ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash116.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde62e29930ccf09c647c47db77894ff046b0ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash116.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash116.C?ref=5fde62e29930ccf09c647c47db77894ff046b0ac", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/38634\n+\n+template<int> struct A\n+{\n+  A();\n+};\n+\n+template<int N, char> A<N>::A()  // { dg-error \"template|required\" }\n+{\n+  struct B {};\n+}\n+\n+A<0> a;"}]}