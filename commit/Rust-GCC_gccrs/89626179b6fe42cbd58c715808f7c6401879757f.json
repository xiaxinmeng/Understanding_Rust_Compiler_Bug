{"sha": "89626179b6fe42cbd58c715808f7c6401879757f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2MjYxNzliNmZlNDJjYmQ1OGM3MTU4MDhmN2M2NDAxODc5NzU3Zg==", "commit": {"author": {"name": "Sudakshina Das", "email": "sudi.das@arm.com", "date": "2019-07-31T09:19:53Z"}, "committer": {"name": "Sudakshina Das", "email": "sudi@gcc.gnu.org", "date": "2019-07-31T09:19:53Z"}, "message": "[GCC, AArch64] Enable Transactional Memory Extension\n\nThis patch enables the new Transactional Memory Extension announced recently\nas part of Arm's new architecture technologies.\nWe introduce a new optional extension \"tme\" to enable this. The following\ninstructions are part of the extension:\n   * tstart <Xt>\n   * ttest <Xt>\n   * tcommit\n   * tcancel #<imm>\nWe have also added ACLE intrinsics for the instructions.\n\n*** gcc/ChangeLog ***\n\n2019-07-31  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/aarch64/aarch64-builtins.c (enum aarch64_builtins): Add\n\tAARCH64_TME_BUILTIN_TSTART, AARCH64_TME_BUILTIN_TCOMMIT,\n\tAARCH64_TME_BUILTIN_TTEST and AARCH64_TME_BUILTIN_TCANCEL.\n\t(aarch64_init_tme_builtins): New.\n\t(aarch64_init_builtins): Call aarch64_init_tme_builtins.\n\t(aarch64_expand_builtin_tme): New.\n\t(aarch64_expand_builtin): Handle TME builtins.\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n\t__ARM_FEATURE_TME when enabled.\n\t* config/aarch64/aarch64-option-extensions.def: Add \"tme\".\n\t* config/aarch64/aarch64.h (AARCH64_FL_TME, AARCH64_ISA_TME): New.\n\t(TARGET_TME): New.\n\t* config/aarch64/aarch64.md (define_c_enum \"unspec\"): Add UNSPEC_TTEST.\n\t(define_c_enum \"unspecv\"): Add UNSPECV_TSTART, UNSPECV_TCOMMIT and\n\tUNSPECV_TCANCEL.\n\t(tstart, ttest, tcommit, tcancel): New instructions.\n\t* config/aarch64/arm_acle.h (__tstart, __tcommit): New.\n\t(__tcancel, __ttest): New.\n\t(_TMFAILURE_REASON, _TMFAILURE_RTRY, _TMFAILURE_CNCL): New macro.\n\t(_TMFAILURE_MEM, _TMFAILURE_IMP, _TMFAILURE_ERR): Likewise.\n\t(_TMFAILURE_SIZE, _TMFAILURE_NEST, _TMFAILURE_DBG): Likewise.\n\t(_TMFAILURE_INT, _TMFAILURE_TRIVIAL): Likewise.\n\t* config/arm/types.md: Add new tme type attr.\n\t* doc/invoke.texi: Document \"tme\".\n\n*** gcc/testsuite/ChangeLog ***\n\n2019-07-31  Sudakshina Das  <sudi.das@arm.com>\n\n\t* gcc.target/aarch64/acle/tme.c: New test.\n\t* gcc.target/aarch64/pragma_cpp_predefs_2.c: New test.\n\nFrom-SVN: r273926", "tree": {"sha": "134de5d3150b985d590bffa2ad2879734c18f5e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/134de5d3150b985d590bffa2ad2879734c18f5e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89626179b6fe42cbd58c715808f7c6401879757f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89626179b6fe42cbd58c715808f7c6401879757f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89626179b6fe42cbd58c715808f7c6401879757f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89626179b6fe42cbd58c715808f7c6401879757f/comments", "author": {"login": "sudakshina-das-arm", "id": 28538945, "node_id": "MDQ6VXNlcjI4NTM4OTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudakshina-das-arm", "html_url": "https://github.com/sudakshina-das-arm", "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers", "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}", "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions", "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs", "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos", "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0efd92502a0eb33c8f8f9e1ea03b25a714b2d72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0efd92502a0eb33c8f8f9e1ea03b25a714b2d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0efd92502a0eb33c8f8f9e1ea03b25a714b2d72"}], "stats": {"total": 287, "additions": 280, "deletions": 7}, "files": [{"sha": "3e166c3f3afc919108095ebee23b253b436206a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -1,3 +1,30 @@\n+2019-07-31  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (enum aarch64_builtins): Add\n+\tAARCH64_TME_BUILTIN_TSTART, AARCH64_TME_BUILTIN_TCOMMIT,\n+\tAARCH64_TME_BUILTIN_TTEST and AARCH64_TME_BUILTIN_TCANCEL.\n+\t(aarch64_init_tme_builtins): New.\n+\t(aarch64_init_builtins): Call aarch64_init_tme_builtins.\n+\t(aarch64_expand_builtin_tme): New.\n+\t(aarch64_expand_builtin): Handle TME builtins.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n+\t__ARM_FEATURE_TME when enabled.\n+\t* config/aarch64/aarch64-option-extensions.def: Add \"tme\".\n+\t* config/aarch64/aarch64.h (AARCH64_FL_TME, AARCH64_ISA_TME): New.\n+\t(TARGET_TME): New.\n+\t* config/aarch64/aarch64.md (define_c_enum \"unspec\"): Add UNSPEC_TTEST.\n+\t(define_c_enum \"unspecv\"): Add UNSPECV_TSTART, UNSPECV_TCOMMIT and\n+\tUNSPECV_TCANCEL.\n+\t(tstart, ttest, tcommit, tcancel): New instructions.\n+\t* config/aarch64/arm_acle.h (__tstart, __tcommit): New.\n+\t(__tcancel, __ttest): New.\n+\t(_TMFAILURE_REASON, _TMFAILURE_RTRY, _TMFAILURE_CNCL): New macro.\n+\t(_TMFAILURE_MEM, _TMFAILURE_IMP, _TMFAILURE_ERR): Likewise.\n+\t(_TMFAILURE_SIZE, _TMFAILURE_NEST, _TMFAILURE_DBG): Likewise.\n+\t(_TMFAILURE_INT, _TMFAILURE_TRIVIAL): Likewise.\n+\t* config/arm/types.md: Add new tme type attr.\n+\t* doc/invoke.texi: Document \"tme\".\n+\n 2019-07-31  Joel Hutton  <Joel.Hutton@arm.com>\n \n \t* config/arm/arm_cmse.h (cmse_nonsecure_caller): Add"}, {"sha": "16c1d42ea2be0f477692be592e30ba8ce27f05a7", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -438,6 +438,11 @@ enum aarch64_builtins\n   /* Special cased Armv8.3-A Complex FMA by Lane quad Builtins.  */\n   AARCH64_SIMD_FCMLA_LANEQ_BUILTIN_BASE,\n   AARCH64_SIMD_FCMLA_LANEQ_BUILTINS\n+  /* TME builtins.  */\n+  AARCH64_TME_BUILTIN_TSTART,\n+  AARCH64_TME_BUILTIN_TCOMMIT,\n+  AARCH64_TME_BUILTIN_TTEST,\n+  AARCH64_TME_BUILTIN_TCANCEL,\n   AARCH64_BUILTIN_MAX\n };\n \n@@ -1067,6 +1072,35 @@ aarch64_init_pauth_hint_builtins (void)\n \t\t\t    NULL_TREE);\n }\n \n+/* Initialize the transactional memory extension (TME) builtins.  */\n+static void\n+aarch64_init_tme_builtins (void)\n+{\n+  tree ftype_uint64_void\n+    = build_function_type_list (uint64_type_node, NULL);\n+  tree ftype_void_void\n+    = build_function_type_list (void_type_node, NULL);\n+  tree ftype_void_uint64\n+    = build_function_type_list (void_type_node, uint64_type_node, NULL);\n+\n+  aarch64_builtin_decls[AARCH64_TME_BUILTIN_TSTART]\n+    = add_builtin_function (\"__builtin_aarch64_tstart\", ftype_uint64_void,\n+\t\t\t    AARCH64_TME_BUILTIN_TSTART, BUILT_IN_MD,\n+\t\t\t    NULL, NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_TME_BUILTIN_TTEST]\n+    = add_builtin_function (\"__builtin_aarch64_ttest\", ftype_uint64_void,\n+\t\t\t    AARCH64_TME_BUILTIN_TTEST, BUILT_IN_MD,\n+\t\t\t    NULL, NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_TME_BUILTIN_TCOMMIT]\n+    = add_builtin_function (\"__builtin_aarch64_tcommit\", ftype_void_void,\n+\t\t\t    AARCH64_TME_BUILTIN_TCOMMIT, BUILT_IN_MD,\n+\t\t\t    NULL, NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_TME_BUILTIN_TCANCEL]\n+    = add_builtin_function (\"__builtin_aarch64_tcancel\", ftype_void_uint64,\n+\t\t\t    AARCH64_TME_BUILTIN_TCANCEL, BUILT_IN_MD,\n+\t\t\t    NULL, NULL_TREE);\n+}\n+\n void\n aarch64_init_builtins (void)\n {\n@@ -1104,6 +1138,9 @@ aarch64_init_builtins (void)\n      register them.  */\n   if (!TARGET_ILP32)\n     aarch64_init_pauth_hint_builtins ();\n+\n+  if (TARGET_TME)\n+    aarch64_init_tme_builtins ();\n }\n \n tree\n@@ -1507,6 +1544,47 @@ aarch64_expand_fcmla_builtin (tree exp, rtx target, int fcode)\n   return target;\n }\n \n+/* Function to expand an expression EXP which calls one of the Transactional\n+   Memory Extension (TME) builtins FCODE with the result going to TARGET.  */\n+static rtx\n+aarch64_expand_builtin_tme (int fcode, tree exp, rtx target)\n+{\n+  switch (fcode)\n+    {\n+    case AARCH64_TME_BUILTIN_TSTART:\n+      target = gen_reg_rtx (DImode);\n+      emit_insn (GEN_FCN (CODE_FOR_tstart) (target));\n+      break;\n+\n+    case AARCH64_TME_BUILTIN_TTEST:\n+      target = gen_reg_rtx (DImode);\n+      emit_insn (GEN_FCN (CODE_FOR_ttest) (target));\n+      break;\n+\n+    case AARCH64_TME_BUILTIN_TCOMMIT:\n+      emit_insn (GEN_FCN (CODE_FOR_tcommit) ());\n+      break;\n+\n+    case AARCH64_TME_BUILTIN_TCANCEL:\n+      {\n+\ttree arg0 = CALL_EXPR_ARG (exp, 0);\n+\trtx op0 = expand_normal (arg0);\n+\tif (CONST_INT_P (op0) && UINTVAL (op0) <= 65536)\n+\t  emit_insn (GEN_FCN (CODE_FOR_tcancel) (op0));\n+\telse\n+\t  {\n+\t    error (\"%Kargument must be a 16-bit constant immediate\", exp);\n+\t    return const0_rtx;\n+\t  }\n+      }\n+      break;\n+\n+    default :\n+      gcc_unreachable ();\n+    }\n+    return target;\n+}\n+\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient.  */\n rtx\n@@ -1627,6 +1705,12 @@ aarch64_expand_builtin (tree exp,\n       || fcode == AARCH64_BUILTIN_RSQRT_V4SF)\n     return aarch64_expand_builtin_rsqrt (fcode, exp, target);\n \n+  if (fcode == AARCH64_TME_BUILTIN_TSTART\n+      || fcode == AARCH64_TME_BUILTIN_TCOMMIT\n+      || fcode == AARCH64_TME_BUILTIN_TTEST\n+      || fcode == AARCH64_TME_BUILTIN_TCANCEL)\n+    return aarch64_expand_builtin_tme (fcode, exp, target);\n+\n   gcc_unreachable ();\n }\n "}, {"sha": "e532c6cd142f64f050d7b5da8ab01e1f5ac3b909", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -157,6 +157,8 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n   aarch64_def_or_undef (TARGET_SM4, \"__ARM_FEATURE_SM4\", pfile);\n   aarch64_def_or_undef (TARGET_F16FML, \"__ARM_FEATURE_FP16_FML\", pfile);\n \n+  aarch64_def_or_undef (TARGET_TME, \"__ARM_FEATURE_TME\", pfile);\n+\n   /* Not for ACLE, but required to keep \"float.h\" correct if we switch\n      target between implementations that do or do not support ARMv8.2-A\n      16-bit floating-point extensions.  */"}, {"sha": "9919edd43d04db107f745b546d6586c43c51913f", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -195,4 +195,7 @@ AARCH64_OPT_EXTENSION(\"sve2-bitperm\", AARCH64_FL_SVE2_BITPERM, AARCH64_FL_SIMD |\n \t\t      AARCH64_FL_F16 | AARCH64_FL_FP | AARCH64_FL_SVE | \\\n \t\t      AARCH64_FL_SVE2, 0, false, \"\")\n \n+/* Enabling or disabling \"tme\" only changes \"tme\".  */\n+AARCH64_OPT_EXTENSION(\"tme\", AARCH64_FL_TME, 0, 0, false, \"\")\n+\n #undef AARCH64_OPT_EXTENSION"}, {"sha": "34fca9003ccba20f1cb11e35ca2676f81a7251db", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -199,6 +199,9 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_SVE2_SHA3\t(1ULL << 31)\n #define AARCH64_FL_SVE2_BITPERM\t(1ULL << 32)\n \n+/* Transactional Memory Extension.  */\n+#define AARCH64_FL_TME\t      (1ULL << 33)  /* Has TME instructions.  */\n+\n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n \n@@ -243,6 +246,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_F16FML\t   (aarch64_isa_flags & AARCH64_FL_F16FML)\n #define AARCH64_ISA_RCPC8_4\t   (aarch64_isa_flags & AARCH64_FL_RCPC8_4)\n #define AARCH64_ISA_V8_5\t   (aarch64_isa_flags & AARCH64_FL_V8_5)\n+#define AARCH64_ISA_TME\t\t   (aarch64_isa_flags & AARCH64_FL_TME)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)\n@@ -287,6 +291,9 @@ extern unsigned aarch64_architecture_version;\n /* Armv8.3-a Complex number extension to AdvSIMD extensions.  */\n #define TARGET_COMPLEX (TARGET_SIMD && TARGET_ARMV8_3)\n \n+/* TME instructions are enabled.  */\n+#define TARGET_TME (AARCH64_ISA_TME)\n+\n /* Make sure this is always defined so we don't have to check for ifdefs\n    but rather use normal ifs.  */\n #ifndef TARGET_FIX_ERR_A53_835769_DEFAULT"}, {"sha": "873f2760cceaac756ca5d96ab35873ce15a5501b", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -236,6 +236,7 @@\n     UNSPEC_REV_SUBREG\n     UNSPEC_SPECULATION_TRACKER\n     UNSPEC_COPYSIGN\n+    UNSPEC_TTEST\t\t; Represent transaction test.\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -251,6 +252,9 @@\n     UNSPECV_BTI_C\t\t; Represent BTI c.\n     UNSPECV_BTI_J\t\t; Represent BTI j.\n     UNSPECV_BTI_JC\t\t; Represent BTI jc.\n+    UNSPECV_TSTART\t\t; Represent transaction start.\n+    UNSPECV_TCOMMIT\t\t; Represent transaction commit.\n+    UNSPECV_TCANCEL\t\t; Represent transaction cancel.\n   ]\n )\n \n@@ -7242,6 +7246,43 @@\n    (set_attr \"speculation_barrier\" \"true\")]\n )\n \n+;; Transactional Memory Extension (TME) instructions.\n+\n+(define_insn \"tstart\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:DI [(const_int 0)] UNSPECV_TSTART))\n+   (clobber (mem:BLK (scratch)))]\n+  \"TARGET_TME\"\n+  \"tstart\\\\t%0\"\n+  [(set_attr \"type\" \"tme\")]\n+)\n+\n+(define_insn \"ttest\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:DI [(const_int 0)] UNSPEC_TTEST))\n+   (clobber (mem:BLK (scratch)))]\n+  \"TARGET_TME\"\n+  \"ttest\\\\t%0\"\n+  [(set_attr \"type\" \"tme\")]\n+)\n+\n+(define_insn \"tcommit\"\n+  [(unspec_volatile:BLK [(const_int 0)] UNSPECV_TCOMMIT)\n+   (clobber (mem:BLK (scratch)))]\n+  \"TARGET_TME\"\n+  \"tcommit\"\n+  [(set_attr \"type\" \"tme\")]\n+)\n+\n+(define_insn \"tcancel\"\n+  [(unspec_volatile:BLK\n+     [(match_operand 0 \"const_int_operand\" \"n\")] UNSPECV_TCANCEL)\n+   (clobber (mem:BLK (scratch)))]\n+  \"TARGET_TME && (UINTVAL (operands[0]) <= 65535)\"\n+  \"tcancel\\\\t#%0\"\n+  [(set_attr \"type\" \"tme\")]\n+)\n+\n ;; AdvSIMD Stuff\n (include \"aarch64-simd.md\")\n "}, {"sha": "d4de691eec5e45d7aa6b1f904ec0765916015c6f", "filename": "gcc/config/aarch64/arm_acle.h", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_acle.h?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -29,14 +29,14 @@\n \n #include <stdint.h>\n \n-#pragma GCC push_options\n-\n-#pragma GCC target (\"+nothing+crc\")\n-\n #ifdef __cplusplus\n extern \"C\" {\n #endif\n \n+#pragma GCC push_options\n+\n+#pragma GCC target (\"+nothing+crc\")\n+\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n __crc32b (uint32_t __a, uint8_t __b)\n {\n@@ -85,10 +85,53 @@ __crc32d (uint32_t __a, uint64_t __b)\n   return __builtin_aarch64_crc32x (__a, __b);\n }\n \n-#ifdef __cplusplus\n+#pragma GCC pop_options\n+\n+#ifdef __ARM_FEATURE_TME\n+#pragma GCC push_options\n+#pragma GCC target (\"+nothing+tme\")\n+\n+#define _TMFAILURE_REASON     0x00007fffu\n+#define _TMFAILURE_RTRY       0x00008000u\n+#define _TMFAILURE_CNCL       0x00010000u\n+#define _TMFAILURE_MEM        0x00020000u\n+#define _TMFAILURE_IMP        0x00040000u\n+#define _TMFAILURE_ERR        0x00080000u\n+#define _TMFAILURE_SIZE       0x00100000u\n+#define _TMFAILURE_NEST       0x00200000u\n+#define _TMFAILURE_DBG        0x00400000u\n+#define _TMFAILURE_INT        0x00800000u\n+#define _TMFAILURE_TRIVIAL    0x01000000u\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+__tstart (void)\n+{\n+  return __builtin_aarch64_tstart ();\n+}\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__tcommit (void)\n+{\n+  __builtin_aarch64_tcommit ();\n+}\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__tcancel (const uint64_t __reason)\n+{\n+  __builtin_aarch64_tcancel (__reason);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+__ttest (void)\n+{\n+  return __builtin_aarch64_ttest ();\n }\n-#endif\n \n #pragma GCC pop_options\n+#endif\n+\n+#ifdef __cplusplus\n+}\n+#endif\n \n #endif"}, {"sha": "03d6b67c30d514b0ba09554d52fed24b9bd91e88", "filename": "gcc/config/arm/types.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Farm%2Ftypes.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fconfig%2Farm%2Ftypes.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftypes.md?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -546,6 +546,10 @@\n ; The classification below is for coprocessor instructions\n ;\n ; coproc\n+;\n+; The classification below is for TME instructions\n+;\n+; tme\n \n (define_attr \"type\"\n  \"adc_imm,\\\n@@ -1091,7 +1095,8 @@\n   crypto_sha3,\\\n   crypto_sm3,\\\n   crypto_sm4,\\\n-  coproc\"\n+  coproc,\\\n+  tme\"\n    (const_string \"untyped\"))\n \n ; Is this an (integer side) multiply with a 32-bit (or smaller) result?"}, {"sha": "08e99564a70e8f8734560b39c849f5b3862fecf6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -16095,6 +16095,8 @@ Enable SVE2 aes instructions.  This also enables SVE2 instructions.\n @item sve2-sha3\n Enable SVE2 sha3 instructions.  This also enables SVE2 instructions.\n @option{-march=armv8.5-a}.\n+@item tme\n+Enable the Transactional Memory Extension.\n \n @end table\n "}, {"sha": "632164ab3308107a741e2ab1e34c5492c60dc720", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -1,3 +1,8 @@\n+2019-07-31  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* gcc.target/aarch64/acle/tme.c: New test.\n+\t* gcc.target/aarch64/pragma_cpp_predefs_2.c: New test.\n+\n 2019-07-31  Joel Hutton  <Joel.Hutton@arm.com>\n \n \t* gcc.target/arm/cmse/cmse-17.c: New test."}, {"sha": "5df93b1dcb101a01a864b6b81ed9ed7ee297dd69", "filename": "gcc/testsuite/gcc.target/aarch64/acle/tme.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Ftme.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Ftme.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Ftme.c?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -0,0 +1,34 @@\n+/* Test the TME intrinsics.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O2 -march=armv8-a+tme\" } */\n+\n+#include \"arm_acle.h\"\n+\n+#define tcancel_reason 0x234\n+\n+unsigned\n+check_tme (void)\n+{\n+  unsigned status = __tstart ();\n+  if (status == 0)\n+    {\n+      if (__ttest () == 2)\n+\t{\n+\t  __tcancel (tcancel_reason & _TMFAILURE_REASON);\n+\t  return tcancel_reason;\n+\t}\n+\n+      __tcommit ();\n+      return 0;\n+    }\n+  else if (status & _TMFAILURE_NEST)\n+    return _TMFAILURE_NEST;\n+  else if (status & _TMFAILURE_TRIVIAL)\n+    return _TMFAILURE_TRIVIAL;\n+}\n+\n+/* { dg-final { scan-assembler \"tstart\\tx..?\\n\" } } */\n+/* { dg-final { scan-assembler \"tcancel\\t#564\\n\" } } */\n+/* { dg-final { scan-assembler \"ttest\\tx..?\\n\" } } */\n+/* { dg-final { scan-assembler \"tcommit\\n\" } } */"}, {"sha": "608b89d19ce54851cb6abad227c32b081ca03dab", "filename": "gcc/testsuite/gcc.target/aarch64/pragma_cpp_predefs_2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89626179b6fe42cbd58c715808f7c6401879757f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c?ref=89626179b6fe42cbd58c715808f7c6401879757f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-a+tme\")\n+#ifndef __ARM_FEATURE_TME\n+#error \"__ARM_FEATURE_TME is not defined but should be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+#ifdef __ARM_FEATURE_TME\n+#error \"__ARM_FEATURE_TME is defined but should not be!\"\n+#endif\n+\n+int\n+foo (int a)\n+{\n+  return a;\n+}"}]}