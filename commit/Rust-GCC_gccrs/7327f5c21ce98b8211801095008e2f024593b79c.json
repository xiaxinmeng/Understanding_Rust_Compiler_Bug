{"sha": "7327f5c21ce98b8211801095008e2f024593b79c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMyN2Y1YzIxY2U5OGI4MjExODAxMDk1MDA4ZTJmMDI0NTkzYjc5Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T13:15:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T13:15:40Z"}, "message": "[multiple changes]\n\n2017-04-27  Yannick Moy  <moy@adacore.com>\n\n\t* sem_res.adb: Remove duplicate code.\n\t* sem_attr.adb: Delete duplicate code.\n\n2017-04-27  Bob Duff  <duff@adacore.com>\n\n\t* g-dyntab.adb: Reduce the amount of copying in\n\tRelease. No need to copy items past Last.\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* checks.adb Add with and use clauses for Sem_Disp.\n\t(Install_Primitive_Elaboration_Check): New routine.\n\t* checks.ads (Install_Primitive_Elaboration_Check): New routine.\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Clean up the\n\tprocessing of 'Elaborated.\n\t* exp_ch6.adb (Expand_N_Subprogram_Body): Install a primitive\n\telaboration check.\n\nFrom-SVN: r247330", "tree": {"sha": "187dbca6624cfb9c6e298d7a2321a62a7e9b946e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/187dbca6624cfb9c6e298d7a2321a62a7e9b946e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7327f5c21ce98b8211801095008e2f024593b79c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7327f5c21ce98b8211801095008e2f024593b79c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7327f5c21ce98b8211801095008e2f024593b79c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7327f5c21ce98b8211801095008e2f024593b79c/comments", "author": null, "committer": null, "parents": [{"sha": "7494697b8c55022b046dbed542369289646fbe22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7494697b8c55022b046dbed542369289646fbe22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7494697b8c55022b046dbed542369289646fbe22"}], "stats": {"total": 257, "additions": 239, "deletions": 18}, "files": [{"sha": "bfc46b99e56c5fea03e3b6865a594de96610bae1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7327f5c21ce98b8211801095008e2f024593b79c", "patch": "@@ -1,3 +1,23 @@\n+2017-04-27  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb: Remove duplicate code.\n+\t* sem_attr.adb: Delete duplicate code.\n+\n+2017-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* g-dyntab.adb: Reduce the amount of copying in\n+\tRelease. No need to copy items past Last.\n+\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb Add with and use clauses for Sem_Disp.\n+\t(Install_Primitive_Elaboration_Check): New routine.\n+\t* checks.ads (Install_Primitive_Elaboration_Check): New routine.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Clean up the\n+\tprocessing of 'Elaborated.\n+\t* exp_ch6.adb (Expand_N_Subprogram_Body): Install a primitive\n+\telaboration check.\n+\n 2017-04-27  Bob Duff  <duff@adacore.com>\n \n \t* g-dyntab.ads, g-dyntab.adb, g-table.ads: Remove incorrect assertion."}, {"sha": "d9a36df32a99c2631ac7723f1fdbff25b64e56f3", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=7327f5c21ce98b8211801095008e2f024593b79c", "patch": "@@ -48,6 +48,7 @@ with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch8;  use Sem_Ch8;\n+with Sem_Disp; use Sem_Disp;\n with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n@@ -7734,6 +7735,203 @@ package body Checks is\n       Mark_Non_Null;\n    end Install_Null_Excluding_Check;\n \n+   -----------------------------------------\n+   -- Install_Primitive_Elaboration_Check --\n+   -----------------------------------------\n+\n+   procedure Install_Primitive_Elaboration_Check (Subp_Body : Node_Id) is\n+\n+      function Within_Compilation_Unit_Instance\n+        (Subp_Id : Entity_Id) return Boolean;\n+      --  Determine whether subprogram Subp_Id appears within an instance which\n+      --  acts as a compilation unit.\n+\n+      --------------------------------------\n+      -- Within_Compilation_Unit_Instance --\n+      --------------------------------------\n+\n+      function Within_Compilation_Unit_Instance\n+        (Subp_Id : Entity_Id) return Boolean\n+      is\n+         Pack : Entity_Id;\n+\n+      begin\n+         --  Examine the scope chain looking for a compilation-unit-level\n+         --  instance.\n+\n+         Pack := Scope (Subp_Id);\n+         while Present (Pack) and then Pack /= Standard_Standard loop\n+            if Ekind (Pack) = E_Package\n+              and then Is_Generic_Instance (Pack)\n+              and then Nkind (Parent (Unit_Declaration_Node (Pack))) =\n+                         N_Compilation_Unit\n+            then\n+               return True;\n+            end if;\n+\n+            Pack := Scope (Pack);\n+         end loop;\n+\n+         return False;\n+      end Within_Compilation_Unit_Instance;\n+\n+      --  Local declarations\n+\n+      Context   : constant Node_Id    := Parent (Subp_Body);\n+      Loc       : constant Source_Ptr := Sloc (Subp_Body);\n+      Subp_Id   : constant Entity_Id  := Unique_Defining_Entity (Subp_Body);\n+      Subp_Decl : constant Node_Id    := Unit_Declaration_Node (Subp_Id);\n+\n+      Decls   : List_Id;\n+      Flag_Id : Entity_Id;\n+      Set_Ins : Node_Id;\n+      Tag_Typ : Entity_Id;\n+\n+   --  Start of processing for Install_Primitive_Elaboration_Check\n+\n+   begin\n+      --  Do not generate an elaboration check in compilation modes where\n+      --  expansion is not desirable.\n+\n+      if ASIS_Mode or GNATprove_Mode then\n+         return;\n+\n+      --  Do not generate an elaboration check if the related subprogram is\n+      --  not subjected to accessibility checks.\n+\n+      elsif Elaboration_Checks_Suppressed (Subp_Id) then\n+         return;\n+\n+      --  Do not consider subprograms which act as compilation units, because\n+      --  they cannot be the target of a dispatching call.\n+\n+      elsif Nkind (Context) = N_Compilation_Unit then\n+         return;\n+\n+      --  Only nonabstract library-level source primitives are considered for\n+      --  this check.\n+\n+      elsif not\n+        (Comes_From_Source (Subp_Id)\n+          and then Is_Library_Level_Entity (Subp_Id)\n+          and then Is_Primitive (Subp_Id)\n+          and then not Is_Abstract_Subprogram (Subp_Id))\n+      then\n+         return;\n+\n+      --  Do not consider inlined primitives, because once the body is inlined\n+      --  the reference to the elaboration flag will be out of place and will\n+      --  result in an undefined symbol.\n+\n+      elsif Is_Inlined (Subp_Id) or else Has_Pragma_Inline (Subp_Id) then\n+         return;\n+\n+      --  Do not generate a duplicate elaboration check. This happens only in\n+      --  the case of primitives completed by an expression function, as the\n+      --  corresponding body is apparently analyzed and expanded twice.\n+\n+      elsif Analyzed (Subp_Body) then\n+         return;\n+\n+      --  Do not consider primitives which occur within an instance that acts\n+      --  as a compilation unit. Such an instance defines its spec and body out\n+      --  of order (body is first) within the tree, which causes the reference\n+      --  to the elaboration flag to appear as an undefined symbol.\n+\n+      elsif Within_Compilation_Unit_Instance (Subp_Id) then\n+         return;\n+      end if;\n+\n+      Tag_Typ := Find_Dispatching_Type (Subp_Id);\n+\n+      --  Only tagged primitives may be the target of a dispatching call\n+\n+      if No (Tag_Typ) then\n+         return;\n+\n+      --  Do not consider finalization-related primitives, because they may\n+      --  need to be called while elaboration is taking place.\n+\n+      elsif Is_Controlled (Tag_Typ)\n+        and then Nam_In (Chars (Subp_Id), Name_Adjust,\n+                                          Name_Finalize,\n+                                          Name_Initialize)\n+      then\n+         return;\n+      end if;\n+\n+      --  Create the declaration of the elaboration flag. The name carries a\n+      --  unique counter in case of name overloading.\n+\n+      Flag_Id :=\n+        Make_Defining_Identifier (Loc,\n+          Chars => New_External_Name (Chars (Subp_Id), 'F', -1));\n+      Set_Is_Frozen (Flag_Id);\n+\n+      --  Insert the declaration of the elaboration flag in front of the\n+      --  primitive spec and analyze it in the proper context.\n+\n+      Push_Scope (Scope (Subp_Id));\n+\n+      --  Generate:\n+      --    F : Boolean := False;\n+\n+      Insert_Action (Subp_Decl,\n+        Make_Object_Declaration (Loc,\n+          Defining_Identifier => Flag_Id,\n+          Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc),\n+          Expression          => New_Occurrence_Of (Standard_False, Loc)));\n+      Pop_Scope;\n+\n+      --  Prevent the compiler from optimizing the elaboration check by killing\n+      --  the current value of the flag and the associated assignment.\n+\n+      Set_Current_Value   (Flag_Id, Empty);\n+      Set_Last_Assignment (Flag_Id, Empty);\n+\n+      --  Add a check at the top of the body declarations to ensure that the\n+      --  elaboration flag has been set.\n+\n+      Decls := Declarations (Subp_Body);\n+\n+      if No (Decls) then\n+         Decls := New_List;\n+         Set_Declarations (Subp_Body, Decls);\n+      end if;\n+\n+      --  Generate:\n+      --    if not F then\n+      --       raise Program_Error with \"access before elaboration\";\n+      --    end if;\n+\n+      Prepend_To (Decls,\n+        Make_Raise_Program_Error (Loc,\n+          Condition =>\n+            Make_Op_Not (Loc,\n+              Right_Opnd => New_Occurrence_Of (Flag_Id, Loc)),\n+          Reason    => PE_Access_Before_Elaboration));\n+\n+      Analyze (First (Decls));\n+\n+      --  Set the elaboration flag once the body has been elaborated. Insert\n+      --  the statement after the subprogram stub when the primitive body is\n+      --  a subunit.\n+\n+      if Nkind (Context) = N_Subunit then\n+         Set_Ins := Corresponding_Stub (Context);\n+      else\n+         Set_Ins := Subp_Body;\n+      end if;\n+\n+      --  Generate:\n+      --    F := True;\n+\n+      Insert_After_And_Analyze (Set_Ins,\n+        Make_Assignment_Statement (Loc,\n+          Name       => New_Occurrence_Of (Flag_Id, Loc),\n+          Expression => New_Occurrence_Of (Standard_True, Loc)));\n+   end Install_Primitive_Elaboration_Check;\n+\n    --------------------------\n    -- Install_Static_Check --\n    --------------------------"}, {"sha": "2c8ac1b06d07db7311443b14f7a9f395c607f9e2", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=7327f5c21ce98b8211801095008e2f024593b79c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -337,6 +337,12 @@ package Checks is\n    --  Determines whether an access node requires a runtime access check and\n    --  if so inserts the appropriate run-time check.\n \n+   procedure Install_Primitive_Elaboration_Check (Subp_Body : Node_Id);\n+   --  Insert a check which ensures that subprogram body Subp_Body has been\n+   --  properly elaborated. The check is installed only when Subp_Body is the\n+   --  body of a nonabstract library-level primitive of a tagged type. Further\n+   --  restrictions may apply, see the body for details.\n+\n    function Make_Bignum_Block (Loc : Source_Ptr) return Node_Id;\n    --  This function is used by top level overflow checking routines to do a\n    --  mark/release operation on the secondary stack around bignum operations."}, {"sha": "ad6ab41cc7302bf8e0ecb504493774f55486a8dc", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=7327f5c21ce98b8211801095008e2f024593b79c", "patch": "@@ -3025,16 +3025,15 @@ package body Exp_Attr is\n       --  Note: The Elaborated attribute is never passed to the back end\n \n       when Attribute_Elaborated => Elaborated : declare\n-         Ent : constant Entity_Id := Entity (Pref);\n+         Elab_Id : constant Entity_Id := Elaboration_Entity (Entity (Pref));\n \n       begin\n-         if Present (Elaboration_Entity (Ent)) then\n+         if Present (Elab_Id) then\n             Rewrite (N,\n               Make_Op_Ne (Loc,\n-                Left_Opnd =>\n-                  New_Occurrence_Of (Elaboration_Entity (Ent), Loc),\n-                Right_Opnd =>\n-                  Make_Integer_Literal (Loc, Uint_0)));\n+                Left_Opnd  => New_Occurrence_Of (Elab_Id, Loc),\n+                Right_Opnd => Make_Integer_Literal (Loc, Uint_0)));\n+\n             Analyze_And_Resolve (N, Typ);\n          else\n             Rewrite (N, New_Occurrence_Of (Standard_True, Loc));"}, {"sha": "fe4735252f11eecd4ba458d1891b8f1098f70819", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=7327f5c21ce98b8211801095008e2f024593b79c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -5632,6 +5632,13 @@ package body Exp_Ch6 is\n       --  Set to encode entity names in package body before gigi is called\n \n       Qualify_Entity_Names (N);\n+\n+      --  If the body belongs to a nonabstract library-level source primitive\n+      --  of a tagged type, install an elaboration check which ensures that a\n+      --  dispatching call targeting the primitive will not execute the body\n+      --  without it being previously elaborated.\n+\n+      Install_Primitive_Elaboration_Check (N);\n    end Expand_N_Subprogram_Body;\n \n    -----------------------------------"}, {"sha": "eed136514f486ceafa6a94eb85408ac0b6dfe37b", "filename": "gcc/ada/g-dyntab.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fg-dyntab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fg-dyntab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dyntab.adb?ref=7327f5c21ce98b8211801095008e2f024593b79c", "patch": "@@ -348,7 +348,7 @@ package body GNAT.Dynamic_Tables is\n             New_Table : constant Alloc_Ptr := new Alloc_Type;\n \n          begin\n-            New_Table (Alloc_Type'Range) := Old_Table (Alloc_Type'Range);\n+            New_Table (First .. Last (T)) := Old_Table (First .. Last (T));\n             T.P.Last_Allocated := New_Last_Alloc;\n             Free (Old_Table);\n             T.Table := To_Table_Ptr (New_Table);"}, {"sha": "ca43d06033b699bcc40b65e7d9119d5b4b97f176", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=7327f5c21ce98b8211801095008e2f024593b79c", "patch": "@@ -9662,9 +9662,6 @@ package body Sem_Attr is\n          elsif Is_Access_Type (Typ) then\n             Id := RE_Type_Class_Access;\n \n-         elsif Is_Enumeration_Type (Typ) then\n-            Id := RE_Type_Class_Enumeration;\n-\n          elsif Is_Task_Type (Typ) then\n             Id := RE_Type_Class_Task;\n "}, {"sha": "257237ea5357b20dc098aac940a8972d9bde4b12", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7327f5c21ce98b8211801095008e2f024593b79c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=7327f5c21ce98b8211801095008e2f024593b79c", "patch": "@@ -6797,12 +6797,6 @@ package body Sem_Res is\n             return;\n          end if;\n \n-      --  For Standard.Wide_Wide_Character or a type derived from it, we\n-      --  know the literal is in range, since the parser checked.\n-\n-      elsif Root_Type (B_Typ) = Standard_Wide_Wide_Character then\n-         return;\n-\n       --  If the entity is already set, this has already been resolved in a\n       --  generic context, or comes from expansion. Nothing else to do.\n "}]}