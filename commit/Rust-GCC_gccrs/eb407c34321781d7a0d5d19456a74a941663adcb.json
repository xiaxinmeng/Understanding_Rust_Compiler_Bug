{"sha": "eb407c34321781d7a0d5d19456a74a941663adcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI0MDdjMzQzMjE3ODFkN2EwZDVkMTk0NTZhNzRhOTQxNjYzYWRjYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-07-16T21:57:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-07-16T21:57:18Z"}, "message": "re PR libstdc++/53270 (Error when bootstrapping gcc on hppa2.0-unknown-linux-gcc)\n\n\tPR libstdc++/53270\n\t* include/ext/concurrence.h (__mutex, __recursive_mutex, __cond): Use\n\tNSDMI in C++98 mode too.\n\t* include/ext/rope: Add system_header pragma.\n\t(_Refcount_Base, _Rope_RopeRep): Use NSDMI.\n\t(_Rope_RopeRep::~_Rope_RopeRep): Destroy mutex.\n\nFrom-SVN: r189553", "tree": {"sha": "68405e18d2b78e4dbba98604115260527e007776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68405e18d2b78e4dbba98604115260527e007776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb407c34321781d7a0d5d19456a74a941663adcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb407c34321781d7a0d5d19456a74a941663adcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb407c34321781d7a0d5d19456a74a941663adcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb407c34321781d7a0d5d19456a74a941663adcb/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3ff651a97bc7d607608ec2e4750646332ad04a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ff651a97bc7d607608ec2e4750646332ad04a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3ff651a97bc7d607608ec2e4750646332ad04a5"}], "stats": {"total": 92, "additions": 35, "deletions": 57}, "files": [{"sha": "06b7ca821fc9ab076ea169aa881f621536204f88", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb407c34321781d7a0d5d19456a74a941663adcb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb407c34321781d7a0d5d19456a74a941663adcb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eb407c34321781d7a0d5d19456a74a941663adcb", "patch": "@@ -1,3 +1,12 @@\n+2012-07-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/53270\n+\t* include/ext/concurrence.h (__mutex, __recursive_mutex, __cond): Use\n+\tNSDMI in C++98 mode too.\n+\t* include/ext/rope: Add system_header pragma.\n+\t(_Refcount_Base, _Rope_RopeRep): Use NSDMI.\n+\t(_Rope_RopeRep::~_Rope_RopeRep): Destroy mutex.\n+\n 2012-07-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/53978"}, {"sha": "ad028398be1af25193031b741beabc8682189785", "filename": "libstdc++-v3/include/ext/concurrence.h", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb407c34321781d7a0d5d19456a74a941663adcb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb407c34321781d7a0d5d19456a74a941663adcb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h?ref=eb407c34321781d7a0d5d19456a74a941663adcb", "patch": "@@ -1,7 +1,6 @@\n // Support for concurrent programing -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2003-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -143,8 +142,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class __mutex \n   {\n   private:\n-#if __GTHREADS && defined __GTHREAD_MUTEX_INIT \\\n-    && defined __GXX_EXPERIMENTAL_CXX0X__\n+#if __GTHREADS && defined __GTHREAD_MUTEX_INIT\n     __gthread_mutex_t _M_mutex = __GTHREAD_MUTEX_INIT;\n #else\n     __gthread_mutex_t _M_mutex;\n@@ -156,19 +154,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   public:\n     __mutex() \n     { \n-#if __GTHREADS\n+#if __GTHREADS && ! defined __GTHREAD_MUTEX_INIT\n       if (__gthread_active_p())\n-\t{\n-#if defined __GTHREAD_MUTEX_INIT\n-# ifndef __GXX_EXPERIMENTAL_CXX0X__\n-\t  __gthread_mutex_t __tmp = __GTHREAD_MUTEX_INIT;\n-\t  _M_mutex = __tmp;\n-# endif\n-#else\n-\t  __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex); \n+\t__GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);\n #endif\n-\t}\n-#endif \n     }\n \n #if __GTHREADS && ! defined __GTHREAD_MUTEX_INIT\n@@ -208,8 +197,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class __recursive_mutex \n   {\n   private:\n-#if __GTHREADS && defined __GTHREAD_RECURSIVE_MUTEX_INIT \\\n-    && defined __GXX_EXPERIMENTAL_CXX0X__\n+#if __GTHREADS && defined __GTHREAD_RECURSIVE_MUTEX_INIT\n     __gthread_recursive_mutex_t _M_mutex = __GTHREAD_RECURSIVE_MUTEX_INIT;\n #else\n     __gthread_recursive_mutex_t _M_mutex;\n@@ -221,19 +209,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   public:\n     __recursive_mutex() \n     { \n-#if __GTHREADS\n+#if __GTHREADS && ! defined __GTHREAD_RECURSIVE_MUTEX_INIT\n       if (__gthread_active_p())\n-\t{\n-#if defined __GTHREAD_RECURSIVE_MUTEX_INIT\n-# ifndef __GXX_EXPERIMENTAL_CXX0X__\n-\t  __gthread_recursive_mutex_t __tmp = __GTHREAD_RECURSIVE_MUTEX_INIT;\n-\t  _M_mutex = __tmp;\n-# endif\n-#else\n-\t  __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION(&_M_mutex); \n+\t__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION(&_M_mutex);\n #endif\n-\t}\n-#endif \n     }\n \n #if __GTHREADS && ! defined __GTHREAD_RECURSIVE_MUTEX_INIT\n@@ -333,8 +312,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class __cond\n   {\n   private:\n-#if __GTHREADS && defined __GTHREAD_COND_INIT \\\n-    && defined __GXX_EXPERIMENTAL_CXX0X__\n+#if __GTHREADS && defined __GTHREAD_COND_INIT\n     __gthread_cond_t _M_cond = __GTHREAD_COND_INIT;\n #else\n     __gthread_cond_t _M_cond;\n@@ -346,19 +324,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   public:\n     __cond() \n     { \n-#if __GTHREADS\n+#if __GTHREADS && ! defined __GTHREAD_COND_INIT\n       if (__gthread_active_p())\n-\t{\n-#if defined __GTHREAD_COND_INIT\n-# ifndef __GXX_EXPERIMENTAL_CXX0X__\n-\t  __gthread_cond_t __tmp = __GTHREAD_COND_INIT;\n-\t  _M_cond = __tmp;\n-# endif\n-#else\n-\t  __GTHREAD_COND_INIT_FUNCTION(&_M_cond);\n+\t__GTHREAD_COND_INIT_FUNCTION(&_M_cond);\n #endif\n-\t}\n-#endif \n     }\n \n #if __GTHREADS && ! defined __GTHREAD_COND_INIT"}, {"sha": "24b85105bece31a4b8aebe683d5776e5f1a805cf", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb407c34321781d7a0d5d19456a74a941663adcb/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb407c34321781d7a0d5d19456a74a941663adcb/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=eb407c34321781d7a0d5d19456a74a941663adcb", "patch": "@@ -1,7 +1,6 @@\n // SGI's rope class -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,6 +43,8 @@\n #ifndef _ROPE\n #define _ROPE 1\n \n+#pragma GCC system_header\n+\n #include <algorithm>\n #include <iosfwd>\n #include <bits/stl_construct.h>\n@@ -458,23 +459,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     volatile _RC_t _M_ref_count;\n \n     // Constructor\n-#if defined __GTHREAD_MUTEX_INIT && defined __GXX_EXPERIMENTAL_CXX0X__\n+#ifdef __GTHREAD_MUTEX_INIT\n     __gthread_mutex_t _M_ref_count_lock = __GTHREAD_MUTEX_INIT;\n #else\n     __gthread_mutex_t _M_ref_count_lock;\n #endif\n \n-    _Refcount_Base(_RC_t __n) : _M_ref_count(__n), _M_ref_count_lock()\n+    _Refcount_Base(_RC_t __n) : _M_ref_count(__n)\n     {\n-#ifdef __GTHREAD_MUTEX_INIT\n-# ifndef __GXX_EXPERIMENTAL_CXX0X__\n-      __gthread_mutex_t __tmp = __GTHREAD_MUTEX_INIT;\n-      _M_ref_count_lock = __tmp;\n-# endif\n-#elif defined(__GTHREAD_MUTEX_INIT_FUNCTION)\n+#ifndef __GTHREAD_MUTEX_INIT\n+#ifdef __GTHREAD_MUTEX_INIT_FUNCTION\n       __GTHREAD_MUTEX_INIT_FUNCTION (&_M_ref_count_lock);\n #else\n #error __GTHREAD_MUTEX_INIT or __GTHREAD_MUTEX_INIT_FUNCTION should be defined by gthr.h abstraction layer, report problem to libstdc++@gcc.gnu.org.\n+#endif\n #endif\n     }\n \n@@ -592,7 +590,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool _M_is_balanced:8;\n       unsigned char _M_depth;\n       __GC_CONST _CharT* _M_c_string;\n+#ifdef __GTHREAD_MUTEX_INIT\n+      __gthread_mutex_t _M_c_string_lock = __GTHREAD_MUTEX_INIT;\n+#else\n       __gthread_mutex_t _M_c_string_lock;\n+#endif\n                         /* Flattened version of string, if needed.  */\n                         /* typically 0.                             */\n                         /* If it's not 0, then the memory is owned  */\n@@ -613,13 +615,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \t_M_tag(__t), _M_is_balanced(__b), _M_depth(__d), _M_c_string(0)\n #ifdef __GTHREAD_MUTEX_INIT\n-    {\n-      // Do not copy a POSIX/gthr mutex once in use.  However, bits are bits.\n-      __gthread_mutex_t __tmp = __GTHREAD_MUTEX_INIT;\n-      _M_c_string_lock = __tmp;\n-    }\n+      { }\n #else\n-    { __GTHREAD_MUTEX_INIT_FUNCTION (&_M_c_string_lock); }\n+      { __GTHREAD_MUTEX_INIT_FUNCTION (&_M_c_string_lock); }\n+      ~_Rope_RopeRep()\n+      { __gthread_mutex_destroy (&_M_c_string_lock); }\n #endif\n #ifdef __GC\n       void"}]}