{"sha": "fb9120e3b1bb7c508e49b49d844e4a060428d84d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI5MTIwZTNiMWJiN2M1MDhlNDliNDlkODQ0ZTRhMDYwNDI4ZDg0ZA==", "commit": {"author": {"name": "Roberto Agostino Vitillo", "email": "ravitillo@lbl.gov", "date": "2011-10-28T02:18:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-10-28T02:18:00Z"}, "message": "re PR c++/30066 (option to make inline functions hidden)\n\n\tPR c++/30066\ngcc/c-family:\n\t* c.opt (fvisibility-inlines-hidden): Description change.\ngcc/cp:\n\t* decl2.c (determine_hidden_inline): New function.\n\t(determine_visibility): fvisibility-inlines-hidden affects inline\n\tfunctions.\n\nFrom-SVN: r180589", "tree": {"sha": "c7c4227d08f7ef63ced1cf93b208734c0d915883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7c4227d08f7ef63ced1cf93b208734c0d915883"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb9120e3b1bb7c508e49b49d844e4a060428d84d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9120e3b1bb7c508e49b49d844e4a060428d84d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb9120e3b1bb7c508e49b49d844e4a060428d84d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9120e3b1bb7c508e49b49d844e4a060428d84d/comments", "author": null, "committer": null, "parents": [{"sha": "2bea3d9195f38f1b1b57b7d4176a267f1fc8f6a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bea3d9195f38f1b1b57b7d4176a267f1fc8f6a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bea3d9195f38f1b1b57b7d4176a267f1fc8f6a0"}], "stats": {"total": 130, "additions": 110, "deletions": 20}, "files": [{"sha": "02e823f654873a24991603d3ab2e37953481e14b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fb9120e3b1bb7c508e49b49d844e4a060428d84d", "patch": "@@ -1,3 +1,8 @@\n+2011-10-27  Roberto Agostino Vitillo  <ravitillo@lbl.gov>\n+\n+\tPR c++/30066\n+\t* c.opt (fvisibility-inlines-hidden): Description change.\n+\n 2011-10-26  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement C++11 user-defined literals."}, {"sha": "693f1914c8cb2f08439dd6124df27e5d9196048b", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=fb9120e3b1bb7c508e49b49d844e4a060428d84d", "patch": "@@ -1043,7 +1043,7 @@ Use __cxa_get_exception_ptr in exception handling\n \n fvisibility-inlines-hidden\n C++ ObjC++\n-Marks all inlined methods as having hidden visibility\n+Marks all inlined functions and methods as having hidden visibility\n \n fvisibility-ms-compat\n C++ ObjC++ Var(flag_visibility_ms_compat)"}, {"sha": "fe0665d830647f697a0144e72cc3973b01230277", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fb9120e3b1bb7c508e49b49d844e4a060428d84d", "patch": "@@ -1,3 +1,10 @@\n+2011-10-27  Roberto Agostino Vitillo  <ravitillo@lbl.gov>\n+\n+\tPR c++/30066\n+\t* decl2.c (determine_hidden_inline): New function.\n+\t(determine_visibility): fvisibility-inlines-hidden affects inline\n+\tfunctions.\n+\n 2011-10-27  Dodji Seketeli  <dodji@redhat.com>\n \n \t* cp-tree.h (DECL_DECLARES_TYPE_P): Fix comment."}, {"sha": "be9044b9e67a005b1a5fb525be0a4d12dd830e73", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 54, "deletions": 18, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fb9120e3b1bb7c508e49b49d844e4a060428d84d", "patch": "@@ -86,6 +86,7 @@ static void write_out_vars (tree);\n static void import_export_class (tree);\n static tree get_guard_bits (tree);\n static void determine_visibility_from_class (tree, tree);\n+static bool determine_hidden_inline (tree);\n static bool decl_defined_p (tree);\n \n /* A list of static class variables.  This is needed, because a\n@@ -2088,14 +2089,29 @@ determine_visibility (tree decl)\n \t     containing function by default, except that\n \t     -fvisibility-inlines-hidden doesn't affect them.  */\n \t  tree fn = DECL_CONTEXT (decl);\n-\t  if (DECL_VISIBILITY_SPECIFIED (fn) || ! DECL_CLASS_SCOPE_P (fn))\n+\t  if (DECL_VISIBILITY_SPECIFIED (fn))\n \t    {\n \t      DECL_VISIBILITY (decl) = DECL_VISIBILITY (fn);\n \t      DECL_VISIBILITY_SPECIFIED (decl) = \n \t\tDECL_VISIBILITY_SPECIFIED (fn);\n \t    }\n \t  else\n-\t    determine_visibility_from_class (decl, DECL_CONTEXT (fn));\n+\t    {\n+\t      if (DECL_CLASS_SCOPE_P (fn))\n+\t\tdetermine_visibility_from_class (decl, DECL_CONTEXT (fn));\n+\t      else if (determine_hidden_inline (fn))\n+\t\t{\n+\t\t  DECL_VISIBILITY (decl) = default_visibility;\n+\t\t  DECL_VISIBILITY_SPECIFIED (decl) =\n+\t\t    visibility_options.inpragma;\n+\t\t}\n+\t      else\n+\t\t{\n+\t          DECL_VISIBILITY (decl) = DECL_VISIBILITY (fn);\n+\t          DECL_VISIBILITY_SPECIFIED (decl) =\n+\t\t    DECL_VISIBILITY_SPECIFIED (fn);\n+\t\t}\n+\t    }\n \n \t  /* Local classes in templates have CLASSTYPE_USE_TEMPLATE set,\n \t     but have no TEMPLATE_INFO, so don't try to check it.  */\n@@ -2134,10 +2150,15 @@ determine_visibility (tree decl)\n \t   on their template unless they override it with an attribute.  */;\n       else if (! DECL_VISIBILITY_SPECIFIED (decl))\n \t{\n-\t  /* Set default visibility to whatever the user supplied with\n-\t     #pragma GCC visibility or a namespace visibility attribute.  */\n-\t  DECL_VISIBILITY (decl) = default_visibility;\n-\t  DECL_VISIBILITY_SPECIFIED (decl) = visibility_options.inpragma;\n+          if (determine_hidden_inline (decl))\n+\t    DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n+\t  else\n+            {\n+\t      /* Set default visibility to whatever the user supplied with\n+\t         #pragma GCC visibility or a namespace visibility attribute.  */\n+\t      DECL_VISIBILITY (decl) = default_visibility;\n+\t      DECL_VISIBILITY_SPECIFIED (decl) = visibility_options.inpragma;\n+            }\n \t}\n     }\n \n@@ -2157,9 +2178,15 @@ determine_visibility (tree decl)\n \n \t  if (!DECL_VISIBILITY_SPECIFIED (decl))\n \t    {\n-\t      DECL_VISIBILITY (decl) = DECL_VISIBILITY (pattern);\n-\t      DECL_VISIBILITY_SPECIFIED (decl)\n-\t\t= DECL_VISIBILITY_SPECIFIED (pattern);\n+\t      if (!DECL_VISIBILITY_SPECIFIED (pattern)\n+\t\t  && determine_hidden_inline (decl))\n+\t\tDECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n+\t      else\n+\t\t{\n+\t          DECL_VISIBILITY (decl) = DECL_VISIBILITY (pattern);\n+\t          DECL_VISIBILITY_SPECIFIED (decl)\n+\t\t    = DECL_VISIBILITY_SPECIFIED (pattern);\n+\t\t}\n \t    }\n \n \t  /* FIXME should TMPL_ARGS_DEPTH really return 1 for null input? */\n@@ -2214,15 +2241,7 @@ determine_visibility_from_class (tree decl, tree class_type)\n   if (DECL_VISIBILITY_SPECIFIED (decl))\n     return;\n \n-  if (visibility_options.inlines_hidden\n-      /* Don't do this for inline templates; specializations might not be\n-\t inline, and we don't want them to inherit the hidden\n-\t visibility.  We'll set it here for all inline instantiations.  */\n-      && !processing_template_decl\n-      && TREE_CODE (decl) == FUNCTION_DECL\n-      && DECL_DECLARED_INLINE_P (decl)\n-      && (! DECL_LANG_SPECIFIC (decl)\n-\t  || ! DECL_EXPLICIT_INSTANTIATION (decl)))\n+  if (determine_hidden_inline (decl))\n     DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n   else\n     {\n@@ -2247,6 +2266,23 @@ determine_visibility_from_class (tree decl, tree class_type)\n     targetm.cxx.determine_class_data_visibility (decl);\n }\n \n+/* Returns true iff DECL is an inline that should get hidden visibility\n+   because of -fvisibility-inlines-hidden.  */\n+\n+static bool\n+determine_hidden_inline (tree decl)\n+{\n+  return (visibility_options.inlines_hidden\n+\t  /* Don't do this for inline templates; specializations might not be\n+\t     inline, and we don't want them to inherit the hidden\n+\t     visibility.  We'll set it here for all inline instantiations.  */\n+\t  && !processing_template_decl\n+\t  && TREE_CODE (decl) == FUNCTION_DECL\n+\t  && DECL_DECLARED_INLINE_P (decl)\n+\t  && (! DECL_LANG_SPECIFIC (decl)\n+\t      || ! DECL_EXPLICIT_INSTANTIATION (decl)));\n+}\n+\n /* Constrain the visibility of a class TYPE based on the visibility of its\n    field types.  Warn if any fields require lesser visibility.  */\n "}, {"sha": "1aa054115ed2fbe6ee533326f78bd2fa68b86775", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fb9120e3b1bb7c508e49b49d844e4a060428d84d", "patch": "@@ -2120,7 +2120,7 @@ if the runtime routine is not available.\n @item -fvisibility-inlines-hidden\n @opindex fvisibility-inlines-hidden\n This switch declares that the user does not attempt to compare\n-pointers to inline methods where the addresses of the two functions\n+pointers to inline functions or methods where the addresses of the two functions\n were taken in different shared objects.\n \n The effect of this is that GCC may, effectively, mark inline methods with"}, {"sha": "1f1b77f317bb23e500411478e6ca7718ef165d0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb9120e3b1bb7c508e49b49d844e4a060428d84d", "patch": "@@ -1,3 +1,8 @@\n+2011-10-27  Roberto Agostino Vitillo  <ravitillo@lbl.gov>\n+\n+\tPR c++/30066\n+\t* g++.dg/ext/visibility/fvisibility-inlines-hidden-4.C: New test.\n+\n 2011-10-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/sse2-cvt-1.c: New test."}, {"sha": "ebce2ba5c7b1edc24f00bdea1d7d5b71824430b9", "filename": "gcc/testsuite/g++.dg/ext/visibility/fvisibility-inlines-hidden-4.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9120e3b1bb7c508e49b49d844e4a060428d84d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden-4.C?ref=fb9120e3b1bb7c508e49b49d844e4a060428d84d", "patch": "@@ -0,0 +1,37 @@\n+/* PR c++/30066: Test that -fvisibility-inlines-hidden affects functions. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-options \"-fvisibility-inlines-hidden\" } */\n+/* { dg-final { scan-hidden \"_Z3barv\" } } */\n+/* { dg-final { scan-not-hidden \"_ZZ3barvE1n\" } } */\n+/* { dg-final { scan-not-hidden \"_Z3fooIiEvv\" } } */\n+/* { dg-final { scan-hidden \"_Z3fooIvEvv\" } } */\n+/* { dg-final { scan-hidden \"_ZZN1A5innerEvE1n\" } } */\n+\n+inline int * bar()\n+{\n+  static int n;\n+  return &n;\n+}\n+\n+template <class T>\n+inline void foo() { }\n+\n+template void foo<int>();\n+\n+namespace A __attribute__ ((visibility (\"hidden\")))\n+{\n+  inline int * inner()\n+  {\n+    static int n;\n+    return &n;\n+  }\n+}\n+\n+int main(void)\n+{\n+  bar();\n+  foo<void>();\n+  A::inner();\n+  return 0;\n+}"}]}