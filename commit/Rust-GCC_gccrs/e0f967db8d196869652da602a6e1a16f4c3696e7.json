{"sha": "e0f967db8d196869652da602a6e1a16f4c3696e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmOTY3ZGI4ZDE5Njg2OTY1MmRhNjAyYTZlMWExNmY0YzM2OTZlNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-08-20T13:29:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-08-20T13:29:36Z"}, "message": "lto.c (has_analyzed_clone_p): New function\n\n\n\t* lto.c (has_analyzed_clone_p): New function\n\t(lto_materialize_function): Use callgraph to determine if\n\tbody is needed.\n\t(materialize_cgraph): Remove DECL_IS_BUILTIN check.\n\nFrom-SVN: r163403", "tree": {"sha": "da78e68a057ddce25f76691b03e69b3563932d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da78e68a057ddce25f76691b03e69b3563932d14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0f967db8d196869652da602a6e1a16f4c3696e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f967db8d196869652da602a6e1a16f4c3696e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f967db8d196869652da602a6e1a16f4c3696e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f967db8d196869652da602a6e1a16f4c3696e7/comments", "author": null, "committer": null, "parents": [{"sha": "1f5a46fe84cc5b9dfd2b8369c67c70d3ae97330c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f5a46fe84cc5b9dfd2b8369c67c70d3ae97330c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f5a46fe84cc5b9dfd2b8369c67c70d3ae97330c"}], "stats": {"total": 83, "additions": 55, "deletions": 28}, "files": [{"sha": "cc337201d8e355073698c4eb9702474c9e4ac50f", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f967db8d196869652da602a6e1a16f4c3696e7/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f967db8d196869652da602a6e1a16f4c3696e7/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=e0f967db8d196869652da602a6e1a16f4c3696e7", "patch": "@@ -1,3 +1,10 @@\n+2010-08-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto.c (has_analyzed_clone_p): New function\n+\t(lto_materialize_function): Use callgraph to determine if\n+\tbody is needed.\n+\t(materialize_cgraph): Remove DECL_IS_BUILTIN check.\n+\n 2010-08-20  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* lto.c: Use FOR_EACH_VEC_ELT."}, {"sha": "28885ce0356d934a331c066474c82500570c15d1", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 48, "deletions": 28, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f967db8d196869652da602a6e1a16f4c3696e7/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f967db8d196869652da602a6e1a16f4c3696e7/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=e0f967db8d196869652da602a6e1a16f4c3696e7", "patch": "@@ -117,6 +117,34 @@ lto_materialize_constructors_and_inits (struct lto_file_decl_data * file_data)\n \t\t\t data, len);\n }\n \n+/* Return true when NODE has a clone that is analyzed (i.e. we need\n+   to load its body even if the node itself is not needed).  */\n+\n+static bool\n+has_analyzed_clone_p (struct cgraph_node *node)\n+{\n+  struct cgraph_node *orig = node;\n+  node = node->clones;\n+  if (node)\n+    while (node != orig)\n+      {\n+\tif (node->analyzed)\n+\t  return true;\n+\tif (node->clones)\n+\t  node = node->clones;\n+\telse if (node->next_sibling_clone)\n+\t  node = node->next_sibling_clone;\n+\telse\n+\t  {\n+\t    while (node != orig && !node->next_sibling_clone)\n+\t      node = node->clone_of;\n+\t    if (node != orig)\n+\t      node = node->next_sibling_clone;\n+\t  }\n+      }\n+  return false;\n+}\n+\n /* Read the function body for the function associated with NODE.  */\n \n static void\n@@ -127,28 +155,30 @@ lto_materialize_function (struct cgraph_node *node)\n   const char *data, *name;\n   size_t len;\n \n-  /* Ignore clone nodes.  Read the body only from the original one.\n-     We may find clone nodes during LTRANS after WPA has made inlining\n-     decisions.  */\n-  if (node->clone_of)\n-    return;\n-\n   decl = node->decl;\n-  file_data = node->local.lto_file_data;\n-  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)); \n-\n-  /* We may have renamed the declaration, e.g., a static function.  */\n-  name = lto_get_decl_name_mapping (file_data, name);\n-\n-  data = lto_get_section_data (file_data, LTO_section_function_body,\n-\t\t\t       name, &len);\n-  if (data)\n+  /* Read in functions with body (analyzed nodes)\n+     and also functions that are needed to produce virtual clones.  */\n+  if (node->analyzed || has_analyzed_clone (node))\n     {\n-      gcc_assert (!DECL_IS_BUILTIN (decl));\n-\n       /* This function has a definition.  */\n       TREE_STATIC (decl) = 1;\n \n+      /* Clones don't need to be read.  */\n+      if (node->clone_of)\n+\treturn;\n+      file_data = node->local.lto_file_data;\n+      name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)); \n+\n+      /* We may have renamed the declaration, e.g., a static function.  */\n+      name = lto_get_decl_name_mapping (file_data, name);\n+\n+      data = lto_get_section_data (file_data, LTO_section_function_body,\n+\t\t\t\t   name, &len);\n+      if (!data)\n+\tfatal_error (\"%s: section %s is missing\",\n+\t\t     file_data->file_name,\n+\t\t     name);\n+\n       gcc_assert (DECL_STRUCT_FUNCTION (decl) == NULL);\n \n       /* Load the function body only if not operating in WPA mode.  In\n@@ -1862,17 +1892,7 @@ materialize_cgraph (void)\n \n   for (node = cgraph_nodes; node; node = node->next)\n     {\n-      /* Some cgraph nodes get created on the fly, and they don't need\n-\t to be materialized.  For instance, nodes for nested functions\n-\t where the parent function was not streamed out or builtin\n-\t functions.  Additionally, builtin functions should not be\n-\t materialized and may, in fact, cause confusion because there\n-\t may be a regular function in the file whose assembler name\n-\t matches that of the function.\n-\t See gcc.c-torture/execute/20030125-1.c and\n-\t gcc.c-torture/execute/921215-1.c.  */\n-      if (node->local.lto_file_data\n-          && !DECL_IS_BUILTIN (node->decl))\n+      if (node->local.lto_file_data)\n \t{\n \t  lto_materialize_function (node);\n \t  lto_stats.num_input_cgraph_nodes++;"}]}