{"sha": "ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5N2RkYzY0OWY3ZWRjMTBlNzVlMDVjOTJjZjQ5ZmRmYmRkNjE1MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-15T14:34:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-15T14:34:18Z"}, "message": "tree-ssa-ccp.c (get_symbol_constant_value): Export.\n\n2008-03-15  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-ccp.c (get_symbol_constant_value): Export.\n\t(fold_const_aggregate_ref): Likewise.\n\t(get_value): Return NULL if we don't have any values.\n\t(ccp_finalize): Set const_val to NULL after freeing it.\n\t* tree-flow.h (get_symbol_constant_value): Declare.\n\t(fold_const_aggregate_ref): Likewise.\n\t* tree-ssa-sccvn.c (try_to_simplify): Use them.\n\n\t* gcc.dg/pr23911.c: Adjust testcase.\n\t* gcc.dg/tree-ssa/pr14841.c: Likewise.\n\t* gcc.dg/tree-ssa/20030922-2.c: Likewise.\n\nFrom-SVN: r133251", "tree": {"sha": "8d621c599271cc9675f83006117dc15c1f907030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d621c599271cc9675f83006117dc15c1f907030"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab55105446b5bd197d6e41a7056036b27eda1154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab55105446b5bd197d6e41a7056036b27eda1154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab55105446b5bd197d6e41a7056036b27eda1154"}], "stats": {"total": 133, "additions": 76, "deletions": 57}, "files": [{"sha": "ba568d83e6bd9e9e69e023bd47286f1252821388", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "patch": "@@ -1,3 +1,13 @@\n+2008-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-ccp.c (get_symbol_constant_value): Export.\n+\t(fold_const_aggregate_ref): Likewise.\n+\t(get_value): Return NULL if we don't have any values.\n+\t(ccp_finalize): Set const_val to NULL after freeing it.\n+\t* tree-flow.h (get_symbol_constant_value): Declare.\n+\t(fold_const_aggregate_ref): Likewise.\n+\t* tree-ssa-sccvn.c (try_to_simplify): Use them.\n+\n 2008-03-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/35593"}, {"sha": "48445d95e98b1e4693a075b3f1ee9301faeadc5f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "patch": "@@ -1,3 +1,9 @@\n+2008-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/pr23911.c: Adjust testcase.\n+\t* gcc.dg/tree-ssa/pr14841.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030922-2.c: Likewise.\n+\n 2008-03-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/35593"}, {"sha": "b77dbaab91013831e58e0529b00af6699359b202", "filename": "gcc/testsuite/gcc.dg/pr23911.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23911.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23911.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23911.c?ref=ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "patch": "@@ -1,7 +1,7 @@\n /* This was a missed optimization in tree constant propagation\n    that CSE would catch later on.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-store_ccp\" } */\n+/* { dg-options \"-O -fdump-tree-dce2\" } */\n \n double _Complex *a; \n static const double _Complex b[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; \n@@ -14,9 +14,8 @@ test (void)\n   return; \n } \n \n-/* After store_ccp, there should not be any assignments from real or\n-   imaginary parts anymore.  The constants should be loaded from b and\n-   propagated into the elements of a.  */\n-/* { dg-final { scan-tree-dump-times \"= CR\" 0 \"store_ccp\" } } */\n-/* { dg-final { scan-tree-dump-times \"= CI\" 0 \"store_ccp\" } } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */\n+/* After DCE2 which runs after FRE, the expressions should be fully\n+   constant folded.  There should be no loads from b left.  */\n+/* { dg-final { scan-tree-dump-times \"__complex__ \\\\\\(1.0e\\\\\\+0, 0.0\\\\\\)\" 2 \"dce2\" } } */\n+/* { dg-final { scan-tree-dump-times \"= b\" 0 \"dce2\" } } */\n+/* { dg-final { cleanup-tree-dump \"dce2\" } } */"}, {"sha": "9a787bd21bade535660a8b332c18d00b5153aea0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030922-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030922-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030922-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030922-2.c?ref=ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "patch": "@@ -7,8 +7,8 @@ struct rtx_def\n {\n   int bb;\n };\n-static int *block_to_bb;\n-static int target_bb;\n+int *block_to_bb;\n+int target_bb;\n \n int\n rgn_rank (rtx insn1, rtx insn2)"}, {"sha": "cc6e0158b67dc1dcfe2916c23a1c029d3e3c928b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr14841.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14841.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14841.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14841.c?ref=ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "patch": "@@ -2,8 +2,8 @@\n    Make sure that we can fold a possible nested reference into a\n    constant aggregate.  */\n \n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-store_ccp-details\" } */\n+/* { dg-do link } */\n+/* { dg-options \"-O\" } */\n \n struct car {\n   int speed;\n@@ -25,5 +25,5 @@ foo (void)\n     link_error ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"Folded statement: if \" 1 \"store_ccp\"} } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */\n+int main () { return 0; }\n+"}, {"sha": "fddd1dc71d0a671e741f95b5a0ca56e065ab0f74", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "patch": "@@ -940,6 +940,8 @@ void set_current_def (tree, tree);\n /* In tree-ssa-ccp.c  */\n bool fold_stmt (tree *);\n bool fold_stmt_inplace (tree);\n+tree get_symbol_constant_value (tree);\n+tree fold_const_aggregate_ref (tree);\n tree widen_bitfield (tree, tree, tree);\n \n /* In tree-vrp.c  */"}, {"sha": "a1eaab2ca66b7e4864bdbc8c51cc6ecbca5c0bda", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "patch": "@@ -295,23 +295,22 @@ ccp_decl_initial_min_invariant (tree t)\n /* If SYM is a constant variable with known value, return the value.\n    NULL_TREE is returned otherwise.  */\n \n-static tree\n+tree\n get_symbol_constant_value (tree sym)\n {\n   if (TREE_STATIC (sym)\n       && TREE_READONLY (sym)\n-      && !MTAG_P (sym)\n-      /* Check if a read-only definition may be overridden at\n-\t link and run time.  */\n-      && targetm.binds_local_p (sym))\n+      && !MTAG_P (sym))\n     {\n       tree val = DECL_INITIAL (sym);\n       if (val\n \t  && ccp_decl_initial_min_invariant (val))\n \treturn val;\n       /* Variables declared 'const' without an initializer\n-\t have zero as the intializer.  */\n+\t have zero as the intializer if they may not be\n+\t overridden at link or run time.  */\n       if (!val\n+\t  && targetm.binds_local_p (sym)\n           && (INTEGRAL_TYPE_P (TREE_TYPE (sym))\n \t       || SCALAR_FLOAT_TYPE_P (TREE_TYPE (sym))))\n         return fold_convert (TREE_TYPE (sym), integer_zero_node);\n@@ -406,8 +405,12 @@ get_default_value (tree var)\n static inline prop_value_t *\n get_value (tree var)\n {\n-  prop_value_t *val = &const_val[SSA_NAME_VERSION (var)];\n+  prop_value_t *val;\n \n+  if (const_val == NULL)\n+    return NULL;\n+\n+  val = &const_val[SSA_NAME_VERSION (var)];\n   if (val->lattice_val == UNINITIALIZED)\n     *val = get_default_value (var);\n \n@@ -722,6 +725,7 @@ ccp_finalize (void)\n   bool something_changed = substitute_and_fold (const_val, false);\n \n   free (const_val);\n+  const_val = NULL;\n   return something_changed;;\n }\n \n@@ -1026,7 +1030,7 @@ ccp_fold (tree stmt)\n    ARRAY_REF or COMPONENT_REF into constant aggregates.  Return\n    NULL_TREE otherwise.  */\n \n-static tree\n+tree\n fold_const_aggregate_ref (tree t)\n {\n   prop_value_t *value;"}, {"sha": "b10d3e31a85dadf465d889b522afa6e51f55fc89", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed97ddc649f7edc10e75e05c92cf49fdfbdd6150/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=ed97ddc649f7edc10e75e05c92cf49fdfbdd6150", "patch": "@@ -1597,48 +1597,46 @@ simplify_unary_expression (tree rhs)\n static tree\n try_to_simplify (tree stmt, tree rhs)\n {\n+  tree tem;\n+\n   /* For stores we can end up simplifying a SSA_NAME rhs.  Just return\n      in this case, there is no point in doing extra work.  */\n   if (TREE_CODE (rhs) == SSA_NAME)\n     return rhs;\n-  else\n+\n+  switch (TREE_CODE_CLASS (TREE_CODE (rhs)))\n     {\n-      switch (TREE_CODE_CLASS (TREE_CODE (rhs)))\n-\t{\n-\t  /* For references, see if we find a result for the lookup,\n-\t     and use it if we do.  */\n-\tcase tcc_declaration:\n-\t  /* Pull out any truly constant values.  */\n-\t  if (TREE_READONLY (rhs)\n-\t      && TREE_STATIC (rhs)\n-\t      && DECL_INITIAL (rhs)\n-\t      && valid_gimple_expression_p (DECL_INITIAL (rhs)))\n-\t    return DECL_INITIAL (rhs);\n-\n-\t    /* Fallthrough. */\n-\tcase tcc_reference:\n-\t  /* Do not do full-blown reference lookup here.\n-\t     ???  But like for tcc_declaration, we should simplify\n-\t\t  from constant initializers.  */\n-\n-\t  /* Fallthrough for some codes that can operate on registers.  */\n-\t  if (!(TREE_CODE (rhs) == REALPART_EXPR\n-\t        || TREE_CODE (rhs) == IMAGPART_EXPR\n-\t\t|| TREE_CODE (rhs) == VIEW_CONVERT_EXPR))\n-\t    break;\n-\t  /* We could do a little more with unary ops, if they expand\n-\t     into binary ops, but it's debatable whether it is worth it. */\n-\tcase tcc_unary:\n-\t  return simplify_unary_expression (rhs);\n-\t  break;\n-\tcase tcc_comparison:\n-\tcase tcc_binary:\n-\t  return simplify_binary_expression (stmt, rhs);\n-\t  break;\n-\tdefault:\n-\t  break;\n-\t}\n+    case tcc_declaration:\n+      tem = get_symbol_constant_value (rhs);\n+      if (tem)\n+\treturn tem;\n+      break;\n+\n+    case tcc_reference:\n+      /* Do not do full-blown reference lookup here, but simplify\n+\t reads from constant aggregates.  */\n+      tem = fold_const_aggregate_ref (rhs);\n+      if (tem)\n+\treturn tem;\n+\n+      /* Fallthrough for some codes that can operate on registers.  */\n+      if (!(TREE_CODE (rhs) == REALPART_EXPR\n+\t    || TREE_CODE (rhs) == IMAGPART_EXPR\n+\t    || TREE_CODE (rhs) == VIEW_CONVERT_EXPR))\n+\tbreak;\n+      /* We could do a little more with unary ops, if they expand\n+\t into binary ops, but it's debatable whether it is worth it. */\n+    case tcc_unary:\n+      return simplify_unary_expression (rhs);\n+      break;\n+    case tcc_comparison:\n+    case tcc_binary:\n+      return simplify_binary_expression (stmt, rhs);\n+      break;\n+    default:\n+      break;\n     }\n+\n   return rhs;\n }\n "}]}