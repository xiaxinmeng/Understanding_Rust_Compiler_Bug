{"sha": "b4b7724e9b712f2d588c458136e14d65cf6d8d5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRiNzcyNGU5YjcxMmYyZDU4OGM0NTgxMzZlMTRkNjVjZjZkOGQ1Yg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-23T00:48:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-23T00:48:24Z"}, "message": "store-motion.c: Use rtx_insn\n\ngcc/\n2014-08-23  David Malcolm  <dmalcolm@redhat.com>\n\n\t* store-motion.c (store_killed_in_insn): Strengthen param \"insn\"\n\tfrom const_rtx to const rtx_insn *.\n\t(store_killed_after): Likewise.  Strengthen locals \"last\", \"act\"\n\tfrom rtx to rtx_insn *.\n\t(store_killed_before): Strengthen param \"insn\" from const_rtx to\n\tconst rtx_insn *.  Strengthen local \"first\" from rtx to rtx_insn *.\n\t(find_moveable_store): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(compute_store_table): Likewise for local \"insn\".\n\t(insert_insn_start_basic_block): Likewise for param \"insn\" and\n\tlocals \"prev\", \"before\", \"insn\".\n\t(insert_store): For now, add a checked cast to rtx_insn * on the\n\tresult of gen_move_insn.\n\t(remove_reachable_equiv_notes): Strengthen local \"insn\" from rtx\n\tto rtx_insn *.\n\t(replace_store_insn): Likewise.  For now, add a checked cast to\n\trtx_insn * on the result of gen_move_insn.\n\nFrom-SVN: r214389", "tree": {"sha": "9aba4b8873ee88ae03682d7d2532e4468e2b47ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9aba4b8873ee88ae03682d7d2532e4468e2b47ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4b7724e9b712f2d588c458136e14d65cf6d8d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4b7724e9b712f2d588c458136e14d65cf6d8d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4b7724e9b712f2d588c458136e14d65cf6d8d5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4b7724e9b712f2d588c458136e14d65cf6d8d5b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b664bee31ddafda762bb561428b70164210b8b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b664bee31ddafda762bb561428b70164210b8b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b664bee31ddafda762bb561428b70164210b8b5"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "dabd632f0337816c2dfe1e76605a61e41cb53fba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b7724e9b712f2d588c458136e14d65cf6d8d5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b7724e9b712f2d588c458136e14d65cf6d8d5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4b7724e9b712f2d588c458136e14d65cf6d8d5b", "patch": "@@ -1,3 +1,23 @@\n+2014-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* store-motion.c (store_killed_in_insn): Strengthen param \"insn\"\n+\tfrom const_rtx to const rtx_insn *.\n+\t(store_killed_after): Likewise.  Strengthen locals \"last\", \"act\"\n+\tfrom rtx to rtx_insn *.\n+\t(store_killed_before): Strengthen param \"insn\" from const_rtx to\n+\tconst rtx_insn *.  Strengthen local \"first\" from rtx to rtx_insn *.\n+\t(find_moveable_store): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(compute_store_table): Likewise for local \"insn\".\n+\t(insert_insn_start_basic_block): Likewise for param \"insn\" and\n+\tlocals \"prev\", \"before\", \"insn\".\n+\t(insert_store): For now, add a checked cast to rtx_insn * on the\n+\tresult of gen_move_insn.\n+\t(remove_reachable_equiv_notes): Strengthen local \"insn\" from rtx\n+\tto rtx_insn *.\n+\t(replace_store_insn): Likewise.  For now, add a checked cast to\n+\trtx_insn * on the result of gen_move_insn.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* stmt.c (expand_case): Strengthen local \"before_case\" from rtx to"}, {"sha": "8d6f5f49fe99807c62c76ef40010ac513135c9fd", "filename": "gcc/store-motion.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b7724e9b712f2d588c458136e14d65cf6d8d5b/gcc%2Fstore-motion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b7724e9b712f2d588c458136e14d65cf6d8d5b/gcc%2Fstore-motion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstore-motion.c?ref=b4b7724e9b712f2d588c458136e14d65cf6d8d5b", "patch": "@@ -396,7 +396,7 @@ store_killed_in_pat (const_rtx x, const_rtx pat, int after)\n    after the insn.  Return true if it does.  */\n \n static bool\n-store_killed_in_insn (const_rtx x, const_rtx x_regs, const_rtx insn, int after)\n+store_killed_in_insn (const_rtx x, const_rtx x_regs, const rtx_insn *insn, int after)\n {\n   const_rtx reg, note, pat;\n \n@@ -458,10 +458,11 @@ store_killed_in_insn (const_rtx x, const_rtx x_regs, const_rtx insn, int after)\n    is killed, return the last insn in that it occurs in FAIL_INSN.  */\n \n static bool\n-store_killed_after (const_rtx x, const_rtx x_regs, const_rtx insn, const_basic_block bb,\n+store_killed_after (const_rtx x, const_rtx x_regs, const rtx_insn *insn,\n+\t\t    const_basic_block bb,\n \t\t    int *regs_set_after, rtx *fail_insn)\n {\n-  rtx last = BB_END (bb), act;\n+  rtx_insn *last = BB_END (bb), *act;\n \n   if (!store_ops_ok (x_regs, regs_set_after))\n     {\n@@ -487,10 +488,10 @@ store_killed_after (const_rtx x, const_rtx x_regs, const_rtx insn, const_basic_b\n    within basic block BB. X_REGS is list of registers mentioned in X.\n    REGS_SET_BEFORE is bitmap of registers set before or in this insn.  */\n static bool\n-store_killed_before (const_rtx x, const_rtx x_regs, const_rtx insn, const_basic_block bb,\n-\t\t     int *regs_set_before)\n+store_killed_before (const_rtx x, const_rtx x_regs, const rtx_insn *insn,\n+\t\t     const_basic_block bb, int *regs_set_before)\n {\n-  rtx first = BB_HEAD (bb);\n+  rtx_insn *first = BB_HEAD (bb);\n \n   if (!store_ops_ok (x_regs, regs_set_before))\n     return true;\n@@ -536,7 +537,7 @@ store_killed_before (const_rtx x, const_rtx x_regs, const_rtx insn, const_basic_\n    */\n \n static void\n-find_moveable_store (rtx insn, int *regs_set_before, int *regs_set_after)\n+find_moveable_store (rtx_insn *insn, int *regs_set_before, int *regs_set_after)\n {\n   struct st_expr * ptr;\n   rtx dest, set, tmp;\n@@ -644,7 +645,8 @@ compute_store_table (void)\n #ifdef ENABLE_CHECKING\n   unsigned regno;\n #endif\n-  rtx insn, tmp;\n+  rtx_insn *insn;\n+  rtx tmp;\n   df_ref def;\n   int *last_set_in, *already_set;\n   struct st_expr * ptr, **prev_next_ptr_ptr;\n@@ -739,11 +741,11 @@ compute_store_table (void)\n    the BB_HEAD if needed.  */\n \n static void\n-insert_insn_start_basic_block (rtx insn, basic_block bb)\n+insert_insn_start_basic_block (rtx_insn *insn, basic_block bb)\n {\n   /* Insert at start of successor block.  */\n-  rtx prev = PREV_INSN (BB_HEAD (bb));\n-  rtx before = BB_HEAD (bb);\n+  rtx_insn *prev = PREV_INSN (BB_HEAD (bb));\n+  rtx_insn *before = BB_HEAD (bb);\n   while (before != 0)\n     {\n       if (! LABEL_P (before)\n@@ -773,7 +775,8 @@ insert_insn_start_basic_block (rtx insn, basic_block bb)\n static int\n insert_store (struct st_expr * expr, edge e)\n {\n-  rtx reg, insn;\n+  rtx reg;\n+  rtx_insn *insn;\n   basic_block bb;\n   edge tmp;\n   edge_iterator ei;\n@@ -787,7 +790,7 @@ insert_store (struct st_expr * expr, edge e)\n     return 0;\n \n   reg = expr->reaching_reg;\n-  insn = gen_move_insn (copy_rtx (expr->pattern), reg);\n+  insn = as_a <rtx_insn *> (gen_move_insn (copy_rtx (expr->pattern), reg));\n \n   /* If we are inserting this expression on ALL predecessor edges of a BB,\n      insert it at the start of the BB, and reset the insert bits on the other\n@@ -845,7 +848,8 @@ remove_reachable_equiv_notes (basic_block bb, struct st_expr *smexpr)\n   int sp;\n   edge act;\n   sbitmap visited = sbitmap_alloc (last_basic_block_for_fn (cfun));\n-  rtx last, insn, note;\n+  rtx last, note;\n+  rtx_insn *insn;\n   rtx mem = smexpr->pattern;\n \n   stack = XNEWVEC (edge_iterator, n_basic_blocks_for_fn (cfun));\n@@ -922,10 +926,11 @@ remove_reachable_equiv_notes (basic_block bb, struct st_expr *smexpr)\n static void\n replace_store_insn (rtx reg, rtx del, basic_block bb, struct st_expr *smexpr)\n {\n-  rtx insn, mem, note, set, ptr;\n+  rtx_insn *insn;\n+  rtx mem, note, set, ptr;\n \n   mem = smexpr->pattern;\n-  insn = gen_move_insn (reg, SET_SRC (single_set (del)));\n+  insn = as_a <rtx_insn *> (gen_move_insn (reg, SET_SRC (single_set (del))));\n \n   for (ptr = smexpr->antic_stores; ptr; ptr = XEXP (ptr, 1))\n     if (XEXP (ptr, 0) == del)"}]}