{"sha": "086bb4b9cd0780609f150e03cad8490bb734ccd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg2YmI0YjljZDA3ODA2MDlmMTUwZTAzY2FkODQ5MGJiNzM0Y2NkOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-02-21T01:50:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-02-21T01:50:39Z"}, "message": "re PR c++/46831 ([C++0x] Crash when it tries to do an invalid ICS with a conversion function template)\n\n\tPR c++/46831\n\t* call.c (convert_class_to_reference): Don't try to set up a\n\tsecond conv sequence for non-viable candidates.\n\nFrom-SVN: r170354", "tree": {"sha": "8eb16863b96940d91a2783d42f906f4031cf7dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eb16863b96940d91a2783d42f906f4031cf7dc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/086bb4b9cd0780609f150e03cad8490bb734ccd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086bb4b9cd0780609f150e03cad8490bb734ccd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/086bb4b9cd0780609f150e03cad8490bb734ccd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086bb4b9cd0780609f150e03cad8490bb734ccd8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58b0a7004dcb4584d3708d187feecbc9bdde11e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b0a7004dcb4584d3708d187feecbc9bdde11e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b0a7004dcb4584d3708d187feecbc9bdde11e5"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "4ce3f27be7cf2f949a1ab4ea7b25a1e64fdd1599", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086bb4b9cd0780609f150e03cad8490bb734ccd8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086bb4b9cd0780609f150e03cad8490bb734ccd8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=086bb4b9cd0780609f150e03cad8490bb734ccd8", "patch": "@@ -1,5 +1,9 @@\n 2011-02-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/46831\n+\t* call.c (convert_class_to_reference): Don't try to set up a\n+\tsecond conv sequence for non-viable candidates.\n+\n \tPR c++/47703\n \t* error.c (location_of): Handle non-tagged types.\n "}, {"sha": "078542aae976fe5f65f8600b87770f8e49b4aa6a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086bb4b9cd0780609f150e03cad8490bb734ccd8/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086bb4b9cd0780609f150e03cad8490bb734ccd8/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=086bb4b9cd0780609f150e03cad8490bb734ccd8", "patch": "@@ -1230,8 +1230,10 @@ convert_class_to_reference (tree reference_type, tree s, tree expr, int flags)\n \t     rvalue of the right type is good enough.  */\n \t  tree f = cand->fn;\n \t  tree t2 = TREE_TYPE (TREE_TYPE (f));\n-\t  if (TREE_CODE (t2) != REFERENCE_TYPE\n-\t      || !reference_compatible_p (t, TREE_TYPE (t2)))\n+\t  if (cand->viable == 0)\n+\t    /* Don't bother looking more closely.  */;\n+\t  else if (TREE_CODE (t2) != REFERENCE_TYPE\n+\t\t   || !reference_compatible_p (t, TREE_TYPE (t2)))\n \t    {\n \t      /* No need to set cand->reason here; this is most likely\n \t\t an ambiguous match.  If it's not, either this candidate"}, {"sha": "db45d88aaef002a3c9504100d7004cce739f83f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086bb4b9cd0780609f150e03cad8490bb734ccd8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086bb4b9cd0780609f150e03cad8490bb734ccd8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=086bb4b9cd0780609f150e03cad8490bb734ccd8", "patch": "@@ -1,5 +1,7 @@\n 2011-02-20  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/fntmpdefarg2.C: New.\n+\n \t* g++.dg/overload/conv-op1.C: New.\n \n \t* g++.dg/cpp0x/constexpr-synth1.C: New."}, {"sha": "12cc83659c59f126f309ee026c64756da289c858", "filename": "gcc/testsuite/g++.dg/cpp0x/fntmpdefarg2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086bb4b9cd0780609f150e03cad8490bb734ccd8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086bb4b9cd0780609f150e03cad8490bb734ccd8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg2.C?ref=086bb4b9cd0780609f150e03cad8490bb734ccd8", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/46831\n+// { dg-options -std=c++0x }\n+\n+struct B { };\n+struct D : B { };\n+struct A {\n+  template<typename T = void> operator D&();\n+  operator long();\n+};\n+\n+void f(long);\n+void f(B&);\n+\n+int main() { f(A()); }"}]}