{"sha": "105c6331b2b4a1e573bf237eaf9c572e18f8147c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA1YzYzMzFiMmI0YTFlNTczYmYyMzdlYWY5YzU3MmUxOGY4MTQ3Yw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-09-18T13:30:56Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-09-18T13:30:56Z"}, "message": "type_traits.h: New.\n\n2006-09-18  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Peter Doerfler  <gcc@pdoerfler.com>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\t\n\t* include/ext/type_traits.h: New. \n\t(__conditional_type): New.\n\t(__numeric_traits): New.\n\t(__add_unsigned): New.\n\t(__remove_unsigned): New.\n\t(__enable_if): New.\n\t* include/Makefile.am: Add.\n\t* include/Makefile.in: Regenerate.\n\t* include/ext/pb_ds/detail/type_utils.hpp: Use ext include,\n\tremove duplicates.\n\t* include/tr1/hashtable_policy.h (IF): Use __conditional_type.\n\t(_Max_digits10): Same.\n\t(identity): Use _Identity.\n\t(extract1st): Use _Select1st.\n\t* include/tr1/random (_Select): Use __conditional_type.\n\t(_To_Unsigned_Type): Use __add_unsigned. Linebreak fixups.\n\t* include/bits/locale_facets.tcc (__to_unsigned_type): Remove, use\n\t__add_unsigned.\n\t* include/tr1/random.tcc: Fixups as above.\n\t* include/tr1/unordered_map: Same.\n\t* include/tr1/hashtable: Same.\n\t* include/tr1/unordered_set: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tstandard_policies.hpp: Same.\n\t* include/ext/pb_ds/detail/standard_policies.hpp: Same.\n\t* include/ext/pb_ds/detail/typelist/typelist_filter.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/type_utils.hpp: Same.\n\t* include/ext/pb_ds/trie_policy.hpp: Same.\n\t* docs/html/ext/pb_ds/string_trie_e_access_traits.html: Same.\n\t\n\t* include/bits/cpp_type_traits.h (__enable_if): Move to ext, make\n\tboolean argument first.\t\n\t* include/bits/locale_facets.h: Fixups for __enable_if argument\n\tand namespace switch.\n\t* include/bits/stl_algobase.h: Same.\n\t* include/bits/stl_algo.h: Same.\n\t* include/bits/stl_iterator.h: Same.\n\t* include/bits/streambuf_iterator.h: Same.\n\t* include/debug/safe_iterator.h: Same.\n\t* include/tr1/hashtable_policy.h: Same.\n\t* include/tr1/cmath: Same.\n\t* include/tr1/functional: Same.\n\t* include/tr1/functional_iterate.h: Same.\n\t* include/std/std_streambuf.h: Same.\n\t* include/c_std/std_cmath.h: Same.\n\t* testsuite/util/testsuite_tr1.h: Same.\n\t* testsuite/util/performance/assoc/multimap_common_type.hpp: Same.\n\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\nCo-Authored-By: Peter Doerfler <gcc@pdoerfler.com>\n\nFrom-SVN: r117024", "tree": {"sha": "45a99e66079ad8c76c24028341e6552ea91cf361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45a99e66079ad8c76c24028341e6552ea91cf361"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/105c6331b2b4a1e573bf237eaf9c572e18f8147c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105c6331b2b4a1e573bf237eaf9c572e18f8147c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105c6331b2b4a1e573bf237eaf9c572e18f8147c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105c6331b2b4a1e573bf237eaf9c572e18f8147c/comments", "author": null, "committer": null, "parents": [{"sha": "bcc4a44f6b929d0640370f1dd6aafccba481527c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc4a44f6b929d0640370f1dd6aafccba481527c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc4a44f6b929d0640370f1dd6aafccba481527c"}], "stats": {"total": 784, "additions": 435, "deletions": 349}, "files": [{"sha": "465b785861df96a704168242b7c7054801f560db", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -1,3 +1,56 @@\n+2006-09-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Peter Doerfler  <gcc@pdoerfler.com>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\t\n+\t* include/ext/type_traits.h: New. \n+\t(__conditional_type): New.\n+\t(__numeric_traits): New.\n+\t(__add_unsigned): New.\n+\t(__remove_unsigned): New.\n+\t(__enable_if): New.\n+\t* include/Makefile.am: Add.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/ext/pb_ds/detail/type_utils.hpp: Use ext include,\n+\tremove duplicates.\n+\t* include/tr1/hashtable_policy.h (IF): Use __conditional_type.\n+\t(_Max_digits10): Same.\n+\t(identity): Use _Identity.\n+\t(extract1st): Use _Select1st.\n+\t* include/tr1/random (_Select): Use __conditional_type.\n+\t(_To_Unsigned_Type): Use __add_unsigned. Linebreak fixups.\n+\t* include/bits/locale_facets.tcc (__to_unsigned_type): Remove, use\n+\t__add_unsigned.\n+\t* include/tr1/random.tcc: Fixups as above.\n+\t* include/tr1/unordered_map: Same.\n+\t* include/tr1/hashtable: Same.\n+\t* include/tr1/unordered_set: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tstandard_policies.hpp: Same.\n+\t* include/ext/pb_ds/detail/standard_policies.hpp: Same.\n+\t* include/ext/pb_ds/detail/typelist/typelist_filter.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/type_utils.hpp: Same.\n+\t* include/ext/pb_ds/trie_policy.hpp: Same.\n+\t* docs/html/ext/pb_ds/string_trie_e_access_traits.html: Same.\n+\t\n+\t* include/bits/cpp_type_traits.h (__enable_if): Move to ext, make\n+\tboolean argument first.\t\n+\t* include/bits/locale_facets.h: Fixups for __enable_if argument\n+\tand namespace switch.\n+\t* include/bits/stl_algobase.h: Same.\n+\t* include/bits/stl_algo.h: Same.\n+\t* include/bits/stl_iterator.h: Same.\n+\t* include/bits/streambuf_iterator.h: Same.\n+\t* include/debug/safe_iterator.h: Same.\n+\t* include/tr1/hashtable_policy.h: Same.\n+\t* include/tr1/cmath: Same.\n+\t* include/tr1/functional: Same.\n+\t* include/tr1/functional_iterate.h: Same.\n+\t* include/std/std_streambuf.h: Same.\n+\t* include/c_std/std_cmath.h: Same.\n+\t* testsuite/util/testsuite_tr1.h: Same.\n+\t* testsuite/util/performance/assoc/multimap_common_type.hpp: Same.\n+\t\n 2006-09-18  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/29063"}, {"sha": "58a8be622698e84e1fc21ad81b68117565cdb72e", "filename": "libstdc++-v3/docs/html/ext/pb_ds/string_trie_e_access_traits.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fpb_ds%2Fstring_trie_e_access_traits.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fpb_ds%2Fstring_trie_e_access_traits.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fpb_ds%2Fstring_trie_e_access_traits.html?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -241,12 +241,12 @@ <h3><a name=\"link5\" id=\"link5\">Element-Type\n \n         <td>\n           <pre>\n-<b>typename</b> pb_ds::detail::conditional_type&lt;\n+<b>typename</b> pb_ds::detail::__conditional_type&lt;\n     <a href=\"#Reverse1686776\"><tt>Reverse</tt></a>,\n     <b>typename</b> <a href=\n \"#String349403\"><tt>String</tt></a>::const_reverse_iterator,\n     <b>typename</b> <a href=\n-\"#String349403\"><tt>String</tt></a>::const_iterator&gt;::type\n+\"#String349403\"><tt>String</tt></a>::const_iterator&gt;::__type\n </pre>\n         </td>\n "}, {"sha": "7170d844242e2b63053591e4300c710136809289", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -553,6 +553,7 @@ ext_headers = \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\\n \t${ext_srcdir}/typelist.h \\\n+\t${ext_srcdir}/type_traits.h \\\n \t${ext_srcdir}/rc_string_base.h \\\n \t${ext_srcdir}/sso_string_base.h \\\n \t${ext_srcdir}/vstring.h \\"}, {"sha": "f112020ce462248987c218642086f9be3e80bd24", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -774,6 +774,7 @@ ext_headers = \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\\n \t${ext_srcdir}/typelist.h \\\n+\t${ext_srcdir}/type_traits.h \\\n \t${ext_srcdir}/rc_string_base.h \\\n \t${ext_srcdir}/sso_string_base.h \\\n \t${ext_srcdir}/vstring.h \\"}, {"sha": "e600fcdd6c14f48ce873ddedba0fa47023c88042", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -128,18 +128,6 @@ namespace detail\n       typedef __true_type __type;\n     };\n \n-  // Define a nested type if some predicate holds.\n-  template<typename, bool>\n-    struct __enable_if\n-    { \n-    };\n-\n-  template<typename _Tp>\n-    struct __enable_if<_Tp, true>\n-    {\n-      typedef _Tp __type;\n-    };\n-\n   // Holds if the template-argument is a void type.\n   template<typename _Tp>\n     struct __is_void"}, {"sha": "5069a9a813b01c8d1222fe066da3db1cb227ae3f", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -2127,7 +2127,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t\t       _ValueT& __v) const;\n \n       template<typename _CharT2>\n-        typename __enable_if<int, __is_char<_CharT2>::__value>::__type\n+      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type\n         _M_find(const _CharT2*, size_t __len, _CharT2 __c) const\n         {\n \t  int __ret = -1;\n@@ -2149,7 +2149,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t}\n \n       template<typename _CharT2>\n-        typename __enable_if<int, !__is_char<_CharT2>::__value>::__type\n+      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value, \n+\t\t\t\t      int>::__type\n         _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const\n         {\n \t  int __ret = -1;"}, {"sha": "3a3fb9a3b920f51cb55b4b3b1e8617c4f7e70af9", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -41,6 +41,7 @@\n #include <limits>\t\t// For numeric_limits\n #include <typeinfo>\t\t// For bad_cast.\n #include <bits/streambuf_iterator.h>\n+#include <ext/type_traits.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -503,20 +504,6 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \n _GLIBCXX_END_LDBL_NAMESPACE\n \n-  template<typename _ValueT>\n-    struct __to_unsigned_type\n-    { typedef _ValueT __type; };\n-\n-  template<>\n-    struct __to_unsigned_type<long>\n-    { typedef unsigned long __type; };\n-\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-  template<>\n-    struct __to_unsigned_type<long long>\n-    { typedef unsigned long long __type; };\n-#endif\n-\n _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \n   template<typename _CharT, typename _InIter>\n@@ -527,7 +514,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t\t     ios_base::iostate& __err, _ValueT& __v) const\n       {\n         typedef char_traits<_CharT>\t\t\t     __traits_type;\n-\ttypedef typename __to_unsigned_type<_ValueT>::__type __unsigned_type;\n+\tusing __gnu_cxx::__add_unsigned;\n+\ttypedef typename __add_unsigned<_ValueT>::__type __unsigned_type;\n \ttypedef __numpunct_cache<_CharT>                     __cache_type;\n \t__use_cache<__cache_type> __uc;\n \tconst locale& __loc = __io._M_getloc();\n@@ -975,6 +963,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n     _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,\n \t\t ios_base&, _CharT* __new, _CharT* __cs, int& __len) const\n     {\n+      using __gnu_cxx::__add_unsigned;\n       _CharT* __p = std::__add_grouping(__new, __sep, __grouping,\n \t\t\t\t\t__grouping_size, __cs, __cs + __len);\n       __len = __p - __new;\n@@ -987,7 +976,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,\n \t\t    _ValueT __v) const\n       {\n-\ttypedef typename __to_unsigned_type<_ValueT>::__type __unsigned_type;\n+\tusing __gnu_cxx::__add_unsigned;\n+\ttypedef typename __add_unsigned<_ValueT>::__type __unsigned_type;\n \ttypedef __numpunct_cache<_CharT>\t             __cache_type;\n \t__use_cache<__cache_type> __uc;\n \tconst locale& __loc = __io._M_getloc();"}, {"sha": "cf3cd71851a004628f672d611954f86085c84215", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -300,8 +300,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @endif\n   */\n   template<typename _CharT>\n-    typename __enable_if<istreambuf_iterator<_CharT>,\n-\t\t\t __is_char<_CharT>::__value>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n+\t\t\t\t    istreambuf_iterator<_CharT> >::__type\n     find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n \t const _CharT&);\n "}, {"sha": "2c603ebcc702bbda5499700be9074161fbae0746", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -70,6 +70,7 @@\n #include <iosfwd>\n #include <bits/stl_pair.h>\n #include <bits/cpp_type_traits.h>\n+#include <ext/type_traits.h>\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_iterator.h>\n@@ -319,17 +320,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // Helpers for streambuf iterators (either istream or ostream).\n   template<typename _CharT>\n-    typename __enable_if<ostreambuf_iterator<_CharT>,\n-\t\t\t __is_char<_CharT>::__value>::__type\n+  typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n+\t\t\t\t  ostreambuf_iterator<_CharT> >::__type\n     __copy_aux(_CharT*, _CharT*, ostreambuf_iterator<_CharT>);\n \n   template<typename _CharT>\n-    typename __enable_if<ostreambuf_iterator<_CharT>,\n-\t\t\t __is_char<_CharT>::__value>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n+\t\t\t\t    ostreambuf_iterator<_CharT> >::__type\n     __copy_aux(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>);\n \n   template<typename _CharT>\n-    typename __enable_if<_CharT*, __is_char<_CharT>::__value>::__type\n+  typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, _CharT*>::__type\n     __copy_aux(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n \t       _CharT*);\n \n@@ -405,8 +406,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // Overload for streambuf iterators.\n   template<typename _CharT>\n-    typename __enable_if<ostreambuf_iterator<_CharT>,\n-\t\t\t __is_char<_CharT>::__value>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n+  \t       \t\t\t    ostreambuf_iterator<_CharT> >::__type\n     copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n \t ostreambuf_iterator<_CharT>);\n "}, {"sha": "f9425aa14bc581dfa2ad30dd91217441cff8d6f8", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -1,6 +1,7 @@\n // Iterators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,6 +67,7 @@\n #define _ITERATOR_H 1\n \n #include <bits/cpp_type_traits.h>\n+#include <ext/type_traits.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -653,10 +655,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // Allow iterator to const_iterator conversion\n       template<typename _Iter>\n         __normal_iterator(const __normal_iterator<_Iter,\n-\t\t\t  typename std::__enable_if<_Container,\n-\t\t\t  (std::__are_same<_Iter,\n-\t\t\t   typename _Container::pointer>::__value)\n-\t\t\t  >::__type>& __i)\n+\t\t\t  typename __enable_if<\n+      \t       (std::__are_same<_Iter, typename _Container::pointer>::__value),\n+\t\t      _Container>::__type>& __i)\n         : _M_current(__i.base()) { }\n \n       // Forward iterator requirements"}, {"sha": "8c76013d324d25f84add571a4ea0a914ebf183e5", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -44,8 +44,8 @@\n _GLIBCXX_BEGIN_NAMESPACE(std)\n      \n   template<typename _CharT>\n-    typename __enable_if<ostreambuf_iterator<_CharT>,\n-\t\t\t __is_char<_CharT>::__value>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n+  \t                            ostreambuf_iterator<_CharT> >::__type\n     copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n \t ostreambuf_iterator<_CharT>);\n \n@@ -68,20 +68,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       //@}\n \n       template<typename _CharT2>\n-\tfriend typename __enable_if<ostreambuf_iterator<_CharT2>,\n-\t                            __is_char<_CharT2>::__value>::__type\n+\tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n+\t\t                    ostreambuf_iterator<_CharT2> >::__type\n \tcopy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n \t     ostreambuf_iterator<_CharT2>);\n \n       template<typename _CharT2>\n-\tfriend typename __enable_if<_CharT2*,\n-\t                            __is_char<_CharT2>::__value>::__type\n+\tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, \n+\t\t\t\t\t       _CharT2*>::__type\n \t__copy_aux(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n \t\t   _CharT2*);\n \n       template<typename _CharT2>\n-\tfriend typename __enable_if<istreambuf_iterator<_CharT2>,\n-\t                            __is_char<_CharT2>::__value>::__type\n+\tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n+\t\t\t            istreambuf_iterator<_CharT2> >::__type\n \tfind(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n \t     const _CharT2&);\n \n@@ -224,8 +224,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       //@}\n \n       template<typename _CharT2>\n-\tfriend typename __enable_if<ostreambuf_iterator<_CharT2>,\n-\t                            __is_char<_CharT2>::__value>::__type\n+\tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n+\t\t                    ostreambuf_iterator<_CharT2> >::__type\n \tcopy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n \t     ostreambuf_iterator<_CharT2>);\n \n@@ -285,8 +285,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // Overloads for streambuf iterators.\n   template<typename _CharT>\n-    typename __enable_if<ostreambuf_iterator<_CharT>,\n-\t\t\t __is_char<_CharT>::__value>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n+    \t                 \t    ostreambuf_iterator<_CharT> >::__type\n     copy(istreambuf_iterator<_CharT> __first,\n \t istreambuf_iterator<_CharT> __last,\n \t ostreambuf_iterator<_CharT> __result)\n@@ -302,8 +302,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   template<typename _CharT>\n-    typename __enable_if<ostreambuf_iterator<_CharT>,\n-\t\t\t __is_char<_CharT>::__value>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n+    \t\t\t\t    ostreambuf_iterator<_CharT> >::__type\n     __copy_aux(_CharT* __first, _CharT* __last,\n \t       ostreambuf_iterator<_CharT> __result)\n     {\n@@ -314,8 +314,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   template<typename _CharT>\n-    typename __enable_if<ostreambuf_iterator<_CharT>,\n-\t\t\t __is_char<_CharT>::__value>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n+\t\t\t\t    ostreambuf_iterator<_CharT> >::__type\n     __copy_aux(const _CharT* __first, const _CharT* __last,\n \t       ostreambuf_iterator<_CharT> __result)\n     {\n@@ -326,7 +326,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   template<typename _CharT>\n-    typename __enable_if<_CharT*, __is_char<_CharT>::__value>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n+    \t\t\t\t    _CharT*>::__type\n     __copy_aux(istreambuf_iterator<_CharT> __first,\n \t       istreambuf_iterator<_CharT> __last, _CharT* __result)\n     {\n@@ -360,8 +361,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   template<typename _CharT>\n-    typename __enable_if<istreambuf_iterator<_CharT>,\n-\t\t\t __is_char<_CharT>::__value>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n+\t\t  \t\t    istreambuf_iterator<_CharT> >::__type\n     find(istreambuf_iterator<_CharT> __first,\n \t istreambuf_iterator<_CharT> __last, const _CharT& __val)\n     {"}, {"sha": "f5036f4a14a5d45f4c69343d17e766895f735063", "filename": "libstdc++-v3/include/c_std/std_cmath.h", "status": "modified", "additions": 42, "deletions": 24, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- C forwarding header.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -49,6 +49,7 @@\n \n #include <bits/c++config.h>\n #include <bits/cpp_type_traits.h>\n+#include <ext/type_traits.h>\n \n #include <math.h>\n \n@@ -107,11 +108,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_acosl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     acos(_Tp __x)\n-    {\n-      return __builtin_acos(__x);\n-    }\n+    { return __builtin_acos(__x); }\n \n   using ::asin;\n \n@@ -124,7 +124,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_asinl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+  inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+\t\t\t\t\t double>::__type\n     asin(_Tp __x)\n     { return __builtin_asin(__x); }\n \n@@ -139,7 +140,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_atanl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+  inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t double>::__type\n     atan(_Tp __x)\n     { return __builtin_atan(__x); }\n \n@@ -154,8 +156,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_atan2l(__y, __x); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value\n-                                        && __is_integer<_Up>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value\n+    \t\t\t\t\t   && __is_integer<_Up>::__value, \n+\t\t\t\t\t   double>::__type\n     atan2(_Tp __y, _Up __x)\n     { return __builtin_atan2(__y, __x); }\n \n@@ -170,7 +173,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_ceill(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     ceil(_Tp __x)\n     { return __builtin_ceil(__x); }\n \n@@ -185,7 +189,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_cosl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     cos(_Tp __x)\n     { return __builtin_cos(__x); }\n \n@@ -200,7 +205,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_coshl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     cosh(_Tp __x)\n     { return __builtin_cosh(__x); }\n \n@@ -215,7 +221,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_expl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     exp(_Tp __x)\n     { return __builtin_exp(__x); }\n \n@@ -230,7 +237,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_fabsl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     fabs(_Tp __x)\n     { return __builtin_fabs(__x); }\n \n@@ -245,7 +253,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_floorl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     floor(_Tp __x)\n     { return __builtin_floor(__x); }\n \n@@ -270,7 +279,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_frexpl(__x, __exp); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     frexp(_Tp __x, int* __exp)\n     { return __builtin_frexp(__x, __exp); }\n \n@@ -285,7 +295,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_ldexpl(__x, __exp); }\n \n   template<typename _Tp>\n-  inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n   ldexp(_Tp __x, int __exp)\n   { return __builtin_ldexp(__x, __exp); }\n \n@@ -300,7 +311,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_logl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     log(_Tp __x)\n     { return __builtin_log(__x); }\n \n@@ -315,7 +327,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_log10l(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     log10(_Tp __x)\n     { return __builtin_log10(__x); }\n \n@@ -371,7 +384,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_sinl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     sin(_Tp __x)\n     { return __builtin_sin(__x); }\n \n@@ -386,7 +400,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_sinhl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     sinh(_Tp __x)\n     { return __builtin_sinh(__x); }\n \n@@ -401,7 +416,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_sqrtl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     sqrt(_Tp __x)\n     { return __builtin_sqrt(__x); }\n \n@@ -416,7 +432,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_tanl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     tan(_Tp __x)\n     { return __builtin_tan(__x); }\n \n@@ -431,7 +448,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_tanhl(__x); }\n \n   template<typename _Tp>\n-    inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     tanh(_Tp __x)\n     { return __builtin_tanh(__x); }\n "}, {"sha": "cd30bf70df1b0a255d8ffbed7de827a66af8dc86", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -37,7 +37,7 @@\n #include <debug/formatter.h>\n #include <debug/safe_base.h>\n #include <bits/stl_pair.h>\n-#include <bits/cpp_type_traits.h>\n+#include <ext/type_traits.h>\n \n namespace __gnu_debug\n {\n@@ -136,11 +136,9 @@ namespace __gnu_debug\n       template<typename _MutableIterator>\n         _Safe_iterator(\n           const _Safe_iterator<_MutableIterator,\n-          typename std::__enable_if<\n-                     _Sequence,\n-                     (std::__are_same<_MutableIterator,\n-                      typename _Sequence::iterator::_Base_iterator>::__value)\n-                   >::__type>& __x)\n+          typename __gnu_cxx::__enable_if<(std::__are_same<_MutableIterator,\n+                      typename _Sequence::iterator::_Base_iterator>::__value),\n+                   _Sequence>::__type>& __x)\n \t: _Safe_iterator_base(__x, _M_constant()), _M_current(__x.base())\n         {\n \t  _GLIBCXX_DEBUG_VERIFY(!__x._M_singular(),"}, {"sha": "659b7732866f1753751ec291bc030d8e1e107c91", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -105,10 +105,10 @@ namespace pb_ds\n       value_allocator;\n \n       typedef\n-      typename conditional_type<\n+      typename __conditional_type<\n \tsimple_value,\n \tValue_Type,\n-\ttypename value_allocator::pointer>::type\n+\ttypename value_allocator::pointer>::__type\n       entry;\n \n       typedef"}, {"sha": "f4bf7c6e472edad4de848003c891d8e1a415b862", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/standard_policies.hpp", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fstandard_policies.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fstandard_policies.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fstandard_policies.hpp?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -54,10 +54,8 @@\n \n namespace pb_ds\n {\n-\n   namespace detail\n   {\n-\n     template<typename Comb_Probe_Fn>\n     struct default_probe_fn\n     {\n@@ -66,20 +64,17 @@ namespace pb_ds\n \n     public:\n       typedef\n-      typename conditional_type<\n+      typename __conditional_type<\n       is_same<\n       pb_ds::direct_mask_range_hashing<size_t>,\n       Comb_Probe_Fn>::value,\n-      pb_ds::linear_probe_fn<\n-      size_type>,\n-      pb_ds::quadratic_probe_fn<\n-      size_type> >::type\n+      pb_ds::linear_probe_fn<size_type>,\n+      pb_ds::quadratic_probe_fn<size_type> >::__type\n       type;\n     };\n \n   } // namespace detail\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_GP_HT_MAP_STANDARD_POLICIES_HPP\n+#endif \n "}, {"sha": "000e3a475de98e2e294aa5f7db77564cb2b5e82e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/standard_policies.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -89,14 +89,14 @@ namespace pb_ds\n       typedef typename Comb_Hash_Fn::size_type size_type;\n \n       typedef\n-      typename conditional_type<\n+      typename __conditional_type<\n \tis_same<\n \tpb_ds::direct_mask_range_hashing<\n \tsize_type>,\n \tComb_Hash_Fn>::value,\n \tpb_ds::hash_exponential_size_policy<\n \tsize_type>,\n-\tpb_ds::hash_prime_size_policy>::type\n+\tpb_ds::hash_prime_size_policy>::__type\n       size_policy_type;\n \n     public:\n@@ -124,14 +124,14 @@ namespace pb_ds\n \n     public:\n       typedef\n-      typename conditional_type<\n+      typename __conditional_type<\n       is_same<\n       pb_ds::direct_mask_range_hashing<size_t>,\n       Comb_Probe_Fn>::value,\n       pb_ds::linear_probe_fn<\n       size_type>,\n       pb_ds::quadratic_probe_fn<\n-      size_type> >::type\n+      size_type> >::__type\n       type;\n     };\n "}, {"sha": "d66f01c270126472c8387ec835607929a7fab3ed", "filename": "libstdc++-v3/include/ext/pb_ds/detail/type_utils.hpp", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -51,6 +51,7 @@\n #include <cstddef>\n #include <utility>\n #include <tr1/type_traits>\n+#include <ext/type_traits.h>\n \n namespace pb_ds\n {\n@@ -74,6 +75,9 @@ namespace pb_ds\n     typedef std::tr1::integral_constant<int, 1> true_type;\n     typedef std::tr1::integral_constant<int, 0> false_type;\n \n+    using __gnu_cxx::__conditional_type;\n+    using __gnu_cxx::__numeric_traits;\n+\n     template<typename T>\n     struct is_const_pointer\n     {\n@@ -149,53 +153,11 @@ namespace pb_ds\n \t};\n     };\n \n-\n     template<typename Type>\n     struct type_to_type\n     {\n       typedef Type type;\n     };\n-\n-\n-    template<bool Cond, class A, class B>\n-    struct conditional_type;\n-\n-    template<typename A, class B>\n-    struct conditional_type<true, A, B>\n-    {\n-      typedef A type;\n-    };\n-\n-    template<typename A, class B>\n-    struct conditional_type<false, A, B>\n-    {\n-      typedef B type;\n-    };\n-\n-#define __glibcxx_signed(T)\t((T)(-1) < 0)\n-\n-#define __glibcxx_min(T) \\\n-  (__glibcxx_signed (T) ? (T)1 << __glibcxx_digits (T) : (T)0)\n-\n-#define __glibcxx_max(T) \\\n-  (__glibcxx_signed (T) ? ((T)1 << __glibcxx_digits (T)) - 1 : ~(T)0)\n-\n-#define __glibcxx_digits(T) \\\n-  (sizeof(T) * __CHAR_BIT__ - __glibcxx_signed (T))\n-\n-   template<typename Value>\n-   struct numeric_traits\n-   {\n-     typedef Value value_type;\n-     static const value_type min = __glibcxx_min(value_type);\n-     static const value_type max = __glibcxx_max(value_type);\n-   };\n-\n-  template<typename Value>\n-  const Value numeric_traits<Value>::min;\n-\n-  template<typename Value>\n-  const Value numeric_traits<Value>::max;\n   } // namespace detail\n } // namespace pb_ds\n "}, {"sha": "a29facb583b52179f6fd5bc58d19d14421451fcf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/typelist/typelist_filter.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_filter.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_filter.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypelist%2Ftypelist_filter.hpp?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -72,7 +72,7 @@ namespace detail\n         include_hd = Pred<Hd>::value\n       };\n \n-    typedef typename conditional_type<include_hd, typelist_chain<Hd, rest>, rest>::type type;\n+    typedef typename __conditional_type<include_hd, typelist_chain<Hd, rest>, rest>::__type type;\n   };\n } // namespace detail\n "}, {"sha": "d74bed43e7f4033c3458960aa696b7145e609d0d", "filename": "libstdc++-v3/include/ext/pb_ds/trie_policy.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -72,8 +72,8 @@ namespace pb_ds\n \n   // Element access traits for string types.\n   template<typename String = std::string,\n-\t   typename String::value_type Min_E_Val = detail::numeric_traits<typename String::value_type>::min, \n-\t   typename String::value_type Max_E_Val = detail::numeric_traits<typename String::value_type>::max, \n+\t   typename String::value_type Min_E_Val = detail::__numeric_traits<typename String::value_type>::__min, \n+\t   typename String::value_type Max_E_Val = detail::__numeric_traits<typename String::value_type>::__max, \n \t   bool Reverse = false,\n \t   typename Allocator = std::allocator<char> >\n   struct string_trie_e_access_traits\n@@ -90,7 +90,7 @@ namespace pb_ds\n       };\n \n     // Element const iterator type.\n-    typedef typename detail::conditional_type<Reverse, typename String::const_reverse_iterator, typename String::const_iterator>::type const_iterator;\n+    typedef typename detail::__conditional_type<Reverse, typename String::const_reverse_iterator, typename String::const_iterator>::__type const_iterator;\n \n     // Element type.\n     typedef typename std::iterator_traits<const_iterator>::value_type e_type;"}, {"sha": "34e5ebd1cde7de8474bc6a370c9a6f57d9049611", "filename": "libstdc++-v3/include/ext/type_traits.h", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -0,0 +1,153 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the terms\n+// of the GNU General Public License as published by the Free Software\n+// Foundation; either version 2, or (at your option) any later\n+// version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+// MA 02111-1307, USA.\n+\n+// As a special exception, you may use this file as part of a free\n+// software library without restriction.  Specifically, if other files\n+// instantiate templates or use macros or inline functions from this\n+// file, or you compile this file and link it with other files to\n+// produce an executable, this file does not by itself cause the\n+// resulting executable to be covered by the GNU General Public\n+// License.  This exception does not however invalidate any other\n+// reasons why the executable file might be covered by the GNU General\n+// Public License.\n+\n+#ifndef _EXT_TYPE_TRAITS\n+#define _EXT_TYPE_TRAITS 1\n+\n+#pragma GCC system_header\n+\n+#include <cstddef>\n+#include <utility>\n+#include <limits>\n+#include <iosfwd> // std::streamsize\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+  // Define a nested type if some predicate holds.\n+  template<bool, typename>\n+    struct __enable_if \n+    { };\n+\n+  template<typename _Tp>\n+    struct __enable_if<true, _Tp>\n+    { typedef _Tp __type; };\n+\n+  // XXX What about std::tr1::true_type?\n+  // Conditional expression for types. If true, first, if false, second.\n+  template<bool _Cond, typename _Iftrue, typename _Iffalse>\n+    struct __conditional_type\n+    { typedef _Iftrue __type; };\n+\n+  template<typename _Iftrue, typename _Iffalse>\n+    struct __conditional_type<false, _Iftrue, _Iffalse>\n+    { typedef _Iffalse __type; };\n+\n+\n+  // Given a builtin type, return the corresponding unsigned type.\n+  template<typename _Value>\n+    struct __add_unsigned\n+    { typedef _Value __type; };\n+\n+  template<>\n+    struct __add_unsigned<char>\n+    { typedef unsigned char __type; };\n+\n+  template<>\n+    struct __add_unsigned<short>\n+    { typedef unsigned short __type; };\n+\n+  template<>\n+    struct __add_unsigned<int>\n+    { typedef unsigned int __type; };\n+\n+  template<>\n+    struct __add_unsigned<long>\n+    { typedef unsigned long __type; };\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  template<>\n+    struct __add_unsigned<long long>\n+    { typedef unsigned long long __type; };\n+#endif\n+\n+  // Given an builtin type, return the corresponding signed type.\n+  template<typename _Value>\n+    struct __remove_unsigned\n+    { typedef _Value __type; };\n+\n+  template<>\n+    struct __remove_unsigned<unsigned char>\n+    { typedef char __type; };\n+\n+  template<>\n+    struct __remove_unsigned<unsigned short>\n+    { typedef short __type; };\n+\n+  template<>\n+    struct __remove_unsigned<unsigned int>\n+    { typedef int __type; };\n+\n+  template<>\n+    struct __remove_unsigned<unsigned long>\n+    { typedef long __type; };\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  template<>\n+    struct __remove_unsigned<unsigned long long>\n+    { typedef long long __type; };\n+#endif\n+\n+  // Compile time constants for builtin types.\n+  // Sadly std::numeric_limits member functions cannot be used for this.\n+#define __glibcxx_signed(T) ((T)(-1) < 0)\n+#define __glibcxx_digits(T) (sizeof(T) * __CHAR_BIT__ - __glibcxx_signed(T))\n+\n+#define __glibcxx_min(T) \\\n+  (__glibcxx_signed(T) ? (T)1 << __glibcxx_digits(T) : (T)0)\n+\n+#define __glibcxx_max(T) \\\n+  (__glibcxx_signed(T) ? ((T)1 << __glibcxx_digits(T)) - 1 : ~(T)0)\n+\n+  template<typename _Value>\n+    struct __numeric_traits\n+    {\n+      typedef _Value __value_type;\n+      \n+      // Only integer types.\n+      static const __value_type __min = __glibcxx_min(__value_type);\n+      static const __value_type __max = __glibcxx_max(__value_type);\n+      \n+      // Only floating point types. See N1822. \n+      static const std::streamsize __max_digits10 =\n+\t2 + std::numeric_limits<__value_type>::digits * 3010/10000;\n+    };\n+\n+  template<typename _Value>\n+    const _Value __numeric_traits<_Value>::__min;\n+\n+  template<typename _Value>\n+    const _Value __numeric_traits<_Value>::__max;\n+\n+  template<typename _Value>\n+    const std::streamsize __numeric_traits<_Value>::__max_digits10;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif "}, {"sha": "5a5ca869289458bd739eedfab0d8023111c941f8", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -46,6 +46,7 @@\n #include <bits/localefwd.h>\n #include <bits/ios_base.h>\n #include <bits/cpp_type_traits.h>\n+#include <ext/type_traits.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -60,13 +61,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t  basic_streambuf<_CharT, _Traits>*, bool&);\n \n   template<typename _CharT>\n-    typename __enable_if<_CharT*, __is_char<_CharT>::__value>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n+\t\t\t\t    _CharT*>::__type\n     __copy_aux(istreambuf_iterator<_CharT>,\n \t       istreambuf_iterator<_CharT>, _CharT*);\n \n   template<typename _CharT>\n-    typename __enable_if<istreambuf_iterator<_CharT>,\n-\t\t\t __is_char<_CharT>::__value>::__type\n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n+\t\t\t\t    istreambuf_iterator<_CharT> >::__type\n     find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n \t const _CharT&);\n \n@@ -166,14 +168,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);\n \n       template<typename _CharT2>\n-        friend typename __enable_if<_CharT2*,\n-\t\t\t\t    __is_char<_CharT2>::__value>::__type\n+        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, \n+\t\t\t\t\t       _CharT2*>::__type\n         __copy_aux(istreambuf_iterator<_CharT2>,\n \t\t   istreambuf_iterator<_CharT2>, _CharT2*);\n \n       template<typename _CharT2>\n-        friend typename __enable_if<istreambuf_iterator<_CharT2>,\n-\t\t\t\t    __is_char<_CharT2>::__value>::__type\n+        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n+\t\t\t\t  istreambuf_iterator<_CharT2> >::__type\n         find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n \t     const _CharT2&);\n "}, {"sha": "1b9cc8adb6f9343371cf2d6a44e65d7a93fe5c46", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -371,10 +371,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   namespace detail\n   {\n     template<typename _Tp, typename _Up>\n-    inline typename\n-    std::__enable_if<typename std::tr1::__promote_2<_Tp, _Up>::__type,\n-\t\t     (std::__is_floating<_Tp>::__value\n-\t\t      || std::__is_floating<_Up>::__value)>::__type\n+      inline typename __gnu_cxx::__enable_if<std::__is_floating<_Tp>::__value\n+    \t                                   || std::__is_floating<_Up>::__value,\n+      typename std::tr1::__promote_2<_Tp, _Up>::__type>::__type\n     atan2(_Tp __y, _Up __x)\n     {\n       typedef typename std::tr1::__promote_2<_Tp, _Up>::__type __type;\n@@ -384,7 +383,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n   using std::atan2;\n   using detail::atan2;\n-\n+ \n   inline float\n   atanh(float __x)\n   { return __builtin_atanhf(__x); }"}, {"sha": "b9afe4b2b4f1b0806e97c788b8315674639cb52d", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -39,7 +39,7 @@\n #include \"../functional\"\n #include <typeinfo>\n #include <tr1/type_traits>\n-#include <bits/cpp_type_traits.h>\n+#include <ext/type_traits.h>\n #include <string>               // for std::tr1::hash\n #include <cstdlib>              // for std::abort\n #include <cmath>                // for std::frexp"}, {"sha": "0b039f944f6de1e88de8c92e6d7ce8e4beebc049", "filename": "libstdc++-v3/include/tr1/functional_iterate.h", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -117,12 +117,10 @@ template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n  */\n template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n   inline\n-  typename __enable_if<\n-             typename result_of<_Functor(_GLIBCXX_TEMPLATE_ARGS)>::type,\n-             (!is_member_pointer<_Functor>::value\n-              && !is_function<_Functor>::value\n-              && !is_function<typename remove_pointer<_Functor>::type>::value)\n-           >::__type\n+  typename __gnu_cxx::__enable_if<(!is_member_pointer<_Functor>::value\n+\t\t\t&& !is_function<_Functor>::value\n+              && !is_function<typename remove_pointer<_Functor>::type>::value),\n+           typename result_of<_Functor(_GLIBCXX_TEMPLATE_ARGS)>::type>::__type\n   __invoke(_Functor& __f _GLIBCXX_COMMA _GLIBCXX_REF_PARAMS)\n   {\n     return __f(_GLIBCXX_ARGS);\n@@ -131,11 +129,10 @@ template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n #if _GLIBCXX_NUM_ARGS > 0\n template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n   inline\n-  typename __enable_if<\n-             typename result_of<_Functor(_GLIBCXX_TEMPLATE_ARGS)>::type,\n-             (is_member_pointer<_Functor>::value\n-              && !is_function<_Functor>::value\n-              && !is_function<typename remove_pointer<_Functor>::type>::value)\n+  typename __gnu_cxx::__enable_if<(is_member_pointer<_Functor>::value\n+\t\t\t&& !is_function<_Functor>::value\n+              && !is_function<typename remove_pointer<_Functor>::type>::value),\n+             typename result_of<_Functor(_GLIBCXX_TEMPLATE_ARGS)>::type\n            >::__type\n   __invoke(_Functor& __f _GLIBCXX_COMMA _GLIBCXX_REF_PARAMS)\n   {\n@@ -146,10 +143,9 @@ template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n // To pick up function references (that will become function pointers)\n template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n   inline\n-  typename __enable_if<\n-             typename result_of<_Functor(_GLIBCXX_TEMPLATE_ARGS)>::type,\n-             (is_pointer<_Functor>::value\n-              && is_function<typename remove_pointer<_Functor>::type>::value)\n+  typename __gnu_cxx::__enable_if<(is_pointer<_Functor>::value\n+\t&& is_function<typename remove_pointer<_Functor>::type>::value),\n+             typename result_of<_Functor(_GLIBCXX_TEMPLATE_ARGS)>::type\n            >::__type\n   __invoke(_Functor __f _GLIBCXX_COMMA _GLIBCXX_REF_PARAMS)\n   {\n@@ -667,9 +663,7 @@ class function<_Res(_GLIBCXX_TEMPLATE_ARGS)>\n    */\n   template<typename _Functor>\n     function(_Functor __f,\n-             typename __enable_if<_Useless,\n-                                  !is_integral<_Functor>::value>::__type\n-               = _Useless());\n+             typename __gnu_cxx::__enable_if<!is_integral<_Functor>::value, _Useless>::__type = _Useless());\n \n   /**\n    *  @brief %Function assignment operator.\n@@ -723,7 +717,7 @@ class function<_Res(_GLIBCXX_TEMPLATE_ARGS)>\n    *  reference_wrapper<F>, this function will not throw.\n    */\n   template<typename _Functor>\n-    typename __enable_if<function&, !is_integral<_Functor>::value>::__type\n+    typename __gnu_cxx::__enable_if<!is_integral<_Functor>::value, function&>::__type\n     operator=(_Functor __f)\n     {\n       function(__f).swap(*this);\n@@ -841,8 +835,7 @@ template<typename _Res _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n template<typename _Functor>\n   function<_Res(_GLIBCXX_TEMPLATE_ARGS)>\n   ::function(_Functor __f,\n-             typename __enable_if<_Useless,\n-                                  !is_integral<_Functor>::value>::__type)\n+        typename __gnu_cxx::__enable_if<!is_integral<_Functor>::value, _Useless>::__type)\n     : _Function_base()\n {\n   typedef _Function_handler<_Signature_type, _Functor> _My_handler;"}, {"sha": "47d04ebf98b9abba58a2e4d48ffb7eb6bb817d3b", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -347,14 +347,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       // have partial specialization of member templates; it would be\n       // better to just specialize insert on unique_keys.  There may be a\n       // cleaner workaround.\n-      typedef typename detail::IF<unique_keys,\n-\t\t\t\t    std::pair<iterator, bool>, iterator>::type\n+      typedef typename __gnu_cxx::__conditional_type<unique_keys,\n+\t\t       \t    std::pair<iterator, bool>, iterator>::__type\n         Insert_Return_Type;\n \n-      typedef typename detail::IF<unique_keys,\n-\t\t\t\t    detail::extract1st<Insert_Return_Type>,\n-\t\t\t\t    detail::identity<Insert_Return_Type>\n-                                   >::type\n+      typedef typename __gnu_cxx::__conditional_type<unique_keys,\n+\t\t\t\t\t   std::_Select1st<Insert_Return_Type>,\n+\t\t\t\t  \t   std::_Identity<Insert_Return_Type>\n+                                   >::__type\n         Insert_Conv_Type;\n \n       node*"}, {"sha": "076bcce45bf9ed8e55b151775b7881f364ebd75c", "filename": "libstdc++-v3/include/tr1/hashtable_policy.h", "status": "modified", "additions": 12, "deletions": 39, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -34,25 +34,17 @@\n #ifndef _TR1_HASHTABLE_POLICY_H\n #define _TR1_HASHTABLE_POLICY_H 1\n \n+#include <functional> // _Identity, _Select1st\n+#include <tr1/utility>\n+#include <ext/type_traits.h>\n+\n namespace std\n { \n _GLIBCXX_BEGIN_NAMESPACE(tr1)\n namespace detail\n {\n namespace \n {\n-  // General utilities.\n-  template<bool Flag, typename IfTrue, typename IfFalse>\n-    struct IF;\n-\n-  template<typename IfTrue, typename IfFalse>\n-    struct IF<true, IfTrue, IfFalse>\n-    { typedef IfTrue type; };\n- \n-  template <typename IfTrue, typename IfFalse>\n-    struct IF<false, IfTrue, IfFalse>\n-    { typedef IfFalse type; };\n-\n   // Helper function: return distance(first, last) for forward\n   // iterators, or 0 for input iterators.\n   template<class Iterator>\n@@ -233,9 +225,9 @@ namespace\n     : public node_iterator_base<Value, cache>\n     {\n       typedef Value                                    value_type;\n-      typedef typename IF<constant_iterators, const Value*, Value*>::type\n+      typedef typename __gnu_cxx::__conditional_type<constant_iterators, const Value*, Value*>::__type\n                                                        pointer;\n-      typedef typename IF<constant_iterators, const Value&, Value&>::type\n+      typedef typename __gnu_cxx::__conditional_type<constant_iterators, const Value&, Value&>::__type\n                                                        reference;\n       typedef std::ptrdiff_t                           difference_type;\n       typedef std::forward_iterator_tag                iterator_category;\n@@ -370,9 +362,9 @@ namespace\n     : public hashtable_iterator_base<Value, cache>\n     {\n       typedef Value                                    value_type;\n-      typedef typename IF<constant_iterators, const Value*, Value*>::type\n+      typedef typename __gnu_cxx::__conditional_type<constant_iterators, const Value*, Value*>::__type\n                                                        pointer;\n-      typedef typename IF<constant_iterators, const Value&, Value&>::type\n+      typedef typename __gnu_cxx::__conditional_type<constant_iterators, const Value&, Value&>::__type\n                                                        reference;\n       typedef std::ptrdiff_t                           difference_type;\n       typedef std::forward_iterator_tag                iterator_category;\n@@ -465,25 +457,6 @@ namespace\n   // Many of class template hashtable's template parameters are policy\n   // classes.  These are defaults for the policies.\n \n-  // The two key extraction policies used by the *set and *map variants.\n-  // XXX pb_ds::type_to_type\n-  template<typename T>\n-    struct identity\n-    {\n-      const T&\n-      operator()(const T& t) const\n-      { return t; }\n-    };\n-\n-  // XXX use std::_Select1st?\n-  template<typename Pair>\n-    struct extract1st\n-    {\n-      const typename Pair::first_type&\n-      operator()(const Pair& p) const\n-      { return p.first; }\n-    };\n-\n   // Default range hashing function: use division to fold a large number\n   // into the range [0, N).\n   struct mod_range_hashing\n@@ -624,13 +597,13 @@ namespace\n     struct map_base { };\n \t  \n   template<typename K, typename Pair, typename Hashtable>\n-    struct map_base<K, Pair, extract1st<Pair>, false, Hashtable>\n+    struct map_base<K, Pair, std::_Select1st<Pair>, false, Hashtable>\n     {\n       typedef typename Pair::second_type mapped_type;\n     };\n \n   template<typename K, typename Pair, typename Hashtable>\n-    struct map_base<K, Pair, extract1st<Pair>, true, Hashtable>\n+  struct map_base<K, Pair, std::_Select1st<Pair>, true, Hashtable>\n     {\n       typedef typename Pair::second_type mapped_type;\n       \n@@ -639,8 +612,8 @@ namespace\n     };\n \n   template<typename K, typename Pair, typename Hashtable>\n-    typename map_base<K, Pair, extract1st<Pair>, true, Hashtable>::mapped_type&\n-    map_base<K, Pair, extract1st<Pair>, true, Hashtable>::\n+    typename map_base<K, Pair, std::_Select1st<Pair>, true, Hashtable>::mapped_type&\n+    map_base<K, Pair, std::_Select1st<Pair>, true, Hashtable>::\n     operator[](const K& k)\n     {\n       Hashtable* h = static_cast<Hashtable*>(this);"}, {"sha": "b926c5bf439f870b8db73b84ce3a8d5d94263bb0", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 39, "deletions": 48, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -37,7 +37,6 @@\n \n #include <algorithm>\n #include <bits/concept_check.h>\n-#include <bits/cpp_type_traits.h>\n #include <cmath>\n #include <debug/debug.h>\n #include <iterator>\n@@ -46,6 +45,7 @@\n #include <tr1/type_traits>\n #include <tr1/cmath>\n #include <fstream>\n+#include <ext/type_traits.h>\n \n namespace std\n {\n@@ -64,17 +64,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    */\n   namespace\n   {\n-    // Type selectors -- are these already implemented elsewhere?\n-    template<bool, typename _TpTrue, typename _TpFalse>\n-      struct _Select\n-      { typedef _TpTrue _Type; };\n-\n-    template<typename _TpTrue, typename _TpFalse>\n-      struct _Select<false, _TpTrue, _TpFalse>\n-      { typedef _TpFalse _Type; };\n-\n-    template<typename _UIntType, int __w, bool = \n-\t     __w < std::numeric_limits<_UIntType>::digits>\n+    template<typename _UIntType, int __w, \n+\t     bool = __w < std::numeric_limits<_UIntType>::digits>\n       struct _Shift\n       { static const _UIntType __value = 0; };\n \n@@ -92,11 +83,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       __mod(_Tp __x)\n       { return _Mod<_Tp, __a, __c, __m, __m == 0>::__calc(__x); }\n \n-    template<typename _ValueT>\n-      struct _To_Unsigned_Type;\n-\n-    typedef _Select<(sizeof(unsigned) == 4),\n-\t\t    unsigned, unsigned long>::_Type _UInt32Type;\n+    typedef __gnu_cxx::__conditional_type<(sizeof(unsigned) == 4),\n+\t\t    unsigned, unsigned long>::__type _UInt32Type;\n   } // anonymous namespace\n \n     /*\n@@ -193,9 +181,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       typedef typename _Dist::result_type            result_type;\n \n       // tr1:5.1.1 table 5.1 requirement\n-      typedef typename std::__enable_if<result_type,\n-\t\t\t\t\tis_arithmetic<result_type>::value\n-        >::__type _IsValidType;\n+      typedef typename __gnu_cxx::__enable_if<\n+\tis_arithmetic<result_type>::value, result_type>::__type _IsValidType;\n \n     public:\n       /**\n@@ -277,20 +264,19 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * @addtogroup tr1_random_generators Random Number Generators\n    * @ingroup tr1_random\n    *\n-   * These classes define objects which provide random or pseudorandom numbers,\n-   * either from a discrete or a continuous interval.  The random number\n-   * generator supplied as a part of this library are all uniform random number\n-   * generators which provide a sequence of random number uniformly distributed\n-   * over their range.\n+   * These classes define objects which provide random or pseudorandom\n+   * numbers, either from a discrete or a continuous interval.  The\n+   * random number generator supplied as a part of this library are\n+   * all uniform random number generators which provide a sequence of\n+   * random number uniformly distributed over their range.\n    *\n-   * A number generator is a function object with an operator() that takes zero\n-   * arguments and returns a number.\n+   * A number generator is a function object with an operator() that\n+   * takes zero arguments and returns a number.\n    *\n-   * A compliant random number generator must satisy the following requirements.\n-   * <table border=1 cellpadding=10 cellspacing=0>\n+   * A compliant random number generator must satisy the following\n+   * requirements.  <table border=1 cellpadding=10 cellspacing=0>\n    * <caption align=top>Random Number Generator Requirements</caption>\n-   * <tr><td>To be documented.</td></tr>\n-   * </table>\n+   * <tr><td>To be documented.</td></tr> </table>\n    * \n    * @{\n    */\n@@ -704,8 +690,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * This is a model of a Generalized Fibonacci discrete random number\n    * generator, sometimes referred to as the SWC generator.\n    *\n-   * A discrete random number generator that produces pseudorandom numbers using\n-   * @f$x_{i}\\leftarrow(x_{i - s} - x_{i - r} - carry_{i-1}) \\bmod m @f$.\n+   * A discrete random number generator that produces pseudorandom\n+   * numbers using @f$x_{i}\\leftarrow(x_{i - s} - x_{i - r} -\n+   * carry_{i-1}) \\bmod m @f$.\n    *\n    * The size of the state is @f$ r @f$\n    * and the maximum period of the generator is @f$ m^r - m^s -1 @f$.\n@@ -777,13 +764,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       /**\n        * Seeds the initial state @f$ x_0 @f$ of the random number generator.\n        *\n-       * N1688[4.19] modifies this as follows.\n-       * If @p __value == 0, sets value to 19780503.  In any case, with a linear\n+       * N1688[4.19] modifies this as follows.  If @p __value == 0,\n+       * sets value to 19780503.  In any case, with a linear\n        * congruential generator lcg(i) having parameters @f$ m_{lcg} =\n-       * 2147483563, a_{lcg} = 40014, c_{lcg} = 0, and lcg(0) = value @f$, sets\n-       * @f$ x_{-r} \\dots x_{-1} @f$ to\n-       * @f$ lcg(1) \\bmod m \\dots lcg(r) \\bmod m @f$ respectively.\n-       * If @f$ x_{-1} = 0 @f$ set carry to 1, otherwise sets carry to 0.\n+       * 2147483563, a_{lcg} = 40014, c_{lcg} = 0, and lcg(0) = value\n+       * @f$, sets @f$ x_{-r} \\dots x_{-1} @f$ to @f$ lcg(1) \\bmod m\n+       * \\dots lcg(r) \\bmod m @f$ respectively.  If @f$ x_{-1} = 0 @f$\n+       * set carry to 1, otherwise sets carry to 0.\n        */\n       void\n       seed(unsigned long __value = 19780503);\n@@ -893,7 +880,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         seed(_Gen& __g, false_type);\n \n     private:\n-      typedef typename _To_Unsigned_Type<_IntType>::_Type _UIntType;\n+      typedef typename __gnu_cxx::__add_unsigned<_IntType>::__type _UIntType;\n \n       _UIntType  _M_x[long_lag];\n       _UIntType  _M_carry;\n@@ -1014,7 +1001,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * Compares two % subtract_with_carry_01 random number generator objects\n        * of the same type for equality.\n        *\n-       * @param __lhs A % subtract_with_carry_01 random number generator object.\n+       * @param __lhs A % subtract_with_carry_01 random number\n+       *              generator object.\n        * @param __rhs Another % subtract_with_carry_01 random number generator\n        *              object.\n        *\n@@ -1035,7 +1023,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * Compares two % subtract_with_carry_01 random number generator objects\n        * of the same type for inequality.\n        *\n-       * @param __lhs A % subtract_with_carry_01 random number generator object.\n+       * @param __lhs A % subtract_with_carry_01 random number\n+       *              generator object.\n+       *\n        * @param __rhs Another % subtract_with_carry_01 random number generator\n        *              object.\n        *\n@@ -1376,8 +1366,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n     public:\n       /** The type of the generated random value. */\n-      typedef typename _Select<(sizeof(_Result_type1) > sizeof(_Result_type2)),\n-\t_Result_type1, _Result_type2>::_Type result_type;\n+      typedef typename __gnu_cxx::__conditional_type<(sizeof(_Result_type1) > sizeof(_Result_type2)),\n+\t_Result_type1, _Result_type2>::__type result_type;\n \n       // parameter values\n       static const int shift1 = __s1;\n@@ -1518,8 +1508,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n \n   /**\n-   * A standard interface to a platform-specific non-deterministic random number\n-   * generator (if any are available).\n+   * A standard interface to a platform-specific non-deterministic\n+   * random number generator (if any are available).\n    */\n   class random_device\n   {\n@@ -2091,7 +2081,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t\t    const _RealType& __p = _RealType(0.5))\n       : _M_t(__t), _M_p(__p), _M_nd()\n       {\n-\t_GLIBCXX_DEBUG_ASSERT((_M_t >= 0) && (_M_p >= 0.0) && (_M_p <= 1.0));\t\n+\t_GLIBCXX_DEBUG_ASSERT((_M_t >= 0) && (_M_p >= 0.0) && (_M_p <= 1.0));\n \t_M_initialize();\n       }\n \n@@ -2355,7 +2345,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @p __x from the input stream @p __is.\n        *\n        * @param __is An input stream.\n-       * @param __x  A %exponential_distribution random number generator engine.\n+       * @param __x A %exponential_distribution random number\n+       *            generator engine.\n        *\n        * @returns The input stream with @p __x extracted or in an error state.\n        */"}, {"sha": "fd052feb274908a78eec6cb183fb08f2ad931594", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 8, "deletions": 38, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -86,36 +86,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t__calc(_Tp __x)\n \t{ return __a * __x + __c; }\n       };\n-\n-    template<typename _ValueT>\n-      struct _To_Unsigned_Type\n-      { typedef _ValueT _Type; };\n-\n-    template<>\n-      struct _To_Unsigned_Type<short>\n-      { typedef unsigned short _Type; };\n-\n-    template<>\n-      struct _To_Unsigned_Type<int>\n-      { typedef unsigned int _Type; };\n-\n-    template<>\n-      struct _To_Unsigned_Type<long>\n-      { typedef unsigned long _Type; };\n-\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-    template<>\n-      struct _To_Unsigned_Type<long long>\n-      { typedef unsigned long long _Type; };\n-#endif\n-\n-    // See N1822.\n-    template<typename _RealType>\n-      struct _Max_digits10\n-      { \n-\tstatic const std::streamsize __value =\n-\t  2 + std::numeric_limits<_RealType>::digits * 3010/10000;\n-      };\n   } // anonymous namespace\n \n \n@@ -758,7 +728,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       const std::streamsize __precision = __os.precision();\n       __os.flags(std::ios_base::scientific | std::ios_base::left);\n       __os.fill(__os.widen(' '));\n-      __os.precision(_Max_digits10<double>::__value);\n+      __os.precision(__gnu_cxx::__numeric_traits<double>::__max_digits10);\n \n       __os << __x.p();\n \n@@ -780,7 +750,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       const std::streamsize __precision = __os.precision();\n       __os.flags(std::ios_base::scientific | std::ios_base::left);\n       __os.fill(__os.widen(' '));\n-      __os.precision(_Max_digits10<_RealType>::__value);\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n       __os << __x.p();\n \n@@ -932,7 +902,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       const _CharT __space = __os.widen(' ');\n       __os.flags(std::ios_base::scientific | std::ios_base::left);\n       __os.fill(__space);\n-      __os.precision(_Max_digits10<_RealType>::__value);\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n       __os << __x.mean() << __space << __x._M_nd;\n \n@@ -1156,7 +1126,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       const _CharT __space = __os.widen(' ');\n       __os.flags(std::ios_base::scientific | std::ios_base::left);\n       __os.fill(__space);\n-      __os.precision(_Max_digits10<_RealType>::__value);\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n       __os << __x.t() << __space << __x.p() \n \t   << __space << __x._M_nd;\n@@ -1195,7 +1165,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       const _CharT __space = __os.widen(' ');\n       __os.flags(std::ios_base::scientific | std::ios_base::left);\n       __os.fill(__space);\n-      __os.precision(_Max_digits10<_RealType>::__value);\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n       __os << __x.min() << __space << __x.max();\n \n@@ -1230,7 +1200,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       const std::streamsize __precision = __os.precision();\n       __os.flags(std::ios_base::scientific | std::ios_base::left);\n       __os.fill(__os.widen(' '));\n-      __os.precision(_Max_digits10<_RealType>::__value);\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n       __os << __x.lambda();\n \n@@ -1292,7 +1262,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       const _CharT __space = __os.widen(' ');\n       __os.flags(std::ios_base::scientific | std::ios_base::left);\n       __os.fill(__space);\n-      __os.precision(_Max_digits10<_RealType>::__value);\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n       __os << __x._M_saved_available << __space\n \t   << __x.mean() << __space\n@@ -1418,7 +1388,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       const std::streamsize __precision = __os.precision();\n       __os.flags(std::ios_base::scientific | std::ios_base::left);\n       __os.fill(__os.widen(' '));\n-      __os.precision(_Max_digits10<_RealType>::__value);\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n       __os << __x.alpha();\n "}, {"sha": "58aaa08c093413bf78f7389a02e189f27be20b13", "filename": "libstdc++-v3/include/tr1/unordered_map", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -50,14 +50,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t   bool cache_hash_code = false>\n     class unordered_map\n     : public hashtable<Key, std::pair<const Key, T>, Alloc,\n-\t\t       detail::extract1st<std::pair<const Key, T> >, Pred, \n+\t\t       std::_Select1st<std::pair<const Key, T> >, Pred, \n \t\t       Hash, detail::mod_range_hashing,\n \t\t       detail::default_ranged_hash,\n \t\t       detail::prime_rehash_policy,\n \t\t       cache_hash_code, false, true>\n     {\n       typedef hashtable<Key, std::pair<const Key, T>, Alloc,\n-\t\t\tdetail::extract1st<std::pair<const Key, T> >, Pred,\n+\t\t\tstd::_Select1st<std::pair<const Key, T> >, Pred,\n \t\t\tHash, detail::mod_range_hashing,\n \t\t\tdetail::default_ranged_hash,\n \t\t\tdetail::prime_rehash_policy,\n@@ -77,7 +77,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t    const allocator_type& a = allocator_type())\n       : Base(n, hf, detail::mod_range_hashing(),\n \t     detail::default_ranged_hash(),\n-\t     eql, detail::extract1st<std::pair<const Key, T> >(), a)\n+\t     eql, std::_Select1st<std::pair<const Key, T> >(), a)\n       { }\n \n       template<typename InputIterator>\n@@ -88,7 +88,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t      const allocator_type& a = allocator_type())\n \t: Base (f, l, n, hf, detail::mod_range_hashing(),\n \t\tdetail::default_ranged_hash(),\n-\t\teql, detail::extract1st<std::pair<const Key, T> >(), a)\n+\t\teql, std::_Select1st<std::pair<const Key, T> >(), a)\n \t{ }\n     };\n   \n@@ -100,15 +100,15 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     class unordered_multimap\n     : public hashtable <Key, std::pair<const Key, T>,\n \t\t\tAlloc,\n-\t\t\tdetail::extract1st<std::pair<const Key, T> >, Pred,\n+\t\t\tstd::_Select1st<std::pair<const Key, T> >, Pred,\n \t\t\tHash, detail::mod_range_hashing,\n \t\t\tdetail::default_ranged_hash,\n \t\t\tdetail::prime_rehash_policy,\n \t\t\tcache_hash_code, false, false>\n     {\n       typedef hashtable <Key, std::pair<const Key, T>,\n \t\t\t Alloc,\n-\t\t\t detail::extract1st<std::pair<const Key, T> >, Pred,\n+\t\t\t std::_Select1st<std::pair<const Key, T> >, Pred,\n \t\t\t Hash, detail::mod_range_hashing,\n \t\t\t detail::default_ranged_hash,\n \t\t\t detail::prime_rehash_policy,\n@@ -128,7 +128,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t\t const allocator_type& a = allocator_type())\n       : Base (n, hf, detail::mod_range_hashing(),\n \t      detail::default_ranged_hash(),\n-\t      eql, detail::extract1st<std::pair<const Key, T> >(), a)\n+\t      eql, std::_Select1st<std::pair<const Key, T> >(), a)\n       { }\n \n \n@@ -140,7 +140,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t\t   const allocator_type& a = allocator_type())\n \t: Base (f, l, n, hf, detail::mod_range_hashing(),\n \t\tdetail::default_ranged_hash(),\n-\t\teql, detail::extract1st<std::pair<const Key, T> >(), a)\n+\t\teql, std::_Select1st<std::pair<const Key, T> >(), a)\n         { }\n     };\n "}, {"sha": "b537d74997eff4406fceb6470bebc56bc67c63cd", "filename": "libstdc++-v3/include/tr1/unordered_set", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -50,14 +50,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t   bool cache_hash_code = false>\n     class unordered_set\n     : public hashtable<Value, Value, Alloc,\n-\t\t       detail::identity<Value>, Pred,\n+\t\t       std::_Identity<Value>, Pred,\n \t\t       Hash, detail::mod_range_hashing,\n \t\t       detail::default_ranged_hash,\n \t\t       detail::prime_rehash_policy,\n \t\t       cache_hash_code, true, true>\n     {\n       typedef hashtable<Value, Value, Alloc,\n-\t\t\tdetail::identity<Value>, Pred,\n+\t\t\tstd::_Identity<Value>, Pred,\n \t\t\tHash, detail::mod_range_hashing,\n \t\t\tdetail::default_ranged_hash,\n \t\t\tdetail::prime_rehash_policy,\n@@ -76,8 +76,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t    const key_equal& eql = key_equal(),\n \t\t    const allocator_type& a = allocator_type())\n       : Base(n, hf, detail::mod_range_hashing(),\n-\t     detail::default_ranged_hash(),\n-\t     eql, detail::identity<Value>(), a)\n+\t     detail::default_ranged_hash(), eql, std::_Identity<Value>(), a)\n       { }\n \n       template<typename InputIterator>\n@@ -87,8 +86,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t      const key_equal& eql = key_equal(), \n \t\t      const allocator_type& a = allocator_type())\n \t: Base(f, l, n, hf, detail::mod_range_hashing(),\n-\t       detail::default_ranged_hash(),\n-\t       eql, detail::identity<Value>(), a)\n+\t       detail::default_ranged_hash(), eql, std::_Identity<Value>(), a)\n         { }\n     };\n \n@@ -99,14 +97,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t   bool cache_hash_code = false>\n     class unordered_multiset\n     : public hashtable <Value, Value, Alloc,\n-\t\t\tdetail::identity<Value>, Pred,\n+\t\t\tstd::_Identity<Value>, Pred,\n \t\t\tHash, detail::mod_range_hashing,\n \t\t\tdetail::default_ranged_hash,\n \t\t\tdetail::prime_rehash_policy,\n \t\t\tcache_hash_code, true, false>\n     {\n       typedef hashtable<Value, Value, Alloc,\n-\t\t\tdetail::identity<Value>, Pred,\n+\t\t\tstd::_Identity<Value>, Pred,\n \t\t\tHash, detail::mod_range_hashing,\n \t\t\tdetail::default_ranged_hash,\n \t\t\tdetail::prime_rehash_policy,\n@@ -125,8 +123,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t\t const key_equal& eql = key_equal(),\n \t\t\t const allocator_type& a = allocator_type())\n       : Base(n, hf, detail::mod_range_hashing(),\n-\t     detail::default_ranged_hash(),\n-\t     eql, detail::identity<Value>(), a)\n+\t     detail::default_ranged_hash(), eql, std::_Identity<Value>(), a)\n       { }\n \n \n@@ -137,8 +134,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t\t   const key_equal& eql = key_equal(), \n \t\t\t   const allocator_type& a = allocator_type())\n \t: Base(f, l, n, hf, detail::mod_range_hashing(),\n-\t       detail::default_ranged_hash(), eql,\n-\t       detail::identity<Value>(), a)\n+\t       detail::default_ranged_hash(), eql, std::_Identity<Value>(), a)\n         { }\n     };\n "}, {"sha": "51cc3ccac627776c76d00e74ac8d81856442a56a", "filename": "libstdc++-v3/testsuite/util/performance/assoc/multimap_common_type.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmultimap_common_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmultimap_common_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmultimap_common_type.hpp?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -105,12 +105,12 @@ namespace pb_ds\n       {\n       private:\n \ttypedef\n-        typename pb_ds::detail::conditional_type<\n+        typename pb_ds::detail::__conditional_type<\n \tpb_ds::detail::is_same<\n \tint,\n \tKey>::value,\n \tint_hash,\n-\tstring_hash_fn>::type\n+\tstring_hash_fn>::__type\n         hash_fn_t;\n \n \ttemplate<typename Cntnr_T>"}, {"sha": "e47845658ae9e6456f30b56d64e41a533a3161eb", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c6331b2b4a1e573bf237eaf9c572e18f8147c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=105c6331b2b4a1e573bf237eaf9c572e18f8147c", "patch": "@@ -31,13 +31,12 @@\n #ifndef _GLIBCXX_TESTSUITE_TR1_H\n #define _GLIBCXX_TESTSUITE_TR1_H\n \n-#include <bits/cpp_type_traits.h>\n+#include <ext/type_traits.h>\n \n namespace __gnu_test\n {\n   // For tr1/type_traits.\n-  template<template<typename> class Category,\n-           typename Type>\n+  template<template<typename> class Category, typename Type>\n     bool\n     test_category(bool value)\n     {\n@@ -53,8 +52,7 @@ namespace __gnu_test\n       return ret;\n     }\n \n-  template<template<typename> class Property,\n-           typename Type>\n+  template<template<typename> class Property, typename Type>\n     bool\n     test_property(typename Property<Type>::value_type value)\n     {\n@@ -183,7 +181,8 @@ namespace __gnu_test\n \n   // For use in 8_c_compatibility.\n   template<typename R, typename T>\n-    typename std::__enable_if<bool, std::__are_same<R, T>::__value>::__type\n+    typename __gnu_cxx::__enable_if<std::tr1::is_same<R, T>::value, \n+\t\t\t\t    bool>::__type\n     check_ret_type(T)\n     { return true; }\n "}]}