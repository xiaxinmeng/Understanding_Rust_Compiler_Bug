{"sha": "3455747810302e0540641aa7df9168443032ea71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ1NTc0NzgxMDMwMmUwNTQwNjQxYWE3ZGY5MTY4NDQzMDMyZWE3MQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2016-06-16T10:12:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T10:12:26Z"}, "message": "bindgen.adb, [...]: Minor reformatting.\n\n2016-06-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* bindgen.adb, exp_util.adb, sem_ch9.adb, sem_util.adb: Minor\n\treformatting.\n\nFrom-SVN: r237510", "tree": {"sha": "1ea930388b2b7426afd1a88f19d0961e85e108ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ea930388b2b7426afd1a88f19d0961e85e108ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3455747810302e0540641aa7df9168443032ea71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3455747810302e0540641aa7df9168443032ea71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3455747810302e0540641aa7df9168443032ea71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3455747810302e0540641aa7df9168443032ea71/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ab53b0db951d29969e44fa52dcc8fe3aae578c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab53b0db951d29969e44fa52dcc8fe3aae578c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab53b0db951d29969e44fa52dcc8fe3aae578c1"}], "stats": {"total": 82, "additions": 49, "deletions": 33}, "files": [{"sha": "af0fcc8c3718d4e8763f452fb7a9176de3b10f61", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3455747810302e0540641aa7df9168443032ea71/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3455747810302e0540641aa7df9168443032ea71/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3455747810302e0540641aa7df9168443032ea71", "patch": "@@ -1,3 +1,8 @@\n+2016-06-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* bindgen.adb, exp_util.adb, sem_ch9.adb, sem_util.adb: Minor\n+\treformatting.\n+\n 2016-06-16  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_ch9.adb, sem_util.ads, sem_res.adb: Minor reformatting and typo"}, {"sha": "58089c57fdf8c09f70f33a1d34d70066618b33c4", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3455747810302e0540641aa7df9168443032ea71/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3455747810302e0540641aa7df9168443032ea71/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=3455747810302e0540641aa7df9168443032ea71", "patch": "@@ -931,11 +931,12 @@ package body Bindgen is\n       Gen_Elab_Calls;\n \n       if not CodePeer_Mode then\n+\n          --  Call System.Elaboration_Allocators.Mark_Start_Of_Elaboration if\n          --  restriction No_Standard_Allocators_After_Elaboration is active.\n \n          if Cumulative_Restrictions.Set\n-           (No_Standard_Allocators_After_Elaboration)\n+              (No_Standard_Allocators_After_Elaboration)\n          then\n             WBI\n               (\"      System.Elaboration_Allocators.Mark_End_Of_Elaboration;\");"}, {"sha": "77fd7e192f0b472def06f091522e5e7d3e29f134", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3455747810302e0540641aa7df9168443032ea71/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3455747810302e0540641aa7df9168443032ea71/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=3455747810302e0540641aa7df9168443032ea71", "patch": "@@ -4721,8 +4721,8 @@ package body Exp_Util is\n \n       begin\n          --  When a function call appears in Object.Operation format, the\n-         --  original representation has three possible forms depending on the\n-         --  availability and form of actual parameters:\n+         --  original representation has several possible forms depending on\n+         --  the availability and form of actual parameters:\n \n          --    Obj.Func                    N_Selected_Component\n          --    Obj.Func (Actual)           N_Indexed_Component"}, {"sha": "ac14ba39f0acc3081e4f3ba69862890edc466f6e", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3455747810302e0540641aa7df9168443032ea71/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3455747810302e0540641aa7df9168443032ea71/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=3455747810302e0540641aa7df9168443032ea71", "patch": "@@ -1986,10 +1986,10 @@ package body Sem_Ch9 is\n       end if;\n \n       Set_Ekind              (T, E_Protected_Type);\n-      Set_Is_First_Subtype   (T, True);\n+      Set_Is_First_Subtype   (T);\n       Init_Size_Align        (T);\n       Set_Etype              (T, T);\n-      Set_Has_Delayed_Freeze (T, True);\n+      Set_Has_Delayed_Freeze (T);\n       Set_Stored_Constraint  (T, No_Elist);\n \n       --  Mark this type as a protected type for the sake of restrictions,\n@@ -2004,9 +2004,9 @@ package body Sem_Ch9 is\n       if In_Private_Part (Current_Scope)\n         and then Is_Internal_File_Name (Unit_File_Name (Current_Sem_Unit))\n       then\n-         Set_Has_Protected   (T, False);\n+         Set_Has_Protected (T, False);\n       else\n-         Set_Has_Protected   (T, True);\n+         Set_Has_Protected (T);\n       end if;\n \n       --  Set the SPARK_Mode from the current context (may be overwritten later"}, {"sha": "49401d5665b490f2177cf350223f0758b2f6aed8", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3455747810302e0540641aa7df9168443032ea71/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3455747810302e0540641aa7df9168443032ea71/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3455747810302e0540641aa7df9168443032ea71", "patch": "@@ -10391,39 +10391,49 @@ package body Sem_Util is\n    ----------------------------------\n \n    procedure Replace_Null_By_Null_Address (N : Node_Id) is\n+      procedure Replace_Null_Operand (Op : Node_Id; Other_Op : Node_Id);\n+      --  Replace operand Op with a reference to Null_Address when the operand\n+      --  denotes a null Address. Other_Op denotes the other operand.\n+\n+      --------------------------\n+      -- Replace_Null_Operand --\n+      --------------------------\n+\n+      procedure Replace_Null_Operand (Op : Node_Id; Other_Op : Node_Id) is\n+      begin\n+         --  Check the type of the complementary operand since the N_Null node\n+         --  has not been decorated yet.\n+\n+         if Nkind (Op) = N_Null\n+           and then Is_Descendant_Of_Address (Etype (Other_Op))\n+         then\n+            Rewrite (Op, New_Occurrence_Of (RTE (RE_Null_Address), Sloc (Op)));\n+         end if;\n+      end Replace_Null_Operand;\n+\n+   --  Start of processing for Replace_Null_By_Null_Address\n+\n    begin\n       pragma Assert (Relaxed_RM_Semantics);\n-      pragma Assert\n-        (Nkind (N) = N_Null\n-          or else Nkind_In (N, N_Op_Eq, N_Op_Ne)\n-          or else Nkind_In (N, N_Op_Lt, N_Op_Le, N_Op_Gt, N_Op_Ge));\n+      pragma Assert (Nkind_In (N, N_Null,\n+                                  N_Op_Eq,\n+                                  N_Op_Ge,\n+                                  N_Op_Gt,\n+                                  N_Op_Le,\n+                                  N_Op_Lt,\n+                                  N_Op_Ne));\n \n       if Nkind (N) = N_Null then\n-         Rewrite (N,\n-           New_Occurrence_Of (RTE (RE_Null_Address), Sloc (N)));\n+         Rewrite (N, New_Occurrence_Of (RTE (RE_Null_Address), Sloc (N)));\n \n       else\n          declare\n-            L : constant Node_Id := Left_Opnd (N);\n+            L : constant Node_Id := Left_Opnd  (N);\n             R : constant Node_Id := Right_Opnd (N);\n \n          begin\n-            --  We check the Etype of the complementary operand since the\n-            --  N_Null node is not decorated at this stage.\n-\n-            if Nkind (L) = N_Null\n-              and then Is_Descendant_Of_Address (Etype (R))\n-            then\n-               Rewrite (L,\n-                 New_Occurrence_Of (RTE (RE_Null_Address), Sloc (L)));\n-            end if;\n-\n-            if Nkind (R) = N_Null\n-              and then Is_Descendant_Of_Address (Etype (L))\n-            then\n-               Rewrite (R,\n-                 New_Occurrence_Of (RTE (RE_Null_Address), Sloc (R)));\n-            end if;\n+            Replace_Null_Operand (L, Other_Op => R);\n+            Replace_Null_Operand (R, Other_Op => L);\n          end;\n       end if;\n    end Replace_Null_By_Null_Address;\n@@ -17535,7 +17545,8 @@ package body Sem_Util is\n \n    function Null_To_Null_Address_Convert_OK\n      (N   : Node_Id;\n-      Typ : Entity_Id := Empty) return Boolean is\n+      Typ : Entity_Id := Empty) return Boolean\n+   is\n    begin\n       if not Relaxed_RM_Semantics then\n          return False;\n@@ -17544,8 +17555,7 @@ package body Sem_Util is\n       if Nkind (N) = N_Null then\n          return Present (Typ) and then Is_Descendant_Of_Address (Typ);\n \n-      elsif Nkind_In (N, N_Op_Eq, N_Op_Ne)\n-         or else Nkind_In (N, N_Op_Lt, N_Op_Le, N_Op_Gt, N_Op_Ge)\n+      elsif Nkind_In (N, N_Op_Eq, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt, N_Op_Ne)\n       then\n          declare\n             L : constant Node_Id := Left_Opnd (N);"}]}