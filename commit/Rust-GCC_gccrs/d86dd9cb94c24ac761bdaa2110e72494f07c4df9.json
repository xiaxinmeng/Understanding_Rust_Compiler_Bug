{"sha": "d86dd9cb94c24ac761bdaa2110e72494f07c4df9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg2ZGQ5Y2I5NGMyNGFjNzYxYmRhYTIxMTBlNzI0OTRmMDdjNGRmOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-12-01T16:13:29Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-01T16:13:29Z"}, "message": "PR jit/63854: Add support for running \"make check-jit\" under valgrind\n\ngcc/testsuite/ChangeLog:\n\tPR jit/63854\n\t* jit.dg/jit.exp (report_leak): New.\n\t(parse_valgrind_logfile): New.\n\t(fixed_host_execute): Detect if RUN_UNDER_VALGRIND is present\n\tin the environment, and if so, run the executable under\n\tvalgrind, capturing valgrind's output to a logfile.  Parse the\n\tlog file, generating PASSes and XFAILs for the summary of leaks.\n\tUse \"wait\" before \"close\": valgrind might not have finished\n\twriting the log out before we parse it, so we need to wait for\n\tthe spawnee to finish.\n\nFrom-SVN: r218227", "tree": {"sha": "329d381833dfa56a6bcf2c56d308a3c874c4f52d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/329d381833dfa56a6bcf2c56d308a3c874c4f52d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d86dd9cb94c24ac761bdaa2110e72494f07c4df9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86dd9cb94c24ac761bdaa2110e72494f07c4df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d86dd9cb94c24ac761bdaa2110e72494f07c4df9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86dd9cb94c24ac761bdaa2110e72494f07c4df9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c985705ae91243bdabd4d828365017ef264bbd91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c985705ae91243bdabd4d828365017ef264bbd91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c985705ae91243bdabd4d828365017ef264bbd91"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "37b5d0b670c44464d9dbdf07e08ec57761aa7e5e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86dd9cb94c24ac761bdaa2110e72494f07c4df9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86dd9cb94c24ac761bdaa2110e72494f07c4df9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d86dd9cb94c24ac761bdaa2110e72494f07c4df9", "patch": "@@ -1,3 +1,16 @@\n+2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/63854\n+\t* jit.dg/jit.exp (report_leak): New.\n+\t(parse_valgrind_logfile): New.\n+\t(fixed_host_execute): Detect if RUN_UNDER_VALGRIND is present\n+\tin the environment, and if so, run the executable under\n+\tvalgrind, capturing valgrind's output to a logfile.  Parse the\n+\tlog file, generating PASSes and XFAILs for the summary of leaks.\n+\tUse \"wait\" before \"close\": valgrind might not have finished\n+\twriting the log out before we parse it, so we need to wait for\n+\tthe spawnee to finish.\n+\n 2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/63969"}, {"sha": "9179a1553361f86b908509aad096975ad12bae06", "filename": "gcc/testsuite/jit.dg/jit.exp", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86dd9cb94c24ac761bdaa2110e72494f07c4df9/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86dd9cb94c24ac761bdaa2110e72494f07c4df9/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp?ref=d86dd9cb94c24ac761bdaa2110e72494f07c4df9", "patch": "@@ -23,6 +23,48 @@ load_lib target-libpath.exp\n load_lib gcc.exp\n load_lib dejagnu.exp\n \n+# Look for lines of the form:\n+#   definitely lost: 11,316 bytes in 235 blocks\n+#   indirectly lost: 352 bytes in 4 blocks\n+# Ideally these would report zero bytes lost (which is a PASS);\n+# for now, report non-zero leaks as XFAILs.\n+proc report_leak {kind name logfile line} {\n+    set match [regexp \"$kind lost: .*\" $line result]\n+    if $match {\n+\tverbose \"Saw \\\"$result\\\" within \\\"$line\\\"\" 4\n+\t# Extract bytes and blocks.\n+\t# These can contain commas as well as numerals,\n+\t# but we only care about whether we have zero.\n+\tregexp \"$kind lost: (.+) bytes in (.+) blocks\" \\\n+\t    $result -> bytes blocks\n+\tverbose \"bytes: '$bytes'\" 4\n+\tverbose \"blocks: '$blocks'\" 4\n+\tif { $bytes == 0 } {\n+\t    pass \"$name: $logfile: $result\"\n+\t} else {\n+\t    xfail \"$name: $logfile: $result\"\n+\t}\n+    }\n+}\n+\n+proc parse_valgrind_logfile {name logfile} {\n+    verbose \"parse_valgrind_logfile: $logfile\" 2\n+    if [catch {set f [open $logfile]}] {\n+\tfail \"$name: unable to read $logfile\"\n+\treturn\n+    }\n+\n+    while { [gets $f line] >= 0 } {\n+\t# Strip off the PID prefix e.g. ==7675==\n+\tset line [regsub \"==\\[0-9\\]*== \" $line \"\"]\n+\tverbose $line 2\n+\n+\treport_leak \"definitely\" $name $logfile $line\n+\treport_leak \"indirectly\" $name $logfile $line\n+    }\n+    close $f\n+}\n+\n # This is host_execute from dejagnu.exp commit\n #   126a089777158a7891ff975473939f08c0e31a1c\n # with the following patch applied, and renaming to \"fixed_host_execute\".\n@@ -49,6 +91,7 @@ load_lib dejagnu.exp\n #\tif there was a problem.\n #\n proc fixed_host_execute {args} {\n+    global env\n     global text\n     global spawn_id\n \n@@ -75,7 +118,28 @@ proc fixed_host_execute {args} {\n     # spawn the executable and look for the DejaGnu output messages from the\n     # test case.\n     # spawn -noecho -open [open \"|./${executable}\" \"r\"]\n-    spawn -noecho \"./${executable}\" ${params}\n+\n+    # Run under valgrind if RUN_UNDER_VALGRIND is present in the environment.\n+    # Note that it's best to configure gcc with --enable-valgrind-annotations\n+    # when testing under valgrind.\n+    set run_under_valgrind [info exists env(RUN_UNDER_VALGRIND)]\n+    if $run_under_valgrind {\n+\tset valgrind_logfile \"${executable}.valgrind.txt\"\n+\tset valgrind_params {\"valgrind\"}\n+\tlappend valgrind_params \"--leak-check=full\"\n+\tlappend valgrind_params \"--log-file=${valgrind_logfile}\"\n+    } else {\n+\tset valgrind_params {}\n+    }\n+    verbose \"valgrind_params: $valgrind_params\" 2\n+\n+    set args ${valgrind_params}\n+    lappend args \"./${executable}\"\n+    set args [concat $args ${params}]\n+    verbose \"args: $args\" 2\n+\n+    eval spawn -noecho $args\n+\n     expect_after full_buffer {\terror \"got full_buffer\" }\n \n     set prefix \"\\[^\\r\\n\\]*\"\n@@ -144,6 +208,18 @@ proc fixed_host_execute {args} {\n \t}\n     }\n \n+    # Use \"wait\" before \"close\": valgrind might not have finished\n+    # writing the log out before we parse it, so we need to wait for\n+    # the spawnee to finish.\n+\n+    catch wait wres\n+    verbose \"wres: $wres\" 2\n+\n+    if $run_under_valgrind {\n+\tupvar 2 name name\n+\tparse_valgrind_logfile $name $valgrind_logfile\n+    }\n+\n     # force a close of the executable to be safe.\n     catch close\n "}]}