{"sha": "d32ab9922e219c772fdf61e0fe638f2ab4e48dfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMyYWI5OTIyZTIxOWM3NzJmZGY2MWUwZmU2MzhmMmFiNGU0OGRmZQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-08-03T09:35:46Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-08-03T09:35:46Z"}, "message": "Makefile.def (host-modules): Add gcc.\n\n2004-08-03 Paolo Bonzini <bonzini@gnu.org>\n\n\t* Makefile.def (host-modules): Add gcc.\n\t* Makefile.in: Regenerate.\n\t* Makefile.tpl (sorry): New rule.\n\t(configure-host, all-host, [+make_target+]-host, do-check,\n\tinstall-host): Do not add gcc as a special case.\n\t(host modules): Add a small special-casing for gcc.  Export\n\textra_make_flags through the environment.\n\t(maybe-configure-gcc, configure-gcc, maybe-all-gcc, all-gcc,\n\tmaybe-check-gcc, check-gcc, maybe-install-gcc, install-gcc,\n\tother recursive targets for gcc): Remove.\n\n\t(all, do-[+make_target+], do-check): Wrap between unstage and stage.\n\t(stage, unstage): New rules.\n\t(stage[+id+]-start, stage[+id+]-end, [+compare-target+],\n\tdistclean-stage[+id+]): Use stage_current.\n\t([+bootstrap-target+], profiledbootstrap): Do not invoke manually\n\tthe stage*-start rules.\n\nFrom-SVN: r85468", "tree": {"sha": "567d94e0381ab55a7d6cd9b0c7e661a53693ad34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/567d94e0381ab55a7d6cd9b0c7e661a53693ad34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "097538f13dc02e55c92fdbe613ae6c590a58a3ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097538f13dc02e55c92fdbe613ae6c590a58a3ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/097538f13dc02e55c92fdbe613ae6c590a58a3ac"}], "stats": {"total": 14239, "additions": 7092, "deletions": 7147}, "files": [{"sha": "f3e3ee4d1b691f2af1f60d97902d00a036511e01", "filename": "ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d32ab9922e219c772fdf61e0fe638f2ab4e48dfe", "patch": "@@ -1,3 +1,23 @@\n+2004-08-03 Paolo Bonzini <bonzini@gnu.org>\n+\n+\t* Makefile.def (host-modules): Add gcc.\n+\t* Makefile.in: Regenerate.\n+\t* Makefile.tpl (sorry): New rule.\n+\t(configure-host, all-host, [+make_target+]-host, do-check,\n+\tinstall-host): Do not add gcc as a special case.\n+\t(host modules): Add a small special-casing for gcc.  Export\n+\textra_make_flags through the environment.\n+\t(maybe-configure-gcc, configure-gcc, maybe-all-gcc, all-gcc,\n+\tmaybe-check-gcc, check-gcc, maybe-install-gcc, install-gcc,\n+\tother recursive targets for gcc): Remove.\n+\n+\t(all, do-[+make_target+], do-check): Wrap between unstage and stage.\n+\t(stage, unstage): New rules.\n+\t(stage[+id+]-start, stage[+id+]-end, [+compare-target+],\n+\tdistclean-stage[+id+]): Use stage_current.\n+\t([+bootstrap-target+], profiledbootstrap): Do not invoke manually\n+\tthe stage*-start rules.\n+\n 2004-08-02  Geoffrey Keating  <geoffk@apple.com>\n \n \t* ltcf-cxx.sh: On Darwin, make archive multi-module, and don't"}, {"sha": "b7aa7984cee10b164614a6fb70dbc691fd3613ba", "filename": "Makefile.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=d32ab9922e219c772fdf61e0fe638f2ab4e48dfe", "patch": "@@ -52,6 +52,7 @@ host_modules= { module= findutils; };\n host_modules= { module= find; };\n host_modules= { module= flex; no_check_cross= true; bootstrap=true; };\n host_modules= { module= gas; bootstrap=true; };\n+host_modules= { module= gcc; extra_make_flags=\"$(EXTRA_GCC_FLAGS)\"; };\n host_modules= { module= gawk; };\n host_modules= { module= gettext; };\n host_modules= { module= gnuserv; };"}, {"sha": "1b19b21ea4b5e6e99723d4cad456e13b65e57415", "filename": "Makefile.in", "status": "modified", "additions": 7022, "deletions": 6999, "changes": 14021, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=d32ab9922e219c772fdf61e0fe638f2ab4e48dfe"}, {"sha": "f9c58c119abcd26c0ab612530a054ce4dd0b31ff", "filename": "Makefile.tpl", "status": "modified", "additions": 49, "deletions": 148, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=d32ab9922e219c772fdf61e0fe638f2ab4e48dfe", "patch": "@@ -484,6 +484,14 @@ PICFLAG_FOR_TARGET =\n # Miscellaneous targets and flag lists\n # ------------------------------------\n \n+@if gcc-bootstrap\n+# Let's leave this as the first rule in the file until toplevel\n+# bootstrap is fleshed out completely.\n+sorry:\n+\t@echo Toplevel bootstrap temporarily out of commission.\n+\t@echo Please reconfigure without --enable-bootstrap\n+@endif gcc-bootstrap\n+\n # The first rule in the file had better be this one.  Don't put any above it.\n # This lives here to allow makefile fragments to contain dependencies.\n @default_target@:\n@@ -583,7 +591,7 @@ EXTRA_GCC_FLAGS = \\\n GCC_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(EXTRA_HOST_FLAGS) $(EXTRA_GCC_FLAGS)\n \n .PHONY: configure-host\n-configure-host: maybe-configure-gcc [+\n+configure-host: [+\n   FOR host_modules +] \\\n     maybe-configure-[+module+][+\n   ENDFOR host_modules +]\n@@ -595,15 +603,15 @@ configure-target: [+\n \n # The target built for a native non-bootstrap build.\n .PHONY: all\n-all: all-build all-host all-target\n+all: unstage all-build all-host all-target stage\n \n .PHONY: all-build\n all-build: [+\n   FOR build_modules +] \\\n     maybe-all-build-[+module+][+\n   ENDFOR build_modules +]\n .PHONY: all-host\n-all-host: maybe-all-gcc [+\n+all-host: [+\n   FOR host_modules +] \\\n     maybe-all-[+module+][+\n   ENDFOR host_modules +]\n@@ -619,10 +627,10 @@ all-target: [+\n # but it may do additional work as well).\n [+ FOR recursive_targets +]\n .PHONY: do-[+make_target+]\n-do-[+make_target+]: [+make_target+]-host [+make_target+]-target\n+do-[+make_target+]: unstage [+make_target+]-host [+make_target+]-target stage\n \n .PHONY: [+make_target+]-host\n-[+make_target+]-host: maybe-[+make_target+]-gcc [+\n+[+make_target+]-host: [+\n   FOR host_modules +] \\\n     maybe-[+make_target+]-[+module+][+\n   ENDFOR host_modules +]\n@@ -694,13 +702,13 @@ clean-target-libgcc:\n check: do-check\n \n # Only include modules actually being configured and built.\n-do-check: maybe-check-gcc [+\n+do-check: unstage [+\n   FOR host_modules +] \\\n     maybe-check-[+module+][+\n   ENDFOR host_modules +][+\n   FOR target_modules +] \\\n     maybe-check-target-[+module+][+\n-  ENDFOR target_modules +]\n+  ENDFOR target_modules +] stage\n \n # Automated reporting of test results.\n \n@@ -735,7 +743,7 @@ install-host-nogcc: [+\n   ENDFOR host_modules +]\n \n .PHONY: install-host\n-install-host: maybe-install-gcc [+\n+install-host: [+\n   FOR host_modules +] \\\n     maybe-install-[+module+][+\n   ENDFOR host_modules +]\n@@ -909,7 +917,10 @@ all-[+module+]: configure-[+module+]\n \t(cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ \n \t  IF with_x \n \t    +] $(X11_FLAGS_TO_PASS)[+ \n-\t  ENDIF with_x +] [+extra_make_flags+] all)\n+\t  ENDIF with_x +] [+extra_make_flags+] [+\n+\t  IF (== (get \"module\") \"gcc\") +] \\\n+\t    `if [ -f gcc/stage_last ]; then echo quickstrap ; else echo all; fi` [+\n+\t  ELSE +]all[+ ENDIF +])\n @endif [+module+]\n \n .PHONY: check-[+module+] maybe-check-[+module+]\n@@ -982,7 +993,7 @@ maybe-[+make_target+]-[+module+]: [+make_target+]-[+module+]\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n \t$(HOST_EXPORTS) \\\n-\tfor flag in $(EXTRA_HOST_FLAGS); do \\\n+\tfor flag in $(EXTRA_HOST_FLAGS) [+extra_make_flags+]; do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n \tdone; \\\n \techo \"Doing [+make_target+] in [+module+]\" ; \\\n@@ -991,7 +1002,7 @@ maybe-[+make_target+]-[+module+]: [+make_target+]-[+module+]\n \t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n \t          \"RANLIB=$${RANLIB}\" \\\n \t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \\\n-\t          [+extra_make_flags+] [+make_target+]) \\\n+\t          [+make_target+]) \\\n \t  || exit 1\n [+ ENDIF +]\n @endif [+module+]\n@@ -1178,76 +1189,11 @@ ENDIF raw_cxx +]\n # GCC module\n # ----------\n \n-# Unfortunately, while gcc _should_ be a host module,\n-# libgcc is a target module, and gen* programs are\n-# build modules.  So GCC is a sort of hybrid.\n-\n-# gcc is the only module which uses GCC_FLAGS_TO_PASS.\n-# Don't use shared host config.cache, as it will confuse later\n-# directories; GCC wants slightly different values for some\n-# precious variables.  *sigh*\n-\n-# We must skip configuring if toplevel bootstrap is going.\n-.PHONY: configure-gcc maybe-configure-gcc\n-maybe-configure-gcc:\n-@if gcc\n-maybe-configure-gcc: configure-gcc\n-configure-gcc:\n-@endif gcc\n-@if gcc-no-bootstrap\n-\t@test ! -f gcc/Makefile || exit 0; \\\n-\t[ -d gcc ] || mkdir gcc; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\techo Configuring in gcc; \\\n-\tcd gcc || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  \\.) \\\n-\t    srcdiroption=\"--srcdir=.\"; \\\n-\t    libsrcdir=\".\";; \\\n-\t  /* | [A-Za-z]:[\\\\/]*) \\\n-\t    srcdiroption=\"--srcdir=$(srcdir)/gcc\"; \\\n-\t    libsrcdir=\"$$s/gcc\";; \\\n-\t  *) \\\n-\t    srcdiroption=\"--srcdir=../$(srcdir)/gcc\"; \\\n-\t    libsrcdir=\"$$s/gcc\";; \\\n-\tesac; \\\n-\t$(SHELL) $${libsrcdir}/configure \\\n-\t  $(HOST_CONFIGARGS) $${srcdiroption} \\\n-\t  || exit 1\n-@endif gcc-no-bootstrap\n-\n-# Don't 'make all' in gcc if it's already been made by 'bootstrap'; that\n-# causes trouble.  This wart will be fixed eventually by moving\n-# the bootstrap behavior to this file.\n-.PHONY: all-gcc maybe-all-gcc\n-maybe-all-gcc:\n-@if gcc\n-maybe-all-gcc: all-gcc\n-all-gcc: configure-gcc\n-@endif gcc\n @if gcc-no-bootstrap\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(SET_LIB_PATH) \\\n-\t$(HOST_EXPORTS) \\\n-\tif [ -f gcc/stage_last ] ; then \\\n-\t  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) quickstrap); \\\n-\telse \\\n-\t  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) all); \\\n-\tfi\n+# GCC has some more recursive targets, which trigger the old\n+# (but still current, until the toplevel bootstrap project\n+# is finished) compiler bootstrapping rules.\n \n-# Building GCC uses some tools for rebuilding \"source\" files\n-# like texinfo, bison/byacc, etc.  So we must depend on those.\n-#\n-# While building GCC, it may be necessary to run various target\n-# programs like the assembler, linker, etc.  So we depend on\n-# those too.\n-#\n-# In theory, on an SMP all those dependencies can be resolved\n-# in parallel.\n-#\n GCC_STRAP_TARGETS = bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean bubblestrap quickstrap cleanstrap restrap\n .PHONY: $(GCC_STRAP_TARGETS)\n $(GCC_STRAP_TARGETS): all-bootstrap configure-gcc\n@@ -1317,21 +1263,7 @@ cross: all-texinfo all-bison all-byacc all-binutils all-gas all-ld\n \t$(MAKE) $(RECURSE_FLAGS_TO_PASS) LANGUAGES=\"c c++\" all\n @endif gcc-no-bootstrap\n \n-.PHONY: check-gcc maybe-check-gcc\n-maybe-check-gcc:\n @if gcc\n-maybe-check-gcc: check-gcc\n-check-gcc:\n-\t@if [ -f ./gcc/Makefile ] ; then \\\n-\t  r=`${PWD_COMMAND}`; export r; \\\n-\t  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t  $(SET_LIB_PATH) \\\n-\t  $(HOST_EXPORTS) \\\n-\t  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check); \\\n-\telse \\\n-\t  true; \\\n-\tfi\n-\n .PHONY: check-gcc-c++\n check-gcc-c++:\n \t@if [ -f ./gcc/Makefile ] ; then \\\n@@ -1346,23 +1278,6 @@ check-gcc-c++:\n \n .PHONY: check-c++\n check-c++: check-target-libstdc++-v3 check-gcc-c++\n-@endif gcc\n-\n-.PHONY: install-gcc maybe-install-gcc\n-maybe-install-gcc:\n-@if gcc\n-maybe-install-gcc: install-gcc\n-install-gcc:\n-\t@if [ -f ./gcc/Makefile ] ; then \\\n-\t  r=`${PWD_COMMAND}`; export r; \\\n-\t  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t  $(SET_LIB_PATH) \\\n-\t  $(HOST_EXPORTS) \\\n-\t  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) install); \\\n-\telse \\\n-\t  true; \\\n-\tfi\n-@endif gcc\n \n # Install the gcc headers files, but not the fixed include files,\n # which Cygnus is not allowed to distribute.  This rule is very\n@@ -1385,43 +1300,29 @@ gcc-no-fixedincludes:\n \t  rm -rf gcc/include; \\\n \t  mv gcc/tmp-include gcc/include 2>/dev/null; \\\n \telse true; fi\n-\n-# Other targets (dvi, info, etc.)\n-[+ FOR recursive_targets +]\n-.PHONY: maybe-[+make_target+]-gcc [+make_target+]-gcc\n-maybe-[+make_target+]-gcc:\n-@if gcc\n-maybe-[+make_target+]-gcc: [+make_target+]-gcc\n-[+make_target+]-gcc: [+\n-  FOR depend +]\\\n-    [+depend+]-gcc [+\n-  ENDFOR depend +]\n-\t@[ -f ./gcc/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(SET_LIB_PATH) \\\n-\tfor flag in $(EXTRA_GCC_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t$(HOST_EXPORTS) \\\n-\techo \"Doing [+make_target+] in gcc\" ; \\\n-\t(cd gcc && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \\\n-\t          [+make_target+]) \\\n-\t  || exit 1\n @endif gcc\n \n-[+ ENDFOR recursive_targets +]\n-\n-@if gcc-bootstrap\n # ---------------------\n # GCC bootstrap support\n # ---------------------\n \n-# We track the current stage (the one in 'gcc') in the stage_last file.\n+# We track the current stage (the one in 'gcc') in the stage_current file.\n+# stage_last instead tracks the stage that was built last.  These targets\n+# are dummy when toplevel bootstrap is not active.\n+\n+.PHONY: unstage\n+unstage:\n+@if gcc-bootstrap\n+\t@[ -f stage_current ] || $(MAKE) `cat stage_last`-start\n+@endif gcc-bootstrap\n+\n+.PHONY: stage\n+stage:\n+@if gcc-bootstrap\n+\t@$(MAKE) `cat stage_current`-end\n+@endif gcc-bootstrap\n+\n+@if gcc-bootstrap\n # We name the build directories for the various stages \"stage1-gcc\",\n # \"stage2-gcc\",\"stage3-gcc\", etc.\n \n@@ -1486,14 +1387,15 @@ POSTSTAGE1_FLAGS_TO_PASS = \\\n .PHONY: stage[+id+]-start stage[+id+]-end\n \n stage[+id+]-start::\n-\t[ -f stage_last ] && $(MAKE) `cat stage_last`-end || :\n+\t[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n+\techo stage[+id+] > stage_current ; \\\n \techo stage[+id+] > stage_last ; \\\n \t[ -d stage[+id+]-gcc ] || mkdir stage[+id+]-gcc; \\\n \tset stage[+id+]-gcc gcc ; @CREATE_LINK_TO_DIR@ [+ IF prev +] ; \\\n \tset stage[+prev+]-gcc prev-gcc ; @CREATE_LINK_TO_DIR@ [+ ENDIF prev +]\n \n stage[+id+]-end::\n-\trm -f stage_last ; \\\n+\trm -f stage_current ; \\\n \tset gcc stage[+id+]-gcc ; @UNDO_LINK_TO_DIR@ [+ IF prev +] ; \\\n \tset prev-gcc stage[+prev+]-gcc ; @UNDO_LINK_TO_DIR@ [+ ENDIF prev +]\n \n@@ -1559,7 +1461,7 @@ all-stage[+id+]-gcc: configure-stage[+id+]-gcc\n \n [+ IF compare-target +]\n [+compare-target+]: all-stage[+id+]-gcc\n-\t[ -f stage_last ] && $(MAKE) `cat stage_last`-end || :\n+\t[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \trm -f .bad_compare ; \\\n@@ -1586,16 +1488,15 @@ all-stage[+id+]-gcc: configure-stage[+id+]-gcc\n [+bootstrap-target+]:\n \t$(MAKE) $(RECURSE_FLAGS_TO_PASS) stage[+id+]-bubble [+\n \t  IF compare-target +] [+compare-target+] [+\n-\t  ENDIF compare-target +] \\\n-\t  stage[+id+]-start all stage[+id+]-end \n+\t  ENDIF compare-target +] all\n [+ ENDIF bootstrap-target +]\n \n .PHONY: restage[+id+] touch-stage[+id+] distclean-stage[+id+]\n \n # Rules to wipe a stage and all the following ones, used for cleanstrap\n [+ IF prev +]distclean-stage[+prev+]:: distclean-stage[+id+] [+ ENDIF prev +]\n distclean-stage[+id+]::\n-\t[ -f stage_last ] && $(MAKE) `cat stage_last`-end || :\n+\t[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n \trm -rf configure-stage[+id+]-gcc all-stage[+id+]-gcc stage[+id+]-gcc [+\n \t  IF compare-target +][+compare-target+] [+ ENDIF compare-target +]\n \n@@ -1639,7 +1540,7 @@ profiledbootstrap: all-bootstrap configure-gcc\n \t$(SET_LIB_PATH) \\\n \t$(HOST_EXPORTS) \\\n \techo \"Bootstrapping the compiler\"; \\\n-\t$(MAKE) stageprofile-bubble distclean-stagefeedback stageprofile-start\n+\t$(MAKE) stageprofile-bubble distclean-stagefeedback\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \\\n \t$(SET_LIB_PATH) \\"}]}