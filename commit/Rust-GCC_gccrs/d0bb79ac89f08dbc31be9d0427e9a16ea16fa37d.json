{"sha": "d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiYjc5YWM4OWYwOGRiYzMxYmU5ZDA0MjdlOWExNmVhMTZmYTM3ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-07T21:48:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-07T21:48:00Z"}, "message": "re PR c++/48468 ([C++0x][SFINAE] noexcept operator does not handle function templates well)\n\n\tPR c++/48468\n\t* except.c (build_noexcept_spec): Propagate error_mark_node.\n\t(finish_noexcept_expr): Likewise.\n\nFrom-SVN: r172148", "tree": {"sha": "6e0a430b978c2d506159a60291e15cc51b366f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e0a430b978c2d506159a60291e15cc51b366f6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6dab6cf121a173733b7d4a4519c8eb1c573fc7cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dab6cf121a173733b7d4a4519c8eb1c573fc7cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dab6cf121a173733b7d4a4519c8eb1c573fc7cb"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "d20cf5165a3905ba94a09c20725c17fea07cb720", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d", "patch": "@@ -1,5 +1,9 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48468\n+\t* except.c (build_noexcept_spec): Propagate error_mark_node.\n+\t(finish_noexcept_expr): Likewise.\n+\n \tPR c++/48452\n \t* typeck.c (build_x_compound_expr_from_list): Return error_mark_node\n \tin SFINAE context."}, {"sha": "874f11150443a730d676d791e784aeae9143dce5", "filename": "gcc/cp/except.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d", "patch": "@@ -1125,6 +1125,9 @@ finish_noexcept_expr (tree expr, tsubst_flags_t complain)\n {\n   tree fn;\n \n+  if (expr == error_mark_node)\n+    return error_mark_node;\n+\n   if (processing_template_decl)\n     return build_min (NOEXCEPT_EXPR, boolean_type_node, expr);\n \n@@ -1212,6 +1215,8 @@ build_noexcept_spec (tree expr, int complain)\n     return noexcept_true_spec;\n   else if (expr == boolean_false_node)\n     return noexcept_false_spec;\n+  else if (expr == error_mark_node)\n+    return error_mark_node;\n   else\n     {\n       gcc_assert (processing_template_decl || expr == error_mark_node);"}, {"sha": "dc446df8a0b87d6177b832b1c31af84a9ca6a16d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d", "patch": "@@ -1,5 +1,8 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/sfinae11.C: New.\n+\t* g++.dg/cpp0x/noexcept02.C: Fix.\n+\n \t* g++.dg/cpp0x/sfinae10.C: New.\n \n \t* g++.dg/cpp0x/sfinae9.C: New."}, {"sha": "60015e756681f4214e72fec206a262fb4c3fe4e0", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept02.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C?ref=d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d", "patch": "@@ -46,7 +46,9 @@ SA(!noexcept(f3(A())));\n template <class T1, class T2>\n void f (T1, T2) noexcept(noexcept(T1(), T2()));\n \n-SA(noexcept(f3(1,1)));\n+struct B { };\n+\n+SA(noexcept(f3(1,B())));\n SA(!noexcept(f3(1,A())));\n SA(!noexcept(f3(A(),1)));\n SA(!noexcept(f3(A(),A())));"}, {"sha": "a3ffc34f9a3277069d6f9fbd331b1b5b0253c05e", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae11.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae11.C?ref=d0bb79ac89f08dbc31be9d0427e9a16ea16fa37d", "patch": "@@ -0,0 +1,56 @@\n+// PR c++/48468\n+// { dg-options -std=c++0x }\n+// { dg-prune-output \"note\" }\n+\n+template<class T>\n+T&& declval() noexcept;\n+\n+template< class T >\n+inline void f1( T& x ) noexcept( noexcept( declval<T&>().foo() ) )\n+{\n+  x.foo();\n+}\n+\n+template< class T,\n+  bool Noexcept = noexcept( declval<T&>().foo() )\n+>\n+inline void f2( T& x ) noexcept( Noexcept )\n+{\n+  x.foo();\n+}\n+\n+// a common and trivial mistake\n+template< class T >\n+inline void f3( T& x ) noexcept( declval<T&>().foo() )\n+{\n+  x.foo();\n+}\n+\n+struct X\n+{\n+  void foo();\n+};\n+\n+struct Y\n+{\n+  void foo() noexcept;\n+};\n+\n+struct Z {};\n+\n+int main()\n+{\n+  X x; Y y; Z z;\n+\n+  static_assert( !noexcept( f1(x) ), \"OK.\" );\n+  static_assert( !noexcept( f2(x) ), \"OK.\" );\n+  // static_assert( !noexcept( f3(x) ), \"shall be ill-formed(OK).\" );\n+\n+  static_assert(  noexcept( f1(y) ), \"OK.\" );\n+  static_assert(  noexcept( f2(y) ), \"OK.\" );\n+  // static_assert(  noexcept( f3(y) ), \"shall be ill-formed(OK).\" );\n+\n+  static_assert(  noexcept( f1(z) ), \"shall be ill-formed.\" ); // { dg-error \"no match\" }\n+  static_assert(  noexcept( f2(z) ), \"shall be ill-formed.\" ); // { dg-error \"no match\" }\n+  static_assert( !noexcept( f3(z) ), \"shall be ill-formed.\" ); // { dg-error \"no match\" }\n+}"}]}