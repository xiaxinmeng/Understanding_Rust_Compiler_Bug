{"sha": "03742a9b0159abadf88dc259d1331b48cf102e73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM3NDJhOWIwMTU5YWJhZGY4OGRjMjU5ZDEzMzFiNDhjZjEwMmU3Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-04-01T06:54:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-04-01T06:54:52Z"}, "message": "re PR other/39591 (GOMP_loop_end illegally optmized into GOMP_loop_end_nowait)\n\n\tPR other/39591\n\t* omp-low.c (remove_exit_barrier): Don't optimize if there are any\n\taddressable variables in the parallel that could go out of scope while\n\trunning queued tasks.\n\n\t* testsuite/libgomp.c/pr39591-1.c: New test.\n\t* testsuite/libgomp.c/pr39591-2.c: New test.\n\t* testsuite/libgomp.c/pr39591-3.c: New test.\n\nFrom-SVN: r145390", "tree": {"sha": "21d252b6e42e3b03c7ed6cbdf149f1b4814d94fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21d252b6e42e3b03c7ed6cbdf149f1b4814d94fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03742a9b0159abadf88dc259d1331b48cf102e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03742a9b0159abadf88dc259d1331b48cf102e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03742a9b0159abadf88dc259d1331b48cf102e73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03742a9b0159abadf88dc259d1331b48cf102e73/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4223ff5f252b650b7e799d7e919bbc1796901aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4223ff5f252b650b7e799d7e919bbc1796901aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4223ff5f252b650b7e799d7e919bbc1796901aed"}], "stats": {"total": 177, "additions": 174, "deletions": 3}, "files": [{"sha": "bbb7af867ffe0939a5e978e246e28c056a093ee1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03742a9b0159abadf88dc259d1331b48cf102e73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03742a9b0159abadf88dc259d1331b48cf102e73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03742a9b0159abadf88dc259d1331b48cf102e73", "patch": "@@ -1,3 +1,10 @@\n+2009-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/39591\n+\t* omp-low.c (remove_exit_barrier): Don't optimize if there are any\n+\taddressable variables in the parallel that could go out of scope while\n+\trunning queued tasks.\n+\n 2009-04-01  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/avr/avr.h (avr_case_values_threshold): Remove declaration."}, {"sha": "b96da5fe1e24c70d51364ae49f9c46ce3d7837ae", "filename": "gcc/omp-low.c", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03742a9b0159abadf88dc259d1331b48cf102e73/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03742a9b0159abadf88dc259d1331b48cf102e73/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=03742a9b0159abadf88dc259d1331b48cf102e73", "patch": "@@ -3,7 +3,7 @@\n    marshalling to implement data sharing and copying clauses.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n-   Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -3123,6 +3123,7 @@ remove_exit_barrier (struct omp_region *region)\n   edge_iterator ei;\n   edge e;\n   gimple stmt;\n+  int any_addressable_vars = -1;\n \n   exit_bb = region->exit;\n \n@@ -3148,8 +3149,52 @@ remove_exit_barrier (struct omp_region *region)\n       if (gsi_end_p (gsi))\n \tcontinue;\n       stmt = gsi_stmt (gsi);\n-      if (gimple_code (stmt) == GIMPLE_OMP_RETURN)\n-\tgimple_omp_return_set_nowait (stmt);\n+      if (gimple_code (stmt) == GIMPLE_OMP_RETURN\n+\t  && !gimple_omp_return_nowait_p (stmt))\n+\t{\n+\t  /* OpenMP 3.0 tasks unfortunately prevent this optimization\n+\t     in many cases.  If there could be tasks queued, the barrier\n+\t     might be needed to let the tasks run before some local\n+\t     variable of the parallel that the task uses as shared\n+\t     runs out of scope.  The task can be spawned either\n+\t     from within current function (this would be easy to check)\n+\t     or from some function it calls and gets passed an address\n+\t     of such a variable.  */\n+\t  if (any_addressable_vars < 0)\n+\t    {\n+\t      gimple parallel_stmt = last_stmt (region->entry);\n+\t      tree child_fun = gimple_omp_parallel_child_fn (parallel_stmt);\n+\t      tree local_decls = DECL_STRUCT_FUNCTION (child_fun)->local_decls;\n+\t      tree block;\n+\n+\t      any_addressable_vars = 0;\n+\t      for (; local_decls; local_decls = TREE_CHAIN (local_decls))\n+\t\tif (TREE_ADDRESSABLE (TREE_VALUE (local_decls)))\n+\t\t  {\n+\t\t    any_addressable_vars = 1;\n+\t\t    break;\n+\t\t  }\n+\t      for (block = gimple_block (stmt);\n+\t\t   !any_addressable_vars\n+\t\t   && block\n+\t\t   && TREE_CODE (block) == BLOCK;\n+\t\t   block = BLOCK_SUPERCONTEXT (block))\n+\t\t{\n+\t\t  for (local_decls = BLOCK_VARS (block);\n+\t\t       local_decls;\n+\t\t       local_decls = TREE_CHAIN (local_decls))\n+\t\t    if (TREE_ADDRESSABLE (local_decls))\n+\t\t      {\n+\t\t\tany_addressable_vars = 1;\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  if (block == gimple_block (parallel_stmt))\n+\t\t    break;\n+\t\t}\n+\t    }\n+\t  if (!any_addressable_vars)\n+\t    gimple_omp_return_set_nowait (stmt);\n+\t}\n     }\n }\n "}, {"sha": "15eb2c6c7694b17f5ccb468bbbc07564133e919c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03742a9b0159abadf88dc259d1331b48cf102e73/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03742a9b0159abadf88dc259d1331b48cf102e73/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=03742a9b0159abadf88dc259d1331b48cf102e73", "patch": "@@ -1,3 +1,10 @@\n+2009-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/39591\n+\t* testsuite/libgomp.c/pr39591-1.c: New test.\n+\t* testsuite/libgomp.c/pr39591-2.c: New test.\n+\t* testsuite/libgomp.c/pr39591-3.c: New test.\n+\n 2009-03-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* testsuite/libgomp.c/atomic-5.c: Cleanup cpuid usage."}, {"sha": "dfd8d9e8aca60504801edeab3c01d6400c5bb1f0", "filename": "libgomp/testsuite/libgomp.c/pr39591-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03742a9b0159abadf88dc259d1331b48cf102e73/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03742a9b0159abadf88dc259d1331b48cf102e73/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-1.c?ref=03742a9b0159abadf88dc259d1331b48cf102e73", "patch": "@@ -0,0 +1,33 @@\n+/* PR other/39591 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+int err;\n+\n+int\n+main (void)\n+{\n+#pragma omp parallel\n+  {\n+    int array[40];\n+    int i;\n+    for (i = 0; i < sizeof array / sizeof array[0]; i++)\n+      array[i] = 0x55555555;\n+\n+#pragma omp for schedule(dynamic)\n+    for (i = 0; i < 50; i++)\n+#pragma omp task shared(array)\n+      {\n+\tint j;\n+\tfor (j = 0; j < sizeof array / sizeof array[0]; j++)\n+\t  if (array[j] != 0x55555555)\n+#pragma omp atomic\n+\t    err++;\n+      }\n+  }\n+  if (err)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "b5f8f9cc7b22c5a380a31d079e8ea61778f0eae7", "filename": "libgomp/testsuite/libgomp.c/pr39591-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03742a9b0159abadf88dc259d1331b48cf102e73/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03742a9b0159abadf88dc259d1331b48cf102e73/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-2.c?ref=03742a9b0159abadf88dc259d1331b48cf102e73", "patch": "@@ -0,0 +1,39 @@\n+/* PR other/39591 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+int err;\n+\n+void __attribute__((noinline))\n+foo (int *array)\n+{\n+#pragma omp task\n+  {\n+    int j;\n+    for (j = 0; j < sizeof array / sizeof array[0]; j++)\n+      if (array[j] != 0x55555555)\n+#pragma omp atomic\n+\terr++;\n+  }\n+}\n+\n+int\n+main (void)\n+{\n+#pragma omp parallel\n+  {\n+    int array[40];\n+    int i;\n+    for (i = 0; i < sizeof array / sizeof array[0]; i++)\n+      array[i] = 0x55555555;\n+\n+#pragma omp for schedule (dynamic)\n+    for (i = 0; i < 50; i++)\n+      foo (array);\n+  }\n+  if (err)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "a9aeea7c83ad488f46451dd0e9fbcee66336dbf1", "filename": "libgomp/testsuite/libgomp.c/pr39591-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03742a9b0159abadf88dc259d1331b48cf102e73/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03742a9b0159abadf88dc259d1331b48cf102e73/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-3.c?ref=03742a9b0159abadf88dc259d1331b48cf102e73", "patch": "@@ -0,0 +1,40 @@\n+/* PR other/39591 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+int err, a[40];\n+\n+void __attribute__((noinline))\n+foo (int *array)\n+{\n+#pragma omp task\n+  {\n+    int j;\n+    for (j = 0; j < sizeof array / sizeof array[0]; j++)\n+      if (array[j] != 0x55555555)\n+#pragma omp atomic\n+\terr++;\n+  }\n+}\n+\n+int\n+main (void)\n+{\n+  int k;\n+  for (k = 0; k < sizeof a / sizeof a[0]; k++)\n+    a[k] = 0x55555555;\n+\n+#pragma omp parallel\n+  {\n+    int i;\n+\n+#pragma omp for schedule (dynamic)\n+    for (i = 0; i < 50; i++)\n+      foo (a);\n+  }\n+  if (err)\n+    abort ();\n+  return 0;\n+}"}]}