{"sha": "be672de8aefdbad33db28b2fa397bafde5c39e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2NzJkZThhZWZkYmFkMzNkYjI4YjJmYTM5N2JhZmRlNWMzOWUwYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-07-20T02:38:57Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-07-20T02:38:57Z"}, "message": "reorg.c (fill_simple_delay_slots): If an instruction might throw an exception that will be caught within this...\n\n\t* reorg.c (fill_simple_delay_slots): If an instruction might throw\n\tan exception that will be caught within this function, do not fill\n\tits delay slot with any subsequent instruction.\n\nFrom-SVN: r44171", "tree": {"sha": "be9419d5a426c224fc7741680b50eccd11561a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be9419d5a426c224fc7741680b50eccd11561a52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be672de8aefdbad33db28b2fa397bafde5c39e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be672de8aefdbad33db28b2fa397bafde5c39e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be672de8aefdbad33db28b2fa397bafde5c39e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be672de8aefdbad33db28b2fa397bafde5c39e0c/comments", "author": null, "committer": null, "parents": [{"sha": "3b73bce168137059e4c4bcaca6ce575f001ab8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b73bce168137059e4c4bcaca6ce575f001ab8df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b73bce168137059e4c4bcaca6ce575f001ab8df"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "693d0620d29cdaa1c7c9b682ba22ac149ab70c29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be672de8aefdbad33db28b2fa397bafde5c39e0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be672de8aefdbad33db28b2fa397bafde5c39e0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be672de8aefdbad33db28b2fa397bafde5c39e0c", "patch": "@@ -1,3 +1,9 @@\n+2001-07-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* reorg.c (fill_simple_delay_slots): If an instruction might throw\n+\tan exception that will be caught within this function, do not fill\n+\tits delay slot with any subsequent instruction.\n+\n 2001-07-19  Steve Ellcey <sje@cup.hp.com>\n \n \t* tm.texi (POINTERS_EXTEND_UNSIGNED) Modify definition."}, {"sha": "1f26e7e37517d42105988c93f400d840695a67a8", "filename": "gcc/reorg.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be672de8aefdbad33db28b2fa397bafde5c39e0c/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be672de8aefdbad33db28b2fa397bafde5c39e0c/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=be672de8aefdbad33db28b2fa397bafde5c39e0c", "patch": "@@ -2223,6 +2223,27 @@ fill_simple_delay_slots (non_jumps_p)\n \t fill_eager_delay_slots anyways, it was just deleted.  */\n \n       if (slots_filled != slots_to_fill\n+\t  /* If this instruction could throw an exception which is\n+\t     caught in the same function, then it's not safe to fill\n+\t     the delay slot with an instruction from beyond this\n+\t     point.  For example, consider:\n+\n+               int i = 2;\n+\n+\t       try { \n+                 f();\n+\t         i = 3;\n+               } catch (...) {}\n+\t       \n+               return i;\n+\n+\t     Even though `i' is a local variable, we must be sure not\n+\t     to put `i = 3' in the delay slot if `f' might throw an\n+\t     exception.\n+\n+\t     Presumably, we should also check to see if we could get\n+\t     back to this function via `setjmp'.  */\n+\t  && !can_throw_internal (insn)\n \t  && (GET_CODE (insn) != JUMP_INSN\n \t      || ((condjump_p (insn) || condjump_in_parallel_p (insn))\n \t\t  && ! simplejump_p (insn)"}]}