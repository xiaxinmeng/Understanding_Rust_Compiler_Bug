{"sha": "bf35d17a30c0a476b6abc82e0b029029c5599104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzNWQxN2EzMGMwYTQ3NmI2YWJjODJlMGIwMjkwMjljNTU5OTEwNA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:03:46Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:03:46Z"}, "message": "[arm] Allow new extended syntax CPU and architecture\n\n\nThis patch extends support for the new extended-style architecture\nstrings to configure and the target default options.  We validate any\noptions passed by the user to configure against the permitted\nextensions for that CPU or architecture.\n\n\t* config.gcc (arm*-*-fucshia*): Set target_cpu_cname to the real\n\tcpu name.\n\t(arm*-*-*): Set target_cpu_default2 to a quoted string.\n\t* config/arm/parsecpu.awk (check_cpu): Validate any extension\n\toptions.\n\t(check_arch): Likewise.\n\t* config/arm/arm.c (arm_configure_build_target): Handle\n\tTARGET_CPU_DEFAULT being a string constant.  Scan any feature\n\toptions in the default.\n\nFrom-SVN: r249290", "tree": {"sha": "c0f1dda648777a99dec0f285e53000a81810a6fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0f1dda648777a99dec0f285e53000a81810a6fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf35d17a30c0a476b6abc82e0b029029c5599104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf35d17a30c0a476b6abc82e0b029029c5599104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf35d17a30c0a476b6abc82e0b029029c5599104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf35d17a30c0a476b6abc82e0b029029c5599104/comments", "author": null, "committer": null, "parents": [{"sha": "357e1023c9b10e98d1aa4d59fdb876078de47608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357e1023c9b10e98d1aa4d59fdb876078de47608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357e1023c9b10e98d1aa4d59fdb876078de47608"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "3299cdea1ac603fef7a3acc1bbd7860f9a9e730e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf35d17a30c0a476b6abc82e0b029029c5599104/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf35d17a30c0a476b6abc82e0b029029c5599104/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf35d17a30c0a476b6abc82e0b029029c5599104", "patch": "@@ -1,3 +1,15 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config.gcc (arm*-*-fucshia*): Set target_cpu_cname to the real\n+\tcpu name.\n+\t(arm*-*-*): Set target_cpu_default2 to a quoted string.\n+\t* config/arm/parsecpu.awk (check_cpu): Validate any extension\n+\toptions.\n+\t(check_arch): Likewise.\n+\t* config/arm/arm.c (arm_configure_build_target): Handle\n+\tTARGET_CPU_DEFAULT being a string constant.  Scan any feature\n+\toptions in the default.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm-protos.h (cpu_arch_extension): Add field to record"}, {"sha": "620a5b2360e69339b48e533441acb36685aa870a", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf35d17a30c0a476b6abc82e0b029029c5599104/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf35d17a30c0a476b6abc82e0b029029c5599104/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=bf35d17a30c0a476b6abc82e0b029029c5599104", "patch": "@@ -1161,7 +1161,7 @@ arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-fuchsia*)\n \tarm*-*-fuchsia*)\n \t  tm_file=\"${tm_file} fuchsia.h arm/fuchsia-elf.h glibc-stdint.h\"\n \t  tmake_file=\"${tmake_file} arm/t-bpabi\"\n-\t  target_cpu_cname=\"genericv7a\"\n+\t  target_cpu_cname=\"generic-armv7-a\"\n \t  ;;\n \tarm*-*-rtems*)\n \t  tm_file=\"${tm_file} rtems.h arm/rtems.h newlib-stdint.h\"\n@@ -4496,9 +4496,9 @@ case ${target} in\n \tarm*-*-*)\n \t\tif test x$target_cpu_cname = x\n \t\tthen\n-\t\t\ttarget_cpu_default2=TARGET_CPU_arm6\n+\t\t\ttarget_cpu_default2=\"\\\\\\\"arm6\\\\\\\"\"\n \t\telse\n-\t\t\ttarget_cpu_default2=TARGET_CPU_$target_cpu_cname\n+\t\t\ttarget_cpu_default2=\"\\\\\\\"$target_cpu_cname\\\\\\\"\"\n \t\tfi\n \t\t;;\n "}, {"sha": "9e857a2b011d89b21c98bda7a3cfefd0d7664d7b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf35d17a30c0a476b6abc82e0b029029c5599104/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf35d17a30c0a476b6abc82e0b029029c5599104/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=bf35d17a30c0a476b6abc82e0b029029c5599104", "patch": "@@ -3143,7 +3143,9 @@ arm_configure_build_target (struct arm_build_target *target,\n       bitmap_clear (sought_isa);\n       auto_sbitmap default_isa (isa_num_bits);\n \n-      arm_selected_cpu = &all_cores[TARGET_CPU_DEFAULT];\n+      arm_selected_cpu = arm_parse_cpu_option_name (all_cores, \"default CPU\",\n+\t\t\t\t\t\t    TARGET_CPU_DEFAULT);\n+      cpu_opts = strchr (TARGET_CPU_DEFAULT, '+');\n       gcc_assert (arm_selected_cpu->common.name);\n \n       /* RWE: All of the selection logic below (to the end of this\n@@ -3154,6 +3156,8 @@ arm_configure_build_target (struct arm_build_target *target,\n \t support for the pre-thumb era cores is removed.  */\n       sel = arm_selected_cpu;\n       arm_initialize_isa (default_isa, sel->common.isa_bits);\n+      arm_parse_option_features (default_isa, &arm_selected_cpu->common,\n+\t\t\t\t cpu_opts);\n \n       /* Now check to see if the user has specified any command line\n \t switches that require certain abilities from the cpu.  */\n@@ -3241,6 +3245,8 @@ arm_configure_build_target (struct arm_build_target *target,\n \t structure.  */\n       target->core_name = arm_selected_cpu->common.name;\n       arm_initialize_isa (target->isa, arm_selected_cpu->common.isa_bits);\n+      arm_parse_option_features (target->isa, &arm_selected_cpu->common,\n+\t\t\t\t cpu_opts);\n       arm_selected_arch = all_architectures + arm_selected_cpu->arch;\n     }\n "}, {"sha": "b6e50932ddc77d069b99b3352f286c2c000be5af", "filename": "gcc/config/arm/parsecpu.awk", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf35d17a30c0a476b6abc82e0b029029c5599104/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf35d17a30c0a476b6abc82e0b029029c5599104/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=bf35d17a30c0a476b6abc82e0b029029c5599104", "patch": "@@ -393,9 +393,19 @@ function gen_opt () {\n }\n \n function check_cpu (name) {\n-    if (name in cpu_cnames) {\n-\tprint cpu_cnames[name]\n-    } else print \"error\"\n+    exts = split (name, extensions, \"+\")\n+\n+    if (! extensions[1] in cpu_cnames) {\n+\treturn \"error\"\n+    }\n+\n+    for (n = 2; n <= exts; n++) {\n+\tif (!((extensions[1], extensions[n]) in cpu_opt_remove)\t\\\n+\t    && !((extensions[1], extensions[n]) in cpu_optaliases)) {\n+\t    return \"error\"\n+\t}\n+    }\n+    return name\n }\n \n function check_fpu (name) {\n@@ -405,9 +415,19 @@ function check_fpu (name) {\n }\n \n function check_arch (name) {\n-    if (name in arch_isa) {\n-\tprint name\n-    } else print \"error\"\n+    exts = split (name, extensions, \"+\")\n+\n+    if (! extensions[1] in arch_isa) {\n+\treturn \"error\"\n+    }\n+\n+    for (n = 2; n <= exts; n++) {\n+\tif (!((extensions[1], extensions[n]) in arch_opt_remove)\t\\\n+\t    && !((extensions[1], extensions[n]) in arch_optaliases)) {\n+\t    return \"error\"\n+\t}\n+    }\n+    return name\n }\n \n BEGIN {\n@@ -614,10 +634,10 @@ END {\n \tgen_opt()\n     } else if (cmd ~ /^chk(cpu|tune) /) {\n \tsplit (cmd, target)\n-\tcheck_cpu(target[2])\n+\tprint check_cpu(target[2])\n     } else if (cmd ~ /^chkarch /) {\n \tsplit (cmd, target)\n-\tcheck_arch(target[2])\n+\tprint check_arch(target[2])\n     } else if (cmd ~ /^chkfpu /) {\n \tsplit (cmd, target)\n \tcheck_fpu(target[2])"}]}