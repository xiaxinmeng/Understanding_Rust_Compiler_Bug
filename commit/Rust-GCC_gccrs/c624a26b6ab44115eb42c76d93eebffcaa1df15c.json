{"sha": "c624a26b6ab44115eb42c76d93eebffcaa1df15c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYyNGEyNmI2YWI0NDExNWViNDJjNzZkOTNlZWJmZmNhYTFkZjE1Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:37:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:37:34Z"}, "message": "[multiple changes]\n\n2014-07-16  Vincent Celier  <celier@adacore.com>\n\n\t* gnatls.adb (Normalize): New function.\n\t(Gnatls): Get the target parameters. On targets other than VMS,\n\tnormalize the path names in the source search path, the object search\n\tpath and the project search path.\n\n2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_case.adb: Avoid self-checking of case expressions in\n\tdynamic predicates.\n\n2014-07-16  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Document effect of Suppress_Initialization on tags and\n\tdiscriminants.\n\nFrom-SVN: r212658", "tree": {"sha": "3cba23eae91006f3808a22c301a3f154e1375db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cba23eae91006f3808a22c301a3f154e1375db4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c624a26b6ab44115eb42c76d93eebffcaa1df15c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c624a26b6ab44115eb42c76d93eebffcaa1df15c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c624a26b6ab44115eb42c76d93eebffcaa1df15c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c624a26b6ab44115eb42c76d93eebffcaa1df15c/comments", "author": null, "committer": null, "parents": [{"sha": "ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18"}], "stats": {"total": 85, "additions": 70, "deletions": 15}, "files": [{"sha": "e63452a5e9359546065a46f69aaadf34ac55fa99", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624a26b6ab44115eb42c76d93eebffcaa1df15c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624a26b6ab44115eb42c76d93eebffcaa1df15c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c624a26b6ab44115eb42c76d93eebffcaa1df15c", "patch": "@@ -1,3 +1,20 @@\n+2014-07-16  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatls.adb (Normalize): New function.\n+\t(Gnatls): Get the target parameters. On targets other than VMS,\n+\tnormalize the path names in the source search path, the object search\n+\tpath and the project search path.\n+\n+2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_case.adb: Avoid self-checking of case expressions in\n+\tdynamic predicates.\n+\n+2014-07-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Document effect of Suppress_Initialization on tags and\n+\tdiscriminants.\n+\n 2014-07-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* switch-b.adb (Scan_Binder_Switches): Add missing guard."}, {"sha": "ee3abf6b73f6e9dd78bda7952edc3c14c5b43980", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624a26b6ab44115eb42c76d93eebffcaa1df15c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624a26b6ab44115eb42c76d93eebffcaa1df15c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c624a26b6ab44115eb42c76d93eebffcaa1df15c", "patch": "@@ -6945,6 +6945,12 @@ to apply to the base type and all its subtypes. If the pragma is given\n for other than a first subtype, then it applies only to the given subtype.\n The pragma may not be given after the type is frozen.\n \n+Note that this includes eliminating initialization of discriminants\n+for discriminated types, and tags for tagged types. In these cases,\n+you will have to use some non-portable mechanism (e.g. address\n+overlays or unchecked conversion) to achieve required initialization\n+of these fields before accessing any object of the corresponding type.\n+\n @node Pragma Task_Name\n @unnumberedsec Pragma Task_Name\n @findex Task_Name"}, {"sha": "c474b92fe0736252fc15cda13714d8124c43ea40", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624a26b6ab44115eb42c76d93eebffcaa1df15c/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624a26b6ab44115eb42c76d93eebffcaa1df15c/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=c624a26b6ab44115eb42c76d93eebffcaa1df15c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,7 +40,9 @@ with Prj.Env;     use Prj.Env;\n with Rident;      use Rident;\n with Sdefault;\n with Snames;\n+with Stringt;\n with Switch;      use Switch;\n+with Targparm;    use Targparm;\n with Types;       use Types;\n \n with GNAT.Case_Util; use GNAT.Case_Util;\n@@ -182,6 +184,11 @@ procedure Gnatls is\n    function Image (Restriction : Restriction_Id) return String;\n    --  Returns the capitalized image of Restriction\n \n+   function Normalize (Path : String) return String;\n+   --  Returns a normalized path name, except on VMS where the argument Path\n+   --  is returned, to keep the host pathname syntax. On Windows, the directory\n+   --  separators are set to '\\' in Normalize_Pathname.\n+\n    ------------------------------------------\n    -- GNATDIST specific output subprograms --\n    ------------------------------------------\n@@ -820,6 +827,19 @@ procedure Gnatls is\n       return Result;\n    end Image;\n \n+   ---------------\n+   -- Normalize --\n+   ---------------\n+\n+   function Normalize (Path : String) return String is\n+   begin\n+      if OpenVMS_On_Target then\n+         return Path;\n+      else\n+         return Normalize_Pathname (Path);\n+      end if;\n+   end Normalize;\n+\n    --------------------------------\n    -- Output_License_Information --\n    --------------------------------\n@@ -1553,11 +1573,15 @@ begin\n \n    Csets.Initialize;\n    Snames.Initialize;\n+   Stringt.Initialize;\n \n    --  First check for --version or --help\n \n    Check_Version_And_Help (\"GNATLS\", \"1992\");\n \n+   Osint.Add_Default_Search_Dirs;\n+   Get_Target_Parameters;\n+\n    --  Loop to scan out arguments\n \n    Next_Arg := 1;\n@@ -1618,8 +1642,10 @@ begin\n          if Dir_In_Src_Search_Path (J)'Length = 0 then\n             Write_Str (\"<Current_Directory>\");\n          else\n-            Write_Str (To_Host_Dir_Spec\n-              (Dir_In_Src_Search_Path (J).all, True).all);\n+            Write_Str\n+              (Normalize\n+                 (To_Host_Dir_Spec\n+                    (Dir_In_Src_Search_Path (J).all, True).all));\n          end if;\n \n          Write_Eol;\n@@ -1636,8 +1662,10 @@ begin\n          if Dir_In_Obj_Search_Path (J)'Length = 0 then\n             Write_Str (\"<Current_Directory>\");\n          else\n-            Write_Str (To_Host_Dir_Spec\n-              (Dir_In_Obj_Search_Path (J).all, True).all);\n+            Write_Str\n+              (Normalize\n+                 (To_Host_Dir_Spec\n+                    (Dir_In_Obj_Search_Path (J).all, True).all));\n          end if;\n \n          Write_Eol;\n@@ -1687,7 +1715,7 @@ begin\n \n                   Write_Str (\"   \");\n                   Write_Str\n-                    (Normalize_Pathname\n+                    (Normalize\n                       (To_Host_Dir_Spec\n                         (Project_Path (First .. Last), True).all));\n                   Write_Eol;"}, {"sha": "3a2f815d91ad2f389cefcd3aaa27b39819bc6fec", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624a26b6ab44115eb42c76d93eebffcaa1df15c/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624a26b6ab44115eb42c76d93eebffcaa1df15c/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=c624a26b6ab44115eb42c76d93eebffcaa1df15c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n@@ -645,9 +646,6 @@ package body Sem_Case is\n \n       Bounds_Hi     : constant Node_Id := Type_High_Bound (Bounds_Type);\n       Bounds_Lo     : constant Node_Id := Type_Low_Bound  (Bounds_Type);\n-      Has_Predicate : constant Boolean :=\n-                        Is_Static_Subtype (Bounds_Type)\n-                          and then Present (Static_Predicate (Bounds_Type));\n       Num_Choices   : constant Nat     := Choice_Table'Last;\n \n       Choice      : Node_Id;\n@@ -681,11 +679,17 @@ package body Sem_Case is\n \n       Sorting.Sort (Positive (Choice_Table'Last));\n \n-      --  The type covered by the list of choices is actually a static subtype\n-      --  subject to a static predicate. The predicate defines subsets of legal\n-      --  values and requires finer grained analysis.\n-\n-      if Has_Predicate then\n+      --  If the type covered by the list of choices is actually a static\n+      --  subtype subject to a static predicate, then the predicate defines\n+      --  subsets of legal values and we must verify that the branches of the\n+      --  case match those subsets. If there is no static_predicate there is no\n+      --  compiler check to perform. In particular we don't want any checks on\n+      --  a case expression that itself appears as the expression of a dynamic\n+      --  predicate. A case expression that defines a static predicate is\n+      --  expanded earlier into a membership test and is not subject to this\n+      --  spurious self-check either.\n+\n+      if Has_Aspect (Bounds_Type, Aspect_Static_Predicate) then\n          Pred    := First (Static_Predicate (Bounds_Type));\n          Prev_Lo := Uint_Minus_1;\n          Prev_Hi := Uint_Minus_1;"}]}