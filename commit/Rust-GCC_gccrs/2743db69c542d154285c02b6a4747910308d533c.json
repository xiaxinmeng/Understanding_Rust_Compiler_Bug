{"sha": "2743db69c542d154285c02b6a4747910308d533c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc0M2RiNjljNTQyZDE1NDI4NWMwMmI2YTQ3NDc5MTAzMDhkNTMzYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-02-26T23:10:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-02-26T23:10:24Z"}, "message": "re PR ada/43096 (miscompilation of ACATS c37105a at -O2)\n\n\tPR ada/43096\n\t* tree-ssa-alias.c (same_type_for_tbaa): Return -1 if the types have\n\tthe same alias set.\n\nFrom-SVN: r157102", "tree": {"sha": "ec9d98330876d3ba346f39cd43c4a0c4354aa4f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9d98330876d3ba346f39cd43c4a0c4354aa4f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2743db69c542d154285c02b6a4747910308d533c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2743db69c542d154285c02b6a4747910308d533c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2743db69c542d154285c02b6a4747910308d533c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2743db69c542d154285c02b6a4747910308d533c/comments", "author": null, "committer": null, "parents": [{"sha": "4d16c0dc918215ef04402f808d0504b0b52d306d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d16c0dc918215ef04402f808d0504b0b52d306d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d16c0dc918215ef04402f808d0504b0b52d306d"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "d506a499b748f51b958880b57b0de3de26bb1882", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2743db69c542d154285c02b6a4747910308d533c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2743db69c542d154285c02b6a4747910308d533c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2743db69c542d154285c02b6a4747910308d533c", "patch": "@@ -1,3 +1,9 @@\n+2010-02-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/43096\n+\t* tree-ssa-alias.c (same_type_for_tbaa): Return -1 if the types have\n+\tthe same alias set.\n+\n 2010-02-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config.gcc: Set the default arch at least to Prescott for"}, {"sha": "73a16375613ebca702afe0bc660cd971af679b17", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2743db69c542d154285c02b6a4747910308d533c/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2743db69c542d154285c02b6a4747910308d533c/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=2743db69c542d154285c02b6a4747910308d533c", "patch": "@@ -544,13 +544,15 @@ same_type_for_tbaa (tree type1, tree type2)\n       && TREE_CODE (type2) == ARRAY_TYPE)\n     return -1;\n \n-  /* In Ada, an lvalue of unconstrained type can be used to access an object\n-     of one of its constrained subtypes, for example when a function with an\n-     unconstrained parameter passed by reference is called on a constrained\n-     object and inlined.  In this case, the types have the same alias set.  */\n-  if (TYPE_SIZE (type1) && TYPE_SIZE (type2)\n-      && TREE_CONSTANT (TYPE_SIZE (type1)) != TREE_CONSTANT (TYPE_SIZE (type2))\n-      && get_alias_set (type1) == get_alias_set (type2))\n+  /* ??? In Ada, an lvalue of an unconstrained type can be used to access an\n+     object of one of its constrained subtypes, e.g. when a function with an\n+     unconstrained parameter passed by reference is called on an object and\n+     inlined.  But, even in the case of a fixed size, type and subtypes are\n+     not equivalent enough as to share the same TYPE_CANONICAL, since this\n+     would mean that conversions between them are useless, whereas they are\n+     not (e.g. type and subtypes can have different modes).  So, in the end,\n+     they are only guaranteed to have the same alias set.  */\n+  if (get_alias_set (type1) == get_alias_set (type2))\n     return -1;\n \n   /* The types are known to be not equal.  */"}]}