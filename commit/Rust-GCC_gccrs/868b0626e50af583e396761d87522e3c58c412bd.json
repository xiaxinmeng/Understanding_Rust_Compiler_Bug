{"sha": "868b0626e50af583e396761d87522e3c58c412bd", "node_id": "C_kwDOANBUbNoAKDg2OGIwNjI2ZTUwYWY1ODNlMzk2NzYxZDg3NTIyZTNjNThjNDEyYmQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2023-02-03T17:04:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-03T17:04:01Z"}, "message": "Merge #1737\n\n1737: Add  support for feature check. r=CohenArthur a=TuringKi\n\nThis commit implements a very basic feature checking module.\r\n\r\nThe results like this:\r\n\r\n```\r\n\r\n../gcc/testsuite/rust/compile/feature.rs:1:12: error: unknown feature 'AA'\r\n    1 | #![feature(AA)] //{ dg-error \"unknown feature 'AA'\" }\r\n      |            ^\r\n\r\n```\r\n\r\nThis commit is split from pr https://github.com/Rust-GCC/gccrs/pull/1718.\r\n\r\nSigned-off-by: Xiao Ma <mxlol233@outlook.com>\r\n\r\n\r\n\n\nCo-authored-by: mxlol233 <mxlol233@outlook.com>", "tree": {"sha": "a8001b57d052ba5e528583dd93d6e225ff41accb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8001b57d052ba5e528583dd93d6e225ff41accb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/868b0626e50af583e396761d87522e3c58c412bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj3T6BCRBK7hj4Ov3rIwAAbvQIAFbYXQxbed+tT7OlKOvWgk68\nDkuIDRUr6ciXniFE0Nv09o7tzsqGqFj7v58oi7wXneC3/DT2rJVybmxuJolJi5hT\nJn6R8fsMVux3sQtIS0k/a9pJjXK6heThcX9CSpvwrhXTsHgvtzNNyuKtpi9bNKY6\nZJIOOhGIFhOIA0bDQsKbeZskme0viphLKqYqMybfoi04/bCNwCaKugmMwynOBxmY\neFfDOIjR2rY2ertVzkGLhSdBKQjNsFk0ODp1Jh7kZSDjlbwtQWabVxdPbqjmVFgd\nWbMp4hewOH/ZhkHIS58OQzNBusKQB/jmdpCDbXxA8GOUUzgpdvCrfJG3IaI/iFw=\n=16U4\n-----END PGP SIGNATURE-----\n", "payload": "tree a8001b57d052ba5e528583dd93d6e225ff41accb\nparent 278f7616efc85988ee777f7b244ce65f758f0301\nparent c255fb2ca259b3d85ce26d3c0e9230ca9ba2788a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1675443841 +0000\ncommitter GitHub <noreply@github.com> 1675443841 +0000\n\nMerge #1737\n\n1737: Add  support for feature check. r=CohenArthur a=TuringKi\n\nThis commit implements a very basic feature checking module.\r\n\r\nThe results like this:\r\n\r\n```\r\n\r\n../gcc/testsuite/rust/compile/feature.rs:1:12: error: unknown feature 'AA'\r\n    1 | #![feature(AA)] //{ dg-error \"unknown feature 'AA'\" }\r\n      |            ^\r\n\r\n```\r\n\r\nThis commit is split from pr https://github.com/Rust-GCC/gccrs/pull/1718.\r\n\r\nSigned-off-by: Xiao Ma <mxlol233@outlook.com>\r\n\r\n\r\n\n\nCo-authored-by: mxlol233 <mxlol233@outlook.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868b0626e50af583e396761d87522e3c58c412bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868b0626e50af583e396761d87522e3c58c412bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868b0626e50af583e396761d87522e3c58c412bd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "278f7616efc85988ee777f7b244ce65f758f0301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278f7616efc85988ee777f7b244ce65f758f0301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/278f7616efc85988ee777f7b244ce65f758f0301"}, {"sha": "c255fb2ca259b3d85ce26d3c0e9230ca9ba2788a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c255fb2ca259b3d85ce26d3c0e9230ca9ba2788a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c255fb2ca259b3d85ce26d3c0e9230ca9ba2788a"}], "stats": {"total": 406, "additions": 406, "deletions": 0}, "files": [{"sha": "1aebf791dbbead53bde9349bb3318e8ff78ea07c", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=868b0626e50af583e396761d87522e3c58c412bd", "patch": "@@ -161,6 +161,8 @@ GRS_OBJS = \\\n     rust/rust-import-archive.o \\\n     rust/rust-extern-crate.o \\\n     rust/rust-builtins.o \\\n+    rust/rust-feature.o \\\n+    rust/rust-feature-gate.o \\\n     $(END)\n # removed object files from here\n "}, {"sha": "cd26f8a17f516b2980903d51abdaeb7319d3d9da", "filename": "gcc/rust/checks/errors/rust-feature-gate.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.cc?ref=868b0626e50af583e396761d87522e3c58c412bd", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-feature-gate.h\"\n+#include \"rust-feature.h\"\n+\n+namespace Rust {\n+\n+void\n+FeatureGate::check (AST::Crate &crate)\n+{\n+  std::vector<Feature> valid_features;\n+  for (const auto &attr : crate.inner_attrs)\n+    {\n+      if (attr.get_path ().as_string () == \"feature\")\n+\t{\n+\t  const auto &attr_input = attr.get_attr_input ();\n+\t  auto type = attr_input.get_attr_input_type ();\n+\t  if (type == AST::AttrInput::AttrInputType::TOKEN_TREE)\n+\t    {\n+\t      const auto &option = static_cast<const AST::DelimTokenTree &> (\n+\t\tattr.get_attr_input ());\n+\t      std::unique_ptr<AST::AttrInputMetaItemContainer> meta_item (\n+\t\toption.parse_to_meta_item ());\n+\t      for (const auto &item : meta_item->get_items ())\n+\t\t{\n+\t\t  const auto &name = item->as_string ();\n+\t\t  auto tname = Feature::as_name (name);\n+\t\t  if (!tname.is_none ())\n+\t\t    valid_features.push_back (Feature::create (tname.get ()));\n+\t\t  else\n+\t\t    rust_error_at (item->get_locus (), \"unknown feature '%s'\",\n+\t\t\t\t   name.c_str ());\n+\t\t}\n+\t    }\n+\t}\n+    }\n+  valid_features.shrink_to_fit ();\n+\n+  // TODO (mxlol233): add the real feature gate stuff.\n+  auto &items = crate.items;\n+  for (auto it = items.begin (); it != items.end (); it++)\n+    {\n+      auto &item = *it;\n+      item->accept_vis (*this);\n+    }\n+}\n+} // namespace Rust\n\\ No newline at end of file"}, {"sha": "080c15ccd234a9846959f947ba6c34ee440567c9", "filename": "gcc/rust/checks/errors/rust-feature-gate.h", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h?ref=868b0626e50af583e396761d87522e3c58c412bd", "patch": "@@ -0,0 +1,191 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_FEATURE_GATE_H\n+#define RUST_FEATURE_GATE_H\n+\n+#include \"rust-ast-visitor.h\"\n+#include \"rust-ast-full.h\"\n+\n+namespace Rust {\n+\n+struct Feature;\n+\n+class FeatureGate : public AST::ASTVisitor\n+{\n+public:\n+  FeatureGate () {}\n+\n+  void check (AST::Crate &crate);\n+\n+  void visit (AST::Token &tok) override {}\n+  void visit (AST::DelimTokenTree &delim_tok_tree) override {}\n+  void visit (AST::AttrInputMetaItemContainer &input) override {}\n+  void visit (AST::IdentifierExpr &ident_expr) override {}\n+  void visit (AST::Lifetime &lifetime) override {}\n+  void visit (AST::LifetimeParam &lifetime_param) override {}\n+  void visit (AST::ConstGenericParam &const_param) override {}\n+  void visit (AST::PathInExpression &path) override {}\n+  void visit (AST::TypePathSegment &segment) override {}\n+  void visit (AST::TypePathSegmentGeneric &segment) override {}\n+  void visit (AST::TypePathSegmentFunction &segment) override {}\n+  void visit (AST::TypePath &path) override {}\n+  void visit (AST::QualifiedPathInExpression &path) override {}\n+  void visit (AST::QualifiedPathInType &path) override {}\n+  void visit (AST::LiteralExpr &expr) override {}\n+  void visit (AST::AttrInputLiteral &attr_input) override {}\n+  void visit (AST::MetaItemLitExpr &meta_item) override {}\n+  void visit (AST::MetaItemPathLit &meta_item) override {}\n+  void visit (AST::BorrowExpr &expr) override {}\n+  void visit (AST::DereferenceExpr &expr) override {}\n+  void visit (AST::ErrorPropagationExpr &expr) override {}\n+  void visit (AST::NegationExpr &expr) override {}\n+  void visit (AST::ArithmeticOrLogicalExpr &expr) override {}\n+  void visit (AST::ComparisonExpr &expr) override {}\n+  void visit (AST::LazyBooleanExpr &expr) override {}\n+  void visit (AST::TypeCastExpr &expr) override {}\n+  void visit (AST::AssignmentExpr &expr) override {}\n+  void visit (AST::CompoundAssignmentExpr &expr) override {}\n+  void visit (AST::GroupedExpr &expr) override {}\n+  void visit (AST::ArrayElemsValues &elems) override {}\n+  void visit (AST::ArrayElemsCopied &elems) override {}\n+  void visit (AST::ArrayExpr &expr) override {}\n+  void visit (AST::ArrayIndexExpr &expr) override {}\n+  void visit (AST::TupleExpr &expr) override {}\n+  void visit (AST::TupleIndexExpr &expr) override {}\n+  void visit (AST::StructExprStruct &expr) override {}\n+  void visit (AST::StructExprFieldIdentifier &field) override {}\n+  void visit (AST::StructExprFieldIdentifierValue &field) override {}\n+  void visit (AST::StructExprFieldIndexValue &field) override {}\n+  void visit (AST::StructExprStructFields &expr) override {}\n+  void visit (AST::StructExprStructBase &expr) override {}\n+  void visit (AST::CallExpr &expr) override {}\n+  void visit (AST::MethodCallExpr &expr) override {}\n+  void visit (AST::FieldAccessExpr &expr) override {}\n+  void visit (AST::ClosureExprInner &expr) override {}\n+  void visit (AST::BlockExpr &expr) override {}\n+  void visit (AST::ClosureExprInnerTyped &expr) override {}\n+  void visit (AST::ContinueExpr &expr) override {}\n+  void visit (AST::BreakExpr &expr) override {}\n+  void visit (AST::RangeFromToExpr &expr) override {}\n+  void visit (AST::RangeFromExpr &expr) override {}\n+  void visit (AST::RangeToExpr &expr) override {}\n+  void visit (AST::RangeFullExpr &expr) override {}\n+  void visit (AST::RangeFromToInclExpr &expr) override {}\n+  void visit (AST::RangeToInclExpr &expr) override {}\n+  void visit (AST::ReturnExpr &expr) override {}\n+  void visit (AST::UnsafeBlockExpr &expr) override {}\n+  void visit (AST::LoopExpr &expr) override {}\n+  void visit (AST::WhileLoopExpr &expr) override {}\n+  void visit (AST::WhileLetLoopExpr &expr) override {}\n+  void visit (AST::ForLoopExpr &expr) override {}\n+  void visit (AST::IfExpr &expr) override {}\n+  void visit (AST::IfExprConseqElse &expr) override {}\n+  void visit (AST::IfExprConseqIf &expr) override {}\n+  void visit (AST::IfExprConseqIfLet &expr) override {}\n+  void visit (AST::IfLetExpr &expr) override {}\n+  void visit (AST::IfLetExprConseqElse &expr) override {}\n+  void visit (AST::IfLetExprConseqIf &expr) override {}\n+  void visit (AST::IfLetExprConseqIfLet &expr) override {}\n+  void visit (AST::MatchExpr &expr) override {}\n+  void visit (AST::AwaitExpr &expr) override {}\n+  void visit (AST::AsyncBlockExpr &expr) override {}\n+  void visit (AST::TypeParam &param) override {}\n+  void visit (AST::LifetimeWhereClauseItem &item) override {}\n+  void visit (AST::TypeBoundWhereClauseItem &item) override {}\n+  void visit (AST::Method &method) override {}\n+  void visit (AST::Module &module) override {}\n+  void visit (AST::ExternCrate &crate) override {}\n+  void visit (AST::UseTreeGlob &use_tree) override {}\n+  void visit (AST::UseTreeList &use_tree) override {}\n+  void visit (AST::UseTreeRebind &use_tree) override {}\n+  void visit (AST::UseDeclaration &use_decl) override {}\n+  void visit (AST::Function &function) override {}\n+  void visit (AST::TypeAlias &type_alias) override {}\n+  void visit (AST::StructStruct &struct_item) override {}\n+  void visit (AST::TupleStruct &tuple_struct) override {}\n+  void visit (AST::EnumItem &item) override {}\n+  void visit (AST::EnumItemTuple &item) override {}\n+  void visit (AST::EnumItemStruct &item) override {}\n+  void visit (AST::EnumItemDiscriminant &item) override {}\n+  void visit (AST::Enum &enum_item) override {}\n+  void visit (AST::Union &union_item) override {}\n+  void visit (AST::ConstantItem &const_item) override {}\n+  void visit (AST::StaticItem &static_item) override {}\n+  void visit (AST::TraitItemFunc &item) override {}\n+  void visit (AST::TraitItemMethod &item) override {}\n+  void visit (AST::TraitItemConst &item) override {}\n+  void visit (AST::TraitItemType &item) override {}\n+  void visit (AST::Trait &trait) override {}\n+  void visit (AST::InherentImpl &impl) override {}\n+  void visit (AST::TraitImpl &impl) override {}\n+  void visit (AST::ExternalStaticItem &item) override {}\n+  void visit (AST::ExternalFunctionItem &item) override {}\n+  void visit (AST::ExternBlock &block) override {}\n+  void visit (AST::MacroMatchFragment &match) override {}\n+  void visit (AST::MacroMatchRepetition &match) override {}\n+  void visit (AST::MacroMatcher &matcher) override {}\n+  void visit (AST::MacroRulesDefinition &rules_def) override {}\n+  void visit (AST::MacroInvocation &macro_invoc) override {}\n+  void visit (AST::MetaItemPath &meta_item) override {}\n+  void visit (AST::MetaItemSeq &meta_item) override {}\n+  void visit (AST::MetaWord &meta_item) override {}\n+  void visit (AST::MetaNameValueStr &meta_item) override {}\n+  void visit (AST::MetaListPaths &meta_item) override {}\n+  void visit (AST::MetaListNameValueStr &meta_item) override {}\n+  void visit (AST::LiteralPattern &pattern) override {}\n+  void visit (AST::IdentifierPattern &pattern) override {}\n+  void visit (AST::WildcardPattern &pattern) override {}\n+  void visit (AST::RangePatternBoundLiteral &bound) override {}\n+  void visit (AST::RangePatternBoundPath &bound) override {}\n+  void visit (AST::RangePatternBoundQualPath &bound) override {}\n+  void visit (AST::RangePattern &pattern) override {}\n+  void visit (AST::ReferencePattern &pattern) override {}\n+  void visit (AST::StructPatternFieldTuplePat &field) override {}\n+  void visit (AST::StructPatternFieldIdentPat &field) override {}\n+  void visit (AST::StructPatternFieldIdent &field) override {}\n+  void visit (AST::StructPattern &pattern) override {}\n+  void visit (AST::TupleStructItemsNoRange &tuple_items) override {}\n+  void visit (AST::TupleStructItemsRange &tuple_items) override {}\n+  void visit (AST::TupleStructPattern &pattern) override {}\n+  void visit (AST::TuplePatternItemsMultiple &tuple_items) override {}\n+  void visit (AST::TuplePatternItemsRanged &tuple_items) override {}\n+  void visit (AST::TuplePattern &pattern) override {}\n+  void visit (AST::GroupedPattern &pattern) override {}\n+  void visit (AST::SlicePattern &pattern) override {}\n+  void visit (AST::EmptyStmt &stmt) override {}\n+  void visit (AST::LetStmt &stmt) override {}\n+  void visit (AST::ExprStmtWithoutBlock &stmt) override {}\n+  void visit (AST::ExprStmtWithBlock &stmt) override {}\n+  void visit (AST::TraitBound &bound) override {}\n+  void visit (AST::ImplTraitType &type) override {}\n+  void visit (AST::TraitObjectType &type) override {}\n+  void visit (AST::ParenthesisedType &type) override {}\n+  void visit (AST::ImplTraitTypeOneBound &type) override {}\n+  void visit (AST::TraitObjectTypeOneBound &type) override {}\n+  void visit (AST::TupleType &type) override {}\n+  void visit (AST::NeverType &type) override {}\n+  void visit (AST::RawPointerType &type) override {}\n+  void visit (AST::ReferenceType &type) override {}\n+  void visit (AST::ArrayType &type) override {}\n+  void visit (AST::SliceType &type) override {}\n+  void visit (AST::InferredType &type) override {}\n+  void visit (AST::BareFunctionType &type) override {}\n+};\n+} // namespace Rust\n+#endif\n\\ No newline at end of file"}, {"sha": "b87b4ca38efaec3f4ae8edf885c31f2cbdc8b877", "filename": "gcc/rust/checks/errors/rust-feature.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature.cc?ref=868b0626e50af583e396761d87522e3c58c412bd", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-feature.h\"\n+#include \"rust-session-manager.h\"\n+\n+namespace Rust {\n+\n+Feature\n+Feature::create (Feature::Name name)\n+{\n+  switch (name)\n+    {\n+    case Feature::Name::ASSOCIATED_TYPE_BOUNDS:\n+      return Feature (Feature::Name::ASSOCIATED_TYPE_BOUNDS,\n+\t\t      Feature::State::ACCEPTED, \"associated_type_bounds\",\n+\t\t      \"1.34.0\", 52662,\n+\t\t      Optional<CompileOptions::Edition>::none (), \"\");\n+    case Feature::Name::INTRINSICS:\n+      return Feature (Feature::Name::INTRINSICS, Feature::State::ACCEPTED,\n+\t\t      \"intrinsics\", \"1.0.0\", 0,\n+\t\t      Optional<CompileOptions::Edition>::none (), \"\");\n+    case Feature::Name::RUSTC_ATTRS:\n+      return Feature (Feature::Name::RUSTC_ATTRS, Feature::State::ACCEPTED,\n+\t\t      \"rustc_attrs\", \"1.0.0\", 0,\n+\t\t      Optional<CompileOptions::Edition>::none (), \"\");\n+    case Feature::Name::DECL_MACRO:\n+      return Feature (Feature::Name::DECL_MACRO, Feature::State::ACCEPTED,\n+\t\t      \"decl_macro\", \"1.0.0\", 0,\n+\t\t      Optional<CompileOptions::Edition>::none (), \"\");\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+const std::map<std::string, Feature::Name> Feature::name_hash_map = {\n+  {\"associated_type_bounds\", Feature::Name::ASSOCIATED_TYPE_BOUNDS},\n+  {\"intrinsics\", Feature::Name::INTRINSICS},\n+  {\"rustc_attrs\", Feature::Name::RUSTC_ATTRS},\n+  {\"decl_macro\", Feature::Name::DECL_MACRO},\n+};\n+\n+Optional<Feature::Name>\n+Feature::as_name (const std::string &name)\n+{\n+  if (Feature::name_hash_map.count (name))\n+    return Optional<Feature::Name>::some (Feature::name_hash_map.at (name));\n+  return Optional<Feature::Name>::none ();\n+}\n+\n+} // namespace Rust\n\\ No newline at end of file"}, {"sha": "bf93b090af5951e05afa2ce1a56aa7fc506775e5", "filename": "gcc/rust/checks/errors/rust-feature.h", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature.h?ref=868b0626e50af583e396761d87522e3c58c412bd", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_FEATURE_H\n+#define RUST_FEATURE_H\n+\n+#include \"rust-session-manager.h\"\n+#include \"rust-optional.h\"\n+\n+namespace Rust {\n+\n+class Feature\n+{\n+public:\n+  enum class State\n+  {\n+    ACCEPTED,\n+    ACTIVE,\n+    REMOVED,\n+    STABILIZED,\n+  };\n+\n+  enum class Name\n+  {\n+    ASSOCIATED_TYPE_BOUNDS,\n+    INTRINSICS,\n+    RUSTC_ATTRS,\n+    DECL_MACRO,\n+  };\n+\n+  const std::string &as_string () { return m_name_str; }\n+  Name name () { return m_name; }\n+  const std::string &description () { return m_description; }\n+  State state () { return m_state; }\n+\n+  static Optional<Name> as_name (const std::string &name);\n+  static Feature create (Name name);\n+\n+private:\n+  Feature (Name name, State state, const char *name_str,\n+\t   const char *rustc_since, uint64_t issue_number,\n+\t   const Optional<CompileOptions::Edition> &edition,\n+\t   const char *description)\n+    : m_state (state), m_name (name), m_name_str (name_str),\n+      m_rustc_since (rustc_since), issue (issue_number), edition (edition),\n+      m_description (description)\n+  {}\n+\n+  State m_state;\n+  Name m_name;\n+  std::string m_name_str;\n+  std::string m_rustc_since;\n+  uint64_t issue;\n+  Optional<CompileOptions::Edition> edition;\n+  std::string m_description;\n+\n+  static const std::map<std::string, Name> name_hash_map;\n+};\n+\n+} // namespace Rust\n+#endif\n\\ No newline at end of file"}, {"sha": "22d59423220bfc97737977018f86a86dce1557f4", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=868b0626e50af583e396761d87522e3c58c412bd", "patch": "@@ -27,6 +27,7 @@\n #include \"rust-hir-type-check.h\"\n #include \"rust-privacy-check.h\"\n #include \"rust-const-checker.h\"\n+#include \"rust-feature-gate.h\"\n #include \"rust-tycheck-dump.h\"\n #include \"rust-compile.h\"\n #include \"rust-cfg-parser.h\"\n@@ -564,6 +565,9 @@ Session::compile_crate (const char *filename)\n       rust_debug (\"END POST-EXPANSION AST DUMP\");\n     }\n \n+  // feature gating\n+  FeatureGate ().check (parsed_crate);\n+\n   if (last_step == CompileOptions::CompileStep::NameResolution)\n     return;\n "}, {"sha": "305d112b7c41a0e212d98d83f06d47ad62f569f0", "filename": "gcc/testsuite/rust/compile/feature.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffeature.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868b0626e50af583e396761d87522e3c58c412bd/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffeature.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffeature.rs?ref=868b0626e50af583e396761d87522e3c58c412bd", "patch": "@@ -0,0 +1,4 @@\n+#![feature(AA)] //{ dg-error \"unknown feature 'AA'\" }\n+                   \n+\n+fn main(){}\n\\ No newline at end of file"}]}