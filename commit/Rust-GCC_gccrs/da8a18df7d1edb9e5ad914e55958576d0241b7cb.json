{"sha": "da8a18df7d1edb9e5ad914e55958576d0241b7cb", "node_id": "C_kwDOANBUbNoAKGRhOGExOGRmN2QxZWRiOWU1YWQ5MTRlNTU5NTg1NzZkMDI0MWI3Y2I", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-31T12:17:27Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-31T12:17:27Z"}, "message": "c++: document comp_template_args's default args\n\nIn passing, use bool for its return type.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (comp_template_args): Change return type to bool.\n\t* pt.cc (comp_template_args): Document default arguments.\n\tChange return type to bool and adjust returns accordingly.", "tree": {"sha": "2c6e50ca1bd5b0fc49d2cfd3bb3f3477745d88c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c6e50ca1bd5b0fc49d2cfd3bb3f3477745d88c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da8a18df7d1edb9e5ad914e55958576d0241b7cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8a18df7d1edb9e5ad914e55958576d0241b7cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da8a18df7d1edb9e5ad914e55958576d0241b7cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8a18df7d1edb9e5ad914e55958576d0241b7cb/comments", "author": null, "committer": null, "parents": [{"sha": "b5cf960e29fe59772b8bf5fca068e7139651255b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5cf960e29fe59772b8bf5fca068e7139651255b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5cf960e29fe59772b8bf5fca068e7139651255b"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "da8898155e0fad071484a0072b0583a2f11c2358", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8a18df7d1edb9e5ad914e55958576d0241b7cb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8a18df7d1edb9e5ad914e55958576d0241b7cb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=da8a18df7d1edb9e5ad914e55958576d0241b7cb", "patch": "@@ -7327,7 +7327,7 @@ extern tree get_template_info\t\t\t(const_tree);\n extern int template_class_depth\t\t\t(tree);\n extern int is_specialization_of\t\t\t(tree, tree);\n extern bool is_specialization_of_friend\t\t(tree, tree);\n-extern int comp_template_args\t\t\t(tree, tree, tree * = NULL,\n+extern bool comp_template_args\t\t\t(tree, tree, tree * = NULL,\n \t\t\t\t\t\t tree * = NULL, bool = false);\n extern int template_args_equal                  (tree, tree, bool = false);\n extern tree maybe_process_partial_specialization (tree);"}, {"sha": "1568cf9ff7119096fbb90a9943eea0c3d8e56140", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8a18df7d1edb9e5ad914e55958576d0241b7cb/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8a18df7d1edb9e5ad914e55958576d0241b7cb/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=da8a18df7d1edb9e5ad914e55958576d0241b7cb", "patch": "@@ -9367,27 +9367,25 @@ template_args_equal (tree ot, tree nt, bool partial_order /* = false */)\n     }\n }\n \n-/* Returns 1 iff the OLDARGS and NEWARGS are in fact identical sets of\n-   template arguments.  Returns 0 otherwise, and updates OLDARG_PTR and\n+/* Returns true iff the OLDARGS and NEWARGS are in fact identical sets of\n+   template arguments.  Returns false otherwise, and updates OLDARG_PTR and\n    NEWARG_PTR with the offending arguments if they are non-NULL.  */\n \n-int\n+bool\n comp_template_args (tree oldargs, tree newargs,\n-\t\t    tree *oldarg_ptr, tree *newarg_ptr,\n-\t\t    bool partial_order)\n+\t\t    tree *oldarg_ptr /* = NULL */, tree *newarg_ptr /* = NULL */,\n+\t\t    bool partial_order /* = false */)\n {\n-  int i;\n-\n   if (oldargs == newargs)\n-    return 1;\n+    return true;\n \n   if (!oldargs || !newargs)\n-    return 0;\n+    return false;\n \n   if (TREE_VEC_LENGTH (oldargs) != TREE_VEC_LENGTH (newargs))\n-    return 0;\n+    return false;\n \n-  for (i = 0; i < TREE_VEC_LENGTH (oldargs); ++i)\n+  for (int i = 0; i < TREE_VEC_LENGTH (oldargs); ++i)\n     {\n       tree nt = TREE_VEC_ELT (newargs, i);\n       tree ot = TREE_VEC_ELT (oldargs, i);\n@@ -9398,10 +9396,10 @@ comp_template_args (tree oldargs, tree newargs,\n \t    *oldarg_ptr = ot;\n \t  if (newarg_ptr != NULL)\n \t    *newarg_ptr = nt;\n-\t  return 0;\n+\t  return false;\n \t}\n     }\n-  return 1;\n+  return true;\n }\n \n inline bool"}]}