{"sha": "91ca22c7b9141364aa4bebc61e46ae1518b793f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFjYTIyYzdiOTE0MTM2NGFhNGJlYmM2MWU0NmFlMTUxOGI3OTNmMw==", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-04-26T19:15:19Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-30T09:39:39Z"}, "message": "Basic support for lifetime parameter\n\nThis change allow for basic lifetime usage. Only syntax is checked, nothing\nmore. Goal is to be able to compile known-to-be-valid code.\n\nAddresses #359", "tree": {"sha": "1385701e6f3d93b26ed330819a1269df766a5f33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1385701e6f3d93b26ed330819a1269df766a5f33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91ca22c7b9141364aa4bebc61e46ae1518b793f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ca22c7b9141364aa4bebc61e46ae1518b793f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ca22c7b9141364aa4bebc61e46ae1518b793f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ca22c7b9141364aa4bebc61e46ae1518b793f3/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffa45bed5e9211c7d2ee242f63fd6c3118248177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa45bed5e9211c7d2ee242f63fd6c3118248177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffa45bed5e9211c7d2ee242f63fd6c3118248177"}], "stats": {"total": 219, "additions": 176, "deletions": 43}, "files": [{"sha": "b6d340118405db95016772dbce631ed03c519185", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=91ca22c7b9141364aa4bebc61e46ae1518b793f3", "patch": "@@ -1232,6 +1232,8 @@ class LifetimeParam : public GenericParam\n   Location locus;\n \n public:\n+  Lifetime get_lifetime () const { return lifetime; }\n+\n   // Returns whether the lifetime param has any lifetime bounds.\n   bool has_lifetime_bounds () const { return !lifetime_bounds.empty (); }\n "}, {"sha": "e6473371826fc9ee3f680d8da749f33a0c92f26a", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=91ca22c7b9141364aa4bebc61e46ae1518b793f3", "patch": "@@ -265,6 +265,34 @@ class ASTLowerGenericParam : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n+  void visit (AST::LifetimeParam &param) override\n+  {\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, param.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+    HIR::Lifetime::LifetimeType ltt;\n+\n+    switch (param.get_lifetime ().get_lifetime_type ())\n+      {\n+      case AST::Lifetime::LifetimeType::NAMED:\n+\tltt = HIR::Lifetime::LifetimeType::NAMED;\n+\tbreak;\n+      case AST::Lifetime::LifetimeType::STATIC:\n+\tltt = HIR::Lifetime::LifetimeType::STATIC;\n+\tbreak;\n+      case AST::Lifetime::LifetimeType::WILDCARD:\n+\tltt = HIR::Lifetime::LifetimeType::WILDCARD;\n+\tbreak;\n+      }\n+\n+    HIR::Lifetime lt (mapping, ltt, param.get_lifetime ().get_lifetime_name (),\n+\t\t      param.get_lifetime ().get_locus ());\n+\n+    translated = new HIR::LifetimeParam (mapping, lt, param.get_locus (),\n+\t\t\t\t\t std::vector<Lifetime> ());\n+  }\n+\n   void visit (AST::TypeParam &param) override\n   {\n     HIR::Attribute outer_attr = HIR::Attribute::create_empty ();"}, {"sha": "244ff3d4619ca3ecd85d3e82416888f9f51ba55e", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=91ca22c7b9141364aa4bebc61e46ae1518b793f3", "patch": "@@ -1106,6 +1106,15 @@ class GenericParam\n public:\n   virtual ~GenericParam () {}\n \n+  enum GenericKind\n+  {\n+    TYPE,\n+    LIFETIME,\n+\n+    // CONST generic parameter not yet handled\n+    // CONST,\n+  };\n+\n   // Unique pointer custom clone function\n   std::unique_ptr<GenericParam> clone_generic_param () const\n   {\n@@ -1120,13 +1129,19 @@ class GenericParam\n \n   Analysis::NodeMapping get_mappings () const { return mappings; }\n \n+  enum GenericKind get_kind () const { return kind; }\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual GenericParam *clone_generic_param_impl () const = 0;\n \n-  GenericParam (Analysis::NodeMapping mapping) : mappings (mapping) {}\n-\n   Analysis::NodeMapping mappings;\n+\n+  enum GenericKind kind;\n+\n+  GenericParam (Analysis::NodeMapping mapping, enum GenericKind kind = TYPE)\n+    : mappings (mapping), kind (kind)\n+  {}\n };\n \n // A lifetime generic parameter (as opposed to a type generic parameter)\n@@ -1145,6 +1160,8 @@ class LifetimeParam : public GenericParam\n   Location locus;\n \n public:\n+  Lifetime get_lifetime () { return lifetime; }\n+\n   // Returns whether the lifetime param has any lifetime bounds.\n   bool has_lifetime_bounds () const { return !lifetime_bounds.empty (); }\n \n@@ -1160,7 +1177,8 @@ class LifetimeParam : public GenericParam\n \t\t std::vector<Lifetime> lifetime_bounds\n \t\t = std::vector<Lifetime> (),\n \t\t Attribute outer_attr = Attribute::create_empty ())\n-    : GenericParam (mappings), lifetime (std::move (lifetime)),\n+    : GenericParam (mappings, GenericKind::LIFETIME),\n+      lifetime (std::move (lifetime)),\n       lifetime_bounds (std::move (lifetime_bounds)),\n       outer_attr (std::move (outer_attr)), locus (locus)\n   {}\n@@ -1169,9 +1187,9 @@ class LifetimeParam : public GenericParam\n \n   // Copy constructor with clone\n   LifetimeParam (LifetimeParam const &other)\n-    : GenericParam (other.mappings), lifetime (other.lifetime),\n-      lifetime_bounds (other.lifetime_bounds), outer_attr (other.outer_attr),\n-      locus (other.locus)\n+    : GenericParam (other.mappings, GenericKind::LIFETIME),\n+      lifetime (other.lifetime), lifetime_bounds (other.lifetime_bounds),\n+      outer_attr (other.outer_attr), locus (other.locus)\n   {}\n \n   // Overloaded assignment operator to clone attribute"}, {"sha": "d249c436686c6f6341dce5a065c50192301af54c", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=91ca22c7b9141364aa4bebc61e46ae1518b793f3", "patch": "@@ -252,6 +252,12 @@ class ResolveGenericParam : public ResolverBase\n     return resolver.resolved_node;\n   };\n \n+  void visit (AST::LifetimeParam &param) override\n+  {\n+    // For now do not do anything and accept everything.\n+    ok = true;\n+  }\n+\n   void visit (AST::TypeParam &param) override\n   {\n     ok = true;"}, {"sha": "2a3e9f9d512d38cb9ca48a5e18daf616b332e295", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=91ca22c7b9141364aa4bebc61e46ae1518b793f3", "patch": "@@ -59,12 +59,24 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n       {\n \tfor (auto &generic_param : function.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n-\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n \n@@ -111,12 +123,24 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n       {\n \tfor (auto &generic_param : method.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n-\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n \n@@ -180,7 +204,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \n   TyTy::BaseType *self;\n   std::vector<TyTy::SubstitutionParamMapping> substitutions;\n-};\n+}; // namespace Resolver\n \n class TypeCheckImplItem : public TypeCheckBase\n {"}, {"sha": "6be155298c0f9fd0d75e4dafdc36b5aade1e1b6b", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 72, "deletions": 24, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=91ca22c7b9141364aa4bebc61e46ae1518b793f3", "patch": "@@ -55,12 +55,24 @@ class TypeCheckTopLevel : public TypeCheckBase\n       {\n \tfor (auto &generic_param : struct_decl.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n-\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n \n@@ -95,12 +107,24 @@ class TypeCheckTopLevel : public TypeCheckBase\n       {\n \tfor (auto &generic_param : struct_decl.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n-\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n \n@@ -152,12 +176,24 @@ class TypeCheckTopLevel : public TypeCheckBase\n       {\n \tfor (auto &generic_param : function.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n-\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n \n@@ -205,12 +241,24 @@ class TypeCheckTopLevel : public TypeCheckBase\n       {\n \tfor (auto &generic_param : impl_block.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n-\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n "}, {"sha": "151fd827b5e5d1be4380e07c63aeaa0614805134", "filename": "gcc/testsuite/rust.test/compile/lifetime1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Flifetime1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ca22c7b9141364aa4bebc61e46ae1518b793f3/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Flifetime1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Flifetime1.rs?ref=91ca22c7b9141364aa4bebc61e46ae1518b793f3", "patch": "@@ -0,0 +1,7 @@\n+fn foo<'a>(t: &'a str) -> &'a str {\n+    t\n+}\n+\n+fn main() {\n+    foo(\"hello world\");\n+}"}]}