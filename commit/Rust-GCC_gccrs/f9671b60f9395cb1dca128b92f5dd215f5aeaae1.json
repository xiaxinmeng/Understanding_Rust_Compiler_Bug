{"sha": "f9671b60f9395cb1dca128b92f5dd215f5aeaae1", "node_id": "C_kwDOANBUbNoAKGY5NjcxYjYwZjkzOTVjYjFkY2ExMjhiOTJmNWRkMjE1ZjVhZWFhZTE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-07-27T10:06:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-07-27T10:06:22Z"}, "message": "cgraphunit: Don't emit asm thunks for -dx [PR106261]\n\nWhen -dx option is used (didn't know we have it and no idea what is it\nuseful for), we just expand functions to RTL and then omit all further\nRTL passes, so the normal functions aren't actually emitted into assembly,\njust variables.\nThe following testcase ICEs, because we don't emit the methods, but do\nemit thunks pointing to that and those thunks have unwind info and rely on\nat least some real functions to be emitted (which is normally the case,\nthunks are only emitted for locally defined functions) because otherwise\nthere are no CIEs, only FDEs and dwarf2out is upset about it.\n\nThe following patch fixes that by not emitting assembly thunks for -dx\neither.\n\n2022-07-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/106261\n\t* cgraphunit.cc (cgraph_node::assemble_thunks_and_aliases): Don't\n\toutput asm thunks for -dx.\n\n\t* g++.dg/debug/pr106261.C: New test.", "tree": {"sha": "1444d3cf8f664cebbd71d0f9bc155bcf95a4de92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1444d3cf8f664cebbd71d0f9bc155bcf95a4de92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9671b60f9395cb1dca128b92f5dd215f5aeaae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9671b60f9395cb1dca128b92f5dd215f5aeaae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9671b60f9395cb1dca128b92f5dd215f5aeaae1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9671b60f9395cb1dca128b92f5dd215f5aeaae1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc078cf85295ec5d0a63a16afbd045efac0d455e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc078cf85295ec5d0a63a16afbd045efac0d455e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc078cf85295ec5d0a63a16afbd045efac0d455e"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "7b5be0f15391c3e2a8c7579c355b661f95c6457c", "filename": "gcc/cgraphunit.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9671b60f9395cb1dca128b92f5dd215f5aeaae1/gcc%2Fcgraphunit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9671b60f9395cb1dca128b92f5dd215f5aeaae1/gcc%2Fcgraphunit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.cc?ref=f9671b60f9395cb1dca128b92f5dd215f5aeaae1", "patch": "@@ -1753,7 +1753,7 @@ cgraph_node::assemble_thunks_and_aliases (void)\n \tcgraph_node *thunk = e->caller;\n \n \te = e->next_caller;\n-\texpand_thunk (thunk, true, false);\n+\texpand_thunk (thunk, !rtl_dump_and_exit, false);\n \tthunk->assemble_thunks_and_aliases ();\n       }\n     else"}, {"sha": "6dee7e68ff5f2d0fe9916ee2fd5af2e0e20663be", "filename": "gcc/testsuite/g++.dg/debug/pr106261.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9671b60f9395cb1dca128b92f5dd215f5aeaae1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr106261.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9671b60f9395cb1dca128b92f5dd215f5aeaae1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr106261.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr106261.C?ref=f9671b60f9395cb1dca128b92f5dd215f5aeaae1", "patch": "@@ -0,0 +1,36 @@\n+// PR debug/106261\n+// { dg-do compile }\n+// { dg-options \"-dx -fno-dwarf2-cfi-asm\" }\n+\n+struct A\n+{\n+  virtual void foo ();\n+  int a;\n+};\n+class C : virtual public A\n+{\n+};\n+struct B\n+{\n+  A *b;\n+\n+  B (A *x) : b (x) { b->foo (); }\n+};\n+struct E\n+{\n+  virtual ~E ();\n+};\n+class D : public C, E\n+{\n+};\n+struct F : D\n+{\n+  F (int);\n+\n+  static void bar ()\n+  {\n+    F a (0);\n+    B b (&a);\n+  }\n+};\n+void baz () { F::bar (); }"}]}