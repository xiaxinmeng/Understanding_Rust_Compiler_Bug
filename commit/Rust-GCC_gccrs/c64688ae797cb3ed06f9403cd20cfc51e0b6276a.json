{"sha": "c64688ae797cb3ed06f9403cd20cfc51e0b6276a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY0Njg4YWU3OTdjYjNlZDA2Zjk0MDNjZDIwY2ZjNTFlMGI2Mjc2YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-05-15T01:45:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-15T01:45:10Z"}, "message": "configure.in (gcc_cv_as_eh_frame): New test.\n\n        * configure.in (gcc_cv_as_eh_frame): New test.\n        * config.in, configure: Rebuild.\n        * gcc.c (init_spec): Honor USE_AS_TRADITIONAL_FORMAT.\n\nFrom-SVN: r42092", "tree": {"sha": "50bd83db98d2cce1d8acec334cafab9afd6aedf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50bd83db98d2cce1d8acec334cafab9afd6aedf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c64688ae797cb3ed06f9403cd20cfc51e0b6276a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64688ae797cb3ed06f9403cd20cfc51e0b6276a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c64688ae797cb3ed06f9403cd20cfc51e0b6276a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64688ae797cb3ed06f9403cd20cfc51e0b6276a/comments", "author": null, "committer": null, "parents": [{"sha": "e8b073c1bd1c589eb6c92da2db2ce00e932d04d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b073c1bd1c589eb6c92da2db2ce00e932d04d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b073c1bd1c589eb6c92da2db2ce00e932d04d4"}], "stats": {"total": 179, "additions": 171, "deletions": 8}, "files": [{"sha": "50b2de502b826d55e6df32791ef2250adaebe93f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64688ae797cb3ed06f9403cd20cfc51e0b6276a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64688ae797cb3ed06f9403cd20cfc51e0b6276a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c64688ae797cb3ed06f9403cd20cfc51e0b6276a", "patch": "@@ -1,3 +1,9 @@\n+2001-05-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* configure.in (gcc_cv_as_eh_frame): New test.\n+\t* config.in, configure: Rebuild.\n+\t* gcc.c (init_spec): Honor USE_AS_TRADITIONAL_FORMAT.\n+\n 2001-05-14  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* config/ia64/lib1funcs.asm (__divtf3): Fix incorrect bits in"}, {"sha": "50cefde23279925fa54266eeb06fdefee3946a76", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64688ae797cb3ed06f9403cd20cfc51e0b6276a/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64688ae797cb3ed06f9403cd20cfc51e0b6276a/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=c64688ae797cb3ed06f9403cd20cfc51e0b6276a", "patch": "@@ -469,6 +469,9 @@\n /* Define if your assembler supports .uleb128. */\n #undef HAVE_AS_LEB128\n \n+/* Define if your assembler mis-optimizes .eh_frame data. */\n+#undef USE_AS_TRADITIONAL_FORMAT\n+\n /* Define if your assembler supports .register. */\n #undef HAVE_AS_REGISTER_PSEUDO_OP\n "}, {"sha": "84f8abd2ffb98d68b4e0124e165dc4d0724cfbeb", "filename": "gcc/configure", "status": "modified", "additions": 82, "deletions": 8, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64688ae797cb3ed06f9403cd20cfc51e0b6276a/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64688ae797cb3ed06f9403cd20cfc51e0b6276a/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=c64688ae797cb3ed06f9403cd20cfc51e0b6276a", "patch": "@@ -2018,7 +2018,7 @@ EOF\n fi\n \n # Find some useful tools\n-for ac_prog in mawk gawk nawk awk\n+for ac_prog in gawk mawk nawk awk\n do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n@@ -6888,10 +6888,84 @@ EOF\n fi\n echo \"$ac_t\"\"$gcc_cv_as_leb128\" 1>&6\n \n+echo $ac_n \"checking assembler eh_frame optimization\"\"... $ac_c\" 1>&6\n+echo \"configure:6893: checking assembler eh_frame optimization\" >&5\n+gcc_cv_as_eh_frame=no\n+if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n+  if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 12 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n+    gcc_cv_as_eh_frame=\"yes\"\n+  fi\n+elif test x$gcc_cv_as != x; then\n+\t# Check if this is GAS.\n+\tas_ver=`$gcc_cv_as --version 2>/dev/null | head -1`\n+\tif echo \"$as_ver\" | grep GNU > /dev/null; then\n+\t\t# Versions up to and including 2.11.0 may mis-optimize\n+\t\t# .eh_frame data.  Try something.\n+\t\tcat > conftest.s <<EOF\n+\t.text\n+.LFB1:\n+\t.4byte\t0\n+.L1:\n+\t.4byte\t0\n+.LFE1:\n+\t.section\t.eh_frame,\"aw\",@progbits\n+__FRAME_BEGIN__:\n+\t.4byte\t.LECIE1-.LSCIE1\n+.LSCIE1:\n+\t.4byte\t0x0\n+\t.byte\t0x1\n+\t.ascii \"z\\0\"\n+\t.byte\t0x1\n+\t.byte\t0x78\n+\t.byte\t0x1a\n+\t.byte\t0x0\n+\t.byte\t0x4\n+\t.4byte\t1\n+\t.p2align 1\n+.LECIE1:\n+.LSFDE1:\n+\t.4byte\t.LEFDE1-.LASFDE1\n+.LASFDE1:\n+\t.4byte\t.LASFDE1-__FRAME_BEGIN__\n+\t.4byte\t.LFB1\n+\t.4byte\t.LFE1-.LFB1\n+\t.byte\t0x4\n+\t.4byte\t.LFE1-.LFB1\n+\t.byte\t0x4\n+\t.4byte\t.L1-.LFB1\n+.LEFDE1:\n+EOF\n+\t\tcat > conftest.exp <<EOF\n+ 0000 10000000 00000000 017a0001 781a0004  .........z..x...\n+ 0010 01000000 12000000 18000000 00000000  ................\n+ 0020 08000000 04080000 0044               .........D      \n+EOF\n+\t\t# If the assembler didn't choke, and we can objdump,\n+\t\t# and we got the correct data, then succeed.\n+\t\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t\t   && objdump -s -j .eh_frame conftest.o 2>/dev/null \\\n+\t\t      | tail -3 > conftest.got \\\n+\t\t   && cmp conftest.exp conftest.got > /dev/null 2>&1\n+\t\tthen\n+\t\t\tgcc_cv_as_eh_frame=\"yes\"\n+\t\telse\n+\t\t\tgcc_cv_as_eh_frame=\"bad\"\n+\t\t\tif $gcc_cv_as -o conftest.o --traditional-format /dev/null; then\n+\t\t\t\tcat >> confdefs.h <<\\EOF\n+#define USE_AS_TRADITIONAL_FORMAT 1\n+EOF\n+\n+\t\t\tfi\n+\t\tfi\n+\tfi\n+\trm -f conftest.*\n+fi\n+echo \"$ac_t\"\"$gcc_cv_as_eh_frame\" 1>&6\n+\n case \"$target\" in \n   sparc*-*-*)\n     echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6\n-echo \"configure:6895: checking assembler .register pseudo-op support\" >&5\n+echo \"configure:6969: checking assembler .register pseudo-op support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_register_pseudo_op'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6919,7 +6993,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler supports -relax\"\"... $ac_c\" 1>&6\n-echo \"configure:6923: checking assembler supports -relax\" >&5\n+echo \"configure:6997: checking assembler supports -relax\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_relax_opt'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6949,7 +7023,7 @@ EOF\n     case \"$tm_file\" in\n     *64*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n-echo \"configure:6953: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n+echo \"configure:7027: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6994,7 +7068,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:6998: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:7072: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7033,7 +7107,7 @@ EOF\n \n   i[34567]86-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:7037: checking assembler instructions\" >&5\n+echo \"configure:7111: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -7062,7 +7136,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:7066: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:7140: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -7247,7 +7321,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:7251: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:7325: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "313a3f504f12dbab8e21d73595ee4d8235d773a4", "filename": "gcc/configure.in", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64688ae797cb3ed06f9403cd20cfc51e0b6276a/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64688ae797cb3ed06f9403cd20cfc51e0b6276a/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=c64688ae797cb3ed06f9403cd20cfc51e0b6276a", "patch": "@@ -1410,6 +1410,77 @@ if test x\"$gcc_cv_as_leb128\" = xyes; then\n fi\n AC_MSG_RESULT($gcc_cv_as_leb128)\n \n+AC_MSG_CHECKING(assembler eh_frame optimization)\n+gcc_cv_as_eh_frame=no\n+if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n+  if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 12 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n+    gcc_cv_as_eh_frame=\"yes\"\n+  fi\n+elif test x$gcc_cv_as != x; then\n+\t# Check if this is GAS.\n+\tas_ver=`$gcc_cv_as --version 2>/dev/null | head -1`\n+\tif echo \"$as_ver\" | grep GNU > /dev/null; then\n+\t\t# Versions up to and including 2.11.0 may mis-optimize\n+\t\t# .eh_frame data.  Try something.\n+\t\tcat > conftest.s <<EOF\n+\t.text\n+.LFB1:\n+\t.4byte\t0\n+.L1:\n+\t.4byte\t0\n+.LFE1:\n+\t.section\t.eh_frame,\"aw\",@progbits\n+__FRAME_BEGIN__:\n+\t.4byte\t.LECIE1-.LSCIE1\n+.LSCIE1:\n+\t.4byte\t0x0\n+\t.byte\t0x1\n+\t.ascii \"z\\0\"\n+\t.byte\t0x1\n+\t.byte\t0x78\n+\t.byte\t0x1a\n+\t.byte\t0x0\n+\t.byte\t0x4\n+\t.4byte\t1\n+\t.p2align 1\n+.LECIE1:\n+.LSFDE1:\n+\t.4byte\t.LEFDE1-.LASFDE1\n+.LASFDE1:\n+\t.4byte\t.LASFDE1-__FRAME_BEGIN__\n+\t.4byte\t.LFB1\n+\t.4byte\t.LFE1-.LFB1\n+\t.byte\t0x4\n+\t.4byte\t.LFE1-.LFB1\n+\t.byte\t0x4\n+\t.4byte\t.L1-.LFB1\n+.LEFDE1:\n+EOF\n+\t\tcat > conftest.exp <<EOF\n+ 0000 10000000 00000000 017a0001 781a0004  .........z..x...\n+ 0010 01000000 12000000 18000000 00000000  ................\n+ 0020 08000000 04080000 0044               .........D      \n+EOF\n+\t\t# If the assembler didn't choke, and we can objdump,\n+\t\t# and we got the correct data, then succeed.\n+\t\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t\t   && objdump -s -j .eh_frame conftest.o 2>/dev/null \\\n+\t\t      | tail -3 > conftest.got \\\n+\t\t   && cmp conftest.exp conftest.got > /dev/null 2>&1\n+\t\tthen\n+\t\t\tgcc_cv_as_eh_frame=\"yes\"\n+\t\telse\n+\t\t\tgcc_cv_as_eh_frame=\"bad\"\n+\t\t\tif $gcc_cv_as -o conftest.o --traditional-format /dev/null; then\n+\t\t\t\tAC_DEFINE(USE_AS_TRADITIONAL_FORMAT, 1,\n+\t[Define if your assembler mis-optimizes .eh_frame data.])\n+\t\t\tfi\n+\t\tfi\n+\tfi\n+\trm -f conftest.*\n+fi\n+AC_MSG_RESULT($gcc_cv_as_eh_frame)\n+\n case \"$target\" in \n   sparc*-*-*)\n     AC_CACHE_CHECK([assembler .register pseudo-op support],"}, {"sha": "d92f56a4593cceddf5dc9d35c3b6dea29d20c110", "filename": "gcc/gcc.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64688ae797cb3ed06f9403cd20cfc51e0b6276a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64688ae797cb3ed06f9403cd20cfc51e0b6276a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c64688ae797cb3ed06f9403cd20cfc51e0b6276a", "patch": "@@ -1454,6 +1454,15 @@ init_spec ()\n     libgcc_spec = obstack_finish (&obstack);\n   }\n #endif\n+#ifdef USE_AS_TRADITIONAL_FORMAT\n+  /* Prepend \"--traditional-format\" to whatever asm_spec we had before.  */\n+  {\n+    static char tf[] = \"--traditional-format \";\n+    obstack_grow (&obstack, tf, sizeof(tf) - 1);\n+    obstack_grow0 (&obstack, asm_spec, strlen (asm_spec));\n+    asm_spec = obstack_finish (&obstack);\n+  }\n+#endif\n \n   specs = sl;\n }"}]}