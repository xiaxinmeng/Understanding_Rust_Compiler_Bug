{"sha": "68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhiZmI5NGU3ZWNlNmJhZDRkNmMxMDIzMWIzZDhjZDk0ZDJlNzMxOQ==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2006-05-20T21:33:07Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2006-05-20T21:33:07Z"}, "message": "configure.ac: Add the POSIX thread libs to the HP-UX PA configuration.\n\n2006-05-20  Andreas Tobler  <a.tobler@schweiz.ch>\n\t    John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n\n\t* configure.ac: Add the POSIX thread libs to the HP-UX PA\n\tconfiguration. Add signal specification for HP-UX PA.\n\t* configure: Rebuilt.\n\t* configure.host: Add defaults for the HP-UX PA architecture.\n\tAdd descriptor files for HP-UX PA 32-bit and 64-bit.\n\t* include/hppa-signal.h: New file.\n\t* include/posix.h: Add shared library suffix for HP-UX.\n\t* sysdep/pa/descriptor-pa32-hpux.h: New file.\n\t* sysdep/pa/descriptor-pa64-hpux.h: Likewise.\n\nCo-Authored-By: John David Anglin <dave.anglin@nrc-cnrc.gc.ca>\n\nFrom-SVN: r113937", "tree": {"sha": "e6125a2ca63cd08037fda672d2a0a2a74790314b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6125a2ca63cd08037fda672d2a0a2a74790314b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/comments", "author": null, "committer": null, "parents": [{"sha": "08cb8af18ad619d73016dc052ca73410dc202038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cb8af18ad619d73016dc052ca73410dc202038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08cb8af18ad619d73016dc052ca73410dc202038"}], "stats": {"total": 205, "additions": 202, "deletions": 3}, "files": [{"sha": "f55b902736cf262033e629959e98c9c2ec5140d9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "patch": "@@ -1,3 +1,16 @@\n+2006-05-20  Andreas Tobler  <a.tobler@schweiz.ch>\n+\t    John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* configure.ac: Add the POSIX thread libs to the HP-UX PA\n+\tconfiguration. Add signal specification for HP-UX PA.\n+\t* configure: Rebuilt.\n+\t* configure.host: Add defaults for the HP-UX PA architecture.\n+\tAdd descriptor files for HP-UX PA 32-bit and 64-bit.\n+\t* include/hppa-signal.h: New file.\n+\t* include/posix.h: Add shared library suffix for HP-UX.\n+\t* sysdep/pa/descriptor-pa32-hpux.h: New file.\n+\t* sysdep/pa/descriptor-pa64-hpux.h: Likewise.\n+\n 2006-05-19  Ranjit Mathew  <rmathew@gcc.gnu.org>\n \n \t* ChangeLog: Correct incorrect GNU Classpath version in the"}, {"sha": "9f4e8a7c1423543597e4bd214da0676aa390d192", "filename": "libjava/configure", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "patch": "@@ -9215,7 +9215,7 @@ case \"$THREADS\" in\n \tTHREADLDFLAGS=-pthread\n \tTHREADSPEC=-lpthread\n \t;;\n-     alpha*-dec-osf*)\n+     alpha*-dec-osf* | hppa*-hp-hpux*)\n \tTHREADCXXFLAGS=-pthread\n \t# boehm-gc needs some functions from librt, so link that too.\n \tTHREADLIBS='-lpthread -lrt'\n@@ -16470,6 +16470,9 @@ case \"${host}\" in\n  hppa*-*-linux*)\n     SIGNAL_HANDLER=include/pa-signal.h\n     ;;\n+ hppa*-hp-hpux*)\n+    SIGNAL_HANDLER=include/hppa-signal.h\n+    ;;\n  ia64-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n     ;;"}, {"sha": "6b9797912e2fcca49dc6b67d0302d9af3428b495", "filename": "libjava/configure.ac", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "patch": "@@ -805,7 +805,7 @@ case \"$THREADS\" in\n \tTHREADLDFLAGS=-pthread\n \tTHREADSPEC=-lpthread\n \t;;\n-     alpha*-dec-osf*)\n+     alpha*-dec-osf* | hppa*-hp-hpux*)\n \tTHREADCXXFLAGS=-pthread\n \t# boehm-gc needs some functions from librt, so link that too.\n \tTHREADLIBS='-lpthread -lrt'\n@@ -1371,6 +1371,9 @@ case \"${host}\" in\n  hppa*-*-linux*)\n     SIGNAL_HANDLER=include/pa-signal.h\n     ;;\n+ hppa*-hp-hpux*)\n+    SIGNAL_HANDLER=include/hppa-signal.h\n+    ;;\n  ia64-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n     ;;"}, {"sha": "c27f54cc7b28155895303003ec7c30f4b6d028df", "filename": "libjava/configure.host", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "patch": "@@ -127,7 +127,7 @@ case \"${host}\" in\n \tenable_hash_synchronization_default=yes\n \tIEEESPEC=-mieee\n \t;;\n-  hppa-*)\n+  hppa*-*)\n \tsysdeps_dir=pa\n \tlibgcj_interpreter=yes\n \tenable_hash_synchronization_default=yes\n@@ -273,6 +273,11 @@ EOF\n \tenable_hash_synchronization_default=no\n \tslow_pthread_self=\n \t;;\n+  hppa*-hp-hpux11.*)\n+\tslow_pthread_self=no\n+\tcan_unwind_signal=yes\n+\tDIVIDESPEC=-fuse-divide-subroutine\n+\t;;\n esac\n \n case \"${host}\" in\n@@ -288,6 +293,14 @@ case \"${host}\" in\n \tdescriptor_h=sysdep/descriptor-y.h\n \t;;\n \n+  hppa*64*-*-hpux*)\n+\tdescriptor_h=sysdep/pa/descriptor-pa64-hpux.h\n+\t;;\n+\n+  hppa*-*-hpux*)\n+\tdescriptor_h=sysdep/pa/descriptor-pa32-hpux.h\n+\t;;\n+\n   hppa*-*)\n \tdescriptor_h=sysdep/pa/descriptor.h\n \t;;"}, {"sha": "ac4cac5a5bbefc375871c8ea8efbc364a469c584", "filename": "libjava/include/hppa-signal.h", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Finclude%2Fhppa-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Finclude%2Fhppa-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fhppa-signal.h?ref=68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "patch": "@@ -0,0 +1,68 @@\n+/* hppa-signal.h - Catch runtime signals and turn them into exceptions,\n+   on a HP-UX 11 PA system.  */\n+\n+/* Copyright (C) 2006  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+/* This file is really more of a specification.  The rest of the system\n+   should be arranged so that this Just Works.  */\n+\n+#ifndef JAVA_SIGNAL_H\n+# define JAVA_SIGNAL_H 1\n+\n+#include <sys/types.h>\n+#include <signal.h>\n+#include <sys/syscall.h>\n+#include <unistd.h>\n+\n+# define HANDLE_SEGV 1\n+# undef HANDLE_FPE\n+\n+#define SIGNAL_HANDLER(_name)\t\t\t\t\t\t\\\n+  static void _name (int _dummy __attribute__ ((unused)),\t\t\\\n+\t\t     siginfo_t *_info __attribute__ ((__unused__)),\t\\\n+\t\t     void *arg __attribute__ ((__unused__)))\n+\n+#define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  ucontext_t *_context = (ucontext_t *) arg;\t\t\t\t\\\n+  (void)_dummy;\t\t\t\t\t\t\t\t\\\n+  (void)_info;\t\t\t\t\t\t\t\t\\\n+  mcontext_t *mc = &(_context->uc_mcontext);\t\t\t\t\\\n+  SetSSReg (mc, ss_pcoq_head, GetSSReg (mc, ss_pcoq_tail));\t\t\\\n+  SetSSReg (mc, ss_pcsq_head, GetSSReg (mc, ss_pcsq_tail));\t\t\\\n+  /* This part is not quit right if the head pc was pointing\t\t\\\n+     at a branch.  The tail needs to be adjusted to the branch\t\t\\\n+     target if the branch is taken.  The tail space register\t\t\\\n+     may need adjustment as well if the branch is an interspace\t\t\\\n+     branch.  */\t\t\t\t\t\t\t\\\n+  SetSSReg (mc, ss_pcoq_tail, (GetSSReg (mc, ss_pcoq_tail) + 4));\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+ }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+# define INIT_SEGV\t\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+      struct sigaction sa;\t\t\t\\\n+      sa.sa_sigaction = catch_segv;\t\t\\\n+      sigemptyset (&sa.sa_mask);\t\t\\\n+      sa.sa_flags = SA_SIGINFO | SA_NODEFER;\t\\\n+      sigaction (SIGSEGV, &sa, NULL);\t\t\\\n+    } while (0)\n+\n+# define INIT_FPE\t\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+      struct sigaction sa;\t\t\t\\\n+      sa.sa_sigaction = catch_fpe;\t\t\\\n+      sigemptyset (&sa.sa_mask);\t\t\\\n+      sa.sa_flags = SA_SIGINFO | SA_NODEFER;\t\\\n+      sigaction (SIGFPE, &sa, NULL);\t\t\\\n+    } while (0)\n+\n+#endif /* JAVA_SIGNAL_H */"}, {"sha": "63fc135d4d8ea15f267832f8c6882a0e87e1f2a1", "filename": "libjava/include/posix.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Finclude%2Fposix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Finclude%2Fposix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix.h?ref=68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "patch": "@@ -44,6 +44,8 @@ details.  */\n #define _Jv_platform_solib_prefix \"lib\"\n #if defined(__APPLE__) && defined(__MACH__)\n #define _Jv_platform_solib_suffix \".dylib\"\n+#elif defined(HPUX) && defined(HP_PA)\n+#define _Jv_platform_solib_suffix \".sl\"\n #else\n #define _Jv_platform_solib_suffix \".so\"\n #endif"}, {"sha": "6000edb52ac8ce137975ff7d1ebbcde2e4bbf1d6", "filename": "libjava/sysdep/pa/descriptor-pa32-hpux.h", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Fsysdep%2Fpa%2Fdescriptor-pa32-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Fsysdep%2Fpa%2Fdescriptor-pa32-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fpa%2Fdescriptor-pa32-hpux.h?ref=68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "patch": "@@ -0,0 +1,91 @@\n+/* descriptor-pa32-hpux.h - Given a function pointer, extract and return the\n+   actual code address of the corresponding function.\n+\n+   This is done by checking if the plabel bit is set. If it's not set,\n+   return the function pointer.  If it's set, mask it off and extract\n+   the address from the function descriptor.  This address may point\n+   to an export stub.  If so, extract the branch target from the stub\n+   and return it.  Otherwise, the address from the function descriptor\n+   is returned.\n+\n+   Copyright (C) 2006  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#define UNWRAP_FUNCTION_DESCRIPTOR pa_unwrap_function_descriptor\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/* Extract bit field from word using HP's numbering (MSB = 0).  */\n+#define GET_FIELD(X, FROM, TO)\t\t\t\t\t\\\n+  ((X) >> (31 - (TO)) & ((1 << ((TO) - (FROM) + 1)) - 1))\n+\n+static inline int\n+sign_extend (int x, int len)\n+{\n+  int signbit = (1 << (len - 1));\n+  int mask = (signbit << 1) - 1;\n+  return ((x & mask) ^ signbit) - signbit;\n+}\n+\n+/* Extract a 17-bit signed constant from branch instructions.  */\n+static inline int\n+extract_17 (unsigned word)\n+{\n+  return sign_extend (GET_FIELD (word, 19, 28)\n+\t\t      | GET_FIELD (word, 29, 29) << 10\n+\t\t      | GET_FIELD (word, 11, 15) << 11\n+\t\t      | (word & 0x1) << 16, 17);\n+}\n+\n+/* Extract a 22-bit signed constant from branch instructions.  */\n+static inline int\n+extract_22 (unsigned word)\n+{\n+  return sign_extend (GET_FIELD (word, 19, 28)\n+\t\t      | GET_FIELD (word, 29, 29) << 10\n+\t\t      | GET_FIELD (word, 11, 15) << 11\n+\t\t      | GET_FIELD (word, 6, 10) << 16\n+\t\t      | (word & 0x1) << 21, 22);\n+}\n+\n+static void *\n+pa_unwrap_function_descriptor (void *addr)\n+{\n+  unsigned int *tmp_addr;\n+\n+  /* Check if plabel bit is set in function pointer.  */\n+  if (!((unsigned int) addr & 2))\n+    return addr;\n+\n+  tmp_addr = *(unsigned int **) ((unsigned int) addr & ~3);\n+\n+  /* If TMP_ADDR points to an export stub, adjust it so that it points\n+     to the branch target of the stub.  */\n+  if ((*tmp_addr & 0xffe0e002) == 0xe8400000\t\t/* bl x,r2 */\n+      && *(tmp_addr + 1) == 0x08000240\t\t\t/* nop */\n+      && *(tmp_addr + 2) == 0x4bc23fd1\t\t\t/* ldw -18(sp),rp */\n+      && *(tmp_addr + 3) == 0x004010a1\t\t\t/* ldsid (rp),r1 */\n+      && *(tmp_addr + 4) == 0x00011820\t\t\t/* mtsp r1,sr0 */\n+      && *(tmp_addr + 5) == 0xe0400002)\t\t\t/* be,n 0(sr0,rp) */\n+    /* Extract target address from PA 1.x 17-bit branch.  */\n+    tmp_addr += extract_17 (*tmp_addr) + 2;\n+  else if ((*tmp_addr & 0xfc00e002) == 0xe800a000\t/* b,l x,r2 */\n+\t   && *(tmp_addr + 1) == 0x08000240\t\t/* nop */\n+\t   && *(tmp_addr + 2) == 0x4bc23fd1\t\t/* ldw -18(sp),rp */\n+\t   && *(tmp_addr + 3) == 0xe840d002)\t\t/* bve,n (rp) */\n+    /* Extract target address from PA 2.0 22-bit branch.  */\n+    tmp_addr += extract_22 (*tmp_addr) + 2;\n+\n+  return (void *) tmp_addr;\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif"}, {"sha": "bc6af6b8701b2f90eb20b0c3aa3475b5e94955fa", "filename": "libjava/sysdep/pa/descriptor-pa64-hpux.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Fsysdep%2Fpa%2Fdescriptor-pa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319/libjava%2Fsysdep%2Fpa%2Fdescriptor-pa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fpa%2Fdescriptor-pa64-hpux.h?ref=68bfb94e7ece6bad4d6c10231b3d8cd94d2e7319", "patch": "@@ -0,0 +1,6 @@\n+// Given a function pointer, return the code address.\n+// If the plabel bit is set, mask it off and return the code from the\n+// first word of the function descriptor.  Otherwise, the function\n+// pointer is the code address.\n+\n+#define UNWRAP_FUNCTION_DESCRIPTOR(X) *(void **)((unsigned long) (X) + 16)"}]}