{"sha": "29df53fe349073a9210df70ae45662cb3f4a0556", "node_id": "C_kwDOANBUbNoAKDI5ZGY1M2ZlMzQ5MDczYTkyMTBkZjcwYWU0NTY2MmNiM2Y0YTA1NTY", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-12-01T08:40:25Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-12-01T08:40:25Z"}, "message": "middle-end: move bitmask match.pd pattern and update tests\n\nFollowing the previous bugfix this addresses the cosmetic and test issues.\n\nThe vector tests are moved to vect and the scalar are left where they are.\n\ngcc/ChangeLog:\n\n\t* match.pd: Move below pattern that rewrites to EQ, NE.\n\t* tree.c (bitmask_inv_cst_vector_p): Correct do .. while indentation.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/bic-bitmask-10.c: Moved to gcc.dg/vect/vect-bic-bitmask-10.c.\n\t* gcc.dg/bic-bitmask-11.c: Moved to gcc.dg/vect/vect-bic-bitmask-11.c.\n\t* gcc.dg/bic-bitmask-12.c: Moved to gcc.dg/vect/vect-bic-bitmask-12.c.\n\t* gcc.dg/bic-bitmask-3.c: Moved to gcc.dg/vect/vect-bic-bitmask-3.c.\n\t* gcc.dg/bic-bitmask-23.c: Moved to gcc.dg/vect/vect-bic-bitmask-23.c.\n\t* gcc.dg/bic-bitmask-2.c: Moved to gcc.dg/vect/vect-bic-bitmask-2.c.\n\t* gcc.dg/bic-bitmask-4.c: Moved to gcc.dg/vect/vect-bic-bitmask-4.c.\n\t* gcc.dg/bic-bitmask-5.c: Moved to gcc.dg/vect/vect-bic-bitmask-5.c.\n\t* gcc.dg/bic-bitmask-6.c: Moved to gcc.dg/vect/vect-bic-bitmask-6.c.\n\t* gcc.dg/bic-bitmask-8.c: Moved to gcc.dg/vect/vect-bic-bitmask-8.c.\n\t* gcc.dg/bic-bitmask-9.c: Moved to gcc.dg/vect/vect-bic-bitmask-9.c.", "tree": {"sha": "eb7764c2f2f4bcac8b4352f9944c50ba2209c764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb7764c2f2f4bcac8b4352f9944c50ba2209c764"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29df53fe349073a9210df70ae45662cb3f4a0556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29df53fe349073a9210df70ae45662cb3f4a0556", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29df53fe349073a9210df70ae45662cb3f4a0556", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29df53fe349073a9210df70ae45662cb3f4a0556/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da9386f9a70ac494939650c0e0a0e4168a6f76d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9386f9a70ac494939650c0e0a0e4168a6f76d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da9386f9a70ac494939650c0e0a0e4168a6f76d8"}], "stats": {"total": 96, "additions": 49, "deletions": 47}, "files": [{"sha": "0a00b08e2ab9975d763933d106817ecf6eaf13f1", "filename": "gcc/match.pd", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -5215,20 +5215,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       (eqcmp (bit_and @1 { wide_int_to_tree (ty, mask - rhs); })\n \t     { build_zero_cst (ty); }))))))\n \n-/* Transform comparisons of the form (X & Y) CMP 0 to X CMP2 Z\n-   where ~Y + 1 == pow2 and Z = ~Y.  */\n-(for cst (VECTOR_CST INTEGER_CST)\n- (for cmp (eq ne)\n-      icmp (le gt)\n-  (simplify\n-   (cmp (bit_and:c@2 @0 cst@1) integer_zerop)\n-    (with { tree csts = bitmask_inv_cst_vector_p (@1); }\n-     (if (csts && (VECTOR_TYPE_P (TREE_TYPE (@1)) || single_use (@2)))\n-      (if (TYPE_UNSIGNED (TREE_TYPE (@1)))\n-       (icmp @0 { csts; })\n-       (with { tree utype = unsigned_type_for (TREE_TYPE (@1)); }\n-\t (icmp (convert:utype @0) { csts; }))))))))\n-\n /* -A CMP -B -> B CMP A.  */\n (for cmp (tcc_comparison)\n      scmp (swapped_tcc_comparison)\n@@ -5715,6 +5701,20 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    replace if (x == 0) with tem = ~x; if (tem != 0) which is\n    clearly less optimal and which we'll transform again in forwprop.  */\n \n+/* Transform comparisons of the form (X & Y) CMP 0 to X CMP2 Z\n+   where ~Y + 1 == pow2 and Z = ~Y.  */\n+(for cst (VECTOR_CST INTEGER_CST)\n+ (for cmp (eq ne)\n+      icmp (le gt)\n+  (simplify\n+   (cmp (bit_and:c@2 @0 cst@1) integer_zerop)\n+    (with { tree csts = bitmask_inv_cst_vector_p (@1); }\n+     (if (csts && (VECTOR_TYPE_P (TREE_TYPE (@1)) || single_use (@2)))\n+      (if (TYPE_UNSIGNED (TREE_TYPE (@1)))\n+       (icmp @0 { csts; })\n+       (with { tree utype = unsigned_type_for (TREE_TYPE (@1)); }\n+\t (icmp (convert:utype @0) { csts; }))))))))\n+\n /* When one argument is a constant, overflow detection can be simplified.\n    Currently restricted to single use so as not to interfere too much with\n    ADD_OVERFLOW detection in tree-ssa-math-opts.c."}, {"sha": "fe4f677b64dc96862683faf503eb4900a01e7407", "filename": "gcc/testsuite/gcc.dg/vect/vect-bic-bitmask-10.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-10.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+/* { dg-additional-options \"-O3 -save-temps -fdump-tree-dce -w\" } */\n \n #include <stdint.h>\n \n@@ -18,7 +18,7 @@ void fun2(int32_t *x, int n)\n }\n \n #define TYPE int32_t\n-#include \"bic-bitmask.h\"\n+#include \"../bic-bitmask.h\"\n \n /* { dg-final { scan-tree-dump {<=\\s*.+\\{ 255,.+\\}} dce7 { target vect_int } } } */\n /* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967290,.+\\}} dce7 { target vect_int } } } */", "previous_filename": "gcc/testsuite/gcc.dg/bic-bitmask-10.c"}, {"sha": "b77f4d42450fe6496d277a4429f0e051f5178781", "filename": "gcc/testsuite/gcc.dg/vect/vect-bic-bitmask-11.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-11.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+/* { dg-additional-options \"-O3 -save-temps -fdump-tree-dce -w\" } */\n \n #include <stdint.h>\n \n@@ -17,7 +17,7 @@ void fun2(uint32_t *x, int n)\n       x[i] = (x[i]&(~255)) != 0;\n }\n \n-#include \"bic-bitmask.h\"\n+#include \"../bic-bitmask.h\"\n \n /* { dg-final { scan-tree-dump {>\\s*.+\\{ 255,.+\\}} dce7 { target vect_int } } } */\n /* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967290,.+\\}} dce7 { target vect_int } } } */", "previous_filename": "gcc/testsuite/gcc.dg/bic-bitmask-11.c"}, {"sha": "30d36f452014cdb90eeccf6eb7f0a4cd6d8f8234", "filename": "gcc/testsuite/gcc.dg/vect/vect-bic-bitmask-12.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-12.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble } */\n-/* { dg-options \"-O3 -fdump-tree-dce\" } */\n+/* { dg-additional-options \"-O3 -fdump-tree-dce -w\" } */\n \n #include <stdint.h>\n ", "previous_filename": "gcc/testsuite/gcc.dg/bic-bitmask-12.c"}, {"sha": "58c0b9254badc2aeae01bd181a60830ed3eba44a", "filename": "gcc/testsuite/gcc.dg/vect/vect-bic-bitmask-2.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-2.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+/* { dg-additional-options \"-O3 -save-temps -fdump-tree-dce -w\" } */\n \n #include <stdint.h>\n \n@@ -17,7 +17,7 @@ void fun2(uint32_t *x, int n)\n       x[i] = (x[i]&(~255)) == 0;\n }\n \n-#include \"bic-bitmask.h\"\n+#include \"../bic-bitmask.h\"\n \n /* { dg-final { scan-tree-dump-times {<=\\s*.+\\{ 255,.+\\}} 1 dce7 { target vect_int } } } */\n /* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967040,.+\\}} dce7 { target vect_int } } } */", "previous_filename": "gcc/testsuite/gcc.dg/bic-bitmask-3.c"}, {"sha": "67119d32f751fa107b5d4927809e122c1bcbf3ef", "filename": "gcc/testsuite/gcc.dg/vect/vect-bic-bitmask-23.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-23.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble } */\n-/* { dg-options \"-O1 -fdump-tree-dce\" } */\n+/* { dg-additional-options \"-O1 -fdump-tree-dce -w\" } */\n \n #include <stdint.h>\n ", "previous_filename": "gcc/testsuite/gcc.dg/bic-bitmask-23.c"}, {"sha": "58c0b9254badc2aeae01bd181a60830ed3eba44a", "filename": "gcc/testsuite/gcc.dg/vect/vect-bic-bitmask-3.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-3.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+/* { dg-additional-options \"-O3 -save-temps -fdump-tree-dce -w\" } */\n \n #include <stdint.h>\n \n@@ -17,7 +17,7 @@ void fun2(uint32_t *x, int n)\n       x[i] = (x[i]&(~255)) == 0;\n }\n \n-#include \"bic-bitmask.h\"\n+#include \"../bic-bitmask.h\"\n \n /* { dg-final { scan-tree-dump-times {<=\\s*.+\\{ 255,.+\\}} 1 dce7 { target vect_int } } } */\n /* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967040,.+\\}} dce7 { target vect_int } } } */", "previous_filename": "gcc/testsuite/gcc.dg/bic-bitmask-2.c"}, {"sha": "6e2da41bac127d82a6a83f3e99c6f68b77ac2b42", "filename": "gcc/testsuite/gcc.dg/vect/vect-bic-bitmask-4.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-4.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+/* { dg-additional-options \"-O3 -save-temps -fdump-tree-dce -w\" } */\n \n #include <stdint.h>\n \n@@ -17,7 +17,7 @@ void fun2(uint32_t *x, int n)\n       x[i] = (x[i]&(~255)) >= 0;\n }\n \n-#include \"bic-bitmask.h\"\n+#include \"../bic-bitmask.h\"\n \n /* { dg-final { scan-tree-dump-times {=\\s*.+\\{ 1,.+\\}} 1 dce7 { target vect_int } } } */\n /* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967040,.+\\}} dce7 { target vect_int } } } */", "previous_filename": "gcc/testsuite/gcc.dg/bic-bitmask-4.c"}, {"sha": "5ef0f46c0b1709db633d3aa801cd7211baef31ef", "filename": "gcc/testsuite/gcc.dg/vect/vect-bic-bitmask-5.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-5.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+/* { dg-additional-options \"-O3 -save-temps -fdump-tree-dce -w\" } */\n \n #include <stdint.h>\n \n@@ -17,7 +17,7 @@ void fun2(uint32_t *x, int n)\n       x[i] = (x[i]&(~255)) > 0;\n }\n \n-#include \"bic-bitmask.h\"\n+#include \"../bic-bitmask.h\"\n \n /* { dg-final { scan-tree-dump-times {>\\s*.+\\{ 255,.+\\}} 1 dce7 { target vect_int } } } */\n /* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967040,.+\\}} dce7 { target vect_int } } } */", "previous_filename": "gcc/testsuite/gcc.dg/bic-bitmask-5.c"}, {"sha": "22e5f885bebea9a141e9ffdd0ea7276a5a9046aa", "filename": "gcc/testsuite/gcc.dg/vect/vect-bic-bitmask-6.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-6.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+/* { dg-additional-options \"-O3 -save-temps -fdump-tree-dce -w\" } */\n \n #include <stdint.h>\n \n@@ -17,7 +17,7 @@ void fun2(uint32_t *x, int n)\n       x[i] = (x[i]&(~255)) <= 0;\n }\n \n-#include \"bic-bitmask.h\"\n+#include \"../bic-bitmask.h\"\n \n /* { dg-final { scan-tree-dump-times {<=\\s*.+\\{ 255,.+\\}} 1 dce7 { target vect_int } } } */\n /* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967040,.+\\}} dce7 { target vect_int } } } */", "previous_filename": "gcc/testsuite/gcc.dg/bic-bitmask-6.c"}, {"sha": "edff5428c5455f3b6597f561b53948ad21be05ad", "filename": "gcc/testsuite/gcc.dg/vect/vect-bic-bitmask-8.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-8.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+/* { dg-additional-options \"-O3 -save-temps -fdump-tree-dce -w\" } */\n \n #include <stdint.h>\n \n@@ -17,7 +17,7 @@ void fun2(uint32_t *x, int n)\n       x[i] = (x[i]&(~1)) != 0;\n }\n \n-#include \"bic-bitmask.h\"\n+#include \"../bic-bitmask.h\"\n \n /* { dg-final { scan-tree-dump-times {>\\s*.+\\{ 1,.+\\}} 1 dce7 { target vect_int } } } */\n /* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967294,.+\\}} dce7 { target vect_int } } } */", "previous_filename": "gcc/testsuite/gcc.dg/bic-bitmask-8.c"}, {"sha": "319d80e672f231e4a96d4d22bc68f6b9ea464a74", "filename": "gcc/testsuite/gcc.dg/vect/vect-bic-bitmask-9.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bic-bitmask-9.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+/* { dg-additional-options \"-O3 -save-temps -fdump-tree-dce -w\" } */\n \n #include <stdint.h>\n \n@@ -17,7 +17,7 @@ void fun2(uint32_t *x, int n)\n       x[i] = (x[i]&(~5)) == 0;\n }\n \n-#include \"bic-bitmask.h\"\n+#include \"../bic-bitmask.h\"\n \n /* { dg-final { scan-tree-dump-not {<=\\s*.+\\{ 4294967289,.+\\}} dce7 { target vect_int } } } */\n /* { dg-final { scan-tree-dump {&\\s*.+\\{ 4294967290,.+\\}} dce7 { target vect_int } } } */", "previous_filename": "gcc/testsuite/gcc.dg/bic-bitmask-9.c"}, {"sha": "72cceda568f5bc7e5a56900934842a2ff09b27e0", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29df53fe349073a9210df70ae45662cb3f4a0556/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=29df53fe349073a9210df70ae45662cb3f4a0556", "patch": "@@ -10306,22 +10306,24 @@ bitmask_inv_cst_vector_p (tree t)\n \n   tree ty = unsigned_type_for (TREE_TYPE (cst));\n \n-  do {\n-    if (idx > 0)\n-      cst = vector_cst_elt (t, idx);\n-    wide_int icst = wi::to_wide (cst);\n-    wide_int inv =  wi::bit_not (icst);\n-    icst = wi::add (1, inv);\n-    if (wi::popcount (icst) != 1)\n-      return NULL_TREE;\n+  do\n+    {\n+      if (idx > 0)\n+\tcst = vector_cst_elt (t, idx);\n+      wide_int icst = wi::to_wide (cst);\n+      wide_int inv =  wi::bit_not (icst);\n+      icst = wi::add (1, inv);\n+      if (wi::popcount (icst) != 1)\n+\treturn NULL_TREE;\n \n-    tree newcst = wide_int_to_tree (ty, inv);\n+      tree newcst = wide_int_to_tree (ty, inv);\n \n-    if (uniform)\n-      return build_uniform_cst (newtype, newcst);\n+      if (uniform)\n+\treturn build_uniform_cst (newtype, newcst);\n \n-    builder.quick_push (newcst);\n-  } while (++idx < nelts);\n+      builder.quick_push (newcst);\n+    }\n+  while (++idx < nelts);\n \n   return builder.build ();\n }"}]}