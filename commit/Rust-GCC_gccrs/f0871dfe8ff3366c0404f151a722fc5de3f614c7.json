{"sha": "f0871dfe8ff3366c0404f151a722fc5de3f614c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA4NzFkZmU4ZmYzMzY2YzA0MDRmMTUxYTcyMmZjNWRlM2Y2MTRjNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-17T01:37:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-17T01:37:42Z"}, "message": "sol2-bi.h (AS_SPARC64_FLAG): New.\n\n        * config/sparc/sol2-bi.h (AS_SPARC64_FLAG): New.\n        * config/sparc/sol2-gas-bi.h: New file.\n        * config.gcc (sparc*-solaris): Add it as needed.\n        * configure.in (AS_SPARC64_FLAG): Remove check.\n        * config.in, configure: Regenerate.\n\nFrom-SVN: r52393", "tree": {"sha": "eee3b28854e407b76cd220081f8a10690bd573ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eee3b28854e407b76cd220081f8a10690bd573ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0871dfe8ff3366c0404f151a722fc5de3f614c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0871dfe8ff3366c0404f151a722fc5de3f614c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0871dfe8ff3366c0404f151a722fc5de3f614c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0871dfe8ff3366c0404f151a722fc5de3f614c7/comments", "author": null, "committer": null, "parents": [{"sha": "6519603408e2e4b087ae4b7c3058cd1511b1db66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6519603408e2e4b087ae4b7c3058cd1511b1db66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6519603408e2e4b087ae4b7c3058cd1511b1db66"}], "stats": {"total": 129, "additions": 35, "deletions": 94}, "files": [{"sha": "8f5e5761caa1590751e78a810b4dc33be43433c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0871dfe8ff3366c0404f151a722fc5de3f614c7", "patch": "@@ -1,7 +1,17 @@\n 2002-04-16  Richard Henderson  <rth@redhat.com>\n \n-        * config/mips/mips.c (override_options): Don't override N32 for\n-        a 64-bit ISA.\n+\t* config/sparc/sol2-bi.h (AS_SPARC64_FLAG): New.\n+\t* config/sparc/sol2-gas-bi.h: New file.\n+\t* config.gcc (sparc*-solaris): Add it as needed.\n+\t* configure.in (AS_SPARC64_FLAG): Remove check.\n+\t* config.in, configure: Regenerate.\n+\n+\t* config/sparc/sol2-bi.h (CC1_SPEC): Error for -m32 and -m64.\n+\n+2002-04-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/mips/mips.c (override_options): Don't override N32 for\n+\ta 64-bit ISA.\n \n \tPR 6202\n \t* config/mips/mips.md (can_delay): Split out of existing define_delays."}, {"sha": "f13cf2d0cc0ad349aeaec93ab593b9af9077c0bf", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f0871dfe8ff3366c0404f151a722fc5de3f614c7", "patch": "@@ -3082,6 +3082,9 @@ sparc64-*-solaris2* | sparcv9-*-solaris2*)\n \tif test x$gnu_ld = xyes; then\n \t\ttm_file=\"${tm_file} sparc/sol2-gld.h sparc/sol2-gld-bi.h\"\n \tfi\n+\tif test x$gas = xyes; then\n+\t\ttm_file=\"${tm_file} sparc/sol2-gas-bi.h\"\n+\tfi\n \txm_defines=POSIX\n \ttmake_file=\"sparc/t-sol2 sparc/t-sol2-64 sparc/t-crtfm\"\n \tif test x$gnu_ld = xyes; then\n@@ -3148,6 +3151,9 @@ sparc-*-solaris2*)\n \t\tif test x$gnu_ld = xyes; then\n \t\t\ttm_file=\"${tm_file} sparc/sol2-gld-bi.h\"\n \t\tfi\n+\t\tif test x$gas = xyes; then\n+\t\t\ttm_file=\"${tm_file} sparc/sol2-gas-bi.h\"\n+\t\tfi\n \t\ttmake_file=\"$tmake_file sparc/t-sol2-64\"\n \t\t;;\n \tesac"}, {"sha": "06f9742af4909d8b9b36236a5ce52e6a5db8622f", "filename": "gcc/config.in", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=f0871dfe8ff3366c0404f151a722fc5de3f614c7", "patch": "@@ -1,4 +1,4 @@\n-/* config.in.  Generated automatically from configure.in by autoheader 2.13.  */\n+/* config.in.  Generated automatically from configure.in by autoheader.  */\n \n /* Define if using alloca.c.  */\n #undef C_ALLOCA\n@@ -532,9 +532,6 @@\n /* Define if your assembler and linker support unaligned PC relative relocs against hidden symbols. */\n #undef HAVE_AS_SPARC_UA_PCREL_HIDDEN\n \n-/* Define if the assembler supports 64bit sparc. */\n-#undef AS_SPARC64_FLAG\n-\n /* Define if your assembler supports offsetable %lo(). */\n #undef HAVE_AS_OFFSETABLE_LO10\n "}, {"sha": "85b790efa788408527ecd8dd4e9f0af047ff8ed7", "filename": "gcc/config/sparc/sol2-bi.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h?ref=f0871dfe8ff3366c0404f151a722fc5de3f614c7", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for bi-arch SPARC\n-   running Solaris 2 using the system linker.  */\n+   running Solaris 2 using the system assembler and linker.  */\n \n /* The default code model.  */\n #undef SPARC_DEFAULT_CMODEL\n@@ -8,6 +8,8 @@\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE 128\n \n+#define AS_SPARC64_FLAG\t\"-xarch=v9\"\n+\n #undef ASM_CPU32_DEFAULT_SPEC\n #define ASM_CPU32_DEFAULT_SPEC\t\"\"\n #undef ASM_CPU64_DEFAULT_SPEC"}, {"sha": "0b6cb618d36ac05c6bb8602c424a9a590fb20f59", "filename": "gcc/config/sparc/sol2-gas-bi.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfig%2Fsparc%2Fsol2-gas-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfig%2Fsparc%2Fsol2-gas-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-gas-bi.h?ref=f0871dfe8ff3366c0404f151a722fc5de3f614c7", "patch": "@@ -0,0 +1,5 @@\n+/* Definitions of target machine for GNU compiler, for bi-arch SPARC\n+   running Solaris 2 using the GNU assembler.  */\n+\n+#undef AS_SPARC64_FLAG\n+#define AS_SPARC64_FLAG\t\"-64 -Av9\""}, {"sha": "c99926d33640b8378f7213e91dd7632a41a04176", "filename": "gcc/configure", "status": "modified", "additions": 8, "deletions": 52, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f0871dfe8ff3366c0404f151a722fc5de3f614c7", "patch": "@@ -7515,53 +7515,9 @@ EOF\n \n     fi\n \n-    case \"$target\" in\n-    sparcv9-* | sparc64-*)\n-\techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n-echo \"configure:7522: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n-if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n-  echo $ac_n \"(cached) $ac_c\" 1>&6\n-else\n-  \n-\t\tif test -n \"$gcc_cv_as\"; then\n-\t\t    echo \".xword foo\" > conftest.s\n-\t\t    gcc_cv_as_flags64=no\n-\t\t    for flag in \"-xarch=v9\" \"-64 -Av9\"; do\n-\t\t\tif $gcc_cv_as $flag -o conftest.o conftest.s \\\n-\t\t\t    > /dev/null 2>&1; then\n-\t\t\t    gcc_cv_as_flags64=$flag\n-\t\t\t    break\n-\t\t\tfi\n-\t\t    done\n-\t\t    rm -f conftest.s conftest.o\n-\t\telse\n-\t\t    if test \"$gas\" = yes; then\n-\t\t\tgcc_cv_as_flags64=\"-64 -Av9\"\n-\t\t    else\n-\t\t\tgcc_cv_as_flags64=\"-xarch=v9\"\n-\t\t    fi\n-\t\tfi\n-\t\n-fi\n-\n-echo \"$ac_t\"\"$gcc_cv_as_flags64\" 1>&6\n-\tif test \"x$gcc_cv_as_flags64\" = xno; then\n-\t    { echo \"configure: error: Assembler does not support 64-bit compilation.\" 1>&2; exit 1; }\n-\t    exit 1\n-\telse\n-\t    cat >> confdefs.h <<EOF\n-#define AS_SPARC64_FLAG \"$gcc_cv_as_flags64\"\n-EOF\n-\n-\tfi\n-\t;;\n-    *) gcc_cv_as_flags64=${gcc_cv_as_flags64-no}\n-\t;;\n-    esac\n-\n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:7565: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:7521: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7601,7 +7557,7 @@ EOF\n \n   i[34567]86-*-* | x86_64-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:7605: checking assembler instructions\" >&5\n+echo \"configure:7561: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -7628,7 +7584,7 @@ EOF\n     echo \"$ac_t\"\"$gcc_cv_as_instructions\" 1>&6\n \n     echo $ac_n \"checking assembler GOTOFF in data directives\"\"... $ac_c\" 1>&6\n-echo \"configure:7632: checking assembler GOTOFF in data directives\" >&5\n+echo \"configure:7588: checking assembler GOTOFF in data directives\" >&5\n     gcc_cv_as_gotoff_in_data=no\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x\n     then\n@@ -7658,7 +7614,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:7662: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:7618: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -7714,7 +7670,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_dwarf2_debug_line\" 1>&6\n \n echo $ac_n \"checking assembler --gdwarf2 support\"\"... $ac_c\" 1>&6\n-echo \"configure:7718: checking assembler --gdwarf2 support\" >&5\n+echo \"configure:7674: checking assembler --gdwarf2 support\" >&5\n gcc_cv_as_gdwarf2_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -7743,7 +7699,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gdwarf2_flag\" 1>&6\n \n echo $ac_n \"checking assembler --gstabs support\"\"... $ac_c\" 1>&6\n-echo \"configure:7747: checking assembler --gstabs support\" >&5\n+echo \"configure:7703: checking assembler --gstabs support\" >&5\n gcc_cv_as_gstabs_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -7771,7 +7727,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gstabs_flag\" 1>&6\n \n echo $ac_n \"checking linker PT_GNU_EH_FRAME support\"\"... $ac_c\" 1>&6\n-echo \"configure:7775: checking linker PT_GNU_EH_FRAME support\" >&5\n+echo \"configure:7731: checking linker PT_GNU_EH_FRAME support\" >&5\n gcc_cv_ld_eh_frame_hdr=no\n if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n   if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 12 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n@@ -7934,7 +7890,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:7938: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:7894: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "ec25554482edac785e57a16f9d0f8ba7735faa0c", "filename": "gcc/configure.in", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0871dfe8ff3366c0404f151a722fc5de3f614c7/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=f0871dfe8ff3366c0404f151a722fc5de3f614c7", "patch": "@@ -1794,41 +1794,6 @@ EOF\n \t\t[Define if your assembler and linker support unaligned PC relative relocs against hidden symbols.])\n     fi\n \n-    case \"$target\" in\n-    sparcv9-* | sparc64-*)\n-\tAC_CACHE_CHECK([for 64 bit support in assembler ($gcc_cv_as)],\n-\t    gcc_cv_as_flags64, [\n-\t\tif test -n \"$gcc_cv_as\"; then\n-\t\t    echo \".xword foo\" > conftest.s\n-\t\t    gcc_cv_as_flags64=no\n-\t\t    for flag in \"-xarch=v9\" \"-64 -Av9\"; do\n-\t\t\tif $gcc_cv_as $flag -o conftest.o conftest.s \\\n-\t\t\t    > /dev/null 2>&1; then\n-\t\t\t    gcc_cv_as_flags64=$flag\n-\t\t\t    break\n-\t\t\tfi\n-\t\t    done\n-\t\t    rm -f conftest.s conftest.o\n-\t\telse\n-\t\t    if test \"$gas\" = yes; then\n-\t\t\tgcc_cv_as_flags64=\"-64 -Av9\"\n-\t\t    else\n-\t\t\tgcc_cv_as_flags64=\"-xarch=v9\"\n-\t\t    fi\n-\t\tfi\n-\t])\n-\tif test \"x$gcc_cv_as_flags64\" = xno; then\n-\t    AC_MSG_ERROR([Assembler does not support 64-bit compilation.])\n-\t    exit 1\n-\telse\n-\t    AC_DEFINE_UNQUOTED(AS_SPARC64_FLAG, \"$gcc_cv_as_flags64\",\n-\t\t\t[Define if the assembler supports 64bit sparc.])\n-\tfi\n-\t;;\n-    *) gcc_cv_as_flags64=${gcc_cv_as_flags64-no}\n-\t;;\n-    esac\n-\n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \tAC_CACHE_CHECK([for assembler offsetable %lo() support],\n \t    gcc_cv_as_offsetable_lo10, ["}]}