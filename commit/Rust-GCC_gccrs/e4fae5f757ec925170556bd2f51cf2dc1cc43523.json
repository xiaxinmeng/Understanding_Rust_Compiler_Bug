{"sha": "e4fae5f757ec925170556bd2f51cf2dc1cc43523", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmYWU1Zjc1N2VjOTI1MTcwNTU2YmQyZjUxY2YyZGMxY2M0MzUyMw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2007-05-04T11:00:00Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-05-04T11:00:00Z"}, "message": "bfin.md (<optab>di3): Now a define_expand which expands logical operations piecewise.\n\n\t* config/bfin/bfin.md (<optab>di3): Now a define_expand which expands\n\tlogical operations piecewise.\n\t(<optab>di_zesidi_di, <optab>di_sesidi_di, negdi2, one_cmpldi2,\n\tzero_extendsidi2, subdi_di_zesidi, subdi_zesidi_di, subdi_di_sesidi,\n\tsubdi_sesidi_di): Delete.\n\t(add_with_carry): Produce carry in CC instead of a DREG to shorten\n\tthe generated sequence.  Allow three-reg add in constraints.  Rewrite\n\tthe rtl expression for carry to avoid zero_extend of a constant.\n\t(sub_with_carry): New pattern.\n\t(adddi3, subdi3): Change into define_expand.  For subtract, generate a\n\tdifferent sequence not involving jumps.\n\t(notbi): Now a named pattern.\n\nFrom-SVN: r124414", "tree": {"sha": "5e90d244e8886c3b5560c49f27af20794970ee95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e90d244e8886c3b5560c49f27af20794970ee95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4fae5f757ec925170556bd2f51cf2dc1cc43523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fae5f757ec925170556bd2f51cf2dc1cc43523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4fae5f757ec925170556bd2f51cf2dc1cc43523", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fae5f757ec925170556bd2f51cf2dc1cc43523/comments", "author": null, "committer": null, "parents": [{"sha": "80b9cbc9555a09d0aca886dbe89ea023660af2ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b9cbc9555a09d0aca886dbe89ea023660af2ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80b9cbc9555a09d0aca886dbe89ea023660af2ca"}], "stats": {"total": 236, "additions": 105, "deletions": 131}, "files": [{"sha": "85404e0d12562d3172db03b1cdcc08b75fc45f24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4fae5f757ec925170556bd2f51cf2dc1cc43523/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4fae5f757ec925170556bd2f51cf2dc1cc43523/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4fae5f757ec925170556bd2f51cf2dc1cc43523", "patch": "@@ -1,3 +1,18 @@\n+2007-04-18  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.md (<optab>di3): Now a define_expand which expands\n+\tlogical operations piecewise.\n+\t(<optab>di_zesidi_di, <optab>di_sesidi_di, negdi2, one_cmpldi2,\n+\tzero_extendsidi2, subdi_di_zesidi, subdi_zesidi_di, subdi_di_sesidi,\n+\tsubdi_sesidi_di): Delete.\n+\t(add_with_carry): Produce carry in CC instead of a DREG to shorten\n+\tthe generated sequence.  Allow three-reg add in constraints.  Rewrite\n+\tthe rtl expression for carry to avoid zero_extend of a constant.\n+\t(sub_with_carry): New pattern.\n+\t(adddi3, subdi3): Change into define_expand.  For subtract, generate a\n+\tdifferent sequence not involving jumps.\n+\t(notbi): Now a named pattern.\n+\n 2007-05-04  Bradley Lucier  <lucier@math.purdue.edu>\n \n \t* doc/invoke.texi (i386 and x86-64 Options) [-mpc32, -mpc64, -mpc80]:"}, {"sha": "7b238c64982267aee2e3b88bac7beafd69672115", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 90, "deletions": 131, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4fae5f757ec925170556bd2f51cf2dc1cc43523/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4fae5f757ec925170556bd2f51cf2dc1cc43523/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=e4fae5f757ec925170556bd2f51cf2dc1cc43523", "patch": "@@ -885,67 +885,26 @@\n \t\t\t       (ior \"%H1\")\n \t\t\t       (xor \"%H1\")])\n \n-(define_insn \"<optab>di3\"\n+;; Keep this pattern around to avoid generating NO_CONFLICT blocks.\n+(define_expand \"<optab>di3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (any_logical:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t\t(match_operand:DI 2 \"register_operand\" \"d\")))]\n+\t\t\t(match_operand:DI 2 \"general_operand\" \"d\")))]\n   \"\"\n-  \"%0 = %1 <op> %2;\\\\n\\\\t%H0 = %H1 <op> %H2;\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"seq_insns\" \"multi\")])\n-\n-(define_insn \"*<optab>di_zesidi_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (any_logical:DI (zero_extend:DI\n-\t\t\t (match_operand:SI 2 \"register_operand\" \"d\"))\n-\t\t\t(match_operand:DI 1 \"register_operand\" \"d\")))]\n-  \"\"\n-  \"%0 = %1 <op>  %2;\\\\n\\\\t%H0 = <high_result>;\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"seq_insns\" \"multi\")])\n-\n-(define_insn \"*<optab>di_sesdi_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (any_logical:DI (sign_extend:DI\n-\t\t\t (match_operand:SI 2 \"register_operand\" \"d\"))\n-\t\t\t(match_operand:DI 1 \"register_operand\" \"0\")))\n-   (clobber (match_scratch:SI 3 \"=&d\"))]\n-  \"\"\n-  \"%0 = %1 <op> %2;\\\\n\\\\t%3 = %2;\\\\n\\\\t%3 >>>= 31;\\\\n\\\\t%H0 = %H1 <op> %3;\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"seq_insns\" \"multi\")])\n-\n-(define_insn \"negdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (neg:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n-   (clobber (match_scratch:SI 2 \"=&d\"))\n-   (clobber (reg:CC REG_CC))]\n-  \"\"\n-  \"%2 = 0; %2 = %2 - %1; cc = ac0; cc = !cc; %2 = cc;\\\\n\\\\t%0 = -%1; %H0 = -%H1; %H0 = %H0 - %2;\"\n-  [(set_attr \"length\" \"16\")\n-   (set_attr \"seq_insns\" \"multi\")])\n-\n-(define_insn \"one_cmpldi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (not:DI (match_operand:DI 1 \"register_operand\" \"d\")))]\n-  \"\"\n-  \"%0 = ~%1;\\\\n\\\\t%H0 = ~%H1;\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"seq_insns\" \"multi\")])\n-\n-;; DImode zero and sign extend patterns\n-\n-(define_insn_and_split \"zero_extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\")))]\n-  \"\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(set (match_dup 3) (const_int 0))]\n {\n-  split_di (operands, 1, operands + 2, operands + 3);\n-  if (REGNO (operands[0]) != REGNO (operands[1]))\n-    emit_move_insn (operands[2], operands[1]);\n+  rtx hi_half[3], lo_half[3];\n+  enum insn_code icode = CODE_FOR_<optab>si3;\n+  if (!reg_overlap_mentioned_p (operands[0], operands[1])\n+      && !reg_overlap_mentioned_p (operands[0], operands[2]))\n+    emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+  split_di (operands, 3, lo_half, hi_half);\n+  if (!(*insn_data[icode].operand[2].predicate) (lo_half[2], SImode))\n+    lo_half[2] = force_reg (SImode, lo_half[2]);\n+  emit_insn (GEN_FCN (icode) (lo_half[0], lo_half[1], lo_half[2]));\n+  if (!(*insn_data[icode].operand[2].predicate) (hi_half[2], SImode))\n+    hi_half[2] = force_reg (SImode, hi_half[2]);\n+  emit_insn (GEN_FCN (icode) (hi_half[0], hi_half[1], hi_half[2]));\n+  DONE;\n })\n \n (define_insn \"zero_extendqidi2\"\n@@ -1008,94 +967,94 @@\n \n (define_insn \"add_with_carry\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n+        (plus:SI (match_operand:SI 1 \"register_operand\" \"%0,d\")\n                  (match_operand:SI 2 \"nonmemory_operand\" \"Ks7,d\")))\n-   (set (match_operand:SI 3 \"register_operand\" \"=d,d\")\n-\t(truncate:SI\n-\t (lshiftrt:DI (plus:DI (zero_extend:DI (match_dup 1))\n-\t\t\t       (zero_extend:DI (match_dup 2)))\n-\t\t      (const_int 32))))\n-   (clobber (reg:CC 34))]\n+   (set (match_operand:BI 3 \"register_operand\" \"=C,C\")\n+\t(ltu:BI (not:SI (match_dup 1)) (match_dup 2)))]\n   \"\"\n   \"@\n-   %0 += %2; cc = ac0; %3 = cc;\n-   %0 = %0 + %2; cc = ac0; %3 = cc;\"\n+   %0 += %2; cc = ac0;\n+   %0 = %1 + %2; cc = ac0;\"\n   [(set_attr \"type\" \"alu0\")\n-   (set_attr \"length\" \"6\")\n+   (set_attr \"length\" \"4\")\n    (set_attr \"seq_insns\" \"multi\")])\n \n-(define_insn \"adddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&d,&d,&d\")\n-        (plus:DI (match_operand:DI 1 \"register_operand\" \"%0,0,0\")\n-                 (match_operand:DI 2 \"nonmemory_operand\" \"Kn7,Ks7,d\")))\n-   (clobber (match_scratch:SI 3 \"=&d,&d,&d\"))\n-   (clobber (reg:CC 34))]\n+(define_insn \"sub_with_carry\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (minus:SI (match_operand:SI 1 \"register_operand\" \"%d\")\n+\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"d\")))\n+   (set (match_operand:BI 3 \"register_operand\" \"=C\")\n+\t(leu:BI (match_dup 2) (match_dup 1)))]\n   \"\"\n-  \"@\n-   %0 += %2; cc = ac0; %3 = cc; %H0 += -1; %H0 = %H0 + %3;\n-   %0 += %2; cc = ac0; %3 = cc; %H0 = %H0 + %3;\n-   %0 = %0 + %2; cc = ac0; %3 = cc; %H0 = %H0 + %H2; %H0 = %H0 + %3;\"\n+  \"%0 = %1 - %2; cc = ac0;\"\n   [(set_attr \"type\" \"alu0\")\n-   (set_attr \"length\" \"10,8,10\")\n-   (set_attr \"seq_insns\" \"multi,multi,multi\")])\n-\n-(define_insn \"subdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n-        (minus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                  (match_operand:DI 2 \"register_operand\" \"d\")))\n-   (clobber (reg:CC 34))]\n-  \"\"\n-  \"%0 = %1-%2;\\\\n\\\\tcc = ac0;\\\\n\\\\t%H0 = %H1-%H2;\\\\n\\\\tif cc jump 1f;\\\\n\\\\t%H0 += -1;\\\\n\\\\t1:\"\n-  [(set_attr \"length\" \"10\")\n-   (set_attr \"seq_insns\" \"multi\")])\n-\n-(define_insn \"*subdi_di_zesidi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (minus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                  (zero_extend:DI\n-                  (match_operand:SI 2 \"register_operand\" \"d\"))))\n-   (clobber (match_scratch:SI 3 \"=&d\"))\n-   (clobber (reg:CC 34))]\n-  \"\"\n-  \"%0 = %1 - %2;\\\\n\\\\tcc = ac0;\\\\n\\\\tcc = ! cc;\\\\n\\\\t%3 = cc;\\\\n\\\\t%H0 = %H1 - %3;\"\n-  [(set_attr \"length\" \"10\")\n-   (set_attr \"seq_insns\" \"multi\")])\n-\n-(define_insn \"*subdi_zesidi_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (minus:DI (zero_extend:DI\n-                  (match_operand:SI 2 \"register_operand\" \"d\"))\n-                  (match_operand:DI 1 \"register_operand\" \"0\")))\n-   (clobber (match_scratch:SI 3 \"=&d\"))\n-   (clobber (reg:CC 34))]\n-  \"\"\n-  \"%0 = %2 - %1;\\\\n\\\\tcc = ac0;\\\\n\\\\tcc = ! cc;\\\\n\\\\t%3 = cc;\\\\n\\\\t%3 = -%3;\\\\n\\\\t%H0 = %3 - %H1\"\n-  [(set_attr \"length\" \"12\")\n+   (set_attr \"length\" \"4\")\n    (set_attr \"seq_insns\" \"multi\")])\n \n-(define_insn \"*subdi_di_sesidi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (minus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                  (sign_extend:DI\n-                  (match_operand:SI 2 \"register_operand\" \"d\"))))\n-   (clobber (match_scratch:SI 3 \"=&d\"))\n+(define_expand \"adddi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+                 (match_operand:DI 2 \"nonmemory_operand\" \"\")))\n+   (clobber (match_scratch:SI 3 \"\"))\n    (clobber (reg:CC 34))]\n   \"\"\n-  \"%0 = %1 - %2;\\\\n\\\\tcc = ac0;\\\\n\\\\t%3 = %2;\\\\n\\\\t%3 >>>= 31;\\\\n\\\\t%H0 = %H1 - %3;\\\\n\\\\tif cc jump 1f;\\\\n\\\\t%H0 += -1;\\\\n\\\\t1:\"\n-  [(set_attr \"length\" \"14\")\n-   (set_attr \"seq_insns\" \"multi\")])\n+{\n+  rtx xops[8];\n+  xops[0] = gen_lowpart (SImode, operands[0]);\n+  xops[1] = simplify_gen_subreg (SImode, operands[0], DImode, 4);\n+  xops[2] = gen_lowpart (SImode, operands[1]);\n+  xops[3] = simplify_gen_subreg (SImode, operands[1], DImode, 4);\n+  xops[4] = gen_lowpart (SImode, operands[2]);\n+  xops[5] = simplify_gen_subreg (SImode, operands[2], DImode, 4);\n+  xops[6] = gen_reg_rtx (SImode);\n+  xops[7] = gen_rtx_REG (BImode, REG_CC);\n+  if (!register_operand (xops[4], SImode)\n+      && (GET_CODE (xops[4]) != CONST_INT\n+          || !CONST_OK_FOR_K (INTVAL (xops[4]), \"Ks7\")))\n+    xops[4] = force_reg (SImode, xops[4]);\n+  if (!reg_overlap_mentioned_p (operands[0], operands[1])\n+      && !reg_overlap_mentioned_p (operands[0], operands[2]))\n+    emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+  emit_insn (gen_add_with_carry (xops[0], xops[2], xops[4], xops[7]));\n+  emit_insn (gen_movbisi (xops[6], xops[7]));\n+  if (!register_operand (xops[5], SImode)\n+      && (GET_CODE (xops[5]) != CONST_INT\n+          || !CONST_OK_FOR_K (INTVAL (xops[5]), \"Ks7\")))\n+    xops[5] = force_reg (SImode, xops[5]);\n+  if (xops[5] != const0_rtx)\n+    emit_insn (gen_addsi3 (xops[1], xops[3], xops[5]));\n+  else\n+    emit_move_insn (xops[1], xops[3]);\n+  emit_insn (gen_addsi3 (xops[1], xops[1], xops[6]));\n+  DONE;\n+})\n \n-(define_insn \"*subdi_sesidi_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (minus:DI (sign_extend:DI\n-                  (match_operand:SI 2 \"register_operand\" \"d\"))\n-                  (match_operand:DI 1 \"register_operand\" \"0\")))\n-   (clobber (match_scratch:SI 3 \"=&d\"))\n+(define_expand \"subdi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+                  (match_operand:DI 2 \"register_operand\" \"\")))\n    (clobber (reg:CC 34))]\n   \"\"\n-  \"%0 = %2 - %1;\\\\n\\\\tcc = ac0;\\\\n\\\\t%3 = %2;\\\\n\\\\t%3 >>>= 31;\\\\n\\\\t%H0 = %3 - %H1;\\\\n\\\\tif cc jump 1f;\\\\n\\\\t%H0 += -1;\\\\n\\\\t1:\"\n-  [(set_attr \"length\" \"14\")\n-   (set_attr \"seq_insns\" \"multi\")])\n+{\n+  rtx xops[8];\n+  xops[0] = gen_lowpart (SImode, operands[0]);\n+  xops[1] = simplify_gen_subreg (SImode, operands[0], DImode, 4);\n+  xops[2] = gen_lowpart (SImode, operands[1]);\n+  xops[3] = simplify_gen_subreg (SImode, operands[1], DImode, 4);\n+  xops[4] = gen_lowpart (SImode, operands[2]);\n+  xops[5] = simplify_gen_subreg (SImode, operands[2], DImode, 4);\n+  xops[6] = gen_reg_rtx (SImode);\n+  xops[7] = gen_rtx_REG (BImode, REG_CC);\n+  if (!reg_overlap_mentioned_p (operands[0], operands[1])\n+      && !reg_overlap_mentioned_p (operands[0], operands[2]))\n+    emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+  emit_insn (gen_sub_with_carry (xops[0], xops[2], xops[4], xops[7]));\n+  emit_insn (gen_notbi (xops[7], xops[7]));\n+  emit_insn (gen_movbisi (xops[6], xops[7]));\n+  emit_insn (gen_subsi3 (xops[1], xops[3], xops[5]));\n+  emit_insn (gen_subsi3 (xops[1], xops[1], xops[6]));\n+  DONE;\n+})\n \n ;; Combined shift/add instructions\n \n@@ -2659,7 +2618,7 @@\n   \"%0 = CC;\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"notbi\"\n   [(set (match_operand:BI 0 \"register_operand\" \"=C\")\n \t(eq:BI (match_operand:BI 1 \"register_operand\" \" 0\")\n \t       (const_int 0)))]"}]}