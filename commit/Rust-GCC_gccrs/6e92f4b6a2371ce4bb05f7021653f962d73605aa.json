{"sha": "6e92f4b6a2371ce4bb05f7021653f962d73605aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU5MmY0YjZhMjM3MWNlNGJiMDVmNzAyMTY1M2Y5NjJkNzM2MDVhYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-03-05T07:09:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-03-05T07:09:04Z"}, "message": "Warning fixes:\n\n        * mips/iris6.h (TARGET_DEFAULT): Parenthesize macro definition.\n        * mips/mips.c: Include stdlib.h and unistd.h.\n        (mips_asm_file_end): Add braces around empty body in an if-statement.\n        (function_prologue): Wrap variable `fnname' in\n        !FUNCTION_NAME_ALREADY_DECLARED.  Correct format specifier in fprintf.\n        (mips_select_rtx_section, mips_select_section): Declare as void.\n        * mips/mips.h: Add prototypes for extern functions in mips.c.\n        (FUNCTION_ARG_REGNO_P): Add parentheses around && within ||.\n        (ENCODE_SECTION_INFO): Add braces around empty body in an\n        if-statement.\n        * mips/mips.md (movdi): Add parentheses around && within ||.\n        (movsf, movdf): Likewise.\n        (branch_zero, branch_zero_di): Add default case in\n        enumeration switch.\n\nFrom-SVN: r18419", "tree": {"sha": "657a438085e6bca24f8c48b421acf3350cb9ab15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/657a438085e6bca24f8c48b421acf3350cb9ab15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e92f4b6a2371ce4bb05f7021653f962d73605aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e92f4b6a2371ce4bb05f7021653f962d73605aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e92f4b6a2371ce4bb05f7021653f962d73605aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e92f4b6a2371ce4bb05f7021653f962d73605aa/comments", "author": null, "committer": null, "parents": [{"sha": "b10df6f5ec6c2c21dd3049cc24573d180a658391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10df6f5ec6c2c21dd3049cc24573d180a658391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b10df6f5ec6c2c21dd3049cc24573d180a658391"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "8b23c8b4a5cd5ed9b9498f5d0c0ad3f0ff16bb28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e92f4b6a2371ce4bb05f7021653f962d73605aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e92f4b6a2371ce4bb05f7021653f962d73605aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e92f4b6a2371ce4bb05f7021653f962d73605aa", "patch": "@@ -1,3 +1,24 @@\n+Thu Mar  5 09:55:15 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+        * mips/iris6.h (TARGET_DEFAULT): Parenthesize macro definition.\n+\t \n+        * mips/mips.c: Include stdlib.h and unistd.h.\n+        (mips_asm_file_end): Add braces around empty body in an if-statement.\n+        (function_prologue): Wrap variable `fnname' in\n+        !FUNCTION_NAME_ALREADY_DECLARED.  Correct format specifier in fprintf.\n+        (mips_select_rtx_section, mips_select_section): Declare as void.\n+\t \n+        * mips/mips.h: Add prototypes for extern functions in mips.c.\n+        (FUNCTION_ARG_REGNO_P): Add parentheses around && within ||.\n+        (ENCODE_SECTION_INFO): Add braces around empty body in an\n+        if-statement.\n+\t \n+        * mips/mips.md (movdi): Add parentheses around && within ||.\n+        (movsf, movdf): Likewise.\n+        (branch_zero, branch_zero_di): Add default case in\n+\tenumeration switch.\n+\t\n+\n Thu Mar  5 02:45:48 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha/alpha.h (TARGET_WINDOWS_NT, TARGET_OPEN_VMS): Just make them"}, {"sha": "fb4276fd467f1bb8541b82d600b12c4ead49e281", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e92f4b6a2371ce4bb05f7021653f962d73605aa/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e92f4b6a2371ce4bb05f7021653f962d73605aa/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=6e92f4b6a2371ce4bb05f7021653f962d73605aa", "patch": "@@ -24,7 +24,7 @@ Boston, MA 02111-1307, USA.  */\n #define MULTILIB_DEFAULTS { \"mabi=n32\" }\n \n #ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT MASK_ABICALLS|MASK_FLOAT64|MASK_64BIT\n+#define TARGET_DEFAULT (MASK_ABICALLS|MASK_FLOAT64|MASK_64BIT)\n #endif\n \n #include \"mips/iris5.h\""}, {"sha": "82b0ce5316cdbea3e9b2b920b31af9bbfb5b39ab", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e92f4b6a2371ce4bb05f7021653f962d73605aa/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e92f4b6a2371ce4bb05f7021653f962d73605aa/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6e92f4b6a2371ce4bb05f7021653f962d73605aa", "patch": "@@ -29,6 +29,12 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n \n #include <stdio.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n \n #include \"rtl.h\"\n #include \"regs.h\"\n@@ -5332,7 +5338,9 @@ mips_asm_file_end (file)\n   int len;\n \n   if (HALF_PIC_P ())\n-    HALF_PIC_FINISH (file);\n+    {\n+      HALF_PIC_FINISH (file);\n+    }\n \n   if (extern_head)\n     {\n@@ -6079,7 +6087,9 @@ function_prologue (file, size)\n      FILE *file;\n      int size;\n {\n+#ifndef FUNCTION_NAME_ALREADY_DECLARED\n   char *fnname;\n+#endif\n   long tsize = current_frame_info.total_size;\n \n   ASM_OUTPUT_SOURCE_FILENAME (file, DECL_SOURCE_FILE (current_function_decl));\n@@ -6118,7 +6128,7 @@ function_prologue (file, size)\n \n   if (!flag_inhibit_size_directive)\n     {\n-      fprintf (file, \"\\t.frame\\t%s,%d,%s\\t\\t# vars= %d, regs= %d/%d, args= %d, extra= %d\\n\",\n+      fprintf (file, \"\\t.frame\\t%s,%ld,%s\\t\\t# vars= %ld, regs= %d/%d, args= %d, extra= %ld\\n\",\n \t      reg_names[ (frame_pointer_needed) ? HARD_FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM ],\n \t      tsize,\n \t      reg_names[31 + GP_REG_FIRST],\n@@ -6856,6 +6866,7 @@ mips_can_use_return_insn ()\n /* Choose the section to use for the constant rtx expression X that has\n    mode MODE.  */\n \n+void\n mips_select_rtx_section (mode, x)\n      enum machine_mode mode;\n      rtx x;\n@@ -6889,6 +6900,7 @@ mips_select_rtx_section (mode, x)\n /* Choose the section to use for DECL.  RELOC is true if its value contains\n    any relocatable expression.  */\n \n+void\n mips_select_section (decl, reloc)\n      tree decl;\n      int reloc;"}, {"sha": "46ad8c80c322af449388272cbdccbf3cbd7d3cdd", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e92f4b6a2371ce4bb05f7021653f962d73605aa/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e92f4b6a2371ce4bb05f7021653f962d73605aa/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=6e92f4b6a2371ce4bb05f7021653f962d73605aa", "patch": "@@ -164,6 +164,7 @@ extern int\t\tarith32_operand ();\n extern int\t\tarith_operand ();\n extern int\t\tcmp_op ();\n extern long\t\tcompute_frame_size ();\n+extern int\t\tconst_float_1_operand ();\n extern void\t\texpand_block_move ();\n extern int\t\tequality_op ();\n extern void\t\tfinal_prescan_insn ();\n@@ -181,6 +182,7 @@ extern int\t\tlarge_int ();\n extern int\t\tmips_address_cost ();\n extern void\t\tmips_asm_file_end ();\n extern void\t\tmips_asm_file_start ();\n+extern int\t\tmips_can_use_return_insn ();\n extern int\t\tmips_const_double_ok ();\n extern void\t\tmips_count_memory_refs ();\n extern int\t\tmips_debugger_offset ();\n@@ -215,19 +217,23 @@ extern void\t\tmips_order_regs_for_local_alloc ();\n extern struct rtx_def *\tmips16_gp_pseudo_reg ();\n extern struct rtx_def * mips16_gp_offset ();\n extern int\t\tmips16_gp_offset_p ();\n+extern int\t\tmips16_constant ();\n extern int\t\tmips16_constant_after_function_p ();\n extern int\t\tbuild_mips16_call_stub ();\n \n /* Recognition functions that return if a condition is true.  */\n extern int\t\taddress_operand ();\n+extern int\t\tcall_insn_operand ();\n extern int\t\tconst_double_operand ();\n extern int\t\tconst_int_operand ();\n+extern int\t\tconsttable_operand ();\n extern int\t\tgeneral_operand ();\n extern int\t\timmediate_operand ();\n extern int\t\tmemory_address_p ();\n extern int\t\tmemory_operand ();\n extern int\t\tnonimmediate_operand ();\n extern int\t\tnonmemory_operand ();\n+extern int\t\tpic_address_needs_scratch ();\n extern int\t\tregister_operand ();\n extern int\t\tscratch_operand ();\n extern int\t\tmove_operand ();\n@@ -263,6 +269,8 @@ extern void\t\trdata_section ();\n extern void\t\treadonly_data_section ();\n extern void\t\tsdata_section ();\n extern void\t\ttext_section ();\n+extern void\t\tmips_select_rtx_section ();\n+extern void\t\tmips_select_section ();\n \n /* Stubs for half-pic support if not OSF/1 reference platform.  */\n \n@@ -2321,10 +2329,10 @@ extern struct mips_frame_info current_frame_info;\n \n #define FUNCTION_ARG_REGNO_P(N)\t\t\t\t\t\\\n   (((N) >= GP_ARG_FIRST && (N) <= GP_ARG_LAST)\t\t\t\\\n-   || (! TARGET_SOFT_FLOAT\t\t\t\t\t\\\n+   || ((! TARGET_SOFT_FLOAT\t\t\t\t\t\\\n        && ((N) >= FP_ARG_FIRST && (N) <= FP_ARG_LAST)\t\t\\\n        && (TARGET_FLOAT64 || (0 == (N) % 2)))\t\t\t\\\n-   && ! fixed_regs[N])\n+       && ! fixed_regs[N]))\n \n /* A C expression which can inhibit the returning of certain function\n    values in registers, based on the type of value.  A nonzero value says\n@@ -3040,7 +3048,9 @@ do\t\t\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     else if (HALF_PIC_P ())\t\t\t\t\t\t\\\n-      HALF_PIC_ENCODE (DECL);\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        HALF_PIC_ENCODE (DECL);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n "}, {"sha": "114ad10bd3711764d50aa4fa0e18ba4b53e7e722", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e92f4b6a2371ce4bb05f7021653f962d73605aa/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e92f4b6a2371ce4bb05f7021653f962d73605aa/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=6e92f4b6a2371ce4bb05f7021653f962d73605aa", "patch": "@@ -4420,8 +4420,8 @@ move\\\\t%0,%z4\\\\n\\\\\n       && !register_operand (operands[0], DImode)\n       && !register_operand (operands[1], DImode)\n       && (TARGET_MIPS16\n-\t  || (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0)\n-\t      && operands[1] != CONST0_RTX (DImode)))\n+\t  || ((GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0)\n+\t       && operands[1] != CONST0_RTX (DImode))))\n     {\n       rtx temp = force_reg (DImode, operands[1]);\n       emit_move_insn (operands[0], temp);\n@@ -5500,8 +5500,8 @@ move\\\\t%0,%z4\\\\n\\\\\n       && !register_operand (operands[0], SFmode)\n       && !register_operand (operands[1], SFmode)\n       && (TARGET_MIPS16\n-\t  || (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0)\n-\t      && operands[1] != CONST0_RTX (SFmode)))\n+\t  || ((GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0)\n+\t       && operands[1] != CONST0_RTX (SFmode))))\n     {\n       rtx temp = force_reg (SFmode, operands[1]);\n       emit_move_insn (operands[0], temp);\n@@ -5560,8 +5560,8 @@ move\\\\t%0,%z4\\\\n\\\\\n       && !register_operand (operands[0], DFmode)\n       && !register_operand (operands[1], DFmode)\n       && (TARGET_MIPS16\n-\t  || (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0)\n-\t      && operands[1] != CONST0_RTX (DFmode)))\n+\t  || ((GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0)\n+\t       && operands[1] != CONST0_RTX (DFmode))))\n     {\n       rtx temp = force_reg (DFmode, operands[1]);\n       emit_move_insn (operands[0], temp);\n@@ -7140,6 +7140,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \tcase LEU: return \\\"%*beq%?\\\\t%z1,%.,%2\\\";\n \tcase GEU: return \\\"%*j\\\\t%2\\\";\n \tcase LTU: return \\\"%*bne%?\\\\t%.,%.,%2\\\";\n+\tdefault:\n+\t  break;\n \t}\n \n       return \\\"%*b%C0z%?\\\\t%z1,%2\\\";\n@@ -7154,6 +7156,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \tcase LEU: return \\\"%*bne%?\\\\t%z1,%.,%3\\\";\n \tcase GEU: return \\\"%*beq%?\\\\t%.,%.,%3\\\";\n \tcase LTU: return \\\"%*j\\\\t%3\\\";\n+\tdefault:\n+\t  break;\n \t}\n \n       return \\\"%*b%N0z%?\\\\t%z1,%3\\\";\n@@ -7214,6 +7218,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \tcase LEU: return \\\"%*beq%?\\\\t%z1,%.,%2\\\";\n \tcase GEU: return \\\"%*j\\\\t%2\\\";\n \tcase LTU: return \\\"%*bne%?\\\\t%.,%.,%2\\\";\n+\tdefault:\n+\t  break;\n \t}\n \n       return \\\"%*b%C0z%?\\\\t%z1,%2\\\";\n@@ -7228,6 +7234,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \tcase LEU: return \\\"%*bne%?\\\\t%z1,%.,%3\\\";\n \tcase GEU: return \\\"%*beq%?\\\\t%.,%.,%3\\\";\n \tcase LTU: return \\\"%*j\\\\t%3\\\";\n+\tdefault:\n+\t  break;\n \t}\n \n       return \\\"%*b%N0z%?\\\\t%z1,%3\\\";"}]}