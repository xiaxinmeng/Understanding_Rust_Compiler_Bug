{"sha": "3729852e407e5e1c4f1bbacea1b53e61d7609dad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcyOTg1MmU0MDdlNWUxYzRmMWJiYWNlYTFiNTNlNjFkNzYwOWRhZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-09-03T07:50:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-09-03T07:50:46Z"}, "message": "re PR tree-optimization/91597 (GCC miscompiles a branch depending on a pointer tag)\n\n\tPR tree-optimization/91597\n\t* tree-vrp.c (extract_range_from_binary_expr): Remove unsafe\n\tBIT_AND_EXPR optimization for pointers, even if both operand\n\tranges don't include NULL, the result can be NULL.\n\n\t* gcc.c-torture/execute/pr91597.c: New test.\n\nCo-Authored-By: Richard Biener <rguenther@suse.de>\n\nFrom-SVN: r275330", "tree": {"sha": "1dcd10f803b96abc9205d08fe36771644ea96fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dcd10f803b96abc9205d08fe36771644ea96fc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3729852e407e5e1c4f1bbacea1b53e61d7609dad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3729852e407e5e1c4f1bbacea1b53e61d7609dad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3729852e407e5e1c4f1bbacea1b53e61d7609dad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3729852e407e5e1c4f1bbacea1b53e61d7609dad/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a8d4a7ec496dbd6602e373dcfcb72c25c60f86"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "1d20ffc9d5ac812e79b87797cce0d2c8ba3b8a7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3729852e407e5e1c4f1bbacea1b53e61d7609dad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3729852e407e5e1c4f1bbacea1b53e61d7609dad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3729852e407e5e1c4f1bbacea1b53e61d7609dad", "patch": "@@ -1,3 +1,11 @@\n+2019-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91597\n+\t* tree-vrp.c (extract_range_from_binary_expr): Remove unsafe\n+\tBIT_AND_EXPR optimization for pointers, even if both operand\n+\tranges don't include NULL, the result can be NULL.\n+\n 2019-09-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/91605"}, {"sha": "651baebe5f7a5d834ff00c34f9ecf554983753dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3729852e407e5e1c4f1bbacea1b53e61d7609dad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3729852e407e5e1c4f1bbacea1b53e61d7609dad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3729852e407e5e1c4f1bbacea1b53e61d7609dad", "patch": "@@ -1,3 +1,9 @@\n+2019-09-03  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91597\n+\t* gcc.c-torture/execute/pr91597.c: New test.\n+\n 2019-09-03  Alexandre Oliva <oliva@adacore.com>\n \n \t* gcc.target/i386/20020616-1.c: Preserve full register across"}, {"sha": "6a917cb58af4e2f96a985cf19dacc1df9faf0910", "filename": "gcc/testsuite/gcc.c-torture/execute/pr91597.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3729852e407e5e1c4f1bbacea1b53e61d7609dad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91597.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3729852e407e5e1c4f1bbacea1b53e61d7609dad/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91597.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91597.c?ref=3729852e407e5e1c4f1bbacea1b53e61d7609dad", "patch": "@@ -0,0 +1,48 @@\n+/* PR tree-optimization/91597 */\n+\n+enum E { A, B, C };\n+struct __attribute__((aligned (4))) S { enum E e; };\n+\n+enum E\n+foo (struct S *o)\n+{\n+  if (((__UINTPTR_TYPE__) (o) & 1) == 0)\n+    return o->e;\n+  else\n+    return A;\n+}\n+\n+int\n+bar (struct S *o)\n+{\n+  return foo (o) == B || foo (o) == C;\n+}\n+\n+static inline void\n+baz (struct S *o, int d)\n+{\n+  if (__builtin_expect (!bar (o), 0))\n+    __builtin_abort ();\n+  if (d > 2) return;\n+  baz (o, d + 1);\n+}\n+\n+void\n+qux (struct S *o)\n+{\n+  switch (o->e)\n+    {\n+    case A: return;\n+    case B: baz (o, 0); break;\n+    case C: baz (o, 0); break;\n+    }\n+}\n+\n+struct S s = { C };\n+\n+int\n+main ()\n+{\n+  qux (&s);\n+  return 0;\n+}"}, {"sha": "0a7e7c7609b0eb575a228b3400e70ba4eac7e712", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3729852e407e5e1c4f1bbacea1b53e61d7609dad/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3729852e407e5e1c4f1bbacea1b53e61d7609dad/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=3729852e407e5e1c4f1bbacea1b53e61d7609dad", "patch": "@@ -1741,9 +1741,7 @@ extract_range_from_binary_expr (value_range_base *vr,\n \t{\n \t  /* For pointer types, we are really only interested in asserting\n \t     whether the expression evaluates to non-NULL.  */\n-\t  if (!range_includes_zero_p (&vr0) && !range_includes_zero_p (&vr1))\n-\t    vr->set_nonzero (expr_type);\n-\t  else if (vr0.zero_p () || vr1.zero_p ())\n+\t  if (vr0.zero_p () || vr1.zero_p ())\n \t    vr->set_zero (expr_type);\n \t  else\n \t    vr->set_varying (expr_type);"}]}