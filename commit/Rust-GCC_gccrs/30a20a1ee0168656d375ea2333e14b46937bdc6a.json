{"sha": "30a20a1ee0168656d375ea2333e14b46937bdc6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhMjBhMWVlMDE2ODY1NmQzNzVlYTIzMzNlMTRiNDY5MzdiZGM2YQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-04-03T00:26:58Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-04-03T00:26:58Z"}, "message": "New concept checking implementation.\n\n2001-04-02  Phil Edwards  <pme@sources.redhat.com>\n\n\tNew concept checking implementation.\n\t* docs/html/19_diagnostics/howto.html:  Document.\n\t* docs/html/17_intro/concept_check.diff:  New file, for reference.\n\t* include/bits/boost_concept_check.h:  New file from Boost.\n\t* include/bits/c++config:  Update comments.\n\n\t* include/bits/concept_check.h:  New file.\n\t* include/bits/concept_checks.h:  Removed.\n\t* include/bits/container_concepts.h:  Removed.\n\t* include/bits/sequence_concepts.h:  Removed.\n\t* include/bits/stl_iterator_base.h:  Removed; split into...\n\t* include/bits/stl_iterator_base_funcs.h:  ...this new file...\n\t* include/bits/stl_iterator_base_types.h:  ...and this new file.\n\n\t* include/bits/sbuf_iter.h:  Update to use new implementation.\n\t* include/bits/std_iterator.h:  Likewise.\n\t* include/bits/std_memory.h:  Likewise.\n\t* include/bits/stl_algo.h:  Likewise.\n\t* include/bits/stl_algobase.h:  Likewise.\n\t* include/bits/stl_construct.h:  Likewise.\n\t* include/bits/stl_deque.h:  Likewise.\n\t* include/bits/stl_heap.h:  Likewise.\n\t* include/bits/stl_list.h:  Likewise.\n\t* include/bits/stl_map.h:  Likewise.\n\t* include/bits/stl_multimap.h:  Likewise.\n\t* include/bits/stl_multiset.h:  Likewise.\n\t* include/bits/stl_numeric.h:  Likewise.\n\t* include/bits/stl_queue.h:  Likewise.\n\t* include/bits/stl_set.h:  Likewise.\n\t* include/bits/stl_stack.h:  Likewise.\n\t* include/bits/stl_uninitialized.h:  Likewise.\n\t* include/bits/stl_vector.h:  Likewise.\n\t* include/ext/hash_map:  Likewise.\n\t* include/ext/hash_set:  Likewise.\n\t* include/ext/slist:  Likewise.\n\t* include/ext/stl_hashtable.h:  Likewise.\n\n\t* src/Makefile.am (base_headers):  Update list of headers.\n\t* Makefile.in:  Regenerated.\n\t* src/Makefile.in:  Regenerated.\n\t* libio/Makefile.in:  Regenerated.\n\t* libmath/Makefile.in:  Regenerated.\n\t* libsupc++/Makefile.in:  Regenerated.\n\t* testsuite/Makefile.in:  Regenerated.\n\n\t* docs/html/install.html:  Update contact information.\n\t* docs/html/17_intro/howto.html:  Ditto.\n\t* docs/html/18_support/howto.html:  Ditto.\n\t* docs/html/20_util/howto.html:  Ditto.\n\t* docs/html/21_strings/howto.html:  Ditto.\n\t* docs/html/22_locale/howto.html:  Ditto.\n\t* docs/html/23_containers/howto.html:  Ditto.\n\t* docs/html/24_iterators/howto.html:  Ditto.\n\t* docs/html/25_algorithms/howto.html:  Ditto.\n\t* docs/html/26_numerics/howto.html:  Ditto.\n\t* docs/html/27_io/howto.html:  Ditto.\n\t* docs/html/faq/index.html:  Ditto, plus info on new checking code.\n\t* docs/html/ext/howto.html:  Ditto, plus info on new checking code.\n\t* docs/html/faq/index.txt:  Regenerated.\n\nFrom-SVN: r41031", "tree": {"sha": "bafb595dea147deb7ac77eeb4fcdb31ddddbc477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bafb595dea147deb7ac77eeb4fcdb31ddddbc477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a20a1ee0168656d375ea2333e14b46937bdc6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a20a1ee0168656d375ea2333e14b46937bdc6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a20a1ee0168656d375ea2333e14b46937bdc6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a20a1ee0168656d375ea2333e14b46937bdc6a/comments", "author": null, "committer": null, "parents": [{"sha": "9f4a318c36db4565f126e4428ea856460437b27d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4a318c36db4565f126e4428ea856460437b27d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f4a318c36db4565f126e4428ea856460437b27d"}], "stats": {"total": 5611, "additions": 3234, "deletions": 2377}, "files": [{"sha": "465065977b16e976969c8aa03936e776bee22e9f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -1,3 +1,65 @@\n+2001-04-02  Phil Edwards  <pme@sources.redhat.com>\n+\n+\tNew concept checking implementation.\n+\t* docs/html/19_diagnostics/howto.html:  Document.\n+\t* docs/html/17_intro/concept_check.diff:  New file, for reference.\n+\t* include/bits/boost_concept_check.h:  New file from Boost.\n+\t* include/bits/c++config:  Update comments.\n+\n+\t* include/bits/concept_check.h:  New file.\n+\t* include/bits/concept_checks.h:  Removed.\n+\t* include/bits/container_concepts.h:  Removed.\n+\t* include/bits/sequence_concepts.h:  Removed.\n+\t* include/bits/stl_iterator_base.h:  Removed; split into...\n+\t* include/bits/stl_iterator_base_funcs.h:  ...this new file...\n+\t* include/bits/stl_iterator_base_types.h:  ...and this new file.\n+\n+\t* include/bits/sbuf_iter.h:  Update to use new implementation.\n+\t* include/bits/std_iterator.h:  Likewise.\n+\t* include/bits/std_memory.h:  Likewise.\n+\t* include/bits/stl_algo.h:  Likewise.\n+\t* include/bits/stl_algobase.h:  Likewise.\n+\t* include/bits/stl_construct.h:  Likewise.\n+\t* include/bits/stl_deque.h:  Likewise.\n+\t* include/bits/stl_heap.h:  Likewise.\n+\t* include/bits/stl_list.h:  Likewise.\n+\t* include/bits/stl_map.h:  Likewise.\n+\t* include/bits/stl_multimap.h:  Likewise.\n+\t* include/bits/stl_multiset.h:  Likewise.\n+\t* include/bits/stl_numeric.h:  Likewise.\n+\t* include/bits/stl_queue.h:  Likewise.\n+\t* include/bits/stl_set.h:  Likewise.\n+\t* include/bits/stl_stack.h:  Likewise.\n+\t* include/bits/stl_uninitialized.h:  Likewise.\n+\t* include/bits/stl_vector.h:  Likewise.\n+\t* include/ext/hash_map:  Likewise.\n+\t* include/ext/hash_set:  Likewise.\n+\t* include/ext/slist:  Likewise.\n+\t* include/ext/stl_hashtable.h:  Likewise.\n+\n+\t* src/Makefile.am (base_headers):  Update list of headers.\n+\t* Makefile.in:  Regenerated.\n+\t* src/Makefile.in:  Regenerated.\n+\t* libio/Makefile.in:  Regenerated.\n+\t* libmath/Makefile.in:  Regenerated.\n+\t* libsupc++/Makefile.in:  Regenerated.\n+\t* testsuite/Makefile.in:  Regenerated.\n+\n+\t* docs/html/install.html:  Update contact information.\n+\t* docs/html/17_intro/howto.html:  Ditto.\n+\t* docs/html/18_support/howto.html:  Ditto.\n+\t* docs/html/20_util/howto.html:  Ditto.\n+\t* docs/html/21_strings/howto.html:  Ditto.\n+\t* docs/html/22_locale/howto.html:  Ditto.\n+\t* docs/html/23_containers/howto.html:  Ditto.\n+\t* docs/html/24_iterators/howto.html:  Ditto.\n+\t* docs/html/25_algorithms/howto.html:  Ditto.\n+\t* docs/html/26_numerics/howto.html:  Ditto.\n+\t* docs/html/27_io/howto.html:  Ditto.\n+\t* docs/html/faq/index.html:  Ditto, plus info on new checking code.\n+\t* docs/html/ext/howto.html:  Ditto, plus info on new checking code.\n+\t* docs/html/faq/index.txt:  Regenerated.\n+\n 2001-04-02  Zack Weinberg  <zackw@stanford.edu>\n \n \t* testsuite/lib/libstdc++.exp (dg-test): Annotate result"}, {"sha": "301025bcf5d335e28a0cd94c1c9c886c8394c277", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -135,7 +135,48 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"EXPECT=$(EXPECT)\" \\\n+\t\"RUNTEST=$(RUNTEST)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"CC=$(CC)\" \\\n+\t\"CXX=$(CXX)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h"}, {"sha": "afb17f5efd6432ecdec01b63dd728d0dd9bc8f82", "filename": "libstdc++-v3/docs/html/17_intro/concept_check.diff", "status": "added", "additions": 382, "deletions": 0, "changes": 382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fconcept_check.diff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fconcept_check.diff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fconcept_check.diff?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -0,0 +1,382 @@\n+\n+Changes made while bringing boost/concept_check.hpp to v3's concept_check.h:\n+\n+1)  File format changed from DOS to Unix.\n+2)  Boost config.hpp and other workaround files dropped (unneeded in g++ v3).\n+3)  Conditionally-compiled code depending on those \"breakage\" macros was\n+    removed, or not, depending on the macro, so that the macros themselves\n+    are gone.  Since the same code would always be compiled, let's make it\n+    easier on the reader and a few milliseconds faster for cpplib.\n+4)  Tests for NDEBUG were removed; if NDEBUG is defined, none of the checking\n+    code will even be included.\n+5)  BOOST_CLASS_REQUIRES* changed to accept a namespace parameter.\n+6)  SameTypeConcept added (simple wrapper around existing code).\n+7)  An unused variable in OutputIteratorConcept was removed.\n+\n+At checkin, this was the exact diff, modulo the end-of-line character changes:\n+\n+\n+--- concept_check.hpp.orig\tSun Apr  1 08:59:46 2001\n++++ boost_concept_check.h\tMon Apr  2 18:56:41 2001\n+@@ -5,20 +5,15 @@\n+ // \"as is\" without express or implied warranty, and with no claim as\n+ // to its suitability for any purpose.\n+ //\n++\n++// GCC Note:  based on version 1.12.0 of the Boost library.\n+ #ifndef BOOST_CONCEPT_CHECKS_HPP\n+ #define BOOST_CONCEPT_CHECKS_HPP\n+ \n+-#include <boost/config.hpp>\n+-#include <boost/iterator.hpp>\n+-#include <boost/iterator.hpp>\n+-#include <utility>\n+-#include <boost/pending/limits.hpp>\n+-\n+-#if (__GNUC__) || defined(__KCC) || defined(__ghs) || defined(__MWERKS__)\n+-#define BOOST_FPTR &\n+-#else\n+-#define BOOST_FPTR\n+-#endif\n++#pragma GCC system_header\n++#include <bits/stl_iterator_base_types.h>    // for traits and tags\n++#include <utility>                           // for pair<>\n++\n+ \n+ namespace boost {\n+ \n+@@ -27,80 +22,64 @@\n+ template <class Concept>\n+ void function_requires()\n+ {\n+-#if !defined(NDEBUG)\n+-  void (Concept::*x)() = BOOST_FPTR Concept::constraints;\n++  void (Concept::*x)() = &Concept::constraints;\n+   ignore_unused_variable_warning(x);\n+-#endif\n+ }\n+ \n+-// The BOOST_CLASS_REQUIRES macros use function pointers as\n+-// template parameters, which VC++ does not support.\n+-\n+-#if defined(BOOST_NO_FUNCTION_PTR_TEMPLATE_PARAMETERS)\n+-\n+-#define BOOST_CLASS_REQUIRES(type_var, concept)\n+-#define BOOST_CLASS_REQUIRES2(type_var1, type_var2, concept)\n+-#define BOOST_CLASS_REQUIRES3(type_var1, type_var2, type_var3, concept)\n+-#define BOOST_CLASS_REQUIRES4(type_var1, type_var2, type_var3, type_var4, concept)\n+ \n+-#else\n+-\n+-#define BOOST_CLASS_REQUIRES(type_var, concept) \\\n+-  typedef void (concept <type_var>::* func##type_var##concept)(); \\\n++#define BOOST_CLASS_REQUIRES(type_var, ns, concept) \\\n++  typedef void (ns::concept <type_var>::* func##type_var##concept)(); \\\n+   template <func##type_var##concept _Tp1> \\\n+   struct concept_checking_##type_var##concept { }; \\\n+   typedef concept_checking_##type_var##concept< \\\n+-    BOOST_FPTR concept <type_var>::constraints> \\\n++    &ns::concept <type_var>::constraints> \\\n+     concept_checking_typedef_##type_var##concept\n+ \n+-#define BOOST_CLASS_REQUIRES2(type_var1, type_var2, concept) \\\n+-  typedef void (concept <type_var1,type_var2>::* func##type_var1##type_var2##concept)(); \\\n++#define BOOST_CLASS_REQUIRES2(type_var1, type_var2, ns, concept) \\\n++  typedef void (ns::concept <type_var1,type_var2>::* func##type_var1##type_var2##concept)(); \\\n+   template <func##type_var1##type_var2##concept _Tp1> \\\n+   struct concept_checking_##type_var1##type_var2##concept { }; \\\n+   typedef concept_checking_##type_var1##type_var2##concept< \\\n+-    BOOST_FPTR concept <type_var1,type_var2>::constraints> \\\n++    &ns::concept <type_var1,type_var2>::constraints> \\\n+     concept_checking_typedef_##type_var1##type_var2##concept\n+ \n+-#define BOOST_CLASS_REQUIRES3(type_var1, type_var2, type_var3, concept) \\\n+-  typedef void (concept <type_var1,type_var2,type_var3>::* func##type_var1##type_var2##type_var3##concept)(); \\\n++#define BOOST_CLASS_REQUIRES3(type_var1, type_var2, type_var3, ns, concept) \\\n++  typedef void (ns::concept <type_var1,type_var2,type_var3>::* func##type_var1##type_var2##type_var3##concept)(); \\\n+   template <func##type_var1##type_var2##type_var3##concept _Tp1> \\\n+   struct concept_checking_##type_var1##type_var2##type_var3##concept { }; \\\n+   typedef concept_checking_##type_var1##type_var2##type_var3##concept< \\\n+-    BOOST_FPTR concept <type_var1,type_var2,type_var3>::constraints>  \\\n++    &ns::concept <type_var1,type_var2,type_var3>::constraints>  \\\n+   concept_checking_typedef_##type_var1##type_var2##type_var3##concept\n+ \n+-#define BOOST_CLASS_REQUIRES4(type_var1, type_var2, type_var3, type_var4, concept) \\\n+-  typedef void (concept <type_var1,type_var2,type_var3,type_var4>::* func##type_var1##type_var2##type_var3##type_var4##concept)(); \\\n++#define BOOST_CLASS_REQUIRES4(type_var1, type_var2, type_var3, type_var4, ns, concept) \\\n++  typedef void (ns::concept <type_var1,type_var2,type_var3,type_var4>::* func##type_var1##type_var2##type_var3##type_var4##concept)(); \\\n+   template <func##type_var1##type_var2##type_var3##type_var4##concept _Tp1> \\\n+   struct concept_checking_##type_var1##type_var2##type_var3##type_var4##concept { }; \\\n+   typedef concept_checking_##type_var1##type_var2##type_var3##type_var4##concept< \\\n+-    BOOST_FPTR concept <type_var1,type_var2,type_var3,type_var4>::constraints>  \\\n++    &ns::concept <type_var1,type_var2,type_var3,type_var4>::constraints>  \\\n+     concept_checking_typedef_##type_var1##type_var2##type_var3##type_var4##concept\n+ \n+ \n+-#endif\n+-\n+-#if !defined BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION\n+ template <class T, class U>\n+ struct require_same { };\n+ \n+ template <class T>\n+ struct require_same<T,T> { typedef T type; };\n+-#else\n+-// This version does not perform checking, but will not do any harm.\n+-template <class T, class U>\n+-struct require_same { typedef T type; };\n+-#endif\n++\n++  template <class T, class U>\n++  struct SameTypeConcept\n++  {\n++    void constraints() {\n++      typedef typename require_same<T, U>::type req;\n++    }\n++  };\n+ \n+   template <class T>\n+   struct IntegerConcept {\n+     void constraints() { \n+-#if !defined BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION\n+       errortype_must_be_an_integer_type();\n+-#endif      \n+     }\n+   };\n+-#if !defined BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION\n+   template <> struct IntegerConcept<short> { void constraints() {} };\n+   template <> struct IntegerConcept<unsigned short> { void constraints() {} };\n+   template <> struct IntegerConcept<int> { void constraints() {} };\n+@@ -108,32 +87,24 @@\n+   template <> struct IntegerConcept<long> { void constraints() {} };\n+   template <> struct IntegerConcept<unsigned long> { void constraints() {} };\n+   // etc.\n+-#endif      \n+ \n+   template <class T>\n+   struct SignedIntegerConcept {\n+     void constraints() { \n+-#if !defined BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION\n+       errortype_must_be_a_signed_integer_type();\n+-#endif      \n+     }\n+   };\n+-#if !defined BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION\n+   template <> struct SignedIntegerConcept<short> { void constraints() {} };\n+   template <> struct SignedIntegerConcept<int> { void constraints() {} };\n+   template <> struct SignedIntegerConcept<long> { void constraints() {} };\n+   // etc.\n+-#endif      \n+ \n+   template <class T>\n+   struct UnsignedIntegerConcept {\n+     void constraints() { \n+-#if !defined BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION\n+       errortype_must_be_an_unsigned_integer_type();\n+-#endif      \n+     }\n+   };\n+-#if !defined BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION\n+   template <> struct UnsignedIntegerConcept<unsigned short>\n+     { void constraints() {} };\n+   template <> struct UnsignedIntegerConcept<unsigned int>\n+@@ -141,7 +112,6 @@\n+   template <> struct UnsignedIntegerConcept<unsigned long>\n+     { void constraints() {} };\n+   // etc.\n+-#endif      \n+ \n+   //===========================================================================\n+   // Basic Concepts\n+@@ -159,15 +129,11 @@\n+   struct AssignableConcept\n+   {\n+     void constraints() {\n+-#if !defined(_ITERATOR_) // back_insert_iterator broken for VC++ STL\n+       a = a;              // require assignment operator\n+-#endif\n+       const_constraints(a);\n+     }\n+     void const_constraints(const TT& b) {\n+-#if !defined(_ITERATOR_) // back_insert_iterator broken for VC++ STL\n+       a = b;              // const required for argument to assignment\n+-#endif\n+     }\n+     TT a;\n+   };\n+@@ -196,17 +162,13 @@\n+   {\n+     void constraints() {\n+       TT b(a);\n+-#if !defined(_ITERATOR_) // back_insert_iterator broken for VC++ STL\n+       a = a;              // require assignment operator\n+-#endif\n+       const_constraints(a);\n+       ignore_unused_variable_warning(b);\n+     }\n+     void const_constraints(const TT& b) {\n+       TT c(b);\n+-#if !defined(_ITERATOR_) // back_insert_iterator broken for VC++ STL\n+       a = b;              // const required for argument to assignment\n+-#endif\n+       ignore_unused_variable_warning(c);\n+     }\n+     TT a;\n+@@ -304,6 +266,9 @@\n+   BOOST_DEFINE_BINARY_OPERATOR_CONSTRAINT(-, SubtractOpConcept);\n+   BOOST_DEFINE_BINARY_OPERATOR_CONSTRAINT(%, ModOpConcept);\n+ \n++#undef BOOST_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT\n++#undef BOOST_DEFINE_BINARY_OPERATOR_CONSTRAINT\n++\n+   //===========================================================================\n+   // Function Object Concepts\n+ \n+@@ -318,7 +283,6 @@\n+   };\n+ \n+ \n+-#if !defined BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION\n+   template <class Func>\n+   struct GeneratorConcept<Func,void>\n+   {\n+@@ -327,7 +291,6 @@\n+     }\n+     Func f;\n+   };\n+-#endif\n+ \n+   template <class Func, class Return, class Arg>\n+   struct UnaryFunctionConcept\n+@@ -340,7 +303,6 @@\n+     Return r;\n+   };\n+ \n+-#if !defined BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION\n+   template <class Func, class Arg>\n+   struct UnaryFunctionConcept<Func, void, Arg> {\n+     void constraints() { \n+@@ -348,7 +310,6 @@\n+     }\n+     Func f;\n+   };\n+-#endif\n+ \n+   template <class Func, class Return, class First, class Second>\n+   struct BinaryFunctionConcept\n+@@ -362,7 +323,6 @@\n+     Return r;\n+   };\n+ \n+-#if !defined BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION\n+   template <class Func, class First, class Second>\n+   struct BinaryFunctionConcept<Func, void, First, Second>\n+   {\n+@@ -373,7 +333,6 @@\n+     First first;\n+     Second second;\n+   };\n+-#endif\n+ \n+   template <class Func, class Arg>\n+   struct UnaryPredicateConcept\n+@@ -422,9 +381,7 @@\n+       function_requires< AssignableConcept<TT> >();\n+       function_requires< DefaultConstructibleConcept<TT> >();\n+       function_requires< EqualityComparableConcept<TT> >();\n+-#ifndef BOOST_NO_STD_ITERATOR_TRAITS\n+       typedef typename std::iterator_traits<TT>::value_type V;\n+-#endif\n+       (void)*i;           // require dereference operator\n+     }\n+     TT i;\n+@@ -446,7 +403,6 @@\n+     void constraints() {\n+       function_requires< TrivialIteratorConcept<TT> >();\n+       // require iterator_traits typedef's\n+-#ifndef BOOST_NO_STD_ITERATOR_TRAITS\n+       typedef typename std::iterator_traits<TT>::difference_type D;\n+       function_requires< SignedIntegerConcept<D> >();\n+       typedef typename std::iterator_traits<TT>::reference R;\n+@@ -455,7 +411,6 @@\n+       function_requires< ConvertibleConcept<\n+         typename std::iterator_traits<TT>::iterator_category,\n+         std::input_iterator_tag> >();\n+-#endif\n+       ++i;                // require preincrement operator\n+       i++;                // require postincrement operator\n+     }\n+@@ -471,7 +426,7 @@\n+       i++;                // require postincrement operator\n+       *i++ = t;           // require postincrement and assignment\n+     }\n+-    TT i, j;\n++    TT i;\n+     ValueT t;\n+   };\n+ \n+@@ -480,14 +435,12 @@\n+   {\n+     void constraints() {\n+       function_requires< InputIteratorConcept<TT> >();\n+-#ifndef BOOST_NO_STD_ITERATOR_TRAITS\n+       function_requires< ConvertibleConcept<\n+         typename std::iterator_traits<TT>::iterator_category,\n+         std::forward_iterator_tag> >();\n+       typedef typename std::iterator_traits<TT>::reference reference;\n+       reference r = *i;\n+       ignore_unused_variable_warning(r);\n+-#endif\n+     }\n+     TT i;\n+   };\n+@@ -507,11 +460,9 @@\n+   {\n+     void constraints() {\n+       function_requires< ForwardIteratorConcept<TT> >();\n+-#ifndef BOOST_NO_STD_ITERATOR_TRAITS\n+       function_requires< ConvertibleConcept<\n+         typename std::iterator_traits<TT>::iterator_category,\n+         std::bidirectional_iterator_tag> >();\n+-#endif\n+       --i;                // require predecrement operator\n+       i--;                // require postdecrement operator\n+     }\n+@@ -536,12 +487,10 @@\n+     void constraints() {\n+       function_requires< BidirectionalIteratorConcept<TT> >();\n+       function_requires< ComparableConcept<TT> >();\n+-#ifndef BOOST_NO_STD_ITERATOR_TRAITS\n+       function_requires< ConvertibleConcept<\n+         typename std::iterator_traits<TT>::iterator_category,\n+         std::random_access_iterator_tag> >();\n+       typedef typename std::iterator_traits<TT>::reference R;\n+-#endif\n+ \n+       i += n;             // require assignment addition operator\n+       i = i + n; i = n + i; // require addition with difference type\n+@@ -552,11 +501,7 @@\n+     }\n+     TT a, b;\n+     TT i, j;\n+-#ifndef BOOST_NO_STD_ITERATOR_TRAITS\n+     typename std::iterator_traits<TT>::difference_type n;\n+-#else\n+-    std::ptrdiff_t n;\n+-#endif\n+   };\n+ \n+   template <class TT>\n+@@ -568,11 +513,7 @@\n+       i[n] = *i;                  // require element access and assignment\n+     }\n+     TT i;\n+-#ifndef BOOST_NO_STD_ITERATOR_TRAITS\n+     typename std::iterator_traits<TT>::difference_type n;\n+-#else\n+-    std::ptrdiff_t n;\n+-#endif\n+   };\n+ \n+   //===========================================================================\n+"}, {"sha": "ae568d4a1751d30a60808bae9e218d4fb1172bfa", "filename": "libstdc++-v3/docs/html/17_intro/howto.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 17</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.6 2000/12/03 23:47:47 jsm28 Exp $ -->\n+<!-- $Id: howto.html,v 1.1 2000/12/10 04:03:09 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -144,9 +144,8 @@ <H2><A NAME=\"4\"><TT>&lt;foo&gt;</TT> vs <TT>&lt;foo.h&gt;</TT></A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.6 2000/12/03 23:47:47 jsm28 Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.1 2000/12/10 04:03:09 pme Exp $\n </EM></P>\n \n "}, {"sha": "f2b5d881ee1f5375bd65c4c1841e3e2713d87adb", "filename": "libstdc++-v3/docs/html/18_support/howto.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 18</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.7 2000/12/03 23:47:47 jsm28 Exp $ -->\n+<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:54 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -259,9 +259,8 @@ <H2><A NAME=\"4\">Dynamic memory management</A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.7 2000/12/03 23:47:47 jsm28 Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:54 pme Exp $\n </EM></P>\n \n "}, {"sha": "26ba4cde7586b7c3c25cf6cf52ec23a010861800", "filename": "libstdc++-v3/docs/html/19_diagnostics/howto.html", "status": "modified", "additions": 37, "deletions": 52, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 19</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:54 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.2 2001/03/25 00:01:56 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -26,7 +26,7 @@ <H1>Contents</H1>\n <UL>\n    <LI><A HREF=\"#1\">Adding data to exceptions</A>\n    <LI><A HREF=\"#2\">Exception class hierarchy diagram</A>\n-   <LI><A HREF=\"#3\">Concept checkers</A>\n+   <LI><A HREF=\"#3\">Concept checkers -- <STRONG>new and improved!</STRONG></A>\n </UL>\n \n <HR>\n@@ -67,58 +67,44 @@ <H2><A NAME=\"2\">Exception class hierarchy diagram</A></H2>\n    </P>\n \n <HR>\n-<H2><A NAME=\"3\">Concept checkers</A></H2>\n-   <P>First the good news, then the bad news.</P>\n-   <P><STRONG>Good news:</STRONG>  As part of their 3.3 release, SGI\n-      added some nifty macros which\n-      perform assertions on type properties.  For example, the Standard\n-      requires that types passed as template parameters to <TT>vector</TT>\n-      be &quot;Assignable&quot; (which means what you think it means).\n+<H2><A NAME=\"3\">Concept checkers -- <STRONG>new and improved!</STRONG></A></H2>\n+   <P>Better taste!  Less fat!  Literally!</P>\n+   <P>In 1999, SGI added <EM>concept checkers</EM> to their implementation\n+      of the STL:  code which checked the template parameters of\n+      instantiated pieces of the STL, in order to insure that the parameters\n+      being used met the requirements of the standard.  For example,\n+      the Standard requires that types passed as template parameters to\n+      <TT>vector</TT> be &quot;Assignable&quot; (which means what you think\n+      it means).  The checking was done during compilation, and none of\n+      the code was executed at runtime.\n    </P>\n-   <P>The concept checkers allow the source code for <TT>vector</TT> to\n-      declare\n-      <PRE>\n-   __STL_CLASS_REQUIRES(_Tp, _Assignable);\n-      </PRE>inside the template.  <TT>_Tp</TT> is the element type of the\n-      vector, and <TT>_Assignable</TT> is the concept to be checked (it is\n-      defined in some back-end header files).  When you instantiate\n-      <TT>vector&lt;MyType&gt;</TT>, compile-time checking can be done on\n-      whether MyType meets the requirements for vectors.\n+   <P>Unfortunately, the size of the compiler files grew significantly\n+      as a result.  The checking code itself was cumbersome.  And bugs\n+      were found in it on more than one occasion.\n    </P>\n-   <P>Most (all?) of the containers and sequences are capable of performing\n-      concept checking during compilation, not just vector.\n+   <P>The primary author of the checking code, Jeremy Siek, had already\n+      started work on a replcement implementation.  The new code has been\n+      formally reviewed and accepted into\n+      <A HREF=\"http://www.boost.org/libs/concept_check/concept_check.htm\">the\n+      Boost libraries</A>, and we are pleased to incorporate it into the\n+      GNU C++ library.\n    </P>\n-   <P>If a concept is violated (thus causing a compilation failure), the\n-      error messages printed by the compiler will be of the form\n-      <PRE>\n-   _STL_ERROR::__<EM>foo</EM>_violation\n-      </PRE> where <EM>foo</EM> is a description of the precise violation.\n-      For example, if a type is required to support the preincrement\n-      operator but doesn't, then you will see\n-      _STL_ERROR::__postincrement_operator_requirement_violation, which\n-      should give you a hint as to the nature of the problem.\n+   <P>The new version imposes a much smaller space overhead on the generated\n+      object file.  The checks are also cleaner and easier to read and\n+      understand.\n    </P>\n-   <P>Other names might be seen for more specific errors, for example,\n-      _ERROR_IN_STL_CONTAINER::__begin_iterator_accessor_requirement_violation.\n+   <P>Concept checking can be disabled when you build your code, for example,\n+      to save space during a production build.  Just define (via -D or\n+      #define) any of the macros\n+      <TT>_GLIBCPP_NO_CONCEPT_CHECKS (yes, with the leading underscore),\n+      <TT>_STL_NO_CONCEPT_CHECKS</TT> (also with the leading underscore),\n+      or <TT>NDEBUG</TT>.  The first macro is specifically for this\n+      feature, the second is the disabling macro for the replaced SGI\n+      version (some code may assume SGI's version is in use), and the third\n+      is the usual macro to disable <TT>assert()</TT>, which is often turned\n+      off for production builds.\n    </P>\n-   <P>You will probably also see other errors as the malformed code is\n-      actually used.  The concept checking error messages should be printed\n-      before the others, so start at the top and work your way down.\n-   </P>\n-   <P><STRONG>Bad news:</STRONG>  The current checking code is somewhat\n-      messy.  It results in no runtime overhead, but there is a space\n-      penalty (sometimes a very large one) in the generated code.  And the\n-      code itself has bugs.\n-   </P>\n-   <P>Concept checking can be disabled when you build your code.  Just\n-      define (via -D or #define) the macro\n-      <TT>_STL_NO_CONCEPT_CHECKS</TT> (yes, with the leading underscore).\n-      In fact, this may already be defined in the library by default,\n-      depending on what decision we come to.\n-   </P>\n-   <P><STRONG>More good news:</STRONG>  Replacement code has already been\n-      written by the same author of the original code.  It's available at\n-      Boost and we hope to integrate it into the library.\n+\n    <P>Return <A HREF=\"#top\">to top of page</A> or\n       <A HREF=\"../faq/index.html\">to the FAQ</A>.\n    </P>\n@@ -129,9 +115,8 @@ <H2><A NAME=\"3\">Concept checkers</A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:54 pme Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.2 2001/03/25 00:01:56 pme Exp $\n </EM></P>\n \n "}, {"sha": "f9594688088d596b1c29528f681fa38f0d2614c5", "filename": "libstdc++-v3/docs/html/20_util/howto.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 20</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:54 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.2 2001/01/23 17:02:27 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -212,9 +212,8 @@ <H2><A NAME=\"4\">Pairs</A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:54 pme Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.2 2001/01/23 17:02:27 pme Exp $\n </EM></P>\n \n "}, {"sha": "80254269ff920da9f0ee0428adde6bbb0bd296e9", "filename": "libstdc++-v3/docs/html/21_strings/howto.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 21</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.2 2001/02/07 00:03:20 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -329,9 +329,8 @@ <H2><A NAME=\"4\">Simple transformations</A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.2 2001/02/07 00:03:20 pme Exp $\n </EM></P>\n \n "}, {"sha": "868b3d99ecb2e201c2211223a0b88ea53c15f0c0", "filename": "libstdc++-v3/docs/html/22_locale/howto.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 22</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.2 2001/02/07 00:03:20 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -225,9 +225,8 @@ <H2><A NAME=\"6\">Correct Transformations</A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.2 2001/02/07 00:03:20 pme Exp $\n </EM></P>\n \n "}, {"sha": "c8350a714835155503d6eaf8ec179cdce6c19f40", "filename": "libstdc++-v3/docs/html/23_containers/howto.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 23</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.4 2000/12/03 23:47:48 jsm28 Exp $ -->\n+<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -235,9 +235,8 @@ <H2><A NAME=\"3\">Containers and multithreading</A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.4 2000/12/03 23:47:48 jsm28 Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $\n </EM></P>\n \n "}, {"sha": "52106327ba1f288027ebbe455402fcc5a4ca8b9c", "filename": "libstdc++-v3/docs/html/24_iterators/howto.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 24</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.5 2000/12/03 23:47:48 jsm28 Exp $ -->\n+<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -84,9 +84,8 @@ <H2><A NAME=\"2\">It ends <EM>where?</EM></A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.5 2000/12/03 23:47:48 jsm28 Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $\n </EM></P>\n \n "}, {"sha": "f0481cd2fc3e1eea507e0c1bf67a685d778ecd0e", "filename": "libstdc++-v3/docs/html/25_algorithms/howto.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 25</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.5 2000/12/03 23:47:48 jsm28 Exp $ -->\n+<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -86,9 +86,8 @@ <H2><A NAME=\"2\">Topic</A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.5 2000/12/03 23:47:48 jsm28 Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $\n </EM></P>\n \n "}, {"sha": "4f33841cb1f493488fc62fb88dbe8433fa8c3d30", "filename": "libstdc++-v3/docs/html/26_numerics/howto.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 26</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.7 2000/12/03 23:47:48 jsm28 Exp $ -->\n+<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:56 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -132,9 +132,8 @@ <H2><A NAME=\"3\">Numerical Functions</A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.7 2000/12/03 23:47:48 jsm28 Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:56 pme Exp $\n </EM></P>\n \n "}, {"sha": "0da441773641df7f1e7910d8c8f57f4532155e9d", "filename": "libstdc++-v3/docs/html/27_io/howto.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 27</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.2 2001/01/23 17:02:27 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.3 2001/02/07 00:03:21 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -415,9 +415,8 @@ <H2><A NAME=\"7\">More on binary I/O</A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.2 2001/01/23 17:02:27 pme Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.3 2001/02/07 00:03:21 pme Exp $\n </EM></P>\n \n "}, {"sha": "84b8b8db6e30c107d943b6e731a1e06698282b80", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Extensions</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:56 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.2 2001/03/25 00:01:56 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -141,8 +141,8 @@ <H2><A NAME=\"3\">Allocators</A></H2>\n \n <HR>\n <H2><A NAME=\"4\">Compile-time checks</A></H2>\n-   <P>Currently libstdc++-v3 uses the concept checkers from SGI's STL\n-      3.3 to perform <A HREF=\"../19_diagnostics/howto.html#3\">optional\n+   <P>Currently libstdc++-v3 uses the concept checkers from the Boost\n+      library to perform <A HREF=\"../19_diagnostics/howto.html#3\">optional\n       compile-time checking</A> of template instantiations of the standard\n       containers.  They are described in the linked-to page.\n    </P>\n@@ -158,9 +158,8 @@ <H2><A NAME=\"4\">Compile-time checks</A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:56 pme Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: howto.html,v 1.2 2001/03/25 00:01:56 pme Exp $\n </EM></P>\n \n "}, {"sha": "80bb2567e5d012c77cfc7c66a3d107caa358917f", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -9,7 +9,7 @@\n   ** Locations of \"the most recent snapshot is the Nth\" text are \n   ** answers 1_1, 1_4, 4_1, 5_6.\n -->\n-<!-- $Id: index.html,v 1.4 2001/03/01 22:32:23 pme Exp $ -->\n+<!-- $Id: index.html,v 1.5 2001/03/25 00:01:57 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -62,15 +62,16 @@ <H1>Questions</H1>\n          <LI><A HREF=\"#4_2\">Bugs in gcc/g++ (not libstdc++-v3)</A>\n          <LI><A HREF=\"#4_3\">Bugs in the C++ language/lib specification</A>\n          <LI><A HREF=\"#4_4\">Things in libstdc++ that look like bugs</A>\n-\t   <UL>\n+           <UL>\n              <LI><A HREF=\"#4_4_Weff\">-Weffc++ complains too much</A>\n              <LI><A HREF=\"#4_4_rel_ops\">&quot;ambiguous overloads&quot;\n-\t                         after including an old-style header</A>\n+                                 after including an old-style header</A>\n              <LI><A HREF=\"#4_4_interface\">The g++-3 headers are\n                                  <STRONG>not ours</STRONG></A>\n              <LI><A HREF=\"#4_4_glibc\">compilation errors from streambuf.h</A>\n-             <LI><A HREF=\"#4_4_checks\">_STL_ERROR::__something_huge_...</A>\n-\t   </UL>\n+             <LI><A HREF=\"#4_4_checks\">errors about <EM>*Cconcept</EM> and\n+                                 <EM>constraints</EM> in the STL...</A>\n+           </UL>\n          <LI><A HREF=\"#4_5\">Aw, that's easy to fix!</A>\n       </OL>\n \n@@ -258,7 +259,7 @@ <H2><A NAME=\"2_1\">2.1 How do I install libstdc++-v3?</A></H2>\n                  that building GCC is much easier and more automated\n                  than building the GCC 2.[78] series was. \n             <LI> If you plan on hacking around with the makefiles, you\n-\t         will need the tools <A \n+                 will need the tools <A \n HREF=\"http://sources.redhat.com/autoconf/\">autoconf</A>and <A \n HREF=\"http://sources.redhat.com/automake/\">automake</A>. \n             <LI> GNU Make is the only make that supports these makefiles. \n@@ -289,11 +290,11 @@ <H2><A NAME=\"2_3\">2.3 What is this CVS thing that you\n                          keep mentioning?</A></H2>\n       <P>The <EM>Concurrent Versions System</EM> is one of several revision\n          control packages.  It was selected for GNU projects because it's\n-\t free (speech), free (beer), and very high quality.  The <A\n+         free (speech), free (beer), and very high quality.  The <A\n          HREF=\"http://www.gnu.org/software/cvs/cvs.html\">CVS entry in\n          the GNU software catalogue</A> has a better description as \n          well as a\n-\t <A HREF=\"http://www.cyclic.com/\">link to the makers of CVS</A>. \n+         <A HREF=\"http://www.cyclic.com/\">link to the makers of CVS</A>. \n       </P>\n       <P>The &quot;anonymous client checkout&quot; feature of CVS is\n          similar to anonymous FTP in that it allows anyone to retrieve\n@@ -371,7 +372,7 @@ <H2><A NAME=\"3_2\">3.2 Building under Cygwin hangs/explodes!?</A></H2>\n       </P>\n       <P>You have two options.  You can get a newer cygwin1.dll (see the\n          Cygwin paragraph in the\n-\t <A HREF=\"../install.html\">installation instructions</A>).\n+         <A HREF=\"../install.html\">installation instructions</A>).\n          Or you can get a prebuilt set of bits/std_limits.h and\n          src/limitsMEMBERS.cc files from Mumit Khan's\n          <A HREF=\"http://www.xraylith.wisc.edu/~khan/software/gnu-win32/libstdc++-v3.html\">Cygwin-related website</A>.\n@@ -381,15 +382,15 @@ <H2><A NAME=\"3_2\">3.2 Building under Cygwin hangs/explodes!?</A></H2>\n    <H2><A NAME=\"3_3\">3.3 Building DEC OSF kills the assembler</A></H2>\n       <P>The <TT>atomicity.h</TT> header for the Alpha processor\n          currently uses pseudo-operators which the DEC assembler\n-\t doesn't understand (in particular, .subsection and .previous).\n-\t The simple solution is to install GNU <TT>as</TT> and arrange\n-\t for the GCC build to use it (or merge the sources and build\n-\t it during the bootstrap).\n+         doesn't understand (in particular, .subsection and .previous).\n+         The simple solution is to install GNU <TT>as</TT> and arrange\n+         for the GCC build to use it (or merge the sources and build\n+         it during the bootstrap).\n       </P>\n       <P>Anyone who\n          <A HREF=\"http://gcc.gnu.org/ml/libstdc++/2000-12/msg00279.html\">knows\n-\t the DEC assembler well enough</A> to provide the equivalent of\n-\t these two pseudos would win praise and accolades from many.\n+         the DEC assembler well enough</A> to provide the equivalent of\n+         these two pseudos would win praise and accolades from many.\n       </P>\n \n \n@@ -511,12 +512,12 @@ <H2><A NAME=\"4_4\">4.4 Things in libstdc++ that look like bugs</A></H2>\n       <A NAME=\"4_4_rel_ops\">\n         <P>Another is the <TT>rel_ops</TT> namespace and the template\n            comparison operator functions contained therein.  If they become\n-  \t   visible in the same namespace as other comparison functions\n-  \t   (e.g., '<TT>using</TT>' them and the &lt;iterator&gt; header),\n-  \t   then you will suddenly be faced with huge numbers of ambiguity\n-  \t   errors.  This was discussed on the -v3 list; Nathan Myers\n-  \t   <A HREF=\"http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\">sums\n-  \t   things up here</A>.\n+             visible in the same namespace as other comparison functions\n+             (e.g., '<TT>using</TT>' them and the &lt;iterator&gt; header),\n+             then you will suddenly be faced with huge numbers of ambiguity\n+             errors.  This was discussed on the -v3 list; Nathan Myers\n+             <A HREF=\"http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\">sums\n+             things up here</A>.\n         </P>\n       </A>\n       <A NAME=\"4_4_interface\"><H3>The g++-3 headers are\n@@ -541,8 +542,8 @@ <H2><A NAME=\"4_4\">4.4 Things in libstdc++ that look like bugs</A></H2>\n       </A>\n       <A NAME=\"4_4_glibc\">\n         <P>If you're on a GNU/Linux system and have just upgraded to\n-\t   glibc 2.2, but are still using gcc 2.95.2, then you should have\n-\t   read the glibc FAQ, specifically 2.34:\n+           glibc 2.2, but are still using gcc 2.95.2, then you should have\n+           read the glibc FAQ, specifically 2.34:\n    <PRE>\n 2.34.   When compiling C++ programs, I get a compilation error in streambuf.h.\n \n@@ -551,24 +552,24 @@ <H2><A NAME=\"4_4\">4.4 Things in libstdc++ that look like bugs</A></H2>\n type has changed in glibc 2.2.  The patch is at\n http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n    </PRE>\n-\t   Note that 2.95.x shipped with the\n-\t   <A HREF=\"#4_4_interface\">old v2 library</A> which is no longer\n-\t   maintained.\n+           Note that 2.95.x shipped with the\n+           <A HREF=\"#4_4_interface\">old v2 library</A> which is no longer\n+           maintained.\n         </P>\n       </A>\n       <A NAME=\"4_4_checks\">\n-        <P>If you see compilation errors containing messages which begin\n-\t   with _STL_ERROR:: followed by a very verbose name, then most\n-\t   likely you have violated one of the requirements for types used\n-\t   during instantiation of template containers.  For example,\n-\t   _STL_ERROR::__equality_comparable_requirement_violation appears\n+        <P>If you see compilation errors containing messages about\n+           <TT> <EM>foo</EM>Concept </TT>and a<TT> constraints </TT>\n+           member function, then most\n+           likely you have violated one of the requirements for types used\n+           during instantiation of template containers.  For example,\n+           EqualityComparableConcept appears\n            if your types must be comparable with == and you have not\n            provided this capability (a typo, or wrong visibility, or you\n-\t   just plain forgot, etc).\n+           just plain forgot, etc).\n         </P>\n-\t<P>More information, including how to optionally disable the checks,\n-\t   is available <A HREF=\"../19_diagnostics/howto.html#3\">here</A>.\n-\t   The code itself might be disabled or replaced already.\n+        <P>More information, including how to optionally disable the checks,\n+           is available <A HREF=\"../19_diagnostics/howto.html#3\">here</A>.\n         </P>\n       </A>\n \n@@ -579,7 +580,7 @@ <H2><A NAME=\"4_5\">4.5 Aw, that's easy to fix!</A></H2>\n          on <A HREF=\"http://gcc.gnu.org/contribute.html\">submitting\n          patches</A> that covers the procedure, but for libstdc++ you\n          should also send the patch to our mailing list in addition to\n-\t the GCC patches mailing list.  The libstdc++\n+         the GCC patches mailing list.  The libstdc++\n          <A HREF=\"../17_intro/contribute.html\">contributors' page</A>\n          also talks about how to submit patches.\n       </P>\n@@ -720,9 +721,8 @@ <H2><A NAME=\"5_7\">5.7 How do I get a copy of the ISO C++ Standard?</A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: index.html,v 1.4 2001/03/01 22:32:23 pme Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: index.html,v 1.5 2001/03/25 00:01:57 pme Exp $\n </EM></P>\n \n "}, {"sha": "9ad8712f35e87250a00b0ac4f18aab53a66e20f4", "filename": "libstdc++-v3/docs/html/faq/index.txt", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -38,7 +38,7 @@\n                  header\n                o [28]The g++-3 headers are not ours\n                o [29]compilation errors from streambuf.h\n-               o [30]_STL_ERROR::__something_huge_...\n+               o [30]errors about *Cconcept and constraints in the STL...\n          5. [31]Aw, that's easy to fix!\n     5. [32]Miscellaneous\n          1. [33]string::iterator is not char*; vector<T>::iterator is not\n@@ -440,18 +440,16 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n    Note that 2.95.x shipped with the [68]old v2 library which is no\n    longer maintained.\n \n-   If you see compilation errors containing messages which begin with\n-   _STL_ERROR:: followed by a very verbose name, then most likely you\n-   have violated one of the requirements for types used during\n-   instantiation of template containers. For example,\n-   _STL_ERROR::__equality_comparable_requirement_violation appears if\n-   your types must be comparable with == and you have not provided this\n+   If you see compilation errors containing messages about fooConcept and\n+   a constraints member function, then most likely you have violated one\n+   of the requirements for types used during instantiation of template\n+   containers. For example, EqualityComparableConcept appears if your\n+   types must be comparable with == and you have not provided this\n    capability (a typo, or wrong visibility, or you just plain forgot,\n    etc).\n \n    More information, including how to optionally disable the checks, is\n-   available [69]here. The code itself might be disabled or replaced\n-   already.\n+   available [69]here.\n      _________________________________________________________________\n \n 4.5 Aw, that's easy to fix!\n@@ -573,9 +571,9 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n    out!\n      _________________________________________________________________\n \n-   Comments and suggestions are welcome, and may be sent to [83]Phil\n-   Edwards or [84]Gabriel Dos Reis.\n-   $Id: index.html,v 1.4 2001/03/01 22:32:23 pme Exp $ \n+   Comments and suggestions are welcome, and may be sent to [83]the\n+   mailing list.\n+   $Id: index.html,v 1.5 2001/03/25 00:01:57 pme Exp $ \n \n References\n \n@@ -661,5 +659,4 @@ References\n   80. http://www.ansi.org/\n   81. http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998\n   82. http://www.iso.ch/\n-  83. mailto:pme@sources.redhat.com\n-  84. mailto:gdr@gcc.gnu.org\n+  83. mailto:libstdc++@gcc.gnu.org"}, {"sha": "24df89ba0968eb2a96db9fac24cb331c684a6e0b", "filename": "libstdc++-v3/docs/html/install.html", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -7,7 +7,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 Installation Instructions</TITLE>\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: install.html,v 1.3 2001/01/23 17:02:26 pme Exp $ -->\n+<!-- $Id: install.html,v 1.4 2001/02/07 00:03:20 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -333,9 +333,8 @@ <H2><A NAME=\"\"></A></H2>\n <HR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n-<A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: install.html,v 1.3 2001/01/23 17:02:26 pme Exp $\n+<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n+<BR> $Id: install.html,v 1.4 2001/02/07 00:03:20 pme Exp $\n </EM></P>\n \n "}, {"sha": "1142e0496180e8b103fbc231a136690d2af616e2", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "added", "additions": 887, "deletions": 0, "changes": 887, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -0,0 +1,887 @@\n+//\n+// (C) Copyright Jeremy Siek 2000. Permission to copy, use, modify,\n+// sell and distribute this software is granted provided this\n+// copyright notice appears in all copies. This software is provided\n+// \"as is\" without express or implied warranty, and with no claim as\n+// to its suitability for any purpose.\n+//\n+\n+// GCC Note:  based on version 1.12.0 of the Boost library.\n+#ifndef BOOST_CONCEPT_CHECKS_HPP\n+#define BOOST_CONCEPT_CHECKS_HPP\n+\n+#pragma GCC system_header\n+#include <bits/stl_iterator_base_types.h>    // for traits and tags\n+#include <utility>                           // for pair<>\n+\n+\n+namespace boost {\n+\n+template <class T> void ignore_unused_variable_warning(const T&) { }\n+\n+template <class Concept>\n+void function_requires()\n+{\n+  void (Concept::*x)() = &Concept::constraints;\n+  ignore_unused_variable_warning(x);\n+}\n+\n+\n+#define BOOST_CLASS_REQUIRES(type_var, ns, concept) \\\n+  typedef void (ns::concept <type_var>::* func##type_var##concept)(); \\\n+  template <func##type_var##concept _Tp1> \\\n+  struct concept_checking_##type_var##concept { }; \\\n+  typedef concept_checking_##type_var##concept< \\\n+    &ns::concept <type_var>::constraints> \\\n+    concept_checking_typedef_##type_var##concept\n+\n+#define BOOST_CLASS_REQUIRES2(type_var1, type_var2, ns, concept) \\\n+  typedef void (ns::concept <type_var1,type_var2>::* func##type_var1##type_var2##concept)(); \\\n+  template <func##type_var1##type_var2##concept _Tp1> \\\n+  struct concept_checking_##type_var1##type_var2##concept { }; \\\n+  typedef concept_checking_##type_var1##type_var2##concept< \\\n+    &ns::concept <type_var1,type_var2>::constraints> \\\n+    concept_checking_typedef_##type_var1##type_var2##concept\n+\n+#define BOOST_CLASS_REQUIRES3(type_var1, type_var2, type_var3, ns, concept) \\\n+  typedef void (ns::concept <type_var1,type_var2,type_var3>::* func##type_var1##type_var2##type_var3##concept)(); \\\n+  template <func##type_var1##type_var2##type_var3##concept _Tp1> \\\n+  struct concept_checking_##type_var1##type_var2##type_var3##concept { }; \\\n+  typedef concept_checking_##type_var1##type_var2##type_var3##concept< \\\n+    &ns::concept <type_var1,type_var2,type_var3>::constraints>  \\\n+  concept_checking_typedef_##type_var1##type_var2##type_var3##concept\n+\n+#define BOOST_CLASS_REQUIRES4(type_var1, type_var2, type_var3, type_var4, ns, concept) \\\n+  typedef void (ns::concept <type_var1,type_var2,type_var3,type_var4>::* func##type_var1##type_var2##type_var3##type_var4##concept)(); \\\n+  template <func##type_var1##type_var2##type_var3##type_var4##concept _Tp1> \\\n+  struct concept_checking_##type_var1##type_var2##type_var3##type_var4##concept { }; \\\n+  typedef concept_checking_##type_var1##type_var2##type_var3##type_var4##concept< \\\n+    &ns::concept <type_var1,type_var2,type_var3,type_var4>::constraints>  \\\n+    concept_checking_typedef_##type_var1##type_var2##type_var3##type_var4##concept\n+\n+\n+template <class T, class U>\n+struct require_same { };\n+\n+template <class T>\n+struct require_same<T,T> { typedef T type; };\n+\n+  template <class T, class U>\n+  struct SameTypeConcept\n+  {\n+    void constraints() {\n+      typedef typename require_same<T, U>::type req;\n+    }\n+  };\n+\n+  template <class T>\n+  struct IntegerConcept {\n+    void constraints() { \n+      errortype_must_be_an_integer_type();\n+    }\n+  };\n+  template <> struct IntegerConcept<short> { void constraints() {} };\n+  template <> struct IntegerConcept<unsigned short> { void constraints() {} };\n+  template <> struct IntegerConcept<int> { void constraints() {} };\n+  template <> struct IntegerConcept<unsigned int> { void constraints() {} };\n+  template <> struct IntegerConcept<long> { void constraints() {} };\n+  template <> struct IntegerConcept<unsigned long> { void constraints() {} };\n+  // etc.\n+\n+  template <class T>\n+  struct SignedIntegerConcept {\n+    void constraints() { \n+      errortype_must_be_a_signed_integer_type();\n+    }\n+  };\n+  template <> struct SignedIntegerConcept<short> { void constraints() {} };\n+  template <> struct SignedIntegerConcept<int> { void constraints() {} };\n+  template <> struct SignedIntegerConcept<long> { void constraints() {} };\n+  // etc.\n+\n+  template <class T>\n+  struct UnsignedIntegerConcept {\n+    void constraints() { \n+      errortype_must_be_an_unsigned_integer_type();\n+    }\n+  };\n+  template <> struct UnsignedIntegerConcept<unsigned short>\n+    { void constraints() {} };\n+  template <> struct UnsignedIntegerConcept<unsigned int>\n+    { void constraints() {} };\n+  template <> struct UnsignedIntegerConcept<unsigned long>\n+    { void constraints() {} };\n+  // etc.\n+\n+  //===========================================================================\n+  // Basic Concepts\n+\n+  template <class TT>\n+  struct DefaultConstructibleConcept\n+  {\n+    void constraints() {\n+      TT a;               // require default constructor\n+      ignore_unused_variable_warning(a);\n+    }\n+  };\n+\n+  template <class TT>\n+  struct AssignableConcept\n+  {\n+    void constraints() {\n+      a = a;              // require assignment operator\n+      const_constraints(a);\n+    }\n+    void const_constraints(const TT& b) {\n+      a = b;              // const required for argument to assignment\n+    }\n+    TT a;\n+  };\n+\n+  template <class TT>\n+  struct CopyConstructibleConcept\n+  {\n+    void constraints() {\n+      TT a(b);            // require copy constructor\n+      TT* ptr = &a;       // require address of operator\n+      const_constraints(a);\n+      ignore_unused_variable_warning(ptr);\n+    }\n+    void const_constraints(const TT& a) {\n+      TT c(a);            // require const copy constructor\n+      const TT* ptr = &a; // require const address of operator\n+      ignore_unused_variable_warning(c);\n+      ignore_unused_variable_warning(ptr);\n+    }\n+    TT b;\n+  };\n+\n+  // The SGI STL version of Assignable requires copy constructor and operator=\n+  template <class TT>\n+  struct SGIAssignableConcept\n+  {\n+    void constraints() {\n+      TT b(a);\n+      a = a;              // require assignment operator\n+      const_constraints(a);\n+      ignore_unused_variable_warning(b);\n+    }\n+    void const_constraints(const TT& b) {\n+      TT c(b);\n+      a = b;              // const required for argument to assignment\n+      ignore_unused_variable_warning(c);\n+    }\n+    TT a;\n+  };\n+\n+  template <class X, class Y>\n+  struct ConvertibleConcept\n+  {\n+    void constraints() {\n+      Y y = x;\n+      ignore_unused_variable_warning(y);\n+    }\n+    X x;\n+  };\n+\n+  // The C++ standard requirements for many concepts talk about return\n+  // types that must be \"convertible to bool\".  The problem with this\n+  // requirement is that it leaves the door open for evil proxies that\n+  // define things like operator|| with strange return types.  Two\n+  // possible solutions are:\n+  // 1) require the return type to be exactly bool\n+  // 2) stay with convertible to bool, and also\n+  //    specify stuff about all the logical operators.\n+  // For now we just test for convertible to bool.\n+  template <class TT>\n+  void require_boolean_expr(const TT& t) {\n+    bool x = t;\n+    ignore_unused_variable_warning(x);\n+  }\n+\n+  template <class TT>\n+  struct EqualityComparableConcept\n+  {\n+    void constraints() {\n+      require_boolean_expr(a == b);\n+      require_boolean_expr(a != b);\n+    }\n+    TT a, b;\n+  };\n+\n+  template <class TT>\n+  struct LessThanComparableConcept\n+  {\n+    void constraints() {\n+      require_boolean_expr(a < b);\n+    }\n+    TT a, b;\n+  };\n+\n+  // This is equivalent to SGI STL's LessThanComparable.\n+  template <class TT>\n+  struct ComparableConcept\n+  {\n+    void constraints() {\n+      require_boolean_expr(a < b);\n+      require_boolean_expr(a > b);\n+      require_boolean_expr(a <= b);\n+      require_boolean_expr(a >= b);\n+    }\n+    TT a, b;\n+  };\n+\n+#define BOOST_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(OP,NAME) \\\n+  template <class First, class Second> \\\n+  struct NAME { \\\n+    void constraints() { (void)constraints_(); } \\\n+    bool constraints_() {  \\\n+      return  a OP b; \\\n+    } \\\n+    First a; \\\n+    Second b; \\\n+  }\n+\n+#define BOOST_DEFINE_BINARY_OPERATOR_CONSTRAINT(OP,NAME) \\\n+  template <class Ret, class First, class Second> \\\n+  struct NAME { \\\n+    void constraints() { (void)constraints_(); } \\\n+    Ret constraints_() {  \\\n+      return a OP b; \\\n+    } \\\n+    First a; \\\n+    Second b; \\\n+  }\n+\n+  BOOST_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(==, EqualOpConcept);\n+  BOOST_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(!=, NotEqualOpConcept);\n+  BOOST_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(<, LessThanOpConcept);\n+  BOOST_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(<=, LessEqualOpConcept);\n+  BOOST_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(>, GreaterThanOpConcept);\n+  BOOST_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(>=, GreaterEqualOpConcept);\n+\n+  BOOST_DEFINE_BINARY_OPERATOR_CONSTRAINT(+, PlusOpConcept);\n+  BOOST_DEFINE_BINARY_OPERATOR_CONSTRAINT(*, TimesOpConcept);\n+  BOOST_DEFINE_BINARY_OPERATOR_CONSTRAINT(/, DivideOpConcept);\n+  BOOST_DEFINE_BINARY_OPERATOR_CONSTRAINT(-, SubtractOpConcept);\n+  BOOST_DEFINE_BINARY_OPERATOR_CONSTRAINT(%, ModOpConcept);\n+\n+#undef BOOST_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT\n+#undef BOOST_DEFINE_BINARY_OPERATOR_CONSTRAINT\n+\n+  //===========================================================================\n+  // Function Object Concepts\n+\n+  template <class Func, class Return>\n+  struct GeneratorConcept\n+  {\n+    void constraints() {\n+      const Return& r = f();   // require operator() member function\n+      ignore_unused_variable_warning(r);\n+    }\n+    Func f;\n+  };\n+\n+\n+  template <class Func>\n+  struct GeneratorConcept<Func,void>\n+  {\n+    void constraints() {\n+      f();              // require operator() member function\n+    }\n+    Func f;\n+  };\n+\n+  template <class Func, class Return, class Arg>\n+  struct UnaryFunctionConcept\n+  {\n+    void constraints() {\n+      r = f(arg); // require operator()\n+    }\n+    Func f;\n+    Arg arg;\n+    Return r;\n+  };\n+\n+  template <class Func, class Arg>\n+  struct UnaryFunctionConcept<Func, void, Arg> {\n+    void constraints() { \n+      f(arg);                 // require operator()\n+    }\n+    Func f;\n+  };\n+\n+  template <class Func, class Return, class First, class Second>\n+  struct BinaryFunctionConcept\n+  {\n+    void constraints() { \n+      r = f(first, second); // require operator()\n+    }\n+    Func f;\n+    First first;\n+    Second second;\n+    Return r;\n+  };\n+\n+  template <class Func, class First, class Second>\n+  struct BinaryFunctionConcept<Func, void, First, Second>\n+  {\n+    void constraints() {\n+      f(first, second); // require operator()\n+    }\n+    Func f;\n+    First first;\n+    Second second;\n+  };\n+\n+  template <class Func, class Arg>\n+  struct UnaryPredicateConcept\n+  {\n+    void constraints() {\n+      require_boolean_expr(f(arg)); // require operator() returning bool\n+    }\n+    Func f;\n+    Arg arg;\n+  };\n+\n+  template <class Func, class First, class Second>\n+  struct BinaryPredicateConcept\n+  {\n+    void constraints() {\n+      require_boolean_expr(f(a, b)); // require operator() returning bool\n+    }\n+    Func f;\n+    First a;\n+    Second b;\n+  };\n+\n+  // use this when functor is used inside a container class like std::set\n+  template <class Func, class First, class Second>\n+  struct Const_BinaryPredicateConcept {\n+    void constraints() { \n+      const_constraints(f);\n+    }\n+    void const_constraints(const Func& fun) {\n+      function_requires<BinaryPredicateConcept<Func, First, Second> >();\n+      // operator() must be a const member function\n+      require_boolean_expr(fun(a, b));\n+    }\n+    Func f;\n+    First a;\n+    Second b;\n+  };\n+\n+  //===========================================================================\n+  // Iterator Concepts\n+\n+  template <class TT>\n+  struct TrivialIteratorConcept\n+  {\n+    void constraints() {\n+      function_requires< AssignableConcept<TT> >();\n+      function_requires< DefaultConstructibleConcept<TT> >();\n+      function_requires< EqualityComparableConcept<TT> >();\n+      typedef typename std::iterator_traits<TT>::value_type V;\n+      (void)*i;           // require dereference operator\n+    }\n+    TT i;\n+  };\n+\n+  template <class TT>\n+  struct Mutable_TrivialIteratorConcept\n+  {\n+    void constraints() {\n+      function_requires< TrivialIteratorConcept<TT> >();\n+      *i = *j;            // require dereference and assignment\n+    }\n+    TT i, j;\n+  };\n+\n+  template <class TT>\n+  struct InputIteratorConcept\n+  {\n+    void constraints() {\n+      function_requires< TrivialIteratorConcept<TT> >();\n+      // require iterator_traits typedef's\n+      typedef typename std::iterator_traits<TT>::difference_type D;\n+      function_requires< SignedIntegerConcept<D> >();\n+      typedef typename std::iterator_traits<TT>::reference R;\n+      typedef typename std::iterator_traits<TT>::pointer P;\n+      typedef typename std::iterator_traits<TT>::iterator_category C;\n+      function_requires< ConvertibleConcept<\n+        typename std::iterator_traits<TT>::iterator_category,\n+        std::input_iterator_tag> >();\n+      ++i;                // require preincrement operator\n+      i++;                // require postincrement operator\n+    }\n+    TT i;\n+  };\n+\n+  template <class TT, class ValueT>\n+  struct OutputIteratorConcept\n+  {\n+    void constraints() {\n+      function_requires< AssignableConcept<TT> >();\n+      ++i;                // require preincrement operator\n+      i++;                // require postincrement operator\n+      *i++ = t;           // require postincrement and assignment\n+    }\n+    TT i;\n+    ValueT t;\n+  };\n+\n+  template <class TT>\n+  struct ForwardIteratorConcept\n+  {\n+    void constraints() {\n+      function_requires< InputIteratorConcept<TT> >();\n+      function_requires< ConvertibleConcept<\n+        typename std::iterator_traits<TT>::iterator_category,\n+        std::forward_iterator_tag> >();\n+      typedef typename std::iterator_traits<TT>::reference reference;\n+      reference r = *i;\n+      ignore_unused_variable_warning(r);\n+    }\n+    TT i;\n+  };\n+\n+  template <class TT>\n+  struct Mutable_ForwardIteratorConcept\n+  {\n+    void constraints() {\n+      function_requires< ForwardIteratorConcept<TT> >();\n+      *i++ = *i;         // require postincrement and assignment\n+    }\n+    TT i;\n+  };\n+\n+  template <class TT>\n+  struct BidirectionalIteratorConcept\n+  {\n+    void constraints() {\n+      function_requires< ForwardIteratorConcept<TT> >();\n+      function_requires< ConvertibleConcept<\n+        typename std::iterator_traits<TT>::iterator_category,\n+        std::bidirectional_iterator_tag> >();\n+      --i;                // require predecrement operator\n+      i--;                // require postdecrement operator\n+    }\n+    TT i;\n+  };\n+\n+  template <class TT>\n+  struct Mutable_BidirectionalIteratorConcept\n+  {\n+    void constraints() {\n+      function_requires< BidirectionalIteratorConcept<TT> >();\n+      function_requires< Mutable_ForwardIteratorConcept<TT> >();\n+      *i-- = *i;                  // require postdecrement and assignment\n+    }\n+    TT i;\n+  };\n+\n+\n+  template <class TT>\n+  struct RandomAccessIteratorConcept\n+  {\n+    void constraints() {\n+      function_requires< BidirectionalIteratorConcept<TT> >();\n+      function_requires< ComparableConcept<TT> >();\n+      function_requires< ConvertibleConcept<\n+        typename std::iterator_traits<TT>::iterator_category,\n+        std::random_access_iterator_tag> >();\n+      typedef typename std::iterator_traits<TT>::reference R;\n+\n+      i += n;             // require assignment addition operator\n+      i = i + n; i = n + i; // require addition with difference type\n+      i -= n;             // require assignment subtraction operator\n+      i = i - n;                  // require subtraction with difference type\n+      n = i - j;                  // require difference operator\n+      (void)i[n];                 // require element access operator\n+    }\n+    TT a, b;\n+    TT i, j;\n+    typename std::iterator_traits<TT>::difference_type n;\n+  };\n+\n+  template <class TT>\n+  struct Mutable_RandomAccessIteratorConcept\n+  {\n+    void constraints() {\n+      function_requires< RandomAccessIteratorConcept<TT> >();\n+      function_requires< Mutable_BidirectionalIteratorConcept<TT> >();\n+      i[n] = *i;                  // require element access and assignment\n+    }\n+    TT i;\n+    typename std::iterator_traits<TT>::difference_type n;\n+  };\n+\n+  //===========================================================================\n+  // Container Concepts\n+\n+  template <class Container>\n+  struct ContainerConcept\n+  {\n+    typedef typename Container::value_type value_type;\n+    typedef typename Container::difference_type difference_type;\n+    typedef typename Container::size_type size_type;\n+    typedef typename Container::const_reference const_reference;\n+    typedef typename Container::const_pointer const_pointer;\n+    typedef typename Container::const_iterator const_iterator;\n+\n+    void constraints() {\n+      function_requires< InputIteratorConcept<const_iterator> >();\n+      function_requires< AssignableConcept<Container> >();\n+      const Container c;\n+      i = c.begin();\n+      i = c.end();\n+      n = c.size();\n+      n = c.max_size();\n+      b = c.empty();\n+    }\n+    bool b;\n+    const_iterator i;\n+    size_type n;\n+  };\n+\n+  template <class Container>\n+  struct Mutable_ContainerConcept\n+  {\n+    typedef typename Container::value_type value_type;\n+    typedef typename Container::reference reference;\n+    typedef typename Container::iterator iterator;\n+    typedef typename Container::pointer pointer;\n+    \n+    void constraints() {\n+      function_requires< ContainerConcept<Container> >();\n+      function_requires< AssignableConcept<value_type> >();\n+      function_requires< InputIteratorConcept<iterator> >();\n+\n+      i = c.begin();\n+      i = c.end();\n+      c.swap(c2);\n+    }\n+    iterator i;\n+    Container c, c2;\n+  };\n+\n+  template <class ForwardContainer>\n+  struct ForwardContainerConcept\n+  {\n+    void constraints() {\n+      function_requires< ContainerConcept<ForwardContainer> >();\n+      typedef typename ForwardContainer::const_iterator const_iterator;\n+      function_requires< ForwardIteratorConcept<const_iterator> >();\n+    }\n+  };  \n+\n+  template <class ForwardContainer>\n+  struct Mutable_ForwardContainerConcept\n+  {\n+    void constraints() {\n+      function_requires< ForwardContainerConcept<ForwardContainer> >();\n+      function_requires< Mutable_ContainerConcept<ForwardContainer> >();\n+      typedef typename ForwardContainer::iterator iterator;\n+      function_requires< Mutable_ForwardIteratorConcept<iterator> >();\n+    }\n+  };  \n+\n+  template <class ReversibleContainer>\n+  struct ReversibleContainerConcept\n+  {\n+    typedef typename ReversibleContainer::const_iterator const_iterator;\n+    typedef typename ReversibleContainer::const_reverse_iterator\n+      const_reverse_iterator;\n+\n+    void constraints() {\n+      function_requires< ForwardContainerConcept<ReversibleContainer> >();\n+      function_requires< BidirectionalIteratorConcept<const_iterator> >();\n+      function_requires< BidirectionalIteratorConcept<const_reverse_iterator> >();\n+\n+      const ReversibleContainer c;\n+      const_reverse_iterator i = c.rbegin();\n+      i = c.rend();\n+    }\n+  };\n+\n+  template <class ReversibleContainer>\n+  struct Mutable_ReversibleContainerConcept\n+  {\n+    typedef typename ReversibleContainer::iterator iterator;\n+    typedef typename ReversibleContainer::reverse_iterator reverse_iterator;\n+\n+    void constraints() {\n+      function_requires< ReversibleContainerConcept<ReversibleContainer> >();\n+      function_requires< Mutable_ForwardContainerConcept<ReversibleContainer> >();\n+      function_requires< Mutable_BidirectionalIteratorConcept<iterator> >();\n+      function_requires< Mutable_BidirectionalIteratorConcept<reverse_iterator> >();\n+\n+      reverse_iterator i = c.rbegin();\n+      i = c.rend();\n+    }\n+    ReversibleContainer c;\n+  };\n+\n+  template <class RandomAccessContainer>\n+  struct RandomAccessContainerConcept\n+  {\n+    typedef typename RandomAccessContainer::size_type size_type;\n+    typedef typename RandomAccessContainer::const_reference const_reference;\n+    typedef typename RandomAccessContainer::const_iterator const_iterator;\n+    typedef typename RandomAccessContainer::const_reverse_iterator\n+      const_reverse_iterator;\n+\n+    void constraints() {\n+      function_requires< ReversibleContainerConcept<RandomAccessContainer> >();\n+      function_requires< RandomAccessIteratorConcept<const_iterator> >();\n+      function_requires< RandomAccessIteratorConcept<const_reverse_iterator> >();\n+\n+      const RandomAccessContainer c;\n+      const_reference r = c[n];\n+      ignore_unused_variable_warning(r);\n+    }\n+    size_type n;\n+  };\n+\n+  template <class RandomAccessContainer>\n+  struct Mutable_RandomAccessContainerConcept\n+  {\n+    typedef typename RandomAccessContainer::size_type size_type;\n+    typedef typename RandomAccessContainer::reference reference;\n+    typedef typename RandomAccessContainer::iterator iterator;\n+    typedef typename RandomAccessContainer::reverse_iterator reverse_iterator;\n+\n+    void constraints() {\n+      function_requires< RandomAccessContainerConcept<RandomAccessContainer> >();\n+      function_requires< Mutable_ReversibleContainerConcept<RandomAccessContainer> >();\n+      function_requires< Mutable_RandomAccessIteratorConcept<iterator> >();\n+      function_requires< Mutable_RandomAccessIteratorConcept<reverse_iterator> >();\n+\n+      reference r = c[i];\n+      ignore_unused_variable_warning(r);\n+    }\n+    size_type i;\n+    RandomAccessContainer c;\n+  };\n+\n+  // A Sequence is inherently mutable\n+  template <class Sequence>\n+  struct SequenceConcept\n+  {\n+\n+    typedef typename Sequence::reference reference;\n+    typedef typename Sequence::const_reference const_reference;\n+\n+    void constraints() {\n+      // Matt Austern's book puts DefaultConstructible here, the C++\n+      // standard places it in Container\n+      //    function_requires< DefaultConstructible<Sequence> >();\n+      function_requires< Mutable_ForwardContainerConcept<Sequence> >();\n+      function_requires< DefaultConstructibleConcept<Sequence> >();\n+\n+      Sequence \n+        c(n),\n+        c2(n, t),\n+        c3(first, last);\n+\n+      c.insert(p, t);\n+      c.insert(p, n, t);\n+      c.insert(p, first, last);\n+\n+      c.erase(p);\n+      c.erase(p, q);\n+\n+      reference r = c.front();\n+\n+      ignore_unused_variable_warning(c);\n+      ignore_unused_variable_warning(c2);\n+      ignore_unused_variable_warning(c3);\n+      ignore_unused_variable_warning(r);\n+      const_constraints(c);\n+    }\n+    void const_constraints(const Sequence& c) {\n+      const_reference r = c.front();\n+      ignore_unused_variable_warning(r);\n+    }\n+    typename Sequence::value_type t;\n+    typename Sequence::size_type n;\n+    typename Sequence::value_type* first, *last;\n+    typename Sequence::iterator p, q;\n+  };\n+\n+  template <class FrontInsertionSequence>\n+  struct FrontInsertionSequenceConcept\n+  {\n+    void constraints() {\n+      function_requires< SequenceConcept<FrontInsertionSequence> >();\n+\n+      c.push_front(t);\n+      c.pop_front();\n+    }\n+    FrontInsertionSequence c;\n+    typename FrontInsertionSequence::value_type t;\n+  };\n+\n+  template <class BackInsertionSequence>\n+  struct BackInsertionSequenceConcept\n+  {\n+    typedef typename BackInsertionSequence::reference reference;\n+    typedef typename BackInsertionSequence::const_reference const_reference;\n+\n+    void constraints() {\n+      function_requires< SequenceConcept<BackInsertionSequence> >();\n+\n+      c.push_back(t);\n+      c.pop_back();\n+      reference r = c.back();\n+      ignore_unused_variable_warning(r);\n+    }\n+    void const_constraints(const BackInsertionSequence& c) {\n+      const_reference r = c.back();\n+      ignore_unused_variable_warning(r);\n+    };\n+    BackInsertionSequence c;\n+    typename BackInsertionSequence::value_type t;\n+  };\n+\n+  template <class AssociativeContainer>\n+  struct AssociativeContainerConcept\n+  {\n+    void constraints() {\n+      function_requires< ForwardContainerConcept<AssociativeContainer> >();\n+      function_requires< DefaultConstructibleConcept<AssociativeContainer> >();\n+    \n+      i = c.find(k);\n+      r = c.equal_range(k);\n+      c.erase(k);\n+      c.erase(i);\n+      c.erase(r.first, r.second);\n+      const_constraints(c);\n+    }\n+    void const_constraints(const AssociativeContainer& c) {\n+      ci = c.find(k);\n+      n = c.count(k);\n+      cr = c.equal_range(k);\n+    }\n+    typedef typename AssociativeContainer::iterator iterator;\n+    typedef typename AssociativeContainer::const_iterator const_iterator;\n+\n+    AssociativeContainer c;\n+    iterator i;\n+    std::pair<iterator,iterator> r;\n+    const_iterator ci;\n+    std::pair<const_iterator,const_iterator> cr;\n+    typename AssociativeContainer::key_type k;\n+    typename AssociativeContainer::size_type n;\n+  };\n+\n+  template <class UniqueAssociativeContainer>\n+  struct UniqueAssociativeContainerConcept\n+  {\n+    void constraints() {\n+      function_requires< AssociativeContainerConcept<UniqueAssociativeContainer> >();\n+    \n+      UniqueAssociativeContainer c(first, last);\n+      \n+      pos_flag = c.insert(t);\n+      c.insert(first, last);\n+\n+      ignore_unused_variable_warning(c);\n+    }\n+    std::pair<typename UniqueAssociativeContainer::iterator, bool> pos_flag;\n+    typename UniqueAssociativeContainer::value_type t;\n+    typename UniqueAssociativeContainer::value_type* first, *last;\n+  };\n+\n+  template <class MultipleAssociativeContainer>\n+  struct MultipleAssociativeContainerConcept\n+  {\n+    void constraints() {\n+      function_requires< AssociativeContainerConcept<MultipleAssociativeContainer> >();\n+\n+      MultipleAssociativeContainer c(first, last);\n+      \n+      pos = c.insert(t);\n+      c.insert(first, last);\n+\n+      ignore_unused_variable_warning(c);\n+      ignore_unused_variable_warning(pos);\n+    }\n+    typename MultipleAssociativeContainer::iterator pos;\n+    typename MultipleAssociativeContainer::value_type t;\n+    typename MultipleAssociativeContainer::value_type* first, *last;\n+  };\n+\n+  template <class SimpleAssociativeContainer>\n+  struct SimpleAssociativeContainerConcept\n+  {\n+    void constraints() {\n+      function_requires< AssociativeContainerConcept<SimpleAssociativeContainer> >();\n+      typedef typename SimpleAssociativeContainer::key_type key_type;\n+      typedef typename SimpleAssociativeContainer::value_type value_type;\n+      typedef typename require_same<key_type, value_type>::type req;\n+    }\n+  };\n+\n+  template <class SimpleAssociativeContainer>\n+  struct PairAssociativeContainerConcept\n+  {\n+    void constraints() {\n+      function_requires< AssociativeContainerConcept<SimpleAssociativeContainer> >();\n+      typedef typename SimpleAssociativeContainer::key_type key_type;\n+      typedef typename SimpleAssociativeContainer::value_type value_type;\n+      typedef typename SimpleAssociativeContainer::mapped_type mapped_type;\n+      typedef std::pair<const key_type, mapped_type> required_value_type;\n+      typedef typename require_same<value_type, required_value_type>::type req;\n+    }\n+  };\n+\n+  template <class SortedAssociativeContainer>\n+  struct SortedAssociativeContainerConcept\n+  {\n+    void constraints() {\n+      function_requires< AssociativeContainerConcept<SortedAssociativeContainer> >();\n+      function_requires< ReversibleContainerConcept<SortedAssociativeContainer> >();\n+\n+      SortedAssociativeContainer \n+        c(kc),\n+        c2(first, last),\n+        c3(first, last, kc);\n+\n+      p = c.upper_bound(k);\n+      p = c.lower_bound(k);\n+      r = c.equal_range(k);\n+      \n+      c.insert(p, t);\n+      \n+      ignore_unused_variable_warning(c);\n+      ignore_unused_variable_warning(c2);\n+      ignore_unused_variable_warning(c3);\n+    }\n+    void const_constraints(const SortedAssociativeContainer& c) {\n+      kc = c.key_comp();\n+      vc = c.value_comp();\n+\n+      cp = c.upper_bound(k);\n+      cp = c.lower_bound(k);\n+      cr = c.equal_range(k);\n+    }\n+    typename SortedAssociativeContainer::key_compare kc;\n+    typename SortedAssociativeContainer::value_compare vc;\n+    typename SortedAssociativeContainer::value_type t;\n+    typename SortedAssociativeContainer::key_type k;\n+    typedef typename SortedAssociativeContainer::iterator iterator;\n+    typedef typename SortedAssociativeContainer::const_iterator const_iterator;\n+    iterator p;\n+    const_iterator cp;\n+    std::pair<iterator,iterator> r;\n+    std::pair<const_iterator,const_iterator> cr;\n+    typename SortedAssociativeContainer::value_type* first, *last;\n+  };\n+\n+  // HashedAssociativeContainer\n+\n+} // namespace boost\n+\n+#endif // BOOST_CONCEPT_CHECKS_HPP\n+"}, {"sha": "84a9ebcf571aaf200a139ece039ccf4c52b244f8", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -63,9 +63,8 @@\n #    define __STL_UITHREADS\n #endif\n \n-// Concept-checking code is off by default unless users define\n-// the _STL_USE_CONCEPT_CHECKS hook.\n-//#define _STL_USE_CONCEPT_CHECKS 1\n+// Concept-checking hooks and related config are now in bits/concept_check.h.\n+\n \n // This is also a user hook, but via -f[no-]exceptions, not direct #defines.\n #ifdef __EXCEPTIONS\n@@ -85,7 +84,8 @@\n #  define __STL_UNWIND(action) \n #endif\n \n-// This is the \"underlying allocator\"\n+// This is the \"underlying allocator\" for STL.  The alternatives are\n+// homegrown schemes involving a kind of mutex and free list; see stl_alloc.h.\n #define __USE_MALLOC\n \n // Define this to permit user-level control of the expansion of string\n@@ -105,11 +105,6 @@\n //#  define __STL_LONG_LONG\n //#endif\n \n-// 20010302 pme -- this is only used in bits/concept_checks.h\n-//#if (__GNUC__ < 2) || (__GNUC__ == 2 && __GNUC_MINOR__ < 95)\n-#  define __STL_NO_FUNCTION_PTR_IN_CLASS_TEMPLATE\n-//#endif\n-\n // Mingw32, GCC compiler using the Microsoft C runtime (settings taken from\n // SGI's stl_config.h)\n #if defined(__MINGW32__)"}, {"sha": "28886a9eb0a3a7203a3b9d145fb1b5e3156ccee8", "filename": "libstdc++-v3/include/bits/concept_check.h", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -0,0 +1,93 @@\n+// Concept-checking control -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCPP_CONCEPT_CHECK\n+#define _GLIBCPP_CONCEPT_CHECK 1\n+\n+#pragma GCC system_header\n+#include <bits/c++config.h>\n+\n+\n+// Concept-checking code is on by default unless users turn it off via any\n+// of these methods:\n+//  -  _GLIBCPP_NO_CONCEPT_CHECKS is a user hook; defining it disables the\n+//     checks.\n+//  -  _STL_NO_CONCEPT_CHECKS is a user hook from the old STL implementation\n+//     specifically for this purpose; defining it disables the checks, in\n+//     case the user is expecting the old version.\n+//  -  NDEBUG is the usual macro that kills assert().  Defining it will also\n+//     disable the checks, by the reasoning that if the user doesn't want\n+//     any runtime assertion code, then no space penalty for the checks\n+//     is desired either.\n+\n+// All places in libstdc++-v3 where these are used, or /might/ be used, or\n+// don't need to be used, or perhaps /should/ be used, are commented with\n+// \"concept requirements\" (and maybe some more text).  So grep like crazy\n+// if you're looking for additional places to use these.\n+\n+\n+#if defined(_GLIBCPP_NO_CONCEPT_CHECKS) || defined(_STL_NO_CONCEPT_CHECKS) \\\n+    || defined(NDEBUG)\n+\n+#define glibcpp_function_requires(...)\n+#define glibcpp_class_requires(a,b)\n+#define glibcpp_class_requires2(a,b,c)\n+#define glibcpp_class_requires3(a,b,c,d)\n+#define glibcpp_class_requires4(a,b,c,d,e)\n+\n+#else // the checks are on\n+\n+#include <bits/boost_concept_check.h>\n+\n+// Note that the obvious and elegant approach of\n+//\n+//#define glibcpp_function_requires(C)      \\\n+//            boost::function_requires< boost::C >()\n+//\n+// won't work due to concept templates with more than one parameter, e.g.,\n+// BinaryPredicateConcept.  The preprocessor tries to split things up on\n+// the commas in the template argument list.  We can't use an inner pair of\n+// parenthesis to hide the commas, because \"boost::(Temp<Foo,Bar>)\" isn't\n+// a valid instantiation pattern.\n+\n+#define glibcpp_function_requires(...)                         \\\n+            boost::function_requires< boost::__VA_ARGS__ >()\n+#define glibcpp_class_requires(a,C)                            \\\n+            BOOST_CLASS_REQUIRES(a, boost, C)\n+#define glibcpp_class_requires2(a,b,C)                         \\\n+            BOOST_CLASS_REQUIRES2(a, b, boost, C)\n+#define glibcpp_class_requires3(a,b,c,C)                       \\\n+            BOOST_CLASS_REQUIRES3(a, b, c, boost, C)\n+#define glibcpp_class_requires4(a,b,c,d,C)                     \\\n+            BOOST_CLASS_REQUIRES4(a, b, c, d, boost, C)\n+\n+#endif // enable/disable\n+\n+#endif // _GLIBCPP_CONCEPT_CHECK\n+"}, {"sha": "aa77d9af06307974f383e32d342822aa40960772", "filename": "libstdc++-v3/include/bits/concept_checks.h", "status": "removed", "additions": 0, "deletions": 811, "changes": 811, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4a318c36db4565f126e4428ea856460437b27d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_checks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4a318c36db4565f126e4428ea856460437b27d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_checks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_checks.h?ref=9f4a318c36db4565f126e4428ea856460437b27d", "patch": "@@ -1,811 +0,0 @@\n-/*\n- * Copyright (c) 1999\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-#ifndef __CONCEPT_CHECKS_H\n-#define __CONCEPT_CHECKS_H\n-\n-/*\n-  Use these macro like assertions, but they assert properties\n-  on types (usually template arguments). In technical terms they\n-  verify whether a type \"models\" a \"concept\".\n-\n-  This set of requirements and the terminology used here is derived\n-  from the book \"Generic Programming and the STL\" by Matt Austern\n-  (Addison Wesley). For further information please consult that\n-  book. The requirements also are intended to match the ANSI/ISO C++\n-  standard.\n-\n-  This file covers the basic concepts and the iterator concepts.\n-  There are several other files that provide the requirements\n-  for the STL containers:\n-    container_concepts.h\n-    sequence_concepts.h\n-    assoc_container_concepts.h\n-\n-  Jeremy Siek, 1999\n-\n-  TO DO:\n-    - some issues with regards to concept classification and mutability\n-      including AssociativeContianer -> ForwardContainer\n-      and SortedAssociativeContainer -> ReversibleContainer\n-    - HashedAssociativeContainer\n-    - Allocator\n-    - Function Object Concepts\n-\n-  */\n-\n-#ifndef __STL_USE_CONCEPT_CHECKS\n-\n-// Some compilers lack the features that are necessary for concept checks.\n-// On those compilers we define the concept check macros to do nothing.\n-#define __STL_REQUIRES(__type_var, __concept) do {} while(0)\n-#define __STL_CLASS_REQUIRES(__type_var, __concept) \\\n-  static int  __##__type_var##_##__concept\n-#define __STL_CONVERTIBLE(__type_x, __type_y) do {} while(0)\n-#define __STL_REQUIRES_SAME_TYPE(__type_x, __type_y) do {} while(0)\n-#define __STL_CLASS_REQUIRES_SAME_TYPE(__type_x, __type_y) \\\n-  static int  __##__type_x##__type_y##_require_same_type\n-#define __STL_GENERATOR_CHECK(__func, __ret) do {} while(0)\n-#define __STL_CLASS_GENERATOR_CHECK(__func, __ret) \\\n-  static int  __##__func##__ret##_generator_check\n-#define __STL_UNARY_FUNCTION_CHECK(__func, __ret, __arg) do {} while(0)\n-#define __STL_CLASS_UNARY_FUNCTION_CHECK(__func, __ret, __arg) \\\n-  static int  __##__func##__ret##__arg##_unary_function_check\n-#define __STL_BINARY_FUNCTION_CHECK(__func, __ret, __first, __second) \\\n-  do {} while(0)\n-#define __STL_CLASS_BINARY_FUNCTION_CHECK(__func, __ret, __first, __second) \\\n-  static int  __##__func##__ret##__first##__second##_binary_function_check\n-#define __STL_REQUIRES_BINARY_OP(__opname, __ret, __first, __second) \\\n-  do {} while(0)\n-#define __STL_CLASS_REQUIRES_BINARY_OP(__opname, __ret, __first, __second) \\\n-  static int __##__opname##__ret##__first##__second##_require_binary_op\n-\n-#else /* __STL_USE_CONCEPT_CHECKS */\n-\n-// This macro tests whether the template argument \"__type_var\"\n-// satisfies the requirements of \"__concept\".  Here is a list of concepts\n-// that we know how to check:\n-//       _Allocator\n-//       _Assignable\n-//       _DefaultConstructible\n-//       _EqualityComparable\n-//       _LessThanComparable\n-//       _TrivialIterator\n-//       _InputIterator\n-//       _OutputIterator\n-//       _ForwardIterator\n-//       _BidirectionalIterator\n-//       _RandomAccessIterator\n-//       _Mutable_TrivialIterator\n-//       _Mutable_ForwardIterator\n-//       _Mutable_BidirectionalIterator\n-//       _Mutable_RandomAccessIterator\n-\n-#define __STL_REQUIRES(__type_var, __concept) \\\n-do { \\\n-  void (*__x)( __type_var ) = __concept##_concept_specification< __type_var >\\\n-    ::__concept##_requirement_violation; __x = __x; } while (0)\n-\n-// Use this to check whether type X is convertible to type Y\n-#define __STL_CONVERTIBLE(__type_x, __type_y) \\\n-do { \\\n-  void (*__x)( __type_x , __type_y ) = _STL_CONVERT_ERROR< __type_x , \\\n-  __type_y >::__type_X_is_not_convertible_to_type_Y; \\\n-  __x = __x; } while (0)\n-\n-// Use this to test whether two template arguments are the same type\n-#define __STL_REQUIRES_SAME_TYPE(__type_x, __type_y) \\\n-do { \\\n-  void (*__x)( __type_x , __type_y ) = _STL_SAME_TYPE_ERROR< __type_x, \\\n-    __type_y  >::__type_X_not_same_as_type_Y; \\\n-  __x = __x; } while (0)\n-\n-\n-// function object checks\n-#define __STL_GENERATOR_CHECK(__func, __ret) \\\n-do { \\\n-  __ret (*__x)( __func&) = \\\n-     _STL_GENERATOR_ERROR< \\\n-  __func, __ret>::__generator_requirement_violation; \\\n-  __x = __x; } while (0)\n-\n-\n-#define __STL_UNARY_FUNCTION_CHECK(__func, __ret, __arg) \\\n-do { \\\n-  __ret (*__x)( __func&, const __arg& ) = \\\n-     _STL_UNARY_FUNCTION_ERROR< \\\n-  __func, __ret, __arg>::__unary_function_requirement_violation; \\\n-  __x = __x; } while (0)\n-\n-\n-#define __STL_BINARY_FUNCTION_CHECK(__func, __ret, __first, __second) \\\n-do { \\\n-  __ret (*__x)( __func&, const __first&, const __second& ) = \\\n-     _STL_BINARY_FUNCTION_ERROR< \\\n-  __func, __ret, __first, __second>::__binary_function_requirement_violation; \\\n-  __x = __x; } while (0)\n-\n-\n-#define __STL_REQUIRES_BINARY_OP(__opname, __ret, __first, __second) \\\n-    do { \\\n-  __ret (*__x)( __first&, __second& ) = _STL_BINARY##__opname##_ERROR< \\\n-    __ret, __first, __second>::__binary_operator_requirement_violation; \\\n-  __ret (*__y)( const __first&, const __second& ) = \\\n-    _STL_BINARY##__opname##_ERROR< __ret, __first, __second>:: \\\n-      __const_binary_operator_requirement_violation; \\\n-  __y = __y; __x = __x; } while (0)\n-\n-\n-#ifdef __STL_NO_FUNCTION_PTR_IN_CLASS_TEMPLATE\n-\n-#define __STL_CLASS_REQUIRES(__type_var, __concept)\n-#define __STL_CLASS_REQUIRES_SAME_TYPE(__type_x, __type_y)\n-#define __STL_CLASS_GENERATOR_CHECK(__func, __ret)\n-#define __STL_CLASS_UNARY_FUNCTION_CHECK(__func, __ret, __arg)\n-#define __STL_CLASS_BINARY_FUNCTION_CHECK(__func, __ret, __first, __second)\n-#define __STL_CLASS_REQUIRES_BINARY_OP(__opname, __ret, __first, __second)\n-\n-#else\n-\n-// Use this macro inside of template classes, where you would\n-// like to place requirements on the template arguments to the class\n-// Warning: do not pass pointers and such (e.g. T*) in as the __type_var,\n-// since the type_var is used to construct identifiers. Instead typedef\n-// the pointer type, then use the typedef name for the __type_var.\n-#define __STL_CLASS_REQUIRES(__type_var, __concept) \\\n-  typedef void (* __func##__type_var##__concept)( __type_var ); \\\n-  template <__func##__type_var##__concept _Tp1> \\\n-  struct __dummy_struct_##__type_var##__concept { }; \\\n-  static __dummy_struct_##__type_var##__concept< \\\n-    __concept##_concept_specification< \\\n-      __type_var>::__concept##_requirement_violation>  \\\n-  __dummy_ptr_##__type_var##__concept\n-\n-\n-#define __STL_CLASS_REQUIRES_SAME_TYPE(__type_x, __type_y) \\\n-  typedef void (* __func_##__type_x##__type_y##same_type)( __type_x, \\\n-                                                            __type_y ); \\\n-  template < __func_##__type_x##__type_y##same_type _Tp1> \\\n-  struct __dummy_struct_##__type_x##__type_y##_same_type { }; \\\n-  static __dummy_struct_##__type_x##__type_y##_same_type< \\\n-    _STL_SAME_TYPE_ERROR<__type_x, __type_y>::__type_X_not_same_as_type_Y>  \\\n-  __dummy_ptr_##__type_x##__type_y##_same_type\n-\n-\n-#define __STL_CLASS_GENERATOR_CHECK(__func, __ret) \\\n-  typedef __ret (* __f_##__func##__ret##_generator)( __func& ); \\\n-  template <__f_##__func##__ret##_generator _Tp1> \\\n-  struct __dummy_struct_##__func##__ret##_generator { }; \\\n-  static __dummy_struct_##__func##__ret##_generator< \\\n-    _STL_GENERATOR_ERROR< \\\n-      __func, __ret>::__generator_requirement_violation>  \\\n-  __dummy_ptr_##__func##__ret##_generator\n-\n-\n-#define __STL_CLASS_UNARY_FUNCTION_CHECK(__func, __ret, __arg) \\\n-  typedef __ret (* __f_##__func##__ret##__arg##_unary_check)( __func&, \\\n-                                                         const __arg& ); \\\n-  template <__f_##__func##__ret##__arg##_unary_check _Tp1> \\\n-  struct __dummy_struct_##__func##__ret##__arg##_unary_check { }; \\\n-  static __dummy_struct_##__func##__ret##__arg##_unary_check< \\\n-    _STL_UNARY_FUNCTION_ERROR< \\\n-      __func, __ret, __arg>::__unary_function_requirement_violation>  \\\n-  __dummy_ptr_##__func##__ret##__arg##_unary_check\n-\n-\n-#define __STL_CLASS_BINARY_FUNCTION_CHECK(__func, __ret, __first, __second) \\\n-  typedef __ret (* __f_##__func##__ret##__first##__second##_binary_check)( __func&, const __first&,\\\n-                                                    const __second& ); \\\n-  template <__f_##__func##__ret##__first##__second##_binary_check _Tp1> \\\n-  struct __dummy_struct_##__func##__ret##__first##__second##_binary_check { }; \\\n-  static __dummy_struct_##__func##__ret##__first##__second##_binary_check< \\\n-    _STL_BINARY_FUNCTION_ERROR<__func, __ret, __first, __second>:: \\\n-  __binary_function_requirement_violation>  \\\n-  __dummy_ptr_##__func##__ret##__first##__second##_binary_check\n-\n-\n-#define __STL_CLASS_REQUIRES_BINARY_OP(__opname, __ret, __first, __second) \\\n-  typedef __ret (* __f_##__func##__ret##__first##__second##_binary_op)(const __first&, \\\n-                                                    const __second& ); \\\n-  template <__f_##__func##__ret##__first##__second##_binary_op _Tp1> \\\n-  struct __dummy_struct_##__func##__ret##__first##__second##_binary_op { }; \\\n-  static __dummy_struct_##__func##__ret##__first##__second##_binary_op< \\\n-    _STL_BINARY##__opname##_ERROR<__ret, __first, __second>:: \\\n-  __binary_operator_requirement_violation>  \\\n-  __dummy_ptr_##__func##__ret##__first##__second##_binary_op\n-\n-#endif\n-\n-/* helper class for finding non-const version of a type. Need to have\n-   something to assign to etc. when testing constant iterators. */\n-\n-template <class _Tp>\n-struct _Mutable_trait {\n-  typedef _Tp _Type;\n-};\n-template <class _Tp>\n-struct _Mutable_trait<const _Tp> {\n-  typedef _Tp _Type;\n-};\n-\n-\n-/* helper function for avoiding compiler warnings about unused variables */\n-template <class _Type>\n-void __sink_unused_warning(_Type) { }\n-\n-template <class _TypeX, class _TypeY>\n-struct _STL_CONVERT_ERROR {\n-  static void\n-  __type_X_is_not_convertible_to_type_Y(_TypeX __x, _TypeY) {\n-    _TypeY __y = __x;\n-    __sink_unused_warning(__y);\n-  }\n-};\n-\n-\n-template <class _Type> struct __check_equal { };\n-\n-template <class _TypeX, class _TypeY>\n-struct _STL_SAME_TYPE_ERROR {\n-  static void\n-  __type_X_not_same_as_type_Y(_TypeX , _TypeY ) { \n-    __check_equal<_TypeX> t1 = __check_equal<_TypeY>();\n-  }\n-};\n-\n-\n-// Some Functon Object Checks\n-\n-template <class _Func, class _Ret>\n-struct _STL_GENERATOR_ERROR {\n-  static _Ret __generator_requirement_violation(_Func& __f) {\n-    return __f();\n-  }\n-};\n-\n-template <class _Func>\n-struct _STL_GENERATOR_ERROR<_Func, void> {\n-  static void __generator_requirement_violation(_Func& __f) {\n-    __f();\n-  }\n-};\n-\n-\n-template <class _Func, class _Ret, class _Arg>\n-struct _STL_UNARY_FUNCTION_ERROR {\n-  static _Ret\n-  __unary_function_requirement_violation(_Func& __f,\n-                                          const _Arg& __arg) {\n-    return __f(__arg);\n-  }\n-};\n-\n-template <class _Func, class _Arg>\n-struct _STL_UNARY_FUNCTION_ERROR<_Func, void, _Arg> {\n-  static void\n-  __unary_function_requirement_violation(_Func& __f,\n-                                          const _Arg& __arg) {\n-    __f(__arg);\n-  }\n-};\n-\n-template <class _Func, class _Ret, class _First, class _Second>\n-struct _STL_BINARY_FUNCTION_ERROR {\n-  static _Ret\n-  __binary_function_requirement_violation(_Func& __f,\n-                                          const _First& __first, \n-                                          const _Second& __second) {\n-    return __f(__first, __second);\n-  }\n-};\n-\n-template <class _Func, class _First, class _Second>\n-struct _STL_BINARY_FUNCTION_ERROR<_Func, void, _First, _Second> {\n-  static void\n-  __binary_function_requirement_violation(_Func& __f,\n-                                          const _First& __first, \n-                                          const _Second& __second) {\n-    __f(__first, __second);\n-  }\n-};\n-\n-\n-#define __STL_DEFINE_BINARY_OP_CHECK(_OP, _NAME) \\\n-template <class _Ret, class _First, class _Second> \\\n-struct _STL_BINARY##_NAME##_ERROR { \\\n-  static _Ret \\\n-  __const_binary_operator_requirement_violation(const _First& __first,  \\\n-                                                const _Second& __second) { \\\n-    return __first _OP __second; \\\n-  } \\\n-  static _Ret \\\n-  __binary_operator_requirement_violation(_First& __first,  \\\n-                                          _Second& __second) { \\\n-    return __first _OP __second; \\\n-  } \\\n-}\n-\n-__STL_DEFINE_BINARY_OP_CHECK(==, _OP_EQUAL);\n-__STL_DEFINE_BINARY_OP_CHECK(!=, _OP_NOT_EQUAL);\n-__STL_DEFINE_BINARY_OP_CHECK(<, _OP_LESS_THAN);\n-__STL_DEFINE_BINARY_OP_CHECK(<=, _OP_LESS_EQUAL);\n-__STL_DEFINE_BINARY_OP_CHECK(>, _OP_GREATER_THAN);\n-__STL_DEFINE_BINARY_OP_CHECK(>=, _OP_GREATER_EQUAL);\n-__STL_DEFINE_BINARY_OP_CHECK(+, _OP_PLUS);\n-__STL_DEFINE_BINARY_OP_CHECK(*, _OP_TIMES);\n-__STL_DEFINE_BINARY_OP_CHECK(/, _OP_DIVIDE);\n-__STL_DEFINE_BINARY_OP_CHECK(-, _OP_SUBTRACT);\n-__STL_DEFINE_BINARY_OP_CHECK(%, _OP_MOD);\n-// ...\n-\n-// TODO, add unary operators (prefix and postfix)\n-\n-/*\n-  The presence of this class is just to trick EDG into displaying\n-  these error messages before any other errors. Without the\n-  classes, the errors in the functions get reported after\n-  other class errors deep inside the library. The name\n-  choice just makes for an eye catching error message :)\n- */\n-struct _STL_ERROR {\n-\n-  template <class _Type>\n-  static _Type\n-  __default_constructor_requirement_violation(_Type) {\n-    return _Type();\n-  }\n-  template <class _Type>\n-  static _Type\n-  __assignment_operator_requirement_violation(_Type __a) {\n-    __a = __a;\n-    return __a;\n-  }\n-  template <class _Type>\n-  static _Type\n-  __copy_constructor_requirement_violation(_Type __a) {\n-    _Type __c(__a);\n-    return __c;\n-  }\n-  template <class _Type>\n-  static _Type\n-  __const_parameter_required_for_copy_constructor(_Type /* __a */, \n-                                                  const _Type& __b) {\n-    _Type __c(__b);\n-    return __c;\n-  }\n-  template <class _Type>\n-  static _Type\n-  __const_parameter_required_for_assignment_operator(_Type __a, \n-                                                     const _Type& __b) {\n-    __a = __b;\n-    return __a;\n-  }\n-  template <class _Type>\n-  static _Type\n-  __less_than_comparable_requirement_violation(_Type __a, _Type __b) {\n-    if (__a < __b) return __a;\n-    return __b;\n-  }\n-  template <class _Type>\n-  static _Type\n-  __equality_comparable_requirement_violation(_Type __a, _Type __b) {\n-    if (__a == __b || __a != __b) return __a;\n-    return __b;\n-  }\n-  template <class _Iterator>\n-  static void\n-  __dereference_operator_requirement_violation(_Iterator __i) {\n-    __sink_unused_warning(*__i);\n-  }\n-  template <class _Iterator>\n-  static void\n-  __dereference_operator_and_assignment_requirement_violation(_Iterator __i) {\n-    *__i = *__i;\n-  }\n-  template <class _Iterator>\n-  static void\n-  __preincrement_operator_requirement_violation(_Iterator __i) {\n-    ++__i;\n-  }\n-  template <class _Iterator>\n-  static void\n-  __postincrement_operator_requirement_violation(_Iterator __i) {\n-    __i++;\n-  }\n-  template <class _Iterator>\n-  static void\n-  __predecrement_operator_requirement_violation(_Iterator __i) {\n-    --__i;\n-  }\n-  template <class _Iterator>\n-  static void\n-  __postdecrement_operator_requirement_violation(_Iterator __i) {\n-    __i--;\n-  }\n-  template <class _Iterator, class _Type>\n-  static void\n-  __postincrement_operator_and_assignment_requirement_violation(_Iterator __i,\n-                                                                _Type __t) {\n-    *__i++ = __t;\n-  }\n-  template <class _Iterator, class _Distance>\n-  static _Iterator\n-  __iterator_addition_assignment_requirement_violation(_Iterator __i, \n-                                                       _Distance __n) {\n-    __i += __n;\n-    return __i;\n-  }\n-  template <class _Iterator, class _Distance>\n-  static _Iterator\n-  __iterator_addition_requirement_violation(_Iterator __i, _Distance __n) {\n-    __i = __i + __n;\n-    __i = __n + __i;\n-    return __i;\n-  }\n-  template <class _Iterator, class _Distance>\n-  static _Iterator\n-  __iterator_subtraction_assignment_requirement_violation(_Iterator __i,\n-                                                          _Distance __n) {\n-    __i -= __n;\n-    return __i;\n-  }\n-  template <class _Iterator, class _Distance>\n-  static _Iterator\n-  __iterator_subtraction_requirement_violation(_Iterator __i, _Distance __n) {\n-    __i = __i - __n;\n-    return __i;\n-  }\n-  template <class _Iterator, class _Distance>\n-  static _Distance\n-  __difference_operator_requirement_violation(_Iterator __i, _Iterator __j,\n-                                              _Distance __n) {\n-    __n = __i - __j;\n-    return __n;\n-  }\n-  template <class _Exp, class _Type, class _Distance>\n-  static _Type\n-  __element_access_operator_requirement_violation(_Exp __x, _Type*,\n-                                                  _Distance __n) {\n-    return __x[__n];\n-  }\n-  template <class _Exp, class _Type, class _Distance>\n-  static void\n-  __element_assignment_operator_requirement_violation(_Exp __x,\n-                                                      _Type* __t,\n-                                                      _Distance __n) {\n-    __x[__n] = *__t;\n-  }\n-\n-}; /* _STL_ERROR */\n-\n-/* Associated Type Requirements */\n-\n-namespace std\n-{\n-template <class _Iterator> struct iterator_traits;\n-} // namespace std\n-\n-template <class _Iter> \n-struct __value_type_type_definition_requirement_violation {\n-  typedef typename std::iterator_traits<_Iter>::value_type value_type;\n-};\n-\n-template <class _Iter> \n-struct __difference_type_type_definition_requirement_violation {\n-  typedef typename std::iterator_traits<_Iter>::difference_type\n-          difference_type;\n-};\n-\n-template <class _Iter> \n-struct __reference_type_definition_requirement_violation {\n-  typedef typename std::iterator_traits<_Iter>::reference reference;\n-};\n-\n-template <class _Iter> \n-struct __pointer_type_definition_requirement_violation {\n-  typedef typename std::iterator_traits<_Iter>::pointer pointer;\n-};\n-\n-template <class _Iter> \n-struct __iterator_category_type_definition_requirement_violation {\n-  typedef typename std::iterator_traits<_Iter>::iterator_category \n-          iterator_category;\n-};\n-\n-/* Assignable Requirements */\n-\n-\n-template <class _Type>\n-struct _Assignable_concept_specification {\n-  static void _Assignable_requirement_violation(_Type __a) {\n-    _STL_ERROR::__assignment_operator_requirement_violation(__a);\n-    _STL_ERROR::__copy_constructor_requirement_violation(__a);\n-    _STL_ERROR::__const_parameter_required_for_copy_constructor(__a,__a);\n-    _STL_ERROR::__const_parameter_required_for_assignment_operator(__a,__a);\n-  }\n-};\n-\n-/* DefaultConstructible Requirements */\n-\n-\n-template <class _Type>\n-struct _DefaultConstructible_concept_specification {\n-  static void _DefaultConstructible_requirement_violation(_Type __a) {\n-    _STL_ERROR::__default_constructor_requirement_violation(__a);\n-  }\n-};\n-\n-/* EqualityComparable Requirements */\n-\n-template <class _Type>\n-struct _EqualityComparable_concept_specification {\n-  static void _EqualityComparable_requirement_violation(_Type __a) {\n-    _STL_ERROR::__equality_comparable_requirement_violation(__a, __a);\n-  }\n-};\n-\n-/* LessThanComparable Requirements */\n-template <class _Type>\n-struct _LessThanComparable_concept_specification {\n-  static void _LessThanComparable_requirement_violation(_Type __a) {\n-    _STL_ERROR::__less_than_comparable_requirement_violation(__a, __a);\n-  }\n-};\n-\n-/* TrivialIterator Requirements */\n-\n-template <class _TrivialIterator>\n-struct _TrivialIterator_concept_specification {\n-static void\n-_TrivialIterator_requirement_violation(_TrivialIterator __i) {\n-  typedef typename\n-    __value_type_type_definition_requirement_violation<_TrivialIterator>::\n-    value_type __T;\n-  // Refinement of Assignable\n-  _Assignable_concept_specification<_TrivialIterator>::\n-    _Assignable_requirement_violation(__i);\n-  // Refinement of DefaultConstructible\n-  _DefaultConstructible_concept_specification<_TrivialIterator>::\n-    _DefaultConstructible_requirement_violation(__i);\n-  // Refinement of EqualityComparable\n-  _EqualityComparable_concept_specification<_TrivialIterator>::\n-    _EqualityComparable_requirement_violation(__i);\n-  // Valid Expressions\n-  _STL_ERROR::__dereference_operator_requirement_violation(__i);\n-}\n-};\n-\n-template <class _TrivialIterator>\n-struct _Mutable_TrivialIterator_concept_specification {\n-static void\n-_Mutable_TrivialIterator_requirement_violation(_TrivialIterator __i) {\n-  _TrivialIterator_concept_specification<_TrivialIterator>::\n-    _TrivialIterator_requirement_violation(__i);\n-  // Valid Expressions\n-  _STL_ERROR::__dereference_operator_and_assignment_requirement_violation(__i);\n-}\n-};\n-\n-/* InputIterator Requirements */\n-\n-template <class _InputIterator>\n-struct _InputIterator_concept_specification {\n-static void\n-_InputIterator_requirement_violation(_InputIterator __i) {\n-  // Refinement of TrivialIterator\n-  _TrivialIterator_concept_specification<_InputIterator>::\n-    _TrivialIterator_requirement_violation(__i);\n-  // Associated Types\n-  __difference_type_type_definition_requirement_violation<_InputIterator>();\n-  __reference_type_definition_requirement_violation<_InputIterator>();\n-  __pointer_type_definition_requirement_violation<_InputIterator>();\n-  __iterator_category_type_definition_requirement_violation<_InputIterator>();\n-  // Valid Expressions\n-  _STL_ERROR::__preincrement_operator_requirement_violation(__i);\n-  _STL_ERROR::__postincrement_operator_requirement_violation(__i);\n-}\n-};\n-\n-/* OutputIterator Requirements */\n-\n-template <class _OutputIterator>\n-struct _OutputIterator_concept_specification {\n-static void\n-_OutputIterator_requirement_violation(_OutputIterator __i) {\n-  // Refinement of Assignable\n-  _Assignable_concept_specification<_OutputIterator>::\n-    _Assignable_requirement_violation(__i);\n-  // Associated Types\n-  __iterator_category_type_definition_requirement_violation<_OutputIterator>();\n-  // Valid Expressions\n-  _STL_ERROR::__dereference_operator_requirement_violation(__i);\n-  _STL_ERROR::__preincrement_operator_requirement_violation(__i);\n-  _STL_ERROR::__postincrement_operator_requirement_violation(__i);\n-  _STL_ERROR::\n-    __postincrement_operator_and_assignment_requirement_violation(__i, *__i);\n-}\n-};\n-\n-/* ForwardIterator Requirements */\n-\n-template <class _ForwardIterator>\n-struct _ForwardIterator_concept_specification {\n-static void\n-_ForwardIterator_requirement_violation(_ForwardIterator __i) {\n-  // Refinement of InputIterator\n-  _InputIterator_concept_specification<_ForwardIterator>::\n-    _InputIterator_requirement_violation(__i);\n-}\n-};\n-\n-template <class _ForwardIterator>\n-struct _Mutable_ForwardIterator_concept_specification {\n-static void\n-_Mutable_ForwardIterator_requirement_violation(_ForwardIterator __i) {\n-  _ForwardIterator_concept_specification<_ForwardIterator>::\n-    _ForwardIterator_requirement_violation(__i);\n-  // Refinement of OutputIterator\n-  _OutputIterator_concept_specification<_ForwardIterator>::\n-    _OutputIterator_requirement_violation(__i);\n-}\n-};\n-\n-/* BidirectionalIterator Requirements */\n-\n-template <class _BidirectionalIterator>\n-struct _BidirectionalIterator_concept_specification {\n-static void\n-_BidirectionalIterator_requirement_violation(_BidirectionalIterator __i) {\n-  // Refinement of ForwardIterator\n-  _ForwardIterator_concept_specification<_BidirectionalIterator>::\n-    _ForwardIterator_requirement_violation(__i);\n-  // Valid Expressions\n-  _STL_ERROR::__predecrement_operator_requirement_violation(__i);\n-  _STL_ERROR::__postdecrement_operator_requirement_violation(__i);\n-}\n-};\n-\n-template <class _BidirectionalIterator>\n-struct _Mutable_BidirectionalIterator_concept_specification {\n-static void\n-_Mutable_BidirectionalIterator_requirement_violation(\n-       _BidirectionalIterator __i)\n-{\n-  _BidirectionalIterator_concept_specification<_BidirectionalIterator>::\n-    _BidirectionalIterator_requirement_violation(__i);\n-  // Refinement of mutable_ForwardIterator\n-  _Mutable_ForwardIterator_concept_specification<_BidirectionalIterator>::\n-    _Mutable_ForwardIterator_requirement_violation(__i);\n-  typedef typename\n-    __value_type_type_definition_requirement_violation<\n-    _BidirectionalIterator>::value_type __T;\n-  typename _Mutable_trait<__T>::_Type* __tmp_ptr = 0;\n-  // Valid Expressions\n-  _STL_ERROR::\n-    __postincrement_operator_and_assignment_requirement_violation(__i,\n-                                                                  *__tmp_ptr);\n-}\n-};\n-\n-/* RandomAccessIterator Requirements */\n-\n-template <class _RandAccIter>\n-struct _RandomAccessIterator_concept_specification {\n-static void\n-_RandomAccessIterator_requirement_violation(_RandAccIter __i) {\n-  // Refinement of BidirectionalIterator\n-  _BidirectionalIterator_concept_specification<_RandAccIter>::\n-    _BidirectionalIterator_requirement_violation(__i);\n-  // Refinement of LessThanComparable\n-  _LessThanComparable_concept_specification<_RandAccIter>::\n-    _LessThanComparable_requirement_violation(__i);\n-  typedef typename \n-        __value_type_type_definition_requirement_violation<_RandAccIter>\n-        ::value_type\n-    value_type;\n-  typedef typename\n-        __difference_type_type_definition_requirement_violation<_RandAccIter>\n-        ::difference_type \n-    _Dist;\n-  typedef typename _Mutable_trait<_Dist>::_Type _MutDist;\n-\n-  // Valid Expressions\n-  _STL_ERROR::__iterator_addition_assignment_requirement_violation(__i,\n-                                                                   _MutDist());\n-  _STL_ERROR::__iterator_addition_requirement_violation(__i,\n-                                                        _MutDist());\n-  _STL_ERROR::\n-    __iterator_subtraction_assignment_requirement_violation(__i,\n-                                                            _MutDist());\n-  _STL_ERROR::__iterator_subtraction_requirement_violation(__i,\n-                                                           _MutDist());\n-  _STL_ERROR::__difference_operator_requirement_violation(__i, __i,\n-                                                          _MutDist());\n-  typename _Mutable_trait<value_type>::_Type* __dummy_ptr = 0;\n-  _STL_ERROR::__element_access_operator_requirement_violation(__i,\n-                                                              __dummy_ptr,\n-                                                              _MutDist());\n-}\n-};\n-\n-template <class _RandAccIter>\n-struct _Mutable_RandomAccessIterator_concept_specification {\n-static void\n-_Mutable_RandomAccessIterator_requirement_violation(_RandAccIter __i)\n-{\n-  _RandomAccessIterator_concept_specification<_RandAccIter>::\n-    _RandomAccessIterator_requirement_violation(__i);\n-  // Refinement of mutable_BidirectionalIterator\n-  _Mutable_BidirectionalIterator_concept_specification<_RandAccIter>::\n-    _Mutable_BidirectionalIterator_requirement_violation(__i);\n-  typedef typename\n-        __value_type_type_definition_requirement_violation<_RandAccIter>\n-        ::value_type\n-    value_type;\n-  typedef typename\n-        __difference_type_type_definition_requirement_violation<_RandAccIter>\n-        ::difference_type\n-    _Dist;\n-\n-  typename _Mutable_trait<value_type>::_Type* __tmp_ptr = 0;\n-  // Valid Expressions\n-  _STL_ERROR::__element_assignment_operator_requirement_violation(__i,\n-                  __tmp_ptr, _Dist());\n-}\n-};\n-\n-#define __STL_TYPEDEF_REQUIREMENT(__REQUIREMENT) \\\n-template <class Type> \\\n-struct __##__REQUIREMENT##__typedef_requirement_violation { \\\n-  typedef typename Type::__REQUIREMENT __REQUIREMENT; \\\n-}\n-\n-__STL_TYPEDEF_REQUIREMENT(value_type);\n-__STL_TYPEDEF_REQUIREMENT(difference_type);\n-__STL_TYPEDEF_REQUIREMENT(size_type);\n-__STL_TYPEDEF_REQUIREMENT(reference);\n-__STL_TYPEDEF_REQUIREMENT(const_reference);\n-__STL_TYPEDEF_REQUIREMENT(pointer);\n-__STL_TYPEDEF_REQUIREMENT(const_pointer);\n-\n-\n-template <class _Alloc>\n-struct _Allocator_concept_specification {\n-static void\n-_Allocator_requirement_violation(_Alloc __a) {\n-  // Refinement of DefaultConstructible\n-  _DefaultConstructible_concept_specification<_Alloc>::\n-    _DefaultConstructible_requirement_violation(__a);\n-  // Refinement of EqualityComparable\n-  _EqualityComparable_concept_specification<_Alloc>::\n-    _EqualityComparable_requirement_violation(__a);\n-  // Associated Types\n-  __value_type__typedef_requirement_violation<_Alloc>();\n-  __difference_type__typedef_requirement_violation<_Alloc>();\n-  __size_type__typedef_requirement_violation<_Alloc>();\n-  __reference__typedef_requirement_violation<_Alloc>();\n-  __const_reference__typedef_requirement_violation<_Alloc>();\n-  __pointer__typedef_requirement_violation<_Alloc>();\n-  __const_pointer__typedef_requirement_violation<_Alloc>();\n-  typedef typename _Alloc::value_type _Tp;\n-//  __STL_REQUIRES_SAME_TYPE(typename _Alloc::template rebind<_Tp>::other, _Alloc);\n-}\n-};\n-\n-#endif /* __STL_USE_CONCEPT_CHECKS */\n-\n-#endif /* __CONCEPT_CHECKS_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "99aec1c4b62b5b580a0e6027d4ed3a81fb280dba", "filename": "libstdc++-v3/include/bits/container_concepts.h", "status": "removed", "additions": 0, "deletions": 244, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4a318c36db4565f126e4428ea856460437b27d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcontainer_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4a318c36db4565f126e4428ea856460437b27d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcontainer_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcontainer_concepts.h?ref=9f4a318c36db4565f126e4428ea856460437b27d", "patch": "@@ -1,244 +0,0 @@\n-/*\n- * Copyright (c) 1999\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-#ifndef __STL_CONTAINER_CONCEPTS_H\n-#define __STL_CONTAINER_CONCEPTS_H\n-\n-\n-#include <bits/concept_checks.h>\n-\n-#ifdef __STL_USE_CONCEPT_CHECKS\n-\n-\n-// This file covers the following concepts:\n-//       _Container\n-//       _ForwardContainer\n-//       _ReversibleContainer\n-//       _const_ReversibleContainer\n-//       _RandomAccessContainer\n-//\n-\n-struct _ERROR_IN_STL_CONTAINER {\n-\n-  /* Container expresssions */\n-\n-  template <class _Container>\n-  static void\n-  __begin_iterator_accessor_requirement_violation(_Container __c) {\n-    __c.begin();\n-  }\n-  template <class _Container>\n-  static void\n-  __const_begin_iterator_accessor_requirement_violation(const _Container& __c) {\n-    __c.begin();\n-  }\n-  template <class _Container>\n-  static void\n-  __end_iterator_accessor_requirement_violation(_Container __c) {\n-    __c.end();\n-  }\n-  template <class _Container>\n-  static void\n-  __const_end_iterator_accessor_requirement_violation(const _Container& __c) {\n-    __c.end();\n-  }\n-\n-  template <class _Container>\n-  static void\n-  __rbegin_iterator_accessor_requirement_violation(_Container __c) {\n-    __c.rbegin();\n-  }\n-  template <class _Container>\n-  static void\n-  __const_rbegin_iterator_accessor_requirement_violation(const _Container& __c) {\n-    __c.rbegin();\n-  }\n-  template <class _Container>\n-  static void\n-  __rend_iterator_accessor_requirement_violation(_Container __c) {\n-    __c.rend();\n-  }\n-  template <class _Container>\n-  static void\n-  __const_rend_iterator_accessor_requirement_violation(const _Container& __c) {\n-    __c.rend();\n-  }\n-  template <class _Container>\n-  static void\n-  __size_function_must_be_const(const _Container& __c) {\n-    __c.size();\n-  }\n-  template <class _Container>\n-  static void\n-  __size_function_requirement_violation(_Container& __c) {\n-    __c.size();\n-    __size_function_must_be_const(__c);\n-  }\n-  template <class _Container>\n-  static void\n-  __max_size_function_must_be_const(const _Container& __c) {\n-    __c.max_size();\n-  }\n-  template <class _Container>\n-  static void\n-  __max_size_function_requirement_violation(_Container& __c) {\n-    __c.max_size();\n-    __max_size_function_must_be_const(__c);\n-  }\n-  template <class _Container>\n-  static void\n-  __empty_function_must_be_const(const _Container& __c) {\n-    __c.empty();\n-  }\n-  template <class _Container>\n-  static void\n-  __empty_function_requirement_violation(_Container& __c) {\n-    __c.empty();\n-    __empty_function_must_be_const(__c);\n-  }\n-  template <class _Container>\n-  static void\n-  __swap_function_requirement_violation(_Container& __c) {\n-    __c.swap(__c);\n-  }\n-\n-};\n-\n-\n-__STL_TYPEDEF_REQUIREMENT(iterator);\n-__STL_TYPEDEF_REQUIREMENT(const_iterator);\n-\n-/* Containers */\n-\n-template <class _Container>\n-struct _Container_concept_specification {\n-static void\n-_Container_requirement_violation(_Container __c) {\n-  // Refinement of Assignable\n-  _Assignable_concept_specification<_Container>::_Assignable_requirement_violation(__c);\n-  // Associated Types\n-  __value_type__typedef_requirement_violation<_Container>();\n-  __difference_type__typedef_requirement_violation<_Container>();\n-  __size_type__typedef_requirement_violation<_Container>();\n-  __reference__typedef_requirement_violation<_Container>();\n-  __const_reference__typedef_requirement_violation<_Container>();\n-  __pointer__typedef_requirement_violation<_Container>();\n-  __const_pointer__typedef_requirement_violation<_Container>();\n-  __iterator__typedef_requirement_violation<_Container>();\n-  __const_iterator__typedef_requirement_violation<_Container>();\n-  // Valid Expressions\n-  _ERROR_IN_STL_CONTAINER::__const_begin_iterator_accessor_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__const_end_iterator_accessor_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__begin_iterator_accessor_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__end_iterator_accessor_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__size_function_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__max_size_function_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__empty_function_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__swap_function_requirement_violation(__c);\n-  // Requirements on Iterators\n-  typedef typename _Container::iterator iter;\n-  typedef typename _Container::const_iterator const_iter;\n-  _InputIterator_concept_specification<const_iter>::_InputIterator_requirement_violation(const_iter());\n-  _InputIterator_concept_specification<iter>::_InputIterator_requirement_violation(iter());\n-}\n-};\n-\n-template <class _ForwardContainer>\n-struct _ForwardContainer_concept_specification {\n-static void\n-_ForwardContainer_requirement_violation(_ForwardContainer __c) {\n-  // Refinement of Container\n-  _Container_concept_specification<_ForwardContainer>::_Container_requirement_violation(__c);\n-  // Requirements on Iterators\n-  typedef typename _ForwardContainer::iterator iter;\n-  typedef typename _ForwardContainer::const_iterator const_iter;\n-  _ForwardIterator_concept_specification<const_iter>::_ForwardIterator_requirement_violation(const_iter());\n-  _Mutable_ForwardIterator_concept_specification<iter>::_Mutable_ForwardIterator_requirement_violation(iter());\n-}\n-};\n-\n-\n-__STL_TYPEDEF_REQUIREMENT(reverse_iterator);\n-__STL_TYPEDEF_REQUIREMENT(const_reverse_iterator);\n-\n-template <class _ReversibleContainer>\n-struct _ReversibleContainer_concept_specification {\n-static void\n-_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {\n-  // Refinement of ForwardContainer\n-  _ForwardContainer_concept_specification<_ReversibleContainer>::_ForwardContainer_requirement_violation(__c);\n-  // Associated types\n-  __reverse_iterator__typedef_requirement_violation<_ReversibleContainer>();\n-  __const_reverse_iterator__typedef_requirement_violation<_ReversibleContainer>();\n-  // Valid Expressions\n-  _ERROR_IN_STL_CONTAINER::__const_rbegin_iterator_accessor_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__const_rend_iterator_accessor_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__rbegin_iterator_accessor_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__rend_iterator_accessor_requirement_violation(__c);\n-  // Requirements on Iterators\n-  typedef typename _ReversibleContainer::iterator iter;\n-  typedef typename _ReversibleContainer::const_iterator const_iter;\n-  _BidirectionalIterator_concept_specification<const_iter>::_BidirectionalIterator_requirement_violation(const_iter());\n-  _Mutable_BidirectionalIterator_concept_specification<iter>::_Mutable_BidirectionalIterator_requirement_violation(iter());\n-}\n-};\n-\n-template <class _ReversibleContainer>\n-struct _const_ReversibleContainer_concept_specification {\n-static void\n-_const_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {\n-  // Refinement of Container (JGS, not ForwardContainer)\n-  _Container_concept_specification<_ReversibleContainer>::_Container_requirement_violation(__c);\n-  // Associated types\n-  __reverse_iterator__typedef_requirement_violation<_ReversibleContainer>();\n-  __const_reverse_iterator__typedef_requirement_violation<_ReversibleContainer>();\n-  // Valid Expressions\n-  _ERROR_IN_STL_CONTAINER::__const_rbegin_iterator_accessor_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__const_rend_iterator_accessor_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__rbegin_iterator_accessor_requirement_violation(__c);\n-  _ERROR_IN_STL_CONTAINER::__rend_iterator_accessor_requirement_violation(__c);\n-  // Requirements on Iterators\n-  typedef typename _ReversibleContainer::iterator iter;\n-  typedef typename _ReversibleContainer::const_iterator const_iter;\n-  \n-  _BidirectionalIterator_concept_specification<const_iter>::_BidirectionalIterator_requirement_violation(const_iter());\n-}\n-};\n-\n-\n-template <class _RandomAccessContainer>\n-struct _RandomAccessContainer_concept_specification {\n-static void\n-_RandomAccessContainer_requirement_violation(_RandomAccessContainer __c) {\n-  // Refinement of ReversibleContainer\n-  _ReversibleContainer_concept_specification<_RandomAccessContainer>::_ReversibleContainer_requirement_violation(__c);\n-  // Valid Expressions\n-  typedef typename _RandomAccessContainer::value_type __T;\n-  typedef typename _RandomAccessContainer::difference_type _Dist;\n-  typedef typename _Mutable_trait<__T>::_Type Type;\n-  typedef Type* _TypePtr;\n-  typedef typename _Mutable_trait<_Dist>::_Type Dist;\n-  _STL_ERROR::__element_access_operator_requirement_violation(__c,\n-\t\t\t\t\t\t\t      _TypePtr(), \n-\t\t\t\t\t\t\t      Dist());\n-  // Requirements on Iterators\n-  typedef typename _RandomAccessContainer::iterator iter;\n-  typedef typename _RandomAccessContainer::const_iterator const_iter;\n-  _RandomAccessIterator_concept_specification<const_iter>::_RandomAccessIterator_requirement_violation(const_iter());\n-  _Mutable_RandomAccessIterator_concept_specification<iter>::_Mutable_RandomAccessIterator_requirement_violation(iter());\n-}\n-};\n-\n-#endif /* if __STL_USE_CONCEPT_CHECKS */\n-\n-#endif /* __STL_CONTAINER_CONCEPTS_H */"}, {"sha": "052b0dfbe852e20cd579c280b5ff300425fd9492", "filename": "libstdc++-v3/include/bits/sbuf_iter.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -39,7 +39,7 @@ namespace std\n \n   template<typename _CharT, typename _Traits>\n     class ostreambuf_iterator\n-#if 0      // XXX this is standard:\n+#if 1      // XXX this is standard:\n     : public iterator<output_iterator_tag, _CharT, void, void, void>\n #else\n     : public output_iterator"}, {"sha": "f251e2e26eb91611ae37b151eecd51178be5f2a4", "filename": "libstdc++-v3/include/bits/sequence_concepts.h", "status": "removed", "additions": 0, "deletions": 206, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4a318c36db4565f126e4428ea856460437b27d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsequence_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4a318c36db4565f126e4428ea856460437b27d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsequence_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsequence_concepts.h?ref=9f4a318c36db4565f126e4428ea856460437b27d", "patch": "@@ -1,206 +0,0 @@\n-/*\n- * Copyright (c) 1999\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-#ifndef _STL_SEQUENCE_CONCEPTS_H\n-#define _STL_SEQUENCE_CONCEPTS_H 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/container_concepts.h>\n-\n-#ifdef __STL_USE_CONCEPT_CHECKS\n-\n-// This file covers the following concepts:\n-//       _Sequence\n-//       _FrontInsertionSequence\n-//       _BackInsertionSequence\n-\n-struct _ERROR_IN_STL_SEQ {\n-\n-  template <class _XX>\n-  static void\n-  __fill_constructor_requirement_violation(_XX& __s) {\n-    typename _XX::value_type __t = typename _XX::value_type();\n-    typename _XX::difference_type __n = typename _XX::difference_type();\n-    _XX __x(__n, __t);\n-    __sink_unused_warning(__x);\n-  }\n-  template <class _XX>\n-  static void\n-  __fill_default_constructor_requirement_violation(_XX& __s) {\n-    _STL_ERROR::__default_constructor_requirement_violation(*__s.begin());\n-    typename _XX::difference_type __n = typename _XX::difference_type();\n-    _XX __x(__n);\n-    __sink_unused_warning(__x);\n-  }  \n-  template <class _XX>\n-  static void\n-  __range_constructor_requirement_violation(_XX& __s) {\n-    _XX __x(__s.begin(), __s.end());\n-    __sink_unused_warning(__x);\n-  }\n-  template <class _XX>\n-  static void\n-  __insert_function_requirement_violation(_XX& __s) {\n-    typename _XX::value_type __t = typename _XX::value_type();\n-    typename _XX::iterator __p = typename _XX::iterator();\n-    __p = __s.insert(__p, __t);\n-  }\n-  template <class _XX>\n-  static void\n-  __fill_insert_function_requirement_violation(_XX& __s) {\n-    typename _XX::value_type __t = typename _XX::value_type();\n-    typename _XX::iterator __p = typename _XX::iterator();\n-    typename _XX::difference_type __n = typename _XX::difference_type();\n-    __s.insert(__p, __n, __t);\n-  }\n-  template <class _XX>\n-  static void\n-  __range_insert_function_requirement_violation(_XX& __s) {\n-    typename _XX::iterator __p = typename _XX::iterator();\n-    typename _XX::iterator __i = typename _XX::iterator();\n-    typename _XX::iterator __j = typename _XX::iterator();\n-    __s.insert(__p, __i, __j);\n-  }\n-  template <class _XX>\n-  static void\n-  __insert_element_function_requirement_violation(_XX& __s) {\n-    typename _XX::value_type __t = typename _XX::value_type();\n-    std::pair<typename _XX::iterator, bool> __r;\n-    __r = __s.insert(__t);\n-    __sink_unused_warning(__r);\n-  }\n-  template <class _XX>\n-  static void\n-  __unconditional_insert_element_function_requirement_violation(_XX& __s) {\n-    typename _XX::value_type __t = typename _XX::value_type();\n-    typename _XX::iterator __p;\n-    __p = __s.insert(__t);\n-    __sink_unused_warning(__p);\n-  }\n-  template <class _XX>\n-  static void\n-  __erase_function_requirement_violation(_XX& __s) {\n-    typename _XX::iterator __p = typename _XX::iterator();\n-    __p = __s.erase(__p);\n-  }\n-  template <class _XX>\n-  static void\n-  __range_erase_function_requirement_violation(_XX& __s) {\n-    typename _XX::iterator __p = typename _XX::iterator();\n-    typename _XX::iterator __q = typename _XX::iterator();\n-    __p = __s.erase(__p, __q);\n-  }\n-  template <class _XX>\n-  static void\n-  __const_front_function_requirement_violation(const _XX& __s) {\n-    typename _XX::const_reference __t = __s.front();\n-    __sink_unused_warning(__t);\n-  }\n-  template <class _XX>\n-  static void\n-  __front_function_requirement_violation(_XX& __s) {\n-    typename _XX::reference __t = __s.front();\n-    __const_front_function_requirement_violation(__s);\n-    __sink_unused_warning(__t);\n-  }\n-  template <class _XX>\n-  static void\n-  __const_back_function_requirement_violation(const _XX& __s) {\n-    typename _XX::const_reference __t = __s.back();\n-    __sink_unused_warning(__t);\n-  }\n-  template <class _XX>\n-  static void\n-  __back_function_requirement_violation(_XX& __s) {\n-    typename _XX::reference __t = __s.back();\n-    __const_back_function_requirement_violation(__s);\n-    __sink_unused_warning(__t);\n-  }\n-  template <class _XX>\n-  static void\n-  __push_front_function_requirement_violation(_XX& __s) {\n-    typename _XX::value_type __t = typename _XX::value_type();\n-    __s.push_front(__t);\n-  }\n-  template <class _XX>\n-  static void\n-  __pop_front_function_requirement_violation(_XX& __s) {\n-    __s.pop_front();\n-  }\n-  template <class _XX>\n-  static void\n-  __push_back_function_requirement_violation(_XX& __s) {\n-    typename _XX::value_type __t = typename _XX::value_type();\n-    __s.push_back(__t);\n-  }\n-  template <class _XX>\n-  static void\n-  __pop_back_function_requirement_violation(_XX& __s) {\n-    __s.pop_back();\n-  }\n-\n-};\n-\n-/* Sequence Containers */\n-\n-template <class _Sequence>\n-struct _Sequence_concept_specification {\n-static void\n-_Sequence_requirement_violation(_Sequence __s) {\n-  // Refinement of ForwardContainer\n-  _ForwardContainer_concept_specification<_Sequence>::_ForwardContainer_requirement_violation(__s);\n-  // Refinement of DefaultConstructible\n-  _DefaultConstructible_concept_specification<_Sequence>::_DefaultConstructible_requirement_violation(__s);\n-  // Valid Expressions\n-  _ERROR_IN_STL_SEQ::__fill_constructor_requirement_violation(__s);\n-  _ERROR_IN_STL_SEQ::__fill_default_constructor_requirement_violation(__s);\n-  _ERROR_IN_STL_SEQ::__range_constructor_requirement_violation(__s);\n-  _ERROR_IN_STL_SEQ::__insert_function_requirement_violation(__s);\n-  _ERROR_IN_STL_SEQ::__fill_insert_function_requirement_violation(__s);\n-  _ERROR_IN_STL_SEQ::__range_insert_function_requirement_violation(__s);\n-  _ERROR_IN_STL_SEQ::__erase_function_requirement_violation(__s);\n-  _ERROR_IN_STL_SEQ::__range_erase_function_requirement_violation(__s);\n-  _ERROR_IN_STL_SEQ::__front_function_requirement_violation(__s);\n-}\n-};\n-\n-template <class _FrontInsertionSequence>\n-struct _FrontInsertionSequence_concept_specification {\n-static void\n-_FrontInsertionSequence_requirement_violation(_FrontInsertionSequence __s) {\n-  // Refinement of Sequence\n-  _Sequence_concept_specification<_FrontInsertionSequence>::_Sequence_requirement_violation(__s);\n-  // Valid Expressions\n-  _ERROR_IN_STL_SEQ::__push_front_function_requirement_violation(__s);\n-  _ERROR_IN_STL_SEQ::__pop_front_function_requirement_violation(__s);\n-}\n-};\n-\n-template <class _BackInsertionSequence>\n-struct _BackInsertionSequence_concept_specification {\n-static void\n-_BackInsertionSequence_requirement_violation(_BackInsertionSequence __s) {\n-  // Refinement of Sequence\n-  _Sequence_concept_specification<_BackInsertionSequence>::_Sequence_requirement_violation(__s);\n-  // Valid Expressions\n-  _ERROR_IN_STL_SEQ::__back_function_requirement_violation(__s);\n-  _ERROR_IN_STL_SEQ::__push_back_function_requirement_violation(__s);\n-  _ERROR_IN_STL_SEQ::__pop_back_function_requirement_violation(__s);\n-}\n-};\n-\n-#endif /* if __STL_USE_CONCEPT_CHECKS */\n-\n-\n-#endif /* _STL_SEQUENCE_CONCEPTS_H */"}, {"sha": "cb97ed1d21e0a5c0165120f88fbd06297b99df90", "filename": "libstdc++-v3/include/bits/std_iterator.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -31,7 +31,8 @@\n #include <bits/c++config.h>\n #include <bits/std_cstddef.h>\n #include <bits/std_iosfwd.h>\n-#include <bits/stl_iterator_base.h>\n+#include <bits/stl_iterator_base_types.h>\n+#include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_iterator.h>\n \n #endif /* _CPP_ITERATOR */"}, {"sha": "4385a96e2bd21fb91af4480e070ed6da1ad8b331", "filename": "libstdc++-v3/include/bits/std_memory.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -20,7 +20,7 @@\n #include <bits/stl_algobase.h>\n #include <bits/stl_alloc.h>\n #include <bits/stl_construct.h>\n-#include <bits/stl_iterator_base.h> //for iterator_traits\n+#include <bits/stl_iterator_base_types.h> //for iterator_traits\n #include <bits/stl_tempbuf.h>\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_raw_storage_iter.h>"}, {"sha": "929c4ff372fdc5088f2d0e84ae439bdbd9a6a9d1", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 917, "deletions": 556, "changes": 1473, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a"}, {"sha": "df768c615ffae93d85a50fea7ad8aad95ea7ee5b", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 155, "deletions": 94, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -46,37 +46,46 @@\n #include <new>\n \n #include <bits/std_iosfwd.h>\n-#include <bits/stl_iterator_base.h>\n+#include <bits/stl_iterator_base_types.h>\n+#include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_iterator.h>\n-\n-// We pick up concept_checks.h from stl_iterator_base.h.\n+#include <bits/concept_check.h>\n \n namespace std\n {\n \n // swap and iter_swap\n \n template <class _ForwardIter1, class _ForwardIter2, class _Tp>\n-inline void __iter_swap(_ForwardIter1 __a, _ForwardIter2 __b, _Tp*) {\n+inline void __iter_swap(_ForwardIter1 __a, _ForwardIter2 __b, _Tp*)\n+{\n   _Tp __tmp = *__a;\n   *__a = *__b;\n   *__b = __tmp;\n }\n \n template <class _ForwardIter1, class _ForwardIter2>\n-inline void iter_swap(_ForwardIter1 __a, _ForwardIter2 __b) {\n-  __STL_REQUIRES(_ForwardIter1, _Mutable_ForwardIterator);\n-  __STL_REQUIRES(_ForwardIter2, _Mutable_ForwardIterator);\n-  __STL_CONVERTIBLE(typename iterator_traits<_ForwardIter1>::value_type,\n-                    typename iterator_traits<_ForwardIter2>::value_type);\n-  __STL_CONVERTIBLE(typename iterator_traits<_ForwardIter2>::value_type,\n-                    typename iterator_traits<_ForwardIter1>::value_type);\n-  __iter_swap(__a, __b, __VALUE_TYPE(__a));\n+inline void iter_swap(_ForwardIter1 __a, _ForwardIter2 __b)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(Mutable_ForwardIteratorConcept<_ForwardIter1>);\n+  glibcpp_function_requires(Mutable_ForwardIteratorConcept<_ForwardIter2>);\n+  glibcpp_function_requires(ConvertibleConcept<\n+        typename iterator_traits<_ForwardIter1>::value_type,\n+        typename iterator_traits<_ForwardIter2>::value_type>);\n+  glibcpp_function_requires(ConvertibleConcept<\n+        typename iterator_traits<_ForwardIter2>::value_type,\n+        typename iterator_traits<_ForwardIter1>::value_type>);\n+\n+  __iter_swap(__a, __b, __value_type(__a));\n }\n \n template <class _Tp>\n-inline void swap(_Tp& __a, _Tp& __b) {\n-  __STL_REQUIRES(_Tp, _Assignable);\n+inline void swap(_Tp& __a, _Tp& __b)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(SGIAssignableConcept<_Tp>);\n+\n   _Tp __tmp = __a;\n   __a = __b;\n   __b = __tmp;\n@@ -90,14 +99,16 @@ inline void swap(_Tp& __a, _Tp& __b) {\n \n template <class _Tp>\n inline const _Tp& min(const _Tp& __a, const _Tp& __b) {\n-  __STL_REQUIRES(_Tp, _LessThanComparable);\n+  // concept requirements\n+  glibcpp_function_requires(LessThanComparableConcept<_Tp>);\n   //return __b < __a ? __b : __a;\n   if (__b < __a) return __b; return __a;\n }\n \n template <class _Tp>\n inline const _Tp& max(const _Tp& __a, const _Tp& __b) {\n-  __STL_REQUIRES(_Tp, _LessThanComparable);\n+  // concept requirements\n+  glibcpp_function_requires(LessThanComparableConcept<_Tp>);\n   //return  __a < __b ? __b : __a;\n   if (__a < __b) return __b; return __a;\n }\n@@ -148,85 +159,95 @@ __copy(_RandomAccessIter __first, _RandomAccessIter __last,\n \n template <class _Tp>\n inline _Tp*\n-__copy_trivial(const _Tp* __first, const _Tp* __last, _Tp* __result) {\n+__copy_trivial(const _Tp* __first, const _Tp* __last, _Tp* __result)\n+{\n   memmove(__result, __first, sizeof(_Tp) * (__last - __first));\n   return __result + (__last - __first);\n }\n \n \n template <class _InputIter, class _OutputIter>\n inline _OutputIter __copy_aux2(_InputIter __first, _InputIter __last,\n-                               _OutputIter __result, __false_type) {\n+                               _OutputIter __result, __false_type)\n+{\n   return __copy(__first, __last, __result,\n-                __ITERATOR_CATEGORY(__first),\n-                __DISTANCE_TYPE(__first));\n+                __iterator_category(__first),\n+                __distance_type(__first));\n }\n \n template <class _InputIter, class _OutputIter>\n inline _OutputIter __copy_aux2(_InputIter __first, _InputIter __last,\n-                               _OutputIter __result, __true_type) {\n+                               _OutputIter __result, __true_type)\n+{\n   return __copy(__first, __last, __result,\n-                __ITERATOR_CATEGORY(__first),\n-                __DISTANCE_TYPE(__first));\n+                __iterator_category(__first),\n+                __distance_type(__first));\n }\n \n-#ifndef __USLC__\n-\n template <class _Tp>\n inline _Tp* __copy_aux2(_Tp* __first, _Tp* __last, _Tp* __result,\n-                        __true_type) {\n+                        __true_type)\n+{\n   return __copy_trivial(__first, __last, __result);\n }\n \n-#endif /* __USLC__ */\n-\n template <class _Tp>\n inline _Tp* __copy_aux2(const _Tp* __first, const _Tp* __last, _Tp* __result,\n-                        __true_type) {\n+                        __true_type)\n+{\n   return __copy_trivial(__first, __last, __result);\n }\n \n \n template <class _InputIter, class _OutputIter, class _Tp>\n inline _OutputIter __copy_aux(_InputIter __first, _InputIter __last,\n-                              _OutputIter __result, _Tp*) {\n+                              _OutputIter __result, _Tp*)\n+{\n   typedef typename __type_traits<_Tp>::has_trivial_assignment_operator\n           _Trivial;\n   return __copy_aux2(__first, __last, __result, _Trivial());\n }\n \n template<typename _InputIter, typename _OutputIter>\n inline _OutputIter __copy_ni2(_InputIter __first, _InputIter __last,\n-                               _OutputIter __result, __true_type) {\n+                               _OutputIter __result, __true_type)\n+{\n   return _OutputIter(__copy_aux(__first, __last, __result.base(),\n-                                __VALUE_TYPE(__first)));\n+                                __value_type(__first)));\n }\n \n template<typename _InputIter, typename _OutputIter>\n inline _OutputIter __copy_ni2(_InputIter __first, _InputIter __last,\n-\t\t\t      _OutputIter __result, __false_type) {\n-  return __copy_aux(__first, __last, __result, __VALUE_TYPE(__first));\n+\t\t\t      _OutputIter __result, __false_type)\n+{\n+  return __copy_aux(__first, __last, __result, __value_type(__first));\n }\n \n template<typename _InputIter, typename _OutputIter>\n inline _OutputIter __copy_ni1(_InputIter __first, _InputIter __last,\n-                               _OutputIter __result, __true_type) {\n+                               _OutputIter __result, __true_type)\n+{\n   typedef typename _Is_normal_iterator<_OutputIter>::_Normal __Normal;\n   return __copy_ni2(__first.base(), __last.base(), __result, __Normal());\n }\n \n template<typename _InputIter, typename _OutputIter>\n inline _OutputIter __copy_ni1(_InputIter __first, _InputIter __last,\n-                               _OutputIter __result, __false_type) {\n+                               _OutputIter __result, __false_type)\n+{\n   typedef typename _Is_normal_iterator<_OutputIter>::_Normal __Normal;\n   return __copy_ni2(__first, __last, __result, __Normal());\n }\n \n template <class _InputIter, class _OutputIter>\n inline _OutputIter copy(_InputIter __first, _InputIter __last,\n-                        _OutputIter __result) {\n-  __STL_REQUIRES(_InputIter, _InputIterator);\n-  __STL_REQUIRES(_OutputIter, _OutputIterator);\n+                        _OutputIter __result)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter>);\n+  glibcpp_function_requires(OutputIteratorConcept<_OutputIter,\n+        typename iterator_traits<_InputIter>::value_type>);\n+\n    typedef typename _Is_normal_iterator<_InputIter>::_Normal __Normal;\n    return __copy_ni1(__first, __last, __result, __Normal());\n }\n@@ -338,11 +359,15 @@ inline _BI2 __copy_backward_input_normal_iterator(_BI1 __first, _BI1 __last,\n }\n \n template <typename _BI1, typename _BI2>\n-inline _BI2 copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) {\n-  __STL_REQUIRES(_BI1, _BidirectionalIterator);\n-  __STL_REQUIRES(_BI2, _Mutable_BidirectionalIterator);\n-  __STL_CONVERTIBLE(typename iterator_traits<_BI1>::value_type,\n-                    typename iterator_traits<_BI2>::value_type);\n+inline _BI2 copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(BidirectionalIteratorConcept<_BI1>);\n+  glibcpp_function_requires(Mutable_BidirectionalIteratorConcept<_BI2>);\n+  glibcpp_function_requires(ConvertibleConcept<\n+        typename iterator_traits<_BI1>::value_type,\n+        typename iterator_traits<_BI2>::value_type>);\n+\n   typedef typename _Is_normal_iterator<_BI1>::_Normal __Normal;\n   return __copy_backward_input_normal_iterator(__first, __last, __result,\n                                                __Normal());\n@@ -376,14 +401,18 @@ template <class _InputIter, class _Size, class _OutputIter>\n inline pair<_InputIter, _OutputIter>\n __copy_n(_InputIter __first, _Size __count, _OutputIter __result) {\n   return __copy_n(__first, __count, __result,\n-                  __ITERATOR_CATEGORY(__first));\n+                  __iterator_category(__first));\n }\n \n template <class _InputIter, class _Size, class _OutputIter>\n inline pair<_InputIter, _OutputIter>\n-copy_n(_InputIter __first, _Size __count, _OutputIter __result) {\n-  __STL_REQUIRES(_InputIter, _InputIterator);\n-  __STL_REQUIRES(_OutputIter, _OutputIterator);\n+copy_n(_InputIter __first, _Size __count, _OutputIter __result)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter>);\n+  glibcpp_function_requires(OutputIteratorConcept<_OutputIter,\n+        typename iterator_traits<_InputIter>::value_type>);\n+\n   return __copy_n(__first, __count, __result);\n }\n \n@@ -392,15 +421,21 @@ copy_n(_InputIter __first, _Size __count, _OutputIter __result) {\n \n \n template <class _ForwardIter, class _Tp>\n-void fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __value) {\n-  __STL_REQUIRES(_ForwardIter, _Mutable_ForwardIterator);\n+void fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __value)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(Mutable_ForwardIteratorConcept<_ForwardIter>);\n+\n   for ( ; __first != __last; ++__first)\n     *__first = __value;\n }\n \n template <class _OutputIter, class _Size, class _Tp>\n-_OutputIter fill_n(_OutputIter __first, _Size __n, const _Tp& __value) {\n-  __STL_REQUIRES(_OutputIter, _OutputIterator);\n+_OutputIter fill_n(_OutputIter __first, _Size __n, const _Tp& __value)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(OutputIteratorConcept<_OutputIter,_Tp>);\n+\n   for ( ; __n > 0; --__n, ++__first)\n     *__first = __value;\n   return __first;\n@@ -409,38 +444,44 @@ _OutputIter fill_n(_OutputIter __first, _Size __n, const _Tp& __value) {\n // Specialization: for one-byte types we can use memset.\n \n inline void fill(unsigned char* __first, unsigned char* __last,\n-                 const unsigned char& __c) {\n+                 const unsigned char& __c)\n+{\n   unsigned char __tmp = __c;\n   memset(__first, __tmp, __last - __first);\n }\n \n inline void fill(signed char* __first, signed char* __last,\n-                 const signed char& __c) {\n+                 const signed char& __c)\n+{\n   signed char __tmp = __c;\n   memset(__first, static_cast<unsigned char>(__tmp), __last - __first);\n }\n \n-inline void fill(char* __first, char* __last, const char& __c) {\n+inline void fill(char* __first, char* __last, const char& __c)\n+{\n   char __tmp = __c;\n   memset(__first, static_cast<unsigned char>(__tmp), __last - __first);\n }\n \n template <class _Size>\n inline unsigned char* fill_n(unsigned char* __first, _Size __n,\n-                             const unsigned char& __c) {\n+                             const unsigned char& __c)\n+{\n   fill(__first, __first + __n, __c);\n   return __first + __n;\n }\n \n template <class _Size>\n inline signed char* fill_n(char* __first, _Size __n,\n-                           const signed char& __c) {\n+                           const signed char& __c)\n+{\n   fill(__first, __first + __n, __c);\n   return __first + __n;\n }\n \n template <class _Size>\n-inline char* fill_n(char* __first, _Size __n, const char& __c) {\n+inline char* fill_n(char* __first, _Size __n, const char& __c)\n+{\n   fill(__first, __first + __n, __c);\n   return __first + __n;\n }\n@@ -452,13 +493,16 @@ inline char* fill_n(char* __first, _Size __n, const char& __c) {\n template <class _InputIter1, class _InputIter2>\n pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,\n                                         _InputIter1 __last1,\n-                                        _InputIter2 __first2) {\n-  __STL_REQUIRES(_InputIter1, _InputIterator);\n-  __STL_REQUIRES(_InputIter2, _InputIterator);\n-  __STL_REQUIRES(typename iterator_traits<_InputIter1>::value_type,\n-                 _EqualityComparable);\n-  __STL_REQUIRES(typename iterator_traits<_InputIter2>::value_type,\n-                 _EqualityComparable);\n+                                        _InputIter2 __first2)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter1>);\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter2>);\n+  glibcpp_function_requires(EqualityComparableConcept<\n+        typename iterator_traits<_InputIter1>::value_type>);\n+  glibcpp_function_requires(EqualityComparableConcept<\n+        typename iterator_traits<_InputIter2>::value_type>);\n+\n   while (__first1 != __last1 && *__first1 == *__first2) {\n     ++__first1;\n     ++__first2;\n@@ -470,9 +514,12 @@ template <class _InputIter1, class _InputIter2, class _BinaryPredicate>\n pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,\n                                         _InputIter1 __last1,\n                                         _InputIter2 __first2,\n-                                        _BinaryPredicate __binary_pred) {\n-  __STL_REQUIRES(_InputIter1, _InputIterator);\n-  __STL_REQUIRES(_InputIter2, _InputIterator);\n+                                        _BinaryPredicate __binary_pred)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter1>);\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter2>);\n+\n   while (__first1 != __last1 && __binary_pred(*__first1, *__first2)) {\n     ++__first1;\n     ++__first2;\n@@ -482,13 +529,16 @@ pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,\n \n template <class _InputIter1, class _InputIter2>\n inline bool equal(_InputIter1 __first1, _InputIter1 __last1,\n-                  _InputIter2 __first2) {\n-  __STL_REQUIRES(_InputIter1, _InputIterator);\n-  __STL_REQUIRES(_InputIter2, _InputIterator);\n-  __STL_REQUIRES(typename iterator_traits<_InputIter1>::value_type,\n-                 _EqualityComparable);\n-  __STL_REQUIRES(typename iterator_traits<_InputIter2>::value_type,\n-                 _EqualityComparable);\n+                  _InputIter2 __first2)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter1>);\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter2>);\n+  glibcpp_function_requires(EqualityComparableConcept<\n+        typename iterator_traits<_InputIter1>::value_type>);\n+  glibcpp_function_requires(EqualityComparableConcept<\n+        typename iterator_traits<_InputIter2>::value_type>);\n+\n   for ( ; __first1 != __last1; ++__first1, ++__first2)\n     if (*__first1 != *__first2)\n       return false;\n@@ -497,9 +547,12 @@ inline bool equal(_InputIter1 __first1, _InputIter1 __last1,\n \n template <class _InputIter1, class _InputIter2, class _BinaryPredicate>\n inline bool equal(_InputIter1 __first1, _InputIter1 __last1,\n-                  _InputIter2 __first2, _BinaryPredicate __binary_pred) {\n-  __STL_REQUIRES(_InputIter1, _InputIterator);\n-  __STL_REQUIRES(_InputIter2, _InputIterator);\n+                  _InputIter2 __first2, _BinaryPredicate __binary_pred)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter1>);\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter2>);\n+\n   for ( ; __first1 != __last1; ++__first1, ++__first2)\n     if (!__binary_pred(*__first1, *__first2))\n       return false;\n@@ -512,13 +565,16 @@ inline bool equal(_InputIter1 __first1, _InputIter1 __last1,\n \n template <class _InputIter1, class _InputIter2>\n bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,\n-                             _InputIter2 __first2, _InputIter2 __last2) {\n-  __STL_REQUIRES(_InputIter1, _InputIterator);\n-  __STL_REQUIRES(_InputIter2, _InputIterator);\n-  __STL_REQUIRES(typename iterator_traits<_InputIter1>::value_type,\n-                 _LessThanComparable);\n-  __STL_REQUIRES(typename iterator_traits<_InputIter2>::value_type,\n-                 _LessThanComparable);\n+                             _InputIter2 __first2, _InputIter2 __last2)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter1>);\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter2>);\n+  glibcpp_function_requires(LessThanComparableConcept<\n+        typename iterator_traits<_InputIter1>::value_type>);\n+  glibcpp_function_requires(LessThanComparableConcept<\n+        typename iterator_traits<_InputIter2>::value_type>);\n+\n   for ( ; __first1 != __last1 && __first2 != __last2\n         ; ++__first1, ++__first2) {\n     if (*__first1 < *__first2)\n@@ -532,9 +588,12 @@ bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,\n template <class _InputIter1, class _InputIter2, class _Compare>\n bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,\n                              _InputIter2 __first2, _InputIter2 __last2,\n-                             _Compare __comp) {\n-  __STL_REQUIRES(_InputIter1, _InputIterator);\n-  __STL_REQUIRES(_InputIter2, _InputIterator);\n+                             _Compare __comp)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter1>);\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter2>);\n+\n   for ( ; __first1 != __last1 && __first2 != __last2\n         ; ++__first1, ++__first2) {\n     if (__comp(*__first1, *__first2))\n@@ -628,12 +687,14 @@ template <class _InputIter1, class _InputIter2>\n int lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,\n                                  _InputIter2 __first2, _InputIter2 __last2)\n {\n-  __STL_REQUIRES(_InputIter1, _InputIterator);\n-  __STL_REQUIRES(_InputIter2, _InputIterator);\n-  __STL_REQUIRES(typename iterator_traits<_InputIter1>::value_type,\n-                 _LessThanComparable);\n-  __STL_REQUIRES(typename iterator_traits<_InputIter2>::value_type,\n-                 _LessThanComparable);\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter1>);\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter2>);\n+  glibcpp_function_requires(LessThanComparableConcept<\n+        typename iterator_traits<_InputIter1>::value_type>);\n+  glibcpp_function_requires(LessThanComparableConcept<\n+        typename iterator_traits<_InputIter2>::value_type>);\n+\n   return __lexicographical_compare_3way(__first1, __last1, __first2, __last2);\n }\n "}, {"sha": "3a38c343d4fd150309339bdd7c00afa3f714707f", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -81,7 +81,7 @@ __destroy(_ForwardIterator __first, _ForwardIterator __last, _Tp*)\n \n template <class _ForwardIterator>\n inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last) {\n-  __destroy(__first, __last, __VALUE_TYPE(__first));\n+  __destroy(__first, __last, __value_type(__first));\n }\n \n inline void _Destroy(char*, char*) {}"}, {"sha": "8e7f1305bfd988fc1638f66dab08eaa7fe8a6ded", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -28,7 +28,9 @@\n  *   You should not attempt to use it directly.\n  */\n \n-#include <bits/concept_checks.h>\n+#include <bits/concept_check.h>\n+#include <bits/stl_iterator_base_types.h>\n+#include <bits/stl_iterator_base_funcs.h>\n \n #ifndef __SGI_STL_INTERNAL_DEQUE_H\n #define __SGI_STL_INTERNAL_DEQUE_H\n@@ -354,9 +356,8 @@ _Deque_base<_Tp,_Alloc>::_M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)\n template <class _Tp, class _Alloc = allocator<_Tp> >\n class deque : protected _Deque_base<_Tp, _Alloc> {\n \n-  // requirements:\n-\n-  __STL_CLASS_REQUIRES(_Tp, _Assignable);\n+  // concept requirements\n+  glibcpp_class_requires(_Tp, SGIAssignableConcept);\n \n   typedef _Deque_base<_Tp, _Alloc> _Base;\n public:                         // Basic types\n@@ -469,7 +470,7 @@ class deque : protected _Deque_base<_Tp, _Alloc> {\n   template <class _InputIter>\n   void _M_initialize_dispatch(_InputIter __first, _InputIter __last,\n                               __false_type) {\n-    _M_range_initialize(__first, __last, __ITERATOR_CATEGORY(__first));\n+    _M_range_initialize(__first, __last, __iterator_category(__first));\n   }\n \n   ~deque() { destroy(_M_start, _M_finish); }\n@@ -531,7 +532,7 @@ class deque : protected _Deque_base<_Tp, _Alloc> {\n   template <class _InputIterator>\n   void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,\n                           __false_type) {\n-    _M_assign_aux(__first, __last, __ITERATOR_CATEGORY(__first));\n+    _M_assign_aux(__first, __last, __iterator_category(__first));\n   }\n \n   template <class _InputIterator>\n@@ -653,7 +654,7 @@ class deque : protected _Deque_base<_Tp, _Alloc> {\n   void _M_insert_dispatch(iterator __pos,\n                           _InputIterator __first, _InputIterator __last,\n                           __false_type) {\n-    insert(__pos, __first, __last, __ITERATOR_CATEGORY(__first));\n+    insert(__pos, __first, __last, __iterator_category(__first));\n   }\n \n   void resize(size_type __new_size, const value_type& __x) {"}, {"sha": "3fdd236b1c9f587b45f6eb80961a28f6af960bc2", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 48, "deletions": 24, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -62,11 +62,14 @@ template <class _RandomAccessIterator>\n inline void \n push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n {\n-  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);\n-  __STL_REQUIRES(typename iterator_traits<_RandomAccessIterator>::value_type,\n-                 _LessThanComparable);\n+  // concept requirements\n+  glibcpp_function_requires(Mutable_RandomAccessIteratorConcept<\n+        _RandomAccessIterator>);\n+  glibcpp_function_requires(LessThanComparableConcept<\n+        typename iterator_traits<_RandomAccessIterator>::value_type>);\n+\n   __push_heap_aux(__first, __last,\n-                  __DISTANCE_TYPE(__first), __VALUE_TYPE(__first));\n+                  __distance_type(__first), __value_type(__first));\n }\n \n template <class _RandomAccessIterator, class _Distance, class _Tp, \n@@ -100,9 +103,12 @@ inline void\n push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n           _Compare __comp)\n {\n-  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);\n+  // concept requirements\n+  glibcpp_function_requires(Mutable_RandomAccessIteratorConcept<\n+        _RandomAccessIterator>);\n+\n   __push_heap_aux(__first, __last, __comp,\n-                  __DISTANCE_TYPE(__first), __VALUE_TYPE(__first));\n+                  __distance_type(__first), __value_type(__first));\n }\n \n template <class _RandomAccessIterator, class _Distance, class _Tp>\n@@ -141,17 +147,20 @@ __pop_heap_aux(_RandomAccessIterator __first, _RandomAccessIterator __last,\n                _Tp*)\n {\n   __pop_heap(__first, __last - 1, __last - 1, \n-             _Tp(*(__last - 1)), __DISTANCE_TYPE(__first));\n+             _Tp(*(__last - 1)), __distance_type(__first));\n }\n \n template <class _RandomAccessIterator>\n inline void pop_heap(_RandomAccessIterator __first, \n                      _RandomAccessIterator __last)\n {\n-  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);\n-  __STL_REQUIRES(typename iterator_traits<_RandomAccessIterator>::value_type,\n-                 _LessThanComparable);\n-  __pop_heap_aux(__first, __last, __VALUE_TYPE(__first));\n+  // concept requirements\n+  glibcpp_function_requires(Mutable_RandomAccessIteratorConcept<\n+        _RandomAccessIterator>);\n+  glibcpp_function_requires(LessThanComparableConcept<\n+        typename iterator_traits<_RandomAccessIterator>::value_type>);\n+\n+  __pop_heap_aux(__first, __last, __value_type(__first));\n }\n \n template <class _RandomAccessIterator, class _Distance,\n@@ -194,16 +203,19 @@ __pop_heap_aux(_RandomAccessIterator __first,\n                _RandomAccessIterator __last, _Tp*, _Compare __comp)\n {\n   __pop_heap(__first, __last - 1, __last - 1, _Tp(*(__last - 1)), __comp,\n-             __DISTANCE_TYPE(__first));\n+             __distance_type(__first));\n }\n \n template <class _RandomAccessIterator, class _Compare>\n inline void \n pop_heap(_RandomAccessIterator __first,\n          _RandomAccessIterator __last, _Compare __comp)\n {\n-  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);\n-  __pop_heap_aux(__first, __last, __VALUE_TYPE(__first), __comp);\n+  // concept requirements\n+  glibcpp_function_requires(Mutable_RandomAccessIteratorConcept<\n+        _RandomAccessIterator>);\n+\n+  __pop_heap_aux(__first, __last, __value_type(__first), __comp);\n }\n \n template <class _RandomAccessIterator, class _Tp, class _Distance>\n@@ -226,11 +238,14 @@ template <class _RandomAccessIterator>\n inline void \n make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n {\n-  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);\n-  __STL_REQUIRES(typename iterator_traits<_RandomAccessIterator>::value_type,\n-                 _LessThanComparable);\n+  // concept requirements\n+  glibcpp_function_requires(Mutable_RandomAccessIteratorConcept<\n+        _RandomAccessIterator>);\n+  glibcpp_function_requires(LessThanComparableConcept<\n+        typename iterator_traits<_RandomAccessIterator>::value_type>);\n+\n   __make_heap(__first, __last,\n-              __VALUE_TYPE(__first), __DISTANCE_TYPE(__first));\n+              __value_type(__first), __distance_type(__first));\n }\n \n template <class _RandomAccessIterator, class _Compare,\n@@ -256,17 +271,23 @@ inline void\n make_heap(_RandomAccessIterator __first, \n           _RandomAccessIterator __last, _Compare __comp)\n {\n-  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);\n+  // concept requirements\n+  glibcpp_function_requires(Mutable_RandomAccessIteratorConcept<\n+        _RandomAccessIterator>);\n+\n   __make_heap(__first, __last, __comp,\n-              __VALUE_TYPE(__first), __DISTANCE_TYPE(__first));\n+              __value_type(__first), __distance_type(__first));\n }\n \n template <class _RandomAccessIterator>\n void sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n {\n-  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);\n-  __STL_REQUIRES(typename iterator_traits<_RandomAccessIterator>::value_type,\n-                 _LessThanComparable);\n+  // concept requirements\n+  glibcpp_function_requires(Mutable_RandomAccessIteratorConcept<\n+        _RandomAccessIterator>);\n+  glibcpp_function_requires(LessThanComparableConcept<\n+        typename iterator_traits<_RandomAccessIterator>::value_type>);\n+\n   while (__last - __first > 1)\n     pop_heap(__first, __last--);\n }\n@@ -276,7 +297,10 @@ void\n sort_heap(_RandomAccessIterator __first,\n           _RandomAccessIterator __last, _Compare __comp)\n {\n-  __STL_REQUIRES(_RandomAccessIterator, _Mutable_RandomAccessIterator);\n+  // concept requirements\n+  glibcpp_function_requires(Mutable_RandomAccessIteratorConcept<\n+        _RandomAccessIterator>);\n+\n   while (__last - __first > 1)\n     pop_heap(__first, __last--, __comp);\n }"}, {"sha": "138a69be550b93db88721845e8e4dad376552666", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -0,0 +1,152 @@\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996-1998\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/* NOTE: This is an internal header file, included by other STL headers.\n+ *   You should not attempt to use it directly.\n+ */\n+\n+#ifndef __SGI_STL_INTERNAL_ITERATOR_BASE_FUNCS_H\n+#define __SGI_STL_INTERNAL_ITERATOR_BASE_FUNCS_H\n+\n+// This file contains all of the general iterator-related utility\n+// functions, such as distance() and advance().\n+// The internal file stl_iterator.h contains predefined iterators, \n+// such as front_insert_iterator and istream_iterator.\n+\n+#pragma GCC system_header\n+#include <bits/concept_check.h>\n+\n+namespace std\n+{\n+\n+// There are two signatures for distance.  In addition to the one taking\n+// two iterators and returning a result, there is another taking two\n+// iterators and a reference-to-result variable, and returning nothing.\n+// The latter seems to be an SGI extension.   -- pedwards\n+template <class _InputIterator, class _Distance>\n+inline void __distance(_InputIterator __first, _InputIterator __last,\n+                       _Distance& __n, input_iterator_tag)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator>);\n+  while (__first != __last) { ++__first; ++__n; }\n+}\n+\n+template <class _RandomAccessIterator, class _Distance>\n+inline void __distance(_RandomAccessIterator __first, \n+                       _RandomAccessIterator __last, \n+                       _Distance& __n, random_access_iterator_tag)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(RandomAccessIteratorConcept<_RandomAccessIterator>);\n+  __n += __last - __first;\n+}\n+\n+template <class _InputIterator, class _Distance>\n+inline void distance(_InputIterator __first, \n+                     _InputIterator __last, _Distance& __n)\n+{\n+  // concept requirements -- taken care of in __distance\n+  __distance(__first, __last, __n, iterator_category(__first));\n+}\n+\n+template <class _InputIterator>\n+inline typename iterator_traits<_InputIterator>::difference_type\n+__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator>);\n+  typename iterator_traits<_InputIterator>::difference_type __n = 0;\n+  while (__first != __last) {\n+    ++__first; ++__n;\n+  }\n+  return __n;\n+}\n+\n+template <class _RandomAccessIterator>\n+inline typename iterator_traits<_RandomAccessIterator>::difference_type\n+__distance(_RandomAccessIterator __first, _RandomAccessIterator __last,\n+           random_access_iterator_tag)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(RandomAccessIteratorConcept<_RandomAccessIterator>);\n+  return __last - __first;\n+}\n+\n+template <class _InputIterator>\n+inline typename iterator_traits<_InputIterator>::difference_type\n+distance(_InputIterator __first, _InputIterator __last)\n+{\n+  // concept requirements -- taken care of in __distance\n+  typedef typename iterator_traits<_InputIterator>::iterator_category \n+    _Category;\n+  return __distance(__first, __last, _Category());\n+}\n+\n+template <class _InputIter, class _Distance>\n+inline void __advance(_InputIter& __i, _Distance __n, input_iterator_tag)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIter>);\n+  while (__n--) ++__i;\n+}\n+\n+template <class _BidirectionalIterator, class _Distance>\n+inline void __advance(_BidirectionalIterator& __i, _Distance __n, \n+                      bidirectional_iterator_tag)\n+{\n+  // concept requirements\n+glibcpp_function_requires(BidirectionalIteratorConcept<_BidirectionalIterator>);\n+  if (__n >= 0)\n+    while (__n--) ++__i;\n+  else\n+    while (__n++) --__i;\n+}\n+\n+template <class _RandomAccessIterator, class _Distance>\n+inline void __advance(_RandomAccessIterator& __i, _Distance __n, \n+                      random_access_iterator_tag)\n+{\n+  // concept requirements\n+  glibcpp_function_requires(RandomAccessIteratorConcept<_RandomAccessIterator>);\n+  __i += __n;\n+}\n+\n+template <class _InputIterator, class _Distance>\n+inline void advance(_InputIterator& __i, _Distance __n)\n+{\n+  // concept requirements -- taken care of in __advance\n+  __advance(__i, __n, iterator_category(__i));\n+}\n+\n+} // namespace std\n+\n+#endif /* __SGI_STL_INTERNAL_ITERATOR_BASE_FUNCS_H */\n+\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "6b821f68322cb1226360340a20cb36193abdcd0b", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "renamed", "additions": 6, "deletions": 89, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -28,14 +28,15 @@\n  *   You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_ITERATOR_BASE_H\n-#define __SGI_STL_INTERNAL_ITERATOR_BASE_H\n+#ifndef __SGI_STL_INTERNAL_ITERATOR_BASE_TYPES_H\n+#define __SGI_STL_INTERNAL_ITERATOR_BASE_TYPES_H\n \n-// This file contains all of the general iterator-related utilities.\n+// This file contains all of the general iterator-related utility\n+// types, such as iterator_traits and struct iterator.\n // The internal file stl_iterator.h contains predefined iterators, \n // such as front_insert_iterator and istream_iterator.\n \n-#include <bits/concept_checks.h>\n+#pragma GCC system header\n \n namespace std\n {\n@@ -171,93 +172,9 @@ template <class _Iter>\n inline typename iterator_traits<_Iter>::value_type*\n value_type(const _Iter& __i) { return __value_type(__i); }\n \n-#define __ITERATOR_CATEGORY(__i) __iterator_category(__i)\n-#define __DISTANCE_TYPE(__i)     __distance_type(__i)\n-#define __VALUE_TYPE(__i)        __value_type(__i)\n-\n-template <class _InputIterator, class _Distance>\n-inline void __distance(_InputIterator __first, _InputIterator __last,\n-                       _Distance& __n, input_iterator_tag)\n-{\n-  while (__first != __last) { ++__first; ++__n; }\n-}\n-\n-template <class _RandomAccessIterator, class _Distance>\n-inline void __distance(_RandomAccessIterator __first, \n-                       _RandomAccessIterator __last, \n-                       _Distance& __n, random_access_iterator_tag)\n-{\n-  __STL_REQUIRES(_RandomAccessIterator, _RandomAccessIterator);\n-  __n += __last - __first;\n-}\n-\n-template <class _InputIterator, class _Distance>\n-inline void distance(_InputIterator __first, \n-                     _InputIterator __last, _Distance& __n)\n-{\n-  __STL_REQUIRES(_InputIterator, _InputIterator);\n-  __distance(__first, __last, __n, iterator_category(__first));\n-}\n-\n-template <class _InputIterator>\n-inline typename iterator_traits<_InputIterator>::difference_type\n-__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)\n-{\n-  typename iterator_traits<_InputIterator>::difference_type __n = 0;\n-  while (__first != __last) {\n-    ++__first; ++__n;\n-  }\n-  return __n;\n-}\n-\n-template <class _RandomAccessIterator>\n-inline typename iterator_traits<_RandomAccessIterator>::difference_type\n-__distance(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-           random_access_iterator_tag) {\n-  __STL_REQUIRES(_RandomAccessIterator, _RandomAccessIterator);\n-  return __last - __first;\n-}\n-\n-template <class _InputIterator>\n-inline typename iterator_traits<_InputIterator>::difference_type\n-distance(_InputIterator __first, _InputIterator __last) {\n-  typedef typename iterator_traits<_InputIterator>::iterator_category \n-    _Category;\n-  __STL_REQUIRES(_InputIterator, _InputIterator);\n-  return __distance(__first, __last, _Category());\n-}\n-\n-template <class _InputIter, class _Distance>\n-inline void __advance(_InputIter& __i, _Distance __n, input_iterator_tag) {\n-  while (__n--) ++__i;\n-}\n-\n-template <class _BidirectionalIterator, class _Distance>\n-inline void __advance(_BidirectionalIterator& __i, _Distance __n, \n-                      bidirectional_iterator_tag) {\n-  __STL_REQUIRES(_BidirectionalIterator, _BidirectionalIterator);\n-  if (__n >= 0)\n-    while (__n--) ++__i;\n-  else\n-    while (__n++) --__i;\n-}\n-\n-template <class _RandomAccessIterator, class _Distance>\n-inline void __advance(_RandomAccessIterator& __i, _Distance __n, \n-                      random_access_iterator_tag) {\n-  __STL_REQUIRES(_RandomAccessIterator, _RandomAccessIterator);\n-  __i += __n;\n-}\n-\n-template <class _InputIterator, class _Distance>\n-inline void advance(_InputIterator& __i, _Distance __n) {\n-  __STL_REQUIRES(_InputIterator, _InputIterator);\n-  __advance(__i, __n, iterator_category(__i));\n-}\n-\n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_ITERATOR_BASE_H */\n+#endif /* __SGI_STL_INTERNAL_ITERATOR_BASE_TYPES_H */\n \n \n // Local Variables:", "previous_filename": "libstdc++-v3/include/bits/stl_iterator_base.h"}, {"sha": "fb00c474423ce2260ab394f51489dd6b45d42780", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -31,7 +31,7 @@\n #ifndef __SGI_STL_INTERNAL_LIST_H\n #define __SGI_STL_INTERNAL_LIST_H\n \n-#include <bits/concept_checks.h>\n+#include <bits/concept_check.h>\n \n namespace std\n {\n@@ -198,10 +198,10 @@ _List_base<_Tp,_Alloc>::clear()\n }\n \n template <class _Tp, class _Alloc = allocator<_Tp> >\n-class list : protected _List_base<_Tp, _Alloc> {\n-  // requirements:\n-\n-  __STL_CLASS_REQUIRES(_Tp, _Assignable);\n+class list : protected _List_base<_Tp, _Alloc>\n+{\n+  // concept requirements\n+  glibcpp_class_requires(_Tp, SGIAssignableConcept);\n \n   typedef _List_base<_Tp, _Alloc> _Base;\n protected:"}, {"sha": "7a6ef7a32a98956fdabe5b2696f2dde6a6a76aef", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -31,23 +31,21 @@\n #ifndef _CPP_BITS_STL_MAP_H\n #define _CPP_BITS_STL_MAP_H 1\n \n-#include <bits/concept_checks.h>\n+#include <bits/concept_check.h>\n \n namespace std\n {\n \n template <class _Key, class _Tp, class _Compare = less<_Key>,\n           class _Alloc = allocator<pair<const _Key, _Tp> > >\n-class map {\n-public:\n-\n-// requirements:\n-\n-  __STL_CLASS_REQUIRES(_Tp, _Assignable);\n-  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);\n-\n-// typedefs:\n+class map\n+{\n+  // concept requirements\n+  glibcpp_class_requires(_Tp, SGIAssignableConcept);\n+  glibcpp_class_requires4(_Compare, bool, _Key, _Key, BinaryFunctionConcept);\n \n+public:\n+  // typedefs:\n   typedef _Key                 key_type;\n   typedef _Tp                   data_type;\n   typedef _Tp                   mapped_type;"}, {"sha": "558075ecbeba73f00a16b89a88bc11b251e721a4", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -31,7 +31,7 @@\n #ifndef __SGI_STL_INTERNAL_MULTIMAP_H\n #define __SGI_STL_INTERNAL_MULTIMAP_H\n \n-#include <bits/concept_checks.h>\n+#include <bits/concept_check.h>\n \n namespace std\n {\n@@ -52,11 +52,11 @@ inline bool operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,\n                       const multimap<_Key,_Tp,_Compare,_Alloc>& __y);\n \n template <class _Key, class _Tp, class _Compare, class _Alloc>\n-class multimap {\n-  // requirements:\n-\n-  __STL_CLASS_REQUIRES(_Tp, _Assignable);\n-  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);\n+class multimap\n+{\n+  // concept requirements\n+  glibcpp_class_requires(_Tp, SGIAssignableConcept);\n+  glibcpp_class_requires4(_Compare, bool, _Key, _Key, BinaryFunctionConcept);\n \n public:\n "}, {"sha": "e723cc22d414e7987a03651f1233291bb26f96be", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -31,7 +31,7 @@\n #ifndef __SGI_STL_INTERNAL_MULTISET_H\n #define __SGI_STL_INTERNAL_MULTISET_H\n \n-#include <bits/concept_checks.h>\n+#include <bits/concept_check.h>\n \n namespace std\n {\n@@ -51,11 +51,11 @@ inline bool operator<(const multiset<_Key,_Compare,_Alloc>& __x,\n                       const multiset<_Key,_Compare,_Alloc>& __y);\n \n template <class _Key, class _Compare, class _Alloc>\n-class multiset {\n-  // requirements:\n-  \n-  __STL_CLASS_REQUIRES(_Key, _Assignable);\n-  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);\n+class multiset\n+{\n+  // concept requirements\n+  glibcpp_class_requires(_Key, SGIAssignableConcept);\n+  glibcpp_class_requires4(_Compare, bool, _Key, _Key, BinaryFunctionConcept);\n \n public:\n "}, {"sha": "8656e9955a982bc84451ab3f4e5868af557945a3", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 43, "deletions": 20, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -38,7 +38,9 @@ namespace std\n template <class _InputIterator, class _Tp>\n _Tp accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)\n {\n-  __STL_REQUIRES(_InputIterator, _InputIterator);\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator>);\n+\n   for ( ; __first != __last; ++__first)\n     __init = __init + *__first;\n   return __init;\n@@ -48,7 +50,9 @@ template <class _InputIterator, class _Tp, class _BinaryOperation>\n _Tp accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,\n               _BinaryOperation __binary_op)\n {\n-  __STL_REQUIRES(_InputIterator, _InputIterator);\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator>);\n+\n   for ( ; __first != __last; ++__first)\n     __init = __binary_op(__init, *__first);\n   return __init;\n@@ -58,8 +62,10 @@ template <class _InputIterator1, class _InputIterator2, class _Tp>\n _Tp inner_product(_InputIterator1 __first1, _InputIterator1 __last1,\n                  _InputIterator2 __first2, _Tp __init)\n {\n-  __STL_REQUIRES(_InputIterator2, _InputIterator);\n-  __STL_REQUIRES(_InputIterator2, _InputIterator);\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator1>);\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator2>);\n+\n   for ( ; __first1 != __last1; ++__first1, ++__first2)\n     __init = __init + (*__first1 * *__first2);\n   return __init;\n@@ -72,8 +78,10 @@ _Tp inner_product(_InputIterator1 __first1, _InputIterator1 __last1,\n                  _BinaryOperation1 __binary_op1,\n                  _BinaryOperation2 __binary_op2)\n {\n-  __STL_REQUIRES(_InputIterator2, _InputIterator);\n-  __STL_REQUIRES(_InputIterator2, _InputIterator);\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator1>);\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator2>);\n+\n   for ( ; __first1 != __last1; ++__first1, ++__first2)\n     __init = __binary_op1(__init, __binary_op2(*__first1, *__first2));\n   return __init;\n@@ -97,11 +105,14 @@ _OutputIterator\n partial_sum(_InputIterator __first, _InputIterator __last,\n             _OutputIterator __result)\n {\n-  __STL_REQUIRES(_InputIterator, _InputIterator);\n-  __STL_REQUIRES(_OutputIterator, _OutputIterator);\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator>);\n+  glibcpp_function_requires(OutputIteratorConcept<_OutputIterator,\n+        typename iterator_traits<_InputIterator>::value_type>);\n+\n   if (__first == __last) return __result;\n   *__result = *__first;\n-  return __partial_sum(__first, __last, __result, __VALUE_TYPE(__first));\n+  return __partial_sum(__first, __last, __result, __value_type(__first));\n }\n \n template <class _InputIterator, class _OutputIterator, class _Tp,\n@@ -123,11 +134,14 @@ _OutputIterator\n partial_sum(_InputIterator __first, _InputIterator __last,\n             _OutputIterator __result, _BinaryOperation __binary_op)\n {\n-  __STL_REQUIRES(_InputIterator, _InputIterator);\n-  __STL_REQUIRES(_OutputIterator, _OutputIterator);\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator>);\n+  glibcpp_function_requires(OutputIteratorConcept<_OutputIterator,\n+        typename iterator_traits<_InputIterator>::value_type>);\n+\n   if (__first == __last) return __result;\n   *__result = *__first;\n-  return __partial_sum(__first, __last, __result, __VALUE_TYPE(__first), \n+  return __partial_sum(__first, __last, __result, __value_type(__first), \n                        __binary_op);\n }\n \n@@ -150,12 +164,15 @@ _OutputIterator\n adjacent_difference(_InputIterator __first,\n                     _InputIterator __last, _OutputIterator __result)\n {\n-  __STL_REQUIRES(_InputIterator, _InputIterator);\n-  __STL_REQUIRES(_OutputIterator, _OutputIterator);\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator>);\n+  glibcpp_function_requires(OutputIteratorConcept<_OutputIterator,\n+        typename iterator_traits<_InputIterator>::value_type>);\n+\n   if (__first == __last) return __result;\n   *__result = *__first;\n   return __adjacent_difference(__first, __last, __result,\n-                               __VALUE_TYPE(__first));\n+                               __value_type(__first));\n }\n \n template <class _InputIterator, class _OutputIterator, class _Tp, \n@@ -178,12 +195,15 @@ _OutputIterator\n adjacent_difference(_InputIterator __first, _InputIterator __last,\n                     _OutputIterator __result, _BinaryOperation __binary_op)\n {\n-  __STL_REQUIRES(_InputIterator, _InputIterator);\n-  __STL_REQUIRES(_OutputIterator, _OutputIterator);\n+  // concept requirements\n+  glibcpp_function_requires(InputIteratorConcept<_InputIterator>);\n+  glibcpp_function_requires(OutputIteratorConcept<_OutputIterator,\n+        typename iterator_traits<_InputIterator>::value_type>);\n+\n   if (__first == __last) return __result;\n   *__result = *__first;\n   return __adjacent_difference(__first, __last, __result,\n-                               __VALUE_TYPE(__first),\n+                               __value_type(__first),\n                                __binary_op);\n }\n \n@@ -241,8 +261,11 @@ template <class _ForwardIter, class _Tp>\n void \n iota(_ForwardIter __first, _ForwardIter __last, _Tp __value)\n {\n-  __STL_REQUIRES(_ForwardIter, _Mutable_ForwardIterator);\n-  __STL_CONVERTIBLE(_Tp, typename iterator_traits<_ForwardIter>::value_type);\n+  // concept requirements\n+  glibcpp_function_requires(Mutable_ForwardIteratorConcept<_ForwardIter>);\n+  glibcpp_function_requires(ConvertibleConcept<_Tp,\n+        typename iterator_traits<_ForwardIter>::value_type>);\n+\n   while (__first != __last)\n     *__first++ = __value++;\n }"}, {"sha": "f52838ba565255df0cc6ed8c5fe2ce9844cffb87", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -31,7 +31,7 @@\n #ifndef __SGI_STL_INTERNAL_QUEUE_H\n #define __SGI_STL_INTERNAL_QUEUE_H\n \n-#include <bits/sequence_concepts.h>\n+#include <bits/concept_check.h>\n \n namespace std\n {\n@@ -50,16 +50,14 @@ inline bool operator<(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&);\n \n \n template <class _Tp, class _Sequence>\n-class queue {\n-\n-  // requirements:\n-\n-  __STL_CLASS_REQUIRES(_Tp, _Assignable);\n-  __STL_CLASS_REQUIRES(_Sequence, _FrontInsertionSequence);\n-  __STL_CLASS_REQUIRES(_Sequence, _BackInsertionSequence);\n+class queue\n+{\n+  // concept requirements\n+  glibcpp_class_requires(_Tp, SGIAssignableConcept);\n+  glibcpp_class_requires(_Sequence, FrontInsertionSequenceConcept);\n+  glibcpp_class_requires(_Sequence, BackInsertionSequenceConcept);\n   typedef typename _Sequence::value_type _Sequence_value_type;\n-  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);\n-\n+  glibcpp_class_requires2(_Tp, _Sequence_value_type, SameTypeConcept);\n \n   template <class _Tp1, class _Seq1>\n   friend bool operator== (const queue<_Tp1, _Seq1>&,\n@@ -135,17 +133,17 @@ operator>=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)\n template <class _Tp, \n           class _Sequence = vector<_Tp>,\n           class _Compare  = less<typename _Sequence::value_type> >\n-class priority_queue {\n-public:\n-\n-  // requirements:\n-  __STL_CLASS_REQUIRES(_Tp, _Assignable);\n-  __STL_CLASS_REQUIRES(_Sequence, _Sequence);\n-  __STL_CLASS_REQUIRES(_Sequence, _RandomAccessContainer);\n+class priority_queue\n+{\n+  // concept requirements\n+  glibcpp_class_requires(_Tp, SGIAssignableConcept);\n+  glibcpp_class_requires(_Sequence, SequenceConcept);\n+  glibcpp_class_requires(_Sequence, RandomAccessContainerConcept);\n   typedef typename _Sequence::value_type _Sequence_value_type;\n-  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);\n-  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Tp, _Tp);\n+  glibcpp_class_requires2(_Tp, _Sequence_value_type, SameTypeConcept);\n+  glibcpp_class_requires4(_Compare, bool, _Tp, _Tp, BinaryFunctionConcept);\n \n+public:\n   typedef typename _Sequence::value_type      value_type;\n   typedef typename _Sequence::size_type       size_type;\n   typedef          _Sequence                  container_type;"}, {"sha": "32c7a0a54e2bb4ffe861b3f85b0855c0dced03f9", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -31,7 +31,7 @@\n #ifndef __SGI_STL_INTERNAL_SET_H\n #define __SGI_STL_INTERNAL_SET_H\n \n-#include <bits/concept_checks.h>\n+#include <bits/concept_check.h>\n \n namespace std\n {\n@@ -52,15 +52,14 @@ inline bool operator<(const set<_Key,_Compare,_Alloc>& __x,\n \n \n template <class _Key, class _Compare, class _Alloc>\n-class set {\n-  // requirements:\n-\n-  __STL_CLASS_REQUIRES(_Key, _Assignable);\n-  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);\n+class set\n+{\n+  // concept requirements\n+  glibcpp_class_requires(_Key, SGIAssignableConcept);\n+  glibcpp_class_requires4(_Compare, bool, _Key, _Key, BinaryFunctionConcept);\n \n public:\n   // typedefs:\n-\n   typedef _Key     key_type;\n   typedef _Key     value_type;\n   typedef _Compare key_compare;"}, {"sha": "3774d4c3d128f5088595ac10921d57e3b31c25cc", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -31,7 +31,7 @@\n #ifndef __SGI_STL_INTERNAL_STACK_H\n #define __SGI_STL_INTERNAL_STACK_H\n \n-#include <bits/sequence_concepts.h>\n+#include <bits/concept_check.h>\n \n namespace std\n {\n@@ -50,15 +50,13 @@ bool operator<(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y);\n \n \n template <class _Tp, class _Sequence>\n-class stack {\n-\n-  // requirements:\n-\n-  __STL_CLASS_REQUIRES(_Tp, _Assignable);\n-  __STL_CLASS_REQUIRES(_Sequence, _BackInsertionSequence);\n+class stack\n+{\n+  // concept requirements\n+  glibcpp_class_requires(_Tp, SGIAssignableConcept);\n+  glibcpp_class_requires(_Sequence, BackInsertionSequenceConcept);\n   typedef typename _Sequence::value_type _Sequence_value_type;\n-  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);\n-\n+  glibcpp_class_requires2(_Tp, _Sequence_value_type, SameTypeConcept);\n \n   template <class _Tp1, class _Seq1>\n   friend bool operator== (const stack<_Tp1, _Seq1>&,"}, {"sha": "6f7c5a49297ff788cbe8ebd1807558c09b270188", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -80,7 +80,7 @@ inline _ForwardIter\n                      _ForwardIter __result)\n {\n   return __uninitialized_copy(__first, __last, __result,\n-                              __VALUE_TYPE(__result));\n+                              __value_type(__result));\n }\n \n inline char* uninitialized_copy(const char* __first, const char* __last,\n@@ -130,15 +130,15 @@ inline pair<_InputIter, _ForwardIter>\n __uninitialized_copy_n(_InputIter __first, _Size __count,\n                      _ForwardIter __result) {\n   return __uninitialized_copy_n(__first, __count, __result,\n-                                __ITERATOR_CATEGORY(__first));\n+                                __iterator_category(__first));\n }\n \n template <class _InputIter, class _Size, class _ForwardIter>\n inline pair<_InputIter, _ForwardIter>\n uninitialized_copy_n(_InputIter __first, _Size __count,\n                      _ForwardIter __result) {\n   return __uninitialized_copy_n(__first, __count, __result,\n-                                __ITERATOR_CATEGORY(__first));\n+                                __iterator_category(__first));\n }\n \n // Valid if copy construction is equivalent to assignment, and if the\n@@ -178,7 +178,7 @@ inline void uninitialized_fill(_ForwardIter __first,\n                                _ForwardIter __last, \n                                const _Tp& __x)\n {\n-  __uninitialized_fill(__first, __last, __x, __VALUE_TYPE(__first));\n+  __uninitialized_fill(__first, __last, __x, __value_type(__first));\n }\n \n // Valid if copy construction is equivalent to assignment, and if the\n@@ -217,7 +217,7 @@ template <class _ForwardIter, class _Size, class _Tp>\n inline _ForwardIter \n uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x)\n {\n-  return __uninitialized_fill_n(__first, __n, __x, __VALUE_TYPE(__first));\n+  return __uninitialized_fill_n(__first, __n, __x, __value_type(__first));\n }\n \n // Extensions: __uninitialized_copy_copy, __uninitialized_copy_fill, "}, {"sha": "a764db3de38e306a31185fe28f7cb45e2b09549c", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -31,8 +31,9 @@\n #ifndef __SGI_STL_INTERNAL_VECTOR_H\n #define __SGI_STL_INTERNAL_VECTOR_H\n \n+#include <bits/stl_iterator_base_funcs.h>\n #include <bits/functexcept.h>\n-#include <bits/concept_checks.h>\n+#include <bits/concept_check.h>\n \n namespace std\n { \n@@ -116,9 +117,8 @@ struct _Vector_base\n template <class _Tp, class _Alloc = allocator<_Tp> >\n class vector : protected _Vector_base<_Tp, _Alloc> \n {\n-  // requirements:\n-\n-  __STL_CLASS_REQUIRES(_Tp, _Assignable);\n+  // concept requirements\n+  glibcpp_class_requires(_Tp, SGIAssignableConcept);\n \n private:\n   typedef _Vector_base<_Tp, _Alloc> _Base;\n@@ -223,7 +223,7 @@ class vector : protected _Vector_base<_Tp, _Alloc>\n   template <class _InputIterator>\n   void _M_initialize_aux(_InputIterator __first, _InputIterator __last,\n                          __false_type) {\n-    _M_range_initialize(__first, __last, __ITERATOR_CATEGORY(__first));\n+    _M_range_initialize(__first, __last, __iterator_category(__first));\n   }\n \n   ~vector() { destroy(_M_start, _M_finish); }\n@@ -261,7 +261,7 @@ class vector : protected _Vector_base<_Tp, _Alloc>\n \n   template <class _InputIter>\n   void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)\n-    { _M_assign_aux(__first, __last, __ITERATOR_CATEGORY(__first)); }\n+    { _M_assign_aux(__first, __last, __iterator_category(__first)); }\n \n   template <class _InputIterator>\n   void _M_assign_aux(_InputIterator __first, _InputIterator __last,\n@@ -334,7 +334,7 @@ class vector : protected _Vector_base<_Tp, _Alloc>\n   void _M_insert_dispatch(iterator __pos,\n                           _InputIterator __first, _InputIterator __last,\n                           __false_type) {\n-    _M_range_insert(__pos, __first, __last, __ITERATOR_CATEGORY(__first));\n+    _M_range_insert(__pos, __first, __last, __iterator_category(__first));\n   }\n \n   void insert (iterator __pos, size_type __n, const _Tp& __x)"}, {"sha": "ddb32c731a36f3eedb5967c17d8bef44d53c686e", "filename": "libstdc++-v3/include/ext/hash_map", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -32,6 +32,7 @@\n #define __SGI_STL_INTERNAL_HASH_MAP_H\n \n #include <ext/stl_hashtable.h>\n+#include <bits/concept_check.h>\n \n namespace std\n {\n@@ -121,8 +122,6 @@ public:\n   friend bool operator== (const hash_map<_K1, _T1, _HF, _EqK, _Al>&,\n                           const hash_map<_K1, _T1, _HF, _EqK, _Al>&);\n \n-#include <bits/concept_checks.h>\n-\n   iterator begin() { return _M_ht.begin(); }\n   iterator end() { return _M_ht.end(); }\n   const_iterator begin() const { return _M_ht.begin(); }\n@@ -204,11 +203,11 @@ operator==(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,\n template <class _Key, class _Tp, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_multimap\n {\n-  // requirements:\n-  __STL_CLASS_REQUIRES(_Key, _Assignable);\n-  __STL_CLASS_REQUIRES(_Tp, _Assignable);\n-  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Key);\n-  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Key, _Key);\n+  // concept requirements\n+  glibcpp_class_requires(_Key, SGIAssignableConcept);\n+  glibcpp_class_requires(_Tp, SGIAssignableConcept);\n+  glibcpp_class_requires3(_HashFcn, size_t, _Key, UnaryFunctionConcept);\n+  glibcpp_class_requires3(_EqualKey, _Key, _Key, BinaryPredicateConcept);\n \n private:\n   typedef hashtable<pair<const _Key, _Tp>, _Key, _HashFcn,"}, {"sha": "e99a884ba10bbedbbd701deb3d30027aedb3df9f", "filename": "libstdc++-v3/include/ext/hash_set", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -32,8 +32,7 @@\n #define __SGI_STL_INTERNAL_HASH_SET_H\n \n #include <ext/stl_hashtable.h>\n-\n-#include <bits/concept_checks.h>\n+#include <bits/concept_check.h>\n \n namespace std\n {\n@@ -54,11 +53,10 @@ operator==(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,\n template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_set\n {\n-  // requirements:\n-\n-  __STL_CLASS_REQUIRES(_Value, _Assignable);\n-  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Value);\n-  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Value, _Value);\n+  // concept requirements\n+  glibcpp_class_requires(_Value, SGIAssignableConcept);\n+  glibcpp_class_requires3(_HashFcn, size_t, _Value, UnaryFunctionConcept);\n+  glibcpp_class_requires3(_EqualKey, _Value, _Value, BinaryPredicateConcept);\n \n private:\n   typedef hashtable<_Value, _Value, _HashFcn, _Identity<_Value>, \n@@ -206,11 +204,10 @@ operator==(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,\n template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_multiset\n {\n-  // requirements:\n-\n-  __STL_CLASS_REQUIRES(_Value, _Assignable);\n-  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Value);\n-  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Value, _Value);\n+  // concept requirements\n+  glibcpp_class_requires(_Value, SGIAssignableConcept);\n+  glibcpp_class_requires3(_HashFcn, size_t, _Value, UnaryFunctionConcept);\n+  glibcpp_class_requires3(_EqualKey, _Value, _Value, BinaryPredicateConcept);\n \n private:\n   typedef hashtable<_Value, _Value, _HashFcn, _Identity<_Value>, "}, {"sha": "68cbccc0d241791340320703b44e0fd4f650d80c", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -19,7 +19,7 @@\n #ifndef __SGI_STL_INTERNAL_SLIST_H\n #define __SGI_STL_INTERNAL_SLIST_H\n \n-#include <bits/concept_checks.h>\n+#include <bits/concept_check.h>\n \n namespace std\n { \n@@ -257,9 +257,8 @@ _Slist_base<_Tp,_Alloc>::_M_erase_after(_Slist_node_base* __before_first,\n template <class _Tp, class _Alloc = allocator<_Tp> >\n class slist : private _Slist_base<_Tp,_Alloc>\n {\n-  // requirements:\n-\n-  __STL_CLASS_REQUIRES(_Tp, _Assignable);\n+  // concept requirements\n+  glibcpp_class_requires(_Tp, SGIAssignableConcept);\n \n private:\n   typedef _Slist_base<_Tp,_Alloc> _Base;"}, {"sha": "aa87ba56ee8a983fb7b2d0845ce750c679f61114", "filename": "libstdc++-v3/include/ext/stl_hashtable.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -353,13 +353,13 @@ class hashtable {\n   template <class _InputIterator>\n   void insert_unique(_InputIterator __f, _InputIterator __l)\n   {\n-    insert_unique(__f, __l, __ITERATOR_CATEGORY(__f));\n+    insert_unique(__f, __l, __iterator_category(__f));\n   }\n \n   template <class _InputIterator>\n   void insert_equal(_InputIterator __f, _InputIterator __l)\n   {\n-    insert_equal(__f, __l, __ITERATOR_CATEGORY(__f));\n+    insert_equal(__f, __l, __iterator_category(__f));\n   }\n \n   template <class _InputIterator>"}, {"sha": "897ea7ab9f4564c450e3515a114c215c2e14958a", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -111,7 +111,7 @@ xcompiling = @xcompiling@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -123,14 +123,21 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers =          libio.h libioP.h iolibio.h\n+libio_headers = \\\n+        libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \tiofclose.c iofopen.c \n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n+@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "76191e97d3e7f48c837d20a783d9aebcad75178f", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -114,18 +114,24 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes = \\\n+\thypotl.c signbitl.c\n \n \n-EXTRA_DIST =  \thypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST = \\\n+\thypot.c hypotf.c atan2f.c expf.c \\\n+\t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD = \\\n+\t@LIBMATHOBJS@ \\\n+\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES =  \tsignbit.c signbitf.c\n+libmath_la_SOURCES = \\\n+\tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -139,7 +145,9 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n+INCLUDES = \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n+\t$(TOPLEVEL_INCLUDES) \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "226902c1c18ff5b8b0aa899485d7370aef74c946", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -129,11 +129,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -145,13 +147,38 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n-\n-\n-headers =  \texception new typeinfo cxxabi.h exception_defines.h \n-\n-\n-sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_terminate.cc \teh_throw.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n+INCLUDES = \\\n+\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n+\t $(LIBSUPCXX_INCLUDES)\n+\n+\n+headers = \\\n+\texception new typeinfo cxxabi.h exception_defines.h \n+\n+\n+sources = \\\n+\tdel_op.cc \\\n+\tdel_opnt.cc \\\n+\tdel_opv.cc \\\n+\tdel_opvnt.cc \\\n+\teh_alloc.cc \\\n+\teh_aux_runtime.cc \\\n+\teh_catch.cc \\\n+\teh_exception.cc \\\n+\teh_globals.cc \\\n+\teh_personality.cc \\\n+\teh_terminate.cc \\\n+\teh_throw.cc \\\n+\tnew_handler.cc \\\n+\tnew_op.cc \\\n+\tnew_opnt.cc \\\n+\tnew_opv.cc \\\n+\tnew_opvnt.cc \\\n+\tpure.cc \\\n+\ttinfo.cc \\\n+\ttinfo2.cc \\\n+\tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -167,7 +194,12 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -191,7 +223,9 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+               --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -200,7 +234,9 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=c\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+          --mode=link $(CXX) \\\n+          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "d9dac6cc66c0eae3c81e053b62bff7fae7fb060e", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.79 2001/03/28 01:19:42 aoliva Exp $\n+## $Id: Makefile.am,v 1.80 2001/03/31 20:15:43 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -80,7 +80,8 @@ base_headers = \\\n \tbits/streambuf.tcc bits/basic_file.h \\\n \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n-\tbits/stl_threads.h bits/stl_iterator_base.h \\\n+\tbits/stl_threads.h \\\n+\tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \\\n \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n \tbits/std_iterator.h bits/std_list.h \\\n \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n@@ -91,12 +92,11 @@ base_headers = \\\n \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n-\tbits/stl_relops.h bits/stl_set.h \\\n-\tbits/stl_stack.h bits/stl_tempbuf.h \\\n+\tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \\\n \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n \tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \\\n-\tbits/concept_checks.h bits/container_concepts.h \\\n-\tbits/sequence_concepts.h bits/stl_construct.h\n+\tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n+\n \n backward_headers = \\\n \tbackward/complex.h backward/iomanip.h backward/istream.h \\\n@@ -299,8 +299,12 @@ tmp-libstdc++.INC: Makefile\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n+#\n+# The no-implicit-templates flag will generate unresolved references to\n+# the concept-checking symbols.  So we must disable the checks while\n+# actually building the library.\n AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n+\t-fno-implicit-templates -D_GLIBCPP_NO_CONCEPT_CHECKS \\\n \t$(LIBSUPCXX_CXXFLAGS) \\\n \t$(WARN_CXXFLAGS) \\\n \t$(OPTIMIZE_CXXFLAGS) \\"}, {"sha": "04779bf74b440a196d18e6a3c74dafd6ba3b6dac", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 128, "deletions": 27, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -121,11 +121,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -137,44 +139,132 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n-\n-\n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_construct.h\n-\n-\n-backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iostream.h \tbackward/iterator.h backward/list.h backward/map.h \tbackward/multimap.h backward/new.h backward/multiset.h \tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \tbackward/vector.h backward/fstream.h backward/strstream.h \tbackward/strstream\n-\n-\n-ext_headers =  \text/rope ext/ropeimpl.h ext/stl_rope.h \text/slist ext/hash_map ext/hash_set \text/stl_hashtable.h ext/stl_hash_fun.h \n-\n-\n-c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n+\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t$(TOPLEVEL_INCLUDES)\n+\n+\n+base_headers = \\\n+\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n+\tbits/stringfwd.h bits/std_string.h bits/basic_string.h \\\n+\tbits/basic_string.tcc \\\n+\tbits/generic_shadow.h bits/std_utility.h \\\n+\tbits/std_complex.h \\\n+\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n+\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n+\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n+\tbits/std_fstream.h bits/std_iomanip.h \\\n+\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n+\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n+\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n+\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n+\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n+\tbits/streambuf.tcc bits/basic_file.h \\\n+\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n+\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n+\tbits/stl_threads.h \\\n+\tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \\\n+\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n+\tbits/std_iterator.h bits/std_list.h \\\n+\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n+\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n+\tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \\\n+\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n+\tbits/stl_deque.h bits/stl_function.h \\\n+\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n+\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n+\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n+\tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \\\n+\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n+\tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \\\n+\tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n+\n+\n+backward_headers = \\\n+\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n+\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n+\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n+\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n+\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n+\tbackward/hashtable.h backward/heap.h backward/iostream.h \\\n+\tbackward/iterator.h backward/list.h backward/map.h \\\n+\tbackward/multimap.h backward/new.h backward/multiset.h \\\n+\tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \\\n+\tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \\\n+\tbackward/vector.h backward/fstream.h backward/strstream.h \\\n+\tbackward/strstream\n+\n+\n+ext_headers = \\\n+\text/rope ext/ropeimpl.h ext/stl_rope.h \\\n+\text/slist ext/hash_map ext/hash_set \\\n+\text/stl_hashtable.h ext/stl_hash_fun.h \n+\n+\n+c_base_headers = \\\n+\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n+\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n+\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n+\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n+\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n+\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers = \\\n+\talgorithm bitset complex deque fstream functional \\\n+\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n+\tmap memory numeric ostream queue set sstream stack stdexcept \\\n+\tstreambuf string utility valarray vector \\\n+\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n+\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n+\tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \tbits/basic_file_model.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers = \\\n+\tbits/std_limits.h \\\n+\tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \\\n+\tbits/basic_file_model.h \\\n+\tbits/atomicity.h bits/os_defines.h \\\n+\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources =  \tlimitsMEMBERS.cc \tstdexcept.cc functexcept.cc bitset.cc \tglobals.cc \tbasic_file.cc ios.cc complex_io.cc strstream.cc \tc++locale.cc locale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \tstring-inst.cc wstring-inst.cc \n+sources = \\\n+\tlimitsMEMBERS.cc \\\n+\tstdexcept.cc functexcept.cc bitset.cc \\\n+\tglobals.cc \\\n+\tbasic_file.cc ios.cc complex_io.cc strstream.cc \\\n+\tc++locale.cc locale.cc localename.cc codecvt.cc \\\n+\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \\\n+\tstring-inst.cc wstring-inst.cc \n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD = \\\n+\t../libmath/libmath.la @libio_la@ \\\n+\t../libsupc++/libsupc++convenience.la\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n # Check for various configure bits that change where the headers get installed.\n@@ -193,7 +283,16 @@ c_incdir = @C_INCLUDE_DIR@\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+#\n+# The no-implicit-templates flag will generate unresolved references to\n+# the concept-checking symbols.  So we must disable the checks while\n+# actually building the library.\n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates -D_GLIBCPP_NO_CONCEPT_CHECKS \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -214,7 +313,8 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -223,7 +323,8 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "0bd44d6da13bafd3e9dc1b72657d540bf5449f4f", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a20a1ee0168656d375ea2333e14b46937bdc6a/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=30a20a1ee0168656d375ea2333e14b46937bdc6a", "patch": "@@ -118,10 +118,14 @@ AUTOMAKE_OPTIONS = foreign dejagnu no-installinfo\n \n DEJATOOL = libstdc++\n \n-EXPECT = `if [ -f $(top_builddir)/../expect/expect ] ; then             echo $(top_builddir)/../expect/expect ;           else echo expect ; fi`\n+EXPECT = `if [ -f $(top_builddir)/../expect/expect ] ; then \\\n+            echo $(top_builddir)/../expect/expect ; \\\n+          else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f $(top_srcdir)/../dejagnu/runtest ] ; then \t       echo $(top_srcdir)/../dejagnu/runtest ; \t    else echo runtest; fi`\n+RUNTEST = `if [ -f $(top_srcdir)/../dejagnu/runtest ] ; then \\\n+\t       echo $(top_srcdir)/../dejagnu/runtest ; \\\n+\t    else echo runtest; fi`\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}]}