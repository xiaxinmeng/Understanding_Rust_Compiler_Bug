{"sha": "a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUwZmE3NmE5ZDhlMzY5MGVhNTYzZmY3NWQ4ZDljZWJiMDcyMDhmNw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2014-11-05T12:14:27Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2014-11-05T12:14:27Z"}, "message": "Add a no_register_allocation target hook.\n\n\t* target.def (no_register_allocation): New data hook.\n\t* doc/tm.texi.in: Add @hook TARGET_NO_REGISTER_ALLOCATION.\n\t* doc/tm.texi: Regenerate.\n\t* ira.c (gate_ira): New function.\n\t(pass_data_ira): Set has_gate.\n\t(pass_ira): Add a gate function.\n\t(pass_data_reload): Likewise.\n\t(pass_reload): Add a gate function.\n\t(pass_ira): Use it.\n\t* reload1.c (eliminate_regs): If reg_eliminate_is NULL, assert that\n\tno register allocation happens on the target and return.\n\t* final.c (alter_subreg): Ensure register is not a pseudo before\n\tcalling simplify_subreg.\n\t(output_operand): Assert that x isn't a pseudo only if doing\n\tregister allocation.\n\nFrom-SVN: r217122", "tree": {"sha": "8c769246fc064bcf589bbd7310157cfab45d3fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c769246fc064bcf589bbd7310157cfab45d3fbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/comments", "author": null, "committer": null, "parents": [{"sha": "146ca1446676fa735c323eafff16516f3b2c65b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146ca1446676fa735c323eafff16516f3b2c65b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146ca1446676fa735c323eafff16516f3b2c65b9"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "ff9ead618a42111a9cddfd6bf1071b08b0d76f9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "patch": "@@ -1,5 +1,21 @@\n 2014-11-05  Bernd Schmidt  <bernds@codesourcery.com>\n \n+\t* target.def (no_register_allocation): New data hook.\n+\t* doc/tm.texi.in: Add @hook TARGET_NO_REGISTER_ALLOCATION.\n+\t* doc/tm.texi: Regenerate.\n+\t* ira.c (gate_ira): New function.\n+\t(pass_data_ira): Set has_gate.\n+\t(pass_ira): Add a gate function.\n+\t(pass_data_reload): Likewise.\n+\t(pass_reload): Add a gate function.\n+\t(pass_ira): Use it.\n+\t* reload1.c (eliminate_regs): If reg_eliminate_is NULL, assert that\n+\tno register allocation happens on the target and return.\n+\t* final.c (alter_subreg): Ensure register is not a pseudo before\n+\tcalling simplify_subreg.\n+\t(output_operand): Assert that x isn't a pseudo only if doing\n+\tregister allocation.\n+\n \t* dbxout.c (dbxout_symbol): Don't call eliminate_regs on decls for\n \tglobal vars.\n "}, {"sha": "dbca62dd8eda9f33110812db3e279474211cd594", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "patch": "@@ -9323,11 +9323,19 @@ True if the @code{DW_AT_comp_dir} attribute should be emitted for each  compilat\n @end deftypevr\n \n @deftypevr {Target Hook} bool TARGET_DELAY_SCHED2\n-True if sched2 is not to be run at its normal place.  This usually means it will be run as part of machine-specific reorg.\n+True if sched2 is not to be run at its normal place.\n+This usually means it will be run as part of machine-specific reorg.\n @end deftypevr\n \n @deftypevr {Target Hook} bool TARGET_DELAY_VARTRACK\n-True if vartrack is not to be run at its normal place.  This usually means it will be run as part of machine-specific reorg.\n+True if vartrack is not to be run at its normal place.\n+This usually means it will be run as part of machine-specific reorg.\n+@end deftypevr\n+\n+@deftypevr {Target Hook} bool TARGET_NO_REGISTER_ALLOCATION\n+True if register allocation and the passes\n+following it should not be run.  Usually true only for virtual assembler\n+targets.\n @end deftypevr\n \n @defmac ASM_OUTPUT_DWARF_DELTA (@var{stream}, @var{size}, @var{label1}, @var{label2})"}, {"sha": "b732f1f671cd1e488ce5a38fbccf64cec164cf23", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "patch": "@@ -6948,6 +6948,8 @@ tables, and hence is desirable if it works.\n \n @hook TARGET_DELAY_VARTRACK\n \n+@hook TARGET_NO_REGISTER_ALLOCATION\n+\n @defmac ASM_OUTPUT_DWARF_DELTA (@var{stream}, @var{size}, @var{label1}, @var{label2})\n A C statement to issue assembly directives that create a difference\n @var{lab1} minus @var{lab2}, using an integer of the given @var{size}."}, {"sha": "e958a5202462dfcfc96d06a43a59daac27edae88", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "patch": "@@ -3189,7 +3189,7 @@ alter_subreg (rtx *xp, bool final_p)\n       else\n \t*xp = adjust_address_nv (y, GET_MODE (x), offset);\n     }\n-  else\n+  else if (REG_P (y) && HARD_REGISTER_P (y))\n     {\n       rtx new_rtx = simplify_subreg (GET_MODE (x), y, GET_MODE (y),\n \t\t\t\t     SUBREG_BYTE (x));\n@@ -3857,7 +3857,8 @@ output_operand (rtx x, int code ATTRIBUTE_UNUSED)\n     x = alter_subreg (&x, true);\n \n   /* X must not be a pseudo reg.  */\n-  gcc_assert (!x || !REG_P (x) || REGNO (x) < FIRST_PSEUDO_REGISTER);\n+  if (!targetm.no_register_allocation)\n+    gcc_assert (!x || !REG_P (x) || REGNO (x) < FIRST_PSEUDO_REGISTER);\n \n   targetm.asm_out.print_operand (asm_out_file, x, code);\n "}, {"sha": "9c9e71d1be105c35ead24e5b43129067b77ee86a", "filename": "gcc/ira.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "patch": "@@ -5498,6 +5498,10 @@ class pass_ira : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n+  virtual bool gate (function *)\n+    {\n+      return !targetm.no_register_allocation;\n+    }\n   virtual unsigned int execute (function *)\n     {\n       ira (dump_file);\n@@ -5537,6 +5541,10 @@ class pass_reload : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n+  virtual bool gate (function *)\n+    {\n+      return !targetm.no_register_allocation;\n+    }\n   virtual unsigned int execute (function *)\n     {\n       do_reload ();"}, {"sha": "7d5bad51d88ad5b165179e56762dd7580f9cfee4", "filename": "gcc/reload1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "patch": "@@ -2968,6 +2968,11 @@ eliminate_regs_1 (rtx x, machine_mode mem_mode, rtx insn,\n rtx\n eliminate_regs (rtx x, machine_mode mem_mode, rtx insn)\n {\n+  if (reg_eliminate == NULL)\n+    {\n+      gcc_assert (targetm.no_register_allocation);\n+      return x;\n+    }\n   return eliminate_regs_1 (x, mem_mode, insn, false, false);\n }\n "}, {"sha": "de203c3146b54d064df60de051b359acc80786e9", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "patch": "@@ -5421,15 +5421,21 @@ DEFHOOKPOD\n  bool, false)\n \n DEFHOOKPOD\n-(delay_sched2, \"True if sched2 is not to be run at its normal place.  \\\n+(delay_sched2, \"True if sched2 is not to be run at its normal place.\\n\\\n This usually means it will be run as part of machine-specific reorg.\",\n bool, false)\n \n DEFHOOKPOD\n-(delay_vartrack, \"True if vartrack is not to be run at its normal place.  \\\n+(delay_vartrack, \"True if vartrack is not to be run at its normal place.\\n\\\n This usually means it will be run as part of machine-specific reorg.\",\n bool, false)\n \n+DEFHOOKPOD\n+(no_register_allocation, \"True if register allocation and the passes\\n\\\n+following it should not be run.  Usually true only for virtual assembler\\n\\\n+targets.\",\n+bool, false)\n+\n /* Leave the boolean fields at the end.  */\n \n /* Functions related to mode switching.  */"}]}