{"sha": "1a1d0917518f2e70a04881abd0be4082259243f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWExZDA5MTc1MThmMmU3MGEwNDg4MWFiZDBiZTQwODIyNTkyNDNmNQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2006-03-02T02:20:54Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2006-03-02T02:20:54Z"}, "message": "re PR target/25908 (vtables with vague linkage is not being marked as vague on darwin)\n\n\tPR darwin/25908\n\t* decl2.c (import_export_decl): Fix ABI breakage on darwin.\n\n\t* g++.dg/abi/key2.C: Add.\n\nFrom-SVN: r111632", "tree": {"sha": "dd454c9ce0e6e065773bfff12faabcd40f8c07eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd454c9ce0e6e065773bfff12faabcd40f8c07eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a1d0917518f2e70a04881abd0be4082259243f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1d0917518f2e70a04881abd0be4082259243f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a1d0917518f2e70a04881abd0be4082259243f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1d0917518f2e70a04881abd0be4082259243f5/comments", "author": null, "committer": null, "parents": [{"sha": "011daa767e8ba0999faed5c3ea7e8d8ceaa42fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011daa767e8ba0999faed5c3ea7e8d8ceaa42fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/011daa767e8ba0999faed5c3ea7e8d8ceaa42fcd"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "c092c39e729ff8b779b2fd81df221c58a16e92ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1d0917518f2e70a04881abd0be4082259243f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1d0917518f2e70a04881abd0be4082259243f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a1d0917518f2e70a04881abd0be4082259243f5", "patch": "@@ -1,3 +1,8 @@\n+2006-03-01  Mike Stump  <mrs@apple.com>\n+\n+\tPR darwin/25908\n+\t* decl2.c (import_export_decl): Fix ABI breakage on darwin.\n+\n 2006-02-24  Geoffrey Keating  <geoffk@apple.com>\n \n \t* except.c (expand_start_catch_block): Handle"}, {"sha": "9cc95b630067dc8431af59ff56120176e069ef49", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1d0917518f2e70a04881abd0be4082259243f5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1d0917518f2e70a04881abd0be4082259243f5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1a1d0917518f2e70a04881abd0be4082259243f5", "patch": "@@ -1784,9 +1784,14 @@ import_export_decl (tree decl)\n \t      /* The generic C++ ABI says that class data is always\n \t\t COMDAT, even if there is a key function.  Some\n \t\t variants (e.g., the ARM EABI) says that class data\n-\t\t only has COMDAT linkage if the class data might\n-\t\t be emitted in more than one translation unit.  */\n+\t\t only has COMDAT linkage if the class data might be\n+\t\t emitted in more than one translation unit.  When the\n+\t\t key method can be inline and is inline, we still have\n+\t\t to arrange for comdat even though\n+\t\t class_data_always_comdat is false.  */\n \t      if (!CLASSTYPE_KEY_METHOD (class_type)\n+\t\t  || (DECL_DECLARED_INLINE_P (CLASSTYPE_KEY_METHOD (class_type))\n+\t\t      && targetm.cxx.key_method_may_be_inline ())\n \t\t  || targetm.cxx.class_data_always_comdat ())\n \t\t{\n \t\t  /* The ABI requires COMDAT linkage.  Normally, we\n@@ -1825,7 +1830,10 @@ import_export_decl (tree decl)\n \t      if (CLASSTYPE_INTERFACE_KNOWN (type)\n \t\t  && !CLASSTYPE_INTERFACE_ONLY (type))\n \t\t{\n-\t\t  comdat_p = targetm.cxx.class_data_always_comdat ();\n+\t\t  comdat_p = (targetm.cxx.class_data_always_comdat ()\n+\t\t\t      || (CLASSTYPE_KEY_METHOD (type)\n+\t\t\t\t  && DECL_DECLARED_INLINE_P (CLASSTYPE_KEY_METHOD (type))\n+\t\t\t\t  && targetm.cxx.key_method_may_be_inline ()));\n \t\t  mark_needed (decl);\n \t\t  if (!flag_weak)\n \t\t    {"}, {"sha": "5ccb65c500357b91cc112bb5fa3dfae624b02628", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1d0917518f2e70a04881abd0be4082259243f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1d0917518f2e70a04881abd0be4082259243f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a1d0917518f2e70a04881abd0be4082259243f5", "patch": "@@ -1,3 +1,7 @@\n+2006-03-01  Mike Stump  <mrs@apple.com>\n+\n+\t* g++.dg/abi/key2.C: Add.\n+\n 2006-03-01  Paul Thomas  <pault@gcc.gnu.org>\n \n \t* gfortran.dg/logical_dot_product.f90: New test. "}, {"sha": "40cf1d5a96de31813b52c3e870bec0e68383852b", "filename": "gcc/testsuite/g++.dg/abi/key2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1d0917518f2e70a04881abd0be4082259243f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fkey2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1d0917518f2e70a04881abd0be4082259243f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fkey2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fkey2.C?ref=1a1d0917518f2e70a04881abd0be4082259243f5", "patch": "@@ -0,0 +1,16 @@\n+// On Darwin, key methods that are inline result in comdat style things.  */\n+// PR darwin/25908\n+\n+// { dg-do compile { target *-*-darwin* } }\n+// { dg-final { scan-assembler \".globl __ZTV1f\\\\n\t.weak_definition __ZTV1f\\\\n\t.section __DATA,__const_coal,coalesced\" } }\n+// { dg-final { scan-assembler \".globl __ZTS1f\\\\n\t.weak_definition __ZTS1f\\\\n\t.section __TEXT,__const_coal,coalesced\" } }\n+// { dg-final { scan-assembler \".globl __ZTI1f\\\\n\t.weak_definition __ZTI1f\\\\n\t.section __DATA,__const_coal,coalesced\" } }\n+\n+class f\n+{\n+  virtual void g();\n+  virtual void h();\n+} c;\n+inline void f::g() {}\n+int sub(void)\n+{}"}]}