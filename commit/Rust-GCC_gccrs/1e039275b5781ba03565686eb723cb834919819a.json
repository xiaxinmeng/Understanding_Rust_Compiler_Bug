{"sha": "1e039275b5781ba03565686eb723cb834919819a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwMzkyNzViNTc4MWJhMDM1NjU2ODZlYjcyM2NiODM0OTE5ODE5YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-03-20T10:15:33Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-03-20T10:15:33Z"}, "message": "re PR ada/65451 (compiler crash on volatile access type)\n\n\tPR ada/65451\n\t* gcc-interface/utils.c (gnat_pushdecl): Tidy up and improve comment.\n\tMake sure to chain only main variants through TYPE_NEXT_PTR_TO.\n\nFrom-SVN: r221531", "tree": {"sha": "4035a5586369dd3cd26cad3bce555d887108328d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4035a5586369dd3cd26cad3bce555d887108328d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e039275b5781ba03565686eb723cb834919819a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e039275b5781ba03565686eb723cb834919819a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e039275b5781ba03565686eb723cb834919819a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e039275b5781ba03565686eb723cb834919819a/comments", "author": null, "committer": null, "parents": [{"sha": "7ce7e4d49497bb1b3459dd6e35dea6b7327531d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce7e4d49497bb1b3459dd6e35dea6b7327531d5"}], "stats": {"total": 101, "additions": 59, "deletions": 42}, "files": [{"sha": "1d391324e203610e4d17ea57c98c7cf2056e879b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e039275b5781ba03565686eb723cb834919819a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e039275b5781ba03565686eb723cb834919819a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1e039275b5781ba03565686eb723cb834919819a", "patch": "@@ -1,3 +1,11 @@\n+2015-03-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/65451\n+\t* gcc-interface/utils.c (gnat_pushdecl): Tidy up and improve comment.\n+\tMake sure to chain only main variants through TYPE_NEXT_PTR_TO.\n+\n+\t* gcc-interface/trans.c (Attribute_to_gnu): Revert latest change.\n+\n 2015-03-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils2.c (gnat_invariant_expr): Return null if the type"}, {"sha": "a4ba82e5dfce4917715774fc2a39ca07deeb5536", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e039275b5781ba03565686eb723cb834919819a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e039275b5781ba03565686eb723cb834919819a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=1e039275b5781ba03565686eb723cb834919819a", "patch": "@@ -155,14 +155,6 @@ struct GTY(()) language_function {\n #define f_gnat_ret \\\n   DECL_STRUCT_FUNCTION (current_function_decl)->language->gnat_ret\n \n-/* Expected to be defined from the tm headers, though not always available.\n-   0 indicates that function symbols designate function descriptors on the\n-   target so we don't need to use runtime descriptors of our own.  */\n-\n-#ifndef USE_RUNTIME_DESCRIPTORS\n-#define USE_RUNTIME_DESCRIPTORS (-1)\n-#endif\n-\n /* A structure used to gather together information about a statement group.\n    We use this to gather related statements, for example the \"then\" part\n    of a IF.  In the case where it represents a lexical scope, we may also\n@@ -1734,32 +1726,13 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t\t\t  gnu_result_type, gnu_prefix);\n \n       /* For 'Code_Address, find an inner ADDR_EXPR and mark it so that we\n-\t don't try to build a trampoline.  Then if the function address\n-\t denotes a function descriptor on this target, fetch the code address\n-\t from the descriptor.  */\n+\t don't try to build a trampoline.  */\n       if (attribute == Attr_Code_Address)\n \t{\n \t  gnu_expr = remove_conversions (gnu_result, false);\n \n \t  if (TREE_CODE (gnu_expr) == ADDR_EXPR)\n \t    TREE_NO_TRAMPOLINE (gnu_expr) = TREE_CONSTANT (gnu_expr) = 1;\n-\n-\t  /* On targets on which function symbols denote a function\n-\t     descriptor, the code address is always stored within the\n-\t     first slot of the descriptor.  */\n-\n-\t  if (USE_RUNTIME_DESCRIPTORS == 0)\n-\t    {\n-\t      /* result = * ((result_type *) result),\n-\t\t where we expect result to be of some pointer type already.  */\n-\n-\t      const tree result_ptr_type\n-\t\t= build_pointer_type (gnu_result_type);\n-\n-\t      gnu_result = build_unary_op\n-\t\t(INDIRECT_REF, gnu_result_type,\n-\t\t convert (result_ptr_type, gnu_result));\n-\t    }\n \t}\n \n       /* For 'Access, issue an error message if the prefix is a C++ method"}, {"sha": "170aa4a97167cdd3752643da3fd48f7d82a61e61", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e039275b5781ba03565686eb723cb834919819a/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e039275b5781ba03565686eb723cb834919819a/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=1e039275b5781ba03565686eb723cb834919819a", "patch": "@@ -787,19 +787,17 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \t{\n \t  /* Array types aren't \"tagged\" types so we force the type to be\n \t     associated with its typedef in the DWARF back-end, in order to\n-\t     make sure that the latter is always preserved.  We used to do the\n-\t     same for pointer types, but to have consistent DWARF output we now\n-\t     create copies for DECL_ORIGINAL_TYPE just like the C front-end\n-\t     does in c-common.c:set_underlying_type.  */\n+\t     make sure that the latter is always preserved, by creating an\n+\t     on-side copy for DECL_ORIGINAL_TYPE.  We used to do the same\n+\t     for pointer types, but to have consistent DWARF output we now\n+\t     create a copy for the type itself and use the original type\n+\t     for DECL_ORIGINAL_TYPE like the C front-end.  */\n \t  if (!DECL_ARTIFICIAL (decl) && TREE_CODE (t) == ARRAY_TYPE)\n \t    {\n \t      tree tt = build_distinct_type_copy (t);\n-\t      if (TREE_CODE (t) == POINTER_TYPE)\n-\t\tTYPE_NEXT_PTR_TO (t) = tt;\n-\t      /* Array types need to have a name so that they can be related to\n-\t\t their GNAT encodings.  */\n-\t      if (TREE_CODE (t) == ARRAY_TYPE)\n-\t\tTYPE_NAME (tt) = DECL_NAME (decl);\n+\t      /* Array types need to have a name so that they can be related\n+\t\t to their GNAT encodings.  */\n+\t      TYPE_NAME (tt) = DECL_NAME (decl);\n \t      defer_or_set_type_context (tt,\n \t\t\t\t\t DECL_CONTEXT (decl),\n \t\t\t\t\t deferred_decl_context);\n@@ -811,13 +809,17 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \t       && (TREE_CODE (t) == POINTER_TYPE || TYPE_IS_FAT_POINTER_P (t)))\n \t{\n \t  tree tt;\n-\t  /* ??? We need a variant for the placeholder machinery to work.  */\n+\t  /* ??? Copy and original type are not supposed to be variant but we\n+\t     really need a variant for the placeholder machinery to work.  */\n \t  if (TYPE_IS_FAT_POINTER_P (t))\n \t    tt = build_variant_type_copy (t);\n \t  else\n-\t    tt = build_distinct_type_copy (t);\n-\t  if (TREE_CODE (t) == POINTER_TYPE)\n-\t    TYPE_NEXT_PTR_TO (t) = tt;\n+\t    {\n+\t      /* TYPE_NEXT_PTR_TO is a chain of main variants.  */\n+\t      tt = build_distinct_type_copy (TYPE_MAIN_VARIANT (t));\n+\t      TYPE_NEXT_PTR_TO (TYPE_MAIN_VARIANT (t)) = tt;\n+\t      tt = build_qualified_type (tt, TYPE_QUALS (t));\n+\t    }\n \t  TYPE_NAME (tt) = decl;\n \t  defer_or_set_type_context (tt,\n \t\t\t\t     DECL_CONTEXT (decl),"}, {"sha": "7300bb6e17cc19fecab2d8846ec42c55e1d29031", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e039275b5781ba03565686eb723cb834919819a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e039275b5781ba03565686eb723cb834919819a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e039275b5781ba03565686eb723cb834919819a", "patch": "@@ -1,3 +1,7 @@\n+2015-03-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/volatile13.ad[sb]: New test.\n+\n 2015-03-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/60851"}, {"sha": "eb0f5f60b2451f5a08d20fe79b539e8b72e15152", "filename": "gcc/testsuite/gnat.dg/volatile13.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e039275b5781ba03565686eb723cb834919819a/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e039275b5781ba03565686eb723cb834919819a/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile13.adb?ref=1e039275b5781ba03565686eb723cb834919819a", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+\n+package body Volatile13 is\n+\n+   procedure Compute_Index_Map (Self : Shared_String) is\n+      Map : Index_Map_Access := Self.Index_Map;\n+   begin\n+      Map := new Index_Map (Self.Length);\n+   end;\n+\n+end Volatile13;"}, {"sha": "d24d6598cb6a01c9c9096282f5068d0792582b32", "filename": "gcc/testsuite/gnat.dg/volatile13.ads", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e039275b5781ba03565686eb723cb834919819a/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e039275b5781ba03565686eb723cb834919819a/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile13.ads?ref=1e039275b5781ba03565686eb723cb834919819a", "patch": "@@ -0,0 +1,19 @@\n+package Volatile13 is\n+\n+   type Index_Map (Length : Natural) is record\n+      Map : String (1 .. Length);\n+   end record;\n+\n+   type Index_Map_Access is access all Index_Map;\n+   pragma Volatile (Index_Map_Access);\n+\n+   type Shared_String (Size : Natural) is limited record\n+      Length    : Natural := 0;\n+      Index_Map : Index_Map_Access := null;\n+   end record;\n+\n+   Shared_Empty : Shared_String := (Size => 64, others => <>);\n+\n+   procedure Compute_Index_Map (Self : Shared_String);\n+\n+end Volatile13;"}]}