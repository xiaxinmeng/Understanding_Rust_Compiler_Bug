{"sha": "1a2e356efefb29718ef217149c0df76fcb4ac08a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyZTM1NmVmZWZiMjk3MThlZjIxNzE0OWMwZGY3NmZjYjRhYzA4YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-12-20T18:05:11Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-12-20T18:05:11Z"}, "message": "s390: Implement extzv for z10\n\n        * config/s390/predicates.md (nonzero_shift_count_operand): New.\n        * config/s390/s390-protos.h (s390_extzv_shift_ok): Declare.\n        * config/s390/s390.c (s390_extzv_shift_ok): New function.\n        * config/s390/s390.md (extzv): New expander.\n        (*extzv<GPR>_zEC12, *extzv<GPR>_z10): New insns.\n        (*pre_z10_extzv<GPR>): Rename from *extzv<GPR>; simplify with\n        nonzero_shift_count_operand.\n        (*extzv_<mode>_srl, *extzv_<mode>_sll): New insns.\n\nCo-Authored-By: Andreas Krebbel <Andreas.Krebbel@de.ibm.com>\n\nFrom-SVN: r194644", "tree": {"sha": "13b6b3e56d5eb65f78862c1cf017f280fe0d0020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13b6b3e56d5eb65f78862c1cf017f280fe0d0020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a2e356efefb29718ef217149c0df76fcb4ac08a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2e356efefb29718ef217149c0df76fcb4ac08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a2e356efefb29718ef217149c0df76fcb4ac08a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2e356efefb29718ef217149c0df76fcb4ac08a/comments", "author": null, "committer": null, "parents": [{"sha": "2542ef057b0a9c35308e7eee2e5fbddac7c67a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2542ef057b0a9c35308e7eee2e5fbddac7c67a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2542ef057b0a9c35308e7eee2e5fbddac7c67a0c"}], "stats": {"total": 126, "additions": 118, "deletions": 8}, "files": [{"sha": "d2b9342472292ebbaf46dac3b13c169cf9f5b914", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e356efefb29718ef217149c0df76fcb4ac08a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e356efefb29718ef217149c0df76fcb4ac08a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a2e356efefb29718ef217149c0df76fcb4ac08a", "patch": "@@ -21,6 +21,15 @@\n \t(extend<HQI><DSI>2, zero_extend<HQI>si2): Likewise.\n \t(zero_extend<HQI>di2, fixuns_trunc<BFP><GPR>2): Likewise.\n \n+\t* config/s390/predicates.md (nonzero_shift_count_operand): New.\n+\t* config/s390/s390-protos.h (s390_extzv_shift_ok): Declare.\n+\t* config/s390/s390.c (s390_extzv_shift_ok): New function.\n+\t* config/s390/s390.md (extzv): New expander.\n+\t(*extzv<GPR>_zEC12, *extzv<GPR>_z10): New insns.\n+\t(*pre_z10_extzv<GPR>): Rename from *extzv<GPR>; simplify with\n+\tnonzero_shift_count_operand.\n+\t(*extzv_<mode>_srl, *extzv_<mode>_sll): New insns.\n+\n 2012-12-20  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR bootstrap/55202"}, {"sha": "d5e185d5ac7d8208dbb78bd3f0a7567af82dd565", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e356efefb29718ef217149c0df76fcb4ac08a/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e356efefb29718ef217149c0df76fcb4ac08a/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=1a2e356efefb29718ef217149c0df76fcb4ac08a", "patch": "@@ -101,6 +101,10 @@\n   return true;\n })\n \n+(define_predicate \"nonzero_shift_count_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 1, GET_MODE_BITSIZE (mode) - 1)\")))\n+\n ;;  Return true if OP a valid operand for the LARL instruction.\n \n (define_predicate \"larl_operand\""}, {"sha": "a494ba22893760f6fe66fa139140f3d0fce04c3f", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e356efefb29718ef217149c0df76fcb4ac08a/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e356efefb29718ef217149c0df76fcb4ac08a/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=1a2e356efefb29718ef217149c0df76fcb4ac08a", "patch": "@@ -109,5 +109,6 @@ extern bool s390_legitimate_address_without_index_p (rtx);\n extern bool s390_decompose_shift_count (rtx, rtx *, HOST_WIDE_INT *);\n extern int s390_branch_condition_mask (rtx);\n extern int s390_compare_and_branch_condition_mask (rtx);\n+extern bool s390_extzv_shift_ok (int, int, unsigned HOST_WIDE_INT);\n \n #endif /* RTX_CODE */"}, {"sha": "2edc8ab78f2e848a2cbbf3a9829049c27925bc46", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e356efefb29718ef217149c0df76fcb4ac08a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e356efefb29718ef217149c0df76fcb4ac08a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=1a2e356efefb29718ef217149c0df76fcb4ac08a", "patch": "@@ -1347,6 +1347,24 @@ s390_contiguous_bitmask_p (unsigned HOST_WIDE_INT in, int size,\n   return true;\n }\n \n+/* Check whether a rotate of ROTL followed by an AND of CONTIG is\n+   equivalent to a shift followed by the AND.  In particular, CONTIG\n+   should not overlap the (rotated) bit 0/bit 63 gap.  Negative values\n+   for ROTL indicate a rotate to the right.  */\n+\n+bool\n+s390_extzv_shift_ok (int bitsize, int rotl, unsigned HOST_WIDE_INT contig)\n+{\n+  int pos, len;\n+  bool ok;\n+\n+  ok = s390_contiguous_bitmask_p (contig, bitsize, &pos, &len);\n+  gcc_assert (ok);\n+\n+  return ((rotl >= 0 && rotl <= pos)\n+\t  || (rotl < 0 && -rotl <= bitsize - len - pos));\n+}\n+\n /* Check whether we can (and want to) split a double-word\n    move in mode MODE from SRC to DST into two single-word\n    moves, moving the subword FIRST_SUBWORD first.  */"}, {"sha": "f32004c328c4ae457990e7a051c3d277e5126bc5", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 86, "deletions": 8, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e356efefb29718ef217149c0df76fcb4ac08a/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e356efefb29718ef217149c0df76fcb4ac08a/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=1a2e356efefb29718ef217149c0df76fcb4ac08a", "patch": "@@ -3307,15 +3307,64 @@\n   [(set_attr \"op_type\" \"RS,RSY\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n+;\n+; extv instruction patterns\n+;\n+\n+; FIXME: This expander needs to be converted from DI to GPR as well\n+; after resolving some issues with it.\n+\n+(define_expand \"extzv\"\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (zero_extract:DI\n+         (match_operand:DI 1 \"register_operand\" \"d\")\n+         (match_operand 2 \"const_int_operand\" \"\")   ; size\n+         (match_operand 3 \"const_int_operand\" \"\"))) ; start\n+     (clobber (reg:CC CC_REGNUM))])]\n+  \"TARGET_Z10\"\n+{\n+  /* Starting with zEC12 there is risbgn not clobbering CC.  */\n+  if (TARGET_ZEC12)\n+    {\n+      emit_move_insn (operands[0],\n+                    gen_rtx_ZERO_EXTRACT (DImode,\n+                                          operands[1],\n+                                          operands[2],\n+                                          operands[3]));\n+      DONE;\n+    }\n+})\n \n-(define_insn_and_split \"*extzv<mode>\"\n+(define_insn \"*extzv<mode>_zEC12\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+      (zero_extract:GPR\n+        (match_operand:GPR 1 \"register_operand\" \"d\")\n+        (match_operand 2 \"const_int_operand\" \"\")   ; size\n+        (match_operand 3 \"const_int_operand\" \"\")))] ; start]\n+  \"TARGET_ZEC12\"\n+  \"risbgn\\t%0,%1,64-%2,128+63,<bitsize>+%3+%2\" ; dst, src, start, end, shift\n+  [(set_attr \"op_type\" \"RIE\")])\n+\n+(define_insn \"*extzv<mode>_z10\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+      (zero_extract:GPR\n+       (match_operand:GPR 1 \"register_operand\" \"d\")\n+       (match_operand 2 \"const_int_operand\" \"\")   ; size\n+       (match_operand 3 \"const_int_operand\" \"\"))) ; start\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_Z10\"\n+  \"risbg\\t%0,%1,64-%2,128+63,<bitsize>+%3+%2\" ; dst, src, start, end, shift\n+  [(set_attr \"op_type\" \"RIE\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n+\n+(define_insn_and_split \"*pre_z10_extzv<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n \t(zero_extract:GPR (match_operand:QI 1 \"s_operand\" \"QS\")\n-\t\t          (match_operand 2 \"const_int_operand\" \"n\")\n+\t\t          (match_operand 2 \"nonzero_shift_count_operand\" \"\")\n \t\t          (const_int 0)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"INTVAL (operands[2]) > 0\n-   && INTVAL (operands[2]) <= GET_MODE_BITSIZE (SImode)\"\n+  \"!TARGET_Z10\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel\n@@ -3333,14 +3382,13 @@\n   operands[3] = GEN_INT (mask);\n })\n \n-(define_insn_and_split \"*extv<mode>\"\n+(define_insn_and_split \"*pre_z10_extv<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n \t(sign_extract:GPR (match_operand:QI 1 \"s_operand\" \"QS\")\n-\t\t          (match_operand 2 \"const_int_operand\" \"n\")\n+\t\t          (match_operand 2 \"nonzero_shift_count_operand\" \"\")\n \t\t          (const_int 0)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"INTVAL (operands[2]) > 0\n-   && INTVAL (operands[2]) <= GET_MODE_BITSIZE (SImode)\"\n+  \"\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel\n@@ -6067,6 +6115,36 @@\n      (clobber (reg:CC CC_REGNUM))])]\n   \"s390_narrow_logical_operator (AND, &operands[0], &operands[1]);\")\n \n+;; These two are what combine generates for (ashift (zero_extract)).\n+(define_insn \"*extzv_<mode>_srl\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(and:GPR (lshiftrt:GPR\n+\t\t   (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t   (match_operand:GPR 2 \"nonzero_shift_count_operand\" \"\"))\n+\t\t(match_operand:GPR 3 \"contiguous_bitmask_operand\" \"\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_Z10\n+   /* Note that even for the SImode pattern, the rotate is always DImode.  */\n+   && s390_extzv_shift_ok (<bitsize>, -INTVAL (operands[2]),\n+\t\t\t   INTVAL (operands[3]))\"\n+  \"risbg\\t%0,%1,%<bfstart>3,128+%<bfend>3,64-%2\"\n+  [(set_attr \"op_type\" \"RIE\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n+\n+(define_insn \"*extzv_<mode>_sll\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(and:GPR (ashift:GPR\n+\t\t  (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t  (match_operand:GPR 2 \"nonzero_shift_count_operand\" \"\"))\n+\t\t(match_operand:GPR 3 \"contiguous_bitmask_operand\" \"\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_Z10\n+   && s390_extzv_shift_ok (<bitsize>, INTVAL (operands[2]),\n+\t\t\t   INTVAL (operands[3]))\"\n+  \"risbg\\t%0,%1,%<bfstart>3,128+%<bfend>3,%2\"\n+  [(set_attr \"op_type\" \"RIE\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n+\n \n ;\n ; andsi3 instruction pattern(s)."}]}