{"sha": "428642b132a4f2ce6c368398ec7f2ff307f33f8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI4NjQyYjEzMmE0ZjJjZTZjMzY4Mzk4ZWM3ZjJmZjMwN2YzM2Y4YQ==", "commit": {"author": {"name": "Matt Thomas", "email": "matt@3am-software.com", "date": "2019-07-31T14:11:16Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-07-31T14:11:16Z"}, "message": "config.gcc (hppa*-*-netbsd*): New target.\n\ngcc/ChangeLog:\n\t* config.gcc (hppa*-*-netbsd*): New target.\n\t* config/pa/pa-netbsd.h: New file.\n\t* config/pa/pa32-netbsd.h: New file.\n\nlibgcc/ChangeLog:\n\t* config.host (hppa*-*-netbsd*): New case.\n\t* config/pa/t-netbsd: New file.\n\n\nCo-Authored-By: Matthew Green <mrg@eterna.com.au>\nCo-Authored-By: Maya Rashish <coypu@sdf.org>\nCo-Authored-By: Nick Hudson <nick@nthcliff.demon.co.uk>\n\nFrom-SVN: r273933", "tree": {"sha": "ee3b652ae811af471397c011ef96a7d3826015c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee3b652ae811af471397c011ef96a7d3826015c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/428642b132a4f2ce6c368398ec7f2ff307f33f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428642b132a4f2ce6c368398ec7f2ff307f33f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/428642b132a4f2ce6c368398ec7f2ff307f33f8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428642b132a4f2ce6c368398ec7f2ff307f33f8a/comments", "author": null, "committer": null, "parents": [{"sha": "538e4cdc15fdfc06f2a54f1a92bc996ec99cb528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/538e4cdc15fdfc06f2a54f1a92bc996ec99cb528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/538e4cdc15fdfc06f2a54f1a92bc996ec99cb528"}], "stats": {"total": 211, "additions": 211, "deletions": 0}, "files": [{"sha": "812465757c0de2bf3d8feda0adbdfe5d4e3fe477", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428642b132a4f2ce6c368398ec7f2ff307f33f8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428642b132a4f2ce6c368398ec7f2ff307f33f8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=428642b132a4f2ce6c368398ec7f2ff307f33f8a", "patch": "@@ -1,3 +1,12 @@\n+2019-07-31  Matt Thomas  <matt@3am-software.com>\n+\t    Nick Hudson <nick@nthcliff.demon.co.uk>\n+\t    Matthew Green <mrg@eterna.com.au>\n+\t    Maya Rashish <coypu@sdf.org>\n+\n+\t* config.gcc (hppa*-*-netbsd*): New target.\n+\t* config/pa/pa-netbsd.h: New file.\n+\t* config/pa/pa32-netbsd.h: New file.\n+\n 2019-07-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/91201"}, {"sha": "291e2881f966e1a75693e79eec8b9f904b4307db", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428642b132a4f2ce6c368398ec7f2ff307f33f8a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428642b132a4f2ce6c368398ec7f2ff307f33f8a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=428642b132a4f2ce6c368398ec7f2ff307f33f8a", "patch": "@@ -1522,6 +1522,14 @@ hppa*-*-openbsd*)\n \tgas=yes\n \tgnu_ld=yes\n \t;;\n+hppa*-*-netbsd*)\n+\ttarget_cpu_default=\"MASK_PA_11|MASK_NO_SPACE_REGS\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h ${nbsd_tm_file} \\\n+\t\t pa/pa-netbsd.h pa/pa32-regs.h pa/pa32-netbsd.h\"\n+\ttmake_file=\"${tmake_file}\"\n+\ttm_defines=\"${tm_defines} CHAR_FAST8=1 SHORT_FAST16=1\"\n+\textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt\"\n+\t;;\n hppa[12]*-*-hpux10*)\n \tcase ${target} in\n \thppa1.1-*-* | hppa2*-*-*)"}, {"sha": "af07444bc1c92267c33dfbbebf9378cad49cebad", "filename": "gcc/config/pa/pa-netbsd.h", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428642b132a4f2ce6c368398ec7f2ff307f33f8a/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428642b132a4f2ce6c368398ec7f2ff307f33f8a/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h?ref=428642b132a4f2ce6c368398ec7f2ff307f33f8a", "patch": "@@ -0,0 +1,137 @@\n+/* Definitions for PA_RISC with ELF format\n+   Copyright (C) 1999-2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tNETBSD_OS_CPP_BUILTINS_ELF();\t\\\n+\tbuiltin_assert (\"machine=bigendian\");\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC NETBSD_CPP_SPEC\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \\\n+  \"%{v:-V} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*}\"\n+\n+#undef EXTRA_SPECS\n+#define EXTRA_SPECS NETBSD_SUBTARGET_EXTRA_SPECS\n+#undef SUBTARGET_EXTRA_SPECS\n+\n+#define NETBSD_ENTRY_POINT \"__start\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC NETBSD_LINK_SPEC_ELF\n+\n+/* NetBSD profiling functions don't need gcc to allocate counters.  */\n+#define NO_DEFERRED_PROFILE_COUNTERS 1\n+\n+/* Define the strings used for the special svr4 .type and .size directives.\n+   These strings generally do not vary from one system running svr4 to\n+   another, but if a given system (e.g. m88k running svr) needs to use\n+   different pseudo-op names for these, they may be overridden in the\n+   file which includes this one.  */\n+\n+#undef STRING_ASM_OP\n+#define STRING_ASM_OP   \"\\t.stringz\\t\"\n+\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n+#define BSS_SECTION_ASM_OP \"\\t.section\\t.bss\"\n+\n+#define TARGET_ASM_FILE_START pa_linux_file_start\n+\n+/* We want local labels to start with period if made with asm_fprintf.  */\n+#undef LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX \".\"\n+\n+/* Define these to generate the Linux/ELF/SysV style of internal\n+   labels all the time - i.e. to be compatible with\n+   ASM_GENERATE_INTERNAL_LABEL in <elfos.h>.  Compare these with the\n+   ones in pa.h and note the lack of dollar signs in these.  FIXME:\n+   shouldn't we fix pa.h to use ASM_GENERATE_INTERNAL_LABEL instead? */\n+\n+#undef ASM_OUTPUT_ADDR_VEC_ELT\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n+  fprintf (FILE, \"\\t.word .L%d\\n\", VALUE)\n+\n+#undef ASM_OUTPUT_ADDR_DIFF_ELT\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n+  fprintf (FILE, \"\\t.word .L%d-.L%d\\n\", VALUE, REL)\n+\n+/* Use the default.  */\n+#undef ASM_OUTPUT_LABEL\n+\n+/* NOTE: (*targetm.asm_out.internal_label)() is defined for us by elfos.h, and\n+   does what we want (i.e. uses colons).  It must be compatible with\n+   ASM_GENERATE_INTERNAL_LABEL(), so do not define it here.  */\n+\n+/* Use the default.  */\n+#undef ASM_OUTPUT_INTERNAL_LABEL\n+\n+/* Use the default.  */\n+#undef TARGET_ASM_GLOBALIZE_LABEL\n+/* Globalizing directive for a label.  */\n+#define GLOBAL_ASM_OP \".globl \"\n+\n+/* FIXME: Hacked from the <elfos.h> one so that we avoid multiple\n+   labels in a function declaration (since pa.c seems determined to do\n+   it differently)  */\n+\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* As well as globalizing the label, we need to encode the label\n+   to ensure a plabel is generated in an indirect call.  */\n+\n+#undef ASM_OUTPUT_EXTERNAL_LIBCALL\n+#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)  \t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (!FUNCTION_NAME_P (XSTR (FUN, 0)))\t\t\t\\\n+\tpa_encode_label (FUN);\t\t\t\t\t\\\n+      (*targetm.asm_out.globalize_label) (FILE, XSTR (FUN, 0));\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* NetBSD always uses gas.  */\n+#undef TARGET_GAS\n+#define TARGET_GAS 1\n+\n+/* Use long int for these type to make hppa64 compatibility easier.  */\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"long unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+#if 0\n+#undef TARGET_SYNC_LIBCALL\n+#define TARGET_SYNC_LIBCALL 1\n+#endif"}, {"sha": "43a435c82d2602a6d9e4d993f0e9458a5d1aef99", "filename": "gcc/config/pa/pa32-netbsd.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428642b132a4f2ce6c368398ec7f2ff307f33f8a/gcc%2Fconfig%2Fpa%2Fpa32-netbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428642b132a4f2ce6c368398ec7f2ff307f33f8a/gcc%2Fconfig%2Fpa%2Fpa32-netbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-netbsd.h?ref=428642b132a4f2ce6c368398ec7f2ff307f33f8a", "patch": "@@ -0,0 +1,37 @@\n+/* Definitions for PA_RISC with ELF-32 format\n+   Copyright (C) 2000-2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Turn off various SOM crap we don't want.  */\n+#undef TARGET_ELF32\n+#define TARGET_ELF32 1\n+\n+/* The libcall __canonicalize_funcptr_for_compare is referenced in\n+   crtend.o and the reference isn't resolved in objects that don't\n+   compare function pointers.  Thus, we need to play games to provide\n+   a reference in crtbegin.o.  The rest of the define is the same\n+   as that in crtstuff.c  */\n+#define CTOR_LIST_BEGIN \\\n+  asm (\".type __canonicalize_funcptr_for_compare,@function\\n\"\t\t\\\n+\"\t.text\\n\"\t\t\t\t\t\t\t\\\n+\"\t.word __canonicalize_funcptr_for_compare-$PIC_pcrel$0\");\t\\\n+  STATIC func_ptr __CTOR_LIST__[1]\t\t\t\t\t\\\n+    __attribute__ ((__used__, section(\".ctors\"),\t\t\t\\\n+\t\t    aligned(sizeof(func_ptr))))\t\t\t\t\\\n+    = { (func_ptr) (-1) }"}, {"sha": "33b6fa874fc4239aee06cc1f031797a0f7824320", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428642b132a4f2ce6c368398ec7f2ff307f33f8a/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428642b132a4f2ce6c368398ec7f2ff307f33f8a/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=428642b132a4f2ce6c368398ec7f2ff307f33f8a", "patch": "@@ -1,3 +1,11 @@\n+2019-07-31  Matt Thomas  <matt@3am-software.com>\n+\t    Nick Hudson <nick@nthcliff.demon.co.uk>\n+\t    Matthew Green <mrg@eterna.com.au>\n+\t    Maya Rashish <coypu@sdf.org>\n+\n+\t* config.host (hppa*-*-netbsd*): New case.\n+\t* config/pa/t-netbsd: New file.\n+\n 2019-07-31  Joel Hutton  <Joel.Hutton@arm.com>\n \n \t* config/arm/cmse.c (cmse_check_address_range): Add"}, {"sha": "503ebb6be20cc2cd382fd5f8e21769acdb3e7d0c", "filename": "libgcc/config.host", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428642b132a4f2ce6c368398ec7f2ff307f33f8a/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428642b132a4f2ce6c368398ec7f2ff307f33f8a/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=428642b132a4f2ce6c368398ec7f2ff307f33f8a", "patch": "@@ -634,6 +634,9 @@ hppa[12]*-*-hpux11*)\n hppa*-*-openbsd*)\n \ttmake_file=\"$tmake_file pa/t-openbsd\"\n \t;;\n+hppa*-*-netbsd*)\n+\ttmake_file=\"$tmake_file pa/t-netbsd\"\n+\t;;\n i[34567]86-*-darwin*)\n \ttmake_file=\"$tmake_file i386/t-crtpc t-crtfm i386/t-msabi\"\n \ttm_file=\"$tm_file i386/darwin-lib.h\""}, {"sha": "8b99068ce429c7979c0e41f76e18ee29fc4daec0", "filename": "libgcc/config/pa/t-netbsd", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428642b132a4f2ce6c368398ec7f2ff307f33f8a/libgcc%2Fconfig%2Fpa%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428642b132a4f2ce6c368398ec7f2ff307f33f8a/libgcc%2Fconfig%2Fpa%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Ft-netbsd?ref=428642b132a4f2ce6c368398ec7f2ff307f33f8a", "patch": "@@ -0,0 +1,9 @@\n+#Plug millicode routines into libgcc.a  We want these on both native and\n+#cross compiles.  We use the \"64-bit\" routines because the \"32-bit\" code\n+#is broken for certain corner cases.\n+LIB1ASMSRC = pa/milli64.S\n+LIB1ASMFUNCS = _divI _divU _remI _remU _div_const _mulI _dyncall\n+\n+HOST_LIBGCC2_CFLAGS += -DELF=1 -DLINUX=1\n+\n+LIB2ADD = $(srcdir)/config/pa/fptr.c"}]}