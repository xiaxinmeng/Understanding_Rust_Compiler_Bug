{"sha": "931977d9191b542c356d2dfa3258c8d09a6b8498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxOTc3ZDkxOTFiNTQyYzM1NmQyZGZhMzI1OGM4ZDA5YTZiODQ5OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-12-16T19:59:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-12-16T19:59:56Z"}, "message": "hwint.c (abs_hwi, absu_hwi): Move to ...\n\n\n\t* hwint.c (abs_hwi, absu_hwi): Move to ...\n\t* hwint.h (abs_hwi, absu_hwi): ... here; make inline.\n\nFrom-SVN: r218791", "tree": {"sha": "7517b4a73e11c8c28d9049721a6ee6d367b9c7ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7517b4a73e11c8c28d9049721a6ee6d367b9c7ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/931977d9191b542c356d2dfa3258c8d09a6b8498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931977d9191b542c356d2dfa3258c8d09a6b8498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931977d9191b542c356d2dfa3258c8d09a6b8498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931977d9191b542c356d2dfa3258c8d09a6b8498/comments", "author": null, "committer": null, "parents": [{"sha": "203c7ebffdd7042d9b08d303594eaeb9887ff503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203c7ebffdd7042d9b08d303594eaeb9887ff503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/203c7ebffdd7042d9b08d303594eaeb9887ff503"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "b8009b181906ea65fbf64ba857f253e9eb4d718e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931977d9191b542c356d2dfa3258c8d09a6b8498/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931977d9191b542c356d2dfa3258c8d09a6b8498/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=931977d9191b542c356d2dfa3258c8d09a6b8498", "patch": "@@ -1,3 +1,8 @@\n+2014-12-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* hwint.c (abs_hwi, absu_hwi): Move to ...\n+\t* hwint.h (abs_hwi, absu_hwi): ... here; make inline.\n+\n 2014-12-16  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/64309"}, {"sha": "405118e124ab77f0710ddfcdb729badffdfb4af6", "filename": "gcc/hwint.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931977d9191b542c356d2dfa3258c8d09a6b8498/gcc%2Fhwint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931977d9191b542c356d2dfa3258c8d09a6b8498/gcc%2Fhwint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.c?ref=931977d9191b542c356d2dfa3258c8d09a6b8498", "patch": "@@ -124,22 +124,6 @@ popcount_hwi (unsigned HOST_WIDE_INT x)\n \n #endif /* GCC_VERSION < 3004 */\n \n-/* Compute the absolute value of X.  */\n-\n-HOST_WIDE_INT\n-abs_hwi (HOST_WIDE_INT x)\n-{\n-  gcc_checking_assert (x != HOST_WIDE_INT_MIN);\n-  return x >= 0 ? x : -x;\n-}\n-\n-/* Compute the absolute value of X as an unsigned type.  */\n-\n-unsigned HOST_WIDE_INT\n-absu_hwi (HOST_WIDE_INT x)\n-{\n-  return x >= 0 ? (unsigned HOST_WIDE_INT)x : -(unsigned HOST_WIDE_INT)x;\n-}\n \n /* Compute the greatest common divisor of two numbers A and B using\n    Euclid's algorithm.  */"}, {"sha": "8e1c8f5ae77f7e64701372a9cbf04b88deadf557", "filename": "gcc/hwint.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931977d9191b542c356d2dfa3258c8d09a6b8498/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931977d9191b542c356d2dfa3258c8d09a6b8498/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=931977d9191b542c356d2dfa3258c8d09a6b8498", "patch": "@@ -264,4 +264,21 @@ zext_hwi (unsigned HOST_WIDE_INT src, unsigned int prec)\n     }\n }\n \n+/* Compute the absolute value of X.  */\n+\n+inline HOST_WIDE_INT\n+abs_hwi (HOST_WIDE_INT x)\n+{\n+  gcc_checking_assert (x != HOST_WIDE_INT_MIN);\n+  return x >= 0 ? x : -x;\n+}\n+\n+/* Compute the absolute value of X as an unsigned type.  */\n+\n+inline unsigned HOST_WIDE_INT\n+absu_hwi (HOST_WIDE_INT x)\n+{\n+  return x >= 0 ? (unsigned HOST_WIDE_INT)x : -(unsigned HOST_WIDE_INT)x;\n+}\n+\n #endif /* ! GCC_HWINT_H */"}]}