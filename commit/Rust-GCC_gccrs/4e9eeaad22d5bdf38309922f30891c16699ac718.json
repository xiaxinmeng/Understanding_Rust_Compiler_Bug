{"sha": "4e9eeaad22d5bdf38309922f30891c16699ac718", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5ZWVhYWQyMmQ1YmRmMzgzMDk5MjJmMzA4OTFjMTY2OTlhYzcxOA==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-08-17T01:34:14Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-08-17T01:34:14Z"}, "message": "mips.exp: Add terminology section to comment at the top of the file.\n\n\t* gcc.target/mips/mips.exp: Add terminology section to comment\n\tat the top of the file.  Fix typos.\n\nFrom-SVN: r150821", "tree": {"sha": "20ff64d84f99d7bd53d6dd647039b02c0ba198c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20ff64d84f99d7bd53d6dd647039b02c0ba198c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e9eeaad22d5bdf38309922f30891c16699ac718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9eeaad22d5bdf38309922f30891c16699ac718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9eeaad22d5bdf38309922f30891c16699ac718", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9eeaad22d5bdf38309922f30891c16699ac718/comments", "author": null, "committer": null, "parents": [{"sha": "cd0d2becc67e419af9a6898db6b57c1a3f40e377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0d2becc67e419af9a6898db6b57c1a3f40e377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0d2becc67e419af9a6898db6b57c1a3f40e377"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "853d3f04314d93254b70cb46b8b00a9b83bf5f7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9eeaad22d5bdf38309922f30891c16699ac718/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9eeaad22d5bdf38309922f30891c16699ac718/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e9eeaad22d5bdf38309922f30891c16699ac718", "patch": "@@ -1,3 +1,8 @@\n+2009-08-16  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/mips.exp: Add terminology section to comment\n+\tat the top of the file.  Fix typos.\n+\n 2009-08-16  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/debug/dwarf2/inline1.C: New."}, {"sha": "30f9a2c9c3dc9b59c7cc0a9b666fd15189ed62af", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9eeaad22d5bdf38309922f30891c16699ac718/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9eeaad22d5bdf38309922f30891c16699ac718/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=4e9eeaad22d5bdf38309922f30891c16699ac718", "patch": "@@ -184,6 +184,35 @@\n #\n #   (6) If you need to disable processor-specific extensions use\n #\tisa=!CPU instead of forcing a generic ISA.\n+#\n+#\n+# Terminology\n+#\n+#   Option group or just group:\n+#      See comment before mips_option_groups.\n+#\n+#   Test options:\n+#      The options specified in dg-options.\n+#\n+#   Explicit options:\n+#      The options that were either passed to runtest as \"multilib\" options\n+#      (e.g. -mips4 in --target_board=mips-sim-idt/-mips4) or specified as\n+#      test options.  Note that options in parenthesis (i.e. (-mips16)) are\n+#      not explicit and can be omitted depending on the base options.\n+#\n+#   Base options:\n+#      Options that are on by default without being specified in dg-options,\n+#      e.g. -march=mips64r2 for mipsisa64r2-elf or because they've been\n+#      passed to runtest as \"multilib\" options.\n+#\n+#   Option array:\n+#      Many functions in this file work with option arrays.  These are\n+#      two-dimensional Tcl arrays where the first dimension can have three\n+#      values: option, explicit_p or test_option_p.  The second dimension is\n+#      the name of the option group.  \"option\" contains the name of the\n+#      option that is in effect from this group.  If no option is active it\n+#      contains the empty string.  The flags \"explicit_p\" and \"test_option_p\"\n+#      are set for explicit and test options.\n \n # Exit immediately if this isn't a MIPS target.\n if ![istarget mips*-*-*] {\n@@ -194,8 +223,8 @@ if ![istarget mips*-*-*] {\n load_lib gcc-dg.exp\n \n # A list of GROUP REGEXP pairs.  Each GROUP represents a logical group of\n-# options from which only option should be chosen.  REGEXP matches all the\n-# options in that group; it is implicitly wrapped in \"^(...)$\".\n+# options from which only one option should be chosen.  REGEXP matches all\n+# the options in that group; it is implicitly wrapped in \"^(...)$\".\n set mips_option_groups {\n     abi \"-mabi=.*\"\n     addressing \"addressing=.*\"\n@@ -443,16 +472,16 @@ proc mips_option { upstatus group } {\n     return $status(option,$group)\n }\n \n-# If the default options for this test run include an option in group GROUP,\n+# If the base options for this test run include an option in group GROUP,\n # return that option, otherwise return \"\".\n proc mips_original_option { group } {\n     global mips_base_options\n \n     return [mips_option mips_base_options $group]\n }\n \n-# Return true if the test described up UPSTATUS requires a specific\n-# option in group GROUP.\n+# Return true if the test described by UPSTATUS requires a specific\n+# option in group GROUP.  UPSTATUS describes the option status.\n proc mips_test_option_p { upstatus group } {\n     upvar $upstatus status\n "}]}