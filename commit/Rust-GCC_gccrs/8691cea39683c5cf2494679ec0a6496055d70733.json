{"sha": "8691cea39683c5cf2494679ec0a6496055d70733", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY5MWNlYTM5NjgzYzVjZjI0OTQ2NzllYzBhNjQ5NjA1NWQ3MDczMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-03-02T12:26:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-03-02T12:26:55Z"}, "message": "re PR target/31019 (Microoptimization of the i386 and x86_64 compilers)\n\n\tPR target/31019\n\t* config/i386/i386.h (TUNEMASK): Redefine to use ix86_tune_mask.\n\t(ARCHMASK): Define.\n\t(TARGET_CMOVE): Use ARCHMASK.\n\t(TARGET_CMPXCHG): Ditto.\n\t(TARGET_CMPXCHG8B): Ditto.\n\t(TARGET_XADD): Ditto.\n\t(TARGET_BSWAP): Ditto.\n\t* config/i386/i386.c (ix86_tune_mask): New global variable.\n\t(ix86_arch_mask): Ditto.\n\t(override_options): Initialize ix86_tune_mask and\n\tix86_arch_mask. Use ARCHMASK to clear MASK_NO_FANCY_MATH_387 in\n\ttarget_flags.\n\n\nCo-Authored-By: Michael Meissner <michael.meissner@amd.com>\n\nFrom-SVN: r122473", "tree": {"sha": "3c988aa71b3a64e4cfc533f07ae0042a388c6c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c988aa71b3a64e4cfc533f07ae0042a388c6c6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8691cea39683c5cf2494679ec0a6496055d70733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8691cea39683c5cf2494679ec0a6496055d70733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8691cea39683c5cf2494679ec0a6496055d70733", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8691cea39683c5cf2494679ec0a6496055d70733/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e2238672f5baf99c32eebc33ed85040a0e9ca98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2238672f5baf99c32eebc33ed85040a0e9ca98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e2238672f5baf99c32eebc33ed85040a0e9ca98"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "7b6870bb4b539823526c7a336ec4354362fde0a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691cea39683c5cf2494679ec0a6496055d70733/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691cea39683c5cf2494679ec0a6496055d70733/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8691cea39683c5cf2494679ec0a6496055d70733", "patch": "@@ -1,3 +1,20 @@\n+2007-03-02  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Michael Meissner  <michael.meissner@amd.com>\n+\n+\tPR target/31019\n+\t* config/i386/i386.h (TUNEMASK): Redefine to use ix86_tune_mask.\n+\t(ARCHMASK): Define.\n+\t(TARGET_CMOVE): Use ARCHMASK.\n+\t(TARGET_CMPXCHG): Ditto.\n+\t(TARGET_CMPXCHG8B): Ditto.\n+\t(TARGET_XADD): Ditto.\n+\t(TARGET_BSWAP): Ditto.\n+\t* config/i386/i386.c (ix86_tune_mask): New global variable.\n+\t(ix86_arch_mask): Ditto.\n+\t(override_options): Initialize ix86_tune_mask and\n+\tix86_arch_mask. Use ARCHMASK to clear MASK_NO_FANCY_MATH_387 in\n+\ttarget_flags.\n+\n 2007-03-02  Ben Elliston  <bje@au.ibm.com>\n \n \tPR 30992"}, {"sha": "7794017eb26e236623cfd2065d21936e05c42542", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691cea39683c5cf2494679ec0a6496055d70733/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691cea39683c5cf2494679ec0a6496055d70733/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8691cea39683c5cf2494679ec0a6496055d70733", "patch": "@@ -984,23 +984,25 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_486 (1<<PROCESSOR_I486)\n #define m_PENT (1<<PROCESSOR_PENTIUM)\n #define m_PPRO (1<<PROCESSOR_PENTIUMPRO)\n+#define m_PENT4  (1<<PROCESSOR_PENTIUM4)\n+#define m_NOCONA  (1<<PROCESSOR_NOCONA)\n+#define m_CORE2  (1<<PROCESSOR_CORE2)\n+\n #define m_GEODE  (1<<PROCESSOR_GEODE)\n-#define m_K6_GEODE  (m_K6 | m_GEODE)\n #define m_K6  (1<<PROCESSOR_K6)\n-#define m_ATHLON  (1<<PROCESSOR_ATHLON)\n-#define m_PENT4  (1<<PROCESSOR_PENTIUM4)\n+#define m_K6_GEODE  (m_K6 | m_GEODE)\n #define m_K8  (1<<PROCESSOR_K8)\n+#define m_ATHLON  (1<<PROCESSOR_ATHLON)\n #define m_ATHLON_K8  (m_K8 | m_ATHLON)\n #define m_AMDFAM10  (1<<PROCESSOR_AMDFAM10)\n-#define m_NOCONA  (1<<PROCESSOR_NOCONA)\n-#define m_CORE2  (1<<PROCESSOR_CORE2)\n+#define m_ATHLON_K8_AMDFAM10  (m_K8 | m_ATHLON | m_AMDFAM10)\n+\n #define m_GENERIC32 (1<<PROCESSOR_GENERIC32)\n #define m_GENERIC64 (1<<PROCESSOR_GENERIC64)\n-#define m_GENERIC (m_GENERIC32 | m_GENERIC64)\n-#define m_ATHLON_K8_AMDFAM10  (m_K8 | m_ATHLON | m_AMDFAM10)\n \n /* Generic instruction choice should be common subset of supported CPUs\n    (PPro/PENT4/NOCONA/CORE2/Athlon/K8).  */\n+#define m_GENERIC (m_GENERIC32 | m_GENERIC64)\n \n /* Leave is not affecting Nocona SPEC2000 results negatively, so enabling for\n    Generic64 seems like good code size tradeoff.  We can't enable it for 32bit\n@@ -1395,8 +1397,11 @@ enum fpmath_unit ix86_fpmath;\n \n /* Which cpu are we scheduling for.  */\n enum processor_type ix86_tune;\n+int ix86_tune_mask;\n+\n /* Which instruction set architecture to use.  */\n enum processor_type ix86_arch;\n+int ix86_arch_mask;\n \n /* true if sse prefetch instruction is not NOOP.  */\n int x86_prefetch_sse;\n@@ -2074,8 +2079,10 @@ override_options (void)\n     if (! strcmp (ix86_arch_string, processor_alias_table[i].name))\n       {\n \tix86_arch = processor_alias_table[i].processor;\n+\tix86_arch_mask = 1 << ix86_arch;\n \t/* Default cpu tuning to the architecture.  */\n \tix86_tune = ix86_arch;\n+\tix86_tune_mask = 1 << ix86_tune;\n \tif (processor_alias_table[i].flags & PTA_MMX\n \t    && !(target_flags_explicit & MASK_MMX))\n \t  target_flags |= MASK_MMX;\n@@ -2276,7 +2283,7 @@ override_options (void)\n \n   /* If the architecture always has an FPU, turn off NO_FANCY_MATH_387,\n      since the insns won't need emulation.  */\n-  if (x86_arch_always_fancy_math_387 & (1 << ix86_arch))\n+  if (x86_arch_always_fancy_math_387 & ARCHMASK)\n     target_flags &= ~MASK_NO_FANCY_MATH_387;\n \n   /* Likewise, if the target doesn't have a 387, or we've specified"}, {"sha": "e319b770f94c68170ceb827a5d8732e17375a7c2", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8691cea39683c5cf2494679ec0a6496055d70733/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8691cea39683c5cf2494679ec0a6496055d70733/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8691cea39683c5cf2494679ec0a6496055d70733", "patch": "@@ -179,7 +179,6 @@ extern const struct processor_costs *ix86_cost;\n #define TARGET_GENERIC (TARGET_GENERIC32 || TARGET_GENERIC64)\n #define TARGET_AMDFAM10 (ix86_tune == PROCESSOR_AMDFAM10)\n \n-#define TUNEMASK (1 << ix86_tune)\n extern const int x86_use_leave, x86_push_memory, x86_zero_extend_with_and;\n extern const int x86_use_bit_test, x86_cmove, x86_deep_branch;\n extern const int x86_branch_hints, x86_unroll_strlen;\n@@ -208,14 +207,17 @@ extern const int x86_bswap;\n extern const int x86_partial_flag_reg_stall;\n extern int x86_prefetch_sse, x86_cmpxchg16b;\n \n+#define TUNEMASK ix86_tune_mask\n+#define ARCHMASK ix86_arch_mask\n+\n #define TARGET_USE_LEAVE (x86_use_leave & TUNEMASK)\n #define TARGET_PUSH_MEMORY (x86_push_memory & TUNEMASK)\n #define TARGET_ZERO_EXTEND_WITH_AND (x86_zero_extend_with_and & TUNEMASK)\n #define TARGET_USE_BIT_TEST (x86_use_bit_test & TUNEMASK)\n #define TARGET_UNROLL_STRLEN (x86_unroll_strlen & TUNEMASK)\n /* For sane SSE instruction set generation we need fcomi instruction.  It is\n    safe to enable all CMOVE instructions.  */\n-#define TARGET_CMOVE ((x86_cmove & (1 << ix86_arch)) || TARGET_SSE)\n+#define TARGET_CMOVE ((x86_cmove & ARCHMASK) || TARGET_SSE)\n #define TARGET_FISTTP (TARGET_SSE3 && TARGET_80387)\n #define TARGET_DEEP_BRANCH_PREDICTION (x86_deep_branch & TUNEMASK)\n #define TARGET_BRANCH_PREDICTION_HINTS (x86_branch_hints & TUNEMASK)\n@@ -276,11 +278,11 @@ extern int x86_prefetch_sse, x86_cmpxchg16b;\n #define TARGET_ANY_GNU_TLS (TARGET_GNU_TLS || TARGET_GNU2_TLS)\n #define TARGET_SUN_TLS (ix86_tls_dialect == TLS_DIALECT_SUN)\n \n-#define TARGET_CMPXCHG (x86_cmpxchg & (1 << ix86_arch))\n-#define TARGET_CMPXCHG8B (x86_cmpxchg8b & (1 << ix86_arch))\n+#define TARGET_CMPXCHG (x86_cmpxchg & ARCHMASK)\n+#define TARGET_CMPXCHG8B (x86_cmpxchg8b & ARCHMASK)\n #define TARGET_CMPXCHG16B (x86_cmpxchg16b)\n-#define TARGET_XADD (x86_xadd & (1 << ix86_arch))\n-#define TARGET_BSWAP (x86_bswap & (1 << ix86_arch))\n+#define TARGET_XADD (x86_xadd & ARCHMASK)\n+#define TARGET_BSWAP (x86_bswap & ARCHMASK)\n \n #ifndef TARGET_64BIT_DEFAULT\n #define TARGET_64BIT_DEFAULT 0\n@@ -2130,7 +2132,10 @@ enum processor_type\n };\n \n extern enum processor_type ix86_tune;\n+extern int ix86_tune_mask;\n+\n extern enum processor_type ix86_arch;\n+extern int ix86_arch_mask;\n \n enum fpmath_unit\n {"}]}