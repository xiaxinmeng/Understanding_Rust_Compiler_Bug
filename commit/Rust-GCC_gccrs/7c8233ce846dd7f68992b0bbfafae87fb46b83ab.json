{"sha": "7c8233ce846dd7f68992b0bbfafae87fb46b83ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4MjMzY2U4NDZkZDdmNjg5OTJiMGJiZmFmYWU4N2ZiNDZiODNhYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-09-13T15:13:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-09-13T15:13:24Z"}, "message": "re PR c++/53836 (ICE: unexpected expression of kind template_parm_index)\n\n\tPR c++/53836\n\t* pt.c (value_dependent_expression_p): A TREE_LIST initializer must\n\tbe dependent.\n\nFrom-SVN: r191261", "tree": {"sha": "484ac0663eeec9388f8a32a415395efdffee7f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/484ac0663eeec9388f8a32a415395efdffee7f76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c8233ce846dd7f68992b0bbfafae87fb46b83ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8233ce846dd7f68992b0bbfafae87fb46b83ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c8233ce846dd7f68992b0bbfafae87fb46b83ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8233ce846dd7f68992b0bbfafae87fb46b83ab/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c915f8bca422b3e7f76c9e2e87667c516627c728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c915f8bca422b3e7f76c9e2e87667c516627c728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c915f8bca422b3e7f76c9e2e87667c516627c728"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "b7d8a1d43d5e5e16e80e411c87128d539af0249e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8233ce846dd7f68992b0bbfafae87fb46b83ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8233ce846dd7f68992b0bbfafae87fb46b83ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7c8233ce846dd7f68992b0bbfafae87fb46b83ab", "patch": "@@ -1,3 +1,9 @@\n+2012-09-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53836\n+\t* pt.c (value_dependent_expression_p): A TREE_LIST initializer must\n+\tbe dependent.\n+\n 2012-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54541"}, {"sha": "4cf2ed8917bd50102a050821375bd8ebb50f7c99", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8233ce846dd7f68992b0bbfafae87fb46b83ab/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8233ce846dd7f68992b0bbfafae87fb46b83ab/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7c8233ce846dd7f68992b0bbfafae87fb46b83ab", "patch": "@@ -19199,10 +19199,15 @@ value_dependent_expression_p (tree expression)\n \n     case VAR_DECL:\n        /* A constant with literal type and is initialized\n-\t  with an expression that is value-dependent.  */\n+\t  with an expression that is value-dependent.\n+\n+          Note that a non-dependent parenthesized initializer will have\n+          already been replaced with its constant value, so if we see\n+          a TREE_LIST it must be dependent.  */\n       if (DECL_INITIAL (expression)\n \t  && decl_constant_var_p (expression)\n-\t  && value_dependent_expression_p (DECL_INITIAL (expression)))\n+\t  && (TREE_CODE (DECL_INITIAL (expression)) == TREE_LIST\n+\t      || value_dependent_expression_p (DECL_INITIAL (expression))))\n \treturn true;\n       return false;\n "}, {"sha": "debdd885c3039c89ce8093ab747b782b1f2b0f5f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8233ce846dd7f68992b0bbfafae87fb46b83ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8233ce846dd7f68992b0bbfafae87fb46b83ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c8233ce846dd7f68992b0bbfafae87fb46b83ab", "patch": "@@ -1,3 +1,8 @@\n+2012-09-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53836\n+\t* g++.dg/template/init10.C: New.\n+\n 2012-09-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/54556"}, {"sha": "1480622d3651700071c0c358725f28d06b13eea4", "filename": "gcc/testsuite/g++.dg/template/init10.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8233ce846dd7f68992b0bbfafae87fb46b83ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finit10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8233ce846dd7f68992b0bbfafae87fb46b83ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finit10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finit10.C?ref=7c8233ce846dd7f68992b0bbfafae87fb46b83ab", "patch": "@@ -0,0 +1,15 @@\n+template <int N>\n+struct A { };\n+\n+template <int Q>\n+void g()\n+{\n+    const int M ( Q );\n+\n+    A<M> a;\n+}\n+\n+void h()\n+{\n+    g<3>();\n+}"}]}