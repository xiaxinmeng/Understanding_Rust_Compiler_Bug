{"sha": "894bec688558a3f8d9a5398df66adb4d45f6fa26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0YmVjNjg4NTU4YTNmOGQ5YTUzOThkZjY2YWRiNGQ0NWY2ZmEyNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-04-02T16:51:27Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-04-02T16:51:27Z"}, "message": "re PR c++/65642 ([C++11] GCC rejects valid constant expression)\n\n\tPR c++/65642\n\t* constexpr.c (cxx_eval_pointer_plus_expression): Call\n\tcxx_eval_constant_expression on the first operand.\n\n\t* g++.dg/cpp0x/constexpr-fold1.C: New test.\n\t* g++.dg/cpp0x/constexpr-fold2.C: New test.\n\nFrom-SVN: r221843", "tree": {"sha": "2c4f955abf98010c78d3a09f5436b8018d6dbdfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c4f955abf98010c78d3a09f5436b8018d6dbdfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/894bec688558a3f8d9a5398df66adb4d45f6fa26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894bec688558a3f8d9a5398df66adb4d45f6fa26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894bec688558a3f8d9a5398df66adb4d45f6fa26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894bec688558a3f8d9a5398df66adb4d45f6fa26/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37978db4a756f65b2e787837b273f773ec4aeae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37978db4a756f65b2e787837b273f773ec4aeae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37978db4a756f65b2e787837b273f773ec4aeae7"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "ca048aaaefbe13d8d64a792280ea8da4d39cc57b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894bec688558a3f8d9a5398df66adb4d45f6fa26/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894bec688558a3f8d9a5398df66adb4d45f6fa26/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=894bec688558a3f8d9a5398df66adb4d45f6fa26", "patch": "@@ -1,3 +1,9 @@\n+2015-04-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/65642\n+\t* constexpr.c (cxx_eval_pointer_plus_expression): Call\n+\tcxx_eval_constant_expression on the first operand.\n+\n 2015-04-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/65625"}, {"sha": "f5be8dfb46c61fed70d4b5c35c77b44133dd7f70", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894bec688558a3f8d9a5398df66adb4d45f6fa26/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894bec688558a3f8d9a5398df66adb4d45f6fa26/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=894bec688558a3f8d9a5398df66adb4d45f6fa26", "patch": "@@ -2933,6 +2933,9 @@ cxx_eval_pointer_plus_expression (const constexpr_ctx *ctx, tree t,\n   tree op01 = TREE_OPERAND (t, 1);\n   location_t loc = EXPR_LOCATION (t);\n \n+  op00 = cxx_eval_constant_expression (ctx, op00, lval,\n+\t\t\t\t       non_constant_p, overflow_p);\n+\n   STRIP_NOPS (op00);\n   if (TREE_CODE (op00) != ADDR_EXPR)\n     return NULL_TREE;"}, {"sha": "9b99c1892578e19dba44a4f12a76cbd3412d1b04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894bec688558a3f8d9a5398df66adb4d45f6fa26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894bec688558a3f8d9a5398df66adb4d45f6fa26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=894bec688558a3f8d9a5398df66adb4d45f6fa26", "patch": "@@ -1,3 +1,9 @@\n+2015-04-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/65642\n+\t* g++.dg/cpp0x/constexpr-fold1.C: New test.\n+\t* g++.dg/cpp0x/constexpr-fold2.C: New test.\n+\n 2015-04-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/61977"}, {"sha": "414a0dacf995132620b915129d6dfa5080c72074", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-fold1.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894bec688558a3f8d9a5398df66adb4d45f6fa26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fold1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894bec688558a3f8d9a5398df66adb4d45f6fa26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fold1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fold1.C?ref=894bec688558a3f8d9a5398df66adb4d45f6fa26", "patch": "@@ -0,0 +1,65 @@\n+// PR c++/65642\n+// { dg-do compile { target c++11 } }\n+\n+// Check we're able to evaluate these.\n+\n+#define SA(X) static_assert((X),#X)\n+\n+constexpr char s[] = \"abc\";\n+constexpr int t[] = { 'a', 'b', 'c', '\\0' };\n+\n+constexpr char\n+fn1 (const char *p)\n+{\n+  return *(p + 1);\n+}\n+\n+constexpr char\n+fn2 (const char *p)\n+{\n+  return p[1];\n+}\n+\n+constexpr int\n+fn3 (const int *p)\n+{\n+  return *(p + 1);\n+}\n+\n+constexpr int\n+fn4 (const int *p)\n+{\n+  return p[1];\n+}\n+\n+constexpr auto c1 = fn1 (&s[0]);\n+constexpr auto c2 = fn1 (&s[1]);\n+constexpr auto c3 = fn1 (&s[2]);\n+\n+SA (c1 == 'b');\n+SA (c2 == 'c');\n+SA (c3 == '\\0');\n+\n+constexpr auto d1 = fn2 (&s[0]);\n+constexpr auto d2 = fn2 (&s[1]);\n+constexpr auto d3 = fn2 (&s[2]);\n+\n+SA (d1 == 'b');\n+SA (d2 == 'c');\n+SA (d3 == '\\0');\n+\n+constexpr auto e1 = fn3 (&t[0]);\n+constexpr auto e2 = fn3 (&t[1]);\n+constexpr auto e3 = fn3 (&t[2]);\n+\n+SA (e1 == 'b');\n+SA (e2 == 'c');\n+SA (e3 == '\\0');\n+\n+constexpr auto f1 = fn4 (&t[0]);\n+constexpr auto f2 = fn4 (&t[1]);\n+constexpr auto f3 = fn4 (&t[2]);\n+\n+SA (f1 == 'b');\n+SA (f2 == 'c');\n+SA (f3 == '\\0');"}, {"sha": "98aca2a2ce04f75fde50f35db3c21d7746e9c6cf", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-fold2.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894bec688558a3f8d9a5398df66adb4d45f6fa26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fold2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894bec688558a3f8d9a5398df66adb4d45f6fa26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fold2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fold2.C?ref=894bec688558a3f8d9a5398df66adb4d45f6fa26", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/65642\n+// { dg-do compile { target c++11 } }\n+\n+#define SA(X) static_assert((X),#X)\n+\n+constexpr char s[] = \"abc\";\n+\n+constexpr bool\n+cmp (char const *a, char const *b)\n+{\n+  return a == b;\n+}\n+\n+constexpr bool\n+fn1 (const char *s)\n+{\n+  return cmp (s, s + 1);\n+}\n+\n+constexpr bool\n+fn2 (const char *s)\n+{\n+  return cmp (s + 1, s + 1);\n+}\n+\n+constexpr auto c1 = fn1 (&s[0]);\n+constexpr auto c2 = fn2 (&s[0]);\n+\n+SA (!c1);\n+SA (c2);"}]}