{"sha": "3f71b82596e992eb6e53fe9bbd70a4b52bc908e8", "node_id": "C_kwDOANBUbNoAKDNmNzFiODI1OTZlOTkyZWI2ZTUzZmU5YmJkNzBhNGI1MmJjOTA4ZTg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-15T08:56:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-15T09:13:00Z"}, "message": "powerpc: Fix up expansion for WIDEN_MULT_PLUS_EXPR [PR108787]\n\nWIDEN_MULT_PLUS_EXPR as documented has the factor operands with\nthe same precision and the addend and result another one at least twice\nas wide.\nSimilarly, {,u}maddMN4 is documented as\n'maddMN4'\n     Multiply operands 1 and 2, sign-extend them to mode N, add operand\n     3, and store the result in operand 0.  Operands 1 and 2 have mode M\n     and operands 0 and 3 have mode N.  Both modes must be integer or\n     fixed-point modes and N must be twice the size of M.\n\n     In other words, 'maddMN4' is like 'mulMN3' except that it also adds\n     operand 3.\n\n     These instructions are not allowed to 'FAIL'.\n\n'umaddMN4'\n     Like 'maddMN4', but zero-extend the multiplication operands instead\n     of sign-extending them.\nThe PR103109 addition of these expanders to rs6000 didn't handle this\ncorrectly though, it treated the last argument as also having mode M\nsign or zero extended into N.  Unfortunately this means incorrect code\ngeneration whenever the last operand isn't really sign or zero extended\nfrom DImode to TImode.\n\nThe following patch removes maddditi4 expander altogether from rs6000.md,\nbecause we'd need\n        maddhd 9,3,4,5\n        sradi 10,5,63\n        maddld 3,3,4,5\n        sub 9,9,10\n        add 4,9,6\nwhich is longer than\n        mulld 9,3,4\n        mulhd 4,3,4\n        addc 3,9,5\n        adde 4,4,6\nand nothing would be able to optimize the case of last operand already\nsign-extended from DImode to TImode into just\n\tmr 9,3\n        maddld 3,3,4,5\n        maddhd 4,9,4,5\nor so.  And fixes umaddditi4, so that it emits an add at the end to add\nthe high half of the last operand, fortunately in this case if the high\nhalf of the last operand is known to be zero (i.e. last operand is zero\nextended from DImode to TImode) then combine will drop the useless add.\n\nIf we wanted to get back the signed op1 * op2 + op3 all in the DImode\ninto TImode op0, we'd need to introduce a new tree code next to\nWIDEN_MULT_PLUS_EXPR and maddMN4 expander, because I'm afraid it can't\nbe done at expansion time in maddMN4 expander to detect whether the\noperand is sign extended especially because of SUBREGs and the awkwardness\nof looking at earlier emitted instructions, and combine would need 5\ninstruction combination.\n\n2023-02-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/108787\n\tPR target/103109\n\t* config/rs6000/rs6000.md (<u>maddditi4): Change into umaddditi4 only\n\texpander, change operand 3 to be TImode, emit maddlddi4 and\n\tumadddi4_highpart{,_le} with its low half and finally add the high\n\thalf to the result.\n\n\t* gcc.dg/pr108787.c: New test.\n\t* gcc.target/powerpc/pr108787.c: New test.\n\t* gcc.target/powerpc/pr103109-1.c: Adjust expected instruction counts.", "tree": {"sha": "7436b8f2a5599d14ca48b2e9d4382cbb8c38149d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7436b8f2a5599d14ca48b2e9d4382cbb8c38149d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "545c9f8b78bae8ed542e7da4ed537edeb7485c30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545c9f8b78bae8ed542e7da4ed537edeb7485c30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545c9f8b78bae8ed542e7da4ed537edeb7485c30"}], "stats": {"total": 70, "additions": 59, "deletions": 11}, "files": [{"sha": "162340b5581ac73d304fe3aba5d6c34249e525cc", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3f71b82596e992eb6e53fe9bbd70a4b52bc908e8", "patch": "@@ -3226,25 +3226,40 @@\n   \"maddld %0,%1,%2,%3\"\n   [(set_attr \"type\" \"mul\")])\n \n-(define_expand \"<u>maddditi4\"\n+;; umaddditi4 generally needs maddhdu + maddld + add instructions,\n+;; unless last operand is zero extended from DImode, then needs\n+;; maddhdu + maddld, which is both faster than mulld + mulhdu + addc + adde\n+;; resp. mulld + mulhdu + addc + addze.\n+;; We don't define maddditi4, as that one needs\n+;; maddhd + sradi + maddld + add + sub and for last operand sign extended\n+;; from DImode nothing is able to optimize it into maddhd + maddld, while\n+;; without maddditi4 mulld + mulhd + addc + adde or\n+;; mulld + mulhd + sradi + addc + adde is needed.  See PR108787.\n+(define_expand \"umaddditi4\"\n   [(set (match_operand:TI 0 \"gpc_reg_operand\")\n \t(plus:TI\n-\t  (mult:TI (any_extend:TI (match_operand:DI 1 \"gpc_reg_operand\"))\n-\t\t   (any_extend:TI (match_operand:DI 2 \"gpc_reg_operand\")))\n-\t  (any_extend:TI (match_operand:DI 3 \"gpc_reg_operand\"))))]\n+\t  (mult:TI (zero_extend:TI (match_operand:DI 1 \"gpc_reg_operand\"))\n+\t\t   (zero_extend:TI (match_operand:DI 2 \"gpc_reg_operand\")))\n+\t  (match_operand:TI 3 \"gpc_reg_operand\")))]\n   \"TARGET_MADDLD && TARGET_POWERPC64\"\n {\n   rtx op0_lo = gen_rtx_SUBREG (DImode, operands[0], BYTES_BIG_ENDIAN ? 8 : 0);\n   rtx op0_hi = gen_rtx_SUBREG (DImode, operands[0], BYTES_BIG_ENDIAN ? 0 : 8);\n+  rtx op3_lo = gen_rtx_SUBREG (DImode, operands[3], BYTES_BIG_ENDIAN ? 8 : 0);\n+  rtx op3_hi = gen_rtx_SUBREG (DImode, operands[3], BYTES_BIG_ENDIAN ? 0 : 8);\n+  rtx hi_temp = gen_reg_rtx (DImode);\n \n-  emit_insn (gen_maddlddi4 (op0_lo, operands[1], operands[2], operands[3]));\n+  emit_insn (gen_maddlddi4 (op0_lo, operands[1], operands[2], op3_lo));\n \n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_<u>madddi4_highpart (op0_hi, operands[1], operands[2],\n-\t\t\t\t\toperands[3]));\n+    emit_insn (gen_umadddi4_highpart (hi_temp, operands[1], operands[2],\n+\t\t\t\t      op3_lo));\n   else\n-    emit_insn (gen_<u>madddi4_highpart_le (op0_hi, operands[1], operands[2],\n-\t\t\t\t\t   operands[3]));\n+    emit_insn (gen_umadddi4_highpart_le (hi_temp, operands[1], operands[2],\n+\t\t\t\t\t op3_lo));\n+\n+  emit_insn (gen_adddi3 (op0_hi, hi_temp, op3_hi));\n+\n   DONE;\n })\n "}, {"sha": "da3b01b8a7282cdb740ce1891fe1c7fd00e998dc", "filename": "gcc/testsuite/gcc.dg/pr108787.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108787.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108787.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108787.c?ref=3f71b82596e992eb6e53fe9bbd70a4b52bc908e8", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/108787 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+__attribute__((noipa)) unsigned __int128\n+foo (unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long u, unsigned long long v, unsigned long long w)\n+{\n+  unsigned __int128 r, d;\n+  r = ((unsigned __int128) x * u);\n+  d = ((unsigned __int128) y * w);\n+  r += d;\n+  d = ((unsigned __int128) z * v);\n+  r += d;\n+  return r;\n+}\n+\n+int\n+main ()\n+{\n+  if (__CHAR_BIT__ != 8 || __SIZEOF_LONG_LONG__ != 8 || __SIZEOF_INT128__ != 16)\n+    return 0;\n+  unsigned __int128 x = foo (0x3efe88da491ULL, 0xd105e9b4a44ULL, 0x4efa677b3dbULL, 0x42c052bac7bULL, 0x99638a13199cULL, 0x56b640d064ULL);\n+  if ((unsigned long long) (x >> 64) != 0x000000000309ff93ULL\n+      || (unsigned long long) x != 0xbd5c98fdf2bdbcafULL)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "bcb1c2f73135d5bcda447641abb5ddeddea0785d", "filename": "gcc/testsuite/gcc.target/powerpc/pr103109-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103109-1.c?ref=3f71b82596e992eb6e53fe9bbd70a4b52bc908e8", "patch": "@@ -3,8 +3,8 @@\n /* { dg-require-effective-target int128 } */\n /* { dg-require-effective-target powerpc_p9modulo_ok } */\n /* { dg-require-effective-target has_arch_ppc64 } */\n-/* { dg-final { scan-assembler-times {\\mmaddld\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mmaddhd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mmaddld\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mmaddhd\\M} 0 } } */\n /* { dg-final { scan-assembler-times {\\mmaddhdu\\M} 1 } } */\n \n #include \"pr103109.h\""}, {"sha": "7c8ba5f0a7e7174fbd25a5ba4c56a390d6d13af6", "filename": "gcc/testsuite/gcc.target/powerpc/pr108787.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108787.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f71b82596e992eb6e53fe9bbd70a4b52bc908e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108787.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108787.c?ref=3f71b82596e992eb6e53fe9bbd70a4b52bc908e8", "patch": "@@ -0,0 +1,6 @@\n+/* PR target/108787 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n+\n+#include \"../../gcc.dg/pr108787.c\""}]}