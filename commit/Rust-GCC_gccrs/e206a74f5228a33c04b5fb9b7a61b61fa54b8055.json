{"sha": "e206a74f5228a33c04b5fb9b7a61b61fa54b8055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIwNmE3NGY1MjI4YTMzYzA0YjVmYjliN2E2MWI2MWZhNTRiODA1NQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2002-03-29T18:39:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-29T18:39:56Z"}, "message": "ia64.md (*ptr_extend_plus_1, [...]): New.\n\n        * config/ia64/ia64.md (*ptr_extend_plus_1, *ptr_extend_plus_2): New.\n        * config/ia64/ia64.c (basereg_operand): New.\n        * config/ia64/ia64-protos.h (basereg_operand): Declare.\n        * config/ia64/ia64.h (PREDICATE_CODES): Add basereg_operand.\n\nFrom-SVN: r51564", "tree": {"sha": "9ee22edabc0b22789b5f9fd559d3a9f9f0482cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ee22edabc0b22789b5f9fd559d3a9f9f0482cf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e206a74f5228a33c04b5fb9b7a61b61fa54b8055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e206a74f5228a33c04b5fb9b7a61b61fa54b8055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e206a74f5228a33c04b5fb9b7a61b61fa54b8055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e206a74f5228a33c04b5fb9b7a61b61fa54b8055/comments", "author": null, "committer": null, "parents": [{"sha": "6676c77f013532382042402c4f37c87bfe272099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6676c77f013532382042402c4f37c87bfe272099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6676c77f013532382042402c4f37c87bfe272099"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "17695ffa5db583d6b21ece72cccded744565e5c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e206a74f5228a33c04b5fb9b7a61b61fa54b8055/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e206a74f5228a33c04b5fb9b7a61b61fa54b8055/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e206a74f5228a33c04b5fb9b7a61b61fa54b8055", "patch": "@@ -1,3 +1,10 @@\n+2002-03-29  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config/ia64/ia64.md (*ptr_extend_plus_1, *ptr_extend_plus_2): New.\n+\t* config/ia64/ia64.c (basereg_operand): New.\n+\t* config/ia64/ia64-protos.h (basereg_operand): Declare.\n+\t* config/ia64/ia64.h (PREDICATE_CODES): Add basereg_operand.\n+\n 2002-03-29  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/mmix/mmix.c (mmix_target_asm_function_prologue): Correct"}, {"sha": "2bf67b24f0f4d9e9c4a089b8dc23dfc37cc7a409", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e206a74f5228a33c04b5fb9b7a61b61fa54b8055/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e206a74f5228a33c04b5fb9b7a61b61fa54b8055/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=e206a74f5228a33c04b5fb9b7a61b61fa54b8055", "patch": "@@ -66,6 +66,7 @@ extern int ar_pfs_reg_operand PARAMS((rtx, enum machine_mode));\n extern int general_tfmode_operand PARAMS((rtx, enum machine_mode));\n extern int destination_tfmode_operand PARAMS((rtx, enum machine_mode));\n extern int tfreg_or_fp01_operand PARAMS((rtx, enum machine_mode));\n+extern int basereg_operand PARAMS((rtx, enum machine_mode));\n \n extern int ia64_move_ok PARAMS((rtx, rtx));\n extern int ia64_depz_field_mask PARAMS((rtx, rtx));"}, {"sha": "78ba70e1e85175319957c7490f96a5d7880d4ee9", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e206a74f5228a33c04b5fb9b7a61b61fa54b8055/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e206a74f5228a33c04b5fb9b7a61b61fa54b8055/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=e206a74f5228a33c04b5fb9b7a61b61fa54b8055", "patch": "@@ -864,6 +864,21 @@ tfreg_or_fp01_operand (op, mode)\n     return 0;\n   return fr_reg_or_fp01_operand (op, mode);\n }\n+\n+/* Return 1 if OP is valid as a base register in a reg + offset address.  */\n+\n+int\n+basereg_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  /* ??? Should I copy the flag_omit_frame_pointer and cse_not_expected\n+     checks from pa.c basereg_operand as well?  Seems to be OK without them\n+     in test runs.  */\n+\n+  return (register_operand (op, mode) &&\n+\t  REG_POINTER ((GET_CODE (op) == SUBREG) ? SUBREG_REG (op) : op));\n+}\n \f\n /* Return 1 if the operands of a move are ok.  */\n "}, {"sha": "ba8c44ca7108e921ab4c0430da412b11e7b4fffe", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e206a74f5228a33c04b5fb9b7a61b61fa54b8055/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e206a74f5228a33c04b5fb9b7a61b61fa54b8055/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=e206a74f5228a33c04b5fb9b7a61b61fa54b8055", "patch": "@@ -2351,7 +2351,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n { \"ar_pfs_reg_operand\", {REG}},\t\t\t\t\t\t\\\n { \"general_tfmode_operand\", {SUBREG, REG, CONST_DOUBLE, MEM}},\t\t\\\n { \"destination_tfmode_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n-{ \"tfreg_or_fp01_operand\", {REG, CONST_DOUBLE}},\n+{ \"tfreg_or_fp01_operand\", {REG, CONST_DOUBLE}},\t\t\t\\\n+{ \"basereg_operand\", {SUBREG, REG}},\n \n /* An alias for a machine mode name.  This is the machine mode that elements of\n    a jump-table should have.  */"}, {"sha": "8b134a6787423675e0f957c4253adb404d44cc2c", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e206a74f5228a33c04b5fb9b7a61b61fa54b8055/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e206a74f5228a33c04b5fb9b7a61b61fa54b8055/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=e206a74f5228a33c04b5fb9b7a61b61fa54b8055", "patch": "@@ -5303,6 +5303,29 @@\n   \"addp4 %0 = 0,%1\"\n   [(set_attr \"itanium_class\" \"ialu\")])\n \n+;;\n+;; Optimizations for ptr_extend\n+\n+(define_insn \"*ptr_extend_plus_1\"\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+        (unspec:DI\n+         [(plus:SI (match_operand:SI 1 \"basereg_operand\" \"r\")\n+                   (match_operand:SI 2 \"gr_reg_or_14bit_operand\" \"rI\"))]\n+         24))]\n+  \"\"\n+  \"addp4 %0 = %2, %1\"\n+  [(set_attr \"itanium_class\" \"ialu\")])\n+\n+(define_insn \"*ptr_extend_plus_2\"\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+        (unspec:DI\n+         [(plus:SI (match_operand:SI 1 \"gr_register_operand\" \"r\")\n+                   (match_operand:SI 2 \"basereg_operand\" \"r\"))]\n+         24))]\n+  \"\"\n+  \"addp4 %0 = %1, %2\"\n+  [(set_attr \"itanium_class\" \"ialu\")])\n+\n ;;\n ;; As USE insns aren't meaningful after reload, this is used instead\n ;; to prevent deleting instructions setting registers for EH handling"}]}