{"sha": "50431bc4280a683141da4c51375ef07636083b7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA0MzFiYzQyODBhNjgzMTQxZGE0YzUxMzc1ZWYwNzYzNjA4M2I3Yg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-06-14T14:18:01Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-06-14T14:18:01Z"}, "message": "Makefile.in (FLAGS_H): New.\n\n\t* Makefile.in (FLAGS_H): New.\n\t(flags.h): Replace by FLAGS_H.\n\t* c.opt: Document Var, VarExists, Init and Report attributes.\n\t* common.opt: Fill the values of the attributes.\n\t* diagnostic.c (flag_fatal_errors): Do not define.\n\t* except.c (flag_non_call_exceptions): Do not define.\n\t* flags.h: Include options.h.  Remove declarations conflicting with\n\tthe automatically defined ones.\n\t* opts.c: Remove automatically defined variables.\n\t(handle_option): Perform default initialization.\n\t(common_handle_option): Do not handle options covered by the\n\tdefault initialization.\n\t* opts.h (struct cl_option): Add flag_var, has_set_value and set_value\n\tfields.\n\t(CL_REPORT): New.\n\t* opts.sh: Generate variable declarations, handle CL_REPORT.\n\t* toplev.c: Remove automatically defined variables.\n\t(f_options): Removed.\n\t(print_switch_values): Use cl_options instead of f_options.\n\t* toplev.h (version_flag): Declaration removed.\n\nFrom-SVN: r83105", "tree": {"sha": "8e99c7d2af7c48b5b41eea44cd56ece27f2296b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e99c7d2af7c48b5b41eea44cd56ece27f2296b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50431bc4280a683141da4c51375ef07636083b7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50431bc4280a683141da4c51375ef07636083b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50431bc4280a683141da4c51375ef07636083b7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50431bc4280a683141da4c51375ef07636083b7b/comments", "author": null, "committer": null, "parents": [{"sha": "966389eeaaf6b674bbfbdc34b06314c2dd7f8591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966389eeaaf6b674bbfbdc34b06314c2dd7f8591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966389eeaaf6b674bbfbdc34b06314c2dd7f8591"}], "stats": {"total": 2256, "additions": 448, "deletions": 1808}, "files": [{"sha": "fdcffcd778a01fe92403aeaf3c7590f7d896cbb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -1,3 +1,26 @@\n+2004-06-14  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* Makefile.in (FLAGS_H): New.\n+\t(flags.h): Replace by FLAGS_H.\n+\t* c.opt: Document Var, VarExists, Init and Report attributes.\n+\t* common.opt: Fill the values of the attributes.\n+\t* diagnostic.c (flag_fatal_errors): Do not define.\n+\t* except.c (flag_non_call_exceptions): Do not define.\n+\t* flags.h: Include options.h.  Remove declarations conflicting with\n+\tthe automatically defined ones.\n+\t* opts.c: Remove automatically defined variables.\n+\t(handle_option): Perform default initialization.\n+\t(common_handle_option): Do not handle options covered by the\n+\tdefault initialization.\n+\t* opts.h (struct cl_option): Add flag_var, has_set_value and set_value\n+\tfields.\n+\t(CL_REPORT): New.\n+\t* opts.sh: Generate variable declarations, handle CL_REPORT.\n+\t* toplev.c: Remove automatically defined variables.\n+\t(f_options): Removed.\n+\t(print_switch_values): Use cl_options instead of f_options.\n+\t* toplev.h (version_flag): Declaration removed.\n+\n 2004-06-14  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* config/sparc/sparc.h: Correct comment about availability of"}, {"sha": "dd7e65d4ca11b36c738b08955488b65c950c9ccf", "filename": "gcc/Makefile.in", "status": "modified", "additions": 130, "deletions": 129, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -692,7 +692,8 @@ DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n ALIAS_H = alias.h\n EMIT_RTL_H = emit-rtl.h\n-EXPR_H = expr.h insn-config.h function.h $(RTL_H) flags.h $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n+FLAGS_H = flags.h options.h\n+EXPR_H = expr.h insn-config.h function.h $(RTL_H) $(FLAGS_H) $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n OPTABS_H = optabs.h insn-codes.h\n REGS_H = regs.h varray.h $(MACHMODE_H)\n RA_H = ra.h bitmap.h sbitmap.h hard-reg-set.h insn-modes.h\n@@ -1330,9 +1331,9 @@ s-crt0:\t$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)\n # C language specific files.\n \n c-errors.o: c-errors.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-    $(C_TREE_H) flags.h $(DIAGNOSTIC_H) $(TM_P_H)\n+    $(C_TREE_H) $(FLAGS_H) $(DIAGNOSTIC_H) $(TM_P_H)\n c-parse.o : c-parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-    $(GGC_H) intl.h $(C_TREE_H) input.h flags.h toplev.h output.h $(CPPLIB_H) \\\n+    $(GGC_H) intl.h $(C_TREE_H) input.h $(FLAGS_H) toplev.h output.h $(CPPLIB_H) \\\n     varray.h gt-c-parse.h langhooks.h\n \n srcextra: gcc.srcextra lang.srcextra\n@@ -1354,12 +1355,12 @@ c-incpath.o: c-incpath.c c-incpath.h $(CONFIG_H) $(SYSTEM_H) $(CPPLIB_H) \\\n \t\t$(MACHMODE_H)\n \n c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-    $(RTL_H) $(C_TREE_H) $(GGC_H) $(TARGET_H) flags.h function.h output.h \\\n+    $(RTL_H) $(C_TREE_H) $(GGC_H) $(TARGET_H) $(FLAGS_H) function.h output.h \\\n     $(EXPR_H) debug.h toplev.h intl.h $(TM_P_H) tree-inline.h $(TIMEVAR_H) \\\n     opts.h c-pragma.h gt-c-decl.h cgraph.h $(HASHTAB_H) libfuncs.h except.h \\\n     $(LANGHOOKS_DEF_H) $(TREE_DUMP_H)\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_TREE_H) \\\n-    $(TARGET_H) flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H) \\\n+    $(TARGET_H) $(FLAGS_H) intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H) \\\n     langhooks.h\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(C_PRETTY_PRINT_H) $(DIAGNOSTIC_H) \\\n@@ -1368,23 +1369,23 @@ stub-objc.o : stub-objc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n     $(GGC_H) $(C_COMMON_H)\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(RTL_H) debug.h $(C_TREE_H) $(C_COMMON_H) real.h c-incpath.h cppdefault.h \\\n-    c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n+    c-pragma.h input.h intl.h $(FLAGS_H) toplev.h output.h \\\n     $(CPPLIB_H) $(EXPR_H) $(TM_P_H)\n c-ppoutput.o : c-ppoutput.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(C_COMMON_H) $(TREE_H) $(CPPLIB_H) $(srcdir)/../libcpp/internal.h $(TM_P_H) c-pragma.h\n c-objc-common.o : c-objc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(RTL_H) insn-config.h $(INTEGRATE_H) $(EXPR_H) $(C_TREE_H) \\\n-    flags.h toplev.h tree-inline.h $(DIAGNOSTIC_H) $(VARRAY_H) \\\n+    $(FLAGS_H) toplev.h tree-inline.h $(DIAGNOSTIC_H) $(VARRAY_H) \\\n     langhooks.h $(GGC_H) $(TARGET_H) cgraph.h\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-    $(C_TREE_H) flags.h toplev.h\n+    $(C_TREE_H) $(FLAGS_H) toplev.h\n c-convert.o : c-convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-    flags.h toplev.h $(C_COMMON_H) real.h\n+    $(FLAGS_H) toplev.h $(C_COMMON_H) real.h\n c-pragma.o: c-pragma.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n     function.h c-pragma.h toplev.h output.h $(GGC_H) $(TM_P_H) $(C_COMMON_H) gt-c-pragma.h\n-graph.o: graph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h flags.h output.h \\\n+graph.o: graph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h $(FLAGS_H) output.h \\\n     $(RTL_H) function.h hard-reg-set.h $(BASIC_BLOCK_H) graph.h\n-sbitmap.o: sbitmap.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n+sbitmap.o: sbitmap.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) \\\n     hard-reg-set.h $(BASIC_BLOCK_H)\n \n COLLECT2_OBJS = collect2.o tlink.o intl.o version.o\n@@ -1407,7 +1408,7 @@ tlink.o: tlink.c $(DEMANGLE_H) $(HASHTAB_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h\n # A file used by all variants of C.\n \n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-\t$(OBSTACK_H) $(C_COMMON_H) flags.h toplev.h output.h c-pragma.h intl.h \\\n+\t$(OBSTACK_H) $(C_COMMON_H) $(FLAGS_H) toplev.h output.h c-pragma.h intl.h \\\n \t$(GGC_H) $(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def \\\n \t$(DIAGNOSTIC_H) gt-c-common.h langhooks.h varray.h $(RTL_H) \\\n \t$(TARGET_H) $(C_TREE_H) tree-iterator.h langhooks.h\n@@ -1416,35 +1417,35 @@ c-pretty-print.o : c-pretty-print.c $(C_PRETTY_PRINT_H) \\\n \t$(DIAGNOSTIC_H)\n \n c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\t\\\n-        $(TREE_H) c-pragma.h flags.h toplev.h langhooks.h\t\t\\\n+        $(TREE_H) c-pragma.h $(FLAGS_H) toplev.h langhooks.h\t\t\\\n         tree-inline.h $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H)\t\\\n         opts.h options.h $(PARAMS_H) $(MKDEPS_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n \n c-cppbuiltin.o : c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-\t$(TREE_H) version.h $(C_COMMON_H) c-pragma.h flags.h toplev.h langhooks.h \\\n+\t$(TREE_H) version.h $(C_COMMON_H) c-pragma.h $(FLAGS_H) toplev.h langhooks.h \\\n \toutput.h except.h real.h $(TM_P_H)\n \n # A file used by all variants of C and some other languages.\n \n-attribs.o : attribs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) flags.h \\\n+attribs.o : attribs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(FLAGS_H) \\\n \ttoplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) $(EXPR_H) $(TM_P_H) \\\n \tbuiltin-types.def $(TARGET_H) langhooks.h\n \n c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) langhooks.h \\\n-\t$(C_COMMON_H) flags.h toplev.h intl.h $(DIAGNOSTIC_H)\n+\t$(C_COMMON_H) $(FLAGS_H) toplev.h intl.h $(DIAGNOSTIC_H)\n \n c-semantics.o : c-semantics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-\t$(C_TREE_H) flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n+\t$(C_TREE_H) $(FLAGS_H) toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n \t$(EXPR_H) $(PREDICT_H) tree-inline.h\n \n c-dump.o : c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(C_TREE_H) $(TREE_DUMP_H)\n \n c-pch.o : c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(CPPLIB_H) $(TREE_H) \\\n \t$(C_COMMON_H) output.h toplev.h c-pragma.h $(GGC_H) debug.h \\\n-\tlanghooks.h flags.h hosthooks.h version.h $(TARGET_H)\n+\tlanghooks.h $(FLAGS_H) hosthooks.h version.h $(TARGET_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DHOST_MACHINE=\\\"$(host)\\\" -DTARGET_MACHINE=\\\"$(target)\\\" \\\n \t  $< $(OUTPUT_OPTION)\n@@ -1549,27 +1550,27 @@ prefix.o: prefix.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) Makefile prefix.h\n \t-DPREFIX=\\\"$(prefix)\\\" \\\n \t  -c $(srcdir)/prefix.c $(OUTPUT_OPTION)\n \n-convert.o: convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) flags.h \\\n+convert.o: convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(FLAGS_H) \\\n    convert.h toplev.h langhooks.h\n \n langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) toplev.h \\\n    tree-inline.h $(RTL_H) insn-config.h $(INTEGRATE_H) langhooks.h \\\n-   $(LANGHOOKS_DEF_H) flags.h $(GGC_H) gt-langhooks.h diagnostic.h\n-tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) flags.h function.h \\\n+   $(LANGHOOKS_DEF_H) $(FLAGS_H) $(GGC_H) gt-langhooks.h diagnostic.h\n+tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(FLAGS_H) function.h \\\n    toplev.h $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) langhooks.h \\\n    real.h gt-tree.h tree-iterator.h $(BASIC_BLOCK_H) $(TREE_FLOW_H)\n tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   $(C_TREE_H) flags.h langhooks.h toplev.h output.h c-pragma.h $(RTL_H) \\\n+   $(C_TREE_H) $(FLAGS_H) langhooks.h toplev.h output.h c-pragma.h $(RTL_H) \\\n    $(GGC_H) $(EXPR_H) $(SPLAY_TREE_H) $(TREE_DUMP_H) tree-iterator.h\n tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) $(RTL_H) $(EXPR_H) flags.h $(PARAMS_H) input.h insn-config.h \\\n+   $(TREE_H) $(RTL_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h insn-config.h \\\n    $(INTEGRATE_H) $(VARRAY_H) $(HASHTAB_H) $(SPLAY_TREE_H) toplev.h \\\n    langhooks.h $(C_COMMON_H) tree-inline.h cgraph.h intl.h function.h \\\n    $(TREE_GIMPLE_H)\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(GGC_H) langhooks.h real.h\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   flags.h function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H) $(TM_P_H) $(TARGET_H) \\\n+   $(FLAGS_H) function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H) $(TM_P_H) $(TARGET_H) \\\n    langhooks.h\n tree-alias-type.o: tree-alias-type.c tree-alias-type.h $(SYSTEM_H) $(CONFIG_H) \\\n    $(GGC_H) $(TM_H) coretypes.h $(VARRAY_H)\n@@ -1595,13 +1596,13 @@ tree-outof-ssa.o : tree-outof-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    tree-pass.h $(TREE_SSA_LIVE_H)\n tree-ssa-dse.o : tree-ssa-dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) errors.h $(GGC_H) $(TREE_H) $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n-   $(TREE_FLOW_H) tree-pass.h $(TREE_DUMP_H) domwalk.h flags.h\n+   $(TREE_FLOW_H) tree-pass.h $(TREE_DUMP_H) domwalk.h $(FLAGS_H)\n tree-ssa-forwprop.o : tree-ssa-forwprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) errors.h $(GGC_H) $(TREE_H) $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(TREE_DUMP_H)\n tree-ssa-phiopt.o : tree-ssa-phiopt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) errors.h $(GGC_H) $(TREE_H) $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n-   $(TREE_FLOW_H) tree-pass.h $(TREE_DUMP_H) langhooks.h flags.h\n+   $(TREE_FLOW_H) tree-pass.h $(TREE_DUMP_H) langhooks.h $(FLAGS_H)\n tree-nrv.o : tree-nrv.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(RTL_H) function.h $(BASIC_BLOCK_H) $(EXPR_H) \\\n    diagnostic.h $(TREE_FLOW_H) $(TIMEVAR_H) $(TREE_DUMP_H) tree-pass.h \\\n@@ -1613,7 +1614,7 @@ tree-ssa-copy.o : tree-ssa-copy.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n tree-ssa-dom.o : tree-ssa-dom.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) output.h diagnostic.h \\\n    errors.h function.h $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n-   $(BASIC_BLOCK_H) domwalk.h real.h tree-pass.h flags.h langhooks.h\n+   $(BASIC_BLOCK_H) domwalk.h real.h tree-pass.h $(FLAGS_H) langhooks.h\n tree-ssanames.o : tree-ssanames.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) varray.h $(GGC_H) gt-tree-ssanames.h  $(TREE_FLOW_H)\n tree-phinodes.o : tree-phinodes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -1632,56 +1633,56 @@ tree-ssa-copyrename.o : tree-ssa-copyrename.c $(TREE_FLOW_H) $(CONFIG_H) \\\n tree-ssa-pre.o : tree-ssa-pre.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) \\\n    $(GGC_H) output.h diagnostic.h errors.h toplev.h $(TIMEVAR_H) \\\n-   $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h flags.h\n+   $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h $(FLAGS_H)\n tree-cfg.o : tree-cfg.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) flags.h output.h \\\n+   $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) $(FLAGS_H) output.h \\\n    diagnostic.h errors.h function.h $(TIMEVAR_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) except.h langhooks.h $(CFGLOOP_H) gt-tree-cfg.h tree-pass.h\n tree-tailcall.o : tree-tailcall.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) function.h $(TM_H) coretypes.h \\\n-   $(TREE_DUMP_H) diagnostic.h except.h tree-pass.h flags.h langhooks.h\n+   $(TREE_DUMP_H) diagnostic.h except.h tree-pass.h $(FLAGS_H) langhooks.h\n tree-nested.o: tree-nested.c $(CONFIG_H) $(SYSTEM_H) $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(TM_P_H) function.h tree-dump.h tree-inline.h tree-iterator.h \\\n    tree-gimple.h cgraph.h $(EXPR_H) langhooks.h $(GGC_H) gt-tree-nested.h\n tree-iterator.o : tree-iterator.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    coretypes.h $(GGC_H) tree-iterator.h tree-gimple.h gt-tree-iterator.h\n tree-dfa.o : tree-dfa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) output.h diagnostic.h \\\n-   errors.h tree-inline.h $(HASHTAB_H) flags.h function.h $(TIMEVAR_H) \\\n+   errors.h tree-inline.h $(HASHTAB_H) $(FLAGS_H) function.h $(TIMEVAR_H) \\\n    tree-alias-common.h convert.h $(TM_H) coretypes.h langhooks.h \\\n    $(TREE_DUMP_H) tree-pass.h params.h\n tree-ssa-operands.o : tree-ssa-operands.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(GGC_H) diagnostic.h \\\n-   tree-inline.h flags.h function.h $(TM_H) $(TIMEVAR_H) tree-pass.h\n+   tree-inline.h $(FLAGS_H) function.h $(TM_H) $(TIMEVAR_H) tree-pass.h\n tree-eh.o : tree-eh.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   $(RTL_H) $(TREE_H) $(TM_H) flags.h function.h except.h langhooks.h \\\n+   $(RTL_H) $(TREE_H) $(TM_H) $(FLAGS_H) function.h except.h langhooks.h \\\n    $(GGC_H) tree-pass.h gt-tree-eh.h\n tree-ssa-loop.o : tree-ssa-loop.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) \\\n    output.h diagnostic.h $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n-   tree-pass.h flags.h tree-inline.h\n+   tree-pass.h $(FLAGS_H) tree-inline.h\n tree-ssa-alias.o : tree-ssa-alias.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) tree-inline.h flags.h \\\n+   $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) tree-inline.h $(FLAGS_H) \\\n    function.h $(TIMEVAR_H) tree-alias-common.h convert.h $(TM_H) coretypes.h \\\n    langhooks.h $(TREE_DUMP_H) tree-pass.h params.h\n tree-optimize.o : tree-optimize.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) \\\n-   $(GGC_H) output.h diagnostic.h errors.h flags.h tree-alias-common.h \\\n+   $(GGC_H) output.h diagnostic.h errors.h $(FLAGS_H) tree-alias-common.h \\\n    $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) toplev.h function.h \\\n-   langhooks.h flags.h cgraph.h tree-inline.h tree-mudflap.h $(GGC_H) \\\n+   langhooks.h $(FLAGS_H) cgraph.h tree-inline.h tree-mudflap.h $(GGC_H) \\\n    cgraph.h tree-pass.h\n c-gimplify.o : c-gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) errors.h \\\n-   $(C_TREE_H) $(C_COMMON_H) diagnostic.h $(TREE_GIMPLE_H) varray.h flags.h \\\n+   $(C_TREE_H) $(C_COMMON_H) diagnostic.h $(TREE_GIMPLE_H) varray.h $(FLAGS_H) \\\n    langhooks.h toplev.h rtl.h $(TREE_FLOW_H) langhooks-def.h \\\n    $(TM_H) coretypes.h $(C_PRETTY_PRINT_H) cgraph.h\n gimplify.o : gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) errors.h \\\n    diagnostic.h $(TREE_GIMPLE_H) tree-inline.h varray.h langhooks.h \\\n    langhooks-def.h $(TREE_FLOW_H) $(TIMEVAR_H) $(TM_H) coretypes.h except.h \\\n-   flags.h $(RTL_H) function.h $(EXPR_H) output.h $(GGC_H) gt-gimplify.h\n+   $(FLAGS_H) $(RTL_H) function.h $(EXPR_H) output.h $(GGC_H) gt-gimplify.h\n gimple-low.o : gimple-low.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) errors.h \\\n    diagnostic.h $(TREE_GIMPLE_H) tree-inline.h varray.h langhooks.h \\\n    langhooks-def.h $(TREE_FLOW_H) $(TIMEVAR_H) $(TM_H) coretypes.h except.h \\\n-   flags.h $(RTL_H) function.h tree-pass.h\n+   $(FLAGS_H) $(RTL_H) function.h tree-pass.h\n tree-browser.o : tree-browser.c tree-browser.def $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) errors.h tree-inline.h diagnostic.h $(HASHTAB_H) \\\n    $(TM_H) coretypes.h\n@@ -1701,10 +1702,10 @@ tree-pretty-print.o : tree-pretty-print.c $(CONFIG_H) $(SYSTEM_H) \\\n    errors.h $(TREE_H) diagnostic.h real.h $(HASHTAB_H) $(TREE_FLOW_H) \\\n    $(TM_H) coretypes.h tree-iterator.h\n fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) flags.h real.h toplev.h $(HASHTAB_H) $(EXPR_H) $(RTL_H) $(GGC_H) \\\n+   $(TREE_H) $(FLAGS_H) real.h toplev.h $(HASHTAB_H) $(EXPR_H) $(RTL_H) $(GGC_H) \\\n    $(TM_P_H) langhooks.h $(MD5_H)\n diagnostic.o : diagnostic.c $(DIAGNOSTIC_H) real.h \\\n-   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) version.h $(TM_P_H) flags.h $(GGC_H) \\\n+   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) version.h $(TM_P_H) $(FLAGS_H) $(GGC_H) \\\n    input.h toplev.h intl.h langhooks.h $(LANGHOOKS_DEF_H)\n opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(RTL_H) \\\n@@ -1714,7 +1715,7 @@ targhooks.o : targhooks.c targhooks.h $(CONFIG_H) $(SYSTEM_H) \\\n \toutput.h toplev.h\n \n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) version.h $(RTL_H) \\\n-   function.h flags.h xcoffout.h input.h $(INSN_ATTR_H) output.h $(DIAGNOSTIC_H) \\\n+   function.h $(FLAGS_H) xcoffout.h input.h $(INSN_ATTR_H) output.h $(DIAGNOSTIC_H) \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) value-prof.h \\\n@@ -1726,7 +1727,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) versio\n \t  -c $(srcdir)/toplev.c $(OUTPUT_OPTION)\n \n passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   $(RTL_H) function.h flags.h xcoffout.h input.h $(INSN_ATTR_H) output.h \\\n+   $(RTL_H) function.h $(FLAGS_H) xcoffout.h input.h $(INSN_ATTR_H) output.h \\\n    $(DIAGNOSTIC_H) debug.h insn-config.h intl.h $(RECOG_H) toplev.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) value-prof.h \\\n@@ -1749,192 +1750,192 @@ rtl.o : rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(RTL_H) real.h \\\n print-rtl.o : print-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(RTL_H) $(TREE_H) hard-reg-set.h $(BASIC_BLOCK_H) real.h $(TM_P_H)\n rtlanal.o : rtlanal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h \\\n-   $(RTL_H) hard-reg-set.h $(TM_P_H) insn-config.h $(RECOG_H) real.h flags.h \\\n+   $(RTL_H) hard-reg-set.h $(TM_P_H) insn-config.h $(RECOG_H) real.h $(FLAGS_H) \\\n    $(BASIC_BLOCK_H) $(REGS_H) output.h target.h function.h\n \n errors.o : errors.c $(CONFIG_H) $(SYSTEM_H) errors.h\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n-   flags.h function.h $(EXPR_H) hard-reg-set.h $(REGS_H) \\\n+   $(FLAGS_H) function.h $(EXPR_H) hard-reg-set.h $(REGS_H) \\\n    output.h c-pragma.h toplev.h xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n    $(HASHTAB_H) $(TARGET_H) langhooks.h gt-varasm.h real.h\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(CFGLAYOUT_H) \\\n-   flags.h function.h $(EXPR_H) $(OPTABS_H) libfuncs.h $(REGS_H) hard-reg-set.h \\\n+   $(FLAGS_H) function.h $(EXPR_H) $(OPTABS_H) libfuncs.h $(REGS_H) hard-reg-set.h \\\n    insn-config.h $(RECOG_H) output.h toplev.h except.h $(HASHTAB_H) $(GGC_H) \\\n    $(TM_P_H) langhooks.h gt-function.h $(TARGET_H) basic-block.h\n-stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) flags.h \\\n+stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) \\\n    function.h insn-config.h hard-reg-set.h $(EXPR_H) libfuncs.h except.h \\\n    $(LOOP_H) $(RECOG_H) toplev.h output.h varray.h $(GGC_H) $(TM_P_H) \\\n    langhooks.h $(PREDICT_H) gt-stmt.h $(OPTABS_H) $(TARGET_H)\n except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(TREE_H) flags.h except.h function.h $(EXPR_H) libfuncs.h $(INTEGRATE_H) \\\n+   $(TREE_H) $(FLAGS_H) except.h function.h $(EXPR_H) libfuncs.h $(INTEGRATE_H) \\\n    langhooks.h insn-config.h hard-reg-set.h $(BASIC_BLOCK_H) output.h \\\n    dwarf2asm.h dwarf2out.h toplev.h $(HASHTAB_H) intl.h $(GGC_H) \\\n    gt-except.h cgraph.h\n-expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) flags.h \\\n+expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) \\\n    function.h $(REGS_H) $(EXPR_H) $(OPTABS_H) libfuncs.h $(INSN_ATTR_H) insn-config.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\\n    except.h reload.h $(GGC_H) langhooks.h intl.h $(TM_P_H) real.h $(TARGET_H) \\\n    tree-iterator.h\n dojump.o : dojump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   flags.h function.h $(EXPR_H) $(OPTABS_H) $(INSN_ATTR_H) insn-config.h \\\n+   $(FLAGS_H) function.h $(EXPR_H) $(OPTABS_H) $(INSN_ATTR_H) insn-config.h \\\n    langhooks.h $(GGC_H) gt-dojump.h\n builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H)\\\n-   $(TREE_GIMPLE_H) flags.h $(TARGET_H) function.h $(REGS_H) $(EXPR_H) $(OPTABS_H) \\\n+   $(TREE_GIMPLE_H) $(FLAGS_H) $(TARGET_H) function.h $(REGS_H) $(EXPR_H) $(OPTABS_H) \\\n    insn-config.h $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\\n    except.h $(TM_P_H) $(PREDICT_H) libfuncs.h real.h langhooks.h\n-calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) flags.h \\\n+calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) \\\n    $(EXPR_H) $(OPTABS_H) langhooks.h $(TARGET_H) \\\n    libfuncs.h $(REGS_H) toplev.h output.h function.h $(TIMEVAR_H) $(TM_P_H) cgraph.h except.h\n expmed.o : expmed.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   flags.h insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) real.h \\\n+   $(FLAGS_H) insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) real.h \\\n    toplev.h $(TM_P_H) langhooks.h\n explow.o : explow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   flags.h hard-reg-set.h insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n+   $(FLAGS_H) hard-reg-set.h insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n    toplev.h function.h $(GGC_H) $(TM_P_H) langhooks.h gt-explow.h\n optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   flags.h insn-config.h $(EXPR_H) $(OPTABS_H) libfuncs.h $(RECOG_H) reload.h \\\n+   $(FLAGS_H) insn-config.h $(EXPR_H) $(OPTABS_H) libfuncs.h $(RECOG_H) reload.h \\\n    toplev.h $(GGC_H) real.h $(TM_P_H) except.h gt-optabs.h $(BASIC_BLOCK_H) \\\n    $(TARGET_H)\n dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n-   flags.h $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) function.h langhooks.h \\\n+   $(FLAGS_H) $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) function.h langhooks.h \\\n    insn-config.h reload.h gstab.h xcoffout.h output.h dbxout.h toplev.h \\\n    $(GGC_H) gt-dbxout.h\n debug.o : debug.c debug.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) debug.h \\\n-   $(TREE_H) $(GGC_H) varray.h $(RTL_H) $(REGS_H) flags.h insn-config.h \\\n+   $(TREE_H) $(GGC_H) varray.h $(RTL_H) $(REGS_H) $(FLAGS_H) insn-config.h \\\n    output.h toplev.h $(TM_P_H) gsyms.h langhooks.h $(TARGET_H) sdbout.h \\\n    gt-sdbout.h\n dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) version.h $(RTL_H) dwarf2.h debug.h flags.h insn-config.h reload.h \\\n+   $(TREE_H) version.h $(RTL_H) dwarf2.h debug.h $(FLAGS_H) insn-config.h reload.h \\\n    output.h $(DIAGNOSTIC_H) real.h hard-reg-set.h $(REGS_H) $(EXPR_H) \\\n    libfuncs.h toplev.h dwarf2out.h varray.h $(GGC_H) except.h dwarf2asm.h \\\n    $(TM_P_H) langhooks.h $(HASHTAB_H) gt-dwarf2out.h $(TARGET_H) cgraph.h \\\n    $(MD5_H) input.h\n-dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) flags.h $(RTL_H) \\\n+dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(FLAGS_H) $(RTL_H) \\\n    $(TREE_H) output.h dwarf2asm.h $(TM_P_H) $(GGC_H) gt-dwarf2asm.h\n vmsdbgout.o : vmsdbgout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) version.h \\\n-   $(RTL_H) flags.h output.h vmsdbg.h debug.h langhooks.h function.h $(TARGET_H)\n+   $(RTL_H) $(FLAGS_H) output.h vmsdbg.h debug.h langhooks.h function.h $(TARGET_H)\n xcoffout.o : xcoffout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n-   xcoffout.h flags.h toplev.h output.h dbxout.h $(GGC_H) $(TARGET_H)\n+   xcoffout.h $(FLAGS_H) toplev.h output.h dbxout.h $(GGC_H) $(TARGET_H)\n emit-rtl.o : emit-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   flags.h function.h $(REGS_H) insn-config.h $(RECOG_H) real.h $(GGC_H) \\\n+   $(FLAGS_H) function.h $(REGS_H) insn-config.h $(RECOG_H) real.h $(GGC_H) \\\n    $(EXPR_H) $(OBSTACK_H) hard-reg-set.h bitmap.h toplev.h \\\n    $(HASHTAB_H) $(TM_P_H) debug.h langhooks.h gt-emit-rtl.h\n real.o : real.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) toplev.h $(TM_P_H)\n integrate.o : integrate.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   flags.h debug.h $(INTEGRATE_H) insn-config.h $(EXPR_H) real.h $(REGS_H) \\\n+   $(FLAGS_H) debug.h $(INTEGRATE_H) insn-config.h $(EXPR_H) real.h $(REGS_H) \\\n    intl.h function.h output.h $(RECOG_H) except.h toplev.h $(LOOP_H) \\\n    $(PARAMS_H) $(TM_P_H) $(TARGET_H) langhooks.h gt-integrate.h\n-jump.o : jump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n+jump.o : jump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) \\\n    hard-reg-set.h $(REGS_H) insn-config.h $(RECOG_H) $(EXPR_H) real.h except.h function.h \\\n    toplev.h $(INSN_ATTR_H) $(TM_P_H) reload.h $(PREDICT_H) $(TIMEVAR_H) \\\n    $(DIAGNOSTIC_H)\n \n simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(REGS_H) hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n+   $(REGS_H) hard-reg-set.h $(FLAGS_H) real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n    output.h function.h $(GGC_H) $(OBSTACK_H) $(TM_P_H) $(TREE_H) $(TARGET_H)\n cgraph.o : cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   langhooks.h toplev.h flags.h $(GGC_H)  $(TARGET_H) cgraph.h gt-cgraph.h \\\n+   langhooks.h toplev.h $(FLAGS_H) $(GGC_H)  $(TARGET_H) cgraph.h gt-cgraph.h \\\n    output.h intl.h\n cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   langhooks.h tree-inline.h toplev.h flags.h $(GGC_H)  $(TARGET_H) cgraph.h intl.h \\\n+   langhooks.h tree-inline.h toplev.h $(FLAGS_H) $(GGC_H)  $(TARGET_H) cgraph.h intl.h \\\n    function.h\n coverage.o : coverage.c gcov-io.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(RTL_H) $(TREE_H) flags.h output.h $(REGS_H) $(EXPR_H) function.h \\\n+   $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) function.h \\\n    toplev.h $(GGC_H) $(TARGET_H) langhooks.h $(COVERAGE_H) libfuncs.h \\\n    gt-coverage.h $(HASHTAB_H)\n cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n-   hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EMIT_RTL_H) toplev.h \\\n+   hard-reg-set.h $(FLAGS_H) real.h insn-config.h $(RECOG_H) $(EMIT_RTL_H) toplev.h \\\n    output.h function.h cselib.h $(GGC_H) $(TM_P_H) gt-cselib.h $(PARAMS_H) \\\n    alloc-pool.h\n cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n-   hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n+   hard-reg-set.h $(FLAGS_H) real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n    output.h function.h $(BASIC_BLOCK_H) $(GGC_H) $(TM_P_H) $(TIMEVAR_H) \\\n    except.h $(TARGET_H) $(PARAMS_H) rtlhooks-def.h\n web.o : web.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n-   hard-reg-set.h flags.h $(BASIC_BLOCK_H) function.h output.h toplev.h $(DF_H)\n+   hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) function.h output.h toplev.h $(DF_H)\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n-   hard-reg-set.h flags.h real.h insn-config.h $(GGC_H) $(RECOG_H) $(EXPR_H) \\\n+   hard-reg-set.h $(FLAGS_H) real.h insn-config.h $(GGC_H) $(RECOG_H) $(EXPR_H) \\\n    $(BASIC_BLOCK_H) function.h output.h toplev.h $(TM_P_H) $(PARAMS_H) \\\n    except.h gt-gcse.h $(TREE_H) cselib.h\n resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(BASIC_BLOCK_H) $(REGS_H) flags.h output.h $(RESOURCE_H) function.h toplev.h \\\n+   $(TM_H) $(BASIC_BLOCK_H) $(REGS_H) $(FLAGS_H) output.h $(RESOURCE_H) function.h toplev.h \\\n    $(INSN_ATTR_H) except.h $(PARAMS_H) $(TM_P_H)\n lcm.o : lcm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n-   hard-reg-set.h flags.h real.h insn-config.h $(INSN_ATTR_H) $(RECOG_H) $(EXPR_H) \\\n+   hard-reg-set.h $(FLAGS_H) real.h insn-config.h $(INSN_ATTR_H) $(RECOG_H) $(EXPR_H) \\\n    $(BASIC_BLOCK_H) $(TM_P_H) $(DF_H) function.h\n tree-ssa-dce.o : tree-ssa-dce.c $(CONFIG_H) system.h errors.h $(TREE_H) \\\n     $(RTL_H) $(TM_P_H) $(TREE_FLOW_H) diagnostic.h $(TIMEVAR_H) $(TM_H) \\\n-    coretypes.h $(TREE_DUMP_H) tree-pass.h flags.h\n+    coretypes.h $(TREE_DUMP_H) tree-pass.h $(FLAGS_H)\n tree-ssa-ccp.o : tree-ssa-ccp.c $(CONFIG_H) system.h errors.h $(TREE_H) \\\n     $(RTL_H) $(TM_P_H) $(TREE_FLOW_H) diagnostic.h tree-inline.h \\\n     $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_GIMPLE_H) \\\n-    $(EXPR_H) tree-pass.h flags.h langhooks.h\n+    $(EXPR_H) tree-pass.h $(FLAGS_H) langhooks.h\n tree-sra.o : tree-sra.c $(CONFIG_H) system.h errors.h $(TREE_H) $(RTL_H) \\\n     $(TM_P_H) $(TREE_FLOW_H) diagnostic.h tree-inline.h \\\n     $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_GIMPLE_H) \\\n-    langhooks.h tree-pass.h flags.h\n+    langhooks.h tree-pass.h $(FLAGS_H)\n tree-complex.o : tree-complex.c $(CONFIG_H) system.h $(TREE_H) \\\n     $(TM_H) $(TREE_FLOW_H) $(TREE_GIMPLE_H) tree-iterator.h tree-pass.h \\\n-    flags.h\n+    $(FLAGS_H)\n df.o : df.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(RECOG_H) function.h $(REGS_H) alloc-pool.h hard-reg-set.h \\\n    $(BASIC_BLOCK_H) $(DF_H)\n var-tracking.o : var-tracking.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(RTL_H) $(TREE_H) hard-reg-set.h insn-config.h reload.h flags.h \\\n+   $(RTL_H) $(TREE_H) hard-reg-set.h insn-config.h reload.h $(FLAGS_H) \\\n    $(BASIC_BLOCK_H) output.h sbitmap.h alloc-pool.h $(FIBHEAP_H) $(HASHTAB_H)\n conflict.o : conflict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(OBSTACK_H) \\\n    $(HASHTAB_H) $(RTL_H) hard-reg-set.h $(BASIC_BLOCK_H)\n profile.o : profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(TREE_H) flags.h output.h $(REGS_H) $(EXPR_H) function.h \\\n+   $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) function.h \\\n    toplev.h $(BASIC_BLOCK_H) $(COVERAGE_H) $(TREE_FLOW_H) value-prof.h\n tree-profile.o : tree-profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(RTL_H) $(TREE_H) flags.h output.h $(REGS_H) $(EXPR_H) function.h \\\n+   $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) function.h \\\n    toplev.h $(BASIC_BLOCK_H) $(COVERAGE_H) $(TREE_H) value-prof.h \\\n    tree-pass.h $(TREE_FLOW_H) $(TIMEVAR_H)\n rtl-profile.o : tree-profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(RTL_H) $(TREE_H) flags.h output.h $(REGS_H) $(EXPR_H) function.h \\\n+   $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) function.h \\\n    toplev.h $(BASIC_BLOCK_H) $(COVERAGE_H) $(TREE_FLOW_H) value-prof.h\n value-prof.o : value-prof.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h value-prof.h $(EXPR_H) output.h flags.h \\\n+   $(BASIC_BLOCK_H) hard-reg-set.h value-prof.h $(EXPR_H) output.h $(FLAGS_H) \\\n    $(RECOG_H) insn-config.h $(OPTABS_H) $(REGS_H)\n-loop.o : loop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h $(LOOP_H) \\\n+loop.o : loop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) $(LOOP_H) \\\n    insn-config.h $(REGS_H) hard-reg-set.h $(RECOG_H) $(EXPR_H) \\\n    real.h $(PREDICT_H) $(BASIC_BLOCK_H) function.h $(CFGLOOP_H) \\\n    toplev.h varray.h except.h cselib.h $(OPTABS_H) $(TM_P_H) $(GGC_H)\n loop-doloop.o : loop-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(RTL_H) flags.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H) \\\n+   $(RTL_H) $(FLAGS_H) $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H) \\\n    toplev.h $(CFGLOOP_H) output.h $(PARAMS_H)\n unroll.o : unroll.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) insn-config.h \\\n-   function.h $(INTEGRATE_H) $(REGS_H) $(RECOG_H) flags.h $(EXPR_H) $(LOOP_H) toplev.h \\\n+   function.h $(INTEGRATE_H) $(REGS_H) $(RECOG_H) $(FLAGS_H) $(EXPR_H) $(LOOP_H) toplev.h \\\n    hard-reg-set.h varray.h $(BASIC_BLOCK_H) $(TM_P_H) $(PREDICT_H) $(PARAMS_H) \\\n    $(CFGLOOP_H)\n alloc-pool.o : alloc-pool.c $(CONFIG_H) $(SYSTEM_H) alloc-pool.h $(HASHTAB_H)\n flow.o : flow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   flags.h insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n+   $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n    $(RECOG_H) function.h except.h $(EXPR_H) $(GGC_H) $(TM_P_H)\n-cfg.o : cfg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h insn-config.h \\\n+cfg.o : cfg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) insn-config.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h $(RECOG_H) \\\n    function.h except.h $(GGC_H) $(TM_P_H) alloc-pool.h $(TIMEVAR_H) \n cfghooks.o: cfghooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(BASIC_BLOCK_H) $(CFGLAYOUT_H) $(TREE_FLOW_H) $(TIMEVAR_H) toplev.h\n-cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n+cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) \\\n    insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h $(RECOG_H) \\\n    function.h except.h $(GGC_H) $(TM_P_H) insn-config.h $(EXPR_H)\n cfganal.o : cfganal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h insn-config.h $(RECOG_H) $(GGC_H) $(TM_P_H)\n-cfgbuild.o : cfgbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n+cfgbuild.o : cfgbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) \\\n    insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h $(RECOG_H) \\\n    function.h except.h $(GGC_H)\n cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(RTL_H) $(TIMEVAR_H) $(BASIC_BLOCK_H) hard-reg-set.h output.h flags.h \\\n+   $(RTL_H) $(TIMEVAR_H) $(BASIC_BLOCK_H) hard-reg-set.h output.h $(FLAGS_H) \\\n    $(RECOG_H) toplev.h $(GGC_H) insn-config.h cselib.h $(TARGET_H) $(TM_P_H) \\\n    $(PARAMS_H) $(REGS_H) $(EMIT_RTL_H)\n cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) coretypes.h $(TM_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) flags.h\n+   $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(FLAGS_H)\n cfgloopanal.o : cfgloopanal.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) coretypes.h $(TM_H)\n loop-iv.o : loop-iv.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(GGC_H) \\\n@@ -1953,26 +1954,26 @@ loop-unroll.o: loop-unroll.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TM_H) \\\n dominance.o : dominance.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(BASIC_BLOCK_H) et-forest.h\n et-forest.o : et-forest.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) et-forest.h alloc-pool.h\n-combine.o : combine.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n+combine.o : combine.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) \\\n    function.h insn-config.h $(INSN_ATTR_H) $(REGS_H) $(EXPR_H) rtlhooks-def.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h toplev.h $(TM_P_H) $(TREE_H) $(TARGET_H)\n regclass.o : regclass.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   hard-reg-set.h flags.h $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(RECOG_H) reload.h \\\n+   hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(RECOG_H) reload.h \\\n    real.h toplev.h function.h output.h $(GGC_H) $(TM_P_H) $(EXPR_H) $(TIMEVAR_H)\n local-alloc.o : local-alloc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   flags.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\\n+   $(FLAGS_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\\n    output.h function.h $(INSN_ATTR_H) toplev.h  except.h $(TM_P_H)\n-bitmap.o : bitmap.c $(CONFIG_H) $(SYSTEM_H)  coretypes.h $(GTM_H) $(RTL_H) flags.h \\\n+bitmap.o : bitmap.c $(CONFIG_H) $(SYSTEM_H)  coretypes.h $(GTM_H) $(RTL_H) $(FLAGS_H) \\\n    $(BASIC_BLOCK_H) $(REGS_H) $(GGC_H)\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n-global.o : global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n+global.o : global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) \\\n    reload.h function.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h insn-config.h output.h \\\n    toplev.h $(TM_P_H)\n varray.o : varray.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) varray.h $(GGC_H) errors.h \\\n    $(HASHTAB_H)\n ra.o : ra.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TM_P_H) insn-config.h \\\n    $(RECOG_H) $(INTEGRATE_H) function.h $(REGS_H) $(OBSTACK_H) hard-reg-set.h \\\n-   $(BASIC_BLOCK_H) $(DF_H) $(EXPR_H) output.h toplev.h flags.h reload.h $(RA_H)\n+   $(BASIC_BLOCK_H) $(DF_H) $(EXPR_H) output.h toplev.h $(FLAGS_H) reload.h $(RA_H)\n ra-build.o : ra-build.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TM_P_H) \\\n    insn-config.h $(RECOG_H) function.h $(REGS_H) hard-reg-set.h \\\n    $(BASIC_BLOCK_H) $(DF_H) output.h $(GGC_H) $(RA_H) gt-ra-build.h reload.h\n@@ -1984,92 +1985,92 @@ ra-debug.o : ra-debug.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n ra-rewrite.o : ra-rewrite.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TM_P_H) function.h $(REGS_H) hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) $(EXPR_H) \\\n    output.h except.h $(RA_H) reload.h insn-config.h\n-reload.o : reload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h output.h \\\n+reload.o : reload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) output.h \\\n    $(EXPR_H) $(OPTABS_H) reload.h $(RECOG_H) hard-reg-set.h insn-config.h \\\n    $(REGS_H) function.h real.h toplev.h $(TM_P_H) $(PARAMS_H)\n-reload1.o : reload1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) real.h flags.h \\\n+reload1.o : reload1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) real.h $(FLAGS_H) \\\n    $(EXPR_H) $(OPTABS_H) reload.h $(REGS_H) hard-reg-set.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) output.h function.h toplev.h $(TM_P_H) \\\n    except.h $(TREE_H)\n rtlhooks.o :  rtlhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    rtlhooks-def.h $(EXPR_H)\n-postreload.o : postreload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) real.h flags.h \\\n+postreload.o : postreload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) real.h $(FLAGS_H) \\\n    $(EXPR_H) $(OPTABS_H) reload.h $(REGS_H) hard-reg-set.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) output.h function.h toplev.h cselib.h $(TM_P_H) \\\n    except.h $(TREE_H)\n caller-save.o : caller-save.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   flags.h $(REGS_H) hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) function.h \\\n+   $(FLAGS_H) $(REGS_H) hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) function.h \\\n    $(RECOG_H) reload.h $(EXPR_H) toplev.h $(TM_P_H)\n bt-load.o : bt-load.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) except.h \\\n    $(BASIC_BLOCK_H) $(RTL_H) hard-reg-set.h $(REGS_H) $(OBSTACK_H) $(TM_P_H) \\\n-   $(FIBHEAP_H) output.h $(TARGET_H) $(EXPR_H) flags.h $(INSN_ATTR_H)\n+   $(FIBHEAP_H) output.h $(TARGET_H) $(EXPR_H) $(FLAGS_H) $(INSN_ATTR_H)\n reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) conditions.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(INSN_ATTR_H) except.h \\\n-   $(RECOG_H) function.h flags.h output.h $(EXPR_H) toplev.h $(PARAMS_H) $(TM_P_H)\n-alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n+   $(RECOG_H) function.h $(FLAGS_H) output.h $(EXPR_H) toplev.h $(PARAMS_H) $(TM_P_H)\n+alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) toplev.h output.h $(ALIAS_H) $(EMIT_RTL_H) \\\n    $(GGC_H) function.h cselib.h $(TREE_H) $(TM_P_H) langhooks.h $(TARGET_H) \\\n    gt-alias.h $(TIMEVAR_H) cgraph.h\n regmove.o : regmove.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) insn-config.h \\\n-   $(RECOG_H) output.h $(REGS_H) hard-reg-set.h flags.h function.h \\\n+   $(RECOG_H) output.h $(REGS_H) hard-reg-set.h $(FLAGS_H) function.h \\\n    $(EXPR_H) $(BASIC_BLOCK_H) toplev.h $(TM_P_H) except.h reload.h\n ddg.o : ddg.c $(DDG_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) \\\n-   toplev.h $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) regs.h function.h flags.h \\\n+   toplev.h $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) regs.h function.h $(FLAGS_H) \\\n    insn-config.h insn-attr.h except.h $(RECOG_H) $(SCHED_INT_H) \\\n    $(CFGLAYOUT_H) $(CFGLOOP_H) $(EXPR_H)\n modulo-sched.o : modulo-sched.c $(DDG_H) $(CONFIG_H) \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) \\\n-   toplev.h $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) regs.h function.h flags.h \\\n+   toplev.h $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) regs.h function.h $(FLAGS_H) \\\n    insn-config.h insn-attr.h except.h $(RECOG_H) $(SCHED_INT_H) \\\n    $(CFGLAYOUT_H) $(CFGLOOP_H) $(EXPR_H) params.h $(COVERAGE_H)\n haifa-sched.o : haifa-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n+   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h function.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) $(TARGET_H)\n sched-deps.o : sched-deps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n+   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h function.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h cselib.h $(PARAMS_H) $(TM_P_H)\n sched-rgn.o : sched-rgn.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n+   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h function.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(PARAMS_H) $(TM_P_H) $(TARGET_H)\n sched-ebb.o : sched-ebb.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n+   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h function.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) $(PARAMS_H)\n sched-vis.o : sched-vis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(SCHED_INT_H) hard-reg-set.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(REGS_H) $(TM_P_H) \\\n    $(TARGET_H) real.h\n final.o : final.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   flags.h intl.h $(REGS_H) $(RECOG_H) conditions.h insn-config.h $(INSN_ATTR_H) \\\n+   $(FLAGS_H) intl.h $(REGS_H) $(RECOG_H) conditions.h insn-config.h $(INSN_ATTR_H) \\\n    function.h real.h output.h hard-reg-set.h except.h debug.h xcoffout.h \\\n    toplev.h reload.h dwarf2out.h $(BASIC_BLOCK_H) $(TM_P_H) $(TARGET_H) \\\n    $(EXPR_H)\n recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) function.h \\\n-   $(BASIC_BLOCK_H) $(REGS_H) $(RECOG_H) $(EXPR_H) hard-reg-set.h flags.h insn-config.h \\\n+   $(BASIC_BLOCK_H) $(REGS_H) $(RECOG_H) $(EXPR_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(INSN_ATTR_H) real.h toplev.h output.h reload.h $(TM_P_H)\n reg-stack.o : reg-stack.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   $(RECOG_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h toplev.h reload.h \\\n+   $(RECOG_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h toplev.h reload.h \\\n    varray.h function.h $(TM_P_H) $(GGC_H) gt-reg-stack.h basic-block.h\n sreal.o: sreal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) sreal.h\n predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   flags.h insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n+   $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n    $(RECOG_H) function.h except.h $(EXPR_H) $(TM_P_H) $(PREDICT_H) sreal.h \\\n    $(PARAMS_H) $(TARGET_H) $(CFGLOOP_H) $(COVERAGE_H)\n lists.o: lists.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h $(RTL_H) $(GGC_H)\n bb-reorder.o : bb-reorder.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(RTL_H) $(BASIC_BLOCK_H) flags.h timevar.h output.h $(CFGLAYOUT_H) $(FIBHEAP_H) \\\n+   $(RTL_H) $(BASIC_BLOCK_H) $(FLAGS_H) timevar.h output.h $(CFGLAYOUT_H) $(FIBHEAP_H) \\\n    $(TARGET_H)\n tracer.o : tracer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h output.h $(CFGLAYOUT_H) flags.h timevar.h \\\n+   $(BASIC_BLOCK_H) hard-reg-set.h output.h $(CFGLAYOUT_H) $(FLAGS_H) timevar.h \\\n    $(PARAMS_H) $(COVERAGE_H)\n cfglayout.o : cfglayout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) insn-config.h $(BASIC_BLOCK_H) hard-reg-set.h output.h \\\n    function.h $(CFGLAYOUT_H) $(CFGLOOP_H) $(TARGET_H) gt-cfglayout.h $(GGC_H)\n-timevar.o : timevar.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TIMEVAR_H) flags.h \\\n+timevar.o : timevar.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TIMEVAR_H) $(FLAGS_H) \\\n    intl.h toplev.h\n regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h $(RECOG_H) function.h \\\n-   $(RESOURCE_H) $(OBSTACK_H) flags.h $(TM_P_H)\n+   $(RESOURCE_H) $(OBSTACK_H) $(FLAGS_H) $(TM_P_H)\n ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(REGS_H) toplev.h flags.h insn-config.h function.h $(RECOG_H) $(TARGET_H) \\\n+   $(REGS_H) toplev.h $(FLAGS_H) insn-config.h function.h $(RECOG_H) $(TARGET_H) \\\n    $(BASIC_BLOCK_H) $(EXPR_H) output.h except.h $(TM_P_H) real.h $(OPTABS_H) \\\n    $(CFGLOOP_H)\n params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) toplev.h\n@@ -2145,7 +2146,7 @@ s-conditions : $(md_file) genconditions$(build_exeext)\n \n insn-conditions.o : insn-conditions.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(GTM_H) $(RTL_H) $(TM_P_H) $(REGS_H) function.h $(RECOG_H) real.h output.h \\\n-  flags.h hard-reg-set.h $(RESOURCE_H) toplev.h reload.h gensupport.h \\\n+  $(FLAGS_H) hard-reg-set.h $(RESOURCE_H) toplev.h reload.h gensupport.h \\\n   insn-constants.h\n \t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) insn-conditions.c\n \n@@ -2172,7 +2173,7 @@ s-constants : $(md_file) genconstants$(build_exeext)\n \n insn-emit.o : insn-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(EXPR_H) real.h output.h insn-config.h $(OPTABS_H) reload.h \\\n-  $(RECOG_H) toplev.h function.h flags.h hard-reg-set.h $(RESOURCE_H) $(TM_P_H)\n+  $(RECOG_H) toplev.h function.h $(FLAGS_H) hard-reg-set.h $(RESOURCE_H) $(TM_P_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-emit.c \\\n \t  $(OUTPUT_OPTION)\n \n@@ -2183,7 +2184,7 @@ s-emit : $(md_file) genemit$(build_exeext)\n \t$(STAMP) s-emit\n \n insn-recog.o : insn-recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(RTL_H) insn-config.h $(RECOG_H) real.h output.h flags.h  function.h \\\n+  $(RTL_H) insn-config.h $(RECOG_H) real.h output.h $(FLAGS_H)  function.h \\\n   hard-reg-set.h $(RESOURCE_H) $(TM_P_H) toplev.h reload.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-recog.c \\\n \t  $(OUTPUT_OPTION)\n@@ -2195,7 +2196,7 @@ s-recog : $(md_file) genrecog$(build_exeext)\n \t$(STAMP) s-recog\n \n insn-opinit.o : insn-opinit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(RTL_H) insn-config.h flags.h $(RECOG_H) $(EXPR_H) $(OPTABS_H) reload.h\n+  $(RTL_H) insn-config.h $(FLAGS_H) $(RECOG_H) $(EXPR_H) $(OPTABS_H) reload.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-opinit.c \\\n \t  $(OUTPUT_OPTION)\n \n@@ -2230,7 +2231,7 @@ s-peep : $(md_file) genpeep$(build_exeext)\n \n insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(REGS_H) real.h output.h $(INSN_ATTR_H) insn-config.h toplev.h \\\n-  $(RECOG_H) $(TM_P_H) flags.h\n+  $(RECOG_H) $(TM_P_H) $(FLAGS_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-attrtab.c \\\n \t  $(OUTPUT_OPTION)\n \n@@ -2249,7 +2250,7 @@ s-attrtab : $(md_file) genattrtab$(build_exeext)\n insn-output.o : insn-output.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(GGC_H) $(REGS_H) real.h conditions.h hard-reg-set.h \\\n   insn-config.h $(INSN_ATTR_H) $(EXPR_H) output.h $(RECOG_H) function.h \\\n-  toplev.h flags.h insn-codes.h $(TM_P_H) $(TARGET_H)\n+  toplev.h $(FLAGS_H) insn-codes.h $(TM_P_H) $(TARGET_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-output.c \\\n \t  $(OUTPUT_OPTION)\n \n@@ -2537,7 +2538,7 @@ print-rtl1.o: $(srcdir)/print-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) print-rtl1.c $(OUTPUT_OPTION)\n \n $(BUILD_PREFIX_1)bitmap.o: $(srcdir)/bitmap.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) \\\n-  $(RTL_H) flags.h $(BASIC_BLOCK_H) $(REGS_H) $(GGC_H)\n+  $(RTL_H) $(FLAGS_H) $(BASIC_BLOCK_H) $(REGS_H) $(GGC_H)\n \trm -f $(BUILD_PREFIX)bitmap.c\n \tsed -e 's/config[.]h/bconfig.h/' $(srcdir)/bitmap.c > $(BUILD_PREFIX)bitmap.c\n \t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) $(BUILD_PREFIX)bitmap.c $(OUTPUT_OPTION)"}, {"sha": "9f3e79a049391bac87c93134bf26ccd59add4209", "filename": "gcc/c.opt", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -36,7 +36,14 @@\n ; \"JoinedOrMissing\" instead of \"Joined\".  If the argument to a switch\n ; is a non-negative integer, you can specify \"UInteger\" and the switch\n ; decoder will convert the argument for you, or complain to the user\n-; if the argument is invalid.\n+; if the argument is invalid.  \"Var(name,set)\" creates an integer\n+; variable \"name\".  The variable is declared and initialized to value\n+; given by \"Init(value)\" (or zero if this property is not defined).\n+; When the option is passed to compiler, this variable is set to \"set\"\n+; if value passed through the flag is nonzero, !\"set\" if value is zero,\n+; or to value if \"set\" is omitted.  If \"VarExists\"  is specified, the\n+; declaration for the variable is not created.  If \"Report\" is specified,\n+; the flag is output with -fverbose-asm.\n \n ; The third field is the help text to output with --help.  This is\n ; automatically line-wrapped on output.  Normally the switch is output"}, {"sha": "b6413817dd2f98a77b3385f2cb1069e743c8a384", "filename": "gcc/common.opt", "status": "modified", "additions": 168, "deletions": 167, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -1,4 +1,5 @@\n ; Options for the language- and target-independent parts of the compiler.\n+\n ; Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n@@ -53,55 +54,55 @@ Common RejectNegative\n This switch is deprecated; use -Wextra instead\n \n Waggregate-return\n-Common\n+Common Var(warn_aggregate_return)\n Warn about returning structures, unions or arrays\n \n Wcast-align\n-Common\n+Common Var(warn_cast_align)\n Warn about pointer casts which increase alignment\n \n Wdeprecated-declarations\n-Common\n+Common Var(warn_deprecated_decl) Init(1)\n Warn about uses of __attribute__((deprecated)) declarations\n \n Wdisabled-optimization\n-Common\n+Common Var(warn_disabled_optimization)\n Warn when an optimization pass is disabled\n \n Werror\n-Common\n+Common Var(warnings_are_errors)\n Treat all warnings as errors\n \n Wextra\n Common\n Print extra (possibly unwanted) warnings\n \n Wfatal-errors\n-Common\n+Common Var(flag_fatal_errors)\n Exit on the first error occurred\n \n Winline\n-Common\n+Common Var(warn_inline)\n Warn when an inlined function cannot be inlined\n \n Wlarger-than-\n Common RejectNegative Joined UInteger\n -Wlarger-than-<number>\tWarn if an object is larger than <number> bytes\n \n Wmissing-noreturn\n-Common\n+Common Var(warn_missing_noreturn)\n Warn about functions which might be candidates for __attribute__((noreturn))\n \n Wpacked\n-Common\n+Common Var(warn_packed)\n Warn when the packed attribute has no effect on struct layout\n \n Wpadded\n-Common\n+Common Var(warn_padded)\n Warn when padding is required to align structure members\n \n Wshadow\n-Common\n+Common Var(warn_shadow)\n Warn when one local variable shadows another\n \n Wstrict-aliasing\n@@ -113,51 +114,51 @@ Common Joined UInteger\n Warn about code which might break strict aliasing rules\n \n Wswitch\n-Common\n+Common Var(warn_switch)\n Warn about enumerated switches, with no default, missing a case\n \n Wswitch-default\n-Common\n+Common Var(warn_switch_default)\n Warn about enumerated switches missing a \\\"default:\\\" statement\n \n Wswitch-enum\n-Common\n+Common Var(warn_switch_enum)\n Warn about all enumerated switches missing a specific case\n \n Wsystem-headers\n-Common\n+Common Var(warn_system_headers)\n Do not suppress warnings from system headers\n \n Wuninitialized\n-Common\n+Common Var(warn_uninitialized)\n Warn about uninitialized automatic variables\n \n Wunreachable-code\n-Common\n+Common Var(warn_notreached)\n Warn about code that will never be executed\n \n Wunused\n Common\n Enable all -Wunused- warnings\n \n Wunused-function\n-Common\n+Common Var(warn_unused_function)\n Warn when a function is unused\n \n Wunused-label\n-Common\n+Common Var(warn_unused_label)\n Warn when a label is unused\n \n Wunused-parameter\n-Common\n+Common Var(warn_unused_parameter)\n Warn when a function parameter is unused\n \n Wunused-value\n-Common\n+Common Var(warn_unused_value)\n Warn when an expression value is unused\n \n Wunused-variable\n-Common\n+Common Var(warn_unused_variable)\n Warn when a variable is unused\n \n aux-info\n@@ -182,80 +183,80 @@ Common Separate\n -dumpbase <file>\tSet the file basename to be used for dumps\n \n fPIC\n-Common\n+Common Report Var(flag_pic,2)\n \n fPIE\n-Common\n+Common Report Var(flag_pie,2)\n \n fabi-version=\n-Common Joined UInteger\n+Common Joined UInteger Var(flag_abi_version) Init(2)\n \n falign-functions\n-Common\n+Common Report Var(align_functions,0)\n Align the start of functions\n \n falign-functions=\n Common RejectNegative Joined UInteger\n \n falign-jumps\n-Common\n+Common Report Var(align_jumps,0)\n Align labels which are only reached by jumping\n \n falign-jumps=\n Common RejectNegative Joined UInteger\n \n falign-labels\n-Common\n+Common Report Var(align_labels,0)\n Align all labels\n \n falign-labels=\n Common RejectNegative Joined UInteger\n \n falign-loops\n-Common\n+Common Report Var(align_loops)\n Align the start of loops\n \n falign-loops=\n Common RejectNegative Joined UInteger\n \n fargument-alias\n-Common\n+Common Report Var(flag_argument_noalias,0)\n Specify that arguments may alias each other and globals\n \n fargument-noalias\n-Common\n+Common Report Var(flag_argument_noalias,1) VarExists\n Assume arguments may alias globals but not each other\n \n fargument-noalias-global\n-Common\n+Common Report Var(flag_argument_noalias,2) VarExists\n Assume arguments alias neither each other nor globals\n \n fasynchronous-unwind-tables\n-Common\n+Common Report Var(flag_asynchronous_unwind_tables)\n Generate unwind tables that are exact at each instruction boundary\n \n fbounds-check\n-Common\n+Common Report Var(flag_bounds_check)\n Generate code to check bounds before indexing arrays\n \n fbranch-count-reg\n-Common\n+Common Report Var(flag_branch_on_count_reg) Init(1)\n Replace add, compare, branch with branch on count register\n \n fbranch-probabilities\n-Common\n+Common Report Var(flag_branch_probabilities)\n Use profiling information for branch probabilities\n \n fbranch-target-load-optimize\n-Common\n+Common Report Var(flag_branch_target_load_optimize)\n Perform branch target load optimization before prologue / epilogue threading\n \n fbranch-target-load-optimize2\n-Common\n+Common Report Var(flag_branch_target_load_optimize2)\n Perform branch target load optimization after prologue / epilogue threading\n \n fbtr-bb-exclusive\n-Common\n+Common Report Var(flag_btr_bb_exclusive)\n Restrict target load migration not to re-use registers in any basic block\n \n fcall-saved-\n@@ -267,43 +268,43 @@ Common Joined RejectNegative\n -fcall-used-<register>\tMark <register> as being corrupted by function calls\n \n fcaller-saves\n-Common\n+Common Report Var(flag_caller_saves)\n Save registers around function calls\n \n fcommon\n-Common\n+Common Report Var(flag_no_common,0)\n Do not put uninitialized globals in the common section\n \n fcprop-registers\n-Common\n+Common Report Var(flag_cprop_registers)\n Perform a register copy-propagation optimization pass\n \n fcrossjumping\n-Common\n+Common Report Var(flag_crossjumping)\n Perform cross-jumping optimization\n \n fcse-follow-jumps\n-Common\n+Common Report Var(flag_cse_follow_jumps)\n When running CSE, follow jumps to their targets\n \n fcse-skip-blocks\n-Common\n+Common Report Var(flag_cse_skip_blocks)\n When running CSE, follow conditional jumps\n \n fdata-sections\n-Common\n+Common Report Var(flag_data_sections)\n Place data items into their own section\n \n fdefer-pop\n-Common\n+Common Report Var(flag_defer_pop)\n Defer popping functions args from stack until later\n \n fdelayed-branch\n-Common\n+Common Report Var(flag_delayed_branch)\n Attempt to fill delay slots of branch instructions\n \n fdelete-null-pointer-checks\n-Common\n+Common Report Var(flag_delete_null_pointer_checks)\n Delete useless null pointer checks\n \n fdiagnostics-show-location=\n@@ -315,108 +316,108 @@ Common Joined RejectNegative\n -fdump-<type>\tDump various compiler internals to a file\n \n fdump-unnumbered\n-Common\n+Common Report Var(flag_dump_unnumbered) VarExists\n Suppress output of instruction numbers and line number notes in debugging dumps\n \n feliminate-dwarf2-dups\n-Common\n+Common Report Var(flag_eliminate_dwarf2_dups)\n Perform DWARF2 duplicate elimination\n \n feliminate-unused-debug-symbols\n-Common\n+Common Report Var(flag_debug_only_used_symbols)\n Perform unused type elimination in debug info\n \n feliminate-unused-debug-types\n-Common\n+Common Report Var(flag_eliminate_unused_debug_types) Init(1)\n Perform unused type elimination in debug info\n \n fexceptions\n-Common\n+Common Report Var(flag_exceptions)\n Enable exception handling\n \n fexpensive-optimizations\n-Common\n+Common Report Var(flag_expensive_optimizations)\n Perform a number of minor, expensive optimizations\n \n ffast-math\n Common\n \n ffinite-math-only\n-Common\n+Common Report Var(flag_finite_math_only)\n Assume no NaNs or infinities are generated\n \n ffixed-\n Common Joined RejectNegative\n -ffixed-<register>\tMark <register> as being unavailable to the compiler\n \n ffloat-store\n-Common\n+Common Report Var(flag_float_store)\n Do not store floats in registers\n \n fforce-addr\n-Common\n+Common Report Var(flag_force_addr)\n Copy memory address constants into registers before use\n \n fforce-mem\n-Common\n+Common Report Var(flag_force_mem)\n Copy memory operands into registers before use\n \n ffunction-cse\n-Common\n+Common Report Var(flag_no_function_cse,0)\n Allow function addresses to be held in registers\n \n ffunction-sections\n-Common\n+Common Report Var(flag_function_sections)\n Place each function into its own section\n \n fgcse\n-Common\n+Common Report Var(flag_gcse)\n Perform global common subexpression elimination\n \n fgcse-lm\n-Common\n+Common Report Var(flag_gcse_lm) Init(1)\n Perform enhanced load motion during global common subexpression elimination\n \n fgcse-sm\n-Common\n+Common Report Var(flag_gcse_sm) Init(1)\n Perform store motion after global common subexpression elimination\n \n fgcse-las\n-Common\n+Common Report Var(flag_gcse_las) Init(1)\n Perform redundant load after store elimination in global common subexpression\n elimination\n \n fgcse-after-reload\n-Common\n+Common Report Var(flag_gcse_after_reload)\n Perform global common subexpression elimination after register allocation\n has finished.\n \n fguess-branch-probability\n-Common\n+Common Report Var(flag_guess_branch_prob)\n Enable guessing of branch probabilities\n \n fident\n-Common\n+Common Report Var(flag_no_ident,0)\n Process #ident directives\n \n fif-conversion\n-Common\n+Common Report Var(flag_if_conversion)\n Perform conversion of conditional jumps to branchless equivalents\n \n fif-conversion2\n-Common\n+Common Report Var(flag_if_conversion2)\n Perform conversion of conditional jumps to conditional execution\n \n finhibit-size-directive\n-Common\n+Common Report Var(flag_inhibit_size_directive)\n Do not generate .size directives\n \n finline\n-Common\n+Common Report Var(flag_no_inline,0) Init(2)\n Pay attention to the \\\"inline\\\" keyword\n \n finline-functions\n-Common\n+Common Report Var(flag_inline_functions)\n Integrate simple functions into their callers\n \n finline-limit-\n@@ -427,131 +428,131 @@ Common RejectNegative Joined UInteger\n -finline-limit=<number>\tLimit the size of inlined functions to <number>\n \n finstrument-functions\n-Common\n+Common Report Var(flag_instrument_function_entry_exit)\n Instrument function entry and exit with profiling calls\n \n fkeep-inline-functions\n-Common\n+Common Report Var(flag_keep_inline_functions)\n Generate code for functions even if they are fully inlined\n \n fkeep-static-consts\n-Common\n+Common Report Var(flag_keep_static_consts) Init(1)\n Emit static const variables even if they are not used\n \n fleading-underscore\n-Common\n+Common Report Var(flag_leading_underscore) Init(-1)\n Give external symbols a leading underscore\n \n floop-optimize\n-Common\n+Common Report Var(flag_loop_optimize)\n Perform loop optimizations\n \n fmath-errno\n-Common\n+Common Report Var(flag_errno_math) Init(1)\n Set errno after built-in math functions\n \n fmem-report\n-Common\n+Common Report Var(mem_report)\n Report on permanent memory allocation\n \n fmerge-all-constants\n-Common\n+Common Report Var(flag_merge_constants,2) Init(1)\n Attempt to merge identical constants and constant variables\n \n fmerge-constants\n-Common\n+Common Report Var(flag_merge_constants,1) VarExists\n Attempt to merge identical constants across compilation units\n \n fmessage-length=\n Common RejectNegative Joined UInteger\n -fmessage-length=<number>\tLimit diagnostics to <number> characters per line.  0 suppresses line-wrapping\n \n fmodulo-sched\n-Common\n+Common Report Var(flag_modulo_sched)\n Perform SMS based modulo scheduling before the first scheduling pass\n \n fmove-all-movables\n-Common\n+Common Report Var(flag_move_all_movables)\n Force all loop invariant computations out of loops\n \n fmudflap\n-Common RejectNegative\n+Common RejectNegative Report Var(flag_mudflap)\n Add mudflap bounds-checking instrumentation for single-threaded program.\n \n fmudflapth\n-Common RejectNegative\n+Common RejectNegative Report Var(flag_mudflap_threads)\n Add mudflap bounds-checking instrumentation for multi-threaded program.\n \n fmudflapir\n-Common RejectNegative\n+Common RejectNegative Report Var(flag_mudflap_ignore_reads)\n Ignore read operations when inserting mudflap instrumentation.\n \n fnew-ra\n-Common\n+Common Report Var(flag_new_regalloc)\n Use graph-coloring register allocation\n \n fnon-call-exceptions\n-Common\n+Common Report Var(flag_non_call_exceptions)\n Support synchronous non-call exceptions\n \n fold-unroll-loops\n-Common\n+Common Report Var(flag_old_unroll_loops)\n Perform loop unrolling when iteration count is known\n \n fold-unroll-all-loops\n-Common\n+Common Report Var(flag_old_unroll_all_loops)\n Perform loop unrolling for all loops\n \n fomit-frame-pointer\n-Common\n+Common Report Var(flag_omit_frame_pointer)\n When possible do not generate stack frames\n \n foptimize-register-move\n-Common\n+Common Report Var(flag_regmove)\n Do the full register move optimization pass\n \n foptimize-sibling-calls\n-Common\n+Common Report Var(flag_optimize_sibling_calls)\n Optimize sibling and tail recursive calls\n \n fpack-struct\n-Common\n+Common Report Var(flag_pack_struct)\n Pack structure members together without holes\n \n fpcc-struct-return\n-Common\n+Common Report Var(flag_pcc_struct_return,1) VarExists\n Return small aggregates in memory, not registers\n \n fpeel-loops\n-Common\n+Common Report Var(flag_peel_loops)\n Perform loop peeling\n \n fpeephole\n-Common\n+Common Report Var(flag_no_peephole,0)\n Enable machine specific peephole optimizations\n \n fpeephole2\n-Common\n+Common Report Var(flag_peephole2)\n Enable an RTL peephole pass before sched2\n \n fpic\n-Common\n+Common Report Var(flag_pic,1) VarExists\n Generate position-independent code if possible\n \n fpie\n-Common\n+Common Report Var(flag_pie,1) VarExists\n Generate position-independent code for executables if possible\n \n fprefetch-loop-arrays\n-Common\n+Common Report Var(flag_prefetch_loop_arrays)\n Generate prefetch instructions, if available, for arrays in loops\n \n fprofile\n-Common\n+Common Report Var(profile_flag)\n Enable basic program profiling code\n \n fprofile-arcs\n-Common\n+Common Report Var(profile_arc_flag)\n Insert arc-based program profiling code\n \n fprofile-generate\n@@ -563,7 +564,7 @@ Common\n Enable common options for performing profile feedback directed optimizations\n \n fprofile-values\n-Common\n+Common Report Var(flag_profile_values)\n Insert code to profile values of expressions\n \n frandom-seed\n@@ -574,111 +575,111 @@ Common Joined RejectNegative\n -frandom-seed=<string>\tMake compile reproducible using <string>\n \n freduce-all-givs\n-Common\n+Common Report Var(flag_reduce_all_givs)\n Strength reduce all loop general induction variables\n \n freg-struct-return\n-Common\n+Common Report Var(flag_pcc_struct_return,0) VarExists\n Return small aggregates in registers\n \n fregmove\n-Common\n+Common Report Var(flag_regmove)\n Enables a register move optimization\n \n frename-registers\n-Common\n+Common Report Var(flag_rename_registers)\n Perform a register renaming optimization pass\n \n freorder-blocks\n-Common\n+Common Report Var(flag_reorder_blocks)\n Reorder basic blocks to improve code placement\n \n freorder-blocks-and-partition\n-Common\n+Common Report Var(flag_reorder_blocks_and_partition)\n Reorder basic blocks and partition into hot and cold sections\n \n freorder-functions\n-Common\n+Common Report Var(flag_reorder_functions)\n Reorder functions to improve code placement\n \n frerun-cse-after-loop\n-Common\n+Common Report Var(flag_rerun_cse_after_loop)\n Add a common subexpression elimination pass after loop optimizations\n \n frerun-loop-opt\n-Common\n+Common Report Var(flag_rerun_loop_opt)\n Run the loop optimizer twice\n \n frounding-math\n-Common\n+Common Report Var(flag_rounding_math)\n Disable optimizations that assume default FP rounding behavior\n \n fsched-interblock\n-Common\n+Common Report Var(flag_schedule_interblock) Init(1)\n Enable scheduling across basic blocks\n \n fsched-spec\n-Common\n+Common Report Var(flag_schedule_speculative) Init(1)\n Allow speculative motion of non-loads\n \n fsched-spec-load\n-Common\n+Common Report Var(flag_schedule_speculative_load)\n Allow speculative motion of some loads\n \n fsched-spec-load-dangerous\n-Common\n+Common Report Var(flag_schedule_speculative_load_dangerous)\n Allow speculative motion of more loads\n \n fsched-verbose=\n Common RejectNegative Joined\n -fsched-verbose=<number>\tSet the verbosity level of the scheduler\n \n fsched2-use-superblocks\n-Common\n+Common Report Var(flag_sched2_use_superblocks)\n If scheduling post reload, do superblock scheduling\n \n fsched2-use-traces\n-Common\n+Common Report Var(flag_sched2_use_traces)\n If scheduling post reload, do trace scheduling\n \n fschedule-insns\n-Common\n+Common Report Var(flag_schedule_insns)\n Reschedule instructions before register allocation\n \n fschedule-insns2\n-Common\n+Common Report Var(flag_schedule_insns_after_reload)\n Reschedule instructions after register allocation\n \n fsched-stalled-insns\n-Common\n+Common Report Var(flag_sched_stalled_insns)\n Allow premature scheduling of queued insns\n \n fsched-stalled-insns=\n Common RejectNegative Joined UInteger \n -fsched-stalled-insns=<number>       Set number of queued insns that can be prematurely scheduled\n \n fsched-stalled-insns-dep\n-Common\n+Common Report Var(flag_sched_stalled_insns_dep,1) Init(1)\n Set dependence distance checking in premature scheduling of queued insns\n \n fsched-stalled-insns-dep=\n Common RejectNegative Joined UInteger\n -fsched-stalled-insns-dep=<number>   Set dependence distance checking in premature scheduling of queued insns\n \n fshared-data\n-Common\n+Common Report Var(flag_shared_data)\n Mark data as shared rather than private\n \n fsignaling-nans\n-Common\n+Common Report Var(flag_signaling_nans)\n Disable optimizations observable by IEEE signaling NaNs\n \n fsingle-precision-constant\n-Common\n+Common Report Var(flag_single_precision_constant)\n Convert floating point constants to single precision constants\n \n fstack-check\n-Common\n+Common Report Var(flag_stack_check)\n Insert stack checking code into the program\n \n fstack-limit\n@@ -693,142 +694,142 @@ Common RejectNegative Joined\n -fstack-limit-symbol=<name>\tTrap if the stack goes past symbol <name>\n \n fstrength-reduce\n-Common\n+Common Report Var(flag_strength_reduce)\n Perform strength reduction optimizations\n \n fstrict-aliasing\n-Common\n+Common Report Var(flag_strict_aliasing)\n Assume strict aliasing rules apply\n \n fsyntax-only\n-Common\n+Common Report Var(flag_syntax_only)\n Check for syntax errors, then stop\n \n ftest-coverage\n-Common\n+Common Report Var(flag_test_coverage)\n Create data files needed by \\\"gcov\\\"\n \n fthread-jumps\n-Common\n+Common Report Var(flag_thread_jumps)\n Perform jump threading optimizations\n \n ftime-report\n-Common\n+Common Report Var(time_report)\n Report the time taken by each compiler pass\n \n ftls-model=\n Common Joined RejectNegative\n -ftls-model=[global-dynamic|local-dynamic|initial-exec|local-exec]\tSet the default thread-local storage code generation model\n \n ftracer\n-Common\n+Common Report Var(flag_tracer)\n Perform superblock formation via tail duplication\n \n ftrapping-math\n-Common\n+Common Report Var(flag_trapping_math)\n Assume floating-point operations can trap\n \n ftrapv\n-Common\n+Common Report Var(flag_trapv)\n Trap for signed overflow in addition, subtraction and multiplication\n \n ftree-based-profiling\n-Common\n+Common Report Var(flag_tree_based_profiling)\n Use tree-ssa based implementation of profiling\n \n ftree-ccp\n-Common\n+Common Report Var(flag_tree_ccp)\n Enable SSA-CCP optimization on trees\n \n ftree-ch\n-Common\n+Common Report Var(flag_tree_ch)\n Enable loop header copying on trees\n \n ftree-combine-temps\n-Common\n+Common Report Var(flag_tree_combine_temps)\n Coalesce memory temporaries in the SSA->normal pass\n \n ftree-copyrename\n-Common\n+Common Report Var(flag_tree_copyrename)\n Replace SSA temporaries with better names in copies.\n \n ftree-dce\n-Common\n+Common Report Var(flag_tree_dce)\n Enable SSA dead code elimination optimization on trees\n \n ftree-dominator-opts\n-Common\n+Common Report Var(flag_tree_dom)\n Enable dominator optimizations\n \n ftree-dse\n-Common\n+Common Report Var(flag_tree_dse)\n Enable dead store elimination\n \n ftree-points-to=\n Common Joined RejectNegative\n \n ftree-pre\n-Common\n+Common Report Var(flag_tree_pre)\n Enable SSA-PRE optimization on trees\n \n ftree-sra\n-Common\n+Common Report Var(flag_tree_sra)\n Perform scalar replacement of aggregates\n \n ftree-ter\n-Common\n+Common Report Var(flag_tree_ter)\n Replace temporary expressions in the SSA->normal pass\n \n ftree-lrs\n-Common\n+Common Report Var(flag_tree_live_range_split)\n Perform live range splitting during the SSA->normal pass.\n \n funit-at-a-time\n-Common\n+Common Report Var(flag_unit_at_a_time)\n Compile whole compilation unit at a time\n \n funroll-loops\n-Common\n+Common Report Var(flag_unroll_loops)\n Perform loop unrolling when iteration count is known\n \n funroll-all-loops\n-Common\n+Common Report Var(flag_unroll_all_loops)\n Perform loop unrolling for all loops\n \n funsafe-math-optimizations\n-Common\n+Common Report Var(flag_unsafe_math_optimizations)\n Allow math optimizations that may violate IEEE or ISO standards\n \n funswitch-loops\n-Common\n+Common Report Var(flag_unswitch_loops)\n Perform loop unswitching\n \n funwind-tables\n-Common\n+Common Report Var(flag_unwind_tables)\n Just generate unwind tables for exception handling\n \n fvar-tracking\n-Common\n+Common Report Var(flag_var_tracking) VarExists\n Perform variable tracking\n \n fverbose-asm\n-Common\n+Common Report Var(flag_verbose_asm)\n Add extra commentary to assembler output\n \n fvpt\n-Common\n+Common Report Var(flag_value_profile_transformations)\n Use expression value profiles in optimizations\n \n fweb\n-Common\n+Common Report Var(flag_web) VarExists\n Construct webs and split unrelated uses of single variable\n \n fwrapv\n-Common\n+Common Report Var(flag_wrapv)\n Assume signed arithmetic overflow wraps around\n \n fzero-initialized-in-bss\n-Common\n+Common Report Var(flag_zero_initialized_in_bss) Init(1)\n Put zero initialized data in the bss section\n \n g\n@@ -875,27 +876,27 @@ Common Joined Separate\n -o <file>\tPlace output into <file>\n \n p\n-Common\n+Common Var(profile_flag)\n Enable function profiling\n \n pedantic\n-Common\n+Common Var(pedantic)\n Issue warnings needed for strict compliance to the standard\n \n pedantic-errors\n Common\n Like -pedantic but issue them as errors\n \n quiet\n-Common\n+Common Var(quiet_flag)\n Do not display functions compiled or elapsed time\n \n version\n-Common\n+Common Var(version_flag)\n Display the compiler's version\n \n w\n-Common\n+Common Var(inhibit_warnings)\n Suppress warnings\n \n ; This comment is to ensure we retain the blank line above."}, {"sha": "c7cfb11b50492ddda4708c487c07f6f4b3e3a388", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -68,7 +68,6 @@ diagnostic_context *global_dc = &global_diagnostic_context;\n with preprocessed source if appropriate.\\n\\\n See %s for instructions.\\n\"\n \n-int flag_fatal_errors = 0;\n \f\n /* Return a malloc'd string containing MSG formatted a la printf.  The\n    caller is responsible for freeing the memory.  */"}, {"sha": "7815fbb6141bf5cbaabcadb77cd06049bee71d1c", "filename": "gcc/except.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -82,9 +82,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #endif\n \n \n-/* Nonzero means enable synchronous exceptions for non-call instructions.  */\n-int flag_non_call_exceptions;\n-\n /* Protect cleanup actions with must-not-throw regions, with a call\n    to the given failure handler.  */\n tree (*lang_protect_cleanup_actions) (void);"}, {"sha": "dffe299d5f895b801cbfc6f8f8dafffc1396895c", "filename": "gcc/flags.h", "status": "modified", "additions": 2, "deletions": 76, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -23,6 +23,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_FLAGS_H\n #define GCC_FLAGS_H\n \n+#include \"options.h\"\n+\n enum debug_info_type\n {\n   NO_DEBUG,\t    /* Write no debug info.  */\n@@ -78,109 +80,33 @@ extern int quiet_flag;\n \n extern int mem_report;\n \n-/* Don't print warning messages.  -w.  */\n-\n-extern bool inhibit_warnings;\n-\n-/* Don't suppress warnings from system headers.  -Wsystem-headers.  */\n-\n-extern bool warn_system_headers;\n-\n /* Do print extra warnings (such as for uninitialized variables).\n    -W/-Wextra.  */\n \n extern bool extra_warnings;\n \n-/* If -Werror.  */\n-\n-extern bool warnings_are_errors;\n-\n /* Nonzero to warn about unused variables, functions et.al.  Use\n    set_Wunused() to update the -Wunused-* flags that correspond to the\n    -Wunused option.  */\n \n extern void set_Wunused (int setting);\n \n-extern bool warn_unused_function;\n-extern bool warn_unused_label;\n-extern bool warn_unused_parameter;\n-extern bool warn_unused_variable;\n-extern bool warn_unused_value;\n-\n-/* Nonzero to warn about code which is never reached.  */\n-\n-extern bool warn_notreached;\n-\n-/* Nonzero means warn if inline function is too large.  */\n-\n-extern bool warn_inline;\n-\n /* Nonzero to warn about variables used before they are initialized.  */\n \n extern int warn_uninitialized;\n \n-/* Nonzero means warn about all declarations which shadow others.  */\n-\n-extern bool warn_shadow;\n-\n-/* Warn if a switch on an enum, that does not have a default case,\n-   fails to have a case for every enum value.  */\n-\n-extern bool warn_switch;\n-\n-/* Warn if a switch does not have a default case.  */\n-\n-extern bool warn_switch_default;\n-\n-/* Warn if a switch on an enum fails to have a case for every enum\n-   value (regardless of the presence or otherwise of a default case).  */\n-\n-extern bool warn_switch_enum;\n-\n /* Nonzero means warn about function definitions that default the return type\n    or that use a null return and have a return-type other than void.  */\n \n extern int warn_return_type;\n \n-/* Warn about functions which might be candidates for attribute noreturn.  */\n-\n-extern bool warn_missing_noreturn;\n-\n-/* Nonzero means warn about pointer casts that increase the required\n-   alignment of the target type (and might therefore lead to a crash\n-   due to a misaligned access).  */\n-\n-extern bool warn_cast_align;\n-\n /* Nonzero means warn about any objects definitions whose size is larger\n    than N bytes.  Also want about function definitions whose returned\n    values are larger than N bytes. The value N is in `larger_than_size'.  */\n \n extern bool warn_larger_than;\n extern HOST_WIDE_INT larger_than_size;\n \n-/* Warn if a function returns an aggregate,\n-   since there are often incompatible calling conventions for doing this.  */\n-\n-extern bool warn_aggregate_return;\n-\n-/* Warn if packed attribute on struct is unnecessary and inefficient.  */\n-\n-extern bool warn_packed;\n-\n-/* Warn when gcc pads a structure to an alignment boundary.  */\n-\n-extern bool warn_padded;\n-\n-/* Warn when an optimization pass is disabled.  */\n-\n-extern bool warn_disabled_optimization;\n-\n-/* Nonzero means warn about uses of __attribute__((deprecated)) \n-   declarations.  */\n-\n-extern bool warn_deprecated_decl;\n-\n /* Nonzero means warn about constructs which might not be strict\n    aliasing safe.  */\n "}, {"sha": "6b30e5f15518cfc379b3df2283d7b3e9e7711019", "filename": "gcc/opts.c", "status": "modified", "additions": 24, "deletions": 717, "changes": 741, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -46,86 +46,19 @@ bool g_switch_set;\n /* True if we should exit after parsing options.  */\n bool exit_after_options;\n \n-/* If -version.  */\n-bool version_flag;\n-\n /* Print various extra warnings.  -W/-Wextra.  */\n bool extra_warnings;\n \n-/* Don't print warning messages.  -w.  */\n-bool inhibit_warnings;\n-\n-/* Treat warnings as errors.  -Werror.  */\n-bool warnings_are_errors;\n-\n-/* Warn if a function returns an aggregate, since there are often\n-   incompatible calling conventions for doing this.  */\n-bool warn_aggregate_return;\n-\n-/* Nonzero means warn about pointer casts that increase the required\n-   alignment of the target type (and might therefore lead to a crash\n-   due to a misaligned access).  */\n-bool warn_cast_align;\n-\n-/* Nonzero means warn about uses of __attribute__((deprecated))\n-   declarations.  */\n-bool warn_deprecated_decl = true;\n-\n-/* Warn when an optimization pass is disabled.  */\n-bool warn_disabled_optimization;\n-\n-/* Nonzero means warn if inline function is too large.  */\n-bool warn_inline;\n-\n /* True to warn about any objects definitions whose size is larger\n    than N bytes.  Also want about function definitions whose returned\n    values are larger than N bytes, where N is `larger_than_size'.  */\n bool warn_larger_than;\n HOST_WIDE_INT larger_than_size;\n \n-/* Warn about functions which might be candidates for attribute noreturn.  */\n-bool warn_missing_noreturn;\n-\n-/* True to warn about code which is never reached.  */\n-bool warn_notreached;\n-\n-/* Warn if packed attribute on struct is unnecessary and inefficient.  */\n-bool warn_packed;\n-\n-/* Warn when gcc pads a structure to an alignment boundary.  */\n-bool warn_padded;\n-\n-/* True means warn about all declarations which shadow others.  */\n-bool warn_shadow;\n-\n /* Nonzero means warn about constructs which might not be\n    strict-aliasing safe.  */\n int warn_strict_aliasing;\n \n-/* True to warn if a switch on an enum, that does not have a default\n-   case, fails to have a case for every enum value.  */\n-bool warn_switch;\n-\n-/* Warn if a switch does not have a default case.  */\n-bool warn_switch_default;\n-\n-/* Warn if a switch on an enum fails to have a case for every enum\n-   value (regardless of the presence or otherwise of a default case).  */\n-bool warn_switch_enum;\n-\n-/* Don't suppress warnings from system headers.  -Wsystem-headers.  */\n-bool warn_system_headers;\n-\n-/* True to warn about variables used before they are initialized.  */\n-int warn_uninitialized;\n-\n-/* True to warn about unused variables, functions et.al.  */\n-bool warn_unused_function;\n-bool warn_unused_label;\n-bool warn_unused_parameter;\n-bool warn_unused_variable;\n-bool warn_unused_value;\n-\n /* Hack for cooperation between set_Wunused and set_Wextra.  */\n static bool maybe_warn_unused_parameter;\n \n@@ -420,6 +353,19 @@ handle_option (const char **argv, unsigned int lang_mask)\n \t}\n     }\n \n+  if (option->flag_var)\n+    {\n+      if (option->has_set_value)\n+\t{\n+\t  if (value)\n+\t    *option->flag_var = option->set_value;\n+\t  else\n+\t    *option->flag_var = !option->set_value;\n+\t}\n+      else\n+\t*option->flag_var = value;\n+    }\n+  \n   if (option->flags & lang_mask)\n     if (lang_hooks.handle_option (opt_index, arg, value) == 0)\n       result = 0;\n@@ -691,18 +637,17 @@ decode_options (unsigned int argc, const char **argv)\n }\n \n /* Handle target- and language-independent options.  Return zero to\n-   generate an \"unknown option\" message.  */\n+   generate an \"unknown option\" message.  Only options that need\n+   extra handling need to be listed here; if you simply want\n+   VALUE assigned to a variable, it happens automatically.  */\n+\n static int\n-common_handle_option (size_t scode, const char *arg,\n-\t\t      int value ATTRIBUTE_UNUSED)\n+common_handle_option (size_t scode, const char *arg, int value)\n {\n   enum opt_code code = (enum opt_code) scode;\n \n   switch (code)\n     {\n-    default:\n-      abort ();\n-\n     case OPT__help:\n       print_help ();\n       exit_after_options = true;\n@@ -737,112 +682,24 @@ common_handle_option (size_t scode, const char *arg,\n       set_Wextra (value);\n       break;\n \n-    case OPT_Waggregate_return:\n-      warn_aggregate_return = value;\n-      break;\n-\n-    case OPT_Wcast_align:\n-      warn_cast_align = value;\n-      break;\n-\n-    case OPT_Wdeprecated_declarations:\n-      warn_deprecated_decl = value;\n-      break;\n-\n-    case OPT_Wdisabled_optimization:\n-      warn_disabled_optimization = value;\n-      break;\n-\n-    case OPT_Werror:\n-      warnings_are_errors = value;\n-      break;\n-\n     case OPT_Wextra:\n       set_Wextra (value);\n       break;\n \n-    case OPT_Wfatal_errors:\n-      flag_fatal_errors = value;\n-      break;\n-\n-    case OPT_Winline:\n-      warn_inline = value;\n-      break;\n-\n     case OPT_Wlarger_than_:\n       larger_than_size = value;\n       warn_larger_than = value != -1;\n       break;\n \n-    case OPT_Wmissing_noreturn:\n-      warn_missing_noreturn = value;\n-      break;\n-\n-    case OPT_Wpacked:\n-      warn_packed = value;\n-      break;\n-\n-    case OPT_Wpadded:\n-      warn_padded = value;\n-      break;\n-\n-    case OPT_Wshadow:\n-      warn_shadow = value;\n-      break;\n-\n     case OPT_Wstrict_aliasing:\n     case OPT_Wstrict_aliasing_:\n       warn_strict_aliasing = value;\n       break;\n \n-    case OPT_Wswitch:\n-      warn_switch = value;\n-      break;\n-\n-    case OPT_Wswitch_default:\n-      warn_switch_default = value;\n-      break;\n-\n-    case OPT_Wswitch_enum:\n-      warn_switch_enum = value;\n-      break;\n-\n-    case OPT_Wsystem_headers:\n-      warn_system_headers = value;\n-      break;\n-\n-    case OPT_Wuninitialized:\n-      warn_uninitialized = value;\n-      break;\n-\n-    case OPT_Wunreachable_code:\n-      warn_notreached = value;\n-      break;\n-\n     case OPT_Wunused:\n       set_Wunused (value);\n       break;\n \n-    case OPT_Wunused_function:\n-      warn_unused_function = value;\n-      break;\n-\n-    case OPT_Wunused_label:\n-      warn_unused_label = value;\n-      break;\n-\n-    case OPT_Wunused_parameter:\n-      warn_unused_parameter = value;\n-      break;\n-\n-    case OPT_Wunused_value:\n-      warn_unused_value = value;\n-      break;\n-\n-    case OPT_Wunused_variable:\n-      warn_unused_variable = value;\n-      break;\n-\n     case OPT_aux_info:\n     case OPT_aux_info_:\n       aux_info_file_name = arg;\n@@ -870,89 +727,24 @@ common_handle_option (size_t scode, const char *arg,\n       dump_base_name = arg;\n       break;\n \n-    case OPT_fPIC:\n-      flag_pic = value + value;\n-      break;\n-\n-    case OPT_fPIE:\n-      flag_pie = value + value;\n-      break;\n-\n-    case OPT_fabi_version_:\n-      flag_abi_version = value;\n-      break;\n-\n-    case OPT_falign_functions:\n-      align_functions = !value;\n-      break;\n-\n     case OPT_falign_functions_:\n       align_functions = value;\n       break;\n \n-    case OPT_falign_jumps:\n-      align_jumps = !value;\n-      break;\n-\n     case OPT_falign_jumps_:\n       align_jumps = value;\n       break;\n \n-    case OPT_falign_labels:\n-      align_labels = !value;\n-      break;\n-\n     case OPT_falign_labels_:\n       align_labels = value;\n       break;\n \n-    case OPT_falign_loops:\n-      align_loops = !value;\n-      break;\n-\n     case OPT_falign_loops_:\n       align_loops = value;\n       break;\n \n-    case OPT_fargument_alias:\n-      flag_argument_noalias = !value;\n-      break;\n-\n-    case OPT_fargument_noalias:\n-      flag_argument_noalias = value;\n-      break;\n-\n-    case OPT_fargument_noalias_global:\n-      flag_argument_noalias = value + value;\n-      break;\n-\n-    case OPT_fasynchronous_unwind_tables:\n-      flag_asynchronous_unwind_tables = value;\n-      break;\n-\n-    case OPT_fbounds_check:\n-      flag_bounds_check = value;\n-      break;\n-\n-    case OPT_fbranch_count_reg:\n-      flag_branch_on_count_reg = value;\n-      break;\n-\n     case OPT_fbranch_probabilities:\n       flag_branch_probabilities_set = true;\n-      flag_branch_probabilities = value;\n-      break;\n-\n-    case OPT_fbranch_target_load_optimize:\n-      flag_branch_target_load_optimize = value;\n-      break;\n-\n-    case OPT_fbranch_target_load_optimize2:\n-      flag_branch_target_load_optimize2 = value;\n-      break;\n-\n-    case OPT_fbtr_bb_exclusive:\n-      flag_btr_bb_exclusive = value;\n       break;\n \n     case OPT_fcall_used_:\n@@ -963,46 +755,6 @@ common_handle_option (size_t scode, const char *arg,\n       fix_register (arg, 0, 0);\n       break;\n \n-    case OPT_fcaller_saves:\n-      flag_caller_saves = value;\n-      break;\n-\n-    case OPT_fcommon:\n-      flag_no_common = !value;\n-      break;\n-\n-    case OPT_fcprop_registers:\n-      flag_cprop_registers = value;\n-      break;\n-\n-    case OPT_fcrossjumping:\n-      flag_crossjumping = value;\n-      break;\n-\n-    case OPT_fcse_follow_jumps:\n-      flag_cse_follow_jumps = value;\n-      break;\n-\n-    case OPT_fcse_skip_blocks:\n-      flag_cse_skip_blocks = value;\n-      break;\n-\n-    case OPT_fdata_sections:\n-      flag_data_sections = value;\n-      break;\n-\n-    case OPT_fdefer_pop:\n-      flag_defer_pop = value;\n-      break;\n-\n-    case OPT_fdelayed_branch:\n-      flag_delayed_branch = value;\n-      break;\n-\n-    case OPT_fdelete_null_pointer_checks:\n-      flag_delete_null_pointer_checks = value;\n-      break;\n-\n     case OPT_fdiagnostics_show_location_:\n       if (!strcmp (arg, \"once\"))\n \tdiagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n@@ -1018,242 +770,31 @@ common_handle_option (size_t scode, const char *arg,\n \treturn 0;\n       break;\n \n-    case OPT_fdump_unnumbered:\n-      flag_dump_unnumbered = value;\n-      break;\n-\n-    case OPT_feliminate_dwarf2_dups:\n-      flag_eliminate_dwarf2_dups = value;\n-      break;\n-\n-    case OPT_feliminate_unused_debug_types:\n-      flag_eliminate_unused_debug_types = value;\n-      break;\n-\n-    case OPT_feliminate_unused_debug_symbols:\n-      flag_debug_only_used_symbols = value;\n-      break;\n-\n-    case OPT_fexceptions:\n-      flag_exceptions = value;\n-      break;\n-\n-    case OPT_fexpensive_optimizations:\n-      flag_expensive_optimizations = value;\n-      break;\n-\n     case OPT_ffast_math:\n       set_fast_math_flags (value);\n       break;\n \n-    case OPT_ffinite_math_only:\n-      flag_finite_math_only = value;\n-      break;\n-\n     case OPT_ffixed_:\n       fix_register (arg, 1, 1);\n       break;\n \n-    case OPT_ffunction_cse:\n-      flag_no_function_cse = !value;\n-      break;\n-\n-    case OPT_ffloat_store:\n-      flag_float_store = value;\n-      break;\n-\n-    case OPT_fforce_addr:\n-      flag_force_addr = value;\n-      break;\n-\n-    case OPT_fforce_mem:\n-      flag_force_mem = value;\n-      break;\n-\n-    case OPT_ffunction_sections:\n-      flag_function_sections = value;\n-      break;\n-\n-    case OPT_fgcse:\n-      flag_gcse = value;\n-      break;\n-\n-    case OPT_fgcse_lm:\n-      flag_gcse_lm = value;\n-      break;\n-\n-    case OPT_fgcse_sm:\n-      flag_gcse_sm = value;\n-      break;\n-\n-    case OPT_fgcse_after_reload:\n-      flag_gcse_after_reload = value;\n-      break;\n-\n-    case OPT_fgcse_las:\n-      flag_gcse_las = value;\n-      break;\n-\n-    case OPT_fguess_branch_probability:\n-      flag_guess_branch_prob = value;\n-      break;\n-\n-    case OPT_fident:\n-      flag_no_ident = !value;\n-      break;\n-\n-    case OPT_fif_conversion:\n-      flag_if_conversion = value;\n-      break;\n-\n-    case OPT_fif_conversion2:\n-      flag_if_conversion2 = value;\n-      break;\n-\n-    case OPT_finhibit_size_directive:\n-      flag_inhibit_size_directive = value;\n-      break;\n-\n-    case OPT_finline:\n-      flag_no_inline = !value;\n-      break;\n-\n-    case OPT_finline_functions:\n-      flag_inline_functions = value;\n-      break;\n-\n     case OPT_finline_limit_:\n     case OPT_finline_limit_eq:\n       set_param_value (\"max-inline-insns-single\", value / 2);\n       set_param_value (\"max-inline-insns-auto\", value / 2);\n       set_param_value (\"max-inline-insns-rtl\", value);\n       break;\n \n-    case OPT_finstrument_functions:\n-      flag_instrument_function_entry_exit = value;\n-      break;\n-\n-    case OPT_fkeep_inline_functions:\n-      flag_keep_inline_functions =value;\n-      break;\n-\n-    case OPT_fkeep_static_consts:\n-      flag_keep_static_consts = value;\n-      break;\n-\n-    case OPT_fleading_underscore:\n-      flag_leading_underscore = value;\n-      break;\n-\n-    case OPT_floop_optimize:\n-      flag_loop_optimize = value;\n-      break;\n-\n-    case OPT_fmath_errno:\n-      flag_errno_math = value;\n-      break;\n-\n-    case OPT_fmem_report:\n-      mem_report = value;\n-      break;\n-\n-    case OPT_fmerge_all_constants:\n-      flag_merge_constants = value + value;\n-      break;\n-\n-    case OPT_fmerge_constants:\n-      flag_merge_constants = value;\n-      break;\n-\n     case OPT_fmessage_length_:\n       pp_set_line_maximum_length (global_dc->printer, value);\n       break;\n \n-    case OPT_fmove_all_movables:\n-      flag_move_all_movables = value;\n-      break;\n-\n-    case OPT_fmudflap:\n-      flag_mudflap = value;\n-      break;\n-\n-    case OPT_fmudflapth:\n-      flag_mudflap = value;\n-      flag_mudflap_threads = value;\n-      break;\n-\n-    case OPT_fmudflapir:\n-      flag_mudflap_ignore_reads = value;\n-      break;\n-\n-    case OPT_fnew_ra:\n-      flag_new_regalloc = value;\n-      break;\n-\n-    case OPT_fnon_call_exceptions:\n-      flag_non_call_exceptions = value;\n-      break;\n-\n-    case OPT_fold_unroll_all_loops:\n-      flag_old_unroll_all_loops = value;\n-      break;\n-\n-    case OPT_fold_unroll_loops:\n-      flag_old_unroll_loops = value;\n-      break;\n-\n-    case OPT_fomit_frame_pointer:\n-      flag_omit_frame_pointer = value;\n-      break;\n-\n-    case OPT_foptimize_register_move:\n-      flag_regmove = value;\n-      break;\n-\n-    case OPT_foptimize_sibling_calls:\n-      flag_optimize_sibling_calls = value;\n-      break;\n-\n-    case OPT_fpack_struct:\n-      flag_pack_struct = value;\n-      break;\n-\n     case OPT_fpeel_loops:\n       flag_peel_loops_set = true;\n-      flag_peel_loops = value;\n-      break;\n-\n-    case OPT_fpcc_struct_return:\n-      flag_pcc_struct_return = value;\n-      break;\n-\n-    case OPT_fpeephole:\n-      flag_no_peephole = !value;\n-      break;\n-\n-    case OPT_fpeephole2:\n-      flag_peephole2 = value;\n-      break;\n-\n-    case OPT_fpic:\n-      flag_pic = value;\n-      break;\n-\n-    case OPT_fpie:\n-      flag_pie = value;\n-      break;\n-\n-    case OPT_fprefetch_loop_arrays:\n-      flag_prefetch_loop_arrays = value;\n-      break;\n-\n-    case OPT_fprofile:\n-      profile_flag = value;\n       break;\n \n     case OPT_fprofile_arcs:\n       profile_arc_flag_set = true;\n-      profile_arc_flag = value;\n       break;\n \n     case OPT_fprofile_use:\n@@ -1282,12 +823,10 @@ common_handle_option (size_t scode, const char *arg,\n \n     case OPT_fprofile_values:\n       flag_profile_values_set = true;\n-      flag_profile_values = value;\n       break;\n \n     case OPT_fvpt:\n       flag_value_profile_transformations_set = value;\n-      flag_value_profile_transformations = value;\n       break;\n \n     case OPT_frandom_seed:\n@@ -1301,62 +840,6 @@ common_handle_option (size_t scode, const char *arg,\n       flag_random_seed = arg;\n       break;\n \n-    case OPT_freduce_all_givs:\n-      flag_reduce_all_givs = value;\n-      break;\n-\n-    case OPT_freg_struct_return:\n-      flag_pcc_struct_return = !value;\n-      break;\n-\n-    case OPT_fregmove:\n-      flag_regmove = value;\n-      break;\n-\n-    case OPT_frename_registers:\n-      flag_rename_registers = value;\n-      break;\n-\n-    case OPT_freorder_blocks:\n-      flag_reorder_blocks = value;\n-      break;\n-\n-    case OPT_freorder_blocks_and_partition:\n-      flag_reorder_blocks_and_partition = value;\n-      break;\n-  \n-    case OPT_freorder_functions:\n-      flag_reorder_functions = value;\n-      break;\n-\n-    case OPT_frerun_cse_after_loop:\n-      flag_rerun_cse_after_loop = value;\n-      break;\n-\n-    case OPT_frerun_loop_opt:\n-      flag_rerun_loop_opt = value;\n-      break;\n-\n-    case OPT_frounding_math:\n-      flag_rounding_math = value;\n-      break;\n-\n-    case OPT_fsched_interblock:\n-      flag_schedule_interblock = value;\n-      break;\n-\n-    case OPT_fsched_spec:\n-      flag_schedule_speculative = value;\n-      break;\n-\n-    case OPT_fsched_spec_load:\n-      flag_schedule_speculative_load = value;\n-      break;\n-\n-    case OPT_fsched_spec_load_dangerous:\n-      flag_schedule_speculative_load_dangerous = value;\n-      break;\n-\n     case OPT_fsched_verbose_:\n #ifdef INSN_SCHEDULING\n       fix_sched_param (\"verbose\", arg);\n@@ -1365,57 +848,15 @@ common_handle_option (size_t scode, const char *arg,\n       return 0;\n #endif\n \n-    case OPT_fsched2_use_superblocks:\n-      flag_sched2_use_superblocks = value;\n-      break;\n-\n-    case OPT_fsched2_use_traces:\n-      flag_sched2_use_traces = value;\n-      break;\n-\n-    case OPT_fschedule_insns:\n-      flag_schedule_insns = value;\n-      break;\n-\n-    case OPT_fschedule_insns2:\n-      flag_schedule_insns_after_reload = value;\n-      break;\n-\n-    case OPT_fsched_stalled_insns:\n-      flag_sched_stalled_insns = value;\n-      break;\n-\n     case OPT_fsched_stalled_insns_:\n       flag_sched_stalled_insns = value;\n       if (flag_sched_stalled_insns == 0)\n \tflag_sched_stalled_insns = -1;\n       break;\n \n-    case OPT_fsched_stalled_insns_dep:\n-      flag_sched_stalled_insns_dep = 1;\n-      break;\n-\n     case OPT_fsched_stalled_insns_dep_:\n       flag_sched_stalled_insns_dep = value;\n       break;\n-    case OPT_fmodulo_sched:\n-      flag_modulo_sched = 1;\n-      break;\n-    case OPT_fshared_data:\n-      flag_shared_data = value;\n-      break;\n-\n-    case OPT_fsignaling_nans:\n-      flag_signaling_nans = value;\n-      break;\n-\n-    case OPT_fsingle_precision_constant:\n-      flag_single_precision_constant = value;\n-      break;\n-\n-    case OPT_fstack_check:\n-      flag_stack_check = value;\n-      break;\n \n     case OPT_fstack_limit:\n       /* The real switch is -fno-stack-limit.  */\n@@ -1438,30 +879,6 @@ common_handle_option (size_t scode, const char *arg,\n       stack_limit_rtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (arg));\n       break;\n \n-    case OPT_fstrength_reduce:\n-      flag_strength_reduce = value;\n-      break;\n-\n-    case OPT_fstrict_aliasing:\n-      flag_strict_aliasing = value;\n-      break;\n-\n-    case OPT_fsyntax_only:\n-      flag_syntax_only = value;\n-      break;\n-\n-    case OPT_ftest_coverage:\n-      flag_test_coverage = value;\n-      break;\n-\n-    case OPT_fthread_jumps:\n-      flag_thread_jumps = value;\n-      break;\n-\n-    case OPT_ftime_report:\n-      time_report = value;\n-      break;\n-\n     case OPT_ftls_model_:\n       if (!strcmp (arg, \"global-dynamic\"))\n \tflag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n@@ -1477,59 +894,6 @@ common_handle_option (size_t scode, const char *arg,\n \n     case OPT_ftracer:\n       flag_tracer_set = true;\n-      flag_tracer = value;\n-      break;\n-\n-    case OPT_ftrapping_math:\n-      flag_trapping_math = value;\n-      break;\n-\n-    case OPT_ftrapv:\n-      flag_trapv = value;\n-      break;\n-\n-    case OPT_ftree_based_profiling:\n-      flag_tree_based_profiling = value;\n-      break;\n-\n-    case OPT_ftree_ccp:\n-      flag_tree_ccp = value;\n-      break;\n-\n-    case OPT_ftree_dce:\n-      flag_tree_dce = value;\n-      break;\n-\n-    case OPT_ftree_combine_temps:\n-      flag_tree_combine_temps = value;\n-      break;\n-\n-    case OPT_ftree_ter:\n-      flag_tree_ter = value;\n-      break;\n-\n-    case OPT_ftree_lrs:\n-      flag_tree_live_range_split = value;\n-      break;\n-\n-    case OPT_ftree_dominator_opts:\n-      flag_tree_dom = value;\n-      break;\n-\n-    case OPT_ftree_copyrename:\n-      flag_tree_copyrename = value;\n-      break;\n-\n-    case OPT_ftree_ch:\n-      flag_tree_ch = value;\n-      break;\n-\n-    case OPT_ftree_dse:\n-      flag_tree_dse = value;\n-      break;\n-\n-    case OPT_ftree_sra:\n-      flag_tree_sra = value;\n       break;\n \n     case OPT_ftree_points_to_:\n@@ -1548,53 +912,8 @@ common_handle_option (size_t scode, const char *arg,\n \t}\n       break;\n \n-    case OPT_ftree_pre:\n-      flag_tree_pre = value;\n-      break;\n-\n-    case OPT_funit_at_a_time:\n-      flag_unit_at_a_time = value;\n-      break;\n-\n-    case OPT_funroll_all_loops:\n-      flag_unroll_all_loops = value;\n-      break;\n-\n     case OPT_funroll_loops:\n       flag_unroll_loops_set = true;\n-      flag_unroll_loops = value;\n-      break;\n-\n-    case OPT_funsafe_math_optimizations:\n-      flag_unsafe_math_optimizations = value;\n-      break;\n-\n-    case OPT_funswitch_loops:\n-      flag_unswitch_loops = value;\n-      break;\n-\n-    case OPT_funwind_tables:\n-      flag_unwind_tables = value;\n-      break;\n-\n-    case OPT_fvar_tracking:\n-      flag_var_tracking = value;\n-      break;\n-\n-    case OPT_fverbose_asm:\n-      flag_verbose_asm = value;\n-      break;\n-\n-    case OPT_fweb:\n-      flag_web = value;\n-      break;\n-      \n-    case OPT_fwrapv:\n-      flag_wrapv = value;\n-      break;\n-\n-    case OPT_fzero_initialized_in_bss:\n-      flag_zero_initialized_in_bss = value;\n       break;\n \n     case OPT_g:\n@@ -1635,29 +954,17 @@ common_handle_option (size_t scode, const char *arg,\n       asm_file_name = arg;\n       break;\n \n-    case OPT_p:\n-      profile_flag = 1;\n-      break;\n-\n-    case OPT_pedantic:\n-      pedantic = 1;\n-      break;\n-\n     case OPT_pedantic_errors:\n       flag_pedantic_errors = pedantic = 1;\n       break;\n \n-    case OPT_quiet:\n-      quiet_flag = 1;\n-      break;\n-\n-    case OPT_version:\n-      version_flag = 1;\n-      break;\n+    default:\n+      /* If the flag was handled in a standard way, assume the lack of\n+\t processing here is intentional.  */\n+      if (cl_options[scode].flag_var)\n+\tbreak;\n \n-    case OPT_w:\n-      inhibit_warnings = true;\n-      break;      \n+      abort ();\n     }\n \n   return 1;"}, {"sha": "17b2bca3f84fc6e0f41bc913fc13089fa64ca69a", "filename": "gcc/opts.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -31,12 +31,16 @@ struct cl_option\n   unsigned short back_chain;\n   unsigned char opt_len;\n   unsigned int flags;\n+  int *flag_var;\n+  int has_set_value;\n+  int set_value;\n };\n \n extern const struct cl_option cl_options[];\n extern const unsigned int cl_options_count;\n extern const char *const lang_names[];\n \n+#define CL_REPORT\t\t(1 << 23) /* Report argument with -fverbose-asm  */\n #define CL_JOINED\t\t(1 << 24) /* If takes joined argument.  */\n #define CL_SEPARATE\t\t(1 << 25) /* If takes a separate argument.  */\n #define CL_REJECT_NEGATIVE\t(1 << 26) /* Reject no- form.  */"}, {"sha": "10abcebce5fa8ff265d83764fd9076db1d404d14", "filename": "gcc/opts.sh", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fopts.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Fopts.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.sh?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -66,9 +66,43 @@ ${AWK} '\n         if (flags ~ \" RejectNegative \") result = result \" | CL_REJECT_NEGATIVE\"\n         if (flags ~ \" UInteger \") result = result \" | CL_UINTEGER\"\n         if (flags ~ \" Undocumented \") result = result \" | CL_UNDOCUMENTED\"\n+        if (flags ~ \" Report \") result = result \" | CL_REPORT\"\n \tsub( \"^0 \\\\| \", \"\", result )\n \treturn result\n     }\n+    function var_args(flags)\n+    {\n+\tif (flags !~ \"Var\\\\(\")\n+\t  return \"\";\n+\tsub(\".*Var\\\\(\", \"\", flags);\n+\tsub(\").*\", \"\", flags);\n+\n+\treturn flags;\n+    }\n+    function var_name(flags)\n+    {\n+\ts = var_args(flags);\n+\tif (s == \"\")\n+\t  return \"\";\n+\tsub( \",.*\", \"\", s);\n+\treturn s;\n+    }\n+    function var_set(flags)\n+    {\n+\ts = var_args(flags);\n+\tif (s !~ \",\")\n+\t  return \"0, 0\";\n+\tsub( \"[^,]*,\", \"\", s);\n+\treturn \"1, \" s;\n+    }\n+    function var_ref(flags)\n+    {\n+\tname = var_name(flags);\n+\tif (name == \"\")\n+\t  return \"0\";\n+\telse\n+\t  return \"&\" name;\n+    }\n \n     BEGIN {\n \tFS = \"\\034\"\n@@ -101,9 +135,38 @@ ${AWK} '\n \tprint \"#include <intl.h>\"\t\t\t>> c_file\n \tprint \"#include \\\"\" realh_file \"\\\"\"\t\t>> c_file\n \tprint \"#include \\\"opts.h\\\"\\n\"\t\t\t>> c_file\n-\tprint \"const char * const lang_names[] =\\n{\"\t>> c_file\n \n \tprint \"/* This file is auto-generated by opts.sh.  */\\n\" > h_file\n+\tprint \"#ifndef OPTIONS_H\"\t\t\t>> h_file\n+\tprint \"#define OPTIONS_H\\n\"\t\t\t>> h_file\n+\n+\tfor (i = 0; i < n_opts; i++) {\n+\t    name = var_name(flags[i]);\n+\t    if (name == \"\")\n+\t       continue;\n+\n+\t    printf (\"/* Set by -%s.\\n   %s  */\\nextern int %s;\\n\\n\",\n+\t      opts[i], help[i], name)\t\t>> h_file\n+\n+\t    if (flags[i] ~ \"VarExists\")\n+\t      continue;\n+\n+\t    if (flags[i] ~ \"Init\\\\(\")\n+\t      {\n+\t\tinit = flags[i];\n+\t\tsub(\".*Init\\\\(\",\"\",init);\n+\t\tsub(\"\\\\).*\",\"\",init);\n+\t\tinit = \" = \" init;\n+\t      }\n+\t    else\n+\t      init = \"\";\n+\n+\t    printf (\"/* Set by -%s.\\n   %s  */\\nint %s%s;\\n\\n\",\n+\t\t    opts[i], help[i], name,init)\t>> c_file\n+\t    }\n+\n+\n+\tprint \"const char * const lang_names[] =\\n{\"\t>> c_file\n \tfor (i = 0; i < n_langs; i++) {\n \t    macros[i] = \"CL_\" langs[i]\n \t    gsub( \"[^A-Za-z0-9_]\", \"X\", macros[i] )\n@@ -114,6 +177,7 @@ ${AWK} '\n \n \tprint \"  0\\n};\\n\"\t\t\t\t>> c_file\n \tprint \"const unsigned int cl_options_count = N_OPTS;\\n\" >> c_file\n+\n \tprint \"const struct cl_option cl_options[] =\\n{\" >> c_file\n \n \tprint \"\\nenum opt_code\\n{\"\t\t\t>> h_file\n@@ -159,12 +223,14 @@ ${AWK} '\n \t    \thlp = \"N_(\\\"\" help[i] \"\\\")\";\n \n \t    printf(\"  %s,%s/* -%s */\\n\", enum, s, opts[i]) >> h_file\n-\t    printf(\"  { \\\"-%s\\\",\\n    %s,\\n    %s, %u, %s }%s\\n\",\n+\t    printf(\"  { \\\"-%s\\\",\\n    %s,\\n    %s, %u, %s, %s, %s }%s\\n\",\n \t\t   opts[i], hlp, back_chain[i], len,\n-\t\t   switch_flags(flags[i]), comma)\t>> c_file\n+\t\t   switch_flags(flags[i]),\n+\t\t   var_ref(flags[i]), var_set(flags[i]), comma)\t>> c_file\n \t}\n \n-\tprint \"  N_OPTS\\n};\"\t\t\t\t>> h_file\n+\tprint \"  N_OPTS\\n};\\n\"\t\t\t\t>> h_file\n+\tprint \"#endif /* OPTIONS_H */\"\t\t\t>> h_file\n \tprint \"};\"\t\t\t\t\t>> c_file\n     }\n '"}, {"sha": "16b45d74cedd8920d67b10849575e8a4edcd90e5", "filename": "gcc/toplev.c", "status": "modified", "additions": 19, "deletions": 709, "changes": 728, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -226,83 +226,11 @@ tree current_function_func_begin_label;\n \n tree current_file_decl;\n \n-/* Nonzero if doing dwarf2 duplicate elimination.  */\n-\n-int flag_eliminate_dwarf2_dups = 0;\n-\n-/* Nonzero if doing unused type elimination.  */\n-\n-int flag_eliminate_unused_debug_types = 1;\n-\n-/* Nonzero means emit debugging information only for symbols which are used.  */\n-int flag_debug_only_used_symbols = 0;\n-\n-/* Nonzero if generating code to do profiling.  */\n-\n-int profile_flag = 0;\n-\n-/* Nonzero if generating code to profile program flow graph arcs.  */\n-\n-int profile_arc_flag = 0;\n-\n-/* Nonzero if value histograms should be measured.  */\n-\n-int flag_profile_values = 0;\n-\n-/* Nonzero if value histograms should be used to optimize code.  */\n-int flag_value_profile_transformations = 0;\n-\n-/* Nonzero if generating info for gcov to calculate line test coverage.  */\n-\n-int flag_test_coverage = 0;\n-\n-/* Nonzero indicates that branch taken probabilities should be calculated.  */\n-\n-int flag_branch_probabilities = 0;\n-\n-/* Nonzero if basic blocks should be reordered.  */\n-\n-int flag_reorder_blocks = 0;\n-\n-/* Nonzero if blocks should be partitioned into hot and cold sections in\n-   addition to being reordered.  */\n-\n-int flag_reorder_blocks_and_partition = 0;\n-\n-/* Nonzero if functions should be reordered.  */\n-\n-int flag_reorder_functions = 0;\n-\n-/* Nonzero if registers should be renamed.  When\n-   flag_rename_registers == AUTODETECT_FLAG_VAR_TRACKING it will be set\n-   according to optimize and default_debug_hooks in process_options (),\n-   but we do not do this yet because it triggers aborts in flow.c.  */\n-int flag_rename_registers = 0;\n-int flag_cprop_registers = 0;\n-\n-/* Nonzero for -pedantic switch: warn about anything\n-   that standard spec forbids.  */\n-\n-int pedantic = 0;\n-\n /* Temporarily suppress certain warnings.\n    This is set while reading code from a system header file.  */\n \n int in_system_header = 0;\n \n-/* Don't print functions as they are compiled.  -quiet.  */\n-\n-int quiet_flag = 0;\n-\n-/* Print times taken by the various passes.  -ftime-report.  */\n-\n-int time_report = 0;\n-\n-/* Print memory still in use at end of compilation (which may have little\n-   to do with peak memory consumption).  -fmem-report.  */\n-\n-int mem_report = 0;\n-\n /* Nonzero means to collect statistics which might be expensive\n    and to print them when we are done.  */\n int flag_detailed_statistics = 0;\n@@ -326,12 +254,6 @@ int flag_signed_char;\n \n int flag_short_enums;\n \n-/* Nonzero for -fcaller-saves: allocate values in regs that need to\n-   be saved across function calls, if that produces overall better code.\n-   Optional now, so people can test it.  */\n-\n-int flag_caller_saves = 0;\n-\n /* Nonzero if structures and unions should be returned in memory.\n \n    This should only be defined if compatibility with another compiler or\n@@ -345,264 +267,23 @@ int flag_caller_saves = 0;\n \n int flag_pcc_struct_return = DEFAULT_PCC_STRUCT_RETURN;\n \n-/* Nonzero for -fforce-mem: load memory value into a register\n-   before arithmetic on it.  This makes better cse but slower compilation.  */\n-\n-int flag_force_mem = 0;\n-\n-/* Nonzero for -fforce-addr: load memory address into a register before\n-   reference to memory.  This makes better cse but slower compilation.  */\n-\n-int flag_force_addr = 0;\n-\n-/* Nonzero for -fdefer-pop: don't pop args after each function call;\n-   instead save them up to pop many calls' args with one insns.  */\n-\n-int flag_defer_pop = 0;\n-\n-/* Nonzero for -ffloat-store: don't allocate floats and doubles\n-   in extended-precision registers.  */\n-\n-int flag_float_store = 0;\n-\n-/* Nonzero for -fcse-follow-jumps:\n-   have cse follow jumps to do a more extensive job.  */\n-\n-int flag_cse_follow_jumps;\n-\n-/* Nonzero for -fcse-skip-blocks:\n-   have cse follow a branch around a block.  */\n-int flag_cse_skip_blocks;\n-\n-/* Nonzero for -fexpensive-optimizations:\n-   perform miscellaneous relatively-expensive optimizations.  */\n-int flag_expensive_optimizations;\n-\n-/* Nonzero for -fthread-jumps:\n-   have jump optimize output of loop.  */\n-\n-int flag_thread_jumps;\n-\n-/* Nonzero enables strength-reduction in loop.c.  */\n-\n-int flag_strength_reduce = 0;\n-\n-/* Nonzero enables loop unrolling in unroll.c.  Only loops for which the\n-   number of iterations can be calculated at compile-time (UNROLL_COMPLETELY,\n-   UNROLL_MODULO) or at run-time (preconditioned to be UNROLL_MODULO) are\n-   unrolled.  */\n-\n-int flag_old_unroll_loops;\n-\n-/* Nonzero enables loop unrolling in unroll.c.  All loops are unrolled.\n-   This is generally not a win.  */\n-\n-int flag_old_unroll_all_loops;\n-\n-/* Enables unrolling of simple loops in loop-unroll.c.  */\n-int flag_unroll_loops;\n-\n-/* Enables unrolling of all loops in loop-unroll.c.  */\n-int flag_unroll_all_loops;\n-\n-/* Nonzero enables loop peeling.  */\n-int flag_peel_loops;\n-\n-/* Nonzero enables loop unswitching.  */\n-int flag_unswitch_loops;\n-\n-/* Nonzero enables prefetch optimizations for arrays in loops.  */\n-\n-int flag_prefetch_loop_arrays;\n-\n-/* Nonzero forces all invariant computations in loops to be moved\n-   outside the loop.  */\n-\n-int flag_move_all_movables = 0;\n-\n-/* Nonzero forces all general induction variables in loops to be\n-   strength reduced.  */\n-\n-int flag_reduce_all_givs = 0;\n-\n-/* Nonzero to perform full register move optimization passes.  This is the\n-   default for -O2.  */\n-\n-int flag_regmove = 0;\n-\n-/* Nonzero means don't put addresses of constant functions in registers.\n-   Used for compiling the Unix kernel, where strange substitutions are\n-   done on the assembly output.  */\n-\n-int flag_no_function_cse = 0;\n-\n-/* Nonzero for -fomit-frame-pointer:\n-   don't make a frame pointer in simple functions that don't require one.  */\n-\n-int flag_omit_frame_pointer = 0;\n-\n-/* Nonzero means place each function into its own section on those platforms\n-   which support arbitrary section names and unlimited numbers of sections.  */\n-\n-int flag_function_sections = 0;\n-\n-/* ... and similar for data.  */\n-\n-int flag_data_sections = 0;\n-\n-/* Nonzero to inhibit use of define_optimization peephole opts.  */\n-\n-int flag_no_peephole = 0;\n-\n-/* Nonzero allows GCC to optimize sibling and tail recursive calls.  */\n-\n-int flag_optimize_sibling_calls = 0;\n-\n-/* Nonzero means the front end generally wants `errno' maintained by math\n-   operations, like built-in SQRT.  */\n-\n-int flag_errno_math = 1;\n-\n-/* Nonzero means that unsafe floating-point math optimizations are allowed\n-   for the sake of speed.  IEEE compliance is not guaranteed, and operations\n-   are allowed to assume that their arguments and results are \"normal\"\n-   (e.g., nonnegative for SQRT).  */\n-\n-int flag_unsafe_math_optimizations = 0;\n-\n-/* Nonzero means that no NaNs or +-Infs are expected.  */\n-\n-int flag_finite_math_only = 0;\n-\n-/* Zero means that floating-point math operations cannot generate a\n-   (user-visible) trap.  This is the case, for example, in nonstop\n-   IEEE 754 arithmetic.  Trapping conditions include division by zero,\n-   overflow, underflow, invalid and inexact, but does not include\n-   operations on signaling NaNs (see below).  */\n-\n-int flag_trapping_math = 1;\n-\n-/* Nonzero means disable transformations that assume default floating\n-   point rounding behavior.  */\n-\n-int flag_rounding_math = 0;\n-\n-/* Nonzero means disable transformations observable by signaling NaNs.\n-   This option implies that any operation on an IEEE signaling NaN can\n-   generate a (user-visible) trap.  */\n-\n-int flag_signaling_nans = 0;\n-\n /* 0 means straightforward implementation of complex divide acceptable.\n    1 means wide ranges of inputs must work for complex divide.\n    2 means C99-like requirements for complex divide (not yet implemented).  */\n \n int flag_complex_divide_method = 0;\n \n-/* Nonzero means just do syntax checking; don't output anything.  */\n-\n-int flag_syntax_only = 0;\n-\n /* Nonzero means performs web construction pass.  When flag_web ==\n    AUTODETECT_FLAG_VAR_TRACKING it will be set according to optimize\n    and default_debug_hooks in process_options ().  */\n \n int flag_web = AUTODETECT_FLAG_VAR_TRACKING;\n \n-/* Nonzero means perform loop optimizer.  */\n-\n-int flag_loop_optimize;\n-\n-/* Nonzero means perform crossjumping.  */\n-\n-int flag_crossjumping;\n-\n-/* Nonzero means perform if conversion.  */\n-\n-int flag_if_conversion;\n-\n-/* Nonzero means perform if conversion after reload.  */\n-\n-int flag_if_conversion2;\n-\n-/* Nonzero means to use global dataflow analysis to eliminate\n-   useless null pointer tests.  */\n-\n-int flag_delete_null_pointer_checks;\n-\n-/* Nonzero means perform global CSE.  */\n-\n-int flag_gcse = 0;\n-\n-/* Nonzero means to do the enhanced load motion during gcse, which trys\n-   to hoist loads by not killing them when a store to the same location\n-   is seen.  */\n-\n-int flag_gcse_lm = 1;\n-\n-/* Nonzero means to perform store motion after gcse, which will try to\n-   move stores closer to the exit block.  Its not very effective without\n-   flag_gcse_lm.  */\n-\n-int flag_gcse_sm = 1;\n-\n-/* Nonzero if we want to perform redundant load after store elimination\n-   in gcse.  */\n-\n-int flag_gcse_las = 1;\n-\n-/* Nonzero means perform global cse after register allocation.  */\n-int flag_gcse_after_reload = 0;\n-\n-/* Perform target register optimization before prologue / epilogue\n-   threading.  */\n-\n-int flag_branch_target_load_optimize = 0;\n-\n-/* Perform target register optimization after prologue / epilogue\n-   threading and jump2.  */\n-\n-int flag_branch_target_load_optimize2 = 0;\n-\n-/* For the bt-load pass, nonzero means don't re-use branch target registers\n-   in any basic block.  */\n-\n-int flag_btr_bb_exclusive;\n-\n-/* Nonzero means to rerun cse after loop optimization.  This increases\n-   compilation time about 20% and picks up a few more common expressions.  */\n-\n-int flag_rerun_cse_after_loop;\n-\n-/* Nonzero means to run loop optimizations twice.  */\n-\n-int flag_rerun_loop_opt;\n-\n-/* Nonzero for -finline-functions: ok to inline functions that look like\n-   good inline candidates.  */\n-\n-int flag_inline_functions;\n-\n-/* Nonzero for -fkeep-inline-functions: even if we make a function\n-   go inline everywhere, keep its definition around for debugging\n-   purposes.  */\n-\n-int flag_keep_inline_functions;\n-\n-/* Nonzero means that functions will not be inlined.  */\n-\n-int flag_no_inline = 2;\n-\n /* Nonzero means that we don't want inlining by virtue of -fno-inline,\n    not just because the tree inliner turned us off.  */\n \n int flag_really_no_inline = 2;\n \n-/* Nonzero means that we should emit static const variables\n-   regardless of whether or not optimization is turned on.  */\n-\n-int flag_keep_static_consts = 1;\n-\n /* Nonzero means we should be saving declaration info into a .X file.  */\n \n int flag_gen_aux_info = 0;\n@@ -611,26 +292,6 @@ int flag_gen_aux_info = 0;\n \n const char *aux_info_file_name;\n \n-/* Nonzero means make the text shared if supported.  */\n-\n-int flag_shared_data;\n-\n-/* Nonzero means schedule into delayed branch slots if supported.  */\n-\n-int flag_delayed_branch;\n-\n-/* Nonzero if we are compiling pure (sharable) code.\n-   Value is 1 if we are doing \"small\" pic; value is 2 if we're doing\n-   \"large\" pic.  */\n-\n-int flag_pic;\n-\n-/* Nonzero if we are compiling position independent code for executable.\n-   The value is 1 if we are doing \"small\" pic; value is 2 if we're doing\n-   \"large\" pic.  */\n-\n-int flag_pie;\n-\n /* Nonzero if we are compiling code for a shared library, zero for\n    executable.  */\n \n@@ -640,98 +301,11 @@ int flag_shlib;\n \n enum tls_model flag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n \n-/* Nonzero means generate extra code for exception handling and enable\n-   exception handling.  */\n-\n-int flag_exceptions;\n-\n-/* Nonzero means generate frame unwind info table when supported.  */\n-\n-int flag_unwind_tables = 0;\n-\n-/* Nonzero means generate frame unwind info table exact at each insn\n-   boundary.  */\n-\n-int flag_asynchronous_unwind_tables = 0;\n-\n-/* Nonzero means don't place uninitialized global data in common storage\n-   by default.  */\n-\n-int flag_no_common;\n-\n /* Nonzero means change certain warnings into errors.\n    Usually these are warnings about failure to conform to some standard.  */\n \n int flag_pedantic_errors = 0;\n \n-/* flag_schedule_insns means schedule insns within basic blocks (before\n-   local_alloc).\n-   flag_schedule_insns_after_reload means schedule insns after\n-   global_alloc.  */\n-\n-int flag_schedule_insns = 0;\n-int flag_schedule_insns_after_reload = 0;\n-\n-/* When flag_schedule_insns_after_reload is set, use EBB scheduler.  */\n-int flag_sched2_use_superblocks = 0;\n-\n-/* When flag_schedule_insns_after_reload is set, construct traces and EBB\n-   scheduler.  */\n-int flag_sched2_use_traces = 0;\n-\n-/* The following flags have effect only for scheduling before register\n-   allocation:\n-\n-   flag_schedule_interblock means schedule insns across basic blocks.\n-   flag_schedule_speculative means allow speculative motion of non-load insns.\n-   flag_schedule_speculative_load means allow speculative motion of some\n-   load insns.\n-   flag_schedule_speculative_load_dangerous allows speculative motion of more\n-   load insns.  */\n-\n-int flag_schedule_interblock = 1;\n-int flag_schedule_speculative = 1;\n-int flag_schedule_speculative_load = 0;\n-int flag_schedule_speculative_load_dangerous = 0;\n-\n-/* The following flags have an effect during scheduling after register\n-   allocation:\n-\n-   flag_sched_stalled_insns means that insns can be moved prematurely from the queue\n-   of stalled insns into the ready list.\n-\n-   flag_sched_stalled_insns_dep controls how many insn groups will be examined\n-   for a dependency on a stalled insn that is candidate for premature removal\n-   from the queue of stalled insns into the ready list (has an effect only if\n-   the flag 'sched_stalled_insns' is set).  */\n-\n-int flag_sched_stalled_insns = 0;\n-int flag_sched_stalled_insns_dep = 1;\n-\n-/* The following flag controls the module scheduling activation.  */\n-int flag_modulo_sched = 0;\n-\n-int flag_single_precision_constant;\n-\n-/* flag_branch_on_count_reg means try to replace add-1,compare,branch tupple\n-   by a cheaper branch on a count register.  */\n-int flag_branch_on_count_reg = 1;\n-\n-/* -finhibit-size-directive inhibits output of .size for ELF.\n-   This is used only for compiling crtstuff.c,\n-   and it may be extended to other effects\n-   needed for crtstuff.c on other systems.  */\n-int flag_inhibit_size_directive = 0;\n-\n-/* -fverbose-asm causes extra commentary information to be produced in\n-   the generated assembly code (to make it more readable).  This option\n-   is generally only of use to those who actually need to read the\n-   generated assembly code (perhaps while debugging the compiler itself).\n-   -fno-verbose-asm, the default, causes the extra information\n-   to be omitted and is useful when comparing two assembler files.  */\n-\n-int flag_verbose_asm = 0;\n-\n /* -dA causes debug commentary information to be produced in\n    the generated assembly code (to make it more readable).  This option\n    is generally only of use to those who actually need to read the\n@@ -745,16 +319,6 @@ int flag_debug_asm = 0;\n \n int flag_dump_rtl_in_asm = 0;\n \n-/* Nonzero means put zero initialized data in the bss section.  */\n-int flag_zero_initialized_in_bss = 1;\n-\n-/* Tag all structures with __attribute__(packed).  */\n-int flag_pack_struct = 0;\n-\n-/* Emit code to check for stack overflow; also may cause large objects\n-   to be allocated dynamically.  */\n-int flag_stack_check;\n-\n /* When non-NULL, indicates that whenever space is allocated on the\n    stack, the resulting stack pointer must not pass this\n    address---that is, for stacks that grow downward, the stack pointer\n@@ -764,108 +328,14 @@ int flag_stack_check;\n    the support provided depends on the backend.  */\n rtx stack_limit_rtx;\n \n-/* 0 if pointer arguments may alias each other.  True in C.\n-   1 if pointer arguments may not alias each other but may alias\n-   global variables.\n-   2 if pointer arguments may not alias each other and may not\n-   alias global variables.  True in Fortran.\n-   This defaults to 0 for C.  */\n-int flag_argument_noalias = 0;\n-\n-/* Nonzero if we should do (language-dependent) alias analysis.\n-   Typically, this analysis will assume that expressions of certain\n-   types do not alias expressions of certain other types.  Only used\n-   if alias analysis (in general) is enabled.  */\n-int flag_strict_aliasing = 0;\n-\n-/* Instrument functions with calls at entry and exit, for profiling.  */\n-int flag_instrument_function_entry_exit = 0;\n-\n-/* Nonzero means ignore `#ident' directives.  0 means handle them.\n-   On SVR4 targets, it also controls whether or not to emit a\n-   string identifying the compiler.  */\n-\n-int flag_no_ident = 0;\n-\n-/* This will perform a peephole pass before sched2.  */\n-int flag_peephole2 = 0;\n-\n-/* This will try to guess branch probabilities.  */\n-int flag_guess_branch_prob = 0;\n-\n-/* -fcheck-bounds causes gcc to generate array bounds checks.\n-   For C, C++, ObjC: defaults to off.\n-   For Java: defaults to on.\n-   For Fortran: defaults to off.  */\n-int flag_bounds_check = 0;\n-\n-/* Mudflap bounds-checking transform.  */\n-int flag_mudflap = 0;\n-int flag_mudflap_threads = 0;\n-int flag_mudflap_ignore_reads = 0;\n-\n-/* This will attempt to merge constant section constants, if 1 only\n-   string constants and constants from constant pool, if 2 also constant\n-   variables.  */\n-int flag_merge_constants = 1;\n-\n /* If one, renumber instruction UIDs to reduce the number of\n    unused UIDs if there are a lot of instructions.  If greater than\n    one, unconditionally renumber instruction UIDs.  */\n int flag_renumber_insns = 1;\n \n-/* If nonzero, use the graph coloring register allocator.  */\n-int flag_new_regalloc = 0;\n-\n-/* If nonzero, use tree-based instead of rtl-based profiling.  */\n-int flag_tree_based_profiling = 0;\n-\n-/* Enable SSA-GVN on trees.  */\n-int flag_tree_gvn = 0;\n-\n-/* Enable the SSA-PRE tree optimization.  */\n-int flag_tree_pre = 0;\n-\n /* Enable points-to analysis on trees.  */\n enum pta_type flag_tree_points_to = PTA_NONE;\n \n-/* Enable SSA-CCP on trees.  */\n-int flag_tree_ccp = 0;\n-\n-/* Enable SSA-DCE on trees.  */\n-int flag_tree_dce = 0;\n-\n-/* Enable loop header copying on tree-ssa.  */\n-int flag_tree_ch = 0;\n-\n-/* Enable scalar replacement of aggregates.  */\n-int flag_tree_sra = 0;\n-\n-/* Enable SSA->normal pass memory location coalescing.  */\n-int flag_tree_combine_temps = 0;\n-\n-/* Enable SSA->normal pass expression replacement.  */\n-int flag_tree_ter = 0;\n-\n-/* Enable SSA->normal live range splitting.  */\n-int flag_tree_live_range_split = 0;\n-\n-/* Enable dominator optimizations.  */\n-int flag_tree_dom = 0;\n-\n-/* Enable copy rename optimization.  */\n-int flag_tree_copyrename = 0;\n-\n-/* Enable dead store elimination.  */\n-int flag_tree_dse = 0;\n-\n-/* Nonzero if we perform superblock formation.  */\n-int flag_tracer = 0;\n-\n-/* Nonzero if we perform whole unit at a time compilation.  */\n-\n-int flag_unit_at_a_time = 0;\n-\n /* Nonzero if we should track variables.  When\n    flag_var_tracking == AUTODETECT_FLAG_VAR_TRACKING it will be set according\n    to optimize, debug_info_level and debug_hooks in process_options ().  */\n@@ -876,16 +346,12 @@ int flag_var_tracking = AUTODETECT_FLAG_VAR_TRACKING;\n    For each variable, there is an _log variant which is the power\n    of two not less than the variable, for .align output.  */\n \n-int align_loops;\n int align_loops_log;\n int align_loops_max_skip;\n-int align_jumps;\n int align_jumps_log;\n int align_jumps_max_skip;\n-int align_labels;\n int align_labels_log;\n int align_labels_max_skip;\n-int align_functions;\n int align_functions_log;\n \n /* Like align_functions_log above, but used by front-ends to force the\n@@ -900,35 +366,9 @@ typedef struct\n }\n lang_independent_options;\n \n-/* Nonzero if signed arithmetic overflow should trap.  */\n-int flag_trapv = 0;\n-\n-/* Nonzero if signed arithmetic overflow should wrap around.  */\n-int flag_wrapv = 0;\n-\n /* Nonzero if subexpressions must be evaluated from left-to-right.  */\n int flag_evaluation_order = 0;\n \n-/* Add or remove a leading underscore from user symbols.  */\n-int flag_leading_underscore = -1;\n-\n-/*  The version of the C++ ABI in use.  The following values are\n-    allowed:\n-\n-    0: The version of the ABI believed most conformant with the\n-       C++ ABI specification.  This ABI may change as bugs are\n-       discovered and fixed.  Therefore, 0 will not necessarily\n-       indicate the same ABI in different versions of G++.\n-\n-    1: The version of the ABI first used in G++ 3.2.\n-\n-    2: The version of the ABI first used in G++ 3.4.\n-\n-    Additional positive integers will be assigned as new versions of\n-    the ABI become the default version of the ABI.  */\n-\n-int flag_abi_version = 2;\n-\n /* The user symbol prefix after having resolved same.  */\n const char *user_label_prefix;\n \n@@ -940,152 +380,6 @@ static const param_info lang_independent_params[] = {\n   { NULL, 0, NULL }\n };\n \n-/* Table of language-independent -f options.\n-   STRING is the option name.  VARIABLE is the address of the variable.\n-   ON_VALUE is the value to store in VARIABLE\n-    if `-fSTRING' is seen as an option.\n-   (If `-fno-STRING' is seen as an option, the opposite value is stored.)  */\n-\n-static const lang_independent_options f_options[] =\n-{\n-  {\"eliminate-dwarf2-dups\", &flag_eliminate_dwarf2_dups, 1 },\n-  {\"eliminate-unused-debug-symbols\", &flag_debug_only_used_symbols, 1 },\n-  {\"eliminate-unused-debug-types\", &flag_eliminate_unused_debug_types, 1 },\n-  {\"float-store\", &flag_float_store, 1 },\n-  {\"defer-pop\", &flag_defer_pop, 1 },\n-  {\"omit-frame-pointer\", &flag_omit_frame_pointer, 1 },\n-  {\"optimize-sibling-calls\", &flag_optimize_sibling_calls, 1 },\n-  {\"tracer\", &flag_tracer, 1 },\n-  {\"unit-at-a-time\", &flag_unit_at_a_time, 1 },\n-  {\"cse-follow-jumps\", &flag_cse_follow_jumps, 1 },\n-  {\"cse-skip-blocks\", &flag_cse_skip_blocks, 1 },\n-  {\"expensive-optimizations\", &flag_expensive_optimizations, 1 },\n-  {\"thread-jumps\", &flag_thread_jumps, 1 },\n-  {\"strength-reduce\", &flag_strength_reduce, 1 },\n-  {\"unroll-loops\", &flag_unroll_loops, 1 },\n-  {\"unroll-all-loops\", &flag_unroll_all_loops, 1 },\n-  {\"old-unroll-loops\", &flag_old_unroll_loops, 1 },\n-  {\"old-unroll-all-loops\", &flag_old_unroll_all_loops, 1 },\n-  {\"peel-loops\", &flag_peel_loops, 1 },\n-  {\"unswitch-loops\", &flag_unswitch_loops, 1 },\n-  {\"prefetch-loop-arrays\", &flag_prefetch_loop_arrays, 1 },\n-  {\"move-all-movables\", &flag_move_all_movables, 1 },\n-  {\"reduce-all-givs\", &flag_reduce_all_givs, 1 },\n-  {\"peephole\", &flag_no_peephole, 0 },\n-  {\"force-mem\", &flag_force_mem, 1 },\n-  {\"force-addr\", &flag_force_addr, 1 },\n-  {\"function-cse\", &flag_no_function_cse, 0 },\n-  {\"inline-functions\", &flag_inline_functions, 1 },\n-  {\"keep-inline-functions\", &flag_keep_inline_functions, 1 },\n-  {\"inline\", &flag_no_inline, 0 },\n-  {\"keep-static-consts\", &flag_keep_static_consts, 1 },\n-  {\"syntax-only\", &flag_syntax_only, 1 },\n-  {\"shared-data\", &flag_shared_data, 1 },\n-  {\"caller-saves\", &flag_caller_saves, 1 },\n-  {\"pcc-struct-return\", &flag_pcc_struct_return, 1 },\n-  {\"reg-struct-return\", &flag_pcc_struct_return, 0 },\n-  {\"delayed-branch\", &flag_delayed_branch, 1 },\n-  {\"web\", &flag_web, 1},\n-  {\"gcse\", &flag_gcse, 1 },\n-  {\"gcse-lm\", &flag_gcse_lm, 1 },\n-  {\"gcse-sm\", &flag_gcse_sm, 1 },\n-  {\"gcse-las\", &flag_gcse_las, 1 },\n-  {\"gcse-after-reload\", &flag_gcse_after_reload, 1},\n-  {\"branch-target-load-optimize\", &flag_branch_target_load_optimize, 1 },\n-  {\"branch-target-load-optimize2\", &flag_branch_target_load_optimize2, 1 },\n-  {\"btr-bb-exclusive\", &flag_btr_bb_exclusive, 1 },\n-  {\"loop-optimize\", &flag_loop_optimize, 1 },\n-  {\"crossjumping\", &flag_crossjumping, 1 },\n-  {\"if-conversion\", &flag_if_conversion, 1 },\n-  {\"if-conversion2\", &flag_if_conversion2, 1 },\n-  {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1 },\n-  {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1 },\n-  {\"delete-null-pointer-checks\", &flag_delete_null_pointer_checks, 1 },\n-  {\"schedule-insns\", &flag_schedule_insns, 1 },\n-  {\"schedule-insns2\", &flag_schedule_insns_after_reload, 1 },\n-  {\"sched-interblock\",&flag_schedule_interblock, 1 },\n-  {\"sched-spec\",&flag_schedule_speculative, 1 },\n-  {\"sched-spec-load\",&flag_schedule_speculative_load, 1 },\n-  {\"sched-spec-load-dangerous\",&flag_schedule_speculative_load_dangerous, 1 },\n-  {\"sched-stalled-insns\", &flag_sched_stalled_insns, 0 },\n-  {\"sched-stalled-insns-dep\", &flag_sched_stalled_insns_dep, 1 },\n-  {\"sched2-use-superblocks\", &flag_sched2_use_superblocks, 1 },\n-  {\"sched2-use-traces\", &flag_sched2_use_traces, 1 },\n-  {\"modulo-sched\", &flag_modulo_sched, 1 },\n-  {\"branch-count-reg\",&flag_branch_on_count_reg, 1 },\n-  {\"pic\", &flag_pic, 1 },\n-  {\"PIC\", &flag_pic, 2 },\n-  {\"pie\", &flag_pie, 1 },\n-  {\"PIE\", &flag_pie, 2 },\n-  {\"exceptions\", &flag_exceptions, 1 },\n-  {\"unwind-tables\", &flag_unwind_tables, 1 },\n-  {\"asynchronous-unwind-tables\", &flag_asynchronous_unwind_tables, 1 },\n-  {\"non-call-exceptions\", &flag_non_call_exceptions, 1 },\n-  {\"profile-arcs\", &profile_arc_flag, 1 },\n-  {\"profile-values\", &flag_profile_values, 1 },\n-  {\"vpt\", &flag_value_profile_transformations, 1 },\n-  {\"test-coverage\", &flag_test_coverage, 1 },\n-  {\"branch-probabilities\", &flag_branch_probabilities, 1 },\n-  {\"profile\", &profile_flag, 1 },\n-  {\"tree-based-profiling\", &flag_tree_based_profiling, 1 },\n-  {\"reorder-blocks\", &flag_reorder_blocks, 1 },\n-  {\"reorder-blocks-and-partition\", &flag_reorder_blocks_and_partition, 1},\n-  {\"reorder-functions\", &flag_reorder_functions, 1 },\n-  {\"rename-registers\", &flag_rename_registers, 1 },\n-  {\"cprop-registers\", &flag_cprop_registers, 1 },\n-  {\"common\", &flag_no_common, 0 },\n-  {\"inhibit-size-directive\", &flag_inhibit_size_directive, 1 },\n-  {\"function-sections\", &flag_function_sections, 1 },\n-  {\"data-sections\", &flag_data_sections, 1 },\n-  {\"verbose-asm\", &flag_verbose_asm, 1 },\n-  {\"regmove\", &flag_regmove, 1 },\n-  {\"optimize-register-move\", &flag_regmove, 1 },\n-  {\"pack-struct\", &flag_pack_struct, 1 },\n-  {\"stack-check\", &flag_stack_check, 1 },\n-  {\"argument-alias\", &flag_argument_noalias, 0 },\n-  {\"argument-noalias\", &flag_argument_noalias, 1 },\n-  {\"argument-noalias-global\", &flag_argument_noalias, 2 },\n-  {\"strict-aliasing\", &flag_strict_aliasing, 1 },\n-  {\"align-loops\", &align_loops, 0 },\n-  {\"align-jumps\", &align_jumps, 0 },\n-  {\"align-labels\", &align_labels, 0 },\n-  {\"align-functions\", &align_functions, 0 },\n-  {\"merge-constants\", &flag_merge_constants, 1 },\n-  {\"merge-all-constants\", &flag_merge_constants, 2 },\n-  {\"dump-unnumbered\", &flag_dump_unnumbered, 1 },\n-  {\"instrument-functions\", &flag_instrument_function_entry_exit, 1 },\n-  {\"zero-initialized-in-bss\", &flag_zero_initialized_in_bss, 1 },\n-  {\"leading-underscore\", &flag_leading_underscore, 1 },\n-  {\"ident\", &flag_no_ident, 0 },\n-  { \"peephole2\", &flag_peephole2, 1 },\n-  {\"finite-math-only\", &flag_finite_math_only, 1 },\n-  { \"guess-branch-probability\", &flag_guess_branch_prob, 1 },\n-  {\"math-errno\", &flag_errno_math, 1 },\n-  {\"trapping-math\", &flag_trapping_math, 1 },\n-  {\"rounding-math\", &flag_rounding_math, 1 },\n-  {\"unsafe-math-optimizations\", &flag_unsafe_math_optimizations, 1 },\n-  {\"signaling-nans\", &flag_signaling_nans, 1 },\n-  {\"bounds-check\", &flag_bounds_check, 1 },\n-  {\"single-precision-constant\", &flag_single_precision_constant, 1 },\n-  {\"time-report\", &time_report, 1 },\n-  {\"mem-report\", &mem_report, 1 },\n-  { \"trapv\", &flag_trapv, 1 },\n-  { \"wrapv\", &flag_wrapv, 1 },\n-  { \"new-ra\", &flag_new_regalloc, 1 },\n-  { \"var-tracking\", &flag_var_tracking, 1},\n-  { \"tree-gvn\", &flag_tree_gvn, 1 },\n-  { \"tree-pre\", &flag_tree_pre, 1 },\n-  { \"tree-ccp\", &flag_tree_ccp, 1 },\n-  { \"tree-dce\", &flag_tree_dce, 1 },\n-  { \"tree-dominator-opts\", &flag_tree_dom, 1 },\n-  { \"tree-copyrename\", &flag_tree_copyrename, 1 },\n-  { \"tree-dse\", &flag_tree_dse, 1 },\n-  { \"tree-combine-temps\", &flag_tree_combine_temps, 1 },\n-  { \"tree-ter\", &flag_tree_ter, 1 },\n-  { \"tree-lrs\", &flag_tree_live_range_split, 1 },\n-  { \"tree-ch\", &flag_tree_ch, 1 }\n-};\n-\n /* Here is a table, controlled by the tm.h file, listing each -m switch\n    and which bits in `target_switches' it should set or clear.\n    If VALUE is positive, it is bits to set.\n@@ -1997,10 +1291,26 @@ print_switch_values (FILE *file, int pos, int max,\n   pos = print_single_switch (file, 0, max, indent, *indent ? \" \" : \"\", term,\n \t\t\t     _(\"options enabled: \"), \"\");\n \n-  for (j = 0; j < ARRAY_SIZE (f_options); j++)\n-    if (*f_options[j].variable == f_options[j].on_value)\n+  for (j = 0; j < cl_options_count; j++)\n+    {\n+      if (!cl_options[j].flag_var\n+\t  || !(cl_options[j].flags & CL_REPORT))\n+\tcontinue;\n+\n+      if (cl_options[j].has_set_value)\n+\t{\n+\t  if (*cl_options[j].flag_var != cl_options[j].set_value)\n+\t    continue;\n+\t}\n+      else\n+\t{\n+\t  if (!*cl_options[j].flag_var)\n+\t    continue;\n+\t}\n+      \n       pos = print_single_switch (file, pos, max, indent, sep, term,\n-\t\t\t\t \"-f\", f_options[j].string);\n+\t\t\t\t \"\", cl_options[j].opt_text);\n+    }\n \n   /* Print target specific options.  */\n "}, {"sha": "6ff8c3bc85e02e50022e2c09d86ee170eb360075", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50431bc4280a683141da4c51375ef07636083b7b/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=50431bc4280a683141da4c51375ef07636083b7b", "patch": "@@ -104,7 +104,6 @@ extern const char *aux_base_name;\n extern const char *aux_info_file_name;\n extern const char *asm_file_name;\n extern bool exit_after_options;\n-extern bool version_flag;\n \n extern int target_flags_explicit;\n "}]}