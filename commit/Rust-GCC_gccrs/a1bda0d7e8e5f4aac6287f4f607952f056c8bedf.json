{"sha": "a1bda0d7e8e5f4aac6287f4f607952f056c8bedf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFiZGEwZDdlOGU1ZjRhYWM2Mjg3ZjRmNjA3OTUyZjA1NmM4YmVkZg==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2009-05-30T09:05:56Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2009-05-30T09:05:56Z"}, "message": "mingw-tls.c: New file.\n\n2009-05-30  Kai Tietz  <kai.tietz@onevision.com>\n\n        * config/i386/mingw-tls.c: New file.\n        * config/i386/t-gthr-win32 (LIB2FUNCS_EXTRA): Add\n        mingw-tls.c file.\n        * gthr-win32.h (MINGW32_SUPPORTS_MT_EH): Define\n        it for targets defining _WIN32 but not __CYGWIN__.\n\nFrom-SVN: r148000", "tree": {"sha": "f42b3ca66b386fb3dfc7ef132a6272431158fccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f42b3ca66b386fb3dfc7ef132a6272431158fccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf/comments", "author": null, "committer": null, "parents": [{"sha": "ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961"}], "stats": {"total": 250, "additions": 245, "deletions": 5}, "files": [{"sha": "6c28aeb3be21ab8e33d1ab1ff3df4e1c7f715b31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1bda0d7e8e5f4aac6287f4f607952f056c8bedf", "patch": "@@ -1,3 +1,11 @@\n+2009-05-30  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* config/i386/mingw-tls.c: New file.\n+\t* config/i386/t-gthr-win32 (LIB2FUNCS_EXTRA): Add\n+\tmingw-tls.c file.\n+\t* gthr-win32.h (MINGW32_SUPPORTS_MT_EH): Define\n+\tit for targets defining _WIN32 but not __CYGWIN__.\n+\n 2009-05-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* configure.ac: Add MPC support."}, {"sha": "7a5c7758b2eaad6d00ccd0767c31ca5f7f24d6c6", "filename": "gcc/config/i386/mingw-tls.c", "status": "added", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf/gcc%2Fconfig%2Fi386%2Fmingw-tls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf/gcc%2Fconfig%2Fi386%2Fmingw-tls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw-tls.c?ref=a1bda0d7e8e5f4aac6287f4f607952f056c8bedf", "patch": "@@ -0,0 +1,233 @@\n+/* Catch and clean up data allocated in TLS.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2009 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* This part is based on the implementation of Mumit Khan  <khan@nanotech.wisc.edu>\n+ * provided to mingw under public domain and ported for libgcc by Kai Tietz.\n+ */\n+\n+#define WIN32_LEAN_AND_MEAN\n+#include <windows.h>\n+#undef WIN32_LEAN_AND_MEAN\n+#include <stdlib.h>\n+\n+/* The list of threads active with key/dtor pairs. */\n+typedef struct __mingwthr_key {\n+  DWORD key;\n+  void (*dtor) (void *);\n+  struct __mingwthr_key *next;\n+} __mingwthr_key_t;\n+\n+#if defined(_WIN32) && !defined(__CYGWIN__)\n+\n+/* Possibly we could define this here for none MT too and avoid use of\n+   mingwthrd.a at all, but well ...  */\n+#ifdef SHARED\n+__declspec(dllexport)\n+int _CRT_MT = 1;\n+#else\n+#if 0\n+int _CRT_MT = 0;\n+#endif\n+#endif\n+\n+/* Static functions for libgcc.  */\n+#ifndef SHARED\n+\n+int __mingwthr_key_dtor (DWORD,void (*dtor)(void *));\n+int __mingwthr_remove_key_dtor (DWORD);\n+\n+\n+int\n+__mingwthr_key_dtor (DWORD key __attribute__ ((__unused__)),\n+\t\t     void (*dtor) (void *) __attribute__ ((__unused__)))\n+{\n+  return 0;\n+}\n+\n+int\n+__mingwthr_remove_key_dtor (DWORD key __attribute__ ((__unused__)))\n+{\n+  return 0;\n+}\n+\n+#else\n+/* Shared functions for libgcc.  */\n+\n+/* Prototypes.  */\n+__declspec(dllexport) int __mingwthr_key_dtor (DWORD key, void (*) (void *));\n+__declspec(dllexport) int __mingwthr_remove_key_dtor (DWORD);\n+BOOL APIENTRY DllMain (HANDLE, DWORD, LPVOID);\n+\n+\n+/* To protect the thread/key association data structure modifications. */\n+static CRITICAL_SECTION __mingwthr_cs;\n+static __mingwthr_key_t *key_dtor_list;\n+\n+/*\n+ * __mingwthr_key_add:\n+ *\n+ * Add key/dtor association for this thread. If the thread entry does not\n+ * exist, create a new one and add to the head of the threads list; add\n+ * the new assoc at the head of the keys list. \n+ *\n+ */\n+\n+static int\n+___mingwthr_add_key_dtor (DWORD key, void (*dtor) (void *))\n+{\n+  __mingwthr_key_t *new_key;\n+\n+  new_key = (__mingwthr_key_t *) calloc (1, sizeof (__mingwthr_key_t));\n+  if (new_key == NULL)\n+    return -1;\n+  \n+  new_key->key = key;\n+  new_key->dtor = dtor;\n+\n+  EnterCriticalSection (&__mingwthr_cs);\n+\n+  new_key->next = key_dtor_list;\n+  key_dtor_list = new_key;\n+\n+  LeaveCriticalSection (&__mingwthr_cs);\n+\n+  return 0;\n+}\n+\n+static int\n+___mingwthr_remove_key_dtor (DWORD key)\n+{\n+  __mingwthr_key_t *prev_key;\n+  __mingwthr_key_t *cur_key;\n+\n+  EnterCriticalSection (&__mingwthr_cs);\n+\n+  prev_key = NULL;\n+  cur_key = key_dtor_list;\n+\n+  while (cur_key != NULL)\n+    {\n+       if( cur_key->key == key )\n+\t {\n+\t    /* take key/dtor out of list */\n+\t    if (prev_key == NULL)\n+\t      key_dtor_list = cur_key->next;\n+\t    else\n+\t      prev_key->next = cur_key->next;\n+\n+\t    free (cur_key);\n+\t    break;\n+\t }\n+\n+       prev_key = cur_key;\n+       cur_key = cur_key->next;\n+    }\n+\n+  LeaveCriticalSection (&__mingwthr_cs);\n+\n+  return 0;\n+}\n+\n+/*\n+ * __mingwthr_run_key_dtors (void):\n+ *\n+ * Callback from DllMain when thread detaches to clean up the key\n+ * storage. \n+ *\n+ * Note that this does not delete the key itself, but just runs\n+ * the dtor if the current value are both non-NULL. Note that the\n+ * keys with NULL dtors are not added by __mingwthr_key_dtor, the\n+ * only public interface, so we don't need to check. \n+ *\n+ */\n+\n+static void\n+__mingwthr_run_key_dtors (void)\n+{\n+  __mingwthr_key_t *keyp;\n+\n+  EnterCriticalSection (&__mingwthr_cs);\n+\n+  for (keyp = key_dtor_list; keyp; )\n+    {\n+       LPVOID value = TlsGetValue (keyp->key);\n+       if (GetLastError () == ERROR_SUCCESS)\n+\t {\n+\t    if (value)\n+\t       (*keyp->dtor) (value);\n+\t }\n+       keyp = keyp->next;\n+    }\n+  \n+  LeaveCriticalSection (&__mingwthr_cs);\n+}\n+\n+/*\n+ * __mingwthr_register_key_dtor (DWORD key, void (*dtor) (void *))\n+ *\n+ * Public interface called by C++ exception handling mechanism in\n+ * libgcc (cf: __gthread_key_create).\n+ *\n+ */\n+\n+__declspec(dllexport)\n+int\n+__mingwthr_key_dtor (DWORD key, void (*dtor) (void *))\n+{\n+  if (dtor)\n+    return ___mingwthr_add_key_dtor (key, dtor);\n+\n+  return 0;\n+}\n+\n+__declspec(dllexport)\n+int\n+__mingwthr_remove_key_dtor (DWORD key)\n+{\n+   return ___mingwthr_remove_key_dtor (key);\n+}\n+\n+BOOL APIENTRY\n+DllMain (HANDLE hDllHandle __attribute__ ((__unused__)),\n+\t DWORD reason /* Reason this function is being called. */,\n+\t LPVOID reserved __attribute__ ((__unused__)))\n+{\n+  switch (reason)\n+    {\n+    case DLL_PROCESS_ATTACH:\n+       InitializeCriticalSection (&__mingwthr_cs);\n+       break;\n+\n+    case DLL_PROCESS_DETACH:\n+      __mingwthr_run_key_dtors ();\n+       DeleteCriticalSection (&__mingwthr_cs);\n+      break;\n+\n+    case DLL_THREAD_ATTACH:\n+      break;\n+\n+    case DLL_THREAD_DETACH:\n+      __mingwthr_run_key_dtors ();\n+      break;\n+    }\n+  return TRUE;\n+}\n+#endif\n+#endif"}, {"sha": "e3977ce6336c83b7b23f17de27c198708bca48e2", "filename": "gcc/config/i386/t-gthr-win32", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf/gcc%2Fconfig%2Fi386%2Ft-gthr-win32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf/gcc%2Fconfig%2Fi386%2Ft-gthr-win32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-gthr-win32?ref=a1bda0d7e8e5f4aac6287f4f607952f056c8bedf", "patch": "@@ -1,3 +1,3 @@\n # We hide calls to w32api needed for w32 thread support here:\n-LIB2FUNCS_EXTRA = $(srcdir)/config/i386/gthr-win32.c\n-\n+LIB2FUNCS_EXTRA = $(srcdir)/config/i386/gthr-win32.c \\\n+\t$(srcdir)/config/i386/mingw-tls.c"}, {"sha": "74ac6179c2c44cd4ce8c5f19bc6d2fb795261af8", "filename": "gcc/gthr-win32.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf/gcc%2Fgthr-win32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bda0d7e8e5f4aac6287f4f607952f056c8bedf/gcc%2Fgthr-win32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-win32.h?ref=a1bda0d7e8e5f4aac6287f4f607952f056c8bedf", "patch": "@@ -361,15 +361,14 @@ typedef struct {\n   __gthread_recursive_mutex_init_function\n #define __GTHREAD_RECURSIVE_MUTEX_INIT_DEFAULT {-1, 0, 0, 0}\n \n-#if __MINGW32_MAJOR_VERSION >= 1 || \\\n-  (__MINGW32_MAJOR_VERSION == 0 && __MINGW32_MINOR_VERSION > 2)\n+#if defined (_WIN32) && !defined(__CYGWIN__)\n #define MINGW32_SUPPORTS_MT_EH 1\n /* Mingw runtime >= v0.3 provides a magic variable that is set to nonzero\n    if -mthreads option was specified, or 0 otherwise. This is to get around\n    the lack of weak symbols in PE-COFF.  */\n extern int _CRT_MT;\n extern int __mingwthr_key_dtor (unsigned long, void (*) (void *));\n-#endif /* __MINGW32__ version */\n+#endif /* _WIN32 && !__CYGWIN__ */\n \n /* The Windows95 kernel does not export InterlockedCompareExchange.\n    This provides a substitute.   When building apps that reference"}]}