{"sha": "33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNkYTk5Y2I5Y2RhNzg3MmNhNmJhMTc5ZDJkODRjNGNiOWUzMzZlZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-09-22T08:19:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-09-22T08:19:08Z"}, "message": "hash_bytes.cc: Move...\n\n2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* src/hash_bytes.cc: Move...\n\t* libsupc++/hash_bytes.cc: ... here.\n\t* src/Makefile.am: Adjust.\n\t* libsupc++/Makefile.am: Likewise.\n\t* config/abi/pre/gnu.ver: Likewise.\n\t* libsupc++/typeinfo (type_info::hash_code): Add in C++0x mode.\n\t* src/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am: Likewise.\n\t* testsuite/18_support/type_info/hash_code.cc: New.\n\nFrom-SVN: r164510", "tree": {"sha": "60040e6744c2b03019bf7e0a7363f0884f8b609a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60040e6744c2b03019bf7e0a7363f0884f8b609a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/comments", "author": null, "committer": null, "parents": [{"sha": "c69fa2d460106f691b14cf3bdd5d44cd8daa870a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69fa2d460106f691b14cf3bdd5d44cd8daa870a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c69fa2d460106f691b14cf3bdd5d44cd8daa870a"}], "stats": {"total": 155, "additions": 117, "deletions": 38}, "files": [{"sha": "bc75ce7f5a647848140aec530eb4d1c0bc982e0f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "patch": "@@ -1,3 +1,15 @@\n+2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* src/hash_bytes.cc: Move...\n+\t* libsupc++/hash_bytes.cc: ... here.\n+\t* src/Makefile.am: Adjust.\n+\t* libsupc++/Makefile.am: Likewise.\n+\t* config/abi/pre/gnu.ver: Likewise.\n+\t* libsupc++/typeinfo (type_info::hash_code): Add in C++0x mode.\n+\t* src/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am: Likewise.\n+\t* testsuite/18_support/type_info/hash_code.cc: New.\n+\n 2010-09-20  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR libstdc++/45711"}, {"sha": "435f8579827ded11c1b6a3232bfa46410a55d8e8", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "patch": "@@ -1178,12 +1178,6 @@ GLIBCXX_3.4.15 {\n     _ZNSbIwSt11char_traitsIwESaIwEE4backEv;\n     _ZNKSbIwSt11char_traitsIwESaIwEE4backEv;\n \n-    # Default function.\n-    _ZSt11_Hash_bytesPKv*;\n-\n-    # FNV hash.\n-    _ZSt15_Fnv_hash_bytesPKv*;\n-\n } GLIBCXX_3.4.14;\n \n # Symbols in the support library (libsupc++) have their own tag.\n@@ -1356,4 +1350,10 @@ CXXABI_1.3.5 {\n     _ZTIPDn;\n     _ZTIPKDn;\n \n+    # Default function.\n+    _ZSt11_Hash_bytesPKv*;\n+\n+    # FNV hash.\n+    _ZSt15_Fnv_hash_bytesPKv*;\n+\n } CXXABI_1.3.4;"}, {"sha": "5fbad83049a7a78c1fb1cc103f0f1019da22ae81", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "patch": "@@ -69,6 +69,7 @@ sources = \\\n \tfunction_type_info.cc \\\n \tfundamental_type_info.cc \\\n \tguard.cc \\\n+\thash_bytes.cc \\\n \tnew_handler.cc \\\n \tnew_op.cc \\\n \tnew_opnt.cc \\"}, {"sha": "394bd42afe0bada0953a199bb1081fef1baab16b", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "patch": "@@ -95,10 +95,10 @@ am__objects_1 = array_type_info.lo atexit_arm.lo bad_cast.lo \\\n \teh_globals.lo eh_personality.lo eh_ptr.lo eh_term_handler.lo \\\n \teh_terminate.lo eh_throw.lo eh_type.lo eh_unex_handler.lo \\\n \tenum_type_info.lo function_type_info.lo \\\n-\tfundamental_type_info.lo guard.lo new_handler.lo new_op.lo \\\n-\tnew_opnt.lo new_opv.lo new_opvnt.lo pbase_type_info.lo \\\n-\tpmem_type_info.lo pointer_type_info.lo pure.lo \\\n-\tsi_class_type_info.lo tinfo.lo tinfo2.lo vec.lo \\\n+\tfundamental_type_info.lo guard.lo hash_bytes.lo new_handler.lo \\\n+\tnew_op.lo new_opnt.lo new_opv.lo new_opvnt.lo \\\n+\tpbase_type_info.lo pmem_type_info.lo pointer_type_info.lo \\\n+\tpure.lo si_class_type_info.lo tinfo.lo tinfo2.lo vec.lo \\\n \tvmi_class_type_info.lo vterminate.lo\n @GLIBCXX_HOSTED_TRUE@am__objects_2 = cp-demangle.lo\n am_libsupc___la_OBJECTS = $(am__objects_1) $(am__objects_2)\n@@ -364,6 +364,7 @@ sources = \\\n \tfunction_type_info.cc \\\n \tfundamental_type_info.cc \\\n \tguard.cc \\\n+\thash_bytes.cc \\\n \tnew_handler.cc \\\n \tnew_op.cc \\\n \tnew_opnt.cc \\"}, {"sha": "e9a3812664e890aaafdf14a5737bdcb542f9bec3", "filename": "libstdc++-v3/libsupc++/hash_bytes.cc", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fhash_bytes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fhash_bytes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fhash_bytes.cc?ref=33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "patch": "@@ -32,16 +32,15 @@\n // function apears to be better in both speed and hash quality, and\n // FNV is provided primarily for backward compatibility.\n \n-#include <cstring>\n-#include <bits/functional_hash.h>\n+#include <bits/c++config.h>\n \n namespace\n {\n   inline std::size_t\n   unaligned_load(const char* p)\n   {\n     std::size_t result;\n-    std::memcpy(&result, p, sizeof(result));\n+    __builtin_memcpy(&result, p, sizeof(result));\n     return result;\n   }\n \n@@ -50,7 +49,7 @@ namespace\n   inline std::size_t\n   load_bytes(const char* p, int n)\n   {\n-    size_t result = 0;\n+    std::size_t result = 0;\n     --n;\n     do\n       result = (result << 8) + static_cast<unsigned char>(p[n]);", "previous_filename": "libstdc++-v3/src/hash_bytes.cc"}, {"sha": "8030eb40e2f0ef98c7be6e85bbcb649867b2e83c", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "patch": "@@ -78,6 +78,11 @@ namespace __cxxabiv1\n \n namespace std \n {\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  size_t\n+  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);\n+#endif\n+\n   /**\n    *  @brief  Part of RTTI.\n    *\n@@ -135,6 +140,18 @@ namespace std\n     bool operator!=(const type_info& __arg) const\n     { return !operator==(__arg); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    size_t hash_code() const throw()\n+    {\n+#  if !__GXX_MERGED_TYPEINFO_NAMES\n+      return _Hash_bytes(name(), __builtin_strlen(name()),\n+\t\t\t static_cast<size_t>(0xc70f6907UL));\n+#  else\n+      return reinterpret_cast<size_t>(__name);\n+#  endif\n+    }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n     // Return true if this is a pointer type of some kind\n     virtual bool __is_pointer_p() const;\n "}, {"sha": "d4efaf2e530fbbedc6511eaae9dcaed61c9471b7", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "patch": "@@ -179,7 +179,6 @@ sources = \\\n \thash_tr1.cc \\\n \thashtable_c++0x.cc \\\n \thashtable_tr1.cc \\\n-\thash_bytes.cc \\\n \tios.cc \\\n \tios_failure.cc \\\n \tios_init.cc \\\n@@ -310,11 +309,6 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n-hash_bytes.lo: hash_bytes.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n-hash_bytes.o: hash_bytes.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n-\n limits.lo: limits.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n limits.o: limits.cc"}, {"sha": "647124e4674ede2d4d7aac91aaff0c835c62d2d1", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "patch": "@@ -100,18 +100,17 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tcompatibility-c++0x.lo compatibility-debug_list.lo \\\n \tcompatibility-list.lo complex_io.lo ctype.lo debug.lo \\\n \tfunctexcept.lo globals_io.lo hash_c++0x.lo hash_tr1.lo \\\n-\thashtable_c++0x.lo hashtable_tr1.lo hash_bytes.lo ios.lo \\\n-\tios_failure.lo ios_init.lo ios_locale.lo limits.lo list.lo \\\n-\tdebug_list.lo locale.lo locale_init.lo locale_facets.lo \\\n-\tlocalename.lo math_stubs_float.lo math_stubs_long_double.lo \\\n-\tstdexcept.lo strstream.lo system_error.lo tree.lo \\\n-\tallocator-inst.lo concept-inst.lo fstream-inst.lo ext-inst.lo \\\n-\tios-inst.lo iostream-inst.lo istream-inst.lo istream.lo \\\n-\tlocale-inst.lo misc-inst.lo ostream-inst.lo sstream-inst.lo \\\n-\tstreambuf-inst.lo streambuf.lo string-inst.lo valarray-inst.lo \\\n-\twlocale-inst.lo wstring-inst.lo mutex.lo condition_variable.lo \\\n-\tchrono.lo thread.lo future.lo $(am__objects_1) \\\n-\t$(am__objects_4)\n+\thashtable_c++0x.lo hashtable_tr1.lo ios.lo ios_failure.lo \\\n+\tios_init.lo ios_locale.lo limits.lo list.lo debug_list.lo \\\n+\tlocale.lo locale_init.lo locale_facets.lo localename.lo \\\n+\tmath_stubs_float.lo math_stubs_long_double.lo stdexcept.lo \\\n+\tstrstream.lo system_error.lo tree.lo allocator-inst.lo \\\n+\tconcept-inst.lo fstream-inst.lo ext-inst.lo ios-inst.lo \\\n+\tiostream-inst.lo istream-inst.lo istream.lo locale-inst.lo \\\n+\tmisc-inst.lo ostream-inst.lo sstream-inst.lo streambuf-inst.lo \\\n+\tstreambuf.lo string-inst.lo valarray-inst.lo wlocale-inst.lo \\\n+\twstring-inst.lo mutex.lo condition_variable.lo chrono.lo \\\n+\tthread.lo future.lo $(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n@@ -384,7 +383,6 @@ sources = \\\n \thash_tr1.cc \\\n \thashtable_c++0x.cc \\\n \thashtable_tr1.cc \\\n-\thash_bytes.cc \\\n \tios.cc \\\n \tios_failure.cc \\\n \tios_init.cc \\\n@@ -887,11 +885,6 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n-hash_bytes.lo: hash_bytes.cc\n-\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n-hash_bytes.o: hash_bytes.cc\n-\t$(CXXCOMPILE) -std=gnu++0x -c $<\n-\n limits.lo: limits.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n limits.o: limits.cc"}, {"sha": "066736c4ecf76cfabbf861e1a6bcdd75b7f040fa", "filename": "libstdc++-v3/testsuite/18_support/type_info/hash_code.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Fhash_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33da99cb9cda7872ca6ba179d2d84c4cb9e336ed/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Fhash_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Fhash_code.cc?ref=33da99cb9cda7872ca6ba179d2d84c4cb9e336ed", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <typeinfo>\n+#include <testsuite_hooks.h>\n+\n+class Abraca { };\n+Abraca a1, a2_;\n+const Abraca a2 = a2_;\n+\n+class Dabra { };\n+Dabra d1;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY( typeid(int) != typeid(double) );\n+  VERIFY( typeid(int).hash_code() != typeid(double).hash_code() );\n+\n+  VERIFY( typeid(a1) == typeid(a2) );\n+  VERIFY( typeid(a1).hash_code() == typeid(a2).hash_code() );\n+\n+  VERIFY( typeid(Abraca) == typeid(const Abraca) );\n+  VERIFY( typeid(Abraca).hash_code() == typeid(const Abraca).hash_code() );\n+\n+  VERIFY( typeid(Abraca) == typeid(a2) );\n+  VERIFY( typeid(Abraca).hash_code() == typeid(a2).hash_code() );\n+\n+  VERIFY( typeid(Abraca) == typeid(const Abraca&) );\n+  VERIFY( typeid(Abraca).hash_code() == typeid(const Abraca&).hash_code() );\n+\n+  VERIFY( typeid(Abraca) != typeid(Dabra) );\n+  VERIFY( typeid(Abraca).hash_code() != typeid(Dabra).hash_code() );\n+\n+  VERIFY( typeid(a1) != typeid(d1) );\n+  VERIFY( typeid(a1).hash_code() != typeid(d1).hash_code() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}