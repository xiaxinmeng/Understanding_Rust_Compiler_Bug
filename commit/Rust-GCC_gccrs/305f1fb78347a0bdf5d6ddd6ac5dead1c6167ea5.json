{"sha": "305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1ZjFmYjc4MzQ3YTBiZGY1ZDZkZGQ2YWM1ZGVhZDFjNjE2N2VhNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-15T11:04:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-15T11:04:41Z"}, "message": "re PR tree-optimization/88464 (AVX-512 vectorization of masked scatter failing with \"not suitable for scatter store\")\n\n\tPR tree-optimization/88464\n\tPR target/88498\n\t* tree-vect-stmts.c (vect_build_gather_load_calls): For NARROWING\n\tand mask with integral masktype, don't try to permute mask vectors,\n\tinstead emit VEC_UNPACK_{LO,HI}_EXPR.  Fix up NOP_EXPR operand.\n\t(vectorizable_store): Handle masked scatters with decl and integral\n\tmask type.\n\t(permute_vec_elements): Allow scalar_dest to be NULL.\n\t* config/i386/i386.c (ix86_get_builtin)\n\t<case IX86_BUILTIN_GATHER3ALTDIV16SF>: Use lowpart_subreg for masks.\n\t<case IX86_BUILTIN_GATHER3ALTDIV8SF>: Don't assume mask and src have\n\tto be the same.\n\n\t* gcc.target/i386/avx512f-pr88462-1.c: Rename to ...\n\t* gcc.target/i386/avx512f-pr88464-1.c: ... this.  Fix up PR number.\n\tExpect 4 vectorized loops instead of 3.\n\t(f4): New function.\n\t* gcc.target/i386/avx512f-pr88462-2.c: Rename to ...\n\t* gcc.target/i386/avx512f-pr88464-2.c: ... this.  Fix up PR number\n\tand #include.\n\t(avx512f_test): Prepare arguments for f4 and check the results.\n\t* gcc.target/i386/avx512f-pr88464-3.c: New test.\n\t* gcc.target/i386/avx512f-pr88464-4.c: New test.\n\nFrom-SVN: r267170", "tree": {"sha": "60a538f3c5ad97329a217ca0803ffd5d846589d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60a538f3c5ad97329a217ca0803ffd5d846589d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5/comments", "author": null, "committer": null, "parents": [{"sha": "b1985ca02ea01cd32de23be109672a7ebf593a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1985ca02ea01cd32de23be109672a7ebf593a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1985ca02ea01cd32de23be109672a7ebf593a46"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "9eda4aa9b13c0f08ead615590738413bc0562064", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr88464-3.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88464-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88464-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88464-3.c?ref=305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5", "patch": "@@ -0,0 +1,45 @@\n+/* PR tree-optimization/88464 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512f -mprefer-vector-width=512 -mtune=skylake-avx512 -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times \"loop vectorized using 64 byte vectors\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 4 \"vect\" } } */\n+\n+__attribute__((noipa)) void\n+f1 (double * __restrict__ a, const double * __restrict__ b, const int * __restrict__ c, int n)\n+{\n+  int i;\n+#pragma GCC ivdep\n+  for (i = 0; i < n; ++i)\n+    if (b[i] > -2.0)\n+      a[c[i]] = b[i];\n+}\n+\n+__attribute__((noipa)) void\n+f2 (double * __restrict__ a, const double * __restrict__ b, const long * __restrict__ c, int n)\n+{\n+  int i;\n+#pragma GCC ivdep\n+  for (i = 0; i < n; ++i)\n+    if (b[i] > -2.0)\n+      a[c[i]] = b[i];\n+}\n+\n+__attribute__((noipa)) void\n+f3 (float * __restrict__ a, const float * __restrict__ b, const int * __restrict__ c, int n)\n+{\n+  int i;\n+#pragma GCC ivdep\n+  for (i = 0; i < n; ++i)\n+    if (b[i] > -2.0f)\n+      a[c[i]] = b[i];\n+}\n+\n+__attribute__((noipa)) void\n+f4 (float * __restrict__ a, const float * __restrict__ b, const long * __restrict__ c, int n)\n+{\n+  int i;\n+#pragma GCC ivdep\n+  for (i = 0; i < n; ++i)\n+    if (b[i] > -2.0f)\n+      a[c[i]] = b[i];\n+}"}, {"sha": "e347e63b17a1a0c75df1a0ee3822b305e6a17c5f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr88464-4.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88464-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88464-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88464-4.c?ref=305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5", "patch": "@@ -0,0 +1,61 @@\n+/* PR tree-optimization/88464 */\n+/* { dg-do run { target { avx512f } } } */\n+/* { dg-options \"-O3 -mavx512f -mprefer-vector-width=512 -mtune=skylake-avx512\" } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-pr88464-3.c\"\n+\n+static void\n+avx512f_test (void)\n+{\n+  double a[1024], b[1024];\n+  float c[1024], f[1024];\n+  int d[1024];\n+  long e[1024];\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      asm volatile (\"\" : \"+g\" (i));\n+      a[i] = -5.0;\n+      b[i] = (i % 3) != 0 ? 2.0 * i : -5.0;\n+      d[i] = (i % 3) != 0 ? 1023 - i : __INT_MAX__;\n+    }\n+  f1 (a, b, d, 1024);\n+  for (i = 0; i < 1024; i++)\n+    {\n+      asm volatile (\"\" : \"+g\" (i));\n+      if (a[i] != ((i % 3) != 0 ? (1023 - i) * 2.0 : -5.0))\n+\tabort ();\n+      a[i] = -5.0;\n+      b[i] = (i % 3) != 1 ? 3.0 * i : -5.0;\n+      e[i] = (i % 3) != 1 ? 1023 - i : __LONG_MAX__;\n+    }\n+  f2 (a, b, e, 1024);\n+  for (i = 0; i < 1024; i++)\n+    {\n+      asm volatile (\"\" : \"+g\" (i));\n+      if (a[i] != ((i % 3) != 2 ? (1023 - i) * 3.0 : -5.0))\n+\tabort ();\n+      c[i] = -5.0f;\n+      d[i] = (i % 3) != 2 ? 1023 - i : __INT_MAX__;\n+      f[i] = (i % 3) != 2 ? 4.0f * i : -5.0f;\n+    }\n+  f3 (c, f, d, 1024);\n+  for (i = 0; i < 1024; i++)\n+    {\n+      asm volatile (\"\" : \"+g\" (i));\n+      if (c[i] != ((i % 3) != 1 ? (1023 - i) * 4.0f : -5.0f))\n+\tabort ();\n+      c[i] = -5.0f;\n+      e[i] = (i % 3) != 0 ? 1023 - i : __INT_MAX__;\n+      f[i] = (i % 3) != 0 ? 5.0f * i : -5.0f;\n+    }\n+  f4 (c, f, e, 1024);\n+  for (i = 0; i < 1024; i++)\n+    {\n+      asm volatile (\"\" : \"+g\" (i));\n+      if (c[i] != ((i % 3) != 0 ? (1023 - i) * 5.0f : -5.0f))\n+\tabort ();\n+    }\n+}"}]}