{"sha": "5a1b56cc9843425557fc9ccbcf99aabfc7028123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExYjU2Y2M5ODQzNDI1NTU3ZmM5Y2NiY2Y5OWFhYmZjNzAyODEyMw==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2018-07-05T14:48:51Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2018-07-05T14:48:51Z"}, "message": "rs6000-c.c: Map ALTIVEC_BUILTIN_VEC_UNPACKH for float argument to VSX_BUILTIN_DOUBLEH_V4SF.\n\ngcc/ChangeLog:\n\n2018-07-05  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c: Map ALTIVEC_BUILTIN_VEC_UNPACKH for\n\tfloat argument to VSX_BUILTIN_DOUBLEH_V4SF.\n\tMap ALTIVEC_BUILTIN_VEC_UNPACKL for float argument to\n\tVSX_BUILTIN_DOUBLEL_V4SF.\n\ngcc/testsuite/ChangeLog:\n\n2018-07-05  Carl Love  <cel@us.ibm.com>\n\t* gcc.target/altivec-1-runnable.c: New test file.\n\t* gcc.target/altivec-2-runnable.c: New test file.\n\t* gcc.target/vsx-7.c (main2): Change expected expected instruction\n\tfor tests.\n\nFrom-SVN: r262439", "tree": {"sha": "ad3635734ba09ec9cfce08bc8ca651bf947dd178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad3635734ba09ec9cfce08bc8ca651bf947dd178"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a1b56cc9843425557fc9ccbcf99aabfc7028123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1b56cc9843425557fc9ccbcf99aabfc7028123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1b56cc9843425557fc9ccbcf99aabfc7028123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1b56cc9843425557fc9ccbcf99aabfc7028123/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715fcd73b66c639d9e0e3f3ef9c6ff9d621d7131"}], "stats": {"total": 375, "additions": 369, "deletions": 6}, "files": [{"sha": "07f9ef335893675e93e0e3d779c38f70f16a107f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a1b56cc9843425557fc9ccbcf99aabfc7028123", "patch": "@@ -1,3 +1,10 @@\n+2018-07-05  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c: Map ALTIVEC_BUILTIN_VEC_UNPACKH for\n+\tfloat argument to VSX_BUILTIN_DOUBLEH_V4SF.\n+\tMap ALTIVEC_BUILTIN_VEC_UNPACKL for float argument to\n+\tVSX_BUILTIN_DOUBLEL_V4SF.\n+\n 2018-07-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/86400"}, {"sha": "f37f0b1503d3f0e7e5fa72626d45a629400c8331", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=5a1b56cc9843425557fc9ccbcf99aabfc7028123", "patch": "@@ -865,7 +865,7 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V4SI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKH, ALTIVEC_BUILTIN_VUPKHPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_pixel_V8HI, 0, 0 },\n-  { ALTIVEC_BUILTIN_VEC_UNPACKH, ALTIVEC_BUILTIN_VUPKHPX,\n+  { ALTIVEC_BUILTIN_VEC_UNPACKH, VSX_BUILTIN_DOUBLEH_V4SF,\n     RS6000_BTI_V2DF, RS6000_BTI_V4SF, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHSH, ALTIVEC_BUILTIN_VUPKHSH,\n     RS6000_BTI_V4SI, RS6000_BTI_V8HI, 0, 0 },\n@@ -897,7 +897,7 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DI, RS6000_BTI_V4SI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKL, P8V_BUILTIN_VUPKLSW,\n     RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V4SI, 0, 0 },\n-  { ALTIVEC_BUILTIN_VEC_UNPACKL, ALTIVEC_BUILTIN_VUPKLPX,\n+  { ALTIVEC_BUILTIN_VEC_UNPACKL, VSX_BUILTIN_DOUBLEL_V4SF,\n     RS6000_BTI_V2DF, RS6000_BTI_V4SF, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKLPX, ALTIVEC_BUILTIN_VUPKLPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V8HI, 0, 0 },"}, {"sha": "33ac74025346ef0cab4e89f8ae9d75aec1166207", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a1b56cc9843425557fc9ccbcf99aabfc7028123", "patch": "@@ -1,3 +1,9 @@\n+2018-07-05  Carl Love  <cel@us.ibm.com>\n+\t* gcc.target/altivec-1-runnable.c: New test file.\n+\t* gcc.target/altivec-2-runnable.c: New test file.\n+\t* gcc.target/vsx-7.c (main2): Change expected expected instruction\n+\tfor tests.\n+\n 2018-07-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/86400"}, {"sha": "bb913d2d5717259b6e4fd85c9c8b423d5722482e", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-1-runnable.c", "status": "added", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-1-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-1-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-1-runnable.c?ref=5a1b56cc9843425557fc9ccbcf99aabfc7028123", "patch": "@@ -0,0 +1,257 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+/* Endian considerations: The \"high\" half of a vector with n elements is the\n+   first n/2 elements of the vector. For little endian, these elements are in\n+   the rightmost half of the vector. For big endian, these elements are in the\n+   leftmost half of the vector.  */\n+\n+\n+void abort (void);\n+\n+int main ()\n+{\n+  int i;\n+  vector bool short vec_bs_arg;\n+  vector bool short vec_bs_result, vec_bs_expected;\n+  vector bool int vec_bi_arg;\n+  vector bool int vec_bi_result, vec_bi_expected;\n+  vector bool char vec_bc_arg;\n+  vector bool char vec_bc_result, vec_bc_expected;\n+  vector signed short vec_ss_arg;\n+  vector signed short vec_ss_result, vec_ss_expected;\n+  vector signed int vec_si_arg;\n+  vector signed int vec_si_result, vec_si_expected;\n+  vector signed char vec_sc_arg;\n+  vector signed char vec_sc_result, vec_sc_expected;\n+  vector float vec_float_arg;\n+  vector double vec_double_result, vec_double_expected;\n+  vector pixel vec_pixel_arg;\n+  vector unsigned int vec_ui_result, vec_ui_expected;\n+\n+  union conv {\n+\t  double d;\n+\t  unsigned long long l;\n+  } conv_exp, conv_val;\n+\n+  vec_bs_arg = (vector bool short){ 0, 101, 202, 303,\n+\t\t\t\t    404, 505, 606, 707 };\n+  vec_bi_expected = (vector bool int){ 0, 101, 202, 303 };\n+\n+  vec_bi_result = vec_unpackh (vec_bs_arg);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_bi_expected[i] != vec_bi_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackh(),  vec_bi_expected[%d] = %d does not match vec_bi_result[%d] = %d\\n\",\n+\t      i, vec_bi_expected[i], i, vec_bi_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+  vec_bi_expected = (vector bool int){ 404, 505, 606, 707 };\n+  vec_bi_result = vec_unpackl (vec_bs_arg);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_bi_expected[i] != vec_bi_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackl(), vec_bi_expected[%d] = %d does not match vec_bi_result[%d] = %d\\n\",\n+\t      i, vec_bi_expected[i], i, vec_bi_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+  \n+  vec_ss_arg = (vector signed short){ 0, 101, 202, 303,\n+\t\t\t\t    404, 505, 606, 707 };\n+  vec_si_expected = (vector signed int){ 0, 101, 202, 303 };\n+\n+  vec_si_result = vec_unpackh (vec_ss_arg);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_si_expected[i] != vec_si_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackh(), vec_si_expected[%d] = %d does not match vec_si_result[%d] = %d\\n\",\n+\t      i, vec_si_expected[i], i, vec_si_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+  vec_si_expected = (vector signed int){ 404, 505, 606, 707 };\n+\n+  vec_si_result = vec_unpackl (vec_ss_arg);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_si_expected[i] != vec_si_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackl(), vec_si_expected[%d] = %d does not match vec_si_result[%d] = %d\\n\",\n+\t      i, vec_si_expected[i], i, vec_si_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+\n+  vec_pixel_arg = (vector pixel){ 0x0, 0x65, 0xca, 0x12f,\n+\t\t\t\t  0x194, 0x1f9, 0x25e, 0x2c3 };\n+  vec_ui_expected = (vector unsigned int){ 0x0, 0x305, 0x60a, 0x90f };\n+\n+  vec_ui_result = vec_unpackh (vec_pixel_arg);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_ui_expected[i] != vec_ui_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackh(), vec_ui_expected[%d] = 0x%x does not match vec_ui_result[%d] = 0x%x\\n\",\n+\t      i, vec_ui_expected[i], i, vec_ui_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+  vec_ui_expected = (vector unsigned int){ 0xc14, 0xf19, 0x121e, 0x1603 };\n+\n+  vec_ui_result = vec_unpackl (vec_pixel_arg);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_ui_expected[i] != vec_ui_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackl(), vec_ui_expected[%d] = 0x%x does not match vec_ui_result[%d] = 0x%x\\n\",\n+\t      i, vec_ui_expected[i], i, vec_ui_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+\n+  vec_bc_arg = (vector bool char){ 0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t   0, 0, 1, 1, 0, 0, 1, 1 };\n+\n+  vec_bs_expected = (vector bool short){ 0, 1, 0, 1, 0, 1, 0, 1 };\n+\n+  vec_bs_result = vec_unpackh (vec_bc_arg);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (vec_bs_expected[i] != vec_bs_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackh(), vec_bs_expected[%d] = %d does not match vec_bs_result[%d] = %d\\n\",\n+\t      i, vec_bs_expected[i], i, vec_bs_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+  vec_bs_expected = (vector bool short){ 0, 0, 1, 1, 0, 0, 1, 1 };\n+\n+  vec_bs_result = vec_unpackl (vec_bc_arg);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (vec_bs_expected[i] != vec_bs_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackh(), vec_bs_expected[%d] = %d does not match vec_bs_result[%d] = %d\\n\",\n+\t      i, vec_bs_expected[i], i, vec_bs_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+  vec_bs_expected = (vector bool short){ 0, 0, 1, 1, 0, 0, 1, 1 };\n+\n+  vec_bs_result = vec_unpackl (vec_bc_arg);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (vec_bs_expected[i] != vec_bs_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackl(), vec_bs_expected[%d] = %d does not match vec_bs_result[%d] = %d\\n\",\n+\t      i, vec_bs_expected[i], i, vec_bs_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+\n+  vec_sc_arg = (vector signed char){ 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t     8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+  vec_ss_expected = (vector signed short){ 0, 1, 2, 3, 4, 5, 6, 7 };\n+\n+  vec_ss_result = vec_unpackh (vec_sc_arg);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (vec_ss_expected[i] != vec_ss_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackh(), vec_ss_expected[%d] = %d does not match vec_ss_result[%d] = %d\\n\",\n+\t      i, vec_ss_expected[i], i, vec_ss_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+  vec_ss_expected = (vector signed short){ 8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+  vec_ss_result = vec_unpackl (vec_sc_arg);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (vec_ss_expected[i] != vec_ss_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackl(), vec_ss_expected[%d] = %d does not match vec_ss_result[%d] = %d\\n\",\n+\t      i, vec_ss_expected[i], i, vec_ss_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+  \n+\n+  vec_float_arg = (vector float){ 0.0, 1.5, 2.5, 3.5 };\n+\n+  vec_double_expected = (vector double){ 0.0, 1.5 };\n+\n+  vec_double_result = vec_unpackh (vec_float_arg);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (vec_double_expected[i] != vec_double_result[i])\n+      {\n+#if DEBUG\n+\t printf(\"ERROR: vec_unpackh(), vec_double_expected[%d] = %f does not match vec_double_result[%d] = %f\\n\",\n+\t\ti, vec_double_expected[i], i, vec_double_result[i]);\n+\t conv_val.d = vec_double_result[i];\n+\t conv_exp.d = vec_double_expected[i];\n+\t printf(\"     vec_unpackh(), vec_double_expected[%d] = 0x%llx does not match vec_double_result[%d] = 0x%llx\\n\",\n+\t\ti, conv_exp.l, i,conv_val.l);\n+#else\n+\t abort();\n+#endif\n+    }\n+  }\n+\n+  vec_double_expected = (vector double){ 2.5, 3.5 };\n+\n+  vec_double_result = vec_unpackl (vec_float_arg);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (vec_double_expected[i] != vec_double_result[i])\n+      {\n+#if DEBUG\n+         printf(\"ERROR: vec_unpackl() vec_double_expected[%d] = %f does not match vec_double_result[%d] = %f\\n\",\n+\t\ti, vec_double_expected[i], i, vec_double_result[i]);\n+\t conv_val.d = vec_double_result[i];\n+\t conv_exp.d = vec_double_expected[i];\n+\t printf(\"     vec_unpackh(), vec_double_expected[%d] = 0x%llx does not match vec_double_result[%d] = 0x%llx\\n\",\n+\t\ti, conv_exp.l, i,conv_val.l);\n+#else\n+         abort();\n+#endif\n+      }\n+  }\n+\n+  return 0;\n+}"}, {"sha": "9d8aad402e6672aac77fe9efd33fa7255bcde28b", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-2-runnable.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-2-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-2-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-2-runnable.c?ref=5a1b56cc9843425557fc9ccbcf99aabfc7028123", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -mvsx\" } */\n+\n+#include <altivec.h>\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+void abort (void);\n+\n+/* Endian considerations: The \"high\" half of a vector with n elements is the\n+   first n/2 elements of the vector. For little endian, these elements are in\n+   the rightmost half of the vector. For big endian, these elements are in the\n+   leftmost half of the vector.  */\n+\n+int main ()\n+{\n+  int i;\n+  vector bool int vec_bi_arg;\n+  vector bool long long vec_bll_result, vec_bll_expected;\n+\n+  vector signed int vec_si_arg;\n+  vector signed long long int vec_slli_result, vec_slli_expected;\n+\n+  /*  use of \u2018long long\u2019 in AltiVec types requires -mvsx */\n+  /* __builtin_altivec_vupkhsw and __builtin_altivec_vupklsw\n+     requires the -mpower8-vector option */\n+\n+  vec_bi_arg = (vector bool int){ 0, 1, 1, 0 };\n+\n+  vec_bll_expected = (vector bool long long){ 0, 1 };\n+\n+  vec_bll_result = vec_unpackh (vec_bi_arg);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (vec_bll_expected[i] != vec_bll_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackh, vec_bll_expected[%d] = %d does not match vec_bll_result[%d] = %d\\n\",\n+\t      i, vec_bll_expected[i], i, vec_bll_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+  vec_bll_expected = (vector bool long long){ 1, 0 };\n+\n+  vec_bll_result = vec_unpackl (vec_bi_arg);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (vec_bll_expected[i] != vec_bll_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackl, vec_bll_expected[%d] = %d does not match vec_bll_result[%d] = %d\\n\",\n+\t      i, vec_bll_expected[i], i, vec_bll_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+\n+  vec_si_arg = (vector signed int){ 0, 101, 202, 303 };\n+\n+  vec_slli_expected = (vector signed long long int){ 0, 101 };\n+\n+  vec_slli_result = vec_unpackh (vec_si_arg);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (vec_slli_expected[i] != vec_slli_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackh, vec_slli_expected[%d] = %d does not match vec_slli_result[%d] = %d\\n\",\n+\t      i, vec_slli_expected[i], i, vec_slli_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+  vec_slli_result = vec_unpackl (vec_si_arg);\n+  vec_slli_expected = (vector signed long long int){ 202, 303 };\n+\n+  for (i = 0; i < 2; i++) {\n+    if (vec_slli_expected[i] != vec_slli_result[i])\n+#if DEBUG\n+       printf(\"ERROR: vec_unpackl, vec_slli_expected[%d] = %d does not match vec_slli_result[%d] = %d\\n\",\n+\t      i, vec_slli_expected[i], i, vec_slli_result[i]);\n+#else\n+       abort();\n+#endif\n+  }\n+\n+\n+\n+  return 0;\n+}"}, {"sha": "ffeaf51222d497a503d34f1de506c1fdc7f7014c", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-7.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b56cc9843425557fc9ccbcf99aabfc7028123/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7.c?ref=5a1b56cc9843425557fc9ccbcf99aabfc7028123", "patch": "@@ -17,10 +17,9 @@ int main2 ()\n }\n \n /* Expected results:\n-     vec_unpackl                    vupkhsh\n-     vec_unpackh                    vupklsh\n+     vec_unpackl                    xvcvspdp\n+     vec_unpackh                    xvcvspdp\n */\n \n-/* { dg-final { scan-assembler-times \"vupkhpx\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vupklpx\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvcvspdp\" 2 } } */\n "}]}