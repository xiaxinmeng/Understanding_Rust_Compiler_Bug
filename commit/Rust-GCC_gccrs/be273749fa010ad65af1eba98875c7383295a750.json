{"sha": "be273749fa010ad65af1eba98875c7383295a750", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUyNzM3NDlmYTAxMGFkNjVhZjFlYmE5ODg3NWM3MzgzMjk1YTc1MA==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2020-07-10T14:52:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-20T07:21:32Z"}, "message": "[Ada] Display source code pointing at locations in messages for GNATprove\n\ngcc/ada/\n\n\t* errout.adb: (Error_Msg-Internal): Pass the location for a line\n\tinsertion if any in the message.\n\t(Output_Messages: Add display of source code lines if -gnatdF is\n\tset.\n\t(Write_Source_Code_Line): Code clean up.\n\t* erroutc.adb (Prescan_Message): Apply prescan for continuation\n\tlines when -gnatdF is set, and record presence of line\n\tinsertion.\n\t* erroutc.ads (Has_Insertion_Line): New global for prescan.\n\t(Error_Msg_Object): Add field to record line insertion if\n\tpresent.\n\t* errutil.adb (Error_Msg): Pass no location for Insertion_Sloc.", "tree": {"sha": "e6767851d18ffd0b32664b18e8f1952cc2f0f9c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6767851d18ffd0b32664b18e8f1952cc2f0f9c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be273749fa010ad65af1eba98875c7383295a750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be273749fa010ad65af1eba98875c7383295a750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be273749fa010ad65af1eba98875c7383295a750", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be273749fa010ad65af1eba98875c7383295a750/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc60bb5eb9b18315b1af7ffa408969690720f8b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc60bb5eb9b18315b1af7ffa408969690720f8b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc60bb5eb9b18315b1af7ffa408969690720f8b1"}], "stats": {"total": 125, "additions": 114, "deletions": 11}, "files": [{"sha": "1326cdc58cffb4323ad3827c5262c16c2fb57c48", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 92, "deletions": 8, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be273749fa010ad65af1eba98875c7383295a750/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be273749fa010ad65af1eba98875c7383295a750/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=be273749fa010ad65af1eba98875c7383295a750", "patch": "@@ -1119,6 +1119,8 @@ package body Errout is\n           Prev                => No_Error_Msg,\n           Sptr                => Sptr,\n           Optr                => Optr,\n+          Insertion_Sloc      => (if Has_Insertion_Line then Error_Msg_Sloc\n+                                  else No_Location),\n           Sfile               => Get_Source_File_Index (Sptr),\n           Line                => Get_Physical_Line_Number (Sptr),\n           Col                 => Get_Column_Number (Sptr),\n@@ -1823,8 +1825,8 @@ package body Errout is\n    ---------------------\n \n    procedure Output_Messages is\n-      E        : Error_Msg_Id;\n-      Err_Flag : Boolean;\n+\n+      --  Local subprograms\n \n       procedure Write_Error_Summary;\n       --  Write error summary\n@@ -1835,6 +1837,15 @@ package body Errout is\n       procedure Write_Max_Errors;\n       --  Write message if max errors reached\n \n+      procedure Write_Source_Code_Line (Loc : Source_Ptr);\n+      --  Write the source code line corresponding to Loc, as follows:\n+      --\n+      --       |\n+      --  line |  actual code line here with Loc somewhere\n+      --       |                             ^ here\n+      --\n+      --  where the carret on the last line points to location Loc.\n+\n       -------------------------\n       -- Write_Error_Summary --\n       -------------------------\n@@ -2025,6 +2036,59 @@ package body Errout is\n          end if;\n       end Write_Max_Errors;\n \n+      ----------------------------\n+      -- Write_Source_Code_Line --\n+      ----------------------------\n+\n+      procedure Write_Source_Code_Line (Loc : Source_Ptr) is\n+         Line    : constant Pos := Pos (Get_Physical_Line_Number (Loc));\n+         Col     : constant Natural := Natural (Get_Column_Number (Loc));\n+         Padding : constant String (1 .. Int'Image (Line)'Length) :=\n+                              (others => ' ');\n+\n+         Buf     : Source_Buffer_Ptr;\n+         Cur_Loc : Source_Ptr := Loc;\n+      begin\n+         if Loc >= First_Source_Ptr then\n+            Buf := Source_Text (Get_Source_File_Index (Loc));\n+\n+            --  First line\n+\n+            Write_Str (Padding);\n+            Write_Char ('|');\n+            Write_Eol;\n+\n+            --  Second line with the actual source code line\n+\n+            Write_Int (Line);\n+            Write_Str (\" |\");\n+            Write_Str (String (Buf (Loc - Source_Ptr (Col) + 1  .. Loc - 1)));\n+\n+            while Cur_Loc <= Buf'Last\n+              and then Buf (Cur_Loc) /= ASCII.LF\n+            loop\n+               Write_Char (Buf (Cur_Loc));\n+               Cur_Loc := Cur_Loc + 1;\n+            end loop;\n+\n+            Write_Eol;\n+\n+            --  Third line with carret sign pointing to location Loc\n+\n+            Write_Str (Padding);\n+            Write_Char ('|');\n+            Write_Str (String'(1 .. Col - 1 => ' '));\n+            Write_Str (\"^ here\");\n+            Write_Eol;\n+         end if;\n+      end Write_Source_Code_Line;\n+\n+      --  Local variables\n+\n+      E          : Error_Msg_Id;\n+      Err_Flag   : Boolean;\n+      Use_Prefix : Boolean;\n+\n    --  Start of processing for Output_Messages\n \n    begin\n@@ -2051,12 +2115,16 @@ package body Errout is\n \n          E := First_Error_Msg;\n          while E /= No_Error_Msg loop\n-            if not Errors.Table (E).Deleted and then not Debug_Flag_KK then\n \n-               --  If -gnatdF is used, separate main messages from previous\n-               --  messages with a newline and make continuation messages\n-               --  follow the main message with only an indentation of two\n-               --  space characters, without repeating file:line:col: prefix.\n+            --  If -gnatdF is used, separate main messages from previous\n+            --  messages with a newline and make continuation messages\n+            --  follow the main message with only an indentation of two\n+            --  space characters, without repeating file:line:col: prefix.\n+\n+            Use_Prefix :=\n+              not (Debug_Flag_FF and then Errors.Table (E).Msg_Cont);\n+\n+            if not Errors.Table (E).Deleted and then not Debug_Flag_KK then\n \n                if Debug_Flag_FF then\n                   if Errors.Table (E).Msg_Cont then\n@@ -2066,7 +2134,7 @@ package body Errout is\n                   end if;\n                end if;\n \n-               if not (Debug_Flag_FF and then Errors.Table (E).Msg_Cont) then\n+               if Use_Prefix then\n                   if Full_Path_Name_For_Brief_Errors then\n                      Write_Name (Full_Ref_Name (Errors.Table (E).Sfile));\n                   else\n@@ -2089,6 +2157,22 @@ package body Errout is\n \n                Output_Msg_Text (E);\n                Write_Eol;\n+\n+               if Debug_Flag_FF then\n+                  if Errors.Table (E).Msg_Cont then\n+                     declare\n+                        Loc : constant Source_Ptr :=\n+                          Errors.Table (E).Insertion_Sloc;\n+                     begin\n+                        if Loc /= No_Location then\n+                           Write_Source_Code_Line (Loc);\n+                        end if;\n+                     end;\n+\n+                  else\n+                     Write_Source_Code_Line (Errors.Table (E).Sptr);\n+                  end if;\n+               end if;\n             end if;\n \n             E := Errors.Table (E).Next;"}, {"sha": "93f53bb30fefced0b6fc3896c04110aca91a7ac9", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be273749fa010ad65af1eba98875c7383295a750/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be273749fa010ad65af1eba98875c7383295a750/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=be273749fa010ad65af1eba98875c7383295a750", "patch": "@@ -814,9 +814,9 @@ package body Erroutc is\n       J : Natural;\n \n    begin\n-      --  Nothing to do for continuation line\n+      --  Nothing to do for continuation line, unless -gnatdF is set\n \n-      if Msg (Msg'First) = '\\' then\n+      if not Debug_Flag_FF and then Msg (Msg'First) = '\\' then\n          return;\n       end if;\n \n@@ -826,6 +826,7 @@ package body Erroutc is\n       Is_Unconditional_Msg := False;\n       Is_Warning_Msg       := False;\n       Has_Double_Exclam    := False;\n+      Has_Insertion_Line   := False;\n \n       --  Check style message\n \n@@ -903,6 +904,12 @@ package body Erroutc is\n                J := J + 1;\n             end if;\n \n+         --  Insertion line (# insertion)\n+\n+         elsif Msg (J) = '#' then\n+            Has_Insertion_Line := True;\n+            J := J + 1;\n+\n          --  Non-serious error (| insertion)\n \n          elsif Msg (J) = '|' then"}, {"sha": "4c0e68ad26a144fc004001b4ac0fa6139315ee2a", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be273749fa010ad65af1eba98875c7383295a750/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be273749fa010ad65af1eba98875c7383295a750/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=be273749fa010ad65af1eba98875c7383295a750", "patch": "@@ -51,6 +51,10 @@ package Erroutc is\n    --  Set true to indicate that the current message contains the insertion\n    --  sequence !! (force warnings even in non-main unit source files).\n \n+   Has_Insertion_Line : Boolean := False;\n+   --  Set True to indicate that the current message contains the insertion\n+   --  character # (insert line number reference).\n+\n    Is_Compile_Time_Msg : Boolean := False;\n    --  Set true to indicate that the current message originates from a\n    --  Compile_Time_Warning or Compile_Time_Error pragma.\n@@ -209,6 +213,9 @@ package Erroutc is\n       --  instantiation copy corresponding to the instantiation referenced by\n       --  Sptr).\n \n+      Insertion_Sloc : Source_Ptr;\n+      --  Location in message for insertion character # when used\n+\n       Line : Physical_Line_Number;\n       --  Line number for error message\n \n@@ -470,11 +477,15 @@ package Erroutc is\n    --    Has_Double_Exclam is set True if the message contains the sequence !!\n    --    and is otherwise set False.\n    --\n+   --    Has_Insertion_Line is set True if the message contains the character #\n+   --    and is otherwise set False.\n+   --\n    --  We need to know right away these aspects of a message, since we will\n    --  test these values before doing the full error scan.\n    --\n    --  Note that the call has no effect for continuation messages (those whose\n-   --  first character is '\\'), and all variables are left unchanged.\n+   --  first character is '\\'), and all variables are left unchanged, unless\n+   --  -gnatdF is set.\n \n    procedure Purge_Messages (From : Source_Ptr; To : Source_Ptr);\n    --  All error messages whose location is in the range From .. To (not"}, {"sha": "d4821fc1c8924f9da0110dbee3bfb633ee41a77b", "filename": "gcc/ada/errutil.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be273749fa010ad65af1eba98875c7383295a750/gcc%2Fada%2Ferrutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be273749fa010ad65af1eba98875c7383295a750/gcc%2Fada%2Ferrutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrutil.adb?ref=be273749fa010ad65af1eba98875c7383295a750", "patch": "@@ -209,6 +209,7 @@ package body Errutil is\n             Sfile               => Get_Source_File_Index (Sptr),\n             Sptr                => Sptr,\n             Optr                => Optr,\n+            Insertion_Sloc      => No_Location,\n             Line                => Get_Physical_Line_Number (Sptr),\n             Col                 => Get_Column_Number (Sptr),\n             Compile_Time_Pragma => Is_Compile_Time_Msg,"}]}