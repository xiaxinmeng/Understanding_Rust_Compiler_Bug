{"sha": "237b301e9705a54466e179875b944bc69cda6fe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3YjMwMWU5NzA1YTU0NDY2ZTE3OTg3NWI5NDRiYzY5Y2RhNmZlMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-23T08:09:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-23T08:09:04Z"}, "message": "mips.md (P): New mode macro.\n\n\t* config/mips/mips.md (P): New mode macro.\n\t(*xgot_hi[sd]i, *xgot_lo[sd]i, *got_disp[sd]i, *got_page[sd]i)\n\t(*load_got[sd]i, *low[sd]i, *low[sd]i_mips16): Redefine using :P.\n\tAdd mode attributes.\n\nFrom-SVN: r86416", "tree": {"sha": "a5614ff5d7e20093637e33abde83753f26e331a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5614ff5d7e20093637e33abde83753f26e331a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/237b301e9705a54466e179875b944bc69cda6fe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237b301e9705a54466e179875b944bc69cda6fe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/237b301e9705a54466e179875b944bc69cda6fe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237b301e9705a54466e179875b944bc69cda6fe0/comments", "author": null, "committer": null, "parents": [{"sha": "017901f43c3ef9540b7afd1af4edeb560743e3c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017901f43c3ef9540b7afd1af4edeb560743e3c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/017901f43c3ef9540b7afd1af4edeb560743e3c7"}], "stats": {"total": 185, "additions": 59, "deletions": 126}, "files": [{"sha": "3f089d55bebc4f338fdf0bf1bd238c2fa39df66a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237b301e9705a54466e179875b944bc69cda6fe0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237b301e9705a54466e179875b944bc69cda6fe0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=237b301e9705a54466e179875b944bc69cda6fe0", "patch": "@@ -1,3 +1,10 @@\n+2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (P): New mode macro.\n+\t(*xgot_hi[sd]i, *xgot_lo[sd]i, *got_disp[sd]i, *got_page[sd]i)\n+\t(*load_got[sd]i, *low[sd]i, *low[sd]i_mips16): Redefine using :P.\n+\tAdd mode attributes.\n+\n 2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (UNSPEC_[LS][WD][LR]): Delete in favor of..."}, {"sha": "781eafe62b2ea406b0c85c5b2e594d8620f682fb", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 52, "deletions": 126, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237b301e9705a54466e179875b944bc69cda6fe0/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237b301e9705a54466e179875b944bc69cda6fe0/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=237b301e9705a54466e179875b944bc69cda6fe0", "patch": "@@ -289,6 +289,10 @@\n ;; from the same template.\n (define_mode_macro GPR [SI (DI \"TARGET_64BIT\")])\n \n+;; This mode macro allows :P to be used for patterns that operate on\n+;; pointer-sized quantities.  Exactly one of the two alternatives will match.\n+(define_mode_macro P [(SI \"Pmode == SImode\") (DI \"Pmode == DImode\")])\n+\n ;; In GPR templates, a string like \"<d>subu\" will expand to \"subu\" in the\n ;; 32-bit version and \"dsubu\" in the 64-bit version.\n (define_mode_attr d [(SI \"\") (DI \"d\")])\n@@ -3309,183 +3313,105 @@ beq\\t%2,%.,1b\\;\\\n \n ;; Insns to fetch a global symbol from a big GOT.\n \n-(define_insn_and_split \"*xgot_hisi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(high:SI (match_operand:SI 1 \"global_got_operand\" \"\")))]\n-  \"TARGET_EXPLICIT_RELOCS && TARGET_XGOT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (high:SI (match_dup 2)))\n-   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 3)))]\n-{\n-  operands[2] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_GLOBAL);\n-  operands[3] = pic_offset_table_rtx;\n-}\n-  [(set_attr \"got\" \"xgot_high\")])\n-\n-(define_insn_and_split \"*xgot_losi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t   (match_operand:SI 2 \"global_got_operand\" \"\")))]\n-  \"TARGET_EXPLICIT_RELOCS && TARGET_XGOT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(unspec:SI [(match_dup 1) (match_dup 3)] UNSPEC_LOAD_GOT))]\n-  { operands[3] = mips_unspec_address (operands[2], SYMBOL_GOTOFF_GLOBAL); }\n-  [(set_attr \"got\" \"load\")])\n-\n-(define_insn_and_split \"*xgot_hidi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(high:DI (match_operand:DI 1 \"global_got_operand\" \"\")))]\n+(define_insn_and_split \"*xgot_hi<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(high:P (match_operand:P 1 \"global_got_operand\" \"\")))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_XGOT\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 0) (high:DI (match_dup 2)))\n-   (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 3)))]\n+  [(set (match_dup 0) (high:P (match_dup 2)))\n+   (set (match_dup 0) (plus:P (match_dup 0) (match_dup 3)))]\n {\n   operands[2] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_GLOBAL);\n   operands[3] = pic_offset_table_rtx;\n }\n-  [(set_attr \"got\" \"xgot_high\")])\n+  [(set_attr \"got\" \"xgot_high\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn_and_split \"*xgot_lodi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t   (match_operand:DI 2 \"global_got_operand\" \"\")))]\n+(define_insn_and_split \"*xgot_lo<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(lo_sum:P (match_operand:P 1 \"register_operand\" \"d\")\n+\t\t  (match_operand:P 2 \"global_got_operand\" \"\")))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_XGOT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n-\t(unspec:DI [(match_dup 1) (match_dup 3)] UNSPEC_LOAD_GOT))]\n+\t(unspec:P [(match_dup 1) (match_dup 3)] UNSPEC_LOAD_GOT))]\n   { operands[3] = mips_unspec_address (operands[2], SYMBOL_GOTOFF_GLOBAL); }\n-  [(set_attr \"got\" \"load\")])\n+  [(set_attr \"got\" \"load\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; Insns to fetch a global symbol from a normal GOT.\n \n-(define_insn_and_split \"*got_dispsi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(match_operand:SI 1 \"global_got_operand\" \"\"))]\n-  \"TARGET_EXPLICIT_RELOCS && !TARGET_XGOT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(unspec:SI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n-{\n-  operands[2] = pic_offset_table_rtx;\n-  operands[3] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_GLOBAL);\n-}\n-  [(set_attr \"got\" \"load\")])\n-\n-(define_insn_and_split \"*got_dispdi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(match_operand:DI 1 \"global_got_operand\" \"\"))]\n+(define_insn_and_split \"*got_disp<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(match_operand:P 1 \"global_got_operand\" \"\"))]\n   \"TARGET_EXPLICIT_RELOCS && !TARGET_XGOT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n-\t(unspec:DI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n+\t(unspec:P [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n {\n   operands[2] = pic_offset_table_rtx;\n   operands[3] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_GLOBAL);\n }\n-  [(set_attr \"got\" \"load\")])\n+  [(set_attr \"got\" \"load\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; Insns for loading the high part of a local symbol.\n \n-(define_insn_and_split \"*got_pagesi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(high:SI (match_operand:SI 1 \"local_got_operand\" \"\")))]\n+(define_insn_and_split \"*got_page<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(high:P (match_operand:P 1 \"local_got_operand\" \"\")))]\n   \"TARGET_EXPLICIT_RELOCS\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n-\t(unspec:SI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n+\t(unspec:P [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n {\n   operands[2] = pic_offset_table_rtx;\n   operands[3] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_PAGE);\n }\n-  [(set_attr \"got\" \"load\")])\n-\n-(define_insn_and_split \"*got_pagedi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(high:DI (match_operand:DI 1 \"local_got_operand\" \"\")))]\n-  \"TARGET_EXPLICIT_RELOCS\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(unspec:DI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n-{\n-  operands[2] = pic_offset_table_rtx;\n-  operands[3] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_PAGE);\n-}\n-  [(set_attr \"got\" \"load\")])\n+  [(set_attr \"got\" \"load\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; Lower-level instructions for loading an address from the GOT.\n ;; We could use MEMs, but an unspec gives more optimization\n ;; opportunities.\n \n-(define_insn \"*load_gotsi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t    (match_operand:SI 2 \"immediate_operand\" \"\")]\n-\t\t   UNSPEC_LOAD_GOT))]\n-  \"TARGET_ABICALLS\"\n-  \"lw\\t%0,%R2(%1)\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"*load_gotdi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t    (match_operand:DI 2 \"immediate_operand\" \"\")]\n-\t\t   UNSPEC_LOAD_GOT))]\n+(define_insn \"*load_got<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(unspec:P [(match_operand:P 1 \"register_operand\" \"d\")\n+\t\t   (match_operand:P 2 \"immediate_operand\" \"\")]\n+\t\t  UNSPEC_LOAD_GOT))]\n   \"TARGET_ABICALLS\"\n-  \"ld\\t%0,%R2(%1)\"\n+  \"<load>\\t%0,%R2(%1)\"\n   [(set_attr \"type\" \"load\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"length\" \"4\")])\n \n ;; Instructions for adding the low 16 bits of an address to a register.\n ;; Operand 2 is the address: print_operand works out which relocation\n ;; should be applied.\n \n-(define_insn \"*lowsi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t   (match_operand:SI 2 \"immediate_operand\" \"\")))]\n+(define_insn \"*low<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(lo_sum:P (match_operand:P 1 \"register_operand\" \"d\")\n+\t\t  (match_operand:P 2 \"immediate_operand\" \"\")))]\n   \"!TARGET_MIPS16\"\n-  \"addiu\\t%0,%1,%R2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")])\n-\n-(define_insn \"*lowdi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t   (match_operand:DI 2 \"immediate_operand\" \"\")))]\n-  \"!TARGET_MIPS16 && TARGET_64BIT\"\n-  \"daddiu\\t%0,%1,%R2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  \"<d>addiu\\t%0,%1,%R2\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*lowsi_mips16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"immediate_operand\" \"\")))]\n+(define_insn \"*low<mode>_mips16\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(lo_sum:P (match_operand:P 1 \"register_operand\" \"0\")\n+\t\t  (match_operand:P 2 \"immediate_operand\" \"\")))]\n   \"TARGET_MIPS16\"\n-  \"addiu\\t%0,%R2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_insn \"*lowdi_mips16\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:DI 2 \"immediate_operand\" \"\")))]\n-  \"TARGET_MIPS16 && TARGET_64BIT\"\n-  \"daddiu\\t%0,%R2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"DI\")\n-   (set_attr \"length\"\t\"8\")])\n+  \"<d>addiu\\t%0,%R2\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"length\" \"8\")])\n \n ;; 64-bit integer moves\n "}]}