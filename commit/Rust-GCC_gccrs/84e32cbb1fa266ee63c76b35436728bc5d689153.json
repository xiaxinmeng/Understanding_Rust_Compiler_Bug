{"sha": "84e32cbb1fa266ee63c76b35436728bc5d689153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRlMzJjYmIxZmEyNjZlZTYzYzc2YjM1NDM2NzI4YmM1ZDY4OTE1Mw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2006-11-21T12:07:39Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2006-11-21T12:07:39Z"}, "message": "bfin.c (hard_regno_mode_ok): Only allow first 31 regs for DImode.\n\n\t* config/bfin/bfin.c (hard_regno_mode_ok): Only allow first 31\n\tregs for DImode.\n\t(bfin_register_move_cost): Bump costs if trying to move plain\n\tinteger values through accumulators.\n\nFrom-SVN: r119055", "tree": {"sha": "8308933bf32130c108c6a56c34b1091332aa24fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8308933bf32130c108c6a56c34b1091332aa24fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84e32cbb1fa266ee63c76b35436728bc5d689153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e32cbb1fa266ee63c76b35436728bc5d689153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e32cbb1fa266ee63c76b35436728bc5d689153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e32cbb1fa266ee63c76b35436728bc5d689153/comments", "author": null, "committer": null, "parents": [{"sha": "0eb970647919bea613e0086cfcb28b109862e1fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb970647919bea613e0086cfcb28b109862e1fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb970647919bea613e0086cfcb28b109862e1fa"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "99b91c0a9b9f7fa7f32468d7fed1cec1f675d8d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e32cbb1fa266ee63c76b35436728bc5d689153/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e32cbb1fa266ee63c76b35436728bc5d689153/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84e32cbb1fa266ee63c76b35436728bc5d689153", "patch": "@@ -9,6 +9,11 @@\n \t(add_to_reg): Renamed from add_to_sp.  All callers changed.  Lose some\n \tdead code.\n \n+\t* config/bfin/bfin.c (hard_regno_mode_ok): Only allow first 31\n+\tregs for DImode.\n+\t(bfin_register_move_cost): Bump costs if trying to move plain\n+\tinteger values through accumulators.\n+\n 2006-11-21  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/spu/spu.c (spu_expand_vector_init): Initialise x."}, {"sha": "10ccda2d99b690735d013581394d61c4d8053de2", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e32cbb1fa266ee63c76b35436728bc5d689153/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e32cbb1fa266ee63c76b35436728bc5d689153/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=84e32cbb1fa266ee63c76b35436728bc5d689153", "patch": "@@ -1854,10 +1854,16 @@ hard_regno_mode_ok (int regno, enum machine_mode mode)\n     return mode == BImode;\n   if (mode == PDImode || mode == V2PDImode)\n     return regno == REG_A0 || regno == REG_A1;\n+\n+  /* Allow all normal 32 bit regs, except REG_M3, in case regclass ever comes\n+     up with a bad register class (such as ALL_REGS) for DImode.  */\n+  if (mode == DImode)\n+    return regno < REG_M3;\n+\n   if (mode == SImode\n       && TEST_HARD_REG_BIT (reg_class_contents[PROLOGUE_REGS], regno))\n     return 1;\n-      \n+\n   return TEST_HARD_REG_BIT (reg_class_contents[MOST_REGS], regno);\n }\n \n@@ -1873,7 +1879,7 @@ bfin_vector_mode_supported_p (enum machine_mode mode)\n    one in class CLASS2.  A cost of 2 is the default.  */\n \n int\n-bfin_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n+bfin_register_move_cost (enum machine_mode mode,\n \t\t\t enum reg_class class1, enum reg_class class2)\n {\n   /* These need secondary reloads, so they're more expensive.  */\n@@ -1891,6 +1897,15 @@ bfin_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n   if (class1 == DREGS && class2 != DREGS)\n     return 2 * 2;\n \n+  if (GET_MODE_CLASS (mode) == MODE_INT)\n+    {\n+      /* Discourage trying to use the accumulators.  */\n+      if (TEST_HARD_REG_BIT (reg_class_contents[class1], REG_A0)\n+\t  || TEST_HARD_REG_BIT (reg_class_contents[class1], REG_A1)\n+\t  || TEST_HARD_REG_BIT (reg_class_contents[class2], REG_A0)\n+\t  || TEST_HARD_REG_BIT (reg_class_contents[class2], REG_A1))\n+\treturn 20;\n+    }\n   return 2;\n }\n "}]}