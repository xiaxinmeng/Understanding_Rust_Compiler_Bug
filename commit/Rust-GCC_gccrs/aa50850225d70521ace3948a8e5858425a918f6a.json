{"sha": "aa50850225d70521ace3948a8e5858425a918f6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE1MDg1MDIyNWQ3MDUyMWFjZTM5NDhhOGU1ODU4NDI1YTkxOGY2YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-04-19T17:10:56Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-04-19T17:10:56Z"}, "message": "re PR preprocessor/20078 (Gcc doesn't complain about non-benign macro definitions)\n\nlibcpp:\n\tPR preprocessor/20078\n\t* include/cpp-id-data.h (struct cpp_macro): Add extra_tokens\n\tfield.\n\t* include/cpplib.h (SP_DIGRAPH, SP_PREV_WHITE): Define.\n\t(struct cpp_token): Change flags to unsigned short.\n\t* lex.c (_cpp_lex_direct): Initialize arg_no for CPP_PASTE tokens.\n\t(_cpp_equiv_tokens): Check arg_no for CPP_PASTE tokens.\n\t(cpp_token_val_index): Return CPP_TOKEN_FLD_ARG_NO for CPP_PASTE\n\ttokens.\n\t* macro.c (macro_real_token_count): New.\n\t(enter_macro_context, replace_args): Use macro_real_token_count.\n\t(create_iso_definition): Record whitespace surrounding and digraph\n\tspelling of # and ## tokens using SP_PREV_WHITE and SP_DIGRAPH.\n\tSet extra_tokens and save CPP_PASTE tokens with arg_no set for\n\tmultiple consecutive ## tokens.\n\t(_cpp_create_definition): Initialize extra_tokens.\n\t(cpp_macro_definition): Use macro_real_token_count.\n\ngcc/testsuite:\n\t* gcc.dg/cpp/paste16.c, gcc.dg/cpp/redef4.c: New tests.\n\nFrom-SVN: r146352", "tree": {"sha": "311d607f4a7b5f177b00f2193802a219b80ccc5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/311d607f4a7b5f177b00f2193802a219b80ccc5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa50850225d70521ace3948a8e5858425a918f6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa50850225d70521ace3948a8e5858425a918f6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa50850225d70521ace3948a8e5858425a918f6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa50850225d70521ace3948a8e5858425a918f6a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6fa5b01018ac42682f8d69fff9e48f50b87c910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fa5b01018ac42682f8d69fff9e48f50b87c910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fa5b01018ac42682f8d69fff9e48f50b87c910"}], "stats": {"total": 627, "additions": 615, "deletions": 12}, "files": [{"sha": "bb2fab66e6556aa78053ca619628118731752087", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa50850225d70521ace3948a8e5858425a918f6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa50850225d70521ace3948a8e5858425a918f6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa50850225d70521ace3948a8e5858425a918f6a", "patch": "@@ -1,3 +1,8 @@\n+2009-04-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/20078\n+\t* gcc.dg/cpp/paste16.c, gcc.dg/cpp/redef4.c: New tests.\n+\n 2009-04-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* lib/gnat.exp (local_find_gnatmake): Pass --LINK to gnatlink."}, {"sha": "11aca2b60d4a6a19bbcdbcfb49dbc70da94eb696", "filename": "gcc/testsuite/gcc.dg/cpp/paste16.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa50850225d70521ace3948a8e5858425a918f6a/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa50850225d70521ace3948a8e5858425a918f6a/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste16.c?ref=aa50850225d70521ace3948a8e5858425a918f6a", "patch": "@@ -0,0 +1,6 @@\n+/* Test multiple consecutive ## tokens.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+#define cat(x,y) x##########y\n+int abcd;\n+int *p = &cat(ab,cd);"}, {"sha": "b34635b2e423bf1654014ea0f2031b748ed16a4a", "filename": "gcc/testsuite/gcc.dg/cpp/redef4.c", "status": "added", "additions": 499, "deletions": 0, "changes": 499, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa50850225d70521ace3948a8e5858425a918f6a/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa50850225d70521ace3948a8e5858425a918f6a/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef4.c?ref=aa50850225d70521ace3948a8e5858425a918f6a", "patch": "@@ -0,0 +1,499 @@\n+/* Test redefinitions differing only in the spelling of paste and\n+   stringify tokens, whitespace around them, or the number of\n+   consecutive paste tokens.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"\" } */\n+\n+#define str(x) #x /* { dg-message \"previous definition\" } */\n+#define str(x) %: x /* { dg-warning \"redefined\" } */\n+#undef str\n+#define str(x) #x /* { dg-message \"previous definition\" } */\n+#define str(x) # x /* { dg-warning \"redefined\" } */\n+#undef str\n+#define str(x) #x /* { dg-message \"previous definition\" } */\n+#define str(x) %: x /* { dg-warning \"redefined\" } */\n+#undef str\n+#define str(x) %:x /* { dg-message \"previous definition\" } */\n+#define str(x) #x /* { dg-warning \"redefined\" } */\n+#undef str\n+#define str(x) %:x /* { dg-message \"previous definition\" } */\n+#define str(x) %: x /* { dg-warning \"redefined\" } */\n+#undef str\n+#define str(x) %:x /* { dg-message \"previous definition\" } */\n+#define str(x) # x /* { dg-warning \"redefined\" } */\n+#undef str\n+#define str(x) %:x /* { dg-message \"previous definition\" } */\n+#define str(x) %: x /* { dg-warning \"redefined\" } */\n+#undef str\n+#define str(x) # x /* { dg-message \"previous definition\" } */\n+#define str(x) #x /* { dg-warning \"redefined\" } */\n+#undef str\n+#define str(x) # x /* { dg-message \"previous definition\" } */\n+#define str(x) %: x /* { dg-warning \"redefined\" } */\n+#undef str\n+#define str(x) # x /* { dg-message \"previous definition\" } */\n+#define str(x) %: x /* { dg-warning \"redefined\" } */\n+#undef str\n+#define str(x) %: x /* { dg-message \"previous definition\" } */\n+#define str(x) #x /* { dg-warning \"redefined\" } */\n+#undef str\n+#define str(x) %: x /* { dg-message \"previous definition\" } */\n+#define str(x) # x /* { dg-warning \"redefined\" } */\n+#undef str\n+\n+#define str(x) #x\n+#define str(x) #x\n+#undef str\n+#define str(x) # x\n+#define str(x) # x\n+#undef str\n+#define str(x) %: x\n+#define str(x) %: x\n+#undef str\n+#define str(x) %: x\n+#define str(x) %: x\n+#undef str\n+\n+#define astr(x) a#x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a#x /* { dg-message \"previous definition\" } */\n+#define astr(x) a# x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a#x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a#x /* { dg-message \"previous definition\" } */\n+#define astr(x) a #x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a#x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %:x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a#x /* { dg-message \"previous definition\" } */\n+#define astr(x) a # x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a#x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a#x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a# x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a #x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %:x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a # x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a# x /* { dg-message \"previous definition\" } */\n+#define astr(x) a#x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a# x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a# x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a# x /* { dg-message \"previous definition\" } */\n+#define astr(x) a #x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a# x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %:x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a# x /* { dg-message \"previous definition\" } */\n+#define astr(x) a # x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a# x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a#x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a# x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a #x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %:x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a # x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a%: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a #x /* { dg-message \"previous definition\" } */\n+#define astr(x) a#x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a #x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a #x /* { dg-message \"previous definition\" } */\n+#define astr(x) a# x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a #x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a #x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %:x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a #x /* { dg-message \"previous definition\" } */\n+#define astr(x) a # x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a #x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a#x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a# x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a #x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a # x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %:x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a # x /* { dg-message \"previous definition\" } */\n+#define astr(x) a#x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a # x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a # x /* { dg-message \"previous definition\" } */\n+#define astr(x) a# x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a # x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a # x /* { dg-message \"previous definition\" } */\n+#define astr(x) a #x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a # x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %:x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a # x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a#x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a# x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a%: x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a #x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a %:x /* { dg-warning \"redefined\" } */\n+#undef astr\n+#define astr(x) a %: x /* { dg-message \"previous definition\" } */\n+#define astr(x) a # x /* { dg-warning \"redefined\" } */\n+#undef astr\n+\n+#define astr(x) a#x\n+#define astr(x) a#x\n+#undef astr\n+#define astr(x) a# x\n+#define astr(x) a# x\n+#undef astr\n+#define astr(x) a%: x\n+#define astr(x) a%: x\n+#undef astr\n+#define astr(x) a%: x\n+#define astr(x) a%: x\n+#undef astr\n+#define astr(x) a #x\n+#define astr(x) a #x\n+#undef astr\n+#define astr(x) a %:x\n+#define astr(x) a %:x\n+#undef astr\n+#define astr(x) a # x\n+#define astr(x) a # x\n+#undef astr\n+#define astr(x) a %: x\n+#define astr(x) a %: x\n+#undef astr\n+\n+#define cat(x,y) x##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%:y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%:y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%:y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%:y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x%:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%:y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ##y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%:y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%:y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x ## y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x%:%: y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ##y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x %:%:y /* { dg-warning \"redefined\" } */\n+#undef cat\n+#define cat(x,y) x %:%: y /* { dg-message \"previous definition\" } */\n+#define cat(x,y) x ## y /* { dg-warning \"redefined\" } */\n+#undef cat\n+\n+#define cat(x,y) x##y\n+#define cat(x,y) x##y\n+#undef cat\n+#define cat(x,y) x## y\n+#define cat(x,y) x## y\n+#undef cat\n+#define cat(x,y) x%:%: y\n+#define cat(x,y) x%:%: y\n+#undef cat\n+#define cat(x,y) x%:%: y\n+#define cat(x,y) x%:%: y\n+#undef cat\n+#define cat(x,y) x ##y\n+#define cat(x,y) x ##y\n+#undef cat\n+#define cat(x,y) x %:%:y\n+#define cat(x,y) x %:%:y\n+#undef cat\n+#define cat(x,y) x ## y\n+#define cat(x,y) x ## y\n+#undef cat\n+#define cat(x,y) x %:%: y\n+#define cat(x,y) x %:%: y\n+#undef cat\n+\n+#define cat3(x,y,z) x##y##z /* { dg-message \"previous definition\" } */\n+#define cat3(x,y,z) x##y####z /* { dg-warning \"redefined\" } */\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y####z /* { dg-message \"previous definition\" } */\n+#define cat3(x,y,z) x####y##z /* { dg-warning \"redefined\" } */\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y####z /* { dg-message \"previous definition\" } */\n+#define cat3(x,y,z) x##y## ##z /* { dg-warning \"redefined\" } */\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y####z /* { dg-message \"previous definition\" } */\n+#define cat3(x,y,z) x##y##%:%:z /* { dg-warning \"redefined\" } */\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y######## ####z /* { dg-message \"previous definition\" } */\n+#define cat3(x,y,z) x##y############z /* { dg-warning \"redefined\" } */\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y############z /* { dg-message \"previous definition\" } */\n+#define cat3(x,y,z) x##y########%:%:##z /* { dg-warning \"redefined\" } */\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y##z\n+#define cat3(x,y,z) x##y##z\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y####z\n+#define cat3(x,y,z) x##y####z\n+#undef cat3\n+\n+#define cat3(x,y,z) x####y##z\n+#define cat3(x,y,z) x####y##z\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y## ##z\n+#define cat3(x,y,z) x##y## ##z\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y##%:%:z\n+#define cat3(x,y,z) x##y##%:%:z\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y######## ####z\n+#define cat3(x,y,z) x##y######## ####z\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y############z\n+#define cat3(x,y,z) x##y############z\n+#undef cat3\n+\n+#define cat3(x,y,z) x##y########%:%:##z\n+#define cat3(x,y,z) x##y########%:%:##z\n+#undef cat3"}, {"sha": "74979a21ee59deb1b77dff1046f164eb2481881a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa50850225d70521ace3948a8e5858425a918f6a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa50850225d70521ace3948a8e5858425a918f6a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=aa50850225d70521ace3948a8e5858425a918f6a", "patch": "@@ -1,3 +1,23 @@\n+2009-04-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/20078\n+\t* include/cpp-id-data.h (struct cpp_macro): Add extra_tokens\n+\tfield.\n+\t* include/cpplib.h (SP_DIGRAPH, SP_PREV_WHITE): Define.\n+\t(struct cpp_token): Change flags to unsigned short.\n+\t* lex.c (_cpp_lex_direct): Initialize arg_no for CPP_PASTE tokens.\n+\t(_cpp_equiv_tokens): Check arg_no for CPP_PASTE tokens.\n+\t(cpp_token_val_index): Return CPP_TOKEN_FLD_ARG_NO for CPP_PASTE\n+\ttokens.\n+\t* macro.c (macro_real_token_count): New.\n+\t(enter_macro_context, replace_args): Use macro_real_token_count.\n+\t(create_iso_definition): Record whitespace surrounding and digraph\n+\tspelling of # and ## tokens using SP_PREV_WHITE and SP_DIGRAPH.\n+\tSet extra_tokens and save CPP_PASTE tokens with arg_no set for\n+\tmultiple consecutive ## tokens.\n+\t(_cpp_create_definition): Initialize extra_tokens.\n+\t(cpp_macro_definition): Use macro_real_token_count.\n+\n 2009-04-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* directives.c (parse_include): Pass true to check_eol."}, {"sha": "029d424d51197afa48ce824880b9100ead79988a", "filename": "libcpp/include/cpp-id-data.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa50850225d70521ace3948a8e5858425a918f6a/libcpp%2Finclude%2Fcpp-id-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa50850225d70521ace3948a8e5858425a918f6a/libcpp%2Finclude%2Fcpp-id-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpp-id-data.h?ref=aa50850225d70521ace3948a8e5858425a918f6a", "patch": "@@ -75,4 +75,9 @@ struct cpp_macro GTY(())\n \n   /* Indicate which field of 'exp' is in use.  */\n   unsigned int traditional : 1;\n+\n+  /* Indicate whether the tokens include extra CPP_PASTE tokens at the\n+     end to track invalid redefinitions with consecutive CPP_PASTE\n+     tokens.  */\n+  unsigned int extra_tokens : 1;\n };"}, {"sha": "3aeb035f48f4b530bf91a0d63991f5381621349f", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa50850225d70521ace3948a8e5858425a918f6a/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa50850225d70521ace3948a8e5858425a918f6a/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=aa50850225d70521ace3948a8e5858425a918f6a", "patch": "@@ -178,6 +178,10 @@ struct cpp_string GTY(())\n #define BOL\t\t(1 << 6) /* Token at beginning of line.  */\n #define PURE_ZERO\t(1 << 7) /* Single 0 digit, used by the C++ frontend,\n \t\t\t\t    set in c-lex.c.  */\n+#define SP_DIGRAPH\t(1 << 8) /* # or ## token was a digraph.  */\n+#define SP_PREV_WHITE\t(1 << 9) /* If whitespace before a ##\n+\t\t\t\t    operator, or before this token\n+\t\t\t\t    after a # operator.  */\n \n /* Specify which field, if any, of the cpp_token union is used.  */\n \n@@ -196,7 +200,7 @@ struct cpp_token GTY(())\n {\n   source_location src_loc;\t/* Location of first char of token.  */\n   ENUM_BITFIELD(cpp_ttype) type : CHAR_BIT;  /* token type */\n-  unsigned char flags;\t\t/* flags - see above */\n+  unsigned short flags;\t\t/* flags - see above */\n \n   union cpp_token_u\n   {"}, {"sha": "63e291c64c0ea0c8262f489fb92f4c88667cf66c", "filename": "libcpp/lex.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa50850225d70521ace3948a8e5858425a918f6a/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa50850225d70521ace3948a8e5858425a918f6a/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=aa50850225d70521ace3948a8e5858425a918f6a", "patch": "@@ -1244,7 +1244,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t      result->flags |= DIGRAPH;\n \t      result->type = CPP_HASH;\n \t      if (*buffer->cur == '%' && buffer->cur[1] == ':')\n-\t\tbuffer->cur += 2, result->type = CPP_PASTE;\n+\t\tbuffer->cur += 2, result->type = CPP_PASTE, result->val.arg_no = 0;\n \t    }\n \t  else if (*buffer->cur == '>')\n \t    {\n@@ -1325,7 +1325,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n     case '=': IF_NEXT_IS ('=', CPP_EQ_EQ, CPP_EQ); break;\n     case '!': IF_NEXT_IS ('=', CPP_NOT_EQ, CPP_NOT); break;\n     case '^': IF_NEXT_IS ('=', CPP_XOR_EQ, CPP_XOR); break;\n-    case '#': IF_NEXT_IS ('#', CPP_PASTE, CPP_HASH); break;\n+    case '#': IF_NEXT_IS ('#', CPP_PASTE, CPP_HASH); result->val.arg_no = 0; break;\n \n     case '?': result->type = CPP_QUERY; break;\n     case '~': result->type = CPP_COMPL; break;\n@@ -1572,7 +1572,9 @@ _cpp_equiv_tokens (const cpp_token *a, const cpp_token *b)\n       {\n       default:\t\t\t/* Keep compiler happy.  */\n       case SPELL_OPERATOR:\n-\treturn 1;\n+\t/* arg_no is used to track where multiple consecutive ##\n+\t   tokens were originally located.  */\n+\treturn (a->type != CPP_PASTE || a->val.arg_no == b->val.arg_no);\n       case SPELL_NONE:\n \treturn (a->type != CPP_MACRO_ARG || a->val.arg_no == b->val.arg_no);\n       case SPELL_IDENT:\n@@ -1886,6 +1888,11 @@ cpp_token_val_index (cpp_token *tok)\n       return CPP_TOKEN_FLD_NODE;\n     case SPELL_LITERAL:\n       return CPP_TOKEN_FLD_STR;\n+    case SPELL_OPERATOR:\n+      if (tok->type == CPP_PASTE)\n+\treturn CPP_TOKEN_FLD_ARG_NO;\n+      else\n+\treturn CPP_TOKEN_FLD_NONE;\n     case SPELL_NONE:\n       if (tok->type == CPP_MACRO_ARG)\n \treturn CPP_TOKEN_FLD_ARG_NO;"}, {"sha": "36853971780a1ba0ea5d0dfb67737bc2c7f56cf8", "filename": "libcpp/macro.c", "status": "modified", "additions": 65, "deletions": 8, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa50850225d70521ace3948a8e5858425a918f6a/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa50850225d70521ace3948a8e5858425a918f6a/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=aa50850225d70521ace3948a8e5858425a918f6a", "patch": "@@ -802,6 +802,19 @@ funlike_invocation_p (cpp_reader *pfile, cpp_hashnode *node,\n   return NULL;\n }\n \n+/* Return the real number of tokens in the expansion of MACRO.  */\n+static inline unsigned int\n+macro_real_token_count (const cpp_macro *macro)\n+{\n+  unsigned int i;\n+  if (__builtin_expect (!macro->extra_tokens, true))\n+    return macro->count;\n+  for (i = 0; i < macro->count; i++)\n+    if (macro->exp.tokens[i].type == CPP_PASTE)\n+      return i;\n+  abort ();\n+}\n+\n /* Push the context of a macro with hash entry NODE onto the context\n    stack.  If we can successfully expand the macro, we push a context\n    containing its yet-to-be-rescanned replacement list and return one.\n@@ -874,7 +887,8 @@ enter_macro_context (cpp_reader *pfile, cpp_hashnode *node,\n       macro->used = 1;\n \n       if (macro->paramc == 0)\n-\t_cpp_push_token_context (pfile, node, macro->exp.tokens, macro->count);\n+\t_cpp_push_token_context (pfile, node, macro->exp.tokens,\n+\t\t\t\t macro_real_token_count (macro));\n \n       if (pragma_buff)\n \t{\n@@ -914,13 +928,15 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro, macro_arg\n   const cpp_token **dest, **first;\n   macro_arg *arg;\n   _cpp_buff *buff;\n+  unsigned int count;\n \n   /* First, fully macro-expand arguments, calculating the number of\n      tokens in the final expansion as we go.  The ordering of the if\n      statements below is subtle; we must handle stringification before\n      pasting.  */\n-  total = macro->count;\n-  limit = macro->exp.tokens + macro->count;\n+  count = macro_real_token_count (macro);\n+  total = count;\n+  limit = macro->exp.tokens + count;\n \n   for (src = macro->exp.tokens; src < limit; src++)\n     if (src->type == CPP_MACRO_ARG)\n@@ -1630,6 +1646,7 @@ create_iso_definition (cpp_reader *pfile, cpp_macro *macro)\n   bool following_paste_op = false;\n   const char *paste_op_error_msg =\n     N_(\"'##' cannot appear at either end of a macro expansion\");\n+  unsigned int num_extra_tokens = 0;\n \n   /* Get the first token of the expansion (or the '(' of a\n      function-like macro).  */\n@@ -1707,6 +1724,10 @@ create_iso_definition (cpp_reader *pfile, cpp_macro *macro)\n \t{\n \t  if (token->type == CPP_MACRO_ARG)\n \t    {\n+\t      if (token->flags & PREV_WHITE)\n+\t\ttoken->flags |= SP_PREV_WHITE;\n+\t      if (token[-1].flags & DIGRAPH)\n+\t\ttoken->flags |= SP_DIGRAPH;\n \t      token->flags &= ~PREV_WHITE;\n \t      token->flags |= STRINGIFY_ARG;\n \t      token->flags |= token[-1].flags & PREV_WHITE;\n@@ -1746,8 +1767,21 @@ create_iso_definition (cpp_reader *pfile, cpp_macro *macro)\n \t      return false;\n \t    }\n \n-\t  --macro->count;\n-\t  token[-1].flags |= PASTE_LEFT;\n+\t  if (token[-1].flags & PASTE_LEFT)\n+\t    {\n+\t      macro->extra_tokens = 1;\n+\t      num_extra_tokens++;\n+\t      token->val.arg_no = macro->count - 1;\n+\t    }\n+\t  else\n+\t    {\n+\t      --macro->count;\n+\t      token[-1].flags |= PASTE_LEFT;\n+\t      if (token->flags & DIGRAPH)\n+\t\ttoken[-1].flags |= SP_DIGRAPH;\n+\t      if (token->flags & PREV_WHITE)\n+\t\ttoken[-1].flags |= SP_PREV_WHITE;\n+\t    }\n \t}\n \n       following_paste_op = (token->type == CPP_PASTE);\n@@ -1770,7 +1804,27 @@ create_iso_definition (cpp_reader *pfile, cpp_macro *macro)\n       cpp_token *tokns =\n         (cpp_token *) pfile->hash_table->alloc_subobject (sizeof (cpp_token)\n                                                           * macro->count);\n-      memcpy (tokns, macro->exp.tokens, sizeof (cpp_token) * macro->count);\n+      if (num_extra_tokens)\n+\t{\n+\t  /* Place second and subsequent ## or %:%: tokens in\n+\t     sequences of consecutive such tokens at the end of the\n+\t     list to preserve information about where they appear, how\n+\t     they are spelt and whether they are preceded by\n+\t     whitespace without otherwise interfering with macro\n+\t     expansion.  */\n+\t  cpp_token *normal_dest = tokns;\n+\t  cpp_token *extra_dest = tokns + macro->count - num_extra_tokens;\n+\t  unsigned int i;\n+\t  for (i = 0; i < macro->count; i++)\n+\t    {\n+\t      if (macro->exp.tokens[i].type == CPP_PASTE)\n+\t\t*extra_dest++ = macro->exp.tokens[i];\n+\t      else\n+\t\t*normal_dest++ = macro->exp.tokens[i];\n+\t    }\n+\t}\n+      else\n+\tmemcpy (tokns, macro->exp.tokens, sizeof (cpp_token) * macro->count);\n       macro->exp.tokens = tokns;\n     }\n   else\n@@ -1799,6 +1853,7 @@ _cpp_create_definition (cpp_reader *pfile, cpp_hashnode *node)\n   macro->used = !CPP_OPTION (pfile, warn_unused_macros);\n   macro->count = 0;\n   macro->fun_like = 0;\n+  macro->extra_tokens = 0;\n   /* To suppress some diagnostics.  */\n   macro->syshdr = pfile->buffer && pfile->buffer->sysp != 0;\n \n@@ -1946,7 +2001,8 @@ cpp_macro_definition (cpp_reader *pfile, const cpp_hashnode *node)\n     len += _cpp_replacement_text_len (macro);\n   else\n     {\n-      for (i = 0; i < macro->count; i++)\n+      unsigned int count = macro_real_token_count (macro);\n+      for (i = 0; i < count; i++)\n \t{\n \t  cpp_token *token = &macro->exp.tokens[i];\n \n@@ -2010,7 +2066,8 @@ cpp_macro_definition (cpp_reader *pfile, const cpp_hashnode *node)\n   else if (macro->count)\n   /* Expansion tokens.  */\n     {\n-      for (i = 0; i < macro->count; i++)\n+      unsigned int count = macro_real_token_count (macro);\n+      for (i = 0; i < count; i++)\n \t{\n \t  cpp_token *token = &macro->exp.tokens[i];\n "}]}