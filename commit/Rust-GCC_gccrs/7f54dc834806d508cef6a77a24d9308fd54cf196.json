{"sha": "7f54dc834806d508cef6a77a24d9308fd54cf196", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y1NGRjODM0ODA2ZDUwOGNlZjZhNzdhMjRkOTMwOGZkNTRjZjE5Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-27T11:53:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-27T11:53:08Z"}, "message": "[multiple changes]\n\n2015-10-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Allocator): Do not perform legality check\n\ton allocators for limited objects in a qualified expression,\n\tbecause expression has not been resolved.\n\t* sem_res.adb (Resolve_Allocator): Perform check on legality of\n\tlimited objects after resolution.  Add sem_ch3.adb to context.\n\n2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Refined_Global_In_Decl_Part): Add variable\n\tStates.\n\t(Check_Refined_Global_Item): An object or state acts as a\n\tconstituent only when the corresponding encapsulating state\n\tappears in pragma Global.\n\t(Collect_Global_Item): Add a state with non-null visible refinement to\n\tlist States.\n\n2015-10-27  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_util.ads, par.adb, sem_ch6.adb: Minor reformatting and a few\n\ttypo corrections.\n\n2015-10-27  Pierre-Marie de Rodat  <derodat@adacore.com>\n\n\t* namet.ads, namet.adb (Name_Equals): New function.\n\t* namet.h (Name_Equals): New macro.\n\n2015-10-27  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch6.adb (Build_Procedure_Form): Use 'RESULT' for the extra\n\tparameter, to avoid ambiguity when generating tmps using _xxx which\n\tmight end up reusing _result.\n\nFrom-SVN: r229424", "tree": {"sha": "ac137321c5bd0bf31fbe615f3701e547de1b7c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac137321c5bd0bf31fbe615f3701e547de1b7c3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f54dc834806d508cef6a77a24d9308fd54cf196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f54dc834806d508cef6a77a24d9308fd54cf196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f54dc834806d508cef6a77a24d9308fd54cf196", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f54dc834806d508cef6a77a24d9308fd54cf196/comments", "author": null, "committer": null, "parents": [{"sha": "7317ef4ae5bd8ad06f37a8101d21c05b30a04a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66"}], "stats": {"total": 133, "additions": 106, "deletions": 27}, "files": [{"sha": "1ec3066ceca7bcf0f346af3859279c2883576a2d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7f54dc834806d508cef6a77a24d9308fd54cf196", "patch": "@@ -1,3 +1,37 @@\n+2015-10-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Allocator): Do not perform legality check\n+\ton allocators for limited objects in a qualified expression,\n+\tbecause expression has not been resolved.\n+\t* sem_res.adb (Resolve_Allocator): Perform check on legality of\n+\tlimited objects after resolution.  Add sem_ch3.adb to context.\n+\n+2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Refined_Global_In_Decl_Part): Add variable\n+\tStates.\n+\t(Check_Refined_Global_Item): An object or state acts as a\n+\tconstituent only when the corresponding encapsulating state\n+\tappears in pragma Global.\n+\t(Collect_Global_Item): Add a state with non-null visible refinement to\n+\tlist States.\n+\n+2015-10-27  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_util.ads, par.adb, sem_ch6.adb: Minor reformatting and a few\n+\ttypo corrections.\n+\n+2015-10-27  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* namet.ads, namet.adb (Name_Equals): New function.\n+\t* namet.h (Name_Equals): New macro.\n+\n+2015-10-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch6.adb (Build_Procedure_Form): Use 'RESULT' for the extra\n+\tparameter, to avoid ambiguity when generating tmps using _xxx which\n+\tmight end up reusing _result.\n+\n 2015-10-27  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_util.ads, sem_util.adb (Defining_Identifier): Adding a formal to"}, {"sha": "517143b9ea2b1278b7d371ca0cfcd31cc998a182", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=7f54dc834806d508cef6a77a24d9308fd54cf196", "patch": "@@ -5516,8 +5516,8 @@ package body Exp_Ch6 is\n \n          --  Add an extra out parameter to carry the function result\n \n-         Name_Len := 7;\n-         Name_Buffer (1 .. Name_Len) := \"_result\";\n+         Name_Len := 6;\n+         Name_Buffer (1 .. Name_Len) := \"RESULT\";\n          Append_To (Proc_Formals,\n            Make_Parameter_Specification (Loc,\n              Defining_Identifier =>"}, {"sha": "cfaec6e545a22fbce12b4ba8b4bce9a2beca5415", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=7f54dc834806d508cef6a77a24d9308fd54cf196", "patch": "@@ -1639,6 +1639,36 @@ package body Namet is\n       end if;\n    end Write_Name_Decoded;\n \n+   -----------------\n+   -- Name_Equals --\n+   -----------------\n+\n+   function Name_Equals (N1, N2 : Name_Id) return Boolean is\n+   begin\n+      if N1 = N2 then\n+         return True;\n+      end if;\n+\n+      declare\n+         L1 : constant Int := Int (Name_Entries.Table (N1).Name_Len);\n+         L2 : constant Int := Int (Name_Entries.Table (N2).Name_Len);\n+      begin\n+         if L1 /= L2 then\n+            return False;\n+         end if;\n+\n+         declare\n+            use Name_Chars;\n+\n+            I1 : constant Int := Name_Entries.Table (N1).Name_Chars_Index;\n+            I2 : constant Int := Name_Entries.Table (N2).Name_Chars_Index;\n+         begin\n+            return (Name_Chars.Table (1 + I1 .. I1 + L1)\n+                    = Name_Chars.Table (1 + I2 .. I2 + L2));\n+         end;\n+      end;\n+   end Name_Equals;\n+\n --  Package initialization, initialize tables\n \n begin"}, {"sha": "4a17e6eeee9d81f9fd3ebc6e29307b1dec9f4ca1", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=7f54dc834806d508cef6a77a24d9308fd54cf196", "patch": "@@ -561,6 +561,9 @@ package Namet is\n    --  described for Get_Decoded_Name_String, and the resulting value stored\n    --  in Name_Len and Name_Buffer is the decoded name.\n \n+   function Name_Equals (N1, N2 : Name_Id) return Boolean;\n+   --  Return whether N1 and N2 denote the same character sequence\n+\n    ------------------------------\n    -- File and Unit Name Types --\n    ------------------------------"}, {"sha": "82af02d58fe861efff9fc3331a7687900ffdb483", "filename": "gcc/ada/namet.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fnamet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fnamet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.h?ref=7f54dc834806d508cef6a77a24d9308fd54cf196", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *            Copyright (C) 1992-2014, Free Software Foundation, Inc.       *\n+ *            Copyright (C) 1992-2015, Free Software Foundation, Inc.       *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -88,6 +88,9 @@ Get_Decoded_Name_String (Name_Id Id)\n   return Name_Buffer;\n }\n \n+#define Name_Equals namet__name_equals\n+extern Boolean Name_Equals (Name_Id, Name_Id);\n+\n /* Like Get_Decoded_Name_String, but the result has all qualification and\n    package body entity suffixes stripped, and also all letters are upper\n    cased.  This is used for building the enumeration literal table. */"}, {"sha": "7c38084033f46f95885817128a0a203a95a9a23c", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=7f54dc834806d508cef6a77a24d9308fd54cf196", "patch": "@@ -1577,8 +1577,8 @@ begin\n                --  versions of these files. Another exception is System.RPC\n                --  and its children. This allows a user to supply their own\n                --  communication layer.\n-               --  Similarly we do not generate an error in CodePeer mode\n-               --  to allow users to analyze third party compier packages.\n+               --  Similarly, we do not generate an error in CodePeer mode,\n+               --  to allow users to analyze third-party compiler packages.\n \n                if Comp_Unit_Node /= Error\n                  and then Operating_Mode = Generate_Code"}, {"sha": "394029cc87bec3d3e702703842601fdbe5841a88", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=7f54dc834806d508cef6a77a24d9308fd54cf196", "patch": "@@ -549,22 +549,6 @@ package body Sem_Ch4 is\n          Type_Id := Etype (E);\n          Set_Directly_Designated_Type (Acc_Type, Type_Id);\n \n-         --  Allocators generated by the build-in-place expansion mechanism\n-         --  are explicitly marked as coming from source but do not need to be\n-         --  checked for limited initialization. To exclude this case, ensure\n-         --  that the parent of the allocator is a source node.\n-\n-         if Is_Limited_Type (Type_Id)\n-           and then Comes_From_Source (N)\n-           and then Comes_From_Source (Parent (N))\n-           and then not In_Instance_Body\n-         then\n-            if not OK_For_Limited_Init (Type_Id, Expression (E)) then\n-               Error_Msg_N (\"initialization not allowed for limited types\", N);\n-               Explain_Limited_Type (Type_Id, N);\n-            end if;\n-         end if;\n-\n          --  A qualified expression requires an exact match of the type,\n          --  class-wide matching is not allowed.\n "}, {"sha": "e1fe3bb73b7a14ceb4ab02d4ffa2a9719301a369", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7f54dc834806d508cef6a77a24d9308fd54cf196", "patch": "@@ -2383,7 +2383,7 @@ package body Sem_Ch6 is\n          begin\n             pragma Assert (Nkind (From) = N_Subprogram_Body);\n \n-            --  The destination node must be part of a list as the pragmas are\n+            --  The destination node must be part of a list, as the pragmas are\n             --  inserted after it.\n \n             pragma Assert (Is_List_Member (To));\n@@ -3576,7 +3576,7 @@ package body Sem_Ch6 is\n \n       --  Set the SPARK_Mode from the current context (may be overwritten later\n       --  with explicit pragma). Exclude the case where the SPARK_Mode appears\n-      --  initially on a stand alone subprogram body, but is then relocated to\n+      --  initially on a stand-alone subprogram body, but is then relocated to\n       --  a generated corresponding spec. In this scenario the mode is shared\n       --  between the spec and body.\n "}, {"sha": "0e4d30d2509e1509e113f665a2f9bc9f16a8c738", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7f54dc834806d508cef6a77a24d9308fd54cf196", "patch": "@@ -527,7 +527,7 @@ package body Sem_Prag is\n       --    E_Constant                 - \"constant\"\n       --    E_Discriminant             - \"discriminant\"\n       --    E_Generic_In_Out_Parameter - \"generic parameter\"\n-      --    E_Generic_Out_Parameter    - \"generic parameter\"\n+      --    E_Generic_In_Parameter     - \"generic parameter\"\n       --    E_In_Parameter             - \"parameter\"\n       --    E_In_Out_Parameter         - \"parameter\"\n       --    E_Loop_Parameter           - \"loop parameter\"\n@@ -24057,6 +24057,9 @@ package body Sem_Prag is\n       Spec_Id : Entity_Id;\n       --  The entity of the subprogram subject to pragma Refined_Global\n \n+      States : Elist_Id := No_Elist;\n+      --  A list of all states with visible refinement found in pragma Global\n+\n       procedure Check_In_Out_States;\n       --  Determine whether the corresponding Global pragma mentions In_Out\n       --  states with visible refinement and if so, ensure that one of the\n@@ -24566,11 +24569,14 @@ package body Sem_Prag is\n          begin\n             --  When the state or object acts as a constituent of another\n             --  state with a visible refinement, collect it for the state\n-            --  completeness checks performed later on.\n+            --  completeness checks performed later on. Note that the item\n+            --  acts as a constituent only when the encapsulating state is\n+            --  present in pragma Global.\n \n             if Ekind_In (Item_Id, E_Abstract_State, E_Constant, E_Variable)\n              and then Present (Encapsulating_State (Item_Id))\n              and then Has_Visible_Refinement (Encapsulating_State (Item_Id))\n+             and then Contains (States, Encapsulating_State (Item_Id))\n             then\n                if Global_Mode = Name_Input then\n                   Append_New_Elmt (Item_Id, In_Constits);\n@@ -24715,6 +24721,8 @@ package body Sem_Prag is\n                   Has_Null_State := True;\n \n                elsif Has_Non_Null_Refinement (Item_Id) then\n+                  Append_New_Elmt (Item_Id, States);\n+\n                   if Item_Mode = Name_Input then\n                      Has_In_State := True;\n                   elsif Item_Mode = Name_In_Out then"}, {"sha": "5ee73a938dffe300dc48aea02e4ffa0bcf68b932", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=7f54dc834806d508cef6a77a24d9308fd54cf196", "patch": "@@ -57,6 +57,7 @@ with Sem_Aggr; use Sem_Aggr;\n with Sem_Attr; use Sem_Attr;\n with Sem_Cat;  use Sem_Cat;\n with Sem_Ch4;  use Sem_Ch4;\n+with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Ch13; use Sem_Ch13;\n@@ -4680,6 +4681,22 @@ package body Sem_Res is\n          Check_Non_Static_Context (Expression (E));\n          Check_Unset_Reference (Expression (E));\n \n+         --  Allocators generated by the build-in-place expansion mechanism\n+         --  are explicitly marked as coming from source but do not need to be\n+         --  checked for limited initialization. To exclude this case, ensure\n+         --  that the parent of the allocator is a source node.\n+\n+         if Is_Limited_Type (Etype (E))\n+           and then Comes_From_Source (N)\n+           and then Comes_From_Source (Parent (N))\n+           and then not In_Instance_Body\n+         then\n+            if not OK_For_Limited_Init (Etype (E), Expression (E)) then\n+               Error_Msg_N (\"initialization not allowed for limited types\", N);\n+               Explain_Limited_Type (Etype (E), N);\n+            end if;\n+         end if;\n+\n          --  A qualified expression requires an exact match of the type.\n          --  Class-wide matching is not allowed.\n "}, {"sha": "0f6dd7ceaa4995518abd5e272430c6543999c5dc", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f54dc834806d508cef6a77a24d9308fd54cf196/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7f54dc834806d508cef6a77a24d9308fd54cf196", "patch": "@@ -480,8 +480,8 @@ package Sem_Util is\n    --      internally generated entity which is subsequently returned. A node\n    --      that does not allow for a defining entity raises Program_Error.\n    --\n-   --  The former semantic is appropriate for the backend; the latter semantic\n-   --  is appropriate for the frontend.\n+   --  The former semantics is appropriate for the back end; the latter\n+   --  semantics is appropriate for the front end.\n \n    function Denotes_Discriminant\n      (N                : Node_Id;"}]}