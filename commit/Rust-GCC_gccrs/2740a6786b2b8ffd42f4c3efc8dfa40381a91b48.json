{"sha": "2740a6786b2b8ffd42f4c3efc8dfa40381a91b48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc0MGE2Nzg2YjJiOGZmZDQyZjRjM2VmYzhkZmE0MDM4MWE5MWI0OA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-16T14:38:26Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-16T14:38:26Z"}, "message": "(find_fixup_replacement): Renamed from find_replacement.\n\nFrom-SVN: r2490", "tree": {"sha": "66d6199b8bb32e27e445e7a6eb55e31ecd162eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66d6199b8bb32e27e445e7a6eb55e31ecd162eb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2740a6786b2b8ffd42f4c3efc8dfa40381a91b48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2740a6786b2b8ffd42f4c3efc8dfa40381a91b48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2740a6786b2b8ffd42f4c3efc8dfa40381a91b48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2740a6786b2b8ffd42f4c3efc8dfa40381a91b48/comments", "author": null, "committer": null, "parents": [{"sha": "37a521120737fe33a8c7506bb8439b2d0dccbe1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a521120737fe33a8c7506bb8439b2d0dccbe1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37a521120737fe33a8c7506bb8439b2d0dccbe1d"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "7a94474a1a7a01e5f7be26a97cb1fde521d94775", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2740a6786b2b8ffd42f4c3efc8dfa40381a91b48/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2740a6786b2b8ffd42f4c3efc8dfa40381a91b48/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=2740a6786b2b8ffd42f4c3efc8dfa40381a91b48", "patch": "@@ -963,7 +963,7 @@ struct fixup_replacement\n    value is equal to X.  Allocate a new structure if no such entry exists. */\n \n static struct fixup_replacement *\n-find_replacement (replacements, x)\n+find_fixup_replacement (replacements, x)\n      struct fixup_replacement **replacements;\n      rtx x;\n {\n@@ -1131,7 +1131,7 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements)\n \t  /* If we already have a replacement, use it.  Otherwise, \n \t     try to fix up this address in case it is invalid.  */\n \n-\t  replacement = find_replacement (replacements, var);\n+\t  replacement = find_fixup_replacement (replacements, var);\n \t  if (replacement->new)\n \t    {\n \t      *loc = replacement->new;\n@@ -1159,7 +1159,7 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements)\n \n       if (reg_mentioned_p (var, x))\n \t{\n-\t  replacement = find_replacement (replacements, x);\n+\t  replacement = find_fixup_replacement (replacements, x);\n \t  if (replacement->new == 0)\n \t    replacement->new = copy_most_rtx (x, var);\n \n@@ -1285,7 +1285,7 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements)\n \t     a SUBREG of that pseudo.  */\n \t  if (GET_MODE_SIZE (GET_MODE (x)) > GET_MODE_SIZE (GET_MODE (var)))\n \t    {\n-\t      replacement = find_replacement (replacements, var);\n+\t      replacement = find_fixup_replacement (replacements, var);\n \t      if (replacement->new == 0)\n \t\treplacement->new = gen_reg_rtx (GET_MODE (var));\n \t      SUBREG_REG (x) = replacement->new;\n@@ -1296,7 +1296,7 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements)\n \t     If so, use it.  Otherwise, make a MEM and see if the insn\n \t     is recognized.  If not, or if we should force MEM into a register,\n \t     make a pseudo for this SUBREG.  */\n-\t  replacement = find_replacement (replacements, x);\n+\t  replacement = find_fixup_replacement (replacements, x);\n \t  if (replacement->new)\n \t    {\n \t      *loc = replacement->new;\n@@ -1459,7 +1459,7 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements)\n \t\t    && GET_CODE (SUBREG_REG (SET_DEST (x))) == REG))\n \t    && recog_memoized (insn) >= 0)\n \t  {\n-\t    replacement = find_replacement (replacements, SET_SRC (x));\n+\t    replacement = find_fixup_replacement (replacements, SET_SRC (x));\n \t    if (replacement->new)\n \t      {\n \t      SET_SRC (x) = replacement->new;"}]}