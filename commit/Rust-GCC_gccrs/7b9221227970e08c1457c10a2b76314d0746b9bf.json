{"sha": "7b9221227970e08c1457c10a2b76314d0746b9bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5MjIxMjI3OTcwZTA4YzE0NTdjMTBhMmI3NjMxNGQwNzQ2YjliZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-01-24T08:59:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-01-24T08:59:28Z"}, "message": "builtins.c (get_pointer_alignment, [...]): Use POINTER_TYPE_P instead TREE_CODE checking against POINTER_TYPE.\n\n\t* builtins.c (get_pointer_alignment, gimplify_va_arg_expr,\n\texpand_builtin_printf, expand_builtin_fprintf,\n\texpand_builtin_sprintf): Use POINTER_TYPE_P instead TREE_CODE\n\tchecking against POINTER_TYPE.\n\t(validate_arglist): Handle POINTER_TYPE code by checking\n\tPOINTER_TYPE_P.\n\t* g++.dg/tree-ssa/empty-1.C: New test.\n\nFrom-SVN: r94147", "tree": {"sha": "4cdc7b4c1a5f853c36928c79729dee8419d6837f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cdc7b4c1a5f853c36928c79729dee8419d6837f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b9221227970e08c1457c10a2b76314d0746b9bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9221227970e08c1457c10a2b76314d0746b9bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b9221227970e08c1457c10a2b76314d0746b9bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9221227970e08c1457c10a2b76314d0746b9bf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf94b0fccc0d17e630f33ed3eff7619e71645f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf94b0fccc0d17e630f33ed3eff7619e71645f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf94b0fccc0d17e630f33ed3eff7619e71645f1c"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "c176b017e3296f7cc0bb6062df43686312ebf6cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9221227970e08c1457c10a2b76314d0746b9bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9221227970e08c1457c10a2b76314d0746b9bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b9221227970e08c1457c10a2b76314d0746b9bf", "patch": "@@ -1,3 +1,12 @@\n+2005-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtins.c (get_pointer_alignment, gimplify_va_arg_expr,\n+\texpand_builtin_printf, expand_builtin_fprintf,\n+\texpand_builtin_sprintf): Use POINTER_TYPE_P instead TREE_CODE\n+\tchecking against POINTER_TYPE.\n+\t(validate_arglist): Handle POINTER_TYPE code by checking\n+\tPOINTER_TYPE_P.\n+\n 2005-01-24  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* rtlanal.c (non_rtx_starting_operands, for_each_rtx_1,"}, {"sha": "78076db2bf28db6ad34e48c323e86e32fb0223c0", "filename": "gcc/builtins.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9221227970e08c1457c10a2b76314d0746b9bf/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9221227970e08c1457c10a2b76314d0746b9bf/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7b9221227970e08c1457c10a2b76314d0746b9bf", "patch": "@@ -201,7 +201,7 @@ get_pointer_alignment (tree exp, unsigned int max_align)\n {\n   unsigned int align, inner;\n \n-  if (TREE_CODE (TREE_TYPE (exp)) != POINTER_TYPE)\n+  if (! POINTER_TYPE_P (TREE_TYPE (exp)))\n     return 0;\n \n   align = TYPE_ALIGN (TREE_TYPE (TREE_TYPE (exp)));\n@@ -215,7 +215,7 @@ get_pointer_alignment (tree exp, unsigned int max_align)\n \tcase CONVERT_EXPR:\n \tcase NON_LVALUE_EXPR:\n \t  exp = TREE_OPERAND (exp, 0);\n-\t  if (TREE_CODE (TREE_TYPE (exp)) != POINTER_TYPE)\n+\t  if (! POINTER_TYPE_P (TREE_TYPE (exp)))\n \t    return align;\n \n \t  inner = TYPE_ALIGN (TREE_TYPE (TREE_TYPE (exp)));\n@@ -3988,7 +3988,7 @@ gimplify_va_arg_expr (tree *expr_p, tree *pre_p, tree *post_p)\n          In that case, unwrap both types so that we can compare the\n \t underlying records.  */\n       if (TREE_CODE (have_va_type) == ARRAY_TYPE\n-\t  || TREE_CODE (have_va_type) == POINTER_TYPE)\n+\t  || POINTER_TYPE_P (have_va_type))\n \t{\n \t  want_va_type = TREE_TYPE (want_va_type);\n \t  have_va_type = TREE_TYPE (have_va_type);\n@@ -4486,7 +4486,7 @@ expand_builtin_printf (tree arglist, rtx target, enum machine_mode mode,\n   if (! arglist)\n     return 0;\n   fmt = TREE_VALUE (arglist);\n-  if (TREE_CODE (TREE_TYPE (fmt)) != POINTER_TYPE)\n+  if (! POINTER_TYPE_P (TREE_TYPE (fmt)))\n     return 0;\n   arglist = TREE_CHAIN (arglist);\n \n@@ -4499,7 +4499,7 @@ expand_builtin_printf (tree arglist, rtx target, enum machine_mode mode,\n   if (strcmp (fmt_str, \"%s\\n\") == 0)\n     {\n       if (! arglist\n-          || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+          || ! POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (arglist)))\n \t  || TREE_CHAIN (arglist))\n \treturn 0;\n       fn = fn_puts;\n@@ -4588,13 +4588,13 @@ expand_builtin_fprintf (tree arglist, rtx target, enum machine_mode mode,\n   if (! arglist)\n     return 0;\n   fp = TREE_VALUE (arglist);\n-  if (TREE_CODE (TREE_TYPE (fp)) != POINTER_TYPE)\n+  if (! POINTER_TYPE_P (TREE_TYPE (fp)))\n     return 0;\n   arglist = TREE_CHAIN (arglist);\n   if (! arglist)\n     return 0;\n   fmt = TREE_VALUE (arglist);\n-  if (TREE_CODE (TREE_TYPE (fmt)) != POINTER_TYPE)\n+  if (! POINTER_TYPE_P (TREE_TYPE (fmt)))\n     return 0;\n   arglist = TREE_CHAIN (arglist);\n \n@@ -4607,7 +4607,7 @@ expand_builtin_fprintf (tree arglist, rtx target, enum machine_mode mode,\n   if (strcmp (fmt_str, \"%s\") == 0)\n     {\n       if (! arglist\n-          || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+          || ! POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (arglist)))\n \t  || TREE_CHAIN (arglist))\n \treturn 0;\n       arg = TREE_VALUE (arglist);\n@@ -4675,13 +4675,13 @@ expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n   if (! arglist)\n     return 0;\n   dest = TREE_VALUE (arglist);\n-  if (TREE_CODE (TREE_TYPE (dest)) != POINTER_TYPE)\n+  if (! POINTER_TYPE_P (TREE_TYPE (dest)))\n     return 0;\n   arglist = TREE_CHAIN (arglist);\n   if (! arglist)\n     return 0;\n   fmt = TREE_VALUE (arglist);\n-  if (TREE_CODE (TREE_TYPE (fmt)) != POINTER_TYPE)\n+  if (! POINTER_TYPE_P (TREE_TYPE (fmt)))\n     return 0;\n   arglist = TREE_CHAIN (arglist);\n \n@@ -4717,7 +4717,7 @@ expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n       if (! arglist || TREE_CHAIN (arglist))\n \treturn 0;\n       arg = TREE_VALUE (arglist);\n-      if (TREE_CODE (TREE_TYPE (arg)) != POINTER_TYPE)\n+      if (! POINTER_TYPE_P (TREE_TYPE (arg)))\n \treturn 0;\n \n       if (target != const0_rtx)\n@@ -8058,8 +8058,14 @@ validate_arglist (tree arglist, ...)\n \t  /* If no parameters remain or the parameter's code does not\n \t     match the specified code, return false.  Otherwise continue\n \t     checking any remaining arguments.  */\n-\t  if (arglist == 0\n-\t      || code != TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))))\n+\t  if (arglist == 0)\n+\t    goto end;\n+\t  if (code == POINTER_TYPE)\n+\t    {\n+\t      if (! POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (arglist))))\n+\t\tgoto end;\n+\t    }\n+\t  else if (code != TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))))\n \t    goto end;\n \t  break;\n \t}"}, {"sha": "d1bde8aa50d1c666ec9914154c46e7dc9c011c05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9221227970e08c1457c10a2b76314d0746b9bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9221227970e08c1457c10a2b76314d0746b9bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b9221227970e08c1457c10a2b76314d0746b9bf", "patch": "@@ -1,5 +1,7 @@\n 2005-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* g++.dg/tree-ssa/empty-1.C: New test.\n+\n \tPR middle-end/19551\n \t* gcc.c-torture/execute/20050121-1.c: New test.\n \t* gcc.dg/20050121-2.c: New test."}, {"sha": "f7c8ecc14bf996043829b7e045a6a86be30425c8", "filename": "gcc/testsuite/g++.dg/tree-ssa/empty-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9221227970e08c1457c10a2b76314d0746b9bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fempty-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9221227970e08c1457c10a2b76314d0746b9bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fempty-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fempty-1.C?ref=7b9221227970e08c1457c10a2b76314d0746b9bf", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct S {};\n+S bar (const S &a)\n+{\n+  S s;\n+  s = a;\n+  return s;\n+}\n+\n+/* Test whether memcpy call has been optimized out.  */\n+/* { dg-final { scan-tree-dump-times \"memcpy\" 0 \"optimized\"} } */"}]}