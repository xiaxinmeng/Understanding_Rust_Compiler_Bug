{"sha": "cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4MTFhOGFlNmM3NjA5NTVhYzJkY2E1MWQ4MzU5ZDAwM2M4ZTRmMg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2014-09-30T16:08:53Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2014-09-30T16:08:53Z"}, "message": "re PR preprocessor/58893 (<command-line>:0:0: internal compiler error: Segmentation fault)\n\n2014-09-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR preprocessor/58893\n\t* errors.c (cpp_diagnostic): Fix possible out of bounds access.\n\t* files.c (_cpp_stack_include): Initialize src_loc for IT_CMDLINE.\n\ntestsuite:\n2014-09-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR preprocessor/58893\n\t* gcc.dg/pr58893.c: New test case.\n\t* gcc.dg/pr58893-0.h: New include.\n\nFrom-SVN: r215730", "tree": {"sha": "ab32b139b652fc4cee08f6e47ca2d986547e773f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab32b139b652fc4cee08f6e47ca2d986547e773f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd91371c5f1ed77c2acdde60f194a98df95c241b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd91371c5f1ed77c2acdde60f194a98df95c241b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd91371c5f1ed77c2acdde60f194a98df95c241b"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "6ffbbee2720f871b6b1d75de4283c2b5088b4c78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "patch": "@@ -1,3 +1,9 @@\n+2014-09-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR preprocessor/58893\n+\t* gcc.dg/pr58893.c: New test case.\n+\t* gcc.dg/pr58893-0.h: New include.\n+\n 2014-09-30  Ilya Tocar  <ilya.tocar@intel.com>\n \n \tPR middle-end/62120"}, {"sha": "957bcdc11737aeaf2baac90f44b54598a96b8490", "filename": "gcc/testsuite/gcc.dg/pr58893-0.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58893-0.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58893-0.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58893-0.h?ref=cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "patch": "@@ -0,0 +1 @@\n+#pragma GCC visibility push(hidden)"}, {"sha": "c9f8b6b1e8d1fcdf37ec8751b2e019ba3b623d07", "filename": "gcc/testsuite/gcc.dg/pr58893.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58893.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58893.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58893.c?ref=cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "patch": "@@ -0,0 +1,5 @@\n+/* PR preprocessor/58893 */\n+/* { dg-do compile } */\n+/* { dg-options \"-include pr58893-0.h -include pr58893-1.h -I${srcdir}/gcc.dg\" } */\n+/* { dg-error \"pr58893-1.h: No such file or directory\" \"\" { target *-*-* } 0 } */\n+/* { dg-prune-output \"compilation terminated\" } */"}, {"sha": "92999040a02a629c69bbc18565d619ecffbbd6b8", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "patch": "@@ -1,3 +1,9 @@\n+2014-09-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR preprocessor/58893\n+\t* errors.c (cpp_diagnostic): Fix possible out of bounds access.\n+\t* files.c (_cpp_stack_include): Initialize src_loc for IT_CMDLINE.\n+\n 2014-09-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61405"}, {"sha": "bc857f0b81d5d3d4acf624be0adff409fd267462", "filename": "libcpp/errors.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/libcpp%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/libcpp%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ferrors.c?ref=cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "patch": "@@ -48,10 +48,7 @@ cpp_diagnostic (cpp_reader * pfile, int level, int reason,\n      current run -- that is invalid.  */\n   else if (pfile->cur_token == pfile->cur_run->base)\n     {\n-      if (pfile->cur_run->prev != NULL)\n-\tsrc_loc = pfile->cur_run->prev->limit->src_loc;\n-      else\n-\tsrc_loc = 0;\n+      src_loc = 0;\n     }\n   else\n     {"}, {"sha": "00302fd774f328960463eeb97b0d008d29a381a2", "filename": "libcpp/files.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc811a8ae6c760955ac2dca51d8359d003c8e4f2/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "patch": "@@ -991,6 +991,18 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n   _cpp_file *file;\n   bool stacked;\n \n+  /* For -include command-line flags we have type == IT_CMDLINE.\n+     When the first -include file is processed we have the case, where\n+     pfile->cur_token == pfile->cur_run->base, we are directly called up\n+     by the front end.  However in the case of the second -include file,\n+     we are called from _cpp_lex_token -> _cpp_get_fresh_line ->\n+     cpp_push_include, with pfile->cur_token != pfile->cur_run->base,\n+     and pfile->cur_token[-1].src_loc not (yet) initialized.\n+     However, when the include file cannot be found, we need src_loc to\n+     be initialized to some safe value: 0 means UNKNOWN_LOCATION.  */\n+  if (type == IT_CMDLINE && pfile->cur_token != pfile->cur_run->base)\n+    pfile->cur_token[-1].src_loc = 0;\n+\n   dir = search_path_head (pfile, fname, angle_brackets, type);\n   if (!dir)\n     return false;"}]}