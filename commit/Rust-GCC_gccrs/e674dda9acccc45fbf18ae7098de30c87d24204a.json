{"sha": "e674dda9acccc45fbf18ae7098de30c87d24204a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3NGRkYTlhY2NjYzQ1ZmJmMThhZTcwOThkZTMwYzg3ZDI0MjA0YQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-07-28T14:06:12Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-07-28T14:06:12Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r21441", "tree": {"sha": "a23ae5e24478e349a0cf6fba53bb59e1cc01f6db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a23ae5e24478e349a0cf6fba53bb59e1cc01f6db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e674dda9acccc45fbf18ae7098de30c87d24204a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e674dda9acccc45fbf18ae7098de30c87d24204a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e674dda9acccc45fbf18ae7098de30c87d24204a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e674dda9acccc45fbf18ae7098de30c87d24204a/comments", "author": null, "committer": null, "parents": [{"sha": "49e4181d22489d2e73d06188cdb52f7d5f953183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e4181d22489d2e73d06188cdb52f7d5f953183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e4181d22489d2e73d06188cdb52f7d5f953183"}], "stats": {"total": 252, "additions": 252, "deletions": 0}, "files": [{"sha": "a2c9c04279f61954a830befa77f2cfe61e5b3d82", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/scope02.C", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e674dda9acccc45fbf18ae7098de30c87d24204a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fscope02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e674dda9acccc45fbf18ae7098de30c87d24204a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fscope02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fscope02.C?ref=e674dda9acccc45fbf18ae7098de30c87d24204a", "patch": "@@ -0,0 +1,208 @@\n+// Build don't link:\n+//980529 bkoz\n+//3.4.5 Class member access via pointer and non-pointer\n+// non-nested dtor calls\n+\n+int counter = 0;\n+\n+struct X {\n+  int rank;\n+  X(int init = 64) : rank(init) { }\n+  ~X() { ++counter; }\n+  typedef X classtype;\n+};\n+typedef X globaltype;\n+\n+#if 0\n+template <typename T>\n+struct X_tem {\n+  T rank;\n+  X_tem(T init = T(64) ) : rank(init) { }\n+  ~X_tem() { ++counter; }\n+  typedef X_tem classtype_tem;\n+};\n+typedef X_tem<int> globaltype_tem;\n+#endif\n+\n+\n+\n+\n+int main(void)\n+{\n+  // 3.4.5 Class member access\n+  // p 2\n+  // if the id-expression in a class member access is an\n+  // unqualified-id, and the type of the object expression is of class\n+  // type C (or pointer to class type C), the unqualified-id is looked\n+  // up in the scope of class C. If the type of the object-expression\n+  // is of pointer to scalar type, the unqualified-id is looked up in\n+  // the context of the complete postfix-expression.\n+\n+  // p 3\n+  // if the unqualitified id is ~type-name, and the type of the object\n+  // expression is of a class type C (or pointer to class type C), the\n+  // type-name is looked up in the context of the entire\n+  // postfix-expression and in the scope of class C. The type-name\n+  // shall refer to a class-name. If type-name is found in both\n+  // contexts, the name shall refer to the same class type. If the\n+  // type of the object expression is of scalar type, the type-name is\n+  // looked up in the complete postfix-expression.\n+  \n+  typedef X localtype;\n+\n+  //\n+  // 1 non-templatized, pointer, unqualified\n+  //\n+  X x01 ;\n+  X *px = &x01;\n+  px->~X(); \n+\n+  X x02 (66);\n+  px = &x02;\n+  px->~localtype();\n+\n+  X x03 (68);\n+  px = &x03;\n+  px->~classtype(); //-g++  //p3: unqual-id lookup in object and postfix-expr\n+\n+  X x04 (70);\n+  px = &x04;\n+  px->~globaltype();\n+\n+\n+  // p 1\n+  // . . . the id-expression is first looked up in the class of the\n+  // object-expression. If the identifier is not found, itis then\n+  // looked up in the context of the entier postfix-expression and\n+  // shall name a class or function template. If the lookup in the\n+  // class of the object-expression finds a template, the name is also\n+  // looked up in teh context of the entier postfix-expression and\n+  // 1 if the name is not found, use the name from the object-expr\n+  // 2 if the name found in postfix-expr != class template, use object-expr\n+  // 3 if name found is class template, name must match object-expr or error\n+\n+  // p 4 \n+\n+  // if the id-expr in a class member acess is a qualified-id, the\n+  // id-expression is looked up in both the context of the entire\n+  // postfix-expr and in the scope of the class of the object-expr. If\n+  // the name is found in both contexts, the id-expr shall refer to\n+  // the same entity.\n+\n+\n+  //\n+  // 2 non-templatized, pointer, qualified\n+  //\n+  X x05 ;\n+  px = &x05;\n+  px->X::~X(); \n+\n+  X x06 (66);\n+  px = &x06;\n+  px->X::~localtype();\n+\n+  X x07 (68);\n+  px = &x07;\n+  px->X::~classtype(); // -edg\n+\n+  X x08 (70);\n+  px = &x08;\n+  px->X::~globaltype();\n+\n+  X x09 (66);\n+  px = &x09;\n+  px->localtype::~localtype();\n+\n+  X x10 (68);\n+  px = &x10;\n+  px->classtype::~classtype();\n+\n+  X x11 (70);\n+  px = &x11;\n+  px->globaltype::~globaltype();\n+\n+  X x12 (66);\n+  px = &x12;\n+  px->classtype::~localtype();\n+\n+  X x13 (68);\n+  px = &x13;\n+  px->globaltype::~localtype();\n+\n+  X x14 (70);\n+  px = &x14;\n+  px->localtype::~globaltype();\n+\n+  X x15 (70);\n+  px = &x15;\n+  px->classtype::~globaltype();\n+\n+  X x16 (70);\n+  px = &x16;\n+  px->localtype::~classtype(); //-edg\n+\n+  X x17 (70);\n+  px = &x17;\n+  px->globaltype::~classtype(); //-edg\n+\n+#if 0\n+  //\n+  // non-templatized, non-pointer\n+  //\n+  X xo5 ;\n+  xo5.~X(); //unqualified\n+\n+  localtype xo6 (66);\n+  xo6.~localtype();\n+\n+  X xo7 (68);\n+  xo7.~classtype();\n+\n+  X xo8 (70);\n+  xo8.~globaltype();\n+\n+\n+  //\n+  // templatized, pointer\n+  //\n+  X_tem<int> xto1 ;\n+  X_tem<int> *pxt = &xto1;\n+  pxt->~X_tem(); //unqualified\n+\n+  typedef X_tem<int> localtype_tem;\n+  localtype_tem xto2 (66);\n+  pxt = &xto2;\n+  pxt->~localtype_tem();\n+\n+  //paragraph 2:  unqualitifed id looked up in scope of post-fix expr if object\n+  X_tem<int> xto3 (68);\n+  pxt = &xto3;\n+  pxt->~classtype_tem();\n+\n+  X_tem<int> xto4 (70);\n+  pxt = &xto4;\n+  pxt->~globaltype_tem();\n+\n+  //\n+  // templatized, non-pointer\n+  //\n+  X_tem<int> xto5 ;\n+  xto5.~X_tem(); //unqualified\n+\n+  localtype_tem xto6 (66);\n+  xto6.~localtype_tem();\n+\n+  X_tem<int> xto7 (68);\n+  xto7.~classtype_tem();\n+\n+  X_tem<int> xto8 (70);\n+  xto8.~globaltype_tem();\n+#endif\n+  return 0;\n+}\n+\n+\n+\n+\n+\n+"}, {"sha": "cf09ccbc008a003969eff2517461564efc46e1e2", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/typedef03.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e674dda9acccc45fbf18ae7098de30c87d24204a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftypedef03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e674dda9acccc45fbf18ae7098de30c87d24204a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftypedef03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftypedef03.C?ref=e674dda9acccc45fbf18ae7098de30c87d24204a", "patch": "@@ -0,0 +1,44 @@\n+// Build don't link:\n+//980526 bkoz\n+// reduced testcase for 980511 brendan qt bug\n+\n+\n+class QTextStream\t\t\t\t \n+{\n+public:\n+    QTextStream();\n+    virtual ~QTextStream();\n+\n+    enum {\n+\tskipws\t  = 0x0001,\t\t\t \n+\tleft\t  = 0x0002,\t\t\t \n+\tright\t  = 0x0004,\t\t\t \n+\tinternal  = 0x0008,\t\t\t \n+\tbin\t  = 0x0010,\t\t\t \n+\toct\t  = 0x0020,\t\t\t \n+\tdec\t  = 0x0040,\t\t\t \n+\thex\t  = 0x0080,\t\t\t \n+\tshowbase  = 0x0100,\t\t\t \n+\tshowpoint = 0x0200,\t\t\t \n+\tuppercase = 0x0400,\t\t\t \n+\tshowpos\t  = 0x0800,\t\t\t \n+\tscientific= 0x1000,\t\t\t \n+\tfixed\t  = 0x2000\t\t\t \n+    };\n+\n+    static const int basefield;\t\t\t \n+    static const int adjustfield;\t\n+};\n+\n+typedef QTextStream QTS;\n+const int QTS::basefield   = (QTS::bin | QTS::dec | QTS::hex) ;\n+const int QTS::adjustfield = QTS::left | QTS::right | QTS::internal;\n+#if 0\n+#define QTS QTextStream\n+const int QTS::basefield   = (QTS::bin | QTS::dec | QTS::hex) ;\n+const int QTS::adjustfield = QTS::left | QTS::right | QTS::internal;\n+#endif\n+\n+\n+\n+"}]}