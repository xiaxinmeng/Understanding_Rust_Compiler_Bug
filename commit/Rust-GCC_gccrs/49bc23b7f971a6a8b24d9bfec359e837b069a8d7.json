{"sha": "49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDliYzIzYjdmOTcxYTZhOGIyNGQ5YmZlYzM1OWU4MzdiMDY5YThkNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-08-02T16:04:16Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-08-02T16:04:16Z"}, "message": "Revert PR libstdc++/6594\n\n\n2002-08-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tRevert PR libstdc++/6594\n\t* src/strstream.cc (strstreambuf): Revert.\n\t(strstreambuf::overflow): Same.\n\t(strstreambuf::~strstreambuf): Same.\n\t* testsuite/backward/strstream_members.cc (test02): Add.\n\n\t* docs/html/abi.txt: Update. Spell check.\n\n\t* testsuite/19_diagnostics/stdexceptions.cc (test04): Add bool test.\n\n\t* testsuite/Makefile.am (INCLUDES): Add LIBSUPCXX_INCLUDES.\n\t* testsuite/Makefile.in: Regenerate.\n\t* testsuite/testsuite_hooks.h: Use __throw_exception_again,\n\tinclude functexcept.h so that -fno-exceptions will build.\n\nFrom-SVN: r55988", "tree": {"sha": "f09969269dffbedb05335c80ca06847521a7611c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f09969269dffbedb05335c80ca06847521a7611c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/comments", "author": null, "committer": null, "parents": [{"sha": "771a2a6696f58bb7bd4e598f9411f8a8ac72b3c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/771a2a6696f58bb7bd4e598f9411f8a8ac72b3c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/771a2a6696f58bb7bd4e598f9411f8a8ac72b3c1"}], "stats": {"total": 177, "additions": 132, "deletions": 45}, "files": [{"sha": "1fd251d06e4a56ee9bc4ecbbe20780c13f17f6d6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "patch": "@@ -1,3 +1,20 @@\n+2002-08-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tRevert PR libstdc++/6594\n+\t* src/strstream.cc (strstreambuf): Revert.\n+\t(strstreambuf::overflow): Same.\n+\t(strstreambuf::~strstreambuf): Same.\t\n+\t* testsuite/backward/strstream_members.cc (test02): Add.\n+\t\n+\t* docs/html/abi.txt: Update. Spell check.\n+\n+\t* testsuite/19_diagnostics/stdexceptions.cc (test04): Add bool test.\n+\n+\t* testsuite/Makefile.am (INCLUDES): Add LIBSUPCXX_INCLUDES.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* testsuite/testsuite_hooks.h: Use __throw_exception_again,\n+\tinclude functexcept.h so that -fno-exceptions will build.\n+\t\n 2002-08-02  Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* include/bits/valarray_meta.h (__unary_plus, __negate,"}, {"sha": "216b15971219bf5f36d13d55ee9acf9028b57071", "filename": "libstdc++-v3/docs/html/abi.txt", "status": "modified", "additions": 79, "deletions": 18, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt?ref=49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "patch": "@@ -30,8 +30,10 @@ I. What is an ABI? What's covered? What's not?\n   switch between the gcc-3.0.x ABI, gcc-3.1.x ABI, and the gcc-3.2.x\n   ABI during compilation. Other C++ compilers do allow this, and some\n   g++ command line options may change the ABI (-fno-exceptions, see\n-  the complete list), but there is no version switch. Sorry. The GNU\n-  Project recommends that\n+  the complete list), but there is no version switch. Sorry. \n+\n+  To use a specific C++ABI, one must use the corresponding GNU C++\n+  toolchain. \n \n - How can this complexity be managed? What does C++ versioning mean?\n   Because library and compiler changes often make binaries compiled\n@@ -41,27 +43,77 @@ I. What is an ABI? What's covered? What's not?\n   easier.\n \n   The following techniques are used:\n+\n   - Release versioning on the libgcc_s.so binary.\n \n+    It is versioned as follows:\n+    gcc-3.0.0: libgcc_s.so.1\n+    gcc-3.0.1: libgcc_s.so.1\n+    gcc-3.0.2: libgcc_s.so.1\n+    gcc-3.0.3: libgcc_s.so.1\n+    gcc-3.0.4: libgcc_s.so.1\n+    gcc-3.1.0: libgcc_s.so.1\n+    gcc-3.1.1: libgcc_s.so.1\n+    gcc-3.2.0: libgcc_s.so.1\n+\n+\n   - Release versioning on the libstdc++.so binary.\n \n+    It is versioned as follows:\n+    gcc-3.0.0: libstdc++.so.3.0.0\n+    gcc-3.0.1: libstdc++.so.3.0.1\n+    gcc-3.0.2: libstdc++.so.3.0.2\n+    gcc-3.0.3: libstdc++.so.3.0.2 (Error, should be libstdc++.so.3.0.3)\n+    gcc-3.0.4: libstdc++.so.3.0.4\n+    gcc-3.1.0: libstdc++.so.4.0.0\n+    gcc-3.1.1: libstdc++.so.4.0.1\n+    gcc-3.2.0: libstdc++.so.5.0.0\n+\n+\n   - Symbol versioning on the libgcc_s.so binary.\n   \n+    file: gcc/libgcc-std.ver\n+\n+    It is versioned as follows:\n+    gcc-3.0.0: GCC_3.0\n+    gcc-3.0.1: GCC_3.0\n+    gcc-3.0.2: GCC_3.0\n+    gcc-3.0.3: GCC_3.0\n+    gcc-3.0.4: GCC_3.0\n+    gcc-3.1.0: GCC_3.0\n+    gcc-3.1.1: GCC_3.0\n+    gcc-3.2.0: GCC_3.0\n+\n+\n   - Symbol versioning on the libstdc++.so binary.\n+  \n+    It is versioned as follows:\n+    gcc-3.0.0: (Error, unversioned)\n+    gcc-3.0.1: (Error, unversioned)\n+    gcc-3.0.2: (Error, unversioned)\n+    gcc-3.0.3: (Error, unversioned)\n+    gcc-3.0.4: (Error, unversioned)\n+    gcc-3.1.0: GLIBCPP_3.1, CXXABI_1\n+    gcc-3.1.1: GLIBCPP_3.1, CXXABI_1\n+    gcc-3.2.0: GLIBCPP_3.2, CXXABI_1.2\n+    \n+    file: libstdc++-v3/config/linker-map.gnu\n+  \n \n   - Incremental bumping of a compiler pre-defined macro,\n-    __GXX_ABI_VERSION. This macro will be automatically defined\n-    whenever g++ is used (the curious can test this by invoking g++\n-    with the '-v' flag. \n+    __GXX_ABI_VERSION. This macro is defined as the version of the\n+    compiler v3 ABI, with g++ 3.0.x being version 100. This macro will\n+    be automatically defined whenever g++ is used (the curious can\n+    test this by invoking g++ with the '-v' flag.)\n     \n     This macro is defined in the file \"lang-specs.h\" in the gcc/cp directory.\n-    \n+    Later versions define it in \"c-common.c\" in the gcc directory.\n+\n     It is versioned as follows:\n     gcc-3.0.x: 100\n-    gcc-3.1.x: 100\n-    gcc-3.2.x: 101\n+    gcc-3.1.x: 100 (Error, should be 101)\n+    gcc-3.2.x: 102\n \n-    Ask the compiler people why this makes sense, or what this macro means.\n \n   - Incremental bumping of a library pre-defined macro,\n     __GLIBCPP__. This macro is defined as the date the library was\n@@ -81,6 +133,7 @@ I. What is an ABI? What's covered? What's not?\n     gcc-3.1.1: 20020725\n     gcc-3.2.0: (20020731)\n \n+\n   - Incremental bumping of a library pre-defined macro,\n     _GLIBCPP_VERSION. This macro is defined as the released version of\n     the library, as a string literal. This is only implemented in\n@@ -93,20 +146,21 @@ I. What is an ABI? What's covered? What's not?\n \n     It is versioned as follows:\n     gcc-3.0.0: \"3.0.0\"\n-    gcc-3.0.1: \"3.0.0\"\n-    gcc-3.0.2: \"3.0.0\"\n-    gcc-3.0.3: \"3.0.0\"\n-    gcc-3.0.4: \"3.0.0\"\n+    gcc-3.0.1: \"3.0.0\" (Error, should be \"3.0.1\")\n+    gcc-3.0.2: \"3.0.0\" (Error, should be \"3.0.2\")\n+    gcc-3.0.3: \"3.0.0\" (Error, should be \"3.0.3\")\n+    gcc-3.0.4: \"3.0.0\" (Error, should be \"3.0.4\")\n     gcc-3.1.0: \"3.1.0\"\n     gcc-3.1.1: \"3.1.1\"\n     gcc-3.2.0: (\"3.2.0\")\n \n+\n   - Matching each specific C++ compiler release to a specific set of\n     C++ include files. This is only implemented in gcc-3.1.1 releases\n     and higher.\n \n     All C++ includes are installed in include/c++, then nest in a\n-    directory heirarchy corresponding to the C++ compiler's released\n+    directory hierarchy corresponding to the C++ compiler's released\n     version. This version corresponds to the variable \"gcc_version\" in\n     \"libstdc++-v3/acinclude.m4,\" and more details can be found in that\n     file's macro GLIBCPP_CONFIGURE.\n@@ -155,7 +209,7 @@ I. What is an ABI? What's covered? What's not?\n   When the GNU C++ library is being built with symbol versioning on,\n   you should see the following at configure time for libstdc++-v3:\n \n-checking versioning on shared library symbols... gnu\n+  checking versioning on shared library symbols... gnu\n \n   If you don't see this line in the configure output, or if this line\n   appears but the last word is 'no', then you are out of luck.\n@@ -192,7 +246,9 @@ increase, say from \"libstdc++.so.3.0.4\" to \"libstdc++.so.4.0.0\".\n \n - (anything) changing mangling on an exported symbol\n \n-- (anything) adding or deleting an exported symbol\n+- (anything) deleting an exported symbol\n+\n+Note: adding an exported symbol, if it's in a new linker map name, is ok.\n \n The following will cause the library revision version number to\n increase, say from \"libstdc++.so.5.0.0\" to \"libstdc++.so.5.0.1\".\n@@ -251,6 +307,11 @@ compute offsets for each structure and type in the standard library,\n saving to another datafile. Then, compute this for new binaries, and\n look for differences.\n \n+An example of a way to compute the list of names exported by the\n+shared libstdc++ binary is:\n+\n+nm --extern-only --portability libstdc++.so.5.0.0 | awk '{ print $1 $2}'\n+\n The thought is to choose one or both of these approaches, and to use a\n Makefile hook, perhaps 'make check-abi', to add this capability to the\n libstdc++ testsuite.\n@@ -270,12 +331,12 @@ V. Issues not directly addressed, and possible suggestions\n  \n   - directory-level versioning\n \n-- wrapping C++ API's n \"C\" to use the C ABI.\n+- wrapping C++ API's in \"C\" to use the C ABI.\n \n \n V. References\n \n-ABIcheck, a vauge idea of checking ABI compatibility\n+ABIcheck, a vague idea of checking ABI compatibility\n http://abicheck.sourceforge.net/\n \n C++ ABI reference"}, {"sha": "0576472ddbe3d55a1f6e3d62f209f54927e5a241", "filename": "libstdc++-v3/src/strstream.cc", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc?ref=49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "patch": "@@ -60,25 +60,27 @@ namespace std\n   : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(true), \n     _M_frozen(false), _M_constant(false)\n   {\n-    _M_buf_size = _M_buf_size_opt = max(initial_capacity, streamsize(16));\n-    _M_buf = _M_alloc(_M_buf_size);\n-    if (_M_buf) \n+    streamsize n = max(initial_capacity, streamsize(16));\n+    \n+    char* buf = _M_alloc(n);\n+    if (buf) \n       {\n-\tsetp(_M_buf, _M_buf + _M_buf_size);\n-\tsetg(_M_buf, _M_buf, _M_buf);\n+\tsetp(buf, buf + n);\n+\tsetg(buf, buf, buf);\n       }\n   }\n \n   strstreambuf::strstreambuf(void* (*alloc_f)(size_t), void (*free_f)(void*))\n   : _Base(), _M_alloc_fun(alloc_f), _M_free_fun(free_f), _M_dynamic(true), \n     _M_frozen(false), _M_constant(false)\n   {\n-    _M_buf_size = _M_buf_size_opt = 16;\n-    _M_buf = _M_alloc(_M_buf_size);\n-    if (_M_buf) \n+    streamsize n = 16;\n+\n+    char* buf = _M_alloc(n);\n+    if (buf) \n       {\n-\tsetp(_M_buf, _M_buf + _M_buf_size);\n-\tsetg(_M_buf, _M_buf, _M_buf);\n+\tsetp(buf, buf + n);\n+\tsetg(buf, buf, buf);\n       }\n   }\n \n@@ -116,14 +118,7 @@ namespace std\n   strstreambuf::~strstreambuf()\n   {\n     if (_M_dynamic && !_M_frozen)\n-      {\n-\tchar* p = this->eback();\n-\t_M_free(p);\n-\tif (p == _M_buf)\n-\t  _M_buf = 0;\n-      }\n-    if (_M_buf)\n-      _M_free(_M_buf);\n+      _M_free(eback());\n   }\n \n   void \n@@ -169,8 +164,6 @@ namespace std\n \t\told_get_offset = gptr() - eback();\n \t      }\n \t    \n-\t    _M_buf = buf;\n-\t    _M_buf_size = _M_buf_size_opt = new_size;\n \t    setp(buf, buf + new_size);\n \t    pbump(old_size);\n "}, {"sha": "267795acb752948b58ef543d916102891861d993", "filename": "libstdc++-v3/testsuite/19_diagnostics/stdexceptions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc?ref=49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "patch": "@@ -58,7 +58,6 @@ class fuzzy_logic : public std::logic_error\n void test03()\n {\n   bool test = true;\n-\n   try\n     { throw fuzzy_logic(); }\n   catch(const fuzzy_logic& obj)\n@@ -79,6 +78,7 @@ void allocate_on_stack(void)\n }\n void test04()\n {\n+  bool test = true;\n   const std::string s(\"CA ISO emergency once again:immediate power down\");\n   const char* strlit1 = \"wish I lived in Palo Alto\";\n   const char* strlit2 = \"...or Santa Barbara\";"}, {"sha": "c0e7be31b9e301e576ea1c30a442662ca41a7201", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "patch": "@@ -36,9 +36,11 @@ RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n AM_RUNTESTFLAGS =\n RUNTESTFLAGS =\n \n-CXX = @glibcpp_CXX@ @GLIBCPP_INCLUDES@\n+CXX = @glibcpp_CXX@ \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-INCLUDES = @TOPLEVEL_INCLUDES@\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n \n noinst_LIBRARIES = libv3test.a\n "}, {"sha": "939c0ee8074848b696374a0659c497a57317f367", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "patch": "@@ -148,9 +148,12 @@ RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n AM_RUNTESTFLAGS = \n RUNTESTFLAGS = \n \n-CXX = @glibcpp_CXX@ @GLIBCPP_INCLUDES@\n+CXX = @glibcpp_CXX@ \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-INCLUDES = @TOPLEVEL_INCLUDES@\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n+\n \n noinst_LIBRARIES = libv3test.a\n "}, {"sha": "107041041f7be6f9ab7642397ba7d90506b54535", "filename": "libstdc++-v3/testsuite/backward/strstream_members.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fstrstream_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fstrstream_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fstrstream_members.cc?ref=49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "patch": "@@ -29,12 +29,21 @@ int test01()\n    for (unsigned i=0 ; i!= 1000 ; ++i)\n       s << i << std::endl;\n    s << std::ends;\n-\n    return 0;\n }\n \n+\n+int test02()\n+{\n+  std::ostrstream buf;\n+  buf << std::ends;\n+  char *s = buf.str ();\n+  delete [] s;\n+}\n+\n int main()\n {\n   test01();\n+  test02();\n   return 0;\n }"}, {"sha": "8cf50401c2d3da98dec87e8caf0690fc7d585adc", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bc23b7f971a6a8b24d9bfec359e837b069a8d7/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=49bc23b7f971a6a8b24d9bfec359e837b069a8d7", "patch": "@@ -58,6 +58,7 @@\n #define _GLIBCPP_TESTSUITE_HOOKS_H\n \n #include <bits/c++config.h>\n+#include <bits/functexcept.h>\n #include <cstddef>\n \n #ifdef DEBUG_ASSERT\n@@ -113,7 +114,8 @@ class gnu_copy_tracker\n     : itsId(rhs.id()), willThrow(rhs.willThrow)\n     {\n       ++itsCopyCount;\n-      if (willThrow) throw \"copy tracker exception\";\n+      if (willThrow) \n+\t__throw_exception_again \"copy tracker exception\";\n     }\n \n     gnu_copy_tracker& operator=(const gnu_copy_tracker& rhs)"}]}