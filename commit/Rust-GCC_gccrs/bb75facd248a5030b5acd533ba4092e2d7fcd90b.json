{"sha": "bb75facd248a5030b5acd533ba4092e2d7fcd90b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI3NWZhY2QyNDhhNTAzMGI1YWNkNTMzYmE0MDkyZTJkN2ZjZDkwYg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2017-09-15T20:49:02Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2017-09-15T20:49:02Z"}, "message": "Implement C11 excess precision semantics for conversions (PR c/82071).\n\nC11 semantics for excess precision (from N1531) are that an implicit\nconversion (from the usual arithmetic conversions, not by assignment)\nfrom integer to floating point has a result in the corresponding\nevaluation format of that floating-point type, so possibly with excess\nprecision (whereas a cast or conversion by assignment from integer to\nfloating point must produce a value without excess range or precision,\nas always).  This patch makes GCC support those semantics if\nflag_isoc11 (which in turn means that conditional expressions need to\nsupport generating a result with excess precision even if neither\noperand had excess precision).\n\nC99 is less than entirely clear in this regard, but my reading as\noutlined at <https://gcc.gnu.org/ml/gcc-patches/2008-11/msg00105.html>\nis that the results of conversions from integer to floating-point\ntypes are always expected to be representable in the target type\nwithout excess precision, and this patch conservatively keeps these\nsemantics for pre-C11 (i.e. if an older standard is explicitly\nselected).\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\n\tPR c/82071\n\ngcc/c:\n\t* c-typeck.c (ep_convert_and_check): Just call convert_and_check\n\tfor C11.\n\t(build_conditional_expr): For C11, generate result with excess\n\tprecision when one argument is an integer and the other is of a\n\ttype using excess precision.\n\ngcc/testsuite:\n\t* gcc.target/i386/excess-precision-8.c: New test.\n\nFrom-SVN: r252847", "tree": {"sha": "a2d582df96776e5ee98ca319d118ce0de2bbb2d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2d582df96776e5ee98ca319d118ce0de2bbb2d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb75facd248a5030b5acd533ba4092e2d7fcd90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb75facd248a5030b5acd533ba4092e2d7fcd90b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb75facd248a5030b5acd533ba4092e2d7fcd90b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb75facd248a5030b5acd533ba4092e2d7fcd90b/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c01df3c86f72656e44ec1952b4e8019961ed7a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01df3c86f72656e44ec1952b4e8019961ed7a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01df3c86f72656e44ec1952b4e8019961ed7a4a"}], "stats": {"total": 105, "additions": 103, "deletions": 2}, "files": [{"sha": "742867a6ad9fe53aa30e018224214c2f1da50c1e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb75facd248a5030b5acd533ba4092e2d7fcd90b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb75facd248a5030b5acd533ba4092e2d7fcd90b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bb75facd248a5030b5acd533ba4092e2d7fcd90b", "patch": "@@ -1,3 +1,12 @@\n+2017-09-15  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/82071\n+\t* c-typeck.c (ep_convert_and_check): Just call convert_and_check\n+\tfor C11.\n+\t(build_conditional_expr): For C11, generate result with excess\n+\tprecision when one argument is an integer and the other is of a\n+\ttype using excess precision.\n+\n 2017-09-15  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* c-typeck.c (build_c_cast): Implement -Wcast-align=strict."}, {"sha": "73e74602f595b0a581ff7ed34f8aceff4cbe3518", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb75facd248a5030b5acd533ba4092e2d7fcd90b/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb75facd248a5030b5acd533ba4092e2d7fcd90b/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=bb75facd248a5030b5acd533ba4092e2d7fcd90b", "patch": "@@ -4866,7 +4866,9 @@ ep_convert_and_check (location_t loc, tree type, tree expr,\n   if (TREE_TYPE (expr) == type)\n     return expr;\n \n-  if (!semantic_type)\n+  /* For C11, integer conversions may have results with excess\n+     precision.  */\n+  if (flag_isoc11 || !semantic_type)\n     return convert_and_check (loc, type, expr);\n \n   if (TREE_CODE (TREE_TYPE (expr)) == INTEGER_TYPE\n@@ -4994,7 +4996,31 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n \t   && (code2 == INTEGER_TYPE || code2 == REAL_TYPE\n \t       || code2 == COMPLEX_TYPE))\n     {\n-      result_type = c_common_type (type1, type2);\n+      /* In C11, a conditional expression between a floating-point\n+\t type and an integer type should convert the integer type to\n+\t the evaluation format of the floating-point type, with\n+\t possible excess precision.  */\n+      tree eptype1 = type1;\n+      tree eptype2 = type2;\n+      if (flag_isoc11)\n+\t{\n+\t  tree eptype;\n+\t  if (ANY_INTEGRAL_TYPE_P (type1)\n+\t      && (eptype = excess_precision_type (type2)) != NULL_TREE)\n+\t    {\n+\t      eptype2 = eptype;\n+\t      if (!semantic_result_type)\n+\t\tsemantic_result_type = c_common_type (type1, type2);\n+\t    }\n+\t  else if (ANY_INTEGRAL_TYPE_P (type2)\n+\t\t   && (eptype = excess_precision_type (type1)) != NULL_TREE)\n+\t    {\n+\t      eptype1 = eptype;\n+\t      if (!semantic_result_type)\n+\t\tsemantic_result_type = c_common_type (type1, type2);\n+\t    }\n+\t}\n+      result_type = c_common_type (eptype1, eptype2);\n       if (result_type == error_mark_node)\n \treturn error_mark_node;\n       do_warn_double_promotion (result_type, type1, type2,"}, {"sha": "b9bb9c62a8ec3bfaa74ef4ab33587f537c43772d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb75facd248a5030b5acd533ba4092e2d7fcd90b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb75facd248a5030b5acd533ba4092e2d7fcd90b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb75facd248a5030b5acd533ba4092e2d7fcd90b", "patch": "@@ -1,3 +1,8 @@\n+2017-09-15  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/82071\n+\t* gcc.target/i386/excess-precision-8.c: New test.\n+\n 2017-09-15  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "c0a31ed5f4ecf12203c13378ac136d76100ac076", "filename": "gcc/testsuite/gcc.target/i386/excess-precision-8.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb75facd248a5030b5acd533ba4092e2d7fcd90b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb75facd248a5030b5acd533ba4092e2d7fcd90b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-8.c?ref=bb75facd248a5030b5acd533ba4092e2d7fcd90b", "patch": "@@ -0,0 +1,61 @@\n+/* Excess precision tests.  Test C11 semantics for conversions from\n+   integers to floating point: no excess precision for either explicit\n+   conversions, but excess precision for implicit conversions.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c11 -mfpmath=387 -fexcess-precision=standard\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  float f = 1.0f;\n+  int i;\n+\n+  i = 0x10001234;\n+  if ((float) i != 0x10001240)\n+    abort ();\n+\n+  i = 0x10001234;\n+  i += f;\n+  if (i != 0x10001235)\n+    abort ();\n+\n+  i = 0x10001234;\n+  i += 1.0f;\n+  if (i != 0x10001235)\n+    abort ();\n+\n+  i = 0x10001234;\n+  i = i + f;\n+  if (i != 0x10001235)\n+    abort ();\n+\n+  i = 0x10001234;\n+  i = i + 1.0f;\n+  if (i != 0x10001235)\n+    abort ();\n+\n+  i = 0x10001235;\n+  i = (1 ? i : 1.0f);\n+  if (i != 0x10001235)\n+    abort ();\n+\n+  i = 0x10001235;\n+  i = (1 ? i : f);\n+  if (i != 0x10001235)\n+    abort ();\n+\n+  i = 0x10001235;\n+  i = (0 ? 1.0f :i);\n+  if (i != 0x10001235)\n+    abort ();\n+\n+  i = 0x10001235;\n+  i = (0 ? f : i);\n+  if (i != 0x10001235)\n+    abort ();\n+\n+  exit (0);\n+}"}]}