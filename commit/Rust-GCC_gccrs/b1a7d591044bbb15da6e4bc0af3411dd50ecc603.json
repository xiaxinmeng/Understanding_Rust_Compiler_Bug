{"sha": "b1a7d591044bbb15da6e4bc0af3411dd50ecc603", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhN2Q1OTEwNDRiYmIxNWRhNmU0YmMwYWYzNDExZGQ1MGVjYzYwMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-05-11T18:11:22Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-05-11T18:11:22Z"}, "message": "Add missing comments pointed out by Andreas Schwab.\n\n\t* regmove.c (fixup_match_2, find_matches, regmove_profitable):\n\tAdd explanatory comments.\n\nFrom-SVN: r19677", "tree": {"sha": "dd3fdadca628c1bf3fe5e14f12741cfc87ad4b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd3fdadca628c1bf3fe5e14f12741cfc87ad4b06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1a7d591044bbb15da6e4bc0af3411dd50ecc603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a7d591044bbb15da6e4bc0af3411dd50ecc603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a7d591044bbb15da6e4bc0af3411dd50ecc603", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a7d591044bbb15da6e4bc0af3411dd50ecc603/comments", "author": null, "committer": null, "parents": [{"sha": "50324922d7dd933b53c6a18a0d83b997af215571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50324922d7dd933b53c6a18a0d83b997af215571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50324922d7dd933b53c6a18a0d83b997af215571"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "5f68e1b11a8b6e0b498d0837d46b9ff5efed0438", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a7d591044bbb15da6e4bc0af3411dd50ecc603/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a7d591044bbb15da6e4bc0af3411dd50ecc603/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1a7d591044bbb15da6e4bc0af3411dd50ecc603", "patch": "@@ -1,5 +1,8 @@\n Mon May 11 17:43:03 1998  Jim Wilson  <wilson@cygnus.com>\n \n+\t* regmove.c (fixup_match_2, find_matches, regmove_profitable):\n+\tAdd explanatory comments.\n+\n \t* sparc.h (SPARC_INCOMING_INT_ARG_FIRST): Support TARGET_FLAT.\n \n Mon May 11 17:24:27 1998  Richard Henderson  <rth@cygnus.com>"}, {"sha": "75798b043e9037e00aea13cde965f6dc0ec14880", "filename": "gcc/regmove.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a7d591044bbb15da6e4bc0af3411dd50ecc603/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a7d591044bbb15da6e4bc0af3411dd50ecc603/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=b1a7d591044bbb15da6e4bc0af3411dd50ecc603", "patch": "@@ -570,8 +570,24 @@ reg_is_remote_constant_p (reg, insn, first)\n   return 0;\n }\n \n+/* INSN is adding a CONST_INT to a REG.  We search backwards looking for\n+   another add immediate instruction with the same source and dest registers,\n+   and if we find one, we change INSN to an increment, and return 1.  If\n+   no changes are made, we return 0.\n+\n+   This changes\n+     (set (reg100) (plus reg1 offset1))\n+     ...\n+     (set (reg100) (plus reg1 offset2))\n+   to\n+     (set (reg100) (plus reg1 offset1))\n+     ...\n+     (set (reg100) (plus reg100 offset2-offset1))  */\n+\n+/* ??? What does this comment mean?  */\n /* cse disrupts preincrement / postdecrement squences when it finds a\n    hard register as ultimate source, like the frame pointer.  */\n+\n int\n fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n      rtx insn, dst, src, offset;\n@@ -1143,6 +1159,11 @@ regmove_optimize (f, nregs, regmove_dump_file)\n #endif /* REGISTER_CONSTRAINTS */\n }\n \n+/* Returns the INSN_CODE for INSN if its pattern has matching constraints for\n+   any operand.  Returns -1 if INSN can't be recognized, or if the alternative\n+   can't be determined.\n+\n+   Initialize the info in MATCHP based on the constraints.  */\n \n static int\n find_matches (insn, matchp)\n@@ -1711,7 +1732,10 @@ stable_but_for_p (x, src, dst)\n     }\n }\n \n-/* Test if regmove seems profitable for this target.  */\n+/* Test if regmove seems profitable for this target.  Regmove is useful only\n+   if some common patterns are two address, i.e. require matching constraints,\n+   so we check that condition here.  */\n+\n int\n regmove_profitable_p ()\n {"}]}