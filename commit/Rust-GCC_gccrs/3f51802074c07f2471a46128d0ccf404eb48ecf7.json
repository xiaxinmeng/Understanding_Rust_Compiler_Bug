{"sha": "3f51802074c07f2471a46128d0ccf404eb48ecf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1MTgwMjA3NGMwN2YyNDcxYTQ2MTI4ZDBjY2Y0MDRlYjQ4ZWNmNw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-04-10T09:44:37Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-10T09:44:37Z"}, "message": "emit-rtl.c (operand_subword): Properly handle CONST_INTs for 64x32 cross builds.\n\n        * emit-rtl.c (operand_subword): Properly handle CONST_INTs for\n        64x32 cross builds.\n\nFrom-SVN: r19081", "tree": {"sha": "3e98f15426c4edd2424fe6b95c25e1fa9fd1286f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e98f15426c4edd2424fe6b95c25e1fa9fd1286f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f51802074c07f2471a46128d0ccf404eb48ecf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f51802074c07f2471a46128d0ccf404eb48ecf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f51802074c07f2471a46128d0ccf404eb48ecf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f51802074c07f2471a46128d0ccf404eb48ecf7/comments", "author": null, "committer": null, "parents": [{"sha": "7ef3af7613339d05ae0a651c676d0959e0c07895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef3af7613339d05ae0a651c676d0959e0c07895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ef3af7613339d05ae0a651c676d0959e0c07895"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "b12483aff56c510bf4c29fa798c773d17aee1a53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f51802074c07f2471a46128d0ccf404eb48ecf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f51802074c07f2471a46128d0ccf404eb48ecf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f51802074c07f2471a46128d0ccf404eb48ecf7", "patch": "@@ -1,4 +1,7 @@\n-Fri Apr 10 01:29:02 1998  Jeffrey A Law  (law@cygnus.com)\n+Fri Apr 10 10:43:41 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* emit-rtl.c (operand_subword): Properly handle CONST_INTs for\n+\t64x32 cross builds.\n \n \t* configure.in: Handle --with-fast-fixincludes.\n \t(fixincludes): If --with-fast-fixincludes, then use a different"}, {"sha": "ef795235c775bdffb7ee675451a1a38d2709f3f1", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f51802074c07f2471a46128d0ccf404eb48ecf7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f51802074c07f2471a46128d0ccf404eb48ecf7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3f51802074c07f2471a46128d0ccf404eb48ecf7", "patch": "@@ -1331,11 +1331,30 @@ operand_subword (op, i, validate_address, mode)\n \t : (GET_CODE (op) == CONST_INT\n \t    ? (INTVAL (op) < 0 ? ~0 : 0) : CONST_DOUBLE_HIGH (op)));\n \n-  /* If BITS_PER_WORD is smaller than an int, get the appropriate bits.  */\n+  /* Get the value we want into the low bits of val.  */\n   if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT)\n-    val = ((val >> ((i % size_ratio) * BITS_PER_WORD))\n-\t   & (((HOST_WIDE_INT) 1\n-\t       << (BITS_PER_WORD % HOST_BITS_PER_WIDE_INT)) - 1));\n+    val = ((val >> ((i % size_ratio) * BITS_PER_WORD)));\n+\n+  /* Clear the bits that don't belong in our mode, unless they and our sign\n+     bit are all one.  So we get either a reasonable negative value or a\n+     reasonable unsigned value for this mode.  */\n+  if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT\n+      && ((val & ((HOST_WIDE_INT) (-1) << (BITS_PER_WORD - 1)))\n+          != ((HOST_WIDE_INT) (-1) << (BITS_PER_WORD - 1))))\n+    val &= ((HOST_WIDE_INT) 1 << BITS_PER_WORD) - 1;\n+\n+  /* If this would be an entire word for the target, but is not for\n+     the host, then sign-extend on the host so that the number will look\n+     the same way on the host that it would on the target.\n+\n+     For example, when building a 64 bit alpha hosted 32 bit sparc\n+     targeted compiler, then we want the 32 bit unsigned value -1 to be\n+     represented as a 64 bit value -1, and not as 0x00000000ffffffff.\n+     The later confuses the sparc backend.  */\n+\n+  if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT\n+      && (val & ((HOST_WIDE_INT) 1 << (BITS_PER_WORD - 1))))\n+    val |= ((HOST_WIDE_INT) (-1) << BITS_PER_WORD);\n \n   return GEN_INT (val);\n }"}]}