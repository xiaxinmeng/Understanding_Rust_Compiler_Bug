{"sha": "6052bef039abf0676722cd1df243c1cf5ab99431", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1MmJlZjAzOWFiZjA2NzY3MjJjZDFkZjI0M2MxY2Y1YWI5OTQzMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-26T05:35:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-26T05:35:13Z"}, "message": "c-parse.in (yyoverflow): New.\n\n\t* c-parse.in (yyoverflow): New.\n\t* cp/parse.y (yyoverflow): New.\n\t* g++.dg/parse/stack1.C: New.\n\t* gcc.dg/20020425-1.c: New.\n\nFrom-SVN: r52779", "tree": {"sha": "8cb83d3dda7305192e25c976afb951b1ed9e5357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cb83d3dda7305192e25c976afb951b1ed9e5357"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6052bef039abf0676722cd1df243c1cf5ab99431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6052bef039abf0676722cd1df243c1cf5ab99431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6052bef039abf0676722cd1df243c1cf5ab99431", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6052bef039abf0676722cd1df243c1cf5ab99431/comments", "author": null, "committer": null, "parents": [{"sha": "5c5b22838958187f83bf60d0394cc06942796646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5b22838958187f83bf60d0394cc06942796646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5b22838958187f83bf60d0394cc06942796646"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "87eb96191bdb345b999408f390979df4bc898868", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6052bef039abf0676722cd1df243c1cf5ab99431", "patch": "@@ -1,3 +1,8 @@\n+2002-04-25  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c/2161\n+\t* c-parse.in (yyoverflow): New.\n+\n 2002-04-25  Richard Henderson  <rth@redhat.com>\n \n \tPR c/2098"}, {"sha": "f3a3da8f9995a66a531c9f06959ee748061d77ee", "filename": "gcc/c-parse.in", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=6052bef039abf0676722cd1df243c1cf5ab99431", "patch": "@@ -61,6 +61,41 @@ end ifobjc\n \n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n+\n+/* Like the default stack expander, except (1) use realloc when possible,\n+   and (2) impose no hard maxiumum on stack size.  */\n+#define yyoverflow(MSG, SS, SSSIZE, VS, VSSIZE, YYSSZ)\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  size_t newsize;\t\t\t\t\t\t\t\\\n+  short *newss;\t\t\t\t\t\t\t\t\\\n+  YYSTYPE *newvs;\t\t\t\t\t\t\t\\\n+  newsize = *(YYSSZ) *= 2;\t\t\t\t\t\t\\\n+  if (yyfree_stacks)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      newss = (short *)\t\t\t\t\t\t\t\\\n+\treally_call_realloc (*(SS), newsize * sizeof (short));\t\t\\\n+      newvs = (YYSTYPE *)\t\t\t\t\t\t\\\n+\treally_call_realloc (*(VS), newsize * sizeof (YYSTYPE));\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      newss = (short *) really_call_malloc (newsize * sizeof (short));\t\\\n+      if (newss)\t\t\t\t\t\t\t\\\n+        memcpy (newss, *(SS), (SSSIZE));\t\t\t\t\\\n+      newvs = (YYSTYPE *) really_call_malloc (newsize * sizeof (YYSTYPE)); \\\n+      if (newvs)\t\t\t\t\t\t\t\\\n+        memcpy (newvs, *(VS), (VSSIZE));\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (!newss || !newvs)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      yyerror (MSG);\t\t\t\t\t\t\t\\\n+      return 2;\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  yyfree_stacks = 1;\t\t\t\t\t\t\t\\\n+  *(SS) = newss;\t\t\t\t\t\t\t\\\n+  *(VS) = newvs;\t\t\t\t\t\t\t\\\n+} while (0)\n+\n %}\n \n %start program"}, {"sha": "38b2f2255f3b2578a38446febf44306abd2cc2e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6052bef039abf0676722cd1df243c1cf5ab99431", "patch": "@@ -1,3 +1,8 @@\n+2002-04-25  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c/2161\n+\t* parse.y (yyoverflow): New.\n+\n 2002-04-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/5607"}, {"sha": "5454353d8744092d69166ea7c9550132776581e1", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=6052bef039abf0676722cd1df243c1cf5ab99431", "patch": "@@ -48,6 +48,40 @@ extern struct obstack permanent_obstack;\n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n \n+/* Like the default stack expander, except (1) use realloc when possible,\n+   and (2) impose no hard maxiumum on stack size.  */\n+#define yyoverflow(MSG, SS, SSSIZE, VS, VSSIZE, YYSSZ)\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  size_t newsize;\t\t\t\t\t\t\t\\\n+  short *newss;\t\t\t\t\t\t\t\t\\\n+  YYSTYPE *newvs;\t\t\t\t\t\t\t\\\n+  newsize = *(YYSSZ) *= 2;\t\t\t\t\t\t\\\n+  if (yyfree_stacks)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      newss = (short *)\t\t\t\t\t\t\t\\\n+\treally_call_realloc (*(SS), newsize * sizeof (short));\t\t\\\n+      newvs = (YYSTYPE *)\t\t\t\t\t\t\\\n+\treally_call_realloc (*(VS), newsize * sizeof (YYSTYPE));\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      newss = (short *) really_call_malloc (newsize * sizeof (short));\t\\\n+      if (newss)\t\t\t\t\t\t\t\\\n+        memcpy (newss, *(SS), (SSSIZE));\t\t\t\t\\\n+      newvs = (YYSTYPE *) really_call_malloc (newsize * sizeof (YYSTYPE)); \\\n+      if (newvs)\t\t\t\t\t\t\t\\\n+        memcpy (newvs, *(VS), (VSSIZE));\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (!newss || !newvs)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      yyerror (MSG);\t\t\t\t\t\t\t\\\n+      return 2;\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  yyfree_stacks = 1;\t\t\t\t\t\t\t\\\n+  *(SS) = newss;\t\t\t\t\t\t\t\\\n+  *(VS) = newvs;\t\t\t\t\t\t\t\\\n+} while (0)\n+\n #define OP0(NODE) (TREE_OPERAND (NODE, 0))\n #define OP1(NODE) (TREE_OPERAND (NODE, 1))\n "}, {"sha": "ac26e60069a66103526da5fe8abded91a7386ed8", "filename": "gcc/testsuite/g++.dg/parse/stack1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fstack1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fstack1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fstack1.C?ref=6052bef039abf0676722cd1df243c1cf5ab99431", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/2161: parser stack overflow.  */\n+/* { dg-do compile } */\n+\n+#define ONE\telse if (0) { }\n+#define TEN\tONE ONE ONE ONE ONE ONE ONE ONE ONE ONE\n+#define HUN\tTEN TEN TEN TEN TEN TEN TEN TEN TEN TEN\n+#define THOU\tHUN HUN HUN HUN HUN HUN HUN HUN HUN HUN\n+\n+void foo()\n+{\n+  if (0) { }\n+  /* 11,000 else if's.  */\n+  THOU THOU THOU THOU THOU THOU THOU THOU THOU THOU THOU\n+}"}, {"sha": "ac26e60069a66103526da5fe8abded91a7386ed8", "filename": "gcc/testsuite/gcc.dg/20020425-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2Ftestsuite%2Fgcc.dg%2F20020425-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052bef039abf0676722cd1df243c1cf5ab99431/gcc%2Ftestsuite%2Fgcc.dg%2F20020425-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020425-1.c?ref=6052bef039abf0676722cd1df243c1cf5ab99431", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/2161: parser stack overflow.  */\n+/* { dg-do compile } */\n+\n+#define ONE\telse if (0) { }\n+#define TEN\tONE ONE ONE ONE ONE ONE ONE ONE ONE ONE\n+#define HUN\tTEN TEN TEN TEN TEN TEN TEN TEN TEN TEN\n+#define THOU\tHUN HUN HUN HUN HUN HUN HUN HUN HUN HUN\n+\n+void foo()\n+{\n+  if (0) { }\n+  /* 11,000 else if's.  */\n+  THOU THOU THOU THOU THOU THOU THOU THOU THOU THOU THOU\n+}"}]}