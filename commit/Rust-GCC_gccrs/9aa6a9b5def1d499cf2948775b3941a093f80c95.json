{"sha": "9aa6a9b5def1d499cf2948775b3941a093f80c95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFhNmE5YjVkZWYxZDQ5OWNmMjk0ODc3NWIzOTQxYTA5M2Y4MGM5NQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-26T23:55:23Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-26T23:55:23Z"}, "message": "Improve sparc setcc generation and add testcases.\n\ngcc/\n\n\t* config/sparc/sparc.c (emit_scc_insn): Do not try v9 sequences until\n\tLEU/LTU/GEU/GTU is attempted.\n\t* config/sparc/sparc.md (*neg_snesi_sign_extend): New 64-bit insn\n\tand split.\n\t(*neg_seqsi_sign_extend): Likewise.\n\t(*sltu_extend_sp64, *neg_sltu_extend_sp64, *sgeu_extend_sp64,\n\t*neg_sgeu_extend_sp64): New insns.\n\ngcc/testsuite/\n\n\t* gcc.target/sparc/setcc-1.c: New test.\n\t* gcc.target/sparc/setcc-2.c: New test.\n\nFrom-SVN: r180550", "tree": {"sha": "e5135fa3732ec8fc08302acc0fa5e5b316c4c863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5135fa3732ec8fc08302acc0fa5e5b316c4c863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa6a9b5def1d499cf2948775b3941a093f80c95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa6a9b5def1d499cf2948775b3941a093f80c95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa6a9b5def1d499cf2948775b3941a093f80c95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa6a9b5def1d499cf2948775b3941a093f80c95/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28c2f60e96a3dd100a85b32a91f7a1c0c408fd39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c2f60e96a3dd100a85b32a91f7a1c0c408fd39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c2f60e96a3dd100a85b32a91f7a1c0c408fd39"}], "stats": {"total": 164, "additions": 156, "deletions": 8}, "files": [{"sha": "3a51510df93453cb37b7551d007b24d87688dac5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9aa6a9b5def1d499cf2948775b3941a093f80c95", "patch": "@@ -1,5 +1,13 @@\n 2011-10-26  David S. Miller  <davem@davemloft.net>\n \n+\t* config/sparc/sparc.c (emit_scc_insn): Do not try v9 sequences until\n+\tLEU/LTU/GEU/GTU is attempted.\n+\t* config/sparc/sparc.md (*neg_snesi_sign_extend): New 64-bit insn\n+\tand split.\n+\t(*neg_seqsi_sign_extend): Likewise.\n+\t(*sltu_extend_sp64, *neg_sltu_extend_sp64, *sgeu_extend_sp64,\n+\t*neg_sgeu_extend_sp64): New insns.\n+\n \t* config/sparc/sparc-protos.h (sparc_expand_conditional_move): Declare.\n \t* config/sparc/sparc.md (mov<I:mode>cc, mov<F:mode>cc): Call it.\n \t(*mov<I:mode>_cc_v9): Normalize to expect operand 0 always in operand 4."}, {"sha": "80e05a61e4794f4be9d4b279f186915fb1fa6b3f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9aa6a9b5def1d499cf2948775b3941a093f80c95", "patch": "@@ -2541,14 +2541,6 @@ emit_scc_insn (rtx operands[])\n         }\n     }\n \n-  /* For the rest, on v9 we can use conditional moves.  */\n-\n-  if (TARGET_V9)\n-    {\n-      if (gen_v9_scc (operands[0], code, x, y))\n-        return true;\n-    }\n-\n   /* We can do LTU and GEU using the addx/subx instructions too.  And\n      for GTU/LEU, if both operands are registers swap them and fall\n      back to the easy case.  */\n@@ -2573,6 +2565,12 @@ emit_scc_insn (rtx operands[])\n       return true;\n     }\n \n+  /* All the posibilities to use addx/subx based sequences has been\n+     exhausted, try for a 3 instruction sequence using v9 conditional\n+     moves.  */\n+  if (TARGET_V9 && gen_v9_scc (operands[0], code, x, y))\n+    return true;\n+\n   /* Nope, do branches.  */\n   return false;\n }"}, {"sha": "2b4b2bb54a43e1408c69ca0f2bd2ace4ecfa1020", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=9aa6a9b5def1d499cf2948775b3941a093f80c95", "patch": "@@ -713,6 +713,22 @@\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n+(define_insn_and_split \"*neg_snesi_sign_extend\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (neg:DI (ne:DI (match_operand:SI 1 \"register_operand\" \"r\")\n+                      (const_int 0))))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_ARCH64\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (minus:SI (const_int 0)\n+                                                     (match_dup 1))\n+                                           (const_int 0)))\n+   (set (match_dup 0) (sign_extend:DI (neg:SI (ltu:SI (reg:CC CC_REG)\n+                                                      (const_int 0)))))]\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n+\n (define_insn_and_split \"*snedi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n         (ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n@@ -804,6 +820,21 @@\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n+(define_insn_and_split \"*neg_seqsi_sign_extend\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(neg:DI (eq:DI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t       (const_int 0))))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_ARCH64\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC_NOOV CC_REG) (compare:CC_NOOV (neg:SI (match_dup 1))\n+\t\t\t\t\t   (const_int 0)))\n+   (set (match_dup 0) (sign_extend:DI (neg:SI (geu:SI (reg:CC CC_REG)\n+                                                      (const_int 0)))))]\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n+\n (define_insn_and_split \"*seqdi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n         (eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n@@ -928,13 +959,27 @@\n   \"addx\\t%%g0, 0, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n+(define_insn \"*sltu_extend_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(ltu:DI (reg:CC CC_REG) (const_int 0)))]\n+  \"TARGET_ARCH64\"\n+  \"addx\\t%%g0, 0, %0\"\n+  [(set_attr \"type\" \"ialuX\")])\n+\n (define_insn \"*neg_sltu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (ltu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"\"\n   \"subx\\t%%g0, 0, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n+(define_insn \"*neg_sltu_extend_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI (neg:SI (ltu:SI (reg:CC CC_REG) (const_int 0)))))]\n+  \"TARGET_ARCH64\"\n+  \"subx\\t%%g0, 0, %0\"\n+  [(set_attr \"type\" \"ialuX\")])\n+\n ;; ??? Combine should canonicalize these next two to the same pattern.\n (define_insn \"*neg_sltu_minus_x\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -959,13 +1004,27 @@\n   \"subx\\t%%g0, -1, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n+(define_insn \"*sgeu_extend_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(geu:DI (reg:CC CC_REG) (const_int 0)))]\n+  \"TARGET_ARCH64\"\n+  \"subx\\t%%g0, -1, %0\"\n+  [(set_attr \"type\" \"ialuX\")])\n+\n (define_insn \"*neg_sgeu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (geu:SI (reg:CC CC_REG) (const_int 0))))]\n   \"\"\n   \"addx\\t%%g0, -1, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n+(define_insn \"*neg_sgeu_extend_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI (neg:SI (geu:SI (reg:CC CC_REG) (const_int 0)))))]\n+  \"TARGET_ARCH64\"\n+  \"addx\\t%%g0, -1, %0\"\n+  [(set_attr \"type\" \"ialuX\")])\n+\n ;; We can also do (x + ((unsigned) i >= 0)) and related, so put them in.\n ;; ??? The addx/subx insns use the 32 bit carry flag so there are no DImode\n ;; versions for v9."}, {"sha": "2879dfe06f6ef867f175a614917bc8f40a3a92d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9aa6a9b5def1d499cf2948775b3941a093f80c95", "patch": "@@ -1,3 +1,8 @@\n+2011-10-26  David S. Miller  <davem@davemloft.net>\n+\n+\t* gcc.target/sparc/setcc-1.c: New test.\n+\t* gcc.target/sparc/setcc-2.c: New test.\n+\n 2011-10-26  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/tls/thr-cse-1.c: For i?86-*-mingw*, check for multiple"}, {"sha": "6065bbb13262909e4a75b6453f3ab2c86fb1da38", "filename": "gcc/testsuite/gcc.target/sparc/setcc-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-1.c?ref=9aa6a9b5def1d499cf2948775b3941a093f80c95", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+int neq (int a, int b)\n+{\n+  return a != b;\n+}\n+\n+int eq (int a, int b)\n+{\n+  return a == b;\n+}\n+\n+int lt (unsigned int a, unsigned int b)\n+{\n+  return a < b;\n+}\n+\n+int leq (unsigned int a, unsigned int b)\n+{\n+  return a <= b;\n+}\n+\n+int geq (unsigned int a, unsigned int b)\n+{\n+  return a >= b;\n+}\n+\n+int gt (unsigned int a, unsigned int b)\n+{\n+  return a > b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"xor\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"subcc\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"addx\\t%\" 3 } } */\n+/* { dg-final { scan-assembler-times \"subx\\t%\" 3 } } */\n+/* { dg-final { scan-assembler-times \"cmp\\t%\" 4 } } */\n+/* { dg-final { scan-assembler-not \"sra\\t%\" { target lp64 } } } */"}, {"sha": "cc17c65f0d0828d10ca23751b22a41f4a6eb0088", "filename": "gcc/testsuite/gcc.target/sparc/setcc-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6a9b5def1d499cf2948775b3941a093f80c95/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-2.c?ref=9aa6a9b5def1d499cf2948775b3941a093f80c95", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+int neq (int a, int b)\n+{\n+  return -(a != b);\n+}\n+\n+int eq (int a, int b)\n+{\n+  return -(a == b);\n+}\n+\n+int lt (unsigned int a, unsigned int b)\n+{\n+  return -(a < b);\n+}\n+\n+int leq (unsigned int a, unsigned int b)\n+{\n+  return -(a <= b);\n+}\n+\n+int geq (unsigned int a, unsigned int b)\n+{\n+  return -(a >= b);\n+}\n+\n+int gt (unsigned int a, unsigned int b)\n+{\n+  return -(a > b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xor\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"subcc\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"addx\\t%\" 3 } } */\n+/* { dg-final { scan-assembler-times \"subx\\t%\" 3 } } */\n+/* { dg-final { scan-assembler-times \"cmp\\t%\" 4 } } */\n+/* { dg-final { scan-assembler-not \"sra\\t%\" { target lp64 } } } */"}]}