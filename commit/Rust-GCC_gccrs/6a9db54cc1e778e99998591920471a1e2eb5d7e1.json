{"sha": "6a9db54cc1e778e99998591920471a1e2eb5d7e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE5ZGI1NGNjMWU3NzhlOTk5OTg1OTE5MjA0NzFhMWUyZWI1ZDdlMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-09-05T08:28:20Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-09-05T08:28:20Z"}, "message": "trans.c (Call_to_gnu): If this is a function call and there is no target...\n\n\t* gcc-interface/trans.c (Call_to_gnu): If this is a function call and\n\tthere is no target, do not create a temporary for the return value for\n\tan allocator either.\n\nFrom-SVN: r251695", "tree": {"sha": "0c347b326ecd71cb92e68581ac2e3184f131b3dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c347b326ecd71cb92e68581ac2e3184f131b3dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a9db54cc1e778e99998591920471a1e2eb5d7e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9db54cc1e778e99998591920471a1e2eb5d7e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9db54cc1e778e99998591920471a1e2eb5d7e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9db54cc1e778e99998591920471a1e2eb5d7e1/comments", "author": null, "committer": null, "parents": [{"sha": "a0f8cad6254428d0f9b95f7328aa0c20207aa5a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f8cad6254428d0f9b95f7328aa0c20207aa5a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0f8cad6254428d0f9b95f7328aa0c20207aa5a9"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "9250acf0b9e6e8eeaaef631b22a9815c2cfe4890", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9db54cc1e778e99998591920471a1e2eb5d7e1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9db54cc1e778e99998591920471a1e2eb5d7e1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6a9db54cc1e778e99998591920471a1e2eb5d7e1", "patch": "@@ -1,3 +1,9 @@\n+2017-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Call_to_gnu): If this is a function call and\n+\tthere is no target, do not create a temporary for the return value for\n+\tan allocator either.\n+\n 2017-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (pos_to_constructor): Skip conversions to an"}, {"sha": "eb777038234ec3eee226f5a150bf31a0d7a24754", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9db54cc1e778e99998591920471a1e2eb5d7e1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9db54cc1e778e99998591920471a1e2eb5d7e1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=6a9db54cc1e778e99998591920471a1e2eb5d7e1", "patch": "@@ -4338,11 +4338,11 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t  parameters.\n \n        2. There is no target and the call is made for neither an object nor a\n-\t  renaming declaration, nor a return statement, and the return type has\n-\t  variable size, because in this case the gimplifier cannot create the\n-\t  temporary, or more generally is simply an aggregate type, because the\n-\t  gimplifier would create the temporary in the outermost scope instead\n-\t  of locally.\n+\t  renaming declaration, nor a return statement, nor an allocator, and\n+\t  the return type has variable size because in this case the gimplifier\n+\t  cannot create the temporary, or more generally is simply an aggregate\n+\t  type, because the gimplifier would then create the temporary in the\n+\t  outermost scope instead of locally.\n \n        3. There is a target and it is a slice or an array with fixed size,\n \t  and the return type has variable size, because the gimplifier\n@@ -4361,6 +4361,8 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t      && Nkind (Parent (gnat_node)) != N_Object_Declaration\n \t      && Nkind (Parent (gnat_node)) != N_Object_Renaming_Declaration\n \t      && Nkind (Parent (gnat_node)) != N_Simple_Return_Statement\n+\t      && !(Nkind (Parent (gnat_node)) == N_Qualified_Expression\n+\t\t   && Nkind (Parent (Parent (gnat_node))) == N_Allocator)\n \t      && AGGREGATE_TYPE_P (gnu_result_type)\n \t      && !TYPE_IS_FAT_POINTER_P (gnu_result_type))\n \t  || (gnu_target"}]}