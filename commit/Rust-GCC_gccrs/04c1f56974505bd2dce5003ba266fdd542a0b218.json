{"sha": "04c1f56974505bd2dce5003ba266fdd542a0b218", "node_id": "C_kwDOANBUbNoAKDA0YzFmNTY5NzQ1MDViZDJkY2U1MDAzYmEyNjZmZGQ1NDJhMGIyMTg", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-12-17T12:35:03Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-12-17T16:28:48Z"}, "message": "add script to graph the changes over time", "tree": {"sha": "f1350a31415aa81108461e634e907cb8f2a2758d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1350a31415aa81108461e634e907cb8f2a2758d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04c1f56974505bd2dce5003ba266fdd542a0b218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04c1f56974505bd2dce5003ba266fdd542a0b218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04c1f56974505bd2dce5003ba266fdd542a0b218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04c1f56974505bd2dce5003ba266fdd542a0b218/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8a345642a2a150a35b68e2f19b90abf105700c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a345642a2a150a35b68e2f19b90abf105700c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a345642a2a150a35b68e2f19b90abf105700c5"}], "stats": {"total": 171, "additions": 171, "deletions": 0}, "files": [{"sha": "c14cf14fa5e1a051883def976d2ddc82883179f6", "filename": "gcc/rust/monthly-diff.py", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04c1f56974505bd2dce5003ba266fdd542a0b218/gcc%2Frust%2Fmonthly-diff.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04c1f56974505bd2dce5003ba266fdd542a0b218/gcc%2Frust%2Fmonthly-diff.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fmonthly-diff.py?ref=04c1f56974505bd2dce5003ba266fdd542a0b218", "patch": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+import matplotlib\n+import subprocess\n+import sys\n+import re\n+import os\n+\n+\n+try:\n+    number_of_weeks = int(sys.argv[1])\n+except Exception as e:\n+    print(\"script requires an integer argument for the number of weeks\")\n+    sys.exit(-1)\n+\n+\n+cwd_is_root_repo = os.path.isdir('.git')\n+if not cwd_is_root_repo:\n+    print(\"script must be ran from the root of the repo\")\n+    sys.exit(-1)\n+    \n+\n+change_list = []\n+for i in range(number_of_weeks):\n+    since = \"%i weeks ago\" % (i + 1)\n+    until = \"%i weeks ago\" % i if i > 0 else None\n+\n+    command = [ \"git\", \"whatchanged\", \"--since=%s\" % since ]\n+    if until is not None:\n+        command.append(\"--until=%s\" % until)\n+\n+    specific_paths = [ 'gcc/rust', 'gcc/testsuite/rust', 'gcc/testsuite/rust.test' ]\n+    command += ['--'] + specific_paths\n+    \n+    result = subprocess.run(\n+        command, capture_output=True, text=True\n+    )\n+    raw_diff = result.stdout\n+    \n+    commit_lines = re.findall('commit [a-z0-9]{40}', raw_diff)\n+    commit_shas = list(map(lambda i: i.split(' ')[1], commit_lines))\n+\n+    changes = {\n+        'files_changed': 0,\n+        'insertions': 0,\n+        'deletions': 0,\n+        'contributors': set(),\n+        'contributions': list()\n+    }\n+\n+    short_stat_out = None\n+    if len(commit_shas) > 0:\n+        if len(commit_shas) == 1:\n+            short_stat_command = [ 'git', 'show', '%s' % commit_shas[0], '--shortstat' ]\n+            result = subprocess.run(\n+                short_stat_command, capture_output=True, text=True\n+            )\n+            raw_short_stat = result.stdout\n+            short_stat_out = raw_short_stat.split('\\n')[-2].strip()\n+        \n+        else:\n+            from_sha = commit_shas[-1]\n+            to_sha = commit_shas[0]\n+            short_stat_command = [ 'git', 'diff', '%s..%s' % (from_sha, to_sha), '--shortstat' ]\n+            result = subprocess.run(\n+                short_stat_command, capture_output=True, text=True\n+            )\n+            raw_short_stat = result.stdout\n+            short_stat_out = raw_short_stat.strip()\n+\n+    \n+    if short_stat_out is not None:\n+        # pull out the numbers via regex\n+        search = re.findall('[0-9]* file', short_stat_out)\n+        if search is not None:\n+            changes['files_changed'] = int(search[0].split(' ')[0])\n+\n+        search = re.findall('[0-9]* insertion', short_stat_out)\n+        if search is not None:\n+            changes['insertions'] = int(search[0].split(' ')[0])\n+\n+        search = re.findall('[0-9]* deletion', short_stat_out)\n+        if search is not None:\n+            if len(search) > 0:\n+                changes['deletions'] = int(search[0].split(' ')[0])\n+\n+    \n+    # figure out the unique contributors each week\n+    for sha in commit_shas:\n+        show_command = [ \"git\", \"show\", \"-s\", sha ]\n+        result = subprocess.run(\n+            show_command, capture_output=True, text=True\n+        )\n+        author_str = re.findall('Author: [a-zA-Z0-9-\u00e8 ]* <[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+>', result.stdout)\n+        author_tokens = author_str[0].split(' ')\n+        author = \" \".join(author_tokens[1:])\n+        changes['contributors'].add(author)\n+        changes['contributions'].append(author)\n+        \n+\n+    # lets see it then\n+    print(changes)\n+\n+    # hack to get rid of the gcc-merge\n+    if changes['files_changed'] == 23432:\n+        change_list.append(change_list[-1])\n+    else:\n+        change_list.append(changes)\n+\n+\n+unique_contributors = set()\n+for i in change_list:\n+    for y in i['contributors']:\n+        unique_contributors.add(y)\n+\n+# calculate average lines added and removed per week\n+total_ins_lines = sum(map(lambda i: i['insertions'], change_list))\n+avg_ins_lines_per_week = total_ins_lines / float(len(change_list))\n+\n+total_del_lines = sum(map(lambda i: i['deletions'], change_list))\n+avg_del_lines_per_week = total_del_lines / float(len(change_list))\n+\n+print(\"average lines added per week:\", avg_ins_lines_per_week)\n+print(\"average lines deleted per week:\", avg_del_lines_per_week)\n+\n+# find number of contributions per unique_contributor\n+num_contribs = {}\n+for i in unique_contributors:\n+    num_contribs[i] = 0\n+    for change in change_list:\n+        for y in change['contributions']:\n+            if y == i:\n+                num_contribs[i] = num_contribs[i] + 1\n+\n+\n+contribs = []\n+for i in num_contribs:\n+    contribs.append((i, num_contribs[i]))\n+\n+contribs.sort(key=lambda i: i[1], reverse=True)\n+for i in contribs:\n+    print(i[0], i[1])\n+    \n+                \n+# graph the change_list\n+weeks = list(map(lambda i: i, range(number_of_weeks)))\n+insertions = list(map(lambda i: i['insertions'], change_list))\n+deletions = list(map(lambda i: i['deletions'], change_list))\n+files_changed = list(map(lambda i: i['files_changed'], change_list))\n+num_contributors = list(map(lambda i: len(i['contributors']), change_list))\n+\n+weeks.reverse()\n+insertions.reverse()\n+deletions.reverse()\n+files_changed.reverse()\n+num_contributors.reverse()\n+\n+fix, axs = plt.subplots(2)\n+\n+axs[0].set_title(\"number of lines added + removed\")\n+axs[0].plot(weeks, insertions)\n+axs[0].plot(weeks, deletions)\n+# plt.plot(weeks, files_changed)\n+\n+axs[1].set_title(\"number of contributors\")\n+axs[1].plot(weeks, num_contributors)\n+\n+plt.show()"}]}