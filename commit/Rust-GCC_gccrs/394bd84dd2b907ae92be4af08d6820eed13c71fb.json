{"sha": "394bd84dd2b907ae92be4af08d6820eed13c71fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk0YmQ4NGRkMmI5MDdhZTkyYmU0YWYwOGQ2ODIwZWVkMTNjNzFmYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-06-18T23:27:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-06-18T23:27:40Z"}, "message": "re PR testsuite/40488 (Revision 148642 caused extra failures)\n\n        PR 40488\n        * tree-pass.h (TDF_ASMNAME): New.\n        * tree-dump.c (dump_options): Add asmname.\n        * doc/invoke.texi: Document it.\n\n        * tree-pretty-print.c (maybe_dump_asm_name): Merge into...\n        (dump_decl_name): ...here.\n        (dump_function_name): New flags arg; mind TDF_ASMNAME.\n        (dump_generic_node): Update dump_function_name calls.\n        (print_call_name): New flags arg; update all dump calls.\n        * diagnostic.h (print_call_name): Update.\n        * gimple-pretty-print.c (dump_gimple_call): Update.\n\nFrom-SVN: r148685", "tree": {"sha": "cf65454be302c6501997056e75641b5889c7ca52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf65454be302c6501997056e75641b5889c7ca52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/394bd84dd2b907ae92be4af08d6820eed13c71fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394bd84dd2b907ae92be4af08d6820eed13c71fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394bd84dd2b907ae92be4af08d6820eed13c71fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394bd84dd2b907ae92be4af08d6820eed13c71fb/comments", "author": null, "committer": null, "parents": [{"sha": "2a457a9b4fa448489522d39390e857541a95abd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a457a9b4fa448489522d39390e857541a95abd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a457a9b4fa448489522d39390e857541a95abd5"}], "stats": {"total": 115, "additions": 54, "deletions": 61}, "files": [{"sha": "0633e2302743a19d9793b559d8761537d34ad7eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=394bd84dd2b907ae92be4af08d6820eed13c71fb", "patch": "@@ -1,3 +1,18 @@\n+2009-06-18  Richard Henderson  <rth@redhat.com>\n+\n+\tPR 40488\n+\t* tree-pass.h (TDF_ASMNAME): New.\n+\t* tree-dump.c (dump_options): Add asmname.\n+\t* doc/invoke.texi: Document it.\n+\n+\t* tree-pretty-print.c (maybe_dump_asm_name): Merge into...\n+\t(dump_decl_name): ...here.\n+\t(dump_function_name): New flags arg; mind TDF_ASMNAME.\n+\t(dump_generic_node): Update dump_function_name calls.\n+\t(print_call_name): New flags arg; update all dump calls.\n+\t* diagnostic.h (print_call_name): Update.\n+\t* gimple-pretty-print.c (dump_gimple_call): Update.\n+\n 2009-06-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/40470"}, {"sha": "b9bff22c24bf1a0dbdedf70bc1ed46e7ed4f7e70", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=394bd84dd2b907ae92be4af08d6820eed13c71fb", "patch": "@@ -226,7 +226,7 @@ extern void print_generic_expr (FILE *, tree, int);\n extern void print_generic_decl (FILE *, tree, int);\n extern void debug_c_tree (tree);\n extern void dump_omp_clauses (pretty_printer *, tree, int, int);\n-extern void print_call_name (pretty_printer *, tree);\n+extern void print_call_name (pretty_printer *, tree, int);\n \n /* In gimple-pretty-print.c  */\n extern void debug_generic_expr (tree);"}, {"sha": "5df3513803fb75f4ffda85e29468e800ce54047a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=394bd84dd2b907ae92be4af08d6820eed13c71fb", "patch": "@@ -5094,6 +5094,10 @@ meaningful will be ignored.  The following options are available\n Print the address of each node.  Usually this is not meaningful as it\n changes according to the environment and source file.  Its primary use\n is for tying up a dump file with a debug environment.\n+@item asmname\n+If @code{DECL_ASSEMBLER_NAME} has been set for a given decl, use that\n+in the dump instead of @code{DECL_NAME}.  Its primary use is ease of\n+use working backward from mangled names in the assembly file.\n @item slim\n Inhibit dumping of members of a scope or body of a function merely\n because that scope has been reached.  Only dump such items when they"}, {"sha": "c6f0c658361bbf0e44547a450f84fadb69934b36", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=394bd84dd2b907ae92be4af08d6820eed13c71fb", "patch": "@@ -508,7 +508,7 @@ dump_gimple_call (pretty_printer *buffer, gimple gs, int spc, int flags)\n \n \t  pp_space (buffer);\n         }\n-      print_call_name (buffer, gimple_call_fn (gs));\n+      print_call_name (buffer, gimple_call_fn (gs), flags);\n       pp_string (buffer, \" (\");\n       dump_gimple_call_args (buffer, gs, flags);\n       pp_character (buffer, ')');"}, {"sha": "1cb650442b77da2ffd6452771cf8a9d0b66a87db", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=394bd84dd2b907ae92be4af08d6820eed13c71fb", "patch": "@@ -803,6 +803,7 @@ struct dump_option_value_info\n static const struct dump_option_value_info dump_options[] =\n {\n   {\"address\", TDF_ADDRESS},\n+  {\"asmname\", TDF_ASMNAME},\n   {\"slim\", TDF_SLIM},\n   {\"raw\", TDF_RAW},\n   {\"graph\", TDF_GRAPH},"}, {"sha": "db3ebce28cc93a1239b6a1699429bf8750f9252a", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=394bd84dd2b907ae92be4af08d6820eed13c71fb", "patch": "@@ -75,6 +75,9 @@ enum tree_dump_index\n \t\t\t\t\t   dumper to print stmts.  */\n #define TDF_RHS_ONLY\t(1 << 17)\t/* a flag to only print the RHS of\n \t\t\t\t\t   a gimple stmt.  */\n+#define TDF_ASMNAME\t(1 << 18)\t/* display asm names of decls  */\n+\n+\n /* In tree-dump.c */\n \n extern char *get_dump_file_name (int);"}, {"sha": "142690777153f4f2fea97233bbd155ee9ed8e588", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 29, "deletions": 59, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394bd84dd2b907ae92be4af08d6820eed13c71fb/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=394bd84dd2b907ae92be4af08d6820eed13c71fb", "patch": "@@ -155,72 +155,42 @@ print_generic_expr (FILE *file, tree t, int flags)\n   dump_generic_node (&buffer, t, 0, flags, false);\n }\n \n-/* Dump the assembly name of a decl node if it's sufficiently different\n-   from the decl name.  */\n-\n-static void\n-maybe_dump_asm_name (pretty_printer *buffer, tree node, int flags)\n-{\n-  tree n, a;\n-\n-  if (flags & TDF_SLIM)\n-    return;\n-  if (DECL_NAME (node) == NULL || !DECL_ASSEMBLER_NAME_SET_P (node))\n-    return;\n-\n-  n = DECL_NAME (node);\n-  a = DECL_ASSEMBLER_NAME (node);\n-  if (n == a)\n-    return;\n-  if (strncmp (IDENTIFIER_POINTER (n), \"__builtin_\", 10) == 0)\n-    return;\n-\n-  pp_space (buffer);\n-  pp_character (buffer, '[');\n-  pp_tree_identifier (buffer, a);\n-  pp_character (buffer, ']');\n-}\n-\n /* Dump the name of a _DECL node and its DECL_UID if TDF_UID is set\n    in FLAGS.  */\n \n static void\n dump_decl_name (pretty_printer *buffer, tree node, int flags)\n {\n-  tree t = node;\n-\n-  if (DECL_NAME (t))\n-    pp_tree_identifier (buffer, DECL_NAME (t));\n-  if ((flags & TDF_UID)\n-      || DECL_NAME (t) == NULL_TREE)\n+  if (DECL_NAME (node))\n+    {\n+      if ((flags & TDF_ASMNAME) && DECL_ASSEMBLER_NAME_SET_P (node))\n+\tpp_tree_identifier (buffer, DECL_ASSEMBLER_NAME (node));\n+      else\n+\tpp_tree_identifier (buffer, DECL_NAME (node));\n+    }\n+  if ((flags & TDF_UID) || DECL_NAME (node) == NULL_TREE)\n     {\n-      if (TREE_CODE (t) == LABEL_DECL\n-          && LABEL_DECL_UID (t) != -1)\n-        pp_printf (buffer, \"L.%d\", (int) LABEL_DECL_UID (t));\n+      if (TREE_CODE (node) == LABEL_DECL && LABEL_DECL_UID (node) != -1)\n+        pp_printf (buffer, \"L.%d\", (int) LABEL_DECL_UID (node));\n       else\n \t{\n-\t  char c = TREE_CODE (t) == CONST_DECL ? 'C' : 'D';\n-\t  pp_printf (buffer, \"%c.%u\", c, DECL_UID (t));\n+\t  char c = TREE_CODE (node) == CONST_DECL ? 'C' : 'D';\n+\t  pp_printf (buffer, \"%c.%u\", c, DECL_UID (node));\n \t}\n     }\n-\n-  maybe_dump_asm_name (buffer, node, flags);\n }\n \n /* Like the above, but used for pretty printing function calls.  */\n \n static void\n-dump_function_name (pretty_printer *buffer, tree node)\n+dump_function_name (pretty_printer *buffer, tree node, int flags)\n {\n-  if (DECL_NAME (node))\n-    {\n-      if (TREE_CODE (node) == NOP_EXPR)\n-\tnode = TREE_OPERAND (node, 0);\n-      pp_string (buffer, lang_hooks.decl_printable_name (node, 1));\n-      maybe_dump_asm_name (buffer, node, 0);\n-    }\n+  if (TREE_CODE (node) == NOP_EXPR)\n+    node = TREE_OPERAND (node, 0);\n+  if (DECL_NAME (node) && (flags & TDF_ASMNAME) == 0)\n+    pp_string (buffer, lang_hooks.decl_printable_name (node, 1));\n   else\n-    dump_decl_name (buffer, node, 0);\n+    dump_decl_name (buffer, node, flags);\n }\n \n /* Dump a function declaration.  NODE is the FUNCTION_TYPE.  BUFFER, SPC and\n@@ -1356,7 +1326,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       break;\n \n     case CALL_EXPR:\n-      print_call_name (buffer, CALL_EXPR_FN (node));\n+      print_call_name (buffer, CALL_EXPR_FN (node), flags);\n \n       /* Print parameters.  */\n       pp_space (buffer);\n@@ -2693,7 +2663,7 @@ op_symbol (const_tree op)\n    the gimple_call_fn of a GIMPLE_CALL.  */\n \n void\n-print_call_name (pretty_printer *buffer, tree node)\n+print_call_name (pretty_printer *buffer, tree node, int flags)\n {\n   tree op0 = node;\n \n@@ -2706,7 +2676,7 @@ print_call_name (pretty_printer *buffer, tree node)\n     case VAR_DECL:\n     case PARM_DECL:\n     case FUNCTION_DECL:\n-      dump_function_name (buffer, op0);\n+      dump_function_name (buffer, op0, flags);\n       break;\n \n     case ADDR_EXPR:\n@@ -2717,20 +2687,20 @@ print_call_name (pretty_printer *buffer, tree node)\n \n     case COND_EXPR:\n       pp_string (buffer, \"(\");\n-      dump_generic_node (buffer, TREE_OPERAND (op0, 0), 0, 0, false);\n+      dump_generic_node (buffer, TREE_OPERAND (op0, 0), 0, flags, false);\n       pp_string (buffer, \") ? \");\n-      dump_generic_node (buffer, TREE_OPERAND (op0, 1), 0, 0, false);\n+      dump_generic_node (buffer, TREE_OPERAND (op0, 1), 0, flags, false);\n       pp_string (buffer, \" : \");\n-      dump_generic_node (buffer, TREE_OPERAND (op0, 2), 0, 0, false);\n+      dump_generic_node (buffer, TREE_OPERAND (op0, 2), 0, flags, false);\n       break;\n \n     case COMPONENT_REF:\n       /* The function is a pointer contained in a structure.  */\n       if (TREE_CODE (TREE_OPERAND (op0, 0)) == INDIRECT_REF ||\n \t  TREE_CODE (TREE_OPERAND (op0, 0)) == VAR_DECL)\n-\tdump_function_name (buffer, TREE_OPERAND (op0, 1));\n+\tdump_function_name (buffer, TREE_OPERAND (op0, 1), flags);\n       else\n-\tdump_generic_node (buffer, TREE_OPERAND (op0, 0), 0, 0, false);\n+\tdump_generic_node (buffer, TREE_OPERAND (op0, 0), 0, flags, false);\n       /* else\n \t We can have several levels of structures and a function\n \t pointer inside.  This is not implemented yet...  */\n@@ -2739,14 +2709,14 @@ print_call_name (pretty_printer *buffer, tree node)\n \n     case ARRAY_REF:\n       if (TREE_CODE (TREE_OPERAND (op0, 0)) == VAR_DECL)\n-\tdump_function_name (buffer, TREE_OPERAND (op0, 0));\n+\tdump_function_name (buffer, TREE_OPERAND (op0, 0), flags);\n       else\n-\tdump_generic_node (buffer, op0, 0, 0, false);\n+\tdump_generic_node (buffer, op0, 0, flags, false);\n       break;\n \n     case SSA_NAME:\n     case OBJ_TYPE_REF:\n-      dump_generic_node (buffer, op0, 0, 0, false);\n+      dump_generic_node (buffer, op0, 0, flags, false);\n       break;\n \n     default:"}]}